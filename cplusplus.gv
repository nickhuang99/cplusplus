// Generated by GNU Bison 3.8.2.9-6571.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <https://www.gnu.org/software/bison/>.

digraph "cplusplus.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: • result $end\l"]
  0 -> 1 [style=solid label="\"constexpr\""]
  0 -> 2 [style=solid label="\"export\""]
  0 -> 3 [style=solid label="\"extern\""]
  0 -> 4 [style=solid label="IDENTIFIER"]
  0 -> 5 [style=solid label="\"inline\""]
  0 -> 6 [style=solid label="\"::\""]
  0 -> 7 [style=solid label="\"template\""]
  0 -> 8 [style=solid label="\"typename\""]
  0 -> 9 [style=solid label="\"virtual\""]
  0 -> 10 [style=solid label="\"using\""]
  0 -> 11 [style=solid label="\";\""]
  0 -> 12 [style=solid label="\"class\""]
  0 -> 13 [style=solid label="\"struct\""]
  0 -> 14 [style=solid label="\"union\""]
  0 -> 15 [style=solid label="\"const\""]
  0 -> 16 [style=solid label="\"volatile\""]
  0 -> 17 [style=solid label="\"friend\""]
  0 -> 18 [style=solid label="\"typedef\""]
  0 -> 19 [style=solid label="\"consteval\""]
  0 -> 20 [style=solid label="\"constinit\""]
  0 -> 21 [style=solid label="\"decltype\""]
  0 -> 22 [style=solid label="\"enum\""]
  0 -> 23 [style=solid label="\"explicit\""]
  0 -> 24 [style=solid label="\"module\""]
  0 -> 25 [style=solid label="\"import\""]
  0 -> 26 [style=solid label="\"namespace\""]
  0 -> 27 [style=solid label="\"char\""]
  0 -> 28 [style=solid label="\"char8_t\""]
  0 -> 29 [style=solid label="\"char16_t\""]
  0 -> 30 [style=solid label="\"char32_t\""]
  0 -> 31 [style=solid label="\"wchar_t\""]
  0 -> 32 [style=solid label="\"bool\""]
  0 -> 33 [style=solid label="\"short\""]
  0 -> 34 [style=solid label="\"int\""]
  0 -> 35 [style=solid label="\"long\""]
  0 -> 36 [style=solid label="\"signed\""]
  0 -> 37 [style=solid label="\"unsigned\""]
  0 -> 38 [style=solid label="\"float\""]
  0 -> 39 [style=solid label="\"double\""]
  0 -> 40 [style=solid label="\"void\""]
  0 -> 41 [style=solid label="\"static_assert\""]
  0 -> 42 [style=solid label="\"static\""]
  0 -> 43 [style=solid label="\"thread_local\""]
  0 -> 44 [style=solid label="\"mutable\""]
  0 -> 45 [style=dashed label="EXTERN-opt"]
  0 -> 46 [style=dashed label="INLINE-opt"]
  0 -> 47 [style=dashed label="alias-declaration"]
  0 -> 48 [style=dashed label="asm-declaration"]
  0 -> 49 [style=dashed label="attribute-declaration"]
  0 -> 50 [style=dashed label="attribute-specifier-seq"]
  0 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  0 -> 52 [style=dashed label="block-declaration"]
  0 -> 53 [style=dashed label="class-head"]
  0 -> 54 [style=dashed label="class-key"]
  0 -> 55 [style=dashed label="class-name"]
  0 -> 56 [style=dashed label="class-specifier"]
  0 -> 57 [style=dashed label="cv-qualifier"]
  0 -> 58 [style=dashed label="decl-specifier"]
  0 -> 59 [style=dashed label="decl-specifier-seq"]
  0 -> 60 [style=dashed label="declaration"]
  0 -> 61 [style=dashed label="declaration-seq"]
  0 -> 62 [style=dashed label="declaration-seq-opt"]
  0 -> 63 [style=dashed label="decltype-specifier"]
  0 -> 64 [style=dashed label="deduction-guide"]
  0 -> 65 [style=dashed label="defining-type-specifier"]
  0 -> 66 [style=dashed label="elaborated-enum-specifier"]
  0 -> 67 [style=dashed label="elaborated-type-specifier"]
  0 -> 68 [style=dashed label="empty-declaration"]
  0 -> 69 [style=dashed label="enum-head"]
  0 -> 70 [style=dashed label="enum-key"]
  0 -> 71 [style=dashed label="enum-name"]
  0 -> 72 [style=dashed label="enum-specifier"]
  0 -> 73 [style=dashed label="explicit-instantiation"]
  0 -> 74 [style=dashed label="explicit-specialization"]
  0 -> 75 [style=dashed label="explicit-specifier"]
  0 -> 76 [style=dashed label="explicit-specifier-opt"]
  0 -> 77 [style=dashed label="export-declaration"]
  0 -> 78 [style=dashed label="function-definition"]
  0 -> 79 [style=dashed label="function-specifier"]
  0 -> 80 [style=dashed label="global-module-fragment"]
  0 -> 81 [style=dashed label="global-module-fragment-opt"]
  0 -> 82 [style=dashed label="linkage-specification"]
  0 -> 83 [style=dashed label="module-import-declaration"]
  0 -> 84 [style=dashed label="named-namespace-definition"]
  0 -> 85 [style=dashed label="namespace-alias"]
  0 -> 86 [style=dashed label="namespace-alias-definition"]
  0 -> 87 [style=dashed label="namespace-definition"]
  0 -> 88 [style=dashed label="namespace-name"]
  0 -> 89 [style=dashed label="nested-name-specifier"]
  0 -> 90 [style=dashed label="nested-name-specifier-opt"]
  0 -> 91 [style=dashed label="nested-namespace-definition"]
  0 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  0 -> 93 [style=dashed label="opaque-enum-declaration"]
  0 -> 94 [style=dashed label="placeholder-type-specifier"]
  0 -> 95 [style=dashed label="simple-declaration"]
  0 -> 96 [style=dashed label="simple-template-id"]
  0 -> 97 [style=dashed label="simple-type-specifier"]
  0 -> 98 [style=dashed label="static_assert-declaration"]
  0 -> 99 [style=dashed label="storage-class-specifier"]
  0 -> 100 [style=dashed label="template-declaration"]
  0 -> 101 [style=dashed label="template-head"]
  0 -> 102 [style=dashed label="template-name"]
  0 -> 103 [style=dashed label="translation-unit"]
  0 -> 104 [style=dashed label="type-constraint"]
  0 -> 105 [style=dashed label="type-constraint-opt"]
  0 -> 106 [style=dashed label="type-name"]
  0 -> 107 [style=dashed label="type-specifier"]
  0 -> 108 [style=dashed label="typedef-name"]
  0 -> 109 [style=dashed label="typename-specifier"]
  0 -> 110 [style=dashed label="unnamed-namespace-definition"]
  0 -> 111 [style=dashed label="using-declaration"]
  0 -> 112 [style=dashed label="using-directive"]
  0 -> 113 [style=dashed label="using-enum-declaration"]
  0 -> 114 [style=dashed label="result"]
  0 -> "0R9d" [label="[\"template\"]", style=solid]
 "0R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  0 -> "0R13d" [label="[\"namespace\"]", style=solid]
 "0R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  0 -> "0R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "0R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  0 -> "0R83" [label="[]", style=solid]
 "0R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  0 -> "0R210" [label="[$end]", style=solid]
 "0R210" [label="R210", fillcolor=3, shape=diamond, style=filled]
  0 -> "0R270d" [label="[IDENTIFIER]", style=solid]
 "0R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  0 -> "0R336d" [label="[\"export\", \"module\"]", style=solid]
 "0R336d" [label="R336", fillcolor=5, shape=diamond, style=filled]
  0 -> "0R469d" [label="[IDENTIFIER]", style=solid]
 "0R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  0 -> "0R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "0R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1 [label="State 1\n\l187 decl-specifier: \"constexpr\" •\l"]
  1 -> "1R187" [style=solid]
 "1R187" [label="R187", fillcolor=3, shape=diamond, style=filled]
  2 [label="State 2\n\l272 export-declaration: \"export\" • declaration\l273                   | \"export\" • \"{\" declaration-seq-opt \"}\"\l274                   | \"export\" • module-import-declaration\l"]
  2 -> 1 [style=solid label="\"constexpr\""]
  2 -> 2 [style=solid label="\"export\""]
  2 -> 3 [style=solid label="\"extern\""]
  2 -> 4 [style=solid label="IDENTIFIER"]
  2 -> 5 [style=solid label="\"inline\""]
  2 -> 6 [style=solid label="\"::\""]
  2 -> 7 [style=solid label="\"template\""]
  2 -> 8 [style=solid label="\"typename\""]
  2 -> 9 [style=solid label="\"virtual\""]
  2 -> 10 [style=solid label="\"using\""]
  2 -> 11 [style=solid label="\";\""]
  2 -> 115 [style=solid label="\"{\""]
  2 -> 12 [style=solid label="\"class\""]
  2 -> 13 [style=solid label="\"struct\""]
  2 -> 14 [style=solid label="\"union\""]
  2 -> 15 [style=solid label="\"const\""]
  2 -> 16 [style=solid label="\"volatile\""]
  2 -> 17 [style=solid label="\"friend\""]
  2 -> 18 [style=solid label="\"typedef\""]
  2 -> 19 [style=solid label="\"consteval\""]
  2 -> 20 [style=solid label="\"constinit\""]
  2 -> 21 [style=solid label="\"decltype\""]
  2 -> 22 [style=solid label="\"enum\""]
  2 -> 23 [style=solid label="\"explicit\""]
  2 -> 25 [style=solid label="\"import\""]
  2 -> 26 [style=solid label="\"namespace\""]
  2 -> 27 [style=solid label="\"char\""]
  2 -> 28 [style=solid label="\"char8_t\""]
  2 -> 29 [style=solid label="\"char16_t\""]
  2 -> 30 [style=solid label="\"char32_t\""]
  2 -> 31 [style=solid label="\"wchar_t\""]
  2 -> 32 [style=solid label="\"bool\""]
  2 -> 33 [style=solid label="\"short\""]
  2 -> 34 [style=solid label="\"int\""]
  2 -> 35 [style=solid label="\"long\""]
  2 -> 36 [style=solid label="\"signed\""]
  2 -> 37 [style=solid label="\"unsigned\""]
  2 -> 38 [style=solid label="\"float\""]
  2 -> 39 [style=solid label="\"double\""]
  2 -> 40 [style=solid label="\"void\""]
  2 -> 41 [style=solid label="\"static_assert\""]
  2 -> 42 [style=solid label="\"static\""]
  2 -> 43 [style=solid label="\"thread_local\""]
  2 -> 44 [style=solid label="\"mutable\""]
  2 -> 45 [style=dashed label="EXTERN-opt"]
  2 -> 46 [style=dashed label="INLINE-opt"]
  2 -> 47 [style=dashed label="alias-declaration"]
  2 -> 48 [style=dashed label="asm-declaration"]
  2 -> 49 [style=dashed label="attribute-declaration"]
  2 -> 50 [style=dashed label="attribute-specifier-seq"]
  2 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  2 -> 52 [style=dashed label="block-declaration"]
  2 -> 53 [style=dashed label="class-head"]
  2 -> 54 [style=dashed label="class-key"]
  2 -> 55 [style=dashed label="class-name"]
  2 -> 56 [style=dashed label="class-specifier"]
  2 -> 57 [style=dashed label="cv-qualifier"]
  2 -> 58 [style=dashed label="decl-specifier"]
  2 -> 59 [style=dashed label="decl-specifier-seq"]
  2 -> 116 [style=dashed label="declaration"]
  2 -> 63 [style=dashed label="decltype-specifier"]
  2 -> 64 [style=dashed label="deduction-guide"]
  2 -> 65 [style=dashed label="defining-type-specifier"]
  2 -> 66 [style=dashed label="elaborated-enum-specifier"]
  2 -> 67 [style=dashed label="elaborated-type-specifier"]
  2 -> 68 [style=dashed label="empty-declaration"]
  2 -> 69 [style=dashed label="enum-head"]
  2 -> 70 [style=dashed label="enum-key"]
  2 -> 71 [style=dashed label="enum-name"]
  2 -> 72 [style=dashed label="enum-specifier"]
  2 -> 73 [style=dashed label="explicit-instantiation"]
  2 -> 74 [style=dashed label="explicit-specialization"]
  2 -> 75 [style=dashed label="explicit-specifier"]
  2 -> 76 [style=dashed label="explicit-specifier-opt"]
  2 -> 77 [style=dashed label="export-declaration"]
  2 -> 78 [style=dashed label="function-definition"]
  2 -> 79 [style=dashed label="function-specifier"]
  2 -> 82 [style=dashed label="linkage-specification"]
  2 -> 117 [style=dashed label="module-import-declaration"]
  2 -> 84 [style=dashed label="named-namespace-definition"]
  2 -> 85 [style=dashed label="namespace-alias"]
  2 -> 86 [style=dashed label="namespace-alias-definition"]
  2 -> 87 [style=dashed label="namespace-definition"]
  2 -> 88 [style=dashed label="namespace-name"]
  2 -> 89 [style=dashed label="nested-name-specifier"]
  2 -> 90 [style=dashed label="nested-name-specifier-opt"]
  2 -> 91 [style=dashed label="nested-namespace-definition"]
  2 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  2 -> 93 [style=dashed label="opaque-enum-declaration"]
  2 -> 94 [style=dashed label="placeholder-type-specifier"]
  2 -> 95 [style=dashed label="simple-declaration"]
  2 -> 96 [style=dashed label="simple-template-id"]
  2 -> 97 [style=dashed label="simple-type-specifier"]
  2 -> 98 [style=dashed label="static_assert-declaration"]
  2 -> 99 [style=dashed label="storage-class-specifier"]
  2 -> 100 [style=dashed label="template-declaration"]
  2 -> 101 [style=dashed label="template-head"]
  2 -> 102 [style=dashed label="template-name"]
  2 -> 104 [style=dashed label="type-constraint"]
  2 -> 105 [style=dashed label="type-constraint-opt"]
  2 -> 106 [style=dashed label="type-name"]
  2 -> 107 [style=dashed label="type-specifier"]
  2 -> 108 [style=dashed label="typedef-name"]
  2 -> 109 [style=dashed label="typename-specifier"]
  2 -> 110 [style=dashed label="unnamed-namespace-definition"]
  2 -> 111 [style=dashed label="using-declaration"]
  2 -> 112 [style=dashed label="using-directive"]
  2 -> 113 [style=dashed label="using-enum-declaration"]
  2 -> "2R9d" [label="[\"template\"]", style=solid]
 "2R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R13d" [label="[\"namespace\"]", style=solid]
 "2R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "2R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R83" [label="[]", style=solid]
 "2R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  2 -> "2R270d" [label="[IDENTIFIER]", style=solid]
 "2R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R469d" [label="[IDENTIFIER]", style=solid]
 "2R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "2R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  3 [label="State 3\n\l 10 EXTERN-opt: \"extern\" •\l394 linkage-specification: \"extern\" • string-literal \"{\" declaration-seq-opt \"}\"\l395                      | \"extern\" • string-literal declaration\l692 storage-class-specifier: \"extern\" •\l"]
  3 -> 118 [style=solid label="STRING_LITERAL"]
  3 -> 119 [style=dashed label="string-literal"]
  3 -> "3R10" [label="[\"template\"]", style=solid]
 "3R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  3 -> "3R692" [style=solid]
 "3R692" [label="R692", fillcolor=3, shape=diamond, style=filled]
  4 [label="State 4\n\l139 class-name: IDENTIFIER •\l248 enum-name: IDENTIFIER •\l455 namespace-alias: IDENTIFIER •\l461 namespace-name: IDENTIFIER •\l708 template-name: IDENTIFIER •\l743 typedef-name: IDENTIFIER •\l"]
  4 -> "4R139" [style=solid]
 "4R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  4 -> "4R248d" [label="[\"::\"]", style=solid]
 "4R248d" [label="R248", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R455d" [label="[\"::\"]", style=solid]
 "4R455d" [label="R455", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R461d" [label="[\"::\"]", style=solid]
 "4R461d" [label="R461", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R708" [label="[\"<\"]", style=solid]
 "4R708" [label="R708", fillcolor=3, shape=diamond, style=filled]
  4 -> "4R743d" [label="[\"::\"]", style=solid]
 "4R743d" [label="R743", fillcolor=5, shape=diamond, style=filled]
  5 [label="State 5\n\l 14 INLINE-opt: \"inline\" •\l190 decl-specifier: \"inline\" •\l"]
  5 -> "5R14" [label="[\"namespace\"]", style=solid]
 "5R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  5 -> "5R190" [style=solid]
 "5R190" [label="R190", fillcolor=3, shape=diamond, style=filled]
  6 [label="State 6\n\l463 nested-name-specifier: \"::\" •\l"]
  6 -> "6R463" [style=solid]
 "6R463" [label="R463", fillcolor=3, shape=diamond, style=filled]
  7 [label="State 7\n\l267 explicit-specialization: \"template\" • \"<\" \">\" declaration\l704 template-head: \"template\" • \"<\" template-parameter-list \">\" requires-clause-opt\l"]
  7 -> 120 [style=solid label="\"<\""]
  8 [label="State 8\n\l745 typename-specifier: \"typename\" • nested-name-specifier IDENTIFIER\l746                   | \"typename\" • nested-name-specifier TEMPLATE-opt simple-template-id\l"]
  8 -> 4 [style=solid label="IDENTIFIER"]
  8 -> 6 [style=solid label="\"::\""]
  8 -> 21 [style=solid label="\"decltype\""]
  8 -> 55 [style=dashed label="class-name"]
  8 -> 121 [style=dashed label="decltype-specifier"]
  8 -> 71 [style=dashed label="enum-name"]
  8 -> 85 [style=dashed label="namespace-alias"]
  8 -> 88 [style=dashed label="namespace-name"]
  8 -> 122 [style=dashed label="nested-name-specifier"]
  8 -> 96 [style=dashed label="simple-template-id"]
  8 -> 102 [style=dashed label="template-name"]
  8 -> 106 [style=dashed label="type-name"]
  8 -> 108 [style=dashed label="typedef-name"]
  9 [label="State 9\n\l332 function-specifier: \"virtual\" •\l"]
  9 -> "9R332" [style=solid]
 "9R332" [label="R332", fillcolor=3, shape=diamond, style=filled]
  10 [label="State 10\n\l 44 alias-declaration: \"using\" • IDENTIFIER attribute-specifier-seq-opt \"=\" defining-type-id \";\"\l782 using-declaration: \"using\" • using-declarator-list \";\"\l787 using-enum-declaration: \"using\" • elaborated-enum-specifier \";\"\l"]
  10 -> 123 [style=solid label="IDENTIFIER"]
  10 -> 124 [style=solid label="\"typename\""]
  10 -> 125 [style=solid label="\"enum\""]
  10 -> 126 [style=dashed label="TYPENAME-opt"]
  10 -> 127 [style=dashed label="elaborated-enum-specifier"]
  10 -> 128 [style=dashed label="using-declarator"]
  10 -> 129 [style=dashed label="using-declarator-list"]
  10 -> "10R25d" [label="[IDENTIFIER]", style=solid]
 "10R25d" [label="R25", fillcolor=5, shape=diamond, style=filled]
  10 -> "10R25" [style=solid]
 "10R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  11 [label="State 11\n\l235 empty-declaration: \";\" •\l"]
  11 -> "11R235" [style=solid]
 "11R235" [label="R235", fillcolor=3, shape=diamond, style=filled]
  12 [label="State 12\n\l136 class-key: \"class\" •\l"]
  12 -> "12R136" [style=solid]
 "12R136" [label="R136", fillcolor=3, shape=diamond, style=filled]
  13 [label="State 13\n\l137 class-key: \"struct\" •\l"]
  13 -> "13R137" [style=solid]
 "13R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l138 class-key: \"union\" •\l"]
  14 -> "14R138" [style=solid]
 "14R138" [label="R138", fillcolor=3, shape=diamond, style=filled]
  15 [label="State 15\n\l177 cv-qualifier: \"const\" •\l"]
  15 -> "15R177" [style=solid]
 "15R177" [label="R177", fillcolor=3, shape=diamond, style=filled]
  16 [label="State 16\n\l178 cv-qualifier: \"volatile\" •\l"]
  16 -> "16R178" [style=solid]
 "16R178" [label="R178", fillcolor=3, shape=diamond, style=filled]
  17 [label="State 17\n\l185 decl-specifier: \"friend\" •\l"]
  17 -> "17R185" [style=solid]
 "17R185" [label="R185", fillcolor=3, shape=diamond, style=filled]
  18 [label="State 18\n\l186 decl-specifier: \"typedef\" •\l"]
  18 -> "18R186" [style=solid]
 "18R186" [label="R186", fillcolor=3, shape=diamond, style=filled]
  19 [label="State 19\n\l188 decl-specifier: \"consteval\" •\l"]
  19 -> "19R188" [style=solid]
 "19R188" [label="R188", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l189 decl-specifier: \"constinit\" •\l"]
  20 -> "20R189" [style=solid]
 "20R189" [label="R189", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l216 decltype-specifier: \"decltype\" • \"(\" expression \")\"\l"]
  21 -> 130 [style=solid label="\"(\""]
  22 [label="State 22\n\l230 elaborated-enum-specifier: \"enum\" • nested-name-specifier-opt IDENTIFIER\l245 enum-key: \"enum\" •\l246         | \"enum\" • \"class\"\l247         | \"enum\" • \"struct\"\l"]
  22 -> 4 [style=solid label="IDENTIFIER"]
  22 -> 6 [style=solid label="\"::\""]
  22 -> 131 [style=solid label="\"class\""]
  22 -> 132 [style=solid label="\"struct\""]
  22 -> 21 [style=solid label="\"decltype\""]
  22 -> 55 [style=dashed label="class-name"]
  22 -> 121 [style=dashed label="decltype-specifier"]
  22 -> 71 [style=dashed label="enum-name"]
  22 -> 85 [style=dashed label="namespace-alias"]
  22 -> 88 [style=dashed label="namespace-name"]
  22 -> 133 [style=dashed label="nested-name-specifier"]
  22 -> 134 [style=dashed label="nested-name-specifier-opt"]
  22 -> 96 [style=dashed label="simple-template-id"]
  22 -> 102 [style=dashed label="template-name"]
  22 -> 106 [style=dashed label="type-name"]
  22 -> 108 [style=dashed label="typedef-name"]
  22 -> "22R245d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "22R245d" [label="R245", fillcolor=5, shape=diamond, style=filled]
  22 -> "22R245" [style=solid]
 "22R245" [label="R245", fillcolor=3, shape=diamond, style=filled]
  22 -> "22R469d" [label="[IDENTIFIER]", style=solid]
 "22R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  23 [label="State 23\n\l268 explicit-specifier: \"explicit\" • \"(\" constant-expression \")\"\l269                   | \"explicit\" •\l"]
  23 -> 135 [style=solid label="\"(\""]
  23 -> "23R269d" [label="[\"(\"]", style=solid]
 "23R269d" [label="R269", fillcolor=5, shape=diamond, style=filled]
  23 -> "23R269" [style=solid]
 "23R269" [label="R269", fillcolor=3, shape=diamond, style=filled]
  24 [label="State 24\n\l335 global-module-fragment: \"module\" • \";\" declaration-seq-opt\l"]
  24 -> 136 [style=solid label="\";\""]
  25 [label="State 25\n\l439 module-import-declaration: \"import\" • module-name attribute-specifier-seq-opt \";\"\l440                          | \"import\" • module-partition attribute-specifier-seq-opt \";\"\l441                          | \"import\" • header-name attribute-specifier-seq-opt \";\"\l"]
  25 -> 137 [style=solid label="IDENTIFIER"]
  25 -> 138 [style=solid label="\":\""]
  25 -> 139 [style=solid label="HEADER_NAME"]
  25 -> 140 [style=dashed label="header-name"]
  25 -> 141 [style=dashed label="module-name"]
  25 -> 142 [style=dashed label="module-name-qualifier"]
  25 -> 143 [style=dashed label="module-name-qualifier-opt"]
  25 -> 144 [style=dashed label="module-partition"]
  25 -> "25R445d" [label="[IDENTIFIER]", style=solid]
 "25R445d" [label="R445", fillcolor=5, shape=diamond, style=filled]
  26 [label="State 26\n\l456 namespace-alias-definition: \"namespace\" • IDENTIFIER \"=\" qualified-namespace-specifier \";\"\l471 nested-namespace-definition: \"namespace\" • enclosing-namespace-specifier \"::\" INLINE-opt IDENTIFIER \"{\" namespace-body \"}\"\l"]
  26 -> 145 [style=solid label="IDENTIFIER"]
  26 -> 146 [style=dashed label="enclosing-namespace-specifier"]
  27 [label="State 27\n\l662 simple-type-specifier: \"char\" •\l"]
  27 -> "27R662" [style=solid]
 "27R662" [label="R662", fillcolor=3, shape=diamond, style=filled]
  28 [label="State 28\n\l663 simple-type-specifier: \"char8_t\" •\l"]
  28 -> "28R663" [style=solid]
 "28R663" [label="R663", fillcolor=3, shape=diamond, style=filled]
  29 [label="State 29\n\l664 simple-type-specifier: \"char16_t\" •\l"]
  29 -> "29R664" [style=solid]
 "29R664" [label="R664", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l665 simple-type-specifier: \"char32_t\" •\l"]
  30 -> "30R665" [style=solid]
 "30R665" [label="R665", fillcolor=3, shape=diamond, style=filled]
  31 [label="State 31\n\l666 simple-type-specifier: \"wchar_t\" •\l"]
  31 -> "31R666" [style=solid]
 "31R666" [label="R666", fillcolor=3, shape=diamond, style=filled]
  32 [label="State 32\n\l667 simple-type-specifier: \"bool\" •\l"]
  32 -> "32R667" [style=solid]
 "32R667" [label="R667", fillcolor=3, shape=diamond, style=filled]
  33 [label="State 33\n\l668 simple-type-specifier: \"short\" •\l"]
  33 -> "33R668" [style=solid]
 "33R668" [label="R668", fillcolor=3, shape=diamond, style=filled]
  34 [label="State 34\n\l669 simple-type-specifier: \"int\" •\l"]
  34 -> "34R669" [style=solid]
 "34R669" [label="R669", fillcolor=3, shape=diamond, style=filled]
  35 [label="State 35\n\l670 simple-type-specifier: \"long\" •\l"]
  35 -> "35R670" [style=solid]
 "35R670" [label="R670", fillcolor=3, shape=diamond, style=filled]
  36 [label="State 36\n\l671 simple-type-specifier: \"signed\" •\l"]
  36 -> "36R671" [style=solid]
 "36R671" [label="R671", fillcolor=3, shape=diamond, style=filled]
  37 [label="State 37\n\l672 simple-type-specifier: \"unsigned\" •\l"]
  37 -> "37R672" [style=solid]
 "37R672" [label="R672", fillcolor=3, shape=diamond, style=filled]
  38 [label="State 38\n\l673 simple-type-specifier: \"float\" •\l"]
  38 -> "38R673" [style=solid]
 "38R673" [label="R673", fillcolor=3, shape=diamond, style=filled]
  39 [label="State 39\n\l674 simple-type-specifier: \"double\" •\l"]
  39 -> "39R674" [style=solid]
 "39R674" [label="R674", fillcolor=3, shape=diamond, style=filled]
  40 [label="State 40\n\l675 simple-type-specifier: \"void\" •\l"]
  40 -> "40R675" [style=solid]
 "40R675" [label="R675", fillcolor=3, shape=diamond, style=filled]
  41 [label="State 41\n\l688 static_assert-declaration: \"static_assert\" • \"(\" constant-expression \")\" \";\"\l689                          | \"static_assert\" • \"(\" constant-expression \",\" string-literal \")\" \";\"\l"]
  41 -> 147 [style=solid label="\"(\""]
  42 [label="State 42\n\l690 storage-class-specifier: \"static\" •\l"]
  42 -> "42R690" [style=solid]
 "42R690" [label="R690", fillcolor=3, shape=diamond, style=filled]
  43 [label="State 43\n\l691 storage-class-specifier: \"thread_local\" •\l"]
  43 -> "43R691" [style=solid]
 "43R691" [label="R691", fillcolor=3, shape=diamond, style=filled]
  44 [label="State 44\n\l693 storage-class-specifier: \"mutable\" •\l"]
  44 -> "44R693" [style=solid]
 "44R693" [label="R693", fillcolor=3, shape=diamond, style=filled]
  45 [label="State 45\n\l266 explicit-instantiation: EXTERN-opt • \"template\" declaration\l"]
  45 -> 148 [style=solid label="\"template\""]
  46 [label="State 46\n\l454 named-namespace-definition: INLINE-opt • \"namespace\" attribute-specifier-seq-opt IDENTIFIER \"{\" namespace-body \"}\"\l766 unnamed-namespace-definition: INLINE-opt • \"namespace\" attribute-specifier-seq-opt \"{\" namespace-body \"}\"\l"]
  46 -> 149 [style=solid label="\"namespace\""]
  47 [label="State 47\n\l114 block-declaration: alias-declaration •\l"]
  47 -> "47R114" [style=solid]
 "47R114" [label="R114", fillcolor=3, shape=diamond, style=filled]
  48 [label="State 48\n\l108 block-declaration: asm-declaration •\l"]
  48 -> "48R108" [style=solid]
 "48R108" [label="R108", fillcolor=3, shape=diamond, style=filled]
  49 [label="State 49\n\l206 declaration: attribute-declaration •\l"]
  49 -> "49R206" [style=solid]
 "49R206" [label="R206", fillcolor=3, shape=diamond, style=filled]
  50 [label="State 50\n\l 71 attribute-declaration: attribute-specifier-seq • \";\"\l 84 attribute-specifier-seq-opt: attribute-specifier-seq •\l653 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list \";\"\l"]
  50 -> 1 [style=solid label="\"constexpr\""]
  50 -> 150 [style=solid label="\"extern\""]
  50 -> 4 [style=solid label="IDENTIFIER"]
  50 -> 151 [style=solid label="\"inline\""]
  50 -> 6 [style=solid label="\"::\""]
  50 -> 8 [style=solid label="\"typename\""]
  50 -> 9 [style=solid label="\"virtual\""]
  50 -> 152 [style=solid label="\";\""]
  50 -> 12 [style=solid label="\"class\""]
  50 -> 13 [style=solid label="\"struct\""]
  50 -> 14 [style=solid label="\"union\""]
  50 -> 15 [style=solid label="\"const\""]
  50 -> 16 [style=solid label="\"volatile\""]
  50 -> 17 [style=solid label="\"friend\""]
  50 -> 18 [style=solid label="\"typedef\""]
  50 -> 19 [style=solid label="\"consteval\""]
  50 -> 20 [style=solid label="\"constinit\""]
  50 -> 21 [style=solid label="\"decltype\""]
  50 -> 22 [style=solid label="\"enum\""]
  50 -> 23 [style=solid label="\"explicit\""]
  50 -> 27 [style=solid label="\"char\""]
  50 -> 28 [style=solid label="\"char8_t\""]
  50 -> 29 [style=solid label="\"char16_t\""]
  50 -> 30 [style=solid label="\"char32_t\""]
  50 -> 31 [style=solid label="\"wchar_t\""]
  50 -> 32 [style=solid label="\"bool\""]
  50 -> 33 [style=solid label="\"short\""]
  50 -> 34 [style=solid label="\"int\""]
  50 -> 35 [style=solid label="\"long\""]
  50 -> 36 [style=solid label="\"signed\""]
  50 -> 37 [style=solid label="\"unsigned\""]
  50 -> 38 [style=solid label="\"float\""]
  50 -> 39 [style=solid label="\"double\""]
  50 -> 40 [style=solid label="\"void\""]
  50 -> 42 [style=solid label="\"static\""]
  50 -> 43 [style=solid label="\"thread_local\""]
  50 -> 44 [style=solid label="\"mutable\""]
  50 -> 53 [style=dashed label="class-head"]
  50 -> 54 [style=dashed label="class-key"]
  50 -> 55 [style=dashed label="class-name"]
  50 -> 56 [style=dashed label="class-specifier"]
  50 -> 57 [style=dashed label="cv-qualifier"]
  50 -> 58 [style=dashed label="decl-specifier"]
  50 -> 153 [style=dashed label="decl-specifier-seq"]
  50 -> 63 [style=dashed label="decltype-specifier"]
  50 -> 65 [style=dashed label="defining-type-specifier"]
  50 -> 66 [style=dashed label="elaborated-enum-specifier"]
  50 -> 67 [style=dashed label="elaborated-type-specifier"]
  50 -> 69 [style=dashed label="enum-head"]
  50 -> 154 [style=dashed label="enum-key"]
  50 -> 71 [style=dashed label="enum-name"]
  50 -> 72 [style=dashed label="enum-specifier"]
  50 -> 155 [style=dashed label="explicit-specifier"]
  50 -> 79 [style=dashed label="function-specifier"]
  50 -> 85 [style=dashed label="namespace-alias"]
  50 -> 88 [style=dashed label="namespace-name"]
  50 -> 89 [style=dashed label="nested-name-specifier"]
  50 -> 90 [style=dashed label="nested-name-specifier-opt"]
  50 -> 94 [style=dashed label="placeholder-type-specifier"]
  50 -> 96 [style=dashed label="simple-template-id"]
  50 -> 97 [style=dashed label="simple-type-specifier"]
  50 -> 99 [style=dashed label="storage-class-specifier"]
  50 -> 102 [style=dashed label="template-name"]
  50 -> 104 [style=dashed label="type-constraint"]
  50 -> 105 [style=dashed label="type-constraint-opt"]
  50 -> 106 [style=dashed label="type-name"]
  50 -> 107 [style=dashed label="type-specifier"]
  50 -> 108 [style=dashed label="typedef-name"]
  50 -> 109 [style=dashed label="typename-specifier"]
  50 -> "50R84d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "50R84d" [label="R84", fillcolor=5, shape=diamond, style=filled]
  50 -> "50R84" [style=solid]
 "50R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  50 -> "50R469d" [label="[IDENTIFIER]", style=solid]
 "50R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  50 -> "50R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "50R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  51 [label="State 51\n\l 49 asm-declaration: attribute-specifier-seq-opt • \"asm\" \"(\" string-literal \")\" \";\"\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l330 function-definition: attribute-specifier-seq-opt • decl-specifier-seq-opt declarator virt-specifier-seq-opt function-body\l331                    | attribute-specifier-seq-opt • decl-specifier-seq-opt declarator requires-clause function-body\l487 nodeclspec-function-declaration: attribute-specifier-seq-opt • declarator \";\"\l654 simple-declaration: attribute-specifier-seq-opt • decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" initializer \";\"\l786 using-directive: attribute-specifier-seq-opt • \"using\" \"namespace\" nested-name-specifier-opt namespace-name \";\"\l"]
  51 -> 1 [style=solid label="\"constexpr\""]
  51 -> 156 [style=solid label="\"...\""]
  51 -> 150 [style=solid label="\"extern\""]
  51 -> 4 [style=solid label="IDENTIFIER"]
  51 -> 151 [style=solid label="\"inline\""]
  51 -> 6 [style=solid label="\"::\""]
  51 -> 8 [style=solid label="\"typename\""]
  51 -> 9 [style=solid label="\"virtual\""]
  51 -> 157 [style=solid label="\"using\""]
  51 -> 158 [style=solid label="\"alignas\""]
  51 -> 159 [style=solid label="\"(\""]
  51 -> 160 [style=solid label="\"&\""]
  51 -> 161 [style=solid label="\"asm\""]
  51 -> 162 [style=solid label="\"[\""]
  51 -> 12 [style=solid label="\"class\""]
  51 -> 13 [style=solid label="\"struct\""]
  51 -> 14 [style=solid label="\"union\""]
  51 -> 163 [style=solid label="\"&&\""]
  51 -> 15 [style=solid label="\"const\""]
  51 -> 16 [style=solid label="\"volatile\""]
  51 -> 17 [style=solid label="\"friend\""]
  51 -> 18 [style=solid label="\"typedef\""]
  51 -> 19 [style=solid label="\"consteval\""]
  51 -> 20 [style=solid label="\"constinit\""]
  51 -> 21 [style=solid label="\"decltype\""]
  51 -> 22 [style=solid label="\"enum\""]
  51 -> 23 [style=solid label="\"explicit\""]
  51 -> 164 [style=solid label="\"*\""]
  51 -> 27 [style=solid label="\"char\""]
  51 -> 28 [style=solid label="\"char8_t\""]
  51 -> 29 [style=solid label="\"char16_t\""]
  51 -> 30 [style=solid label="\"char32_t\""]
  51 -> 31 [style=solid label="\"wchar_t\""]
  51 -> 32 [style=solid label="\"bool\""]
  51 -> 33 [style=solid label="\"short\""]
  51 -> 34 [style=solid label="\"int\""]
  51 -> 35 [style=solid label="\"long\""]
  51 -> 36 [style=solid label="\"signed\""]
  51 -> 37 [style=solid label="\"unsigned\""]
  51 -> 38 [style=solid label="\"float\""]
  51 -> 39 [style=solid label="\"double\""]
  51 -> 40 [style=solid label="\"void\""]
  51 -> 42 [style=solid label="\"static\""]
  51 -> 43 [style=solid label="\"thread_local\""]
  51 -> 44 [style=solid label="\"mutable\""]
  51 -> 165 [style=dashed label="ELLIPSIS-opt"]
  51 -> 166 [style=dashed label="alignment-specifier"]
  51 -> 167 [style=dashed label="attribute-specifier"]
  51 -> 53 [style=dashed label="class-head"]
  51 -> 54 [style=dashed label="class-key"]
  51 -> 55 [style=dashed label="class-name"]
  51 -> 56 [style=dashed label="class-specifier"]
  51 -> 57 [style=dashed label="cv-qualifier"]
  51 -> 58 [style=dashed label="decl-specifier"]
  51 -> 168 [style=dashed label="decl-specifier-seq"]
  51 -> 169 [style=dashed label="decl-specifier-seq-opt"]
  51 -> 170 [style=dashed label="declarator"]
  51 -> 171 [style=dashed label="declarator-id"]
  51 -> 63 [style=dashed label="decltype-specifier"]
  51 -> 65 [style=dashed label="defining-type-specifier"]
  51 -> 66 [style=dashed label="elaborated-enum-specifier"]
  51 -> 67 [style=dashed label="elaborated-type-specifier"]
  51 -> 69 [style=dashed label="enum-head"]
  51 -> 154 [style=dashed label="enum-key"]
  51 -> 71 [style=dashed label="enum-name"]
  51 -> 72 [style=dashed label="enum-specifier"]
  51 -> 155 [style=dashed label="explicit-specifier"]
  51 -> 79 [style=dashed label="function-specifier"]
  51 -> 85 [style=dashed label="namespace-alias"]
  51 -> 88 [style=dashed label="namespace-name"]
  51 -> 172 [style=dashed label="nested-name-specifier"]
  51 -> 90 [style=dashed label="nested-name-specifier-opt"]
  51 -> 173 [style=dashed label="noptr-declarator"]
  51 -> 94 [style=dashed label="placeholder-type-specifier"]
  51 -> 174 [style=dashed label="ptr-declarator"]
  51 -> 175 [style=dashed label="ptr-operator"]
  51 -> 96 [style=dashed label="simple-template-id"]
  51 -> 97 [style=dashed label="simple-type-specifier"]
  51 -> 99 [style=dashed label="storage-class-specifier"]
  51 -> 102 [style=dashed label="template-name"]
  51 -> 104 [style=dashed label="type-constraint"]
  51 -> 105 [style=dashed label="type-constraint-opt"]
  51 -> 106 [style=dashed label="type-name"]
  51 -> 107 [style=dashed label="type-specifier"]
  51 -> 108 [style=dashed label="typedef-name"]
  51 -> 109 [style=dashed label="typename-specifier"]
  51 -> "51R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "51R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  51 -> "51R5" [style=solid]
 "51R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  51 -> "51R193d" [label="[\"...\", IDENTIFIER, \"::\", \"(\", \"&\", \"&&\", \"operator\", \"decltype\", \"*\", \"~\"]", style=solid]
 "51R193d" [label="R193", fillcolor=5, shape=diamond, style=filled]
  51 -> "51R469d" [label="[IDENTIFIER]", style=solid]
 "51R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  51 -> "51R722d" [label="[\"decltype\"]", style=solid]
 "51R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  51 -> "51R722" [label="[\"auto\"]", style=solid]
 "51R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  52 [label="State 52\n\l195 declaration: block-declaration •\l"]
  52 -> "52R195" [style=solid]
 "52R195" [label="R195", fillcolor=3, shape=diamond, style=filled]
  53 [label="State 53\n\l144 class-specifier: class-head • \"{\" member-specification-opt \"}\"\l"]
  53 -> 176 [style=solid label="\"{\""]
  54 [label="State 54\n\l133 class-head: class-key • attribute-specifier-seq-opt class-head-name class-virt-specifier-opt base-clause-opt\l134           | class-key • attribute-specifier-seq-opt base-clause-opt\l231 elaborated-type-specifier: class-key • attribute-specifier-seq-opt nested-name-specifier-opt IDENTIFIER\l232                          | class-key • simple-template-id\l233                          | class-key • nested-name-specifier TEMPLATE-opt simple-template-id\l"]
  54 -> 4 [style=solid label="IDENTIFIER"]
  54 -> 6 [style=solid label="\"::\""]
  54 -> 21 [style=solid label="\"decltype\""]
  54 -> 177 [style=dashed label="attribute-specifier-seq"]
  54 -> 178 [style=dashed label="attribute-specifier-seq-opt"]
  54 -> 55 [style=dashed label="class-name"]
  54 -> 121 [style=dashed label="decltype-specifier"]
  54 -> 71 [style=dashed label="enum-name"]
  54 -> 85 [style=dashed label="namespace-alias"]
  54 -> 88 [style=dashed label="namespace-name"]
  54 -> 179 [style=dashed label="nested-name-specifier"]
  54 -> 180 [style=dashed label="simple-template-id"]
  54 -> 102 [style=dashed label="template-name"]
  54 -> 106 [style=dashed label="type-name"]
  54 -> 108 [style=dashed label="typedef-name"]
  54 -> "54R83d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "54R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  54 -> "54R83" [style=solid]
 "54R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  55 [label="State 55\n\l725 type-name: class-name •\l"]
  55 -> "55R725" [style=solid]
 "55R725" [label="R725", fillcolor=3, shape=diamond, style=filled]
  56 [label="State 56\n\l220 defining-type-specifier: class-specifier •\l"]
  56 -> "56R220" [style=solid]
 "56R220" [label="R220", fillcolor=3, shape=diamond, style=filled]
  57 [label="State 57\n\l740 type-specifier: cv-qualifier •\l"]
  57 -> "57R740" [style=solid]
 "57R740" [label="R740", fillcolor=3, shape=diamond, style=filled]
  58 [label="State 58\n\l191 decl-specifier-seq: decl-specifier • attribute-specifier-seq-opt\l192                   | decl-specifier • decl-specifier-seq\l"]
  58 -> 1 [style=solid label="\"constexpr\""]
  58 -> 150 [style=solid label="\"extern\""]
  58 -> 4 [style=solid label="IDENTIFIER"]
  58 -> 151 [style=solid label="\"inline\""]
  58 -> 6 [style=solid label="\"::\""]
  58 -> 8 [style=solid label="\"typename\""]
  58 -> 9 [style=solid label="\"virtual\""]
  58 -> 12 [style=solid label="\"class\""]
  58 -> 13 [style=solid label="\"struct\""]
  58 -> 14 [style=solid label="\"union\""]
  58 -> 15 [style=solid label="\"const\""]
  58 -> 16 [style=solid label="\"volatile\""]
  58 -> 17 [style=solid label="\"friend\""]
  58 -> 18 [style=solid label="\"typedef\""]
  58 -> 19 [style=solid label="\"consteval\""]
  58 -> 20 [style=solid label="\"constinit\""]
  58 -> 21 [style=solid label="\"decltype\""]
  58 -> 22 [style=solid label="\"enum\""]
  58 -> 23 [style=solid label="\"explicit\""]
  58 -> 27 [style=solid label="\"char\""]
  58 -> 28 [style=solid label="\"char8_t\""]
  58 -> 29 [style=solid label="\"char16_t\""]
  58 -> 30 [style=solid label="\"char32_t\""]
  58 -> 31 [style=solid label="\"wchar_t\""]
  58 -> 32 [style=solid label="\"bool\""]
  58 -> 33 [style=solid label="\"short\""]
  58 -> 34 [style=solid label="\"int\""]
  58 -> 35 [style=solid label="\"long\""]
  58 -> 36 [style=solid label="\"signed\""]
  58 -> 37 [style=solid label="\"unsigned\""]
  58 -> 38 [style=solid label="\"float\""]
  58 -> 39 [style=solid label="\"double\""]
  58 -> 40 [style=solid label="\"void\""]
  58 -> 42 [style=solid label="\"static\""]
  58 -> 43 [style=solid label="\"thread_local\""]
  58 -> 44 [style=solid label="\"mutable\""]
  58 -> 177 [style=dashed label="attribute-specifier-seq"]
  58 -> 181 [style=dashed label="attribute-specifier-seq-opt"]
  58 -> 53 [style=dashed label="class-head"]
  58 -> 54 [style=dashed label="class-key"]
  58 -> 55 [style=dashed label="class-name"]
  58 -> 56 [style=dashed label="class-specifier"]
  58 -> 57 [style=dashed label="cv-qualifier"]
  58 -> 58 [style=dashed label="decl-specifier"]
  58 -> 182 [style=dashed label="decl-specifier-seq"]
  58 -> 63 [style=dashed label="decltype-specifier"]
  58 -> 65 [style=dashed label="defining-type-specifier"]
  58 -> 66 [style=dashed label="elaborated-enum-specifier"]
  58 -> 67 [style=dashed label="elaborated-type-specifier"]
  58 -> 69 [style=dashed label="enum-head"]
  58 -> 154 [style=dashed label="enum-key"]
  58 -> 71 [style=dashed label="enum-name"]
  58 -> 72 [style=dashed label="enum-specifier"]
  58 -> 155 [style=dashed label="explicit-specifier"]
  58 -> 79 [style=dashed label="function-specifier"]
  58 -> 85 [style=dashed label="namespace-alias"]
  58 -> 88 [style=dashed label="namespace-name"]
  58 -> 89 [style=dashed label="nested-name-specifier"]
  58 -> 90 [style=dashed label="nested-name-specifier-opt"]
  58 -> 94 [style=dashed label="placeholder-type-specifier"]
  58 -> 96 [style=dashed label="simple-template-id"]
  58 -> 97 [style=dashed label="simple-type-specifier"]
  58 -> 99 [style=dashed label="storage-class-specifier"]
  58 -> 102 [style=dashed label="template-name"]
  58 -> 104 [style=dashed label="type-constraint"]
  58 -> 105 [style=dashed label="type-constraint-opt"]
  58 -> 106 [style=dashed label="type-name"]
  58 -> 107 [style=dashed label="type-specifier"]
  58 -> 108 [style=dashed label="typedef-name"]
  58 -> 109 [style=dashed label="typename-specifier"]
  58 -> "58R83d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "58R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  58 -> "58R83" [style=solid]
 "58R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  58 -> "58R469d" [label="[IDENTIFIER]", style=solid]
 "58R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  58 -> "58R722d" [label="[\"decltype\"]", style=solid]
 "58R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  58 -> "58R722" [label="[\"auto\"]", style=solid]
 "58R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  59 [label="State 59\n\l652 simple-declaration: decl-specifier-seq • init-declarator-list-opt \";\"\l"]
  59 -> 156 [style=solid label="\"...\""]
  59 -> 4 [style=solid label="IDENTIFIER"]
  59 -> 6 [style=solid label="\"::\""]
  59 -> 159 [style=solid label="\"(\""]
  59 -> 160 [style=solid label="\"&\""]
  59 -> 163 [style=solid label="\"&&\""]
  59 -> 21 [style=solid label="\"decltype\""]
  59 -> 164 [style=solid label="\"*\""]
  59 -> 165 [style=dashed label="ELLIPSIS-opt"]
  59 -> 55 [style=dashed label="class-name"]
  59 -> 183 [style=dashed label="declarator"]
  59 -> 171 [style=dashed label="declarator-id"]
  59 -> 121 [style=dashed label="decltype-specifier"]
  59 -> 71 [style=dashed label="enum-name"]
  59 -> 184 [style=dashed label="init-declarator"]
  59 -> 185 [style=dashed label="init-declarator-list"]
  59 -> 186 [style=dashed label="init-declarator-list-opt"]
  59 -> 85 [style=dashed label="namespace-alias"]
  59 -> 88 [style=dashed label="namespace-name"]
  59 -> 187 [style=dashed label="nested-name-specifier"]
  59 -> 173 [style=dashed label="noptr-declarator"]
  59 -> 174 [style=dashed label="ptr-declarator"]
  59 -> 175 [style=dashed label="ptr-operator"]
  59 -> 96 [style=dashed label="simple-template-id"]
  59 -> 102 [style=dashed label="template-name"]
  59 -> 106 [style=dashed label="type-name"]
  59 -> 108 [style=dashed label="typedef-name"]
  59 -> "59R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "59R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  59 -> "59R5" [style=solid]
 "59R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  59 -> "59R355" [label="[\";\"]", style=solid]
 "59R355" [label="R355", fillcolor=3, shape=diamond, style=filled]
  60 [label="State 60\n\l208 declaration-seq: declaration •\l"]
  60 -> "60R208" [style=solid]
 "60R208" [label="R208", fillcolor=3, shape=diamond, style=filled]
  61 [label="State 61\n\l209 declaration-seq: declaration-seq • declaration\l211 declaration-seq-opt: declaration-seq •\l"]
  61 -> 1 [style=solid label="\"constexpr\""]
  61 -> 2 [style=solid label="\"export\""]
  61 -> 3 [style=solid label="\"extern\""]
  61 -> 4 [style=solid label="IDENTIFIER"]
  61 -> 5 [style=solid label="\"inline\""]
  61 -> 6 [style=solid label="\"::\""]
  61 -> 7 [style=solid label="\"template\""]
  61 -> 8 [style=solid label="\"typename\""]
  61 -> 9 [style=solid label="\"virtual\""]
  61 -> 10 [style=solid label="\"using\""]
  61 -> 11 [style=solid label="\";\""]
  61 -> 12 [style=solid label="\"class\""]
  61 -> 13 [style=solid label="\"struct\""]
  61 -> 14 [style=solid label="\"union\""]
  61 -> 15 [style=solid label="\"const\""]
  61 -> 16 [style=solid label="\"volatile\""]
  61 -> 17 [style=solid label="\"friend\""]
  61 -> 18 [style=solid label="\"typedef\""]
  61 -> 19 [style=solid label="\"consteval\""]
  61 -> 20 [style=solid label="\"constinit\""]
  61 -> 21 [style=solid label="\"decltype\""]
  61 -> 22 [style=solid label="\"enum\""]
  61 -> 23 [style=solid label="\"explicit\""]
  61 -> 25 [style=solid label="\"import\""]
  61 -> 26 [style=solid label="\"namespace\""]
  61 -> 27 [style=solid label="\"char\""]
  61 -> 28 [style=solid label="\"char8_t\""]
  61 -> 29 [style=solid label="\"char16_t\""]
  61 -> 30 [style=solid label="\"char32_t\""]
  61 -> 31 [style=solid label="\"wchar_t\""]
  61 -> 32 [style=solid label="\"bool\""]
  61 -> 33 [style=solid label="\"short\""]
  61 -> 34 [style=solid label="\"int\""]
  61 -> 35 [style=solid label="\"long\""]
  61 -> 36 [style=solid label="\"signed\""]
  61 -> 37 [style=solid label="\"unsigned\""]
  61 -> 38 [style=solid label="\"float\""]
  61 -> 39 [style=solid label="\"double\""]
  61 -> 40 [style=solid label="\"void\""]
  61 -> 41 [style=solid label="\"static_assert\""]
  61 -> 42 [style=solid label="\"static\""]
  61 -> 43 [style=solid label="\"thread_local\""]
  61 -> 44 [style=solid label="\"mutable\""]
  61 -> 45 [style=dashed label="EXTERN-opt"]
  61 -> 46 [style=dashed label="INLINE-opt"]
  61 -> 47 [style=dashed label="alias-declaration"]
  61 -> 48 [style=dashed label="asm-declaration"]
  61 -> 49 [style=dashed label="attribute-declaration"]
  61 -> 50 [style=dashed label="attribute-specifier-seq"]
  61 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  61 -> 52 [style=dashed label="block-declaration"]
  61 -> 53 [style=dashed label="class-head"]
  61 -> 54 [style=dashed label="class-key"]
  61 -> 55 [style=dashed label="class-name"]
  61 -> 56 [style=dashed label="class-specifier"]
  61 -> 57 [style=dashed label="cv-qualifier"]
  61 -> 58 [style=dashed label="decl-specifier"]
  61 -> 59 [style=dashed label="decl-specifier-seq"]
  61 -> 188 [style=dashed label="declaration"]
  61 -> 63 [style=dashed label="decltype-specifier"]
  61 -> 64 [style=dashed label="deduction-guide"]
  61 -> 65 [style=dashed label="defining-type-specifier"]
  61 -> 66 [style=dashed label="elaborated-enum-specifier"]
  61 -> 67 [style=dashed label="elaborated-type-specifier"]
  61 -> 68 [style=dashed label="empty-declaration"]
  61 -> 69 [style=dashed label="enum-head"]
  61 -> 70 [style=dashed label="enum-key"]
  61 -> 71 [style=dashed label="enum-name"]
  61 -> 72 [style=dashed label="enum-specifier"]
  61 -> 73 [style=dashed label="explicit-instantiation"]
  61 -> 74 [style=dashed label="explicit-specialization"]
  61 -> 75 [style=dashed label="explicit-specifier"]
  61 -> 76 [style=dashed label="explicit-specifier-opt"]
  61 -> 77 [style=dashed label="export-declaration"]
  61 -> 78 [style=dashed label="function-definition"]
  61 -> 79 [style=dashed label="function-specifier"]
  61 -> 82 [style=dashed label="linkage-specification"]
  61 -> 83 [style=dashed label="module-import-declaration"]
  61 -> 84 [style=dashed label="named-namespace-definition"]
  61 -> 85 [style=dashed label="namespace-alias"]
  61 -> 86 [style=dashed label="namespace-alias-definition"]
  61 -> 87 [style=dashed label="namespace-definition"]
  61 -> 88 [style=dashed label="namespace-name"]
  61 -> 89 [style=dashed label="nested-name-specifier"]
  61 -> 90 [style=dashed label="nested-name-specifier-opt"]
  61 -> 91 [style=dashed label="nested-namespace-definition"]
  61 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  61 -> 93 [style=dashed label="opaque-enum-declaration"]
  61 -> 94 [style=dashed label="placeholder-type-specifier"]
  61 -> 95 [style=dashed label="simple-declaration"]
  61 -> 96 [style=dashed label="simple-template-id"]
  61 -> 97 [style=dashed label="simple-type-specifier"]
  61 -> 98 [style=dashed label="static_assert-declaration"]
  61 -> 99 [style=dashed label="storage-class-specifier"]
  61 -> 100 [style=dashed label="template-declaration"]
  61 -> 101 [style=dashed label="template-head"]
  61 -> 102 [style=dashed label="template-name"]
  61 -> 104 [style=dashed label="type-constraint"]
  61 -> 105 [style=dashed label="type-constraint-opt"]
  61 -> 106 [style=dashed label="type-name"]
  61 -> 107 [style=dashed label="type-specifier"]
  61 -> 108 [style=dashed label="typedef-name"]
  61 -> 109 [style=dashed label="typename-specifier"]
  61 -> 110 [style=dashed label="unnamed-namespace-definition"]
  61 -> 111 [style=dashed label="using-declaration"]
  61 -> 112 [style=dashed label="using-directive"]
  61 -> 113 [style=dashed label="using-enum-declaration"]
  61 -> "61R9d" [label="[\"template\"]", style=solid]
 "61R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  61 -> "61R13d" [label="[\"namespace\"]", style=solid]
 "61R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  61 -> "61R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "61R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  61 -> "61R83" [label="[]", style=solid]
 "61R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  61 -> "61R211d" [label="[\"export\"]", style=solid]
 "61R211d" [label="R211", fillcolor=5, shape=diamond, style=filled]
  61 -> "61R211" [label="[$end, \"}\", \"module\"]", style=solid]
 "61R211" [label="R211", fillcolor=3, shape=diamond, style=filled]
  61 -> "61R270d" [label="[IDENTIFIER]", style=solid]
 "61R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  61 -> "61R469d" [label="[IDENTIFIER]", style=solid]
 "61R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  61 -> "61R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "61R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  62 [label="State 62\n\l717 translation-unit: declaration-seq-opt •\l"]
  62 -> "62R717" [style=solid]
 "62R717" [label="R717", fillcolor=3, shape=diamond, style=filled]
  63 [label="State 63\n\l466 nested-name-specifier: decltype-specifier • \"::\"\l659 simple-type-specifier: decltype-specifier •\l"]
  63 -> 189 [style=solid label="\"::\""]
  63 -> "63R659d" [label="[\"::\"]", style=solid]
 "63R659d" [label="R659", fillcolor=5, shape=diamond, style=filled]
  63 -> "63R659" [style=solid]
 "63R659" [label="R659", fillcolor=3, shape=diamond, style=filled]
  64 [label="State 64\n\l199 declaration: deduction-guide •\l"]
  64 -> "64R199" [style=solid]
 "64R199" [label="R199", fillcolor=3, shape=diamond, style=filled]
  65 [label="State 65\n\l183 decl-specifier: defining-type-specifier •\l"]
  65 -> "65R183" [style=solid]
 "65R183" [label="R183", fillcolor=3, shape=diamond, style=filled]
  66 [label="State 66\n\l234 elaborated-type-specifier: elaborated-enum-specifier •\l"]
  66 -> "66R234" [style=solid]
 "66R234" [label="R234", fillcolor=3, shape=diamond, style=filled]
  67 [label="State 67\n\l738 type-specifier: elaborated-type-specifier •\l"]
  67 -> "67R738" [style=solid]
 "67R738" [label="R738", fillcolor=3, shape=diamond, style=filled]
  68 [label="State 68\n\l205 declaration: empty-declaration •\l"]
  68 -> "68R205" [style=solid]
 "68R205" [label="R205", fillcolor=3, shape=diamond, style=filled]
  69 [label="State 69\n\l249 enum-specifier: enum-head • \"{\" enumerator-list-opt \"}\"\l250               | enum-head • \"{\" enumerator-list \",\" \"}\"\l"]
  69 -> 190 [style=solid label="\"{\""]
  70 [label="State 70\n\l241 enum-head: enum-key • attribute-specifier-seq-opt enum-head-name-opt enum-base-opt\l507 opaque-enum-declaration: enum-key • attribute-specifier-seq-opt enum-head-name enum-base-opt \";\"\l"]
  70 -> 177 [style=dashed label="attribute-specifier-seq"]
  70 -> 191 [style=dashed label="attribute-specifier-seq-opt"]
  70 -> "70R83" [style=solid]
 "70R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  71 [label="State 71\n\l726 type-name: enum-name •\l"]
  71 -> "71R726" [style=solid]
 "71R726" [label="R726", fillcolor=3, shape=diamond, style=filled]
  72 [label="State 72\n\l221 defining-type-specifier: enum-specifier •\l"]
  72 -> "72R221" [style=solid]
 "72R221" [label="R221", fillcolor=3, shape=diamond, style=filled]
  73 [label="State 73\n\l200 declaration: explicit-instantiation •\l"]
  73 -> "73R200" [style=solid]
 "73R200" [label="R200", fillcolor=3, shape=diamond, style=filled]
  74 [label="State 74\n\l201 declaration: explicit-specialization •\l"]
  74 -> "74R201" [style=solid]
 "74R201" [label="R201", fillcolor=3, shape=diamond, style=filled]
  75 [label="State 75\n\l271 explicit-specifier-opt: explicit-specifier •\l333 function-specifier: explicit-specifier •\l"]
  75 -> "75R271" [label="[IDENTIFIER]", style=solid]
 "75R271" [label="R271", fillcolor=3, shape=diamond, style=filled]
  75 -> "75R333d" [label="[IDENTIFIER]", style=solid]
 "75R333d" [label="R333", fillcolor=5, shape=diamond, style=filled]
  75 -> "75R333" [style=solid]
 "75R333" [label="R333", fillcolor=3, shape=diamond, style=filled]
  76 [label="State 76\n\l217 deduction-guide: explicit-specifier-opt • template-name \"(\" parameter-declaration-clause \")\" \"->\" simple-template-id \";\"\l"]
  76 -> 192 [style=solid label="IDENTIFIER"]
  76 -> 193 [style=dashed label="template-name"]
  77 [label="State 77\n\l202 declaration: export-declaration •\l"]
  77 -> "77R202" [style=solid]
 "77R202" [label="R202", fillcolor=3, shape=diamond, style=filled]
  78 [label="State 78\n\l197 declaration: function-definition •\l"]
  78 -> "78R197" [style=solid]
 "78R197" [label="R197", fillcolor=3, shape=diamond, style=filled]
  79 [label="State 79\n\l184 decl-specifier: function-specifier •\l"]
  79 -> "79R184" [style=solid]
 "79R184" [label="R184", fillcolor=3, shape=diamond, style=filled]
  80 [label="State 80\n\l337 global-module-fragment-opt: global-module-fragment •\l"]
  80 -> "80R337" [style=solid]
 "80R337" [label="R337", fillcolor=3, shape=diamond, style=filled]
  81 [label="State 81\n\l718 translation-unit: global-module-fragment-opt • module-declaration declaration-seq-opt private-module-fragment-opt\l"]
  81 -> 194 [style=solid label="\"export\""]
  81 -> 195 [style=dashed label="EXPORT-opt"]
  81 -> 196 [style=dashed label="module-declaration"]
  81 -> "81R7" [style=solid]
 "81R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  82 [label="State 82\n\l203 declaration: linkage-specification •\l"]
  82 -> "82R203" [style=solid]
 "82R203" [label="R203", fillcolor=3, shape=diamond, style=filled]
  83 [label="State 83\n\l207 declaration: module-import-declaration •\l"]
  83 -> "83R207" [style=solid]
 "83R207" [label="R207", fillcolor=3, shape=diamond, style=filled]
  84 [label="State 84\n\l458 namespace-definition: named-namespace-definition •\l"]
  84 -> "84R458" [style=solid]
 "84R458" [label="R458", fillcolor=3, shape=diamond, style=filled]
  85 [label="State 85\n\l462 namespace-name: namespace-alias •\l"]
  85 -> "85R462" [style=solid]
 "85R462" [label="R462", fillcolor=3, shape=diamond, style=filled]
  86 [label="State 86\n\l109 block-declaration: namespace-alias-definition •\l"]
  86 -> "86R109" [style=solid]
 "86R109" [label="R109", fillcolor=3, shape=diamond, style=filled]
  87 [label="State 87\n\l204 declaration: namespace-definition •\l"]
  87 -> "87R204" [style=solid]
 "87R204" [label="R204", fillcolor=3, shape=diamond, style=filled]
  88 [label="State 88\n\l465 nested-name-specifier: namespace-name • \"::\"\l"]
  88 -> 197 [style=solid label="\"::\""]
  89 [label="State 89\n\l467 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l468                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l470 nested-name-specifier-opt: nested-name-specifier •\l658 simple-type-specifier: nested-name-specifier • \"template\" simple-template-id\l"]
  89 -> 198 [style=solid label="IDENTIFIER"]
  89 -> 199 [style=solid label="\"template\""]
  89 -> 200 [style=dashed label="TEMPLATE-opt"]
  89 -> "89R21d" [label="[IDENTIFIER]", style=solid]
 "89R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  89 -> "89R470d" [label="[IDENTIFIER]", style=solid]
 "89R470d" [label="R470", fillcolor=5, shape=diamond, style=filled]
  90 [label="State 90\n\l657 simple-type-specifier: nested-name-specifier-opt • type-name\l661                      | nested-name-specifier-opt • template-name\l720 type-constraint: nested-name-specifier-opt • concept-name\l721                | nested-name-specifier-opt • concept-name \"<\" template-argument-list-opt \">\"\l"]
  90 -> 201 [style=solid label="IDENTIFIER"]
  90 -> 55 [style=dashed label="class-name"]
  90 -> 202 [style=dashed label="concept-name"]
  90 -> 71 [style=dashed label="enum-name"]
  90 -> 96 [style=dashed label="simple-template-id"]
  90 -> 203 [style=dashed label="template-name"]
  90 -> 204 [style=dashed label="type-name"]
  90 -> 108 [style=dashed label="typedef-name"]
  91 [label="State 91\n\l460 namespace-definition: nested-namespace-definition •\l"]
  91 -> "91R460" [style=solid]
 "91R460" [label="R460", fillcolor=3, shape=diamond, style=filled]
  92 [label="State 92\n\l196 declaration: nodeclspec-function-declaration •\l"]
  92 -> "92R196" [style=solid]
 "92R196" [label="R196", fillcolor=3, shape=diamond, style=filled]
  93 [label="State 93\n\l115 block-declaration: opaque-enum-declaration •\l"]
  93 -> "93R115" [style=solid]
 "93R115" [label="R115", fillcolor=3, shape=diamond, style=filled]
  94 [label="State 94\n\l660 simple-type-specifier: placeholder-type-specifier •\l"]
  94 -> "94R660" [style=solid]
 "94R660" [label="R660", fillcolor=3, shape=diamond, style=filled]
  95 [label="State 95\n\l107 block-declaration: simple-declaration •\l"]
  95 -> "95R107" [style=solid]
 "95R107" [label="R107", fillcolor=3, shape=diamond, style=filled]
  96 [label="State 96\n\l140 class-name: simple-template-id •\l744 typedef-name: simple-template-id •\l"]
  96 -> "96R140" [style=solid]
 "96R140" [label="R140", fillcolor=3, shape=diamond, style=filled]
  96 -> "96R744d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "96R744d" [label="R744", fillcolor=5, shape=diamond, style=filled]
  97 [label="State 97\n\l737 type-specifier: simple-type-specifier •\l"]
  97 -> "97R737" [style=solid]
 "97R737" [label="R737", fillcolor=3, shape=diamond, style=filled]
  98 [label="State 98\n\l113 block-declaration: static_assert-declaration •\l"]
  98 -> "98R113" [style=solid]
 "98R113" [label="R113", fillcolor=3, shape=diamond, style=filled]
  99 [label="State 99\n\l182 decl-specifier: storage-class-specifier •\l"]
  99 -> "99R182" [style=solid]
 "99R182" [label="R182", fillcolor=3, shape=diamond, style=filled]
  100 [label="State 100\n\l198 declaration: template-declaration •\l"]
  100 -> "100R198" [style=solid]
 "100R198" [label="R198", fillcolor=3, shape=diamond, style=filled]
  101 [label="State 101\n\l702 template-declaration: template-head • declaration\l703                     | template-head • concept-definition\l"]
  101 -> 1 [style=solid label="\"constexpr\""]
  101 -> 2 [style=solid label="\"export\""]
  101 -> 3 [style=solid label="\"extern\""]
  101 -> 4 [style=solid label="IDENTIFIER"]
  101 -> 5 [style=solid label="\"inline\""]
  101 -> 6 [style=solid label="\"::\""]
  101 -> 7 [style=solid label="\"template\""]
  101 -> 8 [style=solid label="\"typename\""]
  101 -> 9 [style=solid label="\"virtual\""]
  101 -> 10 [style=solid label="\"using\""]
  101 -> 11 [style=solid label="\";\""]
  101 -> 12 [style=solid label="\"class\""]
  101 -> 13 [style=solid label="\"struct\""]
  101 -> 14 [style=solid label="\"union\""]
  101 -> 205 [style=solid label="\"concept\""]
  101 -> 15 [style=solid label="\"const\""]
  101 -> 16 [style=solid label="\"volatile\""]
  101 -> 17 [style=solid label="\"friend\""]
  101 -> 18 [style=solid label="\"typedef\""]
  101 -> 19 [style=solid label="\"consteval\""]
  101 -> 20 [style=solid label="\"constinit\""]
  101 -> 21 [style=solid label="\"decltype\""]
  101 -> 22 [style=solid label="\"enum\""]
  101 -> 23 [style=solid label="\"explicit\""]
  101 -> 25 [style=solid label="\"import\""]
  101 -> 26 [style=solid label="\"namespace\""]
  101 -> 27 [style=solid label="\"char\""]
  101 -> 28 [style=solid label="\"char8_t\""]
  101 -> 29 [style=solid label="\"char16_t\""]
  101 -> 30 [style=solid label="\"char32_t\""]
  101 -> 31 [style=solid label="\"wchar_t\""]
  101 -> 32 [style=solid label="\"bool\""]
  101 -> 33 [style=solid label="\"short\""]
  101 -> 34 [style=solid label="\"int\""]
  101 -> 35 [style=solid label="\"long\""]
  101 -> 36 [style=solid label="\"signed\""]
  101 -> 37 [style=solid label="\"unsigned\""]
  101 -> 38 [style=solid label="\"float\""]
  101 -> 39 [style=solid label="\"double\""]
  101 -> 40 [style=solid label="\"void\""]
  101 -> 41 [style=solid label="\"static_assert\""]
  101 -> 42 [style=solid label="\"static\""]
  101 -> 43 [style=solid label="\"thread_local\""]
  101 -> 44 [style=solid label="\"mutable\""]
  101 -> 45 [style=dashed label="EXTERN-opt"]
  101 -> 46 [style=dashed label="INLINE-opt"]
  101 -> 47 [style=dashed label="alias-declaration"]
  101 -> 48 [style=dashed label="asm-declaration"]
  101 -> 49 [style=dashed label="attribute-declaration"]
  101 -> 50 [style=dashed label="attribute-specifier-seq"]
  101 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  101 -> 52 [style=dashed label="block-declaration"]
  101 -> 53 [style=dashed label="class-head"]
  101 -> 54 [style=dashed label="class-key"]
  101 -> 55 [style=dashed label="class-name"]
  101 -> 56 [style=dashed label="class-specifier"]
  101 -> 206 [style=dashed label="concept-definition"]
  101 -> 57 [style=dashed label="cv-qualifier"]
  101 -> 58 [style=dashed label="decl-specifier"]
  101 -> 59 [style=dashed label="decl-specifier-seq"]
  101 -> 207 [style=dashed label="declaration"]
  101 -> 63 [style=dashed label="decltype-specifier"]
  101 -> 64 [style=dashed label="deduction-guide"]
  101 -> 65 [style=dashed label="defining-type-specifier"]
  101 -> 66 [style=dashed label="elaborated-enum-specifier"]
  101 -> 67 [style=dashed label="elaborated-type-specifier"]
  101 -> 68 [style=dashed label="empty-declaration"]
  101 -> 69 [style=dashed label="enum-head"]
  101 -> 70 [style=dashed label="enum-key"]
  101 -> 71 [style=dashed label="enum-name"]
  101 -> 72 [style=dashed label="enum-specifier"]
  101 -> 73 [style=dashed label="explicit-instantiation"]
  101 -> 74 [style=dashed label="explicit-specialization"]
  101 -> 75 [style=dashed label="explicit-specifier"]
  101 -> 76 [style=dashed label="explicit-specifier-opt"]
  101 -> 77 [style=dashed label="export-declaration"]
  101 -> 78 [style=dashed label="function-definition"]
  101 -> 79 [style=dashed label="function-specifier"]
  101 -> 82 [style=dashed label="linkage-specification"]
  101 -> 83 [style=dashed label="module-import-declaration"]
  101 -> 84 [style=dashed label="named-namespace-definition"]
  101 -> 85 [style=dashed label="namespace-alias"]
  101 -> 86 [style=dashed label="namespace-alias-definition"]
  101 -> 87 [style=dashed label="namespace-definition"]
  101 -> 88 [style=dashed label="namespace-name"]
  101 -> 89 [style=dashed label="nested-name-specifier"]
  101 -> 90 [style=dashed label="nested-name-specifier-opt"]
  101 -> 91 [style=dashed label="nested-namespace-definition"]
  101 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  101 -> 93 [style=dashed label="opaque-enum-declaration"]
  101 -> 94 [style=dashed label="placeholder-type-specifier"]
  101 -> 95 [style=dashed label="simple-declaration"]
  101 -> 96 [style=dashed label="simple-template-id"]
  101 -> 97 [style=dashed label="simple-type-specifier"]
  101 -> 98 [style=dashed label="static_assert-declaration"]
  101 -> 99 [style=dashed label="storage-class-specifier"]
  101 -> 100 [style=dashed label="template-declaration"]
  101 -> 101 [style=dashed label="template-head"]
  101 -> 102 [style=dashed label="template-name"]
  101 -> 104 [style=dashed label="type-constraint"]
  101 -> 105 [style=dashed label="type-constraint-opt"]
  101 -> 106 [style=dashed label="type-name"]
  101 -> 107 [style=dashed label="type-specifier"]
  101 -> 108 [style=dashed label="typedef-name"]
  101 -> 109 [style=dashed label="typename-specifier"]
  101 -> 110 [style=dashed label="unnamed-namespace-definition"]
  101 -> 111 [style=dashed label="using-declaration"]
  101 -> 112 [style=dashed label="using-directive"]
  101 -> 113 [style=dashed label="using-enum-declaration"]
  101 -> "101R9d" [label="[\"template\"]", style=solid]
 "101R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  101 -> "101R13d" [label="[\"namespace\"]", style=solid]
 "101R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  101 -> "101R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "101R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  101 -> "101R83" [label="[]", style=solid]
 "101R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  101 -> "101R270d" [label="[IDENTIFIER]", style=solid]
 "101R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  101 -> "101R469d" [label="[IDENTIFIER]", style=solid]
 "101R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  101 -> "101R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "101R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  102 [label="State 102\n\l656 simple-template-id: template-name • \"<\" template-argument-list-opt \">\"\l"]
  102 -> 208 [style=solid label="\"<\""]
  103 [label="State 103\n\l796 result: translation-unit •\l"]
  103 -> "103R796" [style=solid]
 "103R796" [label="R796", fillcolor=3, shape=diamond, style=filled]
  104 [label="State 104\n\l723 type-constraint-opt: type-constraint •\l"]
  104 -> "104R723" [style=solid]
 "104R723" [label="R723", fillcolor=3, shape=diamond, style=filled]
  105 [label="State 105\n\l565 placeholder-type-specifier: type-constraint-opt • \"auto\"\l566                           | type-constraint-opt • \"decltype\" \"(\" \"auto\" \")\"\l"]
  105 -> 209 [style=solid label="\"decltype\""]
  105 -> 210 [style=solid label="\"auto\""]
  106 [label="State 106\n\l464 nested-name-specifier: type-name • \"::\"\l"]
  106 -> 211 [style=solid label="\"::\""]
  107 [label="State 107\n\l219 defining-type-specifier: type-specifier •\l"]
  107 -> "107R219" [style=solid]
 "107R219" [label="R219", fillcolor=3, shape=diamond, style=filled]
  108 [label="State 108\n\l727 type-name: typedef-name •\l"]
  108 -> "108R727" [style=solid]
 "108R727" [label="R727", fillcolor=3, shape=diamond, style=filled]
  109 [label="State 109\n\l739 type-specifier: typename-specifier •\l"]
  109 -> "109R739" [style=solid]
 "109R739" [label="R739", fillcolor=3, shape=diamond, style=filled]
  110 [label="State 110\n\l459 namespace-definition: unnamed-namespace-definition •\l"]
  110 -> "110R459" [style=solid]
 "110R459" [label="R459", fillcolor=3, shape=diamond, style=filled]
  111 [label="State 111\n\l110 block-declaration: using-declaration •\l"]
  111 -> "111R110" [style=solid]
 "111R110" [label="R110", fillcolor=3, shape=diamond, style=filled]
  112 [label="State 112\n\l112 block-declaration: using-directive •\l"]
  112 -> "112R112" [style=solid]
 "112R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
  113 [label="State 113\n\l111 block-declaration: using-enum-declaration •\l"]
  113 -> "113R111" [style=solid]
 "113R111" [label="R111", fillcolor=3, shape=diamond, style=filled]
  114 [label="State 114\n\l  0 $accept: result • $end\l"]
  114 -> 212 [style=solid label="$end"]
  115 [label="State 115\n\l273 export-declaration: \"export\" \"{\" • declaration-seq-opt \"}\"\l"]
  115 -> 1 [style=solid label="\"constexpr\""]
  115 -> 2 [style=solid label="\"export\""]
  115 -> 3 [style=solid label="\"extern\""]
  115 -> 4 [style=solid label="IDENTIFIER"]
  115 -> 5 [style=solid label="\"inline\""]
  115 -> 6 [style=solid label="\"::\""]
  115 -> 7 [style=solid label="\"template\""]
  115 -> 8 [style=solid label="\"typename\""]
  115 -> 9 [style=solid label="\"virtual\""]
  115 -> 10 [style=solid label="\"using\""]
  115 -> 11 [style=solid label="\";\""]
  115 -> 12 [style=solid label="\"class\""]
  115 -> 13 [style=solid label="\"struct\""]
  115 -> 14 [style=solid label="\"union\""]
  115 -> 15 [style=solid label="\"const\""]
  115 -> 16 [style=solid label="\"volatile\""]
  115 -> 17 [style=solid label="\"friend\""]
  115 -> 18 [style=solid label="\"typedef\""]
  115 -> 19 [style=solid label="\"consteval\""]
  115 -> 20 [style=solid label="\"constinit\""]
  115 -> 21 [style=solid label="\"decltype\""]
  115 -> 22 [style=solid label="\"enum\""]
  115 -> 23 [style=solid label="\"explicit\""]
  115 -> 25 [style=solid label="\"import\""]
  115 -> 26 [style=solid label="\"namespace\""]
  115 -> 27 [style=solid label="\"char\""]
  115 -> 28 [style=solid label="\"char8_t\""]
  115 -> 29 [style=solid label="\"char16_t\""]
  115 -> 30 [style=solid label="\"char32_t\""]
  115 -> 31 [style=solid label="\"wchar_t\""]
  115 -> 32 [style=solid label="\"bool\""]
  115 -> 33 [style=solid label="\"short\""]
  115 -> 34 [style=solid label="\"int\""]
  115 -> 35 [style=solid label="\"long\""]
  115 -> 36 [style=solid label="\"signed\""]
  115 -> 37 [style=solid label="\"unsigned\""]
  115 -> 38 [style=solid label="\"float\""]
  115 -> 39 [style=solid label="\"double\""]
  115 -> 40 [style=solid label="\"void\""]
  115 -> 41 [style=solid label="\"static_assert\""]
  115 -> 42 [style=solid label="\"static\""]
  115 -> 43 [style=solid label="\"thread_local\""]
  115 -> 44 [style=solid label="\"mutable\""]
  115 -> 45 [style=dashed label="EXTERN-opt"]
  115 -> 46 [style=dashed label="INLINE-opt"]
  115 -> 47 [style=dashed label="alias-declaration"]
  115 -> 48 [style=dashed label="asm-declaration"]
  115 -> 49 [style=dashed label="attribute-declaration"]
  115 -> 50 [style=dashed label="attribute-specifier-seq"]
  115 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  115 -> 52 [style=dashed label="block-declaration"]
  115 -> 53 [style=dashed label="class-head"]
  115 -> 54 [style=dashed label="class-key"]
  115 -> 55 [style=dashed label="class-name"]
  115 -> 56 [style=dashed label="class-specifier"]
  115 -> 57 [style=dashed label="cv-qualifier"]
  115 -> 58 [style=dashed label="decl-specifier"]
  115 -> 59 [style=dashed label="decl-specifier-seq"]
  115 -> 60 [style=dashed label="declaration"]
  115 -> 61 [style=dashed label="declaration-seq"]
  115 -> 213 [style=dashed label="declaration-seq-opt"]
  115 -> 63 [style=dashed label="decltype-specifier"]
  115 -> 64 [style=dashed label="deduction-guide"]
  115 -> 65 [style=dashed label="defining-type-specifier"]
  115 -> 66 [style=dashed label="elaborated-enum-specifier"]
  115 -> 67 [style=dashed label="elaborated-type-specifier"]
  115 -> 68 [style=dashed label="empty-declaration"]
  115 -> 69 [style=dashed label="enum-head"]
  115 -> 70 [style=dashed label="enum-key"]
  115 -> 71 [style=dashed label="enum-name"]
  115 -> 72 [style=dashed label="enum-specifier"]
  115 -> 73 [style=dashed label="explicit-instantiation"]
  115 -> 74 [style=dashed label="explicit-specialization"]
  115 -> 75 [style=dashed label="explicit-specifier"]
  115 -> 76 [style=dashed label="explicit-specifier-opt"]
  115 -> 77 [style=dashed label="export-declaration"]
  115 -> 78 [style=dashed label="function-definition"]
  115 -> 79 [style=dashed label="function-specifier"]
  115 -> 82 [style=dashed label="linkage-specification"]
  115 -> 83 [style=dashed label="module-import-declaration"]
  115 -> 84 [style=dashed label="named-namespace-definition"]
  115 -> 85 [style=dashed label="namespace-alias"]
  115 -> 86 [style=dashed label="namespace-alias-definition"]
  115 -> 87 [style=dashed label="namespace-definition"]
  115 -> 88 [style=dashed label="namespace-name"]
  115 -> 89 [style=dashed label="nested-name-specifier"]
  115 -> 90 [style=dashed label="nested-name-specifier-opt"]
  115 -> 91 [style=dashed label="nested-namespace-definition"]
  115 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  115 -> 93 [style=dashed label="opaque-enum-declaration"]
  115 -> 94 [style=dashed label="placeholder-type-specifier"]
  115 -> 95 [style=dashed label="simple-declaration"]
  115 -> 96 [style=dashed label="simple-template-id"]
  115 -> 97 [style=dashed label="simple-type-specifier"]
  115 -> 98 [style=dashed label="static_assert-declaration"]
  115 -> 99 [style=dashed label="storage-class-specifier"]
  115 -> 100 [style=dashed label="template-declaration"]
  115 -> 101 [style=dashed label="template-head"]
  115 -> 102 [style=dashed label="template-name"]
  115 -> 104 [style=dashed label="type-constraint"]
  115 -> 105 [style=dashed label="type-constraint-opt"]
  115 -> 106 [style=dashed label="type-name"]
  115 -> 107 [style=dashed label="type-specifier"]
  115 -> 108 [style=dashed label="typedef-name"]
  115 -> 109 [style=dashed label="typename-specifier"]
  115 -> 110 [style=dashed label="unnamed-namespace-definition"]
  115 -> 111 [style=dashed label="using-declaration"]
  115 -> 112 [style=dashed label="using-directive"]
  115 -> 113 [style=dashed label="using-enum-declaration"]
  115 -> "115R9d" [label="[\"template\"]", style=solid]
 "115R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  115 -> "115R13d" [label="[\"namespace\"]", style=solid]
 "115R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  115 -> "115R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "115R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  115 -> "115R83" [label="[]", style=solid]
 "115R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  115 -> "115R210" [label="[\"}\"]", style=solid]
 "115R210" [label="R210", fillcolor=3, shape=diamond, style=filled]
  115 -> "115R270d" [label="[IDENTIFIER]", style=solid]
 "115R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  115 -> "115R469d" [label="[IDENTIFIER]", style=solid]
 "115R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  115 -> "115R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "115R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  116 [label="State 116\n\l272 export-declaration: \"export\" declaration •\l"]
  116 -> "116R272" [style=solid]
 "116R272" [label="R272", fillcolor=3, shape=diamond, style=filled]
  117 [label="State 117\n\l207 declaration: module-import-declaration •\l274 export-declaration: \"export\" module-import-declaration •\l"]
  117 -> "117R207" [style=solid]
 "117R207" [label="R207", fillcolor=3, shape=diamond, style=filled]
  117 -> "117R274d" [label="[$end, \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"template\", \"typename\", \"virtual\", \"private\", \"protected\", \"public\", \"using\", \";\", \"alignas\", \"(\", \"&\", \"asm\", \"[\", \":\", \"}\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"*\", \"module\", \"import\", \"namespace\", \"~\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "117R274d" [label="R274", fillcolor=5, shape=diamond, style=filled]
  118 [label="State 118\n\l694 string-literal: STRING_LITERAL •\l"]
  118 -> "118R694" [style=solid]
 "118R694" [label="R694", fillcolor=3, shape=diamond, style=filled]
  119 [label="State 119\n\l394 linkage-specification: \"extern\" string-literal • \"{\" declaration-seq-opt \"}\"\l395                      | \"extern\" string-literal • declaration\l"]
  119 -> 1 [style=solid label="\"constexpr\""]
  119 -> 2 [style=solid label="\"export\""]
  119 -> 3 [style=solid label="\"extern\""]
  119 -> 4 [style=solid label="IDENTIFIER"]
  119 -> 5 [style=solid label="\"inline\""]
  119 -> 6 [style=solid label="\"::\""]
  119 -> 7 [style=solid label="\"template\""]
  119 -> 8 [style=solid label="\"typename\""]
  119 -> 9 [style=solid label="\"virtual\""]
  119 -> 10 [style=solid label="\"using\""]
  119 -> 11 [style=solid label="\";\""]
  119 -> 214 [style=solid label="\"{\""]
  119 -> 12 [style=solid label="\"class\""]
  119 -> 13 [style=solid label="\"struct\""]
  119 -> 14 [style=solid label="\"union\""]
  119 -> 15 [style=solid label="\"const\""]
  119 -> 16 [style=solid label="\"volatile\""]
  119 -> 17 [style=solid label="\"friend\""]
  119 -> 18 [style=solid label="\"typedef\""]
  119 -> 19 [style=solid label="\"consteval\""]
  119 -> 20 [style=solid label="\"constinit\""]
  119 -> 21 [style=solid label="\"decltype\""]
  119 -> 22 [style=solid label="\"enum\""]
  119 -> 23 [style=solid label="\"explicit\""]
  119 -> 25 [style=solid label="\"import\""]
  119 -> 26 [style=solid label="\"namespace\""]
  119 -> 27 [style=solid label="\"char\""]
  119 -> 28 [style=solid label="\"char8_t\""]
  119 -> 29 [style=solid label="\"char16_t\""]
  119 -> 30 [style=solid label="\"char32_t\""]
  119 -> 31 [style=solid label="\"wchar_t\""]
  119 -> 32 [style=solid label="\"bool\""]
  119 -> 33 [style=solid label="\"short\""]
  119 -> 34 [style=solid label="\"int\""]
  119 -> 35 [style=solid label="\"long\""]
  119 -> 36 [style=solid label="\"signed\""]
  119 -> 37 [style=solid label="\"unsigned\""]
  119 -> 38 [style=solid label="\"float\""]
  119 -> 39 [style=solid label="\"double\""]
  119 -> 40 [style=solid label="\"void\""]
  119 -> 41 [style=solid label="\"static_assert\""]
  119 -> 42 [style=solid label="\"static\""]
  119 -> 43 [style=solid label="\"thread_local\""]
  119 -> 44 [style=solid label="\"mutable\""]
  119 -> 45 [style=dashed label="EXTERN-opt"]
  119 -> 46 [style=dashed label="INLINE-opt"]
  119 -> 47 [style=dashed label="alias-declaration"]
  119 -> 48 [style=dashed label="asm-declaration"]
  119 -> 49 [style=dashed label="attribute-declaration"]
  119 -> 50 [style=dashed label="attribute-specifier-seq"]
  119 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  119 -> 52 [style=dashed label="block-declaration"]
  119 -> 53 [style=dashed label="class-head"]
  119 -> 54 [style=dashed label="class-key"]
  119 -> 55 [style=dashed label="class-name"]
  119 -> 56 [style=dashed label="class-specifier"]
  119 -> 57 [style=dashed label="cv-qualifier"]
  119 -> 58 [style=dashed label="decl-specifier"]
  119 -> 59 [style=dashed label="decl-specifier-seq"]
  119 -> 215 [style=dashed label="declaration"]
  119 -> 63 [style=dashed label="decltype-specifier"]
  119 -> 64 [style=dashed label="deduction-guide"]
  119 -> 65 [style=dashed label="defining-type-specifier"]
  119 -> 66 [style=dashed label="elaborated-enum-specifier"]
  119 -> 67 [style=dashed label="elaborated-type-specifier"]
  119 -> 68 [style=dashed label="empty-declaration"]
  119 -> 69 [style=dashed label="enum-head"]
  119 -> 70 [style=dashed label="enum-key"]
  119 -> 71 [style=dashed label="enum-name"]
  119 -> 72 [style=dashed label="enum-specifier"]
  119 -> 73 [style=dashed label="explicit-instantiation"]
  119 -> 74 [style=dashed label="explicit-specialization"]
  119 -> 75 [style=dashed label="explicit-specifier"]
  119 -> 76 [style=dashed label="explicit-specifier-opt"]
  119 -> 77 [style=dashed label="export-declaration"]
  119 -> 78 [style=dashed label="function-definition"]
  119 -> 79 [style=dashed label="function-specifier"]
  119 -> 82 [style=dashed label="linkage-specification"]
  119 -> 83 [style=dashed label="module-import-declaration"]
  119 -> 84 [style=dashed label="named-namespace-definition"]
  119 -> 85 [style=dashed label="namespace-alias"]
  119 -> 86 [style=dashed label="namespace-alias-definition"]
  119 -> 87 [style=dashed label="namespace-definition"]
  119 -> 88 [style=dashed label="namespace-name"]
  119 -> 89 [style=dashed label="nested-name-specifier"]
  119 -> 90 [style=dashed label="nested-name-specifier-opt"]
  119 -> 91 [style=dashed label="nested-namespace-definition"]
  119 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  119 -> 93 [style=dashed label="opaque-enum-declaration"]
  119 -> 94 [style=dashed label="placeholder-type-specifier"]
  119 -> 95 [style=dashed label="simple-declaration"]
  119 -> 96 [style=dashed label="simple-template-id"]
  119 -> 97 [style=dashed label="simple-type-specifier"]
  119 -> 98 [style=dashed label="static_assert-declaration"]
  119 -> 99 [style=dashed label="storage-class-specifier"]
  119 -> 100 [style=dashed label="template-declaration"]
  119 -> 101 [style=dashed label="template-head"]
  119 -> 102 [style=dashed label="template-name"]
  119 -> 104 [style=dashed label="type-constraint"]
  119 -> 105 [style=dashed label="type-constraint-opt"]
  119 -> 106 [style=dashed label="type-name"]
  119 -> 107 [style=dashed label="type-specifier"]
  119 -> 108 [style=dashed label="typedef-name"]
  119 -> 109 [style=dashed label="typename-specifier"]
  119 -> 110 [style=dashed label="unnamed-namespace-definition"]
  119 -> 111 [style=dashed label="using-declaration"]
  119 -> 112 [style=dashed label="using-directive"]
  119 -> 113 [style=dashed label="using-enum-declaration"]
  119 -> "119R9d" [label="[\"template\"]", style=solid]
 "119R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  119 -> "119R13d" [label="[\"namespace\"]", style=solid]
 "119R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  119 -> "119R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "119R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  119 -> "119R83" [label="[]", style=solid]
 "119R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  119 -> "119R270d" [label="[IDENTIFIER]", style=solid]
 "119R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  119 -> "119R469d" [label="[IDENTIFIER]", style=solid]
 "119R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  119 -> "119R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "119R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  120 [label="State 120\n\l267 explicit-specialization: \"template\" \"<\" • \">\" declaration\l704 template-head: \"template\" \"<\" • template-parameter-list \">\" requires-clause-opt\l"]
  120 -> 4 [style=solid label="IDENTIFIER"]
  120 -> 6 [style=solid label="\"::\""]
  120 -> 216 [style=solid label="\"template\""]
  120 -> 217 [style=solid label="\"typename\""]
  120 -> 218 [style=solid label="\"class\""]
  120 -> 21 [style=solid label="\"decltype\""]
  120 -> 219 [style=solid label="\">\""]
  120 -> 177 [style=dashed label="attribute-specifier-seq"]
  120 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  120 -> 55 [style=dashed label="class-name"]
  120 -> 121 [style=dashed label="decltype-specifier"]
  120 -> 71 [style=dashed label="enum-name"]
  120 -> 85 [style=dashed label="namespace-alias"]
  120 -> 88 [style=dashed label="namespace-name"]
  120 -> 133 [style=dashed label="nested-name-specifier"]
  120 -> 221 [style=dashed label="nested-name-specifier-opt"]
  120 -> 222 [style=dashed label="parameter-declaration"]
  120 -> 96 [style=dashed label="simple-template-id"]
  120 -> 223 [style=dashed label="template-head"]
  120 -> 102 [style=dashed label="template-name"]
  120 -> 224 [style=dashed label="template-parameter"]
  120 -> 225 [style=dashed label="template-parameter-list"]
  120 -> 226 [style=dashed label="type-constraint"]
  120 -> 106 [style=dashed label="type-name"]
  120 -> 227 [style=dashed label="type-parameter"]
  120 -> 228 [style=dashed label="type-parameter-key"]
  120 -> 108 [style=dashed label="typedef-name"]
  120 -> "120R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"class\", \"decltype\"]", style=solid]
 "120R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  120 -> "120R83" [style=solid]
 "120R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  120 -> "120R469d" [label="[IDENTIFIER]", style=solid]
 "120R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  121 [label="State 121\n\l466 nested-name-specifier: decltype-specifier • \"::\"\l"]
  121 -> 189 [style=solid label="\"::\""]
  122 [label="State 122\n\l467 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l468                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l745 typename-specifier: \"typename\" nested-name-specifier • IDENTIFIER\l746                   | \"typename\" nested-name-specifier • TEMPLATE-opt simple-template-id\l"]
  122 -> 229 [style=solid label="IDENTIFIER"]
  122 -> 230 [style=solid label="\"template\""]
  122 -> 231 [style=dashed label="TEMPLATE-opt"]
  122 -> "122R21d" [label="[IDENTIFIER]", style=solid]
 "122R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  123 [label="State 123\n\l 44 alias-declaration: \"using\" IDENTIFIER • attribute-specifier-seq-opt \"=\" defining-type-id \";\"\l"]
  123 -> 177 [style=dashed label="attribute-specifier-seq"]
  123 -> 232 [style=dashed label="attribute-specifier-seq-opt"]
  123 -> "123R83" [style=solid]
 "123R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  124 [label="State 124\n\l 26 TYPENAME-opt: \"typename\" •\l"]
  124 -> "124R26" [style=solid]
 "124R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  125 [label="State 125\n\l230 elaborated-enum-specifier: \"enum\" • nested-name-specifier-opt IDENTIFIER\l"]
  125 -> 4 [style=solid label="IDENTIFIER"]
  125 -> 6 [style=solid label="\"::\""]
  125 -> 21 [style=solid label="\"decltype\""]
  125 -> 55 [style=dashed label="class-name"]
  125 -> 121 [style=dashed label="decltype-specifier"]
  125 -> 71 [style=dashed label="enum-name"]
  125 -> 85 [style=dashed label="namespace-alias"]
  125 -> 88 [style=dashed label="namespace-name"]
  125 -> 133 [style=dashed label="nested-name-specifier"]
  125 -> 134 [style=dashed label="nested-name-specifier-opt"]
  125 -> 96 [style=dashed label="simple-template-id"]
  125 -> 102 [style=dashed label="template-name"]
  125 -> 106 [style=dashed label="type-name"]
  125 -> 108 [style=dashed label="typedef-name"]
  125 -> "125R469d" [label="[IDENTIFIER]", style=solid]
 "125R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  126 [label="State 126\n\l783 using-declarator: TYPENAME-opt • nested-name-specifier unqualified-id\l"]
  126 -> 4 [style=solid label="IDENTIFIER"]
  126 -> 6 [style=solid label="\"::\""]
  126 -> 21 [style=solid label="\"decltype\""]
  126 -> 55 [style=dashed label="class-name"]
  126 -> 121 [style=dashed label="decltype-specifier"]
  126 -> 71 [style=dashed label="enum-name"]
  126 -> 85 [style=dashed label="namespace-alias"]
  126 -> 88 [style=dashed label="namespace-name"]
  126 -> 233 [style=dashed label="nested-name-specifier"]
  126 -> 96 [style=dashed label="simple-template-id"]
  126 -> 102 [style=dashed label="template-name"]
  126 -> 106 [style=dashed label="type-name"]
  126 -> 108 [style=dashed label="typedef-name"]
  127 [label="State 127\n\l787 using-enum-declaration: \"using\" elaborated-enum-specifier • \";\"\l"]
  127 -> 234 [style=solid label="\";\""]
  128 [label="State 128\n\l784 using-declarator-list: using-declarator • ELLIPSIS-opt\l"]
  128 -> 156 [style=solid label="\"...\""]
  128 -> 235 [style=dashed label="ELLIPSIS-opt"]
  128 -> "128R5" [style=solid]
 "128R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  129 [label="State 129\n\l782 using-declaration: \"using\" using-declarator-list • \";\"\l785 using-declarator-list: using-declarator-list • \",\" using-declarator ELLIPSIS-opt\l"]
  129 -> 236 [style=solid label="\",\""]
  129 -> 237 [style=solid label="\";\""]
  130 [label="State 130\n\l216 decltype-specifier: \"decltype\" \"(\" • expression \")\"\l"]
  130 -> 238 [style=solid label="IDENTIFIER"]
  130 -> 239 [style=solid label="\"noexcept\""]
  130 -> 240 [style=solid label="\"!\""]
  130 -> 241 [style=solid label="\"::\""]
  130 -> 242 [style=solid label="\"this\""]
  130 -> 8 [style=solid label="\"typename\""]
  130 -> 243 [style=solid label="\"+\""]
  130 -> 244 [style=solid label="\"-\""]
  130 -> 245 [style=solid label="\"(\""]
  130 -> 246 [style=solid label="\"&\""]
  130 -> 247 [style=solid label="\"[\""]
  130 -> 248 [style=solid label="\"co_await\""]
  130 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  130 -> 250 [style=solid label="CHARACTER_LITERAL"]
  130 -> 251 [style=solid label="\"operator\""]
  130 -> 21 [style=solid label="\"decltype\""]
  130 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  130 -> 253 [style=solid label="\"*\""]
  130 -> 254 [style=solid label="INTEGER_LITERAL"]
  130 -> 255 [style=solid label="\"requires\""]
  130 -> 256 [style=solid label="\"~\""]
  130 -> 257 [style=solid label="\"++\""]
  130 -> 258 [style=solid label="\"--\""]
  130 -> 259 [style=solid label="POINTER_LITERAL"]
  130 -> 260 [style=solid label="\"dynamic_cast\""]
  130 -> 261 [style=solid label="\"static_cast\""]
  130 -> 262 [style=solid label="\"reinterpret_cast\""]
  130 -> 263 [style=solid label="\"const_cast\""]
  130 -> 264 [style=solid label="\"typeid\""]
  130 -> 27 [style=solid label="\"char\""]
  130 -> 28 [style=solid label="\"char8_t\""]
  130 -> 29 [style=solid label="\"char16_t\""]
  130 -> 30 [style=solid label="\"char32_t\""]
  130 -> 31 [style=solid label="\"wchar_t\""]
  130 -> 32 [style=solid label="\"bool\""]
  130 -> 33 [style=solid label="\"short\""]
  130 -> 34 [style=solid label="\"int\""]
  130 -> 35 [style=solid label="\"long\""]
  130 -> 36 [style=solid label="\"signed\""]
  130 -> 37 [style=solid label="\"unsigned\""]
  130 -> 38 [style=solid label="\"float\""]
  130 -> 39 [style=solid label="\"double\""]
  130 -> 40 [style=solid label="\"void\""]
  130 -> 118 [style=solid label="STRING_LITERAL"]
  130 -> 265 [style=solid label="\"throw\""]
  130 -> 266 [style=solid label="\"sizeof\""]
  130 -> 267 [style=solid label="\"alignof\""]
  130 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  130 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  130 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  130 -> 271 [style=solid label="\"co_yield\""]
  130 -> 272 [style=dashed label="SCOPE-opt"]
  130 -> 273 [style=dashed label="additive-expression"]
  130 -> 274 [style=dashed label="and-expression"]
  130 -> 275 [style=dashed label="assignment-expression"]
  130 -> 276 [style=dashed label="await-expression"]
  130 -> 277 [style=dashed label="boolean-literal"]
  130 -> 278 [style=dashed label="cast-expression"]
  130 -> 279 [style=dashed label="character-literal"]
  130 -> 55 [style=dashed label="class-name"]
  130 -> 280 [style=dashed label="compare-expression"]
  130 -> 281 [style=dashed label="conditional-expression"]
  130 -> 282 [style=dashed label="conversion-function-id"]
  130 -> 63 [style=dashed label="decltype-specifier"]
  130 -> 283 [style=dashed label="delete-expression"]
  130 -> 71 [style=dashed label="enum-name"]
  130 -> 284 [style=dashed label="equality-expression"]
  130 -> 285 [style=dashed label="exclusive-or-expression"]
  130 -> 286 [style=dashed label="expression"]
  130 -> 287 [style=dashed label="floating-point-literal"]
  130 -> 288 [style=dashed label="fold-expression"]
  130 -> 289 [style=dashed label="id-expression"]
  130 -> 290 [style=dashed label="inclusive-or-expression"]
  130 -> 291 [style=dashed label="integer-literal"]
  130 -> 292 [style=dashed label="lambda-expression"]
  130 -> 293 [style=dashed label="lambda-introducer"]
  130 -> 294 [style=dashed label="literal"]
  130 -> 295 [style=dashed label="literal-operator-id"]
  130 -> 296 [style=dashed label="logical-and-expression"]
  130 -> 297 [style=dashed label="logical-or-expression"]
  130 -> 298 [style=dashed label="multiplicative-expression"]
  130 -> 85 [style=dashed label="namespace-alias"]
  130 -> 88 [style=dashed label="namespace-name"]
  130 -> 299 [style=dashed label="nested-name-specifier"]
  130 -> 90 [style=dashed label="nested-name-specifier-opt"]
  130 -> 300 [style=dashed label="new-expression"]
  130 -> 301 [style=dashed label="noexcept-expression"]
  130 -> 302 [style=dashed label="operator-function-id"]
  130 -> 94 [style=dashed label="placeholder-type-specifier"]
  130 -> 303 [style=dashed label="pm-expression"]
  130 -> 304 [style=dashed label="pointer-literal"]
  130 -> 305 [style=dashed label="postfix-expression"]
  130 -> 306 [style=dashed label="primary-expression"]
  130 -> 307 [style=dashed label="qualified-id"]
  130 -> 308 [style=dashed label="relational-expression"]
  130 -> 309 [style=dashed label="requires-expression"]
  130 -> 310 [style=dashed label="shift-expression"]
  130 -> 311 [style=dashed label="simple-template-id"]
  130 -> 312 [style=dashed label="simple-type-specifier"]
  130 -> 313 [style=dashed label="string-literal"]
  130 -> 314 [style=dashed label="template-id"]
  130 -> 102 [style=dashed label="template-name"]
  130 -> 315 [style=dashed label="throw-expression"]
  130 -> 104 [style=dashed label="type-constraint"]
  130 -> 105 [style=dashed label="type-constraint-opt"]
  130 -> 106 [style=dashed label="type-name"]
  130 -> 108 [style=dashed label="typedef-name"]
  130 -> 316 [style=dashed label="typename-specifier"]
  130 -> 317 [style=dashed label="unary-expression"]
  130 -> 318 [style=dashed label="unary-operator"]
  130 -> 319 [style=dashed label="unqualified-id"]
  130 -> 320 [style=dashed label="user-defined-character-literal"]
  130 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  130 -> 322 [style=dashed label="user-defined-integer-literal"]
  130 -> 323 [style=dashed label="user-defined-literal"]
  130 -> 324 [style=dashed label="user-defined-string-literal"]
  130 -> 325 [style=dashed label="yield-expression"]
  130 -> "130R19" [style=solid]
 "130R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  130 -> "130R469d" [label="[IDENTIFIER]", style=solid]
 "130R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  130 -> "130R722d" [label="[\"decltype\"]", style=solid]
 "130R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  130 -> "130R722" [label="[\"auto\"]", style=solid]
 "130R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  131 [label="State 131\n\l246 enum-key: \"enum\" \"class\" •\l"]
  131 -> "131R246" [style=solid]
 "131R246" [label="R246", fillcolor=3, shape=diamond, style=filled]
  132 [label="State 132\n\l247 enum-key: \"enum\" \"struct\" •\l"]
  132 -> "132R247" [style=solid]
 "132R247" [label="R247", fillcolor=3, shape=diamond, style=filled]
  133 [label="State 133\n\l467 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l468                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l470 nested-name-specifier-opt: nested-name-specifier •\l"]
  133 -> 198 [style=solid label="IDENTIFIER"]
  133 -> 230 [style=solid label="\"template\""]
  133 -> 200 [style=dashed label="TEMPLATE-opt"]
  133 -> "133R21d" [label="[IDENTIFIER]", style=solid]
 "133R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  133 -> "133R470d" [label="[IDENTIFIER]", style=solid]
 "133R470d" [label="R470", fillcolor=5, shape=diamond, style=filled]
  134 [label="State 134\n\l230 elaborated-enum-specifier: \"enum\" nested-name-specifier-opt • IDENTIFIER\l"]
  134 -> 326 [style=solid label="IDENTIFIER"]
  135 [label="State 135\n\l268 explicit-specifier: \"explicit\" \"(\" • constant-expression \")\"\l"]
  135 -> 238 [style=solid label="IDENTIFIER"]
  135 -> 239 [style=solid label="\"noexcept\""]
  135 -> 240 [style=solid label="\"!\""]
  135 -> 241 [style=solid label="\"::\""]
  135 -> 242 [style=solid label="\"this\""]
  135 -> 8 [style=solid label="\"typename\""]
  135 -> 243 [style=solid label="\"+\""]
  135 -> 244 [style=solid label="\"-\""]
  135 -> 245 [style=solid label="\"(\""]
  135 -> 246 [style=solid label="\"&\""]
  135 -> 247 [style=solid label="\"[\""]
  135 -> 248 [style=solid label="\"co_await\""]
  135 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  135 -> 250 [style=solid label="CHARACTER_LITERAL"]
  135 -> 251 [style=solid label="\"operator\""]
  135 -> 21 [style=solid label="\"decltype\""]
  135 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  135 -> 253 [style=solid label="\"*\""]
  135 -> 254 [style=solid label="INTEGER_LITERAL"]
  135 -> 255 [style=solid label="\"requires\""]
  135 -> 256 [style=solid label="\"~\""]
  135 -> 257 [style=solid label="\"++\""]
  135 -> 258 [style=solid label="\"--\""]
  135 -> 259 [style=solid label="POINTER_LITERAL"]
  135 -> 260 [style=solid label="\"dynamic_cast\""]
  135 -> 261 [style=solid label="\"static_cast\""]
  135 -> 262 [style=solid label="\"reinterpret_cast\""]
  135 -> 263 [style=solid label="\"const_cast\""]
  135 -> 264 [style=solid label="\"typeid\""]
  135 -> 27 [style=solid label="\"char\""]
  135 -> 28 [style=solid label="\"char8_t\""]
  135 -> 29 [style=solid label="\"char16_t\""]
  135 -> 30 [style=solid label="\"char32_t\""]
  135 -> 31 [style=solid label="\"wchar_t\""]
  135 -> 32 [style=solid label="\"bool\""]
  135 -> 33 [style=solid label="\"short\""]
  135 -> 34 [style=solid label="\"int\""]
  135 -> 35 [style=solid label="\"long\""]
  135 -> 36 [style=solid label="\"signed\""]
  135 -> 37 [style=solid label="\"unsigned\""]
  135 -> 38 [style=solid label="\"float\""]
  135 -> 39 [style=solid label="\"double\""]
  135 -> 40 [style=solid label="\"void\""]
  135 -> 118 [style=solid label="STRING_LITERAL"]
  135 -> 266 [style=solid label="\"sizeof\""]
  135 -> 267 [style=solid label="\"alignof\""]
  135 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  135 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  135 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  135 -> 272 [style=dashed label="SCOPE-opt"]
  135 -> 273 [style=dashed label="additive-expression"]
  135 -> 274 [style=dashed label="and-expression"]
  135 -> 276 [style=dashed label="await-expression"]
  135 -> 277 [style=dashed label="boolean-literal"]
  135 -> 278 [style=dashed label="cast-expression"]
  135 -> 279 [style=dashed label="character-literal"]
  135 -> 55 [style=dashed label="class-name"]
  135 -> 280 [style=dashed label="compare-expression"]
  135 -> 327 [style=dashed label="conditional-expression"]
  135 -> 328 [style=dashed label="constant-expression"]
  135 -> 282 [style=dashed label="conversion-function-id"]
  135 -> 63 [style=dashed label="decltype-specifier"]
  135 -> 283 [style=dashed label="delete-expression"]
  135 -> 71 [style=dashed label="enum-name"]
  135 -> 284 [style=dashed label="equality-expression"]
  135 -> 285 [style=dashed label="exclusive-or-expression"]
  135 -> 287 [style=dashed label="floating-point-literal"]
  135 -> 288 [style=dashed label="fold-expression"]
  135 -> 289 [style=dashed label="id-expression"]
  135 -> 290 [style=dashed label="inclusive-or-expression"]
  135 -> 291 [style=dashed label="integer-literal"]
  135 -> 292 [style=dashed label="lambda-expression"]
  135 -> 293 [style=dashed label="lambda-introducer"]
  135 -> 294 [style=dashed label="literal"]
  135 -> 295 [style=dashed label="literal-operator-id"]
  135 -> 296 [style=dashed label="logical-and-expression"]
  135 -> 329 [style=dashed label="logical-or-expression"]
  135 -> 298 [style=dashed label="multiplicative-expression"]
  135 -> 85 [style=dashed label="namespace-alias"]
  135 -> 88 [style=dashed label="namespace-name"]
  135 -> 299 [style=dashed label="nested-name-specifier"]
  135 -> 90 [style=dashed label="nested-name-specifier-opt"]
  135 -> 300 [style=dashed label="new-expression"]
  135 -> 301 [style=dashed label="noexcept-expression"]
  135 -> 302 [style=dashed label="operator-function-id"]
  135 -> 94 [style=dashed label="placeholder-type-specifier"]
  135 -> 303 [style=dashed label="pm-expression"]
  135 -> 304 [style=dashed label="pointer-literal"]
  135 -> 305 [style=dashed label="postfix-expression"]
  135 -> 306 [style=dashed label="primary-expression"]
  135 -> 307 [style=dashed label="qualified-id"]
  135 -> 308 [style=dashed label="relational-expression"]
  135 -> 309 [style=dashed label="requires-expression"]
  135 -> 310 [style=dashed label="shift-expression"]
  135 -> 311 [style=dashed label="simple-template-id"]
  135 -> 312 [style=dashed label="simple-type-specifier"]
  135 -> 313 [style=dashed label="string-literal"]
  135 -> 314 [style=dashed label="template-id"]
  135 -> 102 [style=dashed label="template-name"]
  135 -> 104 [style=dashed label="type-constraint"]
  135 -> 105 [style=dashed label="type-constraint-opt"]
  135 -> 106 [style=dashed label="type-name"]
  135 -> 108 [style=dashed label="typedef-name"]
  135 -> 316 [style=dashed label="typename-specifier"]
  135 -> 317 [style=dashed label="unary-expression"]
  135 -> 318 [style=dashed label="unary-operator"]
  135 -> 319 [style=dashed label="unqualified-id"]
  135 -> 320 [style=dashed label="user-defined-character-literal"]
  135 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  135 -> 322 [style=dashed label="user-defined-integer-literal"]
  135 -> 323 [style=dashed label="user-defined-literal"]
  135 -> 324 [style=dashed label="user-defined-string-literal"]
  135 -> "135R19" [style=solid]
 "135R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  135 -> "135R469d" [label="[IDENTIFIER]", style=solid]
 "135R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  135 -> "135R722d" [label="[\"decltype\"]", style=solid]
 "135R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  135 -> "135R722" [label="[\"auto\"]", style=solid]
 "135R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  136 [label="State 136\n\l335 global-module-fragment: \"module\" \";\" • declaration-seq-opt\l"]
  136 -> 1 [style=solid label="\"constexpr\""]
  136 -> 2 [style=solid label="\"export\""]
  136 -> 3 [style=solid label="\"extern\""]
  136 -> 4 [style=solid label="IDENTIFIER"]
  136 -> 5 [style=solid label="\"inline\""]
  136 -> 6 [style=solid label="\"::\""]
  136 -> 7 [style=solid label="\"template\""]
  136 -> 8 [style=solid label="\"typename\""]
  136 -> 9 [style=solid label="\"virtual\""]
  136 -> 10 [style=solid label="\"using\""]
  136 -> 11 [style=solid label="\";\""]
  136 -> 12 [style=solid label="\"class\""]
  136 -> 13 [style=solid label="\"struct\""]
  136 -> 14 [style=solid label="\"union\""]
  136 -> 15 [style=solid label="\"const\""]
  136 -> 16 [style=solid label="\"volatile\""]
  136 -> 17 [style=solid label="\"friend\""]
  136 -> 18 [style=solid label="\"typedef\""]
  136 -> 19 [style=solid label="\"consteval\""]
  136 -> 20 [style=solid label="\"constinit\""]
  136 -> 21 [style=solid label="\"decltype\""]
  136 -> 22 [style=solid label="\"enum\""]
  136 -> 23 [style=solid label="\"explicit\""]
  136 -> 25 [style=solid label="\"import\""]
  136 -> 26 [style=solid label="\"namespace\""]
  136 -> 27 [style=solid label="\"char\""]
  136 -> 28 [style=solid label="\"char8_t\""]
  136 -> 29 [style=solid label="\"char16_t\""]
  136 -> 30 [style=solid label="\"char32_t\""]
  136 -> 31 [style=solid label="\"wchar_t\""]
  136 -> 32 [style=solid label="\"bool\""]
  136 -> 33 [style=solid label="\"short\""]
  136 -> 34 [style=solid label="\"int\""]
  136 -> 35 [style=solid label="\"long\""]
  136 -> 36 [style=solid label="\"signed\""]
  136 -> 37 [style=solid label="\"unsigned\""]
  136 -> 38 [style=solid label="\"float\""]
  136 -> 39 [style=solid label="\"double\""]
  136 -> 40 [style=solid label="\"void\""]
  136 -> 41 [style=solid label="\"static_assert\""]
  136 -> 42 [style=solid label="\"static\""]
  136 -> 43 [style=solid label="\"thread_local\""]
  136 -> 44 [style=solid label="\"mutable\""]
  136 -> 45 [style=dashed label="EXTERN-opt"]
  136 -> 46 [style=dashed label="INLINE-opt"]
  136 -> 47 [style=dashed label="alias-declaration"]
  136 -> 48 [style=dashed label="asm-declaration"]
  136 -> 49 [style=dashed label="attribute-declaration"]
  136 -> 50 [style=dashed label="attribute-specifier-seq"]
  136 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  136 -> 52 [style=dashed label="block-declaration"]
  136 -> 53 [style=dashed label="class-head"]
  136 -> 54 [style=dashed label="class-key"]
  136 -> 55 [style=dashed label="class-name"]
  136 -> 56 [style=dashed label="class-specifier"]
  136 -> 57 [style=dashed label="cv-qualifier"]
  136 -> 58 [style=dashed label="decl-specifier"]
  136 -> 59 [style=dashed label="decl-specifier-seq"]
  136 -> 60 [style=dashed label="declaration"]
  136 -> 61 [style=dashed label="declaration-seq"]
  136 -> 330 [style=dashed label="declaration-seq-opt"]
  136 -> 63 [style=dashed label="decltype-specifier"]
  136 -> 64 [style=dashed label="deduction-guide"]
  136 -> 65 [style=dashed label="defining-type-specifier"]
  136 -> 66 [style=dashed label="elaborated-enum-specifier"]
  136 -> 67 [style=dashed label="elaborated-type-specifier"]
  136 -> 68 [style=dashed label="empty-declaration"]
  136 -> 69 [style=dashed label="enum-head"]
  136 -> 70 [style=dashed label="enum-key"]
  136 -> 71 [style=dashed label="enum-name"]
  136 -> 72 [style=dashed label="enum-specifier"]
  136 -> 73 [style=dashed label="explicit-instantiation"]
  136 -> 74 [style=dashed label="explicit-specialization"]
  136 -> 75 [style=dashed label="explicit-specifier"]
  136 -> 76 [style=dashed label="explicit-specifier-opt"]
  136 -> 77 [style=dashed label="export-declaration"]
  136 -> 78 [style=dashed label="function-definition"]
  136 -> 79 [style=dashed label="function-specifier"]
  136 -> 82 [style=dashed label="linkage-specification"]
  136 -> 83 [style=dashed label="module-import-declaration"]
  136 -> 84 [style=dashed label="named-namespace-definition"]
  136 -> 85 [style=dashed label="namespace-alias"]
  136 -> 86 [style=dashed label="namespace-alias-definition"]
  136 -> 87 [style=dashed label="namespace-definition"]
  136 -> 88 [style=dashed label="namespace-name"]
  136 -> 89 [style=dashed label="nested-name-specifier"]
  136 -> 90 [style=dashed label="nested-name-specifier-opt"]
  136 -> 91 [style=dashed label="nested-namespace-definition"]
  136 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  136 -> 93 [style=dashed label="opaque-enum-declaration"]
  136 -> 94 [style=dashed label="placeholder-type-specifier"]
  136 -> 95 [style=dashed label="simple-declaration"]
  136 -> 96 [style=dashed label="simple-template-id"]
  136 -> 97 [style=dashed label="simple-type-specifier"]
  136 -> 98 [style=dashed label="static_assert-declaration"]
  136 -> 99 [style=dashed label="storage-class-specifier"]
  136 -> 100 [style=dashed label="template-declaration"]
  136 -> 101 [style=dashed label="template-head"]
  136 -> 102 [style=dashed label="template-name"]
  136 -> 104 [style=dashed label="type-constraint"]
  136 -> 105 [style=dashed label="type-constraint-opt"]
  136 -> 106 [style=dashed label="type-name"]
  136 -> 107 [style=dashed label="type-specifier"]
  136 -> 108 [style=dashed label="typedef-name"]
  136 -> 109 [style=dashed label="typename-specifier"]
  136 -> 110 [style=dashed label="unnamed-namespace-definition"]
  136 -> 111 [style=dashed label="using-declaration"]
  136 -> 112 [style=dashed label="using-directive"]
  136 -> 113 [style=dashed label="using-enum-declaration"]
  136 -> "136R9d" [label="[\"template\"]", style=solid]
 "136R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  136 -> "136R13d" [label="[\"namespace\"]", style=solid]
 "136R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  136 -> "136R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "136R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  136 -> "136R83" [label="[]", style=solid]
 "136R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  136 -> "136R210d" [label="[\"export\"]", style=solid]
 "136R210d" [label="R210", fillcolor=5, shape=diamond, style=filled]
  136 -> "136R210" [label="[\"module\"]", style=solid]
 "136R210" [label="R210", fillcolor=3, shape=diamond, style=filled]
  136 -> "136R270d" [label="[IDENTIFIER]", style=solid]
 "136R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  136 -> "136R469d" [label="[IDENTIFIER]", style=solid]
 "136R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  136 -> "136R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "136R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  137 [label="State 137\n\l443 module-name-qualifier: IDENTIFIER • \".\"\l"]
  137 -> 331 [style=solid label="\".\""]
  138 [label="State 138\n\l447 module-partition: \":\" • module-name-qualifier-opt IDENTIFIER\l"]
  138 -> 137 [style=solid label="IDENTIFIER"]
  138 -> 142 [style=dashed label="module-name-qualifier"]
  138 -> 332 [style=dashed label="module-name-qualifier-opt"]
  138 -> "138R445d" [label="[IDENTIFIER]", style=solid]
 "138R445d" [label="R445", fillcolor=5, shape=diamond, style=filled]
  139 [label="State 139\n\l342 header-name: HEADER_NAME •\l"]
  139 -> "139R342" [style=solid]
 "139R342" [label="R342", fillcolor=3, shape=diamond, style=filled]
  140 [label="State 140\n\l441 module-import-declaration: \"import\" header-name • attribute-specifier-seq-opt \";\"\l"]
  140 -> 177 [style=dashed label="attribute-specifier-seq"]
  140 -> 333 [style=dashed label="attribute-specifier-seq-opt"]
  140 -> "140R83" [style=solid]
 "140R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  141 [label="State 141\n\l439 module-import-declaration: \"import\" module-name • attribute-specifier-seq-opt \";\"\l"]
  141 -> 177 [style=dashed label="attribute-specifier-seq"]
  141 -> 334 [style=dashed label="attribute-specifier-seq-opt"]
  141 -> "141R83" [style=solid]
 "141R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  142 [label="State 142\n\l444 module-name-qualifier: module-name-qualifier • IDENTIFIER \".\"\l446 module-name-qualifier-opt: module-name-qualifier •\l"]
  142 -> 335 [style=solid label="IDENTIFIER"]
  142 -> "142R446d" [label="[IDENTIFIER]", style=solid]
 "142R446d" [label="R446", fillcolor=5, shape=diamond, style=filled]
  143 [label="State 143\n\l442 module-name: module-name-qualifier-opt • IDENTIFIER\l"]
  143 -> 336 [style=solid label="IDENTIFIER"]
  144 [label="State 144\n\l440 module-import-declaration: \"import\" module-partition • attribute-specifier-seq-opt \";\"\l"]
  144 -> 177 [style=dashed label="attribute-specifier-seq"]
  144 -> 337 [style=dashed label="attribute-specifier-seq-opt"]
  144 -> "144R83" [style=solid]
 "144R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  145 [label="State 145\n\l236 enclosing-namespace-specifier: IDENTIFIER •\l456 namespace-alias-definition: \"namespace\" IDENTIFIER • \"=\" qualified-namespace-specifier \";\"\l"]
  145 -> 338 [style=solid label="\"=\""]
  145 -> "145R236" [style=solid]
 "145R236" [label="R236", fillcolor=3, shape=diamond, style=filled]
  146 [label="State 146\n\l237 enclosing-namespace-specifier: enclosing-namespace-specifier • \"::\" INLINE-opt IDENTIFIER\l471 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier • \"::\" INLINE-opt IDENTIFIER \"{\" namespace-body \"}\"\l"]
  146 -> 339 [style=solid label="\"::\""]
  147 [label="State 147\n\l688 static_assert-declaration: \"static_assert\" \"(\" • constant-expression \")\" \";\"\l689                          | \"static_assert\" \"(\" • constant-expression \",\" string-literal \")\" \";\"\l"]
  147 -> 238 [style=solid label="IDENTIFIER"]
  147 -> 239 [style=solid label="\"noexcept\""]
  147 -> 240 [style=solid label="\"!\""]
  147 -> 241 [style=solid label="\"::\""]
  147 -> 242 [style=solid label="\"this\""]
  147 -> 8 [style=solid label="\"typename\""]
  147 -> 243 [style=solid label="\"+\""]
  147 -> 244 [style=solid label="\"-\""]
  147 -> 245 [style=solid label="\"(\""]
  147 -> 246 [style=solid label="\"&\""]
  147 -> 247 [style=solid label="\"[\""]
  147 -> 248 [style=solid label="\"co_await\""]
  147 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  147 -> 250 [style=solid label="CHARACTER_LITERAL"]
  147 -> 251 [style=solid label="\"operator\""]
  147 -> 21 [style=solid label="\"decltype\""]
  147 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  147 -> 253 [style=solid label="\"*\""]
  147 -> 254 [style=solid label="INTEGER_LITERAL"]
  147 -> 255 [style=solid label="\"requires\""]
  147 -> 256 [style=solid label="\"~\""]
  147 -> 257 [style=solid label="\"++\""]
  147 -> 258 [style=solid label="\"--\""]
  147 -> 259 [style=solid label="POINTER_LITERAL"]
  147 -> 260 [style=solid label="\"dynamic_cast\""]
  147 -> 261 [style=solid label="\"static_cast\""]
  147 -> 262 [style=solid label="\"reinterpret_cast\""]
  147 -> 263 [style=solid label="\"const_cast\""]
  147 -> 264 [style=solid label="\"typeid\""]
  147 -> 27 [style=solid label="\"char\""]
  147 -> 28 [style=solid label="\"char8_t\""]
  147 -> 29 [style=solid label="\"char16_t\""]
  147 -> 30 [style=solid label="\"char32_t\""]
  147 -> 31 [style=solid label="\"wchar_t\""]
  147 -> 32 [style=solid label="\"bool\""]
  147 -> 33 [style=solid label="\"short\""]
  147 -> 34 [style=solid label="\"int\""]
  147 -> 35 [style=solid label="\"long\""]
  147 -> 36 [style=solid label="\"signed\""]
  147 -> 37 [style=solid label="\"unsigned\""]
  147 -> 38 [style=solid label="\"float\""]
  147 -> 39 [style=solid label="\"double\""]
  147 -> 40 [style=solid label="\"void\""]
  147 -> 118 [style=solid label="STRING_LITERAL"]
  147 -> 266 [style=solid label="\"sizeof\""]
  147 -> 267 [style=solid label="\"alignof\""]
  147 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  147 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  147 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  147 -> 272 [style=dashed label="SCOPE-opt"]
  147 -> 273 [style=dashed label="additive-expression"]
  147 -> 274 [style=dashed label="and-expression"]
  147 -> 276 [style=dashed label="await-expression"]
  147 -> 277 [style=dashed label="boolean-literal"]
  147 -> 278 [style=dashed label="cast-expression"]
  147 -> 279 [style=dashed label="character-literal"]
  147 -> 55 [style=dashed label="class-name"]
  147 -> 280 [style=dashed label="compare-expression"]
  147 -> 327 [style=dashed label="conditional-expression"]
  147 -> 340 [style=dashed label="constant-expression"]
  147 -> 282 [style=dashed label="conversion-function-id"]
  147 -> 63 [style=dashed label="decltype-specifier"]
  147 -> 283 [style=dashed label="delete-expression"]
  147 -> 71 [style=dashed label="enum-name"]
  147 -> 284 [style=dashed label="equality-expression"]
  147 -> 285 [style=dashed label="exclusive-or-expression"]
  147 -> 287 [style=dashed label="floating-point-literal"]
  147 -> 288 [style=dashed label="fold-expression"]
  147 -> 289 [style=dashed label="id-expression"]
  147 -> 290 [style=dashed label="inclusive-or-expression"]
  147 -> 291 [style=dashed label="integer-literal"]
  147 -> 292 [style=dashed label="lambda-expression"]
  147 -> 293 [style=dashed label="lambda-introducer"]
  147 -> 294 [style=dashed label="literal"]
  147 -> 295 [style=dashed label="literal-operator-id"]
  147 -> 296 [style=dashed label="logical-and-expression"]
  147 -> 329 [style=dashed label="logical-or-expression"]
  147 -> 298 [style=dashed label="multiplicative-expression"]
  147 -> 85 [style=dashed label="namespace-alias"]
  147 -> 88 [style=dashed label="namespace-name"]
  147 -> 299 [style=dashed label="nested-name-specifier"]
  147 -> 90 [style=dashed label="nested-name-specifier-opt"]
  147 -> 300 [style=dashed label="new-expression"]
  147 -> 301 [style=dashed label="noexcept-expression"]
  147 -> 302 [style=dashed label="operator-function-id"]
  147 -> 94 [style=dashed label="placeholder-type-specifier"]
  147 -> 303 [style=dashed label="pm-expression"]
  147 -> 304 [style=dashed label="pointer-literal"]
  147 -> 305 [style=dashed label="postfix-expression"]
  147 -> 306 [style=dashed label="primary-expression"]
  147 -> 307 [style=dashed label="qualified-id"]
  147 -> 308 [style=dashed label="relational-expression"]
  147 -> 309 [style=dashed label="requires-expression"]
  147 -> 310 [style=dashed label="shift-expression"]
  147 -> 311 [style=dashed label="simple-template-id"]
  147 -> 312 [style=dashed label="simple-type-specifier"]
  147 -> 313 [style=dashed label="string-literal"]
  147 -> 314 [style=dashed label="template-id"]
  147 -> 102 [style=dashed label="template-name"]
  147 -> 104 [style=dashed label="type-constraint"]
  147 -> 105 [style=dashed label="type-constraint-opt"]
  147 -> 106 [style=dashed label="type-name"]
  147 -> 108 [style=dashed label="typedef-name"]
  147 -> 316 [style=dashed label="typename-specifier"]
  147 -> 317 [style=dashed label="unary-expression"]
  147 -> 318 [style=dashed label="unary-operator"]
  147 -> 319 [style=dashed label="unqualified-id"]
  147 -> 320 [style=dashed label="user-defined-character-literal"]
  147 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  147 -> 322 [style=dashed label="user-defined-integer-literal"]
  147 -> 323 [style=dashed label="user-defined-literal"]
  147 -> 324 [style=dashed label="user-defined-string-literal"]
  147 -> "147R19" [style=solid]
 "147R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  147 -> "147R469d" [label="[IDENTIFIER]", style=solid]
 "147R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  147 -> "147R722d" [label="[\"decltype\"]", style=solid]
 "147R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  147 -> "147R722" [label="[\"auto\"]", style=solid]
 "147R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  148 [label="State 148\n\l266 explicit-instantiation: EXTERN-opt \"template\" • declaration\l"]
  148 -> 1 [style=solid label="\"constexpr\""]
  148 -> 2 [style=solid label="\"export\""]
  148 -> 3 [style=solid label="\"extern\""]
  148 -> 4 [style=solid label="IDENTIFIER"]
  148 -> 5 [style=solid label="\"inline\""]
  148 -> 6 [style=solid label="\"::\""]
  148 -> 7 [style=solid label="\"template\""]
  148 -> 8 [style=solid label="\"typename\""]
  148 -> 9 [style=solid label="\"virtual\""]
  148 -> 10 [style=solid label="\"using\""]
  148 -> 11 [style=solid label="\";\""]
  148 -> 12 [style=solid label="\"class\""]
  148 -> 13 [style=solid label="\"struct\""]
  148 -> 14 [style=solid label="\"union\""]
  148 -> 15 [style=solid label="\"const\""]
  148 -> 16 [style=solid label="\"volatile\""]
  148 -> 17 [style=solid label="\"friend\""]
  148 -> 18 [style=solid label="\"typedef\""]
  148 -> 19 [style=solid label="\"consteval\""]
  148 -> 20 [style=solid label="\"constinit\""]
  148 -> 21 [style=solid label="\"decltype\""]
  148 -> 22 [style=solid label="\"enum\""]
  148 -> 23 [style=solid label="\"explicit\""]
  148 -> 25 [style=solid label="\"import\""]
  148 -> 26 [style=solid label="\"namespace\""]
  148 -> 27 [style=solid label="\"char\""]
  148 -> 28 [style=solid label="\"char8_t\""]
  148 -> 29 [style=solid label="\"char16_t\""]
  148 -> 30 [style=solid label="\"char32_t\""]
  148 -> 31 [style=solid label="\"wchar_t\""]
  148 -> 32 [style=solid label="\"bool\""]
  148 -> 33 [style=solid label="\"short\""]
  148 -> 34 [style=solid label="\"int\""]
  148 -> 35 [style=solid label="\"long\""]
  148 -> 36 [style=solid label="\"signed\""]
  148 -> 37 [style=solid label="\"unsigned\""]
  148 -> 38 [style=solid label="\"float\""]
  148 -> 39 [style=solid label="\"double\""]
  148 -> 40 [style=solid label="\"void\""]
  148 -> 41 [style=solid label="\"static_assert\""]
  148 -> 42 [style=solid label="\"static\""]
  148 -> 43 [style=solid label="\"thread_local\""]
  148 -> 44 [style=solid label="\"mutable\""]
  148 -> 45 [style=dashed label="EXTERN-opt"]
  148 -> 46 [style=dashed label="INLINE-opt"]
  148 -> 47 [style=dashed label="alias-declaration"]
  148 -> 48 [style=dashed label="asm-declaration"]
  148 -> 49 [style=dashed label="attribute-declaration"]
  148 -> 50 [style=dashed label="attribute-specifier-seq"]
  148 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  148 -> 52 [style=dashed label="block-declaration"]
  148 -> 53 [style=dashed label="class-head"]
  148 -> 54 [style=dashed label="class-key"]
  148 -> 55 [style=dashed label="class-name"]
  148 -> 56 [style=dashed label="class-specifier"]
  148 -> 57 [style=dashed label="cv-qualifier"]
  148 -> 58 [style=dashed label="decl-specifier"]
  148 -> 59 [style=dashed label="decl-specifier-seq"]
  148 -> 341 [style=dashed label="declaration"]
  148 -> 63 [style=dashed label="decltype-specifier"]
  148 -> 64 [style=dashed label="deduction-guide"]
  148 -> 65 [style=dashed label="defining-type-specifier"]
  148 -> 66 [style=dashed label="elaborated-enum-specifier"]
  148 -> 67 [style=dashed label="elaborated-type-specifier"]
  148 -> 68 [style=dashed label="empty-declaration"]
  148 -> 69 [style=dashed label="enum-head"]
  148 -> 70 [style=dashed label="enum-key"]
  148 -> 71 [style=dashed label="enum-name"]
  148 -> 72 [style=dashed label="enum-specifier"]
  148 -> 73 [style=dashed label="explicit-instantiation"]
  148 -> 74 [style=dashed label="explicit-specialization"]
  148 -> 75 [style=dashed label="explicit-specifier"]
  148 -> 76 [style=dashed label="explicit-specifier-opt"]
  148 -> 77 [style=dashed label="export-declaration"]
  148 -> 78 [style=dashed label="function-definition"]
  148 -> 79 [style=dashed label="function-specifier"]
  148 -> 82 [style=dashed label="linkage-specification"]
  148 -> 83 [style=dashed label="module-import-declaration"]
  148 -> 84 [style=dashed label="named-namespace-definition"]
  148 -> 85 [style=dashed label="namespace-alias"]
  148 -> 86 [style=dashed label="namespace-alias-definition"]
  148 -> 87 [style=dashed label="namespace-definition"]
  148 -> 88 [style=dashed label="namespace-name"]
  148 -> 89 [style=dashed label="nested-name-specifier"]
  148 -> 90 [style=dashed label="nested-name-specifier-opt"]
  148 -> 91 [style=dashed label="nested-namespace-definition"]
  148 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  148 -> 93 [style=dashed label="opaque-enum-declaration"]
  148 -> 94 [style=dashed label="placeholder-type-specifier"]
  148 -> 95 [style=dashed label="simple-declaration"]
  148 -> 96 [style=dashed label="simple-template-id"]
  148 -> 97 [style=dashed label="simple-type-specifier"]
  148 -> 98 [style=dashed label="static_assert-declaration"]
  148 -> 99 [style=dashed label="storage-class-specifier"]
  148 -> 100 [style=dashed label="template-declaration"]
  148 -> 101 [style=dashed label="template-head"]
  148 -> 102 [style=dashed label="template-name"]
  148 -> 104 [style=dashed label="type-constraint"]
  148 -> 105 [style=dashed label="type-constraint-opt"]
  148 -> 106 [style=dashed label="type-name"]
  148 -> 107 [style=dashed label="type-specifier"]
  148 -> 108 [style=dashed label="typedef-name"]
  148 -> 109 [style=dashed label="typename-specifier"]
  148 -> 110 [style=dashed label="unnamed-namespace-definition"]
  148 -> 111 [style=dashed label="using-declaration"]
  148 -> 112 [style=dashed label="using-directive"]
  148 -> 113 [style=dashed label="using-enum-declaration"]
  148 -> "148R9d" [label="[\"template\"]", style=solid]
 "148R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R13d" [label="[\"namespace\"]", style=solid]
 "148R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "148R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R83" [label="[]", style=solid]
 "148R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  148 -> "148R270d" [label="[IDENTIFIER]", style=solid]
 "148R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R469d" [label="[IDENTIFIER]", style=solid]
 "148R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "148R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  149 [label="State 149\n\l454 named-namespace-definition: INLINE-opt \"namespace\" • attribute-specifier-seq-opt IDENTIFIER \"{\" namespace-body \"}\"\l766 unnamed-namespace-definition: INLINE-opt \"namespace\" • attribute-specifier-seq-opt \"{\" namespace-body \"}\"\l"]
  149 -> 177 [style=dashed label="attribute-specifier-seq"]
  149 -> 342 [style=dashed label="attribute-specifier-seq-opt"]
  149 -> "149R83" [style=solid]
 "149R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  150 [label="State 150\n\l692 storage-class-specifier: \"extern\" •\l"]
  150 -> "150R692" [style=solid]
 "150R692" [label="R692", fillcolor=3, shape=diamond, style=filled]
  151 [label="State 151\n\l190 decl-specifier: \"inline\" •\l"]
  151 -> "151R190" [style=solid]
 "151R190" [label="R190", fillcolor=3, shape=diamond, style=filled]
  152 [label="State 152\n\l 71 attribute-declaration: attribute-specifier-seq \";\" •\l"]
  152 -> "152R71" [style=solid]
 "152R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  153 [label="State 153\n\l653 simple-declaration: attribute-specifier-seq decl-specifier-seq • init-declarator-list \";\"\l"]
  153 -> 156 [style=solid label="\"...\""]
  153 -> 4 [style=solid label="IDENTIFIER"]
  153 -> 6 [style=solid label="\"::\""]
  153 -> 159 [style=solid label="\"(\""]
  153 -> 160 [style=solid label="\"&\""]
  153 -> 163 [style=solid label="\"&&\""]
  153 -> 21 [style=solid label="\"decltype\""]
  153 -> 164 [style=solid label="\"*\""]
  153 -> 165 [style=dashed label="ELLIPSIS-opt"]
  153 -> 55 [style=dashed label="class-name"]
  153 -> 183 [style=dashed label="declarator"]
  153 -> 171 [style=dashed label="declarator-id"]
  153 -> 121 [style=dashed label="decltype-specifier"]
  153 -> 71 [style=dashed label="enum-name"]
  153 -> 184 [style=dashed label="init-declarator"]
  153 -> 343 [style=dashed label="init-declarator-list"]
  153 -> 85 [style=dashed label="namespace-alias"]
  153 -> 88 [style=dashed label="namespace-name"]
  153 -> 187 [style=dashed label="nested-name-specifier"]
  153 -> 173 [style=dashed label="noptr-declarator"]
  153 -> 174 [style=dashed label="ptr-declarator"]
  153 -> 175 [style=dashed label="ptr-operator"]
  153 -> 96 [style=dashed label="simple-template-id"]
  153 -> 102 [style=dashed label="template-name"]
  153 -> 106 [style=dashed label="type-name"]
  153 -> 108 [style=dashed label="typedef-name"]
  153 -> "153R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "153R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  153 -> "153R5" [style=solid]
 "153R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  154 [label="State 154\n\l241 enum-head: enum-key • attribute-specifier-seq-opt enum-head-name-opt enum-base-opt\l"]
  154 -> 177 [style=dashed label="attribute-specifier-seq"]
  154 -> 344 [style=dashed label="attribute-specifier-seq-opt"]
  154 -> "154R83" [style=solid]
 "154R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  155 [label="State 155\n\l333 function-specifier: explicit-specifier •\l"]
  155 -> "155R333" [style=solid]
 "155R333" [label="R333", fillcolor=3, shape=diamond, style=filled]
  156 [label="State 156\n\l  6 ELLIPSIS-opt: \"...\" •\l"]
  156 -> "156R6" [style=solid]
 "156R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  157 [label="State 157\n\l786 using-directive: attribute-specifier-seq-opt \"using\" • \"namespace\" nested-name-specifier-opt namespace-name \";\"\l"]
  157 -> 345 [style=solid label="\"namespace\""]
  158 [label="State 158\n\l 45 alignment-specifier: \"alignas\" • \"(\" type-id ELLIPSIS-opt \")\"\l 46                    | \"alignas\" • \"(\" constant-expression ELLIPSIS-opt \")\"\l"]
  158 -> 346 [style=solid label="\"(\""]
  159 [label="State 159\n\l504 noptr-declarator: \"(\" • ptr-declarator \")\"\l"]
  159 -> 156 [style=solid label="\"...\""]
  159 -> 4 [style=solid label="IDENTIFIER"]
  159 -> 6 [style=solid label="\"::\""]
  159 -> 159 [style=solid label="\"(\""]
  159 -> 160 [style=solid label="\"&\""]
  159 -> 163 [style=solid label="\"&&\""]
  159 -> 21 [style=solid label="\"decltype\""]
  159 -> 164 [style=solid label="\"*\""]
  159 -> 165 [style=dashed label="ELLIPSIS-opt"]
  159 -> 55 [style=dashed label="class-name"]
  159 -> 171 [style=dashed label="declarator-id"]
  159 -> 121 [style=dashed label="decltype-specifier"]
  159 -> 71 [style=dashed label="enum-name"]
  159 -> 85 [style=dashed label="namespace-alias"]
  159 -> 88 [style=dashed label="namespace-name"]
  159 -> 187 [style=dashed label="nested-name-specifier"]
  159 -> 347 [style=dashed label="noptr-declarator"]
  159 -> 348 [style=dashed label="ptr-declarator"]
  159 -> 175 [style=dashed label="ptr-operator"]
  159 -> 96 [style=dashed label="simple-template-id"]
  159 -> 102 [style=dashed label="template-name"]
  159 -> 106 [style=dashed label="type-name"]
  159 -> 108 [style=dashed label="typedef-name"]
  159 -> "159R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "159R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  159 -> "159R5" [style=solid]
 "159R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  160 [label="State 160\n\l606 ptr-operator: \"&\" • attribute-specifier-seq-opt\l"]
  160 -> 177 [style=dashed label="attribute-specifier-seq"]
  160 -> 349 [style=dashed label="attribute-specifier-seq-opt"]
  160 -> "160R83" [style=solid]
 "160R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  161 [label="State 161\n\l 49 asm-declaration: attribute-specifier-seq-opt \"asm\" • \"(\" string-literal \")\" \";\"\l"]
  161 -> 350 [style=solid label="\"(\""]
  162 [label="State 162\n\l 80 attribute-specifier: \"[\" • \"[\" attribute-using-prefix-opt attribute-list \"]\" \"]\"\l"]
  162 -> 351 [style=solid label="\"[\""]
  163 [label="State 163\n\l607 ptr-operator: \"&&\" • attribute-specifier-seq-opt\l"]
  163 -> 177 [style=dashed label="attribute-specifier-seq"]
  163 -> 352 [style=dashed label="attribute-specifier-seq-opt"]
  163 -> "163R83" [style=solid]
 "163R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  164 [label="State 164\n\l605 ptr-operator: \"*\" • attribute-specifier-seq-opt cv-qualifier-seq-opt\l"]
  164 -> 177 [style=dashed label="attribute-specifier-seq"]
  164 -> 353 [style=dashed label="attribute-specifier-seq-opt"]
  164 -> "164R83" [style=solid]
 "164R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  165 [label="State 165\n\l215 declarator-id: ELLIPSIS-opt • id-expression\l"]
  165 -> 238 [style=solid label="IDENTIFIER"]
  165 -> 6 [style=solid label="\"::\""]
  165 -> 251 [style=solid label="\"operator\""]
  165 -> 21 [style=solid label="\"decltype\""]
  165 -> 354 [style=solid label="\"~\""]
  165 -> 55 [style=dashed label="class-name"]
  165 -> 282 [style=dashed label="conversion-function-id"]
  165 -> 121 [style=dashed label="decltype-specifier"]
  165 -> 71 [style=dashed label="enum-name"]
  165 -> 355 [style=dashed label="id-expression"]
  165 -> 295 [style=dashed label="literal-operator-id"]
  165 -> 85 [style=dashed label="namespace-alias"]
  165 -> 88 [style=dashed label="namespace-name"]
  165 -> 356 [style=dashed label="nested-name-specifier"]
  165 -> 302 [style=dashed label="operator-function-id"]
  165 -> 307 [style=dashed label="qualified-id"]
  165 -> 311 [style=dashed label="simple-template-id"]
  165 -> 314 [style=dashed label="template-id"]
  165 -> 102 [style=dashed label="template-name"]
  165 -> 106 [style=dashed label="type-name"]
  165 -> 108 [style=dashed label="typedef-name"]
  165 -> 319 [style=dashed label="unqualified-id"]
  166 [label="State 166\n\l 81 attribute-specifier: alignment-specifier •\l"]
  166 -> "166R81" [style=solid]
 "166R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
  167 [label="State 167\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt attribute-specifier •\l"]
  167 -> "167R82" [style=solid]
 "167R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
  168 [label="State 168\n\l194 decl-specifier-seq-opt: decl-specifier-seq •\l654 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq • ref-qualifier-opt \"[\" identifier-list \"]\" initializer \";\"\l"]
  168 -> 357 [style=solid label="\"&\""]
  168 -> 358 [style=solid label="\"&&\""]
  168 -> 359 [style=dashed label="ref-qualifier"]
  168 -> 360 [style=dashed label="ref-qualifier-opt"]
  168 -> "168R194d" [label="[\"&\", \"&&\"]", style=solid]
 "168R194d" [label="R194", fillcolor=5, shape=diamond, style=filled]
  168 -> "168R194" [style=solid]
 "168R194" [label="R194", fillcolor=3, shape=diamond, style=filled]
  168 -> "168R616" [label="[\"[\"]", style=solid]
 "168R616" [label="R616", fillcolor=3, shape=diamond, style=filled]
  169 [label="State 169\n\l330 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt • declarator virt-specifier-seq-opt function-body\l331                    | attribute-specifier-seq-opt decl-specifier-seq-opt • declarator requires-clause function-body\l"]
  169 -> 156 [style=solid label="\"...\""]
  169 -> 4 [style=solid label="IDENTIFIER"]
  169 -> 6 [style=solid label="\"::\""]
  169 -> 159 [style=solid label="\"(\""]
  169 -> 160 [style=solid label="\"&\""]
  169 -> 163 [style=solid label="\"&&\""]
  169 -> 21 [style=solid label="\"decltype\""]
  169 -> 164 [style=solid label="\"*\""]
  169 -> 165 [style=dashed label="ELLIPSIS-opt"]
  169 -> 55 [style=dashed label="class-name"]
  169 -> 361 [style=dashed label="declarator"]
  169 -> 171 [style=dashed label="declarator-id"]
  169 -> 121 [style=dashed label="decltype-specifier"]
  169 -> 71 [style=dashed label="enum-name"]
  169 -> 85 [style=dashed label="namespace-alias"]
  169 -> 88 [style=dashed label="namespace-name"]
  169 -> 187 [style=dashed label="nested-name-specifier"]
  169 -> 173 [style=dashed label="noptr-declarator"]
  169 -> 174 [style=dashed label="ptr-declarator"]
  169 -> 175 [style=dashed label="ptr-operator"]
  169 -> 96 [style=dashed label="simple-template-id"]
  169 -> 102 [style=dashed label="template-name"]
  169 -> 106 [style=dashed label="type-name"]
  169 -> 108 [style=dashed label="typedef-name"]
  169 -> "169R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "169R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  169 -> "169R5" [style=solid]
 "169R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  170 [label="State 170\n\l487 nodeclspec-function-declaration: attribute-specifier-seq-opt declarator • \";\"\l"]
  170 -> 362 [style=solid label="\";\""]
  171 [label="State 171\n\l501 noptr-declarator: declarator-id • attribute-specifier-seq-opt\l"]
  171 -> 177 [style=dashed label="attribute-specifier-seq"]
  171 -> 363 [style=dashed label="attribute-specifier-seq-opt"]
  171 -> "171R83" [style=solid]
 "171R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  172 [label="State 172\n\l467 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l468                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l470 nested-name-specifier-opt: nested-name-specifier •\l608 ptr-operator: nested-name-specifier • \"*\" attribute-specifier-seq-opt cv-qualifier-seq-opt\l658 simple-type-specifier: nested-name-specifier • \"template\" simple-template-id\l"]
  172 -> 198 [style=solid label="IDENTIFIER"]
  172 -> 199 [style=solid label="\"template\""]
  172 -> 364 [style=solid label="\"*\""]
  172 -> 200 [style=dashed label="TEMPLATE-opt"]
  172 -> "172R21d" [label="[IDENTIFIER]", style=solid]
 "172R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  172 -> "172R470d" [label="[IDENTIFIER]", style=solid]
 "172R470d" [label="R470", fillcolor=5, shape=diamond, style=filled]
  173 [label="State 173\n\l214 declarator: noptr-declarator • parameters-and-qualifiers trailing-return-type\l502 noptr-declarator: noptr-declarator • parameters-and-qualifiers\l503                 | noptr-declarator • \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt\l603 ptr-declarator: noptr-declarator •\l"]
  173 -> 365 [style=solid label="\"(\""]
  173 -> 366 [style=solid label="\"[\""]
  173 -> 367 [style=dashed label="parameters-and-qualifiers"]
  173 -> "173R603d" [label="[\"(\"]", style=solid]
 "173R603d" [label="R603", fillcolor=5, shape=diamond, style=filled]
  173 -> "173R603" [style=solid]
 "173R603" [label="R603", fillcolor=3, shape=diamond, style=filled]
  174 [label="State 174\n\l213 declarator: ptr-declarator •\l"]
  174 -> "174R213" [style=solid]
 "174R213" [label="R213", fillcolor=3, shape=diamond, style=filled]
  175 [label="State 175\n\l604 ptr-declarator: ptr-operator • ptr-declarator\l"]
  175 -> 156 [style=solid label="\"...\""]
  175 -> 4 [style=solid label="IDENTIFIER"]
  175 -> 6 [style=solid label="\"::\""]
  175 -> 159 [style=solid label="\"(\""]
  175 -> 160 [style=solid label="\"&\""]
  175 -> 163 [style=solid label="\"&&\""]
  175 -> 21 [style=solid label="\"decltype\""]
  175 -> 164 [style=solid label="\"*\""]
  175 -> 165 [style=dashed label="ELLIPSIS-opt"]
  175 -> 55 [style=dashed label="class-name"]
  175 -> 171 [style=dashed label="declarator-id"]
  175 -> 121 [style=dashed label="decltype-specifier"]
  175 -> 71 [style=dashed label="enum-name"]
  175 -> 85 [style=dashed label="namespace-alias"]
  175 -> 88 [style=dashed label="namespace-name"]
  175 -> 187 [style=dashed label="nested-name-specifier"]
  175 -> 347 [style=dashed label="noptr-declarator"]
  175 -> 368 [style=dashed label="ptr-declarator"]
  175 -> 175 [style=dashed label="ptr-operator"]
  175 -> 96 [style=dashed label="simple-template-id"]
  175 -> 102 [style=dashed label="template-name"]
  175 -> 106 [style=dashed label="type-name"]
  175 -> 108 [style=dashed label="typedef-name"]
  175 -> "175R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "175R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  175 -> "175R5" [style=solid]
 "175R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  176 [label="State 176\n\l144 class-specifier: class-head \"{\" • member-specification-opt \"}\"\l"]
  176 -> 7 [style=solid label="\"template\""]
  176 -> 369 [style=solid label="\"private\""]
  176 -> 370 [style=solid label="\"protected\""]
  176 -> 371 [style=solid label="\"public\""]
  176 -> 10 [style=solid label="\"using\""]
  176 -> 11 [style=solid label="\";\""]
  176 -> 372 [style=solid label="\"enum\""]
  176 -> 23 [style=solid label="\"explicit\""]
  176 -> 41 [style=solid label="\"static_assert\""]
  176 -> 373 [style=dashed label="access-specifier"]
  176 -> 374 [style=dashed label="alias-declaration"]
  176 -> 177 [style=dashed label="attribute-specifier-seq"]
  176 -> 375 [style=dashed label="attribute-specifier-seq-opt"]
  176 -> 376 [style=dashed label="deduction-guide"]
  176 -> 377 [style=dashed label="empty-declaration"]
  176 -> 378 [style=dashed label="enum-key"]
  176 -> 379 [style=dashed label="explicit-specialization"]
  176 -> 380 [style=dashed label="explicit-specifier"]
  176 -> 76 [style=dashed label="explicit-specifier-opt"]
  176 -> 381 [style=dashed label="function-definition"]
  176 -> 382 [style=dashed label="member-declaration"]
  176 -> 383 [style=dashed label="member-specification"]
  176 -> 384 [style=dashed label="member-specification-opt"]
  176 -> 385 [style=dashed label="opaque-enum-declaration"]
  176 -> 386 [style=dashed label="static_assert-declaration"]
  176 -> 387 [style=dashed label="template-declaration"]
  176 -> 101 [style=dashed label="template-head"]
  176 -> 388 [style=dashed label="using-declaration"]
  176 -> 389 [style=dashed label="using-enum-declaration"]
  176 -> "176R83d" [label="[\";\", \"enum\", \"explicit\"]", style=solid]
 "176R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  176 -> "176R83" [style=solid]
 "176R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  176 -> "176R270d" [label="[IDENTIFIER]", style=solid]
 "176R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  176 -> "176R436" [label="[\"}\"]", style=solid]
 "176R436" [label="R436", fillcolor=3, shape=diamond, style=filled]
  177 [label="State 177\n\l 84 attribute-specifier-seq-opt: attribute-specifier-seq •\l"]
  177 -> "177R84" [style=solid]
 "177R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  178 [label="State 178\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l133 class-head: class-key attribute-specifier-seq-opt • class-head-name class-virt-specifier-opt base-clause-opt\l134           | class-key attribute-specifier-seq-opt • base-clause-opt\l231 elaborated-type-specifier: class-key attribute-specifier-seq-opt • nested-name-specifier-opt IDENTIFIER\l"]
  178 -> 4 [style=solid label="IDENTIFIER"]
  178 -> 6 [style=solid label="\"::\""]
  178 -> 158 [style=solid label="\"alignas\""]
  178 -> 162 [style=solid label="\"[\""]
  178 -> 390 [style=solid label="\":\""]
  178 -> 21 [style=solid label="\"decltype\""]
  178 -> 166 [style=dashed label="alignment-specifier"]
  178 -> 167 [style=dashed label="attribute-specifier"]
  178 -> 391 [style=dashed label="base-clause"]
  178 -> 392 [style=dashed label="base-clause-opt"]
  178 -> 393 [style=dashed label="class-head-name"]
  178 -> 55 [style=dashed label="class-name"]
  178 -> 121 [style=dashed label="decltype-specifier"]
  178 -> 71 [style=dashed label="enum-name"]
  178 -> 85 [style=dashed label="namespace-alias"]
  178 -> 88 [style=dashed label="namespace-name"]
  178 -> 133 [style=dashed label="nested-name-specifier"]
  178 -> 394 [style=dashed label="nested-name-specifier-opt"]
  178 -> 96 [style=dashed label="simple-template-id"]
  178 -> 102 [style=dashed label="template-name"]
  178 -> 106 [style=dashed label="type-name"]
  178 -> 108 [style=dashed label="typedef-name"]
  178 -> "178R100" [style=solid]
 "178R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
  178 -> "178R469d" [label="[IDENTIFIER]", style=solid]
 "178R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  179 [label="State 179\n\l233 elaborated-type-specifier: class-key nested-name-specifier • TEMPLATE-opt simple-template-id\l467 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l468                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l"]
  179 -> 198 [style=solid label="IDENTIFIER"]
  179 -> 230 [style=solid label="\"template\""]
  179 -> 395 [style=dashed label="TEMPLATE-opt"]
  179 -> "179R21d" [label="[IDENTIFIER]", style=solid]
 "179R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  180 [label="State 180\n\l140 class-name: simple-template-id •\l232 elaborated-type-specifier: class-key simple-template-id •\l744 typedef-name: simple-template-id •\l"]
  180 -> "180R140" [label="[\"::\"]", style=solid]
 "180R140" [label="R140", fillcolor=3, shape=diamond, style=filled]
  180 -> "180R232d" [label="[\"::\"]", style=solid]
 "180R232d" [label="R232", fillcolor=5, shape=diamond, style=filled]
  180 -> "180R232" [style=solid]
 "180R232" [label="R232", fillcolor=3, shape=diamond, style=filled]
  180 -> "180R744d" [label="[\"::\"]", style=solid]
 "180R744d" [label="R744", fillcolor=5, shape=diamond, style=filled]
  181 [label="State 181\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l191 decl-specifier-seq: decl-specifier attribute-specifier-seq-opt •\l"]
  181 -> 158 [style=solid label="\"alignas\""]
  181 -> 162 [style=solid label="\"[\""]
  181 -> 166 [style=dashed label="alignment-specifier"]
  181 -> 167 [style=dashed label="attribute-specifier"]
  181 -> "181R191d" [label="[\"alignas\", \"[\"]", style=solid]
 "181R191d" [label="R191", fillcolor=5, shape=diamond, style=filled]
  181 -> "181R191" [style=solid]
 "181R191" [label="R191", fillcolor=3, shape=diamond, style=filled]
  182 [label="State 182\n\l192 decl-specifier-seq: decl-specifier decl-specifier-seq •\l"]
  182 -> "182R192" [style=solid]
 "182R192" [label="R192", fillcolor=3, shape=diamond, style=filled]
  183 [label="State 183\n\l351 init-declarator: declarator • initializer-opt\l352                | declarator • requires-clause\l"]
  183 -> 396 [style=solid label="\"=\""]
  183 -> 397 [style=solid label="\"(\""]
  183 -> 398 [style=solid label="\"{\""]
  183 -> 399 [style=solid label="\"requires\""]
  183 -> 400 [style=dashed label="brace-or-equal-initializer"]
  183 -> 401 [style=dashed label="braced-init-list"]
  183 -> 402 [style=dashed label="initializer"]
  183 -> 403 [style=dashed label="initializer-opt"]
  183 -> 404 [style=dashed label="requires-clause"]
  183 -> "183R368" [style=solid]
 "183R368" [label="R368", fillcolor=3, shape=diamond, style=filled]
  184 [label="State 184\n\l353 init-declarator-list: init-declarator •\l"]
  184 -> "184R353" [style=solid]
 "184R353" [label="R353", fillcolor=3, shape=diamond, style=filled]
  185 [label="State 185\n\l354 init-declarator-list: init-declarator-list • \",\" init-declarator\l356 init-declarator-list-opt: init-declarator-list •\l"]
  185 -> 405 [style=solid label="\",\""]
  185 -> "185R356" [style=solid]
 "185R356" [label="R356", fillcolor=3, shape=diamond, style=filled]
  186 [label="State 186\n\l652 simple-declaration: decl-specifier-seq init-declarator-list-opt • \";\"\l"]
  186 -> 406 [style=solid label="\";\""]
  187 [label="State 187\n\l467 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l468                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l608 ptr-operator: nested-name-specifier • \"*\" attribute-specifier-seq-opt cv-qualifier-seq-opt\l"]
  187 -> 198 [style=solid label="IDENTIFIER"]
  187 -> 230 [style=solid label="\"template\""]
  187 -> 364 [style=solid label="\"*\""]
  187 -> 200 [style=dashed label="TEMPLATE-opt"]
  187 -> "187R21d" [label="[IDENTIFIER]", style=solid]
 "187R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  188 [label="State 188\n\l209 declaration-seq: declaration-seq declaration •\l"]
  188 -> "188R209" [style=solid]
 "188R209" [label="R209", fillcolor=3, shape=diamond, style=filled]
  189 [label="State 189\n\l466 nested-name-specifier: decltype-specifier \"::\" •\l"]
  189 -> "189R466" [style=solid]
 "189R466" [label="R466", fillcolor=3, shape=diamond, style=filled]
  190 [label="State 190\n\l249 enum-specifier: enum-head \"{\" • enumerator-list-opt \"}\"\l250               | enum-head \"{\" • enumerator-list \",\" \"}\"\l"]
  190 -> 407 [style=solid label="IDENTIFIER"]
  190 -> 408 [style=dashed label="enumerator"]
  190 -> 409 [style=dashed label="enumerator-definition"]
  190 -> 410 [style=dashed label="enumerator-list"]
  190 -> 411 [style=dashed label="enumerator-list-opt"]
  190 -> "190R256" [style=solid]
 "190R256" [label="R256", fillcolor=3, shape=diamond, style=filled]
  191 [label="State 191\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l241 enum-head: enum-key attribute-specifier-seq-opt • enum-head-name-opt enum-base-opt\l507 opaque-enum-declaration: enum-key attribute-specifier-seq-opt • enum-head-name enum-base-opt \";\"\l"]
  191 -> 4 [style=solid label="IDENTIFIER"]
  191 -> 6 [style=solid label="\"::\""]
  191 -> 158 [style=solid label="\"alignas\""]
  191 -> 162 [style=solid label="\"[\""]
  191 -> 21 [style=solid label="\"decltype\""]
  191 -> 166 [style=dashed label="alignment-specifier"]
  191 -> 167 [style=dashed label="attribute-specifier"]
  191 -> 55 [style=dashed label="class-name"]
  191 -> 121 [style=dashed label="decltype-specifier"]
  191 -> 412 [style=dashed label="enum-head-name"]
  191 -> 413 [style=dashed label="enum-head-name-opt"]
  191 -> 71 [style=dashed label="enum-name"]
  191 -> 85 [style=dashed label="namespace-alias"]
  191 -> 88 [style=dashed label="namespace-name"]
  191 -> 133 [style=dashed label="nested-name-specifier"]
  191 -> 414 [style=dashed label="nested-name-specifier-opt"]
  191 -> 96 [style=dashed label="simple-template-id"]
  191 -> 102 [style=dashed label="template-name"]
  191 -> 106 [style=dashed label="type-name"]
  191 -> 108 [style=dashed label="typedef-name"]
  191 -> "191R243" [style=solid]
 "191R243" [label="R243", fillcolor=3, shape=diamond, style=filled]
  191 -> "191R469d" [label="[IDENTIFIER]", style=solid]
 "191R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  192 [label="State 192\n\l708 template-name: IDENTIFIER •\l"]
  192 -> "192R708" [style=solid]
 "192R708" [label="R708", fillcolor=3, shape=diamond, style=filled]
  193 [label="State 193\n\l217 deduction-guide: explicit-specifier-opt template-name • \"(\" parameter-declaration-clause \")\" \"->\" simple-template-id \";\"\l"]
  193 -> 415 [style=solid label="\"(\""]
  194 [label="State 194\n\l  8 EXPORT-opt: \"export\" •\l"]
  194 -> "194R8" [style=solid]
 "194R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  195 [label="State 195\n\l438 module-declaration: EXPORT-opt • \"module\" module-name module-partition-opt attribute-specifier-seq-opt \";\"\l"]
  195 -> 416 [style=solid label="\"module\""]
  196 [label="State 196\n\l718 translation-unit: global-module-fragment-opt module-declaration • declaration-seq-opt private-module-fragment-opt\l"]
  196 -> 1 [style=solid label="\"constexpr\""]
  196 -> 2 [style=solid label="\"export\""]
  196 -> 3 [style=solid label="\"extern\""]
  196 -> 4 [style=solid label="IDENTIFIER"]
  196 -> 5 [style=solid label="\"inline\""]
  196 -> 6 [style=solid label="\"::\""]
  196 -> 7 [style=solid label="\"template\""]
  196 -> 8 [style=solid label="\"typename\""]
  196 -> 9 [style=solid label="\"virtual\""]
  196 -> 10 [style=solid label="\"using\""]
  196 -> 11 [style=solid label="\";\""]
  196 -> 12 [style=solid label="\"class\""]
  196 -> 13 [style=solid label="\"struct\""]
  196 -> 14 [style=solid label="\"union\""]
  196 -> 15 [style=solid label="\"const\""]
  196 -> 16 [style=solid label="\"volatile\""]
  196 -> 17 [style=solid label="\"friend\""]
  196 -> 18 [style=solid label="\"typedef\""]
  196 -> 19 [style=solid label="\"consteval\""]
  196 -> 20 [style=solid label="\"constinit\""]
  196 -> 21 [style=solid label="\"decltype\""]
  196 -> 22 [style=solid label="\"enum\""]
  196 -> 23 [style=solid label="\"explicit\""]
  196 -> 25 [style=solid label="\"import\""]
  196 -> 26 [style=solid label="\"namespace\""]
  196 -> 27 [style=solid label="\"char\""]
  196 -> 28 [style=solid label="\"char8_t\""]
  196 -> 29 [style=solid label="\"char16_t\""]
  196 -> 30 [style=solid label="\"char32_t\""]
  196 -> 31 [style=solid label="\"wchar_t\""]
  196 -> 32 [style=solid label="\"bool\""]
  196 -> 33 [style=solid label="\"short\""]
  196 -> 34 [style=solid label="\"int\""]
  196 -> 35 [style=solid label="\"long\""]
  196 -> 36 [style=solid label="\"signed\""]
  196 -> 37 [style=solid label="\"unsigned\""]
  196 -> 38 [style=solid label="\"float\""]
  196 -> 39 [style=solid label="\"double\""]
  196 -> 40 [style=solid label="\"void\""]
  196 -> 41 [style=solid label="\"static_assert\""]
  196 -> 42 [style=solid label="\"static\""]
  196 -> 43 [style=solid label="\"thread_local\""]
  196 -> 44 [style=solid label="\"mutable\""]
  196 -> 45 [style=dashed label="EXTERN-opt"]
  196 -> 46 [style=dashed label="INLINE-opt"]
  196 -> 47 [style=dashed label="alias-declaration"]
  196 -> 48 [style=dashed label="asm-declaration"]
  196 -> 49 [style=dashed label="attribute-declaration"]
  196 -> 50 [style=dashed label="attribute-specifier-seq"]
  196 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  196 -> 52 [style=dashed label="block-declaration"]
  196 -> 53 [style=dashed label="class-head"]
  196 -> 54 [style=dashed label="class-key"]
  196 -> 55 [style=dashed label="class-name"]
  196 -> 56 [style=dashed label="class-specifier"]
  196 -> 57 [style=dashed label="cv-qualifier"]
  196 -> 58 [style=dashed label="decl-specifier"]
  196 -> 59 [style=dashed label="decl-specifier-seq"]
  196 -> 60 [style=dashed label="declaration"]
  196 -> 61 [style=dashed label="declaration-seq"]
  196 -> 417 [style=dashed label="declaration-seq-opt"]
  196 -> 63 [style=dashed label="decltype-specifier"]
  196 -> 64 [style=dashed label="deduction-guide"]
  196 -> 65 [style=dashed label="defining-type-specifier"]
  196 -> 66 [style=dashed label="elaborated-enum-specifier"]
  196 -> 67 [style=dashed label="elaborated-type-specifier"]
  196 -> 68 [style=dashed label="empty-declaration"]
  196 -> 69 [style=dashed label="enum-head"]
  196 -> 70 [style=dashed label="enum-key"]
  196 -> 71 [style=dashed label="enum-name"]
  196 -> 72 [style=dashed label="enum-specifier"]
  196 -> 73 [style=dashed label="explicit-instantiation"]
  196 -> 74 [style=dashed label="explicit-specialization"]
  196 -> 75 [style=dashed label="explicit-specifier"]
  196 -> 76 [style=dashed label="explicit-specifier-opt"]
  196 -> 77 [style=dashed label="export-declaration"]
  196 -> 78 [style=dashed label="function-definition"]
  196 -> 79 [style=dashed label="function-specifier"]
  196 -> 82 [style=dashed label="linkage-specification"]
  196 -> 83 [style=dashed label="module-import-declaration"]
  196 -> 84 [style=dashed label="named-namespace-definition"]
  196 -> 85 [style=dashed label="namespace-alias"]
  196 -> 86 [style=dashed label="namespace-alias-definition"]
  196 -> 87 [style=dashed label="namespace-definition"]
  196 -> 88 [style=dashed label="namespace-name"]
  196 -> 89 [style=dashed label="nested-name-specifier"]
  196 -> 90 [style=dashed label="nested-name-specifier-opt"]
  196 -> 91 [style=dashed label="nested-namespace-definition"]
  196 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  196 -> 93 [style=dashed label="opaque-enum-declaration"]
  196 -> 94 [style=dashed label="placeholder-type-specifier"]
  196 -> 95 [style=dashed label="simple-declaration"]
  196 -> 96 [style=dashed label="simple-template-id"]
  196 -> 97 [style=dashed label="simple-type-specifier"]
  196 -> 98 [style=dashed label="static_assert-declaration"]
  196 -> 99 [style=dashed label="storage-class-specifier"]
  196 -> 100 [style=dashed label="template-declaration"]
  196 -> 101 [style=dashed label="template-head"]
  196 -> 102 [style=dashed label="template-name"]
  196 -> 104 [style=dashed label="type-constraint"]
  196 -> 105 [style=dashed label="type-constraint-opt"]
  196 -> 106 [style=dashed label="type-name"]
  196 -> 107 [style=dashed label="type-specifier"]
  196 -> 108 [style=dashed label="typedef-name"]
  196 -> 109 [style=dashed label="typename-specifier"]
  196 -> 110 [style=dashed label="unnamed-namespace-definition"]
  196 -> 111 [style=dashed label="using-declaration"]
  196 -> 112 [style=dashed label="using-directive"]
  196 -> 113 [style=dashed label="using-enum-declaration"]
  196 -> "196R9d" [label="[\"template\"]", style=solid]
 "196R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  196 -> "196R13d" [label="[\"namespace\"]", style=solid]
 "196R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  196 -> "196R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "196R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  196 -> "196R83" [label="[]", style=solid]
 "196R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  196 -> "196R210" [label="[$end, \"module\"]", style=solid]
 "196R210" [label="R210", fillcolor=3, shape=diamond, style=filled]
  196 -> "196R270d" [label="[IDENTIFIER]", style=solid]
 "196R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  196 -> "196R469d" [label="[IDENTIFIER]", style=solid]
 "196R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  196 -> "196R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "196R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  197 [label="State 197\n\l465 nested-name-specifier: namespace-name \"::\" •\l"]
  197 -> "197R465" [style=solid]
 "197R465" [label="R465", fillcolor=3, shape=diamond, style=filled]
  198 [label="State 198\n\l467 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l"]
  198 -> 418 [style=solid label="\"::\""]
  199 [label="State 199\n\l 22 TEMPLATE-opt: \"template\" •\l658 simple-type-specifier: nested-name-specifier \"template\" • simple-template-id\l"]
  199 -> 192 [style=solid label="IDENTIFIER"]
  199 -> 419 [style=dashed label="simple-template-id"]
  199 -> 102 [style=dashed label="template-name"]
  199 -> "199R22d" [label="[IDENTIFIER]", style=solid]
 "199R22d" [label="R22", fillcolor=5, shape=diamond, style=filled]
  199 -> "199R22" [style=solid]
 "199R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  200 [label="State 200\n\l468 nested-name-specifier: nested-name-specifier TEMPLATE-opt • simple-template-id \"::\"\l"]
  200 -> 192 [style=solid label="IDENTIFIER"]
  200 -> 420 [style=dashed label="simple-template-id"]
  200 -> 102 [style=dashed label="template-name"]
  201 [label="State 201\n\l139 class-name: IDENTIFIER •\l153 concept-name: IDENTIFIER •\l248 enum-name: IDENTIFIER •\l708 template-name: IDENTIFIER •\l743 typedef-name: IDENTIFIER •\l"]
  201 -> "201R139" [style=solid]
 "201R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  201 -> "201R153d" [label="[\"decltype\", \"<\", \"auto\"]", style=solid]
 "201R153d" [label="R153", fillcolor=5, shape=diamond, style=filled]
  201 -> "201R248d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "201R248d" [label="R248", fillcolor=5, shape=diamond, style=filled]
  201 -> "201R708d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "201R708d" [label="R708", fillcolor=5, shape=diamond, style=filled]
  201 -> "201R743d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "201R743d" [label="R743", fillcolor=5, shape=diamond, style=filled]
  202 [label="State 202\n\l720 type-constraint: nested-name-specifier-opt concept-name •\l721                | nested-name-specifier-opt concept-name • \"<\" template-argument-list-opt \">\"\l"]
  202 -> 421 [style=solid label="\"<\""]
  202 -> "202R720" [style=solid]
 "202R720" [label="R720", fillcolor=3, shape=diamond, style=filled]
  203 [label="State 203\n\l656 simple-template-id: template-name • \"<\" template-argument-list-opt \">\"\l661 simple-type-specifier: nested-name-specifier-opt template-name •\l"]
  203 -> 208 [style=solid label="\"<\""]
  203 -> "203R661d" [label="[\"<\"]", style=solid]
 "203R661d" [label="R661", fillcolor=5, shape=diamond, style=filled]
  203 -> "203R661" [style=solid]
 "203R661" [label="R661", fillcolor=3, shape=diamond, style=filled]
  204 [label="State 204\n\l657 simple-type-specifier: nested-name-specifier-opt type-name •\l"]
  204 -> "204R657" [style=solid]
 "204R657" [label="R657", fillcolor=3, shape=diamond, style=filled]
  205 [label="State 205\n\l152 concept-definition: \"concept\" • concept-name \"=\" constraint-expression \";\"\l"]
  205 -> 422 [style=solid label="IDENTIFIER"]
  205 -> 423 [style=dashed label="concept-name"]
  206 [label="State 206\n\l703 template-declaration: template-head concept-definition •\l"]
  206 -> "206R703" [style=solid]
 "206R703" [label="R703", fillcolor=3, shape=diamond, style=filled]
  207 [label="State 207\n\l702 template-declaration: template-head declaration •\l"]
  207 -> "207R702" [style=solid]
 "207R702" [label="R702", fillcolor=3, shape=diamond, style=filled]
  208 [label="State 208\n\l656 simple-template-id: template-name \"<\" • template-argument-list-opt \">\"\l"]
  208 -> 238 [style=solid label="IDENTIFIER"]
  208 -> 239 [style=solid label="\"noexcept\""]
  208 -> 240 [style=solid label="\"!\""]
  208 -> 241 [style=solid label="\"::\""]
  208 -> 242 [style=solid label="\"this\""]
  208 -> 8 [style=solid label="\"typename\""]
  208 -> 243 [style=solid label="\"+\""]
  208 -> 244 [style=solid label="\"-\""]
  208 -> 245 [style=solid label="\"(\""]
  208 -> 246 [style=solid label="\"&\""]
  208 -> 247 [style=solid label="\"[\""]
  208 -> 248 [style=solid label="\"co_await\""]
  208 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  208 -> 250 [style=solid label="CHARACTER_LITERAL"]
  208 -> 12 [style=solid label="\"class\""]
  208 -> 13 [style=solid label="\"struct\""]
  208 -> 14 [style=solid label="\"union\""]
  208 -> 251 [style=solid label="\"operator\""]
  208 -> 15 [style=solid label="\"const\""]
  208 -> 16 [style=solid label="\"volatile\""]
  208 -> 21 [style=solid label="\"decltype\""]
  208 -> 125 [style=solid label="\"enum\""]
  208 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  208 -> 253 [style=solid label="\"*\""]
  208 -> 254 [style=solid label="INTEGER_LITERAL"]
  208 -> 255 [style=solid label="\"requires\""]
  208 -> 256 [style=solid label="\"~\""]
  208 -> 257 [style=solid label="\"++\""]
  208 -> 258 [style=solid label="\"--\""]
  208 -> 259 [style=solid label="POINTER_LITERAL"]
  208 -> 260 [style=solid label="\"dynamic_cast\""]
  208 -> 261 [style=solid label="\"static_cast\""]
  208 -> 262 [style=solid label="\"reinterpret_cast\""]
  208 -> 263 [style=solid label="\"const_cast\""]
  208 -> 264 [style=solid label="\"typeid\""]
  208 -> 27 [style=solid label="\"char\""]
  208 -> 28 [style=solid label="\"char8_t\""]
  208 -> 29 [style=solid label="\"char16_t\""]
  208 -> 30 [style=solid label="\"char32_t\""]
  208 -> 31 [style=solid label="\"wchar_t\""]
  208 -> 32 [style=solid label="\"bool\""]
  208 -> 33 [style=solid label="\"short\""]
  208 -> 34 [style=solid label="\"int\""]
  208 -> 35 [style=solid label="\"long\""]
  208 -> 36 [style=solid label="\"signed\""]
  208 -> 37 [style=solid label="\"unsigned\""]
  208 -> 38 [style=solid label="\"float\""]
  208 -> 39 [style=solid label="\"double\""]
  208 -> 40 [style=solid label="\"void\""]
  208 -> 118 [style=solid label="STRING_LITERAL"]
  208 -> 266 [style=solid label="\"sizeof\""]
  208 -> 267 [style=solid label="\"alignof\""]
  208 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  208 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  208 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  208 -> 272 [style=dashed label="SCOPE-opt"]
  208 -> 273 [style=dashed label="additive-expression"]
  208 -> 274 [style=dashed label="and-expression"]
  208 -> 276 [style=dashed label="await-expression"]
  208 -> 277 [style=dashed label="boolean-literal"]
  208 -> 278 [style=dashed label="cast-expression"]
  208 -> 279 [style=dashed label="character-literal"]
  208 -> 424 [style=dashed label="class-key"]
  208 -> 55 [style=dashed label="class-name"]
  208 -> 280 [style=dashed label="compare-expression"]
  208 -> 327 [style=dashed label="conditional-expression"]
  208 -> 425 [style=dashed label="constant-expression"]
  208 -> 282 [style=dashed label="conversion-function-id"]
  208 -> 57 [style=dashed label="cv-qualifier"]
  208 -> 63 [style=dashed label="decltype-specifier"]
  208 -> 283 [style=dashed label="delete-expression"]
  208 -> 66 [style=dashed label="elaborated-enum-specifier"]
  208 -> 67 [style=dashed label="elaborated-type-specifier"]
  208 -> 71 [style=dashed label="enum-name"]
  208 -> 284 [style=dashed label="equality-expression"]
  208 -> 285 [style=dashed label="exclusive-or-expression"]
  208 -> 287 [style=dashed label="floating-point-literal"]
  208 -> 288 [style=dashed label="fold-expression"]
  208 -> 426 [style=dashed label="id-expression"]
  208 -> 290 [style=dashed label="inclusive-or-expression"]
  208 -> 291 [style=dashed label="integer-literal"]
  208 -> 292 [style=dashed label="lambda-expression"]
  208 -> 293 [style=dashed label="lambda-introducer"]
  208 -> 294 [style=dashed label="literal"]
  208 -> 295 [style=dashed label="literal-operator-id"]
  208 -> 296 [style=dashed label="logical-and-expression"]
  208 -> 329 [style=dashed label="logical-or-expression"]
  208 -> 298 [style=dashed label="multiplicative-expression"]
  208 -> 85 [style=dashed label="namespace-alias"]
  208 -> 88 [style=dashed label="namespace-name"]
  208 -> 299 [style=dashed label="nested-name-specifier"]
  208 -> 90 [style=dashed label="nested-name-specifier-opt"]
  208 -> 300 [style=dashed label="new-expression"]
  208 -> 301 [style=dashed label="noexcept-expression"]
  208 -> 302 [style=dashed label="operator-function-id"]
  208 -> 94 [style=dashed label="placeholder-type-specifier"]
  208 -> 303 [style=dashed label="pm-expression"]
  208 -> 304 [style=dashed label="pointer-literal"]
  208 -> 305 [style=dashed label="postfix-expression"]
  208 -> 306 [style=dashed label="primary-expression"]
  208 -> 307 [style=dashed label="qualified-id"]
  208 -> 308 [style=dashed label="relational-expression"]
  208 -> 309 [style=dashed label="requires-expression"]
  208 -> 310 [style=dashed label="shift-expression"]
  208 -> 311 [style=dashed label="simple-template-id"]
  208 -> 427 [style=dashed label="simple-type-specifier"]
  208 -> 313 [style=dashed label="string-literal"]
  208 -> 428 [style=dashed label="template-argument"]
  208 -> 429 [style=dashed label="template-argument-list"]
  208 -> 430 [style=dashed label="template-argument-list-opt"]
  208 -> 314 [style=dashed label="template-id"]
  208 -> 102 [style=dashed label="template-name"]
  208 -> 104 [style=dashed label="type-constraint"]
  208 -> 105 [style=dashed label="type-constraint-opt"]
  208 -> 431 [style=dashed label="type-id"]
  208 -> 106 [style=dashed label="type-name"]
  208 -> 432 [style=dashed label="type-specifier"]
  208 -> 433 [style=dashed label="type-specifier-seq"]
  208 -> 108 [style=dashed label="typedef-name"]
  208 -> 434 [style=dashed label="typename-specifier"]
  208 -> 317 [style=dashed label="unary-expression"]
  208 -> 318 [style=dashed label="unary-operator"]
  208 -> 319 [style=dashed label="unqualified-id"]
  208 -> 320 [style=dashed label="user-defined-character-literal"]
  208 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  208 -> 322 [style=dashed label="user-defined-integer-literal"]
  208 -> 323 [style=dashed label="user-defined-literal"]
  208 -> 324 [style=dashed label="user-defined-string-literal"]
  208 -> "208R19" [style=solid]
 "208R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  208 -> "208R469d" [label="[IDENTIFIER]", style=solid]
 "208R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  208 -> "208R700" [label="[\">\"]", style=solid]
 "208R700" [label="R700", fillcolor=3, shape=diamond, style=filled]
  208 -> "208R722d" [label="[\"decltype\"]", style=solid]
 "208R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  208 -> "208R722" [label="[\"auto\"]", style=solid]
 "208R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  209 [label="State 209\n\l566 placeholder-type-specifier: type-constraint-opt \"decltype\" • \"(\" \"auto\" \")\"\l"]
  209 -> 435 [style=solid label="\"(\""]
  210 [label="State 210\n\l565 placeholder-type-specifier: type-constraint-opt \"auto\" •\l"]
  210 -> "210R565" [style=solid]
 "210R565" [label="R565", fillcolor=3, shape=diamond, style=filled]
  211 [label="State 211\n\l464 nested-name-specifier: type-name \"::\" •\l"]
  211 -> "211R464" [style=solid]
 "211R464" [label="R464", fillcolor=3, shape=diamond, style=filled]
  212 [label="State 212\n\l  0 $accept: result $end •\l"]
  212 -> "212R0" [style=solid]
 "212R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  213 [label="State 213\n\l273 export-declaration: \"export\" \"{\" declaration-seq-opt • \"}\"\l"]
  213 -> 436 [style=solid label="\"}\""]
  214 [label="State 214\n\l394 linkage-specification: \"extern\" string-literal \"{\" • declaration-seq-opt \"}\"\l"]
  214 -> 1 [style=solid label="\"constexpr\""]
  214 -> 2 [style=solid label="\"export\""]
  214 -> 3 [style=solid label="\"extern\""]
  214 -> 4 [style=solid label="IDENTIFIER"]
  214 -> 5 [style=solid label="\"inline\""]
  214 -> 6 [style=solid label="\"::\""]
  214 -> 7 [style=solid label="\"template\""]
  214 -> 8 [style=solid label="\"typename\""]
  214 -> 9 [style=solid label="\"virtual\""]
  214 -> 10 [style=solid label="\"using\""]
  214 -> 11 [style=solid label="\";\""]
  214 -> 12 [style=solid label="\"class\""]
  214 -> 13 [style=solid label="\"struct\""]
  214 -> 14 [style=solid label="\"union\""]
  214 -> 15 [style=solid label="\"const\""]
  214 -> 16 [style=solid label="\"volatile\""]
  214 -> 17 [style=solid label="\"friend\""]
  214 -> 18 [style=solid label="\"typedef\""]
  214 -> 19 [style=solid label="\"consteval\""]
  214 -> 20 [style=solid label="\"constinit\""]
  214 -> 21 [style=solid label="\"decltype\""]
  214 -> 22 [style=solid label="\"enum\""]
  214 -> 23 [style=solid label="\"explicit\""]
  214 -> 25 [style=solid label="\"import\""]
  214 -> 26 [style=solid label="\"namespace\""]
  214 -> 27 [style=solid label="\"char\""]
  214 -> 28 [style=solid label="\"char8_t\""]
  214 -> 29 [style=solid label="\"char16_t\""]
  214 -> 30 [style=solid label="\"char32_t\""]
  214 -> 31 [style=solid label="\"wchar_t\""]
  214 -> 32 [style=solid label="\"bool\""]
  214 -> 33 [style=solid label="\"short\""]
  214 -> 34 [style=solid label="\"int\""]
  214 -> 35 [style=solid label="\"long\""]
  214 -> 36 [style=solid label="\"signed\""]
  214 -> 37 [style=solid label="\"unsigned\""]
  214 -> 38 [style=solid label="\"float\""]
  214 -> 39 [style=solid label="\"double\""]
  214 -> 40 [style=solid label="\"void\""]
  214 -> 41 [style=solid label="\"static_assert\""]
  214 -> 42 [style=solid label="\"static\""]
  214 -> 43 [style=solid label="\"thread_local\""]
  214 -> 44 [style=solid label="\"mutable\""]
  214 -> 45 [style=dashed label="EXTERN-opt"]
  214 -> 46 [style=dashed label="INLINE-opt"]
  214 -> 47 [style=dashed label="alias-declaration"]
  214 -> 48 [style=dashed label="asm-declaration"]
  214 -> 49 [style=dashed label="attribute-declaration"]
  214 -> 50 [style=dashed label="attribute-specifier-seq"]
  214 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  214 -> 52 [style=dashed label="block-declaration"]
  214 -> 53 [style=dashed label="class-head"]
  214 -> 54 [style=dashed label="class-key"]
  214 -> 55 [style=dashed label="class-name"]
  214 -> 56 [style=dashed label="class-specifier"]
  214 -> 57 [style=dashed label="cv-qualifier"]
  214 -> 58 [style=dashed label="decl-specifier"]
  214 -> 59 [style=dashed label="decl-specifier-seq"]
  214 -> 60 [style=dashed label="declaration"]
  214 -> 61 [style=dashed label="declaration-seq"]
  214 -> 437 [style=dashed label="declaration-seq-opt"]
  214 -> 63 [style=dashed label="decltype-specifier"]
  214 -> 64 [style=dashed label="deduction-guide"]
  214 -> 65 [style=dashed label="defining-type-specifier"]
  214 -> 66 [style=dashed label="elaborated-enum-specifier"]
  214 -> 67 [style=dashed label="elaborated-type-specifier"]
  214 -> 68 [style=dashed label="empty-declaration"]
  214 -> 69 [style=dashed label="enum-head"]
  214 -> 70 [style=dashed label="enum-key"]
  214 -> 71 [style=dashed label="enum-name"]
  214 -> 72 [style=dashed label="enum-specifier"]
  214 -> 73 [style=dashed label="explicit-instantiation"]
  214 -> 74 [style=dashed label="explicit-specialization"]
  214 -> 75 [style=dashed label="explicit-specifier"]
  214 -> 76 [style=dashed label="explicit-specifier-opt"]
  214 -> 77 [style=dashed label="export-declaration"]
  214 -> 78 [style=dashed label="function-definition"]
  214 -> 79 [style=dashed label="function-specifier"]
  214 -> 82 [style=dashed label="linkage-specification"]
  214 -> 83 [style=dashed label="module-import-declaration"]
  214 -> 84 [style=dashed label="named-namespace-definition"]
  214 -> 85 [style=dashed label="namespace-alias"]
  214 -> 86 [style=dashed label="namespace-alias-definition"]
  214 -> 87 [style=dashed label="namespace-definition"]
  214 -> 88 [style=dashed label="namespace-name"]
  214 -> 89 [style=dashed label="nested-name-specifier"]
  214 -> 90 [style=dashed label="nested-name-specifier-opt"]
  214 -> 91 [style=dashed label="nested-namespace-definition"]
  214 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  214 -> 93 [style=dashed label="opaque-enum-declaration"]
  214 -> 94 [style=dashed label="placeholder-type-specifier"]
  214 -> 95 [style=dashed label="simple-declaration"]
  214 -> 96 [style=dashed label="simple-template-id"]
  214 -> 97 [style=dashed label="simple-type-specifier"]
  214 -> 98 [style=dashed label="static_assert-declaration"]
  214 -> 99 [style=dashed label="storage-class-specifier"]
  214 -> 100 [style=dashed label="template-declaration"]
  214 -> 101 [style=dashed label="template-head"]
  214 -> 102 [style=dashed label="template-name"]
  214 -> 104 [style=dashed label="type-constraint"]
  214 -> 105 [style=dashed label="type-constraint-opt"]
  214 -> 106 [style=dashed label="type-name"]
  214 -> 107 [style=dashed label="type-specifier"]
  214 -> 108 [style=dashed label="typedef-name"]
  214 -> 109 [style=dashed label="typename-specifier"]
  214 -> 110 [style=dashed label="unnamed-namespace-definition"]
  214 -> 111 [style=dashed label="using-declaration"]
  214 -> 112 [style=dashed label="using-directive"]
  214 -> 113 [style=dashed label="using-enum-declaration"]
  214 -> "214R9d" [label="[\"template\"]", style=solid]
 "214R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  214 -> "214R13d" [label="[\"namespace\"]", style=solid]
 "214R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  214 -> "214R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "214R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  214 -> "214R83" [label="[]", style=solid]
 "214R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  214 -> "214R210" [label="[\"}\"]", style=solid]
 "214R210" [label="R210", fillcolor=3, shape=diamond, style=filled]
  214 -> "214R270d" [label="[IDENTIFIER]", style=solid]
 "214R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  214 -> "214R469d" [label="[IDENTIFIER]", style=solid]
 "214R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  214 -> "214R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "214R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  215 [label="State 215\n\l395 linkage-specification: \"extern\" string-literal declaration •\l"]
  215 -> "215R395" [style=solid]
 "215R395" [label="R395", fillcolor=3, shape=diamond, style=filled]
  216 [label="State 216\n\l704 template-head: \"template\" • \"<\" template-parameter-list \">\" requires-clause-opt\l"]
  216 -> 438 [style=solid label="\"<\""]
  217 [label="State 217\n\l735 type-parameter-key: \"typename\" •\l"]
  217 -> "217R735" [style=solid]
 "217R735" [label="R735", fillcolor=3, shape=diamond, style=filled]
  218 [label="State 218\n\l734 type-parameter-key: \"class\" •\l"]
  218 -> "218R734" [style=solid]
 "218R734" [label="R734", fillcolor=3, shape=diamond, style=filled]
  219 [label="State 219\n\l267 explicit-specialization: \"template\" \"<\" \">\" • declaration\l"]
  219 -> 1 [style=solid label="\"constexpr\""]
  219 -> 2 [style=solid label="\"export\""]
  219 -> 3 [style=solid label="\"extern\""]
  219 -> 4 [style=solid label="IDENTIFIER"]
  219 -> 5 [style=solid label="\"inline\""]
  219 -> 6 [style=solid label="\"::\""]
  219 -> 7 [style=solid label="\"template\""]
  219 -> 8 [style=solid label="\"typename\""]
  219 -> 9 [style=solid label="\"virtual\""]
  219 -> 10 [style=solid label="\"using\""]
  219 -> 11 [style=solid label="\";\""]
  219 -> 12 [style=solid label="\"class\""]
  219 -> 13 [style=solid label="\"struct\""]
  219 -> 14 [style=solid label="\"union\""]
  219 -> 15 [style=solid label="\"const\""]
  219 -> 16 [style=solid label="\"volatile\""]
  219 -> 17 [style=solid label="\"friend\""]
  219 -> 18 [style=solid label="\"typedef\""]
  219 -> 19 [style=solid label="\"consteval\""]
  219 -> 20 [style=solid label="\"constinit\""]
  219 -> 21 [style=solid label="\"decltype\""]
  219 -> 22 [style=solid label="\"enum\""]
  219 -> 23 [style=solid label="\"explicit\""]
  219 -> 25 [style=solid label="\"import\""]
  219 -> 26 [style=solid label="\"namespace\""]
  219 -> 27 [style=solid label="\"char\""]
  219 -> 28 [style=solid label="\"char8_t\""]
  219 -> 29 [style=solid label="\"char16_t\""]
  219 -> 30 [style=solid label="\"char32_t\""]
  219 -> 31 [style=solid label="\"wchar_t\""]
  219 -> 32 [style=solid label="\"bool\""]
  219 -> 33 [style=solid label="\"short\""]
  219 -> 34 [style=solid label="\"int\""]
  219 -> 35 [style=solid label="\"long\""]
  219 -> 36 [style=solid label="\"signed\""]
  219 -> 37 [style=solid label="\"unsigned\""]
  219 -> 38 [style=solid label="\"float\""]
  219 -> 39 [style=solid label="\"double\""]
  219 -> 40 [style=solid label="\"void\""]
  219 -> 41 [style=solid label="\"static_assert\""]
  219 -> 42 [style=solid label="\"static\""]
  219 -> 43 [style=solid label="\"thread_local\""]
  219 -> 44 [style=solid label="\"mutable\""]
  219 -> 45 [style=dashed label="EXTERN-opt"]
  219 -> 46 [style=dashed label="INLINE-opt"]
  219 -> 47 [style=dashed label="alias-declaration"]
  219 -> 48 [style=dashed label="asm-declaration"]
  219 -> 49 [style=dashed label="attribute-declaration"]
  219 -> 50 [style=dashed label="attribute-specifier-seq"]
  219 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  219 -> 52 [style=dashed label="block-declaration"]
  219 -> 53 [style=dashed label="class-head"]
  219 -> 54 [style=dashed label="class-key"]
  219 -> 55 [style=dashed label="class-name"]
  219 -> 56 [style=dashed label="class-specifier"]
  219 -> 57 [style=dashed label="cv-qualifier"]
  219 -> 58 [style=dashed label="decl-specifier"]
  219 -> 59 [style=dashed label="decl-specifier-seq"]
  219 -> 439 [style=dashed label="declaration"]
  219 -> 63 [style=dashed label="decltype-specifier"]
  219 -> 64 [style=dashed label="deduction-guide"]
  219 -> 65 [style=dashed label="defining-type-specifier"]
  219 -> 66 [style=dashed label="elaborated-enum-specifier"]
  219 -> 67 [style=dashed label="elaborated-type-specifier"]
  219 -> 68 [style=dashed label="empty-declaration"]
  219 -> 69 [style=dashed label="enum-head"]
  219 -> 70 [style=dashed label="enum-key"]
  219 -> 71 [style=dashed label="enum-name"]
  219 -> 72 [style=dashed label="enum-specifier"]
  219 -> 73 [style=dashed label="explicit-instantiation"]
  219 -> 74 [style=dashed label="explicit-specialization"]
  219 -> 75 [style=dashed label="explicit-specifier"]
  219 -> 76 [style=dashed label="explicit-specifier-opt"]
  219 -> 77 [style=dashed label="export-declaration"]
  219 -> 78 [style=dashed label="function-definition"]
  219 -> 79 [style=dashed label="function-specifier"]
  219 -> 82 [style=dashed label="linkage-specification"]
  219 -> 83 [style=dashed label="module-import-declaration"]
  219 -> 84 [style=dashed label="named-namespace-definition"]
  219 -> 85 [style=dashed label="namespace-alias"]
  219 -> 86 [style=dashed label="namespace-alias-definition"]
  219 -> 87 [style=dashed label="namespace-definition"]
  219 -> 88 [style=dashed label="namespace-name"]
  219 -> 89 [style=dashed label="nested-name-specifier"]
  219 -> 90 [style=dashed label="nested-name-specifier-opt"]
  219 -> 91 [style=dashed label="nested-namespace-definition"]
  219 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  219 -> 93 [style=dashed label="opaque-enum-declaration"]
  219 -> 94 [style=dashed label="placeholder-type-specifier"]
  219 -> 95 [style=dashed label="simple-declaration"]
  219 -> 96 [style=dashed label="simple-template-id"]
  219 -> 97 [style=dashed label="simple-type-specifier"]
  219 -> 98 [style=dashed label="static_assert-declaration"]
  219 -> 99 [style=dashed label="storage-class-specifier"]
  219 -> 100 [style=dashed label="template-declaration"]
  219 -> 101 [style=dashed label="template-head"]
  219 -> 102 [style=dashed label="template-name"]
  219 -> 104 [style=dashed label="type-constraint"]
  219 -> 105 [style=dashed label="type-constraint-opt"]
  219 -> 106 [style=dashed label="type-name"]
  219 -> 107 [style=dashed label="type-specifier"]
  219 -> 108 [style=dashed label="typedef-name"]
  219 -> 109 [style=dashed label="typename-specifier"]
  219 -> 110 [style=dashed label="unnamed-namespace-definition"]
  219 -> 111 [style=dashed label="using-declaration"]
  219 -> 112 [style=dashed label="using-directive"]
  219 -> 113 [style=dashed label="using-enum-declaration"]
  219 -> "219R9d" [label="[\"template\"]", style=solid]
 "219R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  219 -> "219R13d" [label="[\"namespace\"]", style=solid]
 "219R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  219 -> "219R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "219R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  219 -> "219R83" [label="[]", style=solid]
 "219R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  219 -> "219R270d" [label="[IDENTIFIER]", style=solid]
 "219R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  219 -> "219R469d" [label="[IDENTIFIER]", style=solid]
 "219R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  219 -> "219R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "219R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  220 [label="State 220\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l554 parameter-declaration: attribute-specifier-seq-opt • THIS-opt decl-specifier-seq declarator\l555                      | attribute-specifier-seq-opt • THIS-opt decl-specifier-seq declarator \"=\" initializer-clause\l556                      | attribute-specifier-seq-opt • THIS-opt decl-specifier-seq abstract-declarator-opt\l557                      | attribute-specifier-seq-opt • THIS-opt decl-specifier-seq abstract-declarator-opt \"=\" initializer-clause\l"]
  220 -> 440 [style=solid label="\"this\""]
  220 -> 158 [style=solid label="\"alignas\""]
  220 -> 162 [style=solid label="\"[\""]
  220 -> 441 [style=dashed label="THIS-opt"]
  220 -> 166 [style=dashed label="alignment-specifier"]
  220 -> 167 [style=dashed label="attribute-specifier"]
  220 -> "220R23" [style=solid]
 "220R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  221 [label="State 221\n\l720 type-constraint: nested-name-specifier-opt • concept-name\l721                | nested-name-specifier-opt • concept-name \"<\" template-argument-list-opt \">\"\l"]
  221 -> 422 [style=solid label="IDENTIFIER"]
  221 -> 202 [style=dashed label="concept-name"]
  222 [label="State 222\n\l710 template-parameter: parameter-declaration •\l"]
  222 -> "222R710" [style=solid]
 "222R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  223 [label="State 223\n\l732 type-parameter: template-head • type-parameter-key ELLIPSIS-opt IDENTIFIER-opt\l733               | template-head • type-parameter-key IDENTIFIER-opt \"=\" id-expression\l"]
  223 -> 217 [style=solid label="\"typename\""]
  223 -> 218 [style=solid label="\"class\""]
  223 -> 442 [style=dashed label="type-parameter-key"]
  224 [label="State 224\n\l711 template-parameter-list: template-parameter •\l"]
  224 -> "224R711" [style=solid]
 "224R711" [label="R711", fillcolor=3, shape=diamond, style=filled]
  225 [label="State 225\n\l704 template-head: \"template\" \"<\" template-parameter-list • \">\" requires-clause-opt\l712 template-parameter-list: template-parameter-list • \",\" template-parameter\l"]
  225 -> 443 [style=solid label="\",\""]
  225 -> 444 [style=solid label="\">\""]
  226 [label="State 226\n\l730 type-parameter: type-constraint • ELLIPSIS-opt IDENTIFIER-opt\l731               | type-constraint • IDENTIFIER-opt \"=\" type-id\l"]
  226 -> 156 [style=solid label="\"...\""]
  226 -> 445 [style=solid label="IDENTIFIER"]
  226 -> 446 [style=dashed label="ELLIPSIS-opt"]
  226 -> 447 [style=dashed label="IDENTIFIER-opt"]
  226 -> "226R5d" [label="[IDENTIFIER]", style=solid]
 "226R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  226 -> "226R5" [style=solid]
 "226R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  226 -> "226R11" [label="[\"=\"]", style=solid]
 "226R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  227 [label="State 227\n\l709 template-parameter: type-parameter •\l"]
  227 -> "227R709" [style=solid]
 "227R709" [label="R709", fillcolor=3, shape=diamond, style=filled]
  228 [label="State 228\n\l728 type-parameter: type-parameter-key • ELLIPSIS-opt IDENTIFIER-opt\l729               | type-parameter-key • IDENTIFIER-opt \"=\" type-id\l"]
  228 -> 156 [style=solid label="\"...\""]
  228 -> 445 [style=solid label="IDENTIFIER"]
  228 -> 448 [style=dashed label="ELLIPSIS-opt"]
  228 -> 449 [style=dashed label="IDENTIFIER-opt"]
  228 -> "228R5d" [label="[IDENTIFIER]", style=solid]
 "228R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  228 -> "228R5" [style=solid]
 "228R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  228 -> "228R11" [label="[\"=\"]", style=solid]
 "228R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  229 [label="State 229\n\l467 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l745 typename-specifier: \"typename\" nested-name-specifier IDENTIFIER •\l"]
  229 -> 418 [style=solid label="\"::\""]
  229 -> "229R745d" [label="[\"::\"]", style=solid]
 "229R745d" [label="R745", fillcolor=5, shape=diamond, style=filled]
  229 -> "229R745" [style=solid]
 "229R745" [label="R745", fillcolor=3, shape=diamond, style=filled]
  230 [label="State 230\n\l 22 TEMPLATE-opt: \"template\" •\l"]
  230 -> "230R22" [style=solid]
 "230R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  231 [label="State 231\n\l468 nested-name-specifier: nested-name-specifier TEMPLATE-opt • simple-template-id \"::\"\l746 typename-specifier: \"typename\" nested-name-specifier TEMPLATE-opt • simple-template-id\l"]
  231 -> 192 [style=solid label="IDENTIFIER"]
  231 -> 450 [style=dashed label="simple-template-id"]
  231 -> 102 [style=dashed label="template-name"]
  232 [label="State 232\n\l 44 alias-declaration: \"using\" IDENTIFIER attribute-specifier-seq-opt • \"=\" defining-type-id \";\"\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l"]
  232 -> 451 [style=solid label="\"=\""]
  232 -> 158 [style=solid label="\"alignas\""]
  232 -> 162 [style=solid label="\"[\""]
  232 -> 166 [style=dashed label="alignment-specifier"]
  232 -> 167 [style=dashed label="attribute-specifier"]
  233 [label="State 233\n\l467 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l468                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l783 using-declarator: TYPENAME-opt nested-name-specifier • unqualified-id\l"]
  233 -> 452 [style=solid label="IDENTIFIER"]
  233 -> 230 [style=solid label="\"template\""]
  233 -> 251 [style=solid label="\"operator\""]
  233 -> 354 [style=solid label="\"~\""]
  233 -> 200 [style=dashed label="TEMPLATE-opt"]
  233 -> 282 [style=dashed label="conversion-function-id"]
  233 -> 295 [style=dashed label="literal-operator-id"]
  233 -> 302 [style=dashed label="operator-function-id"]
  233 -> 453 [style=dashed label="simple-template-id"]
  233 -> 314 [style=dashed label="template-id"]
  233 -> 102 [style=dashed label="template-name"]
  233 -> 454 [style=dashed label="unqualified-id"]
  233 -> "233R21d" [label="[IDENTIFIER]", style=solid]
 "233R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  234 [label="State 234\n\l787 using-enum-declaration: \"using\" elaborated-enum-specifier \";\" •\l"]
  234 -> "234R787" [style=solid]
 "234R787" [label="R787", fillcolor=3, shape=diamond, style=filled]
  235 [label="State 235\n\l784 using-declarator-list: using-declarator ELLIPSIS-opt •\l"]
  235 -> "235R784" [style=solid]
 "235R784" [label="R784", fillcolor=3, shape=diamond, style=filled]
  236 [label="State 236\n\l785 using-declarator-list: using-declarator-list \",\" • using-declarator ELLIPSIS-opt\l"]
  236 -> 124 [style=solid label="\"typename\""]
  236 -> 126 [style=dashed label="TYPENAME-opt"]
  236 -> 455 [style=dashed label="using-declarator"]
  236 -> "236R25" [style=solid]
 "236R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  237 [label="State 237\n\l782 using-declaration: \"using\" using-declarator-list \";\" •\l"]
  237 -> "237R782" [style=solid]
 "237R782" [label="R782", fillcolor=3, shape=diamond, style=filled]
  238 [label="State 238\n\l139 class-name: IDENTIFIER •\l248 enum-name: IDENTIFIER •\l455 namespace-alias: IDENTIFIER •\l461 namespace-name: IDENTIFIER •\l708 template-name: IDENTIFIER •\l743 typedef-name: IDENTIFIER •\l767 unqualified-id: IDENTIFIER •\l"]
  238 -> "238R139" [label="[\"::\"]", style=solid]
 "238R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  238 -> "238R248d" [label="[\"::\"]", style=solid]
 "238R248d" [label="R248", fillcolor=5, shape=diamond, style=filled]
  238 -> "238R455d" [label="[\"::\"]", style=solid]
 "238R455d" [label="R455", fillcolor=5, shape=diamond, style=filled]
  238 -> "238R461d" [label="[\"::\"]", style=solid]
 "238R461d" [label="R461", fillcolor=5, shape=diamond, style=filled]
  238 -> "238R708" [label="[\"<\"]", style=solid]
 "238R708" [label="R708", fillcolor=3, shape=diamond, style=filled]
  238 -> "238R743d" [label="[\"::\"]", style=solid]
 "238R743d" [label="R743", fillcolor=5, shape=diamond, style=filled]
  238 -> "238R767d" [label="[\"::\", \"<\"]", style=solid]
 "238R767d" [label="R767", fillcolor=5, shape=diamond, style=filled]
  238 -> "238R767" [label="[]", style=solid]
 "238R767" [label="R767", fillcolor=3, shape=diamond, style=filled]
  239 [label="State 239\n\l488 noexcept-expression: \"noexcept\" • \"(\" expression \")\"\l"]
  239 -> 456 [style=solid label="\"(\""]
  240 [label="State 240\n\l764 unary-operator: \"!\" •\l"]
  240 -> "240R764" [style=solid]
 "240R764" [label="R764", fillcolor=3, shape=diamond, style=filled]
  241 [label="State 241\n\l 20 SCOPE-opt: \"::\" •\l463 nested-name-specifier: \"::\" •\l"]
  241 -> "241R20" [label="[\"delete\", \"new\"]", style=solid]
 "241R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  241 -> "241R463" [style=solid]
 "241R463" [label="R463", fillcolor=3, shape=diamond, style=filled]
  242 [label="State 242\n\l590 primary-expression: \"this\" •\l"]
  242 -> "242R590" [style=solid]
 "242R590" [label="R590", fillcolor=3, shape=diamond, style=filled]
  243 [label="State 243\n\l762 unary-operator: \"+\" •\l"]
  243 -> "243R762" [style=solid]
 "243R762" [label="R762", fillcolor=3, shape=diamond, style=filled]
  244 [label="State 244\n\l763 unary-operator: \"-\" •\l"]
  244 -> "244R763" [style=solid]
 "244R763" [label="R763", fillcolor=3, shape=diamond, style=filled]
  245 [label="State 245\n\l131 cast-expression: \"(\" • type-id \")\" cast-expression\l288 fold-expression: \"(\" • cast-expression fold-operator \"...\" \")\"\l289                | \"(\" • \"...\" fold-operator cast-expression \")\"\l290                | \"(\" • cast-expression fold-operator \"...\" fold-operator cast-expression \")\"\l591 primary-expression: \"(\" • expression \")\"\l"]
  245 -> 457 [style=solid label="\"...\""]
  245 -> 238 [style=solid label="IDENTIFIER"]
  245 -> 239 [style=solid label="\"noexcept\""]
  245 -> 240 [style=solid label="\"!\""]
  245 -> 241 [style=solid label="\"::\""]
  245 -> 242 [style=solid label="\"this\""]
  245 -> 8 [style=solid label="\"typename\""]
  245 -> 243 [style=solid label="\"+\""]
  245 -> 244 [style=solid label="\"-\""]
  245 -> 245 [style=solid label="\"(\""]
  245 -> 246 [style=solid label="\"&\""]
  245 -> 247 [style=solid label="\"[\""]
  245 -> 248 [style=solid label="\"co_await\""]
  245 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  245 -> 250 [style=solid label="CHARACTER_LITERAL"]
  245 -> 12 [style=solid label="\"class\""]
  245 -> 13 [style=solid label="\"struct\""]
  245 -> 14 [style=solid label="\"union\""]
  245 -> 251 [style=solid label="\"operator\""]
  245 -> 15 [style=solid label="\"const\""]
  245 -> 16 [style=solid label="\"volatile\""]
  245 -> 21 [style=solid label="\"decltype\""]
  245 -> 125 [style=solid label="\"enum\""]
  245 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  245 -> 253 [style=solid label="\"*\""]
  245 -> 254 [style=solid label="INTEGER_LITERAL"]
  245 -> 255 [style=solid label="\"requires\""]
  245 -> 256 [style=solid label="\"~\""]
  245 -> 257 [style=solid label="\"++\""]
  245 -> 258 [style=solid label="\"--\""]
  245 -> 259 [style=solid label="POINTER_LITERAL"]
  245 -> 260 [style=solid label="\"dynamic_cast\""]
  245 -> 261 [style=solid label="\"static_cast\""]
  245 -> 262 [style=solid label="\"reinterpret_cast\""]
  245 -> 263 [style=solid label="\"const_cast\""]
  245 -> 264 [style=solid label="\"typeid\""]
  245 -> 27 [style=solid label="\"char\""]
  245 -> 28 [style=solid label="\"char8_t\""]
  245 -> 29 [style=solid label="\"char16_t\""]
  245 -> 30 [style=solid label="\"char32_t\""]
  245 -> 31 [style=solid label="\"wchar_t\""]
  245 -> 32 [style=solid label="\"bool\""]
  245 -> 33 [style=solid label="\"short\""]
  245 -> 34 [style=solid label="\"int\""]
  245 -> 35 [style=solid label="\"long\""]
  245 -> 36 [style=solid label="\"signed\""]
  245 -> 37 [style=solid label="\"unsigned\""]
  245 -> 38 [style=solid label="\"float\""]
  245 -> 39 [style=solid label="\"double\""]
  245 -> 40 [style=solid label="\"void\""]
  245 -> 118 [style=solid label="STRING_LITERAL"]
  245 -> 265 [style=solid label="\"throw\""]
  245 -> 266 [style=solid label="\"sizeof\""]
  245 -> 267 [style=solid label="\"alignof\""]
  245 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  245 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  245 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  245 -> 271 [style=solid label="\"co_yield\""]
  245 -> 272 [style=dashed label="SCOPE-opt"]
  245 -> 273 [style=dashed label="additive-expression"]
  245 -> 274 [style=dashed label="and-expression"]
  245 -> 275 [style=dashed label="assignment-expression"]
  245 -> 276 [style=dashed label="await-expression"]
  245 -> 277 [style=dashed label="boolean-literal"]
  245 -> 458 [style=dashed label="cast-expression"]
  245 -> 279 [style=dashed label="character-literal"]
  245 -> 424 [style=dashed label="class-key"]
  245 -> 55 [style=dashed label="class-name"]
  245 -> 280 [style=dashed label="compare-expression"]
  245 -> 281 [style=dashed label="conditional-expression"]
  245 -> 282 [style=dashed label="conversion-function-id"]
  245 -> 57 [style=dashed label="cv-qualifier"]
  245 -> 63 [style=dashed label="decltype-specifier"]
  245 -> 283 [style=dashed label="delete-expression"]
  245 -> 66 [style=dashed label="elaborated-enum-specifier"]
  245 -> 67 [style=dashed label="elaborated-type-specifier"]
  245 -> 71 [style=dashed label="enum-name"]
  245 -> 284 [style=dashed label="equality-expression"]
  245 -> 285 [style=dashed label="exclusive-or-expression"]
  245 -> 459 [style=dashed label="expression"]
  245 -> 287 [style=dashed label="floating-point-literal"]
  245 -> 288 [style=dashed label="fold-expression"]
  245 -> 289 [style=dashed label="id-expression"]
  245 -> 290 [style=dashed label="inclusive-or-expression"]
  245 -> 291 [style=dashed label="integer-literal"]
  245 -> 292 [style=dashed label="lambda-expression"]
  245 -> 293 [style=dashed label="lambda-introducer"]
  245 -> 294 [style=dashed label="literal"]
  245 -> 295 [style=dashed label="literal-operator-id"]
  245 -> 296 [style=dashed label="logical-and-expression"]
  245 -> 297 [style=dashed label="logical-or-expression"]
  245 -> 298 [style=dashed label="multiplicative-expression"]
  245 -> 85 [style=dashed label="namespace-alias"]
  245 -> 88 [style=dashed label="namespace-name"]
  245 -> 299 [style=dashed label="nested-name-specifier"]
  245 -> 90 [style=dashed label="nested-name-specifier-opt"]
  245 -> 300 [style=dashed label="new-expression"]
  245 -> 301 [style=dashed label="noexcept-expression"]
  245 -> 302 [style=dashed label="operator-function-id"]
  245 -> 94 [style=dashed label="placeholder-type-specifier"]
  245 -> 303 [style=dashed label="pm-expression"]
  245 -> 304 [style=dashed label="pointer-literal"]
  245 -> 305 [style=dashed label="postfix-expression"]
  245 -> 306 [style=dashed label="primary-expression"]
  245 -> 307 [style=dashed label="qualified-id"]
  245 -> 308 [style=dashed label="relational-expression"]
  245 -> 309 [style=dashed label="requires-expression"]
  245 -> 310 [style=dashed label="shift-expression"]
  245 -> 311 [style=dashed label="simple-template-id"]
  245 -> 427 [style=dashed label="simple-type-specifier"]
  245 -> 313 [style=dashed label="string-literal"]
  245 -> 314 [style=dashed label="template-id"]
  245 -> 102 [style=dashed label="template-name"]
  245 -> 315 [style=dashed label="throw-expression"]
  245 -> 104 [style=dashed label="type-constraint"]
  245 -> 105 [style=dashed label="type-constraint-opt"]
  245 -> 460 [style=dashed label="type-id"]
  245 -> 106 [style=dashed label="type-name"]
  245 -> 432 [style=dashed label="type-specifier"]
  245 -> 433 [style=dashed label="type-specifier-seq"]
  245 -> 108 [style=dashed label="typedef-name"]
  245 -> 434 [style=dashed label="typename-specifier"]
  245 -> 317 [style=dashed label="unary-expression"]
  245 -> 318 [style=dashed label="unary-operator"]
  245 -> 319 [style=dashed label="unqualified-id"]
  245 -> 320 [style=dashed label="user-defined-character-literal"]
  245 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  245 -> 322 [style=dashed label="user-defined-integer-literal"]
  245 -> 323 [style=dashed label="user-defined-literal"]
  245 -> 324 [style=dashed label="user-defined-string-literal"]
  245 -> 325 [style=dashed label="yield-expression"]
  245 -> "245R19" [style=solid]
 "245R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  245 -> "245R469d" [label="[IDENTIFIER]", style=solid]
 "245R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  245 -> "245R722d" [label="[\"decltype\"]", style=solid]
 "245R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  245 -> "245R722" [label="[\"auto\"]", style=solid]
 "245R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  246 [label="State 246\n\l761 unary-operator: \"&\" •\l"]
  246 -> "246R761" [style=solid]
 "246R761" [label="R761", fillcolor=3, shape=diamond, style=filled]
  247 [label="State 247\n\l392 lambda-introducer: \"[\" • lambda-capture-opt \"]\"\l"]
  247 -> 156 [style=solid label="\"...\""]
  247 -> 461 [style=solid label="IDENTIFIER"]
  247 -> 462 [style=solid label="\"this\""]
  247 -> 463 [style=solid label="\"=\""]
  247 -> 464 [style=solid label="\"&\""]
  247 -> 465 [style=solid label="\"*\""]
  247 -> 466 [style=dashed label="ELLIPSIS-opt"]
  247 -> 467 [style=dashed label="capture"]
  247 -> 468 [style=dashed label="capture-default"]
  247 -> 469 [style=dashed label="capture-list"]
  247 -> 470 [style=dashed label="init-capture"]
  247 -> 471 [style=dashed label="lambda-capture"]
  247 -> 472 [style=dashed label="lambda-capture-opt"]
  247 -> 473 [style=dashed label="simple-capture"]
  247 -> "247R5d" [label="[IDENTIFIER]", style=solid]
 "247R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  247 -> "247R386" [label="[]", style=solid]
 "247R386" [label="R386", fillcolor=3, shape=diamond, style=filled]
  248 [label="State 248\n\l 90 await-expression: \"co_await\" • cast-expression\l"]
  248 -> 238 [style=solid label="IDENTIFIER"]
  248 -> 239 [style=solid label="\"noexcept\""]
  248 -> 240 [style=solid label="\"!\""]
  248 -> 241 [style=solid label="\"::\""]
  248 -> 242 [style=solid label="\"this\""]
  248 -> 8 [style=solid label="\"typename\""]
  248 -> 243 [style=solid label="\"+\""]
  248 -> 244 [style=solid label="\"-\""]
  248 -> 245 [style=solid label="\"(\""]
  248 -> 246 [style=solid label="\"&\""]
  248 -> 247 [style=solid label="\"[\""]
  248 -> 248 [style=solid label="\"co_await\""]
  248 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  248 -> 250 [style=solid label="CHARACTER_LITERAL"]
  248 -> 251 [style=solid label="\"operator\""]
  248 -> 21 [style=solid label="\"decltype\""]
  248 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  248 -> 253 [style=solid label="\"*\""]
  248 -> 254 [style=solid label="INTEGER_LITERAL"]
  248 -> 255 [style=solid label="\"requires\""]
  248 -> 256 [style=solid label="\"~\""]
  248 -> 257 [style=solid label="\"++\""]
  248 -> 258 [style=solid label="\"--\""]
  248 -> 259 [style=solid label="POINTER_LITERAL"]
  248 -> 260 [style=solid label="\"dynamic_cast\""]
  248 -> 261 [style=solid label="\"static_cast\""]
  248 -> 262 [style=solid label="\"reinterpret_cast\""]
  248 -> 263 [style=solid label="\"const_cast\""]
  248 -> 264 [style=solid label="\"typeid\""]
  248 -> 27 [style=solid label="\"char\""]
  248 -> 28 [style=solid label="\"char8_t\""]
  248 -> 29 [style=solid label="\"char16_t\""]
  248 -> 30 [style=solid label="\"char32_t\""]
  248 -> 31 [style=solid label="\"wchar_t\""]
  248 -> 32 [style=solid label="\"bool\""]
  248 -> 33 [style=solid label="\"short\""]
  248 -> 34 [style=solid label="\"int\""]
  248 -> 35 [style=solid label="\"long\""]
  248 -> 36 [style=solid label="\"signed\""]
  248 -> 37 [style=solid label="\"unsigned\""]
  248 -> 38 [style=solid label="\"float\""]
  248 -> 39 [style=solid label="\"double\""]
  248 -> 40 [style=solid label="\"void\""]
  248 -> 118 [style=solid label="STRING_LITERAL"]
  248 -> 266 [style=solid label="\"sizeof\""]
  248 -> 267 [style=solid label="\"alignof\""]
  248 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  248 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  248 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  248 -> 272 [style=dashed label="SCOPE-opt"]
  248 -> 276 [style=dashed label="await-expression"]
  248 -> 277 [style=dashed label="boolean-literal"]
  248 -> 474 [style=dashed label="cast-expression"]
  248 -> 279 [style=dashed label="character-literal"]
  248 -> 55 [style=dashed label="class-name"]
  248 -> 282 [style=dashed label="conversion-function-id"]
  248 -> 63 [style=dashed label="decltype-specifier"]
  248 -> 283 [style=dashed label="delete-expression"]
  248 -> 71 [style=dashed label="enum-name"]
  248 -> 287 [style=dashed label="floating-point-literal"]
  248 -> 288 [style=dashed label="fold-expression"]
  248 -> 289 [style=dashed label="id-expression"]
  248 -> 291 [style=dashed label="integer-literal"]
  248 -> 292 [style=dashed label="lambda-expression"]
  248 -> 293 [style=dashed label="lambda-introducer"]
  248 -> 294 [style=dashed label="literal"]
  248 -> 295 [style=dashed label="literal-operator-id"]
  248 -> 85 [style=dashed label="namespace-alias"]
  248 -> 88 [style=dashed label="namespace-name"]
  248 -> 299 [style=dashed label="nested-name-specifier"]
  248 -> 90 [style=dashed label="nested-name-specifier-opt"]
  248 -> 300 [style=dashed label="new-expression"]
  248 -> 301 [style=dashed label="noexcept-expression"]
  248 -> 302 [style=dashed label="operator-function-id"]
  248 -> 94 [style=dashed label="placeholder-type-specifier"]
  248 -> 304 [style=dashed label="pointer-literal"]
  248 -> 305 [style=dashed label="postfix-expression"]
  248 -> 306 [style=dashed label="primary-expression"]
  248 -> 307 [style=dashed label="qualified-id"]
  248 -> 309 [style=dashed label="requires-expression"]
  248 -> 311 [style=dashed label="simple-template-id"]
  248 -> 312 [style=dashed label="simple-type-specifier"]
  248 -> 313 [style=dashed label="string-literal"]
  248 -> 314 [style=dashed label="template-id"]
  248 -> 102 [style=dashed label="template-name"]
  248 -> 104 [style=dashed label="type-constraint"]
  248 -> 105 [style=dashed label="type-constraint-opt"]
  248 -> 106 [style=dashed label="type-name"]
  248 -> 108 [style=dashed label="typedef-name"]
  248 -> 316 [style=dashed label="typename-specifier"]
  248 -> 317 [style=dashed label="unary-expression"]
  248 -> 318 [style=dashed label="unary-operator"]
  248 -> 319 [style=dashed label="unqualified-id"]
  248 -> 320 [style=dashed label="user-defined-character-literal"]
  248 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  248 -> 322 [style=dashed label="user-defined-integer-literal"]
  248 -> 323 [style=dashed label="user-defined-literal"]
  248 -> 324 [style=dashed label="user-defined-string-literal"]
  248 -> "248R19" [style=solid]
 "248R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  248 -> "248R469d" [label="[IDENTIFIER]", style=solid]
 "248R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  248 -> "248R722d" [label="[\"decltype\"]", style=solid]
 "248R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  248 -> "248R722" [label="[\"auto\"]", style=solid]
 "248R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  249 [label="State 249\n\l116 boolean-literal: BOOLEAN_LITERAL •\l"]
  249 -> "249R116" [style=solid]
 "249R116" [label="R116", fillcolor=3, shape=diamond, style=filled]
  250 [label="State 250\n\l132 character-literal: CHARACTER_LITERAL •\l"]
  250 -> "250R132" [style=solid]
 "250R132" [label="R132", fillcolor=3, shape=diamond, style=filled]
  251 [label="State 251\n\l171 conversion-function-id: \"operator\" • conversion-type-id\l403 literal-operator-id: \"operator\" • string-literal IDENTIFIER\l404                    | \"operator\" • user-defined-string-literal\l508 operator-function-id: \"operator\" • overloadable-operator\l509                     | \"operator\" • overloadable-operator \"<\" template-argument-list-opt \">\"\l"]
  251 -> 475 [style=solid label="\",\""]
  251 -> 4 [style=solid label="IDENTIFIER"]
  251 -> 476 [style=solid label="\"!\""]
  251 -> 6 [style=solid label="\"::\""]
  251 -> 8 [style=solid label="\"typename\""]
  251 -> 477 [style=solid label="\"+\""]
  251 -> 478 [style=solid label="\"-\""]
  251 -> 479 [style=solid label="\"=\""]
  251 -> 480 [style=solid label="\"(\""]
  251 -> 481 [style=solid label="\"&\""]
  251 -> 482 [style=solid label="\"*=\""]
  251 -> 483 [style=solid label="\"/=\""]
  251 -> 484 [style=solid label="\"%=\""]
  251 -> 485 [style=solid label="\"+=\""]
  251 -> 486 [style=solid label="\"-=\""]
  251 -> 487 [style=solid label="\">>=\""]
  251 -> 488 [style=solid label="\"<<=\""]
  251 -> 489 [style=solid label="\"&=\""]
  251 -> 490 [style=solid label="\"^=\""]
  251 -> 491 [style=solid label="\"|=\""]
  251 -> 492 [style=solid label="\"[\""]
  251 -> 493 [style=solid label="\"co_await\""]
  251 -> 12 [style=solid label="\"class\""]
  251 -> 13 [style=solid label="\"struct\""]
  251 -> 14 [style=solid label="\"union\""]
  251 -> 494 [style=solid label="\"<=>\""]
  251 -> 495 [style=solid label="\"&&\""]
  251 -> 496 [style=solid label="\"||\""]
  251 -> 15 [style=solid label="\"const\""]
  251 -> 16 [style=solid label="\"volatile\""]
  251 -> 21 [style=solid label="\"decltype\""]
  251 -> 497 [style=solid label="\"->\""]
  251 -> 498 [style=solid label="\"delete\""]
  251 -> 125 [style=solid label="\"enum\""]
  251 -> 499 [style=solid label="\"==\""]
  251 -> 500 [style=solid label="\"!=\""]
  251 -> 501 [style=solid label="\"^\""]
  251 -> 502 [style=solid label="\"<\""]
  251 -> 503 [style=solid label="\">\""]
  251 -> 504 [style=solid label="\"*\""]
  251 -> 505 [style=solid label="\"/\""]
  251 -> 506 [style=solid label="\"%\""]
  251 -> 507 [style=solid label="\"|\""]
  251 -> 508 [style=solid label="\"<<\""]
  251 -> 509 [style=solid label="\">>\""]
  251 -> 510 [style=solid label="\"<=\""]
  251 -> 511 [style=solid label="\">=\""]
  251 -> 512 [style=solid label="\"->*\""]
  251 -> 513 [style=solid label="\"new\""]
  251 -> 514 [style=solid label="\"~\""]
  251 -> 515 [style=solid label="\"++\""]
  251 -> 516 [style=solid label="\"--\""]
  251 -> 27 [style=solid label="\"char\""]
  251 -> 28 [style=solid label="\"char8_t\""]
  251 -> 29 [style=solid label="\"char16_t\""]
  251 -> 30 [style=solid label="\"char32_t\""]
  251 -> 31 [style=solid label="\"wchar_t\""]
  251 -> 32 [style=solid label="\"bool\""]
  251 -> 33 [style=solid label="\"short\""]
  251 -> 34 [style=solid label="\"int\""]
  251 -> 35 [style=solid label="\"long\""]
  251 -> 36 [style=solid label="\"signed\""]
  251 -> 37 [style=solid label="\"unsigned\""]
  251 -> 38 [style=solid label="\"float\""]
  251 -> 39 [style=solid label="\"double\""]
  251 -> 40 [style=solid label="\"void\""]
  251 -> 118 [style=solid label="STRING_LITERAL"]
  251 -> 424 [style=dashed label="class-key"]
  251 -> 55 [style=dashed label="class-name"]
  251 -> 517 [style=dashed label="conversion-type-id"]
  251 -> 57 [style=dashed label="cv-qualifier"]
  251 -> 63 [style=dashed label="decltype-specifier"]
  251 -> 66 [style=dashed label="elaborated-enum-specifier"]
  251 -> 67 [style=dashed label="elaborated-type-specifier"]
  251 -> 71 [style=dashed label="enum-name"]
  251 -> 85 [style=dashed label="namespace-alias"]
  251 -> 88 [style=dashed label="namespace-name"]
  251 -> 89 [style=dashed label="nested-name-specifier"]
  251 -> 90 [style=dashed label="nested-name-specifier-opt"]
  251 -> 518 [style=dashed label="overloadable-operator"]
  251 -> 94 [style=dashed label="placeholder-type-specifier"]
  251 -> 96 [style=dashed label="simple-template-id"]
  251 -> 97 [style=dashed label="simple-type-specifier"]
  251 -> 519 [style=dashed label="string-literal"]
  251 -> 102 [style=dashed label="template-name"]
  251 -> 104 [style=dashed label="type-constraint"]
  251 -> 105 [style=dashed label="type-constraint-opt"]
  251 -> 106 [style=dashed label="type-name"]
  251 -> 432 [style=dashed label="type-specifier"]
  251 -> 520 [style=dashed label="type-specifier-seq"]
  251 -> 108 [style=dashed label="typedef-name"]
  251 -> 109 [style=dashed label="typename-specifier"]
  251 -> 521 [style=dashed label="user-defined-string-literal"]
  251 -> "251R469d" [label="[IDENTIFIER]", style=solid]
 "251R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  251 -> "251R722d" [label="[\"decltype\"]", style=solid]
 "251R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  251 -> "251R722" [label="[]", style=solid]
 "251R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  252 [label="State 252\n\l287 floating-point-literal: FLOATING_POINT_LITERAL •\l"]
  252 -> "252R287" [style=solid]
 "252R287" [label="R287", fillcolor=3, shape=diamond, style=filled]
  253 [label="State 253\n\l760 unary-operator: \"*\" •\l"]
  253 -> "253R760" [style=solid]
 "253R760" [label="R760", fillcolor=3, shape=diamond, style=filled]
  254 [label="State 254\n\l370 integer-literal: INTEGER_LITERAL •\l"]
  254 -> "254R370" [style=solid]
 "254R370" [label="R370", fillcolor=3, shape=diamond, style=filled]
  255 [label="State 255\n\l636 requires-expression: \"requires\" • requirement-parameter-list-opt requirement-body\l"]
  255 -> 522 [style=solid label="\"(\""]
  255 -> 523 [style=dashed label="requirement-parameter-list"]
  255 -> 524 [style=dashed label="requirement-parameter-list-opt"]
  255 -> "255R629" [style=solid]
 "255R629" [label="R629", fillcolor=3, shape=diamond, style=filled]
  256 [label="State 256\n\l765 unary-operator: \"~\" •\l771 unqualified-id: \"~\" • type-name\l772               | \"~\" • decltype-specifier\l"]
  256 -> 525 [style=solid label="IDENTIFIER"]
  256 -> 21 [style=solid label="\"decltype\""]
  256 -> 55 [style=dashed label="class-name"]
  256 -> 526 [style=dashed label="decltype-specifier"]
  256 -> 71 [style=dashed label="enum-name"]
  256 -> 96 [style=dashed label="simple-template-id"]
  256 -> 102 [style=dashed label="template-name"]
  256 -> 527 [style=dashed label="type-name"]
  256 -> 108 [style=dashed label="typedef-name"]
  256 -> "256R765d" [label="[IDENTIFIER, \"decltype\"]", style=solid]
 "256R765d" [label="R765", fillcolor=5, shape=diamond, style=filled]
  256 -> "256R765" [style=solid]
 "256R765" [label="R765", fillcolor=3, shape=diamond, style=filled]
  257 [label="State 257\n\l750 unary-expression: \"++\" • cast-expression\l"]
  257 -> 238 [style=solid label="IDENTIFIER"]
  257 -> 239 [style=solid label="\"noexcept\""]
  257 -> 240 [style=solid label="\"!\""]
  257 -> 241 [style=solid label="\"::\""]
  257 -> 242 [style=solid label="\"this\""]
  257 -> 8 [style=solid label="\"typename\""]
  257 -> 243 [style=solid label="\"+\""]
  257 -> 244 [style=solid label="\"-\""]
  257 -> 245 [style=solid label="\"(\""]
  257 -> 246 [style=solid label="\"&\""]
  257 -> 247 [style=solid label="\"[\""]
  257 -> 248 [style=solid label="\"co_await\""]
  257 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  257 -> 250 [style=solid label="CHARACTER_LITERAL"]
  257 -> 251 [style=solid label="\"operator\""]
  257 -> 21 [style=solid label="\"decltype\""]
  257 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  257 -> 253 [style=solid label="\"*\""]
  257 -> 254 [style=solid label="INTEGER_LITERAL"]
  257 -> 255 [style=solid label="\"requires\""]
  257 -> 256 [style=solid label="\"~\""]
  257 -> 257 [style=solid label="\"++\""]
  257 -> 258 [style=solid label="\"--\""]
  257 -> 259 [style=solid label="POINTER_LITERAL"]
  257 -> 260 [style=solid label="\"dynamic_cast\""]
  257 -> 261 [style=solid label="\"static_cast\""]
  257 -> 262 [style=solid label="\"reinterpret_cast\""]
  257 -> 263 [style=solid label="\"const_cast\""]
  257 -> 264 [style=solid label="\"typeid\""]
  257 -> 27 [style=solid label="\"char\""]
  257 -> 28 [style=solid label="\"char8_t\""]
  257 -> 29 [style=solid label="\"char16_t\""]
  257 -> 30 [style=solid label="\"char32_t\""]
  257 -> 31 [style=solid label="\"wchar_t\""]
  257 -> 32 [style=solid label="\"bool\""]
  257 -> 33 [style=solid label="\"short\""]
  257 -> 34 [style=solid label="\"int\""]
  257 -> 35 [style=solid label="\"long\""]
  257 -> 36 [style=solid label="\"signed\""]
  257 -> 37 [style=solid label="\"unsigned\""]
  257 -> 38 [style=solid label="\"float\""]
  257 -> 39 [style=solid label="\"double\""]
  257 -> 40 [style=solid label="\"void\""]
  257 -> 118 [style=solid label="STRING_LITERAL"]
  257 -> 266 [style=solid label="\"sizeof\""]
  257 -> 267 [style=solid label="\"alignof\""]
  257 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  257 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  257 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  257 -> 272 [style=dashed label="SCOPE-opt"]
  257 -> 276 [style=dashed label="await-expression"]
  257 -> 277 [style=dashed label="boolean-literal"]
  257 -> 528 [style=dashed label="cast-expression"]
  257 -> 279 [style=dashed label="character-literal"]
  257 -> 55 [style=dashed label="class-name"]
  257 -> 282 [style=dashed label="conversion-function-id"]
  257 -> 63 [style=dashed label="decltype-specifier"]
  257 -> 283 [style=dashed label="delete-expression"]
  257 -> 71 [style=dashed label="enum-name"]
  257 -> 287 [style=dashed label="floating-point-literal"]
  257 -> 288 [style=dashed label="fold-expression"]
  257 -> 289 [style=dashed label="id-expression"]
  257 -> 291 [style=dashed label="integer-literal"]
  257 -> 292 [style=dashed label="lambda-expression"]
  257 -> 293 [style=dashed label="lambda-introducer"]
  257 -> 294 [style=dashed label="literal"]
  257 -> 295 [style=dashed label="literal-operator-id"]
  257 -> 85 [style=dashed label="namespace-alias"]
  257 -> 88 [style=dashed label="namespace-name"]
  257 -> 299 [style=dashed label="nested-name-specifier"]
  257 -> 90 [style=dashed label="nested-name-specifier-opt"]
  257 -> 300 [style=dashed label="new-expression"]
  257 -> 301 [style=dashed label="noexcept-expression"]
  257 -> 302 [style=dashed label="operator-function-id"]
  257 -> 94 [style=dashed label="placeholder-type-specifier"]
  257 -> 304 [style=dashed label="pointer-literal"]
  257 -> 305 [style=dashed label="postfix-expression"]
  257 -> 306 [style=dashed label="primary-expression"]
  257 -> 307 [style=dashed label="qualified-id"]
  257 -> 309 [style=dashed label="requires-expression"]
  257 -> 311 [style=dashed label="simple-template-id"]
  257 -> 312 [style=dashed label="simple-type-specifier"]
  257 -> 313 [style=dashed label="string-literal"]
  257 -> 314 [style=dashed label="template-id"]
  257 -> 102 [style=dashed label="template-name"]
  257 -> 104 [style=dashed label="type-constraint"]
  257 -> 105 [style=dashed label="type-constraint-opt"]
  257 -> 106 [style=dashed label="type-name"]
  257 -> 108 [style=dashed label="typedef-name"]
  257 -> 316 [style=dashed label="typename-specifier"]
  257 -> 317 [style=dashed label="unary-expression"]
  257 -> 318 [style=dashed label="unary-operator"]
  257 -> 319 [style=dashed label="unqualified-id"]
  257 -> 320 [style=dashed label="user-defined-character-literal"]
  257 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  257 -> 322 [style=dashed label="user-defined-integer-literal"]
  257 -> 323 [style=dashed label="user-defined-literal"]
  257 -> 324 [style=dashed label="user-defined-string-literal"]
  257 -> "257R19" [style=solid]
 "257R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  257 -> "257R469d" [label="[IDENTIFIER]", style=solid]
 "257R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  257 -> "257R722d" [label="[\"decltype\"]", style=solid]
 "257R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  257 -> "257R722" [label="[\"auto\"]", style=solid]
 "257R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  258 [label="State 258\n\l751 unary-expression: \"--\" • cast-expression\l"]
  258 -> 238 [style=solid label="IDENTIFIER"]
  258 -> 239 [style=solid label="\"noexcept\""]
  258 -> 240 [style=solid label="\"!\""]
  258 -> 241 [style=solid label="\"::\""]
  258 -> 242 [style=solid label="\"this\""]
  258 -> 8 [style=solid label="\"typename\""]
  258 -> 243 [style=solid label="\"+\""]
  258 -> 244 [style=solid label="\"-\""]
  258 -> 245 [style=solid label="\"(\""]
  258 -> 246 [style=solid label="\"&\""]
  258 -> 247 [style=solid label="\"[\""]
  258 -> 248 [style=solid label="\"co_await\""]
  258 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  258 -> 250 [style=solid label="CHARACTER_LITERAL"]
  258 -> 251 [style=solid label="\"operator\""]
  258 -> 21 [style=solid label="\"decltype\""]
  258 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  258 -> 253 [style=solid label="\"*\""]
  258 -> 254 [style=solid label="INTEGER_LITERAL"]
  258 -> 255 [style=solid label="\"requires\""]
  258 -> 256 [style=solid label="\"~\""]
  258 -> 257 [style=solid label="\"++\""]
  258 -> 258 [style=solid label="\"--\""]
  258 -> 259 [style=solid label="POINTER_LITERAL"]
  258 -> 260 [style=solid label="\"dynamic_cast\""]
  258 -> 261 [style=solid label="\"static_cast\""]
  258 -> 262 [style=solid label="\"reinterpret_cast\""]
  258 -> 263 [style=solid label="\"const_cast\""]
  258 -> 264 [style=solid label="\"typeid\""]
  258 -> 27 [style=solid label="\"char\""]
  258 -> 28 [style=solid label="\"char8_t\""]
  258 -> 29 [style=solid label="\"char16_t\""]
  258 -> 30 [style=solid label="\"char32_t\""]
  258 -> 31 [style=solid label="\"wchar_t\""]
  258 -> 32 [style=solid label="\"bool\""]
  258 -> 33 [style=solid label="\"short\""]
  258 -> 34 [style=solid label="\"int\""]
  258 -> 35 [style=solid label="\"long\""]
  258 -> 36 [style=solid label="\"signed\""]
  258 -> 37 [style=solid label="\"unsigned\""]
  258 -> 38 [style=solid label="\"float\""]
  258 -> 39 [style=solid label="\"double\""]
  258 -> 40 [style=solid label="\"void\""]
  258 -> 118 [style=solid label="STRING_LITERAL"]
  258 -> 266 [style=solid label="\"sizeof\""]
  258 -> 267 [style=solid label="\"alignof\""]
  258 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  258 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  258 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  258 -> 272 [style=dashed label="SCOPE-opt"]
  258 -> 276 [style=dashed label="await-expression"]
  258 -> 277 [style=dashed label="boolean-literal"]
  258 -> 529 [style=dashed label="cast-expression"]
  258 -> 279 [style=dashed label="character-literal"]
  258 -> 55 [style=dashed label="class-name"]
  258 -> 282 [style=dashed label="conversion-function-id"]
  258 -> 63 [style=dashed label="decltype-specifier"]
  258 -> 283 [style=dashed label="delete-expression"]
  258 -> 71 [style=dashed label="enum-name"]
  258 -> 287 [style=dashed label="floating-point-literal"]
  258 -> 288 [style=dashed label="fold-expression"]
  258 -> 289 [style=dashed label="id-expression"]
  258 -> 291 [style=dashed label="integer-literal"]
  258 -> 292 [style=dashed label="lambda-expression"]
  258 -> 293 [style=dashed label="lambda-introducer"]
  258 -> 294 [style=dashed label="literal"]
  258 -> 295 [style=dashed label="literal-operator-id"]
  258 -> 85 [style=dashed label="namespace-alias"]
  258 -> 88 [style=dashed label="namespace-name"]
  258 -> 299 [style=dashed label="nested-name-specifier"]
  258 -> 90 [style=dashed label="nested-name-specifier-opt"]
  258 -> 300 [style=dashed label="new-expression"]
  258 -> 301 [style=dashed label="noexcept-expression"]
  258 -> 302 [style=dashed label="operator-function-id"]
  258 -> 94 [style=dashed label="placeholder-type-specifier"]
  258 -> 304 [style=dashed label="pointer-literal"]
  258 -> 305 [style=dashed label="postfix-expression"]
  258 -> 306 [style=dashed label="primary-expression"]
  258 -> 307 [style=dashed label="qualified-id"]
  258 -> 309 [style=dashed label="requires-expression"]
  258 -> 311 [style=dashed label="simple-template-id"]
  258 -> 312 [style=dashed label="simple-type-specifier"]
  258 -> 313 [style=dashed label="string-literal"]
  258 -> 314 [style=dashed label="template-id"]
  258 -> 102 [style=dashed label="template-name"]
  258 -> 104 [style=dashed label="type-constraint"]
  258 -> 105 [style=dashed label="type-constraint-opt"]
  258 -> 106 [style=dashed label="type-name"]
  258 -> 108 [style=dashed label="typedef-name"]
  258 -> 316 [style=dashed label="typename-specifier"]
  258 -> 317 [style=dashed label="unary-expression"]
  258 -> 318 [style=dashed label="unary-operator"]
  258 -> 319 [style=dashed label="unqualified-id"]
  258 -> 320 [style=dashed label="user-defined-character-literal"]
  258 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  258 -> 322 [style=dashed label="user-defined-integer-literal"]
  258 -> 323 [style=dashed label="user-defined-literal"]
  258 -> 324 [style=dashed label="user-defined-string-literal"]
  258 -> "258R19" [style=solid]
 "258R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  258 -> "258R469d" [label="[IDENTIFIER]", style=solid]
 "258R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  258 -> "258R722d" [label="[\"decltype\"]", style=solid]
 "258R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  258 -> "258R722" [label="[\"auto\"]", style=solid]
 "258R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  259 [label="State 259\n\l570 pointer-literal: POINTER_LITERAL •\l"]
  259 -> "259R570" [style=solid]
 "259R570" [label="R570", fillcolor=3, shape=diamond, style=filled]
  260 [label="State 260\n\l582 postfix-expression: \"dynamic_cast\" • \"<\" type-id \">\" \"(\" expression \")\"\l"]
  260 -> 530 [style=solid label="\"<\""]
  261 [label="State 261\n\l583 postfix-expression: \"static_cast\" • \"<\" type-id \">\" \"(\" expression \")\"\l"]
  261 -> 531 [style=solid label="\"<\""]
  262 [label="State 262\n\l584 postfix-expression: \"reinterpret_cast\" • \"<\" type-id \">\" \"(\" expression \")\"\l"]
  262 -> 532 [style=solid label="\"<\""]
  263 [label="State 263\n\l585 postfix-expression: \"const_cast\" • \"<\" type-id \">\" \"(\" expression \")\"\l"]
  263 -> 533 [style=solid label="\"<\""]
  264 [label="State 264\n\l586 postfix-expression: \"typeid\" • \"(\" expression \")\"\l587                   | \"typeid\" • \"(\" type-id \")\"\l"]
  264 -> 534 [style=solid label="\"(\""]
  265 [label="State 265\n\l713 throw-expression: \"throw\" • assignment-expression-opt\l"]
  265 -> 238 [style=solid label="IDENTIFIER"]
  265 -> 239 [style=solid label="\"noexcept\""]
  265 -> 240 [style=solid label="\"!\""]
  265 -> 241 [style=solid label="\"::\""]
  265 -> 242 [style=solid label="\"this\""]
  265 -> 8 [style=solid label="\"typename\""]
  265 -> 243 [style=solid label="\"+\""]
  265 -> 244 [style=solid label="\"-\""]
  265 -> 245 [style=solid label="\"(\""]
  265 -> 246 [style=solid label="\"&\""]
  265 -> 247 [style=solid label="\"[\""]
  265 -> 248 [style=solid label="\"co_await\""]
  265 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  265 -> 250 [style=solid label="CHARACTER_LITERAL"]
  265 -> 251 [style=solid label="\"operator\""]
  265 -> 21 [style=solid label="\"decltype\""]
  265 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  265 -> 253 [style=solid label="\"*\""]
  265 -> 254 [style=solid label="INTEGER_LITERAL"]
  265 -> 255 [style=solid label="\"requires\""]
  265 -> 256 [style=solid label="\"~\""]
  265 -> 257 [style=solid label="\"++\""]
  265 -> 258 [style=solid label="\"--\""]
  265 -> 259 [style=solid label="POINTER_LITERAL"]
  265 -> 260 [style=solid label="\"dynamic_cast\""]
  265 -> 261 [style=solid label="\"static_cast\""]
  265 -> 262 [style=solid label="\"reinterpret_cast\""]
  265 -> 263 [style=solid label="\"const_cast\""]
  265 -> 264 [style=solid label="\"typeid\""]
  265 -> 27 [style=solid label="\"char\""]
  265 -> 28 [style=solid label="\"char8_t\""]
  265 -> 29 [style=solid label="\"char16_t\""]
  265 -> 30 [style=solid label="\"char32_t\""]
  265 -> 31 [style=solid label="\"wchar_t\""]
  265 -> 32 [style=solid label="\"bool\""]
  265 -> 33 [style=solid label="\"short\""]
  265 -> 34 [style=solid label="\"int\""]
  265 -> 35 [style=solid label="\"long\""]
  265 -> 36 [style=solid label="\"signed\""]
  265 -> 37 [style=solid label="\"unsigned\""]
  265 -> 38 [style=solid label="\"float\""]
  265 -> 39 [style=solid label="\"double\""]
  265 -> 40 [style=solid label="\"void\""]
  265 -> 118 [style=solid label="STRING_LITERAL"]
  265 -> 265 [style=solid label="\"throw\""]
  265 -> 266 [style=solid label="\"sizeof\""]
  265 -> 267 [style=solid label="\"alignof\""]
  265 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  265 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  265 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  265 -> 271 [style=solid label="\"co_yield\""]
  265 -> 272 [style=dashed label="SCOPE-opt"]
  265 -> 273 [style=dashed label="additive-expression"]
  265 -> 274 [style=dashed label="and-expression"]
  265 -> 535 [style=dashed label="assignment-expression"]
  265 -> 536 [style=dashed label="assignment-expression-opt"]
  265 -> 276 [style=dashed label="await-expression"]
  265 -> 277 [style=dashed label="boolean-literal"]
  265 -> 278 [style=dashed label="cast-expression"]
  265 -> 279 [style=dashed label="character-literal"]
  265 -> 55 [style=dashed label="class-name"]
  265 -> 280 [style=dashed label="compare-expression"]
  265 -> 281 [style=dashed label="conditional-expression"]
  265 -> 282 [style=dashed label="conversion-function-id"]
  265 -> 63 [style=dashed label="decltype-specifier"]
  265 -> 283 [style=dashed label="delete-expression"]
  265 -> 71 [style=dashed label="enum-name"]
  265 -> 284 [style=dashed label="equality-expression"]
  265 -> 285 [style=dashed label="exclusive-or-expression"]
  265 -> 287 [style=dashed label="floating-point-literal"]
  265 -> 288 [style=dashed label="fold-expression"]
  265 -> 289 [style=dashed label="id-expression"]
  265 -> 290 [style=dashed label="inclusive-or-expression"]
  265 -> 291 [style=dashed label="integer-literal"]
  265 -> 292 [style=dashed label="lambda-expression"]
  265 -> 293 [style=dashed label="lambda-introducer"]
  265 -> 294 [style=dashed label="literal"]
  265 -> 295 [style=dashed label="literal-operator-id"]
  265 -> 296 [style=dashed label="logical-and-expression"]
  265 -> 297 [style=dashed label="logical-or-expression"]
  265 -> 298 [style=dashed label="multiplicative-expression"]
  265 -> 85 [style=dashed label="namespace-alias"]
  265 -> 88 [style=dashed label="namespace-name"]
  265 -> 299 [style=dashed label="nested-name-specifier"]
  265 -> 90 [style=dashed label="nested-name-specifier-opt"]
  265 -> 300 [style=dashed label="new-expression"]
  265 -> 301 [style=dashed label="noexcept-expression"]
  265 -> 302 [style=dashed label="operator-function-id"]
  265 -> 94 [style=dashed label="placeholder-type-specifier"]
  265 -> 303 [style=dashed label="pm-expression"]
  265 -> 304 [style=dashed label="pointer-literal"]
  265 -> 305 [style=dashed label="postfix-expression"]
  265 -> 306 [style=dashed label="primary-expression"]
  265 -> 307 [style=dashed label="qualified-id"]
  265 -> 308 [style=dashed label="relational-expression"]
  265 -> 309 [style=dashed label="requires-expression"]
  265 -> 310 [style=dashed label="shift-expression"]
  265 -> 311 [style=dashed label="simple-template-id"]
  265 -> 312 [style=dashed label="simple-type-specifier"]
  265 -> 313 [style=dashed label="string-literal"]
  265 -> 314 [style=dashed label="template-id"]
  265 -> 102 [style=dashed label="template-name"]
  265 -> 315 [style=dashed label="throw-expression"]
  265 -> 104 [style=dashed label="type-constraint"]
  265 -> 105 [style=dashed label="type-constraint-opt"]
  265 -> 106 [style=dashed label="type-name"]
  265 -> 108 [style=dashed label="typedef-name"]
  265 -> 316 [style=dashed label="typename-specifier"]
  265 -> 317 [style=dashed label="unary-expression"]
  265 -> 318 [style=dashed label="unary-operator"]
  265 -> 319 [style=dashed label="unqualified-id"]
  265 -> 320 [style=dashed label="user-defined-character-literal"]
  265 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  265 -> 322 [style=dashed label="user-defined-integer-literal"]
  265 -> 323 [style=dashed label="user-defined-literal"]
  265 -> 324 [style=dashed label="user-defined-string-literal"]
  265 -> 325 [style=dashed label="yield-expression"]
  265 -> "265R19" [label="[\"delete\", \"new\"]", style=solid]
 "265R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  265 -> "265R54" [style=solid]
 "265R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  265 -> "265R469d" [label="[IDENTIFIER]", style=solid]
 "265R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  265 -> "265R722d" [label="[\"decltype\"]", style=solid]
 "265R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  265 -> "265R722" [label="[\"auto\"]", style=solid]
 "265R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  266 [label="State 266\n\l753 unary-expression: \"sizeof\" • unary-expression\l754                 | \"sizeof\" • \"(\" type-id \")\"\l755                 | \"sizeof\" • \"...\" \"(\" IDENTIFIER \")\"\l"]
  266 -> 537 [style=solid label="\"...\""]
  266 -> 238 [style=solid label="IDENTIFIER"]
  266 -> 239 [style=solid label="\"noexcept\""]
  266 -> 240 [style=solid label="\"!\""]
  266 -> 241 [style=solid label="\"::\""]
  266 -> 242 [style=solid label="\"this\""]
  266 -> 8 [style=solid label="\"typename\""]
  266 -> 243 [style=solid label="\"+\""]
  266 -> 244 [style=solid label="\"-\""]
  266 -> 538 [style=solid label="\"(\""]
  266 -> 246 [style=solid label="\"&\""]
  266 -> 247 [style=solid label="\"[\""]
  266 -> 248 [style=solid label="\"co_await\""]
  266 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  266 -> 250 [style=solid label="CHARACTER_LITERAL"]
  266 -> 251 [style=solid label="\"operator\""]
  266 -> 21 [style=solid label="\"decltype\""]
  266 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  266 -> 253 [style=solid label="\"*\""]
  266 -> 254 [style=solid label="INTEGER_LITERAL"]
  266 -> 255 [style=solid label="\"requires\""]
  266 -> 256 [style=solid label="\"~\""]
  266 -> 257 [style=solid label="\"++\""]
  266 -> 258 [style=solid label="\"--\""]
  266 -> 259 [style=solid label="POINTER_LITERAL"]
  266 -> 260 [style=solid label="\"dynamic_cast\""]
  266 -> 261 [style=solid label="\"static_cast\""]
  266 -> 262 [style=solid label="\"reinterpret_cast\""]
  266 -> 263 [style=solid label="\"const_cast\""]
  266 -> 264 [style=solid label="\"typeid\""]
  266 -> 27 [style=solid label="\"char\""]
  266 -> 28 [style=solid label="\"char8_t\""]
  266 -> 29 [style=solid label="\"char16_t\""]
  266 -> 30 [style=solid label="\"char32_t\""]
  266 -> 31 [style=solid label="\"wchar_t\""]
  266 -> 32 [style=solid label="\"bool\""]
  266 -> 33 [style=solid label="\"short\""]
  266 -> 34 [style=solid label="\"int\""]
  266 -> 35 [style=solid label="\"long\""]
  266 -> 36 [style=solid label="\"signed\""]
  266 -> 37 [style=solid label="\"unsigned\""]
  266 -> 38 [style=solid label="\"float\""]
  266 -> 39 [style=solid label="\"double\""]
  266 -> 40 [style=solid label="\"void\""]
  266 -> 118 [style=solid label="STRING_LITERAL"]
  266 -> 266 [style=solid label="\"sizeof\""]
  266 -> 267 [style=solid label="\"alignof\""]
  266 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  266 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  266 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  266 -> 272 [style=dashed label="SCOPE-opt"]
  266 -> 276 [style=dashed label="await-expression"]
  266 -> 277 [style=dashed label="boolean-literal"]
  266 -> 279 [style=dashed label="character-literal"]
  266 -> 55 [style=dashed label="class-name"]
  266 -> 282 [style=dashed label="conversion-function-id"]
  266 -> 63 [style=dashed label="decltype-specifier"]
  266 -> 283 [style=dashed label="delete-expression"]
  266 -> 71 [style=dashed label="enum-name"]
  266 -> 287 [style=dashed label="floating-point-literal"]
  266 -> 288 [style=dashed label="fold-expression"]
  266 -> 289 [style=dashed label="id-expression"]
  266 -> 291 [style=dashed label="integer-literal"]
  266 -> 292 [style=dashed label="lambda-expression"]
  266 -> 293 [style=dashed label="lambda-introducer"]
  266 -> 294 [style=dashed label="literal"]
  266 -> 295 [style=dashed label="literal-operator-id"]
  266 -> 85 [style=dashed label="namespace-alias"]
  266 -> 88 [style=dashed label="namespace-name"]
  266 -> 299 [style=dashed label="nested-name-specifier"]
  266 -> 90 [style=dashed label="nested-name-specifier-opt"]
  266 -> 300 [style=dashed label="new-expression"]
  266 -> 301 [style=dashed label="noexcept-expression"]
  266 -> 302 [style=dashed label="operator-function-id"]
  266 -> 94 [style=dashed label="placeholder-type-specifier"]
  266 -> 304 [style=dashed label="pointer-literal"]
  266 -> 305 [style=dashed label="postfix-expression"]
  266 -> 306 [style=dashed label="primary-expression"]
  266 -> 307 [style=dashed label="qualified-id"]
  266 -> 309 [style=dashed label="requires-expression"]
  266 -> 311 [style=dashed label="simple-template-id"]
  266 -> 312 [style=dashed label="simple-type-specifier"]
  266 -> 313 [style=dashed label="string-literal"]
  266 -> 314 [style=dashed label="template-id"]
  266 -> 102 [style=dashed label="template-name"]
  266 -> 104 [style=dashed label="type-constraint"]
  266 -> 105 [style=dashed label="type-constraint-opt"]
  266 -> 106 [style=dashed label="type-name"]
  266 -> 108 [style=dashed label="typedef-name"]
  266 -> 316 [style=dashed label="typename-specifier"]
  266 -> 539 [style=dashed label="unary-expression"]
  266 -> 318 [style=dashed label="unary-operator"]
  266 -> 319 [style=dashed label="unqualified-id"]
  266 -> 320 [style=dashed label="user-defined-character-literal"]
  266 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  266 -> 322 [style=dashed label="user-defined-integer-literal"]
  266 -> 323 [style=dashed label="user-defined-literal"]
  266 -> 324 [style=dashed label="user-defined-string-literal"]
  266 -> "266R19" [style=solid]
 "266R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  266 -> "266R469d" [label="[IDENTIFIER]", style=solid]
 "266R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  266 -> "266R722d" [label="[\"decltype\"]", style=solid]
 "266R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  266 -> "266R722" [label="[\"auto\"]", style=solid]
 "266R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  267 [label="State 267\n\l756 unary-expression: \"alignof\" • \"(\" type-id \")\"\l"]
  267 -> 540 [style=solid label="\"(\""]
  268 [label="State 268\n\l774 user-defined-character-literal: USER_DEFINED_CHARACTER_LITERAL •\l"]
  268 -> "268R774" [style=solid]
 "268R774" [label="R774", fillcolor=3, shape=diamond, style=filled]
  269 [label="State 269\n\l775 user-defined-floating-point-literal: USER_DEFINED_FLOATING_POINT_LITERAL •\l"]
  269 -> "269R775" [style=solid]
 "269R775" [label="R775", fillcolor=3, shape=diamond, style=filled]
  270 [label="State 270\n\l776 user-defined-integer-literal: USER_DEFINED_INTEGER_LITERAL •\l"]
  270 -> "270R776" [style=solid]
 "270R776" [label="R776", fillcolor=3, shape=diamond, style=filled]
  271 [label="State 271\n\l794 yield-expression: \"co_yield\" • assignment-expression\l795                 | \"co_yield\" • braced-init-list\l"]
  271 -> 238 [style=solid label="IDENTIFIER"]
  271 -> 239 [style=solid label="\"noexcept\""]
  271 -> 240 [style=solid label="\"!\""]
  271 -> 241 [style=solid label="\"::\""]
  271 -> 242 [style=solid label="\"this\""]
  271 -> 8 [style=solid label="\"typename\""]
  271 -> 243 [style=solid label="\"+\""]
  271 -> 244 [style=solid label="\"-\""]
  271 -> 245 [style=solid label="\"(\""]
  271 -> 246 [style=solid label="\"&\""]
  271 -> 247 [style=solid label="\"[\""]
  271 -> 248 [style=solid label="\"co_await\""]
  271 -> 398 [style=solid label="\"{\""]
  271 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  271 -> 250 [style=solid label="CHARACTER_LITERAL"]
  271 -> 251 [style=solid label="\"operator\""]
  271 -> 21 [style=solid label="\"decltype\""]
  271 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  271 -> 253 [style=solid label="\"*\""]
  271 -> 254 [style=solid label="INTEGER_LITERAL"]
  271 -> 255 [style=solid label="\"requires\""]
  271 -> 256 [style=solid label="\"~\""]
  271 -> 257 [style=solid label="\"++\""]
  271 -> 258 [style=solid label="\"--\""]
  271 -> 259 [style=solid label="POINTER_LITERAL"]
  271 -> 260 [style=solid label="\"dynamic_cast\""]
  271 -> 261 [style=solid label="\"static_cast\""]
  271 -> 262 [style=solid label="\"reinterpret_cast\""]
  271 -> 263 [style=solid label="\"const_cast\""]
  271 -> 264 [style=solid label="\"typeid\""]
  271 -> 27 [style=solid label="\"char\""]
  271 -> 28 [style=solid label="\"char8_t\""]
  271 -> 29 [style=solid label="\"char16_t\""]
  271 -> 30 [style=solid label="\"char32_t\""]
  271 -> 31 [style=solid label="\"wchar_t\""]
  271 -> 32 [style=solid label="\"bool\""]
  271 -> 33 [style=solid label="\"short\""]
  271 -> 34 [style=solid label="\"int\""]
  271 -> 35 [style=solid label="\"long\""]
  271 -> 36 [style=solid label="\"signed\""]
  271 -> 37 [style=solid label="\"unsigned\""]
  271 -> 38 [style=solid label="\"float\""]
  271 -> 39 [style=solid label="\"double\""]
  271 -> 40 [style=solid label="\"void\""]
  271 -> 118 [style=solid label="STRING_LITERAL"]
  271 -> 265 [style=solid label="\"throw\""]
  271 -> 266 [style=solid label="\"sizeof\""]
  271 -> 267 [style=solid label="\"alignof\""]
  271 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  271 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  271 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  271 -> 271 [style=solid label="\"co_yield\""]
  271 -> 272 [style=dashed label="SCOPE-opt"]
  271 -> 273 [style=dashed label="additive-expression"]
  271 -> 274 [style=dashed label="and-expression"]
  271 -> 541 [style=dashed label="assignment-expression"]
  271 -> 276 [style=dashed label="await-expression"]
  271 -> 277 [style=dashed label="boolean-literal"]
  271 -> 542 [style=dashed label="braced-init-list"]
  271 -> 278 [style=dashed label="cast-expression"]
  271 -> 279 [style=dashed label="character-literal"]
  271 -> 55 [style=dashed label="class-name"]
  271 -> 280 [style=dashed label="compare-expression"]
  271 -> 281 [style=dashed label="conditional-expression"]
  271 -> 282 [style=dashed label="conversion-function-id"]
  271 -> 63 [style=dashed label="decltype-specifier"]
  271 -> 283 [style=dashed label="delete-expression"]
  271 -> 71 [style=dashed label="enum-name"]
  271 -> 284 [style=dashed label="equality-expression"]
  271 -> 285 [style=dashed label="exclusive-or-expression"]
  271 -> 287 [style=dashed label="floating-point-literal"]
  271 -> 288 [style=dashed label="fold-expression"]
  271 -> 289 [style=dashed label="id-expression"]
  271 -> 290 [style=dashed label="inclusive-or-expression"]
  271 -> 291 [style=dashed label="integer-literal"]
  271 -> 292 [style=dashed label="lambda-expression"]
  271 -> 293 [style=dashed label="lambda-introducer"]
  271 -> 294 [style=dashed label="literal"]
  271 -> 295 [style=dashed label="literal-operator-id"]
  271 -> 296 [style=dashed label="logical-and-expression"]
  271 -> 297 [style=dashed label="logical-or-expression"]
  271 -> 298 [style=dashed label="multiplicative-expression"]
  271 -> 85 [style=dashed label="namespace-alias"]
  271 -> 88 [style=dashed label="namespace-name"]
  271 -> 299 [style=dashed label="nested-name-specifier"]
  271 -> 90 [style=dashed label="nested-name-specifier-opt"]
  271 -> 300 [style=dashed label="new-expression"]
  271 -> 301 [style=dashed label="noexcept-expression"]
  271 -> 302 [style=dashed label="operator-function-id"]
  271 -> 94 [style=dashed label="placeholder-type-specifier"]
  271 -> 303 [style=dashed label="pm-expression"]
  271 -> 304 [style=dashed label="pointer-literal"]
  271 -> 305 [style=dashed label="postfix-expression"]
  271 -> 306 [style=dashed label="primary-expression"]
  271 -> 307 [style=dashed label="qualified-id"]
  271 -> 308 [style=dashed label="relational-expression"]
  271 -> 309 [style=dashed label="requires-expression"]
  271 -> 310 [style=dashed label="shift-expression"]
  271 -> 311 [style=dashed label="simple-template-id"]
  271 -> 312 [style=dashed label="simple-type-specifier"]
  271 -> 313 [style=dashed label="string-literal"]
  271 -> 314 [style=dashed label="template-id"]
  271 -> 102 [style=dashed label="template-name"]
  271 -> 315 [style=dashed label="throw-expression"]
  271 -> 104 [style=dashed label="type-constraint"]
  271 -> 105 [style=dashed label="type-constraint-opt"]
  271 -> 106 [style=dashed label="type-name"]
  271 -> 108 [style=dashed label="typedef-name"]
  271 -> 316 [style=dashed label="typename-specifier"]
  271 -> 317 [style=dashed label="unary-expression"]
  271 -> 318 [style=dashed label="unary-operator"]
  271 -> 319 [style=dashed label="unqualified-id"]
  271 -> 320 [style=dashed label="user-defined-character-literal"]
  271 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  271 -> 322 [style=dashed label="user-defined-integer-literal"]
  271 -> 323 [style=dashed label="user-defined-literal"]
  271 -> 324 [style=dashed label="user-defined-string-literal"]
  271 -> 325 [style=dashed label="yield-expression"]
  271 -> "271R19" [style=solid]
 "271R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  271 -> "271R469d" [label="[IDENTIFIER]", style=solid]
 "271R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  271 -> "271R722d" [label="[\"decltype\"]", style=solid]
 "271R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  271 -> "271R722" [label="[\"auto\"]", style=solid]
 "271R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  272 [label="State 272\n\l224 delete-expression: SCOPE-opt • \"delete\" cast-expression\l225                  | SCOPE-opt • \"delete\" \"[\" \"]\" cast-expression\l477 new-expression: SCOPE-opt • \"new\" new-placement-opt new-type-id new-initializer-opt\l478               | SCOPE-opt • \"new\" new-placement-opt \"(\" type-id \")\" new-initializer-opt\l"]
  272 -> 543 [style=solid label="\"delete\""]
  272 -> 544 [style=solid label="\"new\""]
  273 [label="State 273\n\l 42 additive-expression: additive-expression • \"+\" multiplicative-expression\l 43                    | additive-expression • \"-\" multiplicative-expression\l645 shift-expression: additive-expression •\l"]
  273 -> 545 [style=solid label="\"+\""]
  273 -> 546 [style=solid label="\"-\""]
  273 -> "273R645" [style=solid]
 "273R645" [label="R645", fillcolor=3, shape=diamond, style=filled]
  274 [label="State 274\n\l 48 and-expression: and-expression • \"&\" equality-expression\l264 exclusive-or-expression: and-expression •\l"]
  274 -> 547 [style=solid label="\"&\""]
  274 -> "274R264" [style=solid]
 "274R264" [label="R264", fillcolor=3, shape=diamond, style=filled]
  275 [label="State 275\n\l279 expression: assignment-expression •\l"]
  275 -> "275R279" [style=solid]
 "275R279" [label="R279", fillcolor=3, shape=diamond, style=filled]
  276 [label="State 276\n\l752 unary-expression: await-expression •\l"]
  276 -> "276R752" [style=solid]
 "276R752" [label="R752", fillcolor=3, shape=diamond, style=filled]
  277 [label="State 277\n\l400 literal: boolean-literal •\l"]
  277 -> "277R400" [style=solid]
 "277R400" [label="R400", fillcolor=3, shape=diamond, style=filled]
  278 [label="State 278\n\l567 pm-expression: cast-expression •\l"]
  278 -> "278R567" [style=solid]
 "278R567" [label="R567", fillcolor=3, shape=diamond, style=filled]
  279 [label="State 279\n\l397 literal: character-literal •\l"]
  279 -> "279R397" [style=solid]
 "279R397" [label="R397", fillcolor=3, shape=diamond, style=filled]
  280 [label="State 280\n\l149 compare-expression: compare-expression • \"<=>\" shift-expression\l618 relational-expression: compare-expression •\l"]
  280 -> 548 [style=solid label="\"<=>\""]
  280 -> "280R618" [style=solid]
 "280R618" [label="R618", fillcolor=3, shape=diamond, style=filled]
  281 [label="State 281\n\l 50 assignment-expression: conditional-expression •\l"]
  281 -> "281R50" [style=solid]
 "281R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  282 [label="State 282\n\l769 unqualified-id: conversion-function-id •\l"]
  282 -> "282R769" [style=solid]
 "282R769" [label="R769", fillcolor=3, shape=diamond, style=filled]
  283 [label="State 283\n\l759 unary-expression: delete-expression •\l"]
  283 -> "283R759" [style=solid]
 "283R759" [label="R759", fillcolor=3, shape=diamond, style=filled]
  284 [label="State 284\n\l 47 and-expression: equality-expression •\l259 equality-expression: equality-expression • \"==\" relational-expression\l260                    | equality-expression • \"!=\" relational-expression\l"]
  284 -> 549 [style=solid label="\"==\""]
  284 -> 550 [style=solid label="\"!=\""]
  284 -> "284R47" [style=solid]
 "284R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  285 [label="State 285\n\l265 exclusive-or-expression: exclusive-or-expression • \"^\" and-expression\l347 inclusive-or-expression: exclusive-or-expression •\l"]
  285 -> 551 [style=solid label="\"^\""]
  285 -> "285R347" [style=solid]
 "285R347" [label="R347", fillcolor=3, shape=diamond, style=filled]
  286 [label="State 286\n\l216 decltype-specifier: \"decltype\" \"(\" expression • \")\"\l280 expression: expression • \",\" assignment-expression\l"]
  286 -> 552 [style=solid label="\",\""]
  286 -> 553 [style=solid label="\")\""]
  287 [label="State 287\n\l398 literal: floating-point-literal •\l"]
  287 -> "287R398" [style=solid]
 "287R398" [label="R398", fillcolor=3, shape=diamond, style=filled]
  288 [label="State 288\n\l594 primary-expression: fold-expression •\l"]
  288 -> "288R594" [style=solid]
 "288R594" [label="R594", fillcolor=3, shape=diamond, style=filled]
  289 [label="State 289\n\l592 primary-expression: id-expression •\l"]
  289 -> "289R592" [style=solid]
 "289R592" [label="R592", fillcolor=3, shape=diamond, style=filled]
  290 [label="State 290\n\l348 inclusive-or-expression: inclusive-or-expression • \"|\" exclusive-or-expression\l405 logical-and-expression: inclusive-or-expression •\l"]
  290 -> 554 [style=solid label="\"|\""]
  290 -> "290R405" [style=solid]
 "290R405" [label="R405", fillcolor=3, shape=diamond, style=filled]
  291 [label="State 291\n\l396 literal: integer-literal •\l"]
  291 -> "291R396" [style=solid]
 "291R396" [label="R396", fillcolor=3, shape=diamond, style=filled]
  292 [label="State 292\n\l593 primary-expression: lambda-expression •\l"]
  292 -> "292R593" [style=solid]
 "292R593" [label="R593", fillcolor=3, shape=diamond, style=filled]
  293 [label="State 293\n\l390 lambda-expression: lambda-introducer • lambda-declarator compound-statement\l391                  | lambda-introducer • \"<\" template-parameter-list \">\" requires-clause-opt lambda-declarator compound-statement\l"]
  293 -> 1 [style=solid label="\"constexpr\""]
  293 -> 150 [style=solid label="\"extern\""]
  293 -> 4 [style=solid label="IDENTIFIER"]
  293 -> 151 [style=solid label="\"inline\""]
  293 -> 6 [style=solid label="\"::\""]
  293 -> 8 [style=solid label="\"typename\""]
  293 -> 9 [style=solid label="\"virtual\""]
  293 -> 555 [style=solid label="\"(\""]
  293 -> 12 [style=solid label="\"class\""]
  293 -> 13 [style=solid label="\"struct\""]
  293 -> 14 [style=solid label="\"union\""]
  293 -> 15 [style=solid label="\"const\""]
  293 -> 16 [style=solid label="\"volatile\""]
  293 -> 17 [style=solid label="\"friend\""]
  293 -> 18 [style=solid label="\"typedef\""]
  293 -> 19 [style=solid label="\"consteval\""]
  293 -> 20 [style=solid label="\"constinit\""]
  293 -> 21 [style=solid label="\"decltype\""]
  293 -> 22 [style=solid label="\"enum\""]
  293 -> 556 [style=solid label="\"<\""]
  293 -> 23 [style=solid label="\"explicit\""]
  293 -> 27 [style=solid label="\"char\""]
  293 -> 28 [style=solid label="\"char8_t\""]
  293 -> 29 [style=solid label="\"char16_t\""]
  293 -> 30 [style=solid label="\"char32_t\""]
  293 -> 31 [style=solid label="\"wchar_t\""]
  293 -> 32 [style=solid label="\"bool\""]
  293 -> 33 [style=solid label="\"short\""]
  293 -> 34 [style=solid label="\"int\""]
  293 -> 35 [style=solid label="\"long\""]
  293 -> 36 [style=solid label="\"signed\""]
  293 -> 37 [style=solid label="\"unsigned\""]
  293 -> 38 [style=solid label="\"float\""]
  293 -> 39 [style=solid label="\"double\""]
  293 -> 40 [style=solid label="\"void\""]
  293 -> 42 [style=solid label="\"static\""]
  293 -> 43 [style=solid label="\"thread_local\""]
  293 -> 44 [style=solid label="\"mutable\""]
  293 -> 53 [style=dashed label="class-head"]
  293 -> 54 [style=dashed label="class-key"]
  293 -> 55 [style=dashed label="class-name"]
  293 -> 56 [style=dashed label="class-specifier"]
  293 -> 57 [style=dashed label="cv-qualifier"]
  293 -> 58 [style=dashed label="decl-specifier"]
  293 -> 557 [style=dashed label="decl-specifier-seq"]
  293 -> 558 [style=dashed label="decl-specifier-seq-opt"]
  293 -> 63 [style=dashed label="decltype-specifier"]
  293 -> 65 [style=dashed label="defining-type-specifier"]
  293 -> 66 [style=dashed label="elaborated-enum-specifier"]
  293 -> 67 [style=dashed label="elaborated-type-specifier"]
  293 -> 69 [style=dashed label="enum-head"]
  293 -> 154 [style=dashed label="enum-key"]
  293 -> 71 [style=dashed label="enum-name"]
  293 -> 72 [style=dashed label="enum-specifier"]
  293 -> 155 [style=dashed label="explicit-specifier"]
  293 -> 79 [style=dashed label="function-specifier"]
  293 -> 559 [style=dashed label="lambda-declarator"]
  293 -> 560 [style=dashed label="lambda-specifiers"]
  293 -> 85 [style=dashed label="namespace-alias"]
  293 -> 88 [style=dashed label="namespace-name"]
  293 -> 89 [style=dashed label="nested-name-specifier"]
  293 -> 90 [style=dashed label="nested-name-specifier-opt"]
  293 -> 94 [style=dashed label="placeholder-type-specifier"]
  293 -> 96 [style=dashed label="simple-template-id"]
  293 -> 97 [style=dashed label="simple-type-specifier"]
  293 -> 99 [style=dashed label="storage-class-specifier"]
  293 -> 102 [style=dashed label="template-name"]
  293 -> 104 [style=dashed label="type-constraint"]
  293 -> 105 [style=dashed label="type-constraint-opt"]
  293 -> 106 [style=dashed label="type-name"]
  293 -> 107 [style=dashed label="type-specifier"]
  293 -> 108 [style=dashed label="typedef-name"]
  293 -> 109 [style=dashed label="typename-specifier"]
  293 -> "293R193" [style=solid]
 "293R193" [label="R193", fillcolor=3, shape=diamond, style=filled]
  293 -> "293R469d" [label="[IDENTIFIER]", style=solid]
 "293R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  293 -> "293R722d" [label="[\"decltype\"]", style=solid]
 "293R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  293 -> "293R722" [label="[\"auto\"]", style=solid]
 "293R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  294 [label="State 294\n\l588 primary-expression: literal •\l"]
  294 -> "294R588" [style=solid]
 "294R588" [label="R588", fillcolor=3, shape=diamond, style=filled]
  295 [label="State 295\n\l707 template-id: literal-operator-id • \"<\" template-argument-list-opt \">\"\l770 unqualified-id: literal-operator-id •\l"]
  295 -> 561 [style=solid label="\"<\""]
  295 -> "295R770d" [label="[\"<\"]", style=solid]
 "295R770d" [label="R770", fillcolor=5, shape=diamond, style=filled]
  295 -> "295R770" [style=solid]
 "295R770" [label="R770", fillcolor=3, shape=diamond, style=filled]
  296 [label="State 296\n\l406 logical-and-expression: logical-and-expression • \"&&\" inclusive-or-expression\l407 logical-or-expression: logical-and-expression •\l"]
  296 -> 562 [style=solid label="\"&&\""]
  296 -> "296R407" [style=solid]
 "296R407" [label="R407", fillcolor=3, shape=diamond, style=filled]
  297 [label="State 297\n\l 53 assignment-expression: logical-or-expression • assignment-operator initializer-clause\l158 conditional-expression: logical-or-expression •\l159                       | logical-or-expression • \"?\" expression \":\" assignment-expression\l408 logical-or-expression: logical-or-expression • \"||\" logical-and-expression\l"]
  297 -> 563 [style=solid label="\"=\""]
  297 -> 564 [style=solid label="\"*=\""]
  297 -> 565 [style=solid label="\"/=\""]
  297 -> 566 [style=solid label="\"%=\""]
  297 -> 567 [style=solid label="\"+=\""]
  297 -> 568 [style=solid label="\"-=\""]
  297 -> 569 [style=solid label="\">>=\""]
  297 -> 570 [style=solid label="\"<<=\""]
  297 -> 571 [style=solid label="\"&=\""]
  297 -> 572 [style=solid label="\"^=\""]
  297 -> 573 [style=solid label="\"|=\""]
  297 -> 574 [style=solid label="\"?\""]
  297 -> 575 [style=solid label="\"||\""]
  297 -> 576 [style=dashed label="assignment-operator"]
  297 -> "297R158d" [label="[\"=\"]", style=solid]
 "297R158d" [label="R158", fillcolor=5, shape=diamond, style=filled]
  297 -> "297R158" [style=solid]
 "297R158" [label="R158", fillcolor=3, shape=diamond, style=filled]
  298 [label="State 298\n\l 41 additive-expression: multiplicative-expression •\l451 multiplicative-expression: multiplicative-expression • \"*\" pm-expression\l452                          | multiplicative-expression • \"/\" pm-expression\l453                          | multiplicative-expression • \"%\" pm-expression\l"]
  298 -> 577 [style=solid label="\"*\""]
  298 -> 578 [style=solid label="\"/\""]
  298 -> 579 [style=solid label="\"%\""]
  298 -> "298R41" [style=solid]
 "298R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  299 [label="State 299\n\l467 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l468                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l470 nested-name-specifier-opt: nested-name-specifier •\l612 qualified-id: nested-name-specifier • TEMPLATE-opt unqualified-id\l658 simple-type-specifier: nested-name-specifier • \"template\" simple-template-id\l"]
  299 -> 198 [style=solid label="IDENTIFIER"]
  299 -> 199 [style=solid label="\"template\""]
  299 -> 580 [style=dashed label="TEMPLATE-opt"]
  299 -> "299R21d" [label="[IDENTIFIER]", style=solid]
 "299R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  299 -> "299R21" [style=solid]
 "299R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  299 -> "299R470d" [label="[IDENTIFIER]", style=solid]
 "299R470d" [label="R470", fillcolor=5, shape=diamond, style=filled]
  300 [label="State 300\n\l758 unary-expression: new-expression •\l"]
  300 -> "300R758" [style=solid]
 "300R758" [label="R758", fillcolor=3, shape=diamond, style=filled]
  301 [label="State 301\n\l757 unary-expression: noexcept-expression •\l"]
  301 -> "301R757" [style=solid]
 "301R757" [label="R757", fillcolor=3, shape=diamond, style=filled]
  302 [label="State 302\n\l706 template-id: operator-function-id • \"<\" template-argument-list-opt \">\"\l768 unqualified-id: operator-function-id •\l"]
  302 -> 581 [style=solid label="\"<\""]
  302 -> "302R768d" [label="[\"<\"]", style=solid]
 "302R768d" [label="R768", fillcolor=5, shape=diamond, style=filled]
  302 -> "302R768" [style=solid]
 "302R768" [label="R768", fillcolor=3, shape=diamond, style=filled]
  303 [label="State 303\n\l450 multiplicative-expression: pm-expression •\l568 pm-expression: pm-expression • \".*\" cast-expression\l569              | pm-expression • \"->*\" cast-expression\l"]
  303 -> 582 [style=solid label="\".*\""]
  303 -> 583 [style=solid label="\"->*\""]
  303 -> "303R450" [style=solid]
 "303R450" [label="R450", fillcolor=3, shape=diamond, style=filled]
  304 [label="State 304\n\l401 literal: pointer-literal •\l"]
  304 -> "304R401" [style=solid]
 "304R401" [label="R401", fillcolor=3, shape=diamond, style=filled]
  305 [label="State 305\n\l572 postfix-expression: postfix-expression • \"[\" expression-list-opt \"]\"\l573                   | postfix-expression • \"(\" expression-list-opt \")\"\l578                   | postfix-expression • \".\" TEMPLATE-opt id-expression\l579                   | postfix-expression • \"->\" TEMPLATE-opt id-expression\l580                   | postfix-expression • \"++\"\l581                   | postfix-expression • \"--\"\l748 unary-expression: postfix-expression •\l"]
  305 -> 584 [style=solid label="\"(\""]
  305 -> 585 [style=solid label="\"[\""]
  305 -> 586 [style=solid label="\"->\""]
  305 -> 587 [style=solid label="\".\""]
  305 -> 588 [style=solid label="\"++\""]
  305 -> 589 [style=solid label="\"--\""]
  305 -> "305R748" [style=solid]
 "305R748" [label="R748", fillcolor=3, shape=diamond, style=filled]
  306 [label="State 306\n\l571 postfix-expression: primary-expression •\l"]
  306 -> "306R571" [style=solid]
 "306R571" [label="R571", fillcolor=3, shape=diamond, style=filled]
  307 [label="State 307\n\l344 id-expression: qualified-id •\l"]
  307 -> "307R344" [style=solid]
 "307R344" [label="R344", fillcolor=3, shape=diamond, style=filled]
  308 [label="State 308\n\l258 equality-expression: relational-expression •\l619 relational-expression: relational-expression • \"<\" compare-expression\l620                      | relational-expression • \">\" compare-expression\l621                      | relational-expression • \"<=\" compare-expression\l622                      | relational-expression • \">=\" compare-expression\l"]
  308 -> 590 [style=solid label="\"<\""]
  308 -> 591 [style=solid label="\">\""]
  308 -> 592 [style=solid label="\"<=\""]
  308 -> 593 [style=solid label="\">=\""]
  308 -> "308R258d" [label="[\">\"]", style=solid]
 "308R258d" [label="R258", fillcolor=5, shape=diamond, style=filled]
  308 -> "308R258" [style=solid]
 "308R258" [label="R258", fillcolor=3, shape=diamond, style=filled]
  309 [label="State 309\n\l595 primary-expression: requires-expression •\l"]
  309 -> "309R595" [style=solid]
 "309R595" [label="R595", fillcolor=3, shape=diamond, style=filled]
  310 [label="State 310\n\l148 compare-expression: shift-expression •\l646 shift-expression: shift-expression • \"<<\" additive-expression\l647                 | shift-expression • \">>\" additive-expression\l"]
  310 -> 594 [style=solid label="\"<<\""]
  310 -> 595 [style=solid label="\">>\""]
  310 -> "310R148" [style=solid]
 "310R148" [label="R148", fillcolor=3, shape=diamond, style=filled]
  311 [label="State 311\n\l140 class-name: simple-template-id •\l705 template-id: simple-template-id •\l744 typedef-name: simple-template-id •\l"]
  311 -> "311R140" [label="[\"::\"]", style=solid]
 "311R140" [label="R140", fillcolor=3, shape=diamond, style=filled]
  311 -> "311R705d" [label="[\"::\"]", style=solid]
 "311R705d" [label="R705", fillcolor=5, shape=diamond, style=filled]
  311 -> "311R705" [style=solid]
 "311R705" [label="R705", fillcolor=3, shape=diamond, style=filled]
  311 -> "311R744d" [label="[\"::\"]", style=solid]
 "311R744d" [label="R744", fillcolor=5, shape=diamond, style=filled]
  312 [label="State 312\n\l574 postfix-expression: simple-type-specifier • \"(\" expression-list-opt \")\"\l576                   | simple-type-specifier • braced-init-list\l"]
  312 -> 596 [style=solid label="\"(\""]
  312 -> 398 [style=solid label="\"{\""]
  312 -> 597 [style=dashed label="braced-init-list"]
  313 [label="State 313\n\l399 literal: string-literal •\l589 primary-expression: string-literal •\l781 user-defined-string-literal: string-literal • ud-suffix\l"]
  313 -> 598 [style=solid label="IDENTIFIER"]
  313 -> 599 [style=dashed label="ud-suffix"]
  313 -> "313R399d" [label="[IDENTIFIER]", style=solid]
 "313R399d" [label="R399", fillcolor=5, shape=diamond, style=filled]
  313 -> "313R399" [style=solid]
 "313R399" [label="R399", fillcolor=3, shape=diamond, style=filled]
  313 -> "313R589d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "313R589d" [label="R589", fillcolor=5, shape=diamond, style=filled]
  314 [label="State 314\n\l773 unqualified-id: template-id •\l"]
  314 -> "314R773" [style=solid]
 "314R773" [label="R773", fillcolor=3, shape=diamond, style=filled]
  315 [label="State 315\n\l 52 assignment-expression: throw-expression •\l"]
  315 -> "315R52" [style=solid]
 "315R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  316 [label="State 316\n\l575 postfix-expression: typename-specifier • \"(\" expression-list-opt \")\"\l577                   | typename-specifier • braced-init-list\l"]
  316 -> 600 [style=solid label="\"(\""]
  316 -> 398 [style=solid label="\"{\""]
  316 -> 601 [style=dashed label="braced-init-list"]
  317 [label="State 317\n\l130 cast-expression: unary-expression •\l"]
  317 -> "317R130" [style=solid]
 "317R130" [label="R130", fillcolor=3, shape=diamond, style=filled]
  318 [label="State 318\n\l749 unary-expression: unary-operator • cast-expression\l"]
  318 -> 238 [style=solid label="IDENTIFIER"]
  318 -> 239 [style=solid label="\"noexcept\""]
  318 -> 240 [style=solid label="\"!\""]
  318 -> 241 [style=solid label="\"::\""]
  318 -> 242 [style=solid label="\"this\""]
  318 -> 8 [style=solid label="\"typename\""]
  318 -> 243 [style=solid label="\"+\""]
  318 -> 244 [style=solid label="\"-\""]
  318 -> 245 [style=solid label="\"(\""]
  318 -> 246 [style=solid label="\"&\""]
  318 -> 247 [style=solid label="\"[\""]
  318 -> 248 [style=solid label="\"co_await\""]
  318 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  318 -> 250 [style=solid label="CHARACTER_LITERAL"]
  318 -> 251 [style=solid label="\"operator\""]
  318 -> 21 [style=solid label="\"decltype\""]
  318 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  318 -> 253 [style=solid label="\"*\""]
  318 -> 254 [style=solid label="INTEGER_LITERAL"]
  318 -> 255 [style=solid label="\"requires\""]
  318 -> 256 [style=solid label="\"~\""]
  318 -> 257 [style=solid label="\"++\""]
  318 -> 258 [style=solid label="\"--\""]
  318 -> 259 [style=solid label="POINTER_LITERAL"]
  318 -> 260 [style=solid label="\"dynamic_cast\""]
  318 -> 261 [style=solid label="\"static_cast\""]
  318 -> 262 [style=solid label="\"reinterpret_cast\""]
  318 -> 263 [style=solid label="\"const_cast\""]
  318 -> 264 [style=solid label="\"typeid\""]
  318 -> 27 [style=solid label="\"char\""]
  318 -> 28 [style=solid label="\"char8_t\""]
  318 -> 29 [style=solid label="\"char16_t\""]
  318 -> 30 [style=solid label="\"char32_t\""]
  318 -> 31 [style=solid label="\"wchar_t\""]
  318 -> 32 [style=solid label="\"bool\""]
  318 -> 33 [style=solid label="\"short\""]
  318 -> 34 [style=solid label="\"int\""]
  318 -> 35 [style=solid label="\"long\""]
  318 -> 36 [style=solid label="\"signed\""]
  318 -> 37 [style=solid label="\"unsigned\""]
  318 -> 38 [style=solid label="\"float\""]
  318 -> 39 [style=solid label="\"double\""]
  318 -> 40 [style=solid label="\"void\""]
  318 -> 118 [style=solid label="STRING_LITERAL"]
  318 -> 266 [style=solid label="\"sizeof\""]
  318 -> 267 [style=solid label="\"alignof\""]
  318 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  318 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  318 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  318 -> 272 [style=dashed label="SCOPE-opt"]
  318 -> 276 [style=dashed label="await-expression"]
  318 -> 277 [style=dashed label="boolean-literal"]
  318 -> 602 [style=dashed label="cast-expression"]
  318 -> 279 [style=dashed label="character-literal"]
  318 -> 55 [style=dashed label="class-name"]
  318 -> 282 [style=dashed label="conversion-function-id"]
  318 -> 63 [style=dashed label="decltype-specifier"]
  318 -> 283 [style=dashed label="delete-expression"]
  318 -> 71 [style=dashed label="enum-name"]
  318 -> 287 [style=dashed label="floating-point-literal"]
  318 -> 288 [style=dashed label="fold-expression"]
  318 -> 289 [style=dashed label="id-expression"]
  318 -> 291 [style=dashed label="integer-literal"]
  318 -> 292 [style=dashed label="lambda-expression"]
  318 -> 293 [style=dashed label="lambda-introducer"]
  318 -> 294 [style=dashed label="literal"]
  318 -> 295 [style=dashed label="literal-operator-id"]
  318 -> 85 [style=dashed label="namespace-alias"]
  318 -> 88 [style=dashed label="namespace-name"]
  318 -> 299 [style=dashed label="nested-name-specifier"]
  318 -> 90 [style=dashed label="nested-name-specifier-opt"]
  318 -> 300 [style=dashed label="new-expression"]
  318 -> 301 [style=dashed label="noexcept-expression"]
  318 -> 302 [style=dashed label="operator-function-id"]
  318 -> 94 [style=dashed label="placeholder-type-specifier"]
  318 -> 304 [style=dashed label="pointer-literal"]
  318 -> 305 [style=dashed label="postfix-expression"]
  318 -> 306 [style=dashed label="primary-expression"]
  318 -> 307 [style=dashed label="qualified-id"]
  318 -> 309 [style=dashed label="requires-expression"]
  318 -> 311 [style=dashed label="simple-template-id"]
  318 -> 312 [style=dashed label="simple-type-specifier"]
  318 -> 313 [style=dashed label="string-literal"]
  318 -> 314 [style=dashed label="template-id"]
  318 -> 102 [style=dashed label="template-name"]
  318 -> 104 [style=dashed label="type-constraint"]
  318 -> 105 [style=dashed label="type-constraint-opt"]
  318 -> 106 [style=dashed label="type-name"]
  318 -> 108 [style=dashed label="typedef-name"]
  318 -> 316 [style=dashed label="typename-specifier"]
  318 -> 317 [style=dashed label="unary-expression"]
  318 -> 318 [style=dashed label="unary-operator"]
  318 -> 319 [style=dashed label="unqualified-id"]
  318 -> 320 [style=dashed label="user-defined-character-literal"]
  318 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  318 -> 322 [style=dashed label="user-defined-integer-literal"]
  318 -> 323 [style=dashed label="user-defined-literal"]
  318 -> 324 [style=dashed label="user-defined-string-literal"]
  318 -> "318R19" [style=solid]
 "318R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  318 -> "318R469d" [label="[IDENTIFIER]", style=solid]
 "318R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  318 -> "318R722d" [label="[\"decltype\"]", style=solid]
 "318R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  318 -> "318R722" [label="[\"auto\"]", style=solid]
 "318R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  319 [label="State 319\n\l343 id-expression: unqualified-id •\l"]
  319 -> "319R343" [style=solid]
 "319R343" [label="R343", fillcolor=3, shape=diamond, style=filled]
  320 [label="State 320\n\l780 user-defined-literal: user-defined-character-literal •\l"]
  320 -> "320R780" [style=solid]
 "320R780" [label="R780", fillcolor=3, shape=diamond, style=filled]
  321 [label="State 321\n\l778 user-defined-literal: user-defined-floating-point-literal •\l"]
  321 -> "321R778" [style=solid]
 "321R778" [label="R778", fillcolor=3, shape=diamond, style=filled]
  322 [label="State 322\n\l777 user-defined-literal: user-defined-integer-literal •\l"]
  322 -> "322R777" [style=solid]
 "322R777" [label="R777", fillcolor=3, shape=diamond, style=filled]
  323 [label="State 323\n\l402 literal: user-defined-literal •\l"]
  323 -> "323R402" [style=solid]
 "323R402" [label="R402", fillcolor=3, shape=diamond, style=filled]
  324 [label="State 324\n\l779 user-defined-literal: user-defined-string-literal •\l"]
  324 -> "324R779" [style=solid]
 "324R779" [label="R779", fillcolor=3, shape=diamond, style=filled]
  325 [label="State 325\n\l 51 assignment-expression: yield-expression •\l"]
  325 -> "325R51" [style=solid]
 "325R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  326 [label="State 326\n\l230 elaborated-enum-specifier: \"enum\" nested-name-specifier-opt IDENTIFIER •\l"]
  326 -> "326R230" [style=solid]
 "326R230" [label="R230", fillcolor=3, shape=diamond, style=filled]
  327 [label="State 327\n\l160 constant-expression: conditional-expression •\l"]
  327 -> "327R160" [style=solid]
 "327R160" [label="R160", fillcolor=3, shape=diamond, style=filled]
  328 [label="State 328\n\l268 explicit-specifier: \"explicit\" \"(\" constant-expression • \")\"\l"]
  328 -> 603 [style=solid label="\")\""]
  329 [label="State 329\n\l158 conditional-expression: logical-or-expression •\l159                       | logical-or-expression • \"?\" expression \":\" assignment-expression\l408 logical-or-expression: logical-or-expression • \"||\" logical-and-expression\l"]
  329 -> 574 [style=solid label="\"?\""]
  329 -> 575 [style=solid label="\"||\""]
  329 -> "329R158" [style=solid]
 "329R158" [label="R158", fillcolor=3, shape=diamond, style=filled]
  330 [label="State 330\n\l335 global-module-fragment: \"module\" \";\" declaration-seq-opt •\l"]
  330 -> "330R335" [style=solid]
 "330R335" [label="R335", fillcolor=3, shape=diamond, style=filled]
  331 [label="State 331\n\l443 module-name-qualifier: IDENTIFIER \".\" •\l"]
  331 -> "331R443" [style=solid]
 "331R443" [label="R443", fillcolor=3, shape=diamond, style=filled]
  332 [label="State 332\n\l447 module-partition: \":\" module-name-qualifier-opt • IDENTIFIER\l"]
  332 -> 604 [style=solid label="IDENTIFIER"]
  333 [label="State 333\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l441 module-import-declaration: \"import\" header-name attribute-specifier-seq-opt • \";\"\l"]
  333 -> 605 [style=solid label="\";\""]
  333 -> 158 [style=solid label="\"alignas\""]
  333 -> 162 [style=solid label="\"[\""]
  333 -> 166 [style=dashed label="alignment-specifier"]
  333 -> 167 [style=dashed label="attribute-specifier"]
  334 [label="State 334\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l439 module-import-declaration: \"import\" module-name attribute-specifier-seq-opt • \";\"\l"]
  334 -> 606 [style=solid label="\";\""]
  334 -> 158 [style=solid label="\"alignas\""]
  334 -> 162 [style=solid label="\"[\""]
  334 -> 166 [style=dashed label="alignment-specifier"]
  334 -> 167 [style=dashed label="attribute-specifier"]
  335 [label="State 335\n\l444 module-name-qualifier: module-name-qualifier IDENTIFIER • \".\"\l"]
  335 -> 607 [style=solid label="\".\""]
  336 [label="State 336\n\l442 module-name: module-name-qualifier-opt IDENTIFIER •\l"]
  336 -> "336R442" [style=solid]
 "336R442" [label="R442", fillcolor=3, shape=diamond, style=filled]
  337 [label="State 337\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l440 module-import-declaration: \"import\" module-partition attribute-specifier-seq-opt • \";\"\l"]
  337 -> 608 [style=solid label="\";\""]
  337 -> 158 [style=solid label="\"alignas\""]
  337 -> 162 [style=solid label="\"[\""]
  337 -> 166 [style=dashed label="alignment-specifier"]
  337 -> 167 [style=dashed label="attribute-specifier"]
  338 [label="State 338\n\l456 namespace-alias-definition: \"namespace\" IDENTIFIER \"=\" • qualified-namespace-specifier \";\"\l"]
  338 -> 4 [style=solid label="IDENTIFIER"]
  338 -> 6 [style=solid label="\"::\""]
  338 -> 21 [style=solid label="\"decltype\""]
  338 -> 55 [style=dashed label="class-name"]
  338 -> 121 [style=dashed label="decltype-specifier"]
  338 -> 71 [style=dashed label="enum-name"]
  338 -> 85 [style=dashed label="namespace-alias"]
  338 -> 88 [style=dashed label="namespace-name"]
  338 -> 133 [style=dashed label="nested-name-specifier"]
  338 -> 609 [style=dashed label="nested-name-specifier-opt"]
  338 -> 610 [style=dashed label="qualified-namespace-specifier"]
  338 -> 96 [style=dashed label="simple-template-id"]
  338 -> 102 [style=dashed label="template-name"]
  338 -> 106 [style=dashed label="type-name"]
  338 -> 108 [style=dashed label="typedef-name"]
  338 -> "338R469d" [label="[IDENTIFIER]", style=solid]
 "338R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  339 [label="State 339\n\l237 enclosing-namespace-specifier: enclosing-namespace-specifier \"::\" • INLINE-opt IDENTIFIER\l471 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" • INLINE-opt IDENTIFIER \"{\" namespace-body \"}\"\l"]
  339 -> 611 [style=solid label="\"inline\""]
  339 -> 612 [style=dashed label="INLINE-opt"]
  339 -> "339R13" [style=solid]
 "339R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  340 [label="State 340\n\l688 static_assert-declaration: \"static_assert\" \"(\" constant-expression • \")\" \";\"\l689                          | \"static_assert\" \"(\" constant-expression • \",\" string-literal \")\" \";\"\l"]
  340 -> 613 [style=solid label="\",\""]
  340 -> 614 [style=solid label="\")\""]
  341 [label="State 341\n\l266 explicit-instantiation: EXTERN-opt \"template\" declaration •\l"]
  341 -> "341R266" [style=solid]
 "341R266" [label="R266", fillcolor=3, shape=diamond, style=filled]
  342 [label="State 342\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l454 named-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt • IDENTIFIER \"{\" namespace-body \"}\"\l766 unnamed-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt • \"{\" namespace-body \"}\"\l"]
  342 -> 615 [style=solid label="IDENTIFIER"]
  342 -> 158 [style=solid label="\"alignas\""]
  342 -> 162 [style=solid label="\"[\""]
  342 -> 616 [style=solid label="\"{\""]
  342 -> 166 [style=dashed label="alignment-specifier"]
  342 -> 167 [style=dashed label="attribute-specifier"]
  343 [label="State 343\n\l354 init-declarator-list: init-declarator-list • \",\" init-declarator\l653 simple-declaration: attribute-specifier-seq decl-specifier-seq init-declarator-list • \";\"\l"]
  343 -> 405 [style=solid label="\",\""]
  343 -> 617 [style=solid label="\";\""]
  344 [label="State 344\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l241 enum-head: enum-key attribute-specifier-seq-opt • enum-head-name-opt enum-base-opt\l"]
  344 -> 4 [style=solid label="IDENTIFIER"]
  344 -> 6 [style=solid label="\"::\""]
  344 -> 158 [style=solid label="\"alignas\""]
  344 -> 162 [style=solid label="\"[\""]
  344 -> 21 [style=solid label="\"decltype\""]
  344 -> 166 [style=dashed label="alignment-specifier"]
  344 -> 167 [style=dashed label="attribute-specifier"]
  344 -> 55 [style=dashed label="class-name"]
  344 -> 121 [style=dashed label="decltype-specifier"]
  344 -> 618 [style=dashed label="enum-head-name"]
  344 -> 413 [style=dashed label="enum-head-name-opt"]
  344 -> 71 [style=dashed label="enum-name"]
  344 -> 85 [style=dashed label="namespace-alias"]
  344 -> 88 [style=dashed label="namespace-name"]
  344 -> 133 [style=dashed label="nested-name-specifier"]
  344 -> 414 [style=dashed label="nested-name-specifier-opt"]
  344 -> 96 [style=dashed label="simple-template-id"]
  344 -> 102 [style=dashed label="template-name"]
  344 -> 106 [style=dashed label="type-name"]
  344 -> 108 [style=dashed label="typedef-name"]
  344 -> "344R243" [style=solid]
 "344R243" [label="R243", fillcolor=3, shape=diamond, style=filled]
  344 -> "344R469d" [label="[IDENTIFIER]", style=solid]
 "344R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  345 [label="State 345\n\l786 using-directive: attribute-specifier-seq-opt \"using\" \"namespace\" • nested-name-specifier-opt namespace-name \";\"\l"]
  345 -> 4 [style=solid label="IDENTIFIER"]
  345 -> 6 [style=solid label="\"::\""]
  345 -> 21 [style=solid label="\"decltype\""]
  345 -> 55 [style=dashed label="class-name"]
  345 -> 121 [style=dashed label="decltype-specifier"]
  345 -> 71 [style=dashed label="enum-name"]
  345 -> 85 [style=dashed label="namespace-alias"]
  345 -> 88 [style=dashed label="namespace-name"]
  345 -> 133 [style=dashed label="nested-name-specifier"]
  345 -> 619 [style=dashed label="nested-name-specifier-opt"]
  345 -> 96 [style=dashed label="simple-template-id"]
  345 -> 102 [style=dashed label="template-name"]
  345 -> 106 [style=dashed label="type-name"]
  345 -> 108 [style=dashed label="typedef-name"]
  345 -> "345R469d" [label="[IDENTIFIER]", style=solid]
 "345R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  346 [label="State 346\n\l 45 alignment-specifier: \"alignas\" \"(\" • type-id ELLIPSIS-opt \")\"\l 46                    | \"alignas\" \"(\" • constant-expression ELLIPSIS-opt \")\"\l"]
  346 -> 238 [style=solid label="IDENTIFIER"]
  346 -> 239 [style=solid label="\"noexcept\""]
  346 -> 240 [style=solid label="\"!\""]
  346 -> 241 [style=solid label="\"::\""]
  346 -> 242 [style=solid label="\"this\""]
  346 -> 8 [style=solid label="\"typename\""]
  346 -> 243 [style=solid label="\"+\""]
  346 -> 244 [style=solid label="\"-\""]
  346 -> 245 [style=solid label="\"(\""]
  346 -> 246 [style=solid label="\"&\""]
  346 -> 247 [style=solid label="\"[\""]
  346 -> 248 [style=solid label="\"co_await\""]
  346 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  346 -> 250 [style=solid label="CHARACTER_LITERAL"]
  346 -> 12 [style=solid label="\"class\""]
  346 -> 13 [style=solid label="\"struct\""]
  346 -> 14 [style=solid label="\"union\""]
  346 -> 251 [style=solid label="\"operator\""]
  346 -> 15 [style=solid label="\"const\""]
  346 -> 16 [style=solid label="\"volatile\""]
  346 -> 21 [style=solid label="\"decltype\""]
  346 -> 125 [style=solid label="\"enum\""]
  346 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  346 -> 253 [style=solid label="\"*\""]
  346 -> 254 [style=solid label="INTEGER_LITERAL"]
  346 -> 255 [style=solid label="\"requires\""]
  346 -> 256 [style=solid label="\"~\""]
  346 -> 257 [style=solid label="\"++\""]
  346 -> 258 [style=solid label="\"--\""]
  346 -> 259 [style=solid label="POINTER_LITERAL"]
  346 -> 260 [style=solid label="\"dynamic_cast\""]
  346 -> 261 [style=solid label="\"static_cast\""]
  346 -> 262 [style=solid label="\"reinterpret_cast\""]
  346 -> 263 [style=solid label="\"const_cast\""]
  346 -> 264 [style=solid label="\"typeid\""]
  346 -> 27 [style=solid label="\"char\""]
  346 -> 28 [style=solid label="\"char8_t\""]
  346 -> 29 [style=solid label="\"char16_t\""]
  346 -> 30 [style=solid label="\"char32_t\""]
  346 -> 31 [style=solid label="\"wchar_t\""]
  346 -> 32 [style=solid label="\"bool\""]
  346 -> 33 [style=solid label="\"short\""]
  346 -> 34 [style=solid label="\"int\""]
  346 -> 35 [style=solid label="\"long\""]
  346 -> 36 [style=solid label="\"signed\""]
  346 -> 37 [style=solid label="\"unsigned\""]
  346 -> 38 [style=solid label="\"float\""]
  346 -> 39 [style=solid label="\"double\""]
  346 -> 40 [style=solid label="\"void\""]
  346 -> 118 [style=solid label="STRING_LITERAL"]
  346 -> 266 [style=solid label="\"sizeof\""]
  346 -> 267 [style=solid label="\"alignof\""]
  346 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  346 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  346 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  346 -> 272 [style=dashed label="SCOPE-opt"]
  346 -> 273 [style=dashed label="additive-expression"]
  346 -> 274 [style=dashed label="and-expression"]
  346 -> 276 [style=dashed label="await-expression"]
  346 -> 277 [style=dashed label="boolean-literal"]
  346 -> 278 [style=dashed label="cast-expression"]
  346 -> 279 [style=dashed label="character-literal"]
  346 -> 424 [style=dashed label="class-key"]
  346 -> 55 [style=dashed label="class-name"]
  346 -> 280 [style=dashed label="compare-expression"]
  346 -> 327 [style=dashed label="conditional-expression"]
  346 -> 620 [style=dashed label="constant-expression"]
  346 -> 282 [style=dashed label="conversion-function-id"]
  346 -> 57 [style=dashed label="cv-qualifier"]
  346 -> 63 [style=dashed label="decltype-specifier"]
  346 -> 283 [style=dashed label="delete-expression"]
  346 -> 66 [style=dashed label="elaborated-enum-specifier"]
  346 -> 67 [style=dashed label="elaborated-type-specifier"]
  346 -> 71 [style=dashed label="enum-name"]
  346 -> 284 [style=dashed label="equality-expression"]
  346 -> 285 [style=dashed label="exclusive-or-expression"]
  346 -> 287 [style=dashed label="floating-point-literal"]
  346 -> 288 [style=dashed label="fold-expression"]
  346 -> 289 [style=dashed label="id-expression"]
  346 -> 290 [style=dashed label="inclusive-or-expression"]
  346 -> 291 [style=dashed label="integer-literal"]
  346 -> 292 [style=dashed label="lambda-expression"]
  346 -> 293 [style=dashed label="lambda-introducer"]
  346 -> 294 [style=dashed label="literal"]
  346 -> 295 [style=dashed label="literal-operator-id"]
  346 -> 296 [style=dashed label="logical-and-expression"]
  346 -> 329 [style=dashed label="logical-or-expression"]
  346 -> 298 [style=dashed label="multiplicative-expression"]
  346 -> 85 [style=dashed label="namespace-alias"]
  346 -> 88 [style=dashed label="namespace-name"]
  346 -> 299 [style=dashed label="nested-name-specifier"]
  346 -> 90 [style=dashed label="nested-name-specifier-opt"]
  346 -> 300 [style=dashed label="new-expression"]
  346 -> 301 [style=dashed label="noexcept-expression"]
  346 -> 302 [style=dashed label="operator-function-id"]
  346 -> 94 [style=dashed label="placeholder-type-specifier"]
  346 -> 303 [style=dashed label="pm-expression"]
  346 -> 304 [style=dashed label="pointer-literal"]
  346 -> 305 [style=dashed label="postfix-expression"]
  346 -> 306 [style=dashed label="primary-expression"]
  346 -> 307 [style=dashed label="qualified-id"]
  346 -> 308 [style=dashed label="relational-expression"]
  346 -> 309 [style=dashed label="requires-expression"]
  346 -> 310 [style=dashed label="shift-expression"]
  346 -> 311 [style=dashed label="simple-template-id"]
  346 -> 427 [style=dashed label="simple-type-specifier"]
  346 -> 313 [style=dashed label="string-literal"]
  346 -> 314 [style=dashed label="template-id"]
  346 -> 102 [style=dashed label="template-name"]
  346 -> 104 [style=dashed label="type-constraint"]
  346 -> 105 [style=dashed label="type-constraint-opt"]
  346 -> 621 [style=dashed label="type-id"]
  346 -> 106 [style=dashed label="type-name"]
  346 -> 432 [style=dashed label="type-specifier"]
  346 -> 433 [style=dashed label="type-specifier-seq"]
  346 -> 108 [style=dashed label="typedef-name"]
  346 -> 434 [style=dashed label="typename-specifier"]
  346 -> 317 [style=dashed label="unary-expression"]
  346 -> 318 [style=dashed label="unary-operator"]
  346 -> 319 [style=dashed label="unqualified-id"]
  346 -> 320 [style=dashed label="user-defined-character-literal"]
  346 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  346 -> 322 [style=dashed label="user-defined-integer-literal"]
  346 -> 323 [style=dashed label="user-defined-literal"]
  346 -> 324 [style=dashed label="user-defined-string-literal"]
  346 -> "346R19" [style=solid]
 "346R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  346 -> "346R469d" [label="[IDENTIFIER]", style=solid]
 "346R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  346 -> "346R722d" [label="[\"decltype\"]", style=solid]
 "346R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  346 -> "346R722" [label="[\"auto\"]", style=solid]
 "346R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  347 [label="State 347\n\l502 noptr-declarator: noptr-declarator • parameters-and-qualifiers\l503                 | noptr-declarator • \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt\l603 ptr-declarator: noptr-declarator •\l"]
  347 -> 365 [style=solid label="\"(\""]
  347 -> 366 [style=solid label="\"[\""]
  347 -> 622 [style=dashed label="parameters-and-qualifiers"]
  347 -> "347R603d" [label="[\"(\"]", style=solid]
 "347R603d" [label="R603", fillcolor=5, shape=diamond, style=filled]
  347 -> "347R603" [style=solid]
 "347R603" [label="R603", fillcolor=3, shape=diamond, style=filled]
  348 [label="State 348\n\l504 noptr-declarator: \"(\" ptr-declarator • \")\"\l"]
  348 -> 623 [style=solid label="\")\""]
  349 [label="State 349\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l606 ptr-operator: \"&\" attribute-specifier-seq-opt •\l"]
  349 -> 158 [style=solid label="\"alignas\""]
  349 -> 162 [style=solid label="\"[\""]
  349 -> 166 [style=dashed label="alignment-specifier"]
  349 -> 167 [style=dashed label="attribute-specifier"]
  349 -> "349R606d" [label="[\"alignas\", \"[\"]", style=solid]
 "349R606d" [label="R606", fillcolor=5, shape=diamond, style=filled]
  349 -> "349R606" [style=solid]
 "349R606" [label="R606", fillcolor=3, shape=diamond, style=filled]
  350 [label="State 350\n\l 49 asm-declaration: attribute-specifier-seq-opt \"asm\" \"(\" • string-literal \")\" \";\"\l"]
  350 -> 118 [style=solid label="STRING_LITERAL"]
  350 -> 624 [style=dashed label="string-literal"]
  351 [label="State 351\n\l 80 attribute-specifier: \"[\" \"[\" • attribute-using-prefix-opt attribute-list \"]\" \"]\"\l"]
  351 -> 625 [style=solid label="\"using\""]
  351 -> 626 [style=dashed label="attribute-using-prefix"]
  351 -> 627 [style=dashed label="attribute-using-prefix-opt"]
  351 -> "351R88" [style=solid]
 "351R88" [label="R88", fillcolor=3, shape=diamond, style=filled]
  352 [label="State 352\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l607 ptr-operator: \"&&\" attribute-specifier-seq-opt •\l"]
  352 -> 158 [style=solid label="\"alignas\""]
  352 -> 162 [style=solid label="\"[\""]
  352 -> 166 [style=dashed label="alignment-specifier"]
  352 -> 167 [style=dashed label="attribute-specifier"]
  352 -> "352R607d" [label="[\"alignas\", \"[\"]", style=solid]
 "352R607d" [label="R607", fillcolor=5, shape=diamond, style=filled]
  352 -> "352R607" [style=solid]
 "352R607" [label="R607", fillcolor=3, shape=diamond, style=filled]
  353 [label="State 353\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l605 ptr-operator: \"*\" attribute-specifier-seq-opt • cv-qualifier-seq-opt\l"]
  353 -> 158 [style=solid label="\"alignas\""]
  353 -> 162 [style=solid label="\"[\""]
  353 -> 15 [style=solid label="\"const\""]
  353 -> 16 [style=solid label="\"volatile\""]
  353 -> 166 [style=dashed label="alignment-specifier"]
  353 -> 167 [style=dashed label="attribute-specifier"]
  353 -> 628 [style=dashed label="cv-qualifier"]
  353 -> 629 [style=dashed label="cv-qualifier-seq"]
  353 -> 630 [style=dashed label="cv-qualifier-seq-opt"]
  353 -> "353R180d" [label="[\"alignas\", \"[\", \"const\", \"volatile\"]", style=solid]
 "353R180d" [label="R180", fillcolor=5, shape=diamond, style=filled]
  353 -> "353R180" [style=solid]
 "353R180" [label="R180", fillcolor=3, shape=diamond, style=filled]
  354 [label="State 354\n\l771 unqualified-id: \"~\" • type-name\l772               | \"~\" • decltype-specifier\l"]
  354 -> 525 [style=solid label="IDENTIFIER"]
  354 -> 21 [style=solid label="\"decltype\""]
  354 -> 55 [style=dashed label="class-name"]
  354 -> 526 [style=dashed label="decltype-specifier"]
  354 -> 71 [style=dashed label="enum-name"]
  354 -> 96 [style=dashed label="simple-template-id"]
  354 -> 102 [style=dashed label="template-name"]
  354 -> 527 [style=dashed label="type-name"]
  354 -> 108 [style=dashed label="typedef-name"]
  355 [label="State 355\n\l215 declarator-id: ELLIPSIS-opt id-expression •\l"]
  355 -> "355R215" [style=solid]
 "355R215" [label="R215", fillcolor=3, shape=diamond, style=filled]
  356 [label="State 356\n\l467 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l468                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l612 qualified-id: nested-name-specifier • TEMPLATE-opt unqualified-id\l"]
  356 -> 198 [style=solid label="IDENTIFIER"]
  356 -> 230 [style=solid label="\"template\""]
  356 -> 580 [style=dashed label="TEMPLATE-opt"]
  356 -> "356R21d" [label="[IDENTIFIER]", style=solid]
 "356R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  356 -> "356R21" [style=solid]
 "356R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  357 [label="State 357\n\l614 ref-qualifier: \"&\" •\l"]
  357 -> "357R614" [style=solid]
 "357R614" [label="R614", fillcolor=3, shape=diamond, style=filled]
  358 [label="State 358\n\l615 ref-qualifier: \"&&\" •\l"]
  358 -> "358R615" [style=solid]
 "358R615" [label="R615", fillcolor=3, shape=diamond, style=filled]
  359 [label="State 359\n\l617 ref-qualifier-opt: ref-qualifier •\l"]
  359 -> "359R617" [style=solid]
 "359R617" [label="R617", fillcolor=3, shape=diamond, style=filled]
  360 [label="State 360\n\l654 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt • \"[\" identifier-list \"]\" initializer \";\"\l"]
  360 -> 631 [style=solid label="\"[\""]
  361 [label="State 361\n\l330 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator • virt-specifier-seq-opt function-body\l331                    | attribute-specifier-seq-opt decl-specifier-seq-opt declarator • requires-clause function-body\l"]
  361 -> 632 [style=solid label="\"final\""]
  361 -> 399 [style=solid label="\"requires\""]
  361 -> 633 [style=solid label="\"override\""]
  361 -> 634 [style=dashed label="requires-clause"]
  361 -> 635 [style=dashed label="virt-specifier"]
  361 -> 636 [style=dashed label="virt-specifier-seq"]
  361 -> 637 [style=dashed label="virt-specifier-seq-opt"]
  361 -> "361R792" [style=solid]
 "361R792" [label="R792", fillcolor=3, shape=diamond, style=filled]
  362 [label="State 362\n\l487 nodeclspec-function-declaration: attribute-specifier-seq-opt declarator \";\" •\l"]
  362 -> "362R487" [style=solid]
 "362R487" [label="R487", fillcolor=3, shape=diamond, style=filled]
  363 [label="State 363\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l501 noptr-declarator: declarator-id attribute-specifier-seq-opt •\l"]
  363 -> 158 [style=solid label="\"alignas\""]
  363 -> 162 [style=solid label="\"[\""]
  363 -> 166 [style=dashed label="alignment-specifier"]
  363 -> 167 [style=dashed label="attribute-specifier"]
  363 -> "363R501d" [label="[\"[\"]", style=solid]
 "363R501d" [label="R501", fillcolor=5, shape=diamond, style=filled]
  363 -> "363R501" [style=solid]
 "363R501" [label="R501", fillcolor=3, shape=diamond, style=filled]
  364 [label="State 364\n\l608 ptr-operator: nested-name-specifier \"*\" • attribute-specifier-seq-opt cv-qualifier-seq-opt\l"]
  364 -> 177 [style=dashed label="attribute-specifier-seq"]
  364 -> 638 [style=dashed label="attribute-specifier-seq-opt"]
  364 -> "364R83" [style=solid]
 "364R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  365 [label="State 365\n\l564 parameters-and-qualifiers: \"(\" • parameter-declaration-clause \")\" cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt\l"]
  365 -> 177 [style=dashed label="attribute-specifier-seq"]
  365 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  365 -> 639 [style=dashed label="parameter-declaration"]
  365 -> 640 [style=dashed label="parameter-declaration-clause"]
  365 -> 641 [style=dashed label="parameter-declaration-list"]
  365 -> 642 [style=dashed label="parameter-declaration-list-opt"]
  365 -> "365R83" [style=solid]
 "365R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  365 -> "365R562" [label="[\"...\", \")\"]", style=solid]
 "365R562" [label="R562", fillcolor=3, shape=diamond, style=filled]
  366 [label="State 366\n\l503 noptr-declarator: noptr-declarator \"[\" • constant-expression-opt \"]\" attribute-specifier-seq-opt\l"]
  366 -> 238 [style=solid label="IDENTIFIER"]
  366 -> 239 [style=solid label="\"noexcept\""]
  366 -> 240 [style=solid label="\"!\""]
  366 -> 241 [style=solid label="\"::\""]
  366 -> 242 [style=solid label="\"this\""]
  366 -> 8 [style=solid label="\"typename\""]
  366 -> 243 [style=solid label="\"+\""]
  366 -> 244 [style=solid label="\"-\""]
  366 -> 245 [style=solid label="\"(\""]
  366 -> 246 [style=solid label="\"&\""]
  366 -> 247 [style=solid label="\"[\""]
  366 -> 248 [style=solid label="\"co_await\""]
  366 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  366 -> 250 [style=solid label="CHARACTER_LITERAL"]
  366 -> 251 [style=solid label="\"operator\""]
  366 -> 21 [style=solid label="\"decltype\""]
  366 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  366 -> 253 [style=solid label="\"*\""]
  366 -> 254 [style=solid label="INTEGER_LITERAL"]
  366 -> 255 [style=solid label="\"requires\""]
  366 -> 256 [style=solid label="\"~\""]
  366 -> 257 [style=solid label="\"++\""]
  366 -> 258 [style=solid label="\"--\""]
  366 -> 259 [style=solid label="POINTER_LITERAL"]
  366 -> 260 [style=solid label="\"dynamic_cast\""]
  366 -> 261 [style=solid label="\"static_cast\""]
  366 -> 262 [style=solid label="\"reinterpret_cast\""]
  366 -> 263 [style=solid label="\"const_cast\""]
  366 -> 264 [style=solid label="\"typeid\""]
  366 -> 27 [style=solid label="\"char\""]
  366 -> 28 [style=solid label="\"char8_t\""]
  366 -> 29 [style=solid label="\"char16_t\""]
  366 -> 30 [style=solid label="\"char32_t\""]
  366 -> 31 [style=solid label="\"wchar_t\""]
  366 -> 32 [style=solid label="\"bool\""]
  366 -> 33 [style=solid label="\"short\""]
  366 -> 34 [style=solid label="\"int\""]
  366 -> 35 [style=solid label="\"long\""]
  366 -> 36 [style=solid label="\"signed\""]
  366 -> 37 [style=solid label="\"unsigned\""]
  366 -> 38 [style=solid label="\"float\""]
  366 -> 39 [style=solid label="\"double\""]
  366 -> 40 [style=solid label="\"void\""]
  366 -> 118 [style=solid label="STRING_LITERAL"]
  366 -> 266 [style=solid label="\"sizeof\""]
  366 -> 267 [style=solid label="\"alignof\""]
  366 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  366 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  366 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  366 -> 272 [style=dashed label="SCOPE-opt"]
  366 -> 273 [style=dashed label="additive-expression"]
  366 -> 274 [style=dashed label="and-expression"]
  366 -> 276 [style=dashed label="await-expression"]
  366 -> 277 [style=dashed label="boolean-literal"]
  366 -> 278 [style=dashed label="cast-expression"]
  366 -> 279 [style=dashed label="character-literal"]
  366 -> 55 [style=dashed label="class-name"]
  366 -> 280 [style=dashed label="compare-expression"]
  366 -> 327 [style=dashed label="conditional-expression"]
  366 -> 643 [style=dashed label="constant-expression"]
  366 -> 644 [style=dashed label="constant-expression-opt"]
  366 -> 282 [style=dashed label="conversion-function-id"]
  366 -> 63 [style=dashed label="decltype-specifier"]
  366 -> 283 [style=dashed label="delete-expression"]
  366 -> 71 [style=dashed label="enum-name"]
  366 -> 284 [style=dashed label="equality-expression"]
  366 -> 285 [style=dashed label="exclusive-or-expression"]
  366 -> 287 [style=dashed label="floating-point-literal"]
  366 -> 288 [style=dashed label="fold-expression"]
  366 -> 289 [style=dashed label="id-expression"]
  366 -> 290 [style=dashed label="inclusive-or-expression"]
  366 -> 291 [style=dashed label="integer-literal"]
  366 -> 292 [style=dashed label="lambda-expression"]
  366 -> 293 [style=dashed label="lambda-introducer"]
  366 -> 294 [style=dashed label="literal"]
  366 -> 295 [style=dashed label="literal-operator-id"]
  366 -> 296 [style=dashed label="logical-and-expression"]
  366 -> 329 [style=dashed label="logical-or-expression"]
  366 -> 298 [style=dashed label="multiplicative-expression"]
  366 -> 85 [style=dashed label="namespace-alias"]
  366 -> 88 [style=dashed label="namespace-name"]
  366 -> 299 [style=dashed label="nested-name-specifier"]
  366 -> 90 [style=dashed label="nested-name-specifier-opt"]
  366 -> 300 [style=dashed label="new-expression"]
  366 -> 301 [style=dashed label="noexcept-expression"]
  366 -> 302 [style=dashed label="operator-function-id"]
  366 -> 94 [style=dashed label="placeholder-type-specifier"]
  366 -> 303 [style=dashed label="pm-expression"]
  366 -> 304 [style=dashed label="pointer-literal"]
  366 -> 305 [style=dashed label="postfix-expression"]
  366 -> 306 [style=dashed label="primary-expression"]
  366 -> 307 [style=dashed label="qualified-id"]
  366 -> 308 [style=dashed label="relational-expression"]
  366 -> 309 [style=dashed label="requires-expression"]
  366 -> 310 [style=dashed label="shift-expression"]
  366 -> 311 [style=dashed label="simple-template-id"]
  366 -> 312 [style=dashed label="simple-type-specifier"]
  366 -> 313 [style=dashed label="string-literal"]
  366 -> 314 [style=dashed label="template-id"]
  366 -> 102 [style=dashed label="template-name"]
  366 -> 104 [style=dashed label="type-constraint"]
  366 -> 105 [style=dashed label="type-constraint-opt"]
  366 -> 106 [style=dashed label="type-name"]
  366 -> 108 [style=dashed label="typedef-name"]
  366 -> 316 [style=dashed label="typename-specifier"]
  366 -> 317 [style=dashed label="unary-expression"]
  366 -> 318 [style=dashed label="unary-operator"]
  366 -> 319 [style=dashed label="unqualified-id"]
  366 -> 320 [style=dashed label="user-defined-character-literal"]
  366 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  366 -> 322 [style=dashed label="user-defined-integer-literal"]
  366 -> 323 [style=dashed label="user-defined-literal"]
  366 -> 324 [style=dashed label="user-defined-string-literal"]
  366 -> "366R19" [style=solid]
 "366R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  366 -> "366R161" [label="[\"]\"]", style=solid]
 "366R161" [label="R161", fillcolor=3, shape=diamond, style=filled]
  366 -> "366R469d" [label="[IDENTIFIER]", style=solid]
 "366R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  366 -> "366R722d" [label="[\"decltype\"]", style=solid]
 "366R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  366 -> "366R722" [label="[\"auto\"]", style=solid]
 "366R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  367 [label="State 367\n\l214 declarator: noptr-declarator parameters-and-qualifiers • trailing-return-type\l502 noptr-declarator: noptr-declarator parameters-and-qualifiers •\l"]
  367 -> 645 [style=solid label="\"->\""]
  367 -> 646 [style=dashed label="trailing-return-type"]
  367 -> "367R502" [style=solid]
 "367R502" [label="R502", fillcolor=3, shape=diamond, style=filled]
  368 [label="State 368\n\l604 ptr-declarator: ptr-operator ptr-declarator •\l"]
  368 -> "368R604" [style=solid]
 "368R604" [label="R604", fillcolor=3, shape=diamond, style=filled]
  369 [label="State 369\n\l 36 access-specifier: \"private\" •\l"]
  369 -> "369R36" [style=solid]
 "369R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  370 [label="State 370\n\l 37 access-specifier: \"protected\" •\l"]
  370 -> "370R37" [style=solid]
 "370R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  371 [label="State 371\n\l 38 access-specifier: \"public\" •\l"]
  371 -> "371R38" [style=solid]
 "371R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  372 [label="State 372\n\l245 enum-key: \"enum\" •\l246         | \"enum\" • \"class\"\l247         | \"enum\" • \"struct\"\l"]
  372 -> 131 [style=solid label="\"class\""]
  372 -> 132 [style=solid label="\"struct\""]
  372 -> "372R245" [style=solid]
 "372R245" [label="R245", fillcolor=3, shape=diamond, style=filled]
  373 [label="State 373\n\l435 member-specification: access-specifier • \":\" member-specification-opt\l"]
  373 -> 647 [style=solid label="\":\""]
  374 [label="State 374\n\l423 member-declaration: alias-declaration •\l"]
  374 -> "374R423" [style=solid]
 "374R423" [label="R423", fillcolor=3, shape=diamond, style=filled]
  375 [label="State 375\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l330 function-definition: attribute-specifier-seq-opt • decl-specifier-seq-opt declarator virt-specifier-seq-opt function-body\l331                    | attribute-specifier-seq-opt • decl-specifier-seq-opt declarator requires-clause function-body\l415 member-declaration: attribute-specifier-seq-opt • decl-specifier-seq-opt member-declarator-list-opt \";\"\l"]
  375 -> 1 [style=solid label="\"constexpr\""]
  375 -> 150 [style=solid label="\"extern\""]
  375 -> 4 [style=solid label="IDENTIFIER"]
  375 -> 151 [style=solid label="\"inline\""]
  375 -> 6 [style=solid label="\"::\""]
  375 -> 8 [style=solid label="\"typename\""]
  375 -> 9 [style=solid label="\"virtual\""]
  375 -> 158 [style=solid label="\"alignas\""]
  375 -> 162 [style=solid label="\"[\""]
  375 -> 12 [style=solid label="\"class\""]
  375 -> 13 [style=solid label="\"struct\""]
  375 -> 14 [style=solid label="\"union\""]
  375 -> 15 [style=solid label="\"const\""]
  375 -> 16 [style=solid label="\"volatile\""]
  375 -> 17 [style=solid label="\"friend\""]
  375 -> 18 [style=solid label="\"typedef\""]
  375 -> 19 [style=solid label="\"consteval\""]
  375 -> 20 [style=solid label="\"constinit\""]
  375 -> 21 [style=solid label="\"decltype\""]
  375 -> 22 [style=solid label="\"enum\""]
  375 -> 23 [style=solid label="\"explicit\""]
  375 -> 27 [style=solid label="\"char\""]
  375 -> 28 [style=solid label="\"char8_t\""]
  375 -> 29 [style=solid label="\"char16_t\""]
  375 -> 30 [style=solid label="\"char32_t\""]
  375 -> 31 [style=solid label="\"wchar_t\""]
  375 -> 32 [style=solid label="\"bool\""]
  375 -> 33 [style=solid label="\"short\""]
  375 -> 34 [style=solid label="\"int\""]
  375 -> 35 [style=solid label="\"long\""]
  375 -> 36 [style=solid label="\"signed\""]
  375 -> 37 [style=solid label="\"unsigned\""]
  375 -> 38 [style=solid label="\"float\""]
  375 -> 39 [style=solid label="\"double\""]
  375 -> 40 [style=solid label="\"void\""]
  375 -> 42 [style=solid label="\"static\""]
  375 -> 43 [style=solid label="\"thread_local\""]
  375 -> 44 [style=solid label="\"mutable\""]
  375 -> 166 [style=dashed label="alignment-specifier"]
  375 -> 167 [style=dashed label="attribute-specifier"]
  375 -> 53 [style=dashed label="class-head"]
  375 -> 54 [style=dashed label="class-key"]
  375 -> 55 [style=dashed label="class-name"]
  375 -> 56 [style=dashed label="class-specifier"]
  375 -> 57 [style=dashed label="cv-qualifier"]
  375 -> 58 [style=dashed label="decl-specifier"]
  375 -> 557 [style=dashed label="decl-specifier-seq"]
  375 -> 648 [style=dashed label="decl-specifier-seq-opt"]
  375 -> 63 [style=dashed label="decltype-specifier"]
  375 -> 65 [style=dashed label="defining-type-specifier"]
  375 -> 66 [style=dashed label="elaborated-enum-specifier"]
  375 -> 67 [style=dashed label="elaborated-type-specifier"]
  375 -> 69 [style=dashed label="enum-head"]
  375 -> 154 [style=dashed label="enum-key"]
  375 -> 71 [style=dashed label="enum-name"]
  375 -> 72 [style=dashed label="enum-specifier"]
  375 -> 155 [style=dashed label="explicit-specifier"]
  375 -> 79 [style=dashed label="function-specifier"]
  375 -> 85 [style=dashed label="namespace-alias"]
  375 -> 88 [style=dashed label="namespace-name"]
  375 -> 89 [style=dashed label="nested-name-specifier"]
  375 -> 90 [style=dashed label="nested-name-specifier-opt"]
  375 -> 94 [style=dashed label="placeholder-type-specifier"]
  375 -> 96 [style=dashed label="simple-template-id"]
  375 -> 97 [style=dashed label="simple-type-specifier"]
  375 -> 99 [style=dashed label="storage-class-specifier"]
  375 -> 102 [style=dashed label="template-name"]
  375 -> 104 [style=dashed label="type-constraint"]
  375 -> 105 [style=dashed label="type-constraint-opt"]
  375 -> 106 [style=dashed label="type-name"]
  375 -> 107 [style=dashed label="type-specifier"]
  375 -> 108 [style=dashed label="typedef-name"]
  375 -> 109 [style=dashed label="typename-specifier"]
  375 -> "375R193d" [label="[IDENTIFIER, \"::\", \"alignas\", \"[\", \"decltype\"]", style=solid]
 "375R193d" [label="R193", fillcolor=5, shape=diamond, style=filled]
  375 -> "375R193" [style=solid]
 "375R193" [label="R193", fillcolor=3, shape=diamond, style=filled]
  375 -> "375R469d" [label="[IDENTIFIER]", style=solid]
 "375R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  375 -> "375R722d" [label="[\"decltype\"]", style=solid]
 "375R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  375 -> "375R722" [label="[\"auto\"]", style=solid]
 "375R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  376 [label="State 376\n\l422 member-declaration: deduction-guide •\l"]
  376 -> "376R422" [style=solid]
 "376R422" [label="R422", fillcolor=3, shape=diamond, style=filled]
  377 [label="State 377\n\l425 member-declaration: empty-declaration •\l"]
  377 -> "377R425" [style=solid]
 "377R425" [label="R425", fillcolor=3, shape=diamond, style=filled]
  378 [label="State 378\n\l507 opaque-enum-declaration: enum-key • attribute-specifier-seq-opt enum-head-name enum-base-opt \";\"\l"]
  378 -> 177 [style=dashed label="attribute-specifier-seq"]
  378 -> 649 [style=dashed label="attribute-specifier-seq-opt"]
  378 -> "378R83" [style=solid]
 "378R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  379 [label="State 379\n\l421 member-declaration: explicit-specialization •\l"]
  379 -> "379R421" [style=solid]
 "379R421" [label="R421", fillcolor=3, shape=diamond, style=filled]
  380 [label="State 380\n\l271 explicit-specifier-opt: explicit-specifier •\l"]
  380 -> "380R271" [style=solid]
 "380R271" [label="R271", fillcolor=3, shape=diamond, style=filled]
  381 [label="State 381\n\l416 member-declaration: function-definition •\l"]
  381 -> "381R416" [style=solid]
 "381R416" [label="R416", fillcolor=3, shape=diamond, style=filled]
  382 [label="State 382\n\l434 member-specification: member-declaration • member-specification-opt\l"]
  382 -> 7 [style=solid label="\"template\""]
  382 -> 369 [style=solid label="\"private\""]
  382 -> 370 [style=solid label="\"protected\""]
  382 -> 371 [style=solid label="\"public\""]
  382 -> 10 [style=solid label="\"using\""]
  382 -> 11 [style=solid label="\";\""]
  382 -> 372 [style=solid label="\"enum\""]
  382 -> 23 [style=solid label="\"explicit\""]
  382 -> 41 [style=solid label="\"static_assert\""]
  382 -> 373 [style=dashed label="access-specifier"]
  382 -> 374 [style=dashed label="alias-declaration"]
  382 -> 177 [style=dashed label="attribute-specifier-seq"]
  382 -> 375 [style=dashed label="attribute-specifier-seq-opt"]
  382 -> 376 [style=dashed label="deduction-guide"]
  382 -> 377 [style=dashed label="empty-declaration"]
  382 -> 378 [style=dashed label="enum-key"]
  382 -> 379 [style=dashed label="explicit-specialization"]
  382 -> 380 [style=dashed label="explicit-specifier"]
  382 -> 76 [style=dashed label="explicit-specifier-opt"]
  382 -> 381 [style=dashed label="function-definition"]
  382 -> 382 [style=dashed label="member-declaration"]
  382 -> 383 [style=dashed label="member-specification"]
  382 -> 650 [style=dashed label="member-specification-opt"]
  382 -> 385 [style=dashed label="opaque-enum-declaration"]
  382 -> 386 [style=dashed label="static_assert-declaration"]
  382 -> 387 [style=dashed label="template-declaration"]
  382 -> 101 [style=dashed label="template-head"]
  382 -> 388 [style=dashed label="using-declaration"]
  382 -> 389 [style=dashed label="using-enum-declaration"]
  382 -> "382R83d" [label="[\";\", \"enum\", \"explicit\"]", style=solid]
 "382R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  382 -> "382R83" [style=solid]
 "382R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  382 -> "382R270d" [label="[IDENTIFIER]", style=solid]
 "382R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  382 -> "382R436" [label="[\"}\"]", style=solid]
 "382R436" [label="R436", fillcolor=3, shape=diamond, style=filled]
  383 [label="State 383\n\l437 member-specification-opt: member-specification •\l"]
  383 -> "383R437" [style=solid]
 "383R437" [label="R437", fillcolor=3, shape=diamond, style=filled]
  384 [label="State 384\n\l144 class-specifier: class-head \"{\" member-specification-opt • \"}\"\l"]
  384 -> 651 [style=solid label="\"}\""]
  385 [label="State 385\n\l424 member-declaration: opaque-enum-declaration •\l"]
  385 -> "385R424" [style=solid]
 "385R424" [label="R424", fillcolor=3, shape=diamond, style=filled]
  386 [label="State 386\n\l419 member-declaration: static_assert-declaration •\l"]
  386 -> "386R419" [style=solid]
 "386R419" [label="R419", fillcolor=3, shape=diamond, style=filled]
  387 [label="State 387\n\l420 member-declaration: template-declaration •\l"]
  387 -> "387R420" [style=solid]
 "387R420" [label="R420", fillcolor=3, shape=diamond, style=filled]
  388 [label="State 388\n\l417 member-declaration: using-declaration •\l"]
  388 -> "388R417" [style=solid]
 "388R417" [label="R417", fillcolor=3, shape=diamond, style=filled]
  389 [label="State 389\n\l418 member-declaration: using-enum-declaration •\l"]
  389 -> "389R418" [style=solid]
 "389R418" [label="R418", fillcolor=3, shape=diamond, style=filled]
  390 [label="State 390\n\l 99 base-clause: \":\" • base-specifier-list\l"]
  390 -> 177 [style=dashed label="attribute-specifier-seq"]
  390 -> 652 [style=dashed label="attribute-specifier-seq-opt"]
  390 -> 653 [style=dashed label="base-specifier"]
  390 -> 654 [style=dashed label="base-specifier-list"]
  390 -> "390R83" [style=solid]
 "390R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  391 [label="State 391\n\l101 base-clause-opt: base-clause •\l"]
  391 -> "391R101" [style=solid]
 "391R101" [label="R101", fillcolor=3, shape=diamond, style=filled]
  392 [label="State 392\n\l134 class-head: class-key attribute-specifier-seq-opt base-clause-opt •\l"]
  392 -> "392R134" [style=solid]
 "392R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
  393 [label="State 393\n\l133 class-head: class-key attribute-specifier-seq-opt class-head-name • class-virt-specifier-opt base-clause-opt\l"]
  393 -> 655 [style=solid label="\"final\""]
  393 -> 656 [style=dashed label="class-virt-specifier"]
  393 -> 657 [style=dashed label="class-virt-specifier-opt"]
  393 -> "393R146" [style=solid]
 "393R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  394 [label="State 394\n\l135 class-head-name: nested-name-specifier-opt • class-name\l231 elaborated-type-specifier: class-key attribute-specifier-seq-opt nested-name-specifier-opt • IDENTIFIER\l"]
  394 -> 658 [style=solid label="IDENTIFIER"]
  394 -> 659 [style=dashed label="class-name"]
  394 -> 660 [style=dashed label="simple-template-id"]
  394 -> 102 [style=dashed label="template-name"]
  395 [label="State 395\n\l233 elaborated-type-specifier: class-key nested-name-specifier TEMPLATE-opt • simple-template-id\l468 nested-name-specifier: nested-name-specifier TEMPLATE-opt • simple-template-id \"::\"\l"]
  395 -> 192 [style=solid label="IDENTIFIER"]
  395 -> 661 [style=dashed label="simple-template-id"]
  395 -> 102 [style=dashed label="template-name"]
  396 [label="State 396\n\l117 brace-or-equal-initializer: \"=\" • initializer-clause\l"]
  396 -> 238 [style=solid label="IDENTIFIER"]
  396 -> 239 [style=solid label="\"noexcept\""]
  396 -> 240 [style=solid label="\"!\""]
  396 -> 241 [style=solid label="\"::\""]
  396 -> 242 [style=solid label="\"this\""]
  396 -> 8 [style=solid label="\"typename\""]
  396 -> 243 [style=solid label="\"+\""]
  396 -> 244 [style=solid label="\"-\""]
  396 -> 245 [style=solid label="\"(\""]
  396 -> 246 [style=solid label="\"&\""]
  396 -> 247 [style=solid label="\"[\""]
  396 -> 248 [style=solid label="\"co_await\""]
  396 -> 398 [style=solid label="\"{\""]
  396 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  396 -> 250 [style=solid label="CHARACTER_LITERAL"]
  396 -> 251 [style=solid label="\"operator\""]
  396 -> 21 [style=solid label="\"decltype\""]
  396 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  396 -> 253 [style=solid label="\"*\""]
  396 -> 254 [style=solid label="INTEGER_LITERAL"]
  396 -> 255 [style=solid label="\"requires\""]
  396 -> 256 [style=solid label="\"~\""]
  396 -> 257 [style=solid label="\"++\""]
  396 -> 258 [style=solid label="\"--\""]
  396 -> 259 [style=solid label="POINTER_LITERAL"]
  396 -> 260 [style=solid label="\"dynamic_cast\""]
  396 -> 261 [style=solid label="\"static_cast\""]
  396 -> 262 [style=solid label="\"reinterpret_cast\""]
  396 -> 263 [style=solid label="\"const_cast\""]
  396 -> 264 [style=solid label="\"typeid\""]
  396 -> 27 [style=solid label="\"char\""]
  396 -> 28 [style=solid label="\"char8_t\""]
  396 -> 29 [style=solid label="\"char16_t\""]
  396 -> 30 [style=solid label="\"char32_t\""]
  396 -> 31 [style=solid label="\"wchar_t\""]
  396 -> 32 [style=solid label="\"bool\""]
  396 -> 33 [style=solid label="\"short\""]
  396 -> 34 [style=solid label="\"int\""]
  396 -> 35 [style=solid label="\"long\""]
  396 -> 36 [style=solid label="\"signed\""]
  396 -> 37 [style=solid label="\"unsigned\""]
  396 -> 38 [style=solid label="\"float\""]
  396 -> 39 [style=solid label="\"double\""]
  396 -> 40 [style=solid label="\"void\""]
  396 -> 118 [style=solid label="STRING_LITERAL"]
  396 -> 265 [style=solid label="\"throw\""]
  396 -> 266 [style=solid label="\"sizeof\""]
  396 -> 267 [style=solid label="\"alignof\""]
  396 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  396 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  396 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  396 -> 271 [style=solid label="\"co_yield\""]
  396 -> 272 [style=dashed label="SCOPE-opt"]
  396 -> 273 [style=dashed label="additive-expression"]
  396 -> 274 [style=dashed label="and-expression"]
  396 -> 662 [style=dashed label="assignment-expression"]
  396 -> 276 [style=dashed label="await-expression"]
  396 -> 277 [style=dashed label="boolean-literal"]
  396 -> 663 [style=dashed label="braced-init-list"]
  396 -> 278 [style=dashed label="cast-expression"]
  396 -> 279 [style=dashed label="character-literal"]
  396 -> 55 [style=dashed label="class-name"]
  396 -> 280 [style=dashed label="compare-expression"]
  396 -> 281 [style=dashed label="conditional-expression"]
  396 -> 282 [style=dashed label="conversion-function-id"]
  396 -> 63 [style=dashed label="decltype-specifier"]
  396 -> 283 [style=dashed label="delete-expression"]
  396 -> 71 [style=dashed label="enum-name"]
  396 -> 284 [style=dashed label="equality-expression"]
  396 -> 285 [style=dashed label="exclusive-or-expression"]
  396 -> 287 [style=dashed label="floating-point-literal"]
  396 -> 288 [style=dashed label="fold-expression"]
  396 -> 289 [style=dashed label="id-expression"]
  396 -> 290 [style=dashed label="inclusive-or-expression"]
  396 -> 664 [style=dashed label="initializer-clause"]
  396 -> 291 [style=dashed label="integer-literal"]
  396 -> 292 [style=dashed label="lambda-expression"]
  396 -> 293 [style=dashed label="lambda-introducer"]
  396 -> 294 [style=dashed label="literal"]
  396 -> 295 [style=dashed label="literal-operator-id"]
  396 -> 296 [style=dashed label="logical-and-expression"]
  396 -> 297 [style=dashed label="logical-or-expression"]
  396 -> 298 [style=dashed label="multiplicative-expression"]
  396 -> 85 [style=dashed label="namespace-alias"]
  396 -> 88 [style=dashed label="namespace-name"]
  396 -> 299 [style=dashed label="nested-name-specifier"]
  396 -> 90 [style=dashed label="nested-name-specifier-opt"]
  396 -> 300 [style=dashed label="new-expression"]
  396 -> 301 [style=dashed label="noexcept-expression"]
  396 -> 302 [style=dashed label="operator-function-id"]
  396 -> 94 [style=dashed label="placeholder-type-specifier"]
  396 -> 303 [style=dashed label="pm-expression"]
  396 -> 304 [style=dashed label="pointer-literal"]
  396 -> 305 [style=dashed label="postfix-expression"]
  396 -> 306 [style=dashed label="primary-expression"]
  396 -> 307 [style=dashed label="qualified-id"]
  396 -> 308 [style=dashed label="relational-expression"]
  396 -> 309 [style=dashed label="requires-expression"]
  396 -> 310 [style=dashed label="shift-expression"]
  396 -> 311 [style=dashed label="simple-template-id"]
  396 -> 312 [style=dashed label="simple-type-specifier"]
  396 -> 313 [style=dashed label="string-literal"]
  396 -> 314 [style=dashed label="template-id"]
  396 -> 102 [style=dashed label="template-name"]
  396 -> 315 [style=dashed label="throw-expression"]
  396 -> 104 [style=dashed label="type-constraint"]
  396 -> 105 [style=dashed label="type-constraint-opt"]
  396 -> 106 [style=dashed label="type-name"]
  396 -> 108 [style=dashed label="typedef-name"]
  396 -> 316 [style=dashed label="typename-specifier"]
  396 -> 317 [style=dashed label="unary-expression"]
  396 -> 318 [style=dashed label="unary-operator"]
  396 -> 319 [style=dashed label="unqualified-id"]
  396 -> 320 [style=dashed label="user-defined-character-literal"]
  396 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  396 -> 322 [style=dashed label="user-defined-integer-literal"]
  396 -> 323 [style=dashed label="user-defined-literal"]
  396 -> 324 [style=dashed label="user-defined-string-literal"]
  396 -> 325 [style=dashed label="yield-expression"]
  396 -> "396R19" [style=solid]
 "396R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  396 -> "396R469d" [label="[IDENTIFIER]", style=solid]
 "396R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  396 -> "396R722d" [label="[\"decltype\"]", style=solid]
 "396R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  396 -> "396R722" [label="[\"auto\"]", style=solid]
 "396R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  397 [label="State 397\n\l363 initializer: \"(\" • expression-list \")\"\l"]
  397 -> 238 [style=solid label="IDENTIFIER"]
  397 -> 239 [style=solid label="\"noexcept\""]
  397 -> 240 [style=solid label="\"!\""]
  397 -> 241 [style=solid label="\"::\""]
  397 -> 242 [style=solid label="\"this\""]
  397 -> 8 [style=solid label="\"typename\""]
  397 -> 243 [style=solid label="\"+\""]
  397 -> 244 [style=solid label="\"-\""]
  397 -> 245 [style=solid label="\"(\""]
  397 -> 246 [style=solid label="\"&\""]
  397 -> 247 [style=solid label="\"[\""]
  397 -> 248 [style=solid label="\"co_await\""]
  397 -> 398 [style=solid label="\"{\""]
  397 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  397 -> 250 [style=solid label="CHARACTER_LITERAL"]
  397 -> 251 [style=solid label="\"operator\""]
  397 -> 21 [style=solid label="\"decltype\""]
  397 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  397 -> 253 [style=solid label="\"*\""]
  397 -> 254 [style=solid label="INTEGER_LITERAL"]
  397 -> 255 [style=solid label="\"requires\""]
  397 -> 256 [style=solid label="\"~\""]
  397 -> 257 [style=solid label="\"++\""]
  397 -> 258 [style=solid label="\"--\""]
  397 -> 259 [style=solid label="POINTER_LITERAL"]
  397 -> 260 [style=solid label="\"dynamic_cast\""]
  397 -> 261 [style=solid label="\"static_cast\""]
  397 -> 262 [style=solid label="\"reinterpret_cast\""]
  397 -> 263 [style=solid label="\"const_cast\""]
  397 -> 264 [style=solid label="\"typeid\""]
  397 -> 27 [style=solid label="\"char\""]
  397 -> 28 [style=solid label="\"char8_t\""]
  397 -> 29 [style=solid label="\"char16_t\""]
  397 -> 30 [style=solid label="\"char32_t\""]
  397 -> 31 [style=solid label="\"wchar_t\""]
  397 -> 32 [style=solid label="\"bool\""]
  397 -> 33 [style=solid label="\"short\""]
  397 -> 34 [style=solid label="\"int\""]
  397 -> 35 [style=solid label="\"long\""]
  397 -> 36 [style=solid label="\"signed\""]
  397 -> 37 [style=solid label="\"unsigned\""]
  397 -> 38 [style=solid label="\"float\""]
  397 -> 39 [style=solid label="\"double\""]
  397 -> 40 [style=solid label="\"void\""]
  397 -> 118 [style=solid label="STRING_LITERAL"]
  397 -> 265 [style=solid label="\"throw\""]
  397 -> 266 [style=solid label="\"sizeof\""]
  397 -> 267 [style=solid label="\"alignof\""]
  397 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  397 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  397 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  397 -> 271 [style=solid label="\"co_yield\""]
  397 -> 272 [style=dashed label="SCOPE-opt"]
  397 -> 273 [style=dashed label="additive-expression"]
  397 -> 274 [style=dashed label="and-expression"]
  397 -> 662 [style=dashed label="assignment-expression"]
  397 -> 276 [style=dashed label="await-expression"]
  397 -> 277 [style=dashed label="boolean-literal"]
  397 -> 663 [style=dashed label="braced-init-list"]
  397 -> 278 [style=dashed label="cast-expression"]
  397 -> 279 [style=dashed label="character-literal"]
  397 -> 55 [style=dashed label="class-name"]
  397 -> 280 [style=dashed label="compare-expression"]
  397 -> 281 [style=dashed label="conditional-expression"]
  397 -> 282 [style=dashed label="conversion-function-id"]
  397 -> 63 [style=dashed label="decltype-specifier"]
  397 -> 283 [style=dashed label="delete-expression"]
  397 -> 71 [style=dashed label="enum-name"]
  397 -> 284 [style=dashed label="equality-expression"]
  397 -> 285 [style=dashed label="exclusive-or-expression"]
  397 -> 665 [style=dashed label="expression-list"]
  397 -> 287 [style=dashed label="floating-point-literal"]
  397 -> 288 [style=dashed label="fold-expression"]
  397 -> 289 [style=dashed label="id-expression"]
  397 -> 290 [style=dashed label="inclusive-or-expression"]
  397 -> 666 [style=dashed label="initializer-clause"]
  397 -> 667 [style=dashed label="initializer-list"]
  397 -> 291 [style=dashed label="integer-literal"]
  397 -> 292 [style=dashed label="lambda-expression"]
  397 -> 293 [style=dashed label="lambda-introducer"]
  397 -> 294 [style=dashed label="literal"]
  397 -> 295 [style=dashed label="literal-operator-id"]
  397 -> 296 [style=dashed label="logical-and-expression"]
  397 -> 297 [style=dashed label="logical-or-expression"]
  397 -> 298 [style=dashed label="multiplicative-expression"]
  397 -> 85 [style=dashed label="namespace-alias"]
  397 -> 88 [style=dashed label="namespace-name"]
  397 -> 299 [style=dashed label="nested-name-specifier"]
  397 -> 90 [style=dashed label="nested-name-specifier-opt"]
  397 -> 300 [style=dashed label="new-expression"]
  397 -> 301 [style=dashed label="noexcept-expression"]
  397 -> 302 [style=dashed label="operator-function-id"]
  397 -> 94 [style=dashed label="placeholder-type-specifier"]
  397 -> 303 [style=dashed label="pm-expression"]
  397 -> 304 [style=dashed label="pointer-literal"]
  397 -> 305 [style=dashed label="postfix-expression"]
  397 -> 306 [style=dashed label="primary-expression"]
  397 -> 307 [style=dashed label="qualified-id"]
  397 -> 308 [style=dashed label="relational-expression"]
  397 -> 309 [style=dashed label="requires-expression"]
  397 -> 310 [style=dashed label="shift-expression"]
  397 -> 311 [style=dashed label="simple-template-id"]
  397 -> 312 [style=dashed label="simple-type-specifier"]
  397 -> 313 [style=dashed label="string-literal"]
  397 -> 314 [style=dashed label="template-id"]
  397 -> 102 [style=dashed label="template-name"]
  397 -> 315 [style=dashed label="throw-expression"]
  397 -> 104 [style=dashed label="type-constraint"]
  397 -> 105 [style=dashed label="type-constraint-opt"]
  397 -> 106 [style=dashed label="type-name"]
  397 -> 108 [style=dashed label="typedef-name"]
  397 -> 316 [style=dashed label="typename-specifier"]
  397 -> 317 [style=dashed label="unary-expression"]
  397 -> 318 [style=dashed label="unary-operator"]
  397 -> 319 [style=dashed label="unqualified-id"]
  397 -> 320 [style=dashed label="user-defined-character-literal"]
  397 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  397 -> 322 [style=dashed label="user-defined-integer-literal"]
  397 -> 323 [style=dashed label="user-defined-literal"]
  397 -> 324 [style=dashed label="user-defined-string-literal"]
  397 -> 325 [style=dashed label="yield-expression"]
  397 -> "397R19" [style=solid]
 "397R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  397 -> "397R469d" [label="[IDENTIFIER]", style=solid]
 "397R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  397 -> "397R722d" [label="[\"decltype\"]", style=solid]
 "397R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  397 -> "397R722" [label="[\"auto\"]", style=solid]
 "397R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  398 [label="State 398\n\l121 braced-init-list: \"{\" • initializer-list COMMA-opt \"}\"\l122                 | \"{\" • designated-initializer-list COMMA-opt \"}\"\l123                 | \"{\" • \"}\"\l"]
  398 -> 238 [style=solid label="IDENTIFIER"]
  398 -> 239 [style=solid label="\"noexcept\""]
  398 -> 240 [style=solid label="\"!\""]
  398 -> 241 [style=solid label="\"::\""]
  398 -> 242 [style=solid label="\"this\""]
  398 -> 8 [style=solid label="\"typename\""]
  398 -> 243 [style=solid label="\"+\""]
  398 -> 244 [style=solid label="\"-\""]
  398 -> 245 [style=solid label="\"(\""]
  398 -> 246 [style=solid label="\"&\""]
  398 -> 247 [style=solid label="\"[\""]
  398 -> 248 [style=solid label="\"co_await\""]
  398 -> 398 [style=solid label="\"{\""]
  398 -> 668 [style=solid label="\"}\""]
  398 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  398 -> 250 [style=solid label="CHARACTER_LITERAL"]
  398 -> 251 [style=solid label="\"operator\""]
  398 -> 21 [style=solid label="\"decltype\""]
  398 -> 669 [style=solid label="\".\""]
  398 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  398 -> 253 [style=solid label="\"*\""]
  398 -> 254 [style=solid label="INTEGER_LITERAL"]
  398 -> 255 [style=solid label="\"requires\""]
  398 -> 256 [style=solid label="\"~\""]
  398 -> 257 [style=solid label="\"++\""]
  398 -> 258 [style=solid label="\"--\""]
  398 -> 259 [style=solid label="POINTER_LITERAL"]
  398 -> 260 [style=solid label="\"dynamic_cast\""]
  398 -> 261 [style=solid label="\"static_cast\""]
  398 -> 262 [style=solid label="\"reinterpret_cast\""]
  398 -> 263 [style=solid label="\"const_cast\""]
  398 -> 264 [style=solid label="\"typeid\""]
  398 -> 27 [style=solid label="\"char\""]
  398 -> 28 [style=solid label="\"char8_t\""]
  398 -> 29 [style=solid label="\"char16_t\""]
  398 -> 30 [style=solid label="\"char32_t\""]
  398 -> 31 [style=solid label="\"wchar_t\""]
  398 -> 32 [style=solid label="\"bool\""]
  398 -> 33 [style=solid label="\"short\""]
  398 -> 34 [style=solid label="\"int\""]
  398 -> 35 [style=solid label="\"long\""]
  398 -> 36 [style=solid label="\"signed\""]
  398 -> 37 [style=solid label="\"unsigned\""]
  398 -> 38 [style=solid label="\"float\""]
  398 -> 39 [style=solid label="\"double\""]
  398 -> 40 [style=solid label="\"void\""]
  398 -> 118 [style=solid label="STRING_LITERAL"]
  398 -> 265 [style=solid label="\"throw\""]
  398 -> 266 [style=solid label="\"sizeof\""]
  398 -> 267 [style=solid label="\"alignof\""]
  398 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  398 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  398 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  398 -> 271 [style=solid label="\"co_yield\""]
  398 -> 272 [style=dashed label="SCOPE-opt"]
  398 -> 273 [style=dashed label="additive-expression"]
  398 -> 274 [style=dashed label="and-expression"]
  398 -> 662 [style=dashed label="assignment-expression"]
  398 -> 276 [style=dashed label="await-expression"]
  398 -> 277 [style=dashed label="boolean-literal"]
  398 -> 663 [style=dashed label="braced-init-list"]
  398 -> 278 [style=dashed label="cast-expression"]
  398 -> 279 [style=dashed label="character-literal"]
  398 -> 55 [style=dashed label="class-name"]
  398 -> 280 [style=dashed label="compare-expression"]
  398 -> 281 [style=dashed label="conditional-expression"]
  398 -> 282 [style=dashed label="conversion-function-id"]
  398 -> 63 [style=dashed label="decltype-specifier"]
  398 -> 283 [style=dashed label="delete-expression"]
  398 -> 670 [style=dashed label="designated-initializer-clause"]
  398 -> 671 [style=dashed label="designated-initializer-list"]
  398 -> 672 [style=dashed label="designator"]
  398 -> 71 [style=dashed label="enum-name"]
  398 -> 284 [style=dashed label="equality-expression"]
  398 -> 285 [style=dashed label="exclusive-or-expression"]
  398 -> 287 [style=dashed label="floating-point-literal"]
  398 -> 288 [style=dashed label="fold-expression"]
  398 -> 289 [style=dashed label="id-expression"]
  398 -> 290 [style=dashed label="inclusive-or-expression"]
  398 -> 666 [style=dashed label="initializer-clause"]
  398 -> 673 [style=dashed label="initializer-list"]
  398 -> 291 [style=dashed label="integer-literal"]
  398 -> 292 [style=dashed label="lambda-expression"]
  398 -> 293 [style=dashed label="lambda-introducer"]
  398 -> 294 [style=dashed label="literal"]
  398 -> 295 [style=dashed label="literal-operator-id"]
  398 -> 296 [style=dashed label="logical-and-expression"]
  398 -> 297 [style=dashed label="logical-or-expression"]
  398 -> 298 [style=dashed label="multiplicative-expression"]
  398 -> 85 [style=dashed label="namespace-alias"]
  398 -> 88 [style=dashed label="namespace-name"]
  398 -> 299 [style=dashed label="nested-name-specifier"]
  398 -> 90 [style=dashed label="nested-name-specifier-opt"]
  398 -> 300 [style=dashed label="new-expression"]
  398 -> 301 [style=dashed label="noexcept-expression"]
  398 -> 302 [style=dashed label="operator-function-id"]
  398 -> 94 [style=dashed label="placeholder-type-specifier"]
  398 -> 303 [style=dashed label="pm-expression"]
  398 -> 304 [style=dashed label="pointer-literal"]
  398 -> 305 [style=dashed label="postfix-expression"]
  398 -> 306 [style=dashed label="primary-expression"]
  398 -> 307 [style=dashed label="qualified-id"]
  398 -> 308 [style=dashed label="relational-expression"]
  398 -> 309 [style=dashed label="requires-expression"]
  398 -> 310 [style=dashed label="shift-expression"]
  398 -> 311 [style=dashed label="simple-template-id"]
  398 -> 312 [style=dashed label="simple-type-specifier"]
  398 -> 313 [style=dashed label="string-literal"]
  398 -> 314 [style=dashed label="template-id"]
  398 -> 102 [style=dashed label="template-name"]
  398 -> 315 [style=dashed label="throw-expression"]
  398 -> 104 [style=dashed label="type-constraint"]
  398 -> 105 [style=dashed label="type-constraint-opt"]
  398 -> 106 [style=dashed label="type-name"]
  398 -> 108 [style=dashed label="typedef-name"]
  398 -> 316 [style=dashed label="typename-specifier"]
  398 -> 317 [style=dashed label="unary-expression"]
  398 -> 318 [style=dashed label="unary-operator"]
  398 -> 319 [style=dashed label="unqualified-id"]
  398 -> 320 [style=dashed label="user-defined-character-literal"]
  398 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  398 -> 322 [style=dashed label="user-defined-integer-literal"]
  398 -> 323 [style=dashed label="user-defined-literal"]
  398 -> 324 [style=dashed label="user-defined-string-literal"]
  398 -> 325 [style=dashed label="yield-expression"]
  398 -> "398R19" [style=solid]
 "398R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  398 -> "398R469d" [label="[IDENTIFIER]", style=solid]
 "398R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  398 -> "398R722d" [label="[\"decltype\"]", style=solid]
 "398R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  398 -> "398R722" [label="[\"auto\"]", style=solid]
 "398R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  399 [label="State 399\n\l633 requires-clause: \"requires\" • constraint-logical-or-expression\l"]
  399 -> 238 [style=solid label="IDENTIFIER"]
  399 -> 6 [style=solid label="\"::\""]
  399 -> 242 [style=solid label="\"this\""]
  399 -> 674 [style=solid label="\"(\""]
  399 -> 247 [style=solid label="\"[\""]
  399 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  399 -> 250 [style=solid label="CHARACTER_LITERAL"]
  399 -> 251 [style=solid label="\"operator\""]
  399 -> 21 [style=solid label="\"decltype\""]
  399 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  399 -> 254 [style=solid label="INTEGER_LITERAL"]
  399 -> 255 [style=solid label="\"requires\""]
  399 -> 354 [style=solid label="\"~\""]
  399 -> 259 [style=solid label="POINTER_LITERAL"]
  399 -> 118 [style=solid label="STRING_LITERAL"]
  399 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  399 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  399 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  399 -> 277 [style=dashed label="boolean-literal"]
  399 -> 279 [style=dashed label="character-literal"]
  399 -> 55 [style=dashed label="class-name"]
  399 -> 675 [style=dashed label="constraint-logical-and-expression"]
  399 -> 676 [style=dashed label="constraint-logical-or-expression"]
  399 -> 282 [style=dashed label="conversion-function-id"]
  399 -> 121 [style=dashed label="decltype-specifier"]
  399 -> 71 [style=dashed label="enum-name"]
  399 -> 287 [style=dashed label="floating-point-literal"]
  399 -> 288 [style=dashed label="fold-expression"]
  399 -> 289 [style=dashed label="id-expression"]
  399 -> 291 [style=dashed label="integer-literal"]
  399 -> 292 [style=dashed label="lambda-expression"]
  399 -> 293 [style=dashed label="lambda-introducer"]
  399 -> 294 [style=dashed label="literal"]
  399 -> 295 [style=dashed label="literal-operator-id"]
  399 -> 85 [style=dashed label="namespace-alias"]
  399 -> 88 [style=dashed label="namespace-name"]
  399 -> 356 [style=dashed label="nested-name-specifier"]
  399 -> 302 [style=dashed label="operator-function-id"]
  399 -> 304 [style=dashed label="pointer-literal"]
  399 -> 677 [style=dashed label="primary-expression"]
  399 -> 307 [style=dashed label="qualified-id"]
  399 -> 309 [style=dashed label="requires-expression"]
  399 -> 311 [style=dashed label="simple-template-id"]
  399 -> 313 [style=dashed label="string-literal"]
  399 -> 314 [style=dashed label="template-id"]
  399 -> 102 [style=dashed label="template-name"]
  399 -> 106 [style=dashed label="type-name"]
  399 -> 108 [style=dashed label="typedef-name"]
  399 -> 319 [style=dashed label="unqualified-id"]
  399 -> 320 [style=dashed label="user-defined-character-literal"]
  399 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  399 -> 322 [style=dashed label="user-defined-integer-literal"]
  399 -> 323 [style=dashed label="user-defined-literal"]
  399 -> 324 [style=dashed label="user-defined-string-literal"]
  400 [label="State 400\n\l362 initializer: brace-or-equal-initializer •\l"]
  400 -> "400R362" [style=solid]
 "400R362" [label="R362", fillcolor=3, shape=diamond, style=filled]
  401 [label="State 401\n\l118 brace-or-equal-initializer: braced-init-list •\l"]
  401 -> "401R118" [style=solid]
 "401R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
  402 [label="State 402\n\l369 initializer-opt: initializer •\l"]
  402 -> "402R369" [style=solid]
 "402R369" [label="R369", fillcolor=3, shape=diamond, style=filled]
  403 [label="State 403\n\l351 init-declarator: declarator initializer-opt •\l"]
  403 -> "403R351" [style=solid]
 "403R351" [label="R351", fillcolor=3, shape=diamond, style=filled]
  404 [label="State 404\n\l352 init-declarator: declarator requires-clause •\l"]
  404 -> "404R352" [style=solid]
 "404R352" [label="R352", fillcolor=3, shape=diamond, style=filled]
  405 [label="State 405\n\l354 init-declarator-list: init-declarator-list \",\" • init-declarator\l"]
  405 -> 156 [style=solid label="\"...\""]
  405 -> 4 [style=solid label="IDENTIFIER"]
  405 -> 6 [style=solid label="\"::\""]
  405 -> 159 [style=solid label="\"(\""]
  405 -> 160 [style=solid label="\"&\""]
  405 -> 163 [style=solid label="\"&&\""]
  405 -> 21 [style=solid label="\"decltype\""]
  405 -> 164 [style=solid label="\"*\""]
  405 -> 165 [style=dashed label="ELLIPSIS-opt"]
  405 -> 55 [style=dashed label="class-name"]
  405 -> 183 [style=dashed label="declarator"]
  405 -> 171 [style=dashed label="declarator-id"]
  405 -> 121 [style=dashed label="decltype-specifier"]
  405 -> 71 [style=dashed label="enum-name"]
  405 -> 678 [style=dashed label="init-declarator"]
  405 -> 85 [style=dashed label="namespace-alias"]
  405 -> 88 [style=dashed label="namespace-name"]
  405 -> 187 [style=dashed label="nested-name-specifier"]
  405 -> 173 [style=dashed label="noptr-declarator"]
  405 -> 174 [style=dashed label="ptr-declarator"]
  405 -> 175 [style=dashed label="ptr-operator"]
  405 -> 96 [style=dashed label="simple-template-id"]
  405 -> 102 [style=dashed label="template-name"]
  405 -> 106 [style=dashed label="type-name"]
  405 -> 108 [style=dashed label="typedef-name"]
  405 -> "405R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "405R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  405 -> "405R5" [style=solid]
 "405R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  406 [label="State 406\n\l652 simple-declaration: decl-specifier-seq init-declarator-list-opt \";\" •\l"]
  406 -> "406R652" [style=solid]
 "406R652" [label="R652", fillcolor=3, shape=diamond, style=filled]
  407 [label="State 407\n\l251 enumerator: IDENTIFIER • attribute-specifier-seq-opt\l"]
  407 -> 177 [style=dashed label="attribute-specifier-seq"]
  407 -> 679 [style=dashed label="attribute-specifier-seq-opt"]
  407 -> "407R83" [style=solid]
 "407R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  408 [label="State 408\n\l252 enumerator-definition: enumerator •\l253                      | enumerator • \"=\" constant-expression\l"]
  408 -> 680 [style=solid label="\"=\""]
  408 -> "408R252" [style=solid]
 "408R252" [label="R252", fillcolor=3, shape=diamond, style=filled]
  409 [label="State 409\n\l254 enumerator-list: enumerator-definition •\l"]
  409 -> "409R254" [style=solid]
 "409R254" [label="R254", fillcolor=3, shape=diamond, style=filled]
  410 [label="State 410\n\l250 enum-specifier: enum-head \"{\" enumerator-list • \",\" \"}\"\l255 enumerator-list: enumerator-list • \",\" enumerator-definition\l257 enumerator-list-opt: enumerator-list •\l"]
  410 -> 681 [style=solid label="\",\""]
  410 -> "410R257" [style=solid]
 "410R257" [label="R257", fillcolor=3, shape=diamond, style=filled]
  411 [label="State 411\n\l249 enum-specifier: enum-head \"{\" enumerator-list-opt • \"}\"\l"]
  411 -> 682 [style=solid label="\"}\""]
  412 [label="State 412\n\l244 enum-head-name-opt: enum-head-name •\l507 opaque-enum-declaration: enum-key attribute-specifier-seq-opt enum-head-name • enum-base-opt \";\"\l"]
  412 -> 683 [style=solid label="\":\""]
  412 -> 684 [style=dashed label="enum-base"]
  412 -> 685 [style=dashed label="enum-base-opt"]
  412 -> "412R239" [style=solid]
 "412R239" [label="R239", fillcolor=3, shape=diamond, style=filled]
  412 -> "412R244d" [label="[\":\"]", style=solid]
 "412R244d" [label="R244", fillcolor=5, shape=diamond, style=filled]
  412 -> "412R244" [label="[\"{\"]", style=solid]
 "412R244" [label="R244", fillcolor=3, shape=diamond, style=filled]
  413 [label="State 413\n\l241 enum-head: enum-key attribute-specifier-seq-opt enum-head-name-opt • enum-base-opt\l"]
  413 -> 683 [style=solid label="\":\""]
  413 -> 684 [style=dashed label="enum-base"]
  413 -> 686 [style=dashed label="enum-base-opt"]
  413 -> "413R239" [style=solid]
 "413R239" [label="R239", fillcolor=3, shape=diamond, style=filled]
  414 [label="State 414\n\l242 enum-head-name: nested-name-specifier-opt • IDENTIFIER\l"]
  414 -> 687 [style=solid label="IDENTIFIER"]
  415 [label="State 415\n\l217 deduction-guide: explicit-specifier-opt template-name \"(\" • parameter-declaration-clause \")\" \"->\" simple-template-id \";\"\l"]
  415 -> 177 [style=dashed label="attribute-specifier-seq"]
  415 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  415 -> 639 [style=dashed label="parameter-declaration"]
  415 -> 688 [style=dashed label="parameter-declaration-clause"]
  415 -> 641 [style=dashed label="parameter-declaration-list"]
  415 -> 642 [style=dashed label="parameter-declaration-list-opt"]
  415 -> "415R83" [style=solid]
 "415R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  415 -> "415R562" [label="[\"...\", \")\"]", style=solid]
 "415R562" [label="R562", fillcolor=3, shape=diamond, style=filled]
  416 [label="State 416\n\l438 module-declaration: EXPORT-opt \"module\" • module-name module-partition-opt attribute-specifier-seq-opt \";\"\l"]
  416 -> 137 [style=solid label="IDENTIFIER"]
  416 -> 689 [style=dashed label="module-name"]
  416 -> 142 [style=dashed label="module-name-qualifier"]
  416 -> 143 [style=dashed label="module-name-qualifier-opt"]
  416 -> "416R445d" [label="[IDENTIFIER]", style=solid]
 "416R445d" [label="R445", fillcolor=5, shape=diamond, style=filled]
  417 [label="State 417\n\l718 translation-unit: global-module-fragment-opt module-declaration declaration-seq-opt • private-module-fragment-opt\l"]
  417 -> 690 [style=solid label="\"module\""]
  417 -> 691 [style=dashed label="private-module-fragment"]
  417 -> 692 [style=dashed label="private-module-fragment-opt"]
  417 -> "417R597" [style=solid]
 "417R597" [label="R597", fillcolor=3, shape=diamond, style=filled]
  418 [label="State 418\n\l467 nested-name-specifier: nested-name-specifier IDENTIFIER \"::\" •\l"]
  418 -> "418R467" [style=solid]
 "418R467" [label="R467", fillcolor=3, shape=diamond, style=filled]
  419 [label="State 419\n\l658 simple-type-specifier: nested-name-specifier \"template\" simple-template-id •\l"]
  419 -> "419R658" [style=solid]
 "419R658" [label="R658", fillcolor=3, shape=diamond, style=filled]
  420 [label="State 420\n\l468 nested-name-specifier: nested-name-specifier TEMPLATE-opt simple-template-id • \"::\"\l"]
  420 -> 693 [style=solid label="\"::\""]
  421 [label="State 421\n\l721 type-constraint: nested-name-specifier-opt concept-name \"<\" • template-argument-list-opt \">\"\l"]
  421 -> 238 [style=solid label="IDENTIFIER"]
  421 -> 239 [style=solid label="\"noexcept\""]
  421 -> 240 [style=solid label="\"!\""]
  421 -> 241 [style=solid label="\"::\""]
  421 -> 242 [style=solid label="\"this\""]
  421 -> 8 [style=solid label="\"typename\""]
  421 -> 243 [style=solid label="\"+\""]
  421 -> 244 [style=solid label="\"-\""]
  421 -> 245 [style=solid label="\"(\""]
  421 -> 246 [style=solid label="\"&\""]
  421 -> 247 [style=solid label="\"[\""]
  421 -> 248 [style=solid label="\"co_await\""]
  421 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  421 -> 250 [style=solid label="CHARACTER_LITERAL"]
  421 -> 12 [style=solid label="\"class\""]
  421 -> 13 [style=solid label="\"struct\""]
  421 -> 14 [style=solid label="\"union\""]
  421 -> 251 [style=solid label="\"operator\""]
  421 -> 15 [style=solid label="\"const\""]
  421 -> 16 [style=solid label="\"volatile\""]
  421 -> 21 [style=solid label="\"decltype\""]
  421 -> 125 [style=solid label="\"enum\""]
  421 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  421 -> 253 [style=solid label="\"*\""]
  421 -> 254 [style=solid label="INTEGER_LITERAL"]
  421 -> 255 [style=solid label="\"requires\""]
  421 -> 256 [style=solid label="\"~\""]
  421 -> 257 [style=solid label="\"++\""]
  421 -> 258 [style=solid label="\"--\""]
  421 -> 259 [style=solid label="POINTER_LITERAL"]
  421 -> 260 [style=solid label="\"dynamic_cast\""]
  421 -> 261 [style=solid label="\"static_cast\""]
  421 -> 262 [style=solid label="\"reinterpret_cast\""]
  421 -> 263 [style=solid label="\"const_cast\""]
  421 -> 264 [style=solid label="\"typeid\""]
  421 -> 27 [style=solid label="\"char\""]
  421 -> 28 [style=solid label="\"char8_t\""]
  421 -> 29 [style=solid label="\"char16_t\""]
  421 -> 30 [style=solid label="\"char32_t\""]
  421 -> 31 [style=solid label="\"wchar_t\""]
  421 -> 32 [style=solid label="\"bool\""]
  421 -> 33 [style=solid label="\"short\""]
  421 -> 34 [style=solid label="\"int\""]
  421 -> 35 [style=solid label="\"long\""]
  421 -> 36 [style=solid label="\"signed\""]
  421 -> 37 [style=solid label="\"unsigned\""]
  421 -> 38 [style=solid label="\"float\""]
  421 -> 39 [style=solid label="\"double\""]
  421 -> 40 [style=solid label="\"void\""]
  421 -> 118 [style=solid label="STRING_LITERAL"]
  421 -> 266 [style=solid label="\"sizeof\""]
  421 -> 267 [style=solid label="\"alignof\""]
  421 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  421 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  421 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  421 -> 272 [style=dashed label="SCOPE-opt"]
  421 -> 273 [style=dashed label="additive-expression"]
  421 -> 274 [style=dashed label="and-expression"]
  421 -> 276 [style=dashed label="await-expression"]
  421 -> 277 [style=dashed label="boolean-literal"]
  421 -> 278 [style=dashed label="cast-expression"]
  421 -> 279 [style=dashed label="character-literal"]
  421 -> 424 [style=dashed label="class-key"]
  421 -> 55 [style=dashed label="class-name"]
  421 -> 280 [style=dashed label="compare-expression"]
  421 -> 327 [style=dashed label="conditional-expression"]
  421 -> 425 [style=dashed label="constant-expression"]
  421 -> 282 [style=dashed label="conversion-function-id"]
  421 -> 57 [style=dashed label="cv-qualifier"]
  421 -> 63 [style=dashed label="decltype-specifier"]
  421 -> 283 [style=dashed label="delete-expression"]
  421 -> 66 [style=dashed label="elaborated-enum-specifier"]
  421 -> 67 [style=dashed label="elaborated-type-specifier"]
  421 -> 71 [style=dashed label="enum-name"]
  421 -> 284 [style=dashed label="equality-expression"]
  421 -> 285 [style=dashed label="exclusive-or-expression"]
  421 -> 287 [style=dashed label="floating-point-literal"]
  421 -> 288 [style=dashed label="fold-expression"]
  421 -> 426 [style=dashed label="id-expression"]
  421 -> 290 [style=dashed label="inclusive-or-expression"]
  421 -> 291 [style=dashed label="integer-literal"]
  421 -> 292 [style=dashed label="lambda-expression"]
  421 -> 293 [style=dashed label="lambda-introducer"]
  421 -> 294 [style=dashed label="literal"]
  421 -> 295 [style=dashed label="literal-operator-id"]
  421 -> 296 [style=dashed label="logical-and-expression"]
  421 -> 329 [style=dashed label="logical-or-expression"]
  421 -> 298 [style=dashed label="multiplicative-expression"]
  421 -> 85 [style=dashed label="namespace-alias"]
  421 -> 88 [style=dashed label="namespace-name"]
  421 -> 299 [style=dashed label="nested-name-specifier"]
  421 -> 90 [style=dashed label="nested-name-specifier-opt"]
  421 -> 300 [style=dashed label="new-expression"]
  421 -> 301 [style=dashed label="noexcept-expression"]
  421 -> 302 [style=dashed label="operator-function-id"]
  421 -> 94 [style=dashed label="placeholder-type-specifier"]
  421 -> 303 [style=dashed label="pm-expression"]
  421 -> 304 [style=dashed label="pointer-literal"]
  421 -> 305 [style=dashed label="postfix-expression"]
  421 -> 306 [style=dashed label="primary-expression"]
  421 -> 307 [style=dashed label="qualified-id"]
  421 -> 308 [style=dashed label="relational-expression"]
  421 -> 309 [style=dashed label="requires-expression"]
  421 -> 310 [style=dashed label="shift-expression"]
  421 -> 311 [style=dashed label="simple-template-id"]
  421 -> 427 [style=dashed label="simple-type-specifier"]
  421 -> 313 [style=dashed label="string-literal"]
  421 -> 428 [style=dashed label="template-argument"]
  421 -> 429 [style=dashed label="template-argument-list"]
  421 -> 694 [style=dashed label="template-argument-list-opt"]
  421 -> 314 [style=dashed label="template-id"]
  421 -> 102 [style=dashed label="template-name"]
  421 -> 104 [style=dashed label="type-constraint"]
  421 -> 105 [style=dashed label="type-constraint-opt"]
  421 -> 431 [style=dashed label="type-id"]
  421 -> 106 [style=dashed label="type-name"]
  421 -> 432 [style=dashed label="type-specifier"]
  421 -> 433 [style=dashed label="type-specifier-seq"]
  421 -> 108 [style=dashed label="typedef-name"]
  421 -> 434 [style=dashed label="typename-specifier"]
  421 -> 317 [style=dashed label="unary-expression"]
  421 -> 318 [style=dashed label="unary-operator"]
  421 -> 319 [style=dashed label="unqualified-id"]
  421 -> 320 [style=dashed label="user-defined-character-literal"]
  421 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  421 -> 322 [style=dashed label="user-defined-integer-literal"]
  421 -> 323 [style=dashed label="user-defined-literal"]
  421 -> 324 [style=dashed label="user-defined-string-literal"]
  421 -> "421R19" [style=solid]
 "421R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  421 -> "421R469d" [label="[IDENTIFIER]", style=solid]
 "421R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  421 -> "421R700" [label="[\">\"]", style=solid]
 "421R700" [label="R700", fillcolor=3, shape=diamond, style=filled]
  421 -> "421R722d" [label="[\"decltype\"]", style=solid]
 "421R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  421 -> "421R722" [label="[\"auto\"]", style=solid]
 "421R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  422 [label="State 422\n\l153 concept-name: IDENTIFIER •\l"]
  422 -> "422R153" [style=solid]
 "422R153" [label="R153", fillcolor=3, shape=diamond, style=filled]
  423 [label="State 423\n\l152 concept-definition: \"concept\" concept-name • \"=\" constraint-expression \";\"\l"]
  423 -> 695 [style=solid label="\"=\""]
  424 [label="State 424\n\l231 elaborated-type-specifier: class-key • attribute-specifier-seq-opt nested-name-specifier-opt IDENTIFIER\l232                          | class-key • simple-template-id\l233                          | class-key • nested-name-specifier TEMPLATE-opt simple-template-id\l"]
  424 -> 4 [style=solid label="IDENTIFIER"]
  424 -> 6 [style=solid label="\"::\""]
  424 -> 21 [style=solid label="\"decltype\""]
  424 -> 177 [style=dashed label="attribute-specifier-seq"]
  424 -> 696 [style=dashed label="attribute-specifier-seq-opt"]
  424 -> 55 [style=dashed label="class-name"]
  424 -> 121 [style=dashed label="decltype-specifier"]
  424 -> 71 [style=dashed label="enum-name"]
  424 -> 85 [style=dashed label="namespace-alias"]
  424 -> 88 [style=dashed label="namespace-name"]
  424 -> 179 [style=dashed label="nested-name-specifier"]
  424 -> 180 [style=dashed label="simple-template-id"]
  424 -> 102 [style=dashed label="template-name"]
  424 -> 106 [style=dashed label="type-name"]
  424 -> 108 [style=dashed label="typedef-name"]
  424 -> "424R83d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "424R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  424 -> "424R83" [style=solid]
 "424R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  425 [label="State 425\n\l695 template-argument: constant-expression •\l"]
  425 -> "425R695" [style=solid]
 "425R695" [label="R695", fillcolor=3, shape=diamond, style=filled]
  426 [label="State 426\n\l592 primary-expression: id-expression •\l697 template-argument: id-expression •\l"]
  426 -> "426R592" [style=solid]
 "426R592" [label="R592", fillcolor=3, shape=diamond, style=filled]
  426 -> "426R697d" [label="[\",\", \"...\", \">\"]", style=solid]
 "426R697d" [label="R697", fillcolor=5, shape=diamond, style=filled]
  427 [label="State 427\n\l574 postfix-expression: simple-type-specifier • \"(\" expression-list-opt \")\"\l576                   | simple-type-specifier • braced-init-list\l737 type-specifier: simple-type-specifier •\l"]
  427 -> 596 [style=solid label="\"(\""]
  427 -> 398 [style=solid label="\"{\""]
  427 -> 597 [style=dashed label="braced-init-list"]
  427 -> "427R737d" [label="[\"(\"]", style=solid]
 "427R737d" [label="R737", fillcolor=5, shape=diamond, style=filled]
  427 -> "427R737" [style=solid]
 "427R737" [label="R737", fillcolor=3, shape=diamond, style=filled]
  428 [label="State 428\n\l698 template-argument-list: template-argument • ELLIPSIS-opt\l"]
  428 -> 156 [style=solid label="\"...\""]
  428 -> 697 [style=dashed label="ELLIPSIS-opt"]
  428 -> "428R5" [style=solid]
 "428R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  429 [label="State 429\n\l699 template-argument-list: template-argument-list • \",\" template-argument ELLIPSIS-opt\l701 template-argument-list-opt: template-argument-list •\l"]
  429 -> 698 [style=solid label="\",\""]
  429 -> "429R701" [style=solid]
 "429R701" [label="R701", fillcolor=3, shape=diamond, style=filled]
  430 [label="State 430\n\l656 simple-template-id: template-name \"<\" template-argument-list-opt • \">\"\l"]
  430 -> 699 [style=solid label="\">\""]
  431 [label="State 431\n\l696 template-argument: type-id •\l"]
  431 -> "431R696" [style=solid]
 "431R696" [label="R696", fillcolor=3, shape=diamond, style=filled]
  432 [label="State 432\n\l741 type-specifier-seq: type-specifier • attribute-specifier-seq-opt\l742                   | type-specifier • type-specifier-seq\l"]
  432 -> 4 [style=solid label="IDENTIFIER"]
  432 -> 6 [style=solid label="\"::\""]
  432 -> 8 [style=solid label="\"typename\""]
  432 -> 12 [style=solid label="\"class\""]
  432 -> 13 [style=solid label="\"struct\""]
  432 -> 14 [style=solid label="\"union\""]
  432 -> 15 [style=solid label="\"const\""]
  432 -> 16 [style=solid label="\"volatile\""]
  432 -> 21 [style=solid label="\"decltype\""]
  432 -> 125 [style=solid label="\"enum\""]
  432 -> 27 [style=solid label="\"char\""]
  432 -> 28 [style=solid label="\"char8_t\""]
  432 -> 29 [style=solid label="\"char16_t\""]
  432 -> 30 [style=solid label="\"char32_t\""]
  432 -> 31 [style=solid label="\"wchar_t\""]
  432 -> 32 [style=solid label="\"bool\""]
  432 -> 33 [style=solid label="\"short\""]
  432 -> 34 [style=solid label="\"int\""]
  432 -> 35 [style=solid label="\"long\""]
  432 -> 36 [style=solid label="\"signed\""]
  432 -> 37 [style=solid label="\"unsigned\""]
  432 -> 38 [style=solid label="\"float\""]
  432 -> 39 [style=solid label="\"double\""]
  432 -> 40 [style=solid label="\"void\""]
  432 -> 177 [style=dashed label="attribute-specifier-seq"]
  432 -> 700 [style=dashed label="attribute-specifier-seq-opt"]
  432 -> 424 [style=dashed label="class-key"]
  432 -> 55 [style=dashed label="class-name"]
  432 -> 57 [style=dashed label="cv-qualifier"]
  432 -> 63 [style=dashed label="decltype-specifier"]
  432 -> 66 [style=dashed label="elaborated-enum-specifier"]
  432 -> 67 [style=dashed label="elaborated-type-specifier"]
  432 -> 71 [style=dashed label="enum-name"]
  432 -> 85 [style=dashed label="namespace-alias"]
  432 -> 88 [style=dashed label="namespace-name"]
  432 -> 89 [style=dashed label="nested-name-specifier"]
  432 -> 90 [style=dashed label="nested-name-specifier-opt"]
  432 -> 94 [style=dashed label="placeholder-type-specifier"]
  432 -> 96 [style=dashed label="simple-template-id"]
  432 -> 97 [style=dashed label="simple-type-specifier"]
  432 -> 102 [style=dashed label="template-name"]
  432 -> 104 [style=dashed label="type-constraint"]
  432 -> 105 [style=dashed label="type-constraint-opt"]
  432 -> 106 [style=dashed label="type-name"]
  432 -> 432 [style=dashed label="type-specifier"]
  432 -> 701 [style=dashed label="type-specifier-seq"]
  432 -> 108 [style=dashed label="typedef-name"]
  432 -> 109 [style=dashed label="typename-specifier"]
  432 -> "432R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"decltype\", \"enum\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\"]", style=solid]
 "432R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  432 -> "432R83" [style=solid]
 "432R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  432 -> "432R469d" [label="[IDENTIFIER]", style=solid]
 "432R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  432 -> "432R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "432R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  433 [label="State 433\n\l724 type-id: type-specifier-seq • abstract-declarator-opt\l"]
  433 -> 702 [style=solid label="\"...\""]
  433 -> 4 [style=solid label="IDENTIFIER"]
  433 -> 6 [style=solid label="\"::\""]
  433 -> 703 [style=solid label="\"(\""]
  433 -> 160 [style=solid label="\"&\""]
  433 -> 163 [style=solid label="\"&&\""]
  433 -> 21 [style=solid label="\"decltype\""]
  433 -> 164 [style=solid label="\"*\""]
  433 -> 704 [style=dashed label="abstract-declarator"]
  433 -> 705 [style=dashed label="abstract-declarator-opt"]
  433 -> 706 [style=dashed label="abstract-pack-declarator"]
  433 -> 55 [style=dashed label="class-name"]
  433 -> 121 [style=dashed label="decltype-specifier"]
  433 -> 71 [style=dashed label="enum-name"]
  433 -> 85 [style=dashed label="namespace-alias"]
  433 -> 88 [style=dashed label="namespace-name"]
  433 -> 187 [style=dashed label="nested-name-specifier"]
  433 -> 707 [style=dashed label="noptr-abstract-declarator"]
  433 -> 708 [style=dashed label="noptr-abstract-declarator-opt"]
  433 -> 709 [style=dashed label="noptr-abstract-pack-declarator"]
  433 -> 710 [style=dashed label="ptr-abstract-declarator"]
  433 -> 711 [style=dashed label="ptr-operator"]
  433 -> 96 [style=dashed label="simple-template-id"]
  433 -> 102 [style=dashed label="template-name"]
  433 -> 106 [style=dashed label="type-name"]
  433 -> 108 [style=dashed label="typedef-name"]
  433 -> "433R32d" [label="[\"...\", \"(\"]", style=solid]
 "433R32d" [label="R32", fillcolor=5, shape=diamond, style=filled]
  433 -> "433R32" [style=solid]
 "433R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  433 -> "433R496d" [label="[\"(\"]", style=solid]
 "433R496d" [label="R496", fillcolor=5, shape=diamond, style=filled]
  433 -> "433R496" [label="[\"[\"]", style=solid]
 "433R496" [label="R496", fillcolor=3, shape=diamond, style=filled]
  434 [label="State 434\n\l575 postfix-expression: typename-specifier • \"(\" expression-list-opt \")\"\l577                   | typename-specifier • braced-init-list\l739 type-specifier: typename-specifier •\l"]
  434 -> 600 [style=solid label="\"(\""]
  434 -> 398 [style=solid label="\"{\""]
  434 -> 601 [style=dashed label="braced-init-list"]
  434 -> "434R739d" [label="[\"(\"]", style=solid]
 "434R739d" [label="R739", fillcolor=5, shape=diamond, style=filled]
  434 -> "434R739" [style=solid]
 "434R739" [label="R739", fillcolor=3, shape=diamond, style=filled]
  435 [label="State 435\n\l566 placeholder-type-specifier: type-constraint-opt \"decltype\" \"(\" • \"auto\" \")\"\l"]
  435 -> 712 [style=solid label="\"auto\""]
  436 [label="State 436\n\l273 export-declaration: \"export\" \"{\" declaration-seq-opt \"}\" •\l"]
  436 -> "436R273" [style=solid]
 "436R273" [label="R273", fillcolor=3, shape=diamond, style=filled]
  437 [label="State 437\n\l394 linkage-specification: \"extern\" string-literal \"{\" declaration-seq-opt • \"}\"\l"]
  437 -> 713 [style=solid label="\"}\""]
  438 [label="State 438\n\l704 template-head: \"template\" \"<\" • template-parameter-list \">\" requires-clause-opt\l"]
  438 -> 4 [style=solid label="IDENTIFIER"]
  438 -> 6 [style=solid label="\"::\""]
  438 -> 216 [style=solid label="\"template\""]
  438 -> 217 [style=solid label="\"typename\""]
  438 -> 218 [style=solid label="\"class\""]
  438 -> 21 [style=solid label="\"decltype\""]
  438 -> 177 [style=dashed label="attribute-specifier-seq"]
  438 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  438 -> 55 [style=dashed label="class-name"]
  438 -> 121 [style=dashed label="decltype-specifier"]
  438 -> 71 [style=dashed label="enum-name"]
  438 -> 85 [style=dashed label="namespace-alias"]
  438 -> 88 [style=dashed label="namespace-name"]
  438 -> 133 [style=dashed label="nested-name-specifier"]
  438 -> 221 [style=dashed label="nested-name-specifier-opt"]
  438 -> 222 [style=dashed label="parameter-declaration"]
  438 -> 96 [style=dashed label="simple-template-id"]
  438 -> 223 [style=dashed label="template-head"]
  438 -> 102 [style=dashed label="template-name"]
  438 -> 224 [style=dashed label="template-parameter"]
  438 -> 225 [style=dashed label="template-parameter-list"]
  438 -> 226 [style=dashed label="type-constraint"]
  438 -> 106 [style=dashed label="type-name"]
  438 -> 227 [style=dashed label="type-parameter"]
  438 -> 228 [style=dashed label="type-parameter-key"]
  438 -> 108 [style=dashed label="typedef-name"]
  438 -> "438R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"class\", \"decltype\"]", style=solid]
 "438R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  438 -> "438R83" [style=solid]
 "438R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  438 -> "438R469d" [label="[IDENTIFIER]", style=solid]
 "438R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  439 [label="State 439\n\l267 explicit-specialization: \"template\" \"<\" \">\" declaration •\l"]
  439 -> "439R267" [style=solid]
 "439R267" [label="R267", fillcolor=3, shape=diamond, style=filled]
  440 [label="State 440\n\l 24 THIS-opt: \"this\" •\l"]
  440 -> "440R24" [style=solid]
 "440R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  441 [label="State 441\n\l554 parameter-declaration: attribute-specifier-seq-opt THIS-opt • decl-specifier-seq declarator\l555                      | attribute-specifier-seq-opt THIS-opt • decl-specifier-seq declarator \"=\" initializer-clause\l556                      | attribute-specifier-seq-opt THIS-opt • decl-specifier-seq abstract-declarator-opt\l557                      | attribute-specifier-seq-opt THIS-opt • decl-specifier-seq abstract-declarator-opt \"=\" initializer-clause\l"]
  441 -> 1 [style=solid label="\"constexpr\""]
  441 -> 150 [style=solid label="\"extern\""]
  441 -> 4 [style=solid label="IDENTIFIER"]
  441 -> 151 [style=solid label="\"inline\""]
  441 -> 6 [style=solid label="\"::\""]
  441 -> 8 [style=solid label="\"typename\""]
  441 -> 9 [style=solid label="\"virtual\""]
  441 -> 12 [style=solid label="\"class\""]
  441 -> 13 [style=solid label="\"struct\""]
  441 -> 14 [style=solid label="\"union\""]
  441 -> 15 [style=solid label="\"const\""]
  441 -> 16 [style=solid label="\"volatile\""]
  441 -> 17 [style=solid label="\"friend\""]
  441 -> 18 [style=solid label="\"typedef\""]
  441 -> 19 [style=solid label="\"consteval\""]
  441 -> 20 [style=solid label="\"constinit\""]
  441 -> 21 [style=solid label="\"decltype\""]
  441 -> 22 [style=solid label="\"enum\""]
  441 -> 23 [style=solid label="\"explicit\""]
  441 -> 27 [style=solid label="\"char\""]
  441 -> 28 [style=solid label="\"char8_t\""]
  441 -> 29 [style=solid label="\"char16_t\""]
  441 -> 30 [style=solid label="\"char32_t\""]
  441 -> 31 [style=solid label="\"wchar_t\""]
  441 -> 32 [style=solid label="\"bool\""]
  441 -> 33 [style=solid label="\"short\""]
  441 -> 34 [style=solid label="\"int\""]
  441 -> 35 [style=solid label="\"long\""]
  441 -> 36 [style=solid label="\"signed\""]
  441 -> 37 [style=solid label="\"unsigned\""]
  441 -> 38 [style=solid label="\"float\""]
  441 -> 39 [style=solid label="\"double\""]
  441 -> 40 [style=solid label="\"void\""]
  441 -> 42 [style=solid label="\"static\""]
  441 -> 43 [style=solid label="\"thread_local\""]
  441 -> 44 [style=solid label="\"mutable\""]
  441 -> 53 [style=dashed label="class-head"]
  441 -> 54 [style=dashed label="class-key"]
  441 -> 55 [style=dashed label="class-name"]
  441 -> 56 [style=dashed label="class-specifier"]
  441 -> 57 [style=dashed label="cv-qualifier"]
  441 -> 58 [style=dashed label="decl-specifier"]
  441 -> 714 [style=dashed label="decl-specifier-seq"]
  441 -> 63 [style=dashed label="decltype-specifier"]
  441 -> 65 [style=dashed label="defining-type-specifier"]
  441 -> 66 [style=dashed label="elaborated-enum-specifier"]
  441 -> 67 [style=dashed label="elaborated-type-specifier"]
  441 -> 69 [style=dashed label="enum-head"]
  441 -> 154 [style=dashed label="enum-key"]
  441 -> 71 [style=dashed label="enum-name"]
  441 -> 72 [style=dashed label="enum-specifier"]
  441 -> 155 [style=dashed label="explicit-specifier"]
  441 -> 79 [style=dashed label="function-specifier"]
  441 -> 85 [style=dashed label="namespace-alias"]
  441 -> 88 [style=dashed label="namespace-name"]
  441 -> 89 [style=dashed label="nested-name-specifier"]
  441 -> 90 [style=dashed label="nested-name-specifier-opt"]
  441 -> 94 [style=dashed label="placeholder-type-specifier"]
  441 -> 96 [style=dashed label="simple-template-id"]
  441 -> 97 [style=dashed label="simple-type-specifier"]
  441 -> 99 [style=dashed label="storage-class-specifier"]
  441 -> 102 [style=dashed label="template-name"]
  441 -> 104 [style=dashed label="type-constraint"]
  441 -> 105 [style=dashed label="type-constraint-opt"]
  441 -> 106 [style=dashed label="type-name"]
  441 -> 107 [style=dashed label="type-specifier"]
  441 -> 108 [style=dashed label="typedef-name"]
  441 -> 109 [style=dashed label="typename-specifier"]
  441 -> "441R469d" [label="[IDENTIFIER]", style=solid]
 "441R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  441 -> "441R722d" [label="[\"decltype\"]", style=solid]
 "441R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  441 -> "441R722" [label="[]", style=solid]
 "441R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  442 [label="State 442\n\l732 type-parameter: template-head type-parameter-key • ELLIPSIS-opt IDENTIFIER-opt\l733               | template-head type-parameter-key • IDENTIFIER-opt \"=\" id-expression\l"]
  442 -> 156 [style=solid label="\"...\""]
  442 -> 445 [style=solid label="IDENTIFIER"]
  442 -> 715 [style=dashed label="ELLIPSIS-opt"]
  442 -> 716 [style=dashed label="IDENTIFIER-opt"]
  442 -> "442R5d" [label="[IDENTIFIER]", style=solid]
 "442R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  442 -> "442R5" [style=solid]
 "442R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  442 -> "442R11" [label="[\"=\"]", style=solid]
 "442R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  443 [label="State 443\n\l712 template-parameter-list: template-parameter-list \",\" • template-parameter\l"]
  443 -> 4 [style=solid label="IDENTIFIER"]
  443 -> 6 [style=solid label="\"::\""]
  443 -> 216 [style=solid label="\"template\""]
  443 -> 217 [style=solid label="\"typename\""]
  443 -> 218 [style=solid label="\"class\""]
  443 -> 21 [style=solid label="\"decltype\""]
  443 -> 177 [style=dashed label="attribute-specifier-seq"]
  443 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  443 -> 55 [style=dashed label="class-name"]
  443 -> 121 [style=dashed label="decltype-specifier"]
  443 -> 71 [style=dashed label="enum-name"]
  443 -> 85 [style=dashed label="namespace-alias"]
  443 -> 88 [style=dashed label="namespace-name"]
  443 -> 133 [style=dashed label="nested-name-specifier"]
  443 -> 221 [style=dashed label="nested-name-specifier-opt"]
  443 -> 222 [style=dashed label="parameter-declaration"]
  443 -> 96 [style=dashed label="simple-template-id"]
  443 -> 223 [style=dashed label="template-head"]
  443 -> 102 [style=dashed label="template-name"]
  443 -> 717 [style=dashed label="template-parameter"]
  443 -> 226 [style=dashed label="type-constraint"]
  443 -> 106 [style=dashed label="type-name"]
  443 -> 227 [style=dashed label="type-parameter"]
  443 -> 228 [style=dashed label="type-parameter-key"]
  443 -> 108 [style=dashed label="typedef-name"]
  443 -> "443R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"class\", \"decltype\"]", style=solid]
 "443R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  443 -> "443R83" [style=solid]
 "443R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  443 -> "443R469d" [label="[IDENTIFIER]", style=solid]
 "443R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  444 [label="State 444\n\l704 template-head: \"template\" \"<\" template-parameter-list \">\" • requires-clause-opt\l"]
  444 -> 399 [style=solid label="\"requires\""]
  444 -> 718 [style=dashed label="requires-clause"]
  444 -> 719 [style=dashed label="requires-clause-opt"]
  444 -> "444R634" [style=solid]
 "444R634" [label="R634", fillcolor=3, shape=diamond, style=filled]
  445 [label="State 445\n\l 12 IDENTIFIER-opt: IDENTIFIER •\l"]
  445 -> "445R12" [style=solid]
 "445R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  446 [label="State 446\n\l730 type-parameter: type-constraint ELLIPSIS-opt • IDENTIFIER-opt\l"]
  446 -> 445 [style=solid label="IDENTIFIER"]
  446 -> 720 [style=dashed label="IDENTIFIER-opt"]
  446 -> "446R11" [style=solid]
 "446R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  447 [label="State 447\n\l731 type-parameter: type-constraint IDENTIFIER-opt • \"=\" type-id\l"]
  447 -> 721 [style=solid label="\"=\""]
  448 [label="State 448\n\l728 type-parameter: type-parameter-key ELLIPSIS-opt • IDENTIFIER-opt\l"]
  448 -> 445 [style=solid label="IDENTIFIER"]
  448 -> 722 [style=dashed label="IDENTIFIER-opt"]
  448 -> "448R11" [style=solid]
 "448R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  449 [label="State 449\n\l729 type-parameter: type-parameter-key IDENTIFIER-opt • \"=\" type-id\l"]
  449 -> 723 [style=solid label="\"=\""]
  450 [label="State 450\n\l468 nested-name-specifier: nested-name-specifier TEMPLATE-opt simple-template-id • \"::\"\l746 typename-specifier: \"typename\" nested-name-specifier TEMPLATE-opt simple-template-id •\l"]
  450 -> 693 [style=solid label="\"::\""]
  450 -> "450R746d" [label="[\"::\"]", style=solid]
 "450R746d" [label="R746", fillcolor=5, shape=diamond, style=filled]
  450 -> "450R746" [style=solid]
 "450R746" [label="R746", fillcolor=3, shape=diamond, style=filled]
  451 [label="State 451\n\l 44 alias-declaration: \"using\" IDENTIFIER attribute-specifier-seq-opt \"=\" • defining-type-id \";\"\l"]
  451 -> 4 [style=solid label="IDENTIFIER"]
  451 -> 6 [style=solid label="\"::\""]
  451 -> 8 [style=solid label="\"typename\""]
  451 -> 12 [style=solid label="\"class\""]
  451 -> 13 [style=solid label="\"struct\""]
  451 -> 14 [style=solid label="\"union\""]
  451 -> 15 [style=solid label="\"const\""]
  451 -> 16 [style=solid label="\"volatile\""]
  451 -> 21 [style=solid label="\"decltype\""]
  451 -> 22 [style=solid label="\"enum\""]
  451 -> 27 [style=solid label="\"char\""]
  451 -> 28 [style=solid label="\"char8_t\""]
  451 -> 29 [style=solid label="\"char16_t\""]
  451 -> 30 [style=solid label="\"char32_t\""]
  451 -> 31 [style=solid label="\"wchar_t\""]
  451 -> 32 [style=solid label="\"bool\""]
  451 -> 33 [style=solid label="\"short\""]
  451 -> 34 [style=solid label="\"int\""]
  451 -> 35 [style=solid label="\"long\""]
  451 -> 36 [style=solid label="\"signed\""]
  451 -> 37 [style=solid label="\"unsigned\""]
  451 -> 38 [style=solid label="\"float\""]
  451 -> 39 [style=solid label="\"double\""]
  451 -> 40 [style=solid label="\"void\""]
  451 -> 53 [style=dashed label="class-head"]
  451 -> 54 [style=dashed label="class-key"]
  451 -> 55 [style=dashed label="class-name"]
  451 -> 56 [style=dashed label="class-specifier"]
  451 -> 57 [style=dashed label="cv-qualifier"]
  451 -> 63 [style=dashed label="decltype-specifier"]
  451 -> 724 [style=dashed label="defining-type-id"]
  451 -> 725 [style=dashed label="defining-type-specifier"]
  451 -> 726 [style=dashed label="defining-type-specifier-seq"]
  451 -> 66 [style=dashed label="elaborated-enum-specifier"]
  451 -> 67 [style=dashed label="elaborated-type-specifier"]
  451 -> 69 [style=dashed label="enum-head"]
  451 -> 154 [style=dashed label="enum-key"]
  451 -> 71 [style=dashed label="enum-name"]
  451 -> 72 [style=dashed label="enum-specifier"]
  451 -> 85 [style=dashed label="namespace-alias"]
  451 -> 88 [style=dashed label="namespace-name"]
  451 -> 89 [style=dashed label="nested-name-specifier"]
  451 -> 90 [style=dashed label="nested-name-specifier-opt"]
  451 -> 94 [style=dashed label="placeholder-type-specifier"]
  451 -> 96 [style=dashed label="simple-template-id"]
  451 -> 97 [style=dashed label="simple-type-specifier"]
  451 -> 102 [style=dashed label="template-name"]
  451 -> 104 [style=dashed label="type-constraint"]
  451 -> 105 [style=dashed label="type-constraint-opt"]
  451 -> 106 [style=dashed label="type-name"]
  451 -> 107 [style=dashed label="type-specifier"]
  451 -> 108 [style=dashed label="typedef-name"]
  451 -> 109 [style=dashed label="typename-specifier"]
  451 -> "451R469d" [label="[IDENTIFIER]", style=solid]
 "451R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  451 -> "451R722d" [label="[\"decltype\"]", style=solid]
 "451R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  451 -> "451R722" [label="[]", style=solid]
 "451R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  452 [label="State 452\n\l467 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l708 template-name: IDENTIFIER •\l767 unqualified-id: IDENTIFIER •\l"]
  452 -> 418 [style=solid label="\"::\""]
  452 -> "452R708" [label="[\"<\"]", style=solid]
 "452R708" [label="R708", fillcolor=3, shape=diamond, style=filled]
  452 -> "452R767" [style=solid]
 "452R767" [label="R767", fillcolor=3, shape=diamond, style=filled]
  453 [label="State 453\n\l705 template-id: simple-template-id •\l"]
  453 -> "453R705" [style=solid]
 "453R705" [label="R705", fillcolor=3, shape=diamond, style=filled]
  454 [label="State 454\n\l783 using-declarator: TYPENAME-opt nested-name-specifier unqualified-id •\l"]
  454 -> "454R783" [style=solid]
 "454R783" [label="R783", fillcolor=3, shape=diamond, style=filled]
  455 [label="State 455\n\l785 using-declarator-list: using-declarator-list \",\" using-declarator • ELLIPSIS-opt\l"]
  455 -> 156 [style=solid label="\"...\""]
  455 -> 727 [style=dashed label="ELLIPSIS-opt"]
  455 -> "455R5" [style=solid]
 "455R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  456 [label="State 456\n\l488 noexcept-expression: \"noexcept\" \"(\" • expression \")\"\l"]
  456 -> 238 [style=solid label="IDENTIFIER"]
  456 -> 239 [style=solid label="\"noexcept\""]
  456 -> 240 [style=solid label="\"!\""]
  456 -> 241 [style=solid label="\"::\""]
  456 -> 242 [style=solid label="\"this\""]
  456 -> 8 [style=solid label="\"typename\""]
  456 -> 243 [style=solid label="\"+\""]
  456 -> 244 [style=solid label="\"-\""]
  456 -> 245 [style=solid label="\"(\""]
  456 -> 246 [style=solid label="\"&\""]
  456 -> 247 [style=solid label="\"[\""]
  456 -> 248 [style=solid label="\"co_await\""]
  456 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  456 -> 250 [style=solid label="CHARACTER_LITERAL"]
  456 -> 251 [style=solid label="\"operator\""]
  456 -> 21 [style=solid label="\"decltype\""]
  456 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  456 -> 253 [style=solid label="\"*\""]
  456 -> 254 [style=solid label="INTEGER_LITERAL"]
  456 -> 255 [style=solid label="\"requires\""]
  456 -> 256 [style=solid label="\"~\""]
  456 -> 257 [style=solid label="\"++\""]
  456 -> 258 [style=solid label="\"--\""]
  456 -> 259 [style=solid label="POINTER_LITERAL"]
  456 -> 260 [style=solid label="\"dynamic_cast\""]
  456 -> 261 [style=solid label="\"static_cast\""]
  456 -> 262 [style=solid label="\"reinterpret_cast\""]
  456 -> 263 [style=solid label="\"const_cast\""]
  456 -> 264 [style=solid label="\"typeid\""]
  456 -> 27 [style=solid label="\"char\""]
  456 -> 28 [style=solid label="\"char8_t\""]
  456 -> 29 [style=solid label="\"char16_t\""]
  456 -> 30 [style=solid label="\"char32_t\""]
  456 -> 31 [style=solid label="\"wchar_t\""]
  456 -> 32 [style=solid label="\"bool\""]
  456 -> 33 [style=solid label="\"short\""]
  456 -> 34 [style=solid label="\"int\""]
  456 -> 35 [style=solid label="\"long\""]
  456 -> 36 [style=solid label="\"signed\""]
  456 -> 37 [style=solid label="\"unsigned\""]
  456 -> 38 [style=solid label="\"float\""]
  456 -> 39 [style=solid label="\"double\""]
  456 -> 40 [style=solid label="\"void\""]
  456 -> 118 [style=solid label="STRING_LITERAL"]
  456 -> 265 [style=solid label="\"throw\""]
  456 -> 266 [style=solid label="\"sizeof\""]
  456 -> 267 [style=solid label="\"alignof\""]
  456 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  456 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  456 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  456 -> 271 [style=solid label="\"co_yield\""]
  456 -> 272 [style=dashed label="SCOPE-opt"]
  456 -> 273 [style=dashed label="additive-expression"]
  456 -> 274 [style=dashed label="and-expression"]
  456 -> 275 [style=dashed label="assignment-expression"]
  456 -> 276 [style=dashed label="await-expression"]
  456 -> 277 [style=dashed label="boolean-literal"]
  456 -> 278 [style=dashed label="cast-expression"]
  456 -> 279 [style=dashed label="character-literal"]
  456 -> 55 [style=dashed label="class-name"]
  456 -> 280 [style=dashed label="compare-expression"]
  456 -> 281 [style=dashed label="conditional-expression"]
  456 -> 282 [style=dashed label="conversion-function-id"]
  456 -> 63 [style=dashed label="decltype-specifier"]
  456 -> 283 [style=dashed label="delete-expression"]
  456 -> 71 [style=dashed label="enum-name"]
  456 -> 284 [style=dashed label="equality-expression"]
  456 -> 285 [style=dashed label="exclusive-or-expression"]
  456 -> 728 [style=dashed label="expression"]
  456 -> 287 [style=dashed label="floating-point-literal"]
  456 -> 288 [style=dashed label="fold-expression"]
  456 -> 289 [style=dashed label="id-expression"]
  456 -> 290 [style=dashed label="inclusive-or-expression"]
  456 -> 291 [style=dashed label="integer-literal"]
  456 -> 292 [style=dashed label="lambda-expression"]
  456 -> 293 [style=dashed label="lambda-introducer"]
  456 -> 294 [style=dashed label="literal"]
  456 -> 295 [style=dashed label="literal-operator-id"]
  456 -> 296 [style=dashed label="logical-and-expression"]
  456 -> 297 [style=dashed label="logical-or-expression"]
  456 -> 298 [style=dashed label="multiplicative-expression"]
  456 -> 85 [style=dashed label="namespace-alias"]
  456 -> 88 [style=dashed label="namespace-name"]
  456 -> 299 [style=dashed label="nested-name-specifier"]
  456 -> 90 [style=dashed label="nested-name-specifier-opt"]
  456 -> 300 [style=dashed label="new-expression"]
  456 -> 301 [style=dashed label="noexcept-expression"]
  456 -> 302 [style=dashed label="operator-function-id"]
  456 -> 94 [style=dashed label="placeholder-type-specifier"]
  456 -> 303 [style=dashed label="pm-expression"]
  456 -> 304 [style=dashed label="pointer-literal"]
  456 -> 305 [style=dashed label="postfix-expression"]
  456 -> 306 [style=dashed label="primary-expression"]
  456 -> 307 [style=dashed label="qualified-id"]
  456 -> 308 [style=dashed label="relational-expression"]
  456 -> 309 [style=dashed label="requires-expression"]
  456 -> 310 [style=dashed label="shift-expression"]
  456 -> 311 [style=dashed label="simple-template-id"]
  456 -> 312 [style=dashed label="simple-type-specifier"]
  456 -> 313 [style=dashed label="string-literal"]
  456 -> 314 [style=dashed label="template-id"]
  456 -> 102 [style=dashed label="template-name"]
  456 -> 315 [style=dashed label="throw-expression"]
  456 -> 104 [style=dashed label="type-constraint"]
  456 -> 105 [style=dashed label="type-constraint-opt"]
  456 -> 106 [style=dashed label="type-name"]
  456 -> 108 [style=dashed label="typedef-name"]
  456 -> 316 [style=dashed label="typename-specifier"]
  456 -> 317 [style=dashed label="unary-expression"]
  456 -> 318 [style=dashed label="unary-operator"]
  456 -> 319 [style=dashed label="unqualified-id"]
  456 -> 320 [style=dashed label="user-defined-character-literal"]
  456 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  456 -> 322 [style=dashed label="user-defined-integer-literal"]
  456 -> 323 [style=dashed label="user-defined-literal"]
  456 -> 324 [style=dashed label="user-defined-string-literal"]
  456 -> 325 [style=dashed label="yield-expression"]
  456 -> "456R19" [style=solid]
 "456R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  456 -> "456R469d" [label="[IDENTIFIER]", style=solid]
 "456R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  456 -> "456R722d" [label="[\"decltype\"]", style=solid]
 "456R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  456 -> "456R722" [label="[\"auto\"]", style=solid]
 "456R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  457 [label="State 457\n\l289 fold-expression: \"(\" \"...\" • fold-operator cast-expression \")\"\l"]
  457 -> 729 [style=solid label="\",\""]
  457 -> 730 [style=solid label="\"+\""]
  457 -> 731 [style=solid label="\"-\""]
  457 -> 732 [style=solid label="\"=\""]
  457 -> 733 [style=solid label="\"&\""]
  457 -> 734 [style=solid label="\"*=\""]
  457 -> 735 [style=solid label="\"/=\""]
  457 -> 736 [style=solid label="\"%=\""]
  457 -> 737 [style=solid label="\"+=\""]
  457 -> 738 [style=solid label="\"-=\""]
  457 -> 739 [style=solid label="\">>=\""]
  457 -> 740 [style=solid label="\"<<=\""]
  457 -> 741 [style=solid label="\"&=\""]
  457 -> 742 [style=solid label="\"^=\""]
  457 -> 743 [style=solid label="\"|=\""]
  457 -> 744 [style=solid label="\"&&\""]
  457 -> 745 [style=solid label="\"||\""]
  457 -> 746 [style=solid label="\"==\""]
  457 -> 747 [style=solid label="\"!=\""]
  457 -> 748 [style=solid label="\"^\""]
  457 -> 749 [style=solid label="\"<\""]
  457 -> 750 [style=solid label="\">\""]
  457 -> 751 [style=solid label="\"*\""]
  457 -> 752 [style=solid label="\"/\""]
  457 -> 753 [style=solid label="\"%\""]
  457 -> 754 [style=solid label="\"|\""]
  457 -> 755 [style=solid label="\"<<\""]
  457 -> 756 [style=solid label="\">>\""]
  457 -> 757 [style=solid label="\"<=\""]
  457 -> 758 [style=solid label="\">=\""]
  457 -> 759 [style=solid label="\".*\""]
  457 -> 760 [style=solid label="\"->*\""]
  457 -> 761 [style=dashed label="fold-operator"]
  458 [label="State 458\n\l288 fold-expression: \"(\" cast-expression • fold-operator \"...\" \")\"\l290                | \"(\" cast-expression • fold-operator \"...\" fold-operator cast-expression \")\"\l567 pm-expression: cast-expression •\l"]
  458 -> 729 [style=solid label="\",\""]
  458 -> 730 [style=solid label="\"+\""]
  458 -> 731 [style=solid label="\"-\""]
  458 -> 732 [style=solid label="\"=\""]
  458 -> 733 [style=solid label="\"&\""]
  458 -> 734 [style=solid label="\"*=\""]
  458 -> 735 [style=solid label="\"/=\""]
  458 -> 736 [style=solid label="\"%=\""]
  458 -> 737 [style=solid label="\"+=\""]
  458 -> 738 [style=solid label="\"-=\""]
  458 -> 739 [style=solid label="\">>=\""]
  458 -> 740 [style=solid label="\"<<=\""]
  458 -> 741 [style=solid label="\"&=\""]
  458 -> 742 [style=solid label="\"^=\""]
  458 -> 743 [style=solid label="\"|=\""]
  458 -> 744 [style=solid label="\"&&\""]
  458 -> 745 [style=solid label="\"||\""]
  458 -> 746 [style=solid label="\"==\""]
  458 -> 747 [style=solid label="\"!=\""]
  458 -> 748 [style=solid label="\"^\""]
  458 -> 749 [style=solid label="\"<\""]
  458 -> 750 [style=solid label="\">\""]
  458 -> 751 [style=solid label="\"*\""]
  458 -> 752 [style=solid label="\"/\""]
  458 -> 753 [style=solid label="\"%\""]
  458 -> 754 [style=solid label="\"|\""]
  458 -> 755 [style=solid label="\"<<\""]
  458 -> 756 [style=solid label="\">>\""]
  458 -> 757 [style=solid label="\"<=\""]
  458 -> 758 [style=solid label="\">=\""]
  458 -> 759 [style=solid label="\".*\""]
  458 -> 760 [style=solid label="\"->*\""]
  458 -> 762 [style=dashed label="fold-operator"]
  458 -> "458R567d" [label="[\",\", \"+\", \"-\", \"=\", \"&\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"&&\", \"||\", \"==\", \"!=\", \"^\", \"<\", \">\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\"]", style=solid]
 "458R567d" [label="R567", fillcolor=5, shape=diamond, style=filled]
  458 -> "458R567" [style=solid]
 "458R567" [label="R567", fillcolor=3, shape=diamond, style=filled]
  459 [label="State 459\n\l280 expression: expression • \",\" assignment-expression\l591 primary-expression: \"(\" expression • \")\"\l"]
  459 -> 552 [style=solid label="\",\""]
  459 -> 763 [style=solid label="\")\""]
  460 [label="State 460\n\l131 cast-expression: \"(\" type-id • \")\" cast-expression\l"]
  460 -> 764 [style=solid label="\")\""]
  461 [label="State 461\n\l648 simple-capture: IDENTIFIER • ELLIPSIS-opt\l"]
  461 -> 156 [style=solid label="\"...\""]
  461 -> 765 [style=dashed label="ELLIPSIS-opt"]
  461 -> "461R5" [style=solid]
 "461R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  462 [label="State 462\n\l650 simple-capture: \"this\" •\l"]
  462 -> "462R650" [style=solid]
 "462R650" [label="R650", fillcolor=3, shape=diamond, style=filled]
  463 [label="State 463\n\l127 capture-default: \"=\" •\l"]
  463 -> "463R127" [style=solid]
 "463R127" [label="R127", fillcolor=3, shape=diamond, style=filled]
  464 [label="State 464\n\l126 capture-default: \"&\" •\l350 init-capture: \"&\" • ELLIPSIS-opt IDENTIFIER initializer\l649 simple-capture: \"&\" • IDENTIFIER ELLIPSIS-opt\l"]
  464 -> 156 [style=solid label="\"...\""]
  464 -> 766 [style=solid label="IDENTIFIER"]
  464 -> 767 [style=dashed label="ELLIPSIS-opt"]
  464 -> "464R5d" [label="[IDENTIFIER]", style=solid]
 "464R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  464 -> "464R126" [label="[]", style=solid]
 "464R126" [label="R126", fillcolor=3, shape=diamond, style=filled]
  465 [label="State 465\n\l651 simple-capture: \"*\" • \"this\"\l"]
  465 -> 768 [style=solid label="\"this\""]
  466 [label="State 466\n\l349 init-capture: ELLIPSIS-opt • IDENTIFIER initializer\l"]
  466 -> 769 [style=solid label="IDENTIFIER"]
  467 [label="State 467\n\l128 capture-list: capture •\l"]
  467 -> "467R128" [style=solid]
 "467R128" [label="R128", fillcolor=3, shape=diamond, style=filled]
  468 [label="State 468\n\l383 lambda-capture: capture-default •\l385               | capture-default • \",\" capture-list\l"]
  468 -> 770 [style=solid label="\",\""]
  468 -> "468R383" [style=solid]
 "468R383" [label="R383", fillcolor=3, shape=diamond, style=filled]
  469 [label="State 469\n\l129 capture-list: capture-list • \",\" capture\l384 lambda-capture: capture-list •\l"]
  469 -> 771 [style=solid label="\",\""]
  469 -> "469R384" [style=solid]
 "469R384" [label="R384", fillcolor=3, shape=diamond, style=filled]
  470 [label="State 470\n\l125 capture: init-capture •\l"]
  470 -> "470R125" [style=solid]
 "470R125" [label="R125", fillcolor=3, shape=diamond, style=filled]
  471 [label="State 471\n\l387 lambda-capture-opt: lambda-capture •\l"]
  471 -> "471R387" [style=solid]
 "471R387" [label="R387", fillcolor=3, shape=diamond, style=filled]
  472 [label="State 472\n\l392 lambda-introducer: \"[\" lambda-capture-opt • \"]\"\l"]
  472 -> 772 [style=solid label="\"]\""]
  473 [label="State 473\n\l124 capture: simple-capture •\l"]
  473 -> "473R124" [style=solid]
 "473R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
  474 [label="State 474\n\l 90 await-expression: \"co_await\" cast-expression •\l"]
  474 -> "474R90" [style=solid]
 "474R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
  475 [label="State 475\n\l553 overloadable-operator: \",\" •\l"]
  475 -> "475R553" [style=solid]
 "475R553" [label="R553", fillcolor=3, shape=diamond, style=filled]
  476 [label="State 476\n\l520 overloadable-operator: \"!\" •\l"]
  476 -> "476R520" [style=solid]
 "476R520" [label="R520", fillcolor=3, shape=diamond, style=filled]
  477 [label="State 477\n\l521 overloadable-operator: \"+\" •\l"]
  477 -> "477R521" [style=solid]
 "477R521" [label="R521", fillcolor=3, shape=diamond, style=filled]
  478 [label="State 478\n\l522 overloadable-operator: \"-\" •\l"]
  478 -> "478R522" [style=solid]
 "478R522" [label="R522", fillcolor=3, shape=diamond, style=filled]
  479 [label="State 479\n\l529 overloadable-operator: \"=\" •\l"]
  479 -> "479R529" [style=solid]
 "479R529" [label="R529", fillcolor=3, shape=diamond, style=filled]
  480 [label="State 480\n\l515 overloadable-operator: \"(\" • \")\"\l"]
  480 -> 773 [style=solid label="\")\""]
  481 [label="State 481\n\l527 overloadable-operator: \"&\" •\l"]
  481 -> "481R527" [style=solid]
 "481R527" [label="R527", fillcolor=3, shape=diamond, style=filled]
  482 [label="State 482\n\l532 overloadable-operator: \"*=\" •\l"]
  482 -> "482R532" [style=solid]
 "482R532" [label="R532", fillcolor=3, shape=diamond, style=filled]
  483 [label="State 483\n\l533 overloadable-operator: \"/=\" •\l"]
  483 -> "483R533" [style=solid]
 "483R533" [label="R533", fillcolor=3, shape=diamond, style=filled]
  484 [label="State 484\n\l534 overloadable-operator: \"%=\" •\l"]
  484 -> "484R534" [style=solid]
 "484R534" [label="R534", fillcolor=3, shape=diamond, style=filled]
  485 [label="State 485\n\l530 overloadable-operator: \"+=\" •\l"]
  485 -> "485R530" [style=solid]
 "485R530" [label="R530", fillcolor=3, shape=diamond, style=filled]
  486 [label="State 486\n\l531 overloadable-operator: \"-=\" •\l"]
  486 -> "486R531" [style=solid]
 "486R531" [label="R531", fillcolor=3, shape=diamond, style=filled]
  487 [label="State 487\n\l550 overloadable-operator: \">>=\" •\l"]
  487 -> "487R550" [style=solid]
 "487R550" [label="R550", fillcolor=3, shape=diamond, style=filled]
  488 [label="State 488\n\l549 overloadable-operator: \"<<=\" •\l"]
  488 -> "488R549" [style=solid]
 "488R549" [label="R549", fillcolor=3, shape=diamond, style=filled]
  489 [label="State 489\n\l536 overloadable-operator: \"&=\" •\l"]
  489 -> "489R536" [style=solid]
 "489R536" [label="R536", fillcolor=3, shape=diamond, style=filled]
  490 [label="State 490\n\l535 overloadable-operator: \"^=\" •\l"]
  490 -> "490R535" [style=solid]
 "490R535" [label="R535", fillcolor=3, shape=diamond, style=filled]
  491 [label="State 491\n\l537 overloadable-operator: \"|=\" •\l"]
  491 -> "491R537" [style=solid]
 "491R537" [label="R537", fillcolor=3, shape=diamond, style=filled]
  492 [label="State 492\n\l516 overloadable-operator: \"[\" • \"]\"\l"]
  492 -> 774 [style=solid label="\"]\""]
  493 [label="State 493\n\l514 overloadable-operator: \"co_await\" •\l"]
  493 -> "493R514" [style=solid]
 "493R514" [label="R514", fillcolor=3, shape=diamond, style=filled]
  494 [label="State 494\n\l544 overloadable-operator: \"<=>\" •\l"]
  494 -> "494R544" [style=solid]
 "494R544" [label="R544", fillcolor=3, shape=diamond, style=filled]
  495 [label="State 495\n\l545 overloadable-operator: \"&&\" •\l"]
  495 -> "495R545" [style=solid]
 "495R545" [label="R545", fillcolor=3, shape=diamond, style=filled]
  496 [label="State 496\n\l546 overloadable-operator: \"||\" •\l"]
  496 -> "496R546" [style=solid]
 "496R546" [label="R546", fillcolor=3, shape=diamond, style=filled]
  497 [label="State 497\n\l517 overloadable-operator: \"->\" •\l"]
  497 -> "497R517" [style=solid]
 "497R517" [label="R517", fillcolor=3, shape=diamond, style=filled]
  498 [label="State 498\n\l511 overloadable-operator: \"delete\" •\l513                      | \"delete\" • \"[\" \"]\"\l"]
  498 -> 775 [style=solid label="\"[\""]
  498 -> "498R511d" [label="[\"[\"]", style=solid]
 "498R511d" [label="R511", fillcolor=5, shape=diamond, style=filled]
  498 -> "498R511" [style=solid]
 "498R511" [label="R511", fillcolor=3, shape=diamond, style=filled]
  499 [label="State 499\n\l538 overloadable-operator: \"==\" •\l"]
  499 -> "499R538" [style=solid]
 "499R538" [label="R538", fillcolor=3, shape=diamond, style=filled]
  500 [label="State 500\n\l539 overloadable-operator: \"!=\" •\l"]
  500 -> "500R539" [style=solid]
 "500R539" [label="R539", fillcolor=3, shape=diamond, style=filled]
  501 [label="State 501\n\l526 overloadable-operator: \"^\" •\l"]
  501 -> "501R526" [style=solid]
 "501R526" [label="R526", fillcolor=3, shape=diamond, style=filled]
  502 [label="State 502\n\l540 overloadable-operator: \"<\" •\l"]
  502 -> "502R540" [style=solid]
 "502R540" [label="R540", fillcolor=3, shape=diamond, style=filled]
  503 [label="State 503\n\l541 overloadable-operator: \">\" •\l"]
  503 -> "503R541" [style=solid]
 "503R541" [label="R541", fillcolor=3, shape=diamond, style=filled]
  504 [label="State 504\n\l523 overloadable-operator: \"*\" •\l"]
  504 -> "504R523" [style=solid]
 "504R523" [label="R523", fillcolor=3, shape=diamond, style=filled]
  505 [label="State 505\n\l524 overloadable-operator: \"/\" •\l"]
  505 -> "505R524" [style=solid]
 "505R524" [label="R524", fillcolor=3, shape=diamond, style=filled]
  506 [label="State 506\n\l525 overloadable-operator: \"%\" •\l"]
  506 -> "506R525" [style=solid]
 "506R525" [label="R525", fillcolor=3, shape=diamond, style=filled]
  507 [label="State 507\n\l528 overloadable-operator: \"|\" •\l"]
  507 -> "507R528" [style=solid]
 "507R528" [label="R528", fillcolor=3, shape=diamond, style=filled]
  508 [label="State 508\n\l547 overloadable-operator: \"<<\" •\l"]
  508 -> "508R547" [style=solid]
 "508R547" [label="R547", fillcolor=3, shape=diamond, style=filled]
  509 [label="State 509\n\l548 overloadable-operator: \">>\" •\l"]
  509 -> "509R548" [style=solid]
 "509R548" [label="R548", fillcolor=3, shape=diamond, style=filled]
  510 [label="State 510\n\l542 overloadable-operator: \"<=\" •\l"]
  510 -> "510R542" [style=solid]
 "510R542" [label="R542", fillcolor=3, shape=diamond, style=filled]
  511 [label="State 511\n\l543 overloadable-operator: \">=\" •\l"]
  511 -> "511R543" [style=solid]
 "511R543" [label="R543", fillcolor=3, shape=diamond, style=filled]
  512 [label="State 512\n\l518 overloadable-operator: \"->*\" •\l"]
  512 -> "512R518" [style=solid]
 "512R518" [label="R518", fillcolor=3, shape=diamond, style=filled]
  513 [label="State 513\n\l510 overloadable-operator: \"new\" •\l512                      | \"new\" • \"[\" \"]\"\l"]
  513 -> 776 [style=solid label="\"[\""]
  513 -> "513R510d" [label="[\"[\"]", style=solid]
 "513R510d" [label="R510", fillcolor=5, shape=diamond, style=filled]
  513 -> "513R510" [style=solid]
 "513R510" [label="R510", fillcolor=3, shape=diamond, style=filled]
  514 [label="State 514\n\l519 overloadable-operator: \"~\" •\l"]
  514 -> "514R519" [style=solid]
 "514R519" [label="R519", fillcolor=3, shape=diamond, style=filled]
  515 [label="State 515\n\l551 overloadable-operator: \"++\" •\l"]
  515 -> "515R551" [style=solid]
 "515R551" [label="R551", fillcolor=3, shape=diamond, style=filled]
  516 [label="State 516\n\l552 overloadable-operator: \"--\" •\l"]
  516 -> "516R552" [style=solid]
 "516R552" [label="R552", fillcolor=3, shape=diamond, style=filled]
  517 [label="State 517\n\l171 conversion-function-id: \"operator\" conversion-type-id •\l"]
  517 -> "517R171" [style=solid]
 "517R171" [label="R171", fillcolor=3, shape=diamond, style=filled]
  518 [label="State 518\n\l508 operator-function-id: \"operator\" overloadable-operator •\l509                     | \"operator\" overloadable-operator • \"<\" template-argument-list-opt \">\"\l"]
  518 -> 777 [style=solid label="\"<\""]
  518 -> "518R508d" [label="[\"<\"]", style=solid]
 "518R508d" [label="R508", fillcolor=5, shape=diamond, style=filled]
  518 -> "518R508" [style=solid]
 "518R508" [label="R508", fillcolor=3, shape=diamond, style=filled]
  519 [label="State 519\n\l403 literal-operator-id: \"operator\" string-literal • IDENTIFIER\l781 user-defined-string-literal: string-literal • ud-suffix\l"]
  519 -> 778 [style=solid label="IDENTIFIER"]
  519 -> 599 [style=dashed label="ud-suffix"]
  520 [label="State 520\n\l172 conversion-type-id: type-specifier-seq • conversion-declarator-opt\l"]
  520 -> 4 [style=solid label="IDENTIFIER"]
  520 -> 6 [style=solid label="\"::\""]
  520 -> 160 [style=solid label="\"&\""]
  520 -> 163 [style=solid label="\"&&\""]
  520 -> 21 [style=solid label="\"decltype\""]
  520 -> 164 [style=solid label="\"*\""]
  520 -> 55 [style=dashed label="class-name"]
  520 -> 779 [style=dashed label="conversion-declarator"]
  520 -> 780 [style=dashed label="conversion-declarator-opt"]
  520 -> 121 [style=dashed label="decltype-specifier"]
  520 -> 71 [style=dashed label="enum-name"]
  520 -> 85 [style=dashed label="namespace-alias"]
  520 -> 88 [style=dashed label="namespace-name"]
  520 -> 187 [style=dashed label="nested-name-specifier"]
  520 -> 781 [style=dashed label="ptr-operator"]
  520 -> 96 [style=dashed label="simple-template-id"]
  520 -> 102 [style=dashed label="template-name"]
  520 -> 106 [style=dashed label="type-name"]
  520 -> 108 [style=dashed label="typedef-name"]
  520 -> "520R169d" [label="[IDENTIFIER, \"::\", \"&\", \"&&\", \"decltype\", \"*\"]", style=solid]
 "520R169d" [label="R169", fillcolor=5, shape=diamond, style=filled]
  520 -> "520R169" [style=solid]
 "520R169" [label="R169", fillcolor=3, shape=diamond, style=filled]
  521 [label="State 521\n\l404 literal-operator-id: \"operator\" user-defined-string-literal •\l"]
  521 -> "521R404" [style=solid]
 "521R404" [label="R404", fillcolor=3, shape=diamond, style=filled]
  522 [label="State 522\n\l628 requirement-parameter-list: \"(\" • parameter-declaration-clause \")\"\l"]
  522 -> 177 [style=dashed label="attribute-specifier-seq"]
  522 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  522 -> 639 [style=dashed label="parameter-declaration"]
  522 -> 782 [style=dashed label="parameter-declaration-clause"]
  522 -> 641 [style=dashed label="parameter-declaration-list"]
  522 -> 642 [style=dashed label="parameter-declaration-list-opt"]
  522 -> "522R83" [style=solid]
 "522R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  522 -> "522R562" [label="[\"...\", \")\"]", style=solid]
 "522R562" [label="R562", fillcolor=3, shape=diamond, style=filled]
  523 [label="State 523\n\l630 requirement-parameter-list-opt: requirement-parameter-list •\l"]
  523 -> "523R630" [style=solid]
 "523R630" [label="R630", fillcolor=3, shape=diamond, style=filled]
  524 [label="State 524\n\l636 requires-expression: \"requires\" requirement-parameter-list-opt • requirement-body\l"]
  524 -> 783 [style=solid label="\"{\""]
  524 -> 784 [style=dashed label="requirement-body"]
  525 [label="State 525\n\l139 class-name: IDENTIFIER •\l248 enum-name: IDENTIFIER •\l708 template-name: IDENTIFIER •\l743 typedef-name: IDENTIFIER •\l"]
  525 -> "525R139" [style=solid]
 "525R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  525 -> "525R248d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "525R248d" [label="R248", fillcolor=5, shape=diamond, style=filled]
  525 -> "525R708d" [label="[\"<\"]", style=solid]
 "525R708d" [label="R708", fillcolor=5, shape=diamond, style=filled]
  525 -> "525R743d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "525R743d" [label="R743", fillcolor=5, shape=diamond, style=filled]
  526 [label="State 526\n\l772 unqualified-id: \"~\" decltype-specifier •\l"]
  526 -> "526R772" [style=solid]
 "526R772" [label="R772", fillcolor=3, shape=diamond, style=filled]
  527 [label="State 527\n\l771 unqualified-id: \"~\" type-name •\l"]
  527 -> "527R771" [style=solid]
 "527R771" [label="R771", fillcolor=3, shape=diamond, style=filled]
  528 [label="State 528\n\l750 unary-expression: \"++\" cast-expression •\l"]
  528 -> "528R750" [style=solid]
 "528R750" [label="R750", fillcolor=3, shape=diamond, style=filled]
  529 [label="State 529\n\l751 unary-expression: \"--\" cast-expression •\l"]
  529 -> "529R751" [style=solid]
 "529R751" [label="R751", fillcolor=3, shape=diamond, style=filled]
  530 [label="State 530\n\l582 postfix-expression: \"dynamic_cast\" \"<\" • type-id \">\" \"(\" expression \")\"\l"]
  530 -> 4 [style=solid label="IDENTIFIER"]
  530 -> 6 [style=solid label="\"::\""]
  530 -> 8 [style=solid label="\"typename\""]
  530 -> 12 [style=solid label="\"class\""]
  530 -> 13 [style=solid label="\"struct\""]
  530 -> 14 [style=solid label="\"union\""]
  530 -> 15 [style=solid label="\"const\""]
  530 -> 16 [style=solid label="\"volatile\""]
  530 -> 21 [style=solid label="\"decltype\""]
  530 -> 125 [style=solid label="\"enum\""]
  530 -> 27 [style=solid label="\"char\""]
  530 -> 28 [style=solid label="\"char8_t\""]
  530 -> 29 [style=solid label="\"char16_t\""]
  530 -> 30 [style=solid label="\"char32_t\""]
  530 -> 31 [style=solid label="\"wchar_t\""]
  530 -> 32 [style=solid label="\"bool\""]
  530 -> 33 [style=solid label="\"short\""]
  530 -> 34 [style=solid label="\"int\""]
  530 -> 35 [style=solid label="\"long\""]
  530 -> 36 [style=solid label="\"signed\""]
  530 -> 37 [style=solid label="\"unsigned\""]
  530 -> 38 [style=solid label="\"float\""]
  530 -> 39 [style=solid label="\"double\""]
  530 -> 40 [style=solid label="\"void\""]
  530 -> 424 [style=dashed label="class-key"]
  530 -> 55 [style=dashed label="class-name"]
  530 -> 57 [style=dashed label="cv-qualifier"]
  530 -> 63 [style=dashed label="decltype-specifier"]
  530 -> 66 [style=dashed label="elaborated-enum-specifier"]
  530 -> 67 [style=dashed label="elaborated-type-specifier"]
  530 -> 71 [style=dashed label="enum-name"]
  530 -> 85 [style=dashed label="namespace-alias"]
  530 -> 88 [style=dashed label="namespace-name"]
  530 -> 89 [style=dashed label="nested-name-specifier"]
  530 -> 90 [style=dashed label="nested-name-specifier-opt"]
  530 -> 94 [style=dashed label="placeholder-type-specifier"]
  530 -> 96 [style=dashed label="simple-template-id"]
  530 -> 97 [style=dashed label="simple-type-specifier"]
  530 -> 102 [style=dashed label="template-name"]
  530 -> 104 [style=dashed label="type-constraint"]
  530 -> 105 [style=dashed label="type-constraint-opt"]
  530 -> 785 [style=dashed label="type-id"]
  530 -> 106 [style=dashed label="type-name"]
  530 -> 432 [style=dashed label="type-specifier"]
  530 -> 433 [style=dashed label="type-specifier-seq"]
  530 -> 108 [style=dashed label="typedef-name"]
  530 -> 109 [style=dashed label="typename-specifier"]
  530 -> "530R469d" [label="[IDENTIFIER]", style=solid]
 "530R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  530 -> "530R722d" [label="[\"decltype\"]", style=solid]
 "530R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  530 -> "530R722" [label="[]", style=solid]
 "530R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  531 [label="State 531\n\l583 postfix-expression: \"static_cast\" \"<\" • type-id \">\" \"(\" expression \")\"\l"]
  531 -> 4 [style=solid label="IDENTIFIER"]
  531 -> 6 [style=solid label="\"::\""]
  531 -> 8 [style=solid label="\"typename\""]
  531 -> 12 [style=solid label="\"class\""]
  531 -> 13 [style=solid label="\"struct\""]
  531 -> 14 [style=solid label="\"union\""]
  531 -> 15 [style=solid label="\"const\""]
  531 -> 16 [style=solid label="\"volatile\""]
  531 -> 21 [style=solid label="\"decltype\""]
  531 -> 125 [style=solid label="\"enum\""]
  531 -> 27 [style=solid label="\"char\""]
  531 -> 28 [style=solid label="\"char8_t\""]
  531 -> 29 [style=solid label="\"char16_t\""]
  531 -> 30 [style=solid label="\"char32_t\""]
  531 -> 31 [style=solid label="\"wchar_t\""]
  531 -> 32 [style=solid label="\"bool\""]
  531 -> 33 [style=solid label="\"short\""]
  531 -> 34 [style=solid label="\"int\""]
  531 -> 35 [style=solid label="\"long\""]
  531 -> 36 [style=solid label="\"signed\""]
  531 -> 37 [style=solid label="\"unsigned\""]
  531 -> 38 [style=solid label="\"float\""]
  531 -> 39 [style=solid label="\"double\""]
  531 -> 40 [style=solid label="\"void\""]
  531 -> 424 [style=dashed label="class-key"]
  531 -> 55 [style=dashed label="class-name"]
  531 -> 57 [style=dashed label="cv-qualifier"]
  531 -> 63 [style=dashed label="decltype-specifier"]
  531 -> 66 [style=dashed label="elaborated-enum-specifier"]
  531 -> 67 [style=dashed label="elaborated-type-specifier"]
  531 -> 71 [style=dashed label="enum-name"]
  531 -> 85 [style=dashed label="namespace-alias"]
  531 -> 88 [style=dashed label="namespace-name"]
  531 -> 89 [style=dashed label="nested-name-specifier"]
  531 -> 90 [style=dashed label="nested-name-specifier-opt"]
  531 -> 94 [style=dashed label="placeholder-type-specifier"]
  531 -> 96 [style=dashed label="simple-template-id"]
  531 -> 97 [style=dashed label="simple-type-specifier"]
  531 -> 102 [style=dashed label="template-name"]
  531 -> 104 [style=dashed label="type-constraint"]
  531 -> 105 [style=dashed label="type-constraint-opt"]
  531 -> 786 [style=dashed label="type-id"]
  531 -> 106 [style=dashed label="type-name"]
  531 -> 432 [style=dashed label="type-specifier"]
  531 -> 433 [style=dashed label="type-specifier-seq"]
  531 -> 108 [style=dashed label="typedef-name"]
  531 -> 109 [style=dashed label="typename-specifier"]
  531 -> "531R469d" [label="[IDENTIFIER]", style=solid]
 "531R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  531 -> "531R722d" [label="[\"decltype\"]", style=solid]
 "531R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  531 -> "531R722" [label="[]", style=solid]
 "531R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  532 [label="State 532\n\l584 postfix-expression: \"reinterpret_cast\" \"<\" • type-id \">\" \"(\" expression \")\"\l"]
  532 -> 4 [style=solid label="IDENTIFIER"]
  532 -> 6 [style=solid label="\"::\""]
  532 -> 8 [style=solid label="\"typename\""]
  532 -> 12 [style=solid label="\"class\""]
  532 -> 13 [style=solid label="\"struct\""]
  532 -> 14 [style=solid label="\"union\""]
  532 -> 15 [style=solid label="\"const\""]
  532 -> 16 [style=solid label="\"volatile\""]
  532 -> 21 [style=solid label="\"decltype\""]
  532 -> 125 [style=solid label="\"enum\""]
  532 -> 27 [style=solid label="\"char\""]
  532 -> 28 [style=solid label="\"char8_t\""]
  532 -> 29 [style=solid label="\"char16_t\""]
  532 -> 30 [style=solid label="\"char32_t\""]
  532 -> 31 [style=solid label="\"wchar_t\""]
  532 -> 32 [style=solid label="\"bool\""]
  532 -> 33 [style=solid label="\"short\""]
  532 -> 34 [style=solid label="\"int\""]
  532 -> 35 [style=solid label="\"long\""]
  532 -> 36 [style=solid label="\"signed\""]
  532 -> 37 [style=solid label="\"unsigned\""]
  532 -> 38 [style=solid label="\"float\""]
  532 -> 39 [style=solid label="\"double\""]
  532 -> 40 [style=solid label="\"void\""]
  532 -> 424 [style=dashed label="class-key"]
  532 -> 55 [style=dashed label="class-name"]
  532 -> 57 [style=dashed label="cv-qualifier"]
  532 -> 63 [style=dashed label="decltype-specifier"]
  532 -> 66 [style=dashed label="elaborated-enum-specifier"]
  532 -> 67 [style=dashed label="elaborated-type-specifier"]
  532 -> 71 [style=dashed label="enum-name"]
  532 -> 85 [style=dashed label="namespace-alias"]
  532 -> 88 [style=dashed label="namespace-name"]
  532 -> 89 [style=dashed label="nested-name-specifier"]
  532 -> 90 [style=dashed label="nested-name-specifier-opt"]
  532 -> 94 [style=dashed label="placeholder-type-specifier"]
  532 -> 96 [style=dashed label="simple-template-id"]
  532 -> 97 [style=dashed label="simple-type-specifier"]
  532 -> 102 [style=dashed label="template-name"]
  532 -> 104 [style=dashed label="type-constraint"]
  532 -> 105 [style=dashed label="type-constraint-opt"]
  532 -> 787 [style=dashed label="type-id"]
  532 -> 106 [style=dashed label="type-name"]
  532 -> 432 [style=dashed label="type-specifier"]
  532 -> 433 [style=dashed label="type-specifier-seq"]
  532 -> 108 [style=dashed label="typedef-name"]
  532 -> 109 [style=dashed label="typename-specifier"]
  532 -> "532R469d" [label="[IDENTIFIER]", style=solid]
 "532R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  532 -> "532R722d" [label="[\"decltype\"]", style=solid]
 "532R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  532 -> "532R722" [label="[]", style=solid]
 "532R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  533 [label="State 533\n\l585 postfix-expression: \"const_cast\" \"<\" • type-id \">\" \"(\" expression \")\"\l"]
  533 -> 4 [style=solid label="IDENTIFIER"]
  533 -> 6 [style=solid label="\"::\""]
  533 -> 8 [style=solid label="\"typename\""]
  533 -> 12 [style=solid label="\"class\""]
  533 -> 13 [style=solid label="\"struct\""]
  533 -> 14 [style=solid label="\"union\""]
  533 -> 15 [style=solid label="\"const\""]
  533 -> 16 [style=solid label="\"volatile\""]
  533 -> 21 [style=solid label="\"decltype\""]
  533 -> 125 [style=solid label="\"enum\""]
  533 -> 27 [style=solid label="\"char\""]
  533 -> 28 [style=solid label="\"char8_t\""]
  533 -> 29 [style=solid label="\"char16_t\""]
  533 -> 30 [style=solid label="\"char32_t\""]
  533 -> 31 [style=solid label="\"wchar_t\""]
  533 -> 32 [style=solid label="\"bool\""]
  533 -> 33 [style=solid label="\"short\""]
  533 -> 34 [style=solid label="\"int\""]
  533 -> 35 [style=solid label="\"long\""]
  533 -> 36 [style=solid label="\"signed\""]
  533 -> 37 [style=solid label="\"unsigned\""]
  533 -> 38 [style=solid label="\"float\""]
  533 -> 39 [style=solid label="\"double\""]
  533 -> 40 [style=solid label="\"void\""]
  533 -> 424 [style=dashed label="class-key"]
  533 -> 55 [style=dashed label="class-name"]
  533 -> 57 [style=dashed label="cv-qualifier"]
  533 -> 63 [style=dashed label="decltype-specifier"]
  533 -> 66 [style=dashed label="elaborated-enum-specifier"]
  533 -> 67 [style=dashed label="elaborated-type-specifier"]
  533 -> 71 [style=dashed label="enum-name"]
  533 -> 85 [style=dashed label="namespace-alias"]
  533 -> 88 [style=dashed label="namespace-name"]
  533 -> 89 [style=dashed label="nested-name-specifier"]
  533 -> 90 [style=dashed label="nested-name-specifier-opt"]
  533 -> 94 [style=dashed label="placeholder-type-specifier"]
  533 -> 96 [style=dashed label="simple-template-id"]
  533 -> 97 [style=dashed label="simple-type-specifier"]
  533 -> 102 [style=dashed label="template-name"]
  533 -> 104 [style=dashed label="type-constraint"]
  533 -> 105 [style=dashed label="type-constraint-opt"]
  533 -> 788 [style=dashed label="type-id"]
  533 -> 106 [style=dashed label="type-name"]
  533 -> 432 [style=dashed label="type-specifier"]
  533 -> 433 [style=dashed label="type-specifier-seq"]
  533 -> 108 [style=dashed label="typedef-name"]
  533 -> 109 [style=dashed label="typename-specifier"]
  533 -> "533R469d" [label="[IDENTIFIER]", style=solid]
 "533R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  533 -> "533R722d" [label="[\"decltype\"]", style=solid]
 "533R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  533 -> "533R722" [label="[]", style=solid]
 "533R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  534 [label="State 534\n\l586 postfix-expression: \"typeid\" \"(\" • expression \")\"\l587                   | \"typeid\" \"(\" • type-id \")\"\l"]
  534 -> 238 [style=solid label="IDENTIFIER"]
  534 -> 239 [style=solid label="\"noexcept\""]
  534 -> 240 [style=solid label="\"!\""]
  534 -> 241 [style=solid label="\"::\""]
  534 -> 242 [style=solid label="\"this\""]
  534 -> 8 [style=solid label="\"typename\""]
  534 -> 243 [style=solid label="\"+\""]
  534 -> 244 [style=solid label="\"-\""]
  534 -> 245 [style=solid label="\"(\""]
  534 -> 246 [style=solid label="\"&\""]
  534 -> 247 [style=solid label="\"[\""]
  534 -> 248 [style=solid label="\"co_await\""]
  534 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  534 -> 250 [style=solid label="CHARACTER_LITERAL"]
  534 -> 12 [style=solid label="\"class\""]
  534 -> 13 [style=solid label="\"struct\""]
  534 -> 14 [style=solid label="\"union\""]
  534 -> 251 [style=solid label="\"operator\""]
  534 -> 15 [style=solid label="\"const\""]
  534 -> 16 [style=solid label="\"volatile\""]
  534 -> 21 [style=solid label="\"decltype\""]
  534 -> 125 [style=solid label="\"enum\""]
  534 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  534 -> 253 [style=solid label="\"*\""]
  534 -> 254 [style=solid label="INTEGER_LITERAL"]
  534 -> 255 [style=solid label="\"requires\""]
  534 -> 256 [style=solid label="\"~\""]
  534 -> 257 [style=solid label="\"++\""]
  534 -> 258 [style=solid label="\"--\""]
  534 -> 259 [style=solid label="POINTER_LITERAL"]
  534 -> 260 [style=solid label="\"dynamic_cast\""]
  534 -> 261 [style=solid label="\"static_cast\""]
  534 -> 262 [style=solid label="\"reinterpret_cast\""]
  534 -> 263 [style=solid label="\"const_cast\""]
  534 -> 264 [style=solid label="\"typeid\""]
  534 -> 27 [style=solid label="\"char\""]
  534 -> 28 [style=solid label="\"char8_t\""]
  534 -> 29 [style=solid label="\"char16_t\""]
  534 -> 30 [style=solid label="\"char32_t\""]
  534 -> 31 [style=solid label="\"wchar_t\""]
  534 -> 32 [style=solid label="\"bool\""]
  534 -> 33 [style=solid label="\"short\""]
  534 -> 34 [style=solid label="\"int\""]
  534 -> 35 [style=solid label="\"long\""]
  534 -> 36 [style=solid label="\"signed\""]
  534 -> 37 [style=solid label="\"unsigned\""]
  534 -> 38 [style=solid label="\"float\""]
  534 -> 39 [style=solid label="\"double\""]
  534 -> 40 [style=solid label="\"void\""]
  534 -> 118 [style=solid label="STRING_LITERAL"]
  534 -> 265 [style=solid label="\"throw\""]
  534 -> 266 [style=solid label="\"sizeof\""]
  534 -> 267 [style=solid label="\"alignof\""]
  534 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  534 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  534 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  534 -> 271 [style=solid label="\"co_yield\""]
  534 -> 272 [style=dashed label="SCOPE-opt"]
  534 -> 273 [style=dashed label="additive-expression"]
  534 -> 274 [style=dashed label="and-expression"]
  534 -> 275 [style=dashed label="assignment-expression"]
  534 -> 276 [style=dashed label="await-expression"]
  534 -> 277 [style=dashed label="boolean-literal"]
  534 -> 278 [style=dashed label="cast-expression"]
  534 -> 279 [style=dashed label="character-literal"]
  534 -> 424 [style=dashed label="class-key"]
  534 -> 55 [style=dashed label="class-name"]
  534 -> 280 [style=dashed label="compare-expression"]
  534 -> 281 [style=dashed label="conditional-expression"]
  534 -> 282 [style=dashed label="conversion-function-id"]
  534 -> 57 [style=dashed label="cv-qualifier"]
  534 -> 63 [style=dashed label="decltype-specifier"]
  534 -> 283 [style=dashed label="delete-expression"]
  534 -> 66 [style=dashed label="elaborated-enum-specifier"]
  534 -> 67 [style=dashed label="elaborated-type-specifier"]
  534 -> 71 [style=dashed label="enum-name"]
  534 -> 284 [style=dashed label="equality-expression"]
  534 -> 285 [style=dashed label="exclusive-or-expression"]
  534 -> 789 [style=dashed label="expression"]
  534 -> 287 [style=dashed label="floating-point-literal"]
  534 -> 288 [style=dashed label="fold-expression"]
  534 -> 289 [style=dashed label="id-expression"]
  534 -> 290 [style=dashed label="inclusive-or-expression"]
  534 -> 291 [style=dashed label="integer-literal"]
  534 -> 292 [style=dashed label="lambda-expression"]
  534 -> 293 [style=dashed label="lambda-introducer"]
  534 -> 294 [style=dashed label="literal"]
  534 -> 295 [style=dashed label="literal-operator-id"]
  534 -> 296 [style=dashed label="logical-and-expression"]
  534 -> 297 [style=dashed label="logical-or-expression"]
  534 -> 298 [style=dashed label="multiplicative-expression"]
  534 -> 85 [style=dashed label="namespace-alias"]
  534 -> 88 [style=dashed label="namespace-name"]
  534 -> 299 [style=dashed label="nested-name-specifier"]
  534 -> 90 [style=dashed label="nested-name-specifier-opt"]
  534 -> 300 [style=dashed label="new-expression"]
  534 -> 301 [style=dashed label="noexcept-expression"]
  534 -> 302 [style=dashed label="operator-function-id"]
  534 -> 94 [style=dashed label="placeholder-type-specifier"]
  534 -> 303 [style=dashed label="pm-expression"]
  534 -> 304 [style=dashed label="pointer-literal"]
  534 -> 305 [style=dashed label="postfix-expression"]
  534 -> 306 [style=dashed label="primary-expression"]
  534 -> 307 [style=dashed label="qualified-id"]
  534 -> 308 [style=dashed label="relational-expression"]
  534 -> 309 [style=dashed label="requires-expression"]
  534 -> 310 [style=dashed label="shift-expression"]
  534 -> 311 [style=dashed label="simple-template-id"]
  534 -> 427 [style=dashed label="simple-type-specifier"]
  534 -> 313 [style=dashed label="string-literal"]
  534 -> 314 [style=dashed label="template-id"]
  534 -> 102 [style=dashed label="template-name"]
  534 -> 315 [style=dashed label="throw-expression"]
  534 -> 104 [style=dashed label="type-constraint"]
  534 -> 105 [style=dashed label="type-constraint-opt"]
  534 -> 790 [style=dashed label="type-id"]
  534 -> 106 [style=dashed label="type-name"]
  534 -> 432 [style=dashed label="type-specifier"]
  534 -> 433 [style=dashed label="type-specifier-seq"]
  534 -> 108 [style=dashed label="typedef-name"]
  534 -> 434 [style=dashed label="typename-specifier"]
  534 -> 317 [style=dashed label="unary-expression"]
  534 -> 318 [style=dashed label="unary-operator"]
  534 -> 319 [style=dashed label="unqualified-id"]
  534 -> 320 [style=dashed label="user-defined-character-literal"]
  534 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  534 -> 322 [style=dashed label="user-defined-integer-literal"]
  534 -> 323 [style=dashed label="user-defined-literal"]
  534 -> 324 [style=dashed label="user-defined-string-literal"]
  534 -> 325 [style=dashed label="yield-expression"]
  534 -> "534R19" [style=solid]
 "534R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  534 -> "534R469d" [label="[IDENTIFIER]", style=solid]
 "534R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  534 -> "534R722d" [label="[\"decltype\"]", style=solid]
 "534R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  534 -> "534R722" [label="[\"auto\"]", style=solid]
 "534R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  535 [label="State 535\n\l 55 assignment-expression-opt: assignment-expression •\l"]
  535 -> "535R55" [style=solid]
 "535R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  536 [label="State 536\n\l713 throw-expression: \"throw\" assignment-expression-opt •\l"]
  536 -> "536R713" [style=solid]
 "536R713" [label="R713", fillcolor=3, shape=diamond, style=filled]
  537 [label="State 537\n\l755 unary-expression: \"sizeof\" \"...\" • \"(\" IDENTIFIER \")\"\l"]
  537 -> 791 [style=solid label="\"(\""]
  538 [label="State 538\n\l288 fold-expression: \"(\" • cast-expression fold-operator \"...\" \")\"\l289                | \"(\" • \"...\" fold-operator cast-expression \")\"\l290                | \"(\" • cast-expression fold-operator \"...\" fold-operator cast-expression \")\"\l591 primary-expression: \"(\" • expression \")\"\l754 unary-expression: \"sizeof\" \"(\" • type-id \")\"\l"]
  538 -> 457 [style=solid label="\"...\""]
  538 -> 238 [style=solid label="IDENTIFIER"]
  538 -> 239 [style=solid label="\"noexcept\""]
  538 -> 240 [style=solid label="\"!\""]
  538 -> 241 [style=solid label="\"::\""]
  538 -> 242 [style=solid label="\"this\""]
  538 -> 8 [style=solid label="\"typename\""]
  538 -> 243 [style=solid label="\"+\""]
  538 -> 244 [style=solid label="\"-\""]
  538 -> 245 [style=solid label="\"(\""]
  538 -> 246 [style=solid label="\"&\""]
  538 -> 247 [style=solid label="\"[\""]
  538 -> 248 [style=solid label="\"co_await\""]
  538 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  538 -> 250 [style=solid label="CHARACTER_LITERAL"]
  538 -> 12 [style=solid label="\"class\""]
  538 -> 13 [style=solid label="\"struct\""]
  538 -> 14 [style=solid label="\"union\""]
  538 -> 251 [style=solid label="\"operator\""]
  538 -> 15 [style=solid label="\"const\""]
  538 -> 16 [style=solid label="\"volatile\""]
  538 -> 21 [style=solid label="\"decltype\""]
  538 -> 125 [style=solid label="\"enum\""]
  538 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  538 -> 253 [style=solid label="\"*\""]
  538 -> 254 [style=solid label="INTEGER_LITERAL"]
  538 -> 255 [style=solid label="\"requires\""]
  538 -> 256 [style=solid label="\"~\""]
  538 -> 257 [style=solid label="\"++\""]
  538 -> 258 [style=solid label="\"--\""]
  538 -> 259 [style=solid label="POINTER_LITERAL"]
  538 -> 260 [style=solid label="\"dynamic_cast\""]
  538 -> 261 [style=solid label="\"static_cast\""]
  538 -> 262 [style=solid label="\"reinterpret_cast\""]
  538 -> 263 [style=solid label="\"const_cast\""]
  538 -> 264 [style=solid label="\"typeid\""]
  538 -> 27 [style=solid label="\"char\""]
  538 -> 28 [style=solid label="\"char8_t\""]
  538 -> 29 [style=solid label="\"char16_t\""]
  538 -> 30 [style=solid label="\"char32_t\""]
  538 -> 31 [style=solid label="\"wchar_t\""]
  538 -> 32 [style=solid label="\"bool\""]
  538 -> 33 [style=solid label="\"short\""]
  538 -> 34 [style=solid label="\"int\""]
  538 -> 35 [style=solid label="\"long\""]
  538 -> 36 [style=solid label="\"signed\""]
  538 -> 37 [style=solid label="\"unsigned\""]
  538 -> 38 [style=solid label="\"float\""]
  538 -> 39 [style=solid label="\"double\""]
  538 -> 40 [style=solid label="\"void\""]
  538 -> 118 [style=solid label="STRING_LITERAL"]
  538 -> 265 [style=solid label="\"throw\""]
  538 -> 266 [style=solid label="\"sizeof\""]
  538 -> 267 [style=solid label="\"alignof\""]
  538 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  538 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  538 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  538 -> 271 [style=solid label="\"co_yield\""]
  538 -> 272 [style=dashed label="SCOPE-opt"]
  538 -> 273 [style=dashed label="additive-expression"]
  538 -> 274 [style=dashed label="and-expression"]
  538 -> 275 [style=dashed label="assignment-expression"]
  538 -> 276 [style=dashed label="await-expression"]
  538 -> 277 [style=dashed label="boolean-literal"]
  538 -> 458 [style=dashed label="cast-expression"]
  538 -> 279 [style=dashed label="character-literal"]
  538 -> 424 [style=dashed label="class-key"]
  538 -> 55 [style=dashed label="class-name"]
  538 -> 280 [style=dashed label="compare-expression"]
  538 -> 281 [style=dashed label="conditional-expression"]
  538 -> 282 [style=dashed label="conversion-function-id"]
  538 -> 57 [style=dashed label="cv-qualifier"]
  538 -> 63 [style=dashed label="decltype-specifier"]
  538 -> 283 [style=dashed label="delete-expression"]
  538 -> 66 [style=dashed label="elaborated-enum-specifier"]
  538 -> 67 [style=dashed label="elaborated-type-specifier"]
  538 -> 71 [style=dashed label="enum-name"]
  538 -> 284 [style=dashed label="equality-expression"]
  538 -> 285 [style=dashed label="exclusive-or-expression"]
  538 -> 459 [style=dashed label="expression"]
  538 -> 287 [style=dashed label="floating-point-literal"]
  538 -> 288 [style=dashed label="fold-expression"]
  538 -> 289 [style=dashed label="id-expression"]
  538 -> 290 [style=dashed label="inclusive-or-expression"]
  538 -> 291 [style=dashed label="integer-literal"]
  538 -> 292 [style=dashed label="lambda-expression"]
  538 -> 293 [style=dashed label="lambda-introducer"]
  538 -> 294 [style=dashed label="literal"]
  538 -> 295 [style=dashed label="literal-operator-id"]
  538 -> 296 [style=dashed label="logical-and-expression"]
  538 -> 297 [style=dashed label="logical-or-expression"]
  538 -> 298 [style=dashed label="multiplicative-expression"]
  538 -> 85 [style=dashed label="namespace-alias"]
  538 -> 88 [style=dashed label="namespace-name"]
  538 -> 299 [style=dashed label="nested-name-specifier"]
  538 -> 90 [style=dashed label="nested-name-specifier-opt"]
  538 -> 300 [style=dashed label="new-expression"]
  538 -> 301 [style=dashed label="noexcept-expression"]
  538 -> 302 [style=dashed label="operator-function-id"]
  538 -> 94 [style=dashed label="placeholder-type-specifier"]
  538 -> 303 [style=dashed label="pm-expression"]
  538 -> 304 [style=dashed label="pointer-literal"]
  538 -> 305 [style=dashed label="postfix-expression"]
  538 -> 306 [style=dashed label="primary-expression"]
  538 -> 307 [style=dashed label="qualified-id"]
  538 -> 308 [style=dashed label="relational-expression"]
  538 -> 309 [style=dashed label="requires-expression"]
  538 -> 310 [style=dashed label="shift-expression"]
  538 -> 311 [style=dashed label="simple-template-id"]
  538 -> 427 [style=dashed label="simple-type-specifier"]
  538 -> 313 [style=dashed label="string-literal"]
  538 -> 314 [style=dashed label="template-id"]
  538 -> 102 [style=dashed label="template-name"]
  538 -> 315 [style=dashed label="throw-expression"]
  538 -> 104 [style=dashed label="type-constraint"]
  538 -> 105 [style=dashed label="type-constraint-opt"]
  538 -> 792 [style=dashed label="type-id"]
  538 -> 106 [style=dashed label="type-name"]
  538 -> 432 [style=dashed label="type-specifier"]
  538 -> 433 [style=dashed label="type-specifier-seq"]
  538 -> 108 [style=dashed label="typedef-name"]
  538 -> 434 [style=dashed label="typename-specifier"]
  538 -> 317 [style=dashed label="unary-expression"]
  538 -> 318 [style=dashed label="unary-operator"]
  538 -> 319 [style=dashed label="unqualified-id"]
  538 -> 320 [style=dashed label="user-defined-character-literal"]
  538 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  538 -> 322 [style=dashed label="user-defined-integer-literal"]
  538 -> 323 [style=dashed label="user-defined-literal"]
  538 -> 324 [style=dashed label="user-defined-string-literal"]
  538 -> 325 [style=dashed label="yield-expression"]
  538 -> "538R19" [style=solid]
 "538R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  538 -> "538R469d" [label="[IDENTIFIER]", style=solid]
 "538R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  538 -> "538R722d" [label="[\"decltype\"]", style=solid]
 "538R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  538 -> "538R722" [label="[\"auto\"]", style=solid]
 "538R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  539 [label="State 539\n\l753 unary-expression: \"sizeof\" unary-expression •\l"]
  539 -> "539R753" [style=solid]
 "539R753" [label="R753", fillcolor=3, shape=diamond, style=filled]
  540 [label="State 540\n\l756 unary-expression: \"alignof\" \"(\" • type-id \")\"\l"]
  540 -> 4 [style=solid label="IDENTIFIER"]
  540 -> 6 [style=solid label="\"::\""]
  540 -> 8 [style=solid label="\"typename\""]
  540 -> 12 [style=solid label="\"class\""]
  540 -> 13 [style=solid label="\"struct\""]
  540 -> 14 [style=solid label="\"union\""]
  540 -> 15 [style=solid label="\"const\""]
  540 -> 16 [style=solid label="\"volatile\""]
  540 -> 21 [style=solid label="\"decltype\""]
  540 -> 125 [style=solid label="\"enum\""]
  540 -> 27 [style=solid label="\"char\""]
  540 -> 28 [style=solid label="\"char8_t\""]
  540 -> 29 [style=solid label="\"char16_t\""]
  540 -> 30 [style=solid label="\"char32_t\""]
  540 -> 31 [style=solid label="\"wchar_t\""]
  540 -> 32 [style=solid label="\"bool\""]
  540 -> 33 [style=solid label="\"short\""]
  540 -> 34 [style=solid label="\"int\""]
  540 -> 35 [style=solid label="\"long\""]
  540 -> 36 [style=solid label="\"signed\""]
  540 -> 37 [style=solid label="\"unsigned\""]
  540 -> 38 [style=solid label="\"float\""]
  540 -> 39 [style=solid label="\"double\""]
  540 -> 40 [style=solid label="\"void\""]
  540 -> 424 [style=dashed label="class-key"]
  540 -> 55 [style=dashed label="class-name"]
  540 -> 57 [style=dashed label="cv-qualifier"]
  540 -> 63 [style=dashed label="decltype-specifier"]
  540 -> 66 [style=dashed label="elaborated-enum-specifier"]
  540 -> 67 [style=dashed label="elaborated-type-specifier"]
  540 -> 71 [style=dashed label="enum-name"]
  540 -> 85 [style=dashed label="namespace-alias"]
  540 -> 88 [style=dashed label="namespace-name"]
  540 -> 89 [style=dashed label="nested-name-specifier"]
  540 -> 90 [style=dashed label="nested-name-specifier-opt"]
  540 -> 94 [style=dashed label="placeholder-type-specifier"]
  540 -> 96 [style=dashed label="simple-template-id"]
  540 -> 97 [style=dashed label="simple-type-specifier"]
  540 -> 102 [style=dashed label="template-name"]
  540 -> 104 [style=dashed label="type-constraint"]
  540 -> 105 [style=dashed label="type-constraint-opt"]
  540 -> 793 [style=dashed label="type-id"]
  540 -> 106 [style=dashed label="type-name"]
  540 -> 432 [style=dashed label="type-specifier"]
  540 -> 433 [style=dashed label="type-specifier-seq"]
  540 -> 108 [style=dashed label="typedef-name"]
  540 -> 109 [style=dashed label="typename-specifier"]
  540 -> "540R469d" [label="[IDENTIFIER]", style=solid]
 "540R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  540 -> "540R722d" [label="[\"decltype\"]", style=solid]
 "540R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  540 -> "540R722" [label="[]", style=solid]
 "540R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  541 [label="State 541\n\l794 yield-expression: \"co_yield\" assignment-expression •\l"]
  541 -> "541R794" [style=solid]
 "541R794" [label="R794", fillcolor=3, shape=diamond, style=filled]
  542 [label="State 542\n\l795 yield-expression: \"co_yield\" braced-init-list •\l"]
  542 -> "542R795" [style=solid]
 "542R795" [label="R795", fillcolor=3, shape=diamond, style=filled]
  543 [label="State 543\n\l224 delete-expression: SCOPE-opt \"delete\" • cast-expression\l225                  | SCOPE-opt \"delete\" • \"[\" \"]\" cast-expression\l"]
  543 -> 238 [style=solid label="IDENTIFIER"]
  543 -> 239 [style=solid label="\"noexcept\""]
  543 -> 240 [style=solid label="\"!\""]
  543 -> 241 [style=solid label="\"::\""]
  543 -> 242 [style=solid label="\"this\""]
  543 -> 8 [style=solid label="\"typename\""]
  543 -> 243 [style=solid label="\"+\""]
  543 -> 244 [style=solid label="\"-\""]
  543 -> 245 [style=solid label="\"(\""]
  543 -> 246 [style=solid label="\"&\""]
  543 -> 794 [style=solid label="\"[\""]
  543 -> 248 [style=solid label="\"co_await\""]
  543 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  543 -> 250 [style=solid label="CHARACTER_LITERAL"]
  543 -> 251 [style=solid label="\"operator\""]
  543 -> 21 [style=solid label="\"decltype\""]
  543 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  543 -> 253 [style=solid label="\"*\""]
  543 -> 254 [style=solid label="INTEGER_LITERAL"]
  543 -> 255 [style=solid label="\"requires\""]
  543 -> 256 [style=solid label="\"~\""]
  543 -> 257 [style=solid label="\"++\""]
  543 -> 258 [style=solid label="\"--\""]
  543 -> 259 [style=solid label="POINTER_LITERAL"]
  543 -> 260 [style=solid label="\"dynamic_cast\""]
  543 -> 261 [style=solid label="\"static_cast\""]
  543 -> 262 [style=solid label="\"reinterpret_cast\""]
  543 -> 263 [style=solid label="\"const_cast\""]
  543 -> 264 [style=solid label="\"typeid\""]
  543 -> 27 [style=solid label="\"char\""]
  543 -> 28 [style=solid label="\"char8_t\""]
  543 -> 29 [style=solid label="\"char16_t\""]
  543 -> 30 [style=solid label="\"char32_t\""]
  543 -> 31 [style=solid label="\"wchar_t\""]
  543 -> 32 [style=solid label="\"bool\""]
  543 -> 33 [style=solid label="\"short\""]
  543 -> 34 [style=solid label="\"int\""]
  543 -> 35 [style=solid label="\"long\""]
  543 -> 36 [style=solid label="\"signed\""]
  543 -> 37 [style=solid label="\"unsigned\""]
  543 -> 38 [style=solid label="\"float\""]
  543 -> 39 [style=solid label="\"double\""]
  543 -> 40 [style=solid label="\"void\""]
  543 -> 118 [style=solid label="STRING_LITERAL"]
  543 -> 266 [style=solid label="\"sizeof\""]
  543 -> 267 [style=solid label="\"alignof\""]
  543 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  543 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  543 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  543 -> 272 [style=dashed label="SCOPE-opt"]
  543 -> 276 [style=dashed label="await-expression"]
  543 -> 277 [style=dashed label="boolean-literal"]
  543 -> 795 [style=dashed label="cast-expression"]
  543 -> 279 [style=dashed label="character-literal"]
  543 -> 55 [style=dashed label="class-name"]
  543 -> 282 [style=dashed label="conversion-function-id"]
  543 -> 63 [style=dashed label="decltype-specifier"]
  543 -> 283 [style=dashed label="delete-expression"]
  543 -> 71 [style=dashed label="enum-name"]
  543 -> 287 [style=dashed label="floating-point-literal"]
  543 -> 288 [style=dashed label="fold-expression"]
  543 -> 289 [style=dashed label="id-expression"]
  543 -> 291 [style=dashed label="integer-literal"]
  543 -> 292 [style=dashed label="lambda-expression"]
  543 -> 293 [style=dashed label="lambda-introducer"]
  543 -> 294 [style=dashed label="literal"]
  543 -> 295 [style=dashed label="literal-operator-id"]
  543 -> 85 [style=dashed label="namespace-alias"]
  543 -> 88 [style=dashed label="namespace-name"]
  543 -> 299 [style=dashed label="nested-name-specifier"]
  543 -> 90 [style=dashed label="nested-name-specifier-opt"]
  543 -> 300 [style=dashed label="new-expression"]
  543 -> 301 [style=dashed label="noexcept-expression"]
  543 -> 302 [style=dashed label="operator-function-id"]
  543 -> 94 [style=dashed label="placeholder-type-specifier"]
  543 -> 304 [style=dashed label="pointer-literal"]
  543 -> 305 [style=dashed label="postfix-expression"]
  543 -> 306 [style=dashed label="primary-expression"]
  543 -> 307 [style=dashed label="qualified-id"]
  543 -> 309 [style=dashed label="requires-expression"]
  543 -> 311 [style=dashed label="simple-template-id"]
  543 -> 312 [style=dashed label="simple-type-specifier"]
  543 -> 313 [style=dashed label="string-literal"]
  543 -> 314 [style=dashed label="template-id"]
  543 -> 102 [style=dashed label="template-name"]
  543 -> 104 [style=dashed label="type-constraint"]
  543 -> 105 [style=dashed label="type-constraint-opt"]
  543 -> 106 [style=dashed label="type-name"]
  543 -> 108 [style=dashed label="typedef-name"]
  543 -> 316 [style=dashed label="typename-specifier"]
  543 -> 317 [style=dashed label="unary-expression"]
  543 -> 318 [style=dashed label="unary-operator"]
  543 -> 319 [style=dashed label="unqualified-id"]
  543 -> 320 [style=dashed label="user-defined-character-literal"]
  543 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  543 -> 322 [style=dashed label="user-defined-integer-literal"]
  543 -> 323 [style=dashed label="user-defined-literal"]
  543 -> 324 [style=dashed label="user-defined-string-literal"]
  543 -> "543R19" [style=solid]
 "543R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  543 -> "543R469d" [label="[IDENTIFIER]", style=solid]
 "543R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  543 -> "543R722d" [label="[\"decltype\"]", style=solid]
 "543R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  543 -> "543R722" [label="[\"auto\"]", style=solid]
 "543R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  544 [label="State 544\n\l477 new-expression: SCOPE-opt \"new\" • new-placement-opt new-type-id new-initializer-opt\l478               | SCOPE-opt \"new\" • new-placement-opt \"(\" type-id \")\" new-initializer-opt\l"]
  544 -> 796 [style=solid label="\"(\""]
  544 -> 797 [style=dashed label="new-placement"]
  544 -> 798 [style=dashed label="new-placement-opt"]
  544 -> "544R484d" [label="[\"(\"]", style=solid]
 "544R484d" [label="R484", fillcolor=5, shape=diamond, style=filled]
  544 -> "544R484" [style=solid]
 "544R484" [label="R484", fillcolor=3, shape=diamond, style=filled]
  545 [label="State 545\n\l 42 additive-expression: additive-expression \"+\" • multiplicative-expression\l"]
  545 -> 238 [style=solid label="IDENTIFIER"]
  545 -> 239 [style=solid label="\"noexcept\""]
  545 -> 240 [style=solid label="\"!\""]
  545 -> 241 [style=solid label="\"::\""]
  545 -> 242 [style=solid label="\"this\""]
  545 -> 8 [style=solid label="\"typename\""]
  545 -> 243 [style=solid label="\"+\""]
  545 -> 244 [style=solid label="\"-\""]
  545 -> 245 [style=solid label="\"(\""]
  545 -> 246 [style=solid label="\"&\""]
  545 -> 247 [style=solid label="\"[\""]
  545 -> 248 [style=solid label="\"co_await\""]
  545 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  545 -> 250 [style=solid label="CHARACTER_LITERAL"]
  545 -> 251 [style=solid label="\"operator\""]
  545 -> 21 [style=solid label="\"decltype\""]
  545 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  545 -> 253 [style=solid label="\"*\""]
  545 -> 254 [style=solid label="INTEGER_LITERAL"]
  545 -> 255 [style=solid label="\"requires\""]
  545 -> 256 [style=solid label="\"~\""]
  545 -> 257 [style=solid label="\"++\""]
  545 -> 258 [style=solid label="\"--\""]
  545 -> 259 [style=solid label="POINTER_LITERAL"]
  545 -> 260 [style=solid label="\"dynamic_cast\""]
  545 -> 261 [style=solid label="\"static_cast\""]
  545 -> 262 [style=solid label="\"reinterpret_cast\""]
  545 -> 263 [style=solid label="\"const_cast\""]
  545 -> 264 [style=solid label="\"typeid\""]
  545 -> 27 [style=solid label="\"char\""]
  545 -> 28 [style=solid label="\"char8_t\""]
  545 -> 29 [style=solid label="\"char16_t\""]
  545 -> 30 [style=solid label="\"char32_t\""]
  545 -> 31 [style=solid label="\"wchar_t\""]
  545 -> 32 [style=solid label="\"bool\""]
  545 -> 33 [style=solid label="\"short\""]
  545 -> 34 [style=solid label="\"int\""]
  545 -> 35 [style=solid label="\"long\""]
  545 -> 36 [style=solid label="\"signed\""]
  545 -> 37 [style=solid label="\"unsigned\""]
  545 -> 38 [style=solid label="\"float\""]
  545 -> 39 [style=solid label="\"double\""]
  545 -> 40 [style=solid label="\"void\""]
  545 -> 118 [style=solid label="STRING_LITERAL"]
  545 -> 266 [style=solid label="\"sizeof\""]
  545 -> 267 [style=solid label="\"alignof\""]
  545 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  545 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  545 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  545 -> 272 [style=dashed label="SCOPE-opt"]
  545 -> 276 [style=dashed label="await-expression"]
  545 -> 277 [style=dashed label="boolean-literal"]
  545 -> 278 [style=dashed label="cast-expression"]
  545 -> 279 [style=dashed label="character-literal"]
  545 -> 55 [style=dashed label="class-name"]
  545 -> 282 [style=dashed label="conversion-function-id"]
  545 -> 63 [style=dashed label="decltype-specifier"]
  545 -> 283 [style=dashed label="delete-expression"]
  545 -> 71 [style=dashed label="enum-name"]
  545 -> 287 [style=dashed label="floating-point-literal"]
  545 -> 288 [style=dashed label="fold-expression"]
  545 -> 289 [style=dashed label="id-expression"]
  545 -> 291 [style=dashed label="integer-literal"]
  545 -> 292 [style=dashed label="lambda-expression"]
  545 -> 293 [style=dashed label="lambda-introducer"]
  545 -> 294 [style=dashed label="literal"]
  545 -> 295 [style=dashed label="literal-operator-id"]
  545 -> 799 [style=dashed label="multiplicative-expression"]
  545 -> 85 [style=dashed label="namespace-alias"]
  545 -> 88 [style=dashed label="namespace-name"]
  545 -> 299 [style=dashed label="nested-name-specifier"]
  545 -> 90 [style=dashed label="nested-name-specifier-opt"]
  545 -> 300 [style=dashed label="new-expression"]
  545 -> 301 [style=dashed label="noexcept-expression"]
  545 -> 302 [style=dashed label="operator-function-id"]
  545 -> 94 [style=dashed label="placeholder-type-specifier"]
  545 -> 303 [style=dashed label="pm-expression"]
  545 -> 304 [style=dashed label="pointer-literal"]
  545 -> 305 [style=dashed label="postfix-expression"]
  545 -> 306 [style=dashed label="primary-expression"]
  545 -> 307 [style=dashed label="qualified-id"]
  545 -> 309 [style=dashed label="requires-expression"]
  545 -> 311 [style=dashed label="simple-template-id"]
  545 -> 312 [style=dashed label="simple-type-specifier"]
  545 -> 313 [style=dashed label="string-literal"]
  545 -> 314 [style=dashed label="template-id"]
  545 -> 102 [style=dashed label="template-name"]
  545 -> 104 [style=dashed label="type-constraint"]
  545 -> 105 [style=dashed label="type-constraint-opt"]
  545 -> 106 [style=dashed label="type-name"]
  545 -> 108 [style=dashed label="typedef-name"]
  545 -> 316 [style=dashed label="typename-specifier"]
  545 -> 317 [style=dashed label="unary-expression"]
  545 -> 318 [style=dashed label="unary-operator"]
  545 -> 319 [style=dashed label="unqualified-id"]
  545 -> 320 [style=dashed label="user-defined-character-literal"]
  545 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  545 -> 322 [style=dashed label="user-defined-integer-literal"]
  545 -> 323 [style=dashed label="user-defined-literal"]
  545 -> 324 [style=dashed label="user-defined-string-literal"]
  545 -> "545R19" [style=solid]
 "545R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  545 -> "545R469d" [label="[IDENTIFIER]", style=solid]
 "545R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  545 -> "545R722d" [label="[\"decltype\"]", style=solid]
 "545R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  545 -> "545R722" [label="[\"auto\"]", style=solid]
 "545R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  546 [label="State 546\n\l 43 additive-expression: additive-expression \"-\" • multiplicative-expression\l"]
  546 -> 238 [style=solid label="IDENTIFIER"]
  546 -> 239 [style=solid label="\"noexcept\""]
  546 -> 240 [style=solid label="\"!\""]
  546 -> 241 [style=solid label="\"::\""]
  546 -> 242 [style=solid label="\"this\""]
  546 -> 8 [style=solid label="\"typename\""]
  546 -> 243 [style=solid label="\"+\""]
  546 -> 244 [style=solid label="\"-\""]
  546 -> 245 [style=solid label="\"(\""]
  546 -> 246 [style=solid label="\"&\""]
  546 -> 247 [style=solid label="\"[\""]
  546 -> 248 [style=solid label="\"co_await\""]
  546 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  546 -> 250 [style=solid label="CHARACTER_LITERAL"]
  546 -> 251 [style=solid label="\"operator\""]
  546 -> 21 [style=solid label="\"decltype\""]
  546 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  546 -> 253 [style=solid label="\"*\""]
  546 -> 254 [style=solid label="INTEGER_LITERAL"]
  546 -> 255 [style=solid label="\"requires\""]
  546 -> 256 [style=solid label="\"~\""]
  546 -> 257 [style=solid label="\"++\""]
  546 -> 258 [style=solid label="\"--\""]
  546 -> 259 [style=solid label="POINTER_LITERAL"]
  546 -> 260 [style=solid label="\"dynamic_cast\""]
  546 -> 261 [style=solid label="\"static_cast\""]
  546 -> 262 [style=solid label="\"reinterpret_cast\""]
  546 -> 263 [style=solid label="\"const_cast\""]
  546 -> 264 [style=solid label="\"typeid\""]
  546 -> 27 [style=solid label="\"char\""]
  546 -> 28 [style=solid label="\"char8_t\""]
  546 -> 29 [style=solid label="\"char16_t\""]
  546 -> 30 [style=solid label="\"char32_t\""]
  546 -> 31 [style=solid label="\"wchar_t\""]
  546 -> 32 [style=solid label="\"bool\""]
  546 -> 33 [style=solid label="\"short\""]
  546 -> 34 [style=solid label="\"int\""]
  546 -> 35 [style=solid label="\"long\""]
  546 -> 36 [style=solid label="\"signed\""]
  546 -> 37 [style=solid label="\"unsigned\""]
  546 -> 38 [style=solid label="\"float\""]
  546 -> 39 [style=solid label="\"double\""]
  546 -> 40 [style=solid label="\"void\""]
  546 -> 118 [style=solid label="STRING_LITERAL"]
  546 -> 266 [style=solid label="\"sizeof\""]
  546 -> 267 [style=solid label="\"alignof\""]
  546 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  546 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  546 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  546 -> 272 [style=dashed label="SCOPE-opt"]
  546 -> 276 [style=dashed label="await-expression"]
  546 -> 277 [style=dashed label="boolean-literal"]
  546 -> 278 [style=dashed label="cast-expression"]
  546 -> 279 [style=dashed label="character-literal"]
  546 -> 55 [style=dashed label="class-name"]
  546 -> 282 [style=dashed label="conversion-function-id"]
  546 -> 63 [style=dashed label="decltype-specifier"]
  546 -> 283 [style=dashed label="delete-expression"]
  546 -> 71 [style=dashed label="enum-name"]
  546 -> 287 [style=dashed label="floating-point-literal"]
  546 -> 288 [style=dashed label="fold-expression"]
  546 -> 289 [style=dashed label="id-expression"]
  546 -> 291 [style=dashed label="integer-literal"]
  546 -> 292 [style=dashed label="lambda-expression"]
  546 -> 293 [style=dashed label="lambda-introducer"]
  546 -> 294 [style=dashed label="literal"]
  546 -> 295 [style=dashed label="literal-operator-id"]
  546 -> 800 [style=dashed label="multiplicative-expression"]
  546 -> 85 [style=dashed label="namespace-alias"]
  546 -> 88 [style=dashed label="namespace-name"]
  546 -> 299 [style=dashed label="nested-name-specifier"]
  546 -> 90 [style=dashed label="nested-name-specifier-opt"]
  546 -> 300 [style=dashed label="new-expression"]
  546 -> 301 [style=dashed label="noexcept-expression"]
  546 -> 302 [style=dashed label="operator-function-id"]
  546 -> 94 [style=dashed label="placeholder-type-specifier"]
  546 -> 303 [style=dashed label="pm-expression"]
  546 -> 304 [style=dashed label="pointer-literal"]
  546 -> 305 [style=dashed label="postfix-expression"]
  546 -> 306 [style=dashed label="primary-expression"]
  546 -> 307 [style=dashed label="qualified-id"]
  546 -> 309 [style=dashed label="requires-expression"]
  546 -> 311 [style=dashed label="simple-template-id"]
  546 -> 312 [style=dashed label="simple-type-specifier"]
  546 -> 313 [style=dashed label="string-literal"]
  546 -> 314 [style=dashed label="template-id"]
  546 -> 102 [style=dashed label="template-name"]
  546 -> 104 [style=dashed label="type-constraint"]
  546 -> 105 [style=dashed label="type-constraint-opt"]
  546 -> 106 [style=dashed label="type-name"]
  546 -> 108 [style=dashed label="typedef-name"]
  546 -> 316 [style=dashed label="typename-specifier"]
  546 -> 317 [style=dashed label="unary-expression"]
  546 -> 318 [style=dashed label="unary-operator"]
  546 -> 319 [style=dashed label="unqualified-id"]
  546 -> 320 [style=dashed label="user-defined-character-literal"]
  546 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  546 -> 322 [style=dashed label="user-defined-integer-literal"]
  546 -> 323 [style=dashed label="user-defined-literal"]
  546 -> 324 [style=dashed label="user-defined-string-literal"]
  546 -> "546R19" [style=solid]
 "546R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  546 -> "546R469d" [label="[IDENTIFIER]", style=solid]
 "546R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  546 -> "546R722d" [label="[\"decltype\"]", style=solid]
 "546R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  546 -> "546R722" [label="[\"auto\"]", style=solid]
 "546R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  547 [label="State 547\n\l 48 and-expression: and-expression \"&\" • equality-expression\l"]
  547 -> 238 [style=solid label="IDENTIFIER"]
  547 -> 239 [style=solid label="\"noexcept\""]
  547 -> 240 [style=solid label="\"!\""]
  547 -> 241 [style=solid label="\"::\""]
  547 -> 242 [style=solid label="\"this\""]
  547 -> 8 [style=solid label="\"typename\""]
  547 -> 243 [style=solid label="\"+\""]
  547 -> 244 [style=solid label="\"-\""]
  547 -> 245 [style=solid label="\"(\""]
  547 -> 246 [style=solid label="\"&\""]
  547 -> 247 [style=solid label="\"[\""]
  547 -> 248 [style=solid label="\"co_await\""]
  547 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  547 -> 250 [style=solid label="CHARACTER_LITERAL"]
  547 -> 251 [style=solid label="\"operator\""]
  547 -> 21 [style=solid label="\"decltype\""]
  547 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  547 -> 253 [style=solid label="\"*\""]
  547 -> 254 [style=solid label="INTEGER_LITERAL"]
  547 -> 255 [style=solid label="\"requires\""]
  547 -> 256 [style=solid label="\"~\""]
  547 -> 257 [style=solid label="\"++\""]
  547 -> 258 [style=solid label="\"--\""]
  547 -> 259 [style=solid label="POINTER_LITERAL"]
  547 -> 260 [style=solid label="\"dynamic_cast\""]
  547 -> 261 [style=solid label="\"static_cast\""]
  547 -> 262 [style=solid label="\"reinterpret_cast\""]
  547 -> 263 [style=solid label="\"const_cast\""]
  547 -> 264 [style=solid label="\"typeid\""]
  547 -> 27 [style=solid label="\"char\""]
  547 -> 28 [style=solid label="\"char8_t\""]
  547 -> 29 [style=solid label="\"char16_t\""]
  547 -> 30 [style=solid label="\"char32_t\""]
  547 -> 31 [style=solid label="\"wchar_t\""]
  547 -> 32 [style=solid label="\"bool\""]
  547 -> 33 [style=solid label="\"short\""]
  547 -> 34 [style=solid label="\"int\""]
  547 -> 35 [style=solid label="\"long\""]
  547 -> 36 [style=solid label="\"signed\""]
  547 -> 37 [style=solid label="\"unsigned\""]
  547 -> 38 [style=solid label="\"float\""]
  547 -> 39 [style=solid label="\"double\""]
  547 -> 40 [style=solid label="\"void\""]
  547 -> 118 [style=solid label="STRING_LITERAL"]
  547 -> 266 [style=solid label="\"sizeof\""]
  547 -> 267 [style=solid label="\"alignof\""]
  547 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  547 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  547 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  547 -> 272 [style=dashed label="SCOPE-opt"]
  547 -> 273 [style=dashed label="additive-expression"]
  547 -> 276 [style=dashed label="await-expression"]
  547 -> 277 [style=dashed label="boolean-literal"]
  547 -> 278 [style=dashed label="cast-expression"]
  547 -> 279 [style=dashed label="character-literal"]
  547 -> 55 [style=dashed label="class-name"]
  547 -> 280 [style=dashed label="compare-expression"]
  547 -> 282 [style=dashed label="conversion-function-id"]
  547 -> 63 [style=dashed label="decltype-specifier"]
  547 -> 283 [style=dashed label="delete-expression"]
  547 -> 71 [style=dashed label="enum-name"]
  547 -> 801 [style=dashed label="equality-expression"]
  547 -> 287 [style=dashed label="floating-point-literal"]
  547 -> 288 [style=dashed label="fold-expression"]
  547 -> 289 [style=dashed label="id-expression"]
  547 -> 291 [style=dashed label="integer-literal"]
  547 -> 292 [style=dashed label="lambda-expression"]
  547 -> 293 [style=dashed label="lambda-introducer"]
  547 -> 294 [style=dashed label="literal"]
  547 -> 295 [style=dashed label="literal-operator-id"]
  547 -> 298 [style=dashed label="multiplicative-expression"]
  547 -> 85 [style=dashed label="namespace-alias"]
  547 -> 88 [style=dashed label="namespace-name"]
  547 -> 299 [style=dashed label="nested-name-specifier"]
  547 -> 90 [style=dashed label="nested-name-specifier-opt"]
  547 -> 300 [style=dashed label="new-expression"]
  547 -> 301 [style=dashed label="noexcept-expression"]
  547 -> 302 [style=dashed label="operator-function-id"]
  547 -> 94 [style=dashed label="placeholder-type-specifier"]
  547 -> 303 [style=dashed label="pm-expression"]
  547 -> 304 [style=dashed label="pointer-literal"]
  547 -> 305 [style=dashed label="postfix-expression"]
  547 -> 306 [style=dashed label="primary-expression"]
  547 -> 307 [style=dashed label="qualified-id"]
  547 -> 308 [style=dashed label="relational-expression"]
  547 -> 309 [style=dashed label="requires-expression"]
  547 -> 310 [style=dashed label="shift-expression"]
  547 -> 311 [style=dashed label="simple-template-id"]
  547 -> 312 [style=dashed label="simple-type-specifier"]
  547 -> 313 [style=dashed label="string-literal"]
  547 -> 314 [style=dashed label="template-id"]
  547 -> 102 [style=dashed label="template-name"]
  547 -> 104 [style=dashed label="type-constraint"]
  547 -> 105 [style=dashed label="type-constraint-opt"]
  547 -> 106 [style=dashed label="type-name"]
  547 -> 108 [style=dashed label="typedef-name"]
  547 -> 316 [style=dashed label="typename-specifier"]
  547 -> 317 [style=dashed label="unary-expression"]
  547 -> 318 [style=dashed label="unary-operator"]
  547 -> 319 [style=dashed label="unqualified-id"]
  547 -> 320 [style=dashed label="user-defined-character-literal"]
  547 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  547 -> 322 [style=dashed label="user-defined-integer-literal"]
  547 -> 323 [style=dashed label="user-defined-literal"]
  547 -> 324 [style=dashed label="user-defined-string-literal"]
  547 -> "547R19" [style=solid]
 "547R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  547 -> "547R469d" [label="[IDENTIFIER]", style=solid]
 "547R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  547 -> "547R722d" [label="[\"decltype\"]", style=solid]
 "547R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  547 -> "547R722" [label="[\"auto\"]", style=solid]
 "547R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  548 [label="State 548\n\l149 compare-expression: compare-expression \"<=>\" • shift-expression\l"]
  548 -> 238 [style=solid label="IDENTIFIER"]
  548 -> 239 [style=solid label="\"noexcept\""]
  548 -> 240 [style=solid label="\"!\""]
  548 -> 241 [style=solid label="\"::\""]
  548 -> 242 [style=solid label="\"this\""]
  548 -> 8 [style=solid label="\"typename\""]
  548 -> 243 [style=solid label="\"+\""]
  548 -> 244 [style=solid label="\"-\""]
  548 -> 245 [style=solid label="\"(\""]
  548 -> 246 [style=solid label="\"&\""]
  548 -> 247 [style=solid label="\"[\""]
  548 -> 248 [style=solid label="\"co_await\""]
  548 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  548 -> 250 [style=solid label="CHARACTER_LITERAL"]
  548 -> 251 [style=solid label="\"operator\""]
  548 -> 21 [style=solid label="\"decltype\""]
  548 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  548 -> 253 [style=solid label="\"*\""]
  548 -> 254 [style=solid label="INTEGER_LITERAL"]
  548 -> 255 [style=solid label="\"requires\""]
  548 -> 256 [style=solid label="\"~\""]
  548 -> 257 [style=solid label="\"++\""]
  548 -> 258 [style=solid label="\"--\""]
  548 -> 259 [style=solid label="POINTER_LITERAL"]
  548 -> 260 [style=solid label="\"dynamic_cast\""]
  548 -> 261 [style=solid label="\"static_cast\""]
  548 -> 262 [style=solid label="\"reinterpret_cast\""]
  548 -> 263 [style=solid label="\"const_cast\""]
  548 -> 264 [style=solid label="\"typeid\""]
  548 -> 27 [style=solid label="\"char\""]
  548 -> 28 [style=solid label="\"char8_t\""]
  548 -> 29 [style=solid label="\"char16_t\""]
  548 -> 30 [style=solid label="\"char32_t\""]
  548 -> 31 [style=solid label="\"wchar_t\""]
  548 -> 32 [style=solid label="\"bool\""]
  548 -> 33 [style=solid label="\"short\""]
  548 -> 34 [style=solid label="\"int\""]
  548 -> 35 [style=solid label="\"long\""]
  548 -> 36 [style=solid label="\"signed\""]
  548 -> 37 [style=solid label="\"unsigned\""]
  548 -> 38 [style=solid label="\"float\""]
  548 -> 39 [style=solid label="\"double\""]
  548 -> 40 [style=solid label="\"void\""]
  548 -> 118 [style=solid label="STRING_LITERAL"]
  548 -> 266 [style=solid label="\"sizeof\""]
  548 -> 267 [style=solid label="\"alignof\""]
  548 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  548 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  548 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  548 -> 272 [style=dashed label="SCOPE-opt"]
  548 -> 273 [style=dashed label="additive-expression"]
  548 -> 276 [style=dashed label="await-expression"]
  548 -> 277 [style=dashed label="boolean-literal"]
  548 -> 278 [style=dashed label="cast-expression"]
  548 -> 279 [style=dashed label="character-literal"]
  548 -> 55 [style=dashed label="class-name"]
  548 -> 282 [style=dashed label="conversion-function-id"]
  548 -> 63 [style=dashed label="decltype-specifier"]
  548 -> 283 [style=dashed label="delete-expression"]
  548 -> 71 [style=dashed label="enum-name"]
  548 -> 287 [style=dashed label="floating-point-literal"]
  548 -> 288 [style=dashed label="fold-expression"]
  548 -> 289 [style=dashed label="id-expression"]
  548 -> 291 [style=dashed label="integer-literal"]
  548 -> 292 [style=dashed label="lambda-expression"]
  548 -> 293 [style=dashed label="lambda-introducer"]
  548 -> 294 [style=dashed label="literal"]
  548 -> 295 [style=dashed label="literal-operator-id"]
  548 -> 298 [style=dashed label="multiplicative-expression"]
  548 -> 85 [style=dashed label="namespace-alias"]
  548 -> 88 [style=dashed label="namespace-name"]
  548 -> 299 [style=dashed label="nested-name-specifier"]
  548 -> 90 [style=dashed label="nested-name-specifier-opt"]
  548 -> 300 [style=dashed label="new-expression"]
  548 -> 301 [style=dashed label="noexcept-expression"]
  548 -> 302 [style=dashed label="operator-function-id"]
  548 -> 94 [style=dashed label="placeholder-type-specifier"]
  548 -> 303 [style=dashed label="pm-expression"]
  548 -> 304 [style=dashed label="pointer-literal"]
  548 -> 305 [style=dashed label="postfix-expression"]
  548 -> 306 [style=dashed label="primary-expression"]
  548 -> 307 [style=dashed label="qualified-id"]
  548 -> 309 [style=dashed label="requires-expression"]
  548 -> 802 [style=dashed label="shift-expression"]
  548 -> 311 [style=dashed label="simple-template-id"]
  548 -> 312 [style=dashed label="simple-type-specifier"]
  548 -> 313 [style=dashed label="string-literal"]
  548 -> 314 [style=dashed label="template-id"]
  548 -> 102 [style=dashed label="template-name"]
  548 -> 104 [style=dashed label="type-constraint"]
  548 -> 105 [style=dashed label="type-constraint-opt"]
  548 -> 106 [style=dashed label="type-name"]
  548 -> 108 [style=dashed label="typedef-name"]
  548 -> 316 [style=dashed label="typename-specifier"]
  548 -> 317 [style=dashed label="unary-expression"]
  548 -> 318 [style=dashed label="unary-operator"]
  548 -> 319 [style=dashed label="unqualified-id"]
  548 -> 320 [style=dashed label="user-defined-character-literal"]
  548 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  548 -> 322 [style=dashed label="user-defined-integer-literal"]
  548 -> 323 [style=dashed label="user-defined-literal"]
  548 -> 324 [style=dashed label="user-defined-string-literal"]
  548 -> "548R19" [style=solid]
 "548R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  548 -> "548R469d" [label="[IDENTIFIER]", style=solid]
 "548R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  548 -> "548R722d" [label="[\"decltype\"]", style=solid]
 "548R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  548 -> "548R722" [label="[\"auto\"]", style=solid]
 "548R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  549 [label="State 549\n\l259 equality-expression: equality-expression \"==\" • relational-expression\l"]
  549 -> 238 [style=solid label="IDENTIFIER"]
  549 -> 239 [style=solid label="\"noexcept\""]
  549 -> 240 [style=solid label="\"!\""]
  549 -> 241 [style=solid label="\"::\""]
  549 -> 242 [style=solid label="\"this\""]
  549 -> 8 [style=solid label="\"typename\""]
  549 -> 243 [style=solid label="\"+\""]
  549 -> 244 [style=solid label="\"-\""]
  549 -> 245 [style=solid label="\"(\""]
  549 -> 246 [style=solid label="\"&\""]
  549 -> 247 [style=solid label="\"[\""]
  549 -> 248 [style=solid label="\"co_await\""]
  549 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  549 -> 250 [style=solid label="CHARACTER_LITERAL"]
  549 -> 251 [style=solid label="\"operator\""]
  549 -> 21 [style=solid label="\"decltype\""]
  549 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  549 -> 253 [style=solid label="\"*\""]
  549 -> 254 [style=solid label="INTEGER_LITERAL"]
  549 -> 255 [style=solid label="\"requires\""]
  549 -> 256 [style=solid label="\"~\""]
  549 -> 257 [style=solid label="\"++\""]
  549 -> 258 [style=solid label="\"--\""]
  549 -> 259 [style=solid label="POINTER_LITERAL"]
  549 -> 260 [style=solid label="\"dynamic_cast\""]
  549 -> 261 [style=solid label="\"static_cast\""]
  549 -> 262 [style=solid label="\"reinterpret_cast\""]
  549 -> 263 [style=solid label="\"const_cast\""]
  549 -> 264 [style=solid label="\"typeid\""]
  549 -> 27 [style=solid label="\"char\""]
  549 -> 28 [style=solid label="\"char8_t\""]
  549 -> 29 [style=solid label="\"char16_t\""]
  549 -> 30 [style=solid label="\"char32_t\""]
  549 -> 31 [style=solid label="\"wchar_t\""]
  549 -> 32 [style=solid label="\"bool\""]
  549 -> 33 [style=solid label="\"short\""]
  549 -> 34 [style=solid label="\"int\""]
  549 -> 35 [style=solid label="\"long\""]
  549 -> 36 [style=solid label="\"signed\""]
  549 -> 37 [style=solid label="\"unsigned\""]
  549 -> 38 [style=solid label="\"float\""]
  549 -> 39 [style=solid label="\"double\""]
  549 -> 40 [style=solid label="\"void\""]
  549 -> 118 [style=solid label="STRING_LITERAL"]
  549 -> 266 [style=solid label="\"sizeof\""]
  549 -> 267 [style=solid label="\"alignof\""]
  549 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  549 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  549 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  549 -> 272 [style=dashed label="SCOPE-opt"]
  549 -> 273 [style=dashed label="additive-expression"]
  549 -> 276 [style=dashed label="await-expression"]
  549 -> 277 [style=dashed label="boolean-literal"]
  549 -> 278 [style=dashed label="cast-expression"]
  549 -> 279 [style=dashed label="character-literal"]
  549 -> 55 [style=dashed label="class-name"]
  549 -> 280 [style=dashed label="compare-expression"]
  549 -> 282 [style=dashed label="conversion-function-id"]
  549 -> 63 [style=dashed label="decltype-specifier"]
  549 -> 283 [style=dashed label="delete-expression"]
  549 -> 71 [style=dashed label="enum-name"]
  549 -> 287 [style=dashed label="floating-point-literal"]
  549 -> 288 [style=dashed label="fold-expression"]
  549 -> 289 [style=dashed label="id-expression"]
  549 -> 291 [style=dashed label="integer-literal"]
  549 -> 292 [style=dashed label="lambda-expression"]
  549 -> 293 [style=dashed label="lambda-introducer"]
  549 -> 294 [style=dashed label="literal"]
  549 -> 295 [style=dashed label="literal-operator-id"]
  549 -> 298 [style=dashed label="multiplicative-expression"]
  549 -> 85 [style=dashed label="namespace-alias"]
  549 -> 88 [style=dashed label="namespace-name"]
  549 -> 299 [style=dashed label="nested-name-specifier"]
  549 -> 90 [style=dashed label="nested-name-specifier-opt"]
  549 -> 300 [style=dashed label="new-expression"]
  549 -> 301 [style=dashed label="noexcept-expression"]
  549 -> 302 [style=dashed label="operator-function-id"]
  549 -> 94 [style=dashed label="placeholder-type-specifier"]
  549 -> 303 [style=dashed label="pm-expression"]
  549 -> 304 [style=dashed label="pointer-literal"]
  549 -> 305 [style=dashed label="postfix-expression"]
  549 -> 306 [style=dashed label="primary-expression"]
  549 -> 307 [style=dashed label="qualified-id"]
  549 -> 803 [style=dashed label="relational-expression"]
  549 -> 309 [style=dashed label="requires-expression"]
  549 -> 310 [style=dashed label="shift-expression"]
  549 -> 311 [style=dashed label="simple-template-id"]
  549 -> 312 [style=dashed label="simple-type-specifier"]
  549 -> 313 [style=dashed label="string-literal"]
  549 -> 314 [style=dashed label="template-id"]
  549 -> 102 [style=dashed label="template-name"]
  549 -> 104 [style=dashed label="type-constraint"]
  549 -> 105 [style=dashed label="type-constraint-opt"]
  549 -> 106 [style=dashed label="type-name"]
  549 -> 108 [style=dashed label="typedef-name"]
  549 -> 316 [style=dashed label="typename-specifier"]
  549 -> 317 [style=dashed label="unary-expression"]
  549 -> 318 [style=dashed label="unary-operator"]
  549 -> 319 [style=dashed label="unqualified-id"]
  549 -> 320 [style=dashed label="user-defined-character-literal"]
  549 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  549 -> 322 [style=dashed label="user-defined-integer-literal"]
  549 -> 323 [style=dashed label="user-defined-literal"]
  549 -> 324 [style=dashed label="user-defined-string-literal"]
  549 -> "549R19" [style=solid]
 "549R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  549 -> "549R469d" [label="[IDENTIFIER]", style=solid]
 "549R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  549 -> "549R722d" [label="[\"decltype\"]", style=solid]
 "549R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  549 -> "549R722" [label="[\"auto\"]", style=solid]
 "549R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  550 [label="State 550\n\l260 equality-expression: equality-expression \"!=\" • relational-expression\l"]
  550 -> 238 [style=solid label="IDENTIFIER"]
  550 -> 239 [style=solid label="\"noexcept\""]
  550 -> 240 [style=solid label="\"!\""]
  550 -> 241 [style=solid label="\"::\""]
  550 -> 242 [style=solid label="\"this\""]
  550 -> 8 [style=solid label="\"typename\""]
  550 -> 243 [style=solid label="\"+\""]
  550 -> 244 [style=solid label="\"-\""]
  550 -> 245 [style=solid label="\"(\""]
  550 -> 246 [style=solid label="\"&\""]
  550 -> 247 [style=solid label="\"[\""]
  550 -> 248 [style=solid label="\"co_await\""]
  550 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  550 -> 250 [style=solid label="CHARACTER_LITERAL"]
  550 -> 251 [style=solid label="\"operator\""]
  550 -> 21 [style=solid label="\"decltype\""]
  550 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  550 -> 253 [style=solid label="\"*\""]
  550 -> 254 [style=solid label="INTEGER_LITERAL"]
  550 -> 255 [style=solid label="\"requires\""]
  550 -> 256 [style=solid label="\"~\""]
  550 -> 257 [style=solid label="\"++\""]
  550 -> 258 [style=solid label="\"--\""]
  550 -> 259 [style=solid label="POINTER_LITERAL"]
  550 -> 260 [style=solid label="\"dynamic_cast\""]
  550 -> 261 [style=solid label="\"static_cast\""]
  550 -> 262 [style=solid label="\"reinterpret_cast\""]
  550 -> 263 [style=solid label="\"const_cast\""]
  550 -> 264 [style=solid label="\"typeid\""]
  550 -> 27 [style=solid label="\"char\""]
  550 -> 28 [style=solid label="\"char8_t\""]
  550 -> 29 [style=solid label="\"char16_t\""]
  550 -> 30 [style=solid label="\"char32_t\""]
  550 -> 31 [style=solid label="\"wchar_t\""]
  550 -> 32 [style=solid label="\"bool\""]
  550 -> 33 [style=solid label="\"short\""]
  550 -> 34 [style=solid label="\"int\""]
  550 -> 35 [style=solid label="\"long\""]
  550 -> 36 [style=solid label="\"signed\""]
  550 -> 37 [style=solid label="\"unsigned\""]
  550 -> 38 [style=solid label="\"float\""]
  550 -> 39 [style=solid label="\"double\""]
  550 -> 40 [style=solid label="\"void\""]
  550 -> 118 [style=solid label="STRING_LITERAL"]
  550 -> 266 [style=solid label="\"sizeof\""]
  550 -> 267 [style=solid label="\"alignof\""]
  550 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  550 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  550 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  550 -> 272 [style=dashed label="SCOPE-opt"]
  550 -> 273 [style=dashed label="additive-expression"]
  550 -> 276 [style=dashed label="await-expression"]
  550 -> 277 [style=dashed label="boolean-literal"]
  550 -> 278 [style=dashed label="cast-expression"]
  550 -> 279 [style=dashed label="character-literal"]
  550 -> 55 [style=dashed label="class-name"]
  550 -> 280 [style=dashed label="compare-expression"]
  550 -> 282 [style=dashed label="conversion-function-id"]
  550 -> 63 [style=dashed label="decltype-specifier"]
  550 -> 283 [style=dashed label="delete-expression"]
  550 -> 71 [style=dashed label="enum-name"]
  550 -> 287 [style=dashed label="floating-point-literal"]
  550 -> 288 [style=dashed label="fold-expression"]
  550 -> 289 [style=dashed label="id-expression"]
  550 -> 291 [style=dashed label="integer-literal"]
  550 -> 292 [style=dashed label="lambda-expression"]
  550 -> 293 [style=dashed label="lambda-introducer"]
  550 -> 294 [style=dashed label="literal"]
  550 -> 295 [style=dashed label="literal-operator-id"]
  550 -> 298 [style=dashed label="multiplicative-expression"]
  550 -> 85 [style=dashed label="namespace-alias"]
  550 -> 88 [style=dashed label="namespace-name"]
  550 -> 299 [style=dashed label="nested-name-specifier"]
  550 -> 90 [style=dashed label="nested-name-specifier-opt"]
  550 -> 300 [style=dashed label="new-expression"]
  550 -> 301 [style=dashed label="noexcept-expression"]
  550 -> 302 [style=dashed label="operator-function-id"]
  550 -> 94 [style=dashed label="placeholder-type-specifier"]
  550 -> 303 [style=dashed label="pm-expression"]
  550 -> 304 [style=dashed label="pointer-literal"]
  550 -> 305 [style=dashed label="postfix-expression"]
  550 -> 306 [style=dashed label="primary-expression"]
  550 -> 307 [style=dashed label="qualified-id"]
  550 -> 804 [style=dashed label="relational-expression"]
  550 -> 309 [style=dashed label="requires-expression"]
  550 -> 310 [style=dashed label="shift-expression"]
  550 -> 311 [style=dashed label="simple-template-id"]
  550 -> 312 [style=dashed label="simple-type-specifier"]
  550 -> 313 [style=dashed label="string-literal"]
  550 -> 314 [style=dashed label="template-id"]
  550 -> 102 [style=dashed label="template-name"]
  550 -> 104 [style=dashed label="type-constraint"]
  550 -> 105 [style=dashed label="type-constraint-opt"]
  550 -> 106 [style=dashed label="type-name"]
  550 -> 108 [style=dashed label="typedef-name"]
  550 -> 316 [style=dashed label="typename-specifier"]
  550 -> 317 [style=dashed label="unary-expression"]
  550 -> 318 [style=dashed label="unary-operator"]
  550 -> 319 [style=dashed label="unqualified-id"]
  550 -> 320 [style=dashed label="user-defined-character-literal"]
  550 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  550 -> 322 [style=dashed label="user-defined-integer-literal"]
  550 -> 323 [style=dashed label="user-defined-literal"]
  550 -> 324 [style=dashed label="user-defined-string-literal"]
  550 -> "550R19" [style=solid]
 "550R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  550 -> "550R469d" [label="[IDENTIFIER]", style=solid]
 "550R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  550 -> "550R722d" [label="[\"decltype\"]", style=solid]
 "550R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  550 -> "550R722" [label="[\"auto\"]", style=solid]
 "550R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  551 [label="State 551\n\l265 exclusive-or-expression: exclusive-or-expression \"^\" • and-expression\l"]
  551 -> 238 [style=solid label="IDENTIFIER"]
  551 -> 239 [style=solid label="\"noexcept\""]
  551 -> 240 [style=solid label="\"!\""]
  551 -> 241 [style=solid label="\"::\""]
  551 -> 242 [style=solid label="\"this\""]
  551 -> 8 [style=solid label="\"typename\""]
  551 -> 243 [style=solid label="\"+\""]
  551 -> 244 [style=solid label="\"-\""]
  551 -> 245 [style=solid label="\"(\""]
  551 -> 246 [style=solid label="\"&\""]
  551 -> 247 [style=solid label="\"[\""]
  551 -> 248 [style=solid label="\"co_await\""]
  551 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  551 -> 250 [style=solid label="CHARACTER_LITERAL"]
  551 -> 251 [style=solid label="\"operator\""]
  551 -> 21 [style=solid label="\"decltype\""]
  551 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  551 -> 253 [style=solid label="\"*\""]
  551 -> 254 [style=solid label="INTEGER_LITERAL"]
  551 -> 255 [style=solid label="\"requires\""]
  551 -> 256 [style=solid label="\"~\""]
  551 -> 257 [style=solid label="\"++\""]
  551 -> 258 [style=solid label="\"--\""]
  551 -> 259 [style=solid label="POINTER_LITERAL"]
  551 -> 260 [style=solid label="\"dynamic_cast\""]
  551 -> 261 [style=solid label="\"static_cast\""]
  551 -> 262 [style=solid label="\"reinterpret_cast\""]
  551 -> 263 [style=solid label="\"const_cast\""]
  551 -> 264 [style=solid label="\"typeid\""]
  551 -> 27 [style=solid label="\"char\""]
  551 -> 28 [style=solid label="\"char8_t\""]
  551 -> 29 [style=solid label="\"char16_t\""]
  551 -> 30 [style=solid label="\"char32_t\""]
  551 -> 31 [style=solid label="\"wchar_t\""]
  551 -> 32 [style=solid label="\"bool\""]
  551 -> 33 [style=solid label="\"short\""]
  551 -> 34 [style=solid label="\"int\""]
  551 -> 35 [style=solid label="\"long\""]
  551 -> 36 [style=solid label="\"signed\""]
  551 -> 37 [style=solid label="\"unsigned\""]
  551 -> 38 [style=solid label="\"float\""]
  551 -> 39 [style=solid label="\"double\""]
  551 -> 40 [style=solid label="\"void\""]
  551 -> 118 [style=solid label="STRING_LITERAL"]
  551 -> 266 [style=solid label="\"sizeof\""]
  551 -> 267 [style=solid label="\"alignof\""]
  551 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  551 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  551 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  551 -> 272 [style=dashed label="SCOPE-opt"]
  551 -> 273 [style=dashed label="additive-expression"]
  551 -> 805 [style=dashed label="and-expression"]
  551 -> 276 [style=dashed label="await-expression"]
  551 -> 277 [style=dashed label="boolean-literal"]
  551 -> 278 [style=dashed label="cast-expression"]
  551 -> 279 [style=dashed label="character-literal"]
  551 -> 55 [style=dashed label="class-name"]
  551 -> 280 [style=dashed label="compare-expression"]
  551 -> 282 [style=dashed label="conversion-function-id"]
  551 -> 63 [style=dashed label="decltype-specifier"]
  551 -> 283 [style=dashed label="delete-expression"]
  551 -> 71 [style=dashed label="enum-name"]
  551 -> 284 [style=dashed label="equality-expression"]
  551 -> 287 [style=dashed label="floating-point-literal"]
  551 -> 288 [style=dashed label="fold-expression"]
  551 -> 289 [style=dashed label="id-expression"]
  551 -> 291 [style=dashed label="integer-literal"]
  551 -> 292 [style=dashed label="lambda-expression"]
  551 -> 293 [style=dashed label="lambda-introducer"]
  551 -> 294 [style=dashed label="literal"]
  551 -> 295 [style=dashed label="literal-operator-id"]
  551 -> 298 [style=dashed label="multiplicative-expression"]
  551 -> 85 [style=dashed label="namespace-alias"]
  551 -> 88 [style=dashed label="namespace-name"]
  551 -> 299 [style=dashed label="nested-name-specifier"]
  551 -> 90 [style=dashed label="nested-name-specifier-opt"]
  551 -> 300 [style=dashed label="new-expression"]
  551 -> 301 [style=dashed label="noexcept-expression"]
  551 -> 302 [style=dashed label="operator-function-id"]
  551 -> 94 [style=dashed label="placeholder-type-specifier"]
  551 -> 303 [style=dashed label="pm-expression"]
  551 -> 304 [style=dashed label="pointer-literal"]
  551 -> 305 [style=dashed label="postfix-expression"]
  551 -> 306 [style=dashed label="primary-expression"]
  551 -> 307 [style=dashed label="qualified-id"]
  551 -> 308 [style=dashed label="relational-expression"]
  551 -> 309 [style=dashed label="requires-expression"]
  551 -> 310 [style=dashed label="shift-expression"]
  551 -> 311 [style=dashed label="simple-template-id"]
  551 -> 312 [style=dashed label="simple-type-specifier"]
  551 -> 313 [style=dashed label="string-literal"]
  551 -> 314 [style=dashed label="template-id"]
  551 -> 102 [style=dashed label="template-name"]
  551 -> 104 [style=dashed label="type-constraint"]
  551 -> 105 [style=dashed label="type-constraint-opt"]
  551 -> 106 [style=dashed label="type-name"]
  551 -> 108 [style=dashed label="typedef-name"]
  551 -> 316 [style=dashed label="typename-specifier"]
  551 -> 317 [style=dashed label="unary-expression"]
  551 -> 318 [style=dashed label="unary-operator"]
  551 -> 319 [style=dashed label="unqualified-id"]
  551 -> 320 [style=dashed label="user-defined-character-literal"]
  551 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  551 -> 322 [style=dashed label="user-defined-integer-literal"]
  551 -> 323 [style=dashed label="user-defined-literal"]
  551 -> 324 [style=dashed label="user-defined-string-literal"]
  551 -> "551R19" [style=solid]
 "551R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  551 -> "551R469d" [label="[IDENTIFIER]", style=solid]
 "551R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  551 -> "551R722d" [label="[\"decltype\"]", style=solid]
 "551R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  551 -> "551R722" [label="[\"auto\"]", style=solid]
 "551R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  552 [label="State 552\n\l280 expression: expression \",\" • assignment-expression\l"]
  552 -> 238 [style=solid label="IDENTIFIER"]
  552 -> 239 [style=solid label="\"noexcept\""]
  552 -> 240 [style=solid label="\"!\""]
  552 -> 241 [style=solid label="\"::\""]
  552 -> 242 [style=solid label="\"this\""]
  552 -> 8 [style=solid label="\"typename\""]
  552 -> 243 [style=solid label="\"+\""]
  552 -> 244 [style=solid label="\"-\""]
  552 -> 245 [style=solid label="\"(\""]
  552 -> 246 [style=solid label="\"&\""]
  552 -> 247 [style=solid label="\"[\""]
  552 -> 248 [style=solid label="\"co_await\""]
  552 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  552 -> 250 [style=solid label="CHARACTER_LITERAL"]
  552 -> 251 [style=solid label="\"operator\""]
  552 -> 21 [style=solid label="\"decltype\""]
  552 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  552 -> 253 [style=solid label="\"*\""]
  552 -> 254 [style=solid label="INTEGER_LITERAL"]
  552 -> 255 [style=solid label="\"requires\""]
  552 -> 256 [style=solid label="\"~\""]
  552 -> 257 [style=solid label="\"++\""]
  552 -> 258 [style=solid label="\"--\""]
  552 -> 259 [style=solid label="POINTER_LITERAL"]
  552 -> 260 [style=solid label="\"dynamic_cast\""]
  552 -> 261 [style=solid label="\"static_cast\""]
  552 -> 262 [style=solid label="\"reinterpret_cast\""]
  552 -> 263 [style=solid label="\"const_cast\""]
  552 -> 264 [style=solid label="\"typeid\""]
  552 -> 27 [style=solid label="\"char\""]
  552 -> 28 [style=solid label="\"char8_t\""]
  552 -> 29 [style=solid label="\"char16_t\""]
  552 -> 30 [style=solid label="\"char32_t\""]
  552 -> 31 [style=solid label="\"wchar_t\""]
  552 -> 32 [style=solid label="\"bool\""]
  552 -> 33 [style=solid label="\"short\""]
  552 -> 34 [style=solid label="\"int\""]
  552 -> 35 [style=solid label="\"long\""]
  552 -> 36 [style=solid label="\"signed\""]
  552 -> 37 [style=solid label="\"unsigned\""]
  552 -> 38 [style=solid label="\"float\""]
  552 -> 39 [style=solid label="\"double\""]
  552 -> 40 [style=solid label="\"void\""]
  552 -> 118 [style=solid label="STRING_LITERAL"]
  552 -> 265 [style=solid label="\"throw\""]
  552 -> 266 [style=solid label="\"sizeof\""]
  552 -> 267 [style=solid label="\"alignof\""]
  552 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  552 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  552 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  552 -> 271 [style=solid label="\"co_yield\""]
  552 -> 272 [style=dashed label="SCOPE-opt"]
  552 -> 273 [style=dashed label="additive-expression"]
  552 -> 274 [style=dashed label="and-expression"]
  552 -> 806 [style=dashed label="assignment-expression"]
  552 -> 276 [style=dashed label="await-expression"]
  552 -> 277 [style=dashed label="boolean-literal"]
  552 -> 278 [style=dashed label="cast-expression"]
  552 -> 279 [style=dashed label="character-literal"]
  552 -> 55 [style=dashed label="class-name"]
  552 -> 280 [style=dashed label="compare-expression"]
  552 -> 281 [style=dashed label="conditional-expression"]
  552 -> 282 [style=dashed label="conversion-function-id"]
  552 -> 63 [style=dashed label="decltype-specifier"]
  552 -> 283 [style=dashed label="delete-expression"]
  552 -> 71 [style=dashed label="enum-name"]
  552 -> 284 [style=dashed label="equality-expression"]
  552 -> 285 [style=dashed label="exclusive-or-expression"]
  552 -> 287 [style=dashed label="floating-point-literal"]
  552 -> 288 [style=dashed label="fold-expression"]
  552 -> 289 [style=dashed label="id-expression"]
  552 -> 290 [style=dashed label="inclusive-or-expression"]
  552 -> 291 [style=dashed label="integer-literal"]
  552 -> 292 [style=dashed label="lambda-expression"]
  552 -> 293 [style=dashed label="lambda-introducer"]
  552 -> 294 [style=dashed label="literal"]
  552 -> 295 [style=dashed label="literal-operator-id"]
  552 -> 296 [style=dashed label="logical-and-expression"]
  552 -> 297 [style=dashed label="logical-or-expression"]
  552 -> 298 [style=dashed label="multiplicative-expression"]
  552 -> 85 [style=dashed label="namespace-alias"]
  552 -> 88 [style=dashed label="namespace-name"]
  552 -> 299 [style=dashed label="nested-name-specifier"]
  552 -> 90 [style=dashed label="nested-name-specifier-opt"]
  552 -> 300 [style=dashed label="new-expression"]
  552 -> 301 [style=dashed label="noexcept-expression"]
  552 -> 302 [style=dashed label="operator-function-id"]
  552 -> 94 [style=dashed label="placeholder-type-specifier"]
  552 -> 303 [style=dashed label="pm-expression"]
  552 -> 304 [style=dashed label="pointer-literal"]
  552 -> 305 [style=dashed label="postfix-expression"]
  552 -> 306 [style=dashed label="primary-expression"]
  552 -> 307 [style=dashed label="qualified-id"]
  552 -> 308 [style=dashed label="relational-expression"]
  552 -> 309 [style=dashed label="requires-expression"]
  552 -> 310 [style=dashed label="shift-expression"]
  552 -> 311 [style=dashed label="simple-template-id"]
  552 -> 312 [style=dashed label="simple-type-specifier"]
  552 -> 313 [style=dashed label="string-literal"]
  552 -> 314 [style=dashed label="template-id"]
  552 -> 102 [style=dashed label="template-name"]
  552 -> 315 [style=dashed label="throw-expression"]
  552 -> 104 [style=dashed label="type-constraint"]
  552 -> 105 [style=dashed label="type-constraint-opt"]
  552 -> 106 [style=dashed label="type-name"]
  552 -> 108 [style=dashed label="typedef-name"]
  552 -> 316 [style=dashed label="typename-specifier"]
  552 -> 317 [style=dashed label="unary-expression"]
  552 -> 318 [style=dashed label="unary-operator"]
  552 -> 319 [style=dashed label="unqualified-id"]
  552 -> 320 [style=dashed label="user-defined-character-literal"]
  552 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  552 -> 322 [style=dashed label="user-defined-integer-literal"]
  552 -> 323 [style=dashed label="user-defined-literal"]
  552 -> 324 [style=dashed label="user-defined-string-literal"]
  552 -> 325 [style=dashed label="yield-expression"]
  552 -> "552R19" [style=solid]
 "552R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  552 -> "552R469d" [label="[IDENTIFIER]", style=solid]
 "552R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  552 -> "552R722d" [label="[\"decltype\"]", style=solid]
 "552R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  552 -> "552R722" [label="[\"auto\"]", style=solid]
 "552R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  553 [label="State 553\n\l216 decltype-specifier: \"decltype\" \"(\" expression \")\" •\l"]
  553 -> "553R216" [style=solid]
 "553R216" [label="R216", fillcolor=3, shape=diamond, style=filled]
  554 [label="State 554\n\l348 inclusive-or-expression: inclusive-or-expression \"|\" • exclusive-or-expression\l"]
  554 -> 238 [style=solid label="IDENTIFIER"]
  554 -> 239 [style=solid label="\"noexcept\""]
  554 -> 240 [style=solid label="\"!\""]
  554 -> 241 [style=solid label="\"::\""]
  554 -> 242 [style=solid label="\"this\""]
  554 -> 8 [style=solid label="\"typename\""]
  554 -> 243 [style=solid label="\"+\""]
  554 -> 244 [style=solid label="\"-\""]
  554 -> 245 [style=solid label="\"(\""]
  554 -> 246 [style=solid label="\"&\""]
  554 -> 247 [style=solid label="\"[\""]
  554 -> 248 [style=solid label="\"co_await\""]
  554 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  554 -> 250 [style=solid label="CHARACTER_LITERAL"]
  554 -> 251 [style=solid label="\"operator\""]
  554 -> 21 [style=solid label="\"decltype\""]
  554 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  554 -> 253 [style=solid label="\"*\""]
  554 -> 254 [style=solid label="INTEGER_LITERAL"]
  554 -> 255 [style=solid label="\"requires\""]
  554 -> 256 [style=solid label="\"~\""]
  554 -> 257 [style=solid label="\"++\""]
  554 -> 258 [style=solid label="\"--\""]
  554 -> 259 [style=solid label="POINTER_LITERAL"]
  554 -> 260 [style=solid label="\"dynamic_cast\""]
  554 -> 261 [style=solid label="\"static_cast\""]
  554 -> 262 [style=solid label="\"reinterpret_cast\""]
  554 -> 263 [style=solid label="\"const_cast\""]
  554 -> 264 [style=solid label="\"typeid\""]
  554 -> 27 [style=solid label="\"char\""]
  554 -> 28 [style=solid label="\"char8_t\""]
  554 -> 29 [style=solid label="\"char16_t\""]
  554 -> 30 [style=solid label="\"char32_t\""]
  554 -> 31 [style=solid label="\"wchar_t\""]
  554 -> 32 [style=solid label="\"bool\""]
  554 -> 33 [style=solid label="\"short\""]
  554 -> 34 [style=solid label="\"int\""]
  554 -> 35 [style=solid label="\"long\""]
  554 -> 36 [style=solid label="\"signed\""]
  554 -> 37 [style=solid label="\"unsigned\""]
  554 -> 38 [style=solid label="\"float\""]
  554 -> 39 [style=solid label="\"double\""]
  554 -> 40 [style=solid label="\"void\""]
  554 -> 118 [style=solid label="STRING_LITERAL"]
  554 -> 266 [style=solid label="\"sizeof\""]
  554 -> 267 [style=solid label="\"alignof\""]
  554 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  554 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  554 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  554 -> 272 [style=dashed label="SCOPE-opt"]
  554 -> 273 [style=dashed label="additive-expression"]
  554 -> 274 [style=dashed label="and-expression"]
  554 -> 276 [style=dashed label="await-expression"]
  554 -> 277 [style=dashed label="boolean-literal"]
  554 -> 278 [style=dashed label="cast-expression"]
  554 -> 279 [style=dashed label="character-literal"]
  554 -> 55 [style=dashed label="class-name"]
  554 -> 280 [style=dashed label="compare-expression"]
  554 -> 282 [style=dashed label="conversion-function-id"]
  554 -> 63 [style=dashed label="decltype-specifier"]
  554 -> 283 [style=dashed label="delete-expression"]
  554 -> 71 [style=dashed label="enum-name"]
  554 -> 284 [style=dashed label="equality-expression"]
  554 -> 807 [style=dashed label="exclusive-or-expression"]
  554 -> 287 [style=dashed label="floating-point-literal"]
  554 -> 288 [style=dashed label="fold-expression"]
  554 -> 289 [style=dashed label="id-expression"]
  554 -> 291 [style=dashed label="integer-literal"]
  554 -> 292 [style=dashed label="lambda-expression"]
  554 -> 293 [style=dashed label="lambda-introducer"]
  554 -> 294 [style=dashed label="literal"]
  554 -> 295 [style=dashed label="literal-operator-id"]
  554 -> 298 [style=dashed label="multiplicative-expression"]
  554 -> 85 [style=dashed label="namespace-alias"]
  554 -> 88 [style=dashed label="namespace-name"]
  554 -> 299 [style=dashed label="nested-name-specifier"]
  554 -> 90 [style=dashed label="nested-name-specifier-opt"]
  554 -> 300 [style=dashed label="new-expression"]
  554 -> 301 [style=dashed label="noexcept-expression"]
  554 -> 302 [style=dashed label="operator-function-id"]
  554 -> 94 [style=dashed label="placeholder-type-specifier"]
  554 -> 303 [style=dashed label="pm-expression"]
  554 -> 304 [style=dashed label="pointer-literal"]
  554 -> 305 [style=dashed label="postfix-expression"]
  554 -> 306 [style=dashed label="primary-expression"]
  554 -> 307 [style=dashed label="qualified-id"]
  554 -> 308 [style=dashed label="relational-expression"]
  554 -> 309 [style=dashed label="requires-expression"]
  554 -> 310 [style=dashed label="shift-expression"]
  554 -> 311 [style=dashed label="simple-template-id"]
  554 -> 312 [style=dashed label="simple-type-specifier"]
  554 -> 313 [style=dashed label="string-literal"]
  554 -> 314 [style=dashed label="template-id"]
  554 -> 102 [style=dashed label="template-name"]
  554 -> 104 [style=dashed label="type-constraint"]
  554 -> 105 [style=dashed label="type-constraint-opt"]
  554 -> 106 [style=dashed label="type-name"]
  554 -> 108 [style=dashed label="typedef-name"]
  554 -> 316 [style=dashed label="typename-specifier"]
  554 -> 317 [style=dashed label="unary-expression"]
  554 -> 318 [style=dashed label="unary-operator"]
  554 -> 319 [style=dashed label="unqualified-id"]
  554 -> 320 [style=dashed label="user-defined-character-literal"]
  554 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  554 -> 322 [style=dashed label="user-defined-integer-literal"]
  554 -> 323 [style=dashed label="user-defined-literal"]
  554 -> 324 [style=dashed label="user-defined-string-literal"]
  554 -> "554R19" [style=solid]
 "554R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  554 -> "554R469d" [label="[IDENTIFIER]", style=solid]
 "554R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  554 -> "554R722d" [label="[\"decltype\"]", style=solid]
 "554R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  554 -> "554R722" [label="[\"auto\"]", style=solid]
 "554R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  555 [label="State 555\n\l389 lambda-declarator: \"(\" • parameter-declaration-clause \")\" lambda-specifiers requires-clause-opt\l"]
  555 -> 177 [style=dashed label="attribute-specifier-seq"]
  555 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  555 -> 639 [style=dashed label="parameter-declaration"]
  555 -> 808 [style=dashed label="parameter-declaration-clause"]
  555 -> 641 [style=dashed label="parameter-declaration-list"]
  555 -> 642 [style=dashed label="parameter-declaration-list-opt"]
  555 -> "555R83" [style=solid]
 "555R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  555 -> "555R562" [label="[\"...\", \")\"]", style=solid]
 "555R562" [label="R562", fillcolor=3, shape=diamond, style=filled]
  556 [label="State 556\n\l391 lambda-expression: lambda-introducer \"<\" • template-parameter-list \">\" requires-clause-opt lambda-declarator compound-statement\l"]
  556 -> 4 [style=solid label="IDENTIFIER"]
  556 -> 6 [style=solid label="\"::\""]
  556 -> 216 [style=solid label="\"template\""]
  556 -> 217 [style=solid label="\"typename\""]
  556 -> 218 [style=solid label="\"class\""]
  556 -> 21 [style=solid label="\"decltype\""]
  556 -> 177 [style=dashed label="attribute-specifier-seq"]
  556 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  556 -> 55 [style=dashed label="class-name"]
  556 -> 121 [style=dashed label="decltype-specifier"]
  556 -> 71 [style=dashed label="enum-name"]
  556 -> 85 [style=dashed label="namespace-alias"]
  556 -> 88 [style=dashed label="namespace-name"]
  556 -> 133 [style=dashed label="nested-name-specifier"]
  556 -> 221 [style=dashed label="nested-name-specifier-opt"]
  556 -> 222 [style=dashed label="parameter-declaration"]
  556 -> 96 [style=dashed label="simple-template-id"]
  556 -> 223 [style=dashed label="template-head"]
  556 -> 102 [style=dashed label="template-name"]
  556 -> 224 [style=dashed label="template-parameter"]
  556 -> 809 [style=dashed label="template-parameter-list"]
  556 -> 226 [style=dashed label="type-constraint"]
  556 -> 106 [style=dashed label="type-name"]
  556 -> 227 [style=dashed label="type-parameter"]
  556 -> 228 [style=dashed label="type-parameter-key"]
  556 -> 108 [style=dashed label="typedef-name"]
  556 -> "556R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"class\", \"decltype\"]", style=solid]
 "556R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  556 -> "556R83" [style=solid]
 "556R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  556 -> "556R469d" [label="[IDENTIFIER]", style=solid]
 "556R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  557 [label="State 557\n\l194 decl-specifier-seq-opt: decl-specifier-seq •\l"]
  557 -> "557R194" [style=solid]
 "557R194" [label="R194", fillcolor=3, shape=diamond, style=filled]
  558 [label="State 558\n\l393 lambda-specifiers: decl-specifier-seq-opt • noexcept-specifier-opt attribute-specifier-seq-opt trailing-return-type-opt\l"]
  558 -> 810 [style=solid label="\"noexcept\""]
  558 -> 811 [style=dashed label="noexcept-specifier"]
  558 -> 812 [style=dashed label="noexcept-specifier-opt"]
  558 -> "558R491" [style=solid]
 "558R491" [label="R491", fillcolor=3, shape=diamond, style=filled]
  559 [label="State 559\n\l390 lambda-expression: lambda-introducer lambda-declarator • compound-statement\l"]
  559 -> 813 [style=solid label="\"{\""]
  559 -> 814 [style=dashed label="compound-statement"]
  560 [label="State 560\n\l388 lambda-declarator: lambda-specifiers •\l"]
  560 -> "560R388" [style=solid]
 "560R388" [label="R388", fillcolor=3, shape=diamond, style=filled]
  561 [label="State 561\n\l707 template-id: literal-operator-id \"<\" • template-argument-list-opt \">\"\l"]
  561 -> 238 [style=solid label="IDENTIFIER"]
  561 -> 239 [style=solid label="\"noexcept\""]
  561 -> 240 [style=solid label="\"!\""]
  561 -> 241 [style=solid label="\"::\""]
  561 -> 242 [style=solid label="\"this\""]
  561 -> 8 [style=solid label="\"typename\""]
  561 -> 243 [style=solid label="\"+\""]
  561 -> 244 [style=solid label="\"-\""]
  561 -> 245 [style=solid label="\"(\""]
  561 -> 246 [style=solid label="\"&\""]
  561 -> 247 [style=solid label="\"[\""]
  561 -> 248 [style=solid label="\"co_await\""]
  561 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  561 -> 250 [style=solid label="CHARACTER_LITERAL"]
  561 -> 12 [style=solid label="\"class\""]
  561 -> 13 [style=solid label="\"struct\""]
  561 -> 14 [style=solid label="\"union\""]
  561 -> 251 [style=solid label="\"operator\""]
  561 -> 15 [style=solid label="\"const\""]
  561 -> 16 [style=solid label="\"volatile\""]
  561 -> 21 [style=solid label="\"decltype\""]
  561 -> 125 [style=solid label="\"enum\""]
  561 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  561 -> 253 [style=solid label="\"*\""]
  561 -> 254 [style=solid label="INTEGER_LITERAL"]
  561 -> 255 [style=solid label="\"requires\""]
  561 -> 256 [style=solid label="\"~\""]
  561 -> 257 [style=solid label="\"++\""]
  561 -> 258 [style=solid label="\"--\""]
  561 -> 259 [style=solid label="POINTER_LITERAL"]
  561 -> 260 [style=solid label="\"dynamic_cast\""]
  561 -> 261 [style=solid label="\"static_cast\""]
  561 -> 262 [style=solid label="\"reinterpret_cast\""]
  561 -> 263 [style=solid label="\"const_cast\""]
  561 -> 264 [style=solid label="\"typeid\""]
  561 -> 27 [style=solid label="\"char\""]
  561 -> 28 [style=solid label="\"char8_t\""]
  561 -> 29 [style=solid label="\"char16_t\""]
  561 -> 30 [style=solid label="\"char32_t\""]
  561 -> 31 [style=solid label="\"wchar_t\""]
  561 -> 32 [style=solid label="\"bool\""]
  561 -> 33 [style=solid label="\"short\""]
  561 -> 34 [style=solid label="\"int\""]
  561 -> 35 [style=solid label="\"long\""]
  561 -> 36 [style=solid label="\"signed\""]
  561 -> 37 [style=solid label="\"unsigned\""]
  561 -> 38 [style=solid label="\"float\""]
  561 -> 39 [style=solid label="\"double\""]
  561 -> 40 [style=solid label="\"void\""]
  561 -> 118 [style=solid label="STRING_LITERAL"]
  561 -> 266 [style=solid label="\"sizeof\""]
  561 -> 267 [style=solid label="\"alignof\""]
  561 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  561 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  561 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  561 -> 272 [style=dashed label="SCOPE-opt"]
  561 -> 273 [style=dashed label="additive-expression"]
  561 -> 274 [style=dashed label="and-expression"]
  561 -> 276 [style=dashed label="await-expression"]
  561 -> 277 [style=dashed label="boolean-literal"]
  561 -> 278 [style=dashed label="cast-expression"]
  561 -> 279 [style=dashed label="character-literal"]
  561 -> 424 [style=dashed label="class-key"]
  561 -> 55 [style=dashed label="class-name"]
  561 -> 280 [style=dashed label="compare-expression"]
  561 -> 327 [style=dashed label="conditional-expression"]
  561 -> 425 [style=dashed label="constant-expression"]
  561 -> 282 [style=dashed label="conversion-function-id"]
  561 -> 57 [style=dashed label="cv-qualifier"]
  561 -> 63 [style=dashed label="decltype-specifier"]
  561 -> 283 [style=dashed label="delete-expression"]
  561 -> 66 [style=dashed label="elaborated-enum-specifier"]
  561 -> 67 [style=dashed label="elaborated-type-specifier"]
  561 -> 71 [style=dashed label="enum-name"]
  561 -> 284 [style=dashed label="equality-expression"]
  561 -> 285 [style=dashed label="exclusive-or-expression"]
  561 -> 287 [style=dashed label="floating-point-literal"]
  561 -> 288 [style=dashed label="fold-expression"]
  561 -> 426 [style=dashed label="id-expression"]
  561 -> 290 [style=dashed label="inclusive-or-expression"]
  561 -> 291 [style=dashed label="integer-literal"]
  561 -> 292 [style=dashed label="lambda-expression"]
  561 -> 293 [style=dashed label="lambda-introducer"]
  561 -> 294 [style=dashed label="literal"]
  561 -> 295 [style=dashed label="literal-operator-id"]
  561 -> 296 [style=dashed label="logical-and-expression"]
  561 -> 329 [style=dashed label="logical-or-expression"]
  561 -> 298 [style=dashed label="multiplicative-expression"]
  561 -> 85 [style=dashed label="namespace-alias"]
  561 -> 88 [style=dashed label="namespace-name"]
  561 -> 299 [style=dashed label="nested-name-specifier"]
  561 -> 90 [style=dashed label="nested-name-specifier-opt"]
  561 -> 300 [style=dashed label="new-expression"]
  561 -> 301 [style=dashed label="noexcept-expression"]
  561 -> 302 [style=dashed label="operator-function-id"]
  561 -> 94 [style=dashed label="placeholder-type-specifier"]
  561 -> 303 [style=dashed label="pm-expression"]
  561 -> 304 [style=dashed label="pointer-literal"]
  561 -> 305 [style=dashed label="postfix-expression"]
  561 -> 306 [style=dashed label="primary-expression"]
  561 -> 307 [style=dashed label="qualified-id"]
  561 -> 308 [style=dashed label="relational-expression"]
  561 -> 309 [style=dashed label="requires-expression"]
  561 -> 310 [style=dashed label="shift-expression"]
  561 -> 311 [style=dashed label="simple-template-id"]
  561 -> 427 [style=dashed label="simple-type-specifier"]
  561 -> 313 [style=dashed label="string-literal"]
  561 -> 428 [style=dashed label="template-argument"]
  561 -> 429 [style=dashed label="template-argument-list"]
  561 -> 815 [style=dashed label="template-argument-list-opt"]
  561 -> 314 [style=dashed label="template-id"]
  561 -> 102 [style=dashed label="template-name"]
  561 -> 104 [style=dashed label="type-constraint"]
  561 -> 105 [style=dashed label="type-constraint-opt"]
  561 -> 431 [style=dashed label="type-id"]
  561 -> 106 [style=dashed label="type-name"]
  561 -> 432 [style=dashed label="type-specifier"]
  561 -> 433 [style=dashed label="type-specifier-seq"]
  561 -> 108 [style=dashed label="typedef-name"]
  561 -> 434 [style=dashed label="typename-specifier"]
  561 -> 317 [style=dashed label="unary-expression"]
  561 -> 318 [style=dashed label="unary-operator"]
  561 -> 319 [style=dashed label="unqualified-id"]
  561 -> 320 [style=dashed label="user-defined-character-literal"]
  561 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  561 -> 322 [style=dashed label="user-defined-integer-literal"]
  561 -> 323 [style=dashed label="user-defined-literal"]
  561 -> 324 [style=dashed label="user-defined-string-literal"]
  561 -> "561R19" [style=solid]
 "561R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  561 -> "561R469d" [label="[IDENTIFIER]", style=solid]
 "561R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  561 -> "561R700" [label="[\">\"]", style=solid]
 "561R700" [label="R700", fillcolor=3, shape=diamond, style=filled]
  561 -> "561R722d" [label="[\"decltype\"]", style=solid]
 "561R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  561 -> "561R722" [label="[\"auto\"]", style=solid]
 "561R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  562 [label="State 562\n\l406 logical-and-expression: logical-and-expression \"&&\" • inclusive-or-expression\l"]
  562 -> 238 [style=solid label="IDENTIFIER"]
  562 -> 239 [style=solid label="\"noexcept\""]
  562 -> 240 [style=solid label="\"!\""]
  562 -> 241 [style=solid label="\"::\""]
  562 -> 242 [style=solid label="\"this\""]
  562 -> 8 [style=solid label="\"typename\""]
  562 -> 243 [style=solid label="\"+\""]
  562 -> 244 [style=solid label="\"-\""]
  562 -> 245 [style=solid label="\"(\""]
  562 -> 246 [style=solid label="\"&\""]
  562 -> 247 [style=solid label="\"[\""]
  562 -> 248 [style=solid label="\"co_await\""]
  562 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  562 -> 250 [style=solid label="CHARACTER_LITERAL"]
  562 -> 251 [style=solid label="\"operator\""]
  562 -> 21 [style=solid label="\"decltype\""]
  562 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  562 -> 253 [style=solid label="\"*\""]
  562 -> 254 [style=solid label="INTEGER_LITERAL"]
  562 -> 255 [style=solid label="\"requires\""]
  562 -> 256 [style=solid label="\"~\""]
  562 -> 257 [style=solid label="\"++\""]
  562 -> 258 [style=solid label="\"--\""]
  562 -> 259 [style=solid label="POINTER_LITERAL"]
  562 -> 260 [style=solid label="\"dynamic_cast\""]
  562 -> 261 [style=solid label="\"static_cast\""]
  562 -> 262 [style=solid label="\"reinterpret_cast\""]
  562 -> 263 [style=solid label="\"const_cast\""]
  562 -> 264 [style=solid label="\"typeid\""]
  562 -> 27 [style=solid label="\"char\""]
  562 -> 28 [style=solid label="\"char8_t\""]
  562 -> 29 [style=solid label="\"char16_t\""]
  562 -> 30 [style=solid label="\"char32_t\""]
  562 -> 31 [style=solid label="\"wchar_t\""]
  562 -> 32 [style=solid label="\"bool\""]
  562 -> 33 [style=solid label="\"short\""]
  562 -> 34 [style=solid label="\"int\""]
  562 -> 35 [style=solid label="\"long\""]
  562 -> 36 [style=solid label="\"signed\""]
  562 -> 37 [style=solid label="\"unsigned\""]
  562 -> 38 [style=solid label="\"float\""]
  562 -> 39 [style=solid label="\"double\""]
  562 -> 40 [style=solid label="\"void\""]
  562 -> 118 [style=solid label="STRING_LITERAL"]
  562 -> 266 [style=solid label="\"sizeof\""]
  562 -> 267 [style=solid label="\"alignof\""]
  562 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  562 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  562 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  562 -> 272 [style=dashed label="SCOPE-opt"]
  562 -> 273 [style=dashed label="additive-expression"]
  562 -> 274 [style=dashed label="and-expression"]
  562 -> 276 [style=dashed label="await-expression"]
  562 -> 277 [style=dashed label="boolean-literal"]
  562 -> 278 [style=dashed label="cast-expression"]
  562 -> 279 [style=dashed label="character-literal"]
  562 -> 55 [style=dashed label="class-name"]
  562 -> 280 [style=dashed label="compare-expression"]
  562 -> 282 [style=dashed label="conversion-function-id"]
  562 -> 63 [style=dashed label="decltype-specifier"]
  562 -> 283 [style=dashed label="delete-expression"]
  562 -> 71 [style=dashed label="enum-name"]
  562 -> 284 [style=dashed label="equality-expression"]
  562 -> 285 [style=dashed label="exclusive-or-expression"]
  562 -> 287 [style=dashed label="floating-point-literal"]
  562 -> 288 [style=dashed label="fold-expression"]
  562 -> 289 [style=dashed label="id-expression"]
  562 -> 816 [style=dashed label="inclusive-or-expression"]
  562 -> 291 [style=dashed label="integer-literal"]
  562 -> 292 [style=dashed label="lambda-expression"]
  562 -> 293 [style=dashed label="lambda-introducer"]
  562 -> 294 [style=dashed label="literal"]
  562 -> 295 [style=dashed label="literal-operator-id"]
  562 -> 298 [style=dashed label="multiplicative-expression"]
  562 -> 85 [style=dashed label="namespace-alias"]
  562 -> 88 [style=dashed label="namespace-name"]
  562 -> 299 [style=dashed label="nested-name-specifier"]
  562 -> 90 [style=dashed label="nested-name-specifier-opt"]
  562 -> 300 [style=dashed label="new-expression"]
  562 -> 301 [style=dashed label="noexcept-expression"]
  562 -> 302 [style=dashed label="operator-function-id"]
  562 -> 94 [style=dashed label="placeholder-type-specifier"]
  562 -> 303 [style=dashed label="pm-expression"]
  562 -> 304 [style=dashed label="pointer-literal"]
  562 -> 305 [style=dashed label="postfix-expression"]
  562 -> 306 [style=dashed label="primary-expression"]
  562 -> 307 [style=dashed label="qualified-id"]
  562 -> 308 [style=dashed label="relational-expression"]
  562 -> 309 [style=dashed label="requires-expression"]
  562 -> 310 [style=dashed label="shift-expression"]
  562 -> 311 [style=dashed label="simple-template-id"]
  562 -> 312 [style=dashed label="simple-type-specifier"]
  562 -> 313 [style=dashed label="string-literal"]
  562 -> 314 [style=dashed label="template-id"]
  562 -> 102 [style=dashed label="template-name"]
  562 -> 104 [style=dashed label="type-constraint"]
  562 -> 105 [style=dashed label="type-constraint-opt"]
  562 -> 106 [style=dashed label="type-name"]
  562 -> 108 [style=dashed label="typedef-name"]
  562 -> 316 [style=dashed label="typename-specifier"]
  562 -> 317 [style=dashed label="unary-expression"]
  562 -> 318 [style=dashed label="unary-operator"]
  562 -> 319 [style=dashed label="unqualified-id"]
  562 -> 320 [style=dashed label="user-defined-character-literal"]
  562 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  562 -> 322 [style=dashed label="user-defined-integer-literal"]
  562 -> 323 [style=dashed label="user-defined-literal"]
  562 -> 324 [style=dashed label="user-defined-string-literal"]
  562 -> "562R19" [style=solid]
 "562R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  562 -> "562R469d" [label="[IDENTIFIER]", style=solid]
 "562R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  562 -> "562R722d" [label="[\"decltype\"]", style=solid]
 "562R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  562 -> "562R722" [label="[\"auto\"]", style=solid]
 "562R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  563 [label="State 563\n\l 56 assignment-operator: \"=\" •\l"]
  563 -> "563R56" [style=solid]
 "563R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  564 [label="State 564\n\l 57 assignment-operator: \"*=\" •\l"]
  564 -> "564R57" [style=solid]
 "564R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  565 [label="State 565\n\l 58 assignment-operator: \"/=\" •\l"]
  565 -> "565R58" [style=solid]
 "565R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  566 [label="State 566\n\l 59 assignment-operator: \"%=\" •\l"]
  566 -> "566R59" [style=solid]
 "566R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  567 [label="State 567\n\l 60 assignment-operator: \"+=\" •\l"]
  567 -> "567R60" [style=solid]
 "567R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  568 [label="State 568\n\l 61 assignment-operator: \"-=\" •\l"]
  568 -> "568R61" [style=solid]
 "568R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  569 [label="State 569\n\l 62 assignment-operator: \">>=\" •\l"]
  569 -> "569R62" [style=solid]
 "569R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  570 [label="State 570\n\l 63 assignment-operator: \"<<=\" •\l"]
  570 -> "570R63" [style=solid]
 "570R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  571 [label="State 571\n\l 64 assignment-operator: \"&=\" •\l"]
  571 -> "571R64" [style=solid]
 "571R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  572 [label="State 572\n\l 65 assignment-operator: \"^=\" •\l"]
  572 -> "572R65" [style=solid]
 "572R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
  573 [label="State 573\n\l 66 assignment-operator: \"|=\" •\l"]
  573 -> "573R66" [style=solid]
 "573R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
  574 [label="State 574\n\l159 conditional-expression: logical-or-expression \"?\" • expression \":\" assignment-expression\l"]
  574 -> 238 [style=solid label="IDENTIFIER"]
  574 -> 239 [style=solid label="\"noexcept\""]
  574 -> 240 [style=solid label="\"!\""]
  574 -> 241 [style=solid label="\"::\""]
  574 -> 242 [style=solid label="\"this\""]
  574 -> 8 [style=solid label="\"typename\""]
  574 -> 243 [style=solid label="\"+\""]
  574 -> 244 [style=solid label="\"-\""]
  574 -> 245 [style=solid label="\"(\""]
  574 -> 246 [style=solid label="\"&\""]
  574 -> 247 [style=solid label="\"[\""]
  574 -> 248 [style=solid label="\"co_await\""]
  574 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  574 -> 250 [style=solid label="CHARACTER_LITERAL"]
  574 -> 251 [style=solid label="\"operator\""]
  574 -> 21 [style=solid label="\"decltype\""]
  574 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  574 -> 253 [style=solid label="\"*\""]
  574 -> 254 [style=solid label="INTEGER_LITERAL"]
  574 -> 255 [style=solid label="\"requires\""]
  574 -> 256 [style=solid label="\"~\""]
  574 -> 257 [style=solid label="\"++\""]
  574 -> 258 [style=solid label="\"--\""]
  574 -> 259 [style=solid label="POINTER_LITERAL"]
  574 -> 260 [style=solid label="\"dynamic_cast\""]
  574 -> 261 [style=solid label="\"static_cast\""]
  574 -> 262 [style=solid label="\"reinterpret_cast\""]
  574 -> 263 [style=solid label="\"const_cast\""]
  574 -> 264 [style=solid label="\"typeid\""]
  574 -> 27 [style=solid label="\"char\""]
  574 -> 28 [style=solid label="\"char8_t\""]
  574 -> 29 [style=solid label="\"char16_t\""]
  574 -> 30 [style=solid label="\"char32_t\""]
  574 -> 31 [style=solid label="\"wchar_t\""]
  574 -> 32 [style=solid label="\"bool\""]
  574 -> 33 [style=solid label="\"short\""]
  574 -> 34 [style=solid label="\"int\""]
  574 -> 35 [style=solid label="\"long\""]
  574 -> 36 [style=solid label="\"signed\""]
  574 -> 37 [style=solid label="\"unsigned\""]
  574 -> 38 [style=solid label="\"float\""]
  574 -> 39 [style=solid label="\"double\""]
  574 -> 40 [style=solid label="\"void\""]
  574 -> 118 [style=solid label="STRING_LITERAL"]
  574 -> 265 [style=solid label="\"throw\""]
  574 -> 266 [style=solid label="\"sizeof\""]
  574 -> 267 [style=solid label="\"alignof\""]
  574 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  574 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  574 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  574 -> 271 [style=solid label="\"co_yield\""]
  574 -> 272 [style=dashed label="SCOPE-opt"]
  574 -> 273 [style=dashed label="additive-expression"]
  574 -> 274 [style=dashed label="and-expression"]
  574 -> 275 [style=dashed label="assignment-expression"]
  574 -> 276 [style=dashed label="await-expression"]
  574 -> 277 [style=dashed label="boolean-literal"]
  574 -> 278 [style=dashed label="cast-expression"]
  574 -> 279 [style=dashed label="character-literal"]
  574 -> 55 [style=dashed label="class-name"]
  574 -> 280 [style=dashed label="compare-expression"]
  574 -> 281 [style=dashed label="conditional-expression"]
  574 -> 282 [style=dashed label="conversion-function-id"]
  574 -> 63 [style=dashed label="decltype-specifier"]
  574 -> 283 [style=dashed label="delete-expression"]
  574 -> 71 [style=dashed label="enum-name"]
  574 -> 284 [style=dashed label="equality-expression"]
  574 -> 285 [style=dashed label="exclusive-or-expression"]
  574 -> 817 [style=dashed label="expression"]
  574 -> 287 [style=dashed label="floating-point-literal"]
  574 -> 288 [style=dashed label="fold-expression"]
  574 -> 289 [style=dashed label="id-expression"]
  574 -> 290 [style=dashed label="inclusive-or-expression"]
  574 -> 291 [style=dashed label="integer-literal"]
  574 -> 292 [style=dashed label="lambda-expression"]
  574 -> 293 [style=dashed label="lambda-introducer"]
  574 -> 294 [style=dashed label="literal"]
  574 -> 295 [style=dashed label="literal-operator-id"]
  574 -> 296 [style=dashed label="logical-and-expression"]
  574 -> 297 [style=dashed label="logical-or-expression"]
  574 -> 298 [style=dashed label="multiplicative-expression"]
  574 -> 85 [style=dashed label="namespace-alias"]
  574 -> 88 [style=dashed label="namespace-name"]
  574 -> 299 [style=dashed label="nested-name-specifier"]
  574 -> 90 [style=dashed label="nested-name-specifier-opt"]
  574 -> 300 [style=dashed label="new-expression"]
  574 -> 301 [style=dashed label="noexcept-expression"]
  574 -> 302 [style=dashed label="operator-function-id"]
  574 -> 94 [style=dashed label="placeholder-type-specifier"]
  574 -> 303 [style=dashed label="pm-expression"]
  574 -> 304 [style=dashed label="pointer-literal"]
  574 -> 305 [style=dashed label="postfix-expression"]
  574 -> 306 [style=dashed label="primary-expression"]
  574 -> 307 [style=dashed label="qualified-id"]
  574 -> 308 [style=dashed label="relational-expression"]
  574 -> 309 [style=dashed label="requires-expression"]
  574 -> 310 [style=dashed label="shift-expression"]
  574 -> 311 [style=dashed label="simple-template-id"]
  574 -> 312 [style=dashed label="simple-type-specifier"]
  574 -> 313 [style=dashed label="string-literal"]
  574 -> 314 [style=dashed label="template-id"]
  574 -> 102 [style=dashed label="template-name"]
  574 -> 315 [style=dashed label="throw-expression"]
  574 -> 104 [style=dashed label="type-constraint"]
  574 -> 105 [style=dashed label="type-constraint-opt"]
  574 -> 106 [style=dashed label="type-name"]
  574 -> 108 [style=dashed label="typedef-name"]
  574 -> 316 [style=dashed label="typename-specifier"]
  574 -> 317 [style=dashed label="unary-expression"]
  574 -> 318 [style=dashed label="unary-operator"]
  574 -> 319 [style=dashed label="unqualified-id"]
  574 -> 320 [style=dashed label="user-defined-character-literal"]
  574 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  574 -> 322 [style=dashed label="user-defined-integer-literal"]
  574 -> 323 [style=dashed label="user-defined-literal"]
  574 -> 324 [style=dashed label="user-defined-string-literal"]
  574 -> 325 [style=dashed label="yield-expression"]
  574 -> "574R19" [style=solid]
 "574R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  574 -> "574R469d" [label="[IDENTIFIER]", style=solid]
 "574R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  574 -> "574R722d" [label="[\"decltype\"]", style=solid]
 "574R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  574 -> "574R722" [label="[\"auto\"]", style=solid]
 "574R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  575 [label="State 575\n\l408 logical-or-expression: logical-or-expression \"||\" • logical-and-expression\l"]
  575 -> 238 [style=solid label="IDENTIFIER"]
  575 -> 239 [style=solid label="\"noexcept\""]
  575 -> 240 [style=solid label="\"!\""]
  575 -> 241 [style=solid label="\"::\""]
  575 -> 242 [style=solid label="\"this\""]
  575 -> 8 [style=solid label="\"typename\""]
  575 -> 243 [style=solid label="\"+\""]
  575 -> 244 [style=solid label="\"-\""]
  575 -> 245 [style=solid label="\"(\""]
  575 -> 246 [style=solid label="\"&\""]
  575 -> 247 [style=solid label="\"[\""]
  575 -> 248 [style=solid label="\"co_await\""]
  575 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  575 -> 250 [style=solid label="CHARACTER_LITERAL"]
  575 -> 251 [style=solid label="\"operator\""]
  575 -> 21 [style=solid label="\"decltype\""]
  575 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  575 -> 253 [style=solid label="\"*\""]
  575 -> 254 [style=solid label="INTEGER_LITERAL"]
  575 -> 255 [style=solid label="\"requires\""]
  575 -> 256 [style=solid label="\"~\""]
  575 -> 257 [style=solid label="\"++\""]
  575 -> 258 [style=solid label="\"--\""]
  575 -> 259 [style=solid label="POINTER_LITERAL"]
  575 -> 260 [style=solid label="\"dynamic_cast\""]
  575 -> 261 [style=solid label="\"static_cast\""]
  575 -> 262 [style=solid label="\"reinterpret_cast\""]
  575 -> 263 [style=solid label="\"const_cast\""]
  575 -> 264 [style=solid label="\"typeid\""]
  575 -> 27 [style=solid label="\"char\""]
  575 -> 28 [style=solid label="\"char8_t\""]
  575 -> 29 [style=solid label="\"char16_t\""]
  575 -> 30 [style=solid label="\"char32_t\""]
  575 -> 31 [style=solid label="\"wchar_t\""]
  575 -> 32 [style=solid label="\"bool\""]
  575 -> 33 [style=solid label="\"short\""]
  575 -> 34 [style=solid label="\"int\""]
  575 -> 35 [style=solid label="\"long\""]
  575 -> 36 [style=solid label="\"signed\""]
  575 -> 37 [style=solid label="\"unsigned\""]
  575 -> 38 [style=solid label="\"float\""]
  575 -> 39 [style=solid label="\"double\""]
  575 -> 40 [style=solid label="\"void\""]
  575 -> 118 [style=solid label="STRING_LITERAL"]
  575 -> 266 [style=solid label="\"sizeof\""]
  575 -> 267 [style=solid label="\"alignof\""]
  575 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  575 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  575 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  575 -> 272 [style=dashed label="SCOPE-opt"]
  575 -> 273 [style=dashed label="additive-expression"]
  575 -> 274 [style=dashed label="and-expression"]
  575 -> 276 [style=dashed label="await-expression"]
  575 -> 277 [style=dashed label="boolean-literal"]
  575 -> 278 [style=dashed label="cast-expression"]
  575 -> 279 [style=dashed label="character-literal"]
  575 -> 55 [style=dashed label="class-name"]
  575 -> 280 [style=dashed label="compare-expression"]
  575 -> 282 [style=dashed label="conversion-function-id"]
  575 -> 63 [style=dashed label="decltype-specifier"]
  575 -> 283 [style=dashed label="delete-expression"]
  575 -> 71 [style=dashed label="enum-name"]
  575 -> 284 [style=dashed label="equality-expression"]
  575 -> 285 [style=dashed label="exclusive-or-expression"]
  575 -> 287 [style=dashed label="floating-point-literal"]
  575 -> 288 [style=dashed label="fold-expression"]
  575 -> 289 [style=dashed label="id-expression"]
  575 -> 290 [style=dashed label="inclusive-or-expression"]
  575 -> 291 [style=dashed label="integer-literal"]
  575 -> 292 [style=dashed label="lambda-expression"]
  575 -> 293 [style=dashed label="lambda-introducer"]
  575 -> 294 [style=dashed label="literal"]
  575 -> 295 [style=dashed label="literal-operator-id"]
  575 -> 818 [style=dashed label="logical-and-expression"]
  575 -> 298 [style=dashed label="multiplicative-expression"]
  575 -> 85 [style=dashed label="namespace-alias"]
  575 -> 88 [style=dashed label="namespace-name"]
  575 -> 299 [style=dashed label="nested-name-specifier"]
  575 -> 90 [style=dashed label="nested-name-specifier-opt"]
  575 -> 300 [style=dashed label="new-expression"]
  575 -> 301 [style=dashed label="noexcept-expression"]
  575 -> 302 [style=dashed label="operator-function-id"]
  575 -> 94 [style=dashed label="placeholder-type-specifier"]
  575 -> 303 [style=dashed label="pm-expression"]
  575 -> 304 [style=dashed label="pointer-literal"]
  575 -> 305 [style=dashed label="postfix-expression"]
  575 -> 306 [style=dashed label="primary-expression"]
  575 -> 307 [style=dashed label="qualified-id"]
  575 -> 308 [style=dashed label="relational-expression"]
  575 -> 309 [style=dashed label="requires-expression"]
  575 -> 310 [style=dashed label="shift-expression"]
  575 -> 311 [style=dashed label="simple-template-id"]
  575 -> 312 [style=dashed label="simple-type-specifier"]
  575 -> 313 [style=dashed label="string-literal"]
  575 -> 314 [style=dashed label="template-id"]
  575 -> 102 [style=dashed label="template-name"]
  575 -> 104 [style=dashed label="type-constraint"]
  575 -> 105 [style=dashed label="type-constraint-opt"]
  575 -> 106 [style=dashed label="type-name"]
  575 -> 108 [style=dashed label="typedef-name"]
  575 -> 316 [style=dashed label="typename-specifier"]
  575 -> 317 [style=dashed label="unary-expression"]
  575 -> 318 [style=dashed label="unary-operator"]
  575 -> 319 [style=dashed label="unqualified-id"]
  575 -> 320 [style=dashed label="user-defined-character-literal"]
  575 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  575 -> 322 [style=dashed label="user-defined-integer-literal"]
  575 -> 323 [style=dashed label="user-defined-literal"]
  575 -> 324 [style=dashed label="user-defined-string-literal"]
  575 -> "575R19" [style=solid]
 "575R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  575 -> "575R469d" [label="[IDENTIFIER]", style=solid]
 "575R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  575 -> "575R722d" [label="[\"decltype\"]", style=solid]
 "575R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  575 -> "575R722" [label="[\"auto\"]", style=solid]
 "575R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  576 [label="State 576\n\l 53 assignment-expression: logical-or-expression assignment-operator • initializer-clause\l"]
  576 -> 238 [style=solid label="IDENTIFIER"]
  576 -> 239 [style=solid label="\"noexcept\""]
  576 -> 240 [style=solid label="\"!\""]
  576 -> 241 [style=solid label="\"::\""]
  576 -> 242 [style=solid label="\"this\""]
  576 -> 8 [style=solid label="\"typename\""]
  576 -> 243 [style=solid label="\"+\""]
  576 -> 244 [style=solid label="\"-\""]
  576 -> 245 [style=solid label="\"(\""]
  576 -> 246 [style=solid label="\"&\""]
  576 -> 247 [style=solid label="\"[\""]
  576 -> 248 [style=solid label="\"co_await\""]
  576 -> 398 [style=solid label="\"{\""]
  576 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  576 -> 250 [style=solid label="CHARACTER_LITERAL"]
  576 -> 251 [style=solid label="\"operator\""]
  576 -> 21 [style=solid label="\"decltype\""]
  576 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  576 -> 253 [style=solid label="\"*\""]
  576 -> 254 [style=solid label="INTEGER_LITERAL"]
  576 -> 255 [style=solid label="\"requires\""]
  576 -> 256 [style=solid label="\"~\""]
  576 -> 257 [style=solid label="\"++\""]
  576 -> 258 [style=solid label="\"--\""]
  576 -> 259 [style=solid label="POINTER_LITERAL"]
  576 -> 260 [style=solid label="\"dynamic_cast\""]
  576 -> 261 [style=solid label="\"static_cast\""]
  576 -> 262 [style=solid label="\"reinterpret_cast\""]
  576 -> 263 [style=solid label="\"const_cast\""]
  576 -> 264 [style=solid label="\"typeid\""]
  576 -> 27 [style=solid label="\"char\""]
  576 -> 28 [style=solid label="\"char8_t\""]
  576 -> 29 [style=solid label="\"char16_t\""]
  576 -> 30 [style=solid label="\"char32_t\""]
  576 -> 31 [style=solid label="\"wchar_t\""]
  576 -> 32 [style=solid label="\"bool\""]
  576 -> 33 [style=solid label="\"short\""]
  576 -> 34 [style=solid label="\"int\""]
  576 -> 35 [style=solid label="\"long\""]
  576 -> 36 [style=solid label="\"signed\""]
  576 -> 37 [style=solid label="\"unsigned\""]
  576 -> 38 [style=solid label="\"float\""]
  576 -> 39 [style=solid label="\"double\""]
  576 -> 40 [style=solid label="\"void\""]
  576 -> 118 [style=solid label="STRING_LITERAL"]
  576 -> 265 [style=solid label="\"throw\""]
  576 -> 266 [style=solid label="\"sizeof\""]
  576 -> 267 [style=solid label="\"alignof\""]
  576 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  576 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  576 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  576 -> 271 [style=solid label="\"co_yield\""]
  576 -> 272 [style=dashed label="SCOPE-opt"]
  576 -> 273 [style=dashed label="additive-expression"]
  576 -> 274 [style=dashed label="and-expression"]
  576 -> 662 [style=dashed label="assignment-expression"]
  576 -> 276 [style=dashed label="await-expression"]
  576 -> 277 [style=dashed label="boolean-literal"]
  576 -> 663 [style=dashed label="braced-init-list"]
  576 -> 278 [style=dashed label="cast-expression"]
  576 -> 279 [style=dashed label="character-literal"]
  576 -> 55 [style=dashed label="class-name"]
  576 -> 280 [style=dashed label="compare-expression"]
  576 -> 281 [style=dashed label="conditional-expression"]
  576 -> 282 [style=dashed label="conversion-function-id"]
  576 -> 63 [style=dashed label="decltype-specifier"]
  576 -> 283 [style=dashed label="delete-expression"]
  576 -> 71 [style=dashed label="enum-name"]
  576 -> 284 [style=dashed label="equality-expression"]
  576 -> 285 [style=dashed label="exclusive-or-expression"]
  576 -> 287 [style=dashed label="floating-point-literal"]
  576 -> 288 [style=dashed label="fold-expression"]
  576 -> 289 [style=dashed label="id-expression"]
  576 -> 290 [style=dashed label="inclusive-or-expression"]
  576 -> 819 [style=dashed label="initializer-clause"]
  576 -> 291 [style=dashed label="integer-literal"]
  576 -> 292 [style=dashed label="lambda-expression"]
  576 -> 293 [style=dashed label="lambda-introducer"]
  576 -> 294 [style=dashed label="literal"]
  576 -> 295 [style=dashed label="literal-operator-id"]
  576 -> 296 [style=dashed label="logical-and-expression"]
  576 -> 297 [style=dashed label="logical-or-expression"]
  576 -> 298 [style=dashed label="multiplicative-expression"]
  576 -> 85 [style=dashed label="namespace-alias"]
  576 -> 88 [style=dashed label="namespace-name"]
  576 -> 299 [style=dashed label="nested-name-specifier"]
  576 -> 90 [style=dashed label="nested-name-specifier-opt"]
  576 -> 300 [style=dashed label="new-expression"]
  576 -> 301 [style=dashed label="noexcept-expression"]
  576 -> 302 [style=dashed label="operator-function-id"]
  576 -> 94 [style=dashed label="placeholder-type-specifier"]
  576 -> 303 [style=dashed label="pm-expression"]
  576 -> 304 [style=dashed label="pointer-literal"]
  576 -> 305 [style=dashed label="postfix-expression"]
  576 -> 306 [style=dashed label="primary-expression"]
  576 -> 307 [style=dashed label="qualified-id"]
  576 -> 308 [style=dashed label="relational-expression"]
  576 -> 309 [style=dashed label="requires-expression"]
  576 -> 310 [style=dashed label="shift-expression"]
  576 -> 311 [style=dashed label="simple-template-id"]
  576 -> 312 [style=dashed label="simple-type-specifier"]
  576 -> 313 [style=dashed label="string-literal"]
  576 -> 314 [style=dashed label="template-id"]
  576 -> 102 [style=dashed label="template-name"]
  576 -> 315 [style=dashed label="throw-expression"]
  576 -> 104 [style=dashed label="type-constraint"]
  576 -> 105 [style=dashed label="type-constraint-opt"]
  576 -> 106 [style=dashed label="type-name"]
  576 -> 108 [style=dashed label="typedef-name"]
  576 -> 316 [style=dashed label="typename-specifier"]
  576 -> 317 [style=dashed label="unary-expression"]
  576 -> 318 [style=dashed label="unary-operator"]
  576 -> 319 [style=dashed label="unqualified-id"]
  576 -> 320 [style=dashed label="user-defined-character-literal"]
  576 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  576 -> 322 [style=dashed label="user-defined-integer-literal"]
  576 -> 323 [style=dashed label="user-defined-literal"]
  576 -> 324 [style=dashed label="user-defined-string-literal"]
  576 -> 325 [style=dashed label="yield-expression"]
  576 -> "576R19" [style=solid]
 "576R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  576 -> "576R469d" [label="[IDENTIFIER]", style=solid]
 "576R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  576 -> "576R722d" [label="[\"decltype\"]", style=solid]
 "576R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  576 -> "576R722" [label="[\"auto\"]", style=solid]
 "576R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  577 [label="State 577\n\l451 multiplicative-expression: multiplicative-expression \"*\" • pm-expression\l"]
  577 -> 238 [style=solid label="IDENTIFIER"]
  577 -> 239 [style=solid label="\"noexcept\""]
  577 -> 240 [style=solid label="\"!\""]
  577 -> 241 [style=solid label="\"::\""]
  577 -> 242 [style=solid label="\"this\""]
  577 -> 8 [style=solid label="\"typename\""]
  577 -> 243 [style=solid label="\"+\""]
  577 -> 244 [style=solid label="\"-\""]
  577 -> 245 [style=solid label="\"(\""]
  577 -> 246 [style=solid label="\"&\""]
  577 -> 247 [style=solid label="\"[\""]
  577 -> 248 [style=solid label="\"co_await\""]
  577 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  577 -> 250 [style=solid label="CHARACTER_LITERAL"]
  577 -> 251 [style=solid label="\"operator\""]
  577 -> 21 [style=solid label="\"decltype\""]
  577 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  577 -> 253 [style=solid label="\"*\""]
  577 -> 254 [style=solid label="INTEGER_LITERAL"]
  577 -> 255 [style=solid label="\"requires\""]
  577 -> 256 [style=solid label="\"~\""]
  577 -> 257 [style=solid label="\"++\""]
  577 -> 258 [style=solid label="\"--\""]
  577 -> 259 [style=solid label="POINTER_LITERAL"]
  577 -> 260 [style=solid label="\"dynamic_cast\""]
  577 -> 261 [style=solid label="\"static_cast\""]
  577 -> 262 [style=solid label="\"reinterpret_cast\""]
  577 -> 263 [style=solid label="\"const_cast\""]
  577 -> 264 [style=solid label="\"typeid\""]
  577 -> 27 [style=solid label="\"char\""]
  577 -> 28 [style=solid label="\"char8_t\""]
  577 -> 29 [style=solid label="\"char16_t\""]
  577 -> 30 [style=solid label="\"char32_t\""]
  577 -> 31 [style=solid label="\"wchar_t\""]
  577 -> 32 [style=solid label="\"bool\""]
  577 -> 33 [style=solid label="\"short\""]
  577 -> 34 [style=solid label="\"int\""]
  577 -> 35 [style=solid label="\"long\""]
  577 -> 36 [style=solid label="\"signed\""]
  577 -> 37 [style=solid label="\"unsigned\""]
  577 -> 38 [style=solid label="\"float\""]
  577 -> 39 [style=solid label="\"double\""]
  577 -> 40 [style=solid label="\"void\""]
  577 -> 118 [style=solid label="STRING_LITERAL"]
  577 -> 266 [style=solid label="\"sizeof\""]
  577 -> 267 [style=solid label="\"alignof\""]
  577 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  577 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  577 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  577 -> 272 [style=dashed label="SCOPE-opt"]
  577 -> 276 [style=dashed label="await-expression"]
  577 -> 277 [style=dashed label="boolean-literal"]
  577 -> 278 [style=dashed label="cast-expression"]
  577 -> 279 [style=dashed label="character-literal"]
  577 -> 55 [style=dashed label="class-name"]
  577 -> 282 [style=dashed label="conversion-function-id"]
  577 -> 63 [style=dashed label="decltype-specifier"]
  577 -> 283 [style=dashed label="delete-expression"]
  577 -> 71 [style=dashed label="enum-name"]
  577 -> 287 [style=dashed label="floating-point-literal"]
  577 -> 288 [style=dashed label="fold-expression"]
  577 -> 289 [style=dashed label="id-expression"]
  577 -> 291 [style=dashed label="integer-literal"]
  577 -> 292 [style=dashed label="lambda-expression"]
  577 -> 293 [style=dashed label="lambda-introducer"]
  577 -> 294 [style=dashed label="literal"]
  577 -> 295 [style=dashed label="literal-operator-id"]
  577 -> 85 [style=dashed label="namespace-alias"]
  577 -> 88 [style=dashed label="namespace-name"]
  577 -> 299 [style=dashed label="nested-name-specifier"]
  577 -> 90 [style=dashed label="nested-name-specifier-opt"]
  577 -> 300 [style=dashed label="new-expression"]
  577 -> 301 [style=dashed label="noexcept-expression"]
  577 -> 302 [style=dashed label="operator-function-id"]
  577 -> 94 [style=dashed label="placeholder-type-specifier"]
  577 -> 820 [style=dashed label="pm-expression"]
  577 -> 304 [style=dashed label="pointer-literal"]
  577 -> 305 [style=dashed label="postfix-expression"]
  577 -> 306 [style=dashed label="primary-expression"]
  577 -> 307 [style=dashed label="qualified-id"]
  577 -> 309 [style=dashed label="requires-expression"]
  577 -> 311 [style=dashed label="simple-template-id"]
  577 -> 312 [style=dashed label="simple-type-specifier"]
  577 -> 313 [style=dashed label="string-literal"]
  577 -> 314 [style=dashed label="template-id"]
  577 -> 102 [style=dashed label="template-name"]
  577 -> 104 [style=dashed label="type-constraint"]
  577 -> 105 [style=dashed label="type-constraint-opt"]
  577 -> 106 [style=dashed label="type-name"]
  577 -> 108 [style=dashed label="typedef-name"]
  577 -> 316 [style=dashed label="typename-specifier"]
  577 -> 317 [style=dashed label="unary-expression"]
  577 -> 318 [style=dashed label="unary-operator"]
  577 -> 319 [style=dashed label="unqualified-id"]
  577 -> 320 [style=dashed label="user-defined-character-literal"]
  577 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  577 -> 322 [style=dashed label="user-defined-integer-literal"]
  577 -> 323 [style=dashed label="user-defined-literal"]
  577 -> 324 [style=dashed label="user-defined-string-literal"]
  577 -> "577R19" [style=solid]
 "577R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  577 -> "577R469d" [label="[IDENTIFIER]", style=solid]
 "577R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  577 -> "577R722d" [label="[\"decltype\"]", style=solid]
 "577R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  577 -> "577R722" [label="[\"auto\"]", style=solid]
 "577R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  578 [label="State 578\n\l452 multiplicative-expression: multiplicative-expression \"/\" • pm-expression\l"]
  578 -> 238 [style=solid label="IDENTIFIER"]
  578 -> 239 [style=solid label="\"noexcept\""]
  578 -> 240 [style=solid label="\"!\""]
  578 -> 241 [style=solid label="\"::\""]
  578 -> 242 [style=solid label="\"this\""]
  578 -> 8 [style=solid label="\"typename\""]
  578 -> 243 [style=solid label="\"+\""]
  578 -> 244 [style=solid label="\"-\""]
  578 -> 245 [style=solid label="\"(\""]
  578 -> 246 [style=solid label="\"&\""]
  578 -> 247 [style=solid label="\"[\""]
  578 -> 248 [style=solid label="\"co_await\""]
  578 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  578 -> 250 [style=solid label="CHARACTER_LITERAL"]
  578 -> 251 [style=solid label="\"operator\""]
  578 -> 21 [style=solid label="\"decltype\""]
  578 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  578 -> 253 [style=solid label="\"*\""]
  578 -> 254 [style=solid label="INTEGER_LITERAL"]
  578 -> 255 [style=solid label="\"requires\""]
  578 -> 256 [style=solid label="\"~\""]
  578 -> 257 [style=solid label="\"++\""]
  578 -> 258 [style=solid label="\"--\""]
  578 -> 259 [style=solid label="POINTER_LITERAL"]
  578 -> 260 [style=solid label="\"dynamic_cast\""]
  578 -> 261 [style=solid label="\"static_cast\""]
  578 -> 262 [style=solid label="\"reinterpret_cast\""]
  578 -> 263 [style=solid label="\"const_cast\""]
  578 -> 264 [style=solid label="\"typeid\""]
  578 -> 27 [style=solid label="\"char\""]
  578 -> 28 [style=solid label="\"char8_t\""]
  578 -> 29 [style=solid label="\"char16_t\""]
  578 -> 30 [style=solid label="\"char32_t\""]
  578 -> 31 [style=solid label="\"wchar_t\""]
  578 -> 32 [style=solid label="\"bool\""]
  578 -> 33 [style=solid label="\"short\""]
  578 -> 34 [style=solid label="\"int\""]
  578 -> 35 [style=solid label="\"long\""]
  578 -> 36 [style=solid label="\"signed\""]
  578 -> 37 [style=solid label="\"unsigned\""]
  578 -> 38 [style=solid label="\"float\""]
  578 -> 39 [style=solid label="\"double\""]
  578 -> 40 [style=solid label="\"void\""]
  578 -> 118 [style=solid label="STRING_LITERAL"]
  578 -> 266 [style=solid label="\"sizeof\""]
  578 -> 267 [style=solid label="\"alignof\""]
  578 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  578 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  578 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  578 -> 272 [style=dashed label="SCOPE-opt"]
  578 -> 276 [style=dashed label="await-expression"]
  578 -> 277 [style=dashed label="boolean-literal"]
  578 -> 278 [style=dashed label="cast-expression"]
  578 -> 279 [style=dashed label="character-literal"]
  578 -> 55 [style=dashed label="class-name"]
  578 -> 282 [style=dashed label="conversion-function-id"]
  578 -> 63 [style=dashed label="decltype-specifier"]
  578 -> 283 [style=dashed label="delete-expression"]
  578 -> 71 [style=dashed label="enum-name"]
  578 -> 287 [style=dashed label="floating-point-literal"]
  578 -> 288 [style=dashed label="fold-expression"]
  578 -> 289 [style=dashed label="id-expression"]
  578 -> 291 [style=dashed label="integer-literal"]
  578 -> 292 [style=dashed label="lambda-expression"]
  578 -> 293 [style=dashed label="lambda-introducer"]
  578 -> 294 [style=dashed label="literal"]
  578 -> 295 [style=dashed label="literal-operator-id"]
  578 -> 85 [style=dashed label="namespace-alias"]
  578 -> 88 [style=dashed label="namespace-name"]
  578 -> 299 [style=dashed label="nested-name-specifier"]
  578 -> 90 [style=dashed label="nested-name-specifier-opt"]
  578 -> 300 [style=dashed label="new-expression"]
  578 -> 301 [style=dashed label="noexcept-expression"]
  578 -> 302 [style=dashed label="operator-function-id"]
  578 -> 94 [style=dashed label="placeholder-type-specifier"]
  578 -> 821 [style=dashed label="pm-expression"]
  578 -> 304 [style=dashed label="pointer-literal"]
  578 -> 305 [style=dashed label="postfix-expression"]
  578 -> 306 [style=dashed label="primary-expression"]
  578 -> 307 [style=dashed label="qualified-id"]
  578 -> 309 [style=dashed label="requires-expression"]
  578 -> 311 [style=dashed label="simple-template-id"]
  578 -> 312 [style=dashed label="simple-type-specifier"]
  578 -> 313 [style=dashed label="string-literal"]
  578 -> 314 [style=dashed label="template-id"]
  578 -> 102 [style=dashed label="template-name"]
  578 -> 104 [style=dashed label="type-constraint"]
  578 -> 105 [style=dashed label="type-constraint-opt"]
  578 -> 106 [style=dashed label="type-name"]
  578 -> 108 [style=dashed label="typedef-name"]
  578 -> 316 [style=dashed label="typename-specifier"]
  578 -> 317 [style=dashed label="unary-expression"]
  578 -> 318 [style=dashed label="unary-operator"]
  578 -> 319 [style=dashed label="unqualified-id"]
  578 -> 320 [style=dashed label="user-defined-character-literal"]
  578 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  578 -> 322 [style=dashed label="user-defined-integer-literal"]
  578 -> 323 [style=dashed label="user-defined-literal"]
  578 -> 324 [style=dashed label="user-defined-string-literal"]
  578 -> "578R19" [style=solid]
 "578R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  578 -> "578R469d" [label="[IDENTIFIER]", style=solid]
 "578R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  578 -> "578R722d" [label="[\"decltype\"]", style=solid]
 "578R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  578 -> "578R722" [label="[\"auto\"]", style=solid]
 "578R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  579 [label="State 579\n\l453 multiplicative-expression: multiplicative-expression \"%\" • pm-expression\l"]
  579 -> 238 [style=solid label="IDENTIFIER"]
  579 -> 239 [style=solid label="\"noexcept\""]
  579 -> 240 [style=solid label="\"!\""]
  579 -> 241 [style=solid label="\"::\""]
  579 -> 242 [style=solid label="\"this\""]
  579 -> 8 [style=solid label="\"typename\""]
  579 -> 243 [style=solid label="\"+\""]
  579 -> 244 [style=solid label="\"-\""]
  579 -> 245 [style=solid label="\"(\""]
  579 -> 246 [style=solid label="\"&\""]
  579 -> 247 [style=solid label="\"[\""]
  579 -> 248 [style=solid label="\"co_await\""]
  579 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  579 -> 250 [style=solid label="CHARACTER_LITERAL"]
  579 -> 251 [style=solid label="\"operator\""]
  579 -> 21 [style=solid label="\"decltype\""]
  579 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  579 -> 253 [style=solid label="\"*\""]
  579 -> 254 [style=solid label="INTEGER_LITERAL"]
  579 -> 255 [style=solid label="\"requires\""]
  579 -> 256 [style=solid label="\"~\""]
  579 -> 257 [style=solid label="\"++\""]
  579 -> 258 [style=solid label="\"--\""]
  579 -> 259 [style=solid label="POINTER_LITERAL"]
  579 -> 260 [style=solid label="\"dynamic_cast\""]
  579 -> 261 [style=solid label="\"static_cast\""]
  579 -> 262 [style=solid label="\"reinterpret_cast\""]
  579 -> 263 [style=solid label="\"const_cast\""]
  579 -> 264 [style=solid label="\"typeid\""]
  579 -> 27 [style=solid label="\"char\""]
  579 -> 28 [style=solid label="\"char8_t\""]
  579 -> 29 [style=solid label="\"char16_t\""]
  579 -> 30 [style=solid label="\"char32_t\""]
  579 -> 31 [style=solid label="\"wchar_t\""]
  579 -> 32 [style=solid label="\"bool\""]
  579 -> 33 [style=solid label="\"short\""]
  579 -> 34 [style=solid label="\"int\""]
  579 -> 35 [style=solid label="\"long\""]
  579 -> 36 [style=solid label="\"signed\""]
  579 -> 37 [style=solid label="\"unsigned\""]
  579 -> 38 [style=solid label="\"float\""]
  579 -> 39 [style=solid label="\"double\""]
  579 -> 40 [style=solid label="\"void\""]
  579 -> 118 [style=solid label="STRING_LITERAL"]
  579 -> 266 [style=solid label="\"sizeof\""]
  579 -> 267 [style=solid label="\"alignof\""]
  579 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  579 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  579 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  579 -> 272 [style=dashed label="SCOPE-opt"]
  579 -> 276 [style=dashed label="await-expression"]
  579 -> 277 [style=dashed label="boolean-literal"]
  579 -> 278 [style=dashed label="cast-expression"]
  579 -> 279 [style=dashed label="character-literal"]
  579 -> 55 [style=dashed label="class-name"]
  579 -> 282 [style=dashed label="conversion-function-id"]
  579 -> 63 [style=dashed label="decltype-specifier"]
  579 -> 283 [style=dashed label="delete-expression"]
  579 -> 71 [style=dashed label="enum-name"]
  579 -> 287 [style=dashed label="floating-point-literal"]
  579 -> 288 [style=dashed label="fold-expression"]
  579 -> 289 [style=dashed label="id-expression"]
  579 -> 291 [style=dashed label="integer-literal"]
  579 -> 292 [style=dashed label="lambda-expression"]
  579 -> 293 [style=dashed label="lambda-introducer"]
  579 -> 294 [style=dashed label="literal"]
  579 -> 295 [style=dashed label="literal-operator-id"]
  579 -> 85 [style=dashed label="namespace-alias"]
  579 -> 88 [style=dashed label="namespace-name"]
  579 -> 299 [style=dashed label="nested-name-specifier"]
  579 -> 90 [style=dashed label="nested-name-specifier-opt"]
  579 -> 300 [style=dashed label="new-expression"]
  579 -> 301 [style=dashed label="noexcept-expression"]
  579 -> 302 [style=dashed label="operator-function-id"]
  579 -> 94 [style=dashed label="placeholder-type-specifier"]
  579 -> 822 [style=dashed label="pm-expression"]
  579 -> 304 [style=dashed label="pointer-literal"]
  579 -> 305 [style=dashed label="postfix-expression"]
  579 -> 306 [style=dashed label="primary-expression"]
  579 -> 307 [style=dashed label="qualified-id"]
  579 -> 309 [style=dashed label="requires-expression"]
  579 -> 311 [style=dashed label="simple-template-id"]
  579 -> 312 [style=dashed label="simple-type-specifier"]
  579 -> 313 [style=dashed label="string-literal"]
  579 -> 314 [style=dashed label="template-id"]
  579 -> 102 [style=dashed label="template-name"]
  579 -> 104 [style=dashed label="type-constraint"]
  579 -> 105 [style=dashed label="type-constraint-opt"]
  579 -> 106 [style=dashed label="type-name"]
  579 -> 108 [style=dashed label="typedef-name"]
  579 -> 316 [style=dashed label="typename-specifier"]
  579 -> 317 [style=dashed label="unary-expression"]
  579 -> 318 [style=dashed label="unary-operator"]
  579 -> 319 [style=dashed label="unqualified-id"]
  579 -> 320 [style=dashed label="user-defined-character-literal"]
  579 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  579 -> 322 [style=dashed label="user-defined-integer-literal"]
  579 -> 323 [style=dashed label="user-defined-literal"]
  579 -> 324 [style=dashed label="user-defined-string-literal"]
  579 -> "579R19" [style=solid]
 "579R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  579 -> "579R469d" [label="[IDENTIFIER]", style=solid]
 "579R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  579 -> "579R722d" [label="[\"decltype\"]", style=solid]
 "579R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  579 -> "579R722" [label="[\"auto\"]", style=solid]
 "579R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  580 [label="State 580\n\l468 nested-name-specifier: nested-name-specifier TEMPLATE-opt • simple-template-id \"::\"\l612 qualified-id: nested-name-specifier TEMPLATE-opt • unqualified-id\l"]
  580 -> 823 [style=solid label="IDENTIFIER"]
  580 -> 251 [style=solid label="\"operator\""]
  580 -> 354 [style=solid label="\"~\""]
  580 -> 282 [style=dashed label="conversion-function-id"]
  580 -> 295 [style=dashed label="literal-operator-id"]
  580 -> 302 [style=dashed label="operator-function-id"]
  580 -> 824 [style=dashed label="simple-template-id"]
  580 -> 314 [style=dashed label="template-id"]
  580 -> 102 [style=dashed label="template-name"]
  580 -> 825 [style=dashed label="unqualified-id"]
  581 [label="State 581\n\l706 template-id: operator-function-id \"<\" • template-argument-list-opt \">\"\l"]
  581 -> 238 [style=solid label="IDENTIFIER"]
  581 -> 239 [style=solid label="\"noexcept\""]
  581 -> 240 [style=solid label="\"!\""]
  581 -> 241 [style=solid label="\"::\""]
  581 -> 242 [style=solid label="\"this\""]
  581 -> 8 [style=solid label="\"typename\""]
  581 -> 243 [style=solid label="\"+\""]
  581 -> 244 [style=solid label="\"-\""]
  581 -> 245 [style=solid label="\"(\""]
  581 -> 246 [style=solid label="\"&\""]
  581 -> 247 [style=solid label="\"[\""]
  581 -> 248 [style=solid label="\"co_await\""]
  581 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  581 -> 250 [style=solid label="CHARACTER_LITERAL"]
  581 -> 12 [style=solid label="\"class\""]
  581 -> 13 [style=solid label="\"struct\""]
  581 -> 14 [style=solid label="\"union\""]
  581 -> 251 [style=solid label="\"operator\""]
  581 -> 15 [style=solid label="\"const\""]
  581 -> 16 [style=solid label="\"volatile\""]
  581 -> 21 [style=solid label="\"decltype\""]
  581 -> 125 [style=solid label="\"enum\""]
  581 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  581 -> 253 [style=solid label="\"*\""]
  581 -> 254 [style=solid label="INTEGER_LITERAL"]
  581 -> 255 [style=solid label="\"requires\""]
  581 -> 256 [style=solid label="\"~\""]
  581 -> 257 [style=solid label="\"++\""]
  581 -> 258 [style=solid label="\"--\""]
  581 -> 259 [style=solid label="POINTER_LITERAL"]
  581 -> 260 [style=solid label="\"dynamic_cast\""]
  581 -> 261 [style=solid label="\"static_cast\""]
  581 -> 262 [style=solid label="\"reinterpret_cast\""]
  581 -> 263 [style=solid label="\"const_cast\""]
  581 -> 264 [style=solid label="\"typeid\""]
  581 -> 27 [style=solid label="\"char\""]
  581 -> 28 [style=solid label="\"char8_t\""]
  581 -> 29 [style=solid label="\"char16_t\""]
  581 -> 30 [style=solid label="\"char32_t\""]
  581 -> 31 [style=solid label="\"wchar_t\""]
  581 -> 32 [style=solid label="\"bool\""]
  581 -> 33 [style=solid label="\"short\""]
  581 -> 34 [style=solid label="\"int\""]
  581 -> 35 [style=solid label="\"long\""]
  581 -> 36 [style=solid label="\"signed\""]
  581 -> 37 [style=solid label="\"unsigned\""]
  581 -> 38 [style=solid label="\"float\""]
  581 -> 39 [style=solid label="\"double\""]
  581 -> 40 [style=solid label="\"void\""]
  581 -> 118 [style=solid label="STRING_LITERAL"]
  581 -> 266 [style=solid label="\"sizeof\""]
  581 -> 267 [style=solid label="\"alignof\""]
  581 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  581 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  581 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  581 -> 272 [style=dashed label="SCOPE-opt"]
  581 -> 273 [style=dashed label="additive-expression"]
  581 -> 274 [style=dashed label="and-expression"]
  581 -> 276 [style=dashed label="await-expression"]
  581 -> 277 [style=dashed label="boolean-literal"]
  581 -> 278 [style=dashed label="cast-expression"]
  581 -> 279 [style=dashed label="character-literal"]
  581 -> 424 [style=dashed label="class-key"]
  581 -> 55 [style=dashed label="class-name"]
  581 -> 280 [style=dashed label="compare-expression"]
  581 -> 327 [style=dashed label="conditional-expression"]
  581 -> 425 [style=dashed label="constant-expression"]
  581 -> 282 [style=dashed label="conversion-function-id"]
  581 -> 57 [style=dashed label="cv-qualifier"]
  581 -> 63 [style=dashed label="decltype-specifier"]
  581 -> 283 [style=dashed label="delete-expression"]
  581 -> 66 [style=dashed label="elaborated-enum-specifier"]
  581 -> 67 [style=dashed label="elaborated-type-specifier"]
  581 -> 71 [style=dashed label="enum-name"]
  581 -> 284 [style=dashed label="equality-expression"]
  581 -> 285 [style=dashed label="exclusive-or-expression"]
  581 -> 287 [style=dashed label="floating-point-literal"]
  581 -> 288 [style=dashed label="fold-expression"]
  581 -> 426 [style=dashed label="id-expression"]
  581 -> 290 [style=dashed label="inclusive-or-expression"]
  581 -> 291 [style=dashed label="integer-literal"]
  581 -> 292 [style=dashed label="lambda-expression"]
  581 -> 293 [style=dashed label="lambda-introducer"]
  581 -> 294 [style=dashed label="literal"]
  581 -> 295 [style=dashed label="literal-operator-id"]
  581 -> 296 [style=dashed label="logical-and-expression"]
  581 -> 329 [style=dashed label="logical-or-expression"]
  581 -> 298 [style=dashed label="multiplicative-expression"]
  581 -> 85 [style=dashed label="namespace-alias"]
  581 -> 88 [style=dashed label="namespace-name"]
  581 -> 299 [style=dashed label="nested-name-specifier"]
  581 -> 90 [style=dashed label="nested-name-specifier-opt"]
  581 -> 300 [style=dashed label="new-expression"]
  581 -> 301 [style=dashed label="noexcept-expression"]
  581 -> 302 [style=dashed label="operator-function-id"]
  581 -> 94 [style=dashed label="placeholder-type-specifier"]
  581 -> 303 [style=dashed label="pm-expression"]
  581 -> 304 [style=dashed label="pointer-literal"]
  581 -> 305 [style=dashed label="postfix-expression"]
  581 -> 306 [style=dashed label="primary-expression"]
  581 -> 307 [style=dashed label="qualified-id"]
  581 -> 308 [style=dashed label="relational-expression"]
  581 -> 309 [style=dashed label="requires-expression"]
  581 -> 310 [style=dashed label="shift-expression"]
  581 -> 311 [style=dashed label="simple-template-id"]
  581 -> 427 [style=dashed label="simple-type-specifier"]
  581 -> 313 [style=dashed label="string-literal"]
  581 -> 428 [style=dashed label="template-argument"]
  581 -> 429 [style=dashed label="template-argument-list"]
  581 -> 826 [style=dashed label="template-argument-list-opt"]
  581 -> 314 [style=dashed label="template-id"]
  581 -> 102 [style=dashed label="template-name"]
  581 -> 104 [style=dashed label="type-constraint"]
  581 -> 105 [style=dashed label="type-constraint-opt"]
  581 -> 431 [style=dashed label="type-id"]
  581 -> 106 [style=dashed label="type-name"]
  581 -> 432 [style=dashed label="type-specifier"]
  581 -> 433 [style=dashed label="type-specifier-seq"]
  581 -> 108 [style=dashed label="typedef-name"]
  581 -> 434 [style=dashed label="typename-specifier"]
  581 -> 317 [style=dashed label="unary-expression"]
  581 -> 318 [style=dashed label="unary-operator"]
  581 -> 319 [style=dashed label="unqualified-id"]
  581 -> 320 [style=dashed label="user-defined-character-literal"]
  581 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  581 -> 322 [style=dashed label="user-defined-integer-literal"]
  581 -> 323 [style=dashed label="user-defined-literal"]
  581 -> 324 [style=dashed label="user-defined-string-literal"]
  581 -> "581R19" [style=solid]
 "581R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  581 -> "581R469d" [label="[IDENTIFIER]", style=solid]
 "581R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  581 -> "581R700" [label="[\">\"]", style=solid]
 "581R700" [label="R700", fillcolor=3, shape=diamond, style=filled]
  581 -> "581R722d" [label="[\"decltype\"]", style=solid]
 "581R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  581 -> "581R722" [label="[\"auto\"]", style=solid]
 "581R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  582 [label="State 582\n\l568 pm-expression: pm-expression \".*\" • cast-expression\l"]
  582 -> 238 [style=solid label="IDENTIFIER"]
  582 -> 239 [style=solid label="\"noexcept\""]
  582 -> 240 [style=solid label="\"!\""]
  582 -> 241 [style=solid label="\"::\""]
  582 -> 242 [style=solid label="\"this\""]
  582 -> 8 [style=solid label="\"typename\""]
  582 -> 243 [style=solid label="\"+\""]
  582 -> 244 [style=solid label="\"-\""]
  582 -> 245 [style=solid label="\"(\""]
  582 -> 246 [style=solid label="\"&\""]
  582 -> 247 [style=solid label="\"[\""]
  582 -> 248 [style=solid label="\"co_await\""]
  582 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  582 -> 250 [style=solid label="CHARACTER_LITERAL"]
  582 -> 251 [style=solid label="\"operator\""]
  582 -> 21 [style=solid label="\"decltype\""]
  582 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  582 -> 253 [style=solid label="\"*\""]
  582 -> 254 [style=solid label="INTEGER_LITERAL"]
  582 -> 255 [style=solid label="\"requires\""]
  582 -> 256 [style=solid label="\"~\""]
  582 -> 257 [style=solid label="\"++\""]
  582 -> 258 [style=solid label="\"--\""]
  582 -> 259 [style=solid label="POINTER_LITERAL"]
  582 -> 260 [style=solid label="\"dynamic_cast\""]
  582 -> 261 [style=solid label="\"static_cast\""]
  582 -> 262 [style=solid label="\"reinterpret_cast\""]
  582 -> 263 [style=solid label="\"const_cast\""]
  582 -> 264 [style=solid label="\"typeid\""]
  582 -> 27 [style=solid label="\"char\""]
  582 -> 28 [style=solid label="\"char8_t\""]
  582 -> 29 [style=solid label="\"char16_t\""]
  582 -> 30 [style=solid label="\"char32_t\""]
  582 -> 31 [style=solid label="\"wchar_t\""]
  582 -> 32 [style=solid label="\"bool\""]
  582 -> 33 [style=solid label="\"short\""]
  582 -> 34 [style=solid label="\"int\""]
  582 -> 35 [style=solid label="\"long\""]
  582 -> 36 [style=solid label="\"signed\""]
  582 -> 37 [style=solid label="\"unsigned\""]
  582 -> 38 [style=solid label="\"float\""]
  582 -> 39 [style=solid label="\"double\""]
  582 -> 40 [style=solid label="\"void\""]
  582 -> 118 [style=solid label="STRING_LITERAL"]
  582 -> 266 [style=solid label="\"sizeof\""]
  582 -> 267 [style=solid label="\"alignof\""]
  582 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  582 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  582 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  582 -> 272 [style=dashed label="SCOPE-opt"]
  582 -> 276 [style=dashed label="await-expression"]
  582 -> 277 [style=dashed label="boolean-literal"]
  582 -> 827 [style=dashed label="cast-expression"]
  582 -> 279 [style=dashed label="character-literal"]
  582 -> 55 [style=dashed label="class-name"]
  582 -> 282 [style=dashed label="conversion-function-id"]
  582 -> 63 [style=dashed label="decltype-specifier"]
  582 -> 283 [style=dashed label="delete-expression"]
  582 -> 71 [style=dashed label="enum-name"]
  582 -> 287 [style=dashed label="floating-point-literal"]
  582 -> 288 [style=dashed label="fold-expression"]
  582 -> 289 [style=dashed label="id-expression"]
  582 -> 291 [style=dashed label="integer-literal"]
  582 -> 292 [style=dashed label="lambda-expression"]
  582 -> 293 [style=dashed label="lambda-introducer"]
  582 -> 294 [style=dashed label="literal"]
  582 -> 295 [style=dashed label="literal-operator-id"]
  582 -> 85 [style=dashed label="namespace-alias"]
  582 -> 88 [style=dashed label="namespace-name"]
  582 -> 299 [style=dashed label="nested-name-specifier"]
  582 -> 90 [style=dashed label="nested-name-specifier-opt"]
  582 -> 300 [style=dashed label="new-expression"]
  582 -> 301 [style=dashed label="noexcept-expression"]
  582 -> 302 [style=dashed label="operator-function-id"]
  582 -> 94 [style=dashed label="placeholder-type-specifier"]
  582 -> 304 [style=dashed label="pointer-literal"]
  582 -> 305 [style=dashed label="postfix-expression"]
  582 -> 306 [style=dashed label="primary-expression"]
  582 -> 307 [style=dashed label="qualified-id"]
  582 -> 309 [style=dashed label="requires-expression"]
  582 -> 311 [style=dashed label="simple-template-id"]
  582 -> 312 [style=dashed label="simple-type-specifier"]
  582 -> 313 [style=dashed label="string-literal"]
  582 -> 314 [style=dashed label="template-id"]
  582 -> 102 [style=dashed label="template-name"]
  582 -> 104 [style=dashed label="type-constraint"]
  582 -> 105 [style=dashed label="type-constraint-opt"]
  582 -> 106 [style=dashed label="type-name"]
  582 -> 108 [style=dashed label="typedef-name"]
  582 -> 316 [style=dashed label="typename-specifier"]
  582 -> 317 [style=dashed label="unary-expression"]
  582 -> 318 [style=dashed label="unary-operator"]
  582 -> 319 [style=dashed label="unqualified-id"]
  582 -> 320 [style=dashed label="user-defined-character-literal"]
  582 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  582 -> 322 [style=dashed label="user-defined-integer-literal"]
  582 -> 323 [style=dashed label="user-defined-literal"]
  582 -> 324 [style=dashed label="user-defined-string-literal"]
  582 -> "582R19" [style=solid]
 "582R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  582 -> "582R469d" [label="[IDENTIFIER]", style=solid]
 "582R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  582 -> "582R722d" [label="[\"decltype\"]", style=solid]
 "582R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  582 -> "582R722" [label="[\"auto\"]", style=solid]
 "582R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  583 [label="State 583\n\l569 pm-expression: pm-expression \"->*\" • cast-expression\l"]
  583 -> 238 [style=solid label="IDENTIFIER"]
  583 -> 239 [style=solid label="\"noexcept\""]
  583 -> 240 [style=solid label="\"!\""]
  583 -> 241 [style=solid label="\"::\""]
  583 -> 242 [style=solid label="\"this\""]
  583 -> 8 [style=solid label="\"typename\""]
  583 -> 243 [style=solid label="\"+\""]
  583 -> 244 [style=solid label="\"-\""]
  583 -> 245 [style=solid label="\"(\""]
  583 -> 246 [style=solid label="\"&\""]
  583 -> 247 [style=solid label="\"[\""]
  583 -> 248 [style=solid label="\"co_await\""]
  583 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  583 -> 250 [style=solid label="CHARACTER_LITERAL"]
  583 -> 251 [style=solid label="\"operator\""]
  583 -> 21 [style=solid label="\"decltype\""]
  583 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  583 -> 253 [style=solid label="\"*\""]
  583 -> 254 [style=solid label="INTEGER_LITERAL"]
  583 -> 255 [style=solid label="\"requires\""]
  583 -> 256 [style=solid label="\"~\""]
  583 -> 257 [style=solid label="\"++\""]
  583 -> 258 [style=solid label="\"--\""]
  583 -> 259 [style=solid label="POINTER_LITERAL"]
  583 -> 260 [style=solid label="\"dynamic_cast\""]
  583 -> 261 [style=solid label="\"static_cast\""]
  583 -> 262 [style=solid label="\"reinterpret_cast\""]
  583 -> 263 [style=solid label="\"const_cast\""]
  583 -> 264 [style=solid label="\"typeid\""]
  583 -> 27 [style=solid label="\"char\""]
  583 -> 28 [style=solid label="\"char8_t\""]
  583 -> 29 [style=solid label="\"char16_t\""]
  583 -> 30 [style=solid label="\"char32_t\""]
  583 -> 31 [style=solid label="\"wchar_t\""]
  583 -> 32 [style=solid label="\"bool\""]
  583 -> 33 [style=solid label="\"short\""]
  583 -> 34 [style=solid label="\"int\""]
  583 -> 35 [style=solid label="\"long\""]
  583 -> 36 [style=solid label="\"signed\""]
  583 -> 37 [style=solid label="\"unsigned\""]
  583 -> 38 [style=solid label="\"float\""]
  583 -> 39 [style=solid label="\"double\""]
  583 -> 40 [style=solid label="\"void\""]
  583 -> 118 [style=solid label="STRING_LITERAL"]
  583 -> 266 [style=solid label="\"sizeof\""]
  583 -> 267 [style=solid label="\"alignof\""]
  583 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  583 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  583 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  583 -> 272 [style=dashed label="SCOPE-opt"]
  583 -> 276 [style=dashed label="await-expression"]
  583 -> 277 [style=dashed label="boolean-literal"]
  583 -> 828 [style=dashed label="cast-expression"]
  583 -> 279 [style=dashed label="character-literal"]
  583 -> 55 [style=dashed label="class-name"]
  583 -> 282 [style=dashed label="conversion-function-id"]
  583 -> 63 [style=dashed label="decltype-specifier"]
  583 -> 283 [style=dashed label="delete-expression"]
  583 -> 71 [style=dashed label="enum-name"]
  583 -> 287 [style=dashed label="floating-point-literal"]
  583 -> 288 [style=dashed label="fold-expression"]
  583 -> 289 [style=dashed label="id-expression"]
  583 -> 291 [style=dashed label="integer-literal"]
  583 -> 292 [style=dashed label="lambda-expression"]
  583 -> 293 [style=dashed label="lambda-introducer"]
  583 -> 294 [style=dashed label="literal"]
  583 -> 295 [style=dashed label="literal-operator-id"]
  583 -> 85 [style=dashed label="namespace-alias"]
  583 -> 88 [style=dashed label="namespace-name"]
  583 -> 299 [style=dashed label="nested-name-specifier"]
  583 -> 90 [style=dashed label="nested-name-specifier-opt"]
  583 -> 300 [style=dashed label="new-expression"]
  583 -> 301 [style=dashed label="noexcept-expression"]
  583 -> 302 [style=dashed label="operator-function-id"]
  583 -> 94 [style=dashed label="placeholder-type-specifier"]
  583 -> 304 [style=dashed label="pointer-literal"]
  583 -> 305 [style=dashed label="postfix-expression"]
  583 -> 306 [style=dashed label="primary-expression"]
  583 -> 307 [style=dashed label="qualified-id"]
  583 -> 309 [style=dashed label="requires-expression"]
  583 -> 311 [style=dashed label="simple-template-id"]
  583 -> 312 [style=dashed label="simple-type-specifier"]
  583 -> 313 [style=dashed label="string-literal"]
  583 -> 314 [style=dashed label="template-id"]
  583 -> 102 [style=dashed label="template-name"]
  583 -> 104 [style=dashed label="type-constraint"]
  583 -> 105 [style=dashed label="type-constraint-opt"]
  583 -> 106 [style=dashed label="type-name"]
  583 -> 108 [style=dashed label="typedef-name"]
  583 -> 316 [style=dashed label="typename-specifier"]
  583 -> 317 [style=dashed label="unary-expression"]
  583 -> 318 [style=dashed label="unary-operator"]
  583 -> 319 [style=dashed label="unqualified-id"]
  583 -> 320 [style=dashed label="user-defined-character-literal"]
  583 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  583 -> 322 [style=dashed label="user-defined-integer-literal"]
  583 -> 323 [style=dashed label="user-defined-literal"]
  583 -> 324 [style=dashed label="user-defined-string-literal"]
  583 -> "583R19" [style=solid]
 "583R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  583 -> "583R469d" [label="[IDENTIFIER]", style=solid]
 "583R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  583 -> "583R722d" [label="[\"decltype\"]", style=solid]
 "583R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  583 -> "583R722" [label="[\"auto\"]", style=solid]
 "583R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  584 [label="State 584\n\l573 postfix-expression: postfix-expression \"(\" • expression-list-opt \")\"\l"]
  584 -> 238 [style=solid label="IDENTIFIER"]
  584 -> 239 [style=solid label="\"noexcept\""]
  584 -> 240 [style=solid label="\"!\""]
  584 -> 241 [style=solid label="\"::\""]
  584 -> 242 [style=solid label="\"this\""]
  584 -> 8 [style=solid label="\"typename\""]
  584 -> 243 [style=solid label="\"+\""]
  584 -> 244 [style=solid label="\"-\""]
  584 -> 245 [style=solid label="\"(\""]
  584 -> 246 [style=solid label="\"&\""]
  584 -> 247 [style=solid label="\"[\""]
  584 -> 248 [style=solid label="\"co_await\""]
  584 -> 398 [style=solid label="\"{\""]
  584 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  584 -> 250 [style=solid label="CHARACTER_LITERAL"]
  584 -> 251 [style=solid label="\"operator\""]
  584 -> 21 [style=solid label="\"decltype\""]
  584 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  584 -> 253 [style=solid label="\"*\""]
  584 -> 254 [style=solid label="INTEGER_LITERAL"]
  584 -> 255 [style=solid label="\"requires\""]
  584 -> 256 [style=solid label="\"~\""]
  584 -> 257 [style=solid label="\"++\""]
  584 -> 258 [style=solid label="\"--\""]
  584 -> 259 [style=solid label="POINTER_LITERAL"]
  584 -> 260 [style=solid label="\"dynamic_cast\""]
  584 -> 261 [style=solid label="\"static_cast\""]
  584 -> 262 [style=solid label="\"reinterpret_cast\""]
  584 -> 263 [style=solid label="\"const_cast\""]
  584 -> 264 [style=solid label="\"typeid\""]
  584 -> 27 [style=solid label="\"char\""]
  584 -> 28 [style=solid label="\"char8_t\""]
  584 -> 29 [style=solid label="\"char16_t\""]
  584 -> 30 [style=solid label="\"char32_t\""]
  584 -> 31 [style=solid label="\"wchar_t\""]
  584 -> 32 [style=solid label="\"bool\""]
  584 -> 33 [style=solid label="\"short\""]
  584 -> 34 [style=solid label="\"int\""]
  584 -> 35 [style=solid label="\"long\""]
  584 -> 36 [style=solid label="\"signed\""]
  584 -> 37 [style=solid label="\"unsigned\""]
  584 -> 38 [style=solid label="\"float\""]
  584 -> 39 [style=solid label="\"double\""]
  584 -> 40 [style=solid label="\"void\""]
  584 -> 118 [style=solid label="STRING_LITERAL"]
  584 -> 265 [style=solid label="\"throw\""]
  584 -> 266 [style=solid label="\"sizeof\""]
  584 -> 267 [style=solid label="\"alignof\""]
  584 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  584 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  584 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  584 -> 271 [style=solid label="\"co_yield\""]
  584 -> 272 [style=dashed label="SCOPE-opt"]
  584 -> 273 [style=dashed label="additive-expression"]
  584 -> 274 [style=dashed label="and-expression"]
  584 -> 662 [style=dashed label="assignment-expression"]
  584 -> 276 [style=dashed label="await-expression"]
  584 -> 277 [style=dashed label="boolean-literal"]
  584 -> 663 [style=dashed label="braced-init-list"]
  584 -> 278 [style=dashed label="cast-expression"]
  584 -> 279 [style=dashed label="character-literal"]
  584 -> 55 [style=dashed label="class-name"]
  584 -> 280 [style=dashed label="compare-expression"]
  584 -> 281 [style=dashed label="conditional-expression"]
  584 -> 282 [style=dashed label="conversion-function-id"]
  584 -> 63 [style=dashed label="decltype-specifier"]
  584 -> 283 [style=dashed label="delete-expression"]
  584 -> 71 [style=dashed label="enum-name"]
  584 -> 284 [style=dashed label="equality-expression"]
  584 -> 285 [style=dashed label="exclusive-or-expression"]
  584 -> 829 [style=dashed label="expression-list"]
  584 -> 830 [style=dashed label="expression-list-opt"]
  584 -> 287 [style=dashed label="floating-point-literal"]
  584 -> 288 [style=dashed label="fold-expression"]
  584 -> 289 [style=dashed label="id-expression"]
  584 -> 290 [style=dashed label="inclusive-or-expression"]
  584 -> 666 [style=dashed label="initializer-clause"]
  584 -> 667 [style=dashed label="initializer-list"]
  584 -> 291 [style=dashed label="integer-literal"]
  584 -> 292 [style=dashed label="lambda-expression"]
  584 -> 293 [style=dashed label="lambda-introducer"]
  584 -> 294 [style=dashed label="literal"]
  584 -> 295 [style=dashed label="literal-operator-id"]
  584 -> 296 [style=dashed label="logical-and-expression"]
  584 -> 297 [style=dashed label="logical-or-expression"]
  584 -> 298 [style=dashed label="multiplicative-expression"]
  584 -> 85 [style=dashed label="namespace-alias"]
  584 -> 88 [style=dashed label="namespace-name"]
  584 -> 299 [style=dashed label="nested-name-specifier"]
  584 -> 90 [style=dashed label="nested-name-specifier-opt"]
  584 -> 300 [style=dashed label="new-expression"]
  584 -> 301 [style=dashed label="noexcept-expression"]
  584 -> 302 [style=dashed label="operator-function-id"]
  584 -> 94 [style=dashed label="placeholder-type-specifier"]
  584 -> 303 [style=dashed label="pm-expression"]
  584 -> 304 [style=dashed label="pointer-literal"]
  584 -> 305 [style=dashed label="postfix-expression"]
  584 -> 306 [style=dashed label="primary-expression"]
  584 -> 307 [style=dashed label="qualified-id"]
  584 -> 308 [style=dashed label="relational-expression"]
  584 -> 309 [style=dashed label="requires-expression"]
  584 -> 310 [style=dashed label="shift-expression"]
  584 -> 311 [style=dashed label="simple-template-id"]
  584 -> 312 [style=dashed label="simple-type-specifier"]
  584 -> 313 [style=dashed label="string-literal"]
  584 -> 314 [style=dashed label="template-id"]
  584 -> 102 [style=dashed label="template-name"]
  584 -> 315 [style=dashed label="throw-expression"]
  584 -> 104 [style=dashed label="type-constraint"]
  584 -> 105 [style=dashed label="type-constraint-opt"]
  584 -> 106 [style=dashed label="type-name"]
  584 -> 108 [style=dashed label="typedef-name"]
  584 -> 316 [style=dashed label="typename-specifier"]
  584 -> 317 [style=dashed label="unary-expression"]
  584 -> 318 [style=dashed label="unary-operator"]
  584 -> 319 [style=dashed label="unqualified-id"]
  584 -> 320 [style=dashed label="user-defined-character-literal"]
  584 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  584 -> 322 [style=dashed label="user-defined-integer-literal"]
  584 -> 323 [style=dashed label="user-defined-literal"]
  584 -> 324 [style=dashed label="user-defined-string-literal"]
  584 -> 325 [style=dashed label="yield-expression"]
  584 -> "584R19" [style=solid]
 "584R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  584 -> "584R282" [label="[\")\"]", style=solid]
 "584R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  584 -> "584R469d" [label="[IDENTIFIER]", style=solid]
 "584R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  584 -> "584R722d" [label="[\"decltype\"]", style=solid]
 "584R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  584 -> "584R722" [label="[\"auto\"]", style=solid]
 "584R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  585 [label="State 585\n\l572 postfix-expression: postfix-expression \"[\" • expression-list-opt \"]\"\l"]
  585 -> 238 [style=solid label="IDENTIFIER"]
  585 -> 239 [style=solid label="\"noexcept\""]
  585 -> 240 [style=solid label="\"!\""]
  585 -> 241 [style=solid label="\"::\""]
  585 -> 242 [style=solid label="\"this\""]
  585 -> 8 [style=solid label="\"typename\""]
  585 -> 243 [style=solid label="\"+\""]
  585 -> 244 [style=solid label="\"-\""]
  585 -> 245 [style=solid label="\"(\""]
  585 -> 246 [style=solid label="\"&\""]
  585 -> 247 [style=solid label="\"[\""]
  585 -> 248 [style=solid label="\"co_await\""]
  585 -> 398 [style=solid label="\"{\""]
  585 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  585 -> 250 [style=solid label="CHARACTER_LITERAL"]
  585 -> 251 [style=solid label="\"operator\""]
  585 -> 21 [style=solid label="\"decltype\""]
  585 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  585 -> 253 [style=solid label="\"*\""]
  585 -> 254 [style=solid label="INTEGER_LITERAL"]
  585 -> 255 [style=solid label="\"requires\""]
  585 -> 256 [style=solid label="\"~\""]
  585 -> 257 [style=solid label="\"++\""]
  585 -> 258 [style=solid label="\"--\""]
  585 -> 259 [style=solid label="POINTER_LITERAL"]
  585 -> 260 [style=solid label="\"dynamic_cast\""]
  585 -> 261 [style=solid label="\"static_cast\""]
  585 -> 262 [style=solid label="\"reinterpret_cast\""]
  585 -> 263 [style=solid label="\"const_cast\""]
  585 -> 264 [style=solid label="\"typeid\""]
  585 -> 27 [style=solid label="\"char\""]
  585 -> 28 [style=solid label="\"char8_t\""]
  585 -> 29 [style=solid label="\"char16_t\""]
  585 -> 30 [style=solid label="\"char32_t\""]
  585 -> 31 [style=solid label="\"wchar_t\""]
  585 -> 32 [style=solid label="\"bool\""]
  585 -> 33 [style=solid label="\"short\""]
  585 -> 34 [style=solid label="\"int\""]
  585 -> 35 [style=solid label="\"long\""]
  585 -> 36 [style=solid label="\"signed\""]
  585 -> 37 [style=solid label="\"unsigned\""]
  585 -> 38 [style=solid label="\"float\""]
  585 -> 39 [style=solid label="\"double\""]
  585 -> 40 [style=solid label="\"void\""]
  585 -> 118 [style=solid label="STRING_LITERAL"]
  585 -> 265 [style=solid label="\"throw\""]
  585 -> 266 [style=solid label="\"sizeof\""]
  585 -> 267 [style=solid label="\"alignof\""]
  585 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  585 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  585 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  585 -> 271 [style=solid label="\"co_yield\""]
  585 -> 272 [style=dashed label="SCOPE-opt"]
  585 -> 273 [style=dashed label="additive-expression"]
  585 -> 274 [style=dashed label="and-expression"]
  585 -> 662 [style=dashed label="assignment-expression"]
  585 -> 276 [style=dashed label="await-expression"]
  585 -> 277 [style=dashed label="boolean-literal"]
  585 -> 663 [style=dashed label="braced-init-list"]
  585 -> 278 [style=dashed label="cast-expression"]
  585 -> 279 [style=dashed label="character-literal"]
  585 -> 55 [style=dashed label="class-name"]
  585 -> 280 [style=dashed label="compare-expression"]
  585 -> 281 [style=dashed label="conditional-expression"]
  585 -> 282 [style=dashed label="conversion-function-id"]
  585 -> 63 [style=dashed label="decltype-specifier"]
  585 -> 283 [style=dashed label="delete-expression"]
  585 -> 71 [style=dashed label="enum-name"]
  585 -> 284 [style=dashed label="equality-expression"]
  585 -> 285 [style=dashed label="exclusive-or-expression"]
  585 -> 829 [style=dashed label="expression-list"]
  585 -> 831 [style=dashed label="expression-list-opt"]
  585 -> 287 [style=dashed label="floating-point-literal"]
  585 -> 288 [style=dashed label="fold-expression"]
  585 -> 289 [style=dashed label="id-expression"]
  585 -> 290 [style=dashed label="inclusive-or-expression"]
  585 -> 666 [style=dashed label="initializer-clause"]
  585 -> 667 [style=dashed label="initializer-list"]
  585 -> 291 [style=dashed label="integer-literal"]
  585 -> 292 [style=dashed label="lambda-expression"]
  585 -> 293 [style=dashed label="lambda-introducer"]
  585 -> 294 [style=dashed label="literal"]
  585 -> 295 [style=dashed label="literal-operator-id"]
  585 -> 296 [style=dashed label="logical-and-expression"]
  585 -> 297 [style=dashed label="logical-or-expression"]
  585 -> 298 [style=dashed label="multiplicative-expression"]
  585 -> 85 [style=dashed label="namespace-alias"]
  585 -> 88 [style=dashed label="namespace-name"]
  585 -> 299 [style=dashed label="nested-name-specifier"]
  585 -> 90 [style=dashed label="nested-name-specifier-opt"]
  585 -> 300 [style=dashed label="new-expression"]
  585 -> 301 [style=dashed label="noexcept-expression"]
  585 -> 302 [style=dashed label="operator-function-id"]
  585 -> 94 [style=dashed label="placeholder-type-specifier"]
  585 -> 303 [style=dashed label="pm-expression"]
  585 -> 304 [style=dashed label="pointer-literal"]
  585 -> 305 [style=dashed label="postfix-expression"]
  585 -> 306 [style=dashed label="primary-expression"]
  585 -> 307 [style=dashed label="qualified-id"]
  585 -> 308 [style=dashed label="relational-expression"]
  585 -> 309 [style=dashed label="requires-expression"]
  585 -> 310 [style=dashed label="shift-expression"]
  585 -> 311 [style=dashed label="simple-template-id"]
  585 -> 312 [style=dashed label="simple-type-specifier"]
  585 -> 313 [style=dashed label="string-literal"]
  585 -> 314 [style=dashed label="template-id"]
  585 -> 102 [style=dashed label="template-name"]
  585 -> 315 [style=dashed label="throw-expression"]
  585 -> 104 [style=dashed label="type-constraint"]
  585 -> 105 [style=dashed label="type-constraint-opt"]
  585 -> 106 [style=dashed label="type-name"]
  585 -> 108 [style=dashed label="typedef-name"]
  585 -> 316 [style=dashed label="typename-specifier"]
  585 -> 317 [style=dashed label="unary-expression"]
  585 -> 318 [style=dashed label="unary-operator"]
  585 -> 319 [style=dashed label="unqualified-id"]
  585 -> 320 [style=dashed label="user-defined-character-literal"]
  585 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  585 -> 322 [style=dashed label="user-defined-integer-literal"]
  585 -> 323 [style=dashed label="user-defined-literal"]
  585 -> 324 [style=dashed label="user-defined-string-literal"]
  585 -> 325 [style=dashed label="yield-expression"]
  585 -> "585R19" [style=solid]
 "585R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  585 -> "585R282" [label="[\"]\"]", style=solid]
 "585R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  585 -> "585R469d" [label="[IDENTIFIER]", style=solid]
 "585R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  585 -> "585R722d" [label="[\"decltype\"]", style=solid]
 "585R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  585 -> "585R722" [label="[\"auto\"]", style=solid]
 "585R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  586 [label="State 586\n\l579 postfix-expression: postfix-expression \"->\" • TEMPLATE-opt id-expression\l"]
  586 -> 230 [style=solid label="\"template\""]
  586 -> 832 [style=dashed label="TEMPLATE-opt"]
  586 -> "586R21" [style=solid]
 "586R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  587 [label="State 587\n\l578 postfix-expression: postfix-expression \".\" • TEMPLATE-opt id-expression\l"]
  587 -> 230 [style=solid label="\"template\""]
  587 -> 833 [style=dashed label="TEMPLATE-opt"]
  587 -> "587R21" [style=solid]
 "587R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  588 [label="State 588\n\l580 postfix-expression: postfix-expression \"++\" •\l"]
  588 -> "588R580" [style=solid]
 "588R580" [label="R580", fillcolor=3, shape=diamond, style=filled]
  589 [label="State 589\n\l581 postfix-expression: postfix-expression \"--\" •\l"]
  589 -> "589R581" [style=solid]
 "589R581" [label="R581", fillcolor=3, shape=diamond, style=filled]
  590 [label="State 590\n\l619 relational-expression: relational-expression \"<\" • compare-expression\l"]
  590 -> 238 [style=solid label="IDENTIFIER"]
  590 -> 239 [style=solid label="\"noexcept\""]
  590 -> 240 [style=solid label="\"!\""]
  590 -> 241 [style=solid label="\"::\""]
  590 -> 242 [style=solid label="\"this\""]
  590 -> 8 [style=solid label="\"typename\""]
  590 -> 243 [style=solid label="\"+\""]
  590 -> 244 [style=solid label="\"-\""]
  590 -> 245 [style=solid label="\"(\""]
  590 -> 246 [style=solid label="\"&\""]
  590 -> 247 [style=solid label="\"[\""]
  590 -> 248 [style=solid label="\"co_await\""]
  590 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  590 -> 250 [style=solid label="CHARACTER_LITERAL"]
  590 -> 251 [style=solid label="\"operator\""]
  590 -> 21 [style=solid label="\"decltype\""]
  590 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  590 -> 253 [style=solid label="\"*\""]
  590 -> 254 [style=solid label="INTEGER_LITERAL"]
  590 -> 255 [style=solid label="\"requires\""]
  590 -> 256 [style=solid label="\"~\""]
  590 -> 257 [style=solid label="\"++\""]
  590 -> 258 [style=solid label="\"--\""]
  590 -> 259 [style=solid label="POINTER_LITERAL"]
  590 -> 260 [style=solid label="\"dynamic_cast\""]
  590 -> 261 [style=solid label="\"static_cast\""]
  590 -> 262 [style=solid label="\"reinterpret_cast\""]
  590 -> 263 [style=solid label="\"const_cast\""]
  590 -> 264 [style=solid label="\"typeid\""]
  590 -> 27 [style=solid label="\"char\""]
  590 -> 28 [style=solid label="\"char8_t\""]
  590 -> 29 [style=solid label="\"char16_t\""]
  590 -> 30 [style=solid label="\"char32_t\""]
  590 -> 31 [style=solid label="\"wchar_t\""]
  590 -> 32 [style=solid label="\"bool\""]
  590 -> 33 [style=solid label="\"short\""]
  590 -> 34 [style=solid label="\"int\""]
  590 -> 35 [style=solid label="\"long\""]
  590 -> 36 [style=solid label="\"signed\""]
  590 -> 37 [style=solid label="\"unsigned\""]
  590 -> 38 [style=solid label="\"float\""]
  590 -> 39 [style=solid label="\"double\""]
  590 -> 40 [style=solid label="\"void\""]
  590 -> 118 [style=solid label="STRING_LITERAL"]
  590 -> 266 [style=solid label="\"sizeof\""]
  590 -> 267 [style=solid label="\"alignof\""]
  590 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  590 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  590 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  590 -> 272 [style=dashed label="SCOPE-opt"]
  590 -> 273 [style=dashed label="additive-expression"]
  590 -> 276 [style=dashed label="await-expression"]
  590 -> 277 [style=dashed label="boolean-literal"]
  590 -> 278 [style=dashed label="cast-expression"]
  590 -> 279 [style=dashed label="character-literal"]
  590 -> 55 [style=dashed label="class-name"]
  590 -> 834 [style=dashed label="compare-expression"]
  590 -> 282 [style=dashed label="conversion-function-id"]
  590 -> 63 [style=dashed label="decltype-specifier"]
  590 -> 283 [style=dashed label="delete-expression"]
  590 -> 71 [style=dashed label="enum-name"]
  590 -> 287 [style=dashed label="floating-point-literal"]
  590 -> 288 [style=dashed label="fold-expression"]
  590 -> 289 [style=dashed label="id-expression"]
  590 -> 291 [style=dashed label="integer-literal"]
  590 -> 292 [style=dashed label="lambda-expression"]
  590 -> 293 [style=dashed label="lambda-introducer"]
  590 -> 294 [style=dashed label="literal"]
  590 -> 295 [style=dashed label="literal-operator-id"]
  590 -> 298 [style=dashed label="multiplicative-expression"]
  590 -> 85 [style=dashed label="namespace-alias"]
  590 -> 88 [style=dashed label="namespace-name"]
  590 -> 299 [style=dashed label="nested-name-specifier"]
  590 -> 90 [style=dashed label="nested-name-specifier-opt"]
  590 -> 300 [style=dashed label="new-expression"]
  590 -> 301 [style=dashed label="noexcept-expression"]
  590 -> 302 [style=dashed label="operator-function-id"]
  590 -> 94 [style=dashed label="placeholder-type-specifier"]
  590 -> 303 [style=dashed label="pm-expression"]
  590 -> 304 [style=dashed label="pointer-literal"]
  590 -> 305 [style=dashed label="postfix-expression"]
  590 -> 306 [style=dashed label="primary-expression"]
  590 -> 307 [style=dashed label="qualified-id"]
  590 -> 309 [style=dashed label="requires-expression"]
  590 -> 310 [style=dashed label="shift-expression"]
  590 -> 311 [style=dashed label="simple-template-id"]
  590 -> 312 [style=dashed label="simple-type-specifier"]
  590 -> 313 [style=dashed label="string-literal"]
  590 -> 314 [style=dashed label="template-id"]
  590 -> 102 [style=dashed label="template-name"]
  590 -> 104 [style=dashed label="type-constraint"]
  590 -> 105 [style=dashed label="type-constraint-opt"]
  590 -> 106 [style=dashed label="type-name"]
  590 -> 108 [style=dashed label="typedef-name"]
  590 -> 316 [style=dashed label="typename-specifier"]
  590 -> 317 [style=dashed label="unary-expression"]
  590 -> 318 [style=dashed label="unary-operator"]
  590 -> 319 [style=dashed label="unqualified-id"]
  590 -> 320 [style=dashed label="user-defined-character-literal"]
  590 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  590 -> 322 [style=dashed label="user-defined-integer-literal"]
  590 -> 323 [style=dashed label="user-defined-literal"]
  590 -> 324 [style=dashed label="user-defined-string-literal"]
  590 -> "590R19" [style=solid]
 "590R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  590 -> "590R469d" [label="[IDENTIFIER]", style=solid]
 "590R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  590 -> "590R722d" [label="[\"decltype\"]", style=solid]
 "590R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  590 -> "590R722" [label="[\"auto\"]", style=solid]
 "590R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  591 [label="State 591\n\l620 relational-expression: relational-expression \">\" • compare-expression\l"]
  591 -> 238 [style=solid label="IDENTIFIER"]
  591 -> 239 [style=solid label="\"noexcept\""]
  591 -> 240 [style=solid label="\"!\""]
  591 -> 241 [style=solid label="\"::\""]
  591 -> 242 [style=solid label="\"this\""]
  591 -> 8 [style=solid label="\"typename\""]
  591 -> 243 [style=solid label="\"+\""]
  591 -> 244 [style=solid label="\"-\""]
  591 -> 245 [style=solid label="\"(\""]
  591 -> 246 [style=solid label="\"&\""]
  591 -> 247 [style=solid label="\"[\""]
  591 -> 248 [style=solid label="\"co_await\""]
  591 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  591 -> 250 [style=solid label="CHARACTER_LITERAL"]
  591 -> 251 [style=solid label="\"operator\""]
  591 -> 21 [style=solid label="\"decltype\""]
  591 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  591 -> 253 [style=solid label="\"*\""]
  591 -> 254 [style=solid label="INTEGER_LITERAL"]
  591 -> 255 [style=solid label="\"requires\""]
  591 -> 256 [style=solid label="\"~\""]
  591 -> 257 [style=solid label="\"++\""]
  591 -> 258 [style=solid label="\"--\""]
  591 -> 259 [style=solid label="POINTER_LITERAL"]
  591 -> 260 [style=solid label="\"dynamic_cast\""]
  591 -> 261 [style=solid label="\"static_cast\""]
  591 -> 262 [style=solid label="\"reinterpret_cast\""]
  591 -> 263 [style=solid label="\"const_cast\""]
  591 -> 264 [style=solid label="\"typeid\""]
  591 -> 27 [style=solid label="\"char\""]
  591 -> 28 [style=solid label="\"char8_t\""]
  591 -> 29 [style=solid label="\"char16_t\""]
  591 -> 30 [style=solid label="\"char32_t\""]
  591 -> 31 [style=solid label="\"wchar_t\""]
  591 -> 32 [style=solid label="\"bool\""]
  591 -> 33 [style=solid label="\"short\""]
  591 -> 34 [style=solid label="\"int\""]
  591 -> 35 [style=solid label="\"long\""]
  591 -> 36 [style=solid label="\"signed\""]
  591 -> 37 [style=solid label="\"unsigned\""]
  591 -> 38 [style=solid label="\"float\""]
  591 -> 39 [style=solid label="\"double\""]
  591 -> 40 [style=solid label="\"void\""]
  591 -> 118 [style=solid label="STRING_LITERAL"]
  591 -> 266 [style=solid label="\"sizeof\""]
  591 -> 267 [style=solid label="\"alignof\""]
  591 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  591 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  591 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  591 -> 272 [style=dashed label="SCOPE-opt"]
  591 -> 273 [style=dashed label="additive-expression"]
  591 -> 276 [style=dashed label="await-expression"]
  591 -> 277 [style=dashed label="boolean-literal"]
  591 -> 278 [style=dashed label="cast-expression"]
  591 -> 279 [style=dashed label="character-literal"]
  591 -> 55 [style=dashed label="class-name"]
  591 -> 835 [style=dashed label="compare-expression"]
  591 -> 282 [style=dashed label="conversion-function-id"]
  591 -> 63 [style=dashed label="decltype-specifier"]
  591 -> 283 [style=dashed label="delete-expression"]
  591 -> 71 [style=dashed label="enum-name"]
  591 -> 287 [style=dashed label="floating-point-literal"]
  591 -> 288 [style=dashed label="fold-expression"]
  591 -> 289 [style=dashed label="id-expression"]
  591 -> 291 [style=dashed label="integer-literal"]
  591 -> 292 [style=dashed label="lambda-expression"]
  591 -> 293 [style=dashed label="lambda-introducer"]
  591 -> 294 [style=dashed label="literal"]
  591 -> 295 [style=dashed label="literal-operator-id"]
  591 -> 298 [style=dashed label="multiplicative-expression"]
  591 -> 85 [style=dashed label="namespace-alias"]
  591 -> 88 [style=dashed label="namespace-name"]
  591 -> 299 [style=dashed label="nested-name-specifier"]
  591 -> 90 [style=dashed label="nested-name-specifier-opt"]
  591 -> 300 [style=dashed label="new-expression"]
  591 -> 301 [style=dashed label="noexcept-expression"]
  591 -> 302 [style=dashed label="operator-function-id"]
  591 -> 94 [style=dashed label="placeholder-type-specifier"]
  591 -> 303 [style=dashed label="pm-expression"]
  591 -> 304 [style=dashed label="pointer-literal"]
  591 -> 305 [style=dashed label="postfix-expression"]
  591 -> 306 [style=dashed label="primary-expression"]
  591 -> 307 [style=dashed label="qualified-id"]
  591 -> 309 [style=dashed label="requires-expression"]
  591 -> 310 [style=dashed label="shift-expression"]
  591 -> 311 [style=dashed label="simple-template-id"]
  591 -> 312 [style=dashed label="simple-type-specifier"]
  591 -> 313 [style=dashed label="string-literal"]
  591 -> 314 [style=dashed label="template-id"]
  591 -> 102 [style=dashed label="template-name"]
  591 -> 104 [style=dashed label="type-constraint"]
  591 -> 105 [style=dashed label="type-constraint-opt"]
  591 -> 106 [style=dashed label="type-name"]
  591 -> 108 [style=dashed label="typedef-name"]
  591 -> 316 [style=dashed label="typename-specifier"]
  591 -> 317 [style=dashed label="unary-expression"]
  591 -> 318 [style=dashed label="unary-operator"]
  591 -> 319 [style=dashed label="unqualified-id"]
  591 -> 320 [style=dashed label="user-defined-character-literal"]
  591 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  591 -> 322 [style=dashed label="user-defined-integer-literal"]
  591 -> 323 [style=dashed label="user-defined-literal"]
  591 -> 324 [style=dashed label="user-defined-string-literal"]
  591 -> "591R19" [style=solid]
 "591R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  591 -> "591R469d" [label="[IDENTIFIER]", style=solid]
 "591R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R722d" [label="[\"decltype\"]", style=solid]
 "591R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R722" [label="[\"auto\"]", style=solid]
 "591R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  592 [label="State 592\n\l621 relational-expression: relational-expression \"<=\" • compare-expression\l"]
  592 -> 238 [style=solid label="IDENTIFIER"]
  592 -> 239 [style=solid label="\"noexcept\""]
  592 -> 240 [style=solid label="\"!\""]
  592 -> 241 [style=solid label="\"::\""]
  592 -> 242 [style=solid label="\"this\""]
  592 -> 8 [style=solid label="\"typename\""]
  592 -> 243 [style=solid label="\"+\""]
  592 -> 244 [style=solid label="\"-\""]
  592 -> 245 [style=solid label="\"(\""]
  592 -> 246 [style=solid label="\"&\""]
  592 -> 247 [style=solid label="\"[\""]
  592 -> 248 [style=solid label="\"co_await\""]
  592 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  592 -> 250 [style=solid label="CHARACTER_LITERAL"]
  592 -> 251 [style=solid label="\"operator\""]
  592 -> 21 [style=solid label="\"decltype\""]
  592 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  592 -> 253 [style=solid label="\"*\""]
  592 -> 254 [style=solid label="INTEGER_LITERAL"]
  592 -> 255 [style=solid label="\"requires\""]
  592 -> 256 [style=solid label="\"~\""]
  592 -> 257 [style=solid label="\"++\""]
  592 -> 258 [style=solid label="\"--\""]
  592 -> 259 [style=solid label="POINTER_LITERAL"]
  592 -> 260 [style=solid label="\"dynamic_cast\""]
  592 -> 261 [style=solid label="\"static_cast\""]
  592 -> 262 [style=solid label="\"reinterpret_cast\""]
  592 -> 263 [style=solid label="\"const_cast\""]
  592 -> 264 [style=solid label="\"typeid\""]
  592 -> 27 [style=solid label="\"char\""]
  592 -> 28 [style=solid label="\"char8_t\""]
  592 -> 29 [style=solid label="\"char16_t\""]
  592 -> 30 [style=solid label="\"char32_t\""]
  592 -> 31 [style=solid label="\"wchar_t\""]
  592 -> 32 [style=solid label="\"bool\""]
  592 -> 33 [style=solid label="\"short\""]
  592 -> 34 [style=solid label="\"int\""]
  592 -> 35 [style=solid label="\"long\""]
  592 -> 36 [style=solid label="\"signed\""]
  592 -> 37 [style=solid label="\"unsigned\""]
  592 -> 38 [style=solid label="\"float\""]
  592 -> 39 [style=solid label="\"double\""]
  592 -> 40 [style=solid label="\"void\""]
  592 -> 118 [style=solid label="STRING_LITERAL"]
  592 -> 266 [style=solid label="\"sizeof\""]
  592 -> 267 [style=solid label="\"alignof\""]
  592 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  592 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  592 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  592 -> 272 [style=dashed label="SCOPE-opt"]
  592 -> 273 [style=dashed label="additive-expression"]
  592 -> 276 [style=dashed label="await-expression"]
  592 -> 277 [style=dashed label="boolean-literal"]
  592 -> 278 [style=dashed label="cast-expression"]
  592 -> 279 [style=dashed label="character-literal"]
  592 -> 55 [style=dashed label="class-name"]
  592 -> 836 [style=dashed label="compare-expression"]
  592 -> 282 [style=dashed label="conversion-function-id"]
  592 -> 63 [style=dashed label="decltype-specifier"]
  592 -> 283 [style=dashed label="delete-expression"]
  592 -> 71 [style=dashed label="enum-name"]
  592 -> 287 [style=dashed label="floating-point-literal"]
  592 -> 288 [style=dashed label="fold-expression"]
  592 -> 289 [style=dashed label="id-expression"]
  592 -> 291 [style=dashed label="integer-literal"]
  592 -> 292 [style=dashed label="lambda-expression"]
  592 -> 293 [style=dashed label="lambda-introducer"]
  592 -> 294 [style=dashed label="literal"]
  592 -> 295 [style=dashed label="literal-operator-id"]
  592 -> 298 [style=dashed label="multiplicative-expression"]
  592 -> 85 [style=dashed label="namespace-alias"]
  592 -> 88 [style=dashed label="namespace-name"]
  592 -> 299 [style=dashed label="nested-name-specifier"]
  592 -> 90 [style=dashed label="nested-name-specifier-opt"]
  592 -> 300 [style=dashed label="new-expression"]
  592 -> 301 [style=dashed label="noexcept-expression"]
  592 -> 302 [style=dashed label="operator-function-id"]
  592 -> 94 [style=dashed label="placeholder-type-specifier"]
  592 -> 303 [style=dashed label="pm-expression"]
  592 -> 304 [style=dashed label="pointer-literal"]
  592 -> 305 [style=dashed label="postfix-expression"]
  592 -> 306 [style=dashed label="primary-expression"]
  592 -> 307 [style=dashed label="qualified-id"]
  592 -> 309 [style=dashed label="requires-expression"]
  592 -> 310 [style=dashed label="shift-expression"]
  592 -> 311 [style=dashed label="simple-template-id"]
  592 -> 312 [style=dashed label="simple-type-specifier"]
  592 -> 313 [style=dashed label="string-literal"]
  592 -> 314 [style=dashed label="template-id"]
  592 -> 102 [style=dashed label="template-name"]
  592 -> 104 [style=dashed label="type-constraint"]
  592 -> 105 [style=dashed label="type-constraint-opt"]
  592 -> 106 [style=dashed label="type-name"]
  592 -> 108 [style=dashed label="typedef-name"]
  592 -> 316 [style=dashed label="typename-specifier"]
  592 -> 317 [style=dashed label="unary-expression"]
  592 -> 318 [style=dashed label="unary-operator"]
  592 -> 319 [style=dashed label="unqualified-id"]
  592 -> 320 [style=dashed label="user-defined-character-literal"]
  592 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  592 -> 322 [style=dashed label="user-defined-integer-literal"]
  592 -> 323 [style=dashed label="user-defined-literal"]
  592 -> 324 [style=dashed label="user-defined-string-literal"]
  592 -> "592R19" [style=solid]
 "592R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  592 -> "592R469d" [label="[IDENTIFIER]", style=solid]
 "592R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  592 -> "592R722d" [label="[\"decltype\"]", style=solid]
 "592R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  592 -> "592R722" [label="[\"auto\"]", style=solid]
 "592R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  593 [label="State 593\n\l622 relational-expression: relational-expression \">=\" • compare-expression\l"]
  593 -> 238 [style=solid label="IDENTIFIER"]
  593 -> 239 [style=solid label="\"noexcept\""]
  593 -> 240 [style=solid label="\"!\""]
  593 -> 241 [style=solid label="\"::\""]
  593 -> 242 [style=solid label="\"this\""]
  593 -> 8 [style=solid label="\"typename\""]
  593 -> 243 [style=solid label="\"+\""]
  593 -> 244 [style=solid label="\"-\""]
  593 -> 245 [style=solid label="\"(\""]
  593 -> 246 [style=solid label="\"&\""]
  593 -> 247 [style=solid label="\"[\""]
  593 -> 248 [style=solid label="\"co_await\""]
  593 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  593 -> 250 [style=solid label="CHARACTER_LITERAL"]
  593 -> 251 [style=solid label="\"operator\""]
  593 -> 21 [style=solid label="\"decltype\""]
  593 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  593 -> 253 [style=solid label="\"*\""]
  593 -> 254 [style=solid label="INTEGER_LITERAL"]
  593 -> 255 [style=solid label="\"requires\""]
  593 -> 256 [style=solid label="\"~\""]
  593 -> 257 [style=solid label="\"++\""]
  593 -> 258 [style=solid label="\"--\""]
  593 -> 259 [style=solid label="POINTER_LITERAL"]
  593 -> 260 [style=solid label="\"dynamic_cast\""]
  593 -> 261 [style=solid label="\"static_cast\""]
  593 -> 262 [style=solid label="\"reinterpret_cast\""]
  593 -> 263 [style=solid label="\"const_cast\""]
  593 -> 264 [style=solid label="\"typeid\""]
  593 -> 27 [style=solid label="\"char\""]
  593 -> 28 [style=solid label="\"char8_t\""]
  593 -> 29 [style=solid label="\"char16_t\""]
  593 -> 30 [style=solid label="\"char32_t\""]
  593 -> 31 [style=solid label="\"wchar_t\""]
  593 -> 32 [style=solid label="\"bool\""]
  593 -> 33 [style=solid label="\"short\""]
  593 -> 34 [style=solid label="\"int\""]
  593 -> 35 [style=solid label="\"long\""]
  593 -> 36 [style=solid label="\"signed\""]
  593 -> 37 [style=solid label="\"unsigned\""]
  593 -> 38 [style=solid label="\"float\""]
  593 -> 39 [style=solid label="\"double\""]
  593 -> 40 [style=solid label="\"void\""]
  593 -> 118 [style=solid label="STRING_LITERAL"]
  593 -> 266 [style=solid label="\"sizeof\""]
  593 -> 267 [style=solid label="\"alignof\""]
  593 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  593 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  593 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  593 -> 272 [style=dashed label="SCOPE-opt"]
  593 -> 273 [style=dashed label="additive-expression"]
  593 -> 276 [style=dashed label="await-expression"]
  593 -> 277 [style=dashed label="boolean-literal"]
  593 -> 278 [style=dashed label="cast-expression"]
  593 -> 279 [style=dashed label="character-literal"]
  593 -> 55 [style=dashed label="class-name"]
  593 -> 837 [style=dashed label="compare-expression"]
  593 -> 282 [style=dashed label="conversion-function-id"]
  593 -> 63 [style=dashed label="decltype-specifier"]
  593 -> 283 [style=dashed label="delete-expression"]
  593 -> 71 [style=dashed label="enum-name"]
  593 -> 287 [style=dashed label="floating-point-literal"]
  593 -> 288 [style=dashed label="fold-expression"]
  593 -> 289 [style=dashed label="id-expression"]
  593 -> 291 [style=dashed label="integer-literal"]
  593 -> 292 [style=dashed label="lambda-expression"]
  593 -> 293 [style=dashed label="lambda-introducer"]
  593 -> 294 [style=dashed label="literal"]
  593 -> 295 [style=dashed label="literal-operator-id"]
  593 -> 298 [style=dashed label="multiplicative-expression"]
  593 -> 85 [style=dashed label="namespace-alias"]
  593 -> 88 [style=dashed label="namespace-name"]
  593 -> 299 [style=dashed label="nested-name-specifier"]
  593 -> 90 [style=dashed label="nested-name-specifier-opt"]
  593 -> 300 [style=dashed label="new-expression"]
  593 -> 301 [style=dashed label="noexcept-expression"]
  593 -> 302 [style=dashed label="operator-function-id"]
  593 -> 94 [style=dashed label="placeholder-type-specifier"]
  593 -> 303 [style=dashed label="pm-expression"]
  593 -> 304 [style=dashed label="pointer-literal"]
  593 -> 305 [style=dashed label="postfix-expression"]
  593 -> 306 [style=dashed label="primary-expression"]
  593 -> 307 [style=dashed label="qualified-id"]
  593 -> 309 [style=dashed label="requires-expression"]
  593 -> 310 [style=dashed label="shift-expression"]
  593 -> 311 [style=dashed label="simple-template-id"]
  593 -> 312 [style=dashed label="simple-type-specifier"]
  593 -> 313 [style=dashed label="string-literal"]
  593 -> 314 [style=dashed label="template-id"]
  593 -> 102 [style=dashed label="template-name"]
  593 -> 104 [style=dashed label="type-constraint"]
  593 -> 105 [style=dashed label="type-constraint-opt"]
  593 -> 106 [style=dashed label="type-name"]
  593 -> 108 [style=dashed label="typedef-name"]
  593 -> 316 [style=dashed label="typename-specifier"]
  593 -> 317 [style=dashed label="unary-expression"]
  593 -> 318 [style=dashed label="unary-operator"]
  593 -> 319 [style=dashed label="unqualified-id"]
  593 -> 320 [style=dashed label="user-defined-character-literal"]
  593 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  593 -> 322 [style=dashed label="user-defined-integer-literal"]
  593 -> 323 [style=dashed label="user-defined-literal"]
  593 -> 324 [style=dashed label="user-defined-string-literal"]
  593 -> "593R19" [style=solid]
 "593R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  593 -> "593R469d" [label="[IDENTIFIER]", style=solid]
 "593R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  593 -> "593R722d" [label="[\"decltype\"]", style=solid]
 "593R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  593 -> "593R722" [label="[\"auto\"]", style=solid]
 "593R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  594 [label="State 594\n\l646 shift-expression: shift-expression \"<<\" • additive-expression\l"]
  594 -> 238 [style=solid label="IDENTIFIER"]
  594 -> 239 [style=solid label="\"noexcept\""]
  594 -> 240 [style=solid label="\"!\""]
  594 -> 241 [style=solid label="\"::\""]
  594 -> 242 [style=solid label="\"this\""]
  594 -> 8 [style=solid label="\"typename\""]
  594 -> 243 [style=solid label="\"+\""]
  594 -> 244 [style=solid label="\"-\""]
  594 -> 245 [style=solid label="\"(\""]
  594 -> 246 [style=solid label="\"&\""]
  594 -> 247 [style=solid label="\"[\""]
  594 -> 248 [style=solid label="\"co_await\""]
  594 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  594 -> 250 [style=solid label="CHARACTER_LITERAL"]
  594 -> 251 [style=solid label="\"operator\""]
  594 -> 21 [style=solid label="\"decltype\""]
  594 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  594 -> 253 [style=solid label="\"*\""]
  594 -> 254 [style=solid label="INTEGER_LITERAL"]
  594 -> 255 [style=solid label="\"requires\""]
  594 -> 256 [style=solid label="\"~\""]
  594 -> 257 [style=solid label="\"++\""]
  594 -> 258 [style=solid label="\"--\""]
  594 -> 259 [style=solid label="POINTER_LITERAL"]
  594 -> 260 [style=solid label="\"dynamic_cast\""]
  594 -> 261 [style=solid label="\"static_cast\""]
  594 -> 262 [style=solid label="\"reinterpret_cast\""]
  594 -> 263 [style=solid label="\"const_cast\""]
  594 -> 264 [style=solid label="\"typeid\""]
  594 -> 27 [style=solid label="\"char\""]
  594 -> 28 [style=solid label="\"char8_t\""]
  594 -> 29 [style=solid label="\"char16_t\""]
  594 -> 30 [style=solid label="\"char32_t\""]
  594 -> 31 [style=solid label="\"wchar_t\""]
  594 -> 32 [style=solid label="\"bool\""]
  594 -> 33 [style=solid label="\"short\""]
  594 -> 34 [style=solid label="\"int\""]
  594 -> 35 [style=solid label="\"long\""]
  594 -> 36 [style=solid label="\"signed\""]
  594 -> 37 [style=solid label="\"unsigned\""]
  594 -> 38 [style=solid label="\"float\""]
  594 -> 39 [style=solid label="\"double\""]
  594 -> 40 [style=solid label="\"void\""]
  594 -> 118 [style=solid label="STRING_LITERAL"]
  594 -> 266 [style=solid label="\"sizeof\""]
  594 -> 267 [style=solid label="\"alignof\""]
  594 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  594 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  594 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  594 -> 272 [style=dashed label="SCOPE-opt"]
  594 -> 838 [style=dashed label="additive-expression"]
  594 -> 276 [style=dashed label="await-expression"]
  594 -> 277 [style=dashed label="boolean-literal"]
  594 -> 278 [style=dashed label="cast-expression"]
  594 -> 279 [style=dashed label="character-literal"]
  594 -> 55 [style=dashed label="class-name"]
  594 -> 282 [style=dashed label="conversion-function-id"]
  594 -> 63 [style=dashed label="decltype-specifier"]
  594 -> 283 [style=dashed label="delete-expression"]
  594 -> 71 [style=dashed label="enum-name"]
  594 -> 287 [style=dashed label="floating-point-literal"]
  594 -> 288 [style=dashed label="fold-expression"]
  594 -> 289 [style=dashed label="id-expression"]
  594 -> 291 [style=dashed label="integer-literal"]
  594 -> 292 [style=dashed label="lambda-expression"]
  594 -> 293 [style=dashed label="lambda-introducer"]
  594 -> 294 [style=dashed label="literal"]
  594 -> 295 [style=dashed label="literal-operator-id"]
  594 -> 298 [style=dashed label="multiplicative-expression"]
  594 -> 85 [style=dashed label="namespace-alias"]
  594 -> 88 [style=dashed label="namespace-name"]
  594 -> 299 [style=dashed label="nested-name-specifier"]
  594 -> 90 [style=dashed label="nested-name-specifier-opt"]
  594 -> 300 [style=dashed label="new-expression"]
  594 -> 301 [style=dashed label="noexcept-expression"]
  594 -> 302 [style=dashed label="operator-function-id"]
  594 -> 94 [style=dashed label="placeholder-type-specifier"]
  594 -> 303 [style=dashed label="pm-expression"]
  594 -> 304 [style=dashed label="pointer-literal"]
  594 -> 305 [style=dashed label="postfix-expression"]
  594 -> 306 [style=dashed label="primary-expression"]
  594 -> 307 [style=dashed label="qualified-id"]
  594 -> 309 [style=dashed label="requires-expression"]
  594 -> 311 [style=dashed label="simple-template-id"]
  594 -> 312 [style=dashed label="simple-type-specifier"]
  594 -> 313 [style=dashed label="string-literal"]
  594 -> 314 [style=dashed label="template-id"]
  594 -> 102 [style=dashed label="template-name"]
  594 -> 104 [style=dashed label="type-constraint"]
  594 -> 105 [style=dashed label="type-constraint-opt"]
  594 -> 106 [style=dashed label="type-name"]
  594 -> 108 [style=dashed label="typedef-name"]
  594 -> 316 [style=dashed label="typename-specifier"]
  594 -> 317 [style=dashed label="unary-expression"]
  594 -> 318 [style=dashed label="unary-operator"]
  594 -> 319 [style=dashed label="unqualified-id"]
  594 -> 320 [style=dashed label="user-defined-character-literal"]
  594 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  594 -> 322 [style=dashed label="user-defined-integer-literal"]
  594 -> 323 [style=dashed label="user-defined-literal"]
  594 -> 324 [style=dashed label="user-defined-string-literal"]
  594 -> "594R19" [style=solid]
 "594R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  594 -> "594R469d" [label="[IDENTIFIER]", style=solid]
 "594R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  594 -> "594R722d" [label="[\"decltype\"]", style=solid]
 "594R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  594 -> "594R722" [label="[\"auto\"]", style=solid]
 "594R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  595 [label="State 595\n\l647 shift-expression: shift-expression \">>\" • additive-expression\l"]
  595 -> 238 [style=solid label="IDENTIFIER"]
  595 -> 239 [style=solid label="\"noexcept\""]
  595 -> 240 [style=solid label="\"!\""]
  595 -> 241 [style=solid label="\"::\""]
  595 -> 242 [style=solid label="\"this\""]
  595 -> 8 [style=solid label="\"typename\""]
  595 -> 243 [style=solid label="\"+\""]
  595 -> 244 [style=solid label="\"-\""]
  595 -> 245 [style=solid label="\"(\""]
  595 -> 246 [style=solid label="\"&\""]
  595 -> 247 [style=solid label="\"[\""]
  595 -> 248 [style=solid label="\"co_await\""]
  595 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  595 -> 250 [style=solid label="CHARACTER_LITERAL"]
  595 -> 251 [style=solid label="\"operator\""]
  595 -> 21 [style=solid label="\"decltype\""]
  595 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  595 -> 253 [style=solid label="\"*\""]
  595 -> 254 [style=solid label="INTEGER_LITERAL"]
  595 -> 255 [style=solid label="\"requires\""]
  595 -> 256 [style=solid label="\"~\""]
  595 -> 257 [style=solid label="\"++\""]
  595 -> 258 [style=solid label="\"--\""]
  595 -> 259 [style=solid label="POINTER_LITERAL"]
  595 -> 260 [style=solid label="\"dynamic_cast\""]
  595 -> 261 [style=solid label="\"static_cast\""]
  595 -> 262 [style=solid label="\"reinterpret_cast\""]
  595 -> 263 [style=solid label="\"const_cast\""]
  595 -> 264 [style=solid label="\"typeid\""]
  595 -> 27 [style=solid label="\"char\""]
  595 -> 28 [style=solid label="\"char8_t\""]
  595 -> 29 [style=solid label="\"char16_t\""]
  595 -> 30 [style=solid label="\"char32_t\""]
  595 -> 31 [style=solid label="\"wchar_t\""]
  595 -> 32 [style=solid label="\"bool\""]
  595 -> 33 [style=solid label="\"short\""]
  595 -> 34 [style=solid label="\"int\""]
  595 -> 35 [style=solid label="\"long\""]
  595 -> 36 [style=solid label="\"signed\""]
  595 -> 37 [style=solid label="\"unsigned\""]
  595 -> 38 [style=solid label="\"float\""]
  595 -> 39 [style=solid label="\"double\""]
  595 -> 40 [style=solid label="\"void\""]
  595 -> 118 [style=solid label="STRING_LITERAL"]
  595 -> 266 [style=solid label="\"sizeof\""]
  595 -> 267 [style=solid label="\"alignof\""]
  595 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  595 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  595 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  595 -> 272 [style=dashed label="SCOPE-opt"]
  595 -> 839 [style=dashed label="additive-expression"]
  595 -> 276 [style=dashed label="await-expression"]
  595 -> 277 [style=dashed label="boolean-literal"]
  595 -> 278 [style=dashed label="cast-expression"]
  595 -> 279 [style=dashed label="character-literal"]
  595 -> 55 [style=dashed label="class-name"]
  595 -> 282 [style=dashed label="conversion-function-id"]
  595 -> 63 [style=dashed label="decltype-specifier"]
  595 -> 283 [style=dashed label="delete-expression"]
  595 -> 71 [style=dashed label="enum-name"]
  595 -> 287 [style=dashed label="floating-point-literal"]
  595 -> 288 [style=dashed label="fold-expression"]
  595 -> 289 [style=dashed label="id-expression"]
  595 -> 291 [style=dashed label="integer-literal"]
  595 -> 292 [style=dashed label="lambda-expression"]
  595 -> 293 [style=dashed label="lambda-introducer"]
  595 -> 294 [style=dashed label="literal"]
  595 -> 295 [style=dashed label="literal-operator-id"]
  595 -> 298 [style=dashed label="multiplicative-expression"]
  595 -> 85 [style=dashed label="namespace-alias"]
  595 -> 88 [style=dashed label="namespace-name"]
  595 -> 299 [style=dashed label="nested-name-specifier"]
  595 -> 90 [style=dashed label="nested-name-specifier-opt"]
  595 -> 300 [style=dashed label="new-expression"]
  595 -> 301 [style=dashed label="noexcept-expression"]
  595 -> 302 [style=dashed label="operator-function-id"]
  595 -> 94 [style=dashed label="placeholder-type-specifier"]
  595 -> 303 [style=dashed label="pm-expression"]
  595 -> 304 [style=dashed label="pointer-literal"]
  595 -> 305 [style=dashed label="postfix-expression"]
  595 -> 306 [style=dashed label="primary-expression"]
  595 -> 307 [style=dashed label="qualified-id"]
  595 -> 309 [style=dashed label="requires-expression"]
  595 -> 311 [style=dashed label="simple-template-id"]
  595 -> 312 [style=dashed label="simple-type-specifier"]
  595 -> 313 [style=dashed label="string-literal"]
  595 -> 314 [style=dashed label="template-id"]
  595 -> 102 [style=dashed label="template-name"]
  595 -> 104 [style=dashed label="type-constraint"]
  595 -> 105 [style=dashed label="type-constraint-opt"]
  595 -> 106 [style=dashed label="type-name"]
  595 -> 108 [style=dashed label="typedef-name"]
  595 -> 316 [style=dashed label="typename-specifier"]
  595 -> 317 [style=dashed label="unary-expression"]
  595 -> 318 [style=dashed label="unary-operator"]
  595 -> 319 [style=dashed label="unqualified-id"]
  595 -> 320 [style=dashed label="user-defined-character-literal"]
  595 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  595 -> 322 [style=dashed label="user-defined-integer-literal"]
  595 -> 323 [style=dashed label="user-defined-literal"]
  595 -> 324 [style=dashed label="user-defined-string-literal"]
  595 -> "595R19" [style=solid]
 "595R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  595 -> "595R469d" [label="[IDENTIFIER]", style=solid]
 "595R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  595 -> "595R722d" [label="[\"decltype\"]", style=solid]
 "595R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  595 -> "595R722" [label="[\"auto\"]", style=solid]
 "595R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  596 [label="State 596\n\l574 postfix-expression: simple-type-specifier \"(\" • expression-list-opt \")\"\l"]
  596 -> 238 [style=solid label="IDENTIFIER"]
  596 -> 239 [style=solid label="\"noexcept\""]
  596 -> 240 [style=solid label="\"!\""]
  596 -> 241 [style=solid label="\"::\""]
  596 -> 242 [style=solid label="\"this\""]
  596 -> 8 [style=solid label="\"typename\""]
  596 -> 243 [style=solid label="\"+\""]
  596 -> 244 [style=solid label="\"-\""]
  596 -> 245 [style=solid label="\"(\""]
  596 -> 246 [style=solid label="\"&\""]
  596 -> 247 [style=solid label="\"[\""]
  596 -> 248 [style=solid label="\"co_await\""]
  596 -> 398 [style=solid label="\"{\""]
  596 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  596 -> 250 [style=solid label="CHARACTER_LITERAL"]
  596 -> 251 [style=solid label="\"operator\""]
  596 -> 21 [style=solid label="\"decltype\""]
  596 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  596 -> 253 [style=solid label="\"*\""]
  596 -> 254 [style=solid label="INTEGER_LITERAL"]
  596 -> 255 [style=solid label="\"requires\""]
  596 -> 256 [style=solid label="\"~\""]
  596 -> 257 [style=solid label="\"++\""]
  596 -> 258 [style=solid label="\"--\""]
  596 -> 259 [style=solid label="POINTER_LITERAL"]
  596 -> 260 [style=solid label="\"dynamic_cast\""]
  596 -> 261 [style=solid label="\"static_cast\""]
  596 -> 262 [style=solid label="\"reinterpret_cast\""]
  596 -> 263 [style=solid label="\"const_cast\""]
  596 -> 264 [style=solid label="\"typeid\""]
  596 -> 27 [style=solid label="\"char\""]
  596 -> 28 [style=solid label="\"char8_t\""]
  596 -> 29 [style=solid label="\"char16_t\""]
  596 -> 30 [style=solid label="\"char32_t\""]
  596 -> 31 [style=solid label="\"wchar_t\""]
  596 -> 32 [style=solid label="\"bool\""]
  596 -> 33 [style=solid label="\"short\""]
  596 -> 34 [style=solid label="\"int\""]
  596 -> 35 [style=solid label="\"long\""]
  596 -> 36 [style=solid label="\"signed\""]
  596 -> 37 [style=solid label="\"unsigned\""]
  596 -> 38 [style=solid label="\"float\""]
  596 -> 39 [style=solid label="\"double\""]
  596 -> 40 [style=solid label="\"void\""]
  596 -> 118 [style=solid label="STRING_LITERAL"]
  596 -> 265 [style=solid label="\"throw\""]
  596 -> 266 [style=solid label="\"sizeof\""]
  596 -> 267 [style=solid label="\"alignof\""]
  596 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  596 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  596 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  596 -> 271 [style=solid label="\"co_yield\""]
  596 -> 272 [style=dashed label="SCOPE-opt"]
  596 -> 273 [style=dashed label="additive-expression"]
  596 -> 274 [style=dashed label="and-expression"]
  596 -> 662 [style=dashed label="assignment-expression"]
  596 -> 276 [style=dashed label="await-expression"]
  596 -> 277 [style=dashed label="boolean-literal"]
  596 -> 663 [style=dashed label="braced-init-list"]
  596 -> 278 [style=dashed label="cast-expression"]
  596 -> 279 [style=dashed label="character-literal"]
  596 -> 55 [style=dashed label="class-name"]
  596 -> 280 [style=dashed label="compare-expression"]
  596 -> 281 [style=dashed label="conditional-expression"]
  596 -> 282 [style=dashed label="conversion-function-id"]
  596 -> 63 [style=dashed label="decltype-specifier"]
  596 -> 283 [style=dashed label="delete-expression"]
  596 -> 71 [style=dashed label="enum-name"]
  596 -> 284 [style=dashed label="equality-expression"]
  596 -> 285 [style=dashed label="exclusive-or-expression"]
  596 -> 829 [style=dashed label="expression-list"]
  596 -> 840 [style=dashed label="expression-list-opt"]
  596 -> 287 [style=dashed label="floating-point-literal"]
  596 -> 288 [style=dashed label="fold-expression"]
  596 -> 289 [style=dashed label="id-expression"]
  596 -> 290 [style=dashed label="inclusive-or-expression"]
  596 -> 666 [style=dashed label="initializer-clause"]
  596 -> 667 [style=dashed label="initializer-list"]
  596 -> 291 [style=dashed label="integer-literal"]
  596 -> 292 [style=dashed label="lambda-expression"]
  596 -> 293 [style=dashed label="lambda-introducer"]
  596 -> 294 [style=dashed label="literal"]
  596 -> 295 [style=dashed label="literal-operator-id"]
  596 -> 296 [style=dashed label="logical-and-expression"]
  596 -> 297 [style=dashed label="logical-or-expression"]
  596 -> 298 [style=dashed label="multiplicative-expression"]
  596 -> 85 [style=dashed label="namespace-alias"]
  596 -> 88 [style=dashed label="namespace-name"]
  596 -> 299 [style=dashed label="nested-name-specifier"]
  596 -> 90 [style=dashed label="nested-name-specifier-opt"]
  596 -> 300 [style=dashed label="new-expression"]
  596 -> 301 [style=dashed label="noexcept-expression"]
  596 -> 302 [style=dashed label="operator-function-id"]
  596 -> 94 [style=dashed label="placeholder-type-specifier"]
  596 -> 303 [style=dashed label="pm-expression"]
  596 -> 304 [style=dashed label="pointer-literal"]
  596 -> 305 [style=dashed label="postfix-expression"]
  596 -> 306 [style=dashed label="primary-expression"]
  596 -> 307 [style=dashed label="qualified-id"]
  596 -> 308 [style=dashed label="relational-expression"]
  596 -> 309 [style=dashed label="requires-expression"]
  596 -> 310 [style=dashed label="shift-expression"]
  596 -> 311 [style=dashed label="simple-template-id"]
  596 -> 312 [style=dashed label="simple-type-specifier"]
  596 -> 313 [style=dashed label="string-literal"]
  596 -> 314 [style=dashed label="template-id"]
  596 -> 102 [style=dashed label="template-name"]
  596 -> 315 [style=dashed label="throw-expression"]
  596 -> 104 [style=dashed label="type-constraint"]
  596 -> 105 [style=dashed label="type-constraint-opt"]
  596 -> 106 [style=dashed label="type-name"]
  596 -> 108 [style=dashed label="typedef-name"]
  596 -> 316 [style=dashed label="typename-specifier"]
  596 -> 317 [style=dashed label="unary-expression"]
  596 -> 318 [style=dashed label="unary-operator"]
  596 -> 319 [style=dashed label="unqualified-id"]
  596 -> 320 [style=dashed label="user-defined-character-literal"]
  596 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  596 -> 322 [style=dashed label="user-defined-integer-literal"]
  596 -> 323 [style=dashed label="user-defined-literal"]
  596 -> 324 [style=dashed label="user-defined-string-literal"]
  596 -> 325 [style=dashed label="yield-expression"]
  596 -> "596R19" [style=solid]
 "596R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  596 -> "596R282" [label="[\")\"]", style=solid]
 "596R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  596 -> "596R469d" [label="[IDENTIFIER]", style=solid]
 "596R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  596 -> "596R722d" [label="[\"decltype\"]", style=solid]
 "596R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  596 -> "596R722" [label="[\"auto\"]", style=solid]
 "596R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  597 [label="State 597\n\l576 postfix-expression: simple-type-specifier braced-init-list •\l"]
  597 -> "597R576" [style=solid]
 "597R576" [label="R576", fillcolor=3, shape=diamond, style=filled]
  598 [label="State 598\n\l747 ud-suffix: IDENTIFIER •\l"]
  598 -> "598R747" [style=solid]
 "598R747" [label="R747", fillcolor=3, shape=diamond, style=filled]
  599 [label="State 599\n\l781 user-defined-string-literal: string-literal ud-suffix •\l"]
  599 -> "599R781" [style=solid]
 "599R781" [label="R781", fillcolor=3, shape=diamond, style=filled]
  600 [label="State 600\n\l575 postfix-expression: typename-specifier \"(\" • expression-list-opt \")\"\l"]
  600 -> 238 [style=solid label="IDENTIFIER"]
  600 -> 239 [style=solid label="\"noexcept\""]
  600 -> 240 [style=solid label="\"!\""]
  600 -> 241 [style=solid label="\"::\""]
  600 -> 242 [style=solid label="\"this\""]
  600 -> 8 [style=solid label="\"typename\""]
  600 -> 243 [style=solid label="\"+\""]
  600 -> 244 [style=solid label="\"-\""]
  600 -> 245 [style=solid label="\"(\""]
  600 -> 246 [style=solid label="\"&\""]
  600 -> 247 [style=solid label="\"[\""]
  600 -> 248 [style=solid label="\"co_await\""]
  600 -> 398 [style=solid label="\"{\""]
  600 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  600 -> 250 [style=solid label="CHARACTER_LITERAL"]
  600 -> 251 [style=solid label="\"operator\""]
  600 -> 21 [style=solid label="\"decltype\""]
  600 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  600 -> 253 [style=solid label="\"*\""]
  600 -> 254 [style=solid label="INTEGER_LITERAL"]
  600 -> 255 [style=solid label="\"requires\""]
  600 -> 256 [style=solid label="\"~\""]
  600 -> 257 [style=solid label="\"++\""]
  600 -> 258 [style=solid label="\"--\""]
  600 -> 259 [style=solid label="POINTER_LITERAL"]
  600 -> 260 [style=solid label="\"dynamic_cast\""]
  600 -> 261 [style=solid label="\"static_cast\""]
  600 -> 262 [style=solid label="\"reinterpret_cast\""]
  600 -> 263 [style=solid label="\"const_cast\""]
  600 -> 264 [style=solid label="\"typeid\""]
  600 -> 27 [style=solid label="\"char\""]
  600 -> 28 [style=solid label="\"char8_t\""]
  600 -> 29 [style=solid label="\"char16_t\""]
  600 -> 30 [style=solid label="\"char32_t\""]
  600 -> 31 [style=solid label="\"wchar_t\""]
  600 -> 32 [style=solid label="\"bool\""]
  600 -> 33 [style=solid label="\"short\""]
  600 -> 34 [style=solid label="\"int\""]
  600 -> 35 [style=solid label="\"long\""]
  600 -> 36 [style=solid label="\"signed\""]
  600 -> 37 [style=solid label="\"unsigned\""]
  600 -> 38 [style=solid label="\"float\""]
  600 -> 39 [style=solid label="\"double\""]
  600 -> 40 [style=solid label="\"void\""]
  600 -> 118 [style=solid label="STRING_LITERAL"]
  600 -> 265 [style=solid label="\"throw\""]
  600 -> 266 [style=solid label="\"sizeof\""]
  600 -> 267 [style=solid label="\"alignof\""]
  600 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  600 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  600 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  600 -> 271 [style=solid label="\"co_yield\""]
  600 -> 272 [style=dashed label="SCOPE-opt"]
  600 -> 273 [style=dashed label="additive-expression"]
  600 -> 274 [style=dashed label="and-expression"]
  600 -> 662 [style=dashed label="assignment-expression"]
  600 -> 276 [style=dashed label="await-expression"]
  600 -> 277 [style=dashed label="boolean-literal"]
  600 -> 663 [style=dashed label="braced-init-list"]
  600 -> 278 [style=dashed label="cast-expression"]
  600 -> 279 [style=dashed label="character-literal"]
  600 -> 55 [style=dashed label="class-name"]
  600 -> 280 [style=dashed label="compare-expression"]
  600 -> 281 [style=dashed label="conditional-expression"]
  600 -> 282 [style=dashed label="conversion-function-id"]
  600 -> 63 [style=dashed label="decltype-specifier"]
  600 -> 283 [style=dashed label="delete-expression"]
  600 -> 71 [style=dashed label="enum-name"]
  600 -> 284 [style=dashed label="equality-expression"]
  600 -> 285 [style=dashed label="exclusive-or-expression"]
  600 -> 829 [style=dashed label="expression-list"]
  600 -> 841 [style=dashed label="expression-list-opt"]
  600 -> 287 [style=dashed label="floating-point-literal"]
  600 -> 288 [style=dashed label="fold-expression"]
  600 -> 289 [style=dashed label="id-expression"]
  600 -> 290 [style=dashed label="inclusive-or-expression"]
  600 -> 666 [style=dashed label="initializer-clause"]
  600 -> 667 [style=dashed label="initializer-list"]
  600 -> 291 [style=dashed label="integer-literal"]
  600 -> 292 [style=dashed label="lambda-expression"]
  600 -> 293 [style=dashed label="lambda-introducer"]
  600 -> 294 [style=dashed label="literal"]
  600 -> 295 [style=dashed label="literal-operator-id"]
  600 -> 296 [style=dashed label="logical-and-expression"]
  600 -> 297 [style=dashed label="logical-or-expression"]
  600 -> 298 [style=dashed label="multiplicative-expression"]
  600 -> 85 [style=dashed label="namespace-alias"]
  600 -> 88 [style=dashed label="namespace-name"]
  600 -> 299 [style=dashed label="nested-name-specifier"]
  600 -> 90 [style=dashed label="nested-name-specifier-opt"]
  600 -> 300 [style=dashed label="new-expression"]
  600 -> 301 [style=dashed label="noexcept-expression"]
  600 -> 302 [style=dashed label="operator-function-id"]
  600 -> 94 [style=dashed label="placeholder-type-specifier"]
  600 -> 303 [style=dashed label="pm-expression"]
  600 -> 304 [style=dashed label="pointer-literal"]
  600 -> 305 [style=dashed label="postfix-expression"]
  600 -> 306 [style=dashed label="primary-expression"]
  600 -> 307 [style=dashed label="qualified-id"]
  600 -> 308 [style=dashed label="relational-expression"]
  600 -> 309 [style=dashed label="requires-expression"]
  600 -> 310 [style=dashed label="shift-expression"]
  600 -> 311 [style=dashed label="simple-template-id"]
  600 -> 312 [style=dashed label="simple-type-specifier"]
  600 -> 313 [style=dashed label="string-literal"]
  600 -> 314 [style=dashed label="template-id"]
  600 -> 102 [style=dashed label="template-name"]
  600 -> 315 [style=dashed label="throw-expression"]
  600 -> 104 [style=dashed label="type-constraint"]
  600 -> 105 [style=dashed label="type-constraint-opt"]
  600 -> 106 [style=dashed label="type-name"]
  600 -> 108 [style=dashed label="typedef-name"]
  600 -> 316 [style=dashed label="typename-specifier"]
  600 -> 317 [style=dashed label="unary-expression"]
  600 -> 318 [style=dashed label="unary-operator"]
  600 -> 319 [style=dashed label="unqualified-id"]
  600 -> 320 [style=dashed label="user-defined-character-literal"]
  600 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  600 -> 322 [style=dashed label="user-defined-integer-literal"]
  600 -> 323 [style=dashed label="user-defined-literal"]
  600 -> 324 [style=dashed label="user-defined-string-literal"]
  600 -> 325 [style=dashed label="yield-expression"]
  600 -> "600R19" [style=solid]
 "600R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  600 -> "600R282" [label="[\")\"]", style=solid]
 "600R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  600 -> "600R469d" [label="[IDENTIFIER]", style=solid]
 "600R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  600 -> "600R722d" [label="[\"decltype\"]", style=solid]
 "600R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  600 -> "600R722" [label="[\"auto\"]", style=solid]
 "600R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  601 [label="State 601\n\l577 postfix-expression: typename-specifier braced-init-list •\l"]
  601 -> "601R577" [style=solid]
 "601R577" [label="R577", fillcolor=3, shape=diamond, style=filled]
  602 [label="State 602\n\l749 unary-expression: unary-operator cast-expression •\l"]
  602 -> "602R749" [style=solid]
 "602R749" [label="R749", fillcolor=3, shape=diamond, style=filled]
  603 [label="State 603\n\l268 explicit-specifier: \"explicit\" \"(\" constant-expression \")\" •\l"]
  603 -> "603R268" [style=solid]
 "603R268" [label="R268", fillcolor=3, shape=diamond, style=filled]
  604 [label="State 604\n\l447 module-partition: \":\" module-name-qualifier-opt IDENTIFIER •\l"]
  604 -> "604R447" [style=solid]
 "604R447" [label="R447", fillcolor=3, shape=diamond, style=filled]
  605 [label="State 605\n\l441 module-import-declaration: \"import\" header-name attribute-specifier-seq-opt \";\" •\l"]
  605 -> "605R441" [style=solid]
 "605R441" [label="R441", fillcolor=3, shape=diamond, style=filled]
  606 [label="State 606\n\l439 module-import-declaration: \"import\" module-name attribute-specifier-seq-opt \";\" •\l"]
  606 -> "606R439" [style=solid]
 "606R439" [label="R439", fillcolor=3, shape=diamond, style=filled]
  607 [label="State 607\n\l444 module-name-qualifier: module-name-qualifier IDENTIFIER \".\" •\l"]
  607 -> "607R444" [style=solid]
 "607R444" [label="R444", fillcolor=3, shape=diamond, style=filled]
  608 [label="State 608\n\l440 module-import-declaration: \"import\" module-partition attribute-specifier-seq-opt \";\" •\l"]
  608 -> "608R440" [style=solid]
 "608R440" [label="R440", fillcolor=3, shape=diamond, style=filled]
  609 [label="State 609\n\l613 qualified-namespace-specifier: nested-name-specifier-opt • namespace-name\l"]
  609 -> 842 [style=solid label="IDENTIFIER"]
  609 -> 85 [style=dashed label="namespace-alias"]
  609 -> 843 [style=dashed label="namespace-name"]
  610 [label="State 610\n\l456 namespace-alias-definition: \"namespace\" IDENTIFIER \"=\" qualified-namespace-specifier • \";\"\l"]
  610 -> 844 [style=solid label="\";\""]
  611 [label="State 611\n\l 14 INLINE-opt: \"inline\" •\l"]
  611 -> "611R14" [style=solid]
 "611R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  612 [label="State 612\n\l237 enclosing-namespace-specifier: enclosing-namespace-specifier \"::\" INLINE-opt • IDENTIFIER\l471 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" INLINE-opt • IDENTIFIER \"{\" namespace-body \"}\"\l"]
  612 -> 845 [style=solid label="IDENTIFIER"]
  613 [label="State 613\n\l689 static_assert-declaration: \"static_assert\" \"(\" constant-expression \",\" • string-literal \")\" \";\"\l"]
  613 -> 118 [style=solid label="STRING_LITERAL"]
  613 -> 846 [style=dashed label="string-literal"]
  614 [label="State 614\n\l688 static_assert-declaration: \"static_assert\" \"(\" constant-expression \")\" • \";\"\l"]
  614 -> 847 [style=solid label="\";\""]
  615 [label="State 615\n\l454 named-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt IDENTIFIER • \"{\" namespace-body \"}\"\l"]
  615 -> 848 [style=solid label="\"{\""]
  616 [label="State 616\n\l766 unnamed-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt \"{\" • namespace-body \"}\"\l"]
  616 -> 1 [style=solid label="\"constexpr\""]
  616 -> 2 [style=solid label="\"export\""]
  616 -> 3 [style=solid label="\"extern\""]
  616 -> 4 [style=solid label="IDENTIFIER"]
  616 -> 5 [style=solid label="\"inline\""]
  616 -> 6 [style=solid label="\"::\""]
  616 -> 7 [style=solid label="\"template\""]
  616 -> 8 [style=solid label="\"typename\""]
  616 -> 9 [style=solid label="\"virtual\""]
  616 -> 10 [style=solid label="\"using\""]
  616 -> 11 [style=solid label="\";\""]
  616 -> 12 [style=solid label="\"class\""]
  616 -> 13 [style=solid label="\"struct\""]
  616 -> 14 [style=solid label="\"union\""]
  616 -> 15 [style=solid label="\"const\""]
  616 -> 16 [style=solid label="\"volatile\""]
  616 -> 17 [style=solid label="\"friend\""]
  616 -> 18 [style=solid label="\"typedef\""]
  616 -> 19 [style=solid label="\"consteval\""]
  616 -> 20 [style=solid label="\"constinit\""]
  616 -> 21 [style=solid label="\"decltype\""]
  616 -> 22 [style=solid label="\"enum\""]
  616 -> 23 [style=solid label="\"explicit\""]
  616 -> 25 [style=solid label="\"import\""]
  616 -> 26 [style=solid label="\"namespace\""]
  616 -> 27 [style=solid label="\"char\""]
  616 -> 28 [style=solid label="\"char8_t\""]
  616 -> 29 [style=solid label="\"char16_t\""]
  616 -> 30 [style=solid label="\"char32_t\""]
  616 -> 31 [style=solid label="\"wchar_t\""]
  616 -> 32 [style=solid label="\"bool\""]
  616 -> 33 [style=solid label="\"short\""]
  616 -> 34 [style=solid label="\"int\""]
  616 -> 35 [style=solid label="\"long\""]
  616 -> 36 [style=solid label="\"signed\""]
  616 -> 37 [style=solid label="\"unsigned\""]
  616 -> 38 [style=solid label="\"float\""]
  616 -> 39 [style=solid label="\"double\""]
  616 -> 40 [style=solid label="\"void\""]
  616 -> 41 [style=solid label="\"static_assert\""]
  616 -> 42 [style=solid label="\"static\""]
  616 -> 43 [style=solid label="\"thread_local\""]
  616 -> 44 [style=solid label="\"mutable\""]
  616 -> 45 [style=dashed label="EXTERN-opt"]
  616 -> 46 [style=dashed label="INLINE-opt"]
  616 -> 47 [style=dashed label="alias-declaration"]
  616 -> 48 [style=dashed label="asm-declaration"]
  616 -> 49 [style=dashed label="attribute-declaration"]
  616 -> 50 [style=dashed label="attribute-specifier-seq"]
  616 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  616 -> 52 [style=dashed label="block-declaration"]
  616 -> 53 [style=dashed label="class-head"]
  616 -> 54 [style=dashed label="class-key"]
  616 -> 55 [style=dashed label="class-name"]
  616 -> 56 [style=dashed label="class-specifier"]
  616 -> 57 [style=dashed label="cv-qualifier"]
  616 -> 58 [style=dashed label="decl-specifier"]
  616 -> 59 [style=dashed label="decl-specifier-seq"]
  616 -> 60 [style=dashed label="declaration"]
  616 -> 61 [style=dashed label="declaration-seq"]
  616 -> 849 [style=dashed label="declaration-seq-opt"]
  616 -> 63 [style=dashed label="decltype-specifier"]
  616 -> 64 [style=dashed label="deduction-guide"]
  616 -> 65 [style=dashed label="defining-type-specifier"]
  616 -> 66 [style=dashed label="elaborated-enum-specifier"]
  616 -> 67 [style=dashed label="elaborated-type-specifier"]
  616 -> 68 [style=dashed label="empty-declaration"]
  616 -> 69 [style=dashed label="enum-head"]
  616 -> 70 [style=dashed label="enum-key"]
  616 -> 71 [style=dashed label="enum-name"]
  616 -> 72 [style=dashed label="enum-specifier"]
  616 -> 73 [style=dashed label="explicit-instantiation"]
  616 -> 74 [style=dashed label="explicit-specialization"]
  616 -> 75 [style=dashed label="explicit-specifier"]
  616 -> 76 [style=dashed label="explicit-specifier-opt"]
  616 -> 77 [style=dashed label="export-declaration"]
  616 -> 78 [style=dashed label="function-definition"]
  616 -> 79 [style=dashed label="function-specifier"]
  616 -> 82 [style=dashed label="linkage-specification"]
  616 -> 83 [style=dashed label="module-import-declaration"]
  616 -> 84 [style=dashed label="named-namespace-definition"]
  616 -> 85 [style=dashed label="namespace-alias"]
  616 -> 86 [style=dashed label="namespace-alias-definition"]
  616 -> 850 [style=dashed label="namespace-body"]
  616 -> 87 [style=dashed label="namespace-definition"]
  616 -> 88 [style=dashed label="namespace-name"]
  616 -> 89 [style=dashed label="nested-name-specifier"]
  616 -> 90 [style=dashed label="nested-name-specifier-opt"]
  616 -> 91 [style=dashed label="nested-namespace-definition"]
  616 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  616 -> 93 [style=dashed label="opaque-enum-declaration"]
  616 -> 94 [style=dashed label="placeholder-type-specifier"]
  616 -> 95 [style=dashed label="simple-declaration"]
  616 -> 96 [style=dashed label="simple-template-id"]
  616 -> 97 [style=dashed label="simple-type-specifier"]
  616 -> 98 [style=dashed label="static_assert-declaration"]
  616 -> 99 [style=dashed label="storage-class-specifier"]
  616 -> 100 [style=dashed label="template-declaration"]
  616 -> 101 [style=dashed label="template-head"]
  616 -> 102 [style=dashed label="template-name"]
  616 -> 104 [style=dashed label="type-constraint"]
  616 -> 105 [style=dashed label="type-constraint-opt"]
  616 -> 106 [style=dashed label="type-name"]
  616 -> 107 [style=dashed label="type-specifier"]
  616 -> 108 [style=dashed label="typedef-name"]
  616 -> 109 [style=dashed label="typename-specifier"]
  616 -> 110 [style=dashed label="unnamed-namespace-definition"]
  616 -> 111 [style=dashed label="using-declaration"]
  616 -> 112 [style=dashed label="using-directive"]
  616 -> 113 [style=dashed label="using-enum-declaration"]
  616 -> "616R9d" [label="[\"template\"]", style=solid]
 "616R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  616 -> "616R13d" [label="[\"namespace\"]", style=solid]
 "616R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  616 -> "616R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "616R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  616 -> "616R83" [label="[]", style=solid]
 "616R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  616 -> "616R210" [label="[\"}\"]", style=solid]
 "616R210" [label="R210", fillcolor=3, shape=diamond, style=filled]
  616 -> "616R270d" [label="[IDENTIFIER]", style=solid]
 "616R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  616 -> "616R469d" [label="[IDENTIFIER]", style=solid]
 "616R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  616 -> "616R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "616R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  617 [label="State 617\n\l653 simple-declaration: attribute-specifier-seq decl-specifier-seq init-declarator-list \";\" •\l"]
  617 -> "617R653" [style=solid]
 "617R653" [label="R653", fillcolor=3, shape=diamond, style=filled]
  618 [label="State 618\n\l244 enum-head-name-opt: enum-head-name •\l"]
  618 -> "618R244" [style=solid]
 "618R244" [label="R244", fillcolor=3, shape=diamond, style=filled]
  619 [label="State 619\n\l786 using-directive: attribute-specifier-seq-opt \"using\" \"namespace\" nested-name-specifier-opt • namespace-name \";\"\l"]
  619 -> 842 [style=solid label="IDENTIFIER"]
  619 -> 85 [style=dashed label="namespace-alias"]
  619 -> 851 [style=dashed label="namespace-name"]
  620 [label="State 620\n\l 46 alignment-specifier: \"alignas\" \"(\" constant-expression • ELLIPSIS-opt \")\"\l"]
  620 -> 156 [style=solid label="\"...\""]
  620 -> 852 [style=dashed label="ELLIPSIS-opt"]
  620 -> "620R5" [style=solid]
 "620R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  621 [label="State 621\n\l 45 alignment-specifier: \"alignas\" \"(\" type-id • ELLIPSIS-opt \")\"\l"]
  621 -> 156 [style=solid label="\"...\""]
  621 -> 853 [style=dashed label="ELLIPSIS-opt"]
  621 -> "621R5" [style=solid]
 "621R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  622 [label="State 622\n\l502 noptr-declarator: noptr-declarator parameters-and-qualifiers •\l"]
  622 -> "622R502" [style=solid]
 "622R502" [label="R502", fillcolor=3, shape=diamond, style=filled]
  623 [label="State 623\n\l504 noptr-declarator: \"(\" ptr-declarator \")\" •\l"]
  623 -> "623R504" [style=solid]
 "623R504" [label="R504", fillcolor=3, shape=diamond, style=filled]
  624 [label="State 624\n\l 49 asm-declaration: attribute-specifier-seq-opt \"asm\" \"(\" string-literal • \")\" \";\"\l"]
  624 -> 854 [style=solid label="\")\""]
  625 [label="State 625\n\l 87 attribute-using-prefix: \"using\" • attribute-namespace \":\"\l"]
  625 -> 855 [style=solid label="IDENTIFIER"]
  625 -> 856 [style=dashed label="attribute-namespace"]
  626 [label="State 626\n\l 89 attribute-using-prefix-opt: attribute-using-prefix •\l"]
  626 -> "626R89" [style=solid]
 "626R89" [label="R89", fillcolor=3, shape=diamond, style=filled]
  627 [label="State 627\n\l 80 attribute-specifier: \"[\" \"[\" attribute-using-prefix-opt • attribute-list \"]\" \"]\"\l"]
  627 -> 857 [style=solid label="IDENTIFIER"]
  627 -> 858 [style=dashed label="attribute"]
  627 -> 859 [style=dashed label="attribute-list"]
  627 -> 860 [style=dashed label="attribute-namespace"]
  627 -> 861 [style=dashed label="attribute-opt"]
  627 -> 862 [style=dashed label="attribute-scoped-token"]
  627 -> 863 [style=dashed label="attribute-token"]
  627 -> "627R77" [style=solid]
 "627R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  628 [label="State 628\n\l179 cv-qualifier-seq: cv-qualifier • cv-qualifier-seq-opt\l"]
  628 -> 15 [style=solid label="\"const\""]
  628 -> 16 [style=solid label="\"volatile\""]
  628 -> 628 [style=dashed label="cv-qualifier"]
  628 -> 629 [style=dashed label="cv-qualifier-seq"]
  628 -> 864 [style=dashed label="cv-qualifier-seq-opt"]
  628 -> "628R180d" [label="[\"const\", \"volatile\"]", style=solid]
 "628R180d" [label="R180", fillcolor=5, shape=diamond, style=filled]
  628 -> "628R180" [style=solid]
 "628R180" [label="R180", fillcolor=3, shape=diamond, style=filled]
  629 [label="State 629\n\l181 cv-qualifier-seq-opt: cv-qualifier-seq •\l"]
  629 -> "629R181" [style=solid]
 "629R181" [label="R181", fillcolor=3, shape=diamond, style=filled]
  630 [label="State 630\n\l605 ptr-operator: \"*\" attribute-specifier-seq-opt cv-qualifier-seq-opt •\l"]
  630 -> "630R605" [style=solid]
 "630R605" [label="R605", fillcolor=3, shape=diamond, style=filled]
  631 [label="State 631\n\l654 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" • identifier-list \"]\" initializer \";\"\l"]
  631 -> 865 [style=solid label="IDENTIFIER"]
  631 -> 866 [style=dashed label="identifier-list"]
  632 [label="State 632\n\l789 virt-specifier: \"final\" •\l"]
  632 -> "632R789" [style=solid]
 "632R789" [label="R789", fillcolor=3, shape=diamond, style=filled]
  633 [label="State 633\n\l788 virt-specifier: \"override\" •\l"]
  633 -> "633R788" [style=solid]
 "633R788" [label="R788", fillcolor=3, shape=diamond, style=filled]
  634 [label="State 634\n\l331 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator requires-clause • function-body\l"]
  634 -> 867 [style=solid label="\"=\""]
  634 -> 868 [style=solid label="\":\""]
  634 -> 869 [style=solid label="\"try\""]
  634 -> 870 [style=dashed label="ctor-initializer"]
  634 -> 871 [style=dashed label="ctor-initializer-opt"]
  634 -> 872 [style=dashed label="function-body"]
  634 -> 873 [style=dashed label="function-try-block"]
  634 -> "634R175" [style=solid]
 "634R175" [label="R175", fillcolor=3, shape=diamond, style=filled]
  635 [label="State 635\n\l790 virt-specifier-seq: virt-specifier •\l"]
  635 -> "635R790" [style=solid]
 "635R790" [label="R790", fillcolor=3, shape=diamond, style=filled]
  636 [label="State 636\n\l791 virt-specifier-seq: virt-specifier-seq • virt-specifier\l793 virt-specifier-seq-opt: virt-specifier-seq •\l"]
  636 -> 632 [style=solid label="\"final\""]
  636 -> 633 [style=solid label="\"override\""]
  636 -> 874 [style=dashed label="virt-specifier"]
  636 -> "636R793" [style=solid]
 "636R793" [label="R793", fillcolor=3, shape=diamond, style=filled]
  637 [label="State 637\n\l330 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator virt-specifier-seq-opt • function-body\l"]
  637 -> 867 [style=solid label="\"=\""]
  637 -> 868 [style=solid label="\":\""]
  637 -> 869 [style=solid label="\"try\""]
  637 -> 870 [style=dashed label="ctor-initializer"]
  637 -> 871 [style=dashed label="ctor-initializer-opt"]
  637 -> 875 [style=dashed label="function-body"]
  637 -> 873 [style=dashed label="function-try-block"]
  637 -> "637R175" [style=solid]
 "637R175" [label="R175", fillcolor=3, shape=diamond, style=filled]
  638 [label="State 638\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l608 ptr-operator: nested-name-specifier \"*\" attribute-specifier-seq-opt • cv-qualifier-seq-opt\l"]
  638 -> 158 [style=solid label="\"alignas\""]
  638 -> 162 [style=solid label="\"[\""]
  638 -> 15 [style=solid label="\"const\""]
  638 -> 16 [style=solid label="\"volatile\""]
  638 -> 166 [style=dashed label="alignment-specifier"]
  638 -> 167 [style=dashed label="attribute-specifier"]
  638 -> 628 [style=dashed label="cv-qualifier"]
  638 -> 629 [style=dashed label="cv-qualifier-seq"]
  638 -> 876 [style=dashed label="cv-qualifier-seq-opt"]
  638 -> "638R180d" [label="[\"alignas\", \"[\", \"const\", \"volatile\"]", style=solid]
 "638R180d" [label="R180", fillcolor=5, shape=diamond, style=filled]
  638 -> "638R180" [style=solid]
 "638R180" [label="R180", fillcolor=3, shape=diamond, style=filled]
  639 [label="State 639\n\l560 parameter-declaration-list: parameter-declaration •\l"]
  639 -> "639R560" [style=solid]
 "639R560" [label="R560", fillcolor=3, shape=diamond, style=filled]
  640 [label="State 640\n\l564 parameters-and-qualifiers: \"(\" parameter-declaration-clause • \")\" cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt\l"]
  640 -> 877 [style=solid label="\")\""]
  641 [label="State 641\n\l559 parameter-declaration-clause: parameter-declaration-list • \",\" \"...\"\l561 parameter-declaration-list: parameter-declaration-list • \",\" parameter-declaration\l563 parameter-declaration-list-opt: parameter-declaration-list •\l"]
  641 -> 878 [style=solid label="\",\""]
  641 -> "641R563" [style=solid]
 "641R563" [label="R563", fillcolor=3, shape=diamond, style=filled]
  642 [label="State 642\n\l558 parameter-declaration-clause: parameter-declaration-list-opt • ELLIPSIS-opt\l"]
  642 -> 156 [style=solid label="\"...\""]
  642 -> 879 [style=dashed label="ELLIPSIS-opt"]
  642 -> "642R5" [style=solid]
 "642R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  643 [label="State 643\n\l162 constant-expression-opt: constant-expression •\l"]
  643 -> "643R162" [style=solid]
 "643R162" [label="R162", fillcolor=3, shape=diamond, style=filled]
  644 [label="State 644\n\l503 noptr-declarator: noptr-declarator \"[\" constant-expression-opt • \"]\" attribute-specifier-seq-opt\l"]
  644 -> 880 [style=solid label="\"]\""]
  645 [label="State 645\n\l714 trailing-return-type: \"->\" • type-id\l"]
  645 -> 4 [style=solid label="IDENTIFIER"]
  645 -> 6 [style=solid label="\"::\""]
  645 -> 8 [style=solid label="\"typename\""]
  645 -> 12 [style=solid label="\"class\""]
  645 -> 13 [style=solid label="\"struct\""]
  645 -> 14 [style=solid label="\"union\""]
  645 -> 15 [style=solid label="\"const\""]
  645 -> 16 [style=solid label="\"volatile\""]
  645 -> 21 [style=solid label="\"decltype\""]
  645 -> 125 [style=solid label="\"enum\""]
  645 -> 27 [style=solid label="\"char\""]
  645 -> 28 [style=solid label="\"char8_t\""]
  645 -> 29 [style=solid label="\"char16_t\""]
  645 -> 30 [style=solid label="\"char32_t\""]
  645 -> 31 [style=solid label="\"wchar_t\""]
  645 -> 32 [style=solid label="\"bool\""]
  645 -> 33 [style=solid label="\"short\""]
  645 -> 34 [style=solid label="\"int\""]
  645 -> 35 [style=solid label="\"long\""]
  645 -> 36 [style=solid label="\"signed\""]
  645 -> 37 [style=solid label="\"unsigned\""]
  645 -> 38 [style=solid label="\"float\""]
  645 -> 39 [style=solid label="\"double\""]
  645 -> 40 [style=solid label="\"void\""]
  645 -> 424 [style=dashed label="class-key"]
  645 -> 55 [style=dashed label="class-name"]
  645 -> 57 [style=dashed label="cv-qualifier"]
  645 -> 63 [style=dashed label="decltype-specifier"]
  645 -> 66 [style=dashed label="elaborated-enum-specifier"]
  645 -> 67 [style=dashed label="elaborated-type-specifier"]
  645 -> 71 [style=dashed label="enum-name"]
  645 -> 85 [style=dashed label="namespace-alias"]
  645 -> 88 [style=dashed label="namespace-name"]
  645 -> 89 [style=dashed label="nested-name-specifier"]
  645 -> 90 [style=dashed label="nested-name-specifier-opt"]
  645 -> 94 [style=dashed label="placeholder-type-specifier"]
  645 -> 96 [style=dashed label="simple-template-id"]
  645 -> 97 [style=dashed label="simple-type-specifier"]
  645 -> 102 [style=dashed label="template-name"]
  645 -> 104 [style=dashed label="type-constraint"]
  645 -> 105 [style=dashed label="type-constraint-opt"]
  645 -> 881 [style=dashed label="type-id"]
  645 -> 106 [style=dashed label="type-name"]
  645 -> 432 [style=dashed label="type-specifier"]
  645 -> 433 [style=dashed label="type-specifier-seq"]
  645 -> 108 [style=dashed label="typedef-name"]
  645 -> 109 [style=dashed label="typename-specifier"]
  645 -> "645R469d" [label="[IDENTIFIER]", style=solid]
 "645R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  645 -> "645R722d" [label="[\"decltype\"]", style=solid]
 "645R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  645 -> "645R722" [label="[]", style=solid]
 "645R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  646 [label="State 646\n\l214 declarator: noptr-declarator parameters-and-qualifiers trailing-return-type •\l"]
  646 -> "646R214" [style=solid]
 "646R214" [label="R214", fillcolor=3, shape=diamond, style=filled]
  647 [label="State 647\n\l435 member-specification: access-specifier \":\" • member-specification-opt\l"]
  647 -> 7 [style=solid label="\"template\""]
  647 -> 369 [style=solid label="\"private\""]
  647 -> 370 [style=solid label="\"protected\""]
  647 -> 371 [style=solid label="\"public\""]
  647 -> 10 [style=solid label="\"using\""]
  647 -> 11 [style=solid label="\";\""]
  647 -> 372 [style=solid label="\"enum\""]
  647 -> 23 [style=solid label="\"explicit\""]
  647 -> 41 [style=solid label="\"static_assert\""]
  647 -> 373 [style=dashed label="access-specifier"]
  647 -> 374 [style=dashed label="alias-declaration"]
  647 -> 177 [style=dashed label="attribute-specifier-seq"]
  647 -> 375 [style=dashed label="attribute-specifier-seq-opt"]
  647 -> 376 [style=dashed label="deduction-guide"]
  647 -> 377 [style=dashed label="empty-declaration"]
  647 -> 378 [style=dashed label="enum-key"]
  647 -> 379 [style=dashed label="explicit-specialization"]
  647 -> 380 [style=dashed label="explicit-specifier"]
  647 -> 76 [style=dashed label="explicit-specifier-opt"]
  647 -> 381 [style=dashed label="function-definition"]
  647 -> 382 [style=dashed label="member-declaration"]
  647 -> 383 [style=dashed label="member-specification"]
  647 -> 882 [style=dashed label="member-specification-opt"]
  647 -> 385 [style=dashed label="opaque-enum-declaration"]
  647 -> 386 [style=dashed label="static_assert-declaration"]
  647 -> 387 [style=dashed label="template-declaration"]
  647 -> 101 [style=dashed label="template-head"]
  647 -> 388 [style=dashed label="using-declaration"]
  647 -> 389 [style=dashed label="using-enum-declaration"]
  647 -> "647R83d" [label="[\";\", \"enum\", \"explicit\"]", style=solid]
 "647R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  647 -> "647R83" [style=solid]
 "647R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  647 -> "647R270d" [label="[IDENTIFIER]", style=solid]
 "647R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  647 -> "647R436" [label="[\"}\"]", style=solid]
 "647R436" [label="R436", fillcolor=3, shape=diamond, style=filled]
  648 [label="State 648\n\l330 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt • declarator virt-specifier-seq-opt function-body\l331                    | attribute-specifier-seq-opt decl-specifier-seq-opt • declarator requires-clause function-body\l415 member-declaration: attribute-specifier-seq-opt decl-specifier-seq-opt • member-declarator-list-opt \";\"\l"]
  648 -> 156 [style=solid label="\"...\""]
  648 -> 883 [style=solid label="IDENTIFIER"]
  648 -> 6 [style=solid label="\"::\""]
  648 -> 159 [style=solid label="\"(\""]
  648 -> 160 [style=solid label="\"&\""]
  648 -> 163 [style=solid label="\"&&\""]
  648 -> 21 [style=solid label="\"decltype\""]
  648 -> 164 [style=solid label="\"*\""]
  648 -> 165 [style=dashed label="ELLIPSIS-opt"]
  648 -> 884 [style=dashed label="IDENTIFIER-opt"]
  648 -> 55 [style=dashed label="class-name"]
  648 -> 885 [style=dashed label="declarator"]
  648 -> 171 [style=dashed label="declarator-id"]
  648 -> 121 [style=dashed label="decltype-specifier"]
  648 -> 71 [style=dashed label="enum-name"]
  648 -> 886 [style=dashed label="member-declarator"]
  648 -> 887 [style=dashed label="member-declarator-list"]
  648 -> 888 [style=dashed label="member-declarator-list-opt"]
  648 -> 85 [style=dashed label="namespace-alias"]
  648 -> 88 [style=dashed label="namespace-name"]
  648 -> 187 [style=dashed label="nested-name-specifier"]
  648 -> 173 [style=dashed label="noptr-declarator"]
  648 -> 174 [style=dashed label="ptr-declarator"]
  648 -> 175 [style=dashed label="ptr-operator"]
  648 -> 96 [style=dashed label="simple-template-id"]
  648 -> 102 [style=dashed label="template-name"]
  648 -> 106 [style=dashed label="type-name"]
  648 -> 108 [style=dashed label="typedef-name"]
  648 -> "648R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "648R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  648 -> "648R5" [label="[\"operator\", \"~\"]", style=solid]
 "648R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  648 -> "648R11" [style=solid]
 "648R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  648 -> "648R432" [label="[\";\"]", style=solid]
 "648R432" [label="R432", fillcolor=3, shape=diamond, style=filled]
  649 [label="State 649\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l507 opaque-enum-declaration: enum-key attribute-specifier-seq-opt • enum-head-name enum-base-opt \";\"\l"]
  649 -> 4 [style=solid label="IDENTIFIER"]
  649 -> 6 [style=solid label="\"::\""]
  649 -> 158 [style=solid label="\"alignas\""]
  649 -> 162 [style=solid label="\"[\""]
  649 -> 21 [style=solid label="\"decltype\""]
  649 -> 166 [style=dashed label="alignment-specifier"]
  649 -> 167 [style=dashed label="attribute-specifier"]
  649 -> 55 [style=dashed label="class-name"]
  649 -> 121 [style=dashed label="decltype-specifier"]
  649 -> 889 [style=dashed label="enum-head-name"]
  649 -> 71 [style=dashed label="enum-name"]
  649 -> 85 [style=dashed label="namespace-alias"]
  649 -> 88 [style=dashed label="namespace-name"]
  649 -> 133 [style=dashed label="nested-name-specifier"]
  649 -> 414 [style=dashed label="nested-name-specifier-opt"]
  649 -> 96 [style=dashed label="simple-template-id"]
  649 -> 102 [style=dashed label="template-name"]
  649 -> 106 [style=dashed label="type-name"]
  649 -> 108 [style=dashed label="typedef-name"]
  649 -> "649R469d" [label="[IDENTIFIER]", style=solid]
 "649R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  650 [label="State 650\n\l434 member-specification: member-declaration member-specification-opt •\l"]
  650 -> "650R434" [style=solid]
 "650R434" [label="R434", fillcolor=3, shape=diamond, style=filled]
  651 [label="State 651\n\l144 class-specifier: class-head \"{\" member-specification-opt \"}\" •\l"]
  651 -> "651R144" [style=solid]
 "651R144" [label="R144", fillcolor=3, shape=diamond, style=filled]
  652 [label="State 652\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l102 base-specifier: attribute-specifier-seq-opt • class-or-decltype\l103               | attribute-specifier-seq-opt • \"virtual\" access-specifier-opt class-or-decltype\l104               | attribute-specifier-seq-opt • access-specifier VIRTUAL-opt class-or-decltype\l"]
  652 -> 4 [style=solid label="IDENTIFIER"]
  652 -> 6 [style=solid label="\"::\""]
  652 -> 890 [style=solid label="\"virtual\""]
  652 -> 369 [style=solid label="\"private\""]
  652 -> 370 [style=solid label="\"protected\""]
  652 -> 371 [style=solid label="\"public\""]
  652 -> 158 [style=solid label="\"alignas\""]
  652 -> 162 [style=solid label="\"[\""]
  652 -> 21 [style=solid label="\"decltype\""]
  652 -> 891 [style=dashed label="access-specifier"]
  652 -> 166 [style=dashed label="alignment-specifier"]
  652 -> 167 [style=dashed label="attribute-specifier"]
  652 -> 55 [style=dashed label="class-name"]
  652 -> 892 [style=dashed label="class-or-decltype"]
  652 -> 893 [style=dashed label="decltype-specifier"]
  652 -> 71 [style=dashed label="enum-name"]
  652 -> 85 [style=dashed label="namespace-alias"]
  652 -> 88 [style=dashed label="namespace-name"]
  652 -> 894 [style=dashed label="nested-name-specifier"]
  652 -> 895 [style=dashed label="nested-name-specifier-opt"]
  652 -> 96 [style=dashed label="simple-template-id"]
  652 -> 102 [style=dashed label="template-name"]
  652 -> 106 [style=dashed label="type-name"]
  652 -> 108 [style=dashed label="typedef-name"]
  652 -> "652R469d" [label="[IDENTIFIER]", style=solid]
 "652R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  653 [label="State 653\n\l105 base-specifier-list: base-specifier • ELLIPSIS-opt\l"]
  653 -> 156 [style=solid label="\"...\""]
  653 -> 896 [style=dashed label="ELLIPSIS-opt"]
  653 -> "653R5" [style=solid]
 "653R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  654 [label="State 654\n\l 99 base-clause: \":\" base-specifier-list •\l106 base-specifier-list: base-specifier-list • \",\" base-specifier ELLIPSIS-opt\l"]
  654 -> 897 [style=solid label="\",\""]
  654 -> "654R99" [style=solid]
 "654R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
  655 [label="State 655\n\l145 class-virt-specifier: \"final\" •\l"]
  655 -> "655R145" [style=solid]
 "655R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  656 [label="State 656\n\l147 class-virt-specifier-opt: class-virt-specifier •\l"]
  656 -> "656R147" [style=solid]
 "656R147" [label="R147", fillcolor=3, shape=diamond, style=filled]
  657 [label="State 657\n\l133 class-head: class-key attribute-specifier-seq-opt class-head-name class-virt-specifier-opt • base-clause-opt\l"]
  657 -> 390 [style=solid label="\":\""]
  657 -> 391 [style=dashed label="base-clause"]
  657 -> 898 [style=dashed label="base-clause-opt"]
  657 -> "657R100" [style=solid]
 "657R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
  658 [label="State 658\n\l139 class-name: IDENTIFIER •\l231 elaborated-type-specifier: class-key attribute-specifier-seq-opt nested-name-specifier-opt IDENTIFIER •\l708 template-name: IDENTIFIER •\l"]
  658 -> "658R139" [label="[\":\", \"{\", \"final\"]", style=solid]
 "658R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  658 -> "658R231d" [label="[\":\", \"{\"]", style=solid]
 "658R231d" [label="R231", fillcolor=5, shape=diamond, style=filled]
  658 -> "658R231" [style=solid]
 "658R231" [label="R231", fillcolor=3, shape=diamond, style=filled]
  658 -> "658R708" [label="[\"<\"]", style=solid]
 "658R708" [label="R708", fillcolor=3, shape=diamond, style=filled]
  659 [label="State 659\n\l135 class-head-name: nested-name-specifier-opt class-name •\l"]
  659 -> "659R135" [style=solid]
 "659R135" [label="R135", fillcolor=3, shape=diamond, style=filled]
  660 [label="State 660\n\l140 class-name: simple-template-id •\l"]
  660 -> "660R140" [style=solid]
 "660R140" [label="R140", fillcolor=3, shape=diamond, style=filled]
  661 [label="State 661\n\l233 elaborated-type-specifier: class-key nested-name-specifier TEMPLATE-opt simple-template-id •\l468 nested-name-specifier: nested-name-specifier TEMPLATE-opt simple-template-id • \"::\"\l"]
  661 -> 693 [style=solid label="\"::\""]
  661 -> "661R233d" [label="[\"::\"]", style=solid]
 "661R233d" [label="R233", fillcolor=5, shape=diamond, style=filled]
  661 -> "661R233" [style=solid]
 "661R233" [label="R233", fillcolor=3, shape=diamond, style=filled]
  662 [label="State 662\n\l364 initializer-clause: assignment-expression •\l"]
  662 -> "662R364" [style=solid]
 "662R364" [label="R364", fillcolor=3, shape=diamond, style=filled]
  663 [label="State 663\n\l365 initializer-clause: braced-init-list •\l"]
  663 -> "663R365" [style=solid]
 "663R365" [label="R365", fillcolor=3, shape=diamond, style=filled]
  664 [label="State 664\n\l117 brace-or-equal-initializer: \"=\" initializer-clause •\l"]
  664 -> "664R117" [style=solid]
 "664R117" [label="R117", fillcolor=3, shape=diamond, style=filled]
  665 [label="State 665\n\l363 initializer: \"(\" expression-list • \")\"\l"]
  665 -> 899 [style=solid label="\")\""]
  666 [label="State 666\n\l366 initializer-list: initializer-clause • ELLIPSIS-opt\l"]
  666 -> 156 [style=solid label="\"...\""]
  666 -> 900 [style=dashed label="ELLIPSIS-opt"]
  666 -> "666R5" [style=solid]
 "666R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  667 [label="State 667\n\l281 expression-list: initializer-list •\l367 initializer-list: initializer-list • \",\" initializer-clause ELLIPSIS-opt\l"]
  667 -> 901 [style=solid label="\",\""]
  667 -> "667R281" [style=solid]
 "667R281" [label="R281", fillcolor=3, shape=diamond, style=filled]
  668 [label="State 668\n\l123 braced-init-list: \"{\" \"}\" •\l"]
  668 -> "668R123" [style=solid]
 "668R123" [label="R123", fillcolor=3, shape=diamond, style=filled]
  669 [label="State 669\n\l229 designator: \".\" • IDENTIFIER\l"]
  669 -> 902 [style=solid label="IDENTIFIER"]
  670 [label="State 670\n\l227 designated-initializer-list: designated-initializer-clause •\l"]
  670 -> "670R227" [style=solid]
 "670R227" [label="R227", fillcolor=3, shape=diamond, style=filled]
  671 [label="State 671\n\l122 braced-init-list: \"{\" designated-initializer-list • COMMA-opt \"}\"\l228 designated-initializer-list: designated-initializer-list • \",\" designated-initializer-clause\l"]
  671 -> 903 [style=solid label="\",\""]
  671 -> 904 [style=dashed label="COMMA-opt"]
  671 -> "671R1" [style=solid]
 "671R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  672 [label="State 672\n\l226 designated-initializer-clause: designator • brace-or-equal-initializer\l"]
  672 -> 396 [style=solid label="\"=\""]
  672 -> 398 [style=solid label="\"{\""]
  672 -> 905 [style=dashed label="brace-or-equal-initializer"]
  672 -> 401 [style=dashed label="braced-init-list"]
  673 [label="State 673\n\l121 braced-init-list: \"{\" initializer-list • COMMA-opt \"}\"\l367 initializer-list: initializer-list • \",\" initializer-clause ELLIPSIS-opt\l"]
  673 -> 906 [style=solid label="\",\""]
  673 -> 907 [style=dashed label="COMMA-opt"]
  673 -> "673R1" [style=solid]
 "673R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  674 [label="State 674\n\l288 fold-expression: \"(\" • cast-expression fold-operator \"...\" \")\"\l289                | \"(\" • \"...\" fold-operator cast-expression \")\"\l290                | \"(\" • cast-expression fold-operator \"...\" fold-operator cast-expression \")\"\l591 primary-expression: \"(\" • expression \")\"\l"]
  674 -> 457 [style=solid label="\"...\""]
  674 -> 238 [style=solid label="IDENTIFIER"]
  674 -> 239 [style=solid label="\"noexcept\""]
  674 -> 240 [style=solid label="\"!\""]
  674 -> 241 [style=solid label="\"::\""]
  674 -> 242 [style=solid label="\"this\""]
  674 -> 8 [style=solid label="\"typename\""]
  674 -> 243 [style=solid label="\"+\""]
  674 -> 244 [style=solid label="\"-\""]
  674 -> 245 [style=solid label="\"(\""]
  674 -> 246 [style=solid label="\"&\""]
  674 -> 247 [style=solid label="\"[\""]
  674 -> 248 [style=solid label="\"co_await\""]
  674 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  674 -> 250 [style=solid label="CHARACTER_LITERAL"]
  674 -> 251 [style=solid label="\"operator\""]
  674 -> 21 [style=solid label="\"decltype\""]
  674 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  674 -> 253 [style=solid label="\"*\""]
  674 -> 254 [style=solid label="INTEGER_LITERAL"]
  674 -> 255 [style=solid label="\"requires\""]
  674 -> 256 [style=solid label="\"~\""]
  674 -> 257 [style=solid label="\"++\""]
  674 -> 258 [style=solid label="\"--\""]
  674 -> 259 [style=solid label="POINTER_LITERAL"]
  674 -> 260 [style=solid label="\"dynamic_cast\""]
  674 -> 261 [style=solid label="\"static_cast\""]
  674 -> 262 [style=solid label="\"reinterpret_cast\""]
  674 -> 263 [style=solid label="\"const_cast\""]
  674 -> 264 [style=solid label="\"typeid\""]
  674 -> 27 [style=solid label="\"char\""]
  674 -> 28 [style=solid label="\"char8_t\""]
  674 -> 29 [style=solid label="\"char16_t\""]
  674 -> 30 [style=solid label="\"char32_t\""]
  674 -> 31 [style=solid label="\"wchar_t\""]
  674 -> 32 [style=solid label="\"bool\""]
  674 -> 33 [style=solid label="\"short\""]
  674 -> 34 [style=solid label="\"int\""]
  674 -> 35 [style=solid label="\"long\""]
  674 -> 36 [style=solid label="\"signed\""]
  674 -> 37 [style=solid label="\"unsigned\""]
  674 -> 38 [style=solid label="\"float\""]
  674 -> 39 [style=solid label="\"double\""]
  674 -> 40 [style=solid label="\"void\""]
  674 -> 118 [style=solid label="STRING_LITERAL"]
  674 -> 265 [style=solid label="\"throw\""]
  674 -> 266 [style=solid label="\"sizeof\""]
  674 -> 267 [style=solid label="\"alignof\""]
  674 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  674 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  674 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  674 -> 271 [style=solid label="\"co_yield\""]
  674 -> 272 [style=dashed label="SCOPE-opt"]
  674 -> 273 [style=dashed label="additive-expression"]
  674 -> 274 [style=dashed label="and-expression"]
  674 -> 275 [style=dashed label="assignment-expression"]
  674 -> 276 [style=dashed label="await-expression"]
  674 -> 277 [style=dashed label="boolean-literal"]
  674 -> 458 [style=dashed label="cast-expression"]
  674 -> 279 [style=dashed label="character-literal"]
  674 -> 55 [style=dashed label="class-name"]
  674 -> 280 [style=dashed label="compare-expression"]
  674 -> 281 [style=dashed label="conditional-expression"]
  674 -> 282 [style=dashed label="conversion-function-id"]
  674 -> 63 [style=dashed label="decltype-specifier"]
  674 -> 283 [style=dashed label="delete-expression"]
  674 -> 71 [style=dashed label="enum-name"]
  674 -> 284 [style=dashed label="equality-expression"]
  674 -> 285 [style=dashed label="exclusive-or-expression"]
  674 -> 459 [style=dashed label="expression"]
  674 -> 287 [style=dashed label="floating-point-literal"]
  674 -> 288 [style=dashed label="fold-expression"]
  674 -> 289 [style=dashed label="id-expression"]
  674 -> 290 [style=dashed label="inclusive-or-expression"]
  674 -> 291 [style=dashed label="integer-literal"]
  674 -> 292 [style=dashed label="lambda-expression"]
  674 -> 293 [style=dashed label="lambda-introducer"]
  674 -> 294 [style=dashed label="literal"]
  674 -> 295 [style=dashed label="literal-operator-id"]
  674 -> 296 [style=dashed label="logical-and-expression"]
  674 -> 297 [style=dashed label="logical-or-expression"]
  674 -> 298 [style=dashed label="multiplicative-expression"]
  674 -> 85 [style=dashed label="namespace-alias"]
  674 -> 88 [style=dashed label="namespace-name"]
  674 -> 299 [style=dashed label="nested-name-specifier"]
  674 -> 90 [style=dashed label="nested-name-specifier-opt"]
  674 -> 300 [style=dashed label="new-expression"]
  674 -> 301 [style=dashed label="noexcept-expression"]
  674 -> 302 [style=dashed label="operator-function-id"]
  674 -> 94 [style=dashed label="placeholder-type-specifier"]
  674 -> 303 [style=dashed label="pm-expression"]
  674 -> 304 [style=dashed label="pointer-literal"]
  674 -> 305 [style=dashed label="postfix-expression"]
  674 -> 306 [style=dashed label="primary-expression"]
  674 -> 307 [style=dashed label="qualified-id"]
  674 -> 308 [style=dashed label="relational-expression"]
  674 -> 309 [style=dashed label="requires-expression"]
  674 -> 310 [style=dashed label="shift-expression"]
  674 -> 311 [style=dashed label="simple-template-id"]
  674 -> 312 [style=dashed label="simple-type-specifier"]
  674 -> 313 [style=dashed label="string-literal"]
  674 -> 314 [style=dashed label="template-id"]
  674 -> 102 [style=dashed label="template-name"]
  674 -> 315 [style=dashed label="throw-expression"]
  674 -> 104 [style=dashed label="type-constraint"]
  674 -> 105 [style=dashed label="type-constraint-opt"]
  674 -> 106 [style=dashed label="type-name"]
  674 -> 108 [style=dashed label="typedef-name"]
  674 -> 316 [style=dashed label="typename-specifier"]
  674 -> 317 [style=dashed label="unary-expression"]
  674 -> 318 [style=dashed label="unary-operator"]
  674 -> 319 [style=dashed label="unqualified-id"]
  674 -> 320 [style=dashed label="user-defined-character-literal"]
  674 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  674 -> 322 [style=dashed label="user-defined-integer-literal"]
  674 -> 323 [style=dashed label="user-defined-literal"]
  674 -> 324 [style=dashed label="user-defined-string-literal"]
  674 -> 325 [style=dashed label="yield-expression"]
  674 -> "674R19" [style=solid]
 "674R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  674 -> "674R469d" [label="[IDENTIFIER]", style=solid]
 "674R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  674 -> "674R722d" [label="[\"decltype\"]", style=solid]
 "674R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  674 -> "674R722" [label="[\"auto\"]", style=solid]
 "674R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  675 [label="State 675\n\l165 constraint-logical-and-expression: constraint-logical-and-expression • \"&&\" primary-expression\l166 constraint-logical-or-expression: constraint-logical-and-expression •\l"]
  675 -> 908 [style=solid label="\"&&\""]
  675 -> "675R166d" [label="[\"&&\"]", style=solid]
 "675R166d" [label="R166", fillcolor=5, shape=diamond, style=filled]
  675 -> "675R166" [style=solid]
 "675R166" [label="R166", fillcolor=3, shape=diamond, style=filled]
  676 [label="State 676\n\l167 constraint-logical-or-expression: constraint-logical-or-expression • \"||\" constraint-logical-and-expression\l633 requires-clause: \"requires\" constraint-logical-or-expression •\l"]
  676 -> 909 [style=solid label="\"||\""]
  676 -> "676R633" [style=solid]
 "676R633" [label="R633", fillcolor=3, shape=diamond, style=filled]
  677 [label="State 677\n\l164 constraint-logical-and-expression: primary-expression •\l"]
  677 -> "677R164" [style=solid]
 "677R164" [label="R164", fillcolor=3, shape=diamond, style=filled]
  678 [label="State 678\n\l354 init-declarator-list: init-declarator-list \",\" init-declarator •\l"]
  678 -> "678R354" [style=solid]
 "678R354" [label="R354", fillcolor=3, shape=diamond, style=filled]
  679 [label="State 679\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l251 enumerator: IDENTIFIER attribute-specifier-seq-opt •\l"]
  679 -> 158 [style=solid label="\"alignas\""]
  679 -> 162 [style=solid label="\"[\""]
  679 -> 166 [style=dashed label="alignment-specifier"]
  679 -> 167 [style=dashed label="attribute-specifier"]
  679 -> "679R251" [style=solid]
 "679R251" [label="R251", fillcolor=3, shape=diamond, style=filled]
  680 [label="State 680\n\l253 enumerator-definition: enumerator \"=\" • constant-expression\l"]
  680 -> 238 [style=solid label="IDENTIFIER"]
  680 -> 239 [style=solid label="\"noexcept\""]
  680 -> 240 [style=solid label="\"!\""]
  680 -> 241 [style=solid label="\"::\""]
  680 -> 242 [style=solid label="\"this\""]
  680 -> 8 [style=solid label="\"typename\""]
  680 -> 243 [style=solid label="\"+\""]
  680 -> 244 [style=solid label="\"-\""]
  680 -> 245 [style=solid label="\"(\""]
  680 -> 246 [style=solid label="\"&\""]
  680 -> 247 [style=solid label="\"[\""]
  680 -> 248 [style=solid label="\"co_await\""]
  680 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  680 -> 250 [style=solid label="CHARACTER_LITERAL"]
  680 -> 251 [style=solid label="\"operator\""]
  680 -> 21 [style=solid label="\"decltype\""]
  680 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  680 -> 253 [style=solid label="\"*\""]
  680 -> 254 [style=solid label="INTEGER_LITERAL"]
  680 -> 255 [style=solid label="\"requires\""]
  680 -> 256 [style=solid label="\"~\""]
  680 -> 257 [style=solid label="\"++\""]
  680 -> 258 [style=solid label="\"--\""]
  680 -> 259 [style=solid label="POINTER_LITERAL"]
  680 -> 260 [style=solid label="\"dynamic_cast\""]
  680 -> 261 [style=solid label="\"static_cast\""]
  680 -> 262 [style=solid label="\"reinterpret_cast\""]
  680 -> 263 [style=solid label="\"const_cast\""]
  680 -> 264 [style=solid label="\"typeid\""]
  680 -> 27 [style=solid label="\"char\""]
  680 -> 28 [style=solid label="\"char8_t\""]
  680 -> 29 [style=solid label="\"char16_t\""]
  680 -> 30 [style=solid label="\"char32_t\""]
  680 -> 31 [style=solid label="\"wchar_t\""]
  680 -> 32 [style=solid label="\"bool\""]
  680 -> 33 [style=solid label="\"short\""]
  680 -> 34 [style=solid label="\"int\""]
  680 -> 35 [style=solid label="\"long\""]
  680 -> 36 [style=solid label="\"signed\""]
  680 -> 37 [style=solid label="\"unsigned\""]
  680 -> 38 [style=solid label="\"float\""]
  680 -> 39 [style=solid label="\"double\""]
  680 -> 40 [style=solid label="\"void\""]
  680 -> 118 [style=solid label="STRING_LITERAL"]
  680 -> 266 [style=solid label="\"sizeof\""]
  680 -> 267 [style=solid label="\"alignof\""]
  680 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  680 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  680 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  680 -> 272 [style=dashed label="SCOPE-opt"]
  680 -> 273 [style=dashed label="additive-expression"]
  680 -> 274 [style=dashed label="and-expression"]
  680 -> 276 [style=dashed label="await-expression"]
  680 -> 277 [style=dashed label="boolean-literal"]
  680 -> 278 [style=dashed label="cast-expression"]
  680 -> 279 [style=dashed label="character-literal"]
  680 -> 55 [style=dashed label="class-name"]
  680 -> 280 [style=dashed label="compare-expression"]
  680 -> 327 [style=dashed label="conditional-expression"]
  680 -> 910 [style=dashed label="constant-expression"]
  680 -> 282 [style=dashed label="conversion-function-id"]
  680 -> 63 [style=dashed label="decltype-specifier"]
  680 -> 283 [style=dashed label="delete-expression"]
  680 -> 71 [style=dashed label="enum-name"]
  680 -> 284 [style=dashed label="equality-expression"]
  680 -> 285 [style=dashed label="exclusive-or-expression"]
  680 -> 287 [style=dashed label="floating-point-literal"]
  680 -> 288 [style=dashed label="fold-expression"]
  680 -> 289 [style=dashed label="id-expression"]
  680 -> 290 [style=dashed label="inclusive-or-expression"]
  680 -> 291 [style=dashed label="integer-literal"]
  680 -> 292 [style=dashed label="lambda-expression"]
  680 -> 293 [style=dashed label="lambda-introducer"]
  680 -> 294 [style=dashed label="literal"]
  680 -> 295 [style=dashed label="literal-operator-id"]
  680 -> 296 [style=dashed label="logical-and-expression"]
  680 -> 329 [style=dashed label="logical-or-expression"]
  680 -> 298 [style=dashed label="multiplicative-expression"]
  680 -> 85 [style=dashed label="namespace-alias"]
  680 -> 88 [style=dashed label="namespace-name"]
  680 -> 299 [style=dashed label="nested-name-specifier"]
  680 -> 90 [style=dashed label="nested-name-specifier-opt"]
  680 -> 300 [style=dashed label="new-expression"]
  680 -> 301 [style=dashed label="noexcept-expression"]
  680 -> 302 [style=dashed label="operator-function-id"]
  680 -> 94 [style=dashed label="placeholder-type-specifier"]
  680 -> 303 [style=dashed label="pm-expression"]
  680 -> 304 [style=dashed label="pointer-literal"]
  680 -> 305 [style=dashed label="postfix-expression"]
  680 -> 306 [style=dashed label="primary-expression"]
  680 -> 307 [style=dashed label="qualified-id"]
  680 -> 308 [style=dashed label="relational-expression"]
  680 -> 309 [style=dashed label="requires-expression"]
  680 -> 310 [style=dashed label="shift-expression"]
  680 -> 311 [style=dashed label="simple-template-id"]
  680 -> 312 [style=dashed label="simple-type-specifier"]
  680 -> 313 [style=dashed label="string-literal"]
  680 -> 314 [style=dashed label="template-id"]
  680 -> 102 [style=dashed label="template-name"]
  680 -> 104 [style=dashed label="type-constraint"]
  680 -> 105 [style=dashed label="type-constraint-opt"]
  680 -> 106 [style=dashed label="type-name"]
  680 -> 108 [style=dashed label="typedef-name"]
  680 -> 316 [style=dashed label="typename-specifier"]
  680 -> 317 [style=dashed label="unary-expression"]
  680 -> 318 [style=dashed label="unary-operator"]
  680 -> 319 [style=dashed label="unqualified-id"]
  680 -> 320 [style=dashed label="user-defined-character-literal"]
  680 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  680 -> 322 [style=dashed label="user-defined-integer-literal"]
  680 -> 323 [style=dashed label="user-defined-literal"]
  680 -> 324 [style=dashed label="user-defined-string-literal"]
  680 -> "680R19" [style=solid]
 "680R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  680 -> "680R469d" [label="[IDENTIFIER]", style=solid]
 "680R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  680 -> "680R722d" [label="[\"decltype\"]", style=solid]
 "680R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  680 -> "680R722" [label="[\"auto\"]", style=solid]
 "680R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  681 [label="State 681\n\l250 enum-specifier: enum-head \"{\" enumerator-list \",\" • \"}\"\l255 enumerator-list: enumerator-list \",\" • enumerator-definition\l"]
  681 -> 407 [style=solid label="IDENTIFIER"]
  681 -> 911 [style=solid label="\"}\""]
  681 -> 408 [style=dashed label="enumerator"]
  681 -> 912 [style=dashed label="enumerator-definition"]
  682 [label="State 682\n\l249 enum-specifier: enum-head \"{\" enumerator-list-opt \"}\" •\l"]
  682 -> "682R249" [style=solid]
 "682R249" [label="R249", fillcolor=3, shape=diamond, style=filled]
  683 [label="State 683\n\l238 enum-base: \":\" • type-specifier-seq\l"]
  683 -> 4 [style=solid label="IDENTIFIER"]
  683 -> 6 [style=solid label="\"::\""]
  683 -> 8 [style=solid label="\"typename\""]
  683 -> 12 [style=solid label="\"class\""]
  683 -> 13 [style=solid label="\"struct\""]
  683 -> 14 [style=solid label="\"union\""]
  683 -> 15 [style=solid label="\"const\""]
  683 -> 16 [style=solid label="\"volatile\""]
  683 -> 21 [style=solid label="\"decltype\""]
  683 -> 125 [style=solid label="\"enum\""]
  683 -> 27 [style=solid label="\"char\""]
  683 -> 28 [style=solid label="\"char8_t\""]
  683 -> 29 [style=solid label="\"char16_t\""]
  683 -> 30 [style=solid label="\"char32_t\""]
  683 -> 31 [style=solid label="\"wchar_t\""]
  683 -> 32 [style=solid label="\"bool\""]
  683 -> 33 [style=solid label="\"short\""]
  683 -> 34 [style=solid label="\"int\""]
  683 -> 35 [style=solid label="\"long\""]
  683 -> 36 [style=solid label="\"signed\""]
  683 -> 37 [style=solid label="\"unsigned\""]
  683 -> 38 [style=solid label="\"float\""]
  683 -> 39 [style=solid label="\"double\""]
  683 -> 40 [style=solid label="\"void\""]
  683 -> 424 [style=dashed label="class-key"]
  683 -> 55 [style=dashed label="class-name"]
  683 -> 57 [style=dashed label="cv-qualifier"]
  683 -> 63 [style=dashed label="decltype-specifier"]
  683 -> 66 [style=dashed label="elaborated-enum-specifier"]
  683 -> 67 [style=dashed label="elaborated-type-specifier"]
  683 -> 71 [style=dashed label="enum-name"]
  683 -> 85 [style=dashed label="namespace-alias"]
  683 -> 88 [style=dashed label="namespace-name"]
  683 -> 89 [style=dashed label="nested-name-specifier"]
  683 -> 90 [style=dashed label="nested-name-specifier-opt"]
  683 -> 94 [style=dashed label="placeholder-type-specifier"]
  683 -> 96 [style=dashed label="simple-template-id"]
  683 -> 97 [style=dashed label="simple-type-specifier"]
  683 -> 102 [style=dashed label="template-name"]
  683 -> 104 [style=dashed label="type-constraint"]
  683 -> 105 [style=dashed label="type-constraint-opt"]
  683 -> 106 [style=dashed label="type-name"]
  683 -> 432 [style=dashed label="type-specifier"]
  683 -> 913 [style=dashed label="type-specifier-seq"]
  683 -> 108 [style=dashed label="typedef-name"]
  683 -> 109 [style=dashed label="typename-specifier"]
  683 -> "683R469d" [label="[IDENTIFIER]", style=solid]
 "683R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  683 -> "683R722d" [label="[\"decltype\"]", style=solid]
 "683R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  683 -> "683R722" [label="[]", style=solid]
 "683R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  684 [label="State 684\n\l240 enum-base-opt: enum-base •\l"]
  684 -> "684R240" [style=solid]
 "684R240" [label="R240", fillcolor=3, shape=diamond, style=filled]
  685 [label="State 685\n\l507 opaque-enum-declaration: enum-key attribute-specifier-seq-opt enum-head-name enum-base-opt • \";\"\l"]
  685 -> 914 [style=solid label="\";\""]
  686 [label="State 686\n\l241 enum-head: enum-key attribute-specifier-seq-opt enum-head-name-opt enum-base-opt •\l"]
  686 -> "686R241" [style=solid]
 "686R241" [label="R241", fillcolor=3, shape=diamond, style=filled]
  687 [label="State 687\n\l242 enum-head-name: nested-name-specifier-opt IDENTIFIER •\l"]
  687 -> "687R242" [style=solid]
 "687R242" [label="R242", fillcolor=3, shape=diamond, style=filled]
  688 [label="State 688\n\l217 deduction-guide: explicit-specifier-opt template-name \"(\" parameter-declaration-clause • \")\" \"->\" simple-template-id \";\"\l"]
  688 -> 915 [style=solid label="\")\""]
  689 [label="State 689\n\l438 module-declaration: EXPORT-opt \"module\" module-name • module-partition-opt attribute-specifier-seq-opt \";\"\l"]
  689 -> 138 [style=solid label="\":\""]
  689 -> 916 [style=dashed label="module-partition"]
  689 -> 917 [style=dashed label="module-partition-opt"]
  689 -> "689R448" [style=solid]
 "689R448" [label="R448", fillcolor=3, shape=diamond, style=filled]
  690 [label="State 690\n\l596 private-module-fragment: \"module\" • \":\" \"private\" \";\" declaration-seq-opt\l"]
  690 -> 918 [style=solid label="\":\""]
  691 [label="State 691\n\l598 private-module-fragment-opt: private-module-fragment •\l"]
  691 -> "691R598" [style=solid]
 "691R598" [label="R598", fillcolor=3, shape=diamond, style=filled]
  692 [label="State 692\n\l718 translation-unit: global-module-fragment-opt module-declaration declaration-seq-opt private-module-fragment-opt •\l"]
  692 -> "692R718" [style=solid]
 "692R718" [label="R718", fillcolor=3, shape=diamond, style=filled]
  693 [label="State 693\n\l468 nested-name-specifier: nested-name-specifier TEMPLATE-opt simple-template-id \"::\" •\l"]
  693 -> "693R468" [style=solid]
 "693R468" [label="R468", fillcolor=3, shape=diamond, style=filled]
  694 [label="State 694\n\l721 type-constraint: nested-name-specifier-opt concept-name \"<\" template-argument-list-opt • \">\"\l"]
  694 -> 919 [style=solid label="\">\""]
  695 [label="State 695\n\l152 concept-definition: \"concept\" concept-name \"=\" • constraint-expression \";\"\l"]
  695 -> 238 [style=solid label="IDENTIFIER"]
  695 -> 239 [style=solid label="\"noexcept\""]
  695 -> 240 [style=solid label="\"!\""]
  695 -> 241 [style=solid label="\"::\""]
  695 -> 242 [style=solid label="\"this\""]
  695 -> 8 [style=solid label="\"typename\""]
  695 -> 243 [style=solid label="\"+\""]
  695 -> 244 [style=solid label="\"-\""]
  695 -> 245 [style=solid label="\"(\""]
  695 -> 246 [style=solid label="\"&\""]
  695 -> 247 [style=solid label="\"[\""]
  695 -> 248 [style=solid label="\"co_await\""]
  695 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  695 -> 250 [style=solid label="CHARACTER_LITERAL"]
  695 -> 251 [style=solid label="\"operator\""]
  695 -> 21 [style=solid label="\"decltype\""]
  695 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  695 -> 253 [style=solid label="\"*\""]
  695 -> 254 [style=solid label="INTEGER_LITERAL"]
  695 -> 255 [style=solid label="\"requires\""]
  695 -> 256 [style=solid label="\"~\""]
  695 -> 257 [style=solid label="\"++\""]
  695 -> 258 [style=solid label="\"--\""]
  695 -> 259 [style=solid label="POINTER_LITERAL"]
  695 -> 260 [style=solid label="\"dynamic_cast\""]
  695 -> 261 [style=solid label="\"static_cast\""]
  695 -> 262 [style=solid label="\"reinterpret_cast\""]
  695 -> 263 [style=solid label="\"const_cast\""]
  695 -> 264 [style=solid label="\"typeid\""]
  695 -> 27 [style=solid label="\"char\""]
  695 -> 28 [style=solid label="\"char8_t\""]
  695 -> 29 [style=solid label="\"char16_t\""]
  695 -> 30 [style=solid label="\"char32_t\""]
  695 -> 31 [style=solid label="\"wchar_t\""]
  695 -> 32 [style=solid label="\"bool\""]
  695 -> 33 [style=solid label="\"short\""]
  695 -> 34 [style=solid label="\"int\""]
  695 -> 35 [style=solid label="\"long\""]
  695 -> 36 [style=solid label="\"signed\""]
  695 -> 37 [style=solid label="\"unsigned\""]
  695 -> 38 [style=solid label="\"float\""]
  695 -> 39 [style=solid label="\"double\""]
  695 -> 40 [style=solid label="\"void\""]
  695 -> 118 [style=solid label="STRING_LITERAL"]
  695 -> 266 [style=solid label="\"sizeof\""]
  695 -> 267 [style=solid label="\"alignof\""]
  695 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  695 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  695 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  695 -> 272 [style=dashed label="SCOPE-opt"]
  695 -> 273 [style=dashed label="additive-expression"]
  695 -> 274 [style=dashed label="and-expression"]
  695 -> 276 [style=dashed label="await-expression"]
  695 -> 277 [style=dashed label="boolean-literal"]
  695 -> 278 [style=dashed label="cast-expression"]
  695 -> 279 [style=dashed label="character-literal"]
  695 -> 55 [style=dashed label="class-name"]
  695 -> 280 [style=dashed label="compare-expression"]
  695 -> 920 [style=dashed label="constraint-expression"]
  695 -> 282 [style=dashed label="conversion-function-id"]
  695 -> 63 [style=dashed label="decltype-specifier"]
  695 -> 283 [style=dashed label="delete-expression"]
  695 -> 71 [style=dashed label="enum-name"]
  695 -> 284 [style=dashed label="equality-expression"]
  695 -> 285 [style=dashed label="exclusive-or-expression"]
  695 -> 287 [style=dashed label="floating-point-literal"]
  695 -> 288 [style=dashed label="fold-expression"]
  695 -> 289 [style=dashed label="id-expression"]
  695 -> 290 [style=dashed label="inclusive-or-expression"]
  695 -> 291 [style=dashed label="integer-literal"]
  695 -> 292 [style=dashed label="lambda-expression"]
  695 -> 293 [style=dashed label="lambda-introducer"]
  695 -> 294 [style=dashed label="literal"]
  695 -> 295 [style=dashed label="literal-operator-id"]
  695 -> 296 [style=dashed label="logical-and-expression"]
  695 -> 921 [style=dashed label="logical-or-expression"]
  695 -> 298 [style=dashed label="multiplicative-expression"]
  695 -> 85 [style=dashed label="namespace-alias"]
  695 -> 88 [style=dashed label="namespace-name"]
  695 -> 299 [style=dashed label="nested-name-specifier"]
  695 -> 90 [style=dashed label="nested-name-specifier-opt"]
  695 -> 300 [style=dashed label="new-expression"]
  695 -> 301 [style=dashed label="noexcept-expression"]
  695 -> 302 [style=dashed label="operator-function-id"]
  695 -> 94 [style=dashed label="placeholder-type-specifier"]
  695 -> 303 [style=dashed label="pm-expression"]
  695 -> 304 [style=dashed label="pointer-literal"]
  695 -> 305 [style=dashed label="postfix-expression"]
  695 -> 306 [style=dashed label="primary-expression"]
  695 -> 307 [style=dashed label="qualified-id"]
  695 -> 308 [style=dashed label="relational-expression"]
  695 -> 309 [style=dashed label="requires-expression"]
  695 -> 310 [style=dashed label="shift-expression"]
  695 -> 311 [style=dashed label="simple-template-id"]
  695 -> 312 [style=dashed label="simple-type-specifier"]
  695 -> 313 [style=dashed label="string-literal"]
  695 -> 314 [style=dashed label="template-id"]
  695 -> 102 [style=dashed label="template-name"]
  695 -> 104 [style=dashed label="type-constraint"]
  695 -> 105 [style=dashed label="type-constraint-opt"]
  695 -> 106 [style=dashed label="type-name"]
  695 -> 108 [style=dashed label="typedef-name"]
  695 -> 316 [style=dashed label="typename-specifier"]
  695 -> 317 [style=dashed label="unary-expression"]
  695 -> 318 [style=dashed label="unary-operator"]
  695 -> 319 [style=dashed label="unqualified-id"]
  695 -> 320 [style=dashed label="user-defined-character-literal"]
  695 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  695 -> 322 [style=dashed label="user-defined-integer-literal"]
  695 -> 323 [style=dashed label="user-defined-literal"]
  695 -> 324 [style=dashed label="user-defined-string-literal"]
  695 -> "695R19" [style=solid]
 "695R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  695 -> "695R469d" [label="[IDENTIFIER]", style=solid]
 "695R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  695 -> "695R722d" [label="[\"decltype\"]", style=solid]
 "695R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  695 -> "695R722" [label="[\"auto\"]", style=solid]
 "695R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  696 [label="State 696\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l231 elaborated-type-specifier: class-key attribute-specifier-seq-opt • nested-name-specifier-opt IDENTIFIER\l"]
  696 -> 4 [style=solid label="IDENTIFIER"]
  696 -> 6 [style=solid label="\"::\""]
  696 -> 158 [style=solid label="\"alignas\""]
  696 -> 162 [style=solid label="\"[\""]
  696 -> 21 [style=solid label="\"decltype\""]
  696 -> 166 [style=dashed label="alignment-specifier"]
  696 -> 167 [style=dashed label="attribute-specifier"]
  696 -> 55 [style=dashed label="class-name"]
  696 -> 121 [style=dashed label="decltype-specifier"]
  696 -> 71 [style=dashed label="enum-name"]
  696 -> 85 [style=dashed label="namespace-alias"]
  696 -> 88 [style=dashed label="namespace-name"]
  696 -> 133 [style=dashed label="nested-name-specifier"]
  696 -> 922 [style=dashed label="nested-name-specifier-opt"]
  696 -> 96 [style=dashed label="simple-template-id"]
  696 -> 102 [style=dashed label="template-name"]
  696 -> 106 [style=dashed label="type-name"]
  696 -> 108 [style=dashed label="typedef-name"]
  696 -> "696R469d" [label="[IDENTIFIER]", style=solid]
 "696R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  697 [label="State 697\n\l698 template-argument-list: template-argument ELLIPSIS-opt •\l"]
  697 -> "697R698" [style=solid]
 "697R698" [label="R698", fillcolor=3, shape=diamond, style=filled]
  698 [label="State 698\n\l699 template-argument-list: template-argument-list \",\" • template-argument ELLIPSIS-opt\l"]
  698 -> 238 [style=solid label="IDENTIFIER"]
  698 -> 239 [style=solid label="\"noexcept\""]
  698 -> 240 [style=solid label="\"!\""]
  698 -> 241 [style=solid label="\"::\""]
  698 -> 242 [style=solid label="\"this\""]
  698 -> 8 [style=solid label="\"typename\""]
  698 -> 243 [style=solid label="\"+\""]
  698 -> 244 [style=solid label="\"-\""]
  698 -> 245 [style=solid label="\"(\""]
  698 -> 246 [style=solid label="\"&\""]
  698 -> 247 [style=solid label="\"[\""]
  698 -> 248 [style=solid label="\"co_await\""]
  698 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  698 -> 250 [style=solid label="CHARACTER_LITERAL"]
  698 -> 12 [style=solid label="\"class\""]
  698 -> 13 [style=solid label="\"struct\""]
  698 -> 14 [style=solid label="\"union\""]
  698 -> 251 [style=solid label="\"operator\""]
  698 -> 15 [style=solid label="\"const\""]
  698 -> 16 [style=solid label="\"volatile\""]
  698 -> 21 [style=solid label="\"decltype\""]
  698 -> 125 [style=solid label="\"enum\""]
  698 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  698 -> 253 [style=solid label="\"*\""]
  698 -> 254 [style=solid label="INTEGER_LITERAL"]
  698 -> 255 [style=solid label="\"requires\""]
  698 -> 256 [style=solid label="\"~\""]
  698 -> 257 [style=solid label="\"++\""]
  698 -> 258 [style=solid label="\"--\""]
  698 -> 259 [style=solid label="POINTER_LITERAL"]
  698 -> 260 [style=solid label="\"dynamic_cast\""]
  698 -> 261 [style=solid label="\"static_cast\""]
  698 -> 262 [style=solid label="\"reinterpret_cast\""]
  698 -> 263 [style=solid label="\"const_cast\""]
  698 -> 264 [style=solid label="\"typeid\""]
  698 -> 27 [style=solid label="\"char\""]
  698 -> 28 [style=solid label="\"char8_t\""]
  698 -> 29 [style=solid label="\"char16_t\""]
  698 -> 30 [style=solid label="\"char32_t\""]
  698 -> 31 [style=solid label="\"wchar_t\""]
  698 -> 32 [style=solid label="\"bool\""]
  698 -> 33 [style=solid label="\"short\""]
  698 -> 34 [style=solid label="\"int\""]
  698 -> 35 [style=solid label="\"long\""]
  698 -> 36 [style=solid label="\"signed\""]
  698 -> 37 [style=solid label="\"unsigned\""]
  698 -> 38 [style=solid label="\"float\""]
  698 -> 39 [style=solid label="\"double\""]
  698 -> 40 [style=solid label="\"void\""]
  698 -> 118 [style=solid label="STRING_LITERAL"]
  698 -> 266 [style=solid label="\"sizeof\""]
  698 -> 267 [style=solid label="\"alignof\""]
  698 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  698 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  698 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  698 -> 272 [style=dashed label="SCOPE-opt"]
  698 -> 273 [style=dashed label="additive-expression"]
  698 -> 274 [style=dashed label="and-expression"]
  698 -> 276 [style=dashed label="await-expression"]
  698 -> 277 [style=dashed label="boolean-literal"]
  698 -> 278 [style=dashed label="cast-expression"]
  698 -> 279 [style=dashed label="character-literal"]
  698 -> 424 [style=dashed label="class-key"]
  698 -> 55 [style=dashed label="class-name"]
  698 -> 280 [style=dashed label="compare-expression"]
  698 -> 327 [style=dashed label="conditional-expression"]
  698 -> 425 [style=dashed label="constant-expression"]
  698 -> 282 [style=dashed label="conversion-function-id"]
  698 -> 57 [style=dashed label="cv-qualifier"]
  698 -> 63 [style=dashed label="decltype-specifier"]
  698 -> 283 [style=dashed label="delete-expression"]
  698 -> 66 [style=dashed label="elaborated-enum-specifier"]
  698 -> 67 [style=dashed label="elaborated-type-specifier"]
  698 -> 71 [style=dashed label="enum-name"]
  698 -> 284 [style=dashed label="equality-expression"]
  698 -> 285 [style=dashed label="exclusive-or-expression"]
  698 -> 287 [style=dashed label="floating-point-literal"]
  698 -> 288 [style=dashed label="fold-expression"]
  698 -> 426 [style=dashed label="id-expression"]
  698 -> 290 [style=dashed label="inclusive-or-expression"]
  698 -> 291 [style=dashed label="integer-literal"]
  698 -> 292 [style=dashed label="lambda-expression"]
  698 -> 293 [style=dashed label="lambda-introducer"]
  698 -> 294 [style=dashed label="literal"]
  698 -> 295 [style=dashed label="literal-operator-id"]
  698 -> 296 [style=dashed label="logical-and-expression"]
  698 -> 329 [style=dashed label="logical-or-expression"]
  698 -> 298 [style=dashed label="multiplicative-expression"]
  698 -> 85 [style=dashed label="namespace-alias"]
  698 -> 88 [style=dashed label="namespace-name"]
  698 -> 299 [style=dashed label="nested-name-specifier"]
  698 -> 90 [style=dashed label="nested-name-specifier-opt"]
  698 -> 300 [style=dashed label="new-expression"]
  698 -> 301 [style=dashed label="noexcept-expression"]
  698 -> 302 [style=dashed label="operator-function-id"]
  698 -> 94 [style=dashed label="placeholder-type-specifier"]
  698 -> 303 [style=dashed label="pm-expression"]
  698 -> 304 [style=dashed label="pointer-literal"]
  698 -> 305 [style=dashed label="postfix-expression"]
  698 -> 306 [style=dashed label="primary-expression"]
  698 -> 307 [style=dashed label="qualified-id"]
  698 -> 308 [style=dashed label="relational-expression"]
  698 -> 309 [style=dashed label="requires-expression"]
  698 -> 310 [style=dashed label="shift-expression"]
  698 -> 311 [style=dashed label="simple-template-id"]
  698 -> 427 [style=dashed label="simple-type-specifier"]
  698 -> 313 [style=dashed label="string-literal"]
  698 -> 923 [style=dashed label="template-argument"]
  698 -> 314 [style=dashed label="template-id"]
  698 -> 102 [style=dashed label="template-name"]
  698 -> 104 [style=dashed label="type-constraint"]
  698 -> 105 [style=dashed label="type-constraint-opt"]
  698 -> 431 [style=dashed label="type-id"]
  698 -> 106 [style=dashed label="type-name"]
  698 -> 432 [style=dashed label="type-specifier"]
  698 -> 433 [style=dashed label="type-specifier-seq"]
  698 -> 108 [style=dashed label="typedef-name"]
  698 -> 434 [style=dashed label="typename-specifier"]
  698 -> 317 [style=dashed label="unary-expression"]
  698 -> 318 [style=dashed label="unary-operator"]
  698 -> 319 [style=dashed label="unqualified-id"]
  698 -> 320 [style=dashed label="user-defined-character-literal"]
  698 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  698 -> 322 [style=dashed label="user-defined-integer-literal"]
  698 -> 323 [style=dashed label="user-defined-literal"]
  698 -> 324 [style=dashed label="user-defined-string-literal"]
  698 -> "698R19" [style=solid]
 "698R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  698 -> "698R469d" [label="[IDENTIFIER]", style=solid]
 "698R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  698 -> "698R722d" [label="[\"decltype\"]", style=solid]
 "698R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  698 -> "698R722" [label="[\"auto\"]", style=solid]
 "698R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  699 [label="State 699\n\l656 simple-template-id: template-name \"<\" template-argument-list-opt \">\" •\l"]
  699 -> "699R656" [style=solid]
 "699R656" [label="R656", fillcolor=3, shape=diamond, style=filled]
  700 [label="State 700\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l741 type-specifier-seq: type-specifier attribute-specifier-seq-opt •\l"]
  700 -> 158 [style=solid label="\"alignas\""]
  700 -> 162 [style=solid label="\"[\""]
  700 -> 166 [style=dashed label="alignment-specifier"]
  700 -> 167 [style=dashed label="attribute-specifier"]
  700 -> "700R741d" [label="[\"alignas\", \"[\"]", style=solid]
 "700R741d" [label="R741", fillcolor=5, shape=diamond, style=filled]
  700 -> "700R741" [style=solid]
 "700R741" [label="R741", fillcolor=3, shape=diamond, style=filled]
  701 [label="State 701\n\l742 type-specifier-seq: type-specifier type-specifier-seq •\l"]
  701 -> "701R742" [style=solid]
 "701R742" [label="R742", fillcolor=3, shape=diamond, style=filled]
  702 [label="State 702\n\l500 noptr-abstract-pack-declarator: \"...\" •\l"]
  702 -> "702R500" [style=solid]
 "702R500" [label="R500", fillcolor=3, shape=diamond, style=filled]
  703 [label="State 703\n\l495 noptr-abstract-declarator: \"(\" • ptr-abstract-declarator \")\"\l"]
  703 -> 4 [style=solid label="IDENTIFIER"]
  703 -> 6 [style=solid label="\"::\""]
  703 -> 703 [style=solid label="\"(\""]
  703 -> 160 [style=solid label="\"&\""]
  703 -> 163 [style=solid label="\"&&\""]
  703 -> 21 [style=solid label="\"decltype\""]
  703 -> 164 [style=solid label="\"*\""]
  703 -> 55 [style=dashed label="class-name"]
  703 -> 121 [style=dashed label="decltype-specifier"]
  703 -> 71 [style=dashed label="enum-name"]
  703 -> 85 [style=dashed label="namespace-alias"]
  703 -> 88 [style=dashed label="namespace-name"]
  703 -> 187 [style=dashed label="nested-name-specifier"]
  703 -> 707 [style=dashed label="noptr-abstract-declarator"]
  703 -> 924 [style=dashed label="noptr-abstract-declarator-opt"]
  703 -> 925 [style=dashed label="ptr-abstract-declarator"]
  703 -> 926 [style=dashed label="ptr-operator"]
  703 -> 96 [style=dashed label="simple-template-id"]
  703 -> 102 [style=dashed label="template-name"]
  703 -> 106 [style=dashed label="type-name"]
  703 -> 108 [style=dashed label="typedef-name"]
  703 -> "703R496d" [label="[\"(\"]", style=solid]
 "703R496d" [label="R496", fillcolor=5, shape=diamond, style=filled]
  703 -> "703R496" [style=solid]
 "703R496" [label="R496", fillcolor=3, shape=diamond, style=filled]
  704 [label="State 704\n\l 33 abstract-declarator-opt: abstract-declarator •\l"]
  704 -> "704R33" [style=solid]
 "704R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  705 [label="State 705\n\l724 type-id: type-specifier-seq abstract-declarator-opt •\l"]
  705 -> "705R724" [style=solid]
 "705R724" [label="R724", fillcolor=3, shape=diamond, style=filled]
  706 [label="State 706\n\l 31 abstract-declarator: abstract-pack-declarator •\l"]
  706 -> "706R31" [style=solid]
 "706R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  707 [label="State 707\n\l497 noptr-abstract-declarator-opt: noptr-abstract-declarator •\l599 ptr-abstract-declarator: noptr-abstract-declarator •\l"]
  707 -> "707R497" [label="[\"(\", \"[\"]", style=solid]
 "707R497" [label="R497", fillcolor=3, shape=diamond, style=filled]
  707 -> "707R599d" [label="[\"(\"]", style=solid]
 "707R599d" [label="R599", fillcolor=5, shape=diamond, style=filled]
  707 -> "707R599" [style=solid]
 "707R599" [label="R599", fillcolor=3, shape=diamond, style=filled]
  708 [label="State 708\n\l 30 abstract-declarator: noptr-abstract-declarator-opt • parameters-and-qualifiers trailing-return-type\l493 noptr-abstract-declarator: noptr-abstract-declarator-opt • parameters-and-qualifiers\l494                          | noptr-abstract-declarator-opt • \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt\l"]
  708 -> 365 [style=solid label="\"(\""]
  708 -> 927 [style=solid label="\"[\""]
  708 -> 928 [style=dashed label="parameters-and-qualifiers"]
  709 [label="State 709\n\l 34 abstract-pack-declarator: noptr-abstract-pack-declarator •\l498 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator • parameters-and-qualifiers\l499                               | noptr-abstract-pack-declarator • \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt\l"]
  709 -> 365 [style=solid label="\"(\""]
  709 -> 929 [style=solid label="\"[\""]
  709 -> 930 [style=dashed label="parameters-and-qualifiers"]
  709 -> "709R34d" [label="[\"(\"]", style=solid]
 "709R34d" [label="R34", fillcolor=5, shape=diamond, style=filled]
  709 -> "709R34" [style=solid]
 "709R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  710 [label="State 710\n\l 29 abstract-declarator: ptr-abstract-declarator •\l"]
  710 -> "710R29" [style=solid]
 "710R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  711 [label="State 711\n\l 35 abstract-pack-declarator: ptr-operator • abstract-pack-declarator\l600 ptr-abstract-declarator: ptr-operator • ptr-abstract-declarator-opt\l"]
  711 -> 702 [style=solid label="\"...\""]
  711 -> 4 [style=solid label="IDENTIFIER"]
  711 -> 6 [style=solid label="\"::\""]
  711 -> 703 [style=solid label="\"(\""]
  711 -> 160 [style=solid label="\"&\""]
  711 -> 163 [style=solid label="\"&&\""]
  711 -> 21 [style=solid label="\"decltype\""]
  711 -> 164 [style=solid label="\"*\""]
  711 -> 931 [style=dashed label="abstract-pack-declarator"]
  711 -> 55 [style=dashed label="class-name"]
  711 -> 121 [style=dashed label="decltype-specifier"]
  711 -> 71 [style=dashed label="enum-name"]
  711 -> 85 [style=dashed label="namespace-alias"]
  711 -> 88 [style=dashed label="namespace-name"]
  711 -> 187 [style=dashed label="nested-name-specifier"]
  711 -> 707 [style=dashed label="noptr-abstract-declarator"]
  711 -> 924 [style=dashed label="noptr-abstract-declarator-opt"]
  711 -> 709 [style=dashed label="noptr-abstract-pack-declarator"]
  711 -> 932 [style=dashed label="ptr-abstract-declarator"]
  711 -> 933 [style=dashed label="ptr-abstract-declarator-opt"]
  711 -> 711 [style=dashed label="ptr-operator"]
  711 -> 96 [style=dashed label="simple-template-id"]
  711 -> 102 [style=dashed label="template-name"]
  711 -> 106 [style=dashed label="type-name"]
  711 -> 108 [style=dashed label="typedef-name"]
  711 -> "711R496d" [label="[\"(\"]", style=solid]
 "711R496d" [label="R496", fillcolor=5, shape=diamond, style=filled]
  711 -> "711R496" [label="[\"[\"]", style=solid]
 "711R496" [label="R496", fillcolor=3, shape=diamond, style=filled]
  711 -> "711R601d" [label="[\"...\", \"(\"]", style=solid]
 "711R601d" [label="R601", fillcolor=5, shape=diamond, style=filled]
  711 -> "711R601" [style=solid]
 "711R601" [label="R601", fillcolor=3, shape=diamond, style=filled]
  712 [label="State 712\n\l566 placeholder-type-specifier: type-constraint-opt \"decltype\" \"(\" \"auto\" • \")\"\l"]
  712 -> 934 [style=solid label="\")\""]
  713 [label="State 713\n\l394 linkage-specification: \"extern\" string-literal \"{\" declaration-seq-opt \"}\" •\l"]
  713 -> "713R394" [style=solid]
 "713R394" [label="R394", fillcolor=3, shape=diamond, style=filled]
  714 [label="State 714\n\l554 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq • declarator\l555                      | attribute-specifier-seq-opt THIS-opt decl-specifier-seq • declarator \"=\" initializer-clause\l556                      | attribute-specifier-seq-opt THIS-opt decl-specifier-seq • abstract-declarator-opt\l557                      | attribute-specifier-seq-opt THIS-opt decl-specifier-seq • abstract-declarator-opt \"=\" initializer-clause\l"]
  714 -> 935 [style=solid label="\"...\""]
  714 -> 4 [style=solid label="IDENTIFIER"]
  714 -> 6 [style=solid label="\"::\""]
  714 -> 936 [style=solid label="\"(\""]
  714 -> 160 [style=solid label="\"&\""]
  714 -> 163 [style=solid label="\"&&\""]
  714 -> 21 [style=solid label="\"decltype\""]
  714 -> 164 [style=solid label="\"*\""]
  714 -> 165 [style=dashed label="ELLIPSIS-opt"]
  714 -> 704 [style=dashed label="abstract-declarator"]
  714 -> 937 [style=dashed label="abstract-declarator-opt"]
  714 -> 706 [style=dashed label="abstract-pack-declarator"]
  714 -> 55 [style=dashed label="class-name"]
  714 -> 938 [style=dashed label="declarator"]
  714 -> 171 [style=dashed label="declarator-id"]
  714 -> 121 [style=dashed label="decltype-specifier"]
  714 -> 71 [style=dashed label="enum-name"]
  714 -> 85 [style=dashed label="namespace-alias"]
  714 -> 88 [style=dashed label="namespace-name"]
  714 -> 187 [style=dashed label="nested-name-specifier"]
  714 -> 707 [style=dashed label="noptr-abstract-declarator"]
  714 -> 708 [style=dashed label="noptr-abstract-declarator-opt"]
  714 -> 709 [style=dashed label="noptr-abstract-pack-declarator"]
  714 -> 173 [style=dashed label="noptr-declarator"]
  714 -> 710 [style=dashed label="ptr-abstract-declarator"]
  714 -> 174 [style=dashed label="ptr-declarator"]
  714 -> 939 [style=dashed label="ptr-operator"]
  714 -> 96 [style=dashed label="simple-template-id"]
  714 -> 102 [style=dashed label="template-name"]
  714 -> 106 [style=dashed label="type-name"]
  714 -> 108 [style=dashed label="typedef-name"]
  714 -> "714R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "714R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  714 -> "714R5" [label="[\"operator\", \"~\"]", style=solid]
 "714R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  714 -> "714R32d" [label="[\"...\"]", style=solid]
 "714R32d" [label="R32", fillcolor=5, shape=diamond, style=filled]
  714 -> "714R32" [style=solid]
 "714R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  714 -> "714R496d" [label="[\"(\"]", style=solid]
 "714R496d" [label="R496", fillcolor=5, shape=diamond, style=filled]
  714 -> "714R496" [label="[\"[\"]", style=solid]
 "714R496" [label="R496", fillcolor=3, shape=diamond, style=filled]
  715 [label="State 715\n\l732 type-parameter: template-head type-parameter-key ELLIPSIS-opt • IDENTIFIER-opt\l"]
  715 -> 445 [style=solid label="IDENTIFIER"]
  715 -> 940 [style=dashed label="IDENTIFIER-opt"]
  715 -> "715R11" [style=solid]
 "715R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  716 [label="State 716\n\l733 type-parameter: template-head type-parameter-key IDENTIFIER-opt • \"=\" id-expression\l"]
  716 -> 941 [style=solid label="\"=\""]
  717 [label="State 717\n\l712 template-parameter-list: template-parameter-list \",\" template-parameter •\l"]
  717 -> "717R712" [style=solid]
 "717R712" [label="R712", fillcolor=3, shape=diamond, style=filled]
  718 [label="State 718\n\l635 requires-clause-opt: requires-clause •\l"]
  718 -> "718R635" [style=solid]
 "718R635" [label="R635", fillcolor=3, shape=diamond, style=filled]
  719 [label="State 719\n\l704 template-head: \"template\" \"<\" template-parameter-list \">\" requires-clause-opt •\l"]
  719 -> "719R704" [style=solid]
 "719R704" [label="R704", fillcolor=3, shape=diamond, style=filled]
  720 [label="State 720\n\l730 type-parameter: type-constraint ELLIPSIS-opt IDENTIFIER-opt •\l"]
  720 -> "720R730" [style=solid]
 "720R730" [label="R730", fillcolor=3, shape=diamond, style=filled]
  721 [label="State 721\n\l731 type-parameter: type-constraint IDENTIFIER-opt \"=\" • type-id\l"]
  721 -> 4 [style=solid label="IDENTIFIER"]
  721 -> 6 [style=solid label="\"::\""]
  721 -> 8 [style=solid label="\"typename\""]
  721 -> 12 [style=solid label="\"class\""]
  721 -> 13 [style=solid label="\"struct\""]
  721 -> 14 [style=solid label="\"union\""]
  721 -> 15 [style=solid label="\"const\""]
  721 -> 16 [style=solid label="\"volatile\""]
  721 -> 21 [style=solid label="\"decltype\""]
  721 -> 125 [style=solid label="\"enum\""]
  721 -> 27 [style=solid label="\"char\""]
  721 -> 28 [style=solid label="\"char8_t\""]
  721 -> 29 [style=solid label="\"char16_t\""]
  721 -> 30 [style=solid label="\"char32_t\""]
  721 -> 31 [style=solid label="\"wchar_t\""]
  721 -> 32 [style=solid label="\"bool\""]
  721 -> 33 [style=solid label="\"short\""]
  721 -> 34 [style=solid label="\"int\""]
  721 -> 35 [style=solid label="\"long\""]
  721 -> 36 [style=solid label="\"signed\""]
  721 -> 37 [style=solid label="\"unsigned\""]
  721 -> 38 [style=solid label="\"float\""]
  721 -> 39 [style=solid label="\"double\""]
  721 -> 40 [style=solid label="\"void\""]
  721 -> 424 [style=dashed label="class-key"]
  721 -> 55 [style=dashed label="class-name"]
  721 -> 57 [style=dashed label="cv-qualifier"]
  721 -> 63 [style=dashed label="decltype-specifier"]
  721 -> 66 [style=dashed label="elaborated-enum-specifier"]
  721 -> 67 [style=dashed label="elaborated-type-specifier"]
  721 -> 71 [style=dashed label="enum-name"]
  721 -> 85 [style=dashed label="namespace-alias"]
  721 -> 88 [style=dashed label="namespace-name"]
  721 -> 89 [style=dashed label="nested-name-specifier"]
  721 -> 90 [style=dashed label="nested-name-specifier-opt"]
  721 -> 94 [style=dashed label="placeholder-type-specifier"]
  721 -> 96 [style=dashed label="simple-template-id"]
  721 -> 97 [style=dashed label="simple-type-specifier"]
  721 -> 102 [style=dashed label="template-name"]
  721 -> 104 [style=dashed label="type-constraint"]
  721 -> 105 [style=dashed label="type-constraint-opt"]
  721 -> 942 [style=dashed label="type-id"]
  721 -> 106 [style=dashed label="type-name"]
  721 -> 432 [style=dashed label="type-specifier"]
  721 -> 433 [style=dashed label="type-specifier-seq"]
  721 -> 108 [style=dashed label="typedef-name"]
  721 -> 109 [style=dashed label="typename-specifier"]
  721 -> "721R469d" [label="[IDENTIFIER]", style=solid]
 "721R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  721 -> "721R722d" [label="[\"decltype\"]", style=solid]
 "721R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  721 -> "721R722" [label="[]", style=solid]
 "721R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  722 [label="State 722\n\l728 type-parameter: type-parameter-key ELLIPSIS-opt IDENTIFIER-opt •\l"]
  722 -> "722R728" [style=solid]
 "722R728" [label="R728", fillcolor=3, shape=diamond, style=filled]
  723 [label="State 723\n\l729 type-parameter: type-parameter-key IDENTIFIER-opt \"=\" • type-id\l"]
  723 -> 4 [style=solid label="IDENTIFIER"]
  723 -> 6 [style=solid label="\"::\""]
  723 -> 8 [style=solid label="\"typename\""]
  723 -> 12 [style=solid label="\"class\""]
  723 -> 13 [style=solid label="\"struct\""]
  723 -> 14 [style=solid label="\"union\""]
  723 -> 15 [style=solid label="\"const\""]
  723 -> 16 [style=solid label="\"volatile\""]
  723 -> 21 [style=solid label="\"decltype\""]
  723 -> 125 [style=solid label="\"enum\""]
  723 -> 27 [style=solid label="\"char\""]
  723 -> 28 [style=solid label="\"char8_t\""]
  723 -> 29 [style=solid label="\"char16_t\""]
  723 -> 30 [style=solid label="\"char32_t\""]
  723 -> 31 [style=solid label="\"wchar_t\""]
  723 -> 32 [style=solid label="\"bool\""]
  723 -> 33 [style=solid label="\"short\""]
  723 -> 34 [style=solid label="\"int\""]
  723 -> 35 [style=solid label="\"long\""]
  723 -> 36 [style=solid label="\"signed\""]
  723 -> 37 [style=solid label="\"unsigned\""]
  723 -> 38 [style=solid label="\"float\""]
  723 -> 39 [style=solid label="\"double\""]
  723 -> 40 [style=solid label="\"void\""]
  723 -> 424 [style=dashed label="class-key"]
  723 -> 55 [style=dashed label="class-name"]
  723 -> 57 [style=dashed label="cv-qualifier"]
  723 -> 63 [style=dashed label="decltype-specifier"]
  723 -> 66 [style=dashed label="elaborated-enum-specifier"]
  723 -> 67 [style=dashed label="elaborated-type-specifier"]
  723 -> 71 [style=dashed label="enum-name"]
  723 -> 85 [style=dashed label="namespace-alias"]
  723 -> 88 [style=dashed label="namespace-name"]
  723 -> 89 [style=dashed label="nested-name-specifier"]
  723 -> 90 [style=dashed label="nested-name-specifier-opt"]
  723 -> 94 [style=dashed label="placeholder-type-specifier"]
  723 -> 96 [style=dashed label="simple-template-id"]
  723 -> 97 [style=dashed label="simple-type-specifier"]
  723 -> 102 [style=dashed label="template-name"]
  723 -> 104 [style=dashed label="type-constraint"]
  723 -> 105 [style=dashed label="type-constraint-opt"]
  723 -> 943 [style=dashed label="type-id"]
  723 -> 106 [style=dashed label="type-name"]
  723 -> 432 [style=dashed label="type-specifier"]
  723 -> 433 [style=dashed label="type-specifier-seq"]
  723 -> 108 [style=dashed label="typedef-name"]
  723 -> 109 [style=dashed label="typename-specifier"]
  723 -> "723R469d" [label="[IDENTIFIER]", style=solid]
 "723R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  723 -> "723R722d" [label="[\"decltype\"]", style=solid]
 "723R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  723 -> "723R722" [label="[]", style=solid]
 "723R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  724 [label="State 724\n\l 44 alias-declaration: \"using\" IDENTIFIER attribute-specifier-seq-opt \"=\" defining-type-id • \";\"\l"]
  724 -> 944 [style=solid label="\";\""]
  725 [label="State 725\n\l222 defining-type-specifier-seq: defining-type-specifier • attribute-specifier-seq-opt\l223                            | defining-type-specifier • defining-type-specifier-seq\l"]
  725 -> 4 [style=solid label="IDENTIFIER"]
  725 -> 6 [style=solid label="\"::\""]
  725 -> 8 [style=solid label="\"typename\""]
  725 -> 12 [style=solid label="\"class\""]
  725 -> 13 [style=solid label="\"struct\""]
  725 -> 14 [style=solid label="\"union\""]
  725 -> 15 [style=solid label="\"const\""]
  725 -> 16 [style=solid label="\"volatile\""]
  725 -> 21 [style=solid label="\"decltype\""]
  725 -> 22 [style=solid label="\"enum\""]
  725 -> 27 [style=solid label="\"char\""]
  725 -> 28 [style=solid label="\"char8_t\""]
  725 -> 29 [style=solid label="\"char16_t\""]
  725 -> 30 [style=solid label="\"char32_t\""]
  725 -> 31 [style=solid label="\"wchar_t\""]
  725 -> 32 [style=solid label="\"bool\""]
  725 -> 33 [style=solid label="\"short\""]
  725 -> 34 [style=solid label="\"int\""]
  725 -> 35 [style=solid label="\"long\""]
  725 -> 36 [style=solid label="\"signed\""]
  725 -> 37 [style=solid label="\"unsigned\""]
  725 -> 38 [style=solid label="\"float\""]
  725 -> 39 [style=solid label="\"double\""]
  725 -> 40 [style=solid label="\"void\""]
  725 -> 177 [style=dashed label="attribute-specifier-seq"]
  725 -> 945 [style=dashed label="attribute-specifier-seq-opt"]
  725 -> 53 [style=dashed label="class-head"]
  725 -> 54 [style=dashed label="class-key"]
  725 -> 55 [style=dashed label="class-name"]
  725 -> 56 [style=dashed label="class-specifier"]
  725 -> 57 [style=dashed label="cv-qualifier"]
  725 -> 63 [style=dashed label="decltype-specifier"]
  725 -> 725 [style=dashed label="defining-type-specifier"]
  725 -> 946 [style=dashed label="defining-type-specifier-seq"]
  725 -> 66 [style=dashed label="elaborated-enum-specifier"]
  725 -> 67 [style=dashed label="elaborated-type-specifier"]
  725 -> 69 [style=dashed label="enum-head"]
  725 -> 154 [style=dashed label="enum-key"]
  725 -> 71 [style=dashed label="enum-name"]
  725 -> 72 [style=dashed label="enum-specifier"]
  725 -> 85 [style=dashed label="namespace-alias"]
  725 -> 88 [style=dashed label="namespace-name"]
  725 -> 89 [style=dashed label="nested-name-specifier"]
  725 -> 90 [style=dashed label="nested-name-specifier-opt"]
  725 -> 94 [style=dashed label="placeholder-type-specifier"]
  725 -> 96 [style=dashed label="simple-template-id"]
  725 -> 97 [style=dashed label="simple-type-specifier"]
  725 -> 102 [style=dashed label="template-name"]
  725 -> 104 [style=dashed label="type-constraint"]
  725 -> 105 [style=dashed label="type-constraint-opt"]
  725 -> 106 [style=dashed label="type-name"]
  725 -> 107 [style=dashed label="type-specifier"]
  725 -> 108 [style=dashed label="typedef-name"]
  725 -> 109 [style=dashed label="typename-specifier"]
  725 -> "725R83d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "725R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  725 -> "725R83" [style=solid]
 "725R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  725 -> "725R469d" [label="[IDENTIFIER]", style=solid]
 "725R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  725 -> "725R722d" [label="[\"decltype\"]", style=solid]
 "725R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  725 -> "725R722" [label="[\"auto\"]", style=solid]
 "725R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  726 [label="State 726\n\l218 defining-type-id: defining-type-specifier-seq • abstract-declarator-opt\l"]
  726 -> 702 [style=solid label="\"...\""]
  726 -> 4 [style=solid label="IDENTIFIER"]
  726 -> 6 [style=solid label="\"::\""]
  726 -> 703 [style=solid label="\"(\""]
  726 -> 160 [style=solid label="\"&\""]
  726 -> 163 [style=solid label="\"&&\""]
  726 -> 21 [style=solid label="\"decltype\""]
  726 -> 164 [style=solid label="\"*\""]
  726 -> 704 [style=dashed label="abstract-declarator"]
  726 -> 947 [style=dashed label="abstract-declarator-opt"]
  726 -> 706 [style=dashed label="abstract-pack-declarator"]
  726 -> 55 [style=dashed label="class-name"]
  726 -> 121 [style=dashed label="decltype-specifier"]
  726 -> 71 [style=dashed label="enum-name"]
  726 -> 85 [style=dashed label="namespace-alias"]
  726 -> 88 [style=dashed label="namespace-name"]
  726 -> 187 [style=dashed label="nested-name-specifier"]
  726 -> 707 [style=dashed label="noptr-abstract-declarator"]
  726 -> 708 [style=dashed label="noptr-abstract-declarator-opt"]
  726 -> 709 [style=dashed label="noptr-abstract-pack-declarator"]
  726 -> 710 [style=dashed label="ptr-abstract-declarator"]
  726 -> 711 [style=dashed label="ptr-operator"]
  726 -> 96 [style=dashed label="simple-template-id"]
  726 -> 102 [style=dashed label="template-name"]
  726 -> 106 [style=dashed label="type-name"]
  726 -> 108 [style=dashed label="typedef-name"]
  726 -> "726R32" [style=solid]
 "726R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  726 -> "726R496d" [label="[\"(\"]", style=solid]
 "726R496d" [label="R496", fillcolor=5, shape=diamond, style=filled]
  726 -> "726R496" [label="[\"[\"]", style=solid]
 "726R496" [label="R496", fillcolor=3, shape=diamond, style=filled]
  727 [label="State 727\n\l785 using-declarator-list: using-declarator-list \",\" using-declarator ELLIPSIS-opt •\l"]
  727 -> "727R785" [style=solid]
 "727R785" [label="R785", fillcolor=3, shape=diamond, style=filled]
  728 [label="State 728\n\l280 expression: expression • \",\" assignment-expression\l488 noexcept-expression: \"noexcept\" \"(\" expression • \")\"\l"]
  728 -> 552 [style=solid label="\",\""]
  728 -> 948 [style=solid label="\")\""]
  729 [label="State 729\n\l320 fold-operator: \",\" •\l"]
  729 -> "729R320" [style=solid]
 "729R320" [label="R320", fillcolor=3, shape=diamond, style=filled]
  730 [label="State 730\n\l291 fold-operator: \"+\" •\l"]
  730 -> "730R291" [style=solid]
 "730R291" [label="R291", fillcolor=3, shape=diamond, style=filled]
  731 [label="State 731\n\l292 fold-operator: \"-\" •\l"]
  731 -> "731R292" [style=solid]
 "731R292" [label="R292", fillcolor=3, shape=diamond, style=filled]
  732 [label="State 732\n\l311 fold-operator: \"=\" •\l"]
  732 -> "732R311" [style=solid]
 "732R311" [label="R311", fillcolor=3, shape=diamond, style=filled]
  733 [label="State 733\n\l297 fold-operator: \"&\" •\l"]
  733 -> "733R297" [style=solid]
 "733R297" [label="R297", fillcolor=3, shape=diamond, style=filled]
  734 [label="State 734\n\l303 fold-operator: \"*=\" •\l"]
  734 -> "734R303" [style=solid]
 "734R303" [label="R303", fillcolor=3, shape=diamond, style=filled]
  735 [label="State 735\n\l304 fold-operator: \"/=\" •\l"]
  735 -> "735R304" [style=solid]
 "735R304" [label="R304", fillcolor=3, shape=diamond, style=filled]
  736 [label="State 736\n\l305 fold-operator: \"%=\" •\l"]
  736 -> "736R305" [style=solid]
 "736R305" [label="R305", fillcolor=3, shape=diamond, style=filled]
  737 [label="State 737\n\l301 fold-operator: \"+=\" •\l"]
  737 -> "737R301" [style=solid]
 "737R301" [label="R301", fillcolor=3, shape=diamond, style=filled]
  738 [label="State 738\n\l302 fold-operator: \"-=\" •\l"]
  738 -> "738R302" [style=solid]
 "738R302" [label="R302", fillcolor=3, shape=diamond, style=filled]
  739 [label="State 739\n\l310 fold-operator: \">>=\" •\l"]
  739 -> "739R310" [style=solid]
 "739R310" [label="R310", fillcolor=3, shape=diamond, style=filled]
  740 [label="State 740\n\l309 fold-operator: \"<<=\" •\l"]
  740 -> "740R309" [style=solid]
 "740R309" [label="R309", fillcolor=3, shape=diamond, style=filled]
  741 [label="State 741\n\l307 fold-operator: \"&=\" •\l"]
  741 -> "741R307" [style=solid]
 "741R307" [label="R307", fillcolor=3, shape=diamond, style=filled]
  742 [label="State 742\n\l306 fold-operator: \"^=\" •\l"]
  742 -> "742R306" [style=solid]
 "742R306" [label="R306", fillcolor=3, shape=diamond, style=filled]
  743 [label="State 743\n\l308 fold-operator: \"|=\" •\l"]
  743 -> "743R308" [style=solid]
 "743R308" [label="R308", fillcolor=3, shape=diamond, style=filled]
  744 [label="State 744\n\l318 fold-operator: \"&&\" •\l"]
  744 -> "744R318" [style=solid]
 "744R318" [label="R318", fillcolor=3, shape=diamond, style=filled]
  745 [label="State 745\n\l319 fold-operator: \"||\" •\l"]
  745 -> "745R319" [style=solid]
 "745R319" [label="R319", fillcolor=3, shape=diamond, style=filled]
  746 [label="State 746\n\l312 fold-operator: \"==\" •\l"]
  746 -> "746R312" [style=solid]
 "746R312" [label="R312", fillcolor=3, shape=diamond, style=filled]
  747 [label="State 747\n\l313 fold-operator: \"!=\" •\l"]
  747 -> "747R313" [style=solid]
 "747R313" [label="R313", fillcolor=3, shape=diamond, style=filled]
  748 [label="State 748\n\l296 fold-operator: \"^\" •\l"]
  748 -> "748R296" [style=solid]
 "748R296" [label="R296", fillcolor=3, shape=diamond, style=filled]
  749 [label="State 749\n\l314 fold-operator: \"<\" •\l"]
  749 -> "749R314" [style=solid]
 "749R314" [label="R314", fillcolor=3, shape=diamond, style=filled]
  750 [label="State 750\n\l315 fold-operator: \">\" •\l"]
  750 -> "750R315" [style=solid]
 "750R315" [label="R315", fillcolor=3, shape=diamond, style=filled]
  751 [label="State 751\n\l293 fold-operator: \"*\" •\l"]
  751 -> "751R293" [style=solid]
 "751R293" [label="R293", fillcolor=3, shape=diamond, style=filled]
  752 [label="State 752\n\l294 fold-operator: \"/\" •\l"]
  752 -> "752R294" [style=solid]
 "752R294" [label="R294", fillcolor=3, shape=diamond, style=filled]
  753 [label="State 753\n\l295 fold-operator: \"%\" •\l"]
  753 -> "753R295" [style=solid]
 "753R295" [label="R295", fillcolor=3, shape=diamond, style=filled]
  754 [label="State 754\n\l298 fold-operator: \"|\" •\l"]
  754 -> "754R298" [style=solid]
 "754R298" [label="R298", fillcolor=3, shape=diamond, style=filled]
  755 [label="State 755\n\l299 fold-operator: \"<<\" •\l"]
  755 -> "755R299" [style=solid]
 "755R299" [label="R299", fillcolor=3, shape=diamond, style=filled]
  756 [label="State 756\n\l300 fold-operator: \">>\" •\l"]
  756 -> "756R300" [style=solid]
 "756R300" [label="R300", fillcolor=3, shape=diamond, style=filled]
  757 [label="State 757\n\l316 fold-operator: \"<=\" •\l"]
  757 -> "757R316" [style=solid]
 "757R316" [label="R316", fillcolor=3, shape=diamond, style=filled]
  758 [label="State 758\n\l317 fold-operator: \">=\" •\l"]
  758 -> "758R317" [style=solid]
 "758R317" [label="R317", fillcolor=3, shape=diamond, style=filled]
  759 [label="State 759\n\l321 fold-operator: \".*\" •\l"]
  759 -> "759R321" [style=solid]
 "759R321" [label="R321", fillcolor=3, shape=diamond, style=filled]
  760 [label="State 760\n\l322 fold-operator: \"->*\" •\l"]
  760 -> "760R322" [style=solid]
 "760R322" [label="R322", fillcolor=3, shape=diamond, style=filled]
  761 [label="State 761\n\l289 fold-expression: \"(\" \"...\" fold-operator • cast-expression \")\"\l"]
  761 -> 238 [style=solid label="IDENTIFIER"]
  761 -> 239 [style=solid label="\"noexcept\""]
  761 -> 240 [style=solid label="\"!\""]
  761 -> 241 [style=solid label="\"::\""]
  761 -> 242 [style=solid label="\"this\""]
  761 -> 8 [style=solid label="\"typename\""]
  761 -> 243 [style=solid label="\"+\""]
  761 -> 244 [style=solid label="\"-\""]
  761 -> 245 [style=solid label="\"(\""]
  761 -> 246 [style=solid label="\"&\""]
  761 -> 247 [style=solid label="\"[\""]
  761 -> 248 [style=solid label="\"co_await\""]
  761 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  761 -> 250 [style=solid label="CHARACTER_LITERAL"]
  761 -> 251 [style=solid label="\"operator\""]
  761 -> 21 [style=solid label="\"decltype\""]
  761 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  761 -> 253 [style=solid label="\"*\""]
  761 -> 254 [style=solid label="INTEGER_LITERAL"]
  761 -> 255 [style=solid label="\"requires\""]
  761 -> 256 [style=solid label="\"~\""]
  761 -> 257 [style=solid label="\"++\""]
  761 -> 258 [style=solid label="\"--\""]
  761 -> 259 [style=solid label="POINTER_LITERAL"]
  761 -> 260 [style=solid label="\"dynamic_cast\""]
  761 -> 261 [style=solid label="\"static_cast\""]
  761 -> 262 [style=solid label="\"reinterpret_cast\""]
  761 -> 263 [style=solid label="\"const_cast\""]
  761 -> 264 [style=solid label="\"typeid\""]
  761 -> 27 [style=solid label="\"char\""]
  761 -> 28 [style=solid label="\"char8_t\""]
  761 -> 29 [style=solid label="\"char16_t\""]
  761 -> 30 [style=solid label="\"char32_t\""]
  761 -> 31 [style=solid label="\"wchar_t\""]
  761 -> 32 [style=solid label="\"bool\""]
  761 -> 33 [style=solid label="\"short\""]
  761 -> 34 [style=solid label="\"int\""]
  761 -> 35 [style=solid label="\"long\""]
  761 -> 36 [style=solid label="\"signed\""]
  761 -> 37 [style=solid label="\"unsigned\""]
  761 -> 38 [style=solid label="\"float\""]
  761 -> 39 [style=solid label="\"double\""]
  761 -> 40 [style=solid label="\"void\""]
  761 -> 118 [style=solid label="STRING_LITERAL"]
  761 -> 266 [style=solid label="\"sizeof\""]
  761 -> 267 [style=solid label="\"alignof\""]
  761 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  761 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  761 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  761 -> 272 [style=dashed label="SCOPE-opt"]
  761 -> 276 [style=dashed label="await-expression"]
  761 -> 277 [style=dashed label="boolean-literal"]
  761 -> 949 [style=dashed label="cast-expression"]
  761 -> 279 [style=dashed label="character-literal"]
  761 -> 55 [style=dashed label="class-name"]
  761 -> 282 [style=dashed label="conversion-function-id"]
  761 -> 63 [style=dashed label="decltype-specifier"]
  761 -> 283 [style=dashed label="delete-expression"]
  761 -> 71 [style=dashed label="enum-name"]
  761 -> 287 [style=dashed label="floating-point-literal"]
  761 -> 288 [style=dashed label="fold-expression"]
  761 -> 289 [style=dashed label="id-expression"]
  761 -> 291 [style=dashed label="integer-literal"]
  761 -> 292 [style=dashed label="lambda-expression"]
  761 -> 293 [style=dashed label="lambda-introducer"]
  761 -> 294 [style=dashed label="literal"]
  761 -> 295 [style=dashed label="literal-operator-id"]
  761 -> 85 [style=dashed label="namespace-alias"]
  761 -> 88 [style=dashed label="namespace-name"]
  761 -> 299 [style=dashed label="nested-name-specifier"]
  761 -> 90 [style=dashed label="nested-name-specifier-opt"]
  761 -> 300 [style=dashed label="new-expression"]
  761 -> 301 [style=dashed label="noexcept-expression"]
  761 -> 302 [style=dashed label="operator-function-id"]
  761 -> 94 [style=dashed label="placeholder-type-specifier"]
  761 -> 304 [style=dashed label="pointer-literal"]
  761 -> 305 [style=dashed label="postfix-expression"]
  761 -> 306 [style=dashed label="primary-expression"]
  761 -> 307 [style=dashed label="qualified-id"]
  761 -> 309 [style=dashed label="requires-expression"]
  761 -> 311 [style=dashed label="simple-template-id"]
  761 -> 312 [style=dashed label="simple-type-specifier"]
  761 -> 313 [style=dashed label="string-literal"]
  761 -> 314 [style=dashed label="template-id"]
  761 -> 102 [style=dashed label="template-name"]
  761 -> 104 [style=dashed label="type-constraint"]
  761 -> 105 [style=dashed label="type-constraint-opt"]
  761 -> 106 [style=dashed label="type-name"]
  761 -> 108 [style=dashed label="typedef-name"]
  761 -> 316 [style=dashed label="typename-specifier"]
  761 -> 317 [style=dashed label="unary-expression"]
  761 -> 318 [style=dashed label="unary-operator"]
  761 -> 319 [style=dashed label="unqualified-id"]
  761 -> 320 [style=dashed label="user-defined-character-literal"]
  761 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  761 -> 322 [style=dashed label="user-defined-integer-literal"]
  761 -> 323 [style=dashed label="user-defined-literal"]
  761 -> 324 [style=dashed label="user-defined-string-literal"]
  761 -> "761R19" [style=solid]
 "761R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  761 -> "761R469d" [label="[IDENTIFIER]", style=solid]
 "761R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  761 -> "761R722d" [label="[\"decltype\"]", style=solid]
 "761R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  761 -> "761R722" [label="[\"auto\"]", style=solid]
 "761R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  762 [label="State 762\n\l288 fold-expression: \"(\" cast-expression fold-operator • \"...\" \")\"\l290                | \"(\" cast-expression fold-operator • \"...\" fold-operator cast-expression \")\"\l"]
  762 -> 950 [style=solid label="\"...\""]
  763 [label="State 763\n\l591 primary-expression: \"(\" expression \")\" •\l"]
  763 -> "763R591" [style=solid]
 "763R591" [label="R591", fillcolor=3, shape=diamond, style=filled]
  764 [label="State 764\n\l131 cast-expression: \"(\" type-id \")\" • cast-expression\l"]
  764 -> 238 [style=solid label="IDENTIFIER"]
  764 -> 239 [style=solid label="\"noexcept\""]
  764 -> 240 [style=solid label="\"!\""]
  764 -> 241 [style=solid label="\"::\""]
  764 -> 242 [style=solid label="\"this\""]
  764 -> 8 [style=solid label="\"typename\""]
  764 -> 243 [style=solid label="\"+\""]
  764 -> 244 [style=solid label="\"-\""]
  764 -> 245 [style=solid label="\"(\""]
  764 -> 246 [style=solid label="\"&\""]
  764 -> 247 [style=solid label="\"[\""]
  764 -> 248 [style=solid label="\"co_await\""]
  764 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  764 -> 250 [style=solid label="CHARACTER_LITERAL"]
  764 -> 251 [style=solid label="\"operator\""]
  764 -> 21 [style=solid label="\"decltype\""]
  764 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  764 -> 253 [style=solid label="\"*\""]
  764 -> 254 [style=solid label="INTEGER_LITERAL"]
  764 -> 255 [style=solid label="\"requires\""]
  764 -> 256 [style=solid label="\"~\""]
  764 -> 257 [style=solid label="\"++\""]
  764 -> 258 [style=solid label="\"--\""]
  764 -> 259 [style=solid label="POINTER_LITERAL"]
  764 -> 260 [style=solid label="\"dynamic_cast\""]
  764 -> 261 [style=solid label="\"static_cast\""]
  764 -> 262 [style=solid label="\"reinterpret_cast\""]
  764 -> 263 [style=solid label="\"const_cast\""]
  764 -> 264 [style=solid label="\"typeid\""]
  764 -> 27 [style=solid label="\"char\""]
  764 -> 28 [style=solid label="\"char8_t\""]
  764 -> 29 [style=solid label="\"char16_t\""]
  764 -> 30 [style=solid label="\"char32_t\""]
  764 -> 31 [style=solid label="\"wchar_t\""]
  764 -> 32 [style=solid label="\"bool\""]
  764 -> 33 [style=solid label="\"short\""]
  764 -> 34 [style=solid label="\"int\""]
  764 -> 35 [style=solid label="\"long\""]
  764 -> 36 [style=solid label="\"signed\""]
  764 -> 37 [style=solid label="\"unsigned\""]
  764 -> 38 [style=solid label="\"float\""]
  764 -> 39 [style=solid label="\"double\""]
  764 -> 40 [style=solid label="\"void\""]
  764 -> 118 [style=solid label="STRING_LITERAL"]
  764 -> 266 [style=solid label="\"sizeof\""]
  764 -> 267 [style=solid label="\"alignof\""]
  764 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  764 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  764 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  764 -> 272 [style=dashed label="SCOPE-opt"]
  764 -> 276 [style=dashed label="await-expression"]
  764 -> 277 [style=dashed label="boolean-literal"]
  764 -> 951 [style=dashed label="cast-expression"]
  764 -> 279 [style=dashed label="character-literal"]
  764 -> 55 [style=dashed label="class-name"]
  764 -> 282 [style=dashed label="conversion-function-id"]
  764 -> 63 [style=dashed label="decltype-specifier"]
  764 -> 283 [style=dashed label="delete-expression"]
  764 -> 71 [style=dashed label="enum-name"]
  764 -> 287 [style=dashed label="floating-point-literal"]
  764 -> 288 [style=dashed label="fold-expression"]
  764 -> 289 [style=dashed label="id-expression"]
  764 -> 291 [style=dashed label="integer-literal"]
  764 -> 292 [style=dashed label="lambda-expression"]
  764 -> 293 [style=dashed label="lambda-introducer"]
  764 -> 294 [style=dashed label="literal"]
  764 -> 295 [style=dashed label="literal-operator-id"]
  764 -> 85 [style=dashed label="namespace-alias"]
  764 -> 88 [style=dashed label="namespace-name"]
  764 -> 299 [style=dashed label="nested-name-specifier"]
  764 -> 90 [style=dashed label="nested-name-specifier-opt"]
  764 -> 300 [style=dashed label="new-expression"]
  764 -> 301 [style=dashed label="noexcept-expression"]
  764 -> 302 [style=dashed label="operator-function-id"]
  764 -> 94 [style=dashed label="placeholder-type-specifier"]
  764 -> 304 [style=dashed label="pointer-literal"]
  764 -> 305 [style=dashed label="postfix-expression"]
  764 -> 306 [style=dashed label="primary-expression"]
  764 -> 307 [style=dashed label="qualified-id"]
  764 -> 309 [style=dashed label="requires-expression"]
  764 -> 311 [style=dashed label="simple-template-id"]
  764 -> 312 [style=dashed label="simple-type-specifier"]
  764 -> 313 [style=dashed label="string-literal"]
  764 -> 314 [style=dashed label="template-id"]
  764 -> 102 [style=dashed label="template-name"]
  764 -> 104 [style=dashed label="type-constraint"]
  764 -> 105 [style=dashed label="type-constraint-opt"]
  764 -> 106 [style=dashed label="type-name"]
  764 -> 108 [style=dashed label="typedef-name"]
  764 -> 316 [style=dashed label="typename-specifier"]
  764 -> 317 [style=dashed label="unary-expression"]
  764 -> 318 [style=dashed label="unary-operator"]
  764 -> 319 [style=dashed label="unqualified-id"]
  764 -> 320 [style=dashed label="user-defined-character-literal"]
  764 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  764 -> 322 [style=dashed label="user-defined-integer-literal"]
  764 -> 323 [style=dashed label="user-defined-literal"]
  764 -> 324 [style=dashed label="user-defined-string-literal"]
  764 -> "764R19" [style=solid]
 "764R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  764 -> "764R469d" [label="[IDENTIFIER]", style=solid]
 "764R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  764 -> "764R722d" [label="[\"decltype\"]", style=solid]
 "764R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  764 -> "764R722" [label="[\"auto\"]", style=solid]
 "764R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  765 [label="State 765\n\l648 simple-capture: IDENTIFIER ELLIPSIS-opt •\l"]
  765 -> "765R648" [style=solid]
 "765R648" [label="R648", fillcolor=3, shape=diamond, style=filled]
  766 [label="State 766\n\l649 simple-capture: \"&\" IDENTIFIER • ELLIPSIS-opt\l"]
  766 -> 156 [style=solid label="\"...\""]
  766 -> 952 [style=dashed label="ELLIPSIS-opt"]
  766 -> "766R5" [style=solid]
 "766R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  767 [label="State 767\n\l350 init-capture: \"&\" ELLIPSIS-opt • IDENTIFIER initializer\l"]
  767 -> 953 [style=solid label="IDENTIFIER"]
  768 [label="State 768\n\l651 simple-capture: \"*\" \"this\" •\l"]
  768 -> "768R651" [style=solid]
 "768R651" [label="R651", fillcolor=3, shape=diamond, style=filled]
  769 [label="State 769\n\l349 init-capture: ELLIPSIS-opt IDENTIFIER • initializer\l"]
  769 -> 396 [style=solid label="\"=\""]
  769 -> 397 [style=solid label="\"(\""]
  769 -> 398 [style=solid label="\"{\""]
  769 -> 400 [style=dashed label="brace-or-equal-initializer"]
  769 -> 401 [style=dashed label="braced-init-list"]
  769 -> 954 [style=dashed label="initializer"]
  770 [label="State 770\n\l385 lambda-capture: capture-default \",\" • capture-list\l"]
  770 -> 156 [style=solid label="\"...\""]
  770 -> 461 [style=solid label="IDENTIFIER"]
  770 -> 462 [style=solid label="\"this\""]
  770 -> 955 [style=solid label="\"&\""]
  770 -> 465 [style=solid label="\"*\""]
  770 -> 466 [style=dashed label="ELLIPSIS-opt"]
  770 -> 467 [style=dashed label="capture"]
  770 -> 956 [style=dashed label="capture-list"]
  770 -> 470 [style=dashed label="init-capture"]
  770 -> 473 [style=dashed label="simple-capture"]
  770 -> "770R5d" [label="[IDENTIFIER]", style=solid]
 "770R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  771 [label="State 771\n\l129 capture-list: capture-list \",\" • capture\l"]
  771 -> 156 [style=solid label="\"...\""]
  771 -> 461 [style=solid label="IDENTIFIER"]
  771 -> 462 [style=solid label="\"this\""]
  771 -> 955 [style=solid label="\"&\""]
  771 -> 465 [style=solid label="\"*\""]
  771 -> 466 [style=dashed label="ELLIPSIS-opt"]
  771 -> 957 [style=dashed label="capture"]
  771 -> 470 [style=dashed label="init-capture"]
  771 -> 473 [style=dashed label="simple-capture"]
  771 -> "771R5d" [label="[IDENTIFIER]", style=solid]
 "771R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  772 [label="State 772\n\l392 lambda-introducer: \"[\" lambda-capture-opt \"]\" •\l"]
  772 -> "772R392" [style=solid]
 "772R392" [label="R392", fillcolor=3, shape=diamond, style=filled]
  773 [label="State 773\n\l515 overloadable-operator: \"(\" \")\" •\l"]
  773 -> "773R515" [style=solid]
 "773R515" [label="R515", fillcolor=3, shape=diamond, style=filled]
  774 [label="State 774\n\l516 overloadable-operator: \"[\" \"]\" •\l"]
  774 -> "774R516" [style=solid]
 "774R516" [label="R516", fillcolor=3, shape=diamond, style=filled]
  775 [label="State 775\n\l513 overloadable-operator: \"delete\" \"[\" • \"]\"\l"]
  775 -> 958 [style=solid label="\"]\""]
  776 [label="State 776\n\l512 overloadable-operator: \"new\" \"[\" • \"]\"\l"]
  776 -> 959 [style=solid label="\"]\""]
  777 [label="State 777\n\l509 operator-function-id: \"operator\" overloadable-operator \"<\" • template-argument-list-opt \">\"\l"]
  777 -> 238 [style=solid label="IDENTIFIER"]
  777 -> 239 [style=solid label="\"noexcept\""]
  777 -> 240 [style=solid label="\"!\""]
  777 -> 241 [style=solid label="\"::\""]
  777 -> 242 [style=solid label="\"this\""]
  777 -> 8 [style=solid label="\"typename\""]
  777 -> 243 [style=solid label="\"+\""]
  777 -> 244 [style=solid label="\"-\""]
  777 -> 245 [style=solid label="\"(\""]
  777 -> 246 [style=solid label="\"&\""]
  777 -> 247 [style=solid label="\"[\""]
  777 -> 248 [style=solid label="\"co_await\""]
  777 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  777 -> 250 [style=solid label="CHARACTER_LITERAL"]
  777 -> 12 [style=solid label="\"class\""]
  777 -> 13 [style=solid label="\"struct\""]
  777 -> 14 [style=solid label="\"union\""]
  777 -> 251 [style=solid label="\"operator\""]
  777 -> 15 [style=solid label="\"const\""]
  777 -> 16 [style=solid label="\"volatile\""]
  777 -> 21 [style=solid label="\"decltype\""]
  777 -> 125 [style=solid label="\"enum\""]
  777 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  777 -> 253 [style=solid label="\"*\""]
  777 -> 254 [style=solid label="INTEGER_LITERAL"]
  777 -> 255 [style=solid label="\"requires\""]
  777 -> 256 [style=solid label="\"~\""]
  777 -> 257 [style=solid label="\"++\""]
  777 -> 258 [style=solid label="\"--\""]
  777 -> 259 [style=solid label="POINTER_LITERAL"]
  777 -> 260 [style=solid label="\"dynamic_cast\""]
  777 -> 261 [style=solid label="\"static_cast\""]
  777 -> 262 [style=solid label="\"reinterpret_cast\""]
  777 -> 263 [style=solid label="\"const_cast\""]
  777 -> 264 [style=solid label="\"typeid\""]
  777 -> 27 [style=solid label="\"char\""]
  777 -> 28 [style=solid label="\"char8_t\""]
  777 -> 29 [style=solid label="\"char16_t\""]
  777 -> 30 [style=solid label="\"char32_t\""]
  777 -> 31 [style=solid label="\"wchar_t\""]
  777 -> 32 [style=solid label="\"bool\""]
  777 -> 33 [style=solid label="\"short\""]
  777 -> 34 [style=solid label="\"int\""]
  777 -> 35 [style=solid label="\"long\""]
  777 -> 36 [style=solid label="\"signed\""]
  777 -> 37 [style=solid label="\"unsigned\""]
  777 -> 38 [style=solid label="\"float\""]
  777 -> 39 [style=solid label="\"double\""]
  777 -> 40 [style=solid label="\"void\""]
  777 -> 118 [style=solid label="STRING_LITERAL"]
  777 -> 266 [style=solid label="\"sizeof\""]
  777 -> 267 [style=solid label="\"alignof\""]
  777 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  777 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  777 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  777 -> 272 [style=dashed label="SCOPE-opt"]
  777 -> 273 [style=dashed label="additive-expression"]
  777 -> 274 [style=dashed label="and-expression"]
  777 -> 276 [style=dashed label="await-expression"]
  777 -> 277 [style=dashed label="boolean-literal"]
  777 -> 278 [style=dashed label="cast-expression"]
  777 -> 279 [style=dashed label="character-literal"]
  777 -> 424 [style=dashed label="class-key"]
  777 -> 55 [style=dashed label="class-name"]
  777 -> 280 [style=dashed label="compare-expression"]
  777 -> 327 [style=dashed label="conditional-expression"]
  777 -> 425 [style=dashed label="constant-expression"]
  777 -> 282 [style=dashed label="conversion-function-id"]
  777 -> 57 [style=dashed label="cv-qualifier"]
  777 -> 63 [style=dashed label="decltype-specifier"]
  777 -> 283 [style=dashed label="delete-expression"]
  777 -> 66 [style=dashed label="elaborated-enum-specifier"]
  777 -> 67 [style=dashed label="elaborated-type-specifier"]
  777 -> 71 [style=dashed label="enum-name"]
  777 -> 284 [style=dashed label="equality-expression"]
  777 -> 285 [style=dashed label="exclusive-or-expression"]
  777 -> 287 [style=dashed label="floating-point-literal"]
  777 -> 288 [style=dashed label="fold-expression"]
  777 -> 426 [style=dashed label="id-expression"]
  777 -> 290 [style=dashed label="inclusive-or-expression"]
  777 -> 291 [style=dashed label="integer-literal"]
  777 -> 292 [style=dashed label="lambda-expression"]
  777 -> 293 [style=dashed label="lambda-introducer"]
  777 -> 294 [style=dashed label="literal"]
  777 -> 295 [style=dashed label="literal-operator-id"]
  777 -> 296 [style=dashed label="logical-and-expression"]
  777 -> 329 [style=dashed label="logical-or-expression"]
  777 -> 298 [style=dashed label="multiplicative-expression"]
  777 -> 85 [style=dashed label="namespace-alias"]
  777 -> 88 [style=dashed label="namespace-name"]
  777 -> 299 [style=dashed label="nested-name-specifier"]
  777 -> 90 [style=dashed label="nested-name-specifier-opt"]
  777 -> 300 [style=dashed label="new-expression"]
  777 -> 301 [style=dashed label="noexcept-expression"]
  777 -> 302 [style=dashed label="operator-function-id"]
  777 -> 94 [style=dashed label="placeholder-type-specifier"]
  777 -> 303 [style=dashed label="pm-expression"]
  777 -> 304 [style=dashed label="pointer-literal"]
  777 -> 305 [style=dashed label="postfix-expression"]
  777 -> 306 [style=dashed label="primary-expression"]
  777 -> 307 [style=dashed label="qualified-id"]
  777 -> 308 [style=dashed label="relational-expression"]
  777 -> 309 [style=dashed label="requires-expression"]
  777 -> 310 [style=dashed label="shift-expression"]
  777 -> 311 [style=dashed label="simple-template-id"]
  777 -> 427 [style=dashed label="simple-type-specifier"]
  777 -> 313 [style=dashed label="string-literal"]
  777 -> 428 [style=dashed label="template-argument"]
  777 -> 429 [style=dashed label="template-argument-list"]
  777 -> 960 [style=dashed label="template-argument-list-opt"]
  777 -> 314 [style=dashed label="template-id"]
  777 -> 102 [style=dashed label="template-name"]
  777 -> 104 [style=dashed label="type-constraint"]
  777 -> 105 [style=dashed label="type-constraint-opt"]
  777 -> 431 [style=dashed label="type-id"]
  777 -> 106 [style=dashed label="type-name"]
  777 -> 432 [style=dashed label="type-specifier"]
  777 -> 433 [style=dashed label="type-specifier-seq"]
  777 -> 108 [style=dashed label="typedef-name"]
  777 -> 434 [style=dashed label="typename-specifier"]
  777 -> 317 [style=dashed label="unary-expression"]
  777 -> 318 [style=dashed label="unary-operator"]
  777 -> 319 [style=dashed label="unqualified-id"]
  777 -> 320 [style=dashed label="user-defined-character-literal"]
  777 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  777 -> 322 [style=dashed label="user-defined-integer-literal"]
  777 -> 323 [style=dashed label="user-defined-literal"]
  777 -> 324 [style=dashed label="user-defined-string-literal"]
  777 -> "777R19" [style=solid]
 "777R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  777 -> "777R469d" [label="[IDENTIFIER]", style=solid]
 "777R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  777 -> "777R700" [label="[\">\"]", style=solid]
 "777R700" [label="R700", fillcolor=3, shape=diamond, style=filled]
  777 -> "777R722d" [label="[\"decltype\"]", style=solid]
 "777R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  777 -> "777R722" [label="[\"auto\"]", style=solid]
 "777R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  778 [label="State 778\n\l403 literal-operator-id: \"operator\" string-literal IDENTIFIER •\l747 ud-suffix: IDENTIFIER •\l"]
  778 -> "778R403" [style=solid]
 "778R403" [label="R403", fillcolor=3, shape=diamond, style=filled]
  778 -> "778R747d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "778R747d" [label="R747", fillcolor=5, shape=diamond, style=filled]
  779 [label="State 779\n\l170 conversion-declarator-opt: conversion-declarator •\l"]
  779 -> "779R170" [style=solid]
 "779R170" [label="R170", fillcolor=3, shape=diamond, style=filled]
  780 [label="State 780\n\l172 conversion-type-id: type-specifier-seq conversion-declarator-opt •\l"]
  780 -> "780R172" [style=solid]
 "780R172" [label="R172", fillcolor=3, shape=diamond, style=filled]
  781 [label="State 781\n\l168 conversion-declarator: ptr-operator • conversion-declarator-opt\l"]
  781 -> 4 [style=solid label="IDENTIFIER"]
  781 -> 6 [style=solid label="\"::\""]
  781 -> 160 [style=solid label="\"&\""]
  781 -> 163 [style=solid label="\"&&\""]
  781 -> 21 [style=solid label="\"decltype\""]
  781 -> 164 [style=solid label="\"*\""]
  781 -> 55 [style=dashed label="class-name"]
  781 -> 779 [style=dashed label="conversion-declarator"]
  781 -> 961 [style=dashed label="conversion-declarator-opt"]
  781 -> 121 [style=dashed label="decltype-specifier"]
  781 -> 71 [style=dashed label="enum-name"]
  781 -> 85 [style=dashed label="namespace-alias"]
  781 -> 88 [style=dashed label="namespace-name"]
  781 -> 187 [style=dashed label="nested-name-specifier"]
  781 -> 781 [style=dashed label="ptr-operator"]
  781 -> 96 [style=dashed label="simple-template-id"]
  781 -> 102 [style=dashed label="template-name"]
  781 -> 106 [style=dashed label="type-name"]
  781 -> 108 [style=dashed label="typedef-name"]
  781 -> "781R169d" [label="[IDENTIFIER, \"::\", \"&\", \"&&\", \"decltype\", \"*\"]", style=solid]
 "781R169d" [label="R169", fillcolor=5, shape=diamond, style=filled]
  781 -> "781R169" [style=solid]
 "781R169" [label="R169", fillcolor=3, shape=diamond, style=filled]
  782 [label="State 782\n\l628 requirement-parameter-list: \"(\" parameter-declaration-clause • \")\"\l"]
  782 -> 962 [style=solid label="\")\""]
  783 [label="State 783\n\l627 requirement-body: \"{\" • requirement-seq \"}\"\l"]
  783 -> 238 [style=solid label="IDENTIFIER"]
  783 -> 239 [style=solid label="\"noexcept\""]
  783 -> 240 [style=solid label="\"!\""]
  783 -> 241 [style=solid label="\"::\""]
  783 -> 242 [style=solid label="\"this\""]
  783 -> 963 [style=solid label="\"typename\""]
  783 -> 243 [style=solid label="\"+\""]
  783 -> 244 [style=solid label="\"-\""]
  783 -> 245 [style=solid label="\"(\""]
  783 -> 246 [style=solid label="\"&\""]
  783 -> 247 [style=solid label="\"[\""]
  783 -> 248 [style=solid label="\"co_await\""]
  783 -> 964 [style=solid label="\"{\""]
  783 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  783 -> 250 [style=solid label="CHARACTER_LITERAL"]
  783 -> 251 [style=solid label="\"operator\""]
  783 -> 21 [style=solid label="\"decltype\""]
  783 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  783 -> 253 [style=solid label="\"*\""]
  783 -> 254 [style=solid label="INTEGER_LITERAL"]
  783 -> 965 [style=solid label="\"requires\""]
  783 -> 256 [style=solid label="\"~\""]
  783 -> 257 [style=solid label="\"++\""]
  783 -> 258 [style=solid label="\"--\""]
  783 -> 259 [style=solid label="POINTER_LITERAL"]
  783 -> 260 [style=solid label="\"dynamic_cast\""]
  783 -> 261 [style=solid label="\"static_cast\""]
  783 -> 262 [style=solid label="\"reinterpret_cast\""]
  783 -> 263 [style=solid label="\"const_cast\""]
  783 -> 264 [style=solid label="\"typeid\""]
  783 -> 27 [style=solid label="\"char\""]
  783 -> 28 [style=solid label="\"char8_t\""]
  783 -> 29 [style=solid label="\"char16_t\""]
  783 -> 30 [style=solid label="\"char32_t\""]
  783 -> 31 [style=solid label="\"wchar_t\""]
  783 -> 32 [style=solid label="\"bool\""]
  783 -> 33 [style=solid label="\"short\""]
  783 -> 34 [style=solid label="\"int\""]
  783 -> 35 [style=solid label="\"long\""]
  783 -> 36 [style=solid label="\"signed\""]
  783 -> 37 [style=solid label="\"unsigned\""]
  783 -> 38 [style=solid label="\"float\""]
  783 -> 39 [style=solid label="\"double\""]
  783 -> 40 [style=solid label="\"void\""]
  783 -> 118 [style=solid label="STRING_LITERAL"]
  783 -> 265 [style=solid label="\"throw\""]
  783 -> 266 [style=solid label="\"sizeof\""]
  783 -> 267 [style=solid label="\"alignof\""]
  783 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  783 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  783 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  783 -> 271 [style=solid label="\"co_yield\""]
  783 -> 272 [style=dashed label="SCOPE-opt"]
  783 -> 273 [style=dashed label="additive-expression"]
  783 -> 274 [style=dashed label="and-expression"]
  783 -> 275 [style=dashed label="assignment-expression"]
  783 -> 276 [style=dashed label="await-expression"]
  783 -> 277 [style=dashed label="boolean-literal"]
  783 -> 278 [style=dashed label="cast-expression"]
  783 -> 279 [style=dashed label="character-literal"]
  783 -> 55 [style=dashed label="class-name"]
  783 -> 280 [style=dashed label="compare-expression"]
  783 -> 966 [style=dashed label="compound-requirement"]
  783 -> 281 [style=dashed label="conditional-expression"]
  783 -> 282 [style=dashed label="conversion-function-id"]
  783 -> 63 [style=dashed label="decltype-specifier"]
  783 -> 283 [style=dashed label="delete-expression"]
  783 -> 71 [style=dashed label="enum-name"]
  783 -> 284 [style=dashed label="equality-expression"]
  783 -> 285 [style=dashed label="exclusive-or-expression"]
  783 -> 967 [style=dashed label="expression"]
  783 -> 287 [style=dashed label="floating-point-literal"]
  783 -> 288 [style=dashed label="fold-expression"]
  783 -> 289 [style=dashed label="id-expression"]
  783 -> 290 [style=dashed label="inclusive-or-expression"]
  783 -> 291 [style=dashed label="integer-literal"]
  783 -> 292 [style=dashed label="lambda-expression"]
  783 -> 293 [style=dashed label="lambda-introducer"]
  783 -> 294 [style=dashed label="literal"]
  783 -> 295 [style=dashed label="literal-operator-id"]
  783 -> 296 [style=dashed label="logical-and-expression"]
  783 -> 297 [style=dashed label="logical-or-expression"]
  783 -> 298 [style=dashed label="multiplicative-expression"]
  783 -> 85 [style=dashed label="namespace-alias"]
  783 -> 88 [style=dashed label="namespace-name"]
  783 -> 299 [style=dashed label="nested-name-specifier"]
  783 -> 90 [style=dashed label="nested-name-specifier-opt"]
  783 -> 968 [style=dashed label="nested-requirement"]
  783 -> 300 [style=dashed label="new-expression"]
  783 -> 301 [style=dashed label="noexcept-expression"]
  783 -> 302 [style=dashed label="operator-function-id"]
  783 -> 94 [style=dashed label="placeholder-type-specifier"]
  783 -> 303 [style=dashed label="pm-expression"]
  783 -> 304 [style=dashed label="pointer-literal"]
  783 -> 305 [style=dashed label="postfix-expression"]
  783 -> 306 [style=dashed label="primary-expression"]
  783 -> 307 [style=dashed label="qualified-id"]
  783 -> 308 [style=dashed label="relational-expression"]
  783 -> 969 [style=dashed label="requirement"]
  783 -> 970 [style=dashed label="requirement-seq"]
  783 -> 309 [style=dashed label="requires-expression"]
  783 -> 310 [style=dashed label="shift-expression"]
  783 -> 971 [style=dashed label="simple-requirement"]
  783 -> 311 [style=dashed label="simple-template-id"]
  783 -> 312 [style=dashed label="simple-type-specifier"]
  783 -> 313 [style=dashed label="string-literal"]
  783 -> 314 [style=dashed label="template-id"]
  783 -> 102 [style=dashed label="template-name"]
  783 -> 315 [style=dashed label="throw-expression"]
  783 -> 104 [style=dashed label="type-constraint"]
  783 -> 105 [style=dashed label="type-constraint-opt"]
  783 -> 106 [style=dashed label="type-name"]
  783 -> 972 [style=dashed label="type-requirement"]
  783 -> 108 [style=dashed label="typedef-name"]
  783 -> 316 [style=dashed label="typename-specifier"]
  783 -> 317 [style=dashed label="unary-expression"]
  783 -> 318 [style=dashed label="unary-operator"]
  783 -> 319 [style=dashed label="unqualified-id"]
  783 -> 320 [style=dashed label="user-defined-character-literal"]
  783 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  783 -> 322 [style=dashed label="user-defined-integer-literal"]
  783 -> 323 [style=dashed label="user-defined-literal"]
  783 -> 324 [style=dashed label="user-defined-string-literal"]
  783 -> 325 [style=dashed label="yield-expression"]
  783 -> "783R19" [style=solid]
 "783R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  783 -> "783R469d" [label="[IDENTIFIER]", style=solid]
 "783R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  783 -> "783R722d" [label="[\"decltype\"]", style=solid]
 "783R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  783 -> "783R722" [label="[\"auto\"]", style=solid]
 "783R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  784 [label="State 784\n\l636 requires-expression: \"requires\" requirement-parameter-list-opt requirement-body •\l"]
  784 -> "784R636" [style=solid]
 "784R636" [label="R636", fillcolor=3, shape=diamond, style=filled]
  785 [label="State 785\n\l582 postfix-expression: \"dynamic_cast\" \"<\" type-id • \">\" \"(\" expression \")\"\l"]
  785 -> 973 [style=solid label="\">\""]
  786 [label="State 786\n\l583 postfix-expression: \"static_cast\" \"<\" type-id • \">\" \"(\" expression \")\"\l"]
  786 -> 974 [style=solid label="\">\""]
  787 [label="State 787\n\l584 postfix-expression: \"reinterpret_cast\" \"<\" type-id • \">\" \"(\" expression \")\"\l"]
  787 -> 975 [style=solid label="\">\""]
  788 [label="State 788\n\l585 postfix-expression: \"const_cast\" \"<\" type-id • \">\" \"(\" expression \")\"\l"]
  788 -> 976 [style=solid label="\">\""]
  789 [label="State 789\n\l280 expression: expression • \",\" assignment-expression\l586 postfix-expression: \"typeid\" \"(\" expression • \")\"\l"]
  789 -> 552 [style=solid label="\",\""]
  789 -> 977 [style=solid label="\")\""]
  790 [label="State 790\n\l587 postfix-expression: \"typeid\" \"(\" type-id • \")\"\l"]
  790 -> 978 [style=solid label="\")\""]
  791 [label="State 791\n\l755 unary-expression: \"sizeof\" \"...\" \"(\" • IDENTIFIER \")\"\l"]
  791 -> 979 [style=solid label="IDENTIFIER"]
  792 [label="State 792\n\l754 unary-expression: \"sizeof\" \"(\" type-id • \")\"\l"]
  792 -> 980 [style=solid label="\")\""]
  793 [label="State 793\n\l756 unary-expression: \"alignof\" \"(\" type-id • \")\"\l"]
  793 -> 981 [style=solid label="\")\""]
  794 [label="State 794\n\l225 delete-expression: SCOPE-opt \"delete\" \"[\" • \"]\" cast-expression\l392 lambda-introducer: \"[\" • lambda-capture-opt \"]\"\l"]
  794 -> 156 [style=solid label="\"...\""]
  794 -> 461 [style=solid label="IDENTIFIER"]
  794 -> 462 [style=solid label="\"this\""]
  794 -> 463 [style=solid label="\"=\""]
  794 -> 464 [style=solid label="\"&\""]
  794 -> 982 [style=solid label="\"]\""]
  794 -> 465 [style=solid label="\"*\""]
  794 -> 466 [style=dashed label="ELLIPSIS-opt"]
  794 -> 467 [style=dashed label="capture"]
  794 -> 468 [style=dashed label="capture-default"]
  794 -> 469 [style=dashed label="capture-list"]
  794 -> 470 [style=dashed label="init-capture"]
  794 -> 471 [style=dashed label="lambda-capture"]
  794 -> 472 [style=dashed label="lambda-capture-opt"]
  794 -> 473 [style=dashed label="simple-capture"]
  794 -> "794R5d" [label="[IDENTIFIER]", style=solid]
 "794R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  794 -> "794R386d" [label="[\"]\"]", style=solid]
 "794R386d" [label="R386", fillcolor=5, shape=diamond, style=filled]
  795 [label="State 795\n\l224 delete-expression: SCOPE-opt \"delete\" cast-expression •\l"]
  795 -> "795R224" [style=solid]
 "795R224" [label="R224", fillcolor=3, shape=diamond, style=filled]
  796 [label="State 796\n\l483 new-placement: \"(\" • expression-list \")\"\l"]
  796 -> 238 [style=solid label="IDENTIFIER"]
  796 -> 239 [style=solid label="\"noexcept\""]
  796 -> 240 [style=solid label="\"!\""]
  796 -> 241 [style=solid label="\"::\""]
  796 -> 242 [style=solid label="\"this\""]
  796 -> 8 [style=solid label="\"typename\""]
  796 -> 243 [style=solid label="\"+\""]
  796 -> 244 [style=solid label="\"-\""]
  796 -> 245 [style=solid label="\"(\""]
  796 -> 246 [style=solid label="\"&\""]
  796 -> 247 [style=solid label="\"[\""]
  796 -> 248 [style=solid label="\"co_await\""]
  796 -> 398 [style=solid label="\"{\""]
  796 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  796 -> 250 [style=solid label="CHARACTER_LITERAL"]
  796 -> 251 [style=solid label="\"operator\""]
  796 -> 21 [style=solid label="\"decltype\""]
  796 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  796 -> 253 [style=solid label="\"*\""]
  796 -> 254 [style=solid label="INTEGER_LITERAL"]
  796 -> 255 [style=solid label="\"requires\""]
  796 -> 256 [style=solid label="\"~\""]
  796 -> 257 [style=solid label="\"++\""]
  796 -> 258 [style=solid label="\"--\""]
  796 -> 259 [style=solid label="POINTER_LITERAL"]
  796 -> 260 [style=solid label="\"dynamic_cast\""]
  796 -> 261 [style=solid label="\"static_cast\""]
  796 -> 262 [style=solid label="\"reinterpret_cast\""]
  796 -> 263 [style=solid label="\"const_cast\""]
  796 -> 264 [style=solid label="\"typeid\""]
  796 -> 27 [style=solid label="\"char\""]
  796 -> 28 [style=solid label="\"char8_t\""]
  796 -> 29 [style=solid label="\"char16_t\""]
  796 -> 30 [style=solid label="\"char32_t\""]
  796 -> 31 [style=solid label="\"wchar_t\""]
  796 -> 32 [style=solid label="\"bool\""]
  796 -> 33 [style=solid label="\"short\""]
  796 -> 34 [style=solid label="\"int\""]
  796 -> 35 [style=solid label="\"long\""]
  796 -> 36 [style=solid label="\"signed\""]
  796 -> 37 [style=solid label="\"unsigned\""]
  796 -> 38 [style=solid label="\"float\""]
  796 -> 39 [style=solid label="\"double\""]
  796 -> 40 [style=solid label="\"void\""]
  796 -> 118 [style=solid label="STRING_LITERAL"]
  796 -> 265 [style=solid label="\"throw\""]
  796 -> 266 [style=solid label="\"sizeof\""]
  796 -> 267 [style=solid label="\"alignof\""]
  796 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  796 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  796 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  796 -> 271 [style=solid label="\"co_yield\""]
  796 -> 272 [style=dashed label="SCOPE-opt"]
  796 -> 273 [style=dashed label="additive-expression"]
  796 -> 274 [style=dashed label="and-expression"]
  796 -> 662 [style=dashed label="assignment-expression"]
  796 -> 276 [style=dashed label="await-expression"]
  796 -> 277 [style=dashed label="boolean-literal"]
  796 -> 663 [style=dashed label="braced-init-list"]
  796 -> 278 [style=dashed label="cast-expression"]
  796 -> 279 [style=dashed label="character-literal"]
  796 -> 55 [style=dashed label="class-name"]
  796 -> 280 [style=dashed label="compare-expression"]
  796 -> 281 [style=dashed label="conditional-expression"]
  796 -> 282 [style=dashed label="conversion-function-id"]
  796 -> 63 [style=dashed label="decltype-specifier"]
  796 -> 283 [style=dashed label="delete-expression"]
  796 -> 71 [style=dashed label="enum-name"]
  796 -> 284 [style=dashed label="equality-expression"]
  796 -> 285 [style=dashed label="exclusive-or-expression"]
  796 -> 983 [style=dashed label="expression-list"]
  796 -> 287 [style=dashed label="floating-point-literal"]
  796 -> 288 [style=dashed label="fold-expression"]
  796 -> 289 [style=dashed label="id-expression"]
  796 -> 290 [style=dashed label="inclusive-or-expression"]
  796 -> 666 [style=dashed label="initializer-clause"]
  796 -> 667 [style=dashed label="initializer-list"]
  796 -> 291 [style=dashed label="integer-literal"]
  796 -> 292 [style=dashed label="lambda-expression"]
  796 -> 293 [style=dashed label="lambda-introducer"]
  796 -> 294 [style=dashed label="literal"]
  796 -> 295 [style=dashed label="literal-operator-id"]
  796 -> 296 [style=dashed label="logical-and-expression"]
  796 -> 297 [style=dashed label="logical-or-expression"]
  796 -> 298 [style=dashed label="multiplicative-expression"]
  796 -> 85 [style=dashed label="namespace-alias"]
  796 -> 88 [style=dashed label="namespace-name"]
  796 -> 299 [style=dashed label="nested-name-specifier"]
  796 -> 90 [style=dashed label="nested-name-specifier-opt"]
  796 -> 300 [style=dashed label="new-expression"]
  796 -> 301 [style=dashed label="noexcept-expression"]
  796 -> 302 [style=dashed label="operator-function-id"]
  796 -> 94 [style=dashed label="placeholder-type-specifier"]
  796 -> 303 [style=dashed label="pm-expression"]
  796 -> 304 [style=dashed label="pointer-literal"]
  796 -> 305 [style=dashed label="postfix-expression"]
  796 -> 306 [style=dashed label="primary-expression"]
  796 -> 307 [style=dashed label="qualified-id"]
  796 -> 308 [style=dashed label="relational-expression"]
  796 -> 309 [style=dashed label="requires-expression"]
  796 -> 310 [style=dashed label="shift-expression"]
  796 -> 311 [style=dashed label="simple-template-id"]
  796 -> 312 [style=dashed label="simple-type-specifier"]
  796 -> 313 [style=dashed label="string-literal"]
  796 -> 314 [style=dashed label="template-id"]
  796 -> 102 [style=dashed label="template-name"]
  796 -> 315 [style=dashed label="throw-expression"]
  796 -> 104 [style=dashed label="type-constraint"]
  796 -> 105 [style=dashed label="type-constraint-opt"]
  796 -> 106 [style=dashed label="type-name"]
  796 -> 108 [style=dashed label="typedef-name"]
  796 -> 316 [style=dashed label="typename-specifier"]
  796 -> 317 [style=dashed label="unary-expression"]
  796 -> 318 [style=dashed label="unary-operator"]
  796 -> 319 [style=dashed label="unqualified-id"]
  796 -> 320 [style=dashed label="user-defined-character-literal"]
  796 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  796 -> 322 [style=dashed label="user-defined-integer-literal"]
  796 -> 323 [style=dashed label="user-defined-literal"]
  796 -> 324 [style=dashed label="user-defined-string-literal"]
  796 -> 325 [style=dashed label="yield-expression"]
  796 -> "796R19" [style=solid]
 "796R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  796 -> "796R469d" [label="[IDENTIFIER]", style=solid]
 "796R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  796 -> "796R722d" [label="[\"decltype\"]", style=solid]
 "796R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  796 -> "796R722" [label="[\"auto\"]", style=solid]
 "796R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  797 [label="State 797\n\l485 new-placement-opt: new-placement •\l"]
  797 -> "797R485" [style=solid]
 "797R485" [label="R485", fillcolor=3, shape=diamond, style=filled]
  798 [label="State 798\n\l477 new-expression: SCOPE-opt \"new\" new-placement-opt • new-type-id new-initializer-opt\l478               | SCOPE-opt \"new\" new-placement-opt • \"(\" type-id \")\" new-initializer-opt\l"]
  798 -> 4 [style=solid label="IDENTIFIER"]
  798 -> 6 [style=solid label="\"::\""]
  798 -> 8 [style=solid label="\"typename\""]
  798 -> 984 [style=solid label="\"(\""]
  798 -> 12 [style=solid label="\"class\""]
  798 -> 13 [style=solid label="\"struct\""]
  798 -> 14 [style=solid label="\"union\""]
  798 -> 15 [style=solid label="\"const\""]
  798 -> 16 [style=solid label="\"volatile\""]
  798 -> 21 [style=solid label="\"decltype\""]
  798 -> 125 [style=solid label="\"enum\""]
  798 -> 27 [style=solid label="\"char\""]
  798 -> 28 [style=solid label="\"char8_t\""]
  798 -> 29 [style=solid label="\"char16_t\""]
  798 -> 30 [style=solid label="\"char32_t\""]
  798 -> 31 [style=solid label="\"wchar_t\""]
  798 -> 32 [style=solid label="\"bool\""]
  798 -> 33 [style=solid label="\"short\""]
  798 -> 34 [style=solid label="\"int\""]
  798 -> 35 [style=solid label="\"long\""]
  798 -> 36 [style=solid label="\"signed\""]
  798 -> 37 [style=solid label="\"unsigned\""]
  798 -> 38 [style=solid label="\"float\""]
  798 -> 39 [style=solid label="\"double\""]
  798 -> 40 [style=solid label="\"void\""]
  798 -> 424 [style=dashed label="class-key"]
  798 -> 55 [style=dashed label="class-name"]
  798 -> 57 [style=dashed label="cv-qualifier"]
  798 -> 63 [style=dashed label="decltype-specifier"]
  798 -> 66 [style=dashed label="elaborated-enum-specifier"]
  798 -> 67 [style=dashed label="elaborated-type-specifier"]
  798 -> 71 [style=dashed label="enum-name"]
  798 -> 85 [style=dashed label="namespace-alias"]
  798 -> 88 [style=dashed label="namespace-name"]
  798 -> 89 [style=dashed label="nested-name-specifier"]
  798 -> 90 [style=dashed label="nested-name-specifier-opt"]
  798 -> 985 [style=dashed label="new-type-id"]
  798 -> 94 [style=dashed label="placeholder-type-specifier"]
  798 -> 96 [style=dashed label="simple-template-id"]
  798 -> 97 [style=dashed label="simple-type-specifier"]
  798 -> 102 [style=dashed label="template-name"]
  798 -> 104 [style=dashed label="type-constraint"]
  798 -> 105 [style=dashed label="type-constraint-opt"]
  798 -> 106 [style=dashed label="type-name"]
  798 -> 432 [style=dashed label="type-specifier"]
  798 -> 986 [style=dashed label="type-specifier-seq"]
  798 -> 108 [style=dashed label="typedef-name"]
  798 -> 109 [style=dashed label="typename-specifier"]
  798 -> "798R469d" [label="[IDENTIFIER]", style=solid]
 "798R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  798 -> "798R722d" [label="[\"decltype\"]", style=solid]
 "798R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  798 -> "798R722" [label="[]", style=solid]
 "798R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  799 [label="State 799\n\l 42 additive-expression: additive-expression \"+\" multiplicative-expression •\l451 multiplicative-expression: multiplicative-expression • \"*\" pm-expression\l452                          | multiplicative-expression • \"/\" pm-expression\l453                          | multiplicative-expression • \"%\" pm-expression\l"]
  799 -> 577 [style=solid label="\"*\""]
  799 -> 578 [style=solid label="\"/\""]
  799 -> 579 [style=solid label="\"%\""]
  799 -> "799R42" [style=solid]
 "799R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  800 [label="State 800\n\l 43 additive-expression: additive-expression \"-\" multiplicative-expression •\l451 multiplicative-expression: multiplicative-expression • \"*\" pm-expression\l452                          | multiplicative-expression • \"/\" pm-expression\l453                          | multiplicative-expression • \"%\" pm-expression\l"]
  800 -> 577 [style=solid label="\"*\""]
  800 -> 578 [style=solid label="\"/\""]
  800 -> 579 [style=solid label="\"%\""]
  800 -> "800R43" [style=solid]
 "800R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  801 [label="State 801\n\l 48 and-expression: and-expression \"&\" equality-expression •\l259 equality-expression: equality-expression • \"==\" relational-expression\l260                    | equality-expression • \"!=\" relational-expression\l"]
  801 -> 549 [style=solid label="\"==\""]
  801 -> 550 [style=solid label="\"!=\""]
  801 -> "801R48" [style=solid]
 "801R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  802 [label="State 802\n\l149 compare-expression: compare-expression \"<=>\" shift-expression •\l646 shift-expression: shift-expression • \"<<\" additive-expression\l647                 | shift-expression • \">>\" additive-expression\l"]
  802 -> 594 [style=solid label="\"<<\""]
  802 -> 595 [style=solid label="\">>\""]
  802 -> "802R149" [style=solid]
 "802R149" [label="R149", fillcolor=3, shape=diamond, style=filled]
  803 [label="State 803\n\l259 equality-expression: equality-expression \"==\" relational-expression •\l619 relational-expression: relational-expression • \"<\" compare-expression\l620                      | relational-expression • \">\" compare-expression\l621                      | relational-expression • \"<=\" compare-expression\l622                      | relational-expression • \">=\" compare-expression\l"]
  803 -> 590 [style=solid label="\"<\""]
  803 -> 591 [style=solid label="\">\""]
  803 -> 592 [style=solid label="\"<=\""]
  803 -> 593 [style=solid label="\">=\""]
  803 -> "803R259" [style=solid]
 "803R259" [label="R259", fillcolor=3, shape=diamond, style=filled]
  804 [label="State 804\n\l260 equality-expression: equality-expression \"!=\" relational-expression •\l619 relational-expression: relational-expression • \"<\" compare-expression\l620                      | relational-expression • \">\" compare-expression\l621                      | relational-expression • \"<=\" compare-expression\l622                      | relational-expression • \">=\" compare-expression\l"]
  804 -> 590 [style=solid label="\"<\""]
  804 -> 591 [style=solid label="\">\""]
  804 -> 592 [style=solid label="\"<=\""]
  804 -> 593 [style=solid label="\">=\""]
  804 -> "804R260" [style=solid]
 "804R260" [label="R260", fillcolor=3, shape=diamond, style=filled]
  805 [label="State 805\n\l 48 and-expression: and-expression • \"&\" equality-expression\l265 exclusive-or-expression: exclusive-or-expression \"^\" and-expression •\l"]
  805 -> 547 [style=solid label="\"&\""]
  805 -> "805R265" [style=solid]
 "805R265" [label="R265", fillcolor=3, shape=diamond, style=filled]
  806 [label="State 806\n\l280 expression: expression \",\" assignment-expression •\l"]
  806 -> "806R280" [style=solid]
 "806R280" [label="R280", fillcolor=3, shape=diamond, style=filled]
  807 [label="State 807\n\l265 exclusive-or-expression: exclusive-or-expression • \"^\" and-expression\l348 inclusive-or-expression: inclusive-or-expression \"|\" exclusive-or-expression •\l"]
  807 -> 551 [style=solid label="\"^\""]
  807 -> "807R348" [style=solid]
 "807R348" [label="R348", fillcolor=3, shape=diamond, style=filled]
  808 [label="State 808\n\l389 lambda-declarator: \"(\" parameter-declaration-clause • \")\" lambda-specifiers requires-clause-opt\l"]
  808 -> 987 [style=solid label="\")\""]
  809 [label="State 809\n\l391 lambda-expression: lambda-introducer \"<\" template-parameter-list • \">\" requires-clause-opt lambda-declarator compound-statement\l712 template-parameter-list: template-parameter-list • \",\" template-parameter\l"]
  809 -> 443 [style=solid label="\",\""]
  809 -> 988 [style=solid label="\">\""]
  810 [label="State 810\n\l489 noexcept-specifier: \"noexcept\" • \"(\" constant-expression \")\"\l490                   | \"noexcept\" •\l"]
  810 -> 989 [style=solid label="\"(\""]
  810 -> "810R490d" [label="[\"(\"]", style=solid]
 "810R490d" [label="R490", fillcolor=5, shape=diamond, style=filled]
  810 -> "810R490" [style=solid]
 "810R490" [label="R490", fillcolor=3, shape=diamond, style=filled]
  811 [label="State 811\n\l492 noexcept-specifier-opt: noexcept-specifier •\l"]
  811 -> "811R492" [style=solid]
 "811R492" [label="R492", fillcolor=3, shape=diamond, style=filled]
  812 [label="State 812\n\l393 lambda-specifiers: decl-specifier-seq-opt noexcept-specifier-opt • attribute-specifier-seq-opt trailing-return-type-opt\l"]
  812 -> 177 [style=dashed label="attribute-specifier-seq"]
  812 -> 990 [style=dashed label="attribute-specifier-seq-opt"]
  812 -> "812R83" [style=solid]
 "812R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  813 [label="State 813\n\l151 compound-statement: \"{\" • statement-seq-opt \"}\"\l"]
  813 -> 1 [style=solid label="\"constexpr\""]
  813 -> 150 [style=solid label="\"extern\""]
  813 -> 4 [style=solid label="IDENTIFIER"]
  813 -> 151 [style=solid label="\"inline\""]
  813 -> 6 [style=solid label="\"::\""]
  813 -> 8 [style=solid label="\"typename\""]
  813 -> 9 [style=solid label="\"virtual\""]
  813 -> 10 [style=solid label="\"using\""]
  813 -> 12 [style=solid label="\"class\""]
  813 -> 13 [style=solid label="\"struct\""]
  813 -> 14 [style=solid label="\"union\""]
  813 -> 15 [style=solid label="\"const\""]
  813 -> 16 [style=solid label="\"volatile\""]
  813 -> 17 [style=solid label="\"friend\""]
  813 -> 18 [style=solid label="\"typedef\""]
  813 -> 19 [style=solid label="\"consteval\""]
  813 -> 20 [style=solid label="\"constinit\""]
  813 -> 21 [style=solid label="\"decltype\""]
  813 -> 22 [style=solid label="\"enum\""]
  813 -> 23 [style=solid label="\"explicit\""]
  813 -> 991 [style=solid label="\"namespace\""]
  813 -> 27 [style=solid label="\"char\""]
  813 -> 28 [style=solid label="\"char8_t\""]
  813 -> 29 [style=solid label="\"char16_t\""]
  813 -> 30 [style=solid label="\"char32_t\""]
  813 -> 31 [style=solid label="\"wchar_t\""]
  813 -> 32 [style=solid label="\"bool\""]
  813 -> 33 [style=solid label="\"short\""]
  813 -> 34 [style=solid label="\"int\""]
  813 -> 35 [style=solid label="\"long\""]
  813 -> 36 [style=solid label="\"signed\""]
  813 -> 37 [style=solid label="\"unsigned\""]
  813 -> 38 [style=solid label="\"float\""]
  813 -> 39 [style=solid label="\"double\""]
  813 -> 40 [style=solid label="\"void\""]
  813 -> 41 [style=solid label="\"static_assert\""]
  813 -> 42 [style=solid label="\"static\""]
  813 -> 43 [style=solid label="\"thread_local\""]
  813 -> 44 [style=solid label="\"mutable\""]
  813 -> 47 [style=dashed label="alias-declaration"]
  813 -> 48 [style=dashed label="asm-declaration"]
  813 -> 992 [style=dashed label="attribute-specifier-seq"]
  813 -> 993 [style=dashed label="attribute-specifier-seq-opt"]
  813 -> 994 [style=dashed label="block-declaration"]
  813 -> 53 [style=dashed label="class-head"]
  813 -> 54 [style=dashed label="class-key"]
  813 -> 55 [style=dashed label="class-name"]
  813 -> 56 [style=dashed label="class-specifier"]
  813 -> 57 [style=dashed label="cv-qualifier"]
  813 -> 58 [style=dashed label="decl-specifier"]
  813 -> 59 [style=dashed label="decl-specifier-seq"]
  813 -> 995 [style=dashed label="declaration-statement"]
  813 -> 63 [style=dashed label="decltype-specifier"]
  813 -> 65 [style=dashed label="defining-type-specifier"]
  813 -> 66 [style=dashed label="elaborated-enum-specifier"]
  813 -> 67 [style=dashed label="elaborated-type-specifier"]
  813 -> 69 [style=dashed label="enum-head"]
  813 -> 70 [style=dashed label="enum-key"]
  813 -> 71 [style=dashed label="enum-name"]
  813 -> 72 [style=dashed label="enum-specifier"]
  813 -> 155 [style=dashed label="explicit-specifier"]
  813 -> 79 [style=dashed label="function-specifier"]
  813 -> 996 [style=dashed label="labeled-statement"]
  813 -> 85 [style=dashed label="namespace-alias"]
  813 -> 86 [style=dashed label="namespace-alias-definition"]
  813 -> 88 [style=dashed label="namespace-name"]
  813 -> 89 [style=dashed label="nested-name-specifier"]
  813 -> 90 [style=dashed label="nested-name-specifier-opt"]
  813 -> 93 [style=dashed label="opaque-enum-declaration"]
  813 -> 94 [style=dashed label="placeholder-type-specifier"]
  813 -> 95 [style=dashed label="simple-declaration"]
  813 -> 96 [style=dashed label="simple-template-id"]
  813 -> 97 [style=dashed label="simple-type-specifier"]
  813 -> 997 [style=dashed label="statement"]
  813 -> 998 [style=dashed label="statement-seq"]
  813 -> 999 [style=dashed label="statement-seq-opt"]
  813 -> 98 [style=dashed label="static_assert-declaration"]
  813 -> 99 [style=dashed label="storage-class-specifier"]
  813 -> 102 [style=dashed label="template-name"]
  813 -> 104 [style=dashed label="type-constraint"]
  813 -> 105 [style=dashed label="type-constraint-opt"]
  813 -> 106 [style=dashed label="type-name"]
  813 -> 107 [style=dashed label="type-specifier"]
  813 -> 108 [style=dashed label="typedef-name"]
  813 -> 109 [style=dashed label="typename-specifier"]
  813 -> 111 [style=dashed label="using-declaration"]
  813 -> 112 [style=dashed label="using-directive"]
  813 -> 113 [style=dashed label="using-enum-declaration"]
  813 -> "813R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "813R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  813 -> "813R83" [style=solid]
 "813R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  813 -> "813R469d" [label="[IDENTIFIER]", style=solid]
 "813R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  813 -> "813R686" [label="[\"}\"]", style=solid]
 "813R686" [label="R686", fillcolor=3, shape=diamond, style=filled]
  813 -> "813R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "813R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  814 [label="State 814\n\l390 lambda-expression: lambda-introducer lambda-declarator compound-statement •\l"]
  814 -> "814R390" [style=solid]
 "814R390" [label="R390", fillcolor=3, shape=diamond, style=filled]
  815 [label="State 815\n\l707 template-id: literal-operator-id \"<\" template-argument-list-opt • \">\"\l"]
  815 -> 1000 [style=solid label="\">\""]
  816 [label="State 816\n\l348 inclusive-or-expression: inclusive-or-expression • \"|\" exclusive-or-expression\l406 logical-and-expression: logical-and-expression \"&&\" inclusive-or-expression •\l"]
  816 -> 554 [style=solid label="\"|\""]
  816 -> "816R406" [style=solid]
 "816R406" [label="R406", fillcolor=3, shape=diamond, style=filled]
  817 [label="State 817\n\l159 conditional-expression: logical-or-expression \"?\" expression • \":\" assignment-expression\l280 expression: expression • \",\" assignment-expression\l"]
  817 -> 552 [style=solid label="\",\""]
  817 -> 1001 [style=solid label="\":\""]
  818 [label="State 818\n\l406 logical-and-expression: logical-and-expression • \"&&\" inclusive-or-expression\l408 logical-or-expression: logical-or-expression \"||\" logical-and-expression •\l"]
  818 -> 562 [style=solid label="\"&&\""]
  818 -> "818R408" [style=solid]
 "818R408" [label="R408", fillcolor=3, shape=diamond, style=filled]
  819 [label="State 819\n\l 53 assignment-expression: logical-or-expression assignment-operator initializer-clause •\l"]
  819 -> "819R53" [style=solid]
 "819R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  820 [label="State 820\n\l451 multiplicative-expression: multiplicative-expression \"*\" pm-expression •\l568 pm-expression: pm-expression • \".*\" cast-expression\l569              | pm-expression • \"->*\" cast-expression\l"]
  820 -> 582 [style=solid label="\".*\""]
  820 -> 583 [style=solid label="\"->*\""]
  820 -> "820R451" [style=solid]
 "820R451" [label="R451", fillcolor=3, shape=diamond, style=filled]
  821 [label="State 821\n\l452 multiplicative-expression: multiplicative-expression \"/\" pm-expression •\l568 pm-expression: pm-expression • \".*\" cast-expression\l569              | pm-expression • \"->*\" cast-expression\l"]
  821 -> 582 [style=solid label="\".*\""]
  821 -> 583 [style=solid label="\"->*\""]
  821 -> "821R452" [style=solid]
 "821R452" [label="R452", fillcolor=3, shape=diamond, style=filled]
  822 [label="State 822\n\l453 multiplicative-expression: multiplicative-expression \"%\" pm-expression •\l568 pm-expression: pm-expression • \".*\" cast-expression\l569              | pm-expression • \"->*\" cast-expression\l"]
  822 -> 582 [style=solid label="\".*\""]
  822 -> 583 [style=solid label="\"->*\""]
  822 -> "822R453" [style=solid]
 "822R453" [label="R453", fillcolor=3, shape=diamond, style=filled]
  823 [label="State 823\n\l708 template-name: IDENTIFIER •\l767 unqualified-id: IDENTIFIER •\l"]
  823 -> "823R708" [label="[\"<\"]", style=solid]
 "823R708" [label="R708", fillcolor=3, shape=diamond, style=filled]
  823 -> "823R767d" [label="[\"<\"]", style=solid]
 "823R767d" [label="R767", fillcolor=5, shape=diamond, style=filled]
  823 -> "823R767" [style=solid]
 "823R767" [label="R767", fillcolor=3, shape=diamond, style=filled]
  824 [label="State 824\n\l468 nested-name-specifier: nested-name-specifier TEMPLATE-opt simple-template-id • \"::\"\l705 template-id: simple-template-id •\l"]
  824 -> 693 [style=solid label="\"::\""]
  824 -> "824R705d" [label="[\"::\"]", style=solid]
 "824R705d" [label="R705", fillcolor=5, shape=diamond, style=filled]
  824 -> "824R705" [style=solid]
 "824R705" [label="R705", fillcolor=3, shape=diamond, style=filled]
  825 [label="State 825\n\l612 qualified-id: nested-name-specifier TEMPLATE-opt unqualified-id •\l"]
  825 -> "825R612" [style=solid]
 "825R612" [label="R612", fillcolor=3, shape=diamond, style=filled]
  826 [label="State 826\n\l706 template-id: operator-function-id \"<\" template-argument-list-opt • \">\"\l"]
  826 -> 1002 [style=solid label="\">\""]
  827 [label="State 827\n\l568 pm-expression: pm-expression \".*\" cast-expression •\l"]
  827 -> "827R568" [style=solid]
 "827R568" [label="R568", fillcolor=3, shape=diamond, style=filled]
  828 [label="State 828\n\l569 pm-expression: pm-expression \"->*\" cast-expression •\l"]
  828 -> "828R569" [style=solid]
 "828R569" [label="R569", fillcolor=3, shape=diamond, style=filled]
  829 [label="State 829\n\l283 expression-list-opt: expression-list •\l"]
  829 -> "829R283" [style=solid]
 "829R283" [label="R283", fillcolor=3, shape=diamond, style=filled]
  830 [label="State 830\n\l573 postfix-expression: postfix-expression \"(\" expression-list-opt • \")\"\l"]
  830 -> 1003 [style=solid label="\")\""]
  831 [label="State 831\n\l572 postfix-expression: postfix-expression \"[\" expression-list-opt • \"]\"\l"]
  831 -> 1004 [style=solid label="\"]\""]
  832 [label="State 832\n\l579 postfix-expression: postfix-expression \"->\" TEMPLATE-opt • id-expression\l"]
  832 -> 238 [style=solid label="IDENTIFIER"]
  832 -> 6 [style=solid label="\"::\""]
  832 -> 251 [style=solid label="\"operator\""]
  832 -> 21 [style=solid label="\"decltype\""]
  832 -> 354 [style=solid label="\"~\""]
  832 -> 55 [style=dashed label="class-name"]
  832 -> 282 [style=dashed label="conversion-function-id"]
  832 -> 121 [style=dashed label="decltype-specifier"]
  832 -> 71 [style=dashed label="enum-name"]
  832 -> 1005 [style=dashed label="id-expression"]
  832 -> 295 [style=dashed label="literal-operator-id"]
  832 -> 85 [style=dashed label="namespace-alias"]
  832 -> 88 [style=dashed label="namespace-name"]
  832 -> 356 [style=dashed label="nested-name-specifier"]
  832 -> 302 [style=dashed label="operator-function-id"]
  832 -> 307 [style=dashed label="qualified-id"]
  832 -> 311 [style=dashed label="simple-template-id"]
  832 -> 314 [style=dashed label="template-id"]
  832 -> 102 [style=dashed label="template-name"]
  832 -> 106 [style=dashed label="type-name"]
  832 -> 108 [style=dashed label="typedef-name"]
  832 -> 319 [style=dashed label="unqualified-id"]
  833 [label="State 833\n\l578 postfix-expression: postfix-expression \".\" TEMPLATE-opt • id-expression\l"]
  833 -> 238 [style=solid label="IDENTIFIER"]
  833 -> 6 [style=solid label="\"::\""]
  833 -> 251 [style=solid label="\"operator\""]
  833 -> 21 [style=solid label="\"decltype\""]
  833 -> 354 [style=solid label="\"~\""]
  833 -> 55 [style=dashed label="class-name"]
  833 -> 282 [style=dashed label="conversion-function-id"]
  833 -> 121 [style=dashed label="decltype-specifier"]
  833 -> 71 [style=dashed label="enum-name"]
  833 -> 1006 [style=dashed label="id-expression"]
  833 -> 295 [style=dashed label="literal-operator-id"]
  833 -> 85 [style=dashed label="namespace-alias"]
  833 -> 88 [style=dashed label="namespace-name"]
  833 -> 356 [style=dashed label="nested-name-specifier"]
  833 -> 302 [style=dashed label="operator-function-id"]
  833 -> 307 [style=dashed label="qualified-id"]
  833 -> 311 [style=dashed label="simple-template-id"]
  833 -> 314 [style=dashed label="template-id"]
  833 -> 102 [style=dashed label="template-name"]
  833 -> 106 [style=dashed label="type-name"]
  833 -> 108 [style=dashed label="typedef-name"]
  833 -> 319 [style=dashed label="unqualified-id"]
  834 [label="State 834\n\l149 compare-expression: compare-expression • \"<=>\" shift-expression\l619 relational-expression: relational-expression \"<\" compare-expression •\l"]
  834 -> 548 [style=solid label="\"<=>\""]
  834 -> "834R619" [style=solid]
 "834R619" [label="R619", fillcolor=3, shape=diamond, style=filled]
  835 [label="State 835\n\l149 compare-expression: compare-expression • \"<=>\" shift-expression\l620 relational-expression: relational-expression \">\" compare-expression •\l"]
  835 -> 548 [style=solid label="\"<=>\""]
  835 -> "835R620" [style=solid]
 "835R620" [label="R620", fillcolor=3, shape=diamond, style=filled]
  836 [label="State 836\n\l149 compare-expression: compare-expression • \"<=>\" shift-expression\l621 relational-expression: relational-expression \"<=\" compare-expression •\l"]
  836 -> 548 [style=solid label="\"<=>\""]
  836 -> "836R621" [style=solid]
 "836R621" [label="R621", fillcolor=3, shape=diamond, style=filled]
  837 [label="State 837\n\l149 compare-expression: compare-expression • \"<=>\" shift-expression\l622 relational-expression: relational-expression \">=\" compare-expression •\l"]
  837 -> 548 [style=solid label="\"<=>\""]
  837 -> "837R622" [style=solid]
 "837R622" [label="R622", fillcolor=3, shape=diamond, style=filled]
  838 [label="State 838\n\l 42 additive-expression: additive-expression • \"+\" multiplicative-expression\l 43                    | additive-expression • \"-\" multiplicative-expression\l646 shift-expression: shift-expression \"<<\" additive-expression •\l"]
  838 -> 545 [style=solid label="\"+\""]
  838 -> 546 [style=solid label="\"-\""]
  838 -> "838R646" [style=solid]
 "838R646" [label="R646", fillcolor=3, shape=diamond, style=filled]
  839 [label="State 839\n\l 42 additive-expression: additive-expression • \"+\" multiplicative-expression\l 43                    | additive-expression • \"-\" multiplicative-expression\l647 shift-expression: shift-expression \">>\" additive-expression •\l"]
  839 -> 545 [style=solid label="\"+\""]
  839 -> 546 [style=solid label="\"-\""]
  839 -> "839R647" [style=solid]
 "839R647" [label="R647", fillcolor=3, shape=diamond, style=filled]
  840 [label="State 840\n\l574 postfix-expression: simple-type-specifier \"(\" expression-list-opt • \")\"\l"]
  840 -> 1007 [style=solid label="\")\""]
  841 [label="State 841\n\l575 postfix-expression: typename-specifier \"(\" expression-list-opt • \")\"\l"]
  841 -> 1008 [style=solid label="\")\""]
  842 [label="State 842\n\l455 namespace-alias: IDENTIFIER •\l461 namespace-name: IDENTIFIER •\l"]
  842 -> "842R455" [style=solid]
 "842R455" [label="R455", fillcolor=3, shape=diamond, style=filled]
  842 -> "842R461d" [label="[\";\"]", style=solid]
 "842R461d" [label="R461", fillcolor=5, shape=diamond, style=filled]
  843 [label="State 843\n\l613 qualified-namespace-specifier: nested-name-specifier-opt namespace-name •\l"]
  843 -> "843R613" [style=solid]
 "843R613" [label="R613", fillcolor=3, shape=diamond, style=filled]
  844 [label="State 844\n\l456 namespace-alias-definition: \"namespace\" IDENTIFIER \"=\" qualified-namespace-specifier \";\" •\l"]
  844 -> "844R456" [style=solid]
 "844R456" [label="R456", fillcolor=3, shape=diamond, style=filled]
  845 [label="State 845\n\l237 enclosing-namespace-specifier: enclosing-namespace-specifier \"::\" INLINE-opt IDENTIFIER •\l471 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" INLINE-opt IDENTIFIER • \"{\" namespace-body \"}\"\l"]
  845 -> 1009 [style=solid label="\"{\""]
  845 -> "845R237" [style=solid]
 "845R237" [label="R237", fillcolor=3, shape=diamond, style=filled]
  846 [label="State 846\n\l689 static_assert-declaration: \"static_assert\" \"(\" constant-expression \",\" string-literal • \")\" \";\"\l"]
  846 -> 1010 [style=solid label="\")\""]
  847 [label="State 847\n\l688 static_assert-declaration: \"static_assert\" \"(\" constant-expression \")\" \";\" •\l"]
  847 -> "847R688" [style=solid]
 "847R688" [label="R688", fillcolor=3, shape=diamond, style=filled]
  848 [label="State 848\n\l454 named-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt IDENTIFIER \"{\" • namespace-body \"}\"\l"]
  848 -> 1 [style=solid label="\"constexpr\""]
  848 -> 2 [style=solid label="\"export\""]
  848 -> 3 [style=solid label="\"extern\""]
  848 -> 4 [style=solid label="IDENTIFIER"]
  848 -> 5 [style=solid label="\"inline\""]
  848 -> 6 [style=solid label="\"::\""]
  848 -> 7 [style=solid label="\"template\""]
  848 -> 8 [style=solid label="\"typename\""]
  848 -> 9 [style=solid label="\"virtual\""]
  848 -> 10 [style=solid label="\"using\""]
  848 -> 11 [style=solid label="\";\""]
  848 -> 12 [style=solid label="\"class\""]
  848 -> 13 [style=solid label="\"struct\""]
  848 -> 14 [style=solid label="\"union\""]
  848 -> 15 [style=solid label="\"const\""]
  848 -> 16 [style=solid label="\"volatile\""]
  848 -> 17 [style=solid label="\"friend\""]
  848 -> 18 [style=solid label="\"typedef\""]
  848 -> 19 [style=solid label="\"consteval\""]
  848 -> 20 [style=solid label="\"constinit\""]
  848 -> 21 [style=solid label="\"decltype\""]
  848 -> 22 [style=solid label="\"enum\""]
  848 -> 23 [style=solid label="\"explicit\""]
  848 -> 25 [style=solid label="\"import\""]
  848 -> 26 [style=solid label="\"namespace\""]
  848 -> 27 [style=solid label="\"char\""]
  848 -> 28 [style=solid label="\"char8_t\""]
  848 -> 29 [style=solid label="\"char16_t\""]
  848 -> 30 [style=solid label="\"char32_t\""]
  848 -> 31 [style=solid label="\"wchar_t\""]
  848 -> 32 [style=solid label="\"bool\""]
  848 -> 33 [style=solid label="\"short\""]
  848 -> 34 [style=solid label="\"int\""]
  848 -> 35 [style=solid label="\"long\""]
  848 -> 36 [style=solid label="\"signed\""]
  848 -> 37 [style=solid label="\"unsigned\""]
  848 -> 38 [style=solid label="\"float\""]
  848 -> 39 [style=solid label="\"double\""]
  848 -> 40 [style=solid label="\"void\""]
  848 -> 41 [style=solid label="\"static_assert\""]
  848 -> 42 [style=solid label="\"static\""]
  848 -> 43 [style=solid label="\"thread_local\""]
  848 -> 44 [style=solid label="\"mutable\""]
  848 -> 45 [style=dashed label="EXTERN-opt"]
  848 -> 46 [style=dashed label="INLINE-opt"]
  848 -> 47 [style=dashed label="alias-declaration"]
  848 -> 48 [style=dashed label="asm-declaration"]
  848 -> 49 [style=dashed label="attribute-declaration"]
  848 -> 50 [style=dashed label="attribute-specifier-seq"]
  848 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  848 -> 52 [style=dashed label="block-declaration"]
  848 -> 53 [style=dashed label="class-head"]
  848 -> 54 [style=dashed label="class-key"]
  848 -> 55 [style=dashed label="class-name"]
  848 -> 56 [style=dashed label="class-specifier"]
  848 -> 57 [style=dashed label="cv-qualifier"]
  848 -> 58 [style=dashed label="decl-specifier"]
  848 -> 59 [style=dashed label="decl-specifier-seq"]
  848 -> 60 [style=dashed label="declaration"]
  848 -> 61 [style=dashed label="declaration-seq"]
  848 -> 849 [style=dashed label="declaration-seq-opt"]
  848 -> 63 [style=dashed label="decltype-specifier"]
  848 -> 64 [style=dashed label="deduction-guide"]
  848 -> 65 [style=dashed label="defining-type-specifier"]
  848 -> 66 [style=dashed label="elaborated-enum-specifier"]
  848 -> 67 [style=dashed label="elaborated-type-specifier"]
  848 -> 68 [style=dashed label="empty-declaration"]
  848 -> 69 [style=dashed label="enum-head"]
  848 -> 70 [style=dashed label="enum-key"]
  848 -> 71 [style=dashed label="enum-name"]
  848 -> 72 [style=dashed label="enum-specifier"]
  848 -> 73 [style=dashed label="explicit-instantiation"]
  848 -> 74 [style=dashed label="explicit-specialization"]
  848 -> 75 [style=dashed label="explicit-specifier"]
  848 -> 76 [style=dashed label="explicit-specifier-opt"]
  848 -> 77 [style=dashed label="export-declaration"]
  848 -> 78 [style=dashed label="function-definition"]
  848 -> 79 [style=dashed label="function-specifier"]
  848 -> 82 [style=dashed label="linkage-specification"]
  848 -> 83 [style=dashed label="module-import-declaration"]
  848 -> 84 [style=dashed label="named-namespace-definition"]
  848 -> 85 [style=dashed label="namespace-alias"]
  848 -> 86 [style=dashed label="namespace-alias-definition"]
  848 -> 1011 [style=dashed label="namespace-body"]
  848 -> 87 [style=dashed label="namespace-definition"]
  848 -> 88 [style=dashed label="namespace-name"]
  848 -> 89 [style=dashed label="nested-name-specifier"]
  848 -> 90 [style=dashed label="nested-name-specifier-opt"]
  848 -> 91 [style=dashed label="nested-namespace-definition"]
  848 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  848 -> 93 [style=dashed label="opaque-enum-declaration"]
  848 -> 94 [style=dashed label="placeholder-type-specifier"]
  848 -> 95 [style=dashed label="simple-declaration"]
  848 -> 96 [style=dashed label="simple-template-id"]
  848 -> 97 [style=dashed label="simple-type-specifier"]
  848 -> 98 [style=dashed label="static_assert-declaration"]
  848 -> 99 [style=dashed label="storage-class-specifier"]
  848 -> 100 [style=dashed label="template-declaration"]
  848 -> 101 [style=dashed label="template-head"]
  848 -> 102 [style=dashed label="template-name"]
  848 -> 104 [style=dashed label="type-constraint"]
  848 -> 105 [style=dashed label="type-constraint-opt"]
  848 -> 106 [style=dashed label="type-name"]
  848 -> 107 [style=dashed label="type-specifier"]
  848 -> 108 [style=dashed label="typedef-name"]
  848 -> 109 [style=dashed label="typename-specifier"]
  848 -> 110 [style=dashed label="unnamed-namespace-definition"]
  848 -> 111 [style=dashed label="using-declaration"]
  848 -> 112 [style=dashed label="using-directive"]
  848 -> 113 [style=dashed label="using-enum-declaration"]
  848 -> "848R9d" [label="[\"template\"]", style=solid]
 "848R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  848 -> "848R13d" [label="[\"namespace\"]", style=solid]
 "848R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  848 -> "848R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "848R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  848 -> "848R83" [label="[]", style=solid]
 "848R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  848 -> "848R210" [label="[\"}\"]", style=solid]
 "848R210" [label="R210", fillcolor=3, shape=diamond, style=filled]
  848 -> "848R270d" [label="[IDENTIFIER]", style=solid]
 "848R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  848 -> "848R469d" [label="[IDENTIFIER]", style=solid]
 "848R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  848 -> "848R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "848R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  849 [label="State 849\n\l457 namespace-body: declaration-seq-opt •\l"]
  849 -> "849R457" [style=solid]
 "849R457" [label="R457", fillcolor=3, shape=diamond, style=filled]
  850 [label="State 850\n\l766 unnamed-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt \"{\" namespace-body • \"}\"\l"]
  850 -> 1012 [style=solid label="\"}\""]
  851 [label="State 851\n\l786 using-directive: attribute-specifier-seq-opt \"using\" \"namespace\" nested-name-specifier-opt namespace-name • \";\"\l"]
  851 -> 1013 [style=solid label="\";\""]
  852 [label="State 852\n\l 46 alignment-specifier: \"alignas\" \"(\" constant-expression ELLIPSIS-opt • \")\"\l"]
  852 -> 1014 [style=solid label="\")\""]
  853 [label="State 853\n\l 45 alignment-specifier: \"alignas\" \"(\" type-id ELLIPSIS-opt • \")\"\l"]
  853 -> 1015 [style=solid label="\")\""]
  854 [label="State 854\n\l 49 asm-declaration: attribute-specifier-seq-opt \"asm\" \"(\" string-literal \")\" • \";\"\l"]
  854 -> 1016 [style=solid label="\";\""]
  855 [label="State 855\n\l 76 attribute-namespace: IDENTIFIER •\l"]
  855 -> "855R76" [style=solid]
 "855R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  856 [label="State 856\n\l 87 attribute-using-prefix: \"using\" attribute-namespace • \":\"\l"]
  856 -> 1017 [style=solid label="\":\""]
  857 [label="State 857\n\l 76 attribute-namespace: IDENTIFIER •\l 85 attribute-token: IDENTIFIER •\l"]
  857 -> "857R76" [label="[\"::\"]", style=solid]
 "857R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  857 -> "857R85" [style=solid]
 "857R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
  858 [label="State 858\n\l 74 attribute-list: attribute • \"...\"\l 78 attribute-opt: attribute •\l"]
  858 -> 1018 [style=solid label="\"...\""]
  858 -> "858R78" [style=solid]
 "858R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  859 [label="State 859\n\l 73 attribute-list: attribute-list • \",\" attribute-opt\l 75               | attribute-list • \",\" attribute \"...\"\l 80 attribute-specifier: \"[\" \"[\" attribute-using-prefix-opt attribute-list • \"]\" \"]\"\l"]
  859 -> 1019 [style=solid label="\",\""]
  859 -> 1020 [style=solid label="\"]\""]
  860 [label="State 860\n\l 79 attribute-scoped-token: attribute-namespace • \"::\" IDENTIFIER\l"]
  860 -> 1021 [style=solid label="\"::\""]
  861 [label="State 861\n\l 72 attribute-list: attribute-opt •\l"]
  861 -> "861R72" [style=solid]
 "861R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  862 [label="State 862\n\l 86 attribute-token: attribute-scoped-token •\l"]
  862 -> "862R86" [style=solid]
 "862R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
  863 [label="State 863\n\l 67 attribute: attribute-token • attribute-argument-clause-opt\l"]
  863 -> 1022 [style=solid label="\"(\""]
  863 -> 1023 [style=dashed label="attribute-argument-clause"]
  863 -> 1024 [style=dashed label="attribute-argument-clause-opt"]
  863 -> "863R69" [style=solid]
 "863R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
  864 [label="State 864\n\l179 cv-qualifier-seq: cv-qualifier cv-qualifier-seq-opt •\l"]
  864 -> "864R179" [style=solid]
 "864R179" [label="R179", fillcolor=3, shape=diamond, style=filled]
  865 [label="State 865\n\l345 identifier-list: IDENTIFIER •\l"]
  865 -> "865R345" [style=solid]
 "865R345" [label="R345", fillcolor=3, shape=diamond, style=filled]
  866 [label="State 866\n\l346 identifier-list: identifier-list • \",\" IDENTIFIER\l654 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" identifier-list • \"]\" initializer \";\"\l"]
  866 -> 1025 [style=solid label="\",\""]
  866 -> 1026 [style=solid label="\"]\""]
  867 [label="State 867\n\l328 function-body: \"=\" • \"default\" \";\"\l329              | \"=\" • \"delete\" \";\"\l"]
  867 -> 1027 [style=solid label="\"delete\""]
  867 -> 1028 [style=solid label="\"default\""]
  868 [label="State 868\n\l174 ctor-initializer: \":\" • mem-initializer-list\l"]
  868 -> 1029 [style=solid label="IDENTIFIER"]
  868 -> 6 [style=solid label="\"::\""]
  868 -> 21 [style=solid label="\"decltype\""]
  868 -> 55 [style=dashed label="class-name"]
  868 -> 1030 [style=dashed label="class-or-decltype"]
  868 -> 893 [style=dashed label="decltype-specifier"]
  868 -> 71 [style=dashed label="enum-name"]
  868 -> 1031 [style=dashed label="mem-initializer"]
  868 -> 1032 [style=dashed label="mem-initializer-id"]
  868 -> 1033 [style=dashed label="mem-initializer-list"]
  868 -> 85 [style=dashed label="namespace-alias"]
  868 -> 88 [style=dashed label="namespace-name"]
  868 -> 894 [style=dashed label="nested-name-specifier"]
  868 -> 895 [style=dashed label="nested-name-specifier-opt"]
  868 -> 96 [style=dashed label="simple-template-id"]
  868 -> 102 [style=dashed label="template-name"]
  868 -> 106 [style=dashed label="type-name"]
  868 -> 108 [style=dashed label="typedef-name"]
  868 -> "868R469d" [label="[IDENTIFIER]", style=solid]
 "868R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  869 [label="State 869\n\l334 function-try-block: \"try\" • ctor-initializer-opt compound-statement handler-seq\l"]
  869 -> 868 [style=solid label="\":\""]
  869 -> 870 [style=dashed label="ctor-initializer"]
  869 -> 1034 [style=dashed label="ctor-initializer-opt"]
  869 -> "869R175" [style=solid]
 "869R175" [label="R175", fillcolor=3, shape=diamond, style=filled]
  870 [label="State 870\n\l176 ctor-initializer-opt: ctor-initializer •\l"]
  870 -> "870R176" [style=solid]
 "870R176" [label="R176", fillcolor=3, shape=diamond, style=filled]
  871 [label="State 871\n\l326 function-body: ctor-initializer-opt • compound-statement\l"]
  871 -> 813 [style=solid label="\"{\""]
  871 -> 1035 [style=dashed label="compound-statement"]
  872 [label="State 872\n\l331 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator requires-clause function-body •\l"]
  872 -> "872R331" [style=solid]
 "872R331" [label="R331", fillcolor=3, shape=diamond, style=filled]
  873 [label="State 873\n\l327 function-body: function-try-block •\l"]
  873 -> "873R327" [style=solid]
 "873R327" [label="R327", fillcolor=3, shape=diamond, style=filled]
  874 [label="State 874\n\l791 virt-specifier-seq: virt-specifier-seq virt-specifier •\l"]
  874 -> "874R791" [style=solid]
 "874R791" [label="R791", fillcolor=3, shape=diamond, style=filled]
  875 [label="State 875\n\l330 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator virt-specifier-seq-opt function-body •\l"]
  875 -> "875R330" [style=solid]
 "875R330" [label="R330", fillcolor=3, shape=diamond, style=filled]
  876 [label="State 876\n\l608 ptr-operator: nested-name-specifier \"*\" attribute-specifier-seq-opt cv-qualifier-seq-opt •\l"]
  876 -> "876R608" [style=solid]
 "876R608" [label="R608", fillcolor=3, shape=diamond, style=filled]
  877 [label="State 877\n\l564 parameters-and-qualifiers: \"(\" parameter-declaration-clause \")\" • cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt\l"]
  877 -> 15 [style=solid label="\"const\""]
  877 -> 16 [style=solid label="\"volatile\""]
  877 -> 628 [style=dashed label="cv-qualifier"]
  877 -> 629 [style=dashed label="cv-qualifier-seq"]
  877 -> 1036 [style=dashed label="cv-qualifier-seq-opt"]
  877 -> "877R180" [style=solid]
 "877R180" [label="R180", fillcolor=3, shape=diamond, style=filled]
  878 [label="State 878\n\l559 parameter-declaration-clause: parameter-declaration-list \",\" • \"...\"\l561 parameter-declaration-list: parameter-declaration-list \",\" • parameter-declaration\l"]
  878 -> 1037 [style=solid label="\"...\""]
  878 -> 177 [style=dashed label="attribute-specifier-seq"]
  878 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  878 -> 1038 [style=dashed label="parameter-declaration"]
  878 -> "878R83" [style=solid]
 "878R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  879 [label="State 879\n\l558 parameter-declaration-clause: parameter-declaration-list-opt ELLIPSIS-opt •\l"]
  879 -> "879R558" [style=solid]
 "879R558" [label="R558", fillcolor=3, shape=diamond, style=filled]
  880 [label="State 880\n\l503 noptr-declarator: noptr-declarator \"[\" constant-expression-opt \"]\" • attribute-specifier-seq-opt\l"]
  880 -> 177 [style=dashed label="attribute-specifier-seq"]
  880 -> 1039 [style=dashed label="attribute-specifier-seq-opt"]
  880 -> "880R83" [style=solid]
 "880R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  881 [label="State 881\n\l714 trailing-return-type: \"->\" type-id •\l"]
  881 -> "881R714" [style=solid]
 "881R714" [label="R714", fillcolor=3, shape=diamond, style=filled]
  882 [label="State 882\n\l435 member-specification: access-specifier \":\" member-specification-opt •\l"]
  882 -> "882R435" [style=solid]
 "882R435" [label="R435", fillcolor=3, shape=diamond, style=filled]
  883 [label="State 883\n\l 12 IDENTIFIER-opt: IDENTIFIER •\l139 class-name: IDENTIFIER •\l248 enum-name: IDENTIFIER •\l455 namespace-alias: IDENTIFIER •\l461 namespace-name: IDENTIFIER •\l708 template-name: IDENTIFIER •\l743 typedef-name: IDENTIFIER •\l"]
  883 -> "883R12" [style=solid]
 "883R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  883 -> "883R139" [label="[\"::\"]", style=solid]
 "883R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  883 -> "883R248d" [label="[\"::\"]", style=solid]
 "883R248d" [label="R248", fillcolor=5, shape=diamond, style=filled]
  883 -> "883R455d" [label="[\"::\"]", style=solid]
 "883R455d" [label="R455", fillcolor=5, shape=diamond, style=filled]
  883 -> "883R461d" [label="[\"::\"]", style=solid]
 "883R461d" [label="R461", fillcolor=5, shape=diamond, style=filled]
  883 -> "883R708" [label="[\"<\"]", style=solid]
 "883R708" [label="R708", fillcolor=3, shape=diamond, style=filled]
  883 -> "883R743d" [label="[\"::\"]", style=solid]
 "883R743d" [label="R743", fillcolor=5, shape=diamond, style=filled]
  884 [label="State 884\n\l429 member-declarator: IDENTIFIER-opt • attribute-specifier-seq-opt \":\" constant-expression brace-or-equal-initializer-opt\l"]
  884 -> 177 [style=dashed label="attribute-specifier-seq"]
  884 -> 1040 [style=dashed label="attribute-specifier-seq-opt"]
  884 -> "884R83" [style=solid]
 "884R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  885 [label="State 885\n\l330 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator • virt-specifier-seq-opt function-body\l331                    | attribute-specifier-seq-opt decl-specifier-seq-opt declarator • requires-clause function-body\l426 member-declarator: declarator • virt-specifier-seq-opt pure-specifier-opt\l427                  | declarator • requires-clause\l428                  | declarator • brace-or-equal-initializer-opt\l"]
  885 -> 396 [style=solid label="\"=\""]
  885 -> 398 [style=solid label="\"{\""]
  885 -> 632 [style=solid label="\"final\""]
  885 -> 399 [style=solid label="\"requires\""]
  885 -> 633 [style=solid label="\"override\""]
  885 -> 1041 [style=dashed label="brace-or-equal-initializer"]
  885 -> 1042 [style=dashed label="brace-or-equal-initializer-opt"]
  885 -> 401 [style=dashed label="braced-init-list"]
  885 -> 1043 [style=dashed label="requires-clause"]
  885 -> 635 [style=dashed label="virt-specifier"]
  885 -> 636 [style=dashed label="virt-specifier-seq"]
  885 -> 1044 [style=dashed label="virt-specifier-seq-opt"]
  885 -> "885R119" [style=solid]
 "885R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
  885 -> "885R792d" [label="[\",\", \"=\", \";\", \"{\"]", style=solid]
 "885R792d" [label="R792", fillcolor=5, shape=diamond, style=filled]
  885 -> "885R792" [label="[\":\", \"try\"]", style=solid]
 "885R792" [label="R792", fillcolor=3, shape=diamond, style=filled]
  886 [label="State 886\n\l430 member-declarator-list: member-declarator •\l"]
  886 -> "886R430" [style=solid]
 "886R430" [label="R430", fillcolor=3, shape=diamond, style=filled]
  887 [label="State 887\n\l431 member-declarator-list: member-declarator-list • \",\" member-declarator\l433 member-declarator-list-opt: member-declarator-list •\l"]
  887 -> 1045 [style=solid label="\",\""]
  887 -> "887R433" [style=solid]
 "887R433" [label="R433", fillcolor=3, shape=diamond, style=filled]
  888 [label="State 888\n\l415 member-declaration: attribute-specifier-seq-opt decl-specifier-seq-opt member-declarator-list-opt • \";\"\l"]
  888 -> 1046 [style=solid label="\";\""]
  889 [label="State 889\n\l507 opaque-enum-declaration: enum-key attribute-specifier-seq-opt enum-head-name • enum-base-opt \";\"\l"]
  889 -> 683 [style=solid label="\":\""]
  889 -> 684 [style=dashed label="enum-base"]
  889 -> 685 [style=dashed label="enum-base-opt"]
  889 -> "889R239" [style=solid]
 "889R239" [label="R239", fillcolor=3, shape=diamond, style=filled]
  890 [label="State 890\n\l103 base-specifier: attribute-specifier-seq-opt \"virtual\" • access-specifier-opt class-or-decltype\l"]
  890 -> 369 [style=solid label="\"private\""]
  890 -> 370 [style=solid label="\"protected\""]
  890 -> 371 [style=solid label="\"public\""]
  890 -> 1047 [style=dashed label="access-specifier"]
  890 -> 1048 [style=dashed label="access-specifier-opt"]
  890 -> "890R39" [style=solid]
 "890R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  891 [label="State 891\n\l104 base-specifier: attribute-specifier-seq-opt access-specifier • VIRTUAL-opt class-or-decltype\l"]
  891 -> 1049 [style=solid label="\"virtual\""]
  891 -> 1050 [style=dashed label="VIRTUAL-opt"]
  891 -> "891R27" [style=solid]
 "891R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  892 [label="State 892\n\l102 base-specifier: attribute-specifier-seq-opt class-or-decltype •\l"]
  892 -> "892R102" [style=solid]
 "892R102" [label="R102", fillcolor=3, shape=diamond, style=filled]
  893 [label="State 893\n\l143 class-or-decltype: decltype-specifier •\l466 nested-name-specifier: decltype-specifier • \"::\"\l"]
  893 -> 189 [style=solid label="\"::\""]
  893 -> "893R143" [style=solid]
 "893R143" [label="R143", fillcolor=3, shape=diamond, style=filled]
  894 [label="State 894\n\l142 class-or-decltype: nested-name-specifier • \"template\" simple-template-id\l467 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l468                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l470 nested-name-specifier-opt: nested-name-specifier •\l"]
  894 -> 198 [style=solid label="IDENTIFIER"]
  894 -> 1051 [style=solid label="\"template\""]
  894 -> 200 [style=dashed label="TEMPLATE-opt"]
  894 -> "894R21d" [label="[IDENTIFIER]", style=solid]
 "894R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  894 -> "894R470d" [label="[IDENTIFIER]", style=solid]
 "894R470d" [label="R470", fillcolor=5, shape=diamond, style=filled]
  895 [label="State 895\n\l141 class-or-decltype: nested-name-specifier-opt • type-name\l"]
  895 -> 525 [style=solid label="IDENTIFIER"]
  895 -> 55 [style=dashed label="class-name"]
  895 -> 71 [style=dashed label="enum-name"]
  895 -> 96 [style=dashed label="simple-template-id"]
  895 -> 102 [style=dashed label="template-name"]
  895 -> 1052 [style=dashed label="type-name"]
  895 -> 108 [style=dashed label="typedef-name"]
  896 [label="State 896\n\l105 base-specifier-list: base-specifier ELLIPSIS-opt •\l"]
  896 -> "896R105" [style=solid]
 "896R105" [label="R105", fillcolor=3, shape=diamond, style=filled]
  897 [label="State 897\n\l106 base-specifier-list: base-specifier-list \",\" • base-specifier ELLIPSIS-opt\l"]
  897 -> 177 [style=dashed label="attribute-specifier-seq"]
  897 -> 652 [style=dashed label="attribute-specifier-seq-opt"]
  897 -> 1053 [style=dashed label="base-specifier"]
  897 -> "897R83" [style=solid]
 "897R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  898 [label="State 898\n\l133 class-head: class-key attribute-specifier-seq-opt class-head-name class-virt-specifier-opt base-clause-opt •\l"]
  898 -> "898R133" [style=solid]
 "898R133" [label="R133", fillcolor=3, shape=diamond, style=filled]
  899 [label="State 899\n\l363 initializer: \"(\" expression-list \")\" •\l"]
  899 -> "899R363" [style=solid]
 "899R363" [label="R363", fillcolor=3, shape=diamond, style=filled]
  900 [label="State 900\n\l366 initializer-list: initializer-clause ELLIPSIS-opt •\l"]
  900 -> "900R366" [style=solid]
 "900R366" [label="R366", fillcolor=3, shape=diamond, style=filled]
  901 [label="State 901\n\l367 initializer-list: initializer-list \",\" • initializer-clause ELLIPSIS-opt\l"]
  901 -> 238 [style=solid label="IDENTIFIER"]
  901 -> 239 [style=solid label="\"noexcept\""]
  901 -> 240 [style=solid label="\"!\""]
  901 -> 241 [style=solid label="\"::\""]
  901 -> 242 [style=solid label="\"this\""]
  901 -> 8 [style=solid label="\"typename\""]
  901 -> 243 [style=solid label="\"+\""]
  901 -> 244 [style=solid label="\"-\""]
  901 -> 245 [style=solid label="\"(\""]
  901 -> 246 [style=solid label="\"&\""]
  901 -> 247 [style=solid label="\"[\""]
  901 -> 248 [style=solid label="\"co_await\""]
  901 -> 398 [style=solid label="\"{\""]
  901 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  901 -> 250 [style=solid label="CHARACTER_LITERAL"]
  901 -> 251 [style=solid label="\"operator\""]
  901 -> 21 [style=solid label="\"decltype\""]
  901 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  901 -> 253 [style=solid label="\"*\""]
  901 -> 254 [style=solid label="INTEGER_LITERAL"]
  901 -> 255 [style=solid label="\"requires\""]
  901 -> 256 [style=solid label="\"~\""]
  901 -> 257 [style=solid label="\"++\""]
  901 -> 258 [style=solid label="\"--\""]
  901 -> 259 [style=solid label="POINTER_LITERAL"]
  901 -> 260 [style=solid label="\"dynamic_cast\""]
  901 -> 261 [style=solid label="\"static_cast\""]
  901 -> 262 [style=solid label="\"reinterpret_cast\""]
  901 -> 263 [style=solid label="\"const_cast\""]
  901 -> 264 [style=solid label="\"typeid\""]
  901 -> 27 [style=solid label="\"char\""]
  901 -> 28 [style=solid label="\"char8_t\""]
  901 -> 29 [style=solid label="\"char16_t\""]
  901 -> 30 [style=solid label="\"char32_t\""]
  901 -> 31 [style=solid label="\"wchar_t\""]
  901 -> 32 [style=solid label="\"bool\""]
  901 -> 33 [style=solid label="\"short\""]
  901 -> 34 [style=solid label="\"int\""]
  901 -> 35 [style=solid label="\"long\""]
  901 -> 36 [style=solid label="\"signed\""]
  901 -> 37 [style=solid label="\"unsigned\""]
  901 -> 38 [style=solid label="\"float\""]
  901 -> 39 [style=solid label="\"double\""]
  901 -> 40 [style=solid label="\"void\""]
  901 -> 118 [style=solid label="STRING_LITERAL"]
  901 -> 265 [style=solid label="\"throw\""]
  901 -> 266 [style=solid label="\"sizeof\""]
  901 -> 267 [style=solid label="\"alignof\""]
  901 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  901 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  901 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  901 -> 271 [style=solid label="\"co_yield\""]
  901 -> 272 [style=dashed label="SCOPE-opt"]
  901 -> 273 [style=dashed label="additive-expression"]
  901 -> 274 [style=dashed label="and-expression"]
  901 -> 662 [style=dashed label="assignment-expression"]
  901 -> 276 [style=dashed label="await-expression"]
  901 -> 277 [style=dashed label="boolean-literal"]
  901 -> 663 [style=dashed label="braced-init-list"]
  901 -> 278 [style=dashed label="cast-expression"]
  901 -> 279 [style=dashed label="character-literal"]
  901 -> 55 [style=dashed label="class-name"]
  901 -> 280 [style=dashed label="compare-expression"]
  901 -> 281 [style=dashed label="conditional-expression"]
  901 -> 282 [style=dashed label="conversion-function-id"]
  901 -> 63 [style=dashed label="decltype-specifier"]
  901 -> 283 [style=dashed label="delete-expression"]
  901 -> 71 [style=dashed label="enum-name"]
  901 -> 284 [style=dashed label="equality-expression"]
  901 -> 285 [style=dashed label="exclusive-or-expression"]
  901 -> 287 [style=dashed label="floating-point-literal"]
  901 -> 288 [style=dashed label="fold-expression"]
  901 -> 289 [style=dashed label="id-expression"]
  901 -> 290 [style=dashed label="inclusive-or-expression"]
  901 -> 1054 [style=dashed label="initializer-clause"]
  901 -> 291 [style=dashed label="integer-literal"]
  901 -> 292 [style=dashed label="lambda-expression"]
  901 -> 293 [style=dashed label="lambda-introducer"]
  901 -> 294 [style=dashed label="literal"]
  901 -> 295 [style=dashed label="literal-operator-id"]
  901 -> 296 [style=dashed label="logical-and-expression"]
  901 -> 297 [style=dashed label="logical-or-expression"]
  901 -> 298 [style=dashed label="multiplicative-expression"]
  901 -> 85 [style=dashed label="namespace-alias"]
  901 -> 88 [style=dashed label="namespace-name"]
  901 -> 299 [style=dashed label="nested-name-specifier"]
  901 -> 90 [style=dashed label="nested-name-specifier-opt"]
  901 -> 300 [style=dashed label="new-expression"]
  901 -> 301 [style=dashed label="noexcept-expression"]
  901 -> 302 [style=dashed label="operator-function-id"]
  901 -> 94 [style=dashed label="placeholder-type-specifier"]
  901 -> 303 [style=dashed label="pm-expression"]
  901 -> 304 [style=dashed label="pointer-literal"]
  901 -> 305 [style=dashed label="postfix-expression"]
  901 -> 306 [style=dashed label="primary-expression"]
  901 -> 307 [style=dashed label="qualified-id"]
  901 -> 308 [style=dashed label="relational-expression"]
  901 -> 309 [style=dashed label="requires-expression"]
  901 -> 310 [style=dashed label="shift-expression"]
  901 -> 311 [style=dashed label="simple-template-id"]
  901 -> 312 [style=dashed label="simple-type-specifier"]
  901 -> 313 [style=dashed label="string-literal"]
  901 -> 314 [style=dashed label="template-id"]
  901 -> 102 [style=dashed label="template-name"]
  901 -> 315 [style=dashed label="throw-expression"]
  901 -> 104 [style=dashed label="type-constraint"]
  901 -> 105 [style=dashed label="type-constraint-opt"]
  901 -> 106 [style=dashed label="type-name"]
  901 -> 108 [style=dashed label="typedef-name"]
  901 -> 316 [style=dashed label="typename-specifier"]
  901 -> 317 [style=dashed label="unary-expression"]
  901 -> 318 [style=dashed label="unary-operator"]
  901 -> 319 [style=dashed label="unqualified-id"]
  901 -> 320 [style=dashed label="user-defined-character-literal"]
  901 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  901 -> 322 [style=dashed label="user-defined-integer-literal"]
  901 -> 323 [style=dashed label="user-defined-literal"]
  901 -> 324 [style=dashed label="user-defined-string-literal"]
  901 -> 325 [style=dashed label="yield-expression"]
  901 -> "901R19" [style=solid]
 "901R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  901 -> "901R469d" [label="[IDENTIFIER]", style=solid]
 "901R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  901 -> "901R722d" [label="[\"decltype\"]", style=solid]
 "901R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  901 -> "901R722" [label="[\"auto\"]", style=solid]
 "901R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  902 [label="State 902\n\l229 designator: \".\" IDENTIFIER •\l"]
  902 -> "902R229" [style=solid]
 "902R229" [label="R229", fillcolor=3, shape=diamond, style=filled]
  903 [label="State 903\n\l  2 COMMA-opt: \",\" •\l228 designated-initializer-list: designated-initializer-list \",\" • designated-initializer-clause\l"]
  903 -> 669 [style=solid label="\".\""]
  903 -> 1055 [style=dashed label="designated-initializer-clause"]
  903 -> 672 [style=dashed label="designator"]
  903 -> "903R2" [style=solid]
 "903R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  904 [label="State 904\n\l122 braced-init-list: \"{\" designated-initializer-list COMMA-opt • \"}\"\l"]
  904 -> 1056 [style=solid label="\"}\""]
  905 [label="State 905\n\l226 designated-initializer-clause: designator brace-or-equal-initializer •\l"]
  905 -> "905R226" [style=solid]
 "905R226" [label="R226", fillcolor=3, shape=diamond, style=filled]
  906 [label="State 906\n\l  2 COMMA-opt: \",\" •\l367 initializer-list: initializer-list \",\" • initializer-clause ELLIPSIS-opt\l"]
  906 -> 238 [style=solid label="IDENTIFIER"]
  906 -> 239 [style=solid label="\"noexcept\""]
  906 -> 240 [style=solid label="\"!\""]
  906 -> 241 [style=solid label="\"::\""]
  906 -> 242 [style=solid label="\"this\""]
  906 -> 8 [style=solid label="\"typename\""]
  906 -> 243 [style=solid label="\"+\""]
  906 -> 244 [style=solid label="\"-\""]
  906 -> 245 [style=solid label="\"(\""]
  906 -> 246 [style=solid label="\"&\""]
  906 -> 247 [style=solid label="\"[\""]
  906 -> 248 [style=solid label="\"co_await\""]
  906 -> 398 [style=solid label="\"{\""]
  906 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  906 -> 250 [style=solid label="CHARACTER_LITERAL"]
  906 -> 251 [style=solid label="\"operator\""]
  906 -> 21 [style=solid label="\"decltype\""]
  906 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  906 -> 253 [style=solid label="\"*\""]
  906 -> 254 [style=solid label="INTEGER_LITERAL"]
  906 -> 255 [style=solid label="\"requires\""]
  906 -> 256 [style=solid label="\"~\""]
  906 -> 257 [style=solid label="\"++\""]
  906 -> 258 [style=solid label="\"--\""]
  906 -> 259 [style=solid label="POINTER_LITERAL"]
  906 -> 260 [style=solid label="\"dynamic_cast\""]
  906 -> 261 [style=solid label="\"static_cast\""]
  906 -> 262 [style=solid label="\"reinterpret_cast\""]
  906 -> 263 [style=solid label="\"const_cast\""]
  906 -> 264 [style=solid label="\"typeid\""]
  906 -> 27 [style=solid label="\"char\""]
  906 -> 28 [style=solid label="\"char8_t\""]
  906 -> 29 [style=solid label="\"char16_t\""]
  906 -> 30 [style=solid label="\"char32_t\""]
  906 -> 31 [style=solid label="\"wchar_t\""]
  906 -> 32 [style=solid label="\"bool\""]
  906 -> 33 [style=solid label="\"short\""]
  906 -> 34 [style=solid label="\"int\""]
  906 -> 35 [style=solid label="\"long\""]
  906 -> 36 [style=solid label="\"signed\""]
  906 -> 37 [style=solid label="\"unsigned\""]
  906 -> 38 [style=solid label="\"float\""]
  906 -> 39 [style=solid label="\"double\""]
  906 -> 40 [style=solid label="\"void\""]
  906 -> 118 [style=solid label="STRING_LITERAL"]
  906 -> 265 [style=solid label="\"throw\""]
  906 -> 266 [style=solid label="\"sizeof\""]
  906 -> 267 [style=solid label="\"alignof\""]
  906 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  906 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  906 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  906 -> 271 [style=solid label="\"co_yield\""]
  906 -> 272 [style=dashed label="SCOPE-opt"]
  906 -> 273 [style=dashed label="additive-expression"]
  906 -> 274 [style=dashed label="and-expression"]
  906 -> 662 [style=dashed label="assignment-expression"]
  906 -> 276 [style=dashed label="await-expression"]
  906 -> 277 [style=dashed label="boolean-literal"]
  906 -> 663 [style=dashed label="braced-init-list"]
  906 -> 278 [style=dashed label="cast-expression"]
  906 -> 279 [style=dashed label="character-literal"]
  906 -> 55 [style=dashed label="class-name"]
  906 -> 280 [style=dashed label="compare-expression"]
  906 -> 281 [style=dashed label="conditional-expression"]
  906 -> 282 [style=dashed label="conversion-function-id"]
  906 -> 63 [style=dashed label="decltype-specifier"]
  906 -> 283 [style=dashed label="delete-expression"]
  906 -> 71 [style=dashed label="enum-name"]
  906 -> 284 [style=dashed label="equality-expression"]
  906 -> 285 [style=dashed label="exclusive-or-expression"]
  906 -> 287 [style=dashed label="floating-point-literal"]
  906 -> 288 [style=dashed label="fold-expression"]
  906 -> 289 [style=dashed label="id-expression"]
  906 -> 290 [style=dashed label="inclusive-or-expression"]
  906 -> 1054 [style=dashed label="initializer-clause"]
  906 -> 291 [style=dashed label="integer-literal"]
  906 -> 292 [style=dashed label="lambda-expression"]
  906 -> 293 [style=dashed label="lambda-introducer"]
  906 -> 294 [style=dashed label="literal"]
  906 -> 295 [style=dashed label="literal-operator-id"]
  906 -> 296 [style=dashed label="logical-and-expression"]
  906 -> 297 [style=dashed label="logical-or-expression"]
  906 -> 298 [style=dashed label="multiplicative-expression"]
  906 -> 85 [style=dashed label="namespace-alias"]
  906 -> 88 [style=dashed label="namespace-name"]
  906 -> 299 [style=dashed label="nested-name-specifier"]
  906 -> 90 [style=dashed label="nested-name-specifier-opt"]
  906 -> 300 [style=dashed label="new-expression"]
  906 -> 301 [style=dashed label="noexcept-expression"]
  906 -> 302 [style=dashed label="operator-function-id"]
  906 -> 94 [style=dashed label="placeholder-type-specifier"]
  906 -> 303 [style=dashed label="pm-expression"]
  906 -> 304 [style=dashed label="pointer-literal"]
  906 -> 305 [style=dashed label="postfix-expression"]
  906 -> 306 [style=dashed label="primary-expression"]
  906 -> 307 [style=dashed label="qualified-id"]
  906 -> 308 [style=dashed label="relational-expression"]
  906 -> 309 [style=dashed label="requires-expression"]
  906 -> 310 [style=dashed label="shift-expression"]
  906 -> 311 [style=dashed label="simple-template-id"]
  906 -> 312 [style=dashed label="simple-type-specifier"]
  906 -> 313 [style=dashed label="string-literal"]
  906 -> 314 [style=dashed label="template-id"]
  906 -> 102 [style=dashed label="template-name"]
  906 -> 315 [style=dashed label="throw-expression"]
  906 -> 104 [style=dashed label="type-constraint"]
  906 -> 105 [style=dashed label="type-constraint-opt"]
  906 -> 106 [style=dashed label="type-name"]
  906 -> 108 [style=dashed label="typedef-name"]
  906 -> 316 [style=dashed label="typename-specifier"]
  906 -> 317 [style=dashed label="unary-expression"]
  906 -> 318 [style=dashed label="unary-operator"]
  906 -> 319 [style=dashed label="unqualified-id"]
  906 -> 320 [style=dashed label="user-defined-character-literal"]
  906 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  906 -> 322 [style=dashed label="user-defined-integer-literal"]
  906 -> 323 [style=dashed label="user-defined-literal"]
  906 -> 324 [style=dashed label="user-defined-string-literal"]
  906 -> 325 [style=dashed label="yield-expression"]
  906 -> "906R2" [label="[\"}\"]", style=solid]
 "906R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  906 -> "906R19" [style=solid]
 "906R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  906 -> "906R469d" [label="[IDENTIFIER]", style=solid]
 "906R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  906 -> "906R722d" [label="[\"decltype\"]", style=solid]
 "906R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  906 -> "906R722" [label="[\"auto\"]", style=solid]
 "906R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  907 [label="State 907\n\l121 braced-init-list: \"{\" initializer-list COMMA-opt • \"}\"\l"]
  907 -> 1057 [style=solid label="\"}\""]
  908 [label="State 908\n\l165 constraint-logical-and-expression: constraint-logical-and-expression \"&&\" • primary-expression\l"]
  908 -> 238 [style=solid label="IDENTIFIER"]
  908 -> 6 [style=solid label="\"::\""]
  908 -> 242 [style=solid label="\"this\""]
  908 -> 674 [style=solid label="\"(\""]
  908 -> 247 [style=solid label="\"[\""]
  908 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  908 -> 250 [style=solid label="CHARACTER_LITERAL"]
  908 -> 251 [style=solid label="\"operator\""]
  908 -> 21 [style=solid label="\"decltype\""]
  908 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  908 -> 254 [style=solid label="INTEGER_LITERAL"]
  908 -> 255 [style=solid label="\"requires\""]
  908 -> 354 [style=solid label="\"~\""]
  908 -> 259 [style=solid label="POINTER_LITERAL"]
  908 -> 118 [style=solid label="STRING_LITERAL"]
  908 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  908 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  908 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  908 -> 277 [style=dashed label="boolean-literal"]
  908 -> 279 [style=dashed label="character-literal"]
  908 -> 55 [style=dashed label="class-name"]
  908 -> 282 [style=dashed label="conversion-function-id"]
  908 -> 121 [style=dashed label="decltype-specifier"]
  908 -> 71 [style=dashed label="enum-name"]
  908 -> 287 [style=dashed label="floating-point-literal"]
  908 -> 288 [style=dashed label="fold-expression"]
  908 -> 289 [style=dashed label="id-expression"]
  908 -> 291 [style=dashed label="integer-literal"]
  908 -> 292 [style=dashed label="lambda-expression"]
  908 -> 293 [style=dashed label="lambda-introducer"]
  908 -> 294 [style=dashed label="literal"]
  908 -> 295 [style=dashed label="literal-operator-id"]
  908 -> 85 [style=dashed label="namespace-alias"]
  908 -> 88 [style=dashed label="namespace-name"]
  908 -> 356 [style=dashed label="nested-name-specifier"]
  908 -> 302 [style=dashed label="operator-function-id"]
  908 -> 304 [style=dashed label="pointer-literal"]
  908 -> 1058 [style=dashed label="primary-expression"]
  908 -> 307 [style=dashed label="qualified-id"]
  908 -> 309 [style=dashed label="requires-expression"]
  908 -> 311 [style=dashed label="simple-template-id"]
  908 -> 313 [style=dashed label="string-literal"]
  908 -> 314 [style=dashed label="template-id"]
  908 -> 102 [style=dashed label="template-name"]
  908 -> 106 [style=dashed label="type-name"]
  908 -> 108 [style=dashed label="typedef-name"]
  908 -> 319 [style=dashed label="unqualified-id"]
  908 -> 320 [style=dashed label="user-defined-character-literal"]
  908 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  908 -> 322 [style=dashed label="user-defined-integer-literal"]
  908 -> 323 [style=dashed label="user-defined-literal"]
  908 -> 324 [style=dashed label="user-defined-string-literal"]
  909 [label="State 909\n\l167 constraint-logical-or-expression: constraint-logical-or-expression \"||\" • constraint-logical-and-expression\l"]
  909 -> 238 [style=solid label="IDENTIFIER"]
  909 -> 6 [style=solid label="\"::\""]
  909 -> 242 [style=solid label="\"this\""]
  909 -> 674 [style=solid label="\"(\""]
  909 -> 247 [style=solid label="\"[\""]
  909 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  909 -> 250 [style=solid label="CHARACTER_LITERAL"]
  909 -> 251 [style=solid label="\"operator\""]
  909 -> 21 [style=solid label="\"decltype\""]
  909 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  909 -> 254 [style=solid label="INTEGER_LITERAL"]
  909 -> 255 [style=solid label="\"requires\""]
  909 -> 354 [style=solid label="\"~\""]
  909 -> 259 [style=solid label="POINTER_LITERAL"]
  909 -> 118 [style=solid label="STRING_LITERAL"]
  909 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  909 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  909 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  909 -> 277 [style=dashed label="boolean-literal"]
  909 -> 279 [style=dashed label="character-literal"]
  909 -> 55 [style=dashed label="class-name"]
  909 -> 1059 [style=dashed label="constraint-logical-and-expression"]
  909 -> 282 [style=dashed label="conversion-function-id"]
  909 -> 121 [style=dashed label="decltype-specifier"]
  909 -> 71 [style=dashed label="enum-name"]
  909 -> 287 [style=dashed label="floating-point-literal"]
  909 -> 288 [style=dashed label="fold-expression"]
  909 -> 289 [style=dashed label="id-expression"]
  909 -> 291 [style=dashed label="integer-literal"]
  909 -> 292 [style=dashed label="lambda-expression"]
  909 -> 293 [style=dashed label="lambda-introducer"]
  909 -> 294 [style=dashed label="literal"]
  909 -> 295 [style=dashed label="literal-operator-id"]
  909 -> 85 [style=dashed label="namespace-alias"]
  909 -> 88 [style=dashed label="namespace-name"]
  909 -> 356 [style=dashed label="nested-name-specifier"]
  909 -> 302 [style=dashed label="operator-function-id"]
  909 -> 304 [style=dashed label="pointer-literal"]
  909 -> 677 [style=dashed label="primary-expression"]
  909 -> 307 [style=dashed label="qualified-id"]
  909 -> 309 [style=dashed label="requires-expression"]
  909 -> 311 [style=dashed label="simple-template-id"]
  909 -> 313 [style=dashed label="string-literal"]
  909 -> 314 [style=dashed label="template-id"]
  909 -> 102 [style=dashed label="template-name"]
  909 -> 106 [style=dashed label="type-name"]
  909 -> 108 [style=dashed label="typedef-name"]
  909 -> 319 [style=dashed label="unqualified-id"]
  909 -> 320 [style=dashed label="user-defined-character-literal"]
  909 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  909 -> 322 [style=dashed label="user-defined-integer-literal"]
  909 -> 323 [style=dashed label="user-defined-literal"]
  909 -> 324 [style=dashed label="user-defined-string-literal"]
  910 [label="State 910\n\l253 enumerator-definition: enumerator \"=\" constant-expression •\l"]
  910 -> "910R253" [style=solid]
 "910R253" [label="R253", fillcolor=3, shape=diamond, style=filled]
  911 [label="State 911\n\l250 enum-specifier: enum-head \"{\" enumerator-list \",\" \"}\" •\l"]
  911 -> "911R250" [style=solid]
 "911R250" [label="R250", fillcolor=3, shape=diamond, style=filled]
  912 [label="State 912\n\l255 enumerator-list: enumerator-list \",\" enumerator-definition •\l"]
  912 -> "912R255" [style=solid]
 "912R255" [label="R255", fillcolor=3, shape=diamond, style=filled]
  913 [label="State 913\n\l238 enum-base: \":\" type-specifier-seq •\l"]
  913 -> "913R238" [style=solid]
 "913R238" [label="R238", fillcolor=3, shape=diamond, style=filled]
  914 [label="State 914\n\l507 opaque-enum-declaration: enum-key attribute-specifier-seq-opt enum-head-name enum-base-opt \";\" •\l"]
  914 -> "914R507" [style=solid]
 "914R507" [label="R507", fillcolor=3, shape=diamond, style=filled]
  915 [label="State 915\n\l217 deduction-guide: explicit-specifier-opt template-name \"(\" parameter-declaration-clause \")\" • \"->\" simple-template-id \";\"\l"]
  915 -> 1060 [style=solid label="\"->\""]
  916 [label="State 916\n\l449 module-partition-opt: module-partition •\l"]
  916 -> "916R449" [style=solid]
 "916R449" [label="R449", fillcolor=3, shape=diamond, style=filled]
  917 [label="State 917\n\l438 module-declaration: EXPORT-opt \"module\" module-name module-partition-opt • attribute-specifier-seq-opt \";\"\l"]
  917 -> 177 [style=dashed label="attribute-specifier-seq"]
  917 -> 1061 [style=dashed label="attribute-specifier-seq-opt"]
  917 -> "917R83" [style=solid]
 "917R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  918 [label="State 918\n\l596 private-module-fragment: \"module\" \":\" • \"private\" \";\" declaration-seq-opt\l"]
  918 -> 1062 [style=solid label="\"private\""]
  919 [label="State 919\n\l721 type-constraint: nested-name-specifier-opt concept-name \"<\" template-argument-list-opt \">\" •\l"]
  919 -> "919R721" [style=solid]
 "919R721" [label="R721", fillcolor=3, shape=diamond, style=filled]
  920 [label="State 920\n\l152 concept-definition: \"concept\" concept-name \"=\" constraint-expression • \";\"\l"]
  920 -> 1063 [style=solid label="\";\""]
  921 [label="State 921\n\l163 constraint-expression: logical-or-expression •\l408 logical-or-expression: logical-or-expression • \"||\" logical-and-expression\l"]
  921 -> 575 [style=solid label="\"||\""]
  921 -> "921R163" [style=solid]
 "921R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  922 [label="State 922\n\l231 elaborated-type-specifier: class-key attribute-specifier-seq-opt nested-name-specifier-opt • IDENTIFIER\l"]
  922 -> 1064 [style=solid label="IDENTIFIER"]
  923 [label="State 923\n\l699 template-argument-list: template-argument-list \",\" template-argument • ELLIPSIS-opt\l"]
  923 -> 156 [style=solid label="\"...\""]
  923 -> 1065 [style=dashed label="ELLIPSIS-opt"]
  923 -> "923R5" [style=solid]
 "923R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  924 [label="State 924\n\l493 noptr-abstract-declarator: noptr-abstract-declarator-opt • parameters-and-qualifiers\l494                          | noptr-abstract-declarator-opt • \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt\l"]
  924 -> 365 [style=solid label="\"(\""]
  924 -> 927 [style=solid label="\"[\""]
  924 -> 1066 [style=dashed label="parameters-and-qualifiers"]
  925 [label="State 925\n\l495 noptr-abstract-declarator: \"(\" ptr-abstract-declarator • \")\"\l"]
  925 -> 1067 [style=solid label="\")\""]
  926 [label="State 926\n\l600 ptr-abstract-declarator: ptr-operator • ptr-abstract-declarator-opt\l"]
  926 -> 4 [style=solid label="IDENTIFIER"]
  926 -> 6 [style=solid label="\"::\""]
  926 -> 703 [style=solid label="\"(\""]
  926 -> 160 [style=solid label="\"&\""]
  926 -> 163 [style=solid label="\"&&\""]
  926 -> 21 [style=solid label="\"decltype\""]
  926 -> 164 [style=solid label="\"*\""]
  926 -> 55 [style=dashed label="class-name"]
  926 -> 121 [style=dashed label="decltype-specifier"]
  926 -> 71 [style=dashed label="enum-name"]
  926 -> 85 [style=dashed label="namespace-alias"]
  926 -> 88 [style=dashed label="namespace-name"]
  926 -> 187 [style=dashed label="nested-name-specifier"]
  926 -> 707 [style=dashed label="noptr-abstract-declarator"]
  926 -> 924 [style=dashed label="noptr-abstract-declarator-opt"]
  926 -> 932 [style=dashed label="ptr-abstract-declarator"]
  926 -> 933 [style=dashed label="ptr-abstract-declarator-opt"]
  926 -> 926 [style=dashed label="ptr-operator"]
  926 -> 96 [style=dashed label="simple-template-id"]
  926 -> 102 [style=dashed label="template-name"]
  926 -> 106 [style=dashed label="type-name"]
  926 -> 108 [style=dashed label="typedef-name"]
  926 -> "926R496d" [label="[\"(\"]", style=solid]
 "926R496d" [label="R496", fillcolor=5, shape=diamond, style=filled]
  926 -> "926R496" [style=solid]
 "926R496" [label="R496", fillcolor=3, shape=diamond, style=filled]
  926 -> "926R601" [label="[\")\"]", style=solid]
 "926R601" [label="R601", fillcolor=3, shape=diamond, style=filled]
  927 [label="State 927\n\l494 noptr-abstract-declarator: noptr-abstract-declarator-opt \"[\" • constant-expression-opt \"]\" attribute-specifier-seq-opt\l"]
  927 -> 238 [style=solid label="IDENTIFIER"]
  927 -> 239 [style=solid label="\"noexcept\""]
  927 -> 240 [style=solid label="\"!\""]
  927 -> 241 [style=solid label="\"::\""]
  927 -> 242 [style=solid label="\"this\""]
  927 -> 8 [style=solid label="\"typename\""]
  927 -> 243 [style=solid label="\"+\""]
  927 -> 244 [style=solid label="\"-\""]
  927 -> 245 [style=solid label="\"(\""]
  927 -> 246 [style=solid label="\"&\""]
  927 -> 247 [style=solid label="\"[\""]
  927 -> 248 [style=solid label="\"co_await\""]
  927 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  927 -> 250 [style=solid label="CHARACTER_LITERAL"]
  927 -> 251 [style=solid label="\"operator\""]
  927 -> 21 [style=solid label="\"decltype\""]
  927 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  927 -> 253 [style=solid label="\"*\""]
  927 -> 254 [style=solid label="INTEGER_LITERAL"]
  927 -> 255 [style=solid label="\"requires\""]
  927 -> 256 [style=solid label="\"~\""]
  927 -> 257 [style=solid label="\"++\""]
  927 -> 258 [style=solid label="\"--\""]
  927 -> 259 [style=solid label="POINTER_LITERAL"]
  927 -> 260 [style=solid label="\"dynamic_cast\""]
  927 -> 261 [style=solid label="\"static_cast\""]
  927 -> 262 [style=solid label="\"reinterpret_cast\""]
  927 -> 263 [style=solid label="\"const_cast\""]
  927 -> 264 [style=solid label="\"typeid\""]
  927 -> 27 [style=solid label="\"char\""]
  927 -> 28 [style=solid label="\"char8_t\""]
  927 -> 29 [style=solid label="\"char16_t\""]
  927 -> 30 [style=solid label="\"char32_t\""]
  927 -> 31 [style=solid label="\"wchar_t\""]
  927 -> 32 [style=solid label="\"bool\""]
  927 -> 33 [style=solid label="\"short\""]
  927 -> 34 [style=solid label="\"int\""]
  927 -> 35 [style=solid label="\"long\""]
  927 -> 36 [style=solid label="\"signed\""]
  927 -> 37 [style=solid label="\"unsigned\""]
  927 -> 38 [style=solid label="\"float\""]
  927 -> 39 [style=solid label="\"double\""]
  927 -> 40 [style=solid label="\"void\""]
  927 -> 118 [style=solid label="STRING_LITERAL"]
  927 -> 266 [style=solid label="\"sizeof\""]
  927 -> 267 [style=solid label="\"alignof\""]
  927 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  927 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  927 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  927 -> 272 [style=dashed label="SCOPE-opt"]
  927 -> 273 [style=dashed label="additive-expression"]
  927 -> 274 [style=dashed label="and-expression"]
  927 -> 276 [style=dashed label="await-expression"]
  927 -> 277 [style=dashed label="boolean-literal"]
  927 -> 278 [style=dashed label="cast-expression"]
  927 -> 279 [style=dashed label="character-literal"]
  927 -> 55 [style=dashed label="class-name"]
  927 -> 280 [style=dashed label="compare-expression"]
  927 -> 327 [style=dashed label="conditional-expression"]
  927 -> 643 [style=dashed label="constant-expression"]
  927 -> 1068 [style=dashed label="constant-expression-opt"]
  927 -> 282 [style=dashed label="conversion-function-id"]
  927 -> 63 [style=dashed label="decltype-specifier"]
  927 -> 283 [style=dashed label="delete-expression"]
  927 -> 71 [style=dashed label="enum-name"]
  927 -> 284 [style=dashed label="equality-expression"]
  927 -> 285 [style=dashed label="exclusive-or-expression"]
  927 -> 287 [style=dashed label="floating-point-literal"]
  927 -> 288 [style=dashed label="fold-expression"]
  927 -> 289 [style=dashed label="id-expression"]
  927 -> 290 [style=dashed label="inclusive-or-expression"]
  927 -> 291 [style=dashed label="integer-literal"]
  927 -> 292 [style=dashed label="lambda-expression"]
  927 -> 293 [style=dashed label="lambda-introducer"]
  927 -> 294 [style=dashed label="literal"]
  927 -> 295 [style=dashed label="literal-operator-id"]
  927 -> 296 [style=dashed label="logical-and-expression"]
  927 -> 329 [style=dashed label="logical-or-expression"]
  927 -> 298 [style=dashed label="multiplicative-expression"]
  927 -> 85 [style=dashed label="namespace-alias"]
  927 -> 88 [style=dashed label="namespace-name"]
  927 -> 299 [style=dashed label="nested-name-specifier"]
  927 -> 90 [style=dashed label="nested-name-specifier-opt"]
  927 -> 300 [style=dashed label="new-expression"]
  927 -> 301 [style=dashed label="noexcept-expression"]
  927 -> 302 [style=dashed label="operator-function-id"]
  927 -> 94 [style=dashed label="placeholder-type-specifier"]
  927 -> 303 [style=dashed label="pm-expression"]
  927 -> 304 [style=dashed label="pointer-literal"]
  927 -> 305 [style=dashed label="postfix-expression"]
  927 -> 306 [style=dashed label="primary-expression"]
  927 -> 307 [style=dashed label="qualified-id"]
  927 -> 308 [style=dashed label="relational-expression"]
  927 -> 309 [style=dashed label="requires-expression"]
  927 -> 310 [style=dashed label="shift-expression"]
  927 -> 311 [style=dashed label="simple-template-id"]
  927 -> 312 [style=dashed label="simple-type-specifier"]
  927 -> 313 [style=dashed label="string-literal"]
  927 -> 314 [style=dashed label="template-id"]
  927 -> 102 [style=dashed label="template-name"]
  927 -> 104 [style=dashed label="type-constraint"]
  927 -> 105 [style=dashed label="type-constraint-opt"]
  927 -> 106 [style=dashed label="type-name"]
  927 -> 108 [style=dashed label="typedef-name"]
  927 -> 316 [style=dashed label="typename-specifier"]
  927 -> 317 [style=dashed label="unary-expression"]
  927 -> 318 [style=dashed label="unary-operator"]
  927 -> 319 [style=dashed label="unqualified-id"]
  927 -> 320 [style=dashed label="user-defined-character-literal"]
  927 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  927 -> 322 [style=dashed label="user-defined-integer-literal"]
  927 -> 323 [style=dashed label="user-defined-literal"]
  927 -> 324 [style=dashed label="user-defined-string-literal"]
  927 -> "927R19" [style=solid]
 "927R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  927 -> "927R161" [label="[\"]\"]", style=solid]
 "927R161" [label="R161", fillcolor=3, shape=diamond, style=filled]
  927 -> "927R469d" [label="[IDENTIFIER]", style=solid]
 "927R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  927 -> "927R722d" [label="[\"decltype\"]", style=solid]
 "927R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  927 -> "927R722" [label="[\"auto\"]", style=solid]
 "927R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  928 [label="State 928\n\l 30 abstract-declarator: noptr-abstract-declarator-opt parameters-and-qualifiers • trailing-return-type\l493 noptr-abstract-declarator: noptr-abstract-declarator-opt parameters-and-qualifiers •\l"]
  928 -> 645 [style=solid label="\"->\""]
  928 -> 1069 [style=dashed label="trailing-return-type"]
  928 -> "928R493" [style=solid]
 "928R493" [label="R493", fillcolor=3, shape=diamond, style=filled]
  929 [label="State 929\n\l499 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator \"[\" • constant-expression-opt \"]\" attribute-specifier-seq-opt\l"]
  929 -> 238 [style=solid label="IDENTIFIER"]
  929 -> 239 [style=solid label="\"noexcept\""]
  929 -> 240 [style=solid label="\"!\""]
  929 -> 241 [style=solid label="\"::\""]
  929 -> 242 [style=solid label="\"this\""]
  929 -> 8 [style=solid label="\"typename\""]
  929 -> 243 [style=solid label="\"+\""]
  929 -> 244 [style=solid label="\"-\""]
  929 -> 245 [style=solid label="\"(\""]
  929 -> 246 [style=solid label="\"&\""]
  929 -> 247 [style=solid label="\"[\""]
  929 -> 248 [style=solid label="\"co_await\""]
  929 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  929 -> 250 [style=solid label="CHARACTER_LITERAL"]
  929 -> 251 [style=solid label="\"operator\""]
  929 -> 21 [style=solid label="\"decltype\""]
  929 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  929 -> 253 [style=solid label="\"*\""]
  929 -> 254 [style=solid label="INTEGER_LITERAL"]
  929 -> 255 [style=solid label="\"requires\""]
  929 -> 256 [style=solid label="\"~\""]
  929 -> 257 [style=solid label="\"++\""]
  929 -> 258 [style=solid label="\"--\""]
  929 -> 259 [style=solid label="POINTER_LITERAL"]
  929 -> 260 [style=solid label="\"dynamic_cast\""]
  929 -> 261 [style=solid label="\"static_cast\""]
  929 -> 262 [style=solid label="\"reinterpret_cast\""]
  929 -> 263 [style=solid label="\"const_cast\""]
  929 -> 264 [style=solid label="\"typeid\""]
  929 -> 27 [style=solid label="\"char\""]
  929 -> 28 [style=solid label="\"char8_t\""]
  929 -> 29 [style=solid label="\"char16_t\""]
  929 -> 30 [style=solid label="\"char32_t\""]
  929 -> 31 [style=solid label="\"wchar_t\""]
  929 -> 32 [style=solid label="\"bool\""]
  929 -> 33 [style=solid label="\"short\""]
  929 -> 34 [style=solid label="\"int\""]
  929 -> 35 [style=solid label="\"long\""]
  929 -> 36 [style=solid label="\"signed\""]
  929 -> 37 [style=solid label="\"unsigned\""]
  929 -> 38 [style=solid label="\"float\""]
  929 -> 39 [style=solid label="\"double\""]
  929 -> 40 [style=solid label="\"void\""]
  929 -> 118 [style=solid label="STRING_LITERAL"]
  929 -> 266 [style=solid label="\"sizeof\""]
  929 -> 267 [style=solid label="\"alignof\""]
  929 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  929 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  929 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  929 -> 272 [style=dashed label="SCOPE-opt"]
  929 -> 273 [style=dashed label="additive-expression"]
  929 -> 274 [style=dashed label="and-expression"]
  929 -> 276 [style=dashed label="await-expression"]
  929 -> 277 [style=dashed label="boolean-literal"]
  929 -> 278 [style=dashed label="cast-expression"]
  929 -> 279 [style=dashed label="character-literal"]
  929 -> 55 [style=dashed label="class-name"]
  929 -> 280 [style=dashed label="compare-expression"]
  929 -> 327 [style=dashed label="conditional-expression"]
  929 -> 643 [style=dashed label="constant-expression"]
  929 -> 1070 [style=dashed label="constant-expression-opt"]
  929 -> 282 [style=dashed label="conversion-function-id"]
  929 -> 63 [style=dashed label="decltype-specifier"]
  929 -> 283 [style=dashed label="delete-expression"]
  929 -> 71 [style=dashed label="enum-name"]
  929 -> 284 [style=dashed label="equality-expression"]
  929 -> 285 [style=dashed label="exclusive-or-expression"]
  929 -> 287 [style=dashed label="floating-point-literal"]
  929 -> 288 [style=dashed label="fold-expression"]
  929 -> 289 [style=dashed label="id-expression"]
  929 -> 290 [style=dashed label="inclusive-or-expression"]
  929 -> 291 [style=dashed label="integer-literal"]
  929 -> 292 [style=dashed label="lambda-expression"]
  929 -> 293 [style=dashed label="lambda-introducer"]
  929 -> 294 [style=dashed label="literal"]
  929 -> 295 [style=dashed label="literal-operator-id"]
  929 -> 296 [style=dashed label="logical-and-expression"]
  929 -> 329 [style=dashed label="logical-or-expression"]
  929 -> 298 [style=dashed label="multiplicative-expression"]
  929 -> 85 [style=dashed label="namespace-alias"]
  929 -> 88 [style=dashed label="namespace-name"]
  929 -> 299 [style=dashed label="nested-name-specifier"]
  929 -> 90 [style=dashed label="nested-name-specifier-opt"]
  929 -> 300 [style=dashed label="new-expression"]
  929 -> 301 [style=dashed label="noexcept-expression"]
  929 -> 302 [style=dashed label="operator-function-id"]
  929 -> 94 [style=dashed label="placeholder-type-specifier"]
  929 -> 303 [style=dashed label="pm-expression"]
  929 -> 304 [style=dashed label="pointer-literal"]
  929 -> 305 [style=dashed label="postfix-expression"]
  929 -> 306 [style=dashed label="primary-expression"]
  929 -> 307 [style=dashed label="qualified-id"]
  929 -> 308 [style=dashed label="relational-expression"]
  929 -> 309 [style=dashed label="requires-expression"]
  929 -> 310 [style=dashed label="shift-expression"]
  929 -> 311 [style=dashed label="simple-template-id"]
  929 -> 312 [style=dashed label="simple-type-specifier"]
  929 -> 313 [style=dashed label="string-literal"]
  929 -> 314 [style=dashed label="template-id"]
  929 -> 102 [style=dashed label="template-name"]
  929 -> 104 [style=dashed label="type-constraint"]
  929 -> 105 [style=dashed label="type-constraint-opt"]
  929 -> 106 [style=dashed label="type-name"]
  929 -> 108 [style=dashed label="typedef-name"]
  929 -> 316 [style=dashed label="typename-specifier"]
  929 -> 317 [style=dashed label="unary-expression"]
  929 -> 318 [style=dashed label="unary-operator"]
  929 -> 319 [style=dashed label="unqualified-id"]
  929 -> 320 [style=dashed label="user-defined-character-literal"]
  929 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  929 -> 322 [style=dashed label="user-defined-integer-literal"]
  929 -> 323 [style=dashed label="user-defined-literal"]
  929 -> 324 [style=dashed label="user-defined-string-literal"]
  929 -> "929R19" [style=solid]
 "929R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  929 -> "929R161" [label="[\"]\"]", style=solid]
 "929R161" [label="R161", fillcolor=3, shape=diamond, style=filled]
  929 -> "929R469d" [label="[IDENTIFIER]", style=solid]
 "929R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  929 -> "929R722d" [label="[\"decltype\"]", style=solid]
 "929R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  929 -> "929R722" [label="[\"auto\"]", style=solid]
 "929R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  930 [label="State 930\n\l498 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator parameters-and-qualifiers •\l"]
  930 -> "930R498" [style=solid]
 "930R498" [label="R498", fillcolor=3, shape=diamond, style=filled]
  931 [label="State 931\n\l 35 abstract-pack-declarator: ptr-operator abstract-pack-declarator •\l"]
  931 -> "931R35" [style=solid]
 "931R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  932 [label="State 932\n\l602 ptr-abstract-declarator-opt: ptr-abstract-declarator •\l"]
  932 -> "932R602" [style=solid]
 "932R602" [label="R602", fillcolor=3, shape=diamond, style=filled]
  933 [label="State 933\n\l600 ptr-abstract-declarator: ptr-operator ptr-abstract-declarator-opt •\l"]
  933 -> "933R600" [style=solid]
 "933R600" [label="R600", fillcolor=3, shape=diamond, style=filled]
  934 [label="State 934\n\l566 placeholder-type-specifier: type-constraint-opt \"decltype\" \"(\" \"auto\" \")\" •\l"]
  934 -> "934R566" [style=solid]
 "934R566" [label="R566", fillcolor=3, shape=diamond, style=filled]
  935 [label="State 935\n\l  6 ELLIPSIS-opt: \"...\" •\l500 noptr-abstract-pack-declarator: \"...\" •\l"]
  935 -> "935R6" [label="[IDENTIFIER, \"::\", \"operator\", \"decltype\", \"~\"]", style=solid]
 "935R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  935 -> "935R500" [style=solid]
 "935R500" [label="R500", fillcolor=3, shape=diamond, style=filled]
  936 [label="State 936\n\l495 noptr-abstract-declarator: \"(\" • ptr-abstract-declarator \")\"\l504 noptr-declarator: \"(\" • ptr-declarator \")\"\l"]
  936 -> 156 [style=solid label="\"...\""]
  936 -> 4 [style=solid label="IDENTIFIER"]
  936 -> 6 [style=solid label="\"::\""]
  936 -> 936 [style=solid label="\"(\""]
  936 -> 160 [style=solid label="\"&\""]
  936 -> 163 [style=solid label="\"&&\""]
  936 -> 21 [style=solid label="\"decltype\""]
  936 -> 164 [style=solid label="\"*\""]
  936 -> 165 [style=dashed label="ELLIPSIS-opt"]
  936 -> 55 [style=dashed label="class-name"]
  936 -> 171 [style=dashed label="declarator-id"]
  936 -> 121 [style=dashed label="decltype-specifier"]
  936 -> 71 [style=dashed label="enum-name"]
  936 -> 85 [style=dashed label="namespace-alias"]
  936 -> 88 [style=dashed label="namespace-name"]
  936 -> 187 [style=dashed label="nested-name-specifier"]
  936 -> 707 [style=dashed label="noptr-abstract-declarator"]
  936 -> 924 [style=dashed label="noptr-abstract-declarator-opt"]
  936 -> 347 [style=dashed label="noptr-declarator"]
  936 -> 925 [style=dashed label="ptr-abstract-declarator"]
  936 -> 348 [style=dashed label="ptr-declarator"]
  936 -> 1071 [style=dashed label="ptr-operator"]
  936 -> 96 [style=dashed label="simple-template-id"]
  936 -> 102 [style=dashed label="template-name"]
  936 -> 106 [style=dashed label="type-name"]
  936 -> 108 [style=dashed label="typedef-name"]
  936 -> "936R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "936R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  936 -> "936R5" [style=solid]
 "936R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  936 -> "936R496d" [label="[\"(\"]", style=solid]
 "936R496d" [label="R496", fillcolor=5, shape=diamond, style=filled]
  936 -> "936R496" [label="[\"[\"]", style=solid]
 "936R496" [label="R496", fillcolor=3, shape=diamond, style=filled]
  937 [label="State 937\n\l556 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq abstract-declarator-opt •\l557                      | attribute-specifier-seq-opt THIS-opt decl-specifier-seq abstract-declarator-opt • \"=\" initializer-clause\l"]
  937 -> 1072 [style=solid label="\"=\""]
  937 -> "937R556" [style=solid]
 "937R556" [label="R556", fillcolor=3, shape=diamond, style=filled]
  938 [label="State 938\n\l554 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq declarator •\l555                      | attribute-specifier-seq-opt THIS-opt decl-specifier-seq declarator • \"=\" initializer-clause\l"]
  938 -> 1073 [style=solid label="\"=\""]
  938 -> "938R554" [style=solid]
 "938R554" [label="R554", fillcolor=3, shape=diamond, style=filled]
  939 [label="State 939\n\l 35 abstract-pack-declarator: ptr-operator • abstract-pack-declarator\l600 ptr-abstract-declarator: ptr-operator • ptr-abstract-declarator-opt\l604 ptr-declarator: ptr-operator • ptr-declarator\l"]
  939 -> 935 [style=solid label="\"...\""]
  939 -> 4 [style=solid label="IDENTIFIER"]
  939 -> 6 [style=solid label="\"::\""]
  939 -> 936 [style=solid label="\"(\""]
  939 -> 160 [style=solid label="\"&\""]
  939 -> 163 [style=solid label="\"&&\""]
  939 -> 21 [style=solid label="\"decltype\""]
  939 -> 164 [style=solid label="\"*\""]
  939 -> 165 [style=dashed label="ELLIPSIS-opt"]
  939 -> 931 [style=dashed label="abstract-pack-declarator"]
  939 -> 55 [style=dashed label="class-name"]
  939 -> 171 [style=dashed label="declarator-id"]
  939 -> 121 [style=dashed label="decltype-specifier"]
  939 -> 71 [style=dashed label="enum-name"]
  939 -> 85 [style=dashed label="namespace-alias"]
  939 -> 88 [style=dashed label="namespace-name"]
  939 -> 187 [style=dashed label="nested-name-specifier"]
  939 -> 707 [style=dashed label="noptr-abstract-declarator"]
  939 -> 924 [style=dashed label="noptr-abstract-declarator-opt"]
  939 -> 709 [style=dashed label="noptr-abstract-pack-declarator"]
  939 -> 347 [style=dashed label="noptr-declarator"]
  939 -> 932 [style=dashed label="ptr-abstract-declarator"]
  939 -> 933 [style=dashed label="ptr-abstract-declarator-opt"]
  939 -> 368 [style=dashed label="ptr-declarator"]
  939 -> 939 [style=dashed label="ptr-operator"]
  939 -> 96 [style=dashed label="simple-template-id"]
  939 -> 102 [style=dashed label="template-name"]
  939 -> 106 [style=dashed label="type-name"]
  939 -> 108 [style=dashed label="typedef-name"]
  939 -> "939R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "939R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  939 -> "939R5" [label="[\"operator\", \"~\"]", style=solid]
 "939R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  939 -> "939R496d" [label="[\"(\"]", style=solid]
 "939R496d" [label="R496", fillcolor=5, shape=diamond, style=filled]
  939 -> "939R496" [label="[\"[\"]", style=solid]
 "939R496" [label="R496", fillcolor=3, shape=diamond, style=filled]
  939 -> "939R601d" [label="[\"...\"]", style=solid]
 "939R601d" [label="R601", fillcolor=5, shape=diamond, style=filled]
  939 -> "939R601" [style=solid]
 "939R601" [label="R601", fillcolor=3, shape=diamond, style=filled]
  940 [label="State 940\n\l732 type-parameter: template-head type-parameter-key ELLIPSIS-opt IDENTIFIER-opt •\l"]
  940 -> "940R732" [style=solid]
 "940R732" [label="R732", fillcolor=3, shape=diamond, style=filled]
  941 [label="State 941\n\l733 type-parameter: template-head type-parameter-key IDENTIFIER-opt \"=\" • id-expression\l"]
  941 -> 238 [style=solid label="IDENTIFIER"]
  941 -> 6 [style=solid label="\"::\""]
  941 -> 251 [style=solid label="\"operator\""]
  941 -> 21 [style=solid label="\"decltype\""]
  941 -> 354 [style=solid label="\"~\""]
  941 -> 55 [style=dashed label="class-name"]
  941 -> 282 [style=dashed label="conversion-function-id"]
  941 -> 121 [style=dashed label="decltype-specifier"]
  941 -> 71 [style=dashed label="enum-name"]
  941 -> 1074 [style=dashed label="id-expression"]
  941 -> 295 [style=dashed label="literal-operator-id"]
  941 -> 85 [style=dashed label="namespace-alias"]
  941 -> 88 [style=dashed label="namespace-name"]
  941 -> 356 [style=dashed label="nested-name-specifier"]
  941 -> 302 [style=dashed label="operator-function-id"]
  941 -> 307 [style=dashed label="qualified-id"]
  941 -> 311 [style=dashed label="simple-template-id"]
  941 -> 314 [style=dashed label="template-id"]
  941 -> 102 [style=dashed label="template-name"]
  941 -> 106 [style=dashed label="type-name"]
  941 -> 108 [style=dashed label="typedef-name"]
  941 -> 319 [style=dashed label="unqualified-id"]
  942 [label="State 942\n\l731 type-parameter: type-constraint IDENTIFIER-opt \"=\" type-id •\l"]
  942 -> "942R731" [style=solid]
 "942R731" [label="R731", fillcolor=3, shape=diamond, style=filled]
  943 [label="State 943\n\l729 type-parameter: type-parameter-key IDENTIFIER-opt \"=\" type-id •\l"]
  943 -> "943R729" [style=solid]
 "943R729" [label="R729", fillcolor=3, shape=diamond, style=filled]
  944 [label="State 944\n\l 44 alias-declaration: \"using\" IDENTIFIER attribute-specifier-seq-opt \"=\" defining-type-id \";\" •\l"]
  944 -> "944R44" [style=solid]
 "944R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  945 [label="State 945\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l222 defining-type-specifier-seq: defining-type-specifier attribute-specifier-seq-opt •\l"]
  945 -> 158 [style=solid label="\"alignas\""]
  945 -> 162 [style=solid label="\"[\""]
  945 -> 166 [style=dashed label="alignment-specifier"]
  945 -> 167 [style=dashed label="attribute-specifier"]
  945 -> "945R222d" [label="[\"[\"]", style=solid]
 "945R222d" [label="R222", fillcolor=5, shape=diamond, style=filled]
  945 -> "945R222" [style=solid]
 "945R222" [label="R222", fillcolor=3, shape=diamond, style=filled]
  946 [label="State 946\n\l223 defining-type-specifier-seq: defining-type-specifier defining-type-specifier-seq •\l"]
  946 -> "946R223" [style=solid]
 "946R223" [label="R223", fillcolor=3, shape=diamond, style=filled]
  947 [label="State 947\n\l218 defining-type-id: defining-type-specifier-seq abstract-declarator-opt •\l"]
  947 -> "947R218" [style=solid]
 "947R218" [label="R218", fillcolor=3, shape=diamond, style=filled]
  948 [label="State 948\n\l488 noexcept-expression: \"noexcept\" \"(\" expression \")\" •\l"]
  948 -> "948R488" [style=solid]
 "948R488" [label="R488", fillcolor=3, shape=diamond, style=filled]
  949 [label="State 949\n\l289 fold-expression: \"(\" \"...\" fold-operator cast-expression • \")\"\l"]
  949 -> 1075 [style=solid label="\")\""]
  950 [label="State 950\n\l288 fold-expression: \"(\" cast-expression fold-operator \"...\" • \")\"\l290                | \"(\" cast-expression fold-operator \"...\" • fold-operator cast-expression \")\"\l"]
  950 -> 729 [style=solid label="\",\""]
  950 -> 730 [style=solid label="\"+\""]
  950 -> 731 [style=solid label="\"-\""]
  950 -> 732 [style=solid label="\"=\""]
  950 -> 1076 [style=solid label="\")\""]
  950 -> 733 [style=solid label="\"&\""]
  950 -> 734 [style=solid label="\"*=\""]
  950 -> 735 [style=solid label="\"/=\""]
  950 -> 736 [style=solid label="\"%=\""]
  950 -> 737 [style=solid label="\"+=\""]
  950 -> 738 [style=solid label="\"-=\""]
  950 -> 739 [style=solid label="\">>=\""]
  950 -> 740 [style=solid label="\"<<=\""]
  950 -> 741 [style=solid label="\"&=\""]
  950 -> 742 [style=solid label="\"^=\""]
  950 -> 743 [style=solid label="\"|=\""]
  950 -> 744 [style=solid label="\"&&\""]
  950 -> 745 [style=solid label="\"||\""]
  950 -> 746 [style=solid label="\"==\""]
  950 -> 747 [style=solid label="\"!=\""]
  950 -> 748 [style=solid label="\"^\""]
  950 -> 749 [style=solid label="\"<\""]
  950 -> 750 [style=solid label="\">\""]
  950 -> 751 [style=solid label="\"*\""]
  950 -> 752 [style=solid label="\"/\""]
  950 -> 753 [style=solid label="\"%\""]
  950 -> 754 [style=solid label="\"|\""]
  950 -> 755 [style=solid label="\"<<\""]
  950 -> 756 [style=solid label="\">>\""]
  950 -> 757 [style=solid label="\"<=\""]
  950 -> 758 [style=solid label="\">=\""]
  950 -> 759 [style=solid label="\".*\""]
  950 -> 760 [style=solid label="\"->*\""]
  950 -> 1077 [style=dashed label="fold-operator"]
  951 [label="State 951\n\l131 cast-expression: \"(\" type-id \")\" cast-expression •\l"]
  951 -> "951R131" [style=solid]
 "951R131" [label="R131", fillcolor=3, shape=diamond, style=filled]
  952 [label="State 952\n\l649 simple-capture: \"&\" IDENTIFIER ELLIPSIS-opt •\l"]
  952 -> "952R649" [style=solid]
 "952R649" [label="R649", fillcolor=3, shape=diamond, style=filled]
  953 [label="State 953\n\l350 init-capture: \"&\" ELLIPSIS-opt IDENTIFIER • initializer\l"]
  953 -> 396 [style=solid label="\"=\""]
  953 -> 397 [style=solid label="\"(\""]
  953 -> 398 [style=solid label="\"{\""]
  953 -> 400 [style=dashed label="brace-or-equal-initializer"]
  953 -> 401 [style=dashed label="braced-init-list"]
  953 -> 1078 [style=dashed label="initializer"]
  954 [label="State 954\n\l349 init-capture: ELLIPSIS-opt IDENTIFIER initializer •\l"]
  954 -> "954R349" [style=solid]
 "954R349" [label="R349", fillcolor=3, shape=diamond, style=filled]
  955 [label="State 955\n\l350 init-capture: \"&\" • ELLIPSIS-opt IDENTIFIER initializer\l649 simple-capture: \"&\" • IDENTIFIER ELLIPSIS-opt\l"]
  955 -> 156 [style=solid label="\"...\""]
  955 -> 766 [style=solid label="IDENTIFIER"]
  955 -> 767 [style=dashed label="ELLIPSIS-opt"]
  955 -> "955R5d" [label="[IDENTIFIER]", style=solid]
 "955R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  956 [label="State 956\n\l129 capture-list: capture-list • \",\" capture\l385 lambda-capture: capture-default \",\" capture-list •\l"]
  956 -> 771 [style=solid label="\",\""]
  956 -> "956R385" [style=solid]
 "956R385" [label="R385", fillcolor=3, shape=diamond, style=filled]
  957 [label="State 957\n\l129 capture-list: capture-list \",\" capture •\l"]
  957 -> "957R129" [style=solid]
 "957R129" [label="R129", fillcolor=3, shape=diamond, style=filled]
  958 [label="State 958\n\l513 overloadable-operator: \"delete\" \"[\" \"]\" •\l"]
  958 -> "958R513" [style=solid]
 "958R513" [label="R513", fillcolor=3, shape=diamond, style=filled]
  959 [label="State 959\n\l512 overloadable-operator: \"new\" \"[\" \"]\" •\l"]
  959 -> "959R512" [style=solid]
 "959R512" [label="R512", fillcolor=3, shape=diamond, style=filled]
  960 [label="State 960\n\l509 operator-function-id: \"operator\" overloadable-operator \"<\" template-argument-list-opt • \">\"\l"]
  960 -> 1079 [style=solid label="\">\""]
  961 [label="State 961\n\l168 conversion-declarator: ptr-operator conversion-declarator-opt •\l"]
  961 -> "961R168" [style=solid]
 "961R168" [label="R168", fillcolor=3, shape=diamond, style=filled]
  962 [label="State 962\n\l628 requirement-parameter-list: \"(\" parameter-declaration-clause \")\" •\l"]
  962 -> "962R628" [style=solid]
 "962R628" [label="R628", fillcolor=3, shape=diamond, style=filled]
  963 [label="State 963\n\l736 type-requirement: \"typename\" • nested-name-specifier-opt type-name \";\"\l745 typename-specifier: \"typename\" • nested-name-specifier IDENTIFIER\l746                   | \"typename\" • nested-name-specifier TEMPLATE-opt simple-template-id\l"]
  963 -> 4 [style=solid label="IDENTIFIER"]
  963 -> 6 [style=solid label="\"::\""]
  963 -> 21 [style=solid label="\"decltype\""]
  963 -> 55 [style=dashed label="class-name"]
  963 -> 121 [style=dashed label="decltype-specifier"]
  963 -> 71 [style=dashed label="enum-name"]
  963 -> 85 [style=dashed label="namespace-alias"]
  963 -> 88 [style=dashed label="namespace-name"]
  963 -> 1080 [style=dashed label="nested-name-specifier"]
  963 -> 1081 [style=dashed label="nested-name-specifier-opt"]
  963 -> 96 [style=dashed label="simple-template-id"]
  963 -> 102 [style=dashed label="template-name"]
  963 -> 106 [style=dashed label="type-name"]
  963 -> 108 [style=dashed label="typedef-name"]
  963 -> "963R469d" [label="[IDENTIFIER]", style=solid]
 "963R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  964 [label="State 964\n\l150 compound-requirement: \"{\" • expression \"}\" NOEXCEPT-opt return-type-requirement-opt \";\"\l"]
  964 -> 238 [style=solid label="IDENTIFIER"]
  964 -> 239 [style=solid label="\"noexcept\""]
  964 -> 240 [style=solid label="\"!\""]
  964 -> 241 [style=solid label="\"::\""]
  964 -> 242 [style=solid label="\"this\""]
  964 -> 8 [style=solid label="\"typename\""]
  964 -> 243 [style=solid label="\"+\""]
  964 -> 244 [style=solid label="\"-\""]
  964 -> 245 [style=solid label="\"(\""]
  964 -> 246 [style=solid label="\"&\""]
  964 -> 247 [style=solid label="\"[\""]
  964 -> 248 [style=solid label="\"co_await\""]
  964 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  964 -> 250 [style=solid label="CHARACTER_LITERAL"]
  964 -> 251 [style=solid label="\"operator\""]
  964 -> 21 [style=solid label="\"decltype\""]
  964 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  964 -> 253 [style=solid label="\"*\""]
  964 -> 254 [style=solid label="INTEGER_LITERAL"]
  964 -> 255 [style=solid label="\"requires\""]
  964 -> 256 [style=solid label="\"~\""]
  964 -> 257 [style=solid label="\"++\""]
  964 -> 258 [style=solid label="\"--\""]
  964 -> 259 [style=solid label="POINTER_LITERAL"]
  964 -> 260 [style=solid label="\"dynamic_cast\""]
  964 -> 261 [style=solid label="\"static_cast\""]
  964 -> 262 [style=solid label="\"reinterpret_cast\""]
  964 -> 263 [style=solid label="\"const_cast\""]
  964 -> 264 [style=solid label="\"typeid\""]
  964 -> 27 [style=solid label="\"char\""]
  964 -> 28 [style=solid label="\"char8_t\""]
  964 -> 29 [style=solid label="\"char16_t\""]
  964 -> 30 [style=solid label="\"char32_t\""]
  964 -> 31 [style=solid label="\"wchar_t\""]
  964 -> 32 [style=solid label="\"bool\""]
  964 -> 33 [style=solid label="\"short\""]
  964 -> 34 [style=solid label="\"int\""]
  964 -> 35 [style=solid label="\"long\""]
  964 -> 36 [style=solid label="\"signed\""]
  964 -> 37 [style=solid label="\"unsigned\""]
  964 -> 38 [style=solid label="\"float\""]
  964 -> 39 [style=solid label="\"double\""]
  964 -> 40 [style=solid label="\"void\""]
  964 -> 118 [style=solid label="STRING_LITERAL"]
  964 -> 265 [style=solid label="\"throw\""]
  964 -> 266 [style=solid label="\"sizeof\""]
  964 -> 267 [style=solid label="\"alignof\""]
  964 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  964 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  964 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  964 -> 271 [style=solid label="\"co_yield\""]
  964 -> 272 [style=dashed label="SCOPE-opt"]
  964 -> 273 [style=dashed label="additive-expression"]
  964 -> 274 [style=dashed label="and-expression"]
  964 -> 275 [style=dashed label="assignment-expression"]
  964 -> 276 [style=dashed label="await-expression"]
  964 -> 277 [style=dashed label="boolean-literal"]
  964 -> 278 [style=dashed label="cast-expression"]
  964 -> 279 [style=dashed label="character-literal"]
  964 -> 55 [style=dashed label="class-name"]
  964 -> 280 [style=dashed label="compare-expression"]
  964 -> 281 [style=dashed label="conditional-expression"]
  964 -> 282 [style=dashed label="conversion-function-id"]
  964 -> 63 [style=dashed label="decltype-specifier"]
  964 -> 283 [style=dashed label="delete-expression"]
  964 -> 71 [style=dashed label="enum-name"]
  964 -> 284 [style=dashed label="equality-expression"]
  964 -> 285 [style=dashed label="exclusive-or-expression"]
  964 -> 1082 [style=dashed label="expression"]
  964 -> 287 [style=dashed label="floating-point-literal"]
  964 -> 288 [style=dashed label="fold-expression"]
  964 -> 289 [style=dashed label="id-expression"]
  964 -> 290 [style=dashed label="inclusive-or-expression"]
  964 -> 291 [style=dashed label="integer-literal"]
  964 -> 292 [style=dashed label="lambda-expression"]
  964 -> 293 [style=dashed label="lambda-introducer"]
  964 -> 294 [style=dashed label="literal"]
  964 -> 295 [style=dashed label="literal-operator-id"]
  964 -> 296 [style=dashed label="logical-and-expression"]
  964 -> 297 [style=dashed label="logical-or-expression"]
  964 -> 298 [style=dashed label="multiplicative-expression"]
  964 -> 85 [style=dashed label="namespace-alias"]
  964 -> 88 [style=dashed label="namespace-name"]
  964 -> 299 [style=dashed label="nested-name-specifier"]
  964 -> 90 [style=dashed label="nested-name-specifier-opt"]
  964 -> 300 [style=dashed label="new-expression"]
  964 -> 301 [style=dashed label="noexcept-expression"]
  964 -> 302 [style=dashed label="operator-function-id"]
  964 -> 94 [style=dashed label="placeholder-type-specifier"]
  964 -> 303 [style=dashed label="pm-expression"]
  964 -> 304 [style=dashed label="pointer-literal"]
  964 -> 305 [style=dashed label="postfix-expression"]
  964 -> 306 [style=dashed label="primary-expression"]
  964 -> 307 [style=dashed label="qualified-id"]
  964 -> 308 [style=dashed label="relational-expression"]
  964 -> 309 [style=dashed label="requires-expression"]
  964 -> 310 [style=dashed label="shift-expression"]
  964 -> 311 [style=dashed label="simple-template-id"]
  964 -> 312 [style=dashed label="simple-type-specifier"]
  964 -> 313 [style=dashed label="string-literal"]
  964 -> 314 [style=dashed label="template-id"]
  964 -> 102 [style=dashed label="template-name"]
  964 -> 315 [style=dashed label="throw-expression"]
  964 -> 104 [style=dashed label="type-constraint"]
  964 -> 105 [style=dashed label="type-constraint-opt"]
  964 -> 106 [style=dashed label="type-name"]
  964 -> 108 [style=dashed label="typedef-name"]
  964 -> 316 [style=dashed label="typename-specifier"]
  964 -> 317 [style=dashed label="unary-expression"]
  964 -> 318 [style=dashed label="unary-operator"]
  964 -> 319 [style=dashed label="unqualified-id"]
  964 -> 320 [style=dashed label="user-defined-character-literal"]
  964 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  964 -> 322 [style=dashed label="user-defined-integer-literal"]
  964 -> 323 [style=dashed label="user-defined-literal"]
  964 -> 324 [style=dashed label="user-defined-string-literal"]
  964 -> 325 [style=dashed label="yield-expression"]
  964 -> "964R19" [style=solid]
 "964R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  964 -> "964R469d" [label="[IDENTIFIER]", style=solid]
 "964R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  964 -> "964R722d" [label="[\"decltype\"]", style=solid]
 "964R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  964 -> "964R722" [label="[\"auto\"]", style=solid]
 "964R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  965 [label="State 965\n\l472 nested-requirement: \"requires\" • constraint-expression \";\"\l636 requires-expression: \"requires\" • requirement-parameter-list-opt requirement-body\l"]
  965 -> 238 [style=solid label="IDENTIFIER"]
  965 -> 239 [style=solid label="\"noexcept\""]
  965 -> 240 [style=solid label="\"!\""]
  965 -> 241 [style=solid label="\"::\""]
  965 -> 242 [style=solid label="\"this\""]
  965 -> 8 [style=solid label="\"typename\""]
  965 -> 243 [style=solid label="\"+\""]
  965 -> 244 [style=solid label="\"-\""]
  965 -> 1083 [style=solid label="\"(\""]
  965 -> 246 [style=solid label="\"&\""]
  965 -> 247 [style=solid label="\"[\""]
  965 -> 248 [style=solid label="\"co_await\""]
  965 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  965 -> 250 [style=solid label="CHARACTER_LITERAL"]
  965 -> 251 [style=solid label="\"operator\""]
  965 -> 21 [style=solid label="\"decltype\""]
  965 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  965 -> 253 [style=solid label="\"*\""]
  965 -> 254 [style=solid label="INTEGER_LITERAL"]
  965 -> 255 [style=solid label="\"requires\""]
  965 -> 256 [style=solid label="\"~\""]
  965 -> 257 [style=solid label="\"++\""]
  965 -> 258 [style=solid label="\"--\""]
  965 -> 259 [style=solid label="POINTER_LITERAL"]
  965 -> 260 [style=solid label="\"dynamic_cast\""]
  965 -> 261 [style=solid label="\"static_cast\""]
  965 -> 262 [style=solid label="\"reinterpret_cast\""]
  965 -> 263 [style=solid label="\"const_cast\""]
  965 -> 264 [style=solid label="\"typeid\""]
  965 -> 27 [style=solid label="\"char\""]
  965 -> 28 [style=solid label="\"char8_t\""]
  965 -> 29 [style=solid label="\"char16_t\""]
  965 -> 30 [style=solid label="\"char32_t\""]
  965 -> 31 [style=solid label="\"wchar_t\""]
  965 -> 32 [style=solid label="\"bool\""]
  965 -> 33 [style=solid label="\"short\""]
  965 -> 34 [style=solid label="\"int\""]
  965 -> 35 [style=solid label="\"long\""]
  965 -> 36 [style=solid label="\"signed\""]
  965 -> 37 [style=solid label="\"unsigned\""]
  965 -> 38 [style=solid label="\"float\""]
  965 -> 39 [style=solid label="\"double\""]
  965 -> 40 [style=solid label="\"void\""]
  965 -> 118 [style=solid label="STRING_LITERAL"]
  965 -> 266 [style=solid label="\"sizeof\""]
  965 -> 267 [style=solid label="\"alignof\""]
  965 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  965 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  965 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  965 -> 272 [style=dashed label="SCOPE-opt"]
  965 -> 273 [style=dashed label="additive-expression"]
  965 -> 274 [style=dashed label="and-expression"]
  965 -> 276 [style=dashed label="await-expression"]
  965 -> 277 [style=dashed label="boolean-literal"]
  965 -> 278 [style=dashed label="cast-expression"]
  965 -> 279 [style=dashed label="character-literal"]
  965 -> 55 [style=dashed label="class-name"]
  965 -> 280 [style=dashed label="compare-expression"]
  965 -> 1084 [style=dashed label="constraint-expression"]
  965 -> 282 [style=dashed label="conversion-function-id"]
  965 -> 63 [style=dashed label="decltype-specifier"]
  965 -> 283 [style=dashed label="delete-expression"]
  965 -> 71 [style=dashed label="enum-name"]
  965 -> 284 [style=dashed label="equality-expression"]
  965 -> 285 [style=dashed label="exclusive-or-expression"]
  965 -> 287 [style=dashed label="floating-point-literal"]
  965 -> 288 [style=dashed label="fold-expression"]
  965 -> 289 [style=dashed label="id-expression"]
  965 -> 290 [style=dashed label="inclusive-or-expression"]
  965 -> 291 [style=dashed label="integer-literal"]
  965 -> 292 [style=dashed label="lambda-expression"]
  965 -> 293 [style=dashed label="lambda-introducer"]
  965 -> 294 [style=dashed label="literal"]
  965 -> 295 [style=dashed label="literal-operator-id"]
  965 -> 296 [style=dashed label="logical-and-expression"]
  965 -> 921 [style=dashed label="logical-or-expression"]
  965 -> 298 [style=dashed label="multiplicative-expression"]
  965 -> 85 [style=dashed label="namespace-alias"]
  965 -> 88 [style=dashed label="namespace-name"]
  965 -> 299 [style=dashed label="nested-name-specifier"]
  965 -> 90 [style=dashed label="nested-name-specifier-opt"]
  965 -> 300 [style=dashed label="new-expression"]
  965 -> 301 [style=dashed label="noexcept-expression"]
  965 -> 302 [style=dashed label="operator-function-id"]
  965 -> 94 [style=dashed label="placeholder-type-specifier"]
  965 -> 303 [style=dashed label="pm-expression"]
  965 -> 304 [style=dashed label="pointer-literal"]
  965 -> 305 [style=dashed label="postfix-expression"]
  965 -> 306 [style=dashed label="primary-expression"]
  965 -> 307 [style=dashed label="qualified-id"]
  965 -> 308 [style=dashed label="relational-expression"]
  965 -> 523 [style=dashed label="requirement-parameter-list"]
  965 -> 524 [style=dashed label="requirement-parameter-list-opt"]
  965 -> 309 [style=dashed label="requires-expression"]
  965 -> 310 [style=dashed label="shift-expression"]
  965 -> 311 [style=dashed label="simple-template-id"]
  965 -> 312 [style=dashed label="simple-type-specifier"]
  965 -> 313 [style=dashed label="string-literal"]
  965 -> 314 [style=dashed label="template-id"]
  965 -> 102 [style=dashed label="template-name"]
  965 -> 104 [style=dashed label="type-constraint"]
  965 -> 105 [style=dashed label="type-constraint-opt"]
  965 -> 106 [style=dashed label="type-name"]
  965 -> 108 [style=dashed label="typedef-name"]
  965 -> 316 [style=dashed label="typename-specifier"]
  965 -> 317 [style=dashed label="unary-expression"]
  965 -> 318 [style=dashed label="unary-operator"]
  965 -> 319 [style=dashed label="unqualified-id"]
  965 -> 320 [style=dashed label="user-defined-character-literal"]
  965 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  965 -> 322 [style=dashed label="user-defined-integer-literal"]
  965 -> 323 [style=dashed label="user-defined-literal"]
  965 -> 324 [style=dashed label="user-defined-string-literal"]
  965 -> "965R19" [style=solid]
 "965R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  965 -> "965R469d" [label="[IDENTIFIER]", style=solid]
 "965R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  965 -> "965R629" [label="[\"{\"]", style=solid]
 "965R629" [label="R629", fillcolor=3, shape=diamond, style=filled]
  965 -> "965R722d" [label="[\"decltype\"]", style=solid]
 "965R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  965 -> "965R722" [label="[\"auto\"]", style=solid]
 "965R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  966 [label="State 966\n\l625 requirement: compound-requirement •\l"]
  966 -> "966R625" [style=solid]
 "966R625" [label="R625", fillcolor=3, shape=diamond, style=filled]
  967 [label="State 967\n\l280 expression: expression • \",\" assignment-expression\l655 simple-requirement: expression • \";\"\l"]
  967 -> 552 [style=solid label="\",\""]
  967 -> 1085 [style=solid label="\";\""]
  968 [label="State 968\n\l626 requirement: nested-requirement •\l"]
  968 -> "968R626" [style=solid]
 "968R626" [label="R626", fillcolor=3, shape=diamond, style=filled]
  969 [label="State 969\n\l631 requirement-seq: requirement •\l"]
  969 -> "969R631" [style=solid]
 "969R631" [label="R631", fillcolor=3, shape=diamond, style=filled]
  970 [label="State 970\n\l627 requirement-body: \"{\" requirement-seq • \"}\"\l632 requirement-seq: requirement-seq • requirement\l"]
  970 -> 238 [style=solid label="IDENTIFIER"]
  970 -> 239 [style=solid label="\"noexcept\""]
  970 -> 240 [style=solid label="\"!\""]
  970 -> 241 [style=solid label="\"::\""]
  970 -> 242 [style=solid label="\"this\""]
  970 -> 963 [style=solid label="\"typename\""]
  970 -> 243 [style=solid label="\"+\""]
  970 -> 244 [style=solid label="\"-\""]
  970 -> 245 [style=solid label="\"(\""]
  970 -> 246 [style=solid label="\"&\""]
  970 -> 247 [style=solid label="\"[\""]
  970 -> 248 [style=solid label="\"co_await\""]
  970 -> 964 [style=solid label="\"{\""]
  970 -> 1086 [style=solid label="\"}\""]
  970 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  970 -> 250 [style=solid label="CHARACTER_LITERAL"]
  970 -> 251 [style=solid label="\"operator\""]
  970 -> 21 [style=solid label="\"decltype\""]
  970 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  970 -> 253 [style=solid label="\"*\""]
  970 -> 254 [style=solid label="INTEGER_LITERAL"]
  970 -> 965 [style=solid label="\"requires\""]
  970 -> 256 [style=solid label="\"~\""]
  970 -> 257 [style=solid label="\"++\""]
  970 -> 258 [style=solid label="\"--\""]
  970 -> 259 [style=solid label="POINTER_LITERAL"]
  970 -> 260 [style=solid label="\"dynamic_cast\""]
  970 -> 261 [style=solid label="\"static_cast\""]
  970 -> 262 [style=solid label="\"reinterpret_cast\""]
  970 -> 263 [style=solid label="\"const_cast\""]
  970 -> 264 [style=solid label="\"typeid\""]
  970 -> 27 [style=solid label="\"char\""]
  970 -> 28 [style=solid label="\"char8_t\""]
  970 -> 29 [style=solid label="\"char16_t\""]
  970 -> 30 [style=solid label="\"char32_t\""]
  970 -> 31 [style=solid label="\"wchar_t\""]
  970 -> 32 [style=solid label="\"bool\""]
  970 -> 33 [style=solid label="\"short\""]
  970 -> 34 [style=solid label="\"int\""]
  970 -> 35 [style=solid label="\"long\""]
  970 -> 36 [style=solid label="\"signed\""]
  970 -> 37 [style=solid label="\"unsigned\""]
  970 -> 38 [style=solid label="\"float\""]
  970 -> 39 [style=solid label="\"double\""]
  970 -> 40 [style=solid label="\"void\""]
  970 -> 118 [style=solid label="STRING_LITERAL"]
  970 -> 265 [style=solid label="\"throw\""]
  970 -> 266 [style=solid label="\"sizeof\""]
  970 -> 267 [style=solid label="\"alignof\""]
  970 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  970 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  970 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  970 -> 271 [style=solid label="\"co_yield\""]
  970 -> 272 [style=dashed label="SCOPE-opt"]
  970 -> 273 [style=dashed label="additive-expression"]
  970 -> 274 [style=dashed label="and-expression"]
  970 -> 275 [style=dashed label="assignment-expression"]
  970 -> 276 [style=dashed label="await-expression"]
  970 -> 277 [style=dashed label="boolean-literal"]
  970 -> 278 [style=dashed label="cast-expression"]
  970 -> 279 [style=dashed label="character-literal"]
  970 -> 55 [style=dashed label="class-name"]
  970 -> 280 [style=dashed label="compare-expression"]
  970 -> 966 [style=dashed label="compound-requirement"]
  970 -> 281 [style=dashed label="conditional-expression"]
  970 -> 282 [style=dashed label="conversion-function-id"]
  970 -> 63 [style=dashed label="decltype-specifier"]
  970 -> 283 [style=dashed label="delete-expression"]
  970 -> 71 [style=dashed label="enum-name"]
  970 -> 284 [style=dashed label="equality-expression"]
  970 -> 285 [style=dashed label="exclusive-or-expression"]
  970 -> 967 [style=dashed label="expression"]
  970 -> 287 [style=dashed label="floating-point-literal"]
  970 -> 288 [style=dashed label="fold-expression"]
  970 -> 289 [style=dashed label="id-expression"]
  970 -> 290 [style=dashed label="inclusive-or-expression"]
  970 -> 291 [style=dashed label="integer-literal"]
  970 -> 292 [style=dashed label="lambda-expression"]
  970 -> 293 [style=dashed label="lambda-introducer"]
  970 -> 294 [style=dashed label="literal"]
  970 -> 295 [style=dashed label="literal-operator-id"]
  970 -> 296 [style=dashed label="logical-and-expression"]
  970 -> 297 [style=dashed label="logical-or-expression"]
  970 -> 298 [style=dashed label="multiplicative-expression"]
  970 -> 85 [style=dashed label="namespace-alias"]
  970 -> 88 [style=dashed label="namespace-name"]
  970 -> 299 [style=dashed label="nested-name-specifier"]
  970 -> 90 [style=dashed label="nested-name-specifier-opt"]
  970 -> 968 [style=dashed label="nested-requirement"]
  970 -> 300 [style=dashed label="new-expression"]
  970 -> 301 [style=dashed label="noexcept-expression"]
  970 -> 302 [style=dashed label="operator-function-id"]
  970 -> 94 [style=dashed label="placeholder-type-specifier"]
  970 -> 303 [style=dashed label="pm-expression"]
  970 -> 304 [style=dashed label="pointer-literal"]
  970 -> 305 [style=dashed label="postfix-expression"]
  970 -> 306 [style=dashed label="primary-expression"]
  970 -> 307 [style=dashed label="qualified-id"]
  970 -> 308 [style=dashed label="relational-expression"]
  970 -> 1087 [style=dashed label="requirement"]
  970 -> 309 [style=dashed label="requires-expression"]
  970 -> 310 [style=dashed label="shift-expression"]
  970 -> 971 [style=dashed label="simple-requirement"]
  970 -> 311 [style=dashed label="simple-template-id"]
  970 -> 312 [style=dashed label="simple-type-specifier"]
  970 -> 313 [style=dashed label="string-literal"]
  970 -> 314 [style=dashed label="template-id"]
  970 -> 102 [style=dashed label="template-name"]
  970 -> 315 [style=dashed label="throw-expression"]
  970 -> 104 [style=dashed label="type-constraint"]
  970 -> 105 [style=dashed label="type-constraint-opt"]
  970 -> 106 [style=dashed label="type-name"]
  970 -> 972 [style=dashed label="type-requirement"]
  970 -> 108 [style=dashed label="typedef-name"]
  970 -> 316 [style=dashed label="typename-specifier"]
  970 -> 317 [style=dashed label="unary-expression"]
  970 -> 318 [style=dashed label="unary-operator"]
  970 -> 319 [style=dashed label="unqualified-id"]
  970 -> 320 [style=dashed label="user-defined-character-literal"]
  970 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  970 -> 322 [style=dashed label="user-defined-integer-literal"]
  970 -> 323 [style=dashed label="user-defined-literal"]
  970 -> 324 [style=dashed label="user-defined-string-literal"]
  970 -> 325 [style=dashed label="yield-expression"]
  970 -> "970R19" [style=solid]
 "970R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  970 -> "970R469d" [label="[IDENTIFIER]", style=solid]
 "970R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  970 -> "970R722d" [label="[\"decltype\"]", style=solid]
 "970R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  970 -> "970R722" [label="[\"auto\"]", style=solid]
 "970R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  971 [label="State 971\n\l623 requirement: simple-requirement •\l"]
  971 -> "971R623" [style=solid]
 "971R623" [label="R623", fillcolor=3, shape=diamond, style=filled]
  972 [label="State 972\n\l624 requirement: type-requirement •\l"]
  972 -> "972R624" [style=solid]
 "972R624" [label="R624", fillcolor=3, shape=diamond, style=filled]
  973 [label="State 973\n\l582 postfix-expression: \"dynamic_cast\" \"<\" type-id \">\" • \"(\" expression \")\"\l"]
  973 -> 1088 [style=solid label="\"(\""]
  974 [label="State 974\n\l583 postfix-expression: \"static_cast\" \"<\" type-id \">\" • \"(\" expression \")\"\l"]
  974 -> 1089 [style=solid label="\"(\""]
  975 [label="State 975\n\l584 postfix-expression: \"reinterpret_cast\" \"<\" type-id \">\" • \"(\" expression \")\"\l"]
  975 -> 1090 [style=solid label="\"(\""]
  976 [label="State 976\n\l585 postfix-expression: \"const_cast\" \"<\" type-id \">\" • \"(\" expression \")\"\l"]
  976 -> 1091 [style=solid label="\"(\""]
  977 [label="State 977\n\l586 postfix-expression: \"typeid\" \"(\" expression \")\" •\l"]
  977 -> "977R586" [style=solid]
 "977R586" [label="R586", fillcolor=3, shape=diamond, style=filled]
  978 [label="State 978\n\l587 postfix-expression: \"typeid\" \"(\" type-id \")\" •\l"]
  978 -> "978R587" [style=solid]
 "978R587" [label="R587", fillcolor=3, shape=diamond, style=filled]
  979 [label="State 979\n\l755 unary-expression: \"sizeof\" \"...\" \"(\" IDENTIFIER • \")\"\l"]
  979 -> 1092 [style=solid label="\")\""]
  980 [label="State 980\n\l754 unary-expression: \"sizeof\" \"(\" type-id \")\" •\l"]
  980 -> "980R754" [style=solid]
 "980R754" [label="R754", fillcolor=3, shape=diamond, style=filled]
  981 [label="State 981\n\l756 unary-expression: \"alignof\" \"(\" type-id \")\" •\l"]
  981 -> "981R756" [style=solid]
 "981R756" [label="R756", fillcolor=3, shape=diamond, style=filled]
  982 [label="State 982\n\l225 delete-expression: SCOPE-opt \"delete\" \"[\" \"]\" • cast-expression\l"]
  982 -> 238 [style=solid label="IDENTIFIER"]
  982 -> 239 [style=solid label="\"noexcept\""]
  982 -> 240 [style=solid label="\"!\""]
  982 -> 241 [style=solid label="\"::\""]
  982 -> 242 [style=solid label="\"this\""]
  982 -> 8 [style=solid label="\"typename\""]
  982 -> 243 [style=solid label="\"+\""]
  982 -> 244 [style=solid label="\"-\""]
  982 -> 245 [style=solid label="\"(\""]
  982 -> 246 [style=solid label="\"&\""]
  982 -> 247 [style=solid label="\"[\""]
  982 -> 248 [style=solid label="\"co_await\""]
  982 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  982 -> 250 [style=solid label="CHARACTER_LITERAL"]
  982 -> 251 [style=solid label="\"operator\""]
  982 -> 21 [style=solid label="\"decltype\""]
  982 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  982 -> 253 [style=solid label="\"*\""]
  982 -> 254 [style=solid label="INTEGER_LITERAL"]
  982 -> 255 [style=solid label="\"requires\""]
  982 -> 256 [style=solid label="\"~\""]
  982 -> 257 [style=solid label="\"++\""]
  982 -> 258 [style=solid label="\"--\""]
  982 -> 259 [style=solid label="POINTER_LITERAL"]
  982 -> 260 [style=solid label="\"dynamic_cast\""]
  982 -> 261 [style=solid label="\"static_cast\""]
  982 -> 262 [style=solid label="\"reinterpret_cast\""]
  982 -> 263 [style=solid label="\"const_cast\""]
  982 -> 264 [style=solid label="\"typeid\""]
  982 -> 27 [style=solid label="\"char\""]
  982 -> 28 [style=solid label="\"char8_t\""]
  982 -> 29 [style=solid label="\"char16_t\""]
  982 -> 30 [style=solid label="\"char32_t\""]
  982 -> 31 [style=solid label="\"wchar_t\""]
  982 -> 32 [style=solid label="\"bool\""]
  982 -> 33 [style=solid label="\"short\""]
  982 -> 34 [style=solid label="\"int\""]
  982 -> 35 [style=solid label="\"long\""]
  982 -> 36 [style=solid label="\"signed\""]
  982 -> 37 [style=solid label="\"unsigned\""]
  982 -> 38 [style=solid label="\"float\""]
  982 -> 39 [style=solid label="\"double\""]
  982 -> 40 [style=solid label="\"void\""]
  982 -> 118 [style=solid label="STRING_LITERAL"]
  982 -> 266 [style=solid label="\"sizeof\""]
  982 -> 267 [style=solid label="\"alignof\""]
  982 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  982 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  982 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  982 -> 272 [style=dashed label="SCOPE-opt"]
  982 -> 276 [style=dashed label="await-expression"]
  982 -> 277 [style=dashed label="boolean-literal"]
  982 -> 1093 [style=dashed label="cast-expression"]
  982 -> 279 [style=dashed label="character-literal"]
  982 -> 55 [style=dashed label="class-name"]
  982 -> 282 [style=dashed label="conversion-function-id"]
  982 -> 63 [style=dashed label="decltype-specifier"]
  982 -> 283 [style=dashed label="delete-expression"]
  982 -> 71 [style=dashed label="enum-name"]
  982 -> 287 [style=dashed label="floating-point-literal"]
  982 -> 288 [style=dashed label="fold-expression"]
  982 -> 289 [style=dashed label="id-expression"]
  982 -> 291 [style=dashed label="integer-literal"]
  982 -> 292 [style=dashed label="lambda-expression"]
  982 -> 293 [style=dashed label="lambda-introducer"]
  982 -> 294 [style=dashed label="literal"]
  982 -> 295 [style=dashed label="literal-operator-id"]
  982 -> 85 [style=dashed label="namespace-alias"]
  982 -> 88 [style=dashed label="namespace-name"]
  982 -> 299 [style=dashed label="nested-name-specifier"]
  982 -> 90 [style=dashed label="nested-name-specifier-opt"]
  982 -> 300 [style=dashed label="new-expression"]
  982 -> 301 [style=dashed label="noexcept-expression"]
  982 -> 302 [style=dashed label="operator-function-id"]
  982 -> 94 [style=dashed label="placeholder-type-specifier"]
  982 -> 304 [style=dashed label="pointer-literal"]
  982 -> 305 [style=dashed label="postfix-expression"]
  982 -> 306 [style=dashed label="primary-expression"]
  982 -> 307 [style=dashed label="qualified-id"]
  982 -> 309 [style=dashed label="requires-expression"]
  982 -> 311 [style=dashed label="simple-template-id"]
  982 -> 312 [style=dashed label="simple-type-specifier"]
  982 -> 313 [style=dashed label="string-literal"]
  982 -> 314 [style=dashed label="template-id"]
  982 -> 102 [style=dashed label="template-name"]
  982 -> 104 [style=dashed label="type-constraint"]
  982 -> 105 [style=dashed label="type-constraint-opt"]
  982 -> 106 [style=dashed label="type-name"]
  982 -> 108 [style=dashed label="typedef-name"]
  982 -> 316 [style=dashed label="typename-specifier"]
  982 -> 317 [style=dashed label="unary-expression"]
  982 -> 318 [style=dashed label="unary-operator"]
  982 -> 319 [style=dashed label="unqualified-id"]
  982 -> 320 [style=dashed label="user-defined-character-literal"]
  982 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  982 -> 322 [style=dashed label="user-defined-integer-literal"]
  982 -> 323 [style=dashed label="user-defined-literal"]
  982 -> 324 [style=dashed label="user-defined-string-literal"]
  982 -> "982R19" [style=solid]
 "982R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  982 -> "982R469d" [label="[IDENTIFIER]", style=solid]
 "982R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  982 -> "982R722d" [label="[\"decltype\"]", style=solid]
 "982R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  982 -> "982R722" [label="[\"auto\"]", style=solid]
 "982R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  983 [label="State 983\n\l483 new-placement: \"(\" expression-list • \")\"\l"]
  983 -> 1094 [style=solid label="\")\""]
  984 [label="State 984\n\l478 new-expression: SCOPE-opt \"new\" new-placement-opt \"(\" • type-id \")\" new-initializer-opt\l"]
  984 -> 4 [style=solid label="IDENTIFIER"]
  984 -> 6 [style=solid label="\"::\""]
  984 -> 8 [style=solid label="\"typename\""]
  984 -> 12 [style=solid label="\"class\""]
  984 -> 13 [style=solid label="\"struct\""]
  984 -> 14 [style=solid label="\"union\""]
  984 -> 15 [style=solid label="\"const\""]
  984 -> 16 [style=solid label="\"volatile\""]
  984 -> 21 [style=solid label="\"decltype\""]
  984 -> 125 [style=solid label="\"enum\""]
  984 -> 27 [style=solid label="\"char\""]
  984 -> 28 [style=solid label="\"char8_t\""]
  984 -> 29 [style=solid label="\"char16_t\""]
  984 -> 30 [style=solid label="\"char32_t\""]
  984 -> 31 [style=solid label="\"wchar_t\""]
  984 -> 32 [style=solid label="\"bool\""]
  984 -> 33 [style=solid label="\"short\""]
  984 -> 34 [style=solid label="\"int\""]
  984 -> 35 [style=solid label="\"long\""]
  984 -> 36 [style=solid label="\"signed\""]
  984 -> 37 [style=solid label="\"unsigned\""]
  984 -> 38 [style=solid label="\"float\""]
  984 -> 39 [style=solid label="\"double\""]
  984 -> 40 [style=solid label="\"void\""]
  984 -> 424 [style=dashed label="class-key"]
  984 -> 55 [style=dashed label="class-name"]
  984 -> 57 [style=dashed label="cv-qualifier"]
  984 -> 63 [style=dashed label="decltype-specifier"]
  984 -> 66 [style=dashed label="elaborated-enum-specifier"]
  984 -> 67 [style=dashed label="elaborated-type-specifier"]
  984 -> 71 [style=dashed label="enum-name"]
  984 -> 85 [style=dashed label="namespace-alias"]
  984 -> 88 [style=dashed label="namespace-name"]
  984 -> 89 [style=dashed label="nested-name-specifier"]
  984 -> 90 [style=dashed label="nested-name-specifier-opt"]
  984 -> 94 [style=dashed label="placeholder-type-specifier"]
  984 -> 96 [style=dashed label="simple-template-id"]
  984 -> 97 [style=dashed label="simple-type-specifier"]
  984 -> 102 [style=dashed label="template-name"]
  984 -> 104 [style=dashed label="type-constraint"]
  984 -> 105 [style=dashed label="type-constraint-opt"]
  984 -> 1095 [style=dashed label="type-id"]
  984 -> 106 [style=dashed label="type-name"]
  984 -> 432 [style=dashed label="type-specifier"]
  984 -> 433 [style=dashed label="type-specifier-seq"]
  984 -> 108 [style=dashed label="typedef-name"]
  984 -> 109 [style=dashed label="typename-specifier"]
  984 -> "984R469d" [label="[IDENTIFIER]", style=solid]
 "984R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  984 -> "984R722d" [label="[\"decltype\"]", style=solid]
 "984R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  984 -> "984R722" [label="[]", style=solid]
 "984R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  985 [label="State 985\n\l477 new-expression: SCOPE-opt \"new\" new-placement-opt new-type-id • new-initializer-opt\l"]
  985 -> 1096 [style=solid label="\"(\""]
  985 -> 398 [style=solid label="\"{\""]
  985 -> 1097 [style=dashed label="braced-init-list"]
  985 -> 1098 [style=dashed label="new-initializer"]
  985 -> 1099 [style=dashed label="new-initializer-opt"]
  985 -> "985R481d" [label="[\"{\"]", style=solid]
 "985R481d" [label="R481", fillcolor=5, shape=diamond, style=filled]
  985 -> "985R481" [style=solid]
 "985R481" [label="R481", fillcolor=3, shape=diamond, style=filled]
  986 [label="State 986\n\l486 new-type-id: type-specifier-seq • new-declarator-opt\l"]
  986 -> 4 [style=solid label="IDENTIFIER"]
  986 -> 6 [style=solid label="\"::\""]
  986 -> 160 [style=solid label="\"&\""]
  986 -> 1100 [style=solid label="\"[\""]
  986 -> 163 [style=solid label="\"&&\""]
  986 -> 21 [style=solid label="\"decltype\""]
  986 -> 164 [style=solid label="\"*\""]
  986 -> 55 [style=dashed label="class-name"]
  986 -> 121 [style=dashed label="decltype-specifier"]
  986 -> 71 [style=dashed label="enum-name"]
  986 -> 85 [style=dashed label="namespace-alias"]
  986 -> 88 [style=dashed label="namespace-name"]
  986 -> 187 [style=dashed label="nested-name-specifier"]
  986 -> 1101 [style=dashed label="new-declarator"]
  986 -> 1102 [style=dashed label="new-declarator-opt"]
  986 -> 1103 [style=dashed label="noptr-new-declarator"]
  986 -> 1104 [style=dashed label="ptr-operator"]
  986 -> 96 [style=dashed label="simple-template-id"]
  986 -> 102 [style=dashed label="template-name"]
  986 -> 106 [style=dashed label="type-name"]
  986 -> 108 [style=dashed label="typedef-name"]
  986 -> "986R475d" [label="[\"&\", \"&&\", \"*\"]", style=solid]
 "986R475d" [label="R475", fillcolor=5, shape=diamond, style=filled]
  986 -> "986R475" [style=solid]
 "986R475" [label="R475", fillcolor=3, shape=diamond, style=filled]
  987 [label="State 987\n\l389 lambda-declarator: \"(\" parameter-declaration-clause \")\" • lambda-specifiers requires-clause-opt\l"]
  987 -> 1 [style=solid label="\"constexpr\""]
  987 -> 150 [style=solid label="\"extern\""]
  987 -> 4 [style=solid label="IDENTIFIER"]
  987 -> 151 [style=solid label="\"inline\""]
  987 -> 6 [style=solid label="\"::\""]
  987 -> 8 [style=solid label="\"typename\""]
  987 -> 9 [style=solid label="\"virtual\""]
  987 -> 12 [style=solid label="\"class\""]
  987 -> 13 [style=solid label="\"struct\""]
  987 -> 14 [style=solid label="\"union\""]
  987 -> 15 [style=solid label="\"const\""]
  987 -> 16 [style=solid label="\"volatile\""]
  987 -> 17 [style=solid label="\"friend\""]
  987 -> 18 [style=solid label="\"typedef\""]
  987 -> 19 [style=solid label="\"consteval\""]
  987 -> 20 [style=solid label="\"constinit\""]
  987 -> 21 [style=solid label="\"decltype\""]
  987 -> 22 [style=solid label="\"enum\""]
  987 -> 23 [style=solid label="\"explicit\""]
  987 -> 27 [style=solid label="\"char\""]
  987 -> 28 [style=solid label="\"char8_t\""]
  987 -> 29 [style=solid label="\"char16_t\""]
  987 -> 30 [style=solid label="\"char32_t\""]
  987 -> 31 [style=solid label="\"wchar_t\""]
  987 -> 32 [style=solid label="\"bool\""]
  987 -> 33 [style=solid label="\"short\""]
  987 -> 34 [style=solid label="\"int\""]
  987 -> 35 [style=solid label="\"long\""]
  987 -> 36 [style=solid label="\"signed\""]
  987 -> 37 [style=solid label="\"unsigned\""]
  987 -> 38 [style=solid label="\"float\""]
  987 -> 39 [style=solid label="\"double\""]
  987 -> 40 [style=solid label="\"void\""]
  987 -> 42 [style=solid label="\"static\""]
  987 -> 43 [style=solid label="\"thread_local\""]
  987 -> 44 [style=solid label="\"mutable\""]
  987 -> 53 [style=dashed label="class-head"]
  987 -> 54 [style=dashed label="class-key"]
  987 -> 55 [style=dashed label="class-name"]
  987 -> 56 [style=dashed label="class-specifier"]
  987 -> 57 [style=dashed label="cv-qualifier"]
  987 -> 58 [style=dashed label="decl-specifier"]
  987 -> 557 [style=dashed label="decl-specifier-seq"]
  987 -> 558 [style=dashed label="decl-specifier-seq-opt"]
  987 -> 63 [style=dashed label="decltype-specifier"]
  987 -> 65 [style=dashed label="defining-type-specifier"]
  987 -> 66 [style=dashed label="elaborated-enum-specifier"]
  987 -> 67 [style=dashed label="elaborated-type-specifier"]
  987 -> 69 [style=dashed label="enum-head"]
  987 -> 154 [style=dashed label="enum-key"]
  987 -> 71 [style=dashed label="enum-name"]
  987 -> 72 [style=dashed label="enum-specifier"]
  987 -> 155 [style=dashed label="explicit-specifier"]
  987 -> 79 [style=dashed label="function-specifier"]
  987 -> 1105 [style=dashed label="lambda-specifiers"]
  987 -> 85 [style=dashed label="namespace-alias"]
  987 -> 88 [style=dashed label="namespace-name"]
  987 -> 89 [style=dashed label="nested-name-specifier"]
  987 -> 90 [style=dashed label="nested-name-specifier-opt"]
  987 -> 94 [style=dashed label="placeholder-type-specifier"]
  987 -> 96 [style=dashed label="simple-template-id"]
  987 -> 97 [style=dashed label="simple-type-specifier"]
  987 -> 99 [style=dashed label="storage-class-specifier"]
  987 -> 102 [style=dashed label="template-name"]
  987 -> 104 [style=dashed label="type-constraint"]
  987 -> 105 [style=dashed label="type-constraint-opt"]
  987 -> 106 [style=dashed label="type-name"]
  987 -> 107 [style=dashed label="type-specifier"]
  987 -> 108 [style=dashed label="typedef-name"]
  987 -> 109 [style=dashed label="typename-specifier"]
  987 -> "987R193" [style=solid]
 "987R193" [label="R193", fillcolor=3, shape=diamond, style=filled]
  987 -> "987R469d" [label="[IDENTIFIER]", style=solid]
 "987R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  987 -> "987R722d" [label="[\"decltype\"]", style=solid]
 "987R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  987 -> "987R722" [label="[\"auto\"]", style=solid]
 "987R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  988 [label="State 988\n\l391 lambda-expression: lambda-introducer \"<\" template-parameter-list \">\" • requires-clause-opt lambda-declarator compound-statement\l"]
  988 -> 399 [style=solid label="\"requires\""]
  988 -> 718 [style=dashed label="requires-clause"]
  988 -> 1106 [style=dashed label="requires-clause-opt"]
  988 -> "988R634" [style=solid]
 "988R634" [label="R634", fillcolor=3, shape=diamond, style=filled]
  989 [label="State 989\n\l489 noexcept-specifier: \"noexcept\" \"(\" • constant-expression \")\"\l"]
  989 -> 238 [style=solid label="IDENTIFIER"]
  989 -> 239 [style=solid label="\"noexcept\""]
  989 -> 240 [style=solid label="\"!\""]
  989 -> 241 [style=solid label="\"::\""]
  989 -> 242 [style=solid label="\"this\""]
  989 -> 8 [style=solid label="\"typename\""]
  989 -> 243 [style=solid label="\"+\""]
  989 -> 244 [style=solid label="\"-\""]
  989 -> 245 [style=solid label="\"(\""]
  989 -> 246 [style=solid label="\"&\""]
  989 -> 247 [style=solid label="\"[\""]
  989 -> 248 [style=solid label="\"co_await\""]
  989 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  989 -> 250 [style=solid label="CHARACTER_LITERAL"]
  989 -> 251 [style=solid label="\"operator\""]
  989 -> 21 [style=solid label="\"decltype\""]
  989 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  989 -> 253 [style=solid label="\"*\""]
  989 -> 254 [style=solid label="INTEGER_LITERAL"]
  989 -> 255 [style=solid label="\"requires\""]
  989 -> 256 [style=solid label="\"~\""]
  989 -> 257 [style=solid label="\"++\""]
  989 -> 258 [style=solid label="\"--\""]
  989 -> 259 [style=solid label="POINTER_LITERAL"]
  989 -> 260 [style=solid label="\"dynamic_cast\""]
  989 -> 261 [style=solid label="\"static_cast\""]
  989 -> 262 [style=solid label="\"reinterpret_cast\""]
  989 -> 263 [style=solid label="\"const_cast\""]
  989 -> 264 [style=solid label="\"typeid\""]
  989 -> 27 [style=solid label="\"char\""]
  989 -> 28 [style=solid label="\"char8_t\""]
  989 -> 29 [style=solid label="\"char16_t\""]
  989 -> 30 [style=solid label="\"char32_t\""]
  989 -> 31 [style=solid label="\"wchar_t\""]
  989 -> 32 [style=solid label="\"bool\""]
  989 -> 33 [style=solid label="\"short\""]
  989 -> 34 [style=solid label="\"int\""]
  989 -> 35 [style=solid label="\"long\""]
  989 -> 36 [style=solid label="\"signed\""]
  989 -> 37 [style=solid label="\"unsigned\""]
  989 -> 38 [style=solid label="\"float\""]
  989 -> 39 [style=solid label="\"double\""]
  989 -> 40 [style=solid label="\"void\""]
  989 -> 118 [style=solid label="STRING_LITERAL"]
  989 -> 266 [style=solid label="\"sizeof\""]
  989 -> 267 [style=solid label="\"alignof\""]
  989 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  989 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  989 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  989 -> 272 [style=dashed label="SCOPE-opt"]
  989 -> 273 [style=dashed label="additive-expression"]
  989 -> 274 [style=dashed label="and-expression"]
  989 -> 276 [style=dashed label="await-expression"]
  989 -> 277 [style=dashed label="boolean-literal"]
  989 -> 278 [style=dashed label="cast-expression"]
  989 -> 279 [style=dashed label="character-literal"]
  989 -> 55 [style=dashed label="class-name"]
  989 -> 280 [style=dashed label="compare-expression"]
  989 -> 327 [style=dashed label="conditional-expression"]
  989 -> 1107 [style=dashed label="constant-expression"]
  989 -> 282 [style=dashed label="conversion-function-id"]
  989 -> 63 [style=dashed label="decltype-specifier"]
  989 -> 283 [style=dashed label="delete-expression"]
  989 -> 71 [style=dashed label="enum-name"]
  989 -> 284 [style=dashed label="equality-expression"]
  989 -> 285 [style=dashed label="exclusive-or-expression"]
  989 -> 287 [style=dashed label="floating-point-literal"]
  989 -> 288 [style=dashed label="fold-expression"]
  989 -> 289 [style=dashed label="id-expression"]
  989 -> 290 [style=dashed label="inclusive-or-expression"]
  989 -> 291 [style=dashed label="integer-literal"]
  989 -> 292 [style=dashed label="lambda-expression"]
  989 -> 293 [style=dashed label="lambda-introducer"]
  989 -> 294 [style=dashed label="literal"]
  989 -> 295 [style=dashed label="literal-operator-id"]
  989 -> 296 [style=dashed label="logical-and-expression"]
  989 -> 329 [style=dashed label="logical-or-expression"]
  989 -> 298 [style=dashed label="multiplicative-expression"]
  989 -> 85 [style=dashed label="namespace-alias"]
  989 -> 88 [style=dashed label="namespace-name"]
  989 -> 299 [style=dashed label="nested-name-specifier"]
  989 -> 90 [style=dashed label="nested-name-specifier-opt"]
  989 -> 300 [style=dashed label="new-expression"]
  989 -> 301 [style=dashed label="noexcept-expression"]
  989 -> 302 [style=dashed label="operator-function-id"]
  989 -> 94 [style=dashed label="placeholder-type-specifier"]
  989 -> 303 [style=dashed label="pm-expression"]
  989 -> 304 [style=dashed label="pointer-literal"]
  989 -> 305 [style=dashed label="postfix-expression"]
  989 -> 306 [style=dashed label="primary-expression"]
  989 -> 307 [style=dashed label="qualified-id"]
  989 -> 308 [style=dashed label="relational-expression"]
  989 -> 309 [style=dashed label="requires-expression"]
  989 -> 310 [style=dashed label="shift-expression"]
  989 -> 311 [style=dashed label="simple-template-id"]
  989 -> 312 [style=dashed label="simple-type-specifier"]
  989 -> 313 [style=dashed label="string-literal"]
  989 -> 314 [style=dashed label="template-id"]
  989 -> 102 [style=dashed label="template-name"]
  989 -> 104 [style=dashed label="type-constraint"]
  989 -> 105 [style=dashed label="type-constraint-opt"]
  989 -> 106 [style=dashed label="type-name"]
  989 -> 108 [style=dashed label="typedef-name"]
  989 -> 316 [style=dashed label="typename-specifier"]
  989 -> 317 [style=dashed label="unary-expression"]
  989 -> 318 [style=dashed label="unary-operator"]
  989 -> 319 [style=dashed label="unqualified-id"]
  989 -> 320 [style=dashed label="user-defined-character-literal"]
  989 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  989 -> 322 [style=dashed label="user-defined-integer-literal"]
  989 -> 323 [style=dashed label="user-defined-literal"]
  989 -> 324 [style=dashed label="user-defined-string-literal"]
  989 -> "989R19" [style=solid]
 "989R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  989 -> "989R469d" [label="[IDENTIFIER]", style=solid]
 "989R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  989 -> "989R722d" [label="[\"decltype\"]", style=solid]
 "989R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  989 -> "989R722" [label="[\"auto\"]", style=solid]
 "989R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  990 [label="State 990\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l393 lambda-specifiers: decl-specifier-seq-opt noexcept-specifier-opt attribute-specifier-seq-opt • trailing-return-type-opt\l"]
  990 -> 158 [style=solid label="\"alignas\""]
  990 -> 162 [style=solid label="\"[\""]
  990 -> 645 [style=solid label="\"->\""]
  990 -> 166 [style=dashed label="alignment-specifier"]
  990 -> 167 [style=dashed label="attribute-specifier"]
  990 -> 1108 [style=dashed label="trailing-return-type"]
  990 -> 1109 [style=dashed label="trailing-return-type-opt"]
  990 -> "990R715" [style=solid]
 "990R715" [label="R715", fillcolor=3, shape=diamond, style=filled]
  991 [label="State 991\n\l456 namespace-alias-definition: \"namespace\" • IDENTIFIER \"=\" qualified-namespace-specifier \";\"\l"]
  991 -> 1110 [style=solid label="IDENTIFIER"]
  992 [label="State 992\n\l 84 attribute-specifier-seq-opt: attribute-specifier-seq •\l653 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list \";\"\l"]
  992 -> 1 [style=solid label="\"constexpr\""]
  992 -> 150 [style=solid label="\"extern\""]
  992 -> 4 [style=solid label="IDENTIFIER"]
  992 -> 151 [style=solid label="\"inline\""]
  992 -> 6 [style=solid label="\"::\""]
  992 -> 8 [style=solid label="\"typename\""]
  992 -> 9 [style=solid label="\"virtual\""]
  992 -> 12 [style=solid label="\"class\""]
  992 -> 13 [style=solid label="\"struct\""]
  992 -> 14 [style=solid label="\"union\""]
  992 -> 15 [style=solid label="\"const\""]
  992 -> 16 [style=solid label="\"volatile\""]
  992 -> 17 [style=solid label="\"friend\""]
  992 -> 18 [style=solid label="\"typedef\""]
  992 -> 19 [style=solid label="\"consteval\""]
  992 -> 20 [style=solid label="\"constinit\""]
  992 -> 21 [style=solid label="\"decltype\""]
  992 -> 22 [style=solid label="\"enum\""]
  992 -> 23 [style=solid label="\"explicit\""]
  992 -> 27 [style=solid label="\"char\""]
  992 -> 28 [style=solid label="\"char8_t\""]
  992 -> 29 [style=solid label="\"char16_t\""]
  992 -> 30 [style=solid label="\"char32_t\""]
  992 -> 31 [style=solid label="\"wchar_t\""]
  992 -> 32 [style=solid label="\"bool\""]
  992 -> 33 [style=solid label="\"short\""]
  992 -> 34 [style=solid label="\"int\""]
  992 -> 35 [style=solid label="\"long\""]
  992 -> 36 [style=solid label="\"signed\""]
  992 -> 37 [style=solid label="\"unsigned\""]
  992 -> 38 [style=solid label="\"float\""]
  992 -> 39 [style=solid label="\"double\""]
  992 -> 40 [style=solid label="\"void\""]
  992 -> 42 [style=solid label="\"static\""]
  992 -> 43 [style=solid label="\"thread_local\""]
  992 -> 44 [style=solid label="\"mutable\""]
  992 -> 53 [style=dashed label="class-head"]
  992 -> 54 [style=dashed label="class-key"]
  992 -> 55 [style=dashed label="class-name"]
  992 -> 56 [style=dashed label="class-specifier"]
  992 -> 57 [style=dashed label="cv-qualifier"]
  992 -> 58 [style=dashed label="decl-specifier"]
  992 -> 153 [style=dashed label="decl-specifier-seq"]
  992 -> 63 [style=dashed label="decltype-specifier"]
  992 -> 65 [style=dashed label="defining-type-specifier"]
  992 -> 66 [style=dashed label="elaborated-enum-specifier"]
  992 -> 67 [style=dashed label="elaborated-type-specifier"]
  992 -> 69 [style=dashed label="enum-head"]
  992 -> 154 [style=dashed label="enum-key"]
  992 -> 71 [style=dashed label="enum-name"]
  992 -> 72 [style=dashed label="enum-specifier"]
  992 -> 155 [style=dashed label="explicit-specifier"]
  992 -> 79 [style=dashed label="function-specifier"]
  992 -> 85 [style=dashed label="namespace-alias"]
  992 -> 88 [style=dashed label="namespace-name"]
  992 -> 89 [style=dashed label="nested-name-specifier"]
  992 -> 90 [style=dashed label="nested-name-specifier-opt"]
  992 -> 94 [style=dashed label="placeholder-type-specifier"]
  992 -> 96 [style=dashed label="simple-template-id"]
  992 -> 97 [style=dashed label="simple-type-specifier"]
  992 -> 99 [style=dashed label="storage-class-specifier"]
  992 -> 102 [style=dashed label="template-name"]
  992 -> 104 [style=dashed label="type-constraint"]
  992 -> 105 [style=dashed label="type-constraint-opt"]
  992 -> 106 [style=dashed label="type-name"]
  992 -> 107 [style=dashed label="type-specifier"]
  992 -> 108 [style=dashed label="typedef-name"]
  992 -> 109 [style=dashed label="typename-specifier"]
  992 -> "992R84d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "992R84d" [label="R84", fillcolor=5, shape=diamond, style=filled]
  992 -> "992R84" [style=solid]
 "992R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  992 -> "992R469d" [label="[IDENTIFIER]", style=solid]
 "992R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  992 -> "992R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "992R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  993 [label="State 993\n\l 49 asm-declaration: attribute-specifier-seq-opt • \"asm\" \"(\" string-literal \")\" \";\"\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l380 labeled-statement: attribute-specifier-seq-opt • IDENTIFIER \":\" statement\l381                  | attribute-specifier-seq-opt • \"case\" constant-expression \":\" statement\l382                  | attribute-specifier-seq-opt • \"default\" \":\" statement\l654 simple-declaration: attribute-specifier-seq-opt • decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" initializer \";\"\l677 statement: attribute-specifier-seq-opt • expression-statement\l678          | attribute-specifier-seq-opt • compound-statement\l679          | attribute-specifier-seq-opt • selection-statement\l680          | attribute-specifier-seq-opt • iteration-statement\l681          | attribute-specifier-seq-opt • jump-statement\l683          | attribute-specifier-seq-opt • try-block\l786 using-directive: attribute-specifier-seq-opt • \"using\" \"namespace\" nested-name-specifier-opt namespace-name \";\"\l"]
  993 -> 1 [style=solid label="\"constexpr\""]
  993 -> 150 [style=solid label="\"extern\""]
  993 -> 1111 [style=solid label="IDENTIFIER"]
  993 -> 151 [style=solid label="\"inline\""]
  993 -> 239 [style=solid label="\"noexcept\""]
  993 -> 240 [style=solid label="\"!\""]
  993 -> 241 [style=solid label="\"::\""]
  993 -> 242 [style=solid label="\"this\""]
  993 -> 8 [style=solid label="\"typename\""]
  993 -> 9 [style=solid label="\"virtual\""]
  993 -> 243 [style=solid label="\"+\""]
  993 -> 244 [style=solid label="\"-\""]
  993 -> 157 [style=solid label="\"using\""]
  993 -> 158 [style=solid label="\"alignas\""]
  993 -> 245 [style=solid label="\"(\""]
  993 -> 246 [style=solid label="\"&\""]
  993 -> 161 [style=solid label="\"asm\""]
  993 -> 1112 [style=solid label="\"[\""]
  993 -> 248 [style=solid label="\"co_await\""]
  993 -> 813 [style=solid label="\"{\""]
  993 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  993 -> 250 [style=solid label="CHARACTER_LITERAL"]
  993 -> 12 [style=solid label="\"class\""]
  993 -> 13 [style=solid label="\"struct\""]
  993 -> 14 [style=solid label="\"union\""]
  993 -> 251 [style=solid label="\"operator\""]
  993 -> 1113 [style=solid label="\"co_return\""]
  993 -> 15 [style=solid label="\"const\""]
  993 -> 16 [style=solid label="\"volatile\""]
  993 -> 17 [style=solid label="\"friend\""]
  993 -> 18 [style=solid label="\"typedef\""]
  993 -> 19 [style=solid label="\"consteval\""]
  993 -> 20 [style=solid label="\"constinit\""]
  993 -> 21 [style=solid label="\"decltype\""]
  993 -> 22 [style=solid label="\"enum\""]
  993 -> 23 [style=solid label="\"explicit\""]
  993 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  993 -> 253 [style=solid label="\"*\""]
  993 -> 1114 [style=solid label="\"default\""]
  993 -> 1115 [style=solid label="\"try\""]
  993 -> 254 [style=solid label="INTEGER_LITERAL"]
  993 -> 1116 [style=solid label="\"while\""]
  993 -> 1117 [style=solid label="\"do\""]
  993 -> 1118 [style=solid label="\"for\""]
  993 -> 1119 [style=solid label="\"break\""]
  993 -> 1120 [style=solid label="\"continue\""]
  993 -> 1121 [style=solid label="\"return\""]
  993 -> 1122 [style=solid label="\"goto\""]
  993 -> 1123 [style=solid label="\"case\""]
  993 -> 255 [style=solid label="\"requires\""]
  993 -> 256 [style=solid label="\"~\""]
  993 -> 257 [style=solid label="\"++\""]
  993 -> 258 [style=solid label="\"--\""]
  993 -> 259 [style=solid label="POINTER_LITERAL"]
  993 -> 260 [style=solid label="\"dynamic_cast\""]
  993 -> 261 [style=solid label="\"static_cast\""]
  993 -> 262 [style=solid label="\"reinterpret_cast\""]
  993 -> 263 [style=solid label="\"const_cast\""]
  993 -> 264 [style=solid label="\"typeid\""]
  993 -> 1124 [style=solid label="\"if\""]
  993 -> 1125 [style=solid label="\"switch\""]
  993 -> 27 [style=solid label="\"char\""]
  993 -> 28 [style=solid label="\"char8_t\""]
  993 -> 29 [style=solid label="\"char16_t\""]
  993 -> 30 [style=solid label="\"char32_t\""]
  993 -> 31 [style=solid label="\"wchar_t\""]
  993 -> 32 [style=solid label="\"bool\""]
  993 -> 33 [style=solid label="\"short\""]
  993 -> 34 [style=solid label="\"int\""]
  993 -> 35 [style=solid label="\"long\""]
  993 -> 36 [style=solid label="\"signed\""]
  993 -> 37 [style=solid label="\"unsigned\""]
  993 -> 38 [style=solid label="\"float\""]
  993 -> 39 [style=solid label="\"double\""]
  993 -> 40 [style=solid label="\"void\""]
  993 -> 42 [style=solid label="\"static\""]
  993 -> 43 [style=solid label="\"thread_local\""]
  993 -> 44 [style=solid label="\"mutable\""]
  993 -> 118 [style=solid label="STRING_LITERAL"]
  993 -> 265 [style=solid label="\"throw\""]
  993 -> 266 [style=solid label="\"sizeof\""]
  993 -> 267 [style=solid label="\"alignof\""]
  993 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  993 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  993 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  993 -> 271 [style=solid label="\"co_yield\""]
  993 -> 272 [style=dashed label="SCOPE-opt"]
  993 -> 273 [style=dashed label="additive-expression"]
  993 -> 166 [style=dashed label="alignment-specifier"]
  993 -> 274 [style=dashed label="and-expression"]
  993 -> 275 [style=dashed label="assignment-expression"]
  993 -> 167 [style=dashed label="attribute-specifier"]
  993 -> 276 [style=dashed label="await-expression"]
  993 -> 277 [style=dashed label="boolean-literal"]
  993 -> 278 [style=dashed label="cast-expression"]
  993 -> 279 [style=dashed label="character-literal"]
  993 -> 53 [style=dashed label="class-head"]
  993 -> 54 [style=dashed label="class-key"]
  993 -> 55 [style=dashed label="class-name"]
  993 -> 56 [style=dashed label="class-specifier"]
  993 -> 280 [style=dashed label="compare-expression"]
  993 -> 1126 [style=dashed label="compound-statement"]
  993 -> 281 [style=dashed label="conditional-expression"]
  993 -> 282 [style=dashed label="conversion-function-id"]
  993 -> 1127 [style=dashed label="coroutine-return-statement"]
  993 -> 57 [style=dashed label="cv-qualifier"]
  993 -> 58 [style=dashed label="decl-specifier"]
  993 -> 1128 [style=dashed label="decl-specifier-seq"]
  993 -> 63 [style=dashed label="decltype-specifier"]
  993 -> 65 [style=dashed label="defining-type-specifier"]
  993 -> 283 [style=dashed label="delete-expression"]
  993 -> 66 [style=dashed label="elaborated-enum-specifier"]
  993 -> 67 [style=dashed label="elaborated-type-specifier"]
  993 -> 69 [style=dashed label="enum-head"]
  993 -> 154 [style=dashed label="enum-key"]
  993 -> 71 [style=dashed label="enum-name"]
  993 -> 72 [style=dashed label="enum-specifier"]
  993 -> 284 [style=dashed label="equality-expression"]
  993 -> 285 [style=dashed label="exclusive-or-expression"]
  993 -> 155 [style=dashed label="explicit-specifier"]
  993 -> 1129 [style=dashed label="expression"]
  993 -> 1130 [style=dashed label="expression-opt"]
  993 -> 1131 [style=dashed label="expression-statement"]
  993 -> 287 [style=dashed label="floating-point-literal"]
  993 -> 288 [style=dashed label="fold-expression"]
  993 -> 79 [style=dashed label="function-specifier"]
  993 -> 289 [style=dashed label="id-expression"]
  993 -> 290 [style=dashed label="inclusive-or-expression"]
  993 -> 291 [style=dashed label="integer-literal"]
  993 -> 1132 [style=dashed label="iteration-statement"]
  993 -> 1133 [style=dashed label="jump-statement"]
  993 -> 292 [style=dashed label="lambda-expression"]
  993 -> 293 [style=dashed label="lambda-introducer"]
  993 -> 294 [style=dashed label="literal"]
  993 -> 295 [style=dashed label="literal-operator-id"]
  993 -> 296 [style=dashed label="logical-and-expression"]
  993 -> 297 [style=dashed label="logical-or-expression"]
  993 -> 298 [style=dashed label="multiplicative-expression"]
  993 -> 85 [style=dashed label="namespace-alias"]
  993 -> 88 [style=dashed label="namespace-name"]
  993 -> 299 [style=dashed label="nested-name-specifier"]
  993 -> 90 [style=dashed label="nested-name-specifier-opt"]
  993 -> 300 [style=dashed label="new-expression"]
  993 -> 301 [style=dashed label="noexcept-expression"]
  993 -> 302 [style=dashed label="operator-function-id"]
  993 -> 94 [style=dashed label="placeholder-type-specifier"]
  993 -> 303 [style=dashed label="pm-expression"]
  993 -> 304 [style=dashed label="pointer-literal"]
  993 -> 305 [style=dashed label="postfix-expression"]
  993 -> 306 [style=dashed label="primary-expression"]
  993 -> 307 [style=dashed label="qualified-id"]
  993 -> 308 [style=dashed label="relational-expression"]
  993 -> 309 [style=dashed label="requires-expression"]
  993 -> 1134 [style=dashed label="selection-statement"]
  993 -> 310 [style=dashed label="shift-expression"]
  993 -> 311 [style=dashed label="simple-template-id"]
  993 -> 427 [style=dashed label="simple-type-specifier"]
  993 -> 99 [style=dashed label="storage-class-specifier"]
  993 -> 313 [style=dashed label="string-literal"]
  993 -> 314 [style=dashed label="template-id"]
  993 -> 102 [style=dashed label="template-name"]
  993 -> 315 [style=dashed label="throw-expression"]
  993 -> 1135 [style=dashed label="try-block"]
  993 -> 104 [style=dashed label="type-constraint"]
  993 -> 105 [style=dashed label="type-constraint-opt"]
  993 -> 106 [style=dashed label="type-name"]
  993 -> 107 [style=dashed label="type-specifier"]
  993 -> 108 [style=dashed label="typedef-name"]
  993 -> 434 [style=dashed label="typename-specifier"]
  993 -> 317 [style=dashed label="unary-expression"]
  993 -> 318 [style=dashed label="unary-operator"]
  993 -> 319 [style=dashed label="unqualified-id"]
  993 -> 320 [style=dashed label="user-defined-character-literal"]
  993 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  993 -> 322 [style=dashed label="user-defined-integer-literal"]
  993 -> 323 [style=dashed label="user-defined-literal"]
  993 -> 324 [style=dashed label="user-defined-string-literal"]
  993 -> 325 [style=dashed label="yield-expression"]
  993 -> "993R19" [style=solid]
 "993R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  993 -> "993R284" [label="[\";\"]", style=solid]
 "993R284" [label="R284", fillcolor=3, shape=diamond, style=filled]
  993 -> "993R469d" [label="[IDENTIFIER]", style=solid]
 "993R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  993 -> "993R722d" [label="[\"decltype\"]", style=solid]
 "993R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  993 -> "993R722" [label="[\"auto\"]", style=solid]
 "993R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  994 [label="State 994\n\l212 declaration-statement: block-declaration •\l"]
  994 -> "994R212" [style=solid]
 "994R212" [label="R212", fillcolor=3, shape=diamond, style=filled]
  995 [label="State 995\n\l682 statement: declaration-statement •\l"]
  995 -> "995R682" [style=solid]
 "995R682" [label="R682", fillcolor=3, shape=diamond, style=filled]
  996 [label="State 996\n\l676 statement: labeled-statement •\l"]
  996 -> "996R676" [style=solid]
 "996R676" [label="R676", fillcolor=3, shape=diamond, style=filled]
  997 [label="State 997\n\l684 statement-seq: statement •\l"]
  997 -> "997R684" [style=solid]
 "997R684" [label="R684", fillcolor=3, shape=diamond, style=filled]
  998 [label="State 998\n\l685 statement-seq: statement-seq • statement\l687 statement-seq-opt: statement-seq •\l"]
  998 -> 1 [style=solid label="\"constexpr\""]
  998 -> 150 [style=solid label="\"extern\""]
  998 -> 4 [style=solid label="IDENTIFIER"]
  998 -> 151 [style=solid label="\"inline\""]
  998 -> 6 [style=solid label="\"::\""]
  998 -> 8 [style=solid label="\"typename\""]
  998 -> 9 [style=solid label="\"virtual\""]
  998 -> 10 [style=solid label="\"using\""]
  998 -> 12 [style=solid label="\"class\""]
  998 -> 13 [style=solid label="\"struct\""]
  998 -> 14 [style=solid label="\"union\""]
  998 -> 15 [style=solid label="\"const\""]
  998 -> 16 [style=solid label="\"volatile\""]
  998 -> 17 [style=solid label="\"friend\""]
  998 -> 18 [style=solid label="\"typedef\""]
  998 -> 19 [style=solid label="\"consteval\""]
  998 -> 20 [style=solid label="\"constinit\""]
  998 -> 21 [style=solid label="\"decltype\""]
  998 -> 22 [style=solid label="\"enum\""]
  998 -> 23 [style=solid label="\"explicit\""]
  998 -> 991 [style=solid label="\"namespace\""]
  998 -> 27 [style=solid label="\"char\""]
  998 -> 28 [style=solid label="\"char8_t\""]
  998 -> 29 [style=solid label="\"char16_t\""]
  998 -> 30 [style=solid label="\"char32_t\""]
  998 -> 31 [style=solid label="\"wchar_t\""]
  998 -> 32 [style=solid label="\"bool\""]
  998 -> 33 [style=solid label="\"short\""]
  998 -> 34 [style=solid label="\"int\""]
  998 -> 35 [style=solid label="\"long\""]
  998 -> 36 [style=solid label="\"signed\""]
  998 -> 37 [style=solid label="\"unsigned\""]
  998 -> 38 [style=solid label="\"float\""]
  998 -> 39 [style=solid label="\"double\""]
  998 -> 40 [style=solid label="\"void\""]
  998 -> 41 [style=solid label="\"static_assert\""]
  998 -> 42 [style=solid label="\"static\""]
  998 -> 43 [style=solid label="\"thread_local\""]
  998 -> 44 [style=solid label="\"mutable\""]
  998 -> 47 [style=dashed label="alias-declaration"]
  998 -> 48 [style=dashed label="asm-declaration"]
  998 -> 992 [style=dashed label="attribute-specifier-seq"]
  998 -> 993 [style=dashed label="attribute-specifier-seq-opt"]
  998 -> 994 [style=dashed label="block-declaration"]
  998 -> 53 [style=dashed label="class-head"]
  998 -> 54 [style=dashed label="class-key"]
  998 -> 55 [style=dashed label="class-name"]
  998 -> 56 [style=dashed label="class-specifier"]
  998 -> 57 [style=dashed label="cv-qualifier"]
  998 -> 58 [style=dashed label="decl-specifier"]
  998 -> 59 [style=dashed label="decl-specifier-seq"]
  998 -> 995 [style=dashed label="declaration-statement"]
  998 -> 63 [style=dashed label="decltype-specifier"]
  998 -> 65 [style=dashed label="defining-type-specifier"]
  998 -> 66 [style=dashed label="elaborated-enum-specifier"]
  998 -> 67 [style=dashed label="elaborated-type-specifier"]
  998 -> 69 [style=dashed label="enum-head"]
  998 -> 70 [style=dashed label="enum-key"]
  998 -> 71 [style=dashed label="enum-name"]
  998 -> 72 [style=dashed label="enum-specifier"]
  998 -> 155 [style=dashed label="explicit-specifier"]
  998 -> 79 [style=dashed label="function-specifier"]
  998 -> 996 [style=dashed label="labeled-statement"]
  998 -> 85 [style=dashed label="namespace-alias"]
  998 -> 86 [style=dashed label="namespace-alias-definition"]
  998 -> 88 [style=dashed label="namespace-name"]
  998 -> 89 [style=dashed label="nested-name-specifier"]
  998 -> 90 [style=dashed label="nested-name-specifier-opt"]
  998 -> 93 [style=dashed label="opaque-enum-declaration"]
  998 -> 94 [style=dashed label="placeholder-type-specifier"]
  998 -> 95 [style=dashed label="simple-declaration"]
  998 -> 96 [style=dashed label="simple-template-id"]
  998 -> 97 [style=dashed label="simple-type-specifier"]
  998 -> 1136 [style=dashed label="statement"]
  998 -> 98 [style=dashed label="static_assert-declaration"]
  998 -> 99 [style=dashed label="storage-class-specifier"]
  998 -> 102 [style=dashed label="template-name"]
  998 -> 104 [style=dashed label="type-constraint"]
  998 -> 105 [style=dashed label="type-constraint-opt"]
  998 -> 106 [style=dashed label="type-name"]
  998 -> 107 [style=dashed label="type-specifier"]
  998 -> 108 [style=dashed label="typedef-name"]
  998 -> 109 [style=dashed label="typename-specifier"]
  998 -> 111 [style=dashed label="using-declaration"]
  998 -> 112 [style=dashed label="using-directive"]
  998 -> 113 [style=dashed label="using-enum-declaration"]
  998 -> "998R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "998R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  998 -> "998R83" [style=solid]
 "998R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  998 -> "998R469d" [label="[IDENTIFIER]", style=solid]
 "998R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  998 -> "998R687" [label="[\"}\"]", style=solid]
 "998R687" [label="R687", fillcolor=3, shape=diamond, style=filled]
  998 -> "998R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "998R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  999 [label="State 999\n\l151 compound-statement: \"{\" statement-seq-opt • \"}\"\l"]
  999 -> 1137 [style=solid label="\"}\""]
  1000 [label="State 1000\n\l707 template-id: literal-operator-id \"<\" template-argument-list-opt \">\" •\l"]
  1000 -> "1000R707" [style=solid]
 "1000R707" [label="R707", fillcolor=3, shape=diamond, style=filled]
  1001 [label="State 1001\n\l159 conditional-expression: logical-or-expression \"?\" expression \":\" • assignment-expression\l"]
  1001 -> 238 [style=solid label="IDENTIFIER"]
  1001 -> 239 [style=solid label="\"noexcept\""]
  1001 -> 240 [style=solid label="\"!\""]
  1001 -> 241 [style=solid label="\"::\""]
  1001 -> 242 [style=solid label="\"this\""]
  1001 -> 8 [style=solid label="\"typename\""]
  1001 -> 243 [style=solid label="\"+\""]
  1001 -> 244 [style=solid label="\"-\""]
  1001 -> 245 [style=solid label="\"(\""]
  1001 -> 246 [style=solid label="\"&\""]
  1001 -> 247 [style=solid label="\"[\""]
  1001 -> 248 [style=solid label="\"co_await\""]
  1001 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1001 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1001 -> 251 [style=solid label="\"operator\""]
  1001 -> 21 [style=solid label="\"decltype\""]
  1001 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1001 -> 253 [style=solid label="\"*\""]
  1001 -> 254 [style=solid label="INTEGER_LITERAL"]
  1001 -> 255 [style=solid label="\"requires\""]
  1001 -> 256 [style=solid label="\"~\""]
  1001 -> 257 [style=solid label="\"++\""]
  1001 -> 258 [style=solid label="\"--\""]
  1001 -> 259 [style=solid label="POINTER_LITERAL"]
  1001 -> 260 [style=solid label="\"dynamic_cast\""]
  1001 -> 261 [style=solid label="\"static_cast\""]
  1001 -> 262 [style=solid label="\"reinterpret_cast\""]
  1001 -> 263 [style=solid label="\"const_cast\""]
  1001 -> 264 [style=solid label="\"typeid\""]
  1001 -> 27 [style=solid label="\"char\""]
  1001 -> 28 [style=solid label="\"char8_t\""]
  1001 -> 29 [style=solid label="\"char16_t\""]
  1001 -> 30 [style=solid label="\"char32_t\""]
  1001 -> 31 [style=solid label="\"wchar_t\""]
  1001 -> 32 [style=solid label="\"bool\""]
  1001 -> 33 [style=solid label="\"short\""]
  1001 -> 34 [style=solid label="\"int\""]
  1001 -> 35 [style=solid label="\"long\""]
  1001 -> 36 [style=solid label="\"signed\""]
  1001 -> 37 [style=solid label="\"unsigned\""]
  1001 -> 38 [style=solid label="\"float\""]
  1001 -> 39 [style=solid label="\"double\""]
  1001 -> 40 [style=solid label="\"void\""]
  1001 -> 118 [style=solid label="STRING_LITERAL"]
  1001 -> 265 [style=solid label="\"throw\""]
  1001 -> 266 [style=solid label="\"sizeof\""]
  1001 -> 267 [style=solid label="\"alignof\""]
  1001 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1001 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1001 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1001 -> 271 [style=solid label="\"co_yield\""]
  1001 -> 272 [style=dashed label="SCOPE-opt"]
  1001 -> 273 [style=dashed label="additive-expression"]
  1001 -> 274 [style=dashed label="and-expression"]
  1001 -> 1138 [style=dashed label="assignment-expression"]
  1001 -> 276 [style=dashed label="await-expression"]
  1001 -> 277 [style=dashed label="boolean-literal"]
  1001 -> 278 [style=dashed label="cast-expression"]
  1001 -> 279 [style=dashed label="character-literal"]
  1001 -> 55 [style=dashed label="class-name"]
  1001 -> 280 [style=dashed label="compare-expression"]
  1001 -> 281 [style=dashed label="conditional-expression"]
  1001 -> 282 [style=dashed label="conversion-function-id"]
  1001 -> 63 [style=dashed label="decltype-specifier"]
  1001 -> 283 [style=dashed label="delete-expression"]
  1001 -> 71 [style=dashed label="enum-name"]
  1001 -> 284 [style=dashed label="equality-expression"]
  1001 -> 285 [style=dashed label="exclusive-or-expression"]
  1001 -> 287 [style=dashed label="floating-point-literal"]
  1001 -> 288 [style=dashed label="fold-expression"]
  1001 -> 289 [style=dashed label="id-expression"]
  1001 -> 290 [style=dashed label="inclusive-or-expression"]
  1001 -> 291 [style=dashed label="integer-literal"]
  1001 -> 292 [style=dashed label="lambda-expression"]
  1001 -> 293 [style=dashed label="lambda-introducer"]
  1001 -> 294 [style=dashed label="literal"]
  1001 -> 295 [style=dashed label="literal-operator-id"]
  1001 -> 296 [style=dashed label="logical-and-expression"]
  1001 -> 297 [style=dashed label="logical-or-expression"]
  1001 -> 298 [style=dashed label="multiplicative-expression"]
  1001 -> 85 [style=dashed label="namespace-alias"]
  1001 -> 88 [style=dashed label="namespace-name"]
  1001 -> 299 [style=dashed label="nested-name-specifier"]
  1001 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1001 -> 300 [style=dashed label="new-expression"]
  1001 -> 301 [style=dashed label="noexcept-expression"]
  1001 -> 302 [style=dashed label="operator-function-id"]
  1001 -> 94 [style=dashed label="placeholder-type-specifier"]
  1001 -> 303 [style=dashed label="pm-expression"]
  1001 -> 304 [style=dashed label="pointer-literal"]
  1001 -> 305 [style=dashed label="postfix-expression"]
  1001 -> 306 [style=dashed label="primary-expression"]
  1001 -> 307 [style=dashed label="qualified-id"]
  1001 -> 308 [style=dashed label="relational-expression"]
  1001 -> 309 [style=dashed label="requires-expression"]
  1001 -> 310 [style=dashed label="shift-expression"]
  1001 -> 311 [style=dashed label="simple-template-id"]
  1001 -> 312 [style=dashed label="simple-type-specifier"]
  1001 -> 313 [style=dashed label="string-literal"]
  1001 -> 314 [style=dashed label="template-id"]
  1001 -> 102 [style=dashed label="template-name"]
  1001 -> 315 [style=dashed label="throw-expression"]
  1001 -> 104 [style=dashed label="type-constraint"]
  1001 -> 105 [style=dashed label="type-constraint-opt"]
  1001 -> 106 [style=dashed label="type-name"]
  1001 -> 108 [style=dashed label="typedef-name"]
  1001 -> 316 [style=dashed label="typename-specifier"]
  1001 -> 317 [style=dashed label="unary-expression"]
  1001 -> 318 [style=dashed label="unary-operator"]
  1001 -> 319 [style=dashed label="unqualified-id"]
  1001 -> 320 [style=dashed label="user-defined-character-literal"]
  1001 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1001 -> 322 [style=dashed label="user-defined-integer-literal"]
  1001 -> 323 [style=dashed label="user-defined-literal"]
  1001 -> 324 [style=dashed label="user-defined-string-literal"]
  1001 -> 325 [style=dashed label="yield-expression"]
  1001 -> "1001R19" [style=solid]
 "1001R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1001 -> "1001R469d" [label="[IDENTIFIER]", style=solid]
 "1001R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1001 -> "1001R722d" [label="[\"decltype\"]", style=solid]
 "1001R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1001 -> "1001R722" [label="[\"auto\"]", style=solid]
 "1001R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1002 [label="State 1002\n\l706 template-id: operator-function-id \"<\" template-argument-list-opt \">\" •\l"]
  1002 -> "1002R706" [style=solid]
 "1002R706" [label="R706", fillcolor=3, shape=diamond, style=filled]
  1003 [label="State 1003\n\l573 postfix-expression: postfix-expression \"(\" expression-list-opt \")\" •\l"]
  1003 -> "1003R573" [style=solid]
 "1003R573" [label="R573", fillcolor=3, shape=diamond, style=filled]
  1004 [label="State 1004\n\l572 postfix-expression: postfix-expression \"[\" expression-list-opt \"]\" •\l"]
  1004 -> "1004R572" [style=solid]
 "1004R572" [label="R572", fillcolor=3, shape=diamond, style=filled]
  1005 [label="State 1005\n\l579 postfix-expression: postfix-expression \"->\" TEMPLATE-opt id-expression •\l"]
  1005 -> "1005R579" [style=solid]
 "1005R579" [label="R579", fillcolor=3, shape=diamond, style=filled]
  1006 [label="State 1006\n\l578 postfix-expression: postfix-expression \".\" TEMPLATE-opt id-expression •\l"]
  1006 -> "1006R578" [style=solid]
 "1006R578" [label="R578", fillcolor=3, shape=diamond, style=filled]
  1007 [label="State 1007\n\l574 postfix-expression: simple-type-specifier \"(\" expression-list-opt \")\" •\l"]
  1007 -> "1007R574" [style=solid]
 "1007R574" [label="R574", fillcolor=3, shape=diamond, style=filled]
  1008 [label="State 1008\n\l575 postfix-expression: typename-specifier \"(\" expression-list-opt \")\" •\l"]
  1008 -> "1008R575" [style=solid]
 "1008R575" [label="R575", fillcolor=3, shape=diamond, style=filled]
  1009 [label="State 1009\n\l471 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" INLINE-opt IDENTIFIER \"{\" • namespace-body \"}\"\l"]
  1009 -> 1 [style=solid label="\"constexpr\""]
  1009 -> 2 [style=solid label="\"export\""]
  1009 -> 3 [style=solid label="\"extern\""]
  1009 -> 4 [style=solid label="IDENTIFIER"]
  1009 -> 5 [style=solid label="\"inline\""]
  1009 -> 6 [style=solid label="\"::\""]
  1009 -> 7 [style=solid label="\"template\""]
  1009 -> 8 [style=solid label="\"typename\""]
  1009 -> 9 [style=solid label="\"virtual\""]
  1009 -> 10 [style=solid label="\"using\""]
  1009 -> 11 [style=solid label="\";\""]
  1009 -> 12 [style=solid label="\"class\""]
  1009 -> 13 [style=solid label="\"struct\""]
  1009 -> 14 [style=solid label="\"union\""]
  1009 -> 15 [style=solid label="\"const\""]
  1009 -> 16 [style=solid label="\"volatile\""]
  1009 -> 17 [style=solid label="\"friend\""]
  1009 -> 18 [style=solid label="\"typedef\""]
  1009 -> 19 [style=solid label="\"consteval\""]
  1009 -> 20 [style=solid label="\"constinit\""]
  1009 -> 21 [style=solid label="\"decltype\""]
  1009 -> 22 [style=solid label="\"enum\""]
  1009 -> 23 [style=solid label="\"explicit\""]
  1009 -> 25 [style=solid label="\"import\""]
  1009 -> 26 [style=solid label="\"namespace\""]
  1009 -> 27 [style=solid label="\"char\""]
  1009 -> 28 [style=solid label="\"char8_t\""]
  1009 -> 29 [style=solid label="\"char16_t\""]
  1009 -> 30 [style=solid label="\"char32_t\""]
  1009 -> 31 [style=solid label="\"wchar_t\""]
  1009 -> 32 [style=solid label="\"bool\""]
  1009 -> 33 [style=solid label="\"short\""]
  1009 -> 34 [style=solid label="\"int\""]
  1009 -> 35 [style=solid label="\"long\""]
  1009 -> 36 [style=solid label="\"signed\""]
  1009 -> 37 [style=solid label="\"unsigned\""]
  1009 -> 38 [style=solid label="\"float\""]
  1009 -> 39 [style=solid label="\"double\""]
  1009 -> 40 [style=solid label="\"void\""]
  1009 -> 41 [style=solid label="\"static_assert\""]
  1009 -> 42 [style=solid label="\"static\""]
  1009 -> 43 [style=solid label="\"thread_local\""]
  1009 -> 44 [style=solid label="\"mutable\""]
  1009 -> 45 [style=dashed label="EXTERN-opt"]
  1009 -> 46 [style=dashed label="INLINE-opt"]
  1009 -> 47 [style=dashed label="alias-declaration"]
  1009 -> 48 [style=dashed label="asm-declaration"]
  1009 -> 49 [style=dashed label="attribute-declaration"]
  1009 -> 50 [style=dashed label="attribute-specifier-seq"]
  1009 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  1009 -> 52 [style=dashed label="block-declaration"]
  1009 -> 53 [style=dashed label="class-head"]
  1009 -> 54 [style=dashed label="class-key"]
  1009 -> 55 [style=dashed label="class-name"]
  1009 -> 56 [style=dashed label="class-specifier"]
  1009 -> 57 [style=dashed label="cv-qualifier"]
  1009 -> 58 [style=dashed label="decl-specifier"]
  1009 -> 59 [style=dashed label="decl-specifier-seq"]
  1009 -> 60 [style=dashed label="declaration"]
  1009 -> 61 [style=dashed label="declaration-seq"]
  1009 -> 849 [style=dashed label="declaration-seq-opt"]
  1009 -> 63 [style=dashed label="decltype-specifier"]
  1009 -> 64 [style=dashed label="deduction-guide"]
  1009 -> 65 [style=dashed label="defining-type-specifier"]
  1009 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1009 -> 67 [style=dashed label="elaborated-type-specifier"]
  1009 -> 68 [style=dashed label="empty-declaration"]
  1009 -> 69 [style=dashed label="enum-head"]
  1009 -> 70 [style=dashed label="enum-key"]
  1009 -> 71 [style=dashed label="enum-name"]
  1009 -> 72 [style=dashed label="enum-specifier"]
  1009 -> 73 [style=dashed label="explicit-instantiation"]
  1009 -> 74 [style=dashed label="explicit-specialization"]
  1009 -> 75 [style=dashed label="explicit-specifier"]
  1009 -> 76 [style=dashed label="explicit-specifier-opt"]
  1009 -> 77 [style=dashed label="export-declaration"]
  1009 -> 78 [style=dashed label="function-definition"]
  1009 -> 79 [style=dashed label="function-specifier"]
  1009 -> 82 [style=dashed label="linkage-specification"]
  1009 -> 83 [style=dashed label="module-import-declaration"]
  1009 -> 84 [style=dashed label="named-namespace-definition"]
  1009 -> 85 [style=dashed label="namespace-alias"]
  1009 -> 86 [style=dashed label="namespace-alias-definition"]
  1009 -> 1139 [style=dashed label="namespace-body"]
  1009 -> 87 [style=dashed label="namespace-definition"]
  1009 -> 88 [style=dashed label="namespace-name"]
  1009 -> 89 [style=dashed label="nested-name-specifier"]
  1009 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1009 -> 91 [style=dashed label="nested-namespace-definition"]
  1009 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  1009 -> 93 [style=dashed label="opaque-enum-declaration"]
  1009 -> 94 [style=dashed label="placeholder-type-specifier"]
  1009 -> 95 [style=dashed label="simple-declaration"]
  1009 -> 96 [style=dashed label="simple-template-id"]
  1009 -> 97 [style=dashed label="simple-type-specifier"]
  1009 -> 98 [style=dashed label="static_assert-declaration"]
  1009 -> 99 [style=dashed label="storage-class-specifier"]
  1009 -> 100 [style=dashed label="template-declaration"]
  1009 -> 101 [style=dashed label="template-head"]
  1009 -> 102 [style=dashed label="template-name"]
  1009 -> 104 [style=dashed label="type-constraint"]
  1009 -> 105 [style=dashed label="type-constraint-opt"]
  1009 -> 106 [style=dashed label="type-name"]
  1009 -> 107 [style=dashed label="type-specifier"]
  1009 -> 108 [style=dashed label="typedef-name"]
  1009 -> 109 [style=dashed label="typename-specifier"]
  1009 -> 110 [style=dashed label="unnamed-namespace-definition"]
  1009 -> 111 [style=dashed label="using-declaration"]
  1009 -> 112 [style=dashed label="using-directive"]
  1009 -> 113 [style=dashed label="using-enum-declaration"]
  1009 -> "1009R9d" [label="[\"template\"]", style=solid]
 "1009R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  1009 -> "1009R13d" [label="[\"namespace\"]", style=solid]
 "1009R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  1009 -> "1009R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1009R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1009 -> "1009R83" [label="[]", style=solid]
 "1009R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1009 -> "1009R210" [label="[\"}\"]", style=solid]
 "1009R210" [label="R210", fillcolor=3, shape=diamond, style=filled]
  1009 -> "1009R270d" [label="[IDENTIFIER]", style=solid]
 "1009R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  1009 -> "1009R469d" [label="[IDENTIFIER]", style=solid]
 "1009R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1009 -> "1009R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1009R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1010 [label="State 1010\n\l689 static_assert-declaration: \"static_assert\" \"(\" constant-expression \",\" string-literal \")\" • \";\"\l"]
  1010 -> 1140 [style=solid label="\";\""]
  1011 [label="State 1011\n\l454 named-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt IDENTIFIER \"{\" namespace-body • \"}\"\l"]
  1011 -> 1141 [style=solid label="\"}\""]
  1012 [label="State 1012\n\l766 unnamed-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt \"{\" namespace-body \"}\" •\l"]
  1012 -> "1012R766" [style=solid]
 "1012R766" [label="R766", fillcolor=3, shape=diamond, style=filled]
  1013 [label="State 1013\n\l786 using-directive: attribute-specifier-seq-opt \"using\" \"namespace\" nested-name-specifier-opt namespace-name \";\" •\l"]
  1013 -> "1013R786" [style=solid]
 "1013R786" [label="R786", fillcolor=3, shape=diamond, style=filled]
  1014 [label="State 1014\n\l 46 alignment-specifier: \"alignas\" \"(\" constant-expression ELLIPSIS-opt \")\" •\l"]
  1014 -> "1014R46" [style=solid]
 "1014R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  1015 [label="State 1015\n\l 45 alignment-specifier: \"alignas\" \"(\" type-id ELLIPSIS-opt \")\" •\l"]
  1015 -> "1015R45" [style=solid]
 "1015R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  1016 [label="State 1016\n\l 49 asm-declaration: attribute-specifier-seq-opt \"asm\" \"(\" string-literal \")\" \";\" •\l"]
  1016 -> "1016R49" [style=solid]
 "1016R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
  1017 [label="State 1017\n\l 87 attribute-using-prefix: \"using\" attribute-namespace \":\" •\l"]
  1017 -> "1017R87" [style=solid]
 "1017R87" [label="R87", fillcolor=3, shape=diamond, style=filled]
  1018 [label="State 1018\n\l 74 attribute-list: attribute \"...\" •\l"]
  1018 -> "1018R74" [style=solid]
 "1018R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  1019 [label="State 1019\n\l 73 attribute-list: attribute-list \",\" • attribute-opt\l 75               | attribute-list \",\" • attribute \"...\"\l"]
  1019 -> 857 [style=solid label="IDENTIFIER"]
  1019 -> 1142 [style=dashed label="attribute"]
  1019 -> 860 [style=dashed label="attribute-namespace"]
  1019 -> 1143 [style=dashed label="attribute-opt"]
  1019 -> 862 [style=dashed label="attribute-scoped-token"]
  1019 -> 863 [style=dashed label="attribute-token"]
  1019 -> "1019R77" [style=solid]
 "1019R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  1020 [label="State 1020\n\l 80 attribute-specifier: \"[\" \"[\" attribute-using-prefix-opt attribute-list \"]\" • \"]\"\l"]
  1020 -> 1144 [style=solid label="\"]\""]
  1021 [label="State 1021\n\l 79 attribute-scoped-token: attribute-namespace \"::\" • IDENTIFIER\l"]
  1021 -> 1145 [style=solid label="IDENTIFIER"]
  1022 [label="State 1022\n\l 68 attribute-argument-clause: \"(\" • balanced-token-seq-opt \")\"\l"]
  1022 -> 1146 [style=solid label="\"(\""]
  1022 -> 1147 [style=solid label="\"[\""]
  1022 -> 1148 [style=solid label="\"{\""]
  1022 -> 1149 [style=solid label="BALANCED_TOKEN"]
  1022 -> 1150 [style=dashed label="balanced-token"]
  1022 -> 1151 [style=dashed label="balanced-token-seq"]
  1022 -> 1152 [style=dashed label="balanced-token-seq-opt"]
  1022 -> "1022R97" [style=solid]
 "1022R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  1023 [label="State 1023\n\l 70 attribute-argument-clause-opt: attribute-argument-clause •\l"]
  1023 -> "1023R70" [style=solid]
 "1023R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
  1024 [label="State 1024\n\l 67 attribute: attribute-token attribute-argument-clause-opt •\l"]
  1024 -> "1024R67" [style=solid]
 "1024R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
  1025 [label="State 1025\n\l346 identifier-list: identifier-list \",\" • IDENTIFIER\l"]
  1025 -> 1153 [style=solid label="IDENTIFIER"]
  1026 [label="State 1026\n\l654 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" • initializer \";\"\l"]
  1026 -> 396 [style=solid label="\"=\""]
  1026 -> 397 [style=solid label="\"(\""]
  1026 -> 398 [style=solid label="\"{\""]
  1026 -> 400 [style=dashed label="brace-or-equal-initializer"]
  1026 -> 401 [style=dashed label="braced-init-list"]
  1026 -> 1154 [style=dashed label="initializer"]
  1027 [label="State 1027\n\l329 function-body: \"=\" \"delete\" • \";\"\l"]
  1027 -> 1155 [style=solid label="\";\""]
  1028 [label="State 1028\n\l328 function-body: \"=\" \"default\" • \";\"\l"]
  1028 -> 1156 [style=solid label="\";\""]
  1029 [label="State 1029\n\l139 class-name: IDENTIFIER •\l248 enum-name: IDENTIFIER •\l412 mem-initializer-id: IDENTIFIER •\l455 namespace-alias: IDENTIFIER •\l461 namespace-name: IDENTIFIER •\l708 template-name: IDENTIFIER •\l743 typedef-name: IDENTIFIER •\l"]
  1029 -> "1029R139" [label="[\"::\"]", style=solid]
 "1029R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  1029 -> "1029R248d" [label="[\"::\"]", style=solid]
 "1029R248d" [label="R248", fillcolor=5, shape=diamond, style=filled]
  1029 -> "1029R412" [label="[]", style=solid]
 "1029R412" [label="R412", fillcolor=3, shape=diamond, style=filled]
  1029 -> "1029R455d" [label="[\"::\"]", style=solid]
 "1029R455d" [label="R455", fillcolor=5, shape=diamond, style=filled]
  1029 -> "1029R461d" [label="[\"::\"]", style=solid]
 "1029R461d" [label="R461", fillcolor=5, shape=diamond, style=filled]
  1029 -> "1029R708" [label="[\"<\"]", style=solid]
 "1029R708" [label="R708", fillcolor=3, shape=diamond, style=filled]
  1029 -> "1029R743d" [label="[\"::\"]", style=solid]
 "1029R743d" [label="R743", fillcolor=5, shape=diamond, style=filled]
  1030 [label="State 1030\n\l411 mem-initializer-id: class-or-decltype •\l"]
  1030 -> "1030R411" [style=solid]
 "1030R411" [label="R411", fillcolor=3, shape=diamond, style=filled]
  1031 [label="State 1031\n\l413 mem-initializer-list: mem-initializer • ELLIPSIS-opt\l"]
  1031 -> 156 [style=solid label="\"...\""]
  1031 -> 1157 [style=dashed label="ELLIPSIS-opt"]
  1031 -> "1031R5" [style=solid]
 "1031R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1032 [label="State 1032\n\l409 mem-initializer: mem-initializer-id • \"(\" expression-list-opt \")\"\l410                | mem-initializer-id • braced-init-list\l"]
  1032 -> 1158 [style=solid label="\"(\""]
  1032 -> 398 [style=solid label="\"{\""]
  1032 -> 1159 [style=dashed label="braced-init-list"]
  1033 [label="State 1033\n\l174 ctor-initializer: \":\" mem-initializer-list •\l414 mem-initializer-list: mem-initializer-list • \",\" mem-initializer ELLIPSIS-opt\l"]
  1033 -> 1160 [style=solid label="\",\""]
  1033 -> "1033R174" [style=solid]
 "1033R174" [label="R174", fillcolor=3, shape=diamond, style=filled]
  1034 [label="State 1034\n\l334 function-try-block: \"try\" ctor-initializer-opt • compound-statement handler-seq\l"]
  1034 -> 813 [style=solid label="\"{\""]
  1034 -> 1161 [style=dashed label="compound-statement"]
  1035 [label="State 1035\n\l326 function-body: ctor-initializer-opt compound-statement •\l"]
  1035 -> "1035R326" [style=solid]
 "1035R326" [label="R326", fillcolor=3, shape=diamond, style=filled]
  1036 [label="State 1036\n\l564 parameters-and-qualifiers: \"(\" parameter-declaration-clause \")\" cv-qualifier-seq-opt • ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt\l"]
  1036 -> 357 [style=solid label="\"&\""]
  1036 -> 358 [style=solid label="\"&&\""]
  1036 -> 359 [style=dashed label="ref-qualifier"]
  1036 -> 1162 [style=dashed label="ref-qualifier-opt"]
  1036 -> "1036R616" [style=solid]
 "1036R616" [label="R616", fillcolor=3, shape=diamond, style=filled]
  1037 [label="State 1037\n\l559 parameter-declaration-clause: parameter-declaration-list \",\" \"...\" •\l"]
  1037 -> "1037R559" [style=solid]
 "1037R559" [label="R559", fillcolor=3, shape=diamond, style=filled]
  1038 [label="State 1038\n\l561 parameter-declaration-list: parameter-declaration-list \",\" parameter-declaration •\l"]
  1038 -> "1038R561" [style=solid]
 "1038R561" [label="R561", fillcolor=3, shape=diamond, style=filled]
  1039 [label="State 1039\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l503 noptr-declarator: noptr-declarator \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt •\l"]
  1039 -> 158 [style=solid label="\"alignas\""]
  1039 -> 162 [style=solid label="\"[\""]
  1039 -> 166 [style=dashed label="alignment-specifier"]
  1039 -> 167 [style=dashed label="attribute-specifier"]
  1039 -> "1039R503d" [label="[\"[\"]", style=solid]
 "1039R503d" [label="R503", fillcolor=5, shape=diamond, style=filled]
  1039 -> "1039R503" [style=solid]
 "1039R503" [label="R503", fillcolor=3, shape=diamond, style=filled]
  1040 [label="State 1040\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l429 member-declarator: IDENTIFIER-opt attribute-specifier-seq-opt • \":\" constant-expression brace-or-equal-initializer-opt\l"]
  1040 -> 158 [style=solid label="\"alignas\""]
  1040 -> 162 [style=solid label="\"[\""]
  1040 -> 1163 [style=solid label="\":\""]
  1040 -> 166 [style=dashed label="alignment-specifier"]
  1040 -> 167 [style=dashed label="attribute-specifier"]
  1041 [label="State 1041\n\l120 brace-or-equal-initializer-opt: brace-or-equal-initializer •\l"]
  1041 -> "1041R120" [style=solid]
 "1041R120" [label="R120", fillcolor=3, shape=diamond, style=filled]
  1042 [label="State 1042\n\l428 member-declarator: declarator brace-or-equal-initializer-opt •\l"]
  1042 -> "1042R428" [style=solid]
 "1042R428" [label="R428", fillcolor=3, shape=diamond, style=filled]
  1043 [label="State 1043\n\l331 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator requires-clause • function-body\l427 member-declarator: declarator requires-clause •\l"]
  1043 -> 867 [style=solid label="\"=\""]
  1043 -> 868 [style=solid label="\":\""]
  1043 -> 869 [style=solid label="\"try\""]
  1043 -> 870 [style=dashed label="ctor-initializer"]
  1043 -> 871 [style=dashed label="ctor-initializer-opt"]
  1043 -> 872 [style=dashed label="function-body"]
  1043 -> 873 [style=dashed label="function-try-block"]
  1043 -> "1043R175" [label="[\"{\"]", style=solid]
 "1043R175" [label="R175", fillcolor=3, shape=diamond, style=filled]
  1043 -> "1043R427" [style=solid]
 "1043R427" [label="R427", fillcolor=3, shape=diamond, style=filled]
  1044 [label="State 1044\n\l330 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator virt-specifier-seq-opt • function-body\l426 member-declarator: declarator virt-specifier-seq-opt • pure-specifier-opt\l"]
  1044 -> 1164 [style=solid label="\"=\""]
  1044 -> 868 [style=solid label="\":\""]
  1044 -> 869 [style=solid label="\"try\""]
  1044 -> 870 [style=dashed label="ctor-initializer"]
  1044 -> 871 [style=dashed label="ctor-initializer-opt"]
  1044 -> 875 [style=dashed label="function-body"]
  1044 -> 873 [style=dashed label="function-try-block"]
  1044 -> 1165 [style=dashed label="pure-specifier"]
  1044 -> 1166 [style=dashed label="pure-specifier-opt"]
  1044 -> "1044R175" [label="[\"{\"]", style=solid]
 "1044R175" [label="R175", fillcolor=3, shape=diamond, style=filled]
  1044 -> "1044R610" [style=solid]
 "1044R610" [label="R610", fillcolor=3, shape=diamond, style=filled]
  1045 [label="State 1045\n\l431 member-declarator-list: member-declarator-list \",\" • member-declarator\l"]
  1045 -> 156 [style=solid label="\"...\""]
  1045 -> 883 [style=solid label="IDENTIFIER"]
  1045 -> 6 [style=solid label="\"::\""]
  1045 -> 159 [style=solid label="\"(\""]
  1045 -> 160 [style=solid label="\"&\""]
  1045 -> 163 [style=solid label="\"&&\""]
  1045 -> 21 [style=solid label="\"decltype\""]
  1045 -> 164 [style=solid label="\"*\""]
  1045 -> 165 [style=dashed label="ELLIPSIS-opt"]
  1045 -> 884 [style=dashed label="IDENTIFIER-opt"]
  1045 -> 55 [style=dashed label="class-name"]
  1045 -> 1167 [style=dashed label="declarator"]
  1045 -> 171 [style=dashed label="declarator-id"]
  1045 -> 121 [style=dashed label="decltype-specifier"]
  1045 -> 71 [style=dashed label="enum-name"]
  1045 -> 1168 [style=dashed label="member-declarator"]
  1045 -> 85 [style=dashed label="namespace-alias"]
  1045 -> 88 [style=dashed label="namespace-name"]
  1045 -> 187 [style=dashed label="nested-name-specifier"]
  1045 -> 173 [style=dashed label="noptr-declarator"]
  1045 -> 174 [style=dashed label="ptr-declarator"]
  1045 -> 175 [style=dashed label="ptr-operator"]
  1045 -> 96 [style=dashed label="simple-template-id"]
  1045 -> 102 [style=dashed label="template-name"]
  1045 -> 106 [style=dashed label="type-name"]
  1045 -> 108 [style=dashed label="typedef-name"]
  1045 -> "1045R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "1045R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  1045 -> "1045R5" [label="[\"operator\", \"~\"]", style=solid]
 "1045R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1045 -> "1045R11" [style=solid]
 "1045R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  1046 [label="State 1046\n\l415 member-declaration: attribute-specifier-seq-opt decl-specifier-seq-opt member-declarator-list-opt \";\" •\l"]
  1046 -> "1046R415" [style=solid]
 "1046R415" [label="R415", fillcolor=3, shape=diamond, style=filled]
  1047 [label="State 1047\n\l 40 access-specifier-opt: access-specifier •\l"]
  1047 -> "1047R40" [style=solid]
 "1047R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  1048 [label="State 1048\n\l103 base-specifier: attribute-specifier-seq-opt \"virtual\" access-specifier-opt • class-or-decltype\l"]
  1048 -> 4 [style=solid label="IDENTIFIER"]
  1048 -> 6 [style=solid label="\"::\""]
  1048 -> 21 [style=solid label="\"decltype\""]
  1048 -> 55 [style=dashed label="class-name"]
  1048 -> 1169 [style=dashed label="class-or-decltype"]
  1048 -> 893 [style=dashed label="decltype-specifier"]
  1048 -> 71 [style=dashed label="enum-name"]
  1048 -> 85 [style=dashed label="namespace-alias"]
  1048 -> 88 [style=dashed label="namespace-name"]
  1048 -> 894 [style=dashed label="nested-name-specifier"]
  1048 -> 895 [style=dashed label="nested-name-specifier-opt"]
  1048 -> 96 [style=dashed label="simple-template-id"]
  1048 -> 102 [style=dashed label="template-name"]
  1048 -> 106 [style=dashed label="type-name"]
  1048 -> 108 [style=dashed label="typedef-name"]
  1048 -> "1048R469d" [label="[IDENTIFIER]", style=solid]
 "1048R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1049 [label="State 1049\n\l 28 VIRTUAL-opt: \"virtual\" •\l"]
  1049 -> "1049R28" [style=solid]
 "1049R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  1050 [label="State 1050\n\l104 base-specifier: attribute-specifier-seq-opt access-specifier VIRTUAL-opt • class-or-decltype\l"]
  1050 -> 4 [style=solid label="IDENTIFIER"]
  1050 -> 6 [style=solid label="\"::\""]
  1050 -> 21 [style=solid label="\"decltype\""]
  1050 -> 55 [style=dashed label="class-name"]
  1050 -> 1170 [style=dashed label="class-or-decltype"]
  1050 -> 893 [style=dashed label="decltype-specifier"]
  1050 -> 71 [style=dashed label="enum-name"]
  1050 -> 85 [style=dashed label="namespace-alias"]
  1050 -> 88 [style=dashed label="namespace-name"]
  1050 -> 894 [style=dashed label="nested-name-specifier"]
  1050 -> 895 [style=dashed label="nested-name-specifier-opt"]
  1050 -> 96 [style=dashed label="simple-template-id"]
  1050 -> 102 [style=dashed label="template-name"]
  1050 -> 106 [style=dashed label="type-name"]
  1050 -> 108 [style=dashed label="typedef-name"]
  1050 -> "1050R469d" [label="[IDENTIFIER]", style=solid]
 "1050R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1051 [label="State 1051\n\l 22 TEMPLATE-opt: \"template\" •\l142 class-or-decltype: nested-name-specifier \"template\" • simple-template-id\l"]
  1051 -> 192 [style=solid label="IDENTIFIER"]
  1051 -> 1171 [style=dashed label="simple-template-id"]
  1051 -> 102 [style=dashed label="template-name"]
  1051 -> "1051R22d" [label="[IDENTIFIER]", style=solid]
 "1051R22d" [label="R22", fillcolor=5, shape=diamond, style=filled]
  1052 [label="State 1052\n\l141 class-or-decltype: nested-name-specifier-opt type-name •\l"]
  1052 -> "1052R141" [style=solid]
 "1052R141" [label="R141", fillcolor=3, shape=diamond, style=filled]
  1053 [label="State 1053\n\l106 base-specifier-list: base-specifier-list \",\" base-specifier • ELLIPSIS-opt\l"]
  1053 -> 156 [style=solid label="\"...\""]
  1053 -> 1172 [style=dashed label="ELLIPSIS-opt"]
  1053 -> "1053R5" [style=solid]
 "1053R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1054 [label="State 1054\n\l367 initializer-list: initializer-list \",\" initializer-clause • ELLIPSIS-opt\l"]
  1054 -> 156 [style=solid label="\"...\""]
  1054 -> 1173 [style=dashed label="ELLIPSIS-opt"]
  1054 -> "1054R5" [style=solid]
 "1054R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1055 [label="State 1055\n\l228 designated-initializer-list: designated-initializer-list \",\" designated-initializer-clause •\l"]
  1055 -> "1055R228" [style=solid]
 "1055R228" [label="R228", fillcolor=3, shape=diamond, style=filled]
  1056 [label="State 1056\n\l122 braced-init-list: \"{\" designated-initializer-list COMMA-opt \"}\" •\l"]
  1056 -> "1056R122" [style=solid]
 "1056R122" [label="R122", fillcolor=3, shape=diamond, style=filled]
  1057 [label="State 1057\n\l121 braced-init-list: \"{\" initializer-list COMMA-opt \"}\" •\l"]
  1057 -> "1057R121" [style=solid]
 "1057R121" [label="R121", fillcolor=3, shape=diamond, style=filled]
  1058 [label="State 1058\n\l165 constraint-logical-and-expression: constraint-logical-and-expression \"&&\" primary-expression •\l"]
  1058 -> "1058R165" [style=solid]
 "1058R165" [label="R165", fillcolor=3, shape=diamond, style=filled]
  1059 [label="State 1059\n\l165 constraint-logical-and-expression: constraint-logical-and-expression • \"&&\" primary-expression\l167 constraint-logical-or-expression: constraint-logical-or-expression \"||\" constraint-logical-and-expression •\l"]
  1059 -> 908 [style=solid label="\"&&\""]
  1059 -> "1059R167" [style=solid]
 "1059R167" [label="R167", fillcolor=3, shape=diamond, style=filled]
  1060 [label="State 1060\n\l217 deduction-guide: explicit-specifier-opt template-name \"(\" parameter-declaration-clause \")\" \"->\" • simple-template-id \";\"\l"]
  1060 -> 192 [style=solid label="IDENTIFIER"]
  1060 -> 1174 [style=dashed label="simple-template-id"]
  1060 -> 102 [style=dashed label="template-name"]
  1061 [label="State 1061\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l438 module-declaration: EXPORT-opt \"module\" module-name module-partition-opt attribute-specifier-seq-opt • \";\"\l"]
  1061 -> 1175 [style=solid label="\";\""]
  1061 -> 158 [style=solid label="\"alignas\""]
  1061 -> 162 [style=solid label="\"[\""]
  1061 -> 166 [style=dashed label="alignment-specifier"]
  1061 -> 167 [style=dashed label="attribute-specifier"]
  1062 [label="State 1062\n\l596 private-module-fragment: \"module\" \":\" \"private\" • \";\" declaration-seq-opt\l"]
  1062 -> 1176 [style=solid label="\";\""]
  1063 [label="State 1063\n\l152 concept-definition: \"concept\" concept-name \"=\" constraint-expression \";\" •\l"]
  1063 -> "1063R152" [style=solid]
 "1063R152" [label="R152", fillcolor=3, shape=diamond, style=filled]
  1064 [label="State 1064\n\l231 elaborated-type-specifier: class-key attribute-specifier-seq-opt nested-name-specifier-opt IDENTIFIER •\l"]
  1064 -> "1064R231" [style=solid]
 "1064R231" [label="R231", fillcolor=3, shape=diamond, style=filled]
  1065 [label="State 1065\n\l699 template-argument-list: template-argument-list \",\" template-argument ELLIPSIS-opt •\l"]
  1065 -> "1065R699" [style=solid]
 "1065R699" [label="R699", fillcolor=3, shape=diamond, style=filled]
  1066 [label="State 1066\n\l493 noptr-abstract-declarator: noptr-abstract-declarator-opt parameters-and-qualifiers •\l"]
  1066 -> "1066R493" [style=solid]
 "1066R493" [label="R493", fillcolor=3, shape=diamond, style=filled]
  1067 [label="State 1067\n\l495 noptr-abstract-declarator: \"(\" ptr-abstract-declarator \")\" •\l"]
  1067 -> "1067R495" [style=solid]
 "1067R495" [label="R495", fillcolor=3, shape=diamond, style=filled]
  1068 [label="State 1068\n\l494 noptr-abstract-declarator: noptr-abstract-declarator-opt \"[\" constant-expression-opt • \"]\" attribute-specifier-seq-opt\l"]
  1068 -> 1177 [style=solid label="\"]\""]
  1069 [label="State 1069\n\l 30 abstract-declarator: noptr-abstract-declarator-opt parameters-and-qualifiers trailing-return-type •\l"]
  1069 -> "1069R30" [style=solid]
 "1069R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  1070 [label="State 1070\n\l499 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator \"[\" constant-expression-opt • \"]\" attribute-specifier-seq-opt\l"]
  1070 -> 1178 [style=solid label="\"]\""]
  1071 [label="State 1071\n\l600 ptr-abstract-declarator: ptr-operator • ptr-abstract-declarator-opt\l604 ptr-declarator: ptr-operator • ptr-declarator\l"]
  1071 -> 156 [style=solid label="\"...\""]
  1071 -> 4 [style=solid label="IDENTIFIER"]
  1071 -> 6 [style=solid label="\"::\""]
  1071 -> 936 [style=solid label="\"(\""]
  1071 -> 160 [style=solid label="\"&\""]
  1071 -> 163 [style=solid label="\"&&\""]
  1071 -> 21 [style=solid label="\"decltype\""]
  1071 -> 164 [style=solid label="\"*\""]
  1071 -> 165 [style=dashed label="ELLIPSIS-opt"]
  1071 -> 55 [style=dashed label="class-name"]
  1071 -> 171 [style=dashed label="declarator-id"]
  1071 -> 121 [style=dashed label="decltype-specifier"]
  1071 -> 71 [style=dashed label="enum-name"]
  1071 -> 85 [style=dashed label="namespace-alias"]
  1071 -> 88 [style=dashed label="namespace-name"]
  1071 -> 187 [style=dashed label="nested-name-specifier"]
  1071 -> 707 [style=dashed label="noptr-abstract-declarator"]
  1071 -> 924 [style=dashed label="noptr-abstract-declarator-opt"]
  1071 -> 347 [style=dashed label="noptr-declarator"]
  1071 -> 932 [style=dashed label="ptr-abstract-declarator"]
  1071 -> 933 [style=dashed label="ptr-abstract-declarator-opt"]
  1071 -> 368 [style=dashed label="ptr-declarator"]
  1071 -> 1071 [style=dashed label="ptr-operator"]
  1071 -> 96 [style=dashed label="simple-template-id"]
  1071 -> 102 [style=dashed label="template-name"]
  1071 -> 106 [style=dashed label="type-name"]
  1071 -> 108 [style=dashed label="typedef-name"]
  1071 -> "1071R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "1071R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  1071 -> "1071R5" [style=solid]
 "1071R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1071 -> "1071R496d" [label="[\"(\"]", style=solid]
 "1071R496d" [label="R496", fillcolor=5, shape=diamond, style=filled]
  1071 -> "1071R496" [label="[\"[\"]", style=solid]
 "1071R496" [label="R496", fillcolor=3, shape=diamond, style=filled]
  1071 -> "1071R601" [label="[\")\"]", style=solid]
 "1071R601" [label="R601", fillcolor=3, shape=diamond, style=filled]
  1072 [label="State 1072\n\l557 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq abstract-declarator-opt \"=\" • initializer-clause\l"]
  1072 -> 238 [style=solid label="IDENTIFIER"]
  1072 -> 239 [style=solid label="\"noexcept\""]
  1072 -> 240 [style=solid label="\"!\""]
  1072 -> 241 [style=solid label="\"::\""]
  1072 -> 242 [style=solid label="\"this\""]
  1072 -> 8 [style=solid label="\"typename\""]
  1072 -> 243 [style=solid label="\"+\""]
  1072 -> 244 [style=solid label="\"-\""]
  1072 -> 245 [style=solid label="\"(\""]
  1072 -> 246 [style=solid label="\"&\""]
  1072 -> 247 [style=solid label="\"[\""]
  1072 -> 248 [style=solid label="\"co_await\""]
  1072 -> 398 [style=solid label="\"{\""]
  1072 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1072 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1072 -> 251 [style=solid label="\"operator\""]
  1072 -> 21 [style=solid label="\"decltype\""]
  1072 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1072 -> 253 [style=solid label="\"*\""]
  1072 -> 254 [style=solid label="INTEGER_LITERAL"]
  1072 -> 255 [style=solid label="\"requires\""]
  1072 -> 256 [style=solid label="\"~\""]
  1072 -> 257 [style=solid label="\"++\""]
  1072 -> 258 [style=solid label="\"--\""]
  1072 -> 259 [style=solid label="POINTER_LITERAL"]
  1072 -> 260 [style=solid label="\"dynamic_cast\""]
  1072 -> 261 [style=solid label="\"static_cast\""]
  1072 -> 262 [style=solid label="\"reinterpret_cast\""]
  1072 -> 263 [style=solid label="\"const_cast\""]
  1072 -> 264 [style=solid label="\"typeid\""]
  1072 -> 27 [style=solid label="\"char\""]
  1072 -> 28 [style=solid label="\"char8_t\""]
  1072 -> 29 [style=solid label="\"char16_t\""]
  1072 -> 30 [style=solid label="\"char32_t\""]
  1072 -> 31 [style=solid label="\"wchar_t\""]
  1072 -> 32 [style=solid label="\"bool\""]
  1072 -> 33 [style=solid label="\"short\""]
  1072 -> 34 [style=solid label="\"int\""]
  1072 -> 35 [style=solid label="\"long\""]
  1072 -> 36 [style=solid label="\"signed\""]
  1072 -> 37 [style=solid label="\"unsigned\""]
  1072 -> 38 [style=solid label="\"float\""]
  1072 -> 39 [style=solid label="\"double\""]
  1072 -> 40 [style=solid label="\"void\""]
  1072 -> 118 [style=solid label="STRING_LITERAL"]
  1072 -> 265 [style=solid label="\"throw\""]
  1072 -> 266 [style=solid label="\"sizeof\""]
  1072 -> 267 [style=solid label="\"alignof\""]
  1072 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1072 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1072 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1072 -> 271 [style=solid label="\"co_yield\""]
  1072 -> 272 [style=dashed label="SCOPE-opt"]
  1072 -> 273 [style=dashed label="additive-expression"]
  1072 -> 274 [style=dashed label="and-expression"]
  1072 -> 662 [style=dashed label="assignment-expression"]
  1072 -> 276 [style=dashed label="await-expression"]
  1072 -> 277 [style=dashed label="boolean-literal"]
  1072 -> 663 [style=dashed label="braced-init-list"]
  1072 -> 278 [style=dashed label="cast-expression"]
  1072 -> 279 [style=dashed label="character-literal"]
  1072 -> 55 [style=dashed label="class-name"]
  1072 -> 280 [style=dashed label="compare-expression"]
  1072 -> 281 [style=dashed label="conditional-expression"]
  1072 -> 282 [style=dashed label="conversion-function-id"]
  1072 -> 63 [style=dashed label="decltype-specifier"]
  1072 -> 283 [style=dashed label="delete-expression"]
  1072 -> 71 [style=dashed label="enum-name"]
  1072 -> 284 [style=dashed label="equality-expression"]
  1072 -> 285 [style=dashed label="exclusive-or-expression"]
  1072 -> 287 [style=dashed label="floating-point-literal"]
  1072 -> 288 [style=dashed label="fold-expression"]
  1072 -> 289 [style=dashed label="id-expression"]
  1072 -> 290 [style=dashed label="inclusive-or-expression"]
  1072 -> 1179 [style=dashed label="initializer-clause"]
  1072 -> 291 [style=dashed label="integer-literal"]
  1072 -> 292 [style=dashed label="lambda-expression"]
  1072 -> 293 [style=dashed label="lambda-introducer"]
  1072 -> 294 [style=dashed label="literal"]
  1072 -> 295 [style=dashed label="literal-operator-id"]
  1072 -> 296 [style=dashed label="logical-and-expression"]
  1072 -> 297 [style=dashed label="logical-or-expression"]
  1072 -> 298 [style=dashed label="multiplicative-expression"]
  1072 -> 85 [style=dashed label="namespace-alias"]
  1072 -> 88 [style=dashed label="namespace-name"]
  1072 -> 299 [style=dashed label="nested-name-specifier"]
  1072 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1072 -> 300 [style=dashed label="new-expression"]
  1072 -> 301 [style=dashed label="noexcept-expression"]
  1072 -> 302 [style=dashed label="operator-function-id"]
  1072 -> 94 [style=dashed label="placeholder-type-specifier"]
  1072 -> 303 [style=dashed label="pm-expression"]
  1072 -> 304 [style=dashed label="pointer-literal"]
  1072 -> 305 [style=dashed label="postfix-expression"]
  1072 -> 306 [style=dashed label="primary-expression"]
  1072 -> 307 [style=dashed label="qualified-id"]
  1072 -> 308 [style=dashed label="relational-expression"]
  1072 -> 309 [style=dashed label="requires-expression"]
  1072 -> 310 [style=dashed label="shift-expression"]
  1072 -> 311 [style=dashed label="simple-template-id"]
  1072 -> 312 [style=dashed label="simple-type-specifier"]
  1072 -> 313 [style=dashed label="string-literal"]
  1072 -> 314 [style=dashed label="template-id"]
  1072 -> 102 [style=dashed label="template-name"]
  1072 -> 315 [style=dashed label="throw-expression"]
  1072 -> 104 [style=dashed label="type-constraint"]
  1072 -> 105 [style=dashed label="type-constraint-opt"]
  1072 -> 106 [style=dashed label="type-name"]
  1072 -> 108 [style=dashed label="typedef-name"]
  1072 -> 316 [style=dashed label="typename-specifier"]
  1072 -> 317 [style=dashed label="unary-expression"]
  1072 -> 318 [style=dashed label="unary-operator"]
  1072 -> 319 [style=dashed label="unqualified-id"]
  1072 -> 320 [style=dashed label="user-defined-character-literal"]
  1072 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1072 -> 322 [style=dashed label="user-defined-integer-literal"]
  1072 -> 323 [style=dashed label="user-defined-literal"]
  1072 -> 324 [style=dashed label="user-defined-string-literal"]
  1072 -> 325 [style=dashed label="yield-expression"]
  1072 -> "1072R19" [style=solid]
 "1072R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1072 -> "1072R469d" [label="[IDENTIFIER]", style=solid]
 "1072R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1072 -> "1072R722d" [label="[\"decltype\"]", style=solid]
 "1072R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1072 -> "1072R722" [label="[\"auto\"]", style=solid]
 "1072R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1073 [label="State 1073\n\l555 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq declarator \"=\" • initializer-clause\l"]
  1073 -> 238 [style=solid label="IDENTIFIER"]
  1073 -> 239 [style=solid label="\"noexcept\""]
  1073 -> 240 [style=solid label="\"!\""]
  1073 -> 241 [style=solid label="\"::\""]
  1073 -> 242 [style=solid label="\"this\""]
  1073 -> 8 [style=solid label="\"typename\""]
  1073 -> 243 [style=solid label="\"+\""]
  1073 -> 244 [style=solid label="\"-\""]
  1073 -> 245 [style=solid label="\"(\""]
  1073 -> 246 [style=solid label="\"&\""]
  1073 -> 247 [style=solid label="\"[\""]
  1073 -> 248 [style=solid label="\"co_await\""]
  1073 -> 398 [style=solid label="\"{\""]
  1073 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1073 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1073 -> 251 [style=solid label="\"operator\""]
  1073 -> 21 [style=solid label="\"decltype\""]
  1073 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1073 -> 253 [style=solid label="\"*\""]
  1073 -> 254 [style=solid label="INTEGER_LITERAL"]
  1073 -> 255 [style=solid label="\"requires\""]
  1073 -> 256 [style=solid label="\"~\""]
  1073 -> 257 [style=solid label="\"++\""]
  1073 -> 258 [style=solid label="\"--\""]
  1073 -> 259 [style=solid label="POINTER_LITERAL"]
  1073 -> 260 [style=solid label="\"dynamic_cast\""]
  1073 -> 261 [style=solid label="\"static_cast\""]
  1073 -> 262 [style=solid label="\"reinterpret_cast\""]
  1073 -> 263 [style=solid label="\"const_cast\""]
  1073 -> 264 [style=solid label="\"typeid\""]
  1073 -> 27 [style=solid label="\"char\""]
  1073 -> 28 [style=solid label="\"char8_t\""]
  1073 -> 29 [style=solid label="\"char16_t\""]
  1073 -> 30 [style=solid label="\"char32_t\""]
  1073 -> 31 [style=solid label="\"wchar_t\""]
  1073 -> 32 [style=solid label="\"bool\""]
  1073 -> 33 [style=solid label="\"short\""]
  1073 -> 34 [style=solid label="\"int\""]
  1073 -> 35 [style=solid label="\"long\""]
  1073 -> 36 [style=solid label="\"signed\""]
  1073 -> 37 [style=solid label="\"unsigned\""]
  1073 -> 38 [style=solid label="\"float\""]
  1073 -> 39 [style=solid label="\"double\""]
  1073 -> 40 [style=solid label="\"void\""]
  1073 -> 118 [style=solid label="STRING_LITERAL"]
  1073 -> 265 [style=solid label="\"throw\""]
  1073 -> 266 [style=solid label="\"sizeof\""]
  1073 -> 267 [style=solid label="\"alignof\""]
  1073 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1073 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1073 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1073 -> 271 [style=solid label="\"co_yield\""]
  1073 -> 272 [style=dashed label="SCOPE-opt"]
  1073 -> 273 [style=dashed label="additive-expression"]
  1073 -> 274 [style=dashed label="and-expression"]
  1073 -> 662 [style=dashed label="assignment-expression"]
  1073 -> 276 [style=dashed label="await-expression"]
  1073 -> 277 [style=dashed label="boolean-literal"]
  1073 -> 663 [style=dashed label="braced-init-list"]
  1073 -> 278 [style=dashed label="cast-expression"]
  1073 -> 279 [style=dashed label="character-literal"]
  1073 -> 55 [style=dashed label="class-name"]
  1073 -> 280 [style=dashed label="compare-expression"]
  1073 -> 281 [style=dashed label="conditional-expression"]
  1073 -> 282 [style=dashed label="conversion-function-id"]
  1073 -> 63 [style=dashed label="decltype-specifier"]
  1073 -> 283 [style=dashed label="delete-expression"]
  1073 -> 71 [style=dashed label="enum-name"]
  1073 -> 284 [style=dashed label="equality-expression"]
  1073 -> 285 [style=dashed label="exclusive-or-expression"]
  1073 -> 287 [style=dashed label="floating-point-literal"]
  1073 -> 288 [style=dashed label="fold-expression"]
  1073 -> 289 [style=dashed label="id-expression"]
  1073 -> 290 [style=dashed label="inclusive-or-expression"]
  1073 -> 1180 [style=dashed label="initializer-clause"]
  1073 -> 291 [style=dashed label="integer-literal"]
  1073 -> 292 [style=dashed label="lambda-expression"]
  1073 -> 293 [style=dashed label="lambda-introducer"]
  1073 -> 294 [style=dashed label="literal"]
  1073 -> 295 [style=dashed label="literal-operator-id"]
  1073 -> 296 [style=dashed label="logical-and-expression"]
  1073 -> 297 [style=dashed label="logical-or-expression"]
  1073 -> 298 [style=dashed label="multiplicative-expression"]
  1073 -> 85 [style=dashed label="namespace-alias"]
  1073 -> 88 [style=dashed label="namespace-name"]
  1073 -> 299 [style=dashed label="nested-name-specifier"]
  1073 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1073 -> 300 [style=dashed label="new-expression"]
  1073 -> 301 [style=dashed label="noexcept-expression"]
  1073 -> 302 [style=dashed label="operator-function-id"]
  1073 -> 94 [style=dashed label="placeholder-type-specifier"]
  1073 -> 303 [style=dashed label="pm-expression"]
  1073 -> 304 [style=dashed label="pointer-literal"]
  1073 -> 305 [style=dashed label="postfix-expression"]
  1073 -> 306 [style=dashed label="primary-expression"]
  1073 -> 307 [style=dashed label="qualified-id"]
  1073 -> 308 [style=dashed label="relational-expression"]
  1073 -> 309 [style=dashed label="requires-expression"]
  1073 -> 310 [style=dashed label="shift-expression"]
  1073 -> 311 [style=dashed label="simple-template-id"]
  1073 -> 312 [style=dashed label="simple-type-specifier"]
  1073 -> 313 [style=dashed label="string-literal"]
  1073 -> 314 [style=dashed label="template-id"]
  1073 -> 102 [style=dashed label="template-name"]
  1073 -> 315 [style=dashed label="throw-expression"]
  1073 -> 104 [style=dashed label="type-constraint"]
  1073 -> 105 [style=dashed label="type-constraint-opt"]
  1073 -> 106 [style=dashed label="type-name"]
  1073 -> 108 [style=dashed label="typedef-name"]
  1073 -> 316 [style=dashed label="typename-specifier"]
  1073 -> 317 [style=dashed label="unary-expression"]
  1073 -> 318 [style=dashed label="unary-operator"]
  1073 -> 319 [style=dashed label="unqualified-id"]
  1073 -> 320 [style=dashed label="user-defined-character-literal"]
  1073 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1073 -> 322 [style=dashed label="user-defined-integer-literal"]
  1073 -> 323 [style=dashed label="user-defined-literal"]
  1073 -> 324 [style=dashed label="user-defined-string-literal"]
  1073 -> 325 [style=dashed label="yield-expression"]
  1073 -> "1073R19" [style=solid]
 "1073R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1073 -> "1073R469d" [label="[IDENTIFIER]", style=solid]
 "1073R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1073 -> "1073R722d" [label="[\"decltype\"]", style=solid]
 "1073R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1073 -> "1073R722" [label="[\"auto\"]", style=solid]
 "1073R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1074 [label="State 1074\n\l733 type-parameter: template-head type-parameter-key IDENTIFIER-opt \"=\" id-expression •\l"]
  1074 -> "1074R733" [style=solid]
 "1074R733" [label="R733", fillcolor=3, shape=diamond, style=filled]
  1075 [label="State 1075\n\l289 fold-expression: \"(\" \"...\" fold-operator cast-expression \")\" •\l"]
  1075 -> "1075R289" [style=solid]
 "1075R289" [label="R289", fillcolor=3, shape=diamond, style=filled]
  1076 [label="State 1076\n\l288 fold-expression: \"(\" cast-expression fold-operator \"...\" \")\" •\l"]
  1076 -> "1076R288" [style=solid]
 "1076R288" [label="R288", fillcolor=3, shape=diamond, style=filled]
  1077 [label="State 1077\n\l290 fold-expression: \"(\" cast-expression fold-operator \"...\" fold-operator • cast-expression \")\"\l"]
  1077 -> 238 [style=solid label="IDENTIFIER"]
  1077 -> 239 [style=solid label="\"noexcept\""]
  1077 -> 240 [style=solid label="\"!\""]
  1077 -> 241 [style=solid label="\"::\""]
  1077 -> 242 [style=solid label="\"this\""]
  1077 -> 8 [style=solid label="\"typename\""]
  1077 -> 243 [style=solid label="\"+\""]
  1077 -> 244 [style=solid label="\"-\""]
  1077 -> 245 [style=solid label="\"(\""]
  1077 -> 246 [style=solid label="\"&\""]
  1077 -> 247 [style=solid label="\"[\""]
  1077 -> 248 [style=solid label="\"co_await\""]
  1077 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1077 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1077 -> 251 [style=solid label="\"operator\""]
  1077 -> 21 [style=solid label="\"decltype\""]
  1077 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1077 -> 253 [style=solid label="\"*\""]
  1077 -> 254 [style=solid label="INTEGER_LITERAL"]
  1077 -> 255 [style=solid label="\"requires\""]
  1077 -> 256 [style=solid label="\"~\""]
  1077 -> 257 [style=solid label="\"++\""]
  1077 -> 258 [style=solid label="\"--\""]
  1077 -> 259 [style=solid label="POINTER_LITERAL"]
  1077 -> 260 [style=solid label="\"dynamic_cast\""]
  1077 -> 261 [style=solid label="\"static_cast\""]
  1077 -> 262 [style=solid label="\"reinterpret_cast\""]
  1077 -> 263 [style=solid label="\"const_cast\""]
  1077 -> 264 [style=solid label="\"typeid\""]
  1077 -> 27 [style=solid label="\"char\""]
  1077 -> 28 [style=solid label="\"char8_t\""]
  1077 -> 29 [style=solid label="\"char16_t\""]
  1077 -> 30 [style=solid label="\"char32_t\""]
  1077 -> 31 [style=solid label="\"wchar_t\""]
  1077 -> 32 [style=solid label="\"bool\""]
  1077 -> 33 [style=solid label="\"short\""]
  1077 -> 34 [style=solid label="\"int\""]
  1077 -> 35 [style=solid label="\"long\""]
  1077 -> 36 [style=solid label="\"signed\""]
  1077 -> 37 [style=solid label="\"unsigned\""]
  1077 -> 38 [style=solid label="\"float\""]
  1077 -> 39 [style=solid label="\"double\""]
  1077 -> 40 [style=solid label="\"void\""]
  1077 -> 118 [style=solid label="STRING_LITERAL"]
  1077 -> 266 [style=solid label="\"sizeof\""]
  1077 -> 267 [style=solid label="\"alignof\""]
  1077 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1077 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1077 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1077 -> 272 [style=dashed label="SCOPE-opt"]
  1077 -> 276 [style=dashed label="await-expression"]
  1077 -> 277 [style=dashed label="boolean-literal"]
  1077 -> 1181 [style=dashed label="cast-expression"]
  1077 -> 279 [style=dashed label="character-literal"]
  1077 -> 55 [style=dashed label="class-name"]
  1077 -> 282 [style=dashed label="conversion-function-id"]
  1077 -> 63 [style=dashed label="decltype-specifier"]
  1077 -> 283 [style=dashed label="delete-expression"]
  1077 -> 71 [style=dashed label="enum-name"]
  1077 -> 287 [style=dashed label="floating-point-literal"]
  1077 -> 288 [style=dashed label="fold-expression"]
  1077 -> 289 [style=dashed label="id-expression"]
  1077 -> 291 [style=dashed label="integer-literal"]
  1077 -> 292 [style=dashed label="lambda-expression"]
  1077 -> 293 [style=dashed label="lambda-introducer"]
  1077 -> 294 [style=dashed label="literal"]
  1077 -> 295 [style=dashed label="literal-operator-id"]
  1077 -> 85 [style=dashed label="namespace-alias"]
  1077 -> 88 [style=dashed label="namespace-name"]
  1077 -> 299 [style=dashed label="nested-name-specifier"]
  1077 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1077 -> 300 [style=dashed label="new-expression"]
  1077 -> 301 [style=dashed label="noexcept-expression"]
  1077 -> 302 [style=dashed label="operator-function-id"]
  1077 -> 94 [style=dashed label="placeholder-type-specifier"]
  1077 -> 304 [style=dashed label="pointer-literal"]
  1077 -> 305 [style=dashed label="postfix-expression"]
  1077 -> 306 [style=dashed label="primary-expression"]
  1077 -> 307 [style=dashed label="qualified-id"]
  1077 -> 309 [style=dashed label="requires-expression"]
  1077 -> 311 [style=dashed label="simple-template-id"]
  1077 -> 312 [style=dashed label="simple-type-specifier"]
  1077 -> 313 [style=dashed label="string-literal"]
  1077 -> 314 [style=dashed label="template-id"]
  1077 -> 102 [style=dashed label="template-name"]
  1077 -> 104 [style=dashed label="type-constraint"]
  1077 -> 105 [style=dashed label="type-constraint-opt"]
  1077 -> 106 [style=dashed label="type-name"]
  1077 -> 108 [style=dashed label="typedef-name"]
  1077 -> 316 [style=dashed label="typename-specifier"]
  1077 -> 317 [style=dashed label="unary-expression"]
  1077 -> 318 [style=dashed label="unary-operator"]
  1077 -> 319 [style=dashed label="unqualified-id"]
  1077 -> 320 [style=dashed label="user-defined-character-literal"]
  1077 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1077 -> 322 [style=dashed label="user-defined-integer-literal"]
  1077 -> 323 [style=dashed label="user-defined-literal"]
  1077 -> 324 [style=dashed label="user-defined-string-literal"]
  1077 -> "1077R19" [style=solid]
 "1077R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1077 -> "1077R469d" [label="[IDENTIFIER]", style=solid]
 "1077R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1077 -> "1077R722d" [label="[\"decltype\"]", style=solid]
 "1077R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1077 -> "1077R722" [label="[\"auto\"]", style=solid]
 "1077R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1078 [label="State 1078\n\l350 init-capture: \"&\" ELLIPSIS-opt IDENTIFIER initializer •\l"]
  1078 -> "1078R350" [style=solid]
 "1078R350" [label="R350", fillcolor=3, shape=diamond, style=filled]
  1079 [label="State 1079\n\l509 operator-function-id: \"operator\" overloadable-operator \"<\" template-argument-list-opt \">\" •\l"]
  1079 -> "1079R509" [style=solid]
 "1079R509" [label="R509", fillcolor=3, shape=diamond, style=filled]
  1080 [label="State 1080\n\l467 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l468                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l470 nested-name-specifier-opt: nested-name-specifier •\l745 typename-specifier: \"typename\" nested-name-specifier • IDENTIFIER\l746                   | \"typename\" nested-name-specifier • TEMPLATE-opt simple-template-id\l"]
  1080 -> 229 [style=solid label="IDENTIFIER"]
  1080 -> 230 [style=solid label="\"template\""]
  1080 -> 231 [style=dashed label="TEMPLATE-opt"]
  1080 -> "1080R21d" [label="[IDENTIFIER]", style=solid]
 "1080R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  1080 -> "1080R470d" [label="[IDENTIFIER]", style=solid]
 "1080R470d" [label="R470", fillcolor=5, shape=diamond, style=filled]
  1081 [label="State 1081\n\l736 type-requirement: \"typename\" nested-name-specifier-opt • type-name \";\"\l"]
  1081 -> 525 [style=solid label="IDENTIFIER"]
  1081 -> 55 [style=dashed label="class-name"]
  1081 -> 71 [style=dashed label="enum-name"]
  1081 -> 96 [style=dashed label="simple-template-id"]
  1081 -> 102 [style=dashed label="template-name"]
  1081 -> 1182 [style=dashed label="type-name"]
  1081 -> 108 [style=dashed label="typedef-name"]
  1082 [label="State 1082\n\l150 compound-requirement: \"{\" expression • \"}\" NOEXCEPT-opt return-type-requirement-opt \";\"\l280 expression: expression • \",\" assignment-expression\l"]
  1082 -> 552 [style=solid label="\",\""]
  1082 -> 1183 [style=solid label="\"}\""]
  1083 [label="State 1083\n\l131 cast-expression: \"(\" • type-id \")\" cast-expression\l288 fold-expression: \"(\" • cast-expression fold-operator \"...\" \")\"\l289                | \"(\" • \"...\" fold-operator cast-expression \")\"\l290                | \"(\" • cast-expression fold-operator \"...\" fold-operator cast-expression \")\"\l591 primary-expression: \"(\" • expression \")\"\l628 requirement-parameter-list: \"(\" • parameter-declaration-clause \")\"\l"]
  1083 -> 457 [style=solid label="\"...\""]
  1083 -> 238 [style=solid label="IDENTIFIER"]
  1083 -> 239 [style=solid label="\"noexcept\""]
  1083 -> 240 [style=solid label="\"!\""]
  1083 -> 241 [style=solid label="\"::\""]
  1083 -> 242 [style=solid label="\"this\""]
  1083 -> 8 [style=solid label="\"typename\""]
  1083 -> 243 [style=solid label="\"+\""]
  1083 -> 244 [style=solid label="\"-\""]
  1083 -> 245 [style=solid label="\"(\""]
  1083 -> 246 [style=solid label="\"&\""]
  1083 -> 247 [style=solid label="\"[\""]
  1083 -> 248 [style=solid label="\"co_await\""]
  1083 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1083 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1083 -> 12 [style=solid label="\"class\""]
  1083 -> 13 [style=solid label="\"struct\""]
  1083 -> 14 [style=solid label="\"union\""]
  1083 -> 251 [style=solid label="\"operator\""]
  1083 -> 15 [style=solid label="\"const\""]
  1083 -> 16 [style=solid label="\"volatile\""]
  1083 -> 21 [style=solid label="\"decltype\""]
  1083 -> 125 [style=solid label="\"enum\""]
  1083 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1083 -> 253 [style=solid label="\"*\""]
  1083 -> 254 [style=solid label="INTEGER_LITERAL"]
  1083 -> 255 [style=solid label="\"requires\""]
  1083 -> 256 [style=solid label="\"~\""]
  1083 -> 257 [style=solid label="\"++\""]
  1083 -> 258 [style=solid label="\"--\""]
  1083 -> 259 [style=solid label="POINTER_LITERAL"]
  1083 -> 260 [style=solid label="\"dynamic_cast\""]
  1083 -> 261 [style=solid label="\"static_cast\""]
  1083 -> 262 [style=solid label="\"reinterpret_cast\""]
  1083 -> 263 [style=solid label="\"const_cast\""]
  1083 -> 264 [style=solid label="\"typeid\""]
  1083 -> 27 [style=solid label="\"char\""]
  1083 -> 28 [style=solid label="\"char8_t\""]
  1083 -> 29 [style=solid label="\"char16_t\""]
  1083 -> 30 [style=solid label="\"char32_t\""]
  1083 -> 31 [style=solid label="\"wchar_t\""]
  1083 -> 32 [style=solid label="\"bool\""]
  1083 -> 33 [style=solid label="\"short\""]
  1083 -> 34 [style=solid label="\"int\""]
  1083 -> 35 [style=solid label="\"long\""]
  1083 -> 36 [style=solid label="\"signed\""]
  1083 -> 37 [style=solid label="\"unsigned\""]
  1083 -> 38 [style=solid label="\"float\""]
  1083 -> 39 [style=solid label="\"double\""]
  1083 -> 40 [style=solid label="\"void\""]
  1083 -> 118 [style=solid label="STRING_LITERAL"]
  1083 -> 265 [style=solid label="\"throw\""]
  1083 -> 266 [style=solid label="\"sizeof\""]
  1083 -> 267 [style=solid label="\"alignof\""]
  1083 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1083 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1083 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1083 -> 271 [style=solid label="\"co_yield\""]
  1083 -> 272 [style=dashed label="SCOPE-opt"]
  1083 -> 273 [style=dashed label="additive-expression"]
  1083 -> 274 [style=dashed label="and-expression"]
  1083 -> 275 [style=dashed label="assignment-expression"]
  1083 -> 177 [style=dashed label="attribute-specifier-seq"]
  1083 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  1083 -> 276 [style=dashed label="await-expression"]
  1083 -> 277 [style=dashed label="boolean-literal"]
  1083 -> 458 [style=dashed label="cast-expression"]
  1083 -> 279 [style=dashed label="character-literal"]
  1083 -> 424 [style=dashed label="class-key"]
  1083 -> 55 [style=dashed label="class-name"]
  1083 -> 280 [style=dashed label="compare-expression"]
  1083 -> 281 [style=dashed label="conditional-expression"]
  1083 -> 282 [style=dashed label="conversion-function-id"]
  1083 -> 57 [style=dashed label="cv-qualifier"]
  1083 -> 63 [style=dashed label="decltype-specifier"]
  1083 -> 283 [style=dashed label="delete-expression"]
  1083 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1083 -> 67 [style=dashed label="elaborated-type-specifier"]
  1083 -> 71 [style=dashed label="enum-name"]
  1083 -> 284 [style=dashed label="equality-expression"]
  1083 -> 285 [style=dashed label="exclusive-or-expression"]
  1083 -> 459 [style=dashed label="expression"]
  1083 -> 287 [style=dashed label="floating-point-literal"]
  1083 -> 288 [style=dashed label="fold-expression"]
  1083 -> 289 [style=dashed label="id-expression"]
  1083 -> 290 [style=dashed label="inclusive-or-expression"]
  1083 -> 291 [style=dashed label="integer-literal"]
  1083 -> 292 [style=dashed label="lambda-expression"]
  1083 -> 293 [style=dashed label="lambda-introducer"]
  1083 -> 294 [style=dashed label="literal"]
  1083 -> 295 [style=dashed label="literal-operator-id"]
  1083 -> 296 [style=dashed label="logical-and-expression"]
  1083 -> 297 [style=dashed label="logical-or-expression"]
  1083 -> 298 [style=dashed label="multiplicative-expression"]
  1083 -> 85 [style=dashed label="namespace-alias"]
  1083 -> 88 [style=dashed label="namespace-name"]
  1083 -> 299 [style=dashed label="nested-name-specifier"]
  1083 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1083 -> 300 [style=dashed label="new-expression"]
  1083 -> 301 [style=dashed label="noexcept-expression"]
  1083 -> 302 [style=dashed label="operator-function-id"]
  1083 -> 639 [style=dashed label="parameter-declaration"]
  1083 -> 782 [style=dashed label="parameter-declaration-clause"]
  1083 -> 641 [style=dashed label="parameter-declaration-list"]
  1083 -> 642 [style=dashed label="parameter-declaration-list-opt"]
  1083 -> 94 [style=dashed label="placeholder-type-specifier"]
  1083 -> 303 [style=dashed label="pm-expression"]
  1083 -> 304 [style=dashed label="pointer-literal"]
  1083 -> 305 [style=dashed label="postfix-expression"]
  1083 -> 306 [style=dashed label="primary-expression"]
  1083 -> 307 [style=dashed label="qualified-id"]
  1083 -> 308 [style=dashed label="relational-expression"]
  1083 -> 309 [style=dashed label="requires-expression"]
  1083 -> 310 [style=dashed label="shift-expression"]
  1083 -> 311 [style=dashed label="simple-template-id"]
  1083 -> 427 [style=dashed label="simple-type-specifier"]
  1083 -> 313 [style=dashed label="string-literal"]
  1083 -> 314 [style=dashed label="template-id"]
  1083 -> 102 [style=dashed label="template-name"]
  1083 -> 315 [style=dashed label="throw-expression"]
  1083 -> 104 [style=dashed label="type-constraint"]
  1083 -> 105 [style=dashed label="type-constraint-opt"]
  1083 -> 460 [style=dashed label="type-id"]
  1083 -> 106 [style=dashed label="type-name"]
  1083 -> 432 [style=dashed label="type-specifier"]
  1083 -> 433 [style=dashed label="type-specifier-seq"]
  1083 -> 108 [style=dashed label="typedef-name"]
  1083 -> 434 [style=dashed label="typename-specifier"]
  1083 -> 317 [style=dashed label="unary-expression"]
  1083 -> 318 [style=dashed label="unary-operator"]
  1083 -> 319 [style=dashed label="unqualified-id"]
  1083 -> 320 [style=dashed label="user-defined-character-literal"]
  1083 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1083 -> 322 [style=dashed label="user-defined-integer-literal"]
  1083 -> 323 [style=dashed label="user-defined-literal"]
  1083 -> 324 [style=dashed label="user-defined-string-literal"]
  1083 -> 325 [style=dashed label="yield-expression"]
  1083 -> "1083R19" [label="[\"delete\", \"new\"]", style=solid]
 "1083R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1083 -> "1083R83d" [label="[IDENTIFIER, \"::\", \"this\", \"typename\", \"[\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"decltype\", \"enum\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\"]", style=solid]
 "1083R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1083 -> "1083R83" [style=solid]
 "1083R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1083 -> "1083R469d" [label="[IDENTIFIER]", style=solid]
 "1083R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1083 -> "1083R562d" [label="[\"...\"]", style=solid]
 "1083R562d" [label="R562", fillcolor=5, shape=diamond, style=filled]
  1083 -> "1083R562" [label="[\")\"]", style=solid]
 "1083R562" [label="R562", fillcolor=3, shape=diamond, style=filled]
  1083 -> "1083R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1083R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1084 [label="State 1084\n\l472 nested-requirement: \"requires\" constraint-expression • \";\"\l"]
  1084 -> 1184 [style=solid label="\";\""]
  1085 [label="State 1085\n\l655 simple-requirement: expression \";\" •\l"]
  1085 -> "1085R655" [style=solid]
 "1085R655" [label="R655", fillcolor=3, shape=diamond, style=filled]
  1086 [label="State 1086\n\l627 requirement-body: \"{\" requirement-seq \"}\" •\l"]
  1086 -> "1086R627" [style=solid]
 "1086R627" [label="R627", fillcolor=3, shape=diamond, style=filled]
  1087 [label="State 1087\n\l632 requirement-seq: requirement-seq requirement •\l"]
  1087 -> "1087R632" [style=solid]
 "1087R632" [label="R632", fillcolor=3, shape=diamond, style=filled]
  1088 [label="State 1088\n\l582 postfix-expression: \"dynamic_cast\" \"<\" type-id \">\" \"(\" • expression \")\"\l"]
  1088 -> 238 [style=solid label="IDENTIFIER"]
  1088 -> 239 [style=solid label="\"noexcept\""]
  1088 -> 240 [style=solid label="\"!\""]
  1088 -> 241 [style=solid label="\"::\""]
  1088 -> 242 [style=solid label="\"this\""]
  1088 -> 8 [style=solid label="\"typename\""]
  1088 -> 243 [style=solid label="\"+\""]
  1088 -> 244 [style=solid label="\"-\""]
  1088 -> 245 [style=solid label="\"(\""]
  1088 -> 246 [style=solid label="\"&\""]
  1088 -> 247 [style=solid label="\"[\""]
  1088 -> 248 [style=solid label="\"co_await\""]
  1088 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1088 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1088 -> 251 [style=solid label="\"operator\""]
  1088 -> 21 [style=solid label="\"decltype\""]
  1088 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1088 -> 253 [style=solid label="\"*\""]
  1088 -> 254 [style=solid label="INTEGER_LITERAL"]
  1088 -> 255 [style=solid label="\"requires\""]
  1088 -> 256 [style=solid label="\"~\""]
  1088 -> 257 [style=solid label="\"++\""]
  1088 -> 258 [style=solid label="\"--\""]
  1088 -> 259 [style=solid label="POINTER_LITERAL"]
  1088 -> 260 [style=solid label="\"dynamic_cast\""]
  1088 -> 261 [style=solid label="\"static_cast\""]
  1088 -> 262 [style=solid label="\"reinterpret_cast\""]
  1088 -> 263 [style=solid label="\"const_cast\""]
  1088 -> 264 [style=solid label="\"typeid\""]
  1088 -> 27 [style=solid label="\"char\""]
  1088 -> 28 [style=solid label="\"char8_t\""]
  1088 -> 29 [style=solid label="\"char16_t\""]
  1088 -> 30 [style=solid label="\"char32_t\""]
  1088 -> 31 [style=solid label="\"wchar_t\""]
  1088 -> 32 [style=solid label="\"bool\""]
  1088 -> 33 [style=solid label="\"short\""]
  1088 -> 34 [style=solid label="\"int\""]
  1088 -> 35 [style=solid label="\"long\""]
  1088 -> 36 [style=solid label="\"signed\""]
  1088 -> 37 [style=solid label="\"unsigned\""]
  1088 -> 38 [style=solid label="\"float\""]
  1088 -> 39 [style=solid label="\"double\""]
  1088 -> 40 [style=solid label="\"void\""]
  1088 -> 118 [style=solid label="STRING_LITERAL"]
  1088 -> 265 [style=solid label="\"throw\""]
  1088 -> 266 [style=solid label="\"sizeof\""]
  1088 -> 267 [style=solid label="\"alignof\""]
  1088 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1088 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1088 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1088 -> 271 [style=solid label="\"co_yield\""]
  1088 -> 272 [style=dashed label="SCOPE-opt"]
  1088 -> 273 [style=dashed label="additive-expression"]
  1088 -> 274 [style=dashed label="and-expression"]
  1088 -> 275 [style=dashed label="assignment-expression"]
  1088 -> 276 [style=dashed label="await-expression"]
  1088 -> 277 [style=dashed label="boolean-literal"]
  1088 -> 278 [style=dashed label="cast-expression"]
  1088 -> 279 [style=dashed label="character-literal"]
  1088 -> 55 [style=dashed label="class-name"]
  1088 -> 280 [style=dashed label="compare-expression"]
  1088 -> 281 [style=dashed label="conditional-expression"]
  1088 -> 282 [style=dashed label="conversion-function-id"]
  1088 -> 63 [style=dashed label="decltype-specifier"]
  1088 -> 283 [style=dashed label="delete-expression"]
  1088 -> 71 [style=dashed label="enum-name"]
  1088 -> 284 [style=dashed label="equality-expression"]
  1088 -> 285 [style=dashed label="exclusive-or-expression"]
  1088 -> 1185 [style=dashed label="expression"]
  1088 -> 287 [style=dashed label="floating-point-literal"]
  1088 -> 288 [style=dashed label="fold-expression"]
  1088 -> 289 [style=dashed label="id-expression"]
  1088 -> 290 [style=dashed label="inclusive-or-expression"]
  1088 -> 291 [style=dashed label="integer-literal"]
  1088 -> 292 [style=dashed label="lambda-expression"]
  1088 -> 293 [style=dashed label="lambda-introducer"]
  1088 -> 294 [style=dashed label="literal"]
  1088 -> 295 [style=dashed label="literal-operator-id"]
  1088 -> 296 [style=dashed label="logical-and-expression"]
  1088 -> 297 [style=dashed label="logical-or-expression"]
  1088 -> 298 [style=dashed label="multiplicative-expression"]
  1088 -> 85 [style=dashed label="namespace-alias"]
  1088 -> 88 [style=dashed label="namespace-name"]
  1088 -> 299 [style=dashed label="nested-name-specifier"]
  1088 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1088 -> 300 [style=dashed label="new-expression"]
  1088 -> 301 [style=dashed label="noexcept-expression"]
  1088 -> 302 [style=dashed label="operator-function-id"]
  1088 -> 94 [style=dashed label="placeholder-type-specifier"]
  1088 -> 303 [style=dashed label="pm-expression"]
  1088 -> 304 [style=dashed label="pointer-literal"]
  1088 -> 305 [style=dashed label="postfix-expression"]
  1088 -> 306 [style=dashed label="primary-expression"]
  1088 -> 307 [style=dashed label="qualified-id"]
  1088 -> 308 [style=dashed label="relational-expression"]
  1088 -> 309 [style=dashed label="requires-expression"]
  1088 -> 310 [style=dashed label="shift-expression"]
  1088 -> 311 [style=dashed label="simple-template-id"]
  1088 -> 312 [style=dashed label="simple-type-specifier"]
  1088 -> 313 [style=dashed label="string-literal"]
  1088 -> 314 [style=dashed label="template-id"]
  1088 -> 102 [style=dashed label="template-name"]
  1088 -> 315 [style=dashed label="throw-expression"]
  1088 -> 104 [style=dashed label="type-constraint"]
  1088 -> 105 [style=dashed label="type-constraint-opt"]
  1088 -> 106 [style=dashed label="type-name"]
  1088 -> 108 [style=dashed label="typedef-name"]
  1088 -> 316 [style=dashed label="typename-specifier"]
  1088 -> 317 [style=dashed label="unary-expression"]
  1088 -> 318 [style=dashed label="unary-operator"]
  1088 -> 319 [style=dashed label="unqualified-id"]
  1088 -> 320 [style=dashed label="user-defined-character-literal"]
  1088 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1088 -> 322 [style=dashed label="user-defined-integer-literal"]
  1088 -> 323 [style=dashed label="user-defined-literal"]
  1088 -> 324 [style=dashed label="user-defined-string-literal"]
  1088 -> 325 [style=dashed label="yield-expression"]
  1088 -> "1088R19" [style=solid]
 "1088R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1088 -> "1088R469d" [label="[IDENTIFIER]", style=solid]
 "1088R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1088 -> "1088R722d" [label="[\"decltype\"]", style=solid]
 "1088R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1088 -> "1088R722" [label="[\"auto\"]", style=solid]
 "1088R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1089 [label="State 1089\n\l583 postfix-expression: \"static_cast\" \"<\" type-id \">\" \"(\" • expression \")\"\l"]
  1089 -> 238 [style=solid label="IDENTIFIER"]
  1089 -> 239 [style=solid label="\"noexcept\""]
  1089 -> 240 [style=solid label="\"!\""]
  1089 -> 241 [style=solid label="\"::\""]
  1089 -> 242 [style=solid label="\"this\""]
  1089 -> 8 [style=solid label="\"typename\""]
  1089 -> 243 [style=solid label="\"+\""]
  1089 -> 244 [style=solid label="\"-\""]
  1089 -> 245 [style=solid label="\"(\""]
  1089 -> 246 [style=solid label="\"&\""]
  1089 -> 247 [style=solid label="\"[\""]
  1089 -> 248 [style=solid label="\"co_await\""]
  1089 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1089 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1089 -> 251 [style=solid label="\"operator\""]
  1089 -> 21 [style=solid label="\"decltype\""]
  1089 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1089 -> 253 [style=solid label="\"*\""]
  1089 -> 254 [style=solid label="INTEGER_LITERAL"]
  1089 -> 255 [style=solid label="\"requires\""]
  1089 -> 256 [style=solid label="\"~\""]
  1089 -> 257 [style=solid label="\"++\""]
  1089 -> 258 [style=solid label="\"--\""]
  1089 -> 259 [style=solid label="POINTER_LITERAL"]
  1089 -> 260 [style=solid label="\"dynamic_cast\""]
  1089 -> 261 [style=solid label="\"static_cast\""]
  1089 -> 262 [style=solid label="\"reinterpret_cast\""]
  1089 -> 263 [style=solid label="\"const_cast\""]
  1089 -> 264 [style=solid label="\"typeid\""]
  1089 -> 27 [style=solid label="\"char\""]
  1089 -> 28 [style=solid label="\"char8_t\""]
  1089 -> 29 [style=solid label="\"char16_t\""]
  1089 -> 30 [style=solid label="\"char32_t\""]
  1089 -> 31 [style=solid label="\"wchar_t\""]
  1089 -> 32 [style=solid label="\"bool\""]
  1089 -> 33 [style=solid label="\"short\""]
  1089 -> 34 [style=solid label="\"int\""]
  1089 -> 35 [style=solid label="\"long\""]
  1089 -> 36 [style=solid label="\"signed\""]
  1089 -> 37 [style=solid label="\"unsigned\""]
  1089 -> 38 [style=solid label="\"float\""]
  1089 -> 39 [style=solid label="\"double\""]
  1089 -> 40 [style=solid label="\"void\""]
  1089 -> 118 [style=solid label="STRING_LITERAL"]
  1089 -> 265 [style=solid label="\"throw\""]
  1089 -> 266 [style=solid label="\"sizeof\""]
  1089 -> 267 [style=solid label="\"alignof\""]
  1089 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1089 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1089 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1089 -> 271 [style=solid label="\"co_yield\""]
  1089 -> 272 [style=dashed label="SCOPE-opt"]
  1089 -> 273 [style=dashed label="additive-expression"]
  1089 -> 274 [style=dashed label="and-expression"]
  1089 -> 275 [style=dashed label="assignment-expression"]
  1089 -> 276 [style=dashed label="await-expression"]
  1089 -> 277 [style=dashed label="boolean-literal"]
  1089 -> 278 [style=dashed label="cast-expression"]
  1089 -> 279 [style=dashed label="character-literal"]
  1089 -> 55 [style=dashed label="class-name"]
  1089 -> 280 [style=dashed label="compare-expression"]
  1089 -> 281 [style=dashed label="conditional-expression"]
  1089 -> 282 [style=dashed label="conversion-function-id"]
  1089 -> 63 [style=dashed label="decltype-specifier"]
  1089 -> 283 [style=dashed label="delete-expression"]
  1089 -> 71 [style=dashed label="enum-name"]
  1089 -> 284 [style=dashed label="equality-expression"]
  1089 -> 285 [style=dashed label="exclusive-or-expression"]
  1089 -> 1186 [style=dashed label="expression"]
  1089 -> 287 [style=dashed label="floating-point-literal"]
  1089 -> 288 [style=dashed label="fold-expression"]
  1089 -> 289 [style=dashed label="id-expression"]
  1089 -> 290 [style=dashed label="inclusive-or-expression"]
  1089 -> 291 [style=dashed label="integer-literal"]
  1089 -> 292 [style=dashed label="lambda-expression"]
  1089 -> 293 [style=dashed label="lambda-introducer"]
  1089 -> 294 [style=dashed label="literal"]
  1089 -> 295 [style=dashed label="literal-operator-id"]
  1089 -> 296 [style=dashed label="logical-and-expression"]
  1089 -> 297 [style=dashed label="logical-or-expression"]
  1089 -> 298 [style=dashed label="multiplicative-expression"]
  1089 -> 85 [style=dashed label="namespace-alias"]
  1089 -> 88 [style=dashed label="namespace-name"]
  1089 -> 299 [style=dashed label="nested-name-specifier"]
  1089 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1089 -> 300 [style=dashed label="new-expression"]
  1089 -> 301 [style=dashed label="noexcept-expression"]
  1089 -> 302 [style=dashed label="operator-function-id"]
  1089 -> 94 [style=dashed label="placeholder-type-specifier"]
  1089 -> 303 [style=dashed label="pm-expression"]
  1089 -> 304 [style=dashed label="pointer-literal"]
  1089 -> 305 [style=dashed label="postfix-expression"]
  1089 -> 306 [style=dashed label="primary-expression"]
  1089 -> 307 [style=dashed label="qualified-id"]
  1089 -> 308 [style=dashed label="relational-expression"]
  1089 -> 309 [style=dashed label="requires-expression"]
  1089 -> 310 [style=dashed label="shift-expression"]
  1089 -> 311 [style=dashed label="simple-template-id"]
  1089 -> 312 [style=dashed label="simple-type-specifier"]
  1089 -> 313 [style=dashed label="string-literal"]
  1089 -> 314 [style=dashed label="template-id"]
  1089 -> 102 [style=dashed label="template-name"]
  1089 -> 315 [style=dashed label="throw-expression"]
  1089 -> 104 [style=dashed label="type-constraint"]
  1089 -> 105 [style=dashed label="type-constraint-opt"]
  1089 -> 106 [style=dashed label="type-name"]
  1089 -> 108 [style=dashed label="typedef-name"]
  1089 -> 316 [style=dashed label="typename-specifier"]
  1089 -> 317 [style=dashed label="unary-expression"]
  1089 -> 318 [style=dashed label="unary-operator"]
  1089 -> 319 [style=dashed label="unqualified-id"]
  1089 -> 320 [style=dashed label="user-defined-character-literal"]
  1089 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1089 -> 322 [style=dashed label="user-defined-integer-literal"]
  1089 -> 323 [style=dashed label="user-defined-literal"]
  1089 -> 324 [style=dashed label="user-defined-string-literal"]
  1089 -> 325 [style=dashed label="yield-expression"]
  1089 -> "1089R19" [style=solid]
 "1089R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1089 -> "1089R469d" [label="[IDENTIFIER]", style=solid]
 "1089R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1089 -> "1089R722d" [label="[\"decltype\"]", style=solid]
 "1089R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1089 -> "1089R722" [label="[\"auto\"]", style=solid]
 "1089R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1090 [label="State 1090\n\l584 postfix-expression: \"reinterpret_cast\" \"<\" type-id \">\" \"(\" • expression \")\"\l"]
  1090 -> 238 [style=solid label="IDENTIFIER"]
  1090 -> 239 [style=solid label="\"noexcept\""]
  1090 -> 240 [style=solid label="\"!\""]
  1090 -> 241 [style=solid label="\"::\""]
  1090 -> 242 [style=solid label="\"this\""]
  1090 -> 8 [style=solid label="\"typename\""]
  1090 -> 243 [style=solid label="\"+\""]
  1090 -> 244 [style=solid label="\"-\""]
  1090 -> 245 [style=solid label="\"(\""]
  1090 -> 246 [style=solid label="\"&\""]
  1090 -> 247 [style=solid label="\"[\""]
  1090 -> 248 [style=solid label="\"co_await\""]
  1090 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1090 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1090 -> 251 [style=solid label="\"operator\""]
  1090 -> 21 [style=solid label="\"decltype\""]
  1090 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1090 -> 253 [style=solid label="\"*\""]
  1090 -> 254 [style=solid label="INTEGER_LITERAL"]
  1090 -> 255 [style=solid label="\"requires\""]
  1090 -> 256 [style=solid label="\"~\""]
  1090 -> 257 [style=solid label="\"++\""]
  1090 -> 258 [style=solid label="\"--\""]
  1090 -> 259 [style=solid label="POINTER_LITERAL"]
  1090 -> 260 [style=solid label="\"dynamic_cast\""]
  1090 -> 261 [style=solid label="\"static_cast\""]
  1090 -> 262 [style=solid label="\"reinterpret_cast\""]
  1090 -> 263 [style=solid label="\"const_cast\""]
  1090 -> 264 [style=solid label="\"typeid\""]
  1090 -> 27 [style=solid label="\"char\""]
  1090 -> 28 [style=solid label="\"char8_t\""]
  1090 -> 29 [style=solid label="\"char16_t\""]
  1090 -> 30 [style=solid label="\"char32_t\""]
  1090 -> 31 [style=solid label="\"wchar_t\""]
  1090 -> 32 [style=solid label="\"bool\""]
  1090 -> 33 [style=solid label="\"short\""]
  1090 -> 34 [style=solid label="\"int\""]
  1090 -> 35 [style=solid label="\"long\""]
  1090 -> 36 [style=solid label="\"signed\""]
  1090 -> 37 [style=solid label="\"unsigned\""]
  1090 -> 38 [style=solid label="\"float\""]
  1090 -> 39 [style=solid label="\"double\""]
  1090 -> 40 [style=solid label="\"void\""]
  1090 -> 118 [style=solid label="STRING_LITERAL"]
  1090 -> 265 [style=solid label="\"throw\""]
  1090 -> 266 [style=solid label="\"sizeof\""]
  1090 -> 267 [style=solid label="\"alignof\""]
  1090 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1090 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1090 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1090 -> 271 [style=solid label="\"co_yield\""]
  1090 -> 272 [style=dashed label="SCOPE-opt"]
  1090 -> 273 [style=dashed label="additive-expression"]
  1090 -> 274 [style=dashed label="and-expression"]
  1090 -> 275 [style=dashed label="assignment-expression"]
  1090 -> 276 [style=dashed label="await-expression"]
  1090 -> 277 [style=dashed label="boolean-literal"]
  1090 -> 278 [style=dashed label="cast-expression"]
  1090 -> 279 [style=dashed label="character-literal"]
  1090 -> 55 [style=dashed label="class-name"]
  1090 -> 280 [style=dashed label="compare-expression"]
  1090 -> 281 [style=dashed label="conditional-expression"]
  1090 -> 282 [style=dashed label="conversion-function-id"]
  1090 -> 63 [style=dashed label="decltype-specifier"]
  1090 -> 283 [style=dashed label="delete-expression"]
  1090 -> 71 [style=dashed label="enum-name"]
  1090 -> 284 [style=dashed label="equality-expression"]
  1090 -> 285 [style=dashed label="exclusive-or-expression"]
  1090 -> 1187 [style=dashed label="expression"]
  1090 -> 287 [style=dashed label="floating-point-literal"]
  1090 -> 288 [style=dashed label="fold-expression"]
  1090 -> 289 [style=dashed label="id-expression"]
  1090 -> 290 [style=dashed label="inclusive-or-expression"]
  1090 -> 291 [style=dashed label="integer-literal"]
  1090 -> 292 [style=dashed label="lambda-expression"]
  1090 -> 293 [style=dashed label="lambda-introducer"]
  1090 -> 294 [style=dashed label="literal"]
  1090 -> 295 [style=dashed label="literal-operator-id"]
  1090 -> 296 [style=dashed label="logical-and-expression"]
  1090 -> 297 [style=dashed label="logical-or-expression"]
  1090 -> 298 [style=dashed label="multiplicative-expression"]
  1090 -> 85 [style=dashed label="namespace-alias"]
  1090 -> 88 [style=dashed label="namespace-name"]
  1090 -> 299 [style=dashed label="nested-name-specifier"]
  1090 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1090 -> 300 [style=dashed label="new-expression"]
  1090 -> 301 [style=dashed label="noexcept-expression"]
  1090 -> 302 [style=dashed label="operator-function-id"]
  1090 -> 94 [style=dashed label="placeholder-type-specifier"]
  1090 -> 303 [style=dashed label="pm-expression"]
  1090 -> 304 [style=dashed label="pointer-literal"]
  1090 -> 305 [style=dashed label="postfix-expression"]
  1090 -> 306 [style=dashed label="primary-expression"]
  1090 -> 307 [style=dashed label="qualified-id"]
  1090 -> 308 [style=dashed label="relational-expression"]
  1090 -> 309 [style=dashed label="requires-expression"]
  1090 -> 310 [style=dashed label="shift-expression"]
  1090 -> 311 [style=dashed label="simple-template-id"]
  1090 -> 312 [style=dashed label="simple-type-specifier"]
  1090 -> 313 [style=dashed label="string-literal"]
  1090 -> 314 [style=dashed label="template-id"]
  1090 -> 102 [style=dashed label="template-name"]
  1090 -> 315 [style=dashed label="throw-expression"]
  1090 -> 104 [style=dashed label="type-constraint"]
  1090 -> 105 [style=dashed label="type-constraint-opt"]
  1090 -> 106 [style=dashed label="type-name"]
  1090 -> 108 [style=dashed label="typedef-name"]
  1090 -> 316 [style=dashed label="typename-specifier"]
  1090 -> 317 [style=dashed label="unary-expression"]
  1090 -> 318 [style=dashed label="unary-operator"]
  1090 -> 319 [style=dashed label="unqualified-id"]
  1090 -> 320 [style=dashed label="user-defined-character-literal"]
  1090 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1090 -> 322 [style=dashed label="user-defined-integer-literal"]
  1090 -> 323 [style=dashed label="user-defined-literal"]
  1090 -> 324 [style=dashed label="user-defined-string-literal"]
  1090 -> 325 [style=dashed label="yield-expression"]
  1090 -> "1090R19" [style=solid]
 "1090R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1090 -> "1090R469d" [label="[IDENTIFIER]", style=solid]
 "1090R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1090 -> "1090R722d" [label="[\"decltype\"]", style=solid]
 "1090R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1090 -> "1090R722" [label="[\"auto\"]", style=solid]
 "1090R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1091 [label="State 1091\n\l585 postfix-expression: \"const_cast\" \"<\" type-id \">\" \"(\" • expression \")\"\l"]
  1091 -> 238 [style=solid label="IDENTIFIER"]
  1091 -> 239 [style=solid label="\"noexcept\""]
  1091 -> 240 [style=solid label="\"!\""]
  1091 -> 241 [style=solid label="\"::\""]
  1091 -> 242 [style=solid label="\"this\""]
  1091 -> 8 [style=solid label="\"typename\""]
  1091 -> 243 [style=solid label="\"+\""]
  1091 -> 244 [style=solid label="\"-\""]
  1091 -> 245 [style=solid label="\"(\""]
  1091 -> 246 [style=solid label="\"&\""]
  1091 -> 247 [style=solid label="\"[\""]
  1091 -> 248 [style=solid label="\"co_await\""]
  1091 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1091 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1091 -> 251 [style=solid label="\"operator\""]
  1091 -> 21 [style=solid label="\"decltype\""]
  1091 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1091 -> 253 [style=solid label="\"*\""]
  1091 -> 254 [style=solid label="INTEGER_LITERAL"]
  1091 -> 255 [style=solid label="\"requires\""]
  1091 -> 256 [style=solid label="\"~\""]
  1091 -> 257 [style=solid label="\"++\""]
  1091 -> 258 [style=solid label="\"--\""]
  1091 -> 259 [style=solid label="POINTER_LITERAL"]
  1091 -> 260 [style=solid label="\"dynamic_cast\""]
  1091 -> 261 [style=solid label="\"static_cast\""]
  1091 -> 262 [style=solid label="\"reinterpret_cast\""]
  1091 -> 263 [style=solid label="\"const_cast\""]
  1091 -> 264 [style=solid label="\"typeid\""]
  1091 -> 27 [style=solid label="\"char\""]
  1091 -> 28 [style=solid label="\"char8_t\""]
  1091 -> 29 [style=solid label="\"char16_t\""]
  1091 -> 30 [style=solid label="\"char32_t\""]
  1091 -> 31 [style=solid label="\"wchar_t\""]
  1091 -> 32 [style=solid label="\"bool\""]
  1091 -> 33 [style=solid label="\"short\""]
  1091 -> 34 [style=solid label="\"int\""]
  1091 -> 35 [style=solid label="\"long\""]
  1091 -> 36 [style=solid label="\"signed\""]
  1091 -> 37 [style=solid label="\"unsigned\""]
  1091 -> 38 [style=solid label="\"float\""]
  1091 -> 39 [style=solid label="\"double\""]
  1091 -> 40 [style=solid label="\"void\""]
  1091 -> 118 [style=solid label="STRING_LITERAL"]
  1091 -> 265 [style=solid label="\"throw\""]
  1091 -> 266 [style=solid label="\"sizeof\""]
  1091 -> 267 [style=solid label="\"alignof\""]
  1091 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1091 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1091 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1091 -> 271 [style=solid label="\"co_yield\""]
  1091 -> 272 [style=dashed label="SCOPE-opt"]
  1091 -> 273 [style=dashed label="additive-expression"]
  1091 -> 274 [style=dashed label="and-expression"]
  1091 -> 275 [style=dashed label="assignment-expression"]
  1091 -> 276 [style=dashed label="await-expression"]
  1091 -> 277 [style=dashed label="boolean-literal"]
  1091 -> 278 [style=dashed label="cast-expression"]
  1091 -> 279 [style=dashed label="character-literal"]
  1091 -> 55 [style=dashed label="class-name"]
  1091 -> 280 [style=dashed label="compare-expression"]
  1091 -> 281 [style=dashed label="conditional-expression"]
  1091 -> 282 [style=dashed label="conversion-function-id"]
  1091 -> 63 [style=dashed label="decltype-specifier"]
  1091 -> 283 [style=dashed label="delete-expression"]
  1091 -> 71 [style=dashed label="enum-name"]
  1091 -> 284 [style=dashed label="equality-expression"]
  1091 -> 285 [style=dashed label="exclusive-or-expression"]
  1091 -> 1188 [style=dashed label="expression"]
  1091 -> 287 [style=dashed label="floating-point-literal"]
  1091 -> 288 [style=dashed label="fold-expression"]
  1091 -> 289 [style=dashed label="id-expression"]
  1091 -> 290 [style=dashed label="inclusive-or-expression"]
  1091 -> 291 [style=dashed label="integer-literal"]
  1091 -> 292 [style=dashed label="lambda-expression"]
  1091 -> 293 [style=dashed label="lambda-introducer"]
  1091 -> 294 [style=dashed label="literal"]
  1091 -> 295 [style=dashed label="literal-operator-id"]
  1091 -> 296 [style=dashed label="logical-and-expression"]
  1091 -> 297 [style=dashed label="logical-or-expression"]
  1091 -> 298 [style=dashed label="multiplicative-expression"]
  1091 -> 85 [style=dashed label="namespace-alias"]
  1091 -> 88 [style=dashed label="namespace-name"]
  1091 -> 299 [style=dashed label="nested-name-specifier"]
  1091 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1091 -> 300 [style=dashed label="new-expression"]
  1091 -> 301 [style=dashed label="noexcept-expression"]
  1091 -> 302 [style=dashed label="operator-function-id"]
  1091 -> 94 [style=dashed label="placeholder-type-specifier"]
  1091 -> 303 [style=dashed label="pm-expression"]
  1091 -> 304 [style=dashed label="pointer-literal"]
  1091 -> 305 [style=dashed label="postfix-expression"]
  1091 -> 306 [style=dashed label="primary-expression"]
  1091 -> 307 [style=dashed label="qualified-id"]
  1091 -> 308 [style=dashed label="relational-expression"]
  1091 -> 309 [style=dashed label="requires-expression"]
  1091 -> 310 [style=dashed label="shift-expression"]
  1091 -> 311 [style=dashed label="simple-template-id"]
  1091 -> 312 [style=dashed label="simple-type-specifier"]
  1091 -> 313 [style=dashed label="string-literal"]
  1091 -> 314 [style=dashed label="template-id"]
  1091 -> 102 [style=dashed label="template-name"]
  1091 -> 315 [style=dashed label="throw-expression"]
  1091 -> 104 [style=dashed label="type-constraint"]
  1091 -> 105 [style=dashed label="type-constraint-opt"]
  1091 -> 106 [style=dashed label="type-name"]
  1091 -> 108 [style=dashed label="typedef-name"]
  1091 -> 316 [style=dashed label="typename-specifier"]
  1091 -> 317 [style=dashed label="unary-expression"]
  1091 -> 318 [style=dashed label="unary-operator"]
  1091 -> 319 [style=dashed label="unqualified-id"]
  1091 -> 320 [style=dashed label="user-defined-character-literal"]
  1091 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1091 -> 322 [style=dashed label="user-defined-integer-literal"]
  1091 -> 323 [style=dashed label="user-defined-literal"]
  1091 -> 324 [style=dashed label="user-defined-string-literal"]
  1091 -> 325 [style=dashed label="yield-expression"]
  1091 -> "1091R19" [style=solid]
 "1091R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1091 -> "1091R469d" [label="[IDENTIFIER]", style=solid]
 "1091R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1091 -> "1091R722d" [label="[\"decltype\"]", style=solid]
 "1091R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1091 -> "1091R722" [label="[\"auto\"]", style=solid]
 "1091R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1092 [label="State 1092\n\l755 unary-expression: \"sizeof\" \"...\" \"(\" IDENTIFIER \")\" •\l"]
  1092 -> "1092R755" [style=solid]
 "1092R755" [label="R755", fillcolor=3, shape=diamond, style=filled]
  1093 [label="State 1093\n\l225 delete-expression: SCOPE-opt \"delete\" \"[\" \"]\" cast-expression •\l"]
  1093 -> "1093R225" [style=solid]
 "1093R225" [label="R225", fillcolor=3, shape=diamond, style=filled]
  1094 [label="State 1094\n\l483 new-placement: \"(\" expression-list \")\" •\l"]
  1094 -> "1094R483" [style=solid]
 "1094R483" [label="R483", fillcolor=3, shape=diamond, style=filled]
  1095 [label="State 1095\n\l478 new-expression: SCOPE-opt \"new\" new-placement-opt \"(\" type-id • \")\" new-initializer-opt\l"]
  1095 -> 1189 [style=solid label="\")\""]
  1096 [label="State 1096\n\l479 new-initializer: \"(\" • expression-list-opt \")\"\l"]
  1096 -> 238 [style=solid label="IDENTIFIER"]
  1096 -> 239 [style=solid label="\"noexcept\""]
  1096 -> 240 [style=solid label="\"!\""]
  1096 -> 241 [style=solid label="\"::\""]
  1096 -> 242 [style=solid label="\"this\""]
  1096 -> 8 [style=solid label="\"typename\""]
  1096 -> 243 [style=solid label="\"+\""]
  1096 -> 244 [style=solid label="\"-\""]
  1096 -> 245 [style=solid label="\"(\""]
  1096 -> 246 [style=solid label="\"&\""]
  1096 -> 247 [style=solid label="\"[\""]
  1096 -> 248 [style=solid label="\"co_await\""]
  1096 -> 398 [style=solid label="\"{\""]
  1096 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1096 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1096 -> 251 [style=solid label="\"operator\""]
  1096 -> 21 [style=solid label="\"decltype\""]
  1096 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1096 -> 253 [style=solid label="\"*\""]
  1096 -> 254 [style=solid label="INTEGER_LITERAL"]
  1096 -> 255 [style=solid label="\"requires\""]
  1096 -> 256 [style=solid label="\"~\""]
  1096 -> 257 [style=solid label="\"++\""]
  1096 -> 258 [style=solid label="\"--\""]
  1096 -> 259 [style=solid label="POINTER_LITERAL"]
  1096 -> 260 [style=solid label="\"dynamic_cast\""]
  1096 -> 261 [style=solid label="\"static_cast\""]
  1096 -> 262 [style=solid label="\"reinterpret_cast\""]
  1096 -> 263 [style=solid label="\"const_cast\""]
  1096 -> 264 [style=solid label="\"typeid\""]
  1096 -> 27 [style=solid label="\"char\""]
  1096 -> 28 [style=solid label="\"char8_t\""]
  1096 -> 29 [style=solid label="\"char16_t\""]
  1096 -> 30 [style=solid label="\"char32_t\""]
  1096 -> 31 [style=solid label="\"wchar_t\""]
  1096 -> 32 [style=solid label="\"bool\""]
  1096 -> 33 [style=solid label="\"short\""]
  1096 -> 34 [style=solid label="\"int\""]
  1096 -> 35 [style=solid label="\"long\""]
  1096 -> 36 [style=solid label="\"signed\""]
  1096 -> 37 [style=solid label="\"unsigned\""]
  1096 -> 38 [style=solid label="\"float\""]
  1096 -> 39 [style=solid label="\"double\""]
  1096 -> 40 [style=solid label="\"void\""]
  1096 -> 118 [style=solid label="STRING_LITERAL"]
  1096 -> 265 [style=solid label="\"throw\""]
  1096 -> 266 [style=solid label="\"sizeof\""]
  1096 -> 267 [style=solid label="\"alignof\""]
  1096 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1096 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1096 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1096 -> 271 [style=solid label="\"co_yield\""]
  1096 -> 272 [style=dashed label="SCOPE-opt"]
  1096 -> 273 [style=dashed label="additive-expression"]
  1096 -> 274 [style=dashed label="and-expression"]
  1096 -> 662 [style=dashed label="assignment-expression"]
  1096 -> 276 [style=dashed label="await-expression"]
  1096 -> 277 [style=dashed label="boolean-literal"]
  1096 -> 663 [style=dashed label="braced-init-list"]
  1096 -> 278 [style=dashed label="cast-expression"]
  1096 -> 279 [style=dashed label="character-literal"]
  1096 -> 55 [style=dashed label="class-name"]
  1096 -> 280 [style=dashed label="compare-expression"]
  1096 -> 281 [style=dashed label="conditional-expression"]
  1096 -> 282 [style=dashed label="conversion-function-id"]
  1096 -> 63 [style=dashed label="decltype-specifier"]
  1096 -> 283 [style=dashed label="delete-expression"]
  1096 -> 71 [style=dashed label="enum-name"]
  1096 -> 284 [style=dashed label="equality-expression"]
  1096 -> 285 [style=dashed label="exclusive-or-expression"]
  1096 -> 829 [style=dashed label="expression-list"]
  1096 -> 1190 [style=dashed label="expression-list-opt"]
  1096 -> 287 [style=dashed label="floating-point-literal"]
  1096 -> 288 [style=dashed label="fold-expression"]
  1096 -> 289 [style=dashed label="id-expression"]
  1096 -> 290 [style=dashed label="inclusive-or-expression"]
  1096 -> 666 [style=dashed label="initializer-clause"]
  1096 -> 667 [style=dashed label="initializer-list"]
  1096 -> 291 [style=dashed label="integer-literal"]
  1096 -> 292 [style=dashed label="lambda-expression"]
  1096 -> 293 [style=dashed label="lambda-introducer"]
  1096 -> 294 [style=dashed label="literal"]
  1096 -> 295 [style=dashed label="literal-operator-id"]
  1096 -> 296 [style=dashed label="logical-and-expression"]
  1096 -> 297 [style=dashed label="logical-or-expression"]
  1096 -> 298 [style=dashed label="multiplicative-expression"]
  1096 -> 85 [style=dashed label="namespace-alias"]
  1096 -> 88 [style=dashed label="namespace-name"]
  1096 -> 299 [style=dashed label="nested-name-specifier"]
  1096 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1096 -> 300 [style=dashed label="new-expression"]
  1096 -> 301 [style=dashed label="noexcept-expression"]
  1096 -> 302 [style=dashed label="operator-function-id"]
  1096 -> 94 [style=dashed label="placeholder-type-specifier"]
  1096 -> 303 [style=dashed label="pm-expression"]
  1096 -> 304 [style=dashed label="pointer-literal"]
  1096 -> 305 [style=dashed label="postfix-expression"]
  1096 -> 306 [style=dashed label="primary-expression"]
  1096 -> 307 [style=dashed label="qualified-id"]
  1096 -> 308 [style=dashed label="relational-expression"]
  1096 -> 309 [style=dashed label="requires-expression"]
  1096 -> 310 [style=dashed label="shift-expression"]
  1096 -> 311 [style=dashed label="simple-template-id"]
  1096 -> 312 [style=dashed label="simple-type-specifier"]
  1096 -> 313 [style=dashed label="string-literal"]
  1096 -> 314 [style=dashed label="template-id"]
  1096 -> 102 [style=dashed label="template-name"]
  1096 -> 315 [style=dashed label="throw-expression"]
  1096 -> 104 [style=dashed label="type-constraint"]
  1096 -> 105 [style=dashed label="type-constraint-opt"]
  1096 -> 106 [style=dashed label="type-name"]
  1096 -> 108 [style=dashed label="typedef-name"]
  1096 -> 316 [style=dashed label="typename-specifier"]
  1096 -> 317 [style=dashed label="unary-expression"]
  1096 -> 318 [style=dashed label="unary-operator"]
  1096 -> 319 [style=dashed label="unqualified-id"]
  1096 -> 320 [style=dashed label="user-defined-character-literal"]
  1096 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1096 -> 322 [style=dashed label="user-defined-integer-literal"]
  1096 -> 323 [style=dashed label="user-defined-literal"]
  1096 -> 324 [style=dashed label="user-defined-string-literal"]
  1096 -> 325 [style=dashed label="yield-expression"]
  1096 -> "1096R19" [style=solid]
 "1096R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1096 -> "1096R282" [label="[\")\"]", style=solid]
 "1096R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  1096 -> "1096R469d" [label="[IDENTIFIER]", style=solid]
 "1096R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1096 -> "1096R722d" [label="[\"decltype\"]", style=solid]
 "1096R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1096 -> "1096R722" [label="[\"auto\"]", style=solid]
 "1096R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1097 [label="State 1097\n\l480 new-initializer: braced-init-list •\l"]
  1097 -> "1097R480" [style=solid]
 "1097R480" [label="R480", fillcolor=3, shape=diamond, style=filled]
  1098 [label="State 1098\n\l482 new-initializer-opt: new-initializer •\l"]
  1098 -> "1098R482" [style=solid]
 "1098R482" [label="R482", fillcolor=3, shape=diamond, style=filled]
  1099 [label="State 1099\n\l477 new-expression: SCOPE-opt \"new\" new-placement-opt new-type-id new-initializer-opt •\l"]
  1099 -> "1099R477" [style=solid]
 "1099R477" [label="R477", fillcolor=3, shape=diamond, style=filled]
  1100 [label="State 1100\n\l505 noptr-new-declarator: \"[\" • expression-opt \"]\" attribute-specifier-seq-opt\l"]
  1100 -> 238 [style=solid label="IDENTIFIER"]
  1100 -> 239 [style=solid label="\"noexcept\""]
  1100 -> 240 [style=solid label="\"!\""]
  1100 -> 241 [style=solid label="\"::\""]
  1100 -> 242 [style=solid label="\"this\""]
  1100 -> 8 [style=solid label="\"typename\""]
  1100 -> 243 [style=solid label="\"+\""]
  1100 -> 244 [style=solid label="\"-\""]
  1100 -> 245 [style=solid label="\"(\""]
  1100 -> 246 [style=solid label="\"&\""]
  1100 -> 247 [style=solid label="\"[\""]
  1100 -> 248 [style=solid label="\"co_await\""]
  1100 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1100 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1100 -> 251 [style=solid label="\"operator\""]
  1100 -> 21 [style=solid label="\"decltype\""]
  1100 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1100 -> 253 [style=solid label="\"*\""]
  1100 -> 254 [style=solid label="INTEGER_LITERAL"]
  1100 -> 255 [style=solid label="\"requires\""]
  1100 -> 256 [style=solid label="\"~\""]
  1100 -> 257 [style=solid label="\"++\""]
  1100 -> 258 [style=solid label="\"--\""]
  1100 -> 259 [style=solid label="POINTER_LITERAL"]
  1100 -> 260 [style=solid label="\"dynamic_cast\""]
  1100 -> 261 [style=solid label="\"static_cast\""]
  1100 -> 262 [style=solid label="\"reinterpret_cast\""]
  1100 -> 263 [style=solid label="\"const_cast\""]
  1100 -> 264 [style=solid label="\"typeid\""]
  1100 -> 27 [style=solid label="\"char\""]
  1100 -> 28 [style=solid label="\"char8_t\""]
  1100 -> 29 [style=solid label="\"char16_t\""]
  1100 -> 30 [style=solid label="\"char32_t\""]
  1100 -> 31 [style=solid label="\"wchar_t\""]
  1100 -> 32 [style=solid label="\"bool\""]
  1100 -> 33 [style=solid label="\"short\""]
  1100 -> 34 [style=solid label="\"int\""]
  1100 -> 35 [style=solid label="\"long\""]
  1100 -> 36 [style=solid label="\"signed\""]
  1100 -> 37 [style=solid label="\"unsigned\""]
  1100 -> 38 [style=solid label="\"float\""]
  1100 -> 39 [style=solid label="\"double\""]
  1100 -> 40 [style=solid label="\"void\""]
  1100 -> 118 [style=solid label="STRING_LITERAL"]
  1100 -> 265 [style=solid label="\"throw\""]
  1100 -> 266 [style=solid label="\"sizeof\""]
  1100 -> 267 [style=solid label="\"alignof\""]
  1100 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1100 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1100 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1100 -> 271 [style=solid label="\"co_yield\""]
  1100 -> 272 [style=dashed label="SCOPE-opt"]
  1100 -> 273 [style=dashed label="additive-expression"]
  1100 -> 274 [style=dashed label="and-expression"]
  1100 -> 275 [style=dashed label="assignment-expression"]
  1100 -> 276 [style=dashed label="await-expression"]
  1100 -> 277 [style=dashed label="boolean-literal"]
  1100 -> 278 [style=dashed label="cast-expression"]
  1100 -> 279 [style=dashed label="character-literal"]
  1100 -> 55 [style=dashed label="class-name"]
  1100 -> 280 [style=dashed label="compare-expression"]
  1100 -> 281 [style=dashed label="conditional-expression"]
  1100 -> 282 [style=dashed label="conversion-function-id"]
  1100 -> 63 [style=dashed label="decltype-specifier"]
  1100 -> 283 [style=dashed label="delete-expression"]
  1100 -> 71 [style=dashed label="enum-name"]
  1100 -> 284 [style=dashed label="equality-expression"]
  1100 -> 285 [style=dashed label="exclusive-or-expression"]
  1100 -> 1129 [style=dashed label="expression"]
  1100 -> 1191 [style=dashed label="expression-opt"]
  1100 -> 287 [style=dashed label="floating-point-literal"]
  1100 -> 288 [style=dashed label="fold-expression"]
  1100 -> 289 [style=dashed label="id-expression"]
  1100 -> 290 [style=dashed label="inclusive-or-expression"]
  1100 -> 291 [style=dashed label="integer-literal"]
  1100 -> 292 [style=dashed label="lambda-expression"]
  1100 -> 293 [style=dashed label="lambda-introducer"]
  1100 -> 294 [style=dashed label="literal"]
  1100 -> 295 [style=dashed label="literal-operator-id"]
  1100 -> 296 [style=dashed label="logical-and-expression"]
  1100 -> 297 [style=dashed label="logical-or-expression"]
  1100 -> 298 [style=dashed label="multiplicative-expression"]
  1100 -> 85 [style=dashed label="namespace-alias"]
  1100 -> 88 [style=dashed label="namespace-name"]
  1100 -> 299 [style=dashed label="nested-name-specifier"]
  1100 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1100 -> 300 [style=dashed label="new-expression"]
  1100 -> 301 [style=dashed label="noexcept-expression"]
  1100 -> 302 [style=dashed label="operator-function-id"]
  1100 -> 94 [style=dashed label="placeholder-type-specifier"]
  1100 -> 303 [style=dashed label="pm-expression"]
  1100 -> 304 [style=dashed label="pointer-literal"]
  1100 -> 305 [style=dashed label="postfix-expression"]
  1100 -> 306 [style=dashed label="primary-expression"]
  1100 -> 307 [style=dashed label="qualified-id"]
  1100 -> 308 [style=dashed label="relational-expression"]
  1100 -> 309 [style=dashed label="requires-expression"]
  1100 -> 310 [style=dashed label="shift-expression"]
  1100 -> 311 [style=dashed label="simple-template-id"]
  1100 -> 312 [style=dashed label="simple-type-specifier"]
  1100 -> 313 [style=dashed label="string-literal"]
  1100 -> 314 [style=dashed label="template-id"]
  1100 -> 102 [style=dashed label="template-name"]
  1100 -> 315 [style=dashed label="throw-expression"]
  1100 -> 104 [style=dashed label="type-constraint"]
  1100 -> 105 [style=dashed label="type-constraint-opt"]
  1100 -> 106 [style=dashed label="type-name"]
  1100 -> 108 [style=dashed label="typedef-name"]
  1100 -> 316 [style=dashed label="typename-specifier"]
  1100 -> 317 [style=dashed label="unary-expression"]
  1100 -> 318 [style=dashed label="unary-operator"]
  1100 -> 319 [style=dashed label="unqualified-id"]
  1100 -> 320 [style=dashed label="user-defined-character-literal"]
  1100 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1100 -> 322 [style=dashed label="user-defined-integer-literal"]
  1100 -> 323 [style=dashed label="user-defined-literal"]
  1100 -> 324 [style=dashed label="user-defined-string-literal"]
  1100 -> 325 [style=dashed label="yield-expression"]
  1100 -> "1100R19" [style=solid]
 "1100R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1100 -> "1100R284" [label="[\"]\"]", style=solid]
 "1100R284" [label="R284", fillcolor=3, shape=diamond, style=filled]
  1100 -> "1100R469d" [label="[IDENTIFIER]", style=solid]
 "1100R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1100 -> "1100R722d" [label="[\"decltype\"]", style=solid]
 "1100R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1100 -> "1100R722" [label="[\"auto\"]", style=solid]
 "1100R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1101 [label="State 1101\n\l476 new-declarator-opt: new-declarator •\l"]
  1101 -> "1101R476" [style=solid]
 "1101R476" [label="R476", fillcolor=3, shape=diamond, style=filled]
  1102 [label="State 1102\n\l486 new-type-id: type-specifier-seq new-declarator-opt •\l"]
  1102 -> "1102R486" [style=solid]
 "1102R486" [label="R486", fillcolor=3, shape=diamond, style=filled]
  1103 [label="State 1103\n\l474 new-declarator: noptr-new-declarator •\l506 noptr-new-declarator: noptr-new-declarator • \"[\" constant-expression \"]\" attribute-specifier-seq-opt\l"]
  1103 -> 1192 [style=solid label="\"[\""]
  1103 -> "1103R474" [style=solid]
 "1103R474" [label="R474", fillcolor=3, shape=diamond, style=filled]
  1104 [label="State 1104\n\l473 new-declarator: ptr-operator • new-declarator-opt\l"]
  1104 -> 4 [style=solid label="IDENTIFIER"]
  1104 -> 6 [style=solid label="\"::\""]
  1104 -> 160 [style=solid label="\"&\""]
  1104 -> 1100 [style=solid label="\"[\""]
  1104 -> 163 [style=solid label="\"&&\""]
  1104 -> 21 [style=solid label="\"decltype\""]
  1104 -> 164 [style=solid label="\"*\""]
  1104 -> 55 [style=dashed label="class-name"]
  1104 -> 121 [style=dashed label="decltype-specifier"]
  1104 -> 71 [style=dashed label="enum-name"]
  1104 -> 85 [style=dashed label="namespace-alias"]
  1104 -> 88 [style=dashed label="namespace-name"]
  1104 -> 187 [style=dashed label="nested-name-specifier"]
  1104 -> 1101 [style=dashed label="new-declarator"]
  1104 -> 1193 [style=dashed label="new-declarator-opt"]
  1104 -> 1103 [style=dashed label="noptr-new-declarator"]
  1104 -> 1104 [style=dashed label="ptr-operator"]
  1104 -> 96 [style=dashed label="simple-template-id"]
  1104 -> 102 [style=dashed label="template-name"]
  1104 -> 106 [style=dashed label="type-name"]
  1104 -> 108 [style=dashed label="typedef-name"]
  1104 -> "1104R475d" [label="[\"&\", \"&&\", \"*\"]", style=solid]
 "1104R475d" [label="R475", fillcolor=5, shape=diamond, style=filled]
  1104 -> "1104R475" [style=solid]
 "1104R475" [label="R475", fillcolor=3, shape=diamond, style=filled]
  1105 [label="State 1105\n\l389 lambda-declarator: \"(\" parameter-declaration-clause \")\" lambda-specifiers • requires-clause-opt\l"]
  1105 -> 399 [style=solid label="\"requires\""]
  1105 -> 718 [style=dashed label="requires-clause"]
  1105 -> 1194 [style=dashed label="requires-clause-opt"]
  1105 -> "1105R634" [style=solid]
 "1105R634" [label="R634", fillcolor=3, shape=diamond, style=filled]
  1106 [label="State 1106\n\l391 lambda-expression: lambda-introducer \"<\" template-parameter-list \">\" requires-clause-opt • lambda-declarator compound-statement\l"]
  1106 -> 1 [style=solid label="\"constexpr\""]
  1106 -> 150 [style=solid label="\"extern\""]
  1106 -> 4 [style=solid label="IDENTIFIER"]
  1106 -> 151 [style=solid label="\"inline\""]
  1106 -> 6 [style=solid label="\"::\""]
  1106 -> 8 [style=solid label="\"typename\""]
  1106 -> 9 [style=solid label="\"virtual\""]
  1106 -> 555 [style=solid label="\"(\""]
  1106 -> 12 [style=solid label="\"class\""]
  1106 -> 13 [style=solid label="\"struct\""]
  1106 -> 14 [style=solid label="\"union\""]
  1106 -> 15 [style=solid label="\"const\""]
  1106 -> 16 [style=solid label="\"volatile\""]
  1106 -> 17 [style=solid label="\"friend\""]
  1106 -> 18 [style=solid label="\"typedef\""]
  1106 -> 19 [style=solid label="\"consteval\""]
  1106 -> 20 [style=solid label="\"constinit\""]
  1106 -> 21 [style=solid label="\"decltype\""]
  1106 -> 22 [style=solid label="\"enum\""]
  1106 -> 23 [style=solid label="\"explicit\""]
  1106 -> 27 [style=solid label="\"char\""]
  1106 -> 28 [style=solid label="\"char8_t\""]
  1106 -> 29 [style=solid label="\"char16_t\""]
  1106 -> 30 [style=solid label="\"char32_t\""]
  1106 -> 31 [style=solid label="\"wchar_t\""]
  1106 -> 32 [style=solid label="\"bool\""]
  1106 -> 33 [style=solid label="\"short\""]
  1106 -> 34 [style=solid label="\"int\""]
  1106 -> 35 [style=solid label="\"long\""]
  1106 -> 36 [style=solid label="\"signed\""]
  1106 -> 37 [style=solid label="\"unsigned\""]
  1106 -> 38 [style=solid label="\"float\""]
  1106 -> 39 [style=solid label="\"double\""]
  1106 -> 40 [style=solid label="\"void\""]
  1106 -> 42 [style=solid label="\"static\""]
  1106 -> 43 [style=solid label="\"thread_local\""]
  1106 -> 44 [style=solid label="\"mutable\""]
  1106 -> 53 [style=dashed label="class-head"]
  1106 -> 54 [style=dashed label="class-key"]
  1106 -> 55 [style=dashed label="class-name"]
  1106 -> 56 [style=dashed label="class-specifier"]
  1106 -> 57 [style=dashed label="cv-qualifier"]
  1106 -> 58 [style=dashed label="decl-specifier"]
  1106 -> 557 [style=dashed label="decl-specifier-seq"]
  1106 -> 558 [style=dashed label="decl-specifier-seq-opt"]
  1106 -> 63 [style=dashed label="decltype-specifier"]
  1106 -> 65 [style=dashed label="defining-type-specifier"]
  1106 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1106 -> 67 [style=dashed label="elaborated-type-specifier"]
  1106 -> 69 [style=dashed label="enum-head"]
  1106 -> 154 [style=dashed label="enum-key"]
  1106 -> 71 [style=dashed label="enum-name"]
  1106 -> 72 [style=dashed label="enum-specifier"]
  1106 -> 155 [style=dashed label="explicit-specifier"]
  1106 -> 79 [style=dashed label="function-specifier"]
  1106 -> 1195 [style=dashed label="lambda-declarator"]
  1106 -> 560 [style=dashed label="lambda-specifiers"]
  1106 -> 85 [style=dashed label="namespace-alias"]
  1106 -> 88 [style=dashed label="namespace-name"]
  1106 -> 89 [style=dashed label="nested-name-specifier"]
  1106 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1106 -> 94 [style=dashed label="placeholder-type-specifier"]
  1106 -> 96 [style=dashed label="simple-template-id"]
  1106 -> 97 [style=dashed label="simple-type-specifier"]
  1106 -> 99 [style=dashed label="storage-class-specifier"]
  1106 -> 102 [style=dashed label="template-name"]
  1106 -> 104 [style=dashed label="type-constraint"]
  1106 -> 105 [style=dashed label="type-constraint-opt"]
  1106 -> 106 [style=dashed label="type-name"]
  1106 -> 107 [style=dashed label="type-specifier"]
  1106 -> 108 [style=dashed label="typedef-name"]
  1106 -> 109 [style=dashed label="typename-specifier"]
  1106 -> "1106R193" [style=solid]
 "1106R193" [label="R193", fillcolor=3, shape=diamond, style=filled]
  1106 -> "1106R469d" [label="[IDENTIFIER]", style=solid]
 "1106R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1106 -> "1106R722d" [label="[\"decltype\"]", style=solid]
 "1106R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1106 -> "1106R722" [label="[\"auto\"]", style=solid]
 "1106R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1107 [label="State 1107\n\l489 noexcept-specifier: \"noexcept\" \"(\" constant-expression • \")\"\l"]
  1107 -> 1196 [style=solid label="\")\""]
  1108 [label="State 1108\n\l716 trailing-return-type-opt: trailing-return-type •\l"]
  1108 -> "1108R716" [style=solid]
 "1108R716" [label="R716", fillcolor=3, shape=diamond, style=filled]
  1109 [label="State 1109\n\l393 lambda-specifiers: decl-specifier-seq-opt noexcept-specifier-opt attribute-specifier-seq-opt trailing-return-type-opt •\l"]
  1109 -> "1109R393" [style=solid]
 "1109R393" [label="R393", fillcolor=3, shape=diamond, style=filled]
  1110 [label="State 1110\n\l456 namespace-alias-definition: \"namespace\" IDENTIFIER • \"=\" qualified-namespace-specifier \";\"\l"]
  1110 -> 338 [style=solid label="\"=\""]
  1111 [label="State 1111\n\l139 class-name: IDENTIFIER •\l248 enum-name: IDENTIFIER •\l380 labeled-statement: attribute-specifier-seq-opt IDENTIFIER • \":\" statement\l455 namespace-alias: IDENTIFIER •\l461 namespace-name: IDENTIFIER •\l708 template-name: IDENTIFIER •\l743 typedef-name: IDENTIFIER •\l767 unqualified-id: IDENTIFIER •\l"]
  1111 -> 1197 [style=solid label="\":\""]
  1111 -> "1111R139" [label="[\"::\"]", style=solid]
 "1111R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  1111 -> "1111R248d" [label="[\"::\"]", style=solid]
 "1111R248d" [label="R248", fillcolor=5, shape=diamond, style=filled]
  1111 -> "1111R455d" [label="[\"::\"]", style=solid]
 "1111R455d" [label="R455", fillcolor=5, shape=diamond, style=filled]
  1111 -> "1111R461d" [label="[\"::\"]", style=solid]
 "1111R461d" [label="R461", fillcolor=5, shape=diamond, style=filled]
  1111 -> "1111R708" [label="[\"<\"]", style=solid]
 "1111R708" [label="R708", fillcolor=3, shape=diamond, style=filled]
  1111 -> "1111R743d" [label="[\"::\"]", style=solid]
 "1111R743d" [label="R743", fillcolor=5, shape=diamond, style=filled]
  1111 -> "1111R767d" [label="[\"<\"]", style=solid]
 "1111R767d" [label="R767", fillcolor=5, shape=diamond, style=filled]
  1111 -> "1111R767" [label="[]", style=solid]
 "1111R767" [label="R767", fillcolor=3, shape=diamond, style=filled]
  1112 [label="State 1112\n\l 80 attribute-specifier: \"[\" • \"[\" attribute-using-prefix-opt attribute-list \"]\" \"]\"\l392 lambda-introducer: \"[\" • lambda-capture-opt \"]\"\l"]
  1112 -> 156 [style=solid label="\"...\""]
  1112 -> 461 [style=solid label="IDENTIFIER"]
  1112 -> 462 [style=solid label="\"this\""]
  1112 -> 463 [style=solid label="\"=\""]
  1112 -> 464 [style=solid label="\"&\""]
  1112 -> 351 [style=solid label="\"[\""]
  1112 -> 465 [style=solid label="\"*\""]
  1112 -> 466 [style=dashed label="ELLIPSIS-opt"]
  1112 -> 467 [style=dashed label="capture"]
  1112 -> 468 [style=dashed label="capture-default"]
  1112 -> 469 [style=dashed label="capture-list"]
  1112 -> 470 [style=dashed label="init-capture"]
  1112 -> 471 [style=dashed label="lambda-capture"]
  1112 -> 472 [style=dashed label="lambda-capture-opt"]
  1112 -> 473 [style=dashed label="simple-capture"]
  1112 -> "1112R5d" [label="[IDENTIFIER]", style=solid]
 "1112R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  1112 -> "1112R386" [label="[]", style=solid]
 "1112R386" [label="R386", fillcolor=3, shape=diamond, style=filled]
  1113 [label="State 1113\n\l173 coroutine-return-statement: \"co_return\" • expr-or-braced-init-list-opt \";\"\l"]
  1113 -> 238 [style=solid label="IDENTIFIER"]
  1113 -> 239 [style=solid label="\"noexcept\""]
  1113 -> 240 [style=solid label="\"!\""]
  1113 -> 241 [style=solid label="\"::\""]
  1113 -> 242 [style=solid label="\"this\""]
  1113 -> 8 [style=solid label="\"typename\""]
  1113 -> 243 [style=solid label="\"+\""]
  1113 -> 244 [style=solid label="\"-\""]
  1113 -> 245 [style=solid label="\"(\""]
  1113 -> 246 [style=solid label="\"&\""]
  1113 -> 247 [style=solid label="\"[\""]
  1113 -> 248 [style=solid label="\"co_await\""]
  1113 -> 398 [style=solid label="\"{\""]
  1113 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1113 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1113 -> 251 [style=solid label="\"operator\""]
  1113 -> 21 [style=solid label="\"decltype\""]
  1113 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1113 -> 253 [style=solid label="\"*\""]
  1113 -> 254 [style=solid label="INTEGER_LITERAL"]
  1113 -> 255 [style=solid label="\"requires\""]
  1113 -> 256 [style=solid label="\"~\""]
  1113 -> 257 [style=solid label="\"++\""]
  1113 -> 258 [style=solid label="\"--\""]
  1113 -> 259 [style=solid label="POINTER_LITERAL"]
  1113 -> 260 [style=solid label="\"dynamic_cast\""]
  1113 -> 261 [style=solid label="\"static_cast\""]
  1113 -> 262 [style=solid label="\"reinterpret_cast\""]
  1113 -> 263 [style=solid label="\"const_cast\""]
  1113 -> 264 [style=solid label="\"typeid\""]
  1113 -> 27 [style=solid label="\"char\""]
  1113 -> 28 [style=solid label="\"char8_t\""]
  1113 -> 29 [style=solid label="\"char16_t\""]
  1113 -> 30 [style=solid label="\"char32_t\""]
  1113 -> 31 [style=solid label="\"wchar_t\""]
  1113 -> 32 [style=solid label="\"bool\""]
  1113 -> 33 [style=solid label="\"short\""]
  1113 -> 34 [style=solid label="\"int\""]
  1113 -> 35 [style=solid label="\"long\""]
  1113 -> 36 [style=solid label="\"signed\""]
  1113 -> 37 [style=solid label="\"unsigned\""]
  1113 -> 38 [style=solid label="\"float\""]
  1113 -> 39 [style=solid label="\"double\""]
  1113 -> 40 [style=solid label="\"void\""]
  1113 -> 118 [style=solid label="STRING_LITERAL"]
  1113 -> 265 [style=solid label="\"throw\""]
  1113 -> 266 [style=solid label="\"sizeof\""]
  1113 -> 267 [style=solid label="\"alignof\""]
  1113 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1113 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1113 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1113 -> 271 [style=solid label="\"co_yield\""]
  1113 -> 272 [style=dashed label="SCOPE-opt"]
  1113 -> 273 [style=dashed label="additive-expression"]
  1113 -> 274 [style=dashed label="and-expression"]
  1113 -> 275 [style=dashed label="assignment-expression"]
  1113 -> 276 [style=dashed label="await-expression"]
  1113 -> 277 [style=dashed label="boolean-literal"]
  1113 -> 1198 [style=dashed label="braced-init-list"]
  1113 -> 278 [style=dashed label="cast-expression"]
  1113 -> 279 [style=dashed label="character-literal"]
  1113 -> 55 [style=dashed label="class-name"]
  1113 -> 280 [style=dashed label="compare-expression"]
  1113 -> 281 [style=dashed label="conditional-expression"]
  1113 -> 282 [style=dashed label="conversion-function-id"]
  1113 -> 63 [style=dashed label="decltype-specifier"]
  1113 -> 283 [style=dashed label="delete-expression"]
  1113 -> 71 [style=dashed label="enum-name"]
  1113 -> 284 [style=dashed label="equality-expression"]
  1113 -> 285 [style=dashed label="exclusive-or-expression"]
  1113 -> 1199 [style=dashed label="expr-or-braced-init-list"]
  1113 -> 1200 [style=dashed label="expr-or-braced-init-list-opt"]
  1113 -> 1201 [style=dashed label="expression"]
  1113 -> 287 [style=dashed label="floating-point-literal"]
  1113 -> 288 [style=dashed label="fold-expression"]
  1113 -> 289 [style=dashed label="id-expression"]
  1113 -> 290 [style=dashed label="inclusive-or-expression"]
  1113 -> 291 [style=dashed label="integer-literal"]
  1113 -> 292 [style=dashed label="lambda-expression"]
  1113 -> 293 [style=dashed label="lambda-introducer"]
  1113 -> 294 [style=dashed label="literal"]
  1113 -> 295 [style=dashed label="literal-operator-id"]
  1113 -> 296 [style=dashed label="logical-and-expression"]
  1113 -> 297 [style=dashed label="logical-or-expression"]
  1113 -> 298 [style=dashed label="multiplicative-expression"]
  1113 -> 85 [style=dashed label="namespace-alias"]
  1113 -> 88 [style=dashed label="namespace-name"]
  1113 -> 299 [style=dashed label="nested-name-specifier"]
  1113 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1113 -> 300 [style=dashed label="new-expression"]
  1113 -> 301 [style=dashed label="noexcept-expression"]
  1113 -> 302 [style=dashed label="operator-function-id"]
  1113 -> 94 [style=dashed label="placeholder-type-specifier"]
  1113 -> 303 [style=dashed label="pm-expression"]
  1113 -> 304 [style=dashed label="pointer-literal"]
  1113 -> 305 [style=dashed label="postfix-expression"]
  1113 -> 306 [style=dashed label="primary-expression"]
  1113 -> 307 [style=dashed label="qualified-id"]
  1113 -> 308 [style=dashed label="relational-expression"]
  1113 -> 309 [style=dashed label="requires-expression"]
  1113 -> 310 [style=dashed label="shift-expression"]
  1113 -> 311 [style=dashed label="simple-template-id"]
  1113 -> 312 [style=dashed label="simple-type-specifier"]
  1113 -> 313 [style=dashed label="string-literal"]
  1113 -> 314 [style=dashed label="template-id"]
  1113 -> 102 [style=dashed label="template-name"]
  1113 -> 315 [style=dashed label="throw-expression"]
  1113 -> 104 [style=dashed label="type-constraint"]
  1113 -> 105 [style=dashed label="type-constraint-opt"]
  1113 -> 106 [style=dashed label="type-name"]
  1113 -> 108 [style=dashed label="typedef-name"]
  1113 -> 316 [style=dashed label="typename-specifier"]
  1113 -> 317 [style=dashed label="unary-expression"]
  1113 -> 318 [style=dashed label="unary-operator"]
  1113 -> 319 [style=dashed label="unqualified-id"]
  1113 -> 320 [style=dashed label="user-defined-character-literal"]
  1113 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1113 -> 322 [style=dashed label="user-defined-integer-literal"]
  1113 -> 323 [style=dashed label="user-defined-literal"]
  1113 -> 324 [style=dashed label="user-defined-string-literal"]
  1113 -> 325 [style=dashed label="yield-expression"]
  1113 -> "1113R19" [style=solid]
 "1113R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1113 -> "1113R277" [label="[\";\"]", style=solid]
 "1113R277" [label="R277", fillcolor=3, shape=diamond, style=filled]
  1113 -> "1113R469d" [label="[IDENTIFIER]", style=solid]
 "1113R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1113 -> "1113R722d" [label="[\"decltype\"]", style=solid]
 "1113R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1113 -> "1113R722" [label="[\"auto\"]", style=solid]
 "1113R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1114 [label="State 1114\n\l382 labeled-statement: attribute-specifier-seq-opt \"default\" • \":\" statement\l"]
  1114 -> 1202 [style=solid label="\":\""]
  1115 [label="State 1115\n\l719 try-block: \"try\" • compound-statement handler-seq\l"]
  1115 -> 813 [style=solid label="\"{\""]
  1115 -> 1203 [style=dashed label="compound-statement"]
  1116 [label="State 1116\n\l371 iteration-statement: \"while\" • \"(\" condition \")\" statement\l"]
  1116 -> 1204 [style=solid label="\"(\""]
  1117 [label="State 1117\n\l372 iteration-statement: \"do\" • statement \"while\" \"(\" expression \")\" \";\"\l"]
  1117 -> 1 [style=solid label="\"constexpr\""]
  1117 -> 150 [style=solid label="\"extern\""]
  1117 -> 4 [style=solid label="IDENTIFIER"]
  1117 -> 151 [style=solid label="\"inline\""]
  1117 -> 6 [style=solid label="\"::\""]
  1117 -> 8 [style=solid label="\"typename\""]
  1117 -> 9 [style=solid label="\"virtual\""]
  1117 -> 10 [style=solid label="\"using\""]
  1117 -> 12 [style=solid label="\"class\""]
  1117 -> 13 [style=solid label="\"struct\""]
  1117 -> 14 [style=solid label="\"union\""]
  1117 -> 15 [style=solid label="\"const\""]
  1117 -> 16 [style=solid label="\"volatile\""]
  1117 -> 17 [style=solid label="\"friend\""]
  1117 -> 18 [style=solid label="\"typedef\""]
  1117 -> 19 [style=solid label="\"consteval\""]
  1117 -> 20 [style=solid label="\"constinit\""]
  1117 -> 21 [style=solid label="\"decltype\""]
  1117 -> 22 [style=solid label="\"enum\""]
  1117 -> 23 [style=solid label="\"explicit\""]
  1117 -> 991 [style=solid label="\"namespace\""]
  1117 -> 27 [style=solid label="\"char\""]
  1117 -> 28 [style=solid label="\"char8_t\""]
  1117 -> 29 [style=solid label="\"char16_t\""]
  1117 -> 30 [style=solid label="\"char32_t\""]
  1117 -> 31 [style=solid label="\"wchar_t\""]
  1117 -> 32 [style=solid label="\"bool\""]
  1117 -> 33 [style=solid label="\"short\""]
  1117 -> 34 [style=solid label="\"int\""]
  1117 -> 35 [style=solid label="\"long\""]
  1117 -> 36 [style=solid label="\"signed\""]
  1117 -> 37 [style=solid label="\"unsigned\""]
  1117 -> 38 [style=solid label="\"float\""]
  1117 -> 39 [style=solid label="\"double\""]
  1117 -> 40 [style=solid label="\"void\""]
  1117 -> 41 [style=solid label="\"static_assert\""]
  1117 -> 42 [style=solid label="\"static\""]
  1117 -> 43 [style=solid label="\"thread_local\""]
  1117 -> 44 [style=solid label="\"mutable\""]
  1117 -> 47 [style=dashed label="alias-declaration"]
  1117 -> 48 [style=dashed label="asm-declaration"]
  1117 -> 992 [style=dashed label="attribute-specifier-seq"]
  1117 -> 993 [style=dashed label="attribute-specifier-seq-opt"]
  1117 -> 994 [style=dashed label="block-declaration"]
  1117 -> 53 [style=dashed label="class-head"]
  1117 -> 54 [style=dashed label="class-key"]
  1117 -> 55 [style=dashed label="class-name"]
  1117 -> 56 [style=dashed label="class-specifier"]
  1117 -> 57 [style=dashed label="cv-qualifier"]
  1117 -> 58 [style=dashed label="decl-specifier"]
  1117 -> 59 [style=dashed label="decl-specifier-seq"]
  1117 -> 995 [style=dashed label="declaration-statement"]
  1117 -> 63 [style=dashed label="decltype-specifier"]
  1117 -> 65 [style=dashed label="defining-type-specifier"]
  1117 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1117 -> 67 [style=dashed label="elaborated-type-specifier"]
  1117 -> 69 [style=dashed label="enum-head"]
  1117 -> 70 [style=dashed label="enum-key"]
  1117 -> 71 [style=dashed label="enum-name"]
  1117 -> 72 [style=dashed label="enum-specifier"]
  1117 -> 155 [style=dashed label="explicit-specifier"]
  1117 -> 79 [style=dashed label="function-specifier"]
  1117 -> 996 [style=dashed label="labeled-statement"]
  1117 -> 85 [style=dashed label="namespace-alias"]
  1117 -> 86 [style=dashed label="namespace-alias-definition"]
  1117 -> 88 [style=dashed label="namespace-name"]
  1117 -> 89 [style=dashed label="nested-name-specifier"]
  1117 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1117 -> 93 [style=dashed label="opaque-enum-declaration"]
  1117 -> 94 [style=dashed label="placeholder-type-specifier"]
  1117 -> 95 [style=dashed label="simple-declaration"]
  1117 -> 96 [style=dashed label="simple-template-id"]
  1117 -> 97 [style=dashed label="simple-type-specifier"]
  1117 -> 1205 [style=dashed label="statement"]
  1117 -> 98 [style=dashed label="static_assert-declaration"]
  1117 -> 99 [style=dashed label="storage-class-specifier"]
  1117 -> 102 [style=dashed label="template-name"]
  1117 -> 104 [style=dashed label="type-constraint"]
  1117 -> 105 [style=dashed label="type-constraint-opt"]
  1117 -> 106 [style=dashed label="type-name"]
  1117 -> 107 [style=dashed label="type-specifier"]
  1117 -> 108 [style=dashed label="typedef-name"]
  1117 -> 109 [style=dashed label="typename-specifier"]
  1117 -> 111 [style=dashed label="using-declaration"]
  1117 -> 112 [style=dashed label="using-directive"]
  1117 -> 113 [style=dashed label="using-enum-declaration"]
  1117 -> "1117R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1117R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1117 -> "1117R83" [style=solid]
 "1117R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1117 -> "1117R469d" [label="[IDENTIFIER]", style=solid]
 "1117R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1117 -> "1117R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1117R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1118 [label="State 1118\n\l373 iteration-statement: \"for\" • \"(\" init-statement condition-opt \";\" expression-opt \")\" statement\l374                    | \"for\" • \"(\" init-statement-opt for-range-declaration \":\" for-range-initializer \")\" statement\l"]
  1118 -> 1206 [style=solid label="\"(\""]
  1119 [label="State 1119\n\l375 jump-statement: \"break\" • \";\"\l"]
  1119 -> 1207 [style=solid label="\";\""]
  1120 [label="State 1120\n\l376 jump-statement: \"continue\" • \";\"\l"]
  1120 -> 1208 [style=solid label="\";\""]
  1121 [label="State 1121\n\l377 jump-statement: \"return\" • expr-or-braced-init-list-opt \";\"\l"]
  1121 -> 238 [style=solid label="IDENTIFIER"]
  1121 -> 239 [style=solid label="\"noexcept\""]
  1121 -> 240 [style=solid label="\"!\""]
  1121 -> 241 [style=solid label="\"::\""]
  1121 -> 242 [style=solid label="\"this\""]
  1121 -> 8 [style=solid label="\"typename\""]
  1121 -> 243 [style=solid label="\"+\""]
  1121 -> 244 [style=solid label="\"-\""]
  1121 -> 245 [style=solid label="\"(\""]
  1121 -> 246 [style=solid label="\"&\""]
  1121 -> 247 [style=solid label="\"[\""]
  1121 -> 248 [style=solid label="\"co_await\""]
  1121 -> 398 [style=solid label="\"{\""]
  1121 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1121 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1121 -> 251 [style=solid label="\"operator\""]
  1121 -> 21 [style=solid label="\"decltype\""]
  1121 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1121 -> 253 [style=solid label="\"*\""]
  1121 -> 254 [style=solid label="INTEGER_LITERAL"]
  1121 -> 255 [style=solid label="\"requires\""]
  1121 -> 256 [style=solid label="\"~\""]
  1121 -> 257 [style=solid label="\"++\""]
  1121 -> 258 [style=solid label="\"--\""]
  1121 -> 259 [style=solid label="POINTER_LITERAL"]
  1121 -> 260 [style=solid label="\"dynamic_cast\""]
  1121 -> 261 [style=solid label="\"static_cast\""]
  1121 -> 262 [style=solid label="\"reinterpret_cast\""]
  1121 -> 263 [style=solid label="\"const_cast\""]
  1121 -> 264 [style=solid label="\"typeid\""]
  1121 -> 27 [style=solid label="\"char\""]
  1121 -> 28 [style=solid label="\"char8_t\""]
  1121 -> 29 [style=solid label="\"char16_t\""]
  1121 -> 30 [style=solid label="\"char32_t\""]
  1121 -> 31 [style=solid label="\"wchar_t\""]
  1121 -> 32 [style=solid label="\"bool\""]
  1121 -> 33 [style=solid label="\"short\""]
  1121 -> 34 [style=solid label="\"int\""]
  1121 -> 35 [style=solid label="\"long\""]
  1121 -> 36 [style=solid label="\"signed\""]
  1121 -> 37 [style=solid label="\"unsigned\""]
  1121 -> 38 [style=solid label="\"float\""]
  1121 -> 39 [style=solid label="\"double\""]
  1121 -> 40 [style=solid label="\"void\""]
  1121 -> 118 [style=solid label="STRING_LITERAL"]
  1121 -> 265 [style=solid label="\"throw\""]
  1121 -> 266 [style=solid label="\"sizeof\""]
  1121 -> 267 [style=solid label="\"alignof\""]
  1121 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1121 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1121 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1121 -> 271 [style=solid label="\"co_yield\""]
  1121 -> 272 [style=dashed label="SCOPE-opt"]
  1121 -> 273 [style=dashed label="additive-expression"]
  1121 -> 274 [style=dashed label="and-expression"]
  1121 -> 275 [style=dashed label="assignment-expression"]
  1121 -> 276 [style=dashed label="await-expression"]
  1121 -> 277 [style=dashed label="boolean-literal"]
  1121 -> 1198 [style=dashed label="braced-init-list"]
  1121 -> 278 [style=dashed label="cast-expression"]
  1121 -> 279 [style=dashed label="character-literal"]
  1121 -> 55 [style=dashed label="class-name"]
  1121 -> 280 [style=dashed label="compare-expression"]
  1121 -> 281 [style=dashed label="conditional-expression"]
  1121 -> 282 [style=dashed label="conversion-function-id"]
  1121 -> 63 [style=dashed label="decltype-specifier"]
  1121 -> 283 [style=dashed label="delete-expression"]
  1121 -> 71 [style=dashed label="enum-name"]
  1121 -> 284 [style=dashed label="equality-expression"]
  1121 -> 285 [style=dashed label="exclusive-or-expression"]
  1121 -> 1199 [style=dashed label="expr-or-braced-init-list"]
  1121 -> 1209 [style=dashed label="expr-or-braced-init-list-opt"]
  1121 -> 1201 [style=dashed label="expression"]
  1121 -> 287 [style=dashed label="floating-point-literal"]
  1121 -> 288 [style=dashed label="fold-expression"]
  1121 -> 289 [style=dashed label="id-expression"]
  1121 -> 290 [style=dashed label="inclusive-or-expression"]
  1121 -> 291 [style=dashed label="integer-literal"]
  1121 -> 292 [style=dashed label="lambda-expression"]
  1121 -> 293 [style=dashed label="lambda-introducer"]
  1121 -> 294 [style=dashed label="literal"]
  1121 -> 295 [style=dashed label="literal-operator-id"]
  1121 -> 296 [style=dashed label="logical-and-expression"]
  1121 -> 297 [style=dashed label="logical-or-expression"]
  1121 -> 298 [style=dashed label="multiplicative-expression"]
  1121 -> 85 [style=dashed label="namespace-alias"]
  1121 -> 88 [style=dashed label="namespace-name"]
  1121 -> 299 [style=dashed label="nested-name-specifier"]
  1121 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1121 -> 300 [style=dashed label="new-expression"]
  1121 -> 301 [style=dashed label="noexcept-expression"]
  1121 -> 302 [style=dashed label="operator-function-id"]
  1121 -> 94 [style=dashed label="placeholder-type-specifier"]
  1121 -> 303 [style=dashed label="pm-expression"]
  1121 -> 304 [style=dashed label="pointer-literal"]
  1121 -> 305 [style=dashed label="postfix-expression"]
  1121 -> 306 [style=dashed label="primary-expression"]
  1121 -> 307 [style=dashed label="qualified-id"]
  1121 -> 308 [style=dashed label="relational-expression"]
  1121 -> 309 [style=dashed label="requires-expression"]
  1121 -> 310 [style=dashed label="shift-expression"]
  1121 -> 311 [style=dashed label="simple-template-id"]
  1121 -> 312 [style=dashed label="simple-type-specifier"]
  1121 -> 313 [style=dashed label="string-literal"]
  1121 -> 314 [style=dashed label="template-id"]
  1121 -> 102 [style=dashed label="template-name"]
  1121 -> 315 [style=dashed label="throw-expression"]
  1121 -> 104 [style=dashed label="type-constraint"]
  1121 -> 105 [style=dashed label="type-constraint-opt"]
  1121 -> 106 [style=dashed label="type-name"]
  1121 -> 108 [style=dashed label="typedef-name"]
  1121 -> 316 [style=dashed label="typename-specifier"]
  1121 -> 317 [style=dashed label="unary-expression"]
  1121 -> 318 [style=dashed label="unary-operator"]
  1121 -> 319 [style=dashed label="unqualified-id"]
  1121 -> 320 [style=dashed label="user-defined-character-literal"]
  1121 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1121 -> 322 [style=dashed label="user-defined-integer-literal"]
  1121 -> 323 [style=dashed label="user-defined-literal"]
  1121 -> 324 [style=dashed label="user-defined-string-literal"]
  1121 -> 325 [style=dashed label="yield-expression"]
  1121 -> "1121R19" [style=solid]
 "1121R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1121 -> "1121R277" [label="[\";\"]", style=solid]
 "1121R277" [label="R277", fillcolor=3, shape=diamond, style=filled]
  1121 -> "1121R469d" [label="[IDENTIFIER]", style=solid]
 "1121R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1121 -> "1121R722d" [label="[\"decltype\"]", style=solid]
 "1121R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1121 -> "1121R722" [label="[\"auto\"]", style=solid]
 "1121R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1122 [label="State 1122\n\l379 jump-statement: \"goto\" • IDENTIFIER \";\"\l"]
  1122 -> 1210 [style=solid label="IDENTIFIER"]
  1123 [label="State 1123\n\l381 labeled-statement: attribute-specifier-seq-opt \"case\" • constant-expression \":\" statement\l"]
  1123 -> 238 [style=solid label="IDENTIFIER"]
  1123 -> 239 [style=solid label="\"noexcept\""]
  1123 -> 240 [style=solid label="\"!\""]
  1123 -> 241 [style=solid label="\"::\""]
  1123 -> 242 [style=solid label="\"this\""]
  1123 -> 8 [style=solid label="\"typename\""]
  1123 -> 243 [style=solid label="\"+\""]
  1123 -> 244 [style=solid label="\"-\""]
  1123 -> 245 [style=solid label="\"(\""]
  1123 -> 246 [style=solid label="\"&\""]
  1123 -> 247 [style=solid label="\"[\""]
  1123 -> 248 [style=solid label="\"co_await\""]
  1123 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1123 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1123 -> 251 [style=solid label="\"operator\""]
  1123 -> 21 [style=solid label="\"decltype\""]
  1123 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1123 -> 253 [style=solid label="\"*\""]
  1123 -> 254 [style=solid label="INTEGER_LITERAL"]
  1123 -> 255 [style=solid label="\"requires\""]
  1123 -> 256 [style=solid label="\"~\""]
  1123 -> 257 [style=solid label="\"++\""]
  1123 -> 258 [style=solid label="\"--\""]
  1123 -> 259 [style=solid label="POINTER_LITERAL"]
  1123 -> 260 [style=solid label="\"dynamic_cast\""]
  1123 -> 261 [style=solid label="\"static_cast\""]
  1123 -> 262 [style=solid label="\"reinterpret_cast\""]
  1123 -> 263 [style=solid label="\"const_cast\""]
  1123 -> 264 [style=solid label="\"typeid\""]
  1123 -> 27 [style=solid label="\"char\""]
  1123 -> 28 [style=solid label="\"char8_t\""]
  1123 -> 29 [style=solid label="\"char16_t\""]
  1123 -> 30 [style=solid label="\"char32_t\""]
  1123 -> 31 [style=solid label="\"wchar_t\""]
  1123 -> 32 [style=solid label="\"bool\""]
  1123 -> 33 [style=solid label="\"short\""]
  1123 -> 34 [style=solid label="\"int\""]
  1123 -> 35 [style=solid label="\"long\""]
  1123 -> 36 [style=solid label="\"signed\""]
  1123 -> 37 [style=solid label="\"unsigned\""]
  1123 -> 38 [style=solid label="\"float\""]
  1123 -> 39 [style=solid label="\"double\""]
  1123 -> 40 [style=solid label="\"void\""]
  1123 -> 118 [style=solid label="STRING_LITERAL"]
  1123 -> 266 [style=solid label="\"sizeof\""]
  1123 -> 267 [style=solid label="\"alignof\""]
  1123 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1123 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1123 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1123 -> 272 [style=dashed label="SCOPE-opt"]
  1123 -> 273 [style=dashed label="additive-expression"]
  1123 -> 274 [style=dashed label="and-expression"]
  1123 -> 276 [style=dashed label="await-expression"]
  1123 -> 277 [style=dashed label="boolean-literal"]
  1123 -> 278 [style=dashed label="cast-expression"]
  1123 -> 279 [style=dashed label="character-literal"]
  1123 -> 55 [style=dashed label="class-name"]
  1123 -> 280 [style=dashed label="compare-expression"]
  1123 -> 327 [style=dashed label="conditional-expression"]
  1123 -> 1211 [style=dashed label="constant-expression"]
  1123 -> 282 [style=dashed label="conversion-function-id"]
  1123 -> 63 [style=dashed label="decltype-specifier"]
  1123 -> 283 [style=dashed label="delete-expression"]
  1123 -> 71 [style=dashed label="enum-name"]
  1123 -> 284 [style=dashed label="equality-expression"]
  1123 -> 285 [style=dashed label="exclusive-or-expression"]
  1123 -> 287 [style=dashed label="floating-point-literal"]
  1123 -> 288 [style=dashed label="fold-expression"]
  1123 -> 289 [style=dashed label="id-expression"]
  1123 -> 290 [style=dashed label="inclusive-or-expression"]
  1123 -> 291 [style=dashed label="integer-literal"]
  1123 -> 292 [style=dashed label="lambda-expression"]
  1123 -> 293 [style=dashed label="lambda-introducer"]
  1123 -> 294 [style=dashed label="literal"]
  1123 -> 295 [style=dashed label="literal-operator-id"]
  1123 -> 296 [style=dashed label="logical-and-expression"]
  1123 -> 329 [style=dashed label="logical-or-expression"]
  1123 -> 298 [style=dashed label="multiplicative-expression"]
  1123 -> 85 [style=dashed label="namespace-alias"]
  1123 -> 88 [style=dashed label="namespace-name"]
  1123 -> 299 [style=dashed label="nested-name-specifier"]
  1123 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1123 -> 300 [style=dashed label="new-expression"]
  1123 -> 301 [style=dashed label="noexcept-expression"]
  1123 -> 302 [style=dashed label="operator-function-id"]
  1123 -> 94 [style=dashed label="placeholder-type-specifier"]
  1123 -> 303 [style=dashed label="pm-expression"]
  1123 -> 304 [style=dashed label="pointer-literal"]
  1123 -> 305 [style=dashed label="postfix-expression"]
  1123 -> 306 [style=dashed label="primary-expression"]
  1123 -> 307 [style=dashed label="qualified-id"]
  1123 -> 308 [style=dashed label="relational-expression"]
  1123 -> 309 [style=dashed label="requires-expression"]
  1123 -> 310 [style=dashed label="shift-expression"]
  1123 -> 311 [style=dashed label="simple-template-id"]
  1123 -> 312 [style=dashed label="simple-type-specifier"]
  1123 -> 313 [style=dashed label="string-literal"]
  1123 -> 314 [style=dashed label="template-id"]
  1123 -> 102 [style=dashed label="template-name"]
  1123 -> 104 [style=dashed label="type-constraint"]
  1123 -> 105 [style=dashed label="type-constraint-opt"]
  1123 -> 106 [style=dashed label="type-name"]
  1123 -> 108 [style=dashed label="typedef-name"]
  1123 -> 316 [style=dashed label="typename-specifier"]
  1123 -> 317 [style=dashed label="unary-expression"]
  1123 -> 318 [style=dashed label="unary-operator"]
  1123 -> 319 [style=dashed label="unqualified-id"]
  1123 -> 320 [style=dashed label="user-defined-character-literal"]
  1123 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1123 -> 322 [style=dashed label="user-defined-integer-literal"]
  1123 -> 323 [style=dashed label="user-defined-literal"]
  1123 -> 324 [style=dashed label="user-defined-string-literal"]
  1123 -> "1123R19" [style=solid]
 "1123R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1123 -> "1123R469d" [label="[IDENTIFIER]", style=solid]
 "1123R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1123 -> "1123R722d" [label="[\"decltype\"]", style=solid]
 "1123R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1123 -> "1123R722" [label="[\"auto\"]", style=solid]
 "1123R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1124 [label="State 1124\n\l640 selection-statement: \"if\" • CONSTEXPR-opt \"(\" init-statement-opt condition \")\" statement\l641                    | \"if\" • CONSTEXPR-opt \"(\" init-statement-opt condition \")\" statement \"else\" statement\l642                    | \"if\" • NOT-opt \"consteval\" compound-statement\l643                    | \"if\" • NOT-opt \"consteval\" compound-statement \"else\" statement\l"]
  1124 -> 1212 [style=solid label="\"constexpr\""]
  1124 -> 1213 [style=solid label="\"!\""]
  1124 -> 1214 [style=dashed label="CONSTEXPR-opt"]
  1124 -> 1215 [style=dashed label="NOT-opt"]
  1124 -> "1124R3" [style=solid]
 "1124R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  1124 -> "1124R17" [label="[\"consteval\"]", style=solid]
 "1124R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  1125 [label="State 1125\n\l644 selection-statement: \"switch\" • \"(\" init-statement-opt condition \")\" statement\l"]
  1125 -> 1216 [style=solid label="\"(\""]
  1126 [label="State 1126\n\l678 statement: attribute-specifier-seq-opt compound-statement •\l"]
  1126 -> "1126R678" [style=solid]
 "1126R678" [label="R678", fillcolor=3, shape=diamond, style=filled]
  1127 [label="State 1127\n\l378 jump-statement: coroutine-return-statement •\l"]
  1127 -> "1127R378" [style=solid]
 "1127R378" [label="R378", fillcolor=3, shape=diamond, style=filled]
  1128 [label="State 1128\n\l654 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq • ref-qualifier-opt \"[\" identifier-list \"]\" initializer \";\"\l"]
  1128 -> 357 [style=solid label="\"&\""]
  1128 -> 358 [style=solid label="\"&&\""]
  1128 -> 359 [style=dashed label="ref-qualifier"]
  1128 -> 360 [style=dashed label="ref-qualifier-opt"]
  1128 -> "1128R616" [style=solid]
 "1128R616" [label="R616", fillcolor=3, shape=diamond, style=filled]
  1129 [label="State 1129\n\l280 expression: expression • \",\" assignment-expression\l285 expression-opt: expression •\l"]
  1129 -> 552 [style=solid label="\",\""]
  1129 -> "1129R285" [style=solid]
 "1129R285" [label="R285", fillcolor=3, shape=diamond, style=filled]
  1130 [label="State 1130\n\l286 expression-statement: expression-opt • \";\"\l"]
  1130 -> 1217 [style=solid label="\";\""]
  1131 [label="State 1131\n\l677 statement: attribute-specifier-seq-opt expression-statement •\l"]
  1131 -> "1131R677" [style=solid]
 "1131R677" [label="R677", fillcolor=3, shape=diamond, style=filled]
  1132 [label="State 1132\n\l680 statement: attribute-specifier-seq-opt iteration-statement •\l"]
  1132 -> "1132R680" [style=solid]
 "1132R680" [label="R680", fillcolor=3, shape=diamond, style=filled]
  1133 [label="State 1133\n\l681 statement: attribute-specifier-seq-opt jump-statement •\l"]
  1133 -> "1133R681" [style=solid]
 "1133R681" [label="R681", fillcolor=3, shape=diamond, style=filled]
  1134 [label="State 1134\n\l679 statement: attribute-specifier-seq-opt selection-statement •\l"]
  1134 -> "1134R679" [style=solid]
 "1134R679" [label="R679", fillcolor=3, shape=diamond, style=filled]
  1135 [label="State 1135\n\l683 statement: attribute-specifier-seq-opt try-block •\l"]
  1135 -> "1135R683" [style=solid]
 "1135R683" [label="R683", fillcolor=3, shape=diamond, style=filled]
  1136 [label="State 1136\n\l685 statement-seq: statement-seq statement •\l"]
  1136 -> "1136R685" [style=solid]
 "1136R685" [label="R685", fillcolor=3, shape=diamond, style=filled]
  1137 [label="State 1137\n\l151 compound-statement: \"{\" statement-seq-opt \"}\" •\l"]
  1137 -> "1137R151" [style=solid]
 "1137R151" [label="R151", fillcolor=3, shape=diamond, style=filled]
  1138 [label="State 1138\n\l159 conditional-expression: logical-or-expression \"?\" expression \":\" assignment-expression •\l"]
  1138 -> "1138R159" [style=solid]
 "1138R159" [label="R159", fillcolor=3, shape=diamond, style=filled]
  1139 [label="State 1139\n\l471 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" INLINE-opt IDENTIFIER \"{\" namespace-body • \"}\"\l"]
  1139 -> 1218 [style=solid label="\"}\""]
  1140 [label="State 1140\n\l689 static_assert-declaration: \"static_assert\" \"(\" constant-expression \",\" string-literal \")\" \";\" •\l"]
  1140 -> "1140R689" [style=solid]
 "1140R689" [label="R689", fillcolor=3, shape=diamond, style=filled]
  1141 [label="State 1141\n\l454 named-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt IDENTIFIER \"{\" namespace-body \"}\" •\l"]
  1141 -> "1141R454" [style=solid]
 "1141R454" [label="R454", fillcolor=3, shape=diamond, style=filled]
  1142 [label="State 1142\n\l 75 attribute-list: attribute-list \",\" attribute • \"...\"\l 78 attribute-opt: attribute •\l"]
  1142 -> 1219 [style=solid label="\"...\""]
  1142 -> "1142R78" [style=solid]
 "1142R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  1143 [label="State 1143\n\l 73 attribute-list: attribute-list \",\" attribute-opt •\l"]
  1143 -> "1143R73" [style=solid]
 "1143R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  1144 [label="State 1144\n\l 80 attribute-specifier: \"[\" \"[\" attribute-using-prefix-opt attribute-list \"]\" \"]\" •\l"]
  1144 -> "1144R80" [style=solid]
 "1144R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  1145 [label="State 1145\n\l 79 attribute-scoped-token: attribute-namespace \"::\" IDENTIFIER •\l"]
  1145 -> "1145R79" [style=solid]
 "1145R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
  1146 [label="State 1146\n\l 91 balanced-token: \"(\" • balanced-token-seq-opt \")\"\l"]
  1146 -> 1146 [style=solid label="\"(\""]
  1146 -> 1147 [style=solid label="\"[\""]
  1146 -> 1148 [style=solid label="\"{\""]
  1146 -> 1149 [style=solid label="BALANCED_TOKEN"]
  1146 -> 1150 [style=dashed label="balanced-token"]
  1146 -> 1151 [style=dashed label="balanced-token-seq"]
  1146 -> 1220 [style=dashed label="balanced-token-seq-opt"]
  1146 -> "1146R97" [style=solid]
 "1146R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  1147 [label="State 1147\n\l 92 balanced-token: \"[\" • balanced-token-seq-opt \"]\"\l"]
  1147 -> 1146 [style=solid label="\"(\""]
  1147 -> 1147 [style=solid label="\"[\""]
  1147 -> 1148 [style=solid label="\"{\""]
  1147 -> 1149 [style=solid label="BALANCED_TOKEN"]
  1147 -> 1150 [style=dashed label="balanced-token"]
  1147 -> 1151 [style=dashed label="balanced-token-seq"]
  1147 -> 1221 [style=dashed label="balanced-token-seq-opt"]
  1147 -> "1147R97" [style=solid]
 "1147R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  1148 [label="State 1148\n\l 93 balanced-token: \"{\" • balanced-token-seq-opt \"}\"\l"]
  1148 -> 1146 [style=solid label="\"(\""]
  1148 -> 1147 [style=solid label="\"[\""]
  1148 -> 1148 [style=solid label="\"{\""]
  1148 -> 1149 [style=solid label="BALANCED_TOKEN"]
  1148 -> 1150 [style=dashed label="balanced-token"]
  1148 -> 1151 [style=dashed label="balanced-token-seq"]
  1148 -> 1222 [style=dashed label="balanced-token-seq-opt"]
  1148 -> "1148R97" [style=solid]
 "1148R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  1149 [label="State 1149\n\l 94 balanced-token: BALANCED_TOKEN •\l"]
  1149 -> "1149R94" [style=solid]
 "1149R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
  1150 [label="State 1150\n\l 95 balanced-token-seq: balanced-token •\l"]
  1150 -> "1150R95" [style=solid]
 "1150R95" [label="R95", fillcolor=3, shape=diamond, style=filled]
  1151 [label="State 1151\n\l 96 balanced-token-seq: balanced-token-seq • balanced-token\l 98 balanced-token-seq-opt: balanced-token-seq •\l"]
  1151 -> 1146 [style=solid label="\"(\""]
  1151 -> 1147 [style=solid label="\"[\""]
  1151 -> 1148 [style=solid label="\"{\""]
  1151 -> 1149 [style=solid label="BALANCED_TOKEN"]
  1151 -> 1223 [style=dashed label="balanced-token"]
  1151 -> "1151R98" [style=solid]
 "1151R98" [label="R98", fillcolor=3, shape=diamond, style=filled]
  1152 [label="State 1152\n\l 68 attribute-argument-clause: \"(\" balanced-token-seq-opt • \")\"\l"]
  1152 -> 1224 [style=solid label="\")\""]
  1153 [label="State 1153\n\l346 identifier-list: identifier-list \",\" IDENTIFIER •\l"]
  1153 -> "1153R346" [style=solid]
 "1153R346" [label="R346", fillcolor=3, shape=diamond, style=filled]
  1154 [label="State 1154\n\l654 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" initializer • \";\"\l"]
  1154 -> 1225 [style=solid label="\";\""]
  1155 [label="State 1155\n\l329 function-body: \"=\" \"delete\" \";\" •\l"]
  1155 -> "1155R329" [style=solid]
 "1155R329" [label="R329", fillcolor=3, shape=diamond, style=filled]
  1156 [label="State 1156\n\l328 function-body: \"=\" \"default\" \";\" •\l"]
  1156 -> "1156R328" [style=solid]
 "1156R328" [label="R328", fillcolor=3, shape=diamond, style=filled]
  1157 [label="State 1157\n\l413 mem-initializer-list: mem-initializer ELLIPSIS-opt •\l"]
  1157 -> "1157R413" [style=solid]
 "1157R413" [label="R413", fillcolor=3, shape=diamond, style=filled]
  1158 [label="State 1158\n\l409 mem-initializer: mem-initializer-id \"(\" • expression-list-opt \")\"\l"]
  1158 -> 238 [style=solid label="IDENTIFIER"]
  1158 -> 239 [style=solid label="\"noexcept\""]
  1158 -> 240 [style=solid label="\"!\""]
  1158 -> 241 [style=solid label="\"::\""]
  1158 -> 242 [style=solid label="\"this\""]
  1158 -> 8 [style=solid label="\"typename\""]
  1158 -> 243 [style=solid label="\"+\""]
  1158 -> 244 [style=solid label="\"-\""]
  1158 -> 245 [style=solid label="\"(\""]
  1158 -> 246 [style=solid label="\"&\""]
  1158 -> 247 [style=solid label="\"[\""]
  1158 -> 248 [style=solid label="\"co_await\""]
  1158 -> 398 [style=solid label="\"{\""]
  1158 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1158 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1158 -> 251 [style=solid label="\"operator\""]
  1158 -> 21 [style=solid label="\"decltype\""]
  1158 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1158 -> 253 [style=solid label="\"*\""]
  1158 -> 254 [style=solid label="INTEGER_LITERAL"]
  1158 -> 255 [style=solid label="\"requires\""]
  1158 -> 256 [style=solid label="\"~\""]
  1158 -> 257 [style=solid label="\"++\""]
  1158 -> 258 [style=solid label="\"--\""]
  1158 -> 259 [style=solid label="POINTER_LITERAL"]
  1158 -> 260 [style=solid label="\"dynamic_cast\""]
  1158 -> 261 [style=solid label="\"static_cast\""]
  1158 -> 262 [style=solid label="\"reinterpret_cast\""]
  1158 -> 263 [style=solid label="\"const_cast\""]
  1158 -> 264 [style=solid label="\"typeid\""]
  1158 -> 27 [style=solid label="\"char\""]
  1158 -> 28 [style=solid label="\"char8_t\""]
  1158 -> 29 [style=solid label="\"char16_t\""]
  1158 -> 30 [style=solid label="\"char32_t\""]
  1158 -> 31 [style=solid label="\"wchar_t\""]
  1158 -> 32 [style=solid label="\"bool\""]
  1158 -> 33 [style=solid label="\"short\""]
  1158 -> 34 [style=solid label="\"int\""]
  1158 -> 35 [style=solid label="\"long\""]
  1158 -> 36 [style=solid label="\"signed\""]
  1158 -> 37 [style=solid label="\"unsigned\""]
  1158 -> 38 [style=solid label="\"float\""]
  1158 -> 39 [style=solid label="\"double\""]
  1158 -> 40 [style=solid label="\"void\""]
  1158 -> 118 [style=solid label="STRING_LITERAL"]
  1158 -> 265 [style=solid label="\"throw\""]
  1158 -> 266 [style=solid label="\"sizeof\""]
  1158 -> 267 [style=solid label="\"alignof\""]
  1158 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1158 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1158 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1158 -> 271 [style=solid label="\"co_yield\""]
  1158 -> 272 [style=dashed label="SCOPE-opt"]
  1158 -> 273 [style=dashed label="additive-expression"]
  1158 -> 274 [style=dashed label="and-expression"]
  1158 -> 662 [style=dashed label="assignment-expression"]
  1158 -> 276 [style=dashed label="await-expression"]
  1158 -> 277 [style=dashed label="boolean-literal"]
  1158 -> 663 [style=dashed label="braced-init-list"]
  1158 -> 278 [style=dashed label="cast-expression"]
  1158 -> 279 [style=dashed label="character-literal"]
  1158 -> 55 [style=dashed label="class-name"]
  1158 -> 280 [style=dashed label="compare-expression"]
  1158 -> 281 [style=dashed label="conditional-expression"]
  1158 -> 282 [style=dashed label="conversion-function-id"]
  1158 -> 63 [style=dashed label="decltype-specifier"]
  1158 -> 283 [style=dashed label="delete-expression"]
  1158 -> 71 [style=dashed label="enum-name"]
  1158 -> 284 [style=dashed label="equality-expression"]
  1158 -> 285 [style=dashed label="exclusive-or-expression"]
  1158 -> 829 [style=dashed label="expression-list"]
  1158 -> 1226 [style=dashed label="expression-list-opt"]
  1158 -> 287 [style=dashed label="floating-point-literal"]
  1158 -> 288 [style=dashed label="fold-expression"]
  1158 -> 289 [style=dashed label="id-expression"]
  1158 -> 290 [style=dashed label="inclusive-or-expression"]
  1158 -> 666 [style=dashed label="initializer-clause"]
  1158 -> 667 [style=dashed label="initializer-list"]
  1158 -> 291 [style=dashed label="integer-literal"]
  1158 -> 292 [style=dashed label="lambda-expression"]
  1158 -> 293 [style=dashed label="lambda-introducer"]
  1158 -> 294 [style=dashed label="literal"]
  1158 -> 295 [style=dashed label="literal-operator-id"]
  1158 -> 296 [style=dashed label="logical-and-expression"]
  1158 -> 297 [style=dashed label="logical-or-expression"]
  1158 -> 298 [style=dashed label="multiplicative-expression"]
  1158 -> 85 [style=dashed label="namespace-alias"]
  1158 -> 88 [style=dashed label="namespace-name"]
  1158 -> 299 [style=dashed label="nested-name-specifier"]
  1158 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1158 -> 300 [style=dashed label="new-expression"]
  1158 -> 301 [style=dashed label="noexcept-expression"]
  1158 -> 302 [style=dashed label="operator-function-id"]
  1158 -> 94 [style=dashed label="placeholder-type-specifier"]
  1158 -> 303 [style=dashed label="pm-expression"]
  1158 -> 304 [style=dashed label="pointer-literal"]
  1158 -> 305 [style=dashed label="postfix-expression"]
  1158 -> 306 [style=dashed label="primary-expression"]
  1158 -> 307 [style=dashed label="qualified-id"]
  1158 -> 308 [style=dashed label="relational-expression"]
  1158 -> 309 [style=dashed label="requires-expression"]
  1158 -> 310 [style=dashed label="shift-expression"]
  1158 -> 311 [style=dashed label="simple-template-id"]
  1158 -> 312 [style=dashed label="simple-type-specifier"]
  1158 -> 313 [style=dashed label="string-literal"]
  1158 -> 314 [style=dashed label="template-id"]
  1158 -> 102 [style=dashed label="template-name"]
  1158 -> 315 [style=dashed label="throw-expression"]
  1158 -> 104 [style=dashed label="type-constraint"]
  1158 -> 105 [style=dashed label="type-constraint-opt"]
  1158 -> 106 [style=dashed label="type-name"]
  1158 -> 108 [style=dashed label="typedef-name"]
  1158 -> 316 [style=dashed label="typename-specifier"]
  1158 -> 317 [style=dashed label="unary-expression"]
  1158 -> 318 [style=dashed label="unary-operator"]
  1158 -> 319 [style=dashed label="unqualified-id"]
  1158 -> 320 [style=dashed label="user-defined-character-literal"]
  1158 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1158 -> 322 [style=dashed label="user-defined-integer-literal"]
  1158 -> 323 [style=dashed label="user-defined-literal"]
  1158 -> 324 [style=dashed label="user-defined-string-literal"]
  1158 -> 325 [style=dashed label="yield-expression"]
  1158 -> "1158R19" [style=solid]
 "1158R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1158 -> "1158R282" [label="[\")\"]", style=solid]
 "1158R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  1158 -> "1158R469d" [label="[IDENTIFIER]", style=solid]
 "1158R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1158 -> "1158R722d" [label="[\"decltype\"]", style=solid]
 "1158R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1158 -> "1158R722" [label="[\"auto\"]", style=solid]
 "1158R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1159 [label="State 1159\n\l410 mem-initializer: mem-initializer-id braced-init-list •\l"]
  1159 -> "1159R410" [style=solid]
 "1159R410" [label="R410", fillcolor=3, shape=diamond, style=filled]
  1160 [label="State 1160\n\l414 mem-initializer-list: mem-initializer-list \",\" • mem-initializer ELLIPSIS-opt\l"]
  1160 -> 1029 [style=solid label="IDENTIFIER"]
  1160 -> 6 [style=solid label="\"::\""]
  1160 -> 21 [style=solid label="\"decltype\""]
  1160 -> 55 [style=dashed label="class-name"]
  1160 -> 1030 [style=dashed label="class-or-decltype"]
  1160 -> 893 [style=dashed label="decltype-specifier"]
  1160 -> 71 [style=dashed label="enum-name"]
  1160 -> 1227 [style=dashed label="mem-initializer"]
  1160 -> 1032 [style=dashed label="mem-initializer-id"]
  1160 -> 85 [style=dashed label="namespace-alias"]
  1160 -> 88 [style=dashed label="namespace-name"]
  1160 -> 894 [style=dashed label="nested-name-specifier"]
  1160 -> 895 [style=dashed label="nested-name-specifier-opt"]
  1160 -> 96 [style=dashed label="simple-template-id"]
  1160 -> 102 [style=dashed label="template-name"]
  1160 -> 106 [style=dashed label="type-name"]
  1160 -> 108 [style=dashed label="typedef-name"]
  1160 -> "1160R469d" [label="[IDENTIFIER]", style=solid]
 "1160R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1161 [label="State 1161\n\l334 function-try-block: \"try\" ctor-initializer-opt compound-statement • handler-seq\l"]
  1161 -> 1228 [style=solid label="\"catch\""]
  1161 -> 1229 [style=dashed label="handler"]
  1161 -> 1230 [style=dashed label="handler-seq"]
  1162 [label="State 1162\n\l564 parameters-and-qualifiers: \"(\" parameter-declaration-clause \")\" cv-qualifier-seq-opt ref-qualifier-opt • noexcept-specifier-opt attribute-specifier-seq-opt\l"]
  1162 -> 810 [style=solid label="\"noexcept\""]
  1162 -> 811 [style=dashed label="noexcept-specifier"]
  1162 -> 1231 [style=dashed label="noexcept-specifier-opt"]
  1162 -> "1162R491" [style=solid]
 "1162R491" [label="R491", fillcolor=3, shape=diamond, style=filled]
  1163 [label="State 1163\n\l429 member-declarator: IDENTIFIER-opt attribute-specifier-seq-opt \":\" • constant-expression brace-or-equal-initializer-opt\l"]
  1163 -> 238 [style=solid label="IDENTIFIER"]
  1163 -> 239 [style=solid label="\"noexcept\""]
  1163 -> 240 [style=solid label="\"!\""]
  1163 -> 241 [style=solid label="\"::\""]
  1163 -> 242 [style=solid label="\"this\""]
  1163 -> 8 [style=solid label="\"typename\""]
  1163 -> 243 [style=solid label="\"+\""]
  1163 -> 244 [style=solid label="\"-\""]
  1163 -> 245 [style=solid label="\"(\""]
  1163 -> 246 [style=solid label="\"&\""]
  1163 -> 247 [style=solid label="\"[\""]
  1163 -> 248 [style=solid label="\"co_await\""]
  1163 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1163 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1163 -> 251 [style=solid label="\"operator\""]
  1163 -> 21 [style=solid label="\"decltype\""]
  1163 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1163 -> 253 [style=solid label="\"*\""]
  1163 -> 254 [style=solid label="INTEGER_LITERAL"]
  1163 -> 255 [style=solid label="\"requires\""]
  1163 -> 256 [style=solid label="\"~\""]
  1163 -> 257 [style=solid label="\"++\""]
  1163 -> 258 [style=solid label="\"--\""]
  1163 -> 259 [style=solid label="POINTER_LITERAL"]
  1163 -> 260 [style=solid label="\"dynamic_cast\""]
  1163 -> 261 [style=solid label="\"static_cast\""]
  1163 -> 262 [style=solid label="\"reinterpret_cast\""]
  1163 -> 263 [style=solid label="\"const_cast\""]
  1163 -> 264 [style=solid label="\"typeid\""]
  1163 -> 27 [style=solid label="\"char\""]
  1163 -> 28 [style=solid label="\"char8_t\""]
  1163 -> 29 [style=solid label="\"char16_t\""]
  1163 -> 30 [style=solid label="\"char32_t\""]
  1163 -> 31 [style=solid label="\"wchar_t\""]
  1163 -> 32 [style=solid label="\"bool\""]
  1163 -> 33 [style=solid label="\"short\""]
  1163 -> 34 [style=solid label="\"int\""]
  1163 -> 35 [style=solid label="\"long\""]
  1163 -> 36 [style=solid label="\"signed\""]
  1163 -> 37 [style=solid label="\"unsigned\""]
  1163 -> 38 [style=solid label="\"float\""]
  1163 -> 39 [style=solid label="\"double\""]
  1163 -> 40 [style=solid label="\"void\""]
  1163 -> 118 [style=solid label="STRING_LITERAL"]
  1163 -> 266 [style=solid label="\"sizeof\""]
  1163 -> 267 [style=solid label="\"alignof\""]
  1163 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1163 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1163 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1163 -> 272 [style=dashed label="SCOPE-opt"]
  1163 -> 273 [style=dashed label="additive-expression"]
  1163 -> 274 [style=dashed label="and-expression"]
  1163 -> 276 [style=dashed label="await-expression"]
  1163 -> 277 [style=dashed label="boolean-literal"]
  1163 -> 278 [style=dashed label="cast-expression"]
  1163 -> 279 [style=dashed label="character-literal"]
  1163 -> 55 [style=dashed label="class-name"]
  1163 -> 280 [style=dashed label="compare-expression"]
  1163 -> 327 [style=dashed label="conditional-expression"]
  1163 -> 1232 [style=dashed label="constant-expression"]
  1163 -> 282 [style=dashed label="conversion-function-id"]
  1163 -> 63 [style=dashed label="decltype-specifier"]
  1163 -> 283 [style=dashed label="delete-expression"]
  1163 -> 71 [style=dashed label="enum-name"]
  1163 -> 284 [style=dashed label="equality-expression"]
  1163 -> 285 [style=dashed label="exclusive-or-expression"]
  1163 -> 287 [style=dashed label="floating-point-literal"]
  1163 -> 288 [style=dashed label="fold-expression"]
  1163 -> 289 [style=dashed label="id-expression"]
  1163 -> 290 [style=dashed label="inclusive-or-expression"]
  1163 -> 291 [style=dashed label="integer-literal"]
  1163 -> 292 [style=dashed label="lambda-expression"]
  1163 -> 293 [style=dashed label="lambda-introducer"]
  1163 -> 294 [style=dashed label="literal"]
  1163 -> 295 [style=dashed label="literal-operator-id"]
  1163 -> 296 [style=dashed label="logical-and-expression"]
  1163 -> 329 [style=dashed label="logical-or-expression"]
  1163 -> 298 [style=dashed label="multiplicative-expression"]
  1163 -> 85 [style=dashed label="namespace-alias"]
  1163 -> 88 [style=dashed label="namespace-name"]
  1163 -> 299 [style=dashed label="nested-name-specifier"]
  1163 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1163 -> 300 [style=dashed label="new-expression"]
  1163 -> 301 [style=dashed label="noexcept-expression"]
  1163 -> 302 [style=dashed label="operator-function-id"]
  1163 -> 94 [style=dashed label="placeholder-type-specifier"]
  1163 -> 303 [style=dashed label="pm-expression"]
  1163 -> 304 [style=dashed label="pointer-literal"]
  1163 -> 305 [style=dashed label="postfix-expression"]
  1163 -> 306 [style=dashed label="primary-expression"]
  1163 -> 307 [style=dashed label="qualified-id"]
  1163 -> 308 [style=dashed label="relational-expression"]
  1163 -> 309 [style=dashed label="requires-expression"]
  1163 -> 310 [style=dashed label="shift-expression"]
  1163 -> 311 [style=dashed label="simple-template-id"]
  1163 -> 312 [style=dashed label="simple-type-specifier"]
  1163 -> 313 [style=dashed label="string-literal"]
  1163 -> 314 [style=dashed label="template-id"]
  1163 -> 102 [style=dashed label="template-name"]
  1163 -> 104 [style=dashed label="type-constraint"]
  1163 -> 105 [style=dashed label="type-constraint-opt"]
  1163 -> 106 [style=dashed label="type-name"]
  1163 -> 108 [style=dashed label="typedef-name"]
  1163 -> 316 [style=dashed label="typename-specifier"]
  1163 -> 317 [style=dashed label="unary-expression"]
  1163 -> 318 [style=dashed label="unary-operator"]
  1163 -> 319 [style=dashed label="unqualified-id"]
  1163 -> 320 [style=dashed label="user-defined-character-literal"]
  1163 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1163 -> 322 [style=dashed label="user-defined-integer-literal"]
  1163 -> 323 [style=dashed label="user-defined-literal"]
  1163 -> 324 [style=dashed label="user-defined-string-literal"]
  1163 -> "1163R19" [style=solid]
 "1163R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1163 -> "1163R469d" [label="[IDENTIFIER]", style=solid]
 "1163R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1163 -> "1163R722d" [label="[\"decltype\"]", style=solid]
 "1163R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1163 -> "1163R722" [label="[\"auto\"]", style=solid]
 "1163R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1164 [label="State 1164\n\l328 function-body: \"=\" • \"default\" \";\"\l329              | \"=\" • \"delete\" \";\"\l609 pure-specifier: \"=\" • INTEGER_LITERAL\l"]
  1164 -> 1027 [style=solid label="\"delete\""]
  1164 -> 1028 [style=solid label="\"default\""]
  1164 -> 1233 [style=solid label="INTEGER_LITERAL"]
  1165 [label="State 1165\n\l611 pure-specifier-opt: pure-specifier •\l"]
  1165 -> "1165R611" [style=solid]
 "1165R611" [label="R611", fillcolor=3, shape=diamond, style=filled]
  1166 [label="State 1166\n\l426 member-declarator: declarator virt-specifier-seq-opt pure-specifier-opt •\l"]
  1166 -> "1166R426" [style=solid]
 "1166R426" [label="R426", fillcolor=3, shape=diamond, style=filled]
  1167 [label="State 1167\n\l426 member-declarator: declarator • virt-specifier-seq-opt pure-specifier-opt\l427                  | declarator • requires-clause\l428                  | declarator • brace-or-equal-initializer-opt\l"]
  1167 -> 396 [style=solid label="\"=\""]
  1167 -> 398 [style=solid label="\"{\""]
  1167 -> 632 [style=solid label="\"final\""]
  1167 -> 399 [style=solid label="\"requires\""]
  1167 -> 633 [style=solid label="\"override\""]
  1167 -> 1041 [style=dashed label="brace-or-equal-initializer"]
  1167 -> 1042 [style=dashed label="brace-or-equal-initializer-opt"]
  1167 -> 401 [style=dashed label="braced-init-list"]
  1167 -> 1234 [style=dashed label="requires-clause"]
  1167 -> 635 [style=dashed label="virt-specifier"]
  1167 -> 636 [style=dashed label="virt-specifier-seq"]
  1167 -> 1235 [style=dashed label="virt-specifier-seq-opt"]
  1167 -> "1167R119" [style=solid]
 "1167R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
  1167 -> "1167R792d" [label="[\",\", \"=\", \";\"]", style=solid]
 "1167R792d" [label="R792", fillcolor=5, shape=diamond, style=filled]
  1168 [label="State 1168\n\l431 member-declarator-list: member-declarator-list \",\" member-declarator •\l"]
  1168 -> "1168R431" [style=solid]
 "1168R431" [label="R431", fillcolor=3, shape=diamond, style=filled]
  1169 [label="State 1169\n\l103 base-specifier: attribute-specifier-seq-opt \"virtual\" access-specifier-opt class-or-decltype •\l"]
  1169 -> "1169R103" [style=solid]
 "1169R103" [label="R103", fillcolor=3, shape=diamond, style=filled]
  1170 [label="State 1170\n\l104 base-specifier: attribute-specifier-seq-opt access-specifier VIRTUAL-opt class-or-decltype •\l"]
  1170 -> "1170R104" [style=solid]
 "1170R104" [label="R104", fillcolor=3, shape=diamond, style=filled]
  1171 [label="State 1171\n\l142 class-or-decltype: nested-name-specifier \"template\" simple-template-id •\l"]
  1171 -> "1171R142" [style=solid]
 "1171R142" [label="R142", fillcolor=3, shape=diamond, style=filled]
  1172 [label="State 1172\n\l106 base-specifier-list: base-specifier-list \",\" base-specifier ELLIPSIS-opt •\l"]
  1172 -> "1172R106" [style=solid]
 "1172R106" [label="R106", fillcolor=3, shape=diamond, style=filled]
  1173 [label="State 1173\n\l367 initializer-list: initializer-list \",\" initializer-clause ELLIPSIS-opt •\l"]
  1173 -> "1173R367" [style=solid]
 "1173R367" [label="R367", fillcolor=3, shape=diamond, style=filled]
  1174 [label="State 1174\n\l217 deduction-guide: explicit-specifier-opt template-name \"(\" parameter-declaration-clause \")\" \"->\" simple-template-id • \";\"\l"]
  1174 -> 1236 [style=solid label="\";\""]
  1175 [label="State 1175\n\l438 module-declaration: EXPORT-opt \"module\" module-name module-partition-opt attribute-specifier-seq-opt \";\" •\l"]
  1175 -> "1175R438" [style=solid]
 "1175R438" [label="R438", fillcolor=3, shape=diamond, style=filled]
  1176 [label="State 1176\n\l596 private-module-fragment: \"module\" \":\" \"private\" \";\" • declaration-seq-opt\l"]
  1176 -> 1 [style=solid label="\"constexpr\""]
  1176 -> 2 [style=solid label="\"export\""]
  1176 -> 3 [style=solid label="\"extern\""]
  1176 -> 4 [style=solid label="IDENTIFIER"]
  1176 -> 5 [style=solid label="\"inline\""]
  1176 -> 6 [style=solid label="\"::\""]
  1176 -> 7 [style=solid label="\"template\""]
  1176 -> 8 [style=solid label="\"typename\""]
  1176 -> 9 [style=solid label="\"virtual\""]
  1176 -> 10 [style=solid label="\"using\""]
  1176 -> 11 [style=solid label="\";\""]
  1176 -> 12 [style=solid label="\"class\""]
  1176 -> 13 [style=solid label="\"struct\""]
  1176 -> 14 [style=solid label="\"union\""]
  1176 -> 15 [style=solid label="\"const\""]
  1176 -> 16 [style=solid label="\"volatile\""]
  1176 -> 17 [style=solid label="\"friend\""]
  1176 -> 18 [style=solid label="\"typedef\""]
  1176 -> 19 [style=solid label="\"consteval\""]
  1176 -> 20 [style=solid label="\"constinit\""]
  1176 -> 21 [style=solid label="\"decltype\""]
  1176 -> 22 [style=solid label="\"enum\""]
  1176 -> 23 [style=solid label="\"explicit\""]
  1176 -> 25 [style=solid label="\"import\""]
  1176 -> 26 [style=solid label="\"namespace\""]
  1176 -> 27 [style=solid label="\"char\""]
  1176 -> 28 [style=solid label="\"char8_t\""]
  1176 -> 29 [style=solid label="\"char16_t\""]
  1176 -> 30 [style=solid label="\"char32_t\""]
  1176 -> 31 [style=solid label="\"wchar_t\""]
  1176 -> 32 [style=solid label="\"bool\""]
  1176 -> 33 [style=solid label="\"short\""]
  1176 -> 34 [style=solid label="\"int\""]
  1176 -> 35 [style=solid label="\"long\""]
  1176 -> 36 [style=solid label="\"signed\""]
  1176 -> 37 [style=solid label="\"unsigned\""]
  1176 -> 38 [style=solid label="\"float\""]
  1176 -> 39 [style=solid label="\"double\""]
  1176 -> 40 [style=solid label="\"void\""]
  1176 -> 41 [style=solid label="\"static_assert\""]
  1176 -> 42 [style=solid label="\"static\""]
  1176 -> 43 [style=solid label="\"thread_local\""]
  1176 -> 44 [style=solid label="\"mutable\""]
  1176 -> 45 [style=dashed label="EXTERN-opt"]
  1176 -> 46 [style=dashed label="INLINE-opt"]
  1176 -> 47 [style=dashed label="alias-declaration"]
  1176 -> 48 [style=dashed label="asm-declaration"]
  1176 -> 49 [style=dashed label="attribute-declaration"]
  1176 -> 50 [style=dashed label="attribute-specifier-seq"]
  1176 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  1176 -> 52 [style=dashed label="block-declaration"]
  1176 -> 53 [style=dashed label="class-head"]
  1176 -> 54 [style=dashed label="class-key"]
  1176 -> 55 [style=dashed label="class-name"]
  1176 -> 56 [style=dashed label="class-specifier"]
  1176 -> 57 [style=dashed label="cv-qualifier"]
  1176 -> 58 [style=dashed label="decl-specifier"]
  1176 -> 59 [style=dashed label="decl-specifier-seq"]
  1176 -> 60 [style=dashed label="declaration"]
  1176 -> 61 [style=dashed label="declaration-seq"]
  1176 -> 1237 [style=dashed label="declaration-seq-opt"]
  1176 -> 63 [style=dashed label="decltype-specifier"]
  1176 -> 64 [style=dashed label="deduction-guide"]
  1176 -> 65 [style=dashed label="defining-type-specifier"]
  1176 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1176 -> 67 [style=dashed label="elaborated-type-specifier"]
  1176 -> 68 [style=dashed label="empty-declaration"]
  1176 -> 69 [style=dashed label="enum-head"]
  1176 -> 70 [style=dashed label="enum-key"]
  1176 -> 71 [style=dashed label="enum-name"]
  1176 -> 72 [style=dashed label="enum-specifier"]
  1176 -> 73 [style=dashed label="explicit-instantiation"]
  1176 -> 74 [style=dashed label="explicit-specialization"]
  1176 -> 75 [style=dashed label="explicit-specifier"]
  1176 -> 76 [style=dashed label="explicit-specifier-opt"]
  1176 -> 77 [style=dashed label="export-declaration"]
  1176 -> 78 [style=dashed label="function-definition"]
  1176 -> 79 [style=dashed label="function-specifier"]
  1176 -> 82 [style=dashed label="linkage-specification"]
  1176 -> 83 [style=dashed label="module-import-declaration"]
  1176 -> 84 [style=dashed label="named-namespace-definition"]
  1176 -> 85 [style=dashed label="namespace-alias"]
  1176 -> 86 [style=dashed label="namespace-alias-definition"]
  1176 -> 87 [style=dashed label="namespace-definition"]
  1176 -> 88 [style=dashed label="namespace-name"]
  1176 -> 89 [style=dashed label="nested-name-specifier"]
  1176 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1176 -> 91 [style=dashed label="nested-namespace-definition"]
  1176 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  1176 -> 93 [style=dashed label="opaque-enum-declaration"]
  1176 -> 94 [style=dashed label="placeholder-type-specifier"]
  1176 -> 95 [style=dashed label="simple-declaration"]
  1176 -> 96 [style=dashed label="simple-template-id"]
  1176 -> 97 [style=dashed label="simple-type-specifier"]
  1176 -> 98 [style=dashed label="static_assert-declaration"]
  1176 -> 99 [style=dashed label="storage-class-specifier"]
  1176 -> 100 [style=dashed label="template-declaration"]
  1176 -> 101 [style=dashed label="template-head"]
  1176 -> 102 [style=dashed label="template-name"]
  1176 -> 104 [style=dashed label="type-constraint"]
  1176 -> 105 [style=dashed label="type-constraint-opt"]
  1176 -> 106 [style=dashed label="type-name"]
  1176 -> 107 [style=dashed label="type-specifier"]
  1176 -> 108 [style=dashed label="typedef-name"]
  1176 -> 109 [style=dashed label="typename-specifier"]
  1176 -> 110 [style=dashed label="unnamed-namespace-definition"]
  1176 -> 111 [style=dashed label="using-declaration"]
  1176 -> 112 [style=dashed label="using-directive"]
  1176 -> 113 [style=dashed label="using-enum-declaration"]
  1176 -> "1176R9d" [label="[\"template\"]", style=solid]
 "1176R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  1176 -> "1176R13d" [label="[\"namespace\"]", style=solid]
 "1176R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  1176 -> "1176R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1176R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1176 -> "1176R83" [label="[]", style=solid]
 "1176R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1176 -> "1176R210" [label="[$end]", style=solid]
 "1176R210" [label="R210", fillcolor=3, shape=diamond, style=filled]
  1176 -> "1176R270d" [label="[IDENTIFIER]", style=solid]
 "1176R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  1176 -> "1176R469d" [label="[IDENTIFIER]", style=solid]
 "1176R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1176 -> "1176R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1176R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1177 [label="State 1177\n\l494 noptr-abstract-declarator: noptr-abstract-declarator-opt \"[\" constant-expression-opt \"]\" • attribute-specifier-seq-opt\l"]
  1177 -> 177 [style=dashed label="attribute-specifier-seq"]
  1177 -> 1238 [style=dashed label="attribute-specifier-seq-opt"]
  1177 -> "1177R83" [style=solid]
 "1177R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1178 [label="State 1178\n\l499 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator \"[\" constant-expression-opt \"]\" • attribute-specifier-seq-opt\l"]
  1178 -> 177 [style=dashed label="attribute-specifier-seq"]
  1178 -> 1239 [style=dashed label="attribute-specifier-seq-opt"]
  1178 -> "1178R83" [style=solid]
 "1178R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1179 [label="State 1179\n\l557 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq abstract-declarator-opt \"=\" initializer-clause •\l"]
  1179 -> "1179R557" [style=solid]
 "1179R557" [label="R557", fillcolor=3, shape=diamond, style=filled]
  1180 [label="State 1180\n\l555 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq declarator \"=\" initializer-clause •\l"]
  1180 -> "1180R555" [style=solid]
 "1180R555" [label="R555", fillcolor=3, shape=diamond, style=filled]
  1181 [label="State 1181\n\l290 fold-expression: \"(\" cast-expression fold-operator \"...\" fold-operator cast-expression • \")\"\l"]
  1181 -> 1240 [style=solid label="\")\""]
  1182 [label="State 1182\n\l736 type-requirement: \"typename\" nested-name-specifier-opt type-name • \";\"\l"]
  1182 -> 1241 [style=solid label="\";\""]
  1183 [label="State 1183\n\l150 compound-requirement: \"{\" expression \"}\" • NOEXCEPT-opt return-type-requirement-opt \";\"\l"]
  1183 -> 1242 [style=solid label="\"noexcept\""]
  1183 -> 1243 [style=dashed label="NOEXCEPT-opt"]
  1183 -> "1183R15" [style=solid]
 "1183R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  1184 [label="State 1184\n\l472 nested-requirement: \"requires\" constraint-expression \";\" •\l"]
  1184 -> "1184R472" [style=solid]
 "1184R472" [label="R472", fillcolor=3, shape=diamond, style=filled]
  1185 [label="State 1185\n\l280 expression: expression • \",\" assignment-expression\l582 postfix-expression: \"dynamic_cast\" \"<\" type-id \">\" \"(\" expression • \")\"\l"]
  1185 -> 552 [style=solid label="\",\""]
  1185 -> 1244 [style=solid label="\")\""]
  1186 [label="State 1186\n\l280 expression: expression • \",\" assignment-expression\l583 postfix-expression: \"static_cast\" \"<\" type-id \">\" \"(\" expression • \")\"\l"]
  1186 -> 552 [style=solid label="\",\""]
  1186 -> 1245 [style=solid label="\")\""]
  1187 [label="State 1187\n\l280 expression: expression • \",\" assignment-expression\l584 postfix-expression: \"reinterpret_cast\" \"<\" type-id \">\" \"(\" expression • \")\"\l"]
  1187 -> 552 [style=solid label="\",\""]
  1187 -> 1246 [style=solid label="\")\""]
  1188 [label="State 1188\n\l280 expression: expression • \",\" assignment-expression\l585 postfix-expression: \"const_cast\" \"<\" type-id \">\" \"(\" expression • \")\"\l"]
  1188 -> 552 [style=solid label="\",\""]
  1188 -> 1247 [style=solid label="\")\""]
  1189 [label="State 1189\n\l478 new-expression: SCOPE-opt \"new\" new-placement-opt \"(\" type-id \")\" • new-initializer-opt\l"]
  1189 -> 1096 [style=solid label="\"(\""]
  1189 -> 398 [style=solid label="\"{\""]
  1189 -> 1097 [style=dashed label="braced-init-list"]
  1189 -> 1098 [style=dashed label="new-initializer"]
  1189 -> 1248 [style=dashed label="new-initializer-opt"]
  1189 -> "1189R481d" [label="[\"{\"]", style=solid]
 "1189R481d" [label="R481", fillcolor=5, shape=diamond, style=filled]
  1189 -> "1189R481" [style=solid]
 "1189R481" [label="R481", fillcolor=3, shape=diamond, style=filled]
  1190 [label="State 1190\n\l479 new-initializer: \"(\" expression-list-opt • \")\"\l"]
  1190 -> 1249 [style=solid label="\")\""]
  1191 [label="State 1191\n\l505 noptr-new-declarator: \"[\" expression-opt • \"]\" attribute-specifier-seq-opt\l"]
  1191 -> 1250 [style=solid label="\"]\""]
  1192 [label="State 1192\n\l506 noptr-new-declarator: noptr-new-declarator \"[\" • constant-expression \"]\" attribute-specifier-seq-opt\l"]
  1192 -> 238 [style=solid label="IDENTIFIER"]
  1192 -> 239 [style=solid label="\"noexcept\""]
  1192 -> 240 [style=solid label="\"!\""]
  1192 -> 241 [style=solid label="\"::\""]
  1192 -> 242 [style=solid label="\"this\""]
  1192 -> 8 [style=solid label="\"typename\""]
  1192 -> 243 [style=solid label="\"+\""]
  1192 -> 244 [style=solid label="\"-\""]
  1192 -> 245 [style=solid label="\"(\""]
  1192 -> 246 [style=solid label="\"&\""]
  1192 -> 247 [style=solid label="\"[\""]
  1192 -> 248 [style=solid label="\"co_await\""]
  1192 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1192 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1192 -> 251 [style=solid label="\"operator\""]
  1192 -> 21 [style=solid label="\"decltype\""]
  1192 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1192 -> 253 [style=solid label="\"*\""]
  1192 -> 254 [style=solid label="INTEGER_LITERAL"]
  1192 -> 255 [style=solid label="\"requires\""]
  1192 -> 256 [style=solid label="\"~\""]
  1192 -> 257 [style=solid label="\"++\""]
  1192 -> 258 [style=solid label="\"--\""]
  1192 -> 259 [style=solid label="POINTER_LITERAL"]
  1192 -> 260 [style=solid label="\"dynamic_cast\""]
  1192 -> 261 [style=solid label="\"static_cast\""]
  1192 -> 262 [style=solid label="\"reinterpret_cast\""]
  1192 -> 263 [style=solid label="\"const_cast\""]
  1192 -> 264 [style=solid label="\"typeid\""]
  1192 -> 27 [style=solid label="\"char\""]
  1192 -> 28 [style=solid label="\"char8_t\""]
  1192 -> 29 [style=solid label="\"char16_t\""]
  1192 -> 30 [style=solid label="\"char32_t\""]
  1192 -> 31 [style=solid label="\"wchar_t\""]
  1192 -> 32 [style=solid label="\"bool\""]
  1192 -> 33 [style=solid label="\"short\""]
  1192 -> 34 [style=solid label="\"int\""]
  1192 -> 35 [style=solid label="\"long\""]
  1192 -> 36 [style=solid label="\"signed\""]
  1192 -> 37 [style=solid label="\"unsigned\""]
  1192 -> 38 [style=solid label="\"float\""]
  1192 -> 39 [style=solid label="\"double\""]
  1192 -> 40 [style=solid label="\"void\""]
  1192 -> 118 [style=solid label="STRING_LITERAL"]
  1192 -> 266 [style=solid label="\"sizeof\""]
  1192 -> 267 [style=solid label="\"alignof\""]
  1192 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1192 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1192 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1192 -> 272 [style=dashed label="SCOPE-opt"]
  1192 -> 273 [style=dashed label="additive-expression"]
  1192 -> 274 [style=dashed label="and-expression"]
  1192 -> 276 [style=dashed label="await-expression"]
  1192 -> 277 [style=dashed label="boolean-literal"]
  1192 -> 278 [style=dashed label="cast-expression"]
  1192 -> 279 [style=dashed label="character-literal"]
  1192 -> 55 [style=dashed label="class-name"]
  1192 -> 280 [style=dashed label="compare-expression"]
  1192 -> 327 [style=dashed label="conditional-expression"]
  1192 -> 1251 [style=dashed label="constant-expression"]
  1192 -> 282 [style=dashed label="conversion-function-id"]
  1192 -> 63 [style=dashed label="decltype-specifier"]
  1192 -> 283 [style=dashed label="delete-expression"]
  1192 -> 71 [style=dashed label="enum-name"]
  1192 -> 284 [style=dashed label="equality-expression"]
  1192 -> 285 [style=dashed label="exclusive-or-expression"]
  1192 -> 287 [style=dashed label="floating-point-literal"]
  1192 -> 288 [style=dashed label="fold-expression"]
  1192 -> 289 [style=dashed label="id-expression"]
  1192 -> 290 [style=dashed label="inclusive-or-expression"]
  1192 -> 291 [style=dashed label="integer-literal"]
  1192 -> 292 [style=dashed label="lambda-expression"]
  1192 -> 293 [style=dashed label="lambda-introducer"]
  1192 -> 294 [style=dashed label="literal"]
  1192 -> 295 [style=dashed label="literal-operator-id"]
  1192 -> 296 [style=dashed label="logical-and-expression"]
  1192 -> 329 [style=dashed label="logical-or-expression"]
  1192 -> 298 [style=dashed label="multiplicative-expression"]
  1192 -> 85 [style=dashed label="namespace-alias"]
  1192 -> 88 [style=dashed label="namespace-name"]
  1192 -> 299 [style=dashed label="nested-name-specifier"]
  1192 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1192 -> 300 [style=dashed label="new-expression"]
  1192 -> 301 [style=dashed label="noexcept-expression"]
  1192 -> 302 [style=dashed label="operator-function-id"]
  1192 -> 94 [style=dashed label="placeholder-type-specifier"]
  1192 -> 303 [style=dashed label="pm-expression"]
  1192 -> 304 [style=dashed label="pointer-literal"]
  1192 -> 305 [style=dashed label="postfix-expression"]
  1192 -> 306 [style=dashed label="primary-expression"]
  1192 -> 307 [style=dashed label="qualified-id"]
  1192 -> 308 [style=dashed label="relational-expression"]
  1192 -> 309 [style=dashed label="requires-expression"]
  1192 -> 310 [style=dashed label="shift-expression"]
  1192 -> 311 [style=dashed label="simple-template-id"]
  1192 -> 312 [style=dashed label="simple-type-specifier"]
  1192 -> 313 [style=dashed label="string-literal"]
  1192 -> 314 [style=dashed label="template-id"]
  1192 -> 102 [style=dashed label="template-name"]
  1192 -> 104 [style=dashed label="type-constraint"]
  1192 -> 105 [style=dashed label="type-constraint-opt"]
  1192 -> 106 [style=dashed label="type-name"]
  1192 -> 108 [style=dashed label="typedef-name"]
  1192 -> 316 [style=dashed label="typename-specifier"]
  1192 -> 317 [style=dashed label="unary-expression"]
  1192 -> 318 [style=dashed label="unary-operator"]
  1192 -> 319 [style=dashed label="unqualified-id"]
  1192 -> 320 [style=dashed label="user-defined-character-literal"]
  1192 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1192 -> 322 [style=dashed label="user-defined-integer-literal"]
  1192 -> 323 [style=dashed label="user-defined-literal"]
  1192 -> 324 [style=dashed label="user-defined-string-literal"]
  1192 -> "1192R19" [style=solid]
 "1192R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1192 -> "1192R469d" [label="[IDENTIFIER]", style=solid]
 "1192R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1192 -> "1192R722d" [label="[\"decltype\"]", style=solid]
 "1192R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1192 -> "1192R722" [label="[\"auto\"]", style=solid]
 "1192R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1193 [label="State 1193\n\l473 new-declarator: ptr-operator new-declarator-opt •\l"]
  1193 -> "1193R473" [style=solid]
 "1193R473" [label="R473", fillcolor=3, shape=diamond, style=filled]
  1194 [label="State 1194\n\l389 lambda-declarator: \"(\" parameter-declaration-clause \")\" lambda-specifiers requires-clause-opt •\l"]
  1194 -> "1194R389" [style=solid]
 "1194R389" [label="R389", fillcolor=3, shape=diamond, style=filled]
  1195 [label="State 1195\n\l391 lambda-expression: lambda-introducer \"<\" template-parameter-list \">\" requires-clause-opt lambda-declarator • compound-statement\l"]
  1195 -> 813 [style=solid label="\"{\""]
  1195 -> 1252 [style=dashed label="compound-statement"]
  1196 [label="State 1196\n\l489 noexcept-specifier: \"noexcept\" \"(\" constant-expression \")\" •\l"]
  1196 -> "1196R489" [style=solid]
 "1196R489" [label="R489", fillcolor=3, shape=diamond, style=filled]
  1197 [label="State 1197\n\l380 labeled-statement: attribute-specifier-seq-opt IDENTIFIER \":\" • statement\l"]
  1197 -> 1 [style=solid label="\"constexpr\""]
  1197 -> 150 [style=solid label="\"extern\""]
  1197 -> 4 [style=solid label="IDENTIFIER"]
  1197 -> 151 [style=solid label="\"inline\""]
  1197 -> 6 [style=solid label="\"::\""]
  1197 -> 8 [style=solid label="\"typename\""]
  1197 -> 9 [style=solid label="\"virtual\""]
  1197 -> 10 [style=solid label="\"using\""]
  1197 -> 12 [style=solid label="\"class\""]
  1197 -> 13 [style=solid label="\"struct\""]
  1197 -> 14 [style=solid label="\"union\""]
  1197 -> 15 [style=solid label="\"const\""]
  1197 -> 16 [style=solid label="\"volatile\""]
  1197 -> 17 [style=solid label="\"friend\""]
  1197 -> 18 [style=solid label="\"typedef\""]
  1197 -> 19 [style=solid label="\"consteval\""]
  1197 -> 20 [style=solid label="\"constinit\""]
  1197 -> 21 [style=solid label="\"decltype\""]
  1197 -> 22 [style=solid label="\"enum\""]
  1197 -> 23 [style=solid label="\"explicit\""]
  1197 -> 991 [style=solid label="\"namespace\""]
  1197 -> 27 [style=solid label="\"char\""]
  1197 -> 28 [style=solid label="\"char8_t\""]
  1197 -> 29 [style=solid label="\"char16_t\""]
  1197 -> 30 [style=solid label="\"char32_t\""]
  1197 -> 31 [style=solid label="\"wchar_t\""]
  1197 -> 32 [style=solid label="\"bool\""]
  1197 -> 33 [style=solid label="\"short\""]
  1197 -> 34 [style=solid label="\"int\""]
  1197 -> 35 [style=solid label="\"long\""]
  1197 -> 36 [style=solid label="\"signed\""]
  1197 -> 37 [style=solid label="\"unsigned\""]
  1197 -> 38 [style=solid label="\"float\""]
  1197 -> 39 [style=solid label="\"double\""]
  1197 -> 40 [style=solid label="\"void\""]
  1197 -> 41 [style=solid label="\"static_assert\""]
  1197 -> 42 [style=solid label="\"static\""]
  1197 -> 43 [style=solid label="\"thread_local\""]
  1197 -> 44 [style=solid label="\"mutable\""]
  1197 -> 47 [style=dashed label="alias-declaration"]
  1197 -> 48 [style=dashed label="asm-declaration"]
  1197 -> 992 [style=dashed label="attribute-specifier-seq"]
  1197 -> 993 [style=dashed label="attribute-specifier-seq-opt"]
  1197 -> 994 [style=dashed label="block-declaration"]
  1197 -> 53 [style=dashed label="class-head"]
  1197 -> 54 [style=dashed label="class-key"]
  1197 -> 55 [style=dashed label="class-name"]
  1197 -> 56 [style=dashed label="class-specifier"]
  1197 -> 57 [style=dashed label="cv-qualifier"]
  1197 -> 58 [style=dashed label="decl-specifier"]
  1197 -> 59 [style=dashed label="decl-specifier-seq"]
  1197 -> 995 [style=dashed label="declaration-statement"]
  1197 -> 63 [style=dashed label="decltype-specifier"]
  1197 -> 65 [style=dashed label="defining-type-specifier"]
  1197 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1197 -> 67 [style=dashed label="elaborated-type-specifier"]
  1197 -> 69 [style=dashed label="enum-head"]
  1197 -> 70 [style=dashed label="enum-key"]
  1197 -> 71 [style=dashed label="enum-name"]
  1197 -> 72 [style=dashed label="enum-specifier"]
  1197 -> 155 [style=dashed label="explicit-specifier"]
  1197 -> 79 [style=dashed label="function-specifier"]
  1197 -> 996 [style=dashed label="labeled-statement"]
  1197 -> 85 [style=dashed label="namespace-alias"]
  1197 -> 86 [style=dashed label="namespace-alias-definition"]
  1197 -> 88 [style=dashed label="namespace-name"]
  1197 -> 89 [style=dashed label="nested-name-specifier"]
  1197 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1197 -> 93 [style=dashed label="opaque-enum-declaration"]
  1197 -> 94 [style=dashed label="placeholder-type-specifier"]
  1197 -> 95 [style=dashed label="simple-declaration"]
  1197 -> 96 [style=dashed label="simple-template-id"]
  1197 -> 97 [style=dashed label="simple-type-specifier"]
  1197 -> 1253 [style=dashed label="statement"]
  1197 -> 98 [style=dashed label="static_assert-declaration"]
  1197 -> 99 [style=dashed label="storage-class-specifier"]
  1197 -> 102 [style=dashed label="template-name"]
  1197 -> 104 [style=dashed label="type-constraint"]
  1197 -> 105 [style=dashed label="type-constraint-opt"]
  1197 -> 106 [style=dashed label="type-name"]
  1197 -> 107 [style=dashed label="type-specifier"]
  1197 -> 108 [style=dashed label="typedef-name"]
  1197 -> 109 [style=dashed label="typename-specifier"]
  1197 -> 111 [style=dashed label="using-declaration"]
  1197 -> 112 [style=dashed label="using-directive"]
  1197 -> 113 [style=dashed label="using-enum-declaration"]
  1197 -> "1197R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1197R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1197 -> "1197R83" [style=solid]
 "1197R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1197 -> "1197R469d" [label="[IDENTIFIER]", style=solid]
 "1197R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1197 -> "1197R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1197R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1198 [label="State 1198\n\l276 expr-or-braced-init-list: braced-init-list •\l"]
  1198 -> "1198R276" [style=solid]
 "1198R276" [label="R276", fillcolor=3, shape=diamond, style=filled]
  1199 [label="State 1199\n\l278 expr-or-braced-init-list-opt: expr-or-braced-init-list •\l"]
  1199 -> "1199R278" [style=solid]
 "1199R278" [label="R278", fillcolor=3, shape=diamond, style=filled]
  1200 [label="State 1200\n\l173 coroutine-return-statement: \"co_return\" expr-or-braced-init-list-opt • \";\"\l"]
  1200 -> 1254 [style=solid label="\";\""]
  1201 [label="State 1201\n\l275 expr-or-braced-init-list: expression •\l280 expression: expression • \",\" assignment-expression\l"]
  1201 -> 552 [style=solid label="\",\""]
  1201 -> "1201R275" [style=solid]
 "1201R275" [label="R275", fillcolor=3, shape=diamond, style=filled]
  1202 [label="State 1202\n\l382 labeled-statement: attribute-specifier-seq-opt \"default\" \":\" • statement\l"]
  1202 -> 1 [style=solid label="\"constexpr\""]
  1202 -> 150 [style=solid label="\"extern\""]
  1202 -> 4 [style=solid label="IDENTIFIER"]
  1202 -> 151 [style=solid label="\"inline\""]
  1202 -> 6 [style=solid label="\"::\""]
  1202 -> 8 [style=solid label="\"typename\""]
  1202 -> 9 [style=solid label="\"virtual\""]
  1202 -> 10 [style=solid label="\"using\""]
  1202 -> 12 [style=solid label="\"class\""]
  1202 -> 13 [style=solid label="\"struct\""]
  1202 -> 14 [style=solid label="\"union\""]
  1202 -> 15 [style=solid label="\"const\""]
  1202 -> 16 [style=solid label="\"volatile\""]
  1202 -> 17 [style=solid label="\"friend\""]
  1202 -> 18 [style=solid label="\"typedef\""]
  1202 -> 19 [style=solid label="\"consteval\""]
  1202 -> 20 [style=solid label="\"constinit\""]
  1202 -> 21 [style=solid label="\"decltype\""]
  1202 -> 22 [style=solid label="\"enum\""]
  1202 -> 23 [style=solid label="\"explicit\""]
  1202 -> 991 [style=solid label="\"namespace\""]
  1202 -> 27 [style=solid label="\"char\""]
  1202 -> 28 [style=solid label="\"char8_t\""]
  1202 -> 29 [style=solid label="\"char16_t\""]
  1202 -> 30 [style=solid label="\"char32_t\""]
  1202 -> 31 [style=solid label="\"wchar_t\""]
  1202 -> 32 [style=solid label="\"bool\""]
  1202 -> 33 [style=solid label="\"short\""]
  1202 -> 34 [style=solid label="\"int\""]
  1202 -> 35 [style=solid label="\"long\""]
  1202 -> 36 [style=solid label="\"signed\""]
  1202 -> 37 [style=solid label="\"unsigned\""]
  1202 -> 38 [style=solid label="\"float\""]
  1202 -> 39 [style=solid label="\"double\""]
  1202 -> 40 [style=solid label="\"void\""]
  1202 -> 41 [style=solid label="\"static_assert\""]
  1202 -> 42 [style=solid label="\"static\""]
  1202 -> 43 [style=solid label="\"thread_local\""]
  1202 -> 44 [style=solid label="\"mutable\""]
  1202 -> 47 [style=dashed label="alias-declaration"]
  1202 -> 48 [style=dashed label="asm-declaration"]
  1202 -> 992 [style=dashed label="attribute-specifier-seq"]
  1202 -> 993 [style=dashed label="attribute-specifier-seq-opt"]
  1202 -> 994 [style=dashed label="block-declaration"]
  1202 -> 53 [style=dashed label="class-head"]
  1202 -> 54 [style=dashed label="class-key"]
  1202 -> 55 [style=dashed label="class-name"]
  1202 -> 56 [style=dashed label="class-specifier"]
  1202 -> 57 [style=dashed label="cv-qualifier"]
  1202 -> 58 [style=dashed label="decl-specifier"]
  1202 -> 59 [style=dashed label="decl-specifier-seq"]
  1202 -> 995 [style=dashed label="declaration-statement"]
  1202 -> 63 [style=dashed label="decltype-specifier"]
  1202 -> 65 [style=dashed label="defining-type-specifier"]
  1202 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1202 -> 67 [style=dashed label="elaborated-type-specifier"]
  1202 -> 69 [style=dashed label="enum-head"]
  1202 -> 70 [style=dashed label="enum-key"]
  1202 -> 71 [style=dashed label="enum-name"]
  1202 -> 72 [style=dashed label="enum-specifier"]
  1202 -> 155 [style=dashed label="explicit-specifier"]
  1202 -> 79 [style=dashed label="function-specifier"]
  1202 -> 996 [style=dashed label="labeled-statement"]
  1202 -> 85 [style=dashed label="namespace-alias"]
  1202 -> 86 [style=dashed label="namespace-alias-definition"]
  1202 -> 88 [style=dashed label="namespace-name"]
  1202 -> 89 [style=dashed label="nested-name-specifier"]
  1202 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1202 -> 93 [style=dashed label="opaque-enum-declaration"]
  1202 -> 94 [style=dashed label="placeholder-type-specifier"]
  1202 -> 95 [style=dashed label="simple-declaration"]
  1202 -> 96 [style=dashed label="simple-template-id"]
  1202 -> 97 [style=dashed label="simple-type-specifier"]
  1202 -> 1255 [style=dashed label="statement"]
  1202 -> 98 [style=dashed label="static_assert-declaration"]
  1202 -> 99 [style=dashed label="storage-class-specifier"]
  1202 -> 102 [style=dashed label="template-name"]
  1202 -> 104 [style=dashed label="type-constraint"]
  1202 -> 105 [style=dashed label="type-constraint-opt"]
  1202 -> 106 [style=dashed label="type-name"]
  1202 -> 107 [style=dashed label="type-specifier"]
  1202 -> 108 [style=dashed label="typedef-name"]
  1202 -> 109 [style=dashed label="typename-specifier"]
  1202 -> 111 [style=dashed label="using-declaration"]
  1202 -> 112 [style=dashed label="using-directive"]
  1202 -> 113 [style=dashed label="using-enum-declaration"]
  1202 -> "1202R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1202R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1202 -> "1202R83" [style=solid]
 "1202R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1202 -> "1202R469d" [label="[IDENTIFIER]", style=solid]
 "1202R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1202 -> "1202R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1202R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1203 [label="State 1203\n\l719 try-block: \"try\" compound-statement • handler-seq\l"]
  1203 -> 1228 [style=solid label="\"catch\""]
  1203 -> 1229 [style=dashed label="handler"]
  1203 -> 1256 [style=dashed label="handler-seq"]
  1204 [label="State 1204\n\l371 iteration-statement: \"while\" \"(\" • condition \")\" statement\l"]
  1204 -> 238 [style=solid label="IDENTIFIER"]
  1204 -> 239 [style=solid label="\"noexcept\""]
  1204 -> 240 [style=solid label="\"!\""]
  1204 -> 241 [style=solid label="\"::\""]
  1204 -> 242 [style=solid label="\"this\""]
  1204 -> 8 [style=solid label="\"typename\""]
  1204 -> 243 [style=solid label="\"+\""]
  1204 -> 244 [style=solid label="\"-\""]
  1204 -> 245 [style=solid label="\"(\""]
  1204 -> 246 [style=solid label="\"&\""]
  1204 -> 247 [style=solid label="\"[\""]
  1204 -> 248 [style=solid label="\"co_await\""]
  1204 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1204 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1204 -> 251 [style=solid label="\"operator\""]
  1204 -> 21 [style=solid label="\"decltype\""]
  1204 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1204 -> 253 [style=solid label="\"*\""]
  1204 -> 254 [style=solid label="INTEGER_LITERAL"]
  1204 -> 255 [style=solid label="\"requires\""]
  1204 -> 256 [style=solid label="\"~\""]
  1204 -> 257 [style=solid label="\"++\""]
  1204 -> 258 [style=solid label="\"--\""]
  1204 -> 259 [style=solid label="POINTER_LITERAL"]
  1204 -> 260 [style=solid label="\"dynamic_cast\""]
  1204 -> 261 [style=solid label="\"static_cast\""]
  1204 -> 262 [style=solid label="\"reinterpret_cast\""]
  1204 -> 263 [style=solid label="\"const_cast\""]
  1204 -> 264 [style=solid label="\"typeid\""]
  1204 -> 27 [style=solid label="\"char\""]
  1204 -> 28 [style=solid label="\"char8_t\""]
  1204 -> 29 [style=solid label="\"char16_t\""]
  1204 -> 30 [style=solid label="\"char32_t\""]
  1204 -> 31 [style=solid label="\"wchar_t\""]
  1204 -> 32 [style=solid label="\"bool\""]
  1204 -> 33 [style=solid label="\"short\""]
  1204 -> 34 [style=solid label="\"int\""]
  1204 -> 35 [style=solid label="\"long\""]
  1204 -> 36 [style=solid label="\"signed\""]
  1204 -> 37 [style=solid label="\"unsigned\""]
  1204 -> 38 [style=solid label="\"float\""]
  1204 -> 39 [style=solid label="\"double\""]
  1204 -> 40 [style=solid label="\"void\""]
  1204 -> 118 [style=solid label="STRING_LITERAL"]
  1204 -> 265 [style=solid label="\"throw\""]
  1204 -> 266 [style=solid label="\"sizeof\""]
  1204 -> 267 [style=solid label="\"alignof\""]
  1204 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1204 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1204 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1204 -> 271 [style=solid label="\"co_yield\""]
  1204 -> 272 [style=dashed label="SCOPE-opt"]
  1204 -> 273 [style=dashed label="additive-expression"]
  1204 -> 274 [style=dashed label="and-expression"]
  1204 -> 275 [style=dashed label="assignment-expression"]
  1204 -> 177 [style=dashed label="attribute-specifier-seq"]
  1204 -> 1257 [style=dashed label="attribute-specifier-seq-opt"]
  1204 -> 276 [style=dashed label="await-expression"]
  1204 -> 277 [style=dashed label="boolean-literal"]
  1204 -> 278 [style=dashed label="cast-expression"]
  1204 -> 279 [style=dashed label="character-literal"]
  1204 -> 55 [style=dashed label="class-name"]
  1204 -> 280 [style=dashed label="compare-expression"]
  1204 -> 1258 [style=dashed label="condition"]
  1204 -> 281 [style=dashed label="conditional-expression"]
  1204 -> 282 [style=dashed label="conversion-function-id"]
  1204 -> 63 [style=dashed label="decltype-specifier"]
  1204 -> 283 [style=dashed label="delete-expression"]
  1204 -> 71 [style=dashed label="enum-name"]
  1204 -> 284 [style=dashed label="equality-expression"]
  1204 -> 285 [style=dashed label="exclusive-or-expression"]
  1204 -> 1259 [style=dashed label="expression"]
  1204 -> 287 [style=dashed label="floating-point-literal"]
  1204 -> 288 [style=dashed label="fold-expression"]
  1204 -> 289 [style=dashed label="id-expression"]
  1204 -> 290 [style=dashed label="inclusive-or-expression"]
  1204 -> 291 [style=dashed label="integer-literal"]
  1204 -> 292 [style=dashed label="lambda-expression"]
  1204 -> 293 [style=dashed label="lambda-introducer"]
  1204 -> 294 [style=dashed label="literal"]
  1204 -> 295 [style=dashed label="literal-operator-id"]
  1204 -> 296 [style=dashed label="logical-and-expression"]
  1204 -> 297 [style=dashed label="logical-or-expression"]
  1204 -> 298 [style=dashed label="multiplicative-expression"]
  1204 -> 85 [style=dashed label="namespace-alias"]
  1204 -> 88 [style=dashed label="namespace-name"]
  1204 -> 299 [style=dashed label="nested-name-specifier"]
  1204 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1204 -> 300 [style=dashed label="new-expression"]
  1204 -> 301 [style=dashed label="noexcept-expression"]
  1204 -> 302 [style=dashed label="operator-function-id"]
  1204 -> 94 [style=dashed label="placeholder-type-specifier"]
  1204 -> 303 [style=dashed label="pm-expression"]
  1204 -> 304 [style=dashed label="pointer-literal"]
  1204 -> 305 [style=dashed label="postfix-expression"]
  1204 -> 306 [style=dashed label="primary-expression"]
  1204 -> 307 [style=dashed label="qualified-id"]
  1204 -> 308 [style=dashed label="relational-expression"]
  1204 -> 309 [style=dashed label="requires-expression"]
  1204 -> 310 [style=dashed label="shift-expression"]
  1204 -> 311 [style=dashed label="simple-template-id"]
  1204 -> 312 [style=dashed label="simple-type-specifier"]
  1204 -> 313 [style=dashed label="string-literal"]
  1204 -> 314 [style=dashed label="template-id"]
  1204 -> 102 [style=dashed label="template-name"]
  1204 -> 315 [style=dashed label="throw-expression"]
  1204 -> 104 [style=dashed label="type-constraint"]
  1204 -> 105 [style=dashed label="type-constraint-opt"]
  1204 -> 106 [style=dashed label="type-name"]
  1204 -> 108 [style=dashed label="typedef-name"]
  1204 -> 316 [style=dashed label="typename-specifier"]
  1204 -> 317 [style=dashed label="unary-expression"]
  1204 -> 318 [style=dashed label="unary-operator"]
  1204 -> 319 [style=dashed label="unqualified-id"]
  1204 -> 320 [style=dashed label="user-defined-character-literal"]
  1204 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1204 -> 322 [style=dashed label="user-defined-integer-literal"]
  1204 -> 323 [style=dashed label="user-defined-literal"]
  1204 -> 324 [style=dashed label="user-defined-string-literal"]
  1204 -> 325 [style=dashed label="yield-expression"]
  1204 -> "1204R19" [label="[\"delete\", \"new\"]", style=solid]
 "1204R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1204 -> "1204R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"[\", \"decltype\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\"]", style=solid]
 "1204R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1204 -> "1204R83" [style=solid]
 "1204R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1204 -> "1204R469d" [label="[IDENTIFIER]", style=solid]
 "1204R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1204 -> "1204R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1204R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1205 [label="State 1205\n\l372 iteration-statement: \"do\" statement • \"while\" \"(\" expression \")\" \";\"\l"]
  1205 -> 1260 [style=solid label="\"while\""]
  1206 [label="State 1206\n\l373 iteration-statement: \"for\" \"(\" • init-statement condition-opt \";\" expression-opt \")\" statement\l374                    | \"for\" \"(\" • init-statement-opt for-range-declaration \":\" for-range-initializer \")\" statement\l"]
  1206 -> 1 [style=solid label="\"constexpr\""]
  1206 -> 150 [style=solid label="\"extern\""]
  1206 -> 238 [style=solid label="IDENTIFIER"]
  1206 -> 151 [style=solid label="\"inline\""]
  1206 -> 239 [style=solid label="\"noexcept\""]
  1206 -> 240 [style=solid label="\"!\""]
  1206 -> 241 [style=solid label="\"::\""]
  1206 -> 242 [style=solid label="\"this\""]
  1206 -> 8 [style=solid label="\"typename\""]
  1206 -> 9 [style=solid label="\"virtual\""]
  1206 -> 243 [style=solid label="\"+\""]
  1206 -> 244 [style=solid label="\"-\""]
  1206 -> 1261 [style=solid label="\"using\""]
  1206 -> 245 [style=solid label="\"(\""]
  1206 -> 246 [style=solid label="\"&\""]
  1206 -> 247 [style=solid label="\"[\""]
  1206 -> 248 [style=solid label="\"co_await\""]
  1206 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1206 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1206 -> 12 [style=solid label="\"class\""]
  1206 -> 13 [style=solid label="\"struct\""]
  1206 -> 14 [style=solid label="\"union\""]
  1206 -> 251 [style=solid label="\"operator\""]
  1206 -> 15 [style=solid label="\"const\""]
  1206 -> 16 [style=solid label="\"volatile\""]
  1206 -> 17 [style=solid label="\"friend\""]
  1206 -> 18 [style=solid label="\"typedef\""]
  1206 -> 19 [style=solid label="\"consteval\""]
  1206 -> 20 [style=solid label="\"constinit\""]
  1206 -> 21 [style=solid label="\"decltype\""]
  1206 -> 22 [style=solid label="\"enum\""]
  1206 -> 23 [style=solid label="\"explicit\""]
  1206 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1206 -> 253 [style=solid label="\"*\""]
  1206 -> 254 [style=solid label="INTEGER_LITERAL"]
  1206 -> 255 [style=solid label="\"requires\""]
  1206 -> 256 [style=solid label="\"~\""]
  1206 -> 257 [style=solid label="\"++\""]
  1206 -> 258 [style=solid label="\"--\""]
  1206 -> 259 [style=solid label="POINTER_LITERAL"]
  1206 -> 260 [style=solid label="\"dynamic_cast\""]
  1206 -> 261 [style=solid label="\"static_cast\""]
  1206 -> 262 [style=solid label="\"reinterpret_cast\""]
  1206 -> 263 [style=solid label="\"const_cast\""]
  1206 -> 264 [style=solid label="\"typeid\""]
  1206 -> 27 [style=solid label="\"char\""]
  1206 -> 28 [style=solid label="\"char8_t\""]
  1206 -> 29 [style=solid label="\"char16_t\""]
  1206 -> 30 [style=solid label="\"char32_t\""]
  1206 -> 31 [style=solid label="\"wchar_t\""]
  1206 -> 32 [style=solid label="\"bool\""]
  1206 -> 33 [style=solid label="\"short\""]
  1206 -> 34 [style=solid label="\"int\""]
  1206 -> 35 [style=solid label="\"long\""]
  1206 -> 36 [style=solid label="\"signed\""]
  1206 -> 37 [style=solid label="\"unsigned\""]
  1206 -> 38 [style=solid label="\"float\""]
  1206 -> 39 [style=solid label="\"double\""]
  1206 -> 40 [style=solid label="\"void\""]
  1206 -> 42 [style=solid label="\"static\""]
  1206 -> 43 [style=solid label="\"thread_local\""]
  1206 -> 44 [style=solid label="\"mutable\""]
  1206 -> 118 [style=solid label="STRING_LITERAL"]
  1206 -> 265 [style=solid label="\"throw\""]
  1206 -> 266 [style=solid label="\"sizeof\""]
  1206 -> 267 [style=solid label="\"alignof\""]
  1206 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1206 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1206 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1206 -> 271 [style=solid label="\"co_yield\""]
  1206 -> 272 [style=dashed label="SCOPE-opt"]
  1206 -> 273 [style=dashed label="additive-expression"]
  1206 -> 1262 [style=dashed label="alias-declaration"]
  1206 -> 274 [style=dashed label="and-expression"]
  1206 -> 275 [style=dashed label="assignment-expression"]
  1206 -> 992 [style=dashed label="attribute-specifier-seq"]
  1206 -> 1263 [style=dashed label="attribute-specifier-seq-opt"]
  1206 -> 276 [style=dashed label="await-expression"]
  1206 -> 277 [style=dashed label="boolean-literal"]
  1206 -> 278 [style=dashed label="cast-expression"]
  1206 -> 279 [style=dashed label="character-literal"]
  1206 -> 53 [style=dashed label="class-head"]
  1206 -> 54 [style=dashed label="class-key"]
  1206 -> 55 [style=dashed label="class-name"]
  1206 -> 56 [style=dashed label="class-specifier"]
  1206 -> 280 [style=dashed label="compare-expression"]
  1206 -> 281 [style=dashed label="conditional-expression"]
  1206 -> 282 [style=dashed label="conversion-function-id"]
  1206 -> 57 [style=dashed label="cv-qualifier"]
  1206 -> 58 [style=dashed label="decl-specifier"]
  1206 -> 59 [style=dashed label="decl-specifier-seq"]
  1206 -> 63 [style=dashed label="decltype-specifier"]
  1206 -> 65 [style=dashed label="defining-type-specifier"]
  1206 -> 283 [style=dashed label="delete-expression"]
  1206 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1206 -> 67 [style=dashed label="elaborated-type-specifier"]
  1206 -> 69 [style=dashed label="enum-head"]
  1206 -> 154 [style=dashed label="enum-key"]
  1206 -> 71 [style=dashed label="enum-name"]
  1206 -> 72 [style=dashed label="enum-specifier"]
  1206 -> 284 [style=dashed label="equality-expression"]
  1206 -> 285 [style=dashed label="exclusive-or-expression"]
  1206 -> 155 [style=dashed label="explicit-specifier"]
  1206 -> 1129 [style=dashed label="expression"]
  1206 -> 1130 [style=dashed label="expression-opt"]
  1206 -> 1264 [style=dashed label="expression-statement"]
  1206 -> 287 [style=dashed label="floating-point-literal"]
  1206 -> 288 [style=dashed label="fold-expression"]
  1206 -> 79 [style=dashed label="function-specifier"]
  1206 -> 289 [style=dashed label="id-expression"]
  1206 -> 290 [style=dashed label="inclusive-or-expression"]
  1206 -> 1265 [style=dashed label="init-statement"]
  1206 -> 1266 [style=dashed label="init-statement-opt"]
  1206 -> 291 [style=dashed label="integer-literal"]
  1206 -> 292 [style=dashed label="lambda-expression"]
  1206 -> 293 [style=dashed label="lambda-introducer"]
  1206 -> 294 [style=dashed label="literal"]
  1206 -> 295 [style=dashed label="literal-operator-id"]
  1206 -> 296 [style=dashed label="logical-and-expression"]
  1206 -> 297 [style=dashed label="logical-or-expression"]
  1206 -> 298 [style=dashed label="multiplicative-expression"]
  1206 -> 85 [style=dashed label="namespace-alias"]
  1206 -> 88 [style=dashed label="namespace-name"]
  1206 -> 299 [style=dashed label="nested-name-specifier"]
  1206 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1206 -> 300 [style=dashed label="new-expression"]
  1206 -> 301 [style=dashed label="noexcept-expression"]
  1206 -> 302 [style=dashed label="operator-function-id"]
  1206 -> 94 [style=dashed label="placeholder-type-specifier"]
  1206 -> 303 [style=dashed label="pm-expression"]
  1206 -> 304 [style=dashed label="pointer-literal"]
  1206 -> 305 [style=dashed label="postfix-expression"]
  1206 -> 306 [style=dashed label="primary-expression"]
  1206 -> 307 [style=dashed label="qualified-id"]
  1206 -> 308 [style=dashed label="relational-expression"]
  1206 -> 309 [style=dashed label="requires-expression"]
  1206 -> 310 [style=dashed label="shift-expression"]
  1206 -> 1267 [style=dashed label="simple-declaration"]
  1206 -> 311 [style=dashed label="simple-template-id"]
  1206 -> 427 [style=dashed label="simple-type-specifier"]
  1206 -> 99 [style=dashed label="storage-class-specifier"]
  1206 -> 313 [style=dashed label="string-literal"]
  1206 -> 314 [style=dashed label="template-id"]
  1206 -> 102 [style=dashed label="template-name"]
  1206 -> 315 [style=dashed label="throw-expression"]
  1206 -> 104 [style=dashed label="type-constraint"]
  1206 -> 105 [style=dashed label="type-constraint-opt"]
  1206 -> 106 [style=dashed label="type-name"]
  1206 -> 107 [style=dashed label="type-specifier"]
  1206 -> 108 [style=dashed label="typedef-name"]
  1206 -> 434 [style=dashed label="typename-specifier"]
  1206 -> 317 [style=dashed label="unary-expression"]
  1206 -> 318 [style=dashed label="unary-operator"]
  1206 -> 319 [style=dashed label="unqualified-id"]
  1206 -> 320 [style=dashed label="user-defined-character-literal"]
  1206 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1206 -> 322 [style=dashed label="user-defined-integer-literal"]
  1206 -> 323 [style=dashed label="user-defined-literal"]
  1206 -> 324 [style=dashed label="user-defined-string-literal"]
  1206 -> 325 [style=dashed label="yield-expression"]
  1206 -> "1206R19" [style=solid]
 "1206R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1206 -> "1206R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"[\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1206R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1206 -> "1206R83" [label="[\"alignas\", \"auto\"]", style=solid]
 "1206R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1206 -> "1206R284" [label="[\";\"]", style=solid]
 "1206R284" [label="R284", fillcolor=3, shape=diamond, style=filled]
  1206 -> "1206R360d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"alignas\", \"[\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1206R360d" [label="R360", fillcolor=5, shape=diamond, style=filled]
  1206 -> "1206R469d" [label="[IDENTIFIER]", style=solid]
 "1206R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1206 -> "1206R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1206R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1207 [label="State 1207\n\l375 jump-statement: \"break\" \";\" •\l"]
  1207 -> "1207R375" [style=solid]
 "1207R375" [label="R375", fillcolor=3, shape=diamond, style=filled]
  1208 [label="State 1208\n\l376 jump-statement: \"continue\" \";\" •\l"]
  1208 -> "1208R376" [style=solid]
 "1208R376" [label="R376", fillcolor=3, shape=diamond, style=filled]
  1209 [label="State 1209\n\l377 jump-statement: \"return\" expr-or-braced-init-list-opt • \";\"\l"]
  1209 -> 1268 [style=solid label="\";\""]
  1210 [label="State 1210\n\l379 jump-statement: \"goto\" IDENTIFIER • \";\"\l"]
  1210 -> 1269 [style=solid label="\";\""]
  1211 [label="State 1211\n\l381 labeled-statement: attribute-specifier-seq-opt \"case\" constant-expression • \":\" statement\l"]
  1211 -> 1270 [style=solid label="\":\""]
  1212 [label="State 1212\n\l  4 CONSTEXPR-opt: \"constexpr\" •\l"]
  1212 -> "1212R4" [style=solid]
 "1212R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  1213 [label="State 1213\n\l 18 NOT-opt: \"!\" •\l"]
  1213 -> "1213R18" [style=solid]
 "1213R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  1214 [label="State 1214\n\l640 selection-statement: \"if\" CONSTEXPR-opt • \"(\" init-statement-opt condition \")\" statement\l641                    | \"if\" CONSTEXPR-opt • \"(\" init-statement-opt condition \")\" statement \"else\" statement\l"]
  1214 -> 1271 [style=solid label="\"(\""]
  1215 [label="State 1215\n\l642 selection-statement: \"if\" NOT-opt • \"consteval\" compound-statement\l643                    | \"if\" NOT-opt • \"consteval\" compound-statement \"else\" statement\l"]
  1215 -> 1272 [style=solid label="\"consteval\""]
  1216 [label="State 1216\n\l644 selection-statement: \"switch\" \"(\" • init-statement-opt condition \")\" statement\l"]
  1216 -> 1 [style=solid label="\"constexpr\""]
  1216 -> 150 [style=solid label="\"extern\""]
  1216 -> 238 [style=solid label="IDENTIFIER"]
  1216 -> 151 [style=solid label="\"inline\""]
  1216 -> 239 [style=solid label="\"noexcept\""]
  1216 -> 240 [style=solid label="\"!\""]
  1216 -> 241 [style=solid label="\"::\""]
  1216 -> 242 [style=solid label="\"this\""]
  1216 -> 8 [style=solid label="\"typename\""]
  1216 -> 9 [style=solid label="\"virtual\""]
  1216 -> 243 [style=solid label="\"+\""]
  1216 -> 244 [style=solid label="\"-\""]
  1216 -> 1261 [style=solid label="\"using\""]
  1216 -> 245 [style=solid label="\"(\""]
  1216 -> 246 [style=solid label="\"&\""]
  1216 -> 247 [style=solid label="\"[\""]
  1216 -> 248 [style=solid label="\"co_await\""]
  1216 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1216 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1216 -> 12 [style=solid label="\"class\""]
  1216 -> 13 [style=solid label="\"struct\""]
  1216 -> 14 [style=solid label="\"union\""]
  1216 -> 251 [style=solid label="\"operator\""]
  1216 -> 15 [style=solid label="\"const\""]
  1216 -> 16 [style=solid label="\"volatile\""]
  1216 -> 17 [style=solid label="\"friend\""]
  1216 -> 18 [style=solid label="\"typedef\""]
  1216 -> 19 [style=solid label="\"consteval\""]
  1216 -> 20 [style=solid label="\"constinit\""]
  1216 -> 21 [style=solid label="\"decltype\""]
  1216 -> 22 [style=solid label="\"enum\""]
  1216 -> 23 [style=solid label="\"explicit\""]
  1216 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1216 -> 253 [style=solid label="\"*\""]
  1216 -> 254 [style=solid label="INTEGER_LITERAL"]
  1216 -> 255 [style=solid label="\"requires\""]
  1216 -> 256 [style=solid label="\"~\""]
  1216 -> 257 [style=solid label="\"++\""]
  1216 -> 258 [style=solid label="\"--\""]
  1216 -> 259 [style=solid label="POINTER_LITERAL"]
  1216 -> 260 [style=solid label="\"dynamic_cast\""]
  1216 -> 261 [style=solid label="\"static_cast\""]
  1216 -> 262 [style=solid label="\"reinterpret_cast\""]
  1216 -> 263 [style=solid label="\"const_cast\""]
  1216 -> 264 [style=solid label="\"typeid\""]
  1216 -> 27 [style=solid label="\"char\""]
  1216 -> 28 [style=solid label="\"char8_t\""]
  1216 -> 29 [style=solid label="\"char16_t\""]
  1216 -> 30 [style=solid label="\"char32_t\""]
  1216 -> 31 [style=solid label="\"wchar_t\""]
  1216 -> 32 [style=solid label="\"bool\""]
  1216 -> 33 [style=solid label="\"short\""]
  1216 -> 34 [style=solid label="\"int\""]
  1216 -> 35 [style=solid label="\"long\""]
  1216 -> 36 [style=solid label="\"signed\""]
  1216 -> 37 [style=solid label="\"unsigned\""]
  1216 -> 38 [style=solid label="\"float\""]
  1216 -> 39 [style=solid label="\"double\""]
  1216 -> 40 [style=solid label="\"void\""]
  1216 -> 42 [style=solid label="\"static\""]
  1216 -> 43 [style=solid label="\"thread_local\""]
  1216 -> 44 [style=solid label="\"mutable\""]
  1216 -> 118 [style=solid label="STRING_LITERAL"]
  1216 -> 265 [style=solid label="\"throw\""]
  1216 -> 266 [style=solid label="\"sizeof\""]
  1216 -> 267 [style=solid label="\"alignof\""]
  1216 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1216 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1216 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1216 -> 271 [style=solid label="\"co_yield\""]
  1216 -> 272 [style=dashed label="SCOPE-opt"]
  1216 -> 273 [style=dashed label="additive-expression"]
  1216 -> 1262 [style=dashed label="alias-declaration"]
  1216 -> 274 [style=dashed label="and-expression"]
  1216 -> 275 [style=dashed label="assignment-expression"]
  1216 -> 992 [style=dashed label="attribute-specifier-seq"]
  1216 -> 1263 [style=dashed label="attribute-specifier-seq-opt"]
  1216 -> 276 [style=dashed label="await-expression"]
  1216 -> 277 [style=dashed label="boolean-literal"]
  1216 -> 278 [style=dashed label="cast-expression"]
  1216 -> 279 [style=dashed label="character-literal"]
  1216 -> 53 [style=dashed label="class-head"]
  1216 -> 54 [style=dashed label="class-key"]
  1216 -> 55 [style=dashed label="class-name"]
  1216 -> 56 [style=dashed label="class-specifier"]
  1216 -> 280 [style=dashed label="compare-expression"]
  1216 -> 281 [style=dashed label="conditional-expression"]
  1216 -> 282 [style=dashed label="conversion-function-id"]
  1216 -> 57 [style=dashed label="cv-qualifier"]
  1216 -> 58 [style=dashed label="decl-specifier"]
  1216 -> 59 [style=dashed label="decl-specifier-seq"]
  1216 -> 63 [style=dashed label="decltype-specifier"]
  1216 -> 65 [style=dashed label="defining-type-specifier"]
  1216 -> 283 [style=dashed label="delete-expression"]
  1216 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1216 -> 67 [style=dashed label="elaborated-type-specifier"]
  1216 -> 69 [style=dashed label="enum-head"]
  1216 -> 154 [style=dashed label="enum-key"]
  1216 -> 71 [style=dashed label="enum-name"]
  1216 -> 72 [style=dashed label="enum-specifier"]
  1216 -> 284 [style=dashed label="equality-expression"]
  1216 -> 285 [style=dashed label="exclusive-or-expression"]
  1216 -> 155 [style=dashed label="explicit-specifier"]
  1216 -> 1129 [style=dashed label="expression"]
  1216 -> 1130 [style=dashed label="expression-opt"]
  1216 -> 1264 [style=dashed label="expression-statement"]
  1216 -> 287 [style=dashed label="floating-point-literal"]
  1216 -> 288 [style=dashed label="fold-expression"]
  1216 -> 79 [style=dashed label="function-specifier"]
  1216 -> 289 [style=dashed label="id-expression"]
  1216 -> 290 [style=dashed label="inclusive-or-expression"]
  1216 -> 1273 [style=dashed label="init-statement"]
  1216 -> 1274 [style=dashed label="init-statement-opt"]
  1216 -> 291 [style=dashed label="integer-literal"]
  1216 -> 292 [style=dashed label="lambda-expression"]
  1216 -> 293 [style=dashed label="lambda-introducer"]
  1216 -> 294 [style=dashed label="literal"]
  1216 -> 295 [style=dashed label="literal-operator-id"]
  1216 -> 296 [style=dashed label="logical-and-expression"]
  1216 -> 297 [style=dashed label="logical-or-expression"]
  1216 -> 298 [style=dashed label="multiplicative-expression"]
  1216 -> 85 [style=dashed label="namespace-alias"]
  1216 -> 88 [style=dashed label="namespace-name"]
  1216 -> 299 [style=dashed label="nested-name-specifier"]
  1216 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1216 -> 300 [style=dashed label="new-expression"]
  1216 -> 301 [style=dashed label="noexcept-expression"]
  1216 -> 302 [style=dashed label="operator-function-id"]
  1216 -> 94 [style=dashed label="placeholder-type-specifier"]
  1216 -> 303 [style=dashed label="pm-expression"]
  1216 -> 304 [style=dashed label="pointer-literal"]
  1216 -> 305 [style=dashed label="postfix-expression"]
  1216 -> 306 [style=dashed label="primary-expression"]
  1216 -> 307 [style=dashed label="qualified-id"]
  1216 -> 308 [style=dashed label="relational-expression"]
  1216 -> 309 [style=dashed label="requires-expression"]
  1216 -> 310 [style=dashed label="shift-expression"]
  1216 -> 1267 [style=dashed label="simple-declaration"]
  1216 -> 311 [style=dashed label="simple-template-id"]
  1216 -> 427 [style=dashed label="simple-type-specifier"]
  1216 -> 99 [style=dashed label="storage-class-specifier"]
  1216 -> 313 [style=dashed label="string-literal"]
  1216 -> 314 [style=dashed label="template-id"]
  1216 -> 102 [style=dashed label="template-name"]
  1216 -> 315 [style=dashed label="throw-expression"]
  1216 -> 104 [style=dashed label="type-constraint"]
  1216 -> 105 [style=dashed label="type-constraint-opt"]
  1216 -> 106 [style=dashed label="type-name"]
  1216 -> 107 [style=dashed label="type-specifier"]
  1216 -> 108 [style=dashed label="typedef-name"]
  1216 -> 434 [style=dashed label="typename-specifier"]
  1216 -> 317 [style=dashed label="unary-expression"]
  1216 -> 318 [style=dashed label="unary-operator"]
  1216 -> 319 [style=dashed label="unqualified-id"]
  1216 -> 320 [style=dashed label="user-defined-character-literal"]
  1216 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1216 -> 322 [style=dashed label="user-defined-integer-literal"]
  1216 -> 323 [style=dashed label="user-defined-literal"]
  1216 -> 324 [style=dashed label="user-defined-string-literal"]
  1216 -> 325 [style=dashed label="yield-expression"]
  1216 -> "1216R19" [style=solid]
 "1216R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1216 -> "1216R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"[\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1216R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1216 -> "1216R83" [label="[\"alignas\", \"auto\"]", style=solid]
 "1216R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1216 -> "1216R284" [label="[\";\"]", style=solid]
 "1216R284" [label="R284", fillcolor=3, shape=diamond, style=filled]
  1216 -> "1216R360d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"!\", \"::\", \"this\", \"typename\", \"virtual\", \"+\", \"-\", \"alignas\", \"(\", \"&\", \"[\", \"co_await\", BOOLEAN_LITERAL, CHARACTER_LITERAL, \"class\", \"struct\", \"union\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"delete\", \"enum\", \"explicit\", FLOATING_POINT_LITERAL, \"*\", INTEGER_LITERAL, \"requires\", \"new\", \"~\", \"++\", \"--\", \"auto\", POINTER_LITERAL, \"dynamic_cast\", \"static_cast\", \"reinterpret_cast\", \"const_cast\", \"typeid\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", STRING_LITERAL, \"throw\", \"sizeof\", \"alignof\", USER_DEFINED_CHARACTER_LITERAL, USER_DEFINED_FLOATING_POINT_LITERAL, USER_DEFINED_INTEGER_LITERAL, \"co_yield\"]", style=solid]
 "1216R360d" [label="R360", fillcolor=5, shape=diamond, style=filled]
  1216 -> "1216R469d" [label="[IDENTIFIER]", style=solid]
 "1216R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1216 -> "1216R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1216R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1217 [label="State 1217\n\l286 expression-statement: expression-opt \";\" •\l"]
  1217 -> "1217R286" [style=solid]
 "1217R286" [label="R286", fillcolor=3, shape=diamond, style=filled]
  1218 [label="State 1218\n\l471 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" INLINE-opt IDENTIFIER \"{\" namespace-body \"}\" •\l"]
  1218 -> "1218R471" [style=solid]
 "1218R471" [label="R471", fillcolor=3, shape=diamond, style=filled]
  1219 [label="State 1219\n\l 75 attribute-list: attribute-list \",\" attribute \"...\" •\l"]
  1219 -> "1219R75" [style=solid]
 "1219R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  1220 [label="State 1220\n\l 91 balanced-token: \"(\" balanced-token-seq-opt • \")\"\l"]
  1220 -> 1275 [style=solid label="\")\""]
  1221 [label="State 1221\n\l 92 balanced-token: \"[\" balanced-token-seq-opt • \"]\"\l"]
  1221 -> 1276 [style=solid label="\"]\""]
  1222 [label="State 1222\n\l 93 balanced-token: \"{\" balanced-token-seq-opt • \"}\"\l"]
  1222 -> 1277 [style=solid label="\"}\""]
  1223 [label="State 1223\n\l 96 balanced-token-seq: balanced-token-seq balanced-token •\l"]
  1223 -> "1223R96" [style=solid]
 "1223R96" [label="R96", fillcolor=3, shape=diamond, style=filled]
  1224 [label="State 1224\n\l 68 attribute-argument-clause: \"(\" balanced-token-seq-opt \")\" •\l"]
  1224 -> "1224R68" [style=solid]
 "1224R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
  1225 [label="State 1225\n\l654 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" initializer \";\" •\l"]
  1225 -> "1225R654" [style=solid]
 "1225R654" [label="R654", fillcolor=3, shape=diamond, style=filled]
  1226 [label="State 1226\n\l409 mem-initializer: mem-initializer-id \"(\" expression-list-opt • \")\"\l"]
  1226 -> 1278 [style=solid label="\")\""]
  1227 [label="State 1227\n\l414 mem-initializer-list: mem-initializer-list \",\" mem-initializer • ELLIPSIS-opt\l"]
  1227 -> 156 [style=solid label="\"...\""]
  1227 -> 1279 [style=dashed label="ELLIPSIS-opt"]
  1227 -> "1227R5" [style=solid]
 "1227R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1228 [label="State 1228\n\l338 handler: \"catch\" • \"(\" exception-declaration \")\" compound-statement\l"]
  1228 -> 1280 [style=solid label="\"(\""]
  1229 [label="State 1229\n\l339 handler-seq: handler • handler-seq-opt\l"]
  1229 -> 1228 [style=solid label="\"catch\""]
  1229 -> 1229 [style=dashed label="handler"]
  1229 -> 1281 [style=dashed label="handler-seq"]
  1229 -> 1282 [style=dashed label="handler-seq-opt"]
  1229 -> "1229R340" [style=solid]
 "1229R340" [label="R340", fillcolor=3, shape=diamond, style=filled]
  1230 [label="State 1230\n\l334 function-try-block: \"try\" ctor-initializer-opt compound-statement handler-seq •\l"]
  1230 -> "1230R334" [style=solid]
 "1230R334" [label="R334", fillcolor=3, shape=diamond, style=filled]
  1231 [label="State 1231\n\l564 parameters-and-qualifiers: \"(\" parameter-declaration-clause \")\" cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt • attribute-specifier-seq-opt\l"]
  1231 -> 177 [style=dashed label="attribute-specifier-seq"]
  1231 -> 1283 [style=dashed label="attribute-specifier-seq-opt"]
  1231 -> "1231R83" [style=solid]
 "1231R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1232 [label="State 1232\n\l429 member-declarator: IDENTIFIER-opt attribute-specifier-seq-opt \":\" constant-expression • brace-or-equal-initializer-opt\l"]
  1232 -> 396 [style=solid label="\"=\""]
  1232 -> 398 [style=solid label="\"{\""]
  1232 -> 1041 [style=dashed label="brace-or-equal-initializer"]
  1232 -> 1284 [style=dashed label="brace-or-equal-initializer-opt"]
  1232 -> 401 [style=dashed label="braced-init-list"]
  1232 -> "1232R119" [style=solid]
 "1232R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
  1233 [label="State 1233\n\l609 pure-specifier: \"=\" INTEGER_LITERAL •\l"]
  1233 -> "1233R609" [style=solid]
 "1233R609" [label="R609", fillcolor=3, shape=diamond, style=filled]
  1234 [label="State 1234\n\l427 member-declarator: declarator requires-clause •\l"]
  1234 -> "1234R427" [style=solid]
 "1234R427" [label="R427", fillcolor=3, shape=diamond, style=filled]
  1235 [label="State 1235\n\l426 member-declarator: declarator virt-specifier-seq-opt • pure-specifier-opt\l"]
  1235 -> 1285 [style=solid label="\"=\""]
  1235 -> 1165 [style=dashed label="pure-specifier"]
  1235 -> 1166 [style=dashed label="pure-specifier-opt"]
  1235 -> "1235R610" [style=solid]
 "1235R610" [label="R610", fillcolor=3, shape=diamond, style=filled]
  1236 [label="State 1236\n\l217 deduction-guide: explicit-specifier-opt template-name \"(\" parameter-declaration-clause \")\" \"->\" simple-template-id \";\" •\l"]
  1236 -> "1236R217" [style=solid]
 "1236R217" [label="R217", fillcolor=3, shape=diamond, style=filled]
  1237 [label="State 1237\n\l596 private-module-fragment: \"module\" \":\" \"private\" \";\" declaration-seq-opt •\l"]
  1237 -> "1237R596" [style=solid]
 "1237R596" [label="R596", fillcolor=3, shape=diamond, style=filled]
  1238 [label="State 1238\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l494 noptr-abstract-declarator: noptr-abstract-declarator-opt \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt •\l"]
  1238 -> 158 [style=solid label="\"alignas\""]
  1238 -> 162 [style=solid label="\"[\""]
  1238 -> 166 [style=dashed label="alignment-specifier"]
  1238 -> 167 [style=dashed label="attribute-specifier"]
  1238 -> "1238R494d" [label="[\"[\"]", style=solid]
 "1238R494d" [label="R494", fillcolor=5, shape=diamond, style=filled]
  1238 -> "1238R494" [style=solid]
 "1238R494" [label="R494", fillcolor=3, shape=diamond, style=filled]
  1239 [label="State 1239\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l499 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt •\l"]
  1239 -> 158 [style=solid label="\"alignas\""]
  1239 -> 162 [style=solid label="\"[\""]
  1239 -> 166 [style=dashed label="alignment-specifier"]
  1239 -> 167 [style=dashed label="attribute-specifier"]
  1239 -> "1239R499d" [label="[\"[\"]", style=solid]
 "1239R499d" [label="R499", fillcolor=5, shape=diamond, style=filled]
  1239 -> "1239R499" [style=solid]
 "1239R499" [label="R499", fillcolor=3, shape=diamond, style=filled]
  1240 [label="State 1240\n\l290 fold-expression: \"(\" cast-expression fold-operator \"...\" fold-operator cast-expression \")\" •\l"]
  1240 -> "1240R290" [style=solid]
 "1240R290" [label="R290", fillcolor=3, shape=diamond, style=filled]
  1241 [label="State 1241\n\l736 type-requirement: \"typename\" nested-name-specifier-opt type-name \";\" •\l"]
  1241 -> "1241R736" [style=solid]
 "1241R736" [label="R736", fillcolor=3, shape=diamond, style=filled]
  1242 [label="State 1242\n\l 16 NOEXCEPT-opt: \"noexcept\" •\l"]
  1242 -> "1242R16" [style=solid]
 "1242R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  1243 [label="State 1243\n\l150 compound-requirement: \"{\" expression \"}\" NOEXCEPT-opt • return-type-requirement-opt \";\"\l"]
  1243 -> 1286 [style=solid label="\"->\""]
  1243 -> 1287 [style=dashed label="return-type-requirement"]
  1243 -> 1288 [style=dashed label="return-type-requirement-opt"]
  1243 -> "1243R638" [style=solid]
 "1243R638" [label="R638", fillcolor=3, shape=diamond, style=filled]
  1244 [label="State 1244\n\l582 postfix-expression: \"dynamic_cast\" \"<\" type-id \">\" \"(\" expression \")\" •\l"]
  1244 -> "1244R582" [style=solid]
 "1244R582" [label="R582", fillcolor=3, shape=diamond, style=filled]
  1245 [label="State 1245\n\l583 postfix-expression: \"static_cast\" \"<\" type-id \">\" \"(\" expression \")\" •\l"]
  1245 -> "1245R583" [style=solid]
 "1245R583" [label="R583", fillcolor=3, shape=diamond, style=filled]
  1246 [label="State 1246\n\l584 postfix-expression: \"reinterpret_cast\" \"<\" type-id \">\" \"(\" expression \")\" •\l"]
  1246 -> "1246R584" [style=solid]
 "1246R584" [label="R584", fillcolor=3, shape=diamond, style=filled]
  1247 [label="State 1247\n\l585 postfix-expression: \"const_cast\" \"<\" type-id \">\" \"(\" expression \")\" •\l"]
  1247 -> "1247R585" [style=solid]
 "1247R585" [label="R585", fillcolor=3, shape=diamond, style=filled]
  1248 [label="State 1248\n\l478 new-expression: SCOPE-opt \"new\" new-placement-opt \"(\" type-id \")\" new-initializer-opt •\l"]
  1248 -> "1248R478" [style=solid]
 "1248R478" [label="R478", fillcolor=3, shape=diamond, style=filled]
  1249 [label="State 1249\n\l479 new-initializer: \"(\" expression-list-opt \")\" •\l"]
  1249 -> "1249R479" [style=solid]
 "1249R479" [label="R479", fillcolor=3, shape=diamond, style=filled]
  1250 [label="State 1250\n\l505 noptr-new-declarator: \"[\" expression-opt \"]\" • attribute-specifier-seq-opt\l"]
  1250 -> 177 [style=dashed label="attribute-specifier-seq"]
  1250 -> 1289 [style=dashed label="attribute-specifier-seq-opt"]
  1250 -> "1250R83" [style=solid]
 "1250R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1251 [label="State 1251\n\l506 noptr-new-declarator: noptr-new-declarator \"[\" constant-expression • \"]\" attribute-specifier-seq-opt\l"]
  1251 -> 1290 [style=solid label="\"]\""]
  1252 [label="State 1252\n\l391 lambda-expression: lambda-introducer \"<\" template-parameter-list \">\" requires-clause-opt lambda-declarator compound-statement •\l"]
  1252 -> "1252R391" [style=solid]
 "1252R391" [label="R391", fillcolor=3, shape=diamond, style=filled]
  1253 [label="State 1253\n\l380 labeled-statement: attribute-specifier-seq-opt IDENTIFIER \":\" statement •\l"]
  1253 -> "1253R380" [style=solid]
 "1253R380" [label="R380", fillcolor=3, shape=diamond, style=filled]
  1254 [label="State 1254\n\l173 coroutine-return-statement: \"co_return\" expr-or-braced-init-list-opt \";\" •\l"]
  1254 -> "1254R173" [style=solid]
 "1254R173" [label="R173", fillcolor=3, shape=diamond, style=filled]
  1255 [label="State 1255\n\l382 labeled-statement: attribute-specifier-seq-opt \"default\" \":\" statement •\l"]
  1255 -> "1255R382" [style=solid]
 "1255R382" [label="R382", fillcolor=3, shape=diamond, style=filled]
  1256 [label="State 1256\n\l719 try-block: \"try\" compound-statement handler-seq •\l"]
  1256 -> "1256R719" [style=solid]
 "1256R719" [label="R719", fillcolor=3, shape=diamond, style=filled]
  1257 [label="State 1257\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l155 condition: attribute-specifier-seq-opt • decl-specifier-seq declarator brace-or-equal-initializer\l"]
  1257 -> 1 [style=solid label="\"constexpr\""]
  1257 -> 150 [style=solid label="\"extern\""]
  1257 -> 4 [style=solid label="IDENTIFIER"]
  1257 -> 151 [style=solid label="\"inline\""]
  1257 -> 6 [style=solid label="\"::\""]
  1257 -> 8 [style=solid label="\"typename\""]
  1257 -> 9 [style=solid label="\"virtual\""]
  1257 -> 158 [style=solid label="\"alignas\""]
  1257 -> 162 [style=solid label="\"[\""]
  1257 -> 12 [style=solid label="\"class\""]
  1257 -> 13 [style=solid label="\"struct\""]
  1257 -> 14 [style=solid label="\"union\""]
  1257 -> 15 [style=solid label="\"const\""]
  1257 -> 16 [style=solid label="\"volatile\""]
  1257 -> 17 [style=solid label="\"friend\""]
  1257 -> 18 [style=solid label="\"typedef\""]
  1257 -> 19 [style=solid label="\"consteval\""]
  1257 -> 20 [style=solid label="\"constinit\""]
  1257 -> 21 [style=solid label="\"decltype\""]
  1257 -> 22 [style=solid label="\"enum\""]
  1257 -> 23 [style=solid label="\"explicit\""]
  1257 -> 27 [style=solid label="\"char\""]
  1257 -> 28 [style=solid label="\"char8_t\""]
  1257 -> 29 [style=solid label="\"char16_t\""]
  1257 -> 30 [style=solid label="\"char32_t\""]
  1257 -> 31 [style=solid label="\"wchar_t\""]
  1257 -> 32 [style=solid label="\"bool\""]
  1257 -> 33 [style=solid label="\"short\""]
  1257 -> 34 [style=solid label="\"int\""]
  1257 -> 35 [style=solid label="\"long\""]
  1257 -> 36 [style=solid label="\"signed\""]
  1257 -> 37 [style=solid label="\"unsigned\""]
  1257 -> 38 [style=solid label="\"float\""]
  1257 -> 39 [style=solid label="\"double\""]
  1257 -> 40 [style=solid label="\"void\""]
  1257 -> 42 [style=solid label="\"static\""]
  1257 -> 43 [style=solid label="\"thread_local\""]
  1257 -> 44 [style=solid label="\"mutable\""]
  1257 -> 166 [style=dashed label="alignment-specifier"]
  1257 -> 167 [style=dashed label="attribute-specifier"]
  1257 -> 53 [style=dashed label="class-head"]
  1257 -> 54 [style=dashed label="class-key"]
  1257 -> 55 [style=dashed label="class-name"]
  1257 -> 56 [style=dashed label="class-specifier"]
  1257 -> 57 [style=dashed label="cv-qualifier"]
  1257 -> 58 [style=dashed label="decl-specifier"]
  1257 -> 1291 [style=dashed label="decl-specifier-seq"]
  1257 -> 63 [style=dashed label="decltype-specifier"]
  1257 -> 65 [style=dashed label="defining-type-specifier"]
  1257 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1257 -> 67 [style=dashed label="elaborated-type-specifier"]
  1257 -> 69 [style=dashed label="enum-head"]
  1257 -> 154 [style=dashed label="enum-key"]
  1257 -> 71 [style=dashed label="enum-name"]
  1257 -> 72 [style=dashed label="enum-specifier"]
  1257 -> 155 [style=dashed label="explicit-specifier"]
  1257 -> 79 [style=dashed label="function-specifier"]
  1257 -> 85 [style=dashed label="namespace-alias"]
  1257 -> 88 [style=dashed label="namespace-name"]
  1257 -> 89 [style=dashed label="nested-name-specifier"]
  1257 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1257 -> 94 [style=dashed label="placeholder-type-specifier"]
  1257 -> 96 [style=dashed label="simple-template-id"]
  1257 -> 97 [style=dashed label="simple-type-specifier"]
  1257 -> 99 [style=dashed label="storage-class-specifier"]
  1257 -> 102 [style=dashed label="template-name"]
  1257 -> 104 [style=dashed label="type-constraint"]
  1257 -> 105 [style=dashed label="type-constraint-opt"]
  1257 -> 106 [style=dashed label="type-name"]
  1257 -> 107 [style=dashed label="type-specifier"]
  1257 -> 108 [style=dashed label="typedef-name"]
  1257 -> 109 [style=dashed label="typename-specifier"]
  1257 -> "1257R469d" [label="[IDENTIFIER]", style=solid]
 "1257R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1257 -> "1257R722d" [label="[\"decltype\"]", style=solid]
 "1257R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1257 -> "1257R722" [label="[]", style=solid]
 "1257R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1258 [label="State 1258\n\l371 iteration-statement: \"while\" \"(\" condition • \")\" statement\l"]
  1258 -> 1292 [style=solid label="\")\""]
  1259 [label="State 1259\n\l154 condition: expression •\l280 expression: expression • \",\" assignment-expression\l"]
  1259 -> 552 [style=solid label="\",\""]
  1259 -> "1259R154" [style=solid]
 "1259R154" [label="R154", fillcolor=3, shape=diamond, style=filled]
  1260 [label="State 1260\n\l372 iteration-statement: \"do\" statement \"while\" • \"(\" expression \")\" \";\"\l"]
  1260 -> 1293 [style=solid label="\"(\""]
  1261 [label="State 1261\n\l 44 alias-declaration: \"using\" • IDENTIFIER attribute-specifier-seq-opt \"=\" defining-type-id \";\"\l"]
  1261 -> 123 [style=solid label="IDENTIFIER"]
  1262 [label="State 1262\n\l359 init-statement: alias-declaration •\l"]
  1262 -> "1262R359" [style=solid]
 "1262R359" [label="R359", fillcolor=3, shape=diamond, style=filled]
  1263 [label="State 1263\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l654 simple-declaration: attribute-specifier-seq-opt • decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" initializer \";\"\l"]
  1263 -> 1 [style=solid label="\"constexpr\""]
  1263 -> 150 [style=solid label="\"extern\""]
  1263 -> 4 [style=solid label="IDENTIFIER"]
  1263 -> 151 [style=solid label="\"inline\""]
  1263 -> 6 [style=solid label="\"::\""]
  1263 -> 8 [style=solid label="\"typename\""]
  1263 -> 9 [style=solid label="\"virtual\""]
  1263 -> 158 [style=solid label="\"alignas\""]
  1263 -> 162 [style=solid label="\"[\""]
  1263 -> 12 [style=solid label="\"class\""]
  1263 -> 13 [style=solid label="\"struct\""]
  1263 -> 14 [style=solid label="\"union\""]
  1263 -> 15 [style=solid label="\"const\""]
  1263 -> 16 [style=solid label="\"volatile\""]
  1263 -> 17 [style=solid label="\"friend\""]
  1263 -> 18 [style=solid label="\"typedef\""]
  1263 -> 19 [style=solid label="\"consteval\""]
  1263 -> 20 [style=solid label="\"constinit\""]
  1263 -> 21 [style=solid label="\"decltype\""]
  1263 -> 22 [style=solid label="\"enum\""]
  1263 -> 23 [style=solid label="\"explicit\""]
  1263 -> 27 [style=solid label="\"char\""]
  1263 -> 28 [style=solid label="\"char8_t\""]
  1263 -> 29 [style=solid label="\"char16_t\""]
  1263 -> 30 [style=solid label="\"char32_t\""]
  1263 -> 31 [style=solid label="\"wchar_t\""]
  1263 -> 32 [style=solid label="\"bool\""]
  1263 -> 33 [style=solid label="\"short\""]
  1263 -> 34 [style=solid label="\"int\""]
  1263 -> 35 [style=solid label="\"long\""]
  1263 -> 36 [style=solid label="\"signed\""]
  1263 -> 37 [style=solid label="\"unsigned\""]
  1263 -> 38 [style=solid label="\"float\""]
  1263 -> 39 [style=solid label="\"double\""]
  1263 -> 40 [style=solid label="\"void\""]
  1263 -> 42 [style=solid label="\"static\""]
  1263 -> 43 [style=solid label="\"thread_local\""]
  1263 -> 44 [style=solid label="\"mutable\""]
  1263 -> 166 [style=dashed label="alignment-specifier"]
  1263 -> 167 [style=dashed label="attribute-specifier"]
  1263 -> 53 [style=dashed label="class-head"]
  1263 -> 54 [style=dashed label="class-key"]
  1263 -> 55 [style=dashed label="class-name"]
  1263 -> 56 [style=dashed label="class-specifier"]
  1263 -> 57 [style=dashed label="cv-qualifier"]
  1263 -> 58 [style=dashed label="decl-specifier"]
  1263 -> 1128 [style=dashed label="decl-specifier-seq"]
  1263 -> 63 [style=dashed label="decltype-specifier"]
  1263 -> 65 [style=dashed label="defining-type-specifier"]
  1263 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1263 -> 67 [style=dashed label="elaborated-type-specifier"]
  1263 -> 69 [style=dashed label="enum-head"]
  1263 -> 154 [style=dashed label="enum-key"]
  1263 -> 71 [style=dashed label="enum-name"]
  1263 -> 72 [style=dashed label="enum-specifier"]
  1263 -> 155 [style=dashed label="explicit-specifier"]
  1263 -> 79 [style=dashed label="function-specifier"]
  1263 -> 85 [style=dashed label="namespace-alias"]
  1263 -> 88 [style=dashed label="namespace-name"]
  1263 -> 89 [style=dashed label="nested-name-specifier"]
  1263 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1263 -> 94 [style=dashed label="placeholder-type-specifier"]
  1263 -> 96 [style=dashed label="simple-template-id"]
  1263 -> 97 [style=dashed label="simple-type-specifier"]
  1263 -> 99 [style=dashed label="storage-class-specifier"]
  1263 -> 102 [style=dashed label="template-name"]
  1263 -> 104 [style=dashed label="type-constraint"]
  1263 -> 105 [style=dashed label="type-constraint-opt"]
  1263 -> 106 [style=dashed label="type-name"]
  1263 -> 107 [style=dashed label="type-specifier"]
  1263 -> 108 [style=dashed label="typedef-name"]
  1263 -> 109 [style=dashed label="typename-specifier"]
  1263 -> "1263R469d" [label="[IDENTIFIER]", style=solid]
 "1263R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1263 -> "1263R722d" [label="[\"decltype\"]", style=solid]
 "1263R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1263 -> "1263R722" [label="[]", style=solid]
 "1263R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1264 [label="State 1264\n\l357 init-statement: expression-statement •\l"]
  1264 -> "1264R357" [style=solid]
 "1264R357" [label="R357", fillcolor=3, shape=diamond, style=filled]
  1265 [label="State 1265\n\l361 init-statement-opt: init-statement •\l373 iteration-statement: \"for\" \"(\" init-statement • condition-opt \";\" expression-opt \")\" statement\l"]
  1265 -> 238 [style=solid label="IDENTIFIER"]
  1265 -> 239 [style=solid label="\"noexcept\""]
  1265 -> 240 [style=solid label="\"!\""]
  1265 -> 241 [style=solid label="\"::\""]
  1265 -> 242 [style=solid label="\"this\""]
  1265 -> 8 [style=solid label="\"typename\""]
  1265 -> 243 [style=solid label="\"+\""]
  1265 -> 244 [style=solid label="\"-\""]
  1265 -> 245 [style=solid label="\"(\""]
  1265 -> 246 [style=solid label="\"&\""]
  1265 -> 247 [style=solid label="\"[\""]
  1265 -> 248 [style=solid label="\"co_await\""]
  1265 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1265 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1265 -> 251 [style=solid label="\"operator\""]
  1265 -> 21 [style=solid label="\"decltype\""]
  1265 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1265 -> 253 [style=solid label="\"*\""]
  1265 -> 254 [style=solid label="INTEGER_LITERAL"]
  1265 -> 255 [style=solid label="\"requires\""]
  1265 -> 256 [style=solid label="\"~\""]
  1265 -> 257 [style=solid label="\"++\""]
  1265 -> 258 [style=solid label="\"--\""]
  1265 -> 259 [style=solid label="POINTER_LITERAL"]
  1265 -> 260 [style=solid label="\"dynamic_cast\""]
  1265 -> 261 [style=solid label="\"static_cast\""]
  1265 -> 262 [style=solid label="\"reinterpret_cast\""]
  1265 -> 263 [style=solid label="\"const_cast\""]
  1265 -> 264 [style=solid label="\"typeid\""]
  1265 -> 27 [style=solid label="\"char\""]
  1265 -> 28 [style=solid label="\"char8_t\""]
  1265 -> 29 [style=solid label="\"char16_t\""]
  1265 -> 30 [style=solid label="\"char32_t\""]
  1265 -> 31 [style=solid label="\"wchar_t\""]
  1265 -> 32 [style=solid label="\"bool\""]
  1265 -> 33 [style=solid label="\"short\""]
  1265 -> 34 [style=solid label="\"int\""]
  1265 -> 35 [style=solid label="\"long\""]
  1265 -> 36 [style=solid label="\"signed\""]
  1265 -> 37 [style=solid label="\"unsigned\""]
  1265 -> 38 [style=solid label="\"float\""]
  1265 -> 39 [style=solid label="\"double\""]
  1265 -> 40 [style=solid label="\"void\""]
  1265 -> 118 [style=solid label="STRING_LITERAL"]
  1265 -> 265 [style=solid label="\"throw\""]
  1265 -> 266 [style=solid label="\"sizeof\""]
  1265 -> 267 [style=solid label="\"alignof\""]
  1265 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1265 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1265 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1265 -> 271 [style=solid label="\"co_yield\""]
  1265 -> 272 [style=dashed label="SCOPE-opt"]
  1265 -> 273 [style=dashed label="additive-expression"]
  1265 -> 274 [style=dashed label="and-expression"]
  1265 -> 275 [style=dashed label="assignment-expression"]
  1265 -> 177 [style=dashed label="attribute-specifier-seq"]
  1265 -> 1257 [style=dashed label="attribute-specifier-seq-opt"]
  1265 -> 276 [style=dashed label="await-expression"]
  1265 -> 277 [style=dashed label="boolean-literal"]
  1265 -> 278 [style=dashed label="cast-expression"]
  1265 -> 279 [style=dashed label="character-literal"]
  1265 -> 55 [style=dashed label="class-name"]
  1265 -> 280 [style=dashed label="compare-expression"]
  1265 -> 1294 [style=dashed label="condition"]
  1265 -> 1295 [style=dashed label="condition-opt"]
  1265 -> 281 [style=dashed label="conditional-expression"]
  1265 -> 282 [style=dashed label="conversion-function-id"]
  1265 -> 63 [style=dashed label="decltype-specifier"]
  1265 -> 283 [style=dashed label="delete-expression"]
  1265 -> 71 [style=dashed label="enum-name"]
  1265 -> 284 [style=dashed label="equality-expression"]
  1265 -> 285 [style=dashed label="exclusive-or-expression"]
  1265 -> 1259 [style=dashed label="expression"]
  1265 -> 287 [style=dashed label="floating-point-literal"]
  1265 -> 288 [style=dashed label="fold-expression"]
  1265 -> 289 [style=dashed label="id-expression"]
  1265 -> 290 [style=dashed label="inclusive-or-expression"]
  1265 -> 291 [style=dashed label="integer-literal"]
  1265 -> 292 [style=dashed label="lambda-expression"]
  1265 -> 293 [style=dashed label="lambda-introducer"]
  1265 -> 294 [style=dashed label="literal"]
  1265 -> 295 [style=dashed label="literal-operator-id"]
  1265 -> 296 [style=dashed label="logical-and-expression"]
  1265 -> 297 [style=dashed label="logical-or-expression"]
  1265 -> 298 [style=dashed label="multiplicative-expression"]
  1265 -> 85 [style=dashed label="namespace-alias"]
  1265 -> 88 [style=dashed label="namespace-name"]
  1265 -> 299 [style=dashed label="nested-name-specifier"]
  1265 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1265 -> 300 [style=dashed label="new-expression"]
  1265 -> 301 [style=dashed label="noexcept-expression"]
  1265 -> 302 [style=dashed label="operator-function-id"]
  1265 -> 94 [style=dashed label="placeholder-type-specifier"]
  1265 -> 303 [style=dashed label="pm-expression"]
  1265 -> 304 [style=dashed label="pointer-literal"]
  1265 -> 305 [style=dashed label="postfix-expression"]
  1265 -> 306 [style=dashed label="primary-expression"]
  1265 -> 307 [style=dashed label="qualified-id"]
  1265 -> 308 [style=dashed label="relational-expression"]
  1265 -> 309 [style=dashed label="requires-expression"]
  1265 -> 310 [style=dashed label="shift-expression"]
  1265 -> 311 [style=dashed label="simple-template-id"]
  1265 -> 312 [style=dashed label="simple-type-specifier"]
  1265 -> 313 [style=dashed label="string-literal"]
  1265 -> 314 [style=dashed label="template-id"]
  1265 -> 102 [style=dashed label="template-name"]
  1265 -> 315 [style=dashed label="throw-expression"]
  1265 -> 104 [style=dashed label="type-constraint"]
  1265 -> 105 [style=dashed label="type-constraint-opt"]
  1265 -> 106 [style=dashed label="type-name"]
  1265 -> 108 [style=dashed label="typedef-name"]
  1265 -> 316 [style=dashed label="typename-specifier"]
  1265 -> 317 [style=dashed label="unary-expression"]
  1265 -> 318 [style=dashed label="unary-operator"]
  1265 -> 319 [style=dashed label="unqualified-id"]
  1265 -> 320 [style=dashed label="user-defined-character-literal"]
  1265 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1265 -> 322 [style=dashed label="user-defined-integer-literal"]
  1265 -> 323 [style=dashed label="user-defined-literal"]
  1265 -> 324 [style=dashed label="user-defined-string-literal"]
  1265 -> 325 [style=dashed label="yield-expression"]
  1265 -> "1265R19" [label="[\"delete\", \"new\"]", style=solid]
 "1265R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1265 -> "1265R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"[\", \"decltype\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\"]", style=solid]
 "1265R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1265 -> "1265R83" [style=solid]
 "1265R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1265 -> "1265R156" [label="[\";\"]", style=solid]
 "1265R156" [label="R156", fillcolor=3, shape=diamond, style=filled]
  1265 -> "1265R361d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"alignas\", \"[\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1265R361d" [label="R361", fillcolor=5, shape=diamond, style=filled]
  1265 -> "1265R469d" [label="[IDENTIFIER]", style=solid]
 "1265R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1265 -> "1265R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1265R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1266 [label="State 1266\n\l374 iteration-statement: \"for\" \"(\" init-statement-opt • for-range-declaration \":\" for-range-initializer \")\" statement\l"]
  1266 -> 177 [style=dashed label="attribute-specifier-seq"]
  1266 -> 1296 [style=dashed label="attribute-specifier-seq-opt"]
  1266 -> 1297 [style=dashed label="for-range-declaration"]
  1266 -> "1266R83" [style=solid]
 "1266R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1267 [label="State 1267\n\l358 init-statement: simple-declaration •\l"]
  1267 -> "1267R358" [style=solid]
 "1267R358" [label="R358", fillcolor=3, shape=diamond, style=filled]
  1268 [label="State 1268\n\l377 jump-statement: \"return\" expr-or-braced-init-list-opt \";\" •\l"]
  1268 -> "1268R377" [style=solid]
 "1268R377" [label="R377", fillcolor=3, shape=diamond, style=filled]
  1269 [label="State 1269\n\l379 jump-statement: \"goto\" IDENTIFIER \";\" •\l"]
  1269 -> "1269R379" [style=solid]
 "1269R379" [label="R379", fillcolor=3, shape=diamond, style=filled]
  1270 [label="State 1270\n\l381 labeled-statement: attribute-specifier-seq-opt \"case\" constant-expression \":\" • statement\l"]
  1270 -> 1 [style=solid label="\"constexpr\""]
  1270 -> 150 [style=solid label="\"extern\""]
  1270 -> 4 [style=solid label="IDENTIFIER"]
  1270 -> 151 [style=solid label="\"inline\""]
  1270 -> 6 [style=solid label="\"::\""]
  1270 -> 8 [style=solid label="\"typename\""]
  1270 -> 9 [style=solid label="\"virtual\""]
  1270 -> 10 [style=solid label="\"using\""]
  1270 -> 12 [style=solid label="\"class\""]
  1270 -> 13 [style=solid label="\"struct\""]
  1270 -> 14 [style=solid label="\"union\""]
  1270 -> 15 [style=solid label="\"const\""]
  1270 -> 16 [style=solid label="\"volatile\""]
  1270 -> 17 [style=solid label="\"friend\""]
  1270 -> 18 [style=solid label="\"typedef\""]
  1270 -> 19 [style=solid label="\"consteval\""]
  1270 -> 20 [style=solid label="\"constinit\""]
  1270 -> 21 [style=solid label="\"decltype\""]
  1270 -> 22 [style=solid label="\"enum\""]
  1270 -> 23 [style=solid label="\"explicit\""]
  1270 -> 991 [style=solid label="\"namespace\""]
  1270 -> 27 [style=solid label="\"char\""]
  1270 -> 28 [style=solid label="\"char8_t\""]
  1270 -> 29 [style=solid label="\"char16_t\""]
  1270 -> 30 [style=solid label="\"char32_t\""]
  1270 -> 31 [style=solid label="\"wchar_t\""]
  1270 -> 32 [style=solid label="\"bool\""]
  1270 -> 33 [style=solid label="\"short\""]
  1270 -> 34 [style=solid label="\"int\""]
  1270 -> 35 [style=solid label="\"long\""]
  1270 -> 36 [style=solid label="\"signed\""]
  1270 -> 37 [style=solid label="\"unsigned\""]
  1270 -> 38 [style=solid label="\"float\""]
  1270 -> 39 [style=solid label="\"double\""]
  1270 -> 40 [style=solid label="\"void\""]
  1270 -> 41 [style=solid label="\"static_assert\""]
  1270 -> 42 [style=solid label="\"static\""]
  1270 -> 43 [style=solid label="\"thread_local\""]
  1270 -> 44 [style=solid label="\"mutable\""]
  1270 -> 47 [style=dashed label="alias-declaration"]
  1270 -> 48 [style=dashed label="asm-declaration"]
  1270 -> 992 [style=dashed label="attribute-specifier-seq"]
  1270 -> 993 [style=dashed label="attribute-specifier-seq-opt"]
  1270 -> 994 [style=dashed label="block-declaration"]
  1270 -> 53 [style=dashed label="class-head"]
  1270 -> 54 [style=dashed label="class-key"]
  1270 -> 55 [style=dashed label="class-name"]
  1270 -> 56 [style=dashed label="class-specifier"]
  1270 -> 57 [style=dashed label="cv-qualifier"]
  1270 -> 58 [style=dashed label="decl-specifier"]
  1270 -> 59 [style=dashed label="decl-specifier-seq"]
  1270 -> 995 [style=dashed label="declaration-statement"]
  1270 -> 63 [style=dashed label="decltype-specifier"]
  1270 -> 65 [style=dashed label="defining-type-specifier"]
  1270 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1270 -> 67 [style=dashed label="elaborated-type-specifier"]
  1270 -> 69 [style=dashed label="enum-head"]
  1270 -> 70 [style=dashed label="enum-key"]
  1270 -> 71 [style=dashed label="enum-name"]
  1270 -> 72 [style=dashed label="enum-specifier"]
  1270 -> 155 [style=dashed label="explicit-specifier"]
  1270 -> 79 [style=dashed label="function-specifier"]
  1270 -> 996 [style=dashed label="labeled-statement"]
  1270 -> 85 [style=dashed label="namespace-alias"]
  1270 -> 86 [style=dashed label="namespace-alias-definition"]
  1270 -> 88 [style=dashed label="namespace-name"]
  1270 -> 89 [style=dashed label="nested-name-specifier"]
  1270 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1270 -> 93 [style=dashed label="opaque-enum-declaration"]
  1270 -> 94 [style=dashed label="placeholder-type-specifier"]
  1270 -> 95 [style=dashed label="simple-declaration"]
  1270 -> 96 [style=dashed label="simple-template-id"]
  1270 -> 97 [style=dashed label="simple-type-specifier"]
  1270 -> 1298 [style=dashed label="statement"]
  1270 -> 98 [style=dashed label="static_assert-declaration"]
  1270 -> 99 [style=dashed label="storage-class-specifier"]
  1270 -> 102 [style=dashed label="template-name"]
  1270 -> 104 [style=dashed label="type-constraint"]
  1270 -> 105 [style=dashed label="type-constraint-opt"]
  1270 -> 106 [style=dashed label="type-name"]
  1270 -> 107 [style=dashed label="type-specifier"]
  1270 -> 108 [style=dashed label="typedef-name"]
  1270 -> 109 [style=dashed label="typename-specifier"]
  1270 -> 111 [style=dashed label="using-declaration"]
  1270 -> 112 [style=dashed label="using-directive"]
  1270 -> 113 [style=dashed label="using-enum-declaration"]
  1270 -> "1270R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1270R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1270 -> "1270R83" [style=solid]
 "1270R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1270 -> "1270R469d" [label="[IDENTIFIER]", style=solid]
 "1270R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1270 -> "1270R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1270R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1271 [label="State 1271\n\l640 selection-statement: \"if\" CONSTEXPR-opt \"(\" • init-statement-opt condition \")\" statement\l641                    | \"if\" CONSTEXPR-opt \"(\" • init-statement-opt condition \")\" statement \"else\" statement\l"]
  1271 -> 1 [style=solid label="\"constexpr\""]
  1271 -> 150 [style=solid label="\"extern\""]
  1271 -> 238 [style=solid label="IDENTIFIER"]
  1271 -> 151 [style=solid label="\"inline\""]
  1271 -> 239 [style=solid label="\"noexcept\""]
  1271 -> 240 [style=solid label="\"!\""]
  1271 -> 241 [style=solid label="\"::\""]
  1271 -> 242 [style=solid label="\"this\""]
  1271 -> 8 [style=solid label="\"typename\""]
  1271 -> 9 [style=solid label="\"virtual\""]
  1271 -> 243 [style=solid label="\"+\""]
  1271 -> 244 [style=solid label="\"-\""]
  1271 -> 1261 [style=solid label="\"using\""]
  1271 -> 245 [style=solid label="\"(\""]
  1271 -> 246 [style=solid label="\"&\""]
  1271 -> 247 [style=solid label="\"[\""]
  1271 -> 248 [style=solid label="\"co_await\""]
  1271 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1271 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1271 -> 12 [style=solid label="\"class\""]
  1271 -> 13 [style=solid label="\"struct\""]
  1271 -> 14 [style=solid label="\"union\""]
  1271 -> 251 [style=solid label="\"operator\""]
  1271 -> 15 [style=solid label="\"const\""]
  1271 -> 16 [style=solid label="\"volatile\""]
  1271 -> 17 [style=solid label="\"friend\""]
  1271 -> 18 [style=solid label="\"typedef\""]
  1271 -> 19 [style=solid label="\"consteval\""]
  1271 -> 20 [style=solid label="\"constinit\""]
  1271 -> 21 [style=solid label="\"decltype\""]
  1271 -> 22 [style=solid label="\"enum\""]
  1271 -> 23 [style=solid label="\"explicit\""]
  1271 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1271 -> 253 [style=solid label="\"*\""]
  1271 -> 254 [style=solid label="INTEGER_LITERAL"]
  1271 -> 255 [style=solid label="\"requires\""]
  1271 -> 256 [style=solid label="\"~\""]
  1271 -> 257 [style=solid label="\"++\""]
  1271 -> 258 [style=solid label="\"--\""]
  1271 -> 259 [style=solid label="POINTER_LITERAL"]
  1271 -> 260 [style=solid label="\"dynamic_cast\""]
  1271 -> 261 [style=solid label="\"static_cast\""]
  1271 -> 262 [style=solid label="\"reinterpret_cast\""]
  1271 -> 263 [style=solid label="\"const_cast\""]
  1271 -> 264 [style=solid label="\"typeid\""]
  1271 -> 27 [style=solid label="\"char\""]
  1271 -> 28 [style=solid label="\"char8_t\""]
  1271 -> 29 [style=solid label="\"char16_t\""]
  1271 -> 30 [style=solid label="\"char32_t\""]
  1271 -> 31 [style=solid label="\"wchar_t\""]
  1271 -> 32 [style=solid label="\"bool\""]
  1271 -> 33 [style=solid label="\"short\""]
  1271 -> 34 [style=solid label="\"int\""]
  1271 -> 35 [style=solid label="\"long\""]
  1271 -> 36 [style=solid label="\"signed\""]
  1271 -> 37 [style=solid label="\"unsigned\""]
  1271 -> 38 [style=solid label="\"float\""]
  1271 -> 39 [style=solid label="\"double\""]
  1271 -> 40 [style=solid label="\"void\""]
  1271 -> 42 [style=solid label="\"static\""]
  1271 -> 43 [style=solid label="\"thread_local\""]
  1271 -> 44 [style=solid label="\"mutable\""]
  1271 -> 118 [style=solid label="STRING_LITERAL"]
  1271 -> 265 [style=solid label="\"throw\""]
  1271 -> 266 [style=solid label="\"sizeof\""]
  1271 -> 267 [style=solid label="\"alignof\""]
  1271 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1271 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1271 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1271 -> 271 [style=solid label="\"co_yield\""]
  1271 -> 272 [style=dashed label="SCOPE-opt"]
  1271 -> 273 [style=dashed label="additive-expression"]
  1271 -> 1262 [style=dashed label="alias-declaration"]
  1271 -> 274 [style=dashed label="and-expression"]
  1271 -> 275 [style=dashed label="assignment-expression"]
  1271 -> 992 [style=dashed label="attribute-specifier-seq"]
  1271 -> 1263 [style=dashed label="attribute-specifier-seq-opt"]
  1271 -> 276 [style=dashed label="await-expression"]
  1271 -> 277 [style=dashed label="boolean-literal"]
  1271 -> 278 [style=dashed label="cast-expression"]
  1271 -> 279 [style=dashed label="character-literal"]
  1271 -> 53 [style=dashed label="class-head"]
  1271 -> 54 [style=dashed label="class-key"]
  1271 -> 55 [style=dashed label="class-name"]
  1271 -> 56 [style=dashed label="class-specifier"]
  1271 -> 280 [style=dashed label="compare-expression"]
  1271 -> 281 [style=dashed label="conditional-expression"]
  1271 -> 282 [style=dashed label="conversion-function-id"]
  1271 -> 57 [style=dashed label="cv-qualifier"]
  1271 -> 58 [style=dashed label="decl-specifier"]
  1271 -> 59 [style=dashed label="decl-specifier-seq"]
  1271 -> 63 [style=dashed label="decltype-specifier"]
  1271 -> 65 [style=dashed label="defining-type-specifier"]
  1271 -> 283 [style=dashed label="delete-expression"]
  1271 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1271 -> 67 [style=dashed label="elaborated-type-specifier"]
  1271 -> 69 [style=dashed label="enum-head"]
  1271 -> 154 [style=dashed label="enum-key"]
  1271 -> 71 [style=dashed label="enum-name"]
  1271 -> 72 [style=dashed label="enum-specifier"]
  1271 -> 284 [style=dashed label="equality-expression"]
  1271 -> 285 [style=dashed label="exclusive-or-expression"]
  1271 -> 155 [style=dashed label="explicit-specifier"]
  1271 -> 1129 [style=dashed label="expression"]
  1271 -> 1130 [style=dashed label="expression-opt"]
  1271 -> 1264 [style=dashed label="expression-statement"]
  1271 -> 287 [style=dashed label="floating-point-literal"]
  1271 -> 288 [style=dashed label="fold-expression"]
  1271 -> 79 [style=dashed label="function-specifier"]
  1271 -> 289 [style=dashed label="id-expression"]
  1271 -> 290 [style=dashed label="inclusive-or-expression"]
  1271 -> 1273 [style=dashed label="init-statement"]
  1271 -> 1299 [style=dashed label="init-statement-opt"]
  1271 -> 291 [style=dashed label="integer-literal"]
  1271 -> 292 [style=dashed label="lambda-expression"]
  1271 -> 293 [style=dashed label="lambda-introducer"]
  1271 -> 294 [style=dashed label="literal"]
  1271 -> 295 [style=dashed label="literal-operator-id"]
  1271 -> 296 [style=dashed label="logical-and-expression"]
  1271 -> 297 [style=dashed label="logical-or-expression"]
  1271 -> 298 [style=dashed label="multiplicative-expression"]
  1271 -> 85 [style=dashed label="namespace-alias"]
  1271 -> 88 [style=dashed label="namespace-name"]
  1271 -> 299 [style=dashed label="nested-name-specifier"]
  1271 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1271 -> 300 [style=dashed label="new-expression"]
  1271 -> 301 [style=dashed label="noexcept-expression"]
  1271 -> 302 [style=dashed label="operator-function-id"]
  1271 -> 94 [style=dashed label="placeholder-type-specifier"]
  1271 -> 303 [style=dashed label="pm-expression"]
  1271 -> 304 [style=dashed label="pointer-literal"]
  1271 -> 305 [style=dashed label="postfix-expression"]
  1271 -> 306 [style=dashed label="primary-expression"]
  1271 -> 307 [style=dashed label="qualified-id"]
  1271 -> 308 [style=dashed label="relational-expression"]
  1271 -> 309 [style=dashed label="requires-expression"]
  1271 -> 310 [style=dashed label="shift-expression"]
  1271 -> 1267 [style=dashed label="simple-declaration"]
  1271 -> 311 [style=dashed label="simple-template-id"]
  1271 -> 427 [style=dashed label="simple-type-specifier"]
  1271 -> 99 [style=dashed label="storage-class-specifier"]
  1271 -> 313 [style=dashed label="string-literal"]
  1271 -> 314 [style=dashed label="template-id"]
  1271 -> 102 [style=dashed label="template-name"]
  1271 -> 315 [style=dashed label="throw-expression"]
  1271 -> 104 [style=dashed label="type-constraint"]
  1271 -> 105 [style=dashed label="type-constraint-opt"]
  1271 -> 106 [style=dashed label="type-name"]
  1271 -> 107 [style=dashed label="type-specifier"]
  1271 -> 108 [style=dashed label="typedef-name"]
  1271 -> 434 [style=dashed label="typename-specifier"]
  1271 -> 317 [style=dashed label="unary-expression"]
  1271 -> 318 [style=dashed label="unary-operator"]
  1271 -> 319 [style=dashed label="unqualified-id"]
  1271 -> 320 [style=dashed label="user-defined-character-literal"]
  1271 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1271 -> 322 [style=dashed label="user-defined-integer-literal"]
  1271 -> 323 [style=dashed label="user-defined-literal"]
  1271 -> 324 [style=dashed label="user-defined-string-literal"]
  1271 -> 325 [style=dashed label="yield-expression"]
  1271 -> "1271R19" [style=solid]
 "1271R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1271 -> "1271R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"[\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1271R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1271 -> "1271R83" [label="[\"alignas\", \"auto\"]", style=solid]
 "1271R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1271 -> "1271R284" [label="[\";\"]", style=solid]
 "1271R284" [label="R284", fillcolor=3, shape=diamond, style=filled]
  1271 -> "1271R360d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"!\", \"::\", \"this\", \"typename\", \"virtual\", \"+\", \"-\", \"alignas\", \"(\", \"&\", \"[\", \"co_await\", BOOLEAN_LITERAL, CHARACTER_LITERAL, \"class\", \"struct\", \"union\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"delete\", \"enum\", \"explicit\", FLOATING_POINT_LITERAL, \"*\", INTEGER_LITERAL, \"requires\", \"new\", \"~\", \"++\", \"--\", \"auto\", POINTER_LITERAL, \"dynamic_cast\", \"static_cast\", \"reinterpret_cast\", \"const_cast\", \"typeid\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", STRING_LITERAL, \"throw\", \"sizeof\", \"alignof\", USER_DEFINED_CHARACTER_LITERAL, USER_DEFINED_FLOATING_POINT_LITERAL, USER_DEFINED_INTEGER_LITERAL, \"co_yield\"]", style=solid]
 "1271R360d" [label="R360", fillcolor=5, shape=diamond, style=filled]
  1271 -> "1271R469d" [label="[IDENTIFIER]", style=solid]
 "1271R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1271 -> "1271R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1271R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1272 [label="State 1272\n\l642 selection-statement: \"if\" NOT-opt \"consteval\" • compound-statement\l643                    | \"if\" NOT-opt \"consteval\" • compound-statement \"else\" statement\l"]
  1272 -> 813 [style=solid label="\"{\""]
  1272 -> 1300 [style=dashed label="compound-statement"]
  1273 [label="State 1273\n\l361 init-statement-opt: init-statement •\l"]
  1273 -> "1273R361" [style=solid]
 "1273R361" [label="R361", fillcolor=3, shape=diamond, style=filled]
  1274 [label="State 1274\n\l644 selection-statement: \"switch\" \"(\" init-statement-opt • condition \")\" statement\l"]
  1274 -> 238 [style=solid label="IDENTIFIER"]
  1274 -> 239 [style=solid label="\"noexcept\""]
  1274 -> 240 [style=solid label="\"!\""]
  1274 -> 241 [style=solid label="\"::\""]
  1274 -> 242 [style=solid label="\"this\""]
  1274 -> 8 [style=solid label="\"typename\""]
  1274 -> 243 [style=solid label="\"+\""]
  1274 -> 244 [style=solid label="\"-\""]
  1274 -> 245 [style=solid label="\"(\""]
  1274 -> 246 [style=solid label="\"&\""]
  1274 -> 247 [style=solid label="\"[\""]
  1274 -> 248 [style=solid label="\"co_await\""]
  1274 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1274 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1274 -> 251 [style=solid label="\"operator\""]
  1274 -> 21 [style=solid label="\"decltype\""]
  1274 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1274 -> 253 [style=solid label="\"*\""]
  1274 -> 254 [style=solid label="INTEGER_LITERAL"]
  1274 -> 255 [style=solid label="\"requires\""]
  1274 -> 256 [style=solid label="\"~\""]
  1274 -> 257 [style=solid label="\"++\""]
  1274 -> 258 [style=solid label="\"--\""]
  1274 -> 259 [style=solid label="POINTER_LITERAL"]
  1274 -> 260 [style=solid label="\"dynamic_cast\""]
  1274 -> 261 [style=solid label="\"static_cast\""]
  1274 -> 262 [style=solid label="\"reinterpret_cast\""]
  1274 -> 263 [style=solid label="\"const_cast\""]
  1274 -> 264 [style=solid label="\"typeid\""]
  1274 -> 27 [style=solid label="\"char\""]
  1274 -> 28 [style=solid label="\"char8_t\""]
  1274 -> 29 [style=solid label="\"char16_t\""]
  1274 -> 30 [style=solid label="\"char32_t\""]
  1274 -> 31 [style=solid label="\"wchar_t\""]
  1274 -> 32 [style=solid label="\"bool\""]
  1274 -> 33 [style=solid label="\"short\""]
  1274 -> 34 [style=solid label="\"int\""]
  1274 -> 35 [style=solid label="\"long\""]
  1274 -> 36 [style=solid label="\"signed\""]
  1274 -> 37 [style=solid label="\"unsigned\""]
  1274 -> 38 [style=solid label="\"float\""]
  1274 -> 39 [style=solid label="\"double\""]
  1274 -> 40 [style=solid label="\"void\""]
  1274 -> 118 [style=solid label="STRING_LITERAL"]
  1274 -> 265 [style=solid label="\"throw\""]
  1274 -> 266 [style=solid label="\"sizeof\""]
  1274 -> 267 [style=solid label="\"alignof\""]
  1274 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1274 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1274 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1274 -> 271 [style=solid label="\"co_yield\""]
  1274 -> 272 [style=dashed label="SCOPE-opt"]
  1274 -> 273 [style=dashed label="additive-expression"]
  1274 -> 274 [style=dashed label="and-expression"]
  1274 -> 275 [style=dashed label="assignment-expression"]
  1274 -> 177 [style=dashed label="attribute-specifier-seq"]
  1274 -> 1257 [style=dashed label="attribute-specifier-seq-opt"]
  1274 -> 276 [style=dashed label="await-expression"]
  1274 -> 277 [style=dashed label="boolean-literal"]
  1274 -> 278 [style=dashed label="cast-expression"]
  1274 -> 279 [style=dashed label="character-literal"]
  1274 -> 55 [style=dashed label="class-name"]
  1274 -> 280 [style=dashed label="compare-expression"]
  1274 -> 1301 [style=dashed label="condition"]
  1274 -> 281 [style=dashed label="conditional-expression"]
  1274 -> 282 [style=dashed label="conversion-function-id"]
  1274 -> 63 [style=dashed label="decltype-specifier"]
  1274 -> 283 [style=dashed label="delete-expression"]
  1274 -> 71 [style=dashed label="enum-name"]
  1274 -> 284 [style=dashed label="equality-expression"]
  1274 -> 285 [style=dashed label="exclusive-or-expression"]
  1274 -> 1259 [style=dashed label="expression"]
  1274 -> 287 [style=dashed label="floating-point-literal"]
  1274 -> 288 [style=dashed label="fold-expression"]
  1274 -> 289 [style=dashed label="id-expression"]
  1274 -> 290 [style=dashed label="inclusive-or-expression"]
  1274 -> 291 [style=dashed label="integer-literal"]
  1274 -> 292 [style=dashed label="lambda-expression"]
  1274 -> 293 [style=dashed label="lambda-introducer"]
  1274 -> 294 [style=dashed label="literal"]
  1274 -> 295 [style=dashed label="literal-operator-id"]
  1274 -> 296 [style=dashed label="logical-and-expression"]
  1274 -> 297 [style=dashed label="logical-or-expression"]
  1274 -> 298 [style=dashed label="multiplicative-expression"]
  1274 -> 85 [style=dashed label="namespace-alias"]
  1274 -> 88 [style=dashed label="namespace-name"]
  1274 -> 299 [style=dashed label="nested-name-specifier"]
  1274 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1274 -> 300 [style=dashed label="new-expression"]
  1274 -> 301 [style=dashed label="noexcept-expression"]
  1274 -> 302 [style=dashed label="operator-function-id"]
  1274 -> 94 [style=dashed label="placeholder-type-specifier"]
  1274 -> 303 [style=dashed label="pm-expression"]
  1274 -> 304 [style=dashed label="pointer-literal"]
  1274 -> 305 [style=dashed label="postfix-expression"]
  1274 -> 306 [style=dashed label="primary-expression"]
  1274 -> 307 [style=dashed label="qualified-id"]
  1274 -> 308 [style=dashed label="relational-expression"]
  1274 -> 309 [style=dashed label="requires-expression"]
  1274 -> 310 [style=dashed label="shift-expression"]
  1274 -> 311 [style=dashed label="simple-template-id"]
  1274 -> 312 [style=dashed label="simple-type-specifier"]
  1274 -> 313 [style=dashed label="string-literal"]
  1274 -> 314 [style=dashed label="template-id"]
  1274 -> 102 [style=dashed label="template-name"]
  1274 -> 315 [style=dashed label="throw-expression"]
  1274 -> 104 [style=dashed label="type-constraint"]
  1274 -> 105 [style=dashed label="type-constraint-opt"]
  1274 -> 106 [style=dashed label="type-name"]
  1274 -> 108 [style=dashed label="typedef-name"]
  1274 -> 316 [style=dashed label="typename-specifier"]
  1274 -> 317 [style=dashed label="unary-expression"]
  1274 -> 318 [style=dashed label="unary-operator"]
  1274 -> 319 [style=dashed label="unqualified-id"]
  1274 -> 320 [style=dashed label="user-defined-character-literal"]
  1274 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1274 -> 322 [style=dashed label="user-defined-integer-literal"]
  1274 -> 323 [style=dashed label="user-defined-literal"]
  1274 -> 324 [style=dashed label="user-defined-string-literal"]
  1274 -> 325 [style=dashed label="yield-expression"]
  1274 -> "1274R19" [label="[\"delete\", \"new\"]", style=solid]
 "1274R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1274 -> "1274R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"[\", \"decltype\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\"]", style=solid]
 "1274R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1274 -> "1274R83" [style=solid]
 "1274R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1274 -> "1274R469d" [label="[IDENTIFIER]", style=solid]
 "1274R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1274 -> "1274R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1274R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1275 [label="State 1275\n\l 91 balanced-token: \"(\" balanced-token-seq-opt \")\" •\l"]
  1275 -> "1275R91" [style=solid]
 "1275R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
  1276 [label="State 1276\n\l 92 balanced-token: \"[\" balanced-token-seq-opt \"]\" •\l"]
  1276 -> "1276R92" [style=solid]
 "1276R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
  1277 [label="State 1277\n\l 93 balanced-token: \"{\" balanced-token-seq-opt \"}\" •\l"]
  1277 -> "1277R93" [style=solid]
 "1277R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  1278 [label="State 1278\n\l409 mem-initializer: mem-initializer-id \"(\" expression-list-opt \")\" •\l"]
  1278 -> "1278R409" [style=solid]
 "1278R409" [label="R409", fillcolor=3, shape=diamond, style=filled]
  1279 [label="State 1279\n\l414 mem-initializer-list: mem-initializer-list \",\" mem-initializer ELLIPSIS-opt •\l"]
  1279 -> "1279R414" [style=solid]
 "1279R414" [label="R414", fillcolor=3, shape=diamond, style=filled]
  1280 [label="State 1280\n\l338 handler: \"catch\" \"(\" • exception-declaration \")\" compound-statement\l"]
  1280 -> 1302 [style=solid label="\"...\""]
  1280 -> 177 [style=dashed label="attribute-specifier-seq"]
  1280 -> 1303 [style=dashed label="attribute-specifier-seq-opt"]
  1280 -> 1304 [style=dashed label="exception-declaration"]
  1280 -> "1280R83" [style=solid]
 "1280R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1281 [label="State 1281\n\l341 handler-seq-opt: handler-seq •\l"]
  1281 -> "1281R341" [style=solid]
 "1281R341" [label="R341", fillcolor=3, shape=diamond, style=filled]
  1282 [label="State 1282\n\l339 handler-seq: handler handler-seq-opt •\l"]
  1282 -> "1282R339" [style=solid]
 "1282R339" [label="R339", fillcolor=3, shape=diamond, style=filled]
  1283 [label="State 1283\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l564 parameters-and-qualifiers: \"(\" parameter-declaration-clause \")\" cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt •\l"]
  1283 -> 158 [style=solid label="\"alignas\""]
  1283 -> 162 [style=solid label="\"[\""]
  1283 -> 166 [style=dashed label="alignment-specifier"]
  1283 -> 167 [style=dashed label="attribute-specifier"]
  1283 -> "1283R564d" [label="[\"[\"]", style=solid]
 "1283R564d" [label="R564", fillcolor=5, shape=diamond, style=filled]
  1283 -> "1283R564" [style=solid]
 "1283R564" [label="R564", fillcolor=3, shape=diamond, style=filled]
  1284 [label="State 1284\n\l429 member-declarator: IDENTIFIER-opt attribute-specifier-seq-opt \":\" constant-expression brace-or-equal-initializer-opt •\l"]
  1284 -> "1284R429" [style=solid]
 "1284R429" [label="R429", fillcolor=3, shape=diamond, style=filled]
  1285 [label="State 1285\n\l609 pure-specifier: \"=\" • INTEGER_LITERAL\l"]
  1285 -> 1233 [style=solid label="INTEGER_LITERAL"]
  1286 [label="State 1286\n\l637 return-type-requirement: \"->\" • type-constraint\l"]
  1286 -> 4 [style=solid label="IDENTIFIER"]
  1286 -> 6 [style=solid label="\"::\""]
  1286 -> 21 [style=solid label="\"decltype\""]
  1286 -> 55 [style=dashed label="class-name"]
  1286 -> 121 [style=dashed label="decltype-specifier"]
  1286 -> 71 [style=dashed label="enum-name"]
  1286 -> 85 [style=dashed label="namespace-alias"]
  1286 -> 88 [style=dashed label="namespace-name"]
  1286 -> 133 [style=dashed label="nested-name-specifier"]
  1286 -> 221 [style=dashed label="nested-name-specifier-opt"]
  1286 -> 96 [style=dashed label="simple-template-id"]
  1286 -> 102 [style=dashed label="template-name"]
  1286 -> 1305 [style=dashed label="type-constraint"]
  1286 -> 106 [style=dashed label="type-name"]
  1286 -> 108 [style=dashed label="typedef-name"]
  1286 -> "1286R469d" [label="[IDENTIFIER]", style=solid]
 "1286R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1287 [label="State 1287\n\l639 return-type-requirement-opt: return-type-requirement •\l"]
  1287 -> "1287R639" [style=solid]
 "1287R639" [label="R639", fillcolor=3, shape=diamond, style=filled]
  1288 [label="State 1288\n\l150 compound-requirement: \"{\" expression \"}\" NOEXCEPT-opt return-type-requirement-opt • \";\"\l"]
  1288 -> 1306 [style=solid label="\";\""]
  1289 [label="State 1289\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l505 noptr-new-declarator: \"[\" expression-opt \"]\" attribute-specifier-seq-opt •\l"]
  1289 -> 158 [style=solid label="\"alignas\""]
  1289 -> 162 [style=solid label="\"[\""]
  1289 -> 166 [style=dashed label="alignment-specifier"]
  1289 -> 167 [style=dashed label="attribute-specifier"]
  1289 -> "1289R505d" [label="[\"[\"]", style=solid]
 "1289R505d" [label="R505", fillcolor=5, shape=diamond, style=filled]
  1289 -> "1289R505" [style=solid]
 "1289R505" [label="R505", fillcolor=3, shape=diamond, style=filled]
  1290 [label="State 1290\n\l506 noptr-new-declarator: noptr-new-declarator \"[\" constant-expression \"]\" • attribute-specifier-seq-opt\l"]
  1290 -> 177 [style=dashed label="attribute-specifier-seq"]
  1290 -> 1307 [style=dashed label="attribute-specifier-seq-opt"]
  1290 -> "1290R83" [style=solid]
 "1290R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1291 [label="State 1291\n\l155 condition: attribute-specifier-seq-opt decl-specifier-seq • declarator brace-or-equal-initializer\l"]
  1291 -> 156 [style=solid label="\"...\""]
  1291 -> 4 [style=solid label="IDENTIFIER"]
  1291 -> 6 [style=solid label="\"::\""]
  1291 -> 159 [style=solid label="\"(\""]
  1291 -> 160 [style=solid label="\"&\""]
  1291 -> 163 [style=solid label="\"&&\""]
  1291 -> 21 [style=solid label="\"decltype\""]
  1291 -> 164 [style=solid label="\"*\""]
  1291 -> 165 [style=dashed label="ELLIPSIS-opt"]
  1291 -> 55 [style=dashed label="class-name"]
  1291 -> 1308 [style=dashed label="declarator"]
  1291 -> 171 [style=dashed label="declarator-id"]
  1291 -> 121 [style=dashed label="decltype-specifier"]
  1291 -> 71 [style=dashed label="enum-name"]
  1291 -> 85 [style=dashed label="namespace-alias"]
  1291 -> 88 [style=dashed label="namespace-name"]
  1291 -> 187 [style=dashed label="nested-name-specifier"]
  1291 -> 173 [style=dashed label="noptr-declarator"]
  1291 -> 174 [style=dashed label="ptr-declarator"]
  1291 -> 175 [style=dashed label="ptr-operator"]
  1291 -> 96 [style=dashed label="simple-template-id"]
  1291 -> 102 [style=dashed label="template-name"]
  1291 -> 106 [style=dashed label="type-name"]
  1291 -> 108 [style=dashed label="typedef-name"]
  1291 -> "1291R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "1291R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  1291 -> "1291R5" [style=solid]
 "1291R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1292 [label="State 1292\n\l371 iteration-statement: \"while\" \"(\" condition \")\" • statement\l"]
  1292 -> 1 [style=solid label="\"constexpr\""]
  1292 -> 150 [style=solid label="\"extern\""]
  1292 -> 4 [style=solid label="IDENTIFIER"]
  1292 -> 151 [style=solid label="\"inline\""]
  1292 -> 6 [style=solid label="\"::\""]
  1292 -> 8 [style=solid label="\"typename\""]
  1292 -> 9 [style=solid label="\"virtual\""]
  1292 -> 10 [style=solid label="\"using\""]
  1292 -> 12 [style=solid label="\"class\""]
  1292 -> 13 [style=solid label="\"struct\""]
  1292 -> 14 [style=solid label="\"union\""]
  1292 -> 15 [style=solid label="\"const\""]
  1292 -> 16 [style=solid label="\"volatile\""]
  1292 -> 17 [style=solid label="\"friend\""]
  1292 -> 18 [style=solid label="\"typedef\""]
  1292 -> 19 [style=solid label="\"consteval\""]
  1292 -> 20 [style=solid label="\"constinit\""]
  1292 -> 21 [style=solid label="\"decltype\""]
  1292 -> 22 [style=solid label="\"enum\""]
  1292 -> 23 [style=solid label="\"explicit\""]
  1292 -> 991 [style=solid label="\"namespace\""]
  1292 -> 27 [style=solid label="\"char\""]
  1292 -> 28 [style=solid label="\"char8_t\""]
  1292 -> 29 [style=solid label="\"char16_t\""]
  1292 -> 30 [style=solid label="\"char32_t\""]
  1292 -> 31 [style=solid label="\"wchar_t\""]
  1292 -> 32 [style=solid label="\"bool\""]
  1292 -> 33 [style=solid label="\"short\""]
  1292 -> 34 [style=solid label="\"int\""]
  1292 -> 35 [style=solid label="\"long\""]
  1292 -> 36 [style=solid label="\"signed\""]
  1292 -> 37 [style=solid label="\"unsigned\""]
  1292 -> 38 [style=solid label="\"float\""]
  1292 -> 39 [style=solid label="\"double\""]
  1292 -> 40 [style=solid label="\"void\""]
  1292 -> 41 [style=solid label="\"static_assert\""]
  1292 -> 42 [style=solid label="\"static\""]
  1292 -> 43 [style=solid label="\"thread_local\""]
  1292 -> 44 [style=solid label="\"mutable\""]
  1292 -> 47 [style=dashed label="alias-declaration"]
  1292 -> 48 [style=dashed label="asm-declaration"]
  1292 -> 992 [style=dashed label="attribute-specifier-seq"]
  1292 -> 993 [style=dashed label="attribute-specifier-seq-opt"]
  1292 -> 994 [style=dashed label="block-declaration"]
  1292 -> 53 [style=dashed label="class-head"]
  1292 -> 54 [style=dashed label="class-key"]
  1292 -> 55 [style=dashed label="class-name"]
  1292 -> 56 [style=dashed label="class-specifier"]
  1292 -> 57 [style=dashed label="cv-qualifier"]
  1292 -> 58 [style=dashed label="decl-specifier"]
  1292 -> 59 [style=dashed label="decl-specifier-seq"]
  1292 -> 995 [style=dashed label="declaration-statement"]
  1292 -> 63 [style=dashed label="decltype-specifier"]
  1292 -> 65 [style=dashed label="defining-type-specifier"]
  1292 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1292 -> 67 [style=dashed label="elaborated-type-specifier"]
  1292 -> 69 [style=dashed label="enum-head"]
  1292 -> 70 [style=dashed label="enum-key"]
  1292 -> 71 [style=dashed label="enum-name"]
  1292 -> 72 [style=dashed label="enum-specifier"]
  1292 -> 155 [style=dashed label="explicit-specifier"]
  1292 -> 79 [style=dashed label="function-specifier"]
  1292 -> 996 [style=dashed label="labeled-statement"]
  1292 -> 85 [style=dashed label="namespace-alias"]
  1292 -> 86 [style=dashed label="namespace-alias-definition"]
  1292 -> 88 [style=dashed label="namespace-name"]
  1292 -> 89 [style=dashed label="nested-name-specifier"]
  1292 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1292 -> 93 [style=dashed label="opaque-enum-declaration"]
  1292 -> 94 [style=dashed label="placeholder-type-specifier"]
  1292 -> 95 [style=dashed label="simple-declaration"]
  1292 -> 96 [style=dashed label="simple-template-id"]
  1292 -> 97 [style=dashed label="simple-type-specifier"]
  1292 -> 1309 [style=dashed label="statement"]
  1292 -> 98 [style=dashed label="static_assert-declaration"]
  1292 -> 99 [style=dashed label="storage-class-specifier"]
  1292 -> 102 [style=dashed label="template-name"]
  1292 -> 104 [style=dashed label="type-constraint"]
  1292 -> 105 [style=dashed label="type-constraint-opt"]
  1292 -> 106 [style=dashed label="type-name"]
  1292 -> 107 [style=dashed label="type-specifier"]
  1292 -> 108 [style=dashed label="typedef-name"]
  1292 -> 109 [style=dashed label="typename-specifier"]
  1292 -> 111 [style=dashed label="using-declaration"]
  1292 -> 112 [style=dashed label="using-directive"]
  1292 -> 113 [style=dashed label="using-enum-declaration"]
  1292 -> "1292R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1292R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1292 -> "1292R83" [style=solid]
 "1292R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1292 -> "1292R469d" [label="[IDENTIFIER]", style=solid]
 "1292R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1292 -> "1292R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1292R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1293 [label="State 1293\n\l372 iteration-statement: \"do\" statement \"while\" \"(\" • expression \")\" \";\"\l"]
  1293 -> 238 [style=solid label="IDENTIFIER"]
  1293 -> 239 [style=solid label="\"noexcept\""]
  1293 -> 240 [style=solid label="\"!\""]
  1293 -> 241 [style=solid label="\"::\""]
  1293 -> 242 [style=solid label="\"this\""]
  1293 -> 8 [style=solid label="\"typename\""]
  1293 -> 243 [style=solid label="\"+\""]
  1293 -> 244 [style=solid label="\"-\""]
  1293 -> 245 [style=solid label="\"(\""]
  1293 -> 246 [style=solid label="\"&\""]
  1293 -> 247 [style=solid label="\"[\""]
  1293 -> 248 [style=solid label="\"co_await\""]
  1293 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1293 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1293 -> 251 [style=solid label="\"operator\""]
  1293 -> 21 [style=solid label="\"decltype\""]
  1293 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1293 -> 253 [style=solid label="\"*\""]
  1293 -> 254 [style=solid label="INTEGER_LITERAL"]
  1293 -> 255 [style=solid label="\"requires\""]
  1293 -> 256 [style=solid label="\"~\""]
  1293 -> 257 [style=solid label="\"++\""]
  1293 -> 258 [style=solid label="\"--\""]
  1293 -> 259 [style=solid label="POINTER_LITERAL"]
  1293 -> 260 [style=solid label="\"dynamic_cast\""]
  1293 -> 261 [style=solid label="\"static_cast\""]
  1293 -> 262 [style=solid label="\"reinterpret_cast\""]
  1293 -> 263 [style=solid label="\"const_cast\""]
  1293 -> 264 [style=solid label="\"typeid\""]
  1293 -> 27 [style=solid label="\"char\""]
  1293 -> 28 [style=solid label="\"char8_t\""]
  1293 -> 29 [style=solid label="\"char16_t\""]
  1293 -> 30 [style=solid label="\"char32_t\""]
  1293 -> 31 [style=solid label="\"wchar_t\""]
  1293 -> 32 [style=solid label="\"bool\""]
  1293 -> 33 [style=solid label="\"short\""]
  1293 -> 34 [style=solid label="\"int\""]
  1293 -> 35 [style=solid label="\"long\""]
  1293 -> 36 [style=solid label="\"signed\""]
  1293 -> 37 [style=solid label="\"unsigned\""]
  1293 -> 38 [style=solid label="\"float\""]
  1293 -> 39 [style=solid label="\"double\""]
  1293 -> 40 [style=solid label="\"void\""]
  1293 -> 118 [style=solid label="STRING_LITERAL"]
  1293 -> 265 [style=solid label="\"throw\""]
  1293 -> 266 [style=solid label="\"sizeof\""]
  1293 -> 267 [style=solid label="\"alignof\""]
  1293 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1293 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1293 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1293 -> 271 [style=solid label="\"co_yield\""]
  1293 -> 272 [style=dashed label="SCOPE-opt"]
  1293 -> 273 [style=dashed label="additive-expression"]
  1293 -> 274 [style=dashed label="and-expression"]
  1293 -> 275 [style=dashed label="assignment-expression"]
  1293 -> 276 [style=dashed label="await-expression"]
  1293 -> 277 [style=dashed label="boolean-literal"]
  1293 -> 278 [style=dashed label="cast-expression"]
  1293 -> 279 [style=dashed label="character-literal"]
  1293 -> 55 [style=dashed label="class-name"]
  1293 -> 280 [style=dashed label="compare-expression"]
  1293 -> 281 [style=dashed label="conditional-expression"]
  1293 -> 282 [style=dashed label="conversion-function-id"]
  1293 -> 63 [style=dashed label="decltype-specifier"]
  1293 -> 283 [style=dashed label="delete-expression"]
  1293 -> 71 [style=dashed label="enum-name"]
  1293 -> 284 [style=dashed label="equality-expression"]
  1293 -> 285 [style=dashed label="exclusive-or-expression"]
  1293 -> 1310 [style=dashed label="expression"]
  1293 -> 287 [style=dashed label="floating-point-literal"]
  1293 -> 288 [style=dashed label="fold-expression"]
  1293 -> 289 [style=dashed label="id-expression"]
  1293 -> 290 [style=dashed label="inclusive-or-expression"]
  1293 -> 291 [style=dashed label="integer-literal"]
  1293 -> 292 [style=dashed label="lambda-expression"]
  1293 -> 293 [style=dashed label="lambda-introducer"]
  1293 -> 294 [style=dashed label="literal"]
  1293 -> 295 [style=dashed label="literal-operator-id"]
  1293 -> 296 [style=dashed label="logical-and-expression"]
  1293 -> 297 [style=dashed label="logical-or-expression"]
  1293 -> 298 [style=dashed label="multiplicative-expression"]
  1293 -> 85 [style=dashed label="namespace-alias"]
  1293 -> 88 [style=dashed label="namespace-name"]
  1293 -> 299 [style=dashed label="nested-name-specifier"]
  1293 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1293 -> 300 [style=dashed label="new-expression"]
  1293 -> 301 [style=dashed label="noexcept-expression"]
  1293 -> 302 [style=dashed label="operator-function-id"]
  1293 -> 94 [style=dashed label="placeholder-type-specifier"]
  1293 -> 303 [style=dashed label="pm-expression"]
  1293 -> 304 [style=dashed label="pointer-literal"]
  1293 -> 305 [style=dashed label="postfix-expression"]
  1293 -> 306 [style=dashed label="primary-expression"]
  1293 -> 307 [style=dashed label="qualified-id"]
  1293 -> 308 [style=dashed label="relational-expression"]
  1293 -> 309 [style=dashed label="requires-expression"]
  1293 -> 310 [style=dashed label="shift-expression"]
  1293 -> 311 [style=dashed label="simple-template-id"]
  1293 -> 312 [style=dashed label="simple-type-specifier"]
  1293 -> 313 [style=dashed label="string-literal"]
  1293 -> 314 [style=dashed label="template-id"]
  1293 -> 102 [style=dashed label="template-name"]
  1293 -> 315 [style=dashed label="throw-expression"]
  1293 -> 104 [style=dashed label="type-constraint"]
  1293 -> 105 [style=dashed label="type-constraint-opt"]
  1293 -> 106 [style=dashed label="type-name"]
  1293 -> 108 [style=dashed label="typedef-name"]
  1293 -> 316 [style=dashed label="typename-specifier"]
  1293 -> 317 [style=dashed label="unary-expression"]
  1293 -> 318 [style=dashed label="unary-operator"]
  1293 -> 319 [style=dashed label="unqualified-id"]
  1293 -> 320 [style=dashed label="user-defined-character-literal"]
  1293 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1293 -> 322 [style=dashed label="user-defined-integer-literal"]
  1293 -> 323 [style=dashed label="user-defined-literal"]
  1293 -> 324 [style=dashed label="user-defined-string-literal"]
  1293 -> 325 [style=dashed label="yield-expression"]
  1293 -> "1293R19" [style=solid]
 "1293R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1293 -> "1293R469d" [label="[IDENTIFIER]", style=solid]
 "1293R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1293 -> "1293R722d" [label="[\"decltype\"]", style=solid]
 "1293R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1293 -> "1293R722" [label="[\"auto\"]", style=solid]
 "1293R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1294 [label="State 1294\n\l157 condition-opt: condition •\l"]
  1294 -> "1294R157" [style=solid]
 "1294R157" [label="R157", fillcolor=3, shape=diamond, style=filled]
  1295 [label="State 1295\n\l373 iteration-statement: \"for\" \"(\" init-statement condition-opt • \";\" expression-opt \")\" statement\l"]
  1295 -> 1311 [style=solid label="\";\""]
  1296 [label="State 1296\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l323 for-range-declaration: attribute-specifier-seq-opt • decl-specifier-seq declarator\l324                      | attribute-specifier-seq-opt • decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\"\l"]
  1296 -> 1 [style=solid label="\"constexpr\""]
  1296 -> 150 [style=solid label="\"extern\""]
  1296 -> 4 [style=solid label="IDENTIFIER"]
  1296 -> 151 [style=solid label="\"inline\""]
  1296 -> 6 [style=solid label="\"::\""]
  1296 -> 8 [style=solid label="\"typename\""]
  1296 -> 9 [style=solid label="\"virtual\""]
  1296 -> 158 [style=solid label="\"alignas\""]
  1296 -> 162 [style=solid label="\"[\""]
  1296 -> 12 [style=solid label="\"class\""]
  1296 -> 13 [style=solid label="\"struct\""]
  1296 -> 14 [style=solid label="\"union\""]
  1296 -> 15 [style=solid label="\"const\""]
  1296 -> 16 [style=solid label="\"volatile\""]
  1296 -> 17 [style=solid label="\"friend\""]
  1296 -> 18 [style=solid label="\"typedef\""]
  1296 -> 19 [style=solid label="\"consteval\""]
  1296 -> 20 [style=solid label="\"constinit\""]
  1296 -> 21 [style=solid label="\"decltype\""]
  1296 -> 22 [style=solid label="\"enum\""]
  1296 -> 23 [style=solid label="\"explicit\""]
  1296 -> 27 [style=solid label="\"char\""]
  1296 -> 28 [style=solid label="\"char8_t\""]
  1296 -> 29 [style=solid label="\"char16_t\""]
  1296 -> 30 [style=solid label="\"char32_t\""]
  1296 -> 31 [style=solid label="\"wchar_t\""]
  1296 -> 32 [style=solid label="\"bool\""]
  1296 -> 33 [style=solid label="\"short\""]
  1296 -> 34 [style=solid label="\"int\""]
  1296 -> 35 [style=solid label="\"long\""]
  1296 -> 36 [style=solid label="\"signed\""]
  1296 -> 37 [style=solid label="\"unsigned\""]
  1296 -> 38 [style=solid label="\"float\""]
  1296 -> 39 [style=solid label="\"double\""]
  1296 -> 40 [style=solid label="\"void\""]
  1296 -> 42 [style=solid label="\"static\""]
  1296 -> 43 [style=solid label="\"thread_local\""]
  1296 -> 44 [style=solid label="\"mutable\""]
  1296 -> 166 [style=dashed label="alignment-specifier"]
  1296 -> 167 [style=dashed label="attribute-specifier"]
  1296 -> 53 [style=dashed label="class-head"]
  1296 -> 54 [style=dashed label="class-key"]
  1296 -> 55 [style=dashed label="class-name"]
  1296 -> 56 [style=dashed label="class-specifier"]
  1296 -> 57 [style=dashed label="cv-qualifier"]
  1296 -> 58 [style=dashed label="decl-specifier"]
  1296 -> 1312 [style=dashed label="decl-specifier-seq"]
  1296 -> 63 [style=dashed label="decltype-specifier"]
  1296 -> 65 [style=dashed label="defining-type-specifier"]
  1296 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1296 -> 67 [style=dashed label="elaborated-type-specifier"]
  1296 -> 69 [style=dashed label="enum-head"]
  1296 -> 154 [style=dashed label="enum-key"]
  1296 -> 71 [style=dashed label="enum-name"]
  1296 -> 72 [style=dashed label="enum-specifier"]
  1296 -> 155 [style=dashed label="explicit-specifier"]
  1296 -> 79 [style=dashed label="function-specifier"]
  1296 -> 85 [style=dashed label="namespace-alias"]
  1296 -> 88 [style=dashed label="namespace-name"]
  1296 -> 89 [style=dashed label="nested-name-specifier"]
  1296 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1296 -> 94 [style=dashed label="placeholder-type-specifier"]
  1296 -> 96 [style=dashed label="simple-template-id"]
  1296 -> 97 [style=dashed label="simple-type-specifier"]
  1296 -> 99 [style=dashed label="storage-class-specifier"]
  1296 -> 102 [style=dashed label="template-name"]
  1296 -> 104 [style=dashed label="type-constraint"]
  1296 -> 105 [style=dashed label="type-constraint-opt"]
  1296 -> 106 [style=dashed label="type-name"]
  1296 -> 107 [style=dashed label="type-specifier"]
  1296 -> 108 [style=dashed label="typedef-name"]
  1296 -> 109 [style=dashed label="typename-specifier"]
  1296 -> "1296R469d" [label="[IDENTIFIER]", style=solid]
 "1296R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1296 -> "1296R722d" [label="[\"decltype\"]", style=solid]
 "1296R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1296 -> "1296R722" [label="[]", style=solid]
 "1296R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1297 [label="State 1297\n\l374 iteration-statement: \"for\" \"(\" init-statement-opt for-range-declaration • \":\" for-range-initializer \")\" statement\l"]
  1297 -> 1313 [style=solid label="\":\""]
  1298 [label="State 1298\n\l381 labeled-statement: attribute-specifier-seq-opt \"case\" constant-expression \":\" statement •\l"]
  1298 -> "1298R381" [style=solid]
 "1298R381" [label="R381", fillcolor=3, shape=diamond, style=filled]
  1299 [label="State 1299\n\l640 selection-statement: \"if\" CONSTEXPR-opt \"(\" init-statement-opt • condition \")\" statement\l641                    | \"if\" CONSTEXPR-opt \"(\" init-statement-opt • condition \")\" statement \"else\" statement\l"]
  1299 -> 238 [style=solid label="IDENTIFIER"]
  1299 -> 239 [style=solid label="\"noexcept\""]
  1299 -> 240 [style=solid label="\"!\""]
  1299 -> 241 [style=solid label="\"::\""]
  1299 -> 242 [style=solid label="\"this\""]
  1299 -> 8 [style=solid label="\"typename\""]
  1299 -> 243 [style=solid label="\"+\""]
  1299 -> 244 [style=solid label="\"-\""]
  1299 -> 245 [style=solid label="\"(\""]
  1299 -> 246 [style=solid label="\"&\""]
  1299 -> 247 [style=solid label="\"[\""]
  1299 -> 248 [style=solid label="\"co_await\""]
  1299 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1299 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1299 -> 251 [style=solid label="\"operator\""]
  1299 -> 21 [style=solid label="\"decltype\""]
  1299 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1299 -> 253 [style=solid label="\"*\""]
  1299 -> 254 [style=solid label="INTEGER_LITERAL"]
  1299 -> 255 [style=solid label="\"requires\""]
  1299 -> 256 [style=solid label="\"~\""]
  1299 -> 257 [style=solid label="\"++\""]
  1299 -> 258 [style=solid label="\"--\""]
  1299 -> 259 [style=solid label="POINTER_LITERAL"]
  1299 -> 260 [style=solid label="\"dynamic_cast\""]
  1299 -> 261 [style=solid label="\"static_cast\""]
  1299 -> 262 [style=solid label="\"reinterpret_cast\""]
  1299 -> 263 [style=solid label="\"const_cast\""]
  1299 -> 264 [style=solid label="\"typeid\""]
  1299 -> 27 [style=solid label="\"char\""]
  1299 -> 28 [style=solid label="\"char8_t\""]
  1299 -> 29 [style=solid label="\"char16_t\""]
  1299 -> 30 [style=solid label="\"char32_t\""]
  1299 -> 31 [style=solid label="\"wchar_t\""]
  1299 -> 32 [style=solid label="\"bool\""]
  1299 -> 33 [style=solid label="\"short\""]
  1299 -> 34 [style=solid label="\"int\""]
  1299 -> 35 [style=solid label="\"long\""]
  1299 -> 36 [style=solid label="\"signed\""]
  1299 -> 37 [style=solid label="\"unsigned\""]
  1299 -> 38 [style=solid label="\"float\""]
  1299 -> 39 [style=solid label="\"double\""]
  1299 -> 40 [style=solid label="\"void\""]
  1299 -> 118 [style=solid label="STRING_LITERAL"]
  1299 -> 265 [style=solid label="\"throw\""]
  1299 -> 266 [style=solid label="\"sizeof\""]
  1299 -> 267 [style=solid label="\"alignof\""]
  1299 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1299 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1299 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1299 -> 271 [style=solid label="\"co_yield\""]
  1299 -> 272 [style=dashed label="SCOPE-opt"]
  1299 -> 273 [style=dashed label="additive-expression"]
  1299 -> 274 [style=dashed label="and-expression"]
  1299 -> 275 [style=dashed label="assignment-expression"]
  1299 -> 177 [style=dashed label="attribute-specifier-seq"]
  1299 -> 1257 [style=dashed label="attribute-specifier-seq-opt"]
  1299 -> 276 [style=dashed label="await-expression"]
  1299 -> 277 [style=dashed label="boolean-literal"]
  1299 -> 278 [style=dashed label="cast-expression"]
  1299 -> 279 [style=dashed label="character-literal"]
  1299 -> 55 [style=dashed label="class-name"]
  1299 -> 280 [style=dashed label="compare-expression"]
  1299 -> 1314 [style=dashed label="condition"]
  1299 -> 281 [style=dashed label="conditional-expression"]
  1299 -> 282 [style=dashed label="conversion-function-id"]
  1299 -> 63 [style=dashed label="decltype-specifier"]
  1299 -> 283 [style=dashed label="delete-expression"]
  1299 -> 71 [style=dashed label="enum-name"]
  1299 -> 284 [style=dashed label="equality-expression"]
  1299 -> 285 [style=dashed label="exclusive-or-expression"]
  1299 -> 1259 [style=dashed label="expression"]
  1299 -> 287 [style=dashed label="floating-point-literal"]
  1299 -> 288 [style=dashed label="fold-expression"]
  1299 -> 289 [style=dashed label="id-expression"]
  1299 -> 290 [style=dashed label="inclusive-or-expression"]
  1299 -> 291 [style=dashed label="integer-literal"]
  1299 -> 292 [style=dashed label="lambda-expression"]
  1299 -> 293 [style=dashed label="lambda-introducer"]
  1299 -> 294 [style=dashed label="literal"]
  1299 -> 295 [style=dashed label="literal-operator-id"]
  1299 -> 296 [style=dashed label="logical-and-expression"]
  1299 -> 297 [style=dashed label="logical-or-expression"]
  1299 -> 298 [style=dashed label="multiplicative-expression"]
  1299 -> 85 [style=dashed label="namespace-alias"]
  1299 -> 88 [style=dashed label="namespace-name"]
  1299 -> 299 [style=dashed label="nested-name-specifier"]
  1299 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1299 -> 300 [style=dashed label="new-expression"]
  1299 -> 301 [style=dashed label="noexcept-expression"]
  1299 -> 302 [style=dashed label="operator-function-id"]
  1299 -> 94 [style=dashed label="placeholder-type-specifier"]
  1299 -> 303 [style=dashed label="pm-expression"]
  1299 -> 304 [style=dashed label="pointer-literal"]
  1299 -> 305 [style=dashed label="postfix-expression"]
  1299 -> 306 [style=dashed label="primary-expression"]
  1299 -> 307 [style=dashed label="qualified-id"]
  1299 -> 308 [style=dashed label="relational-expression"]
  1299 -> 309 [style=dashed label="requires-expression"]
  1299 -> 310 [style=dashed label="shift-expression"]
  1299 -> 311 [style=dashed label="simple-template-id"]
  1299 -> 312 [style=dashed label="simple-type-specifier"]
  1299 -> 313 [style=dashed label="string-literal"]
  1299 -> 314 [style=dashed label="template-id"]
  1299 -> 102 [style=dashed label="template-name"]
  1299 -> 315 [style=dashed label="throw-expression"]
  1299 -> 104 [style=dashed label="type-constraint"]
  1299 -> 105 [style=dashed label="type-constraint-opt"]
  1299 -> 106 [style=dashed label="type-name"]
  1299 -> 108 [style=dashed label="typedef-name"]
  1299 -> 316 [style=dashed label="typename-specifier"]
  1299 -> 317 [style=dashed label="unary-expression"]
  1299 -> 318 [style=dashed label="unary-operator"]
  1299 -> 319 [style=dashed label="unqualified-id"]
  1299 -> 320 [style=dashed label="user-defined-character-literal"]
  1299 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1299 -> 322 [style=dashed label="user-defined-integer-literal"]
  1299 -> 323 [style=dashed label="user-defined-literal"]
  1299 -> 324 [style=dashed label="user-defined-string-literal"]
  1299 -> 325 [style=dashed label="yield-expression"]
  1299 -> "1299R19" [label="[\"delete\", \"new\"]", style=solid]
 "1299R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1299 -> "1299R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"[\", \"decltype\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\"]", style=solid]
 "1299R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1299 -> "1299R83" [style=solid]
 "1299R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1299 -> "1299R469d" [label="[IDENTIFIER]", style=solid]
 "1299R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1299 -> "1299R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1299R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1300 [label="State 1300\n\l642 selection-statement: \"if\" NOT-opt \"consteval\" compound-statement •\l643                    | \"if\" NOT-opt \"consteval\" compound-statement • \"else\" statement\l"]
  1300 -> 1315 [style=solid label="\"else\""]
  1300 -> "1300R642d" [label="[\"else\"]", style=solid]
 "1300R642d" [label="R642", fillcolor=5, shape=diamond, style=filled]
  1300 -> "1300R642" [style=solid]
 "1300R642" [label="R642", fillcolor=3, shape=diamond, style=filled]
  1301 [label="State 1301\n\l644 selection-statement: \"switch\" \"(\" init-statement-opt condition • \")\" statement\l"]
  1301 -> 1316 [style=solid label="\")\""]
  1302 [label="State 1302\n\l263 exception-declaration: \"...\" •\l"]
  1302 -> "1302R263" [style=solid]
 "1302R263" [label="R263", fillcolor=3, shape=diamond, style=filled]
  1303 [label="State 1303\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l261 exception-declaration: attribute-specifier-seq-opt • type-specifier-seq declarator\l262                      | attribute-specifier-seq-opt • type-specifier-seq abstract-declarator-opt\l"]
  1303 -> 4 [style=solid label="IDENTIFIER"]
  1303 -> 6 [style=solid label="\"::\""]
  1303 -> 8 [style=solid label="\"typename\""]
  1303 -> 158 [style=solid label="\"alignas\""]
  1303 -> 162 [style=solid label="\"[\""]
  1303 -> 12 [style=solid label="\"class\""]
  1303 -> 13 [style=solid label="\"struct\""]
  1303 -> 14 [style=solid label="\"union\""]
  1303 -> 15 [style=solid label="\"const\""]
  1303 -> 16 [style=solid label="\"volatile\""]
  1303 -> 21 [style=solid label="\"decltype\""]
  1303 -> 125 [style=solid label="\"enum\""]
  1303 -> 27 [style=solid label="\"char\""]
  1303 -> 28 [style=solid label="\"char8_t\""]
  1303 -> 29 [style=solid label="\"char16_t\""]
  1303 -> 30 [style=solid label="\"char32_t\""]
  1303 -> 31 [style=solid label="\"wchar_t\""]
  1303 -> 32 [style=solid label="\"bool\""]
  1303 -> 33 [style=solid label="\"short\""]
  1303 -> 34 [style=solid label="\"int\""]
  1303 -> 35 [style=solid label="\"long\""]
  1303 -> 36 [style=solid label="\"signed\""]
  1303 -> 37 [style=solid label="\"unsigned\""]
  1303 -> 38 [style=solid label="\"float\""]
  1303 -> 39 [style=solid label="\"double\""]
  1303 -> 40 [style=solid label="\"void\""]
  1303 -> 166 [style=dashed label="alignment-specifier"]
  1303 -> 167 [style=dashed label="attribute-specifier"]
  1303 -> 424 [style=dashed label="class-key"]
  1303 -> 55 [style=dashed label="class-name"]
  1303 -> 57 [style=dashed label="cv-qualifier"]
  1303 -> 63 [style=dashed label="decltype-specifier"]
  1303 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1303 -> 67 [style=dashed label="elaborated-type-specifier"]
  1303 -> 71 [style=dashed label="enum-name"]
  1303 -> 85 [style=dashed label="namespace-alias"]
  1303 -> 88 [style=dashed label="namespace-name"]
  1303 -> 89 [style=dashed label="nested-name-specifier"]
  1303 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1303 -> 94 [style=dashed label="placeholder-type-specifier"]
  1303 -> 96 [style=dashed label="simple-template-id"]
  1303 -> 97 [style=dashed label="simple-type-specifier"]
  1303 -> 102 [style=dashed label="template-name"]
  1303 -> 104 [style=dashed label="type-constraint"]
  1303 -> 105 [style=dashed label="type-constraint-opt"]
  1303 -> 106 [style=dashed label="type-name"]
  1303 -> 432 [style=dashed label="type-specifier"]
  1303 -> 1317 [style=dashed label="type-specifier-seq"]
  1303 -> 108 [style=dashed label="typedef-name"]
  1303 -> 109 [style=dashed label="typename-specifier"]
  1303 -> "1303R469d" [label="[IDENTIFIER]", style=solid]
 "1303R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1303 -> "1303R722d" [label="[\"decltype\"]", style=solid]
 "1303R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1303 -> "1303R722" [label="[]", style=solid]
 "1303R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1304 [label="State 1304\n\l338 handler: \"catch\" \"(\" exception-declaration • \")\" compound-statement\l"]
  1304 -> 1318 [style=solid label="\")\""]
  1305 [label="State 1305\n\l637 return-type-requirement: \"->\" type-constraint •\l"]
  1305 -> "1305R637" [style=solid]
 "1305R637" [label="R637", fillcolor=3, shape=diamond, style=filled]
  1306 [label="State 1306\n\l150 compound-requirement: \"{\" expression \"}\" NOEXCEPT-opt return-type-requirement-opt \";\" •\l"]
  1306 -> "1306R150" [style=solid]
 "1306R150" [label="R150", fillcolor=3, shape=diamond, style=filled]
  1307 [label="State 1307\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l506 noptr-new-declarator: noptr-new-declarator \"[\" constant-expression \"]\" attribute-specifier-seq-opt •\l"]
  1307 -> 158 [style=solid label="\"alignas\""]
  1307 -> 162 [style=solid label="\"[\""]
  1307 -> 166 [style=dashed label="alignment-specifier"]
  1307 -> 167 [style=dashed label="attribute-specifier"]
  1307 -> "1307R506d" [label="[\"[\"]", style=solid]
 "1307R506d" [label="R506", fillcolor=5, shape=diamond, style=filled]
  1307 -> "1307R506" [style=solid]
 "1307R506" [label="R506", fillcolor=3, shape=diamond, style=filled]
  1308 [label="State 1308\n\l155 condition: attribute-specifier-seq-opt decl-specifier-seq declarator • brace-or-equal-initializer\l"]
  1308 -> 396 [style=solid label="\"=\""]
  1308 -> 398 [style=solid label="\"{\""]
  1308 -> 1319 [style=dashed label="brace-or-equal-initializer"]
  1308 -> 401 [style=dashed label="braced-init-list"]
  1309 [label="State 1309\n\l371 iteration-statement: \"while\" \"(\" condition \")\" statement •\l"]
  1309 -> "1309R371" [style=solid]
 "1309R371" [label="R371", fillcolor=3, shape=diamond, style=filled]
  1310 [label="State 1310\n\l280 expression: expression • \",\" assignment-expression\l372 iteration-statement: \"do\" statement \"while\" \"(\" expression • \")\" \";\"\l"]
  1310 -> 552 [style=solid label="\",\""]
  1310 -> 1320 [style=solid label="\")\""]
  1311 [label="State 1311\n\l373 iteration-statement: \"for\" \"(\" init-statement condition-opt \";\" • expression-opt \")\" statement\l"]
  1311 -> 238 [style=solid label="IDENTIFIER"]
  1311 -> 239 [style=solid label="\"noexcept\""]
  1311 -> 240 [style=solid label="\"!\""]
  1311 -> 241 [style=solid label="\"::\""]
  1311 -> 242 [style=solid label="\"this\""]
  1311 -> 8 [style=solid label="\"typename\""]
  1311 -> 243 [style=solid label="\"+\""]
  1311 -> 244 [style=solid label="\"-\""]
  1311 -> 245 [style=solid label="\"(\""]
  1311 -> 246 [style=solid label="\"&\""]
  1311 -> 247 [style=solid label="\"[\""]
  1311 -> 248 [style=solid label="\"co_await\""]
  1311 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1311 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1311 -> 251 [style=solid label="\"operator\""]
  1311 -> 21 [style=solid label="\"decltype\""]
  1311 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1311 -> 253 [style=solid label="\"*\""]
  1311 -> 254 [style=solid label="INTEGER_LITERAL"]
  1311 -> 255 [style=solid label="\"requires\""]
  1311 -> 256 [style=solid label="\"~\""]
  1311 -> 257 [style=solid label="\"++\""]
  1311 -> 258 [style=solid label="\"--\""]
  1311 -> 259 [style=solid label="POINTER_LITERAL"]
  1311 -> 260 [style=solid label="\"dynamic_cast\""]
  1311 -> 261 [style=solid label="\"static_cast\""]
  1311 -> 262 [style=solid label="\"reinterpret_cast\""]
  1311 -> 263 [style=solid label="\"const_cast\""]
  1311 -> 264 [style=solid label="\"typeid\""]
  1311 -> 27 [style=solid label="\"char\""]
  1311 -> 28 [style=solid label="\"char8_t\""]
  1311 -> 29 [style=solid label="\"char16_t\""]
  1311 -> 30 [style=solid label="\"char32_t\""]
  1311 -> 31 [style=solid label="\"wchar_t\""]
  1311 -> 32 [style=solid label="\"bool\""]
  1311 -> 33 [style=solid label="\"short\""]
  1311 -> 34 [style=solid label="\"int\""]
  1311 -> 35 [style=solid label="\"long\""]
  1311 -> 36 [style=solid label="\"signed\""]
  1311 -> 37 [style=solid label="\"unsigned\""]
  1311 -> 38 [style=solid label="\"float\""]
  1311 -> 39 [style=solid label="\"double\""]
  1311 -> 40 [style=solid label="\"void\""]
  1311 -> 118 [style=solid label="STRING_LITERAL"]
  1311 -> 265 [style=solid label="\"throw\""]
  1311 -> 266 [style=solid label="\"sizeof\""]
  1311 -> 267 [style=solid label="\"alignof\""]
  1311 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1311 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1311 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1311 -> 271 [style=solid label="\"co_yield\""]
  1311 -> 272 [style=dashed label="SCOPE-opt"]
  1311 -> 273 [style=dashed label="additive-expression"]
  1311 -> 274 [style=dashed label="and-expression"]
  1311 -> 275 [style=dashed label="assignment-expression"]
  1311 -> 276 [style=dashed label="await-expression"]
  1311 -> 277 [style=dashed label="boolean-literal"]
  1311 -> 278 [style=dashed label="cast-expression"]
  1311 -> 279 [style=dashed label="character-literal"]
  1311 -> 55 [style=dashed label="class-name"]
  1311 -> 280 [style=dashed label="compare-expression"]
  1311 -> 281 [style=dashed label="conditional-expression"]
  1311 -> 282 [style=dashed label="conversion-function-id"]
  1311 -> 63 [style=dashed label="decltype-specifier"]
  1311 -> 283 [style=dashed label="delete-expression"]
  1311 -> 71 [style=dashed label="enum-name"]
  1311 -> 284 [style=dashed label="equality-expression"]
  1311 -> 285 [style=dashed label="exclusive-or-expression"]
  1311 -> 1129 [style=dashed label="expression"]
  1311 -> 1321 [style=dashed label="expression-opt"]
  1311 -> 287 [style=dashed label="floating-point-literal"]
  1311 -> 288 [style=dashed label="fold-expression"]
  1311 -> 289 [style=dashed label="id-expression"]
  1311 -> 290 [style=dashed label="inclusive-or-expression"]
  1311 -> 291 [style=dashed label="integer-literal"]
  1311 -> 292 [style=dashed label="lambda-expression"]
  1311 -> 293 [style=dashed label="lambda-introducer"]
  1311 -> 294 [style=dashed label="literal"]
  1311 -> 295 [style=dashed label="literal-operator-id"]
  1311 -> 296 [style=dashed label="logical-and-expression"]
  1311 -> 297 [style=dashed label="logical-or-expression"]
  1311 -> 298 [style=dashed label="multiplicative-expression"]
  1311 -> 85 [style=dashed label="namespace-alias"]
  1311 -> 88 [style=dashed label="namespace-name"]
  1311 -> 299 [style=dashed label="nested-name-specifier"]
  1311 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1311 -> 300 [style=dashed label="new-expression"]
  1311 -> 301 [style=dashed label="noexcept-expression"]
  1311 -> 302 [style=dashed label="operator-function-id"]
  1311 -> 94 [style=dashed label="placeholder-type-specifier"]
  1311 -> 303 [style=dashed label="pm-expression"]
  1311 -> 304 [style=dashed label="pointer-literal"]
  1311 -> 305 [style=dashed label="postfix-expression"]
  1311 -> 306 [style=dashed label="primary-expression"]
  1311 -> 307 [style=dashed label="qualified-id"]
  1311 -> 308 [style=dashed label="relational-expression"]
  1311 -> 309 [style=dashed label="requires-expression"]
  1311 -> 310 [style=dashed label="shift-expression"]
  1311 -> 311 [style=dashed label="simple-template-id"]
  1311 -> 312 [style=dashed label="simple-type-specifier"]
  1311 -> 313 [style=dashed label="string-literal"]
  1311 -> 314 [style=dashed label="template-id"]
  1311 -> 102 [style=dashed label="template-name"]
  1311 -> 315 [style=dashed label="throw-expression"]
  1311 -> 104 [style=dashed label="type-constraint"]
  1311 -> 105 [style=dashed label="type-constraint-opt"]
  1311 -> 106 [style=dashed label="type-name"]
  1311 -> 108 [style=dashed label="typedef-name"]
  1311 -> 316 [style=dashed label="typename-specifier"]
  1311 -> 317 [style=dashed label="unary-expression"]
  1311 -> 318 [style=dashed label="unary-operator"]
  1311 -> 319 [style=dashed label="unqualified-id"]
  1311 -> 320 [style=dashed label="user-defined-character-literal"]
  1311 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1311 -> 322 [style=dashed label="user-defined-integer-literal"]
  1311 -> 323 [style=dashed label="user-defined-literal"]
  1311 -> 324 [style=dashed label="user-defined-string-literal"]
  1311 -> 325 [style=dashed label="yield-expression"]
  1311 -> "1311R19" [style=solid]
 "1311R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1311 -> "1311R284" [label="[\")\"]", style=solid]
 "1311R284" [label="R284", fillcolor=3, shape=diamond, style=filled]
  1311 -> "1311R469d" [label="[IDENTIFIER]", style=solid]
 "1311R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1311 -> "1311R722d" [label="[\"decltype\"]", style=solid]
 "1311R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1311 -> "1311R722" [label="[\"auto\"]", style=solid]
 "1311R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1312 [label="State 1312\n\l323 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq • declarator\l324                      | attribute-specifier-seq-opt decl-specifier-seq • ref-qualifier-opt \"[\" identifier-list \"]\"\l"]
  1312 -> 156 [style=solid label="\"...\""]
  1312 -> 4 [style=solid label="IDENTIFIER"]
  1312 -> 6 [style=solid label="\"::\""]
  1312 -> 159 [style=solid label="\"(\""]
  1312 -> 1322 [style=solid label="\"&\""]
  1312 -> 1323 [style=solid label="\"&&\""]
  1312 -> 21 [style=solid label="\"decltype\""]
  1312 -> 164 [style=solid label="\"*\""]
  1312 -> 165 [style=dashed label="ELLIPSIS-opt"]
  1312 -> 55 [style=dashed label="class-name"]
  1312 -> 1324 [style=dashed label="declarator"]
  1312 -> 171 [style=dashed label="declarator-id"]
  1312 -> 121 [style=dashed label="decltype-specifier"]
  1312 -> 71 [style=dashed label="enum-name"]
  1312 -> 85 [style=dashed label="namespace-alias"]
  1312 -> 88 [style=dashed label="namespace-name"]
  1312 -> 187 [style=dashed label="nested-name-specifier"]
  1312 -> 173 [style=dashed label="noptr-declarator"]
  1312 -> 174 [style=dashed label="ptr-declarator"]
  1312 -> 175 [style=dashed label="ptr-operator"]
  1312 -> 359 [style=dashed label="ref-qualifier"]
  1312 -> 1325 [style=dashed label="ref-qualifier-opt"]
  1312 -> 96 [style=dashed label="simple-template-id"]
  1312 -> 102 [style=dashed label="template-name"]
  1312 -> 106 [style=dashed label="type-name"]
  1312 -> 108 [style=dashed label="typedef-name"]
  1312 -> "1312R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "1312R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  1312 -> "1312R5" [style=solid]
 "1312R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1312 -> "1312R616" [label="[\"[\"]", style=solid]
 "1312R616" [label="R616", fillcolor=3, shape=diamond, style=filled]
  1313 [label="State 1313\n\l374 iteration-statement: \"for\" \"(\" init-statement-opt for-range-declaration \":\" • for-range-initializer \")\" statement\l"]
  1313 -> 238 [style=solid label="IDENTIFIER"]
  1313 -> 239 [style=solid label="\"noexcept\""]
  1313 -> 240 [style=solid label="\"!\""]
  1313 -> 241 [style=solid label="\"::\""]
  1313 -> 242 [style=solid label="\"this\""]
  1313 -> 8 [style=solid label="\"typename\""]
  1313 -> 243 [style=solid label="\"+\""]
  1313 -> 244 [style=solid label="\"-\""]
  1313 -> 245 [style=solid label="\"(\""]
  1313 -> 246 [style=solid label="\"&\""]
  1313 -> 247 [style=solid label="\"[\""]
  1313 -> 248 [style=solid label="\"co_await\""]
  1313 -> 398 [style=solid label="\"{\""]
  1313 -> 249 [style=solid label="BOOLEAN_LITERAL"]
  1313 -> 250 [style=solid label="CHARACTER_LITERAL"]
  1313 -> 251 [style=solid label="\"operator\""]
  1313 -> 21 [style=solid label="\"decltype\""]
  1313 -> 252 [style=solid label="FLOATING_POINT_LITERAL"]
  1313 -> 253 [style=solid label="\"*\""]
  1313 -> 254 [style=solid label="INTEGER_LITERAL"]
  1313 -> 255 [style=solid label="\"requires\""]
  1313 -> 256 [style=solid label="\"~\""]
  1313 -> 257 [style=solid label="\"++\""]
  1313 -> 258 [style=solid label="\"--\""]
  1313 -> 259 [style=solid label="POINTER_LITERAL"]
  1313 -> 260 [style=solid label="\"dynamic_cast\""]
  1313 -> 261 [style=solid label="\"static_cast\""]
  1313 -> 262 [style=solid label="\"reinterpret_cast\""]
  1313 -> 263 [style=solid label="\"const_cast\""]
  1313 -> 264 [style=solid label="\"typeid\""]
  1313 -> 27 [style=solid label="\"char\""]
  1313 -> 28 [style=solid label="\"char8_t\""]
  1313 -> 29 [style=solid label="\"char16_t\""]
  1313 -> 30 [style=solid label="\"char32_t\""]
  1313 -> 31 [style=solid label="\"wchar_t\""]
  1313 -> 32 [style=solid label="\"bool\""]
  1313 -> 33 [style=solid label="\"short\""]
  1313 -> 34 [style=solid label="\"int\""]
  1313 -> 35 [style=solid label="\"long\""]
  1313 -> 36 [style=solid label="\"signed\""]
  1313 -> 37 [style=solid label="\"unsigned\""]
  1313 -> 38 [style=solid label="\"float\""]
  1313 -> 39 [style=solid label="\"double\""]
  1313 -> 40 [style=solid label="\"void\""]
  1313 -> 118 [style=solid label="STRING_LITERAL"]
  1313 -> 265 [style=solid label="\"throw\""]
  1313 -> 266 [style=solid label="\"sizeof\""]
  1313 -> 267 [style=solid label="\"alignof\""]
  1313 -> 268 [style=solid label="USER_DEFINED_CHARACTER_LITERAL"]
  1313 -> 269 [style=solid label="USER_DEFINED_FLOATING_POINT_LITERAL"]
  1313 -> 270 [style=solid label="USER_DEFINED_INTEGER_LITERAL"]
  1313 -> 271 [style=solid label="\"co_yield\""]
  1313 -> 272 [style=dashed label="SCOPE-opt"]
  1313 -> 273 [style=dashed label="additive-expression"]
  1313 -> 274 [style=dashed label="and-expression"]
  1313 -> 275 [style=dashed label="assignment-expression"]
  1313 -> 276 [style=dashed label="await-expression"]
  1313 -> 277 [style=dashed label="boolean-literal"]
  1313 -> 1198 [style=dashed label="braced-init-list"]
  1313 -> 278 [style=dashed label="cast-expression"]
  1313 -> 279 [style=dashed label="character-literal"]
  1313 -> 55 [style=dashed label="class-name"]
  1313 -> 280 [style=dashed label="compare-expression"]
  1313 -> 281 [style=dashed label="conditional-expression"]
  1313 -> 282 [style=dashed label="conversion-function-id"]
  1313 -> 63 [style=dashed label="decltype-specifier"]
  1313 -> 283 [style=dashed label="delete-expression"]
  1313 -> 71 [style=dashed label="enum-name"]
  1313 -> 284 [style=dashed label="equality-expression"]
  1313 -> 285 [style=dashed label="exclusive-or-expression"]
  1313 -> 1326 [style=dashed label="expr-or-braced-init-list"]
  1313 -> 1201 [style=dashed label="expression"]
  1313 -> 287 [style=dashed label="floating-point-literal"]
  1313 -> 288 [style=dashed label="fold-expression"]
  1313 -> 1327 [style=dashed label="for-range-initializer"]
  1313 -> 289 [style=dashed label="id-expression"]
  1313 -> 290 [style=dashed label="inclusive-or-expression"]
  1313 -> 291 [style=dashed label="integer-literal"]
  1313 -> 292 [style=dashed label="lambda-expression"]
  1313 -> 293 [style=dashed label="lambda-introducer"]
  1313 -> 294 [style=dashed label="literal"]
  1313 -> 295 [style=dashed label="literal-operator-id"]
  1313 -> 296 [style=dashed label="logical-and-expression"]
  1313 -> 297 [style=dashed label="logical-or-expression"]
  1313 -> 298 [style=dashed label="multiplicative-expression"]
  1313 -> 85 [style=dashed label="namespace-alias"]
  1313 -> 88 [style=dashed label="namespace-name"]
  1313 -> 299 [style=dashed label="nested-name-specifier"]
  1313 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1313 -> 300 [style=dashed label="new-expression"]
  1313 -> 301 [style=dashed label="noexcept-expression"]
  1313 -> 302 [style=dashed label="operator-function-id"]
  1313 -> 94 [style=dashed label="placeholder-type-specifier"]
  1313 -> 303 [style=dashed label="pm-expression"]
  1313 -> 304 [style=dashed label="pointer-literal"]
  1313 -> 305 [style=dashed label="postfix-expression"]
  1313 -> 306 [style=dashed label="primary-expression"]
  1313 -> 307 [style=dashed label="qualified-id"]
  1313 -> 308 [style=dashed label="relational-expression"]
  1313 -> 309 [style=dashed label="requires-expression"]
  1313 -> 310 [style=dashed label="shift-expression"]
  1313 -> 311 [style=dashed label="simple-template-id"]
  1313 -> 312 [style=dashed label="simple-type-specifier"]
  1313 -> 313 [style=dashed label="string-literal"]
  1313 -> 314 [style=dashed label="template-id"]
  1313 -> 102 [style=dashed label="template-name"]
  1313 -> 315 [style=dashed label="throw-expression"]
  1313 -> 104 [style=dashed label="type-constraint"]
  1313 -> 105 [style=dashed label="type-constraint-opt"]
  1313 -> 106 [style=dashed label="type-name"]
  1313 -> 108 [style=dashed label="typedef-name"]
  1313 -> 316 [style=dashed label="typename-specifier"]
  1313 -> 317 [style=dashed label="unary-expression"]
  1313 -> 318 [style=dashed label="unary-operator"]
  1313 -> 319 [style=dashed label="unqualified-id"]
  1313 -> 320 [style=dashed label="user-defined-character-literal"]
  1313 -> 321 [style=dashed label="user-defined-floating-point-literal"]
  1313 -> 322 [style=dashed label="user-defined-integer-literal"]
  1313 -> 323 [style=dashed label="user-defined-literal"]
  1313 -> 324 [style=dashed label="user-defined-string-literal"]
  1313 -> 325 [style=dashed label="yield-expression"]
  1313 -> "1313R19" [style=solid]
 "1313R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1313 -> "1313R469d" [label="[IDENTIFIER]", style=solid]
 "1313R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1313 -> "1313R722d" [label="[\"decltype\"]", style=solid]
 "1313R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1313 -> "1313R722" [label="[\"auto\"]", style=solid]
 "1313R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1314 [label="State 1314\n\l640 selection-statement: \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition • \")\" statement\l641                    | \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition • \")\" statement \"else\" statement\l"]
  1314 -> 1328 [style=solid label="\")\""]
  1315 [label="State 1315\n\l643 selection-statement: \"if\" NOT-opt \"consteval\" compound-statement \"else\" • statement\l"]
  1315 -> 1 [style=solid label="\"constexpr\""]
  1315 -> 150 [style=solid label="\"extern\""]
  1315 -> 4 [style=solid label="IDENTIFIER"]
  1315 -> 151 [style=solid label="\"inline\""]
  1315 -> 6 [style=solid label="\"::\""]
  1315 -> 8 [style=solid label="\"typename\""]
  1315 -> 9 [style=solid label="\"virtual\""]
  1315 -> 10 [style=solid label="\"using\""]
  1315 -> 12 [style=solid label="\"class\""]
  1315 -> 13 [style=solid label="\"struct\""]
  1315 -> 14 [style=solid label="\"union\""]
  1315 -> 15 [style=solid label="\"const\""]
  1315 -> 16 [style=solid label="\"volatile\""]
  1315 -> 17 [style=solid label="\"friend\""]
  1315 -> 18 [style=solid label="\"typedef\""]
  1315 -> 19 [style=solid label="\"consteval\""]
  1315 -> 20 [style=solid label="\"constinit\""]
  1315 -> 21 [style=solid label="\"decltype\""]
  1315 -> 22 [style=solid label="\"enum\""]
  1315 -> 23 [style=solid label="\"explicit\""]
  1315 -> 991 [style=solid label="\"namespace\""]
  1315 -> 27 [style=solid label="\"char\""]
  1315 -> 28 [style=solid label="\"char8_t\""]
  1315 -> 29 [style=solid label="\"char16_t\""]
  1315 -> 30 [style=solid label="\"char32_t\""]
  1315 -> 31 [style=solid label="\"wchar_t\""]
  1315 -> 32 [style=solid label="\"bool\""]
  1315 -> 33 [style=solid label="\"short\""]
  1315 -> 34 [style=solid label="\"int\""]
  1315 -> 35 [style=solid label="\"long\""]
  1315 -> 36 [style=solid label="\"signed\""]
  1315 -> 37 [style=solid label="\"unsigned\""]
  1315 -> 38 [style=solid label="\"float\""]
  1315 -> 39 [style=solid label="\"double\""]
  1315 -> 40 [style=solid label="\"void\""]
  1315 -> 41 [style=solid label="\"static_assert\""]
  1315 -> 42 [style=solid label="\"static\""]
  1315 -> 43 [style=solid label="\"thread_local\""]
  1315 -> 44 [style=solid label="\"mutable\""]
  1315 -> 47 [style=dashed label="alias-declaration"]
  1315 -> 48 [style=dashed label="asm-declaration"]
  1315 -> 992 [style=dashed label="attribute-specifier-seq"]
  1315 -> 993 [style=dashed label="attribute-specifier-seq-opt"]
  1315 -> 994 [style=dashed label="block-declaration"]
  1315 -> 53 [style=dashed label="class-head"]
  1315 -> 54 [style=dashed label="class-key"]
  1315 -> 55 [style=dashed label="class-name"]
  1315 -> 56 [style=dashed label="class-specifier"]
  1315 -> 57 [style=dashed label="cv-qualifier"]
  1315 -> 58 [style=dashed label="decl-specifier"]
  1315 -> 59 [style=dashed label="decl-specifier-seq"]
  1315 -> 995 [style=dashed label="declaration-statement"]
  1315 -> 63 [style=dashed label="decltype-specifier"]
  1315 -> 65 [style=dashed label="defining-type-specifier"]
  1315 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1315 -> 67 [style=dashed label="elaborated-type-specifier"]
  1315 -> 69 [style=dashed label="enum-head"]
  1315 -> 70 [style=dashed label="enum-key"]
  1315 -> 71 [style=dashed label="enum-name"]
  1315 -> 72 [style=dashed label="enum-specifier"]
  1315 -> 155 [style=dashed label="explicit-specifier"]
  1315 -> 79 [style=dashed label="function-specifier"]
  1315 -> 996 [style=dashed label="labeled-statement"]
  1315 -> 85 [style=dashed label="namespace-alias"]
  1315 -> 86 [style=dashed label="namespace-alias-definition"]
  1315 -> 88 [style=dashed label="namespace-name"]
  1315 -> 89 [style=dashed label="nested-name-specifier"]
  1315 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1315 -> 93 [style=dashed label="opaque-enum-declaration"]
  1315 -> 94 [style=dashed label="placeholder-type-specifier"]
  1315 -> 95 [style=dashed label="simple-declaration"]
  1315 -> 96 [style=dashed label="simple-template-id"]
  1315 -> 97 [style=dashed label="simple-type-specifier"]
  1315 -> 1329 [style=dashed label="statement"]
  1315 -> 98 [style=dashed label="static_assert-declaration"]
  1315 -> 99 [style=dashed label="storage-class-specifier"]
  1315 -> 102 [style=dashed label="template-name"]
  1315 -> 104 [style=dashed label="type-constraint"]
  1315 -> 105 [style=dashed label="type-constraint-opt"]
  1315 -> 106 [style=dashed label="type-name"]
  1315 -> 107 [style=dashed label="type-specifier"]
  1315 -> 108 [style=dashed label="typedef-name"]
  1315 -> 109 [style=dashed label="typename-specifier"]
  1315 -> 111 [style=dashed label="using-declaration"]
  1315 -> 112 [style=dashed label="using-directive"]
  1315 -> 113 [style=dashed label="using-enum-declaration"]
  1315 -> "1315R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1315R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1315 -> "1315R83" [style=solid]
 "1315R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1315 -> "1315R469d" [label="[IDENTIFIER]", style=solid]
 "1315R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1315 -> "1315R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1315R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1316 [label="State 1316\n\l644 selection-statement: \"switch\" \"(\" init-statement-opt condition \")\" • statement\l"]
  1316 -> 1 [style=solid label="\"constexpr\""]
  1316 -> 150 [style=solid label="\"extern\""]
  1316 -> 4 [style=solid label="IDENTIFIER"]
  1316 -> 151 [style=solid label="\"inline\""]
  1316 -> 6 [style=solid label="\"::\""]
  1316 -> 8 [style=solid label="\"typename\""]
  1316 -> 9 [style=solid label="\"virtual\""]
  1316 -> 10 [style=solid label="\"using\""]
  1316 -> 12 [style=solid label="\"class\""]
  1316 -> 13 [style=solid label="\"struct\""]
  1316 -> 14 [style=solid label="\"union\""]
  1316 -> 15 [style=solid label="\"const\""]
  1316 -> 16 [style=solid label="\"volatile\""]
  1316 -> 17 [style=solid label="\"friend\""]
  1316 -> 18 [style=solid label="\"typedef\""]
  1316 -> 19 [style=solid label="\"consteval\""]
  1316 -> 20 [style=solid label="\"constinit\""]
  1316 -> 21 [style=solid label="\"decltype\""]
  1316 -> 22 [style=solid label="\"enum\""]
  1316 -> 23 [style=solid label="\"explicit\""]
  1316 -> 991 [style=solid label="\"namespace\""]
  1316 -> 27 [style=solid label="\"char\""]
  1316 -> 28 [style=solid label="\"char8_t\""]
  1316 -> 29 [style=solid label="\"char16_t\""]
  1316 -> 30 [style=solid label="\"char32_t\""]
  1316 -> 31 [style=solid label="\"wchar_t\""]
  1316 -> 32 [style=solid label="\"bool\""]
  1316 -> 33 [style=solid label="\"short\""]
  1316 -> 34 [style=solid label="\"int\""]
  1316 -> 35 [style=solid label="\"long\""]
  1316 -> 36 [style=solid label="\"signed\""]
  1316 -> 37 [style=solid label="\"unsigned\""]
  1316 -> 38 [style=solid label="\"float\""]
  1316 -> 39 [style=solid label="\"double\""]
  1316 -> 40 [style=solid label="\"void\""]
  1316 -> 41 [style=solid label="\"static_assert\""]
  1316 -> 42 [style=solid label="\"static\""]
  1316 -> 43 [style=solid label="\"thread_local\""]
  1316 -> 44 [style=solid label="\"mutable\""]
  1316 -> 47 [style=dashed label="alias-declaration"]
  1316 -> 48 [style=dashed label="asm-declaration"]
  1316 -> 992 [style=dashed label="attribute-specifier-seq"]
  1316 -> 993 [style=dashed label="attribute-specifier-seq-opt"]
  1316 -> 994 [style=dashed label="block-declaration"]
  1316 -> 53 [style=dashed label="class-head"]
  1316 -> 54 [style=dashed label="class-key"]
  1316 -> 55 [style=dashed label="class-name"]
  1316 -> 56 [style=dashed label="class-specifier"]
  1316 -> 57 [style=dashed label="cv-qualifier"]
  1316 -> 58 [style=dashed label="decl-specifier"]
  1316 -> 59 [style=dashed label="decl-specifier-seq"]
  1316 -> 995 [style=dashed label="declaration-statement"]
  1316 -> 63 [style=dashed label="decltype-specifier"]
  1316 -> 65 [style=dashed label="defining-type-specifier"]
  1316 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1316 -> 67 [style=dashed label="elaborated-type-specifier"]
  1316 -> 69 [style=dashed label="enum-head"]
  1316 -> 70 [style=dashed label="enum-key"]
  1316 -> 71 [style=dashed label="enum-name"]
  1316 -> 72 [style=dashed label="enum-specifier"]
  1316 -> 155 [style=dashed label="explicit-specifier"]
  1316 -> 79 [style=dashed label="function-specifier"]
  1316 -> 996 [style=dashed label="labeled-statement"]
  1316 -> 85 [style=dashed label="namespace-alias"]
  1316 -> 86 [style=dashed label="namespace-alias-definition"]
  1316 -> 88 [style=dashed label="namespace-name"]
  1316 -> 89 [style=dashed label="nested-name-specifier"]
  1316 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1316 -> 93 [style=dashed label="opaque-enum-declaration"]
  1316 -> 94 [style=dashed label="placeholder-type-specifier"]
  1316 -> 95 [style=dashed label="simple-declaration"]
  1316 -> 96 [style=dashed label="simple-template-id"]
  1316 -> 97 [style=dashed label="simple-type-specifier"]
  1316 -> 1330 [style=dashed label="statement"]
  1316 -> 98 [style=dashed label="static_assert-declaration"]
  1316 -> 99 [style=dashed label="storage-class-specifier"]
  1316 -> 102 [style=dashed label="template-name"]
  1316 -> 104 [style=dashed label="type-constraint"]
  1316 -> 105 [style=dashed label="type-constraint-opt"]
  1316 -> 106 [style=dashed label="type-name"]
  1316 -> 107 [style=dashed label="type-specifier"]
  1316 -> 108 [style=dashed label="typedef-name"]
  1316 -> 109 [style=dashed label="typename-specifier"]
  1316 -> 111 [style=dashed label="using-declaration"]
  1316 -> 112 [style=dashed label="using-directive"]
  1316 -> 113 [style=dashed label="using-enum-declaration"]
  1316 -> "1316R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1316R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1316 -> "1316R83" [style=solid]
 "1316R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1316 -> "1316R469d" [label="[IDENTIFIER]", style=solid]
 "1316R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1316 -> "1316R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1316R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1317 [label="State 1317\n\l261 exception-declaration: attribute-specifier-seq-opt type-specifier-seq • declarator\l262                      | attribute-specifier-seq-opt type-specifier-seq • abstract-declarator-opt\l"]
  1317 -> 935 [style=solid label="\"...\""]
  1317 -> 4 [style=solid label="IDENTIFIER"]
  1317 -> 6 [style=solid label="\"::\""]
  1317 -> 936 [style=solid label="\"(\""]
  1317 -> 160 [style=solid label="\"&\""]
  1317 -> 163 [style=solid label="\"&&\""]
  1317 -> 21 [style=solid label="\"decltype\""]
  1317 -> 164 [style=solid label="\"*\""]
  1317 -> 165 [style=dashed label="ELLIPSIS-opt"]
  1317 -> 704 [style=dashed label="abstract-declarator"]
  1317 -> 1331 [style=dashed label="abstract-declarator-opt"]
  1317 -> 706 [style=dashed label="abstract-pack-declarator"]
  1317 -> 55 [style=dashed label="class-name"]
  1317 -> 1332 [style=dashed label="declarator"]
  1317 -> 171 [style=dashed label="declarator-id"]
  1317 -> 121 [style=dashed label="decltype-specifier"]
  1317 -> 71 [style=dashed label="enum-name"]
  1317 -> 85 [style=dashed label="namespace-alias"]
  1317 -> 88 [style=dashed label="namespace-name"]
  1317 -> 187 [style=dashed label="nested-name-specifier"]
  1317 -> 707 [style=dashed label="noptr-abstract-declarator"]
  1317 -> 708 [style=dashed label="noptr-abstract-declarator-opt"]
  1317 -> 709 [style=dashed label="noptr-abstract-pack-declarator"]
  1317 -> 173 [style=dashed label="noptr-declarator"]
  1317 -> 710 [style=dashed label="ptr-abstract-declarator"]
  1317 -> 174 [style=dashed label="ptr-declarator"]
  1317 -> 939 [style=dashed label="ptr-operator"]
  1317 -> 96 [style=dashed label="simple-template-id"]
  1317 -> 102 [style=dashed label="template-name"]
  1317 -> 106 [style=dashed label="type-name"]
  1317 -> 108 [style=dashed label="typedef-name"]
  1317 -> "1317R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "1317R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  1317 -> "1317R5" [style=solid]
 "1317R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1317 -> "1317R32" [label="[\")\"]", style=solid]
 "1317R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  1317 -> "1317R496d" [label="[\"(\"]", style=solid]
 "1317R496d" [label="R496", fillcolor=5, shape=diamond, style=filled]
  1317 -> "1317R496" [label="[\"[\"]", style=solid]
 "1317R496" [label="R496", fillcolor=3, shape=diamond, style=filled]
  1318 [label="State 1318\n\l338 handler: \"catch\" \"(\" exception-declaration \")\" • compound-statement\l"]
  1318 -> 813 [style=solid label="\"{\""]
  1318 -> 1333 [style=dashed label="compound-statement"]
  1319 [label="State 1319\n\l155 condition: attribute-specifier-seq-opt decl-specifier-seq declarator brace-or-equal-initializer •\l"]
  1319 -> "1319R155" [style=solid]
 "1319R155" [label="R155", fillcolor=3, shape=diamond, style=filled]
  1320 [label="State 1320\n\l372 iteration-statement: \"do\" statement \"while\" \"(\" expression \")\" • \";\"\l"]
  1320 -> 1334 [style=solid label="\";\""]
  1321 [label="State 1321\n\l373 iteration-statement: \"for\" \"(\" init-statement condition-opt \";\" expression-opt • \")\" statement\l"]
  1321 -> 1335 [style=solid label="\")\""]
  1322 [label="State 1322\n\l606 ptr-operator: \"&\" • attribute-specifier-seq-opt\l614 ref-qualifier: \"&\" •\l"]
  1322 -> 177 [style=dashed label="attribute-specifier-seq"]
  1322 -> 349 [style=dashed label="attribute-specifier-seq-opt"]
  1322 -> "1322R83" [style=solid]
 "1322R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1322 -> "1322R614d" [label="[\"[\"]", style=solid]
 "1322R614d" [label="R614", fillcolor=5, shape=diamond, style=filled]
  1323 [label="State 1323\n\l607 ptr-operator: \"&&\" • attribute-specifier-seq-opt\l615 ref-qualifier: \"&&\" •\l"]
  1323 -> 177 [style=dashed label="attribute-specifier-seq"]
  1323 -> 352 [style=dashed label="attribute-specifier-seq-opt"]
  1323 -> "1323R83" [style=solid]
 "1323R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1323 -> "1323R615d" [label="[\"[\"]", style=solid]
 "1323R615d" [label="R615", fillcolor=5, shape=diamond, style=filled]
  1324 [label="State 1324\n\l323 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq declarator •\l"]
  1324 -> "1324R323" [style=solid]
 "1324R323" [label="R323", fillcolor=3, shape=diamond, style=filled]
  1325 [label="State 1325\n\l324 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt • \"[\" identifier-list \"]\"\l"]
  1325 -> 1336 [style=solid label="\"[\""]
  1326 [label="State 1326\n\l325 for-range-initializer: expr-or-braced-init-list •\l"]
  1326 -> "1326R325" [style=solid]
 "1326R325" [label="R325", fillcolor=3, shape=diamond, style=filled]
  1327 [label="State 1327\n\l374 iteration-statement: \"for\" \"(\" init-statement-opt for-range-declaration \":\" for-range-initializer • \")\" statement\l"]
  1327 -> 1337 [style=solid label="\")\""]
  1328 [label="State 1328\n\l640 selection-statement: \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition \")\" • statement\l641                    | \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition \")\" • statement \"else\" statement\l"]
  1328 -> 1 [style=solid label="\"constexpr\""]
  1328 -> 150 [style=solid label="\"extern\""]
  1328 -> 4 [style=solid label="IDENTIFIER"]
  1328 -> 151 [style=solid label="\"inline\""]
  1328 -> 6 [style=solid label="\"::\""]
  1328 -> 8 [style=solid label="\"typename\""]
  1328 -> 9 [style=solid label="\"virtual\""]
  1328 -> 10 [style=solid label="\"using\""]
  1328 -> 12 [style=solid label="\"class\""]
  1328 -> 13 [style=solid label="\"struct\""]
  1328 -> 14 [style=solid label="\"union\""]
  1328 -> 15 [style=solid label="\"const\""]
  1328 -> 16 [style=solid label="\"volatile\""]
  1328 -> 17 [style=solid label="\"friend\""]
  1328 -> 18 [style=solid label="\"typedef\""]
  1328 -> 19 [style=solid label="\"consteval\""]
  1328 -> 20 [style=solid label="\"constinit\""]
  1328 -> 21 [style=solid label="\"decltype\""]
  1328 -> 22 [style=solid label="\"enum\""]
  1328 -> 23 [style=solid label="\"explicit\""]
  1328 -> 991 [style=solid label="\"namespace\""]
  1328 -> 27 [style=solid label="\"char\""]
  1328 -> 28 [style=solid label="\"char8_t\""]
  1328 -> 29 [style=solid label="\"char16_t\""]
  1328 -> 30 [style=solid label="\"char32_t\""]
  1328 -> 31 [style=solid label="\"wchar_t\""]
  1328 -> 32 [style=solid label="\"bool\""]
  1328 -> 33 [style=solid label="\"short\""]
  1328 -> 34 [style=solid label="\"int\""]
  1328 -> 35 [style=solid label="\"long\""]
  1328 -> 36 [style=solid label="\"signed\""]
  1328 -> 37 [style=solid label="\"unsigned\""]
  1328 -> 38 [style=solid label="\"float\""]
  1328 -> 39 [style=solid label="\"double\""]
  1328 -> 40 [style=solid label="\"void\""]
  1328 -> 41 [style=solid label="\"static_assert\""]
  1328 -> 42 [style=solid label="\"static\""]
  1328 -> 43 [style=solid label="\"thread_local\""]
  1328 -> 44 [style=solid label="\"mutable\""]
  1328 -> 47 [style=dashed label="alias-declaration"]
  1328 -> 48 [style=dashed label="asm-declaration"]
  1328 -> 992 [style=dashed label="attribute-specifier-seq"]
  1328 -> 993 [style=dashed label="attribute-specifier-seq-opt"]
  1328 -> 994 [style=dashed label="block-declaration"]
  1328 -> 53 [style=dashed label="class-head"]
  1328 -> 54 [style=dashed label="class-key"]
  1328 -> 55 [style=dashed label="class-name"]
  1328 -> 56 [style=dashed label="class-specifier"]
  1328 -> 57 [style=dashed label="cv-qualifier"]
  1328 -> 58 [style=dashed label="decl-specifier"]
  1328 -> 59 [style=dashed label="decl-specifier-seq"]
  1328 -> 995 [style=dashed label="declaration-statement"]
  1328 -> 63 [style=dashed label="decltype-specifier"]
  1328 -> 65 [style=dashed label="defining-type-specifier"]
  1328 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1328 -> 67 [style=dashed label="elaborated-type-specifier"]
  1328 -> 69 [style=dashed label="enum-head"]
  1328 -> 70 [style=dashed label="enum-key"]
  1328 -> 71 [style=dashed label="enum-name"]
  1328 -> 72 [style=dashed label="enum-specifier"]
  1328 -> 155 [style=dashed label="explicit-specifier"]
  1328 -> 79 [style=dashed label="function-specifier"]
  1328 -> 996 [style=dashed label="labeled-statement"]
  1328 -> 85 [style=dashed label="namespace-alias"]
  1328 -> 86 [style=dashed label="namespace-alias-definition"]
  1328 -> 88 [style=dashed label="namespace-name"]
  1328 -> 89 [style=dashed label="nested-name-specifier"]
  1328 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1328 -> 93 [style=dashed label="opaque-enum-declaration"]
  1328 -> 94 [style=dashed label="placeholder-type-specifier"]
  1328 -> 95 [style=dashed label="simple-declaration"]
  1328 -> 96 [style=dashed label="simple-template-id"]
  1328 -> 97 [style=dashed label="simple-type-specifier"]
  1328 -> 1338 [style=dashed label="statement"]
  1328 -> 98 [style=dashed label="static_assert-declaration"]
  1328 -> 99 [style=dashed label="storage-class-specifier"]
  1328 -> 102 [style=dashed label="template-name"]
  1328 -> 104 [style=dashed label="type-constraint"]
  1328 -> 105 [style=dashed label="type-constraint-opt"]
  1328 -> 106 [style=dashed label="type-name"]
  1328 -> 107 [style=dashed label="type-specifier"]
  1328 -> 108 [style=dashed label="typedef-name"]
  1328 -> 109 [style=dashed label="typename-specifier"]
  1328 -> 111 [style=dashed label="using-declaration"]
  1328 -> 112 [style=dashed label="using-directive"]
  1328 -> 113 [style=dashed label="using-enum-declaration"]
  1328 -> "1328R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1328R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1328 -> "1328R83" [style=solid]
 "1328R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1328 -> "1328R469d" [label="[IDENTIFIER]", style=solid]
 "1328R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1328 -> "1328R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1328R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1329 [label="State 1329\n\l643 selection-statement: \"if\" NOT-opt \"consteval\" compound-statement \"else\" statement •\l"]
  1329 -> "1329R643" [style=solid]
 "1329R643" [label="R643", fillcolor=3, shape=diamond, style=filled]
  1330 [label="State 1330\n\l644 selection-statement: \"switch\" \"(\" init-statement-opt condition \")\" statement •\l"]
  1330 -> "1330R644" [style=solid]
 "1330R644" [label="R644", fillcolor=3, shape=diamond, style=filled]
  1331 [label="State 1331\n\l262 exception-declaration: attribute-specifier-seq-opt type-specifier-seq abstract-declarator-opt •\l"]
  1331 -> "1331R262" [style=solid]
 "1331R262" [label="R262", fillcolor=3, shape=diamond, style=filled]
  1332 [label="State 1332\n\l261 exception-declaration: attribute-specifier-seq-opt type-specifier-seq declarator •\l"]
  1332 -> "1332R261" [style=solid]
 "1332R261" [label="R261", fillcolor=3, shape=diamond, style=filled]
  1333 [label="State 1333\n\l338 handler: \"catch\" \"(\" exception-declaration \")\" compound-statement •\l"]
  1333 -> "1333R338" [style=solid]
 "1333R338" [label="R338", fillcolor=3, shape=diamond, style=filled]
  1334 [label="State 1334\n\l372 iteration-statement: \"do\" statement \"while\" \"(\" expression \")\" \";\" •\l"]
  1334 -> "1334R372" [style=solid]
 "1334R372" [label="R372", fillcolor=3, shape=diamond, style=filled]
  1335 [label="State 1335\n\l373 iteration-statement: \"for\" \"(\" init-statement condition-opt \";\" expression-opt \")\" • statement\l"]
  1335 -> 1 [style=solid label="\"constexpr\""]
  1335 -> 150 [style=solid label="\"extern\""]
  1335 -> 4 [style=solid label="IDENTIFIER"]
  1335 -> 151 [style=solid label="\"inline\""]
  1335 -> 6 [style=solid label="\"::\""]
  1335 -> 8 [style=solid label="\"typename\""]
  1335 -> 9 [style=solid label="\"virtual\""]
  1335 -> 10 [style=solid label="\"using\""]
  1335 -> 12 [style=solid label="\"class\""]
  1335 -> 13 [style=solid label="\"struct\""]
  1335 -> 14 [style=solid label="\"union\""]
  1335 -> 15 [style=solid label="\"const\""]
  1335 -> 16 [style=solid label="\"volatile\""]
  1335 -> 17 [style=solid label="\"friend\""]
  1335 -> 18 [style=solid label="\"typedef\""]
  1335 -> 19 [style=solid label="\"consteval\""]
  1335 -> 20 [style=solid label="\"constinit\""]
  1335 -> 21 [style=solid label="\"decltype\""]
  1335 -> 22 [style=solid label="\"enum\""]
  1335 -> 23 [style=solid label="\"explicit\""]
  1335 -> 991 [style=solid label="\"namespace\""]
  1335 -> 27 [style=solid label="\"char\""]
  1335 -> 28 [style=solid label="\"char8_t\""]
  1335 -> 29 [style=solid label="\"char16_t\""]
  1335 -> 30 [style=solid label="\"char32_t\""]
  1335 -> 31 [style=solid label="\"wchar_t\""]
  1335 -> 32 [style=solid label="\"bool\""]
  1335 -> 33 [style=solid label="\"short\""]
  1335 -> 34 [style=solid label="\"int\""]
  1335 -> 35 [style=solid label="\"long\""]
  1335 -> 36 [style=solid label="\"signed\""]
  1335 -> 37 [style=solid label="\"unsigned\""]
  1335 -> 38 [style=solid label="\"float\""]
  1335 -> 39 [style=solid label="\"double\""]
  1335 -> 40 [style=solid label="\"void\""]
  1335 -> 41 [style=solid label="\"static_assert\""]
  1335 -> 42 [style=solid label="\"static\""]
  1335 -> 43 [style=solid label="\"thread_local\""]
  1335 -> 44 [style=solid label="\"mutable\""]
  1335 -> 47 [style=dashed label="alias-declaration"]
  1335 -> 48 [style=dashed label="asm-declaration"]
  1335 -> 992 [style=dashed label="attribute-specifier-seq"]
  1335 -> 993 [style=dashed label="attribute-specifier-seq-opt"]
  1335 -> 994 [style=dashed label="block-declaration"]
  1335 -> 53 [style=dashed label="class-head"]
  1335 -> 54 [style=dashed label="class-key"]
  1335 -> 55 [style=dashed label="class-name"]
  1335 -> 56 [style=dashed label="class-specifier"]
  1335 -> 57 [style=dashed label="cv-qualifier"]
  1335 -> 58 [style=dashed label="decl-specifier"]
  1335 -> 59 [style=dashed label="decl-specifier-seq"]
  1335 -> 995 [style=dashed label="declaration-statement"]
  1335 -> 63 [style=dashed label="decltype-specifier"]
  1335 -> 65 [style=dashed label="defining-type-specifier"]
  1335 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1335 -> 67 [style=dashed label="elaborated-type-specifier"]
  1335 -> 69 [style=dashed label="enum-head"]
  1335 -> 70 [style=dashed label="enum-key"]
  1335 -> 71 [style=dashed label="enum-name"]
  1335 -> 72 [style=dashed label="enum-specifier"]
  1335 -> 155 [style=dashed label="explicit-specifier"]
  1335 -> 79 [style=dashed label="function-specifier"]
  1335 -> 996 [style=dashed label="labeled-statement"]
  1335 -> 85 [style=dashed label="namespace-alias"]
  1335 -> 86 [style=dashed label="namespace-alias-definition"]
  1335 -> 88 [style=dashed label="namespace-name"]
  1335 -> 89 [style=dashed label="nested-name-specifier"]
  1335 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1335 -> 93 [style=dashed label="opaque-enum-declaration"]
  1335 -> 94 [style=dashed label="placeholder-type-specifier"]
  1335 -> 95 [style=dashed label="simple-declaration"]
  1335 -> 96 [style=dashed label="simple-template-id"]
  1335 -> 97 [style=dashed label="simple-type-specifier"]
  1335 -> 1339 [style=dashed label="statement"]
  1335 -> 98 [style=dashed label="static_assert-declaration"]
  1335 -> 99 [style=dashed label="storage-class-specifier"]
  1335 -> 102 [style=dashed label="template-name"]
  1335 -> 104 [style=dashed label="type-constraint"]
  1335 -> 105 [style=dashed label="type-constraint-opt"]
  1335 -> 106 [style=dashed label="type-name"]
  1335 -> 107 [style=dashed label="type-specifier"]
  1335 -> 108 [style=dashed label="typedef-name"]
  1335 -> 109 [style=dashed label="typename-specifier"]
  1335 -> 111 [style=dashed label="using-declaration"]
  1335 -> 112 [style=dashed label="using-directive"]
  1335 -> 113 [style=dashed label="using-enum-declaration"]
  1335 -> "1335R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1335R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1335 -> "1335R83" [style=solid]
 "1335R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1335 -> "1335R469d" [label="[IDENTIFIER]", style=solid]
 "1335R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1335 -> "1335R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1335R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1336 [label="State 1336\n\l324 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" • identifier-list \"]\"\l"]
  1336 -> 865 [style=solid label="IDENTIFIER"]
  1336 -> 1340 [style=dashed label="identifier-list"]
  1337 [label="State 1337\n\l374 iteration-statement: \"for\" \"(\" init-statement-opt for-range-declaration \":\" for-range-initializer \")\" • statement\l"]
  1337 -> 1 [style=solid label="\"constexpr\""]
  1337 -> 150 [style=solid label="\"extern\""]
  1337 -> 4 [style=solid label="IDENTIFIER"]
  1337 -> 151 [style=solid label="\"inline\""]
  1337 -> 6 [style=solid label="\"::\""]
  1337 -> 8 [style=solid label="\"typename\""]
  1337 -> 9 [style=solid label="\"virtual\""]
  1337 -> 10 [style=solid label="\"using\""]
  1337 -> 12 [style=solid label="\"class\""]
  1337 -> 13 [style=solid label="\"struct\""]
  1337 -> 14 [style=solid label="\"union\""]
  1337 -> 15 [style=solid label="\"const\""]
  1337 -> 16 [style=solid label="\"volatile\""]
  1337 -> 17 [style=solid label="\"friend\""]
  1337 -> 18 [style=solid label="\"typedef\""]
  1337 -> 19 [style=solid label="\"consteval\""]
  1337 -> 20 [style=solid label="\"constinit\""]
  1337 -> 21 [style=solid label="\"decltype\""]
  1337 -> 22 [style=solid label="\"enum\""]
  1337 -> 23 [style=solid label="\"explicit\""]
  1337 -> 991 [style=solid label="\"namespace\""]
  1337 -> 27 [style=solid label="\"char\""]
  1337 -> 28 [style=solid label="\"char8_t\""]
  1337 -> 29 [style=solid label="\"char16_t\""]
  1337 -> 30 [style=solid label="\"char32_t\""]
  1337 -> 31 [style=solid label="\"wchar_t\""]
  1337 -> 32 [style=solid label="\"bool\""]
  1337 -> 33 [style=solid label="\"short\""]
  1337 -> 34 [style=solid label="\"int\""]
  1337 -> 35 [style=solid label="\"long\""]
  1337 -> 36 [style=solid label="\"signed\""]
  1337 -> 37 [style=solid label="\"unsigned\""]
  1337 -> 38 [style=solid label="\"float\""]
  1337 -> 39 [style=solid label="\"double\""]
  1337 -> 40 [style=solid label="\"void\""]
  1337 -> 41 [style=solid label="\"static_assert\""]
  1337 -> 42 [style=solid label="\"static\""]
  1337 -> 43 [style=solid label="\"thread_local\""]
  1337 -> 44 [style=solid label="\"mutable\""]
  1337 -> 47 [style=dashed label="alias-declaration"]
  1337 -> 48 [style=dashed label="asm-declaration"]
  1337 -> 992 [style=dashed label="attribute-specifier-seq"]
  1337 -> 993 [style=dashed label="attribute-specifier-seq-opt"]
  1337 -> 994 [style=dashed label="block-declaration"]
  1337 -> 53 [style=dashed label="class-head"]
  1337 -> 54 [style=dashed label="class-key"]
  1337 -> 55 [style=dashed label="class-name"]
  1337 -> 56 [style=dashed label="class-specifier"]
  1337 -> 57 [style=dashed label="cv-qualifier"]
  1337 -> 58 [style=dashed label="decl-specifier"]
  1337 -> 59 [style=dashed label="decl-specifier-seq"]
  1337 -> 995 [style=dashed label="declaration-statement"]
  1337 -> 63 [style=dashed label="decltype-specifier"]
  1337 -> 65 [style=dashed label="defining-type-specifier"]
  1337 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1337 -> 67 [style=dashed label="elaborated-type-specifier"]
  1337 -> 69 [style=dashed label="enum-head"]
  1337 -> 70 [style=dashed label="enum-key"]
  1337 -> 71 [style=dashed label="enum-name"]
  1337 -> 72 [style=dashed label="enum-specifier"]
  1337 -> 155 [style=dashed label="explicit-specifier"]
  1337 -> 79 [style=dashed label="function-specifier"]
  1337 -> 996 [style=dashed label="labeled-statement"]
  1337 -> 85 [style=dashed label="namespace-alias"]
  1337 -> 86 [style=dashed label="namespace-alias-definition"]
  1337 -> 88 [style=dashed label="namespace-name"]
  1337 -> 89 [style=dashed label="nested-name-specifier"]
  1337 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1337 -> 93 [style=dashed label="opaque-enum-declaration"]
  1337 -> 94 [style=dashed label="placeholder-type-specifier"]
  1337 -> 95 [style=dashed label="simple-declaration"]
  1337 -> 96 [style=dashed label="simple-template-id"]
  1337 -> 97 [style=dashed label="simple-type-specifier"]
  1337 -> 1341 [style=dashed label="statement"]
  1337 -> 98 [style=dashed label="static_assert-declaration"]
  1337 -> 99 [style=dashed label="storage-class-specifier"]
  1337 -> 102 [style=dashed label="template-name"]
  1337 -> 104 [style=dashed label="type-constraint"]
  1337 -> 105 [style=dashed label="type-constraint-opt"]
  1337 -> 106 [style=dashed label="type-name"]
  1337 -> 107 [style=dashed label="type-specifier"]
  1337 -> 108 [style=dashed label="typedef-name"]
  1337 -> 109 [style=dashed label="typename-specifier"]
  1337 -> 111 [style=dashed label="using-declaration"]
  1337 -> 112 [style=dashed label="using-directive"]
  1337 -> 113 [style=dashed label="using-enum-declaration"]
  1337 -> "1337R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1337R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1337 -> "1337R83" [style=solid]
 "1337R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1337 -> "1337R469d" [label="[IDENTIFIER]", style=solid]
 "1337R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1337 -> "1337R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1337R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1338 [label="State 1338\n\l640 selection-statement: \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition \")\" statement •\l641                    | \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition \")\" statement • \"else\" statement\l"]
  1338 -> 1342 [style=solid label="\"else\""]
  1338 -> "1338R640d" [label="[\"else\"]", style=solid]
 "1338R640d" [label="R640", fillcolor=5, shape=diamond, style=filled]
  1338 -> "1338R640" [style=solid]
 "1338R640" [label="R640", fillcolor=3, shape=diamond, style=filled]
  1339 [label="State 1339\n\l373 iteration-statement: \"for\" \"(\" init-statement condition-opt \";\" expression-opt \")\" statement •\l"]
  1339 -> "1339R373" [style=solid]
 "1339R373" [label="R373", fillcolor=3, shape=diamond, style=filled]
  1340 [label="State 1340\n\l324 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" identifier-list • \"]\"\l346 identifier-list: identifier-list • \",\" IDENTIFIER\l"]
  1340 -> 1025 [style=solid label="\",\""]
  1340 -> 1343 [style=solid label="\"]\""]
  1341 [label="State 1341\n\l374 iteration-statement: \"for\" \"(\" init-statement-opt for-range-declaration \":\" for-range-initializer \")\" statement •\l"]
  1341 -> "1341R374" [style=solid]
 "1341R374" [label="R374", fillcolor=3, shape=diamond, style=filled]
  1342 [label="State 1342\n\l641 selection-statement: \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition \")\" statement \"else\" • statement\l"]
  1342 -> 1 [style=solid label="\"constexpr\""]
  1342 -> 150 [style=solid label="\"extern\""]
  1342 -> 4 [style=solid label="IDENTIFIER"]
  1342 -> 151 [style=solid label="\"inline\""]
  1342 -> 6 [style=solid label="\"::\""]
  1342 -> 8 [style=solid label="\"typename\""]
  1342 -> 9 [style=solid label="\"virtual\""]
  1342 -> 10 [style=solid label="\"using\""]
  1342 -> 12 [style=solid label="\"class\""]
  1342 -> 13 [style=solid label="\"struct\""]
  1342 -> 14 [style=solid label="\"union\""]
  1342 -> 15 [style=solid label="\"const\""]
  1342 -> 16 [style=solid label="\"volatile\""]
  1342 -> 17 [style=solid label="\"friend\""]
  1342 -> 18 [style=solid label="\"typedef\""]
  1342 -> 19 [style=solid label="\"consteval\""]
  1342 -> 20 [style=solid label="\"constinit\""]
  1342 -> 21 [style=solid label="\"decltype\""]
  1342 -> 22 [style=solid label="\"enum\""]
  1342 -> 23 [style=solid label="\"explicit\""]
  1342 -> 991 [style=solid label="\"namespace\""]
  1342 -> 27 [style=solid label="\"char\""]
  1342 -> 28 [style=solid label="\"char8_t\""]
  1342 -> 29 [style=solid label="\"char16_t\""]
  1342 -> 30 [style=solid label="\"char32_t\""]
  1342 -> 31 [style=solid label="\"wchar_t\""]
  1342 -> 32 [style=solid label="\"bool\""]
  1342 -> 33 [style=solid label="\"short\""]
  1342 -> 34 [style=solid label="\"int\""]
  1342 -> 35 [style=solid label="\"long\""]
  1342 -> 36 [style=solid label="\"signed\""]
  1342 -> 37 [style=solid label="\"unsigned\""]
  1342 -> 38 [style=solid label="\"float\""]
  1342 -> 39 [style=solid label="\"double\""]
  1342 -> 40 [style=solid label="\"void\""]
  1342 -> 41 [style=solid label="\"static_assert\""]
  1342 -> 42 [style=solid label="\"static\""]
  1342 -> 43 [style=solid label="\"thread_local\""]
  1342 -> 44 [style=solid label="\"mutable\""]
  1342 -> 47 [style=dashed label="alias-declaration"]
  1342 -> 48 [style=dashed label="asm-declaration"]
  1342 -> 992 [style=dashed label="attribute-specifier-seq"]
  1342 -> 993 [style=dashed label="attribute-specifier-seq-opt"]
  1342 -> 994 [style=dashed label="block-declaration"]
  1342 -> 53 [style=dashed label="class-head"]
  1342 -> 54 [style=dashed label="class-key"]
  1342 -> 55 [style=dashed label="class-name"]
  1342 -> 56 [style=dashed label="class-specifier"]
  1342 -> 57 [style=dashed label="cv-qualifier"]
  1342 -> 58 [style=dashed label="decl-specifier"]
  1342 -> 59 [style=dashed label="decl-specifier-seq"]
  1342 -> 995 [style=dashed label="declaration-statement"]
  1342 -> 63 [style=dashed label="decltype-specifier"]
  1342 -> 65 [style=dashed label="defining-type-specifier"]
  1342 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1342 -> 67 [style=dashed label="elaborated-type-specifier"]
  1342 -> 69 [style=dashed label="enum-head"]
  1342 -> 70 [style=dashed label="enum-key"]
  1342 -> 71 [style=dashed label="enum-name"]
  1342 -> 72 [style=dashed label="enum-specifier"]
  1342 -> 155 [style=dashed label="explicit-specifier"]
  1342 -> 79 [style=dashed label="function-specifier"]
  1342 -> 996 [style=dashed label="labeled-statement"]
  1342 -> 85 [style=dashed label="namespace-alias"]
  1342 -> 86 [style=dashed label="namespace-alias-definition"]
  1342 -> 88 [style=dashed label="namespace-name"]
  1342 -> 89 [style=dashed label="nested-name-specifier"]
  1342 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1342 -> 93 [style=dashed label="opaque-enum-declaration"]
  1342 -> 94 [style=dashed label="placeholder-type-specifier"]
  1342 -> 95 [style=dashed label="simple-declaration"]
  1342 -> 96 [style=dashed label="simple-template-id"]
  1342 -> 97 [style=dashed label="simple-type-specifier"]
  1342 -> 1344 [style=dashed label="statement"]
  1342 -> 98 [style=dashed label="static_assert-declaration"]
  1342 -> 99 [style=dashed label="storage-class-specifier"]
  1342 -> 102 [style=dashed label="template-name"]
  1342 -> 104 [style=dashed label="type-constraint"]
  1342 -> 105 [style=dashed label="type-constraint-opt"]
  1342 -> 106 [style=dashed label="type-name"]
  1342 -> 107 [style=dashed label="type-specifier"]
  1342 -> 108 [style=dashed label="typedef-name"]
  1342 -> 109 [style=dashed label="typename-specifier"]
  1342 -> 111 [style=dashed label="using-declaration"]
  1342 -> 112 [style=dashed label="using-directive"]
  1342 -> 113 [style=dashed label="using-enum-declaration"]
  1342 -> "1342R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1342R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1342 -> "1342R83" [style=solid]
 "1342R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1342 -> "1342R469d" [label="[IDENTIFIER]", style=solid]
 "1342R469d" [label="R469", fillcolor=5, shape=diamond, style=filled]
  1342 -> "1342R722d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1342R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1343 [label="State 1343\n\l324 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" •\l"]
  1343 -> "1343R324" [style=solid]
 "1343R324" [label="R324", fillcolor=3, shape=diamond, style=filled]
  1344 [label="State 1344\n\l641 selection-statement: \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition \")\" statement \"else\" statement •\l"]
  1344 -> "1344R641" [style=solid]
 "1344R641" [label="R641", fillcolor=3, shape=diamond, style=filled]
}
