// Generated by GNU Bison 3.8.2.9-6571.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <https://www.gnu.org/software/bison/>.

digraph "cplusplus.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: • translation-unit $end\l"]
  0 -> 1 [style=solid label="USING"]
  0 -> 2 [style=solid label="IDENTIFIER"]
  0 -> 3 [style=solid label="SEMICOLON"]
  0 -> 4 [style=solid label="ALIGNAS"]
  0 -> 5 [style=solid label="OPEN_PAREN"]
  0 -> 6 [style=solid label="ELLIPSIS"]
  0 -> 7 [style=solid label="AND"]
  0 -> 8 [style=solid label="ASM"]
  0 -> 9 [style=solid label="SCOPE"]
  0 -> 10 [style=solid label="OPEN_SQUARE"]
  0 -> 11 [style=solid label="VIRTUAL"]
  0 -> 12 [style=solid label="CLASS"]
  0 -> 13 [style=solid label="STRUCT"]
  0 -> 14 [style=solid label="UNION"]
  0 -> 15 [style=solid label="TEMPLATE"]
  0 -> 16 [style=solid label="AND_AND"]
  0 -> 17 [style=solid label="OPERATOR"]
  0 -> 18 [style=solid label="CONST"]
  0 -> 19 [style=solid label="VOLATILE"]
  0 -> 20 [style=solid label="FRIEND"]
  0 -> 21 [style=solid label="TYPEDEF"]
  0 -> 22 [style=solid label="CONSTEXPR"]
  0 -> 23 [style=solid label="CONSTEVAL"]
  0 -> 24 [style=solid label="CONSTINIT"]
  0 -> 25 [style=solid label="INLINE"]
  0 -> 26 [style=solid label="DECLTYPE"]
  0 -> 27 [style=solid label="ENUM"]
  0 -> 28 [style=solid label="EXTERN"]
  0 -> 29 [style=solid label="EXPLICIT"]
  0 -> 30 [style=solid label="EXPORT"]
  0 -> 31 [style=solid label="MULT"]
  0 -> 32 [style=solid label="MODULE"]
  0 -> 33 [style=solid label="IMPORT"]
  0 -> 34 [style=solid label="NAMESPACE"]
  0 -> 35 [style=solid label="COMPL"]
  0 -> 36 [style=solid label="AUTO"]
  0 -> 37 [style=solid label="CHAR"]
  0 -> 38 [style=solid label="CHAR8_T"]
  0 -> 39 [style=solid label="CHAR16_T"]
  0 -> 40 [style=solid label="CHAR32_T"]
  0 -> 41 [style=solid label="WCHAR_T"]
  0 -> 42 [style=solid label="BOOL"]
  0 -> 43 [style=solid label="SHORT"]
  0 -> 44 [style=solid label="INT"]
  0 -> 45 [style=solid label="LONG"]
  0 -> 46 [style=solid label="SIGNED"]
  0 -> 47 [style=solid label="UNSIGNED"]
  0 -> 48 [style=solid label="FLOAT"]
  0 -> 49 [style=solid label="DOUBLE"]
  0 -> 50 [style=solid label="VOID"]
  0 -> 51 [style=solid label="STATIC_ASSERT"]
  0 -> 52 [style=solid label="STATIC"]
  0 -> 53 [style=solid label="THREAD_LOCAL"]
  0 -> 54 [style=solid label="MUTABLE"]
  0 -> 55 [style=solid label="TYPENAME"]
  0 -> 56 [style=dashed label="alias-declaration"]
  0 -> 57 [style=dashed label="alignment-specifier"]
  0 -> 58 [style=dashed label="asm-declaration"]
  0 -> 59 [style=dashed label="attribute-declaration"]
  0 -> 60 [style=dashed label="attribute-specifier"]
  0 -> 61 [style=dashed label="attribute-specifier-seq"]
  0 -> 62 [style=dashed label="block-declaration"]
  0 -> 63 [style=dashed label="class-head"]
  0 -> 64 [style=dashed label="class-key"]
  0 -> 65 [style=dashed label="class-name"]
  0 -> 66 [style=dashed label="class-specifier"]
  0 -> 67 [style=dashed label="concept-name"]
  0 -> 68 [style=dashed label="conversion-function-id"]
  0 -> 69 [style=dashed label="cv-qualifier"]
  0 -> 70 [style=dashed label="decl-specifier"]
  0 -> 71 [style=dashed label="decl-specifier-seq"]
  0 -> 72 [style=dashed label="declaration"]
  0 -> 73 [style=dashed label="declaration-seq"]
  0 -> 74 [style=dashed label="declarator"]
  0 -> 75 [style=dashed label="declarator-id"]
  0 -> 76 [style=dashed label="decltype-specifier"]
  0 -> 77 [style=dashed label="deduction-guide"]
  0 -> 78 [style=dashed label="defining-type-specifier"]
  0 -> 79 [style=dashed label="elaborated-enum-specifier"]
  0 -> 80 [style=dashed label="elaborated-type-specifier"]
  0 -> 81 [style=dashed label="empty-declaration"]
  0 -> 82 [style=dashed label="enum-head"]
  0 -> 83 [style=dashed label="enum-key"]
  0 -> 84 [style=dashed label="enum-name"]
  0 -> 85 [style=dashed label="enum-specifier"]
  0 -> 86 [style=dashed label="explicit-instantiation"]
  0 -> 87 [style=dashed label="explicit-specialization"]
  0 -> 88 [style=dashed label="explicit-specifier"]
  0 -> 89 [style=dashed label="export-declaration"]
  0 -> 90 [style=dashed label="function-definition"]
  0 -> 91 [style=dashed label="function-specifier"]
  0 -> 92 [style=dashed label="global-module-fragment"]
  0 -> 93 [style=dashed label="id-expression"]
  0 -> 94 [style=dashed label="linkage-specification"]
  0 -> 95 [style=dashed label="literal-operator-id"]
  0 -> 96 [style=dashed label="module-declaration"]
  0 -> 97 [style=dashed label="module-import-declaration"]
  0 -> 98 [style=dashed label="named-namespace-definition"]
  0 -> 99 [style=dashed label="namespace-alias"]
  0 -> 100 [style=dashed label="namespace-alias-definition"]
  0 -> 101 [style=dashed label="namespace-definition"]
  0 -> 102 [style=dashed label="namespace-name"]
  0 -> 103 [style=dashed label="nested-name-specifier"]
  0 -> 104 [style=dashed label="nested-namespace-definition"]
  0 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  0 -> 106 [style=dashed label="noptr-declarator"]
  0 -> 107 [style=dashed label="opaque-enum-declaration"]
  0 -> 108 [style=dashed label="operator-function-id"]
  0 -> 109 [style=dashed label="placeholder-type-specifier"]
  0 -> 110 [style=dashed label="ptr-declarator"]
  0 -> 111 [style=dashed label="ptr-operator"]
  0 -> 112 [style=dashed label="qualified-id"]
  0 -> 113 [style=dashed label="simple-declaration"]
  0 -> 114 [style=dashed label="simple-template-id"]
  0 -> 115 [style=dashed label="simple-type-specifier"]
  0 -> 116 [style=dashed label="static_assert-declaration"]
  0 -> 117 [style=dashed label="storage-class-specifier"]
  0 -> 118 [style=dashed label="template-declaration"]
  0 -> 119 [style=dashed label="template-head"]
  0 -> 120 [style=dashed label="template-id"]
  0 -> 121 [style=dashed label="template-name"]
  0 -> 122 [style=dashed label="translation-unit"]
  0 -> 123 [style=dashed label="type-constraint"]
  0 -> 124 [style=dashed label="type-name"]
  0 -> 125 [style=dashed label="type-specifier"]
  0 -> 126 [style=dashed label="typedef-name"]
  0 -> 127 [style=dashed label="typename-specifier"]
  0 -> 128 [style=dashed label="unnamed-namespace-definition"]
  0 -> 129 [style=dashed label="unqualified-id"]
  0 -> 130 [style=dashed label="using-declaration"]
  0 -> 131 [style=dashed label="using-directive"]
  0 -> 132 [style=dashed label="using-enum-declaration"]
  1 [label="State 1\n\l 13 alias-declaration: USING • IDENTIFIER EQ defining-type-id SEMICOLON\l 14                  | USING • IDENTIFIER attribute-specifier-seq EQ defining-type-id SEMICOLON\l1164 using-declaration: USING • using-declarator-list SEMICOLON\l1172 using-directive: USING • NAMESPACE namespace-name SEMICOLON\l1174                | USING • NAMESPACE nested-name-specifier namespace-name SEMICOLON\l1175 using-enum-declaration: USING • elaborated-enum-specifier SEMICOLON\l"]
  1 -> 133 [style=solid label="IDENTIFIER"]
  1 -> 9 [style=solid label="SCOPE"]
  1 -> 134 [style=solid label="DECLTYPE"]
  1 -> 135 [style=solid label="ENUM"]
  1 -> 136 [style=solid label="NAMESPACE"]
  1 -> 137 [style=solid label="TYPENAME"]
  1 -> 65 [style=dashed label="class-name"]
  1 -> 138 [style=dashed label="decltype-specifier"]
  1 -> 139 [style=dashed label="elaborated-enum-specifier"]
  1 -> 84 [style=dashed label="enum-name"]
  1 -> 99 [style=dashed label="namespace-alias"]
  1 -> 102 [style=dashed label="namespace-name"]
  1 -> 140 [style=dashed label="nested-name-specifier"]
  1 -> 141 [style=dashed label="simple-template-id"]
  1 -> 142 [style=dashed label="template-name"]
  1 -> 143 [style=dashed label="type-name"]
  1 -> 126 [style=dashed label="typedef-name"]
  1 -> 144 [style=dashed label="using-declarator"]
  1 -> 145 [style=dashed label="using-declarator-list"]
  2 [label="State 2\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l1140 unqualified-id: IDENTIFIER •\l"]
  2 -> "2R145" [style=solid]
 "2R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  2 -> "2R163d" [label="[DECLTYPE, AUTO]", style=solid]
 "2R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R163" [label="[LESS]", style=solid]
 "2R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  2 -> "2R294d" [label="[IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, COMMA, SCOPE, OPEN_SQUARE, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, GREATER, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "2R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R647d" [label="[SCOPE]", style=solid]
 "2R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R653d" [label="[SCOPE]", style=solid]
 "2R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R1052d" [label="[IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, COMMA, SCOPE, OPEN_SQUARE, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, LESS, GREATER, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "2R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R1110d" [label="[IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, COMMA, SCOPE, OPEN_SQUARE, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, GREATER, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "2R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R1140d" [label="[EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, COMMA, OPEN_SQUARE, OPEN_BRACE, AND_AND, LESS, GREATER, MULT]", style=solid]
 "2R1140d" [label="R1140", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R1140" [label="[PLUS, MINUS, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, CLOSE_SQUARE, COLON, CLOSE_BRACE, FINAL, SPACESHIP, QUERY, OR_OR, DEREF, DOT, EQ_EQ, NOT_EQ, XOR, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, REQUIRES, PLUS_PLUS, MINUS_MINUS, OVERRIDE]", style=solid]
 "2R1140" [label="R1140", fillcolor=3, shape=diamond, style=filled]
  3 [label="State 3\n\l272 empty-declaration: SEMICOLON •\l"]
  3 -> "3R272" [style=solid]
 "3R272" [label="R272", fillcolor=3, shape=diamond, style=filled]
  4 [label="State 4\n\l 15 alignment-specifier: ALIGNAS • OPEN_PAREN type-id CLOSE_PAREN\l 16                    | ALIGNAS • OPEN_PAREN type-id ELLIPSIS CLOSE_PAREN\l 17                    | ALIGNAS • OPEN_PAREN constant-expression CLOSE_PAREN\l 18                    | ALIGNAS • OPEN_PAREN constant-expression ELLIPSIS CLOSE_PAREN\l"]
  4 -> 146 [style=solid label="OPEN_PAREN"]
  5 [label="State 5\n\l728 noptr-declarator: OPEN_PAREN • ptr-declarator CLOSE_PAREN\l"]
  5 -> 147 [style=solid label="IDENTIFIER"]
  5 -> 5 [style=solid label="OPEN_PAREN"]
  5 -> 6 [style=solid label="ELLIPSIS"]
  5 -> 7 [style=solid label="AND"]
  5 -> 9 [style=solid label="SCOPE"]
  5 -> 16 [style=solid label="AND_AND"]
  5 -> 17 [style=solid label="OPERATOR"]
  5 -> 134 [style=solid label="DECLTYPE"]
  5 -> 31 [style=solid label="MULT"]
  5 -> 35 [style=solid label="COMPL"]
  5 -> 65 [style=dashed label="class-name"]
  5 -> 68 [style=dashed label="conversion-function-id"]
  5 -> 75 [style=dashed label="declarator-id"]
  5 -> 138 [style=dashed label="decltype-specifier"]
  5 -> 84 [style=dashed label="enum-name"]
  5 -> 93 [style=dashed label="id-expression"]
  5 -> 95 [style=dashed label="literal-operator-id"]
  5 -> 99 [style=dashed label="namespace-alias"]
  5 -> 102 [style=dashed label="namespace-name"]
  5 -> 148 [style=dashed label="nested-name-specifier"]
  5 -> 149 [style=dashed label="noptr-declarator"]
  5 -> 108 [style=dashed label="operator-function-id"]
  5 -> 150 [style=dashed label="ptr-declarator"]
  5 -> 111 [style=dashed label="ptr-operator"]
  5 -> 112 [style=dashed label="qualified-id"]
  5 -> 114 [style=dashed label="simple-template-id"]
  5 -> 120 [style=dashed label="template-id"]
  5 -> 142 [style=dashed label="template-name"]
  5 -> 143 [style=dashed label="type-name"]
  5 -> 126 [style=dashed label="typedef-name"]
  5 -> 129 [style=dashed label="unqualified-id"]
  6 [label="State 6\n\l228 declarator-id: ELLIPSIS • id-expression\l"]
  6 -> 147 [style=solid label="IDENTIFIER"]
  6 -> 9 [style=solid label="SCOPE"]
  6 -> 17 [style=solid label="OPERATOR"]
  6 -> 134 [style=solid label="DECLTYPE"]
  6 -> 35 [style=solid label="COMPL"]
  6 -> 65 [style=dashed label="class-name"]
  6 -> 68 [style=dashed label="conversion-function-id"]
  6 -> 138 [style=dashed label="decltype-specifier"]
  6 -> 84 [style=dashed label="enum-name"]
  6 -> 151 [style=dashed label="id-expression"]
  6 -> 95 [style=dashed label="literal-operator-id"]
  6 -> 99 [style=dashed label="namespace-alias"]
  6 -> 102 [style=dashed label="namespace-name"]
  6 -> 152 [style=dashed label="nested-name-specifier"]
  6 -> 108 [style=dashed label="operator-function-id"]
  6 -> 112 [style=dashed label="qualified-id"]
  6 -> 114 [style=dashed label="simple-template-id"]
  6 -> 120 [style=dashed label="template-id"]
  6 -> 142 [style=dashed label="template-name"]
  6 -> 143 [style=dashed label="type-name"]
  6 -> 126 [style=dashed label="typedef-name"]
  6 -> 129 [style=dashed label="unqualified-id"]
  7 [label="State 7\n\l897 ptr-operator: AND •\l898             | AND • attribute-specifier-seq\l"]
  7 -> 4 [style=solid label="ALIGNAS"]
  7 -> 10 [style=solid label="OPEN_SQUARE"]
  7 -> 57 [style=dashed label="alignment-specifier"]
  7 -> 60 [style=dashed label="attribute-specifier"]
  7 -> 153 [style=dashed label="attribute-specifier-seq"]
  7 -> "7R897d" [label="[ALIGNAS, OPEN_SQUARE]", style=solid]
 "7R897d" [label="R897", fillcolor=5, shape=diamond, style=filled]
  7 -> "7R897" [style=solid]
 "7R897" [label="R897", fillcolor=3, shape=diamond, style=filled]
  8 [label="State 8\n\l 22 asm-declaration: ASM • OPEN_PAREN string-literal CLOSE_PAREN SEMICOLON\l"]
  8 -> 154 [style=solid label="OPEN_PAREN"]
  9 [label="State 9\n\l655 nested-name-specifier: SCOPE •\l"]
  9 -> "9R655" [style=solid]
 "9R655" [label="R655", fillcolor=3, shape=diamond, style=filled]
  10 [label="State 10\n\l 50 attribute-specifier: OPEN_SQUARE • OPEN_SQUARE attribute-list CLOSE_SQUARE CLOSE_SQUARE\l 51                    | OPEN_SQUARE • OPEN_SQUARE attribute-using-prefix attribute-list CLOSE_SQUARE CLOSE_SQUARE\l"]
  10 -> 155 [style=solid label="OPEN_SQUARE"]
  11 [label="State 11\n\l407 function-specifier: VIRTUAL •\l"]
  11 -> "11R407" [style=solid]
 "11R407" [label="R407", fillcolor=3, shape=diamond, style=filled]
  12 [label="State 12\n\l142 class-key: CLASS •\l"]
  12 -> "12R142" [style=solid]
 "12R142" [label="R142", fillcolor=3, shape=diamond, style=filled]
  13 [label="State 13\n\l143 class-key: STRUCT •\l"]
  13 -> "13R143" [style=solid]
 "13R143" [label="R143", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l144 class-key: UNION •\l"]
  14 -> "14R144" [style=solid]
 "14R144" [label="R144", fillcolor=3, shape=diamond, style=filled]
  15 [label="State 15\n\l320 explicit-instantiation: TEMPLATE • declaration\l321 explicit-specialization: TEMPLATE • LESS GREATER declaration\l1045 template-head: TEMPLATE • LESS template-parameter-list GREATER\l1046              | TEMPLATE • LESS template-parameter-list GREATER requires-clause\l"]
  15 -> 1 [style=solid label="USING"]
  15 -> 2 [style=solid label="IDENTIFIER"]
  15 -> 3 [style=solid label="SEMICOLON"]
  15 -> 4 [style=solid label="ALIGNAS"]
  15 -> 5 [style=solid label="OPEN_PAREN"]
  15 -> 6 [style=solid label="ELLIPSIS"]
  15 -> 7 [style=solid label="AND"]
  15 -> 8 [style=solid label="ASM"]
  15 -> 9 [style=solid label="SCOPE"]
  15 -> 10 [style=solid label="OPEN_SQUARE"]
  15 -> 11 [style=solid label="VIRTUAL"]
  15 -> 12 [style=solid label="CLASS"]
  15 -> 13 [style=solid label="STRUCT"]
  15 -> 14 [style=solid label="UNION"]
  15 -> 15 [style=solid label="TEMPLATE"]
  15 -> 16 [style=solid label="AND_AND"]
  15 -> 17 [style=solid label="OPERATOR"]
  15 -> 18 [style=solid label="CONST"]
  15 -> 19 [style=solid label="VOLATILE"]
  15 -> 20 [style=solid label="FRIEND"]
  15 -> 21 [style=solid label="TYPEDEF"]
  15 -> 22 [style=solid label="CONSTEXPR"]
  15 -> 23 [style=solid label="CONSTEVAL"]
  15 -> 24 [style=solid label="CONSTINIT"]
  15 -> 25 [style=solid label="INLINE"]
  15 -> 26 [style=solid label="DECLTYPE"]
  15 -> 27 [style=solid label="ENUM"]
  15 -> 28 [style=solid label="EXTERN"]
  15 -> 156 [style=solid label="LESS"]
  15 -> 29 [style=solid label="EXPLICIT"]
  15 -> 157 [style=solid label="EXPORT"]
  15 -> 31 [style=solid label="MULT"]
  15 -> 33 [style=solid label="IMPORT"]
  15 -> 34 [style=solid label="NAMESPACE"]
  15 -> 35 [style=solid label="COMPL"]
  15 -> 36 [style=solid label="AUTO"]
  15 -> 37 [style=solid label="CHAR"]
  15 -> 38 [style=solid label="CHAR8_T"]
  15 -> 39 [style=solid label="CHAR16_T"]
  15 -> 40 [style=solid label="CHAR32_T"]
  15 -> 41 [style=solid label="WCHAR_T"]
  15 -> 42 [style=solid label="BOOL"]
  15 -> 43 [style=solid label="SHORT"]
  15 -> 44 [style=solid label="INT"]
  15 -> 45 [style=solid label="LONG"]
  15 -> 46 [style=solid label="SIGNED"]
  15 -> 47 [style=solid label="UNSIGNED"]
  15 -> 48 [style=solid label="FLOAT"]
  15 -> 49 [style=solid label="DOUBLE"]
  15 -> 50 [style=solid label="VOID"]
  15 -> 51 [style=solid label="STATIC_ASSERT"]
  15 -> 52 [style=solid label="STATIC"]
  15 -> 53 [style=solid label="THREAD_LOCAL"]
  15 -> 54 [style=solid label="MUTABLE"]
  15 -> 55 [style=solid label="TYPENAME"]
  15 -> 56 [style=dashed label="alias-declaration"]
  15 -> 57 [style=dashed label="alignment-specifier"]
  15 -> 58 [style=dashed label="asm-declaration"]
  15 -> 59 [style=dashed label="attribute-declaration"]
  15 -> 60 [style=dashed label="attribute-specifier"]
  15 -> 61 [style=dashed label="attribute-specifier-seq"]
  15 -> 62 [style=dashed label="block-declaration"]
  15 -> 63 [style=dashed label="class-head"]
  15 -> 64 [style=dashed label="class-key"]
  15 -> 65 [style=dashed label="class-name"]
  15 -> 66 [style=dashed label="class-specifier"]
  15 -> 67 [style=dashed label="concept-name"]
  15 -> 68 [style=dashed label="conversion-function-id"]
  15 -> 69 [style=dashed label="cv-qualifier"]
  15 -> 70 [style=dashed label="decl-specifier"]
  15 -> 71 [style=dashed label="decl-specifier-seq"]
  15 -> 158 [style=dashed label="declaration"]
  15 -> 74 [style=dashed label="declarator"]
  15 -> 75 [style=dashed label="declarator-id"]
  15 -> 76 [style=dashed label="decltype-specifier"]
  15 -> 77 [style=dashed label="deduction-guide"]
  15 -> 78 [style=dashed label="defining-type-specifier"]
  15 -> 79 [style=dashed label="elaborated-enum-specifier"]
  15 -> 80 [style=dashed label="elaborated-type-specifier"]
  15 -> 81 [style=dashed label="empty-declaration"]
  15 -> 82 [style=dashed label="enum-head"]
  15 -> 83 [style=dashed label="enum-key"]
  15 -> 84 [style=dashed label="enum-name"]
  15 -> 85 [style=dashed label="enum-specifier"]
  15 -> 86 [style=dashed label="explicit-instantiation"]
  15 -> 87 [style=dashed label="explicit-specialization"]
  15 -> 88 [style=dashed label="explicit-specifier"]
  15 -> 89 [style=dashed label="export-declaration"]
  15 -> 90 [style=dashed label="function-definition"]
  15 -> 91 [style=dashed label="function-specifier"]
  15 -> 93 [style=dashed label="id-expression"]
  15 -> 94 [style=dashed label="linkage-specification"]
  15 -> 95 [style=dashed label="literal-operator-id"]
  15 -> 97 [style=dashed label="module-import-declaration"]
  15 -> 98 [style=dashed label="named-namespace-definition"]
  15 -> 99 [style=dashed label="namespace-alias"]
  15 -> 100 [style=dashed label="namespace-alias-definition"]
  15 -> 101 [style=dashed label="namespace-definition"]
  15 -> 102 [style=dashed label="namespace-name"]
  15 -> 103 [style=dashed label="nested-name-specifier"]
  15 -> 104 [style=dashed label="nested-namespace-definition"]
  15 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  15 -> 106 [style=dashed label="noptr-declarator"]
  15 -> 107 [style=dashed label="opaque-enum-declaration"]
  15 -> 108 [style=dashed label="operator-function-id"]
  15 -> 109 [style=dashed label="placeholder-type-specifier"]
  15 -> 110 [style=dashed label="ptr-declarator"]
  15 -> 111 [style=dashed label="ptr-operator"]
  15 -> 112 [style=dashed label="qualified-id"]
  15 -> 113 [style=dashed label="simple-declaration"]
  15 -> 114 [style=dashed label="simple-template-id"]
  15 -> 115 [style=dashed label="simple-type-specifier"]
  15 -> 116 [style=dashed label="static_assert-declaration"]
  15 -> 117 [style=dashed label="storage-class-specifier"]
  15 -> 118 [style=dashed label="template-declaration"]
  15 -> 119 [style=dashed label="template-head"]
  15 -> 120 [style=dashed label="template-id"]
  15 -> 121 [style=dashed label="template-name"]
  15 -> 123 [style=dashed label="type-constraint"]
  15 -> 124 [style=dashed label="type-name"]
  15 -> 125 [style=dashed label="type-specifier"]
  15 -> 126 [style=dashed label="typedef-name"]
  15 -> 127 [style=dashed label="typename-specifier"]
  15 -> 128 [style=dashed label="unnamed-namespace-definition"]
  15 -> 129 [style=dashed label="unqualified-id"]
  15 -> 130 [style=dashed label="using-declaration"]
  15 -> 131 [style=dashed label="using-directive"]
  15 -> 132 [style=dashed label="using-enum-declaration"]
  16 [label="State 16\n\l899 ptr-operator: AND_AND •\l900             | AND_AND • attribute-specifier-seq\l"]
  16 -> 4 [style=solid label="ALIGNAS"]
  16 -> 10 [style=solid label="OPEN_SQUARE"]
  16 -> 57 [style=dashed label="alignment-specifier"]
  16 -> 60 [style=dashed label="attribute-specifier"]
  16 -> 159 [style=dashed label="attribute-specifier-seq"]
  16 -> "16R899d" [label="[ALIGNAS, OPEN_SQUARE]", style=solid]
 "16R899d" [label="R899", fillcolor=5, shape=diamond, style=filled]
  16 -> "16R899" [style=solid]
 "16R899" [label="R899", fillcolor=3, shape=diamond, style=filled]
  17 [label="State 17\n\l179 conversion-function-id: OPERATOR • conversion-type-id\l561 literal-operator-id: OPERATOR • string-literal IDENTIFIER\l562                    | OPERATOR • user-defined-string-literal\l755 operator-function-id: OPERATOR • overloadable-operator\l756                     | OPERATOR • overloadable-operator LESS GREATER\l757                     | OPERATOR • overloadable-operator LESS template-argument-list GREATER\l"]
  17 -> 160 [style=solid label="PLUS"]
  17 -> 161 [style=solid label="MINUS"]
  17 -> 162 [style=solid label="IDENTIFIER"]
  17 -> 163 [style=solid label="EQ"]
  17 -> 164 [style=solid label="OPEN_PAREN"]
  17 -> 165 [style=solid label="AND"]
  17 -> 166 [style=solid label="MULT_EQ"]
  17 -> 167 [style=solid label="DIV_EQ"]
  17 -> 168 [style=solid label="MOD_EQ"]
  17 -> 169 [style=solid label="PLUS_EQ"]
  17 -> 170 [style=solid label="MINUS_EQ"]
  17 -> 171 [style=solid label="RSHIFT_EQ"]
  17 -> 172 [style=solid label="LSHIFT_EQ"]
  17 -> 173 [style=solid label="AND_EQ"]
  17 -> 174 [style=solid label="XOR_EQ"]
  17 -> 175 [style=solid label="OR_EQ"]
  17 -> 176 [style=solid label="COMMA"]
  17 -> 9 [style=solid label="SCOPE"]
  17 -> 177 [style=solid label="OPEN_SQUARE"]
  17 -> 178 [style=solid label="CO_AWAIT"]
  17 -> 12 [style=solid label="CLASS"]
  17 -> 13 [style=solid label="STRUCT"]
  17 -> 14 [style=solid label="UNION"]
  17 -> 179 [style=solid label="SPACESHIP"]
  17 -> 180 [style=solid label="AND_AND"]
  17 -> 181 [style=solid label="OR_OR"]
  17 -> 18 [style=solid label="CONST"]
  17 -> 19 [style=solid label="VOLATILE"]
  17 -> 26 [style=solid label="DECLTYPE"]
  17 -> 182 [style=solid label="DEREF"]
  17 -> 183 [style=solid label="DELETE"]
  17 -> 135 [style=solid label="ENUM"]
  17 -> 184 [style=solid label="UNICODE_8"]
  17 -> 185 [style=solid label="EQ_EQ"]
  17 -> 186 [style=solid label="NOT_EQ"]
  17 -> 187 [style=solid label="XOR"]
  17 -> 188 [style=solid label="LESS"]
  17 -> 189 [style=solid label="GREATER"]
  17 -> 190 [style=solid label="MULT"]
  17 -> 191 [style=solid label="DIV"]
  17 -> 192 [style=solid label="MOD"]
  17 -> 193 [style=solid label="OR"]
  17 -> 194 [style=solid label="LSHIFT"]
  17 -> 195 [style=solid label="RSHIFT"]
  17 -> 196 [style=solid label="LESS_EQ"]
  17 -> 197 [style=solid label="GREATER_EQ"]
  17 -> 198 [style=solid label="DEREF_STAR"]
  17 -> 199 [style=solid label="DOUBLE_QUOTE"]
  17 -> 200 [style=solid label="NEW"]
  17 -> 201 [style=solid label="COMPL"]
  17 -> 202 [style=solid label="NOT"]
  17 -> 203 [style=solid label="PLUS_PLUS"]
  17 -> 204 [style=solid label="MINUS_MINUS"]
  17 -> 36 [style=solid label="AUTO"]
  17 -> 37 [style=solid label="CHAR"]
  17 -> 38 [style=solid label="CHAR8_T"]
  17 -> 39 [style=solid label="CHAR16_T"]
  17 -> 40 [style=solid label="CHAR32_T"]
  17 -> 41 [style=solid label="WCHAR_T"]
  17 -> 42 [style=solid label="BOOL"]
  17 -> 43 [style=solid label="SHORT"]
  17 -> 44 [style=solid label="INT"]
  17 -> 45 [style=solid label="LONG"]
  17 -> 46 [style=solid label="SIGNED"]
  17 -> 47 [style=solid label="UNSIGNED"]
  17 -> 48 [style=solid label="FLOAT"]
  17 -> 49 [style=solid label="DOUBLE"]
  17 -> 50 [style=solid label="VOID"]
  17 -> 55 [style=solid label="TYPENAME"]
  17 -> 205 [style=solid label="'u'"]
  17 -> 206 [style=solid label="'U'"]
  17 -> 207 [style=solid label="'L'"]
  17 -> 208 [style=solid label="'R'"]
  17 -> 209 [style=dashed label="class-key"]
  17 -> 65 [style=dashed label="class-name"]
  17 -> 67 [style=dashed label="concept-name"]
  17 -> 210 [style=dashed label="conversion-type-id"]
  17 -> 69 [style=dashed label="cv-qualifier"]
  17 -> 76 [style=dashed label="decltype-specifier"]
  17 -> 79 [style=dashed label="elaborated-enum-specifier"]
  17 -> 80 [style=dashed label="elaborated-type-specifier"]
  17 -> 211 [style=dashed label="encoding-prefix"]
  17 -> 84 [style=dashed label="enum-name"]
  17 -> 99 [style=dashed label="namespace-alias"]
  17 -> 102 [style=dashed label="namespace-name"]
  17 -> 212 [style=dashed label="nested-name-specifier"]
  17 -> 213 [style=dashed label="overloadable-operator"]
  17 -> 109 [style=dashed label="placeholder-type-specifier"]
  17 -> 141 [style=dashed label="simple-template-id"]
  17 -> 115 [style=dashed label="simple-type-specifier"]
  17 -> 214 [style=dashed label="string-literal"]
  17 -> 215 [style=dashed label="template-name"]
  17 -> 123 [style=dashed label="type-constraint"]
  17 -> 124 [style=dashed label="type-name"]
  17 -> 216 [style=dashed label="type-specifier"]
  17 -> 217 [style=dashed label="type-specifier-seq"]
  17 -> 126 [style=dashed label="typedef-name"]
  17 -> 127 [style=dashed label="typename-specifier"]
  17 -> 218 [style=dashed label="user-defined-string-literal"]
  18 [label="State 18\n\l185 cv-qualifier: CONST •\l"]
  18 -> "18R185" [style=solid]
 "18R185" [label="R185", fillcolor=3, shape=diamond, style=filled]
  19 [label="State 19\n\l186 cv-qualifier: VOLATILE •\l"]
  19 -> "19R186" [style=solid]
 "19R186" [label="R186", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l201 decl-specifier: FRIEND •\l"]
  20 -> "20R201" [style=solid]
 "20R201" [label="R201", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l202 decl-specifier: TYPEDEF •\l"]
  21 -> "21R202" [style=solid]
 "21R202" [label="R202", fillcolor=3, shape=diamond, style=filled]
  22 [label="State 22\n\l203 decl-specifier: CONSTEXPR •\l"]
  22 -> "22R203" [style=solid]
 "22R203" [label="R203", fillcolor=3, shape=diamond, style=filled]
  23 [label="State 23\n\l204 decl-specifier: CONSTEVAL •\l"]
  23 -> "23R204" [style=solid]
 "23R204" [label="R204", fillcolor=3, shape=diamond, style=filled]
  24 [label="State 24\n\l205 decl-specifier: CONSTINIT •\l"]
  24 -> "24R205" [style=solid]
 "24R205" [label="R205", fillcolor=3, shape=diamond, style=filled]
  25 [label="State 25\n\l206 decl-specifier: INLINE •\l643 named-namespace-definition: INLINE • NAMESPACE IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l645                           | INLINE • NAMESPACE attribute-specifier-seq IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l1136 unnamed-namespace-definition: INLINE • NAMESPACE OPEN_BRACE namespace-body CLOSE_BRACE\l1138                             | INLINE • NAMESPACE attribute-specifier-seq OPEN_BRACE namespace-body CLOSE_BRACE\l"]
  25 -> 219 [style=solid label="NAMESPACE"]
  25 -> "25R206" [style=solid]
 "25R206" [label="R206", fillcolor=3, shape=diamond, style=filled]
  26 [label="State 26\n\l230 decltype-specifier: DECLTYPE • OPEN_PAREN expression CLOSE_PAREN\l851 placeholder-type-specifier: DECLTYPE • OPEN_PAREN AUTO CLOSE_PAREN\l"]
  26 -> 220 [style=solid label="OPEN_PAREN"]
  27 [label="State 27\n\l262 elaborated-enum-specifier: ENUM • IDENTIFIER\l263                          | ENUM • nested-name-specifier IDENTIFIER\l291 enum-key: ENUM •\l292         | ENUM • CLASS\l293         | ENUM • STRUCT\l"]
  27 -> 221 [style=solid label="IDENTIFIER"]
  27 -> 9 [style=solid label="SCOPE"]
  27 -> 222 [style=solid label="CLASS"]
  27 -> 223 [style=solid label="STRUCT"]
  27 -> 134 [style=solid label="DECLTYPE"]
  27 -> 65 [style=dashed label="class-name"]
  27 -> 138 [style=dashed label="decltype-specifier"]
  27 -> 84 [style=dashed label="enum-name"]
  27 -> 99 [style=dashed label="namespace-alias"]
  27 -> 102 [style=dashed label="namespace-name"]
  27 -> 224 [style=dashed label="nested-name-specifier"]
  27 -> 141 [style=dashed label="simple-template-id"]
  27 -> 142 [style=dashed label="template-name"]
  27 -> 143 [style=dashed label="type-name"]
  27 -> 126 [style=dashed label="typedef-name"]
  27 -> "27R291d" [label="[IDENTIFIER, SCOPE, DECLTYPE]", style=solid]
 "27R291d" [label="R291", fillcolor=5, shape=diamond, style=filled]
  27 -> "27R291" [style=solid]
 "27R291" [label="R291", fillcolor=3, shape=diamond, style=filled]
  28 [label="State 28\n\l319 explicit-instantiation: EXTERN • TEMPLATE declaration\l551 linkage-specification: EXTERN • string-literal OPEN_BRACE CLOSE_BRACE\l552                      | EXTERN • string-literal OPEN_BRACE declaration-seq CLOSE_BRACE\l553                      | EXTERN • string-literal declaration\l1028 storage-class-specifier: EXTERN •\l"]
  28 -> 225 [style=solid label="TEMPLATE"]
  28 -> 184 [style=solid label="UNICODE_8"]
  28 -> 199 [style=solid label="DOUBLE_QUOTE"]
  28 -> 205 [style=solid label="'u'"]
  28 -> 206 [style=solid label="'U'"]
  28 -> 207 [style=solid label="'L'"]
  28 -> 208 [style=solid label="'R'"]
  28 -> 211 [style=dashed label="encoding-prefix"]
  28 -> 226 [style=dashed label="string-literal"]
  28 -> "28R1028" [style=solid]
 "28R1028" [label="R1028", fillcolor=3, shape=diamond, style=filled]
  29 [label="State 29\n\l322 explicit-specifier: EXPLICIT • OPEN_PAREN constant-expression CLOSE_PAREN\l323                   | EXPLICIT •\l"]
  29 -> 227 [style=solid label="OPEN_PAREN"]
  29 -> "29R323d" [label="[OPEN_PAREN]", style=solid]
 "29R323d" [label="R323", fillcolor=5, shape=diamond, style=filled]
  29 -> "29R323" [style=solid]
 "29R323" [label="R323", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l328 export-declaration: EXPORT • declaration\l329                   | EXPORT • OPEN_BRACE CLOSE_BRACE\l330                   | EXPORT • OPEN_BRACE declaration-seq CLOSE_BRACE\l331                   | EXPORT • module-import-declaration\l619 module-declaration: EXPORT • MODULE module-name SEMICOLON\l621                   | EXPORT • MODULE module-name module-partition SEMICOLON\l623                   | EXPORT • MODULE module-name attribute-specifier-seq SEMICOLON\l625                   | EXPORT • MODULE module-name module-partition attribute-specifier-seq SEMICOLON\l"]
  30 -> 1 [style=solid label="USING"]
  30 -> 2 [style=solid label="IDENTIFIER"]
  30 -> 3 [style=solid label="SEMICOLON"]
  30 -> 4 [style=solid label="ALIGNAS"]
  30 -> 5 [style=solid label="OPEN_PAREN"]
  30 -> 6 [style=solid label="ELLIPSIS"]
  30 -> 7 [style=solid label="AND"]
  30 -> 8 [style=solid label="ASM"]
  30 -> 9 [style=solid label="SCOPE"]
  30 -> 10 [style=solid label="OPEN_SQUARE"]
  30 -> 228 [style=solid label="OPEN_BRACE"]
  30 -> 11 [style=solid label="VIRTUAL"]
  30 -> 12 [style=solid label="CLASS"]
  30 -> 13 [style=solid label="STRUCT"]
  30 -> 14 [style=solid label="UNION"]
  30 -> 15 [style=solid label="TEMPLATE"]
  30 -> 16 [style=solid label="AND_AND"]
  30 -> 17 [style=solid label="OPERATOR"]
  30 -> 18 [style=solid label="CONST"]
  30 -> 19 [style=solid label="VOLATILE"]
  30 -> 20 [style=solid label="FRIEND"]
  30 -> 21 [style=solid label="TYPEDEF"]
  30 -> 22 [style=solid label="CONSTEXPR"]
  30 -> 23 [style=solid label="CONSTEVAL"]
  30 -> 24 [style=solid label="CONSTINIT"]
  30 -> 25 [style=solid label="INLINE"]
  30 -> 26 [style=solid label="DECLTYPE"]
  30 -> 27 [style=solid label="ENUM"]
  30 -> 28 [style=solid label="EXTERN"]
  30 -> 29 [style=solid label="EXPLICIT"]
  30 -> 157 [style=solid label="EXPORT"]
  30 -> 31 [style=solid label="MULT"]
  30 -> 229 [style=solid label="MODULE"]
  30 -> 33 [style=solid label="IMPORT"]
  30 -> 34 [style=solid label="NAMESPACE"]
  30 -> 35 [style=solid label="COMPL"]
  30 -> 36 [style=solid label="AUTO"]
  30 -> 37 [style=solid label="CHAR"]
  30 -> 38 [style=solid label="CHAR8_T"]
  30 -> 39 [style=solid label="CHAR16_T"]
  30 -> 40 [style=solid label="CHAR32_T"]
  30 -> 41 [style=solid label="WCHAR_T"]
  30 -> 42 [style=solid label="BOOL"]
  30 -> 43 [style=solid label="SHORT"]
  30 -> 44 [style=solid label="INT"]
  30 -> 45 [style=solid label="LONG"]
  30 -> 46 [style=solid label="SIGNED"]
  30 -> 47 [style=solid label="UNSIGNED"]
  30 -> 48 [style=solid label="FLOAT"]
  30 -> 49 [style=solid label="DOUBLE"]
  30 -> 50 [style=solid label="VOID"]
  30 -> 51 [style=solid label="STATIC_ASSERT"]
  30 -> 52 [style=solid label="STATIC"]
  30 -> 53 [style=solid label="THREAD_LOCAL"]
  30 -> 54 [style=solid label="MUTABLE"]
  30 -> 55 [style=solid label="TYPENAME"]
  30 -> 56 [style=dashed label="alias-declaration"]
  30 -> 57 [style=dashed label="alignment-specifier"]
  30 -> 58 [style=dashed label="asm-declaration"]
  30 -> 59 [style=dashed label="attribute-declaration"]
  30 -> 60 [style=dashed label="attribute-specifier"]
  30 -> 61 [style=dashed label="attribute-specifier-seq"]
  30 -> 62 [style=dashed label="block-declaration"]
  30 -> 63 [style=dashed label="class-head"]
  30 -> 64 [style=dashed label="class-key"]
  30 -> 65 [style=dashed label="class-name"]
  30 -> 66 [style=dashed label="class-specifier"]
  30 -> 67 [style=dashed label="concept-name"]
  30 -> 68 [style=dashed label="conversion-function-id"]
  30 -> 69 [style=dashed label="cv-qualifier"]
  30 -> 70 [style=dashed label="decl-specifier"]
  30 -> 71 [style=dashed label="decl-specifier-seq"]
  30 -> 230 [style=dashed label="declaration"]
  30 -> 74 [style=dashed label="declarator"]
  30 -> 75 [style=dashed label="declarator-id"]
  30 -> 76 [style=dashed label="decltype-specifier"]
  30 -> 77 [style=dashed label="deduction-guide"]
  30 -> 78 [style=dashed label="defining-type-specifier"]
  30 -> 79 [style=dashed label="elaborated-enum-specifier"]
  30 -> 80 [style=dashed label="elaborated-type-specifier"]
  30 -> 81 [style=dashed label="empty-declaration"]
  30 -> 82 [style=dashed label="enum-head"]
  30 -> 83 [style=dashed label="enum-key"]
  30 -> 84 [style=dashed label="enum-name"]
  30 -> 85 [style=dashed label="enum-specifier"]
  30 -> 86 [style=dashed label="explicit-instantiation"]
  30 -> 87 [style=dashed label="explicit-specialization"]
  30 -> 88 [style=dashed label="explicit-specifier"]
  30 -> 89 [style=dashed label="export-declaration"]
  30 -> 90 [style=dashed label="function-definition"]
  30 -> 91 [style=dashed label="function-specifier"]
  30 -> 93 [style=dashed label="id-expression"]
  30 -> 94 [style=dashed label="linkage-specification"]
  30 -> 95 [style=dashed label="literal-operator-id"]
  30 -> 231 [style=dashed label="module-import-declaration"]
  30 -> 98 [style=dashed label="named-namespace-definition"]
  30 -> 99 [style=dashed label="namespace-alias"]
  30 -> 100 [style=dashed label="namespace-alias-definition"]
  30 -> 101 [style=dashed label="namespace-definition"]
  30 -> 102 [style=dashed label="namespace-name"]
  30 -> 103 [style=dashed label="nested-name-specifier"]
  30 -> 104 [style=dashed label="nested-namespace-definition"]
  30 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  30 -> 106 [style=dashed label="noptr-declarator"]
  30 -> 107 [style=dashed label="opaque-enum-declaration"]
  30 -> 108 [style=dashed label="operator-function-id"]
  30 -> 109 [style=dashed label="placeholder-type-specifier"]
  30 -> 110 [style=dashed label="ptr-declarator"]
  30 -> 111 [style=dashed label="ptr-operator"]
  30 -> 112 [style=dashed label="qualified-id"]
  30 -> 113 [style=dashed label="simple-declaration"]
  30 -> 114 [style=dashed label="simple-template-id"]
  30 -> 115 [style=dashed label="simple-type-specifier"]
  30 -> 116 [style=dashed label="static_assert-declaration"]
  30 -> 117 [style=dashed label="storage-class-specifier"]
  30 -> 118 [style=dashed label="template-declaration"]
  30 -> 119 [style=dashed label="template-head"]
  30 -> 120 [style=dashed label="template-id"]
  30 -> 121 [style=dashed label="template-name"]
  30 -> 123 [style=dashed label="type-constraint"]
  30 -> 124 [style=dashed label="type-name"]
  30 -> 125 [style=dashed label="type-specifier"]
  30 -> 126 [style=dashed label="typedef-name"]
  30 -> 127 [style=dashed label="typename-specifier"]
  30 -> 128 [style=dashed label="unnamed-namespace-definition"]
  30 -> 129 [style=dashed label="unqualified-id"]
  30 -> 130 [style=dashed label="using-declaration"]
  30 -> 131 [style=dashed label="using-directive"]
  30 -> 132 [style=dashed label="using-enum-declaration"]
  31 [label="State 31\n\l893 ptr-operator: MULT •\l894             | MULT • attribute-specifier-seq\l895             | MULT • cv-qualifier-seq\l896             | MULT • attribute-specifier-seq cv-qualifier-seq\l"]
  31 -> 4 [style=solid label="ALIGNAS"]
  31 -> 10 [style=solid label="OPEN_SQUARE"]
  31 -> 18 [style=solid label="CONST"]
  31 -> 19 [style=solid label="VOLATILE"]
  31 -> 57 [style=dashed label="alignment-specifier"]
  31 -> 60 [style=dashed label="attribute-specifier"]
  31 -> 232 [style=dashed label="attribute-specifier-seq"]
  31 -> 233 [style=dashed label="cv-qualifier"]
  31 -> 234 [style=dashed label="cv-qualifier-seq"]
  31 -> "31R893d" [label="[ALIGNAS, OPEN_SQUARE, CONST, VOLATILE]", style=solid]
 "31R893d" [label="R893", fillcolor=5, shape=diamond, style=filled]
  31 -> "31R893" [style=solid]
 "31R893" [label="R893", fillcolor=3, shape=diamond, style=filled]
  32 [label="State 32\n\l411 global-module-fragment: MODULE • SEMICOLON\l412                       | MODULE • SEMICOLON declaration-seq\l620 module-declaration: MODULE • module-name SEMICOLON\l622                   | MODULE • module-name module-partition SEMICOLON\l624                   | MODULE • module-name attribute-specifier-seq SEMICOLON\l626                   | MODULE • module-name module-partition attribute-specifier-seq SEMICOLON\l"]
  32 -> 235 [style=solid label="IDENTIFIER"]
  32 -> 236 [style=solid label="SEMICOLON"]
  32 -> 237 [style=dashed label="module-name"]
  32 -> 238 [style=dashed label="module-name-qualifier"]
  33 [label="State 33\n\l627 module-import-declaration: IMPORT • module-name SEMICOLON\l628                          | IMPORT • module-name attribute-specifier-seq SEMICOLON\l629                          | IMPORT • module-partition SEMICOLON\l630                          | IMPORT • module-partition attribute-specifier-seq SEMICOLON\l631                          | IMPORT • header-name SEMICOLON\l632                          | IMPORT • header-name attribute-specifier-seq SEMICOLON\l"]
  33 -> 235 [style=solid label="IDENTIFIER"]
  33 -> 239 [style=solid label="COLON"]
  33 -> 240 [style=solid label="LESS"]
  33 -> 241 [style=solid label="DOUBLE_QUOTE"]
  33 -> 242 [style=dashed label="header-name"]
  33 -> 243 [style=dashed label="module-name"]
  33 -> 238 [style=dashed label="module-name-qualifier"]
  33 -> 244 [style=dashed label="module-partition"]
  34 [label="State 34\n\l644 named-namespace-definition: NAMESPACE • IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l646                           | NAMESPACE • attribute-specifier-seq IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l648 namespace-alias-definition: NAMESPACE • IDENTIFIER EQ qualified-namespace-specifier SEMICOLON\l662 nested-namespace-definition: NAMESPACE • enclosing-namespace-specifier SCOPE IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l663                            | NAMESPACE • enclosing-namespace-specifier SCOPE INLINE IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l1137 unnamed-namespace-definition: NAMESPACE • OPEN_BRACE namespace-body CLOSE_BRACE\l1139                             | NAMESPACE • attribute-specifier-seq OPEN_BRACE namespace-body CLOSE_BRACE\l"]
  34 -> 245 [style=solid label="IDENTIFIER"]
  34 -> 4 [style=solid label="ALIGNAS"]
  34 -> 10 [style=solid label="OPEN_SQUARE"]
  34 -> 246 [style=solid label="OPEN_BRACE"]
  34 -> 57 [style=dashed label="alignment-specifier"]
  34 -> 60 [style=dashed label="attribute-specifier"]
  34 -> 247 [style=dashed label="attribute-specifier-seq"]
  34 -> 248 [style=dashed label="enclosing-namespace-specifier"]
  35 [label="State 35\n\l1144 unqualified-id: COMPL • type-name\l1145               | COMPL • decltype-specifier\l"]
  35 -> 249 [style=solid label="IDENTIFIER"]
  35 -> 134 [style=solid label="DECLTYPE"]
  35 -> 65 [style=dashed label="class-name"]
  35 -> 250 [style=dashed label="decltype-specifier"]
  35 -> 84 [style=dashed label="enum-name"]
  35 -> 141 [style=dashed label="simple-template-id"]
  35 -> 142 [style=dashed label="template-name"]
  35 -> 251 [style=dashed label="type-name"]
  35 -> 126 [style=dashed label="typedef-name"]
  36 [label="State 36\n\l849 placeholder-type-specifier: AUTO •\l"]
  36 -> "36R849" [style=solid]
 "36R849" [label="R849", fillcolor=3, shape=diamond, style=filled]
  37 [label="State 37\n\l992 simple-type-specifier: CHAR •\l"]
  37 -> "37R992" [style=solid]
 "37R992" [label="R992", fillcolor=3, shape=diamond, style=filled]
  38 [label="State 38\n\l993 simple-type-specifier: CHAR8_T •\l"]
  38 -> "38R993" [style=solid]
 "38R993" [label="R993", fillcolor=3, shape=diamond, style=filled]
  39 [label="State 39\n\l994 simple-type-specifier: CHAR16_T •\l"]
  39 -> "39R994" [style=solid]
 "39R994" [label="R994", fillcolor=3, shape=diamond, style=filled]
  40 [label="State 40\n\l995 simple-type-specifier: CHAR32_T •\l"]
  40 -> "40R995" [style=solid]
 "40R995" [label="R995", fillcolor=3, shape=diamond, style=filled]
  41 [label="State 41\n\l996 simple-type-specifier: WCHAR_T •\l"]
  41 -> "41R996" [style=solid]
 "41R996" [label="R996", fillcolor=3, shape=diamond, style=filled]
  42 [label="State 42\n\l997 simple-type-specifier: BOOL •\l"]
  42 -> "42R997" [style=solid]
 "42R997" [label="R997", fillcolor=3, shape=diamond, style=filled]
  43 [label="State 43\n\l998 simple-type-specifier: SHORT •\l"]
  43 -> "43R998" [style=solid]
 "43R998" [label="R998", fillcolor=3, shape=diamond, style=filled]
  44 [label="State 44\n\l999 simple-type-specifier: INT •\l"]
  44 -> "44R999" [style=solid]
 "44R999" [label="R999", fillcolor=3, shape=diamond, style=filled]
  45 [label="State 45\n\l1000 simple-type-specifier: LONG •\l"]
  45 -> "45R1000" [style=solid]
 "45R1000" [label="R1000", fillcolor=3, shape=diamond, style=filled]
  46 [label="State 46\n\l1001 simple-type-specifier: SIGNED •\l"]
  46 -> "46R1001" [style=solid]
 "46R1001" [label="R1001", fillcolor=3, shape=diamond, style=filled]
  47 [label="State 47\n\l1002 simple-type-specifier: UNSIGNED •\l"]
  47 -> "47R1002" [style=solid]
 "47R1002" [label="R1002", fillcolor=3, shape=diamond, style=filled]
  48 [label="State 48\n\l1003 simple-type-specifier: FLOAT •\l"]
  48 -> "48R1003" [style=solid]
 "48R1003" [label="R1003", fillcolor=3, shape=diamond, style=filled]
  49 [label="State 49\n\l1004 simple-type-specifier: DOUBLE •\l"]
  49 -> "49R1004" [style=solid]
 "49R1004" [label="R1004", fillcolor=3, shape=diamond, style=filled]
  50 [label="State 50\n\l1005 simple-type-specifier: VOID •\l"]
  50 -> "50R1005" [style=solid]
 "50R1005" [label="R1005", fillcolor=3, shape=diamond, style=filled]
  51 [label="State 51\n\l1024 static_assert-declaration: STATIC_ASSERT • OPEN_PAREN constant-expression CLOSE_PAREN SEMICOLON\l1025                          | STATIC_ASSERT • OPEN_PAREN constant-expression COMMA string-literal CLOSE_PAREN SEMICOLON\l"]
  51 -> 252 [style=solid label="OPEN_PAREN"]
  52 [label="State 52\n\l1026 storage-class-specifier: STATIC •\l"]
  52 -> "52R1026" [style=solid]
 "52R1026" [label="R1026", fillcolor=3, shape=diamond, style=filled]
  53 [label="State 53\n\l1027 storage-class-specifier: THREAD_LOCAL •\l"]
  53 -> "53R1027" [style=solid]
 "53R1027" [label="R1027", fillcolor=3, shape=diamond, style=filled]
  54 [label="State 54\n\l1029 storage-class-specifier: MUTABLE •\l"]
  54 -> "54R1029" [style=solid]
 "54R1029" [label="R1029", fillcolor=3, shape=diamond, style=filled]
  55 [label="State 55\n\l1112 typename-specifier: TYPENAME • nested-name-specifier IDENTIFIER\l1113                   | TYPENAME • nested-name-specifier simple-template-id\l1114                   | TYPENAME • nested-name-specifier TEMPLATE simple-template-id\l"]
  55 -> 253 [style=solid label="IDENTIFIER"]
  55 -> 9 [style=solid label="SCOPE"]
  55 -> 134 [style=solid label="DECLTYPE"]
  55 -> 65 [style=dashed label="class-name"]
  55 -> 138 [style=dashed label="decltype-specifier"]
  55 -> 84 [style=dashed label="enum-name"]
  55 -> 99 [style=dashed label="namespace-alias"]
  55 -> 102 [style=dashed label="namespace-name"]
  55 -> 254 [style=dashed label="nested-name-specifier"]
  55 -> 141 [style=dashed label="simple-template-id"]
  55 -> 142 [style=dashed label="template-name"]
  55 -> 143 [style=dashed label="type-name"]
  55 -> 126 [style=dashed label="typedef-name"]
  56 [label="State 56\n\l102 block-declaration: alias-declaration •\l"]
  56 -> "56R102" [style=solid]
 "56R102" [label="R102", fillcolor=3, shape=diamond, style=filled]
  57 [label="State 57\n\l 52 attribute-specifier: alignment-specifier •\l"]
  57 -> "57R52" [style=solid]
 "57R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  58 [label="State 58\n\l 96 block-declaration: asm-declaration •\l"]
  58 -> "58R96" [style=solid]
 "58R96" [label="R96", fillcolor=3, shape=diamond, style=filled]
  59 [label="State 59\n\l221 declaration: attribute-declaration •\l"]
  59 -> "59R221" [style=solid]
 "59R221" [label="R221", fillcolor=3, shape=diamond, style=filled]
  60 [label="State 60\n\l 54 attribute-specifier-seq: attribute-specifier •\l"]
  60 -> "60R54" [style=solid]
 "60R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  61 [label="State 61\n\l 21 asm-declaration: attribute-specifier-seq • ASM OPEN_PAREN string-literal CLOSE_PAREN SEMICOLON\l 42 attribute-declaration: attribute-specifier-seq • SEMICOLON\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l395 function-definition: attribute-specifier-seq • declarator function-body\l397                    | attribute-specifier-seq • decl-specifier-seq declarator function-body\l399                    | attribute-specifier-seq • declarator virt-specifier-seq function-body\l401                    | attribute-specifier-seq • decl-specifier-seq declarator virt-specifier-seq function-body\l403                    | attribute-specifier-seq • declarator requires-clause function-body\l405                    | attribute-specifier-seq • decl-specifier-seq declarator requires-clause function-body\l690 nodeclspec-function-declaration: attribute-specifier-seq • declarator SEMICOLON\l965 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list SEMICOLON\l966                   | attribute-specifier-seq • decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l968                   | attribute-specifier-seq • decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l1171 using-directive: attribute-specifier-seq • USING NAMESPACE namespace-name SEMICOLON\l1173                | attribute-specifier-seq • USING NAMESPACE nested-name-specifier namespace-name SEMICOLON\l"]
  61 -> 255 [style=solid label="USING"]
  61 -> 2 [style=solid label="IDENTIFIER"]
  61 -> 256 [style=solid label="SEMICOLON"]
  61 -> 4 [style=solid label="ALIGNAS"]
  61 -> 5 [style=solid label="OPEN_PAREN"]
  61 -> 6 [style=solid label="ELLIPSIS"]
  61 -> 7 [style=solid label="AND"]
  61 -> 257 [style=solid label="ASM"]
  61 -> 9 [style=solid label="SCOPE"]
  61 -> 10 [style=solid label="OPEN_SQUARE"]
  61 -> 11 [style=solid label="VIRTUAL"]
  61 -> 12 [style=solid label="CLASS"]
  61 -> 13 [style=solid label="STRUCT"]
  61 -> 14 [style=solid label="UNION"]
  61 -> 16 [style=solid label="AND_AND"]
  61 -> 17 [style=solid label="OPERATOR"]
  61 -> 18 [style=solid label="CONST"]
  61 -> 19 [style=solid label="VOLATILE"]
  61 -> 20 [style=solid label="FRIEND"]
  61 -> 21 [style=solid label="TYPEDEF"]
  61 -> 22 [style=solid label="CONSTEXPR"]
  61 -> 23 [style=solid label="CONSTEVAL"]
  61 -> 24 [style=solid label="CONSTINIT"]
  61 -> 258 [style=solid label="INLINE"]
  61 -> 26 [style=solid label="DECLTYPE"]
  61 -> 27 [style=solid label="ENUM"]
  61 -> 259 [style=solid label="EXTERN"]
  61 -> 29 [style=solid label="EXPLICIT"]
  61 -> 31 [style=solid label="MULT"]
  61 -> 35 [style=solid label="COMPL"]
  61 -> 36 [style=solid label="AUTO"]
  61 -> 37 [style=solid label="CHAR"]
  61 -> 38 [style=solid label="CHAR8_T"]
  61 -> 39 [style=solid label="CHAR16_T"]
  61 -> 40 [style=solid label="CHAR32_T"]
  61 -> 41 [style=solid label="WCHAR_T"]
  61 -> 42 [style=solid label="BOOL"]
  61 -> 43 [style=solid label="SHORT"]
  61 -> 44 [style=solid label="INT"]
  61 -> 45 [style=solid label="LONG"]
  61 -> 46 [style=solid label="SIGNED"]
  61 -> 47 [style=solid label="UNSIGNED"]
  61 -> 48 [style=solid label="FLOAT"]
  61 -> 49 [style=solid label="DOUBLE"]
  61 -> 50 [style=solid label="VOID"]
  61 -> 52 [style=solid label="STATIC"]
  61 -> 53 [style=solid label="THREAD_LOCAL"]
  61 -> 54 [style=solid label="MUTABLE"]
  61 -> 55 [style=solid label="TYPENAME"]
  61 -> 57 [style=dashed label="alignment-specifier"]
  61 -> 260 [style=dashed label="attribute-specifier"]
  61 -> 63 [style=dashed label="class-head"]
  61 -> 64 [style=dashed label="class-key"]
  61 -> 65 [style=dashed label="class-name"]
  61 -> 66 [style=dashed label="class-specifier"]
  61 -> 67 [style=dashed label="concept-name"]
  61 -> 68 [style=dashed label="conversion-function-id"]
  61 -> 69 [style=dashed label="cv-qualifier"]
  61 -> 70 [style=dashed label="decl-specifier"]
  61 -> 261 [style=dashed label="decl-specifier-seq"]
  61 -> 262 [style=dashed label="declarator"]
  61 -> 75 [style=dashed label="declarator-id"]
  61 -> 76 [style=dashed label="decltype-specifier"]
  61 -> 78 [style=dashed label="defining-type-specifier"]
  61 -> 79 [style=dashed label="elaborated-enum-specifier"]
  61 -> 80 [style=dashed label="elaborated-type-specifier"]
  61 -> 82 [style=dashed label="enum-head"]
  61 -> 263 [style=dashed label="enum-key"]
  61 -> 84 [style=dashed label="enum-name"]
  61 -> 85 [style=dashed label="enum-specifier"]
  61 -> 264 [style=dashed label="explicit-specifier"]
  61 -> 91 [style=dashed label="function-specifier"]
  61 -> 93 [style=dashed label="id-expression"]
  61 -> 95 [style=dashed label="literal-operator-id"]
  61 -> 99 [style=dashed label="namespace-alias"]
  61 -> 102 [style=dashed label="namespace-name"]
  61 -> 103 [style=dashed label="nested-name-specifier"]
  61 -> 106 [style=dashed label="noptr-declarator"]
  61 -> 108 [style=dashed label="operator-function-id"]
  61 -> 109 [style=dashed label="placeholder-type-specifier"]
  61 -> 110 [style=dashed label="ptr-declarator"]
  61 -> 111 [style=dashed label="ptr-operator"]
  61 -> 112 [style=dashed label="qualified-id"]
  61 -> 114 [style=dashed label="simple-template-id"]
  61 -> 115 [style=dashed label="simple-type-specifier"]
  61 -> 117 [style=dashed label="storage-class-specifier"]
  61 -> 120 [style=dashed label="template-id"]
  61 -> 215 [style=dashed label="template-name"]
  61 -> 123 [style=dashed label="type-constraint"]
  61 -> 124 [style=dashed label="type-name"]
  61 -> 125 [style=dashed label="type-specifier"]
  61 -> 126 [style=dashed label="typedef-name"]
  61 -> 127 [style=dashed label="typename-specifier"]
  61 -> 129 [style=dashed label="unqualified-id"]
  62 [label="State 62\n\l210 declaration: block-declaration •\l"]
  62 -> "62R210" [style=solid]
 "62R210" [label="R210", fillcolor=3, shape=diamond, style=filled]
  63 [label="State 63\n\l151 class-specifier: class-head • OPEN_BRACE CLOSE_BRACE\l152                | class-head • OPEN_BRACE member-specification CLOSE_BRACE\l"]
  63 -> 265 [style=solid label="OPEN_BRACE"]
  64 [label="State 64\n\l128 class-head: class-key • class-head-name\l129           | class-key • attribute-specifier-seq class-head-name\l130           | class-key • class-head-name class-virt-specifier\l131           | class-key • attribute-specifier-seq class-head-name class-virt-specifier\l132           | class-key • class-head-name base-clause\l133           | class-key • attribute-specifier-seq class-head-name base-clause\l134           | class-key • class-head-name class-virt-specifier base-clause\l135           | class-key • attribute-specifier-seq class-head-name class-virt-specifier base-clause\l136           | class-key •\l137           | class-key • attribute-specifier-seq\l138           | class-key • base-clause\l139           | class-key • attribute-specifier-seq base-clause\l264 elaborated-type-specifier: class-key • IDENTIFIER\l265                          | class-key • attribute-specifier-seq IDENTIFIER\l266                          | class-key • nested-name-specifier IDENTIFIER\l267                          | class-key • attribute-specifier-seq nested-name-specifier IDENTIFIER\l268                          | class-key • simple-template-id\l269                          | class-key • nested-name-specifier simple-template-id\l270                          | class-key • nested-name-specifier TEMPLATE simple-template-id\l"]
  64 -> 266 [style=solid label="IDENTIFIER"]
  64 -> 4 [style=solid label="ALIGNAS"]
  64 -> 9 [style=solid label="SCOPE"]
  64 -> 10 [style=solid label="OPEN_SQUARE"]
  64 -> 267 [style=solid label="COLON"]
  64 -> 134 [style=solid label="DECLTYPE"]
  64 -> 57 [style=dashed label="alignment-specifier"]
  64 -> 60 [style=dashed label="attribute-specifier"]
  64 -> 268 [style=dashed label="attribute-specifier-seq"]
  64 -> 269 [style=dashed label="base-clause"]
  64 -> 270 [style=dashed label="class-head-name"]
  64 -> 271 [style=dashed label="class-name"]
  64 -> 138 [style=dashed label="decltype-specifier"]
  64 -> 84 [style=dashed label="enum-name"]
  64 -> 99 [style=dashed label="namespace-alias"]
  64 -> 102 [style=dashed label="namespace-name"]
  64 -> 272 [style=dashed label="nested-name-specifier"]
  64 -> 273 [style=dashed label="simple-template-id"]
  64 -> 142 [style=dashed label="template-name"]
  64 -> 143 [style=dashed label="type-name"]
  64 -> 126 [style=dashed label="typedef-name"]
  64 -> "64R136" [style=solid]
 "64R136" [label="R136", fillcolor=3, shape=diamond, style=filled]
  65 [label="State 65\n\l1078 type-name: class-name •\l"]
  65 -> "65R1078" [style=solid]
 "65R1078" [label="R1078", fillcolor=3, shape=diamond, style=filled]
  66 [label="State 66\n\l236 defining-type-specifier: class-specifier •\l"]
  66 -> "66R236" [style=solid]
 "66R236" [label="R236", fillcolor=3, shape=diamond, style=filled]
  67 [label="State 67\n\l1071 type-constraint: concept-name •\l1073                | concept-name • LESS GREATER\l1075                | concept-name • LESS template-argument-list GREATER\l"]
  67 -> 274 [style=solid label="LESS"]
  67 -> "67R1071" [style=solid]
 "67R1071" [label="R1071", fillcolor=3, shape=diamond, style=filled]
  68 [label="State 68\n\l1142 unqualified-id: conversion-function-id •\l"]
  68 -> "68R1142" [style=solid]
 "68R1142" [label="R1142", fillcolor=3, shape=diamond, style=filled]
  69 [label="State 69\n\l1106 type-specifier: cv-qualifier •\l"]
  69 -> "69R1106" [style=solid]
 "69R1106" [label="R1106", fillcolor=3, shape=diamond, style=filled]
  70 [label="State 70\n\l207 decl-specifier-seq: decl-specifier •\l208                   | decl-specifier • attribute-specifier-seq\l209                   | decl-specifier • decl-specifier-seq\l"]
  70 -> 162 [style=solid label="IDENTIFIER"]
  70 -> 4 [style=solid label="ALIGNAS"]
  70 -> 9 [style=solid label="SCOPE"]
  70 -> 10 [style=solid label="OPEN_SQUARE"]
  70 -> 11 [style=solid label="VIRTUAL"]
  70 -> 12 [style=solid label="CLASS"]
  70 -> 13 [style=solid label="STRUCT"]
  70 -> 14 [style=solid label="UNION"]
  70 -> 18 [style=solid label="CONST"]
  70 -> 19 [style=solid label="VOLATILE"]
  70 -> 20 [style=solid label="FRIEND"]
  70 -> 21 [style=solid label="TYPEDEF"]
  70 -> 22 [style=solid label="CONSTEXPR"]
  70 -> 23 [style=solid label="CONSTEVAL"]
  70 -> 24 [style=solid label="CONSTINIT"]
  70 -> 258 [style=solid label="INLINE"]
  70 -> 26 [style=solid label="DECLTYPE"]
  70 -> 27 [style=solid label="ENUM"]
  70 -> 259 [style=solid label="EXTERN"]
  70 -> 29 [style=solid label="EXPLICIT"]
  70 -> 36 [style=solid label="AUTO"]
  70 -> 37 [style=solid label="CHAR"]
  70 -> 38 [style=solid label="CHAR8_T"]
  70 -> 39 [style=solid label="CHAR16_T"]
  70 -> 40 [style=solid label="CHAR32_T"]
  70 -> 41 [style=solid label="WCHAR_T"]
  70 -> 42 [style=solid label="BOOL"]
  70 -> 43 [style=solid label="SHORT"]
  70 -> 44 [style=solid label="INT"]
  70 -> 45 [style=solid label="LONG"]
  70 -> 46 [style=solid label="SIGNED"]
  70 -> 47 [style=solid label="UNSIGNED"]
  70 -> 48 [style=solid label="FLOAT"]
  70 -> 49 [style=solid label="DOUBLE"]
  70 -> 50 [style=solid label="VOID"]
  70 -> 52 [style=solid label="STATIC"]
  70 -> 53 [style=solid label="THREAD_LOCAL"]
  70 -> 54 [style=solid label="MUTABLE"]
  70 -> 55 [style=solid label="TYPENAME"]
  70 -> 57 [style=dashed label="alignment-specifier"]
  70 -> 60 [style=dashed label="attribute-specifier"]
  70 -> 275 [style=dashed label="attribute-specifier-seq"]
  70 -> 63 [style=dashed label="class-head"]
  70 -> 64 [style=dashed label="class-key"]
  70 -> 65 [style=dashed label="class-name"]
  70 -> 66 [style=dashed label="class-specifier"]
  70 -> 67 [style=dashed label="concept-name"]
  70 -> 69 [style=dashed label="cv-qualifier"]
  70 -> 70 [style=dashed label="decl-specifier"]
  70 -> 276 [style=dashed label="decl-specifier-seq"]
  70 -> 76 [style=dashed label="decltype-specifier"]
  70 -> 78 [style=dashed label="defining-type-specifier"]
  70 -> 79 [style=dashed label="elaborated-enum-specifier"]
  70 -> 80 [style=dashed label="elaborated-type-specifier"]
  70 -> 82 [style=dashed label="enum-head"]
  70 -> 263 [style=dashed label="enum-key"]
  70 -> 84 [style=dashed label="enum-name"]
  70 -> 85 [style=dashed label="enum-specifier"]
  70 -> 264 [style=dashed label="explicit-specifier"]
  70 -> 91 [style=dashed label="function-specifier"]
  70 -> 99 [style=dashed label="namespace-alias"]
  70 -> 102 [style=dashed label="namespace-name"]
  70 -> 212 [style=dashed label="nested-name-specifier"]
  70 -> 109 [style=dashed label="placeholder-type-specifier"]
  70 -> 141 [style=dashed label="simple-template-id"]
  70 -> 115 [style=dashed label="simple-type-specifier"]
  70 -> 117 [style=dashed label="storage-class-specifier"]
  70 -> 215 [style=dashed label="template-name"]
  70 -> 123 [style=dashed label="type-constraint"]
  70 -> 124 [style=dashed label="type-name"]
  70 -> 125 [style=dashed label="type-specifier"]
  70 -> 126 [style=dashed label="typedef-name"]
  70 -> 127 [style=dashed label="typename-specifier"]
  70 -> "70R207d" [label="[IDENTIFIER, ALIGNAS, SCOPE, OPEN_SQUARE, DECLTYPE]", style=solid]
 "70R207d" [label="R207", fillcolor=5, shape=diamond, style=filled]
  70 -> "70R207" [style=solid]
 "70R207" [label="R207", fillcolor=3, shape=diamond, style=filled]
  71 [label="State 71\n\l398 function-definition: decl-specifier-seq • declarator function-body\l402                    | decl-specifier-seq • declarator virt-specifier-seq function-body\l406                    | decl-specifier-seq • declarator requires-clause function-body\l963 simple-declaration: decl-specifier-seq • SEMICOLON\l964                   | decl-specifier-seq • init-declarator-list SEMICOLON\l967                   | decl-specifier-seq • OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l969                   | decl-specifier-seq • ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  71 -> 147 [style=solid label="IDENTIFIER"]
  71 -> 277 [style=solid label="SEMICOLON"]
  71 -> 5 [style=solid label="OPEN_PAREN"]
  71 -> 6 [style=solid label="ELLIPSIS"]
  71 -> 278 [style=solid label="AND"]
  71 -> 9 [style=solid label="SCOPE"]
  71 -> 279 [style=solid label="OPEN_SQUARE"]
  71 -> 280 [style=solid label="AND_AND"]
  71 -> 17 [style=solid label="OPERATOR"]
  71 -> 134 [style=solid label="DECLTYPE"]
  71 -> 31 [style=solid label="MULT"]
  71 -> 35 [style=solid label="COMPL"]
  71 -> 65 [style=dashed label="class-name"]
  71 -> 68 [style=dashed label="conversion-function-id"]
  71 -> 281 [style=dashed label="declarator"]
  71 -> 75 [style=dashed label="declarator-id"]
  71 -> 138 [style=dashed label="decltype-specifier"]
  71 -> 84 [style=dashed label="enum-name"]
  71 -> 93 [style=dashed label="id-expression"]
  71 -> 282 [style=dashed label="init-declarator"]
  71 -> 283 [style=dashed label="init-declarator-list"]
  71 -> 95 [style=dashed label="literal-operator-id"]
  71 -> 99 [style=dashed label="namespace-alias"]
  71 -> 102 [style=dashed label="namespace-name"]
  71 -> 148 [style=dashed label="nested-name-specifier"]
  71 -> 106 [style=dashed label="noptr-declarator"]
  71 -> 108 [style=dashed label="operator-function-id"]
  71 -> 110 [style=dashed label="ptr-declarator"]
  71 -> 111 [style=dashed label="ptr-operator"]
  71 -> 112 [style=dashed label="qualified-id"]
  71 -> 284 [style=dashed label="ref-qualifier"]
  71 -> 114 [style=dashed label="simple-template-id"]
  71 -> 120 [style=dashed label="template-id"]
  71 -> 142 [style=dashed label="template-name"]
  71 -> 143 [style=dashed label="type-name"]
  71 -> 126 [style=dashed label="typedef-name"]
  71 -> 129 [style=dashed label="unqualified-id"]
  72 [label="State 72\n\l223 declaration-seq: declaration •\l"]
  72 -> "72R223" [style=solid]
 "72R223" [label="R223", fillcolor=3, shape=diamond, style=filled]
  73 [label="State 73\n\l224 declaration-seq: declaration-seq • declaration\l1060 translation-unit: declaration-seq •\l"]
  73 -> 1 [style=solid label="USING"]
  73 -> 2 [style=solid label="IDENTIFIER"]
  73 -> 3 [style=solid label="SEMICOLON"]
  73 -> 4 [style=solid label="ALIGNAS"]
  73 -> 5 [style=solid label="OPEN_PAREN"]
  73 -> 6 [style=solid label="ELLIPSIS"]
  73 -> 7 [style=solid label="AND"]
  73 -> 8 [style=solid label="ASM"]
  73 -> 9 [style=solid label="SCOPE"]
  73 -> 10 [style=solid label="OPEN_SQUARE"]
  73 -> 11 [style=solid label="VIRTUAL"]
  73 -> 12 [style=solid label="CLASS"]
  73 -> 13 [style=solid label="STRUCT"]
  73 -> 14 [style=solid label="UNION"]
  73 -> 15 [style=solid label="TEMPLATE"]
  73 -> 16 [style=solid label="AND_AND"]
  73 -> 17 [style=solid label="OPERATOR"]
  73 -> 18 [style=solid label="CONST"]
  73 -> 19 [style=solid label="VOLATILE"]
  73 -> 20 [style=solid label="FRIEND"]
  73 -> 21 [style=solid label="TYPEDEF"]
  73 -> 22 [style=solid label="CONSTEXPR"]
  73 -> 23 [style=solid label="CONSTEVAL"]
  73 -> 24 [style=solid label="CONSTINIT"]
  73 -> 25 [style=solid label="INLINE"]
  73 -> 26 [style=solid label="DECLTYPE"]
  73 -> 27 [style=solid label="ENUM"]
  73 -> 28 [style=solid label="EXTERN"]
  73 -> 29 [style=solid label="EXPLICIT"]
  73 -> 157 [style=solid label="EXPORT"]
  73 -> 31 [style=solid label="MULT"]
  73 -> 33 [style=solid label="IMPORT"]
  73 -> 34 [style=solid label="NAMESPACE"]
  73 -> 35 [style=solid label="COMPL"]
  73 -> 36 [style=solid label="AUTO"]
  73 -> 37 [style=solid label="CHAR"]
  73 -> 38 [style=solid label="CHAR8_T"]
  73 -> 39 [style=solid label="CHAR16_T"]
  73 -> 40 [style=solid label="CHAR32_T"]
  73 -> 41 [style=solid label="WCHAR_T"]
  73 -> 42 [style=solid label="BOOL"]
  73 -> 43 [style=solid label="SHORT"]
  73 -> 44 [style=solid label="INT"]
  73 -> 45 [style=solid label="LONG"]
  73 -> 46 [style=solid label="SIGNED"]
  73 -> 47 [style=solid label="UNSIGNED"]
  73 -> 48 [style=solid label="FLOAT"]
  73 -> 49 [style=solid label="DOUBLE"]
  73 -> 50 [style=solid label="VOID"]
  73 -> 51 [style=solid label="STATIC_ASSERT"]
  73 -> 52 [style=solid label="STATIC"]
  73 -> 53 [style=solid label="THREAD_LOCAL"]
  73 -> 54 [style=solid label="MUTABLE"]
  73 -> 55 [style=solid label="TYPENAME"]
  73 -> 56 [style=dashed label="alias-declaration"]
  73 -> 57 [style=dashed label="alignment-specifier"]
  73 -> 58 [style=dashed label="asm-declaration"]
  73 -> 59 [style=dashed label="attribute-declaration"]
  73 -> 60 [style=dashed label="attribute-specifier"]
  73 -> 61 [style=dashed label="attribute-specifier-seq"]
  73 -> 62 [style=dashed label="block-declaration"]
  73 -> 63 [style=dashed label="class-head"]
  73 -> 64 [style=dashed label="class-key"]
  73 -> 65 [style=dashed label="class-name"]
  73 -> 66 [style=dashed label="class-specifier"]
  73 -> 67 [style=dashed label="concept-name"]
  73 -> 68 [style=dashed label="conversion-function-id"]
  73 -> 69 [style=dashed label="cv-qualifier"]
  73 -> 70 [style=dashed label="decl-specifier"]
  73 -> 71 [style=dashed label="decl-specifier-seq"]
  73 -> 285 [style=dashed label="declaration"]
  73 -> 74 [style=dashed label="declarator"]
  73 -> 75 [style=dashed label="declarator-id"]
  73 -> 76 [style=dashed label="decltype-specifier"]
  73 -> 77 [style=dashed label="deduction-guide"]
  73 -> 78 [style=dashed label="defining-type-specifier"]
  73 -> 79 [style=dashed label="elaborated-enum-specifier"]
  73 -> 80 [style=dashed label="elaborated-type-specifier"]
  73 -> 81 [style=dashed label="empty-declaration"]
  73 -> 82 [style=dashed label="enum-head"]
  73 -> 83 [style=dashed label="enum-key"]
  73 -> 84 [style=dashed label="enum-name"]
  73 -> 85 [style=dashed label="enum-specifier"]
  73 -> 86 [style=dashed label="explicit-instantiation"]
  73 -> 87 [style=dashed label="explicit-specialization"]
  73 -> 88 [style=dashed label="explicit-specifier"]
  73 -> 89 [style=dashed label="export-declaration"]
  73 -> 90 [style=dashed label="function-definition"]
  73 -> 91 [style=dashed label="function-specifier"]
  73 -> 93 [style=dashed label="id-expression"]
  73 -> 94 [style=dashed label="linkage-specification"]
  73 -> 95 [style=dashed label="literal-operator-id"]
  73 -> 97 [style=dashed label="module-import-declaration"]
  73 -> 98 [style=dashed label="named-namespace-definition"]
  73 -> 99 [style=dashed label="namespace-alias"]
  73 -> 100 [style=dashed label="namespace-alias-definition"]
  73 -> 101 [style=dashed label="namespace-definition"]
  73 -> 102 [style=dashed label="namespace-name"]
  73 -> 103 [style=dashed label="nested-name-specifier"]
  73 -> 104 [style=dashed label="nested-namespace-definition"]
  73 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  73 -> 106 [style=dashed label="noptr-declarator"]
  73 -> 107 [style=dashed label="opaque-enum-declaration"]
  73 -> 108 [style=dashed label="operator-function-id"]
  73 -> 109 [style=dashed label="placeholder-type-specifier"]
  73 -> 110 [style=dashed label="ptr-declarator"]
  73 -> 111 [style=dashed label="ptr-operator"]
  73 -> 112 [style=dashed label="qualified-id"]
  73 -> 113 [style=dashed label="simple-declaration"]
  73 -> 114 [style=dashed label="simple-template-id"]
  73 -> 115 [style=dashed label="simple-type-specifier"]
  73 -> 116 [style=dashed label="static_assert-declaration"]
  73 -> 117 [style=dashed label="storage-class-specifier"]
  73 -> 118 [style=dashed label="template-declaration"]
  73 -> 119 [style=dashed label="template-head"]
  73 -> 120 [style=dashed label="template-id"]
  73 -> 121 [style=dashed label="template-name"]
  73 -> 123 [style=dashed label="type-constraint"]
  73 -> 124 [style=dashed label="type-name"]
  73 -> 125 [style=dashed label="type-specifier"]
  73 -> 126 [style=dashed label="typedef-name"]
  73 -> 127 [style=dashed label="typename-specifier"]
  73 -> 128 [style=dashed label="unnamed-namespace-definition"]
  73 -> 129 [style=dashed label="unqualified-id"]
  73 -> 130 [style=dashed label="using-declaration"]
  73 -> 131 [style=dashed label="using-directive"]
  73 -> 132 [style=dashed label="using-enum-declaration"]
  73 -> "73R1060" [style=solid]
 "73R1060" [label="R1060", fillcolor=3, shape=diamond, style=filled]
  74 [label="State 74\n\l396 function-definition: declarator • function-body\l400                    | declarator • virt-specifier-seq function-body\l404                    | declarator • requires-clause function-body\l691 nodeclspec-function-declaration: declarator • SEMICOLON\l"]
  74 -> 286 [style=solid label="EQ"]
  74 -> 287 [style=solid label="SEMICOLON"]
  74 -> 288 [style=solid label="COLON"]
  74 -> 289 [style=solid label="OPEN_BRACE"]
  74 -> 290 [style=solid label="FINAL"]
  74 -> 291 [style=solid label="TRY"]
  74 -> 292 [style=solid label="REQUIRES"]
  74 -> 293 [style=solid label="OVERRIDE"]
  74 -> 294 [style=dashed label="compound-statement"]
  74 -> 295 [style=dashed label="ctor-initializer"]
  74 -> 296 [style=dashed label="function-body"]
  74 -> 297 [style=dashed label="function-try-block"]
  74 -> 298 [style=dashed label="requires-clause"]
  74 -> 299 [style=dashed label="virt-specifier"]
  74 -> 300 [style=dashed label="virt-specifier-seq"]
  75 [label="State 75\n\l721 noptr-declarator: declarator-id •\l722                 | declarator-id • attribute-specifier-seq\l"]
  75 -> 4 [style=solid label="ALIGNAS"]
  75 -> 10 [style=solid label="OPEN_SQUARE"]
  75 -> 57 [style=dashed label="alignment-specifier"]
  75 -> 60 [style=dashed label="attribute-specifier"]
  75 -> 301 [style=dashed label="attribute-specifier-seq"]
  75 -> "75R721d" [label="[OPEN_SQUARE]", style=solid]
 "75R721d" [label="R721", fillcolor=5, shape=diamond, style=filled]
  75 -> "75R721" [style=solid]
 "75R721" [label="R721", fillcolor=3, shape=diamond, style=filled]
  76 [label="State 76\n\l658 nested-name-specifier: decltype-specifier • SCOPE\l988 simple-type-specifier: decltype-specifier •\l"]
  76 -> 302 [style=solid label="SCOPE"]
  76 -> "76R988d" [label="[SCOPE]", style=solid]
 "76R988d" [label="R988", fillcolor=5, shape=diamond, style=filled]
  76 -> "76R988" [style=solid]
 "76R988" [label="R988", fillcolor=3, shape=diamond, style=filled]
  77 [label="State 77\n\l214 declaration: deduction-guide •\l"]
  77 -> "77R214" [style=solid]
 "77R214" [label="R214", fillcolor=3, shape=diamond, style=filled]
  78 [label="State 78\n\l199 decl-specifier: defining-type-specifier •\l"]
  78 -> "78R199" [style=solid]
 "78R199" [label="R199", fillcolor=3, shape=diamond, style=filled]
  79 [label="State 79\n\l271 elaborated-type-specifier: elaborated-enum-specifier •\l"]
  79 -> "79R271" [style=solid]
 "79R271" [label="R271", fillcolor=3, shape=diamond, style=filled]
  80 [label="State 80\n\l1104 type-specifier: elaborated-type-specifier •\l"]
  80 -> "80R1104" [style=solid]
 "80R1104" [label="R1104", fillcolor=3, shape=diamond, style=filled]
  81 [label="State 81\n\l220 declaration: empty-declaration •\l"]
  81 -> "81R220" [style=solid]
 "81R220" [label="R220", fillcolor=3, shape=diamond, style=filled]
  82 [label="State 82\n\l295 enum-specifier: enum-head • OPEN_BRACE CLOSE_BRACE\l296               | enum-head • OPEN_BRACE enumerator-list CLOSE_BRACE\l297               | enum-head • OPEN_BRACE enumerator-list COMMA CLOSE_BRACE\l"]
  82 -> 303 [style=solid label="OPEN_BRACE"]
  83 [label="State 83\n\l281 enum-head: enum-key •\l282          | enum-key • attribute-specifier-seq\l283          | enum-key • enum-head-name\l284          | enum-key • attribute-specifier-seq enum-head-name\l285          | enum-key • enum-base\l286          | enum-key • attribute-specifier-seq enum-base\l287          | enum-key • enum-head-name enum-base\l288          | enum-key • attribute-specifier-seq enum-head-name enum-base\l751 opaque-enum-declaration: enum-key • enum-head-name SEMICOLON\l752                        | enum-key • attribute-specifier-seq enum-head-name SEMICOLON\l753                        | enum-key • enum-head-name enum-base SEMICOLON\l754                        | enum-key • attribute-specifier-seq enum-head-name enum-base SEMICOLON\l"]
  83 -> 304 [style=solid label="IDENTIFIER"]
  83 -> 4 [style=solid label="ALIGNAS"]
  83 -> 9 [style=solid label="SCOPE"]
  83 -> 10 [style=solid label="OPEN_SQUARE"]
  83 -> 305 [style=solid label="COLON"]
  83 -> 134 [style=solid label="DECLTYPE"]
  83 -> 57 [style=dashed label="alignment-specifier"]
  83 -> 60 [style=dashed label="attribute-specifier"]
  83 -> 306 [style=dashed label="attribute-specifier-seq"]
  83 -> 65 [style=dashed label="class-name"]
  83 -> 138 [style=dashed label="decltype-specifier"]
  83 -> 307 [style=dashed label="enum-base"]
  83 -> 308 [style=dashed label="enum-head-name"]
  83 -> 84 [style=dashed label="enum-name"]
  83 -> 99 [style=dashed label="namespace-alias"]
  83 -> 102 [style=dashed label="namespace-name"]
  83 -> 309 [style=dashed label="nested-name-specifier"]
  83 -> 141 [style=dashed label="simple-template-id"]
  83 -> 142 [style=dashed label="template-name"]
  83 -> 143 [style=dashed label="type-name"]
  83 -> 126 [style=dashed label="typedef-name"]
  83 -> "83R281" [style=solid]
 "83R281" [label="R281", fillcolor=3, shape=diamond, style=filled]
  84 [label="State 84\n\l1079 type-name: enum-name •\l"]
  84 -> "84R1079" [style=solid]
 "84R1079" [label="R1079", fillcolor=3, shape=diamond, style=filled]
  85 [label="State 85\n\l237 defining-type-specifier: enum-specifier •\l"]
  85 -> "85R237" [style=solid]
 "85R237" [label="R237", fillcolor=3, shape=diamond, style=filled]
  86 [label="State 86\n\l215 declaration: explicit-instantiation •\l"]
  86 -> "86R215" [style=solid]
 "86R215" [label="R215", fillcolor=3, shape=diamond, style=filled]
  87 [label="State 87\n\l216 declaration: explicit-specialization •\l"]
  87 -> "87R216" [style=solid]
 "87R216" [label="R216", fillcolor=3, shape=diamond, style=filled]
  88 [label="State 88\n\l231 deduction-guide: explicit-specifier • template-name OPEN_PAREN parameter-declaration-clause CLOSE_PAREN DEREF simple-template-id SEMICOLON\l408 function-specifier: explicit-specifier •\l"]
  88 -> 310 [style=solid label="IDENTIFIER"]
  88 -> 311 [style=dashed label="template-name"]
  88 -> "88R408d" [label="[IDENTIFIER]", style=solid]
 "88R408d" [label="R408", fillcolor=5, shape=diamond, style=filled]
  88 -> "88R408" [style=solid]
 "88R408" [label="R408", fillcolor=3, shape=diamond, style=filled]
  89 [label="State 89\n\l217 declaration: export-declaration •\l"]
  89 -> "89R217" [style=solid]
 "89R217" [label="R217", fillcolor=3, shape=diamond, style=filled]
  90 [label="State 90\n\l212 declaration: function-definition •\l"]
  90 -> "90R212" [style=solid]
 "90R212" [label="R212", fillcolor=3, shape=diamond, style=filled]
  91 [label="State 91\n\l200 decl-specifier: function-specifier •\l"]
  91 -> "91R200" [style=solid]
 "91R200" [label="R200", fillcolor=3, shape=diamond, style=filled]
  92 [label="State 92\n\l1061 translation-unit: global-module-fragment • module-declaration\l1063                 | global-module-fragment • module-declaration declaration-seq\l1065                 | global-module-fragment • module-declaration private-module-fragment\l1067                 | global-module-fragment • module-declaration declaration-seq private-module-fragment\l"]
  92 -> 312 [style=solid label="EXPORT"]
  92 -> 313 [style=solid label="MODULE"]
  92 -> 314 [style=dashed label="module-declaration"]
  93 [label="State 93\n\l229 declarator-id: id-expression •\l"]
  93 -> "93R229" [style=solid]
 "93R229" [label="R229", fillcolor=3, shape=diamond, style=filled]
  94 [label="State 94\n\l218 declaration: linkage-specification •\l"]
  94 -> "94R218" [style=solid]
 "94R218" [label="R218", fillcolor=3, shape=diamond, style=filled]
  95 [label="State 95\n\l1050 template-id: literal-operator-id • LESS GREATER\l1051            | literal-operator-id • LESS template-argument-list GREATER\l1143 unqualified-id: literal-operator-id •\l"]
  95 -> 315 [style=solid label="LESS"]
  95 -> "95R1143d" [label="[LESS]", style=solid]
 "95R1143d" [label="R1143", fillcolor=5, shape=diamond, style=filled]
  95 -> "95R1143" [style=solid]
 "95R1143" [label="R1143", fillcolor=3, shape=diamond, style=filled]
  96 [label="State 96\n\l1062 translation-unit: module-declaration •\l1064                 | module-declaration • declaration-seq\l1066                 | module-declaration • private-module-fragment\l1068                 | module-declaration • declaration-seq private-module-fragment\l"]
  96 -> 1 [style=solid label="USING"]
  96 -> 2 [style=solid label="IDENTIFIER"]
  96 -> 3 [style=solid label="SEMICOLON"]
  96 -> 4 [style=solid label="ALIGNAS"]
  96 -> 5 [style=solid label="OPEN_PAREN"]
  96 -> 6 [style=solid label="ELLIPSIS"]
  96 -> 7 [style=solid label="AND"]
  96 -> 8 [style=solid label="ASM"]
  96 -> 9 [style=solid label="SCOPE"]
  96 -> 10 [style=solid label="OPEN_SQUARE"]
  96 -> 11 [style=solid label="VIRTUAL"]
  96 -> 12 [style=solid label="CLASS"]
  96 -> 13 [style=solid label="STRUCT"]
  96 -> 14 [style=solid label="UNION"]
  96 -> 15 [style=solid label="TEMPLATE"]
  96 -> 16 [style=solid label="AND_AND"]
  96 -> 17 [style=solid label="OPERATOR"]
  96 -> 18 [style=solid label="CONST"]
  96 -> 19 [style=solid label="VOLATILE"]
  96 -> 20 [style=solid label="FRIEND"]
  96 -> 21 [style=solid label="TYPEDEF"]
  96 -> 22 [style=solid label="CONSTEXPR"]
  96 -> 23 [style=solid label="CONSTEVAL"]
  96 -> 24 [style=solid label="CONSTINIT"]
  96 -> 25 [style=solid label="INLINE"]
  96 -> 26 [style=solid label="DECLTYPE"]
  96 -> 27 [style=solid label="ENUM"]
  96 -> 28 [style=solid label="EXTERN"]
  96 -> 29 [style=solid label="EXPLICIT"]
  96 -> 157 [style=solid label="EXPORT"]
  96 -> 31 [style=solid label="MULT"]
  96 -> 316 [style=solid label="MODULE"]
  96 -> 33 [style=solid label="IMPORT"]
  96 -> 34 [style=solid label="NAMESPACE"]
  96 -> 35 [style=solid label="COMPL"]
  96 -> 36 [style=solid label="AUTO"]
  96 -> 37 [style=solid label="CHAR"]
  96 -> 38 [style=solid label="CHAR8_T"]
  96 -> 39 [style=solid label="CHAR16_T"]
  96 -> 40 [style=solid label="CHAR32_T"]
  96 -> 41 [style=solid label="WCHAR_T"]
  96 -> 42 [style=solid label="BOOL"]
  96 -> 43 [style=solid label="SHORT"]
  96 -> 44 [style=solid label="INT"]
  96 -> 45 [style=solid label="LONG"]
  96 -> 46 [style=solid label="SIGNED"]
  96 -> 47 [style=solid label="UNSIGNED"]
  96 -> 48 [style=solid label="FLOAT"]
  96 -> 49 [style=solid label="DOUBLE"]
  96 -> 50 [style=solid label="VOID"]
  96 -> 51 [style=solid label="STATIC_ASSERT"]
  96 -> 52 [style=solid label="STATIC"]
  96 -> 53 [style=solid label="THREAD_LOCAL"]
  96 -> 54 [style=solid label="MUTABLE"]
  96 -> 55 [style=solid label="TYPENAME"]
  96 -> 56 [style=dashed label="alias-declaration"]
  96 -> 57 [style=dashed label="alignment-specifier"]
  96 -> 58 [style=dashed label="asm-declaration"]
  96 -> 59 [style=dashed label="attribute-declaration"]
  96 -> 60 [style=dashed label="attribute-specifier"]
  96 -> 61 [style=dashed label="attribute-specifier-seq"]
  96 -> 62 [style=dashed label="block-declaration"]
  96 -> 63 [style=dashed label="class-head"]
  96 -> 64 [style=dashed label="class-key"]
  96 -> 65 [style=dashed label="class-name"]
  96 -> 66 [style=dashed label="class-specifier"]
  96 -> 67 [style=dashed label="concept-name"]
  96 -> 68 [style=dashed label="conversion-function-id"]
  96 -> 69 [style=dashed label="cv-qualifier"]
  96 -> 70 [style=dashed label="decl-specifier"]
  96 -> 71 [style=dashed label="decl-specifier-seq"]
  96 -> 72 [style=dashed label="declaration"]
  96 -> 317 [style=dashed label="declaration-seq"]
  96 -> 74 [style=dashed label="declarator"]
  96 -> 75 [style=dashed label="declarator-id"]
  96 -> 76 [style=dashed label="decltype-specifier"]
  96 -> 77 [style=dashed label="deduction-guide"]
  96 -> 78 [style=dashed label="defining-type-specifier"]
  96 -> 79 [style=dashed label="elaborated-enum-specifier"]
  96 -> 80 [style=dashed label="elaborated-type-specifier"]
  96 -> 81 [style=dashed label="empty-declaration"]
  96 -> 82 [style=dashed label="enum-head"]
  96 -> 83 [style=dashed label="enum-key"]
  96 -> 84 [style=dashed label="enum-name"]
  96 -> 85 [style=dashed label="enum-specifier"]
  96 -> 86 [style=dashed label="explicit-instantiation"]
  96 -> 87 [style=dashed label="explicit-specialization"]
  96 -> 88 [style=dashed label="explicit-specifier"]
  96 -> 89 [style=dashed label="export-declaration"]
  96 -> 90 [style=dashed label="function-definition"]
  96 -> 91 [style=dashed label="function-specifier"]
  96 -> 93 [style=dashed label="id-expression"]
  96 -> 94 [style=dashed label="linkage-specification"]
  96 -> 95 [style=dashed label="literal-operator-id"]
  96 -> 97 [style=dashed label="module-import-declaration"]
  96 -> 98 [style=dashed label="named-namespace-definition"]
  96 -> 99 [style=dashed label="namespace-alias"]
  96 -> 100 [style=dashed label="namespace-alias-definition"]
  96 -> 101 [style=dashed label="namespace-definition"]
  96 -> 102 [style=dashed label="namespace-name"]
  96 -> 103 [style=dashed label="nested-name-specifier"]
  96 -> 104 [style=dashed label="nested-namespace-definition"]
  96 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  96 -> 106 [style=dashed label="noptr-declarator"]
  96 -> 107 [style=dashed label="opaque-enum-declaration"]
  96 -> 108 [style=dashed label="operator-function-id"]
  96 -> 109 [style=dashed label="placeholder-type-specifier"]
  96 -> 318 [style=dashed label="private-module-fragment"]
  96 -> 110 [style=dashed label="ptr-declarator"]
  96 -> 111 [style=dashed label="ptr-operator"]
  96 -> 112 [style=dashed label="qualified-id"]
  96 -> 113 [style=dashed label="simple-declaration"]
  96 -> 114 [style=dashed label="simple-template-id"]
  96 -> 115 [style=dashed label="simple-type-specifier"]
  96 -> 116 [style=dashed label="static_assert-declaration"]
  96 -> 117 [style=dashed label="storage-class-specifier"]
  96 -> 118 [style=dashed label="template-declaration"]
  96 -> 119 [style=dashed label="template-head"]
  96 -> 120 [style=dashed label="template-id"]
  96 -> 121 [style=dashed label="template-name"]
  96 -> 123 [style=dashed label="type-constraint"]
  96 -> 124 [style=dashed label="type-name"]
  96 -> 125 [style=dashed label="type-specifier"]
  96 -> 126 [style=dashed label="typedef-name"]
  96 -> 127 [style=dashed label="typename-specifier"]
  96 -> 128 [style=dashed label="unnamed-namespace-definition"]
  96 -> 129 [style=dashed label="unqualified-id"]
  96 -> 130 [style=dashed label="using-declaration"]
  96 -> 131 [style=dashed label="using-directive"]
  96 -> 132 [style=dashed label="using-enum-declaration"]
  96 -> "96R1062" [style=solid]
 "96R1062" [label="R1062", fillcolor=3, shape=diamond, style=filled]
  97 [label="State 97\n\l222 declaration: module-import-declaration •\l"]
  97 -> "97R222" [style=solid]
 "97R222" [label="R222", fillcolor=3, shape=diamond, style=filled]
  98 [label="State 98\n\l650 namespace-definition: named-namespace-definition •\l"]
  98 -> "98R650" [style=solid]
 "98R650" [label="R650", fillcolor=3, shape=diamond, style=filled]
  99 [label="State 99\n\l654 namespace-name: namespace-alias •\l"]
  99 -> "99R654" [style=solid]
 "99R654" [label="R654", fillcolor=3, shape=diamond, style=filled]
  100 [label="State 100\n\l 97 block-declaration: namespace-alias-definition •\l"]
  100 -> "100R97" [style=solid]
 "100R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  101 [label="State 101\n\l219 declaration: namespace-definition •\l"]
  101 -> "101R219" [style=solid]
 "101R219" [label="R219", fillcolor=3, shape=diamond, style=filled]
  102 [label="State 102\n\l657 nested-name-specifier: namespace-name • SCOPE\l"]
  102 -> 319 [style=solid label="SCOPE"]
  103 [label="State 103\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l901 ptr-operator: nested-name-specifier • MULT\l902             | nested-name-specifier • MULT attribute-specifier-seq\l903             | nested-name-specifier • MULT cv-qualifier-seq\l904             | nested-name-specifier • MULT attribute-specifier-seq cv-qualifier-seq\l909 qualified-id: nested-name-specifier • unqualified-id\l910             | nested-name-specifier • TEMPLATE unqualified-id\l985 simple-type-specifier: nested-name-specifier • type-name\l987                      | nested-name-specifier • TEMPLATE simple-template-id\l990                      | nested-name-specifier • template-name\l1070 type-constraint: nested-name-specifier • concept-name\l1072                | nested-name-specifier • concept-name LESS GREATER\l1074                | nested-name-specifier • concept-name LESS template-argument-list GREATER\l"]
  103 -> 320 [style=solid label="IDENTIFIER"]
  103 -> 321 [style=solid label="TEMPLATE"]
  103 -> 17 [style=solid label="OPERATOR"]
  103 -> 322 [style=solid label="MULT"]
  103 -> 35 [style=solid label="COMPL"]
  103 -> 65 [style=dashed label="class-name"]
  103 -> 323 [style=dashed label="concept-name"]
  103 -> 68 [style=dashed label="conversion-function-id"]
  103 -> 84 [style=dashed label="enum-name"]
  103 -> 95 [style=dashed label="literal-operator-id"]
  103 -> 108 [style=dashed label="operator-function-id"]
  103 -> 324 [style=dashed label="simple-template-id"]
  103 -> 120 [style=dashed label="template-id"]
  103 -> 325 [style=dashed label="template-name"]
  103 -> 326 [style=dashed label="type-name"]
  103 -> 126 [style=dashed label="typedef-name"]
  103 -> 327 [style=dashed label="unqualified-id"]
  104 [label="State 104\n\l652 namespace-definition: nested-namespace-definition •\l"]
  104 -> "104R652" [style=solid]
 "104R652" [label="R652", fillcolor=3, shape=diamond, style=filled]
  105 [label="State 105\n\l211 declaration: nodeclspec-function-declaration •\l"]
  105 -> "105R211" [style=solid]
 "105R211" [label="R211", fillcolor=3, shape=diamond, style=filled]
  106 [label="State 106\n\l227 declarator: noptr-declarator • parameters-and-qualifiers trailing-return-type\l723 noptr-declarator: noptr-declarator • parameters-and-qualifiers\l724                 | noptr-declarator • OPEN_SQUARE CLOSE_SQUARE\l725                 | noptr-declarator • OPEN_SQUARE constant-expression CLOSE_SQUARE\l726                 | noptr-declarator • OPEN_SQUARE CLOSE_SQUARE attribute-specifier-seq\l727                 | noptr-declarator • OPEN_SQUARE constant-expression CLOSE_SQUARE attribute-specifier-seq\l891 ptr-declarator: noptr-declarator •\l"]
  106 -> 328 [style=solid label="OPEN_PAREN"]
  106 -> 329 [style=solid label="OPEN_SQUARE"]
  106 -> 330 [style=dashed label="parameters-and-qualifiers"]
  106 -> "106R891d" [label="[OPEN_PAREN]", style=solid]
 "106R891d" [label="R891", fillcolor=5, shape=diamond, style=filled]
  106 -> "106R891" [style=solid]
 "106R891" [label="R891", fillcolor=3, shape=diamond, style=filled]
  107 [label="State 107\n\l103 block-declaration: opaque-enum-declaration •\l"]
  107 -> "107R103" [style=solid]
 "107R103" [label="R103", fillcolor=3, shape=diamond, style=filled]
  108 [label="State 108\n\l1048 template-id: operator-function-id • LESS GREATER\l1049            | operator-function-id • LESS template-argument-list GREATER\l1141 unqualified-id: operator-function-id •\l"]
  108 -> 331 [style=solid label="LESS"]
  108 -> "108R1141d" [label="[LESS]", style=solid]
 "108R1141d" [label="R1141", fillcolor=5, shape=diamond, style=filled]
  108 -> "108R1141" [style=solid]
 "108R1141" [label="R1141", fillcolor=3, shape=diamond, style=filled]
  109 [label="State 109\n\l989 simple-type-specifier: placeholder-type-specifier •\l"]
  109 -> "109R989" [style=solid]
 "109R989" [label="R989", fillcolor=3, shape=diamond, style=filled]
  110 [label="State 110\n\l226 declarator: ptr-declarator •\l"]
  110 -> "110R226" [style=solid]
 "110R226" [label="R226", fillcolor=3, shape=diamond, style=filled]
  111 [label="State 111\n\l892 ptr-declarator: ptr-operator • ptr-declarator\l"]
  111 -> 147 [style=solid label="IDENTIFIER"]
  111 -> 5 [style=solid label="OPEN_PAREN"]
  111 -> 6 [style=solid label="ELLIPSIS"]
  111 -> 7 [style=solid label="AND"]
  111 -> 9 [style=solid label="SCOPE"]
  111 -> 16 [style=solid label="AND_AND"]
  111 -> 17 [style=solid label="OPERATOR"]
  111 -> 134 [style=solid label="DECLTYPE"]
  111 -> 31 [style=solid label="MULT"]
  111 -> 35 [style=solid label="COMPL"]
  111 -> 65 [style=dashed label="class-name"]
  111 -> 68 [style=dashed label="conversion-function-id"]
  111 -> 75 [style=dashed label="declarator-id"]
  111 -> 138 [style=dashed label="decltype-specifier"]
  111 -> 84 [style=dashed label="enum-name"]
  111 -> 93 [style=dashed label="id-expression"]
  111 -> 95 [style=dashed label="literal-operator-id"]
  111 -> 99 [style=dashed label="namespace-alias"]
  111 -> 102 [style=dashed label="namespace-name"]
  111 -> 148 [style=dashed label="nested-name-specifier"]
  111 -> 149 [style=dashed label="noptr-declarator"]
  111 -> 108 [style=dashed label="operator-function-id"]
  111 -> 332 [style=dashed label="ptr-declarator"]
  111 -> 111 [style=dashed label="ptr-operator"]
  111 -> 112 [style=dashed label="qualified-id"]
  111 -> 114 [style=dashed label="simple-template-id"]
  111 -> 120 [style=dashed label="template-id"]
  111 -> 142 [style=dashed label="template-name"]
  111 -> 143 [style=dashed label="type-name"]
  111 -> 126 [style=dashed label="typedef-name"]
  111 -> 129 [style=dashed label="unqualified-id"]
  112 [label="State 112\n\l460 id-expression: qualified-id •\l"]
  112 -> "112R460" [style=solid]
 "112R460" [label="R460", fillcolor=3, shape=diamond, style=filled]
  113 [label="State 113\n\l 95 block-declaration: simple-declaration •\l"]
  113 -> "113R95" [style=solid]
 "113R95" [label="R95", fillcolor=3, shape=diamond, style=filled]
  114 [label="State 114\n\l146 class-name: simple-template-id •\l1047 template-id: simple-template-id •\l1111 typedef-name: simple-template-id •\l"]
  114 -> "114R146" [style=solid]
 "114R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  114 -> "114R1047d" [label="[IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, COMMA, SCOPE, OPEN_SQUARE, COLON, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, GREATER, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "114R1047d" [label="R1047", fillcolor=5, shape=diamond, style=filled]
  114 -> "114R1047" [label="[PLUS, MINUS, USING, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, CLOSE_SQUARE, CLOSE_BRACE, TEMPLATE, FINAL, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, OR_OR, DEREF, DOT, EQ_EQ, NOT_EQ, XOR, LESS, EXPORT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, REQUIRES, PLUS_PLUS, MINUS_MINUS, STATIC_ASSERT, OVERRIDE]", style=solid]
 "114R1047" [label="R1047", fillcolor=3, shape=diamond, style=filled]
  114 -> "114R1111d" [label="[IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, COMMA, SCOPE, OPEN_SQUARE, COLON, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, GREATER, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "114R1111d" [label="R1111", fillcolor=5, shape=diamond, style=filled]
  115 [label="State 115\n\l1103 type-specifier: simple-type-specifier •\l"]
  115 -> "115R1103" [style=solid]
 "115R1103" [label="R1103", fillcolor=3, shape=diamond, style=filled]
  116 [label="State 116\n\l101 block-declaration: static_assert-declaration •\l"]
  116 -> "116R101" [style=solid]
 "116R101" [label="R101", fillcolor=3, shape=diamond, style=filled]
  117 [label="State 117\n\l198 decl-specifier: storage-class-specifier •\l"]
  117 -> "117R198" [style=solid]
 "117R198" [label="R198", fillcolor=3, shape=diamond, style=filled]
  118 [label="State 118\n\l213 declaration: template-declaration •\l"]
  118 -> "118R213" [style=solid]
 "118R213" [label="R213", fillcolor=3, shape=diamond, style=filled]
  119 [label="State 119\n\l1043 template-declaration: template-head • declaration\l1044                     | template-head • concept-definition\l"]
  119 -> 1 [style=solid label="USING"]
  119 -> 2 [style=solid label="IDENTIFIER"]
  119 -> 3 [style=solid label="SEMICOLON"]
  119 -> 4 [style=solid label="ALIGNAS"]
  119 -> 5 [style=solid label="OPEN_PAREN"]
  119 -> 6 [style=solid label="ELLIPSIS"]
  119 -> 7 [style=solid label="AND"]
  119 -> 8 [style=solid label="ASM"]
  119 -> 9 [style=solid label="SCOPE"]
  119 -> 10 [style=solid label="OPEN_SQUARE"]
  119 -> 11 [style=solid label="VIRTUAL"]
  119 -> 12 [style=solid label="CLASS"]
  119 -> 13 [style=solid label="STRUCT"]
  119 -> 14 [style=solid label="UNION"]
  119 -> 15 [style=solid label="TEMPLATE"]
  119 -> 333 [style=solid label="CONCEPT"]
  119 -> 16 [style=solid label="AND_AND"]
  119 -> 17 [style=solid label="OPERATOR"]
  119 -> 18 [style=solid label="CONST"]
  119 -> 19 [style=solid label="VOLATILE"]
  119 -> 20 [style=solid label="FRIEND"]
  119 -> 21 [style=solid label="TYPEDEF"]
  119 -> 22 [style=solid label="CONSTEXPR"]
  119 -> 23 [style=solid label="CONSTEVAL"]
  119 -> 24 [style=solid label="CONSTINIT"]
  119 -> 25 [style=solid label="INLINE"]
  119 -> 26 [style=solid label="DECLTYPE"]
  119 -> 27 [style=solid label="ENUM"]
  119 -> 28 [style=solid label="EXTERN"]
  119 -> 29 [style=solid label="EXPLICIT"]
  119 -> 157 [style=solid label="EXPORT"]
  119 -> 31 [style=solid label="MULT"]
  119 -> 33 [style=solid label="IMPORT"]
  119 -> 34 [style=solid label="NAMESPACE"]
  119 -> 35 [style=solid label="COMPL"]
  119 -> 36 [style=solid label="AUTO"]
  119 -> 37 [style=solid label="CHAR"]
  119 -> 38 [style=solid label="CHAR8_T"]
  119 -> 39 [style=solid label="CHAR16_T"]
  119 -> 40 [style=solid label="CHAR32_T"]
  119 -> 41 [style=solid label="WCHAR_T"]
  119 -> 42 [style=solid label="BOOL"]
  119 -> 43 [style=solid label="SHORT"]
  119 -> 44 [style=solid label="INT"]
  119 -> 45 [style=solid label="LONG"]
  119 -> 46 [style=solid label="SIGNED"]
  119 -> 47 [style=solid label="UNSIGNED"]
  119 -> 48 [style=solid label="FLOAT"]
  119 -> 49 [style=solid label="DOUBLE"]
  119 -> 50 [style=solid label="VOID"]
  119 -> 51 [style=solid label="STATIC_ASSERT"]
  119 -> 52 [style=solid label="STATIC"]
  119 -> 53 [style=solid label="THREAD_LOCAL"]
  119 -> 54 [style=solid label="MUTABLE"]
  119 -> 55 [style=solid label="TYPENAME"]
  119 -> 56 [style=dashed label="alias-declaration"]
  119 -> 57 [style=dashed label="alignment-specifier"]
  119 -> 58 [style=dashed label="asm-declaration"]
  119 -> 59 [style=dashed label="attribute-declaration"]
  119 -> 60 [style=dashed label="attribute-specifier"]
  119 -> 61 [style=dashed label="attribute-specifier-seq"]
  119 -> 62 [style=dashed label="block-declaration"]
  119 -> 63 [style=dashed label="class-head"]
  119 -> 64 [style=dashed label="class-key"]
  119 -> 65 [style=dashed label="class-name"]
  119 -> 66 [style=dashed label="class-specifier"]
  119 -> 334 [style=dashed label="concept-definition"]
  119 -> 67 [style=dashed label="concept-name"]
  119 -> 68 [style=dashed label="conversion-function-id"]
  119 -> 69 [style=dashed label="cv-qualifier"]
  119 -> 70 [style=dashed label="decl-specifier"]
  119 -> 71 [style=dashed label="decl-specifier-seq"]
  119 -> 335 [style=dashed label="declaration"]
  119 -> 74 [style=dashed label="declarator"]
  119 -> 75 [style=dashed label="declarator-id"]
  119 -> 76 [style=dashed label="decltype-specifier"]
  119 -> 77 [style=dashed label="deduction-guide"]
  119 -> 78 [style=dashed label="defining-type-specifier"]
  119 -> 79 [style=dashed label="elaborated-enum-specifier"]
  119 -> 80 [style=dashed label="elaborated-type-specifier"]
  119 -> 81 [style=dashed label="empty-declaration"]
  119 -> 82 [style=dashed label="enum-head"]
  119 -> 83 [style=dashed label="enum-key"]
  119 -> 84 [style=dashed label="enum-name"]
  119 -> 85 [style=dashed label="enum-specifier"]
  119 -> 86 [style=dashed label="explicit-instantiation"]
  119 -> 87 [style=dashed label="explicit-specialization"]
  119 -> 88 [style=dashed label="explicit-specifier"]
  119 -> 89 [style=dashed label="export-declaration"]
  119 -> 90 [style=dashed label="function-definition"]
  119 -> 91 [style=dashed label="function-specifier"]
  119 -> 93 [style=dashed label="id-expression"]
  119 -> 94 [style=dashed label="linkage-specification"]
  119 -> 95 [style=dashed label="literal-operator-id"]
  119 -> 97 [style=dashed label="module-import-declaration"]
  119 -> 98 [style=dashed label="named-namespace-definition"]
  119 -> 99 [style=dashed label="namespace-alias"]
  119 -> 100 [style=dashed label="namespace-alias-definition"]
  119 -> 101 [style=dashed label="namespace-definition"]
  119 -> 102 [style=dashed label="namespace-name"]
  119 -> 103 [style=dashed label="nested-name-specifier"]
  119 -> 104 [style=dashed label="nested-namespace-definition"]
  119 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  119 -> 106 [style=dashed label="noptr-declarator"]
  119 -> 107 [style=dashed label="opaque-enum-declaration"]
  119 -> 108 [style=dashed label="operator-function-id"]
  119 -> 109 [style=dashed label="placeholder-type-specifier"]
  119 -> 110 [style=dashed label="ptr-declarator"]
  119 -> 111 [style=dashed label="ptr-operator"]
  119 -> 112 [style=dashed label="qualified-id"]
  119 -> 113 [style=dashed label="simple-declaration"]
  119 -> 114 [style=dashed label="simple-template-id"]
  119 -> 115 [style=dashed label="simple-type-specifier"]
  119 -> 116 [style=dashed label="static_assert-declaration"]
  119 -> 117 [style=dashed label="storage-class-specifier"]
  119 -> 118 [style=dashed label="template-declaration"]
  119 -> 119 [style=dashed label="template-head"]
  119 -> 120 [style=dashed label="template-id"]
  119 -> 121 [style=dashed label="template-name"]
  119 -> 123 [style=dashed label="type-constraint"]
  119 -> 124 [style=dashed label="type-name"]
  119 -> 125 [style=dashed label="type-specifier"]
  119 -> 126 [style=dashed label="typedef-name"]
  119 -> 127 [style=dashed label="typename-specifier"]
  119 -> 128 [style=dashed label="unnamed-namespace-definition"]
  119 -> 129 [style=dashed label="unqualified-id"]
  119 -> 130 [style=dashed label="using-declaration"]
  119 -> 131 [style=dashed label="using-directive"]
  119 -> 132 [style=dashed label="using-enum-declaration"]
  120 [label="State 120\n\l1146 unqualified-id: template-id •\l"]
  120 -> "120R1146" [style=solid]
 "120R1146" [label="R1146", fillcolor=3, shape=diamond, style=filled]
  121 [label="State 121\n\l232 deduction-guide: template-name • OPEN_PAREN parameter-declaration-clause CLOSE_PAREN DEREF simple-template-id SEMICOLON\l983 simple-template-id: template-name • LESS GREATER\l984                   | template-name • LESS template-argument-list GREATER\l991 simple-type-specifier: template-name •\l"]
  121 -> 336 [style=solid label="OPEN_PAREN"]
  121 -> 337 [style=solid label="LESS"]
  121 -> "121R991d" [label="[OPEN_PAREN]", style=solid]
 "121R991d" [label="R991", fillcolor=5, shape=diamond, style=filled]
  121 -> "121R991" [style=solid]
 "121R991" [label="R991", fillcolor=3, shape=diamond, style=filled]
  122 [label="State 122\n\l  0 $accept: translation-unit • $end\l"]
  122 -> 338 [style=solid label="$end"]
  123 [label="State 123\n\l848 placeholder-type-specifier: type-constraint • AUTO\l850                           | type-constraint • DECLTYPE OPEN_PAREN AUTO CLOSE_PAREN\l"]
  123 -> 339 [style=solid label="DECLTYPE"]
  123 -> 340 [style=solid label="AUTO"]
  124 [label="State 124\n\l656 nested-name-specifier: type-name • SCOPE\l986 simple-type-specifier: type-name •\l"]
  124 -> 341 [style=solid label="SCOPE"]
  124 -> "124R986d" [label="[SCOPE]", style=solid]
 "124R986d" [label="R986", fillcolor=5, shape=diamond, style=filled]
  124 -> "124R986" [style=solid]
 "124R986" [label="R986", fillcolor=3, shape=diamond, style=filled]
  125 [label="State 125\n\l235 defining-type-specifier: type-specifier •\l"]
  125 -> "125R235" [style=solid]
 "125R235" [label="R235", fillcolor=3, shape=diamond, style=filled]
  126 [label="State 126\n\l1080 type-name: typedef-name •\l"]
  126 -> "126R1080" [style=solid]
 "126R1080" [label="R1080", fillcolor=3, shape=diamond, style=filled]
  127 [label="State 127\n\l1105 type-specifier: typename-specifier •\l"]
  127 -> "127R1105" [style=solid]
 "127R1105" [label="R1105", fillcolor=3, shape=diamond, style=filled]
  128 [label="State 128\n\l651 namespace-definition: unnamed-namespace-definition •\l"]
  128 -> "128R651" [style=solid]
 "128R651" [label="R651", fillcolor=3, shape=diamond, style=filled]
  129 [label="State 129\n\l459 id-expression: unqualified-id •\l"]
  129 -> "129R459" [style=solid]
 "129R459" [label="R459", fillcolor=3, shape=diamond, style=filled]
  130 [label="State 130\n\l 98 block-declaration: using-declaration •\l"]
  130 -> "130R98" [style=solid]
 "130R98" [label="R98", fillcolor=3, shape=diamond, style=filled]
  131 [label="State 131\n\l100 block-declaration: using-directive •\l"]
  131 -> "131R100" [style=solid]
 "131R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
  132 [label="State 132\n\l 99 block-declaration: using-enum-declaration •\l"]
  132 -> "132R99" [style=solid]
 "132R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
  133 [label="State 133\n\l 13 alias-declaration: USING IDENTIFIER • EQ defining-type-id SEMICOLON\l 14                  | USING IDENTIFIER • attribute-specifier-seq EQ defining-type-id SEMICOLON\l145 class-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l"]
  133 -> 342 [style=solid label="EQ"]
  133 -> 4 [style=solid label="ALIGNAS"]
  133 -> 10 [style=solid label="OPEN_SQUARE"]
  133 -> 57 [style=dashed label="alignment-specifier"]
  133 -> 60 [style=dashed label="attribute-specifier"]
  133 -> 343 [style=dashed label="attribute-specifier-seq"]
  133 -> "133R145" [style=solid]
 "133R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  133 -> "133R294d" [label="[SCOPE]", style=solid]
 "133R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  133 -> "133R647d" [label="[SCOPE]", style=solid]
 "133R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  133 -> "133R653d" [label="[SCOPE]", style=solid]
 "133R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  133 -> "133R1052" [label="[LESS]", style=solid]
 "133R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  133 -> "133R1110d" [label="[SCOPE]", style=solid]
 "133R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  134 [label="State 134\n\l230 decltype-specifier: DECLTYPE • OPEN_PAREN expression CLOSE_PAREN\l"]
  134 -> 344 [style=solid label="OPEN_PAREN"]
  135 [label="State 135\n\l262 elaborated-enum-specifier: ENUM • IDENTIFIER\l263                          | ENUM • nested-name-specifier IDENTIFIER\l"]
  135 -> 221 [style=solid label="IDENTIFIER"]
  135 -> 9 [style=solid label="SCOPE"]
  135 -> 134 [style=solid label="DECLTYPE"]
  135 -> 65 [style=dashed label="class-name"]
  135 -> 138 [style=dashed label="decltype-specifier"]
  135 -> 84 [style=dashed label="enum-name"]
  135 -> 99 [style=dashed label="namespace-alias"]
  135 -> 102 [style=dashed label="namespace-name"]
  135 -> 224 [style=dashed label="nested-name-specifier"]
  135 -> 141 [style=dashed label="simple-template-id"]
  135 -> 142 [style=dashed label="template-name"]
  135 -> 143 [style=dashed label="type-name"]
  135 -> 126 [style=dashed label="typedef-name"]
  136 [label="State 136\n\l1172 using-directive: USING NAMESPACE • namespace-name SEMICOLON\l1174                | USING NAMESPACE • nested-name-specifier namespace-name SEMICOLON\l"]
  136 -> 253 [style=solid label="IDENTIFIER"]
  136 -> 9 [style=solid label="SCOPE"]
  136 -> 134 [style=solid label="DECLTYPE"]
  136 -> 65 [style=dashed label="class-name"]
  136 -> 138 [style=dashed label="decltype-specifier"]
  136 -> 84 [style=dashed label="enum-name"]
  136 -> 99 [style=dashed label="namespace-alias"]
  136 -> 345 [style=dashed label="namespace-name"]
  136 -> 346 [style=dashed label="nested-name-specifier"]
  136 -> 141 [style=dashed label="simple-template-id"]
  136 -> 142 [style=dashed label="template-name"]
  136 -> 143 [style=dashed label="type-name"]
  136 -> 126 [style=dashed label="typedef-name"]
  137 [label="State 137\n\l1165 using-declarator: TYPENAME • nested-name-specifier unqualified-id\l"]
  137 -> 253 [style=solid label="IDENTIFIER"]
  137 -> 9 [style=solid label="SCOPE"]
  137 -> 134 [style=solid label="DECLTYPE"]
  137 -> 65 [style=dashed label="class-name"]
  137 -> 138 [style=dashed label="decltype-specifier"]
  137 -> 84 [style=dashed label="enum-name"]
  137 -> 99 [style=dashed label="namespace-alias"]
  137 -> 102 [style=dashed label="namespace-name"]
  137 -> 347 [style=dashed label="nested-name-specifier"]
  137 -> 141 [style=dashed label="simple-template-id"]
  137 -> 142 [style=dashed label="template-name"]
  137 -> 143 [style=dashed label="type-name"]
  137 -> 126 [style=dashed label="typedef-name"]
  138 [label="State 138\n\l658 nested-name-specifier: decltype-specifier • SCOPE\l"]
  138 -> 302 [style=solid label="SCOPE"]
  139 [label="State 139\n\l1175 using-enum-declaration: USING elaborated-enum-specifier • SEMICOLON\l"]
  139 -> 348 [style=solid label="SEMICOLON"]
  140 [label="State 140\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l1166 using-declarator: nested-name-specifier • unqualified-id\l"]
  140 -> 349 [style=solid label="IDENTIFIER"]
  140 -> 350 [style=solid label="TEMPLATE"]
  140 -> 17 [style=solid label="OPERATOR"]
  140 -> 35 [style=solid label="COMPL"]
  140 -> 68 [style=dashed label="conversion-function-id"]
  140 -> 95 [style=dashed label="literal-operator-id"]
  140 -> 108 [style=dashed label="operator-function-id"]
  140 -> 351 [style=dashed label="simple-template-id"]
  140 -> 120 [style=dashed label="template-id"]
  140 -> 142 [style=dashed label="template-name"]
  140 -> 352 [style=dashed label="unqualified-id"]
  141 [label="State 141\n\l146 class-name: simple-template-id •\l1111 typedef-name: simple-template-id •\l"]
  141 -> "141R146" [style=solid]
 "141R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  141 -> "141R1111d" [label="[PLUS, MINUS, USING, IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SCOPE, OPEN_SQUARE, CLOSE_SQUARE, COLON, OPEN_BRACE, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, FINAL, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, AND_AND, OR_OR, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, DEREF, DOT, ENUM, EQ_EQ, NOT_EQ, XOR, EXTERN, LESS, GREATER, EXPLICIT, EXPORT, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, REQUIRES, COMPL, PLUS_PLUS, MINUS_MINUS, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME, OVERRIDE]", style=solid]
 "141R1111d" [label="R1111", fillcolor=5, shape=diamond, style=filled]
  142 [label="State 142\n\l983 simple-template-id: template-name • LESS GREATER\l984                   | template-name • LESS template-argument-list GREATER\l"]
  142 -> 337 [style=solid label="LESS"]
  143 [label="State 143\n\l656 nested-name-specifier: type-name • SCOPE\l"]
  143 -> 341 [style=solid label="SCOPE"]
  144 [label="State 144\n\l1167 using-declarator-list: using-declarator •\l1168                      | using-declarator • ELLIPSIS\l"]
  144 -> 353 [style=solid label="ELLIPSIS"]
  144 -> "144R1167" [style=solid]
 "144R1167" [label="R1167", fillcolor=3, shape=diamond, style=filled]
  145 [label="State 145\n\l1164 using-declaration: USING using-declarator-list • SEMICOLON\l1169 using-declarator-list: using-declarator-list • COMMA using-declarator\l1170                      | using-declarator-list • COMMA using-declarator ELLIPSIS\l"]
  145 -> 354 [style=solid label="SEMICOLON"]
  145 -> 355 [style=solid label="COMMA"]
  146 [label="State 146\n\l 15 alignment-specifier: ALIGNAS OPEN_PAREN • type-id CLOSE_PAREN\l 16                    | ALIGNAS OPEN_PAREN • type-id ELLIPSIS CLOSE_PAREN\l 17                    | ALIGNAS OPEN_PAREN • constant-expression CLOSE_PAREN\l 18                    | ALIGNAS OPEN_PAREN • constant-expression ELLIPSIS CLOSE_PAREN\l"]
  146 -> 356 [style=solid label="PLUS"]
  146 -> 357 [style=solid label="MINUS"]
  146 -> 2 [style=solid label="IDENTIFIER"]
  146 -> 358 [style=solid label="OPEN_PAREN"]
  146 -> 359 [style=solid label="AND"]
  146 -> 360 [style=solid label="SCOPE"]
  146 -> 361 [style=solid label="OPEN_SQUARE"]
  146 -> 362 [style=solid label="CO_AWAIT"]
  146 -> 363 [style=solid label="ZERO_LB"]
  146 -> 364 [style=solid label="ZERO_HB"]
  146 -> 365 [style=solid label="SINGLE_QUOTE"]
  146 -> 366 [style=solid label="FALSE"]
  146 -> 367 [style=solid label="TRUE"]
  146 -> 12 [style=solid label="CLASS"]
  146 -> 13 [style=solid label="STRUCT"]
  146 -> 14 [style=solid label="UNION"]
  146 -> 368 [style=solid label="NOEXCEPT"]
  146 -> 17 [style=solid label="OPERATOR"]
  146 -> 18 [style=solid label="CONST"]
  146 -> 19 [style=solid label="VOLATILE"]
  146 -> 26 [style=solid label="DECLTYPE"]
  146 -> 369 [style=solid label="DELETE"]
  146 -> 370 [style=solid label="DOT"]
  146 -> 135 [style=solid label="ENUM"]
  146 -> 184 [style=solid label="UNICODE_8"]
  146 -> 371 [style=solid label="MULT"]
  146 -> 199 [style=solid label="DOUBLE_QUOTE"]
  146 -> 372 [style=solid label="ZERO_LX"]
  146 -> 373 [style=solid label="ZERO_HX"]
  146 -> 374 [style=solid label="REQUIRES"]
  146 -> 375 [style=solid label="NEW"]
  146 -> 376 [style=solid label="COMPL"]
  146 -> 377 [style=solid label="NOT"]
  146 -> 378 [style=solid label="PLUS_PLUS"]
  146 -> 379 [style=solid label="MINUS_MINUS"]
  146 -> 380 [style=solid label="THIS"]
  146 -> 36 [style=solid label="AUTO"]
  146 -> 381 [style=solid label="NULLPTR"]
  146 -> 382 [style=solid label="DYNAMIC_CAST"]
  146 -> 383 [style=solid label="STATIC_CAST"]
  146 -> 384 [style=solid label="REINTERPRET_CAST"]
  146 -> 385 [style=solid label="CONST_CAST"]
  146 -> 386 [style=solid label="TYPEID"]
  146 -> 37 [style=solid label="CHAR"]
  146 -> 38 [style=solid label="CHAR8_T"]
  146 -> 39 [style=solid label="CHAR16_T"]
  146 -> 40 [style=solid label="CHAR32_T"]
  146 -> 41 [style=solid label="WCHAR_T"]
  146 -> 42 [style=solid label="BOOL"]
  146 -> 43 [style=solid label="SHORT"]
  146 -> 44 [style=solid label="INT"]
  146 -> 45 [style=solid label="LONG"]
  146 -> 46 [style=solid label="SIGNED"]
  146 -> 47 [style=solid label="UNSIGNED"]
  146 -> 48 [style=solid label="FLOAT"]
  146 -> 49 [style=solid label="DOUBLE"]
  146 -> 50 [style=solid label="VOID"]
  146 -> 55 [style=solid label="TYPENAME"]
  146 -> 387 [style=solid label="SIZEOF"]
  146 -> 388 [style=solid label="ALIGNOF"]
  146 -> 389 [style=solid label="'0'"]
  146 -> 390 [style=solid label="'1'"]
  146 -> 391 [style=solid label="'2'"]
  146 -> 392 [style=solid label="'3'"]
  146 -> 393 [style=solid label="'4'"]
  146 -> 394 [style=solid label="'5'"]
  146 -> 395 [style=solid label="'6'"]
  146 -> 396 [style=solid label="'7'"]
  146 -> 397 [style=solid label="'8'"]
  146 -> 398 [style=solid label="'9'"]
  146 -> 205 [style=solid label="'u'"]
  146 -> 206 [style=solid label="'U'"]
  146 -> 207 [style=solid label="'L'"]
  146 -> 208 [style=solid label="'R'"]
  146 -> 399 [style=dashed label="additive-expression"]
  146 -> 400 [style=dashed label="and-expression"]
  146 -> 401 [style=dashed label="await-expression"]
  146 -> 402 [style=dashed label="binary-literal"]
  146 -> 403 [style=dashed label="boolean-literal"]
  146 -> 404 [style=dashed label="cast-expression"]
  146 -> 405 [style=dashed label="character-literal"]
  146 -> 209 [style=dashed label="class-key"]
  146 -> 65 [style=dashed label="class-name"]
  146 -> 406 [style=dashed label="compare-expression"]
  146 -> 67 [style=dashed label="concept-name"]
  146 -> 407 [style=dashed label="conditional-expression"]
  146 -> 408 [style=dashed label="constant-expression"]
  146 -> 68 [style=dashed label="conversion-function-id"]
  146 -> 69 [style=dashed label="cv-qualifier"]
  146 -> 409 [style=dashed label="decimal-floating-point-literal"]
  146 -> 410 [style=dashed label="decimal-literal"]
  146 -> 76 [style=dashed label="decltype-specifier"]
  146 -> 411 [style=dashed label="delete-expression"]
  146 -> 412 [style=dashed label="digit"]
  146 -> 413 [style=dashed label="digit-sequence"]
  146 -> 79 [style=dashed label="elaborated-enum-specifier"]
  146 -> 80 [style=dashed label="elaborated-type-specifier"]
  146 -> 414 [style=dashed label="encoding-prefix"]
  146 -> 84 [style=dashed label="enum-name"]
  146 -> 415 [style=dashed label="equality-expression"]
  146 -> 416 [style=dashed label="exclusive-or-expression"]
  146 -> 417 [style=dashed label="floating-point-literal"]
  146 -> 418 [style=dashed label="fold-expression"]
  146 -> 419 [style=dashed label="fractional-constant"]
  146 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  146 -> 421 [style=dashed label="hexadecimal-literal"]
  146 -> 422 [style=dashed label="hexadecimal-prefix"]
  146 -> 423 [style=dashed label="id-expression"]
  146 -> 424 [style=dashed label="inclusive-or-expression"]
  146 -> 425 [style=dashed label="integer-literal"]
  146 -> 426 [style=dashed label="lambda-expression"]
  146 -> 427 [style=dashed label="lambda-introducer"]
  146 -> 428 [style=dashed label="literal"]
  146 -> 95 [style=dashed label="literal-operator-id"]
  146 -> 429 [style=dashed label="logical-and-expression"]
  146 -> 430 [style=dashed label="logical-or-expression"]
  146 -> 431 [style=dashed label="multiplicative-expression"]
  146 -> 99 [style=dashed label="namespace-alias"]
  146 -> 102 [style=dashed label="namespace-name"]
  146 -> 432 [style=dashed label="nested-name-specifier"]
  146 -> 433 [style=dashed label="new-expression"]
  146 -> 434 [style=dashed label="noexcept-expression"]
  146 -> 435 [style=dashed label="nonzero-digit"]
  146 -> 436 [style=dashed label="octal-literal"]
  146 -> 108 [style=dashed label="operator-function-id"]
  146 -> 109 [style=dashed label="placeholder-type-specifier"]
  146 -> 437 [style=dashed label="pm-expression"]
  146 -> 438 [style=dashed label="pointer-literal"]
  146 -> 439 [style=dashed label="postfix-expression"]
  146 -> 440 [style=dashed label="primary-expression"]
  146 -> 112 [style=dashed label="qualified-id"]
  146 -> 441 [style=dashed label="relational-expression"]
  146 -> 442 [style=dashed label="requires-expression"]
  146 -> 443 [style=dashed label="shift-expression"]
  146 -> 114 [style=dashed label="simple-template-id"]
  146 -> 444 [style=dashed label="simple-type-specifier"]
  146 -> 445 [style=dashed label="string-literal"]
  146 -> 120 [style=dashed label="template-id"]
  146 -> 215 [style=dashed label="template-name"]
  146 -> 123 [style=dashed label="type-constraint"]
  146 -> 446 [style=dashed label="type-id"]
  146 -> 124 [style=dashed label="type-name"]
  146 -> 216 [style=dashed label="type-specifier"]
  146 -> 447 [style=dashed label="type-specifier-seq"]
  146 -> 126 [style=dashed label="typedef-name"]
  146 -> 448 [style=dashed label="typename-specifier"]
  146 -> 449 [style=dashed label="unary-expression"]
  146 -> 450 [style=dashed label="unary-operator"]
  146 -> 129 [style=dashed label="unqualified-id"]
  146 -> 451 [style=dashed label="user-defined-character-literal"]
  146 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  146 -> 453 [style=dashed label="user-defined-integer-literal"]
  146 -> 454 [style=dashed label="user-defined-literal"]
  146 -> 455 [style=dashed label="user-defined-string-literal"]
  147 [label="State 147\n\l145 class-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l1140 unqualified-id: IDENTIFIER •\l"]
  147 -> "147R145" [label="[SCOPE]", style=solid]
 "147R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  147 -> "147R294d" [label="[SCOPE]", style=solid]
 "147R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  147 -> "147R647d" [label="[SCOPE]", style=solid]
 "147R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  147 -> "147R653d" [label="[SCOPE]", style=solid]
 "147R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  147 -> "147R1052" [label="[LESS]", style=solid]
 "147R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  147 -> "147R1110d" [label="[SCOPE]", style=solid]
 "147R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  147 -> "147R1140d" [label="[SCOPE, LESS]", style=solid]
 "147R1140d" [label="R1140", fillcolor=5, shape=diamond, style=filled]
  147 -> "147R1140" [label="[]", style=solid]
 "147R1140" [label="R1140", fillcolor=3, shape=diamond, style=filled]
  148 [label="State 148\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l901 ptr-operator: nested-name-specifier • MULT\l902             | nested-name-specifier • MULT attribute-specifier-seq\l903             | nested-name-specifier • MULT cv-qualifier-seq\l904             | nested-name-specifier • MULT attribute-specifier-seq cv-qualifier-seq\l909 qualified-id: nested-name-specifier • unqualified-id\l910             | nested-name-specifier • TEMPLATE unqualified-id\l"]
  148 -> 349 [style=solid label="IDENTIFIER"]
  148 -> 456 [style=solid label="TEMPLATE"]
  148 -> 17 [style=solid label="OPERATOR"]
  148 -> 322 [style=solid label="MULT"]
  148 -> 35 [style=solid label="COMPL"]
  148 -> 68 [style=dashed label="conversion-function-id"]
  148 -> 95 [style=dashed label="literal-operator-id"]
  148 -> 108 [style=dashed label="operator-function-id"]
  148 -> 351 [style=dashed label="simple-template-id"]
  148 -> 120 [style=dashed label="template-id"]
  148 -> 142 [style=dashed label="template-name"]
  148 -> 327 [style=dashed label="unqualified-id"]
  149 [label="State 149\n\l723 noptr-declarator: noptr-declarator • parameters-and-qualifiers\l724                 | noptr-declarator • OPEN_SQUARE CLOSE_SQUARE\l725                 | noptr-declarator • OPEN_SQUARE constant-expression CLOSE_SQUARE\l726                 | noptr-declarator • OPEN_SQUARE CLOSE_SQUARE attribute-specifier-seq\l727                 | noptr-declarator • OPEN_SQUARE constant-expression CLOSE_SQUARE attribute-specifier-seq\l891 ptr-declarator: noptr-declarator •\l"]
  149 -> 328 [style=solid label="OPEN_PAREN"]
  149 -> 329 [style=solid label="OPEN_SQUARE"]
  149 -> 457 [style=dashed label="parameters-and-qualifiers"]
  149 -> "149R891d" [label="[OPEN_PAREN]", style=solid]
 "149R891d" [label="R891", fillcolor=5, shape=diamond, style=filled]
  149 -> "149R891" [style=solid]
 "149R891" [label="R891", fillcolor=3, shape=diamond, style=filled]
  150 [label="State 150\n\l728 noptr-declarator: OPEN_PAREN ptr-declarator • CLOSE_PAREN\l"]
  150 -> 458 [style=solid label="CLOSE_PAREN"]
  151 [label="State 151\n\l228 declarator-id: ELLIPSIS id-expression •\l"]
  151 -> "151R228" [style=solid]
 "151R228" [label="R228", fillcolor=3, shape=diamond, style=filled]
  152 [label="State 152\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l909 qualified-id: nested-name-specifier • unqualified-id\l910             | nested-name-specifier • TEMPLATE unqualified-id\l"]
  152 -> 349 [style=solid label="IDENTIFIER"]
  152 -> 456 [style=solid label="TEMPLATE"]
  152 -> 17 [style=solid label="OPERATOR"]
  152 -> 35 [style=solid label="COMPL"]
  152 -> 68 [style=dashed label="conversion-function-id"]
  152 -> 95 [style=dashed label="literal-operator-id"]
  152 -> 108 [style=dashed label="operator-function-id"]
  152 -> 351 [style=dashed label="simple-template-id"]
  152 -> 120 [style=dashed label="template-id"]
  152 -> 142 [style=dashed label="template-name"]
  152 -> 327 [style=dashed label="unqualified-id"]
  153 [label="State 153\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l898 ptr-operator: AND attribute-specifier-seq •\l"]
  153 -> 4 [style=solid label="ALIGNAS"]
  153 -> 10 [style=solid label="OPEN_SQUARE"]
  153 -> 57 [style=dashed label="alignment-specifier"]
  153 -> 260 [style=dashed label="attribute-specifier"]
  153 -> "153R898d" [label="[ALIGNAS, OPEN_SQUARE]", style=solid]
 "153R898d" [label="R898", fillcolor=5, shape=diamond, style=filled]
  153 -> "153R898" [style=solid]
 "153R898" [label="R898", fillcolor=3, shape=diamond, style=filled]
  154 [label="State 154\n\l 22 asm-declaration: ASM OPEN_PAREN • string-literal CLOSE_PAREN SEMICOLON\l"]
  154 -> 184 [style=solid label="UNICODE_8"]
  154 -> 199 [style=solid label="DOUBLE_QUOTE"]
  154 -> 205 [style=solid label="'u'"]
  154 -> 206 [style=solid label="'U'"]
  154 -> 207 [style=solid label="'L'"]
  154 -> 208 [style=solid label="'R'"]
  154 -> 211 [style=dashed label="encoding-prefix"]
  154 -> 459 [style=dashed label="string-literal"]
  155 [label="State 155\n\l 50 attribute-specifier: OPEN_SQUARE OPEN_SQUARE • attribute-list CLOSE_SQUARE CLOSE_SQUARE\l 51                    | OPEN_SQUARE OPEN_SQUARE • attribute-using-prefix attribute-list CLOSE_SQUARE CLOSE_SQUARE\l"]
  155 -> 460 [style=solid label="USING"]
  155 -> 461 [style=solid label="IDENTIFIER"]
  155 -> 462 [style=dashed label="attribute"]
  155 -> 463 [style=dashed label="attribute-list"]
  155 -> 464 [style=dashed label="attribute-namespace"]
  155 -> 465 [style=dashed label="attribute-scoped-token"]
  155 -> 466 [style=dashed label="attribute-token"]
  155 -> 467 [style=dashed label="attribute-using-prefix"]
  156 [label="State 156\n\l321 explicit-specialization: TEMPLATE LESS • GREATER declaration\l1045 template-head: TEMPLATE LESS • template-parameter-list GREATER\l1046              | TEMPLATE LESS • template-parameter-list GREATER requires-clause\l"]
  156 -> 162 [style=solid label="IDENTIFIER"]
  156 -> 4 [style=solid label="ALIGNAS"]
  156 -> 9 [style=solid label="SCOPE"]
  156 -> 10 [style=solid label="OPEN_SQUARE"]
  156 -> 11 [style=solid label="VIRTUAL"]
  156 -> 468 [style=solid label="CLASS"]
  156 -> 13 [style=solid label="STRUCT"]
  156 -> 14 [style=solid label="UNION"]
  156 -> 469 [style=solid label="TEMPLATE"]
  156 -> 18 [style=solid label="CONST"]
  156 -> 19 [style=solid label="VOLATILE"]
  156 -> 20 [style=solid label="FRIEND"]
  156 -> 21 [style=solid label="TYPEDEF"]
  156 -> 22 [style=solid label="CONSTEXPR"]
  156 -> 23 [style=solid label="CONSTEVAL"]
  156 -> 24 [style=solid label="CONSTINIT"]
  156 -> 258 [style=solid label="INLINE"]
  156 -> 26 [style=solid label="DECLTYPE"]
  156 -> 27 [style=solid label="ENUM"]
  156 -> 259 [style=solid label="EXTERN"]
  156 -> 470 [style=solid label="GREATER"]
  156 -> 29 [style=solid label="EXPLICIT"]
  156 -> 471 [style=solid label="THIS"]
  156 -> 36 [style=solid label="AUTO"]
  156 -> 37 [style=solid label="CHAR"]
  156 -> 38 [style=solid label="CHAR8_T"]
  156 -> 39 [style=solid label="CHAR16_T"]
  156 -> 40 [style=solid label="CHAR32_T"]
  156 -> 41 [style=solid label="WCHAR_T"]
  156 -> 42 [style=solid label="BOOL"]
  156 -> 43 [style=solid label="SHORT"]
  156 -> 44 [style=solid label="INT"]
  156 -> 45 [style=solid label="LONG"]
  156 -> 46 [style=solid label="SIGNED"]
  156 -> 47 [style=solid label="UNSIGNED"]
  156 -> 48 [style=solid label="FLOAT"]
  156 -> 49 [style=solid label="DOUBLE"]
  156 -> 50 [style=solid label="VOID"]
  156 -> 52 [style=solid label="STATIC"]
  156 -> 53 [style=solid label="THREAD_LOCAL"]
  156 -> 54 [style=solid label="MUTABLE"]
  156 -> 472 [style=solid label="TYPENAME"]
  156 -> 57 [style=dashed label="alignment-specifier"]
  156 -> 60 [style=dashed label="attribute-specifier"]
  156 -> 473 [style=dashed label="attribute-specifier-seq"]
  156 -> 63 [style=dashed label="class-head"]
  156 -> 64 [style=dashed label="class-key"]
  156 -> 65 [style=dashed label="class-name"]
  156 -> 66 [style=dashed label="class-specifier"]
  156 -> 67 [style=dashed label="concept-name"]
  156 -> 69 [style=dashed label="cv-qualifier"]
  156 -> 70 [style=dashed label="decl-specifier"]
  156 -> 474 [style=dashed label="decl-specifier-seq"]
  156 -> 76 [style=dashed label="decltype-specifier"]
  156 -> 78 [style=dashed label="defining-type-specifier"]
  156 -> 79 [style=dashed label="elaborated-enum-specifier"]
  156 -> 80 [style=dashed label="elaborated-type-specifier"]
  156 -> 82 [style=dashed label="enum-head"]
  156 -> 263 [style=dashed label="enum-key"]
  156 -> 84 [style=dashed label="enum-name"]
  156 -> 85 [style=dashed label="enum-specifier"]
  156 -> 264 [style=dashed label="explicit-specifier"]
  156 -> 91 [style=dashed label="function-specifier"]
  156 -> 99 [style=dashed label="namespace-alias"]
  156 -> 102 [style=dashed label="namespace-name"]
  156 -> 212 [style=dashed label="nested-name-specifier"]
  156 -> 475 [style=dashed label="parameter-declaration"]
  156 -> 109 [style=dashed label="placeholder-type-specifier"]
  156 -> 141 [style=dashed label="simple-template-id"]
  156 -> 115 [style=dashed label="simple-type-specifier"]
  156 -> 117 [style=dashed label="storage-class-specifier"]
  156 -> 476 [style=dashed label="template-head"]
  156 -> 215 [style=dashed label="template-name"]
  156 -> 477 [style=dashed label="template-parameter"]
  156 -> 478 [style=dashed label="template-parameter-list"]
  156 -> 479 [style=dashed label="type-constraint"]
  156 -> 124 [style=dashed label="type-name"]
  156 -> 480 [style=dashed label="type-parameter"]
  156 -> 481 [style=dashed label="type-parameter-key"]
  156 -> 125 [style=dashed label="type-specifier"]
  156 -> 126 [style=dashed label="typedef-name"]
  156 -> 127 [style=dashed label="typename-specifier"]
  157 [label="State 157\n\l328 export-declaration: EXPORT • declaration\l329                   | EXPORT • OPEN_BRACE CLOSE_BRACE\l330                   | EXPORT • OPEN_BRACE declaration-seq CLOSE_BRACE\l331                   | EXPORT • module-import-declaration\l"]
  157 -> 1 [style=solid label="USING"]
  157 -> 2 [style=solid label="IDENTIFIER"]
  157 -> 3 [style=solid label="SEMICOLON"]
  157 -> 4 [style=solid label="ALIGNAS"]
  157 -> 5 [style=solid label="OPEN_PAREN"]
  157 -> 6 [style=solid label="ELLIPSIS"]
  157 -> 7 [style=solid label="AND"]
  157 -> 8 [style=solid label="ASM"]
  157 -> 9 [style=solid label="SCOPE"]
  157 -> 10 [style=solid label="OPEN_SQUARE"]
  157 -> 228 [style=solid label="OPEN_BRACE"]
  157 -> 11 [style=solid label="VIRTUAL"]
  157 -> 12 [style=solid label="CLASS"]
  157 -> 13 [style=solid label="STRUCT"]
  157 -> 14 [style=solid label="UNION"]
  157 -> 15 [style=solid label="TEMPLATE"]
  157 -> 16 [style=solid label="AND_AND"]
  157 -> 17 [style=solid label="OPERATOR"]
  157 -> 18 [style=solid label="CONST"]
  157 -> 19 [style=solid label="VOLATILE"]
  157 -> 20 [style=solid label="FRIEND"]
  157 -> 21 [style=solid label="TYPEDEF"]
  157 -> 22 [style=solid label="CONSTEXPR"]
  157 -> 23 [style=solid label="CONSTEVAL"]
  157 -> 24 [style=solid label="CONSTINIT"]
  157 -> 25 [style=solid label="INLINE"]
  157 -> 26 [style=solid label="DECLTYPE"]
  157 -> 27 [style=solid label="ENUM"]
  157 -> 28 [style=solid label="EXTERN"]
  157 -> 29 [style=solid label="EXPLICIT"]
  157 -> 157 [style=solid label="EXPORT"]
  157 -> 31 [style=solid label="MULT"]
  157 -> 33 [style=solid label="IMPORT"]
  157 -> 34 [style=solid label="NAMESPACE"]
  157 -> 35 [style=solid label="COMPL"]
  157 -> 36 [style=solid label="AUTO"]
  157 -> 37 [style=solid label="CHAR"]
  157 -> 38 [style=solid label="CHAR8_T"]
  157 -> 39 [style=solid label="CHAR16_T"]
  157 -> 40 [style=solid label="CHAR32_T"]
  157 -> 41 [style=solid label="WCHAR_T"]
  157 -> 42 [style=solid label="BOOL"]
  157 -> 43 [style=solid label="SHORT"]
  157 -> 44 [style=solid label="INT"]
  157 -> 45 [style=solid label="LONG"]
  157 -> 46 [style=solid label="SIGNED"]
  157 -> 47 [style=solid label="UNSIGNED"]
  157 -> 48 [style=solid label="FLOAT"]
  157 -> 49 [style=solid label="DOUBLE"]
  157 -> 50 [style=solid label="VOID"]
  157 -> 51 [style=solid label="STATIC_ASSERT"]
  157 -> 52 [style=solid label="STATIC"]
  157 -> 53 [style=solid label="THREAD_LOCAL"]
  157 -> 54 [style=solid label="MUTABLE"]
  157 -> 55 [style=solid label="TYPENAME"]
  157 -> 56 [style=dashed label="alias-declaration"]
  157 -> 57 [style=dashed label="alignment-specifier"]
  157 -> 58 [style=dashed label="asm-declaration"]
  157 -> 59 [style=dashed label="attribute-declaration"]
  157 -> 60 [style=dashed label="attribute-specifier"]
  157 -> 61 [style=dashed label="attribute-specifier-seq"]
  157 -> 62 [style=dashed label="block-declaration"]
  157 -> 63 [style=dashed label="class-head"]
  157 -> 64 [style=dashed label="class-key"]
  157 -> 65 [style=dashed label="class-name"]
  157 -> 66 [style=dashed label="class-specifier"]
  157 -> 67 [style=dashed label="concept-name"]
  157 -> 68 [style=dashed label="conversion-function-id"]
  157 -> 69 [style=dashed label="cv-qualifier"]
  157 -> 70 [style=dashed label="decl-specifier"]
  157 -> 71 [style=dashed label="decl-specifier-seq"]
  157 -> 230 [style=dashed label="declaration"]
  157 -> 74 [style=dashed label="declarator"]
  157 -> 75 [style=dashed label="declarator-id"]
  157 -> 76 [style=dashed label="decltype-specifier"]
  157 -> 77 [style=dashed label="deduction-guide"]
  157 -> 78 [style=dashed label="defining-type-specifier"]
  157 -> 79 [style=dashed label="elaborated-enum-specifier"]
  157 -> 80 [style=dashed label="elaborated-type-specifier"]
  157 -> 81 [style=dashed label="empty-declaration"]
  157 -> 82 [style=dashed label="enum-head"]
  157 -> 83 [style=dashed label="enum-key"]
  157 -> 84 [style=dashed label="enum-name"]
  157 -> 85 [style=dashed label="enum-specifier"]
  157 -> 86 [style=dashed label="explicit-instantiation"]
  157 -> 87 [style=dashed label="explicit-specialization"]
  157 -> 88 [style=dashed label="explicit-specifier"]
  157 -> 89 [style=dashed label="export-declaration"]
  157 -> 90 [style=dashed label="function-definition"]
  157 -> 91 [style=dashed label="function-specifier"]
  157 -> 93 [style=dashed label="id-expression"]
  157 -> 94 [style=dashed label="linkage-specification"]
  157 -> 95 [style=dashed label="literal-operator-id"]
  157 -> 231 [style=dashed label="module-import-declaration"]
  157 -> 98 [style=dashed label="named-namespace-definition"]
  157 -> 99 [style=dashed label="namespace-alias"]
  157 -> 100 [style=dashed label="namespace-alias-definition"]
  157 -> 101 [style=dashed label="namespace-definition"]
  157 -> 102 [style=dashed label="namespace-name"]
  157 -> 103 [style=dashed label="nested-name-specifier"]
  157 -> 104 [style=dashed label="nested-namespace-definition"]
  157 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  157 -> 106 [style=dashed label="noptr-declarator"]
  157 -> 107 [style=dashed label="opaque-enum-declaration"]
  157 -> 108 [style=dashed label="operator-function-id"]
  157 -> 109 [style=dashed label="placeholder-type-specifier"]
  157 -> 110 [style=dashed label="ptr-declarator"]
  157 -> 111 [style=dashed label="ptr-operator"]
  157 -> 112 [style=dashed label="qualified-id"]
  157 -> 113 [style=dashed label="simple-declaration"]
  157 -> 114 [style=dashed label="simple-template-id"]
  157 -> 115 [style=dashed label="simple-type-specifier"]
  157 -> 116 [style=dashed label="static_assert-declaration"]
  157 -> 117 [style=dashed label="storage-class-specifier"]
  157 -> 118 [style=dashed label="template-declaration"]
  157 -> 119 [style=dashed label="template-head"]
  157 -> 120 [style=dashed label="template-id"]
  157 -> 121 [style=dashed label="template-name"]
  157 -> 123 [style=dashed label="type-constraint"]
  157 -> 124 [style=dashed label="type-name"]
  157 -> 125 [style=dashed label="type-specifier"]
  157 -> 126 [style=dashed label="typedef-name"]
  157 -> 127 [style=dashed label="typename-specifier"]
  157 -> 128 [style=dashed label="unnamed-namespace-definition"]
  157 -> 129 [style=dashed label="unqualified-id"]
  157 -> 130 [style=dashed label="using-declaration"]
  157 -> 131 [style=dashed label="using-directive"]
  157 -> 132 [style=dashed label="using-enum-declaration"]
  158 [label="State 158\n\l320 explicit-instantiation: TEMPLATE declaration •\l"]
  158 -> "158R320" [style=solid]
 "158R320" [label="R320", fillcolor=3, shape=diamond, style=filled]
  159 [label="State 159\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l900 ptr-operator: AND_AND attribute-specifier-seq •\l"]
  159 -> 4 [style=solid label="ALIGNAS"]
  159 -> 10 [style=solid label="OPEN_SQUARE"]
  159 -> 57 [style=dashed label="alignment-specifier"]
  159 -> 260 [style=dashed label="attribute-specifier"]
  159 -> "159R900d" [label="[ALIGNAS, OPEN_SQUARE]", style=solid]
 "159R900d" [label="R900", fillcolor=5, shape=diamond, style=filled]
  159 -> "159R900" [style=solid]
 "159R900" [label="R900", fillcolor=3, shape=diamond, style=filled]
  160 [label="State 160\n\l769 overloadable-operator: PLUS •\l"]
  160 -> "160R769" [style=solid]
 "160R769" [label="R769", fillcolor=3, shape=diamond, style=filled]
  161 [label="State 161\n\l770 overloadable-operator: MINUS •\l"]
  161 -> "161R770" [style=solid]
 "161R770" [label="R770", fillcolor=3, shape=diamond, style=filled]
  162 [label="State 162\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l"]
  162 -> "162R145" [style=solid]
 "162R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  162 -> "162R163d" [label="[IDENTIFIER, EQ, SEMICOLON, ELLIPSIS, COMMA, DECLTYPE, LESS, GREATER, AUTO]", style=solid]
 "162R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  162 -> "162R294d" [label="[PLUS, MINUS, USING, IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SCOPE, OPEN_SQUARE, CLOSE_SQUARE, COLON, OPEN_BRACE, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, FINAL, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, AND_AND, OR_OR, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, DEREF, DOT, ENUM, EQ_EQ, NOT_EQ, XOR, EXTERN, LESS, GREATER, EXPLICIT, EXPORT, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, REQUIRES, COMPL, PLUS_PLUS, MINUS_MINUS, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME, OVERRIDE]", style=solid]
 "162R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  162 -> "162R647d" [label="[SCOPE]", style=solid]
 "162R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  162 -> "162R653d" [label="[SCOPE]", style=solid]
 "162R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  162 -> "162R1052d" [label="[PLUS, MINUS, USING, IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SCOPE, OPEN_SQUARE, CLOSE_SQUARE, COLON, OPEN_BRACE, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, FINAL, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, AND_AND, OR_OR, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, DEREF, DOT, ENUM, EQ_EQ, NOT_EQ, XOR, EXTERN, LESS, GREATER, EXPLICIT, EXPORT, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, REQUIRES, COMPL, PLUS_PLUS, MINUS_MINUS, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME, OVERRIDE]", style=solid]
 "162R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  162 -> "162R1110d" [label="[PLUS, MINUS, USING, IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SCOPE, OPEN_SQUARE, CLOSE_SQUARE, COLON, OPEN_BRACE, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, FINAL, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, AND_AND, OR_OR, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, DEREF, DOT, ENUM, EQ_EQ, NOT_EQ, XOR, EXTERN, LESS, GREATER, EXPLICIT, EXPORT, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, REQUIRES, COMPL, PLUS_PLUS, MINUS_MINUS, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME, OVERRIDE]", style=solid]
 "162R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  163 [label="State 163\n\l777 overloadable-operator: EQ •\l"]
  163 -> "163R777" [style=solid]
 "163R777" [label="R777", fillcolor=3, shape=diamond, style=filled]
  164 [label="State 164\n\l763 overloadable-operator: OPEN_PAREN • CLOSE_PAREN\l"]
  164 -> 482 [style=solid label="CLOSE_PAREN"]
  165 [label="State 165\n\l775 overloadable-operator: AND •\l"]
  165 -> "165R775" [style=solid]
 "165R775" [label="R775", fillcolor=3, shape=diamond, style=filled]
  166 [label="State 166\n\l780 overloadable-operator: MULT_EQ •\l"]
  166 -> "166R780" [style=solid]
 "166R780" [label="R780", fillcolor=3, shape=diamond, style=filled]
  167 [label="State 167\n\l781 overloadable-operator: DIV_EQ •\l"]
  167 -> "167R781" [style=solid]
 "167R781" [label="R781", fillcolor=3, shape=diamond, style=filled]
  168 [label="State 168\n\l782 overloadable-operator: MOD_EQ •\l"]
  168 -> "168R782" [style=solid]
 "168R782" [label="R782", fillcolor=3, shape=diamond, style=filled]
  169 [label="State 169\n\l778 overloadable-operator: PLUS_EQ •\l"]
  169 -> "169R778" [style=solid]
 "169R778" [label="R778", fillcolor=3, shape=diamond, style=filled]
  170 [label="State 170\n\l779 overloadable-operator: MINUS_EQ •\l"]
  170 -> "170R779" [style=solid]
 "170R779" [label="R779", fillcolor=3, shape=diamond, style=filled]
  171 [label="State 171\n\l798 overloadable-operator: RSHIFT_EQ •\l"]
  171 -> "171R798" [style=solid]
 "171R798" [label="R798", fillcolor=3, shape=diamond, style=filled]
  172 [label="State 172\n\l797 overloadable-operator: LSHIFT_EQ •\l"]
  172 -> "172R797" [style=solid]
 "172R797" [label="R797", fillcolor=3, shape=diamond, style=filled]
  173 [label="State 173\n\l784 overloadable-operator: AND_EQ •\l"]
  173 -> "173R784" [style=solid]
 "173R784" [label="R784", fillcolor=3, shape=diamond, style=filled]
  174 [label="State 174\n\l783 overloadable-operator: XOR_EQ •\l"]
  174 -> "174R783" [style=solid]
 "174R783" [label="R783", fillcolor=3, shape=diamond, style=filled]
  175 [label="State 175\n\l785 overloadable-operator: OR_EQ •\l"]
  175 -> "175R785" [style=solid]
 "175R785" [label="R785", fillcolor=3, shape=diamond, style=filled]
  176 [label="State 176\n\l801 overloadable-operator: COMMA •\l"]
  176 -> "176R801" [style=solid]
 "176R801" [label="R801", fillcolor=3, shape=diamond, style=filled]
  177 [label="State 177\n\l764 overloadable-operator: OPEN_SQUARE • CLOSE_SQUARE\l"]
  177 -> 483 [style=solid label="CLOSE_SQUARE"]
  178 [label="State 178\n\l762 overloadable-operator: CO_AWAIT •\l"]
  178 -> "178R762" [style=solid]
 "178R762" [label="R762", fillcolor=3, shape=diamond, style=filled]
  179 [label="State 179\n\l792 overloadable-operator: SPACESHIP •\l"]
  179 -> "179R792" [style=solid]
 "179R792" [label="R792", fillcolor=3, shape=diamond, style=filled]
  180 [label="State 180\n\l793 overloadable-operator: AND_AND •\l"]
  180 -> "180R793" [style=solid]
 "180R793" [label="R793", fillcolor=3, shape=diamond, style=filled]
  181 [label="State 181\n\l794 overloadable-operator: OR_OR •\l"]
  181 -> "181R794" [style=solid]
 "181R794" [label="R794", fillcolor=3, shape=diamond, style=filled]
  182 [label="State 182\n\l765 overloadable-operator: DEREF •\l"]
  182 -> "182R765" [style=solid]
 "182R765" [label="R765", fillcolor=3, shape=diamond, style=filled]
  183 [label="State 183\n\l759 overloadable-operator: DELETE •\l761                      | DELETE • OPEN_SQUARE CLOSE_SQUARE\l"]
  183 -> 484 [style=solid label="OPEN_SQUARE"]
  183 -> "183R759d" [label="[OPEN_SQUARE]", style=solid]
 "183R759d" [label="R759", fillcolor=5, shape=diamond, style=filled]
  183 -> "183R759" [style=solid]
 "183R759" [label="R759", fillcolor=3, shape=diamond, style=filled]
  184 [label="State 184\n\l276 encoding-prefix: UNICODE_8 •\l"]
  184 -> "184R276" [style=solid]
 "184R276" [label="R276", fillcolor=3, shape=diamond, style=filled]
  185 [label="State 185\n\l786 overloadable-operator: EQ_EQ •\l"]
  185 -> "185R786" [style=solid]
 "185R786" [label="R786", fillcolor=3, shape=diamond, style=filled]
  186 [label="State 186\n\l787 overloadable-operator: NOT_EQ •\l"]
  186 -> "186R787" [style=solid]
 "186R787" [label="R787", fillcolor=3, shape=diamond, style=filled]
  187 [label="State 187\n\l774 overloadable-operator: XOR •\l"]
  187 -> "187R774" [style=solid]
 "187R774" [label="R774", fillcolor=3, shape=diamond, style=filled]
  188 [label="State 188\n\l788 overloadable-operator: LESS •\l"]
  188 -> "188R788" [style=solid]
 "188R788" [label="R788", fillcolor=3, shape=diamond, style=filled]
  189 [label="State 189\n\l789 overloadable-operator: GREATER •\l"]
  189 -> "189R789" [style=solid]
 "189R789" [label="R789", fillcolor=3, shape=diamond, style=filled]
  190 [label="State 190\n\l771 overloadable-operator: MULT •\l"]
  190 -> "190R771" [style=solid]
 "190R771" [label="R771", fillcolor=3, shape=diamond, style=filled]
  191 [label="State 191\n\l772 overloadable-operator: DIV •\l"]
  191 -> "191R772" [style=solid]
 "191R772" [label="R772", fillcolor=3, shape=diamond, style=filled]
  192 [label="State 192\n\l773 overloadable-operator: MOD •\l"]
  192 -> "192R773" [style=solid]
 "192R773" [label="R773", fillcolor=3, shape=diamond, style=filled]
  193 [label="State 193\n\l776 overloadable-operator: OR •\l"]
  193 -> "193R776" [style=solid]
 "193R776" [label="R776", fillcolor=3, shape=diamond, style=filled]
  194 [label="State 194\n\l795 overloadable-operator: LSHIFT •\l"]
  194 -> "194R795" [style=solid]
 "194R795" [label="R795", fillcolor=3, shape=diamond, style=filled]
  195 [label="State 195\n\l796 overloadable-operator: RSHIFT •\l"]
  195 -> "195R796" [style=solid]
 "195R796" [label="R796", fillcolor=3, shape=diamond, style=filled]
  196 [label="State 196\n\l790 overloadable-operator: LESS_EQ •\l"]
  196 -> "196R790" [style=solid]
 "196R790" [label="R790", fillcolor=3, shape=diamond, style=filled]
  197 [label="State 197\n\l791 overloadable-operator: GREATER_EQ •\l"]
  197 -> "197R791" [style=solid]
 "197R791" [label="R791", fillcolor=3, shape=diamond, style=filled]
  198 [label="State 198\n\l766 overloadable-operator: DEREF_STAR •\l"]
  198 -> "198R766" [style=solid]
 "198R766" [label="R766", fillcolor=3, shape=diamond, style=filled]
  199 [label="State 199\n\l1031 string-literal: DOUBLE_QUOTE • DOUBLE_QUOTE\l1033               | DOUBLE_QUOTE • s-char-sequence DOUBLE_QUOTE\l"]
  199 -> 485 [style=solid label="BASIC_S_CHAR"]
  199 -> 486 [style=solid label="ESCAPE"]
  199 -> 487 [style=solid label="DOUBLE_QUOTE"]
  199 -> 488 [style=solid label="ESCAPE_LX"]
  199 -> 489 [style=solid label="ESCAPE_LU"]
  199 -> 490 [style=solid label="ESCAPE_HU"]
  199 -> 491 [style=dashed label="basic-s-char"]
  199 -> 492 [style=dashed label="conditional-escape-sequence"]
  199 -> 493 [style=dashed label="escape-sequence"]
  199 -> 494 [style=dashed label="hexadecimal-escape-sequence"]
  199 -> 495 [style=dashed label="numeric-escape-sequence"]
  199 -> 496 [style=dashed label="octal-escape-sequence"]
  199 -> 497 [style=dashed label="s-char"]
  199 -> 498 [style=dashed label="s-char-sequence"]
  199 -> 499 [style=dashed label="simple-escape-sequence"]
  199 -> 500 [style=dashed label="universal-character-name"]
  200 [label="State 200\n\l758 overloadable-operator: NEW •\l760                      | NEW • OPEN_SQUARE CLOSE_SQUARE\l"]
  200 -> 501 [style=solid label="OPEN_SQUARE"]
  200 -> "200R758d" [label="[OPEN_SQUARE]", style=solid]
 "200R758d" [label="R758", fillcolor=5, shape=diamond, style=filled]
  200 -> "200R758" [style=solid]
 "200R758" [label="R758", fillcolor=3, shape=diamond, style=filled]
  201 [label="State 201\n\l767 overloadable-operator: COMPL •\l"]
  201 -> "201R767" [style=solid]
 "201R767" [label="R767", fillcolor=3, shape=diamond, style=filled]
  202 [label="State 202\n\l768 overloadable-operator: NOT •\l"]
  202 -> "202R768" [style=solid]
 "202R768" [label="R768", fillcolor=3, shape=diamond, style=filled]
  203 [label="State 203\n\l799 overloadable-operator: PLUS_PLUS •\l"]
  203 -> "203R799" [style=solid]
 "203R799" [label="R799", fillcolor=3, shape=diamond, style=filled]
  204 [label="State 204\n\l800 overloadable-operator: MINUS_MINUS •\l"]
  204 -> "204R800" [style=solid]
 "204R800" [label="R800", fillcolor=3, shape=diamond, style=filled]
  205 [label="State 205\n\l277 encoding-prefix: 'u' •\l"]
  205 -> "205R277" [style=solid]
 "205R277" [label="R277", fillcolor=3, shape=diamond, style=filled]
  206 [label="State 206\n\l278 encoding-prefix: 'U' •\l"]
  206 -> "206R278" [style=solid]
 "206R278" [label="R278", fillcolor=3, shape=diamond, style=filled]
  207 [label="State 207\n\l279 encoding-prefix: 'L' •\l"]
  207 -> "207R279" [style=solid]
 "207R279" [label="R279", fillcolor=3, shape=diamond, style=filled]
  208 [label="State 208\n\l1035 string-literal: 'R' • raw-string\l"]
  208 -> 502 [style=solid label="BASIC_S_CHAR"]
  208 -> 503 [style=dashed label="raw-string"]
  209 [label="State 209\n\l264 elaborated-type-specifier: class-key • IDENTIFIER\l265                          | class-key • attribute-specifier-seq IDENTIFIER\l266                          | class-key • nested-name-specifier IDENTIFIER\l267                          | class-key • attribute-specifier-seq nested-name-specifier IDENTIFIER\l268                          | class-key • simple-template-id\l269                          | class-key • nested-name-specifier simple-template-id\l270                          | class-key • nested-name-specifier TEMPLATE simple-template-id\l"]
  209 -> 266 [style=solid label="IDENTIFIER"]
  209 -> 4 [style=solid label="ALIGNAS"]
  209 -> 9 [style=solid label="SCOPE"]
  209 -> 10 [style=solid label="OPEN_SQUARE"]
  209 -> 134 [style=solid label="DECLTYPE"]
  209 -> 57 [style=dashed label="alignment-specifier"]
  209 -> 60 [style=dashed label="attribute-specifier"]
  209 -> 504 [style=dashed label="attribute-specifier-seq"]
  209 -> 65 [style=dashed label="class-name"]
  209 -> 138 [style=dashed label="decltype-specifier"]
  209 -> 84 [style=dashed label="enum-name"]
  209 -> 99 [style=dashed label="namespace-alias"]
  209 -> 102 [style=dashed label="namespace-name"]
  209 -> 505 [style=dashed label="nested-name-specifier"]
  209 -> 273 [style=dashed label="simple-template-id"]
  209 -> 142 [style=dashed label="template-name"]
  209 -> 143 [style=dashed label="type-name"]
  209 -> 126 [style=dashed label="typedef-name"]
  210 [label="State 210\n\l179 conversion-function-id: OPERATOR conversion-type-id •\l"]
  210 -> "210R179" [style=solid]
 "210R179" [label="R179", fillcolor=3, shape=diamond, style=filled]
  211 [label="State 211\n\l1030 string-literal: encoding-prefix • DOUBLE_QUOTE DOUBLE_QUOTE\l1032               | encoding-prefix • DOUBLE_QUOTE s-char-sequence DOUBLE_QUOTE\l1034               | encoding-prefix • 'R' raw-string\l"]
  211 -> 506 [style=solid label="DOUBLE_QUOTE"]
  211 -> 507 [style=solid label="'R'"]
  212 [label="State 212\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l985 simple-type-specifier: nested-name-specifier • type-name\l987                      | nested-name-specifier • TEMPLATE simple-template-id\l990                      | nested-name-specifier • template-name\l1070 type-constraint: nested-name-specifier • concept-name\l1072                | nested-name-specifier • concept-name LESS GREATER\l1074                | nested-name-specifier • concept-name LESS template-argument-list GREATER\l"]
  212 -> 508 [style=solid label="IDENTIFIER"]
  212 -> 509 [style=solid label="TEMPLATE"]
  212 -> 65 [style=dashed label="class-name"]
  212 -> 323 [style=dashed label="concept-name"]
  212 -> 84 [style=dashed label="enum-name"]
  212 -> 510 [style=dashed label="simple-template-id"]
  212 -> 325 [style=dashed label="template-name"]
  212 -> 326 [style=dashed label="type-name"]
  212 -> 126 [style=dashed label="typedef-name"]
  213 [label="State 213\n\l755 operator-function-id: OPERATOR overloadable-operator •\l756                     | OPERATOR overloadable-operator • LESS GREATER\l757                     | OPERATOR overloadable-operator • LESS template-argument-list GREATER\l"]
  213 -> 511 [style=solid label="LESS"]
  213 -> "213R755d" [label="[LESS]", style=solid]
 "213R755d" [label="R755", fillcolor=5, shape=diamond, style=filled]
  213 -> "213R755" [style=solid]
 "213R755" [label="R755", fillcolor=3, shape=diamond, style=filled]
  214 [label="State 214\n\l561 literal-operator-id: OPERATOR string-literal • IDENTIFIER\l1163 user-defined-string-literal: string-literal • ud-suffix\l"]
  214 -> 512 [style=solid label="IDENTIFIER"]
  214 -> 513 [style=dashed label="ud-suffix"]
  215 [label="State 215\n\l983 simple-template-id: template-name • LESS GREATER\l984                   | template-name • LESS template-argument-list GREATER\l991 simple-type-specifier: template-name •\l"]
  215 -> 337 [style=solid label="LESS"]
  215 -> "215R991d" [label="[LESS]", style=solid]
 "215R991d" [label="R991", fillcolor=5, shape=diamond, style=filled]
  215 -> "215R991" [style=solid]
 "215R991" [label="R991", fillcolor=3, shape=diamond, style=filled]
  216 [label="State 216\n\l1107 type-specifier-seq: type-specifier •\l1108                   | type-specifier • attribute-specifier-seq\l1109                   | type-specifier • type-specifier-seq\l"]
  216 -> 162 [style=solid label="IDENTIFIER"]
  216 -> 4 [style=solid label="ALIGNAS"]
  216 -> 9 [style=solid label="SCOPE"]
  216 -> 10 [style=solid label="OPEN_SQUARE"]
  216 -> 12 [style=solid label="CLASS"]
  216 -> 13 [style=solid label="STRUCT"]
  216 -> 14 [style=solid label="UNION"]
  216 -> 18 [style=solid label="CONST"]
  216 -> 19 [style=solid label="VOLATILE"]
  216 -> 26 [style=solid label="DECLTYPE"]
  216 -> 135 [style=solid label="ENUM"]
  216 -> 36 [style=solid label="AUTO"]
  216 -> 37 [style=solid label="CHAR"]
  216 -> 38 [style=solid label="CHAR8_T"]
  216 -> 39 [style=solid label="CHAR16_T"]
  216 -> 40 [style=solid label="CHAR32_T"]
  216 -> 41 [style=solid label="WCHAR_T"]
  216 -> 42 [style=solid label="BOOL"]
  216 -> 43 [style=solid label="SHORT"]
  216 -> 44 [style=solid label="INT"]
  216 -> 45 [style=solid label="LONG"]
  216 -> 46 [style=solid label="SIGNED"]
  216 -> 47 [style=solid label="UNSIGNED"]
  216 -> 48 [style=solid label="FLOAT"]
  216 -> 49 [style=solid label="DOUBLE"]
  216 -> 50 [style=solid label="VOID"]
  216 -> 55 [style=solid label="TYPENAME"]
  216 -> 57 [style=dashed label="alignment-specifier"]
  216 -> 60 [style=dashed label="attribute-specifier"]
  216 -> 514 [style=dashed label="attribute-specifier-seq"]
  216 -> 209 [style=dashed label="class-key"]
  216 -> 65 [style=dashed label="class-name"]
  216 -> 67 [style=dashed label="concept-name"]
  216 -> 69 [style=dashed label="cv-qualifier"]
  216 -> 76 [style=dashed label="decltype-specifier"]
  216 -> 79 [style=dashed label="elaborated-enum-specifier"]
  216 -> 80 [style=dashed label="elaborated-type-specifier"]
  216 -> 84 [style=dashed label="enum-name"]
  216 -> 99 [style=dashed label="namespace-alias"]
  216 -> 102 [style=dashed label="namespace-name"]
  216 -> 212 [style=dashed label="nested-name-specifier"]
  216 -> 109 [style=dashed label="placeholder-type-specifier"]
  216 -> 141 [style=dashed label="simple-template-id"]
  216 -> 115 [style=dashed label="simple-type-specifier"]
  216 -> 215 [style=dashed label="template-name"]
  216 -> 123 [style=dashed label="type-constraint"]
  216 -> 124 [style=dashed label="type-name"]
  216 -> 216 [style=dashed label="type-specifier"]
  216 -> 515 [style=dashed label="type-specifier-seq"]
  216 -> 126 [style=dashed label="typedef-name"]
  216 -> 127 [style=dashed label="typename-specifier"]
  216 -> "216R1107d" [label="[IDENTIFIER, ALIGNAS, SCOPE, OPEN_SQUARE, CLASS, STRUCT, UNION, CONST, VOLATILE, DECLTYPE, ENUM, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPENAME]", style=solid]
 "216R1107d" [label="R1107", fillcolor=5, shape=diamond, style=filled]
  216 -> "216R1107" [style=solid]
 "216R1107" [label="R1107", fillcolor=3, shape=diamond, style=filled]
  217 [label="State 217\n\l180 conversion-type-id: type-specifier-seq •\l181                   | type-specifier-seq • conversion-declarator\l"]
  217 -> 253 [style=solid label="IDENTIFIER"]
  217 -> 7 [style=solid label="AND"]
  217 -> 9 [style=solid label="SCOPE"]
  217 -> 16 [style=solid label="AND_AND"]
  217 -> 134 [style=solid label="DECLTYPE"]
  217 -> 31 [style=solid label="MULT"]
  217 -> 65 [style=dashed label="class-name"]
  217 -> 516 [style=dashed label="conversion-declarator"]
  217 -> 138 [style=dashed label="decltype-specifier"]
  217 -> 84 [style=dashed label="enum-name"]
  217 -> 99 [style=dashed label="namespace-alias"]
  217 -> 102 [style=dashed label="namespace-name"]
  217 -> 517 [style=dashed label="nested-name-specifier"]
  217 -> 518 [style=dashed label="ptr-operator"]
  217 -> 141 [style=dashed label="simple-template-id"]
  217 -> 142 [style=dashed label="template-name"]
  217 -> 143 [style=dashed label="type-name"]
  217 -> 126 [style=dashed label="typedef-name"]
  217 -> "217R180d" [label="[IDENTIFIER, AND, SCOPE, AND_AND, DECLTYPE, MULT]", style=solid]
 "217R180d" [label="R180", fillcolor=5, shape=diamond, style=filled]
  217 -> "217R180" [style=solid]
 "217R180" [label="R180", fillcolor=3, shape=diamond, style=filled]
  218 [label="State 218\n\l562 literal-operator-id: OPERATOR user-defined-string-literal •\l"]
  218 -> "218R562" [style=solid]
 "218R562" [label="R562", fillcolor=3, shape=diamond, style=filled]
  219 [label="State 219\n\l643 named-namespace-definition: INLINE NAMESPACE • IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l645                           | INLINE NAMESPACE • attribute-specifier-seq IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l1136 unnamed-namespace-definition: INLINE NAMESPACE • OPEN_BRACE namespace-body CLOSE_BRACE\l1138                             | INLINE NAMESPACE • attribute-specifier-seq OPEN_BRACE namespace-body CLOSE_BRACE\l"]
  219 -> 519 [style=solid label="IDENTIFIER"]
  219 -> 4 [style=solid label="ALIGNAS"]
  219 -> 10 [style=solid label="OPEN_SQUARE"]
  219 -> 520 [style=solid label="OPEN_BRACE"]
  219 -> 57 [style=dashed label="alignment-specifier"]
  219 -> 60 [style=dashed label="attribute-specifier"]
  219 -> 521 [style=dashed label="attribute-specifier-seq"]
  220 [label="State 220\n\l230 decltype-specifier: DECLTYPE OPEN_PAREN • expression CLOSE_PAREN\l851 placeholder-type-specifier: DECLTYPE OPEN_PAREN • AUTO CLOSE_PAREN\l"]
  220 -> 356 [style=solid label="PLUS"]
  220 -> 357 [style=solid label="MINUS"]
  220 -> 2 [style=solid label="IDENTIFIER"]
  220 -> 358 [style=solid label="OPEN_PAREN"]
  220 -> 359 [style=solid label="AND"]
  220 -> 360 [style=solid label="SCOPE"]
  220 -> 361 [style=solid label="OPEN_SQUARE"]
  220 -> 362 [style=solid label="CO_AWAIT"]
  220 -> 363 [style=solid label="ZERO_LB"]
  220 -> 364 [style=solid label="ZERO_HB"]
  220 -> 365 [style=solid label="SINGLE_QUOTE"]
  220 -> 366 [style=solid label="FALSE"]
  220 -> 367 [style=solid label="TRUE"]
  220 -> 368 [style=solid label="NOEXCEPT"]
  220 -> 17 [style=solid label="OPERATOR"]
  220 -> 26 [style=solid label="DECLTYPE"]
  220 -> 369 [style=solid label="DELETE"]
  220 -> 370 [style=solid label="DOT"]
  220 -> 184 [style=solid label="UNICODE_8"]
  220 -> 371 [style=solid label="MULT"]
  220 -> 199 [style=solid label="DOUBLE_QUOTE"]
  220 -> 372 [style=solid label="ZERO_LX"]
  220 -> 373 [style=solid label="ZERO_HX"]
  220 -> 374 [style=solid label="REQUIRES"]
  220 -> 375 [style=solid label="NEW"]
  220 -> 376 [style=solid label="COMPL"]
  220 -> 377 [style=solid label="NOT"]
  220 -> 378 [style=solid label="PLUS_PLUS"]
  220 -> 379 [style=solid label="MINUS_MINUS"]
  220 -> 380 [style=solid label="THIS"]
  220 -> 522 [style=solid label="AUTO"]
  220 -> 381 [style=solid label="NULLPTR"]
  220 -> 382 [style=solid label="DYNAMIC_CAST"]
  220 -> 383 [style=solid label="STATIC_CAST"]
  220 -> 384 [style=solid label="REINTERPRET_CAST"]
  220 -> 385 [style=solid label="CONST_CAST"]
  220 -> 386 [style=solid label="TYPEID"]
  220 -> 37 [style=solid label="CHAR"]
  220 -> 38 [style=solid label="CHAR8_T"]
  220 -> 39 [style=solid label="CHAR16_T"]
  220 -> 40 [style=solid label="CHAR32_T"]
  220 -> 41 [style=solid label="WCHAR_T"]
  220 -> 42 [style=solid label="BOOL"]
  220 -> 43 [style=solid label="SHORT"]
  220 -> 44 [style=solid label="INT"]
  220 -> 45 [style=solid label="LONG"]
  220 -> 46 [style=solid label="SIGNED"]
  220 -> 47 [style=solid label="UNSIGNED"]
  220 -> 48 [style=solid label="FLOAT"]
  220 -> 49 [style=solid label="DOUBLE"]
  220 -> 50 [style=solid label="VOID"]
  220 -> 523 [style=solid label="THROW"]
  220 -> 55 [style=solid label="TYPENAME"]
  220 -> 387 [style=solid label="SIZEOF"]
  220 -> 388 [style=solid label="ALIGNOF"]
  220 -> 524 [style=solid label="CO_YIELD"]
  220 -> 389 [style=solid label="'0'"]
  220 -> 390 [style=solid label="'1'"]
  220 -> 391 [style=solid label="'2'"]
  220 -> 392 [style=solid label="'3'"]
  220 -> 393 [style=solid label="'4'"]
  220 -> 394 [style=solid label="'5'"]
  220 -> 395 [style=solid label="'6'"]
  220 -> 396 [style=solid label="'7'"]
  220 -> 397 [style=solid label="'8'"]
  220 -> 398 [style=solid label="'9'"]
  220 -> 205 [style=solid label="'u'"]
  220 -> 206 [style=solid label="'U'"]
  220 -> 207 [style=solid label="'L'"]
  220 -> 208 [style=solid label="'R'"]
  220 -> 399 [style=dashed label="additive-expression"]
  220 -> 400 [style=dashed label="and-expression"]
  220 -> 525 [style=dashed label="assignment-expression"]
  220 -> 401 [style=dashed label="await-expression"]
  220 -> 402 [style=dashed label="binary-literal"]
  220 -> 403 [style=dashed label="boolean-literal"]
  220 -> 404 [style=dashed label="cast-expression"]
  220 -> 405 [style=dashed label="character-literal"]
  220 -> 65 [style=dashed label="class-name"]
  220 -> 406 [style=dashed label="compare-expression"]
  220 -> 67 [style=dashed label="concept-name"]
  220 -> 526 [style=dashed label="conditional-expression"]
  220 -> 68 [style=dashed label="conversion-function-id"]
  220 -> 409 [style=dashed label="decimal-floating-point-literal"]
  220 -> 410 [style=dashed label="decimal-literal"]
  220 -> 76 [style=dashed label="decltype-specifier"]
  220 -> 411 [style=dashed label="delete-expression"]
  220 -> 412 [style=dashed label="digit"]
  220 -> 413 [style=dashed label="digit-sequence"]
  220 -> 414 [style=dashed label="encoding-prefix"]
  220 -> 84 [style=dashed label="enum-name"]
  220 -> 415 [style=dashed label="equality-expression"]
  220 -> 416 [style=dashed label="exclusive-or-expression"]
  220 -> 527 [style=dashed label="expression"]
  220 -> 417 [style=dashed label="floating-point-literal"]
  220 -> 418 [style=dashed label="fold-expression"]
  220 -> 419 [style=dashed label="fractional-constant"]
  220 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  220 -> 421 [style=dashed label="hexadecimal-literal"]
  220 -> 422 [style=dashed label="hexadecimal-prefix"]
  220 -> 423 [style=dashed label="id-expression"]
  220 -> 424 [style=dashed label="inclusive-or-expression"]
  220 -> 425 [style=dashed label="integer-literal"]
  220 -> 426 [style=dashed label="lambda-expression"]
  220 -> 427 [style=dashed label="lambda-introducer"]
  220 -> 428 [style=dashed label="literal"]
  220 -> 95 [style=dashed label="literal-operator-id"]
  220 -> 429 [style=dashed label="logical-and-expression"]
  220 -> 528 [style=dashed label="logical-or-expression"]
  220 -> 431 [style=dashed label="multiplicative-expression"]
  220 -> 99 [style=dashed label="namespace-alias"]
  220 -> 102 [style=dashed label="namespace-name"]
  220 -> 432 [style=dashed label="nested-name-specifier"]
  220 -> 433 [style=dashed label="new-expression"]
  220 -> 434 [style=dashed label="noexcept-expression"]
  220 -> 435 [style=dashed label="nonzero-digit"]
  220 -> 436 [style=dashed label="octal-literal"]
  220 -> 108 [style=dashed label="operator-function-id"]
  220 -> 109 [style=dashed label="placeholder-type-specifier"]
  220 -> 437 [style=dashed label="pm-expression"]
  220 -> 438 [style=dashed label="pointer-literal"]
  220 -> 439 [style=dashed label="postfix-expression"]
  220 -> 440 [style=dashed label="primary-expression"]
  220 -> 112 [style=dashed label="qualified-id"]
  220 -> 441 [style=dashed label="relational-expression"]
  220 -> 442 [style=dashed label="requires-expression"]
  220 -> 443 [style=dashed label="shift-expression"]
  220 -> 114 [style=dashed label="simple-template-id"]
  220 -> 529 [style=dashed label="simple-type-specifier"]
  220 -> 445 [style=dashed label="string-literal"]
  220 -> 120 [style=dashed label="template-id"]
  220 -> 215 [style=dashed label="template-name"]
  220 -> 530 [style=dashed label="throw-expression"]
  220 -> 123 [style=dashed label="type-constraint"]
  220 -> 124 [style=dashed label="type-name"]
  220 -> 126 [style=dashed label="typedef-name"]
  220 -> 531 [style=dashed label="typename-specifier"]
  220 -> 449 [style=dashed label="unary-expression"]
  220 -> 450 [style=dashed label="unary-operator"]
  220 -> 129 [style=dashed label="unqualified-id"]
  220 -> 451 [style=dashed label="user-defined-character-literal"]
  220 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  220 -> 453 [style=dashed label="user-defined-integer-literal"]
  220 -> 454 [style=dashed label="user-defined-literal"]
  220 -> 455 [style=dashed label="user-defined-string-literal"]
  220 -> 532 [style=dashed label="yield-expression"]
  221 [label="State 221\n\l145 class-name: IDENTIFIER •\l262 elaborated-enum-specifier: ENUM IDENTIFIER •\l294 enum-name: IDENTIFIER •\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l"]
  221 -> "221R145" [label="[SCOPE]", style=solid]
 "221R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  221 -> "221R262d" [label="[SCOPE]", style=solid]
 "221R262d" [label="R262", fillcolor=5, shape=diamond, style=filled]
  221 -> "221R262" [style=solid]
 "221R262" [label="R262", fillcolor=3, shape=diamond, style=filled]
  221 -> "221R294d" [label="[SCOPE]", style=solid]
 "221R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  221 -> "221R647d" [label="[SCOPE]", style=solid]
 "221R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  221 -> "221R653d" [label="[SCOPE]", style=solid]
 "221R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  221 -> "221R1052d" [label="[LESS]", style=solid]
 "221R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  221 -> "221R1110d" [label="[SCOPE]", style=solid]
 "221R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  222 [label="State 222\n\l292 enum-key: ENUM CLASS •\l"]
  222 -> "222R292" [style=solid]
 "222R292" [label="R292", fillcolor=3, shape=diamond, style=filled]
  223 [label="State 223\n\l293 enum-key: ENUM STRUCT •\l"]
  223 -> "223R293" [style=solid]
 "223R293" [label="R293", fillcolor=3, shape=diamond, style=filled]
  224 [label="State 224\n\l263 elaborated-enum-specifier: ENUM nested-name-specifier • IDENTIFIER\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l"]
  224 -> 533 [style=solid label="IDENTIFIER"]
  224 -> 350 [style=solid label="TEMPLATE"]
  224 -> 534 [style=dashed label="simple-template-id"]
  224 -> 142 [style=dashed label="template-name"]
  225 [label="State 225\n\l319 explicit-instantiation: EXTERN TEMPLATE • declaration\l"]
  225 -> 1 [style=solid label="USING"]
  225 -> 2 [style=solid label="IDENTIFIER"]
  225 -> 3 [style=solid label="SEMICOLON"]
  225 -> 4 [style=solid label="ALIGNAS"]
  225 -> 5 [style=solid label="OPEN_PAREN"]
  225 -> 6 [style=solid label="ELLIPSIS"]
  225 -> 7 [style=solid label="AND"]
  225 -> 8 [style=solid label="ASM"]
  225 -> 9 [style=solid label="SCOPE"]
  225 -> 10 [style=solid label="OPEN_SQUARE"]
  225 -> 11 [style=solid label="VIRTUAL"]
  225 -> 12 [style=solid label="CLASS"]
  225 -> 13 [style=solid label="STRUCT"]
  225 -> 14 [style=solid label="UNION"]
  225 -> 15 [style=solid label="TEMPLATE"]
  225 -> 16 [style=solid label="AND_AND"]
  225 -> 17 [style=solid label="OPERATOR"]
  225 -> 18 [style=solid label="CONST"]
  225 -> 19 [style=solid label="VOLATILE"]
  225 -> 20 [style=solid label="FRIEND"]
  225 -> 21 [style=solid label="TYPEDEF"]
  225 -> 22 [style=solid label="CONSTEXPR"]
  225 -> 23 [style=solid label="CONSTEVAL"]
  225 -> 24 [style=solid label="CONSTINIT"]
  225 -> 25 [style=solid label="INLINE"]
  225 -> 26 [style=solid label="DECLTYPE"]
  225 -> 27 [style=solid label="ENUM"]
  225 -> 28 [style=solid label="EXTERN"]
  225 -> 29 [style=solid label="EXPLICIT"]
  225 -> 157 [style=solid label="EXPORT"]
  225 -> 31 [style=solid label="MULT"]
  225 -> 33 [style=solid label="IMPORT"]
  225 -> 34 [style=solid label="NAMESPACE"]
  225 -> 35 [style=solid label="COMPL"]
  225 -> 36 [style=solid label="AUTO"]
  225 -> 37 [style=solid label="CHAR"]
  225 -> 38 [style=solid label="CHAR8_T"]
  225 -> 39 [style=solid label="CHAR16_T"]
  225 -> 40 [style=solid label="CHAR32_T"]
  225 -> 41 [style=solid label="WCHAR_T"]
  225 -> 42 [style=solid label="BOOL"]
  225 -> 43 [style=solid label="SHORT"]
  225 -> 44 [style=solid label="INT"]
  225 -> 45 [style=solid label="LONG"]
  225 -> 46 [style=solid label="SIGNED"]
  225 -> 47 [style=solid label="UNSIGNED"]
  225 -> 48 [style=solid label="FLOAT"]
  225 -> 49 [style=solid label="DOUBLE"]
  225 -> 50 [style=solid label="VOID"]
  225 -> 51 [style=solid label="STATIC_ASSERT"]
  225 -> 52 [style=solid label="STATIC"]
  225 -> 53 [style=solid label="THREAD_LOCAL"]
  225 -> 54 [style=solid label="MUTABLE"]
  225 -> 55 [style=solid label="TYPENAME"]
  225 -> 56 [style=dashed label="alias-declaration"]
  225 -> 57 [style=dashed label="alignment-specifier"]
  225 -> 58 [style=dashed label="asm-declaration"]
  225 -> 59 [style=dashed label="attribute-declaration"]
  225 -> 60 [style=dashed label="attribute-specifier"]
  225 -> 61 [style=dashed label="attribute-specifier-seq"]
  225 -> 62 [style=dashed label="block-declaration"]
  225 -> 63 [style=dashed label="class-head"]
  225 -> 64 [style=dashed label="class-key"]
  225 -> 65 [style=dashed label="class-name"]
  225 -> 66 [style=dashed label="class-specifier"]
  225 -> 67 [style=dashed label="concept-name"]
  225 -> 68 [style=dashed label="conversion-function-id"]
  225 -> 69 [style=dashed label="cv-qualifier"]
  225 -> 70 [style=dashed label="decl-specifier"]
  225 -> 71 [style=dashed label="decl-specifier-seq"]
  225 -> 535 [style=dashed label="declaration"]
  225 -> 74 [style=dashed label="declarator"]
  225 -> 75 [style=dashed label="declarator-id"]
  225 -> 76 [style=dashed label="decltype-specifier"]
  225 -> 77 [style=dashed label="deduction-guide"]
  225 -> 78 [style=dashed label="defining-type-specifier"]
  225 -> 79 [style=dashed label="elaborated-enum-specifier"]
  225 -> 80 [style=dashed label="elaborated-type-specifier"]
  225 -> 81 [style=dashed label="empty-declaration"]
  225 -> 82 [style=dashed label="enum-head"]
  225 -> 83 [style=dashed label="enum-key"]
  225 -> 84 [style=dashed label="enum-name"]
  225 -> 85 [style=dashed label="enum-specifier"]
  225 -> 86 [style=dashed label="explicit-instantiation"]
  225 -> 87 [style=dashed label="explicit-specialization"]
  225 -> 88 [style=dashed label="explicit-specifier"]
  225 -> 89 [style=dashed label="export-declaration"]
  225 -> 90 [style=dashed label="function-definition"]
  225 -> 91 [style=dashed label="function-specifier"]
  225 -> 93 [style=dashed label="id-expression"]
  225 -> 94 [style=dashed label="linkage-specification"]
  225 -> 95 [style=dashed label="literal-operator-id"]
  225 -> 97 [style=dashed label="module-import-declaration"]
  225 -> 98 [style=dashed label="named-namespace-definition"]
  225 -> 99 [style=dashed label="namespace-alias"]
  225 -> 100 [style=dashed label="namespace-alias-definition"]
  225 -> 101 [style=dashed label="namespace-definition"]
  225 -> 102 [style=dashed label="namespace-name"]
  225 -> 103 [style=dashed label="nested-name-specifier"]
  225 -> 104 [style=dashed label="nested-namespace-definition"]
  225 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  225 -> 106 [style=dashed label="noptr-declarator"]
  225 -> 107 [style=dashed label="opaque-enum-declaration"]
  225 -> 108 [style=dashed label="operator-function-id"]
  225 -> 109 [style=dashed label="placeholder-type-specifier"]
  225 -> 110 [style=dashed label="ptr-declarator"]
  225 -> 111 [style=dashed label="ptr-operator"]
  225 -> 112 [style=dashed label="qualified-id"]
  225 -> 113 [style=dashed label="simple-declaration"]
  225 -> 114 [style=dashed label="simple-template-id"]
  225 -> 115 [style=dashed label="simple-type-specifier"]
  225 -> 116 [style=dashed label="static_assert-declaration"]
  225 -> 117 [style=dashed label="storage-class-specifier"]
  225 -> 118 [style=dashed label="template-declaration"]
  225 -> 119 [style=dashed label="template-head"]
  225 -> 120 [style=dashed label="template-id"]
  225 -> 121 [style=dashed label="template-name"]
  225 -> 123 [style=dashed label="type-constraint"]
  225 -> 124 [style=dashed label="type-name"]
  225 -> 125 [style=dashed label="type-specifier"]
  225 -> 126 [style=dashed label="typedef-name"]
  225 -> 127 [style=dashed label="typename-specifier"]
  225 -> 128 [style=dashed label="unnamed-namespace-definition"]
  225 -> 129 [style=dashed label="unqualified-id"]
  225 -> 130 [style=dashed label="using-declaration"]
  225 -> 131 [style=dashed label="using-directive"]
  225 -> 132 [style=dashed label="using-enum-declaration"]
  226 [label="State 226\n\l551 linkage-specification: EXTERN string-literal • OPEN_BRACE CLOSE_BRACE\l552                      | EXTERN string-literal • OPEN_BRACE declaration-seq CLOSE_BRACE\l553                      | EXTERN string-literal • declaration\l"]
  226 -> 1 [style=solid label="USING"]
  226 -> 2 [style=solid label="IDENTIFIER"]
  226 -> 3 [style=solid label="SEMICOLON"]
  226 -> 4 [style=solid label="ALIGNAS"]
  226 -> 5 [style=solid label="OPEN_PAREN"]
  226 -> 6 [style=solid label="ELLIPSIS"]
  226 -> 7 [style=solid label="AND"]
  226 -> 8 [style=solid label="ASM"]
  226 -> 9 [style=solid label="SCOPE"]
  226 -> 10 [style=solid label="OPEN_SQUARE"]
  226 -> 536 [style=solid label="OPEN_BRACE"]
  226 -> 11 [style=solid label="VIRTUAL"]
  226 -> 12 [style=solid label="CLASS"]
  226 -> 13 [style=solid label="STRUCT"]
  226 -> 14 [style=solid label="UNION"]
  226 -> 15 [style=solid label="TEMPLATE"]
  226 -> 16 [style=solid label="AND_AND"]
  226 -> 17 [style=solid label="OPERATOR"]
  226 -> 18 [style=solid label="CONST"]
  226 -> 19 [style=solid label="VOLATILE"]
  226 -> 20 [style=solid label="FRIEND"]
  226 -> 21 [style=solid label="TYPEDEF"]
  226 -> 22 [style=solid label="CONSTEXPR"]
  226 -> 23 [style=solid label="CONSTEVAL"]
  226 -> 24 [style=solid label="CONSTINIT"]
  226 -> 25 [style=solid label="INLINE"]
  226 -> 26 [style=solid label="DECLTYPE"]
  226 -> 27 [style=solid label="ENUM"]
  226 -> 28 [style=solid label="EXTERN"]
  226 -> 29 [style=solid label="EXPLICIT"]
  226 -> 157 [style=solid label="EXPORT"]
  226 -> 31 [style=solid label="MULT"]
  226 -> 33 [style=solid label="IMPORT"]
  226 -> 34 [style=solid label="NAMESPACE"]
  226 -> 35 [style=solid label="COMPL"]
  226 -> 36 [style=solid label="AUTO"]
  226 -> 37 [style=solid label="CHAR"]
  226 -> 38 [style=solid label="CHAR8_T"]
  226 -> 39 [style=solid label="CHAR16_T"]
  226 -> 40 [style=solid label="CHAR32_T"]
  226 -> 41 [style=solid label="WCHAR_T"]
  226 -> 42 [style=solid label="BOOL"]
  226 -> 43 [style=solid label="SHORT"]
  226 -> 44 [style=solid label="INT"]
  226 -> 45 [style=solid label="LONG"]
  226 -> 46 [style=solid label="SIGNED"]
  226 -> 47 [style=solid label="UNSIGNED"]
  226 -> 48 [style=solid label="FLOAT"]
  226 -> 49 [style=solid label="DOUBLE"]
  226 -> 50 [style=solid label="VOID"]
  226 -> 51 [style=solid label="STATIC_ASSERT"]
  226 -> 52 [style=solid label="STATIC"]
  226 -> 53 [style=solid label="THREAD_LOCAL"]
  226 -> 54 [style=solid label="MUTABLE"]
  226 -> 55 [style=solid label="TYPENAME"]
  226 -> 56 [style=dashed label="alias-declaration"]
  226 -> 57 [style=dashed label="alignment-specifier"]
  226 -> 58 [style=dashed label="asm-declaration"]
  226 -> 59 [style=dashed label="attribute-declaration"]
  226 -> 60 [style=dashed label="attribute-specifier"]
  226 -> 61 [style=dashed label="attribute-specifier-seq"]
  226 -> 62 [style=dashed label="block-declaration"]
  226 -> 63 [style=dashed label="class-head"]
  226 -> 64 [style=dashed label="class-key"]
  226 -> 65 [style=dashed label="class-name"]
  226 -> 66 [style=dashed label="class-specifier"]
  226 -> 67 [style=dashed label="concept-name"]
  226 -> 68 [style=dashed label="conversion-function-id"]
  226 -> 69 [style=dashed label="cv-qualifier"]
  226 -> 70 [style=dashed label="decl-specifier"]
  226 -> 71 [style=dashed label="decl-specifier-seq"]
  226 -> 537 [style=dashed label="declaration"]
  226 -> 74 [style=dashed label="declarator"]
  226 -> 75 [style=dashed label="declarator-id"]
  226 -> 76 [style=dashed label="decltype-specifier"]
  226 -> 77 [style=dashed label="deduction-guide"]
  226 -> 78 [style=dashed label="defining-type-specifier"]
  226 -> 79 [style=dashed label="elaborated-enum-specifier"]
  226 -> 80 [style=dashed label="elaborated-type-specifier"]
  226 -> 81 [style=dashed label="empty-declaration"]
  226 -> 82 [style=dashed label="enum-head"]
  226 -> 83 [style=dashed label="enum-key"]
  226 -> 84 [style=dashed label="enum-name"]
  226 -> 85 [style=dashed label="enum-specifier"]
  226 -> 86 [style=dashed label="explicit-instantiation"]
  226 -> 87 [style=dashed label="explicit-specialization"]
  226 -> 88 [style=dashed label="explicit-specifier"]
  226 -> 89 [style=dashed label="export-declaration"]
  226 -> 90 [style=dashed label="function-definition"]
  226 -> 91 [style=dashed label="function-specifier"]
  226 -> 93 [style=dashed label="id-expression"]
  226 -> 94 [style=dashed label="linkage-specification"]
  226 -> 95 [style=dashed label="literal-operator-id"]
  226 -> 97 [style=dashed label="module-import-declaration"]
  226 -> 98 [style=dashed label="named-namespace-definition"]
  226 -> 99 [style=dashed label="namespace-alias"]
  226 -> 100 [style=dashed label="namespace-alias-definition"]
  226 -> 101 [style=dashed label="namespace-definition"]
  226 -> 102 [style=dashed label="namespace-name"]
  226 -> 103 [style=dashed label="nested-name-specifier"]
  226 -> 104 [style=dashed label="nested-namespace-definition"]
  226 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  226 -> 106 [style=dashed label="noptr-declarator"]
  226 -> 107 [style=dashed label="opaque-enum-declaration"]
  226 -> 108 [style=dashed label="operator-function-id"]
  226 -> 109 [style=dashed label="placeholder-type-specifier"]
  226 -> 110 [style=dashed label="ptr-declarator"]
  226 -> 111 [style=dashed label="ptr-operator"]
  226 -> 112 [style=dashed label="qualified-id"]
  226 -> 113 [style=dashed label="simple-declaration"]
  226 -> 114 [style=dashed label="simple-template-id"]
  226 -> 115 [style=dashed label="simple-type-specifier"]
  226 -> 116 [style=dashed label="static_assert-declaration"]
  226 -> 117 [style=dashed label="storage-class-specifier"]
  226 -> 118 [style=dashed label="template-declaration"]
  226 -> 119 [style=dashed label="template-head"]
  226 -> 120 [style=dashed label="template-id"]
  226 -> 121 [style=dashed label="template-name"]
  226 -> 123 [style=dashed label="type-constraint"]
  226 -> 124 [style=dashed label="type-name"]
  226 -> 125 [style=dashed label="type-specifier"]
  226 -> 126 [style=dashed label="typedef-name"]
  226 -> 127 [style=dashed label="typename-specifier"]
  226 -> 128 [style=dashed label="unnamed-namespace-definition"]
  226 -> 129 [style=dashed label="unqualified-id"]
  226 -> 130 [style=dashed label="using-declaration"]
  226 -> 131 [style=dashed label="using-directive"]
  226 -> 132 [style=dashed label="using-enum-declaration"]
  227 [label="State 227\n\l322 explicit-specifier: EXPLICIT OPEN_PAREN • constant-expression CLOSE_PAREN\l"]
  227 -> 356 [style=solid label="PLUS"]
  227 -> 357 [style=solid label="MINUS"]
  227 -> 2 [style=solid label="IDENTIFIER"]
  227 -> 358 [style=solid label="OPEN_PAREN"]
  227 -> 359 [style=solid label="AND"]
  227 -> 360 [style=solid label="SCOPE"]
  227 -> 361 [style=solid label="OPEN_SQUARE"]
  227 -> 362 [style=solid label="CO_AWAIT"]
  227 -> 363 [style=solid label="ZERO_LB"]
  227 -> 364 [style=solid label="ZERO_HB"]
  227 -> 365 [style=solid label="SINGLE_QUOTE"]
  227 -> 366 [style=solid label="FALSE"]
  227 -> 367 [style=solid label="TRUE"]
  227 -> 368 [style=solid label="NOEXCEPT"]
  227 -> 17 [style=solid label="OPERATOR"]
  227 -> 26 [style=solid label="DECLTYPE"]
  227 -> 369 [style=solid label="DELETE"]
  227 -> 370 [style=solid label="DOT"]
  227 -> 184 [style=solid label="UNICODE_8"]
  227 -> 371 [style=solid label="MULT"]
  227 -> 199 [style=solid label="DOUBLE_QUOTE"]
  227 -> 372 [style=solid label="ZERO_LX"]
  227 -> 373 [style=solid label="ZERO_HX"]
  227 -> 374 [style=solid label="REQUIRES"]
  227 -> 375 [style=solid label="NEW"]
  227 -> 376 [style=solid label="COMPL"]
  227 -> 377 [style=solid label="NOT"]
  227 -> 378 [style=solid label="PLUS_PLUS"]
  227 -> 379 [style=solid label="MINUS_MINUS"]
  227 -> 380 [style=solid label="THIS"]
  227 -> 36 [style=solid label="AUTO"]
  227 -> 381 [style=solid label="NULLPTR"]
  227 -> 382 [style=solid label="DYNAMIC_CAST"]
  227 -> 383 [style=solid label="STATIC_CAST"]
  227 -> 384 [style=solid label="REINTERPRET_CAST"]
  227 -> 385 [style=solid label="CONST_CAST"]
  227 -> 386 [style=solid label="TYPEID"]
  227 -> 37 [style=solid label="CHAR"]
  227 -> 38 [style=solid label="CHAR8_T"]
  227 -> 39 [style=solid label="CHAR16_T"]
  227 -> 40 [style=solid label="CHAR32_T"]
  227 -> 41 [style=solid label="WCHAR_T"]
  227 -> 42 [style=solid label="BOOL"]
  227 -> 43 [style=solid label="SHORT"]
  227 -> 44 [style=solid label="INT"]
  227 -> 45 [style=solid label="LONG"]
  227 -> 46 [style=solid label="SIGNED"]
  227 -> 47 [style=solid label="UNSIGNED"]
  227 -> 48 [style=solid label="FLOAT"]
  227 -> 49 [style=solid label="DOUBLE"]
  227 -> 50 [style=solid label="VOID"]
  227 -> 55 [style=solid label="TYPENAME"]
  227 -> 387 [style=solid label="SIZEOF"]
  227 -> 388 [style=solid label="ALIGNOF"]
  227 -> 389 [style=solid label="'0'"]
  227 -> 390 [style=solid label="'1'"]
  227 -> 391 [style=solid label="'2'"]
  227 -> 392 [style=solid label="'3'"]
  227 -> 393 [style=solid label="'4'"]
  227 -> 394 [style=solid label="'5'"]
  227 -> 395 [style=solid label="'6'"]
  227 -> 396 [style=solid label="'7'"]
  227 -> 397 [style=solid label="'8'"]
  227 -> 398 [style=solid label="'9'"]
  227 -> 205 [style=solid label="'u'"]
  227 -> 206 [style=solid label="'U'"]
  227 -> 207 [style=solid label="'L'"]
  227 -> 208 [style=solid label="'R'"]
  227 -> 399 [style=dashed label="additive-expression"]
  227 -> 400 [style=dashed label="and-expression"]
  227 -> 401 [style=dashed label="await-expression"]
  227 -> 402 [style=dashed label="binary-literal"]
  227 -> 403 [style=dashed label="boolean-literal"]
  227 -> 404 [style=dashed label="cast-expression"]
  227 -> 405 [style=dashed label="character-literal"]
  227 -> 65 [style=dashed label="class-name"]
  227 -> 406 [style=dashed label="compare-expression"]
  227 -> 67 [style=dashed label="concept-name"]
  227 -> 407 [style=dashed label="conditional-expression"]
  227 -> 538 [style=dashed label="constant-expression"]
  227 -> 68 [style=dashed label="conversion-function-id"]
  227 -> 409 [style=dashed label="decimal-floating-point-literal"]
  227 -> 410 [style=dashed label="decimal-literal"]
  227 -> 76 [style=dashed label="decltype-specifier"]
  227 -> 411 [style=dashed label="delete-expression"]
  227 -> 412 [style=dashed label="digit"]
  227 -> 413 [style=dashed label="digit-sequence"]
  227 -> 414 [style=dashed label="encoding-prefix"]
  227 -> 84 [style=dashed label="enum-name"]
  227 -> 415 [style=dashed label="equality-expression"]
  227 -> 416 [style=dashed label="exclusive-or-expression"]
  227 -> 417 [style=dashed label="floating-point-literal"]
  227 -> 418 [style=dashed label="fold-expression"]
  227 -> 419 [style=dashed label="fractional-constant"]
  227 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  227 -> 421 [style=dashed label="hexadecimal-literal"]
  227 -> 422 [style=dashed label="hexadecimal-prefix"]
  227 -> 423 [style=dashed label="id-expression"]
  227 -> 424 [style=dashed label="inclusive-or-expression"]
  227 -> 425 [style=dashed label="integer-literal"]
  227 -> 426 [style=dashed label="lambda-expression"]
  227 -> 427 [style=dashed label="lambda-introducer"]
  227 -> 428 [style=dashed label="literal"]
  227 -> 95 [style=dashed label="literal-operator-id"]
  227 -> 429 [style=dashed label="logical-and-expression"]
  227 -> 430 [style=dashed label="logical-or-expression"]
  227 -> 431 [style=dashed label="multiplicative-expression"]
  227 -> 99 [style=dashed label="namespace-alias"]
  227 -> 102 [style=dashed label="namespace-name"]
  227 -> 432 [style=dashed label="nested-name-specifier"]
  227 -> 433 [style=dashed label="new-expression"]
  227 -> 434 [style=dashed label="noexcept-expression"]
  227 -> 435 [style=dashed label="nonzero-digit"]
  227 -> 436 [style=dashed label="octal-literal"]
  227 -> 108 [style=dashed label="operator-function-id"]
  227 -> 109 [style=dashed label="placeholder-type-specifier"]
  227 -> 437 [style=dashed label="pm-expression"]
  227 -> 438 [style=dashed label="pointer-literal"]
  227 -> 439 [style=dashed label="postfix-expression"]
  227 -> 440 [style=dashed label="primary-expression"]
  227 -> 112 [style=dashed label="qualified-id"]
  227 -> 441 [style=dashed label="relational-expression"]
  227 -> 442 [style=dashed label="requires-expression"]
  227 -> 443 [style=dashed label="shift-expression"]
  227 -> 114 [style=dashed label="simple-template-id"]
  227 -> 529 [style=dashed label="simple-type-specifier"]
  227 -> 445 [style=dashed label="string-literal"]
  227 -> 120 [style=dashed label="template-id"]
  227 -> 215 [style=dashed label="template-name"]
  227 -> 123 [style=dashed label="type-constraint"]
  227 -> 124 [style=dashed label="type-name"]
  227 -> 126 [style=dashed label="typedef-name"]
  227 -> 531 [style=dashed label="typename-specifier"]
  227 -> 449 [style=dashed label="unary-expression"]
  227 -> 450 [style=dashed label="unary-operator"]
  227 -> 129 [style=dashed label="unqualified-id"]
  227 -> 451 [style=dashed label="user-defined-character-literal"]
  227 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  227 -> 453 [style=dashed label="user-defined-integer-literal"]
  227 -> 454 [style=dashed label="user-defined-literal"]
  227 -> 455 [style=dashed label="user-defined-string-literal"]
  228 [label="State 228\n\l329 export-declaration: EXPORT OPEN_BRACE • CLOSE_BRACE\l330                   | EXPORT OPEN_BRACE • declaration-seq CLOSE_BRACE\l"]
  228 -> 1 [style=solid label="USING"]
  228 -> 2 [style=solid label="IDENTIFIER"]
  228 -> 3 [style=solid label="SEMICOLON"]
  228 -> 4 [style=solid label="ALIGNAS"]
  228 -> 5 [style=solid label="OPEN_PAREN"]
  228 -> 6 [style=solid label="ELLIPSIS"]
  228 -> 7 [style=solid label="AND"]
  228 -> 8 [style=solid label="ASM"]
  228 -> 9 [style=solid label="SCOPE"]
  228 -> 10 [style=solid label="OPEN_SQUARE"]
  228 -> 539 [style=solid label="CLOSE_BRACE"]
  228 -> 11 [style=solid label="VIRTUAL"]
  228 -> 12 [style=solid label="CLASS"]
  228 -> 13 [style=solid label="STRUCT"]
  228 -> 14 [style=solid label="UNION"]
  228 -> 15 [style=solid label="TEMPLATE"]
  228 -> 16 [style=solid label="AND_AND"]
  228 -> 17 [style=solid label="OPERATOR"]
  228 -> 18 [style=solid label="CONST"]
  228 -> 19 [style=solid label="VOLATILE"]
  228 -> 20 [style=solid label="FRIEND"]
  228 -> 21 [style=solid label="TYPEDEF"]
  228 -> 22 [style=solid label="CONSTEXPR"]
  228 -> 23 [style=solid label="CONSTEVAL"]
  228 -> 24 [style=solid label="CONSTINIT"]
  228 -> 25 [style=solid label="INLINE"]
  228 -> 26 [style=solid label="DECLTYPE"]
  228 -> 27 [style=solid label="ENUM"]
  228 -> 28 [style=solid label="EXTERN"]
  228 -> 29 [style=solid label="EXPLICIT"]
  228 -> 157 [style=solid label="EXPORT"]
  228 -> 31 [style=solid label="MULT"]
  228 -> 33 [style=solid label="IMPORT"]
  228 -> 34 [style=solid label="NAMESPACE"]
  228 -> 35 [style=solid label="COMPL"]
  228 -> 36 [style=solid label="AUTO"]
  228 -> 37 [style=solid label="CHAR"]
  228 -> 38 [style=solid label="CHAR8_T"]
  228 -> 39 [style=solid label="CHAR16_T"]
  228 -> 40 [style=solid label="CHAR32_T"]
  228 -> 41 [style=solid label="WCHAR_T"]
  228 -> 42 [style=solid label="BOOL"]
  228 -> 43 [style=solid label="SHORT"]
  228 -> 44 [style=solid label="INT"]
  228 -> 45 [style=solid label="LONG"]
  228 -> 46 [style=solid label="SIGNED"]
  228 -> 47 [style=solid label="UNSIGNED"]
  228 -> 48 [style=solid label="FLOAT"]
  228 -> 49 [style=solid label="DOUBLE"]
  228 -> 50 [style=solid label="VOID"]
  228 -> 51 [style=solid label="STATIC_ASSERT"]
  228 -> 52 [style=solid label="STATIC"]
  228 -> 53 [style=solid label="THREAD_LOCAL"]
  228 -> 54 [style=solid label="MUTABLE"]
  228 -> 55 [style=solid label="TYPENAME"]
  228 -> 56 [style=dashed label="alias-declaration"]
  228 -> 57 [style=dashed label="alignment-specifier"]
  228 -> 58 [style=dashed label="asm-declaration"]
  228 -> 59 [style=dashed label="attribute-declaration"]
  228 -> 60 [style=dashed label="attribute-specifier"]
  228 -> 61 [style=dashed label="attribute-specifier-seq"]
  228 -> 62 [style=dashed label="block-declaration"]
  228 -> 63 [style=dashed label="class-head"]
  228 -> 64 [style=dashed label="class-key"]
  228 -> 65 [style=dashed label="class-name"]
  228 -> 66 [style=dashed label="class-specifier"]
  228 -> 67 [style=dashed label="concept-name"]
  228 -> 68 [style=dashed label="conversion-function-id"]
  228 -> 69 [style=dashed label="cv-qualifier"]
  228 -> 70 [style=dashed label="decl-specifier"]
  228 -> 71 [style=dashed label="decl-specifier-seq"]
  228 -> 72 [style=dashed label="declaration"]
  228 -> 540 [style=dashed label="declaration-seq"]
  228 -> 74 [style=dashed label="declarator"]
  228 -> 75 [style=dashed label="declarator-id"]
  228 -> 76 [style=dashed label="decltype-specifier"]
  228 -> 77 [style=dashed label="deduction-guide"]
  228 -> 78 [style=dashed label="defining-type-specifier"]
  228 -> 79 [style=dashed label="elaborated-enum-specifier"]
  228 -> 80 [style=dashed label="elaborated-type-specifier"]
  228 -> 81 [style=dashed label="empty-declaration"]
  228 -> 82 [style=dashed label="enum-head"]
  228 -> 83 [style=dashed label="enum-key"]
  228 -> 84 [style=dashed label="enum-name"]
  228 -> 85 [style=dashed label="enum-specifier"]
  228 -> 86 [style=dashed label="explicit-instantiation"]
  228 -> 87 [style=dashed label="explicit-specialization"]
  228 -> 88 [style=dashed label="explicit-specifier"]
  228 -> 89 [style=dashed label="export-declaration"]
  228 -> 90 [style=dashed label="function-definition"]
  228 -> 91 [style=dashed label="function-specifier"]
  228 -> 93 [style=dashed label="id-expression"]
  228 -> 94 [style=dashed label="linkage-specification"]
  228 -> 95 [style=dashed label="literal-operator-id"]
  228 -> 97 [style=dashed label="module-import-declaration"]
  228 -> 98 [style=dashed label="named-namespace-definition"]
  228 -> 99 [style=dashed label="namespace-alias"]
  228 -> 100 [style=dashed label="namespace-alias-definition"]
  228 -> 101 [style=dashed label="namespace-definition"]
  228 -> 102 [style=dashed label="namespace-name"]
  228 -> 103 [style=dashed label="nested-name-specifier"]
  228 -> 104 [style=dashed label="nested-namespace-definition"]
  228 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  228 -> 106 [style=dashed label="noptr-declarator"]
  228 -> 107 [style=dashed label="opaque-enum-declaration"]
  228 -> 108 [style=dashed label="operator-function-id"]
  228 -> 109 [style=dashed label="placeholder-type-specifier"]
  228 -> 110 [style=dashed label="ptr-declarator"]
  228 -> 111 [style=dashed label="ptr-operator"]
  228 -> 112 [style=dashed label="qualified-id"]
  228 -> 113 [style=dashed label="simple-declaration"]
  228 -> 114 [style=dashed label="simple-template-id"]
  228 -> 115 [style=dashed label="simple-type-specifier"]
  228 -> 116 [style=dashed label="static_assert-declaration"]
  228 -> 117 [style=dashed label="storage-class-specifier"]
  228 -> 118 [style=dashed label="template-declaration"]
  228 -> 119 [style=dashed label="template-head"]
  228 -> 120 [style=dashed label="template-id"]
  228 -> 121 [style=dashed label="template-name"]
  228 -> 123 [style=dashed label="type-constraint"]
  228 -> 124 [style=dashed label="type-name"]
  228 -> 125 [style=dashed label="type-specifier"]
  228 -> 126 [style=dashed label="typedef-name"]
  228 -> 127 [style=dashed label="typename-specifier"]
  228 -> 128 [style=dashed label="unnamed-namespace-definition"]
  228 -> 129 [style=dashed label="unqualified-id"]
  228 -> 130 [style=dashed label="using-declaration"]
  228 -> 131 [style=dashed label="using-directive"]
  228 -> 132 [style=dashed label="using-enum-declaration"]
  229 [label="State 229\n\l619 module-declaration: EXPORT MODULE • module-name SEMICOLON\l621                   | EXPORT MODULE • module-name module-partition SEMICOLON\l623                   | EXPORT MODULE • module-name attribute-specifier-seq SEMICOLON\l625                   | EXPORT MODULE • module-name module-partition attribute-specifier-seq SEMICOLON\l"]
  229 -> 235 [style=solid label="IDENTIFIER"]
  229 -> 541 [style=dashed label="module-name"]
  229 -> 238 [style=dashed label="module-name-qualifier"]
  230 [label="State 230\n\l328 export-declaration: EXPORT declaration •\l"]
  230 -> "230R328" [style=solid]
 "230R328" [label="R328", fillcolor=3, shape=diamond, style=filled]
  231 [label="State 231\n\l222 declaration: module-import-declaration •\l331 export-declaration: EXPORT module-import-declaration •\l"]
  231 -> "231R222" [style=solid]
 "231R222" [label="R222", fillcolor=3, shape=diamond, style=filled]
  231 -> "231R331d" [label="[$end, PRIVATE, PROTECTED, PUBLIC, USING, IDENTIFIER, SEMICOLON, ALIGNAS, OPEN_PAREN, ELLIPSIS, AND, ASM, SCOPE, OPEN_SQUARE, COLON, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, EXPLICIT, EXPORT, MULT, MODULE, IMPORT, NAMESPACE, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "231R331d" [label="R331", fillcolor=5, shape=diamond, style=filled]
  232 [label="State 232\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l894 ptr-operator: MULT attribute-specifier-seq •\l896             | MULT attribute-specifier-seq • cv-qualifier-seq\l"]
  232 -> 4 [style=solid label="ALIGNAS"]
  232 -> 10 [style=solid label="OPEN_SQUARE"]
  232 -> 18 [style=solid label="CONST"]
  232 -> 19 [style=solid label="VOLATILE"]
  232 -> 57 [style=dashed label="alignment-specifier"]
  232 -> 260 [style=dashed label="attribute-specifier"]
  232 -> 233 [style=dashed label="cv-qualifier"]
  232 -> 542 [style=dashed label="cv-qualifier-seq"]
  232 -> "232R894d" [label="[ALIGNAS, OPEN_SQUARE, CONST, VOLATILE]", style=solid]
 "232R894d" [label="R894", fillcolor=5, shape=diamond, style=filled]
  232 -> "232R894" [style=solid]
 "232R894" [label="R894", fillcolor=3, shape=diamond, style=filled]
  233 [label="State 233\n\l187 cv-qualifier-seq: cv-qualifier •\l188                 | cv-qualifier • cv-qualifier-seq\l"]
  233 -> 18 [style=solid label="CONST"]
  233 -> 19 [style=solid label="VOLATILE"]
  233 -> 233 [style=dashed label="cv-qualifier"]
  233 -> 543 [style=dashed label="cv-qualifier-seq"]
  233 -> "233R187d" [label="[CONST, VOLATILE]", style=solid]
 "233R187d" [label="R187", fillcolor=5, shape=diamond, style=filled]
  233 -> "233R187" [style=solid]
 "233R187" [label="R187", fillcolor=3, shape=diamond, style=filled]
  234 [label="State 234\n\l895 ptr-operator: MULT cv-qualifier-seq •\l"]
  234 -> "234R895" [style=solid]
 "234R895" [label="R895", fillcolor=3, shape=diamond, style=filled]
  235 [label="State 235\n\l634 module-name: IDENTIFIER •\l635 module-name-qualifier: IDENTIFIER • DOT\l"]
  235 -> 544 [style=solid label="DOT"]
  235 -> "235R634" [style=solid]
 "235R634" [label="R634", fillcolor=3, shape=diamond, style=filled]
  236 [label="State 236\n\l411 global-module-fragment: MODULE SEMICOLON •\l412                       | MODULE SEMICOLON • declaration-seq\l"]
  236 -> 1 [style=solid label="USING"]
  236 -> 2 [style=solid label="IDENTIFIER"]
  236 -> 3 [style=solid label="SEMICOLON"]
  236 -> 4 [style=solid label="ALIGNAS"]
  236 -> 5 [style=solid label="OPEN_PAREN"]
  236 -> 6 [style=solid label="ELLIPSIS"]
  236 -> 7 [style=solid label="AND"]
  236 -> 8 [style=solid label="ASM"]
  236 -> 9 [style=solid label="SCOPE"]
  236 -> 10 [style=solid label="OPEN_SQUARE"]
  236 -> 11 [style=solid label="VIRTUAL"]
  236 -> 12 [style=solid label="CLASS"]
  236 -> 13 [style=solid label="STRUCT"]
  236 -> 14 [style=solid label="UNION"]
  236 -> 15 [style=solid label="TEMPLATE"]
  236 -> 16 [style=solid label="AND_AND"]
  236 -> 17 [style=solid label="OPERATOR"]
  236 -> 18 [style=solid label="CONST"]
  236 -> 19 [style=solid label="VOLATILE"]
  236 -> 20 [style=solid label="FRIEND"]
  236 -> 21 [style=solid label="TYPEDEF"]
  236 -> 22 [style=solid label="CONSTEXPR"]
  236 -> 23 [style=solid label="CONSTEVAL"]
  236 -> 24 [style=solid label="CONSTINIT"]
  236 -> 25 [style=solid label="INLINE"]
  236 -> 26 [style=solid label="DECLTYPE"]
  236 -> 27 [style=solid label="ENUM"]
  236 -> 28 [style=solid label="EXTERN"]
  236 -> 29 [style=solid label="EXPLICIT"]
  236 -> 157 [style=solid label="EXPORT"]
  236 -> 31 [style=solid label="MULT"]
  236 -> 33 [style=solid label="IMPORT"]
  236 -> 34 [style=solid label="NAMESPACE"]
  236 -> 35 [style=solid label="COMPL"]
  236 -> 36 [style=solid label="AUTO"]
  236 -> 37 [style=solid label="CHAR"]
  236 -> 38 [style=solid label="CHAR8_T"]
  236 -> 39 [style=solid label="CHAR16_T"]
  236 -> 40 [style=solid label="CHAR32_T"]
  236 -> 41 [style=solid label="WCHAR_T"]
  236 -> 42 [style=solid label="BOOL"]
  236 -> 43 [style=solid label="SHORT"]
  236 -> 44 [style=solid label="INT"]
  236 -> 45 [style=solid label="LONG"]
  236 -> 46 [style=solid label="SIGNED"]
  236 -> 47 [style=solid label="UNSIGNED"]
  236 -> 48 [style=solid label="FLOAT"]
  236 -> 49 [style=solid label="DOUBLE"]
  236 -> 50 [style=solid label="VOID"]
  236 -> 51 [style=solid label="STATIC_ASSERT"]
  236 -> 52 [style=solid label="STATIC"]
  236 -> 53 [style=solid label="THREAD_LOCAL"]
  236 -> 54 [style=solid label="MUTABLE"]
  236 -> 55 [style=solid label="TYPENAME"]
  236 -> 56 [style=dashed label="alias-declaration"]
  236 -> 57 [style=dashed label="alignment-specifier"]
  236 -> 58 [style=dashed label="asm-declaration"]
  236 -> 59 [style=dashed label="attribute-declaration"]
  236 -> 60 [style=dashed label="attribute-specifier"]
  236 -> 61 [style=dashed label="attribute-specifier-seq"]
  236 -> 62 [style=dashed label="block-declaration"]
  236 -> 63 [style=dashed label="class-head"]
  236 -> 64 [style=dashed label="class-key"]
  236 -> 65 [style=dashed label="class-name"]
  236 -> 66 [style=dashed label="class-specifier"]
  236 -> 67 [style=dashed label="concept-name"]
  236 -> 68 [style=dashed label="conversion-function-id"]
  236 -> 69 [style=dashed label="cv-qualifier"]
  236 -> 70 [style=dashed label="decl-specifier"]
  236 -> 71 [style=dashed label="decl-specifier-seq"]
  236 -> 72 [style=dashed label="declaration"]
  236 -> 545 [style=dashed label="declaration-seq"]
  236 -> 74 [style=dashed label="declarator"]
  236 -> 75 [style=dashed label="declarator-id"]
  236 -> 76 [style=dashed label="decltype-specifier"]
  236 -> 77 [style=dashed label="deduction-guide"]
  236 -> 78 [style=dashed label="defining-type-specifier"]
  236 -> 79 [style=dashed label="elaborated-enum-specifier"]
  236 -> 80 [style=dashed label="elaborated-type-specifier"]
  236 -> 81 [style=dashed label="empty-declaration"]
  236 -> 82 [style=dashed label="enum-head"]
  236 -> 83 [style=dashed label="enum-key"]
  236 -> 84 [style=dashed label="enum-name"]
  236 -> 85 [style=dashed label="enum-specifier"]
  236 -> 86 [style=dashed label="explicit-instantiation"]
  236 -> 87 [style=dashed label="explicit-specialization"]
  236 -> 88 [style=dashed label="explicit-specifier"]
  236 -> 89 [style=dashed label="export-declaration"]
  236 -> 90 [style=dashed label="function-definition"]
  236 -> 91 [style=dashed label="function-specifier"]
  236 -> 93 [style=dashed label="id-expression"]
  236 -> 94 [style=dashed label="linkage-specification"]
  236 -> 95 [style=dashed label="literal-operator-id"]
  236 -> 97 [style=dashed label="module-import-declaration"]
  236 -> 98 [style=dashed label="named-namespace-definition"]
  236 -> 99 [style=dashed label="namespace-alias"]
  236 -> 100 [style=dashed label="namespace-alias-definition"]
  236 -> 101 [style=dashed label="namespace-definition"]
  236 -> 102 [style=dashed label="namespace-name"]
  236 -> 103 [style=dashed label="nested-name-specifier"]
  236 -> 104 [style=dashed label="nested-namespace-definition"]
  236 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  236 -> 106 [style=dashed label="noptr-declarator"]
  236 -> 107 [style=dashed label="opaque-enum-declaration"]
  236 -> 108 [style=dashed label="operator-function-id"]
  236 -> 109 [style=dashed label="placeholder-type-specifier"]
  236 -> 110 [style=dashed label="ptr-declarator"]
  236 -> 111 [style=dashed label="ptr-operator"]
  236 -> 112 [style=dashed label="qualified-id"]
  236 -> 113 [style=dashed label="simple-declaration"]
  236 -> 114 [style=dashed label="simple-template-id"]
  236 -> 115 [style=dashed label="simple-type-specifier"]
  236 -> 116 [style=dashed label="static_assert-declaration"]
  236 -> 117 [style=dashed label="storage-class-specifier"]
  236 -> 118 [style=dashed label="template-declaration"]
  236 -> 119 [style=dashed label="template-head"]
  236 -> 120 [style=dashed label="template-id"]
  236 -> 121 [style=dashed label="template-name"]
  236 -> 123 [style=dashed label="type-constraint"]
  236 -> 124 [style=dashed label="type-name"]
  236 -> 125 [style=dashed label="type-specifier"]
  236 -> 126 [style=dashed label="typedef-name"]
  236 -> 127 [style=dashed label="typename-specifier"]
  236 -> 128 [style=dashed label="unnamed-namespace-definition"]
  236 -> 129 [style=dashed label="unqualified-id"]
  236 -> 130 [style=dashed label="using-declaration"]
  236 -> 131 [style=dashed label="using-directive"]
  236 -> 132 [style=dashed label="using-enum-declaration"]
  236 -> "236R411d" [label="[EXPORT]", style=solid]
 "236R411d" [label="R411", fillcolor=5, shape=diamond, style=filled]
  236 -> "236R411" [style=solid]
 "236R411" [label="R411", fillcolor=3, shape=diamond, style=filled]
  237 [label="State 237\n\l620 module-declaration: MODULE module-name • SEMICOLON\l622                   | MODULE module-name • module-partition SEMICOLON\l624                   | MODULE module-name • attribute-specifier-seq SEMICOLON\l626                   | MODULE module-name • module-partition attribute-specifier-seq SEMICOLON\l"]
  237 -> 546 [style=solid label="SEMICOLON"]
  237 -> 4 [style=solid label="ALIGNAS"]
  237 -> 10 [style=solid label="OPEN_SQUARE"]
  237 -> 239 [style=solid label="COLON"]
  237 -> 57 [style=dashed label="alignment-specifier"]
  237 -> 60 [style=dashed label="attribute-specifier"]
  237 -> 547 [style=dashed label="attribute-specifier-seq"]
  237 -> 548 [style=dashed label="module-partition"]
  238 [label="State 238\n\l633 module-name: module-name-qualifier • IDENTIFIER\l636 module-name-qualifier: module-name-qualifier • IDENTIFIER DOT\l"]
  238 -> 549 [style=solid label="IDENTIFIER"]
  239 [label="State 239\n\l637 module-partition: COLON • IDENTIFIER\l638                 | COLON • module-name-qualifier IDENTIFIER\l"]
  239 -> 550 [style=solid label="IDENTIFIER"]
  239 -> 551 [style=dashed label="module-name-qualifier"]
  240 [label="State 240\n\l419 header-name: LESS • h-char-sequence GREATER\l"]
  240 -> 552 [style=solid label="H_CHAR"]
  240 -> 553 [style=dashed label="h-char"]
  240 -> 554 [style=dashed label="h-char-sequence"]
  241 [label="State 241\n\l420 header-name: DOUBLE_QUOTE • q-char-sequence DOUBLE_QUOTE\l"]
  241 -> 555 [style=solid label="Q_CHAR"]
  241 -> 556 [style=dashed label="q-char"]
  241 -> 557 [style=dashed label="q-char-sequence"]
  242 [label="State 242\n\l631 module-import-declaration: IMPORT header-name • SEMICOLON\l632                          | IMPORT header-name • attribute-specifier-seq SEMICOLON\l"]
  242 -> 558 [style=solid label="SEMICOLON"]
  242 -> 4 [style=solid label="ALIGNAS"]
  242 -> 10 [style=solid label="OPEN_SQUARE"]
  242 -> 57 [style=dashed label="alignment-specifier"]
  242 -> 60 [style=dashed label="attribute-specifier"]
  242 -> 559 [style=dashed label="attribute-specifier-seq"]
  243 [label="State 243\n\l627 module-import-declaration: IMPORT module-name • SEMICOLON\l628                          | IMPORT module-name • attribute-specifier-seq SEMICOLON\l"]
  243 -> 560 [style=solid label="SEMICOLON"]
  243 -> 4 [style=solid label="ALIGNAS"]
  243 -> 10 [style=solid label="OPEN_SQUARE"]
  243 -> 57 [style=dashed label="alignment-specifier"]
  243 -> 60 [style=dashed label="attribute-specifier"]
  243 -> 561 [style=dashed label="attribute-specifier-seq"]
  244 [label="State 244\n\l629 module-import-declaration: IMPORT module-partition • SEMICOLON\l630                          | IMPORT module-partition • attribute-specifier-seq SEMICOLON\l"]
  244 -> 562 [style=solid label="SEMICOLON"]
  244 -> 4 [style=solid label="ALIGNAS"]
  244 -> 10 [style=solid label="OPEN_SQUARE"]
  244 -> 57 [style=dashed label="alignment-specifier"]
  244 -> 60 [style=dashed label="attribute-specifier"]
  244 -> 563 [style=dashed label="attribute-specifier-seq"]
  245 [label="State 245\n\l273 enclosing-namespace-specifier: IDENTIFIER •\l644 named-namespace-definition: NAMESPACE IDENTIFIER • OPEN_BRACE namespace-body CLOSE_BRACE\l648 namespace-alias-definition: NAMESPACE IDENTIFIER • EQ qualified-namespace-specifier SEMICOLON\l"]
  245 -> 564 [style=solid label="EQ"]
  245 -> 565 [style=solid label="OPEN_BRACE"]
  245 -> "245R273" [style=solid]
 "245R273" [label="R273", fillcolor=3, shape=diamond, style=filled]
  246 [label="State 246\n\l1137 unnamed-namespace-definition: NAMESPACE OPEN_BRACE • namespace-body CLOSE_BRACE\l"]
  246 -> 1 [style=solid label="USING"]
  246 -> 2 [style=solid label="IDENTIFIER"]
  246 -> 3 [style=solid label="SEMICOLON"]
  246 -> 4 [style=solid label="ALIGNAS"]
  246 -> 5 [style=solid label="OPEN_PAREN"]
  246 -> 6 [style=solid label="ELLIPSIS"]
  246 -> 7 [style=solid label="AND"]
  246 -> 8 [style=solid label="ASM"]
  246 -> 9 [style=solid label="SCOPE"]
  246 -> 10 [style=solid label="OPEN_SQUARE"]
  246 -> 11 [style=solid label="VIRTUAL"]
  246 -> 12 [style=solid label="CLASS"]
  246 -> 13 [style=solid label="STRUCT"]
  246 -> 14 [style=solid label="UNION"]
  246 -> 15 [style=solid label="TEMPLATE"]
  246 -> 16 [style=solid label="AND_AND"]
  246 -> 17 [style=solid label="OPERATOR"]
  246 -> 18 [style=solid label="CONST"]
  246 -> 19 [style=solid label="VOLATILE"]
  246 -> 20 [style=solid label="FRIEND"]
  246 -> 21 [style=solid label="TYPEDEF"]
  246 -> 22 [style=solid label="CONSTEXPR"]
  246 -> 23 [style=solid label="CONSTEVAL"]
  246 -> 24 [style=solid label="CONSTINIT"]
  246 -> 25 [style=solid label="INLINE"]
  246 -> 26 [style=solid label="DECLTYPE"]
  246 -> 27 [style=solid label="ENUM"]
  246 -> 28 [style=solid label="EXTERN"]
  246 -> 29 [style=solid label="EXPLICIT"]
  246 -> 157 [style=solid label="EXPORT"]
  246 -> 31 [style=solid label="MULT"]
  246 -> 33 [style=solid label="IMPORT"]
  246 -> 34 [style=solid label="NAMESPACE"]
  246 -> 35 [style=solid label="COMPL"]
  246 -> 36 [style=solid label="AUTO"]
  246 -> 37 [style=solid label="CHAR"]
  246 -> 38 [style=solid label="CHAR8_T"]
  246 -> 39 [style=solid label="CHAR16_T"]
  246 -> 40 [style=solid label="CHAR32_T"]
  246 -> 41 [style=solid label="WCHAR_T"]
  246 -> 42 [style=solid label="BOOL"]
  246 -> 43 [style=solid label="SHORT"]
  246 -> 44 [style=solid label="INT"]
  246 -> 45 [style=solid label="LONG"]
  246 -> 46 [style=solid label="SIGNED"]
  246 -> 47 [style=solid label="UNSIGNED"]
  246 -> 48 [style=solid label="FLOAT"]
  246 -> 49 [style=solid label="DOUBLE"]
  246 -> 50 [style=solid label="VOID"]
  246 -> 51 [style=solid label="STATIC_ASSERT"]
  246 -> 52 [style=solid label="STATIC"]
  246 -> 53 [style=solid label="THREAD_LOCAL"]
  246 -> 54 [style=solid label="MUTABLE"]
  246 -> 55 [style=solid label="TYPENAME"]
  246 -> 56 [style=dashed label="alias-declaration"]
  246 -> 57 [style=dashed label="alignment-specifier"]
  246 -> 58 [style=dashed label="asm-declaration"]
  246 -> 59 [style=dashed label="attribute-declaration"]
  246 -> 60 [style=dashed label="attribute-specifier"]
  246 -> 61 [style=dashed label="attribute-specifier-seq"]
  246 -> 62 [style=dashed label="block-declaration"]
  246 -> 63 [style=dashed label="class-head"]
  246 -> 64 [style=dashed label="class-key"]
  246 -> 65 [style=dashed label="class-name"]
  246 -> 66 [style=dashed label="class-specifier"]
  246 -> 67 [style=dashed label="concept-name"]
  246 -> 68 [style=dashed label="conversion-function-id"]
  246 -> 69 [style=dashed label="cv-qualifier"]
  246 -> 70 [style=dashed label="decl-specifier"]
  246 -> 71 [style=dashed label="decl-specifier-seq"]
  246 -> 72 [style=dashed label="declaration"]
  246 -> 566 [style=dashed label="declaration-seq"]
  246 -> 74 [style=dashed label="declarator"]
  246 -> 75 [style=dashed label="declarator-id"]
  246 -> 76 [style=dashed label="decltype-specifier"]
  246 -> 77 [style=dashed label="deduction-guide"]
  246 -> 78 [style=dashed label="defining-type-specifier"]
  246 -> 79 [style=dashed label="elaborated-enum-specifier"]
  246 -> 80 [style=dashed label="elaborated-type-specifier"]
  246 -> 81 [style=dashed label="empty-declaration"]
  246 -> 82 [style=dashed label="enum-head"]
  246 -> 83 [style=dashed label="enum-key"]
  246 -> 84 [style=dashed label="enum-name"]
  246 -> 85 [style=dashed label="enum-specifier"]
  246 -> 86 [style=dashed label="explicit-instantiation"]
  246 -> 87 [style=dashed label="explicit-specialization"]
  246 -> 88 [style=dashed label="explicit-specifier"]
  246 -> 89 [style=dashed label="export-declaration"]
  246 -> 90 [style=dashed label="function-definition"]
  246 -> 91 [style=dashed label="function-specifier"]
  246 -> 93 [style=dashed label="id-expression"]
  246 -> 94 [style=dashed label="linkage-specification"]
  246 -> 95 [style=dashed label="literal-operator-id"]
  246 -> 97 [style=dashed label="module-import-declaration"]
  246 -> 98 [style=dashed label="named-namespace-definition"]
  246 -> 99 [style=dashed label="namespace-alias"]
  246 -> 100 [style=dashed label="namespace-alias-definition"]
  246 -> 567 [style=dashed label="namespace-body"]
  246 -> 101 [style=dashed label="namespace-definition"]
  246 -> 102 [style=dashed label="namespace-name"]
  246 -> 103 [style=dashed label="nested-name-specifier"]
  246 -> 104 [style=dashed label="nested-namespace-definition"]
  246 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  246 -> 106 [style=dashed label="noptr-declarator"]
  246 -> 107 [style=dashed label="opaque-enum-declaration"]
  246 -> 108 [style=dashed label="operator-function-id"]
  246 -> 109 [style=dashed label="placeholder-type-specifier"]
  246 -> 110 [style=dashed label="ptr-declarator"]
  246 -> 111 [style=dashed label="ptr-operator"]
  246 -> 112 [style=dashed label="qualified-id"]
  246 -> 113 [style=dashed label="simple-declaration"]
  246 -> 114 [style=dashed label="simple-template-id"]
  246 -> 115 [style=dashed label="simple-type-specifier"]
  246 -> 116 [style=dashed label="static_assert-declaration"]
  246 -> 117 [style=dashed label="storage-class-specifier"]
  246 -> 118 [style=dashed label="template-declaration"]
  246 -> 119 [style=dashed label="template-head"]
  246 -> 120 [style=dashed label="template-id"]
  246 -> 121 [style=dashed label="template-name"]
  246 -> 123 [style=dashed label="type-constraint"]
  246 -> 124 [style=dashed label="type-name"]
  246 -> 125 [style=dashed label="type-specifier"]
  246 -> 126 [style=dashed label="typedef-name"]
  246 -> 127 [style=dashed label="typename-specifier"]
  246 -> 128 [style=dashed label="unnamed-namespace-definition"]
  246 -> 129 [style=dashed label="unqualified-id"]
  246 -> 130 [style=dashed label="using-declaration"]
  246 -> 131 [style=dashed label="using-directive"]
  246 -> 132 [style=dashed label="using-enum-declaration"]
  247 [label="State 247\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l646 named-namespace-definition: NAMESPACE attribute-specifier-seq • IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l1139 unnamed-namespace-definition: NAMESPACE attribute-specifier-seq • OPEN_BRACE namespace-body CLOSE_BRACE\l"]
  247 -> 568 [style=solid label="IDENTIFIER"]
  247 -> 4 [style=solid label="ALIGNAS"]
  247 -> 10 [style=solid label="OPEN_SQUARE"]
  247 -> 569 [style=solid label="OPEN_BRACE"]
  247 -> 57 [style=dashed label="alignment-specifier"]
  247 -> 260 [style=dashed label="attribute-specifier"]
  248 [label="State 248\n\l274 enclosing-namespace-specifier: enclosing-namespace-specifier • SCOPE IDENTIFIER\l275                              | enclosing-namespace-specifier • SCOPE INLINE IDENTIFIER\l662 nested-namespace-definition: NAMESPACE enclosing-namespace-specifier • SCOPE IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l663                            | NAMESPACE enclosing-namespace-specifier • SCOPE INLINE IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l"]
  248 -> 570 [style=solid label="SCOPE"]
  249 [label="State 249\n\l145 class-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l"]
  249 -> "249R145" [style=solid]
 "249R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  249 -> "249R294d" [label="[PLUS, MINUS, USING, IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SCOPE, OPEN_SQUARE, CLOSE_SQUARE, COLON, OPEN_BRACE, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, FINAL, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, AND_AND, OR_OR, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, DEREF, DOT, ENUM, EQ_EQ, NOT_EQ, XOR, EXTERN, LESS, GREATER, EXPLICIT, EXPORT, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, REQUIRES, COMPL, PLUS_PLUS, MINUS_MINUS, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME, OVERRIDE]", style=solid]
 "249R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  249 -> "249R1052d" [label="[LESS]", style=solid]
 "249R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  249 -> "249R1110d" [label="[PLUS, MINUS, USING, IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SCOPE, OPEN_SQUARE, CLOSE_SQUARE, COLON, OPEN_BRACE, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, FINAL, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, AND_AND, OR_OR, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, DEREF, DOT, ENUM, EQ_EQ, NOT_EQ, XOR, EXTERN, LESS, GREATER, EXPLICIT, EXPORT, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, REQUIRES, COMPL, PLUS_PLUS, MINUS_MINUS, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME, OVERRIDE]", style=solid]
 "249R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  250 [label="State 250\n\l1145 unqualified-id: COMPL decltype-specifier •\l"]
  250 -> "250R1145" [style=solid]
 "250R1145" [label="R1145", fillcolor=3, shape=diamond, style=filled]
  251 [label="State 251\n\l1144 unqualified-id: COMPL type-name •\l"]
  251 -> "251R1144" [style=solid]
 "251R1144" [label="R1144", fillcolor=3, shape=diamond, style=filled]
  252 [label="State 252\n\l1024 static_assert-declaration: STATIC_ASSERT OPEN_PAREN • constant-expression CLOSE_PAREN SEMICOLON\l1025                          | STATIC_ASSERT OPEN_PAREN • constant-expression COMMA string-literal CLOSE_PAREN SEMICOLON\l"]
  252 -> 356 [style=solid label="PLUS"]
  252 -> 357 [style=solid label="MINUS"]
  252 -> 2 [style=solid label="IDENTIFIER"]
  252 -> 358 [style=solid label="OPEN_PAREN"]
  252 -> 359 [style=solid label="AND"]
  252 -> 360 [style=solid label="SCOPE"]
  252 -> 361 [style=solid label="OPEN_SQUARE"]
  252 -> 362 [style=solid label="CO_AWAIT"]
  252 -> 363 [style=solid label="ZERO_LB"]
  252 -> 364 [style=solid label="ZERO_HB"]
  252 -> 365 [style=solid label="SINGLE_QUOTE"]
  252 -> 366 [style=solid label="FALSE"]
  252 -> 367 [style=solid label="TRUE"]
  252 -> 368 [style=solid label="NOEXCEPT"]
  252 -> 17 [style=solid label="OPERATOR"]
  252 -> 26 [style=solid label="DECLTYPE"]
  252 -> 369 [style=solid label="DELETE"]
  252 -> 370 [style=solid label="DOT"]
  252 -> 184 [style=solid label="UNICODE_8"]
  252 -> 371 [style=solid label="MULT"]
  252 -> 199 [style=solid label="DOUBLE_QUOTE"]
  252 -> 372 [style=solid label="ZERO_LX"]
  252 -> 373 [style=solid label="ZERO_HX"]
  252 -> 374 [style=solid label="REQUIRES"]
  252 -> 375 [style=solid label="NEW"]
  252 -> 376 [style=solid label="COMPL"]
  252 -> 377 [style=solid label="NOT"]
  252 -> 378 [style=solid label="PLUS_PLUS"]
  252 -> 379 [style=solid label="MINUS_MINUS"]
  252 -> 380 [style=solid label="THIS"]
  252 -> 36 [style=solid label="AUTO"]
  252 -> 381 [style=solid label="NULLPTR"]
  252 -> 382 [style=solid label="DYNAMIC_CAST"]
  252 -> 383 [style=solid label="STATIC_CAST"]
  252 -> 384 [style=solid label="REINTERPRET_CAST"]
  252 -> 385 [style=solid label="CONST_CAST"]
  252 -> 386 [style=solid label="TYPEID"]
  252 -> 37 [style=solid label="CHAR"]
  252 -> 38 [style=solid label="CHAR8_T"]
  252 -> 39 [style=solid label="CHAR16_T"]
  252 -> 40 [style=solid label="CHAR32_T"]
  252 -> 41 [style=solid label="WCHAR_T"]
  252 -> 42 [style=solid label="BOOL"]
  252 -> 43 [style=solid label="SHORT"]
  252 -> 44 [style=solid label="INT"]
  252 -> 45 [style=solid label="LONG"]
  252 -> 46 [style=solid label="SIGNED"]
  252 -> 47 [style=solid label="UNSIGNED"]
  252 -> 48 [style=solid label="FLOAT"]
  252 -> 49 [style=solid label="DOUBLE"]
  252 -> 50 [style=solid label="VOID"]
  252 -> 55 [style=solid label="TYPENAME"]
  252 -> 387 [style=solid label="SIZEOF"]
  252 -> 388 [style=solid label="ALIGNOF"]
  252 -> 389 [style=solid label="'0'"]
  252 -> 390 [style=solid label="'1'"]
  252 -> 391 [style=solid label="'2'"]
  252 -> 392 [style=solid label="'3'"]
  252 -> 393 [style=solid label="'4'"]
  252 -> 394 [style=solid label="'5'"]
  252 -> 395 [style=solid label="'6'"]
  252 -> 396 [style=solid label="'7'"]
  252 -> 397 [style=solid label="'8'"]
  252 -> 398 [style=solid label="'9'"]
  252 -> 205 [style=solid label="'u'"]
  252 -> 206 [style=solid label="'U'"]
  252 -> 207 [style=solid label="'L'"]
  252 -> 208 [style=solid label="'R'"]
  252 -> 399 [style=dashed label="additive-expression"]
  252 -> 400 [style=dashed label="and-expression"]
  252 -> 401 [style=dashed label="await-expression"]
  252 -> 402 [style=dashed label="binary-literal"]
  252 -> 403 [style=dashed label="boolean-literal"]
  252 -> 404 [style=dashed label="cast-expression"]
  252 -> 405 [style=dashed label="character-literal"]
  252 -> 65 [style=dashed label="class-name"]
  252 -> 406 [style=dashed label="compare-expression"]
  252 -> 67 [style=dashed label="concept-name"]
  252 -> 407 [style=dashed label="conditional-expression"]
  252 -> 571 [style=dashed label="constant-expression"]
  252 -> 68 [style=dashed label="conversion-function-id"]
  252 -> 409 [style=dashed label="decimal-floating-point-literal"]
  252 -> 410 [style=dashed label="decimal-literal"]
  252 -> 76 [style=dashed label="decltype-specifier"]
  252 -> 411 [style=dashed label="delete-expression"]
  252 -> 412 [style=dashed label="digit"]
  252 -> 413 [style=dashed label="digit-sequence"]
  252 -> 414 [style=dashed label="encoding-prefix"]
  252 -> 84 [style=dashed label="enum-name"]
  252 -> 415 [style=dashed label="equality-expression"]
  252 -> 416 [style=dashed label="exclusive-or-expression"]
  252 -> 417 [style=dashed label="floating-point-literal"]
  252 -> 418 [style=dashed label="fold-expression"]
  252 -> 419 [style=dashed label="fractional-constant"]
  252 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  252 -> 421 [style=dashed label="hexadecimal-literal"]
  252 -> 422 [style=dashed label="hexadecimal-prefix"]
  252 -> 423 [style=dashed label="id-expression"]
  252 -> 424 [style=dashed label="inclusive-or-expression"]
  252 -> 425 [style=dashed label="integer-literal"]
  252 -> 426 [style=dashed label="lambda-expression"]
  252 -> 427 [style=dashed label="lambda-introducer"]
  252 -> 428 [style=dashed label="literal"]
  252 -> 95 [style=dashed label="literal-operator-id"]
  252 -> 429 [style=dashed label="logical-and-expression"]
  252 -> 430 [style=dashed label="logical-or-expression"]
  252 -> 431 [style=dashed label="multiplicative-expression"]
  252 -> 99 [style=dashed label="namespace-alias"]
  252 -> 102 [style=dashed label="namespace-name"]
  252 -> 432 [style=dashed label="nested-name-specifier"]
  252 -> 433 [style=dashed label="new-expression"]
  252 -> 434 [style=dashed label="noexcept-expression"]
  252 -> 435 [style=dashed label="nonzero-digit"]
  252 -> 436 [style=dashed label="octal-literal"]
  252 -> 108 [style=dashed label="operator-function-id"]
  252 -> 109 [style=dashed label="placeholder-type-specifier"]
  252 -> 437 [style=dashed label="pm-expression"]
  252 -> 438 [style=dashed label="pointer-literal"]
  252 -> 439 [style=dashed label="postfix-expression"]
  252 -> 440 [style=dashed label="primary-expression"]
  252 -> 112 [style=dashed label="qualified-id"]
  252 -> 441 [style=dashed label="relational-expression"]
  252 -> 442 [style=dashed label="requires-expression"]
  252 -> 443 [style=dashed label="shift-expression"]
  252 -> 114 [style=dashed label="simple-template-id"]
  252 -> 529 [style=dashed label="simple-type-specifier"]
  252 -> 445 [style=dashed label="string-literal"]
  252 -> 120 [style=dashed label="template-id"]
  252 -> 215 [style=dashed label="template-name"]
  252 -> 123 [style=dashed label="type-constraint"]
  252 -> 124 [style=dashed label="type-name"]
  252 -> 126 [style=dashed label="typedef-name"]
  252 -> 531 [style=dashed label="typename-specifier"]
  252 -> 449 [style=dashed label="unary-expression"]
  252 -> 450 [style=dashed label="unary-operator"]
  252 -> 129 [style=dashed label="unqualified-id"]
  252 -> 451 [style=dashed label="user-defined-character-literal"]
  252 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  252 -> 453 [style=dashed label="user-defined-integer-literal"]
  252 -> 454 [style=dashed label="user-defined-literal"]
  252 -> 455 [style=dashed label="user-defined-string-literal"]
  253 [label="State 253\n\l145 class-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l"]
  253 -> "253R145" [style=solid]
 "253R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  253 -> "253R294d" [label="[SEMICOLON, ELLIPSIS, COMMA, SCOPE, OPEN_BRACE]", style=solid]
 "253R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  253 -> "253R647d" [label="[SEMICOLON, SCOPE]", style=solid]
 "253R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  253 -> "253R653d" [label="[SEMICOLON, SCOPE]", style=solid]
 "253R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  253 -> "253R1052" [label="[LESS]", style=solid]
 "253R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  253 -> "253R1110d" [label="[SEMICOLON, ELLIPSIS, COMMA, SCOPE, OPEN_BRACE]", style=solid]
 "253R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  254 [label="State 254\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l1112 typename-specifier: TYPENAME nested-name-specifier • IDENTIFIER\l1113                   | TYPENAME nested-name-specifier • simple-template-id\l1114                   | TYPENAME nested-name-specifier • TEMPLATE simple-template-id\l"]
  254 -> 572 [style=solid label="IDENTIFIER"]
  254 -> 573 [style=solid label="TEMPLATE"]
  254 -> 574 [style=dashed label="simple-template-id"]
  254 -> 142 [style=dashed label="template-name"]
  255 [label="State 255\n\l1171 using-directive: attribute-specifier-seq USING • NAMESPACE namespace-name SEMICOLON\l1173                | attribute-specifier-seq USING • NAMESPACE nested-name-specifier namespace-name SEMICOLON\l"]
  255 -> 575 [style=solid label="NAMESPACE"]
  256 [label="State 256\n\l 42 attribute-declaration: attribute-specifier-seq SEMICOLON •\l"]
  256 -> "256R42" [style=solid]
 "256R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  257 [label="State 257\n\l 21 asm-declaration: attribute-specifier-seq ASM • OPEN_PAREN string-literal CLOSE_PAREN SEMICOLON\l"]
  257 -> 576 [style=solid label="OPEN_PAREN"]
  258 [label="State 258\n\l206 decl-specifier: INLINE •\l"]
  258 -> "258R206" [style=solid]
 "258R206" [label="R206", fillcolor=3, shape=diamond, style=filled]
  259 [label="State 259\n\l1028 storage-class-specifier: EXTERN •\l"]
  259 -> "259R1028" [style=solid]
 "259R1028" [label="R1028", fillcolor=3, shape=diamond, style=filled]
  260 [label="State 260\n\l 53 attribute-specifier-seq: attribute-specifier-seq attribute-specifier •\l"]
  260 -> "260R53" [style=solid]
 "260R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  261 [label="State 261\n\l397 function-definition: attribute-specifier-seq decl-specifier-seq • declarator function-body\l401                    | attribute-specifier-seq decl-specifier-seq • declarator virt-specifier-seq function-body\l405                    | attribute-specifier-seq decl-specifier-seq • declarator requires-clause function-body\l965 simple-declaration: attribute-specifier-seq decl-specifier-seq • init-declarator-list SEMICOLON\l966                   | attribute-specifier-seq decl-specifier-seq • OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l968                   | attribute-specifier-seq decl-specifier-seq • ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  261 -> 147 [style=solid label="IDENTIFIER"]
  261 -> 5 [style=solid label="OPEN_PAREN"]
  261 -> 6 [style=solid label="ELLIPSIS"]
  261 -> 278 [style=solid label="AND"]
  261 -> 9 [style=solid label="SCOPE"]
  261 -> 577 [style=solid label="OPEN_SQUARE"]
  261 -> 280 [style=solid label="AND_AND"]
  261 -> 17 [style=solid label="OPERATOR"]
  261 -> 134 [style=solid label="DECLTYPE"]
  261 -> 31 [style=solid label="MULT"]
  261 -> 35 [style=solid label="COMPL"]
  261 -> 65 [style=dashed label="class-name"]
  261 -> 68 [style=dashed label="conversion-function-id"]
  261 -> 578 [style=dashed label="declarator"]
  261 -> 75 [style=dashed label="declarator-id"]
  261 -> 138 [style=dashed label="decltype-specifier"]
  261 -> 84 [style=dashed label="enum-name"]
  261 -> 93 [style=dashed label="id-expression"]
  261 -> 282 [style=dashed label="init-declarator"]
  261 -> 579 [style=dashed label="init-declarator-list"]
  261 -> 95 [style=dashed label="literal-operator-id"]
  261 -> 99 [style=dashed label="namespace-alias"]
  261 -> 102 [style=dashed label="namespace-name"]
  261 -> 148 [style=dashed label="nested-name-specifier"]
  261 -> 106 [style=dashed label="noptr-declarator"]
  261 -> 108 [style=dashed label="operator-function-id"]
  261 -> 110 [style=dashed label="ptr-declarator"]
  261 -> 111 [style=dashed label="ptr-operator"]
  261 -> 112 [style=dashed label="qualified-id"]
  261 -> 580 [style=dashed label="ref-qualifier"]
  261 -> 114 [style=dashed label="simple-template-id"]
  261 -> 120 [style=dashed label="template-id"]
  261 -> 142 [style=dashed label="template-name"]
  261 -> 143 [style=dashed label="type-name"]
  261 -> 126 [style=dashed label="typedef-name"]
  261 -> 129 [style=dashed label="unqualified-id"]
  262 [label="State 262\n\l395 function-definition: attribute-specifier-seq declarator • function-body\l399                    | attribute-specifier-seq declarator • virt-specifier-seq function-body\l403                    | attribute-specifier-seq declarator • requires-clause function-body\l690 nodeclspec-function-declaration: attribute-specifier-seq declarator • SEMICOLON\l"]
  262 -> 286 [style=solid label="EQ"]
  262 -> 581 [style=solid label="SEMICOLON"]
  262 -> 288 [style=solid label="COLON"]
  262 -> 289 [style=solid label="OPEN_BRACE"]
  262 -> 290 [style=solid label="FINAL"]
  262 -> 291 [style=solid label="TRY"]
  262 -> 292 [style=solid label="REQUIRES"]
  262 -> 293 [style=solid label="OVERRIDE"]
  262 -> 294 [style=dashed label="compound-statement"]
  262 -> 295 [style=dashed label="ctor-initializer"]
  262 -> 582 [style=dashed label="function-body"]
  262 -> 297 [style=dashed label="function-try-block"]
  262 -> 583 [style=dashed label="requires-clause"]
  262 -> 299 [style=dashed label="virt-specifier"]
  262 -> 584 [style=dashed label="virt-specifier-seq"]
  263 [label="State 263\n\l281 enum-head: enum-key •\l282          | enum-key • attribute-specifier-seq\l283          | enum-key • enum-head-name\l284          | enum-key • attribute-specifier-seq enum-head-name\l285          | enum-key • enum-base\l286          | enum-key • attribute-specifier-seq enum-base\l287          | enum-key • enum-head-name enum-base\l288          | enum-key • attribute-specifier-seq enum-head-name enum-base\l"]
  263 -> 304 [style=solid label="IDENTIFIER"]
  263 -> 4 [style=solid label="ALIGNAS"]
  263 -> 9 [style=solid label="SCOPE"]
  263 -> 10 [style=solid label="OPEN_SQUARE"]
  263 -> 305 [style=solid label="COLON"]
  263 -> 134 [style=solid label="DECLTYPE"]
  263 -> 57 [style=dashed label="alignment-specifier"]
  263 -> 60 [style=dashed label="attribute-specifier"]
  263 -> 585 [style=dashed label="attribute-specifier-seq"]
  263 -> 65 [style=dashed label="class-name"]
  263 -> 138 [style=dashed label="decltype-specifier"]
  263 -> 307 [style=dashed label="enum-base"]
  263 -> 586 [style=dashed label="enum-head-name"]
  263 -> 84 [style=dashed label="enum-name"]
  263 -> 99 [style=dashed label="namespace-alias"]
  263 -> 102 [style=dashed label="namespace-name"]
  263 -> 309 [style=dashed label="nested-name-specifier"]
  263 -> 141 [style=dashed label="simple-template-id"]
  263 -> 142 [style=dashed label="template-name"]
  263 -> 143 [style=dashed label="type-name"]
  263 -> 126 [style=dashed label="typedef-name"]
  263 -> "263R281" [style=solid]
 "263R281" [label="R281", fillcolor=3, shape=diamond, style=filled]
  264 [label="State 264\n\l408 function-specifier: explicit-specifier •\l"]
  264 -> "264R408" [style=solid]
 "264R408" [label="R408", fillcolor=3, shape=diamond, style=filled]
  265 [label="State 265\n\l151 class-specifier: class-head OPEN_BRACE • CLOSE_BRACE\l152                | class-head OPEN_BRACE • member-specification CLOSE_BRACE\l"]
  265 -> 587 [style=solid label="PRIVATE"]
  265 -> 588 [style=solid label="PROTECTED"]
  265 -> 589 [style=solid label="PUBLIC"]
  265 -> 590 [style=solid label="USING"]
  265 -> 591 [style=solid label="IDENTIFIER"]
  265 -> 592 [style=solid label="SEMICOLON"]
  265 -> 4 [style=solid label="ALIGNAS"]
  265 -> 5 [style=solid label="OPEN_PAREN"]
  265 -> 6 [style=solid label="ELLIPSIS"]
  265 -> 7 [style=solid label="AND"]
  265 -> 9 [style=solid label="SCOPE"]
  265 -> 10 [style=solid label="OPEN_SQUARE"]
  265 -> 593 [style=solid label="COLON"]
  265 -> 594 [style=solid label="CLOSE_BRACE"]
  265 -> 11 [style=solid label="VIRTUAL"]
  265 -> 12 [style=solid label="CLASS"]
  265 -> 13 [style=solid label="STRUCT"]
  265 -> 14 [style=solid label="UNION"]
  265 -> 595 [style=solid label="TEMPLATE"]
  265 -> 16 [style=solid label="AND_AND"]
  265 -> 17 [style=solid label="OPERATOR"]
  265 -> 18 [style=solid label="CONST"]
  265 -> 19 [style=solid label="VOLATILE"]
  265 -> 20 [style=solid label="FRIEND"]
  265 -> 21 [style=solid label="TYPEDEF"]
  265 -> 22 [style=solid label="CONSTEXPR"]
  265 -> 23 [style=solid label="CONSTEVAL"]
  265 -> 24 [style=solid label="CONSTINIT"]
  265 -> 258 [style=solid label="INLINE"]
  265 -> 26 [style=solid label="DECLTYPE"]
  265 -> 27 [style=solid label="ENUM"]
  265 -> 259 [style=solid label="EXTERN"]
  265 -> 29 [style=solid label="EXPLICIT"]
  265 -> 31 [style=solid label="MULT"]
  265 -> 35 [style=solid label="COMPL"]
  265 -> 36 [style=solid label="AUTO"]
  265 -> 37 [style=solid label="CHAR"]
  265 -> 38 [style=solid label="CHAR8_T"]
  265 -> 39 [style=solid label="CHAR16_T"]
  265 -> 40 [style=solid label="CHAR32_T"]
  265 -> 41 [style=solid label="WCHAR_T"]
  265 -> 42 [style=solid label="BOOL"]
  265 -> 43 [style=solid label="SHORT"]
  265 -> 44 [style=solid label="INT"]
  265 -> 45 [style=solid label="LONG"]
  265 -> 46 [style=solid label="SIGNED"]
  265 -> 47 [style=solid label="UNSIGNED"]
  265 -> 48 [style=solid label="FLOAT"]
  265 -> 49 [style=solid label="DOUBLE"]
  265 -> 50 [style=solid label="VOID"]
  265 -> 51 [style=solid label="STATIC_ASSERT"]
  265 -> 52 [style=solid label="STATIC"]
  265 -> 53 [style=solid label="THREAD_LOCAL"]
  265 -> 54 [style=solid label="MUTABLE"]
  265 -> 55 [style=solid label="TYPENAME"]
  265 -> 596 [style=dashed label="access-specifier"]
  265 -> 597 [style=dashed label="alias-declaration"]
  265 -> 57 [style=dashed label="alignment-specifier"]
  265 -> 60 [style=dashed label="attribute-specifier"]
  265 -> 598 [style=dashed label="attribute-specifier-seq"]
  265 -> 63 [style=dashed label="class-head"]
  265 -> 64 [style=dashed label="class-key"]
  265 -> 65 [style=dashed label="class-name"]
  265 -> 66 [style=dashed label="class-specifier"]
  265 -> 67 [style=dashed label="concept-name"]
  265 -> 68 [style=dashed label="conversion-function-id"]
  265 -> 69 [style=dashed label="cv-qualifier"]
  265 -> 70 [style=dashed label="decl-specifier"]
  265 -> 599 [style=dashed label="decl-specifier-seq"]
  265 -> 600 [style=dashed label="declarator"]
  265 -> 75 [style=dashed label="declarator-id"]
  265 -> 76 [style=dashed label="decltype-specifier"]
  265 -> 601 [style=dashed label="deduction-guide"]
  265 -> 78 [style=dashed label="defining-type-specifier"]
  265 -> 79 [style=dashed label="elaborated-enum-specifier"]
  265 -> 80 [style=dashed label="elaborated-type-specifier"]
  265 -> 602 [style=dashed label="empty-declaration"]
  265 -> 82 [style=dashed label="enum-head"]
  265 -> 83 [style=dashed label="enum-key"]
  265 -> 84 [style=dashed label="enum-name"]
  265 -> 85 [style=dashed label="enum-specifier"]
  265 -> 603 [style=dashed label="explicit-specialization"]
  265 -> 88 [style=dashed label="explicit-specifier"]
  265 -> 604 [style=dashed label="function-definition"]
  265 -> 91 [style=dashed label="function-specifier"]
  265 -> 93 [style=dashed label="id-expression"]
  265 -> 95 [style=dashed label="literal-operator-id"]
  265 -> 605 [style=dashed label="member-declaration"]
  265 -> 606 [style=dashed label="member-declarator"]
  265 -> 607 [style=dashed label="member-declarator-list"]
  265 -> 608 [style=dashed label="member-specification"]
  265 -> 99 [style=dashed label="namespace-alias"]
  265 -> 102 [style=dashed label="namespace-name"]
  265 -> 103 [style=dashed label="nested-name-specifier"]
  265 -> 106 [style=dashed label="noptr-declarator"]
  265 -> 609 [style=dashed label="opaque-enum-declaration"]
  265 -> 108 [style=dashed label="operator-function-id"]
  265 -> 109 [style=dashed label="placeholder-type-specifier"]
  265 -> 110 [style=dashed label="ptr-declarator"]
  265 -> 111 [style=dashed label="ptr-operator"]
  265 -> 112 [style=dashed label="qualified-id"]
  265 -> 114 [style=dashed label="simple-template-id"]
  265 -> 115 [style=dashed label="simple-type-specifier"]
  265 -> 610 [style=dashed label="static_assert-declaration"]
  265 -> 117 [style=dashed label="storage-class-specifier"]
  265 -> 611 [style=dashed label="template-declaration"]
  265 -> 119 [style=dashed label="template-head"]
  265 -> 120 [style=dashed label="template-id"]
  265 -> 121 [style=dashed label="template-name"]
  265 -> 123 [style=dashed label="type-constraint"]
  265 -> 124 [style=dashed label="type-name"]
  265 -> 125 [style=dashed label="type-specifier"]
  265 -> 126 [style=dashed label="typedef-name"]
  265 -> 127 [style=dashed label="typename-specifier"]
  265 -> 129 [style=dashed label="unqualified-id"]
  265 -> 612 [style=dashed label="using-declaration"]
  265 -> 613 [style=dashed label="using-enum-declaration"]
  266 [label="State 266\n\l145 class-name: IDENTIFIER •\l264 elaborated-type-specifier: class-key IDENTIFIER •\l294 enum-name: IDENTIFIER •\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l"]
  266 -> "266R145" [label="[SCOPE, COLON, OPEN_BRACE, FINAL]", style=solid]
 "266R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  266 -> "266R264d" [label="[SCOPE, COLON, OPEN_BRACE, FINAL]", style=solid]
 "266R264d" [label="R264", fillcolor=5, shape=diamond, style=filled]
  266 -> "266R264" [style=solid]
 "266R264" [label="R264", fillcolor=3, shape=diamond, style=filled]
  266 -> "266R294d" [label="[SCOPE]", style=solid]
 "266R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  266 -> "266R647d" [label="[SCOPE]", style=solid]
 "266R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  266 -> "266R653d" [label="[SCOPE]", style=solid]
 "266R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  266 -> "266R1052d" [label="[LESS]", style=solid]
 "266R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  266 -> "266R1110d" [label="[SCOPE]", style=solid]
 "266R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  267 [label="State 267\n\l 68 base-clause: COLON • base-specifier-list\l"]
  267 -> 587 [style=solid label="PRIVATE"]
  267 -> 588 [style=solid label="PROTECTED"]
  267 -> 589 [style=solid label="PUBLIC"]
  267 -> 253 [style=solid label="IDENTIFIER"]
  267 -> 4 [style=solid label="ALIGNAS"]
  267 -> 9 [style=solid label="SCOPE"]
  267 -> 10 [style=solid label="OPEN_SQUARE"]
  267 -> 614 [style=solid label="VIRTUAL"]
  267 -> 134 [style=solid label="DECLTYPE"]
  267 -> 615 [style=dashed label="access-specifier"]
  267 -> 57 [style=dashed label="alignment-specifier"]
  267 -> 60 [style=dashed label="attribute-specifier"]
  267 -> 616 [style=dashed label="attribute-specifier-seq"]
  267 -> 617 [style=dashed label="base-specifier"]
  267 -> 618 [style=dashed label="base-specifier-list"]
  267 -> 65 [style=dashed label="class-name"]
  267 -> 619 [style=dashed label="class-or-decltype"]
  267 -> 620 [style=dashed label="decltype-specifier"]
  267 -> 84 [style=dashed label="enum-name"]
  267 -> 99 [style=dashed label="namespace-alias"]
  267 -> 102 [style=dashed label="namespace-name"]
  267 -> 621 [style=dashed label="nested-name-specifier"]
  267 -> 141 [style=dashed label="simple-template-id"]
  267 -> 142 [style=dashed label="template-name"]
  267 -> 622 [style=dashed label="type-name"]
  267 -> 126 [style=dashed label="typedef-name"]
  268 [label="State 268\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l129 class-head: class-key attribute-specifier-seq • class-head-name\l131           | class-key attribute-specifier-seq • class-head-name class-virt-specifier\l133           | class-key attribute-specifier-seq • class-head-name base-clause\l135           | class-key attribute-specifier-seq • class-head-name class-virt-specifier base-clause\l137           | class-key attribute-specifier-seq •\l139           | class-key attribute-specifier-seq • base-clause\l265 elaborated-type-specifier: class-key attribute-specifier-seq • IDENTIFIER\l267                          | class-key attribute-specifier-seq • nested-name-specifier IDENTIFIER\l"]
  268 -> 623 [style=solid label="IDENTIFIER"]
  268 -> 4 [style=solid label="ALIGNAS"]
  268 -> 9 [style=solid label="SCOPE"]
  268 -> 10 [style=solid label="OPEN_SQUARE"]
  268 -> 267 [style=solid label="COLON"]
  268 -> 134 [style=solid label="DECLTYPE"]
  268 -> 57 [style=dashed label="alignment-specifier"]
  268 -> 260 [style=dashed label="attribute-specifier"]
  268 -> 624 [style=dashed label="base-clause"]
  268 -> 625 [style=dashed label="class-head-name"]
  268 -> 271 [style=dashed label="class-name"]
  268 -> 138 [style=dashed label="decltype-specifier"]
  268 -> 84 [style=dashed label="enum-name"]
  268 -> 99 [style=dashed label="namespace-alias"]
  268 -> 102 [style=dashed label="namespace-name"]
  268 -> 626 [style=dashed label="nested-name-specifier"]
  268 -> 141 [style=dashed label="simple-template-id"]
  268 -> 142 [style=dashed label="template-name"]
  268 -> 143 [style=dashed label="type-name"]
  268 -> 126 [style=dashed label="typedef-name"]
  268 -> "268R137" [style=solid]
 "268R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  269 [label="State 269\n\l138 class-head: class-key base-clause •\l"]
  269 -> "269R138" [style=solid]
 "269R138" [label="R138", fillcolor=3, shape=diamond, style=filled]
  270 [label="State 270\n\l128 class-head: class-key class-head-name •\l130           | class-key class-head-name • class-virt-specifier\l132           | class-key class-head-name • base-clause\l134           | class-key class-head-name • class-virt-specifier base-clause\l"]
  270 -> 267 [style=solid label="COLON"]
  270 -> 627 [style=solid label="FINAL"]
  270 -> 628 [style=dashed label="base-clause"]
  270 -> 629 [style=dashed label="class-virt-specifier"]
  270 -> "270R128" [style=solid]
 "270R128" [label="R128", fillcolor=3, shape=diamond, style=filled]
  271 [label="State 271\n\l141 class-head-name: class-name •\l1078 type-name: class-name •\l"]
  271 -> "271R141" [style=solid]
 "271R141" [label="R141", fillcolor=3, shape=diamond, style=filled]
  271 -> "271R1078" [label="[SCOPE]", style=solid]
 "271R1078" [label="R1078", fillcolor=3, shape=diamond, style=filled]
  272 [label="State 272\n\l140 class-head-name: nested-name-specifier • class-name\l266 elaborated-type-specifier: class-key nested-name-specifier • IDENTIFIER\l269                          | class-key nested-name-specifier • simple-template-id\l270                          | class-key nested-name-specifier • TEMPLATE simple-template-id\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l"]
  272 -> 630 [style=solid label="IDENTIFIER"]
  272 -> 631 [style=solid label="TEMPLATE"]
  272 -> 632 [style=dashed label="class-name"]
  272 -> 633 [style=dashed label="simple-template-id"]
  272 -> 142 [style=dashed label="template-name"]
  273 [label="State 273\n\l146 class-name: simple-template-id •\l268 elaborated-type-specifier: class-key simple-template-id •\l1111 typedef-name: simple-template-id •\l"]
  273 -> "273R146" [label="[SCOPE, COLON, OPEN_BRACE, FINAL]", style=solid]
 "273R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  273 -> "273R268d" [label="[SCOPE, COLON, OPEN_BRACE, FINAL]", style=solid]
 "273R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  273 -> "273R268" [style=solid]
 "273R268" [label="R268", fillcolor=3, shape=diamond, style=filled]
  273 -> "273R1111d" [label="[SCOPE]", style=solid]
 "273R1111d" [label="R1111", fillcolor=5, shape=diamond, style=filled]
  274 [label="State 274\n\l1073 type-constraint: concept-name LESS • GREATER\l1075                | concept-name LESS • template-argument-list GREATER\l"]
  274 -> 356 [style=solid label="PLUS"]
  274 -> 357 [style=solid label="MINUS"]
  274 -> 2 [style=solid label="IDENTIFIER"]
  274 -> 358 [style=solid label="OPEN_PAREN"]
  274 -> 359 [style=solid label="AND"]
  274 -> 360 [style=solid label="SCOPE"]
  274 -> 361 [style=solid label="OPEN_SQUARE"]
  274 -> 362 [style=solid label="CO_AWAIT"]
  274 -> 363 [style=solid label="ZERO_LB"]
  274 -> 364 [style=solid label="ZERO_HB"]
  274 -> 365 [style=solid label="SINGLE_QUOTE"]
  274 -> 366 [style=solid label="FALSE"]
  274 -> 367 [style=solid label="TRUE"]
  274 -> 12 [style=solid label="CLASS"]
  274 -> 13 [style=solid label="STRUCT"]
  274 -> 14 [style=solid label="UNION"]
  274 -> 368 [style=solid label="NOEXCEPT"]
  274 -> 17 [style=solid label="OPERATOR"]
  274 -> 18 [style=solid label="CONST"]
  274 -> 19 [style=solid label="VOLATILE"]
  274 -> 26 [style=solid label="DECLTYPE"]
  274 -> 369 [style=solid label="DELETE"]
  274 -> 370 [style=solid label="DOT"]
  274 -> 135 [style=solid label="ENUM"]
  274 -> 184 [style=solid label="UNICODE_8"]
  274 -> 634 [style=solid label="GREATER"]
  274 -> 371 [style=solid label="MULT"]
  274 -> 199 [style=solid label="DOUBLE_QUOTE"]
  274 -> 372 [style=solid label="ZERO_LX"]
  274 -> 373 [style=solid label="ZERO_HX"]
  274 -> 374 [style=solid label="REQUIRES"]
  274 -> 375 [style=solid label="NEW"]
  274 -> 376 [style=solid label="COMPL"]
  274 -> 377 [style=solid label="NOT"]
  274 -> 378 [style=solid label="PLUS_PLUS"]
  274 -> 379 [style=solid label="MINUS_MINUS"]
  274 -> 380 [style=solid label="THIS"]
  274 -> 36 [style=solid label="AUTO"]
  274 -> 381 [style=solid label="NULLPTR"]
  274 -> 382 [style=solid label="DYNAMIC_CAST"]
  274 -> 383 [style=solid label="STATIC_CAST"]
  274 -> 384 [style=solid label="REINTERPRET_CAST"]
  274 -> 385 [style=solid label="CONST_CAST"]
  274 -> 386 [style=solid label="TYPEID"]
  274 -> 37 [style=solid label="CHAR"]
  274 -> 38 [style=solid label="CHAR8_T"]
  274 -> 39 [style=solid label="CHAR16_T"]
  274 -> 40 [style=solid label="CHAR32_T"]
  274 -> 41 [style=solid label="WCHAR_T"]
  274 -> 42 [style=solid label="BOOL"]
  274 -> 43 [style=solid label="SHORT"]
  274 -> 44 [style=solid label="INT"]
  274 -> 45 [style=solid label="LONG"]
  274 -> 46 [style=solid label="SIGNED"]
  274 -> 47 [style=solid label="UNSIGNED"]
  274 -> 48 [style=solid label="FLOAT"]
  274 -> 49 [style=solid label="DOUBLE"]
  274 -> 50 [style=solid label="VOID"]
  274 -> 55 [style=solid label="TYPENAME"]
  274 -> 387 [style=solid label="SIZEOF"]
  274 -> 388 [style=solid label="ALIGNOF"]
  274 -> 389 [style=solid label="'0'"]
  274 -> 390 [style=solid label="'1'"]
  274 -> 391 [style=solid label="'2'"]
  274 -> 392 [style=solid label="'3'"]
  274 -> 393 [style=solid label="'4'"]
  274 -> 394 [style=solid label="'5'"]
  274 -> 395 [style=solid label="'6'"]
  274 -> 396 [style=solid label="'7'"]
  274 -> 397 [style=solid label="'8'"]
  274 -> 398 [style=solid label="'9'"]
  274 -> 205 [style=solid label="'u'"]
  274 -> 206 [style=solid label="'U'"]
  274 -> 207 [style=solid label="'L'"]
  274 -> 208 [style=solid label="'R'"]
  274 -> 399 [style=dashed label="additive-expression"]
  274 -> 400 [style=dashed label="and-expression"]
  274 -> 401 [style=dashed label="await-expression"]
  274 -> 402 [style=dashed label="binary-literal"]
  274 -> 403 [style=dashed label="boolean-literal"]
  274 -> 404 [style=dashed label="cast-expression"]
  274 -> 405 [style=dashed label="character-literal"]
  274 -> 209 [style=dashed label="class-key"]
  274 -> 65 [style=dashed label="class-name"]
  274 -> 406 [style=dashed label="compare-expression"]
  274 -> 67 [style=dashed label="concept-name"]
  274 -> 407 [style=dashed label="conditional-expression"]
  274 -> 635 [style=dashed label="constant-expression"]
  274 -> 68 [style=dashed label="conversion-function-id"]
  274 -> 69 [style=dashed label="cv-qualifier"]
  274 -> 409 [style=dashed label="decimal-floating-point-literal"]
  274 -> 410 [style=dashed label="decimal-literal"]
  274 -> 76 [style=dashed label="decltype-specifier"]
  274 -> 411 [style=dashed label="delete-expression"]
  274 -> 412 [style=dashed label="digit"]
  274 -> 413 [style=dashed label="digit-sequence"]
  274 -> 79 [style=dashed label="elaborated-enum-specifier"]
  274 -> 80 [style=dashed label="elaborated-type-specifier"]
  274 -> 414 [style=dashed label="encoding-prefix"]
  274 -> 84 [style=dashed label="enum-name"]
  274 -> 415 [style=dashed label="equality-expression"]
  274 -> 416 [style=dashed label="exclusive-or-expression"]
  274 -> 417 [style=dashed label="floating-point-literal"]
  274 -> 418 [style=dashed label="fold-expression"]
  274 -> 419 [style=dashed label="fractional-constant"]
  274 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  274 -> 421 [style=dashed label="hexadecimal-literal"]
  274 -> 422 [style=dashed label="hexadecimal-prefix"]
  274 -> 636 [style=dashed label="id-expression"]
  274 -> 424 [style=dashed label="inclusive-or-expression"]
  274 -> 425 [style=dashed label="integer-literal"]
  274 -> 426 [style=dashed label="lambda-expression"]
  274 -> 427 [style=dashed label="lambda-introducer"]
  274 -> 428 [style=dashed label="literal"]
  274 -> 95 [style=dashed label="literal-operator-id"]
  274 -> 429 [style=dashed label="logical-and-expression"]
  274 -> 430 [style=dashed label="logical-or-expression"]
  274 -> 431 [style=dashed label="multiplicative-expression"]
  274 -> 99 [style=dashed label="namespace-alias"]
  274 -> 102 [style=dashed label="namespace-name"]
  274 -> 432 [style=dashed label="nested-name-specifier"]
  274 -> 433 [style=dashed label="new-expression"]
  274 -> 434 [style=dashed label="noexcept-expression"]
  274 -> 435 [style=dashed label="nonzero-digit"]
  274 -> 436 [style=dashed label="octal-literal"]
  274 -> 108 [style=dashed label="operator-function-id"]
  274 -> 109 [style=dashed label="placeholder-type-specifier"]
  274 -> 437 [style=dashed label="pm-expression"]
  274 -> 438 [style=dashed label="pointer-literal"]
  274 -> 439 [style=dashed label="postfix-expression"]
  274 -> 440 [style=dashed label="primary-expression"]
  274 -> 112 [style=dashed label="qualified-id"]
  274 -> 441 [style=dashed label="relational-expression"]
  274 -> 442 [style=dashed label="requires-expression"]
  274 -> 443 [style=dashed label="shift-expression"]
  274 -> 114 [style=dashed label="simple-template-id"]
  274 -> 444 [style=dashed label="simple-type-specifier"]
  274 -> 445 [style=dashed label="string-literal"]
  274 -> 637 [style=dashed label="template-argument"]
  274 -> 638 [style=dashed label="template-argument-list"]
  274 -> 120 [style=dashed label="template-id"]
  274 -> 215 [style=dashed label="template-name"]
  274 -> 123 [style=dashed label="type-constraint"]
  274 -> 639 [style=dashed label="type-id"]
  274 -> 124 [style=dashed label="type-name"]
  274 -> 216 [style=dashed label="type-specifier"]
  274 -> 447 [style=dashed label="type-specifier-seq"]
  274 -> 126 [style=dashed label="typedef-name"]
  274 -> 448 [style=dashed label="typename-specifier"]
  274 -> 449 [style=dashed label="unary-expression"]
  274 -> 450 [style=dashed label="unary-operator"]
  274 -> 129 [style=dashed label="unqualified-id"]
  274 -> 451 [style=dashed label="user-defined-character-literal"]
  274 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  274 -> 453 [style=dashed label="user-defined-integer-literal"]
  274 -> 454 [style=dashed label="user-defined-literal"]
  274 -> 455 [style=dashed label="user-defined-string-literal"]
  275 [label="State 275\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l208 decl-specifier-seq: decl-specifier attribute-specifier-seq •\l"]
  275 -> 4 [style=solid label="ALIGNAS"]
  275 -> 10 [style=solid label="OPEN_SQUARE"]
  275 -> 57 [style=dashed label="alignment-specifier"]
  275 -> 260 [style=dashed label="attribute-specifier"]
  275 -> "275R208d" [label="[ALIGNAS, OPEN_SQUARE]", style=solid]
 "275R208d" [label="R208", fillcolor=5, shape=diamond, style=filled]
  275 -> "275R208" [style=solid]
 "275R208" [label="R208", fillcolor=3, shape=diamond, style=filled]
  276 [label="State 276\n\l209 decl-specifier-seq: decl-specifier decl-specifier-seq •\l"]
  276 -> "276R209" [style=solid]
 "276R209" [label="R209", fillcolor=3, shape=diamond, style=filled]
  277 [label="State 277\n\l963 simple-declaration: decl-specifier-seq SEMICOLON •\l"]
  277 -> "277R963" [style=solid]
 "277R963" [label="R963", fillcolor=3, shape=diamond, style=filled]
  278 [label="State 278\n\l897 ptr-operator: AND •\l898             | AND • attribute-specifier-seq\l914 ref-qualifier: AND •\l"]
  278 -> 4 [style=solid label="ALIGNAS"]
  278 -> 10 [style=solid label="OPEN_SQUARE"]
  278 -> 57 [style=dashed label="alignment-specifier"]
  278 -> 60 [style=dashed label="attribute-specifier"]
  278 -> 153 [style=dashed label="attribute-specifier-seq"]
  278 -> "278R897" [style=solid]
 "278R897" [label="R897", fillcolor=3, shape=diamond, style=filled]
  278 -> "278R914d" [label="[OPEN_SQUARE]", style=solid]
 "278R914d" [label="R914", fillcolor=5, shape=diamond, style=filled]
  279 [label="State 279\n\l967 simple-declaration: decl-specifier-seq OPEN_SQUARE • identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  279 -> 640 [style=solid label="IDENTIFIER"]
  279 -> 641 [style=dashed label="identifier-list"]
  280 [label="State 280\n\l899 ptr-operator: AND_AND •\l900             | AND_AND • attribute-specifier-seq\l915 ref-qualifier: AND_AND •\l"]
  280 -> 4 [style=solid label="ALIGNAS"]
  280 -> 10 [style=solid label="OPEN_SQUARE"]
  280 -> 57 [style=dashed label="alignment-specifier"]
  280 -> 60 [style=dashed label="attribute-specifier"]
  280 -> 159 [style=dashed label="attribute-specifier-seq"]
  280 -> "280R899" [style=solid]
 "280R899" [label="R899", fillcolor=3, shape=diamond, style=filled]
  280 -> "280R915d" [label="[OPEN_SQUARE]", style=solid]
 "280R915d" [label="R915", fillcolor=5, shape=diamond, style=filled]
  281 [label="State 281\n\l398 function-definition: decl-specifier-seq declarator • function-body\l402                    | decl-specifier-seq declarator • virt-specifier-seq function-body\l406                    | decl-specifier-seq declarator • requires-clause function-body\l469 init-declarator: declarator •\l470                | declarator • initializer\l471                | declarator • requires-clause\l"]
  281 -> 642 [style=solid label="EQ"]
  281 -> 643 [style=solid label="OPEN_PAREN"]
  281 -> 288 [style=solid label="COLON"]
  281 -> 644 [style=solid label="OPEN_BRACE"]
  281 -> 290 [style=solid label="FINAL"]
  281 -> 291 [style=solid label="TRY"]
  281 -> 292 [style=solid label="REQUIRES"]
  281 -> 293 [style=solid label="OVERRIDE"]
  281 -> 645 [style=dashed label="brace-or-equal-initializer"]
  281 -> 646 [style=dashed label="braced-init-list"]
  281 -> 294 [style=dashed label="compound-statement"]
  281 -> 295 [style=dashed label="ctor-initializer"]
  281 -> 647 [style=dashed label="function-body"]
  281 -> 297 [style=dashed label="function-try-block"]
  281 -> 648 [style=dashed label="initializer"]
  281 -> 649 [style=dashed label="requires-clause"]
  281 -> 299 [style=dashed label="virt-specifier"]
  281 -> 650 [style=dashed label="virt-specifier-seq"]
  281 -> "281R469" [style=solid]
 "281R469" [label="R469", fillcolor=3, shape=diamond, style=filled]
  282 [label="State 282\n\l472 init-declarator-list: init-declarator •\l"]
  282 -> "282R472" [style=solid]
 "282R472" [label="R472", fillcolor=3, shape=diamond, style=filled]
  283 [label="State 283\n\l473 init-declarator-list: init-declarator-list • COMMA init-declarator\l964 simple-declaration: decl-specifier-seq init-declarator-list • SEMICOLON\l"]
  283 -> 651 [style=solid label="SEMICOLON"]
  283 -> 652 [style=solid label="COMMA"]
  284 [label="State 284\n\l969 simple-declaration: decl-specifier-seq ref-qualifier • OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  284 -> 653 [style=solid label="OPEN_SQUARE"]
  285 [label="State 285\n\l224 declaration-seq: declaration-seq declaration •\l"]
  285 -> "285R224" [style=solid]
 "285R224" [label="R224", fillcolor=3, shape=diamond, style=filled]
  286 [label="State 286\n\l393 function-body: EQ • DEFAULT SEMICOLON\l394              | EQ • DELETE SEMICOLON\l"]
  286 -> 654 [style=solid label="DELETE"]
  286 -> 655 [style=solid label="DEFAULT"]
  287 [label="State 287\n\l691 nodeclspec-function-declaration: declarator SEMICOLON •\l"]
  287 -> "287R691" [style=solid]
 "287R691" [label="R691", fillcolor=3, shape=diamond, style=filled]
  288 [label="State 288\n\l184 ctor-initializer: COLON • mem-initializer-list\l"]
  288 -> 656 [style=solid label="IDENTIFIER"]
  288 -> 9 [style=solid label="SCOPE"]
  288 -> 134 [style=solid label="DECLTYPE"]
  288 -> 65 [style=dashed label="class-name"]
  288 -> 657 [style=dashed label="class-or-decltype"]
  288 -> 620 [style=dashed label="decltype-specifier"]
  288 -> 84 [style=dashed label="enum-name"]
  288 -> 658 [style=dashed label="mem-initializer"]
  288 -> 659 [style=dashed label="mem-initializer-id"]
  288 -> 660 [style=dashed label="mem-initializer-list"]
  288 -> 99 [style=dashed label="namespace-alias"]
  288 -> 102 [style=dashed label="namespace-name"]
  288 -> 621 [style=dashed label="nested-name-specifier"]
  288 -> 141 [style=dashed label="simple-template-id"]
  288 -> 142 [style=dashed label="template-name"]
  288 -> 622 [style=dashed label="type-name"]
  288 -> 126 [style=dashed label="typedef-name"]
  289 [label="State 289\n\l160 compound-statement: OPEN_BRACE • CLOSE_BRACE\l161                   | OPEN_BRACE • statement-seq CLOSE_BRACE\l"]
  289 -> 356 [style=solid label="PLUS"]
  289 -> 357 [style=solid label="MINUS"]
  289 -> 1 [style=solid label="USING"]
  289 -> 661 [style=solid label="IDENTIFIER"]
  289 -> 662 [style=solid label="SEMICOLON"]
  289 -> 4 [style=solid label="ALIGNAS"]
  289 -> 358 [style=solid label="OPEN_PAREN"]
  289 -> 359 [style=solid label="AND"]
  289 -> 8 [style=solid label="ASM"]
  289 -> 360 [style=solid label="SCOPE"]
  289 -> 663 [style=solid label="OPEN_SQUARE"]
  289 -> 362 [style=solid label="CO_AWAIT"]
  289 -> 289 [style=solid label="OPEN_BRACE"]
  289 -> 664 [style=solid label="CLOSE_BRACE"]
  289 -> 11 [style=solid label="VIRTUAL"]
  289 -> 363 [style=solid label="ZERO_LB"]
  289 -> 364 [style=solid label="ZERO_HB"]
  289 -> 365 [style=solid label="SINGLE_QUOTE"]
  289 -> 366 [style=solid label="FALSE"]
  289 -> 367 [style=solid label="TRUE"]
  289 -> 12 [style=solid label="CLASS"]
  289 -> 13 [style=solid label="STRUCT"]
  289 -> 14 [style=solid label="UNION"]
  289 -> 368 [style=solid label="NOEXCEPT"]
  289 -> 17 [style=solid label="OPERATOR"]
  289 -> 665 [style=solid label="CO_RETURN"]
  289 -> 18 [style=solid label="CONST"]
  289 -> 19 [style=solid label="VOLATILE"]
  289 -> 20 [style=solid label="FRIEND"]
  289 -> 21 [style=solid label="TYPEDEF"]
  289 -> 22 [style=solid label="CONSTEXPR"]
  289 -> 23 [style=solid label="CONSTEVAL"]
  289 -> 24 [style=solid label="CONSTINIT"]
  289 -> 258 [style=solid label="INLINE"]
  289 -> 26 [style=solid label="DECLTYPE"]
  289 -> 369 [style=solid label="DELETE"]
  289 -> 370 [style=solid label="DOT"]
  289 -> 27 [style=solid label="ENUM"]
  289 -> 184 [style=solid label="UNICODE_8"]
  289 -> 259 [style=solid label="EXTERN"]
  289 -> 29 [style=solid label="EXPLICIT"]
  289 -> 371 [style=solid label="MULT"]
  289 -> 666 [style=solid label="DEFAULT"]
  289 -> 667 [style=solid label="TRY"]
  289 -> 199 [style=solid label="DOUBLE_QUOTE"]
  289 -> 372 [style=solid label="ZERO_LX"]
  289 -> 373 [style=solid label="ZERO_HX"]
  289 -> 668 [style=solid label="WHILE"]
  289 -> 669 [style=solid label="DO"]
  289 -> 670 [style=solid label="FOR"]
  289 -> 671 [style=solid label="BREAK"]
  289 -> 672 [style=solid label="CONTINUE"]
  289 -> 673 [style=solid label="RETURN"]
  289 -> 674 [style=solid label="GOTO"]
  289 -> 675 [style=solid label="CASE"]
  289 -> 676 [style=solid label="NAMESPACE"]
  289 -> 374 [style=solid label="REQUIRES"]
  289 -> 375 [style=solid label="NEW"]
  289 -> 376 [style=solid label="COMPL"]
  289 -> 377 [style=solid label="NOT"]
  289 -> 378 [style=solid label="PLUS_PLUS"]
  289 -> 379 [style=solid label="MINUS_MINUS"]
  289 -> 380 [style=solid label="THIS"]
  289 -> 36 [style=solid label="AUTO"]
  289 -> 381 [style=solid label="NULLPTR"]
  289 -> 382 [style=solid label="DYNAMIC_CAST"]
  289 -> 383 [style=solid label="STATIC_CAST"]
  289 -> 384 [style=solid label="REINTERPRET_CAST"]
  289 -> 385 [style=solid label="CONST_CAST"]
  289 -> 386 [style=solid label="TYPEID"]
  289 -> 677 [style=solid label="IF"]
  289 -> 678 [style=solid label="SWITCH"]
  289 -> 37 [style=solid label="CHAR"]
  289 -> 38 [style=solid label="CHAR8_T"]
  289 -> 39 [style=solid label="CHAR16_T"]
  289 -> 40 [style=solid label="CHAR32_T"]
  289 -> 41 [style=solid label="WCHAR_T"]
  289 -> 42 [style=solid label="BOOL"]
  289 -> 43 [style=solid label="SHORT"]
  289 -> 44 [style=solid label="INT"]
  289 -> 45 [style=solid label="LONG"]
  289 -> 46 [style=solid label="SIGNED"]
  289 -> 47 [style=solid label="UNSIGNED"]
  289 -> 48 [style=solid label="FLOAT"]
  289 -> 49 [style=solid label="DOUBLE"]
  289 -> 50 [style=solid label="VOID"]
  289 -> 51 [style=solid label="STATIC_ASSERT"]
  289 -> 52 [style=solid label="STATIC"]
  289 -> 53 [style=solid label="THREAD_LOCAL"]
  289 -> 54 [style=solid label="MUTABLE"]
  289 -> 523 [style=solid label="THROW"]
  289 -> 55 [style=solid label="TYPENAME"]
  289 -> 387 [style=solid label="SIZEOF"]
  289 -> 388 [style=solid label="ALIGNOF"]
  289 -> 524 [style=solid label="CO_YIELD"]
  289 -> 389 [style=solid label="'0'"]
  289 -> 390 [style=solid label="'1'"]
  289 -> 391 [style=solid label="'2'"]
  289 -> 392 [style=solid label="'3'"]
  289 -> 393 [style=solid label="'4'"]
  289 -> 394 [style=solid label="'5'"]
  289 -> 395 [style=solid label="'6'"]
  289 -> 396 [style=solid label="'7'"]
  289 -> 397 [style=solid label="'8'"]
  289 -> 398 [style=solid label="'9'"]
  289 -> 205 [style=solid label="'u'"]
  289 -> 206 [style=solid label="'U'"]
  289 -> 207 [style=solid label="'L'"]
  289 -> 208 [style=solid label="'R'"]
  289 -> 399 [style=dashed label="additive-expression"]
  289 -> 56 [style=dashed label="alias-declaration"]
  289 -> 57 [style=dashed label="alignment-specifier"]
  289 -> 400 [style=dashed label="and-expression"]
  289 -> 58 [style=dashed label="asm-declaration"]
  289 -> 525 [style=dashed label="assignment-expression"]
  289 -> 60 [style=dashed label="attribute-specifier"]
  289 -> 679 [style=dashed label="attribute-specifier-seq"]
  289 -> 401 [style=dashed label="await-expression"]
  289 -> 402 [style=dashed label="binary-literal"]
  289 -> 680 [style=dashed label="block-declaration"]
  289 -> 403 [style=dashed label="boolean-literal"]
  289 -> 404 [style=dashed label="cast-expression"]
  289 -> 405 [style=dashed label="character-literal"]
  289 -> 63 [style=dashed label="class-head"]
  289 -> 64 [style=dashed label="class-key"]
  289 -> 65 [style=dashed label="class-name"]
  289 -> 66 [style=dashed label="class-specifier"]
  289 -> 406 [style=dashed label="compare-expression"]
  289 -> 681 [style=dashed label="compound-statement"]
  289 -> 67 [style=dashed label="concept-name"]
  289 -> 526 [style=dashed label="conditional-expression"]
  289 -> 68 [style=dashed label="conversion-function-id"]
  289 -> 682 [style=dashed label="coroutine-return-statement"]
  289 -> 69 [style=dashed label="cv-qualifier"]
  289 -> 409 [style=dashed label="decimal-floating-point-literal"]
  289 -> 410 [style=dashed label="decimal-literal"]
  289 -> 70 [style=dashed label="decl-specifier"]
  289 -> 683 [style=dashed label="decl-specifier-seq"]
  289 -> 684 [style=dashed label="declaration-statement"]
  289 -> 76 [style=dashed label="decltype-specifier"]
  289 -> 78 [style=dashed label="defining-type-specifier"]
  289 -> 411 [style=dashed label="delete-expression"]
  289 -> 412 [style=dashed label="digit"]
  289 -> 413 [style=dashed label="digit-sequence"]
  289 -> 79 [style=dashed label="elaborated-enum-specifier"]
  289 -> 80 [style=dashed label="elaborated-type-specifier"]
  289 -> 414 [style=dashed label="encoding-prefix"]
  289 -> 82 [style=dashed label="enum-head"]
  289 -> 83 [style=dashed label="enum-key"]
  289 -> 84 [style=dashed label="enum-name"]
  289 -> 85 [style=dashed label="enum-specifier"]
  289 -> 415 [style=dashed label="equality-expression"]
  289 -> 416 [style=dashed label="exclusive-or-expression"]
  289 -> 264 [style=dashed label="explicit-specifier"]
  289 -> 685 [style=dashed label="expression"]
  289 -> 686 [style=dashed label="expression-statement"]
  289 -> 417 [style=dashed label="floating-point-literal"]
  289 -> 418 [style=dashed label="fold-expression"]
  289 -> 419 [style=dashed label="fractional-constant"]
  289 -> 91 [style=dashed label="function-specifier"]
  289 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  289 -> 421 [style=dashed label="hexadecimal-literal"]
  289 -> 422 [style=dashed label="hexadecimal-prefix"]
  289 -> 423 [style=dashed label="id-expression"]
  289 -> 424 [style=dashed label="inclusive-or-expression"]
  289 -> 425 [style=dashed label="integer-literal"]
  289 -> 687 [style=dashed label="iteration-statement"]
  289 -> 688 [style=dashed label="jump-statement"]
  289 -> 689 [style=dashed label="labeled-statement"]
  289 -> 426 [style=dashed label="lambda-expression"]
  289 -> 427 [style=dashed label="lambda-introducer"]
  289 -> 428 [style=dashed label="literal"]
  289 -> 95 [style=dashed label="literal-operator-id"]
  289 -> 429 [style=dashed label="logical-and-expression"]
  289 -> 528 [style=dashed label="logical-or-expression"]
  289 -> 431 [style=dashed label="multiplicative-expression"]
  289 -> 99 [style=dashed label="namespace-alias"]
  289 -> 100 [style=dashed label="namespace-alias-definition"]
  289 -> 102 [style=dashed label="namespace-name"]
  289 -> 432 [style=dashed label="nested-name-specifier"]
  289 -> 433 [style=dashed label="new-expression"]
  289 -> 434 [style=dashed label="noexcept-expression"]
  289 -> 435 [style=dashed label="nonzero-digit"]
  289 -> 436 [style=dashed label="octal-literal"]
  289 -> 107 [style=dashed label="opaque-enum-declaration"]
  289 -> 108 [style=dashed label="operator-function-id"]
  289 -> 109 [style=dashed label="placeholder-type-specifier"]
  289 -> 437 [style=dashed label="pm-expression"]
  289 -> 438 [style=dashed label="pointer-literal"]
  289 -> 439 [style=dashed label="postfix-expression"]
  289 -> 440 [style=dashed label="primary-expression"]
  289 -> 112 [style=dashed label="qualified-id"]
  289 -> 441 [style=dashed label="relational-expression"]
  289 -> 442 [style=dashed label="requires-expression"]
  289 -> 690 [style=dashed label="selection-statement"]
  289 -> 443 [style=dashed label="shift-expression"]
  289 -> 113 [style=dashed label="simple-declaration"]
  289 -> 114 [style=dashed label="simple-template-id"]
  289 -> 444 [style=dashed label="simple-type-specifier"]
  289 -> 691 [style=dashed label="statement"]
  289 -> 692 [style=dashed label="statement-seq"]
  289 -> 116 [style=dashed label="static_assert-declaration"]
  289 -> 117 [style=dashed label="storage-class-specifier"]
  289 -> 445 [style=dashed label="string-literal"]
  289 -> 120 [style=dashed label="template-id"]
  289 -> 215 [style=dashed label="template-name"]
  289 -> 530 [style=dashed label="throw-expression"]
  289 -> 693 [style=dashed label="try-block"]
  289 -> 123 [style=dashed label="type-constraint"]
  289 -> 124 [style=dashed label="type-name"]
  289 -> 125 [style=dashed label="type-specifier"]
  289 -> 126 [style=dashed label="typedef-name"]
  289 -> 448 [style=dashed label="typename-specifier"]
  289 -> 449 [style=dashed label="unary-expression"]
  289 -> 450 [style=dashed label="unary-operator"]
  289 -> 129 [style=dashed label="unqualified-id"]
  289 -> 451 [style=dashed label="user-defined-character-literal"]
  289 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  289 -> 453 [style=dashed label="user-defined-integer-literal"]
  289 -> 454 [style=dashed label="user-defined-literal"]
  289 -> 455 [style=dashed label="user-defined-string-literal"]
  289 -> 130 [style=dashed label="using-declaration"]
  289 -> 131 [style=dashed label="using-directive"]
  289 -> 132 [style=dashed label="using-enum-declaration"]
  289 -> 532 [style=dashed label="yield-expression"]
  290 [label="State 290\n\l1177 virt-specifier: FINAL •\l"]
  290 -> "290R1177" [style=solid]
 "290R1177" [label="R1177", fillcolor=3, shape=diamond, style=filled]
  291 [label="State 291\n\l409 function-try-block: TRY • compound-statement handler-seq\l410                   | TRY • ctor-initializer compound-statement handler-seq\l"]
  291 -> 288 [style=solid label="COLON"]
  291 -> 289 [style=solid label="OPEN_BRACE"]
  291 -> 694 [style=dashed label="compound-statement"]
  291 -> 695 [style=dashed label="ctor-initializer"]
  292 [label="State 292\n\l929 requires-clause: REQUIRES • constraint-logical-or-expression\l"]
  292 -> 147 [style=solid label="IDENTIFIER"]
  292 -> 696 [style=solid label="OPEN_PAREN"]
  292 -> 9 [style=solid label="SCOPE"]
  292 -> 361 [style=solid label="OPEN_SQUARE"]
  292 -> 363 [style=solid label="ZERO_LB"]
  292 -> 364 [style=solid label="ZERO_HB"]
  292 -> 365 [style=solid label="SINGLE_QUOTE"]
  292 -> 366 [style=solid label="FALSE"]
  292 -> 367 [style=solid label="TRUE"]
  292 -> 17 [style=solid label="OPERATOR"]
  292 -> 134 [style=solid label="DECLTYPE"]
  292 -> 370 [style=solid label="DOT"]
  292 -> 184 [style=solid label="UNICODE_8"]
  292 -> 199 [style=solid label="DOUBLE_QUOTE"]
  292 -> 372 [style=solid label="ZERO_LX"]
  292 -> 373 [style=solid label="ZERO_HX"]
  292 -> 374 [style=solid label="REQUIRES"]
  292 -> 35 [style=solid label="COMPL"]
  292 -> 380 [style=solid label="THIS"]
  292 -> 381 [style=solid label="NULLPTR"]
  292 -> 389 [style=solid label="'0'"]
  292 -> 390 [style=solid label="'1'"]
  292 -> 391 [style=solid label="'2'"]
  292 -> 392 [style=solid label="'3'"]
  292 -> 393 [style=solid label="'4'"]
  292 -> 394 [style=solid label="'5'"]
  292 -> 395 [style=solid label="'6'"]
  292 -> 396 [style=solid label="'7'"]
  292 -> 397 [style=solid label="'8'"]
  292 -> 398 [style=solid label="'9'"]
  292 -> 205 [style=solid label="'u'"]
  292 -> 206 [style=solid label="'U'"]
  292 -> 207 [style=solid label="'L'"]
  292 -> 208 [style=solid label="'R'"]
  292 -> 402 [style=dashed label="binary-literal"]
  292 -> 403 [style=dashed label="boolean-literal"]
  292 -> 405 [style=dashed label="character-literal"]
  292 -> 65 [style=dashed label="class-name"]
  292 -> 697 [style=dashed label="constraint-logical-and-expression"]
  292 -> 698 [style=dashed label="constraint-logical-or-expression"]
  292 -> 68 [style=dashed label="conversion-function-id"]
  292 -> 409 [style=dashed label="decimal-floating-point-literal"]
  292 -> 410 [style=dashed label="decimal-literal"]
  292 -> 138 [style=dashed label="decltype-specifier"]
  292 -> 412 [style=dashed label="digit"]
  292 -> 413 [style=dashed label="digit-sequence"]
  292 -> 414 [style=dashed label="encoding-prefix"]
  292 -> 84 [style=dashed label="enum-name"]
  292 -> 417 [style=dashed label="floating-point-literal"]
  292 -> 418 [style=dashed label="fold-expression"]
  292 -> 419 [style=dashed label="fractional-constant"]
  292 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  292 -> 421 [style=dashed label="hexadecimal-literal"]
  292 -> 422 [style=dashed label="hexadecimal-prefix"]
  292 -> 423 [style=dashed label="id-expression"]
  292 -> 425 [style=dashed label="integer-literal"]
  292 -> 426 [style=dashed label="lambda-expression"]
  292 -> 427 [style=dashed label="lambda-introducer"]
  292 -> 428 [style=dashed label="literal"]
  292 -> 95 [style=dashed label="literal-operator-id"]
  292 -> 99 [style=dashed label="namespace-alias"]
  292 -> 102 [style=dashed label="namespace-name"]
  292 -> 152 [style=dashed label="nested-name-specifier"]
  292 -> 435 [style=dashed label="nonzero-digit"]
  292 -> 436 [style=dashed label="octal-literal"]
  292 -> 108 [style=dashed label="operator-function-id"]
  292 -> 438 [style=dashed label="pointer-literal"]
  292 -> 699 [style=dashed label="primary-expression"]
  292 -> 112 [style=dashed label="qualified-id"]
  292 -> 442 [style=dashed label="requires-expression"]
  292 -> 114 [style=dashed label="simple-template-id"]
  292 -> 445 [style=dashed label="string-literal"]
  292 -> 120 [style=dashed label="template-id"]
  292 -> 142 [style=dashed label="template-name"]
  292 -> 143 [style=dashed label="type-name"]
  292 -> 126 [style=dashed label="typedef-name"]
  292 -> 129 [style=dashed label="unqualified-id"]
  292 -> 451 [style=dashed label="user-defined-character-literal"]
  292 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  292 -> 453 [style=dashed label="user-defined-integer-literal"]
  292 -> 454 [style=dashed label="user-defined-literal"]
  292 -> 455 [style=dashed label="user-defined-string-literal"]
  293 [label="State 293\n\l1176 virt-specifier: OVERRIDE •\l"]
  293 -> "293R1176" [style=solid]
 "293R1176" [label="R1176", fillcolor=3, shape=diamond, style=filled]
  294 [label="State 294\n\l391 function-body: compound-statement •\l"]
  294 -> "294R391" [style=solid]
 "294R391" [label="R391", fillcolor=3, shape=diamond, style=filled]
  295 [label="State 295\n\l390 function-body: ctor-initializer • compound-statement\l"]
  295 -> 289 [style=solid label="OPEN_BRACE"]
  295 -> 700 [style=dashed label="compound-statement"]
  296 [label="State 296\n\l396 function-definition: declarator function-body •\l"]
  296 -> "296R396" [style=solid]
 "296R396" [label="R396", fillcolor=3, shape=diamond, style=filled]
  297 [label="State 297\n\l392 function-body: function-try-block •\l"]
  297 -> "297R392" [style=solid]
 "297R392" [label="R392", fillcolor=3, shape=diamond, style=filled]
  298 [label="State 298\n\l404 function-definition: declarator requires-clause • function-body\l"]
  298 -> 286 [style=solid label="EQ"]
  298 -> 288 [style=solid label="COLON"]
  298 -> 289 [style=solid label="OPEN_BRACE"]
  298 -> 291 [style=solid label="TRY"]
  298 -> 294 [style=dashed label="compound-statement"]
  298 -> 295 [style=dashed label="ctor-initializer"]
  298 -> 701 [style=dashed label="function-body"]
  298 -> 297 [style=dashed label="function-try-block"]
  299 [label="State 299\n\l1178 virt-specifier-seq: virt-specifier •\l"]
  299 -> "299R1178" [style=solid]
 "299R1178" [label="R1178", fillcolor=3, shape=diamond, style=filled]
  300 [label="State 300\n\l400 function-definition: declarator virt-specifier-seq • function-body\l1179 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  300 -> 286 [style=solid label="EQ"]
  300 -> 288 [style=solid label="COLON"]
  300 -> 289 [style=solid label="OPEN_BRACE"]
  300 -> 290 [style=solid label="FINAL"]
  300 -> 291 [style=solid label="TRY"]
  300 -> 293 [style=solid label="OVERRIDE"]
  300 -> 294 [style=dashed label="compound-statement"]
  300 -> 295 [style=dashed label="ctor-initializer"]
  300 -> 702 [style=dashed label="function-body"]
  300 -> 297 [style=dashed label="function-try-block"]
  300 -> 703 [style=dashed label="virt-specifier"]
  301 [label="State 301\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l722 noptr-declarator: declarator-id attribute-specifier-seq •\l"]
  301 -> 4 [style=solid label="ALIGNAS"]
  301 -> 10 [style=solid label="OPEN_SQUARE"]
  301 -> 57 [style=dashed label="alignment-specifier"]
  301 -> 260 [style=dashed label="attribute-specifier"]
  301 -> "301R722d" [label="[OPEN_SQUARE]", style=solid]
 "301R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  301 -> "301R722" [style=solid]
 "301R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  302 [label="State 302\n\l658 nested-name-specifier: decltype-specifier SCOPE •\l"]
  302 -> "302R658" [style=solid]
 "302R658" [label="R658", fillcolor=3, shape=diamond, style=filled]
  303 [label="State 303\n\l295 enum-specifier: enum-head OPEN_BRACE • CLOSE_BRACE\l296               | enum-head OPEN_BRACE • enumerator-list CLOSE_BRACE\l297               | enum-head OPEN_BRACE • enumerator-list COMMA CLOSE_BRACE\l"]
  303 -> 704 [style=solid label="IDENTIFIER"]
  303 -> 705 [style=solid label="CLOSE_BRACE"]
  303 -> 706 [style=dashed label="enumerator"]
  303 -> 707 [style=dashed label="enumerator-definition"]
  303 -> 708 [style=dashed label="enumerator-list"]
  304 [label="State 304\n\l145 class-name: IDENTIFIER •\l290 enum-head-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l"]
  304 -> "304R145" [label="[SCOPE]", style=solid]
 "304R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  304 -> "304R290" [style=solid]
 "304R290" [label="R290", fillcolor=3, shape=diamond, style=filled]
  304 -> "304R294d" [label="[SCOPE]", style=solid]
 "304R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  304 -> "304R647d" [label="[SCOPE]", style=solid]
 "304R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  304 -> "304R653d" [label="[SCOPE]", style=solid]
 "304R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  304 -> "304R1052" [label="[LESS]", style=solid]
 "304R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  304 -> "304R1110d" [label="[SCOPE]", style=solid]
 "304R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  305 [label="State 305\n\l280 enum-base: COLON • type-specifier-seq\l"]
  305 -> 162 [style=solid label="IDENTIFIER"]
  305 -> 9 [style=solid label="SCOPE"]
  305 -> 12 [style=solid label="CLASS"]
  305 -> 13 [style=solid label="STRUCT"]
  305 -> 14 [style=solid label="UNION"]
  305 -> 18 [style=solid label="CONST"]
  305 -> 19 [style=solid label="VOLATILE"]
  305 -> 26 [style=solid label="DECLTYPE"]
  305 -> 135 [style=solid label="ENUM"]
  305 -> 36 [style=solid label="AUTO"]
  305 -> 37 [style=solid label="CHAR"]
  305 -> 38 [style=solid label="CHAR8_T"]
  305 -> 39 [style=solid label="CHAR16_T"]
  305 -> 40 [style=solid label="CHAR32_T"]
  305 -> 41 [style=solid label="WCHAR_T"]
  305 -> 42 [style=solid label="BOOL"]
  305 -> 43 [style=solid label="SHORT"]
  305 -> 44 [style=solid label="INT"]
  305 -> 45 [style=solid label="LONG"]
  305 -> 46 [style=solid label="SIGNED"]
  305 -> 47 [style=solid label="UNSIGNED"]
  305 -> 48 [style=solid label="FLOAT"]
  305 -> 49 [style=solid label="DOUBLE"]
  305 -> 50 [style=solid label="VOID"]
  305 -> 55 [style=solid label="TYPENAME"]
  305 -> 209 [style=dashed label="class-key"]
  305 -> 65 [style=dashed label="class-name"]
  305 -> 67 [style=dashed label="concept-name"]
  305 -> 69 [style=dashed label="cv-qualifier"]
  305 -> 76 [style=dashed label="decltype-specifier"]
  305 -> 79 [style=dashed label="elaborated-enum-specifier"]
  305 -> 80 [style=dashed label="elaborated-type-specifier"]
  305 -> 84 [style=dashed label="enum-name"]
  305 -> 99 [style=dashed label="namespace-alias"]
  305 -> 102 [style=dashed label="namespace-name"]
  305 -> 212 [style=dashed label="nested-name-specifier"]
  305 -> 109 [style=dashed label="placeholder-type-specifier"]
  305 -> 141 [style=dashed label="simple-template-id"]
  305 -> 115 [style=dashed label="simple-type-specifier"]
  305 -> 215 [style=dashed label="template-name"]
  305 -> 123 [style=dashed label="type-constraint"]
  305 -> 124 [style=dashed label="type-name"]
  305 -> 216 [style=dashed label="type-specifier"]
  305 -> 709 [style=dashed label="type-specifier-seq"]
  305 -> 126 [style=dashed label="typedef-name"]
  305 -> 127 [style=dashed label="typename-specifier"]
  306 [label="State 306\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l282 enum-head: enum-key attribute-specifier-seq •\l284          | enum-key attribute-specifier-seq • enum-head-name\l286          | enum-key attribute-specifier-seq • enum-base\l288          | enum-key attribute-specifier-seq • enum-head-name enum-base\l752 opaque-enum-declaration: enum-key attribute-specifier-seq • enum-head-name SEMICOLON\l754                        | enum-key attribute-specifier-seq • enum-head-name enum-base SEMICOLON\l"]
  306 -> 304 [style=solid label="IDENTIFIER"]
  306 -> 4 [style=solid label="ALIGNAS"]
  306 -> 9 [style=solid label="SCOPE"]
  306 -> 10 [style=solid label="OPEN_SQUARE"]
  306 -> 305 [style=solid label="COLON"]
  306 -> 134 [style=solid label="DECLTYPE"]
  306 -> 57 [style=dashed label="alignment-specifier"]
  306 -> 260 [style=dashed label="attribute-specifier"]
  306 -> 65 [style=dashed label="class-name"]
  306 -> 138 [style=dashed label="decltype-specifier"]
  306 -> 710 [style=dashed label="enum-base"]
  306 -> 711 [style=dashed label="enum-head-name"]
  306 -> 84 [style=dashed label="enum-name"]
  306 -> 99 [style=dashed label="namespace-alias"]
  306 -> 102 [style=dashed label="namespace-name"]
  306 -> 309 [style=dashed label="nested-name-specifier"]
  306 -> 141 [style=dashed label="simple-template-id"]
  306 -> 142 [style=dashed label="template-name"]
  306 -> 143 [style=dashed label="type-name"]
  306 -> 126 [style=dashed label="typedef-name"]
  306 -> "306R282" [style=solid]
 "306R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  307 [label="State 307\n\l285 enum-head: enum-key enum-base •\l"]
  307 -> "307R285" [style=solid]
 "307R285" [label="R285", fillcolor=3, shape=diamond, style=filled]
  308 [label="State 308\n\l283 enum-head: enum-key enum-head-name •\l287          | enum-key enum-head-name • enum-base\l751 opaque-enum-declaration: enum-key enum-head-name • SEMICOLON\l753                        | enum-key enum-head-name • enum-base SEMICOLON\l"]
  308 -> 712 [style=solid label="SEMICOLON"]
  308 -> 305 [style=solid label="COLON"]
  308 -> 713 [style=dashed label="enum-base"]
  308 -> "308R283" [style=solid]
 "308R283" [label="R283", fillcolor=3, shape=diamond, style=filled]
  309 [label="State 309\n\l289 enum-head-name: nested-name-specifier • IDENTIFIER\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l"]
  309 -> 714 [style=solid label="IDENTIFIER"]
  309 -> 350 [style=solid label="TEMPLATE"]
  309 -> 534 [style=dashed label="simple-template-id"]
  309 -> 142 [style=dashed label="template-name"]
  310 [label="State 310\n\l1052 template-name: IDENTIFIER •\l"]
  310 -> "310R1052" [style=solid]
 "310R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  311 [label="State 311\n\l231 deduction-guide: explicit-specifier template-name • OPEN_PAREN parameter-declaration-clause CLOSE_PAREN DEREF simple-template-id SEMICOLON\l"]
  311 -> 715 [style=solid label="OPEN_PAREN"]
  312 [label="State 312\n\l619 module-declaration: EXPORT • MODULE module-name SEMICOLON\l621                   | EXPORT • MODULE module-name module-partition SEMICOLON\l623                   | EXPORT • MODULE module-name attribute-specifier-seq SEMICOLON\l625                   | EXPORT • MODULE module-name module-partition attribute-specifier-seq SEMICOLON\l"]
  312 -> 229 [style=solid label="MODULE"]
  313 [label="State 313\n\l620 module-declaration: MODULE • module-name SEMICOLON\l622                   | MODULE • module-name module-partition SEMICOLON\l624                   | MODULE • module-name attribute-specifier-seq SEMICOLON\l626                   | MODULE • module-name module-partition attribute-specifier-seq SEMICOLON\l"]
  313 -> 235 [style=solid label="IDENTIFIER"]
  313 -> 237 [style=dashed label="module-name"]
  313 -> 238 [style=dashed label="module-name-qualifier"]
  314 [label="State 314\n\l1061 translation-unit: global-module-fragment module-declaration •\l1063                 | global-module-fragment module-declaration • declaration-seq\l1065                 | global-module-fragment module-declaration • private-module-fragment\l1067                 | global-module-fragment module-declaration • declaration-seq private-module-fragment\l"]
  314 -> 1 [style=solid label="USING"]
  314 -> 2 [style=solid label="IDENTIFIER"]
  314 -> 3 [style=solid label="SEMICOLON"]
  314 -> 4 [style=solid label="ALIGNAS"]
  314 -> 5 [style=solid label="OPEN_PAREN"]
  314 -> 6 [style=solid label="ELLIPSIS"]
  314 -> 7 [style=solid label="AND"]
  314 -> 8 [style=solid label="ASM"]
  314 -> 9 [style=solid label="SCOPE"]
  314 -> 10 [style=solid label="OPEN_SQUARE"]
  314 -> 11 [style=solid label="VIRTUAL"]
  314 -> 12 [style=solid label="CLASS"]
  314 -> 13 [style=solid label="STRUCT"]
  314 -> 14 [style=solid label="UNION"]
  314 -> 15 [style=solid label="TEMPLATE"]
  314 -> 16 [style=solid label="AND_AND"]
  314 -> 17 [style=solid label="OPERATOR"]
  314 -> 18 [style=solid label="CONST"]
  314 -> 19 [style=solid label="VOLATILE"]
  314 -> 20 [style=solid label="FRIEND"]
  314 -> 21 [style=solid label="TYPEDEF"]
  314 -> 22 [style=solid label="CONSTEXPR"]
  314 -> 23 [style=solid label="CONSTEVAL"]
  314 -> 24 [style=solid label="CONSTINIT"]
  314 -> 25 [style=solid label="INLINE"]
  314 -> 26 [style=solid label="DECLTYPE"]
  314 -> 27 [style=solid label="ENUM"]
  314 -> 28 [style=solid label="EXTERN"]
  314 -> 29 [style=solid label="EXPLICIT"]
  314 -> 157 [style=solid label="EXPORT"]
  314 -> 31 [style=solid label="MULT"]
  314 -> 316 [style=solid label="MODULE"]
  314 -> 33 [style=solid label="IMPORT"]
  314 -> 34 [style=solid label="NAMESPACE"]
  314 -> 35 [style=solid label="COMPL"]
  314 -> 36 [style=solid label="AUTO"]
  314 -> 37 [style=solid label="CHAR"]
  314 -> 38 [style=solid label="CHAR8_T"]
  314 -> 39 [style=solid label="CHAR16_T"]
  314 -> 40 [style=solid label="CHAR32_T"]
  314 -> 41 [style=solid label="WCHAR_T"]
  314 -> 42 [style=solid label="BOOL"]
  314 -> 43 [style=solid label="SHORT"]
  314 -> 44 [style=solid label="INT"]
  314 -> 45 [style=solid label="LONG"]
  314 -> 46 [style=solid label="SIGNED"]
  314 -> 47 [style=solid label="UNSIGNED"]
  314 -> 48 [style=solid label="FLOAT"]
  314 -> 49 [style=solid label="DOUBLE"]
  314 -> 50 [style=solid label="VOID"]
  314 -> 51 [style=solid label="STATIC_ASSERT"]
  314 -> 52 [style=solid label="STATIC"]
  314 -> 53 [style=solid label="THREAD_LOCAL"]
  314 -> 54 [style=solid label="MUTABLE"]
  314 -> 55 [style=solid label="TYPENAME"]
  314 -> 56 [style=dashed label="alias-declaration"]
  314 -> 57 [style=dashed label="alignment-specifier"]
  314 -> 58 [style=dashed label="asm-declaration"]
  314 -> 59 [style=dashed label="attribute-declaration"]
  314 -> 60 [style=dashed label="attribute-specifier"]
  314 -> 61 [style=dashed label="attribute-specifier-seq"]
  314 -> 62 [style=dashed label="block-declaration"]
  314 -> 63 [style=dashed label="class-head"]
  314 -> 64 [style=dashed label="class-key"]
  314 -> 65 [style=dashed label="class-name"]
  314 -> 66 [style=dashed label="class-specifier"]
  314 -> 67 [style=dashed label="concept-name"]
  314 -> 68 [style=dashed label="conversion-function-id"]
  314 -> 69 [style=dashed label="cv-qualifier"]
  314 -> 70 [style=dashed label="decl-specifier"]
  314 -> 71 [style=dashed label="decl-specifier-seq"]
  314 -> 72 [style=dashed label="declaration"]
  314 -> 716 [style=dashed label="declaration-seq"]
  314 -> 74 [style=dashed label="declarator"]
  314 -> 75 [style=dashed label="declarator-id"]
  314 -> 76 [style=dashed label="decltype-specifier"]
  314 -> 77 [style=dashed label="deduction-guide"]
  314 -> 78 [style=dashed label="defining-type-specifier"]
  314 -> 79 [style=dashed label="elaborated-enum-specifier"]
  314 -> 80 [style=dashed label="elaborated-type-specifier"]
  314 -> 81 [style=dashed label="empty-declaration"]
  314 -> 82 [style=dashed label="enum-head"]
  314 -> 83 [style=dashed label="enum-key"]
  314 -> 84 [style=dashed label="enum-name"]
  314 -> 85 [style=dashed label="enum-specifier"]
  314 -> 86 [style=dashed label="explicit-instantiation"]
  314 -> 87 [style=dashed label="explicit-specialization"]
  314 -> 88 [style=dashed label="explicit-specifier"]
  314 -> 89 [style=dashed label="export-declaration"]
  314 -> 90 [style=dashed label="function-definition"]
  314 -> 91 [style=dashed label="function-specifier"]
  314 -> 93 [style=dashed label="id-expression"]
  314 -> 94 [style=dashed label="linkage-specification"]
  314 -> 95 [style=dashed label="literal-operator-id"]
  314 -> 97 [style=dashed label="module-import-declaration"]
  314 -> 98 [style=dashed label="named-namespace-definition"]
  314 -> 99 [style=dashed label="namespace-alias"]
  314 -> 100 [style=dashed label="namespace-alias-definition"]
  314 -> 101 [style=dashed label="namespace-definition"]
  314 -> 102 [style=dashed label="namespace-name"]
  314 -> 103 [style=dashed label="nested-name-specifier"]
  314 -> 104 [style=dashed label="nested-namespace-definition"]
  314 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  314 -> 106 [style=dashed label="noptr-declarator"]
  314 -> 107 [style=dashed label="opaque-enum-declaration"]
  314 -> 108 [style=dashed label="operator-function-id"]
  314 -> 109 [style=dashed label="placeholder-type-specifier"]
  314 -> 717 [style=dashed label="private-module-fragment"]
  314 -> 110 [style=dashed label="ptr-declarator"]
  314 -> 111 [style=dashed label="ptr-operator"]
  314 -> 112 [style=dashed label="qualified-id"]
  314 -> 113 [style=dashed label="simple-declaration"]
  314 -> 114 [style=dashed label="simple-template-id"]
  314 -> 115 [style=dashed label="simple-type-specifier"]
  314 -> 116 [style=dashed label="static_assert-declaration"]
  314 -> 117 [style=dashed label="storage-class-specifier"]
  314 -> 118 [style=dashed label="template-declaration"]
  314 -> 119 [style=dashed label="template-head"]
  314 -> 120 [style=dashed label="template-id"]
  314 -> 121 [style=dashed label="template-name"]
  314 -> 123 [style=dashed label="type-constraint"]
  314 -> 124 [style=dashed label="type-name"]
  314 -> 125 [style=dashed label="type-specifier"]
  314 -> 126 [style=dashed label="typedef-name"]
  314 -> 127 [style=dashed label="typename-specifier"]
  314 -> 128 [style=dashed label="unnamed-namespace-definition"]
  314 -> 129 [style=dashed label="unqualified-id"]
  314 -> 130 [style=dashed label="using-declaration"]
  314 -> 131 [style=dashed label="using-directive"]
  314 -> 132 [style=dashed label="using-enum-declaration"]
  314 -> "314R1061" [style=solid]
 "314R1061" [label="R1061", fillcolor=3, shape=diamond, style=filled]
  315 [label="State 315\n\l1050 template-id: literal-operator-id LESS • GREATER\l1051            | literal-operator-id LESS • template-argument-list GREATER\l"]
  315 -> 356 [style=solid label="PLUS"]
  315 -> 357 [style=solid label="MINUS"]
  315 -> 2 [style=solid label="IDENTIFIER"]
  315 -> 358 [style=solid label="OPEN_PAREN"]
  315 -> 359 [style=solid label="AND"]
  315 -> 360 [style=solid label="SCOPE"]
  315 -> 361 [style=solid label="OPEN_SQUARE"]
  315 -> 362 [style=solid label="CO_AWAIT"]
  315 -> 363 [style=solid label="ZERO_LB"]
  315 -> 364 [style=solid label="ZERO_HB"]
  315 -> 365 [style=solid label="SINGLE_QUOTE"]
  315 -> 366 [style=solid label="FALSE"]
  315 -> 367 [style=solid label="TRUE"]
  315 -> 12 [style=solid label="CLASS"]
  315 -> 13 [style=solid label="STRUCT"]
  315 -> 14 [style=solid label="UNION"]
  315 -> 368 [style=solid label="NOEXCEPT"]
  315 -> 17 [style=solid label="OPERATOR"]
  315 -> 18 [style=solid label="CONST"]
  315 -> 19 [style=solid label="VOLATILE"]
  315 -> 26 [style=solid label="DECLTYPE"]
  315 -> 369 [style=solid label="DELETE"]
  315 -> 370 [style=solid label="DOT"]
  315 -> 135 [style=solid label="ENUM"]
  315 -> 184 [style=solid label="UNICODE_8"]
  315 -> 718 [style=solid label="GREATER"]
  315 -> 371 [style=solid label="MULT"]
  315 -> 199 [style=solid label="DOUBLE_QUOTE"]
  315 -> 372 [style=solid label="ZERO_LX"]
  315 -> 373 [style=solid label="ZERO_HX"]
  315 -> 374 [style=solid label="REQUIRES"]
  315 -> 375 [style=solid label="NEW"]
  315 -> 376 [style=solid label="COMPL"]
  315 -> 377 [style=solid label="NOT"]
  315 -> 378 [style=solid label="PLUS_PLUS"]
  315 -> 379 [style=solid label="MINUS_MINUS"]
  315 -> 380 [style=solid label="THIS"]
  315 -> 36 [style=solid label="AUTO"]
  315 -> 381 [style=solid label="NULLPTR"]
  315 -> 382 [style=solid label="DYNAMIC_CAST"]
  315 -> 383 [style=solid label="STATIC_CAST"]
  315 -> 384 [style=solid label="REINTERPRET_CAST"]
  315 -> 385 [style=solid label="CONST_CAST"]
  315 -> 386 [style=solid label="TYPEID"]
  315 -> 37 [style=solid label="CHAR"]
  315 -> 38 [style=solid label="CHAR8_T"]
  315 -> 39 [style=solid label="CHAR16_T"]
  315 -> 40 [style=solid label="CHAR32_T"]
  315 -> 41 [style=solid label="WCHAR_T"]
  315 -> 42 [style=solid label="BOOL"]
  315 -> 43 [style=solid label="SHORT"]
  315 -> 44 [style=solid label="INT"]
  315 -> 45 [style=solid label="LONG"]
  315 -> 46 [style=solid label="SIGNED"]
  315 -> 47 [style=solid label="UNSIGNED"]
  315 -> 48 [style=solid label="FLOAT"]
  315 -> 49 [style=solid label="DOUBLE"]
  315 -> 50 [style=solid label="VOID"]
  315 -> 55 [style=solid label="TYPENAME"]
  315 -> 387 [style=solid label="SIZEOF"]
  315 -> 388 [style=solid label="ALIGNOF"]
  315 -> 389 [style=solid label="'0'"]
  315 -> 390 [style=solid label="'1'"]
  315 -> 391 [style=solid label="'2'"]
  315 -> 392 [style=solid label="'3'"]
  315 -> 393 [style=solid label="'4'"]
  315 -> 394 [style=solid label="'5'"]
  315 -> 395 [style=solid label="'6'"]
  315 -> 396 [style=solid label="'7'"]
  315 -> 397 [style=solid label="'8'"]
  315 -> 398 [style=solid label="'9'"]
  315 -> 205 [style=solid label="'u'"]
  315 -> 206 [style=solid label="'U'"]
  315 -> 207 [style=solid label="'L'"]
  315 -> 208 [style=solid label="'R'"]
  315 -> 399 [style=dashed label="additive-expression"]
  315 -> 400 [style=dashed label="and-expression"]
  315 -> 401 [style=dashed label="await-expression"]
  315 -> 402 [style=dashed label="binary-literal"]
  315 -> 403 [style=dashed label="boolean-literal"]
  315 -> 404 [style=dashed label="cast-expression"]
  315 -> 405 [style=dashed label="character-literal"]
  315 -> 209 [style=dashed label="class-key"]
  315 -> 65 [style=dashed label="class-name"]
  315 -> 406 [style=dashed label="compare-expression"]
  315 -> 67 [style=dashed label="concept-name"]
  315 -> 407 [style=dashed label="conditional-expression"]
  315 -> 635 [style=dashed label="constant-expression"]
  315 -> 68 [style=dashed label="conversion-function-id"]
  315 -> 69 [style=dashed label="cv-qualifier"]
  315 -> 409 [style=dashed label="decimal-floating-point-literal"]
  315 -> 410 [style=dashed label="decimal-literal"]
  315 -> 76 [style=dashed label="decltype-specifier"]
  315 -> 411 [style=dashed label="delete-expression"]
  315 -> 412 [style=dashed label="digit"]
  315 -> 413 [style=dashed label="digit-sequence"]
  315 -> 79 [style=dashed label="elaborated-enum-specifier"]
  315 -> 80 [style=dashed label="elaborated-type-specifier"]
  315 -> 414 [style=dashed label="encoding-prefix"]
  315 -> 84 [style=dashed label="enum-name"]
  315 -> 415 [style=dashed label="equality-expression"]
  315 -> 416 [style=dashed label="exclusive-or-expression"]
  315 -> 417 [style=dashed label="floating-point-literal"]
  315 -> 418 [style=dashed label="fold-expression"]
  315 -> 419 [style=dashed label="fractional-constant"]
  315 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  315 -> 421 [style=dashed label="hexadecimal-literal"]
  315 -> 422 [style=dashed label="hexadecimal-prefix"]
  315 -> 636 [style=dashed label="id-expression"]
  315 -> 424 [style=dashed label="inclusive-or-expression"]
  315 -> 425 [style=dashed label="integer-literal"]
  315 -> 426 [style=dashed label="lambda-expression"]
  315 -> 427 [style=dashed label="lambda-introducer"]
  315 -> 428 [style=dashed label="literal"]
  315 -> 95 [style=dashed label="literal-operator-id"]
  315 -> 429 [style=dashed label="logical-and-expression"]
  315 -> 430 [style=dashed label="logical-or-expression"]
  315 -> 431 [style=dashed label="multiplicative-expression"]
  315 -> 99 [style=dashed label="namespace-alias"]
  315 -> 102 [style=dashed label="namespace-name"]
  315 -> 432 [style=dashed label="nested-name-specifier"]
  315 -> 433 [style=dashed label="new-expression"]
  315 -> 434 [style=dashed label="noexcept-expression"]
  315 -> 435 [style=dashed label="nonzero-digit"]
  315 -> 436 [style=dashed label="octal-literal"]
  315 -> 108 [style=dashed label="operator-function-id"]
  315 -> 109 [style=dashed label="placeholder-type-specifier"]
  315 -> 437 [style=dashed label="pm-expression"]
  315 -> 438 [style=dashed label="pointer-literal"]
  315 -> 439 [style=dashed label="postfix-expression"]
  315 -> 440 [style=dashed label="primary-expression"]
  315 -> 112 [style=dashed label="qualified-id"]
  315 -> 441 [style=dashed label="relational-expression"]
  315 -> 442 [style=dashed label="requires-expression"]
  315 -> 443 [style=dashed label="shift-expression"]
  315 -> 114 [style=dashed label="simple-template-id"]
  315 -> 444 [style=dashed label="simple-type-specifier"]
  315 -> 445 [style=dashed label="string-literal"]
  315 -> 637 [style=dashed label="template-argument"]
  315 -> 719 [style=dashed label="template-argument-list"]
  315 -> 120 [style=dashed label="template-id"]
  315 -> 215 [style=dashed label="template-name"]
  315 -> 123 [style=dashed label="type-constraint"]
  315 -> 639 [style=dashed label="type-id"]
  315 -> 124 [style=dashed label="type-name"]
  315 -> 216 [style=dashed label="type-specifier"]
  315 -> 447 [style=dashed label="type-specifier-seq"]
  315 -> 126 [style=dashed label="typedef-name"]
  315 -> 448 [style=dashed label="typename-specifier"]
  315 -> 449 [style=dashed label="unary-expression"]
  315 -> 450 [style=dashed label="unary-operator"]
  315 -> 129 [style=dashed label="unqualified-id"]
  315 -> 451 [style=dashed label="user-defined-character-literal"]
  315 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  315 -> 453 [style=dashed label="user-defined-integer-literal"]
  315 -> 454 [style=dashed label="user-defined-literal"]
  315 -> 455 [style=dashed label="user-defined-string-literal"]
  316 [label="State 316\n\l886 private-module-fragment: MODULE • COLON PRIVATE SEMICOLON\l887                        | MODULE • COLON PRIVATE SEMICOLON declaration-seq\l"]
  316 -> 720 [style=solid label="COLON"]
  317 [label="State 317\n\l224 declaration-seq: declaration-seq • declaration\l1064 translation-unit: module-declaration declaration-seq •\l1068                 | module-declaration declaration-seq • private-module-fragment\l"]
  317 -> 1 [style=solid label="USING"]
  317 -> 2 [style=solid label="IDENTIFIER"]
  317 -> 3 [style=solid label="SEMICOLON"]
  317 -> 4 [style=solid label="ALIGNAS"]
  317 -> 5 [style=solid label="OPEN_PAREN"]
  317 -> 6 [style=solid label="ELLIPSIS"]
  317 -> 7 [style=solid label="AND"]
  317 -> 8 [style=solid label="ASM"]
  317 -> 9 [style=solid label="SCOPE"]
  317 -> 10 [style=solid label="OPEN_SQUARE"]
  317 -> 11 [style=solid label="VIRTUAL"]
  317 -> 12 [style=solid label="CLASS"]
  317 -> 13 [style=solid label="STRUCT"]
  317 -> 14 [style=solid label="UNION"]
  317 -> 15 [style=solid label="TEMPLATE"]
  317 -> 16 [style=solid label="AND_AND"]
  317 -> 17 [style=solid label="OPERATOR"]
  317 -> 18 [style=solid label="CONST"]
  317 -> 19 [style=solid label="VOLATILE"]
  317 -> 20 [style=solid label="FRIEND"]
  317 -> 21 [style=solid label="TYPEDEF"]
  317 -> 22 [style=solid label="CONSTEXPR"]
  317 -> 23 [style=solid label="CONSTEVAL"]
  317 -> 24 [style=solid label="CONSTINIT"]
  317 -> 25 [style=solid label="INLINE"]
  317 -> 26 [style=solid label="DECLTYPE"]
  317 -> 27 [style=solid label="ENUM"]
  317 -> 28 [style=solid label="EXTERN"]
  317 -> 29 [style=solid label="EXPLICIT"]
  317 -> 157 [style=solid label="EXPORT"]
  317 -> 31 [style=solid label="MULT"]
  317 -> 316 [style=solid label="MODULE"]
  317 -> 33 [style=solid label="IMPORT"]
  317 -> 34 [style=solid label="NAMESPACE"]
  317 -> 35 [style=solid label="COMPL"]
  317 -> 36 [style=solid label="AUTO"]
  317 -> 37 [style=solid label="CHAR"]
  317 -> 38 [style=solid label="CHAR8_T"]
  317 -> 39 [style=solid label="CHAR16_T"]
  317 -> 40 [style=solid label="CHAR32_T"]
  317 -> 41 [style=solid label="WCHAR_T"]
  317 -> 42 [style=solid label="BOOL"]
  317 -> 43 [style=solid label="SHORT"]
  317 -> 44 [style=solid label="INT"]
  317 -> 45 [style=solid label="LONG"]
  317 -> 46 [style=solid label="SIGNED"]
  317 -> 47 [style=solid label="UNSIGNED"]
  317 -> 48 [style=solid label="FLOAT"]
  317 -> 49 [style=solid label="DOUBLE"]
  317 -> 50 [style=solid label="VOID"]
  317 -> 51 [style=solid label="STATIC_ASSERT"]
  317 -> 52 [style=solid label="STATIC"]
  317 -> 53 [style=solid label="THREAD_LOCAL"]
  317 -> 54 [style=solid label="MUTABLE"]
  317 -> 55 [style=solid label="TYPENAME"]
  317 -> 56 [style=dashed label="alias-declaration"]
  317 -> 57 [style=dashed label="alignment-specifier"]
  317 -> 58 [style=dashed label="asm-declaration"]
  317 -> 59 [style=dashed label="attribute-declaration"]
  317 -> 60 [style=dashed label="attribute-specifier"]
  317 -> 61 [style=dashed label="attribute-specifier-seq"]
  317 -> 62 [style=dashed label="block-declaration"]
  317 -> 63 [style=dashed label="class-head"]
  317 -> 64 [style=dashed label="class-key"]
  317 -> 65 [style=dashed label="class-name"]
  317 -> 66 [style=dashed label="class-specifier"]
  317 -> 67 [style=dashed label="concept-name"]
  317 -> 68 [style=dashed label="conversion-function-id"]
  317 -> 69 [style=dashed label="cv-qualifier"]
  317 -> 70 [style=dashed label="decl-specifier"]
  317 -> 71 [style=dashed label="decl-specifier-seq"]
  317 -> 285 [style=dashed label="declaration"]
  317 -> 74 [style=dashed label="declarator"]
  317 -> 75 [style=dashed label="declarator-id"]
  317 -> 76 [style=dashed label="decltype-specifier"]
  317 -> 77 [style=dashed label="deduction-guide"]
  317 -> 78 [style=dashed label="defining-type-specifier"]
  317 -> 79 [style=dashed label="elaborated-enum-specifier"]
  317 -> 80 [style=dashed label="elaborated-type-specifier"]
  317 -> 81 [style=dashed label="empty-declaration"]
  317 -> 82 [style=dashed label="enum-head"]
  317 -> 83 [style=dashed label="enum-key"]
  317 -> 84 [style=dashed label="enum-name"]
  317 -> 85 [style=dashed label="enum-specifier"]
  317 -> 86 [style=dashed label="explicit-instantiation"]
  317 -> 87 [style=dashed label="explicit-specialization"]
  317 -> 88 [style=dashed label="explicit-specifier"]
  317 -> 89 [style=dashed label="export-declaration"]
  317 -> 90 [style=dashed label="function-definition"]
  317 -> 91 [style=dashed label="function-specifier"]
  317 -> 93 [style=dashed label="id-expression"]
  317 -> 94 [style=dashed label="linkage-specification"]
  317 -> 95 [style=dashed label="literal-operator-id"]
  317 -> 97 [style=dashed label="module-import-declaration"]
  317 -> 98 [style=dashed label="named-namespace-definition"]
  317 -> 99 [style=dashed label="namespace-alias"]
  317 -> 100 [style=dashed label="namespace-alias-definition"]
  317 -> 101 [style=dashed label="namespace-definition"]
  317 -> 102 [style=dashed label="namespace-name"]
  317 -> 103 [style=dashed label="nested-name-specifier"]
  317 -> 104 [style=dashed label="nested-namespace-definition"]
  317 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  317 -> 106 [style=dashed label="noptr-declarator"]
  317 -> 107 [style=dashed label="opaque-enum-declaration"]
  317 -> 108 [style=dashed label="operator-function-id"]
  317 -> 109 [style=dashed label="placeholder-type-specifier"]
  317 -> 721 [style=dashed label="private-module-fragment"]
  317 -> 110 [style=dashed label="ptr-declarator"]
  317 -> 111 [style=dashed label="ptr-operator"]
  317 -> 112 [style=dashed label="qualified-id"]
  317 -> 113 [style=dashed label="simple-declaration"]
  317 -> 114 [style=dashed label="simple-template-id"]
  317 -> 115 [style=dashed label="simple-type-specifier"]
  317 -> 116 [style=dashed label="static_assert-declaration"]
  317 -> 117 [style=dashed label="storage-class-specifier"]
  317 -> 118 [style=dashed label="template-declaration"]
  317 -> 119 [style=dashed label="template-head"]
  317 -> 120 [style=dashed label="template-id"]
  317 -> 121 [style=dashed label="template-name"]
  317 -> 123 [style=dashed label="type-constraint"]
  317 -> 124 [style=dashed label="type-name"]
  317 -> 125 [style=dashed label="type-specifier"]
  317 -> 126 [style=dashed label="typedef-name"]
  317 -> 127 [style=dashed label="typename-specifier"]
  317 -> 128 [style=dashed label="unnamed-namespace-definition"]
  317 -> 129 [style=dashed label="unqualified-id"]
  317 -> 130 [style=dashed label="using-declaration"]
  317 -> 131 [style=dashed label="using-directive"]
  317 -> 132 [style=dashed label="using-enum-declaration"]
  317 -> "317R1064" [style=solid]
 "317R1064" [label="R1064", fillcolor=3, shape=diamond, style=filled]
  318 [label="State 318\n\l1066 translation-unit: module-declaration private-module-fragment •\l"]
  318 -> "318R1066" [style=solid]
 "318R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  319 [label="State 319\n\l657 nested-name-specifier: namespace-name SCOPE •\l"]
  319 -> "319R657" [style=solid]
 "319R657" [label="R657", fillcolor=3, shape=diamond, style=filled]
  320 [label="State 320\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l1140 unqualified-id: IDENTIFIER •\l"]
  320 -> 722 [style=solid label="SCOPE"]
  320 -> "320R145d" [label="[SCOPE]", style=solid]
 "320R145d" [label="R145", fillcolor=5, shape=diamond, style=filled]
  320 -> "320R145" [style=solid]
 "320R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  320 -> "320R163d" [label="[DECLTYPE, AUTO]", style=solid]
 "320R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  320 -> "320R163" [label="[LESS]", style=solid]
 "320R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  320 -> "320R294d" [label="[IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, COMMA, SCOPE, OPEN_SQUARE, COLON, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, GREATER, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "320R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  320 -> "320R1052d" [label="[IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, COMMA, SCOPE, OPEN_SQUARE, COLON, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, LESS, GREATER, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "320R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  320 -> "320R1110d" [label="[IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, COMMA, SCOPE, OPEN_SQUARE, COLON, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, GREATER, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "320R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  320 -> "320R1140d" [label="[EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, COMMA, OPEN_SQUARE, COLON, OPEN_BRACE, AND_AND, LESS, GREATER, MULT]", style=solid]
 "320R1140d" [label="R1140", fillcolor=5, shape=diamond, style=filled]
  320 -> "320R1140" [label="[PLUS, MINUS, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, CLOSE_SQUARE, CLOSE_BRACE, FINAL, SPACESHIP, QUERY, OR_OR, DEREF, DOT, EQ_EQ, NOT_EQ, XOR, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, REQUIRES, PLUS_PLUS, MINUS_MINUS, OVERRIDE]", style=solid]
 "320R1140" [label="R1140", fillcolor=3, shape=diamond, style=filled]
  321 [label="State 321\n\l661 nested-name-specifier: nested-name-specifier TEMPLATE • simple-template-id SCOPE\l910 qualified-id: nested-name-specifier TEMPLATE • unqualified-id\l987 simple-type-specifier: nested-name-specifier TEMPLATE • simple-template-id\l"]
  321 -> 723 [style=solid label="IDENTIFIER"]
  321 -> 17 [style=solid label="OPERATOR"]
  321 -> 35 [style=solid label="COMPL"]
  321 -> 68 [style=dashed label="conversion-function-id"]
  321 -> 95 [style=dashed label="literal-operator-id"]
  321 -> 108 [style=dashed label="operator-function-id"]
  321 -> 724 [style=dashed label="simple-template-id"]
  321 -> 120 [style=dashed label="template-id"]
  321 -> 142 [style=dashed label="template-name"]
  321 -> 725 [style=dashed label="unqualified-id"]
  322 [label="State 322\n\l901 ptr-operator: nested-name-specifier MULT •\l902             | nested-name-specifier MULT • attribute-specifier-seq\l903             | nested-name-specifier MULT • cv-qualifier-seq\l904             | nested-name-specifier MULT • attribute-specifier-seq cv-qualifier-seq\l"]
  322 -> 4 [style=solid label="ALIGNAS"]
  322 -> 10 [style=solid label="OPEN_SQUARE"]
  322 -> 18 [style=solid label="CONST"]
  322 -> 19 [style=solid label="VOLATILE"]
  322 -> 57 [style=dashed label="alignment-specifier"]
  322 -> 60 [style=dashed label="attribute-specifier"]
  322 -> 726 [style=dashed label="attribute-specifier-seq"]
  322 -> 233 [style=dashed label="cv-qualifier"]
  322 -> 727 [style=dashed label="cv-qualifier-seq"]
  322 -> "322R901d" [label="[ALIGNAS, OPEN_SQUARE, CONST, VOLATILE]", style=solid]
 "322R901d" [label="R901", fillcolor=5, shape=diamond, style=filled]
  322 -> "322R901" [style=solid]
 "322R901" [label="R901", fillcolor=3, shape=diamond, style=filled]
  323 [label="State 323\n\l1070 type-constraint: nested-name-specifier concept-name •\l1072                | nested-name-specifier concept-name • LESS GREATER\l1074                | nested-name-specifier concept-name • LESS template-argument-list GREATER\l"]
  323 -> 728 [style=solid label="LESS"]
  323 -> "323R1070" [style=solid]
 "323R1070" [label="R1070", fillcolor=3, shape=diamond, style=filled]
  324 [label="State 324\n\l146 class-name: simple-template-id •\l660 nested-name-specifier: nested-name-specifier simple-template-id • SCOPE\l1047 template-id: simple-template-id •\l1111 typedef-name: simple-template-id •\l"]
  324 -> 729 [style=solid label="SCOPE"]
  324 -> "324R146d" [label="[SCOPE]", style=solid]
 "324R146d" [label="R146", fillcolor=5, shape=diamond, style=filled]
  324 -> "324R146" [style=solid]
 "324R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  324 -> "324R1047d" [label="[EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, COMMA, OPEN_SQUARE, COLON, OPEN_BRACE, AND_AND, GREATER, MULT]", style=solid]
 "324R1047d" [label="R1047", fillcolor=5, shape=diamond, style=filled]
  324 -> "324R1047" [label="[PLUS, MINUS, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, CLOSE_SQUARE, CLOSE_BRACE, FINAL, SPACESHIP, QUERY, OR_OR, DEREF, DOT, EQ_EQ, NOT_EQ, XOR, LESS, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, REQUIRES, PLUS_PLUS, MINUS_MINUS, OVERRIDE]", style=solid]
 "324R1047" [label="R1047", fillcolor=3, shape=diamond, style=filled]
  324 -> "324R1111d" [label="[IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, COMMA, SCOPE, OPEN_SQUARE, COLON, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, GREATER, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "324R1111d" [label="R1111", fillcolor=5, shape=diamond, style=filled]
  325 [label="State 325\n\l983 simple-template-id: template-name • LESS GREATER\l984                   | template-name • LESS template-argument-list GREATER\l990 simple-type-specifier: nested-name-specifier template-name •\l"]
  325 -> 337 [style=solid label="LESS"]
  325 -> "325R990d" [label="[LESS]", style=solid]
 "325R990d" [label="R990", fillcolor=5, shape=diamond, style=filled]
  325 -> "325R990" [style=solid]
 "325R990" [label="R990", fillcolor=3, shape=diamond, style=filled]
  326 [label="State 326\n\l985 simple-type-specifier: nested-name-specifier type-name •\l"]
  326 -> "326R985" [style=solid]
 "326R985" [label="R985", fillcolor=3, shape=diamond, style=filled]
  327 [label="State 327\n\l909 qualified-id: nested-name-specifier unqualified-id •\l"]
  327 -> "327R909" [style=solid]
 "327R909" [label="R909", fillcolor=3, shape=diamond, style=filled]
  328 [label="State 328\n\l832 parameters-and-qualifiers: OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN\l833                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq\l834                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN ref-qualifier\l835                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier\l836                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN noexcept-specifier\l837                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq noexcept-specifier\l838                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN ref-qualifier noexcept-specifier\l839                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier noexcept-specifier\l840                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN attribute-specifier-seq\l841                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq attribute-specifier-seq\l842                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN ref-qualifier attribute-specifier-seq\l843                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier attribute-specifier-seq\l844                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN noexcept-specifier attribute-specifier-seq\l845                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq noexcept-specifier attribute-specifier-seq\l846                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN ref-qualifier noexcept-specifier attribute-specifier-seq\l847                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq\l"]
  328 -> 162 [style=solid label="IDENTIFIER"]
  328 -> 4 [style=solid label="ALIGNAS"]
  328 -> 730 [style=solid label="ELLIPSIS"]
  328 -> 9 [style=solid label="SCOPE"]
  328 -> 10 [style=solid label="OPEN_SQUARE"]
  328 -> 11 [style=solid label="VIRTUAL"]
  328 -> 12 [style=solid label="CLASS"]
  328 -> 13 [style=solid label="STRUCT"]
  328 -> 14 [style=solid label="UNION"]
  328 -> 18 [style=solid label="CONST"]
  328 -> 19 [style=solid label="VOLATILE"]
  328 -> 20 [style=solid label="FRIEND"]
  328 -> 21 [style=solid label="TYPEDEF"]
  328 -> 22 [style=solid label="CONSTEXPR"]
  328 -> 23 [style=solid label="CONSTEVAL"]
  328 -> 24 [style=solid label="CONSTINIT"]
  328 -> 258 [style=solid label="INLINE"]
  328 -> 26 [style=solid label="DECLTYPE"]
  328 -> 27 [style=solid label="ENUM"]
  328 -> 259 [style=solid label="EXTERN"]
  328 -> 29 [style=solid label="EXPLICIT"]
  328 -> 471 [style=solid label="THIS"]
  328 -> 36 [style=solid label="AUTO"]
  328 -> 37 [style=solid label="CHAR"]
  328 -> 38 [style=solid label="CHAR8_T"]
  328 -> 39 [style=solid label="CHAR16_T"]
  328 -> 40 [style=solid label="CHAR32_T"]
  328 -> 41 [style=solid label="WCHAR_T"]
  328 -> 42 [style=solid label="BOOL"]
  328 -> 43 [style=solid label="SHORT"]
  328 -> 44 [style=solid label="INT"]
  328 -> 45 [style=solid label="LONG"]
  328 -> 46 [style=solid label="SIGNED"]
  328 -> 47 [style=solid label="UNSIGNED"]
  328 -> 48 [style=solid label="FLOAT"]
  328 -> 49 [style=solid label="DOUBLE"]
  328 -> 50 [style=solid label="VOID"]
  328 -> 52 [style=solid label="STATIC"]
  328 -> 53 [style=solid label="THREAD_LOCAL"]
  328 -> 54 [style=solid label="MUTABLE"]
  328 -> 55 [style=solid label="TYPENAME"]
  328 -> 57 [style=dashed label="alignment-specifier"]
  328 -> 60 [style=dashed label="attribute-specifier"]
  328 -> 473 [style=dashed label="attribute-specifier-seq"]
  328 -> 63 [style=dashed label="class-head"]
  328 -> 64 [style=dashed label="class-key"]
  328 -> 65 [style=dashed label="class-name"]
  328 -> 66 [style=dashed label="class-specifier"]
  328 -> 67 [style=dashed label="concept-name"]
  328 -> 69 [style=dashed label="cv-qualifier"]
  328 -> 70 [style=dashed label="decl-specifier"]
  328 -> 474 [style=dashed label="decl-specifier-seq"]
  328 -> 76 [style=dashed label="decltype-specifier"]
  328 -> 78 [style=dashed label="defining-type-specifier"]
  328 -> 79 [style=dashed label="elaborated-enum-specifier"]
  328 -> 80 [style=dashed label="elaborated-type-specifier"]
  328 -> 82 [style=dashed label="enum-head"]
  328 -> 263 [style=dashed label="enum-key"]
  328 -> 84 [style=dashed label="enum-name"]
  328 -> 85 [style=dashed label="enum-specifier"]
  328 -> 264 [style=dashed label="explicit-specifier"]
  328 -> 91 [style=dashed label="function-specifier"]
  328 -> 99 [style=dashed label="namespace-alias"]
  328 -> 102 [style=dashed label="namespace-name"]
  328 -> 212 [style=dashed label="nested-name-specifier"]
  328 -> 731 [style=dashed label="parameter-declaration"]
  328 -> 732 [style=dashed label="parameter-declaration-clause"]
  328 -> 733 [style=dashed label="parameter-declaration-list"]
  328 -> 109 [style=dashed label="placeholder-type-specifier"]
  328 -> 141 [style=dashed label="simple-template-id"]
  328 -> 115 [style=dashed label="simple-type-specifier"]
  328 -> 117 [style=dashed label="storage-class-specifier"]
  328 -> 215 [style=dashed label="template-name"]
  328 -> 123 [style=dashed label="type-constraint"]
  328 -> 124 [style=dashed label="type-name"]
  328 -> 125 [style=dashed label="type-specifier"]
  328 -> 126 [style=dashed label="typedef-name"]
  328 -> 127 [style=dashed label="typename-specifier"]
  329 [label="State 329\n\l724 noptr-declarator: noptr-declarator OPEN_SQUARE • CLOSE_SQUARE\l725                 | noptr-declarator OPEN_SQUARE • constant-expression CLOSE_SQUARE\l726                 | noptr-declarator OPEN_SQUARE • CLOSE_SQUARE attribute-specifier-seq\l727                 | noptr-declarator OPEN_SQUARE • constant-expression CLOSE_SQUARE attribute-specifier-seq\l"]
  329 -> 356 [style=solid label="PLUS"]
  329 -> 357 [style=solid label="MINUS"]
  329 -> 2 [style=solid label="IDENTIFIER"]
  329 -> 358 [style=solid label="OPEN_PAREN"]
  329 -> 359 [style=solid label="AND"]
  329 -> 360 [style=solid label="SCOPE"]
  329 -> 361 [style=solid label="OPEN_SQUARE"]
  329 -> 734 [style=solid label="CLOSE_SQUARE"]
  329 -> 362 [style=solid label="CO_AWAIT"]
  329 -> 363 [style=solid label="ZERO_LB"]
  329 -> 364 [style=solid label="ZERO_HB"]
  329 -> 365 [style=solid label="SINGLE_QUOTE"]
  329 -> 366 [style=solid label="FALSE"]
  329 -> 367 [style=solid label="TRUE"]
  329 -> 368 [style=solid label="NOEXCEPT"]
  329 -> 17 [style=solid label="OPERATOR"]
  329 -> 26 [style=solid label="DECLTYPE"]
  329 -> 369 [style=solid label="DELETE"]
  329 -> 370 [style=solid label="DOT"]
  329 -> 184 [style=solid label="UNICODE_8"]
  329 -> 371 [style=solid label="MULT"]
  329 -> 199 [style=solid label="DOUBLE_QUOTE"]
  329 -> 372 [style=solid label="ZERO_LX"]
  329 -> 373 [style=solid label="ZERO_HX"]
  329 -> 374 [style=solid label="REQUIRES"]
  329 -> 375 [style=solid label="NEW"]
  329 -> 376 [style=solid label="COMPL"]
  329 -> 377 [style=solid label="NOT"]
  329 -> 378 [style=solid label="PLUS_PLUS"]
  329 -> 379 [style=solid label="MINUS_MINUS"]
  329 -> 380 [style=solid label="THIS"]
  329 -> 36 [style=solid label="AUTO"]
  329 -> 381 [style=solid label="NULLPTR"]
  329 -> 382 [style=solid label="DYNAMIC_CAST"]
  329 -> 383 [style=solid label="STATIC_CAST"]
  329 -> 384 [style=solid label="REINTERPRET_CAST"]
  329 -> 385 [style=solid label="CONST_CAST"]
  329 -> 386 [style=solid label="TYPEID"]
  329 -> 37 [style=solid label="CHAR"]
  329 -> 38 [style=solid label="CHAR8_T"]
  329 -> 39 [style=solid label="CHAR16_T"]
  329 -> 40 [style=solid label="CHAR32_T"]
  329 -> 41 [style=solid label="WCHAR_T"]
  329 -> 42 [style=solid label="BOOL"]
  329 -> 43 [style=solid label="SHORT"]
  329 -> 44 [style=solid label="INT"]
  329 -> 45 [style=solid label="LONG"]
  329 -> 46 [style=solid label="SIGNED"]
  329 -> 47 [style=solid label="UNSIGNED"]
  329 -> 48 [style=solid label="FLOAT"]
  329 -> 49 [style=solid label="DOUBLE"]
  329 -> 50 [style=solid label="VOID"]
  329 -> 55 [style=solid label="TYPENAME"]
  329 -> 387 [style=solid label="SIZEOF"]
  329 -> 388 [style=solid label="ALIGNOF"]
  329 -> 389 [style=solid label="'0'"]
  329 -> 390 [style=solid label="'1'"]
  329 -> 391 [style=solid label="'2'"]
  329 -> 392 [style=solid label="'3'"]
  329 -> 393 [style=solid label="'4'"]
  329 -> 394 [style=solid label="'5'"]
  329 -> 395 [style=solid label="'6'"]
  329 -> 396 [style=solid label="'7'"]
  329 -> 397 [style=solid label="'8'"]
  329 -> 398 [style=solid label="'9'"]
  329 -> 205 [style=solid label="'u'"]
  329 -> 206 [style=solid label="'U'"]
  329 -> 207 [style=solid label="'L'"]
  329 -> 208 [style=solid label="'R'"]
  329 -> 399 [style=dashed label="additive-expression"]
  329 -> 400 [style=dashed label="and-expression"]
  329 -> 401 [style=dashed label="await-expression"]
  329 -> 402 [style=dashed label="binary-literal"]
  329 -> 403 [style=dashed label="boolean-literal"]
  329 -> 404 [style=dashed label="cast-expression"]
  329 -> 405 [style=dashed label="character-literal"]
  329 -> 65 [style=dashed label="class-name"]
  329 -> 406 [style=dashed label="compare-expression"]
  329 -> 67 [style=dashed label="concept-name"]
  329 -> 407 [style=dashed label="conditional-expression"]
  329 -> 735 [style=dashed label="constant-expression"]
  329 -> 68 [style=dashed label="conversion-function-id"]
  329 -> 409 [style=dashed label="decimal-floating-point-literal"]
  329 -> 410 [style=dashed label="decimal-literal"]
  329 -> 76 [style=dashed label="decltype-specifier"]
  329 -> 411 [style=dashed label="delete-expression"]
  329 -> 412 [style=dashed label="digit"]
  329 -> 413 [style=dashed label="digit-sequence"]
  329 -> 414 [style=dashed label="encoding-prefix"]
  329 -> 84 [style=dashed label="enum-name"]
  329 -> 415 [style=dashed label="equality-expression"]
  329 -> 416 [style=dashed label="exclusive-or-expression"]
  329 -> 417 [style=dashed label="floating-point-literal"]
  329 -> 418 [style=dashed label="fold-expression"]
  329 -> 419 [style=dashed label="fractional-constant"]
  329 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  329 -> 421 [style=dashed label="hexadecimal-literal"]
  329 -> 422 [style=dashed label="hexadecimal-prefix"]
  329 -> 423 [style=dashed label="id-expression"]
  329 -> 424 [style=dashed label="inclusive-or-expression"]
  329 -> 425 [style=dashed label="integer-literal"]
  329 -> 426 [style=dashed label="lambda-expression"]
  329 -> 427 [style=dashed label="lambda-introducer"]
  329 -> 428 [style=dashed label="literal"]
  329 -> 95 [style=dashed label="literal-operator-id"]
  329 -> 429 [style=dashed label="logical-and-expression"]
  329 -> 430 [style=dashed label="logical-or-expression"]
  329 -> 431 [style=dashed label="multiplicative-expression"]
  329 -> 99 [style=dashed label="namespace-alias"]
  329 -> 102 [style=dashed label="namespace-name"]
  329 -> 432 [style=dashed label="nested-name-specifier"]
  329 -> 433 [style=dashed label="new-expression"]
  329 -> 434 [style=dashed label="noexcept-expression"]
  329 -> 435 [style=dashed label="nonzero-digit"]
  329 -> 436 [style=dashed label="octal-literal"]
  329 -> 108 [style=dashed label="operator-function-id"]
  329 -> 109 [style=dashed label="placeholder-type-specifier"]
  329 -> 437 [style=dashed label="pm-expression"]
  329 -> 438 [style=dashed label="pointer-literal"]
  329 -> 439 [style=dashed label="postfix-expression"]
  329 -> 440 [style=dashed label="primary-expression"]
  329 -> 112 [style=dashed label="qualified-id"]
  329 -> 441 [style=dashed label="relational-expression"]
  329 -> 442 [style=dashed label="requires-expression"]
  329 -> 443 [style=dashed label="shift-expression"]
  329 -> 114 [style=dashed label="simple-template-id"]
  329 -> 529 [style=dashed label="simple-type-specifier"]
  329 -> 445 [style=dashed label="string-literal"]
  329 -> 120 [style=dashed label="template-id"]
  329 -> 215 [style=dashed label="template-name"]
  329 -> 123 [style=dashed label="type-constraint"]
  329 -> 124 [style=dashed label="type-name"]
  329 -> 126 [style=dashed label="typedef-name"]
  329 -> 531 [style=dashed label="typename-specifier"]
  329 -> 449 [style=dashed label="unary-expression"]
  329 -> 450 [style=dashed label="unary-operator"]
  329 -> 129 [style=dashed label="unqualified-id"]
  329 -> 451 [style=dashed label="user-defined-character-literal"]
  329 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  329 -> 453 [style=dashed label="user-defined-integer-literal"]
  329 -> 454 [style=dashed label="user-defined-literal"]
  329 -> 455 [style=dashed label="user-defined-string-literal"]
  330 [label="State 330\n\l227 declarator: noptr-declarator parameters-and-qualifiers • trailing-return-type\l723 noptr-declarator: noptr-declarator parameters-and-qualifiers •\l"]
  330 -> 736 [style=solid label="DEREF"]
  330 -> 737 [style=dashed label="trailing-return-type"]
  330 -> "330R723" [style=solid]
 "330R723" [label="R723", fillcolor=3, shape=diamond, style=filled]
  331 [label="State 331\n\l1048 template-id: operator-function-id LESS • GREATER\l1049            | operator-function-id LESS • template-argument-list GREATER\l"]
  331 -> 356 [style=solid label="PLUS"]
  331 -> 357 [style=solid label="MINUS"]
  331 -> 2 [style=solid label="IDENTIFIER"]
  331 -> 358 [style=solid label="OPEN_PAREN"]
  331 -> 359 [style=solid label="AND"]
  331 -> 360 [style=solid label="SCOPE"]
  331 -> 361 [style=solid label="OPEN_SQUARE"]
  331 -> 362 [style=solid label="CO_AWAIT"]
  331 -> 363 [style=solid label="ZERO_LB"]
  331 -> 364 [style=solid label="ZERO_HB"]
  331 -> 365 [style=solid label="SINGLE_QUOTE"]
  331 -> 366 [style=solid label="FALSE"]
  331 -> 367 [style=solid label="TRUE"]
  331 -> 12 [style=solid label="CLASS"]
  331 -> 13 [style=solid label="STRUCT"]
  331 -> 14 [style=solid label="UNION"]
  331 -> 368 [style=solid label="NOEXCEPT"]
  331 -> 17 [style=solid label="OPERATOR"]
  331 -> 18 [style=solid label="CONST"]
  331 -> 19 [style=solid label="VOLATILE"]
  331 -> 26 [style=solid label="DECLTYPE"]
  331 -> 369 [style=solid label="DELETE"]
  331 -> 370 [style=solid label="DOT"]
  331 -> 135 [style=solid label="ENUM"]
  331 -> 184 [style=solid label="UNICODE_8"]
  331 -> 738 [style=solid label="GREATER"]
  331 -> 371 [style=solid label="MULT"]
  331 -> 199 [style=solid label="DOUBLE_QUOTE"]
  331 -> 372 [style=solid label="ZERO_LX"]
  331 -> 373 [style=solid label="ZERO_HX"]
  331 -> 374 [style=solid label="REQUIRES"]
  331 -> 375 [style=solid label="NEW"]
  331 -> 376 [style=solid label="COMPL"]
  331 -> 377 [style=solid label="NOT"]
  331 -> 378 [style=solid label="PLUS_PLUS"]
  331 -> 379 [style=solid label="MINUS_MINUS"]
  331 -> 380 [style=solid label="THIS"]
  331 -> 36 [style=solid label="AUTO"]
  331 -> 381 [style=solid label="NULLPTR"]
  331 -> 382 [style=solid label="DYNAMIC_CAST"]
  331 -> 383 [style=solid label="STATIC_CAST"]
  331 -> 384 [style=solid label="REINTERPRET_CAST"]
  331 -> 385 [style=solid label="CONST_CAST"]
  331 -> 386 [style=solid label="TYPEID"]
  331 -> 37 [style=solid label="CHAR"]
  331 -> 38 [style=solid label="CHAR8_T"]
  331 -> 39 [style=solid label="CHAR16_T"]
  331 -> 40 [style=solid label="CHAR32_T"]
  331 -> 41 [style=solid label="WCHAR_T"]
  331 -> 42 [style=solid label="BOOL"]
  331 -> 43 [style=solid label="SHORT"]
  331 -> 44 [style=solid label="INT"]
  331 -> 45 [style=solid label="LONG"]
  331 -> 46 [style=solid label="SIGNED"]
  331 -> 47 [style=solid label="UNSIGNED"]
  331 -> 48 [style=solid label="FLOAT"]
  331 -> 49 [style=solid label="DOUBLE"]
  331 -> 50 [style=solid label="VOID"]
  331 -> 55 [style=solid label="TYPENAME"]
  331 -> 387 [style=solid label="SIZEOF"]
  331 -> 388 [style=solid label="ALIGNOF"]
  331 -> 389 [style=solid label="'0'"]
  331 -> 390 [style=solid label="'1'"]
  331 -> 391 [style=solid label="'2'"]
  331 -> 392 [style=solid label="'3'"]
  331 -> 393 [style=solid label="'4'"]
  331 -> 394 [style=solid label="'5'"]
  331 -> 395 [style=solid label="'6'"]
  331 -> 396 [style=solid label="'7'"]
  331 -> 397 [style=solid label="'8'"]
  331 -> 398 [style=solid label="'9'"]
  331 -> 205 [style=solid label="'u'"]
  331 -> 206 [style=solid label="'U'"]
  331 -> 207 [style=solid label="'L'"]
  331 -> 208 [style=solid label="'R'"]
  331 -> 399 [style=dashed label="additive-expression"]
  331 -> 400 [style=dashed label="and-expression"]
  331 -> 401 [style=dashed label="await-expression"]
  331 -> 402 [style=dashed label="binary-literal"]
  331 -> 403 [style=dashed label="boolean-literal"]
  331 -> 404 [style=dashed label="cast-expression"]
  331 -> 405 [style=dashed label="character-literal"]
  331 -> 209 [style=dashed label="class-key"]
  331 -> 65 [style=dashed label="class-name"]
  331 -> 406 [style=dashed label="compare-expression"]
  331 -> 67 [style=dashed label="concept-name"]
  331 -> 407 [style=dashed label="conditional-expression"]
  331 -> 635 [style=dashed label="constant-expression"]
  331 -> 68 [style=dashed label="conversion-function-id"]
  331 -> 69 [style=dashed label="cv-qualifier"]
  331 -> 409 [style=dashed label="decimal-floating-point-literal"]
  331 -> 410 [style=dashed label="decimal-literal"]
  331 -> 76 [style=dashed label="decltype-specifier"]
  331 -> 411 [style=dashed label="delete-expression"]
  331 -> 412 [style=dashed label="digit"]
  331 -> 413 [style=dashed label="digit-sequence"]
  331 -> 79 [style=dashed label="elaborated-enum-specifier"]
  331 -> 80 [style=dashed label="elaborated-type-specifier"]
  331 -> 414 [style=dashed label="encoding-prefix"]
  331 -> 84 [style=dashed label="enum-name"]
  331 -> 415 [style=dashed label="equality-expression"]
  331 -> 416 [style=dashed label="exclusive-or-expression"]
  331 -> 417 [style=dashed label="floating-point-literal"]
  331 -> 418 [style=dashed label="fold-expression"]
  331 -> 419 [style=dashed label="fractional-constant"]
  331 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  331 -> 421 [style=dashed label="hexadecimal-literal"]
  331 -> 422 [style=dashed label="hexadecimal-prefix"]
  331 -> 636 [style=dashed label="id-expression"]
  331 -> 424 [style=dashed label="inclusive-or-expression"]
  331 -> 425 [style=dashed label="integer-literal"]
  331 -> 426 [style=dashed label="lambda-expression"]
  331 -> 427 [style=dashed label="lambda-introducer"]
  331 -> 428 [style=dashed label="literal"]
  331 -> 95 [style=dashed label="literal-operator-id"]
  331 -> 429 [style=dashed label="logical-and-expression"]
  331 -> 430 [style=dashed label="logical-or-expression"]
  331 -> 431 [style=dashed label="multiplicative-expression"]
  331 -> 99 [style=dashed label="namespace-alias"]
  331 -> 102 [style=dashed label="namespace-name"]
  331 -> 432 [style=dashed label="nested-name-specifier"]
  331 -> 433 [style=dashed label="new-expression"]
  331 -> 434 [style=dashed label="noexcept-expression"]
  331 -> 435 [style=dashed label="nonzero-digit"]
  331 -> 436 [style=dashed label="octal-literal"]
  331 -> 108 [style=dashed label="operator-function-id"]
  331 -> 109 [style=dashed label="placeholder-type-specifier"]
  331 -> 437 [style=dashed label="pm-expression"]
  331 -> 438 [style=dashed label="pointer-literal"]
  331 -> 439 [style=dashed label="postfix-expression"]
  331 -> 440 [style=dashed label="primary-expression"]
  331 -> 112 [style=dashed label="qualified-id"]
  331 -> 441 [style=dashed label="relational-expression"]
  331 -> 442 [style=dashed label="requires-expression"]
  331 -> 443 [style=dashed label="shift-expression"]
  331 -> 114 [style=dashed label="simple-template-id"]
  331 -> 444 [style=dashed label="simple-type-specifier"]
  331 -> 445 [style=dashed label="string-literal"]
  331 -> 637 [style=dashed label="template-argument"]
  331 -> 739 [style=dashed label="template-argument-list"]
  331 -> 120 [style=dashed label="template-id"]
  331 -> 215 [style=dashed label="template-name"]
  331 -> 123 [style=dashed label="type-constraint"]
  331 -> 639 [style=dashed label="type-id"]
  331 -> 124 [style=dashed label="type-name"]
  331 -> 216 [style=dashed label="type-specifier"]
  331 -> 447 [style=dashed label="type-specifier-seq"]
  331 -> 126 [style=dashed label="typedef-name"]
  331 -> 448 [style=dashed label="typename-specifier"]
  331 -> 449 [style=dashed label="unary-expression"]
  331 -> 450 [style=dashed label="unary-operator"]
  331 -> 129 [style=dashed label="unqualified-id"]
  331 -> 451 [style=dashed label="user-defined-character-literal"]
  331 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  331 -> 453 [style=dashed label="user-defined-integer-literal"]
  331 -> 454 [style=dashed label="user-defined-literal"]
  331 -> 455 [style=dashed label="user-defined-string-literal"]
  332 [label="State 332\n\l892 ptr-declarator: ptr-operator ptr-declarator •\l"]
  332 -> "332R892" [style=solid]
 "332R892" [label="R892", fillcolor=3, shape=diamond, style=filled]
  333 [label="State 333\n\l162 concept-definition: CONCEPT • concept-name EQ constraint-expression SEMICOLON\l"]
  333 -> 740 [style=solid label="IDENTIFIER"]
  333 -> 741 [style=dashed label="concept-name"]
  334 [label="State 334\n\l1044 template-declaration: template-head concept-definition •\l"]
  334 -> "334R1044" [style=solid]
 "334R1044" [label="R1044", fillcolor=3, shape=diamond, style=filled]
  335 [label="State 335\n\l1043 template-declaration: template-head declaration •\l"]
  335 -> "335R1043" [style=solid]
 "335R1043" [label="R1043", fillcolor=3, shape=diamond, style=filled]
  336 [label="State 336\n\l232 deduction-guide: template-name OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN DEREF simple-template-id SEMICOLON\l"]
  336 -> 162 [style=solid label="IDENTIFIER"]
  336 -> 4 [style=solid label="ALIGNAS"]
  336 -> 730 [style=solid label="ELLIPSIS"]
  336 -> 9 [style=solid label="SCOPE"]
  336 -> 10 [style=solid label="OPEN_SQUARE"]
  336 -> 11 [style=solid label="VIRTUAL"]
  336 -> 12 [style=solid label="CLASS"]
  336 -> 13 [style=solid label="STRUCT"]
  336 -> 14 [style=solid label="UNION"]
  336 -> 18 [style=solid label="CONST"]
  336 -> 19 [style=solid label="VOLATILE"]
  336 -> 20 [style=solid label="FRIEND"]
  336 -> 21 [style=solid label="TYPEDEF"]
  336 -> 22 [style=solid label="CONSTEXPR"]
  336 -> 23 [style=solid label="CONSTEVAL"]
  336 -> 24 [style=solid label="CONSTINIT"]
  336 -> 258 [style=solid label="INLINE"]
  336 -> 26 [style=solid label="DECLTYPE"]
  336 -> 27 [style=solid label="ENUM"]
  336 -> 259 [style=solid label="EXTERN"]
  336 -> 29 [style=solid label="EXPLICIT"]
  336 -> 471 [style=solid label="THIS"]
  336 -> 36 [style=solid label="AUTO"]
  336 -> 37 [style=solid label="CHAR"]
  336 -> 38 [style=solid label="CHAR8_T"]
  336 -> 39 [style=solid label="CHAR16_T"]
  336 -> 40 [style=solid label="CHAR32_T"]
  336 -> 41 [style=solid label="WCHAR_T"]
  336 -> 42 [style=solid label="BOOL"]
  336 -> 43 [style=solid label="SHORT"]
  336 -> 44 [style=solid label="INT"]
  336 -> 45 [style=solid label="LONG"]
  336 -> 46 [style=solid label="SIGNED"]
  336 -> 47 [style=solid label="UNSIGNED"]
  336 -> 48 [style=solid label="FLOAT"]
  336 -> 49 [style=solid label="DOUBLE"]
  336 -> 50 [style=solid label="VOID"]
  336 -> 52 [style=solid label="STATIC"]
  336 -> 53 [style=solid label="THREAD_LOCAL"]
  336 -> 54 [style=solid label="MUTABLE"]
  336 -> 55 [style=solid label="TYPENAME"]
  336 -> 57 [style=dashed label="alignment-specifier"]
  336 -> 60 [style=dashed label="attribute-specifier"]
  336 -> 473 [style=dashed label="attribute-specifier-seq"]
  336 -> 63 [style=dashed label="class-head"]
  336 -> 64 [style=dashed label="class-key"]
  336 -> 65 [style=dashed label="class-name"]
  336 -> 66 [style=dashed label="class-specifier"]
  336 -> 67 [style=dashed label="concept-name"]
  336 -> 69 [style=dashed label="cv-qualifier"]
  336 -> 70 [style=dashed label="decl-specifier"]
  336 -> 474 [style=dashed label="decl-specifier-seq"]
  336 -> 76 [style=dashed label="decltype-specifier"]
  336 -> 78 [style=dashed label="defining-type-specifier"]
  336 -> 79 [style=dashed label="elaborated-enum-specifier"]
  336 -> 80 [style=dashed label="elaborated-type-specifier"]
  336 -> 82 [style=dashed label="enum-head"]
  336 -> 263 [style=dashed label="enum-key"]
  336 -> 84 [style=dashed label="enum-name"]
  336 -> 85 [style=dashed label="enum-specifier"]
  336 -> 264 [style=dashed label="explicit-specifier"]
  336 -> 91 [style=dashed label="function-specifier"]
  336 -> 99 [style=dashed label="namespace-alias"]
  336 -> 102 [style=dashed label="namespace-name"]
  336 -> 212 [style=dashed label="nested-name-specifier"]
  336 -> 731 [style=dashed label="parameter-declaration"]
  336 -> 742 [style=dashed label="parameter-declaration-clause"]
  336 -> 733 [style=dashed label="parameter-declaration-list"]
  336 -> 109 [style=dashed label="placeholder-type-specifier"]
  336 -> 141 [style=dashed label="simple-template-id"]
  336 -> 115 [style=dashed label="simple-type-specifier"]
  336 -> 117 [style=dashed label="storage-class-specifier"]
  336 -> 215 [style=dashed label="template-name"]
  336 -> 123 [style=dashed label="type-constraint"]
  336 -> 124 [style=dashed label="type-name"]
  336 -> 125 [style=dashed label="type-specifier"]
  336 -> 126 [style=dashed label="typedef-name"]
  336 -> 127 [style=dashed label="typename-specifier"]
  337 [label="State 337\n\l983 simple-template-id: template-name LESS • GREATER\l984                   | template-name LESS • template-argument-list GREATER\l"]
  337 -> 356 [style=solid label="PLUS"]
  337 -> 357 [style=solid label="MINUS"]
  337 -> 2 [style=solid label="IDENTIFIER"]
  337 -> 358 [style=solid label="OPEN_PAREN"]
  337 -> 359 [style=solid label="AND"]
  337 -> 360 [style=solid label="SCOPE"]
  337 -> 361 [style=solid label="OPEN_SQUARE"]
  337 -> 362 [style=solid label="CO_AWAIT"]
  337 -> 363 [style=solid label="ZERO_LB"]
  337 -> 364 [style=solid label="ZERO_HB"]
  337 -> 365 [style=solid label="SINGLE_QUOTE"]
  337 -> 366 [style=solid label="FALSE"]
  337 -> 367 [style=solid label="TRUE"]
  337 -> 12 [style=solid label="CLASS"]
  337 -> 13 [style=solid label="STRUCT"]
  337 -> 14 [style=solid label="UNION"]
  337 -> 368 [style=solid label="NOEXCEPT"]
  337 -> 17 [style=solid label="OPERATOR"]
  337 -> 18 [style=solid label="CONST"]
  337 -> 19 [style=solid label="VOLATILE"]
  337 -> 26 [style=solid label="DECLTYPE"]
  337 -> 369 [style=solid label="DELETE"]
  337 -> 370 [style=solid label="DOT"]
  337 -> 135 [style=solid label="ENUM"]
  337 -> 184 [style=solid label="UNICODE_8"]
  337 -> 743 [style=solid label="GREATER"]
  337 -> 371 [style=solid label="MULT"]
  337 -> 199 [style=solid label="DOUBLE_QUOTE"]
  337 -> 372 [style=solid label="ZERO_LX"]
  337 -> 373 [style=solid label="ZERO_HX"]
  337 -> 374 [style=solid label="REQUIRES"]
  337 -> 375 [style=solid label="NEW"]
  337 -> 376 [style=solid label="COMPL"]
  337 -> 377 [style=solid label="NOT"]
  337 -> 378 [style=solid label="PLUS_PLUS"]
  337 -> 379 [style=solid label="MINUS_MINUS"]
  337 -> 380 [style=solid label="THIS"]
  337 -> 36 [style=solid label="AUTO"]
  337 -> 381 [style=solid label="NULLPTR"]
  337 -> 382 [style=solid label="DYNAMIC_CAST"]
  337 -> 383 [style=solid label="STATIC_CAST"]
  337 -> 384 [style=solid label="REINTERPRET_CAST"]
  337 -> 385 [style=solid label="CONST_CAST"]
  337 -> 386 [style=solid label="TYPEID"]
  337 -> 37 [style=solid label="CHAR"]
  337 -> 38 [style=solid label="CHAR8_T"]
  337 -> 39 [style=solid label="CHAR16_T"]
  337 -> 40 [style=solid label="CHAR32_T"]
  337 -> 41 [style=solid label="WCHAR_T"]
  337 -> 42 [style=solid label="BOOL"]
  337 -> 43 [style=solid label="SHORT"]
  337 -> 44 [style=solid label="INT"]
  337 -> 45 [style=solid label="LONG"]
  337 -> 46 [style=solid label="SIGNED"]
  337 -> 47 [style=solid label="UNSIGNED"]
  337 -> 48 [style=solid label="FLOAT"]
  337 -> 49 [style=solid label="DOUBLE"]
  337 -> 50 [style=solid label="VOID"]
  337 -> 55 [style=solid label="TYPENAME"]
  337 -> 387 [style=solid label="SIZEOF"]
  337 -> 388 [style=solid label="ALIGNOF"]
  337 -> 389 [style=solid label="'0'"]
  337 -> 390 [style=solid label="'1'"]
  337 -> 391 [style=solid label="'2'"]
  337 -> 392 [style=solid label="'3'"]
  337 -> 393 [style=solid label="'4'"]
  337 -> 394 [style=solid label="'5'"]
  337 -> 395 [style=solid label="'6'"]
  337 -> 396 [style=solid label="'7'"]
  337 -> 397 [style=solid label="'8'"]
  337 -> 398 [style=solid label="'9'"]
  337 -> 205 [style=solid label="'u'"]
  337 -> 206 [style=solid label="'U'"]
  337 -> 207 [style=solid label="'L'"]
  337 -> 208 [style=solid label="'R'"]
  337 -> 399 [style=dashed label="additive-expression"]
  337 -> 400 [style=dashed label="and-expression"]
  337 -> 401 [style=dashed label="await-expression"]
  337 -> 402 [style=dashed label="binary-literal"]
  337 -> 403 [style=dashed label="boolean-literal"]
  337 -> 404 [style=dashed label="cast-expression"]
  337 -> 405 [style=dashed label="character-literal"]
  337 -> 209 [style=dashed label="class-key"]
  337 -> 65 [style=dashed label="class-name"]
  337 -> 406 [style=dashed label="compare-expression"]
  337 -> 67 [style=dashed label="concept-name"]
  337 -> 407 [style=dashed label="conditional-expression"]
  337 -> 635 [style=dashed label="constant-expression"]
  337 -> 68 [style=dashed label="conversion-function-id"]
  337 -> 69 [style=dashed label="cv-qualifier"]
  337 -> 409 [style=dashed label="decimal-floating-point-literal"]
  337 -> 410 [style=dashed label="decimal-literal"]
  337 -> 76 [style=dashed label="decltype-specifier"]
  337 -> 411 [style=dashed label="delete-expression"]
  337 -> 412 [style=dashed label="digit"]
  337 -> 413 [style=dashed label="digit-sequence"]
  337 -> 79 [style=dashed label="elaborated-enum-specifier"]
  337 -> 80 [style=dashed label="elaborated-type-specifier"]
  337 -> 414 [style=dashed label="encoding-prefix"]
  337 -> 84 [style=dashed label="enum-name"]
  337 -> 415 [style=dashed label="equality-expression"]
  337 -> 416 [style=dashed label="exclusive-or-expression"]
  337 -> 417 [style=dashed label="floating-point-literal"]
  337 -> 418 [style=dashed label="fold-expression"]
  337 -> 419 [style=dashed label="fractional-constant"]
  337 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  337 -> 421 [style=dashed label="hexadecimal-literal"]
  337 -> 422 [style=dashed label="hexadecimal-prefix"]
  337 -> 636 [style=dashed label="id-expression"]
  337 -> 424 [style=dashed label="inclusive-or-expression"]
  337 -> 425 [style=dashed label="integer-literal"]
  337 -> 426 [style=dashed label="lambda-expression"]
  337 -> 427 [style=dashed label="lambda-introducer"]
  337 -> 428 [style=dashed label="literal"]
  337 -> 95 [style=dashed label="literal-operator-id"]
  337 -> 429 [style=dashed label="logical-and-expression"]
  337 -> 430 [style=dashed label="logical-or-expression"]
  337 -> 431 [style=dashed label="multiplicative-expression"]
  337 -> 99 [style=dashed label="namespace-alias"]
  337 -> 102 [style=dashed label="namespace-name"]
  337 -> 432 [style=dashed label="nested-name-specifier"]
  337 -> 433 [style=dashed label="new-expression"]
  337 -> 434 [style=dashed label="noexcept-expression"]
  337 -> 435 [style=dashed label="nonzero-digit"]
  337 -> 436 [style=dashed label="octal-literal"]
  337 -> 108 [style=dashed label="operator-function-id"]
  337 -> 109 [style=dashed label="placeholder-type-specifier"]
  337 -> 437 [style=dashed label="pm-expression"]
  337 -> 438 [style=dashed label="pointer-literal"]
  337 -> 439 [style=dashed label="postfix-expression"]
  337 -> 440 [style=dashed label="primary-expression"]
  337 -> 112 [style=dashed label="qualified-id"]
  337 -> 441 [style=dashed label="relational-expression"]
  337 -> 442 [style=dashed label="requires-expression"]
  337 -> 443 [style=dashed label="shift-expression"]
  337 -> 114 [style=dashed label="simple-template-id"]
  337 -> 444 [style=dashed label="simple-type-specifier"]
  337 -> 445 [style=dashed label="string-literal"]
  337 -> 637 [style=dashed label="template-argument"]
  337 -> 744 [style=dashed label="template-argument-list"]
  337 -> 120 [style=dashed label="template-id"]
  337 -> 215 [style=dashed label="template-name"]
  337 -> 123 [style=dashed label="type-constraint"]
  337 -> 639 [style=dashed label="type-id"]
  337 -> 124 [style=dashed label="type-name"]
  337 -> 216 [style=dashed label="type-specifier"]
  337 -> 447 [style=dashed label="type-specifier-seq"]
  337 -> 126 [style=dashed label="typedef-name"]
  337 -> 448 [style=dashed label="typename-specifier"]
  337 -> 449 [style=dashed label="unary-expression"]
  337 -> 450 [style=dashed label="unary-operator"]
  337 -> 129 [style=dashed label="unqualified-id"]
  337 -> 451 [style=dashed label="user-defined-character-literal"]
  337 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  337 -> 453 [style=dashed label="user-defined-integer-literal"]
  337 -> 454 [style=dashed label="user-defined-literal"]
  337 -> 455 [style=dashed label="user-defined-string-literal"]
  338 [label="State 338\n\l  0 $accept: translation-unit $end •\l"]
  338 -> "338R0" [style=solid]
 "338R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  339 [label="State 339\n\l850 placeholder-type-specifier: type-constraint DECLTYPE • OPEN_PAREN AUTO CLOSE_PAREN\l"]
  339 -> 745 [style=solid label="OPEN_PAREN"]
  340 [label="State 340\n\l848 placeholder-type-specifier: type-constraint AUTO •\l"]
  340 -> "340R848" [style=solid]
 "340R848" [label="R848", fillcolor=3, shape=diamond, style=filled]
  341 [label="State 341\n\l656 nested-name-specifier: type-name SCOPE •\l"]
  341 -> "341R656" [style=solid]
 "341R656" [label="R656", fillcolor=3, shape=diamond, style=filled]
  342 [label="State 342\n\l 13 alias-declaration: USING IDENTIFIER EQ • defining-type-id SEMICOLON\l"]
  342 -> 162 [style=solid label="IDENTIFIER"]
  342 -> 9 [style=solid label="SCOPE"]
  342 -> 12 [style=solid label="CLASS"]
  342 -> 13 [style=solid label="STRUCT"]
  342 -> 14 [style=solid label="UNION"]
  342 -> 18 [style=solid label="CONST"]
  342 -> 19 [style=solid label="VOLATILE"]
  342 -> 26 [style=solid label="DECLTYPE"]
  342 -> 27 [style=solid label="ENUM"]
  342 -> 36 [style=solid label="AUTO"]
  342 -> 37 [style=solid label="CHAR"]
  342 -> 38 [style=solid label="CHAR8_T"]
  342 -> 39 [style=solid label="CHAR16_T"]
  342 -> 40 [style=solid label="CHAR32_T"]
  342 -> 41 [style=solid label="WCHAR_T"]
  342 -> 42 [style=solid label="BOOL"]
  342 -> 43 [style=solid label="SHORT"]
  342 -> 44 [style=solid label="INT"]
  342 -> 45 [style=solid label="LONG"]
  342 -> 46 [style=solid label="SIGNED"]
  342 -> 47 [style=solid label="UNSIGNED"]
  342 -> 48 [style=solid label="FLOAT"]
  342 -> 49 [style=solid label="DOUBLE"]
  342 -> 50 [style=solid label="VOID"]
  342 -> 55 [style=solid label="TYPENAME"]
  342 -> 63 [style=dashed label="class-head"]
  342 -> 64 [style=dashed label="class-key"]
  342 -> 65 [style=dashed label="class-name"]
  342 -> 66 [style=dashed label="class-specifier"]
  342 -> 67 [style=dashed label="concept-name"]
  342 -> 69 [style=dashed label="cv-qualifier"]
  342 -> 76 [style=dashed label="decltype-specifier"]
  342 -> 746 [style=dashed label="defining-type-id"]
  342 -> 747 [style=dashed label="defining-type-specifier"]
  342 -> 748 [style=dashed label="defining-type-specifier-seq"]
  342 -> 79 [style=dashed label="elaborated-enum-specifier"]
  342 -> 80 [style=dashed label="elaborated-type-specifier"]
  342 -> 82 [style=dashed label="enum-head"]
  342 -> 263 [style=dashed label="enum-key"]
  342 -> 84 [style=dashed label="enum-name"]
  342 -> 85 [style=dashed label="enum-specifier"]
  342 -> 99 [style=dashed label="namespace-alias"]
  342 -> 102 [style=dashed label="namespace-name"]
  342 -> 212 [style=dashed label="nested-name-specifier"]
  342 -> 109 [style=dashed label="placeholder-type-specifier"]
  342 -> 141 [style=dashed label="simple-template-id"]
  342 -> 115 [style=dashed label="simple-type-specifier"]
  342 -> 215 [style=dashed label="template-name"]
  342 -> 123 [style=dashed label="type-constraint"]
  342 -> 124 [style=dashed label="type-name"]
  342 -> 125 [style=dashed label="type-specifier"]
  342 -> 126 [style=dashed label="typedef-name"]
  342 -> 127 [style=dashed label="typename-specifier"]
  343 [label="State 343\n\l 14 alias-declaration: USING IDENTIFIER attribute-specifier-seq • EQ defining-type-id SEMICOLON\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l"]
  343 -> 749 [style=solid label="EQ"]
  343 -> 4 [style=solid label="ALIGNAS"]
  343 -> 10 [style=solid label="OPEN_SQUARE"]
  343 -> 57 [style=dashed label="alignment-specifier"]
  343 -> 260 [style=dashed label="attribute-specifier"]
  344 [label="State 344\n\l230 decltype-specifier: DECLTYPE OPEN_PAREN • expression CLOSE_PAREN\l"]
  344 -> 356 [style=solid label="PLUS"]
  344 -> 357 [style=solid label="MINUS"]
  344 -> 2 [style=solid label="IDENTIFIER"]
  344 -> 358 [style=solid label="OPEN_PAREN"]
  344 -> 359 [style=solid label="AND"]
  344 -> 360 [style=solid label="SCOPE"]
  344 -> 361 [style=solid label="OPEN_SQUARE"]
  344 -> 362 [style=solid label="CO_AWAIT"]
  344 -> 363 [style=solid label="ZERO_LB"]
  344 -> 364 [style=solid label="ZERO_HB"]
  344 -> 365 [style=solid label="SINGLE_QUOTE"]
  344 -> 366 [style=solid label="FALSE"]
  344 -> 367 [style=solid label="TRUE"]
  344 -> 368 [style=solid label="NOEXCEPT"]
  344 -> 17 [style=solid label="OPERATOR"]
  344 -> 26 [style=solid label="DECLTYPE"]
  344 -> 369 [style=solid label="DELETE"]
  344 -> 370 [style=solid label="DOT"]
  344 -> 184 [style=solid label="UNICODE_8"]
  344 -> 371 [style=solid label="MULT"]
  344 -> 199 [style=solid label="DOUBLE_QUOTE"]
  344 -> 372 [style=solid label="ZERO_LX"]
  344 -> 373 [style=solid label="ZERO_HX"]
  344 -> 374 [style=solid label="REQUIRES"]
  344 -> 375 [style=solid label="NEW"]
  344 -> 376 [style=solid label="COMPL"]
  344 -> 377 [style=solid label="NOT"]
  344 -> 378 [style=solid label="PLUS_PLUS"]
  344 -> 379 [style=solid label="MINUS_MINUS"]
  344 -> 380 [style=solid label="THIS"]
  344 -> 36 [style=solid label="AUTO"]
  344 -> 381 [style=solid label="NULLPTR"]
  344 -> 382 [style=solid label="DYNAMIC_CAST"]
  344 -> 383 [style=solid label="STATIC_CAST"]
  344 -> 384 [style=solid label="REINTERPRET_CAST"]
  344 -> 385 [style=solid label="CONST_CAST"]
  344 -> 386 [style=solid label="TYPEID"]
  344 -> 37 [style=solid label="CHAR"]
  344 -> 38 [style=solid label="CHAR8_T"]
  344 -> 39 [style=solid label="CHAR16_T"]
  344 -> 40 [style=solid label="CHAR32_T"]
  344 -> 41 [style=solid label="WCHAR_T"]
  344 -> 42 [style=solid label="BOOL"]
  344 -> 43 [style=solid label="SHORT"]
  344 -> 44 [style=solid label="INT"]
  344 -> 45 [style=solid label="LONG"]
  344 -> 46 [style=solid label="SIGNED"]
  344 -> 47 [style=solid label="UNSIGNED"]
  344 -> 48 [style=solid label="FLOAT"]
  344 -> 49 [style=solid label="DOUBLE"]
  344 -> 50 [style=solid label="VOID"]
  344 -> 523 [style=solid label="THROW"]
  344 -> 55 [style=solid label="TYPENAME"]
  344 -> 387 [style=solid label="SIZEOF"]
  344 -> 388 [style=solid label="ALIGNOF"]
  344 -> 524 [style=solid label="CO_YIELD"]
  344 -> 389 [style=solid label="'0'"]
  344 -> 390 [style=solid label="'1'"]
  344 -> 391 [style=solid label="'2'"]
  344 -> 392 [style=solid label="'3'"]
  344 -> 393 [style=solid label="'4'"]
  344 -> 394 [style=solid label="'5'"]
  344 -> 395 [style=solid label="'6'"]
  344 -> 396 [style=solid label="'7'"]
  344 -> 397 [style=solid label="'8'"]
  344 -> 398 [style=solid label="'9'"]
  344 -> 205 [style=solid label="'u'"]
  344 -> 206 [style=solid label="'U'"]
  344 -> 207 [style=solid label="'L'"]
  344 -> 208 [style=solid label="'R'"]
  344 -> 399 [style=dashed label="additive-expression"]
  344 -> 400 [style=dashed label="and-expression"]
  344 -> 525 [style=dashed label="assignment-expression"]
  344 -> 401 [style=dashed label="await-expression"]
  344 -> 402 [style=dashed label="binary-literal"]
  344 -> 403 [style=dashed label="boolean-literal"]
  344 -> 404 [style=dashed label="cast-expression"]
  344 -> 405 [style=dashed label="character-literal"]
  344 -> 65 [style=dashed label="class-name"]
  344 -> 406 [style=dashed label="compare-expression"]
  344 -> 67 [style=dashed label="concept-name"]
  344 -> 526 [style=dashed label="conditional-expression"]
  344 -> 68 [style=dashed label="conversion-function-id"]
  344 -> 409 [style=dashed label="decimal-floating-point-literal"]
  344 -> 410 [style=dashed label="decimal-literal"]
  344 -> 76 [style=dashed label="decltype-specifier"]
  344 -> 411 [style=dashed label="delete-expression"]
  344 -> 412 [style=dashed label="digit"]
  344 -> 413 [style=dashed label="digit-sequence"]
  344 -> 414 [style=dashed label="encoding-prefix"]
  344 -> 84 [style=dashed label="enum-name"]
  344 -> 415 [style=dashed label="equality-expression"]
  344 -> 416 [style=dashed label="exclusive-or-expression"]
  344 -> 527 [style=dashed label="expression"]
  344 -> 417 [style=dashed label="floating-point-literal"]
  344 -> 418 [style=dashed label="fold-expression"]
  344 -> 419 [style=dashed label="fractional-constant"]
  344 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  344 -> 421 [style=dashed label="hexadecimal-literal"]
  344 -> 422 [style=dashed label="hexadecimal-prefix"]
  344 -> 423 [style=dashed label="id-expression"]
  344 -> 424 [style=dashed label="inclusive-or-expression"]
  344 -> 425 [style=dashed label="integer-literal"]
  344 -> 426 [style=dashed label="lambda-expression"]
  344 -> 427 [style=dashed label="lambda-introducer"]
  344 -> 428 [style=dashed label="literal"]
  344 -> 95 [style=dashed label="literal-operator-id"]
  344 -> 429 [style=dashed label="logical-and-expression"]
  344 -> 528 [style=dashed label="logical-or-expression"]
  344 -> 431 [style=dashed label="multiplicative-expression"]
  344 -> 99 [style=dashed label="namespace-alias"]
  344 -> 102 [style=dashed label="namespace-name"]
  344 -> 432 [style=dashed label="nested-name-specifier"]
  344 -> 433 [style=dashed label="new-expression"]
  344 -> 434 [style=dashed label="noexcept-expression"]
  344 -> 435 [style=dashed label="nonzero-digit"]
  344 -> 436 [style=dashed label="octal-literal"]
  344 -> 108 [style=dashed label="operator-function-id"]
  344 -> 109 [style=dashed label="placeholder-type-specifier"]
  344 -> 437 [style=dashed label="pm-expression"]
  344 -> 438 [style=dashed label="pointer-literal"]
  344 -> 439 [style=dashed label="postfix-expression"]
  344 -> 440 [style=dashed label="primary-expression"]
  344 -> 112 [style=dashed label="qualified-id"]
  344 -> 441 [style=dashed label="relational-expression"]
  344 -> 442 [style=dashed label="requires-expression"]
  344 -> 443 [style=dashed label="shift-expression"]
  344 -> 114 [style=dashed label="simple-template-id"]
  344 -> 529 [style=dashed label="simple-type-specifier"]
  344 -> 445 [style=dashed label="string-literal"]
  344 -> 120 [style=dashed label="template-id"]
  344 -> 215 [style=dashed label="template-name"]
  344 -> 530 [style=dashed label="throw-expression"]
  344 -> 123 [style=dashed label="type-constraint"]
  344 -> 124 [style=dashed label="type-name"]
  344 -> 126 [style=dashed label="typedef-name"]
  344 -> 531 [style=dashed label="typename-specifier"]
  344 -> 449 [style=dashed label="unary-expression"]
  344 -> 450 [style=dashed label="unary-operator"]
  344 -> 129 [style=dashed label="unqualified-id"]
  344 -> 451 [style=dashed label="user-defined-character-literal"]
  344 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  344 -> 453 [style=dashed label="user-defined-integer-literal"]
  344 -> 454 [style=dashed label="user-defined-literal"]
  344 -> 455 [style=dashed label="user-defined-string-literal"]
  344 -> 532 [style=dashed label="yield-expression"]
  345 [label="State 345\n\l657 nested-name-specifier: namespace-name • SCOPE\l1172 using-directive: USING NAMESPACE namespace-name • SEMICOLON\l"]
  345 -> 750 [style=solid label="SEMICOLON"]
  345 -> 319 [style=solid label="SCOPE"]
  346 [label="State 346\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l1174 using-directive: USING NAMESPACE nested-name-specifier • namespace-name SEMICOLON\l"]
  346 -> 751 [style=solid label="IDENTIFIER"]
  346 -> 350 [style=solid label="TEMPLATE"]
  346 -> 99 [style=dashed label="namespace-alias"]
  346 -> 752 [style=dashed label="namespace-name"]
  346 -> 534 [style=dashed label="simple-template-id"]
  346 -> 142 [style=dashed label="template-name"]
  347 [label="State 347\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l1165 using-declarator: TYPENAME nested-name-specifier • unqualified-id\l"]
  347 -> 349 [style=solid label="IDENTIFIER"]
  347 -> 350 [style=solid label="TEMPLATE"]
  347 -> 17 [style=solid label="OPERATOR"]
  347 -> 35 [style=solid label="COMPL"]
  347 -> 68 [style=dashed label="conversion-function-id"]
  347 -> 95 [style=dashed label="literal-operator-id"]
  347 -> 108 [style=dashed label="operator-function-id"]
  347 -> 351 [style=dashed label="simple-template-id"]
  347 -> 120 [style=dashed label="template-id"]
  347 -> 142 [style=dashed label="template-name"]
  347 -> 753 [style=dashed label="unqualified-id"]
  348 [label="State 348\n\l1175 using-enum-declaration: USING elaborated-enum-specifier SEMICOLON •\l"]
  348 -> "348R1175" [style=solid]
 "348R1175" [label="R1175", fillcolor=3, shape=diamond, style=filled]
  349 [label="State 349\n\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l1140 unqualified-id: IDENTIFIER •\l"]
  349 -> 722 [style=solid label="SCOPE"]
  349 -> "349R1052" [label="[LESS]", style=solid]
 "349R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  349 -> "349R1140d" [label="[SCOPE, LESS]", style=solid]
 "349R1140d" [label="R1140", fillcolor=5, shape=diamond, style=filled]
  349 -> "349R1140" [style=solid]
 "349R1140" [label="R1140", fillcolor=3, shape=diamond, style=filled]
  350 [label="State 350\n\l661 nested-name-specifier: nested-name-specifier TEMPLATE • simple-template-id SCOPE\l"]
  350 -> 310 [style=solid label="IDENTIFIER"]
  350 -> 754 [style=dashed label="simple-template-id"]
  350 -> 142 [style=dashed label="template-name"]
  351 [label="State 351\n\l660 nested-name-specifier: nested-name-specifier simple-template-id • SCOPE\l1047 template-id: simple-template-id •\l"]
  351 -> 729 [style=solid label="SCOPE"]
  351 -> "351R1047d" [label="[SCOPE]", style=solid]
 "351R1047d" [label="R1047", fillcolor=5, shape=diamond, style=filled]
  351 -> "351R1047" [style=solid]
 "351R1047" [label="R1047", fillcolor=3, shape=diamond, style=filled]
  352 [label="State 352\n\l1166 using-declarator: nested-name-specifier unqualified-id •\l"]
  352 -> "352R1166" [style=solid]
 "352R1166" [label="R1166", fillcolor=3, shape=diamond, style=filled]
  353 [label="State 353\n\l1168 using-declarator-list: using-declarator ELLIPSIS •\l"]
  353 -> "353R1168" [style=solid]
 "353R1168" [label="R1168", fillcolor=3, shape=diamond, style=filled]
  354 [label="State 354\n\l1164 using-declaration: USING using-declarator-list SEMICOLON •\l"]
  354 -> "354R1164" [style=solid]
 "354R1164" [label="R1164", fillcolor=3, shape=diamond, style=filled]
  355 [label="State 355\n\l1169 using-declarator-list: using-declarator-list COMMA • using-declarator\l1170                      | using-declarator-list COMMA • using-declarator ELLIPSIS\l"]
  355 -> 253 [style=solid label="IDENTIFIER"]
  355 -> 9 [style=solid label="SCOPE"]
  355 -> 134 [style=solid label="DECLTYPE"]
  355 -> 137 [style=solid label="TYPENAME"]
  355 -> 65 [style=dashed label="class-name"]
  355 -> 138 [style=dashed label="decltype-specifier"]
  355 -> 84 [style=dashed label="enum-name"]
  355 -> 99 [style=dashed label="namespace-alias"]
  355 -> 102 [style=dashed label="namespace-name"]
  355 -> 140 [style=dashed label="nested-name-specifier"]
  355 -> 141 [style=dashed label="simple-template-id"]
  355 -> 142 [style=dashed label="template-name"]
  355 -> 143 [style=dashed label="type-name"]
  355 -> 126 [style=dashed label="typedef-name"]
  355 -> 755 [style=dashed label="using-declarator"]
  356 [label="State 356\n\l1130 unary-operator: PLUS •\l"]
  356 -> "356R1130" [style=solid]
 "356R1130" [label="R1130", fillcolor=3, shape=diamond, style=filled]
  357 [label="State 357\n\l1131 unary-operator: MINUS •\l"]
  357 -> "357R1131" [style=solid]
 "357R1131" [label="R1131", fillcolor=3, shape=diamond, style=filled]
  358 [label="State 358\n\l125 cast-expression: OPEN_PAREN • type-id CLOSE_PAREN cast-expression\l345 fold-expression: OPEN_PAREN • cast-expression fold-operator ELLIPSIS CLOSE_PAREN\l346                | OPEN_PAREN • ELLIPSIS fold-operator cast-expression CLOSE_PAREN\l347                | OPEN_PAREN • cast-expression fold-operator ELLIPSIS fold-operator cast-expression CLOSE_PAREN\l881 primary-expression: OPEN_PAREN • expression CLOSE_PAREN\l"]
  358 -> 356 [style=solid label="PLUS"]
  358 -> 357 [style=solid label="MINUS"]
  358 -> 2 [style=solid label="IDENTIFIER"]
  358 -> 358 [style=solid label="OPEN_PAREN"]
  358 -> 756 [style=solid label="ELLIPSIS"]
  358 -> 359 [style=solid label="AND"]
  358 -> 360 [style=solid label="SCOPE"]
  358 -> 361 [style=solid label="OPEN_SQUARE"]
  358 -> 362 [style=solid label="CO_AWAIT"]
  358 -> 363 [style=solid label="ZERO_LB"]
  358 -> 364 [style=solid label="ZERO_HB"]
  358 -> 365 [style=solid label="SINGLE_QUOTE"]
  358 -> 366 [style=solid label="FALSE"]
  358 -> 367 [style=solid label="TRUE"]
  358 -> 12 [style=solid label="CLASS"]
  358 -> 13 [style=solid label="STRUCT"]
  358 -> 14 [style=solid label="UNION"]
  358 -> 368 [style=solid label="NOEXCEPT"]
  358 -> 17 [style=solid label="OPERATOR"]
  358 -> 18 [style=solid label="CONST"]
  358 -> 19 [style=solid label="VOLATILE"]
  358 -> 26 [style=solid label="DECLTYPE"]
  358 -> 369 [style=solid label="DELETE"]
  358 -> 370 [style=solid label="DOT"]
  358 -> 135 [style=solid label="ENUM"]
  358 -> 184 [style=solid label="UNICODE_8"]
  358 -> 371 [style=solid label="MULT"]
  358 -> 199 [style=solid label="DOUBLE_QUOTE"]
  358 -> 372 [style=solid label="ZERO_LX"]
  358 -> 373 [style=solid label="ZERO_HX"]
  358 -> 374 [style=solid label="REQUIRES"]
  358 -> 375 [style=solid label="NEW"]
  358 -> 376 [style=solid label="COMPL"]
  358 -> 377 [style=solid label="NOT"]
  358 -> 378 [style=solid label="PLUS_PLUS"]
  358 -> 379 [style=solid label="MINUS_MINUS"]
  358 -> 380 [style=solid label="THIS"]
  358 -> 36 [style=solid label="AUTO"]
  358 -> 381 [style=solid label="NULLPTR"]
  358 -> 382 [style=solid label="DYNAMIC_CAST"]
  358 -> 383 [style=solid label="STATIC_CAST"]
  358 -> 384 [style=solid label="REINTERPRET_CAST"]
  358 -> 385 [style=solid label="CONST_CAST"]
  358 -> 386 [style=solid label="TYPEID"]
  358 -> 37 [style=solid label="CHAR"]
  358 -> 38 [style=solid label="CHAR8_T"]
  358 -> 39 [style=solid label="CHAR16_T"]
  358 -> 40 [style=solid label="CHAR32_T"]
  358 -> 41 [style=solid label="WCHAR_T"]
  358 -> 42 [style=solid label="BOOL"]
  358 -> 43 [style=solid label="SHORT"]
  358 -> 44 [style=solid label="INT"]
  358 -> 45 [style=solid label="LONG"]
  358 -> 46 [style=solid label="SIGNED"]
  358 -> 47 [style=solid label="UNSIGNED"]
  358 -> 48 [style=solid label="FLOAT"]
  358 -> 49 [style=solid label="DOUBLE"]
  358 -> 50 [style=solid label="VOID"]
  358 -> 523 [style=solid label="THROW"]
  358 -> 55 [style=solid label="TYPENAME"]
  358 -> 387 [style=solid label="SIZEOF"]
  358 -> 388 [style=solid label="ALIGNOF"]
  358 -> 524 [style=solid label="CO_YIELD"]
  358 -> 389 [style=solid label="'0'"]
  358 -> 390 [style=solid label="'1'"]
  358 -> 391 [style=solid label="'2'"]
  358 -> 392 [style=solid label="'3'"]
  358 -> 393 [style=solid label="'4'"]
  358 -> 394 [style=solid label="'5'"]
  358 -> 395 [style=solid label="'6'"]
  358 -> 396 [style=solid label="'7'"]
  358 -> 397 [style=solid label="'8'"]
  358 -> 398 [style=solid label="'9'"]
  358 -> 205 [style=solid label="'u'"]
  358 -> 206 [style=solid label="'U'"]
  358 -> 207 [style=solid label="'L'"]
  358 -> 208 [style=solid label="'R'"]
  358 -> 399 [style=dashed label="additive-expression"]
  358 -> 400 [style=dashed label="and-expression"]
  358 -> 525 [style=dashed label="assignment-expression"]
  358 -> 401 [style=dashed label="await-expression"]
  358 -> 402 [style=dashed label="binary-literal"]
  358 -> 403 [style=dashed label="boolean-literal"]
  358 -> 757 [style=dashed label="cast-expression"]
  358 -> 405 [style=dashed label="character-literal"]
  358 -> 209 [style=dashed label="class-key"]
  358 -> 65 [style=dashed label="class-name"]
  358 -> 406 [style=dashed label="compare-expression"]
  358 -> 67 [style=dashed label="concept-name"]
  358 -> 526 [style=dashed label="conditional-expression"]
  358 -> 68 [style=dashed label="conversion-function-id"]
  358 -> 69 [style=dashed label="cv-qualifier"]
  358 -> 409 [style=dashed label="decimal-floating-point-literal"]
  358 -> 410 [style=dashed label="decimal-literal"]
  358 -> 76 [style=dashed label="decltype-specifier"]
  358 -> 411 [style=dashed label="delete-expression"]
  358 -> 412 [style=dashed label="digit"]
  358 -> 413 [style=dashed label="digit-sequence"]
  358 -> 79 [style=dashed label="elaborated-enum-specifier"]
  358 -> 80 [style=dashed label="elaborated-type-specifier"]
  358 -> 414 [style=dashed label="encoding-prefix"]
  358 -> 84 [style=dashed label="enum-name"]
  358 -> 415 [style=dashed label="equality-expression"]
  358 -> 416 [style=dashed label="exclusive-or-expression"]
  358 -> 758 [style=dashed label="expression"]
  358 -> 417 [style=dashed label="floating-point-literal"]
  358 -> 418 [style=dashed label="fold-expression"]
  358 -> 419 [style=dashed label="fractional-constant"]
  358 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  358 -> 421 [style=dashed label="hexadecimal-literal"]
  358 -> 422 [style=dashed label="hexadecimal-prefix"]
  358 -> 423 [style=dashed label="id-expression"]
  358 -> 424 [style=dashed label="inclusive-or-expression"]
  358 -> 425 [style=dashed label="integer-literal"]
  358 -> 426 [style=dashed label="lambda-expression"]
  358 -> 427 [style=dashed label="lambda-introducer"]
  358 -> 428 [style=dashed label="literal"]
  358 -> 95 [style=dashed label="literal-operator-id"]
  358 -> 429 [style=dashed label="logical-and-expression"]
  358 -> 528 [style=dashed label="logical-or-expression"]
  358 -> 431 [style=dashed label="multiplicative-expression"]
  358 -> 99 [style=dashed label="namespace-alias"]
  358 -> 102 [style=dashed label="namespace-name"]
  358 -> 432 [style=dashed label="nested-name-specifier"]
  358 -> 433 [style=dashed label="new-expression"]
  358 -> 434 [style=dashed label="noexcept-expression"]
  358 -> 435 [style=dashed label="nonzero-digit"]
  358 -> 436 [style=dashed label="octal-literal"]
  358 -> 108 [style=dashed label="operator-function-id"]
  358 -> 109 [style=dashed label="placeholder-type-specifier"]
  358 -> 437 [style=dashed label="pm-expression"]
  358 -> 438 [style=dashed label="pointer-literal"]
  358 -> 439 [style=dashed label="postfix-expression"]
  358 -> 440 [style=dashed label="primary-expression"]
  358 -> 112 [style=dashed label="qualified-id"]
  358 -> 441 [style=dashed label="relational-expression"]
  358 -> 442 [style=dashed label="requires-expression"]
  358 -> 443 [style=dashed label="shift-expression"]
  358 -> 114 [style=dashed label="simple-template-id"]
  358 -> 444 [style=dashed label="simple-type-specifier"]
  358 -> 445 [style=dashed label="string-literal"]
  358 -> 120 [style=dashed label="template-id"]
  358 -> 215 [style=dashed label="template-name"]
  358 -> 530 [style=dashed label="throw-expression"]
  358 -> 123 [style=dashed label="type-constraint"]
  358 -> 759 [style=dashed label="type-id"]
  358 -> 124 [style=dashed label="type-name"]
  358 -> 216 [style=dashed label="type-specifier"]
  358 -> 447 [style=dashed label="type-specifier-seq"]
  358 -> 126 [style=dashed label="typedef-name"]
  358 -> 448 [style=dashed label="typename-specifier"]
  358 -> 449 [style=dashed label="unary-expression"]
  358 -> 450 [style=dashed label="unary-operator"]
  358 -> 129 [style=dashed label="unqualified-id"]
  358 -> 451 [style=dashed label="user-defined-character-literal"]
  358 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  358 -> 453 [style=dashed label="user-defined-integer-literal"]
  358 -> 454 [style=dashed label="user-defined-literal"]
  358 -> 455 [style=dashed label="user-defined-string-literal"]
  358 -> 532 [style=dashed label="yield-expression"]
  359 [label="State 359\n\l1129 unary-operator: AND •\l"]
  359 -> "359R1129" [style=solid]
 "359R1129" [label="R1129", fillcolor=3, shape=diamond, style=filled]
  360 [label="State 360\n\l241 delete-expression: SCOPE • DELETE cast-expression\l243                  | SCOPE • DELETE OPEN_SQUARE CLOSE_SQUARE cast-expression\l655 nested-name-specifier: SCOPE •\l668 new-expression: SCOPE • NEW new-type-id\l670               | SCOPE • NEW new-placement new-type-id\l672               | SCOPE • NEW new-type-id new-initializer\l674               | SCOPE • NEW new-placement new-type-id new-initializer\l676               | SCOPE • NEW OPEN_PAREN type-id CLOSE_PAREN\l678               | SCOPE • NEW new-placement OPEN_PAREN type-id CLOSE_PAREN\l680               | SCOPE • NEW OPEN_PAREN type-id CLOSE_PAREN new-initializer\l682               | SCOPE • NEW new-placement OPEN_PAREN type-id CLOSE_PAREN new-initializer\l"]
  360 -> 760 [style=solid label="DELETE"]
  360 -> 761 [style=solid label="NEW"]
  360 -> "360R655" [style=solid]
 "360R655" [label="R655", fillcolor=3, shape=diamond, style=filled]
  361 [label="State 361\n\l534 lambda-introducer: OPEN_SQUARE • CLOSE_SQUARE\l535                  | OPEN_SQUARE • lambda-capture CLOSE_SQUARE\l"]
  361 -> 762 [style=solid label="IDENTIFIER"]
  361 -> 763 [style=solid label="EQ"]
  361 -> 764 [style=solid label="ELLIPSIS"]
  361 -> 765 [style=solid label="AND"]
  361 -> 766 [style=solid label="CLOSE_SQUARE"]
  361 -> 767 [style=solid label="MULT"]
  361 -> 768 [style=solid label="THIS"]
  361 -> 769 [style=dashed label="capture"]
  361 -> 770 [style=dashed label="capture-default"]
  361 -> 771 [style=dashed label="capture-list"]
  361 -> 772 [style=dashed label="init-capture"]
  361 -> 773 [style=dashed label="lambda-capture"]
  361 -> 774 [style=dashed label="simple-capture"]
  362 [label="State 362\n\l 58 await-expression: CO_AWAIT • cast-expression\l"]
  362 -> 356 [style=solid label="PLUS"]
  362 -> 357 [style=solid label="MINUS"]
  362 -> 2 [style=solid label="IDENTIFIER"]
  362 -> 358 [style=solid label="OPEN_PAREN"]
  362 -> 359 [style=solid label="AND"]
  362 -> 360 [style=solid label="SCOPE"]
  362 -> 361 [style=solid label="OPEN_SQUARE"]
  362 -> 362 [style=solid label="CO_AWAIT"]
  362 -> 363 [style=solid label="ZERO_LB"]
  362 -> 364 [style=solid label="ZERO_HB"]
  362 -> 365 [style=solid label="SINGLE_QUOTE"]
  362 -> 366 [style=solid label="FALSE"]
  362 -> 367 [style=solid label="TRUE"]
  362 -> 368 [style=solid label="NOEXCEPT"]
  362 -> 17 [style=solid label="OPERATOR"]
  362 -> 26 [style=solid label="DECLTYPE"]
  362 -> 369 [style=solid label="DELETE"]
  362 -> 370 [style=solid label="DOT"]
  362 -> 184 [style=solid label="UNICODE_8"]
  362 -> 371 [style=solid label="MULT"]
  362 -> 199 [style=solid label="DOUBLE_QUOTE"]
  362 -> 372 [style=solid label="ZERO_LX"]
  362 -> 373 [style=solid label="ZERO_HX"]
  362 -> 374 [style=solid label="REQUIRES"]
  362 -> 375 [style=solid label="NEW"]
  362 -> 376 [style=solid label="COMPL"]
  362 -> 377 [style=solid label="NOT"]
  362 -> 378 [style=solid label="PLUS_PLUS"]
  362 -> 379 [style=solid label="MINUS_MINUS"]
  362 -> 380 [style=solid label="THIS"]
  362 -> 36 [style=solid label="AUTO"]
  362 -> 381 [style=solid label="NULLPTR"]
  362 -> 382 [style=solid label="DYNAMIC_CAST"]
  362 -> 383 [style=solid label="STATIC_CAST"]
  362 -> 384 [style=solid label="REINTERPRET_CAST"]
  362 -> 385 [style=solid label="CONST_CAST"]
  362 -> 386 [style=solid label="TYPEID"]
  362 -> 37 [style=solid label="CHAR"]
  362 -> 38 [style=solid label="CHAR8_T"]
  362 -> 39 [style=solid label="CHAR16_T"]
  362 -> 40 [style=solid label="CHAR32_T"]
  362 -> 41 [style=solid label="WCHAR_T"]
  362 -> 42 [style=solid label="BOOL"]
  362 -> 43 [style=solid label="SHORT"]
  362 -> 44 [style=solid label="INT"]
  362 -> 45 [style=solid label="LONG"]
  362 -> 46 [style=solid label="SIGNED"]
  362 -> 47 [style=solid label="UNSIGNED"]
  362 -> 48 [style=solid label="FLOAT"]
  362 -> 49 [style=solid label="DOUBLE"]
  362 -> 50 [style=solid label="VOID"]
  362 -> 55 [style=solid label="TYPENAME"]
  362 -> 387 [style=solid label="SIZEOF"]
  362 -> 388 [style=solid label="ALIGNOF"]
  362 -> 389 [style=solid label="'0'"]
  362 -> 390 [style=solid label="'1'"]
  362 -> 391 [style=solid label="'2'"]
  362 -> 392 [style=solid label="'3'"]
  362 -> 393 [style=solid label="'4'"]
  362 -> 394 [style=solid label="'5'"]
  362 -> 395 [style=solid label="'6'"]
  362 -> 396 [style=solid label="'7'"]
  362 -> 397 [style=solid label="'8'"]
  362 -> 398 [style=solid label="'9'"]
  362 -> 205 [style=solid label="'u'"]
  362 -> 206 [style=solid label="'U'"]
  362 -> 207 [style=solid label="'L'"]
  362 -> 208 [style=solid label="'R'"]
  362 -> 401 [style=dashed label="await-expression"]
  362 -> 402 [style=dashed label="binary-literal"]
  362 -> 403 [style=dashed label="boolean-literal"]
  362 -> 775 [style=dashed label="cast-expression"]
  362 -> 405 [style=dashed label="character-literal"]
  362 -> 65 [style=dashed label="class-name"]
  362 -> 67 [style=dashed label="concept-name"]
  362 -> 68 [style=dashed label="conversion-function-id"]
  362 -> 409 [style=dashed label="decimal-floating-point-literal"]
  362 -> 410 [style=dashed label="decimal-literal"]
  362 -> 76 [style=dashed label="decltype-specifier"]
  362 -> 411 [style=dashed label="delete-expression"]
  362 -> 412 [style=dashed label="digit"]
  362 -> 413 [style=dashed label="digit-sequence"]
  362 -> 414 [style=dashed label="encoding-prefix"]
  362 -> 84 [style=dashed label="enum-name"]
  362 -> 417 [style=dashed label="floating-point-literal"]
  362 -> 418 [style=dashed label="fold-expression"]
  362 -> 419 [style=dashed label="fractional-constant"]
  362 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  362 -> 421 [style=dashed label="hexadecimal-literal"]
  362 -> 422 [style=dashed label="hexadecimal-prefix"]
  362 -> 423 [style=dashed label="id-expression"]
  362 -> 425 [style=dashed label="integer-literal"]
  362 -> 426 [style=dashed label="lambda-expression"]
  362 -> 427 [style=dashed label="lambda-introducer"]
  362 -> 428 [style=dashed label="literal"]
  362 -> 95 [style=dashed label="literal-operator-id"]
  362 -> 99 [style=dashed label="namespace-alias"]
  362 -> 102 [style=dashed label="namespace-name"]
  362 -> 432 [style=dashed label="nested-name-specifier"]
  362 -> 433 [style=dashed label="new-expression"]
  362 -> 434 [style=dashed label="noexcept-expression"]
  362 -> 435 [style=dashed label="nonzero-digit"]
  362 -> 436 [style=dashed label="octal-literal"]
  362 -> 108 [style=dashed label="operator-function-id"]
  362 -> 109 [style=dashed label="placeholder-type-specifier"]
  362 -> 438 [style=dashed label="pointer-literal"]
  362 -> 439 [style=dashed label="postfix-expression"]
  362 -> 440 [style=dashed label="primary-expression"]
  362 -> 112 [style=dashed label="qualified-id"]
  362 -> 442 [style=dashed label="requires-expression"]
  362 -> 114 [style=dashed label="simple-template-id"]
  362 -> 529 [style=dashed label="simple-type-specifier"]
  362 -> 445 [style=dashed label="string-literal"]
  362 -> 120 [style=dashed label="template-id"]
  362 -> 215 [style=dashed label="template-name"]
  362 -> 123 [style=dashed label="type-constraint"]
  362 -> 124 [style=dashed label="type-name"]
  362 -> 126 [style=dashed label="typedef-name"]
  362 -> 531 [style=dashed label="typename-specifier"]
  362 -> 449 [style=dashed label="unary-expression"]
  362 -> 450 [style=dashed label="unary-operator"]
  362 -> 129 [style=dashed label="unqualified-id"]
  362 -> 451 [style=dashed label="user-defined-character-literal"]
  362 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  362 -> 453 [style=dashed label="user-defined-integer-literal"]
  362 -> 454 [style=dashed label="user-defined-literal"]
  362 -> 455 [style=dashed label="user-defined-string-literal"]
  363 [label="State 363\n\l 91 binary-literal: ZERO_LB • binary-digit\l"]
  363 -> 776 [style=solid label="'0'"]
  363 -> 777 [style=solid label="'1'"]
  363 -> 778 [style=dashed label="binary-digit"]
  364 [label="State 364\n\l 92 binary-literal: ZERO_HB • binary-digit\l"]
  364 -> 776 [style=solid label="'0'"]
  364 -> 777 [style=solid label="'1'"]
  364 -> 779 [style=dashed label="binary-digit"]
  365 [label="State 365\n\l127 character-literal: SINGLE_QUOTE • c-char-sequence SINGLE_QUOTE\l"]
  365 -> 780 [style=solid label="BASIC_C_CHAR"]
  365 -> 486 [style=solid label="ESCAPE"]
  365 -> 488 [style=solid label="ESCAPE_LX"]
  365 -> 489 [style=solid label="ESCAPE_LU"]
  365 -> 490 [style=solid label="ESCAPE_HU"]
  365 -> 781 [style=dashed label="basic-c-char"]
  365 -> 782 [style=dashed label="c-char"]
  365 -> 783 [style=dashed label="c-char-sequence"]
  365 -> 492 [style=dashed label="conditional-escape-sequence"]
  365 -> 784 [style=dashed label="escape-sequence"]
  365 -> 494 [style=dashed label="hexadecimal-escape-sequence"]
  365 -> 495 [style=dashed label="numeric-escape-sequence"]
  365 -> 496 [style=dashed label="octal-escape-sequence"]
  365 -> 499 [style=dashed label="simple-escape-sequence"]
  365 -> 785 [style=dashed label="universal-character-name"]
  366 [label="State 366\n\l104 boolean-literal: FALSE •\l"]
  366 -> "366R104" [style=solid]
 "366R104" [label="R104", fillcolor=3, shape=diamond, style=filled]
  367 [label="State 367\n\l105 boolean-literal: TRUE •\l"]
  367 -> "367R105" [style=solid]
 "367R105" [label="R105", fillcolor=3, shape=diamond, style=filled]
  368 [label="State 368\n\l692 noexcept-expression: NOEXCEPT • OPEN_PAREN expression CLOSE_PAREN\l"]
  368 -> 786 [style=solid label="OPEN_PAREN"]
  369 [label="State 369\n\l242 delete-expression: DELETE • cast-expression\l244                  | DELETE • OPEN_SQUARE CLOSE_SQUARE cast-expression\l"]
  369 -> 356 [style=solid label="PLUS"]
  369 -> 357 [style=solid label="MINUS"]
  369 -> 2 [style=solid label="IDENTIFIER"]
  369 -> 358 [style=solid label="OPEN_PAREN"]
  369 -> 359 [style=solid label="AND"]
  369 -> 360 [style=solid label="SCOPE"]
  369 -> 787 [style=solid label="OPEN_SQUARE"]
  369 -> 362 [style=solid label="CO_AWAIT"]
  369 -> 363 [style=solid label="ZERO_LB"]
  369 -> 364 [style=solid label="ZERO_HB"]
  369 -> 365 [style=solid label="SINGLE_QUOTE"]
  369 -> 366 [style=solid label="FALSE"]
  369 -> 367 [style=solid label="TRUE"]
  369 -> 368 [style=solid label="NOEXCEPT"]
  369 -> 17 [style=solid label="OPERATOR"]
  369 -> 26 [style=solid label="DECLTYPE"]
  369 -> 369 [style=solid label="DELETE"]
  369 -> 370 [style=solid label="DOT"]
  369 -> 184 [style=solid label="UNICODE_8"]
  369 -> 371 [style=solid label="MULT"]
  369 -> 199 [style=solid label="DOUBLE_QUOTE"]
  369 -> 372 [style=solid label="ZERO_LX"]
  369 -> 373 [style=solid label="ZERO_HX"]
  369 -> 374 [style=solid label="REQUIRES"]
  369 -> 375 [style=solid label="NEW"]
  369 -> 376 [style=solid label="COMPL"]
  369 -> 377 [style=solid label="NOT"]
  369 -> 378 [style=solid label="PLUS_PLUS"]
  369 -> 379 [style=solid label="MINUS_MINUS"]
  369 -> 380 [style=solid label="THIS"]
  369 -> 36 [style=solid label="AUTO"]
  369 -> 381 [style=solid label="NULLPTR"]
  369 -> 382 [style=solid label="DYNAMIC_CAST"]
  369 -> 383 [style=solid label="STATIC_CAST"]
  369 -> 384 [style=solid label="REINTERPRET_CAST"]
  369 -> 385 [style=solid label="CONST_CAST"]
  369 -> 386 [style=solid label="TYPEID"]
  369 -> 37 [style=solid label="CHAR"]
  369 -> 38 [style=solid label="CHAR8_T"]
  369 -> 39 [style=solid label="CHAR16_T"]
  369 -> 40 [style=solid label="CHAR32_T"]
  369 -> 41 [style=solid label="WCHAR_T"]
  369 -> 42 [style=solid label="BOOL"]
  369 -> 43 [style=solid label="SHORT"]
  369 -> 44 [style=solid label="INT"]
  369 -> 45 [style=solid label="LONG"]
  369 -> 46 [style=solid label="SIGNED"]
  369 -> 47 [style=solid label="UNSIGNED"]
  369 -> 48 [style=solid label="FLOAT"]
  369 -> 49 [style=solid label="DOUBLE"]
  369 -> 50 [style=solid label="VOID"]
  369 -> 55 [style=solid label="TYPENAME"]
  369 -> 387 [style=solid label="SIZEOF"]
  369 -> 388 [style=solid label="ALIGNOF"]
  369 -> 389 [style=solid label="'0'"]
  369 -> 390 [style=solid label="'1'"]
  369 -> 391 [style=solid label="'2'"]
  369 -> 392 [style=solid label="'3'"]
  369 -> 393 [style=solid label="'4'"]
  369 -> 394 [style=solid label="'5'"]
  369 -> 395 [style=solid label="'6'"]
  369 -> 396 [style=solid label="'7'"]
  369 -> 397 [style=solid label="'8'"]
  369 -> 398 [style=solid label="'9'"]
  369 -> 205 [style=solid label="'u'"]
  369 -> 206 [style=solid label="'U'"]
  369 -> 207 [style=solid label="'L'"]
  369 -> 208 [style=solid label="'R'"]
  369 -> 401 [style=dashed label="await-expression"]
  369 -> 402 [style=dashed label="binary-literal"]
  369 -> 403 [style=dashed label="boolean-literal"]
  369 -> 788 [style=dashed label="cast-expression"]
  369 -> 405 [style=dashed label="character-literal"]
  369 -> 65 [style=dashed label="class-name"]
  369 -> 67 [style=dashed label="concept-name"]
  369 -> 68 [style=dashed label="conversion-function-id"]
  369 -> 409 [style=dashed label="decimal-floating-point-literal"]
  369 -> 410 [style=dashed label="decimal-literal"]
  369 -> 76 [style=dashed label="decltype-specifier"]
  369 -> 411 [style=dashed label="delete-expression"]
  369 -> 412 [style=dashed label="digit"]
  369 -> 413 [style=dashed label="digit-sequence"]
  369 -> 414 [style=dashed label="encoding-prefix"]
  369 -> 84 [style=dashed label="enum-name"]
  369 -> 417 [style=dashed label="floating-point-literal"]
  369 -> 418 [style=dashed label="fold-expression"]
  369 -> 419 [style=dashed label="fractional-constant"]
  369 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  369 -> 421 [style=dashed label="hexadecimal-literal"]
  369 -> 422 [style=dashed label="hexadecimal-prefix"]
  369 -> 423 [style=dashed label="id-expression"]
  369 -> 425 [style=dashed label="integer-literal"]
  369 -> 426 [style=dashed label="lambda-expression"]
  369 -> 427 [style=dashed label="lambda-introducer"]
  369 -> 428 [style=dashed label="literal"]
  369 -> 95 [style=dashed label="literal-operator-id"]
  369 -> 99 [style=dashed label="namespace-alias"]
  369 -> 102 [style=dashed label="namespace-name"]
  369 -> 432 [style=dashed label="nested-name-specifier"]
  369 -> 433 [style=dashed label="new-expression"]
  369 -> 434 [style=dashed label="noexcept-expression"]
  369 -> 435 [style=dashed label="nonzero-digit"]
  369 -> 436 [style=dashed label="octal-literal"]
  369 -> 108 [style=dashed label="operator-function-id"]
  369 -> 109 [style=dashed label="placeholder-type-specifier"]
  369 -> 438 [style=dashed label="pointer-literal"]
  369 -> 439 [style=dashed label="postfix-expression"]
  369 -> 440 [style=dashed label="primary-expression"]
  369 -> 112 [style=dashed label="qualified-id"]
  369 -> 442 [style=dashed label="requires-expression"]
  369 -> 114 [style=dashed label="simple-template-id"]
  369 -> 529 [style=dashed label="simple-type-specifier"]
  369 -> 445 [style=dashed label="string-literal"]
  369 -> 120 [style=dashed label="template-id"]
  369 -> 215 [style=dashed label="template-name"]
  369 -> 123 [style=dashed label="type-constraint"]
  369 -> 124 [style=dashed label="type-name"]
  369 -> 126 [style=dashed label="typedef-name"]
  369 -> 531 [style=dashed label="typename-specifier"]
  369 -> 449 [style=dashed label="unary-expression"]
  369 -> 450 [style=dashed label="unary-operator"]
  369 -> 129 [style=dashed label="unqualified-id"]
  369 -> 451 [style=dashed label="user-defined-character-literal"]
  369 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  369 -> 453 [style=dashed label="user-defined-integer-literal"]
  369 -> 454 [style=dashed label="user-defined-literal"]
  369 -> 455 [style=dashed label="user-defined-string-literal"]
  370 [label="State 370\n\l388 fractional-constant: DOT • digit-sequence\l"]
  370 -> 789 [style=solid label="'0'"]
  370 -> 790 [style=solid label="'1'"]
  370 -> 791 [style=solid label="'2'"]
  370 -> 792 [style=solid label="'3'"]
  370 -> 793 [style=solid label="'4'"]
  370 -> 794 [style=solid label="'5'"]
  370 -> 795 [style=solid label="'6'"]
  370 -> 796 [style=solid label="'7'"]
  370 -> 797 [style=solid label="'8'"]
  370 -> 798 [style=solid label="'9'"]
  370 -> 412 [style=dashed label="digit"]
  370 -> 799 [style=dashed label="digit-sequence"]
  371 [label="State 371\n\l1128 unary-operator: MULT •\l"]
  371 -> "371R1128" [style=solid]
 "371R1128" [label="R1128", fillcolor=3, shape=diamond, style=filled]
  372 [label="State 372\n\l457 hexadecimal-prefix: ZERO_LX •\l"]
  372 -> "372R457" [style=solid]
 "372R457" [label="R457", fillcolor=3, shape=diamond, style=filled]
  373 [label="State 373\n\l458 hexadecimal-prefix: ZERO_HX •\l"]
  373 -> "373R458" [style=solid]
 "373R458" [label="R458", fillcolor=3, shape=diamond, style=filled]
  374 [label="State 374\n\l930 requires-expression: REQUIRES • requirement-body\l931                    | REQUIRES • requirement-parameter-list requirement-body\l"]
  374 -> 800 [style=solid label="OPEN_PAREN"]
  374 -> 801 [style=solid label="OPEN_BRACE"]
  374 -> 802 [style=dashed label="requirement-body"]
  374 -> 803 [style=dashed label="requirement-parameter-list"]
  375 [label="State 375\n\l669 new-expression: NEW • new-type-id\l671               | NEW • new-placement new-type-id\l673               | NEW • new-type-id new-initializer\l675               | NEW • new-placement new-type-id new-initializer\l677               | NEW • OPEN_PAREN type-id CLOSE_PAREN\l679               | NEW • new-placement OPEN_PAREN type-id CLOSE_PAREN\l681               | NEW • OPEN_PAREN type-id CLOSE_PAREN new-initializer\l683               | NEW • new-placement OPEN_PAREN type-id CLOSE_PAREN new-initializer\l"]
  375 -> 162 [style=solid label="IDENTIFIER"]
  375 -> 804 [style=solid label="OPEN_PAREN"]
  375 -> 9 [style=solid label="SCOPE"]
  375 -> 12 [style=solid label="CLASS"]
  375 -> 13 [style=solid label="STRUCT"]
  375 -> 14 [style=solid label="UNION"]
  375 -> 18 [style=solid label="CONST"]
  375 -> 19 [style=solid label="VOLATILE"]
  375 -> 26 [style=solid label="DECLTYPE"]
  375 -> 135 [style=solid label="ENUM"]
  375 -> 36 [style=solid label="AUTO"]
  375 -> 37 [style=solid label="CHAR"]
  375 -> 38 [style=solid label="CHAR8_T"]
  375 -> 39 [style=solid label="CHAR16_T"]
  375 -> 40 [style=solid label="CHAR32_T"]
  375 -> 41 [style=solid label="WCHAR_T"]
  375 -> 42 [style=solid label="BOOL"]
  375 -> 43 [style=solid label="SHORT"]
  375 -> 44 [style=solid label="INT"]
  375 -> 45 [style=solid label="LONG"]
  375 -> 46 [style=solid label="SIGNED"]
  375 -> 47 [style=solid label="UNSIGNED"]
  375 -> 48 [style=solid label="FLOAT"]
  375 -> 49 [style=solid label="DOUBLE"]
  375 -> 50 [style=solid label="VOID"]
  375 -> 55 [style=solid label="TYPENAME"]
  375 -> 209 [style=dashed label="class-key"]
  375 -> 65 [style=dashed label="class-name"]
  375 -> 67 [style=dashed label="concept-name"]
  375 -> 69 [style=dashed label="cv-qualifier"]
  375 -> 76 [style=dashed label="decltype-specifier"]
  375 -> 79 [style=dashed label="elaborated-enum-specifier"]
  375 -> 80 [style=dashed label="elaborated-type-specifier"]
  375 -> 84 [style=dashed label="enum-name"]
  375 -> 99 [style=dashed label="namespace-alias"]
  375 -> 102 [style=dashed label="namespace-name"]
  375 -> 212 [style=dashed label="nested-name-specifier"]
  375 -> 805 [style=dashed label="new-placement"]
  375 -> 806 [style=dashed label="new-type-id"]
  375 -> 109 [style=dashed label="placeholder-type-specifier"]
  375 -> 141 [style=dashed label="simple-template-id"]
  375 -> 115 [style=dashed label="simple-type-specifier"]
  375 -> 215 [style=dashed label="template-name"]
  375 -> 123 [style=dashed label="type-constraint"]
  375 -> 124 [style=dashed label="type-name"]
  375 -> 216 [style=dashed label="type-specifier"]
  375 -> 807 [style=dashed label="type-specifier-seq"]
  375 -> 126 [style=dashed label="typedef-name"]
  375 -> 127 [style=dashed label="typename-specifier"]
  376 [label="State 376\n\l1133 unary-operator: COMPL •\l1144 unqualified-id: COMPL • type-name\l1145               | COMPL • decltype-specifier\l"]
  376 -> 249 [style=solid label="IDENTIFIER"]
  376 -> 134 [style=solid label="DECLTYPE"]
  376 -> 65 [style=dashed label="class-name"]
  376 -> 250 [style=dashed label="decltype-specifier"]
  376 -> 84 [style=dashed label="enum-name"]
  376 -> 141 [style=dashed label="simple-template-id"]
  376 -> 142 [style=dashed label="template-name"]
  376 -> 251 [style=dashed label="type-name"]
  376 -> 126 [style=dashed label="typedef-name"]
  376 -> "376R1133d" [label="[IDENTIFIER, DECLTYPE]", style=solid]
 "376R1133d" [label="R1133", fillcolor=5, shape=diamond, style=filled]
  376 -> "376R1133" [style=solid]
 "376R1133" [label="R1133", fillcolor=3, shape=diamond, style=filled]
  377 [label="State 377\n\l1132 unary-operator: NOT •\l"]
  377 -> "377R1132" [style=solid]
 "377R1132" [label="R1132", fillcolor=3, shape=diamond, style=filled]
  378 [label="State 378\n\l1118 unary-expression: PLUS_PLUS • cast-expression\l"]
  378 -> 356 [style=solid label="PLUS"]
  378 -> 357 [style=solid label="MINUS"]
  378 -> 2 [style=solid label="IDENTIFIER"]
  378 -> 358 [style=solid label="OPEN_PAREN"]
  378 -> 359 [style=solid label="AND"]
  378 -> 360 [style=solid label="SCOPE"]
  378 -> 361 [style=solid label="OPEN_SQUARE"]
  378 -> 362 [style=solid label="CO_AWAIT"]
  378 -> 363 [style=solid label="ZERO_LB"]
  378 -> 364 [style=solid label="ZERO_HB"]
  378 -> 365 [style=solid label="SINGLE_QUOTE"]
  378 -> 366 [style=solid label="FALSE"]
  378 -> 367 [style=solid label="TRUE"]
  378 -> 368 [style=solid label="NOEXCEPT"]
  378 -> 17 [style=solid label="OPERATOR"]
  378 -> 26 [style=solid label="DECLTYPE"]
  378 -> 369 [style=solid label="DELETE"]
  378 -> 370 [style=solid label="DOT"]
  378 -> 184 [style=solid label="UNICODE_8"]
  378 -> 371 [style=solid label="MULT"]
  378 -> 199 [style=solid label="DOUBLE_QUOTE"]
  378 -> 372 [style=solid label="ZERO_LX"]
  378 -> 373 [style=solid label="ZERO_HX"]
  378 -> 374 [style=solid label="REQUIRES"]
  378 -> 375 [style=solid label="NEW"]
  378 -> 376 [style=solid label="COMPL"]
  378 -> 377 [style=solid label="NOT"]
  378 -> 378 [style=solid label="PLUS_PLUS"]
  378 -> 379 [style=solid label="MINUS_MINUS"]
  378 -> 380 [style=solid label="THIS"]
  378 -> 36 [style=solid label="AUTO"]
  378 -> 381 [style=solid label="NULLPTR"]
  378 -> 382 [style=solid label="DYNAMIC_CAST"]
  378 -> 383 [style=solid label="STATIC_CAST"]
  378 -> 384 [style=solid label="REINTERPRET_CAST"]
  378 -> 385 [style=solid label="CONST_CAST"]
  378 -> 386 [style=solid label="TYPEID"]
  378 -> 37 [style=solid label="CHAR"]
  378 -> 38 [style=solid label="CHAR8_T"]
  378 -> 39 [style=solid label="CHAR16_T"]
  378 -> 40 [style=solid label="CHAR32_T"]
  378 -> 41 [style=solid label="WCHAR_T"]
  378 -> 42 [style=solid label="BOOL"]
  378 -> 43 [style=solid label="SHORT"]
  378 -> 44 [style=solid label="INT"]
  378 -> 45 [style=solid label="LONG"]
  378 -> 46 [style=solid label="SIGNED"]
  378 -> 47 [style=solid label="UNSIGNED"]
  378 -> 48 [style=solid label="FLOAT"]
  378 -> 49 [style=solid label="DOUBLE"]
  378 -> 50 [style=solid label="VOID"]
  378 -> 55 [style=solid label="TYPENAME"]
  378 -> 387 [style=solid label="SIZEOF"]
  378 -> 388 [style=solid label="ALIGNOF"]
  378 -> 389 [style=solid label="'0'"]
  378 -> 390 [style=solid label="'1'"]
  378 -> 391 [style=solid label="'2'"]
  378 -> 392 [style=solid label="'3'"]
  378 -> 393 [style=solid label="'4'"]
  378 -> 394 [style=solid label="'5'"]
  378 -> 395 [style=solid label="'6'"]
  378 -> 396 [style=solid label="'7'"]
  378 -> 397 [style=solid label="'8'"]
  378 -> 398 [style=solid label="'9'"]
  378 -> 205 [style=solid label="'u'"]
  378 -> 206 [style=solid label="'U'"]
  378 -> 207 [style=solid label="'L'"]
  378 -> 208 [style=solid label="'R'"]
  378 -> 401 [style=dashed label="await-expression"]
  378 -> 402 [style=dashed label="binary-literal"]
  378 -> 403 [style=dashed label="boolean-literal"]
  378 -> 808 [style=dashed label="cast-expression"]
  378 -> 405 [style=dashed label="character-literal"]
  378 -> 65 [style=dashed label="class-name"]
  378 -> 67 [style=dashed label="concept-name"]
  378 -> 68 [style=dashed label="conversion-function-id"]
  378 -> 409 [style=dashed label="decimal-floating-point-literal"]
  378 -> 410 [style=dashed label="decimal-literal"]
  378 -> 76 [style=dashed label="decltype-specifier"]
  378 -> 411 [style=dashed label="delete-expression"]
  378 -> 412 [style=dashed label="digit"]
  378 -> 413 [style=dashed label="digit-sequence"]
  378 -> 414 [style=dashed label="encoding-prefix"]
  378 -> 84 [style=dashed label="enum-name"]
  378 -> 417 [style=dashed label="floating-point-literal"]
  378 -> 418 [style=dashed label="fold-expression"]
  378 -> 419 [style=dashed label="fractional-constant"]
  378 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  378 -> 421 [style=dashed label="hexadecimal-literal"]
  378 -> 422 [style=dashed label="hexadecimal-prefix"]
  378 -> 423 [style=dashed label="id-expression"]
  378 -> 425 [style=dashed label="integer-literal"]
  378 -> 426 [style=dashed label="lambda-expression"]
  378 -> 427 [style=dashed label="lambda-introducer"]
  378 -> 428 [style=dashed label="literal"]
  378 -> 95 [style=dashed label="literal-operator-id"]
  378 -> 99 [style=dashed label="namespace-alias"]
  378 -> 102 [style=dashed label="namespace-name"]
  378 -> 432 [style=dashed label="nested-name-specifier"]
  378 -> 433 [style=dashed label="new-expression"]
  378 -> 434 [style=dashed label="noexcept-expression"]
  378 -> 435 [style=dashed label="nonzero-digit"]
  378 -> 436 [style=dashed label="octal-literal"]
  378 -> 108 [style=dashed label="operator-function-id"]
  378 -> 109 [style=dashed label="placeholder-type-specifier"]
  378 -> 438 [style=dashed label="pointer-literal"]
  378 -> 439 [style=dashed label="postfix-expression"]
  378 -> 440 [style=dashed label="primary-expression"]
  378 -> 112 [style=dashed label="qualified-id"]
  378 -> 442 [style=dashed label="requires-expression"]
  378 -> 114 [style=dashed label="simple-template-id"]
  378 -> 529 [style=dashed label="simple-type-specifier"]
  378 -> 445 [style=dashed label="string-literal"]
  378 -> 120 [style=dashed label="template-id"]
  378 -> 215 [style=dashed label="template-name"]
  378 -> 123 [style=dashed label="type-constraint"]
  378 -> 124 [style=dashed label="type-name"]
  378 -> 126 [style=dashed label="typedef-name"]
  378 -> 531 [style=dashed label="typename-specifier"]
  378 -> 449 [style=dashed label="unary-expression"]
  378 -> 450 [style=dashed label="unary-operator"]
  378 -> 129 [style=dashed label="unqualified-id"]
  378 -> 451 [style=dashed label="user-defined-character-literal"]
  378 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  378 -> 453 [style=dashed label="user-defined-integer-literal"]
  378 -> 454 [style=dashed label="user-defined-literal"]
  378 -> 455 [style=dashed label="user-defined-string-literal"]
  379 [label="State 379\n\l1119 unary-expression: MINUS_MINUS • cast-expression\l"]
  379 -> 356 [style=solid label="PLUS"]
  379 -> 357 [style=solid label="MINUS"]
  379 -> 2 [style=solid label="IDENTIFIER"]
  379 -> 358 [style=solid label="OPEN_PAREN"]
  379 -> 359 [style=solid label="AND"]
  379 -> 360 [style=solid label="SCOPE"]
  379 -> 361 [style=solid label="OPEN_SQUARE"]
  379 -> 362 [style=solid label="CO_AWAIT"]
  379 -> 363 [style=solid label="ZERO_LB"]
  379 -> 364 [style=solid label="ZERO_HB"]
  379 -> 365 [style=solid label="SINGLE_QUOTE"]
  379 -> 366 [style=solid label="FALSE"]
  379 -> 367 [style=solid label="TRUE"]
  379 -> 368 [style=solid label="NOEXCEPT"]
  379 -> 17 [style=solid label="OPERATOR"]
  379 -> 26 [style=solid label="DECLTYPE"]
  379 -> 369 [style=solid label="DELETE"]
  379 -> 370 [style=solid label="DOT"]
  379 -> 184 [style=solid label="UNICODE_8"]
  379 -> 371 [style=solid label="MULT"]
  379 -> 199 [style=solid label="DOUBLE_QUOTE"]
  379 -> 372 [style=solid label="ZERO_LX"]
  379 -> 373 [style=solid label="ZERO_HX"]
  379 -> 374 [style=solid label="REQUIRES"]
  379 -> 375 [style=solid label="NEW"]
  379 -> 376 [style=solid label="COMPL"]
  379 -> 377 [style=solid label="NOT"]
  379 -> 378 [style=solid label="PLUS_PLUS"]
  379 -> 379 [style=solid label="MINUS_MINUS"]
  379 -> 380 [style=solid label="THIS"]
  379 -> 36 [style=solid label="AUTO"]
  379 -> 381 [style=solid label="NULLPTR"]
  379 -> 382 [style=solid label="DYNAMIC_CAST"]
  379 -> 383 [style=solid label="STATIC_CAST"]
  379 -> 384 [style=solid label="REINTERPRET_CAST"]
  379 -> 385 [style=solid label="CONST_CAST"]
  379 -> 386 [style=solid label="TYPEID"]
  379 -> 37 [style=solid label="CHAR"]
  379 -> 38 [style=solid label="CHAR8_T"]
  379 -> 39 [style=solid label="CHAR16_T"]
  379 -> 40 [style=solid label="CHAR32_T"]
  379 -> 41 [style=solid label="WCHAR_T"]
  379 -> 42 [style=solid label="BOOL"]
  379 -> 43 [style=solid label="SHORT"]
  379 -> 44 [style=solid label="INT"]
  379 -> 45 [style=solid label="LONG"]
  379 -> 46 [style=solid label="SIGNED"]
  379 -> 47 [style=solid label="UNSIGNED"]
  379 -> 48 [style=solid label="FLOAT"]
  379 -> 49 [style=solid label="DOUBLE"]
  379 -> 50 [style=solid label="VOID"]
  379 -> 55 [style=solid label="TYPENAME"]
  379 -> 387 [style=solid label="SIZEOF"]
  379 -> 388 [style=solid label="ALIGNOF"]
  379 -> 389 [style=solid label="'0'"]
  379 -> 390 [style=solid label="'1'"]
  379 -> 391 [style=solid label="'2'"]
  379 -> 392 [style=solid label="'3'"]
  379 -> 393 [style=solid label="'4'"]
  379 -> 394 [style=solid label="'5'"]
  379 -> 395 [style=solid label="'6'"]
  379 -> 396 [style=solid label="'7'"]
  379 -> 397 [style=solid label="'8'"]
  379 -> 398 [style=solid label="'9'"]
  379 -> 205 [style=solid label="'u'"]
  379 -> 206 [style=solid label="'U'"]
  379 -> 207 [style=solid label="'L'"]
  379 -> 208 [style=solid label="'R'"]
  379 -> 401 [style=dashed label="await-expression"]
  379 -> 402 [style=dashed label="binary-literal"]
  379 -> 403 [style=dashed label="boolean-literal"]
  379 -> 809 [style=dashed label="cast-expression"]
  379 -> 405 [style=dashed label="character-literal"]
  379 -> 65 [style=dashed label="class-name"]
  379 -> 67 [style=dashed label="concept-name"]
  379 -> 68 [style=dashed label="conversion-function-id"]
  379 -> 409 [style=dashed label="decimal-floating-point-literal"]
  379 -> 410 [style=dashed label="decimal-literal"]
  379 -> 76 [style=dashed label="decltype-specifier"]
  379 -> 411 [style=dashed label="delete-expression"]
  379 -> 412 [style=dashed label="digit"]
  379 -> 413 [style=dashed label="digit-sequence"]
  379 -> 414 [style=dashed label="encoding-prefix"]
  379 -> 84 [style=dashed label="enum-name"]
  379 -> 417 [style=dashed label="floating-point-literal"]
  379 -> 418 [style=dashed label="fold-expression"]
  379 -> 419 [style=dashed label="fractional-constant"]
  379 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  379 -> 421 [style=dashed label="hexadecimal-literal"]
  379 -> 422 [style=dashed label="hexadecimal-prefix"]
  379 -> 423 [style=dashed label="id-expression"]
  379 -> 425 [style=dashed label="integer-literal"]
  379 -> 426 [style=dashed label="lambda-expression"]
  379 -> 427 [style=dashed label="lambda-introducer"]
  379 -> 428 [style=dashed label="literal"]
  379 -> 95 [style=dashed label="literal-operator-id"]
  379 -> 99 [style=dashed label="namespace-alias"]
  379 -> 102 [style=dashed label="namespace-name"]
  379 -> 432 [style=dashed label="nested-name-specifier"]
  379 -> 433 [style=dashed label="new-expression"]
  379 -> 434 [style=dashed label="noexcept-expression"]
  379 -> 435 [style=dashed label="nonzero-digit"]
  379 -> 436 [style=dashed label="octal-literal"]
  379 -> 108 [style=dashed label="operator-function-id"]
  379 -> 109 [style=dashed label="placeholder-type-specifier"]
  379 -> 438 [style=dashed label="pointer-literal"]
  379 -> 439 [style=dashed label="postfix-expression"]
  379 -> 440 [style=dashed label="primary-expression"]
  379 -> 112 [style=dashed label="qualified-id"]
  379 -> 442 [style=dashed label="requires-expression"]
  379 -> 114 [style=dashed label="simple-template-id"]
  379 -> 529 [style=dashed label="simple-type-specifier"]
  379 -> 445 [style=dashed label="string-literal"]
  379 -> 120 [style=dashed label="template-id"]
  379 -> 215 [style=dashed label="template-name"]
  379 -> 123 [style=dashed label="type-constraint"]
  379 -> 124 [style=dashed label="type-name"]
  379 -> 126 [style=dashed label="typedef-name"]
  379 -> 531 [style=dashed label="typename-specifier"]
  379 -> 449 [style=dashed label="unary-expression"]
  379 -> 450 [style=dashed label="unary-operator"]
  379 -> 129 [style=dashed label="unqualified-id"]
  379 -> 451 [style=dashed label="user-defined-character-literal"]
  379 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  379 -> 453 [style=dashed label="user-defined-integer-literal"]
  379 -> 454 [style=dashed label="user-defined-literal"]
  379 -> 455 [style=dashed label="user-defined-string-literal"]
  380 [label="State 380\n\l880 primary-expression: THIS •\l"]
  380 -> "380R880" [style=solid]
 "380R880" [label="R880", fillcolor=3, shape=diamond, style=filled]
  381 [label="State 381\n\l855 pointer-literal: NULLPTR •\l"]
  381 -> "381R855" [style=solid]
 "381R855" [label="R855", fillcolor=3, shape=diamond, style=filled]
  382 [label="State 382\n\l873 postfix-expression: DYNAMIC_CAST • LESS type-id GREATER OPEN_PAREN expression CLOSE_PAREN\l"]
  382 -> 810 [style=solid label="LESS"]
  383 [label="State 383\n\l874 postfix-expression: STATIC_CAST • LESS type-id GREATER OPEN_PAREN expression CLOSE_PAREN\l"]
  383 -> 811 [style=solid label="LESS"]
  384 [label="State 384\n\l875 postfix-expression: REINTERPRET_CAST • LESS type-id GREATER OPEN_PAREN expression CLOSE_PAREN\l"]
  384 -> 812 [style=solid label="LESS"]
  385 [label="State 385\n\l876 postfix-expression: CONST_CAST • LESS type-id GREATER OPEN_PAREN expression CLOSE_PAREN\l"]
  385 -> 813 [style=solid label="LESS"]
  386 [label="State 386\n\l877 postfix-expression: TYPEID • OPEN_PAREN expression CLOSE_PAREN\l878                   | TYPEID • OPEN_PAREN type-id CLOSE_PAREN\l"]
  386 -> 814 [style=solid label="OPEN_PAREN"]
  387 [label="State 387\n\l1121 unary-expression: SIZEOF • unary-expression\l1122                 | SIZEOF • OPEN_PAREN type-id CLOSE_PAREN\l1123                 | SIZEOF • ELLIPSIS OPEN_PAREN IDENTIFIER CLOSE_PAREN\l"]
  387 -> 356 [style=solid label="PLUS"]
  387 -> 357 [style=solid label="MINUS"]
  387 -> 2 [style=solid label="IDENTIFIER"]
  387 -> 815 [style=solid label="OPEN_PAREN"]
  387 -> 816 [style=solid label="ELLIPSIS"]
  387 -> 359 [style=solid label="AND"]
  387 -> 360 [style=solid label="SCOPE"]
  387 -> 361 [style=solid label="OPEN_SQUARE"]
  387 -> 362 [style=solid label="CO_AWAIT"]
  387 -> 363 [style=solid label="ZERO_LB"]
  387 -> 364 [style=solid label="ZERO_HB"]
  387 -> 365 [style=solid label="SINGLE_QUOTE"]
  387 -> 366 [style=solid label="FALSE"]
  387 -> 367 [style=solid label="TRUE"]
  387 -> 368 [style=solid label="NOEXCEPT"]
  387 -> 17 [style=solid label="OPERATOR"]
  387 -> 26 [style=solid label="DECLTYPE"]
  387 -> 369 [style=solid label="DELETE"]
  387 -> 370 [style=solid label="DOT"]
  387 -> 184 [style=solid label="UNICODE_8"]
  387 -> 371 [style=solid label="MULT"]
  387 -> 199 [style=solid label="DOUBLE_QUOTE"]
  387 -> 372 [style=solid label="ZERO_LX"]
  387 -> 373 [style=solid label="ZERO_HX"]
  387 -> 374 [style=solid label="REQUIRES"]
  387 -> 375 [style=solid label="NEW"]
  387 -> 376 [style=solid label="COMPL"]
  387 -> 377 [style=solid label="NOT"]
  387 -> 378 [style=solid label="PLUS_PLUS"]
  387 -> 379 [style=solid label="MINUS_MINUS"]
  387 -> 380 [style=solid label="THIS"]
  387 -> 36 [style=solid label="AUTO"]
  387 -> 381 [style=solid label="NULLPTR"]
  387 -> 382 [style=solid label="DYNAMIC_CAST"]
  387 -> 383 [style=solid label="STATIC_CAST"]
  387 -> 384 [style=solid label="REINTERPRET_CAST"]
  387 -> 385 [style=solid label="CONST_CAST"]
  387 -> 386 [style=solid label="TYPEID"]
  387 -> 37 [style=solid label="CHAR"]
  387 -> 38 [style=solid label="CHAR8_T"]
  387 -> 39 [style=solid label="CHAR16_T"]
  387 -> 40 [style=solid label="CHAR32_T"]
  387 -> 41 [style=solid label="WCHAR_T"]
  387 -> 42 [style=solid label="BOOL"]
  387 -> 43 [style=solid label="SHORT"]
  387 -> 44 [style=solid label="INT"]
  387 -> 45 [style=solid label="LONG"]
  387 -> 46 [style=solid label="SIGNED"]
  387 -> 47 [style=solid label="UNSIGNED"]
  387 -> 48 [style=solid label="FLOAT"]
  387 -> 49 [style=solid label="DOUBLE"]
  387 -> 50 [style=solid label="VOID"]
  387 -> 55 [style=solid label="TYPENAME"]
  387 -> 387 [style=solid label="SIZEOF"]
  387 -> 388 [style=solid label="ALIGNOF"]
  387 -> 389 [style=solid label="'0'"]
  387 -> 390 [style=solid label="'1'"]
  387 -> 391 [style=solid label="'2'"]
  387 -> 392 [style=solid label="'3'"]
  387 -> 393 [style=solid label="'4'"]
  387 -> 394 [style=solid label="'5'"]
  387 -> 395 [style=solid label="'6'"]
  387 -> 396 [style=solid label="'7'"]
  387 -> 397 [style=solid label="'8'"]
  387 -> 398 [style=solid label="'9'"]
  387 -> 205 [style=solid label="'u'"]
  387 -> 206 [style=solid label="'U'"]
  387 -> 207 [style=solid label="'L'"]
  387 -> 208 [style=solid label="'R'"]
  387 -> 401 [style=dashed label="await-expression"]
  387 -> 402 [style=dashed label="binary-literal"]
  387 -> 403 [style=dashed label="boolean-literal"]
  387 -> 405 [style=dashed label="character-literal"]
  387 -> 65 [style=dashed label="class-name"]
  387 -> 67 [style=dashed label="concept-name"]
  387 -> 68 [style=dashed label="conversion-function-id"]
  387 -> 409 [style=dashed label="decimal-floating-point-literal"]
  387 -> 410 [style=dashed label="decimal-literal"]
  387 -> 76 [style=dashed label="decltype-specifier"]
  387 -> 411 [style=dashed label="delete-expression"]
  387 -> 412 [style=dashed label="digit"]
  387 -> 413 [style=dashed label="digit-sequence"]
  387 -> 414 [style=dashed label="encoding-prefix"]
  387 -> 84 [style=dashed label="enum-name"]
  387 -> 417 [style=dashed label="floating-point-literal"]
  387 -> 418 [style=dashed label="fold-expression"]
  387 -> 419 [style=dashed label="fractional-constant"]
  387 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  387 -> 421 [style=dashed label="hexadecimal-literal"]
  387 -> 422 [style=dashed label="hexadecimal-prefix"]
  387 -> 423 [style=dashed label="id-expression"]
  387 -> 425 [style=dashed label="integer-literal"]
  387 -> 426 [style=dashed label="lambda-expression"]
  387 -> 427 [style=dashed label="lambda-introducer"]
  387 -> 428 [style=dashed label="literal"]
  387 -> 95 [style=dashed label="literal-operator-id"]
  387 -> 99 [style=dashed label="namespace-alias"]
  387 -> 102 [style=dashed label="namespace-name"]
  387 -> 432 [style=dashed label="nested-name-specifier"]
  387 -> 433 [style=dashed label="new-expression"]
  387 -> 434 [style=dashed label="noexcept-expression"]
  387 -> 435 [style=dashed label="nonzero-digit"]
  387 -> 436 [style=dashed label="octal-literal"]
  387 -> 108 [style=dashed label="operator-function-id"]
  387 -> 109 [style=dashed label="placeholder-type-specifier"]
  387 -> 438 [style=dashed label="pointer-literal"]
  387 -> 439 [style=dashed label="postfix-expression"]
  387 -> 440 [style=dashed label="primary-expression"]
  387 -> 112 [style=dashed label="qualified-id"]
  387 -> 442 [style=dashed label="requires-expression"]
  387 -> 114 [style=dashed label="simple-template-id"]
  387 -> 529 [style=dashed label="simple-type-specifier"]
  387 -> 445 [style=dashed label="string-literal"]
  387 -> 120 [style=dashed label="template-id"]
  387 -> 215 [style=dashed label="template-name"]
  387 -> 123 [style=dashed label="type-constraint"]
  387 -> 124 [style=dashed label="type-name"]
  387 -> 126 [style=dashed label="typedef-name"]
  387 -> 531 [style=dashed label="typename-specifier"]
  387 -> 817 [style=dashed label="unary-expression"]
  387 -> 450 [style=dashed label="unary-operator"]
  387 -> 129 [style=dashed label="unqualified-id"]
  387 -> 451 [style=dashed label="user-defined-character-literal"]
  387 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  387 -> 453 [style=dashed label="user-defined-integer-literal"]
  387 -> 454 [style=dashed label="user-defined-literal"]
  387 -> 455 [style=dashed label="user-defined-string-literal"]
  388 [label="State 388\n\l1124 unary-expression: ALIGNOF • OPEN_PAREN type-id CLOSE_PAREN\l"]
  388 -> 818 [style=solid label="OPEN_PAREN"]
  389 [label="State 389\n\l249 digit: '0' •\l748 octal-literal: '0' •\l"]
  389 -> "389R249" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "389R249" [label="R249", fillcolor=3, shape=diamond, style=filled]
  389 -> "389R748d" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7']", style=solid]
 "389R748d" [label="R748", fillcolor=5, shape=diamond, style=filled]
  389 -> "389R748" [style=solid]
 "389R748" [label="R748", fillcolor=3, shape=diamond, style=filled]
  390 [label="State 390\n\l250 digit: '1' •\l695 nonzero-digit: '1' •\l"]
  390 -> "390R250" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "390R250" [label="R250", fillcolor=3, shape=diamond, style=filled]
  390 -> "390R695d" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "390R695d" [label="R695", fillcolor=5, shape=diamond, style=filled]
  390 -> "390R695" [style=solid]
 "390R695" [label="R695", fillcolor=3, shape=diamond, style=filled]
  391 [label="State 391\n\l251 digit: '2' •\l696 nonzero-digit: '2' •\l"]
  391 -> "391R251" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "391R251" [label="R251", fillcolor=3, shape=diamond, style=filled]
  391 -> "391R696d" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "391R696d" [label="R696", fillcolor=5, shape=diamond, style=filled]
  391 -> "391R696" [style=solid]
 "391R696" [label="R696", fillcolor=3, shape=diamond, style=filled]
  392 [label="State 392\n\l252 digit: '3' •\l697 nonzero-digit: '3' •\l"]
  392 -> "392R252" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "392R252" [label="R252", fillcolor=3, shape=diamond, style=filled]
  392 -> "392R697d" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "392R697d" [label="R697", fillcolor=5, shape=diamond, style=filled]
  392 -> "392R697" [style=solid]
 "392R697" [label="R697", fillcolor=3, shape=diamond, style=filled]
  393 [label="State 393\n\l253 digit: '4' •\l698 nonzero-digit: '4' •\l"]
  393 -> "393R253" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "393R253" [label="R253", fillcolor=3, shape=diamond, style=filled]
  393 -> "393R698d" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "393R698d" [label="R698", fillcolor=5, shape=diamond, style=filled]
  393 -> "393R698" [style=solid]
 "393R698" [label="R698", fillcolor=3, shape=diamond, style=filled]
  394 [label="State 394\n\l254 digit: '5' •\l699 nonzero-digit: '5' •\l"]
  394 -> "394R254" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "394R254" [label="R254", fillcolor=3, shape=diamond, style=filled]
  394 -> "394R699d" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "394R699d" [label="R699", fillcolor=5, shape=diamond, style=filled]
  394 -> "394R699" [style=solid]
 "394R699" [label="R699", fillcolor=3, shape=diamond, style=filled]
  395 [label="State 395\n\l255 digit: '6' •\l700 nonzero-digit: '6' •\l"]
  395 -> "395R255" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "395R255" [label="R255", fillcolor=3, shape=diamond, style=filled]
  395 -> "395R700d" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "395R700d" [label="R700", fillcolor=5, shape=diamond, style=filled]
  395 -> "395R700" [style=solid]
 "395R700" [label="R700", fillcolor=3, shape=diamond, style=filled]
  396 [label="State 396\n\l256 digit: '7' •\l701 nonzero-digit: '7' •\l"]
  396 -> "396R256" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "396R256" [label="R256", fillcolor=3, shape=diamond, style=filled]
  396 -> "396R701d" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "396R701d" [label="R701", fillcolor=5, shape=diamond, style=filled]
  396 -> "396R701" [style=solid]
 "396R701" [label="R701", fillcolor=3, shape=diamond, style=filled]
  397 [label="State 397\n\l257 digit: '8' •\l702 nonzero-digit: '8' •\l"]
  397 -> "397R257" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "397R257" [label="R257", fillcolor=3, shape=diamond, style=filled]
  397 -> "397R702d" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "397R702d" [label="R702", fillcolor=5, shape=diamond, style=filled]
  397 -> "397R702" [style=solid]
 "397R702" [label="R702", fillcolor=3, shape=diamond, style=filled]
  398 [label="State 398\n\l258 digit: '9' •\l703 nonzero-digit: '9' •\l"]
  398 -> "398R258" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "398R258" [label="R258", fillcolor=3, shape=diamond, style=filled]
  398 -> "398R703d" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "398R703d" [label="R703", fillcolor=5, shape=diamond, style=filled]
  398 -> "398R703" [style=solid]
 "398R703" [label="R703", fillcolor=3, shape=diamond, style=filled]
  399 [label="State 399\n\l 11 additive-expression: additive-expression • PLUS multiplicative-expression\l 12                    | additive-expression • MINUS multiplicative-expression\l952 shift-expression: additive-expression •\l"]
  399 -> 819 [style=solid label="PLUS"]
  399 -> 820 [style=solid label="MINUS"]
  399 -> "399R952" [style=solid]
 "399R952" [label="R952", fillcolor=3, shape=diamond, style=filled]
  400 [label="State 400\n\l 20 and-expression: and-expression • AND equality-expression\l317 exclusive-or-expression: and-expression •\l"]
  400 -> 821 [style=solid label="AND"]
  400 -> "400R317" [style=solid]
 "400R317" [label="R317", fillcolor=3, shape=diamond, style=filled]
  401 [label="State 401\n\l1120 unary-expression: await-expression •\l"]
  401 -> "401R1120" [style=solid]
 "401R1120" [label="R1120", fillcolor=3, shape=diamond, style=filled]
  402 [label="State 402\n\l 93 binary-literal: binary-literal • binary-digit\l 94               | binary-literal • SINGLE_QUOTE binary-digit\l485 integer-literal: binary-literal •\l486                | binary-literal • integer-suffix\l1158 user-defined-integer-literal: binary-literal • ud-suffix\l"]
  402 -> 822 [style=solid label="IDENTIFIER"]
  402 -> 823 [style=solid label="SINGLE_QUOTE"]
  402 -> 824 [style=solid label="LONG_LONG_L"]
  402 -> 825 [style=solid label="LONG_LONG_H"]
  402 -> 776 [style=solid label="'0'"]
  402 -> 777 [style=solid label="'1'"]
  402 -> 826 [style=solid label="'u'"]
  402 -> 827 [style=solid label="'U'"]
  402 -> 828 [style=solid label="'L'"]
  402 -> 829 [style=solid label="'l'"]
  402 -> 830 [style=solid label="'z'"]
  402 -> 831 [style=solid label="'Z'"]
  402 -> 832 [style=dashed label="binary-digit"]
  402 -> 833 [style=dashed label="integer-suffix"]
  402 -> 834 [style=dashed label="long-long-suffix"]
  402 -> 835 [style=dashed label="long-suffix"]
  402 -> 836 [style=dashed label="size-suffix"]
  402 -> 837 [style=dashed label="ud-suffix"]
  402 -> 838 [style=dashed label="unsigned-suffix"]
  402 -> "402R485d" [label="[IDENTIFIER]", style=solid]
 "402R485d" [label="R485", fillcolor=5, shape=diamond, style=filled]
  402 -> "402R485" [style=solid]
 "402R485" [label="R485", fillcolor=3, shape=diamond, style=filled]
  403 [label="State 403\n\l558 literal: boolean-literal •\l"]
  403 -> "403R558" [style=solid]
 "403R558" [label="R558", fillcolor=3, shape=diamond, style=filled]
  404 [label="State 404\n\l852 pm-expression: cast-expression •\l"]
  404 -> "404R852" [style=solid]
 "404R852" [label="R852", fillcolor=3, shape=diamond, style=filled]
  405 [label="State 405\n\l555 literal: character-literal •\l1149 user-defined-character-literal: character-literal • ud-suffix\l"]
  405 -> 822 [style=solid label="IDENTIFIER"]
  405 -> 839 [style=dashed label="ud-suffix"]
  405 -> "405R555d" [label="[IDENTIFIER]", style=solid]
 "405R555d" [label="R555", fillcolor=5, shape=diamond, style=filled]
  405 -> "405R555" [style=solid]
 "405R555" [label="R555", fillcolor=3, shape=diamond, style=filled]
  406 [label="State 406\n\l155 compare-expression: compare-expression • SPACESHIP shift-expression\l916 relational-expression: compare-expression •\l"]
  406 -> 840 [style=solid label="SPACESHIP"]
  406 -> "406R916" [style=solid]
 "406R916" [label="R916", fillcolor=3, shape=diamond, style=filled]
  407 [label="State 407\n\l171 constant-expression: conditional-expression •\l"]
  407 -> "407R171" [style=solid]
 "407R171" [label="R171", fillcolor=3, shape=diamond, style=filled]
  408 [label="State 408\n\l 17 alignment-specifier: ALIGNAS OPEN_PAREN constant-expression • CLOSE_PAREN\l 18                    | ALIGNAS OPEN_PAREN constant-expression • ELLIPSIS CLOSE_PAREN\l"]
  408 -> 841 [style=solid label="CLOSE_PAREN"]
  408 -> 842 [style=solid label="ELLIPSIS"]
  409 [label="State 409\n\l339 floating-point-literal: decimal-floating-point-literal •\l"]
  409 -> "409R339" [style=solid]
 "409R339" [label="R339", fillcolor=3, shape=diamond, style=filled]
  410 [label="State 410\n\l196 decimal-literal: decimal-literal • digit\l197                | decimal-literal • SINGLE_QUOTE digit\l489 integer-literal: decimal-literal •\l490                | decimal-literal • integer-suffix\l1155 user-defined-integer-literal: decimal-literal • ud-suffix\l"]
  410 -> 822 [style=solid label="IDENTIFIER"]
  410 -> 843 [style=solid label="SINGLE_QUOTE"]
  410 -> 824 [style=solid label="LONG_LONG_L"]
  410 -> 825 [style=solid label="LONG_LONG_H"]
  410 -> 789 [style=solid label="'0'"]
  410 -> 790 [style=solid label="'1'"]
  410 -> 791 [style=solid label="'2'"]
  410 -> 792 [style=solid label="'3'"]
  410 -> 793 [style=solid label="'4'"]
  410 -> 794 [style=solid label="'5'"]
  410 -> 795 [style=solid label="'6'"]
  410 -> 796 [style=solid label="'7'"]
  410 -> 797 [style=solid label="'8'"]
  410 -> 798 [style=solid label="'9'"]
  410 -> 826 [style=solid label="'u'"]
  410 -> 827 [style=solid label="'U'"]
  410 -> 828 [style=solid label="'L'"]
  410 -> 829 [style=solid label="'l'"]
  410 -> 830 [style=solid label="'z'"]
  410 -> 831 [style=solid label="'Z'"]
  410 -> 844 [style=dashed label="digit"]
  410 -> 845 [style=dashed label="integer-suffix"]
  410 -> 834 [style=dashed label="long-long-suffix"]
  410 -> 835 [style=dashed label="long-suffix"]
  410 -> 836 [style=dashed label="size-suffix"]
  410 -> 846 [style=dashed label="ud-suffix"]
  410 -> 838 [style=dashed label="unsigned-suffix"]
  410 -> "410R489d" [label="[IDENTIFIER]", style=solid]
 "410R489d" [label="R489", fillcolor=5, shape=diamond, style=filled]
  410 -> "410R489" [style=solid]
 "410R489" [label="R489", fillcolor=3, shape=diamond, style=filled]
  411 [label="State 411\n\l1127 unary-expression: delete-expression •\l"]
  411 -> "411R1127" [style=solid]
 "411R1127" [label="R1127", fillcolor=3, shape=diamond, style=filled]
  412 [label="State 412\n\l259 digit-sequence: digit •\l"]
  412 -> "412R259" [style=solid]
 "412R259" [label="R259", fillcolor=3, shape=diamond, style=filled]
  413 [label="State 413\n\l193 decimal-floating-point-literal: digit-sequence • exponent-part\l194                               | digit-sequence • exponent-part floating-point-suffix\l260 digit-sequence: digit-sequence • digit\l261               | digit-sequence • SINGLE_QUOTE digit\l387 fractional-constant: digit-sequence • DOT digit-sequence\l389                    | digit-sequence • DOT\l1152 user-defined-floating-point-literal: digit-sequence • exponent-part ud-suffix\l"]
  413 -> 847 [style=solid label="SINGLE_QUOTE"]
  413 -> 848 [style=solid label="DOT"]
  413 -> 789 [style=solid label="'0'"]
  413 -> 790 [style=solid label="'1'"]
  413 -> 791 [style=solid label="'2'"]
  413 -> 792 [style=solid label="'3'"]
  413 -> 793 [style=solid label="'4'"]
  413 -> 794 [style=solid label="'5'"]
  413 -> 795 [style=solid label="'6'"]
  413 -> 796 [style=solid label="'7'"]
  413 -> 797 [style=solid label="'8'"]
  413 -> 798 [style=solid label="'9'"]
  413 -> 849 [style=solid label="'e'"]
  413 -> 850 [style=solid label="'E'"]
  413 -> 851 [style=dashed label="digit"]
  413 -> 852 [style=dashed label="exponent-part"]
  414 [label="State 414\n\l126 character-literal: encoding-prefix • SINGLE_QUOTE c-char-sequence SINGLE_QUOTE\l1030 string-literal: encoding-prefix • DOUBLE_QUOTE DOUBLE_QUOTE\l1032               | encoding-prefix • DOUBLE_QUOTE s-char-sequence DOUBLE_QUOTE\l1034               | encoding-prefix • 'R' raw-string\l"]
  414 -> 853 [style=solid label="SINGLE_QUOTE"]
  414 -> 506 [style=solid label="DOUBLE_QUOTE"]
  414 -> 507 [style=solid label="'R'"]
  415 [label="State 415\n\l 19 and-expression: equality-expression •\l305 equality-expression: equality-expression • EQ_EQ relational-expression\l306                    | equality-expression • NOT_EQ relational-expression\l"]
  415 -> 854 [style=solid label="EQ_EQ"]
  415 -> 855 [style=solid label="NOT_EQ"]
  415 -> "415R19" [style=solid]
 "415R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  416 [label="State 416\n\l318 exclusive-or-expression: exclusive-or-expression • XOR and-expression\l463 inclusive-or-expression: exclusive-or-expression •\l"]
  416 -> 856 [style=solid label="XOR"]
  416 -> "416R463" [style=solid]
 "416R463" [label="R463", fillcolor=3, shape=diamond, style=filled]
  417 [label="State 417\n\l556 literal: floating-point-literal •\l"]
  417 -> "417R556" [style=solid]
 "417R556" [label="R556", fillcolor=3, shape=diamond, style=filled]
  418 [label="State 418\n\l884 primary-expression: fold-expression •\l"]
  418 -> "418R884" [style=solid]
 "418R884" [label="R884", fillcolor=3, shape=diamond, style=filled]
  419 [label="State 419\n\l189 decimal-floating-point-literal: fractional-constant •\l190                               | fractional-constant • exponent-part\l191                               | fractional-constant • floating-point-suffix\l192                               | fractional-constant • exponent-part floating-point-suffix\l1150 user-defined-floating-point-literal: fractional-constant • ud-suffix\l1151                                    | fractional-constant • exponent-part ud-suffix\l"]
  419 -> 822 [style=solid label="IDENTIFIER"]
  419 -> 857 [style=solid label="'L'"]
  419 -> 849 [style=solid label="'e'"]
  419 -> 850 [style=solid label="'E'"]
  419 -> 858 [style=solid label="'f'"]
  419 -> 859 [style=solid label="'l'"]
  419 -> 860 [style=solid label="'F'"]
  419 -> 861 [style=dashed label="exponent-part"]
  419 -> 862 [style=dashed label="floating-point-suffix"]
  419 -> 863 [style=dashed label="ud-suffix"]
  419 -> "419R189d" [label="[IDENTIFIER]", style=solid]
 "419R189d" [label="R189", fillcolor=5, shape=diamond, style=filled]
  419 -> "419R189" [style=solid]
 "419R189" [label="R189", fillcolor=3, shape=diamond, style=filled]
  420 [label="State 420\n\l340 floating-point-literal: hexadecimal-floating-point-literal •\l"]
  420 -> "420R340" [style=solid]
 "420R340" [label="R340", fillcolor=3, shape=diamond, style=filled]
  421 [label="State 421\n\l491 integer-literal: hexadecimal-literal •\l492                | hexadecimal-literal • integer-suffix\l1157 user-defined-integer-literal: hexadecimal-literal • ud-suffix\l"]
  421 -> 822 [style=solid label="IDENTIFIER"]
  421 -> 824 [style=solid label="LONG_LONG_L"]
  421 -> 825 [style=solid label="LONG_LONG_H"]
  421 -> 826 [style=solid label="'u'"]
  421 -> 827 [style=solid label="'U'"]
  421 -> 828 [style=solid label="'L'"]
  421 -> 829 [style=solid label="'l'"]
  421 -> 830 [style=solid label="'z'"]
  421 -> 831 [style=solid label="'Z'"]
  421 -> 864 [style=dashed label="integer-suffix"]
  421 -> 834 [style=dashed label="long-long-suffix"]
  421 -> 835 [style=dashed label="long-suffix"]
  421 -> 836 [style=dashed label="size-suffix"]
  421 -> 865 [style=dashed label="ud-suffix"]
  421 -> 838 [style=dashed label="unsigned-suffix"]
  421 -> "421R491d" [label="[IDENTIFIER]", style=solid]
 "421R491d" [label="R491", fillcolor=5, shape=diamond, style=filled]
  421 -> "421R491" [style=solid]
 "421R491" [label="R491", fillcolor=3, shape=diamond, style=filled]
  422 [label="State 422\n\l449 hexadecimal-floating-point-literal: hexadecimal-prefix • hexadecimal-fractional-constant binary-exponent-part\l450                                   | hexadecimal-prefix • hexadecimal-fractional-constant binary-exponent-part floating-point-suffix\l451                                   | hexadecimal-prefix • hexadecimal-digit-sequence binary-exponent-part\l452                                   | hexadecimal-prefix • hexadecimal-digit-sequence binary-exponent-part floating-point-suffix\l456 hexadecimal-literal: hexadecimal-prefix • hexadecimal-digit-sequence\l1153 user-defined-floating-point-literal: hexadecimal-prefix • hexadecimal-fractional-constant binary-exponent-part ud-suffix\l1154                                    | hexadecimal-prefix • hexadecimal-digit-sequence binary-exponent-part ud-suffix\l"]
  422 -> 866 [style=solid label="DOT"]
  422 -> 867 [style=solid label="'0'"]
  422 -> 868 [style=solid label="'1'"]
  422 -> 869 [style=solid label="'2'"]
  422 -> 870 [style=solid label="'3'"]
  422 -> 871 [style=solid label="'4'"]
  422 -> 872 [style=solid label="'5'"]
  422 -> 873 [style=solid label="'6'"]
  422 -> 874 [style=solid label="'7'"]
  422 -> 875 [style=solid label="'8'"]
  422 -> 876 [style=solid label="'9'"]
  422 -> 877 [style=solid label="'e'"]
  422 -> 878 [style=solid label="'E'"]
  422 -> 879 [style=solid label="'f'"]
  422 -> 880 [style=solid label="'F'"]
  422 -> 881 [style=solid label="'a'"]
  422 -> 882 [style=solid label="'b'"]
  422 -> 883 [style=solid label="'c'"]
  422 -> 884 [style=solid label="'d'"]
  422 -> 885 [style=solid label="'A'"]
  422 -> 886 [style=solid label="'B'"]
  422 -> 887 [style=solid label="'C'"]
  422 -> 888 [style=solid label="'D'"]
  422 -> 889 [style=dashed label="hexadecimal-digit"]
  422 -> 890 [style=dashed label="hexadecimal-digit-sequence"]
  422 -> 891 [style=dashed label="hexadecimal-fractional-constant"]
  423 [label="State 423\n\l882 primary-expression: id-expression •\l"]
  423 -> "423R882" [style=solid]
 "423R882" [label="R882", fillcolor=3, shape=diamond, style=filled]
  424 [label="State 424\n\l464 inclusive-or-expression: inclusive-or-expression • OR exclusive-or-expression\l563 logical-and-expression: inclusive-or-expression •\l"]
  424 -> 892 [style=solid label="OR"]
  424 -> "424R563" [style=solid]
 "424R563" [label="R563", fillcolor=3, shape=diamond, style=filled]
  425 [label="State 425\n\l554 literal: integer-literal •\l"]
  425 -> "425R554" [style=solid]
 "425R554" [label="R554", fillcolor=3, shape=diamond, style=filled]
  426 [label="State 426\n\l883 primary-expression: lambda-expression •\l"]
  426 -> "426R883" [style=solid]
 "426R883" [label="R883", fillcolor=3, shape=diamond, style=filled]
  427 [label="State 427\n\l531 lambda-expression: lambda-introducer • lambda-declarator compound-statement\l532                  | lambda-introducer • LESS template-parameter-list GREATER lambda-declarator compound-statement\l533                  | lambda-introducer • LESS template-parameter-list GREATER requires-clause lambda-declarator compound-statement\l"]
  427 -> 162 [style=solid label="IDENTIFIER"]
  427 -> 4 [style=solid label="ALIGNAS"]
  427 -> 893 [style=solid label="OPEN_PAREN"]
  427 -> 9 [style=solid label="SCOPE"]
  427 -> 10 [style=solid label="OPEN_SQUARE"]
  427 -> 11 [style=solid label="VIRTUAL"]
  427 -> 12 [style=solid label="CLASS"]
  427 -> 13 [style=solid label="STRUCT"]
  427 -> 14 [style=solid label="UNION"]
  427 -> 894 [style=solid label="NOEXCEPT"]
  427 -> 18 [style=solid label="CONST"]
  427 -> 19 [style=solid label="VOLATILE"]
  427 -> 20 [style=solid label="FRIEND"]
  427 -> 21 [style=solid label="TYPEDEF"]
  427 -> 22 [style=solid label="CONSTEXPR"]
  427 -> 23 [style=solid label="CONSTEVAL"]
  427 -> 24 [style=solid label="CONSTINIT"]
  427 -> 258 [style=solid label="INLINE"]
  427 -> 26 [style=solid label="DECLTYPE"]
  427 -> 736 [style=solid label="DEREF"]
  427 -> 27 [style=solid label="ENUM"]
  427 -> 259 [style=solid label="EXTERN"]
  427 -> 895 [style=solid label="LESS"]
  427 -> 29 [style=solid label="EXPLICIT"]
  427 -> 36 [style=solid label="AUTO"]
  427 -> 37 [style=solid label="CHAR"]
  427 -> 38 [style=solid label="CHAR8_T"]
  427 -> 39 [style=solid label="CHAR16_T"]
  427 -> 40 [style=solid label="CHAR32_T"]
  427 -> 41 [style=solid label="WCHAR_T"]
  427 -> 42 [style=solid label="BOOL"]
  427 -> 43 [style=solid label="SHORT"]
  427 -> 44 [style=solid label="INT"]
  427 -> 45 [style=solid label="LONG"]
  427 -> 46 [style=solid label="SIGNED"]
  427 -> 47 [style=solid label="UNSIGNED"]
  427 -> 48 [style=solid label="FLOAT"]
  427 -> 49 [style=solid label="DOUBLE"]
  427 -> 50 [style=solid label="VOID"]
  427 -> 52 [style=solid label="STATIC"]
  427 -> 53 [style=solid label="THREAD_LOCAL"]
  427 -> 54 [style=solid label="MUTABLE"]
  427 -> 55 [style=solid label="TYPENAME"]
  427 -> 57 [style=dashed label="alignment-specifier"]
  427 -> 60 [style=dashed label="attribute-specifier"]
  427 -> 896 [style=dashed label="attribute-specifier-seq"]
  427 -> 63 [style=dashed label="class-head"]
  427 -> 64 [style=dashed label="class-key"]
  427 -> 65 [style=dashed label="class-name"]
  427 -> 66 [style=dashed label="class-specifier"]
  427 -> 67 [style=dashed label="concept-name"]
  427 -> 69 [style=dashed label="cv-qualifier"]
  427 -> 70 [style=dashed label="decl-specifier"]
  427 -> 897 [style=dashed label="decl-specifier-seq"]
  427 -> 76 [style=dashed label="decltype-specifier"]
  427 -> 78 [style=dashed label="defining-type-specifier"]
  427 -> 79 [style=dashed label="elaborated-enum-specifier"]
  427 -> 80 [style=dashed label="elaborated-type-specifier"]
  427 -> 82 [style=dashed label="enum-head"]
  427 -> 263 [style=dashed label="enum-key"]
  427 -> 84 [style=dashed label="enum-name"]
  427 -> 85 [style=dashed label="enum-specifier"]
  427 -> 264 [style=dashed label="explicit-specifier"]
  427 -> 91 [style=dashed label="function-specifier"]
  427 -> 898 [style=dashed label="lambda-declarator"]
  427 -> 899 [style=dashed label="lambda-specifiers"]
  427 -> 99 [style=dashed label="namespace-alias"]
  427 -> 102 [style=dashed label="namespace-name"]
  427 -> 212 [style=dashed label="nested-name-specifier"]
  427 -> 900 [style=dashed label="noexcept-specifier"]
  427 -> 109 [style=dashed label="placeholder-type-specifier"]
  427 -> 141 [style=dashed label="simple-template-id"]
  427 -> 115 [style=dashed label="simple-type-specifier"]
  427 -> 117 [style=dashed label="storage-class-specifier"]
  427 -> 215 [style=dashed label="template-name"]
  427 -> 901 [style=dashed label="trailing-return-type"]
  427 -> 123 [style=dashed label="type-constraint"]
  427 -> 124 [style=dashed label="type-name"]
  427 -> 125 [style=dashed label="type-specifier"]
  427 -> 126 [style=dashed label="typedef-name"]
  427 -> 127 [style=dashed label="typename-specifier"]
  428 [label="State 428\n\l879 primary-expression: literal •\l"]
  428 -> "428R879" [style=solid]
 "428R879" [label="R879", fillcolor=3, shape=diamond, style=filled]
  429 [label="State 429\n\l564 logical-and-expression: logical-and-expression • AND_AND inclusive-or-expression\l565 logical-or-expression: logical-and-expression •\l"]
  429 -> 902 [style=solid label="AND_AND"]
  429 -> "429R565" [style=solid]
 "429R565" [label="R565", fillcolor=3, shape=diamond, style=filled]
  430 [label="State 430\n\l169 conditional-expression: logical-or-expression •\l170                       | logical-or-expression • QUERY expression COLON assignment-expression\l566 logical-or-expression: logical-or-expression • OR_OR logical-and-expression\l"]
  430 -> 903 [style=solid label="QUERY"]
  430 -> 904 [style=solid label="OR_OR"]
  430 -> "430R169" [style=solid]
 "430R169" [label="R169", fillcolor=3, shape=diamond, style=filled]
  431 [label="State 431\n\l 10 additive-expression: multiplicative-expression •\l640 multiplicative-expression: multiplicative-expression • MULT pm-expression\l641                          | multiplicative-expression • DIV pm-expression\l642                          | multiplicative-expression • MOD pm-expression\l"]
  431 -> 905 [style=solid label="MULT"]
  431 -> 906 [style=solid label="DIV"]
  431 -> 907 [style=solid label="MOD"]
  431 -> "431R10" [style=solid]
 "431R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  432 [label="State 432\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l909 qualified-id: nested-name-specifier • unqualified-id\l910             | nested-name-specifier • TEMPLATE unqualified-id\l985 simple-type-specifier: nested-name-specifier • type-name\l987                      | nested-name-specifier • TEMPLATE simple-template-id\l990                      | nested-name-specifier • template-name\l1070 type-constraint: nested-name-specifier • concept-name\l1072                | nested-name-specifier • concept-name LESS GREATER\l1074                | nested-name-specifier • concept-name LESS template-argument-list GREATER\l"]
  432 -> 320 [style=solid label="IDENTIFIER"]
  432 -> 321 [style=solid label="TEMPLATE"]
  432 -> 17 [style=solid label="OPERATOR"]
  432 -> 35 [style=solid label="COMPL"]
  432 -> 65 [style=dashed label="class-name"]
  432 -> 323 [style=dashed label="concept-name"]
  432 -> 68 [style=dashed label="conversion-function-id"]
  432 -> 84 [style=dashed label="enum-name"]
  432 -> 95 [style=dashed label="literal-operator-id"]
  432 -> 108 [style=dashed label="operator-function-id"]
  432 -> 324 [style=dashed label="simple-template-id"]
  432 -> 120 [style=dashed label="template-id"]
  432 -> 325 [style=dashed label="template-name"]
  432 -> 326 [style=dashed label="type-name"]
  432 -> 126 [style=dashed label="typedef-name"]
  432 -> 327 [style=dashed label="unqualified-id"]
  433 [label="State 433\n\l1126 unary-expression: new-expression •\l"]
  433 -> "433R1126" [style=solid]
 "433R1126" [label="R1126", fillcolor=3, shape=diamond, style=filled]
  434 [label="State 434\n\l1125 unary-expression: noexcept-expression •\l"]
  434 -> "434R1125" [style=solid]
 "434R1125" [label="R1125", fillcolor=3, shape=diamond, style=filled]
  435 [label="State 435\n\l195 decimal-literal: nonzero-digit •\l"]
  435 -> "435R195" [style=solid]
 "435R195" [label="R195", fillcolor=3, shape=diamond, style=filled]
  436 [label="State 436\n\l487 integer-literal: octal-literal •\l488                | octal-literal • integer-suffix\l749 octal-literal: octal-literal • octal-digit\l750              | octal-literal • SINGLE_QUOTE octal-digit\l1156 user-defined-integer-literal: octal-literal • ud-suffix\l"]
  436 -> 822 [style=solid label="IDENTIFIER"]
  436 -> 908 [style=solid label="SINGLE_QUOTE"]
  436 -> 824 [style=solid label="LONG_LONG_L"]
  436 -> 825 [style=solid label="LONG_LONG_H"]
  436 -> 909 [style=solid label="'0'"]
  436 -> 910 [style=solid label="'1'"]
  436 -> 911 [style=solid label="'2'"]
  436 -> 912 [style=solid label="'3'"]
  436 -> 913 [style=solid label="'4'"]
  436 -> 914 [style=solid label="'5'"]
  436 -> 915 [style=solid label="'6'"]
  436 -> 916 [style=solid label="'7'"]
  436 -> 826 [style=solid label="'u'"]
  436 -> 827 [style=solid label="'U'"]
  436 -> 828 [style=solid label="'L'"]
  436 -> 829 [style=solid label="'l'"]
  436 -> 830 [style=solid label="'z'"]
  436 -> 831 [style=solid label="'Z'"]
  436 -> 917 [style=dashed label="integer-suffix"]
  436 -> 834 [style=dashed label="long-long-suffix"]
  436 -> 835 [style=dashed label="long-suffix"]
  436 -> 918 [style=dashed label="octal-digit"]
  436 -> 836 [style=dashed label="size-suffix"]
  436 -> 919 [style=dashed label="ud-suffix"]
  436 -> 838 [style=dashed label="unsigned-suffix"]
  436 -> "436R487d" [label="[IDENTIFIER]", style=solid]
 "436R487d" [label="R487", fillcolor=5, shape=diamond, style=filled]
  436 -> "436R487" [style=solid]
 "436R487" [label="R487", fillcolor=3, shape=diamond, style=filled]
  437 [label="State 437\n\l639 multiplicative-expression: pm-expression •\l853 pm-expression: pm-expression • DOT_STAR cast-expression\l854              | pm-expression • DEREF_STAR cast-expression\l"]
  437 -> 920 [style=solid label="DOT_STAR"]
  437 -> 921 [style=solid label="DEREF_STAR"]
  437 -> "437R639" [style=solid]
 "437R639" [label="R639", fillcolor=3, shape=diamond, style=filled]
  438 [label="State 438\n\l559 literal: pointer-literal •\l"]
  438 -> "438R559" [style=solid]
 "438R559" [label="R559", fillcolor=3, shape=diamond, style=filled]
  439 [label="State 439\n\l857 postfix-expression: postfix-expression • OPEN_SQUARE CLOSE_SQUARE\l858                   | postfix-expression • OPEN_SQUARE expression-list CLOSE_SQUARE\l859                   | postfix-expression • OPEN_PAREN CLOSE_PAREN\l860                   | postfix-expression • OPEN_PAREN expression-list CLOSE_PAREN\l867                   | postfix-expression • DOT id-expression\l868                   | postfix-expression • DOT TEMPLATE id-expression\l869                   | postfix-expression • DEREF id-expression\l870                   | postfix-expression • DEREF TEMPLATE id-expression\l871                   | postfix-expression • PLUS_PLUS\l872                   | postfix-expression • MINUS_MINUS\l1116 unary-expression: postfix-expression •\l"]
  439 -> 922 [style=solid label="OPEN_PAREN"]
  439 -> 923 [style=solid label="OPEN_SQUARE"]
  439 -> 924 [style=solid label="DEREF"]
  439 -> 925 [style=solid label="DOT"]
  439 -> 926 [style=solid label="PLUS_PLUS"]
  439 -> 927 [style=solid label="MINUS_MINUS"]
  439 -> "439R1116" [style=solid]
 "439R1116" [label="R1116", fillcolor=3, shape=diamond, style=filled]
  440 [label="State 440\n\l856 postfix-expression: primary-expression •\l"]
  440 -> "440R856" [style=solid]
 "440R856" [label="R856", fillcolor=3, shape=diamond, style=filled]
  441 [label="State 441\n\l304 equality-expression: relational-expression •\l917 relational-expression: relational-expression • LESS compare-expression\l918                      | relational-expression • GREATER compare-expression\l919                      | relational-expression • LESS_EQ compare-expression\l920                      | relational-expression • GREATER_EQ compare-expression\l"]
  441 -> 928 [style=solid label="LESS"]
  441 -> 929 [style=solid label="GREATER"]
  441 -> 930 [style=solid label="LESS_EQ"]
  441 -> 931 [style=solid label="GREATER_EQ"]
  441 -> "441R304d" [label="[GREATER]", style=solid]
 "441R304d" [label="R304", fillcolor=5, shape=diamond, style=filled]
  441 -> "441R304" [style=solid]
 "441R304" [label="R304", fillcolor=3, shape=diamond, style=filled]
  442 [label="State 442\n\l885 primary-expression: requires-expression •\l"]
  442 -> "442R885" [style=solid]
 "442R885" [label="R885", fillcolor=3, shape=diamond, style=filled]
  443 [label="State 443\n\l154 compare-expression: shift-expression •\l953 shift-expression: shift-expression • LSHIFT additive-expression\l954                 | shift-expression • RSHIFT additive-expression\l"]
  443 -> 932 [style=solid label="LSHIFT"]
  443 -> 933 [style=solid label="RSHIFT"]
  443 -> "443R154" [style=solid]
 "443R154" [label="R154", fillcolor=3, shape=diamond, style=filled]
  444 [label="State 444\n\l861 postfix-expression: simple-type-specifier • OPEN_PAREN CLOSE_PAREN\l862                   | simple-type-specifier • OPEN_PAREN expression-list CLOSE_PAREN\l865                   | simple-type-specifier • braced-init-list\l1103 type-specifier: simple-type-specifier •\l"]
  444 -> 934 [style=solid label="OPEN_PAREN"]
  444 -> 935 [style=solid label="OPEN_BRACE"]
  444 -> 936 [style=dashed label="braced-init-list"]
  444 -> "444R1103d" [label="[OPEN_PAREN]", style=solid]
 "444R1103d" [label="R1103", fillcolor=5, shape=diamond, style=filled]
  444 -> "444R1103" [style=solid]
 "444R1103" [label="R1103", fillcolor=3, shape=diamond, style=filled]
  445 [label="State 445\n\l557 literal: string-literal •\l1163 user-defined-string-literal: string-literal • ud-suffix\l"]
  445 -> 822 [style=solid label="IDENTIFIER"]
  445 -> 513 [style=dashed label="ud-suffix"]
  445 -> "445R557d" [label="[IDENTIFIER]", style=solid]
 "445R557d" [label="R557", fillcolor=5, shape=diamond, style=filled]
  445 -> "445R557" [style=solid]
 "445R557" [label="R557", fillcolor=3, shape=diamond, style=filled]
  446 [label="State 446\n\l 15 alignment-specifier: ALIGNAS OPEN_PAREN type-id • CLOSE_PAREN\l 16                    | ALIGNAS OPEN_PAREN type-id • ELLIPSIS CLOSE_PAREN\l"]
  446 -> 937 [style=solid label="CLOSE_PAREN"]
  446 -> 938 [style=solid label="ELLIPSIS"]
  447 [label="State 447\n\l1076 type-id: type-specifier-seq •\l1077        | type-specifier-seq • abstract-declarator\l"]
  447 -> 253 [style=solid label="IDENTIFIER"]
  447 -> 939 [style=solid label="OPEN_PAREN"]
  447 -> 940 [style=solid label="ELLIPSIS"]
  447 -> 7 [style=solid label="AND"]
  447 -> 9 [style=solid label="SCOPE"]
  447 -> 941 [style=solid label="OPEN_SQUARE"]
  447 -> 16 [style=solid label="AND_AND"]
  447 -> 134 [style=solid label="DECLTYPE"]
  447 -> 31 [style=solid label="MULT"]
  447 -> 942 [style=dashed label="abstract-declarator"]
  447 -> 943 [style=dashed label="abstract-pack-declarator"]
  447 -> 65 [style=dashed label="class-name"]
  447 -> 138 [style=dashed label="decltype-specifier"]
  447 -> 84 [style=dashed label="enum-name"]
  447 -> 99 [style=dashed label="namespace-alias"]
  447 -> 102 [style=dashed label="namespace-name"]
  447 -> 517 [style=dashed label="nested-name-specifier"]
  447 -> 944 [style=dashed label="noptr-abstract-declarator"]
  447 -> 945 [style=dashed label="noptr-abstract-pack-declarator"]
  447 -> 946 [style=dashed label="parameters-and-qualifiers"]
  447 -> 947 [style=dashed label="ptr-abstract-declarator"]
  447 -> 948 [style=dashed label="ptr-operator"]
  447 -> 141 [style=dashed label="simple-template-id"]
  447 -> 142 [style=dashed label="template-name"]
  447 -> 143 [style=dashed label="type-name"]
  447 -> 126 [style=dashed label="typedef-name"]
  447 -> "447R1076d" [label="[OPEN_PAREN, ELLIPSIS]", style=solid]
 "447R1076d" [label="R1076", fillcolor=5, shape=diamond, style=filled]
  447 -> "447R1076" [style=solid]
 "447R1076" [label="R1076", fillcolor=3, shape=diamond, style=filled]
  448 [label="State 448\n\l863 postfix-expression: typename-specifier • OPEN_PAREN CLOSE_PAREN\l864                   | typename-specifier • OPEN_PAREN expression-list CLOSE_PAREN\l866                   | typename-specifier • braced-init-list\l1105 type-specifier: typename-specifier •\l"]
  448 -> 949 [style=solid label="OPEN_PAREN"]
  448 -> 935 [style=solid label="OPEN_BRACE"]
  448 -> 950 [style=dashed label="braced-init-list"]
  448 -> "448R1105d" [label="[OPEN_PAREN]", style=solid]
 "448R1105d" [label="R1105", fillcolor=5, shape=diamond, style=filled]
  448 -> "448R1105" [style=solid]
 "448R1105" [label="R1105", fillcolor=3, shape=diamond, style=filled]
  449 [label="State 449\n\l124 cast-expression: unary-expression •\l"]
  449 -> "449R124" [style=solid]
 "449R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
  450 [label="State 450\n\l1117 unary-expression: unary-operator • cast-expression\l"]
  450 -> 356 [style=solid label="PLUS"]
  450 -> 357 [style=solid label="MINUS"]
  450 -> 2 [style=solid label="IDENTIFIER"]
  450 -> 358 [style=solid label="OPEN_PAREN"]
  450 -> 359 [style=solid label="AND"]
  450 -> 360 [style=solid label="SCOPE"]
  450 -> 361 [style=solid label="OPEN_SQUARE"]
  450 -> 362 [style=solid label="CO_AWAIT"]
  450 -> 363 [style=solid label="ZERO_LB"]
  450 -> 364 [style=solid label="ZERO_HB"]
  450 -> 365 [style=solid label="SINGLE_QUOTE"]
  450 -> 366 [style=solid label="FALSE"]
  450 -> 367 [style=solid label="TRUE"]
  450 -> 368 [style=solid label="NOEXCEPT"]
  450 -> 17 [style=solid label="OPERATOR"]
  450 -> 26 [style=solid label="DECLTYPE"]
  450 -> 369 [style=solid label="DELETE"]
  450 -> 370 [style=solid label="DOT"]
  450 -> 184 [style=solid label="UNICODE_8"]
  450 -> 371 [style=solid label="MULT"]
  450 -> 199 [style=solid label="DOUBLE_QUOTE"]
  450 -> 372 [style=solid label="ZERO_LX"]
  450 -> 373 [style=solid label="ZERO_HX"]
  450 -> 374 [style=solid label="REQUIRES"]
  450 -> 375 [style=solid label="NEW"]
  450 -> 376 [style=solid label="COMPL"]
  450 -> 377 [style=solid label="NOT"]
  450 -> 378 [style=solid label="PLUS_PLUS"]
  450 -> 379 [style=solid label="MINUS_MINUS"]
  450 -> 380 [style=solid label="THIS"]
  450 -> 36 [style=solid label="AUTO"]
  450 -> 381 [style=solid label="NULLPTR"]
  450 -> 382 [style=solid label="DYNAMIC_CAST"]
  450 -> 383 [style=solid label="STATIC_CAST"]
  450 -> 384 [style=solid label="REINTERPRET_CAST"]
  450 -> 385 [style=solid label="CONST_CAST"]
  450 -> 386 [style=solid label="TYPEID"]
  450 -> 37 [style=solid label="CHAR"]
  450 -> 38 [style=solid label="CHAR8_T"]
  450 -> 39 [style=solid label="CHAR16_T"]
  450 -> 40 [style=solid label="CHAR32_T"]
  450 -> 41 [style=solid label="WCHAR_T"]
  450 -> 42 [style=solid label="BOOL"]
  450 -> 43 [style=solid label="SHORT"]
  450 -> 44 [style=solid label="INT"]
  450 -> 45 [style=solid label="LONG"]
  450 -> 46 [style=solid label="SIGNED"]
  450 -> 47 [style=solid label="UNSIGNED"]
  450 -> 48 [style=solid label="FLOAT"]
  450 -> 49 [style=solid label="DOUBLE"]
  450 -> 50 [style=solid label="VOID"]
  450 -> 55 [style=solid label="TYPENAME"]
  450 -> 387 [style=solid label="SIZEOF"]
  450 -> 388 [style=solid label="ALIGNOF"]
  450 -> 389 [style=solid label="'0'"]
  450 -> 390 [style=solid label="'1'"]
  450 -> 391 [style=solid label="'2'"]
  450 -> 392 [style=solid label="'3'"]
  450 -> 393 [style=solid label="'4'"]
  450 -> 394 [style=solid label="'5'"]
  450 -> 395 [style=solid label="'6'"]
  450 -> 396 [style=solid label="'7'"]
  450 -> 397 [style=solid label="'8'"]
  450 -> 398 [style=solid label="'9'"]
  450 -> 205 [style=solid label="'u'"]
  450 -> 206 [style=solid label="'U'"]
  450 -> 207 [style=solid label="'L'"]
  450 -> 208 [style=solid label="'R'"]
  450 -> 401 [style=dashed label="await-expression"]
  450 -> 402 [style=dashed label="binary-literal"]
  450 -> 403 [style=dashed label="boolean-literal"]
  450 -> 951 [style=dashed label="cast-expression"]
  450 -> 405 [style=dashed label="character-literal"]
  450 -> 65 [style=dashed label="class-name"]
  450 -> 67 [style=dashed label="concept-name"]
  450 -> 68 [style=dashed label="conversion-function-id"]
  450 -> 409 [style=dashed label="decimal-floating-point-literal"]
  450 -> 410 [style=dashed label="decimal-literal"]
  450 -> 76 [style=dashed label="decltype-specifier"]
  450 -> 411 [style=dashed label="delete-expression"]
  450 -> 412 [style=dashed label="digit"]
  450 -> 413 [style=dashed label="digit-sequence"]
  450 -> 414 [style=dashed label="encoding-prefix"]
  450 -> 84 [style=dashed label="enum-name"]
  450 -> 417 [style=dashed label="floating-point-literal"]
  450 -> 418 [style=dashed label="fold-expression"]
  450 -> 419 [style=dashed label="fractional-constant"]
  450 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  450 -> 421 [style=dashed label="hexadecimal-literal"]
  450 -> 422 [style=dashed label="hexadecimal-prefix"]
  450 -> 423 [style=dashed label="id-expression"]
  450 -> 425 [style=dashed label="integer-literal"]
  450 -> 426 [style=dashed label="lambda-expression"]
  450 -> 427 [style=dashed label="lambda-introducer"]
  450 -> 428 [style=dashed label="literal"]
  450 -> 95 [style=dashed label="literal-operator-id"]
  450 -> 99 [style=dashed label="namespace-alias"]
  450 -> 102 [style=dashed label="namespace-name"]
  450 -> 432 [style=dashed label="nested-name-specifier"]
  450 -> 433 [style=dashed label="new-expression"]
  450 -> 434 [style=dashed label="noexcept-expression"]
  450 -> 435 [style=dashed label="nonzero-digit"]
  450 -> 436 [style=dashed label="octal-literal"]
  450 -> 108 [style=dashed label="operator-function-id"]
  450 -> 109 [style=dashed label="placeholder-type-specifier"]
  450 -> 438 [style=dashed label="pointer-literal"]
  450 -> 439 [style=dashed label="postfix-expression"]
  450 -> 440 [style=dashed label="primary-expression"]
  450 -> 112 [style=dashed label="qualified-id"]
  450 -> 442 [style=dashed label="requires-expression"]
  450 -> 114 [style=dashed label="simple-template-id"]
  450 -> 529 [style=dashed label="simple-type-specifier"]
  450 -> 445 [style=dashed label="string-literal"]
  450 -> 120 [style=dashed label="template-id"]
  450 -> 215 [style=dashed label="template-name"]
  450 -> 123 [style=dashed label="type-constraint"]
  450 -> 124 [style=dashed label="type-name"]
  450 -> 126 [style=dashed label="typedef-name"]
  450 -> 531 [style=dashed label="typename-specifier"]
  450 -> 449 [style=dashed label="unary-expression"]
  450 -> 450 [style=dashed label="unary-operator"]
  450 -> 129 [style=dashed label="unqualified-id"]
  450 -> 451 [style=dashed label="user-defined-character-literal"]
  450 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  450 -> 453 [style=dashed label="user-defined-integer-literal"]
  450 -> 454 [style=dashed label="user-defined-literal"]
  450 -> 455 [style=dashed label="user-defined-string-literal"]
  451 [label="State 451\n\l1162 user-defined-literal: user-defined-character-literal •\l"]
  451 -> "451R1162" [style=solid]
 "451R1162" [label="R1162", fillcolor=3, shape=diamond, style=filled]
  452 [label="State 452\n\l1160 user-defined-literal: user-defined-floating-point-literal •\l"]
  452 -> "452R1160" [style=solid]
 "452R1160" [label="R1160", fillcolor=3, shape=diamond, style=filled]
  453 [label="State 453\n\l1159 user-defined-literal: user-defined-integer-literal •\l"]
  453 -> "453R1159" [style=solid]
 "453R1159" [label="R1159", fillcolor=3, shape=diamond, style=filled]
  454 [label="State 454\n\l560 literal: user-defined-literal •\l"]
  454 -> "454R560" [style=solid]
 "454R560" [label="R560", fillcolor=3, shape=diamond, style=filled]
  455 [label="State 455\n\l1161 user-defined-literal: user-defined-string-literal •\l"]
  455 -> "455R1161" [style=solid]
 "455R1161" [label="R1161", fillcolor=3, shape=diamond, style=filled]
  456 [label="State 456\n\l661 nested-name-specifier: nested-name-specifier TEMPLATE • simple-template-id SCOPE\l910 qualified-id: nested-name-specifier TEMPLATE • unqualified-id\l"]
  456 -> 723 [style=solid label="IDENTIFIER"]
  456 -> 17 [style=solid label="OPERATOR"]
  456 -> 35 [style=solid label="COMPL"]
  456 -> 68 [style=dashed label="conversion-function-id"]
  456 -> 95 [style=dashed label="literal-operator-id"]
  456 -> 108 [style=dashed label="operator-function-id"]
  456 -> 952 [style=dashed label="simple-template-id"]
  456 -> 120 [style=dashed label="template-id"]
  456 -> 142 [style=dashed label="template-name"]
  456 -> 725 [style=dashed label="unqualified-id"]
  457 [label="State 457\n\l723 noptr-declarator: noptr-declarator parameters-and-qualifiers •\l"]
  457 -> "457R723" [style=solid]
 "457R723" [label="R723", fillcolor=3, shape=diamond, style=filled]
  458 [label="State 458\n\l728 noptr-declarator: OPEN_PAREN ptr-declarator CLOSE_PAREN •\l"]
  458 -> "458R728" [style=solid]
 "458R728" [label="R728", fillcolor=3, shape=diamond, style=filled]
  459 [label="State 459\n\l 22 asm-declaration: ASM OPEN_PAREN string-literal • CLOSE_PAREN SEMICOLON\l"]
  459 -> 953 [style=solid label="CLOSE_PAREN"]
  460 [label="State 460\n\l 57 attribute-using-prefix: USING • attribute-namespace COLON\l"]
  460 -> 954 [style=solid label="IDENTIFIER"]
  460 -> 955 [style=dashed label="attribute-namespace"]
  461 [label="State 461\n\l 48 attribute-namespace: IDENTIFIER •\l 55 attribute-token: IDENTIFIER •\l"]
  461 -> "461R48" [label="[SCOPE]", style=solid]
 "461R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  461 -> "461R55" [style=solid]
 "461R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  462 [label="State 462\n\l 43 attribute-list: attribute •\l 46               | attribute • ELLIPSIS\l"]
  462 -> 956 [style=solid label="ELLIPSIS"]
  462 -> "462R43" [style=solid]
 "462R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  463 [label="State 463\n\l 44 attribute-list: attribute-list • COMMA\l 45               | attribute-list • COMMA attribute\l 47               | attribute-list • COMMA attribute ELLIPSIS\l 50 attribute-specifier: OPEN_SQUARE OPEN_SQUARE attribute-list • CLOSE_SQUARE CLOSE_SQUARE\l"]
  463 -> 957 [style=solid label="COMMA"]
  463 -> 958 [style=solid label="CLOSE_SQUARE"]
  464 [label="State 464\n\l 49 attribute-scoped-token: attribute-namespace • SCOPE IDENTIFIER\l"]
  464 -> 959 [style=solid label="SCOPE"]
  465 [label="State 465\n\l 56 attribute-token: attribute-scoped-token •\l"]
  465 -> "465R56" [style=solid]
 "465R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  466 [label="State 466\n\l 38 attribute: attribute-token •\l 39          | attribute-token • attribute-argument-clause\l"]
  466 -> 960 [style=solid label="OPEN_PAREN"]
  466 -> 961 [style=dashed label="attribute-argument-clause"]
  466 -> "466R38" [style=solid]
 "466R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  467 [label="State 467\n\l 51 attribute-specifier: OPEN_SQUARE OPEN_SQUARE attribute-using-prefix • attribute-list CLOSE_SQUARE CLOSE_SQUARE\l"]
  467 -> 461 [style=solid label="IDENTIFIER"]
  467 -> 462 [style=dashed label="attribute"]
  467 -> 962 [style=dashed label="attribute-list"]
  467 -> 464 [style=dashed label="attribute-namespace"]
  467 -> 465 [style=dashed label="attribute-scoped-token"]
  467 -> 466 [style=dashed label="attribute-token"]
  468 [label="State 468\n\l142 class-key: CLASS •\l1099 type-parameter-key: CLASS •\l"]
  468 -> "468R142" [style=solid]
 "468R142" [label="R142", fillcolor=3, shape=diamond, style=filled]
  468 -> "468R1099d" [label="[IDENTIFIER]", style=solid]
 "468R1099d" [label="R1099", fillcolor=5, shape=diamond, style=filled]
  468 -> "468R1099" [label="[EQ, ELLIPSIS, COMMA, GREATER]", style=solid]
 "468R1099" [label="R1099", fillcolor=3, shape=diamond, style=filled]
  469 [label="State 469\n\l1045 template-head: TEMPLATE • LESS template-parameter-list GREATER\l1046              | TEMPLATE • LESS template-parameter-list GREATER requires-clause\l"]
  469 -> 963 [style=solid label="LESS"]
  470 [label="State 470\n\l321 explicit-specialization: TEMPLATE LESS GREATER • declaration\l"]
  470 -> 1 [style=solid label="USING"]
  470 -> 2 [style=solid label="IDENTIFIER"]
  470 -> 3 [style=solid label="SEMICOLON"]
  470 -> 4 [style=solid label="ALIGNAS"]
  470 -> 5 [style=solid label="OPEN_PAREN"]
  470 -> 6 [style=solid label="ELLIPSIS"]
  470 -> 7 [style=solid label="AND"]
  470 -> 8 [style=solid label="ASM"]
  470 -> 9 [style=solid label="SCOPE"]
  470 -> 10 [style=solid label="OPEN_SQUARE"]
  470 -> 11 [style=solid label="VIRTUAL"]
  470 -> 12 [style=solid label="CLASS"]
  470 -> 13 [style=solid label="STRUCT"]
  470 -> 14 [style=solid label="UNION"]
  470 -> 15 [style=solid label="TEMPLATE"]
  470 -> 16 [style=solid label="AND_AND"]
  470 -> 17 [style=solid label="OPERATOR"]
  470 -> 18 [style=solid label="CONST"]
  470 -> 19 [style=solid label="VOLATILE"]
  470 -> 20 [style=solid label="FRIEND"]
  470 -> 21 [style=solid label="TYPEDEF"]
  470 -> 22 [style=solid label="CONSTEXPR"]
  470 -> 23 [style=solid label="CONSTEVAL"]
  470 -> 24 [style=solid label="CONSTINIT"]
  470 -> 25 [style=solid label="INLINE"]
  470 -> 26 [style=solid label="DECLTYPE"]
  470 -> 27 [style=solid label="ENUM"]
  470 -> 28 [style=solid label="EXTERN"]
  470 -> 29 [style=solid label="EXPLICIT"]
  470 -> 157 [style=solid label="EXPORT"]
  470 -> 31 [style=solid label="MULT"]
  470 -> 33 [style=solid label="IMPORT"]
  470 -> 34 [style=solid label="NAMESPACE"]
  470 -> 35 [style=solid label="COMPL"]
  470 -> 36 [style=solid label="AUTO"]
  470 -> 37 [style=solid label="CHAR"]
  470 -> 38 [style=solid label="CHAR8_T"]
  470 -> 39 [style=solid label="CHAR16_T"]
  470 -> 40 [style=solid label="CHAR32_T"]
  470 -> 41 [style=solid label="WCHAR_T"]
  470 -> 42 [style=solid label="BOOL"]
  470 -> 43 [style=solid label="SHORT"]
  470 -> 44 [style=solid label="INT"]
  470 -> 45 [style=solid label="LONG"]
  470 -> 46 [style=solid label="SIGNED"]
  470 -> 47 [style=solid label="UNSIGNED"]
  470 -> 48 [style=solid label="FLOAT"]
  470 -> 49 [style=solid label="DOUBLE"]
  470 -> 50 [style=solid label="VOID"]
  470 -> 51 [style=solid label="STATIC_ASSERT"]
  470 -> 52 [style=solid label="STATIC"]
  470 -> 53 [style=solid label="THREAD_LOCAL"]
  470 -> 54 [style=solid label="MUTABLE"]
  470 -> 55 [style=solid label="TYPENAME"]
  470 -> 56 [style=dashed label="alias-declaration"]
  470 -> 57 [style=dashed label="alignment-specifier"]
  470 -> 58 [style=dashed label="asm-declaration"]
  470 -> 59 [style=dashed label="attribute-declaration"]
  470 -> 60 [style=dashed label="attribute-specifier"]
  470 -> 61 [style=dashed label="attribute-specifier-seq"]
  470 -> 62 [style=dashed label="block-declaration"]
  470 -> 63 [style=dashed label="class-head"]
  470 -> 64 [style=dashed label="class-key"]
  470 -> 65 [style=dashed label="class-name"]
  470 -> 66 [style=dashed label="class-specifier"]
  470 -> 67 [style=dashed label="concept-name"]
  470 -> 68 [style=dashed label="conversion-function-id"]
  470 -> 69 [style=dashed label="cv-qualifier"]
  470 -> 70 [style=dashed label="decl-specifier"]
  470 -> 71 [style=dashed label="decl-specifier-seq"]
  470 -> 964 [style=dashed label="declaration"]
  470 -> 74 [style=dashed label="declarator"]
  470 -> 75 [style=dashed label="declarator-id"]
  470 -> 76 [style=dashed label="decltype-specifier"]
  470 -> 77 [style=dashed label="deduction-guide"]
  470 -> 78 [style=dashed label="defining-type-specifier"]
  470 -> 79 [style=dashed label="elaborated-enum-specifier"]
  470 -> 80 [style=dashed label="elaborated-type-specifier"]
  470 -> 81 [style=dashed label="empty-declaration"]
  470 -> 82 [style=dashed label="enum-head"]
  470 -> 83 [style=dashed label="enum-key"]
  470 -> 84 [style=dashed label="enum-name"]
  470 -> 85 [style=dashed label="enum-specifier"]
  470 -> 86 [style=dashed label="explicit-instantiation"]
  470 -> 87 [style=dashed label="explicit-specialization"]
  470 -> 88 [style=dashed label="explicit-specifier"]
  470 -> 89 [style=dashed label="export-declaration"]
  470 -> 90 [style=dashed label="function-definition"]
  470 -> 91 [style=dashed label="function-specifier"]
  470 -> 93 [style=dashed label="id-expression"]
  470 -> 94 [style=dashed label="linkage-specification"]
  470 -> 95 [style=dashed label="literal-operator-id"]
  470 -> 97 [style=dashed label="module-import-declaration"]
  470 -> 98 [style=dashed label="named-namespace-definition"]
  470 -> 99 [style=dashed label="namespace-alias"]
  470 -> 100 [style=dashed label="namespace-alias-definition"]
  470 -> 101 [style=dashed label="namespace-definition"]
  470 -> 102 [style=dashed label="namespace-name"]
  470 -> 103 [style=dashed label="nested-name-specifier"]
  470 -> 104 [style=dashed label="nested-namespace-definition"]
  470 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  470 -> 106 [style=dashed label="noptr-declarator"]
  470 -> 107 [style=dashed label="opaque-enum-declaration"]
  470 -> 108 [style=dashed label="operator-function-id"]
  470 -> 109 [style=dashed label="placeholder-type-specifier"]
  470 -> 110 [style=dashed label="ptr-declarator"]
  470 -> 111 [style=dashed label="ptr-operator"]
  470 -> 112 [style=dashed label="qualified-id"]
  470 -> 113 [style=dashed label="simple-declaration"]
  470 -> 114 [style=dashed label="simple-template-id"]
  470 -> 115 [style=dashed label="simple-type-specifier"]
  470 -> 116 [style=dashed label="static_assert-declaration"]
  470 -> 117 [style=dashed label="storage-class-specifier"]
  470 -> 118 [style=dashed label="template-declaration"]
  470 -> 119 [style=dashed label="template-head"]
  470 -> 120 [style=dashed label="template-id"]
  470 -> 121 [style=dashed label="template-name"]
  470 -> 123 [style=dashed label="type-constraint"]
  470 -> 124 [style=dashed label="type-name"]
  470 -> 125 [style=dashed label="type-specifier"]
  470 -> 126 [style=dashed label="typedef-name"]
  470 -> 127 [style=dashed label="typename-specifier"]
  470 -> 128 [style=dashed label="unnamed-namespace-definition"]
  470 -> 129 [style=dashed label="unqualified-id"]
  470 -> 130 [style=dashed label="using-declaration"]
  470 -> 131 [style=dashed label="using-directive"]
  470 -> 132 [style=dashed label="using-enum-declaration"]
  471 [label="State 471\n\l805 parameter-declaration: THIS • decl-specifier-seq declarator\l809                      | THIS • decl-specifier-seq declarator EQ initializer-clause\l813                      | THIS • decl-specifier-seq\l817                      | THIS • decl-specifier-seq abstract-declarator\l821                      | THIS • decl-specifier-seq EQ initializer-clause\l825                      | THIS • decl-specifier-seq abstract-declarator EQ initializer-clause\l"]
  471 -> 162 [style=solid label="IDENTIFIER"]
  471 -> 9 [style=solid label="SCOPE"]
  471 -> 11 [style=solid label="VIRTUAL"]
  471 -> 12 [style=solid label="CLASS"]
  471 -> 13 [style=solid label="STRUCT"]
  471 -> 14 [style=solid label="UNION"]
  471 -> 18 [style=solid label="CONST"]
  471 -> 19 [style=solid label="VOLATILE"]
  471 -> 20 [style=solid label="FRIEND"]
  471 -> 21 [style=solid label="TYPEDEF"]
  471 -> 22 [style=solid label="CONSTEXPR"]
  471 -> 23 [style=solid label="CONSTEVAL"]
  471 -> 24 [style=solid label="CONSTINIT"]
  471 -> 258 [style=solid label="INLINE"]
  471 -> 26 [style=solid label="DECLTYPE"]
  471 -> 27 [style=solid label="ENUM"]
  471 -> 259 [style=solid label="EXTERN"]
  471 -> 29 [style=solid label="EXPLICIT"]
  471 -> 36 [style=solid label="AUTO"]
  471 -> 37 [style=solid label="CHAR"]
  471 -> 38 [style=solid label="CHAR8_T"]
  471 -> 39 [style=solid label="CHAR16_T"]
  471 -> 40 [style=solid label="CHAR32_T"]
  471 -> 41 [style=solid label="WCHAR_T"]
  471 -> 42 [style=solid label="BOOL"]
  471 -> 43 [style=solid label="SHORT"]
  471 -> 44 [style=solid label="INT"]
  471 -> 45 [style=solid label="LONG"]
  471 -> 46 [style=solid label="SIGNED"]
  471 -> 47 [style=solid label="UNSIGNED"]
  471 -> 48 [style=solid label="FLOAT"]
  471 -> 49 [style=solid label="DOUBLE"]
  471 -> 50 [style=solid label="VOID"]
  471 -> 52 [style=solid label="STATIC"]
  471 -> 53 [style=solid label="THREAD_LOCAL"]
  471 -> 54 [style=solid label="MUTABLE"]
  471 -> 55 [style=solid label="TYPENAME"]
  471 -> 63 [style=dashed label="class-head"]
  471 -> 64 [style=dashed label="class-key"]
  471 -> 65 [style=dashed label="class-name"]
  471 -> 66 [style=dashed label="class-specifier"]
  471 -> 67 [style=dashed label="concept-name"]
  471 -> 69 [style=dashed label="cv-qualifier"]
  471 -> 70 [style=dashed label="decl-specifier"]
  471 -> 965 [style=dashed label="decl-specifier-seq"]
  471 -> 76 [style=dashed label="decltype-specifier"]
  471 -> 78 [style=dashed label="defining-type-specifier"]
  471 -> 79 [style=dashed label="elaborated-enum-specifier"]
  471 -> 80 [style=dashed label="elaborated-type-specifier"]
  471 -> 82 [style=dashed label="enum-head"]
  471 -> 263 [style=dashed label="enum-key"]
  471 -> 84 [style=dashed label="enum-name"]
  471 -> 85 [style=dashed label="enum-specifier"]
  471 -> 264 [style=dashed label="explicit-specifier"]
  471 -> 91 [style=dashed label="function-specifier"]
  471 -> 99 [style=dashed label="namespace-alias"]
  471 -> 102 [style=dashed label="namespace-name"]
  471 -> 212 [style=dashed label="nested-name-specifier"]
  471 -> 109 [style=dashed label="placeholder-type-specifier"]
  471 -> 141 [style=dashed label="simple-template-id"]
  471 -> 115 [style=dashed label="simple-type-specifier"]
  471 -> 117 [style=dashed label="storage-class-specifier"]
  471 -> 215 [style=dashed label="template-name"]
  471 -> 123 [style=dashed label="type-constraint"]
  471 -> 124 [style=dashed label="type-name"]
  471 -> 125 [style=dashed label="type-specifier"]
  471 -> 126 [style=dashed label="typedef-name"]
  471 -> 127 [style=dashed label="typename-specifier"]
  472 [label="State 472\n\l1100 type-parameter-key: TYPENAME •\l1112 typename-specifier: TYPENAME • nested-name-specifier IDENTIFIER\l1113                   | TYPENAME • nested-name-specifier simple-template-id\l1114                   | TYPENAME • nested-name-specifier TEMPLATE simple-template-id\l"]
  472 -> 253 [style=solid label="IDENTIFIER"]
  472 -> 9 [style=solid label="SCOPE"]
  472 -> 134 [style=solid label="DECLTYPE"]
  472 -> 65 [style=dashed label="class-name"]
  472 -> 138 [style=dashed label="decltype-specifier"]
  472 -> 84 [style=dashed label="enum-name"]
  472 -> 99 [style=dashed label="namespace-alias"]
  472 -> 102 [style=dashed label="namespace-name"]
  472 -> 254 [style=dashed label="nested-name-specifier"]
  472 -> 141 [style=dashed label="simple-template-id"]
  472 -> 142 [style=dashed label="template-name"]
  472 -> 143 [style=dashed label="type-name"]
  472 -> 126 [style=dashed label="typedef-name"]
  472 -> "472R1100d" [label="[IDENTIFIER]", style=solid]
 "472R1100d" [label="R1100", fillcolor=5, shape=diamond, style=filled]
  472 -> "472R1100" [style=solid]
 "472R1100" [label="R1100", fillcolor=3, shape=diamond, style=filled]
  473 [label="State 473\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l802 parameter-declaration: attribute-specifier-seq • decl-specifier-seq declarator\l804                      | attribute-specifier-seq • THIS decl-specifier-seq declarator\l806                      | attribute-specifier-seq • decl-specifier-seq declarator EQ initializer-clause\l808                      | attribute-specifier-seq • THIS decl-specifier-seq declarator EQ initializer-clause\l810                      | attribute-specifier-seq • decl-specifier-seq\l812                      | attribute-specifier-seq • THIS decl-specifier-seq\l814                      | attribute-specifier-seq • decl-specifier-seq abstract-declarator\l816                      | attribute-specifier-seq • THIS decl-specifier-seq abstract-declarator\l818                      | attribute-specifier-seq • decl-specifier-seq EQ initializer-clause\l820                      | attribute-specifier-seq • THIS decl-specifier-seq EQ initializer-clause\l822                      | attribute-specifier-seq • decl-specifier-seq abstract-declarator EQ initializer-clause\l824                      | attribute-specifier-seq • THIS decl-specifier-seq abstract-declarator EQ initializer-clause\l"]
  473 -> 162 [style=solid label="IDENTIFIER"]
  473 -> 4 [style=solid label="ALIGNAS"]
  473 -> 9 [style=solid label="SCOPE"]
  473 -> 10 [style=solid label="OPEN_SQUARE"]
  473 -> 11 [style=solid label="VIRTUAL"]
  473 -> 12 [style=solid label="CLASS"]
  473 -> 13 [style=solid label="STRUCT"]
  473 -> 14 [style=solid label="UNION"]
  473 -> 18 [style=solid label="CONST"]
  473 -> 19 [style=solid label="VOLATILE"]
  473 -> 20 [style=solid label="FRIEND"]
  473 -> 21 [style=solid label="TYPEDEF"]
  473 -> 22 [style=solid label="CONSTEXPR"]
  473 -> 23 [style=solid label="CONSTEVAL"]
  473 -> 24 [style=solid label="CONSTINIT"]
  473 -> 258 [style=solid label="INLINE"]
  473 -> 26 [style=solid label="DECLTYPE"]
  473 -> 27 [style=solid label="ENUM"]
  473 -> 259 [style=solid label="EXTERN"]
  473 -> 29 [style=solid label="EXPLICIT"]
  473 -> 966 [style=solid label="THIS"]
  473 -> 36 [style=solid label="AUTO"]
  473 -> 37 [style=solid label="CHAR"]
  473 -> 38 [style=solid label="CHAR8_T"]
  473 -> 39 [style=solid label="CHAR16_T"]
  473 -> 40 [style=solid label="CHAR32_T"]
  473 -> 41 [style=solid label="WCHAR_T"]
  473 -> 42 [style=solid label="BOOL"]
  473 -> 43 [style=solid label="SHORT"]
  473 -> 44 [style=solid label="INT"]
  473 -> 45 [style=solid label="LONG"]
  473 -> 46 [style=solid label="SIGNED"]
  473 -> 47 [style=solid label="UNSIGNED"]
  473 -> 48 [style=solid label="FLOAT"]
  473 -> 49 [style=solid label="DOUBLE"]
  473 -> 50 [style=solid label="VOID"]
  473 -> 52 [style=solid label="STATIC"]
  473 -> 53 [style=solid label="THREAD_LOCAL"]
  473 -> 54 [style=solid label="MUTABLE"]
  473 -> 55 [style=solid label="TYPENAME"]
  473 -> 57 [style=dashed label="alignment-specifier"]
  473 -> 260 [style=dashed label="attribute-specifier"]
  473 -> 63 [style=dashed label="class-head"]
  473 -> 64 [style=dashed label="class-key"]
  473 -> 65 [style=dashed label="class-name"]
  473 -> 66 [style=dashed label="class-specifier"]
  473 -> 67 [style=dashed label="concept-name"]
  473 -> 69 [style=dashed label="cv-qualifier"]
  473 -> 70 [style=dashed label="decl-specifier"]
  473 -> 967 [style=dashed label="decl-specifier-seq"]
  473 -> 76 [style=dashed label="decltype-specifier"]
  473 -> 78 [style=dashed label="defining-type-specifier"]
  473 -> 79 [style=dashed label="elaborated-enum-specifier"]
  473 -> 80 [style=dashed label="elaborated-type-specifier"]
  473 -> 82 [style=dashed label="enum-head"]
  473 -> 263 [style=dashed label="enum-key"]
  473 -> 84 [style=dashed label="enum-name"]
  473 -> 85 [style=dashed label="enum-specifier"]
  473 -> 264 [style=dashed label="explicit-specifier"]
  473 -> 91 [style=dashed label="function-specifier"]
  473 -> 99 [style=dashed label="namespace-alias"]
  473 -> 102 [style=dashed label="namespace-name"]
  473 -> 212 [style=dashed label="nested-name-specifier"]
  473 -> 109 [style=dashed label="placeholder-type-specifier"]
  473 -> 141 [style=dashed label="simple-template-id"]
  473 -> 115 [style=dashed label="simple-type-specifier"]
  473 -> 117 [style=dashed label="storage-class-specifier"]
  473 -> 215 [style=dashed label="template-name"]
  473 -> 123 [style=dashed label="type-constraint"]
  473 -> 124 [style=dashed label="type-name"]
  473 -> 125 [style=dashed label="type-specifier"]
  473 -> 126 [style=dashed label="typedef-name"]
  473 -> 127 [style=dashed label="typename-specifier"]
  474 [label="State 474\n\l803 parameter-declaration: decl-specifier-seq • declarator\l807                      | decl-specifier-seq • declarator EQ initializer-clause\l811                      | decl-specifier-seq •\l815                      | decl-specifier-seq • abstract-declarator\l819                      | decl-specifier-seq • EQ initializer-clause\l823                      | decl-specifier-seq • abstract-declarator EQ initializer-clause\l"]
  474 -> 147 [style=solid label="IDENTIFIER"]
  474 -> 968 [style=solid label="EQ"]
  474 -> 969 [style=solid label="OPEN_PAREN"]
  474 -> 970 [style=solid label="ELLIPSIS"]
  474 -> 7 [style=solid label="AND"]
  474 -> 9 [style=solid label="SCOPE"]
  474 -> 941 [style=solid label="OPEN_SQUARE"]
  474 -> 16 [style=solid label="AND_AND"]
  474 -> 17 [style=solid label="OPERATOR"]
  474 -> 134 [style=solid label="DECLTYPE"]
  474 -> 31 [style=solid label="MULT"]
  474 -> 35 [style=solid label="COMPL"]
  474 -> 971 [style=dashed label="abstract-declarator"]
  474 -> 943 [style=dashed label="abstract-pack-declarator"]
  474 -> 65 [style=dashed label="class-name"]
  474 -> 68 [style=dashed label="conversion-function-id"]
  474 -> 972 [style=dashed label="declarator"]
  474 -> 75 [style=dashed label="declarator-id"]
  474 -> 138 [style=dashed label="decltype-specifier"]
  474 -> 84 [style=dashed label="enum-name"]
  474 -> 93 [style=dashed label="id-expression"]
  474 -> 95 [style=dashed label="literal-operator-id"]
  474 -> 99 [style=dashed label="namespace-alias"]
  474 -> 102 [style=dashed label="namespace-name"]
  474 -> 148 [style=dashed label="nested-name-specifier"]
  474 -> 944 [style=dashed label="noptr-abstract-declarator"]
  474 -> 945 [style=dashed label="noptr-abstract-pack-declarator"]
  474 -> 106 [style=dashed label="noptr-declarator"]
  474 -> 108 [style=dashed label="operator-function-id"]
  474 -> 946 [style=dashed label="parameters-and-qualifiers"]
  474 -> 947 [style=dashed label="ptr-abstract-declarator"]
  474 -> 110 [style=dashed label="ptr-declarator"]
  474 -> 973 [style=dashed label="ptr-operator"]
  474 -> 112 [style=dashed label="qualified-id"]
  474 -> 114 [style=dashed label="simple-template-id"]
  474 -> 120 [style=dashed label="template-id"]
  474 -> 142 [style=dashed label="template-name"]
  474 -> 143 [style=dashed label="type-name"]
  474 -> 126 [style=dashed label="typedef-name"]
  474 -> 129 [style=dashed label="unqualified-id"]
  474 -> "474R811d" [label="[ELLIPSIS]", style=solid]
 "474R811d" [label="R811", fillcolor=5, shape=diamond, style=filled]
  474 -> "474R811" [style=solid]
 "474R811" [label="R811", fillcolor=3, shape=diamond, style=filled]
  475 [label="State 475\n\l1054 template-parameter: parameter-declaration •\l"]
  475 -> "475R1054" [style=solid]
 "475R1054" [label="R1054", fillcolor=3, shape=diamond, style=filled]
  476 [label="State 476\n\l1093 type-parameter: template-head • type-parameter-key\l1094               | template-head • type-parameter-key ELLIPSIS\l1095               | template-head • type-parameter-key IDENTIFIER\l1096               | template-head • type-parameter-key ELLIPSIS IDENTIFIER\l1097               | template-head • type-parameter-key EQ id-expression\l1098               | template-head • type-parameter-key IDENTIFIER EQ id-expression\l"]
  476 -> 974 [style=solid label="CLASS"]
  476 -> 975 [style=solid label="TYPENAME"]
  476 -> 976 [style=dashed label="type-parameter-key"]
  477 [label="State 477\n\l1055 template-parameter-list: template-parameter •\l"]
  477 -> "477R1055" [style=solid]
 "477R1055" [label="R1055", fillcolor=3, shape=diamond, style=filled]
  478 [label="State 478\n\l1045 template-head: TEMPLATE LESS template-parameter-list • GREATER\l1046              | TEMPLATE LESS template-parameter-list • GREATER requires-clause\l1056 template-parameter-list: template-parameter-list • COMMA template-parameter\l"]
  478 -> 977 [style=solid label="COMMA"]
  478 -> 978 [style=solid label="GREATER"]
  479 [label="State 479\n\l848 placeholder-type-specifier: type-constraint • AUTO\l850                           | type-constraint • DECLTYPE OPEN_PAREN AUTO CLOSE_PAREN\l1087 type-parameter: type-constraint •\l1088               | type-constraint • ELLIPSIS\l1089               | type-constraint • IDENTIFIER\l1090               | type-constraint • ELLIPSIS IDENTIFIER\l1091               | type-constraint • EQ type-id\l1092               | type-constraint • IDENTIFIER EQ type-id\l"]
  479 -> 979 [style=solid label="IDENTIFIER"]
  479 -> 980 [style=solid label="EQ"]
  479 -> 981 [style=solid label="ELLIPSIS"]
  479 -> 339 [style=solid label="DECLTYPE"]
  479 -> 340 [style=solid label="AUTO"]
  479 -> "479R1087" [style=solid]
 "479R1087" [label="R1087", fillcolor=3, shape=diamond, style=filled]
  480 [label="State 480\n\l1053 template-parameter: type-parameter •\l"]
  480 -> "480R1053" [style=solid]
 "480R1053" [label="R1053", fillcolor=3, shape=diamond, style=filled]
  481 [label="State 481\n\l1081 type-parameter: type-parameter-key •\l1082               | type-parameter-key • ELLIPSIS\l1083               | type-parameter-key • IDENTIFIER\l1084               | type-parameter-key • ELLIPSIS IDENTIFIER\l1085               | type-parameter-key • EQ type-id\l1086               | type-parameter-key • IDENTIFIER EQ type-id\l"]
  481 -> 982 [style=solid label="IDENTIFIER"]
  481 -> 983 [style=solid label="EQ"]
  481 -> 984 [style=solid label="ELLIPSIS"]
  481 -> "481R1081" [style=solid]
 "481R1081" [label="R1081", fillcolor=3, shape=diamond, style=filled]
  482 [label="State 482\n\l763 overloadable-operator: OPEN_PAREN CLOSE_PAREN •\l"]
  482 -> "482R763" [style=solid]
 "482R763" [label="R763", fillcolor=3, shape=diamond, style=filled]
  483 [label="State 483\n\l764 overloadable-operator: OPEN_SQUARE CLOSE_SQUARE •\l"]
  483 -> "483R764" [style=solid]
 "483R764" [label="R764", fillcolor=3, shape=diamond, style=filled]
  484 [label="State 484\n\l761 overloadable-operator: DELETE OPEN_SQUARE • CLOSE_SQUARE\l"]
  484 -> 985 [style=solid label="CLOSE_SQUARE"]
  485 [label="State 485\n\l 84 basic-s-char: BASIC_S_CHAR •\l"]
  485 -> "485R84" [style=solid]
 "485R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  486 [label="State 486\n\l167 conditional-escape-sequence: ESCAPE • conditional-escape-sequence-char\l745 octal-escape-sequence: ESCAPE • octal-digit\l746                      | ESCAPE • octal-digit octal-digit\l747                      | ESCAPE • octal-digit octal-digit octal-digit\l970 simple-escape-sequence: ESCAPE • simple-escape-sequence-char\l"]
  486 -> 986 [style=solid label="SINGLE_QUOTE"]
  486 -> 987 [style=solid label="ESCAPE"]
  486 -> 988 [style=solid label="CONDITIONAL_ESCAPE_SEQUENCE_CHAR"]
  486 -> 989 [style=solid label="QUERY"]
  486 -> 990 [style=solid label="DOUBLE_QUOTE"]
  486 -> 909 [style=solid label="'0'"]
  486 -> 910 [style=solid label="'1'"]
  486 -> 911 [style=solid label="'2'"]
  486 -> 912 [style=solid label="'3'"]
  486 -> 913 [style=solid label="'4'"]
  486 -> 914 [style=solid label="'5'"]
  486 -> 915 [style=solid label="'6'"]
  486 -> 916 [style=solid label="'7'"]
  486 -> 991 [style=solid label="'f'"]
  486 -> 992 [style=solid label="'a'"]
  486 -> 993 [style=solid label="'b'"]
  486 -> 994 [style=solid label="'n'"]
  486 -> 995 [style=solid label="'r'"]
  486 -> 996 [style=solid label="'t'"]
  486 -> 997 [style=solid label="'v'"]
  486 -> 998 [style=dashed label="conditional-escape-sequence-char"]
  486 -> 999 [style=dashed label="octal-digit"]
  486 -> 1000 [style=dashed label="simple-escape-sequence-char"]
  487 [label="State 487\n\l1031 string-literal: DOUBLE_QUOTE DOUBLE_QUOTE •\l"]
  487 -> "487R1031" [style=solid]
 "487R1031" [label="R1031", fillcolor=3, shape=diamond, style=filled]
  488 [label="State 488\n\l447 hexadecimal-escape-sequence: ESCAPE_LX • hexadecimal-digit\l"]
  488 -> 867 [style=solid label="'0'"]
  488 -> 868 [style=solid label="'1'"]
  488 -> 869 [style=solid label="'2'"]
  488 -> 870 [style=solid label="'3'"]
  488 -> 871 [style=solid label="'4'"]
  488 -> 872 [style=solid label="'5'"]
  488 -> 873 [style=solid label="'6'"]
  488 -> 874 [style=solid label="'7'"]
  488 -> 875 [style=solid label="'8'"]
  488 -> 876 [style=solid label="'9'"]
  488 -> 877 [style=solid label="'e'"]
  488 -> 878 [style=solid label="'E'"]
  488 -> 879 [style=solid label="'f'"]
  488 -> 880 [style=solid label="'F'"]
  488 -> 881 [style=solid label="'a'"]
  488 -> 882 [style=solid label="'b'"]
  488 -> 883 [style=solid label="'c'"]
  488 -> 884 [style=solid label="'d'"]
  488 -> 885 [style=solid label="'A'"]
  488 -> 886 [style=solid label="'B'"]
  488 -> 887 [style=solid label="'C'"]
  488 -> 888 [style=solid label="'D'"]
  488 -> 1001 [style=dashed label="hexadecimal-digit"]
  489 [label="State 489\n\l1134 universal-character-name: ESCAPE_LU • hex-quad\l"]
  489 -> 867 [style=solid label="'0'"]
  489 -> 868 [style=solid label="'1'"]
  489 -> 869 [style=solid label="'2'"]
  489 -> 870 [style=solid label="'3'"]
  489 -> 871 [style=solid label="'4'"]
  489 -> 872 [style=solid label="'5'"]
  489 -> 873 [style=solid label="'6'"]
  489 -> 874 [style=solid label="'7'"]
  489 -> 875 [style=solid label="'8'"]
  489 -> 876 [style=solid label="'9'"]
  489 -> 877 [style=solid label="'e'"]
  489 -> 878 [style=solid label="'E'"]
  489 -> 879 [style=solid label="'f'"]
  489 -> 880 [style=solid label="'F'"]
  489 -> 881 [style=solid label="'a'"]
  489 -> 882 [style=solid label="'b'"]
  489 -> 883 [style=solid label="'c'"]
  489 -> 884 [style=solid label="'d'"]
  489 -> 885 [style=solid label="'A'"]
  489 -> 886 [style=solid label="'B'"]
  489 -> 887 [style=solid label="'C'"]
  489 -> 888 [style=solid label="'D'"]
  489 -> 1002 [style=dashed label="hex-quad"]
  489 -> 1003 [style=dashed label="hexadecimal-digit"]
  490 [label="State 490\n\l1135 universal-character-name: ESCAPE_HU • hex-quad hex-quad\l"]
  490 -> 867 [style=solid label="'0'"]
  490 -> 868 [style=solid label="'1'"]
  490 -> 869 [style=solid label="'2'"]
  490 -> 870 [style=solid label="'3'"]
  490 -> 871 [style=solid label="'4'"]
  490 -> 872 [style=solid label="'5'"]
  490 -> 873 [style=solid label="'6'"]
  490 -> 874 [style=solid label="'7'"]
  490 -> 875 [style=solid label="'8'"]
  490 -> 876 [style=solid label="'9'"]
  490 -> 877 [style=solid label="'e'"]
  490 -> 878 [style=solid label="'E'"]
  490 -> 879 [style=solid label="'f'"]
  490 -> 880 [style=solid label="'F'"]
  490 -> 881 [style=solid label="'a'"]
  490 -> 882 [style=solid label="'b'"]
  490 -> 883 [style=solid label="'c'"]
  490 -> 884 [style=solid label="'d'"]
  490 -> 885 [style=solid label="'A'"]
  490 -> 886 [style=solid label="'B'"]
  490 -> 887 [style=solid label="'C'"]
  490 -> 888 [style=solid label="'D'"]
  490 -> 1004 [style=dashed label="hex-quad"]
  490 -> 1003 [style=dashed label="hexadecimal-digit"]
  491 [label="State 491\n\l933 s-char: basic-s-char •\l"]
  491 -> "491R933" [style=solid]
 "491R933" [label="R933", fillcolor=3, shape=diamond, style=filled]
  492 [label="State 492\n\l309 escape-sequence: conditional-escape-sequence •\l"]
  492 -> "492R309" [style=solid]
 "492R309" [label="R309", fillcolor=3, shape=diamond, style=filled]
  493 [label="State 493\n\l934 s-char: escape-sequence •\l"]
  493 -> "493R934" [style=solid]
 "493R934" [label="R934", fillcolor=3, shape=diamond, style=filled]
  494 [label="State 494\n\l448 hexadecimal-escape-sequence: hexadecimal-escape-sequence • hexadecimal-digit\l736 numeric-escape-sequence: hexadecimal-escape-sequence •\l"]
  494 -> 867 [style=solid label="'0'"]
  494 -> 868 [style=solid label="'1'"]
  494 -> 869 [style=solid label="'2'"]
  494 -> 870 [style=solid label="'3'"]
  494 -> 871 [style=solid label="'4'"]
  494 -> 872 [style=solid label="'5'"]
  494 -> 873 [style=solid label="'6'"]
  494 -> 874 [style=solid label="'7'"]
  494 -> 875 [style=solid label="'8'"]
  494 -> 876 [style=solid label="'9'"]
  494 -> 877 [style=solid label="'e'"]
  494 -> 878 [style=solid label="'E'"]
  494 -> 879 [style=solid label="'f'"]
  494 -> 880 [style=solid label="'F'"]
  494 -> 881 [style=solid label="'a'"]
  494 -> 882 [style=solid label="'b'"]
  494 -> 883 [style=solid label="'c'"]
  494 -> 884 [style=solid label="'d'"]
  494 -> 885 [style=solid label="'A'"]
  494 -> 886 [style=solid label="'B'"]
  494 -> 887 [style=solid label="'C'"]
  494 -> 888 [style=solid label="'D'"]
  494 -> 1005 [style=dashed label="hexadecimal-digit"]
  494 -> "494R736" [style=solid]
 "494R736" [label="R736", fillcolor=3, shape=diamond, style=filled]
  495 [label="State 495\n\l308 escape-sequence: numeric-escape-sequence •\l"]
  495 -> "495R308" [style=solid]
 "495R308" [label="R308", fillcolor=3, shape=diamond, style=filled]
  496 [label="State 496\n\l735 numeric-escape-sequence: octal-escape-sequence •\l"]
  496 -> "496R735" [style=solid]
 "496R735" [label="R735", fillcolor=3, shape=diamond, style=filled]
  497 [label="State 497\n\l936 s-char-sequence: s-char •\l"]
  497 -> "497R936" [style=solid]
 "497R936" [label="R936", fillcolor=3, shape=diamond, style=filled]
  498 [label="State 498\n\l937 s-char-sequence: s-char-sequence • s-char\l1033 string-literal: DOUBLE_QUOTE s-char-sequence • DOUBLE_QUOTE\l"]
  498 -> 485 [style=solid label="BASIC_S_CHAR"]
  498 -> 486 [style=solid label="ESCAPE"]
  498 -> 1006 [style=solid label="DOUBLE_QUOTE"]
  498 -> 488 [style=solid label="ESCAPE_LX"]
  498 -> 489 [style=solid label="ESCAPE_LU"]
  498 -> 490 [style=solid label="ESCAPE_HU"]
  498 -> 491 [style=dashed label="basic-s-char"]
  498 -> 492 [style=dashed label="conditional-escape-sequence"]
  498 -> 493 [style=dashed label="escape-sequence"]
  498 -> 494 [style=dashed label="hexadecimal-escape-sequence"]
  498 -> 495 [style=dashed label="numeric-escape-sequence"]
  498 -> 496 [style=dashed label="octal-escape-sequence"]
  498 -> 1007 [style=dashed label="s-char"]
  498 -> 499 [style=dashed label="simple-escape-sequence"]
  498 -> 500 [style=dashed label="universal-character-name"]
  499 [label="State 499\n\l307 escape-sequence: simple-escape-sequence •\l"]
  499 -> "499R307" [style=solid]
 "499R307" [label="R307", fillcolor=3, shape=diamond, style=filled]
  500 [label="State 500\n\l935 s-char: universal-character-name •\l"]
  500 -> "500R935" [style=solid]
 "500R935" [label="R935", fillcolor=3, shape=diamond, style=filled]
  501 [label="State 501\n\l760 overloadable-operator: NEW OPEN_SQUARE • CLOSE_SQUARE\l"]
  501 -> 1008 [style=solid label="CLOSE_SQUARE"]
  502 [label="State 502\n\l913 raw-string: BASIC_S_CHAR •\l"]
  502 -> "502R913" [style=solid]
 "502R913" [label="R913", fillcolor=3, shape=diamond, style=filled]
  503 [label="State 503\n\l1035 string-literal: 'R' raw-string •\l"]
  503 -> "503R1035" [style=solid]
 "503R1035" [label="R1035", fillcolor=3, shape=diamond, style=filled]
  504 [label="State 504\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l265 elaborated-type-specifier: class-key attribute-specifier-seq • IDENTIFIER\l267                          | class-key attribute-specifier-seq • nested-name-specifier IDENTIFIER\l"]
  504 -> 623 [style=solid label="IDENTIFIER"]
  504 -> 4 [style=solid label="ALIGNAS"]
  504 -> 9 [style=solid label="SCOPE"]
  504 -> 10 [style=solid label="OPEN_SQUARE"]
  504 -> 134 [style=solid label="DECLTYPE"]
  504 -> 57 [style=dashed label="alignment-specifier"]
  504 -> 260 [style=dashed label="attribute-specifier"]
  504 -> 65 [style=dashed label="class-name"]
  504 -> 138 [style=dashed label="decltype-specifier"]
  504 -> 84 [style=dashed label="enum-name"]
  504 -> 99 [style=dashed label="namespace-alias"]
  504 -> 102 [style=dashed label="namespace-name"]
  504 -> 1009 [style=dashed label="nested-name-specifier"]
  504 -> 141 [style=dashed label="simple-template-id"]
  504 -> 142 [style=dashed label="template-name"]
  504 -> 143 [style=dashed label="type-name"]
  504 -> 126 [style=dashed label="typedef-name"]
  505 [label="State 505\n\l266 elaborated-type-specifier: class-key nested-name-specifier • IDENTIFIER\l269                          | class-key nested-name-specifier • simple-template-id\l270                          | class-key nested-name-specifier • TEMPLATE simple-template-id\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l"]
  505 -> 1010 [style=solid label="IDENTIFIER"]
  505 -> 631 [style=solid label="TEMPLATE"]
  505 -> 1011 [style=dashed label="simple-template-id"]
  505 -> 142 [style=dashed label="template-name"]
  506 [label="State 506\n\l1030 string-literal: encoding-prefix DOUBLE_QUOTE • DOUBLE_QUOTE\l1032               | encoding-prefix DOUBLE_QUOTE • s-char-sequence DOUBLE_QUOTE\l"]
  506 -> 485 [style=solid label="BASIC_S_CHAR"]
  506 -> 486 [style=solid label="ESCAPE"]
  506 -> 1012 [style=solid label="DOUBLE_QUOTE"]
  506 -> 488 [style=solid label="ESCAPE_LX"]
  506 -> 489 [style=solid label="ESCAPE_LU"]
  506 -> 490 [style=solid label="ESCAPE_HU"]
  506 -> 491 [style=dashed label="basic-s-char"]
  506 -> 492 [style=dashed label="conditional-escape-sequence"]
  506 -> 493 [style=dashed label="escape-sequence"]
  506 -> 494 [style=dashed label="hexadecimal-escape-sequence"]
  506 -> 495 [style=dashed label="numeric-escape-sequence"]
  506 -> 496 [style=dashed label="octal-escape-sequence"]
  506 -> 497 [style=dashed label="s-char"]
  506 -> 1013 [style=dashed label="s-char-sequence"]
  506 -> 499 [style=dashed label="simple-escape-sequence"]
  506 -> 500 [style=dashed label="universal-character-name"]
  507 [label="State 507\n\l1034 string-literal: encoding-prefix 'R' • raw-string\l"]
  507 -> 502 [style=solid label="BASIC_S_CHAR"]
  507 -> 1014 [style=dashed label="raw-string"]
  508 [label="State 508\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l"]
  508 -> 722 [style=solid label="SCOPE"]
  508 -> "508R145d" [label="[SCOPE]", style=solid]
 "508R145d" [label="R145", fillcolor=5, shape=diamond, style=filled]
  508 -> "508R145" [style=solid]
 "508R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  508 -> "508R163d" [label="[IDENTIFIER, EQ, ELLIPSIS, COMMA, DECLTYPE, LESS, GREATER, AUTO]", style=solid]
 "508R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  508 -> "508R294d" [label="[PLUS, MINUS, USING, IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SCOPE, OPEN_SQUARE, CLOSE_SQUARE, COLON, OPEN_BRACE, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, FINAL, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, AND_AND, OR_OR, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, DEREF, DOT, ENUM, EQ_EQ, NOT_EQ, XOR, EXTERN, LESS, GREATER, EXPLICIT, EXPORT, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, REQUIRES, COMPL, PLUS_PLUS, MINUS_MINUS, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME, OVERRIDE]", style=solid]
 "508R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  508 -> "508R1052d" [label="[PLUS, MINUS, USING, IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SCOPE, OPEN_SQUARE, CLOSE_SQUARE, COLON, OPEN_BRACE, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, FINAL, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, AND_AND, OR_OR, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, DEREF, DOT, ENUM, EQ_EQ, NOT_EQ, XOR, EXTERN, LESS, GREATER, EXPLICIT, EXPORT, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, REQUIRES, COMPL, PLUS_PLUS, MINUS_MINUS, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME, OVERRIDE]", style=solid]
 "508R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  508 -> "508R1110d" [label="[PLUS, MINUS, USING, IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SCOPE, OPEN_SQUARE, CLOSE_SQUARE, COLON, OPEN_BRACE, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, FINAL, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, AND_AND, OR_OR, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, DEREF, DOT, ENUM, EQ_EQ, NOT_EQ, XOR, EXTERN, LESS, GREATER, EXPLICIT, EXPORT, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, REQUIRES, COMPL, PLUS_PLUS, MINUS_MINUS, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME, OVERRIDE]", style=solid]
 "508R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  509 [label="State 509\n\l661 nested-name-specifier: nested-name-specifier TEMPLATE • simple-template-id SCOPE\l987 simple-type-specifier: nested-name-specifier TEMPLATE • simple-template-id\l"]
  509 -> 310 [style=solid label="IDENTIFIER"]
  509 -> 1015 [style=dashed label="simple-template-id"]
  509 -> 142 [style=dashed label="template-name"]
  510 [label="State 510\n\l146 class-name: simple-template-id •\l660 nested-name-specifier: nested-name-specifier simple-template-id • SCOPE\l1111 typedef-name: simple-template-id •\l"]
  510 -> 729 [style=solid label="SCOPE"]
  510 -> "510R146d" [label="[SCOPE]", style=solid]
 "510R146d" [label="R146", fillcolor=5, shape=diamond, style=filled]
  510 -> "510R146" [style=solid]
 "510R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  510 -> "510R1111d" [label="[PLUS, MINUS, USING, IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SCOPE, OPEN_SQUARE, CLOSE_SQUARE, COLON, OPEN_BRACE, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, FINAL, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, AND_AND, OR_OR, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, DEREF, DOT, ENUM, EQ_EQ, NOT_EQ, XOR, EXTERN, LESS, GREATER, EXPLICIT, EXPORT, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, REQUIRES, COMPL, PLUS_PLUS, MINUS_MINUS, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME, OVERRIDE]", style=solid]
 "510R1111d" [label="R1111", fillcolor=5, shape=diamond, style=filled]
  511 [label="State 511\n\l756 operator-function-id: OPERATOR overloadable-operator LESS • GREATER\l757                     | OPERATOR overloadable-operator LESS • template-argument-list GREATER\l"]
  511 -> 356 [style=solid label="PLUS"]
  511 -> 357 [style=solid label="MINUS"]
  511 -> 2 [style=solid label="IDENTIFIER"]
  511 -> 358 [style=solid label="OPEN_PAREN"]
  511 -> 359 [style=solid label="AND"]
  511 -> 360 [style=solid label="SCOPE"]
  511 -> 361 [style=solid label="OPEN_SQUARE"]
  511 -> 362 [style=solid label="CO_AWAIT"]
  511 -> 363 [style=solid label="ZERO_LB"]
  511 -> 364 [style=solid label="ZERO_HB"]
  511 -> 365 [style=solid label="SINGLE_QUOTE"]
  511 -> 366 [style=solid label="FALSE"]
  511 -> 367 [style=solid label="TRUE"]
  511 -> 12 [style=solid label="CLASS"]
  511 -> 13 [style=solid label="STRUCT"]
  511 -> 14 [style=solid label="UNION"]
  511 -> 368 [style=solid label="NOEXCEPT"]
  511 -> 17 [style=solid label="OPERATOR"]
  511 -> 18 [style=solid label="CONST"]
  511 -> 19 [style=solid label="VOLATILE"]
  511 -> 26 [style=solid label="DECLTYPE"]
  511 -> 369 [style=solid label="DELETE"]
  511 -> 370 [style=solid label="DOT"]
  511 -> 135 [style=solid label="ENUM"]
  511 -> 184 [style=solid label="UNICODE_8"]
  511 -> 1016 [style=solid label="GREATER"]
  511 -> 371 [style=solid label="MULT"]
  511 -> 199 [style=solid label="DOUBLE_QUOTE"]
  511 -> 372 [style=solid label="ZERO_LX"]
  511 -> 373 [style=solid label="ZERO_HX"]
  511 -> 374 [style=solid label="REQUIRES"]
  511 -> 375 [style=solid label="NEW"]
  511 -> 376 [style=solid label="COMPL"]
  511 -> 377 [style=solid label="NOT"]
  511 -> 378 [style=solid label="PLUS_PLUS"]
  511 -> 379 [style=solid label="MINUS_MINUS"]
  511 -> 380 [style=solid label="THIS"]
  511 -> 36 [style=solid label="AUTO"]
  511 -> 381 [style=solid label="NULLPTR"]
  511 -> 382 [style=solid label="DYNAMIC_CAST"]
  511 -> 383 [style=solid label="STATIC_CAST"]
  511 -> 384 [style=solid label="REINTERPRET_CAST"]
  511 -> 385 [style=solid label="CONST_CAST"]
  511 -> 386 [style=solid label="TYPEID"]
  511 -> 37 [style=solid label="CHAR"]
  511 -> 38 [style=solid label="CHAR8_T"]
  511 -> 39 [style=solid label="CHAR16_T"]
  511 -> 40 [style=solid label="CHAR32_T"]
  511 -> 41 [style=solid label="WCHAR_T"]
  511 -> 42 [style=solid label="BOOL"]
  511 -> 43 [style=solid label="SHORT"]
  511 -> 44 [style=solid label="INT"]
  511 -> 45 [style=solid label="LONG"]
  511 -> 46 [style=solid label="SIGNED"]
  511 -> 47 [style=solid label="UNSIGNED"]
  511 -> 48 [style=solid label="FLOAT"]
  511 -> 49 [style=solid label="DOUBLE"]
  511 -> 50 [style=solid label="VOID"]
  511 -> 55 [style=solid label="TYPENAME"]
  511 -> 387 [style=solid label="SIZEOF"]
  511 -> 388 [style=solid label="ALIGNOF"]
  511 -> 389 [style=solid label="'0'"]
  511 -> 390 [style=solid label="'1'"]
  511 -> 391 [style=solid label="'2'"]
  511 -> 392 [style=solid label="'3'"]
  511 -> 393 [style=solid label="'4'"]
  511 -> 394 [style=solid label="'5'"]
  511 -> 395 [style=solid label="'6'"]
  511 -> 396 [style=solid label="'7'"]
  511 -> 397 [style=solid label="'8'"]
  511 -> 398 [style=solid label="'9'"]
  511 -> 205 [style=solid label="'u'"]
  511 -> 206 [style=solid label="'U'"]
  511 -> 207 [style=solid label="'L'"]
  511 -> 208 [style=solid label="'R'"]
  511 -> 399 [style=dashed label="additive-expression"]
  511 -> 400 [style=dashed label="and-expression"]
  511 -> 401 [style=dashed label="await-expression"]
  511 -> 402 [style=dashed label="binary-literal"]
  511 -> 403 [style=dashed label="boolean-literal"]
  511 -> 404 [style=dashed label="cast-expression"]
  511 -> 405 [style=dashed label="character-literal"]
  511 -> 209 [style=dashed label="class-key"]
  511 -> 65 [style=dashed label="class-name"]
  511 -> 406 [style=dashed label="compare-expression"]
  511 -> 67 [style=dashed label="concept-name"]
  511 -> 407 [style=dashed label="conditional-expression"]
  511 -> 635 [style=dashed label="constant-expression"]
  511 -> 68 [style=dashed label="conversion-function-id"]
  511 -> 69 [style=dashed label="cv-qualifier"]
  511 -> 409 [style=dashed label="decimal-floating-point-literal"]
  511 -> 410 [style=dashed label="decimal-literal"]
  511 -> 76 [style=dashed label="decltype-specifier"]
  511 -> 411 [style=dashed label="delete-expression"]
  511 -> 412 [style=dashed label="digit"]
  511 -> 413 [style=dashed label="digit-sequence"]
  511 -> 79 [style=dashed label="elaborated-enum-specifier"]
  511 -> 80 [style=dashed label="elaborated-type-specifier"]
  511 -> 414 [style=dashed label="encoding-prefix"]
  511 -> 84 [style=dashed label="enum-name"]
  511 -> 415 [style=dashed label="equality-expression"]
  511 -> 416 [style=dashed label="exclusive-or-expression"]
  511 -> 417 [style=dashed label="floating-point-literal"]
  511 -> 418 [style=dashed label="fold-expression"]
  511 -> 419 [style=dashed label="fractional-constant"]
  511 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  511 -> 421 [style=dashed label="hexadecimal-literal"]
  511 -> 422 [style=dashed label="hexadecimal-prefix"]
  511 -> 636 [style=dashed label="id-expression"]
  511 -> 424 [style=dashed label="inclusive-or-expression"]
  511 -> 425 [style=dashed label="integer-literal"]
  511 -> 426 [style=dashed label="lambda-expression"]
  511 -> 427 [style=dashed label="lambda-introducer"]
  511 -> 428 [style=dashed label="literal"]
  511 -> 95 [style=dashed label="literal-operator-id"]
  511 -> 429 [style=dashed label="logical-and-expression"]
  511 -> 430 [style=dashed label="logical-or-expression"]
  511 -> 431 [style=dashed label="multiplicative-expression"]
  511 -> 99 [style=dashed label="namespace-alias"]
  511 -> 102 [style=dashed label="namespace-name"]
  511 -> 432 [style=dashed label="nested-name-specifier"]
  511 -> 433 [style=dashed label="new-expression"]
  511 -> 434 [style=dashed label="noexcept-expression"]
  511 -> 435 [style=dashed label="nonzero-digit"]
  511 -> 436 [style=dashed label="octal-literal"]
  511 -> 108 [style=dashed label="operator-function-id"]
  511 -> 109 [style=dashed label="placeholder-type-specifier"]
  511 -> 437 [style=dashed label="pm-expression"]
  511 -> 438 [style=dashed label="pointer-literal"]
  511 -> 439 [style=dashed label="postfix-expression"]
  511 -> 440 [style=dashed label="primary-expression"]
  511 -> 112 [style=dashed label="qualified-id"]
  511 -> 441 [style=dashed label="relational-expression"]
  511 -> 442 [style=dashed label="requires-expression"]
  511 -> 443 [style=dashed label="shift-expression"]
  511 -> 114 [style=dashed label="simple-template-id"]
  511 -> 444 [style=dashed label="simple-type-specifier"]
  511 -> 445 [style=dashed label="string-literal"]
  511 -> 637 [style=dashed label="template-argument"]
  511 -> 1017 [style=dashed label="template-argument-list"]
  511 -> 120 [style=dashed label="template-id"]
  511 -> 215 [style=dashed label="template-name"]
  511 -> 123 [style=dashed label="type-constraint"]
  511 -> 639 [style=dashed label="type-id"]
  511 -> 124 [style=dashed label="type-name"]
  511 -> 216 [style=dashed label="type-specifier"]
  511 -> 447 [style=dashed label="type-specifier-seq"]
  511 -> 126 [style=dashed label="typedef-name"]
  511 -> 448 [style=dashed label="typename-specifier"]
  511 -> 449 [style=dashed label="unary-expression"]
  511 -> 450 [style=dashed label="unary-operator"]
  511 -> 129 [style=dashed label="unqualified-id"]
  511 -> 451 [style=dashed label="user-defined-character-literal"]
  511 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  511 -> 453 [style=dashed label="user-defined-integer-literal"]
  511 -> 454 [style=dashed label="user-defined-literal"]
  511 -> 455 [style=dashed label="user-defined-string-literal"]
  512 [label="State 512\n\l561 literal-operator-id: OPERATOR string-literal IDENTIFIER •\l1115 ud-suffix: IDENTIFIER •\l"]
  512 -> "512R561" [style=solid]
 "512R561" [label="R561", fillcolor=3, shape=diamond, style=filled]
  512 -> "512R1115d" [label="[PLUS, MINUS, USING, IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SCOPE, OPEN_SQUARE, CLOSE_SQUARE, COLON, OPEN_BRACE, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, FINAL, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, AND_AND, OR_OR, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, DEREF, DOT, ENUM, EQ_EQ, NOT_EQ, XOR, EXTERN, LESS, GREATER, EXPLICIT, EXPORT, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, REQUIRES, COMPL, PLUS_PLUS, MINUS_MINUS, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME, OVERRIDE]", style=solid]
 "512R1115d" [label="R1115", fillcolor=5, shape=diamond, style=filled]
  513 [label="State 513\n\l1163 user-defined-string-literal: string-literal ud-suffix •\l"]
  513 -> "513R1163" [style=solid]
 "513R1163" [label="R1163", fillcolor=3, shape=diamond, style=filled]
  514 [label="State 514\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l1108 type-specifier-seq: type-specifier attribute-specifier-seq •\l"]
  514 -> 4 [style=solid label="ALIGNAS"]
  514 -> 10 [style=solid label="OPEN_SQUARE"]
  514 -> 57 [style=dashed label="alignment-specifier"]
  514 -> 260 [style=dashed label="attribute-specifier"]
  514 -> "514R1108d" [label="[ALIGNAS, OPEN_SQUARE]", style=solid]
 "514R1108d" [label="R1108", fillcolor=5, shape=diamond, style=filled]
  514 -> "514R1108" [style=solid]
 "514R1108" [label="R1108", fillcolor=3, shape=diamond, style=filled]
  515 [label="State 515\n\l1109 type-specifier-seq: type-specifier type-specifier-seq •\l"]
  515 -> "515R1109" [style=solid]
 "515R1109" [label="R1109", fillcolor=3, shape=diamond, style=filled]
  516 [label="State 516\n\l181 conversion-type-id: type-specifier-seq conversion-declarator •\l"]
  516 -> "516R181" [style=solid]
 "516R181" [label="R181", fillcolor=3, shape=diamond, style=filled]
  517 [label="State 517\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l901 ptr-operator: nested-name-specifier • MULT\l902             | nested-name-specifier • MULT attribute-specifier-seq\l903             | nested-name-specifier • MULT cv-qualifier-seq\l904             | nested-name-specifier • MULT attribute-specifier-seq cv-qualifier-seq\l"]
  517 -> 1018 [style=solid label="IDENTIFIER"]
  517 -> 350 [style=solid label="TEMPLATE"]
  517 -> 322 [style=solid label="MULT"]
  517 -> 534 [style=dashed label="simple-template-id"]
  517 -> 142 [style=dashed label="template-name"]
  518 [label="State 518\n\l177 conversion-declarator: ptr-operator •\l178                      | ptr-operator • conversion-declarator\l"]
  518 -> 253 [style=solid label="IDENTIFIER"]
  518 -> 7 [style=solid label="AND"]
  518 -> 9 [style=solid label="SCOPE"]
  518 -> 16 [style=solid label="AND_AND"]
  518 -> 134 [style=solid label="DECLTYPE"]
  518 -> 31 [style=solid label="MULT"]
  518 -> 65 [style=dashed label="class-name"]
  518 -> 1019 [style=dashed label="conversion-declarator"]
  518 -> 138 [style=dashed label="decltype-specifier"]
  518 -> 84 [style=dashed label="enum-name"]
  518 -> 99 [style=dashed label="namespace-alias"]
  518 -> 102 [style=dashed label="namespace-name"]
  518 -> 517 [style=dashed label="nested-name-specifier"]
  518 -> 518 [style=dashed label="ptr-operator"]
  518 -> 141 [style=dashed label="simple-template-id"]
  518 -> 142 [style=dashed label="template-name"]
  518 -> 143 [style=dashed label="type-name"]
  518 -> 126 [style=dashed label="typedef-name"]
  518 -> "518R177d" [label="[IDENTIFIER, AND, SCOPE, AND_AND, DECLTYPE, MULT]", style=solid]
 "518R177d" [label="R177", fillcolor=5, shape=diamond, style=filled]
  518 -> "518R177" [style=solid]
 "518R177" [label="R177", fillcolor=3, shape=diamond, style=filled]
  519 [label="State 519\n\l643 named-namespace-definition: INLINE NAMESPACE IDENTIFIER • OPEN_BRACE namespace-body CLOSE_BRACE\l"]
  519 -> 1020 [style=solid label="OPEN_BRACE"]
  520 [label="State 520\n\l1136 unnamed-namespace-definition: INLINE NAMESPACE OPEN_BRACE • namespace-body CLOSE_BRACE\l"]
  520 -> 1 [style=solid label="USING"]
  520 -> 2 [style=solid label="IDENTIFIER"]
  520 -> 3 [style=solid label="SEMICOLON"]
  520 -> 4 [style=solid label="ALIGNAS"]
  520 -> 5 [style=solid label="OPEN_PAREN"]
  520 -> 6 [style=solid label="ELLIPSIS"]
  520 -> 7 [style=solid label="AND"]
  520 -> 8 [style=solid label="ASM"]
  520 -> 9 [style=solid label="SCOPE"]
  520 -> 10 [style=solid label="OPEN_SQUARE"]
  520 -> 11 [style=solid label="VIRTUAL"]
  520 -> 12 [style=solid label="CLASS"]
  520 -> 13 [style=solid label="STRUCT"]
  520 -> 14 [style=solid label="UNION"]
  520 -> 15 [style=solid label="TEMPLATE"]
  520 -> 16 [style=solid label="AND_AND"]
  520 -> 17 [style=solid label="OPERATOR"]
  520 -> 18 [style=solid label="CONST"]
  520 -> 19 [style=solid label="VOLATILE"]
  520 -> 20 [style=solid label="FRIEND"]
  520 -> 21 [style=solid label="TYPEDEF"]
  520 -> 22 [style=solid label="CONSTEXPR"]
  520 -> 23 [style=solid label="CONSTEVAL"]
  520 -> 24 [style=solid label="CONSTINIT"]
  520 -> 25 [style=solid label="INLINE"]
  520 -> 26 [style=solid label="DECLTYPE"]
  520 -> 27 [style=solid label="ENUM"]
  520 -> 28 [style=solid label="EXTERN"]
  520 -> 29 [style=solid label="EXPLICIT"]
  520 -> 157 [style=solid label="EXPORT"]
  520 -> 31 [style=solid label="MULT"]
  520 -> 33 [style=solid label="IMPORT"]
  520 -> 34 [style=solid label="NAMESPACE"]
  520 -> 35 [style=solid label="COMPL"]
  520 -> 36 [style=solid label="AUTO"]
  520 -> 37 [style=solid label="CHAR"]
  520 -> 38 [style=solid label="CHAR8_T"]
  520 -> 39 [style=solid label="CHAR16_T"]
  520 -> 40 [style=solid label="CHAR32_T"]
  520 -> 41 [style=solid label="WCHAR_T"]
  520 -> 42 [style=solid label="BOOL"]
  520 -> 43 [style=solid label="SHORT"]
  520 -> 44 [style=solid label="INT"]
  520 -> 45 [style=solid label="LONG"]
  520 -> 46 [style=solid label="SIGNED"]
  520 -> 47 [style=solid label="UNSIGNED"]
  520 -> 48 [style=solid label="FLOAT"]
  520 -> 49 [style=solid label="DOUBLE"]
  520 -> 50 [style=solid label="VOID"]
  520 -> 51 [style=solid label="STATIC_ASSERT"]
  520 -> 52 [style=solid label="STATIC"]
  520 -> 53 [style=solid label="THREAD_LOCAL"]
  520 -> 54 [style=solid label="MUTABLE"]
  520 -> 55 [style=solid label="TYPENAME"]
  520 -> 56 [style=dashed label="alias-declaration"]
  520 -> 57 [style=dashed label="alignment-specifier"]
  520 -> 58 [style=dashed label="asm-declaration"]
  520 -> 59 [style=dashed label="attribute-declaration"]
  520 -> 60 [style=dashed label="attribute-specifier"]
  520 -> 61 [style=dashed label="attribute-specifier-seq"]
  520 -> 62 [style=dashed label="block-declaration"]
  520 -> 63 [style=dashed label="class-head"]
  520 -> 64 [style=dashed label="class-key"]
  520 -> 65 [style=dashed label="class-name"]
  520 -> 66 [style=dashed label="class-specifier"]
  520 -> 67 [style=dashed label="concept-name"]
  520 -> 68 [style=dashed label="conversion-function-id"]
  520 -> 69 [style=dashed label="cv-qualifier"]
  520 -> 70 [style=dashed label="decl-specifier"]
  520 -> 71 [style=dashed label="decl-specifier-seq"]
  520 -> 72 [style=dashed label="declaration"]
  520 -> 566 [style=dashed label="declaration-seq"]
  520 -> 74 [style=dashed label="declarator"]
  520 -> 75 [style=dashed label="declarator-id"]
  520 -> 76 [style=dashed label="decltype-specifier"]
  520 -> 77 [style=dashed label="deduction-guide"]
  520 -> 78 [style=dashed label="defining-type-specifier"]
  520 -> 79 [style=dashed label="elaborated-enum-specifier"]
  520 -> 80 [style=dashed label="elaborated-type-specifier"]
  520 -> 81 [style=dashed label="empty-declaration"]
  520 -> 82 [style=dashed label="enum-head"]
  520 -> 83 [style=dashed label="enum-key"]
  520 -> 84 [style=dashed label="enum-name"]
  520 -> 85 [style=dashed label="enum-specifier"]
  520 -> 86 [style=dashed label="explicit-instantiation"]
  520 -> 87 [style=dashed label="explicit-specialization"]
  520 -> 88 [style=dashed label="explicit-specifier"]
  520 -> 89 [style=dashed label="export-declaration"]
  520 -> 90 [style=dashed label="function-definition"]
  520 -> 91 [style=dashed label="function-specifier"]
  520 -> 93 [style=dashed label="id-expression"]
  520 -> 94 [style=dashed label="linkage-specification"]
  520 -> 95 [style=dashed label="literal-operator-id"]
  520 -> 97 [style=dashed label="module-import-declaration"]
  520 -> 98 [style=dashed label="named-namespace-definition"]
  520 -> 99 [style=dashed label="namespace-alias"]
  520 -> 100 [style=dashed label="namespace-alias-definition"]
  520 -> 1021 [style=dashed label="namespace-body"]
  520 -> 101 [style=dashed label="namespace-definition"]
  520 -> 102 [style=dashed label="namespace-name"]
  520 -> 103 [style=dashed label="nested-name-specifier"]
  520 -> 104 [style=dashed label="nested-namespace-definition"]
  520 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  520 -> 106 [style=dashed label="noptr-declarator"]
  520 -> 107 [style=dashed label="opaque-enum-declaration"]
  520 -> 108 [style=dashed label="operator-function-id"]
  520 -> 109 [style=dashed label="placeholder-type-specifier"]
  520 -> 110 [style=dashed label="ptr-declarator"]
  520 -> 111 [style=dashed label="ptr-operator"]
  520 -> 112 [style=dashed label="qualified-id"]
  520 -> 113 [style=dashed label="simple-declaration"]
  520 -> 114 [style=dashed label="simple-template-id"]
  520 -> 115 [style=dashed label="simple-type-specifier"]
  520 -> 116 [style=dashed label="static_assert-declaration"]
  520 -> 117 [style=dashed label="storage-class-specifier"]
  520 -> 118 [style=dashed label="template-declaration"]
  520 -> 119 [style=dashed label="template-head"]
  520 -> 120 [style=dashed label="template-id"]
  520 -> 121 [style=dashed label="template-name"]
  520 -> 123 [style=dashed label="type-constraint"]
  520 -> 124 [style=dashed label="type-name"]
  520 -> 125 [style=dashed label="type-specifier"]
  520 -> 126 [style=dashed label="typedef-name"]
  520 -> 127 [style=dashed label="typename-specifier"]
  520 -> 128 [style=dashed label="unnamed-namespace-definition"]
  520 -> 129 [style=dashed label="unqualified-id"]
  520 -> 130 [style=dashed label="using-declaration"]
  520 -> 131 [style=dashed label="using-directive"]
  520 -> 132 [style=dashed label="using-enum-declaration"]
  521 [label="State 521\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l645 named-namespace-definition: INLINE NAMESPACE attribute-specifier-seq • IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l1138 unnamed-namespace-definition: INLINE NAMESPACE attribute-specifier-seq • OPEN_BRACE namespace-body CLOSE_BRACE\l"]
  521 -> 1022 [style=solid label="IDENTIFIER"]
  521 -> 4 [style=solid label="ALIGNAS"]
  521 -> 10 [style=solid label="OPEN_SQUARE"]
  521 -> 1023 [style=solid label="OPEN_BRACE"]
  521 -> 57 [style=dashed label="alignment-specifier"]
  521 -> 260 [style=dashed label="attribute-specifier"]
  522 [label="State 522\n\l849 placeholder-type-specifier: AUTO •\l851                           | DECLTYPE OPEN_PAREN AUTO • CLOSE_PAREN\l"]
  522 -> 1024 [style=solid label="CLOSE_PAREN"]
  522 -> "522R849" [style=solid]
 "522R849" [label="R849", fillcolor=3, shape=diamond, style=filled]
  523 [label="State 523\n\l1057 throw-expression: THROW •\l1058                 | THROW • assignment-expression\l"]
  523 -> 356 [style=solid label="PLUS"]
  523 -> 357 [style=solid label="MINUS"]
  523 -> 2 [style=solid label="IDENTIFIER"]
  523 -> 358 [style=solid label="OPEN_PAREN"]
  523 -> 359 [style=solid label="AND"]
  523 -> 360 [style=solid label="SCOPE"]
  523 -> 361 [style=solid label="OPEN_SQUARE"]
  523 -> 362 [style=solid label="CO_AWAIT"]
  523 -> 363 [style=solid label="ZERO_LB"]
  523 -> 364 [style=solid label="ZERO_HB"]
  523 -> 365 [style=solid label="SINGLE_QUOTE"]
  523 -> 366 [style=solid label="FALSE"]
  523 -> 367 [style=solid label="TRUE"]
  523 -> 368 [style=solid label="NOEXCEPT"]
  523 -> 17 [style=solid label="OPERATOR"]
  523 -> 26 [style=solid label="DECLTYPE"]
  523 -> 369 [style=solid label="DELETE"]
  523 -> 370 [style=solid label="DOT"]
  523 -> 184 [style=solid label="UNICODE_8"]
  523 -> 371 [style=solid label="MULT"]
  523 -> 199 [style=solid label="DOUBLE_QUOTE"]
  523 -> 372 [style=solid label="ZERO_LX"]
  523 -> 373 [style=solid label="ZERO_HX"]
  523 -> 374 [style=solid label="REQUIRES"]
  523 -> 375 [style=solid label="NEW"]
  523 -> 376 [style=solid label="COMPL"]
  523 -> 377 [style=solid label="NOT"]
  523 -> 378 [style=solid label="PLUS_PLUS"]
  523 -> 379 [style=solid label="MINUS_MINUS"]
  523 -> 380 [style=solid label="THIS"]
  523 -> 36 [style=solid label="AUTO"]
  523 -> 381 [style=solid label="NULLPTR"]
  523 -> 382 [style=solid label="DYNAMIC_CAST"]
  523 -> 383 [style=solid label="STATIC_CAST"]
  523 -> 384 [style=solid label="REINTERPRET_CAST"]
  523 -> 385 [style=solid label="CONST_CAST"]
  523 -> 386 [style=solid label="TYPEID"]
  523 -> 37 [style=solid label="CHAR"]
  523 -> 38 [style=solid label="CHAR8_T"]
  523 -> 39 [style=solid label="CHAR16_T"]
  523 -> 40 [style=solid label="CHAR32_T"]
  523 -> 41 [style=solid label="WCHAR_T"]
  523 -> 42 [style=solid label="BOOL"]
  523 -> 43 [style=solid label="SHORT"]
  523 -> 44 [style=solid label="INT"]
  523 -> 45 [style=solid label="LONG"]
  523 -> 46 [style=solid label="SIGNED"]
  523 -> 47 [style=solid label="UNSIGNED"]
  523 -> 48 [style=solid label="FLOAT"]
  523 -> 49 [style=solid label="DOUBLE"]
  523 -> 50 [style=solid label="VOID"]
  523 -> 523 [style=solid label="THROW"]
  523 -> 55 [style=solid label="TYPENAME"]
  523 -> 387 [style=solid label="SIZEOF"]
  523 -> 388 [style=solid label="ALIGNOF"]
  523 -> 524 [style=solid label="CO_YIELD"]
  523 -> 389 [style=solid label="'0'"]
  523 -> 390 [style=solid label="'1'"]
  523 -> 391 [style=solid label="'2'"]
  523 -> 392 [style=solid label="'3'"]
  523 -> 393 [style=solid label="'4'"]
  523 -> 394 [style=solid label="'5'"]
  523 -> 395 [style=solid label="'6'"]
  523 -> 396 [style=solid label="'7'"]
  523 -> 397 [style=solid label="'8'"]
  523 -> 398 [style=solid label="'9'"]
  523 -> 205 [style=solid label="'u'"]
  523 -> 206 [style=solid label="'U'"]
  523 -> 207 [style=solid label="'L'"]
  523 -> 208 [style=solid label="'R'"]
  523 -> 399 [style=dashed label="additive-expression"]
  523 -> 400 [style=dashed label="and-expression"]
  523 -> 1025 [style=dashed label="assignment-expression"]
  523 -> 401 [style=dashed label="await-expression"]
  523 -> 402 [style=dashed label="binary-literal"]
  523 -> 403 [style=dashed label="boolean-literal"]
  523 -> 404 [style=dashed label="cast-expression"]
  523 -> 405 [style=dashed label="character-literal"]
  523 -> 65 [style=dashed label="class-name"]
  523 -> 406 [style=dashed label="compare-expression"]
  523 -> 67 [style=dashed label="concept-name"]
  523 -> 526 [style=dashed label="conditional-expression"]
  523 -> 68 [style=dashed label="conversion-function-id"]
  523 -> 409 [style=dashed label="decimal-floating-point-literal"]
  523 -> 410 [style=dashed label="decimal-literal"]
  523 -> 76 [style=dashed label="decltype-specifier"]
  523 -> 411 [style=dashed label="delete-expression"]
  523 -> 412 [style=dashed label="digit"]
  523 -> 413 [style=dashed label="digit-sequence"]
  523 -> 414 [style=dashed label="encoding-prefix"]
  523 -> 84 [style=dashed label="enum-name"]
  523 -> 415 [style=dashed label="equality-expression"]
  523 -> 416 [style=dashed label="exclusive-or-expression"]
  523 -> 417 [style=dashed label="floating-point-literal"]
  523 -> 418 [style=dashed label="fold-expression"]
  523 -> 419 [style=dashed label="fractional-constant"]
  523 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  523 -> 421 [style=dashed label="hexadecimal-literal"]
  523 -> 422 [style=dashed label="hexadecimal-prefix"]
  523 -> 423 [style=dashed label="id-expression"]
  523 -> 424 [style=dashed label="inclusive-or-expression"]
  523 -> 425 [style=dashed label="integer-literal"]
  523 -> 426 [style=dashed label="lambda-expression"]
  523 -> 427 [style=dashed label="lambda-introducer"]
  523 -> 428 [style=dashed label="literal"]
  523 -> 95 [style=dashed label="literal-operator-id"]
  523 -> 429 [style=dashed label="logical-and-expression"]
  523 -> 528 [style=dashed label="logical-or-expression"]
  523 -> 431 [style=dashed label="multiplicative-expression"]
  523 -> 99 [style=dashed label="namespace-alias"]
  523 -> 102 [style=dashed label="namespace-name"]
  523 -> 432 [style=dashed label="nested-name-specifier"]
  523 -> 433 [style=dashed label="new-expression"]
  523 -> 434 [style=dashed label="noexcept-expression"]
  523 -> 435 [style=dashed label="nonzero-digit"]
  523 -> 436 [style=dashed label="octal-literal"]
  523 -> 108 [style=dashed label="operator-function-id"]
  523 -> 109 [style=dashed label="placeholder-type-specifier"]
  523 -> 437 [style=dashed label="pm-expression"]
  523 -> 438 [style=dashed label="pointer-literal"]
  523 -> 439 [style=dashed label="postfix-expression"]
  523 -> 440 [style=dashed label="primary-expression"]
  523 -> 112 [style=dashed label="qualified-id"]
  523 -> 441 [style=dashed label="relational-expression"]
  523 -> 442 [style=dashed label="requires-expression"]
  523 -> 443 [style=dashed label="shift-expression"]
  523 -> 114 [style=dashed label="simple-template-id"]
  523 -> 529 [style=dashed label="simple-type-specifier"]
  523 -> 445 [style=dashed label="string-literal"]
  523 -> 120 [style=dashed label="template-id"]
  523 -> 215 [style=dashed label="template-name"]
  523 -> 530 [style=dashed label="throw-expression"]
  523 -> 123 [style=dashed label="type-constraint"]
  523 -> 124 [style=dashed label="type-name"]
  523 -> 126 [style=dashed label="typedef-name"]
  523 -> 531 [style=dashed label="typename-specifier"]
  523 -> 449 [style=dashed label="unary-expression"]
  523 -> 450 [style=dashed label="unary-operator"]
  523 -> 129 [style=dashed label="unqualified-id"]
  523 -> 451 [style=dashed label="user-defined-character-literal"]
  523 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  523 -> 453 [style=dashed label="user-defined-integer-literal"]
  523 -> 454 [style=dashed label="user-defined-literal"]
  523 -> 455 [style=dashed label="user-defined-string-literal"]
  523 -> 532 [style=dashed label="yield-expression"]
  523 -> "523R1057" [style=solid]
 "523R1057" [label="R1057", fillcolor=3, shape=diamond, style=filled]
  524 [label="State 524\n\l1180 yield-expression: CO_YIELD • assignment-expression\l1181                 | CO_YIELD • braced-init-list\l"]
  524 -> 356 [style=solid label="PLUS"]
  524 -> 357 [style=solid label="MINUS"]
  524 -> 2 [style=solid label="IDENTIFIER"]
  524 -> 358 [style=solid label="OPEN_PAREN"]
  524 -> 359 [style=solid label="AND"]
  524 -> 360 [style=solid label="SCOPE"]
  524 -> 361 [style=solid label="OPEN_SQUARE"]
  524 -> 362 [style=solid label="CO_AWAIT"]
  524 -> 935 [style=solid label="OPEN_BRACE"]
  524 -> 363 [style=solid label="ZERO_LB"]
  524 -> 364 [style=solid label="ZERO_HB"]
  524 -> 365 [style=solid label="SINGLE_QUOTE"]
  524 -> 366 [style=solid label="FALSE"]
  524 -> 367 [style=solid label="TRUE"]
  524 -> 368 [style=solid label="NOEXCEPT"]
  524 -> 17 [style=solid label="OPERATOR"]
  524 -> 26 [style=solid label="DECLTYPE"]
  524 -> 369 [style=solid label="DELETE"]
  524 -> 370 [style=solid label="DOT"]
  524 -> 184 [style=solid label="UNICODE_8"]
  524 -> 371 [style=solid label="MULT"]
  524 -> 199 [style=solid label="DOUBLE_QUOTE"]
  524 -> 372 [style=solid label="ZERO_LX"]
  524 -> 373 [style=solid label="ZERO_HX"]
  524 -> 374 [style=solid label="REQUIRES"]
  524 -> 375 [style=solid label="NEW"]
  524 -> 376 [style=solid label="COMPL"]
  524 -> 377 [style=solid label="NOT"]
  524 -> 378 [style=solid label="PLUS_PLUS"]
  524 -> 379 [style=solid label="MINUS_MINUS"]
  524 -> 380 [style=solid label="THIS"]
  524 -> 36 [style=solid label="AUTO"]
  524 -> 381 [style=solid label="NULLPTR"]
  524 -> 382 [style=solid label="DYNAMIC_CAST"]
  524 -> 383 [style=solid label="STATIC_CAST"]
  524 -> 384 [style=solid label="REINTERPRET_CAST"]
  524 -> 385 [style=solid label="CONST_CAST"]
  524 -> 386 [style=solid label="TYPEID"]
  524 -> 37 [style=solid label="CHAR"]
  524 -> 38 [style=solid label="CHAR8_T"]
  524 -> 39 [style=solid label="CHAR16_T"]
  524 -> 40 [style=solid label="CHAR32_T"]
  524 -> 41 [style=solid label="WCHAR_T"]
  524 -> 42 [style=solid label="BOOL"]
  524 -> 43 [style=solid label="SHORT"]
  524 -> 44 [style=solid label="INT"]
  524 -> 45 [style=solid label="LONG"]
  524 -> 46 [style=solid label="SIGNED"]
  524 -> 47 [style=solid label="UNSIGNED"]
  524 -> 48 [style=solid label="FLOAT"]
  524 -> 49 [style=solid label="DOUBLE"]
  524 -> 50 [style=solid label="VOID"]
  524 -> 523 [style=solid label="THROW"]
  524 -> 55 [style=solid label="TYPENAME"]
  524 -> 387 [style=solid label="SIZEOF"]
  524 -> 388 [style=solid label="ALIGNOF"]
  524 -> 524 [style=solid label="CO_YIELD"]
  524 -> 389 [style=solid label="'0'"]
  524 -> 390 [style=solid label="'1'"]
  524 -> 391 [style=solid label="'2'"]
  524 -> 392 [style=solid label="'3'"]
  524 -> 393 [style=solid label="'4'"]
  524 -> 394 [style=solid label="'5'"]
  524 -> 395 [style=solid label="'6'"]
  524 -> 396 [style=solid label="'7'"]
  524 -> 397 [style=solid label="'8'"]
  524 -> 398 [style=solid label="'9'"]
  524 -> 205 [style=solid label="'u'"]
  524 -> 206 [style=solid label="'U'"]
  524 -> 207 [style=solid label="'L'"]
  524 -> 208 [style=solid label="'R'"]
  524 -> 399 [style=dashed label="additive-expression"]
  524 -> 400 [style=dashed label="and-expression"]
  524 -> 1026 [style=dashed label="assignment-expression"]
  524 -> 401 [style=dashed label="await-expression"]
  524 -> 402 [style=dashed label="binary-literal"]
  524 -> 403 [style=dashed label="boolean-literal"]
  524 -> 1027 [style=dashed label="braced-init-list"]
  524 -> 404 [style=dashed label="cast-expression"]
  524 -> 405 [style=dashed label="character-literal"]
  524 -> 65 [style=dashed label="class-name"]
  524 -> 406 [style=dashed label="compare-expression"]
  524 -> 67 [style=dashed label="concept-name"]
  524 -> 526 [style=dashed label="conditional-expression"]
  524 -> 68 [style=dashed label="conversion-function-id"]
  524 -> 409 [style=dashed label="decimal-floating-point-literal"]
  524 -> 410 [style=dashed label="decimal-literal"]
  524 -> 76 [style=dashed label="decltype-specifier"]
  524 -> 411 [style=dashed label="delete-expression"]
  524 -> 412 [style=dashed label="digit"]
  524 -> 413 [style=dashed label="digit-sequence"]
  524 -> 414 [style=dashed label="encoding-prefix"]
  524 -> 84 [style=dashed label="enum-name"]
  524 -> 415 [style=dashed label="equality-expression"]
  524 -> 416 [style=dashed label="exclusive-or-expression"]
  524 -> 417 [style=dashed label="floating-point-literal"]
  524 -> 418 [style=dashed label="fold-expression"]
  524 -> 419 [style=dashed label="fractional-constant"]
  524 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  524 -> 421 [style=dashed label="hexadecimal-literal"]
  524 -> 422 [style=dashed label="hexadecimal-prefix"]
  524 -> 423 [style=dashed label="id-expression"]
  524 -> 424 [style=dashed label="inclusive-or-expression"]
  524 -> 425 [style=dashed label="integer-literal"]
  524 -> 426 [style=dashed label="lambda-expression"]
  524 -> 427 [style=dashed label="lambda-introducer"]
  524 -> 428 [style=dashed label="literal"]
  524 -> 95 [style=dashed label="literal-operator-id"]
  524 -> 429 [style=dashed label="logical-and-expression"]
  524 -> 528 [style=dashed label="logical-or-expression"]
  524 -> 431 [style=dashed label="multiplicative-expression"]
  524 -> 99 [style=dashed label="namespace-alias"]
  524 -> 102 [style=dashed label="namespace-name"]
  524 -> 432 [style=dashed label="nested-name-specifier"]
  524 -> 433 [style=dashed label="new-expression"]
  524 -> 434 [style=dashed label="noexcept-expression"]
  524 -> 435 [style=dashed label="nonzero-digit"]
  524 -> 436 [style=dashed label="octal-literal"]
  524 -> 108 [style=dashed label="operator-function-id"]
  524 -> 109 [style=dashed label="placeholder-type-specifier"]
  524 -> 437 [style=dashed label="pm-expression"]
  524 -> 438 [style=dashed label="pointer-literal"]
  524 -> 439 [style=dashed label="postfix-expression"]
  524 -> 440 [style=dashed label="primary-expression"]
  524 -> 112 [style=dashed label="qualified-id"]
  524 -> 441 [style=dashed label="relational-expression"]
  524 -> 442 [style=dashed label="requires-expression"]
  524 -> 443 [style=dashed label="shift-expression"]
  524 -> 114 [style=dashed label="simple-template-id"]
  524 -> 529 [style=dashed label="simple-type-specifier"]
  524 -> 445 [style=dashed label="string-literal"]
  524 -> 120 [style=dashed label="template-id"]
  524 -> 215 [style=dashed label="template-name"]
  524 -> 530 [style=dashed label="throw-expression"]
  524 -> 123 [style=dashed label="type-constraint"]
  524 -> 124 [style=dashed label="type-name"]
  524 -> 126 [style=dashed label="typedef-name"]
  524 -> 531 [style=dashed label="typename-specifier"]
  524 -> 449 [style=dashed label="unary-expression"]
  524 -> 450 [style=dashed label="unary-operator"]
  524 -> 129 [style=dashed label="unqualified-id"]
  524 -> 451 [style=dashed label="user-defined-character-literal"]
  524 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  524 -> 453 [style=dashed label="user-defined-integer-literal"]
  524 -> 454 [style=dashed label="user-defined-literal"]
  524 -> 455 [style=dashed label="user-defined-string-literal"]
  524 -> 532 [style=dashed label="yield-expression"]
  525 [label="State 525\n\l334 expression: assignment-expression •\l"]
  525 -> "525R334" [style=solid]
 "525R334" [label="R334", fillcolor=3, shape=diamond, style=filled]
  526 [label="State 526\n\l 23 assignment-expression: conditional-expression •\l"]
  526 -> "526R23" [style=solid]
 "526R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  527 [label="State 527\n\l230 decltype-specifier: DECLTYPE OPEN_PAREN expression • CLOSE_PAREN\l335 expression: expression • COMMA assignment-expression\l"]
  527 -> 1028 [style=solid label="CLOSE_PAREN"]
  527 -> 1029 [style=solid label="COMMA"]
  528 [label="State 528\n\l 26 assignment-expression: logical-or-expression • assignment-operator initializer-clause\l169 conditional-expression: logical-or-expression •\l170                       | logical-or-expression • QUERY expression COLON assignment-expression\l566 logical-or-expression: logical-or-expression • OR_OR logical-and-expression\l"]
  528 -> 1030 [style=solid label="EQ"]
  528 -> 1031 [style=solid label="MULT_EQ"]
  528 -> 1032 [style=solid label="DIV_EQ"]
  528 -> 1033 [style=solid label="MOD_EQ"]
  528 -> 1034 [style=solid label="PLUS_EQ"]
  528 -> 1035 [style=solid label="MINUS_EQ"]
  528 -> 1036 [style=solid label="RSHIFT_EQ"]
  528 -> 1037 [style=solid label="LSHIFT_EQ"]
  528 -> 1038 [style=solid label="AND_EQ"]
  528 -> 1039 [style=solid label="XOR_EQ"]
  528 -> 1040 [style=solid label="OR_EQ"]
  528 -> 903 [style=solid label="QUERY"]
  528 -> 904 [style=solid label="OR_OR"]
  528 -> 1041 [style=dashed label="assignment-operator"]
  528 -> "528R169d" [label="[EQ]", style=solid]
 "528R169d" [label="R169", fillcolor=5, shape=diamond, style=filled]
  528 -> "528R169" [style=solid]
 "528R169" [label="R169", fillcolor=3, shape=diamond, style=filled]
  529 [label="State 529\n\l861 postfix-expression: simple-type-specifier • OPEN_PAREN CLOSE_PAREN\l862                   | simple-type-specifier • OPEN_PAREN expression-list CLOSE_PAREN\l865                   | simple-type-specifier • braced-init-list\l"]
  529 -> 934 [style=solid label="OPEN_PAREN"]
  529 -> 935 [style=solid label="OPEN_BRACE"]
  529 -> 936 [style=dashed label="braced-init-list"]
  530 [label="State 530\n\l 25 assignment-expression: throw-expression •\l"]
  530 -> "530R25" [style=solid]
 "530R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  531 [label="State 531\n\l863 postfix-expression: typename-specifier • OPEN_PAREN CLOSE_PAREN\l864                   | typename-specifier • OPEN_PAREN expression-list CLOSE_PAREN\l866                   | typename-specifier • braced-init-list\l"]
  531 -> 949 [style=solid label="OPEN_PAREN"]
  531 -> 935 [style=solid label="OPEN_BRACE"]
  531 -> 950 [style=dashed label="braced-init-list"]
  532 [label="State 532\n\l 24 assignment-expression: yield-expression •\l"]
  532 -> "532R24" [style=solid]
 "532R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  533 [label="State 533\n\l263 elaborated-enum-specifier: ENUM nested-name-specifier IDENTIFIER •\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l"]
  533 -> 722 [style=solid label="SCOPE"]
  533 -> "533R263d" [label="[SCOPE]", style=solid]
 "533R263d" [label="R263", fillcolor=5, shape=diamond, style=filled]
  533 -> "533R263" [style=solid]
 "533R263" [label="R263", fillcolor=3, shape=diamond, style=filled]
  533 -> "533R1052d" [label="[LESS]", style=solid]
 "533R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  534 [label="State 534\n\l660 nested-name-specifier: nested-name-specifier simple-template-id • SCOPE\l"]
  534 -> 729 [style=solid label="SCOPE"]
  535 [label="State 535\n\l319 explicit-instantiation: EXTERN TEMPLATE declaration •\l"]
  535 -> "535R319" [style=solid]
 "535R319" [label="R319", fillcolor=3, shape=diamond, style=filled]
  536 [label="State 536\n\l551 linkage-specification: EXTERN string-literal OPEN_BRACE • CLOSE_BRACE\l552                      | EXTERN string-literal OPEN_BRACE • declaration-seq CLOSE_BRACE\l"]
  536 -> 1 [style=solid label="USING"]
  536 -> 2 [style=solid label="IDENTIFIER"]
  536 -> 3 [style=solid label="SEMICOLON"]
  536 -> 4 [style=solid label="ALIGNAS"]
  536 -> 5 [style=solid label="OPEN_PAREN"]
  536 -> 6 [style=solid label="ELLIPSIS"]
  536 -> 7 [style=solid label="AND"]
  536 -> 8 [style=solid label="ASM"]
  536 -> 9 [style=solid label="SCOPE"]
  536 -> 10 [style=solid label="OPEN_SQUARE"]
  536 -> 1042 [style=solid label="CLOSE_BRACE"]
  536 -> 11 [style=solid label="VIRTUAL"]
  536 -> 12 [style=solid label="CLASS"]
  536 -> 13 [style=solid label="STRUCT"]
  536 -> 14 [style=solid label="UNION"]
  536 -> 15 [style=solid label="TEMPLATE"]
  536 -> 16 [style=solid label="AND_AND"]
  536 -> 17 [style=solid label="OPERATOR"]
  536 -> 18 [style=solid label="CONST"]
  536 -> 19 [style=solid label="VOLATILE"]
  536 -> 20 [style=solid label="FRIEND"]
  536 -> 21 [style=solid label="TYPEDEF"]
  536 -> 22 [style=solid label="CONSTEXPR"]
  536 -> 23 [style=solid label="CONSTEVAL"]
  536 -> 24 [style=solid label="CONSTINIT"]
  536 -> 25 [style=solid label="INLINE"]
  536 -> 26 [style=solid label="DECLTYPE"]
  536 -> 27 [style=solid label="ENUM"]
  536 -> 28 [style=solid label="EXTERN"]
  536 -> 29 [style=solid label="EXPLICIT"]
  536 -> 157 [style=solid label="EXPORT"]
  536 -> 31 [style=solid label="MULT"]
  536 -> 33 [style=solid label="IMPORT"]
  536 -> 34 [style=solid label="NAMESPACE"]
  536 -> 35 [style=solid label="COMPL"]
  536 -> 36 [style=solid label="AUTO"]
  536 -> 37 [style=solid label="CHAR"]
  536 -> 38 [style=solid label="CHAR8_T"]
  536 -> 39 [style=solid label="CHAR16_T"]
  536 -> 40 [style=solid label="CHAR32_T"]
  536 -> 41 [style=solid label="WCHAR_T"]
  536 -> 42 [style=solid label="BOOL"]
  536 -> 43 [style=solid label="SHORT"]
  536 -> 44 [style=solid label="INT"]
  536 -> 45 [style=solid label="LONG"]
  536 -> 46 [style=solid label="SIGNED"]
  536 -> 47 [style=solid label="UNSIGNED"]
  536 -> 48 [style=solid label="FLOAT"]
  536 -> 49 [style=solid label="DOUBLE"]
  536 -> 50 [style=solid label="VOID"]
  536 -> 51 [style=solid label="STATIC_ASSERT"]
  536 -> 52 [style=solid label="STATIC"]
  536 -> 53 [style=solid label="THREAD_LOCAL"]
  536 -> 54 [style=solid label="MUTABLE"]
  536 -> 55 [style=solid label="TYPENAME"]
  536 -> 56 [style=dashed label="alias-declaration"]
  536 -> 57 [style=dashed label="alignment-specifier"]
  536 -> 58 [style=dashed label="asm-declaration"]
  536 -> 59 [style=dashed label="attribute-declaration"]
  536 -> 60 [style=dashed label="attribute-specifier"]
  536 -> 61 [style=dashed label="attribute-specifier-seq"]
  536 -> 62 [style=dashed label="block-declaration"]
  536 -> 63 [style=dashed label="class-head"]
  536 -> 64 [style=dashed label="class-key"]
  536 -> 65 [style=dashed label="class-name"]
  536 -> 66 [style=dashed label="class-specifier"]
  536 -> 67 [style=dashed label="concept-name"]
  536 -> 68 [style=dashed label="conversion-function-id"]
  536 -> 69 [style=dashed label="cv-qualifier"]
  536 -> 70 [style=dashed label="decl-specifier"]
  536 -> 71 [style=dashed label="decl-specifier-seq"]
  536 -> 72 [style=dashed label="declaration"]
  536 -> 1043 [style=dashed label="declaration-seq"]
  536 -> 74 [style=dashed label="declarator"]
  536 -> 75 [style=dashed label="declarator-id"]
  536 -> 76 [style=dashed label="decltype-specifier"]
  536 -> 77 [style=dashed label="deduction-guide"]
  536 -> 78 [style=dashed label="defining-type-specifier"]
  536 -> 79 [style=dashed label="elaborated-enum-specifier"]
  536 -> 80 [style=dashed label="elaborated-type-specifier"]
  536 -> 81 [style=dashed label="empty-declaration"]
  536 -> 82 [style=dashed label="enum-head"]
  536 -> 83 [style=dashed label="enum-key"]
  536 -> 84 [style=dashed label="enum-name"]
  536 -> 85 [style=dashed label="enum-specifier"]
  536 -> 86 [style=dashed label="explicit-instantiation"]
  536 -> 87 [style=dashed label="explicit-specialization"]
  536 -> 88 [style=dashed label="explicit-specifier"]
  536 -> 89 [style=dashed label="export-declaration"]
  536 -> 90 [style=dashed label="function-definition"]
  536 -> 91 [style=dashed label="function-specifier"]
  536 -> 93 [style=dashed label="id-expression"]
  536 -> 94 [style=dashed label="linkage-specification"]
  536 -> 95 [style=dashed label="literal-operator-id"]
  536 -> 97 [style=dashed label="module-import-declaration"]
  536 -> 98 [style=dashed label="named-namespace-definition"]
  536 -> 99 [style=dashed label="namespace-alias"]
  536 -> 100 [style=dashed label="namespace-alias-definition"]
  536 -> 101 [style=dashed label="namespace-definition"]
  536 -> 102 [style=dashed label="namespace-name"]
  536 -> 103 [style=dashed label="nested-name-specifier"]
  536 -> 104 [style=dashed label="nested-namespace-definition"]
  536 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  536 -> 106 [style=dashed label="noptr-declarator"]
  536 -> 107 [style=dashed label="opaque-enum-declaration"]
  536 -> 108 [style=dashed label="operator-function-id"]
  536 -> 109 [style=dashed label="placeholder-type-specifier"]
  536 -> 110 [style=dashed label="ptr-declarator"]
  536 -> 111 [style=dashed label="ptr-operator"]
  536 -> 112 [style=dashed label="qualified-id"]
  536 -> 113 [style=dashed label="simple-declaration"]
  536 -> 114 [style=dashed label="simple-template-id"]
  536 -> 115 [style=dashed label="simple-type-specifier"]
  536 -> 116 [style=dashed label="static_assert-declaration"]
  536 -> 117 [style=dashed label="storage-class-specifier"]
  536 -> 118 [style=dashed label="template-declaration"]
  536 -> 119 [style=dashed label="template-head"]
  536 -> 120 [style=dashed label="template-id"]
  536 -> 121 [style=dashed label="template-name"]
  536 -> 123 [style=dashed label="type-constraint"]
  536 -> 124 [style=dashed label="type-name"]
  536 -> 125 [style=dashed label="type-specifier"]
  536 -> 126 [style=dashed label="typedef-name"]
  536 -> 127 [style=dashed label="typename-specifier"]
  536 -> 128 [style=dashed label="unnamed-namespace-definition"]
  536 -> 129 [style=dashed label="unqualified-id"]
  536 -> 130 [style=dashed label="using-declaration"]
  536 -> 131 [style=dashed label="using-directive"]
  536 -> 132 [style=dashed label="using-enum-declaration"]
  537 [label="State 537\n\l553 linkage-specification: EXTERN string-literal declaration •\l"]
  537 -> "537R553" [style=solid]
 "537R553" [label="R553", fillcolor=3, shape=diamond, style=filled]
  538 [label="State 538\n\l322 explicit-specifier: EXPLICIT OPEN_PAREN constant-expression • CLOSE_PAREN\l"]
  538 -> 1044 [style=solid label="CLOSE_PAREN"]
  539 [label="State 539\n\l329 export-declaration: EXPORT OPEN_BRACE CLOSE_BRACE •\l"]
  539 -> "539R329" [style=solid]
 "539R329" [label="R329", fillcolor=3, shape=diamond, style=filled]
  540 [label="State 540\n\l224 declaration-seq: declaration-seq • declaration\l330 export-declaration: EXPORT OPEN_BRACE declaration-seq • CLOSE_BRACE\l"]
  540 -> 1 [style=solid label="USING"]
  540 -> 2 [style=solid label="IDENTIFIER"]
  540 -> 3 [style=solid label="SEMICOLON"]
  540 -> 4 [style=solid label="ALIGNAS"]
  540 -> 5 [style=solid label="OPEN_PAREN"]
  540 -> 6 [style=solid label="ELLIPSIS"]
  540 -> 7 [style=solid label="AND"]
  540 -> 8 [style=solid label="ASM"]
  540 -> 9 [style=solid label="SCOPE"]
  540 -> 10 [style=solid label="OPEN_SQUARE"]
  540 -> 1045 [style=solid label="CLOSE_BRACE"]
  540 -> 11 [style=solid label="VIRTUAL"]
  540 -> 12 [style=solid label="CLASS"]
  540 -> 13 [style=solid label="STRUCT"]
  540 -> 14 [style=solid label="UNION"]
  540 -> 15 [style=solid label="TEMPLATE"]
  540 -> 16 [style=solid label="AND_AND"]
  540 -> 17 [style=solid label="OPERATOR"]
  540 -> 18 [style=solid label="CONST"]
  540 -> 19 [style=solid label="VOLATILE"]
  540 -> 20 [style=solid label="FRIEND"]
  540 -> 21 [style=solid label="TYPEDEF"]
  540 -> 22 [style=solid label="CONSTEXPR"]
  540 -> 23 [style=solid label="CONSTEVAL"]
  540 -> 24 [style=solid label="CONSTINIT"]
  540 -> 25 [style=solid label="INLINE"]
  540 -> 26 [style=solid label="DECLTYPE"]
  540 -> 27 [style=solid label="ENUM"]
  540 -> 28 [style=solid label="EXTERN"]
  540 -> 29 [style=solid label="EXPLICIT"]
  540 -> 157 [style=solid label="EXPORT"]
  540 -> 31 [style=solid label="MULT"]
  540 -> 33 [style=solid label="IMPORT"]
  540 -> 34 [style=solid label="NAMESPACE"]
  540 -> 35 [style=solid label="COMPL"]
  540 -> 36 [style=solid label="AUTO"]
  540 -> 37 [style=solid label="CHAR"]
  540 -> 38 [style=solid label="CHAR8_T"]
  540 -> 39 [style=solid label="CHAR16_T"]
  540 -> 40 [style=solid label="CHAR32_T"]
  540 -> 41 [style=solid label="WCHAR_T"]
  540 -> 42 [style=solid label="BOOL"]
  540 -> 43 [style=solid label="SHORT"]
  540 -> 44 [style=solid label="INT"]
  540 -> 45 [style=solid label="LONG"]
  540 -> 46 [style=solid label="SIGNED"]
  540 -> 47 [style=solid label="UNSIGNED"]
  540 -> 48 [style=solid label="FLOAT"]
  540 -> 49 [style=solid label="DOUBLE"]
  540 -> 50 [style=solid label="VOID"]
  540 -> 51 [style=solid label="STATIC_ASSERT"]
  540 -> 52 [style=solid label="STATIC"]
  540 -> 53 [style=solid label="THREAD_LOCAL"]
  540 -> 54 [style=solid label="MUTABLE"]
  540 -> 55 [style=solid label="TYPENAME"]
  540 -> 56 [style=dashed label="alias-declaration"]
  540 -> 57 [style=dashed label="alignment-specifier"]
  540 -> 58 [style=dashed label="asm-declaration"]
  540 -> 59 [style=dashed label="attribute-declaration"]
  540 -> 60 [style=dashed label="attribute-specifier"]
  540 -> 61 [style=dashed label="attribute-specifier-seq"]
  540 -> 62 [style=dashed label="block-declaration"]
  540 -> 63 [style=dashed label="class-head"]
  540 -> 64 [style=dashed label="class-key"]
  540 -> 65 [style=dashed label="class-name"]
  540 -> 66 [style=dashed label="class-specifier"]
  540 -> 67 [style=dashed label="concept-name"]
  540 -> 68 [style=dashed label="conversion-function-id"]
  540 -> 69 [style=dashed label="cv-qualifier"]
  540 -> 70 [style=dashed label="decl-specifier"]
  540 -> 71 [style=dashed label="decl-specifier-seq"]
  540 -> 285 [style=dashed label="declaration"]
  540 -> 74 [style=dashed label="declarator"]
  540 -> 75 [style=dashed label="declarator-id"]
  540 -> 76 [style=dashed label="decltype-specifier"]
  540 -> 77 [style=dashed label="deduction-guide"]
  540 -> 78 [style=dashed label="defining-type-specifier"]
  540 -> 79 [style=dashed label="elaborated-enum-specifier"]
  540 -> 80 [style=dashed label="elaborated-type-specifier"]
  540 -> 81 [style=dashed label="empty-declaration"]
  540 -> 82 [style=dashed label="enum-head"]
  540 -> 83 [style=dashed label="enum-key"]
  540 -> 84 [style=dashed label="enum-name"]
  540 -> 85 [style=dashed label="enum-specifier"]
  540 -> 86 [style=dashed label="explicit-instantiation"]
  540 -> 87 [style=dashed label="explicit-specialization"]
  540 -> 88 [style=dashed label="explicit-specifier"]
  540 -> 89 [style=dashed label="export-declaration"]
  540 -> 90 [style=dashed label="function-definition"]
  540 -> 91 [style=dashed label="function-specifier"]
  540 -> 93 [style=dashed label="id-expression"]
  540 -> 94 [style=dashed label="linkage-specification"]
  540 -> 95 [style=dashed label="literal-operator-id"]
  540 -> 97 [style=dashed label="module-import-declaration"]
  540 -> 98 [style=dashed label="named-namespace-definition"]
  540 -> 99 [style=dashed label="namespace-alias"]
  540 -> 100 [style=dashed label="namespace-alias-definition"]
  540 -> 101 [style=dashed label="namespace-definition"]
  540 -> 102 [style=dashed label="namespace-name"]
  540 -> 103 [style=dashed label="nested-name-specifier"]
  540 -> 104 [style=dashed label="nested-namespace-definition"]
  540 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  540 -> 106 [style=dashed label="noptr-declarator"]
  540 -> 107 [style=dashed label="opaque-enum-declaration"]
  540 -> 108 [style=dashed label="operator-function-id"]
  540 -> 109 [style=dashed label="placeholder-type-specifier"]
  540 -> 110 [style=dashed label="ptr-declarator"]
  540 -> 111 [style=dashed label="ptr-operator"]
  540 -> 112 [style=dashed label="qualified-id"]
  540 -> 113 [style=dashed label="simple-declaration"]
  540 -> 114 [style=dashed label="simple-template-id"]
  540 -> 115 [style=dashed label="simple-type-specifier"]
  540 -> 116 [style=dashed label="static_assert-declaration"]
  540 -> 117 [style=dashed label="storage-class-specifier"]
  540 -> 118 [style=dashed label="template-declaration"]
  540 -> 119 [style=dashed label="template-head"]
  540 -> 120 [style=dashed label="template-id"]
  540 -> 121 [style=dashed label="template-name"]
  540 -> 123 [style=dashed label="type-constraint"]
  540 -> 124 [style=dashed label="type-name"]
  540 -> 125 [style=dashed label="type-specifier"]
  540 -> 126 [style=dashed label="typedef-name"]
  540 -> 127 [style=dashed label="typename-specifier"]
  540 -> 128 [style=dashed label="unnamed-namespace-definition"]
  540 -> 129 [style=dashed label="unqualified-id"]
  540 -> 130 [style=dashed label="using-declaration"]
  540 -> 131 [style=dashed label="using-directive"]
  540 -> 132 [style=dashed label="using-enum-declaration"]
  541 [label="State 541\n\l619 module-declaration: EXPORT MODULE module-name • SEMICOLON\l621                   | EXPORT MODULE module-name • module-partition SEMICOLON\l623                   | EXPORT MODULE module-name • attribute-specifier-seq SEMICOLON\l625                   | EXPORT MODULE module-name • module-partition attribute-specifier-seq SEMICOLON\l"]
  541 -> 1046 [style=solid label="SEMICOLON"]
  541 -> 4 [style=solid label="ALIGNAS"]
  541 -> 10 [style=solid label="OPEN_SQUARE"]
  541 -> 239 [style=solid label="COLON"]
  541 -> 57 [style=dashed label="alignment-specifier"]
  541 -> 60 [style=dashed label="attribute-specifier"]
  541 -> 1047 [style=dashed label="attribute-specifier-seq"]
  541 -> 1048 [style=dashed label="module-partition"]
  542 [label="State 542\n\l896 ptr-operator: MULT attribute-specifier-seq cv-qualifier-seq •\l"]
  542 -> "542R896" [style=solid]
 "542R896" [label="R896", fillcolor=3, shape=diamond, style=filled]
  543 [label="State 543\n\l188 cv-qualifier-seq: cv-qualifier cv-qualifier-seq •\l"]
  543 -> "543R188" [style=solid]
 "543R188" [label="R188", fillcolor=3, shape=diamond, style=filled]
  544 [label="State 544\n\l635 module-name-qualifier: IDENTIFIER DOT •\l"]
  544 -> "544R635" [style=solid]
 "544R635" [label="R635", fillcolor=3, shape=diamond, style=filled]
  545 [label="State 545\n\l224 declaration-seq: declaration-seq • declaration\l412 global-module-fragment: MODULE SEMICOLON declaration-seq •\l"]
  545 -> 1 [style=solid label="USING"]
  545 -> 2 [style=solid label="IDENTIFIER"]
  545 -> 3 [style=solid label="SEMICOLON"]
  545 -> 4 [style=solid label="ALIGNAS"]
  545 -> 5 [style=solid label="OPEN_PAREN"]
  545 -> 6 [style=solid label="ELLIPSIS"]
  545 -> 7 [style=solid label="AND"]
  545 -> 8 [style=solid label="ASM"]
  545 -> 9 [style=solid label="SCOPE"]
  545 -> 10 [style=solid label="OPEN_SQUARE"]
  545 -> 11 [style=solid label="VIRTUAL"]
  545 -> 12 [style=solid label="CLASS"]
  545 -> 13 [style=solid label="STRUCT"]
  545 -> 14 [style=solid label="UNION"]
  545 -> 15 [style=solid label="TEMPLATE"]
  545 -> 16 [style=solid label="AND_AND"]
  545 -> 17 [style=solid label="OPERATOR"]
  545 -> 18 [style=solid label="CONST"]
  545 -> 19 [style=solid label="VOLATILE"]
  545 -> 20 [style=solid label="FRIEND"]
  545 -> 21 [style=solid label="TYPEDEF"]
  545 -> 22 [style=solid label="CONSTEXPR"]
  545 -> 23 [style=solid label="CONSTEVAL"]
  545 -> 24 [style=solid label="CONSTINIT"]
  545 -> 25 [style=solid label="INLINE"]
  545 -> 26 [style=solid label="DECLTYPE"]
  545 -> 27 [style=solid label="ENUM"]
  545 -> 28 [style=solid label="EXTERN"]
  545 -> 29 [style=solid label="EXPLICIT"]
  545 -> 157 [style=solid label="EXPORT"]
  545 -> 31 [style=solid label="MULT"]
  545 -> 33 [style=solid label="IMPORT"]
  545 -> 34 [style=solid label="NAMESPACE"]
  545 -> 35 [style=solid label="COMPL"]
  545 -> 36 [style=solid label="AUTO"]
  545 -> 37 [style=solid label="CHAR"]
  545 -> 38 [style=solid label="CHAR8_T"]
  545 -> 39 [style=solid label="CHAR16_T"]
  545 -> 40 [style=solid label="CHAR32_T"]
  545 -> 41 [style=solid label="WCHAR_T"]
  545 -> 42 [style=solid label="BOOL"]
  545 -> 43 [style=solid label="SHORT"]
  545 -> 44 [style=solid label="INT"]
  545 -> 45 [style=solid label="LONG"]
  545 -> 46 [style=solid label="SIGNED"]
  545 -> 47 [style=solid label="UNSIGNED"]
  545 -> 48 [style=solid label="FLOAT"]
  545 -> 49 [style=solid label="DOUBLE"]
  545 -> 50 [style=solid label="VOID"]
  545 -> 51 [style=solid label="STATIC_ASSERT"]
  545 -> 52 [style=solid label="STATIC"]
  545 -> 53 [style=solid label="THREAD_LOCAL"]
  545 -> 54 [style=solid label="MUTABLE"]
  545 -> 55 [style=solid label="TYPENAME"]
  545 -> 56 [style=dashed label="alias-declaration"]
  545 -> 57 [style=dashed label="alignment-specifier"]
  545 -> 58 [style=dashed label="asm-declaration"]
  545 -> 59 [style=dashed label="attribute-declaration"]
  545 -> 60 [style=dashed label="attribute-specifier"]
  545 -> 61 [style=dashed label="attribute-specifier-seq"]
  545 -> 62 [style=dashed label="block-declaration"]
  545 -> 63 [style=dashed label="class-head"]
  545 -> 64 [style=dashed label="class-key"]
  545 -> 65 [style=dashed label="class-name"]
  545 -> 66 [style=dashed label="class-specifier"]
  545 -> 67 [style=dashed label="concept-name"]
  545 -> 68 [style=dashed label="conversion-function-id"]
  545 -> 69 [style=dashed label="cv-qualifier"]
  545 -> 70 [style=dashed label="decl-specifier"]
  545 -> 71 [style=dashed label="decl-specifier-seq"]
  545 -> 285 [style=dashed label="declaration"]
  545 -> 74 [style=dashed label="declarator"]
  545 -> 75 [style=dashed label="declarator-id"]
  545 -> 76 [style=dashed label="decltype-specifier"]
  545 -> 77 [style=dashed label="deduction-guide"]
  545 -> 78 [style=dashed label="defining-type-specifier"]
  545 -> 79 [style=dashed label="elaborated-enum-specifier"]
  545 -> 80 [style=dashed label="elaborated-type-specifier"]
  545 -> 81 [style=dashed label="empty-declaration"]
  545 -> 82 [style=dashed label="enum-head"]
  545 -> 83 [style=dashed label="enum-key"]
  545 -> 84 [style=dashed label="enum-name"]
  545 -> 85 [style=dashed label="enum-specifier"]
  545 -> 86 [style=dashed label="explicit-instantiation"]
  545 -> 87 [style=dashed label="explicit-specialization"]
  545 -> 88 [style=dashed label="explicit-specifier"]
  545 -> 89 [style=dashed label="export-declaration"]
  545 -> 90 [style=dashed label="function-definition"]
  545 -> 91 [style=dashed label="function-specifier"]
  545 -> 93 [style=dashed label="id-expression"]
  545 -> 94 [style=dashed label="linkage-specification"]
  545 -> 95 [style=dashed label="literal-operator-id"]
  545 -> 97 [style=dashed label="module-import-declaration"]
  545 -> 98 [style=dashed label="named-namespace-definition"]
  545 -> 99 [style=dashed label="namespace-alias"]
  545 -> 100 [style=dashed label="namespace-alias-definition"]
  545 -> 101 [style=dashed label="namespace-definition"]
  545 -> 102 [style=dashed label="namespace-name"]
  545 -> 103 [style=dashed label="nested-name-specifier"]
  545 -> 104 [style=dashed label="nested-namespace-definition"]
  545 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  545 -> 106 [style=dashed label="noptr-declarator"]
  545 -> 107 [style=dashed label="opaque-enum-declaration"]
  545 -> 108 [style=dashed label="operator-function-id"]
  545 -> 109 [style=dashed label="placeholder-type-specifier"]
  545 -> 110 [style=dashed label="ptr-declarator"]
  545 -> 111 [style=dashed label="ptr-operator"]
  545 -> 112 [style=dashed label="qualified-id"]
  545 -> 113 [style=dashed label="simple-declaration"]
  545 -> 114 [style=dashed label="simple-template-id"]
  545 -> 115 [style=dashed label="simple-type-specifier"]
  545 -> 116 [style=dashed label="static_assert-declaration"]
  545 -> 117 [style=dashed label="storage-class-specifier"]
  545 -> 118 [style=dashed label="template-declaration"]
  545 -> 119 [style=dashed label="template-head"]
  545 -> 120 [style=dashed label="template-id"]
  545 -> 121 [style=dashed label="template-name"]
  545 -> 123 [style=dashed label="type-constraint"]
  545 -> 124 [style=dashed label="type-name"]
  545 -> 125 [style=dashed label="type-specifier"]
  545 -> 126 [style=dashed label="typedef-name"]
  545 -> 127 [style=dashed label="typename-specifier"]
  545 -> 128 [style=dashed label="unnamed-namespace-definition"]
  545 -> 129 [style=dashed label="unqualified-id"]
  545 -> 130 [style=dashed label="using-declaration"]
  545 -> 131 [style=dashed label="using-directive"]
  545 -> 132 [style=dashed label="using-enum-declaration"]
  545 -> "545R412d" [label="[EXPORT]", style=solid]
 "545R412d" [label="R412", fillcolor=5, shape=diamond, style=filled]
  545 -> "545R412" [style=solid]
 "545R412" [label="R412", fillcolor=3, shape=diamond, style=filled]
  546 [label="State 546\n\l620 module-declaration: MODULE module-name SEMICOLON •\l"]
  546 -> "546R620" [style=solid]
 "546R620" [label="R620", fillcolor=3, shape=diamond, style=filled]
  547 [label="State 547\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l624 module-declaration: MODULE module-name attribute-specifier-seq • SEMICOLON\l"]
  547 -> 1049 [style=solid label="SEMICOLON"]
  547 -> 4 [style=solid label="ALIGNAS"]
  547 -> 10 [style=solid label="OPEN_SQUARE"]
  547 -> 57 [style=dashed label="alignment-specifier"]
  547 -> 260 [style=dashed label="attribute-specifier"]
  548 [label="State 548\n\l622 module-declaration: MODULE module-name module-partition • SEMICOLON\l626                   | MODULE module-name module-partition • attribute-specifier-seq SEMICOLON\l"]
  548 -> 1050 [style=solid label="SEMICOLON"]
  548 -> 4 [style=solid label="ALIGNAS"]
  548 -> 10 [style=solid label="OPEN_SQUARE"]
  548 -> 57 [style=dashed label="alignment-specifier"]
  548 -> 60 [style=dashed label="attribute-specifier"]
  548 -> 1051 [style=dashed label="attribute-specifier-seq"]
  549 [label="State 549\n\l633 module-name: module-name-qualifier IDENTIFIER •\l636 module-name-qualifier: module-name-qualifier IDENTIFIER • DOT\l"]
  549 -> 1052 [style=solid label="DOT"]
  549 -> "549R633" [style=solid]
 "549R633" [label="R633", fillcolor=3, shape=diamond, style=filled]
  550 [label="State 550\n\l635 module-name-qualifier: IDENTIFIER • DOT\l637 module-partition: COLON IDENTIFIER •\l"]
  550 -> 544 [style=solid label="DOT"]
  550 -> "550R637" [style=solid]
 "550R637" [label="R637", fillcolor=3, shape=diamond, style=filled]
  551 [label="State 551\n\l636 module-name-qualifier: module-name-qualifier • IDENTIFIER DOT\l638 module-partition: COLON module-name-qualifier • IDENTIFIER\l"]
  551 -> 1053 [style=solid label="IDENTIFIER"]
  552 [label="State 552\n\l413 h-char: H_CHAR •\l"]
  552 -> "552R413" [style=solid]
 "552R413" [label="R413", fillcolor=3, shape=diamond, style=filled]
  553 [label="State 553\n\l414 h-char-sequence: h-char •\l"]
  553 -> "553R414" [style=solid]
 "553R414" [label="R414", fillcolor=3, shape=diamond, style=filled]
  554 [label="State 554\n\l415 h-char-sequence: h-char-sequence • h-char\l419 header-name: LESS h-char-sequence • GREATER\l"]
  554 -> 1054 [style=solid label="GREATER"]
  554 -> 552 [style=solid label="H_CHAR"]
  554 -> 1055 [style=dashed label="h-char"]
  555 [label="State 555\n\l906 q-char: Q_CHAR •\l"]
  555 -> "555R906" [style=solid]
 "555R906" [label="R906", fillcolor=3, shape=diamond, style=filled]
  556 [label="State 556\n\l907 q-char-sequence: q-char •\l"]
  556 -> "556R907" [style=solid]
 "556R907" [label="R907", fillcolor=3, shape=diamond, style=filled]
  557 [label="State 557\n\l420 header-name: DOUBLE_QUOTE q-char-sequence • DOUBLE_QUOTE\l908 q-char-sequence: q-char-sequence • q-char\l"]
  557 -> 1056 [style=solid label="DOUBLE_QUOTE"]
  557 -> 555 [style=solid label="Q_CHAR"]
  557 -> 1057 [style=dashed label="q-char"]
  558 [label="State 558\n\l631 module-import-declaration: IMPORT header-name SEMICOLON •\l"]
  558 -> "558R631" [style=solid]
 "558R631" [label="R631", fillcolor=3, shape=diamond, style=filled]
  559 [label="State 559\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l632 module-import-declaration: IMPORT header-name attribute-specifier-seq • SEMICOLON\l"]
  559 -> 1058 [style=solid label="SEMICOLON"]
  559 -> 4 [style=solid label="ALIGNAS"]
  559 -> 10 [style=solid label="OPEN_SQUARE"]
  559 -> 57 [style=dashed label="alignment-specifier"]
  559 -> 260 [style=dashed label="attribute-specifier"]
  560 [label="State 560\n\l627 module-import-declaration: IMPORT module-name SEMICOLON •\l"]
  560 -> "560R627" [style=solid]
 "560R627" [label="R627", fillcolor=3, shape=diamond, style=filled]
  561 [label="State 561\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l628 module-import-declaration: IMPORT module-name attribute-specifier-seq • SEMICOLON\l"]
  561 -> 1059 [style=solid label="SEMICOLON"]
  561 -> 4 [style=solid label="ALIGNAS"]
  561 -> 10 [style=solid label="OPEN_SQUARE"]
  561 -> 57 [style=dashed label="alignment-specifier"]
  561 -> 260 [style=dashed label="attribute-specifier"]
  562 [label="State 562\n\l629 module-import-declaration: IMPORT module-partition SEMICOLON •\l"]
  562 -> "562R629" [style=solid]
 "562R629" [label="R629", fillcolor=3, shape=diamond, style=filled]
  563 [label="State 563\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l630 module-import-declaration: IMPORT module-partition attribute-specifier-seq • SEMICOLON\l"]
  563 -> 1060 [style=solid label="SEMICOLON"]
  563 -> 4 [style=solid label="ALIGNAS"]
  563 -> 10 [style=solid label="OPEN_SQUARE"]
  563 -> 57 [style=dashed label="alignment-specifier"]
  563 -> 260 [style=dashed label="attribute-specifier"]
  564 [label="State 564\n\l648 namespace-alias-definition: NAMESPACE IDENTIFIER EQ • qualified-namespace-specifier SEMICOLON\l"]
  564 -> 253 [style=solid label="IDENTIFIER"]
  564 -> 9 [style=solid label="SCOPE"]
  564 -> 134 [style=solid label="DECLTYPE"]
  564 -> 65 [style=dashed label="class-name"]
  564 -> 138 [style=dashed label="decltype-specifier"]
  564 -> 84 [style=dashed label="enum-name"]
  564 -> 99 [style=dashed label="namespace-alias"]
  564 -> 1061 [style=dashed label="namespace-name"]
  564 -> 1062 [style=dashed label="nested-name-specifier"]
  564 -> 1063 [style=dashed label="qualified-namespace-specifier"]
  564 -> 141 [style=dashed label="simple-template-id"]
  564 -> 142 [style=dashed label="template-name"]
  564 -> 143 [style=dashed label="type-name"]
  564 -> 126 [style=dashed label="typedef-name"]
  565 [label="State 565\n\l644 named-namespace-definition: NAMESPACE IDENTIFIER OPEN_BRACE • namespace-body CLOSE_BRACE\l"]
  565 -> 1 [style=solid label="USING"]
  565 -> 2 [style=solid label="IDENTIFIER"]
  565 -> 3 [style=solid label="SEMICOLON"]
  565 -> 4 [style=solid label="ALIGNAS"]
  565 -> 5 [style=solid label="OPEN_PAREN"]
  565 -> 6 [style=solid label="ELLIPSIS"]
  565 -> 7 [style=solid label="AND"]
  565 -> 8 [style=solid label="ASM"]
  565 -> 9 [style=solid label="SCOPE"]
  565 -> 10 [style=solid label="OPEN_SQUARE"]
  565 -> 11 [style=solid label="VIRTUAL"]
  565 -> 12 [style=solid label="CLASS"]
  565 -> 13 [style=solid label="STRUCT"]
  565 -> 14 [style=solid label="UNION"]
  565 -> 15 [style=solid label="TEMPLATE"]
  565 -> 16 [style=solid label="AND_AND"]
  565 -> 17 [style=solid label="OPERATOR"]
  565 -> 18 [style=solid label="CONST"]
  565 -> 19 [style=solid label="VOLATILE"]
  565 -> 20 [style=solid label="FRIEND"]
  565 -> 21 [style=solid label="TYPEDEF"]
  565 -> 22 [style=solid label="CONSTEXPR"]
  565 -> 23 [style=solid label="CONSTEVAL"]
  565 -> 24 [style=solid label="CONSTINIT"]
  565 -> 25 [style=solid label="INLINE"]
  565 -> 26 [style=solid label="DECLTYPE"]
  565 -> 27 [style=solid label="ENUM"]
  565 -> 28 [style=solid label="EXTERN"]
  565 -> 29 [style=solid label="EXPLICIT"]
  565 -> 157 [style=solid label="EXPORT"]
  565 -> 31 [style=solid label="MULT"]
  565 -> 33 [style=solid label="IMPORT"]
  565 -> 34 [style=solid label="NAMESPACE"]
  565 -> 35 [style=solid label="COMPL"]
  565 -> 36 [style=solid label="AUTO"]
  565 -> 37 [style=solid label="CHAR"]
  565 -> 38 [style=solid label="CHAR8_T"]
  565 -> 39 [style=solid label="CHAR16_T"]
  565 -> 40 [style=solid label="CHAR32_T"]
  565 -> 41 [style=solid label="WCHAR_T"]
  565 -> 42 [style=solid label="BOOL"]
  565 -> 43 [style=solid label="SHORT"]
  565 -> 44 [style=solid label="INT"]
  565 -> 45 [style=solid label="LONG"]
  565 -> 46 [style=solid label="SIGNED"]
  565 -> 47 [style=solid label="UNSIGNED"]
  565 -> 48 [style=solid label="FLOAT"]
  565 -> 49 [style=solid label="DOUBLE"]
  565 -> 50 [style=solid label="VOID"]
  565 -> 51 [style=solid label="STATIC_ASSERT"]
  565 -> 52 [style=solid label="STATIC"]
  565 -> 53 [style=solid label="THREAD_LOCAL"]
  565 -> 54 [style=solid label="MUTABLE"]
  565 -> 55 [style=solid label="TYPENAME"]
  565 -> 56 [style=dashed label="alias-declaration"]
  565 -> 57 [style=dashed label="alignment-specifier"]
  565 -> 58 [style=dashed label="asm-declaration"]
  565 -> 59 [style=dashed label="attribute-declaration"]
  565 -> 60 [style=dashed label="attribute-specifier"]
  565 -> 61 [style=dashed label="attribute-specifier-seq"]
  565 -> 62 [style=dashed label="block-declaration"]
  565 -> 63 [style=dashed label="class-head"]
  565 -> 64 [style=dashed label="class-key"]
  565 -> 65 [style=dashed label="class-name"]
  565 -> 66 [style=dashed label="class-specifier"]
  565 -> 67 [style=dashed label="concept-name"]
  565 -> 68 [style=dashed label="conversion-function-id"]
  565 -> 69 [style=dashed label="cv-qualifier"]
  565 -> 70 [style=dashed label="decl-specifier"]
  565 -> 71 [style=dashed label="decl-specifier-seq"]
  565 -> 72 [style=dashed label="declaration"]
  565 -> 566 [style=dashed label="declaration-seq"]
  565 -> 74 [style=dashed label="declarator"]
  565 -> 75 [style=dashed label="declarator-id"]
  565 -> 76 [style=dashed label="decltype-specifier"]
  565 -> 77 [style=dashed label="deduction-guide"]
  565 -> 78 [style=dashed label="defining-type-specifier"]
  565 -> 79 [style=dashed label="elaborated-enum-specifier"]
  565 -> 80 [style=dashed label="elaborated-type-specifier"]
  565 -> 81 [style=dashed label="empty-declaration"]
  565 -> 82 [style=dashed label="enum-head"]
  565 -> 83 [style=dashed label="enum-key"]
  565 -> 84 [style=dashed label="enum-name"]
  565 -> 85 [style=dashed label="enum-specifier"]
  565 -> 86 [style=dashed label="explicit-instantiation"]
  565 -> 87 [style=dashed label="explicit-specialization"]
  565 -> 88 [style=dashed label="explicit-specifier"]
  565 -> 89 [style=dashed label="export-declaration"]
  565 -> 90 [style=dashed label="function-definition"]
  565 -> 91 [style=dashed label="function-specifier"]
  565 -> 93 [style=dashed label="id-expression"]
  565 -> 94 [style=dashed label="linkage-specification"]
  565 -> 95 [style=dashed label="literal-operator-id"]
  565 -> 97 [style=dashed label="module-import-declaration"]
  565 -> 98 [style=dashed label="named-namespace-definition"]
  565 -> 99 [style=dashed label="namespace-alias"]
  565 -> 100 [style=dashed label="namespace-alias-definition"]
  565 -> 1064 [style=dashed label="namespace-body"]
  565 -> 101 [style=dashed label="namespace-definition"]
  565 -> 102 [style=dashed label="namespace-name"]
  565 -> 103 [style=dashed label="nested-name-specifier"]
  565 -> 104 [style=dashed label="nested-namespace-definition"]
  565 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  565 -> 106 [style=dashed label="noptr-declarator"]
  565 -> 107 [style=dashed label="opaque-enum-declaration"]
  565 -> 108 [style=dashed label="operator-function-id"]
  565 -> 109 [style=dashed label="placeholder-type-specifier"]
  565 -> 110 [style=dashed label="ptr-declarator"]
  565 -> 111 [style=dashed label="ptr-operator"]
  565 -> 112 [style=dashed label="qualified-id"]
  565 -> 113 [style=dashed label="simple-declaration"]
  565 -> 114 [style=dashed label="simple-template-id"]
  565 -> 115 [style=dashed label="simple-type-specifier"]
  565 -> 116 [style=dashed label="static_assert-declaration"]
  565 -> 117 [style=dashed label="storage-class-specifier"]
  565 -> 118 [style=dashed label="template-declaration"]
  565 -> 119 [style=dashed label="template-head"]
  565 -> 120 [style=dashed label="template-id"]
  565 -> 121 [style=dashed label="template-name"]
  565 -> 123 [style=dashed label="type-constraint"]
  565 -> 124 [style=dashed label="type-name"]
  565 -> 125 [style=dashed label="type-specifier"]
  565 -> 126 [style=dashed label="typedef-name"]
  565 -> 127 [style=dashed label="typename-specifier"]
  565 -> 128 [style=dashed label="unnamed-namespace-definition"]
  565 -> 129 [style=dashed label="unqualified-id"]
  565 -> 130 [style=dashed label="using-declaration"]
  565 -> 131 [style=dashed label="using-directive"]
  565 -> 132 [style=dashed label="using-enum-declaration"]
  566 [label="State 566\n\l224 declaration-seq: declaration-seq • declaration\l649 namespace-body: declaration-seq •\l"]
  566 -> 1 [style=solid label="USING"]
  566 -> 2 [style=solid label="IDENTIFIER"]
  566 -> 3 [style=solid label="SEMICOLON"]
  566 -> 4 [style=solid label="ALIGNAS"]
  566 -> 5 [style=solid label="OPEN_PAREN"]
  566 -> 6 [style=solid label="ELLIPSIS"]
  566 -> 7 [style=solid label="AND"]
  566 -> 8 [style=solid label="ASM"]
  566 -> 9 [style=solid label="SCOPE"]
  566 -> 10 [style=solid label="OPEN_SQUARE"]
  566 -> 11 [style=solid label="VIRTUAL"]
  566 -> 12 [style=solid label="CLASS"]
  566 -> 13 [style=solid label="STRUCT"]
  566 -> 14 [style=solid label="UNION"]
  566 -> 15 [style=solid label="TEMPLATE"]
  566 -> 16 [style=solid label="AND_AND"]
  566 -> 17 [style=solid label="OPERATOR"]
  566 -> 18 [style=solid label="CONST"]
  566 -> 19 [style=solid label="VOLATILE"]
  566 -> 20 [style=solid label="FRIEND"]
  566 -> 21 [style=solid label="TYPEDEF"]
  566 -> 22 [style=solid label="CONSTEXPR"]
  566 -> 23 [style=solid label="CONSTEVAL"]
  566 -> 24 [style=solid label="CONSTINIT"]
  566 -> 25 [style=solid label="INLINE"]
  566 -> 26 [style=solid label="DECLTYPE"]
  566 -> 27 [style=solid label="ENUM"]
  566 -> 28 [style=solid label="EXTERN"]
  566 -> 29 [style=solid label="EXPLICIT"]
  566 -> 157 [style=solid label="EXPORT"]
  566 -> 31 [style=solid label="MULT"]
  566 -> 33 [style=solid label="IMPORT"]
  566 -> 34 [style=solid label="NAMESPACE"]
  566 -> 35 [style=solid label="COMPL"]
  566 -> 36 [style=solid label="AUTO"]
  566 -> 37 [style=solid label="CHAR"]
  566 -> 38 [style=solid label="CHAR8_T"]
  566 -> 39 [style=solid label="CHAR16_T"]
  566 -> 40 [style=solid label="CHAR32_T"]
  566 -> 41 [style=solid label="WCHAR_T"]
  566 -> 42 [style=solid label="BOOL"]
  566 -> 43 [style=solid label="SHORT"]
  566 -> 44 [style=solid label="INT"]
  566 -> 45 [style=solid label="LONG"]
  566 -> 46 [style=solid label="SIGNED"]
  566 -> 47 [style=solid label="UNSIGNED"]
  566 -> 48 [style=solid label="FLOAT"]
  566 -> 49 [style=solid label="DOUBLE"]
  566 -> 50 [style=solid label="VOID"]
  566 -> 51 [style=solid label="STATIC_ASSERT"]
  566 -> 52 [style=solid label="STATIC"]
  566 -> 53 [style=solid label="THREAD_LOCAL"]
  566 -> 54 [style=solid label="MUTABLE"]
  566 -> 55 [style=solid label="TYPENAME"]
  566 -> 56 [style=dashed label="alias-declaration"]
  566 -> 57 [style=dashed label="alignment-specifier"]
  566 -> 58 [style=dashed label="asm-declaration"]
  566 -> 59 [style=dashed label="attribute-declaration"]
  566 -> 60 [style=dashed label="attribute-specifier"]
  566 -> 61 [style=dashed label="attribute-specifier-seq"]
  566 -> 62 [style=dashed label="block-declaration"]
  566 -> 63 [style=dashed label="class-head"]
  566 -> 64 [style=dashed label="class-key"]
  566 -> 65 [style=dashed label="class-name"]
  566 -> 66 [style=dashed label="class-specifier"]
  566 -> 67 [style=dashed label="concept-name"]
  566 -> 68 [style=dashed label="conversion-function-id"]
  566 -> 69 [style=dashed label="cv-qualifier"]
  566 -> 70 [style=dashed label="decl-specifier"]
  566 -> 71 [style=dashed label="decl-specifier-seq"]
  566 -> 285 [style=dashed label="declaration"]
  566 -> 74 [style=dashed label="declarator"]
  566 -> 75 [style=dashed label="declarator-id"]
  566 -> 76 [style=dashed label="decltype-specifier"]
  566 -> 77 [style=dashed label="deduction-guide"]
  566 -> 78 [style=dashed label="defining-type-specifier"]
  566 -> 79 [style=dashed label="elaborated-enum-specifier"]
  566 -> 80 [style=dashed label="elaborated-type-specifier"]
  566 -> 81 [style=dashed label="empty-declaration"]
  566 -> 82 [style=dashed label="enum-head"]
  566 -> 83 [style=dashed label="enum-key"]
  566 -> 84 [style=dashed label="enum-name"]
  566 -> 85 [style=dashed label="enum-specifier"]
  566 -> 86 [style=dashed label="explicit-instantiation"]
  566 -> 87 [style=dashed label="explicit-specialization"]
  566 -> 88 [style=dashed label="explicit-specifier"]
  566 -> 89 [style=dashed label="export-declaration"]
  566 -> 90 [style=dashed label="function-definition"]
  566 -> 91 [style=dashed label="function-specifier"]
  566 -> 93 [style=dashed label="id-expression"]
  566 -> 94 [style=dashed label="linkage-specification"]
  566 -> 95 [style=dashed label="literal-operator-id"]
  566 -> 97 [style=dashed label="module-import-declaration"]
  566 -> 98 [style=dashed label="named-namespace-definition"]
  566 -> 99 [style=dashed label="namespace-alias"]
  566 -> 100 [style=dashed label="namespace-alias-definition"]
  566 -> 101 [style=dashed label="namespace-definition"]
  566 -> 102 [style=dashed label="namespace-name"]
  566 -> 103 [style=dashed label="nested-name-specifier"]
  566 -> 104 [style=dashed label="nested-namespace-definition"]
  566 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  566 -> 106 [style=dashed label="noptr-declarator"]
  566 -> 107 [style=dashed label="opaque-enum-declaration"]
  566 -> 108 [style=dashed label="operator-function-id"]
  566 -> 109 [style=dashed label="placeholder-type-specifier"]
  566 -> 110 [style=dashed label="ptr-declarator"]
  566 -> 111 [style=dashed label="ptr-operator"]
  566 -> 112 [style=dashed label="qualified-id"]
  566 -> 113 [style=dashed label="simple-declaration"]
  566 -> 114 [style=dashed label="simple-template-id"]
  566 -> 115 [style=dashed label="simple-type-specifier"]
  566 -> 116 [style=dashed label="static_assert-declaration"]
  566 -> 117 [style=dashed label="storage-class-specifier"]
  566 -> 118 [style=dashed label="template-declaration"]
  566 -> 119 [style=dashed label="template-head"]
  566 -> 120 [style=dashed label="template-id"]
  566 -> 121 [style=dashed label="template-name"]
  566 -> 123 [style=dashed label="type-constraint"]
  566 -> 124 [style=dashed label="type-name"]
  566 -> 125 [style=dashed label="type-specifier"]
  566 -> 126 [style=dashed label="typedef-name"]
  566 -> 127 [style=dashed label="typename-specifier"]
  566 -> 128 [style=dashed label="unnamed-namespace-definition"]
  566 -> 129 [style=dashed label="unqualified-id"]
  566 -> 130 [style=dashed label="using-declaration"]
  566 -> 131 [style=dashed label="using-directive"]
  566 -> 132 [style=dashed label="using-enum-declaration"]
  566 -> "566R649" [style=solid]
 "566R649" [label="R649", fillcolor=3, shape=diamond, style=filled]
  567 [label="State 567\n\l1137 unnamed-namespace-definition: NAMESPACE OPEN_BRACE namespace-body • CLOSE_BRACE\l"]
  567 -> 1065 [style=solid label="CLOSE_BRACE"]
  568 [label="State 568\n\l646 named-namespace-definition: NAMESPACE attribute-specifier-seq IDENTIFIER • OPEN_BRACE namespace-body CLOSE_BRACE\l"]
  568 -> 1066 [style=solid label="OPEN_BRACE"]
  569 [label="State 569\n\l1139 unnamed-namespace-definition: NAMESPACE attribute-specifier-seq OPEN_BRACE • namespace-body CLOSE_BRACE\l"]
  569 -> 1 [style=solid label="USING"]
  569 -> 2 [style=solid label="IDENTIFIER"]
  569 -> 3 [style=solid label="SEMICOLON"]
  569 -> 4 [style=solid label="ALIGNAS"]
  569 -> 5 [style=solid label="OPEN_PAREN"]
  569 -> 6 [style=solid label="ELLIPSIS"]
  569 -> 7 [style=solid label="AND"]
  569 -> 8 [style=solid label="ASM"]
  569 -> 9 [style=solid label="SCOPE"]
  569 -> 10 [style=solid label="OPEN_SQUARE"]
  569 -> 11 [style=solid label="VIRTUAL"]
  569 -> 12 [style=solid label="CLASS"]
  569 -> 13 [style=solid label="STRUCT"]
  569 -> 14 [style=solid label="UNION"]
  569 -> 15 [style=solid label="TEMPLATE"]
  569 -> 16 [style=solid label="AND_AND"]
  569 -> 17 [style=solid label="OPERATOR"]
  569 -> 18 [style=solid label="CONST"]
  569 -> 19 [style=solid label="VOLATILE"]
  569 -> 20 [style=solid label="FRIEND"]
  569 -> 21 [style=solid label="TYPEDEF"]
  569 -> 22 [style=solid label="CONSTEXPR"]
  569 -> 23 [style=solid label="CONSTEVAL"]
  569 -> 24 [style=solid label="CONSTINIT"]
  569 -> 25 [style=solid label="INLINE"]
  569 -> 26 [style=solid label="DECLTYPE"]
  569 -> 27 [style=solid label="ENUM"]
  569 -> 28 [style=solid label="EXTERN"]
  569 -> 29 [style=solid label="EXPLICIT"]
  569 -> 157 [style=solid label="EXPORT"]
  569 -> 31 [style=solid label="MULT"]
  569 -> 33 [style=solid label="IMPORT"]
  569 -> 34 [style=solid label="NAMESPACE"]
  569 -> 35 [style=solid label="COMPL"]
  569 -> 36 [style=solid label="AUTO"]
  569 -> 37 [style=solid label="CHAR"]
  569 -> 38 [style=solid label="CHAR8_T"]
  569 -> 39 [style=solid label="CHAR16_T"]
  569 -> 40 [style=solid label="CHAR32_T"]
  569 -> 41 [style=solid label="WCHAR_T"]
  569 -> 42 [style=solid label="BOOL"]
  569 -> 43 [style=solid label="SHORT"]
  569 -> 44 [style=solid label="INT"]
  569 -> 45 [style=solid label="LONG"]
  569 -> 46 [style=solid label="SIGNED"]
  569 -> 47 [style=solid label="UNSIGNED"]
  569 -> 48 [style=solid label="FLOAT"]
  569 -> 49 [style=solid label="DOUBLE"]
  569 -> 50 [style=solid label="VOID"]
  569 -> 51 [style=solid label="STATIC_ASSERT"]
  569 -> 52 [style=solid label="STATIC"]
  569 -> 53 [style=solid label="THREAD_LOCAL"]
  569 -> 54 [style=solid label="MUTABLE"]
  569 -> 55 [style=solid label="TYPENAME"]
  569 -> 56 [style=dashed label="alias-declaration"]
  569 -> 57 [style=dashed label="alignment-specifier"]
  569 -> 58 [style=dashed label="asm-declaration"]
  569 -> 59 [style=dashed label="attribute-declaration"]
  569 -> 60 [style=dashed label="attribute-specifier"]
  569 -> 61 [style=dashed label="attribute-specifier-seq"]
  569 -> 62 [style=dashed label="block-declaration"]
  569 -> 63 [style=dashed label="class-head"]
  569 -> 64 [style=dashed label="class-key"]
  569 -> 65 [style=dashed label="class-name"]
  569 -> 66 [style=dashed label="class-specifier"]
  569 -> 67 [style=dashed label="concept-name"]
  569 -> 68 [style=dashed label="conversion-function-id"]
  569 -> 69 [style=dashed label="cv-qualifier"]
  569 -> 70 [style=dashed label="decl-specifier"]
  569 -> 71 [style=dashed label="decl-specifier-seq"]
  569 -> 72 [style=dashed label="declaration"]
  569 -> 566 [style=dashed label="declaration-seq"]
  569 -> 74 [style=dashed label="declarator"]
  569 -> 75 [style=dashed label="declarator-id"]
  569 -> 76 [style=dashed label="decltype-specifier"]
  569 -> 77 [style=dashed label="deduction-guide"]
  569 -> 78 [style=dashed label="defining-type-specifier"]
  569 -> 79 [style=dashed label="elaborated-enum-specifier"]
  569 -> 80 [style=dashed label="elaborated-type-specifier"]
  569 -> 81 [style=dashed label="empty-declaration"]
  569 -> 82 [style=dashed label="enum-head"]
  569 -> 83 [style=dashed label="enum-key"]
  569 -> 84 [style=dashed label="enum-name"]
  569 -> 85 [style=dashed label="enum-specifier"]
  569 -> 86 [style=dashed label="explicit-instantiation"]
  569 -> 87 [style=dashed label="explicit-specialization"]
  569 -> 88 [style=dashed label="explicit-specifier"]
  569 -> 89 [style=dashed label="export-declaration"]
  569 -> 90 [style=dashed label="function-definition"]
  569 -> 91 [style=dashed label="function-specifier"]
  569 -> 93 [style=dashed label="id-expression"]
  569 -> 94 [style=dashed label="linkage-specification"]
  569 -> 95 [style=dashed label="literal-operator-id"]
  569 -> 97 [style=dashed label="module-import-declaration"]
  569 -> 98 [style=dashed label="named-namespace-definition"]
  569 -> 99 [style=dashed label="namespace-alias"]
  569 -> 100 [style=dashed label="namespace-alias-definition"]
  569 -> 1067 [style=dashed label="namespace-body"]
  569 -> 101 [style=dashed label="namespace-definition"]
  569 -> 102 [style=dashed label="namespace-name"]
  569 -> 103 [style=dashed label="nested-name-specifier"]
  569 -> 104 [style=dashed label="nested-namespace-definition"]
  569 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  569 -> 106 [style=dashed label="noptr-declarator"]
  569 -> 107 [style=dashed label="opaque-enum-declaration"]
  569 -> 108 [style=dashed label="operator-function-id"]
  569 -> 109 [style=dashed label="placeholder-type-specifier"]
  569 -> 110 [style=dashed label="ptr-declarator"]
  569 -> 111 [style=dashed label="ptr-operator"]
  569 -> 112 [style=dashed label="qualified-id"]
  569 -> 113 [style=dashed label="simple-declaration"]
  569 -> 114 [style=dashed label="simple-template-id"]
  569 -> 115 [style=dashed label="simple-type-specifier"]
  569 -> 116 [style=dashed label="static_assert-declaration"]
  569 -> 117 [style=dashed label="storage-class-specifier"]
  569 -> 118 [style=dashed label="template-declaration"]
  569 -> 119 [style=dashed label="template-head"]
  569 -> 120 [style=dashed label="template-id"]
  569 -> 121 [style=dashed label="template-name"]
  569 -> 123 [style=dashed label="type-constraint"]
  569 -> 124 [style=dashed label="type-name"]
  569 -> 125 [style=dashed label="type-specifier"]
  569 -> 126 [style=dashed label="typedef-name"]
  569 -> 127 [style=dashed label="typename-specifier"]
  569 -> 128 [style=dashed label="unnamed-namespace-definition"]
  569 -> 129 [style=dashed label="unqualified-id"]
  569 -> 130 [style=dashed label="using-declaration"]
  569 -> 131 [style=dashed label="using-directive"]
  569 -> 132 [style=dashed label="using-enum-declaration"]
  570 [label="State 570\n\l274 enclosing-namespace-specifier: enclosing-namespace-specifier SCOPE • IDENTIFIER\l275                              | enclosing-namespace-specifier SCOPE • INLINE IDENTIFIER\l662 nested-namespace-definition: NAMESPACE enclosing-namespace-specifier SCOPE • IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l663                            | NAMESPACE enclosing-namespace-specifier SCOPE • INLINE IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l"]
  570 -> 1068 [style=solid label="IDENTIFIER"]
  570 -> 1069 [style=solid label="INLINE"]
  571 [label="State 571\n\l1024 static_assert-declaration: STATIC_ASSERT OPEN_PAREN constant-expression • CLOSE_PAREN SEMICOLON\l1025                          | STATIC_ASSERT OPEN_PAREN constant-expression • COMMA string-literal CLOSE_PAREN SEMICOLON\l"]
  571 -> 1070 [style=solid label="CLOSE_PAREN"]
  571 -> 1071 [style=solid label="COMMA"]
  572 [label="State 572\n\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l1112 typename-specifier: TYPENAME nested-name-specifier IDENTIFIER •\l"]
  572 -> 722 [style=solid label="SCOPE"]
  572 -> "572R1052" [label="[LESS]", style=solid]
 "572R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  572 -> "572R1112d" [label="[SCOPE, LESS]", style=solid]
 "572R1112d" [label="R1112", fillcolor=5, shape=diamond, style=filled]
  572 -> "572R1112" [style=solid]
 "572R1112" [label="R1112", fillcolor=3, shape=diamond, style=filled]
  573 [label="State 573\n\l661 nested-name-specifier: nested-name-specifier TEMPLATE • simple-template-id SCOPE\l1114 typename-specifier: TYPENAME nested-name-specifier TEMPLATE • simple-template-id\l"]
  573 -> 310 [style=solid label="IDENTIFIER"]
  573 -> 1072 [style=dashed label="simple-template-id"]
  573 -> 142 [style=dashed label="template-name"]
  574 [label="State 574\n\l660 nested-name-specifier: nested-name-specifier simple-template-id • SCOPE\l1113 typename-specifier: TYPENAME nested-name-specifier simple-template-id •\l"]
  574 -> 729 [style=solid label="SCOPE"]
  574 -> "574R1113d" [label="[SCOPE]", style=solid]
 "574R1113d" [label="R1113", fillcolor=5, shape=diamond, style=filled]
  574 -> "574R1113" [style=solid]
 "574R1113" [label="R1113", fillcolor=3, shape=diamond, style=filled]
  575 [label="State 575\n\l1171 using-directive: attribute-specifier-seq USING NAMESPACE • namespace-name SEMICOLON\l1173                | attribute-specifier-seq USING NAMESPACE • nested-name-specifier namespace-name SEMICOLON\l"]
  575 -> 253 [style=solid label="IDENTIFIER"]
  575 -> 9 [style=solid label="SCOPE"]
  575 -> 134 [style=solid label="DECLTYPE"]
  575 -> 65 [style=dashed label="class-name"]
  575 -> 138 [style=dashed label="decltype-specifier"]
  575 -> 84 [style=dashed label="enum-name"]
  575 -> 99 [style=dashed label="namespace-alias"]
  575 -> 1073 [style=dashed label="namespace-name"]
  575 -> 1074 [style=dashed label="nested-name-specifier"]
  575 -> 141 [style=dashed label="simple-template-id"]
  575 -> 142 [style=dashed label="template-name"]
  575 -> 143 [style=dashed label="type-name"]
  575 -> 126 [style=dashed label="typedef-name"]
  576 [label="State 576\n\l 21 asm-declaration: attribute-specifier-seq ASM OPEN_PAREN • string-literal CLOSE_PAREN SEMICOLON\l"]
  576 -> 184 [style=solid label="UNICODE_8"]
  576 -> 199 [style=solid label="DOUBLE_QUOTE"]
  576 -> 205 [style=solid label="'u'"]
  576 -> 206 [style=solid label="'U'"]
  576 -> 207 [style=solid label="'L'"]
  576 -> 208 [style=solid label="'R'"]
  576 -> 211 [style=dashed label="encoding-prefix"]
  576 -> 1075 [style=dashed label="string-literal"]
  577 [label="State 577\n\l966 simple-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE • identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  577 -> 640 [style=solid label="IDENTIFIER"]
  577 -> 1076 [style=dashed label="identifier-list"]
  578 [label="State 578\n\l397 function-definition: attribute-specifier-seq decl-specifier-seq declarator • function-body\l401                    | attribute-specifier-seq decl-specifier-seq declarator • virt-specifier-seq function-body\l405                    | attribute-specifier-seq decl-specifier-seq declarator • requires-clause function-body\l469 init-declarator: declarator •\l470                | declarator • initializer\l471                | declarator • requires-clause\l"]
  578 -> 642 [style=solid label="EQ"]
  578 -> 643 [style=solid label="OPEN_PAREN"]
  578 -> 288 [style=solid label="COLON"]
  578 -> 644 [style=solid label="OPEN_BRACE"]
  578 -> 290 [style=solid label="FINAL"]
  578 -> 291 [style=solid label="TRY"]
  578 -> 292 [style=solid label="REQUIRES"]
  578 -> 293 [style=solid label="OVERRIDE"]
  578 -> 645 [style=dashed label="brace-or-equal-initializer"]
  578 -> 646 [style=dashed label="braced-init-list"]
  578 -> 294 [style=dashed label="compound-statement"]
  578 -> 295 [style=dashed label="ctor-initializer"]
  578 -> 1077 [style=dashed label="function-body"]
  578 -> 297 [style=dashed label="function-try-block"]
  578 -> 648 [style=dashed label="initializer"]
  578 -> 1078 [style=dashed label="requires-clause"]
  578 -> 299 [style=dashed label="virt-specifier"]
  578 -> 1079 [style=dashed label="virt-specifier-seq"]
  578 -> "578R469" [style=solid]
 "578R469" [label="R469", fillcolor=3, shape=diamond, style=filled]
  579 [label="State 579\n\l473 init-declarator-list: init-declarator-list • COMMA init-declarator\l965 simple-declaration: attribute-specifier-seq decl-specifier-seq init-declarator-list • SEMICOLON\l"]
  579 -> 1080 [style=solid label="SEMICOLON"]
  579 -> 652 [style=solid label="COMMA"]
  580 [label="State 580\n\l968 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier • OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  580 -> 1081 [style=solid label="OPEN_SQUARE"]
  581 [label="State 581\n\l690 nodeclspec-function-declaration: attribute-specifier-seq declarator SEMICOLON •\l"]
  581 -> "581R690" [style=solid]
 "581R690" [label="R690", fillcolor=3, shape=diamond, style=filled]
  582 [label="State 582\n\l395 function-definition: attribute-specifier-seq declarator function-body •\l"]
  582 -> "582R395" [style=solid]
 "582R395" [label="R395", fillcolor=3, shape=diamond, style=filled]
  583 [label="State 583\n\l403 function-definition: attribute-specifier-seq declarator requires-clause • function-body\l"]
  583 -> 286 [style=solid label="EQ"]
  583 -> 288 [style=solid label="COLON"]
  583 -> 289 [style=solid label="OPEN_BRACE"]
  583 -> 291 [style=solid label="TRY"]
  583 -> 294 [style=dashed label="compound-statement"]
  583 -> 295 [style=dashed label="ctor-initializer"]
  583 -> 1082 [style=dashed label="function-body"]
  583 -> 297 [style=dashed label="function-try-block"]
  584 [label="State 584\n\l399 function-definition: attribute-specifier-seq declarator virt-specifier-seq • function-body\l1179 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  584 -> 286 [style=solid label="EQ"]
  584 -> 288 [style=solid label="COLON"]
  584 -> 289 [style=solid label="OPEN_BRACE"]
  584 -> 290 [style=solid label="FINAL"]
  584 -> 291 [style=solid label="TRY"]
  584 -> 293 [style=solid label="OVERRIDE"]
  584 -> 294 [style=dashed label="compound-statement"]
  584 -> 295 [style=dashed label="ctor-initializer"]
  584 -> 1083 [style=dashed label="function-body"]
  584 -> 297 [style=dashed label="function-try-block"]
  584 -> 703 [style=dashed label="virt-specifier"]
  585 [label="State 585\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l282 enum-head: enum-key attribute-specifier-seq •\l284          | enum-key attribute-specifier-seq • enum-head-name\l286          | enum-key attribute-specifier-seq • enum-base\l288          | enum-key attribute-specifier-seq • enum-head-name enum-base\l"]
  585 -> 304 [style=solid label="IDENTIFIER"]
  585 -> 4 [style=solid label="ALIGNAS"]
  585 -> 9 [style=solid label="SCOPE"]
  585 -> 10 [style=solid label="OPEN_SQUARE"]
  585 -> 305 [style=solid label="COLON"]
  585 -> 134 [style=solid label="DECLTYPE"]
  585 -> 57 [style=dashed label="alignment-specifier"]
  585 -> 260 [style=dashed label="attribute-specifier"]
  585 -> 65 [style=dashed label="class-name"]
  585 -> 138 [style=dashed label="decltype-specifier"]
  585 -> 710 [style=dashed label="enum-base"]
  585 -> 1084 [style=dashed label="enum-head-name"]
  585 -> 84 [style=dashed label="enum-name"]
  585 -> 99 [style=dashed label="namespace-alias"]
  585 -> 102 [style=dashed label="namespace-name"]
  585 -> 309 [style=dashed label="nested-name-specifier"]
  585 -> 141 [style=dashed label="simple-template-id"]
  585 -> 142 [style=dashed label="template-name"]
  585 -> 143 [style=dashed label="type-name"]
  585 -> 126 [style=dashed label="typedef-name"]
  585 -> "585R282" [style=solid]
 "585R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  586 [label="State 586\n\l283 enum-head: enum-key enum-head-name •\l287          | enum-key enum-head-name • enum-base\l"]
  586 -> 305 [style=solid label="COLON"]
  586 -> 1085 [style=dashed label="enum-base"]
  586 -> "586R283" [style=solid]
 "586R283" [label="R283", fillcolor=3, shape=diamond, style=filled]
  587 [label="State 587\n\l  7 access-specifier: PRIVATE •\l"]
  587 -> "587R7" [style=solid]
 "587R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  588 [label="State 588\n\l  8 access-specifier: PROTECTED •\l"]
  588 -> "588R8" [style=solid]
 "588R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  589 [label="State 589\n\l  9 access-specifier: PUBLIC •\l"]
  589 -> "589R9" [style=solid]
 "589R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  590 [label="State 590\n\l 13 alias-declaration: USING • IDENTIFIER EQ defining-type-id SEMICOLON\l 14                  | USING • IDENTIFIER attribute-specifier-seq EQ defining-type-id SEMICOLON\l1164 using-declaration: USING • using-declarator-list SEMICOLON\l1175 using-enum-declaration: USING • elaborated-enum-specifier SEMICOLON\l"]
  590 -> 133 [style=solid label="IDENTIFIER"]
  590 -> 9 [style=solid label="SCOPE"]
  590 -> 134 [style=solid label="DECLTYPE"]
  590 -> 135 [style=solid label="ENUM"]
  590 -> 137 [style=solid label="TYPENAME"]
  590 -> 65 [style=dashed label="class-name"]
  590 -> 138 [style=dashed label="decltype-specifier"]
  590 -> 139 [style=dashed label="elaborated-enum-specifier"]
  590 -> 84 [style=dashed label="enum-name"]
  590 -> 99 [style=dashed label="namespace-alias"]
  590 -> 102 [style=dashed label="namespace-name"]
  590 -> 140 [style=dashed label="nested-name-specifier"]
  590 -> 141 [style=dashed label="simple-template-id"]
  590 -> 142 [style=dashed label="template-name"]
  590 -> 143 [style=dashed label="type-name"]
  590 -> 126 [style=dashed label="typedef-name"]
  590 -> 144 [style=dashed label="using-declarator"]
  590 -> 145 [style=dashed label="using-declarator-list"]
  591 [label="State 591\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l605 member-declarator: IDENTIFIER • COLON constant-expression\l607                  | IDENTIFIER • attribute-specifier-seq COLON constant-expression\l609                  | IDENTIFIER • COLON constant-expression brace-or-equal-initializer\l611                  | IDENTIFIER • attribute-specifier-seq COLON constant-expression brace-or-equal-initializer\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l1140 unqualified-id: IDENTIFIER •\l"]
  591 -> 4 [style=solid label="ALIGNAS"]
  591 -> 10 [style=solid label="OPEN_SQUARE"]
  591 -> 1086 [style=solid label="COLON"]
  591 -> 57 [style=dashed label="alignment-specifier"]
  591 -> 60 [style=dashed label="attribute-specifier"]
  591 -> 1087 [style=dashed label="attribute-specifier-seq"]
  591 -> "591R145d" [label="[ALIGNAS, OPEN_SQUARE, COLON]", style=solid]
 "591R145d" [label="R145", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R145" [style=solid]
 "591R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  591 -> "591R163d" [label="[DECLTYPE, AUTO]", style=solid]
 "591R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R163" [label="[LESS]", style=solid]
 "591R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  591 -> "591R294d" [label="[IDENTIFIER, SEMICOLON, ALIGNAS, OPEN_PAREN, ELLIPSIS, AND, SCOPE, OPEN_SQUARE, COLON, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "591R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R647d" [label="[SCOPE]", style=solid]
 "591R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R653d" [label="[SCOPE]", style=solid]
 "591R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R1052d" [label="[IDENTIFIER, SEMICOLON, ALIGNAS, OPEN_PAREN, ELLIPSIS, AND, SCOPE, OPEN_SQUARE, COLON, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, LESS, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "591R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R1110d" [label="[IDENTIFIER, SEMICOLON, ALIGNAS, OPEN_PAREN, ELLIPSIS, AND, SCOPE, OPEN_SQUARE, COLON, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "591R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R1140d" [label="[SEMICOLON, ALIGNAS, OPEN_PAREN, OPEN_SQUARE, COLON]", style=solid]
 "591R1140d" [label="R1140", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R1140" [label="[EQ, COMMA, OPEN_BRACE, FINAL, TRY, REQUIRES, OVERRIDE]", style=solid]
 "591R1140" [label="R1140", fillcolor=3, shape=diamond, style=filled]
  592 [label="State 592\n\l272 empty-declaration: SEMICOLON •\l581 member-declaration: SEMICOLON •\l"]
  592 -> "592R272" [style=solid]
 "592R272" [label="R272", fillcolor=3, shape=diamond, style=filled]
  592 -> "592R581d" [label="[PRIVATE, PROTECTED, PUBLIC, USING, IDENTIFIER, SEMICOLON, ALIGNAS, OPEN_PAREN, ELLIPSIS, AND, SCOPE, OPEN_SQUARE, COLON, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "592R581d" [label="R581", fillcolor=5, shape=diamond, style=filled]
  593 [label="State 593\n\l606 member-declarator: COLON • constant-expression\l610                  | COLON • constant-expression brace-or-equal-initializer\l"]
  593 -> 356 [style=solid label="PLUS"]
  593 -> 357 [style=solid label="MINUS"]
  593 -> 2 [style=solid label="IDENTIFIER"]
  593 -> 358 [style=solid label="OPEN_PAREN"]
  593 -> 359 [style=solid label="AND"]
  593 -> 360 [style=solid label="SCOPE"]
  593 -> 361 [style=solid label="OPEN_SQUARE"]
  593 -> 362 [style=solid label="CO_AWAIT"]
  593 -> 363 [style=solid label="ZERO_LB"]
  593 -> 364 [style=solid label="ZERO_HB"]
  593 -> 365 [style=solid label="SINGLE_QUOTE"]
  593 -> 366 [style=solid label="FALSE"]
  593 -> 367 [style=solid label="TRUE"]
  593 -> 368 [style=solid label="NOEXCEPT"]
  593 -> 17 [style=solid label="OPERATOR"]
  593 -> 26 [style=solid label="DECLTYPE"]
  593 -> 369 [style=solid label="DELETE"]
  593 -> 370 [style=solid label="DOT"]
  593 -> 184 [style=solid label="UNICODE_8"]
  593 -> 371 [style=solid label="MULT"]
  593 -> 199 [style=solid label="DOUBLE_QUOTE"]
  593 -> 372 [style=solid label="ZERO_LX"]
  593 -> 373 [style=solid label="ZERO_HX"]
  593 -> 374 [style=solid label="REQUIRES"]
  593 -> 375 [style=solid label="NEW"]
  593 -> 376 [style=solid label="COMPL"]
  593 -> 377 [style=solid label="NOT"]
  593 -> 378 [style=solid label="PLUS_PLUS"]
  593 -> 379 [style=solid label="MINUS_MINUS"]
  593 -> 380 [style=solid label="THIS"]
  593 -> 36 [style=solid label="AUTO"]
  593 -> 381 [style=solid label="NULLPTR"]
  593 -> 382 [style=solid label="DYNAMIC_CAST"]
  593 -> 383 [style=solid label="STATIC_CAST"]
  593 -> 384 [style=solid label="REINTERPRET_CAST"]
  593 -> 385 [style=solid label="CONST_CAST"]
  593 -> 386 [style=solid label="TYPEID"]
  593 -> 37 [style=solid label="CHAR"]
  593 -> 38 [style=solid label="CHAR8_T"]
  593 -> 39 [style=solid label="CHAR16_T"]
  593 -> 40 [style=solid label="CHAR32_T"]
  593 -> 41 [style=solid label="WCHAR_T"]
  593 -> 42 [style=solid label="BOOL"]
  593 -> 43 [style=solid label="SHORT"]
  593 -> 44 [style=solid label="INT"]
  593 -> 45 [style=solid label="LONG"]
  593 -> 46 [style=solid label="SIGNED"]
  593 -> 47 [style=solid label="UNSIGNED"]
  593 -> 48 [style=solid label="FLOAT"]
  593 -> 49 [style=solid label="DOUBLE"]
  593 -> 50 [style=solid label="VOID"]
  593 -> 55 [style=solid label="TYPENAME"]
  593 -> 387 [style=solid label="SIZEOF"]
  593 -> 388 [style=solid label="ALIGNOF"]
  593 -> 389 [style=solid label="'0'"]
  593 -> 390 [style=solid label="'1'"]
  593 -> 391 [style=solid label="'2'"]
  593 -> 392 [style=solid label="'3'"]
  593 -> 393 [style=solid label="'4'"]
  593 -> 394 [style=solid label="'5'"]
  593 -> 395 [style=solid label="'6'"]
  593 -> 396 [style=solid label="'7'"]
  593 -> 397 [style=solid label="'8'"]
  593 -> 398 [style=solid label="'9'"]
  593 -> 205 [style=solid label="'u'"]
  593 -> 206 [style=solid label="'U'"]
  593 -> 207 [style=solid label="'L'"]
  593 -> 208 [style=solid label="'R'"]
  593 -> 399 [style=dashed label="additive-expression"]
  593 -> 400 [style=dashed label="and-expression"]
  593 -> 401 [style=dashed label="await-expression"]
  593 -> 402 [style=dashed label="binary-literal"]
  593 -> 403 [style=dashed label="boolean-literal"]
  593 -> 404 [style=dashed label="cast-expression"]
  593 -> 405 [style=dashed label="character-literal"]
  593 -> 65 [style=dashed label="class-name"]
  593 -> 406 [style=dashed label="compare-expression"]
  593 -> 67 [style=dashed label="concept-name"]
  593 -> 407 [style=dashed label="conditional-expression"]
  593 -> 1088 [style=dashed label="constant-expression"]
  593 -> 68 [style=dashed label="conversion-function-id"]
  593 -> 409 [style=dashed label="decimal-floating-point-literal"]
  593 -> 410 [style=dashed label="decimal-literal"]
  593 -> 76 [style=dashed label="decltype-specifier"]
  593 -> 411 [style=dashed label="delete-expression"]
  593 -> 412 [style=dashed label="digit"]
  593 -> 413 [style=dashed label="digit-sequence"]
  593 -> 414 [style=dashed label="encoding-prefix"]
  593 -> 84 [style=dashed label="enum-name"]
  593 -> 415 [style=dashed label="equality-expression"]
  593 -> 416 [style=dashed label="exclusive-or-expression"]
  593 -> 417 [style=dashed label="floating-point-literal"]
  593 -> 418 [style=dashed label="fold-expression"]
  593 -> 419 [style=dashed label="fractional-constant"]
  593 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  593 -> 421 [style=dashed label="hexadecimal-literal"]
  593 -> 422 [style=dashed label="hexadecimal-prefix"]
  593 -> 423 [style=dashed label="id-expression"]
  593 -> 424 [style=dashed label="inclusive-or-expression"]
  593 -> 425 [style=dashed label="integer-literal"]
  593 -> 426 [style=dashed label="lambda-expression"]
  593 -> 427 [style=dashed label="lambda-introducer"]
  593 -> 428 [style=dashed label="literal"]
  593 -> 95 [style=dashed label="literal-operator-id"]
  593 -> 429 [style=dashed label="logical-and-expression"]
  593 -> 430 [style=dashed label="logical-or-expression"]
  593 -> 431 [style=dashed label="multiplicative-expression"]
  593 -> 99 [style=dashed label="namespace-alias"]
  593 -> 102 [style=dashed label="namespace-name"]
  593 -> 432 [style=dashed label="nested-name-specifier"]
  593 -> 433 [style=dashed label="new-expression"]
  593 -> 434 [style=dashed label="noexcept-expression"]
  593 -> 435 [style=dashed label="nonzero-digit"]
  593 -> 436 [style=dashed label="octal-literal"]
  593 -> 108 [style=dashed label="operator-function-id"]
  593 -> 109 [style=dashed label="placeholder-type-specifier"]
  593 -> 437 [style=dashed label="pm-expression"]
  593 -> 438 [style=dashed label="pointer-literal"]
  593 -> 439 [style=dashed label="postfix-expression"]
  593 -> 440 [style=dashed label="primary-expression"]
  593 -> 112 [style=dashed label="qualified-id"]
  593 -> 441 [style=dashed label="relational-expression"]
  593 -> 442 [style=dashed label="requires-expression"]
  593 -> 443 [style=dashed label="shift-expression"]
  593 -> 114 [style=dashed label="simple-template-id"]
  593 -> 529 [style=dashed label="simple-type-specifier"]
  593 -> 445 [style=dashed label="string-literal"]
  593 -> 120 [style=dashed label="template-id"]
  593 -> 215 [style=dashed label="template-name"]
  593 -> 123 [style=dashed label="type-constraint"]
  593 -> 124 [style=dashed label="type-name"]
  593 -> 126 [style=dashed label="typedef-name"]
  593 -> 531 [style=dashed label="typename-specifier"]
  593 -> 449 [style=dashed label="unary-expression"]
  593 -> 450 [style=dashed label="unary-operator"]
  593 -> 129 [style=dashed label="unqualified-id"]
  593 -> 451 [style=dashed label="user-defined-character-literal"]
  593 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  593 -> 453 [style=dashed label="user-defined-integer-literal"]
  593 -> 454 [style=dashed label="user-defined-literal"]
  593 -> 455 [style=dashed label="user-defined-string-literal"]
  594 [label="State 594\n\l151 class-specifier: class-head OPEN_BRACE CLOSE_BRACE •\l"]
  594 -> "594R151" [style=solid]
 "594R151" [label="R151", fillcolor=3, shape=diamond, style=filled]
  595 [label="State 595\n\l321 explicit-specialization: TEMPLATE • LESS GREATER declaration\l1045 template-head: TEMPLATE • LESS template-parameter-list GREATER\l1046              | TEMPLATE • LESS template-parameter-list GREATER requires-clause\l"]
  595 -> 156 [style=solid label="LESS"]
  596 [label="State 596\n\l617 member-specification: access-specifier • COLON\l618                     | access-specifier • COLON member-specification\l"]
  596 -> 1089 [style=solid label="COLON"]
  597 [label="State 597\n\l595 member-declaration: alias-declaration •\l"]
  597 -> "597R595" [style=solid]
 "597R595" [label="R595", fillcolor=3, shape=diamond, style=filled]
  598 [label="State 598\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l395 function-definition: attribute-specifier-seq • declarator function-body\l397                    | attribute-specifier-seq • decl-specifier-seq declarator function-body\l399                    | attribute-specifier-seq • declarator virt-specifier-seq function-body\l401                    | attribute-specifier-seq • decl-specifier-seq declarator virt-specifier-seq function-body\l403                    | attribute-specifier-seq • declarator requires-clause function-body\l405                    | attribute-specifier-seq • decl-specifier-seq declarator requires-clause function-body\l580 member-declaration: attribute-specifier-seq • SEMICOLON\l582                   | attribute-specifier-seq • decl-specifier-seq SEMICOLON\l584                   | attribute-specifier-seq • member-declarator-list SEMICOLON\l586                   | attribute-specifier-seq • decl-specifier-seq member-declarator-list SEMICOLON\l608 member-declarator: attribute-specifier-seq • COLON constant-expression\l612                  | attribute-specifier-seq • COLON constant-expression brace-or-equal-initializer\l"]
  598 -> 591 [style=solid label="IDENTIFIER"]
  598 -> 1090 [style=solid label="SEMICOLON"]
  598 -> 4 [style=solid label="ALIGNAS"]
  598 -> 5 [style=solid label="OPEN_PAREN"]
  598 -> 6 [style=solid label="ELLIPSIS"]
  598 -> 7 [style=solid label="AND"]
  598 -> 9 [style=solid label="SCOPE"]
  598 -> 10 [style=solid label="OPEN_SQUARE"]
  598 -> 1091 [style=solid label="COLON"]
  598 -> 11 [style=solid label="VIRTUAL"]
  598 -> 12 [style=solid label="CLASS"]
  598 -> 13 [style=solid label="STRUCT"]
  598 -> 14 [style=solid label="UNION"]
  598 -> 16 [style=solid label="AND_AND"]
  598 -> 17 [style=solid label="OPERATOR"]
  598 -> 18 [style=solid label="CONST"]
  598 -> 19 [style=solid label="VOLATILE"]
  598 -> 20 [style=solid label="FRIEND"]
  598 -> 21 [style=solid label="TYPEDEF"]
  598 -> 22 [style=solid label="CONSTEXPR"]
  598 -> 23 [style=solid label="CONSTEVAL"]
  598 -> 24 [style=solid label="CONSTINIT"]
  598 -> 258 [style=solid label="INLINE"]
  598 -> 26 [style=solid label="DECLTYPE"]
  598 -> 27 [style=solid label="ENUM"]
  598 -> 259 [style=solid label="EXTERN"]
  598 -> 29 [style=solid label="EXPLICIT"]
  598 -> 31 [style=solid label="MULT"]
  598 -> 35 [style=solid label="COMPL"]
  598 -> 36 [style=solid label="AUTO"]
  598 -> 37 [style=solid label="CHAR"]
  598 -> 38 [style=solid label="CHAR8_T"]
  598 -> 39 [style=solid label="CHAR16_T"]
  598 -> 40 [style=solid label="CHAR32_T"]
  598 -> 41 [style=solid label="WCHAR_T"]
  598 -> 42 [style=solid label="BOOL"]
  598 -> 43 [style=solid label="SHORT"]
  598 -> 44 [style=solid label="INT"]
  598 -> 45 [style=solid label="LONG"]
  598 -> 46 [style=solid label="SIGNED"]
  598 -> 47 [style=solid label="UNSIGNED"]
  598 -> 48 [style=solid label="FLOAT"]
  598 -> 49 [style=solid label="DOUBLE"]
  598 -> 50 [style=solid label="VOID"]
  598 -> 52 [style=solid label="STATIC"]
  598 -> 53 [style=solid label="THREAD_LOCAL"]
  598 -> 54 [style=solid label="MUTABLE"]
  598 -> 55 [style=solid label="TYPENAME"]
  598 -> 57 [style=dashed label="alignment-specifier"]
  598 -> 1092 [style=dashed label="attribute-specifier"]
  598 -> 1093 [style=dashed label="attribute-specifier-seq"]
  598 -> 63 [style=dashed label="class-head"]
  598 -> 64 [style=dashed label="class-key"]
  598 -> 65 [style=dashed label="class-name"]
  598 -> 66 [style=dashed label="class-specifier"]
  598 -> 67 [style=dashed label="concept-name"]
  598 -> 68 [style=dashed label="conversion-function-id"]
  598 -> 69 [style=dashed label="cv-qualifier"]
  598 -> 70 [style=dashed label="decl-specifier"]
  598 -> 1094 [style=dashed label="decl-specifier-seq"]
  598 -> 1095 [style=dashed label="declarator"]
  598 -> 75 [style=dashed label="declarator-id"]
  598 -> 76 [style=dashed label="decltype-specifier"]
  598 -> 78 [style=dashed label="defining-type-specifier"]
  598 -> 79 [style=dashed label="elaborated-enum-specifier"]
  598 -> 80 [style=dashed label="elaborated-type-specifier"]
  598 -> 82 [style=dashed label="enum-head"]
  598 -> 263 [style=dashed label="enum-key"]
  598 -> 84 [style=dashed label="enum-name"]
  598 -> 85 [style=dashed label="enum-specifier"]
  598 -> 264 [style=dashed label="explicit-specifier"]
  598 -> 91 [style=dashed label="function-specifier"]
  598 -> 93 [style=dashed label="id-expression"]
  598 -> 95 [style=dashed label="literal-operator-id"]
  598 -> 606 [style=dashed label="member-declarator"]
  598 -> 1096 [style=dashed label="member-declarator-list"]
  598 -> 99 [style=dashed label="namespace-alias"]
  598 -> 102 [style=dashed label="namespace-name"]
  598 -> 103 [style=dashed label="nested-name-specifier"]
  598 -> 106 [style=dashed label="noptr-declarator"]
  598 -> 108 [style=dashed label="operator-function-id"]
  598 -> 109 [style=dashed label="placeholder-type-specifier"]
  598 -> 110 [style=dashed label="ptr-declarator"]
  598 -> 111 [style=dashed label="ptr-operator"]
  598 -> 112 [style=dashed label="qualified-id"]
  598 -> 114 [style=dashed label="simple-template-id"]
  598 -> 115 [style=dashed label="simple-type-specifier"]
  598 -> 117 [style=dashed label="storage-class-specifier"]
  598 -> 120 [style=dashed label="template-id"]
  598 -> 215 [style=dashed label="template-name"]
  598 -> 123 [style=dashed label="type-constraint"]
  598 -> 124 [style=dashed label="type-name"]
  598 -> 125 [style=dashed label="type-specifier"]
  598 -> 126 [style=dashed label="typedef-name"]
  598 -> 127 [style=dashed label="typename-specifier"]
  598 -> 129 [style=dashed label="unqualified-id"]
  599 [label="State 599\n\l398 function-definition: decl-specifier-seq • declarator function-body\l402                    | decl-specifier-seq • declarator virt-specifier-seq function-body\l406                    | decl-specifier-seq • declarator requires-clause function-body\l583 member-declaration: decl-specifier-seq • SEMICOLON\l587                   | decl-specifier-seq • member-declarator-list SEMICOLON\l"]
  599 -> 1097 [style=solid label="IDENTIFIER"]
  599 -> 1098 [style=solid label="SEMICOLON"]
  599 -> 4 [style=solid label="ALIGNAS"]
  599 -> 5 [style=solid label="OPEN_PAREN"]
  599 -> 6 [style=solid label="ELLIPSIS"]
  599 -> 7 [style=solid label="AND"]
  599 -> 9 [style=solid label="SCOPE"]
  599 -> 10 [style=solid label="OPEN_SQUARE"]
  599 -> 593 [style=solid label="COLON"]
  599 -> 16 [style=solid label="AND_AND"]
  599 -> 17 [style=solid label="OPERATOR"]
  599 -> 134 [style=solid label="DECLTYPE"]
  599 -> 31 [style=solid label="MULT"]
  599 -> 35 [style=solid label="COMPL"]
  599 -> 57 [style=dashed label="alignment-specifier"]
  599 -> 60 [style=dashed label="attribute-specifier"]
  599 -> 1093 [style=dashed label="attribute-specifier-seq"]
  599 -> 65 [style=dashed label="class-name"]
  599 -> 68 [style=dashed label="conversion-function-id"]
  599 -> 1099 [style=dashed label="declarator"]
  599 -> 75 [style=dashed label="declarator-id"]
  599 -> 138 [style=dashed label="decltype-specifier"]
  599 -> 84 [style=dashed label="enum-name"]
  599 -> 93 [style=dashed label="id-expression"]
  599 -> 95 [style=dashed label="literal-operator-id"]
  599 -> 606 [style=dashed label="member-declarator"]
  599 -> 1100 [style=dashed label="member-declarator-list"]
  599 -> 99 [style=dashed label="namespace-alias"]
  599 -> 102 [style=dashed label="namespace-name"]
  599 -> 148 [style=dashed label="nested-name-specifier"]
  599 -> 106 [style=dashed label="noptr-declarator"]
  599 -> 108 [style=dashed label="operator-function-id"]
  599 -> 110 [style=dashed label="ptr-declarator"]
  599 -> 111 [style=dashed label="ptr-operator"]
  599 -> 112 [style=dashed label="qualified-id"]
  599 -> 114 [style=dashed label="simple-template-id"]
  599 -> 120 [style=dashed label="template-id"]
  599 -> 142 [style=dashed label="template-name"]
  599 -> 143 [style=dashed label="type-name"]
  599 -> 126 [style=dashed label="typedef-name"]
  599 -> 129 [style=dashed label="unqualified-id"]
  600 [label="State 600\n\l396 function-definition: declarator • function-body\l400                    | declarator • virt-specifier-seq function-body\l404                    | declarator • requires-clause function-body\l598 member-declarator: declarator •\l599                  | declarator • virt-specifier-seq\l600                  | declarator • pure-specifier\l601                  | declarator • virt-specifier-seq pure-specifier\l602                  | declarator • requires-clause\l603                  | declarator •\l604                  | declarator • brace-or-equal-initializer\l"]
  600 -> 1101 [style=solid label="EQ"]
  600 -> 288 [style=solid label="COLON"]
  600 -> 644 [style=solid label="OPEN_BRACE"]
  600 -> 290 [style=solid label="FINAL"]
  600 -> 291 [style=solid label="TRY"]
  600 -> 292 [style=solid label="REQUIRES"]
  600 -> 293 [style=solid label="OVERRIDE"]
  600 -> 1102 [style=dashed label="brace-or-equal-initializer"]
  600 -> 646 [style=dashed label="braced-init-list"]
  600 -> 294 [style=dashed label="compound-statement"]
  600 -> 295 [style=dashed label="ctor-initializer"]
  600 -> 296 [style=dashed label="function-body"]
  600 -> 297 [style=dashed label="function-try-block"]
  600 -> 1103 [style=dashed label="pure-specifier"]
  600 -> 1104 [style=dashed label="requires-clause"]
  600 -> 299 [style=dashed label="virt-specifier"]
  600 -> 1105 [style=dashed label="virt-specifier-seq"]
  600 -> "600R598" [style=solid]
 "600R598" [label="R598", fillcolor=3, shape=diamond, style=filled]
  600 -> "600R603d" [label="[SEMICOLON, COMMA]", style=solid]
 "600R603d" [label="R603", fillcolor=5, shape=diamond, style=filled]
  601 [label="State 601\n\l594 member-declaration: deduction-guide •\l"]
  601 -> "601R594" [style=solid]
 "601R594" [label="R594", fillcolor=3, shape=diamond, style=filled]
  602 [label="State 602\n\l597 member-declaration: empty-declaration •\l"]
  602 -> "602R597" [style=solid]
 "602R597" [label="R597", fillcolor=3, shape=diamond, style=filled]
  603 [label="State 603\n\l593 member-declaration: explicit-specialization •\l"]
  603 -> "603R593" [style=solid]
 "603R593" [label="R593", fillcolor=3, shape=diamond, style=filled]
  604 [label="State 604\n\l588 member-declaration: function-definition •\l"]
  604 -> "604R588" [style=solid]
 "604R588" [label="R588", fillcolor=3, shape=diamond, style=filled]
  605 [label="State 605\n\l615 member-specification: member-declaration •\l616                     | member-declaration • member-specification\l"]
  605 -> 587 [style=solid label="PRIVATE"]
  605 -> 588 [style=solid label="PROTECTED"]
  605 -> 589 [style=solid label="PUBLIC"]
  605 -> 590 [style=solid label="USING"]
  605 -> 591 [style=solid label="IDENTIFIER"]
  605 -> 592 [style=solid label="SEMICOLON"]
  605 -> 4 [style=solid label="ALIGNAS"]
  605 -> 5 [style=solid label="OPEN_PAREN"]
  605 -> 6 [style=solid label="ELLIPSIS"]
  605 -> 7 [style=solid label="AND"]
  605 -> 9 [style=solid label="SCOPE"]
  605 -> 10 [style=solid label="OPEN_SQUARE"]
  605 -> 593 [style=solid label="COLON"]
  605 -> 11 [style=solid label="VIRTUAL"]
  605 -> 12 [style=solid label="CLASS"]
  605 -> 13 [style=solid label="STRUCT"]
  605 -> 14 [style=solid label="UNION"]
  605 -> 595 [style=solid label="TEMPLATE"]
  605 -> 16 [style=solid label="AND_AND"]
  605 -> 17 [style=solid label="OPERATOR"]
  605 -> 18 [style=solid label="CONST"]
  605 -> 19 [style=solid label="VOLATILE"]
  605 -> 20 [style=solid label="FRIEND"]
  605 -> 21 [style=solid label="TYPEDEF"]
  605 -> 22 [style=solid label="CONSTEXPR"]
  605 -> 23 [style=solid label="CONSTEVAL"]
  605 -> 24 [style=solid label="CONSTINIT"]
  605 -> 258 [style=solid label="INLINE"]
  605 -> 26 [style=solid label="DECLTYPE"]
  605 -> 27 [style=solid label="ENUM"]
  605 -> 259 [style=solid label="EXTERN"]
  605 -> 29 [style=solid label="EXPLICIT"]
  605 -> 31 [style=solid label="MULT"]
  605 -> 35 [style=solid label="COMPL"]
  605 -> 36 [style=solid label="AUTO"]
  605 -> 37 [style=solid label="CHAR"]
  605 -> 38 [style=solid label="CHAR8_T"]
  605 -> 39 [style=solid label="CHAR16_T"]
  605 -> 40 [style=solid label="CHAR32_T"]
  605 -> 41 [style=solid label="WCHAR_T"]
  605 -> 42 [style=solid label="BOOL"]
  605 -> 43 [style=solid label="SHORT"]
  605 -> 44 [style=solid label="INT"]
  605 -> 45 [style=solid label="LONG"]
  605 -> 46 [style=solid label="SIGNED"]
  605 -> 47 [style=solid label="UNSIGNED"]
  605 -> 48 [style=solid label="FLOAT"]
  605 -> 49 [style=solid label="DOUBLE"]
  605 -> 50 [style=solid label="VOID"]
  605 -> 51 [style=solid label="STATIC_ASSERT"]
  605 -> 52 [style=solid label="STATIC"]
  605 -> 53 [style=solid label="THREAD_LOCAL"]
  605 -> 54 [style=solid label="MUTABLE"]
  605 -> 55 [style=solid label="TYPENAME"]
  605 -> 596 [style=dashed label="access-specifier"]
  605 -> 597 [style=dashed label="alias-declaration"]
  605 -> 57 [style=dashed label="alignment-specifier"]
  605 -> 60 [style=dashed label="attribute-specifier"]
  605 -> 598 [style=dashed label="attribute-specifier-seq"]
  605 -> 63 [style=dashed label="class-head"]
  605 -> 64 [style=dashed label="class-key"]
  605 -> 65 [style=dashed label="class-name"]
  605 -> 66 [style=dashed label="class-specifier"]
  605 -> 67 [style=dashed label="concept-name"]
  605 -> 68 [style=dashed label="conversion-function-id"]
  605 -> 69 [style=dashed label="cv-qualifier"]
  605 -> 70 [style=dashed label="decl-specifier"]
  605 -> 599 [style=dashed label="decl-specifier-seq"]
  605 -> 600 [style=dashed label="declarator"]
  605 -> 75 [style=dashed label="declarator-id"]
  605 -> 76 [style=dashed label="decltype-specifier"]
  605 -> 601 [style=dashed label="deduction-guide"]
  605 -> 78 [style=dashed label="defining-type-specifier"]
  605 -> 79 [style=dashed label="elaborated-enum-specifier"]
  605 -> 80 [style=dashed label="elaborated-type-specifier"]
  605 -> 602 [style=dashed label="empty-declaration"]
  605 -> 82 [style=dashed label="enum-head"]
  605 -> 83 [style=dashed label="enum-key"]
  605 -> 84 [style=dashed label="enum-name"]
  605 -> 85 [style=dashed label="enum-specifier"]
  605 -> 603 [style=dashed label="explicit-specialization"]
  605 -> 88 [style=dashed label="explicit-specifier"]
  605 -> 604 [style=dashed label="function-definition"]
  605 -> 91 [style=dashed label="function-specifier"]
  605 -> 93 [style=dashed label="id-expression"]
  605 -> 95 [style=dashed label="literal-operator-id"]
  605 -> 605 [style=dashed label="member-declaration"]
  605 -> 606 [style=dashed label="member-declarator"]
  605 -> 607 [style=dashed label="member-declarator-list"]
  605 -> 1106 [style=dashed label="member-specification"]
  605 -> 99 [style=dashed label="namespace-alias"]
  605 -> 102 [style=dashed label="namespace-name"]
  605 -> 103 [style=dashed label="nested-name-specifier"]
  605 -> 106 [style=dashed label="noptr-declarator"]
  605 -> 609 [style=dashed label="opaque-enum-declaration"]
  605 -> 108 [style=dashed label="operator-function-id"]
  605 -> 109 [style=dashed label="placeholder-type-specifier"]
  605 -> 110 [style=dashed label="ptr-declarator"]
  605 -> 111 [style=dashed label="ptr-operator"]
  605 -> 112 [style=dashed label="qualified-id"]
  605 -> 114 [style=dashed label="simple-template-id"]
  605 -> 115 [style=dashed label="simple-type-specifier"]
  605 -> 610 [style=dashed label="static_assert-declaration"]
  605 -> 117 [style=dashed label="storage-class-specifier"]
  605 -> 611 [style=dashed label="template-declaration"]
  605 -> 119 [style=dashed label="template-head"]
  605 -> 120 [style=dashed label="template-id"]
  605 -> 121 [style=dashed label="template-name"]
  605 -> 123 [style=dashed label="type-constraint"]
  605 -> 124 [style=dashed label="type-name"]
  605 -> 125 [style=dashed label="type-specifier"]
  605 -> 126 [style=dashed label="typedef-name"]
  605 -> 127 [style=dashed label="typename-specifier"]
  605 -> 129 [style=dashed label="unqualified-id"]
  605 -> 612 [style=dashed label="using-declaration"]
  605 -> 613 [style=dashed label="using-enum-declaration"]
  605 -> "605R615" [style=solid]
 "605R615" [label="R615", fillcolor=3, shape=diamond, style=filled]
  606 [label="State 606\n\l613 member-declarator-list: member-declarator •\l"]
  606 -> "606R613" [style=solid]
 "606R613" [label="R613", fillcolor=3, shape=diamond, style=filled]
  607 [label="State 607\n\l585 member-declaration: member-declarator-list • SEMICOLON\l614 member-declarator-list: member-declarator-list • COMMA member-declarator\l"]
  607 -> 1107 [style=solid label="SEMICOLON"]
  607 -> 1108 [style=solid label="COMMA"]
  608 [label="State 608\n\l152 class-specifier: class-head OPEN_BRACE member-specification • CLOSE_BRACE\l"]
  608 -> 1109 [style=solid label="CLOSE_BRACE"]
  609 [label="State 609\n\l596 member-declaration: opaque-enum-declaration •\l"]
  609 -> "609R596" [style=solid]
 "609R596" [label="R596", fillcolor=3, shape=diamond, style=filled]
  610 [label="State 610\n\l591 member-declaration: static_assert-declaration •\l"]
  610 -> "610R591" [style=solid]
 "610R591" [label="R591", fillcolor=3, shape=diamond, style=filled]
  611 [label="State 611\n\l592 member-declaration: template-declaration •\l"]
  611 -> "611R592" [style=solid]
 "611R592" [label="R592", fillcolor=3, shape=diamond, style=filled]
  612 [label="State 612\n\l589 member-declaration: using-declaration •\l"]
  612 -> "612R589" [style=solid]
 "612R589" [label="R589", fillcolor=3, shape=diamond, style=filled]
  613 [label="State 613\n\l590 member-declaration: using-enum-declaration •\l"]
  613 -> "613R590" [style=solid]
 "613R590" [label="R590", fillcolor=3, shape=diamond, style=filled]
  614 [label="State 614\n\l 72 base-specifier: VIRTUAL • class-or-decltype\l 74               | VIRTUAL • access-specifier class-or-decltype\l"]
  614 -> 587 [style=solid label="PRIVATE"]
  614 -> 588 [style=solid label="PROTECTED"]
  614 -> 589 [style=solid label="PUBLIC"]
  614 -> 253 [style=solid label="IDENTIFIER"]
  614 -> 9 [style=solid label="SCOPE"]
  614 -> 134 [style=solid label="DECLTYPE"]
  614 -> 1110 [style=dashed label="access-specifier"]
  614 -> 65 [style=dashed label="class-name"]
  614 -> 1111 [style=dashed label="class-or-decltype"]
  614 -> 620 [style=dashed label="decltype-specifier"]
  614 -> 84 [style=dashed label="enum-name"]
  614 -> 99 [style=dashed label="namespace-alias"]
  614 -> 102 [style=dashed label="namespace-name"]
  614 -> 621 [style=dashed label="nested-name-specifier"]
  614 -> 141 [style=dashed label="simple-template-id"]
  614 -> 142 [style=dashed label="template-name"]
  614 -> 622 [style=dashed label="type-name"]
  614 -> 126 [style=dashed label="typedef-name"]
  615 [label="State 615\n\l 76 base-specifier: access-specifier • class-or-decltype\l 78               | access-specifier • VIRTUAL class-or-decltype\l"]
  615 -> 253 [style=solid label="IDENTIFIER"]
  615 -> 9 [style=solid label="SCOPE"]
  615 -> 1112 [style=solid label="VIRTUAL"]
  615 -> 134 [style=solid label="DECLTYPE"]
  615 -> 65 [style=dashed label="class-name"]
  615 -> 1113 [style=dashed label="class-or-decltype"]
  615 -> 620 [style=dashed label="decltype-specifier"]
  615 -> 84 [style=dashed label="enum-name"]
  615 -> 99 [style=dashed label="namespace-alias"]
  615 -> 102 [style=dashed label="namespace-name"]
  615 -> 621 [style=dashed label="nested-name-specifier"]
  615 -> 141 [style=dashed label="simple-template-id"]
  615 -> 142 [style=dashed label="template-name"]
  615 -> 622 [style=dashed label="type-name"]
  615 -> 126 [style=dashed label="typedef-name"]
  616 [label="State 616\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l 69 base-specifier: attribute-specifier-seq • class-or-decltype\l 71               | attribute-specifier-seq • VIRTUAL class-or-decltype\l 73               | attribute-specifier-seq • VIRTUAL access-specifier class-or-decltype\l 75               | attribute-specifier-seq • access-specifier class-or-decltype\l 77               | attribute-specifier-seq • access-specifier VIRTUAL class-or-decltype\l"]
  616 -> 587 [style=solid label="PRIVATE"]
  616 -> 588 [style=solid label="PROTECTED"]
  616 -> 589 [style=solid label="PUBLIC"]
  616 -> 253 [style=solid label="IDENTIFIER"]
  616 -> 4 [style=solid label="ALIGNAS"]
  616 -> 9 [style=solid label="SCOPE"]
  616 -> 10 [style=solid label="OPEN_SQUARE"]
  616 -> 1114 [style=solid label="VIRTUAL"]
  616 -> 134 [style=solid label="DECLTYPE"]
  616 -> 1115 [style=dashed label="access-specifier"]
  616 -> 57 [style=dashed label="alignment-specifier"]
  616 -> 260 [style=dashed label="attribute-specifier"]
  616 -> 65 [style=dashed label="class-name"]
  616 -> 1116 [style=dashed label="class-or-decltype"]
  616 -> 620 [style=dashed label="decltype-specifier"]
  616 -> 84 [style=dashed label="enum-name"]
  616 -> 99 [style=dashed label="namespace-alias"]
  616 -> 102 [style=dashed label="namespace-name"]
  616 -> 621 [style=dashed label="nested-name-specifier"]
  616 -> 141 [style=dashed label="simple-template-id"]
  616 -> 142 [style=dashed label="template-name"]
  616 -> 622 [style=dashed label="type-name"]
  616 -> 126 [style=dashed label="typedef-name"]
  617 [label="State 617\n\l 79 base-specifier-list: base-specifier •\l 80                    | base-specifier • ELLIPSIS\l"]
  617 -> 1117 [style=solid label="ELLIPSIS"]
  617 -> "617R79" [style=solid]
 "617R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
  618 [label="State 618\n\l 68 base-clause: COLON base-specifier-list •\l 81 base-specifier-list: base-specifier-list • COMMA base-specifier\l 82                    | base-specifier-list • COMMA base-specifier ELLIPSIS\l"]
  618 -> 1118 [style=solid label="COMMA"]
  618 -> "618R68" [style=solid]
 "618R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
  619 [label="State 619\n\l 70 base-specifier: class-or-decltype •\l"]
  619 -> "619R70" [style=solid]
 "619R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
  620 [label="State 620\n\l150 class-or-decltype: decltype-specifier •\l658 nested-name-specifier: decltype-specifier • SCOPE\l"]
  620 -> 302 [style=solid label="SCOPE"]
  620 -> "620R150" [style=solid]
 "620R150" [label="R150", fillcolor=3, shape=diamond, style=filled]
  621 [label="State 621\n\l147 class-or-decltype: nested-name-specifier • type-name\l149                  | nested-name-specifier • TEMPLATE simple-template-id\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l"]
  621 -> 1119 [style=solid label="IDENTIFIER"]
  621 -> 1120 [style=solid label="TEMPLATE"]
  621 -> 65 [style=dashed label="class-name"]
  621 -> 84 [style=dashed label="enum-name"]
  621 -> 510 [style=dashed label="simple-template-id"]
  621 -> 142 [style=dashed label="template-name"]
  621 -> 1121 [style=dashed label="type-name"]
  621 -> 126 [style=dashed label="typedef-name"]
  622 [label="State 622\n\l148 class-or-decltype: type-name •\l656 nested-name-specifier: type-name • SCOPE\l"]
  622 -> 341 [style=solid label="SCOPE"]
  622 -> "622R148" [style=solid]
 "622R148" [label="R148", fillcolor=3, shape=diamond, style=filled]
  623 [label="State 623\n\l145 class-name: IDENTIFIER •\l265 elaborated-type-specifier: class-key attribute-specifier-seq IDENTIFIER •\l294 enum-name: IDENTIFIER •\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l"]
  623 -> "623R145" [label="[SCOPE, COLON, OPEN_BRACE, FINAL]", style=solid]
 "623R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  623 -> "623R265d" [label="[SCOPE, COLON, OPEN_BRACE, FINAL]", style=solid]
 "623R265d" [label="R265", fillcolor=5, shape=diamond, style=filled]
  623 -> "623R265" [style=solid]
 "623R265" [label="R265", fillcolor=3, shape=diamond, style=filled]
  623 -> "623R294d" [label="[SCOPE]", style=solid]
 "623R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  623 -> "623R647d" [label="[SCOPE]", style=solid]
 "623R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  623 -> "623R653d" [label="[SCOPE]", style=solid]
 "623R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  623 -> "623R1052d" [label="[LESS]", style=solid]
 "623R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  623 -> "623R1110d" [label="[SCOPE]", style=solid]
 "623R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  624 [label="State 624\n\l139 class-head: class-key attribute-specifier-seq base-clause •\l"]
  624 -> "624R139" [style=solid]
 "624R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  625 [label="State 625\n\l129 class-head: class-key attribute-specifier-seq class-head-name •\l131           | class-key attribute-specifier-seq class-head-name • class-virt-specifier\l133           | class-key attribute-specifier-seq class-head-name • base-clause\l135           | class-key attribute-specifier-seq class-head-name • class-virt-specifier base-clause\l"]
  625 -> 267 [style=solid label="COLON"]
  625 -> 627 [style=solid label="FINAL"]
  625 -> 1122 [style=dashed label="base-clause"]
  625 -> 1123 [style=dashed label="class-virt-specifier"]
  625 -> "625R129" [style=solid]
 "625R129" [label="R129", fillcolor=3, shape=diamond, style=filled]
  626 [label="State 626\n\l140 class-head-name: nested-name-specifier • class-name\l267 elaborated-type-specifier: class-key attribute-specifier-seq nested-name-specifier • IDENTIFIER\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l"]
  626 -> 1124 [style=solid label="IDENTIFIER"]
  626 -> 350 [style=solid label="TEMPLATE"]
  626 -> 632 [style=dashed label="class-name"]
  626 -> 1125 [style=dashed label="simple-template-id"]
  626 -> 142 [style=dashed label="template-name"]
  627 [label="State 627\n\l153 class-virt-specifier: FINAL •\l"]
  627 -> "627R153" [style=solid]
 "627R153" [label="R153", fillcolor=3, shape=diamond, style=filled]
  628 [label="State 628\n\l132 class-head: class-key class-head-name base-clause •\l"]
  628 -> "628R132" [style=solid]
 "628R132" [label="R132", fillcolor=3, shape=diamond, style=filled]
  629 [label="State 629\n\l130 class-head: class-key class-head-name class-virt-specifier •\l134           | class-key class-head-name class-virt-specifier • base-clause\l"]
  629 -> 267 [style=solid label="COLON"]
  629 -> 1126 [style=dashed label="base-clause"]
  629 -> "629R130" [style=solid]
 "629R130" [label="R130", fillcolor=3, shape=diamond, style=filled]
  630 [label="State 630\n\l145 class-name: IDENTIFIER •\l266 elaborated-type-specifier: class-key nested-name-specifier IDENTIFIER •\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l"]
  630 -> 722 [style=solid label="SCOPE"]
  630 -> "630R145" [label="[COLON, OPEN_BRACE, FINAL]", style=solid]
 "630R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  630 -> "630R266d" [label="[SCOPE, COLON, OPEN_BRACE]", style=solid]
 "630R266d" [label="R266", fillcolor=5, shape=diamond, style=filled]
  630 -> "630R266" [style=solid]
 "630R266" [label="R266", fillcolor=3, shape=diamond, style=filled]
  630 -> "630R1052" [label="[LESS]", style=solid]
 "630R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  631 [label="State 631\n\l270 elaborated-type-specifier: class-key nested-name-specifier TEMPLATE • simple-template-id\l661 nested-name-specifier: nested-name-specifier TEMPLATE • simple-template-id SCOPE\l"]
  631 -> 310 [style=solid label="IDENTIFIER"]
  631 -> 1127 [style=dashed label="simple-template-id"]
  631 -> 142 [style=dashed label="template-name"]
  632 [label="State 632\n\l140 class-head-name: nested-name-specifier class-name •\l"]
  632 -> "632R140" [style=solid]
 "632R140" [label="R140", fillcolor=3, shape=diamond, style=filled]
  633 [label="State 633\n\l146 class-name: simple-template-id •\l269 elaborated-type-specifier: class-key nested-name-specifier simple-template-id •\l660 nested-name-specifier: nested-name-specifier simple-template-id • SCOPE\l"]
  633 -> 729 [style=solid label="SCOPE"]
  633 -> "633R146" [label="[COLON, OPEN_BRACE, FINAL]", style=solid]
 "633R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  633 -> "633R269d" [label="[SCOPE, COLON, OPEN_BRACE]", style=solid]
 "633R269d" [label="R269", fillcolor=5, shape=diamond, style=filled]
  633 -> "633R269" [style=solid]
 "633R269" [label="R269", fillcolor=3, shape=diamond, style=filled]
  634 [label="State 634\n\l1073 type-constraint: concept-name LESS GREATER •\l"]
  634 -> "634R1073" [style=solid]
 "634R1073" [label="R1073", fillcolor=3, shape=diamond, style=filled]
  635 [label="State 635\n\l1036 template-argument: constant-expression •\l"]
  635 -> "635R1036" [style=solid]
 "635R1036" [label="R1036", fillcolor=3, shape=diamond, style=filled]
  636 [label="State 636\n\l882 primary-expression: id-expression •\l1038 template-argument: id-expression •\l"]
  636 -> "636R882" [style=solid]
 "636R882" [label="R882", fillcolor=3, shape=diamond, style=filled]
  636 -> "636R1038d" [label="[ELLIPSIS, COMMA, GREATER]", style=solid]
 "636R1038d" [label="R1038", fillcolor=5, shape=diamond, style=filled]
  637 [label="State 637\n\l1039 template-argument-list: template-argument •\l1040                       | template-argument • ELLIPSIS\l"]
  637 -> 1128 [style=solid label="ELLIPSIS"]
  637 -> "637R1039" [style=solid]
 "637R1039" [label="R1039", fillcolor=3, shape=diamond, style=filled]
  638 [label="State 638\n\l1041 template-argument-list: template-argument-list • COMMA template-argument\l1042                       | template-argument-list • COMMA template-argument ELLIPSIS\l1075 type-constraint: concept-name LESS template-argument-list • GREATER\l"]
  638 -> 1129 [style=solid label="COMMA"]
  638 -> 1130 [style=solid label="GREATER"]
  639 [label="State 639\n\l1037 template-argument: type-id •\l"]
  639 -> "639R1037" [style=solid]
 "639R1037" [label="R1037", fillcolor=3, shape=diamond, style=filled]
  640 [label="State 640\n\l461 identifier-list: IDENTIFIER •\l"]
  640 -> "640R461" [style=solid]
 "640R461" [label="R461", fillcolor=3, shape=diamond, style=filled]
  641 [label="State 641\n\l462 identifier-list: identifier-list • COMMA IDENTIFIER\l967 simple-declaration: decl-specifier-seq OPEN_SQUARE identifier-list • CLOSE_SQUARE initializer SEMICOLON\l"]
  641 -> 1131 [style=solid label="COMMA"]
  641 -> 1132 [style=solid label="CLOSE_SQUARE"]
  642 [label="State 642\n\l106 brace-or-equal-initializer: EQ • initializer-clause\l393 function-body: EQ • DEFAULT SEMICOLON\l394              | EQ • DELETE SEMICOLON\l"]
  642 -> 356 [style=solid label="PLUS"]
  642 -> 357 [style=solid label="MINUS"]
  642 -> 2 [style=solid label="IDENTIFIER"]
  642 -> 358 [style=solid label="OPEN_PAREN"]
  642 -> 359 [style=solid label="AND"]
  642 -> 360 [style=solid label="SCOPE"]
  642 -> 361 [style=solid label="OPEN_SQUARE"]
  642 -> 362 [style=solid label="CO_AWAIT"]
  642 -> 935 [style=solid label="OPEN_BRACE"]
  642 -> 363 [style=solid label="ZERO_LB"]
  642 -> 364 [style=solid label="ZERO_HB"]
  642 -> 365 [style=solid label="SINGLE_QUOTE"]
  642 -> 366 [style=solid label="FALSE"]
  642 -> 367 [style=solid label="TRUE"]
  642 -> 368 [style=solid label="NOEXCEPT"]
  642 -> 17 [style=solid label="OPERATOR"]
  642 -> 26 [style=solid label="DECLTYPE"]
  642 -> 1133 [style=solid label="DELETE"]
  642 -> 370 [style=solid label="DOT"]
  642 -> 184 [style=solid label="UNICODE_8"]
  642 -> 371 [style=solid label="MULT"]
  642 -> 655 [style=solid label="DEFAULT"]
  642 -> 199 [style=solid label="DOUBLE_QUOTE"]
  642 -> 372 [style=solid label="ZERO_LX"]
  642 -> 373 [style=solid label="ZERO_HX"]
  642 -> 374 [style=solid label="REQUIRES"]
  642 -> 375 [style=solid label="NEW"]
  642 -> 376 [style=solid label="COMPL"]
  642 -> 377 [style=solid label="NOT"]
  642 -> 378 [style=solid label="PLUS_PLUS"]
  642 -> 379 [style=solid label="MINUS_MINUS"]
  642 -> 380 [style=solid label="THIS"]
  642 -> 36 [style=solid label="AUTO"]
  642 -> 381 [style=solid label="NULLPTR"]
  642 -> 382 [style=solid label="DYNAMIC_CAST"]
  642 -> 383 [style=solid label="STATIC_CAST"]
  642 -> 384 [style=solid label="REINTERPRET_CAST"]
  642 -> 385 [style=solid label="CONST_CAST"]
  642 -> 386 [style=solid label="TYPEID"]
  642 -> 37 [style=solid label="CHAR"]
  642 -> 38 [style=solid label="CHAR8_T"]
  642 -> 39 [style=solid label="CHAR16_T"]
  642 -> 40 [style=solid label="CHAR32_T"]
  642 -> 41 [style=solid label="WCHAR_T"]
  642 -> 42 [style=solid label="BOOL"]
  642 -> 43 [style=solid label="SHORT"]
  642 -> 44 [style=solid label="INT"]
  642 -> 45 [style=solid label="LONG"]
  642 -> 46 [style=solid label="SIGNED"]
  642 -> 47 [style=solid label="UNSIGNED"]
  642 -> 48 [style=solid label="FLOAT"]
  642 -> 49 [style=solid label="DOUBLE"]
  642 -> 50 [style=solid label="VOID"]
  642 -> 523 [style=solid label="THROW"]
  642 -> 55 [style=solid label="TYPENAME"]
  642 -> 387 [style=solid label="SIZEOF"]
  642 -> 388 [style=solid label="ALIGNOF"]
  642 -> 524 [style=solid label="CO_YIELD"]
  642 -> 389 [style=solid label="'0'"]
  642 -> 390 [style=solid label="'1'"]
  642 -> 391 [style=solid label="'2'"]
  642 -> 392 [style=solid label="'3'"]
  642 -> 393 [style=solid label="'4'"]
  642 -> 394 [style=solid label="'5'"]
  642 -> 395 [style=solid label="'6'"]
  642 -> 396 [style=solid label="'7'"]
  642 -> 397 [style=solid label="'8'"]
  642 -> 398 [style=solid label="'9'"]
  642 -> 205 [style=solid label="'u'"]
  642 -> 206 [style=solid label="'U'"]
  642 -> 207 [style=solid label="'L'"]
  642 -> 208 [style=solid label="'R'"]
  642 -> 399 [style=dashed label="additive-expression"]
  642 -> 400 [style=dashed label="and-expression"]
  642 -> 1134 [style=dashed label="assignment-expression"]
  642 -> 401 [style=dashed label="await-expression"]
  642 -> 402 [style=dashed label="binary-literal"]
  642 -> 403 [style=dashed label="boolean-literal"]
  642 -> 1135 [style=dashed label="braced-init-list"]
  642 -> 404 [style=dashed label="cast-expression"]
  642 -> 405 [style=dashed label="character-literal"]
  642 -> 65 [style=dashed label="class-name"]
  642 -> 406 [style=dashed label="compare-expression"]
  642 -> 67 [style=dashed label="concept-name"]
  642 -> 526 [style=dashed label="conditional-expression"]
  642 -> 68 [style=dashed label="conversion-function-id"]
  642 -> 409 [style=dashed label="decimal-floating-point-literal"]
  642 -> 410 [style=dashed label="decimal-literal"]
  642 -> 76 [style=dashed label="decltype-specifier"]
  642 -> 411 [style=dashed label="delete-expression"]
  642 -> 412 [style=dashed label="digit"]
  642 -> 413 [style=dashed label="digit-sequence"]
  642 -> 414 [style=dashed label="encoding-prefix"]
  642 -> 84 [style=dashed label="enum-name"]
  642 -> 415 [style=dashed label="equality-expression"]
  642 -> 416 [style=dashed label="exclusive-or-expression"]
  642 -> 417 [style=dashed label="floating-point-literal"]
  642 -> 418 [style=dashed label="fold-expression"]
  642 -> 419 [style=dashed label="fractional-constant"]
  642 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  642 -> 421 [style=dashed label="hexadecimal-literal"]
  642 -> 422 [style=dashed label="hexadecimal-prefix"]
  642 -> 423 [style=dashed label="id-expression"]
  642 -> 424 [style=dashed label="inclusive-or-expression"]
  642 -> 1136 [style=dashed label="initializer-clause"]
  642 -> 425 [style=dashed label="integer-literal"]
  642 -> 426 [style=dashed label="lambda-expression"]
  642 -> 427 [style=dashed label="lambda-introducer"]
  642 -> 428 [style=dashed label="literal"]
  642 -> 95 [style=dashed label="literal-operator-id"]
  642 -> 429 [style=dashed label="logical-and-expression"]
  642 -> 528 [style=dashed label="logical-or-expression"]
  642 -> 431 [style=dashed label="multiplicative-expression"]
  642 -> 99 [style=dashed label="namespace-alias"]
  642 -> 102 [style=dashed label="namespace-name"]
  642 -> 432 [style=dashed label="nested-name-specifier"]
  642 -> 433 [style=dashed label="new-expression"]
  642 -> 434 [style=dashed label="noexcept-expression"]
  642 -> 435 [style=dashed label="nonzero-digit"]
  642 -> 436 [style=dashed label="octal-literal"]
  642 -> 108 [style=dashed label="operator-function-id"]
  642 -> 109 [style=dashed label="placeholder-type-specifier"]
  642 -> 437 [style=dashed label="pm-expression"]
  642 -> 438 [style=dashed label="pointer-literal"]
  642 -> 439 [style=dashed label="postfix-expression"]
  642 -> 440 [style=dashed label="primary-expression"]
  642 -> 112 [style=dashed label="qualified-id"]
  642 -> 441 [style=dashed label="relational-expression"]
  642 -> 442 [style=dashed label="requires-expression"]
  642 -> 443 [style=dashed label="shift-expression"]
  642 -> 114 [style=dashed label="simple-template-id"]
  642 -> 529 [style=dashed label="simple-type-specifier"]
  642 -> 445 [style=dashed label="string-literal"]
  642 -> 120 [style=dashed label="template-id"]
  642 -> 215 [style=dashed label="template-name"]
  642 -> 530 [style=dashed label="throw-expression"]
  642 -> 123 [style=dashed label="type-constraint"]
  642 -> 124 [style=dashed label="type-name"]
  642 -> 126 [style=dashed label="typedef-name"]
  642 -> 531 [style=dashed label="typename-specifier"]
  642 -> 449 [style=dashed label="unary-expression"]
  642 -> 450 [style=dashed label="unary-operator"]
  642 -> 129 [style=dashed label="unqualified-id"]
  642 -> 451 [style=dashed label="user-defined-character-literal"]
  642 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  642 -> 453 [style=dashed label="user-defined-integer-literal"]
  642 -> 454 [style=dashed label="user-defined-literal"]
  642 -> 455 [style=dashed label="user-defined-string-literal"]
  642 -> 532 [style=dashed label="yield-expression"]
  643 [label="State 643\n\l478 initializer: OPEN_PAREN • expression-list CLOSE_PAREN\l"]
  643 -> 356 [style=solid label="PLUS"]
  643 -> 357 [style=solid label="MINUS"]
  643 -> 2 [style=solid label="IDENTIFIER"]
  643 -> 358 [style=solid label="OPEN_PAREN"]
  643 -> 359 [style=solid label="AND"]
  643 -> 360 [style=solid label="SCOPE"]
  643 -> 361 [style=solid label="OPEN_SQUARE"]
  643 -> 362 [style=solid label="CO_AWAIT"]
  643 -> 935 [style=solid label="OPEN_BRACE"]
  643 -> 363 [style=solid label="ZERO_LB"]
  643 -> 364 [style=solid label="ZERO_HB"]
  643 -> 365 [style=solid label="SINGLE_QUOTE"]
  643 -> 366 [style=solid label="FALSE"]
  643 -> 367 [style=solid label="TRUE"]
  643 -> 368 [style=solid label="NOEXCEPT"]
  643 -> 17 [style=solid label="OPERATOR"]
  643 -> 26 [style=solid label="DECLTYPE"]
  643 -> 369 [style=solid label="DELETE"]
  643 -> 370 [style=solid label="DOT"]
  643 -> 184 [style=solid label="UNICODE_8"]
  643 -> 371 [style=solid label="MULT"]
  643 -> 199 [style=solid label="DOUBLE_QUOTE"]
  643 -> 372 [style=solid label="ZERO_LX"]
  643 -> 373 [style=solid label="ZERO_HX"]
  643 -> 374 [style=solid label="REQUIRES"]
  643 -> 375 [style=solid label="NEW"]
  643 -> 376 [style=solid label="COMPL"]
  643 -> 377 [style=solid label="NOT"]
  643 -> 378 [style=solid label="PLUS_PLUS"]
  643 -> 379 [style=solid label="MINUS_MINUS"]
  643 -> 380 [style=solid label="THIS"]
  643 -> 36 [style=solid label="AUTO"]
  643 -> 381 [style=solid label="NULLPTR"]
  643 -> 382 [style=solid label="DYNAMIC_CAST"]
  643 -> 383 [style=solid label="STATIC_CAST"]
  643 -> 384 [style=solid label="REINTERPRET_CAST"]
  643 -> 385 [style=solid label="CONST_CAST"]
  643 -> 386 [style=solid label="TYPEID"]
  643 -> 37 [style=solid label="CHAR"]
  643 -> 38 [style=solid label="CHAR8_T"]
  643 -> 39 [style=solid label="CHAR16_T"]
  643 -> 40 [style=solid label="CHAR32_T"]
  643 -> 41 [style=solid label="WCHAR_T"]
  643 -> 42 [style=solid label="BOOL"]
  643 -> 43 [style=solid label="SHORT"]
  643 -> 44 [style=solid label="INT"]
  643 -> 45 [style=solid label="LONG"]
  643 -> 46 [style=solid label="SIGNED"]
  643 -> 47 [style=solid label="UNSIGNED"]
  643 -> 48 [style=solid label="FLOAT"]
  643 -> 49 [style=solid label="DOUBLE"]
  643 -> 50 [style=solid label="VOID"]
  643 -> 523 [style=solid label="THROW"]
  643 -> 55 [style=solid label="TYPENAME"]
  643 -> 387 [style=solid label="SIZEOF"]
  643 -> 388 [style=solid label="ALIGNOF"]
  643 -> 524 [style=solid label="CO_YIELD"]
  643 -> 389 [style=solid label="'0'"]
  643 -> 390 [style=solid label="'1'"]
  643 -> 391 [style=solid label="'2'"]
  643 -> 392 [style=solid label="'3'"]
  643 -> 393 [style=solid label="'4'"]
  643 -> 394 [style=solid label="'5'"]
  643 -> 395 [style=solid label="'6'"]
  643 -> 396 [style=solid label="'7'"]
  643 -> 397 [style=solid label="'8'"]
  643 -> 398 [style=solid label="'9'"]
  643 -> 205 [style=solid label="'u'"]
  643 -> 206 [style=solid label="'U'"]
  643 -> 207 [style=solid label="'L'"]
  643 -> 208 [style=solid label="'R'"]
  643 -> 399 [style=dashed label="additive-expression"]
  643 -> 400 [style=dashed label="and-expression"]
  643 -> 1134 [style=dashed label="assignment-expression"]
  643 -> 401 [style=dashed label="await-expression"]
  643 -> 402 [style=dashed label="binary-literal"]
  643 -> 403 [style=dashed label="boolean-literal"]
  643 -> 1135 [style=dashed label="braced-init-list"]
  643 -> 404 [style=dashed label="cast-expression"]
  643 -> 405 [style=dashed label="character-literal"]
  643 -> 65 [style=dashed label="class-name"]
  643 -> 406 [style=dashed label="compare-expression"]
  643 -> 67 [style=dashed label="concept-name"]
  643 -> 526 [style=dashed label="conditional-expression"]
  643 -> 68 [style=dashed label="conversion-function-id"]
  643 -> 409 [style=dashed label="decimal-floating-point-literal"]
  643 -> 410 [style=dashed label="decimal-literal"]
  643 -> 76 [style=dashed label="decltype-specifier"]
  643 -> 411 [style=dashed label="delete-expression"]
  643 -> 412 [style=dashed label="digit"]
  643 -> 413 [style=dashed label="digit-sequence"]
  643 -> 414 [style=dashed label="encoding-prefix"]
  643 -> 84 [style=dashed label="enum-name"]
  643 -> 415 [style=dashed label="equality-expression"]
  643 -> 416 [style=dashed label="exclusive-or-expression"]
  643 -> 1137 [style=dashed label="expression-list"]
  643 -> 417 [style=dashed label="floating-point-literal"]
  643 -> 418 [style=dashed label="fold-expression"]
  643 -> 419 [style=dashed label="fractional-constant"]
  643 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  643 -> 421 [style=dashed label="hexadecimal-literal"]
  643 -> 422 [style=dashed label="hexadecimal-prefix"]
  643 -> 423 [style=dashed label="id-expression"]
  643 -> 424 [style=dashed label="inclusive-or-expression"]
  643 -> 1138 [style=dashed label="initializer-clause"]
  643 -> 1139 [style=dashed label="initializer-list"]
  643 -> 425 [style=dashed label="integer-literal"]
  643 -> 426 [style=dashed label="lambda-expression"]
  643 -> 427 [style=dashed label="lambda-introducer"]
  643 -> 428 [style=dashed label="literal"]
  643 -> 95 [style=dashed label="literal-operator-id"]
  643 -> 429 [style=dashed label="logical-and-expression"]
  643 -> 528 [style=dashed label="logical-or-expression"]
  643 -> 431 [style=dashed label="multiplicative-expression"]
  643 -> 99 [style=dashed label="namespace-alias"]
  643 -> 102 [style=dashed label="namespace-name"]
  643 -> 432 [style=dashed label="nested-name-specifier"]
  643 -> 433 [style=dashed label="new-expression"]
  643 -> 434 [style=dashed label="noexcept-expression"]
  643 -> 435 [style=dashed label="nonzero-digit"]
  643 -> 436 [style=dashed label="octal-literal"]
  643 -> 108 [style=dashed label="operator-function-id"]
  643 -> 109 [style=dashed label="placeholder-type-specifier"]
  643 -> 437 [style=dashed label="pm-expression"]
  643 -> 438 [style=dashed label="pointer-literal"]
  643 -> 439 [style=dashed label="postfix-expression"]
  643 -> 440 [style=dashed label="primary-expression"]
  643 -> 112 [style=dashed label="qualified-id"]
  643 -> 441 [style=dashed label="relational-expression"]
  643 -> 442 [style=dashed label="requires-expression"]
  643 -> 443 [style=dashed label="shift-expression"]
  643 -> 114 [style=dashed label="simple-template-id"]
  643 -> 529 [style=dashed label="simple-type-specifier"]
  643 -> 445 [style=dashed label="string-literal"]
  643 -> 120 [style=dashed label="template-id"]
  643 -> 215 [style=dashed label="template-name"]
  643 -> 530 [style=dashed label="throw-expression"]
  643 -> 123 [style=dashed label="type-constraint"]
  643 -> 124 [style=dashed label="type-name"]
  643 -> 126 [style=dashed label="typedef-name"]
  643 -> 531 [style=dashed label="typename-specifier"]
  643 -> 449 [style=dashed label="unary-expression"]
  643 -> 450 [style=dashed label="unary-operator"]
  643 -> 129 [style=dashed label="unqualified-id"]
  643 -> 451 [style=dashed label="user-defined-character-literal"]
  643 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  643 -> 453 [style=dashed label="user-defined-integer-literal"]
  643 -> 454 [style=dashed label="user-defined-literal"]
  643 -> 455 [style=dashed label="user-defined-string-literal"]
  643 -> 532 [style=dashed label="yield-expression"]
  644 [label="State 644\n\l108 braced-init-list: OPEN_BRACE • initializer-list CLOSE_BRACE\l109                 | OPEN_BRACE • initializer-list COMMA CLOSE_BRACE\l110                 | OPEN_BRACE • designated-initializer-list CLOSE_BRACE\l111                 | OPEN_BRACE • designated-initializer-list COMMA CLOSE_BRACE\l112                 | OPEN_BRACE • CLOSE_BRACE\l160 compound-statement: OPEN_BRACE • CLOSE_BRACE\l161                   | OPEN_BRACE • statement-seq CLOSE_BRACE\l"]
  644 -> 356 [style=solid label="PLUS"]
  644 -> 357 [style=solid label="MINUS"]
  644 -> 1 [style=solid label="USING"]
  644 -> 661 [style=solid label="IDENTIFIER"]
  644 -> 662 [style=solid label="SEMICOLON"]
  644 -> 4 [style=solid label="ALIGNAS"]
  644 -> 358 [style=solid label="OPEN_PAREN"]
  644 -> 359 [style=solid label="AND"]
  644 -> 8 [style=solid label="ASM"]
  644 -> 360 [style=solid label="SCOPE"]
  644 -> 663 [style=solid label="OPEN_SQUARE"]
  644 -> 362 [style=solid label="CO_AWAIT"]
  644 -> 644 [style=solid label="OPEN_BRACE"]
  644 -> 1140 [style=solid label="CLOSE_BRACE"]
  644 -> 11 [style=solid label="VIRTUAL"]
  644 -> 363 [style=solid label="ZERO_LB"]
  644 -> 364 [style=solid label="ZERO_HB"]
  644 -> 365 [style=solid label="SINGLE_QUOTE"]
  644 -> 366 [style=solid label="FALSE"]
  644 -> 367 [style=solid label="TRUE"]
  644 -> 12 [style=solid label="CLASS"]
  644 -> 13 [style=solid label="STRUCT"]
  644 -> 14 [style=solid label="UNION"]
  644 -> 368 [style=solid label="NOEXCEPT"]
  644 -> 17 [style=solid label="OPERATOR"]
  644 -> 665 [style=solid label="CO_RETURN"]
  644 -> 18 [style=solid label="CONST"]
  644 -> 19 [style=solid label="VOLATILE"]
  644 -> 20 [style=solid label="FRIEND"]
  644 -> 21 [style=solid label="TYPEDEF"]
  644 -> 22 [style=solid label="CONSTEXPR"]
  644 -> 23 [style=solid label="CONSTEVAL"]
  644 -> 24 [style=solid label="CONSTINIT"]
  644 -> 258 [style=solid label="INLINE"]
  644 -> 26 [style=solid label="DECLTYPE"]
  644 -> 369 [style=solid label="DELETE"]
  644 -> 1141 [style=solid label="DOT"]
  644 -> 27 [style=solid label="ENUM"]
  644 -> 184 [style=solid label="UNICODE_8"]
  644 -> 259 [style=solid label="EXTERN"]
  644 -> 29 [style=solid label="EXPLICIT"]
  644 -> 371 [style=solid label="MULT"]
  644 -> 666 [style=solid label="DEFAULT"]
  644 -> 667 [style=solid label="TRY"]
  644 -> 199 [style=solid label="DOUBLE_QUOTE"]
  644 -> 372 [style=solid label="ZERO_LX"]
  644 -> 373 [style=solid label="ZERO_HX"]
  644 -> 668 [style=solid label="WHILE"]
  644 -> 669 [style=solid label="DO"]
  644 -> 670 [style=solid label="FOR"]
  644 -> 671 [style=solid label="BREAK"]
  644 -> 672 [style=solid label="CONTINUE"]
  644 -> 673 [style=solid label="RETURN"]
  644 -> 674 [style=solid label="GOTO"]
  644 -> 675 [style=solid label="CASE"]
  644 -> 676 [style=solid label="NAMESPACE"]
  644 -> 374 [style=solid label="REQUIRES"]
  644 -> 375 [style=solid label="NEW"]
  644 -> 376 [style=solid label="COMPL"]
  644 -> 377 [style=solid label="NOT"]
  644 -> 378 [style=solid label="PLUS_PLUS"]
  644 -> 379 [style=solid label="MINUS_MINUS"]
  644 -> 380 [style=solid label="THIS"]
  644 -> 36 [style=solid label="AUTO"]
  644 -> 381 [style=solid label="NULLPTR"]
  644 -> 382 [style=solid label="DYNAMIC_CAST"]
  644 -> 383 [style=solid label="STATIC_CAST"]
  644 -> 384 [style=solid label="REINTERPRET_CAST"]
  644 -> 385 [style=solid label="CONST_CAST"]
  644 -> 386 [style=solid label="TYPEID"]
  644 -> 677 [style=solid label="IF"]
  644 -> 678 [style=solid label="SWITCH"]
  644 -> 37 [style=solid label="CHAR"]
  644 -> 38 [style=solid label="CHAR8_T"]
  644 -> 39 [style=solid label="CHAR16_T"]
  644 -> 40 [style=solid label="CHAR32_T"]
  644 -> 41 [style=solid label="WCHAR_T"]
  644 -> 42 [style=solid label="BOOL"]
  644 -> 43 [style=solid label="SHORT"]
  644 -> 44 [style=solid label="INT"]
  644 -> 45 [style=solid label="LONG"]
  644 -> 46 [style=solid label="SIGNED"]
  644 -> 47 [style=solid label="UNSIGNED"]
  644 -> 48 [style=solid label="FLOAT"]
  644 -> 49 [style=solid label="DOUBLE"]
  644 -> 50 [style=solid label="VOID"]
  644 -> 51 [style=solid label="STATIC_ASSERT"]
  644 -> 52 [style=solid label="STATIC"]
  644 -> 53 [style=solid label="THREAD_LOCAL"]
  644 -> 54 [style=solid label="MUTABLE"]
  644 -> 523 [style=solid label="THROW"]
  644 -> 55 [style=solid label="TYPENAME"]
  644 -> 387 [style=solid label="SIZEOF"]
  644 -> 388 [style=solid label="ALIGNOF"]
  644 -> 524 [style=solid label="CO_YIELD"]
  644 -> 389 [style=solid label="'0'"]
  644 -> 390 [style=solid label="'1'"]
  644 -> 391 [style=solid label="'2'"]
  644 -> 392 [style=solid label="'3'"]
  644 -> 393 [style=solid label="'4'"]
  644 -> 394 [style=solid label="'5'"]
  644 -> 395 [style=solid label="'6'"]
  644 -> 396 [style=solid label="'7'"]
  644 -> 397 [style=solid label="'8'"]
  644 -> 398 [style=solid label="'9'"]
  644 -> 205 [style=solid label="'u'"]
  644 -> 206 [style=solid label="'U'"]
  644 -> 207 [style=solid label="'L'"]
  644 -> 208 [style=solid label="'R'"]
  644 -> 399 [style=dashed label="additive-expression"]
  644 -> 56 [style=dashed label="alias-declaration"]
  644 -> 57 [style=dashed label="alignment-specifier"]
  644 -> 400 [style=dashed label="and-expression"]
  644 -> 58 [style=dashed label="asm-declaration"]
  644 -> 1142 [style=dashed label="assignment-expression"]
  644 -> 60 [style=dashed label="attribute-specifier"]
  644 -> 679 [style=dashed label="attribute-specifier-seq"]
  644 -> 401 [style=dashed label="await-expression"]
  644 -> 402 [style=dashed label="binary-literal"]
  644 -> 680 [style=dashed label="block-declaration"]
  644 -> 403 [style=dashed label="boolean-literal"]
  644 -> 1135 [style=dashed label="braced-init-list"]
  644 -> 404 [style=dashed label="cast-expression"]
  644 -> 405 [style=dashed label="character-literal"]
  644 -> 63 [style=dashed label="class-head"]
  644 -> 64 [style=dashed label="class-key"]
  644 -> 65 [style=dashed label="class-name"]
  644 -> 66 [style=dashed label="class-specifier"]
  644 -> 406 [style=dashed label="compare-expression"]
  644 -> 681 [style=dashed label="compound-statement"]
  644 -> 67 [style=dashed label="concept-name"]
  644 -> 526 [style=dashed label="conditional-expression"]
  644 -> 68 [style=dashed label="conversion-function-id"]
  644 -> 682 [style=dashed label="coroutine-return-statement"]
  644 -> 69 [style=dashed label="cv-qualifier"]
  644 -> 409 [style=dashed label="decimal-floating-point-literal"]
  644 -> 410 [style=dashed label="decimal-literal"]
  644 -> 70 [style=dashed label="decl-specifier"]
  644 -> 683 [style=dashed label="decl-specifier-seq"]
  644 -> 684 [style=dashed label="declaration-statement"]
  644 -> 76 [style=dashed label="decltype-specifier"]
  644 -> 78 [style=dashed label="defining-type-specifier"]
  644 -> 411 [style=dashed label="delete-expression"]
  644 -> 1143 [style=dashed label="designated-initializer-clause"]
  644 -> 1144 [style=dashed label="designated-initializer-list"]
  644 -> 1145 [style=dashed label="designator"]
  644 -> 412 [style=dashed label="digit"]
  644 -> 413 [style=dashed label="digit-sequence"]
  644 -> 79 [style=dashed label="elaborated-enum-specifier"]
  644 -> 80 [style=dashed label="elaborated-type-specifier"]
  644 -> 414 [style=dashed label="encoding-prefix"]
  644 -> 82 [style=dashed label="enum-head"]
  644 -> 83 [style=dashed label="enum-key"]
  644 -> 84 [style=dashed label="enum-name"]
  644 -> 85 [style=dashed label="enum-specifier"]
  644 -> 415 [style=dashed label="equality-expression"]
  644 -> 416 [style=dashed label="exclusive-or-expression"]
  644 -> 264 [style=dashed label="explicit-specifier"]
  644 -> 685 [style=dashed label="expression"]
  644 -> 686 [style=dashed label="expression-statement"]
  644 -> 417 [style=dashed label="floating-point-literal"]
  644 -> 418 [style=dashed label="fold-expression"]
  644 -> 419 [style=dashed label="fractional-constant"]
  644 -> 91 [style=dashed label="function-specifier"]
  644 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  644 -> 421 [style=dashed label="hexadecimal-literal"]
  644 -> 422 [style=dashed label="hexadecimal-prefix"]
  644 -> 423 [style=dashed label="id-expression"]
  644 -> 424 [style=dashed label="inclusive-or-expression"]
  644 -> 1138 [style=dashed label="initializer-clause"]
  644 -> 1146 [style=dashed label="initializer-list"]
  644 -> 425 [style=dashed label="integer-literal"]
  644 -> 687 [style=dashed label="iteration-statement"]
  644 -> 688 [style=dashed label="jump-statement"]
  644 -> 689 [style=dashed label="labeled-statement"]
  644 -> 426 [style=dashed label="lambda-expression"]
  644 -> 427 [style=dashed label="lambda-introducer"]
  644 -> 428 [style=dashed label="literal"]
  644 -> 95 [style=dashed label="literal-operator-id"]
  644 -> 429 [style=dashed label="logical-and-expression"]
  644 -> 528 [style=dashed label="logical-or-expression"]
  644 -> 431 [style=dashed label="multiplicative-expression"]
  644 -> 99 [style=dashed label="namespace-alias"]
  644 -> 100 [style=dashed label="namespace-alias-definition"]
  644 -> 102 [style=dashed label="namespace-name"]
  644 -> 432 [style=dashed label="nested-name-specifier"]
  644 -> 433 [style=dashed label="new-expression"]
  644 -> 434 [style=dashed label="noexcept-expression"]
  644 -> 435 [style=dashed label="nonzero-digit"]
  644 -> 436 [style=dashed label="octal-literal"]
  644 -> 107 [style=dashed label="opaque-enum-declaration"]
  644 -> 108 [style=dashed label="operator-function-id"]
  644 -> 109 [style=dashed label="placeholder-type-specifier"]
  644 -> 437 [style=dashed label="pm-expression"]
  644 -> 438 [style=dashed label="pointer-literal"]
  644 -> 439 [style=dashed label="postfix-expression"]
  644 -> 440 [style=dashed label="primary-expression"]
  644 -> 112 [style=dashed label="qualified-id"]
  644 -> 441 [style=dashed label="relational-expression"]
  644 -> 442 [style=dashed label="requires-expression"]
  644 -> 690 [style=dashed label="selection-statement"]
  644 -> 443 [style=dashed label="shift-expression"]
  644 -> 113 [style=dashed label="simple-declaration"]
  644 -> 114 [style=dashed label="simple-template-id"]
  644 -> 444 [style=dashed label="simple-type-specifier"]
  644 -> 691 [style=dashed label="statement"]
  644 -> 692 [style=dashed label="statement-seq"]
  644 -> 116 [style=dashed label="static_assert-declaration"]
  644 -> 117 [style=dashed label="storage-class-specifier"]
  644 -> 445 [style=dashed label="string-literal"]
  644 -> 120 [style=dashed label="template-id"]
  644 -> 215 [style=dashed label="template-name"]
  644 -> 530 [style=dashed label="throw-expression"]
  644 -> 693 [style=dashed label="try-block"]
  644 -> 123 [style=dashed label="type-constraint"]
  644 -> 124 [style=dashed label="type-name"]
  644 -> 125 [style=dashed label="type-specifier"]
  644 -> 126 [style=dashed label="typedef-name"]
  644 -> 448 [style=dashed label="typename-specifier"]
  644 -> 449 [style=dashed label="unary-expression"]
  644 -> 450 [style=dashed label="unary-operator"]
  644 -> 129 [style=dashed label="unqualified-id"]
  644 -> 451 [style=dashed label="user-defined-character-literal"]
  644 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  644 -> 453 [style=dashed label="user-defined-integer-literal"]
  644 -> 454 [style=dashed label="user-defined-literal"]
  644 -> 455 [style=dashed label="user-defined-string-literal"]
  644 -> 130 [style=dashed label="using-declaration"]
  644 -> 131 [style=dashed label="using-directive"]
  644 -> 132 [style=dashed label="using-enum-declaration"]
  644 -> 532 [style=dashed label="yield-expression"]
  645 [label="State 645\n\l477 initializer: brace-or-equal-initializer •\l"]
  645 -> "645R477" [style=solid]
 "645R477" [label="R477", fillcolor=3, shape=diamond, style=filled]
  646 [label="State 646\n\l107 brace-or-equal-initializer: braced-init-list •\l"]
  646 -> "646R107" [style=solid]
 "646R107" [label="R107", fillcolor=3, shape=diamond, style=filled]
  647 [label="State 647\n\l398 function-definition: decl-specifier-seq declarator function-body •\l"]
  647 -> "647R398" [style=solid]
 "647R398" [label="R398", fillcolor=3, shape=diamond, style=filled]
  648 [label="State 648\n\l470 init-declarator: declarator initializer •\l"]
  648 -> "648R470" [style=solid]
 "648R470" [label="R470", fillcolor=3, shape=diamond, style=filled]
  649 [label="State 649\n\l406 function-definition: decl-specifier-seq declarator requires-clause • function-body\l471 init-declarator: declarator requires-clause •\l"]
  649 -> 286 [style=solid label="EQ"]
  649 -> 288 [style=solid label="COLON"]
  649 -> 289 [style=solid label="OPEN_BRACE"]
  649 -> 291 [style=solid label="TRY"]
  649 -> 294 [style=dashed label="compound-statement"]
  649 -> 295 [style=dashed label="ctor-initializer"]
  649 -> 1147 [style=dashed label="function-body"]
  649 -> 297 [style=dashed label="function-try-block"]
  649 -> "649R471" [style=solid]
 "649R471" [label="R471", fillcolor=3, shape=diamond, style=filled]
  650 [label="State 650\n\l402 function-definition: decl-specifier-seq declarator virt-specifier-seq • function-body\l1179 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  650 -> 286 [style=solid label="EQ"]
  650 -> 288 [style=solid label="COLON"]
  650 -> 289 [style=solid label="OPEN_BRACE"]
  650 -> 290 [style=solid label="FINAL"]
  650 -> 291 [style=solid label="TRY"]
  650 -> 293 [style=solid label="OVERRIDE"]
  650 -> 294 [style=dashed label="compound-statement"]
  650 -> 295 [style=dashed label="ctor-initializer"]
  650 -> 1148 [style=dashed label="function-body"]
  650 -> 297 [style=dashed label="function-try-block"]
  650 -> 703 [style=dashed label="virt-specifier"]
  651 [label="State 651\n\l964 simple-declaration: decl-specifier-seq init-declarator-list SEMICOLON •\l"]
  651 -> "651R964" [style=solid]
 "651R964" [label="R964", fillcolor=3, shape=diamond, style=filled]
  652 [label="State 652\n\l473 init-declarator-list: init-declarator-list COMMA • init-declarator\l"]
  652 -> 147 [style=solid label="IDENTIFIER"]
  652 -> 5 [style=solid label="OPEN_PAREN"]
  652 -> 6 [style=solid label="ELLIPSIS"]
  652 -> 7 [style=solid label="AND"]
  652 -> 9 [style=solid label="SCOPE"]
  652 -> 16 [style=solid label="AND_AND"]
  652 -> 17 [style=solid label="OPERATOR"]
  652 -> 134 [style=solid label="DECLTYPE"]
  652 -> 31 [style=solid label="MULT"]
  652 -> 35 [style=solid label="COMPL"]
  652 -> 65 [style=dashed label="class-name"]
  652 -> 68 [style=dashed label="conversion-function-id"]
  652 -> 1149 [style=dashed label="declarator"]
  652 -> 75 [style=dashed label="declarator-id"]
  652 -> 138 [style=dashed label="decltype-specifier"]
  652 -> 84 [style=dashed label="enum-name"]
  652 -> 93 [style=dashed label="id-expression"]
  652 -> 1150 [style=dashed label="init-declarator"]
  652 -> 95 [style=dashed label="literal-operator-id"]
  652 -> 99 [style=dashed label="namespace-alias"]
  652 -> 102 [style=dashed label="namespace-name"]
  652 -> 148 [style=dashed label="nested-name-specifier"]
  652 -> 106 [style=dashed label="noptr-declarator"]
  652 -> 108 [style=dashed label="operator-function-id"]
  652 -> 110 [style=dashed label="ptr-declarator"]
  652 -> 111 [style=dashed label="ptr-operator"]
  652 -> 112 [style=dashed label="qualified-id"]
  652 -> 114 [style=dashed label="simple-template-id"]
  652 -> 120 [style=dashed label="template-id"]
  652 -> 142 [style=dashed label="template-name"]
  652 -> 143 [style=dashed label="type-name"]
  652 -> 126 [style=dashed label="typedef-name"]
  652 -> 129 [style=dashed label="unqualified-id"]
  653 [label="State 653\n\l969 simple-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE • identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  653 -> 640 [style=solid label="IDENTIFIER"]
  653 -> 1151 [style=dashed label="identifier-list"]
  654 [label="State 654\n\l394 function-body: EQ DELETE • SEMICOLON\l"]
  654 -> 1152 [style=solid label="SEMICOLON"]
  655 [label="State 655\n\l393 function-body: EQ DEFAULT • SEMICOLON\l"]
  655 -> 1153 [style=solid label="SEMICOLON"]
  656 [label="State 656\n\l145 class-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l575 mem-initializer-id: IDENTIFIER •\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l"]
  656 -> "656R145" [style=solid]
 "656R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  656 -> "656R294d" [label="[OPEN_PAREN, SCOPE, OPEN_BRACE]", style=solid]
 "656R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  656 -> "656R575d" [label="[OPEN_PAREN, OPEN_BRACE]", style=solid]
 "656R575d" [label="R575", fillcolor=5, shape=diamond, style=filled]
  656 -> "656R647d" [label="[SCOPE]", style=solid]
 "656R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  656 -> "656R653d" [label="[SCOPE]", style=solid]
 "656R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  656 -> "656R1052" [label="[LESS]", style=solid]
 "656R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  656 -> "656R1110d" [label="[OPEN_PAREN, SCOPE, OPEN_BRACE]", style=solid]
 "656R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  657 [label="State 657\n\l574 mem-initializer-id: class-or-decltype •\l"]
  657 -> "657R574" [style=solid]
 "657R574" [label="R574", fillcolor=3, shape=diamond, style=filled]
  658 [label="State 658\n\l576 mem-initializer-list: mem-initializer •\l577                     | mem-initializer • ELLIPSIS\l"]
  658 -> 1154 [style=solid label="ELLIPSIS"]
  658 -> "658R576" [style=solid]
 "658R576" [label="R576", fillcolor=3, shape=diamond, style=filled]
  659 [label="State 659\n\l571 mem-initializer: mem-initializer-id • OPEN_PAREN CLOSE_PAREN\l572                | mem-initializer-id • OPEN_PAREN expression-list CLOSE_PAREN\l573                | mem-initializer-id • braced-init-list\l"]
  659 -> 1155 [style=solid label="OPEN_PAREN"]
  659 -> 935 [style=solid label="OPEN_BRACE"]
  659 -> 1156 [style=dashed label="braced-init-list"]
  660 [label="State 660\n\l184 ctor-initializer: COLON mem-initializer-list •\l578 mem-initializer-list: mem-initializer-list • COMMA mem-initializer\l579                     | mem-initializer-list • COMMA mem-initializer ELLIPSIS\l"]
  660 -> 1157 [style=solid label="COMMA"]
  660 -> "660R184" [style=solid]
 "660R184" [label="R184", fillcolor=3, shape=diamond, style=filled]
  661 [label="State 661\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l520 labeled-statement: IDENTIFIER • COLON statement\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l1140 unqualified-id: IDENTIFIER •\l"]
  661 -> 1158 [style=solid label="COLON"]
  661 -> "661R145" [style=solid]
 "661R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  661 -> "661R163d" [label="[DECLTYPE, AUTO]", style=solid]
 "661R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  661 -> "661R163" [label="[LESS]", style=solid]
 "661R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  661 -> "661R294d" [label="[IDENTIFIER, SEMICOLON, ALIGNAS, OPEN_PAREN, ELLIPSIS, AND, SCOPE, OPEN_SQUARE, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "661R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  661 -> "661R647d" [label="[SCOPE]", style=solid]
 "661R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  661 -> "661R653d" [label="[SCOPE]", style=solid]
 "661R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  661 -> "661R1052d" [label="[IDENTIFIER, SEMICOLON, ALIGNAS, OPEN_PAREN, ELLIPSIS, AND, SCOPE, OPEN_SQUARE, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, LESS, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "661R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  661 -> "661R1110d" [label="[IDENTIFIER, SEMICOLON, ALIGNAS, OPEN_PAREN, ELLIPSIS, AND, SCOPE, OPEN_SQUARE, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "661R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  661 -> "661R1140d" [label="[SEMICOLON, OPEN_PAREN, ELLIPSIS, AND, OPEN_SQUARE, AND_AND, LESS, MULT]", style=solid]
 "661R1140d" [label="R1140", fillcolor=5, shape=diamond, style=filled]
  661 -> "661R1140" [label="[PLUS, MINUS, EQ, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, CLOSE_BRACE, SPACESHIP, QUERY, OR_OR, DEREF, DOT, EQ_EQ, NOT_EQ, XOR, GREATER, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, PLUS_PLUS, MINUS_MINUS]", style=solid]
 "661R1140" [label="R1140", fillcolor=3, shape=diamond, style=filled]
  662 [label="State 662\n\l338 expression-statement: SEMICOLON •\l"]
  662 -> "662R338" [style=solid]
 "662R338" [label="R338", fillcolor=3, shape=diamond, style=filled]
  663 [label="State 663\n\l 50 attribute-specifier: OPEN_SQUARE • OPEN_SQUARE attribute-list CLOSE_SQUARE CLOSE_SQUARE\l 51                    | OPEN_SQUARE • OPEN_SQUARE attribute-using-prefix attribute-list CLOSE_SQUARE CLOSE_SQUARE\l534 lambda-introducer: OPEN_SQUARE • CLOSE_SQUARE\l535                  | OPEN_SQUARE • lambda-capture CLOSE_SQUARE\l"]
  663 -> 762 [style=solid label="IDENTIFIER"]
  663 -> 763 [style=solid label="EQ"]
  663 -> 764 [style=solid label="ELLIPSIS"]
  663 -> 765 [style=solid label="AND"]
  663 -> 155 [style=solid label="OPEN_SQUARE"]
  663 -> 766 [style=solid label="CLOSE_SQUARE"]
  663 -> 767 [style=solid label="MULT"]
  663 -> 768 [style=solid label="THIS"]
  663 -> 769 [style=dashed label="capture"]
  663 -> 770 [style=dashed label="capture-default"]
  663 -> 771 [style=dashed label="capture-list"]
  663 -> 772 [style=dashed label="init-capture"]
  663 -> 773 [style=dashed label="lambda-capture"]
  663 -> 774 [style=dashed label="simple-capture"]
  664 [label="State 664\n\l160 compound-statement: OPEN_BRACE CLOSE_BRACE •\l"]
  664 -> "664R160" [style=solid]
 "664R160" [label="R160", fillcolor=3, shape=diamond, style=filled]
  665 [label="State 665\n\l182 coroutine-return-statement: CO_RETURN • SEMICOLON\l183                           | CO_RETURN • expr-or-braced-init-list SEMICOLON\l"]
  665 -> 356 [style=solid label="PLUS"]
  665 -> 357 [style=solid label="MINUS"]
  665 -> 2 [style=solid label="IDENTIFIER"]
  665 -> 1159 [style=solid label="SEMICOLON"]
  665 -> 358 [style=solid label="OPEN_PAREN"]
  665 -> 359 [style=solid label="AND"]
  665 -> 360 [style=solid label="SCOPE"]
  665 -> 361 [style=solid label="OPEN_SQUARE"]
  665 -> 362 [style=solid label="CO_AWAIT"]
  665 -> 935 [style=solid label="OPEN_BRACE"]
  665 -> 363 [style=solid label="ZERO_LB"]
  665 -> 364 [style=solid label="ZERO_HB"]
  665 -> 365 [style=solid label="SINGLE_QUOTE"]
  665 -> 366 [style=solid label="FALSE"]
  665 -> 367 [style=solid label="TRUE"]
  665 -> 368 [style=solid label="NOEXCEPT"]
  665 -> 17 [style=solid label="OPERATOR"]
  665 -> 26 [style=solid label="DECLTYPE"]
  665 -> 369 [style=solid label="DELETE"]
  665 -> 370 [style=solid label="DOT"]
  665 -> 184 [style=solid label="UNICODE_8"]
  665 -> 371 [style=solid label="MULT"]
  665 -> 199 [style=solid label="DOUBLE_QUOTE"]
  665 -> 372 [style=solid label="ZERO_LX"]
  665 -> 373 [style=solid label="ZERO_HX"]
  665 -> 374 [style=solid label="REQUIRES"]
  665 -> 375 [style=solid label="NEW"]
  665 -> 376 [style=solid label="COMPL"]
  665 -> 377 [style=solid label="NOT"]
  665 -> 378 [style=solid label="PLUS_PLUS"]
  665 -> 379 [style=solid label="MINUS_MINUS"]
  665 -> 380 [style=solid label="THIS"]
  665 -> 36 [style=solid label="AUTO"]
  665 -> 381 [style=solid label="NULLPTR"]
  665 -> 382 [style=solid label="DYNAMIC_CAST"]
  665 -> 383 [style=solid label="STATIC_CAST"]
  665 -> 384 [style=solid label="REINTERPRET_CAST"]
  665 -> 385 [style=solid label="CONST_CAST"]
  665 -> 386 [style=solid label="TYPEID"]
  665 -> 37 [style=solid label="CHAR"]
  665 -> 38 [style=solid label="CHAR8_T"]
  665 -> 39 [style=solid label="CHAR16_T"]
  665 -> 40 [style=solid label="CHAR32_T"]
  665 -> 41 [style=solid label="WCHAR_T"]
  665 -> 42 [style=solid label="BOOL"]
  665 -> 43 [style=solid label="SHORT"]
  665 -> 44 [style=solid label="INT"]
  665 -> 45 [style=solid label="LONG"]
  665 -> 46 [style=solid label="SIGNED"]
  665 -> 47 [style=solid label="UNSIGNED"]
  665 -> 48 [style=solid label="FLOAT"]
  665 -> 49 [style=solid label="DOUBLE"]
  665 -> 50 [style=solid label="VOID"]
  665 -> 523 [style=solid label="THROW"]
  665 -> 55 [style=solid label="TYPENAME"]
  665 -> 387 [style=solid label="SIZEOF"]
  665 -> 388 [style=solid label="ALIGNOF"]
  665 -> 524 [style=solid label="CO_YIELD"]
  665 -> 389 [style=solid label="'0'"]
  665 -> 390 [style=solid label="'1'"]
  665 -> 391 [style=solid label="'2'"]
  665 -> 392 [style=solid label="'3'"]
  665 -> 393 [style=solid label="'4'"]
  665 -> 394 [style=solid label="'5'"]
  665 -> 395 [style=solid label="'6'"]
  665 -> 396 [style=solid label="'7'"]
  665 -> 397 [style=solid label="'8'"]
  665 -> 398 [style=solid label="'9'"]
  665 -> 205 [style=solid label="'u'"]
  665 -> 206 [style=solid label="'U'"]
  665 -> 207 [style=solid label="'L'"]
  665 -> 208 [style=solid label="'R'"]
  665 -> 399 [style=dashed label="additive-expression"]
  665 -> 400 [style=dashed label="and-expression"]
  665 -> 525 [style=dashed label="assignment-expression"]
  665 -> 401 [style=dashed label="await-expression"]
  665 -> 402 [style=dashed label="binary-literal"]
  665 -> 403 [style=dashed label="boolean-literal"]
  665 -> 1160 [style=dashed label="braced-init-list"]
  665 -> 404 [style=dashed label="cast-expression"]
  665 -> 405 [style=dashed label="character-literal"]
  665 -> 65 [style=dashed label="class-name"]
  665 -> 406 [style=dashed label="compare-expression"]
  665 -> 67 [style=dashed label="concept-name"]
  665 -> 526 [style=dashed label="conditional-expression"]
  665 -> 68 [style=dashed label="conversion-function-id"]
  665 -> 409 [style=dashed label="decimal-floating-point-literal"]
  665 -> 410 [style=dashed label="decimal-literal"]
  665 -> 76 [style=dashed label="decltype-specifier"]
  665 -> 411 [style=dashed label="delete-expression"]
  665 -> 412 [style=dashed label="digit"]
  665 -> 413 [style=dashed label="digit-sequence"]
  665 -> 414 [style=dashed label="encoding-prefix"]
  665 -> 84 [style=dashed label="enum-name"]
  665 -> 415 [style=dashed label="equality-expression"]
  665 -> 416 [style=dashed label="exclusive-or-expression"]
  665 -> 1161 [style=dashed label="expr-or-braced-init-list"]
  665 -> 1162 [style=dashed label="expression"]
  665 -> 417 [style=dashed label="floating-point-literal"]
  665 -> 418 [style=dashed label="fold-expression"]
  665 -> 419 [style=dashed label="fractional-constant"]
  665 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  665 -> 421 [style=dashed label="hexadecimal-literal"]
  665 -> 422 [style=dashed label="hexadecimal-prefix"]
  665 -> 423 [style=dashed label="id-expression"]
  665 -> 424 [style=dashed label="inclusive-or-expression"]
  665 -> 425 [style=dashed label="integer-literal"]
  665 -> 426 [style=dashed label="lambda-expression"]
  665 -> 427 [style=dashed label="lambda-introducer"]
  665 -> 428 [style=dashed label="literal"]
  665 -> 95 [style=dashed label="literal-operator-id"]
  665 -> 429 [style=dashed label="logical-and-expression"]
  665 -> 528 [style=dashed label="logical-or-expression"]
  665 -> 431 [style=dashed label="multiplicative-expression"]
  665 -> 99 [style=dashed label="namespace-alias"]
  665 -> 102 [style=dashed label="namespace-name"]
  665 -> 432 [style=dashed label="nested-name-specifier"]
  665 -> 433 [style=dashed label="new-expression"]
  665 -> 434 [style=dashed label="noexcept-expression"]
  665 -> 435 [style=dashed label="nonzero-digit"]
  665 -> 436 [style=dashed label="octal-literal"]
  665 -> 108 [style=dashed label="operator-function-id"]
  665 -> 109 [style=dashed label="placeholder-type-specifier"]
  665 -> 437 [style=dashed label="pm-expression"]
  665 -> 438 [style=dashed label="pointer-literal"]
  665 -> 439 [style=dashed label="postfix-expression"]
  665 -> 440 [style=dashed label="primary-expression"]
  665 -> 112 [style=dashed label="qualified-id"]
  665 -> 441 [style=dashed label="relational-expression"]
  665 -> 442 [style=dashed label="requires-expression"]
  665 -> 443 [style=dashed label="shift-expression"]
  665 -> 114 [style=dashed label="simple-template-id"]
  665 -> 529 [style=dashed label="simple-type-specifier"]
  665 -> 445 [style=dashed label="string-literal"]
  665 -> 120 [style=dashed label="template-id"]
  665 -> 215 [style=dashed label="template-name"]
  665 -> 530 [style=dashed label="throw-expression"]
  665 -> 123 [style=dashed label="type-constraint"]
  665 -> 124 [style=dashed label="type-name"]
  665 -> 126 [style=dashed label="typedef-name"]
  665 -> 531 [style=dashed label="typename-specifier"]
  665 -> 449 [style=dashed label="unary-expression"]
  665 -> 450 [style=dashed label="unary-operator"]
  665 -> 129 [style=dashed label="unqualified-id"]
  665 -> 451 [style=dashed label="user-defined-character-literal"]
  665 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  665 -> 453 [style=dashed label="user-defined-integer-literal"]
  665 -> 454 [style=dashed label="user-defined-literal"]
  665 -> 455 [style=dashed label="user-defined-string-literal"]
  665 -> 532 [style=dashed label="yield-expression"]
  666 [label="State 666\n\l524 labeled-statement: DEFAULT • COLON statement\l"]
  666 -> 1163 [style=solid label="COLON"]
  667 [label="State 667\n\l1069 try-block: TRY • compound-statement handler-seq\l"]
  667 -> 289 [style=solid label="OPEN_BRACE"]
  667 -> 1164 [style=dashed label="compound-statement"]
  668 [label="State 668\n\l505 iteration-statement: WHILE • OPEN_PAREN condition CLOSE_PAREN statement\l"]
  668 -> 1165 [style=solid label="OPEN_PAREN"]
  669 [label="State 669\n\l506 iteration-statement: DO • statement WHILE OPEN_PAREN expression CLOSE_PAREN SEMICOLON\l"]
  669 -> 356 [style=solid label="PLUS"]
  669 -> 357 [style=solid label="MINUS"]
  669 -> 1 [style=solid label="USING"]
  669 -> 661 [style=solid label="IDENTIFIER"]
  669 -> 662 [style=solid label="SEMICOLON"]
  669 -> 4 [style=solid label="ALIGNAS"]
  669 -> 358 [style=solid label="OPEN_PAREN"]
  669 -> 359 [style=solid label="AND"]
  669 -> 8 [style=solid label="ASM"]
  669 -> 360 [style=solid label="SCOPE"]
  669 -> 663 [style=solid label="OPEN_SQUARE"]
  669 -> 362 [style=solid label="CO_AWAIT"]
  669 -> 289 [style=solid label="OPEN_BRACE"]
  669 -> 11 [style=solid label="VIRTUAL"]
  669 -> 363 [style=solid label="ZERO_LB"]
  669 -> 364 [style=solid label="ZERO_HB"]
  669 -> 365 [style=solid label="SINGLE_QUOTE"]
  669 -> 366 [style=solid label="FALSE"]
  669 -> 367 [style=solid label="TRUE"]
  669 -> 12 [style=solid label="CLASS"]
  669 -> 13 [style=solid label="STRUCT"]
  669 -> 14 [style=solid label="UNION"]
  669 -> 368 [style=solid label="NOEXCEPT"]
  669 -> 17 [style=solid label="OPERATOR"]
  669 -> 665 [style=solid label="CO_RETURN"]
  669 -> 18 [style=solid label="CONST"]
  669 -> 19 [style=solid label="VOLATILE"]
  669 -> 20 [style=solid label="FRIEND"]
  669 -> 21 [style=solid label="TYPEDEF"]
  669 -> 22 [style=solid label="CONSTEXPR"]
  669 -> 23 [style=solid label="CONSTEVAL"]
  669 -> 24 [style=solid label="CONSTINIT"]
  669 -> 258 [style=solid label="INLINE"]
  669 -> 26 [style=solid label="DECLTYPE"]
  669 -> 369 [style=solid label="DELETE"]
  669 -> 370 [style=solid label="DOT"]
  669 -> 27 [style=solid label="ENUM"]
  669 -> 184 [style=solid label="UNICODE_8"]
  669 -> 259 [style=solid label="EXTERN"]
  669 -> 29 [style=solid label="EXPLICIT"]
  669 -> 371 [style=solid label="MULT"]
  669 -> 666 [style=solid label="DEFAULT"]
  669 -> 667 [style=solid label="TRY"]
  669 -> 199 [style=solid label="DOUBLE_QUOTE"]
  669 -> 372 [style=solid label="ZERO_LX"]
  669 -> 373 [style=solid label="ZERO_HX"]
  669 -> 668 [style=solid label="WHILE"]
  669 -> 669 [style=solid label="DO"]
  669 -> 670 [style=solid label="FOR"]
  669 -> 671 [style=solid label="BREAK"]
  669 -> 672 [style=solid label="CONTINUE"]
  669 -> 673 [style=solid label="RETURN"]
  669 -> 674 [style=solid label="GOTO"]
  669 -> 675 [style=solid label="CASE"]
  669 -> 676 [style=solid label="NAMESPACE"]
  669 -> 374 [style=solid label="REQUIRES"]
  669 -> 375 [style=solid label="NEW"]
  669 -> 376 [style=solid label="COMPL"]
  669 -> 377 [style=solid label="NOT"]
  669 -> 378 [style=solid label="PLUS_PLUS"]
  669 -> 379 [style=solid label="MINUS_MINUS"]
  669 -> 380 [style=solid label="THIS"]
  669 -> 36 [style=solid label="AUTO"]
  669 -> 381 [style=solid label="NULLPTR"]
  669 -> 382 [style=solid label="DYNAMIC_CAST"]
  669 -> 383 [style=solid label="STATIC_CAST"]
  669 -> 384 [style=solid label="REINTERPRET_CAST"]
  669 -> 385 [style=solid label="CONST_CAST"]
  669 -> 386 [style=solid label="TYPEID"]
  669 -> 677 [style=solid label="IF"]
  669 -> 678 [style=solid label="SWITCH"]
  669 -> 37 [style=solid label="CHAR"]
  669 -> 38 [style=solid label="CHAR8_T"]
  669 -> 39 [style=solid label="CHAR16_T"]
  669 -> 40 [style=solid label="CHAR32_T"]
  669 -> 41 [style=solid label="WCHAR_T"]
  669 -> 42 [style=solid label="BOOL"]
  669 -> 43 [style=solid label="SHORT"]
  669 -> 44 [style=solid label="INT"]
  669 -> 45 [style=solid label="LONG"]
  669 -> 46 [style=solid label="SIGNED"]
  669 -> 47 [style=solid label="UNSIGNED"]
  669 -> 48 [style=solid label="FLOAT"]
  669 -> 49 [style=solid label="DOUBLE"]
  669 -> 50 [style=solid label="VOID"]
  669 -> 51 [style=solid label="STATIC_ASSERT"]
  669 -> 52 [style=solid label="STATIC"]
  669 -> 53 [style=solid label="THREAD_LOCAL"]
  669 -> 54 [style=solid label="MUTABLE"]
  669 -> 523 [style=solid label="THROW"]
  669 -> 55 [style=solid label="TYPENAME"]
  669 -> 387 [style=solid label="SIZEOF"]
  669 -> 388 [style=solid label="ALIGNOF"]
  669 -> 524 [style=solid label="CO_YIELD"]
  669 -> 389 [style=solid label="'0'"]
  669 -> 390 [style=solid label="'1'"]
  669 -> 391 [style=solid label="'2'"]
  669 -> 392 [style=solid label="'3'"]
  669 -> 393 [style=solid label="'4'"]
  669 -> 394 [style=solid label="'5'"]
  669 -> 395 [style=solid label="'6'"]
  669 -> 396 [style=solid label="'7'"]
  669 -> 397 [style=solid label="'8'"]
  669 -> 398 [style=solid label="'9'"]
  669 -> 205 [style=solid label="'u'"]
  669 -> 206 [style=solid label="'U'"]
  669 -> 207 [style=solid label="'L'"]
  669 -> 208 [style=solid label="'R'"]
  669 -> 399 [style=dashed label="additive-expression"]
  669 -> 56 [style=dashed label="alias-declaration"]
  669 -> 57 [style=dashed label="alignment-specifier"]
  669 -> 400 [style=dashed label="and-expression"]
  669 -> 58 [style=dashed label="asm-declaration"]
  669 -> 525 [style=dashed label="assignment-expression"]
  669 -> 60 [style=dashed label="attribute-specifier"]
  669 -> 679 [style=dashed label="attribute-specifier-seq"]
  669 -> 401 [style=dashed label="await-expression"]
  669 -> 402 [style=dashed label="binary-literal"]
  669 -> 680 [style=dashed label="block-declaration"]
  669 -> 403 [style=dashed label="boolean-literal"]
  669 -> 404 [style=dashed label="cast-expression"]
  669 -> 405 [style=dashed label="character-literal"]
  669 -> 63 [style=dashed label="class-head"]
  669 -> 64 [style=dashed label="class-key"]
  669 -> 65 [style=dashed label="class-name"]
  669 -> 66 [style=dashed label="class-specifier"]
  669 -> 406 [style=dashed label="compare-expression"]
  669 -> 681 [style=dashed label="compound-statement"]
  669 -> 67 [style=dashed label="concept-name"]
  669 -> 526 [style=dashed label="conditional-expression"]
  669 -> 68 [style=dashed label="conversion-function-id"]
  669 -> 682 [style=dashed label="coroutine-return-statement"]
  669 -> 69 [style=dashed label="cv-qualifier"]
  669 -> 409 [style=dashed label="decimal-floating-point-literal"]
  669 -> 410 [style=dashed label="decimal-literal"]
  669 -> 70 [style=dashed label="decl-specifier"]
  669 -> 683 [style=dashed label="decl-specifier-seq"]
  669 -> 684 [style=dashed label="declaration-statement"]
  669 -> 76 [style=dashed label="decltype-specifier"]
  669 -> 78 [style=dashed label="defining-type-specifier"]
  669 -> 411 [style=dashed label="delete-expression"]
  669 -> 412 [style=dashed label="digit"]
  669 -> 413 [style=dashed label="digit-sequence"]
  669 -> 79 [style=dashed label="elaborated-enum-specifier"]
  669 -> 80 [style=dashed label="elaborated-type-specifier"]
  669 -> 414 [style=dashed label="encoding-prefix"]
  669 -> 82 [style=dashed label="enum-head"]
  669 -> 83 [style=dashed label="enum-key"]
  669 -> 84 [style=dashed label="enum-name"]
  669 -> 85 [style=dashed label="enum-specifier"]
  669 -> 415 [style=dashed label="equality-expression"]
  669 -> 416 [style=dashed label="exclusive-or-expression"]
  669 -> 264 [style=dashed label="explicit-specifier"]
  669 -> 685 [style=dashed label="expression"]
  669 -> 686 [style=dashed label="expression-statement"]
  669 -> 417 [style=dashed label="floating-point-literal"]
  669 -> 418 [style=dashed label="fold-expression"]
  669 -> 419 [style=dashed label="fractional-constant"]
  669 -> 91 [style=dashed label="function-specifier"]
  669 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  669 -> 421 [style=dashed label="hexadecimal-literal"]
  669 -> 422 [style=dashed label="hexadecimal-prefix"]
  669 -> 423 [style=dashed label="id-expression"]
  669 -> 424 [style=dashed label="inclusive-or-expression"]
  669 -> 425 [style=dashed label="integer-literal"]
  669 -> 687 [style=dashed label="iteration-statement"]
  669 -> 688 [style=dashed label="jump-statement"]
  669 -> 689 [style=dashed label="labeled-statement"]
  669 -> 426 [style=dashed label="lambda-expression"]
  669 -> 427 [style=dashed label="lambda-introducer"]
  669 -> 428 [style=dashed label="literal"]
  669 -> 95 [style=dashed label="literal-operator-id"]
  669 -> 429 [style=dashed label="logical-and-expression"]
  669 -> 528 [style=dashed label="logical-or-expression"]
  669 -> 431 [style=dashed label="multiplicative-expression"]
  669 -> 99 [style=dashed label="namespace-alias"]
  669 -> 100 [style=dashed label="namespace-alias-definition"]
  669 -> 102 [style=dashed label="namespace-name"]
  669 -> 432 [style=dashed label="nested-name-specifier"]
  669 -> 433 [style=dashed label="new-expression"]
  669 -> 434 [style=dashed label="noexcept-expression"]
  669 -> 435 [style=dashed label="nonzero-digit"]
  669 -> 436 [style=dashed label="octal-literal"]
  669 -> 107 [style=dashed label="opaque-enum-declaration"]
  669 -> 108 [style=dashed label="operator-function-id"]
  669 -> 109 [style=dashed label="placeholder-type-specifier"]
  669 -> 437 [style=dashed label="pm-expression"]
  669 -> 438 [style=dashed label="pointer-literal"]
  669 -> 439 [style=dashed label="postfix-expression"]
  669 -> 440 [style=dashed label="primary-expression"]
  669 -> 112 [style=dashed label="qualified-id"]
  669 -> 441 [style=dashed label="relational-expression"]
  669 -> 442 [style=dashed label="requires-expression"]
  669 -> 690 [style=dashed label="selection-statement"]
  669 -> 443 [style=dashed label="shift-expression"]
  669 -> 113 [style=dashed label="simple-declaration"]
  669 -> 114 [style=dashed label="simple-template-id"]
  669 -> 444 [style=dashed label="simple-type-specifier"]
  669 -> 1166 [style=dashed label="statement"]
  669 -> 116 [style=dashed label="static_assert-declaration"]
  669 -> 117 [style=dashed label="storage-class-specifier"]
  669 -> 445 [style=dashed label="string-literal"]
  669 -> 120 [style=dashed label="template-id"]
  669 -> 215 [style=dashed label="template-name"]
  669 -> 530 [style=dashed label="throw-expression"]
  669 -> 693 [style=dashed label="try-block"]
  669 -> 123 [style=dashed label="type-constraint"]
  669 -> 124 [style=dashed label="type-name"]
  669 -> 125 [style=dashed label="type-specifier"]
  669 -> 126 [style=dashed label="typedef-name"]
  669 -> 448 [style=dashed label="typename-specifier"]
  669 -> 449 [style=dashed label="unary-expression"]
  669 -> 450 [style=dashed label="unary-operator"]
  669 -> 129 [style=dashed label="unqualified-id"]
  669 -> 451 [style=dashed label="user-defined-character-literal"]
  669 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  669 -> 453 [style=dashed label="user-defined-integer-literal"]
  669 -> 454 [style=dashed label="user-defined-literal"]
  669 -> 455 [style=dashed label="user-defined-string-literal"]
  669 -> 130 [style=dashed label="using-declaration"]
  669 -> 131 [style=dashed label="using-directive"]
  669 -> 132 [style=dashed label="using-enum-declaration"]
  669 -> 532 [style=dashed label="yield-expression"]
  670 [label="State 670\n\l507 iteration-statement: FOR • OPEN_PAREN init-statement SEMICOLON CLOSE_PAREN statement\l508                    | FOR • OPEN_PAREN init-statement condition SEMICOLON CLOSE_PAREN statement\l509                    | FOR • OPEN_PAREN init-statement SEMICOLON expression CLOSE_PAREN statement\l510                    | FOR • OPEN_PAREN init-statement condition SEMICOLON expression CLOSE_PAREN statement\l511                    | FOR • OPEN_PAREN for-range-declaration COLON for-range-initializer CLOSE_PAREN statement\l512                    | FOR • OPEN_PAREN init-statement for-range-declaration COLON for-range-initializer CLOSE_PAREN statement\l"]
  670 -> 1167 [style=solid label="OPEN_PAREN"]
  671 [label="State 671\n\l513 jump-statement: BREAK • SEMICOLON\l"]
  671 -> 1168 [style=solid label="SEMICOLON"]
  672 [label="State 672\n\l514 jump-statement: CONTINUE • SEMICOLON\l"]
  672 -> 1169 [style=solid label="SEMICOLON"]
  673 [label="State 673\n\l515 jump-statement: RETURN • SEMICOLON\l516               | RETURN • expr-or-braced-init-list SEMICOLON\l"]
  673 -> 356 [style=solid label="PLUS"]
  673 -> 357 [style=solid label="MINUS"]
  673 -> 2 [style=solid label="IDENTIFIER"]
  673 -> 1170 [style=solid label="SEMICOLON"]
  673 -> 358 [style=solid label="OPEN_PAREN"]
  673 -> 359 [style=solid label="AND"]
  673 -> 360 [style=solid label="SCOPE"]
  673 -> 361 [style=solid label="OPEN_SQUARE"]
  673 -> 362 [style=solid label="CO_AWAIT"]
  673 -> 935 [style=solid label="OPEN_BRACE"]
  673 -> 363 [style=solid label="ZERO_LB"]
  673 -> 364 [style=solid label="ZERO_HB"]
  673 -> 365 [style=solid label="SINGLE_QUOTE"]
  673 -> 366 [style=solid label="FALSE"]
  673 -> 367 [style=solid label="TRUE"]
  673 -> 368 [style=solid label="NOEXCEPT"]
  673 -> 17 [style=solid label="OPERATOR"]
  673 -> 26 [style=solid label="DECLTYPE"]
  673 -> 369 [style=solid label="DELETE"]
  673 -> 370 [style=solid label="DOT"]
  673 -> 184 [style=solid label="UNICODE_8"]
  673 -> 371 [style=solid label="MULT"]
  673 -> 199 [style=solid label="DOUBLE_QUOTE"]
  673 -> 372 [style=solid label="ZERO_LX"]
  673 -> 373 [style=solid label="ZERO_HX"]
  673 -> 374 [style=solid label="REQUIRES"]
  673 -> 375 [style=solid label="NEW"]
  673 -> 376 [style=solid label="COMPL"]
  673 -> 377 [style=solid label="NOT"]
  673 -> 378 [style=solid label="PLUS_PLUS"]
  673 -> 379 [style=solid label="MINUS_MINUS"]
  673 -> 380 [style=solid label="THIS"]
  673 -> 36 [style=solid label="AUTO"]
  673 -> 381 [style=solid label="NULLPTR"]
  673 -> 382 [style=solid label="DYNAMIC_CAST"]
  673 -> 383 [style=solid label="STATIC_CAST"]
  673 -> 384 [style=solid label="REINTERPRET_CAST"]
  673 -> 385 [style=solid label="CONST_CAST"]
  673 -> 386 [style=solid label="TYPEID"]
  673 -> 37 [style=solid label="CHAR"]
  673 -> 38 [style=solid label="CHAR8_T"]
  673 -> 39 [style=solid label="CHAR16_T"]
  673 -> 40 [style=solid label="CHAR32_T"]
  673 -> 41 [style=solid label="WCHAR_T"]
  673 -> 42 [style=solid label="BOOL"]
  673 -> 43 [style=solid label="SHORT"]
  673 -> 44 [style=solid label="INT"]
  673 -> 45 [style=solid label="LONG"]
  673 -> 46 [style=solid label="SIGNED"]
  673 -> 47 [style=solid label="UNSIGNED"]
  673 -> 48 [style=solid label="FLOAT"]
  673 -> 49 [style=solid label="DOUBLE"]
  673 -> 50 [style=solid label="VOID"]
  673 -> 523 [style=solid label="THROW"]
  673 -> 55 [style=solid label="TYPENAME"]
  673 -> 387 [style=solid label="SIZEOF"]
  673 -> 388 [style=solid label="ALIGNOF"]
  673 -> 524 [style=solid label="CO_YIELD"]
  673 -> 389 [style=solid label="'0'"]
  673 -> 390 [style=solid label="'1'"]
  673 -> 391 [style=solid label="'2'"]
  673 -> 392 [style=solid label="'3'"]
  673 -> 393 [style=solid label="'4'"]
  673 -> 394 [style=solid label="'5'"]
  673 -> 395 [style=solid label="'6'"]
  673 -> 396 [style=solid label="'7'"]
  673 -> 397 [style=solid label="'8'"]
  673 -> 398 [style=solid label="'9'"]
  673 -> 205 [style=solid label="'u'"]
  673 -> 206 [style=solid label="'U'"]
  673 -> 207 [style=solid label="'L'"]
  673 -> 208 [style=solid label="'R'"]
  673 -> 399 [style=dashed label="additive-expression"]
  673 -> 400 [style=dashed label="and-expression"]
  673 -> 525 [style=dashed label="assignment-expression"]
  673 -> 401 [style=dashed label="await-expression"]
  673 -> 402 [style=dashed label="binary-literal"]
  673 -> 403 [style=dashed label="boolean-literal"]
  673 -> 1160 [style=dashed label="braced-init-list"]
  673 -> 404 [style=dashed label="cast-expression"]
  673 -> 405 [style=dashed label="character-literal"]
  673 -> 65 [style=dashed label="class-name"]
  673 -> 406 [style=dashed label="compare-expression"]
  673 -> 67 [style=dashed label="concept-name"]
  673 -> 526 [style=dashed label="conditional-expression"]
  673 -> 68 [style=dashed label="conversion-function-id"]
  673 -> 409 [style=dashed label="decimal-floating-point-literal"]
  673 -> 410 [style=dashed label="decimal-literal"]
  673 -> 76 [style=dashed label="decltype-specifier"]
  673 -> 411 [style=dashed label="delete-expression"]
  673 -> 412 [style=dashed label="digit"]
  673 -> 413 [style=dashed label="digit-sequence"]
  673 -> 414 [style=dashed label="encoding-prefix"]
  673 -> 84 [style=dashed label="enum-name"]
  673 -> 415 [style=dashed label="equality-expression"]
  673 -> 416 [style=dashed label="exclusive-or-expression"]
  673 -> 1171 [style=dashed label="expr-or-braced-init-list"]
  673 -> 1162 [style=dashed label="expression"]
  673 -> 417 [style=dashed label="floating-point-literal"]
  673 -> 418 [style=dashed label="fold-expression"]
  673 -> 419 [style=dashed label="fractional-constant"]
  673 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  673 -> 421 [style=dashed label="hexadecimal-literal"]
  673 -> 422 [style=dashed label="hexadecimal-prefix"]
  673 -> 423 [style=dashed label="id-expression"]
  673 -> 424 [style=dashed label="inclusive-or-expression"]
  673 -> 425 [style=dashed label="integer-literal"]
  673 -> 426 [style=dashed label="lambda-expression"]
  673 -> 427 [style=dashed label="lambda-introducer"]
  673 -> 428 [style=dashed label="literal"]
  673 -> 95 [style=dashed label="literal-operator-id"]
  673 -> 429 [style=dashed label="logical-and-expression"]
  673 -> 528 [style=dashed label="logical-or-expression"]
  673 -> 431 [style=dashed label="multiplicative-expression"]
  673 -> 99 [style=dashed label="namespace-alias"]
  673 -> 102 [style=dashed label="namespace-name"]
  673 -> 432 [style=dashed label="nested-name-specifier"]
  673 -> 433 [style=dashed label="new-expression"]
  673 -> 434 [style=dashed label="noexcept-expression"]
  673 -> 435 [style=dashed label="nonzero-digit"]
  673 -> 436 [style=dashed label="octal-literal"]
  673 -> 108 [style=dashed label="operator-function-id"]
  673 -> 109 [style=dashed label="placeholder-type-specifier"]
  673 -> 437 [style=dashed label="pm-expression"]
  673 -> 438 [style=dashed label="pointer-literal"]
  673 -> 439 [style=dashed label="postfix-expression"]
  673 -> 440 [style=dashed label="primary-expression"]
  673 -> 112 [style=dashed label="qualified-id"]
  673 -> 441 [style=dashed label="relational-expression"]
  673 -> 442 [style=dashed label="requires-expression"]
  673 -> 443 [style=dashed label="shift-expression"]
  673 -> 114 [style=dashed label="simple-template-id"]
  673 -> 529 [style=dashed label="simple-type-specifier"]
  673 -> 445 [style=dashed label="string-literal"]
  673 -> 120 [style=dashed label="template-id"]
  673 -> 215 [style=dashed label="template-name"]
  673 -> 530 [style=dashed label="throw-expression"]
  673 -> 123 [style=dashed label="type-constraint"]
  673 -> 124 [style=dashed label="type-name"]
  673 -> 126 [style=dashed label="typedef-name"]
  673 -> 531 [style=dashed label="typename-specifier"]
  673 -> 449 [style=dashed label="unary-expression"]
  673 -> 450 [style=dashed label="unary-operator"]
  673 -> 129 [style=dashed label="unqualified-id"]
  673 -> 451 [style=dashed label="user-defined-character-literal"]
  673 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  673 -> 453 [style=dashed label="user-defined-integer-literal"]
  673 -> 454 [style=dashed label="user-defined-literal"]
  673 -> 455 [style=dashed label="user-defined-string-literal"]
  673 -> 532 [style=dashed label="yield-expression"]
  674 [label="State 674\n\l518 jump-statement: GOTO • IDENTIFIER SEMICOLON\l"]
  674 -> 1172 [style=solid label="IDENTIFIER"]
  675 [label="State 675\n\l522 labeled-statement: CASE • constant-expression COLON statement\l"]
  675 -> 356 [style=solid label="PLUS"]
  675 -> 357 [style=solid label="MINUS"]
  675 -> 2 [style=solid label="IDENTIFIER"]
  675 -> 358 [style=solid label="OPEN_PAREN"]
  675 -> 359 [style=solid label="AND"]
  675 -> 360 [style=solid label="SCOPE"]
  675 -> 361 [style=solid label="OPEN_SQUARE"]
  675 -> 362 [style=solid label="CO_AWAIT"]
  675 -> 363 [style=solid label="ZERO_LB"]
  675 -> 364 [style=solid label="ZERO_HB"]
  675 -> 365 [style=solid label="SINGLE_QUOTE"]
  675 -> 366 [style=solid label="FALSE"]
  675 -> 367 [style=solid label="TRUE"]
  675 -> 368 [style=solid label="NOEXCEPT"]
  675 -> 17 [style=solid label="OPERATOR"]
  675 -> 26 [style=solid label="DECLTYPE"]
  675 -> 369 [style=solid label="DELETE"]
  675 -> 370 [style=solid label="DOT"]
  675 -> 184 [style=solid label="UNICODE_8"]
  675 -> 371 [style=solid label="MULT"]
  675 -> 199 [style=solid label="DOUBLE_QUOTE"]
  675 -> 372 [style=solid label="ZERO_LX"]
  675 -> 373 [style=solid label="ZERO_HX"]
  675 -> 374 [style=solid label="REQUIRES"]
  675 -> 375 [style=solid label="NEW"]
  675 -> 376 [style=solid label="COMPL"]
  675 -> 377 [style=solid label="NOT"]
  675 -> 378 [style=solid label="PLUS_PLUS"]
  675 -> 379 [style=solid label="MINUS_MINUS"]
  675 -> 380 [style=solid label="THIS"]
  675 -> 36 [style=solid label="AUTO"]
  675 -> 381 [style=solid label="NULLPTR"]
  675 -> 382 [style=solid label="DYNAMIC_CAST"]
  675 -> 383 [style=solid label="STATIC_CAST"]
  675 -> 384 [style=solid label="REINTERPRET_CAST"]
  675 -> 385 [style=solid label="CONST_CAST"]
  675 -> 386 [style=solid label="TYPEID"]
  675 -> 37 [style=solid label="CHAR"]
  675 -> 38 [style=solid label="CHAR8_T"]
  675 -> 39 [style=solid label="CHAR16_T"]
  675 -> 40 [style=solid label="CHAR32_T"]
  675 -> 41 [style=solid label="WCHAR_T"]
  675 -> 42 [style=solid label="BOOL"]
  675 -> 43 [style=solid label="SHORT"]
  675 -> 44 [style=solid label="INT"]
  675 -> 45 [style=solid label="LONG"]
  675 -> 46 [style=solid label="SIGNED"]
  675 -> 47 [style=solid label="UNSIGNED"]
  675 -> 48 [style=solid label="FLOAT"]
  675 -> 49 [style=solid label="DOUBLE"]
  675 -> 50 [style=solid label="VOID"]
  675 -> 55 [style=solid label="TYPENAME"]
  675 -> 387 [style=solid label="SIZEOF"]
  675 -> 388 [style=solid label="ALIGNOF"]
  675 -> 389 [style=solid label="'0'"]
  675 -> 390 [style=solid label="'1'"]
  675 -> 391 [style=solid label="'2'"]
  675 -> 392 [style=solid label="'3'"]
  675 -> 393 [style=solid label="'4'"]
  675 -> 394 [style=solid label="'5'"]
  675 -> 395 [style=solid label="'6'"]
  675 -> 396 [style=solid label="'7'"]
  675 -> 397 [style=solid label="'8'"]
  675 -> 398 [style=solid label="'9'"]
  675 -> 205 [style=solid label="'u'"]
  675 -> 206 [style=solid label="'U'"]
  675 -> 207 [style=solid label="'L'"]
  675 -> 208 [style=solid label="'R'"]
  675 -> 399 [style=dashed label="additive-expression"]
  675 -> 400 [style=dashed label="and-expression"]
  675 -> 401 [style=dashed label="await-expression"]
  675 -> 402 [style=dashed label="binary-literal"]
  675 -> 403 [style=dashed label="boolean-literal"]
  675 -> 404 [style=dashed label="cast-expression"]
  675 -> 405 [style=dashed label="character-literal"]
  675 -> 65 [style=dashed label="class-name"]
  675 -> 406 [style=dashed label="compare-expression"]
  675 -> 67 [style=dashed label="concept-name"]
  675 -> 407 [style=dashed label="conditional-expression"]
  675 -> 1173 [style=dashed label="constant-expression"]
  675 -> 68 [style=dashed label="conversion-function-id"]
  675 -> 409 [style=dashed label="decimal-floating-point-literal"]
  675 -> 410 [style=dashed label="decimal-literal"]
  675 -> 76 [style=dashed label="decltype-specifier"]
  675 -> 411 [style=dashed label="delete-expression"]
  675 -> 412 [style=dashed label="digit"]
  675 -> 413 [style=dashed label="digit-sequence"]
  675 -> 414 [style=dashed label="encoding-prefix"]
  675 -> 84 [style=dashed label="enum-name"]
  675 -> 415 [style=dashed label="equality-expression"]
  675 -> 416 [style=dashed label="exclusive-or-expression"]
  675 -> 417 [style=dashed label="floating-point-literal"]
  675 -> 418 [style=dashed label="fold-expression"]
  675 -> 419 [style=dashed label="fractional-constant"]
  675 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  675 -> 421 [style=dashed label="hexadecimal-literal"]
  675 -> 422 [style=dashed label="hexadecimal-prefix"]
  675 -> 423 [style=dashed label="id-expression"]
  675 -> 424 [style=dashed label="inclusive-or-expression"]
  675 -> 425 [style=dashed label="integer-literal"]
  675 -> 426 [style=dashed label="lambda-expression"]
  675 -> 427 [style=dashed label="lambda-introducer"]
  675 -> 428 [style=dashed label="literal"]
  675 -> 95 [style=dashed label="literal-operator-id"]
  675 -> 429 [style=dashed label="logical-and-expression"]
  675 -> 430 [style=dashed label="logical-or-expression"]
  675 -> 431 [style=dashed label="multiplicative-expression"]
  675 -> 99 [style=dashed label="namespace-alias"]
  675 -> 102 [style=dashed label="namespace-name"]
  675 -> 432 [style=dashed label="nested-name-specifier"]
  675 -> 433 [style=dashed label="new-expression"]
  675 -> 434 [style=dashed label="noexcept-expression"]
  675 -> 435 [style=dashed label="nonzero-digit"]
  675 -> 436 [style=dashed label="octal-literal"]
  675 -> 108 [style=dashed label="operator-function-id"]
  675 -> 109 [style=dashed label="placeholder-type-specifier"]
  675 -> 437 [style=dashed label="pm-expression"]
  675 -> 438 [style=dashed label="pointer-literal"]
  675 -> 439 [style=dashed label="postfix-expression"]
  675 -> 440 [style=dashed label="primary-expression"]
  675 -> 112 [style=dashed label="qualified-id"]
  675 -> 441 [style=dashed label="relational-expression"]
  675 -> 442 [style=dashed label="requires-expression"]
  675 -> 443 [style=dashed label="shift-expression"]
  675 -> 114 [style=dashed label="simple-template-id"]
  675 -> 529 [style=dashed label="simple-type-specifier"]
  675 -> 445 [style=dashed label="string-literal"]
  675 -> 120 [style=dashed label="template-id"]
  675 -> 215 [style=dashed label="template-name"]
  675 -> 123 [style=dashed label="type-constraint"]
  675 -> 124 [style=dashed label="type-name"]
  675 -> 126 [style=dashed label="typedef-name"]
  675 -> 531 [style=dashed label="typename-specifier"]
  675 -> 449 [style=dashed label="unary-expression"]
  675 -> 450 [style=dashed label="unary-operator"]
  675 -> 129 [style=dashed label="unqualified-id"]
  675 -> 451 [style=dashed label="user-defined-character-literal"]
  675 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  675 -> 453 [style=dashed label="user-defined-integer-literal"]
  675 -> 454 [style=dashed label="user-defined-literal"]
  675 -> 455 [style=dashed label="user-defined-string-literal"]
  676 [label="State 676\n\l648 namespace-alias-definition: NAMESPACE • IDENTIFIER EQ qualified-namespace-specifier SEMICOLON\l"]
  676 -> 1174 [style=solid label="IDENTIFIER"]
  677 [label="State 677\n\l938 selection-statement: IF • OPEN_PAREN condition CLOSE_PAREN statement\l939                    | IF • CONSTEXPR OPEN_PAREN condition CLOSE_PAREN statement\l940                    | IF • OPEN_PAREN init-statement condition CLOSE_PAREN statement\l941                    | IF • CONSTEXPR OPEN_PAREN init-statement condition CLOSE_PAREN statement\l942                    | IF • OPEN_PAREN condition CLOSE_PAREN statement ELSE statement\l943                    | IF • CONSTEXPR OPEN_PAREN condition CLOSE_PAREN statement ELSE statement\l944                    | IF • OPEN_PAREN init-statement condition CLOSE_PAREN statement ELSE statement\l945                    | IF • CONSTEXPR OPEN_PAREN init-statement condition CLOSE_PAREN statement ELSE statement\l946                    | IF • CONSTEVAL compound-statement\l947                    | IF • NOT CONSTEVAL compound-statement\l948                    | IF • CONSTEVAL compound-statement ELSE statement\l949                    | IF • NOT CONSTEVAL compound-statement ELSE statement\l"]
  677 -> 1175 [style=solid label="OPEN_PAREN"]
  677 -> 1176 [style=solid label="CONSTEXPR"]
  677 -> 1177 [style=solid label="CONSTEVAL"]
  677 -> 1178 [style=solid label="NOT"]
  678 [label="State 678\n\l950 selection-statement: SWITCH • OPEN_PAREN condition CLOSE_PAREN statement\l951                    | SWITCH • OPEN_PAREN init-statement condition CLOSE_PAREN statement\l"]
  678 -> 1179 [style=solid label="OPEN_PAREN"]
  679 [label="State 679\n\l 21 asm-declaration: attribute-specifier-seq • ASM OPEN_PAREN string-literal CLOSE_PAREN SEMICOLON\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l519 labeled-statement: attribute-specifier-seq • IDENTIFIER COLON statement\l521                  | attribute-specifier-seq • CASE constant-expression COLON statement\l523                  | attribute-specifier-seq • DEFAULT COLON statement\l965 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list SEMICOLON\l966                   | attribute-specifier-seq • decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l968                   | attribute-specifier-seq • decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l1009 statement: attribute-specifier-seq • expression-statement\l1011          | attribute-specifier-seq • compound-statement\l1013          | attribute-specifier-seq • selection-statement\l1015          | attribute-specifier-seq • iteration-statement\l1017          | attribute-specifier-seq • jump-statement\l1020          | attribute-specifier-seq • try-block\l1171 using-directive: attribute-specifier-seq • USING NAMESPACE namespace-name SEMICOLON\l1173                | attribute-specifier-seq • USING NAMESPACE nested-name-specifier namespace-name SEMICOLON\l"]
  679 -> 356 [style=solid label="PLUS"]
  679 -> 357 [style=solid label="MINUS"]
  679 -> 255 [style=solid label="USING"]
  679 -> 1180 [style=solid label="IDENTIFIER"]
  679 -> 662 [style=solid label="SEMICOLON"]
  679 -> 4 [style=solid label="ALIGNAS"]
  679 -> 358 [style=solid label="OPEN_PAREN"]
  679 -> 359 [style=solid label="AND"]
  679 -> 257 [style=solid label="ASM"]
  679 -> 360 [style=solid label="SCOPE"]
  679 -> 663 [style=solid label="OPEN_SQUARE"]
  679 -> 362 [style=solid label="CO_AWAIT"]
  679 -> 289 [style=solid label="OPEN_BRACE"]
  679 -> 11 [style=solid label="VIRTUAL"]
  679 -> 363 [style=solid label="ZERO_LB"]
  679 -> 364 [style=solid label="ZERO_HB"]
  679 -> 365 [style=solid label="SINGLE_QUOTE"]
  679 -> 366 [style=solid label="FALSE"]
  679 -> 367 [style=solid label="TRUE"]
  679 -> 12 [style=solid label="CLASS"]
  679 -> 13 [style=solid label="STRUCT"]
  679 -> 14 [style=solid label="UNION"]
  679 -> 368 [style=solid label="NOEXCEPT"]
  679 -> 17 [style=solid label="OPERATOR"]
  679 -> 665 [style=solid label="CO_RETURN"]
  679 -> 18 [style=solid label="CONST"]
  679 -> 19 [style=solid label="VOLATILE"]
  679 -> 20 [style=solid label="FRIEND"]
  679 -> 21 [style=solid label="TYPEDEF"]
  679 -> 22 [style=solid label="CONSTEXPR"]
  679 -> 23 [style=solid label="CONSTEVAL"]
  679 -> 24 [style=solid label="CONSTINIT"]
  679 -> 258 [style=solid label="INLINE"]
  679 -> 26 [style=solid label="DECLTYPE"]
  679 -> 369 [style=solid label="DELETE"]
  679 -> 370 [style=solid label="DOT"]
  679 -> 27 [style=solid label="ENUM"]
  679 -> 184 [style=solid label="UNICODE_8"]
  679 -> 259 [style=solid label="EXTERN"]
  679 -> 29 [style=solid label="EXPLICIT"]
  679 -> 371 [style=solid label="MULT"]
  679 -> 1181 [style=solid label="DEFAULT"]
  679 -> 667 [style=solid label="TRY"]
  679 -> 199 [style=solid label="DOUBLE_QUOTE"]
  679 -> 372 [style=solid label="ZERO_LX"]
  679 -> 373 [style=solid label="ZERO_HX"]
  679 -> 668 [style=solid label="WHILE"]
  679 -> 669 [style=solid label="DO"]
  679 -> 670 [style=solid label="FOR"]
  679 -> 671 [style=solid label="BREAK"]
  679 -> 672 [style=solid label="CONTINUE"]
  679 -> 673 [style=solid label="RETURN"]
  679 -> 674 [style=solid label="GOTO"]
  679 -> 1182 [style=solid label="CASE"]
  679 -> 374 [style=solid label="REQUIRES"]
  679 -> 375 [style=solid label="NEW"]
  679 -> 376 [style=solid label="COMPL"]
  679 -> 377 [style=solid label="NOT"]
  679 -> 378 [style=solid label="PLUS_PLUS"]
  679 -> 379 [style=solid label="MINUS_MINUS"]
  679 -> 380 [style=solid label="THIS"]
  679 -> 36 [style=solid label="AUTO"]
  679 -> 381 [style=solid label="NULLPTR"]
  679 -> 382 [style=solid label="DYNAMIC_CAST"]
  679 -> 383 [style=solid label="STATIC_CAST"]
  679 -> 384 [style=solid label="REINTERPRET_CAST"]
  679 -> 385 [style=solid label="CONST_CAST"]
  679 -> 386 [style=solid label="TYPEID"]
  679 -> 677 [style=solid label="IF"]
  679 -> 678 [style=solid label="SWITCH"]
  679 -> 37 [style=solid label="CHAR"]
  679 -> 38 [style=solid label="CHAR8_T"]
  679 -> 39 [style=solid label="CHAR16_T"]
  679 -> 40 [style=solid label="CHAR32_T"]
  679 -> 41 [style=solid label="WCHAR_T"]
  679 -> 42 [style=solid label="BOOL"]
  679 -> 43 [style=solid label="SHORT"]
  679 -> 44 [style=solid label="INT"]
  679 -> 45 [style=solid label="LONG"]
  679 -> 46 [style=solid label="SIGNED"]
  679 -> 47 [style=solid label="UNSIGNED"]
  679 -> 48 [style=solid label="FLOAT"]
  679 -> 49 [style=solid label="DOUBLE"]
  679 -> 50 [style=solid label="VOID"]
  679 -> 52 [style=solid label="STATIC"]
  679 -> 53 [style=solid label="THREAD_LOCAL"]
  679 -> 54 [style=solid label="MUTABLE"]
  679 -> 523 [style=solid label="THROW"]
  679 -> 55 [style=solid label="TYPENAME"]
  679 -> 387 [style=solid label="SIZEOF"]
  679 -> 388 [style=solid label="ALIGNOF"]
  679 -> 524 [style=solid label="CO_YIELD"]
  679 -> 389 [style=solid label="'0'"]
  679 -> 390 [style=solid label="'1'"]
  679 -> 391 [style=solid label="'2'"]
  679 -> 392 [style=solid label="'3'"]
  679 -> 393 [style=solid label="'4'"]
  679 -> 394 [style=solid label="'5'"]
  679 -> 395 [style=solid label="'6'"]
  679 -> 396 [style=solid label="'7'"]
  679 -> 397 [style=solid label="'8'"]
  679 -> 398 [style=solid label="'9'"]
  679 -> 205 [style=solid label="'u'"]
  679 -> 206 [style=solid label="'U'"]
  679 -> 207 [style=solid label="'L'"]
  679 -> 208 [style=solid label="'R'"]
  679 -> 399 [style=dashed label="additive-expression"]
  679 -> 57 [style=dashed label="alignment-specifier"]
  679 -> 400 [style=dashed label="and-expression"]
  679 -> 525 [style=dashed label="assignment-expression"]
  679 -> 260 [style=dashed label="attribute-specifier"]
  679 -> 401 [style=dashed label="await-expression"]
  679 -> 402 [style=dashed label="binary-literal"]
  679 -> 403 [style=dashed label="boolean-literal"]
  679 -> 404 [style=dashed label="cast-expression"]
  679 -> 405 [style=dashed label="character-literal"]
  679 -> 63 [style=dashed label="class-head"]
  679 -> 64 [style=dashed label="class-key"]
  679 -> 65 [style=dashed label="class-name"]
  679 -> 66 [style=dashed label="class-specifier"]
  679 -> 406 [style=dashed label="compare-expression"]
  679 -> 1183 [style=dashed label="compound-statement"]
  679 -> 67 [style=dashed label="concept-name"]
  679 -> 526 [style=dashed label="conditional-expression"]
  679 -> 68 [style=dashed label="conversion-function-id"]
  679 -> 682 [style=dashed label="coroutine-return-statement"]
  679 -> 69 [style=dashed label="cv-qualifier"]
  679 -> 409 [style=dashed label="decimal-floating-point-literal"]
  679 -> 410 [style=dashed label="decimal-literal"]
  679 -> 70 [style=dashed label="decl-specifier"]
  679 -> 1184 [style=dashed label="decl-specifier-seq"]
  679 -> 76 [style=dashed label="decltype-specifier"]
  679 -> 78 [style=dashed label="defining-type-specifier"]
  679 -> 411 [style=dashed label="delete-expression"]
  679 -> 412 [style=dashed label="digit"]
  679 -> 413 [style=dashed label="digit-sequence"]
  679 -> 79 [style=dashed label="elaborated-enum-specifier"]
  679 -> 80 [style=dashed label="elaborated-type-specifier"]
  679 -> 414 [style=dashed label="encoding-prefix"]
  679 -> 82 [style=dashed label="enum-head"]
  679 -> 263 [style=dashed label="enum-key"]
  679 -> 84 [style=dashed label="enum-name"]
  679 -> 85 [style=dashed label="enum-specifier"]
  679 -> 415 [style=dashed label="equality-expression"]
  679 -> 416 [style=dashed label="exclusive-or-expression"]
  679 -> 264 [style=dashed label="explicit-specifier"]
  679 -> 685 [style=dashed label="expression"]
  679 -> 1185 [style=dashed label="expression-statement"]
  679 -> 417 [style=dashed label="floating-point-literal"]
  679 -> 418 [style=dashed label="fold-expression"]
  679 -> 419 [style=dashed label="fractional-constant"]
  679 -> 91 [style=dashed label="function-specifier"]
  679 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  679 -> 421 [style=dashed label="hexadecimal-literal"]
  679 -> 422 [style=dashed label="hexadecimal-prefix"]
  679 -> 423 [style=dashed label="id-expression"]
  679 -> 424 [style=dashed label="inclusive-or-expression"]
  679 -> 425 [style=dashed label="integer-literal"]
  679 -> 1186 [style=dashed label="iteration-statement"]
  679 -> 1187 [style=dashed label="jump-statement"]
  679 -> 426 [style=dashed label="lambda-expression"]
  679 -> 427 [style=dashed label="lambda-introducer"]
  679 -> 428 [style=dashed label="literal"]
  679 -> 95 [style=dashed label="literal-operator-id"]
  679 -> 429 [style=dashed label="logical-and-expression"]
  679 -> 528 [style=dashed label="logical-or-expression"]
  679 -> 431 [style=dashed label="multiplicative-expression"]
  679 -> 99 [style=dashed label="namespace-alias"]
  679 -> 102 [style=dashed label="namespace-name"]
  679 -> 432 [style=dashed label="nested-name-specifier"]
  679 -> 433 [style=dashed label="new-expression"]
  679 -> 434 [style=dashed label="noexcept-expression"]
  679 -> 435 [style=dashed label="nonzero-digit"]
  679 -> 436 [style=dashed label="octal-literal"]
  679 -> 108 [style=dashed label="operator-function-id"]
  679 -> 109 [style=dashed label="placeholder-type-specifier"]
  679 -> 437 [style=dashed label="pm-expression"]
  679 -> 438 [style=dashed label="pointer-literal"]
  679 -> 439 [style=dashed label="postfix-expression"]
  679 -> 440 [style=dashed label="primary-expression"]
  679 -> 112 [style=dashed label="qualified-id"]
  679 -> 441 [style=dashed label="relational-expression"]
  679 -> 442 [style=dashed label="requires-expression"]
  679 -> 1188 [style=dashed label="selection-statement"]
  679 -> 443 [style=dashed label="shift-expression"]
  679 -> 114 [style=dashed label="simple-template-id"]
  679 -> 444 [style=dashed label="simple-type-specifier"]
  679 -> 117 [style=dashed label="storage-class-specifier"]
  679 -> 445 [style=dashed label="string-literal"]
  679 -> 120 [style=dashed label="template-id"]
  679 -> 215 [style=dashed label="template-name"]
  679 -> 530 [style=dashed label="throw-expression"]
  679 -> 1189 [style=dashed label="try-block"]
  679 -> 123 [style=dashed label="type-constraint"]
  679 -> 124 [style=dashed label="type-name"]
  679 -> 125 [style=dashed label="type-specifier"]
  679 -> 126 [style=dashed label="typedef-name"]
  679 -> 448 [style=dashed label="typename-specifier"]
  679 -> 449 [style=dashed label="unary-expression"]
  679 -> 450 [style=dashed label="unary-operator"]
  679 -> 129 [style=dashed label="unqualified-id"]
  679 -> 451 [style=dashed label="user-defined-character-literal"]
  679 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  679 -> 453 [style=dashed label="user-defined-integer-literal"]
  679 -> 454 [style=dashed label="user-defined-literal"]
  679 -> 455 [style=dashed label="user-defined-string-literal"]
  679 -> 532 [style=dashed label="yield-expression"]
  680 [label="State 680\n\l225 declaration-statement: block-declaration •\l"]
  680 -> "680R225" [style=solid]
 "680R225" [label="R225", fillcolor=3, shape=diamond, style=filled]
  681 [label="State 681\n\l1012 statement: compound-statement •\l"]
  681 -> "681R1012" [style=solid]
 "681R1012" [label="R1012", fillcolor=3, shape=diamond, style=filled]
  682 [label="State 682\n\l517 jump-statement: coroutine-return-statement •\l"]
  682 -> "682R517" [style=solid]
 "682R517" [label="R517", fillcolor=3, shape=diamond, style=filled]
  683 [label="State 683\n\l963 simple-declaration: decl-specifier-seq • SEMICOLON\l964                   | decl-specifier-seq • init-declarator-list SEMICOLON\l967                   | decl-specifier-seq • OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l969                   | decl-specifier-seq • ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  683 -> 147 [style=solid label="IDENTIFIER"]
  683 -> 277 [style=solid label="SEMICOLON"]
  683 -> 5 [style=solid label="OPEN_PAREN"]
  683 -> 6 [style=solid label="ELLIPSIS"]
  683 -> 278 [style=solid label="AND"]
  683 -> 9 [style=solid label="SCOPE"]
  683 -> 279 [style=solid label="OPEN_SQUARE"]
  683 -> 280 [style=solid label="AND_AND"]
  683 -> 17 [style=solid label="OPERATOR"]
  683 -> 134 [style=solid label="DECLTYPE"]
  683 -> 31 [style=solid label="MULT"]
  683 -> 35 [style=solid label="COMPL"]
  683 -> 65 [style=dashed label="class-name"]
  683 -> 68 [style=dashed label="conversion-function-id"]
  683 -> 1149 [style=dashed label="declarator"]
  683 -> 75 [style=dashed label="declarator-id"]
  683 -> 138 [style=dashed label="decltype-specifier"]
  683 -> 84 [style=dashed label="enum-name"]
  683 -> 93 [style=dashed label="id-expression"]
  683 -> 282 [style=dashed label="init-declarator"]
  683 -> 283 [style=dashed label="init-declarator-list"]
  683 -> 95 [style=dashed label="literal-operator-id"]
  683 -> 99 [style=dashed label="namespace-alias"]
  683 -> 102 [style=dashed label="namespace-name"]
  683 -> 148 [style=dashed label="nested-name-specifier"]
  683 -> 106 [style=dashed label="noptr-declarator"]
  683 -> 108 [style=dashed label="operator-function-id"]
  683 -> 110 [style=dashed label="ptr-declarator"]
  683 -> 111 [style=dashed label="ptr-operator"]
  683 -> 112 [style=dashed label="qualified-id"]
  683 -> 284 [style=dashed label="ref-qualifier"]
  683 -> 114 [style=dashed label="simple-template-id"]
  683 -> 120 [style=dashed label="template-id"]
  683 -> 142 [style=dashed label="template-name"]
  683 -> 143 [style=dashed label="type-name"]
  683 -> 126 [style=dashed label="typedef-name"]
  683 -> 129 [style=dashed label="unqualified-id"]
  684 [label="State 684\n\l1019 statement: declaration-statement •\l"]
  684 -> "684R1019" [style=solid]
 "684R1019" [label="R1019", fillcolor=3, shape=diamond, style=filled]
  685 [label="State 685\n\l335 expression: expression • COMMA assignment-expression\l337 expression-statement: expression • SEMICOLON\l"]
  685 -> 1190 [style=solid label="SEMICOLON"]
  685 -> 1029 [style=solid label="COMMA"]
  686 [label="State 686\n\l1010 statement: expression-statement •\l"]
  686 -> "686R1010" [style=solid]
 "686R1010" [label="R1010", fillcolor=3, shape=diamond, style=filled]
  687 [label="State 687\n\l1016 statement: iteration-statement •\l"]
  687 -> "687R1016" [style=solid]
 "687R1016" [label="R1016", fillcolor=3, shape=diamond, style=filled]
  688 [label="State 688\n\l1018 statement: jump-statement •\l"]
  688 -> "688R1018" [style=solid]
 "688R1018" [label="R1018", fillcolor=3, shape=diamond, style=filled]
  689 [label="State 689\n\l1008 statement: labeled-statement •\l"]
  689 -> "689R1008" [style=solid]
 "689R1008" [label="R1008", fillcolor=3, shape=diamond, style=filled]
  690 [label="State 690\n\l1014 statement: selection-statement •\l"]
  690 -> "690R1014" [style=solid]
 "690R1014" [label="R1014", fillcolor=3, shape=diamond, style=filled]
  691 [label="State 691\n\l1022 statement-seq: statement •\l"]
  691 -> "691R1022" [style=solid]
 "691R1022" [label="R1022", fillcolor=3, shape=diamond, style=filled]
  692 [label="State 692\n\l161 compound-statement: OPEN_BRACE statement-seq • CLOSE_BRACE\l1023 statement-seq: statement-seq • statement\l"]
  692 -> 356 [style=solid label="PLUS"]
  692 -> 357 [style=solid label="MINUS"]
  692 -> 1 [style=solid label="USING"]
  692 -> 661 [style=solid label="IDENTIFIER"]
  692 -> 662 [style=solid label="SEMICOLON"]
  692 -> 4 [style=solid label="ALIGNAS"]
  692 -> 358 [style=solid label="OPEN_PAREN"]
  692 -> 359 [style=solid label="AND"]
  692 -> 8 [style=solid label="ASM"]
  692 -> 360 [style=solid label="SCOPE"]
  692 -> 663 [style=solid label="OPEN_SQUARE"]
  692 -> 362 [style=solid label="CO_AWAIT"]
  692 -> 289 [style=solid label="OPEN_BRACE"]
  692 -> 1191 [style=solid label="CLOSE_BRACE"]
  692 -> 11 [style=solid label="VIRTUAL"]
  692 -> 363 [style=solid label="ZERO_LB"]
  692 -> 364 [style=solid label="ZERO_HB"]
  692 -> 365 [style=solid label="SINGLE_QUOTE"]
  692 -> 366 [style=solid label="FALSE"]
  692 -> 367 [style=solid label="TRUE"]
  692 -> 12 [style=solid label="CLASS"]
  692 -> 13 [style=solid label="STRUCT"]
  692 -> 14 [style=solid label="UNION"]
  692 -> 368 [style=solid label="NOEXCEPT"]
  692 -> 17 [style=solid label="OPERATOR"]
  692 -> 665 [style=solid label="CO_RETURN"]
  692 -> 18 [style=solid label="CONST"]
  692 -> 19 [style=solid label="VOLATILE"]
  692 -> 20 [style=solid label="FRIEND"]
  692 -> 21 [style=solid label="TYPEDEF"]
  692 -> 22 [style=solid label="CONSTEXPR"]
  692 -> 23 [style=solid label="CONSTEVAL"]
  692 -> 24 [style=solid label="CONSTINIT"]
  692 -> 258 [style=solid label="INLINE"]
  692 -> 26 [style=solid label="DECLTYPE"]
  692 -> 369 [style=solid label="DELETE"]
  692 -> 370 [style=solid label="DOT"]
  692 -> 27 [style=solid label="ENUM"]
  692 -> 184 [style=solid label="UNICODE_8"]
  692 -> 259 [style=solid label="EXTERN"]
  692 -> 29 [style=solid label="EXPLICIT"]
  692 -> 371 [style=solid label="MULT"]
  692 -> 666 [style=solid label="DEFAULT"]
  692 -> 667 [style=solid label="TRY"]
  692 -> 199 [style=solid label="DOUBLE_QUOTE"]
  692 -> 372 [style=solid label="ZERO_LX"]
  692 -> 373 [style=solid label="ZERO_HX"]
  692 -> 668 [style=solid label="WHILE"]
  692 -> 669 [style=solid label="DO"]
  692 -> 670 [style=solid label="FOR"]
  692 -> 671 [style=solid label="BREAK"]
  692 -> 672 [style=solid label="CONTINUE"]
  692 -> 673 [style=solid label="RETURN"]
  692 -> 674 [style=solid label="GOTO"]
  692 -> 675 [style=solid label="CASE"]
  692 -> 676 [style=solid label="NAMESPACE"]
  692 -> 374 [style=solid label="REQUIRES"]
  692 -> 375 [style=solid label="NEW"]
  692 -> 376 [style=solid label="COMPL"]
  692 -> 377 [style=solid label="NOT"]
  692 -> 378 [style=solid label="PLUS_PLUS"]
  692 -> 379 [style=solid label="MINUS_MINUS"]
  692 -> 380 [style=solid label="THIS"]
  692 -> 36 [style=solid label="AUTO"]
  692 -> 381 [style=solid label="NULLPTR"]
  692 -> 382 [style=solid label="DYNAMIC_CAST"]
  692 -> 383 [style=solid label="STATIC_CAST"]
  692 -> 384 [style=solid label="REINTERPRET_CAST"]
  692 -> 385 [style=solid label="CONST_CAST"]
  692 -> 386 [style=solid label="TYPEID"]
  692 -> 677 [style=solid label="IF"]
  692 -> 678 [style=solid label="SWITCH"]
  692 -> 37 [style=solid label="CHAR"]
  692 -> 38 [style=solid label="CHAR8_T"]
  692 -> 39 [style=solid label="CHAR16_T"]
  692 -> 40 [style=solid label="CHAR32_T"]
  692 -> 41 [style=solid label="WCHAR_T"]
  692 -> 42 [style=solid label="BOOL"]
  692 -> 43 [style=solid label="SHORT"]
  692 -> 44 [style=solid label="INT"]
  692 -> 45 [style=solid label="LONG"]
  692 -> 46 [style=solid label="SIGNED"]
  692 -> 47 [style=solid label="UNSIGNED"]
  692 -> 48 [style=solid label="FLOAT"]
  692 -> 49 [style=solid label="DOUBLE"]
  692 -> 50 [style=solid label="VOID"]
  692 -> 51 [style=solid label="STATIC_ASSERT"]
  692 -> 52 [style=solid label="STATIC"]
  692 -> 53 [style=solid label="THREAD_LOCAL"]
  692 -> 54 [style=solid label="MUTABLE"]
  692 -> 523 [style=solid label="THROW"]
  692 -> 55 [style=solid label="TYPENAME"]
  692 -> 387 [style=solid label="SIZEOF"]
  692 -> 388 [style=solid label="ALIGNOF"]
  692 -> 524 [style=solid label="CO_YIELD"]
  692 -> 389 [style=solid label="'0'"]
  692 -> 390 [style=solid label="'1'"]
  692 -> 391 [style=solid label="'2'"]
  692 -> 392 [style=solid label="'3'"]
  692 -> 393 [style=solid label="'4'"]
  692 -> 394 [style=solid label="'5'"]
  692 -> 395 [style=solid label="'6'"]
  692 -> 396 [style=solid label="'7'"]
  692 -> 397 [style=solid label="'8'"]
  692 -> 398 [style=solid label="'9'"]
  692 -> 205 [style=solid label="'u'"]
  692 -> 206 [style=solid label="'U'"]
  692 -> 207 [style=solid label="'L'"]
  692 -> 208 [style=solid label="'R'"]
  692 -> 399 [style=dashed label="additive-expression"]
  692 -> 56 [style=dashed label="alias-declaration"]
  692 -> 57 [style=dashed label="alignment-specifier"]
  692 -> 400 [style=dashed label="and-expression"]
  692 -> 58 [style=dashed label="asm-declaration"]
  692 -> 525 [style=dashed label="assignment-expression"]
  692 -> 60 [style=dashed label="attribute-specifier"]
  692 -> 679 [style=dashed label="attribute-specifier-seq"]
  692 -> 401 [style=dashed label="await-expression"]
  692 -> 402 [style=dashed label="binary-literal"]
  692 -> 680 [style=dashed label="block-declaration"]
  692 -> 403 [style=dashed label="boolean-literal"]
  692 -> 404 [style=dashed label="cast-expression"]
  692 -> 405 [style=dashed label="character-literal"]
  692 -> 63 [style=dashed label="class-head"]
  692 -> 64 [style=dashed label="class-key"]
  692 -> 65 [style=dashed label="class-name"]
  692 -> 66 [style=dashed label="class-specifier"]
  692 -> 406 [style=dashed label="compare-expression"]
  692 -> 681 [style=dashed label="compound-statement"]
  692 -> 67 [style=dashed label="concept-name"]
  692 -> 526 [style=dashed label="conditional-expression"]
  692 -> 68 [style=dashed label="conversion-function-id"]
  692 -> 682 [style=dashed label="coroutine-return-statement"]
  692 -> 69 [style=dashed label="cv-qualifier"]
  692 -> 409 [style=dashed label="decimal-floating-point-literal"]
  692 -> 410 [style=dashed label="decimal-literal"]
  692 -> 70 [style=dashed label="decl-specifier"]
  692 -> 683 [style=dashed label="decl-specifier-seq"]
  692 -> 684 [style=dashed label="declaration-statement"]
  692 -> 76 [style=dashed label="decltype-specifier"]
  692 -> 78 [style=dashed label="defining-type-specifier"]
  692 -> 411 [style=dashed label="delete-expression"]
  692 -> 412 [style=dashed label="digit"]
  692 -> 413 [style=dashed label="digit-sequence"]
  692 -> 79 [style=dashed label="elaborated-enum-specifier"]
  692 -> 80 [style=dashed label="elaborated-type-specifier"]
  692 -> 414 [style=dashed label="encoding-prefix"]
  692 -> 82 [style=dashed label="enum-head"]
  692 -> 83 [style=dashed label="enum-key"]
  692 -> 84 [style=dashed label="enum-name"]
  692 -> 85 [style=dashed label="enum-specifier"]
  692 -> 415 [style=dashed label="equality-expression"]
  692 -> 416 [style=dashed label="exclusive-or-expression"]
  692 -> 264 [style=dashed label="explicit-specifier"]
  692 -> 685 [style=dashed label="expression"]
  692 -> 686 [style=dashed label="expression-statement"]
  692 -> 417 [style=dashed label="floating-point-literal"]
  692 -> 418 [style=dashed label="fold-expression"]
  692 -> 419 [style=dashed label="fractional-constant"]
  692 -> 91 [style=dashed label="function-specifier"]
  692 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  692 -> 421 [style=dashed label="hexadecimal-literal"]
  692 -> 422 [style=dashed label="hexadecimal-prefix"]
  692 -> 423 [style=dashed label="id-expression"]
  692 -> 424 [style=dashed label="inclusive-or-expression"]
  692 -> 425 [style=dashed label="integer-literal"]
  692 -> 687 [style=dashed label="iteration-statement"]
  692 -> 688 [style=dashed label="jump-statement"]
  692 -> 689 [style=dashed label="labeled-statement"]
  692 -> 426 [style=dashed label="lambda-expression"]
  692 -> 427 [style=dashed label="lambda-introducer"]
  692 -> 428 [style=dashed label="literal"]
  692 -> 95 [style=dashed label="literal-operator-id"]
  692 -> 429 [style=dashed label="logical-and-expression"]
  692 -> 528 [style=dashed label="logical-or-expression"]
  692 -> 431 [style=dashed label="multiplicative-expression"]
  692 -> 99 [style=dashed label="namespace-alias"]
  692 -> 100 [style=dashed label="namespace-alias-definition"]
  692 -> 102 [style=dashed label="namespace-name"]
  692 -> 432 [style=dashed label="nested-name-specifier"]
  692 -> 433 [style=dashed label="new-expression"]
  692 -> 434 [style=dashed label="noexcept-expression"]
  692 -> 435 [style=dashed label="nonzero-digit"]
  692 -> 436 [style=dashed label="octal-literal"]
  692 -> 107 [style=dashed label="opaque-enum-declaration"]
  692 -> 108 [style=dashed label="operator-function-id"]
  692 -> 109 [style=dashed label="placeholder-type-specifier"]
  692 -> 437 [style=dashed label="pm-expression"]
  692 -> 438 [style=dashed label="pointer-literal"]
  692 -> 439 [style=dashed label="postfix-expression"]
  692 -> 440 [style=dashed label="primary-expression"]
  692 -> 112 [style=dashed label="qualified-id"]
  692 -> 441 [style=dashed label="relational-expression"]
  692 -> 442 [style=dashed label="requires-expression"]
  692 -> 690 [style=dashed label="selection-statement"]
  692 -> 443 [style=dashed label="shift-expression"]
  692 -> 113 [style=dashed label="simple-declaration"]
  692 -> 114 [style=dashed label="simple-template-id"]
  692 -> 444 [style=dashed label="simple-type-specifier"]
  692 -> 1192 [style=dashed label="statement"]
  692 -> 116 [style=dashed label="static_assert-declaration"]
  692 -> 117 [style=dashed label="storage-class-specifier"]
  692 -> 445 [style=dashed label="string-literal"]
  692 -> 120 [style=dashed label="template-id"]
  692 -> 215 [style=dashed label="template-name"]
  692 -> 530 [style=dashed label="throw-expression"]
  692 -> 693 [style=dashed label="try-block"]
  692 -> 123 [style=dashed label="type-constraint"]
  692 -> 124 [style=dashed label="type-name"]
  692 -> 125 [style=dashed label="type-specifier"]
  692 -> 126 [style=dashed label="typedef-name"]
  692 -> 448 [style=dashed label="typename-specifier"]
  692 -> 449 [style=dashed label="unary-expression"]
  692 -> 450 [style=dashed label="unary-operator"]
  692 -> 129 [style=dashed label="unqualified-id"]
  692 -> 451 [style=dashed label="user-defined-character-literal"]
  692 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  692 -> 453 [style=dashed label="user-defined-integer-literal"]
  692 -> 454 [style=dashed label="user-defined-literal"]
  692 -> 455 [style=dashed label="user-defined-string-literal"]
  692 -> 130 [style=dashed label="using-declaration"]
  692 -> 131 [style=dashed label="using-directive"]
  692 -> 132 [style=dashed label="using-enum-declaration"]
  692 -> 532 [style=dashed label="yield-expression"]
  693 [label="State 693\n\l1021 statement: try-block •\l"]
  693 -> "693R1021" [style=solid]
 "693R1021" [label="R1021", fillcolor=3, shape=diamond, style=filled]
  694 [label="State 694\n\l409 function-try-block: TRY compound-statement • handler-seq\l"]
  694 -> 1193 [style=solid label="CATCH"]
  694 -> 1194 [style=dashed label="handler"]
  694 -> 1195 [style=dashed label="handler-seq"]
  695 [label="State 695\n\l410 function-try-block: TRY ctor-initializer • compound-statement handler-seq\l"]
  695 -> 289 [style=solid label="OPEN_BRACE"]
  695 -> 1196 [style=dashed label="compound-statement"]
  696 [label="State 696\n\l345 fold-expression: OPEN_PAREN • cast-expression fold-operator ELLIPSIS CLOSE_PAREN\l346                | OPEN_PAREN • ELLIPSIS fold-operator cast-expression CLOSE_PAREN\l347                | OPEN_PAREN • cast-expression fold-operator ELLIPSIS fold-operator cast-expression CLOSE_PAREN\l881 primary-expression: OPEN_PAREN • expression CLOSE_PAREN\l"]
  696 -> 356 [style=solid label="PLUS"]
  696 -> 357 [style=solid label="MINUS"]
  696 -> 2 [style=solid label="IDENTIFIER"]
  696 -> 358 [style=solid label="OPEN_PAREN"]
  696 -> 756 [style=solid label="ELLIPSIS"]
  696 -> 359 [style=solid label="AND"]
  696 -> 360 [style=solid label="SCOPE"]
  696 -> 361 [style=solid label="OPEN_SQUARE"]
  696 -> 362 [style=solid label="CO_AWAIT"]
  696 -> 363 [style=solid label="ZERO_LB"]
  696 -> 364 [style=solid label="ZERO_HB"]
  696 -> 365 [style=solid label="SINGLE_QUOTE"]
  696 -> 366 [style=solid label="FALSE"]
  696 -> 367 [style=solid label="TRUE"]
  696 -> 368 [style=solid label="NOEXCEPT"]
  696 -> 17 [style=solid label="OPERATOR"]
  696 -> 26 [style=solid label="DECLTYPE"]
  696 -> 369 [style=solid label="DELETE"]
  696 -> 370 [style=solid label="DOT"]
  696 -> 184 [style=solid label="UNICODE_8"]
  696 -> 371 [style=solid label="MULT"]
  696 -> 199 [style=solid label="DOUBLE_QUOTE"]
  696 -> 372 [style=solid label="ZERO_LX"]
  696 -> 373 [style=solid label="ZERO_HX"]
  696 -> 374 [style=solid label="REQUIRES"]
  696 -> 375 [style=solid label="NEW"]
  696 -> 376 [style=solid label="COMPL"]
  696 -> 377 [style=solid label="NOT"]
  696 -> 378 [style=solid label="PLUS_PLUS"]
  696 -> 379 [style=solid label="MINUS_MINUS"]
  696 -> 380 [style=solid label="THIS"]
  696 -> 36 [style=solid label="AUTO"]
  696 -> 381 [style=solid label="NULLPTR"]
  696 -> 382 [style=solid label="DYNAMIC_CAST"]
  696 -> 383 [style=solid label="STATIC_CAST"]
  696 -> 384 [style=solid label="REINTERPRET_CAST"]
  696 -> 385 [style=solid label="CONST_CAST"]
  696 -> 386 [style=solid label="TYPEID"]
  696 -> 37 [style=solid label="CHAR"]
  696 -> 38 [style=solid label="CHAR8_T"]
  696 -> 39 [style=solid label="CHAR16_T"]
  696 -> 40 [style=solid label="CHAR32_T"]
  696 -> 41 [style=solid label="WCHAR_T"]
  696 -> 42 [style=solid label="BOOL"]
  696 -> 43 [style=solid label="SHORT"]
  696 -> 44 [style=solid label="INT"]
  696 -> 45 [style=solid label="LONG"]
  696 -> 46 [style=solid label="SIGNED"]
  696 -> 47 [style=solid label="UNSIGNED"]
  696 -> 48 [style=solid label="FLOAT"]
  696 -> 49 [style=solid label="DOUBLE"]
  696 -> 50 [style=solid label="VOID"]
  696 -> 523 [style=solid label="THROW"]
  696 -> 55 [style=solid label="TYPENAME"]
  696 -> 387 [style=solid label="SIZEOF"]
  696 -> 388 [style=solid label="ALIGNOF"]
  696 -> 524 [style=solid label="CO_YIELD"]
  696 -> 389 [style=solid label="'0'"]
  696 -> 390 [style=solid label="'1'"]
  696 -> 391 [style=solid label="'2'"]
  696 -> 392 [style=solid label="'3'"]
  696 -> 393 [style=solid label="'4'"]
  696 -> 394 [style=solid label="'5'"]
  696 -> 395 [style=solid label="'6'"]
  696 -> 396 [style=solid label="'7'"]
  696 -> 397 [style=solid label="'8'"]
  696 -> 398 [style=solid label="'9'"]
  696 -> 205 [style=solid label="'u'"]
  696 -> 206 [style=solid label="'U'"]
  696 -> 207 [style=solid label="'L'"]
  696 -> 208 [style=solid label="'R'"]
  696 -> 399 [style=dashed label="additive-expression"]
  696 -> 400 [style=dashed label="and-expression"]
  696 -> 525 [style=dashed label="assignment-expression"]
  696 -> 401 [style=dashed label="await-expression"]
  696 -> 402 [style=dashed label="binary-literal"]
  696 -> 403 [style=dashed label="boolean-literal"]
  696 -> 757 [style=dashed label="cast-expression"]
  696 -> 405 [style=dashed label="character-literal"]
  696 -> 65 [style=dashed label="class-name"]
  696 -> 406 [style=dashed label="compare-expression"]
  696 -> 67 [style=dashed label="concept-name"]
  696 -> 526 [style=dashed label="conditional-expression"]
  696 -> 68 [style=dashed label="conversion-function-id"]
  696 -> 409 [style=dashed label="decimal-floating-point-literal"]
  696 -> 410 [style=dashed label="decimal-literal"]
  696 -> 76 [style=dashed label="decltype-specifier"]
  696 -> 411 [style=dashed label="delete-expression"]
  696 -> 412 [style=dashed label="digit"]
  696 -> 413 [style=dashed label="digit-sequence"]
  696 -> 414 [style=dashed label="encoding-prefix"]
  696 -> 84 [style=dashed label="enum-name"]
  696 -> 415 [style=dashed label="equality-expression"]
  696 -> 416 [style=dashed label="exclusive-or-expression"]
  696 -> 758 [style=dashed label="expression"]
  696 -> 417 [style=dashed label="floating-point-literal"]
  696 -> 418 [style=dashed label="fold-expression"]
  696 -> 419 [style=dashed label="fractional-constant"]
  696 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  696 -> 421 [style=dashed label="hexadecimal-literal"]
  696 -> 422 [style=dashed label="hexadecimal-prefix"]
  696 -> 423 [style=dashed label="id-expression"]
  696 -> 424 [style=dashed label="inclusive-or-expression"]
  696 -> 425 [style=dashed label="integer-literal"]
  696 -> 426 [style=dashed label="lambda-expression"]
  696 -> 427 [style=dashed label="lambda-introducer"]
  696 -> 428 [style=dashed label="literal"]
  696 -> 95 [style=dashed label="literal-operator-id"]
  696 -> 429 [style=dashed label="logical-and-expression"]
  696 -> 528 [style=dashed label="logical-or-expression"]
  696 -> 431 [style=dashed label="multiplicative-expression"]
  696 -> 99 [style=dashed label="namespace-alias"]
  696 -> 102 [style=dashed label="namespace-name"]
  696 -> 432 [style=dashed label="nested-name-specifier"]
  696 -> 433 [style=dashed label="new-expression"]
  696 -> 434 [style=dashed label="noexcept-expression"]
  696 -> 435 [style=dashed label="nonzero-digit"]
  696 -> 436 [style=dashed label="octal-literal"]
  696 -> 108 [style=dashed label="operator-function-id"]
  696 -> 109 [style=dashed label="placeholder-type-specifier"]
  696 -> 437 [style=dashed label="pm-expression"]
  696 -> 438 [style=dashed label="pointer-literal"]
  696 -> 439 [style=dashed label="postfix-expression"]
  696 -> 440 [style=dashed label="primary-expression"]
  696 -> 112 [style=dashed label="qualified-id"]
  696 -> 441 [style=dashed label="relational-expression"]
  696 -> 442 [style=dashed label="requires-expression"]
  696 -> 443 [style=dashed label="shift-expression"]
  696 -> 114 [style=dashed label="simple-template-id"]
  696 -> 529 [style=dashed label="simple-type-specifier"]
  696 -> 445 [style=dashed label="string-literal"]
  696 -> 120 [style=dashed label="template-id"]
  696 -> 215 [style=dashed label="template-name"]
  696 -> 530 [style=dashed label="throw-expression"]
  696 -> 123 [style=dashed label="type-constraint"]
  696 -> 124 [style=dashed label="type-name"]
  696 -> 126 [style=dashed label="typedef-name"]
  696 -> 531 [style=dashed label="typename-specifier"]
  696 -> 449 [style=dashed label="unary-expression"]
  696 -> 450 [style=dashed label="unary-operator"]
  696 -> 129 [style=dashed label="unqualified-id"]
  696 -> 451 [style=dashed label="user-defined-character-literal"]
  696 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  696 -> 453 [style=dashed label="user-defined-integer-literal"]
  696 -> 454 [style=dashed label="user-defined-literal"]
  696 -> 455 [style=dashed label="user-defined-string-literal"]
  696 -> 532 [style=dashed label="yield-expression"]
  697 [label="State 697\n\l174 constraint-logical-and-expression: constraint-logical-and-expression • AND_AND primary-expression\l175 constraint-logical-or-expression: constraint-logical-and-expression •\l"]
  697 -> 1197 [style=solid label="AND_AND"]
  697 -> "697R175d" [label="[AND_AND]", style=solid]
 "697R175d" [label="R175", fillcolor=5, shape=diamond, style=filled]
  697 -> "697R175" [style=solid]
 "697R175" [label="R175", fillcolor=3, shape=diamond, style=filled]
  698 [label="State 698\n\l176 constraint-logical-or-expression: constraint-logical-or-expression • OR_OR constraint-logical-and-expression\l929 requires-clause: REQUIRES constraint-logical-or-expression •\l"]
  698 -> 1198 [style=solid label="OR_OR"]
  698 -> "698R929" [style=solid]
 "698R929" [label="R929", fillcolor=3, shape=diamond, style=filled]
  699 [label="State 699\n\l173 constraint-logical-and-expression: primary-expression •\l"]
  699 -> "699R173" [style=solid]
 "699R173" [label="R173", fillcolor=3, shape=diamond, style=filled]
  700 [label="State 700\n\l390 function-body: ctor-initializer compound-statement •\l"]
  700 -> "700R390" [style=solid]
 "700R390" [label="R390", fillcolor=3, shape=diamond, style=filled]
  701 [label="State 701\n\l404 function-definition: declarator requires-clause function-body •\l"]
  701 -> "701R404" [style=solid]
 "701R404" [label="R404", fillcolor=3, shape=diamond, style=filled]
  702 [label="State 702\n\l400 function-definition: declarator virt-specifier-seq function-body •\l"]
  702 -> "702R400" [style=solid]
 "702R400" [label="R400", fillcolor=3, shape=diamond, style=filled]
  703 [label="State 703\n\l1179 virt-specifier-seq: virt-specifier-seq virt-specifier •\l"]
  703 -> "703R1179" [style=solid]
 "703R1179" [label="R1179", fillcolor=3, shape=diamond, style=filled]
  704 [label="State 704\n\l298 enumerator: IDENTIFIER •\l299           | IDENTIFIER • attribute-specifier-seq\l"]
  704 -> 4 [style=solid label="ALIGNAS"]
  704 -> 10 [style=solid label="OPEN_SQUARE"]
  704 -> 57 [style=dashed label="alignment-specifier"]
  704 -> 60 [style=dashed label="attribute-specifier"]
  704 -> 1199 [style=dashed label="attribute-specifier-seq"]
  704 -> "704R298" [style=solid]
 "704R298" [label="R298", fillcolor=3, shape=diamond, style=filled]
  705 [label="State 705\n\l295 enum-specifier: enum-head OPEN_BRACE CLOSE_BRACE •\l"]
  705 -> "705R295" [style=solid]
 "705R295" [label="R295", fillcolor=3, shape=diamond, style=filled]
  706 [label="State 706\n\l300 enumerator-definition: enumerator •\l301                      | enumerator • EQ constant-expression\l"]
  706 -> 1200 [style=solid label="EQ"]
  706 -> "706R300" [style=solid]
 "706R300" [label="R300", fillcolor=3, shape=diamond, style=filled]
  707 [label="State 707\n\l302 enumerator-list: enumerator-definition •\l"]
  707 -> "707R302" [style=solid]
 "707R302" [label="R302", fillcolor=3, shape=diamond, style=filled]
  708 [label="State 708\n\l296 enum-specifier: enum-head OPEN_BRACE enumerator-list • CLOSE_BRACE\l297               | enum-head OPEN_BRACE enumerator-list • COMMA CLOSE_BRACE\l303 enumerator-list: enumerator-list • COMMA enumerator-definition\l"]
  708 -> 1201 [style=solid label="COMMA"]
  708 -> 1202 [style=solid label="CLOSE_BRACE"]
  709 [label="State 709\n\l280 enum-base: COLON type-specifier-seq •\l"]
  709 -> "709R280" [style=solid]
 "709R280" [label="R280", fillcolor=3, shape=diamond, style=filled]
  710 [label="State 710\n\l286 enum-head: enum-key attribute-specifier-seq enum-base •\l"]
  710 -> "710R286" [style=solid]
 "710R286" [label="R286", fillcolor=3, shape=diamond, style=filled]
  711 [label="State 711\n\l284 enum-head: enum-key attribute-specifier-seq enum-head-name •\l288          | enum-key attribute-specifier-seq enum-head-name • enum-base\l752 opaque-enum-declaration: enum-key attribute-specifier-seq enum-head-name • SEMICOLON\l754                        | enum-key attribute-specifier-seq enum-head-name • enum-base SEMICOLON\l"]
  711 -> 1203 [style=solid label="SEMICOLON"]
  711 -> 305 [style=solid label="COLON"]
  711 -> 1204 [style=dashed label="enum-base"]
  711 -> "711R284" [style=solid]
 "711R284" [label="R284", fillcolor=3, shape=diamond, style=filled]
  712 [label="State 712\n\l751 opaque-enum-declaration: enum-key enum-head-name SEMICOLON •\l"]
  712 -> "712R751" [style=solid]
 "712R751" [label="R751", fillcolor=3, shape=diamond, style=filled]
  713 [label="State 713\n\l287 enum-head: enum-key enum-head-name enum-base •\l753 opaque-enum-declaration: enum-key enum-head-name enum-base • SEMICOLON\l"]
  713 -> 1205 [style=solid label="SEMICOLON"]
  713 -> "713R287" [style=solid]
 "713R287" [label="R287", fillcolor=3, shape=diamond, style=filled]
  714 [label="State 714\n\l289 enum-head-name: nested-name-specifier IDENTIFIER •\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l"]
  714 -> 722 [style=solid label="SCOPE"]
  714 -> "714R289" [style=solid]
 "714R289" [label="R289", fillcolor=3, shape=diamond, style=filled]
  714 -> "714R1052" [label="[LESS]", style=solid]
 "714R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  715 [label="State 715\n\l231 deduction-guide: explicit-specifier template-name OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN DEREF simple-template-id SEMICOLON\l"]
  715 -> 162 [style=solid label="IDENTIFIER"]
  715 -> 4 [style=solid label="ALIGNAS"]
  715 -> 730 [style=solid label="ELLIPSIS"]
  715 -> 9 [style=solid label="SCOPE"]
  715 -> 10 [style=solid label="OPEN_SQUARE"]
  715 -> 11 [style=solid label="VIRTUAL"]
  715 -> 12 [style=solid label="CLASS"]
  715 -> 13 [style=solid label="STRUCT"]
  715 -> 14 [style=solid label="UNION"]
  715 -> 18 [style=solid label="CONST"]
  715 -> 19 [style=solid label="VOLATILE"]
  715 -> 20 [style=solid label="FRIEND"]
  715 -> 21 [style=solid label="TYPEDEF"]
  715 -> 22 [style=solid label="CONSTEXPR"]
  715 -> 23 [style=solid label="CONSTEVAL"]
  715 -> 24 [style=solid label="CONSTINIT"]
  715 -> 258 [style=solid label="INLINE"]
  715 -> 26 [style=solid label="DECLTYPE"]
  715 -> 27 [style=solid label="ENUM"]
  715 -> 259 [style=solid label="EXTERN"]
  715 -> 29 [style=solid label="EXPLICIT"]
  715 -> 471 [style=solid label="THIS"]
  715 -> 36 [style=solid label="AUTO"]
  715 -> 37 [style=solid label="CHAR"]
  715 -> 38 [style=solid label="CHAR8_T"]
  715 -> 39 [style=solid label="CHAR16_T"]
  715 -> 40 [style=solid label="CHAR32_T"]
  715 -> 41 [style=solid label="WCHAR_T"]
  715 -> 42 [style=solid label="BOOL"]
  715 -> 43 [style=solid label="SHORT"]
  715 -> 44 [style=solid label="INT"]
  715 -> 45 [style=solid label="LONG"]
  715 -> 46 [style=solid label="SIGNED"]
  715 -> 47 [style=solid label="UNSIGNED"]
  715 -> 48 [style=solid label="FLOAT"]
  715 -> 49 [style=solid label="DOUBLE"]
  715 -> 50 [style=solid label="VOID"]
  715 -> 52 [style=solid label="STATIC"]
  715 -> 53 [style=solid label="THREAD_LOCAL"]
  715 -> 54 [style=solid label="MUTABLE"]
  715 -> 55 [style=solid label="TYPENAME"]
  715 -> 57 [style=dashed label="alignment-specifier"]
  715 -> 60 [style=dashed label="attribute-specifier"]
  715 -> 473 [style=dashed label="attribute-specifier-seq"]
  715 -> 63 [style=dashed label="class-head"]
  715 -> 64 [style=dashed label="class-key"]
  715 -> 65 [style=dashed label="class-name"]
  715 -> 66 [style=dashed label="class-specifier"]
  715 -> 67 [style=dashed label="concept-name"]
  715 -> 69 [style=dashed label="cv-qualifier"]
  715 -> 70 [style=dashed label="decl-specifier"]
  715 -> 474 [style=dashed label="decl-specifier-seq"]
  715 -> 76 [style=dashed label="decltype-specifier"]
  715 -> 78 [style=dashed label="defining-type-specifier"]
  715 -> 79 [style=dashed label="elaborated-enum-specifier"]
  715 -> 80 [style=dashed label="elaborated-type-specifier"]
  715 -> 82 [style=dashed label="enum-head"]
  715 -> 263 [style=dashed label="enum-key"]
  715 -> 84 [style=dashed label="enum-name"]
  715 -> 85 [style=dashed label="enum-specifier"]
  715 -> 264 [style=dashed label="explicit-specifier"]
  715 -> 91 [style=dashed label="function-specifier"]
  715 -> 99 [style=dashed label="namespace-alias"]
  715 -> 102 [style=dashed label="namespace-name"]
  715 -> 212 [style=dashed label="nested-name-specifier"]
  715 -> 731 [style=dashed label="parameter-declaration"]
  715 -> 1206 [style=dashed label="parameter-declaration-clause"]
  715 -> 733 [style=dashed label="parameter-declaration-list"]
  715 -> 109 [style=dashed label="placeholder-type-specifier"]
  715 -> 141 [style=dashed label="simple-template-id"]
  715 -> 115 [style=dashed label="simple-type-specifier"]
  715 -> 117 [style=dashed label="storage-class-specifier"]
  715 -> 215 [style=dashed label="template-name"]
  715 -> 123 [style=dashed label="type-constraint"]
  715 -> 124 [style=dashed label="type-name"]
  715 -> 125 [style=dashed label="type-specifier"]
  715 -> 126 [style=dashed label="typedef-name"]
  715 -> 127 [style=dashed label="typename-specifier"]
  716 [label="State 716\n\l224 declaration-seq: declaration-seq • declaration\l1063 translation-unit: global-module-fragment module-declaration declaration-seq •\l1067                 | global-module-fragment module-declaration declaration-seq • private-module-fragment\l"]
  716 -> 1 [style=solid label="USING"]
  716 -> 2 [style=solid label="IDENTIFIER"]
  716 -> 3 [style=solid label="SEMICOLON"]
  716 -> 4 [style=solid label="ALIGNAS"]
  716 -> 5 [style=solid label="OPEN_PAREN"]
  716 -> 6 [style=solid label="ELLIPSIS"]
  716 -> 7 [style=solid label="AND"]
  716 -> 8 [style=solid label="ASM"]
  716 -> 9 [style=solid label="SCOPE"]
  716 -> 10 [style=solid label="OPEN_SQUARE"]
  716 -> 11 [style=solid label="VIRTUAL"]
  716 -> 12 [style=solid label="CLASS"]
  716 -> 13 [style=solid label="STRUCT"]
  716 -> 14 [style=solid label="UNION"]
  716 -> 15 [style=solid label="TEMPLATE"]
  716 -> 16 [style=solid label="AND_AND"]
  716 -> 17 [style=solid label="OPERATOR"]
  716 -> 18 [style=solid label="CONST"]
  716 -> 19 [style=solid label="VOLATILE"]
  716 -> 20 [style=solid label="FRIEND"]
  716 -> 21 [style=solid label="TYPEDEF"]
  716 -> 22 [style=solid label="CONSTEXPR"]
  716 -> 23 [style=solid label="CONSTEVAL"]
  716 -> 24 [style=solid label="CONSTINIT"]
  716 -> 25 [style=solid label="INLINE"]
  716 -> 26 [style=solid label="DECLTYPE"]
  716 -> 27 [style=solid label="ENUM"]
  716 -> 28 [style=solid label="EXTERN"]
  716 -> 29 [style=solid label="EXPLICIT"]
  716 -> 157 [style=solid label="EXPORT"]
  716 -> 31 [style=solid label="MULT"]
  716 -> 316 [style=solid label="MODULE"]
  716 -> 33 [style=solid label="IMPORT"]
  716 -> 34 [style=solid label="NAMESPACE"]
  716 -> 35 [style=solid label="COMPL"]
  716 -> 36 [style=solid label="AUTO"]
  716 -> 37 [style=solid label="CHAR"]
  716 -> 38 [style=solid label="CHAR8_T"]
  716 -> 39 [style=solid label="CHAR16_T"]
  716 -> 40 [style=solid label="CHAR32_T"]
  716 -> 41 [style=solid label="WCHAR_T"]
  716 -> 42 [style=solid label="BOOL"]
  716 -> 43 [style=solid label="SHORT"]
  716 -> 44 [style=solid label="INT"]
  716 -> 45 [style=solid label="LONG"]
  716 -> 46 [style=solid label="SIGNED"]
  716 -> 47 [style=solid label="UNSIGNED"]
  716 -> 48 [style=solid label="FLOAT"]
  716 -> 49 [style=solid label="DOUBLE"]
  716 -> 50 [style=solid label="VOID"]
  716 -> 51 [style=solid label="STATIC_ASSERT"]
  716 -> 52 [style=solid label="STATIC"]
  716 -> 53 [style=solid label="THREAD_LOCAL"]
  716 -> 54 [style=solid label="MUTABLE"]
  716 -> 55 [style=solid label="TYPENAME"]
  716 -> 56 [style=dashed label="alias-declaration"]
  716 -> 57 [style=dashed label="alignment-specifier"]
  716 -> 58 [style=dashed label="asm-declaration"]
  716 -> 59 [style=dashed label="attribute-declaration"]
  716 -> 60 [style=dashed label="attribute-specifier"]
  716 -> 61 [style=dashed label="attribute-specifier-seq"]
  716 -> 62 [style=dashed label="block-declaration"]
  716 -> 63 [style=dashed label="class-head"]
  716 -> 64 [style=dashed label="class-key"]
  716 -> 65 [style=dashed label="class-name"]
  716 -> 66 [style=dashed label="class-specifier"]
  716 -> 67 [style=dashed label="concept-name"]
  716 -> 68 [style=dashed label="conversion-function-id"]
  716 -> 69 [style=dashed label="cv-qualifier"]
  716 -> 70 [style=dashed label="decl-specifier"]
  716 -> 71 [style=dashed label="decl-specifier-seq"]
  716 -> 285 [style=dashed label="declaration"]
  716 -> 74 [style=dashed label="declarator"]
  716 -> 75 [style=dashed label="declarator-id"]
  716 -> 76 [style=dashed label="decltype-specifier"]
  716 -> 77 [style=dashed label="deduction-guide"]
  716 -> 78 [style=dashed label="defining-type-specifier"]
  716 -> 79 [style=dashed label="elaborated-enum-specifier"]
  716 -> 80 [style=dashed label="elaborated-type-specifier"]
  716 -> 81 [style=dashed label="empty-declaration"]
  716 -> 82 [style=dashed label="enum-head"]
  716 -> 83 [style=dashed label="enum-key"]
  716 -> 84 [style=dashed label="enum-name"]
  716 -> 85 [style=dashed label="enum-specifier"]
  716 -> 86 [style=dashed label="explicit-instantiation"]
  716 -> 87 [style=dashed label="explicit-specialization"]
  716 -> 88 [style=dashed label="explicit-specifier"]
  716 -> 89 [style=dashed label="export-declaration"]
  716 -> 90 [style=dashed label="function-definition"]
  716 -> 91 [style=dashed label="function-specifier"]
  716 -> 93 [style=dashed label="id-expression"]
  716 -> 94 [style=dashed label="linkage-specification"]
  716 -> 95 [style=dashed label="literal-operator-id"]
  716 -> 97 [style=dashed label="module-import-declaration"]
  716 -> 98 [style=dashed label="named-namespace-definition"]
  716 -> 99 [style=dashed label="namespace-alias"]
  716 -> 100 [style=dashed label="namespace-alias-definition"]
  716 -> 101 [style=dashed label="namespace-definition"]
  716 -> 102 [style=dashed label="namespace-name"]
  716 -> 103 [style=dashed label="nested-name-specifier"]
  716 -> 104 [style=dashed label="nested-namespace-definition"]
  716 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  716 -> 106 [style=dashed label="noptr-declarator"]
  716 -> 107 [style=dashed label="opaque-enum-declaration"]
  716 -> 108 [style=dashed label="operator-function-id"]
  716 -> 109 [style=dashed label="placeholder-type-specifier"]
  716 -> 1207 [style=dashed label="private-module-fragment"]
  716 -> 110 [style=dashed label="ptr-declarator"]
  716 -> 111 [style=dashed label="ptr-operator"]
  716 -> 112 [style=dashed label="qualified-id"]
  716 -> 113 [style=dashed label="simple-declaration"]
  716 -> 114 [style=dashed label="simple-template-id"]
  716 -> 115 [style=dashed label="simple-type-specifier"]
  716 -> 116 [style=dashed label="static_assert-declaration"]
  716 -> 117 [style=dashed label="storage-class-specifier"]
  716 -> 118 [style=dashed label="template-declaration"]
  716 -> 119 [style=dashed label="template-head"]
  716 -> 120 [style=dashed label="template-id"]
  716 -> 121 [style=dashed label="template-name"]
  716 -> 123 [style=dashed label="type-constraint"]
  716 -> 124 [style=dashed label="type-name"]
  716 -> 125 [style=dashed label="type-specifier"]
  716 -> 126 [style=dashed label="typedef-name"]
  716 -> 127 [style=dashed label="typename-specifier"]
  716 -> 128 [style=dashed label="unnamed-namespace-definition"]
  716 -> 129 [style=dashed label="unqualified-id"]
  716 -> 130 [style=dashed label="using-declaration"]
  716 -> 131 [style=dashed label="using-directive"]
  716 -> 132 [style=dashed label="using-enum-declaration"]
  716 -> "716R1063" [style=solid]
 "716R1063" [label="R1063", fillcolor=3, shape=diamond, style=filled]
  717 [label="State 717\n\l1065 translation-unit: global-module-fragment module-declaration private-module-fragment •\l"]
  717 -> "717R1065" [style=solid]
 "717R1065" [label="R1065", fillcolor=3, shape=diamond, style=filled]
  718 [label="State 718\n\l1050 template-id: literal-operator-id LESS GREATER •\l"]
  718 -> "718R1050" [style=solid]
 "718R1050" [label="R1050", fillcolor=3, shape=diamond, style=filled]
  719 [label="State 719\n\l1041 template-argument-list: template-argument-list • COMMA template-argument\l1042                       | template-argument-list • COMMA template-argument ELLIPSIS\l1051 template-id: literal-operator-id LESS template-argument-list • GREATER\l"]
  719 -> 1129 [style=solid label="COMMA"]
  719 -> 1208 [style=solid label="GREATER"]
  720 [label="State 720\n\l886 private-module-fragment: MODULE COLON • PRIVATE SEMICOLON\l887                        | MODULE COLON • PRIVATE SEMICOLON declaration-seq\l"]
  720 -> 1209 [style=solid label="PRIVATE"]
  721 [label="State 721\n\l1068 translation-unit: module-declaration declaration-seq private-module-fragment •\l"]
  721 -> "721R1068" [style=solid]
 "721R1068" [label="R1068", fillcolor=3, shape=diamond, style=filled]
  722 [label="State 722\n\l659 nested-name-specifier: nested-name-specifier IDENTIFIER SCOPE •\l"]
  722 -> "722R659" [style=solid]
 "722R659" [label="R659", fillcolor=3, shape=diamond, style=filled]
  723 [label="State 723\n\l1052 template-name: IDENTIFIER •\l1140 unqualified-id: IDENTIFIER •\l"]
  723 -> "723R1052" [label="[LESS]", style=solid]
 "723R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  723 -> "723R1140d" [label="[LESS]", style=solid]
 "723R1140d" [label="R1140", fillcolor=5, shape=diamond, style=filled]
  723 -> "723R1140" [style=solid]
 "723R1140" [label="R1140", fillcolor=3, shape=diamond, style=filled]
  724 [label="State 724\n\l661 nested-name-specifier: nested-name-specifier TEMPLATE simple-template-id • SCOPE\l987 simple-type-specifier: nested-name-specifier TEMPLATE simple-template-id •\l1047 template-id: simple-template-id •\l"]
  724 -> 1210 [style=solid label="SCOPE"]
  724 -> "724R987d" [label="[SCOPE]", style=solid]
 "724R987d" [label="R987", fillcolor=5, shape=diamond, style=filled]
  724 -> "724R987" [style=solid]
 "724R987" [label="R987", fillcolor=3, shape=diamond, style=filled]
  724 -> "724R1047d" [label="[EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, COMMA, OPEN_SQUARE, COLON, OPEN_BRACE, AND_AND, GREATER, MULT]", style=solid]
 "724R1047d" [label="R1047", fillcolor=5, shape=diamond, style=filled]
  724 -> "724R1047" [label="[PLUS, MINUS, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, CLOSE_SQUARE, CLOSE_BRACE, FINAL, SPACESHIP, QUERY, OR_OR, DEREF, DOT, EQ_EQ, NOT_EQ, XOR, LESS, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, REQUIRES, PLUS_PLUS, MINUS_MINUS, OVERRIDE]", style=solid]
 "724R1047" [label="R1047", fillcolor=3, shape=diamond, style=filled]
  725 [label="State 725\n\l910 qualified-id: nested-name-specifier TEMPLATE unqualified-id •\l"]
  725 -> "725R910" [style=solid]
 "725R910" [label="R910", fillcolor=3, shape=diamond, style=filled]
  726 [label="State 726\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l902 ptr-operator: nested-name-specifier MULT attribute-specifier-seq •\l904             | nested-name-specifier MULT attribute-specifier-seq • cv-qualifier-seq\l"]
  726 -> 4 [style=solid label="ALIGNAS"]
  726 -> 10 [style=solid label="OPEN_SQUARE"]
  726 -> 18 [style=solid label="CONST"]
  726 -> 19 [style=solid label="VOLATILE"]
  726 -> 57 [style=dashed label="alignment-specifier"]
  726 -> 260 [style=dashed label="attribute-specifier"]
  726 -> 233 [style=dashed label="cv-qualifier"]
  726 -> 1211 [style=dashed label="cv-qualifier-seq"]
  726 -> "726R902d" [label="[ALIGNAS, OPEN_SQUARE, CONST, VOLATILE]", style=solid]
 "726R902d" [label="R902", fillcolor=5, shape=diamond, style=filled]
  726 -> "726R902" [style=solid]
 "726R902" [label="R902", fillcolor=3, shape=diamond, style=filled]
  727 [label="State 727\n\l903 ptr-operator: nested-name-specifier MULT cv-qualifier-seq •\l"]
  727 -> "727R903" [style=solid]
 "727R903" [label="R903", fillcolor=3, shape=diamond, style=filled]
  728 [label="State 728\n\l1072 type-constraint: nested-name-specifier concept-name LESS • GREATER\l1074                | nested-name-specifier concept-name LESS • template-argument-list GREATER\l"]
  728 -> 356 [style=solid label="PLUS"]
  728 -> 357 [style=solid label="MINUS"]
  728 -> 2 [style=solid label="IDENTIFIER"]
  728 -> 358 [style=solid label="OPEN_PAREN"]
  728 -> 359 [style=solid label="AND"]
  728 -> 360 [style=solid label="SCOPE"]
  728 -> 361 [style=solid label="OPEN_SQUARE"]
  728 -> 362 [style=solid label="CO_AWAIT"]
  728 -> 363 [style=solid label="ZERO_LB"]
  728 -> 364 [style=solid label="ZERO_HB"]
  728 -> 365 [style=solid label="SINGLE_QUOTE"]
  728 -> 366 [style=solid label="FALSE"]
  728 -> 367 [style=solid label="TRUE"]
  728 -> 12 [style=solid label="CLASS"]
  728 -> 13 [style=solid label="STRUCT"]
  728 -> 14 [style=solid label="UNION"]
  728 -> 368 [style=solid label="NOEXCEPT"]
  728 -> 17 [style=solid label="OPERATOR"]
  728 -> 18 [style=solid label="CONST"]
  728 -> 19 [style=solid label="VOLATILE"]
  728 -> 26 [style=solid label="DECLTYPE"]
  728 -> 369 [style=solid label="DELETE"]
  728 -> 370 [style=solid label="DOT"]
  728 -> 135 [style=solid label="ENUM"]
  728 -> 184 [style=solid label="UNICODE_8"]
  728 -> 1212 [style=solid label="GREATER"]
  728 -> 371 [style=solid label="MULT"]
  728 -> 199 [style=solid label="DOUBLE_QUOTE"]
  728 -> 372 [style=solid label="ZERO_LX"]
  728 -> 373 [style=solid label="ZERO_HX"]
  728 -> 374 [style=solid label="REQUIRES"]
  728 -> 375 [style=solid label="NEW"]
  728 -> 376 [style=solid label="COMPL"]
  728 -> 377 [style=solid label="NOT"]
  728 -> 378 [style=solid label="PLUS_PLUS"]
  728 -> 379 [style=solid label="MINUS_MINUS"]
  728 -> 380 [style=solid label="THIS"]
  728 -> 36 [style=solid label="AUTO"]
  728 -> 381 [style=solid label="NULLPTR"]
  728 -> 382 [style=solid label="DYNAMIC_CAST"]
  728 -> 383 [style=solid label="STATIC_CAST"]
  728 -> 384 [style=solid label="REINTERPRET_CAST"]
  728 -> 385 [style=solid label="CONST_CAST"]
  728 -> 386 [style=solid label="TYPEID"]
  728 -> 37 [style=solid label="CHAR"]
  728 -> 38 [style=solid label="CHAR8_T"]
  728 -> 39 [style=solid label="CHAR16_T"]
  728 -> 40 [style=solid label="CHAR32_T"]
  728 -> 41 [style=solid label="WCHAR_T"]
  728 -> 42 [style=solid label="BOOL"]
  728 -> 43 [style=solid label="SHORT"]
  728 -> 44 [style=solid label="INT"]
  728 -> 45 [style=solid label="LONG"]
  728 -> 46 [style=solid label="SIGNED"]
  728 -> 47 [style=solid label="UNSIGNED"]
  728 -> 48 [style=solid label="FLOAT"]
  728 -> 49 [style=solid label="DOUBLE"]
  728 -> 50 [style=solid label="VOID"]
  728 -> 55 [style=solid label="TYPENAME"]
  728 -> 387 [style=solid label="SIZEOF"]
  728 -> 388 [style=solid label="ALIGNOF"]
  728 -> 389 [style=solid label="'0'"]
  728 -> 390 [style=solid label="'1'"]
  728 -> 391 [style=solid label="'2'"]
  728 -> 392 [style=solid label="'3'"]
  728 -> 393 [style=solid label="'4'"]
  728 -> 394 [style=solid label="'5'"]
  728 -> 395 [style=solid label="'6'"]
  728 -> 396 [style=solid label="'7'"]
  728 -> 397 [style=solid label="'8'"]
  728 -> 398 [style=solid label="'9'"]
  728 -> 205 [style=solid label="'u'"]
  728 -> 206 [style=solid label="'U'"]
  728 -> 207 [style=solid label="'L'"]
  728 -> 208 [style=solid label="'R'"]
  728 -> 399 [style=dashed label="additive-expression"]
  728 -> 400 [style=dashed label="and-expression"]
  728 -> 401 [style=dashed label="await-expression"]
  728 -> 402 [style=dashed label="binary-literal"]
  728 -> 403 [style=dashed label="boolean-literal"]
  728 -> 404 [style=dashed label="cast-expression"]
  728 -> 405 [style=dashed label="character-literal"]
  728 -> 209 [style=dashed label="class-key"]
  728 -> 65 [style=dashed label="class-name"]
  728 -> 406 [style=dashed label="compare-expression"]
  728 -> 67 [style=dashed label="concept-name"]
  728 -> 407 [style=dashed label="conditional-expression"]
  728 -> 635 [style=dashed label="constant-expression"]
  728 -> 68 [style=dashed label="conversion-function-id"]
  728 -> 69 [style=dashed label="cv-qualifier"]
  728 -> 409 [style=dashed label="decimal-floating-point-literal"]
  728 -> 410 [style=dashed label="decimal-literal"]
  728 -> 76 [style=dashed label="decltype-specifier"]
  728 -> 411 [style=dashed label="delete-expression"]
  728 -> 412 [style=dashed label="digit"]
  728 -> 413 [style=dashed label="digit-sequence"]
  728 -> 79 [style=dashed label="elaborated-enum-specifier"]
  728 -> 80 [style=dashed label="elaborated-type-specifier"]
  728 -> 414 [style=dashed label="encoding-prefix"]
  728 -> 84 [style=dashed label="enum-name"]
  728 -> 415 [style=dashed label="equality-expression"]
  728 -> 416 [style=dashed label="exclusive-or-expression"]
  728 -> 417 [style=dashed label="floating-point-literal"]
  728 -> 418 [style=dashed label="fold-expression"]
  728 -> 419 [style=dashed label="fractional-constant"]
  728 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  728 -> 421 [style=dashed label="hexadecimal-literal"]
  728 -> 422 [style=dashed label="hexadecimal-prefix"]
  728 -> 636 [style=dashed label="id-expression"]
  728 -> 424 [style=dashed label="inclusive-or-expression"]
  728 -> 425 [style=dashed label="integer-literal"]
  728 -> 426 [style=dashed label="lambda-expression"]
  728 -> 427 [style=dashed label="lambda-introducer"]
  728 -> 428 [style=dashed label="literal"]
  728 -> 95 [style=dashed label="literal-operator-id"]
  728 -> 429 [style=dashed label="logical-and-expression"]
  728 -> 430 [style=dashed label="logical-or-expression"]
  728 -> 431 [style=dashed label="multiplicative-expression"]
  728 -> 99 [style=dashed label="namespace-alias"]
  728 -> 102 [style=dashed label="namespace-name"]
  728 -> 432 [style=dashed label="nested-name-specifier"]
  728 -> 433 [style=dashed label="new-expression"]
  728 -> 434 [style=dashed label="noexcept-expression"]
  728 -> 435 [style=dashed label="nonzero-digit"]
  728 -> 436 [style=dashed label="octal-literal"]
  728 -> 108 [style=dashed label="operator-function-id"]
  728 -> 109 [style=dashed label="placeholder-type-specifier"]
  728 -> 437 [style=dashed label="pm-expression"]
  728 -> 438 [style=dashed label="pointer-literal"]
  728 -> 439 [style=dashed label="postfix-expression"]
  728 -> 440 [style=dashed label="primary-expression"]
  728 -> 112 [style=dashed label="qualified-id"]
  728 -> 441 [style=dashed label="relational-expression"]
  728 -> 442 [style=dashed label="requires-expression"]
  728 -> 443 [style=dashed label="shift-expression"]
  728 -> 114 [style=dashed label="simple-template-id"]
  728 -> 444 [style=dashed label="simple-type-specifier"]
  728 -> 445 [style=dashed label="string-literal"]
  728 -> 637 [style=dashed label="template-argument"]
  728 -> 1213 [style=dashed label="template-argument-list"]
  728 -> 120 [style=dashed label="template-id"]
  728 -> 215 [style=dashed label="template-name"]
  728 -> 123 [style=dashed label="type-constraint"]
  728 -> 639 [style=dashed label="type-id"]
  728 -> 124 [style=dashed label="type-name"]
  728 -> 216 [style=dashed label="type-specifier"]
  728 -> 447 [style=dashed label="type-specifier-seq"]
  728 -> 126 [style=dashed label="typedef-name"]
  728 -> 448 [style=dashed label="typename-specifier"]
  728 -> 449 [style=dashed label="unary-expression"]
  728 -> 450 [style=dashed label="unary-operator"]
  728 -> 129 [style=dashed label="unqualified-id"]
  728 -> 451 [style=dashed label="user-defined-character-literal"]
  728 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  728 -> 453 [style=dashed label="user-defined-integer-literal"]
  728 -> 454 [style=dashed label="user-defined-literal"]
  728 -> 455 [style=dashed label="user-defined-string-literal"]
  729 [label="State 729\n\l660 nested-name-specifier: nested-name-specifier simple-template-id SCOPE •\l"]
  729 -> "729R660" [style=solid]
 "729R660" [label="R660", fillcolor=3, shape=diamond, style=filled]
  730 [label="State 730\n\l828 parameter-declaration-clause: ELLIPSIS •\l"]
  730 -> "730R828" [style=solid]
 "730R828" [label="R828", fillcolor=3, shape=diamond, style=filled]
  731 [label="State 731\n\l830 parameter-declaration-list: parameter-declaration •\l"]
  731 -> "731R830" [style=solid]
 "731R830" [label="R830", fillcolor=3, shape=diamond, style=filled]
  732 [label="State 732\n\l832 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN\l833                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN cv-qualifier-seq\l834                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN ref-qualifier\l835                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN cv-qualifier-seq ref-qualifier\l836                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN noexcept-specifier\l837                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN cv-qualifier-seq noexcept-specifier\l838                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN ref-qualifier noexcept-specifier\l839                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN cv-qualifier-seq ref-qualifier noexcept-specifier\l840                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN attribute-specifier-seq\l841                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN cv-qualifier-seq attribute-specifier-seq\l842                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN ref-qualifier attribute-specifier-seq\l843                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN cv-qualifier-seq ref-qualifier attribute-specifier-seq\l844                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN noexcept-specifier attribute-specifier-seq\l845                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN cv-qualifier-seq noexcept-specifier attribute-specifier-seq\l846                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN ref-qualifier noexcept-specifier attribute-specifier-seq\l847                          | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq\l"]
  732 -> 1214 [style=solid label="CLOSE_PAREN"]
  733 [label="State 733\n\l826 parameter-declaration-clause: parameter-declaration-list •\l827                             | parameter-declaration-list • ELLIPSIS\l829                             | parameter-declaration-list • COMMA ELLIPSIS\l831 parameter-declaration-list: parameter-declaration-list • COMMA parameter-declaration\l"]
  733 -> 1215 [style=solid label="ELLIPSIS"]
  733 -> 1216 [style=solid label="COMMA"]
  733 -> "733R826" [style=solid]
 "733R826" [label="R826", fillcolor=3, shape=diamond, style=filled]
  734 [label="State 734\n\l724 noptr-declarator: noptr-declarator OPEN_SQUARE CLOSE_SQUARE •\l726                 | noptr-declarator OPEN_SQUARE CLOSE_SQUARE • attribute-specifier-seq\l"]
  734 -> 4 [style=solid label="ALIGNAS"]
  734 -> 10 [style=solid label="OPEN_SQUARE"]
  734 -> 57 [style=dashed label="alignment-specifier"]
  734 -> 60 [style=dashed label="attribute-specifier"]
  734 -> 1217 [style=dashed label="attribute-specifier-seq"]
  734 -> "734R724d" [label="[OPEN_SQUARE]", style=solid]
 "734R724d" [label="R724", fillcolor=5, shape=diamond, style=filled]
  734 -> "734R724" [style=solid]
 "734R724" [label="R724", fillcolor=3, shape=diamond, style=filled]
  735 [label="State 735\n\l725 noptr-declarator: noptr-declarator OPEN_SQUARE constant-expression • CLOSE_SQUARE\l727                 | noptr-declarator OPEN_SQUARE constant-expression • CLOSE_SQUARE attribute-specifier-seq\l"]
  735 -> 1218 [style=solid label="CLOSE_SQUARE"]
  736 [label="State 736\n\l1059 trailing-return-type: DEREF • type-id\l"]
  736 -> 162 [style=solid label="IDENTIFIER"]
  736 -> 9 [style=solid label="SCOPE"]
  736 -> 12 [style=solid label="CLASS"]
  736 -> 13 [style=solid label="STRUCT"]
  736 -> 14 [style=solid label="UNION"]
  736 -> 18 [style=solid label="CONST"]
  736 -> 19 [style=solid label="VOLATILE"]
  736 -> 26 [style=solid label="DECLTYPE"]
  736 -> 135 [style=solid label="ENUM"]
  736 -> 36 [style=solid label="AUTO"]
  736 -> 37 [style=solid label="CHAR"]
  736 -> 38 [style=solid label="CHAR8_T"]
  736 -> 39 [style=solid label="CHAR16_T"]
  736 -> 40 [style=solid label="CHAR32_T"]
  736 -> 41 [style=solid label="WCHAR_T"]
  736 -> 42 [style=solid label="BOOL"]
  736 -> 43 [style=solid label="SHORT"]
  736 -> 44 [style=solid label="INT"]
  736 -> 45 [style=solid label="LONG"]
  736 -> 46 [style=solid label="SIGNED"]
  736 -> 47 [style=solid label="UNSIGNED"]
  736 -> 48 [style=solid label="FLOAT"]
  736 -> 49 [style=solid label="DOUBLE"]
  736 -> 50 [style=solid label="VOID"]
  736 -> 55 [style=solid label="TYPENAME"]
  736 -> 209 [style=dashed label="class-key"]
  736 -> 65 [style=dashed label="class-name"]
  736 -> 67 [style=dashed label="concept-name"]
  736 -> 69 [style=dashed label="cv-qualifier"]
  736 -> 76 [style=dashed label="decltype-specifier"]
  736 -> 79 [style=dashed label="elaborated-enum-specifier"]
  736 -> 80 [style=dashed label="elaborated-type-specifier"]
  736 -> 84 [style=dashed label="enum-name"]
  736 -> 99 [style=dashed label="namespace-alias"]
  736 -> 102 [style=dashed label="namespace-name"]
  736 -> 212 [style=dashed label="nested-name-specifier"]
  736 -> 109 [style=dashed label="placeholder-type-specifier"]
  736 -> 141 [style=dashed label="simple-template-id"]
  736 -> 115 [style=dashed label="simple-type-specifier"]
  736 -> 215 [style=dashed label="template-name"]
  736 -> 123 [style=dashed label="type-constraint"]
  736 -> 1219 [style=dashed label="type-id"]
  736 -> 124 [style=dashed label="type-name"]
  736 -> 216 [style=dashed label="type-specifier"]
  736 -> 447 [style=dashed label="type-specifier-seq"]
  736 -> 126 [style=dashed label="typedef-name"]
  736 -> 127 [style=dashed label="typename-specifier"]
  737 [label="State 737\n\l227 declarator: noptr-declarator parameters-and-qualifiers trailing-return-type •\l"]
  737 -> "737R227" [style=solid]
 "737R227" [label="R227", fillcolor=3, shape=diamond, style=filled]
  738 [label="State 738\n\l1048 template-id: operator-function-id LESS GREATER •\l"]
  738 -> "738R1048" [style=solid]
 "738R1048" [label="R1048", fillcolor=3, shape=diamond, style=filled]
  739 [label="State 739\n\l1041 template-argument-list: template-argument-list • COMMA template-argument\l1042                       | template-argument-list • COMMA template-argument ELLIPSIS\l1049 template-id: operator-function-id LESS template-argument-list • GREATER\l"]
  739 -> 1129 [style=solid label="COMMA"]
  739 -> 1220 [style=solid label="GREATER"]
  740 [label="State 740\n\l163 concept-name: IDENTIFIER •\l"]
  740 -> "740R163" [style=solid]
 "740R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  741 [label="State 741\n\l162 concept-definition: CONCEPT concept-name • EQ constraint-expression SEMICOLON\l"]
  741 -> 1221 [style=solid label="EQ"]
  742 [label="State 742\n\l232 deduction-guide: template-name OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN DEREF simple-template-id SEMICOLON\l"]
  742 -> 1222 [style=solid label="CLOSE_PAREN"]
  743 [label="State 743\n\l983 simple-template-id: template-name LESS GREATER •\l"]
  743 -> "743R983" [style=solid]
 "743R983" [label="R983", fillcolor=3, shape=diamond, style=filled]
  744 [label="State 744\n\l984 simple-template-id: template-name LESS template-argument-list • GREATER\l1041 template-argument-list: template-argument-list • COMMA template-argument\l1042                       | template-argument-list • COMMA template-argument ELLIPSIS\l"]
  744 -> 1129 [style=solid label="COMMA"]
  744 -> 1223 [style=solid label="GREATER"]
  745 [label="State 745\n\l850 placeholder-type-specifier: type-constraint DECLTYPE OPEN_PAREN • AUTO CLOSE_PAREN\l"]
  745 -> 1224 [style=solid label="AUTO"]
  746 [label="State 746\n\l 13 alias-declaration: USING IDENTIFIER EQ defining-type-id • SEMICOLON\l"]
  746 -> 1225 [style=solid label="SEMICOLON"]
  747 [label="State 747\n\l238 defining-type-specifier-seq: defining-type-specifier •\l239                            | defining-type-specifier • attribute-specifier-seq\l240                            | defining-type-specifier • defining-type-specifier-seq\l"]
  747 -> 162 [style=solid label="IDENTIFIER"]
  747 -> 4 [style=solid label="ALIGNAS"]
  747 -> 9 [style=solid label="SCOPE"]
  747 -> 10 [style=solid label="OPEN_SQUARE"]
  747 -> 12 [style=solid label="CLASS"]
  747 -> 13 [style=solid label="STRUCT"]
  747 -> 14 [style=solid label="UNION"]
  747 -> 18 [style=solid label="CONST"]
  747 -> 19 [style=solid label="VOLATILE"]
  747 -> 26 [style=solid label="DECLTYPE"]
  747 -> 27 [style=solid label="ENUM"]
  747 -> 36 [style=solid label="AUTO"]
  747 -> 37 [style=solid label="CHAR"]
  747 -> 38 [style=solid label="CHAR8_T"]
  747 -> 39 [style=solid label="CHAR16_T"]
  747 -> 40 [style=solid label="CHAR32_T"]
  747 -> 41 [style=solid label="WCHAR_T"]
  747 -> 42 [style=solid label="BOOL"]
  747 -> 43 [style=solid label="SHORT"]
  747 -> 44 [style=solid label="INT"]
  747 -> 45 [style=solid label="LONG"]
  747 -> 46 [style=solid label="SIGNED"]
  747 -> 47 [style=solid label="UNSIGNED"]
  747 -> 48 [style=solid label="FLOAT"]
  747 -> 49 [style=solid label="DOUBLE"]
  747 -> 50 [style=solid label="VOID"]
  747 -> 55 [style=solid label="TYPENAME"]
  747 -> 57 [style=dashed label="alignment-specifier"]
  747 -> 60 [style=dashed label="attribute-specifier"]
  747 -> 1226 [style=dashed label="attribute-specifier-seq"]
  747 -> 63 [style=dashed label="class-head"]
  747 -> 64 [style=dashed label="class-key"]
  747 -> 65 [style=dashed label="class-name"]
  747 -> 66 [style=dashed label="class-specifier"]
  747 -> 67 [style=dashed label="concept-name"]
  747 -> 69 [style=dashed label="cv-qualifier"]
  747 -> 76 [style=dashed label="decltype-specifier"]
  747 -> 747 [style=dashed label="defining-type-specifier"]
  747 -> 1227 [style=dashed label="defining-type-specifier-seq"]
  747 -> 79 [style=dashed label="elaborated-enum-specifier"]
  747 -> 80 [style=dashed label="elaborated-type-specifier"]
  747 -> 82 [style=dashed label="enum-head"]
  747 -> 263 [style=dashed label="enum-key"]
  747 -> 84 [style=dashed label="enum-name"]
  747 -> 85 [style=dashed label="enum-specifier"]
  747 -> 99 [style=dashed label="namespace-alias"]
  747 -> 102 [style=dashed label="namespace-name"]
  747 -> 212 [style=dashed label="nested-name-specifier"]
  747 -> 109 [style=dashed label="placeholder-type-specifier"]
  747 -> 141 [style=dashed label="simple-template-id"]
  747 -> 115 [style=dashed label="simple-type-specifier"]
  747 -> 215 [style=dashed label="template-name"]
  747 -> 123 [style=dashed label="type-constraint"]
  747 -> 124 [style=dashed label="type-name"]
  747 -> 125 [style=dashed label="type-specifier"]
  747 -> 126 [style=dashed label="typedef-name"]
  747 -> 127 [style=dashed label="typename-specifier"]
  747 -> "747R238d" [label="[IDENTIFIER, SCOPE, OPEN_SQUARE, DECLTYPE]", style=solid]
 "747R238d" [label="R238", fillcolor=5, shape=diamond, style=filled]
  747 -> "747R238" [style=solid]
 "747R238" [label="R238", fillcolor=3, shape=diamond, style=filled]
  748 [label="State 748\n\l233 defining-type-id: defining-type-specifier-seq •\l234                 | defining-type-specifier-seq • abstract-declarator\l"]
  748 -> 253 [style=solid label="IDENTIFIER"]
  748 -> 939 [style=solid label="OPEN_PAREN"]
  748 -> 940 [style=solid label="ELLIPSIS"]
  748 -> 7 [style=solid label="AND"]
  748 -> 9 [style=solid label="SCOPE"]
  748 -> 941 [style=solid label="OPEN_SQUARE"]
  748 -> 16 [style=solid label="AND_AND"]
  748 -> 134 [style=solid label="DECLTYPE"]
  748 -> 31 [style=solid label="MULT"]
  748 -> 1228 [style=dashed label="abstract-declarator"]
  748 -> 943 [style=dashed label="abstract-pack-declarator"]
  748 -> 65 [style=dashed label="class-name"]
  748 -> 138 [style=dashed label="decltype-specifier"]
  748 -> 84 [style=dashed label="enum-name"]
  748 -> 99 [style=dashed label="namespace-alias"]
  748 -> 102 [style=dashed label="namespace-name"]
  748 -> 517 [style=dashed label="nested-name-specifier"]
  748 -> 944 [style=dashed label="noptr-abstract-declarator"]
  748 -> 945 [style=dashed label="noptr-abstract-pack-declarator"]
  748 -> 946 [style=dashed label="parameters-and-qualifiers"]
  748 -> 947 [style=dashed label="ptr-abstract-declarator"]
  748 -> 948 [style=dashed label="ptr-operator"]
  748 -> 141 [style=dashed label="simple-template-id"]
  748 -> 142 [style=dashed label="template-name"]
  748 -> 143 [style=dashed label="type-name"]
  748 -> 126 [style=dashed label="typedef-name"]
  748 -> "748R233" [style=solid]
 "748R233" [label="R233", fillcolor=3, shape=diamond, style=filled]
  749 [label="State 749\n\l 14 alias-declaration: USING IDENTIFIER attribute-specifier-seq EQ • defining-type-id SEMICOLON\l"]
  749 -> 162 [style=solid label="IDENTIFIER"]
  749 -> 9 [style=solid label="SCOPE"]
  749 -> 12 [style=solid label="CLASS"]
  749 -> 13 [style=solid label="STRUCT"]
  749 -> 14 [style=solid label="UNION"]
  749 -> 18 [style=solid label="CONST"]
  749 -> 19 [style=solid label="VOLATILE"]
  749 -> 26 [style=solid label="DECLTYPE"]
  749 -> 27 [style=solid label="ENUM"]
  749 -> 36 [style=solid label="AUTO"]
  749 -> 37 [style=solid label="CHAR"]
  749 -> 38 [style=solid label="CHAR8_T"]
  749 -> 39 [style=solid label="CHAR16_T"]
  749 -> 40 [style=solid label="CHAR32_T"]
  749 -> 41 [style=solid label="WCHAR_T"]
  749 -> 42 [style=solid label="BOOL"]
  749 -> 43 [style=solid label="SHORT"]
  749 -> 44 [style=solid label="INT"]
  749 -> 45 [style=solid label="LONG"]
  749 -> 46 [style=solid label="SIGNED"]
  749 -> 47 [style=solid label="UNSIGNED"]
  749 -> 48 [style=solid label="FLOAT"]
  749 -> 49 [style=solid label="DOUBLE"]
  749 -> 50 [style=solid label="VOID"]
  749 -> 55 [style=solid label="TYPENAME"]
  749 -> 63 [style=dashed label="class-head"]
  749 -> 64 [style=dashed label="class-key"]
  749 -> 65 [style=dashed label="class-name"]
  749 -> 66 [style=dashed label="class-specifier"]
  749 -> 67 [style=dashed label="concept-name"]
  749 -> 69 [style=dashed label="cv-qualifier"]
  749 -> 76 [style=dashed label="decltype-specifier"]
  749 -> 1229 [style=dashed label="defining-type-id"]
  749 -> 747 [style=dashed label="defining-type-specifier"]
  749 -> 748 [style=dashed label="defining-type-specifier-seq"]
  749 -> 79 [style=dashed label="elaborated-enum-specifier"]
  749 -> 80 [style=dashed label="elaborated-type-specifier"]
  749 -> 82 [style=dashed label="enum-head"]
  749 -> 263 [style=dashed label="enum-key"]
  749 -> 84 [style=dashed label="enum-name"]
  749 -> 85 [style=dashed label="enum-specifier"]
  749 -> 99 [style=dashed label="namespace-alias"]
  749 -> 102 [style=dashed label="namespace-name"]
  749 -> 212 [style=dashed label="nested-name-specifier"]
  749 -> 109 [style=dashed label="placeholder-type-specifier"]
  749 -> 141 [style=dashed label="simple-template-id"]
  749 -> 115 [style=dashed label="simple-type-specifier"]
  749 -> 215 [style=dashed label="template-name"]
  749 -> 123 [style=dashed label="type-constraint"]
  749 -> 124 [style=dashed label="type-name"]
  749 -> 125 [style=dashed label="type-specifier"]
  749 -> 126 [style=dashed label="typedef-name"]
  749 -> 127 [style=dashed label="typename-specifier"]
  750 [label="State 750\n\l1172 using-directive: USING NAMESPACE namespace-name SEMICOLON •\l"]
  750 -> "750R1172" [style=solid]
 "750R1172" [label="R1172", fillcolor=3, shape=diamond, style=filled]
  751 [label="State 751\n\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l"]
  751 -> 722 [style=solid label="SCOPE"]
  751 -> "751R647" [style=solid]
 "751R647" [label="R647", fillcolor=3, shape=diamond, style=filled]
  751 -> "751R653d" [label="[SEMICOLON]", style=solid]
 "751R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  751 -> "751R1052" [label="[LESS]", style=solid]
 "751R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  752 [label="State 752\n\l1174 using-directive: USING NAMESPACE nested-name-specifier namespace-name • SEMICOLON\l"]
  752 -> 1230 [style=solid label="SEMICOLON"]
  753 [label="State 753\n\l1165 using-declarator: TYPENAME nested-name-specifier unqualified-id •\l"]
  753 -> "753R1165" [style=solid]
 "753R1165" [label="R1165", fillcolor=3, shape=diamond, style=filled]
  754 [label="State 754\n\l661 nested-name-specifier: nested-name-specifier TEMPLATE simple-template-id • SCOPE\l"]
  754 -> 1210 [style=solid label="SCOPE"]
  755 [label="State 755\n\l1169 using-declarator-list: using-declarator-list COMMA using-declarator •\l1170                      | using-declarator-list COMMA using-declarator • ELLIPSIS\l"]
  755 -> 1231 [style=solid label="ELLIPSIS"]
  755 -> "755R1169" [style=solid]
 "755R1169" [label="R1169", fillcolor=3, shape=diamond, style=filled]
  756 [label="State 756\n\l346 fold-expression: OPEN_PAREN ELLIPSIS • fold-operator cast-expression CLOSE_PAREN\l"]
  756 -> 1232 [style=solid label="PLUS"]
  756 -> 1233 [style=solid label="MINUS"]
  756 -> 1234 [style=solid label="EQ"]
  756 -> 1235 [style=solid label="AND"]
  756 -> 1236 [style=solid label="MULT_EQ"]
  756 -> 1237 [style=solid label="DIV_EQ"]
  756 -> 1238 [style=solid label="MOD_EQ"]
  756 -> 1239 [style=solid label="PLUS_EQ"]
  756 -> 1240 [style=solid label="MINUS_EQ"]
  756 -> 1241 [style=solid label="RSHIFT_EQ"]
  756 -> 1242 [style=solid label="LSHIFT_EQ"]
  756 -> 1243 [style=solid label="AND_EQ"]
  756 -> 1244 [style=solid label="XOR_EQ"]
  756 -> 1245 [style=solid label="OR_EQ"]
  756 -> 1246 [style=solid label="COMMA"]
  756 -> 1247 [style=solid label="AND_AND"]
  756 -> 1248 [style=solid label="OR_OR"]
  756 -> 1249 [style=solid label="EQ_EQ"]
  756 -> 1250 [style=solid label="NOT_EQ"]
  756 -> 1251 [style=solid label="XOR"]
  756 -> 1252 [style=solid label="LESS"]
  756 -> 1253 [style=solid label="GREATER"]
  756 -> 1254 [style=solid label="MULT"]
  756 -> 1255 [style=solid label="DIV"]
  756 -> 1256 [style=solid label="MOD"]
  756 -> 1257 [style=solid label="OR"]
  756 -> 1258 [style=solid label="LSHIFT"]
  756 -> 1259 [style=solid label="RSHIFT"]
  756 -> 1260 [style=solid label="LESS_EQ"]
  756 -> 1261 [style=solid label="GREATER_EQ"]
  756 -> 1262 [style=solid label="DOT_STAR"]
  756 -> 1263 [style=solid label="DEREF_STAR"]
  756 -> 1264 [style=dashed label="fold-operator"]
  757 [label="State 757\n\l345 fold-expression: OPEN_PAREN cast-expression • fold-operator ELLIPSIS CLOSE_PAREN\l347                | OPEN_PAREN cast-expression • fold-operator ELLIPSIS fold-operator cast-expression CLOSE_PAREN\l852 pm-expression: cast-expression •\l"]
  757 -> 1232 [style=solid label="PLUS"]
  757 -> 1233 [style=solid label="MINUS"]
  757 -> 1234 [style=solid label="EQ"]
  757 -> 1235 [style=solid label="AND"]
  757 -> 1236 [style=solid label="MULT_EQ"]
  757 -> 1237 [style=solid label="DIV_EQ"]
  757 -> 1238 [style=solid label="MOD_EQ"]
  757 -> 1239 [style=solid label="PLUS_EQ"]
  757 -> 1240 [style=solid label="MINUS_EQ"]
  757 -> 1241 [style=solid label="RSHIFT_EQ"]
  757 -> 1242 [style=solid label="LSHIFT_EQ"]
  757 -> 1243 [style=solid label="AND_EQ"]
  757 -> 1244 [style=solid label="XOR_EQ"]
  757 -> 1245 [style=solid label="OR_EQ"]
  757 -> 1246 [style=solid label="COMMA"]
  757 -> 1247 [style=solid label="AND_AND"]
  757 -> 1248 [style=solid label="OR_OR"]
  757 -> 1249 [style=solid label="EQ_EQ"]
  757 -> 1250 [style=solid label="NOT_EQ"]
  757 -> 1251 [style=solid label="XOR"]
  757 -> 1252 [style=solid label="LESS"]
  757 -> 1253 [style=solid label="GREATER"]
  757 -> 1254 [style=solid label="MULT"]
  757 -> 1255 [style=solid label="DIV"]
  757 -> 1256 [style=solid label="MOD"]
  757 -> 1257 [style=solid label="OR"]
  757 -> 1258 [style=solid label="LSHIFT"]
  757 -> 1259 [style=solid label="RSHIFT"]
  757 -> 1260 [style=solid label="LESS_EQ"]
  757 -> 1261 [style=solid label="GREATER_EQ"]
  757 -> 1262 [style=solid label="DOT_STAR"]
  757 -> 1263 [style=solid label="DEREF_STAR"]
  757 -> 1265 [style=dashed label="fold-operator"]
  757 -> "757R852d" [label="[PLUS, MINUS, EQ, AND, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, AND_AND, OR_OR, EQ_EQ, NOT_EQ, XOR, LESS, GREATER, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR]", style=solid]
 "757R852d" [label="R852", fillcolor=5, shape=diamond, style=filled]
  757 -> "757R852" [style=solid]
 "757R852" [label="R852", fillcolor=3, shape=diamond, style=filled]
  758 [label="State 758\n\l335 expression: expression • COMMA assignment-expression\l881 primary-expression: OPEN_PAREN expression • CLOSE_PAREN\l"]
  758 -> 1266 [style=solid label="CLOSE_PAREN"]
  758 -> 1029 [style=solid label="COMMA"]
  759 [label="State 759\n\l125 cast-expression: OPEN_PAREN type-id • CLOSE_PAREN cast-expression\l"]
  759 -> 1267 [style=solid label="CLOSE_PAREN"]
  760 [label="State 760\n\l241 delete-expression: SCOPE DELETE • cast-expression\l243                  | SCOPE DELETE • OPEN_SQUARE CLOSE_SQUARE cast-expression\l"]
  760 -> 356 [style=solid label="PLUS"]
  760 -> 357 [style=solid label="MINUS"]
  760 -> 2 [style=solid label="IDENTIFIER"]
  760 -> 358 [style=solid label="OPEN_PAREN"]
  760 -> 359 [style=solid label="AND"]
  760 -> 360 [style=solid label="SCOPE"]
  760 -> 1268 [style=solid label="OPEN_SQUARE"]
  760 -> 362 [style=solid label="CO_AWAIT"]
  760 -> 363 [style=solid label="ZERO_LB"]
  760 -> 364 [style=solid label="ZERO_HB"]
  760 -> 365 [style=solid label="SINGLE_QUOTE"]
  760 -> 366 [style=solid label="FALSE"]
  760 -> 367 [style=solid label="TRUE"]
  760 -> 368 [style=solid label="NOEXCEPT"]
  760 -> 17 [style=solid label="OPERATOR"]
  760 -> 26 [style=solid label="DECLTYPE"]
  760 -> 369 [style=solid label="DELETE"]
  760 -> 370 [style=solid label="DOT"]
  760 -> 184 [style=solid label="UNICODE_8"]
  760 -> 371 [style=solid label="MULT"]
  760 -> 199 [style=solid label="DOUBLE_QUOTE"]
  760 -> 372 [style=solid label="ZERO_LX"]
  760 -> 373 [style=solid label="ZERO_HX"]
  760 -> 374 [style=solid label="REQUIRES"]
  760 -> 375 [style=solid label="NEW"]
  760 -> 376 [style=solid label="COMPL"]
  760 -> 377 [style=solid label="NOT"]
  760 -> 378 [style=solid label="PLUS_PLUS"]
  760 -> 379 [style=solid label="MINUS_MINUS"]
  760 -> 380 [style=solid label="THIS"]
  760 -> 36 [style=solid label="AUTO"]
  760 -> 381 [style=solid label="NULLPTR"]
  760 -> 382 [style=solid label="DYNAMIC_CAST"]
  760 -> 383 [style=solid label="STATIC_CAST"]
  760 -> 384 [style=solid label="REINTERPRET_CAST"]
  760 -> 385 [style=solid label="CONST_CAST"]
  760 -> 386 [style=solid label="TYPEID"]
  760 -> 37 [style=solid label="CHAR"]
  760 -> 38 [style=solid label="CHAR8_T"]
  760 -> 39 [style=solid label="CHAR16_T"]
  760 -> 40 [style=solid label="CHAR32_T"]
  760 -> 41 [style=solid label="WCHAR_T"]
  760 -> 42 [style=solid label="BOOL"]
  760 -> 43 [style=solid label="SHORT"]
  760 -> 44 [style=solid label="INT"]
  760 -> 45 [style=solid label="LONG"]
  760 -> 46 [style=solid label="SIGNED"]
  760 -> 47 [style=solid label="UNSIGNED"]
  760 -> 48 [style=solid label="FLOAT"]
  760 -> 49 [style=solid label="DOUBLE"]
  760 -> 50 [style=solid label="VOID"]
  760 -> 55 [style=solid label="TYPENAME"]
  760 -> 387 [style=solid label="SIZEOF"]
  760 -> 388 [style=solid label="ALIGNOF"]
  760 -> 389 [style=solid label="'0'"]
  760 -> 390 [style=solid label="'1'"]
  760 -> 391 [style=solid label="'2'"]
  760 -> 392 [style=solid label="'3'"]
  760 -> 393 [style=solid label="'4'"]
  760 -> 394 [style=solid label="'5'"]
  760 -> 395 [style=solid label="'6'"]
  760 -> 396 [style=solid label="'7'"]
  760 -> 397 [style=solid label="'8'"]
  760 -> 398 [style=solid label="'9'"]
  760 -> 205 [style=solid label="'u'"]
  760 -> 206 [style=solid label="'U'"]
  760 -> 207 [style=solid label="'L'"]
  760 -> 208 [style=solid label="'R'"]
  760 -> 401 [style=dashed label="await-expression"]
  760 -> 402 [style=dashed label="binary-literal"]
  760 -> 403 [style=dashed label="boolean-literal"]
  760 -> 1269 [style=dashed label="cast-expression"]
  760 -> 405 [style=dashed label="character-literal"]
  760 -> 65 [style=dashed label="class-name"]
  760 -> 67 [style=dashed label="concept-name"]
  760 -> 68 [style=dashed label="conversion-function-id"]
  760 -> 409 [style=dashed label="decimal-floating-point-literal"]
  760 -> 410 [style=dashed label="decimal-literal"]
  760 -> 76 [style=dashed label="decltype-specifier"]
  760 -> 411 [style=dashed label="delete-expression"]
  760 -> 412 [style=dashed label="digit"]
  760 -> 413 [style=dashed label="digit-sequence"]
  760 -> 414 [style=dashed label="encoding-prefix"]
  760 -> 84 [style=dashed label="enum-name"]
  760 -> 417 [style=dashed label="floating-point-literal"]
  760 -> 418 [style=dashed label="fold-expression"]
  760 -> 419 [style=dashed label="fractional-constant"]
  760 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  760 -> 421 [style=dashed label="hexadecimal-literal"]
  760 -> 422 [style=dashed label="hexadecimal-prefix"]
  760 -> 423 [style=dashed label="id-expression"]
  760 -> 425 [style=dashed label="integer-literal"]
  760 -> 426 [style=dashed label="lambda-expression"]
  760 -> 427 [style=dashed label="lambda-introducer"]
  760 -> 428 [style=dashed label="literal"]
  760 -> 95 [style=dashed label="literal-operator-id"]
  760 -> 99 [style=dashed label="namespace-alias"]
  760 -> 102 [style=dashed label="namespace-name"]
  760 -> 432 [style=dashed label="nested-name-specifier"]
  760 -> 433 [style=dashed label="new-expression"]
  760 -> 434 [style=dashed label="noexcept-expression"]
  760 -> 435 [style=dashed label="nonzero-digit"]
  760 -> 436 [style=dashed label="octal-literal"]
  760 -> 108 [style=dashed label="operator-function-id"]
  760 -> 109 [style=dashed label="placeholder-type-specifier"]
  760 -> 438 [style=dashed label="pointer-literal"]
  760 -> 439 [style=dashed label="postfix-expression"]
  760 -> 440 [style=dashed label="primary-expression"]
  760 -> 112 [style=dashed label="qualified-id"]
  760 -> 442 [style=dashed label="requires-expression"]
  760 -> 114 [style=dashed label="simple-template-id"]
  760 -> 529 [style=dashed label="simple-type-specifier"]
  760 -> 445 [style=dashed label="string-literal"]
  760 -> 120 [style=dashed label="template-id"]
  760 -> 215 [style=dashed label="template-name"]
  760 -> 123 [style=dashed label="type-constraint"]
  760 -> 124 [style=dashed label="type-name"]
  760 -> 126 [style=dashed label="typedef-name"]
  760 -> 531 [style=dashed label="typename-specifier"]
  760 -> 449 [style=dashed label="unary-expression"]
  760 -> 450 [style=dashed label="unary-operator"]
  760 -> 129 [style=dashed label="unqualified-id"]
  760 -> 451 [style=dashed label="user-defined-character-literal"]
  760 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  760 -> 453 [style=dashed label="user-defined-integer-literal"]
  760 -> 454 [style=dashed label="user-defined-literal"]
  760 -> 455 [style=dashed label="user-defined-string-literal"]
  761 [label="State 761\n\l668 new-expression: SCOPE NEW • new-type-id\l670               | SCOPE NEW • new-placement new-type-id\l672               | SCOPE NEW • new-type-id new-initializer\l674               | SCOPE NEW • new-placement new-type-id new-initializer\l676               | SCOPE NEW • OPEN_PAREN type-id CLOSE_PAREN\l678               | SCOPE NEW • new-placement OPEN_PAREN type-id CLOSE_PAREN\l680               | SCOPE NEW • OPEN_PAREN type-id CLOSE_PAREN new-initializer\l682               | SCOPE NEW • new-placement OPEN_PAREN type-id CLOSE_PAREN new-initializer\l"]
  761 -> 162 [style=solid label="IDENTIFIER"]
  761 -> 1270 [style=solid label="OPEN_PAREN"]
  761 -> 9 [style=solid label="SCOPE"]
  761 -> 12 [style=solid label="CLASS"]
  761 -> 13 [style=solid label="STRUCT"]
  761 -> 14 [style=solid label="UNION"]
  761 -> 18 [style=solid label="CONST"]
  761 -> 19 [style=solid label="VOLATILE"]
  761 -> 26 [style=solid label="DECLTYPE"]
  761 -> 135 [style=solid label="ENUM"]
  761 -> 36 [style=solid label="AUTO"]
  761 -> 37 [style=solid label="CHAR"]
  761 -> 38 [style=solid label="CHAR8_T"]
  761 -> 39 [style=solid label="CHAR16_T"]
  761 -> 40 [style=solid label="CHAR32_T"]
  761 -> 41 [style=solid label="WCHAR_T"]
  761 -> 42 [style=solid label="BOOL"]
  761 -> 43 [style=solid label="SHORT"]
  761 -> 44 [style=solid label="INT"]
  761 -> 45 [style=solid label="LONG"]
  761 -> 46 [style=solid label="SIGNED"]
  761 -> 47 [style=solid label="UNSIGNED"]
  761 -> 48 [style=solid label="FLOAT"]
  761 -> 49 [style=solid label="DOUBLE"]
  761 -> 50 [style=solid label="VOID"]
  761 -> 55 [style=solid label="TYPENAME"]
  761 -> 209 [style=dashed label="class-key"]
  761 -> 65 [style=dashed label="class-name"]
  761 -> 67 [style=dashed label="concept-name"]
  761 -> 69 [style=dashed label="cv-qualifier"]
  761 -> 76 [style=dashed label="decltype-specifier"]
  761 -> 79 [style=dashed label="elaborated-enum-specifier"]
  761 -> 80 [style=dashed label="elaborated-type-specifier"]
  761 -> 84 [style=dashed label="enum-name"]
  761 -> 99 [style=dashed label="namespace-alias"]
  761 -> 102 [style=dashed label="namespace-name"]
  761 -> 212 [style=dashed label="nested-name-specifier"]
  761 -> 1271 [style=dashed label="new-placement"]
  761 -> 1272 [style=dashed label="new-type-id"]
  761 -> 109 [style=dashed label="placeholder-type-specifier"]
  761 -> 141 [style=dashed label="simple-template-id"]
  761 -> 115 [style=dashed label="simple-type-specifier"]
  761 -> 215 [style=dashed label="template-name"]
  761 -> 123 [style=dashed label="type-constraint"]
  761 -> 124 [style=dashed label="type-name"]
  761 -> 216 [style=dashed label="type-specifier"]
  761 -> 807 [style=dashed label="type-specifier-seq"]
  761 -> 126 [style=dashed label="typedef-name"]
  761 -> 127 [style=dashed label="typename-specifier"]
  762 [label="State 762\n\l466 init-capture: IDENTIFIER • initializer\l957 simple-capture: IDENTIFIER •\l958               | IDENTIFIER • ELLIPSIS\l"]
  762 -> 1273 [style=solid label="EQ"]
  762 -> 643 [style=solid label="OPEN_PAREN"]
  762 -> 1274 [style=solid label="ELLIPSIS"]
  762 -> 935 [style=solid label="OPEN_BRACE"]
  762 -> 645 [style=dashed label="brace-or-equal-initializer"]
  762 -> 646 [style=dashed label="braced-init-list"]
  762 -> 1275 [style=dashed label="initializer"]
  762 -> "762R957" [style=solid]
 "762R957" [label="R957", fillcolor=3, shape=diamond, style=filled]
  763 [label="State 763\n\l121 capture-default: EQ •\l"]
  763 -> "763R121" [style=solid]
 "763R121" [label="R121", fillcolor=3, shape=diamond, style=filled]
  764 [label="State 764\n\l465 init-capture: ELLIPSIS • IDENTIFIER initializer\l"]
  764 -> 1276 [style=solid label="IDENTIFIER"]
  765 [label="State 765\n\l120 capture-default: AND •\l467 init-capture: AND • IDENTIFIER initializer\l468             | AND • ELLIPSIS IDENTIFIER initializer\l959 simple-capture: AND • IDENTIFIER\l960               | AND • IDENTIFIER ELLIPSIS\l"]
  765 -> 1277 [style=solid label="IDENTIFIER"]
  765 -> 1278 [style=solid label="ELLIPSIS"]
  765 -> "765R120" [style=solid]
 "765R120" [label="R120", fillcolor=3, shape=diamond, style=filled]
  766 [label="State 766\n\l534 lambda-introducer: OPEN_SQUARE CLOSE_SQUARE •\l"]
  766 -> "766R534" [style=solid]
 "766R534" [label="R534", fillcolor=3, shape=diamond, style=filled]
  767 [label="State 767\n\l962 simple-capture: MULT • THIS\l"]
  767 -> 1279 [style=solid label="THIS"]
  768 [label="State 768\n\l961 simple-capture: THIS •\l"]
  768 -> "768R961" [style=solid]
 "768R961" [label="R961", fillcolor=3, shape=diamond, style=filled]
  769 [label="State 769\n\l122 capture-list: capture •\l"]
  769 -> "769R122" [style=solid]
 "769R122" [label="R122", fillcolor=3, shape=diamond, style=filled]
  770 [label="State 770\n\l525 lambda-capture: capture-default •\l527               | capture-default • COMMA capture-list\l"]
  770 -> 1280 [style=solid label="COMMA"]
  770 -> "770R525" [style=solid]
 "770R525" [label="R525", fillcolor=3, shape=diamond, style=filled]
  771 [label="State 771\n\l123 capture-list: capture-list • COMMA capture\l526 lambda-capture: capture-list •\l"]
  771 -> 1281 [style=solid label="COMMA"]
  771 -> "771R526" [style=solid]
 "771R526" [label="R526", fillcolor=3, shape=diamond, style=filled]
  772 [label="State 772\n\l119 capture: init-capture •\l"]
  772 -> "772R119" [style=solid]
 "772R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
  773 [label="State 773\n\l535 lambda-introducer: OPEN_SQUARE lambda-capture • CLOSE_SQUARE\l"]
  773 -> 1282 [style=solid label="CLOSE_SQUARE"]
  774 [label="State 774\n\l118 capture: simple-capture •\l"]
  774 -> "774R118" [style=solid]
 "774R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
  775 [label="State 775\n\l 58 await-expression: CO_AWAIT cast-expression •\l"]
  775 -> "775R58" [style=solid]
 "775R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  776 [label="State 776\n\l 85 binary-digit: '0' •\l"]
  776 -> "776R85" [style=solid]
 "776R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
  777 [label="State 777\n\l 86 binary-digit: '1' •\l"]
  777 -> "777R86" [style=solid]
 "777R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
  778 [label="State 778\n\l 91 binary-literal: ZERO_LB binary-digit •\l"]
  778 -> "778R91" [style=solid]
 "778R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
  779 [label="State 779\n\l 92 binary-literal: ZERO_HB binary-digit •\l"]
  779 -> "779R92" [style=solid]
 "779R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
  780 [label="State 780\n\l 83 basic-c-char: BASIC_C_CHAR •\l"]
  780 -> "780R83" [style=solid]
 "780R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  781 [label="State 781\n\l113 c-char: basic-c-char •\l"]
  781 -> "781R113" [style=solid]
 "781R113" [label="R113", fillcolor=3, shape=diamond, style=filled]
  782 [label="State 782\n\l116 c-char-sequence: c-char •\l"]
  782 -> "782R116" [style=solid]
 "782R116" [label="R116", fillcolor=3, shape=diamond, style=filled]
  783 [label="State 783\n\l117 c-char-sequence: c-char-sequence • c-char\l127 character-literal: SINGLE_QUOTE c-char-sequence • SINGLE_QUOTE\l"]
  783 -> 780 [style=solid label="BASIC_C_CHAR"]
  783 -> 1283 [style=solid label="SINGLE_QUOTE"]
  783 -> 486 [style=solid label="ESCAPE"]
  783 -> 488 [style=solid label="ESCAPE_LX"]
  783 -> 489 [style=solid label="ESCAPE_LU"]
  783 -> 490 [style=solid label="ESCAPE_HU"]
  783 -> 781 [style=dashed label="basic-c-char"]
  783 -> 1284 [style=dashed label="c-char"]
  783 -> 492 [style=dashed label="conditional-escape-sequence"]
  783 -> 784 [style=dashed label="escape-sequence"]
  783 -> 494 [style=dashed label="hexadecimal-escape-sequence"]
  783 -> 495 [style=dashed label="numeric-escape-sequence"]
  783 -> 496 [style=dashed label="octal-escape-sequence"]
  783 -> 499 [style=dashed label="simple-escape-sequence"]
  783 -> 785 [style=dashed label="universal-character-name"]
  784 [label="State 784\n\l114 c-char: escape-sequence •\l"]
  784 -> "784R114" [style=solid]
 "784R114" [label="R114", fillcolor=3, shape=diamond, style=filled]
  785 [label="State 785\n\l115 c-char: universal-character-name •\l"]
  785 -> "785R115" [style=solid]
 "785R115" [label="R115", fillcolor=3, shape=diamond, style=filled]
  786 [label="State 786\n\l692 noexcept-expression: NOEXCEPT OPEN_PAREN • expression CLOSE_PAREN\l"]
  786 -> 356 [style=solid label="PLUS"]
  786 -> 357 [style=solid label="MINUS"]
  786 -> 2 [style=solid label="IDENTIFIER"]
  786 -> 358 [style=solid label="OPEN_PAREN"]
  786 -> 359 [style=solid label="AND"]
  786 -> 360 [style=solid label="SCOPE"]
  786 -> 361 [style=solid label="OPEN_SQUARE"]
  786 -> 362 [style=solid label="CO_AWAIT"]
  786 -> 363 [style=solid label="ZERO_LB"]
  786 -> 364 [style=solid label="ZERO_HB"]
  786 -> 365 [style=solid label="SINGLE_QUOTE"]
  786 -> 366 [style=solid label="FALSE"]
  786 -> 367 [style=solid label="TRUE"]
  786 -> 368 [style=solid label="NOEXCEPT"]
  786 -> 17 [style=solid label="OPERATOR"]
  786 -> 26 [style=solid label="DECLTYPE"]
  786 -> 369 [style=solid label="DELETE"]
  786 -> 370 [style=solid label="DOT"]
  786 -> 184 [style=solid label="UNICODE_8"]
  786 -> 371 [style=solid label="MULT"]
  786 -> 199 [style=solid label="DOUBLE_QUOTE"]
  786 -> 372 [style=solid label="ZERO_LX"]
  786 -> 373 [style=solid label="ZERO_HX"]
  786 -> 374 [style=solid label="REQUIRES"]
  786 -> 375 [style=solid label="NEW"]
  786 -> 376 [style=solid label="COMPL"]
  786 -> 377 [style=solid label="NOT"]
  786 -> 378 [style=solid label="PLUS_PLUS"]
  786 -> 379 [style=solid label="MINUS_MINUS"]
  786 -> 380 [style=solid label="THIS"]
  786 -> 36 [style=solid label="AUTO"]
  786 -> 381 [style=solid label="NULLPTR"]
  786 -> 382 [style=solid label="DYNAMIC_CAST"]
  786 -> 383 [style=solid label="STATIC_CAST"]
  786 -> 384 [style=solid label="REINTERPRET_CAST"]
  786 -> 385 [style=solid label="CONST_CAST"]
  786 -> 386 [style=solid label="TYPEID"]
  786 -> 37 [style=solid label="CHAR"]
  786 -> 38 [style=solid label="CHAR8_T"]
  786 -> 39 [style=solid label="CHAR16_T"]
  786 -> 40 [style=solid label="CHAR32_T"]
  786 -> 41 [style=solid label="WCHAR_T"]
  786 -> 42 [style=solid label="BOOL"]
  786 -> 43 [style=solid label="SHORT"]
  786 -> 44 [style=solid label="INT"]
  786 -> 45 [style=solid label="LONG"]
  786 -> 46 [style=solid label="SIGNED"]
  786 -> 47 [style=solid label="UNSIGNED"]
  786 -> 48 [style=solid label="FLOAT"]
  786 -> 49 [style=solid label="DOUBLE"]
  786 -> 50 [style=solid label="VOID"]
  786 -> 523 [style=solid label="THROW"]
  786 -> 55 [style=solid label="TYPENAME"]
  786 -> 387 [style=solid label="SIZEOF"]
  786 -> 388 [style=solid label="ALIGNOF"]
  786 -> 524 [style=solid label="CO_YIELD"]
  786 -> 389 [style=solid label="'0'"]
  786 -> 390 [style=solid label="'1'"]
  786 -> 391 [style=solid label="'2'"]
  786 -> 392 [style=solid label="'3'"]
  786 -> 393 [style=solid label="'4'"]
  786 -> 394 [style=solid label="'5'"]
  786 -> 395 [style=solid label="'6'"]
  786 -> 396 [style=solid label="'7'"]
  786 -> 397 [style=solid label="'8'"]
  786 -> 398 [style=solid label="'9'"]
  786 -> 205 [style=solid label="'u'"]
  786 -> 206 [style=solid label="'U'"]
  786 -> 207 [style=solid label="'L'"]
  786 -> 208 [style=solid label="'R'"]
  786 -> 399 [style=dashed label="additive-expression"]
  786 -> 400 [style=dashed label="and-expression"]
  786 -> 525 [style=dashed label="assignment-expression"]
  786 -> 401 [style=dashed label="await-expression"]
  786 -> 402 [style=dashed label="binary-literal"]
  786 -> 403 [style=dashed label="boolean-literal"]
  786 -> 404 [style=dashed label="cast-expression"]
  786 -> 405 [style=dashed label="character-literal"]
  786 -> 65 [style=dashed label="class-name"]
  786 -> 406 [style=dashed label="compare-expression"]
  786 -> 67 [style=dashed label="concept-name"]
  786 -> 526 [style=dashed label="conditional-expression"]
  786 -> 68 [style=dashed label="conversion-function-id"]
  786 -> 409 [style=dashed label="decimal-floating-point-literal"]
  786 -> 410 [style=dashed label="decimal-literal"]
  786 -> 76 [style=dashed label="decltype-specifier"]
  786 -> 411 [style=dashed label="delete-expression"]
  786 -> 412 [style=dashed label="digit"]
  786 -> 413 [style=dashed label="digit-sequence"]
  786 -> 414 [style=dashed label="encoding-prefix"]
  786 -> 84 [style=dashed label="enum-name"]
  786 -> 415 [style=dashed label="equality-expression"]
  786 -> 416 [style=dashed label="exclusive-or-expression"]
  786 -> 1285 [style=dashed label="expression"]
  786 -> 417 [style=dashed label="floating-point-literal"]
  786 -> 418 [style=dashed label="fold-expression"]
  786 -> 419 [style=dashed label="fractional-constant"]
  786 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  786 -> 421 [style=dashed label="hexadecimal-literal"]
  786 -> 422 [style=dashed label="hexadecimal-prefix"]
  786 -> 423 [style=dashed label="id-expression"]
  786 -> 424 [style=dashed label="inclusive-or-expression"]
  786 -> 425 [style=dashed label="integer-literal"]
  786 -> 426 [style=dashed label="lambda-expression"]
  786 -> 427 [style=dashed label="lambda-introducer"]
  786 -> 428 [style=dashed label="literal"]
  786 -> 95 [style=dashed label="literal-operator-id"]
  786 -> 429 [style=dashed label="logical-and-expression"]
  786 -> 528 [style=dashed label="logical-or-expression"]
  786 -> 431 [style=dashed label="multiplicative-expression"]
  786 -> 99 [style=dashed label="namespace-alias"]
  786 -> 102 [style=dashed label="namespace-name"]
  786 -> 432 [style=dashed label="nested-name-specifier"]
  786 -> 433 [style=dashed label="new-expression"]
  786 -> 434 [style=dashed label="noexcept-expression"]
  786 -> 435 [style=dashed label="nonzero-digit"]
  786 -> 436 [style=dashed label="octal-literal"]
  786 -> 108 [style=dashed label="operator-function-id"]
  786 -> 109 [style=dashed label="placeholder-type-specifier"]
  786 -> 437 [style=dashed label="pm-expression"]
  786 -> 438 [style=dashed label="pointer-literal"]
  786 -> 439 [style=dashed label="postfix-expression"]
  786 -> 440 [style=dashed label="primary-expression"]
  786 -> 112 [style=dashed label="qualified-id"]
  786 -> 441 [style=dashed label="relational-expression"]
  786 -> 442 [style=dashed label="requires-expression"]
  786 -> 443 [style=dashed label="shift-expression"]
  786 -> 114 [style=dashed label="simple-template-id"]
  786 -> 529 [style=dashed label="simple-type-specifier"]
  786 -> 445 [style=dashed label="string-literal"]
  786 -> 120 [style=dashed label="template-id"]
  786 -> 215 [style=dashed label="template-name"]
  786 -> 530 [style=dashed label="throw-expression"]
  786 -> 123 [style=dashed label="type-constraint"]
  786 -> 124 [style=dashed label="type-name"]
  786 -> 126 [style=dashed label="typedef-name"]
  786 -> 531 [style=dashed label="typename-specifier"]
  786 -> 449 [style=dashed label="unary-expression"]
  786 -> 450 [style=dashed label="unary-operator"]
  786 -> 129 [style=dashed label="unqualified-id"]
  786 -> 451 [style=dashed label="user-defined-character-literal"]
  786 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  786 -> 453 [style=dashed label="user-defined-integer-literal"]
  786 -> 454 [style=dashed label="user-defined-literal"]
  786 -> 455 [style=dashed label="user-defined-string-literal"]
  786 -> 532 [style=dashed label="yield-expression"]
  787 [label="State 787\n\l244 delete-expression: DELETE OPEN_SQUARE • CLOSE_SQUARE cast-expression\l534 lambda-introducer: OPEN_SQUARE • CLOSE_SQUARE\l535                  | OPEN_SQUARE • lambda-capture CLOSE_SQUARE\l"]
  787 -> 762 [style=solid label="IDENTIFIER"]
  787 -> 763 [style=solid label="EQ"]
  787 -> 764 [style=solid label="ELLIPSIS"]
  787 -> 765 [style=solid label="AND"]
  787 -> 1286 [style=solid label="CLOSE_SQUARE"]
  787 -> 767 [style=solid label="MULT"]
  787 -> 768 [style=solid label="THIS"]
  787 -> 769 [style=dashed label="capture"]
  787 -> 770 [style=dashed label="capture-default"]
  787 -> 771 [style=dashed label="capture-list"]
  787 -> 772 [style=dashed label="init-capture"]
  787 -> 773 [style=dashed label="lambda-capture"]
  787 -> 774 [style=dashed label="simple-capture"]
  788 [label="State 788\n\l242 delete-expression: DELETE cast-expression •\l"]
  788 -> "788R242" [style=solid]
 "788R242" [label="R242", fillcolor=3, shape=diamond, style=filled]
  789 [label="State 789\n\l249 digit: '0' •\l"]
  789 -> "789R249" [style=solid]
 "789R249" [label="R249", fillcolor=3, shape=diamond, style=filled]
  790 [label="State 790\n\l250 digit: '1' •\l"]
  790 -> "790R250" [style=solid]
 "790R250" [label="R250", fillcolor=3, shape=diamond, style=filled]
  791 [label="State 791\n\l251 digit: '2' •\l"]
  791 -> "791R251" [style=solid]
 "791R251" [label="R251", fillcolor=3, shape=diamond, style=filled]
  792 [label="State 792\n\l252 digit: '3' •\l"]
  792 -> "792R252" [style=solid]
 "792R252" [label="R252", fillcolor=3, shape=diamond, style=filled]
  793 [label="State 793\n\l253 digit: '4' •\l"]
  793 -> "793R253" [style=solid]
 "793R253" [label="R253", fillcolor=3, shape=diamond, style=filled]
  794 [label="State 794\n\l254 digit: '5' •\l"]
  794 -> "794R254" [style=solid]
 "794R254" [label="R254", fillcolor=3, shape=diamond, style=filled]
  795 [label="State 795\n\l255 digit: '6' •\l"]
  795 -> "795R255" [style=solid]
 "795R255" [label="R255", fillcolor=3, shape=diamond, style=filled]
  796 [label="State 796\n\l256 digit: '7' •\l"]
  796 -> "796R256" [style=solid]
 "796R256" [label="R256", fillcolor=3, shape=diamond, style=filled]
  797 [label="State 797\n\l257 digit: '8' •\l"]
  797 -> "797R257" [style=solid]
 "797R257" [label="R257", fillcolor=3, shape=diamond, style=filled]
  798 [label="State 798\n\l258 digit: '9' •\l"]
  798 -> "798R258" [style=solid]
 "798R258" [label="R258", fillcolor=3, shape=diamond, style=filled]
  799 [label="State 799\n\l260 digit-sequence: digit-sequence • digit\l261               | digit-sequence • SINGLE_QUOTE digit\l388 fractional-constant: DOT digit-sequence •\l"]
  799 -> 847 [style=solid label="SINGLE_QUOTE"]
  799 -> 789 [style=solid label="'0'"]
  799 -> 790 [style=solid label="'1'"]
  799 -> 791 [style=solid label="'2'"]
  799 -> 792 [style=solid label="'3'"]
  799 -> 793 [style=solid label="'4'"]
  799 -> 794 [style=solid label="'5'"]
  799 -> 795 [style=solid label="'6'"]
  799 -> 796 [style=solid label="'7'"]
  799 -> 797 [style=solid label="'8'"]
  799 -> 798 [style=solid label="'9'"]
  799 -> 851 [style=dashed label="digit"]
  799 -> "799R388" [style=solid]
 "799R388" [label="R388", fillcolor=3, shape=diamond, style=filled]
  800 [label="State 800\n\l926 requirement-parameter-list: OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN\l"]
  800 -> 162 [style=solid label="IDENTIFIER"]
  800 -> 4 [style=solid label="ALIGNAS"]
  800 -> 730 [style=solid label="ELLIPSIS"]
  800 -> 9 [style=solid label="SCOPE"]
  800 -> 10 [style=solid label="OPEN_SQUARE"]
  800 -> 11 [style=solid label="VIRTUAL"]
  800 -> 12 [style=solid label="CLASS"]
  800 -> 13 [style=solid label="STRUCT"]
  800 -> 14 [style=solid label="UNION"]
  800 -> 18 [style=solid label="CONST"]
  800 -> 19 [style=solid label="VOLATILE"]
  800 -> 20 [style=solid label="FRIEND"]
  800 -> 21 [style=solid label="TYPEDEF"]
  800 -> 22 [style=solid label="CONSTEXPR"]
  800 -> 23 [style=solid label="CONSTEVAL"]
  800 -> 24 [style=solid label="CONSTINIT"]
  800 -> 258 [style=solid label="INLINE"]
  800 -> 26 [style=solid label="DECLTYPE"]
  800 -> 27 [style=solid label="ENUM"]
  800 -> 259 [style=solid label="EXTERN"]
  800 -> 29 [style=solid label="EXPLICIT"]
  800 -> 471 [style=solid label="THIS"]
  800 -> 36 [style=solid label="AUTO"]
  800 -> 37 [style=solid label="CHAR"]
  800 -> 38 [style=solid label="CHAR8_T"]
  800 -> 39 [style=solid label="CHAR16_T"]
  800 -> 40 [style=solid label="CHAR32_T"]
  800 -> 41 [style=solid label="WCHAR_T"]
  800 -> 42 [style=solid label="BOOL"]
  800 -> 43 [style=solid label="SHORT"]
  800 -> 44 [style=solid label="INT"]
  800 -> 45 [style=solid label="LONG"]
  800 -> 46 [style=solid label="SIGNED"]
  800 -> 47 [style=solid label="UNSIGNED"]
  800 -> 48 [style=solid label="FLOAT"]
  800 -> 49 [style=solid label="DOUBLE"]
  800 -> 50 [style=solid label="VOID"]
  800 -> 52 [style=solid label="STATIC"]
  800 -> 53 [style=solid label="THREAD_LOCAL"]
  800 -> 54 [style=solid label="MUTABLE"]
  800 -> 55 [style=solid label="TYPENAME"]
  800 -> 57 [style=dashed label="alignment-specifier"]
  800 -> 60 [style=dashed label="attribute-specifier"]
  800 -> 473 [style=dashed label="attribute-specifier-seq"]
  800 -> 63 [style=dashed label="class-head"]
  800 -> 64 [style=dashed label="class-key"]
  800 -> 65 [style=dashed label="class-name"]
  800 -> 66 [style=dashed label="class-specifier"]
  800 -> 67 [style=dashed label="concept-name"]
  800 -> 69 [style=dashed label="cv-qualifier"]
  800 -> 70 [style=dashed label="decl-specifier"]
  800 -> 474 [style=dashed label="decl-specifier-seq"]
  800 -> 76 [style=dashed label="decltype-specifier"]
  800 -> 78 [style=dashed label="defining-type-specifier"]
  800 -> 79 [style=dashed label="elaborated-enum-specifier"]
  800 -> 80 [style=dashed label="elaborated-type-specifier"]
  800 -> 82 [style=dashed label="enum-head"]
  800 -> 263 [style=dashed label="enum-key"]
  800 -> 84 [style=dashed label="enum-name"]
  800 -> 85 [style=dashed label="enum-specifier"]
  800 -> 264 [style=dashed label="explicit-specifier"]
  800 -> 91 [style=dashed label="function-specifier"]
  800 -> 99 [style=dashed label="namespace-alias"]
  800 -> 102 [style=dashed label="namespace-name"]
  800 -> 212 [style=dashed label="nested-name-specifier"]
  800 -> 731 [style=dashed label="parameter-declaration"]
  800 -> 1287 [style=dashed label="parameter-declaration-clause"]
  800 -> 733 [style=dashed label="parameter-declaration-list"]
  800 -> 109 [style=dashed label="placeholder-type-specifier"]
  800 -> 141 [style=dashed label="simple-template-id"]
  800 -> 115 [style=dashed label="simple-type-specifier"]
  800 -> 117 [style=dashed label="storage-class-specifier"]
  800 -> 215 [style=dashed label="template-name"]
  800 -> 123 [style=dashed label="type-constraint"]
  800 -> 124 [style=dashed label="type-name"]
  800 -> 125 [style=dashed label="type-specifier"]
  800 -> 126 [style=dashed label="typedef-name"]
  800 -> 127 [style=dashed label="typename-specifier"]
  801 [label="State 801\n\l925 requirement-body: OPEN_BRACE • requirement-seq CLOSE_BRACE\l"]
  801 -> 356 [style=solid label="PLUS"]
  801 -> 357 [style=solid label="MINUS"]
  801 -> 2 [style=solid label="IDENTIFIER"]
  801 -> 358 [style=solid label="OPEN_PAREN"]
  801 -> 359 [style=solid label="AND"]
  801 -> 360 [style=solid label="SCOPE"]
  801 -> 361 [style=solid label="OPEN_SQUARE"]
  801 -> 362 [style=solid label="CO_AWAIT"]
  801 -> 1288 [style=solid label="OPEN_BRACE"]
  801 -> 363 [style=solid label="ZERO_LB"]
  801 -> 364 [style=solid label="ZERO_HB"]
  801 -> 365 [style=solid label="SINGLE_QUOTE"]
  801 -> 366 [style=solid label="FALSE"]
  801 -> 367 [style=solid label="TRUE"]
  801 -> 368 [style=solid label="NOEXCEPT"]
  801 -> 17 [style=solid label="OPERATOR"]
  801 -> 26 [style=solid label="DECLTYPE"]
  801 -> 369 [style=solid label="DELETE"]
  801 -> 370 [style=solid label="DOT"]
  801 -> 184 [style=solid label="UNICODE_8"]
  801 -> 371 [style=solid label="MULT"]
  801 -> 199 [style=solid label="DOUBLE_QUOTE"]
  801 -> 372 [style=solid label="ZERO_LX"]
  801 -> 373 [style=solid label="ZERO_HX"]
  801 -> 1289 [style=solid label="REQUIRES"]
  801 -> 375 [style=solid label="NEW"]
  801 -> 376 [style=solid label="COMPL"]
  801 -> 377 [style=solid label="NOT"]
  801 -> 378 [style=solid label="PLUS_PLUS"]
  801 -> 379 [style=solid label="MINUS_MINUS"]
  801 -> 380 [style=solid label="THIS"]
  801 -> 36 [style=solid label="AUTO"]
  801 -> 381 [style=solid label="NULLPTR"]
  801 -> 382 [style=solid label="DYNAMIC_CAST"]
  801 -> 383 [style=solid label="STATIC_CAST"]
  801 -> 384 [style=solid label="REINTERPRET_CAST"]
  801 -> 385 [style=solid label="CONST_CAST"]
  801 -> 386 [style=solid label="TYPEID"]
  801 -> 37 [style=solid label="CHAR"]
  801 -> 38 [style=solid label="CHAR8_T"]
  801 -> 39 [style=solid label="CHAR16_T"]
  801 -> 40 [style=solid label="CHAR32_T"]
  801 -> 41 [style=solid label="WCHAR_T"]
  801 -> 42 [style=solid label="BOOL"]
  801 -> 43 [style=solid label="SHORT"]
  801 -> 44 [style=solid label="INT"]
  801 -> 45 [style=solid label="LONG"]
  801 -> 46 [style=solid label="SIGNED"]
  801 -> 47 [style=solid label="UNSIGNED"]
  801 -> 48 [style=solid label="FLOAT"]
  801 -> 49 [style=solid label="DOUBLE"]
  801 -> 50 [style=solid label="VOID"]
  801 -> 523 [style=solid label="THROW"]
  801 -> 1290 [style=solid label="TYPENAME"]
  801 -> 387 [style=solid label="SIZEOF"]
  801 -> 388 [style=solid label="ALIGNOF"]
  801 -> 524 [style=solid label="CO_YIELD"]
  801 -> 389 [style=solid label="'0'"]
  801 -> 390 [style=solid label="'1'"]
  801 -> 391 [style=solid label="'2'"]
  801 -> 392 [style=solid label="'3'"]
  801 -> 393 [style=solid label="'4'"]
  801 -> 394 [style=solid label="'5'"]
  801 -> 395 [style=solid label="'6'"]
  801 -> 396 [style=solid label="'7'"]
  801 -> 397 [style=solid label="'8'"]
  801 -> 398 [style=solid label="'9'"]
  801 -> 205 [style=solid label="'u'"]
  801 -> 206 [style=solid label="'U'"]
  801 -> 207 [style=solid label="'L'"]
  801 -> 208 [style=solid label="'R'"]
  801 -> 399 [style=dashed label="additive-expression"]
  801 -> 400 [style=dashed label="and-expression"]
  801 -> 525 [style=dashed label="assignment-expression"]
  801 -> 401 [style=dashed label="await-expression"]
  801 -> 402 [style=dashed label="binary-literal"]
  801 -> 403 [style=dashed label="boolean-literal"]
  801 -> 404 [style=dashed label="cast-expression"]
  801 -> 405 [style=dashed label="character-literal"]
  801 -> 65 [style=dashed label="class-name"]
  801 -> 406 [style=dashed label="compare-expression"]
  801 -> 1291 [style=dashed label="compound-requirement"]
  801 -> 67 [style=dashed label="concept-name"]
  801 -> 526 [style=dashed label="conditional-expression"]
  801 -> 68 [style=dashed label="conversion-function-id"]
  801 -> 409 [style=dashed label="decimal-floating-point-literal"]
  801 -> 410 [style=dashed label="decimal-literal"]
  801 -> 76 [style=dashed label="decltype-specifier"]
  801 -> 411 [style=dashed label="delete-expression"]
  801 -> 412 [style=dashed label="digit"]
  801 -> 413 [style=dashed label="digit-sequence"]
  801 -> 414 [style=dashed label="encoding-prefix"]
  801 -> 84 [style=dashed label="enum-name"]
  801 -> 415 [style=dashed label="equality-expression"]
  801 -> 416 [style=dashed label="exclusive-or-expression"]
  801 -> 1292 [style=dashed label="expression"]
  801 -> 417 [style=dashed label="floating-point-literal"]
  801 -> 418 [style=dashed label="fold-expression"]
  801 -> 419 [style=dashed label="fractional-constant"]
  801 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  801 -> 421 [style=dashed label="hexadecimal-literal"]
  801 -> 422 [style=dashed label="hexadecimal-prefix"]
  801 -> 423 [style=dashed label="id-expression"]
  801 -> 424 [style=dashed label="inclusive-or-expression"]
  801 -> 425 [style=dashed label="integer-literal"]
  801 -> 426 [style=dashed label="lambda-expression"]
  801 -> 427 [style=dashed label="lambda-introducer"]
  801 -> 428 [style=dashed label="literal"]
  801 -> 95 [style=dashed label="literal-operator-id"]
  801 -> 429 [style=dashed label="logical-and-expression"]
  801 -> 528 [style=dashed label="logical-or-expression"]
  801 -> 431 [style=dashed label="multiplicative-expression"]
  801 -> 99 [style=dashed label="namespace-alias"]
  801 -> 102 [style=dashed label="namespace-name"]
  801 -> 432 [style=dashed label="nested-name-specifier"]
  801 -> 1293 [style=dashed label="nested-requirement"]
  801 -> 433 [style=dashed label="new-expression"]
  801 -> 434 [style=dashed label="noexcept-expression"]
  801 -> 435 [style=dashed label="nonzero-digit"]
  801 -> 436 [style=dashed label="octal-literal"]
  801 -> 108 [style=dashed label="operator-function-id"]
  801 -> 109 [style=dashed label="placeholder-type-specifier"]
  801 -> 437 [style=dashed label="pm-expression"]
  801 -> 438 [style=dashed label="pointer-literal"]
  801 -> 439 [style=dashed label="postfix-expression"]
  801 -> 440 [style=dashed label="primary-expression"]
  801 -> 112 [style=dashed label="qualified-id"]
  801 -> 441 [style=dashed label="relational-expression"]
  801 -> 1294 [style=dashed label="requirement"]
  801 -> 1295 [style=dashed label="requirement-seq"]
  801 -> 442 [style=dashed label="requires-expression"]
  801 -> 443 [style=dashed label="shift-expression"]
  801 -> 1296 [style=dashed label="simple-requirement"]
  801 -> 114 [style=dashed label="simple-template-id"]
  801 -> 529 [style=dashed label="simple-type-specifier"]
  801 -> 445 [style=dashed label="string-literal"]
  801 -> 120 [style=dashed label="template-id"]
  801 -> 215 [style=dashed label="template-name"]
  801 -> 530 [style=dashed label="throw-expression"]
  801 -> 123 [style=dashed label="type-constraint"]
  801 -> 124 [style=dashed label="type-name"]
  801 -> 1297 [style=dashed label="type-requirement"]
  801 -> 126 [style=dashed label="typedef-name"]
  801 -> 531 [style=dashed label="typename-specifier"]
  801 -> 449 [style=dashed label="unary-expression"]
  801 -> 450 [style=dashed label="unary-operator"]
  801 -> 129 [style=dashed label="unqualified-id"]
  801 -> 451 [style=dashed label="user-defined-character-literal"]
  801 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  801 -> 453 [style=dashed label="user-defined-integer-literal"]
  801 -> 454 [style=dashed label="user-defined-literal"]
  801 -> 455 [style=dashed label="user-defined-string-literal"]
  801 -> 532 [style=dashed label="yield-expression"]
  802 [label="State 802\n\l930 requires-expression: REQUIRES requirement-body •\l"]
  802 -> "802R930" [style=solid]
 "802R930" [label="R930", fillcolor=3, shape=diamond, style=filled]
  803 [label="State 803\n\l931 requires-expression: REQUIRES requirement-parameter-list • requirement-body\l"]
  803 -> 801 [style=solid label="OPEN_BRACE"]
  803 -> 1298 [style=dashed label="requirement-body"]
  804 [label="State 804\n\l677 new-expression: NEW OPEN_PAREN • type-id CLOSE_PAREN\l681               | NEW OPEN_PAREN • type-id CLOSE_PAREN new-initializer\l687 new-placement: OPEN_PAREN • expression-list CLOSE_PAREN\l"]
  804 -> 356 [style=solid label="PLUS"]
  804 -> 357 [style=solid label="MINUS"]
  804 -> 2 [style=solid label="IDENTIFIER"]
  804 -> 358 [style=solid label="OPEN_PAREN"]
  804 -> 359 [style=solid label="AND"]
  804 -> 360 [style=solid label="SCOPE"]
  804 -> 361 [style=solid label="OPEN_SQUARE"]
  804 -> 362 [style=solid label="CO_AWAIT"]
  804 -> 935 [style=solid label="OPEN_BRACE"]
  804 -> 363 [style=solid label="ZERO_LB"]
  804 -> 364 [style=solid label="ZERO_HB"]
  804 -> 365 [style=solid label="SINGLE_QUOTE"]
  804 -> 366 [style=solid label="FALSE"]
  804 -> 367 [style=solid label="TRUE"]
  804 -> 12 [style=solid label="CLASS"]
  804 -> 13 [style=solid label="STRUCT"]
  804 -> 14 [style=solid label="UNION"]
  804 -> 368 [style=solid label="NOEXCEPT"]
  804 -> 17 [style=solid label="OPERATOR"]
  804 -> 18 [style=solid label="CONST"]
  804 -> 19 [style=solid label="VOLATILE"]
  804 -> 26 [style=solid label="DECLTYPE"]
  804 -> 369 [style=solid label="DELETE"]
  804 -> 370 [style=solid label="DOT"]
  804 -> 135 [style=solid label="ENUM"]
  804 -> 184 [style=solid label="UNICODE_8"]
  804 -> 371 [style=solid label="MULT"]
  804 -> 199 [style=solid label="DOUBLE_QUOTE"]
  804 -> 372 [style=solid label="ZERO_LX"]
  804 -> 373 [style=solid label="ZERO_HX"]
  804 -> 374 [style=solid label="REQUIRES"]
  804 -> 375 [style=solid label="NEW"]
  804 -> 376 [style=solid label="COMPL"]
  804 -> 377 [style=solid label="NOT"]
  804 -> 378 [style=solid label="PLUS_PLUS"]
  804 -> 379 [style=solid label="MINUS_MINUS"]
  804 -> 380 [style=solid label="THIS"]
  804 -> 36 [style=solid label="AUTO"]
  804 -> 381 [style=solid label="NULLPTR"]
  804 -> 382 [style=solid label="DYNAMIC_CAST"]
  804 -> 383 [style=solid label="STATIC_CAST"]
  804 -> 384 [style=solid label="REINTERPRET_CAST"]
  804 -> 385 [style=solid label="CONST_CAST"]
  804 -> 386 [style=solid label="TYPEID"]
  804 -> 37 [style=solid label="CHAR"]
  804 -> 38 [style=solid label="CHAR8_T"]
  804 -> 39 [style=solid label="CHAR16_T"]
  804 -> 40 [style=solid label="CHAR32_T"]
  804 -> 41 [style=solid label="WCHAR_T"]
  804 -> 42 [style=solid label="BOOL"]
  804 -> 43 [style=solid label="SHORT"]
  804 -> 44 [style=solid label="INT"]
  804 -> 45 [style=solid label="LONG"]
  804 -> 46 [style=solid label="SIGNED"]
  804 -> 47 [style=solid label="UNSIGNED"]
  804 -> 48 [style=solid label="FLOAT"]
  804 -> 49 [style=solid label="DOUBLE"]
  804 -> 50 [style=solid label="VOID"]
  804 -> 523 [style=solid label="THROW"]
  804 -> 55 [style=solid label="TYPENAME"]
  804 -> 387 [style=solid label="SIZEOF"]
  804 -> 388 [style=solid label="ALIGNOF"]
  804 -> 524 [style=solid label="CO_YIELD"]
  804 -> 389 [style=solid label="'0'"]
  804 -> 390 [style=solid label="'1'"]
  804 -> 391 [style=solid label="'2'"]
  804 -> 392 [style=solid label="'3'"]
  804 -> 393 [style=solid label="'4'"]
  804 -> 394 [style=solid label="'5'"]
  804 -> 395 [style=solid label="'6'"]
  804 -> 396 [style=solid label="'7'"]
  804 -> 397 [style=solid label="'8'"]
  804 -> 398 [style=solid label="'9'"]
  804 -> 205 [style=solid label="'u'"]
  804 -> 206 [style=solid label="'U'"]
  804 -> 207 [style=solid label="'L'"]
  804 -> 208 [style=solid label="'R'"]
  804 -> 399 [style=dashed label="additive-expression"]
  804 -> 400 [style=dashed label="and-expression"]
  804 -> 1134 [style=dashed label="assignment-expression"]
  804 -> 401 [style=dashed label="await-expression"]
  804 -> 402 [style=dashed label="binary-literal"]
  804 -> 403 [style=dashed label="boolean-literal"]
  804 -> 1135 [style=dashed label="braced-init-list"]
  804 -> 404 [style=dashed label="cast-expression"]
  804 -> 405 [style=dashed label="character-literal"]
  804 -> 209 [style=dashed label="class-key"]
  804 -> 65 [style=dashed label="class-name"]
  804 -> 406 [style=dashed label="compare-expression"]
  804 -> 67 [style=dashed label="concept-name"]
  804 -> 526 [style=dashed label="conditional-expression"]
  804 -> 68 [style=dashed label="conversion-function-id"]
  804 -> 69 [style=dashed label="cv-qualifier"]
  804 -> 409 [style=dashed label="decimal-floating-point-literal"]
  804 -> 410 [style=dashed label="decimal-literal"]
  804 -> 76 [style=dashed label="decltype-specifier"]
  804 -> 411 [style=dashed label="delete-expression"]
  804 -> 412 [style=dashed label="digit"]
  804 -> 413 [style=dashed label="digit-sequence"]
  804 -> 79 [style=dashed label="elaborated-enum-specifier"]
  804 -> 80 [style=dashed label="elaborated-type-specifier"]
  804 -> 414 [style=dashed label="encoding-prefix"]
  804 -> 84 [style=dashed label="enum-name"]
  804 -> 415 [style=dashed label="equality-expression"]
  804 -> 416 [style=dashed label="exclusive-or-expression"]
  804 -> 1299 [style=dashed label="expression-list"]
  804 -> 417 [style=dashed label="floating-point-literal"]
  804 -> 418 [style=dashed label="fold-expression"]
  804 -> 419 [style=dashed label="fractional-constant"]
  804 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  804 -> 421 [style=dashed label="hexadecimal-literal"]
  804 -> 422 [style=dashed label="hexadecimal-prefix"]
  804 -> 423 [style=dashed label="id-expression"]
  804 -> 424 [style=dashed label="inclusive-or-expression"]
  804 -> 1138 [style=dashed label="initializer-clause"]
  804 -> 1139 [style=dashed label="initializer-list"]
  804 -> 425 [style=dashed label="integer-literal"]
  804 -> 426 [style=dashed label="lambda-expression"]
  804 -> 427 [style=dashed label="lambda-introducer"]
  804 -> 428 [style=dashed label="literal"]
  804 -> 95 [style=dashed label="literal-operator-id"]
  804 -> 429 [style=dashed label="logical-and-expression"]
  804 -> 528 [style=dashed label="logical-or-expression"]
  804 -> 431 [style=dashed label="multiplicative-expression"]
  804 -> 99 [style=dashed label="namespace-alias"]
  804 -> 102 [style=dashed label="namespace-name"]
  804 -> 432 [style=dashed label="nested-name-specifier"]
  804 -> 433 [style=dashed label="new-expression"]
  804 -> 434 [style=dashed label="noexcept-expression"]
  804 -> 435 [style=dashed label="nonzero-digit"]
  804 -> 436 [style=dashed label="octal-literal"]
  804 -> 108 [style=dashed label="operator-function-id"]
  804 -> 109 [style=dashed label="placeholder-type-specifier"]
  804 -> 437 [style=dashed label="pm-expression"]
  804 -> 438 [style=dashed label="pointer-literal"]
  804 -> 439 [style=dashed label="postfix-expression"]
  804 -> 440 [style=dashed label="primary-expression"]
  804 -> 112 [style=dashed label="qualified-id"]
  804 -> 441 [style=dashed label="relational-expression"]
  804 -> 442 [style=dashed label="requires-expression"]
  804 -> 443 [style=dashed label="shift-expression"]
  804 -> 114 [style=dashed label="simple-template-id"]
  804 -> 444 [style=dashed label="simple-type-specifier"]
  804 -> 445 [style=dashed label="string-literal"]
  804 -> 120 [style=dashed label="template-id"]
  804 -> 215 [style=dashed label="template-name"]
  804 -> 530 [style=dashed label="throw-expression"]
  804 -> 123 [style=dashed label="type-constraint"]
  804 -> 1300 [style=dashed label="type-id"]
  804 -> 124 [style=dashed label="type-name"]
  804 -> 216 [style=dashed label="type-specifier"]
  804 -> 447 [style=dashed label="type-specifier-seq"]
  804 -> 126 [style=dashed label="typedef-name"]
  804 -> 448 [style=dashed label="typename-specifier"]
  804 -> 449 [style=dashed label="unary-expression"]
  804 -> 450 [style=dashed label="unary-operator"]
  804 -> 129 [style=dashed label="unqualified-id"]
  804 -> 451 [style=dashed label="user-defined-character-literal"]
  804 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  804 -> 453 [style=dashed label="user-defined-integer-literal"]
  804 -> 454 [style=dashed label="user-defined-literal"]
  804 -> 455 [style=dashed label="user-defined-string-literal"]
  804 -> 532 [style=dashed label="yield-expression"]
  805 [label="State 805\n\l671 new-expression: NEW new-placement • new-type-id\l675               | NEW new-placement • new-type-id new-initializer\l679               | NEW new-placement • OPEN_PAREN type-id CLOSE_PAREN\l683               | NEW new-placement • OPEN_PAREN type-id CLOSE_PAREN new-initializer\l"]
  805 -> 162 [style=solid label="IDENTIFIER"]
  805 -> 1301 [style=solid label="OPEN_PAREN"]
  805 -> 9 [style=solid label="SCOPE"]
  805 -> 12 [style=solid label="CLASS"]
  805 -> 13 [style=solid label="STRUCT"]
  805 -> 14 [style=solid label="UNION"]
  805 -> 18 [style=solid label="CONST"]
  805 -> 19 [style=solid label="VOLATILE"]
  805 -> 26 [style=solid label="DECLTYPE"]
  805 -> 135 [style=solid label="ENUM"]
  805 -> 36 [style=solid label="AUTO"]
  805 -> 37 [style=solid label="CHAR"]
  805 -> 38 [style=solid label="CHAR8_T"]
  805 -> 39 [style=solid label="CHAR16_T"]
  805 -> 40 [style=solid label="CHAR32_T"]
  805 -> 41 [style=solid label="WCHAR_T"]
  805 -> 42 [style=solid label="BOOL"]
  805 -> 43 [style=solid label="SHORT"]
  805 -> 44 [style=solid label="INT"]
  805 -> 45 [style=solid label="LONG"]
  805 -> 46 [style=solid label="SIGNED"]
  805 -> 47 [style=solid label="UNSIGNED"]
  805 -> 48 [style=solid label="FLOAT"]
  805 -> 49 [style=solid label="DOUBLE"]
  805 -> 50 [style=solid label="VOID"]
  805 -> 55 [style=solid label="TYPENAME"]
  805 -> 209 [style=dashed label="class-key"]
  805 -> 65 [style=dashed label="class-name"]
  805 -> 67 [style=dashed label="concept-name"]
  805 -> 69 [style=dashed label="cv-qualifier"]
  805 -> 76 [style=dashed label="decltype-specifier"]
  805 -> 79 [style=dashed label="elaborated-enum-specifier"]
  805 -> 80 [style=dashed label="elaborated-type-specifier"]
  805 -> 84 [style=dashed label="enum-name"]
  805 -> 99 [style=dashed label="namespace-alias"]
  805 -> 102 [style=dashed label="namespace-name"]
  805 -> 212 [style=dashed label="nested-name-specifier"]
  805 -> 1302 [style=dashed label="new-type-id"]
  805 -> 109 [style=dashed label="placeholder-type-specifier"]
  805 -> 141 [style=dashed label="simple-template-id"]
  805 -> 115 [style=dashed label="simple-type-specifier"]
  805 -> 215 [style=dashed label="template-name"]
  805 -> 123 [style=dashed label="type-constraint"]
  805 -> 124 [style=dashed label="type-name"]
  805 -> 216 [style=dashed label="type-specifier"]
  805 -> 807 [style=dashed label="type-specifier-seq"]
  805 -> 126 [style=dashed label="typedef-name"]
  805 -> 127 [style=dashed label="typename-specifier"]
  806 [label="State 806\n\l669 new-expression: NEW new-type-id •\l673               | NEW new-type-id • new-initializer\l"]
  806 -> 1303 [style=solid label="OPEN_PAREN"]
  806 -> 935 [style=solid label="OPEN_BRACE"]
  806 -> 1304 [style=dashed label="braced-init-list"]
  806 -> 1305 [style=dashed label="new-initializer"]
  806 -> "806R669d" [label="[OPEN_BRACE]", style=solid]
 "806R669d" [label="R669", fillcolor=5, shape=diamond, style=filled]
  806 -> "806R669" [style=solid]
 "806R669" [label="R669", fillcolor=3, shape=diamond, style=filled]
  807 [label="State 807\n\l688 new-type-id: type-specifier-seq •\l689            | type-specifier-seq • new-declarator\l"]
  807 -> 253 [style=solid label="IDENTIFIER"]
  807 -> 7 [style=solid label="AND"]
  807 -> 9 [style=solid label="SCOPE"]
  807 -> 1306 [style=solid label="OPEN_SQUARE"]
  807 -> 16 [style=solid label="AND_AND"]
  807 -> 134 [style=solid label="DECLTYPE"]
  807 -> 31 [style=solid label="MULT"]
  807 -> 65 [style=dashed label="class-name"]
  807 -> 138 [style=dashed label="decltype-specifier"]
  807 -> 84 [style=dashed label="enum-name"]
  807 -> 99 [style=dashed label="namespace-alias"]
  807 -> 102 [style=dashed label="namespace-name"]
  807 -> 517 [style=dashed label="nested-name-specifier"]
  807 -> 1307 [style=dashed label="new-declarator"]
  807 -> 1308 [style=dashed label="noptr-new-declarator"]
  807 -> 1309 [style=dashed label="ptr-operator"]
  807 -> 141 [style=dashed label="simple-template-id"]
  807 -> 142 [style=dashed label="template-name"]
  807 -> 143 [style=dashed label="type-name"]
  807 -> 126 [style=dashed label="typedef-name"]
  807 -> "807R688d" [label="[AND, AND_AND, MULT]", style=solid]
 "807R688d" [label="R688", fillcolor=5, shape=diamond, style=filled]
  807 -> "807R688" [style=solid]
 "807R688" [label="R688", fillcolor=3, shape=diamond, style=filled]
  808 [label="State 808\n\l1118 unary-expression: PLUS_PLUS cast-expression •\l"]
  808 -> "808R1118" [style=solid]
 "808R1118" [label="R1118", fillcolor=3, shape=diamond, style=filled]
  809 [label="State 809\n\l1119 unary-expression: MINUS_MINUS cast-expression •\l"]
  809 -> "809R1119" [style=solid]
 "809R1119" [label="R1119", fillcolor=3, shape=diamond, style=filled]
  810 [label="State 810\n\l873 postfix-expression: DYNAMIC_CAST LESS • type-id GREATER OPEN_PAREN expression CLOSE_PAREN\l"]
  810 -> 162 [style=solid label="IDENTIFIER"]
  810 -> 9 [style=solid label="SCOPE"]
  810 -> 12 [style=solid label="CLASS"]
  810 -> 13 [style=solid label="STRUCT"]
  810 -> 14 [style=solid label="UNION"]
  810 -> 18 [style=solid label="CONST"]
  810 -> 19 [style=solid label="VOLATILE"]
  810 -> 26 [style=solid label="DECLTYPE"]
  810 -> 135 [style=solid label="ENUM"]
  810 -> 36 [style=solid label="AUTO"]
  810 -> 37 [style=solid label="CHAR"]
  810 -> 38 [style=solid label="CHAR8_T"]
  810 -> 39 [style=solid label="CHAR16_T"]
  810 -> 40 [style=solid label="CHAR32_T"]
  810 -> 41 [style=solid label="WCHAR_T"]
  810 -> 42 [style=solid label="BOOL"]
  810 -> 43 [style=solid label="SHORT"]
  810 -> 44 [style=solid label="INT"]
  810 -> 45 [style=solid label="LONG"]
  810 -> 46 [style=solid label="SIGNED"]
  810 -> 47 [style=solid label="UNSIGNED"]
  810 -> 48 [style=solid label="FLOAT"]
  810 -> 49 [style=solid label="DOUBLE"]
  810 -> 50 [style=solid label="VOID"]
  810 -> 55 [style=solid label="TYPENAME"]
  810 -> 209 [style=dashed label="class-key"]
  810 -> 65 [style=dashed label="class-name"]
  810 -> 67 [style=dashed label="concept-name"]
  810 -> 69 [style=dashed label="cv-qualifier"]
  810 -> 76 [style=dashed label="decltype-specifier"]
  810 -> 79 [style=dashed label="elaborated-enum-specifier"]
  810 -> 80 [style=dashed label="elaborated-type-specifier"]
  810 -> 84 [style=dashed label="enum-name"]
  810 -> 99 [style=dashed label="namespace-alias"]
  810 -> 102 [style=dashed label="namespace-name"]
  810 -> 212 [style=dashed label="nested-name-specifier"]
  810 -> 109 [style=dashed label="placeholder-type-specifier"]
  810 -> 141 [style=dashed label="simple-template-id"]
  810 -> 115 [style=dashed label="simple-type-specifier"]
  810 -> 215 [style=dashed label="template-name"]
  810 -> 123 [style=dashed label="type-constraint"]
  810 -> 1310 [style=dashed label="type-id"]
  810 -> 124 [style=dashed label="type-name"]
  810 -> 216 [style=dashed label="type-specifier"]
  810 -> 447 [style=dashed label="type-specifier-seq"]
  810 -> 126 [style=dashed label="typedef-name"]
  810 -> 127 [style=dashed label="typename-specifier"]
  811 [label="State 811\n\l874 postfix-expression: STATIC_CAST LESS • type-id GREATER OPEN_PAREN expression CLOSE_PAREN\l"]
  811 -> 162 [style=solid label="IDENTIFIER"]
  811 -> 9 [style=solid label="SCOPE"]
  811 -> 12 [style=solid label="CLASS"]
  811 -> 13 [style=solid label="STRUCT"]
  811 -> 14 [style=solid label="UNION"]
  811 -> 18 [style=solid label="CONST"]
  811 -> 19 [style=solid label="VOLATILE"]
  811 -> 26 [style=solid label="DECLTYPE"]
  811 -> 135 [style=solid label="ENUM"]
  811 -> 36 [style=solid label="AUTO"]
  811 -> 37 [style=solid label="CHAR"]
  811 -> 38 [style=solid label="CHAR8_T"]
  811 -> 39 [style=solid label="CHAR16_T"]
  811 -> 40 [style=solid label="CHAR32_T"]
  811 -> 41 [style=solid label="WCHAR_T"]
  811 -> 42 [style=solid label="BOOL"]
  811 -> 43 [style=solid label="SHORT"]
  811 -> 44 [style=solid label="INT"]
  811 -> 45 [style=solid label="LONG"]
  811 -> 46 [style=solid label="SIGNED"]
  811 -> 47 [style=solid label="UNSIGNED"]
  811 -> 48 [style=solid label="FLOAT"]
  811 -> 49 [style=solid label="DOUBLE"]
  811 -> 50 [style=solid label="VOID"]
  811 -> 55 [style=solid label="TYPENAME"]
  811 -> 209 [style=dashed label="class-key"]
  811 -> 65 [style=dashed label="class-name"]
  811 -> 67 [style=dashed label="concept-name"]
  811 -> 69 [style=dashed label="cv-qualifier"]
  811 -> 76 [style=dashed label="decltype-specifier"]
  811 -> 79 [style=dashed label="elaborated-enum-specifier"]
  811 -> 80 [style=dashed label="elaborated-type-specifier"]
  811 -> 84 [style=dashed label="enum-name"]
  811 -> 99 [style=dashed label="namespace-alias"]
  811 -> 102 [style=dashed label="namespace-name"]
  811 -> 212 [style=dashed label="nested-name-specifier"]
  811 -> 109 [style=dashed label="placeholder-type-specifier"]
  811 -> 141 [style=dashed label="simple-template-id"]
  811 -> 115 [style=dashed label="simple-type-specifier"]
  811 -> 215 [style=dashed label="template-name"]
  811 -> 123 [style=dashed label="type-constraint"]
  811 -> 1311 [style=dashed label="type-id"]
  811 -> 124 [style=dashed label="type-name"]
  811 -> 216 [style=dashed label="type-specifier"]
  811 -> 447 [style=dashed label="type-specifier-seq"]
  811 -> 126 [style=dashed label="typedef-name"]
  811 -> 127 [style=dashed label="typename-specifier"]
  812 [label="State 812\n\l875 postfix-expression: REINTERPRET_CAST LESS • type-id GREATER OPEN_PAREN expression CLOSE_PAREN\l"]
  812 -> 162 [style=solid label="IDENTIFIER"]
  812 -> 9 [style=solid label="SCOPE"]
  812 -> 12 [style=solid label="CLASS"]
  812 -> 13 [style=solid label="STRUCT"]
  812 -> 14 [style=solid label="UNION"]
  812 -> 18 [style=solid label="CONST"]
  812 -> 19 [style=solid label="VOLATILE"]
  812 -> 26 [style=solid label="DECLTYPE"]
  812 -> 135 [style=solid label="ENUM"]
  812 -> 36 [style=solid label="AUTO"]
  812 -> 37 [style=solid label="CHAR"]
  812 -> 38 [style=solid label="CHAR8_T"]
  812 -> 39 [style=solid label="CHAR16_T"]
  812 -> 40 [style=solid label="CHAR32_T"]
  812 -> 41 [style=solid label="WCHAR_T"]
  812 -> 42 [style=solid label="BOOL"]
  812 -> 43 [style=solid label="SHORT"]
  812 -> 44 [style=solid label="INT"]
  812 -> 45 [style=solid label="LONG"]
  812 -> 46 [style=solid label="SIGNED"]
  812 -> 47 [style=solid label="UNSIGNED"]
  812 -> 48 [style=solid label="FLOAT"]
  812 -> 49 [style=solid label="DOUBLE"]
  812 -> 50 [style=solid label="VOID"]
  812 -> 55 [style=solid label="TYPENAME"]
  812 -> 209 [style=dashed label="class-key"]
  812 -> 65 [style=dashed label="class-name"]
  812 -> 67 [style=dashed label="concept-name"]
  812 -> 69 [style=dashed label="cv-qualifier"]
  812 -> 76 [style=dashed label="decltype-specifier"]
  812 -> 79 [style=dashed label="elaborated-enum-specifier"]
  812 -> 80 [style=dashed label="elaborated-type-specifier"]
  812 -> 84 [style=dashed label="enum-name"]
  812 -> 99 [style=dashed label="namespace-alias"]
  812 -> 102 [style=dashed label="namespace-name"]
  812 -> 212 [style=dashed label="nested-name-specifier"]
  812 -> 109 [style=dashed label="placeholder-type-specifier"]
  812 -> 141 [style=dashed label="simple-template-id"]
  812 -> 115 [style=dashed label="simple-type-specifier"]
  812 -> 215 [style=dashed label="template-name"]
  812 -> 123 [style=dashed label="type-constraint"]
  812 -> 1312 [style=dashed label="type-id"]
  812 -> 124 [style=dashed label="type-name"]
  812 -> 216 [style=dashed label="type-specifier"]
  812 -> 447 [style=dashed label="type-specifier-seq"]
  812 -> 126 [style=dashed label="typedef-name"]
  812 -> 127 [style=dashed label="typename-specifier"]
  813 [label="State 813\n\l876 postfix-expression: CONST_CAST LESS • type-id GREATER OPEN_PAREN expression CLOSE_PAREN\l"]
  813 -> 162 [style=solid label="IDENTIFIER"]
  813 -> 9 [style=solid label="SCOPE"]
  813 -> 12 [style=solid label="CLASS"]
  813 -> 13 [style=solid label="STRUCT"]
  813 -> 14 [style=solid label="UNION"]
  813 -> 18 [style=solid label="CONST"]
  813 -> 19 [style=solid label="VOLATILE"]
  813 -> 26 [style=solid label="DECLTYPE"]
  813 -> 135 [style=solid label="ENUM"]
  813 -> 36 [style=solid label="AUTO"]
  813 -> 37 [style=solid label="CHAR"]
  813 -> 38 [style=solid label="CHAR8_T"]
  813 -> 39 [style=solid label="CHAR16_T"]
  813 -> 40 [style=solid label="CHAR32_T"]
  813 -> 41 [style=solid label="WCHAR_T"]
  813 -> 42 [style=solid label="BOOL"]
  813 -> 43 [style=solid label="SHORT"]
  813 -> 44 [style=solid label="INT"]
  813 -> 45 [style=solid label="LONG"]
  813 -> 46 [style=solid label="SIGNED"]
  813 -> 47 [style=solid label="UNSIGNED"]
  813 -> 48 [style=solid label="FLOAT"]
  813 -> 49 [style=solid label="DOUBLE"]
  813 -> 50 [style=solid label="VOID"]
  813 -> 55 [style=solid label="TYPENAME"]
  813 -> 209 [style=dashed label="class-key"]
  813 -> 65 [style=dashed label="class-name"]
  813 -> 67 [style=dashed label="concept-name"]
  813 -> 69 [style=dashed label="cv-qualifier"]
  813 -> 76 [style=dashed label="decltype-specifier"]
  813 -> 79 [style=dashed label="elaborated-enum-specifier"]
  813 -> 80 [style=dashed label="elaborated-type-specifier"]
  813 -> 84 [style=dashed label="enum-name"]
  813 -> 99 [style=dashed label="namespace-alias"]
  813 -> 102 [style=dashed label="namespace-name"]
  813 -> 212 [style=dashed label="nested-name-specifier"]
  813 -> 109 [style=dashed label="placeholder-type-specifier"]
  813 -> 141 [style=dashed label="simple-template-id"]
  813 -> 115 [style=dashed label="simple-type-specifier"]
  813 -> 215 [style=dashed label="template-name"]
  813 -> 123 [style=dashed label="type-constraint"]
  813 -> 1313 [style=dashed label="type-id"]
  813 -> 124 [style=dashed label="type-name"]
  813 -> 216 [style=dashed label="type-specifier"]
  813 -> 447 [style=dashed label="type-specifier-seq"]
  813 -> 126 [style=dashed label="typedef-name"]
  813 -> 127 [style=dashed label="typename-specifier"]
  814 [label="State 814\n\l877 postfix-expression: TYPEID OPEN_PAREN • expression CLOSE_PAREN\l878                   | TYPEID OPEN_PAREN • type-id CLOSE_PAREN\l"]
  814 -> 356 [style=solid label="PLUS"]
  814 -> 357 [style=solid label="MINUS"]
  814 -> 2 [style=solid label="IDENTIFIER"]
  814 -> 358 [style=solid label="OPEN_PAREN"]
  814 -> 359 [style=solid label="AND"]
  814 -> 360 [style=solid label="SCOPE"]
  814 -> 361 [style=solid label="OPEN_SQUARE"]
  814 -> 362 [style=solid label="CO_AWAIT"]
  814 -> 363 [style=solid label="ZERO_LB"]
  814 -> 364 [style=solid label="ZERO_HB"]
  814 -> 365 [style=solid label="SINGLE_QUOTE"]
  814 -> 366 [style=solid label="FALSE"]
  814 -> 367 [style=solid label="TRUE"]
  814 -> 12 [style=solid label="CLASS"]
  814 -> 13 [style=solid label="STRUCT"]
  814 -> 14 [style=solid label="UNION"]
  814 -> 368 [style=solid label="NOEXCEPT"]
  814 -> 17 [style=solid label="OPERATOR"]
  814 -> 18 [style=solid label="CONST"]
  814 -> 19 [style=solid label="VOLATILE"]
  814 -> 26 [style=solid label="DECLTYPE"]
  814 -> 369 [style=solid label="DELETE"]
  814 -> 370 [style=solid label="DOT"]
  814 -> 135 [style=solid label="ENUM"]
  814 -> 184 [style=solid label="UNICODE_8"]
  814 -> 371 [style=solid label="MULT"]
  814 -> 199 [style=solid label="DOUBLE_QUOTE"]
  814 -> 372 [style=solid label="ZERO_LX"]
  814 -> 373 [style=solid label="ZERO_HX"]
  814 -> 374 [style=solid label="REQUIRES"]
  814 -> 375 [style=solid label="NEW"]
  814 -> 376 [style=solid label="COMPL"]
  814 -> 377 [style=solid label="NOT"]
  814 -> 378 [style=solid label="PLUS_PLUS"]
  814 -> 379 [style=solid label="MINUS_MINUS"]
  814 -> 380 [style=solid label="THIS"]
  814 -> 36 [style=solid label="AUTO"]
  814 -> 381 [style=solid label="NULLPTR"]
  814 -> 382 [style=solid label="DYNAMIC_CAST"]
  814 -> 383 [style=solid label="STATIC_CAST"]
  814 -> 384 [style=solid label="REINTERPRET_CAST"]
  814 -> 385 [style=solid label="CONST_CAST"]
  814 -> 386 [style=solid label="TYPEID"]
  814 -> 37 [style=solid label="CHAR"]
  814 -> 38 [style=solid label="CHAR8_T"]
  814 -> 39 [style=solid label="CHAR16_T"]
  814 -> 40 [style=solid label="CHAR32_T"]
  814 -> 41 [style=solid label="WCHAR_T"]
  814 -> 42 [style=solid label="BOOL"]
  814 -> 43 [style=solid label="SHORT"]
  814 -> 44 [style=solid label="INT"]
  814 -> 45 [style=solid label="LONG"]
  814 -> 46 [style=solid label="SIGNED"]
  814 -> 47 [style=solid label="UNSIGNED"]
  814 -> 48 [style=solid label="FLOAT"]
  814 -> 49 [style=solid label="DOUBLE"]
  814 -> 50 [style=solid label="VOID"]
  814 -> 523 [style=solid label="THROW"]
  814 -> 55 [style=solid label="TYPENAME"]
  814 -> 387 [style=solid label="SIZEOF"]
  814 -> 388 [style=solid label="ALIGNOF"]
  814 -> 524 [style=solid label="CO_YIELD"]
  814 -> 389 [style=solid label="'0'"]
  814 -> 390 [style=solid label="'1'"]
  814 -> 391 [style=solid label="'2'"]
  814 -> 392 [style=solid label="'3'"]
  814 -> 393 [style=solid label="'4'"]
  814 -> 394 [style=solid label="'5'"]
  814 -> 395 [style=solid label="'6'"]
  814 -> 396 [style=solid label="'7'"]
  814 -> 397 [style=solid label="'8'"]
  814 -> 398 [style=solid label="'9'"]
  814 -> 205 [style=solid label="'u'"]
  814 -> 206 [style=solid label="'U'"]
  814 -> 207 [style=solid label="'L'"]
  814 -> 208 [style=solid label="'R'"]
  814 -> 399 [style=dashed label="additive-expression"]
  814 -> 400 [style=dashed label="and-expression"]
  814 -> 525 [style=dashed label="assignment-expression"]
  814 -> 401 [style=dashed label="await-expression"]
  814 -> 402 [style=dashed label="binary-literal"]
  814 -> 403 [style=dashed label="boolean-literal"]
  814 -> 404 [style=dashed label="cast-expression"]
  814 -> 405 [style=dashed label="character-literal"]
  814 -> 209 [style=dashed label="class-key"]
  814 -> 65 [style=dashed label="class-name"]
  814 -> 406 [style=dashed label="compare-expression"]
  814 -> 67 [style=dashed label="concept-name"]
  814 -> 526 [style=dashed label="conditional-expression"]
  814 -> 68 [style=dashed label="conversion-function-id"]
  814 -> 69 [style=dashed label="cv-qualifier"]
  814 -> 409 [style=dashed label="decimal-floating-point-literal"]
  814 -> 410 [style=dashed label="decimal-literal"]
  814 -> 76 [style=dashed label="decltype-specifier"]
  814 -> 411 [style=dashed label="delete-expression"]
  814 -> 412 [style=dashed label="digit"]
  814 -> 413 [style=dashed label="digit-sequence"]
  814 -> 79 [style=dashed label="elaborated-enum-specifier"]
  814 -> 80 [style=dashed label="elaborated-type-specifier"]
  814 -> 414 [style=dashed label="encoding-prefix"]
  814 -> 84 [style=dashed label="enum-name"]
  814 -> 415 [style=dashed label="equality-expression"]
  814 -> 416 [style=dashed label="exclusive-or-expression"]
  814 -> 1314 [style=dashed label="expression"]
  814 -> 417 [style=dashed label="floating-point-literal"]
  814 -> 418 [style=dashed label="fold-expression"]
  814 -> 419 [style=dashed label="fractional-constant"]
  814 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  814 -> 421 [style=dashed label="hexadecimal-literal"]
  814 -> 422 [style=dashed label="hexadecimal-prefix"]
  814 -> 423 [style=dashed label="id-expression"]
  814 -> 424 [style=dashed label="inclusive-or-expression"]
  814 -> 425 [style=dashed label="integer-literal"]
  814 -> 426 [style=dashed label="lambda-expression"]
  814 -> 427 [style=dashed label="lambda-introducer"]
  814 -> 428 [style=dashed label="literal"]
  814 -> 95 [style=dashed label="literal-operator-id"]
  814 -> 429 [style=dashed label="logical-and-expression"]
  814 -> 528 [style=dashed label="logical-or-expression"]
  814 -> 431 [style=dashed label="multiplicative-expression"]
  814 -> 99 [style=dashed label="namespace-alias"]
  814 -> 102 [style=dashed label="namespace-name"]
  814 -> 432 [style=dashed label="nested-name-specifier"]
  814 -> 433 [style=dashed label="new-expression"]
  814 -> 434 [style=dashed label="noexcept-expression"]
  814 -> 435 [style=dashed label="nonzero-digit"]
  814 -> 436 [style=dashed label="octal-literal"]
  814 -> 108 [style=dashed label="operator-function-id"]
  814 -> 109 [style=dashed label="placeholder-type-specifier"]
  814 -> 437 [style=dashed label="pm-expression"]
  814 -> 438 [style=dashed label="pointer-literal"]
  814 -> 439 [style=dashed label="postfix-expression"]
  814 -> 440 [style=dashed label="primary-expression"]
  814 -> 112 [style=dashed label="qualified-id"]
  814 -> 441 [style=dashed label="relational-expression"]
  814 -> 442 [style=dashed label="requires-expression"]
  814 -> 443 [style=dashed label="shift-expression"]
  814 -> 114 [style=dashed label="simple-template-id"]
  814 -> 444 [style=dashed label="simple-type-specifier"]
  814 -> 445 [style=dashed label="string-literal"]
  814 -> 120 [style=dashed label="template-id"]
  814 -> 215 [style=dashed label="template-name"]
  814 -> 530 [style=dashed label="throw-expression"]
  814 -> 123 [style=dashed label="type-constraint"]
  814 -> 1315 [style=dashed label="type-id"]
  814 -> 124 [style=dashed label="type-name"]
  814 -> 216 [style=dashed label="type-specifier"]
  814 -> 447 [style=dashed label="type-specifier-seq"]
  814 -> 126 [style=dashed label="typedef-name"]
  814 -> 448 [style=dashed label="typename-specifier"]
  814 -> 449 [style=dashed label="unary-expression"]
  814 -> 450 [style=dashed label="unary-operator"]
  814 -> 129 [style=dashed label="unqualified-id"]
  814 -> 451 [style=dashed label="user-defined-character-literal"]
  814 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  814 -> 453 [style=dashed label="user-defined-integer-literal"]
  814 -> 454 [style=dashed label="user-defined-literal"]
  814 -> 455 [style=dashed label="user-defined-string-literal"]
  814 -> 532 [style=dashed label="yield-expression"]
  815 [label="State 815\n\l345 fold-expression: OPEN_PAREN • cast-expression fold-operator ELLIPSIS CLOSE_PAREN\l346                | OPEN_PAREN • ELLIPSIS fold-operator cast-expression CLOSE_PAREN\l347                | OPEN_PAREN • cast-expression fold-operator ELLIPSIS fold-operator cast-expression CLOSE_PAREN\l881 primary-expression: OPEN_PAREN • expression CLOSE_PAREN\l1122 unary-expression: SIZEOF OPEN_PAREN • type-id CLOSE_PAREN\l"]
  815 -> 356 [style=solid label="PLUS"]
  815 -> 357 [style=solid label="MINUS"]
  815 -> 2 [style=solid label="IDENTIFIER"]
  815 -> 358 [style=solid label="OPEN_PAREN"]
  815 -> 756 [style=solid label="ELLIPSIS"]
  815 -> 359 [style=solid label="AND"]
  815 -> 360 [style=solid label="SCOPE"]
  815 -> 361 [style=solid label="OPEN_SQUARE"]
  815 -> 362 [style=solid label="CO_AWAIT"]
  815 -> 363 [style=solid label="ZERO_LB"]
  815 -> 364 [style=solid label="ZERO_HB"]
  815 -> 365 [style=solid label="SINGLE_QUOTE"]
  815 -> 366 [style=solid label="FALSE"]
  815 -> 367 [style=solid label="TRUE"]
  815 -> 12 [style=solid label="CLASS"]
  815 -> 13 [style=solid label="STRUCT"]
  815 -> 14 [style=solid label="UNION"]
  815 -> 368 [style=solid label="NOEXCEPT"]
  815 -> 17 [style=solid label="OPERATOR"]
  815 -> 18 [style=solid label="CONST"]
  815 -> 19 [style=solid label="VOLATILE"]
  815 -> 26 [style=solid label="DECLTYPE"]
  815 -> 369 [style=solid label="DELETE"]
  815 -> 370 [style=solid label="DOT"]
  815 -> 135 [style=solid label="ENUM"]
  815 -> 184 [style=solid label="UNICODE_8"]
  815 -> 371 [style=solid label="MULT"]
  815 -> 199 [style=solid label="DOUBLE_QUOTE"]
  815 -> 372 [style=solid label="ZERO_LX"]
  815 -> 373 [style=solid label="ZERO_HX"]
  815 -> 374 [style=solid label="REQUIRES"]
  815 -> 375 [style=solid label="NEW"]
  815 -> 376 [style=solid label="COMPL"]
  815 -> 377 [style=solid label="NOT"]
  815 -> 378 [style=solid label="PLUS_PLUS"]
  815 -> 379 [style=solid label="MINUS_MINUS"]
  815 -> 380 [style=solid label="THIS"]
  815 -> 36 [style=solid label="AUTO"]
  815 -> 381 [style=solid label="NULLPTR"]
  815 -> 382 [style=solid label="DYNAMIC_CAST"]
  815 -> 383 [style=solid label="STATIC_CAST"]
  815 -> 384 [style=solid label="REINTERPRET_CAST"]
  815 -> 385 [style=solid label="CONST_CAST"]
  815 -> 386 [style=solid label="TYPEID"]
  815 -> 37 [style=solid label="CHAR"]
  815 -> 38 [style=solid label="CHAR8_T"]
  815 -> 39 [style=solid label="CHAR16_T"]
  815 -> 40 [style=solid label="CHAR32_T"]
  815 -> 41 [style=solid label="WCHAR_T"]
  815 -> 42 [style=solid label="BOOL"]
  815 -> 43 [style=solid label="SHORT"]
  815 -> 44 [style=solid label="INT"]
  815 -> 45 [style=solid label="LONG"]
  815 -> 46 [style=solid label="SIGNED"]
  815 -> 47 [style=solid label="UNSIGNED"]
  815 -> 48 [style=solid label="FLOAT"]
  815 -> 49 [style=solid label="DOUBLE"]
  815 -> 50 [style=solid label="VOID"]
  815 -> 523 [style=solid label="THROW"]
  815 -> 55 [style=solid label="TYPENAME"]
  815 -> 387 [style=solid label="SIZEOF"]
  815 -> 388 [style=solid label="ALIGNOF"]
  815 -> 524 [style=solid label="CO_YIELD"]
  815 -> 389 [style=solid label="'0'"]
  815 -> 390 [style=solid label="'1'"]
  815 -> 391 [style=solid label="'2'"]
  815 -> 392 [style=solid label="'3'"]
  815 -> 393 [style=solid label="'4'"]
  815 -> 394 [style=solid label="'5'"]
  815 -> 395 [style=solid label="'6'"]
  815 -> 396 [style=solid label="'7'"]
  815 -> 397 [style=solid label="'8'"]
  815 -> 398 [style=solid label="'9'"]
  815 -> 205 [style=solid label="'u'"]
  815 -> 206 [style=solid label="'U'"]
  815 -> 207 [style=solid label="'L'"]
  815 -> 208 [style=solid label="'R'"]
  815 -> 399 [style=dashed label="additive-expression"]
  815 -> 400 [style=dashed label="and-expression"]
  815 -> 525 [style=dashed label="assignment-expression"]
  815 -> 401 [style=dashed label="await-expression"]
  815 -> 402 [style=dashed label="binary-literal"]
  815 -> 403 [style=dashed label="boolean-literal"]
  815 -> 757 [style=dashed label="cast-expression"]
  815 -> 405 [style=dashed label="character-literal"]
  815 -> 209 [style=dashed label="class-key"]
  815 -> 65 [style=dashed label="class-name"]
  815 -> 406 [style=dashed label="compare-expression"]
  815 -> 67 [style=dashed label="concept-name"]
  815 -> 526 [style=dashed label="conditional-expression"]
  815 -> 68 [style=dashed label="conversion-function-id"]
  815 -> 69 [style=dashed label="cv-qualifier"]
  815 -> 409 [style=dashed label="decimal-floating-point-literal"]
  815 -> 410 [style=dashed label="decimal-literal"]
  815 -> 76 [style=dashed label="decltype-specifier"]
  815 -> 411 [style=dashed label="delete-expression"]
  815 -> 412 [style=dashed label="digit"]
  815 -> 413 [style=dashed label="digit-sequence"]
  815 -> 79 [style=dashed label="elaborated-enum-specifier"]
  815 -> 80 [style=dashed label="elaborated-type-specifier"]
  815 -> 414 [style=dashed label="encoding-prefix"]
  815 -> 84 [style=dashed label="enum-name"]
  815 -> 415 [style=dashed label="equality-expression"]
  815 -> 416 [style=dashed label="exclusive-or-expression"]
  815 -> 758 [style=dashed label="expression"]
  815 -> 417 [style=dashed label="floating-point-literal"]
  815 -> 418 [style=dashed label="fold-expression"]
  815 -> 419 [style=dashed label="fractional-constant"]
  815 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  815 -> 421 [style=dashed label="hexadecimal-literal"]
  815 -> 422 [style=dashed label="hexadecimal-prefix"]
  815 -> 423 [style=dashed label="id-expression"]
  815 -> 424 [style=dashed label="inclusive-or-expression"]
  815 -> 425 [style=dashed label="integer-literal"]
  815 -> 426 [style=dashed label="lambda-expression"]
  815 -> 427 [style=dashed label="lambda-introducer"]
  815 -> 428 [style=dashed label="literal"]
  815 -> 95 [style=dashed label="literal-operator-id"]
  815 -> 429 [style=dashed label="logical-and-expression"]
  815 -> 528 [style=dashed label="logical-or-expression"]
  815 -> 431 [style=dashed label="multiplicative-expression"]
  815 -> 99 [style=dashed label="namespace-alias"]
  815 -> 102 [style=dashed label="namespace-name"]
  815 -> 432 [style=dashed label="nested-name-specifier"]
  815 -> 433 [style=dashed label="new-expression"]
  815 -> 434 [style=dashed label="noexcept-expression"]
  815 -> 435 [style=dashed label="nonzero-digit"]
  815 -> 436 [style=dashed label="octal-literal"]
  815 -> 108 [style=dashed label="operator-function-id"]
  815 -> 109 [style=dashed label="placeholder-type-specifier"]
  815 -> 437 [style=dashed label="pm-expression"]
  815 -> 438 [style=dashed label="pointer-literal"]
  815 -> 439 [style=dashed label="postfix-expression"]
  815 -> 440 [style=dashed label="primary-expression"]
  815 -> 112 [style=dashed label="qualified-id"]
  815 -> 441 [style=dashed label="relational-expression"]
  815 -> 442 [style=dashed label="requires-expression"]
  815 -> 443 [style=dashed label="shift-expression"]
  815 -> 114 [style=dashed label="simple-template-id"]
  815 -> 444 [style=dashed label="simple-type-specifier"]
  815 -> 445 [style=dashed label="string-literal"]
  815 -> 120 [style=dashed label="template-id"]
  815 -> 215 [style=dashed label="template-name"]
  815 -> 530 [style=dashed label="throw-expression"]
  815 -> 123 [style=dashed label="type-constraint"]
  815 -> 1316 [style=dashed label="type-id"]
  815 -> 124 [style=dashed label="type-name"]
  815 -> 216 [style=dashed label="type-specifier"]
  815 -> 447 [style=dashed label="type-specifier-seq"]
  815 -> 126 [style=dashed label="typedef-name"]
  815 -> 448 [style=dashed label="typename-specifier"]
  815 -> 449 [style=dashed label="unary-expression"]
  815 -> 450 [style=dashed label="unary-operator"]
  815 -> 129 [style=dashed label="unqualified-id"]
  815 -> 451 [style=dashed label="user-defined-character-literal"]
  815 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  815 -> 453 [style=dashed label="user-defined-integer-literal"]
  815 -> 454 [style=dashed label="user-defined-literal"]
  815 -> 455 [style=dashed label="user-defined-string-literal"]
  815 -> 532 [style=dashed label="yield-expression"]
  816 [label="State 816\n\l1123 unary-expression: SIZEOF ELLIPSIS • OPEN_PAREN IDENTIFIER CLOSE_PAREN\l"]
  816 -> 1317 [style=solid label="OPEN_PAREN"]
  817 [label="State 817\n\l1121 unary-expression: SIZEOF unary-expression •\l"]
  817 -> "817R1121" [style=solid]
 "817R1121" [label="R1121", fillcolor=3, shape=diamond, style=filled]
  818 [label="State 818\n\l1124 unary-expression: ALIGNOF OPEN_PAREN • type-id CLOSE_PAREN\l"]
  818 -> 162 [style=solid label="IDENTIFIER"]
  818 -> 9 [style=solid label="SCOPE"]
  818 -> 12 [style=solid label="CLASS"]
  818 -> 13 [style=solid label="STRUCT"]
  818 -> 14 [style=solid label="UNION"]
  818 -> 18 [style=solid label="CONST"]
  818 -> 19 [style=solid label="VOLATILE"]
  818 -> 26 [style=solid label="DECLTYPE"]
  818 -> 135 [style=solid label="ENUM"]
  818 -> 36 [style=solid label="AUTO"]
  818 -> 37 [style=solid label="CHAR"]
  818 -> 38 [style=solid label="CHAR8_T"]
  818 -> 39 [style=solid label="CHAR16_T"]
  818 -> 40 [style=solid label="CHAR32_T"]
  818 -> 41 [style=solid label="WCHAR_T"]
  818 -> 42 [style=solid label="BOOL"]
  818 -> 43 [style=solid label="SHORT"]
  818 -> 44 [style=solid label="INT"]
  818 -> 45 [style=solid label="LONG"]
  818 -> 46 [style=solid label="SIGNED"]
  818 -> 47 [style=solid label="UNSIGNED"]
  818 -> 48 [style=solid label="FLOAT"]
  818 -> 49 [style=solid label="DOUBLE"]
  818 -> 50 [style=solid label="VOID"]
  818 -> 55 [style=solid label="TYPENAME"]
  818 -> 209 [style=dashed label="class-key"]
  818 -> 65 [style=dashed label="class-name"]
  818 -> 67 [style=dashed label="concept-name"]
  818 -> 69 [style=dashed label="cv-qualifier"]
  818 -> 76 [style=dashed label="decltype-specifier"]
  818 -> 79 [style=dashed label="elaborated-enum-specifier"]
  818 -> 80 [style=dashed label="elaborated-type-specifier"]
  818 -> 84 [style=dashed label="enum-name"]
  818 -> 99 [style=dashed label="namespace-alias"]
  818 -> 102 [style=dashed label="namespace-name"]
  818 -> 212 [style=dashed label="nested-name-specifier"]
  818 -> 109 [style=dashed label="placeholder-type-specifier"]
  818 -> 141 [style=dashed label="simple-template-id"]
  818 -> 115 [style=dashed label="simple-type-specifier"]
  818 -> 215 [style=dashed label="template-name"]
  818 -> 123 [style=dashed label="type-constraint"]
  818 -> 1318 [style=dashed label="type-id"]
  818 -> 124 [style=dashed label="type-name"]
  818 -> 216 [style=dashed label="type-specifier"]
  818 -> 447 [style=dashed label="type-specifier-seq"]
  818 -> 126 [style=dashed label="typedef-name"]
  818 -> 127 [style=dashed label="typename-specifier"]
  819 [label="State 819\n\l 11 additive-expression: additive-expression PLUS • multiplicative-expression\l"]
  819 -> 356 [style=solid label="PLUS"]
  819 -> 357 [style=solid label="MINUS"]
  819 -> 2 [style=solid label="IDENTIFIER"]
  819 -> 358 [style=solid label="OPEN_PAREN"]
  819 -> 359 [style=solid label="AND"]
  819 -> 360 [style=solid label="SCOPE"]
  819 -> 361 [style=solid label="OPEN_SQUARE"]
  819 -> 362 [style=solid label="CO_AWAIT"]
  819 -> 363 [style=solid label="ZERO_LB"]
  819 -> 364 [style=solid label="ZERO_HB"]
  819 -> 365 [style=solid label="SINGLE_QUOTE"]
  819 -> 366 [style=solid label="FALSE"]
  819 -> 367 [style=solid label="TRUE"]
  819 -> 368 [style=solid label="NOEXCEPT"]
  819 -> 17 [style=solid label="OPERATOR"]
  819 -> 26 [style=solid label="DECLTYPE"]
  819 -> 369 [style=solid label="DELETE"]
  819 -> 370 [style=solid label="DOT"]
  819 -> 184 [style=solid label="UNICODE_8"]
  819 -> 371 [style=solid label="MULT"]
  819 -> 199 [style=solid label="DOUBLE_QUOTE"]
  819 -> 372 [style=solid label="ZERO_LX"]
  819 -> 373 [style=solid label="ZERO_HX"]
  819 -> 374 [style=solid label="REQUIRES"]
  819 -> 375 [style=solid label="NEW"]
  819 -> 376 [style=solid label="COMPL"]
  819 -> 377 [style=solid label="NOT"]
  819 -> 378 [style=solid label="PLUS_PLUS"]
  819 -> 379 [style=solid label="MINUS_MINUS"]
  819 -> 380 [style=solid label="THIS"]
  819 -> 36 [style=solid label="AUTO"]
  819 -> 381 [style=solid label="NULLPTR"]
  819 -> 382 [style=solid label="DYNAMIC_CAST"]
  819 -> 383 [style=solid label="STATIC_CAST"]
  819 -> 384 [style=solid label="REINTERPRET_CAST"]
  819 -> 385 [style=solid label="CONST_CAST"]
  819 -> 386 [style=solid label="TYPEID"]
  819 -> 37 [style=solid label="CHAR"]
  819 -> 38 [style=solid label="CHAR8_T"]
  819 -> 39 [style=solid label="CHAR16_T"]
  819 -> 40 [style=solid label="CHAR32_T"]
  819 -> 41 [style=solid label="WCHAR_T"]
  819 -> 42 [style=solid label="BOOL"]
  819 -> 43 [style=solid label="SHORT"]
  819 -> 44 [style=solid label="INT"]
  819 -> 45 [style=solid label="LONG"]
  819 -> 46 [style=solid label="SIGNED"]
  819 -> 47 [style=solid label="UNSIGNED"]
  819 -> 48 [style=solid label="FLOAT"]
  819 -> 49 [style=solid label="DOUBLE"]
  819 -> 50 [style=solid label="VOID"]
  819 -> 55 [style=solid label="TYPENAME"]
  819 -> 387 [style=solid label="SIZEOF"]
  819 -> 388 [style=solid label="ALIGNOF"]
  819 -> 389 [style=solid label="'0'"]
  819 -> 390 [style=solid label="'1'"]
  819 -> 391 [style=solid label="'2'"]
  819 -> 392 [style=solid label="'3'"]
  819 -> 393 [style=solid label="'4'"]
  819 -> 394 [style=solid label="'5'"]
  819 -> 395 [style=solid label="'6'"]
  819 -> 396 [style=solid label="'7'"]
  819 -> 397 [style=solid label="'8'"]
  819 -> 398 [style=solid label="'9'"]
  819 -> 205 [style=solid label="'u'"]
  819 -> 206 [style=solid label="'U'"]
  819 -> 207 [style=solid label="'L'"]
  819 -> 208 [style=solid label="'R'"]
  819 -> 401 [style=dashed label="await-expression"]
  819 -> 402 [style=dashed label="binary-literal"]
  819 -> 403 [style=dashed label="boolean-literal"]
  819 -> 404 [style=dashed label="cast-expression"]
  819 -> 405 [style=dashed label="character-literal"]
  819 -> 65 [style=dashed label="class-name"]
  819 -> 67 [style=dashed label="concept-name"]
  819 -> 68 [style=dashed label="conversion-function-id"]
  819 -> 409 [style=dashed label="decimal-floating-point-literal"]
  819 -> 410 [style=dashed label="decimal-literal"]
  819 -> 76 [style=dashed label="decltype-specifier"]
  819 -> 411 [style=dashed label="delete-expression"]
  819 -> 412 [style=dashed label="digit"]
  819 -> 413 [style=dashed label="digit-sequence"]
  819 -> 414 [style=dashed label="encoding-prefix"]
  819 -> 84 [style=dashed label="enum-name"]
  819 -> 417 [style=dashed label="floating-point-literal"]
  819 -> 418 [style=dashed label="fold-expression"]
  819 -> 419 [style=dashed label="fractional-constant"]
  819 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  819 -> 421 [style=dashed label="hexadecimal-literal"]
  819 -> 422 [style=dashed label="hexadecimal-prefix"]
  819 -> 423 [style=dashed label="id-expression"]
  819 -> 425 [style=dashed label="integer-literal"]
  819 -> 426 [style=dashed label="lambda-expression"]
  819 -> 427 [style=dashed label="lambda-introducer"]
  819 -> 428 [style=dashed label="literal"]
  819 -> 95 [style=dashed label="literal-operator-id"]
  819 -> 1319 [style=dashed label="multiplicative-expression"]
  819 -> 99 [style=dashed label="namespace-alias"]
  819 -> 102 [style=dashed label="namespace-name"]
  819 -> 432 [style=dashed label="nested-name-specifier"]
  819 -> 433 [style=dashed label="new-expression"]
  819 -> 434 [style=dashed label="noexcept-expression"]
  819 -> 435 [style=dashed label="nonzero-digit"]
  819 -> 436 [style=dashed label="octal-literal"]
  819 -> 108 [style=dashed label="operator-function-id"]
  819 -> 109 [style=dashed label="placeholder-type-specifier"]
  819 -> 437 [style=dashed label="pm-expression"]
  819 -> 438 [style=dashed label="pointer-literal"]
  819 -> 439 [style=dashed label="postfix-expression"]
  819 -> 440 [style=dashed label="primary-expression"]
  819 -> 112 [style=dashed label="qualified-id"]
  819 -> 442 [style=dashed label="requires-expression"]
  819 -> 114 [style=dashed label="simple-template-id"]
  819 -> 529 [style=dashed label="simple-type-specifier"]
  819 -> 445 [style=dashed label="string-literal"]
  819 -> 120 [style=dashed label="template-id"]
  819 -> 215 [style=dashed label="template-name"]
  819 -> 123 [style=dashed label="type-constraint"]
  819 -> 124 [style=dashed label="type-name"]
  819 -> 126 [style=dashed label="typedef-name"]
  819 -> 531 [style=dashed label="typename-specifier"]
  819 -> 449 [style=dashed label="unary-expression"]
  819 -> 450 [style=dashed label="unary-operator"]
  819 -> 129 [style=dashed label="unqualified-id"]
  819 -> 451 [style=dashed label="user-defined-character-literal"]
  819 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  819 -> 453 [style=dashed label="user-defined-integer-literal"]
  819 -> 454 [style=dashed label="user-defined-literal"]
  819 -> 455 [style=dashed label="user-defined-string-literal"]
  820 [label="State 820\n\l 12 additive-expression: additive-expression MINUS • multiplicative-expression\l"]
  820 -> 356 [style=solid label="PLUS"]
  820 -> 357 [style=solid label="MINUS"]
  820 -> 2 [style=solid label="IDENTIFIER"]
  820 -> 358 [style=solid label="OPEN_PAREN"]
  820 -> 359 [style=solid label="AND"]
  820 -> 360 [style=solid label="SCOPE"]
  820 -> 361 [style=solid label="OPEN_SQUARE"]
  820 -> 362 [style=solid label="CO_AWAIT"]
  820 -> 363 [style=solid label="ZERO_LB"]
  820 -> 364 [style=solid label="ZERO_HB"]
  820 -> 365 [style=solid label="SINGLE_QUOTE"]
  820 -> 366 [style=solid label="FALSE"]
  820 -> 367 [style=solid label="TRUE"]
  820 -> 368 [style=solid label="NOEXCEPT"]
  820 -> 17 [style=solid label="OPERATOR"]
  820 -> 26 [style=solid label="DECLTYPE"]
  820 -> 369 [style=solid label="DELETE"]
  820 -> 370 [style=solid label="DOT"]
  820 -> 184 [style=solid label="UNICODE_8"]
  820 -> 371 [style=solid label="MULT"]
  820 -> 199 [style=solid label="DOUBLE_QUOTE"]
  820 -> 372 [style=solid label="ZERO_LX"]
  820 -> 373 [style=solid label="ZERO_HX"]
  820 -> 374 [style=solid label="REQUIRES"]
  820 -> 375 [style=solid label="NEW"]
  820 -> 376 [style=solid label="COMPL"]
  820 -> 377 [style=solid label="NOT"]
  820 -> 378 [style=solid label="PLUS_PLUS"]
  820 -> 379 [style=solid label="MINUS_MINUS"]
  820 -> 380 [style=solid label="THIS"]
  820 -> 36 [style=solid label="AUTO"]
  820 -> 381 [style=solid label="NULLPTR"]
  820 -> 382 [style=solid label="DYNAMIC_CAST"]
  820 -> 383 [style=solid label="STATIC_CAST"]
  820 -> 384 [style=solid label="REINTERPRET_CAST"]
  820 -> 385 [style=solid label="CONST_CAST"]
  820 -> 386 [style=solid label="TYPEID"]
  820 -> 37 [style=solid label="CHAR"]
  820 -> 38 [style=solid label="CHAR8_T"]
  820 -> 39 [style=solid label="CHAR16_T"]
  820 -> 40 [style=solid label="CHAR32_T"]
  820 -> 41 [style=solid label="WCHAR_T"]
  820 -> 42 [style=solid label="BOOL"]
  820 -> 43 [style=solid label="SHORT"]
  820 -> 44 [style=solid label="INT"]
  820 -> 45 [style=solid label="LONG"]
  820 -> 46 [style=solid label="SIGNED"]
  820 -> 47 [style=solid label="UNSIGNED"]
  820 -> 48 [style=solid label="FLOAT"]
  820 -> 49 [style=solid label="DOUBLE"]
  820 -> 50 [style=solid label="VOID"]
  820 -> 55 [style=solid label="TYPENAME"]
  820 -> 387 [style=solid label="SIZEOF"]
  820 -> 388 [style=solid label="ALIGNOF"]
  820 -> 389 [style=solid label="'0'"]
  820 -> 390 [style=solid label="'1'"]
  820 -> 391 [style=solid label="'2'"]
  820 -> 392 [style=solid label="'3'"]
  820 -> 393 [style=solid label="'4'"]
  820 -> 394 [style=solid label="'5'"]
  820 -> 395 [style=solid label="'6'"]
  820 -> 396 [style=solid label="'7'"]
  820 -> 397 [style=solid label="'8'"]
  820 -> 398 [style=solid label="'9'"]
  820 -> 205 [style=solid label="'u'"]
  820 -> 206 [style=solid label="'U'"]
  820 -> 207 [style=solid label="'L'"]
  820 -> 208 [style=solid label="'R'"]
  820 -> 401 [style=dashed label="await-expression"]
  820 -> 402 [style=dashed label="binary-literal"]
  820 -> 403 [style=dashed label="boolean-literal"]
  820 -> 404 [style=dashed label="cast-expression"]
  820 -> 405 [style=dashed label="character-literal"]
  820 -> 65 [style=dashed label="class-name"]
  820 -> 67 [style=dashed label="concept-name"]
  820 -> 68 [style=dashed label="conversion-function-id"]
  820 -> 409 [style=dashed label="decimal-floating-point-literal"]
  820 -> 410 [style=dashed label="decimal-literal"]
  820 -> 76 [style=dashed label="decltype-specifier"]
  820 -> 411 [style=dashed label="delete-expression"]
  820 -> 412 [style=dashed label="digit"]
  820 -> 413 [style=dashed label="digit-sequence"]
  820 -> 414 [style=dashed label="encoding-prefix"]
  820 -> 84 [style=dashed label="enum-name"]
  820 -> 417 [style=dashed label="floating-point-literal"]
  820 -> 418 [style=dashed label="fold-expression"]
  820 -> 419 [style=dashed label="fractional-constant"]
  820 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  820 -> 421 [style=dashed label="hexadecimal-literal"]
  820 -> 422 [style=dashed label="hexadecimal-prefix"]
  820 -> 423 [style=dashed label="id-expression"]
  820 -> 425 [style=dashed label="integer-literal"]
  820 -> 426 [style=dashed label="lambda-expression"]
  820 -> 427 [style=dashed label="lambda-introducer"]
  820 -> 428 [style=dashed label="literal"]
  820 -> 95 [style=dashed label="literal-operator-id"]
  820 -> 1320 [style=dashed label="multiplicative-expression"]
  820 -> 99 [style=dashed label="namespace-alias"]
  820 -> 102 [style=dashed label="namespace-name"]
  820 -> 432 [style=dashed label="nested-name-specifier"]
  820 -> 433 [style=dashed label="new-expression"]
  820 -> 434 [style=dashed label="noexcept-expression"]
  820 -> 435 [style=dashed label="nonzero-digit"]
  820 -> 436 [style=dashed label="octal-literal"]
  820 -> 108 [style=dashed label="operator-function-id"]
  820 -> 109 [style=dashed label="placeholder-type-specifier"]
  820 -> 437 [style=dashed label="pm-expression"]
  820 -> 438 [style=dashed label="pointer-literal"]
  820 -> 439 [style=dashed label="postfix-expression"]
  820 -> 440 [style=dashed label="primary-expression"]
  820 -> 112 [style=dashed label="qualified-id"]
  820 -> 442 [style=dashed label="requires-expression"]
  820 -> 114 [style=dashed label="simple-template-id"]
  820 -> 529 [style=dashed label="simple-type-specifier"]
  820 -> 445 [style=dashed label="string-literal"]
  820 -> 120 [style=dashed label="template-id"]
  820 -> 215 [style=dashed label="template-name"]
  820 -> 123 [style=dashed label="type-constraint"]
  820 -> 124 [style=dashed label="type-name"]
  820 -> 126 [style=dashed label="typedef-name"]
  820 -> 531 [style=dashed label="typename-specifier"]
  820 -> 449 [style=dashed label="unary-expression"]
  820 -> 450 [style=dashed label="unary-operator"]
  820 -> 129 [style=dashed label="unqualified-id"]
  820 -> 451 [style=dashed label="user-defined-character-literal"]
  820 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  820 -> 453 [style=dashed label="user-defined-integer-literal"]
  820 -> 454 [style=dashed label="user-defined-literal"]
  820 -> 455 [style=dashed label="user-defined-string-literal"]
  821 [label="State 821\n\l 20 and-expression: and-expression AND • equality-expression\l"]
  821 -> 356 [style=solid label="PLUS"]
  821 -> 357 [style=solid label="MINUS"]
  821 -> 2 [style=solid label="IDENTIFIER"]
  821 -> 358 [style=solid label="OPEN_PAREN"]
  821 -> 359 [style=solid label="AND"]
  821 -> 360 [style=solid label="SCOPE"]
  821 -> 361 [style=solid label="OPEN_SQUARE"]
  821 -> 362 [style=solid label="CO_AWAIT"]
  821 -> 363 [style=solid label="ZERO_LB"]
  821 -> 364 [style=solid label="ZERO_HB"]
  821 -> 365 [style=solid label="SINGLE_QUOTE"]
  821 -> 366 [style=solid label="FALSE"]
  821 -> 367 [style=solid label="TRUE"]
  821 -> 368 [style=solid label="NOEXCEPT"]
  821 -> 17 [style=solid label="OPERATOR"]
  821 -> 26 [style=solid label="DECLTYPE"]
  821 -> 369 [style=solid label="DELETE"]
  821 -> 370 [style=solid label="DOT"]
  821 -> 184 [style=solid label="UNICODE_8"]
  821 -> 371 [style=solid label="MULT"]
  821 -> 199 [style=solid label="DOUBLE_QUOTE"]
  821 -> 372 [style=solid label="ZERO_LX"]
  821 -> 373 [style=solid label="ZERO_HX"]
  821 -> 374 [style=solid label="REQUIRES"]
  821 -> 375 [style=solid label="NEW"]
  821 -> 376 [style=solid label="COMPL"]
  821 -> 377 [style=solid label="NOT"]
  821 -> 378 [style=solid label="PLUS_PLUS"]
  821 -> 379 [style=solid label="MINUS_MINUS"]
  821 -> 380 [style=solid label="THIS"]
  821 -> 36 [style=solid label="AUTO"]
  821 -> 381 [style=solid label="NULLPTR"]
  821 -> 382 [style=solid label="DYNAMIC_CAST"]
  821 -> 383 [style=solid label="STATIC_CAST"]
  821 -> 384 [style=solid label="REINTERPRET_CAST"]
  821 -> 385 [style=solid label="CONST_CAST"]
  821 -> 386 [style=solid label="TYPEID"]
  821 -> 37 [style=solid label="CHAR"]
  821 -> 38 [style=solid label="CHAR8_T"]
  821 -> 39 [style=solid label="CHAR16_T"]
  821 -> 40 [style=solid label="CHAR32_T"]
  821 -> 41 [style=solid label="WCHAR_T"]
  821 -> 42 [style=solid label="BOOL"]
  821 -> 43 [style=solid label="SHORT"]
  821 -> 44 [style=solid label="INT"]
  821 -> 45 [style=solid label="LONG"]
  821 -> 46 [style=solid label="SIGNED"]
  821 -> 47 [style=solid label="UNSIGNED"]
  821 -> 48 [style=solid label="FLOAT"]
  821 -> 49 [style=solid label="DOUBLE"]
  821 -> 50 [style=solid label="VOID"]
  821 -> 55 [style=solid label="TYPENAME"]
  821 -> 387 [style=solid label="SIZEOF"]
  821 -> 388 [style=solid label="ALIGNOF"]
  821 -> 389 [style=solid label="'0'"]
  821 -> 390 [style=solid label="'1'"]
  821 -> 391 [style=solid label="'2'"]
  821 -> 392 [style=solid label="'3'"]
  821 -> 393 [style=solid label="'4'"]
  821 -> 394 [style=solid label="'5'"]
  821 -> 395 [style=solid label="'6'"]
  821 -> 396 [style=solid label="'7'"]
  821 -> 397 [style=solid label="'8'"]
  821 -> 398 [style=solid label="'9'"]
  821 -> 205 [style=solid label="'u'"]
  821 -> 206 [style=solid label="'U'"]
  821 -> 207 [style=solid label="'L'"]
  821 -> 208 [style=solid label="'R'"]
  821 -> 399 [style=dashed label="additive-expression"]
  821 -> 401 [style=dashed label="await-expression"]
  821 -> 402 [style=dashed label="binary-literal"]
  821 -> 403 [style=dashed label="boolean-literal"]
  821 -> 404 [style=dashed label="cast-expression"]
  821 -> 405 [style=dashed label="character-literal"]
  821 -> 65 [style=dashed label="class-name"]
  821 -> 406 [style=dashed label="compare-expression"]
  821 -> 67 [style=dashed label="concept-name"]
  821 -> 68 [style=dashed label="conversion-function-id"]
  821 -> 409 [style=dashed label="decimal-floating-point-literal"]
  821 -> 410 [style=dashed label="decimal-literal"]
  821 -> 76 [style=dashed label="decltype-specifier"]
  821 -> 411 [style=dashed label="delete-expression"]
  821 -> 412 [style=dashed label="digit"]
  821 -> 413 [style=dashed label="digit-sequence"]
  821 -> 414 [style=dashed label="encoding-prefix"]
  821 -> 84 [style=dashed label="enum-name"]
  821 -> 1321 [style=dashed label="equality-expression"]
  821 -> 417 [style=dashed label="floating-point-literal"]
  821 -> 418 [style=dashed label="fold-expression"]
  821 -> 419 [style=dashed label="fractional-constant"]
  821 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  821 -> 421 [style=dashed label="hexadecimal-literal"]
  821 -> 422 [style=dashed label="hexadecimal-prefix"]
  821 -> 423 [style=dashed label="id-expression"]
  821 -> 425 [style=dashed label="integer-literal"]
  821 -> 426 [style=dashed label="lambda-expression"]
  821 -> 427 [style=dashed label="lambda-introducer"]
  821 -> 428 [style=dashed label="literal"]
  821 -> 95 [style=dashed label="literal-operator-id"]
  821 -> 431 [style=dashed label="multiplicative-expression"]
  821 -> 99 [style=dashed label="namespace-alias"]
  821 -> 102 [style=dashed label="namespace-name"]
  821 -> 432 [style=dashed label="nested-name-specifier"]
  821 -> 433 [style=dashed label="new-expression"]
  821 -> 434 [style=dashed label="noexcept-expression"]
  821 -> 435 [style=dashed label="nonzero-digit"]
  821 -> 436 [style=dashed label="octal-literal"]
  821 -> 108 [style=dashed label="operator-function-id"]
  821 -> 109 [style=dashed label="placeholder-type-specifier"]
  821 -> 437 [style=dashed label="pm-expression"]
  821 -> 438 [style=dashed label="pointer-literal"]
  821 -> 439 [style=dashed label="postfix-expression"]
  821 -> 440 [style=dashed label="primary-expression"]
  821 -> 112 [style=dashed label="qualified-id"]
  821 -> 441 [style=dashed label="relational-expression"]
  821 -> 442 [style=dashed label="requires-expression"]
  821 -> 443 [style=dashed label="shift-expression"]
  821 -> 114 [style=dashed label="simple-template-id"]
  821 -> 529 [style=dashed label="simple-type-specifier"]
  821 -> 445 [style=dashed label="string-literal"]
  821 -> 120 [style=dashed label="template-id"]
  821 -> 215 [style=dashed label="template-name"]
  821 -> 123 [style=dashed label="type-constraint"]
  821 -> 124 [style=dashed label="type-name"]
  821 -> 126 [style=dashed label="typedef-name"]
  821 -> 531 [style=dashed label="typename-specifier"]
  821 -> 449 [style=dashed label="unary-expression"]
  821 -> 450 [style=dashed label="unary-operator"]
  821 -> 129 [style=dashed label="unqualified-id"]
  821 -> 451 [style=dashed label="user-defined-character-literal"]
  821 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  821 -> 453 [style=dashed label="user-defined-integer-literal"]
  821 -> 454 [style=dashed label="user-defined-literal"]
  821 -> 455 [style=dashed label="user-defined-string-literal"]
  822 [label="State 822\n\l1115 ud-suffix: IDENTIFIER •\l"]
  822 -> "822R1115" [style=solid]
 "822R1115" [label="R1115", fillcolor=3, shape=diamond, style=filled]
  823 [label="State 823\n\l 94 binary-literal: binary-literal SINGLE_QUOTE • binary-digit\l"]
  823 -> 776 [style=solid label="'0'"]
  823 -> 777 [style=solid label="'1'"]
  823 -> 1322 [style=dashed label="binary-digit"]
  824 [label="State 824\n\l567 long-long-suffix: LONG_LONG_L •\l"]
  824 -> "824R567" [style=solid]
 "824R567" [label="R567", fillcolor=3, shape=diamond, style=filled]
  825 [label="State 825\n\l568 long-long-suffix: LONG_LONG_H •\l"]
  825 -> "825R568" [style=solid]
 "825R568" [label="R568", fillcolor=3, shape=diamond, style=filled]
  826 [label="State 826\n\l1147 unsigned-suffix: 'u' •\l"]
  826 -> "826R1147" [style=solid]
 "826R1147" [label="R1147", fillcolor=3, shape=diamond, style=filled]
  827 [label="State 827\n\l1148 unsigned-suffix: 'U' •\l"]
  827 -> "827R1148" [style=solid]
 "827R1148" [label="R1148", fillcolor=3, shape=diamond, style=filled]
  828 [label="State 828\n\l570 long-suffix: 'L' •\l"]
  828 -> "828R570" [style=solid]
 "828R570" [label="R570", fillcolor=3, shape=diamond, style=filled]
  829 [label="State 829\n\l569 long-suffix: 'l' •\l"]
  829 -> "829R569" [style=solid]
 "829R569" [label="R569", fillcolor=3, shape=diamond, style=filled]
  830 [label="State 830\n\l1006 size-suffix: 'z' •\l"]
  830 -> "830R1006" [style=solid]
 "830R1006" [label="R1006", fillcolor=3, shape=diamond, style=filled]
  831 [label="State 831\n\l1007 size-suffix: 'Z' •\l"]
  831 -> "831R1007" [style=solid]
 "831R1007" [label="R1007", fillcolor=3, shape=diamond, style=filled]
  832 [label="State 832\n\l 93 binary-literal: binary-literal binary-digit •\l"]
  832 -> "832R93" [style=solid]
 "832R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  833 [label="State 833\n\l486 integer-literal: binary-literal integer-suffix •\l"]
  833 -> "833R486" [style=solid]
 "833R486" [label="R486", fillcolor=3, shape=diamond, style=filled]
  834 [label="State 834\n\l501 integer-suffix: long-long-suffix •\l502               | long-long-suffix • unsigned-suffix\l"]
  834 -> 826 [style=solid label="'u'"]
  834 -> 827 [style=solid label="'U'"]
  834 -> 1323 [style=dashed label="unsigned-suffix"]
  834 -> "834R501" [style=solid]
 "834R501" [label="R501", fillcolor=3, shape=diamond, style=filled]
  835 [label="State 835\n\l499 integer-suffix: long-suffix •\l500               | long-suffix • unsigned-suffix\l"]
  835 -> 826 [style=solid label="'u'"]
  835 -> 827 [style=solid label="'U'"]
  835 -> 1324 [style=dashed label="unsigned-suffix"]
  835 -> "835R499" [style=solid]
 "835R499" [label="R499", fillcolor=3, shape=diamond, style=filled]
  836 [label="State 836\n\l503 integer-suffix: size-suffix •\l504               | size-suffix • unsigned-suffix\l"]
  836 -> 826 [style=solid label="'u'"]
  836 -> 827 [style=solid label="'U'"]
  836 -> 1325 [style=dashed label="unsigned-suffix"]
  836 -> "836R503" [style=solid]
 "836R503" [label="R503", fillcolor=3, shape=diamond, style=filled]
  837 [label="State 837\n\l1158 user-defined-integer-literal: binary-literal ud-suffix •\l"]
  837 -> "837R1158" [style=solid]
 "837R1158" [label="R1158", fillcolor=3, shape=diamond, style=filled]
  838 [label="State 838\n\l493 integer-suffix: unsigned-suffix •\l494               | unsigned-suffix • long-suffix\l495               | unsigned-suffix •\l496               | unsigned-suffix • long-long-suffix\l497               | unsigned-suffix •\l498               | unsigned-suffix • size-suffix\l"]
  838 -> 824 [style=solid label="LONG_LONG_L"]
  838 -> 825 [style=solid label="LONG_LONG_H"]
  838 -> 828 [style=solid label="'L'"]
  838 -> 829 [style=solid label="'l'"]
  838 -> 830 [style=solid label="'z'"]
  838 -> 831 [style=solid label="'Z'"]
  838 -> 1326 [style=dashed label="long-long-suffix"]
  838 -> 1327 [style=dashed label="long-suffix"]
  838 -> 1328 [style=dashed label="size-suffix"]
  838 -> "838R493" [style=solid]
 "838R493" [label="R493", fillcolor=3, shape=diamond, style=filled]
  838 -> "838R495d" [label="[PLUS, MINUS, USING, IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SCOPE, OPEN_SQUARE, CLOSE_SQUARE, COLON, OPEN_BRACE, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, AND_AND, OR_OR, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, DEREF, DOT, ENUM, EQ_EQ, NOT_EQ, XOR, EXTERN, LESS, GREATER, EXPLICIT, EXPORT, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, COMPL, PLUS_PLUS, MINUS_MINUS, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "838R495d" [label="R495", fillcolor=5, shape=diamond, style=filled]
  838 -> "838R497d" [label="[PLUS, MINUS, USING, IDENTIFIER, EQ, SEMICOLON, ALIGNAS, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, ASM, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SCOPE, OPEN_SQUARE, CLOSE_SQUARE, COLON, OPEN_BRACE, CLOSE_BRACE, VIRTUAL, CLASS, STRUCT, UNION, TEMPLATE, SPACESHIP, NOEXCEPT, CONCEPT, QUERY, AND_AND, OR_OR, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, DEREF, DOT, ENUM, EQ_EQ, NOT_EQ, XOR, EXTERN, LESS, GREATER, EXPLICIT, EXPORT, MULT, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, TRY, IMPORT, NAMESPACE, COMPL, PLUS_PLUS, MINUS_MINUS, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC_ASSERT, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "838R497d" [label="R497", fillcolor=5, shape=diamond, style=filled]
  839 [label="State 839\n\l1149 user-defined-character-literal: character-literal ud-suffix •\l"]
  839 -> "839R1149" [style=solid]
 "839R1149" [label="R1149", fillcolor=3, shape=diamond, style=filled]
  840 [label="State 840\n\l155 compare-expression: compare-expression SPACESHIP • shift-expression\l"]
  840 -> 356 [style=solid label="PLUS"]
  840 -> 357 [style=solid label="MINUS"]
  840 -> 2 [style=solid label="IDENTIFIER"]
  840 -> 358 [style=solid label="OPEN_PAREN"]
  840 -> 359 [style=solid label="AND"]
  840 -> 360 [style=solid label="SCOPE"]
  840 -> 361 [style=solid label="OPEN_SQUARE"]
  840 -> 362 [style=solid label="CO_AWAIT"]
  840 -> 363 [style=solid label="ZERO_LB"]
  840 -> 364 [style=solid label="ZERO_HB"]
  840 -> 365 [style=solid label="SINGLE_QUOTE"]
  840 -> 366 [style=solid label="FALSE"]
  840 -> 367 [style=solid label="TRUE"]
  840 -> 368 [style=solid label="NOEXCEPT"]
  840 -> 17 [style=solid label="OPERATOR"]
  840 -> 26 [style=solid label="DECLTYPE"]
  840 -> 369 [style=solid label="DELETE"]
  840 -> 370 [style=solid label="DOT"]
  840 -> 184 [style=solid label="UNICODE_8"]
  840 -> 371 [style=solid label="MULT"]
  840 -> 199 [style=solid label="DOUBLE_QUOTE"]
  840 -> 372 [style=solid label="ZERO_LX"]
  840 -> 373 [style=solid label="ZERO_HX"]
  840 -> 374 [style=solid label="REQUIRES"]
  840 -> 375 [style=solid label="NEW"]
  840 -> 376 [style=solid label="COMPL"]
  840 -> 377 [style=solid label="NOT"]
  840 -> 378 [style=solid label="PLUS_PLUS"]
  840 -> 379 [style=solid label="MINUS_MINUS"]
  840 -> 380 [style=solid label="THIS"]
  840 -> 36 [style=solid label="AUTO"]
  840 -> 381 [style=solid label="NULLPTR"]
  840 -> 382 [style=solid label="DYNAMIC_CAST"]
  840 -> 383 [style=solid label="STATIC_CAST"]
  840 -> 384 [style=solid label="REINTERPRET_CAST"]
  840 -> 385 [style=solid label="CONST_CAST"]
  840 -> 386 [style=solid label="TYPEID"]
  840 -> 37 [style=solid label="CHAR"]
  840 -> 38 [style=solid label="CHAR8_T"]
  840 -> 39 [style=solid label="CHAR16_T"]
  840 -> 40 [style=solid label="CHAR32_T"]
  840 -> 41 [style=solid label="WCHAR_T"]
  840 -> 42 [style=solid label="BOOL"]
  840 -> 43 [style=solid label="SHORT"]
  840 -> 44 [style=solid label="INT"]
  840 -> 45 [style=solid label="LONG"]
  840 -> 46 [style=solid label="SIGNED"]
  840 -> 47 [style=solid label="UNSIGNED"]
  840 -> 48 [style=solid label="FLOAT"]
  840 -> 49 [style=solid label="DOUBLE"]
  840 -> 50 [style=solid label="VOID"]
  840 -> 55 [style=solid label="TYPENAME"]
  840 -> 387 [style=solid label="SIZEOF"]
  840 -> 388 [style=solid label="ALIGNOF"]
  840 -> 389 [style=solid label="'0'"]
  840 -> 390 [style=solid label="'1'"]
  840 -> 391 [style=solid label="'2'"]
  840 -> 392 [style=solid label="'3'"]
  840 -> 393 [style=solid label="'4'"]
  840 -> 394 [style=solid label="'5'"]
  840 -> 395 [style=solid label="'6'"]
  840 -> 396 [style=solid label="'7'"]
  840 -> 397 [style=solid label="'8'"]
  840 -> 398 [style=solid label="'9'"]
  840 -> 205 [style=solid label="'u'"]
  840 -> 206 [style=solid label="'U'"]
  840 -> 207 [style=solid label="'L'"]
  840 -> 208 [style=solid label="'R'"]
  840 -> 399 [style=dashed label="additive-expression"]
  840 -> 401 [style=dashed label="await-expression"]
  840 -> 402 [style=dashed label="binary-literal"]
  840 -> 403 [style=dashed label="boolean-literal"]
  840 -> 404 [style=dashed label="cast-expression"]
  840 -> 405 [style=dashed label="character-literal"]
  840 -> 65 [style=dashed label="class-name"]
  840 -> 67 [style=dashed label="concept-name"]
  840 -> 68 [style=dashed label="conversion-function-id"]
  840 -> 409 [style=dashed label="decimal-floating-point-literal"]
  840 -> 410 [style=dashed label="decimal-literal"]
  840 -> 76 [style=dashed label="decltype-specifier"]
  840 -> 411 [style=dashed label="delete-expression"]
  840 -> 412 [style=dashed label="digit"]
  840 -> 413 [style=dashed label="digit-sequence"]
  840 -> 414 [style=dashed label="encoding-prefix"]
  840 -> 84 [style=dashed label="enum-name"]
  840 -> 417 [style=dashed label="floating-point-literal"]
  840 -> 418 [style=dashed label="fold-expression"]
  840 -> 419 [style=dashed label="fractional-constant"]
  840 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  840 -> 421 [style=dashed label="hexadecimal-literal"]
  840 -> 422 [style=dashed label="hexadecimal-prefix"]
  840 -> 423 [style=dashed label="id-expression"]
  840 -> 425 [style=dashed label="integer-literal"]
  840 -> 426 [style=dashed label="lambda-expression"]
  840 -> 427 [style=dashed label="lambda-introducer"]
  840 -> 428 [style=dashed label="literal"]
  840 -> 95 [style=dashed label="literal-operator-id"]
  840 -> 431 [style=dashed label="multiplicative-expression"]
  840 -> 99 [style=dashed label="namespace-alias"]
  840 -> 102 [style=dashed label="namespace-name"]
  840 -> 432 [style=dashed label="nested-name-specifier"]
  840 -> 433 [style=dashed label="new-expression"]
  840 -> 434 [style=dashed label="noexcept-expression"]
  840 -> 435 [style=dashed label="nonzero-digit"]
  840 -> 436 [style=dashed label="octal-literal"]
  840 -> 108 [style=dashed label="operator-function-id"]
  840 -> 109 [style=dashed label="placeholder-type-specifier"]
  840 -> 437 [style=dashed label="pm-expression"]
  840 -> 438 [style=dashed label="pointer-literal"]
  840 -> 439 [style=dashed label="postfix-expression"]
  840 -> 440 [style=dashed label="primary-expression"]
  840 -> 112 [style=dashed label="qualified-id"]
  840 -> 442 [style=dashed label="requires-expression"]
  840 -> 1329 [style=dashed label="shift-expression"]
  840 -> 114 [style=dashed label="simple-template-id"]
  840 -> 529 [style=dashed label="simple-type-specifier"]
  840 -> 445 [style=dashed label="string-literal"]
  840 -> 120 [style=dashed label="template-id"]
  840 -> 215 [style=dashed label="template-name"]
  840 -> 123 [style=dashed label="type-constraint"]
  840 -> 124 [style=dashed label="type-name"]
  840 -> 126 [style=dashed label="typedef-name"]
  840 -> 531 [style=dashed label="typename-specifier"]
  840 -> 449 [style=dashed label="unary-expression"]
  840 -> 450 [style=dashed label="unary-operator"]
  840 -> 129 [style=dashed label="unqualified-id"]
  840 -> 451 [style=dashed label="user-defined-character-literal"]
  840 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  840 -> 453 [style=dashed label="user-defined-integer-literal"]
  840 -> 454 [style=dashed label="user-defined-literal"]
  840 -> 455 [style=dashed label="user-defined-string-literal"]
  841 [label="State 841\n\l 17 alignment-specifier: ALIGNAS OPEN_PAREN constant-expression CLOSE_PAREN •\l"]
  841 -> "841R17" [style=solid]
 "841R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  842 [label="State 842\n\l 18 alignment-specifier: ALIGNAS OPEN_PAREN constant-expression ELLIPSIS • CLOSE_PAREN\l"]
  842 -> 1330 [style=solid label="CLOSE_PAREN"]
  843 [label="State 843\n\l197 decimal-literal: decimal-literal SINGLE_QUOTE • digit\l"]
  843 -> 789 [style=solid label="'0'"]
  843 -> 790 [style=solid label="'1'"]
  843 -> 791 [style=solid label="'2'"]
  843 -> 792 [style=solid label="'3'"]
  843 -> 793 [style=solid label="'4'"]
  843 -> 794 [style=solid label="'5'"]
  843 -> 795 [style=solid label="'6'"]
  843 -> 796 [style=solid label="'7'"]
  843 -> 797 [style=solid label="'8'"]
  843 -> 798 [style=solid label="'9'"]
  843 -> 1331 [style=dashed label="digit"]
  844 [label="State 844\n\l196 decimal-literal: decimal-literal digit •\l"]
  844 -> "844R196" [style=solid]
 "844R196" [label="R196", fillcolor=3, shape=diamond, style=filled]
  845 [label="State 845\n\l490 integer-literal: decimal-literal integer-suffix •\l"]
  845 -> "845R490" [style=solid]
 "845R490" [label="R490", fillcolor=3, shape=diamond, style=filled]
  846 [label="State 846\n\l1155 user-defined-integer-literal: decimal-literal ud-suffix •\l"]
  846 -> "846R1155" [style=solid]
 "846R1155" [label="R1155", fillcolor=3, shape=diamond, style=filled]
  847 [label="State 847\n\l261 digit-sequence: digit-sequence SINGLE_QUOTE • digit\l"]
  847 -> 789 [style=solid label="'0'"]
  847 -> 790 [style=solid label="'1'"]
  847 -> 791 [style=solid label="'2'"]
  847 -> 792 [style=solid label="'3'"]
  847 -> 793 [style=solid label="'4'"]
  847 -> 794 [style=solid label="'5'"]
  847 -> 795 [style=solid label="'6'"]
  847 -> 796 [style=solid label="'7'"]
  847 -> 797 [style=solid label="'8'"]
  847 -> 798 [style=solid label="'9'"]
  847 -> 1332 [style=dashed label="digit"]
  848 [label="State 848\n\l387 fractional-constant: digit-sequence DOT • digit-sequence\l389                    | digit-sequence DOT •\l"]
  848 -> 789 [style=solid label="'0'"]
  848 -> 790 [style=solid label="'1'"]
  848 -> 791 [style=solid label="'2'"]
  848 -> 792 [style=solid label="'3'"]
  848 -> 793 [style=solid label="'4'"]
  848 -> 794 [style=solid label="'5'"]
  848 -> 795 [style=solid label="'6'"]
  848 -> 796 [style=solid label="'7'"]
  848 -> 797 [style=solid label="'8'"]
  848 -> 798 [style=solid label="'9'"]
  848 -> 412 [style=dashed label="digit"]
  848 -> 1333 [style=dashed label="digit-sequence"]
  848 -> "848R389" [style=solid]
 "848R389" [label="R389", fillcolor=3, shape=diamond, style=filled]
  849 [label="State 849\n\l324 exponent-part: 'e' • digit-sequence\l325              | 'e' • sign digit-sequence\l"]
  849 -> 1334 [style=solid label="PLUS"]
  849 -> 1335 [style=solid label="MINUS"]
  849 -> 789 [style=solid label="'0'"]
  849 -> 790 [style=solid label="'1'"]
  849 -> 791 [style=solid label="'2'"]
  849 -> 792 [style=solid label="'3'"]
  849 -> 793 [style=solid label="'4'"]
  849 -> 794 [style=solid label="'5'"]
  849 -> 795 [style=solid label="'6'"]
  849 -> 796 [style=solid label="'7'"]
  849 -> 797 [style=solid label="'8'"]
  849 -> 798 [style=solid label="'9'"]
  849 -> 412 [style=dashed label="digit"]
  849 -> 1336 [style=dashed label="digit-sequence"]
  849 -> 1337 [style=dashed label="sign"]
  850 [label="State 850\n\l326 exponent-part: 'E' • digit-sequence\l327              | 'E' • sign digit-sequence\l"]
  850 -> 1334 [style=solid label="PLUS"]
  850 -> 1335 [style=solid label="MINUS"]
  850 -> 789 [style=solid label="'0'"]
  850 -> 790 [style=solid label="'1'"]
  850 -> 791 [style=solid label="'2'"]
  850 -> 792 [style=solid label="'3'"]
  850 -> 793 [style=solid label="'4'"]
  850 -> 794 [style=solid label="'5'"]
  850 -> 795 [style=solid label="'6'"]
  850 -> 796 [style=solid label="'7'"]
  850 -> 797 [style=solid label="'8'"]
  850 -> 798 [style=solid label="'9'"]
  850 -> 412 [style=dashed label="digit"]
  850 -> 1338 [style=dashed label="digit-sequence"]
  850 -> 1339 [style=dashed label="sign"]
  851 [label="State 851\n\l260 digit-sequence: digit-sequence digit •\l"]
  851 -> "851R260" [style=solid]
 "851R260" [label="R260", fillcolor=3, shape=diamond, style=filled]
  852 [label="State 852\n\l193 decimal-floating-point-literal: digit-sequence exponent-part •\l194                               | digit-sequence exponent-part • floating-point-suffix\l1152 user-defined-floating-point-literal: digit-sequence exponent-part • ud-suffix\l"]
  852 -> 822 [style=solid label="IDENTIFIER"]
  852 -> 857 [style=solid label="'L'"]
  852 -> 858 [style=solid label="'f'"]
  852 -> 859 [style=solid label="'l'"]
  852 -> 860 [style=solid label="'F'"]
  852 -> 1340 [style=dashed label="floating-point-suffix"]
  852 -> 1341 [style=dashed label="ud-suffix"]
  852 -> "852R193d" [label="[IDENTIFIER]", style=solid]
 "852R193d" [label="R193", fillcolor=5, shape=diamond, style=filled]
  852 -> "852R193" [style=solid]
 "852R193" [label="R193", fillcolor=3, shape=diamond, style=filled]
  853 [label="State 853\n\l126 character-literal: encoding-prefix SINGLE_QUOTE • c-char-sequence SINGLE_QUOTE\l"]
  853 -> 780 [style=solid label="BASIC_C_CHAR"]
  853 -> 486 [style=solid label="ESCAPE"]
  853 -> 488 [style=solid label="ESCAPE_LX"]
  853 -> 489 [style=solid label="ESCAPE_LU"]
  853 -> 490 [style=solid label="ESCAPE_HU"]
  853 -> 781 [style=dashed label="basic-c-char"]
  853 -> 782 [style=dashed label="c-char"]
  853 -> 1342 [style=dashed label="c-char-sequence"]
  853 -> 492 [style=dashed label="conditional-escape-sequence"]
  853 -> 784 [style=dashed label="escape-sequence"]
  853 -> 494 [style=dashed label="hexadecimal-escape-sequence"]
  853 -> 495 [style=dashed label="numeric-escape-sequence"]
  853 -> 496 [style=dashed label="octal-escape-sequence"]
  853 -> 499 [style=dashed label="simple-escape-sequence"]
  853 -> 785 [style=dashed label="universal-character-name"]
  854 [label="State 854\n\l305 equality-expression: equality-expression EQ_EQ • relational-expression\l"]
  854 -> 356 [style=solid label="PLUS"]
  854 -> 357 [style=solid label="MINUS"]
  854 -> 2 [style=solid label="IDENTIFIER"]
  854 -> 358 [style=solid label="OPEN_PAREN"]
  854 -> 359 [style=solid label="AND"]
  854 -> 360 [style=solid label="SCOPE"]
  854 -> 361 [style=solid label="OPEN_SQUARE"]
  854 -> 362 [style=solid label="CO_AWAIT"]
  854 -> 363 [style=solid label="ZERO_LB"]
  854 -> 364 [style=solid label="ZERO_HB"]
  854 -> 365 [style=solid label="SINGLE_QUOTE"]
  854 -> 366 [style=solid label="FALSE"]
  854 -> 367 [style=solid label="TRUE"]
  854 -> 368 [style=solid label="NOEXCEPT"]
  854 -> 17 [style=solid label="OPERATOR"]
  854 -> 26 [style=solid label="DECLTYPE"]
  854 -> 369 [style=solid label="DELETE"]
  854 -> 370 [style=solid label="DOT"]
  854 -> 184 [style=solid label="UNICODE_8"]
  854 -> 371 [style=solid label="MULT"]
  854 -> 199 [style=solid label="DOUBLE_QUOTE"]
  854 -> 372 [style=solid label="ZERO_LX"]
  854 -> 373 [style=solid label="ZERO_HX"]
  854 -> 374 [style=solid label="REQUIRES"]
  854 -> 375 [style=solid label="NEW"]
  854 -> 376 [style=solid label="COMPL"]
  854 -> 377 [style=solid label="NOT"]
  854 -> 378 [style=solid label="PLUS_PLUS"]
  854 -> 379 [style=solid label="MINUS_MINUS"]
  854 -> 380 [style=solid label="THIS"]
  854 -> 36 [style=solid label="AUTO"]
  854 -> 381 [style=solid label="NULLPTR"]
  854 -> 382 [style=solid label="DYNAMIC_CAST"]
  854 -> 383 [style=solid label="STATIC_CAST"]
  854 -> 384 [style=solid label="REINTERPRET_CAST"]
  854 -> 385 [style=solid label="CONST_CAST"]
  854 -> 386 [style=solid label="TYPEID"]
  854 -> 37 [style=solid label="CHAR"]
  854 -> 38 [style=solid label="CHAR8_T"]
  854 -> 39 [style=solid label="CHAR16_T"]
  854 -> 40 [style=solid label="CHAR32_T"]
  854 -> 41 [style=solid label="WCHAR_T"]
  854 -> 42 [style=solid label="BOOL"]
  854 -> 43 [style=solid label="SHORT"]
  854 -> 44 [style=solid label="INT"]
  854 -> 45 [style=solid label="LONG"]
  854 -> 46 [style=solid label="SIGNED"]
  854 -> 47 [style=solid label="UNSIGNED"]
  854 -> 48 [style=solid label="FLOAT"]
  854 -> 49 [style=solid label="DOUBLE"]
  854 -> 50 [style=solid label="VOID"]
  854 -> 55 [style=solid label="TYPENAME"]
  854 -> 387 [style=solid label="SIZEOF"]
  854 -> 388 [style=solid label="ALIGNOF"]
  854 -> 389 [style=solid label="'0'"]
  854 -> 390 [style=solid label="'1'"]
  854 -> 391 [style=solid label="'2'"]
  854 -> 392 [style=solid label="'3'"]
  854 -> 393 [style=solid label="'4'"]
  854 -> 394 [style=solid label="'5'"]
  854 -> 395 [style=solid label="'6'"]
  854 -> 396 [style=solid label="'7'"]
  854 -> 397 [style=solid label="'8'"]
  854 -> 398 [style=solid label="'9'"]
  854 -> 205 [style=solid label="'u'"]
  854 -> 206 [style=solid label="'U'"]
  854 -> 207 [style=solid label="'L'"]
  854 -> 208 [style=solid label="'R'"]
  854 -> 399 [style=dashed label="additive-expression"]
  854 -> 401 [style=dashed label="await-expression"]
  854 -> 402 [style=dashed label="binary-literal"]
  854 -> 403 [style=dashed label="boolean-literal"]
  854 -> 404 [style=dashed label="cast-expression"]
  854 -> 405 [style=dashed label="character-literal"]
  854 -> 65 [style=dashed label="class-name"]
  854 -> 406 [style=dashed label="compare-expression"]
  854 -> 67 [style=dashed label="concept-name"]
  854 -> 68 [style=dashed label="conversion-function-id"]
  854 -> 409 [style=dashed label="decimal-floating-point-literal"]
  854 -> 410 [style=dashed label="decimal-literal"]
  854 -> 76 [style=dashed label="decltype-specifier"]
  854 -> 411 [style=dashed label="delete-expression"]
  854 -> 412 [style=dashed label="digit"]
  854 -> 413 [style=dashed label="digit-sequence"]
  854 -> 414 [style=dashed label="encoding-prefix"]
  854 -> 84 [style=dashed label="enum-name"]
  854 -> 417 [style=dashed label="floating-point-literal"]
  854 -> 418 [style=dashed label="fold-expression"]
  854 -> 419 [style=dashed label="fractional-constant"]
  854 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  854 -> 421 [style=dashed label="hexadecimal-literal"]
  854 -> 422 [style=dashed label="hexadecimal-prefix"]
  854 -> 423 [style=dashed label="id-expression"]
  854 -> 425 [style=dashed label="integer-literal"]
  854 -> 426 [style=dashed label="lambda-expression"]
  854 -> 427 [style=dashed label="lambda-introducer"]
  854 -> 428 [style=dashed label="literal"]
  854 -> 95 [style=dashed label="literal-operator-id"]
  854 -> 431 [style=dashed label="multiplicative-expression"]
  854 -> 99 [style=dashed label="namespace-alias"]
  854 -> 102 [style=dashed label="namespace-name"]
  854 -> 432 [style=dashed label="nested-name-specifier"]
  854 -> 433 [style=dashed label="new-expression"]
  854 -> 434 [style=dashed label="noexcept-expression"]
  854 -> 435 [style=dashed label="nonzero-digit"]
  854 -> 436 [style=dashed label="octal-literal"]
  854 -> 108 [style=dashed label="operator-function-id"]
  854 -> 109 [style=dashed label="placeholder-type-specifier"]
  854 -> 437 [style=dashed label="pm-expression"]
  854 -> 438 [style=dashed label="pointer-literal"]
  854 -> 439 [style=dashed label="postfix-expression"]
  854 -> 440 [style=dashed label="primary-expression"]
  854 -> 112 [style=dashed label="qualified-id"]
  854 -> 1343 [style=dashed label="relational-expression"]
  854 -> 442 [style=dashed label="requires-expression"]
  854 -> 443 [style=dashed label="shift-expression"]
  854 -> 114 [style=dashed label="simple-template-id"]
  854 -> 529 [style=dashed label="simple-type-specifier"]
  854 -> 445 [style=dashed label="string-literal"]
  854 -> 120 [style=dashed label="template-id"]
  854 -> 215 [style=dashed label="template-name"]
  854 -> 123 [style=dashed label="type-constraint"]
  854 -> 124 [style=dashed label="type-name"]
  854 -> 126 [style=dashed label="typedef-name"]
  854 -> 531 [style=dashed label="typename-specifier"]
  854 -> 449 [style=dashed label="unary-expression"]
  854 -> 450 [style=dashed label="unary-operator"]
  854 -> 129 [style=dashed label="unqualified-id"]
  854 -> 451 [style=dashed label="user-defined-character-literal"]
  854 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  854 -> 453 [style=dashed label="user-defined-integer-literal"]
  854 -> 454 [style=dashed label="user-defined-literal"]
  854 -> 455 [style=dashed label="user-defined-string-literal"]
  855 [label="State 855\n\l306 equality-expression: equality-expression NOT_EQ • relational-expression\l"]
  855 -> 356 [style=solid label="PLUS"]
  855 -> 357 [style=solid label="MINUS"]
  855 -> 2 [style=solid label="IDENTIFIER"]
  855 -> 358 [style=solid label="OPEN_PAREN"]
  855 -> 359 [style=solid label="AND"]
  855 -> 360 [style=solid label="SCOPE"]
  855 -> 361 [style=solid label="OPEN_SQUARE"]
  855 -> 362 [style=solid label="CO_AWAIT"]
  855 -> 363 [style=solid label="ZERO_LB"]
  855 -> 364 [style=solid label="ZERO_HB"]
  855 -> 365 [style=solid label="SINGLE_QUOTE"]
  855 -> 366 [style=solid label="FALSE"]
  855 -> 367 [style=solid label="TRUE"]
  855 -> 368 [style=solid label="NOEXCEPT"]
  855 -> 17 [style=solid label="OPERATOR"]
  855 -> 26 [style=solid label="DECLTYPE"]
  855 -> 369 [style=solid label="DELETE"]
  855 -> 370 [style=solid label="DOT"]
  855 -> 184 [style=solid label="UNICODE_8"]
  855 -> 371 [style=solid label="MULT"]
  855 -> 199 [style=solid label="DOUBLE_QUOTE"]
  855 -> 372 [style=solid label="ZERO_LX"]
  855 -> 373 [style=solid label="ZERO_HX"]
  855 -> 374 [style=solid label="REQUIRES"]
  855 -> 375 [style=solid label="NEW"]
  855 -> 376 [style=solid label="COMPL"]
  855 -> 377 [style=solid label="NOT"]
  855 -> 378 [style=solid label="PLUS_PLUS"]
  855 -> 379 [style=solid label="MINUS_MINUS"]
  855 -> 380 [style=solid label="THIS"]
  855 -> 36 [style=solid label="AUTO"]
  855 -> 381 [style=solid label="NULLPTR"]
  855 -> 382 [style=solid label="DYNAMIC_CAST"]
  855 -> 383 [style=solid label="STATIC_CAST"]
  855 -> 384 [style=solid label="REINTERPRET_CAST"]
  855 -> 385 [style=solid label="CONST_CAST"]
  855 -> 386 [style=solid label="TYPEID"]
  855 -> 37 [style=solid label="CHAR"]
  855 -> 38 [style=solid label="CHAR8_T"]
  855 -> 39 [style=solid label="CHAR16_T"]
  855 -> 40 [style=solid label="CHAR32_T"]
  855 -> 41 [style=solid label="WCHAR_T"]
  855 -> 42 [style=solid label="BOOL"]
  855 -> 43 [style=solid label="SHORT"]
  855 -> 44 [style=solid label="INT"]
  855 -> 45 [style=solid label="LONG"]
  855 -> 46 [style=solid label="SIGNED"]
  855 -> 47 [style=solid label="UNSIGNED"]
  855 -> 48 [style=solid label="FLOAT"]
  855 -> 49 [style=solid label="DOUBLE"]
  855 -> 50 [style=solid label="VOID"]
  855 -> 55 [style=solid label="TYPENAME"]
  855 -> 387 [style=solid label="SIZEOF"]
  855 -> 388 [style=solid label="ALIGNOF"]
  855 -> 389 [style=solid label="'0'"]
  855 -> 390 [style=solid label="'1'"]
  855 -> 391 [style=solid label="'2'"]
  855 -> 392 [style=solid label="'3'"]
  855 -> 393 [style=solid label="'4'"]
  855 -> 394 [style=solid label="'5'"]
  855 -> 395 [style=solid label="'6'"]
  855 -> 396 [style=solid label="'7'"]
  855 -> 397 [style=solid label="'8'"]
  855 -> 398 [style=solid label="'9'"]
  855 -> 205 [style=solid label="'u'"]
  855 -> 206 [style=solid label="'U'"]
  855 -> 207 [style=solid label="'L'"]
  855 -> 208 [style=solid label="'R'"]
  855 -> 399 [style=dashed label="additive-expression"]
  855 -> 401 [style=dashed label="await-expression"]
  855 -> 402 [style=dashed label="binary-literal"]
  855 -> 403 [style=dashed label="boolean-literal"]
  855 -> 404 [style=dashed label="cast-expression"]
  855 -> 405 [style=dashed label="character-literal"]
  855 -> 65 [style=dashed label="class-name"]
  855 -> 406 [style=dashed label="compare-expression"]
  855 -> 67 [style=dashed label="concept-name"]
  855 -> 68 [style=dashed label="conversion-function-id"]
  855 -> 409 [style=dashed label="decimal-floating-point-literal"]
  855 -> 410 [style=dashed label="decimal-literal"]
  855 -> 76 [style=dashed label="decltype-specifier"]
  855 -> 411 [style=dashed label="delete-expression"]
  855 -> 412 [style=dashed label="digit"]
  855 -> 413 [style=dashed label="digit-sequence"]
  855 -> 414 [style=dashed label="encoding-prefix"]
  855 -> 84 [style=dashed label="enum-name"]
  855 -> 417 [style=dashed label="floating-point-literal"]
  855 -> 418 [style=dashed label="fold-expression"]
  855 -> 419 [style=dashed label="fractional-constant"]
  855 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  855 -> 421 [style=dashed label="hexadecimal-literal"]
  855 -> 422 [style=dashed label="hexadecimal-prefix"]
  855 -> 423 [style=dashed label="id-expression"]
  855 -> 425 [style=dashed label="integer-literal"]
  855 -> 426 [style=dashed label="lambda-expression"]
  855 -> 427 [style=dashed label="lambda-introducer"]
  855 -> 428 [style=dashed label="literal"]
  855 -> 95 [style=dashed label="literal-operator-id"]
  855 -> 431 [style=dashed label="multiplicative-expression"]
  855 -> 99 [style=dashed label="namespace-alias"]
  855 -> 102 [style=dashed label="namespace-name"]
  855 -> 432 [style=dashed label="nested-name-specifier"]
  855 -> 433 [style=dashed label="new-expression"]
  855 -> 434 [style=dashed label="noexcept-expression"]
  855 -> 435 [style=dashed label="nonzero-digit"]
  855 -> 436 [style=dashed label="octal-literal"]
  855 -> 108 [style=dashed label="operator-function-id"]
  855 -> 109 [style=dashed label="placeholder-type-specifier"]
  855 -> 437 [style=dashed label="pm-expression"]
  855 -> 438 [style=dashed label="pointer-literal"]
  855 -> 439 [style=dashed label="postfix-expression"]
  855 -> 440 [style=dashed label="primary-expression"]
  855 -> 112 [style=dashed label="qualified-id"]
  855 -> 1344 [style=dashed label="relational-expression"]
  855 -> 442 [style=dashed label="requires-expression"]
  855 -> 443 [style=dashed label="shift-expression"]
  855 -> 114 [style=dashed label="simple-template-id"]
  855 -> 529 [style=dashed label="simple-type-specifier"]
  855 -> 445 [style=dashed label="string-literal"]
  855 -> 120 [style=dashed label="template-id"]
  855 -> 215 [style=dashed label="template-name"]
  855 -> 123 [style=dashed label="type-constraint"]
  855 -> 124 [style=dashed label="type-name"]
  855 -> 126 [style=dashed label="typedef-name"]
  855 -> 531 [style=dashed label="typename-specifier"]
  855 -> 449 [style=dashed label="unary-expression"]
  855 -> 450 [style=dashed label="unary-operator"]
  855 -> 129 [style=dashed label="unqualified-id"]
  855 -> 451 [style=dashed label="user-defined-character-literal"]
  855 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  855 -> 453 [style=dashed label="user-defined-integer-literal"]
  855 -> 454 [style=dashed label="user-defined-literal"]
  855 -> 455 [style=dashed label="user-defined-string-literal"]
  856 [label="State 856\n\l318 exclusive-or-expression: exclusive-or-expression XOR • and-expression\l"]
  856 -> 356 [style=solid label="PLUS"]
  856 -> 357 [style=solid label="MINUS"]
  856 -> 2 [style=solid label="IDENTIFIER"]
  856 -> 358 [style=solid label="OPEN_PAREN"]
  856 -> 359 [style=solid label="AND"]
  856 -> 360 [style=solid label="SCOPE"]
  856 -> 361 [style=solid label="OPEN_SQUARE"]
  856 -> 362 [style=solid label="CO_AWAIT"]
  856 -> 363 [style=solid label="ZERO_LB"]
  856 -> 364 [style=solid label="ZERO_HB"]
  856 -> 365 [style=solid label="SINGLE_QUOTE"]
  856 -> 366 [style=solid label="FALSE"]
  856 -> 367 [style=solid label="TRUE"]
  856 -> 368 [style=solid label="NOEXCEPT"]
  856 -> 17 [style=solid label="OPERATOR"]
  856 -> 26 [style=solid label="DECLTYPE"]
  856 -> 369 [style=solid label="DELETE"]
  856 -> 370 [style=solid label="DOT"]
  856 -> 184 [style=solid label="UNICODE_8"]
  856 -> 371 [style=solid label="MULT"]
  856 -> 199 [style=solid label="DOUBLE_QUOTE"]
  856 -> 372 [style=solid label="ZERO_LX"]
  856 -> 373 [style=solid label="ZERO_HX"]
  856 -> 374 [style=solid label="REQUIRES"]
  856 -> 375 [style=solid label="NEW"]
  856 -> 376 [style=solid label="COMPL"]
  856 -> 377 [style=solid label="NOT"]
  856 -> 378 [style=solid label="PLUS_PLUS"]
  856 -> 379 [style=solid label="MINUS_MINUS"]
  856 -> 380 [style=solid label="THIS"]
  856 -> 36 [style=solid label="AUTO"]
  856 -> 381 [style=solid label="NULLPTR"]
  856 -> 382 [style=solid label="DYNAMIC_CAST"]
  856 -> 383 [style=solid label="STATIC_CAST"]
  856 -> 384 [style=solid label="REINTERPRET_CAST"]
  856 -> 385 [style=solid label="CONST_CAST"]
  856 -> 386 [style=solid label="TYPEID"]
  856 -> 37 [style=solid label="CHAR"]
  856 -> 38 [style=solid label="CHAR8_T"]
  856 -> 39 [style=solid label="CHAR16_T"]
  856 -> 40 [style=solid label="CHAR32_T"]
  856 -> 41 [style=solid label="WCHAR_T"]
  856 -> 42 [style=solid label="BOOL"]
  856 -> 43 [style=solid label="SHORT"]
  856 -> 44 [style=solid label="INT"]
  856 -> 45 [style=solid label="LONG"]
  856 -> 46 [style=solid label="SIGNED"]
  856 -> 47 [style=solid label="UNSIGNED"]
  856 -> 48 [style=solid label="FLOAT"]
  856 -> 49 [style=solid label="DOUBLE"]
  856 -> 50 [style=solid label="VOID"]
  856 -> 55 [style=solid label="TYPENAME"]
  856 -> 387 [style=solid label="SIZEOF"]
  856 -> 388 [style=solid label="ALIGNOF"]
  856 -> 389 [style=solid label="'0'"]
  856 -> 390 [style=solid label="'1'"]
  856 -> 391 [style=solid label="'2'"]
  856 -> 392 [style=solid label="'3'"]
  856 -> 393 [style=solid label="'4'"]
  856 -> 394 [style=solid label="'5'"]
  856 -> 395 [style=solid label="'6'"]
  856 -> 396 [style=solid label="'7'"]
  856 -> 397 [style=solid label="'8'"]
  856 -> 398 [style=solid label="'9'"]
  856 -> 205 [style=solid label="'u'"]
  856 -> 206 [style=solid label="'U'"]
  856 -> 207 [style=solid label="'L'"]
  856 -> 208 [style=solid label="'R'"]
  856 -> 399 [style=dashed label="additive-expression"]
  856 -> 1345 [style=dashed label="and-expression"]
  856 -> 401 [style=dashed label="await-expression"]
  856 -> 402 [style=dashed label="binary-literal"]
  856 -> 403 [style=dashed label="boolean-literal"]
  856 -> 404 [style=dashed label="cast-expression"]
  856 -> 405 [style=dashed label="character-literal"]
  856 -> 65 [style=dashed label="class-name"]
  856 -> 406 [style=dashed label="compare-expression"]
  856 -> 67 [style=dashed label="concept-name"]
  856 -> 68 [style=dashed label="conversion-function-id"]
  856 -> 409 [style=dashed label="decimal-floating-point-literal"]
  856 -> 410 [style=dashed label="decimal-literal"]
  856 -> 76 [style=dashed label="decltype-specifier"]
  856 -> 411 [style=dashed label="delete-expression"]
  856 -> 412 [style=dashed label="digit"]
  856 -> 413 [style=dashed label="digit-sequence"]
  856 -> 414 [style=dashed label="encoding-prefix"]
  856 -> 84 [style=dashed label="enum-name"]
  856 -> 415 [style=dashed label="equality-expression"]
  856 -> 417 [style=dashed label="floating-point-literal"]
  856 -> 418 [style=dashed label="fold-expression"]
  856 -> 419 [style=dashed label="fractional-constant"]
  856 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  856 -> 421 [style=dashed label="hexadecimal-literal"]
  856 -> 422 [style=dashed label="hexadecimal-prefix"]
  856 -> 423 [style=dashed label="id-expression"]
  856 -> 425 [style=dashed label="integer-literal"]
  856 -> 426 [style=dashed label="lambda-expression"]
  856 -> 427 [style=dashed label="lambda-introducer"]
  856 -> 428 [style=dashed label="literal"]
  856 -> 95 [style=dashed label="literal-operator-id"]
  856 -> 431 [style=dashed label="multiplicative-expression"]
  856 -> 99 [style=dashed label="namespace-alias"]
  856 -> 102 [style=dashed label="namespace-name"]
  856 -> 432 [style=dashed label="nested-name-specifier"]
  856 -> 433 [style=dashed label="new-expression"]
  856 -> 434 [style=dashed label="noexcept-expression"]
  856 -> 435 [style=dashed label="nonzero-digit"]
  856 -> 436 [style=dashed label="octal-literal"]
  856 -> 108 [style=dashed label="operator-function-id"]
  856 -> 109 [style=dashed label="placeholder-type-specifier"]
  856 -> 437 [style=dashed label="pm-expression"]
  856 -> 438 [style=dashed label="pointer-literal"]
  856 -> 439 [style=dashed label="postfix-expression"]
  856 -> 440 [style=dashed label="primary-expression"]
  856 -> 112 [style=dashed label="qualified-id"]
  856 -> 441 [style=dashed label="relational-expression"]
  856 -> 442 [style=dashed label="requires-expression"]
  856 -> 443 [style=dashed label="shift-expression"]
  856 -> 114 [style=dashed label="simple-template-id"]
  856 -> 529 [style=dashed label="simple-type-specifier"]
  856 -> 445 [style=dashed label="string-literal"]
  856 -> 120 [style=dashed label="template-id"]
  856 -> 215 [style=dashed label="template-name"]
  856 -> 123 [style=dashed label="type-constraint"]
  856 -> 124 [style=dashed label="type-name"]
  856 -> 126 [style=dashed label="typedef-name"]
  856 -> 531 [style=dashed label="typename-specifier"]
  856 -> 449 [style=dashed label="unary-expression"]
  856 -> 450 [style=dashed label="unary-operator"]
  856 -> 129 [style=dashed label="unqualified-id"]
  856 -> 451 [style=dashed label="user-defined-character-literal"]
  856 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  856 -> 453 [style=dashed label="user-defined-integer-literal"]
  856 -> 454 [style=dashed label="user-defined-literal"]
  856 -> 455 [style=dashed label="user-defined-string-literal"]
  857 [label="State 857\n\l344 floating-point-suffix: 'L' •\l"]
  857 -> "857R344" [style=solid]
 "857R344" [label="R344", fillcolor=3, shape=diamond, style=filled]
  858 [label="State 858\n\l341 floating-point-suffix: 'f' •\l"]
  858 -> "858R341" [style=solid]
 "858R341" [label="R341", fillcolor=3, shape=diamond, style=filled]
  859 [label="State 859\n\l342 floating-point-suffix: 'l' •\l"]
  859 -> "859R342" [style=solid]
 "859R342" [label="R342", fillcolor=3, shape=diamond, style=filled]
  860 [label="State 860\n\l343 floating-point-suffix: 'F' •\l"]
  860 -> "860R343" [style=solid]
 "860R343" [label="R343", fillcolor=3, shape=diamond, style=filled]
  861 [label="State 861\n\l190 decimal-floating-point-literal: fractional-constant exponent-part •\l192                               | fractional-constant exponent-part • floating-point-suffix\l1151 user-defined-floating-point-literal: fractional-constant exponent-part • ud-suffix\l"]
  861 -> 822 [style=solid label="IDENTIFIER"]
  861 -> 857 [style=solid label="'L'"]
  861 -> 858 [style=solid label="'f'"]
  861 -> 859 [style=solid label="'l'"]
  861 -> 860 [style=solid label="'F'"]
  861 -> 1346 [style=dashed label="floating-point-suffix"]
  861 -> 1347 [style=dashed label="ud-suffix"]
  861 -> "861R190d" [label="[IDENTIFIER]", style=solid]
 "861R190d" [label="R190", fillcolor=5, shape=diamond, style=filled]
  861 -> "861R190" [style=solid]
 "861R190" [label="R190", fillcolor=3, shape=diamond, style=filled]
  862 [label="State 862\n\l191 decimal-floating-point-literal: fractional-constant floating-point-suffix •\l"]
  862 -> "862R191" [style=solid]
 "862R191" [label="R191", fillcolor=3, shape=diamond, style=filled]
  863 [label="State 863\n\l1150 user-defined-floating-point-literal: fractional-constant ud-suffix •\l"]
  863 -> "863R1150" [style=solid]
 "863R1150" [label="R1150", fillcolor=3, shape=diamond, style=filled]
  864 [label="State 864\n\l492 integer-literal: hexadecimal-literal integer-suffix •\l"]
  864 -> "864R492" [style=solid]
 "864R492" [label="R492", fillcolor=3, shape=diamond, style=filled]
  865 [label="State 865\n\l1157 user-defined-integer-literal: hexadecimal-literal ud-suffix •\l"]
  865 -> "865R1157" [style=solid]
 "865R1157" [label="R1157", fillcolor=3, shape=diamond, style=filled]
  866 [label="State 866\n\l454 hexadecimal-fractional-constant: DOT • hexadecimal-digit-sequence\l"]
  866 -> 867 [style=solid label="'0'"]
  866 -> 868 [style=solid label="'1'"]
  866 -> 869 [style=solid label="'2'"]
  866 -> 870 [style=solid label="'3'"]
  866 -> 871 [style=solid label="'4'"]
  866 -> 872 [style=solid label="'5'"]
  866 -> 873 [style=solid label="'6'"]
  866 -> 874 [style=solid label="'7'"]
  866 -> 875 [style=solid label="'8'"]
  866 -> 876 [style=solid label="'9'"]
  866 -> 877 [style=solid label="'e'"]
  866 -> 878 [style=solid label="'E'"]
  866 -> 879 [style=solid label="'f'"]
  866 -> 880 [style=solid label="'F'"]
  866 -> 881 [style=solid label="'a'"]
  866 -> 882 [style=solid label="'b'"]
  866 -> 883 [style=solid label="'c'"]
  866 -> 884 [style=solid label="'d'"]
  866 -> 885 [style=solid label="'A'"]
  866 -> 886 [style=solid label="'B'"]
  866 -> 887 [style=solid label="'C'"]
  866 -> 888 [style=solid label="'D'"]
  866 -> 889 [style=dashed label="hexadecimal-digit"]
  866 -> 1348 [style=dashed label="hexadecimal-digit-sequence"]
  867 [label="State 867\n\l422 hexadecimal-digit: '0' •\l"]
  867 -> "867R422" [style=solid]
 "867R422" [label="R422", fillcolor=3, shape=diamond, style=filled]
  868 [label="State 868\n\l423 hexadecimal-digit: '1' •\l"]
  868 -> "868R423" [style=solid]
 "868R423" [label="R423", fillcolor=3, shape=diamond, style=filled]
  869 [label="State 869\n\l424 hexadecimal-digit: '2' •\l"]
  869 -> "869R424" [style=solid]
 "869R424" [label="R424", fillcolor=3, shape=diamond, style=filled]
  870 [label="State 870\n\l425 hexadecimal-digit: '3' •\l"]
  870 -> "870R425" [style=solid]
 "870R425" [label="R425", fillcolor=3, shape=diamond, style=filled]
  871 [label="State 871\n\l426 hexadecimal-digit: '4' •\l"]
  871 -> "871R426" [style=solid]
 "871R426" [label="R426", fillcolor=3, shape=diamond, style=filled]
  872 [label="State 872\n\l427 hexadecimal-digit: '5' •\l"]
  872 -> "872R427" [style=solid]
 "872R427" [label="R427", fillcolor=3, shape=diamond, style=filled]
  873 [label="State 873\n\l428 hexadecimal-digit: '6' •\l"]
  873 -> "873R428" [style=solid]
 "873R428" [label="R428", fillcolor=3, shape=diamond, style=filled]
  874 [label="State 874\n\l429 hexadecimal-digit: '7' •\l"]
  874 -> "874R429" [style=solid]
 "874R429" [label="R429", fillcolor=3, shape=diamond, style=filled]
  875 [label="State 875\n\l430 hexadecimal-digit: '8' •\l"]
  875 -> "875R430" [style=solid]
 "875R430" [label="R430", fillcolor=3, shape=diamond, style=filled]
  876 [label="State 876\n\l431 hexadecimal-digit: '9' •\l"]
  876 -> "876R431" [style=solid]
 "876R431" [label="R431", fillcolor=3, shape=diamond, style=filled]
  877 [label="State 877\n\l436 hexadecimal-digit: 'e' •\l"]
  877 -> "877R436" [style=solid]
 "877R436" [label="R436", fillcolor=3, shape=diamond, style=filled]
  878 [label="State 878\n\l442 hexadecimal-digit: 'E' •\l"]
  878 -> "878R442" [style=solid]
 "878R442" [label="R442", fillcolor=3, shape=diamond, style=filled]
  879 [label="State 879\n\l437 hexadecimal-digit: 'f' •\l"]
  879 -> "879R437" [style=solid]
 "879R437" [label="R437", fillcolor=3, shape=diamond, style=filled]
  880 [label="State 880\n\l443 hexadecimal-digit: 'F' •\l"]
  880 -> "880R443" [style=solid]
 "880R443" [label="R443", fillcolor=3, shape=diamond, style=filled]
  881 [label="State 881\n\l432 hexadecimal-digit: 'a' •\l"]
  881 -> "881R432" [style=solid]
 "881R432" [label="R432", fillcolor=3, shape=diamond, style=filled]
  882 [label="State 882\n\l433 hexadecimal-digit: 'b' •\l"]
  882 -> "882R433" [style=solid]
 "882R433" [label="R433", fillcolor=3, shape=diamond, style=filled]
  883 [label="State 883\n\l434 hexadecimal-digit: 'c' •\l"]
  883 -> "883R434" [style=solid]
 "883R434" [label="R434", fillcolor=3, shape=diamond, style=filled]
  884 [label="State 884\n\l435 hexadecimal-digit: 'd' •\l"]
  884 -> "884R435" [style=solid]
 "884R435" [label="R435", fillcolor=3, shape=diamond, style=filled]
  885 [label="State 885\n\l438 hexadecimal-digit: 'A' •\l"]
  885 -> "885R438" [style=solid]
 "885R438" [label="R438", fillcolor=3, shape=diamond, style=filled]
  886 [label="State 886\n\l439 hexadecimal-digit: 'B' •\l"]
  886 -> "886R439" [style=solid]
 "886R439" [label="R439", fillcolor=3, shape=diamond, style=filled]
  887 [label="State 887\n\l440 hexadecimal-digit: 'C' •\l"]
  887 -> "887R440" [style=solid]
 "887R440" [label="R440", fillcolor=3, shape=diamond, style=filled]
  888 [label="State 888\n\l441 hexadecimal-digit: 'D' •\l"]
  888 -> "888R441" [style=solid]
 "888R441" [label="R441", fillcolor=3, shape=diamond, style=filled]
  889 [label="State 889\n\l444 hexadecimal-digit-sequence: hexadecimal-digit •\l"]
  889 -> "889R444" [style=solid]
 "889R444" [label="R444", fillcolor=3, shape=diamond, style=filled]
  890 [label="State 890\n\l445 hexadecimal-digit-sequence: hexadecimal-digit-sequence • hexadecimal-digit\l446                           | hexadecimal-digit-sequence • SINGLE_QUOTE hexadecimal-digit\l451 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence • binary-exponent-part\l452                                   | hexadecimal-prefix hexadecimal-digit-sequence • binary-exponent-part floating-point-suffix\l453 hexadecimal-fractional-constant: hexadecimal-digit-sequence • DOT hexadecimal-digit-sequence\l455                                | hexadecimal-digit-sequence • DOT\l456 hexadecimal-literal: hexadecimal-prefix hexadecimal-digit-sequence •\l1154 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence • binary-exponent-part ud-suffix\l"]
  890 -> 1349 [style=solid label="SINGLE_QUOTE"]
  890 -> 1350 [style=solid label="DOT"]
  890 -> 867 [style=solid label="'0'"]
  890 -> 868 [style=solid label="'1'"]
  890 -> 1351 [style=solid label="'p'"]
  890 -> 1352 [style=solid label="'P'"]
  890 -> 869 [style=solid label="'2'"]
  890 -> 870 [style=solid label="'3'"]
  890 -> 871 [style=solid label="'4'"]
  890 -> 872 [style=solid label="'5'"]
  890 -> 873 [style=solid label="'6'"]
  890 -> 874 [style=solid label="'7'"]
  890 -> 875 [style=solid label="'8'"]
  890 -> 876 [style=solid label="'9'"]
  890 -> 877 [style=solid label="'e'"]
  890 -> 878 [style=solid label="'E'"]
  890 -> 879 [style=solid label="'f'"]
  890 -> 880 [style=solid label="'F'"]
  890 -> 881 [style=solid label="'a'"]
  890 -> 882 [style=solid label="'b'"]
  890 -> 883 [style=solid label="'c'"]
  890 -> 884 [style=solid label="'d'"]
  890 -> 885 [style=solid label="'A'"]
  890 -> 886 [style=solid label="'B'"]
  890 -> 887 [style=solid label="'C'"]
  890 -> 888 [style=solid label="'D'"]
  890 -> 1353 [style=dashed label="binary-exponent-part"]
  890 -> 1354 [style=dashed label="hexadecimal-digit"]
  890 -> "890R456d" [label="[DOT]", style=solid]
 "890R456d" [label="R456", fillcolor=5, shape=diamond, style=filled]
  890 -> "890R456" [style=solid]
 "890R456" [label="R456", fillcolor=3, shape=diamond, style=filled]
  891 [label="State 891\n\l449 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant • binary-exponent-part\l450                                   | hexadecimal-prefix hexadecimal-fractional-constant • binary-exponent-part floating-point-suffix\l1153 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant • binary-exponent-part ud-suffix\l"]
  891 -> 1351 [style=solid label="'p'"]
  891 -> 1352 [style=solid label="'P'"]
  891 -> 1355 [style=dashed label="binary-exponent-part"]
  892 [label="State 892\n\l464 inclusive-or-expression: inclusive-or-expression OR • exclusive-or-expression\l"]
  892 -> 356 [style=solid label="PLUS"]
  892 -> 357 [style=solid label="MINUS"]
  892 -> 2 [style=solid label="IDENTIFIER"]
  892 -> 358 [style=solid label="OPEN_PAREN"]
  892 -> 359 [style=solid label="AND"]
  892 -> 360 [style=solid label="SCOPE"]
  892 -> 361 [style=solid label="OPEN_SQUARE"]
  892 -> 362 [style=solid label="CO_AWAIT"]
  892 -> 363 [style=solid label="ZERO_LB"]
  892 -> 364 [style=solid label="ZERO_HB"]
  892 -> 365 [style=solid label="SINGLE_QUOTE"]
  892 -> 366 [style=solid label="FALSE"]
  892 -> 367 [style=solid label="TRUE"]
  892 -> 368 [style=solid label="NOEXCEPT"]
  892 -> 17 [style=solid label="OPERATOR"]
  892 -> 26 [style=solid label="DECLTYPE"]
  892 -> 369 [style=solid label="DELETE"]
  892 -> 370 [style=solid label="DOT"]
  892 -> 184 [style=solid label="UNICODE_8"]
  892 -> 371 [style=solid label="MULT"]
  892 -> 199 [style=solid label="DOUBLE_QUOTE"]
  892 -> 372 [style=solid label="ZERO_LX"]
  892 -> 373 [style=solid label="ZERO_HX"]
  892 -> 374 [style=solid label="REQUIRES"]
  892 -> 375 [style=solid label="NEW"]
  892 -> 376 [style=solid label="COMPL"]
  892 -> 377 [style=solid label="NOT"]
  892 -> 378 [style=solid label="PLUS_PLUS"]
  892 -> 379 [style=solid label="MINUS_MINUS"]
  892 -> 380 [style=solid label="THIS"]
  892 -> 36 [style=solid label="AUTO"]
  892 -> 381 [style=solid label="NULLPTR"]
  892 -> 382 [style=solid label="DYNAMIC_CAST"]
  892 -> 383 [style=solid label="STATIC_CAST"]
  892 -> 384 [style=solid label="REINTERPRET_CAST"]
  892 -> 385 [style=solid label="CONST_CAST"]
  892 -> 386 [style=solid label="TYPEID"]
  892 -> 37 [style=solid label="CHAR"]
  892 -> 38 [style=solid label="CHAR8_T"]
  892 -> 39 [style=solid label="CHAR16_T"]
  892 -> 40 [style=solid label="CHAR32_T"]
  892 -> 41 [style=solid label="WCHAR_T"]
  892 -> 42 [style=solid label="BOOL"]
  892 -> 43 [style=solid label="SHORT"]
  892 -> 44 [style=solid label="INT"]
  892 -> 45 [style=solid label="LONG"]
  892 -> 46 [style=solid label="SIGNED"]
  892 -> 47 [style=solid label="UNSIGNED"]
  892 -> 48 [style=solid label="FLOAT"]
  892 -> 49 [style=solid label="DOUBLE"]
  892 -> 50 [style=solid label="VOID"]
  892 -> 55 [style=solid label="TYPENAME"]
  892 -> 387 [style=solid label="SIZEOF"]
  892 -> 388 [style=solid label="ALIGNOF"]
  892 -> 389 [style=solid label="'0'"]
  892 -> 390 [style=solid label="'1'"]
  892 -> 391 [style=solid label="'2'"]
  892 -> 392 [style=solid label="'3'"]
  892 -> 393 [style=solid label="'4'"]
  892 -> 394 [style=solid label="'5'"]
  892 -> 395 [style=solid label="'6'"]
  892 -> 396 [style=solid label="'7'"]
  892 -> 397 [style=solid label="'8'"]
  892 -> 398 [style=solid label="'9'"]
  892 -> 205 [style=solid label="'u'"]
  892 -> 206 [style=solid label="'U'"]
  892 -> 207 [style=solid label="'L'"]
  892 -> 208 [style=solid label="'R'"]
  892 -> 399 [style=dashed label="additive-expression"]
  892 -> 400 [style=dashed label="and-expression"]
  892 -> 401 [style=dashed label="await-expression"]
  892 -> 402 [style=dashed label="binary-literal"]
  892 -> 403 [style=dashed label="boolean-literal"]
  892 -> 404 [style=dashed label="cast-expression"]
  892 -> 405 [style=dashed label="character-literal"]
  892 -> 65 [style=dashed label="class-name"]
  892 -> 406 [style=dashed label="compare-expression"]
  892 -> 67 [style=dashed label="concept-name"]
  892 -> 68 [style=dashed label="conversion-function-id"]
  892 -> 409 [style=dashed label="decimal-floating-point-literal"]
  892 -> 410 [style=dashed label="decimal-literal"]
  892 -> 76 [style=dashed label="decltype-specifier"]
  892 -> 411 [style=dashed label="delete-expression"]
  892 -> 412 [style=dashed label="digit"]
  892 -> 413 [style=dashed label="digit-sequence"]
  892 -> 414 [style=dashed label="encoding-prefix"]
  892 -> 84 [style=dashed label="enum-name"]
  892 -> 415 [style=dashed label="equality-expression"]
  892 -> 1356 [style=dashed label="exclusive-or-expression"]
  892 -> 417 [style=dashed label="floating-point-literal"]
  892 -> 418 [style=dashed label="fold-expression"]
  892 -> 419 [style=dashed label="fractional-constant"]
  892 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  892 -> 421 [style=dashed label="hexadecimal-literal"]
  892 -> 422 [style=dashed label="hexadecimal-prefix"]
  892 -> 423 [style=dashed label="id-expression"]
  892 -> 425 [style=dashed label="integer-literal"]
  892 -> 426 [style=dashed label="lambda-expression"]
  892 -> 427 [style=dashed label="lambda-introducer"]
  892 -> 428 [style=dashed label="literal"]
  892 -> 95 [style=dashed label="literal-operator-id"]
  892 -> 431 [style=dashed label="multiplicative-expression"]
  892 -> 99 [style=dashed label="namespace-alias"]
  892 -> 102 [style=dashed label="namespace-name"]
  892 -> 432 [style=dashed label="nested-name-specifier"]
  892 -> 433 [style=dashed label="new-expression"]
  892 -> 434 [style=dashed label="noexcept-expression"]
  892 -> 435 [style=dashed label="nonzero-digit"]
  892 -> 436 [style=dashed label="octal-literal"]
  892 -> 108 [style=dashed label="operator-function-id"]
  892 -> 109 [style=dashed label="placeholder-type-specifier"]
  892 -> 437 [style=dashed label="pm-expression"]
  892 -> 438 [style=dashed label="pointer-literal"]
  892 -> 439 [style=dashed label="postfix-expression"]
  892 -> 440 [style=dashed label="primary-expression"]
  892 -> 112 [style=dashed label="qualified-id"]
  892 -> 441 [style=dashed label="relational-expression"]
  892 -> 442 [style=dashed label="requires-expression"]
  892 -> 443 [style=dashed label="shift-expression"]
  892 -> 114 [style=dashed label="simple-template-id"]
  892 -> 529 [style=dashed label="simple-type-specifier"]
  892 -> 445 [style=dashed label="string-literal"]
  892 -> 120 [style=dashed label="template-id"]
  892 -> 215 [style=dashed label="template-name"]
  892 -> 123 [style=dashed label="type-constraint"]
  892 -> 124 [style=dashed label="type-name"]
  892 -> 126 [style=dashed label="typedef-name"]
  892 -> 531 [style=dashed label="typename-specifier"]
  892 -> 449 [style=dashed label="unary-expression"]
  892 -> 450 [style=dashed label="unary-operator"]
  892 -> 129 [style=dashed label="unqualified-id"]
  892 -> 451 [style=dashed label="user-defined-character-literal"]
  892 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  892 -> 453 [style=dashed label="user-defined-integer-literal"]
  892 -> 454 [style=dashed label="user-defined-literal"]
  892 -> 455 [style=dashed label="user-defined-string-literal"]
  893 [label="State 893\n\l529 lambda-declarator: OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN lambda-specifiers\l530                  | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN lambda-specifiers requires-clause\l"]
  893 -> 162 [style=solid label="IDENTIFIER"]
  893 -> 4 [style=solid label="ALIGNAS"]
  893 -> 730 [style=solid label="ELLIPSIS"]
  893 -> 9 [style=solid label="SCOPE"]
  893 -> 10 [style=solid label="OPEN_SQUARE"]
  893 -> 11 [style=solid label="VIRTUAL"]
  893 -> 12 [style=solid label="CLASS"]
  893 -> 13 [style=solid label="STRUCT"]
  893 -> 14 [style=solid label="UNION"]
  893 -> 18 [style=solid label="CONST"]
  893 -> 19 [style=solid label="VOLATILE"]
  893 -> 20 [style=solid label="FRIEND"]
  893 -> 21 [style=solid label="TYPEDEF"]
  893 -> 22 [style=solid label="CONSTEXPR"]
  893 -> 23 [style=solid label="CONSTEVAL"]
  893 -> 24 [style=solid label="CONSTINIT"]
  893 -> 258 [style=solid label="INLINE"]
  893 -> 26 [style=solid label="DECLTYPE"]
  893 -> 27 [style=solid label="ENUM"]
  893 -> 259 [style=solid label="EXTERN"]
  893 -> 29 [style=solid label="EXPLICIT"]
  893 -> 471 [style=solid label="THIS"]
  893 -> 36 [style=solid label="AUTO"]
  893 -> 37 [style=solid label="CHAR"]
  893 -> 38 [style=solid label="CHAR8_T"]
  893 -> 39 [style=solid label="CHAR16_T"]
  893 -> 40 [style=solid label="CHAR32_T"]
  893 -> 41 [style=solid label="WCHAR_T"]
  893 -> 42 [style=solid label="BOOL"]
  893 -> 43 [style=solid label="SHORT"]
  893 -> 44 [style=solid label="INT"]
  893 -> 45 [style=solid label="LONG"]
  893 -> 46 [style=solid label="SIGNED"]
  893 -> 47 [style=solid label="UNSIGNED"]
  893 -> 48 [style=solid label="FLOAT"]
  893 -> 49 [style=solid label="DOUBLE"]
  893 -> 50 [style=solid label="VOID"]
  893 -> 52 [style=solid label="STATIC"]
  893 -> 53 [style=solid label="THREAD_LOCAL"]
  893 -> 54 [style=solid label="MUTABLE"]
  893 -> 55 [style=solid label="TYPENAME"]
  893 -> 57 [style=dashed label="alignment-specifier"]
  893 -> 60 [style=dashed label="attribute-specifier"]
  893 -> 473 [style=dashed label="attribute-specifier-seq"]
  893 -> 63 [style=dashed label="class-head"]
  893 -> 64 [style=dashed label="class-key"]
  893 -> 65 [style=dashed label="class-name"]
  893 -> 66 [style=dashed label="class-specifier"]
  893 -> 67 [style=dashed label="concept-name"]
  893 -> 69 [style=dashed label="cv-qualifier"]
  893 -> 70 [style=dashed label="decl-specifier"]
  893 -> 474 [style=dashed label="decl-specifier-seq"]
  893 -> 76 [style=dashed label="decltype-specifier"]
  893 -> 78 [style=dashed label="defining-type-specifier"]
  893 -> 79 [style=dashed label="elaborated-enum-specifier"]
  893 -> 80 [style=dashed label="elaborated-type-specifier"]
  893 -> 82 [style=dashed label="enum-head"]
  893 -> 263 [style=dashed label="enum-key"]
  893 -> 84 [style=dashed label="enum-name"]
  893 -> 85 [style=dashed label="enum-specifier"]
  893 -> 264 [style=dashed label="explicit-specifier"]
  893 -> 91 [style=dashed label="function-specifier"]
  893 -> 99 [style=dashed label="namespace-alias"]
  893 -> 102 [style=dashed label="namespace-name"]
  893 -> 212 [style=dashed label="nested-name-specifier"]
  893 -> 731 [style=dashed label="parameter-declaration"]
  893 -> 1357 [style=dashed label="parameter-declaration-clause"]
  893 -> 733 [style=dashed label="parameter-declaration-list"]
  893 -> 109 [style=dashed label="placeholder-type-specifier"]
  893 -> 141 [style=dashed label="simple-template-id"]
  893 -> 115 [style=dashed label="simple-type-specifier"]
  893 -> 117 [style=dashed label="storage-class-specifier"]
  893 -> 215 [style=dashed label="template-name"]
  893 -> 123 [style=dashed label="type-constraint"]
  893 -> 124 [style=dashed label="type-name"]
  893 -> 125 [style=dashed label="type-specifier"]
  893 -> 126 [style=dashed label="typedef-name"]
  893 -> 127 [style=dashed label="typename-specifier"]
  894 [label="State 894\n\l693 noexcept-specifier: NOEXCEPT • OPEN_PAREN constant-expression CLOSE_PAREN\l694                   | NOEXCEPT •\l"]
  894 -> 1358 [style=solid label="OPEN_PAREN"]
  894 -> "894R694d" [label="[OPEN_PAREN]", style=solid]
 "894R694d" [label="R694", fillcolor=5, shape=diamond, style=filled]
  894 -> "894R694" [style=solid]
 "894R694" [label="R694", fillcolor=3, shape=diamond, style=filled]
  895 [label="State 895\n\l532 lambda-expression: lambda-introducer LESS • template-parameter-list GREATER lambda-declarator compound-statement\l533                  | lambda-introducer LESS • template-parameter-list GREATER requires-clause lambda-declarator compound-statement\l"]
  895 -> 162 [style=solid label="IDENTIFIER"]
  895 -> 4 [style=solid label="ALIGNAS"]
  895 -> 9 [style=solid label="SCOPE"]
  895 -> 10 [style=solid label="OPEN_SQUARE"]
  895 -> 11 [style=solid label="VIRTUAL"]
  895 -> 468 [style=solid label="CLASS"]
  895 -> 13 [style=solid label="STRUCT"]
  895 -> 14 [style=solid label="UNION"]
  895 -> 469 [style=solid label="TEMPLATE"]
  895 -> 18 [style=solid label="CONST"]
  895 -> 19 [style=solid label="VOLATILE"]
  895 -> 20 [style=solid label="FRIEND"]
  895 -> 21 [style=solid label="TYPEDEF"]
  895 -> 22 [style=solid label="CONSTEXPR"]
  895 -> 23 [style=solid label="CONSTEVAL"]
  895 -> 24 [style=solid label="CONSTINIT"]
  895 -> 258 [style=solid label="INLINE"]
  895 -> 26 [style=solid label="DECLTYPE"]
  895 -> 27 [style=solid label="ENUM"]
  895 -> 259 [style=solid label="EXTERN"]
  895 -> 29 [style=solid label="EXPLICIT"]
  895 -> 471 [style=solid label="THIS"]
  895 -> 36 [style=solid label="AUTO"]
  895 -> 37 [style=solid label="CHAR"]
  895 -> 38 [style=solid label="CHAR8_T"]
  895 -> 39 [style=solid label="CHAR16_T"]
  895 -> 40 [style=solid label="CHAR32_T"]
  895 -> 41 [style=solid label="WCHAR_T"]
  895 -> 42 [style=solid label="BOOL"]
  895 -> 43 [style=solid label="SHORT"]
  895 -> 44 [style=solid label="INT"]
  895 -> 45 [style=solid label="LONG"]
  895 -> 46 [style=solid label="SIGNED"]
  895 -> 47 [style=solid label="UNSIGNED"]
  895 -> 48 [style=solid label="FLOAT"]
  895 -> 49 [style=solid label="DOUBLE"]
  895 -> 50 [style=solid label="VOID"]
  895 -> 52 [style=solid label="STATIC"]
  895 -> 53 [style=solid label="THREAD_LOCAL"]
  895 -> 54 [style=solid label="MUTABLE"]
  895 -> 472 [style=solid label="TYPENAME"]
  895 -> 57 [style=dashed label="alignment-specifier"]
  895 -> 60 [style=dashed label="attribute-specifier"]
  895 -> 473 [style=dashed label="attribute-specifier-seq"]
  895 -> 63 [style=dashed label="class-head"]
  895 -> 64 [style=dashed label="class-key"]
  895 -> 65 [style=dashed label="class-name"]
  895 -> 66 [style=dashed label="class-specifier"]
  895 -> 67 [style=dashed label="concept-name"]
  895 -> 69 [style=dashed label="cv-qualifier"]
  895 -> 70 [style=dashed label="decl-specifier"]
  895 -> 474 [style=dashed label="decl-specifier-seq"]
  895 -> 76 [style=dashed label="decltype-specifier"]
  895 -> 78 [style=dashed label="defining-type-specifier"]
  895 -> 79 [style=dashed label="elaborated-enum-specifier"]
  895 -> 80 [style=dashed label="elaborated-type-specifier"]
  895 -> 82 [style=dashed label="enum-head"]
  895 -> 263 [style=dashed label="enum-key"]
  895 -> 84 [style=dashed label="enum-name"]
  895 -> 85 [style=dashed label="enum-specifier"]
  895 -> 264 [style=dashed label="explicit-specifier"]
  895 -> 91 [style=dashed label="function-specifier"]
  895 -> 99 [style=dashed label="namespace-alias"]
  895 -> 102 [style=dashed label="namespace-name"]
  895 -> 212 [style=dashed label="nested-name-specifier"]
  895 -> 475 [style=dashed label="parameter-declaration"]
  895 -> 109 [style=dashed label="placeholder-type-specifier"]
  895 -> 141 [style=dashed label="simple-template-id"]
  895 -> 115 [style=dashed label="simple-type-specifier"]
  895 -> 117 [style=dashed label="storage-class-specifier"]
  895 -> 476 [style=dashed label="template-head"]
  895 -> 215 [style=dashed label="template-name"]
  895 -> 477 [style=dashed label="template-parameter"]
  895 -> 1359 [style=dashed label="template-parameter-list"]
  895 -> 479 [style=dashed label="type-constraint"]
  895 -> 124 [style=dashed label="type-name"]
  895 -> 480 [style=dashed label="type-parameter"]
  895 -> 481 [style=dashed label="type-parameter-key"]
  895 -> 125 [style=dashed label="type-specifier"]
  895 -> 126 [style=dashed label="typedef-name"]
  895 -> 127 [style=dashed label="typename-specifier"]
  896 [label="State 896\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l540 lambda-specifiers: attribute-specifier-seq •\l548                  | attribute-specifier-seq • trailing-return-type\l"]
  896 -> 4 [style=solid label="ALIGNAS"]
  896 -> 10 [style=solid label="OPEN_SQUARE"]
  896 -> 736 [style=solid label="DEREF"]
  896 -> 57 [style=dashed label="alignment-specifier"]
  896 -> 260 [style=dashed label="attribute-specifier"]
  896 -> 1360 [style=dashed label="trailing-return-type"]
  896 -> "896R540" [style=solid]
 "896R540" [label="R540", fillcolor=3, shape=diamond, style=filled]
  897 [label="State 897\n\l536 lambda-specifiers: decl-specifier-seq •\l537                  | decl-specifier-seq • noexcept-specifier\l539                  | decl-specifier-seq • attribute-specifier-seq\l541                  | decl-specifier-seq • noexcept-specifier attribute-specifier-seq\l543                  | decl-specifier-seq • trailing-return-type\l545                  | decl-specifier-seq • noexcept-specifier trailing-return-type\l547                  | decl-specifier-seq • attribute-specifier-seq trailing-return-type\l549                  | decl-specifier-seq • noexcept-specifier attribute-specifier-seq trailing-return-type\l"]
  897 -> 4 [style=solid label="ALIGNAS"]
  897 -> 10 [style=solid label="OPEN_SQUARE"]
  897 -> 894 [style=solid label="NOEXCEPT"]
  897 -> 736 [style=solid label="DEREF"]
  897 -> 57 [style=dashed label="alignment-specifier"]
  897 -> 60 [style=dashed label="attribute-specifier"]
  897 -> 1361 [style=dashed label="attribute-specifier-seq"]
  897 -> 1362 [style=dashed label="noexcept-specifier"]
  897 -> 1363 [style=dashed label="trailing-return-type"]
  897 -> "897R536" [style=solid]
 "897R536" [label="R536", fillcolor=3, shape=diamond, style=filled]
  898 [label="State 898\n\l531 lambda-expression: lambda-introducer lambda-declarator • compound-statement\l"]
  898 -> 289 [style=solid label="OPEN_BRACE"]
  898 -> 1364 [style=dashed label="compound-statement"]
  899 [label="State 899\n\l528 lambda-declarator: lambda-specifiers •\l"]
  899 -> "899R528" [style=solid]
 "899R528" [label="R528", fillcolor=3, shape=diamond, style=filled]
  900 [label="State 900\n\l538 lambda-specifiers: noexcept-specifier •\l542                  | noexcept-specifier • attribute-specifier-seq\l546                  | noexcept-specifier • trailing-return-type\l550                  | noexcept-specifier • attribute-specifier-seq trailing-return-type\l"]
  900 -> 4 [style=solid label="ALIGNAS"]
  900 -> 10 [style=solid label="OPEN_SQUARE"]
  900 -> 736 [style=solid label="DEREF"]
  900 -> 57 [style=dashed label="alignment-specifier"]
  900 -> 60 [style=dashed label="attribute-specifier"]
  900 -> 1365 [style=dashed label="attribute-specifier-seq"]
  900 -> 1366 [style=dashed label="trailing-return-type"]
  900 -> "900R538" [style=solid]
 "900R538" [label="R538", fillcolor=3, shape=diamond, style=filled]
  901 [label="State 901\n\l544 lambda-specifiers: trailing-return-type •\l"]
  901 -> "901R544" [style=solid]
 "901R544" [label="R544", fillcolor=3, shape=diamond, style=filled]
  902 [label="State 902\n\l564 logical-and-expression: logical-and-expression AND_AND • inclusive-or-expression\l"]
  902 -> 356 [style=solid label="PLUS"]
  902 -> 357 [style=solid label="MINUS"]
  902 -> 2 [style=solid label="IDENTIFIER"]
  902 -> 358 [style=solid label="OPEN_PAREN"]
  902 -> 359 [style=solid label="AND"]
  902 -> 360 [style=solid label="SCOPE"]
  902 -> 361 [style=solid label="OPEN_SQUARE"]
  902 -> 362 [style=solid label="CO_AWAIT"]
  902 -> 363 [style=solid label="ZERO_LB"]
  902 -> 364 [style=solid label="ZERO_HB"]
  902 -> 365 [style=solid label="SINGLE_QUOTE"]
  902 -> 366 [style=solid label="FALSE"]
  902 -> 367 [style=solid label="TRUE"]
  902 -> 368 [style=solid label="NOEXCEPT"]
  902 -> 17 [style=solid label="OPERATOR"]
  902 -> 26 [style=solid label="DECLTYPE"]
  902 -> 369 [style=solid label="DELETE"]
  902 -> 370 [style=solid label="DOT"]
  902 -> 184 [style=solid label="UNICODE_8"]
  902 -> 371 [style=solid label="MULT"]
  902 -> 199 [style=solid label="DOUBLE_QUOTE"]
  902 -> 372 [style=solid label="ZERO_LX"]
  902 -> 373 [style=solid label="ZERO_HX"]
  902 -> 374 [style=solid label="REQUIRES"]
  902 -> 375 [style=solid label="NEW"]
  902 -> 376 [style=solid label="COMPL"]
  902 -> 377 [style=solid label="NOT"]
  902 -> 378 [style=solid label="PLUS_PLUS"]
  902 -> 379 [style=solid label="MINUS_MINUS"]
  902 -> 380 [style=solid label="THIS"]
  902 -> 36 [style=solid label="AUTO"]
  902 -> 381 [style=solid label="NULLPTR"]
  902 -> 382 [style=solid label="DYNAMIC_CAST"]
  902 -> 383 [style=solid label="STATIC_CAST"]
  902 -> 384 [style=solid label="REINTERPRET_CAST"]
  902 -> 385 [style=solid label="CONST_CAST"]
  902 -> 386 [style=solid label="TYPEID"]
  902 -> 37 [style=solid label="CHAR"]
  902 -> 38 [style=solid label="CHAR8_T"]
  902 -> 39 [style=solid label="CHAR16_T"]
  902 -> 40 [style=solid label="CHAR32_T"]
  902 -> 41 [style=solid label="WCHAR_T"]
  902 -> 42 [style=solid label="BOOL"]
  902 -> 43 [style=solid label="SHORT"]
  902 -> 44 [style=solid label="INT"]
  902 -> 45 [style=solid label="LONG"]
  902 -> 46 [style=solid label="SIGNED"]
  902 -> 47 [style=solid label="UNSIGNED"]
  902 -> 48 [style=solid label="FLOAT"]
  902 -> 49 [style=solid label="DOUBLE"]
  902 -> 50 [style=solid label="VOID"]
  902 -> 55 [style=solid label="TYPENAME"]
  902 -> 387 [style=solid label="SIZEOF"]
  902 -> 388 [style=solid label="ALIGNOF"]
  902 -> 389 [style=solid label="'0'"]
  902 -> 390 [style=solid label="'1'"]
  902 -> 391 [style=solid label="'2'"]
  902 -> 392 [style=solid label="'3'"]
  902 -> 393 [style=solid label="'4'"]
  902 -> 394 [style=solid label="'5'"]
  902 -> 395 [style=solid label="'6'"]
  902 -> 396 [style=solid label="'7'"]
  902 -> 397 [style=solid label="'8'"]
  902 -> 398 [style=solid label="'9'"]
  902 -> 205 [style=solid label="'u'"]
  902 -> 206 [style=solid label="'U'"]
  902 -> 207 [style=solid label="'L'"]
  902 -> 208 [style=solid label="'R'"]
  902 -> 399 [style=dashed label="additive-expression"]
  902 -> 400 [style=dashed label="and-expression"]
  902 -> 401 [style=dashed label="await-expression"]
  902 -> 402 [style=dashed label="binary-literal"]
  902 -> 403 [style=dashed label="boolean-literal"]
  902 -> 404 [style=dashed label="cast-expression"]
  902 -> 405 [style=dashed label="character-literal"]
  902 -> 65 [style=dashed label="class-name"]
  902 -> 406 [style=dashed label="compare-expression"]
  902 -> 67 [style=dashed label="concept-name"]
  902 -> 68 [style=dashed label="conversion-function-id"]
  902 -> 409 [style=dashed label="decimal-floating-point-literal"]
  902 -> 410 [style=dashed label="decimal-literal"]
  902 -> 76 [style=dashed label="decltype-specifier"]
  902 -> 411 [style=dashed label="delete-expression"]
  902 -> 412 [style=dashed label="digit"]
  902 -> 413 [style=dashed label="digit-sequence"]
  902 -> 414 [style=dashed label="encoding-prefix"]
  902 -> 84 [style=dashed label="enum-name"]
  902 -> 415 [style=dashed label="equality-expression"]
  902 -> 416 [style=dashed label="exclusive-or-expression"]
  902 -> 417 [style=dashed label="floating-point-literal"]
  902 -> 418 [style=dashed label="fold-expression"]
  902 -> 419 [style=dashed label="fractional-constant"]
  902 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  902 -> 421 [style=dashed label="hexadecimal-literal"]
  902 -> 422 [style=dashed label="hexadecimal-prefix"]
  902 -> 423 [style=dashed label="id-expression"]
  902 -> 1367 [style=dashed label="inclusive-or-expression"]
  902 -> 425 [style=dashed label="integer-literal"]
  902 -> 426 [style=dashed label="lambda-expression"]
  902 -> 427 [style=dashed label="lambda-introducer"]
  902 -> 428 [style=dashed label="literal"]
  902 -> 95 [style=dashed label="literal-operator-id"]
  902 -> 431 [style=dashed label="multiplicative-expression"]
  902 -> 99 [style=dashed label="namespace-alias"]
  902 -> 102 [style=dashed label="namespace-name"]
  902 -> 432 [style=dashed label="nested-name-specifier"]
  902 -> 433 [style=dashed label="new-expression"]
  902 -> 434 [style=dashed label="noexcept-expression"]
  902 -> 435 [style=dashed label="nonzero-digit"]
  902 -> 436 [style=dashed label="octal-literal"]
  902 -> 108 [style=dashed label="operator-function-id"]
  902 -> 109 [style=dashed label="placeholder-type-specifier"]
  902 -> 437 [style=dashed label="pm-expression"]
  902 -> 438 [style=dashed label="pointer-literal"]
  902 -> 439 [style=dashed label="postfix-expression"]
  902 -> 440 [style=dashed label="primary-expression"]
  902 -> 112 [style=dashed label="qualified-id"]
  902 -> 441 [style=dashed label="relational-expression"]
  902 -> 442 [style=dashed label="requires-expression"]
  902 -> 443 [style=dashed label="shift-expression"]
  902 -> 114 [style=dashed label="simple-template-id"]
  902 -> 529 [style=dashed label="simple-type-specifier"]
  902 -> 445 [style=dashed label="string-literal"]
  902 -> 120 [style=dashed label="template-id"]
  902 -> 215 [style=dashed label="template-name"]
  902 -> 123 [style=dashed label="type-constraint"]
  902 -> 124 [style=dashed label="type-name"]
  902 -> 126 [style=dashed label="typedef-name"]
  902 -> 531 [style=dashed label="typename-specifier"]
  902 -> 449 [style=dashed label="unary-expression"]
  902 -> 450 [style=dashed label="unary-operator"]
  902 -> 129 [style=dashed label="unqualified-id"]
  902 -> 451 [style=dashed label="user-defined-character-literal"]
  902 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  902 -> 453 [style=dashed label="user-defined-integer-literal"]
  902 -> 454 [style=dashed label="user-defined-literal"]
  902 -> 455 [style=dashed label="user-defined-string-literal"]
  903 [label="State 903\n\l170 conditional-expression: logical-or-expression QUERY • expression COLON assignment-expression\l"]
  903 -> 356 [style=solid label="PLUS"]
  903 -> 357 [style=solid label="MINUS"]
  903 -> 2 [style=solid label="IDENTIFIER"]
  903 -> 358 [style=solid label="OPEN_PAREN"]
  903 -> 359 [style=solid label="AND"]
  903 -> 360 [style=solid label="SCOPE"]
  903 -> 361 [style=solid label="OPEN_SQUARE"]
  903 -> 362 [style=solid label="CO_AWAIT"]
  903 -> 363 [style=solid label="ZERO_LB"]
  903 -> 364 [style=solid label="ZERO_HB"]
  903 -> 365 [style=solid label="SINGLE_QUOTE"]
  903 -> 366 [style=solid label="FALSE"]
  903 -> 367 [style=solid label="TRUE"]
  903 -> 368 [style=solid label="NOEXCEPT"]
  903 -> 17 [style=solid label="OPERATOR"]
  903 -> 26 [style=solid label="DECLTYPE"]
  903 -> 369 [style=solid label="DELETE"]
  903 -> 370 [style=solid label="DOT"]
  903 -> 184 [style=solid label="UNICODE_8"]
  903 -> 371 [style=solid label="MULT"]
  903 -> 199 [style=solid label="DOUBLE_QUOTE"]
  903 -> 372 [style=solid label="ZERO_LX"]
  903 -> 373 [style=solid label="ZERO_HX"]
  903 -> 374 [style=solid label="REQUIRES"]
  903 -> 375 [style=solid label="NEW"]
  903 -> 376 [style=solid label="COMPL"]
  903 -> 377 [style=solid label="NOT"]
  903 -> 378 [style=solid label="PLUS_PLUS"]
  903 -> 379 [style=solid label="MINUS_MINUS"]
  903 -> 380 [style=solid label="THIS"]
  903 -> 36 [style=solid label="AUTO"]
  903 -> 381 [style=solid label="NULLPTR"]
  903 -> 382 [style=solid label="DYNAMIC_CAST"]
  903 -> 383 [style=solid label="STATIC_CAST"]
  903 -> 384 [style=solid label="REINTERPRET_CAST"]
  903 -> 385 [style=solid label="CONST_CAST"]
  903 -> 386 [style=solid label="TYPEID"]
  903 -> 37 [style=solid label="CHAR"]
  903 -> 38 [style=solid label="CHAR8_T"]
  903 -> 39 [style=solid label="CHAR16_T"]
  903 -> 40 [style=solid label="CHAR32_T"]
  903 -> 41 [style=solid label="WCHAR_T"]
  903 -> 42 [style=solid label="BOOL"]
  903 -> 43 [style=solid label="SHORT"]
  903 -> 44 [style=solid label="INT"]
  903 -> 45 [style=solid label="LONG"]
  903 -> 46 [style=solid label="SIGNED"]
  903 -> 47 [style=solid label="UNSIGNED"]
  903 -> 48 [style=solid label="FLOAT"]
  903 -> 49 [style=solid label="DOUBLE"]
  903 -> 50 [style=solid label="VOID"]
  903 -> 523 [style=solid label="THROW"]
  903 -> 55 [style=solid label="TYPENAME"]
  903 -> 387 [style=solid label="SIZEOF"]
  903 -> 388 [style=solid label="ALIGNOF"]
  903 -> 524 [style=solid label="CO_YIELD"]
  903 -> 389 [style=solid label="'0'"]
  903 -> 390 [style=solid label="'1'"]
  903 -> 391 [style=solid label="'2'"]
  903 -> 392 [style=solid label="'3'"]
  903 -> 393 [style=solid label="'4'"]
  903 -> 394 [style=solid label="'5'"]
  903 -> 395 [style=solid label="'6'"]
  903 -> 396 [style=solid label="'7'"]
  903 -> 397 [style=solid label="'8'"]
  903 -> 398 [style=solid label="'9'"]
  903 -> 205 [style=solid label="'u'"]
  903 -> 206 [style=solid label="'U'"]
  903 -> 207 [style=solid label="'L'"]
  903 -> 208 [style=solid label="'R'"]
  903 -> 399 [style=dashed label="additive-expression"]
  903 -> 400 [style=dashed label="and-expression"]
  903 -> 525 [style=dashed label="assignment-expression"]
  903 -> 401 [style=dashed label="await-expression"]
  903 -> 402 [style=dashed label="binary-literal"]
  903 -> 403 [style=dashed label="boolean-literal"]
  903 -> 404 [style=dashed label="cast-expression"]
  903 -> 405 [style=dashed label="character-literal"]
  903 -> 65 [style=dashed label="class-name"]
  903 -> 406 [style=dashed label="compare-expression"]
  903 -> 67 [style=dashed label="concept-name"]
  903 -> 526 [style=dashed label="conditional-expression"]
  903 -> 68 [style=dashed label="conversion-function-id"]
  903 -> 409 [style=dashed label="decimal-floating-point-literal"]
  903 -> 410 [style=dashed label="decimal-literal"]
  903 -> 76 [style=dashed label="decltype-specifier"]
  903 -> 411 [style=dashed label="delete-expression"]
  903 -> 412 [style=dashed label="digit"]
  903 -> 413 [style=dashed label="digit-sequence"]
  903 -> 414 [style=dashed label="encoding-prefix"]
  903 -> 84 [style=dashed label="enum-name"]
  903 -> 415 [style=dashed label="equality-expression"]
  903 -> 416 [style=dashed label="exclusive-or-expression"]
  903 -> 1368 [style=dashed label="expression"]
  903 -> 417 [style=dashed label="floating-point-literal"]
  903 -> 418 [style=dashed label="fold-expression"]
  903 -> 419 [style=dashed label="fractional-constant"]
  903 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  903 -> 421 [style=dashed label="hexadecimal-literal"]
  903 -> 422 [style=dashed label="hexadecimal-prefix"]
  903 -> 423 [style=dashed label="id-expression"]
  903 -> 424 [style=dashed label="inclusive-or-expression"]
  903 -> 425 [style=dashed label="integer-literal"]
  903 -> 426 [style=dashed label="lambda-expression"]
  903 -> 427 [style=dashed label="lambda-introducer"]
  903 -> 428 [style=dashed label="literal"]
  903 -> 95 [style=dashed label="literal-operator-id"]
  903 -> 429 [style=dashed label="logical-and-expression"]
  903 -> 528 [style=dashed label="logical-or-expression"]
  903 -> 431 [style=dashed label="multiplicative-expression"]
  903 -> 99 [style=dashed label="namespace-alias"]
  903 -> 102 [style=dashed label="namespace-name"]
  903 -> 432 [style=dashed label="nested-name-specifier"]
  903 -> 433 [style=dashed label="new-expression"]
  903 -> 434 [style=dashed label="noexcept-expression"]
  903 -> 435 [style=dashed label="nonzero-digit"]
  903 -> 436 [style=dashed label="octal-literal"]
  903 -> 108 [style=dashed label="operator-function-id"]
  903 -> 109 [style=dashed label="placeholder-type-specifier"]
  903 -> 437 [style=dashed label="pm-expression"]
  903 -> 438 [style=dashed label="pointer-literal"]
  903 -> 439 [style=dashed label="postfix-expression"]
  903 -> 440 [style=dashed label="primary-expression"]
  903 -> 112 [style=dashed label="qualified-id"]
  903 -> 441 [style=dashed label="relational-expression"]
  903 -> 442 [style=dashed label="requires-expression"]
  903 -> 443 [style=dashed label="shift-expression"]
  903 -> 114 [style=dashed label="simple-template-id"]
  903 -> 529 [style=dashed label="simple-type-specifier"]
  903 -> 445 [style=dashed label="string-literal"]
  903 -> 120 [style=dashed label="template-id"]
  903 -> 215 [style=dashed label="template-name"]
  903 -> 530 [style=dashed label="throw-expression"]
  903 -> 123 [style=dashed label="type-constraint"]
  903 -> 124 [style=dashed label="type-name"]
  903 -> 126 [style=dashed label="typedef-name"]
  903 -> 531 [style=dashed label="typename-specifier"]
  903 -> 449 [style=dashed label="unary-expression"]
  903 -> 450 [style=dashed label="unary-operator"]
  903 -> 129 [style=dashed label="unqualified-id"]
  903 -> 451 [style=dashed label="user-defined-character-literal"]
  903 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  903 -> 453 [style=dashed label="user-defined-integer-literal"]
  903 -> 454 [style=dashed label="user-defined-literal"]
  903 -> 455 [style=dashed label="user-defined-string-literal"]
  903 -> 532 [style=dashed label="yield-expression"]
  904 [label="State 904\n\l566 logical-or-expression: logical-or-expression OR_OR • logical-and-expression\l"]
  904 -> 356 [style=solid label="PLUS"]
  904 -> 357 [style=solid label="MINUS"]
  904 -> 2 [style=solid label="IDENTIFIER"]
  904 -> 358 [style=solid label="OPEN_PAREN"]
  904 -> 359 [style=solid label="AND"]
  904 -> 360 [style=solid label="SCOPE"]
  904 -> 361 [style=solid label="OPEN_SQUARE"]
  904 -> 362 [style=solid label="CO_AWAIT"]
  904 -> 363 [style=solid label="ZERO_LB"]
  904 -> 364 [style=solid label="ZERO_HB"]
  904 -> 365 [style=solid label="SINGLE_QUOTE"]
  904 -> 366 [style=solid label="FALSE"]
  904 -> 367 [style=solid label="TRUE"]
  904 -> 368 [style=solid label="NOEXCEPT"]
  904 -> 17 [style=solid label="OPERATOR"]
  904 -> 26 [style=solid label="DECLTYPE"]
  904 -> 369 [style=solid label="DELETE"]
  904 -> 370 [style=solid label="DOT"]
  904 -> 184 [style=solid label="UNICODE_8"]
  904 -> 371 [style=solid label="MULT"]
  904 -> 199 [style=solid label="DOUBLE_QUOTE"]
  904 -> 372 [style=solid label="ZERO_LX"]
  904 -> 373 [style=solid label="ZERO_HX"]
  904 -> 374 [style=solid label="REQUIRES"]
  904 -> 375 [style=solid label="NEW"]
  904 -> 376 [style=solid label="COMPL"]
  904 -> 377 [style=solid label="NOT"]
  904 -> 378 [style=solid label="PLUS_PLUS"]
  904 -> 379 [style=solid label="MINUS_MINUS"]
  904 -> 380 [style=solid label="THIS"]
  904 -> 36 [style=solid label="AUTO"]
  904 -> 381 [style=solid label="NULLPTR"]
  904 -> 382 [style=solid label="DYNAMIC_CAST"]
  904 -> 383 [style=solid label="STATIC_CAST"]
  904 -> 384 [style=solid label="REINTERPRET_CAST"]
  904 -> 385 [style=solid label="CONST_CAST"]
  904 -> 386 [style=solid label="TYPEID"]
  904 -> 37 [style=solid label="CHAR"]
  904 -> 38 [style=solid label="CHAR8_T"]
  904 -> 39 [style=solid label="CHAR16_T"]
  904 -> 40 [style=solid label="CHAR32_T"]
  904 -> 41 [style=solid label="WCHAR_T"]
  904 -> 42 [style=solid label="BOOL"]
  904 -> 43 [style=solid label="SHORT"]
  904 -> 44 [style=solid label="INT"]
  904 -> 45 [style=solid label="LONG"]
  904 -> 46 [style=solid label="SIGNED"]
  904 -> 47 [style=solid label="UNSIGNED"]
  904 -> 48 [style=solid label="FLOAT"]
  904 -> 49 [style=solid label="DOUBLE"]
  904 -> 50 [style=solid label="VOID"]
  904 -> 55 [style=solid label="TYPENAME"]
  904 -> 387 [style=solid label="SIZEOF"]
  904 -> 388 [style=solid label="ALIGNOF"]
  904 -> 389 [style=solid label="'0'"]
  904 -> 390 [style=solid label="'1'"]
  904 -> 391 [style=solid label="'2'"]
  904 -> 392 [style=solid label="'3'"]
  904 -> 393 [style=solid label="'4'"]
  904 -> 394 [style=solid label="'5'"]
  904 -> 395 [style=solid label="'6'"]
  904 -> 396 [style=solid label="'7'"]
  904 -> 397 [style=solid label="'8'"]
  904 -> 398 [style=solid label="'9'"]
  904 -> 205 [style=solid label="'u'"]
  904 -> 206 [style=solid label="'U'"]
  904 -> 207 [style=solid label="'L'"]
  904 -> 208 [style=solid label="'R'"]
  904 -> 399 [style=dashed label="additive-expression"]
  904 -> 400 [style=dashed label="and-expression"]
  904 -> 401 [style=dashed label="await-expression"]
  904 -> 402 [style=dashed label="binary-literal"]
  904 -> 403 [style=dashed label="boolean-literal"]
  904 -> 404 [style=dashed label="cast-expression"]
  904 -> 405 [style=dashed label="character-literal"]
  904 -> 65 [style=dashed label="class-name"]
  904 -> 406 [style=dashed label="compare-expression"]
  904 -> 67 [style=dashed label="concept-name"]
  904 -> 68 [style=dashed label="conversion-function-id"]
  904 -> 409 [style=dashed label="decimal-floating-point-literal"]
  904 -> 410 [style=dashed label="decimal-literal"]
  904 -> 76 [style=dashed label="decltype-specifier"]
  904 -> 411 [style=dashed label="delete-expression"]
  904 -> 412 [style=dashed label="digit"]
  904 -> 413 [style=dashed label="digit-sequence"]
  904 -> 414 [style=dashed label="encoding-prefix"]
  904 -> 84 [style=dashed label="enum-name"]
  904 -> 415 [style=dashed label="equality-expression"]
  904 -> 416 [style=dashed label="exclusive-or-expression"]
  904 -> 417 [style=dashed label="floating-point-literal"]
  904 -> 418 [style=dashed label="fold-expression"]
  904 -> 419 [style=dashed label="fractional-constant"]
  904 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  904 -> 421 [style=dashed label="hexadecimal-literal"]
  904 -> 422 [style=dashed label="hexadecimal-prefix"]
  904 -> 423 [style=dashed label="id-expression"]
  904 -> 424 [style=dashed label="inclusive-or-expression"]
  904 -> 425 [style=dashed label="integer-literal"]
  904 -> 426 [style=dashed label="lambda-expression"]
  904 -> 427 [style=dashed label="lambda-introducer"]
  904 -> 428 [style=dashed label="literal"]
  904 -> 95 [style=dashed label="literal-operator-id"]
  904 -> 1369 [style=dashed label="logical-and-expression"]
  904 -> 431 [style=dashed label="multiplicative-expression"]
  904 -> 99 [style=dashed label="namespace-alias"]
  904 -> 102 [style=dashed label="namespace-name"]
  904 -> 432 [style=dashed label="nested-name-specifier"]
  904 -> 433 [style=dashed label="new-expression"]
  904 -> 434 [style=dashed label="noexcept-expression"]
  904 -> 435 [style=dashed label="nonzero-digit"]
  904 -> 436 [style=dashed label="octal-literal"]
  904 -> 108 [style=dashed label="operator-function-id"]
  904 -> 109 [style=dashed label="placeholder-type-specifier"]
  904 -> 437 [style=dashed label="pm-expression"]
  904 -> 438 [style=dashed label="pointer-literal"]
  904 -> 439 [style=dashed label="postfix-expression"]
  904 -> 440 [style=dashed label="primary-expression"]
  904 -> 112 [style=dashed label="qualified-id"]
  904 -> 441 [style=dashed label="relational-expression"]
  904 -> 442 [style=dashed label="requires-expression"]
  904 -> 443 [style=dashed label="shift-expression"]
  904 -> 114 [style=dashed label="simple-template-id"]
  904 -> 529 [style=dashed label="simple-type-specifier"]
  904 -> 445 [style=dashed label="string-literal"]
  904 -> 120 [style=dashed label="template-id"]
  904 -> 215 [style=dashed label="template-name"]
  904 -> 123 [style=dashed label="type-constraint"]
  904 -> 124 [style=dashed label="type-name"]
  904 -> 126 [style=dashed label="typedef-name"]
  904 -> 531 [style=dashed label="typename-specifier"]
  904 -> 449 [style=dashed label="unary-expression"]
  904 -> 450 [style=dashed label="unary-operator"]
  904 -> 129 [style=dashed label="unqualified-id"]
  904 -> 451 [style=dashed label="user-defined-character-literal"]
  904 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  904 -> 453 [style=dashed label="user-defined-integer-literal"]
  904 -> 454 [style=dashed label="user-defined-literal"]
  904 -> 455 [style=dashed label="user-defined-string-literal"]
  905 [label="State 905\n\l640 multiplicative-expression: multiplicative-expression MULT • pm-expression\l"]
  905 -> 356 [style=solid label="PLUS"]
  905 -> 357 [style=solid label="MINUS"]
  905 -> 2 [style=solid label="IDENTIFIER"]
  905 -> 358 [style=solid label="OPEN_PAREN"]
  905 -> 359 [style=solid label="AND"]
  905 -> 360 [style=solid label="SCOPE"]
  905 -> 361 [style=solid label="OPEN_SQUARE"]
  905 -> 362 [style=solid label="CO_AWAIT"]
  905 -> 363 [style=solid label="ZERO_LB"]
  905 -> 364 [style=solid label="ZERO_HB"]
  905 -> 365 [style=solid label="SINGLE_QUOTE"]
  905 -> 366 [style=solid label="FALSE"]
  905 -> 367 [style=solid label="TRUE"]
  905 -> 368 [style=solid label="NOEXCEPT"]
  905 -> 17 [style=solid label="OPERATOR"]
  905 -> 26 [style=solid label="DECLTYPE"]
  905 -> 369 [style=solid label="DELETE"]
  905 -> 370 [style=solid label="DOT"]
  905 -> 184 [style=solid label="UNICODE_8"]
  905 -> 371 [style=solid label="MULT"]
  905 -> 199 [style=solid label="DOUBLE_QUOTE"]
  905 -> 372 [style=solid label="ZERO_LX"]
  905 -> 373 [style=solid label="ZERO_HX"]
  905 -> 374 [style=solid label="REQUIRES"]
  905 -> 375 [style=solid label="NEW"]
  905 -> 376 [style=solid label="COMPL"]
  905 -> 377 [style=solid label="NOT"]
  905 -> 378 [style=solid label="PLUS_PLUS"]
  905 -> 379 [style=solid label="MINUS_MINUS"]
  905 -> 380 [style=solid label="THIS"]
  905 -> 36 [style=solid label="AUTO"]
  905 -> 381 [style=solid label="NULLPTR"]
  905 -> 382 [style=solid label="DYNAMIC_CAST"]
  905 -> 383 [style=solid label="STATIC_CAST"]
  905 -> 384 [style=solid label="REINTERPRET_CAST"]
  905 -> 385 [style=solid label="CONST_CAST"]
  905 -> 386 [style=solid label="TYPEID"]
  905 -> 37 [style=solid label="CHAR"]
  905 -> 38 [style=solid label="CHAR8_T"]
  905 -> 39 [style=solid label="CHAR16_T"]
  905 -> 40 [style=solid label="CHAR32_T"]
  905 -> 41 [style=solid label="WCHAR_T"]
  905 -> 42 [style=solid label="BOOL"]
  905 -> 43 [style=solid label="SHORT"]
  905 -> 44 [style=solid label="INT"]
  905 -> 45 [style=solid label="LONG"]
  905 -> 46 [style=solid label="SIGNED"]
  905 -> 47 [style=solid label="UNSIGNED"]
  905 -> 48 [style=solid label="FLOAT"]
  905 -> 49 [style=solid label="DOUBLE"]
  905 -> 50 [style=solid label="VOID"]
  905 -> 55 [style=solid label="TYPENAME"]
  905 -> 387 [style=solid label="SIZEOF"]
  905 -> 388 [style=solid label="ALIGNOF"]
  905 -> 389 [style=solid label="'0'"]
  905 -> 390 [style=solid label="'1'"]
  905 -> 391 [style=solid label="'2'"]
  905 -> 392 [style=solid label="'3'"]
  905 -> 393 [style=solid label="'4'"]
  905 -> 394 [style=solid label="'5'"]
  905 -> 395 [style=solid label="'6'"]
  905 -> 396 [style=solid label="'7'"]
  905 -> 397 [style=solid label="'8'"]
  905 -> 398 [style=solid label="'9'"]
  905 -> 205 [style=solid label="'u'"]
  905 -> 206 [style=solid label="'U'"]
  905 -> 207 [style=solid label="'L'"]
  905 -> 208 [style=solid label="'R'"]
  905 -> 401 [style=dashed label="await-expression"]
  905 -> 402 [style=dashed label="binary-literal"]
  905 -> 403 [style=dashed label="boolean-literal"]
  905 -> 404 [style=dashed label="cast-expression"]
  905 -> 405 [style=dashed label="character-literal"]
  905 -> 65 [style=dashed label="class-name"]
  905 -> 67 [style=dashed label="concept-name"]
  905 -> 68 [style=dashed label="conversion-function-id"]
  905 -> 409 [style=dashed label="decimal-floating-point-literal"]
  905 -> 410 [style=dashed label="decimal-literal"]
  905 -> 76 [style=dashed label="decltype-specifier"]
  905 -> 411 [style=dashed label="delete-expression"]
  905 -> 412 [style=dashed label="digit"]
  905 -> 413 [style=dashed label="digit-sequence"]
  905 -> 414 [style=dashed label="encoding-prefix"]
  905 -> 84 [style=dashed label="enum-name"]
  905 -> 417 [style=dashed label="floating-point-literal"]
  905 -> 418 [style=dashed label="fold-expression"]
  905 -> 419 [style=dashed label="fractional-constant"]
  905 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  905 -> 421 [style=dashed label="hexadecimal-literal"]
  905 -> 422 [style=dashed label="hexadecimal-prefix"]
  905 -> 423 [style=dashed label="id-expression"]
  905 -> 425 [style=dashed label="integer-literal"]
  905 -> 426 [style=dashed label="lambda-expression"]
  905 -> 427 [style=dashed label="lambda-introducer"]
  905 -> 428 [style=dashed label="literal"]
  905 -> 95 [style=dashed label="literal-operator-id"]
  905 -> 99 [style=dashed label="namespace-alias"]
  905 -> 102 [style=dashed label="namespace-name"]
  905 -> 432 [style=dashed label="nested-name-specifier"]
  905 -> 433 [style=dashed label="new-expression"]
  905 -> 434 [style=dashed label="noexcept-expression"]
  905 -> 435 [style=dashed label="nonzero-digit"]
  905 -> 436 [style=dashed label="octal-literal"]
  905 -> 108 [style=dashed label="operator-function-id"]
  905 -> 109 [style=dashed label="placeholder-type-specifier"]
  905 -> 1370 [style=dashed label="pm-expression"]
  905 -> 438 [style=dashed label="pointer-literal"]
  905 -> 439 [style=dashed label="postfix-expression"]
  905 -> 440 [style=dashed label="primary-expression"]
  905 -> 112 [style=dashed label="qualified-id"]
  905 -> 442 [style=dashed label="requires-expression"]
  905 -> 114 [style=dashed label="simple-template-id"]
  905 -> 529 [style=dashed label="simple-type-specifier"]
  905 -> 445 [style=dashed label="string-literal"]
  905 -> 120 [style=dashed label="template-id"]
  905 -> 215 [style=dashed label="template-name"]
  905 -> 123 [style=dashed label="type-constraint"]
  905 -> 124 [style=dashed label="type-name"]
  905 -> 126 [style=dashed label="typedef-name"]
  905 -> 531 [style=dashed label="typename-specifier"]
  905 -> 449 [style=dashed label="unary-expression"]
  905 -> 450 [style=dashed label="unary-operator"]
  905 -> 129 [style=dashed label="unqualified-id"]
  905 -> 451 [style=dashed label="user-defined-character-literal"]
  905 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  905 -> 453 [style=dashed label="user-defined-integer-literal"]
  905 -> 454 [style=dashed label="user-defined-literal"]
  905 -> 455 [style=dashed label="user-defined-string-literal"]
  906 [label="State 906\n\l641 multiplicative-expression: multiplicative-expression DIV • pm-expression\l"]
  906 -> 356 [style=solid label="PLUS"]
  906 -> 357 [style=solid label="MINUS"]
  906 -> 2 [style=solid label="IDENTIFIER"]
  906 -> 358 [style=solid label="OPEN_PAREN"]
  906 -> 359 [style=solid label="AND"]
  906 -> 360 [style=solid label="SCOPE"]
  906 -> 361 [style=solid label="OPEN_SQUARE"]
  906 -> 362 [style=solid label="CO_AWAIT"]
  906 -> 363 [style=solid label="ZERO_LB"]
  906 -> 364 [style=solid label="ZERO_HB"]
  906 -> 365 [style=solid label="SINGLE_QUOTE"]
  906 -> 366 [style=solid label="FALSE"]
  906 -> 367 [style=solid label="TRUE"]
  906 -> 368 [style=solid label="NOEXCEPT"]
  906 -> 17 [style=solid label="OPERATOR"]
  906 -> 26 [style=solid label="DECLTYPE"]
  906 -> 369 [style=solid label="DELETE"]
  906 -> 370 [style=solid label="DOT"]
  906 -> 184 [style=solid label="UNICODE_8"]
  906 -> 371 [style=solid label="MULT"]
  906 -> 199 [style=solid label="DOUBLE_QUOTE"]
  906 -> 372 [style=solid label="ZERO_LX"]
  906 -> 373 [style=solid label="ZERO_HX"]
  906 -> 374 [style=solid label="REQUIRES"]
  906 -> 375 [style=solid label="NEW"]
  906 -> 376 [style=solid label="COMPL"]
  906 -> 377 [style=solid label="NOT"]
  906 -> 378 [style=solid label="PLUS_PLUS"]
  906 -> 379 [style=solid label="MINUS_MINUS"]
  906 -> 380 [style=solid label="THIS"]
  906 -> 36 [style=solid label="AUTO"]
  906 -> 381 [style=solid label="NULLPTR"]
  906 -> 382 [style=solid label="DYNAMIC_CAST"]
  906 -> 383 [style=solid label="STATIC_CAST"]
  906 -> 384 [style=solid label="REINTERPRET_CAST"]
  906 -> 385 [style=solid label="CONST_CAST"]
  906 -> 386 [style=solid label="TYPEID"]
  906 -> 37 [style=solid label="CHAR"]
  906 -> 38 [style=solid label="CHAR8_T"]
  906 -> 39 [style=solid label="CHAR16_T"]
  906 -> 40 [style=solid label="CHAR32_T"]
  906 -> 41 [style=solid label="WCHAR_T"]
  906 -> 42 [style=solid label="BOOL"]
  906 -> 43 [style=solid label="SHORT"]
  906 -> 44 [style=solid label="INT"]
  906 -> 45 [style=solid label="LONG"]
  906 -> 46 [style=solid label="SIGNED"]
  906 -> 47 [style=solid label="UNSIGNED"]
  906 -> 48 [style=solid label="FLOAT"]
  906 -> 49 [style=solid label="DOUBLE"]
  906 -> 50 [style=solid label="VOID"]
  906 -> 55 [style=solid label="TYPENAME"]
  906 -> 387 [style=solid label="SIZEOF"]
  906 -> 388 [style=solid label="ALIGNOF"]
  906 -> 389 [style=solid label="'0'"]
  906 -> 390 [style=solid label="'1'"]
  906 -> 391 [style=solid label="'2'"]
  906 -> 392 [style=solid label="'3'"]
  906 -> 393 [style=solid label="'4'"]
  906 -> 394 [style=solid label="'5'"]
  906 -> 395 [style=solid label="'6'"]
  906 -> 396 [style=solid label="'7'"]
  906 -> 397 [style=solid label="'8'"]
  906 -> 398 [style=solid label="'9'"]
  906 -> 205 [style=solid label="'u'"]
  906 -> 206 [style=solid label="'U'"]
  906 -> 207 [style=solid label="'L'"]
  906 -> 208 [style=solid label="'R'"]
  906 -> 401 [style=dashed label="await-expression"]
  906 -> 402 [style=dashed label="binary-literal"]
  906 -> 403 [style=dashed label="boolean-literal"]
  906 -> 404 [style=dashed label="cast-expression"]
  906 -> 405 [style=dashed label="character-literal"]
  906 -> 65 [style=dashed label="class-name"]
  906 -> 67 [style=dashed label="concept-name"]
  906 -> 68 [style=dashed label="conversion-function-id"]
  906 -> 409 [style=dashed label="decimal-floating-point-literal"]
  906 -> 410 [style=dashed label="decimal-literal"]
  906 -> 76 [style=dashed label="decltype-specifier"]
  906 -> 411 [style=dashed label="delete-expression"]
  906 -> 412 [style=dashed label="digit"]
  906 -> 413 [style=dashed label="digit-sequence"]
  906 -> 414 [style=dashed label="encoding-prefix"]
  906 -> 84 [style=dashed label="enum-name"]
  906 -> 417 [style=dashed label="floating-point-literal"]
  906 -> 418 [style=dashed label="fold-expression"]
  906 -> 419 [style=dashed label="fractional-constant"]
  906 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  906 -> 421 [style=dashed label="hexadecimal-literal"]
  906 -> 422 [style=dashed label="hexadecimal-prefix"]
  906 -> 423 [style=dashed label="id-expression"]
  906 -> 425 [style=dashed label="integer-literal"]
  906 -> 426 [style=dashed label="lambda-expression"]
  906 -> 427 [style=dashed label="lambda-introducer"]
  906 -> 428 [style=dashed label="literal"]
  906 -> 95 [style=dashed label="literal-operator-id"]
  906 -> 99 [style=dashed label="namespace-alias"]
  906 -> 102 [style=dashed label="namespace-name"]
  906 -> 432 [style=dashed label="nested-name-specifier"]
  906 -> 433 [style=dashed label="new-expression"]
  906 -> 434 [style=dashed label="noexcept-expression"]
  906 -> 435 [style=dashed label="nonzero-digit"]
  906 -> 436 [style=dashed label="octal-literal"]
  906 -> 108 [style=dashed label="operator-function-id"]
  906 -> 109 [style=dashed label="placeholder-type-specifier"]
  906 -> 1371 [style=dashed label="pm-expression"]
  906 -> 438 [style=dashed label="pointer-literal"]
  906 -> 439 [style=dashed label="postfix-expression"]
  906 -> 440 [style=dashed label="primary-expression"]
  906 -> 112 [style=dashed label="qualified-id"]
  906 -> 442 [style=dashed label="requires-expression"]
  906 -> 114 [style=dashed label="simple-template-id"]
  906 -> 529 [style=dashed label="simple-type-specifier"]
  906 -> 445 [style=dashed label="string-literal"]
  906 -> 120 [style=dashed label="template-id"]
  906 -> 215 [style=dashed label="template-name"]
  906 -> 123 [style=dashed label="type-constraint"]
  906 -> 124 [style=dashed label="type-name"]
  906 -> 126 [style=dashed label="typedef-name"]
  906 -> 531 [style=dashed label="typename-specifier"]
  906 -> 449 [style=dashed label="unary-expression"]
  906 -> 450 [style=dashed label="unary-operator"]
  906 -> 129 [style=dashed label="unqualified-id"]
  906 -> 451 [style=dashed label="user-defined-character-literal"]
  906 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  906 -> 453 [style=dashed label="user-defined-integer-literal"]
  906 -> 454 [style=dashed label="user-defined-literal"]
  906 -> 455 [style=dashed label="user-defined-string-literal"]
  907 [label="State 907\n\l642 multiplicative-expression: multiplicative-expression MOD • pm-expression\l"]
  907 -> 356 [style=solid label="PLUS"]
  907 -> 357 [style=solid label="MINUS"]
  907 -> 2 [style=solid label="IDENTIFIER"]
  907 -> 358 [style=solid label="OPEN_PAREN"]
  907 -> 359 [style=solid label="AND"]
  907 -> 360 [style=solid label="SCOPE"]
  907 -> 361 [style=solid label="OPEN_SQUARE"]
  907 -> 362 [style=solid label="CO_AWAIT"]
  907 -> 363 [style=solid label="ZERO_LB"]
  907 -> 364 [style=solid label="ZERO_HB"]
  907 -> 365 [style=solid label="SINGLE_QUOTE"]
  907 -> 366 [style=solid label="FALSE"]
  907 -> 367 [style=solid label="TRUE"]
  907 -> 368 [style=solid label="NOEXCEPT"]
  907 -> 17 [style=solid label="OPERATOR"]
  907 -> 26 [style=solid label="DECLTYPE"]
  907 -> 369 [style=solid label="DELETE"]
  907 -> 370 [style=solid label="DOT"]
  907 -> 184 [style=solid label="UNICODE_8"]
  907 -> 371 [style=solid label="MULT"]
  907 -> 199 [style=solid label="DOUBLE_QUOTE"]
  907 -> 372 [style=solid label="ZERO_LX"]
  907 -> 373 [style=solid label="ZERO_HX"]
  907 -> 374 [style=solid label="REQUIRES"]
  907 -> 375 [style=solid label="NEW"]
  907 -> 376 [style=solid label="COMPL"]
  907 -> 377 [style=solid label="NOT"]
  907 -> 378 [style=solid label="PLUS_PLUS"]
  907 -> 379 [style=solid label="MINUS_MINUS"]
  907 -> 380 [style=solid label="THIS"]
  907 -> 36 [style=solid label="AUTO"]
  907 -> 381 [style=solid label="NULLPTR"]
  907 -> 382 [style=solid label="DYNAMIC_CAST"]
  907 -> 383 [style=solid label="STATIC_CAST"]
  907 -> 384 [style=solid label="REINTERPRET_CAST"]
  907 -> 385 [style=solid label="CONST_CAST"]
  907 -> 386 [style=solid label="TYPEID"]
  907 -> 37 [style=solid label="CHAR"]
  907 -> 38 [style=solid label="CHAR8_T"]
  907 -> 39 [style=solid label="CHAR16_T"]
  907 -> 40 [style=solid label="CHAR32_T"]
  907 -> 41 [style=solid label="WCHAR_T"]
  907 -> 42 [style=solid label="BOOL"]
  907 -> 43 [style=solid label="SHORT"]
  907 -> 44 [style=solid label="INT"]
  907 -> 45 [style=solid label="LONG"]
  907 -> 46 [style=solid label="SIGNED"]
  907 -> 47 [style=solid label="UNSIGNED"]
  907 -> 48 [style=solid label="FLOAT"]
  907 -> 49 [style=solid label="DOUBLE"]
  907 -> 50 [style=solid label="VOID"]
  907 -> 55 [style=solid label="TYPENAME"]
  907 -> 387 [style=solid label="SIZEOF"]
  907 -> 388 [style=solid label="ALIGNOF"]
  907 -> 389 [style=solid label="'0'"]
  907 -> 390 [style=solid label="'1'"]
  907 -> 391 [style=solid label="'2'"]
  907 -> 392 [style=solid label="'3'"]
  907 -> 393 [style=solid label="'4'"]
  907 -> 394 [style=solid label="'5'"]
  907 -> 395 [style=solid label="'6'"]
  907 -> 396 [style=solid label="'7'"]
  907 -> 397 [style=solid label="'8'"]
  907 -> 398 [style=solid label="'9'"]
  907 -> 205 [style=solid label="'u'"]
  907 -> 206 [style=solid label="'U'"]
  907 -> 207 [style=solid label="'L'"]
  907 -> 208 [style=solid label="'R'"]
  907 -> 401 [style=dashed label="await-expression"]
  907 -> 402 [style=dashed label="binary-literal"]
  907 -> 403 [style=dashed label="boolean-literal"]
  907 -> 404 [style=dashed label="cast-expression"]
  907 -> 405 [style=dashed label="character-literal"]
  907 -> 65 [style=dashed label="class-name"]
  907 -> 67 [style=dashed label="concept-name"]
  907 -> 68 [style=dashed label="conversion-function-id"]
  907 -> 409 [style=dashed label="decimal-floating-point-literal"]
  907 -> 410 [style=dashed label="decimal-literal"]
  907 -> 76 [style=dashed label="decltype-specifier"]
  907 -> 411 [style=dashed label="delete-expression"]
  907 -> 412 [style=dashed label="digit"]
  907 -> 413 [style=dashed label="digit-sequence"]
  907 -> 414 [style=dashed label="encoding-prefix"]
  907 -> 84 [style=dashed label="enum-name"]
  907 -> 417 [style=dashed label="floating-point-literal"]
  907 -> 418 [style=dashed label="fold-expression"]
  907 -> 419 [style=dashed label="fractional-constant"]
  907 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  907 -> 421 [style=dashed label="hexadecimal-literal"]
  907 -> 422 [style=dashed label="hexadecimal-prefix"]
  907 -> 423 [style=dashed label="id-expression"]
  907 -> 425 [style=dashed label="integer-literal"]
  907 -> 426 [style=dashed label="lambda-expression"]
  907 -> 427 [style=dashed label="lambda-introducer"]
  907 -> 428 [style=dashed label="literal"]
  907 -> 95 [style=dashed label="literal-operator-id"]
  907 -> 99 [style=dashed label="namespace-alias"]
  907 -> 102 [style=dashed label="namespace-name"]
  907 -> 432 [style=dashed label="nested-name-specifier"]
  907 -> 433 [style=dashed label="new-expression"]
  907 -> 434 [style=dashed label="noexcept-expression"]
  907 -> 435 [style=dashed label="nonzero-digit"]
  907 -> 436 [style=dashed label="octal-literal"]
  907 -> 108 [style=dashed label="operator-function-id"]
  907 -> 109 [style=dashed label="placeholder-type-specifier"]
  907 -> 1372 [style=dashed label="pm-expression"]
  907 -> 438 [style=dashed label="pointer-literal"]
  907 -> 439 [style=dashed label="postfix-expression"]
  907 -> 440 [style=dashed label="primary-expression"]
  907 -> 112 [style=dashed label="qualified-id"]
  907 -> 442 [style=dashed label="requires-expression"]
  907 -> 114 [style=dashed label="simple-template-id"]
  907 -> 529 [style=dashed label="simple-type-specifier"]
  907 -> 445 [style=dashed label="string-literal"]
  907 -> 120 [style=dashed label="template-id"]
  907 -> 215 [style=dashed label="template-name"]
  907 -> 123 [style=dashed label="type-constraint"]
  907 -> 124 [style=dashed label="type-name"]
  907 -> 126 [style=dashed label="typedef-name"]
  907 -> 531 [style=dashed label="typename-specifier"]
  907 -> 449 [style=dashed label="unary-expression"]
  907 -> 450 [style=dashed label="unary-operator"]
  907 -> 129 [style=dashed label="unqualified-id"]
  907 -> 451 [style=dashed label="user-defined-character-literal"]
  907 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  907 -> 453 [style=dashed label="user-defined-integer-literal"]
  907 -> 454 [style=dashed label="user-defined-literal"]
  907 -> 455 [style=dashed label="user-defined-string-literal"]
  908 [label="State 908\n\l750 octal-literal: octal-literal SINGLE_QUOTE • octal-digit\l"]
  908 -> 909 [style=solid label="'0'"]
  908 -> 910 [style=solid label="'1'"]
  908 -> 911 [style=solid label="'2'"]
  908 -> 912 [style=solid label="'3'"]
  908 -> 913 [style=solid label="'4'"]
  908 -> 914 [style=solid label="'5'"]
  908 -> 915 [style=solid label="'6'"]
  908 -> 916 [style=solid label="'7'"]
  908 -> 1373 [style=dashed label="octal-digit"]
  909 [label="State 909\n\l737 octal-digit: '0' •\l"]
  909 -> "909R737" [style=solid]
 "909R737" [label="R737", fillcolor=3, shape=diamond, style=filled]
  910 [label="State 910\n\l738 octal-digit: '1' •\l"]
  910 -> "910R738" [style=solid]
 "910R738" [label="R738", fillcolor=3, shape=diamond, style=filled]
  911 [label="State 911\n\l739 octal-digit: '2' •\l"]
  911 -> "911R739" [style=solid]
 "911R739" [label="R739", fillcolor=3, shape=diamond, style=filled]
  912 [label="State 912\n\l740 octal-digit: '3' •\l"]
  912 -> "912R740" [style=solid]
 "912R740" [label="R740", fillcolor=3, shape=diamond, style=filled]
  913 [label="State 913\n\l741 octal-digit: '4' •\l"]
  913 -> "913R741" [style=solid]
 "913R741" [label="R741", fillcolor=3, shape=diamond, style=filled]
  914 [label="State 914\n\l742 octal-digit: '5' •\l"]
  914 -> "914R742" [style=solid]
 "914R742" [label="R742", fillcolor=3, shape=diamond, style=filled]
  915 [label="State 915\n\l743 octal-digit: '6' •\l"]
  915 -> "915R743" [style=solid]
 "915R743" [label="R743", fillcolor=3, shape=diamond, style=filled]
  916 [label="State 916\n\l744 octal-digit: '7' •\l"]
  916 -> "916R744" [style=solid]
 "916R744" [label="R744", fillcolor=3, shape=diamond, style=filled]
  917 [label="State 917\n\l488 integer-literal: octal-literal integer-suffix •\l"]
  917 -> "917R488" [style=solid]
 "917R488" [label="R488", fillcolor=3, shape=diamond, style=filled]
  918 [label="State 918\n\l749 octal-literal: octal-literal octal-digit •\l"]
  918 -> "918R749" [style=solid]
 "918R749" [label="R749", fillcolor=3, shape=diamond, style=filled]
  919 [label="State 919\n\l1156 user-defined-integer-literal: octal-literal ud-suffix •\l"]
  919 -> "919R1156" [style=solid]
 "919R1156" [label="R1156", fillcolor=3, shape=diamond, style=filled]
  920 [label="State 920\n\l853 pm-expression: pm-expression DOT_STAR • cast-expression\l"]
  920 -> 356 [style=solid label="PLUS"]
  920 -> 357 [style=solid label="MINUS"]
  920 -> 2 [style=solid label="IDENTIFIER"]
  920 -> 358 [style=solid label="OPEN_PAREN"]
  920 -> 359 [style=solid label="AND"]
  920 -> 360 [style=solid label="SCOPE"]
  920 -> 361 [style=solid label="OPEN_SQUARE"]
  920 -> 362 [style=solid label="CO_AWAIT"]
  920 -> 363 [style=solid label="ZERO_LB"]
  920 -> 364 [style=solid label="ZERO_HB"]
  920 -> 365 [style=solid label="SINGLE_QUOTE"]
  920 -> 366 [style=solid label="FALSE"]
  920 -> 367 [style=solid label="TRUE"]
  920 -> 368 [style=solid label="NOEXCEPT"]
  920 -> 17 [style=solid label="OPERATOR"]
  920 -> 26 [style=solid label="DECLTYPE"]
  920 -> 369 [style=solid label="DELETE"]
  920 -> 370 [style=solid label="DOT"]
  920 -> 184 [style=solid label="UNICODE_8"]
  920 -> 371 [style=solid label="MULT"]
  920 -> 199 [style=solid label="DOUBLE_QUOTE"]
  920 -> 372 [style=solid label="ZERO_LX"]
  920 -> 373 [style=solid label="ZERO_HX"]
  920 -> 374 [style=solid label="REQUIRES"]
  920 -> 375 [style=solid label="NEW"]
  920 -> 376 [style=solid label="COMPL"]
  920 -> 377 [style=solid label="NOT"]
  920 -> 378 [style=solid label="PLUS_PLUS"]
  920 -> 379 [style=solid label="MINUS_MINUS"]
  920 -> 380 [style=solid label="THIS"]
  920 -> 36 [style=solid label="AUTO"]
  920 -> 381 [style=solid label="NULLPTR"]
  920 -> 382 [style=solid label="DYNAMIC_CAST"]
  920 -> 383 [style=solid label="STATIC_CAST"]
  920 -> 384 [style=solid label="REINTERPRET_CAST"]
  920 -> 385 [style=solid label="CONST_CAST"]
  920 -> 386 [style=solid label="TYPEID"]
  920 -> 37 [style=solid label="CHAR"]
  920 -> 38 [style=solid label="CHAR8_T"]
  920 -> 39 [style=solid label="CHAR16_T"]
  920 -> 40 [style=solid label="CHAR32_T"]
  920 -> 41 [style=solid label="WCHAR_T"]
  920 -> 42 [style=solid label="BOOL"]
  920 -> 43 [style=solid label="SHORT"]
  920 -> 44 [style=solid label="INT"]
  920 -> 45 [style=solid label="LONG"]
  920 -> 46 [style=solid label="SIGNED"]
  920 -> 47 [style=solid label="UNSIGNED"]
  920 -> 48 [style=solid label="FLOAT"]
  920 -> 49 [style=solid label="DOUBLE"]
  920 -> 50 [style=solid label="VOID"]
  920 -> 55 [style=solid label="TYPENAME"]
  920 -> 387 [style=solid label="SIZEOF"]
  920 -> 388 [style=solid label="ALIGNOF"]
  920 -> 389 [style=solid label="'0'"]
  920 -> 390 [style=solid label="'1'"]
  920 -> 391 [style=solid label="'2'"]
  920 -> 392 [style=solid label="'3'"]
  920 -> 393 [style=solid label="'4'"]
  920 -> 394 [style=solid label="'5'"]
  920 -> 395 [style=solid label="'6'"]
  920 -> 396 [style=solid label="'7'"]
  920 -> 397 [style=solid label="'8'"]
  920 -> 398 [style=solid label="'9'"]
  920 -> 205 [style=solid label="'u'"]
  920 -> 206 [style=solid label="'U'"]
  920 -> 207 [style=solid label="'L'"]
  920 -> 208 [style=solid label="'R'"]
  920 -> 401 [style=dashed label="await-expression"]
  920 -> 402 [style=dashed label="binary-literal"]
  920 -> 403 [style=dashed label="boolean-literal"]
  920 -> 1374 [style=dashed label="cast-expression"]
  920 -> 405 [style=dashed label="character-literal"]
  920 -> 65 [style=dashed label="class-name"]
  920 -> 67 [style=dashed label="concept-name"]
  920 -> 68 [style=dashed label="conversion-function-id"]
  920 -> 409 [style=dashed label="decimal-floating-point-literal"]
  920 -> 410 [style=dashed label="decimal-literal"]
  920 -> 76 [style=dashed label="decltype-specifier"]
  920 -> 411 [style=dashed label="delete-expression"]
  920 -> 412 [style=dashed label="digit"]
  920 -> 413 [style=dashed label="digit-sequence"]
  920 -> 414 [style=dashed label="encoding-prefix"]
  920 -> 84 [style=dashed label="enum-name"]
  920 -> 417 [style=dashed label="floating-point-literal"]
  920 -> 418 [style=dashed label="fold-expression"]
  920 -> 419 [style=dashed label="fractional-constant"]
  920 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  920 -> 421 [style=dashed label="hexadecimal-literal"]
  920 -> 422 [style=dashed label="hexadecimal-prefix"]
  920 -> 423 [style=dashed label="id-expression"]
  920 -> 425 [style=dashed label="integer-literal"]
  920 -> 426 [style=dashed label="lambda-expression"]
  920 -> 427 [style=dashed label="lambda-introducer"]
  920 -> 428 [style=dashed label="literal"]
  920 -> 95 [style=dashed label="literal-operator-id"]
  920 -> 99 [style=dashed label="namespace-alias"]
  920 -> 102 [style=dashed label="namespace-name"]
  920 -> 432 [style=dashed label="nested-name-specifier"]
  920 -> 433 [style=dashed label="new-expression"]
  920 -> 434 [style=dashed label="noexcept-expression"]
  920 -> 435 [style=dashed label="nonzero-digit"]
  920 -> 436 [style=dashed label="octal-literal"]
  920 -> 108 [style=dashed label="operator-function-id"]
  920 -> 109 [style=dashed label="placeholder-type-specifier"]
  920 -> 438 [style=dashed label="pointer-literal"]
  920 -> 439 [style=dashed label="postfix-expression"]
  920 -> 440 [style=dashed label="primary-expression"]
  920 -> 112 [style=dashed label="qualified-id"]
  920 -> 442 [style=dashed label="requires-expression"]
  920 -> 114 [style=dashed label="simple-template-id"]
  920 -> 529 [style=dashed label="simple-type-specifier"]
  920 -> 445 [style=dashed label="string-literal"]
  920 -> 120 [style=dashed label="template-id"]
  920 -> 215 [style=dashed label="template-name"]
  920 -> 123 [style=dashed label="type-constraint"]
  920 -> 124 [style=dashed label="type-name"]
  920 -> 126 [style=dashed label="typedef-name"]
  920 -> 531 [style=dashed label="typename-specifier"]
  920 -> 449 [style=dashed label="unary-expression"]
  920 -> 450 [style=dashed label="unary-operator"]
  920 -> 129 [style=dashed label="unqualified-id"]
  920 -> 451 [style=dashed label="user-defined-character-literal"]
  920 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  920 -> 453 [style=dashed label="user-defined-integer-literal"]
  920 -> 454 [style=dashed label="user-defined-literal"]
  920 -> 455 [style=dashed label="user-defined-string-literal"]
  921 [label="State 921\n\l854 pm-expression: pm-expression DEREF_STAR • cast-expression\l"]
  921 -> 356 [style=solid label="PLUS"]
  921 -> 357 [style=solid label="MINUS"]
  921 -> 2 [style=solid label="IDENTIFIER"]
  921 -> 358 [style=solid label="OPEN_PAREN"]
  921 -> 359 [style=solid label="AND"]
  921 -> 360 [style=solid label="SCOPE"]
  921 -> 361 [style=solid label="OPEN_SQUARE"]
  921 -> 362 [style=solid label="CO_AWAIT"]
  921 -> 363 [style=solid label="ZERO_LB"]
  921 -> 364 [style=solid label="ZERO_HB"]
  921 -> 365 [style=solid label="SINGLE_QUOTE"]
  921 -> 366 [style=solid label="FALSE"]
  921 -> 367 [style=solid label="TRUE"]
  921 -> 368 [style=solid label="NOEXCEPT"]
  921 -> 17 [style=solid label="OPERATOR"]
  921 -> 26 [style=solid label="DECLTYPE"]
  921 -> 369 [style=solid label="DELETE"]
  921 -> 370 [style=solid label="DOT"]
  921 -> 184 [style=solid label="UNICODE_8"]
  921 -> 371 [style=solid label="MULT"]
  921 -> 199 [style=solid label="DOUBLE_QUOTE"]
  921 -> 372 [style=solid label="ZERO_LX"]
  921 -> 373 [style=solid label="ZERO_HX"]
  921 -> 374 [style=solid label="REQUIRES"]
  921 -> 375 [style=solid label="NEW"]
  921 -> 376 [style=solid label="COMPL"]
  921 -> 377 [style=solid label="NOT"]
  921 -> 378 [style=solid label="PLUS_PLUS"]
  921 -> 379 [style=solid label="MINUS_MINUS"]
  921 -> 380 [style=solid label="THIS"]
  921 -> 36 [style=solid label="AUTO"]
  921 -> 381 [style=solid label="NULLPTR"]
  921 -> 382 [style=solid label="DYNAMIC_CAST"]
  921 -> 383 [style=solid label="STATIC_CAST"]
  921 -> 384 [style=solid label="REINTERPRET_CAST"]
  921 -> 385 [style=solid label="CONST_CAST"]
  921 -> 386 [style=solid label="TYPEID"]
  921 -> 37 [style=solid label="CHAR"]
  921 -> 38 [style=solid label="CHAR8_T"]
  921 -> 39 [style=solid label="CHAR16_T"]
  921 -> 40 [style=solid label="CHAR32_T"]
  921 -> 41 [style=solid label="WCHAR_T"]
  921 -> 42 [style=solid label="BOOL"]
  921 -> 43 [style=solid label="SHORT"]
  921 -> 44 [style=solid label="INT"]
  921 -> 45 [style=solid label="LONG"]
  921 -> 46 [style=solid label="SIGNED"]
  921 -> 47 [style=solid label="UNSIGNED"]
  921 -> 48 [style=solid label="FLOAT"]
  921 -> 49 [style=solid label="DOUBLE"]
  921 -> 50 [style=solid label="VOID"]
  921 -> 55 [style=solid label="TYPENAME"]
  921 -> 387 [style=solid label="SIZEOF"]
  921 -> 388 [style=solid label="ALIGNOF"]
  921 -> 389 [style=solid label="'0'"]
  921 -> 390 [style=solid label="'1'"]
  921 -> 391 [style=solid label="'2'"]
  921 -> 392 [style=solid label="'3'"]
  921 -> 393 [style=solid label="'4'"]
  921 -> 394 [style=solid label="'5'"]
  921 -> 395 [style=solid label="'6'"]
  921 -> 396 [style=solid label="'7'"]
  921 -> 397 [style=solid label="'8'"]
  921 -> 398 [style=solid label="'9'"]
  921 -> 205 [style=solid label="'u'"]
  921 -> 206 [style=solid label="'U'"]
  921 -> 207 [style=solid label="'L'"]
  921 -> 208 [style=solid label="'R'"]
  921 -> 401 [style=dashed label="await-expression"]
  921 -> 402 [style=dashed label="binary-literal"]
  921 -> 403 [style=dashed label="boolean-literal"]
  921 -> 1375 [style=dashed label="cast-expression"]
  921 -> 405 [style=dashed label="character-literal"]
  921 -> 65 [style=dashed label="class-name"]
  921 -> 67 [style=dashed label="concept-name"]
  921 -> 68 [style=dashed label="conversion-function-id"]
  921 -> 409 [style=dashed label="decimal-floating-point-literal"]
  921 -> 410 [style=dashed label="decimal-literal"]
  921 -> 76 [style=dashed label="decltype-specifier"]
  921 -> 411 [style=dashed label="delete-expression"]
  921 -> 412 [style=dashed label="digit"]
  921 -> 413 [style=dashed label="digit-sequence"]
  921 -> 414 [style=dashed label="encoding-prefix"]
  921 -> 84 [style=dashed label="enum-name"]
  921 -> 417 [style=dashed label="floating-point-literal"]
  921 -> 418 [style=dashed label="fold-expression"]
  921 -> 419 [style=dashed label="fractional-constant"]
  921 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  921 -> 421 [style=dashed label="hexadecimal-literal"]
  921 -> 422 [style=dashed label="hexadecimal-prefix"]
  921 -> 423 [style=dashed label="id-expression"]
  921 -> 425 [style=dashed label="integer-literal"]
  921 -> 426 [style=dashed label="lambda-expression"]
  921 -> 427 [style=dashed label="lambda-introducer"]
  921 -> 428 [style=dashed label="literal"]
  921 -> 95 [style=dashed label="literal-operator-id"]
  921 -> 99 [style=dashed label="namespace-alias"]
  921 -> 102 [style=dashed label="namespace-name"]
  921 -> 432 [style=dashed label="nested-name-specifier"]
  921 -> 433 [style=dashed label="new-expression"]
  921 -> 434 [style=dashed label="noexcept-expression"]
  921 -> 435 [style=dashed label="nonzero-digit"]
  921 -> 436 [style=dashed label="octal-literal"]
  921 -> 108 [style=dashed label="operator-function-id"]
  921 -> 109 [style=dashed label="placeholder-type-specifier"]
  921 -> 438 [style=dashed label="pointer-literal"]
  921 -> 439 [style=dashed label="postfix-expression"]
  921 -> 440 [style=dashed label="primary-expression"]
  921 -> 112 [style=dashed label="qualified-id"]
  921 -> 442 [style=dashed label="requires-expression"]
  921 -> 114 [style=dashed label="simple-template-id"]
  921 -> 529 [style=dashed label="simple-type-specifier"]
  921 -> 445 [style=dashed label="string-literal"]
  921 -> 120 [style=dashed label="template-id"]
  921 -> 215 [style=dashed label="template-name"]
  921 -> 123 [style=dashed label="type-constraint"]
  921 -> 124 [style=dashed label="type-name"]
  921 -> 126 [style=dashed label="typedef-name"]
  921 -> 531 [style=dashed label="typename-specifier"]
  921 -> 449 [style=dashed label="unary-expression"]
  921 -> 450 [style=dashed label="unary-operator"]
  921 -> 129 [style=dashed label="unqualified-id"]
  921 -> 451 [style=dashed label="user-defined-character-literal"]
  921 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  921 -> 453 [style=dashed label="user-defined-integer-literal"]
  921 -> 454 [style=dashed label="user-defined-literal"]
  921 -> 455 [style=dashed label="user-defined-string-literal"]
  922 [label="State 922\n\l859 postfix-expression: postfix-expression OPEN_PAREN • CLOSE_PAREN\l860                   | postfix-expression OPEN_PAREN • expression-list CLOSE_PAREN\l"]
  922 -> 356 [style=solid label="PLUS"]
  922 -> 357 [style=solid label="MINUS"]
  922 -> 2 [style=solid label="IDENTIFIER"]
  922 -> 358 [style=solid label="OPEN_PAREN"]
  922 -> 1376 [style=solid label="CLOSE_PAREN"]
  922 -> 359 [style=solid label="AND"]
  922 -> 360 [style=solid label="SCOPE"]
  922 -> 361 [style=solid label="OPEN_SQUARE"]
  922 -> 362 [style=solid label="CO_AWAIT"]
  922 -> 935 [style=solid label="OPEN_BRACE"]
  922 -> 363 [style=solid label="ZERO_LB"]
  922 -> 364 [style=solid label="ZERO_HB"]
  922 -> 365 [style=solid label="SINGLE_QUOTE"]
  922 -> 366 [style=solid label="FALSE"]
  922 -> 367 [style=solid label="TRUE"]
  922 -> 368 [style=solid label="NOEXCEPT"]
  922 -> 17 [style=solid label="OPERATOR"]
  922 -> 26 [style=solid label="DECLTYPE"]
  922 -> 369 [style=solid label="DELETE"]
  922 -> 370 [style=solid label="DOT"]
  922 -> 184 [style=solid label="UNICODE_8"]
  922 -> 371 [style=solid label="MULT"]
  922 -> 199 [style=solid label="DOUBLE_QUOTE"]
  922 -> 372 [style=solid label="ZERO_LX"]
  922 -> 373 [style=solid label="ZERO_HX"]
  922 -> 374 [style=solid label="REQUIRES"]
  922 -> 375 [style=solid label="NEW"]
  922 -> 376 [style=solid label="COMPL"]
  922 -> 377 [style=solid label="NOT"]
  922 -> 378 [style=solid label="PLUS_PLUS"]
  922 -> 379 [style=solid label="MINUS_MINUS"]
  922 -> 380 [style=solid label="THIS"]
  922 -> 36 [style=solid label="AUTO"]
  922 -> 381 [style=solid label="NULLPTR"]
  922 -> 382 [style=solid label="DYNAMIC_CAST"]
  922 -> 383 [style=solid label="STATIC_CAST"]
  922 -> 384 [style=solid label="REINTERPRET_CAST"]
  922 -> 385 [style=solid label="CONST_CAST"]
  922 -> 386 [style=solid label="TYPEID"]
  922 -> 37 [style=solid label="CHAR"]
  922 -> 38 [style=solid label="CHAR8_T"]
  922 -> 39 [style=solid label="CHAR16_T"]
  922 -> 40 [style=solid label="CHAR32_T"]
  922 -> 41 [style=solid label="WCHAR_T"]
  922 -> 42 [style=solid label="BOOL"]
  922 -> 43 [style=solid label="SHORT"]
  922 -> 44 [style=solid label="INT"]
  922 -> 45 [style=solid label="LONG"]
  922 -> 46 [style=solid label="SIGNED"]
  922 -> 47 [style=solid label="UNSIGNED"]
  922 -> 48 [style=solid label="FLOAT"]
  922 -> 49 [style=solid label="DOUBLE"]
  922 -> 50 [style=solid label="VOID"]
  922 -> 523 [style=solid label="THROW"]
  922 -> 55 [style=solid label="TYPENAME"]
  922 -> 387 [style=solid label="SIZEOF"]
  922 -> 388 [style=solid label="ALIGNOF"]
  922 -> 524 [style=solid label="CO_YIELD"]
  922 -> 389 [style=solid label="'0'"]
  922 -> 390 [style=solid label="'1'"]
  922 -> 391 [style=solid label="'2'"]
  922 -> 392 [style=solid label="'3'"]
  922 -> 393 [style=solid label="'4'"]
  922 -> 394 [style=solid label="'5'"]
  922 -> 395 [style=solid label="'6'"]
  922 -> 396 [style=solid label="'7'"]
  922 -> 397 [style=solid label="'8'"]
  922 -> 398 [style=solid label="'9'"]
  922 -> 205 [style=solid label="'u'"]
  922 -> 206 [style=solid label="'U'"]
  922 -> 207 [style=solid label="'L'"]
  922 -> 208 [style=solid label="'R'"]
  922 -> 399 [style=dashed label="additive-expression"]
  922 -> 400 [style=dashed label="and-expression"]
  922 -> 1134 [style=dashed label="assignment-expression"]
  922 -> 401 [style=dashed label="await-expression"]
  922 -> 402 [style=dashed label="binary-literal"]
  922 -> 403 [style=dashed label="boolean-literal"]
  922 -> 1135 [style=dashed label="braced-init-list"]
  922 -> 404 [style=dashed label="cast-expression"]
  922 -> 405 [style=dashed label="character-literal"]
  922 -> 65 [style=dashed label="class-name"]
  922 -> 406 [style=dashed label="compare-expression"]
  922 -> 67 [style=dashed label="concept-name"]
  922 -> 526 [style=dashed label="conditional-expression"]
  922 -> 68 [style=dashed label="conversion-function-id"]
  922 -> 409 [style=dashed label="decimal-floating-point-literal"]
  922 -> 410 [style=dashed label="decimal-literal"]
  922 -> 76 [style=dashed label="decltype-specifier"]
  922 -> 411 [style=dashed label="delete-expression"]
  922 -> 412 [style=dashed label="digit"]
  922 -> 413 [style=dashed label="digit-sequence"]
  922 -> 414 [style=dashed label="encoding-prefix"]
  922 -> 84 [style=dashed label="enum-name"]
  922 -> 415 [style=dashed label="equality-expression"]
  922 -> 416 [style=dashed label="exclusive-or-expression"]
  922 -> 1377 [style=dashed label="expression-list"]
  922 -> 417 [style=dashed label="floating-point-literal"]
  922 -> 418 [style=dashed label="fold-expression"]
  922 -> 419 [style=dashed label="fractional-constant"]
  922 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  922 -> 421 [style=dashed label="hexadecimal-literal"]
  922 -> 422 [style=dashed label="hexadecimal-prefix"]
  922 -> 423 [style=dashed label="id-expression"]
  922 -> 424 [style=dashed label="inclusive-or-expression"]
  922 -> 1138 [style=dashed label="initializer-clause"]
  922 -> 1139 [style=dashed label="initializer-list"]
  922 -> 425 [style=dashed label="integer-literal"]
  922 -> 426 [style=dashed label="lambda-expression"]
  922 -> 427 [style=dashed label="lambda-introducer"]
  922 -> 428 [style=dashed label="literal"]
  922 -> 95 [style=dashed label="literal-operator-id"]
  922 -> 429 [style=dashed label="logical-and-expression"]
  922 -> 528 [style=dashed label="logical-or-expression"]
  922 -> 431 [style=dashed label="multiplicative-expression"]
  922 -> 99 [style=dashed label="namespace-alias"]
  922 -> 102 [style=dashed label="namespace-name"]
  922 -> 432 [style=dashed label="nested-name-specifier"]
  922 -> 433 [style=dashed label="new-expression"]
  922 -> 434 [style=dashed label="noexcept-expression"]
  922 -> 435 [style=dashed label="nonzero-digit"]
  922 -> 436 [style=dashed label="octal-literal"]
  922 -> 108 [style=dashed label="operator-function-id"]
  922 -> 109 [style=dashed label="placeholder-type-specifier"]
  922 -> 437 [style=dashed label="pm-expression"]
  922 -> 438 [style=dashed label="pointer-literal"]
  922 -> 439 [style=dashed label="postfix-expression"]
  922 -> 440 [style=dashed label="primary-expression"]
  922 -> 112 [style=dashed label="qualified-id"]
  922 -> 441 [style=dashed label="relational-expression"]
  922 -> 442 [style=dashed label="requires-expression"]
  922 -> 443 [style=dashed label="shift-expression"]
  922 -> 114 [style=dashed label="simple-template-id"]
  922 -> 529 [style=dashed label="simple-type-specifier"]
  922 -> 445 [style=dashed label="string-literal"]
  922 -> 120 [style=dashed label="template-id"]
  922 -> 215 [style=dashed label="template-name"]
  922 -> 530 [style=dashed label="throw-expression"]
  922 -> 123 [style=dashed label="type-constraint"]
  922 -> 124 [style=dashed label="type-name"]
  922 -> 126 [style=dashed label="typedef-name"]
  922 -> 531 [style=dashed label="typename-specifier"]
  922 -> 449 [style=dashed label="unary-expression"]
  922 -> 450 [style=dashed label="unary-operator"]
  922 -> 129 [style=dashed label="unqualified-id"]
  922 -> 451 [style=dashed label="user-defined-character-literal"]
  922 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  922 -> 453 [style=dashed label="user-defined-integer-literal"]
  922 -> 454 [style=dashed label="user-defined-literal"]
  922 -> 455 [style=dashed label="user-defined-string-literal"]
  922 -> 532 [style=dashed label="yield-expression"]
  923 [label="State 923\n\l857 postfix-expression: postfix-expression OPEN_SQUARE • CLOSE_SQUARE\l858                   | postfix-expression OPEN_SQUARE • expression-list CLOSE_SQUARE\l"]
  923 -> 356 [style=solid label="PLUS"]
  923 -> 357 [style=solid label="MINUS"]
  923 -> 2 [style=solid label="IDENTIFIER"]
  923 -> 358 [style=solid label="OPEN_PAREN"]
  923 -> 359 [style=solid label="AND"]
  923 -> 360 [style=solid label="SCOPE"]
  923 -> 361 [style=solid label="OPEN_SQUARE"]
  923 -> 1378 [style=solid label="CLOSE_SQUARE"]
  923 -> 362 [style=solid label="CO_AWAIT"]
  923 -> 935 [style=solid label="OPEN_BRACE"]
  923 -> 363 [style=solid label="ZERO_LB"]
  923 -> 364 [style=solid label="ZERO_HB"]
  923 -> 365 [style=solid label="SINGLE_QUOTE"]
  923 -> 366 [style=solid label="FALSE"]
  923 -> 367 [style=solid label="TRUE"]
  923 -> 368 [style=solid label="NOEXCEPT"]
  923 -> 17 [style=solid label="OPERATOR"]
  923 -> 26 [style=solid label="DECLTYPE"]
  923 -> 369 [style=solid label="DELETE"]
  923 -> 370 [style=solid label="DOT"]
  923 -> 184 [style=solid label="UNICODE_8"]
  923 -> 371 [style=solid label="MULT"]
  923 -> 199 [style=solid label="DOUBLE_QUOTE"]
  923 -> 372 [style=solid label="ZERO_LX"]
  923 -> 373 [style=solid label="ZERO_HX"]
  923 -> 374 [style=solid label="REQUIRES"]
  923 -> 375 [style=solid label="NEW"]
  923 -> 376 [style=solid label="COMPL"]
  923 -> 377 [style=solid label="NOT"]
  923 -> 378 [style=solid label="PLUS_PLUS"]
  923 -> 379 [style=solid label="MINUS_MINUS"]
  923 -> 380 [style=solid label="THIS"]
  923 -> 36 [style=solid label="AUTO"]
  923 -> 381 [style=solid label="NULLPTR"]
  923 -> 382 [style=solid label="DYNAMIC_CAST"]
  923 -> 383 [style=solid label="STATIC_CAST"]
  923 -> 384 [style=solid label="REINTERPRET_CAST"]
  923 -> 385 [style=solid label="CONST_CAST"]
  923 -> 386 [style=solid label="TYPEID"]
  923 -> 37 [style=solid label="CHAR"]
  923 -> 38 [style=solid label="CHAR8_T"]
  923 -> 39 [style=solid label="CHAR16_T"]
  923 -> 40 [style=solid label="CHAR32_T"]
  923 -> 41 [style=solid label="WCHAR_T"]
  923 -> 42 [style=solid label="BOOL"]
  923 -> 43 [style=solid label="SHORT"]
  923 -> 44 [style=solid label="INT"]
  923 -> 45 [style=solid label="LONG"]
  923 -> 46 [style=solid label="SIGNED"]
  923 -> 47 [style=solid label="UNSIGNED"]
  923 -> 48 [style=solid label="FLOAT"]
  923 -> 49 [style=solid label="DOUBLE"]
  923 -> 50 [style=solid label="VOID"]
  923 -> 523 [style=solid label="THROW"]
  923 -> 55 [style=solid label="TYPENAME"]
  923 -> 387 [style=solid label="SIZEOF"]
  923 -> 388 [style=solid label="ALIGNOF"]
  923 -> 524 [style=solid label="CO_YIELD"]
  923 -> 389 [style=solid label="'0'"]
  923 -> 390 [style=solid label="'1'"]
  923 -> 391 [style=solid label="'2'"]
  923 -> 392 [style=solid label="'3'"]
  923 -> 393 [style=solid label="'4'"]
  923 -> 394 [style=solid label="'5'"]
  923 -> 395 [style=solid label="'6'"]
  923 -> 396 [style=solid label="'7'"]
  923 -> 397 [style=solid label="'8'"]
  923 -> 398 [style=solid label="'9'"]
  923 -> 205 [style=solid label="'u'"]
  923 -> 206 [style=solid label="'U'"]
  923 -> 207 [style=solid label="'L'"]
  923 -> 208 [style=solid label="'R'"]
  923 -> 399 [style=dashed label="additive-expression"]
  923 -> 400 [style=dashed label="and-expression"]
  923 -> 1134 [style=dashed label="assignment-expression"]
  923 -> 401 [style=dashed label="await-expression"]
  923 -> 402 [style=dashed label="binary-literal"]
  923 -> 403 [style=dashed label="boolean-literal"]
  923 -> 1135 [style=dashed label="braced-init-list"]
  923 -> 404 [style=dashed label="cast-expression"]
  923 -> 405 [style=dashed label="character-literal"]
  923 -> 65 [style=dashed label="class-name"]
  923 -> 406 [style=dashed label="compare-expression"]
  923 -> 67 [style=dashed label="concept-name"]
  923 -> 526 [style=dashed label="conditional-expression"]
  923 -> 68 [style=dashed label="conversion-function-id"]
  923 -> 409 [style=dashed label="decimal-floating-point-literal"]
  923 -> 410 [style=dashed label="decimal-literal"]
  923 -> 76 [style=dashed label="decltype-specifier"]
  923 -> 411 [style=dashed label="delete-expression"]
  923 -> 412 [style=dashed label="digit"]
  923 -> 413 [style=dashed label="digit-sequence"]
  923 -> 414 [style=dashed label="encoding-prefix"]
  923 -> 84 [style=dashed label="enum-name"]
  923 -> 415 [style=dashed label="equality-expression"]
  923 -> 416 [style=dashed label="exclusive-or-expression"]
  923 -> 1379 [style=dashed label="expression-list"]
  923 -> 417 [style=dashed label="floating-point-literal"]
  923 -> 418 [style=dashed label="fold-expression"]
  923 -> 419 [style=dashed label="fractional-constant"]
  923 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  923 -> 421 [style=dashed label="hexadecimal-literal"]
  923 -> 422 [style=dashed label="hexadecimal-prefix"]
  923 -> 423 [style=dashed label="id-expression"]
  923 -> 424 [style=dashed label="inclusive-or-expression"]
  923 -> 1138 [style=dashed label="initializer-clause"]
  923 -> 1139 [style=dashed label="initializer-list"]
  923 -> 425 [style=dashed label="integer-literal"]
  923 -> 426 [style=dashed label="lambda-expression"]
  923 -> 427 [style=dashed label="lambda-introducer"]
  923 -> 428 [style=dashed label="literal"]
  923 -> 95 [style=dashed label="literal-operator-id"]
  923 -> 429 [style=dashed label="logical-and-expression"]
  923 -> 528 [style=dashed label="logical-or-expression"]
  923 -> 431 [style=dashed label="multiplicative-expression"]
  923 -> 99 [style=dashed label="namespace-alias"]
  923 -> 102 [style=dashed label="namespace-name"]
  923 -> 432 [style=dashed label="nested-name-specifier"]
  923 -> 433 [style=dashed label="new-expression"]
  923 -> 434 [style=dashed label="noexcept-expression"]
  923 -> 435 [style=dashed label="nonzero-digit"]
  923 -> 436 [style=dashed label="octal-literal"]
  923 -> 108 [style=dashed label="operator-function-id"]
  923 -> 109 [style=dashed label="placeholder-type-specifier"]
  923 -> 437 [style=dashed label="pm-expression"]
  923 -> 438 [style=dashed label="pointer-literal"]
  923 -> 439 [style=dashed label="postfix-expression"]
  923 -> 440 [style=dashed label="primary-expression"]
  923 -> 112 [style=dashed label="qualified-id"]
  923 -> 441 [style=dashed label="relational-expression"]
  923 -> 442 [style=dashed label="requires-expression"]
  923 -> 443 [style=dashed label="shift-expression"]
  923 -> 114 [style=dashed label="simple-template-id"]
  923 -> 529 [style=dashed label="simple-type-specifier"]
  923 -> 445 [style=dashed label="string-literal"]
  923 -> 120 [style=dashed label="template-id"]
  923 -> 215 [style=dashed label="template-name"]
  923 -> 530 [style=dashed label="throw-expression"]
  923 -> 123 [style=dashed label="type-constraint"]
  923 -> 124 [style=dashed label="type-name"]
  923 -> 126 [style=dashed label="typedef-name"]
  923 -> 531 [style=dashed label="typename-specifier"]
  923 -> 449 [style=dashed label="unary-expression"]
  923 -> 450 [style=dashed label="unary-operator"]
  923 -> 129 [style=dashed label="unqualified-id"]
  923 -> 451 [style=dashed label="user-defined-character-literal"]
  923 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  923 -> 453 [style=dashed label="user-defined-integer-literal"]
  923 -> 454 [style=dashed label="user-defined-literal"]
  923 -> 455 [style=dashed label="user-defined-string-literal"]
  923 -> 532 [style=dashed label="yield-expression"]
  924 [label="State 924\n\l869 postfix-expression: postfix-expression DEREF • id-expression\l870                   | postfix-expression DEREF • TEMPLATE id-expression\l"]
  924 -> 147 [style=solid label="IDENTIFIER"]
  924 -> 9 [style=solid label="SCOPE"]
  924 -> 1380 [style=solid label="TEMPLATE"]
  924 -> 17 [style=solid label="OPERATOR"]
  924 -> 134 [style=solid label="DECLTYPE"]
  924 -> 35 [style=solid label="COMPL"]
  924 -> 65 [style=dashed label="class-name"]
  924 -> 68 [style=dashed label="conversion-function-id"]
  924 -> 138 [style=dashed label="decltype-specifier"]
  924 -> 84 [style=dashed label="enum-name"]
  924 -> 1381 [style=dashed label="id-expression"]
  924 -> 95 [style=dashed label="literal-operator-id"]
  924 -> 99 [style=dashed label="namespace-alias"]
  924 -> 102 [style=dashed label="namespace-name"]
  924 -> 152 [style=dashed label="nested-name-specifier"]
  924 -> 108 [style=dashed label="operator-function-id"]
  924 -> 112 [style=dashed label="qualified-id"]
  924 -> 114 [style=dashed label="simple-template-id"]
  924 -> 120 [style=dashed label="template-id"]
  924 -> 142 [style=dashed label="template-name"]
  924 -> 143 [style=dashed label="type-name"]
  924 -> 126 [style=dashed label="typedef-name"]
  924 -> 129 [style=dashed label="unqualified-id"]
  925 [label="State 925\n\l867 postfix-expression: postfix-expression DOT • id-expression\l868                   | postfix-expression DOT • TEMPLATE id-expression\l"]
  925 -> 147 [style=solid label="IDENTIFIER"]
  925 -> 9 [style=solid label="SCOPE"]
  925 -> 1382 [style=solid label="TEMPLATE"]
  925 -> 17 [style=solid label="OPERATOR"]
  925 -> 134 [style=solid label="DECLTYPE"]
  925 -> 35 [style=solid label="COMPL"]
  925 -> 65 [style=dashed label="class-name"]
  925 -> 68 [style=dashed label="conversion-function-id"]
  925 -> 138 [style=dashed label="decltype-specifier"]
  925 -> 84 [style=dashed label="enum-name"]
  925 -> 1383 [style=dashed label="id-expression"]
  925 -> 95 [style=dashed label="literal-operator-id"]
  925 -> 99 [style=dashed label="namespace-alias"]
  925 -> 102 [style=dashed label="namespace-name"]
  925 -> 152 [style=dashed label="nested-name-specifier"]
  925 -> 108 [style=dashed label="operator-function-id"]
  925 -> 112 [style=dashed label="qualified-id"]
  925 -> 114 [style=dashed label="simple-template-id"]
  925 -> 120 [style=dashed label="template-id"]
  925 -> 142 [style=dashed label="template-name"]
  925 -> 143 [style=dashed label="type-name"]
  925 -> 126 [style=dashed label="typedef-name"]
  925 -> 129 [style=dashed label="unqualified-id"]
  926 [label="State 926\n\l871 postfix-expression: postfix-expression PLUS_PLUS •\l"]
  926 -> "926R871" [style=solid]
 "926R871" [label="R871", fillcolor=3, shape=diamond, style=filled]
  927 [label="State 927\n\l872 postfix-expression: postfix-expression MINUS_MINUS •\l"]
  927 -> "927R872" [style=solid]
 "927R872" [label="R872", fillcolor=3, shape=diamond, style=filled]
  928 [label="State 928\n\l917 relational-expression: relational-expression LESS • compare-expression\l"]
  928 -> 356 [style=solid label="PLUS"]
  928 -> 357 [style=solid label="MINUS"]
  928 -> 2 [style=solid label="IDENTIFIER"]
  928 -> 358 [style=solid label="OPEN_PAREN"]
  928 -> 359 [style=solid label="AND"]
  928 -> 360 [style=solid label="SCOPE"]
  928 -> 361 [style=solid label="OPEN_SQUARE"]
  928 -> 362 [style=solid label="CO_AWAIT"]
  928 -> 363 [style=solid label="ZERO_LB"]
  928 -> 364 [style=solid label="ZERO_HB"]
  928 -> 365 [style=solid label="SINGLE_QUOTE"]
  928 -> 366 [style=solid label="FALSE"]
  928 -> 367 [style=solid label="TRUE"]
  928 -> 368 [style=solid label="NOEXCEPT"]
  928 -> 17 [style=solid label="OPERATOR"]
  928 -> 26 [style=solid label="DECLTYPE"]
  928 -> 369 [style=solid label="DELETE"]
  928 -> 370 [style=solid label="DOT"]
  928 -> 184 [style=solid label="UNICODE_8"]
  928 -> 371 [style=solid label="MULT"]
  928 -> 199 [style=solid label="DOUBLE_QUOTE"]
  928 -> 372 [style=solid label="ZERO_LX"]
  928 -> 373 [style=solid label="ZERO_HX"]
  928 -> 374 [style=solid label="REQUIRES"]
  928 -> 375 [style=solid label="NEW"]
  928 -> 376 [style=solid label="COMPL"]
  928 -> 377 [style=solid label="NOT"]
  928 -> 378 [style=solid label="PLUS_PLUS"]
  928 -> 379 [style=solid label="MINUS_MINUS"]
  928 -> 380 [style=solid label="THIS"]
  928 -> 36 [style=solid label="AUTO"]
  928 -> 381 [style=solid label="NULLPTR"]
  928 -> 382 [style=solid label="DYNAMIC_CAST"]
  928 -> 383 [style=solid label="STATIC_CAST"]
  928 -> 384 [style=solid label="REINTERPRET_CAST"]
  928 -> 385 [style=solid label="CONST_CAST"]
  928 -> 386 [style=solid label="TYPEID"]
  928 -> 37 [style=solid label="CHAR"]
  928 -> 38 [style=solid label="CHAR8_T"]
  928 -> 39 [style=solid label="CHAR16_T"]
  928 -> 40 [style=solid label="CHAR32_T"]
  928 -> 41 [style=solid label="WCHAR_T"]
  928 -> 42 [style=solid label="BOOL"]
  928 -> 43 [style=solid label="SHORT"]
  928 -> 44 [style=solid label="INT"]
  928 -> 45 [style=solid label="LONG"]
  928 -> 46 [style=solid label="SIGNED"]
  928 -> 47 [style=solid label="UNSIGNED"]
  928 -> 48 [style=solid label="FLOAT"]
  928 -> 49 [style=solid label="DOUBLE"]
  928 -> 50 [style=solid label="VOID"]
  928 -> 55 [style=solid label="TYPENAME"]
  928 -> 387 [style=solid label="SIZEOF"]
  928 -> 388 [style=solid label="ALIGNOF"]
  928 -> 389 [style=solid label="'0'"]
  928 -> 390 [style=solid label="'1'"]
  928 -> 391 [style=solid label="'2'"]
  928 -> 392 [style=solid label="'3'"]
  928 -> 393 [style=solid label="'4'"]
  928 -> 394 [style=solid label="'5'"]
  928 -> 395 [style=solid label="'6'"]
  928 -> 396 [style=solid label="'7'"]
  928 -> 397 [style=solid label="'8'"]
  928 -> 398 [style=solid label="'9'"]
  928 -> 205 [style=solid label="'u'"]
  928 -> 206 [style=solid label="'U'"]
  928 -> 207 [style=solid label="'L'"]
  928 -> 208 [style=solid label="'R'"]
  928 -> 399 [style=dashed label="additive-expression"]
  928 -> 401 [style=dashed label="await-expression"]
  928 -> 402 [style=dashed label="binary-literal"]
  928 -> 403 [style=dashed label="boolean-literal"]
  928 -> 404 [style=dashed label="cast-expression"]
  928 -> 405 [style=dashed label="character-literal"]
  928 -> 65 [style=dashed label="class-name"]
  928 -> 1384 [style=dashed label="compare-expression"]
  928 -> 67 [style=dashed label="concept-name"]
  928 -> 68 [style=dashed label="conversion-function-id"]
  928 -> 409 [style=dashed label="decimal-floating-point-literal"]
  928 -> 410 [style=dashed label="decimal-literal"]
  928 -> 76 [style=dashed label="decltype-specifier"]
  928 -> 411 [style=dashed label="delete-expression"]
  928 -> 412 [style=dashed label="digit"]
  928 -> 413 [style=dashed label="digit-sequence"]
  928 -> 414 [style=dashed label="encoding-prefix"]
  928 -> 84 [style=dashed label="enum-name"]
  928 -> 417 [style=dashed label="floating-point-literal"]
  928 -> 418 [style=dashed label="fold-expression"]
  928 -> 419 [style=dashed label="fractional-constant"]
  928 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  928 -> 421 [style=dashed label="hexadecimal-literal"]
  928 -> 422 [style=dashed label="hexadecimal-prefix"]
  928 -> 423 [style=dashed label="id-expression"]
  928 -> 425 [style=dashed label="integer-literal"]
  928 -> 426 [style=dashed label="lambda-expression"]
  928 -> 427 [style=dashed label="lambda-introducer"]
  928 -> 428 [style=dashed label="literal"]
  928 -> 95 [style=dashed label="literal-operator-id"]
  928 -> 431 [style=dashed label="multiplicative-expression"]
  928 -> 99 [style=dashed label="namespace-alias"]
  928 -> 102 [style=dashed label="namespace-name"]
  928 -> 432 [style=dashed label="nested-name-specifier"]
  928 -> 433 [style=dashed label="new-expression"]
  928 -> 434 [style=dashed label="noexcept-expression"]
  928 -> 435 [style=dashed label="nonzero-digit"]
  928 -> 436 [style=dashed label="octal-literal"]
  928 -> 108 [style=dashed label="operator-function-id"]
  928 -> 109 [style=dashed label="placeholder-type-specifier"]
  928 -> 437 [style=dashed label="pm-expression"]
  928 -> 438 [style=dashed label="pointer-literal"]
  928 -> 439 [style=dashed label="postfix-expression"]
  928 -> 440 [style=dashed label="primary-expression"]
  928 -> 112 [style=dashed label="qualified-id"]
  928 -> 442 [style=dashed label="requires-expression"]
  928 -> 443 [style=dashed label="shift-expression"]
  928 -> 114 [style=dashed label="simple-template-id"]
  928 -> 529 [style=dashed label="simple-type-specifier"]
  928 -> 445 [style=dashed label="string-literal"]
  928 -> 120 [style=dashed label="template-id"]
  928 -> 215 [style=dashed label="template-name"]
  928 -> 123 [style=dashed label="type-constraint"]
  928 -> 124 [style=dashed label="type-name"]
  928 -> 126 [style=dashed label="typedef-name"]
  928 -> 531 [style=dashed label="typename-specifier"]
  928 -> 449 [style=dashed label="unary-expression"]
  928 -> 450 [style=dashed label="unary-operator"]
  928 -> 129 [style=dashed label="unqualified-id"]
  928 -> 451 [style=dashed label="user-defined-character-literal"]
  928 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  928 -> 453 [style=dashed label="user-defined-integer-literal"]
  928 -> 454 [style=dashed label="user-defined-literal"]
  928 -> 455 [style=dashed label="user-defined-string-literal"]
  929 [label="State 929\n\l918 relational-expression: relational-expression GREATER • compare-expression\l"]
  929 -> 356 [style=solid label="PLUS"]
  929 -> 357 [style=solid label="MINUS"]
  929 -> 2 [style=solid label="IDENTIFIER"]
  929 -> 358 [style=solid label="OPEN_PAREN"]
  929 -> 359 [style=solid label="AND"]
  929 -> 360 [style=solid label="SCOPE"]
  929 -> 361 [style=solid label="OPEN_SQUARE"]
  929 -> 362 [style=solid label="CO_AWAIT"]
  929 -> 363 [style=solid label="ZERO_LB"]
  929 -> 364 [style=solid label="ZERO_HB"]
  929 -> 365 [style=solid label="SINGLE_QUOTE"]
  929 -> 366 [style=solid label="FALSE"]
  929 -> 367 [style=solid label="TRUE"]
  929 -> 368 [style=solid label="NOEXCEPT"]
  929 -> 17 [style=solid label="OPERATOR"]
  929 -> 26 [style=solid label="DECLTYPE"]
  929 -> 369 [style=solid label="DELETE"]
  929 -> 370 [style=solid label="DOT"]
  929 -> 184 [style=solid label="UNICODE_8"]
  929 -> 371 [style=solid label="MULT"]
  929 -> 199 [style=solid label="DOUBLE_QUOTE"]
  929 -> 372 [style=solid label="ZERO_LX"]
  929 -> 373 [style=solid label="ZERO_HX"]
  929 -> 374 [style=solid label="REQUIRES"]
  929 -> 375 [style=solid label="NEW"]
  929 -> 376 [style=solid label="COMPL"]
  929 -> 377 [style=solid label="NOT"]
  929 -> 378 [style=solid label="PLUS_PLUS"]
  929 -> 379 [style=solid label="MINUS_MINUS"]
  929 -> 380 [style=solid label="THIS"]
  929 -> 36 [style=solid label="AUTO"]
  929 -> 381 [style=solid label="NULLPTR"]
  929 -> 382 [style=solid label="DYNAMIC_CAST"]
  929 -> 383 [style=solid label="STATIC_CAST"]
  929 -> 384 [style=solid label="REINTERPRET_CAST"]
  929 -> 385 [style=solid label="CONST_CAST"]
  929 -> 386 [style=solid label="TYPEID"]
  929 -> 37 [style=solid label="CHAR"]
  929 -> 38 [style=solid label="CHAR8_T"]
  929 -> 39 [style=solid label="CHAR16_T"]
  929 -> 40 [style=solid label="CHAR32_T"]
  929 -> 41 [style=solid label="WCHAR_T"]
  929 -> 42 [style=solid label="BOOL"]
  929 -> 43 [style=solid label="SHORT"]
  929 -> 44 [style=solid label="INT"]
  929 -> 45 [style=solid label="LONG"]
  929 -> 46 [style=solid label="SIGNED"]
  929 -> 47 [style=solid label="UNSIGNED"]
  929 -> 48 [style=solid label="FLOAT"]
  929 -> 49 [style=solid label="DOUBLE"]
  929 -> 50 [style=solid label="VOID"]
  929 -> 55 [style=solid label="TYPENAME"]
  929 -> 387 [style=solid label="SIZEOF"]
  929 -> 388 [style=solid label="ALIGNOF"]
  929 -> 389 [style=solid label="'0'"]
  929 -> 390 [style=solid label="'1'"]
  929 -> 391 [style=solid label="'2'"]
  929 -> 392 [style=solid label="'3'"]
  929 -> 393 [style=solid label="'4'"]
  929 -> 394 [style=solid label="'5'"]
  929 -> 395 [style=solid label="'6'"]
  929 -> 396 [style=solid label="'7'"]
  929 -> 397 [style=solid label="'8'"]
  929 -> 398 [style=solid label="'9'"]
  929 -> 205 [style=solid label="'u'"]
  929 -> 206 [style=solid label="'U'"]
  929 -> 207 [style=solid label="'L'"]
  929 -> 208 [style=solid label="'R'"]
  929 -> 399 [style=dashed label="additive-expression"]
  929 -> 401 [style=dashed label="await-expression"]
  929 -> 402 [style=dashed label="binary-literal"]
  929 -> 403 [style=dashed label="boolean-literal"]
  929 -> 404 [style=dashed label="cast-expression"]
  929 -> 405 [style=dashed label="character-literal"]
  929 -> 65 [style=dashed label="class-name"]
  929 -> 1385 [style=dashed label="compare-expression"]
  929 -> 67 [style=dashed label="concept-name"]
  929 -> 68 [style=dashed label="conversion-function-id"]
  929 -> 409 [style=dashed label="decimal-floating-point-literal"]
  929 -> 410 [style=dashed label="decimal-literal"]
  929 -> 76 [style=dashed label="decltype-specifier"]
  929 -> 411 [style=dashed label="delete-expression"]
  929 -> 412 [style=dashed label="digit"]
  929 -> 413 [style=dashed label="digit-sequence"]
  929 -> 414 [style=dashed label="encoding-prefix"]
  929 -> 84 [style=dashed label="enum-name"]
  929 -> 417 [style=dashed label="floating-point-literal"]
  929 -> 418 [style=dashed label="fold-expression"]
  929 -> 419 [style=dashed label="fractional-constant"]
  929 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  929 -> 421 [style=dashed label="hexadecimal-literal"]
  929 -> 422 [style=dashed label="hexadecimal-prefix"]
  929 -> 423 [style=dashed label="id-expression"]
  929 -> 425 [style=dashed label="integer-literal"]
  929 -> 426 [style=dashed label="lambda-expression"]
  929 -> 427 [style=dashed label="lambda-introducer"]
  929 -> 428 [style=dashed label="literal"]
  929 -> 95 [style=dashed label="literal-operator-id"]
  929 -> 431 [style=dashed label="multiplicative-expression"]
  929 -> 99 [style=dashed label="namespace-alias"]
  929 -> 102 [style=dashed label="namespace-name"]
  929 -> 432 [style=dashed label="nested-name-specifier"]
  929 -> 433 [style=dashed label="new-expression"]
  929 -> 434 [style=dashed label="noexcept-expression"]
  929 -> 435 [style=dashed label="nonzero-digit"]
  929 -> 436 [style=dashed label="octal-literal"]
  929 -> 108 [style=dashed label="operator-function-id"]
  929 -> 109 [style=dashed label="placeholder-type-specifier"]
  929 -> 437 [style=dashed label="pm-expression"]
  929 -> 438 [style=dashed label="pointer-literal"]
  929 -> 439 [style=dashed label="postfix-expression"]
  929 -> 440 [style=dashed label="primary-expression"]
  929 -> 112 [style=dashed label="qualified-id"]
  929 -> 442 [style=dashed label="requires-expression"]
  929 -> 443 [style=dashed label="shift-expression"]
  929 -> 114 [style=dashed label="simple-template-id"]
  929 -> 529 [style=dashed label="simple-type-specifier"]
  929 -> 445 [style=dashed label="string-literal"]
  929 -> 120 [style=dashed label="template-id"]
  929 -> 215 [style=dashed label="template-name"]
  929 -> 123 [style=dashed label="type-constraint"]
  929 -> 124 [style=dashed label="type-name"]
  929 -> 126 [style=dashed label="typedef-name"]
  929 -> 531 [style=dashed label="typename-specifier"]
  929 -> 449 [style=dashed label="unary-expression"]
  929 -> 450 [style=dashed label="unary-operator"]
  929 -> 129 [style=dashed label="unqualified-id"]
  929 -> 451 [style=dashed label="user-defined-character-literal"]
  929 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  929 -> 453 [style=dashed label="user-defined-integer-literal"]
  929 -> 454 [style=dashed label="user-defined-literal"]
  929 -> 455 [style=dashed label="user-defined-string-literal"]
  930 [label="State 930\n\l919 relational-expression: relational-expression LESS_EQ • compare-expression\l"]
  930 -> 356 [style=solid label="PLUS"]
  930 -> 357 [style=solid label="MINUS"]
  930 -> 2 [style=solid label="IDENTIFIER"]
  930 -> 358 [style=solid label="OPEN_PAREN"]
  930 -> 359 [style=solid label="AND"]
  930 -> 360 [style=solid label="SCOPE"]
  930 -> 361 [style=solid label="OPEN_SQUARE"]
  930 -> 362 [style=solid label="CO_AWAIT"]
  930 -> 363 [style=solid label="ZERO_LB"]
  930 -> 364 [style=solid label="ZERO_HB"]
  930 -> 365 [style=solid label="SINGLE_QUOTE"]
  930 -> 366 [style=solid label="FALSE"]
  930 -> 367 [style=solid label="TRUE"]
  930 -> 368 [style=solid label="NOEXCEPT"]
  930 -> 17 [style=solid label="OPERATOR"]
  930 -> 26 [style=solid label="DECLTYPE"]
  930 -> 369 [style=solid label="DELETE"]
  930 -> 370 [style=solid label="DOT"]
  930 -> 184 [style=solid label="UNICODE_8"]
  930 -> 371 [style=solid label="MULT"]
  930 -> 199 [style=solid label="DOUBLE_QUOTE"]
  930 -> 372 [style=solid label="ZERO_LX"]
  930 -> 373 [style=solid label="ZERO_HX"]
  930 -> 374 [style=solid label="REQUIRES"]
  930 -> 375 [style=solid label="NEW"]
  930 -> 376 [style=solid label="COMPL"]
  930 -> 377 [style=solid label="NOT"]
  930 -> 378 [style=solid label="PLUS_PLUS"]
  930 -> 379 [style=solid label="MINUS_MINUS"]
  930 -> 380 [style=solid label="THIS"]
  930 -> 36 [style=solid label="AUTO"]
  930 -> 381 [style=solid label="NULLPTR"]
  930 -> 382 [style=solid label="DYNAMIC_CAST"]
  930 -> 383 [style=solid label="STATIC_CAST"]
  930 -> 384 [style=solid label="REINTERPRET_CAST"]
  930 -> 385 [style=solid label="CONST_CAST"]
  930 -> 386 [style=solid label="TYPEID"]
  930 -> 37 [style=solid label="CHAR"]
  930 -> 38 [style=solid label="CHAR8_T"]
  930 -> 39 [style=solid label="CHAR16_T"]
  930 -> 40 [style=solid label="CHAR32_T"]
  930 -> 41 [style=solid label="WCHAR_T"]
  930 -> 42 [style=solid label="BOOL"]
  930 -> 43 [style=solid label="SHORT"]
  930 -> 44 [style=solid label="INT"]
  930 -> 45 [style=solid label="LONG"]
  930 -> 46 [style=solid label="SIGNED"]
  930 -> 47 [style=solid label="UNSIGNED"]
  930 -> 48 [style=solid label="FLOAT"]
  930 -> 49 [style=solid label="DOUBLE"]
  930 -> 50 [style=solid label="VOID"]
  930 -> 55 [style=solid label="TYPENAME"]
  930 -> 387 [style=solid label="SIZEOF"]
  930 -> 388 [style=solid label="ALIGNOF"]
  930 -> 389 [style=solid label="'0'"]
  930 -> 390 [style=solid label="'1'"]
  930 -> 391 [style=solid label="'2'"]
  930 -> 392 [style=solid label="'3'"]
  930 -> 393 [style=solid label="'4'"]
  930 -> 394 [style=solid label="'5'"]
  930 -> 395 [style=solid label="'6'"]
  930 -> 396 [style=solid label="'7'"]
  930 -> 397 [style=solid label="'8'"]
  930 -> 398 [style=solid label="'9'"]
  930 -> 205 [style=solid label="'u'"]
  930 -> 206 [style=solid label="'U'"]
  930 -> 207 [style=solid label="'L'"]
  930 -> 208 [style=solid label="'R'"]
  930 -> 399 [style=dashed label="additive-expression"]
  930 -> 401 [style=dashed label="await-expression"]
  930 -> 402 [style=dashed label="binary-literal"]
  930 -> 403 [style=dashed label="boolean-literal"]
  930 -> 404 [style=dashed label="cast-expression"]
  930 -> 405 [style=dashed label="character-literal"]
  930 -> 65 [style=dashed label="class-name"]
  930 -> 1386 [style=dashed label="compare-expression"]
  930 -> 67 [style=dashed label="concept-name"]
  930 -> 68 [style=dashed label="conversion-function-id"]
  930 -> 409 [style=dashed label="decimal-floating-point-literal"]
  930 -> 410 [style=dashed label="decimal-literal"]
  930 -> 76 [style=dashed label="decltype-specifier"]
  930 -> 411 [style=dashed label="delete-expression"]
  930 -> 412 [style=dashed label="digit"]
  930 -> 413 [style=dashed label="digit-sequence"]
  930 -> 414 [style=dashed label="encoding-prefix"]
  930 -> 84 [style=dashed label="enum-name"]
  930 -> 417 [style=dashed label="floating-point-literal"]
  930 -> 418 [style=dashed label="fold-expression"]
  930 -> 419 [style=dashed label="fractional-constant"]
  930 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  930 -> 421 [style=dashed label="hexadecimal-literal"]
  930 -> 422 [style=dashed label="hexadecimal-prefix"]
  930 -> 423 [style=dashed label="id-expression"]
  930 -> 425 [style=dashed label="integer-literal"]
  930 -> 426 [style=dashed label="lambda-expression"]
  930 -> 427 [style=dashed label="lambda-introducer"]
  930 -> 428 [style=dashed label="literal"]
  930 -> 95 [style=dashed label="literal-operator-id"]
  930 -> 431 [style=dashed label="multiplicative-expression"]
  930 -> 99 [style=dashed label="namespace-alias"]
  930 -> 102 [style=dashed label="namespace-name"]
  930 -> 432 [style=dashed label="nested-name-specifier"]
  930 -> 433 [style=dashed label="new-expression"]
  930 -> 434 [style=dashed label="noexcept-expression"]
  930 -> 435 [style=dashed label="nonzero-digit"]
  930 -> 436 [style=dashed label="octal-literal"]
  930 -> 108 [style=dashed label="operator-function-id"]
  930 -> 109 [style=dashed label="placeholder-type-specifier"]
  930 -> 437 [style=dashed label="pm-expression"]
  930 -> 438 [style=dashed label="pointer-literal"]
  930 -> 439 [style=dashed label="postfix-expression"]
  930 -> 440 [style=dashed label="primary-expression"]
  930 -> 112 [style=dashed label="qualified-id"]
  930 -> 442 [style=dashed label="requires-expression"]
  930 -> 443 [style=dashed label="shift-expression"]
  930 -> 114 [style=dashed label="simple-template-id"]
  930 -> 529 [style=dashed label="simple-type-specifier"]
  930 -> 445 [style=dashed label="string-literal"]
  930 -> 120 [style=dashed label="template-id"]
  930 -> 215 [style=dashed label="template-name"]
  930 -> 123 [style=dashed label="type-constraint"]
  930 -> 124 [style=dashed label="type-name"]
  930 -> 126 [style=dashed label="typedef-name"]
  930 -> 531 [style=dashed label="typename-specifier"]
  930 -> 449 [style=dashed label="unary-expression"]
  930 -> 450 [style=dashed label="unary-operator"]
  930 -> 129 [style=dashed label="unqualified-id"]
  930 -> 451 [style=dashed label="user-defined-character-literal"]
  930 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  930 -> 453 [style=dashed label="user-defined-integer-literal"]
  930 -> 454 [style=dashed label="user-defined-literal"]
  930 -> 455 [style=dashed label="user-defined-string-literal"]
  931 [label="State 931\n\l920 relational-expression: relational-expression GREATER_EQ • compare-expression\l"]
  931 -> 356 [style=solid label="PLUS"]
  931 -> 357 [style=solid label="MINUS"]
  931 -> 2 [style=solid label="IDENTIFIER"]
  931 -> 358 [style=solid label="OPEN_PAREN"]
  931 -> 359 [style=solid label="AND"]
  931 -> 360 [style=solid label="SCOPE"]
  931 -> 361 [style=solid label="OPEN_SQUARE"]
  931 -> 362 [style=solid label="CO_AWAIT"]
  931 -> 363 [style=solid label="ZERO_LB"]
  931 -> 364 [style=solid label="ZERO_HB"]
  931 -> 365 [style=solid label="SINGLE_QUOTE"]
  931 -> 366 [style=solid label="FALSE"]
  931 -> 367 [style=solid label="TRUE"]
  931 -> 368 [style=solid label="NOEXCEPT"]
  931 -> 17 [style=solid label="OPERATOR"]
  931 -> 26 [style=solid label="DECLTYPE"]
  931 -> 369 [style=solid label="DELETE"]
  931 -> 370 [style=solid label="DOT"]
  931 -> 184 [style=solid label="UNICODE_8"]
  931 -> 371 [style=solid label="MULT"]
  931 -> 199 [style=solid label="DOUBLE_QUOTE"]
  931 -> 372 [style=solid label="ZERO_LX"]
  931 -> 373 [style=solid label="ZERO_HX"]
  931 -> 374 [style=solid label="REQUIRES"]
  931 -> 375 [style=solid label="NEW"]
  931 -> 376 [style=solid label="COMPL"]
  931 -> 377 [style=solid label="NOT"]
  931 -> 378 [style=solid label="PLUS_PLUS"]
  931 -> 379 [style=solid label="MINUS_MINUS"]
  931 -> 380 [style=solid label="THIS"]
  931 -> 36 [style=solid label="AUTO"]
  931 -> 381 [style=solid label="NULLPTR"]
  931 -> 382 [style=solid label="DYNAMIC_CAST"]
  931 -> 383 [style=solid label="STATIC_CAST"]
  931 -> 384 [style=solid label="REINTERPRET_CAST"]
  931 -> 385 [style=solid label="CONST_CAST"]
  931 -> 386 [style=solid label="TYPEID"]
  931 -> 37 [style=solid label="CHAR"]
  931 -> 38 [style=solid label="CHAR8_T"]
  931 -> 39 [style=solid label="CHAR16_T"]
  931 -> 40 [style=solid label="CHAR32_T"]
  931 -> 41 [style=solid label="WCHAR_T"]
  931 -> 42 [style=solid label="BOOL"]
  931 -> 43 [style=solid label="SHORT"]
  931 -> 44 [style=solid label="INT"]
  931 -> 45 [style=solid label="LONG"]
  931 -> 46 [style=solid label="SIGNED"]
  931 -> 47 [style=solid label="UNSIGNED"]
  931 -> 48 [style=solid label="FLOAT"]
  931 -> 49 [style=solid label="DOUBLE"]
  931 -> 50 [style=solid label="VOID"]
  931 -> 55 [style=solid label="TYPENAME"]
  931 -> 387 [style=solid label="SIZEOF"]
  931 -> 388 [style=solid label="ALIGNOF"]
  931 -> 389 [style=solid label="'0'"]
  931 -> 390 [style=solid label="'1'"]
  931 -> 391 [style=solid label="'2'"]
  931 -> 392 [style=solid label="'3'"]
  931 -> 393 [style=solid label="'4'"]
  931 -> 394 [style=solid label="'5'"]
  931 -> 395 [style=solid label="'6'"]
  931 -> 396 [style=solid label="'7'"]
  931 -> 397 [style=solid label="'8'"]
  931 -> 398 [style=solid label="'9'"]
  931 -> 205 [style=solid label="'u'"]
  931 -> 206 [style=solid label="'U'"]
  931 -> 207 [style=solid label="'L'"]
  931 -> 208 [style=solid label="'R'"]
  931 -> 399 [style=dashed label="additive-expression"]
  931 -> 401 [style=dashed label="await-expression"]
  931 -> 402 [style=dashed label="binary-literal"]
  931 -> 403 [style=dashed label="boolean-literal"]
  931 -> 404 [style=dashed label="cast-expression"]
  931 -> 405 [style=dashed label="character-literal"]
  931 -> 65 [style=dashed label="class-name"]
  931 -> 1387 [style=dashed label="compare-expression"]
  931 -> 67 [style=dashed label="concept-name"]
  931 -> 68 [style=dashed label="conversion-function-id"]
  931 -> 409 [style=dashed label="decimal-floating-point-literal"]
  931 -> 410 [style=dashed label="decimal-literal"]
  931 -> 76 [style=dashed label="decltype-specifier"]
  931 -> 411 [style=dashed label="delete-expression"]
  931 -> 412 [style=dashed label="digit"]
  931 -> 413 [style=dashed label="digit-sequence"]
  931 -> 414 [style=dashed label="encoding-prefix"]
  931 -> 84 [style=dashed label="enum-name"]
  931 -> 417 [style=dashed label="floating-point-literal"]
  931 -> 418 [style=dashed label="fold-expression"]
  931 -> 419 [style=dashed label="fractional-constant"]
  931 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  931 -> 421 [style=dashed label="hexadecimal-literal"]
  931 -> 422 [style=dashed label="hexadecimal-prefix"]
  931 -> 423 [style=dashed label="id-expression"]
  931 -> 425 [style=dashed label="integer-literal"]
  931 -> 426 [style=dashed label="lambda-expression"]
  931 -> 427 [style=dashed label="lambda-introducer"]
  931 -> 428 [style=dashed label="literal"]
  931 -> 95 [style=dashed label="literal-operator-id"]
  931 -> 431 [style=dashed label="multiplicative-expression"]
  931 -> 99 [style=dashed label="namespace-alias"]
  931 -> 102 [style=dashed label="namespace-name"]
  931 -> 432 [style=dashed label="nested-name-specifier"]
  931 -> 433 [style=dashed label="new-expression"]
  931 -> 434 [style=dashed label="noexcept-expression"]
  931 -> 435 [style=dashed label="nonzero-digit"]
  931 -> 436 [style=dashed label="octal-literal"]
  931 -> 108 [style=dashed label="operator-function-id"]
  931 -> 109 [style=dashed label="placeholder-type-specifier"]
  931 -> 437 [style=dashed label="pm-expression"]
  931 -> 438 [style=dashed label="pointer-literal"]
  931 -> 439 [style=dashed label="postfix-expression"]
  931 -> 440 [style=dashed label="primary-expression"]
  931 -> 112 [style=dashed label="qualified-id"]
  931 -> 442 [style=dashed label="requires-expression"]
  931 -> 443 [style=dashed label="shift-expression"]
  931 -> 114 [style=dashed label="simple-template-id"]
  931 -> 529 [style=dashed label="simple-type-specifier"]
  931 -> 445 [style=dashed label="string-literal"]
  931 -> 120 [style=dashed label="template-id"]
  931 -> 215 [style=dashed label="template-name"]
  931 -> 123 [style=dashed label="type-constraint"]
  931 -> 124 [style=dashed label="type-name"]
  931 -> 126 [style=dashed label="typedef-name"]
  931 -> 531 [style=dashed label="typename-specifier"]
  931 -> 449 [style=dashed label="unary-expression"]
  931 -> 450 [style=dashed label="unary-operator"]
  931 -> 129 [style=dashed label="unqualified-id"]
  931 -> 451 [style=dashed label="user-defined-character-literal"]
  931 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  931 -> 453 [style=dashed label="user-defined-integer-literal"]
  931 -> 454 [style=dashed label="user-defined-literal"]
  931 -> 455 [style=dashed label="user-defined-string-literal"]
  932 [label="State 932\n\l953 shift-expression: shift-expression LSHIFT • additive-expression\l"]
  932 -> 356 [style=solid label="PLUS"]
  932 -> 357 [style=solid label="MINUS"]
  932 -> 2 [style=solid label="IDENTIFIER"]
  932 -> 358 [style=solid label="OPEN_PAREN"]
  932 -> 359 [style=solid label="AND"]
  932 -> 360 [style=solid label="SCOPE"]
  932 -> 361 [style=solid label="OPEN_SQUARE"]
  932 -> 362 [style=solid label="CO_AWAIT"]
  932 -> 363 [style=solid label="ZERO_LB"]
  932 -> 364 [style=solid label="ZERO_HB"]
  932 -> 365 [style=solid label="SINGLE_QUOTE"]
  932 -> 366 [style=solid label="FALSE"]
  932 -> 367 [style=solid label="TRUE"]
  932 -> 368 [style=solid label="NOEXCEPT"]
  932 -> 17 [style=solid label="OPERATOR"]
  932 -> 26 [style=solid label="DECLTYPE"]
  932 -> 369 [style=solid label="DELETE"]
  932 -> 370 [style=solid label="DOT"]
  932 -> 184 [style=solid label="UNICODE_8"]
  932 -> 371 [style=solid label="MULT"]
  932 -> 199 [style=solid label="DOUBLE_QUOTE"]
  932 -> 372 [style=solid label="ZERO_LX"]
  932 -> 373 [style=solid label="ZERO_HX"]
  932 -> 374 [style=solid label="REQUIRES"]
  932 -> 375 [style=solid label="NEW"]
  932 -> 376 [style=solid label="COMPL"]
  932 -> 377 [style=solid label="NOT"]
  932 -> 378 [style=solid label="PLUS_PLUS"]
  932 -> 379 [style=solid label="MINUS_MINUS"]
  932 -> 380 [style=solid label="THIS"]
  932 -> 36 [style=solid label="AUTO"]
  932 -> 381 [style=solid label="NULLPTR"]
  932 -> 382 [style=solid label="DYNAMIC_CAST"]
  932 -> 383 [style=solid label="STATIC_CAST"]
  932 -> 384 [style=solid label="REINTERPRET_CAST"]
  932 -> 385 [style=solid label="CONST_CAST"]
  932 -> 386 [style=solid label="TYPEID"]
  932 -> 37 [style=solid label="CHAR"]
  932 -> 38 [style=solid label="CHAR8_T"]
  932 -> 39 [style=solid label="CHAR16_T"]
  932 -> 40 [style=solid label="CHAR32_T"]
  932 -> 41 [style=solid label="WCHAR_T"]
  932 -> 42 [style=solid label="BOOL"]
  932 -> 43 [style=solid label="SHORT"]
  932 -> 44 [style=solid label="INT"]
  932 -> 45 [style=solid label="LONG"]
  932 -> 46 [style=solid label="SIGNED"]
  932 -> 47 [style=solid label="UNSIGNED"]
  932 -> 48 [style=solid label="FLOAT"]
  932 -> 49 [style=solid label="DOUBLE"]
  932 -> 50 [style=solid label="VOID"]
  932 -> 55 [style=solid label="TYPENAME"]
  932 -> 387 [style=solid label="SIZEOF"]
  932 -> 388 [style=solid label="ALIGNOF"]
  932 -> 389 [style=solid label="'0'"]
  932 -> 390 [style=solid label="'1'"]
  932 -> 391 [style=solid label="'2'"]
  932 -> 392 [style=solid label="'3'"]
  932 -> 393 [style=solid label="'4'"]
  932 -> 394 [style=solid label="'5'"]
  932 -> 395 [style=solid label="'6'"]
  932 -> 396 [style=solid label="'7'"]
  932 -> 397 [style=solid label="'8'"]
  932 -> 398 [style=solid label="'9'"]
  932 -> 205 [style=solid label="'u'"]
  932 -> 206 [style=solid label="'U'"]
  932 -> 207 [style=solid label="'L'"]
  932 -> 208 [style=solid label="'R'"]
  932 -> 1388 [style=dashed label="additive-expression"]
  932 -> 401 [style=dashed label="await-expression"]
  932 -> 402 [style=dashed label="binary-literal"]
  932 -> 403 [style=dashed label="boolean-literal"]
  932 -> 404 [style=dashed label="cast-expression"]
  932 -> 405 [style=dashed label="character-literal"]
  932 -> 65 [style=dashed label="class-name"]
  932 -> 67 [style=dashed label="concept-name"]
  932 -> 68 [style=dashed label="conversion-function-id"]
  932 -> 409 [style=dashed label="decimal-floating-point-literal"]
  932 -> 410 [style=dashed label="decimal-literal"]
  932 -> 76 [style=dashed label="decltype-specifier"]
  932 -> 411 [style=dashed label="delete-expression"]
  932 -> 412 [style=dashed label="digit"]
  932 -> 413 [style=dashed label="digit-sequence"]
  932 -> 414 [style=dashed label="encoding-prefix"]
  932 -> 84 [style=dashed label="enum-name"]
  932 -> 417 [style=dashed label="floating-point-literal"]
  932 -> 418 [style=dashed label="fold-expression"]
  932 -> 419 [style=dashed label="fractional-constant"]
  932 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  932 -> 421 [style=dashed label="hexadecimal-literal"]
  932 -> 422 [style=dashed label="hexadecimal-prefix"]
  932 -> 423 [style=dashed label="id-expression"]
  932 -> 425 [style=dashed label="integer-literal"]
  932 -> 426 [style=dashed label="lambda-expression"]
  932 -> 427 [style=dashed label="lambda-introducer"]
  932 -> 428 [style=dashed label="literal"]
  932 -> 95 [style=dashed label="literal-operator-id"]
  932 -> 431 [style=dashed label="multiplicative-expression"]
  932 -> 99 [style=dashed label="namespace-alias"]
  932 -> 102 [style=dashed label="namespace-name"]
  932 -> 432 [style=dashed label="nested-name-specifier"]
  932 -> 433 [style=dashed label="new-expression"]
  932 -> 434 [style=dashed label="noexcept-expression"]
  932 -> 435 [style=dashed label="nonzero-digit"]
  932 -> 436 [style=dashed label="octal-literal"]
  932 -> 108 [style=dashed label="operator-function-id"]
  932 -> 109 [style=dashed label="placeholder-type-specifier"]
  932 -> 437 [style=dashed label="pm-expression"]
  932 -> 438 [style=dashed label="pointer-literal"]
  932 -> 439 [style=dashed label="postfix-expression"]
  932 -> 440 [style=dashed label="primary-expression"]
  932 -> 112 [style=dashed label="qualified-id"]
  932 -> 442 [style=dashed label="requires-expression"]
  932 -> 114 [style=dashed label="simple-template-id"]
  932 -> 529 [style=dashed label="simple-type-specifier"]
  932 -> 445 [style=dashed label="string-literal"]
  932 -> 120 [style=dashed label="template-id"]
  932 -> 215 [style=dashed label="template-name"]
  932 -> 123 [style=dashed label="type-constraint"]
  932 -> 124 [style=dashed label="type-name"]
  932 -> 126 [style=dashed label="typedef-name"]
  932 -> 531 [style=dashed label="typename-specifier"]
  932 -> 449 [style=dashed label="unary-expression"]
  932 -> 450 [style=dashed label="unary-operator"]
  932 -> 129 [style=dashed label="unqualified-id"]
  932 -> 451 [style=dashed label="user-defined-character-literal"]
  932 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  932 -> 453 [style=dashed label="user-defined-integer-literal"]
  932 -> 454 [style=dashed label="user-defined-literal"]
  932 -> 455 [style=dashed label="user-defined-string-literal"]
  933 [label="State 933\n\l954 shift-expression: shift-expression RSHIFT • additive-expression\l"]
  933 -> 356 [style=solid label="PLUS"]
  933 -> 357 [style=solid label="MINUS"]
  933 -> 2 [style=solid label="IDENTIFIER"]
  933 -> 358 [style=solid label="OPEN_PAREN"]
  933 -> 359 [style=solid label="AND"]
  933 -> 360 [style=solid label="SCOPE"]
  933 -> 361 [style=solid label="OPEN_SQUARE"]
  933 -> 362 [style=solid label="CO_AWAIT"]
  933 -> 363 [style=solid label="ZERO_LB"]
  933 -> 364 [style=solid label="ZERO_HB"]
  933 -> 365 [style=solid label="SINGLE_QUOTE"]
  933 -> 366 [style=solid label="FALSE"]
  933 -> 367 [style=solid label="TRUE"]
  933 -> 368 [style=solid label="NOEXCEPT"]
  933 -> 17 [style=solid label="OPERATOR"]
  933 -> 26 [style=solid label="DECLTYPE"]
  933 -> 369 [style=solid label="DELETE"]
  933 -> 370 [style=solid label="DOT"]
  933 -> 184 [style=solid label="UNICODE_8"]
  933 -> 371 [style=solid label="MULT"]
  933 -> 199 [style=solid label="DOUBLE_QUOTE"]
  933 -> 372 [style=solid label="ZERO_LX"]
  933 -> 373 [style=solid label="ZERO_HX"]
  933 -> 374 [style=solid label="REQUIRES"]
  933 -> 375 [style=solid label="NEW"]
  933 -> 376 [style=solid label="COMPL"]
  933 -> 377 [style=solid label="NOT"]
  933 -> 378 [style=solid label="PLUS_PLUS"]
  933 -> 379 [style=solid label="MINUS_MINUS"]
  933 -> 380 [style=solid label="THIS"]
  933 -> 36 [style=solid label="AUTO"]
  933 -> 381 [style=solid label="NULLPTR"]
  933 -> 382 [style=solid label="DYNAMIC_CAST"]
  933 -> 383 [style=solid label="STATIC_CAST"]
  933 -> 384 [style=solid label="REINTERPRET_CAST"]
  933 -> 385 [style=solid label="CONST_CAST"]
  933 -> 386 [style=solid label="TYPEID"]
  933 -> 37 [style=solid label="CHAR"]
  933 -> 38 [style=solid label="CHAR8_T"]
  933 -> 39 [style=solid label="CHAR16_T"]
  933 -> 40 [style=solid label="CHAR32_T"]
  933 -> 41 [style=solid label="WCHAR_T"]
  933 -> 42 [style=solid label="BOOL"]
  933 -> 43 [style=solid label="SHORT"]
  933 -> 44 [style=solid label="INT"]
  933 -> 45 [style=solid label="LONG"]
  933 -> 46 [style=solid label="SIGNED"]
  933 -> 47 [style=solid label="UNSIGNED"]
  933 -> 48 [style=solid label="FLOAT"]
  933 -> 49 [style=solid label="DOUBLE"]
  933 -> 50 [style=solid label="VOID"]
  933 -> 55 [style=solid label="TYPENAME"]
  933 -> 387 [style=solid label="SIZEOF"]
  933 -> 388 [style=solid label="ALIGNOF"]
  933 -> 389 [style=solid label="'0'"]
  933 -> 390 [style=solid label="'1'"]
  933 -> 391 [style=solid label="'2'"]
  933 -> 392 [style=solid label="'3'"]
  933 -> 393 [style=solid label="'4'"]
  933 -> 394 [style=solid label="'5'"]
  933 -> 395 [style=solid label="'6'"]
  933 -> 396 [style=solid label="'7'"]
  933 -> 397 [style=solid label="'8'"]
  933 -> 398 [style=solid label="'9'"]
  933 -> 205 [style=solid label="'u'"]
  933 -> 206 [style=solid label="'U'"]
  933 -> 207 [style=solid label="'L'"]
  933 -> 208 [style=solid label="'R'"]
  933 -> 1389 [style=dashed label="additive-expression"]
  933 -> 401 [style=dashed label="await-expression"]
  933 -> 402 [style=dashed label="binary-literal"]
  933 -> 403 [style=dashed label="boolean-literal"]
  933 -> 404 [style=dashed label="cast-expression"]
  933 -> 405 [style=dashed label="character-literal"]
  933 -> 65 [style=dashed label="class-name"]
  933 -> 67 [style=dashed label="concept-name"]
  933 -> 68 [style=dashed label="conversion-function-id"]
  933 -> 409 [style=dashed label="decimal-floating-point-literal"]
  933 -> 410 [style=dashed label="decimal-literal"]
  933 -> 76 [style=dashed label="decltype-specifier"]
  933 -> 411 [style=dashed label="delete-expression"]
  933 -> 412 [style=dashed label="digit"]
  933 -> 413 [style=dashed label="digit-sequence"]
  933 -> 414 [style=dashed label="encoding-prefix"]
  933 -> 84 [style=dashed label="enum-name"]
  933 -> 417 [style=dashed label="floating-point-literal"]
  933 -> 418 [style=dashed label="fold-expression"]
  933 -> 419 [style=dashed label="fractional-constant"]
  933 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  933 -> 421 [style=dashed label="hexadecimal-literal"]
  933 -> 422 [style=dashed label="hexadecimal-prefix"]
  933 -> 423 [style=dashed label="id-expression"]
  933 -> 425 [style=dashed label="integer-literal"]
  933 -> 426 [style=dashed label="lambda-expression"]
  933 -> 427 [style=dashed label="lambda-introducer"]
  933 -> 428 [style=dashed label="literal"]
  933 -> 95 [style=dashed label="literal-operator-id"]
  933 -> 431 [style=dashed label="multiplicative-expression"]
  933 -> 99 [style=dashed label="namespace-alias"]
  933 -> 102 [style=dashed label="namespace-name"]
  933 -> 432 [style=dashed label="nested-name-specifier"]
  933 -> 433 [style=dashed label="new-expression"]
  933 -> 434 [style=dashed label="noexcept-expression"]
  933 -> 435 [style=dashed label="nonzero-digit"]
  933 -> 436 [style=dashed label="octal-literal"]
  933 -> 108 [style=dashed label="operator-function-id"]
  933 -> 109 [style=dashed label="placeholder-type-specifier"]
  933 -> 437 [style=dashed label="pm-expression"]
  933 -> 438 [style=dashed label="pointer-literal"]
  933 -> 439 [style=dashed label="postfix-expression"]
  933 -> 440 [style=dashed label="primary-expression"]
  933 -> 112 [style=dashed label="qualified-id"]
  933 -> 442 [style=dashed label="requires-expression"]
  933 -> 114 [style=dashed label="simple-template-id"]
  933 -> 529 [style=dashed label="simple-type-specifier"]
  933 -> 445 [style=dashed label="string-literal"]
  933 -> 120 [style=dashed label="template-id"]
  933 -> 215 [style=dashed label="template-name"]
  933 -> 123 [style=dashed label="type-constraint"]
  933 -> 124 [style=dashed label="type-name"]
  933 -> 126 [style=dashed label="typedef-name"]
  933 -> 531 [style=dashed label="typename-specifier"]
  933 -> 449 [style=dashed label="unary-expression"]
  933 -> 450 [style=dashed label="unary-operator"]
  933 -> 129 [style=dashed label="unqualified-id"]
  933 -> 451 [style=dashed label="user-defined-character-literal"]
  933 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  933 -> 453 [style=dashed label="user-defined-integer-literal"]
  933 -> 454 [style=dashed label="user-defined-literal"]
  933 -> 455 [style=dashed label="user-defined-string-literal"]
  934 [label="State 934\n\l861 postfix-expression: simple-type-specifier OPEN_PAREN • CLOSE_PAREN\l862                   | simple-type-specifier OPEN_PAREN • expression-list CLOSE_PAREN\l"]
  934 -> 356 [style=solid label="PLUS"]
  934 -> 357 [style=solid label="MINUS"]
  934 -> 2 [style=solid label="IDENTIFIER"]
  934 -> 358 [style=solid label="OPEN_PAREN"]
  934 -> 1390 [style=solid label="CLOSE_PAREN"]
  934 -> 359 [style=solid label="AND"]
  934 -> 360 [style=solid label="SCOPE"]
  934 -> 361 [style=solid label="OPEN_SQUARE"]
  934 -> 362 [style=solid label="CO_AWAIT"]
  934 -> 935 [style=solid label="OPEN_BRACE"]
  934 -> 363 [style=solid label="ZERO_LB"]
  934 -> 364 [style=solid label="ZERO_HB"]
  934 -> 365 [style=solid label="SINGLE_QUOTE"]
  934 -> 366 [style=solid label="FALSE"]
  934 -> 367 [style=solid label="TRUE"]
  934 -> 368 [style=solid label="NOEXCEPT"]
  934 -> 17 [style=solid label="OPERATOR"]
  934 -> 26 [style=solid label="DECLTYPE"]
  934 -> 369 [style=solid label="DELETE"]
  934 -> 370 [style=solid label="DOT"]
  934 -> 184 [style=solid label="UNICODE_8"]
  934 -> 371 [style=solid label="MULT"]
  934 -> 199 [style=solid label="DOUBLE_QUOTE"]
  934 -> 372 [style=solid label="ZERO_LX"]
  934 -> 373 [style=solid label="ZERO_HX"]
  934 -> 374 [style=solid label="REQUIRES"]
  934 -> 375 [style=solid label="NEW"]
  934 -> 376 [style=solid label="COMPL"]
  934 -> 377 [style=solid label="NOT"]
  934 -> 378 [style=solid label="PLUS_PLUS"]
  934 -> 379 [style=solid label="MINUS_MINUS"]
  934 -> 380 [style=solid label="THIS"]
  934 -> 36 [style=solid label="AUTO"]
  934 -> 381 [style=solid label="NULLPTR"]
  934 -> 382 [style=solid label="DYNAMIC_CAST"]
  934 -> 383 [style=solid label="STATIC_CAST"]
  934 -> 384 [style=solid label="REINTERPRET_CAST"]
  934 -> 385 [style=solid label="CONST_CAST"]
  934 -> 386 [style=solid label="TYPEID"]
  934 -> 37 [style=solid label="CHAR"]
  934 -> 38 [style=solid label="CHAR8_T"]
  934 -> 39 [style=solid label="CHAR16_T"]
  934 -> 40 [style=solid label="CHAR32_T"]
  934 -> 41 [style=solid label="WCHAR_T"]
  934 -> 42 [style=solid label="BOOL"]
  934 -> 43 [style=solid label="SHORT"]
  934 -> 44 [style=solid label="INT"]
  934 -> 45 [style=solid label="LONG"]
  934 -> 46 [style=solid label="SIGNED"]
  934 -> 47 [style=solid label="UNSIGNED"]
  934 -> 48 [style=solid label="FLOAT"]
  934 -> 49 [style=solid label="DOUBLE"]
  934 -> 50 [style=solid label="VOID"]
  934 -> 523 [style=solid label="THROW"]
  934 -> 55 [style=solid label="TYPENAME"]
  934 -> 387 [style=solid label="SIZEOF"]
  934 -> 388 [style=solid label="ALIGNOF"]
  934 -> 524 [style=solid label="CO_YIELD"]
  934 -> 389 [style=solid label="'0'"]
  934 -> 390 [style=solid label="'1'"]
  934 -> 391 [style=solid label="'2'"]
  934 -> 392 [style=solid label="'3'"]
  934 -> 393 [style=solid label="'4'"]
  934 -> 394 [style=solid label="'5'"]
  934 -> 395 [style=solid label="'6'"]
  934 -> 396 [style=solid label="'7'"]
  934 -> 397 [style=solid label="'8'"]
  934 -> 398 [style=solid label="'9'"]
  934 -> 205 [style=solid label="'u'"]
  934 -> 206 [style=solid label="'U'"]
  934 -> 207 [style=solid label="'L'"]
  934 -> 208 [style=solid label="'R'"]
  934 -> 399 [style=dashed label="additive-expression"]
  934 -> 400 [style=dashed label="and-expression"]
  934 -> 1134 [style=dashed label="assignment-expression"]
  934 -> 401 [style=dashed label="await-expression"]
  934 -> 402 [style=dashed label="binary-literal"]
  934 -> 403 [style=dashed label="boolean-literal"]
  934 -> 1135 [style=dashed label="braced-init-list"]
  934 -> 404 [style=dashed label="cast-expression"]
  934 -> 405 [style=dashed label="character-literal"]
  934 -> 65 [style=dashed label="class-name"]
  934 -> 406 [style=dashed label="compare-expression"]
  934 -> 67 [style=dashed label="concept-name"]
  934 -> 526 [style=dashed label="conditional-expression"]
  934 -> 68 [style=dashed label="conversion-function-id"]
  934 -> 409 [style=dashed label="decimal-floating-point-literal"]
  934 -> 410 [style=dashed label="decimal-literal"]
  934 -> 76 [style=dashed label="decltype-specifier"]
  934 -> 411 [style=dashed label="delete-expression"]
  934 -> 412 [style=dashed label="digit"]
  934 -> 413 [style=dashed label="digit-sequence"]
  934 -> 414 [style=dashed label="encoding-prefix"]
  934 -> 84 [style=dashed label="enum-name"]
  934 -> 415 [style=dashed label="equality-expression"]
  934 -> 416 [style=dashed label="exclusive-or-expression"]
  934 -> 1391 [style=dashed label="expression-list"]
  934 -> 417 [style=dashed label="floating-point-literal"]
  934 -> 418 [style=dashed label="fold-expression"]
  934 -> 419 [style=dashed label="fractional-constant"]
  934 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  934 -> 421 [style=dashed label="hexadecimal-literal"]
  934 -> 422 [style=dashed label="hexadecimal-prefix"]
  934 -> 423 [style=dashed label="id-expression"]
  934 -> 424 [style=dashed label="inclusive-or-expression"]
  934 -> 1138 [style=dashed label="initializer-clause"]
  934 -> 1139 [style=dashed label="initializer-list"]
  934 -> 425 [style=dashed label="integer-literal"]
  934 -> 426 [style=dashed label="lambda-expression"]
  934 -> 427 [style=dashed label="lambda-introducer"]
  934 -> 428 [style=dashed label="literal"]
  934 -> 95 [style=dashed label="literal-operator-id"]
  934 -> 429 [style=dashed label="logical-and-expression"]
  934 -> 528 [style=dashed label="logical-or-expression"]
  934 -> 431 [style=dashed label="multiplicative-expression"]
  934 -> 99 [style=dashed label="namespace-alias"]
  934 -> 102 [style=dashed label="namespace-name"]
  934 -> 432 [style=dashed label="nested-name-specifier"]
  934 -> 433 [style=dashed label="new-expression"]
  934 -> 434 [style=dashed label="noexcept-expression"]
  934 -> 435 [style=dashed label="nonzero-digit"]
  934 -> 436 [style=dashed label="octal-literal"]
  934 -> 108 [style=dashed label="operator-function-id"]
  934 -> 109 [style=dashed label="placeholder-type-specifier"]
  934 -> 437 [style=dashed label="pm-expression"]
  934 -> 438 [style=dashed label="pointer-literal"]
  934 -> 439 [style=dashed label="postfix-expression"]
  934 -> 440 [style=dashed label="primary-expression"]
  934 -> 112 [style=dashed label="qualified-id"]
  934 -> 441 [style=dashed label="relational-expression"]
  934 -> 442 [style=dashed label="requires-expression"]
  934 -> 443 [style=dashed label="shift-expression"]
  934 -> 114 [style=dashed label="simple-template-id"]
  934 -> 529 [style=dashed label="simple-type-specifier"]
  934 -> 445 [style=dashed label="string-literal"]
  934 -> 120 [style=dashed label="template-id"]
  934 -> 215 [style=dashed label="template-name"]
  934 -> 530 [style=dashed label="throw-expression"]
  934 -> 123 [style=dashed label="type-constraint"]
  934 -> 124 [style=dashed label="type-name"]
  934 -> 126 [style=dashed label="typedef-name"]
  934 -> 531 [style=dashed label="typename-specifier"]
  934 -> 449 [style=dashed label="unary-expression"]
  934 -> 450 [style=dashed label="unary-operator"]
  934 -> 129 [style=dashed label="unqualified-id"]
  934 -> 451 [style=dashed label="user-defined-character-literal"]
  934 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  934 -> 453 [style=dashed label="user-defined-integer-literal"]
  934 -> 454 [style=dashed label="user-defined-literal"]
  934 -> 455 [style=dashed label="user-defined-string-literal"]
  934 -> 532 [style=dashed label="yield-expression"]
  935 [label="State 935\n\l108 braced-init-list: OPEN_BRACE • initializer-list CLOSE_BRACE\l109                 | OPEN_BRACE • initializer-list COMMA CLOSE_BRACE\l110                 | OPEN_BRACE • designated-initializer-list CLOSE_BRACE\l111                 | OPEN_BRACE • designated-initializer-list COMMA CLOSE_BRACE\l112                 | OPEN_BRACE • CLOSE_BRACE\l"]
  935 -> 356 [style=solid label="PLUS"]
  935 -> 357 [style=solid label="MINUS"]
  935 -> 2 [style=solid label="IDENTIFIER"]
  935 -> 358 [style=solid label="OPEN_PAREN"]
  935 -> 359 [style=solid label="AND"]
  935 -> 360 [style=solid label="SCOPE"]
  935 -> 361 [style=solid label="OPEN_SQUARE"]
  935 -> 362 [style=solid label="CO_AWAIT"]
  935 -> 935 [style=solid label="OPEN_BRACE"]
  935 -> 1392 [style=solid label="CLOSE_BRACE"]
  935 -> 363 [style=solid label="ZERO_LB"]
  935 -> 364 [style=solid label="ZERO_HB"]
  935 -> 365 [style=solid label="SINGLE_QUOTE"]
  935 -> 366 [style=solid label="FALSE"]
  935 -> 367 [style=solid label="TRUE"]
  935 -> 368 [style=solid label="NOEXCEPT"]
  935 -> 17 [style=solid label="OPERATOR"]
  935 -> 26 [style=solid label="DECLTYPE"]
  935 -> 369 [style=solid label="DELETE"]
  935 -> 1141 [style=solid label="DOT"]
  935 -> 184 [style=solid label="UNICODE_8"]
  935 -> 371 [style=solid label="MULT"]
  935 -> 199 [style=solid label="DOUBLE_QUOTE"]
  935 -> 372 [style=solid label="ZERO_LX"]
  935 -> 373 [style=solid label="ZERO_HX"]
  935 -> 374 [style=solid label="REQUIRES"]
  935 -> 375 [style=solid label="NEW"]
  935 -> 376 [style=solid label="COMPL"]
  935 -> 377 [style=solid label="NOT"]
  935 -> 378 [style=solid label="PLUS_PLUS"]
  935 -> 379 [style=solid label="MINUS_MINUS"]
  935 -> 380 [style=solid label="THIS"]
  935 -> 36 [style=solid label="AUTO"]
  935 -> 381 [style=solid label="NULLPTR"]
  935 -> 382 [style=solid label="DYNAMIC_CAST"]
  935 -> 383 [style=solid label="STATIC_CAST"]
  935 -> 384 [style=solid label="REINTERPRET_CAST"]
  935 -> 385 [style=solid label="CONST_CAST"]
  935 -> 386 [style=solid label="TYPEID"]
  935 -> 37 [style=solid label="CHAR"]
  935 -> 38 [style=solid label="CHAR8_T"]
  935 -> 39 [style=solid label="CHAR16_T"]
  935 -> 40 [style=solid label="CHAR32_T"]
  935 -> 41 [style=solid label="WCHAR_T"]
  935 -> 42 [style=solid label="BOOL"]
  935 -> 43 [style=solid label="SHORT"]
  935 -> 44 [style=solid label="INT"]
  935 -> 45 [style=solid label="LONG"]
  935 -> 46 [style=solid label="SIGNED"]
  935 -> 47 [style=solid label="UNSIGNED"]
  935 -> 48 [style=solid label="FLOAT"]
  935 -> 49 [style=solid label="DOUBLE"]
  935 -> 50 [style=solid label="VOID"]
  935 -> 523 [style=solid label="THROW"]
  935 -> 55 [style=solid label="TYPENAME"]
  935 -> 387 [style=solid label="SIZEOF"]
  935 -> 388 [style=solid label="ALIGNOF"]
  935 -> 524 [style=solid label="CO_YIELD"]
  935 -> 389 [style=solid label="'0'"]
  935 -> 390 [style=solid label="'1'"]
  935 -> 391 [style=solid label="'2'"]
  935 -> 392 [style=solid label="'3'"]
  935 -> 393 [style=solid label="'4'"]
  935 -> 394 [style=solid label="'5'"]
  935 -> 395 [style=solid label="'6'"]
  935 -> 396 [style=solid label="'7'"]
  935 -> 397 [style=solid label="'8'"]
  935 -> 398 [style=solid label="'9'"]
  935 -> 205 [style=solid label="'u'"]
  935 -> 206 [style=solid label="'U'"]
  935 -> 207 [style=solid label="'L'"]
  935 -> 208 [style=solid label="'R'"]
  935 -> 399 [style=dashed label="additive-expression"]
  935 -> 400 [style=dashed label="and-expression"]
  935 -> 1134 [style=dashed label="assignment-expression"]
  935 -> 401 [style=dashed label="await-expression"]
  935 -> 402 [style=dashed label="binary-literal"]
  935 -> 403 [style=dashed label="boolean-literal"]
  935 -> 1135 [style=dashed label="braced-init-list"]
  935 -> 404 [style=dashed label="cast-expression"]
  935 -> 405 [style=dashed label="character-literal"]
  935 -> 65 [style=dashed label="class-name"]
  935 -> 406 [style=dashed label="compare-expression"]
  935 -> 67 [style=dashed label="concept-name"]
  935 -> 526 [style=dashed label="conditional-expression"]
  935 -> 68 [style=dashed label="conversion-function-id"]
  935 -> 409 [style=dashed label="decimal-floating-point-literal"]
  935 -> 410 [style=dashed label="decimal-literal"]
  935 -> 76 [style=dashed label="decltype-specifier"]
  935 -> 411 [style=dashed label="delete-expression"]
  935 -> 1143 [style=dashed label="designated-initializer-clause"]
  935 -> 1144 [style=dashed label="designated-initializer-list"]
  935 -> 1145 [style=dashed label="designator"]
  935 -> 412 [style=dashed label="digit"]
  935 -> 413 [style=dashed label="digit-sequence"]
  935 -> 414 [style=dashed label="encoding-prefix"]
  935 -> 84 [style=dashed label="enum-name"]
  935 -> 415 [style=dashed label="equality-expression"]
  935 -> 416 [style=dashed label="exclusive-or-expression"]
  935 -> 417 [style=dashed label="floating-point-literal"]
  935 -> 418 [style=dashed label="fold-expression"]
  935 -> 419 [style=dashed label="fractional-constant"]
  935 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  935 -> 421 [style=dashed label="hexadecimal-literal"]
  935 -> 422 [style=dashed label="hexadecimal-prefix"]
  935 -> 423 [style=dashed label="id-expression"]
  935 -> 424 [style=dashed label="inclusive-or-expression"]
  935 -> 1138 [style=dashed label="initializer-clause"]
  935 -> 1146 [style=dashed label="initializer-list"]
  935 -> 425 [style=dashed label="integer-literal"]
  935 -> 426 [style=dashed label="lambda-expression"]
  935 -> 427 [style=dashed label="lambda-introducer"]
  935 -> 428 [style=dashed label="literal"]
  935 -> 95 [style=dashed label="literal-operator-id"]
  935 -> 429 [style=dashed label="logical-and-expression"]
  935 -> 528 [style=dashed label="logical-or-expression"]
  935 -> 431 [style=dashed label="multiplicative-expression"]
  935 -> 99 [style=dashed label="namespace-alias"]
  935 -> 102 [style=dashed label="namespace-name"]
  935 -> 432 [style=dashed label="nested-name-specifier"]
  935 -> 433 [style=dashed label="new-expression"]
  935 -> 434 [style=dashed label="noexcept-expression"]
  935 -> 435 [style=dashed label="nonzero-digit"]
  935 -> 436 [style=dashed label="octal-literal"]
  935 -> 108 [style=dashed label="operator-function-id"]
  935 -> 109 [style=dashed label="placeholder-type-specifier"]
  935 -> 437 [style=dashed label="pm-expression"]
  935 -> 438 [style=dashed label="pointer-literal"]
  935 -> 439 [style=dashed label="postfix-expression"]
  935 -> 440 [style=dashed label="primary-expression"]
  935 -> 112 [style=dashed label="qualified-id"]
  935 -> 441 [style=dashed label="relational-expression"]
  935 -> 442 [style=dashed label="requires-expression"]
  935 -> 443 [style=dashed label="shift-expression"]
  935 -> 114 [style=dashed label="simple-template-id"]
  935 -> 529 [style=dashed label="simple-type-specifier"]
  935 -> 445 [style=dashed label="string-literal"]
  935 -> 120 [style=dashed label="template-id"]
  935 -> 215 [style=dashed label="template-name"]
  935 -> 530 [style=dashed label="throw-expression"]
  935 -> 123 [style=dashed label="type-constraint"]
  935 -> 124 [style=dashed label="type-name"]
  935 -> 126 [style=dashed label="typedef-name"]
  935 -> 531 [style=dashed label="typename-specifier"]
  935 -> 449 [style=dashed label="unary-expression"]
  935 -> 450 [style=dashed label="unary-operator"]
  935 -> 129 [style=dashed label="unqualified-id"]
  935 -> 451 [style=dashed label="user-defined-character-literal"]
  935 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  935 -> 453 [style=dashed label="user-defined-integer-literal"]
  935 -> 454 [style=dashed label="user-defined-literal"]
  935 -> 455 [style=dashed label="user-defined-string-literal"]
  935 -> 532 [style=dashed label="yield-expression"]
  936 [label="State 936\n\l865 postfix-expression: simple-type-specifier braced-init-list •\l"]
  936 -> "936R865" [style=solid]
 "936R865" [label="R865", fillcolor=3, shape=diamond, style=filled]
  937 [label="State 937\n\l 15 alignment-specifier: ALIGNAS OPEN_PAREN type-id CLOSE_PAREN •\l"]
  937 -> "937R15" [style=solid]
 "937R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  938 [label="State 938\n\l 16 alignment-specifier: ALIGNAS OPEN_PAREN type-id ELLIPSIS • CLOSE_PAREN\l"]
  938 -> 1393 [style=solid label="CLOSE_PAREN"]
  939 [label="State 939\n\l714 noptr-abstract-declarator: OPEN_PAREN • ptr-abstract-declarator CLOSE_PAREN\l832 parameters-and-qualifiers: OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN\l833                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq\l834                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN ref-qualifier\l835                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier\l836                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN noexcept-specifier\l837                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq noexcept-specifier\l838                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN ref-qualifier noexcept-specifier\l839                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier noexcept-specifier\l840                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN attribute-specifier-seq\l841                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq attribute-specifier-seq\l842                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN ref-qualifier attribute-specifier-seq\l843                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier attribute-specifier-seq\l844                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN noexcept-specifier attribute-specifier-seq\l845                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq noexcept-specifier attribute-specifier-seq\l846                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN ref-qualifier noexcept-specifier attribute-specifier-seq\l847                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq\l"]
  939 -> 162 [style=solid label="IDENTIFIER"]
  939 -> 4 [style=solid label="ALIGNAS"]
  939 -> 939 [style=solid label="OPEN_PAREN"]
  939 -> 730 [style=solid label="ELLIPSIS"]
  939 -> 7 [style=solid label="AND"]
  939 -> 9 [style=solid label="SCOPE"]
  939 -> 1394 [style=solid label="OPEN_SQUARE"]
  939 -> 11 [style=solid label="VIRTUAL"]
  939 -> 12 [style=solid label="CLASS"]
  939 -> 13 [style=solid label="STRUCT"]
  939 -> 14 [style=solid label="UNION"]
  939 -> 16 [style=solid label="AND_AND"]
  939 -> 18 [style=solid label="CONST"]
  939 -> 19 [style=solid label="VOLATILE"]
  939 -> 20 [style=solid label="FRIEND"]
  939 -> 21 [style=solid label="TYPEDEF"]
  939 -> 22 [style=solid label="CONSTEXPR"]
  939 -> 23 [style=solid label="CONSTEVAL"]
  939 -> 24 [style=solid label="CONSTINIT"]
  939 -> 258 [style=solid label="INLINE"]
  939 -> 26 [style=solid label="DECLTYPE"]
  939 -> 27 [style=solid label="ENUM"]
  939 -> 259 [style=solid label="EXTERN"]
  939 -> 29 [style=solid label="EXPLICIT"]
  939 -> 31 [style=solid label="MULT"]
  939 -> 471 [style=solid label="THIS"]
  939 -> 36 [style=solid label="AUTO"]
  939 -> 37 [style=solid label="CHAR"]
  939 -> 38 [style=solid label="CHAR8_T"]
  939 -> 39 [style=solid label="CHAR16_T"]
  939 -> 40 [style=solid label="CHAR32_T"]
  939 -> 41 [style=solid label="WCHAR_T"]
  939 -> 42 [style=solid label="BOOL"]
  939 -> 43 [style=solid label="SHORT"]
  939 -> 44 [style=solid label="INT"]
  939 -> 45 [style=solid label="LONG"]
  939 -> 46 [style=solid label="SIGNED"]
  939 -> 47 [style=solid label="UNSIGNED"]
  939 -> 48 [style=solid label="FLOAT"]
  939 -> 49 [style=solid label="DOUBLE"]
  939 -> 50 [style=solid label="VOID"]
  939 -> 52 [style=solid label="STATIC"]
  939 -> 53 [style=solid label="THREAD_LOCAL"]
  939 -> 54 [style=solid label="MUTABLE"]
  939 -> 55 [style=solid label="TYPENAME"]
  939 -> 57 [style=dashed label="alignment-specifier"]
  939 -> 60 [style=dashed label="attribute-specifier"]
  939 -> 473 [style=dashed label="attribute-specifier-seq"]
  939 -> 63 [style=dashed label="class-head"]
  939 -> 64 [style=dashed label="class-key"]
  939 -> 65 [style=dashed label="class-name"]
  939 -> 66 [style=dashed label="class-specifier"]
  939 -> 67 [style=dashed label="concept-name"]
  939 -> 69 [style=dashed label="cv-qualifier"]
  939 -> 70 [style=dashed label="decl-specifier"]
  939 -> 474 [style=dashed label="decl-specifier-seq"]
  939 -> 76 [style=dashed label="decltype-specifier"]
  939 -> 78 [style=dashed label="defining-type-specifier"]
  939 -> 79 [style=dashed label="elaborated-enum-specifier"]
  939 -> 80 [style=dashed label="elaborated-type-specifier"]
  939 -> 82 [style=dashed label="enum-head"]
  939 -> 263 [style=dashed label="enum-key"]
  939 -> 84 [style=dashed label="enum-name"]
  939 -> 85 [style=dashed label="enum-specifier"]
  939 -> 264 [style=dashed label="explicit-specifier"]
  939 -> 91 [style=dashed label="function-specifier"]
  939 -> 99 [style=dashed label="namespace-alias"]
  939 -> 102 [style=dashed label="namespace-name"]
  939 -> 1395 [style=dashed label="nested-name-specifier"]
  939 -> 1396 [style=dashed label="noptr-abstract-declarator"]
  939 -> 731 [style=dashed label="parameter-declaration"]
  939 -> 732 [style=dashed label="parameter-declaration-clause"]
  939 -> 733 [style=dashed label="parameter-declaration-list"]
  939 -> 1397 [style=dashed label="parameters-and-qualifiers"]
  939 -> 109 [style=dashed label="placeholder-type-specifier"]
  939 -> 1398 [style=dashed label="ptr-abstract-declarator"]
  939 -> 1399 [style=dashed label="ptr-operator"]
  939 -> 141 [style=dashed label="simple-template-id"]
  939 -> 115 [style=dashed label="simple-type-specifier"]
  939 -> 117 [style=dashed label="storage-class-specifier"]
  939 -> 215 [style=dashed label="template-name"]
  939 -> 123 [style=dashed label="type-constraint"]
  939 -> 124 [style=dashed label="type-name"]
  939 -> 125 [style=dashed label="type-specifier"]
  939 -> 126 [style=dashed label="typedef-name"]
  939 -> 127 [style=dashed label="typename-specifier"]
  940 [label="State 940\n\l720 noptr-abstract-pack-declarator: ELLIPSIS •\l"]
  940 -> "940R720" [style=solid]
 "940R720" [label="R720", fillcolor=3, shape=diamond, style=filled]
  941 [label="State 941\n\l707 noptr-abstract-declarator: OPEN_SQUARE • CLOSE_SQUARE\l709                          | OPEN_SQUARE • constant-expression CLOSE_SQUARE\l711                          | OPEN_SQUARE • CLOSE_SQUARE attribute-specifier-seq\l713                          | OPEN_SQUARE • constant-expression CLOSE_SQUARE attribute-specifier-seq\l"]
  941 -> 356 [style=solid label="PLUS"]
  941 -> 357 [style=solid label="MINUS"]
  941 -> 2 [style=solid label="IDENTIFIER"]
  941 -> 358 [style=solid label="OPEN_PAREN"]
  941 -> 359 [style=solid label="AND"]
  941 -> 360 [style=solid label="SCOPE"]
  941 -> 361 [style=solid label="OPEN_SQUARE"]
  941 -> 1400 [style=solid label="CLOSE_SQUARE"]
  941 -> 362 [style=solid label="CO_AWAIT"]
  941 -> 363 [style=solid label="ZERO_LB"]
  941 -> 364 [style=solid label="ZERO_HB"]
  941 -> 365 [style=solid label="SINGLE_QUOTE"]
  941 -> 366 [style=solid label="FALSE"]
  941 -> 367 [style=solid label="TRUE"]
  941 -> 368 [style=solid label="NOEXCEPT"]
  941 -> 17 [style=solid label="OPERATOR"]
  941 -> 26 [style=solid label="DECLTYPE"]
  941 -> 369 [style=solid label="DELETE"]
  941 -> 370 [style=solid label="DOT"]
  941 -> 184 [style=solid label="UNICODE_8"]
  941 -> 371 [style=solid label="MULT"]
  941 -> 199 [style=solid label="DOUBLE_QUOTE"]
  941 -> 372 [style=solid label="ZERO_LX"]
  941 -> 373 [style=solid label="ZERO_HX"]
  941 -> 374 [style=solid label="REQUIRES"]
  941 -> 375 [style=solid label="NEW"]
  941 -> 376 [style=solid label="COMPL"]
  941 -> 377 [style=solid label="NOT"]
  941 -> 378 [style=solid label="PLUS_PLUS"]
  941 -> 379 [style=solid label="MINUS_MINUS"]
  941 -> 380 [style=solid label="THIS"]
  941 -> 36 [style=solid label="AUTO"]
  941 -> 381 [style=solid label="NULLPTR"]
  941 -> 382 [style=solid label="DYNAMIC_CAST"]
  941 -> 383 [style=solid label="STATIC_CAST"]
  941 -> 384 [style=solid label="REINTERPRET_CAST"]
  941 -> 385 [style=solid label="CONST_CAST"]
  941 -> 386 [style=solid label="TYPEID"]
  941 -> 37 [style=solid label="CHAR"]
  941 -> 38 [style=solid label="CHAR8_T"]
  941 -> 39 [style=solid label="CHAR16_T"]
  941 -> 40 [style=solid label="CHAR32_T"]
  941 -> 41 [style=solid label="WCHAR_T"]
  941 -> 42 [style=solid label="BOOL"]
  941 -> 43 [style=solid label="SHORT"]
  941 -> 44 [style=solid label="INT"]
  941 -> 45 [style=solid label="LONG"]
  941 -> 46 [style=solid label="SIGNED"]
  941 -> 47 [style=solid label="UNSIGNED"]
  941 -> 48 [style=solid label="FLOAT"]
  941 -> 49 [style=solid label="DOUBLE"]
  941 -> 50 [style=solid label="VOID"]
  941 -> 55 [style=solid label="TYPENAME"]
  941 -> 387 [style=solid label="SIZEOF"]
  941 -> 388 [style=solid label="ALIGNOF"]
  941 -> 389 [style=solid label="'0'"]
  941 -> 390 [style=solid label="'1'"]
  941 -> 391 [style=solid label="'2'"]
  941 -> 392 [style=solid label="'3'"]
  941 -> 393 [style=solid label="'4'"]
  941 -> 394 [style=solid label="'5'"]
  941 -> 395 [style=solid label="'6'"]
  941 -> 396 [style=solid label="'7'"]
  941 -> 397 [style=solid label="'8'"]
  941 -> 398 [style=solid label="'9'"]
  941 -> 205 [style=solid label="'u'"]
  941 -> 206 [style=solid label="'U'"]
  941 -> 207 [style=solid label="'L'"]
  941 -> 208 [style=solid label="'R'"]
  941 -> 399 [style=dashed label="additive-expression"]
  941 -> 400 [style=dashed label="and-expression"]
  941 -> 401 [style=dashed label="await-expression"]
  941 -> 402 [style=dashed label="binary-literal"]
  941 -> 403 [style=dashed label="boolean-literal"]
  941 -> 404 [style=dashed label="cast-expression"]
  941 -> 405 [style=dashed label="character-literal"]
  941 -> 65 [style=dashed label="class-name"]
  941 -> 406 [style=dashed label="compare-expression"]
  941 -> 67 [style=dashed label="concept-name"]
  941 -> 407 [style=dashed label="conditional-expression"]
  941 -> 1401 [style=dashed label="constant-expression"]
  941 -> 68 [style=dashed label="conversion-function-id"]
  941 -> 409 [style=dashed label="decimal-floating-point-literal"]
  941 -> 410 [style=dashed label="decimal-literal"]
  941 -> 76 [style=dashed label="decltype-specifier"]
  941 -> 411 [style=dashed label="delete-expression"]
  941 -> 412 [style=dashed label="digit"]
  941 -> 413 [style=dashed label="digit-sequence"]
  941 -> 414 [style=dashed label="encoding-prefix"]
  941 -> 84 [style=dashed label="enum-name"]
  941 -> 415 [style=dashed label="equality-expression"]
  941 -> 416 [style=dashed label="exclusive-or-expression"]
  941 -> 417 [style=dashed label="floating-point-literal"]
  941 -> 418 [style=dashed label="fold-expression"]
  941 -> 419 [style=dashed label="fractional-constant"]
  941 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  941 -> 421 [style=dashed label="hexadecimal-literal"]
  941 -> 422 [style=dashed label="hexadecimal-prefix"]
  941 -> 423 [style=dashed label="id-expression"]
  941 -> 424 [style=dashed label="inclusive-or-expression"]
  941 -> 425 [style=dashed label="integer-literal"]
  941 -> 426 [style=dashed label="lambda-expression"]
  941 -> 427 [style=dashed label="lambda-introducer"]
  941 -> 428 [style=dashed label="literal"]
  941 -> 95 [style=dashed label="literal-operator-id"]
  941 -> 429 [style=dashed label="logical-and-expression"]
  941 -> 430 [style=dashed label="logical-or-expression"]
  941 -> 431 [style=dashed label="multiplicative-expression"]
  941 -> 99 [style=dashed label="namespace-alias"]
  941 -> 102 [style=dashed label="namespace-name"]
  941 -> 432 [style=dashed label="nested-name-specifier"]
  941 -> 433 [style=dashed label="new-expression"]
  941 -> 434 [style=dashed label="noexcept-expression"]
  941 -> 435 [style=dashed label="nonzero-digit"]
  941 -> 436 [style=dashed label="octal-literal"]
  941 -> 108 [style=dashed label="operator-function-id"]
  941 -> 109 [style=dashed label="placeholder-type-specifier"]
  941 -> 437 [style=dashed label="pm-expression"]
  941 -> 438 [style=dashed label="pointer-literal"]
  941 -> 439 [style=dashed label="postfix-expression"]
  941 -> 440 [style=dashed label="primary-expression"]
  941 -> 112 [style=dashed label="qualified-id"]
  941 -> 441 [style=dashed label="relational-expression"]
  941 -> 442 [style=dashed label="requires-expression"]
  941 -> 443 [style=dashed label="shift-expression"]
  941 -> 114 [style=dashed label="simple-template-id"]
  941 -> 529 [style=dashed label="simple-type-specifier"]
  941 -> 445 [style=dashed label="string-literal"]
  941 -> 120 [style=dashed label="template-id"]
  941 -> 215 [style=dashed label="template-name"]
  941 -> 123 [style=dashed label="type-constraint"]
  941 -> 124 [style=dashed label="type-name"]
  941 -> 126 [style=dashed label="typedef-name"]
  941 -> 531 [style=dashed label="typename-specifier"]
  941 -> 449 [style=dashed label="unary-expression"]
  941 -> 450 [style=dashed label="unary-operator"]
  941 -> 129 [style=dashed label="unqualified-id"]
  941 -> 451 [style=dashed label="user-defined-character-literal"]
  941 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  941 -> 453 [style=dashed label="user-defined-integer-literal"]
  941 -> 454 [style=dashed label="user-defined-literal"]
  941 -> 455 [style=dashed label="user-defined-string-literal"]
  942 [label="State 942\n\l1077 type-id: type-specifier-seq abstract-declarator •\l"]
  942 -> "942R1077" [style=solid]
 "942R1077" [label="R1077", fillcolor=3, shape=diamond, style=filled]
  943 [label="State 943\n\l  4 abstract-declarator: abstract-pack-declarator •\l"]
  943 -> "943R4" [style=solid]
 "943R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  944 [label="State 944\n\l  2 abstract-declarator: noptr-abstract-declarator • parameters-and-qualifiers trailing-return-type\l704 noptr-abstract-declarator: noptr-abstract-declarator • parameters-and-qualifiers\l706                          | noptr-abstract-declarator • OPEN_SQUARE CLOSE_SQUARE\l708                          | noptr-abstract-declarator • OPEN_SQUARE constant-expression CLOSE_SQUARE\l710                          | noptr-abstract-declarator • OPEN_SQUARE CLOSE_SQUARE attribute-specifier-seq\l712                          | noptr-abstract-declarator • OPEN_SQUARE constant-expression CLOSE_SQUARE attribute-specifier-seq\l888 ptr-abstract-declarator: noptr-abstract-declarator •\l"]
  944 -> 328 [style=solid label="OPEN_PAREN"]
  944 -> 1402 [style=solid label="OPEN_SQUARE"]
  944 -> 1403 [style=dashed label="parameters-and-qualifiers"]
  944 -> "944R888d" [label="[OPEN_PAREN]", style=solid]
 "944R888d" [label="R888", fillcolor=5, shape=diamond, style=filled]
  944 -> "944R888" [style=solid]
 "944R888" [label="R888", fillcolor=3, shape=diamond, style=filled]
  945 [label="State 945\n\l  5 abstract-pack-declarator: noptr-abstract-pack-declarator •\l715 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator • parameters-and-qualifiers\l716                               | noptr-abstract-pack-declarator • OPEN_SQUARE CLOSE_SQUARE\l717                               | noptr-abstract-pack-declarator • OPEN_SQUARE constant-expression CLOSE_SQUARE\l718                               | noptr-abstract-pack-declarator • OPEN_SQUARE CLOSE_SQUARE attribute-specifier-seq\l719                               | noptr-abstract-pack-declarator • OPEN_SQUARE constant-expression CLOSE_SQUARE attribute-specifier-seq\l"]
  945 -> 328 [style=solid label="OPEN_PAREN"]
  945 -> 1404 [style=solid label="OPEN_SQUARE"]
  945 -> 1405 [style=dashed label="parameters-and-qualifiers"]
  945 -> "945R5d" [label="[OPEN_PAREN]", style=solid]
 "945R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  945 -> "945R5" [style=solid]
 "945R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  946 [label="State 946\n\l  3 abstract-declarator: parameters-and-qualifiers • trailing-return-type\l705 noptr-abstract-declarator: parameters-and-qualifiers •\l"]
  946 -> 736 [style=solid label="DEREF"]
  946 -> 1406 [style=dashed label="trailing-return-type"]
  946 -> "946R705" [style=solid]
 "946R705" [label="R705", fillcolor=3, shape=diamond, style=filled]
  947 [label="State 947\n\l  1 abstract-declarator: ptr-abstract-declarator •\l"]
  947 -> "947R1" [style=solid]
 "947R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  948 [label="State 948\n\l  6 abstract-pack-declarator: ptr-operator • abstract-pack-declarator\l889 ptr-abstract-declarator: ptr-operator •\l890                        | ptr-operator • ptr-abstract-declarator\l"]
  948 -> 253 [style=solid label="IDENTIFIER"]
  948 -> 939 [style=solid label="OPEN_PAREN"]
  948 -> 940 [style=solid label="ELLIPSIS"]
  948 -> 7 [style=solid label="AND"]
  948 -> 9 [style=solid label="SCOPE"]
  948 -> 941 [style=solid label="OPEN_SQUARE"]
  948 -> 16 [style=solid label="AND_AND"]
  948 -> 134 [style=solid label="DECLTYPE"]
  948 -> 31 [style=solid label="MULT"]
  948 -> 1407 [style=dashed label="abstract-pack-declarator"]
  948 -> 65 [style=dashed label="class-name"]
  948 -> 138 [style=dashed label="decltype-specifier"]
  948 -> 84 [style=dashed label="enum-name"]
  948 -> 99 [style=dashed label="namespace-alias"]
  948 -> 102 [style=dashed label="namespace-name"]
  948 -> 517 [style=dashed label="nested-name-specifier"]
  948 -> 1396 [style=dashed label="noptr-abstract-declarator"]
  948 -> 945 [style=dashed label="noptr-abstract-pack-declarator"]
  948 -> 1397 [style=dashed label="parameters-and-qualifiers"]
  948 -> 1408 [style=dashed label="ptr-abstract-declarator"]
  948 -> 948 [style=dashed label="ptr-operator"]
  948 -> 141 [style=dashed label="simple-template-id"]
  948 -> 142 [style=dashed label="template-name"]
  948 -> 143 [style=dashed label="type-name"]
  948 -> 126 [style=dashed label="typedef-name"]
  948 -> "948R889d" [label="[OPEN_PAREN, ELLIPSIS]", style=solid]
 "948R889d" [label="R889", fillcolor=5, shape=diamond, style=filled]
  948 -> "948R889" [style=solid]
 "948R889" [label="R889", fillcolor=3, shape=diamond, style=filled]
  949 [label="State 949\n\l863 postfix-expression: typename-specifier OPEN_PAREN • CLOSE_PAREN\l864                   | typename-specifier OPEN_PAREN • expression-list CLOSE_PAREN\l"]
  949 -> 356 [style=solid label="PLUS"]
  949 -> 357 [style=solid label="MINUS"]
  949 -> 2 [style=solid label="IDENTIFIER"]
  949 -> 358 [style=solid label="OPEN_PAREN"]
  949 -> 1409 [style=solid label="CLOSE_PAREN"]
  949 -> 359 [style=solid label="AND"]
  949 -> 360 [style=solid label="SCOPE"]
  949 -> 361 [style=solid label="OPEN_SQUARE"]
  949 -> 362 [style=solid label="CO_AWAIT"]
  949 -> 935 [style=solid label="OPEN_BRACE"]
  949 -> 363 [style=solid label="ZERO_LB"]
  949 -> 364 [style=solid label="ZERO_HB"]
  949 -> 365 [style=solid label="SINGLE_QUOTE"]
  949 -> 366 [style=solid label="FALSE"]
  949 -> 367 [style=solid label="TRUE"]
  949 -> 368 [style=solid label="NOEXCEPT"]
  949 -> 17 [style=solid label="OPERATOR"]
  949 -> 26 [style=solid label="DECLTYPE"]
  949 -> 369 [style=solid label="DELETE"]
  949 -> 370 [style=solid label="DOT"]
  949 -> 184 [style=solid label="UNICODE_8"]
  949 -> 371 [style=solid label="MULT"]
  949 -> 199 [style=solid label="DOUBLE_QUOTE"]
  949 -> 372 [style=solid label="ZERO_LX"]
  949 -> 373 [style=solid label="ZERO_HX"]
  949 -> 374 [style=solid label="REQUIRES"]
  949 -> 375 [style=solid label="NEW"]
  949 -> 376 [style=solid label="COMPL"]
  949 -> 377 [style=solid label="NOT"]
  949 -> 378 [style=solid label="PLUS_PLUS"]
  949 -> 379 [style=solid label="MINUS_MINUS"]
  949 -> 380 [style=solid label="THIS"]
  949 -> 36 [style=solid label="AUTO"]
  949 -> 381 [style=solid label="NULLPTR"]
  949 -> 382 [style=solid label="DYNAMIC_CAST"]
  949 -> 383 [style=solid label="STATIC_CAST"]
  949 -> 384 [style=solid label="REINTERPRET_CAST"]
  949 -> 385 [style=solid label="CONST_CAST"]
  949 -> 386 [style=solid label="TYPEID"]
  949 -> 37 [style=solid label="CHAR"]
  949 -> 38 [style=solid label="CHAR8_T"]
  949 -> 39 [style=solid label="CHAR16_T"]
  949 -> 40 [style=solid label="CHAR32_T"]
  949 -> 41 [style=solid label="WCHAR_T"]
  949 -> 42 [style=solid label="BOOL"]
  949 -> 43 [style=solid label="SHORT"]
  949 -> 44 [style=solid label="INT"]
  949 -> 45 [style=solid label="LONG"]
  949 -> 46 [style=solid label="SIGNED"]
  949 -> 47 [style=solid label="UNSIGNED"]
  949 -> 48 [style=solid label="FLOAT"]
  949 -> 49 [style=solid label="DOUBLE"]
  949 -> 50 [style=solid label="VOID"]
  949 -> 523 [style=solid label="THROW"]
  949 -> 55 [style=solid label="TYPENAME"]
  949 -> 387 [style=solid label="SIZEOF"]
  949 -> 388 [style=solid label="ALIGNOF"]
  949 -> 524 [style=solid label="CO_YIELD"]
  949 -> 389 [style=solid label="'0'"]
  949 -> 390 [style=solid label="'1'"]
  949 -> 391 [style=solid label="'2'"]
  949 -> 392 [style=solid label="'3'"]
  949 -> 393 [style=solid label="'4'"]
  949 -> 394 [style=solid label="'5'"]
  949 -> 395 [style=solid label="'6'"]
  949 -> 396 [style=solid label="'7'"]
  949 -> 397 [style=solid label="'8'"]
  949 -> 398 [style=solid label="'9'"]
  949 -> 205 [style=solid label="'u'"]
  949 -> 206 [style=solid label="'U'"]
  949 -> 207 [style=solid label="'L'"]
  949 -> 208 [style=solid label="'R'"]
  949 -> 399 [style=dashed label="additive-expression"]
  949 -> 400 [style=dashed label="and-expression"]
  949 -> 1134 [style=dashed label="assignment-expression"]
  949 -> 401 [style=dashed label="await-expression"]
  949 -> 402 [style=dashed label="binary-literal"]
  949 -> 403 [style=dashed label="boolean-literal"]
  949 -> 1135 [style=dashed label="braced-init-list"]
  949 -> 404 [style=dashed label="cast-expression"]
  949 -> 405 [style=dashed label="character-literal"]
  949 -> 65 [style=dashed label="class-name"]
  949 -> 406 [style=dashed label="compare-expression"]
  949 -> 67 [style=dashed label="concept-name"]
  949 -> 526 [style=dashed label="conditional-expression"]
  949 -> 68 [style=dashed label="conversion-function-id"]
  949 -> 409 [style=dashed label="decimal-floating-point-literal"]
  949 -> 410 [style=dashed label="decimal-literal"]
  949 -> 76 [style=dashed label="decltype-specifier"]
  949 -> 411 [style=dashed label="delete-expression"]
  949 -> 412 [style=dashed label="digit"]
  949 -> 413 [style=dashed label="digit-sequence"]
  949 -> 414 [style=dashed label="encoding-prefix"]
  949 -> 84 [style=dashed label="enum-name"]
  949 -> 415 [style=dashed label="equality-expression"]
  949 -> 416 [style=dashed label="exclusive-or-expression"]
  949 -> 1410 [style=dashed label="expression-list"]
  949 -> 417 [style=dashed label="floating-point-literal"]
  949 -> 418 [style=dashed label="fold-expression"]
  949 -> 419 [style=dashed label="fractional-constant"]
  949 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  949 -> 421 [style=dashed label="hexadecimal-literal"]
  949 -> 422 [style=dashed label="hexadecimal-prefix"]
  949 -> 423 [style=dashed label="id-expression"]
  949 -> 424 [style=dashed label="inclusive-or-expression"]
  949 -> 1138 [style=dashed label="initializer-clause"]
  949 -> 1139 [style=dashed label="initializer-list"]
  949 -> 425 [style=dashed label="integer-literal"]
  949 -> 426 [style=dashed label="lambda-expression"]
  949 -> 427 [style=dashed label="lambda-introducer"]
  949 -> 428 [style=dashed label="literal"]
  949 -> 95 [style=dashed label="literal-operator-id"]
  949 -> 429 [style=dashed label="logical-and-expression"]
  949 -> 528 [style=dashed label="logical-or-expression"]
  949 -> 431 [style=dashed label="multiplicative-expression"]
  949 -> 99 [style=dashed label="namespace-alias"]
  949 -> 102 [style=dashed label="namespace-name"]
  949 -> 432 [style=dashed label="nested-name-specifier"]
  949 -> 433 [style=dashed label="new-expression"]
  949 -> 434 [style=dashed label="noexcept-expression"]
  949 -> 435 [style=dashed label="nonzero-digit"]
  949 -> 436 [style=dashed label="octal-literal"]
  949 -> 108 [style=dashed label="operator-function-id"]
  949 -> 109 [style=dashed label="placeholder-type-specifier"]
  949 -> 437 [style=dashed label="pm-expression"]
  949 -> 438 [style=dashed label="pointer-literal"]
  949 -> 439 [style=dashed label="postfix-expression"]
  949 -> 440 [style=dashed label="primary-expression"]
  949 -> 112 [style=dashed label="qualified-id"]
  949 -> 441 [style=dashed label="relational-expression"]
  949 -> 442 [style=dashed label="requires-expression"]
  949 -> 443 [style=dashed label="shift-expression"]
  949 -> 114 [style=dashed label="simple-template-id"]
  949 -> 529 [style=dashed label="simple-type-specifier"]
  949 -> 445 [style=dashed label="string-literal"]
  949 -> 120 [style=dashed label="template-id"]
  949 -> 215 [style=dashed label="template-name"]
  949 -> 530 [style=dashed label="throw-expression"]
  949 -> 123 [style=dashed label="type-constraint"]
  949 -> 124 [style=dashed label="type-name"]
  949 -> 126 [style=dashed label="typedef-name"]
  949 -> 531 [style=dashed label="typename-specifier"]
  949 -> 449 [style=dashed label="unary-expression"]
  949 -> 450 [style=dashed label="unary-operator"]
  949 -> 129 [style=dashed label="unqualified-id"]
  949 -> 451 [style=dashed label="user-defined-character-literal"]
  949 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  949 -> 453 [style=dashed label="user-defined-integer-literal"]
  949 -> 454 [style=dashed label="user-defined-literal"]
  949 -> 455 [style=dashed label="user-defined-string-literal"]
  949 -> 532 [style=dashed label="yield-expression"]
  950 [label="State 950\n\l866 postfix-expression: typename-specifier braced-init-list •\l"]
  950 -> "950R866" [style=solid]
 "950R866" [label="R866", fillcolor=3, shape=diamond, style=filled]
  951 [label="State 951\n\l1117 unary-expression: unary-operator cast-expression •\l"]
  951 -> "951R1117" [style=solid]
 "951R1117" [label="R1117", fillcolor=3, shape=diamond, style=filled]
  952 [label="State 952\n\l661 nested-name-specifier: nested-name-specifier TEMPLATE simple-template-id • SCOPE\l1047 template-id: simple-template-id •\l"]
  952 -> 1210 [style=solid label="SCOPE"]
  952 -> "952R1047d" [label="[SCOPE]", style=solid]
 "952R1047d" [label="R1047", fillcolor=5, shape=diamond, style=filled]
  952 -> "952R1047" [style=solid]
 "952R1047" [label="R1047", fillcolor=3, shape=diamond, style=filled]
  953 [label="State 953\n\l 22 asm-declaration: ASM OPEN_PAREN string-literal CLOSE_PAREN • SEMICOLON\l"]
  953 -> 1411 [style=solid label="SEMICOLON"]
  954 [label="State 954\n\l 48 attribute-namespace: IDENTIFIER •\l"]
  954 -> "954R48" [style=solid]
 "954R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  955 [label="State 955\n\l 57 attribute-using-prefix: USING attribute-namespace • COLON\l"]
  955 -> 1412 [style=solid label="COLON"]
  956 [label="State 956\n\l 46 attribute-list: attribute ELLIPSIS •\l"]
  956 -> "956R46" [style=solid]
 "956R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  957 [label="State 957\n\l 44 attribute-list: attribute-list COMMA •\l 45               | attribute-list COMMA • attribute\l 47               | attribute-list COMMA • attribute ELLIPSIS\l"]
  957 -> 461 [style=solid label="IDENTIFIER"]
  957 -> 1413 [style=dashed label="attribute"]
  957 -> 464 [style=dashed label="attribute-namespace"]
  957 -> 465 [style=dashed label="attribute-scoped-token"]
  957 -> 466 [style=dashed label="attribute-token"]
  957 -> "957R44" [style=solid]
 "957R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  958 [label="State 958\n\l 50 attribute-specifier: OPEN_SQUARE OPEN_SQUARE attribute-list CLOSE_SQUARE • CLOSE_SQUARE\l"]
  958 -> 1414 [style=solid label="CLOSE_SQUARE"]
  959 [label="State 959\n\l 49 attribute-scoped-token: attribute-namespace SCOPE • IDENTIFIER\l"]
  959 -> 1415 [style=solid label="IDENTIFIER"]
  960 [label="State 960\n\l 40 attribute-argument-clause: OPEN_PAREN • CLOSE_PAREN\l 41                          | OPEN_PAREN • balanced-token-seq CLOSE_PAREN\l"]
  960 -> 1416 [style=solid label="OPEN_PAREN"]
  960 -> 1417 [style=solid label="CLOSE_PAREN"]
  960 -> 1418 [style=solid label="OPEN_SQUARE"]
  960 -> 1419 [style=solid label="OPEN_BRACE"]
  960 -> 1420 [style=solid label="BALANCED_TOKEN"]
  960 -> 1421 [style=dashed label="balanced-token"]
  960 -> 1422 [style=dashed label="balanced-token-seq"]
  961 [label="State 961\n\l 39 attribute: attribute-token attribute-argument-clause •\l"]
  961 -> "961R39" [style=solid]
 "961R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  962 [label="State 962\n\l 44 attribute-list: attribute-list • COMMA\l 45               | attribute-list • COMMA attribute\l 47               | attribute-list • COMMA attribute ELLIPSIS\l 51 attribute-specifier: OPEN_SQUARE OPEN_SQUARE attribute-using-prefix attribute-list • CLOSE_SQUARE CLOSE_SQUARE\l"]
  962 -> 957 [style=solid label="COMMA"]
  962 -> 1423 [style=solid label="CLOSE_SQUARE"]
  963 [label="State 963\n\l1045 template-head: TEMPLATE LESS • template-parameter-list GREATER\l1046              | TEMPLATE LESS • template-parameter-list GREATER requires-clause\l"]
  963 -> 162 [style=solid label="IDENTIFIER"]
  963 -> 4 [style=solid label="ALIGNAS"]
  963 -> 9 [style=solid label="SCOPE"]
  963 -> 10 [style=solid label="OPEN_SQUARE"]
  963 -> 11 [style=solid label="VIRTUAL"]
  963 -> 468 [style=solid label="CLASS"]
  963 -> 13 [style=solid label="STRUCT"]
  963 -> 14 [style=solid label="UNION"]
  963 -> 469 [style=solid label="TEMPLATE"]
  963 -> 18 [style=solid label="CONST"]
  963 -> 19 [style=solid label="VOLATILE"]
  963 -> 20 [style=solid label="FRIEND"]
  963 -> 21 [style=solid label="TYPEDEF"]
  963 -> 22 [style=solid label="CONSTEXPR"]
  963 -> 23 [style=solid label="CONSTEVAL"]
  963 -> 24 [style=solid label="CONSTINIT"]
  963 -> 258 [style=solid label="INLINE"]
  963 -> 26 [style=solid label="DECLTYPE"]
  963 -> 27 [style=solid label="ENUM"]
  963 -> 259 [style=solid label="EXTERN"]
  963 -> 29 [style=solid label="EXPLICIT"]
  963 -> 471 [style=solid label="THIS"]
  963 -> 36 [style=solid label="AUTO"]
  963 -> 37 [style=solid label="CHAR"]
  963 -> 38 [style=solid label="CHAR8_T"]
  963 -> 39 [style=solid label="CHAR16_T"]
  963 -> 40 [style=solid label="CHAR32_T"]
  963 -> 41 [style=solid label="WCHAR_T"]
  963 -> 42 [style=solid label="BOOL"]
  963 -> 43 [style=solid label="SHORT"]
  963 -> 44 [style=solid label="INT"]
  963 -> 45 [style=solid label="LONG"]
  963 -> 46 [style=solid label="SIGNED"]
  963 -> 47 [style=solid label="UNSIGNED"]
  963 -> 48 [style=solid label="FLOAT"]
  963 -> 49 [style=solid label="DOUBLE"]
  963 -> 50 [style=solid label="VOID"]
  963 -> 52 [style=solid label="STATIC"]
  963 -> 53 [style=solid label="THREAD_LOCAL"]
  963 -> 54 [style=solid label="MUTABLE"]
  963 -> 472 [style=solid label="TYPENAME"]
  963 -> 57 [style=dashed label="alignment-specifier"]
  963 -> 60 [style=dashed label="attribute-specifier"]
  963 -> 473 [style=dashed label="attribute-specifier-seq"]
  963 -> 63 [style=dashed label="class-head"]
  963 -> 64 [style=dashed label="class-key"]
  963 -> 65 [style=dashed label="class-name"]
  963 -> 66 [style=dashed label="class-specifier"]
  963 -> 67 [style=dashed label="concept-name"]
  963 -> 69 [style=dashed label="cv-qualifier"]
  963 -> 70 [style=dashed label="decl-specifier"]
  963 -> 474 [style=dashed label="decl-specifier-seq"]
  963 -> 76 [style=dashed label="decltype-specifier"]
  963 -> 78 [style=dashed label="defining-type-specifier"]
  963 -> 79 [style=dashed label="elaborated-enum-specifier"]
  963 -> 80 [style=dashed label="elaborated-type-specifier"]
  963 -> 82 [style=dashed label="enum-head"]
  963 -> 263 [style=dashed label="enum-key"]
  963 -> 84 [style=dashed label="enum-name"]
  963 -> 85 [style=dashed label="enum-specifier"]
  963 -> 264 [style=dashed label="explicit-specifier"]
  963 -> 91 [style=dashed label="function-specifier"]
  963 -> 99 [style=dashed label="namespace-alias"]
  963 -> 102 [style=dashed label="namespace-name"]
  963 -> 212 [style=dashed label="nested-name-specifier"]
  963 -> 475 [style=dashed label="parameter-declaration"]
  963 -> 109 [style=dashed label="placeholder-type-specifier"]
  963 -> 141 [style=dashed label="simple-template-id"]
  963 -> 115 [style=dashed label="simple-type-specifier"]
  963 -> 117 [style=dashed label="storage-class-specifier"]
  963 -> 476 [style=dashed label="template-head"]
  963 -> 215 [style=dashed label="template-name"]
  963 -> 477 [style=dashed label="template-parameter"]
  963 -> 478 [style=dashed label="template-parameter-list"]
  963 -> 479 [style=dashed label="type-constraint"]
  963 -> 124 [style=dashed label="type-name"]
  963 -> 480 [style=dashed label="type-parameter"]
  963 -> 481 [style=dashed label="type-parameter-key"]
  963 -> 125 [style=dashed label="type-specifier"]
  963 -> 126 [style=dashed label="typedef-name"]
  963 -> 127 [style=dashed label="typename-specifier"]
  964 [label="State 964\n\l321 explicit-specialization: TEMPLATE LESS GREATER declaration •\l"]
  964 -> "964R321" [style=solid]
 "964R321" [label="R321", fillcolor=3, shape=diamond, style=filled]
  965 [label="State 965\n\l805 parameter-declaration: THIS decl-specifier-seq • declarator\l809                      | THIS decl-specifier-seq • declarator EQ initializer-clause\l813                      | THIS decl-specifier-seq •\l817                      | THIS decl-specifier-seq • abstract-declarator\l821                      | THIS decl-specifier-seq • EQ initializer-clause\l825                      | THIS decl-specifier-seq • abstract-declarator EQ initializer-clause\l"]
  965 -> 147 [style=solid label="IDENTIFIER"]
  965 -> 1424 [style=solid label="EQ"]
  965 -> 969 [style=solid label="OPEN_PAREN"]
  965 -> 970 [style=solid label="ELLIPSIS"]
  965 -> 7 [style=solid label="AND"]
  965 -> 9 [style=solid label="SCOPE"]
  965 -> 941 [style=solid label="OPEN_SQUARE"]
  965 -> 16 [style=solid label="AND_AND"]
  965 -> 17 [style=solid label="OPERATOR"]
  965 -> 134 [style=solid label="DECLTYPE"]
  965 -> 31 [style=solid label="MULT"]
  965 -> 35 [style=solid label="COMPL"]
  965 -> 1425 [style=dashed label="abstract-declarator"]
  965 -> 943 [style=dashed label="abstract-pack-declarator"]
  965 -> 65 [style=dashed label="class-name"]
  965 -> 68 [style=dashed label="conversion-function-id"]
  965 -> 1426 [style=dashed label="declarator"]
  965 -> 75 [style=dashed label="declarator-id"]
  965 -> 138 [style=dashed label="decltype-specifier"]
  965 -> 84 [style=dashed label="enum-name"]
  965 -> 93 [style=dashed label="id-expression"]
  965 -> 95 [style=dashed label="literal-operator-id"]
  965 -> 99 [style=dashed label="namespace-alias"]
  965 -> 102 [style=dashed label="namespace-name"]
  965 -> 148 [style=dashed label="nested-name-specifier"]
  965 -> 944 [style=dashed label="noptr-abstract-declarator"]
  965 -> 945 [style=dashed label="noptr-abstract-pack-declarator"]
  965 -> 106 [style=dashed label="noptr-declarator"]
  965 -> 108 [style=dashed label="operator-function-id"]
  965 -> 946 [style=dashed label="parameters-and-qualifiers"]
  965 -> 947 [style=dashed label="ptr-abstract-declarator"]
  965 -> 110 [style=dashed label="ptr-declarator"]
  965 -> 973 [style=dashed label="ptr-operator"]
  965 -> 112 [style=dashed label="qualified-id"]
  965 -> 114 [style=dashed label="simple-template-id"]
  965 -> 120 [style=dashed label="template-id"]
  965 -> 142 [style=dashed label="template-name"]
  965 -> 143 [style=dashed label="type-name"]
  965 -> 126 [style=dashed label="typedef-name"]
  965 -> 129 [style=dashed label="unqualified-id"]
  965 -> "965R813d" [label="[ELLIPSIS]", style=solid]
 "965R813d" [label="R813", fillcolor=5, shape=diamond, style=filled]
  965 -> "965R813" [style=solid]
 "965R813" [label="R813", fillcolor=3, shape=diamond, style=filled]
  966 [label="State 966\n\l804 parameter-declaration: attribute-specifier-seq THIS • decl-specifier-seq declarator\l808                      | attribute-specifier-seq THIS • decl-specifier-seq declarator EQ initializer-clause\l812                      | attribute-specifier-seq THIS • decl-specifier-seq\l816                      | attribute-specifier-seq THIS • decl-specifier-seq abstract-declarator\l820                      | attribute-specifier-seq THIS • decl-specifier-seq EQ initializer-clause\l824                      | attribute-specifier-seq THIS • decl-specifier-seq abstract-declarator EQ initializer-clause\l"]
  966 -> 162 [style=solid label="IDENTIFIER"]
  966 -> 9 [style=solid label="SCOPE"]
  966 -> 11 [style=solid label="VIRTUAL"]
  966 -> 12 [style=solid label="CLASS"]
  966 -> 13 [style=solid label="STRUCT"]
  966 -> 14 [style=solid label="UNION"]
  966 -> 18 [style=solid label="CONST"]
  966 -> 19 [style=solid label="VOLATILE"]
  966 -> 20 [style=solid label="FRIEND"]
  966 -> 21 [style=solid label="TYPEDEF"]
  966 -> 22 [style=solid label="CONSTEXPR"]
  966 -> 23 [style=solid label="CONSTEVAL"]
  966 -> 24 [style=solid label="CONSTINIT"]
  966 -> 258 [style=solid label="INLINE"]
  966 -> 26 [style=solid label="DECLTYPE"]
  966 -> 27 [style=solid label="ENUM"]
  966 -> 259 [style=solid label="EXTERN"]
  966 -> 29 [style=solid label="EXPLICIT"]
  966 -> 36 [style=solid label="AUTO"]
  966 -> 37 [style=solid label="CHAR"]
  966 -> 38 [style=solid label="CHAR8_T"]
  966 -> 39 [style=solid label="CHAR16_T"]
  966 -> 40 [style=solid label="CHAR32_T"]
  966 -> 41 [style=solid label="WCHAR_T"]
  966 -> 42 [style=solid label="BOOL"]
  966 -> 43 [style=solid label="SHORT"]
  966 -> 44 [style=solid label="INT"]
  966 -> 45 [style=solid label="LONG"]
  966 -> 46 [style=solid label="SIGNED"]
  966 -> 47 [style=solid label="UNSIGNED"]
  966 -> 48 [style=solid label="FLOAT"]
  966 -> 49 [style=solid label="DOUBLE"]
  966 -> 50 [style=solid label="VOID"]
  966 -> 52 [style=solid label="STATIC"]
  966 -> 53 [style=solid label="THREAD_LOCAL"]
  966 -> 54 [style=solid label="MUTABLE"]
  966 -> 55 [style=solid label="TYPENAME"]
  966 -> 63 [style=dashed label="class-head"]
  966 -> 64 [style=dashed label="class-key"]
  966 -> 65 [style=dashed label="class-name"]
  966 -> 66 [style=dashed label="class-specifier"]
  966 -> 67 [style=dashed label="concept-name"]
  966 -> 69 [style=dashed label="cv-qualifier"]
  966 -> 70 [style=dashed label="decl-specifier"]
  966 -> 1427 [style=dashed label="decl-specifier-seq"]
  966 -> 76 [style=dashed label="decltype-specifier"]
  966 -> 78 [style=dashed label="defining-type-specifier"]
  966 -> 79 [style=dashed label="elaborated-enum-specifier"]
  966 -> 80 [style=dashed label="elaborated-type-specifier"]
  966 -> 82 [style=dashed label="enum-head"]
  966 -> 263 [style=dashed label="enum-key"]
  966 -> 84 [style=dashed label="enum-name"]
  966 -> 85 [style=dashed label="enum-specifier"]
  966 -> 264 [style=dashed label="explicit-specifier"]
  966 -> 91 [style=dashed label="function-specifier"]
  966 -> 99 [style=dashed label="namespace-alias"]
  966 -> 102 [style=dashed label="namespace-name"]
  966 -> 212 [style=dashed label="nested-name-specifier"]
  966 -> 109 [style=dashed label="placeholder-type-specifier"]
  966 -> 141 [style=dashed label="simple-template-id"]
  966 -> 115 [style=dashed label="simple-type-specifier"]
  966 -> 117 [style=dashed label="storage-class-specifier"]
  966 -> 215 [style=dashed label="template-name"]
  966 -> 123 [style=dashed label="type-constraint"]
  966 -> 124 [style=dashed label="type-name"]
  966 -> 125 [style=dashed label="type-specifier"]
  966 -> 126 [style=dashed label="typedef-name"]
  966 -> 127 [style=dashed label="typename-specifier"]
  967 [label="State 967\n\l802 parameter-declaration: attribute-specifier-seq decl-specifier-seq • declarator\l806                      | attribute-specifier-seq decl-specifier-seq • declarator EQ initializer-clause\l810                      | attribute-specifier-seq decl-specifier-seq •\l814                      | attribute-specifier-seq decl-specifier-seq • abstract-declarator\l818                      | attribute-specifier-seq decl-specifier-seq • EQ initializer-clause\l822                      | attribute-specifier-seq decl-specifier-seq • abstract-declarator EQ initializer-clause\l"]
  967 -> 147 [style=solid label="IDENTIFIER"]
  967 -> 1428 [style=solid label="EQ"]
  967 -> 969 [style=solid label="OPEN_PAREN"]
  967 -> 970 [style=solid label="ELLIPSIS"]
  967 -> 7 [style=solid label="AND"]
  967 -> 9 [style=solid label="SCOPE"]
  967 -> 941 [style=solid label="OPEN_SQUARE"]
  967 -> 16 [style=solid label="AND_AND"]
  967 -> 17 [style=solid label="OPERATOR"]
  967 -> 134 [style=solid label="DECLTYPE"]
  967 -> 31 [style=solid label="MULT"]
  967 -> 35 [style=solid label="COMPL"]
  967 -> 1429 [style=dashed label="abstract-declarator"]
  967 -> 943 [style=dashed label="abstract-pack-declarator"]
  967 -> 65 [style=dashed label="class-name"]
  967 -> 68 [style=dashed label="conversion-function-id"]
  967 -> 1430 [style=dashed label="declarator"]
  967 -> 75 [style=dashed label="declarator-id"]
  967 -> 138 [style=dashed label="decltype-specifier"]
  967 -> 84 [style=dashed label="enum-name"]
  967 -> 93 [style=dashed label="id-expression"]
  967 -> 95 [style=dashed label="literal-operator-id"]
  967 -> 99 [style=dashed label="namespace-alias"]
  967 -> 102 [style=dashed label="namespace-name"]
  967 -> 148 [style=dashed label="nested-name-specifier"]
  967 -> 944 [style=dashed label="noptr-abstract-declarator"]
  967 -> 945 [style=dashed label="noptr-abstract-pack-declarator"]
  967 -> 106 [style=dashed label="noptr-declarator"]
  967 -> 108 [style=dashed label="operator-function-id"]
  967 -> 946 [style=dashed label="parameters-and-qualifiers"]
  967 -> 947 [style=dashed label="ptr-abstract-declarator"]
  967 -> 110 [style=dashed label="ptr-declarator"]
  967 -> 973 [style=dashed label="ptr-operator"]
  967 -> 112 [style=dashed label="qualified-id"]
  967 -> 114 [style=dashed label="simple-template-id"]
  967 -> 120 [style=dashed label="template-id"]
  967 -> 142 [style=dashed label="template-name"]
  967 -> 143 [style=dashed label="type-name"]
  967 -> 126 [style=dashed label="typedef-name"]
  967 -> 129 [style=dashed label="unqualified-id"]
  967 -> "967R810d" [label="[ELLIPSIS]", style=solid]
 "967R810d" [label="R810", fillcolor=5, shape=diamond, style=filled]
  967 -> "967R810" [style=solid]
 "967R810" [label="R810", fillcolor=3, shape=diamond, style=filled]
  968 [label="State 968\n\l819 parameter-declaration: decl-specifier-seq EQ • initializer-clause\l"]
  968 -> 356 [style=solid label="PLUS"]
  968 -> 357 [style=solid label="MINUS"]
  968 -> 2 [style=solid label="IDENTIFIER"]
  968 -> 358 [style=solid label="OPEN_PAREN"]
  968 -> 359 [style=solid label="AND"]
  968 -> 360 [style=solid label="SCOPE"]
  968 -> 361 [style=solid label="OPEN_SQUARE"]
  968 -> 362 [style=solid label="CO_AWAIT"]
  968 -> 935 [style=solid label="OPEN_BRACE"]
  968 -> 363 [style=solid label="ZERO_LB"]
  968 -> 364 [style=solid label="ZERO_HB"]
  968 -> 365 [style=solid label="SINGLE_QUOTE"]
  968 -> 366 [style=solid label="FALSE"]
  968 -> 367 [style=solid label="TRUE"]
  968 -> 368 [style=solid label="NOEXCEPT"]
  968 -> 17 [style=solid label="OPERATOR"]
  968 -> 26 [style=solid label="DECLTYPE"]
  968 -> 369 [style=solid label="DELETE"]
  968 -> 370 [style=solid label="DOT"]
  968 -> 184 [style=solid label="UNICODE_8"]
  968 -> 371 [style=solid label="MULT"]
  968 -> 199 [style=solid label="DOUBLE_QUOTE"]
  968 -> 372 [style=solid label="ZERO_LX"]
  968 -> 373 [style=solid label="ZERO_HX"]
  968 -> 374 [style=solid label="REQUIRES"]
  968 -> 375 [style=solid label="NEW"]
  968 -> 376 [style=solid label="COMPL"]
  968 -> 377 [style=solid label="NOT"]
  968 -> 378 [style=solid label="PLUS_PLUS"]
  968 -> 379 [style=solid label="MINUS_MINUS"]
  968 -> 380 [style=solid label="THIS"]
  968 -> 36 [style=solid label="AUTO"]
  968 -> 381 [style=solid label="NULLPTR"]
  968 -> 382 [style=solid label="DYNAMIC_CAST"]
  968 -> 383 [style=solid label="STATIC_CAST"]
  968 -> 384 [style=solid label="REINTERPRET_CAST"]
  968 -> 385 [style=solid label="CONST_CAST"]
  968 -> 386 [style=solid label="TYPEID"]
  968 -> 37 [style=solid label="CHAR"]
  968 -> 38 [style=solid label="CHAR8_T"]
  968 -> 39 [style=solid label="CHAR16_T"]
  968 -> 40 [style=solid label="CHAR32_T"]
  968 -> 41 [style=solid label="WCHAR_T"]
  968 -> 42 [style=solid label="BOOL"]
  968 -> 43 [style=solid label="SHORT"]
  968 -> 44 [style=solid label="INT"]
  968 -> 45 [style=solid label="LONG"]
  968 -> 46 [style=solid label="SIGNED"]
  968 -> 47 [style=solid label="UNSIGNED"]
  968 -> 48 [style=solid label="FLOAT"]
  968 -> 49 [style=solid label="DOUBLE"]
  968 -> 50 [style=solid label="VOID"]
  968 -> 523 [style=solid label="THROW"]
  968 -> 55 [style=solid label="TYPENAME"]
  968 -> 387 [style=solid label="SIZEOF"]
  968 -> 388 [style=solid label="ALIGNOF"]
  968 -> 524 [style=solid label="CO_YIELD"]
  968 -> 389 [style=solid label="'0'"]
  968 -> 390 [style=solid label="'1'"]
  968 -> 391 [style=solid label="'2'"]
  968 -> 392 [style=solid label="'3'"]
  968 -> 393 [style=solid label="'4'"]
  968 -> 394 [style=solid label="'5'"]
  968 -> 395 [style=solid label="'6'"]
  968 -> 396 [style=solid label="'7'"]
  968 -> 397 [style=solid label="'8'"]
  968 -> 398 [style=solid label="'9'"]
  968 -> 205 [style=solid label="'u'"]
  968 -> 206 [style=solid label="'U'"]
  968 -> 207 [style=solid label="'L'"]
  968 -> 208 [style=solid label="'R'"]
  968 -> 399 [style=dashed label="additive-expression"]
  968 -> 400 [style=dashed label="and-expression"]
  968 -> 1134 [style=dashed label="assignment-expression"]
  968 -> 401 [style=dashed label="await-expression"]
  968 -> 402 [style=dashed label="binary-literal"]
  968 -> 403 [style=dashed label="boolean-literal"]
  968 -> 1135 [style=dashed label="braced-init-list"]
  968 -> 404 [style=dashed label="cast-expression"]
  968 -> 405 [style=dashed label="character-literal"]
  968 -> 65 [style=dashed label="class-name"]
  968 -> 406 [style=dashed label="compare-expression"]
  968 -> 67 [style=dashed label="concept-name"]
  968 -> 526 [style=dashed label="conditional-expression"]
  968 -> 68 [style=dashed label="conversion-function-id"]
  968 -> 409 [style=dashed label="decimal-floating-point-literal"]
  968 -> 410 [style=dashed label="decimal-literal"]
  968 -> 76 [style=dashed label="decltype-specifier"]
  968 -> 411 [style=dashed label="delete-expression"]
  968 -> 412 [style=dashed label="digit"]
  968 -> 413 [style=dashed label="digit-sequence"]
  968 -> 414 [style=dashed label="encoding-prefix"]
  968 -> 84 [style=dashed label="enum-name"]
  968 -> 415 [style=dashed label="equality-expression"]
  968 -> 416 [style=dashed label="exclusive-or-expression"]
  968 -> 417 [style=dashed label="floating-point-literal"]
  968 -> 418 [style=dashed label="fold-expression"]
  968 -> 419 [style=dashed label="fractional-constant"]
  968 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  968 -> 421 [style=dashed label="hexadecimal-literal"]
  968 -> 422 [style=dashed label="hexadecimal-prefix"]
  968 -> 423 [style=dashed label="id-expression"]
  968 -> 424 [style=dashed label="inclusive-or-expression"]
  968 -> 1431 [style=dashed label="initializer-clause"]
  968 -> 425 [style=dashed label="integer-literal"]
  968 -> 426 [style=dashed label="lambda-expression"]
  968 -> 427 [style=dashed label="lambda-introducer"]
  968 -> 428 [style=dashed label="literal"]
  968 -> 95 [style=dashed label="literal-operator-id"]
  968 -> 429 [style=dashed label="logical-and-expression"]
  968 -> 528 [style=dashed label="logical-or-expression"]
  968 -> 431 [style=dashed label="multiplicative-expression"]
  968 -> 99 [style=dashed label="namespace-alias"]
  968 -> 102 [style=dashed label="namespace-name"]
  968 -> 432 [style=dashed label="nested-name-specifier"]
  968 -> 433 [style=dashed label="new-expression"]
  968 -> 434 [style=dashed label="noexcept-expression"]
  968 -> 435 [style=dashed label="nonzero-digit"]
  968 -> 436 [style=dashed label="octal-literal"]
  968 -> 108 [style=dashed label="operator-function-id"]
  968 -> 109 [style=dashed label="placeholder-type-specifier"]
  968 -> 437 [style=dashed label="pm-expression"]
  968 -> 438 [style=dashed label="pointer-literal"]
  968 -> 439 [style=dashed label="postfix-expression"]
  968 -> 440 [style=dashed label="primary-expression"]
  968 -> 112 [style=dashed label="qualified-id"]
  968 -> 441 [style=dashed label="relational-expression"]
  968 -> 442 [style=dashed label="requires-expression"]
  968 -> 443 [style=dashed label="shift-expression"]
  968 -> 114 [style=dashed label="simple-template-id"]
  968 -> 529 [style=dashed label="simple-type-specifier"]
  968 -> 445 [style=dashed label="string-literal"]
  968 -> 120 [style=dashed label="template-id"]
  968 -> 215 [style=dashed label="template-name"]
  968 -> 530 [style=dashed label="throw-expression"]
  968 -> 123 [style=dashed label="type-constraint"]
  968 -> 124 [style=dashed label="type-name"]
  968 -> 126 [style=dashed label="typedef-name"]
  968 -> 531 [style=dashed label="typename-specifier"]
  968 -> 449 [style=dashed label="unary-expression"]
  968 -> 450 [style=dashed label="unary-operator"]
  968 -> 129 [style=dashed label="unqualified-id"]
  968 -> 451 [style=dashed label="user-defined-character-literal"]
  968 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  968 -> 453 [style=dashed label="user-defined-integer-literal"]
  968 -> 454 [style=dashed label="user-defined-literal"]
  968 -> 455 [style=dashed label="user-defined-string-literal"]
  968 -> 532 [style=dashed label="yield-expression"]
  969 [label="State 969\n\l714 noptr-abstract-declarator: OPEN_PAREN • ptr-abstract-declarator CLOSE_PAREN\l728 noptr-declarator: OPEN_PAREN • ptr-declarator CLOSE_PAREN\l832 parameters-and-qualifiers: OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN\l833                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq\l834                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN ref-qualifier\l835                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier\l836                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN noexcept-specifier\l837                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq noexcept-specifier\l838                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN ref-qualifier noexcept-specifier\l839                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier noexcept-specifier\l840                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN attribute-specifier-seq\l841                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq attribute-specifier-seq\l842                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN ref-qualifier attribute-specifier-seq\l843                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier attribute-specifier-seq\l844                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN noexcept-specifier attribute-specifier-seq\l845                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq noexcept-specifier attribute-specifier-seq\l846                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN ref-qualifier noexcept-specifier attribute-specifier-seq\l847                          | OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq\l"]
  969 -> 2 [style=solid label="IDENTIFIER"]
  969 -> 4 [style=solid label="ALIGNAS"]
  969 -> 969 [style=solid label="OPEN_PAREN"]
  969 -> 1432 [style=solid label="ELLIPSIS"]
  969 -> 7 [style=solid label="AND"]
  969 -> 9 [style=solid label="SCOPE"]
  969 -> 1394 [style=solid label="OPEN_SQUARE"]
  969 -> 11 [style=solid label="VIRTUAL"]
  969 -> 12 [style=solid label="CLASS"]
  969 -> 13 [style=solid label="STRUCT"]
  969 -> 14 [style=solid label="UNION"]
  969 -> 16 [style=solid label="AND_AND"]
  969 -> 17 [style=solid label="OPERATOR"]
  969 -> 18 [style=solid label="CONST"]
  969 -> 19 [style=solid label="VOLATILE"]
  969 -> 20 [style=solid label="FRIEND"]
  969 -> 21 [style=solid label="TYPEDEF"]
  969 -> 22 [style=solid label="CONSTEXPR"]
  969 -> 23 [style=solid label="CONSTEVAL"]
  969 -> 24 [style=solid label="CONSTINIT"]
  969 -> 258 [style=solid label="INLINE"]
  969 -> 26 [style=solid label="DECLTYPE"]
  969 -> 27 [style=solid label="ENUM"]
  969 -> 259 [style=solid label="EXTERN"]
  969 -> 29 [style=solid label="EXPLICIT"]
  969 -> 31 [style=solid label="MULT"]
  969 -> 35 [style=solid label="COMPL"]
  969 -> 471 [style=solid label="THIS"]
  969 -> 36 [style=solid label="AUTO"]
  969 -> 37 [style=solid label="CHAR"]
  969 -> 38 [style=solid label="CHAR8_T"]
  969 -> 39 [style=solid label="CHAR16_T"]
  969 -> 40 [style=solid label="CHAR32_T"]
  969 -> 41 [style=solid label="WCHAR_T"]
  969 -> 42 [style=solid label="BOOL"]
  969 -> 43 [style=solid label="SHORT"]
  969 -> 44 [style=solid label="INT"]
  969 -> 45 [style=solid label="LONG"]
  969 -> 46 [style=solid label="SIGNED"]
  969 -> 47 [style=solid label="UNSIGNED"]
  969 -> 48 [style=solid label="FLOAT"]
  969 -> 49 [style=solid label="DOUBLE"]
  969 -> 50 [style=solid label="VOID"]
  969 -> 52 [style=solid label="STATIC"]
  969 -> 53 [style=solid label="THREAD_LOCAL"]
  969 -> 54 [style=solid label="MUTABLE"]
  969 -> 55 [style=solid label="TYPENAME"]
  969 -> 57 [style=dashed label="alignment-specifier"]
  969 -> 60 [style=dashed label="attribute-specifier"]
  969 -> 473 [style=dashed label="attribute-specifier-seq"]
  969 -> 63 [style=dashed label="class-head"]
  969 -> 64 [style=dashed label="class-key"]
  969 -> 65 [style=dashed label="class-name"]
  969 -> 66 [style=dashed label="class-specifier"]
  969 -> 67 [style=dashed label="concept-name"]
  969 -> 68 [style=dashed label="conversion-function-id"]
  969 -> 69 [style=dashed label="cv-qualifier"]
  969 -> 70 [style=dashed label="decl-specifier"]
  969 -> 474 [style=dashed label="decl-specifier-seq"]
  969 -> 75 [style=dashed label="declarator-id"]
  969 -> 76 [style=dashed label="decltype-specifier"]
  969 -> 78 [style=dashed label="defining-type-specifier"]
  969 -> 79 [style=dashed label="elaborated-enum-specifier"]
  969 -> 80 [style=dashed label="elaborated-type-specifier"]
  969 -> 82 [style=dashed label="enum-head"]
  969 -> 263 [style=dashed label="enum-key"]
  969 -> 84 [style=dashed label="enum-name"]
  969 -> 85 [style=dashed label="enum-specifier"]
  969 -> 264 [style=dashed label="explicit-specifier"]
  969 -> 91 [style=dashed label="function-specifier"]
  969 -> 93 [style=dashed label="id-expression"]
  969 -> 95 [style=dashed label="literal-operator-id"]
  969 -> 99 [style=dashed label="namespace-alias"]
  969 -> 102 [style=dashed label="namespace-name"]
  969 -> 103 [style=dashed label="nested-name-specifier"]
  969 -> 1396 [style=dashed label="noptr-abstract-declarator"]
  969 -> 149 [style=dashed label="noptr-declarator"]
  969 -> 108 [style=dashed label="operator-function-id"]
  969 -> 731 [style=dashed label="parameter-declaration"]
  969 -> 732 [style=dashed label="parameter-declaration-clause"]
  969 -> 733 [style=dashed label="parameter-declaration-list"]
  969 -> 1397 [style=dashed label="parameters-and-qualifiers"]
  969 -> 109 [style=dashed label="placeholder-type-specifier"]
  969 -> 1398 [style=dashed label="ptr-abstract-declarator"]
  969 -> 150 [style=dashed label="ptr-declarator"]
  969 -> 1433 [style=dashed label="ptr-operator"]
  969 -> 112 [style=dashed label="qualified-id"]
  969 -> 114 [style=dashed label="simple-template-id"]
  969 -> 115 [style=dashed label="simple-type-specifier"]
  969 -> 117 [style=dashed label="storage-class-specifier"]
  969 -> 120 [style=dashed label="template-id"]
  969 -> 215 [style=dashed label="template-name"]
  969 -> 123 [style=dashed label="type-constraint"]
  969 -> 124 [style=dashed label="type-name"]
  969 -> 125 [style=dashed label="type-specifier"]
  969 -> 126 [style=dashed label="typedef-name"]
  969 -> 127 [style=dashed label="typename-specifier"]
  969 -> 129 [style=dashed label="unqualified-id"]
  970 [label="State 970\n\l228 declarator-id: ELLIPSIS • id-expression\l720 noptr-abstract-pack-declarator: ELLIPSIS •\l"]
  970 -> 147 [style=solid label="IDENTIFIER"]
  970 -> 9 [style=solid label="SCOPE"]
  970 -> 17 [style=solid label="OPERATOR"]
  970 -> 134 [style=solid label="DECLTYPE"]
  970 -> 35 [style=solid label="COMPL"]
  970 -> 65 [style=dashed label="class-name"]
  970 -> 68 [style=dashed label="conversion-function-id"]
  970 -> 138 [style=dashed label="decltype-specifier"]
  970 -> 84 [style=dashed label="enum-name"]
  970 -> 151 [style=dashed label="id-expression"]
  970 -> 95 [style=dashed label="literal-operator-id"]
  970 -> 99 [style=dashed label="namespace-alias"]
  970 -> 102 [style=dashed label="namespace-name"]
  970 -> 152 [style=dashed label="nested-name-specifier"]
  970 -> 108 [style=dashed label="operator-function-id"]
  970 -> 112 [style=dashed label="qualified-id"]
  970 -> 114 [style=dashed label="simple-template-id"]
  970 -> 120 [style=dashed label="template-id"]
  970 -> 142 [style=dashed label="template-name"]
  970 -> 143 [style=dashed label="type-name"]
  970 -> 126 [style=dashed label="typedef-name"]
  970 -> 129 [style=dashed label="unqualified-id"]
  970 -> "970R720" [style=solid]
 "970R720" [label="R720", fillcolor=3, shape=diamond, style=filled]
  971 [label="State 971\n\l815 parameter-declaration: decl-specifier-seq abstract-declarator •\l823                      | decl-specifier-seq abstract-declarator • EQ initializer-clause\l"]
  971 -> 1434 [style=solid label="EQ"]
  971 -> "971R815" [style=solid]
 "971R815" [label="R815", fillcolor=3, shape=diamond, style=filled]
  972 [label="State 972\n\l803 parameter-declaration: decl-specifier-seq declarator •\l807                      | decl-specifier-seq declarator • EQ initializer-clause\l"]
  972 -> 1435 [style=solid label="EQ"]
  972 -> "972R803" [style=solid]
 "972R803" [label="R803", fillcolor=3, shape=diamond, style=filled]
  973 [label="State 973\n\l  6 abstract-pack-declarator: ptr-operator • abstract-pack-declarator\l889 ptr-abstract-declarator: ptr-operator •\l890                        | ptr-operator • ptr-abstract-declarator\l892 ptr-declarator: ptr-operator • ptr-declarator\l"]
  973 -> 147 [style=solid label="IDENTIFIER"]
  973 -> 969 [style=solid label="OPEN_PAREN"]
  973 -> 970 [style=solid label="ELLIPSIS"]
  973 -> 7 [style=solid label="AND"]
  973 -> 9 [style=solid label="SCOPE"]
  973 -> 941 [style=solid label="OPEN_SQUARE"]
  973 -> 16 [style=solid label="AND_AND"]
  973 -> 17 [style=solid label="OPERATOR"]
  973 -> 134 [style=solid label="DECLTYPE"]
  973 -> 31 [style=solid label="MULT"]
  973 -> 35 [style=solid label="COMPL"]
  973 -> 1407 [style=dashed label="abstract-pack-declarator"]
  973 -> 65 [style=dashed label="class-name"]
  973 -> 68 [style=dashed label="conversion-function-id"]
  973 -> 75 [style=dashed label="declarator-id"]
  973 -> 138 [style=dashed label="decltype-specifier"]
  973 -> 84 [style=dashed label="enum-name"]
  973 -> 93 [style=dashed label="id-expression"]
  973 -> 95 [style=dashed label="literal-operator-id"]
  973 -> 99 [style=dashed label="namespace-alias"]
  973 -> 102 [style=dashed label="namespace-name"]
  973 -> 148 [style=dashed label="nested-name-specifier"]
  973 -> 1396 [style=dashed label="noptr-abstract-declarator"]
  973 -> 945 [style=dashed label="noptr-abstract-pack-declarator"]
  973 -> 149 [style=dashed label="noptr-declarator"]
  973 -> 108 [style=dashed label="operator-function-id"]
  973 -> 1397 [style=dashed label="parameters-and-qualifiers"]
  973 -> 1408 [style=dashed label="ptr-abstract-declarator"]
  973 -> 332 [style=dashed label="ptr-declarator"]
  973 -> 973 [style=dashed label="ptr-operator"]
  973 -> 112 [style=dashed label="qualified-id"]
  973 -> 114 [style=dashed label="simple-template-id"]
  973 -> 120 [style=dashed label="template-id"]
  973 -> 142 [style=dashed label="template-name"]
  973 -> 143 [style=dashed label="type-name"]
  973 -> 126 [style=dashed label="typedef-name"]
  973 -> 129 [style=dashed label="unqualified-id"]
  973 -> "973R889d" [label="[ELLIPSIS]", style=solid]
 "973R889d" [label="R889", fillcolor=5, shape=diamond, style=filled]
  973 -> "973R889" [style=solid]
 "973R889" [label="R889", fillcolor=3, shape=diamond, style=filled]
  974 [label="State 974\n\l1099 type-parameter-key: CLASS •\l"]
  974 -> "974R1099" [style=solid]
 "974R1099" [label="R1099", fillcolor=3, shape=diamond, style=filled]
  975 [label="State 975\n\l1100 type-parameter-key: TYPENAME •\l"]
  975 -> "975R1100" [style=solid]
 "975R1100" [label="R1100", fillcolor=3, shape=diamond, style=filled]
  976 [label="State 976\n\l1093 type-parameter: template-head type-parameter-key •\l1094               | template-head type-parameter-key • ELLIPSIS\l1095               | template-head type-parameter-key • IDENTIFIER\l1096               | template-head type-parameter-key • ELLIPSIS IDENTIFIER\l1097               | template-head type-parameter-key • EQ id-expression\l1098               | template-head type-parameter-key • IDENTIFIER EQ id-expression\l"]
  976 -> 1436 [style=solid label="IDENTIFIER"]
  976 -> 1437 [style=solid label="EQ"]
  976 -> 1438 [style=solid label="ELLIPSIS"]
  976 -> "976R1093" [style=solid]
 "976R1093" [label="R1093", fillcolor=3, shape=diamond, style=filled]
  977 [label="State 977\n\l1056 template-parameter-list: template-parameter-list COMMA • template-parameter\l"]
  977 -> 162 [style=solid label="IDENTIFIER"]
  977 -> 4 [style=solid label="ALIGNAS"]
  977 -> 9 [style=solid label="SCOPE"]
  977 -> 10 [style=solid label="OPEN_SQUARE"]
  977 -> 11 [style=solid label="VIRTUAL"]
  977 -> 468 [style=solid label="CLASS"]
  977 -> 13 [style=solid label="STRUCT"]
  977 -> 14 [style=solid label="UNION"]
  977 -> 469 [style=solid label="TEMPLATE"]
  977 -> 18 [style=solid label="CONST"]
  977 -> 19 [style=solid label="VOLATILE"]
  977 -> 20 [style=solid label="FRIEND"]
  977 -> 21 [style=solid label="TYPEDEF"]
  977 -> 22 [style=solid label="CONSTEXPR"]
  977 -> 23 [style=solid label="CONSTEVAL"]
  977 -> 24 [style=solid label="CONSTINIT"]
  977 -> 258 [style=solid label="INLINE"]
  977 -> 26 [style=solid label="DECLTYPE"]
  977 -> 27 [style=solid label="ENUM"]
  977 -> 259 [style=solid label="EXTERN"]
  977 -> 29 [style=solid label="EXPLICIT"]
  977 -> 471 [style=solid label="THIS"]
  977 -> 36 [style=solid label="AUTO"]
  977 -> 37 [style=solid label="CHAR"]
  977 -> 38 [style=solid label="CHAR8_T"]
  977 -> 39 [style=solid label="CHAR16_T"]
  977 -> 40 [style=solid label="CHAR32_T"]
  977 -> 41 [style=solid label="WCHAR_T"]
  977 -> 42 [style=solid label="BOOL"]
  977 -> 43 [style=solid label="SHORT"]
  977 -> 44 [style=solid label="INT"]
  977 -> 45 [style=solid label="LONG"]
  977 -> 46 [style=solid label="SIGNED"]
  977 -> 47 [style=solid label="UNSIGNED"]
  977 -> 48 [style=solid label="FLOAT"]
  977 -> 49 [style=solid label="DOUBLE"]
  977 -> 50 [style=solid label="VOID"]
  977 -> 52 [style=solid label="STATIC"]
  977 -> 53 [style=solid label="THREAD_LOCAL"]
  977 -> 54 [style=solid label="MUTABLE"]
  977 -> 472 [style=solid label="TYPENAME"]
  977 -> 57 [style=dashed label="alignment-specifier"]
  977 -> 60 [style=dashed label="attribute-specifier"]
  977 -> 473 [style=dashed label="attribute-specifier-seq"]
  977 -> 63 [style=dashed label="class-head"]
  977 -> 64 [style=dashed label="class-key"]
  977 -> 65 [style=dashed label="class-name"]
  977 -> 66 [style=dashed label="class-specifier"]
  977 -> 67 [style=dashed label="concept-name"]
  977 -> 69 [style=dashed label="cv-qualifier"]
  977 -> 70 [style=dashed label="decl-specifier"]
  977 -> 474 [style=dashed label="decl-specifier-seq"]
  977 -> 76 [style=dashed label="decltype-specifier"]
  977 -> 78 [style=dashed label="defining-type-specifier"]
  977 -> 79 [style=dashed label="elaborated-enum-specifier"]
  977 -> 80 [style=dashed label="elaborated-type-specifier"]
  977 -> 82 [style=dashed label="enum-head"]
  977 -> 263 [style=dashed label="enum-key"]
  977 -> 84 [style=dashed label="enum-name"]
  977 -> 85 [style=dashed label="enum-specifier"]
  977 -> 264 [style=dashed label="explicit-specifier"]
  977 -> 91 [style=dashed label="function-specifier"]
  977 -> 99 [style=dashed label="namespace-alias"]
  977 -> 102 [style=dashed label="namespace-name"]
  977 -> 212 [style=dashed label="nested-name-specifier"]
  977 -> 475 [style=dashed label="parameter-declaration"]
  977 -> 109 [style=dashed label="placeholder-type-specifier"]
  977 -> 141 [style=dashed label="simple-template-id"]
  977 -> 115 [style=dashed label="simple-type-specifier"]
  977 -> 117 [style=dashed label="storage-class-specifier"]
  977 -> 476 [style=dashed label="template-head"]
  977 -> 215 [style=dashed label="template-name"]
  977 -> 1439 [style=dashed label="template-parameter"]
  977 -> 479 [style=dashed label="type-constraint"]
  977 -> 124 [style=dashed label="type-name"]
  977 -> 480 [style=dashed label="type-parameter"]
  977 -> 481 [style=dashed label="type-parameter-key"]
  977 -> 125 [style=dashed label="type-specifier"]
  977 -> 126 [style=dashed label="typedef-name"]
  977 -> 127 [style=dashed label="typename-specifier"]
  978 [label="State 978\n\l1045 template-head: TEMPLATE LESS template-parameter-list GREATER •\l1046              | TEMPLATE LESS template-parameter-list GREATER • requires-clause\l"]
  978 -> 292 [style=solid label="REQUIRES"]
  978 -> 1440 [style=dashed label="requires-clause"]
  978 -> "978R1045" [style=solid]
 "978R1045" [label="R1045", fillcolor=3, shape=diamond, style=filled]
  979 [label="State 979\n\l1089 type-parameter: type-constraint IDENTIFIER •\l1092               | type-constraint IDENTIFIER • EQ type-id\l"]
  979 -> 1441 [style=solid label="EQ"]
  979 -> "979R1089" [style=solid]
 "979R1089" [label="R1089", fillcolor=3, shape=diamond, style=filled]
  980 [label="State 980\n\l1091 type-parameter: type-constraint EQ • type-id\l"]
  980 -> 162 [style=solid label="IDENTIFIER"]
  980 -> 9 [style=solid label="SCOPE"]
  980 -> 12 [style=solid label="CLASS"]
  980 -> 13 [style=solid label="STRUCT"]
  980 -> 14 [style=solid label="UNION"]
  980 -> 18 [style=solid label="CONST"]
  980 -> 19 [style=solid label="VOLATILE"]
  980 -> 26 [style=solid label="DECLTYPE"]
  980 -> 135 [style=solid label="ENUM"]
  980 -> 36 [style=solid label="AUTO"]
  980 -> 37 [style=solid label="CHAR"]
  980 -> 38 [style=solid label="CHAR8_T"]
  980 -> 39 [style=solid label="CHAR16_T"]
  980 -> 40 [style=solid label="CHAR32_T"]
  980 -> 41 [style=solid label="WCHAR_T"]
  980 -> 42 [style=solid label="BOOL"]
  980 -> 43 [style=solid label="SHORT"]
  980 -> 44 [style=solid label="INT"]
  980 -> 45 [style=solid label="LONG"]
  980 -> 46 [style=solid label="SIGNED"]
  980 -> 47 [style=solid label="UNSIGNED"]
  980 -> 48 [style=solid label="FLOAT"]
  980 -> 49 [style=solid label="DOUBLE"]
  980 -> 50 [style=solid label="VOID"]
  980 -> 55 [style=solid label="TYPENAME"]
  980 -> 209 [style=dashed label="class-key"]
  980 -> 65 [style=dashed label="class-name"]
  980 -> 67 [style=dashed label="concept-name"]
  980 -> 69 [style=dashed label="cv-qualifier"]
  980 -> 76 [style=dashed label="decltype-specifier"]
  980 -> 79 [style=dashed label="elaborated-enum-specifier"]
  980 -> 80 [style=dashed label="elaborated-type-specifier"]
  980 -> 84 [style=dashed label="enum-name"]
  980 -> 99 [style=dashed label="namespace-alias"]
  980 -> 102 [style=dashed label="namespace-name"]
  980 -> 212 [style=dashed label="nested-name-specifier"]
  980 -> 109 [style=dashed label="placeholder-type-specifier"]
  980 -> 141 [style=dashed label="simple-template-id"]
  980 -> 115 [style=dashed label="simple-type-specifier"]
  980 -> 215 [style=dashed label="template-name"]
  980 -> 123 [style=dashed label="type-constraint"]
  980 -> 1442 [style=dashed label="type-id"]
  980 -> 124 [style=dashed label="type-name"]
  980 -> 216 [style=dashed label="type-specifier"]
  980 -> 447 [style=dashed label="type-specifier-seq"]
  980 -> 126 [style=dashed label="typedef-name"]
  980 -> 127 [style=dashed label="typename-specifier"]
  981 [label="State 981\n\l1088 type-parameter: type-constraint ELLIPSIS •\l1090               | type-constraint ELLIPSIS • IDENTIFIER\l"]
  981 -> 1443 [style=solid label="IDENTIFIER"]
  981 -> "981R1088" [style=solid]
 "981R1088" [label="R1088", fillcolor=3, shape=diamond, style=filled]
  982 [label="State 982\n\l1083 type-parameter: type-parameter-key IDENTIFIER •\l1086               | type-parameter-key IDENTIFIER • EQ type-id\l"]
  982 -> 1444 [style=solid label="EQ"]
  982 -> "982R1083" [style=solid]
 "982R1083" [label="R1083", fillcolor=3, shape=diamond, style=filled]
  983 [label="State 983\n\l1085 type-parameter: type-parameter-key EQ • type-id\l"]
  983 -> 162 [style=solid label="IDENTIFIER"]
  983 -> 9 [style=solid label="SCOPE"]
  983 -> 12 [style=solid label="CLASS"]
  983 -> 13 [style=solid label="STRUCT"]
  983 -> 14 [style=solid label="UNION"]
  983 -> 18 [style=solid label="CONST"]
  983 -> 19 [style=solid label="VOLATILE"]
  983 -> 26 [style=solid label="DECLTYPE"]
  983 -> 135 [style=solid label="ENUM"]
  983 -> 36 [style=solid label="AUTO"]
  983 -> 37 [style=solid label="CHAR"]
  983 -> 38 [style=solid label="CHAR8_T"]
  983 -> 39 [style=solid label="CHAR16_T"]
  983 -> 40 [style=solid label="CHAR32_T"]
  983 -> 41 [style=solid label="WCHAR_T"]
  983 -> 42 [style=solid label="BOOL"]
  983 -> 43 [style=solid label="SHORT"]
  983 -> 44 [style=solid label="INT"]
  983 -> 45 [style=solid label="LONG"]
  983 -> 46 [style=solid label="SIGNED"]
  983 -> 47 [style=solid label="UNSIGNED"]
  983 -> 48 [style=solid label="FLOAT"]
  983 -> 49 [style=solid label="DOUBLE"]
  983 -> 50 [style=solid label="VOID"]
  983 -> 55 [style=solid label="TYPENAME"]
  983 -> 209 [style=dashed label="class-key"]
  983 -> 65 [style=dashed label="class-name"]
  983 -> 67 [style=dashed label="concept-name"]
  983 -> 69 [style=dashed label="cv-qualifier"]
  983 -> 76 [style=dashed label="decltype-specifier"]
  983 -> 79 [style=dashed label="elaborated-enum-specifier"]
  983 -> 80 [style=dashed label="elaborated-type-specifier"]
  983 -> 84 [style=dashed label="enum-name"]
  983 -> 99 [style=dashed label="namespace-alias"]
  983 -> 102 [style=dashed label="namespace-name"]
  983 -> 212 [style=dashed label="nested-name-specifier"]
  983 -> 109 [style=dashed label="placeholder-type-specifier"]
  983 -> 141 [style=dashed label="simple-template-id"]
  983 -> 115 [style=dashed label="simple-type-specifier"]
  983 -> 215 [style=dashed label="template-name"]
  983 -> 123 [style=dashed label="type-constraint"]
  983 -> 1445 [style=dashed label="type-id"]
  983 -> 124 [style=dashed label="type-name"]
  983 -> 216 [style=dashed label="type-specifier"]
  983 -> 447 [style=dashed label="type-specifier-seq"]
  983 -> 126 [style=dashed label="typedef-name"]
  983 -> 127 [style=dashed label="typename-specifier"]
  984 [label="State 984\n\l1082 type-parameter: type-parameter-key ELLIPSIS •\l1084               | type-parameter-key ELLIPSIS • IDENTIFIER\l"]
  984 -> 1446 [style=solid label="IDENTIFIER"]
  984 -> "984R1082" [style=solid]
 "984R1082" [label="R1082", fillcolor=3, shape=diamond, style=filled]
  985 [label="State 985\n\l761 overloadable-operator: DELETE OPEN_SQUARE CLOSE_SQUARE •\l"]
  985 -> "985R761" [style=solid]
 "985R761" [label="R761", fillcolor=3, shape=diamond, style=filled]
  986 [label="State 986\n\l971 simple-escape-sequence-char: SINGLE_QUOTE •\l"]
  986 -> "986R971" [style=solid]
 "986R971" [label="R971", fillcolor=3, shape=diamond, style=filled]
  987 [label="State 987\n\l974 simple-escape-sequence-char: ESCAPE •\l"]
  987 -> "987R974" [style=solid]
 "987R974" [label="R974", fillcolor=3, shape=diamond, style=filled]
  988 [label="State 988\n\l168 conditional-escape-sequence-char: CONDITIONAL_ESCAPE_SEQUENCE_CHAR •\l"]
  988 -> "988R168" [style=solid]
 "988R168" [label="R168", fillcolor=3, shape=diamond, style=filled]
  989 [label="State 989\n\l973 simple-escape-sequence-char: QUERY •\l"]
  989 -> "989R973" [style=solid]
 "989R973" [label="R973", fillcolor=3, shape=diamond, style=filled]
  990 [label="State 990\n\l972 simple-escape-sequence-char: DOUBLE_QUOTE •\l"]
  990 -> "990R972" [style=solid]
 "990R972" [label="R972", fillcolor=3, shape=diamond, style=filled]
  991 [label="State 991\n\l977 simple-escape-sequence-char: 'f' •\l"]
  991 -> "991R977" [style=solid]
 "991R977" [label="R977", fillcolor=3, shape=diamond, style=filled]
  992 [label="State 992\n\l975 simple-escape-sequence-char: 'a' •\l"]
  992 -> "992R975" [style=solid]
 "992R975" [label="R975", fillcolor=3, shape=diamond, style=filled]
  993 [label="State 993\n\l976 simple-escape-sequence-char: 'b' •\l"]
  993 -> "993R976" [style=solid]
 "993R976" [label="R976", fillcolor=3, shape=diamond, style=filled]
  994 [label="State 994\n\l978 simple-escape-sequence-char: 'n' •\l"]
  994 -> "994R978" [style=solid]
 "994R978" [label="R978", fillcolor=3, shape=diamond, style=filled]
  995 [label="State 995\n\l979 simple-escape-sequence-char: 'r' •\l"]
  995 -> "995R979" [style=solid]
 "995R979" [label="R979", fillcolor=3, shape=diamond, style=filled]
  996 [label="State 996\n\l980 simple-escape-sequence-char: 't' •\l"]
  996 -> "996R980" [style=solid]
 "996R980" [label="R980", fillcolor=3, shape=diamond, style=filled]
  997 [label="State 997\n\l981 simple-escape-sequence-char: 'v' •\l"]
  997 -> "997R981" [style=solid]
 "997R981" [label="R981", fillcolor=3, shape=diamond, style=filled]
  998 [label="State 998\n\l167 conditional-escape-sequence: ESCAPE conditional-escape-sequence-char •\l"]
  998 -> "998R167" [style=solid]
 "998R167" [label="R167", fillcolor=3, shape=diamond, style=filled]
  999 [label="State 999\n\l745 octal-escape-sequence: ESCAPE octal-digit •\l746                      | ESCAPE octal-digit • octal-digit\l747                      | ESCAPE octal-digit • octal-digit octal-digit\l"]
  999 -> 909 [style=solid label="'0'"]
  999 -> 910 [style=solid label="'1'"]
  999 -> 911 [style=solid label="'2'"]
  999 -> 912 [style=solid label="'3'"]
  999 -> 913 [style=solid label="'4'"]
  999 -> 914 [style=solid label="'5'"]
  999 -> 915 [style=solid label="'6'"]
  999 -> 916 [style=solid label="'7'"]
  999 -> 1447 [style=dashed label="octal-digit"]
  999 -> "999R745" [style=solid]
 "999R745" [label="R745", fillcolor=3, shape=diamond, style=filled]
  1000 [label="State 1000\n\l970 simple-escape-sequence: ESCAPE simple-escape-sequence-char •\l"]
  1000 -> "1000R970" [style=solid]
 "1000R970" [label="R970", fillcolor=3, shape=diamond, style=filled]
  1001 [label="State 1001\n\l447 hexadecimal-escape-sequence: ESCAPE_LX hexadecimal-digit •\l"]
  1001 -> "1001R447" [style=solid]
 "1001R447" [label="R447", fillcolor=3, shape=diamond, style=filled]
  1002 [label="State 1002\n\l1134 universal-character-name: ESCAPE_LU hex-quad •\l"]
  1002 -> "1002R1134" [style=solid]
 "1002R1134" [label="R1134", fillcolor=3, shape=diamond, style=filled]
  1003 [label="State 1003\n\l421 hex-quad: hexadecimal-digit • hexadecimal-digit hexadecimal-digit hexadecimal-digit\l"]
  1003 -> 867 [style=solid label="'0'"]
  1003 -> 868 [style=solid label="'1'"]
  1003 -> 869 [style=solid label="'2'"]
  1003 -> 870 [style=solid label="'3'"]
  1003 -> 871 [style=solid label="'4'"]
  1003 -> 872 [style=solid label="'5'"]
  1003 -> 873 [style=solid label="'6'"]
  1003 -> 874 [style=solid label="'7'"]
  1003 -> 875 [style=solid label="'8'"]
  1003 -> 876 [style=solid label="'9'"]
  1003 -> 877 [style=solid label="'e'"]
  1003 -> 878 [style=solid label="'E'"]
  1003 -> 879 [style=solid label="'f'"]
  1003 -> 880 [style=solid label="'F'"]
  1003 -> 881 [style=solid label="'a'"]
  1003 -> 882 [style=solid label="'b'"]
  1003 -> 883 [style=solid label="'c'"]
  1003 -> 884 [style=solid label="'d'"]
  1003 -> 885 [style=solid label="'A'"]
  1003 -> 886 [style=solid label="'B'"]
  1003 -> 887 [style=solid label="'C'"]
  1003 -> 888 [style=solid label="'D'"]
  1003 -> 1448 [style=dashed label="hexadecimal-digit"]
  1004 [label="State 1004\n\l1135 universal-character-name: ESCAPE_HU hex-quad • hex-quad\l"]
  1004 -> 867 [style=solid label="'0'"]
  1004 -> 868 [style=solid label="'1'"]
  1004 -> 869 [style=solid label="'2'"]
  1004 -> 870 [style=solid label="'3'"]
  1004 -> 871 [style=solid label="'4'"]
  1004 -> 872 [style=solid label="'5'"]
  1004 -> 873 [style=solid label="'6'"]
  1004 -> 874 [style=solid label="'7'"]
  1004 -> 875 [style=solid label="'8'"]
  1004 -> 876 [style=solid label="'9'"]
  1004 -> 877 [style=solid label="'e'"]
  1004 -> 878 [style=solid label="'E'"]
  1004 -> 879 [style=solid label="'f'"]
  1004 -> 880 [style=solid label="'F'"]
  1004 -> 881 [style=solid label="'a'"]
  1004 -> 882 [style=solid label="'b'"]
  1004 -> 883 [style=solid label="'c'"]
  1004 -> 884 [style=solid label="'d'"]
  1004 -> 885 [style=solid label="'A'"]
  1004 -> 886 [style=solid label="'B'"]
  1004 -> 887 [style=solid label="'C'"]
  1004 -> 888 [style=solid label="'D'"]
  1004 -> 1449 [style=dashed label="hex-quad"]
  1004 -> 1003 [style=dashed label="hexadecimal-digit"]
  1005 [label="State 1005\n\l448 hexadecimal-escape-sequence: hexadecimal-escape-sequence hexadecimal-digit •\l"]
  1005 -> "1005R448" [style=solid]
 "1005R448" [label="R448", fillcolor=3, shape=diamond, style=filled]
  1006 [label="State 1006\n\l1033 string-literal: DOUBLE_QUOTE s-char-sequence DOUBLE_QUOTE •\l"]
  1006 -> "1006R1033" [style=solid]
 "1006R1033" [label="R1033", fillcolor=3, shape=diamond, style=filled]
  1007 [label="State 1007\n\l937 s-char-sequence: s-char-sequence s-char •\l"]
  1007 -> "1007R937" [style=solid]
 "1007R937" [label="R937", fillcolor=3, shape=diamond, style=filled]
  1008 [label="State 1008\n\l760 overloadable-operator: NEW OPEN_SQUARE CLOSE_SQUARE •\l"]
  1008 -> "1008R760" [style=solid]
 "1008R760" [label="R760", fillcolor=3, shape=diamond, style=filled]
  1009 [label="State 1009\n\l267 elaborated-type-specifier: class-key attribute-specifier-seq nested-name-specifier • IDENTIFIER\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l"]
  1009 -> 1450 [style=solid label="IDENTIFIER"]
  1009 -> 350 [style=solid label="TEMPLATE"]
  1009 -> 534 [style=dashed label="simple-template-id"]
  1009 -> 142 [style=dashed label="template-name"]
  1010 [label="State 1010\n\l266 elaborated-type-specifier: class-key nested-name-specifier IDENTIFIER •\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l"]
  1010 -> 722 [style=solid label="SCOPE"]
  1010 -> "1010R266d" [label="[SCOPE]", style=solid]
 "1010R266d" [label="R266", fillcolor=5, shape=diamond, style=filled]
  1010 -> "1010R266" [style=solid]
 "1010R266" [label="R266", fillcolor=3, shape=diamond, style=filled]
  1010 -> "1010R1052d" [label="[LESS]", style=solid]
 "1010R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  1011 [label="State 1011\n\l269 elaborated-type-specifier: class-key nested-name-specifier simple-template-id •\l660 nested-name-specifier: nested-name-specifier simple-template-id • SCOPE\l"]
  1011 -> 729 [style=solid label="SCOPE"]
  1011 -> "1011R269d" [label="[SCOPE]", style=solid]
 "1011R269d" [label="R269", fillcolor=5, shape=diamond, style=filled]
  1011 -> "1011R269" [style=solid]
 "1011R269" [label="R269", fillcolor=3, shape=diamond, style=filled]
  1012 [label="State 1012\n\l1030 string-literal: encoding-prefix DOUBLE_QUOTE DOUBLE_QUOTE •\l"]
  1012 -> "1012R1030" [style=solid]
 "1012R1030" [label="R1030", fillcolor=3, shape=diamond, style=filled]
  1013 [label="State 1013\n\l937 s-char-sequence: s-char-sequence • s-char\l1032 string-literal: encoding-prefix DOUBLE_QUOTE s-char-sequence • DOUBLE_QUOTE\l"]
  1013 -> 485 [style=solid label="BASIC_S_CHAR"]
  1013 -> 486 [style=solid label="ESCAPE"]
  1013 -> 1451 [style=solid label="DOUBLE_QUOTE"]
  1013 -> 488 [style=solid label="ESCAPE_LX"]
  1013 -> 489 [style=solid label="ESCAPE_LU"]
  1013 -> 490 [style=solid label="ESCAPE_HU"]
  1013 -> 491 [style=dashed label="basic-s-char"]
  1013 -> 492 [style=dashed label="conditional-escape-sequence"]
  1013 -> 493 [style=dashed label="escape-sequence"]
  1013 -> 494 [style=dashed label="hexadecimal-escape-sequence"]
  1013 -> 495 [style=dashed label="numeric-escape-sequence"]
  1013 -> 496 [style=dashed label="octal-escape-sequence"]
  1013 -> 1007 [style=dashed label="s-char"]
  1013 -> 499 [style=dashed label="simple-escape-sequence"]
  1013 -> 500 [style=dashed label="universal-character-name"]
  1014 [label="State 1014\n\l1034 string-literal: encoding-prefix 'R' raw-string •\l"]
  1014 -> "1014R1034" [style=solid]
 "1014R1034" [label="R1034", fillcolor=3, shape=diamond, style=filled]
  1015 [label="State 1015\n\l661 nested-name-specifier: nested-name-specifier TEMPLATE simple-template-id • SCOPE\l987 simple-type-specifier: nested-name-specifier TEMPLATE simple-template-id •\l"]
  1015 -> 1210 [style=solid label="SCOPE"]
  1015 -> "1015R987d" [label="[SCOPE]", style=solid]
 "1015R987d" [label="R987", fillcolor=5, shape=diamond, style=filled]
  1015 -> "1015R987" [style=solid]
 "1015R987" [label="R987", fillcolor=3, shape=diamond, style=filled]
  1016 [label="State 1016\n\l756 operator-function-id: OPERATOR overloadable-operator LESS GREATER •\l"]
  1016 -> "1016R756" [style=solid]
 "1016R756" [label="R756", fillcolor=3, shape=diamond, style=filled]
  1017 [label="State 1017\n\l757 operator-function-id: OPERATOR overloadable-operator LESS template-argument-list • GREATER\l1041 template-argument-list: template-argument-list • COMMA template-argument\l1042                       | template-argument-list • COMMA template-argument ELLIPSIS\l"]
  1017 -> 1129 [style=solid label="COMMA"]
  1017 -> 1452 [style=solid label="GREATER"]
  1018 [label="State 1018\n\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l"]
  1018 -> 722 [style=solid label="SCOPE"]
  1018 -> "1018R1052" [style=solid]
 "1018R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  1019 [label="State 1019\n\l178 conversion-declarator: ptr-operator conversion-declarator •\l"]
  1019 -> "1019R178" [style=solid]
 "1019R178" [label="R178", fillcolor=3, shape=diamond, style=filled]
  1020 [label="State 1020\n\l643 named-namespace-definition: INLINE NAMESPACE IDENTIFIER OPEN_BRACE • namespace-body CLOSE_BRACE\l"]
  1020 -> 1 [style=solid label="USING"]
  1020 -> 2 [style=solid label="IDENTIFIER"]
  1020 -> 3 [style=solid label="SEMICOLON"]
  1020 -> 4 [style=solid label="ALIGNAS"]
  1020 -> 5 [style=solid label="OPEN_PAREN"]
  1020 -> 6 [style=solid label="ELLIPSIS"]
  1020 -> 7 [style=solid label="AND"]
  1020 -> 8 [style=solid label="ASM"]
  1020 -> 9 [style=solid label="SCOPE"]
  1020 -> 10 [style=solid label="OPEN_SQUARE"]
  1020 -> 11 [style=solid label="VIRTUAL"]
  1020 -> 12 [style=solid label="CLASS"]
  1020 -> 13 [style=solid label="STRUCT"]
  1020 -> 14 [style=solid label="UNION"]
  1020 -> 15 [style=solid label="TEMPLATE"]
  1020 -> 16 [style=solid label="AND_AND"]
  1020 -> 17 [style=solid label="OPERATOR"]
  1020 -> 18 [style=solid label="CONST"]
  1020 -> 19 [style=solid label="VOLATILE"]
  1020 -> 20 [style=solid label="FRIEND"]
  1020 -> 21 [style=solid label="TYPEDEF"]
  1020 -> 22 [style=solid label="CONSTEXPR"]
  1020 -> 23 [style=solid label="CONSTEVAL"]
  1020 -> 24 [style=solid label="CONSTINIT"]
  1020 -> 25 [style=solid label="INLINE"]
  1020 -> 26 [style=solid label="DECLTYPE"]
  1020 -> 27 [style=solid label="ENUM"]
  1020 -> 28 [style=solid label="EXTERN"]
  1020 -> 29 [style=solid label="EXPLICIT"]
  1020 -> 157 [style=solid label="EXPORT"]
  1020 -> 31 [style=solid label="MULT"]
  1020 -> 33 [style=solid label="IMPORT"]
  1020 -> 34 [style=solid label="NAMESPACE"]
  1020 -> 35 [style=solid label="COMPL"]
  1020 -> 36 [style=solid label="AUTO"]
  1020 -> 37 [style=solid label="CHAR"]
  1020 -> 38 [style=solid label="CHAR8_T"]
  1020 -> 39 [style=solid label="CHAR16_T"]
  1020 -> 40 [style=solid label="CHAR32_T"]
  1020 -> 41 [style=solid label="WCHAR_T"]
  1020 -> 42 [style=solid label="BOOL"]
  1020 -> 43 [style=solid label="SHORT"]
  1020 -> 44 [style=solid label="INT"]
  1020 -> 45 [style=solid label="LONG"]
  1020 -> 46 [style=solid label="SIGNED"]
  1020 -> 47 [style=solid label="UNSIGNED"]
  1020 -> 48 [style=solid label="FLOAT"]
  1020 -> 49 [style=solid label="DOUBLE"]
  1020 -> 50 [style=solid label="VOID"]
  1020 -> 51 [style=solid label="STATIC_ASSERT"]
  1020 -> 52 [style=solid label="STATIC"]
  1020 -> 53 [style=solid label="THREAD_LOCAL"]
  1020 -> 54 [style=solid label="MUTABLE"]
  1020 -> 55 [style=solid label="TYPENAME"]
  1020 -> 56 [style=dashed label="alias-declaration"]
  1020 -> 57 [style=dashed label="alignment-specifier"]
  1020 -> 58 [style=dashed label="asm-declaration"]
  1020 -> 59 [style=dashed label="attribute-declaration"]
  1020 -> 60 [style=dashed label="attribute-specifier"]
  1020 -> 61 [style=dashed label="attribute-specifier-seq"]
  1020 -> 62 [style=dashed label="block-declaration"]
  1020 -> 63 [style=dashed label="class-head"]
  1020 -> 64 [style=dashed label="class-key"]
  1020 -> 65 [style=dashed label="class-name"]
  1020 -> 66 [style=dashed label="class-specifier"]
  1020 -> 67 [style=dashed label="concept-name"]
  1020 -> 68 [style=dashed label="conversion-function-id"]
  1020 -> 69 [style=dashed label="cv-qualifier"]
  1020 -> 70 [style=dashed label="decl-specifier"]
  1020 -> 71 [style=dashed label="decl-specifier-seq"]
  1020 -> 72 [style=dashed label="declaration"]
  1020 -> 566 [style=dashed label="declaration-seq"]
  1020 -> 74 [style=dashed label="declarator"]
  1020 -> 75 [style=dashed label="declarator-id"]
  1020 -> 76 [style=dashed label="decltype-specifier"]
  1020 -> 77 [style=dashed label="deduction-guide"]
  1020 -> 78 [style=dashed label="defining-type-specifier"]
  1020 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1020 -> 80 [style=dashed label="elaborated-type-specifier"]
  1020 -> 81 [style=dashed label="empty-declaration"]
  1020 -> 82 [style=dashed label="enum-head"]
  1020 -> 83 [style=dashed label="enum-key"]
  1020 -> 84 [style=dashed label="enum-name"]
  1020 -> 85 [style=dashed label="enum-specifier"]
  1020 -> 86 [style=dashed label="explicit-instantiation"]
  1020 -> 87 [style=dashed label="explicit-specialization"]
  1020 -> 88 [style=dashed label="explicit-specifier"]
  1020 -> 89 [style=dashed label="export-declaration"]
  1020 -> 90 [style=dashed label="function-definition"]
  1020 -> 91 [style=dashed label="function-specifier"]
  1020 -> 93 [style=dashed label="id-expression"]
  1020 -> 94 [style=dashed label="linkage-specification"]
  1020 -> 95 [style=dashed label="literal-operator-id"]
  1020 -> 97 [style=dashed label="module-import-declaration"]
  1020 -> 98 [style=dashed label="named-namespace-definition"]
  1020 -> 99 [style=dashed label="namespace-alias"]
  1020 -> 100 [style=dashed label="namespace-alias-definition"]
  1020 -> 1453 [style=dashed label="namespace-body"]
  1020 -> 101 [style=dashed label="namespace-definition"]
  1020 -> 102 [style=dashed label="namespace-name"]
  1020 -> 103 [style=dashed label="nested-name-specifier"]
  1020 -> 104 [style=dashed label="nested-namespace-definition"]
  1020 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  1020 -> 106 [style=dashed label="noptr-declarator"]
  1020 -> 107 [style=dashed label="opaque-enum-declaration"]
  1020 -> 108 [style=dashed label="operator-function-id"]
  1020 -> 109 [style=dashed label="placeholder-type-specifier"]
  1020 -> 110 [style=dashed label="ptr-declarator"]
  1020 -> 111 [style=dashed label="ptr-operator"]
  1020 -> 112 [style=dashed label="qualified-id"]
  1020 -> 113 [style=dashed label="simple-declaration"]
  1020 -> 114 [style=dashed label="simple-template-id"]
  1020 -> 115 [style=dashed label="simple-type-specifier"]
  1020 -> 116 [style=dashed label="static_assert-declaration"]
  1020 -> 117 [style=dashed label="storage-class-specifier"]
  1020 -> 118 [style=dashed label="template-declaration"]
  1020 -> 119 [style=dashed label="template-head"]
  1020 -> 120 [style=dashed label="template-id"]
  1020 -> 121 [style=dashed label="template-name"]
  1020 -> 123 [style=dashed label="type-constraint"]
  1020 -> 124 [style=dashed label="type-name"]
  1020 -> 125 [style=dashed label="type-specifier"]
  1020 -> 126 [style=dashed label="typedef-name"]
  1020 -> 127 [style=dashed label="typename-specifier"]
  1020 -> 128 [style=dashed label="unnamed-namespace-definition"]
  1020 -> 129 [style=dashed label="unqualified-id"]
  1020 -> 130 [style=dashed label="using-declaration"]
  1020 -> 131 [style=dashed label="using-directive"]
  1020 -> 132 [style=dashed label="using-enum-declaration"]
  1021 [label="State 1021\n\l1136 unnamed-namespace-definition: INLINE NAMESPACE OPEN_BRACE namespace-body • CLOSE_BRACE\l"]
  1021 -> 1454 [style=solid label="CLOSE_BRACE"]
  1022 [label="State 1022\n\l645 named-namespace-definition: INLINE NAMESPACE attribute-specifier-seq IDENTIFIER • OPEN_BRACE namespace-body CLOSE_BRACE\l"]
  1022 -> 1455 [style=solid label="OPEN_BRACE"]
  1023 [label="State 1023\n\l1138 unnamed-namespace-definition: INLINE NAMESPACE attribute-specifier-seq OPEN_BRACE • namespace-body CLOSE_BRACE\l"]
  1023 -> 1 [style=solid label="USING"]
  1023 -> 2 [style=solid label="IDENTIFIER"]
  1023 -> 3 [style=solid label="SEMICOLON"]
  1023 -> 4 [style=solid label="ALIGNAS"]
  1023 -> 5 [style=solid label="OPEN_PAREN"]
  1023 -> 6 [style=solid label="ELLIPSIS"]
  1023 -> 7 [style=solid label="AND"]
  1023 -> 8 [style=solid label="ASM"]
  1023 -> 9 [style=solid label="SCOPE"]
  1023 -> 10 [style=solid label="OPEN_SQUARE"]
  1023 -> 11 [style=solid label="VIRTUAL"]
  1023 -> 12 [style=solid label="CLASS"]
  1023 -> 13 [style=solid label="STRUCT"]
  1023 -> 14 [style=solid label="UNION"]
  1023 -> 15 [style=solid label="TEMPLATE"]
  1023 -> 16 [style=solid label="AND_AND"]
  1023 -> 17 [style=solid label="OPERATOR"]
  1023 -> 18 [style=solid label="CONST"]
  1023 -> 19 [style=solid label="VOLATILE"]
  1023 -> 20 [style=solid label="FRIEND"]
  1023 -> 21 [style=solid label="TYPEDEF"]
  1023 -> 22 [style=solid label="CONSTEXPR"]
  1023 -> 23 [style=solid label="CONSTEVAL"]
  1023 -> 24 [style=solid label="CONSTINIT"]
  1023 -> 25 [style=solid label="INLINE"]
  1023 -> 26 [style=solid label="DECLTYPE"]
  1023 -> 27 [style=solid label="ENUM"]
  1023 -> 28 [style=solid label="EXTERN"]
  1023 -> 29 [style=solid label="EXPLICIT"]
  1023 -> 157 [style=solid label="EXPORT"]
  1023 -> 31 [style=solid label="MULT"]
  1023 -> 33 [style=solid label="IMPORT"]
  1023 -> 34 [style=solid label="NAMESPACE"]
  1023 -> 35 [style=solid label="COMPL"]
  1023 -> 36 [style=solid label="AUTO"]
  1023 -> 37 [style=solid label="CHAR"]
  1023 -> 38 [style=solid label="CHAR8_T"]
  1023 -> 39 [style=solid label="CHAR16_T"]
  1023 -> 40 [style=solid label="CHAR32_T"]
  1023 -> 41 [style=solid label="WCHAR_T"]
  1023 -> 42 [style=solid label="BOOL"]
  1023 -> 43 [style=solid label="SHORT"]
  1023 -> 44 [style=solid label="INT"]
  1023 -> 45 [style=solid label="LONG"]
  1023 -> 46 [style=solid label="SIGNED"]
  1023 -> 47 [style=solid label="UNSIGNED"]
  1023 -> 48 [style=solid label="FLOAT"]
  1023 -> 49 [style=solid label="DOUBLE"]
  1023 -> 50 [style=solid label="VOID"]
  1023 -> 51 [style=solid label="STATIC_ASSERT"]
  1023 -> 52 [style=solid label="STATIC"]
  1023 -> 53 [style=solid label="THREAD_LOCAL"]
  1023 -> 54 [style=solid label="MUTABLE"]
  1023 -> 55 [style=solid label="TYPENAME"]
  1023 -> 56 [style=dashed label="alias-declaration"]
  1023 -> 57 [style=dashed label="alignment-specifier"]
  1023 -> 58 [style=dashed label="asm-declaration"]
  1023 -> 59 [style=dashed label="attribute-declaration"]
  1023 -> 60 [style=dashed label="attribute-specifier"]
  1023 -> 61 [style=dashed label="attribute-specifier-seq"]
  1023 -> 62 [style=dashed label="block-declaration"]
  1023 -> 63 [style=dashed label="class-head"]
  1023 -> 64 [style=dashed label="class-key"]
  1023 -> 65 [style=dashed label="class-name"]
  1023 -> 66 [style=dashed label="class-specifier"]
  1023 -> 67 [style=dashed label="concept-name"]
  1023 -> 68 [style=dashed label="conversion-function-id"]
  1023 -> 69 [style=dashed label="cv-qualifier"]
  1023 -> 70 [style=dashed label="decl-specifier"]
  1023 -> 71 [style=dashed label="decl-specifier-seq"]
  1023 -> 72 [style=dashed label="declaration"]
  1023 -> 566 [style=dashed label="declaration-seq"]
  1023 -> 74 [style=dashed label="declarator"]
  1023 -> 75 [style=dashed label="declarator-id"]
  1023 -> 76 [style=dashed label="decltype-specifier"]
  1023 -> 77 [style=dashed label="deduction-guide"]
  1023 -> 78 [style=dashed label="defining-type-specifier"]
  1023 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1023 -> 80 [style=dashed label="elaborated-type-specifier"]
  1023 -> 81 [style=dashed label="empty-declaration"]
  1023 -> 82 [style=dashed label="enum-head"]
  1023 -> 83 [style=dashed label="enum-key"]
  1023 -> 84 [style=dashed label="enum-name"]
  1023 -> 85 [style=dashed label="enum-specifier"]
  1023 -> 86 [style=dashed label="explicit-instantiation"]
  1023 -> 87 [style=dashed label="explicit-specialization"]
  1023 -> 88 [style=dashed label="explicit-specifier"]
  1023 -> 89 [style=dashed label="export-declaration"]
  1023 -> 90 [style=dashed label="function-definition"]
  1023 -> 91 [style=dashed label="function-specifier"]
  1023 -> 93 [style=dashed label="id-expression"]
  1023 -> 94 [style=dashed label="linkage-specification"]
  1023 -> 95 [style=dashed label="literal-operator-id"]
  1023 -> 97 [style=dashed label="module-import-declaration"]
  1023 -> 98 [style=dashed label="named-namespace-definition"]
  1023 -> 99 [style=dashed label="namespace-alias"]
  1023 -> 100 [style=dashed label="namespace-alias-definition"]
  1023 -> 1456 [style=dashed label="namespace-body"]
  1023 -> 101 [style=dashed label="namespace-definition"]
  1023 -> 102 [style=dashed label="namespace-name"]
  1023 -> 103 [style=dashed label="nested-name-specifier"]
  1023 -> 104 [style=dashed label="nested-namespace-definition"]
  1023 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  1023 -> 106 [style=dashed label="noptr-declarator"]
  1023 -> 107 [style=dashed label="opaque-enum-declaration"]
  1023 -> 108 [style=dashed label="operator-function-id"]
  1023 -> 109 [style=dashed label="placeholder-type-specifier"]
  1023 -> 110 [style=dashed label="ptr-declarator"]
  1023 -> 111 [style=dashed label="ptr-operator"]
  1023 -> 112 [style=dashed label="qualified-id"]
  1023 -> 113 [style=dashed label="simple-declaration"]
  1023 -> 114 [style=dashed label="simple-template-id"]
  1023 -> 115 [style=dashed label="simple-type-specifier"]
  1023 -> 116 [style=dashed label="static_assert-declaration"]
  1023 -> 117 [style=dashed label="storage-class-specifier"]
  1023 -> 118 [style=dashed label="template-declaration"]
  1023 -> 119 [style=dashed label="template-head"]
  1023 -> 120 [style=dashed label="template-id"]
  1023 -> 121 [style=dashed label="template-name"]
  1023 -> 123 [style=dashed label="type-constraint"]
  1023 -> 124 [style=dashed label="type-name"]
  1023 -> 125 [style=dashed label="type-specifier"]
  1023 -> 126 [style=dashed label="typedef-name"]
  1023 -> 127 [style=dashed label="typename-specifier"]
  1023 -> 128 [style=dashed label="unnamed-namespace-definition"]
  1023 -> 129 [style=dashed label="unqualified-id"]
  1023 -> 130 [style=dashed label="using-declaration"]
  1023 -> 131 [style=dashed label="using-directive"]
  1023 -> 132 [style=dashed label="using-enum-declaration"]
  1024 [label="State 1024\n\l851 placeholder-type-specifier: DECLTYPE OPEN_PAREN AUTO CLOSE_PAREN •\l"]
  1024 -> "1024R851" [style=solid]
 "1024R851" [label="R851", fillcolor=3, shape=diamond, style=filled]
  1025 [label="State 1025\n\l1058 throw-expression: THROW assignment-expression •\l"]
  1025 -> "1025R1058" [style=solid]
 "1025R1058" [label="R1058", fillcolor=3, shape=diamond, style=filled]
  1026 [label="State 1026\n\l1180 yield-expression: CO_YIELD assignment-expression •\l"]
  1026 -> "1026R1180" [style=solid]
 "1026R1180" [label="R1180", fillcolor=3, shape=diamond, style=filled]
  1027 [label="State 1027\n\l1181 yield-expression: CO_YIELD braced-init-list •\l"]
  1027 -> "1027R1181" [style=solid]
 "1027R1181" [label="R1181", fillcolor=3, shape=diamond, style=filled]
  1028 [label="State 1028\n\l230 decltype-specifier: DECLTYPE OPEN_PAREN expression CLOSE_PAREN •\l"]
  1028 -> "1028R230" [style=solid]
 "1028R230" [label="R230", fillcolor=3, shape=diamond, style=filled]
  1029 [label="State 1029\n\l335 expression: expression COMMA • assignment-expression\l"]
  1029 -> 356 [style=solid label="PLUS"]
  1029 -> 357 [style=solid label="MINUS"]
  1029 -> 2 [style=solid label="IDENTIFIER"]
  1029 -> 358 [style=solid label="OPEN_PAREN"]
  1029 -> 359 [style=solid label="AND"]
  1029 -> 360 [style=solid label="SCOPE"]
  1029 -> 361 [style=solid label="OPEN_SQUARE"]
  1029 -> 362 [style=solid label="CO_AWAIT"]
  1029 -> 363 [style=solid label="ZERO_LB"]
  1029 -> 364 [style=solid label="ZERO_HB"]
  1029 -> 365 [style=solid label="SINGLE_QUOTE"]
  1029 -> 366 [style=solid label="FALSE"]
  1029 -> 367 [style=solid label="TRUE"]
  1029 -> 368 [style=solid label="NOEXCEPT"]
  1029 -> 17 [style=solid label="OPERATOR"]
  1029 -> 26 [style=solid label="DECLTYPE"]
  1029 -> 369 [style=solid label="DELETE"]
  1029 -> 370 [style=solid label="DOT"]
  1029 -> 184 [style=solid label="UNICODE_8"]
  1029 -> 371 [style=solid label="MULT"]
  1029 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1029 -> 372 [style=solid label="ZERO_LX"]
  1029 -> 373 [style=solid label="ZERO_HX"]
  1029 -> 374 [style=solid label="REQUIRES"]
  1029 -> 375 [style=solid label="NEW"]
  1029 -> 376 [style=solid label="COMPL"]
  1029 -> 377 [style=solid label="NOT"]
  1029 -> 378 [style=solid label="PLUS_PLUS"]
  1029 -> 379 [style=solid label="MINUS_MINUS"]
  1029 -> 380 [style=solid label="THIS"]
  1029 -> 36 [style=solid label="AUTO"]
  1029 -> 381 [style=solid label="NULLPTR"]
  1029 -> 382 [style=solid label="DYNAMIC_CAST"]
  1029 -> 383 [style=solid label="STATIC_CAST"]
  1029 -> 384 [style=solid label="REINTERPRET_CAST"]
  1029 -> 385 [style=solid label="CONST_CAST"]
  1029 -> 386 [style=solid label="TYPEID"]
  1029 -> 37 [style=solid label="CHAR"]
  1029 -> 38 [style=solid label="CHAR8_T"]
  1029 -> 39 [style=solid label="CHAR16_T"]
  1029 -> 40 [style=solid label="CHAR32_T"]
  1029 -> 41 [style=solid label="WCHAR_T"]
  1029 -> 42 [style=solid label="BOOL"]
  1029 -> 43 [style=solid label="SHORT"]
  1029 -> 44 [style=solid label="INT"]
  1029 -> 45 [style=solid label="LONG"]
  1029 -> 46 [style=solid label="SIGNED"]
  1029 -> 47 [style=solid label="UNSIGNED"]
  1029 -> 48 [style=solid label="FLOAT"]
  1029 -> 49 [style=solid label="DOUBLE"]
  1029 -> 50 [style=solid label="VOID"]
  1029 -> 523 [style=solid label="THROW"]
  1029 -> 55 [style=solid label="TYPENAME"]
  1029 -> 387 [style=solid label="SIZEOF"]
  1029 -> 388 [style=solid label="ALIGNOF"]
  1029 -> 524 [style=solid label="CO_YIELD"]
  1029 -> 389 [style=solid label="'0'"]
  1029 -> 390 [style=solid label="'1'"]
  1029 -> 391 [style=solid label="'2'"]
  1029 -> 392 [style=solid label="'3'"]
  1029 -> 393 [style=solid label="'4'"]
  1029 -> 394 [style=solid label="'5'"]
  1029 -> 395 [style=solid label="'6'"]
  1029 -> 396 [style=solid label="'7'"]
  1029 -> 397 [style=solid label="'8'"]
  1029 -> 398 [style=solid label="'9'"]
  1029 -> 205 [style=solid label="'u'"]
  1029 -> 206 [style=solid label="'U'"]
  1029 -> 207 [style=solid label="'L'"]
  1029 -> 208 [style=solid label="'R'"]
  1029 -> 399 [style=dashed label="additive-expression"]
  1029 -> 400 [style=dashed label="and-expression"]
  1029 -> 1457 [style=dashed label="assignment-expression"]
  1029 -> 401 [style=dashed label="await-expression"]
  1029 -> 402 [style=dashed label="binary-literal"]
  1029 -> 403 [style=dashed label="boolean-literal"]
  1029 -> 404 [style=dashed label="cast-expression"]
  1029 -> 405 [style=dashed label="character-literal"]
  1029 -> 65 [style=dashed label="class-name"]
  1029 -> 406 [style=dashed label="compare-expression"]
  1029 -> 67 [style=dashed label="concept-name"]
  1029 -> 526 [style=dashed label="conditional-expression"]
  1029 -> 68 [style=dashed label="conversion-function-id"]
  1029 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1029 -> 410 [style=dashed label="decimal-literal"]
  1029 -> 76 [style=dashed label="decltype-specifier"]
  1029 -> 411 [style=dashed label="delete-expression"]
  1029 -> 412 [style=dashed label="digit"]
  1029 -> 413 [style=dashed label="digit-sequence"]
  1029 -> 414 [style=dashed label="encoding-prefix"]
  1029 -> 84 [style=dashed label="enum-name"]
  1029 -> 415 [style=dashed label="equality-expression"]
  1029 -> 416 [style=dashed label="exclusive-or-expression"]
  1029 -> 417 [style=dashed label="floating-point-literal"]
  1029 -> 418 [style=dashed label="fold-expression"]
  1029 -> 419 [style=dashed label="fractional-constant"]
  1029 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1029 -> 421 [style=dashed label="hexadecimal-literal"]
  1029 -> 422 [style=dashed label="hexadecimal-prefix"]
  1029 -> 423 [style=dashed label="id-expression"]
  1029 -> 424 [style=dashed label="inclusive-or-expression"]
  1029 -> 425 [style=dashed label="integer-literal"]
  1029 -> 426 [style=dashed label="lambda-expression"]
  1029 -> 427 [style=dashed label="lambda-introducer"]
  1029 -> 428 [style=dashed label="literal"]
  1029 -> 95 [style=dashed label="literal-operator-id"]
  1029 -> 429 [style=dashed label="logical-and-expression"]
  1029 -> 528 [style=dashed label="logical-or-expression"]
  1029 -> 431 [style=dashed label="multiplicative-expression"]
  1029 -> 99 [style=dashed label="namespace-alias"]
  1029 -> 102 [style=dashed label="namespace-name"]
  1029 -> 432 [style=dashed label="nested-name-specifier"]
  1029 -> 433 [style=dashed label="new-expression"]
  1029 -> 434 [style=dashed label="noexcept-expression"]
  1029 -> 435 [style=dashed label="nonzero-digit"]
  1029 -> 436 [style=dashed label="octal-literal"]
  1029 -> 108 [style=dashed label="operator-function-id"]
  1029 -> 109 [style=dashed label="placeholder-type-specifier"]
  1029 -> 437 [style=dashed label="pm-expression"]
  1029 -> 438 [style=dashed label="pointer-literal"]
  1029 -> 439 [style=dashed label="postfix-expression"]
  1029 -> 440 [style=dashed label="primary-expression"]
  1029 -> 112 [style=dashed label="qualified-id"]
  1029 -> 441 [style=dashed label="relational-expression"]
  1029 -> 442 [style=dashed label="requires-expression"]
  1029 -> 443 [style=dashed label="shift-expression"]
  1029 -> 114 [style=dashed label="simple-template-id"]
  1029 -> 529 [style=dashed label="simple-type-specifier"]
  1029 -> 445 [style=dashed label="string-literal"]
  1029 -> 120 [style=dashed label="template-id"]
  1029 -> 215 [style=dashed label="template-name"]
  1029 -> 530 [style=dashed label="throw-expression"]
  1029 -> 123 [style=dashed label="type-constraint"]
  1029 -> 124 [style=dashed label="type-name"]
  1029 -> 126 [style=dashed label="typedef-name"]
  1029 -> 531 [style=dashed label="typename-specifier"]
  1029 -> 449 [style=dashed label="unary-expression"]
  1029 -> 450 [style=dashed label="unary-operator"]
  1029 -> 129 [style=dashed label="unqualified-id"]
  1029 -> 451 [style=dashed label="user-defined-character-literal"]
  1029 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1029 -> 453 [style=dashed label="user-defined-integer-literal"]
  1029 -> 454 [style=dashed label="user-defined-literal"]
  1029 -> 455 [style=dashed label="user-defined-string-literal"]
  1029 -> 532 [style=dashed label="yield-expression"]
  1030 [label="State 1030\n\l 27 assignment-operator: EQ •\l"]
  1030 -> "1030R27" [style=solid]
 "1030R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  1031 [label="State 1031\n\l 28 assignment-operator: MULT_EQ •\l"]
  1031 -> "1031R28" [style=solid]
 "1031R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  1032 [label="State 1032\n\l 29 assignment-operator: DIV_EQ •\l"]
  1032 -> "1032R29" [style=solid]
 "1032R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  1033 [label="State 1033\n\l 30 assignment-operator: MOD_EQ •\l"]
  1033 -> "1033R30" [style=solid]
 "1033R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  1034 [label="State 1034\n\l 31 assignment-operator: PLUS_EQ •\l"]
  1034 -> "1034R31" [style=solid]
 "1034R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  1035 [label="State 1035\n\l 32 assignment-operator: MINUS_EQ •\l"]
  1035 -> "1035R32" [style=solid]
 "1035R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  1036 [label="State 1036\n\l 33 assignment-operator: RSHIFT_EQ •\l"]
  1036 -> "1036R33" [style=solid]
 "1036R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  1037 [label="State 1037\n\l 34 assignment-operator: LSHIFT_EQ •\l"]
  1037 -> "1037R34" [style=solid]
 "1037R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  1038 [label="State 1038\n\l 35 assignment-operator: AND_EQ •\l"]
  1038 -> "1038R35" [style=solid]
 "1038R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  1039 [label="State 1039\n\l 36 assignment-operator: XOR_EQ •\l"]
  1039 -> "1039R36" [style=solid]
 "1039R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  1040 [label="State 1040\n\l 37 assignment-operator: OR_EQ •\l"]
  1040 -> "1040R37" [style=solid]
 "1040R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  1041 [label="State 1041\n\l 26 assignment-expression: logical-or-expression assignment-operator • initializer-clause\l"]
  1041 -> 356 [style=solid label="PLUS"]
  1041 -> 357 [style=solid label="MINUS"]
  1041 -> 2 [style=solid label="IDENTIFIER"]
  1041 -> 358 [style=solid label="OPEN_PAREN"]
  1041 -> 359 [style=solid label="AND"]
  1041 -> 360 [style=solid label="SCOPE"]
  1041 -> 361 [style=solid label="OPEN_SQUARE"]
  1041 -> 362 [style=solid label="CO_AWAIT"]
  1041 -> 935 [style=solid label="OPEN_BRACE"]
  1041 -> 363 [style=solid label="ZERO_LB"]
  1041 -> 364 [style=solid label="ZERO_HB"]
  1041 -> 365 [style=solid label="SINGLE_QUOTE"]
  1041 -> 366 [style=solid label="FALSE"]
  1041 -> 367 [style=solid label="TRUE"]
  1041 -> 368 [style=solid label="NOEXCEPT"]
  1041 -> 17 [style=solid label="OPERATOR"]
  1041 -> 26 [style=solid label="DECLTYPE"]
  1041 -> 369 [style=solid label="DELETE"]
  1041 -> 370 [style=solid label="DOT"]
  1041 -> 184 [style=solid label="UNICODE_8"]
  1041 -> 371 [style=solid label="MULT"]
  1041 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1041 -> 372 [style=solid label="ZERO_LX"]
  1041 -> 373 [style=solid label="ZERO_HX"]
  1041 -> 374 [style=solid label="REQUIRES"]
  1041 -> 375 [style=solid label="NEW"]
  1041 -> 376 [style=solid label="COMPL"]
  1041 -> 377 [style=solid label="NOT"]
  1041 -> 378 [style=solid label="PLUS_PLUS"]
  1041 -> 379 [style=solid label="MINUS_MINUS"]
  1041 -> 380 [style=solid label="THIS"]
  1041 -> 36 [style=solid label="AUTO"]
  1041 -> 381 [style=solid label="NULLPTR"]
  1041 -> 382 [style=solid label="DYNAMIC_CAST"]
  1041 -> 383 [style=solid label="STATIC_CAST"]
  1041 -> 384 [style=solid label="REINTERPRET_CAST"]
  1041 -> 385 [style=solid label="CONST_CAST"]
  1041 -> 386 [style=solid label="TYPEID"]
  1041 -> 37 [style=solid label="CHAR"]
  1041 -> 38 [style=solid label="CHAR8_T"]
  1041 -> 39 [style=solid label="CHAR16_T"]
  1041 -> 40 [style=solid label="CHAR32_T"]
  1041 -> 41 [style=solid label="WCHAR_T"]
  1041 -> 42 [style=solid label="BOOL"]
  1041 -> 43 [style=solid label="SHORT"]
  1041 -> 44 [style=solid label="INT"]
  1041 -> 45 [style=solid label="LONG"]
  1041 -> 46 [style=solid label="SIGNED"]
  1041 -> 47 [style=solid label="UNSIGNED"]
  1041 -> 48 [style=solid label="FLOAT"]
  1041 -> 49 [style=solid label="DOUBLE"]
  1041 -> 50 [style=solid label="VOID"]
  1041 -> 523 [style=solid label="THROW"]
  1041 -> 55 [style=solid label="TYPENAME"]
  1041 -> 387 [style=solid label="SIZEOF"]
  1041 -> 388 [style=solid label="ALIGNOF"]
  1041 -> 524 [style=solid label="CO_YIELD"]
  1041 -> 389 [style=solid label="'0'"]
  1041 -> 390 [style=solid label="'1'"]
  1041 -> 391 [style=solid label="'2'"]
  1041 -> 392 [style=solid label="'3'"]
  1041 -> 393 [style=solid label="'4'"]
  1041 -> 394 [style=solid label="'5'"]
  1041 -> 395 [style=solid label="'6'"]
  1041 -> 396 [style=solid label="'7'"]
  1041 -> 397 [style=solid label="'8'"]
  1041 -> 398 [style=solid label="'9'"]
  1041 -> 205 [style=solid label="'u'"]
  1041 -> 206 [style=solid label="'U'"]
  1041 -> 207 [style=solid label="'L'"]
  1041 -> 208 [style=solid label="'R'"]
  1041 -> 399 [style=dashed label="additive-expression"]
  1041 -> 400 [style=dashed label="and-expression"]
  1041 -> 1134 [style=dashed label="assignment-expression"]
  1041 -> 401 [style=dashed label="await-expression"]
  1041 -> 402 [style=dashed label="binary-literal"]
  1041 -> 403 [style=dashed label="boolean-literal"]
  1041 -> 1135 [style=dashed label="braced-init-list"]
  1041 -> 404 [style=dashed label="cast-expression"]
  1041 -> 405 [style=dashed label="character-literal"]
  1041 -> 65 [style=dashed label="class-name"]
  1041 -> 406 [style=dashed label="compare-expression"]
  1041 -> 67 [style=dashed label="concept-name"]
  1041 -> 526 [style=dashed label="conditional-expression"]
  1041 -> 68 [style=dashed label="conversion-function-id"]
  1041 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1041 -> 410 [style=dashed label="decimal-literal"]
  1041 -> 76 [style=dashed label="decltype-specifier"]
  1041 -> 411 [style=dashed label="delete-expression"]
  1041 -> 412 [style=dashed label="digit"]
  1041 -> 413 [style=dashed label="digit-sequence"]
  1041 -> 414 [style=dashed label="encoding-prefix"]
  1041 -> 84 [style=dashed label="enum-name"]
  1041 -> 415 [style=dashed label="equality-expression"]
  1041 -> 416 [style=dashed label="exclusive-or-expression"]
  1041 -> 417 [style=dashed label="floating-point-literal"]
  1041 -> 418 [style=dashed label="fold-expression"]
  1041 -> 419 [style=dashed label="fractional-constant"]
  1041 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1041 -> 421 [style=dashed label="hexadecimal-literal"]
  1041 -> 422 [style=dashed label="hexadecimal-prefix"]
  1041 -> 423 [style=dashed label="id-expression"]
  1041 -> 424 [style=dashed label="inclusive-or-expression"]
  1041 -> 1458 [style=dashed label="initializer-clause"]
  1041 -> 425 [style=dashed label="integer-literal"]
  1041 -> 426 [style=dashed label="lambda-expression"]
  1041 -> 427 [style=dashed label="lambda-introducer"]
  1041 -> 428 [style=dashed label="literal"]
  1041 -> 95 [style=dashed label="literal-operator-id"]
  1041 -> 429 [style=dashed label="logical-and-expression"]
  1041 -> 528 [style=dashed label="logical-or-expression"]
  1041 -> 431 [style=dashed label="multiplicative-expression"]
  1041 -> 99 [style=dashed label="namespace-alias"]
  1041 -> 102 [style=dashed label="namespace-name"]
  1041 -> 432 [style=dashed label="nested-name-specifier"]
  1041 -> 433 [style=dashed label="new-expression"]
  1041 -> 434 [style=dashed label="noexcept-expression"]
  1041 -> 435 [style=dashed label="nonzero-digit"]
  1041 -> 436 [style=dashed label="octal-literal"]
  1041 -> 108 [style=dashed label="operator-function-id"]
  1041 -> 109 [style=dashed label="placeholder-type-specifier"]
  1041 -> 437 [style=dashed label="pm-expression"]
  1041 -> 438 [style=dashed label="pointer-literal"]
  1041 -> 439 [style=dashed label="postfix-expression"]
  1041 -> 440 [style=dashed label="primary-expression"]
  1041 -> 112 [style=dashed label="qualified-id"]
  1041 -> 441 [style=dashed label="relational-expression"]
  1041 -> 442 [style=dashed label="requires-expression"]
  1041 -> 443 [style=dashed label="shift-expression"]
  1041 -> 114 [style=dashed label="simple-template-id"]
  1041 -> 529 [style=dashed label="simple-type-specifier"]
  1041 -> 445 [style=dashed label="string-literal"]
  1041 -> 120 [style=dashed label="template-id"]
  1041 -> 215 [style=dashed label="template-name"]
  1041 -> 530 [style=dashed label="throw-expression"]
  1041 -> 123 [style=dashed label="type-constraint"]
  1041 -> 124 [style=dashed label="type-name"]
  1041 -> 126 [style=dashed label="typedef-name"]
  1041 -> 531 [style=dashed label="typename-specifier"]
  1041 -> 449 [style=dashed label="unary-expression"]
  1041 -> 450 [style=dashed label="unary-operator"]
  1041 -> 129 [style=dashed label="unqualified-id"]
  1041 -> 451 [style=dashed label="user-defined-character-literal"]
  1041 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1041 -> 453 [style=dashed label="user-defined-integer-literal"]
  1041 -> 454 [style=dashed label="user-defined-literal"]
  1041 -> 455 [style=dashed label="user-defined-string-literal"]
  1041 -> 532 [style=dashed label="yield-expression"]
  1042 [label="State 1042\n\l551 linkage-specification: EXTERN string-literal OPEN_BRACE CLOSE_BRACE •\l"]
  1042 -> "1042R551" [style=solid]
 "1042R551" [label="R551", fillcolor=3, shape=diamond, style=filled]
  1043 [label="State 1043\n\l224 declaration-seq: declaration-seq • declaration\l552 linkage-specification: EXTERN string-literal OPEN_BRACE declaration-seq • CLOSE_BRACE\l"]
  1043 -> 1 [style=solid label="USING"]
  1043 -> 2 [style=solid label="IDENTIFIER"]
  1043 -> 3 [style=solid label="SEMICOLON"]
  1043 -> 4 [style=solid label="ALIGNAS"]
  1043 -> 5 [style=solid label="OPEN_PAREN"]
  1043 -> 6 [style=solid label="ELLIPSIS"]
  1043 -> 7 [style=solid label="AND"]
  1043 -> 8 [style=solid label="ASM"]
  1043 -> 9 [style=solid label="SCOPE"]
  1043 -> 10 [style=solid label="OPEN_SQUARE"]
  1043 -> 1459 [style=solid label="CLOSE_BRACE"]
  1043 -> 11 [style=solid label="VIRTUAL"]
  1043 -> 12 [style=solid label="CLASS"]
  1043 -> 13 [style=solid label="STRUCT"]
  1043 -> 14 [style=solid label="UNION"]
  1043 -> 15 [style=solid label="TEMPLATE"]
  1043 -> 16 [style=solid label="AND_AND"]
  1043 -> 17 [style=solid label="OPERATOR"]
  1043 -> 18 [style=solid label="CONST"]
  1043 -> 19 [style=solid label="VOLATILE"]
  1043 -> 20 [style=solid label="FRIEND"]
  1043 -> 21 [style=solid label="TYPEDEF"]
  1043 -> 22 [style=solid label="CONSTEXPR"]
  1043 -> 23 [style=solid label="CONSTEVAL"]
  1043 -> 24 [style=solid label="CONSTINIT"]
  1043 -> 25 [style=solid label="INLINE"]
  1043 -> 26 [style=solid label="DECLTYPE"]
  1043 -> 27 [style=solid label="ENUM"]
  1043 -> 28 [style=solid label="EXTERN"]
  1043 -> 29 [style=solid label="EXPLICIT"]
  1043 -> 157 [style=solid label="EXPORT"]
  1043 -> 31 [style=solid label="MULT"]
  1043 -> 33 [style=solid label="IMPORT"]
  1043 -> 34 [style=solid label="NAMESPACE"]
  1043 -> 35 [style=solid label="COMPL"]
  1043 -> 36 [style=solid label="AUTO"]
  1043 -> 37 [style=solid label="CHAR"]
  1043 -> 38 [style=solid label="CHAR8_T"]
  1043 -> 39 [style=solid label="CHAR16_T"]
  1043 -> 40 [style=solid label="CHAR32_T"]
  1043 -> 41 [style=solid label="WCHAR_T"]
  1043 -> 42 [style=solid label="BOOL"]
  1043 -> 43 [style=solid label="SHORT"]
  1043 -> 44 [style=solid label="INT"]
  1043 -> 45 [style=solid label="LONG"]
  1043 -> 46 [style=solid label="SIGNED"]
  1043 -> 47 [style=solid label="UNSIGNED"]
  1043 -> 48 [style=solid label="FLOAT"]
  1043 -> 49 [style=solid label="DOUBLE"]
  1043 -> 50 [style=solid label="VOID"]
  1043 -> 51 [style=solid label="STATIC_ASSERT"]
  1043 -> 52 [style=solid label="STATIC"]
  1043 -> 53 [style=solid label="THREAD_LOCAL"]
  1043 -> 54 [style=solid label="MUTABLE"]
  1043 -> 55 [style=solid label="TYPENAME"]
  1043 -> 56 [style=dashed label="alias-declaration"]
  1043 -> 57 [style=dashed label="alignment-specifier"]
  1043 -> 58 [style=dashed label="asm-declaration"]
  1043 -> 59 [style=dashed label="attribute-declaration"]
  1043 -> 60 [style=dashed label="attribute-specifier"]
  1043 -> 61 [style=dashed label="attribute-specifier-seq"]
  1043 -> 62 [style=dashed label="block-declaration"]
  1043 -> 63 [style=dashed label="class-head"]
  1043 -> 64 [style=dashed label="class-key"]
  1043 -> 65 [style=dashed label="class-name"]
  1043 -> 66 [style=dashed label="class-specifier"]
  1043 -> 67 [style=dashed label="concept-name"]
  1043 -> 68 [style=dashed label="conversion-function-id"]
  1043 -> 69 [style=dashed label="cv-qualifier"]
  1043 -> 70 [style=dashed label="decl-specifier"]
  1043 -> 71 [style=dashed label="decl-specifier-seq"]
  1043 -> 285 [style=dashed label="declaration"]
  1043 -> 74 [style=dashed label="declarator"]
  1043 -> 75 [style=dashed label="declarator-id"]
  1043 -> 76 [style=dashed label="decltype-specifier"]
  1043 -> 77 [style=dashed label="deduction-guide"]
  1043 -> 78 [style=dashed label="defining-type-specifier"]
  1043 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1043 -> 80 [style=dashed label="elaborated-type-specifier"]
  1043 -> 81 [style=dashed label="empty-declaration"]
  1043 -> 82 [style=dashed label="enum-head"]
  1043 -> 83 [style=dashed label="enum-key"]
  1043 -> 84 [style=dashed label="enum-name"]
  1043 -> 85 [style=dashed label="enum-specifier"]
  1043 -> 86 [style=dashed label="explicit-instantiation"]
  1043 -> 87 [style=dashed label="explicit-specialization"]
  1043 -> 88 [style=dashed label="explicit-specifier"]
  1043 -> 89 [style=dashed label="export-declaration"]
  1043 -> 90 [style=dashed label="function-definition"]
  1043 -> 91 [style=dashed label="function-specifier"]
  1043 -> 93 [style=dashed label="id-expression"]
  1043 -> 94 [style=dashed label="linkage-specification"]
  1043 -> 95 [style=dashed label="literal-operator-id"]
  1043 -> 97 [style=dashed label="module-import-declaration"]
  1043 -> 98 [style=dashed label="named-namespace-definition"]
  1043 -> 99 [style=dashed label="namespace-alias"]
  1043 -> 100 [style=dashed label="namespace-alias-definition"]
  1043 -> 101 [style=dashed label="namespace-definition"]
  1043 -> 102 [style=dashed label="namespace-name"]
  1043 -> 103 [style=dashed label="nested-name-specifier"]
  1043 -> 104 [style=dashed label="nested-namespace-definition"]
  1043 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  1043 -> 106 [style=dashed label="noptr-declarator"]
  1043 -> 107 [style=dashed label="opaque-enum-declaration"]
  1043 -> 108 [style=dashed label="operator-function-id"]
  1043 -> 109 [style=dashed label="placeholder-type-specifier"]
  1043 -> 110 [style=dashed label="ptr-declarator"]
  1043 -> 111 [style=dashed label="ptr-operator"]
  1043 -> 112 [style=dashed label="qualified-id"]
  1043 -> 113 [style=dashed label="simple-declaration"]
  1043 -> 114 [style=dashed label="simple-template-id"]
  1043 -> 115 [style=dashed label="simple-type-specifier"]
  1043 -> 116 [style=dashed label="static_assert-declaration"]
  1043 -> 117 [style=dashed label="storage-class-specifier"]
  1043 -> 118 [style=dashed label="template-declaration"]
  1043 -> 119 [style=dashed label="template-head"]
  1043 -> 120 [style=dashed label="template-id"]
  1043 -> 121 [style=dashed label="template-name"]
  1043 -> 123 [style=dashed label="type-constraint"]
  1043 -> 124 [style=dashed label="type-name"]
  1043 -> 125 [style=dashed label="type-specifier"]
  1043 -> 126 [style=dashed label="typedef-name"]
  1043 -> 127 [style=dashed label="typename-specifier"]
  1043 -> 128 [style=dashed label="unnamed-namespace-definition"]
  1043 -> 129 [style=dashed label="unqualified-id"]
  1043 -> 130 [style=dashed label="using-declaration"]
  1043 -> 131 [style=dashed label="using-directive"]
  1043 -> 132 [style=dashed label="using-enum-declaration"]
  1044 [label="State 1044\n\l322 explicit-specifier: EXPLICIT OPEN_PAREN constant-expression CLOSE_PAREN •\l"]
  1044 -> "1044R322" [style=solid]
 "1044R322" [label="R322", fillcolor=3, shape=diamond, style=filled]
  1045 [label="State 1045\n\l330 export-declaration: EXPORT OPEN_BRACE declaration-seq CLOSE_BRACE •\l"]
  1045 -> "1045R330" [style=solid]
 "1045R330" [label="R330", fillcolor=3, shape=diamond, style=filled]
  1046 [label="State 1046\n\l619 module-declaration: EXPORT MODULE module-name SEMICOLON •\l"]
  1046 -> "1046R619" [style=solid]
 "1046R619" [label="R619", fillcolor=3, shape=diamond, style=filled]
  1047 [label="State 1047\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l623 module-declaration: EXPORT MODULE module-name attribute-specifier-seq • SEMICOLON\l"]
  1047 -> 1460 [style=solid label="SEMICOLON"]
  1047 -> 4 [style=solid label="ALIGNAS"]
  1047 -> 10 [style=solid label="OPEN_SQUARE"]
  1047 -> 57 [style=dashed label="alignment-specifier"]
  1047 -> 260 [style=dashed label="attribute-specifier"]
  1048 [label="State 1048\n\l621 module-declaration: EXPORT MODULE module-name module-partition • SEMICOLON\l625                   | EXPORT MODULE module-name module-partition • attribute-specifier-seq SEMICOLON\l"]
  1048 -> 1461 [style=solid label="SEMICOLON"]
  1048 -> 4 [style=solid label="ALIGNAS"]
  1048 -> 10 [style=solid label="OPEN_SQUARE"]
  1048 -> 57 [style=dashed label="alignment-specifier"]
  1048 -> 60 [style=dashed label="attribute-specifier"]
  1048 -> 1462 [style=dashed label="attribute-specifier-seq"]
  1049 [label="State 1049\n\l624 module-declaration: MODULE module-name attribute-specifier-seq SEMICOLON •\l"]
  1049 -> "1049R624" [style=solid]
 "1049R624" [label="R624", fillcolor=3, shape=diamond, style=filled]
  1050 [label="State 1050\n\l622 module-declaration: MODULE module-name module-partition SEMICOLON •\l"]
  1050 -> "1050R622" [style=solid]
 "1050R622" [label="R622", fillcolor=3, shape=diamond, style=filled]
  1051 [label="State 1051\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l626 module-declaration: MODULE module-name module-partition attribute-specifier-seq • SEMICOLON\l"]
  1051 -> 1463 [style=solid label="SEMICOLON"]
  1051 -> 4 [style=solid label="ALIGNAS"]
  1051 -> 10 [style=solid label="OPEN_SQUARE"]
  1051 -> 57 [style=dashed label="alignment-specifier"]
  1051 -> 260 [style=dashed label="attribute-specifier"]
  1052 [label="State 1052\n\l636 module-name-qualifier: module-name-qualifier IDENTIFIER DOT •\l"]
  1052 -> "1052R636" [style=solid]
 "1052R636" [label="R636", fillcolor=3, shape=diamond, style=filled]
  1053 [label="State 1053\n\l636 module-name-qualifier: module-name-qualifier IDENTIFIER • DOT\l638 module-partition: COLON module-name-qualifier IDENTIFIER •\l"]
  1053 -> 1052 [style=solid label="DOT"]
  1053 -> "1053R638" [style=solid]
 "1053R638" [label="R638", fillcolor=3, shape=diamond, style=filled]
  1054 [label="State 1054\n\l419 header-name: LESS h-char-sequence GREATER •\l"]
  1054 -> "1054R419" [style=solid]
 "1054R419" [label="R419", fillcolor=3, shape=diamond, style=filled]
  1055 [label="State 1055\n\l415 h-char-sequence: h-char-sequence h-char •\l"]
  1055 -> "1055R415" [style=solid]
 "1055R415" [label="R415", fillcolor=3, shape=diamond, style=filled]
  1056 [label="State 1056\n\l420 header-name: DOUBLE_QUOTE q-char-sequence DOUBLE_QUOTE •\l"]
  1056 -> "1056R420" [style=solid]
 "1056R420" [label="R420", fillcolor=3, shape=diamond, style=filled]
  1057 [label="State 1057\n\l908 q-char-sequence: q-char-sequence q-char •\l"]
  1057 -> "1057R908" [style=solid]
 "1057R908" [label="R908", fillcolor=3, shape=diamond, style=filled]
  1058 [label="State 1058\n\l632 module-import-declaration: IMPORT header-name attribute-specifier-seq SEMICOLON •\l"]
  1058 -> "1058R632" [style=solid]
 "1058R632" [label="R632", fillcolor=3, shape=diamond, style=filled]
  1059 [label="State 1059\n\l628 module-import-declaration: IMPORT module-name attribute-specifier-seq SEMICOLON •\l"]
  1059 -> "1059R628" [style=solid]
 "1059R628" [label="R628", fillcolor=3, shape=diamond, style=filled]
  1060 [label="State 1060\n\l630 module-import-declaration: IMPORT module-partition attribute-specifier-seq SEMICOLON •\l"]
  1060 -> "1060R630" [style=solid]
 "1060R630" [label="R630", fillcolor=3, shape=diamond, style=filled]
  1061 [label="State 1061\n\l657 nested-name-specifier: namespace-name • SCOPE\l912 qualified-namespace-specifier: namespace-name •\l"]
  1061 -> 319 [style=solid label="SCOPE"]
  1061 -> "1061R912" [style=solid]
 "1061R912" [label="R912", fillcolor=3, shape=diamond, style=filled]
  1062 [label="State 1062\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l911 qualified-namespace-specifier: nested-name-specifier • namespace-name\l"]
  1062 -> 751 [style=solid label="IDENTIFIER"]
  1062 -> 350 [style=solid label="TEMPLATE"]
  1062 -> 99 [style=dashed label="namespace-alias"]
  1062 -> 1464 [style=dashed label="namespace-name"]
  1062 -> 534 [style=dashed label="simple-template-id"]
  1062 -> 142 [style=dashed label="template-name"]
  1063 [label="State 1063\n\l648 namespace-alias-definition: NAMESPACE IDENTIFIER EQ qualified-namespace-specifier • SEMICOLON\l"]
  1063 -> 1465 [style=solid label="SEMICOLON"]
  1064 [label="State 1064\n\l644 named-namespace-definition: NAMESPACE IDENTIFIER OPEN_BRACE namespace-body • CLOSE_BRACE\l"]
  1064 -> 1466 [style=solid label="CLOSE_BRACE"]
  1065 [label="State 1065\n\l1137 unnamed-namespace-definition: NAMESPACE OPEN_BRACE namespace-body CLOSE_BRACE •\l"]
  1065 -> "1065R1137" [style=solid]
 "1065R1137" [label="R1137", fillcolor=3, shape=diamond, style=filled]
  1066 [label="State 1066\n\l646 named-namespace-definition: NAMESPACE attribute-specifier-seq IDENTIFIER OPEN_BRACE • namespace-body CLOSE_BRACE\l"]
  1066 -> 1 [style=solid label="USING"]
  1066 -> 2 [style=solid label="IDENTIFIER"]
  1066 -> 3 [style=solid label="SEMICOLON"]
  1066 -> 4 [style=solid label="ALIGNAS"]
  1066 -> 5 [style=solid label="OPEN_PAREN"]
  1066 -> 6 [style=solid label="ELLIPSIS"]
  1066 -> 7 [style=solid label="AND"]
  1066 -> 8 [style=solid label="ASM"]
  1066 -> 9 [style=solid label="SCOPE"]
  1066 -> 10 [style=solid label="OPEN_SQUARE"]
  1066 -> 11 [style=solid label="VIRTUAL"]
  1066 -> 12 [style=solid label="CLASS"]
  1066 -> 13 [style=solid label="STRUCT"]
  1066 -> 14 [style=solid label="UNION"]
  1066 -> 15 [style=solid label="TEMPLATE"]
  1066 -> 16 [style=solid label="AND_AND"]
  1066 -> 17 [style=solid label="OPERATOR"]
  1066 -> 18 [style=solid label="CONST"]
  1066 -> 19 [style=solid label="VOLATILE"]
  1066 -> 20 [style=solid label="FRIEND"]
  1066 -> 21 [style=solid label="TYPEDEF"]
  1066 -> 22 [style=solid label="CONSTEXPR"]
  1066 -> 23 [style=solid label="CONSTEVAL"]
  1066 -> 24 [style=solid label="CONSTINIT"]
  1066 -> 25 [style=solid label="INLINE"]
  1066 -> 26 [style=solid label="DECLTYPE"]
  1066 -> 27 [style=solid label="ENUM"]
  1066 -> 28 [style=solid label="EXTERN"]
  1066 -> 29 [style=solid label="EXPLICIT"]
  1066 -> 157 [style=solid label="EXPORT"]
  1066 -> 31 [style=solid label="MULT"]
  1066 -> 33 [style=solid label="IMPORT"]
  1066 -> 34 [style=solid label="NAMESPACE"]
  1066 -> 35 [style=solid label="COMPL"]
  1066 -> 36 [style=solid label="AUTO"]
  1066 -> 37 [style=solid label="CHAR"]
  1066 -> 38 [style=solid label="CHAR8_T"]
  1066 -> 39 [style=solid label="CHAR16_T"]
  1066 -> 40 [style=solid label="CHAR32_T"]
  1066 -> 41 [style=solid label="WCHAR_T"]
  1066 -> 42 [style=solid label="BOOL"]
  1066 -> 43 [style=solid label="SHORT"]
  1066 -> 44 [style=solid label="INT"]
  1066 -> 45 [style=solid label="LONG"]
  1066 -> 46 [style=solid label="SIGNED"]
  1066 -> 47 [style=solid label="UNSIGNED"]
  1066 -> 48 [style=solid label="FLOAT"]
  1066 -> 49 [style=solid label="DOUBLE"]
  1066 -> 50 [style=solid label="VOID"]
  1066 -> 51 [style=solid label="STATIC_ASSERT"]
  1066 -> 52 [style=solid label="STATIC"]
  1066 -> 53 [style=solid label="THREAD_LOCAL"]
  1066 -> 54 [style=solid label="MUTABLE"]
  1066 -> 55 [style=solid label="TYPENAME"]
  1066 -> 56 [style=dashed label="alias-declaration"]
  1066 -> 57 [style=dashed label="alignment-specifier"]
  1066 -> 58 [style=dashed label="asm-declaration"]
  1066 -> 59 [style=dashed label="attribute-declaration"]
  1066 -> 60 [style=dashed label="attribute-specifier"]
  1066 -> 61 [style=dashed label="attribute-specifier-seq"]
  1066 -> 62 [style=dashed label="block-declaration"]
  1066 -> 63 [style=dashed label="class-head"]
  1066 -> 64 [style=dashed label="class-key"]
  1066 -> 65 [style=dashed label="class-name"]
  1066 -> 66 [style=dashed label="class-specifier"]
  1066 -> 67 [style=dashed label="concept-name"]
  1066 -> 68 [style=dashed label="conversion-function-id"]
  1066 -> 69 [style=dashed label="cv-qualifier"]
  1066 -> 70 [style=dashed label="decl-specifier"]
  1066 -> 71 [style=dashed label="decl-specifier-seq"]
  1066 -> 72 [style=dashed label="declaration"]
  1066 -> 566 [style=dashed label="declaration-seq"]
  1066 -> 74 [style=dashed label="declarator"]
  1066 -> 75 [style=dashed label="declarator-id"]
  1066 -> 76 [style=dashed label="decltype-specifier"]
  1066 -> 77 [style=dashed label="deduction-guide"]
  1066 -> 78 [style=dashed label="defining-type-specifier"]
  1066 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1066 -> 80 [style=dashed label="elaborated-type-specifier"]
  1066 -> 81 [style=dashed label="empty-declaration"]
  1066 -> 82 [style=dashed label="enum-head"]
  1066 -> 83 [style=dashed label="enum-key"]
  1066 -> 84 [style=dashed label="enum-name"]
  1066 -> 85 [style=dashed label="enum-specifier"]
  1066 -> 86 [style=dashed label="explicit-instantiation"]
  1066 -> 87 [style=dashed label="explicit-specialization"]
  1066 -> 88 [style=dashed label="explicit-specifier"]
  1066 -> 89 [style=dashed label="export-declaration"]
  1066 -> 90 [style=dashed label="function-definition"]
  1066 -> 91 [style=dashed label="function-specifier"]
  1066 -> 93 [style=dashed label="id-expression"]
  1066 -> 94 [style=dashed label="linkage-specification"]
  1066 -> 95 [style=dashed label="literal-operator-id"]
  1066 -> 97 [style=dashed label="module-import-declaration"]
  1066 -> 98 [style=dashed label="named-namespace-definition"]
  1066 -> 99 [style=dashed label="namespace-alias"]
  1066 -> 100 [style=dashed label="namespace-alias-definition"]
  1066 -> 1467 [style=dashed label="namespace-body"]
  1066 -> 101 [style=dashed label="namespace-definition"]
  1066 -> 102 [style=dashed label="namespace-name"]
  1066 -> 103 [style=dashed label="nested-name-specifier"]
  1066 -> 104 [style=dashed label="nested-namespace-definition"]
  1066 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  1066 -> 106 [style=dashed label="noptr-declarator"]
  1066 -> 107 [style=dashed label="opaque-enum-declaration"]
  1066 -> 108 [style=dashed label="operator-function-id"]
  1066 -> 109 [style=dashed label="placeholder-type-specifier"]
  1066 -> 110 [style=dashed label="ptr-declarator"]
  1066 -> 111 [style=dashed label="ptr-operator"]
  1066 -> 112 [style=dashed label="qualified-id"]
  1066 -> 113 [style=dashed label="simple-declaration"]
  1066 -> 114 [style=dashed label="simple-template-id"]
  1066 -> 115 [style=dashed label="simple-type-specifier"]
  1066 -> 116 [style=dashed label="static_assert-declaration"]
  1066 -> 117 [style=dashed label="storage-class-specifier"]
  1066 -> 118 [style=dashed label="template-declaration"]
  1066 -> 119 [style=dashed label="template-head"]
  1066 -> 120 [style=dashed label="template-id"]
  1066 -> 121 [style=dashed label="template-name"]
  1066 -> 123 [style=dashed label="type-constraint"]
  1066 -> 124 [style=dashed label="type-name"]
  1066 -> 125 [style=dashed label="type-specifier"]
  1066 -> 126 [style=dashed label="typedef-name"]
  1066 -> 127 [style=dashed label="typename-specifier"]
  1066 -> 128 [style=dashed label="unnamed-namespace-definition"]
  1066 -> 129 [style=dashed label="unqualified-id"]
  1066 -> 130 [style=dashed label="using-declaration"]
  1066 -> 131 [style=dashed label="using-directive"]
  1066 -> 132 [style=dashed label="using-enum-declaration"]
  1067 [label="State 1067\n\l1139 unnamed-namespace-definition: NAMESPACE attribute-specifier-seq OPEN_BRACE namespace-body • CLOSE_BRACE\l"]
  1067 -> 1468 [style=solid label="CLOSE_BRACE"]
  1068 [label="State 1068\n\l274 enclosing-namespace-specifier: enclosing-namespace-specifier SCOPE IDENTIFIER •\l662 nested-namespace-definition: NAMESPACE enclosing-namespace-specifier SCOPE IDENTIFIER • OPEN_BRACE namespace-body CLOSE_BRACE\l"]
  1068 -> 1469 [style=solid label="OPEN_BRACE"]
  1068 -> "1068R274" [style=solid]
 "1068R274" [label="R274", fillcolor=3, shape=diamond, style=filled]
  1069 [label="State 1069\n\l275 enclosing-namespace-specifier: enclosing-namespace-specifier SCOPE INLINE • IDENTIFIER\l663 nested-namespace-definition: NAMESPACE enclosing-namespace-specifier SCOPE INLINE • IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE\l"]
  1069 -> 1470 [style=solid label="IDENTIFIER"]
  1070 [label="State 1070\n\l1024 static_assert-declaration: STATIC_ASSERT OPEN_PAREN constant-expression CLOSE_PAREN • SEMICOLON\l"]
  1070 -> 1471 [style=solid label="SEMICOLON"]
  1071 [label="State 1071\n\l1025 static_assert-declaration: STATIC_ASSERT OPEN_PAREN constant-expression COMMA • string-literal CLOSE_PAREN SEMICOLON\l"]
  1071 -> 184 [style=solid label="UNICODE_8"]
  1071 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1071 -> 205 [style=solid label="'u'"]
  1071 -> 206 [style=solid label="'U'"]
  1071 -> 207 [style=solid label="'L'"]
  1071 -> 208 [style=solid label="'R'"]
  1071 -> 211 [style=dashed label="encoding-prefix"]
  1071 -> 1472 [style=dashed label="string-literal"]
  1072 [label="State 1072\n\l661 nested-name-specifier: nested-name-specifier TEMPLATE simple-template-id • SCOPE\l1114 typename-specifier: TYPENAME nested-name-specifier TEMPLATE simple-template-id •\l"]
  1072 -> 1210 [style=solid label="SCOPE"]
  1072 -> "1072R1114d" [label="[SCOPE]", style=solid]
 "1072R1114d" [label="R1114", fillcolor=5, shape=diamond, style=filled]
  1072 -> "1072R1114" [style=solid]
 "1072R1114" [label="R1114", fillcolor=3, shape=diamond, style=filled]
  1073 [label="State 1073\n\l657 nested-name-specifier: namespace-name • SCOPE\l1171 using-directive: attribute-specifier-seq USING NAMESPACE namespace-name • SEMICOLON\l"]
  1073 -> 1473 [style=solid label="SEMICOLON"]
  1073 -> 319 [style=solid label="SCOPE"]
  1074 [label="State 1074\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l1173 using-directive: attribute-specifier-seq USING NAMESPACE nested-name-specifier • namespace-name SEMICOLON\l"]
  1074 -> 751 [style=solid label="IDENTIFIER"]
  1074 -> 350 [style=solid label="TEMPLATE"]
  1074 -> 99 [style=dashed label="namespace-alias"]
  1074 -> 1474 [style=dashed label="namespace-name"]
  1074 -> 534 [style=dashed label="simple-template-id"]
  1074 -> 142 [style=dashed label="template-name"]
  1075 [label="State 1075\n\l 21 asm-declaration: attribute-specifier-seq ASM OPEN_PAREN string-literal • CLOSE_PAREN SEMICOLON\l"]
  1075 -> 1475 [style=solid label="CLOSE_PAREN"]
  1076 [label="State 1076\n\l462 identifier-list: identifier-list • COMMA IDENTIFIER\l966 simple-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE identifier-list • CLOSE_SQUARE initializer SEMICOLON\l"]
  1076 -> 1131 [style=solid label="COMMA"]
  1076 -> 1476 [style=solid label="CLOSE_SQUARE"]
  1077 [label="State 1077\n\l397 function-definition: attribute-specifier-seq decl-specifier-seq declarator function-body •\l"]
  1077 -> "1077R397" [style=solid]
 "1077R397" [label="R397", fillcolor=3, shape=diamond, style=filled]
  1078 [label="State 1078\n\l405 function-definition: attribute-specifier-seq decl-specifier-seq declarator requires-clause • function-body\l471 init-declarator: declarator requires-clause •\l"]
  1078 -> 286 [style=solid label="EQ"]
  1078 -> 288 [style=solid label="COLON"]
  1078 -> 289 [style=solid label="OPEN_BRACE"]
  1078 -> 291 [style=solid label="TRY"]
  1078 -> 294 [style=dashed label="compound-statement"]
  1078 -> 295 [style=dashed label="ctor-initializer"]
  1078 -> 1477 [style=dashed label="function-body"]
  1078 -> 297 [style=dashed label="function-try-block"]
  1078 -> "1078R471" [style=solid]
 "1078R471" [label="R471", fillcolor=3, shape=diamond, style=filled]
  1079 [label="State 1079\n\l401 function-definition: attribute-specifier-seq decl-specifier-seq declarator virt-specifier-seq • function-body\l1179 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  1079 -> 286 [style=solid label="EQ"]
  1079 -> 288 [style=solid label="COLON"]
  1079 -> 289 [style=solid label="OPEN_BRACE"]
  1079 -> 290 [style=solid label="FINAL"]
  1079 -> 291 [style=solid label="TRY"]
  1079 -> 293 [style=solid label="OVERRIDE"]
  1079 -> 294 [style=dashed label="compound-statement"]
  1079 -> 295 [style=dashed label="ctor-initializer"]
  1079 -> 1478 [style=dashed label="function-body"]
  1079 -> 297 [style=dashed label="function-try-block"]
  1079 -> 703 [style=dashed label="virt-specifier"]
  1080 [label="State 1080\n\l965 simple-declaration: attribute-specifier-seq decl-specifier-seq init-declarator-list SEMICOLON •\l"]
  1080 -> "1080R965" [style=solid]
 "1080R965" [label="R965", fillcolor=3, shape=diamond, style=filled]
  1081 [label="State 1081\n\l968 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE • identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1081 -> 640 [style=solid label="IDENTIFIER"]
  1081 -> 1479 [style=dashed label="identifier-list"]
  1082 [label="State 1082\n\l403 function-definition: attribute-specifier-seq declarator requires-clause function-body •\l"]
  1082 -> "1082R403" [style=solid]
 "1082R403" [label="R403", fillcolor=3, shape=diamond, style=filled]
  1083 [label="State 1083\n\l399 function-definition: attribute-specifier-seq declarator virt-specifier-seq function-body •\l"]
  1083 -> "1083R399" [style=solid]
 "1083R399" [label="R399", fillcolor=3, shape=diamond, style=filled]
  1084 [label="State 1084\n\l284 enum-head: enum-key attribute-specifier-seq enum-head-name •\l288          | enum-key attribute-specifier-seq enum-head-name • enum-base\l"]
  1084 -> 305 [style=solid label="COLON"]
  1084 -> 1480 [style=dashed label="enum-base"]
  1084 -> "1084R284" [style=solid]
 "1084R284" [label="R284", fillcolor=3, shape=diamond, style=filled]
  1085 [label="State 1085\n\l287 enum-head: enum-key enum-head-name enum-base •\l"]
  1085 -> "1085R287" [style=solid]
 "1085R287" [label="R287", fillcolor=3, shape=diamond, style=filled]
  1086 [label="State 1086\n\l605 member-declarator: IDENTIFIER COLON • constant-expression\l609                  | IDENTIFIER COLON • constant-expression brace-or-equal-initializer\l"]
  1086 -> 356 [style=solid label="PLUS"]
  1086 -> 357 [style=solid label="MINUS"]
  1086 -> 2 [style=solid label="IDENTIFIER"]
  1086 -> 358 [style=solid label="OPEN_PAREN"]
  1086 -> 359 [style=solid label="AND"]
  1086 -> 360 [style=solid label="SCOPE"]
  1086 -> 361 [style=solid label="OPEN_SQUARE"]
  1086 -> 362 [style=solid label="CO_AWAIT"]
  1086 -> 363 [style=solid label="ZERO_LB"]
  1086 -> 364 [style=solid label="ZERO_HB"]
  1086 -> 365 [style=solid label="SINGLE_QUOTE"]
  1086 -> 366 [style=solid label="FALSE"]
  1086 -> 367 [style=solid label="TRUE"]
  1086 -> 368 [style=solid label="NOEXCEPT"]
  1086 -> 17 [style=solid label="OPERATOR"]
  1086 -> 26 [style=solid label="DECLTYPE"]
  1086 -> 369 [style=solid label="DELETE"]
  1086 -> 370 [style=solid label="DOT"]
  1086 -> 184 [style=solid label="UNICODE_8"]
  1086 -> 371 [style=solid label="MULT"]
  1086 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1086 -> 372 [style=solid label="ZERO_LX"]
  1086 -> 373 [style=solid label="ZERO_HX"]
  1086 -> 374 [style=solid label="REQUIRES"]
  1086 -> 375 [style=solid label="NEW"]
  1086 -> 376 [style=solid label="COMPL"]
  1086 -> 377 [style=solid label="NOT"]
  1086 -> 378 [style=solid label="PLUS_PLUS"]
  1086 -> 379 [style=solid label="MINUS_MINUS"]
  1086 -> 380 [style=solid label="THIS"]
  1086 -> 36 [style=solid label="AUTO"]
  1086 -> 381 [style=solid label="NULLPTR"]
  1086 -> 382 [style=solid label="DYNAMIC_CAST"]
  1086 -> 383 [style=solid label="STATIC_CAST"]
  1086 -> 384 [style=solid label="REINTERPRET_CAST"]
  1086 -> 385 [style=solid label="CONST_CAST"]
  1086 -> 386 [style=solid label="TYPEID"]
  1086 -> 37 [style=solid label="CHAR"]
  1086 -> 38 [style=solid label="CHAR8_T"]
  1086 -> 39 [style=solid label="CHAR16_T"]
  1086 -> 40 [style=solid label="CHAR32_T"]
  1086 -> 41 [style=solid label="WCHAR_T"]
  1086 -> 42 [style=solid label="BOOL"]
  1086 -> 43 [style=solid label="SHORT"]
  1086 -> 44 [style=solid label="INT"]
  1086 -> 45 [style=solid label="LONG"]
  1086 -> 46 [style=solid label="SIGNED"]
  1086 -> 47 [style=solid label="UNSIGNED"]
  1086 -> 48 [style=solid label="FLOAT"]
  1086 -> 49 [style=solid label="DOUBLE"]
  1086 -> 50 [style=solid label="VOID"]
  1086 -> 55 [style=solid label="TYPENAME"]
  1086 -> 387 [style=solid label="SIZEOF"]
  1086 -> 388 [style=solid label="ALIGNOF"]
  1086 -> 389 [style=solid label="'0'"]
  1086 -> 390 [style=solid label="'1'"]
  1086 -> 391 [style=solid label="'2'"]
  1086 -> 392 [style=solid label="'3'"]
  1086 -> 393 [style=solid label="'4'"]
  1086 -> 394 [style=solid label="'5'"]
  1086 -> 395 [style=solid label="'6'"]
  1086 -> 396 [style=solid label="'7'"]
  1086 -> 397 [style=solid label="'8'"]
  1086 -> 398 [style=solid label="'9'"]
  1086 -> 205 [style=solid label="'u'"]
  1086 -> 206 [style=solid label="'U'"]
  1086 -> 207 [style=solid label="'L'"]
  1086 -> 208 [style=solid label="'R'"]
  1086 -> 399 [style=dashed label="additive-expression"]
  1086 -> 400 [style=dashed label="and-expression"]
  1086 -> 401 [style=dashed label="await-expression"]
  1086 -> 402 [style=dashed label="binary-literal"]
  1086 -> 403 [style=dashed label="boolean-literal"]
  1086 -> 404 [style=dashed label="cast-expression"]
  1086 -> 405 [style=dashed label="character-literal"]
  1086 -> 65 [style=dashed label="class-name"]
  1086 -> 406 [style=dashed label="compare-expression"]
  1086 -> 67 [style=dashed label="concept-name"]
  1086 -> 407 [style=dashed label="conditional-expression"]
  1086 -> 1481 [style=dashed label="constant-expression"]
  1086 -> 68 [style=dashed label="conversion-function-id"]
  1086 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1086 -> 410 [style=dashed label="decimal-literal"]
  1086 -> 76 [style=dashed label="decltype-specifier"]
  1086 -> 411 [style=dashed label="delete-expression"]
  1086 -> 412 [style=dashed label="digit"]
  1086 -> 413 [style=dashed label="digit-sequence"]
  1086 -> 414 [style=dashed label="encoding-prefix"]
  1086 -> 84 [style=dashed label="enum-name"]
  1086 -> 415 [style=dashed label="equality-expression"]
  1086 -> 416 [style=dashed label="exclusive-or-expression"]
  1086 -> 417 [style=dashed label="floating-point-literal"]
  1086 -> 418 [style=dashed label="fold-expression"]
  1086 -> 419 [style=dashed label="fractional-constant"]
  1086 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1086 -> 421 [style=dashed label="hexadecimal-literal"]
  1086 -> 422 [style=dashed label="hexadecimal-prefix"]
  1086 -> 423 [style=dashed label="id-expression"]
  1086 -> 424 [style=dashed label="inclusive-or-expression"]
  1086 -> 425 [style=dashed label="integer-literal"]
  1086 -> 426 [style=dashed label="lambda-expression"]
  1086 -> 427 [style=dashed label="lambda-introducer"]
  1086 -> 428 [style=dashed label="literal"]
  1086 -> 95 [style=dashed label="literal-operator-id"]
  1086 -> 429 [style=dashed label="logical-and-expression"]
  1086 -> 430 [style=dashed label="logical-or-expression"]
  1086 -> 431 [style=dashed label="multiplicative-expression"]
  1086 -> 99 [style=dashed label="namespace-alias"]
  1086 -> 102 [style=dashed label="namespace-name"]
  1086 -> 432 [style=dashed label="nested-name-specifier"]
  1086 -> 433 [style=dashed label="new-expression"]
  1086 -> 434 [style=dashed label="noexcept-expression"]
  1086 -> 435 [style=dashed label="nonzero-digit"]
  1086 -> 436 [style=dashed label="octal-literal"]
  1086 -> 108 [style=dashed label="operator-function-id"]
  1086 -> 109 [style=dashed label="placeholder-type-specifier"]
  1086 -> 437 [style=dashed label="pm-expression"]
  1086 -> 438 [style=dashed label="pointer-literal"]
  1086 -> 439 [style=dashed label="postfix-expression"]
  1086 -> 440 [style=dashed label="primary-expression"]
  1086 -> 112 [style=dashed label="qualified-id"]
  1086 -> 441 [style=dashed label="relational-expression"]
  1086 -> 442 [style=dashed label="requires-expression"]
  1086 -> 443 [style=dashed label="shift-expression"]
  1086 -> 114 [style=dashed label="simple-template-id"]
  1086 -> 529 [style=dashed label="simple-type-specifier"]
  1086 -> 445 [style=dashed label="string-literal"]
  1086 -> 120 [style=dashed label="template-id"]
  1086 -> 215 [style=dashed label="template-name"]
  1086 -> 123 [style=dashed label="type-constraint"]
  1086 -> 124 [style=dashed label="type-name"]
  1086 -> 126 [style=dashed label="typedef-name"]
  1086 -> 531 [style=dashed label="typename-specifier"]
  1086 -> 449 [style=dashed label="unary-expression"]
  1086 -> 450 [style=dashed label="unary-operator"]
  1086 -> 129 [style=dashed label="unqualified-id"]
  1086 -> 451 [style=dashed label="user-defined-character-literal"]
  1086 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1086 -> 453 [style=dashed label="user-defined-integer-literal"]
  1086 -> 454 [style=dashed label="user-defined-literal"]
  1086 -> 455 [style=dashed label="user-defined-string-literal"]
  1087 [label="State 1087\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l607 member-declarator: IDENTIFIER attribute-specifier-seq • COLON constant-expression\l611                  | IDENTIFIER attribute-specifier-seq • COLON constant-expression brace-or-equal-initializer\l"]
  1087 -> 4 [style=solid label="ALIGNAS"]
  1087 -> 10 [style=solid label="OPEN_SQUARE"]
  1087 -> 1482 [style=solid label="COLON"]
  1087 -> 57 [style=dashed label="alignment-specifier"]
  1087 -> 260 [style=dashed label="attribute-specifier"]
  1088 [label="State 1088\n\l606 member-declarator: COLON constant-expression •\l610                  | COLON constant-expression • brace-or-equal-initializer\l"]
  1088 -> 1273 [style=solid label="EQ"]
  1088 -> 935 [style=solid label="OPEN_BRACE"]
  1088 -> 1483 [style=dashed label="brace-or-equal-initializer"]
  1088 -> 646 [style=dashed label="braced-init-list"]
  1088 -> "1088R606" [style=solid]
 "1088R606" [label="R606", fillcolor=3, shape=diamond, style=filled]
  1089 [label="State 1089\n\l617 member-specification: access-specifier COLON •\l618                     | access-specifier COLON • member-specification\l"]
  1089 -> 587 [style=solid label="PRIVATE"]
  1089 -> 588 [style=solid label="PROTECTED"]
  1089 -> 589 [style=solid label="PUBLIC"]
  1089 -> 590 [style=solid label="USING"]
  1089 -> 591 [style=solid label="IDENTIFIER"]
  1089 -> 592 [style=solid label="SEMICOLON"]
  1089 -> 4 [style=solid label="ALIGNAS"]
  1089 -> 5 [style=solid label="OPEN_PAREN"]
  1089 -> 6 [style=solid label="ELLIPSIS"]
  1089 -> 7 [style=solid label="AND"]
  1089 -> 9 [style=solid label="SCOPE"]
  1089 -> 10 [style=solid label="OPEN_SQUARE"]
  1089 -> 593 [style=solid label="COLON"]
  1089 -> 11 [style=solid label="VIRTUAL"]
  1089 -> 12 [style=solid label="CLASS"]
  1089 -> 13 [style=solid label="STRUCT"]
  1089 -> 14 [style=solid label="UNION"]
  1089 -> 595 [style=solid label="TEMPLATE"]
  1089 -> 16 [style=solid label="AND_AND"]
  1089 -> 17 [style=solid label="OPERATOR"]
  1089 -> 18 [style=solid label="CONST"]
  1089 -> 19 [style=solid label="VOLATILE"]
  1089 -> 20 [style=solid label="FRIEND"]
  1089 -> 21 [style=solid label="TYPEDEF"]
  1089 -> 22 [style=solid label="CONSTEXPR"]
  1089 -> 23 [style=solid label="CONSTEVAL"]
  1089 -> 24 [style=solid label="CONSTINIT"]
  1089 -> 258 [style=solid label="INLINE"]
  1089 -> 26 [style=solid label="DECLTYPE"]
  1089 -> 27 [style=solid label="ENUM"]
  1089 -> 259 [style=solid label="EXTERN"]
  1089 -> 29 [style=solid label="EXPLICIT"]
  1089 -> 31 [style=solid label="MULT"]
  1089 -> 35 [style=solid label="COMPL"]
  1089 -> 36 [style=solid label="AUTO"]
  1089 -> 37 [style=solid label="CHAR"]
  1089 -> 38 [style=solid label="CHAR8_T"]
  1089 -> 39 [style=solid label="CHAR16_T"]
  1089 -> 40 [style=solid label="CHAR32_T"]
  1089 -> 41 [style=solid label="WCHAR_T"]
  1089 -> 42 [style=solid label="BOOL"]
  1089 -> 43 [style=solid label="SHORT"]
  1089 -> 44 [style=solid label="INT"]
  1089 -> 45 [style=solid label="LONG"]
  1089 -> 46 [style=solid label="SIGNED"]
  1089 -> 47 [style=solid label="UNSIGNED"]
  1089 -> 48 [style=solid label="FLOAT"]
  1089 -> 49 [style=solid label="DOUBLE"]
  1089 -> 50 [style=solid label="VOID"]
  1089 -> 51 [style=solid label="STATIC_ASSERT"]
  1089 -> 52 [style=solid label="STATIC"]
  1089 -> 53 [style=solid label="THREAD_LOCAL"]
  1089 -> 54 [style=solid label="MUTABLE"]
  1089 -> 55 [style=solid label="TYPENAME"]
  1089 -> 596 [style=dashed label="access-specifier"]
  1089 -> 597 [style=dashed label="alias-declaration"]
  1089 -> 57 [style=dashed label="alignment-specifier"]
  1089 -> 60 [style=dashed label="attribute-specifier"]
  1089 -> 598 [style=dashed label="attribute-specifier-seq"]
  1089 -> 63 [style=dashed label="class-head"]
  1089 -> 64 [style=dashed label="class-key"]
  1089 -> 65 [style=dashed label="class-name"]
  1089 -> 66 [style=dashed label="class-specifier"]
  1089 -> 67 [style=dashed label="concept-name"]
  1089 -> 68 [style=dashed label="conversion-function-id"]
  1089 -> 69 [style=dashed label="cv-qualifier"]
  1089 -> 70 [style=dashed label="decl-specifier"]
  1089 -> 599 [style=dashed label="decl-specifier-seq"]
  1089 -> 600 [style=dashed label="declarator"]
  1089 -> 75 [style=dashed label="declarator-id"]
  1089 -> 76 [style=dashed label="decltype-specifier"]
  1089 -> 601 [style=dashed label="deduction-guide"]
  1089 -> 78 [style=dashed label="defining-type-specifier"]
  1089 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1089 -> 80 [style=dashed label="elaborated-type-specifier"]
  1089 -> 602 [style=dashed label="empty-declaration"]
  1089 -> 82 [style=dashed label="enum-head"]
  1089 -> 83 [style=dashed label="enum-key"]
  1089 -> 84 [style=dashed label="enum-name"]
  1089 -> 85 [style=dashed label="enum-specifier"]
  1089 -> 603 [style=dashed label="explicit-specialization"]
  1089 -> 88 [style=dashed label="explicit-specifier"]
  1089 -> 604 [style=dashed label="function-definition"]
  1089 -> 91 [style=dashed label="function-specifier"]
  1089 -> 93 [style=dashed label="id-expression"]
  1089 -> 95 [style=dashed label="literal-operator-id"]
  1089 -> 605 [style=dashed label="member-declaration"]
  1089 -> 606 [style=dashed label="member-declarator"]
  1089 -> 607 [style=dashed label="member-declarator-list"]
  1089 -> 1484 [style=dashed label="member-specification"]
  1089 -> 99 [style=dashed label="namespace-alias"]
  1089 -> 102 [style=dashed label="namespace-name"]
  1089 -> 103 [style=dashed label="nested-name-specifier"]
  1089 -> 106 [style=dashed label="noptr-declarator"]
  1089 -> 609 [style=dashed label="opaque-enum-declaration"]
  1089 -> 108 [style=dashed label="operator-function-id"]
  1089 -> 109 [style=dashed label="placeholder-type-specifier"]
  1089 -> 110 [style=dashed label="ptr-declarator"]
  1089 -> 111 [style=dashed label="ptr-operator"]
  1089 -> 112 [style=dashed label="qualified-id"]
  1089 -> 114 [style=dashed label="simple-template-id"]
  1089 -> 115 [style=dashed label="simple-type-specifier"]
  1089 -> 610 [style=dashed label="static_assert-declaration"]
  1089 -> 117 [style=dashed label="storage-class-specifier"]
  1089 -> 611 [style=dashed label="template-declaration"]
  1089 -> 119 [style=dashed label="template-head"]
  1089 -> 120 [style=dashed label="template-id"]
  1089 -> 121 [style=dashed label="template-name"]
  1089 -> 123 [style=dashed label="type-constraint"]
  1089 -> 124 [style=dashed label="type-name"]
  1089 -> 125 [style=dashed label="type-specifier"]
  1089 -> 126 [style=dashed label="typedef-name"]
  1089 -> 127 [style=dashed label="typename-specifier"]
  1089 -> 129 [style=dashed label="unqualified-id"]
  1089 -> 612 [style=dashed label="using-declaration"]
  1089 -> 613 [style=dashed label="using-enum-declaration"]
  1089 -> "1089R617" [style=solid]
 "1089R617" [label="R617", fillcolor=3, shape=diamond, style=filled]
  1090 [label="State 1090\n\l580 member-declaration: attribute-specifier-seq SEMICOLON •\l"]
  1090 -> "1090R580" [style=solid]
 "1090R580" [label="R580", fillcolor=3, shape=diamond, style=filled]
  1091 [label="State 1091\n\l606 member-declarator: COLON • constant-expression\l608                  | attribute-specifier-seq COLON • constant-expression\l610                  | COLON • constant-expression brace-or-equal-initializer\l612                  | attribute-specifier-seq COLON • constant-expression brace-or-equal-initializer\l"]
  1091 -> 356 [style=solid label="PLUS"]
  1091 -> 357 [style=solid label="MINUS"]
  1091 -> 2 [style=solid label="IDENTIFIER"]
  1091 -> 358 [style=solid label="OPEN_PAREN"]
  1091 -> 359 [style=solid label="AND"]
  1091 -> 360 [style=solid label="SCOPE"]
  1091 -> 361 [style=solid label="OPEN_SQUARE"]
  1091 -> 362 [style=solid label="CO_AWAIT"]
  1091 -> 363 [style=solid label="ZERO_LB"]
  1091 -> 364 [style=solid label="ZERO_HB"]
  1091 -> 365 [style=solid label="SINGLE_QUOTE"]
  1091 -> 366 [style=solid label="FALSE"]
  1091 -> 367 [style=solid label="TRUE"]
  1091 -> 368 [style=solid label="NOEXCEPT"]
  1091 -> 17 [style=solid label="OPERATOR"]
  1091 -> 26 [style=solid label="DECLTYPE"]
  1091 -> 369 [style=solid label="DELETE"]
  1091 -> 370 [style=solid label="DOT"]
  1091 -> 184 [style=solid label="UNICODE_8"]
  1091 -> 371 [style=solid label="MULT"]
  1091 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1091 -> 372 [style=solid label="ZERO_LX"]
  1091 -> 373 [style=solid label="ZERO_HX"]
  1091 -> 374 [style=solid label="REQUIRES"]
  1091 -> 375 [style=solid label="NEW"]
  1091 -> 376 [style=solid label="COMPL"]
  1091 -> 377 [style=solid label="NOT"]
  1091 -> 378 [style=solid label="PLUS_PLUS"]
  1091 -> 379 [style=solid label="MINUS_MINUS"]
  1091 -> 380 [style=solid label="THIS"]
  1091 -> 36 [style=solid label="AUTO"]
  1091 -> 381 [style=solid label="NULLPTR"]
  1091 -> 382 [style=solid label="DYNAMIC_CAST"]
  1091 -> 383 [style=solid label="STATIC_CAST"]
  1091 -> 384 [style=solid label="REINTERPRET_CAST"]
  1091 -> 385 [style=solid label="CONST_CAST"]
  1091 -> 386 [style=solid label="TYPEID"]
  1091 -> 37 [style=solid label="CHAR"]
  1091 -> 38 [style=solid label="CHAR8_T"]
  1091 -> 39 [style=solid label="CHAR16_T"]
  1091 -> 40 [style=solid label="CHAR32_T"]
  1091 -> 41 [style=solid label="WCHAR_T"]
  1091 -> 42 [style=solid label="BOOL"]
  1091 -> 43 [style=solid label="SHORT"]
  1091 -> 44 [style=solid label="INT"]
  1091 -> 45 [style=solid label="LONG"]
  1091 -> 46 [style=solid label="SIGNED"]
  1091 -> 47 [style=solid label="UNSIGNED"]
  1091 -> 48 [style=solid label="FLOAT"]
  1091 -> 49 [style=solid label="DOUBLE"]
  1091 -> 50 [style=solid label="VOID"]
  1091 -> 55 [style=solid label="TYPENAME"]
  1091 -> 387 [style=solid label="SIZEOF"]
  1091 -> 388 [style=solid label="ALIGNOF"]
  1091 -> 389 [style=solid label="'0'"]
  1091 -> 390 [style=solid label="'1'"]
  1091 -> 391 [style=solid label="'2'"]
  1091 -> 392 [style=solid label="'3'"]
  1091 -> 393 [style=solid label="'4'"]
  1091 -> 394 [style=solid label="'5'"]
  1091 -> 395 [style=solid label="'6'"]
  1091 -> 396 [style=solid label="'7'"]
  1091 -> 397 [style=solid label="'8'"]
  1091 -> 398 [style=solid label="'9'"]
  1091 -> 205 [style=solid label="'u'"]
  1091 -> 206 [style=solid label="'U'"]
  1091 -> 207 [style=solid label="'L'"]
  1091 -> 208 [style=solid label="'R'"]
  1091 -> 399 [style=dashed label="additive-expression"]
  1091 -> 400 [style=dashed label="and-expression"]
  1091 -> 401 [style=dashed label="await-expression"]
  1091 -> 402 [style=dashed label="binary-literal"]
  1091 -> 403 [style=dashed label="boolean-literal"]
  1091 -> 404 [style=dashed label="cast-expression"]
  1091 -> 405 [style=dashed label="character-literal"]
  1091 -> 65 [style=dashed label="class-name"]
  1091 -> 406 [style=dashed label="compare-expression"]
  1091 -> 67 [style=dashed label="concept-name"]
  1091 -> 407 [style=dashed label="conditional-expression"]
  1091 -> 1485 [style=dashed label="constant-expression"]
  1091 -> 68 [style=dashed label="conversion-function-id"]
  1091 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1091 -> 410 [style=dashed label="decimal-literal"]
  1091 -> 76 [style=dashed label="decltype-specifier"]
  1091 -> 411 [style=dashed label="delete-expression"]
  1091 -> 412 [style=dashed label="digit"]
  1091 -> 413 [style=dashed label="digit-sequence"]
  1091 -> 414 [style=dashed label="encoding-prefix"]
  1091 -> 84 [style=dashed label="enum-name"]
  1091 -> 415 [style=dashed label="equality-expression"]
  1091 -> 416 [style=dashed label="exclusive-or-expression"]
  1091 -> 417 [style=dashed label="floating-point-literal"]
  1091 -> 418 [style=dashed label="fold-expression"]
  1091 -> 419 [style=dashed label="fractional-constant"]
  1091 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1091 -> 421 [style=dashed label="hexadecimal-literal"]
  1091 -> 422 [style=dashed label="hexadecimal-prefix"]
  1091 -> 423 [style=dashed label="id-expression"]
  1091 -> 424 [style=dashed label="inclusive-or-expression"]
  1091 -> 425 [style=dashed label="integer-literal"]
  1091 -> 426 [style=dashed label="lambda-expression"]
  1091 -> 427 [style=dashed label="lambda-introducer"]
  1091 -> 428 [style=dashed label="literal"]
  1091 -> 95 [style=dashed label="literal-operator-id"]
  1091 -> 429 [style=dashed label="logical-and-expression"]
  1091 -> 430 [style=dashed label="logical-or-expression"]
  1091 -> 431 [style=dashed label="multiplicative-expression"]
  1091 -> 99 [style=dashed label="namespace-alias"]
  1091 -> 102 [style=dashed label="namespace-name"]
  1091 -> 432 [style=dashed label="nested-name-specifier"]
  1091 -> 433 [style=dashed label="new-expression"]
  1091 -> 434 [style=dashed label="noexcept-expression"]
  1091 -> 435 [style=dashed label="nonzero-digit"]
  1091 -> 436 [style=dashed label="octal-literal"]
  1091 -> 108 [style=dashed label="operator-function-id"]
  1091 -> 109 [style=dashed label="placeholder-type-specifier"]
  1091 -> 437 [style=dashed label="pm-expression"]
  1091 -> 438 [style=dashed label="pointer-literal"]
  1091 -> 439 [style=dashed label="postfix-expression"]
  1091 -> 440 [style=dashed label="primary-expression"]
  1091 -> 112 [style=dashed label="qualified-id"]
  1091 -> 441 [style=dashed label="relational-expression"]
  1091 -> 442 [style=dashed label="requires-expression"]
  1091 -> 443 [style=dashed label="shift-expression"]
  1091 -> 114 [style=dashed label="simple-template-id"]
  1091 -> 529 [style=dashed label="simple-type-specifier"]
  1091 -> 445 [style=dashed label="string-literal"]
  1091 -> 120 [style=dashed label="template-id"]
  1091 -> 215 [style=dashed label="template-name"]
  1091 -> 123 [style=dashed label="type-constraint"]
  1091 -> 124 [style=dashed label="type-name"]
  1091 -> 126 [style=dashed label="typedef-name"]
  1091 -> 531 [style=dashed label="typename-specifier"]
  1091 -> 449 [style=dashed label="unary-expression"]
  1091 -> 450 [style=dashed label="unary-operator"]
  1091 -> 129 [style=dashed label="unqualified-id"]
  1091 -> 451 [style=dashed label="user-defined-character-literal"]
  1091 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1091 -> 453 [style=dashed label="user-defined-integer-literal"]
  1091 -> 454 [style=dashed label="user-defined-literal"]
  1091 -> 455 [style=dashed label="user-defined-string-literal"]
  1092 [label="State 1092\n\l 53 attribute-specifier-seq: attribute-specifier-seq attribute-specifier •\l 54                        | attribute-specifier •\l"]
  1092 -> "1092R53" [style=solid]
 "1092R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  1092 -> "1092R54d" [label="[ALIGNAS, OPEN_SQUARE, COLON]", style=solid]
 "1092R54d" [label="R54", fillcolor=5, shape=diamond, style=filled]
  1093 [label="State 1093\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l608 member-declarator: attribute-specifier-seq • COLON constant-expression\l612                  | attribute-specifier-seq • COLON constant-expression brace-or-equal-initializer\l"]
  1093 -> 4 [style=solid label="ALIGNAS"]
  1093 -> 10 [style=solid label="OPEN_SQUARE"]
  1093 -> 1486 [style=solid label="COLON"]
  1093 -> 57 [style=dashed label="alignment-specifier"]
  1093 -> 260 [style=dashed label="attribute-specifier"]
  1094 [label="State 1094\n\l397 function-definition: attribute-specifier-seq decl-specifier-seq • declarator function-body\l401                    | attribute-specifier-seq decl-specifier-seq • declarator virt-specifier-seq function-body\l405                    | attribute-specifier-seq decl-specifier-seq • declarator requires-clause function-body\l582 member-declaration: attribute-specifier-seq decl-specifier-seq • SEMICOLON\l586                   | attribute-specifier-seq decl-specifier-seq • member-declarator-list SEMICOLON\l"]
  1094 -> 1097 [style=solid label="IDENTIFIER"]
  1094 -> 1487 [style=solid label="SEMICOLON"]
  1094 -> 4 [style=solid label="ALIGNAS"]
  1094 -> 5 [style=solid label="OPEN_PAREN"]
  1094 -> 6 [style=solid label="ELLIPSIS"]
  1094 -> 7 [style=solid label="AND"]
  1094 -> 9 [style=solid label="SCOPE"]
  1094 -> 10 [style=solid label="OPEN_SQUARE"]
  1094 -> 593 [style=solid label="COLON"]
  1094 -> 16 [style=solid label="AND_AND"]
  1094 -> 17 [style=solid label="OPERATOR"]
  1094 -> 134 [style=solid label="DECLTYPE"]
  1094 -> 31 [style=solid label="MULT"]
  1094 -> 35 [style=solid label="COMPL"]
  1094 -> 57 [style=dashed label="alignment-specifier"]
  1094 -> 60 [style=dashed label="attribute-specifier"]
  1094 -> 1093 [style=dashed label="attribute-specifier-seq"]
  1094 -> 65 [style=dashed label="class-name"]
  1094 -> 68 [style=dashed label="conversion-function-id"]
  1094 -> 1488 [style=dashed label="declarator"]
  1094 -> 75 [style=dashed label="declarator-id"]
  1094 -> 138 [style=dashed label="decltype-specifier"]
  1094 -> 84 [style=dashed label="enum-name"]
  1094 -> 93 [style=dashed label="id-expression"]
  1094 -> 95 [style=dashed label="literal-operator-id"]
  1094 -> 606 [style=dashed label="member-declarator"]
  1094 -> 1489 [style=dashed label="member-declarator-list"]
  1094 -> 99 [style=dashed label="namespace-alias"]
  1094 -> 102 [style=dashed label="namespace-name"]
  1094 -> 148 [style=dashed label="nested-name-specifier"]
  1094 -> 106 [style=dashed label="noptr-declarator"]
  1094 -> 108 [style=dashed label="operator-function-id"]
  1094 -> 110 [style=dashed label="ptr-declarator"]
  1094 -> 111 [style=dashed label="ptr-operator"]
  1094 -> 112 [style=dashed label="qualified-id"]
  1094 -> 114 [style=dashed label="simple-template-id"]
  1094 -> 120 [style=dashed label="template-id"]
  1094 -> 142 [style=dashed label="template-name"]
  1094 -> 143 [style=dashed label="type-name"]
  1094 -> 126 [style=dashed label="typedef-name"]
  1094 -> 129 [style=dashed label="unqualified-id"]
  1095 [label="State 1095\n\l395 function-definition: attribute-specifier-seq declarator • function-body\l399                    | attribute-specifier-seq declarator • virt-specifier-seq function-body\l403                    | attribute-specifier-seq declarator • requires-clause function-body\l598 member-declarator: declarator •\l599                  | declarator • virt-specifier-seq\l600                  | declarator • pure-specifier\l601                  | declarator • virt-specifier-seq pure-specifier\l602                  | declarator • requires-clause\l603                  | declarator •\l604                  | declarator • brace-or-equal-initializer\l"]
  1095 -> 1101 [style=solid label="EQ"]
  1095 -> 288 [style=solid label="COLON"]
  1095 -> 644 [style=solid label="OPEN_BRACE"]
  1095 -> 290 [style=solid label="FINAL"]
  1095 -> 291 [style=solid label="TRY"]
  1095 -> 292 [style=solid label="REQUIRES"]
  1095 -> 293 [style=solid label="OVERRIDE"]
  1095 -> 1102 [style=dashed label="brace-or-equal-initializer"]
  1095 -> 646 [style=dashed label="braced-init-list"]
  1095 -> 294 [style=dashed label="compound-statement"]
  1095 -> 295 [style=dashed label="ctor-initializer"]
  1095 -> 582 [style=dashed label="function-body"]
  1095 -> 297 [style=dashed label="function-try-block"]
  1095 -> 1103 [style=dashed label="pure-specifier"]
  1095 -> 1490 [style=dashed label="requires-clause"]
  1095 -> 299 [style=dashed label="virt-specifier"]
  1095 -> 1491 [style=dashed label="virt-specifier-seq"]
  1095 -> "1095R598" [style=solid]
 "1095R598" [label="R598", fillcolor=3, shape=diamond, style=filled]
  1095 -> "1095R603d" [label="[SEMICOLON, COMMA]", style=solid]
 "1095R603d" [label="R603", fillcolor=5, shape=diamond, style=filled]
  1096 [label="State 1096\n\l584 member-declaration: attribute-specifier-seq member-declarator-list • SEMICOLON\l614 member-declarator-list: member-declarator-list • COMMA member-declarator\l"]
  1096 -> 1492 [style=solid label="SEMICOLON"]
  1096 -> 1108 [style=solid label="COMMA"]
  1097 [label="State 1097\n\l145 class-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l605 member-declarator: IDENTIFIER • COLON constant-expression\l607                  | IDENTIFIER • attribute-specifier-seq COLON constant-expression\l609                  | IDENTIFIER • COLON constant-expression brace-or-equal-initializer\l611                  | IDENTIFIER • attribute-specifier-seq COLON constant-expression brace-or-equal-initializer\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l1140 unqualified-id: IDENTIFIER •\l"]
  1097 -> 4 [style=solid label="ALIGNAS"]
  1097 -> 10 [style=solid label="OPEN_SQUARE"]
  1097 -> 1086 [style=solid label="COLON"]
  1097 -> 57 [style=dashed label="alignment-specifier"]
  1097 -> 60 [style=dashed label="attribute-specifier"]
  1097 -> 1087 [style=dashed label="attribute-specifier-seq"]
  1097 -> "1097R145" [label="[SCOPE]", style=solid]
 "1097R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  1097 -> "1097R294d" [label="[SCOPE]", style=solid]
 "1097R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  1097 -> "1097R647d" [label="[SCOPE]", style=solid]
 "1097R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  1097 -> "1097R653d" [label="[SCOPE]", style=solid]
 "1097R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  1097 -> "1097R1052" [label="[LESS]", style=solid]
 "1097R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  1097 -> "1097R1110d" [label="[SCOPE]", style=solid]
 "1097R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  1097 -> "1097R1140d" [label="[ALIGNAS, OPEN_SQUARE, COLON]", style=solid]
 "1097R1140d" [label="R1140", fillcolor=5, shape=diamond, style=filled]
  1097 -> "1097R1140" [label="[]", style=solid]
 "1097R1140" [label="R1140", fillcolor=3, shape=diamond, style=filled]
  1098 [label="State 1098\n\l583 member-declaration: decl-specifier-seq SEMICOLON •\l"]
  1098 -> "1098R583" [style=solid]
 "1098R583" [label="R583", fillcolor=3, shape=diamond, style=filled]
  1099 [label="State 1099\n\l398 function-definition: decl-specifier-seq declarator • function-body\l402                    | decl-specifier-seq declarator • virt-specifier-seq function-body\l406                    | decl-specifier-seq declarator • requires-clause function-body\l598 member-declarator: declarator •\l599                  | declarator • virt-specifier-seq\l600                  | declarator • pure-specifier\l601                  | declarator • virt-specifier-seq pure-specifier\l602                  | declarator • requires-clause\l603                  | declarator •\l604                  | declarator • brace-or-equal-initializer\l"]
  1099 -> 1101 [style=solid label="EQ"]
  1099 -> 288 [style=solid label="COLON"]
  1099 -> 644 [style=solid label="OPEN_BRACE"]
  1099 -> 290 [style=solid label="FINAL"]
  1099 -> 291 [style=solid label="TRY"]
  1099 -> 292 [style=solid label="REQUIRES"]
  1099 -> 293 [style=solid label="OVERRIDE"]
  1099 -> 1102 [style=dashed label="brace-or-equal-initializer"]
  1099 -> 646 [style=dashed label="braced-init-list"]
  1099 -> 294 [style=dashed label="compound-statement"]
  1099 -> 295 [style=dashed label="ctor-initializer"]
  1099 -> 647 [style=dashed label="function-body"]
  1099 -> 297 [style=dashed label="function-try-block"]
  1099 -> 1103 [style=dashed label="pure-specifier"]
  1099 -> 1493 [style=dashed label="requires-clause"]
  1099 -> 299 [style=dashed label="virt-specifier"]
  1099 -> 1494 [style=dashed label="virt-specifier-seq"]
  1099 -> "1099R598" [style=solid]
 "1099R598" [label="R598", fillcolor=3, shape=diamond, style=filled]
  1099 -> "1099R603d" [label="[SEMICOLON, COMMA]", style=solid]
 "1099R603d" [label="R603", fillcolor=5, shape=diamond, style=filled]
  1100 [label="State 1100\n\l587 member-declaration: decl-specifier-seq member-declarator-list • SEMICOLON\l614 member-declarator-list: member-declarator-list • COMMA member-declarator\l"]
  1100 -> 1495 [style=solid label="SEMICOLON"]
  1100 -> 1108 [style=solid label="COMMA"]
  1101 [label="State 1101\n\l106 brace-or-equal-initializer: EQ • initializer-clause\l393 function-body: EQ • DEFAULT SEMICOLON\l394              | EQ • DELETE SEMICOLON\l905 pure-specifier: EQ • '0'\l"]
  1101 -> 356 [style=solid label="PLUS"]
  1101 -> 357 [style=solid label="MINUS"]
  1101 -> 2 [style=solid label="IDENTIFIER"]
  1101 -> 358 [style=solid label="OPEN_PAREN"]
  1101 -> 359 [style=solid label="AND"]
  1101 -> 360 [style=solid label="SCOPE"]
  1101 -> 361 [style=solid label="OPEN_SQUARE"]
  1101 -> 362 [style=solid label="CO_AWAIT"]
  1101 -> 935 [style=solid label="OPEN_BRACE"]
  1101 -> 363 [style=solid label="ZERO_LB"]
  1101 -> 364 [style=solid label="ZERO_HB"]
  1101 -> 365 [style=solid label="SINGLE_QUOTE"]
  1101 -> 366 [style=solid label="FALSE"]
  1101 -> 367 [style=solid label="TRUE"]
  1101 -> 368 [style=solid label="NOEXCEPT"]
  1101 -> 17 [style=solid label="OPERATOR"]
  1101 -> 26 [style=solid label="DECLTYPE"]
  1101 -> 1133 [style=solid label="DELETE"]
  1101 -> 370 [style=solid label="DOT"]
  1101 -> 184 [style=solid label="UNICODE_8"]
  1101 -> 371 [style=solid label="MULT"]
  1101 -> 655 [style=solid label="DEFAULT"]
  1101 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1101 -> 372 [style=solid label="ZERO_LX"]
  1101 -> 373 [style=solid label="ZERO_HX"]
  1101 -> 374 [style=solid label="REQUIRES"]
  1101 -> 375 [style=solid label="NEW"]
  1101 -> 376 [style=solid label="COMPL"]
  1101 -> 377 [style=solid label="NOT"]
  1101 -> 378 [style=solid label="PLUS_PLUS"]
  1101 -> 379 [style=solid label="MINUS_MINUS"]
  1101 -> 380 [style=solid label="THIS"]
  1101 -> 36 [style=solid label="AUTO"]
  1101 -> 381 [style=solid label="NULLPTR"]
  1101 -> 382 [style=solid label="DYNAMIC_CAST"]
  1101 -> 383 [style=solid label="STATIC_CAST"]
  1101 -> 384 [style=solid label="REINTERPRET_CAST"]
  1101 -> 385 [style=solid label="CONST_CAST"]
  1101 -> 386 [style=solid label="TYPEID"]
  1101 -> 37 [style=solid label="CHAR"]
  1101 -> 38 [style=solid label="CHAR8_T"]
  1101 -> 39 [style=solid label="CHAR16_T"]
  1101 -> 40 [style=solid label="CHAR32_T"]
  1101 -> 41 [style=solid label="WCHAR_T"]
  1101 -> 42 [style=solid label="BOOL"]
  1101 -> 43 [style=solid label="SHORT"]
  1101 -> 44 [style=solid label="INT"]
  1101 -> 45 [style=solid label="LONG"]
  1101 -> 46 [style=solid label="SIGNED"]
  1101 -> 47 [style=solid label="UNSIGNED"]
  1101 -> 48 [style=solid label="FLOAT"]
  1101 -> 49 [style=solid label="DOUBLE"]
  1101 -> 50 [style=solid label="VOID"]
  1101 -> 523 [style=solid label="THROW"]
  1101 -> 55 [style=solid label="TYPENAME"]
  1101 -> 387 [style=solid label="SIZEOF"]
  1101 -> 388 [style=solid label="ALIGNOF"]
  1101 -> 524 [style=solid label="CO_YIELD"]
  1101 -> 1496 [style=solid label="'0'"]
  1101 -> 390 [style=solid label="'1'"]
  1101 -> 391 [style=solid label="'2'"]
  1101 -> 392 [style=solid label="'3'"]
  1101 -> 393 [style=solid label="'4'"]
  1101 -> 394 [style=solid label="'5'"]
  1101 -> 395 [style=solid label="'6'"]
  1101 -> 396 [style=solid label="'7'"]
  1101 -> 397 [style=solid label="'8'"]
  1101 -> 398 [style=solid label="'9'"]
  1101 -> 205 [style=solid label="'u'"]
  1101 -> 206 [style=solid label="'U'"]
  1101 -> 207 [style=solid label="'L'"]
  1101 -> 208 [style=solid label="'R'"]
  1101 -> 399 [style=dashed label="additive-expression"]
  1101 -> 400 [style=dashed label="and-expression"]
  1101 -> 1134 [style=dashed label="assignment-expression"]
  1101 -> 401 [style=dashed label="await-expression"]
  1101 -> 402 [style=dashed label="binary-literal"]
  1101 -> 403 [style=dashed label="boolean-literal"]
  1101 -> 1135 [style=dashed label="braced-init-list"]
  1101 -> 404 [style=dashed label="cast-expression"]
  1101 -> 405 [style=dashed label="character-literal"]
  1101 -> 65 [style=dashed label="class-name"]
  1101 -> 406 [style=dashed label="compare-expression"]
  1101 -> 67 [style=dashed label="concept-name"]
  1101 -> 526 [style=dashed label="conditional-expression"]
  1101 -> 68 [style=dashed label="conversion-function-id"]
  1101 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1101 -> 410 [style=dashed label="decimal-literal"]
  1101 -> 76 [style=dashed label="decltype-specifier"]
  1101 -> 411 [style=dashed label="delete-expression"]
  1101 -> 412 [style=dashed label="digit"]
  1101 -> 413 [style=dashed label="digit-sequence"]
  1101 -> 414 [style=dashed label="encoding-prefix"]
  1101 -> 84 [style=dashed label="enum-name"]
  1101 -> 415 [style=dashed label="equality-expression"]
  1101 -> 416 [style=dashed label="exclusive-or-expression"]
  1101 -> 417 [style=dashed label="floating-point-literal"]
  1101 -> 418 [style=dashed label="fold-expression"]
  1101 -> 419 [style=dashed label="fractional-constant"]
  1101 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1101 -> 421 [style=dashed label="hexadecimal-literal"]
  1101 -> 422 [style=dashed label="hexadecimal-prefix"]
  1101 -> 423 [style=dashed label="id-expression"]
  1101 -> 424 [style=dashed label="inclusive-or-expression"]
  1101 -> 1136 [style=dashed label="initializer-clause"]
  1101 -> 425 [style=dashed label="integer-literal"]
  1101 -> 426 [style=dashed label="lambda-expression"]
  1101 -> 427 [style=dashed label="lambda-introducer"]
  1101 -> 428 [style=dashed label="literal"]
  1101 -> 95 [style=dashed label="literal-operator-id"]
  1101 -> 429 [style=dashed label="logical-and-expression"]
  1101 -> 528 [style=dashed label="logical-or-expression"]
  1101 -> 431 [style=dashed label="multiplicative-expression"]
  1101 -> 99 [style=dashed label="namespace-alias"]
  1101 -> 102 [style=dashed label="namespace-name"]
  1101 -> 432 [style=dashed label="nested-name-specifier"]
  1101 -> 433 [style=dashed label="new-expression"]
  1101 -> 434 [style=dashed label="noexcept-expression"]
  1101 -> 435 [style=dashed label="nonzero-digit"]
  1101 -> 436 [style=dashed label="octal-literal"]
  1101 -> 108 [style=dashed label="operator-function-id"]
  1101 -> 109 [style=dashed label="placeholder-type-specifier"]
  1101 -> 437 [style=dashed label="pm-expression"]
  1101 -> 438 [style=dashed label="pointer-literal"]
  1101 -> 439 [style=dashed label="postfix-expression"]
  1101 -> 440 [style=dashed label="primary-expression"]
  1101 -> 112 [style=dashed label="qualified-id"]
  1101 -> 441 [style=dashed label="relational-expression"]
  1101 -> 442 [style=dashed label="requires-expression"]
  1101 -> 443 [style=dashed label="shift-expression"]
  1101 -> 114 [style=dashed label="simple-template-id"]
  1101 -> 529 [style=dashed label="simple-type-specifier"]
  1101 -> 445 [style=dashed label="string-literal"]
  1101 -> 120 [style=dashed label="template-id"]
  1101 -> 215 [style=dashed label="template-name"]
  1101 -> 530 [style=dashed label="throw-expression"]
  1101 -> 123 [style=dashed label="type-constraint"]
  1101 -> 124 [style=dashed label="type-name"]
  1101 -> 126 [style=dashed label="typedef-name"]
  1101 -> 531 [style=dashed label="typename-specifier"]
  1101 -> 449 [style=dashed label="unary-expression"]
  1101 -> 450 [style=dashed label="unary-operator"]
  1101 -> 129 [style=dashed label="unqualified-id"]
  1101 -> 451 [style=dashed label="user-defined-character-literal"]
  1101 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1101 -> 453 [style=dashed label="user-defined-integer-literal"]
  1101 -> 454 [style=dashed label="user-defined-literal"]
  1101 -> 455 [style=dashed label="user-defined-string-literal"]
  1101 -> 532 [style=dashed label="yield-expression"]
  1102 [label="State 1102\n\l604 member-declarator: declarator brace-or-equal-initializer •\l"]
  1102 -> "1102R604" [style=solid]
 "1102R604" [label="R604", fillcolor=3, shape=diamond, style=filled]
  1103 [label="State 1103\n\l600 member-declarator: declarator pure-specifier •\l"]
  1103 -> "1103R600" [style=solid]
 "1103R600" [label="R600", fillcolor=3, shape=diamond, style=filled]
  1104 [label="State 1104\n\l404 function-definition: declarator requires-clause • function-body\l602 member-declarator: declarator requires-clause •\l"]
  1104 -> 286 [style=solid label="EQ"]
  1104 -> 288 [style=solid label="COLON"]
  1104 -> 289 [style=solid label="OPEN_BRACE"]
  1104 -> 291 [style=solid label="TRY"]
  1104 -> 294 [style=dashed label="compound-statement"]
  1104 -> 295 [style=dashed label="ctor-initializer"]
  1104 -> 701 [style=dashed label="function-body"]
  1104 -> 297 [style=dashed label="function-try-block"]
  1104 -> "1104R602" [style=solid]
 "1104R602" [label="R602", fillcolor=3, shape=diamond, style=filled]
  1105 [label="State 1105\n\l400 function-definition: declarator virt-specifier-seq • function-body\l599 member-declarator: declarator virt-specifier-seq •\l601                  | declarator virt-specifier-seq • pure-specifier\l1179 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  1105 -> 1497 [style=solid label="EQ"]
  1105 -> 288 [style=solid label="COLON"]
  1105 -> 289 [style=solid label="OPEN_BRACE"]
  1105 -> 290 [style=solid label="FINAL"]
  1105 -> 291 [style=solid label="TRY"]
  1105 -> 293 [style=solid label="OVERRIDE"]
  1105 -> 294 [style=dashed label="compound-statement"]
  1105 -> 295 [style=dashed label="ctor-initializer"]
  1105 -> 702 [style=dashed label="function-body"]
  1105 -> 297 [style=dashed label="function-try-block"]
  1105 -> 1498 [style=dashed label="pure-specifier"]
  1105 -> 703 [style=dashed label="virt-specifier"]
  1105 -> "1105R599" [style=solid]
 "1105R599" [label="R599", fillcolor=3, shape=diamond, style=filled]
  1106 [label="State 1106\n\l616 member-specification: member-declaration member-specification •\l"]
  1106 -> "1106R616" [style=solid]
 "1106R616" [label="R616", fillcolor=3, shape=diamond, style=filled]
  1107 [label="State 1107\n\l585 member-declaration: member-declarator-list SEMICOLON •\l"]
  1107 -> "1107R585" [style=solid]
 "1107R585" [label="R585", fillcolor=3, shape=diamond, style=filled]
  1108 [label="State 1108\n\l614 member-declarator-list: member-declarator-list COMMA • member-declarator\l"]
  1108 -> 1097 [style=solid label="IDENTIFIER"]
  1108 -> 4 [style=solid label="ALIGNAS"]
  1108 -> 5 [style=solid label="OPEN_PAREN"]
  1108 -> 6 [style=solid label="ELLIPSIS"]
  1108 -> 7 [style=solid label="AND"]
  1108 -> 9 [style=solid label="SCOPE"]
  1108 -> 10 [style=solid label="OPEN_SQUARE"]
  1108 -> 593 [style=solid label="COLON"]
  1108 -> 16 [style=solid label="AND_AND"]
  1108 -> 17 [style=solid label="OPERATOR"]
  1108 -> 134 [style=solid label="DECLTYPE"]
  1108 -> 31 [style=solid label="MULT"]
  1108 -> 35 [style=solid label="COMPL"]
  1108 -> 57 [style=dashed label="alignment-specifier"]
  1108 -> 60 [style=dashed label="attribute-specifier"]
  1108 -> 1093 [style=dashed label="attribute-specifier-seq"]
  1108 -> 65 [style=dashed label="class-name"]
  1108 -> 68 [style=dashed label="conversion-function-id"]
  1108 -> 1499 [style=dashed label="declarator"]
  1108 -> 75 [style=dashed label="declarator-id"]
  1108 -> 138 [style=dashed label="decltype-specifier"]
  1108 -> 84 [style=dashed label="enum-name"]
  1108 -> 93 [style=dashed label="id-expression"]
  1108 -> 95 [style=dashed label="literal-operator-id"]
  1108 -> 1500 [style=dashed label="member-declarator"]
  1108 -> 99 [style=dashed label="namespace-alias"]
  1108 -> 102 [style=dashed label="namespace-name"]
  1108 -> 148 [style=dashed label="nested-name-specifier"]
  1108 -> 106 [style=dashed label="noptr-declarator"]
  1108 -> 108 [style=dashed label="operator-function-id"]
  1108 -> 110 [style=dashed label="ptr-declarator"]
  1108 -> 111 [style=dashed label="ptr-operator"]
  1108 -> 112 [style=dashed label="qualified-id"]
  1108 -> 114 [style=dashed label="simple-template-id"]
  1108 -> 120 [style=dashed label="template-id"]
  1108 -> 142 [style=dashed label="template-name"]
  1108 -> 143 [style=dashed label="type-name"]
  1108 -> 126 [style=dashed label="typedef-name"]
  1108 -> 129 [style=dashed label="unqualified-id"]
  1109 [label="State 1109\n\l152 class-specifier: class-head OPEN_BRACE member-specification CLOSE_BRACE •\l"]
  1109 -> "1109R152" [style=solid]
 "1109R152" [label="R152", fillcolor=3, shape=diamond, style=filled]
  1110 [label="State 1110\n\l 74 base-specifier: VIRTUAL access-specifier • class-or-decltype\l"]
  1110 -> 253 [style=solid label="IDENTIFIER"]
  1110 -> 9 [style=solid label="SCOPE"]
  1110 -> 134 [style=solid label="DECLTYPE"]
  1110 -> 65 [style=dashed label="class-name"]
  1110 -> 1501 [style=dashed label="class-or-decltype"]
  1110 -> 620 [style=dashed label="decltype-specifier"]
  1110 -> 84 [style=dashed label="enum-name"]
  1110 -> 99 [style=dashed label="namespace-alias"]
  1110 -> 102 [style=dashed label="namespace-name"]
  1110 -> 621 [style=dashed label="nested-name-specifier"]
  1110 -> 141 [style=dashed label="simple-template-id"]
  1110 -> 142 [style=dashed label="template-name"]
  1110 -> 622 [style=dashed label="type-name"]
  1110 -> 126 [style=dashed label="typedef-name"]
  1111 [label="State 1111\n\l 72 base-specifier: VIRTUAL class-or-decltype •\l"]
  1111 -> "1111R72" [style=solid]
 "1111R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  1112 [label="State 1112\n\l 78 base-specifier: access-specifier VIRTUAL • class-or-decltype\l"]
  1112 -> 253 [style=solid label="IDENTIFIER"]
  1112 -> 9 [style=solid label="SCOPE"]
  1112 -> 134 [style=solid label="DECLTYPE"]
  1112 -> 65 [style=dashed label="class-name"]
  1112 -> 1502 [style=dashed label="class-or-decltype"]
  1112 -> 620 [style=dashed label="decltype-specifier"]
  1112 -> 84 [style=dashed label="enum-name"]
  1112 -> 99 [style=dashed label="namespace-alias"]
  1112 -> 102 [style=dashed label="namespace-name"]
  1112 -> 621 [style=dashed label="nested-name-specifier"]
  1112 -> 141 [style=dashed label="simple-template-id"]
  1112 -> 142 [style=dashed label="template-name"]
  1112 -> 622 [style=dashed label="type-name"]
  1112 -> 126 [style=dashed label="typedef-name"]
  1113 [label="State 1113\n\l 76 base-specifier: access-specifier class-or-decltype •\l"]
  1113 -> "1113R76" [style=solid]
 "1113R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  1114 [label="State 1114\n\l 71 base-specifier: attribute-specifier-seq VIRTUAL • class-or-decltype\l 73               | attribute-specifier-seq VIRTUAL • access-specifier class-or-decltype\l"]
  1114 -> 587 [style=solid label="PRIVATE"]
  1114 -> 588 [style=solid label="PROTECTED"]
  1114 -> 589 [style=solid label="PUBLIC"]
  1114 -> 253 [style=solid label="IDENTIFIER"]
  1114 -> 9 [style=solid label="SCOPE"]
  1114 -> 134 [style=solid label="DECLTYPE"]
  1114 -> 1503 [style=dashed label="access-specifier"]
  1114 -> 65 [style=dashed label="class-name"]
  1114 -> 1504 [style=dashed label="class-or-decltype"]
  1114 -> 620 [style=dashed label="decltype-specifier"]
  1114 -> 84 [style=dashed label="enum-name"]
  1114 -> 99 [style=dashed label="namespace-alias"]
  1114 -> 102 [style=dashed label="namespace-name"]
  1114 -> 621 [style=dashed label="nested-name-specifier"]
  1114 -> 141 [style=dashed label="simple-template-id"]
  1114 -> 142 [style=dashed label="template-name"]
  1114 -> 622 [style=dashed label="type-name"]
  1114 -> 126 [style=dashed label="typedef-name"]
  1115 [label="State 1115\n\l 75 base-specifier: attribute-specifier-seq access-specifier • class-or-decltype\l 77               | attribute-specifier-seq access-specifier • VIRTUAL class-or-decltype\l"]
  1115 -> 253 [style=solid label="IDENTIFIER"]
  1115 -> 9 [style=solid label="SCOPE"]
  1115 -> 1505 [style=solid label="VIRTUAL"]
  1115 -> 134 [style=solid label="DECLTYPE"]
  1115 -> 65 [style=dashed label="class-name"]
  1115 -> 1506 [style=dashed label="class-or-decltype"]
  1115 -> 620 [style=dashed label="decltype-specifier"]
  1115 -> 84 [style=dashed label="enum-name"]
  1115 -> 99 [style=dashed label="namespace-alias"]
  1115 -> 102 [style=dashed label="namespace-name"]
  1115 -> 621 [style=dashed label="nested-name-specifier"]
  1115 -> 141 [style=dashed label="simple-template-id"]
  1115 -> 142 [style=dashed label="template-name"]
  1115 -> 622 [style=dashed label="type-name"]
  1115 -> 126 [style=dashed label="typedef-name"]
  1116 [label="State 1116\n\l 69 base-specifier: attribute-specifier-seq class-or-decltype •\l"]
  1116 -> "1116R69" [style=solid]
 "1116R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
  1117 [label="State 1117\n\l 80 base-specifier-list: base-specifier ELLIPSIS •\l"]
  1117 -> "1117R80" [style=solid]
 "1117R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  1118 [label="State 1118\n\l 81 base-specifier-list: base-specifier-list COMMA • base-specifier\l 82                    | base-specifier-list COMMA • base-specifier ELLIPSIS\l"]
  1118 -> 587 [style=solid label="PRIVATE"]
  1118 -> 588 [style=solid label="PROTECTED"]
  1118 -> 589 [style=solid label="PUBLIC"]
  1118 -> 253 [style=solid label="IDENTIFIER"]
  1118 -> 4 [style=solid label="ALIGNAS"]
  1118 -> 9 [style=solid label="SCOPE"]
  1118 -> 10 [style=solid label="OPEN_SQUARE"]
  1118 -> 614 [style=solid label="VIRTUAL"]
  1118 -> 134 [style=solid label="DECLTYPE"]
  1118 -> 615 [style=dashed label="access-specifier"]
  1118 -> 57 [style=dashed label="alignment-specifier"]
  1118 -> 60 [style=dashed label="attribute-specifier"]
  1118 -> 616 [style=dashed label="attribute-specifier-seq"]
  1118 -> 1507 [style=dashed label="base-specifier"]
  1118 -> 65 [style=dashed label="class-name"]
  1118 -> 619 [style=dashed label="class-or-decltype"]
  1118 -> 620 [style=dashed label="decltype-specifier"]
  1118 -> 84 [style=dashed label="enum-name"]
  1118 -> 99 [style=dashed label="namespace-alias"]
  1118 -> 102 [style=dashed label="namespace-name"]
  1118 -> 621 [style=dashed label="nested-name-specifier"]
  1118 -> 141 [style=dashed label="simple-template-id"]
  1118 -> 142 [style=dashed label="template-name"]
  1118 -> 622 [style=dashed label="type-name"]
  1118 -> 126 [style=dashed label="typedef-name"]
  1119 [label="State 1119\n\l145 class-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l"]
  1119 -> 722 [style=solid label="SCOPE"]
  1119 -> "1119R145" [style=solid]
 "1119R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  1119 -> "1119R294d" [label="[OPEN_PAREN, ELLIPSIS, COMMA, OPEN_BRACE]", style=solid]
 "1119R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  1119 -> "1119R1052" [label="[LESS]", style=solid]
 "1119R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  1119 -> "1119R1110d" [label="[OPEN_PAREN, ELLIPSIS, COMMA, OPEN_BRACE]", style=solid]
 "1119R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  1120 [label="State 1120\n\l149 class-or-decltype: nested-name-specifier TEMPLATE • simple-template-id\l661 nested-name-specifier: nested-name-specifier TEMPLATE • simple-template-id SCOPE\l"]
  1120 -> 310 [style=solid label="IDENTIFIER"]
  1120 -> 1508 [style=dashed label="simple-template-id"]
  1120 -> 142 [style=dashed label="template-name"]
  1121 [label="State 1121\n\l147 class-or-decltype: nested-name-specifier type-name •\l"]
  1121 -> "1121R147" [style=solid]
 "1121R147" [label="R147", fillcolor=3, shape=diamond, style=filled]
  1122 [label="State 1122\n\l133 class-head: class-key attribute-specifier-seq class-head-name base-clause •\l"]
  1122 -> "1122R133" [style=solid]
 "1122R133" [label="R133", fillcolor=3, shape=diamond, style=filled]
  1123 [label="State 1123\n\l131 class-head: class-key attribute-specifier-seq class-head-name class-virt-specifier •\l135           | class-key attribute-specifier-seq class-head-name class-virt-specifier • base-clause\l"]
  1123 -> 267 [style=solid label="COLON"]
  1123 -> 1509 [style=dashed label="base-clause"]
  1123 -> "1123R131" [style=solid]
 "1123R131" [label="R131", fillcolor=3, shape=diamond, style=filled]
  1124 [label="State 1124\n\l145 class-name: IDENTIFIER •\l267 elaborated-type-specifier: class-key attribute-specifier-seq nested-name-specifier IDENTIFIER •\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l"]
  1124 -> 722 [style=solid label="SCOPE"]
  1124 -> "1124R145" [label="[COLON, OPEN_BRACE, FINAL]", style=solid]
 "1124R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  1124 -> "1124R267d" [label="[SCOPE, COLON, OPEN_BRACE]", style=solid]
 "1124R267d" [label="R267", fillcolor=5, shape=diamond, style=filled]
  1124 -> "1124R267" [style=solid]
 "1124R267" [label="R267", fillcolor=3, shape=diamond, style=filled]
  1124 -> "1124R1052" [label="[LESS]", style=solid]
 "1124R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  1125 [label="State 1125\n\l146 class-name: simple-template-id •\l660 nested-name-specifier: nested-name-specifier simple-template-id • SCOPE\l"]
  1125 -> 729 [style=solid label="SCOPE"]
  1125 -> "1125R146" [style=solid]
 "1125R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  1126 [label="State 1126\n\l134 class-head: class-key class-head-name class-virt-specifier base-clause •\l"]
  1126 -> "1126R134" [style=solid]
 "1126R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
  1127 [label="State 1127\n\l270 elaborated-type-specifier: class-key nested-name-specifier TEMPLATE simple-template-id •\l661 nested-name-specifier: nested-name-specifier TEMPLATE simple-template-id • SCOPE\l"]
  1127 -> 1210 [style=solid label="SCOPE"]
  1127 -> "1127R270d" [label="[SCOPE]", style=solid]
 "1127R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  1127 -> "1127R270" [style=solid]
 "1127R270" [label="R270", fillcolor=3, shape=diamond, style=filled]
  1128 [label="State 1128\n\l1040 template-argument-list: template-argument ELLIPSIS •\l"]
  1128 -> "1128R1040" [style=solid]
 "1128R1040" [label="R1040", fillcolor=3, shape=diamond, style=filled]
  1129 [label="State 1129\n\l1041 template-argument-list: template-argument-list COMMA • template-argument\l1042                       | template-argument-list COMMA • template-argument ELLIPSIS\l"]
  1129 -> 356 [style=solid label="PLUS"]
  1129 -> 357 [style=solid label="MINUS"]
  1129 -> 2 [style=solid label="IDENTIFIER"]
  1129 -> 358 [style=solid label="OPEN_PAREN"]
  1129 -> 359 [style=solid label="AND"]
  1129 -> 360 [style=solid label="SCOPE"]
  1129 -> 361 [style=solid label="OPEN_SQUARE"]
  1129 -> 362 [style=solid label="CO_AWAIT"]
  1129 -> 363 [style=solid label="ZERO_LB"]
  1129 -> 364 [style=solid label="ZERO_HB"]
  1129 -> 365 [style=solid label="SINGLE_QUOTE"]
  1129 -> 366 [style=solid label="FALSE"]
  1129 -> 367 [style=solid label="TRUE"]
  1129 -> 12 [style=solid label="CLASS"]
  1129 -> 13 [style=solid label="STRUCT"]
  1129 -> 14 [style=solid label="UNION"]
  1129 -> 368 [style=solid label="NOEXCEPT"]
  1129 -> 17 [style=solid label="OPERATOR"]
  1129 -> 18 [style=solid label="CONST"]
  1129 -> 19 [style=solid label="VOLATILE"]
  1129 -> 26 [style=solid label="DECLTYPE"]
  1129 -> 369 [style=solid label="DELETE"]
  1129 -> 370 [style=solid label="DOT"]
  1129 -> 135 [style=solid label="ENUM"]
  1129 -> 184 [style=solid label="UNICODE_8"]
  1129 -> 371 [style=solid label="MULT"]
  1129 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1129 -> 372 [style=solid label="ZERO_LX"]
  1129 -> 373 [style=solid label="ZERO_HX"]
  1129 -> 374 [style=solid label="REQUIRES"]
  1129 -> 375 [style=solid label="NEW"]
  1129 -> 376 [style=solid label="COMPL"]
  1129 -> 377 [style=solid label="NOT"]
  1129 -> 378 [style=solid label="PLUS_PLUS"]
  1129 -> 379 [style=solid label="MINUS_MINUS"]
  1129 -> 380 [style=solid label="THIS"]
  1129 -> 36 [style=solid label="AUTO"]
  1129 -> 381 [style=solid label="NULLPTR"]
  1129 -> 382 [style=solid label="DYNAMIC_CAST"]
  1129 -> 383 [style=solid label="STATIC_CAST"]
  1129 -> 384 [style=solid label="REINTERPRET_CAST"]
  1129 -> 385 [style=solid label="CONST_CAST"]
  1129 -> 386 [style=solid label="TYPEID"]
  1129 -> 37 [style=solid label="CHAR"]
  1129 -> 38 [style=solid label="CHAR8_T"]
  1129 -> 39 [style=solid label="CHAR16_T"]
  1129 -> 40 [style=solid label="CHAR32_T"]
  1129 -> 41 [style=solid label="WCHAR_T"]
  1129 -> 42 [style=solid label="BOOL"]
  1129 -> 43 [style=solid label="SHORT"]
  1129 -> 44 [style=solid label="INT"]
  1129 -> 45 [style=solid label="LONG"]
  1129 -> 46 [style=solid label="SIGNED"]
  1129 -> 47 [style=solid label="UNSIGNED"]
  1129 -> 48 [style=solid label="FLOAT"]
  1129 -> 49 [style=solid label="DOUBLE"]
  1129 -> 50 [style=solid label="VOID"]
  1129 -> 55 [style=solid label="TYPENAME"]
  1129 -> 387 [style=solid label="SIZEOF"]
  1129 -> 388 [style=solid label="ALIGNOF"]
  1129 -> 389 [style=solid label="'0'"]
  1129 -> 390 [style=solid label="'1'"]
  1129 -> 391 [style=solid label="'2'"]
  1129 -> 392 [style=solid label="'3'"]
  1129 -> 393 [style=solid label="'4'"]
  1129 -> 394 [style=solid label="'5'"]
  1129 -> 395 [style=solid label="'6'"]
  1129 -> 396 [style=solid label="'7'"]
  1129 -> 397 [style=solid label="'8'"]
  1129 -> 398 [style=solid label="'9'"]
  1129 -> 205 [style=solid label="'u'"]
  1129 -> 206 [style=solid label="'U'"]
  1129 -> 207 [style=solid label="'L'"]
  1129 -> 208 [style=solid label="'R'"]
  1129 -> 399 [style=dashed label="additive-expression"]
  1129 -> 400 [style=dashed label="and-expression"]
  1129 -> 401 [style=dashed label="await-expression"]
  1129 -> 402 [style=dashed label="binary-literal"]
  1129 -> 403 [style=dashed label="boolean-literal"]
  1129 -> 404 [style=dashed label="cast-expression"]
  1129 -> 405 [style=dashed label="character-literal"]
  1129 -> 209 [style=dashed label="class-key"]
  1129 -> 65 [style=dashed label="class-name"]
  1129 -> 406 [style=dashed label="compare-expression"]
  1129 -> 67 [style=dashed label="concept-name"]
  1129 -> 407 [style=dashed label="conditional-expression"]
  1129 -> 635 [style=dashed label="constant-expression"]
  1129 -> 68 [style=dashed label="conversion-function-id"]
  1129 -> 69 [style=dashed label="cv-qualifier"]
  1129 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1129 -> 410 [style=dashed label="decimal-literal"]
  1129 -> 76 [style=dashed label="decltype-specifier"]
  1129 -> 411 [style=dashed label="delete-expression"]
  1129 -> 412 [style=dashed label="digit"]
  1129 -> 413 [style=dashed label="digit-sequence"]
  1129 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1129 -> 80 [style=dashed label="elaborated-type-specifier"]
  1129 -> 414 [style=dashed label="encoding-prefix"]
  1129 -> 84 [style=dashed label="enum-name"]
  1129 -> 415 [style=dashed label="equality-expression"]
  1129 -> 416 [style=dashed label="exclusive-or-expression"]
  1129 -> 417 [style=dashed label="floating-point-literal"]
  1129 -> 418 [style=dashed label="fold-expression"]
  1129 -> 419 [style=dashed label="fractional-constant"]
  1129 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1129 -> 421 [style=dashed label="hexadecimal-literal"]
  1129 -> 422 [style=dashed label="hexadecimal-prefix"]
  1129 -> 636 [style=dashed label="id-expression"]
  1129 -> 424 [style=dashed label="inclusive-or-expression"]
  1129 -> 425 [style=dashed label="integer-literal"]
  1129 -> 426 [style=dashed label="lambda-expression"]
  1129 -> 427 [style=dashed label="lambda-introducer"]
  1129 -> 428 [style=dashed label="literal"]
  1129 -> 95 [style=dashed label="literal-operator-id"]
  1129 -> 429 [style=dashed label="logical-and-expression"]
  1129 -> 430 [style=dashed label="logical-or-expression"]
  1129 -> 431 [style=dashed label="multiplicative-expression"]
  1129 -> 99 [style=dashed label="namespace-alias"]
  1129 -> 102 [style=dashed label="namespace-name"]
  1129 -> 432 [style=dashed label="nested-name-specifier"]
  1129 -> 433 [style=dashed label="new-expression"]
  1129 -> 434 [style=dashed label="noexcept-expression"]
  1129 -> 435 [style=dashed label="nonzero-digit"]
  1129 -> 436 [style=dashed label="octal-literal"]
  1129 -> 108 [style=dashed label="operator-function-id"]
  1129 -> 109 [style=dashed label="placeholder-type-specifier"]
  1129 -> 437 [style=dashed label="pm-expression"]
  1129 -> 438 [style=dashed label="pointer-literal"]
  1129 -> 439 [style=dashed label="postfix-expression"]
  1129 -> 440 [style=dashed label="primary-expression"]
  1129 -> 112 [style=dashed label="qualified-id"]
  1129 -> 441 [style=dashed label="relational-expression"]
  1129 -> 442 [style=dashed label="requires-expression"]
  1129 -> 443 [style=dashed label="shift-expression"]
  1129 -> 114 [style=dashed label="simple-template-id"]
  1129 -> 444 [style=dashed label="simple-type-specifier"]
  1129 -> 445 [style=dashed label="string-literal"]
  1129 -> 1510 [style=dashed label="template-argument"]
  1129 -> 120 [style=dashed label="template-id"]
  1129 -> 215 [style=dashed label="template-name"]
  1129 -> 123 [style=dashed label="type-constraint"]
  1129 -> 639 [style=dashed label="type-id"]
  1129 -> 124 [style=dashed label="type-name"]
  1129 -> 216 [style=dashed label="type-specifier"]
  1129 -> 447 [style=dashed label="type-specifier-seq"]
  1129 -> 126 [style=dashed label="typedef-name"]
  1129 -> 448 [style=dashed label="typename-specifier"]
  1129 -> 449 [style=dashed label="unary-expression"]
  1129 -> 450 [style=dashed label="unary-operator"]
  1129 -> 129 [style=dashed label="unqualified-id"]
  1129 -> 451 [style=dashed label="user-defined-character-literal"]
  1129 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1129 -> 453 [style=dashed label="user-defined-integer-literal"]
  1129 -> 454 [style=dashed label="user-defined-literal"]
  1129 -> 455 [style=dashed label="user-defined-string-literal"]
  1130 [label="State 1130\n\l1075 type-constraint: concept-name LESS template-argument-list GREATER •\l"]
  1130 -> "1130R1075" [style=solid]
 "1130R1075" [label="R1075", fillcolor=3, shape=diamond, style=filled]
  1131 [label="State 1131\n\l462 identifier-list: identifier-list COMMA • IDENTIFIER\l"]
  1131 -> 1511 [style=solid label="IDENTIFIER"]
  1132 [label="State 1132\n\l967 simple-declaration: decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE • initializer SEMICOLON\l"]
  1132 -> 1273 [style=solid label="EQ"]
  1132 -> 643 [style=solid label="OPEN_PAREN"]
  1132 -> 935 [style=solid label="OPEN_BRACE"]
  1132 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1132 -> 646 [style=dashed label="braced-init-list"]
  1132 -> 1512 [style=dashed label="initializer"]
  1133 [label="State 1133\n\l242 delete-expression: DELETE • cast-expression\l244                  | DELETE • OPEN_SQUARE CLOSE_SQUARE cast-expression\l394 function-body: EQ DELETE • SEMICOLON\l"]
  1133 -> 356 [style=solid label="PLUS"]
  1133 -> 357 [style=solid label="MINUS"]
  1133 -> 2 [style=solid label="IDENTIFIER"]
  1133 -> 1152 [style=solid label="SEMICOLON"]
  1133 -> 358 [style=solid label="OPEN_PAREN"]
  1133 -> 359 [style=solid label="AND"]
  1133 -> 360 [style=solid label="SCOPE"]
  1133 -> 787 [style=solid label="OPEN_SQUARE"]
  1133 -> 362 [style=solid label="CO_AWAIT"]
  1133 -> 363 [style=solid label="ZERO_LB"]
  1133 -> 364 [style=solid label="ZERO_HB"]
  1133 -> 365 [style=solid label="SINGLE_QUOTE"]
  1133 -> 366 [style=solid label="FALSE"]
  1133 -> 367 [style=solid label="TRUE"]
  1133 -> 368 [style=solid label="NOEXCEPT"]
  1133 -> 17 [style=solid label="OPERATOR"]
  1133 -> 26 [style=solid label="DECLTYPE"]
  1133 -> 369 [style=solid label="DELETE"]
  1133 -> 370 [style=solid label="DOT"]
  1133 -> 184 [style=solid label="UNICODE_8"]
  1133 -> 371 [style=solid label="MULT"]
  1133 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1133 -> 372 [style=solid label="ZERO_LX"]
  1133 -> 373 [style=solid label="ZERO_HX"]
  1133 -> 374 [style=solid label="REQUIRES"]
  1133 -> 375 [style=solid label="NEW"]
  1133 -> 376 [style=solid label="COMPL"]
  1133 -> 377 [style=solid label="NOT"]
  1133 -> 378 [style=solid label="PLUS_PLUS"]
  1133 -> 379 [style=solid label="MINUS_MINUS"]
  1133 -> 380 [style=solid label="THIS"]
  1133 -> 36 [style=solid label="AUTO"]
  1133 -> 381 [style=solid label="NULLPTR"]
  1133 -> 382 [style=solid label="DYNAMIC_CAST"]
  1133 -> 383 [style=solid label="STATIC_CAST"]
  1133 -> 384 [style=solid label="REINTERPRET_CAST"]
  1133 -> 385 [style=solid label="CONST_CAST"]
  1133 -> 386 [style=solid label="TYPEID"]
  1133 -> 37 [style=solid label="CHAR"]
  1133 -> 38 [style=solid label="CHAR8_T"]
  1133 -> 39 [style=solid label="CHAR16_T"]
  1133 -> 40 [style=solid label="CHAR32_T"]
  1133 -> 41 [style=solid label="WCHAR_T"]
  1133 -> 42 [style=solid label="BOOL"]
  1133 -> 43 [style=solid label="SHORT"]
  1133 -> 44 [style=solid label="INT"]
  1133 -> 45 [style=solid label="LONG"]
  1133 -> 46 [style=solid label="SIGNED"]
  1133 -> 47 [style=solid label="UNSIGNED"]
  1133 -> 48 [style=solid label="FLOAT"]
  1133 -> 49 [style=solid label="DOUBLE"]
  1133 -> 50 [style=solid label="VOID"]
  1133 -> 55 [style=solid label="TYPENAME"]
  1133 -> 387 [style=solid label="SIZEOF"]
  1133 -> 388 [style=solid label="ALIGNOF"]
  1133 -> 389 [style=solid label="'0'"]
  1133 -> 390 [style=solid label="'1'"]
  1133 -> 391 [style=solid label="'2'"]
  1133 -> 392 [style=solid label="'3'"]
  1133 -> 393 [style=solid label="'4'"]
  1133 -> 394 [style=solid label="'5'"]
  1133 -> 395 [style=solid label="'6'"]
  1133 -> 396 [style=solid label="'7'"]
  1133 -> 397 [style=solid label="'8'"]
  1133 -> 398 [style=solid label="'9'"]
  1133 -> 205 [style=solid label="'u'"]
  1133 -> 206 [style=solid label="'U'"]
  1133 -> 207 [style=solid label="'L'"]
  1133 -> 208 [style=solid label="'R'"]
  1133 -> 401 [style=dashed label="await-expression"]
  1133 -> 402 [style=dashed label="binary-literal"]
  1133 -> 403 [style=dashed label="boolean-literal"]
  1133 -> 788 [style=dashed label="cast-expression"]
  1133 -> 405 [style=dashed label="character-literal"]
  1133 -> 65 [style=dashed label="class-name"]
  1133 -> 67 [style=dashed label="concept-name"]
  1133 -> 68 [style=dashed label="conversion-function-id"]
  1133 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1133 -> 410 [style=dashed label="decimal-literal"]
  1133 -> 76 [style=dashed label="decltype-specifier"]
  1133 -> 411 [style=dashed label="delete-expression"]
  1133 -> 412 [style=dashed label="digit"]
  1133 -> 413 [style=dashed label="digit-sequence"]
  1133 -> 414 [style=dashed label="encoding-prefix"]
  1133 -> 84 [style=dashed label="enum-name"]
  1133 -> 417 [style=dashed label="floating-point-literal"]
  1133 -> 418 [style=dashed label="fold-expression"]
  1133 -> 419 [style=dashed label="fractional-constant"]
  1133 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1133 -> 421 [style=dashed label="hexadecimal-literal"]
  1133 -> 422 [style=dashed label="hexadecimal-prefix"]
  1133 -> 423 [style=dashed label="id-expression"]
  1133 -> 425 [style=dashed label="integer-literal"]
  1133 -> 426 [style=dashed label="lambda-expression"]
  1133 -> 427 [style=dashed label="lambda-introducer"]
  1133 -> 428 [style=dashed label="literal"]
  1133 -> 95 [style=dashed label="literal-operator-id"]
  1133 -> 99 [style=dashed label="namespace-alias"]
  1133 -> 102 [style=dashed label="namespace-name"]
  1133 -> 432 [style=dashed label="nested-name-specifier"]
  1133 -> 433 [style=dashed label="new-expression"]
  1133 -> 434 [style=dashed label="noexcept-expression"]
  1133 -> 435 [style=dashed label="nonzero-digit"]
  1133 -> 436 [style=dashed label="octal-literal"]
  1133 -> 108 [style=dashed label="operator-function-id"]
  1133 -> 109 [style=dashed label="placeholder-type-specifier"]
  1133 -> 438 [style=dashed label="pointer-literal"]
  1133 -> 439 [style=dashed label="postfix-expression"]
  1133 -> 440 [style=dashed label="primary-expression"]
  1133 -> 112 [style=dashed label="qualified-id"]
  1133 -> 442 [style=dashed label="requires-expression"]
  1133 -> 114 [style=dashed label="simple-template-id"]
  1133 -> 529 [style=dashed label="simple-type-specifier"]
  1133 -> 445 [style=dashed label="string-literal"]
  1133 -> 120 [style=dashed label="template-id"]
  1133 -> 215 [style=dashed label="template-name"]
  1133 -> 123 [style=dashed label="type-constraint"]
  1133 -> 124 [style=dashed label="type-name"]
  1133 -> 126 [style=dashed label="typedef-name"]
  1133 -> 531 [style=dashed label="typename-specifier"]
  1133 -> 449 [style=dashed label="unary-expression"]
  1133 -> 450 [style=dashed label="unary-operator"]
  1133 -> 129 [style=dashed label="unqualified-id"]
  1133 -> 451 [style=dashed label="user-defined-character-literal"]
  1133 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1133 -> 453 [style=dashed label="user-defined-integer-literal"]
  1133 -> 454 [style=dashed label="user-defined-literal"]
  1133 -> 455 [style=dashed label="user-defined-string-literal"]
  1134 [label="State 1134\n\l479 initializer-clause: assignment-expression •\l"]
  1134 -> "1134R479" [style=solid]
 "1134R479" [label="R479", fillcolor=3, shape=diamond, style=filled]
  1135 [label="State 1135\n\l480 initializer-clause: braced-init-list •\l"]
  1135 -> "1135R480" [style=solid]
 "1135R480" [label="R480", fillcolor=3, shape=diamond, style=filled]
  1136 [label="State 1136\n\l106 brace-or-equal-initializer: EQ initializer-clause •\l"]
  1136 -> "1136R106" [style=solid]
 "1136R106" [label="R106", fillcolor=3, shape=diamond, style=filled]
  1137 [label="State 1137\n\l478 initializer: OPEN_PAREN expression-list • CLOSE_PAREN\l"]
  1137 -> 1513 [style=solid label="CLOSE_PAREN"]
  1138 [label="State 1138\n\l481 initializer-list: initializer-clause •\l482                 | initializer-clause • ELLIPSIS\l"]
  1138 -> 1514 [style=solid label="ELLIPSIS"]
  1138 -> "1138R481" [style=solid]
 "1138R481" [label="R481", fillcolor=3, shape=diamond, style=filled]
  1139 [label="State 1139\n\l336 expression-list: initializer-list •\l483 initializer-list: initializer-list • COMMA initializer-clause\l484                 | initializer-list • COMMA initializer-clause ELLIPSIS\l"]
  1139 -> 1515 [style=solid label="COMMA"]
  1139 -> "1139R336" [style=solid]
 "1139R336" [label="R336", fillcolor=3, shape=diamond, style=filled]
  1140 [label="State 1140\n\l112 braced-init-list: OPEN_BRACE CLOSE_BRACE •\l160 compound-statement: OPEN_BRACE CLOSE_BRACE •\l"]
  1140 -> "1140R112" [label="[SEMICOLON, ELLIPSIS, COMMA, CLOSE_BRACE]", style=solid]
 "1140R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
  1140 -> "1140R160d" [label="[SEMICOLON, ELLIPSIS, CLOSE_BRACE]", style=solid]
 "1140R160d" [label="R160", fillcolor=5, shape=diamond, style=filled]
  1140 -> "1140R160" [style=solid]
 "1140R160" [label="R160", fillcolor=3, shape=diamond, style=filled]
  1141 [label="State 1141\n\l248 designator: DOT • IDENTIFIER\l388 fractional-constant: DOT • digit-sequence\l"]
  1141 -> 1516 [style=solid label="IDENTIFIER"]
  1141 -> 789 [style=solid label="'0'"]
  1141 -> 790 [style=solid label="'1'"]
  1141 -> 791 [style=solid label="'2'"]
  1141 -> 792 [style=solid label="'3'"]
  1141 -> 793 [style=solid label="'4'"]
  1141 -> 794 [style=solid label="'5'"]
  1141 -> 795 [style=solid label="'6'"]
  1141 -> 796 [style=solid label="'7'"]
  1141 -> 797 [style=solid label="'8'"]
  1141 -> 798 [style=solid label="'9'"]
  1141 -> 412 [style=dashed label="digit"]
  1141 -> 799 [style=dashed label="digit-sequence"]
  1142 [label="State 1142\n\l334 expression: assignment-expression •\l479 initializer-clause: assignment-expression •\l"]
  1142 -> "1142R334" [style=solid]
 "1142R334" [label="R334", fillcolor=3, shape=diamond, style=filled]
  1142 -> "1142R479d" [label="[COMMA]", style=solid]
 "1142R479d" [label="R479", fillcolor=5, shape=diamond, style=filled]
  1142 -> "1142R479" [label="[ELLIPSIS, CLOSE_BRACE]", style=solid]
 "1142R479" [label="R479", fillcolor=3, shape=diamond, style=filled]
  1143 [label="State 1143\n\l246 designated-initializer-list: designated-initializer-clause •\l"]
  1143 -> "1143R246" [style=solid]
 "1143R246" [label="R246", fillcolor=3, shape=diamond, style=filled]
  1144 [label="State 1144\n\l110 braced-init-list: OPEN_BRACE designated-initializer-list • CLOSE_BRACE\l111                 | OPEN_BRACE designated-initializer-list • COMMA CLOSE_BRACE\l247 designated-initializer-list: designated-initializer-list • COMMA designated-initializer-clause\l"]
  1144 -> 1517 [style=solid label="COMMA"]
  1144 -> 1518 [style=solid label="CLOSE_BRACE"]
  1145 [label="State 1145\n\l245 designated-initializer-clause: designator • brace-or-equal-initializer\l"]
  1145 -> 1273 [style=solid label="EQ"]
  1145 -> 935 [style=solid label="OPEN_BRACE"]
  1145 -> 1519 [style=dashed label="brace-or-equal-initializer"]
  1145 -> 646 [style=dashed label="braced-init-list"]
  1146 [label="State 1146\n\l108 braced-init-list: OPEN_BRACE initializer-list • CLOSE_BRACE\l109                 | OPEN_BRACE initializer-list • COMMA CLOSE_BRACE\l483 initializer-list: initializer-list • COMMA initializer-clause\l484                 | initializer-list • COMMA initializer-clause ELLIPSIS\l"]
  1146 -> 1520 [style=solid label="COMMA"]
  1146 -> 1521 [style=solid label="CLOSE_BRACE"]
  1147 [label="State 1147\n\l406 function-definition: decl-specifier-seq declarator requires-clause function-body •\l"]
  1147 -> "1147R406" [style=solid]
 "1147R406" [label="R406", fillcolor=3, shape=diamond, style=filled]
  1148 [label="State 1148\n\l402 function-definition: decl-specifier-seq declarator virt-specifier-seq function-body •\l"]
  1148 -> "1148R402" [style=solid]
 "1148R402" [label="R402", fillcolor=3, shape=diamond, style=filled]
  1149 [label="State 1149\n\l469 init-declarator: declarator •\l470                | declarator • initializer\l471                | declarator • requires-clause\l"]
  1149 -> 1273 [style=solid label="EQ"]
  1149 -> 643 [style=solid label="OPEN_PAREN"]
  1149 -> 935 [style=solid label="OPEN_BRACE"]
  1149 -> 292 [style=solid label="REQUIRES"]
  1149 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1149 -> 646 [style=dashed label="braced-init-list"]
  1149 -> 648 [style=dashed label="initializer"]
  1149 -> 1522 [style=dashed label="requires-clause"]
  1149 -> "1149R469" [style=solid]
 "1149R469" [label="R469", fillcolor=3, shape=diamond, style=filled]
  1150 [label="State 1150\n\l473 init-declarator-list: init-declarator-list COMMA init-declarator •\l"]
  1150 -> "1150R473" [style=solid]
 "1150R473" [label="R473", fillcolor=3, shape=diamond, style=filled]
  1151 [label="State 1151\n\l462 identifier-list: identifier-list • COMMA IDENTIFIER\l969 simple-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list • CLOSE_SQUARE initializer SEMICOLON\l"]
  1151 -> 1131 [style=solid label="COMMA"]
  1151 -> 1523 [style=solid label="CLOSE_SQUARE"]
  1152 [label="State 1152\n\l394 function-body: EQ DELETE SEMICOLON •\l"]
  1152 -> "1152R394" [style=solid]
 "1152R394" [label="R394", fillcolor=3, shape=diamond, style=filled]
  1153 [label="State 1153\n\l393 function-body: EQ DEFAULT SEMICOLON •\l"]
  1153 -> "1153R393" [style=solid]
 "1153R393" [label="R393", fillcolor=3, shape=diamond, style=filled]
  1154 [label="State 1154\n\l577 mem-initializer-list: mem-initializer ELLIPSIS •\l"]
  1154 -> "1154R577" [style=solid]
 "1154R577" [label="R577", fillcolor=3, shape=diamond, style=filled]
  1155 [label="State 1155\n\l571 mem-initializer: mem-initializer-id OPEN_PAREN • CLOSE_PAREN\l572                | mem-initializer-id OPEN_PAREN • expression-list CLOSE_PAREN\l"]
  1155 -> 356 [style=solid label="PLUS"]
  1155 -> 357 [style=solid label="MINUS"]
  1155 -> 2 [style=solid label="IDENTIFIER"]
  1155 -> 358 [style=solid label="OPEN_PAREN"]
  1155 -> 1524 [style=solid label="CLOSE_PAREN"]
  1155 -> 359 [style=solid label="AND"]
  1155 -> 360 [style=solid label="SCOPE"]
  1155 -> 361 [style=solid label="OPEN_SQUARE"]
  1155 -> 362 [style=solid label="CO_AWAIT"]
  1155 -> 935 [style=solid label="OPEN_BRACE"]
  1155 -> 363 [style=solid label="ZERO_LB"]
  1155 -> 364 [style=solid label="ZERO_HB"]
  1155 -> 365 [style=solid label="SINGLE_QUOTE"]
  1155 -> 366 [style=solid label="FALSE"]
  1155 -> 367 [style=solid label="TRUE"]
  1155 -> 368 [style=solid label="NOEXCEPT"]
  1155 -> 17 [style=solid label="OPERATOR"]
  1155 -> 26 [style=solid label="DECLTYPE"]
  1155 -> 369 [style=solid label="DELETE"]
  1155 -> 370 [style=solid label="DOT"]
  1155 -> 184 [style=solid label="UNICODE_8"]
  1155 -> 371 [style=solid label="MULT"]
  1155 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1155 -> 372 [style=solid label="ZERO_LX"]
  1155 -> 373 [style=solid label="ZERO_HX"]
  1155 -> 374 [style=solid label="REQUIRES"]
  1155 -> 375 [style=solid label="NEW"]
  1155 -> 376 [style=solid label="COMPL"]
  1155 -> 377 [style=solid label="NOT"]
  1155 -> 378 [style=solid label="PLUS_PLUS"]
  1155 -> 379 [style=solid label="MINUS_MINUS"]
  1155 -> 380 [style=solid label="THIS"]
  1155 -> 36 [style=solid label="AUTO"]
  1155 -> 381 [style=solid label="NULLPTR"]
  1155 -> 382 [style=solid label="DYNAMIC_CAST"]
  1155 -> 383 [style=solid label="STATIC_CAST"]
  1155 -> 384 [style=solid label="REINTERPRET_CAST"]
  1155 -> 385 [style=solid label="CONST_CAST"]
  1155 -> 386 [style=solid label="TYPEID"]
  1155 -> 37 [style=solid label="CHAR"]
  1155 -> 38 [style=solid label="CHAR8_T"]
  1155 -> 39 [style=solid label="CHAR16_T"]
  1155 -> 40 [style=solid label="CHAR32_T"]
  1155 -> 41 [style=solid label="WCHAR_T"]
  1155 -> 42 [style=solid label="BOOL"]
  1155 -> 43 [style=solid label="SHORT"]
  1155 -> 44 [style=solid label="INT"]
  1155 -> 45 [style=solid label="LONG"]
  1155 -> 46 [style=solid label="SIGNED"]
  1155 -> 47 [style=solid label="UNSIGNED"]
  1155 -> 48 [style=solid label="FLOAT"]
  1155 -> 49 [style=solid label="DOUBLE"]
  1155 -> 50 [style=solid label="VOID"]
  1155 -> 523 [style=solid label="THROW"]
  1155 -> 55 [style=solid label="TYPENAME"]
  1155 -> 387 [style=solid label="SIZEOF"]
  1155 -> 388 [style=solid label="ALIGNOF"]
  1155 -> 524 [style=solid label="CO_YIELD"]
  1155 -> 389 [style=solid label="'0'"]
  1155 -> 390 [style=solid label="'1'"]
  1155 -> 391 [style=solid label="'2'"]
  1155 -> 392 [style=solid label="'3'"]
  1155 -> 393 [style=solid label="'4'"]
  1155 -> 394 [style=solid label="'5'"]
  1155 -> 395 [style=solid label="'6'"]
  1155 -> 396 [style=solid label="'7'"]
  1155 -> 397 [style=solid label="'8'"]
  1155 -> 398 [style=solid label="'9'"]
  1155 -> 205 [style=solid label="'u'"]
  1155 -> 206 [style=solid label="'U'"]
  1155 -> 207 [style=solid label="'L'"]
  1155 -> 208 [style=solid label="'R'"]
  1155 -> 399 [style=dashed label="additive-expression"]
  1155 -> 400 [style=dashed label="and-expression"]
  1155 -> 1134 [style=dashed label="assignment-expression"]
  1155 -> 401 [style=dashed label="await-expression"]
  1155 -> 402 [style=dashed label="binary-literal"]
  1155 -> 403 [style=dashed label="boolean-literal"]
  1155 -> 1135 [style=dashed label="braced-init-list"]
  1155 -> 404 [style=dashed label="cast-expression"]
  1155 -> 405 [style=dashed label="character-literal"]
  1155 -> 65 [style=dashed label="class-name"]
  1155 -> 406 [style=dashed label="compare-expression"]
  1155 -> 67 [style=dashed label="concept-name"]
  1155 -> 526 [style=dashed label="conditional-expression"]
  1155 -> 68 [style=dashed label="conversion-function-id"]
  1155 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1155 -> 410 [style=dashed label="decimal-literal"]
  1155 -> 76 [style=dashed label="decltype-specifier"]
  1155 -> 411 [style=dashed label="delete-expression"]
  1155 -> 412 [style=dashed label="digit"]
  1155 -> 413 [style=dashed label="digit-sequence"]
  1155 -> 414 [style=dashed label="encoding-prefix"]
  1155 -> 84 [style=dashed label="enum-name"]
  1155 -> 415 [style=dashed label="equality-expression"]
  1155 -> 416 [style=dashed label="exclusive-or-expression"]
  1155 -> 1525 [style=dashed label="expression-list"]
  1155 -> 417 [style=dashed label="floating-point-literal"]
  1155 -> 418 [style=dashed label="fold-expression"]
  1155 -> 419 [style=dashed label="fractional-constant"]
  1155 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1155 -> 421 [style=dashed label="hexadecimal-literal"]
  1155 -> 422 [style=dashed label="hexadecimal-prefix"]
  1155 -> 423 [style=dashed label="id-expression"]
  1155 -> 424 [style=dashed label="inclusive-or-expression"]
  1155 -> 1138 [style=dashed label="initializer-clause"]
  1155 -> 1139 [style=dashed label="initializer-list"]
  1155 -> 425 [style=dashed label="integer-literal"]
  1155 -> 426 [style=dashed label="lambda-expression"]
  1155 -> 427 [style=dashed label="lambda-introducer"]
  1155 -> 428 [style=dashed label="literal"]
  1155 -> 95 [style=dashed label="literal-operator-id"]
  1155 -> 429 [style=dashed label="logical-and-expression"]
  1155 -> 528 [style=dashed label="logical-or-expression"]
  1155 -> 431 [style=dashed label="multiplicative-expression"]
  1155 -> 99 [style=dashed label="namespace-alias"]
  1155 -> 102 [style=dashed label="namespace-name"]
  1155 -> 432 [style=dashed label="nested-name-specifier"]
  1155 -> 433 [style=dashed label="new-expression"]
  1155 -> 434 [style=dashed label="noexcept-expression"]
  1155 -> 435 [style=dashed label="nonzero-digit"]
  1155 -> 436 [style=dashed label="octal-literal"]
  1155 -> 108 [style=dashed label="operator-function-id"]
  1155 -> 109 [style=dashed label="placeholder-type-specifier"]
  1155 -> 437 [style=dashed label="pm-expression"]
  1155 -> 438 [style=dashed label="pointer-literal"]
  1155 -> 439 [style=dashed label="postfix-expression"]
  1155 -> 440 [style=dashed label="primary-expression"]
  1155 -> 112 [style=dashed label="qualified-id"]
  1155 -> 441 [style=dashed label="relational-expression"]
  1155 -> 442 [style=dashed label="requires-expression"]
  1155 -> 443 [style=dashed label="shift-expression"]
  1155 -> 114 [style=dashed label="simple-template-id"]
  1155 -> 529 [style=dashed label="simple-type-specifier"]
  1155 -> 445 [style=dashed label="string-literal"]
  1155 -> 120 [style=dashed label="template-id"]
  1155 -> 215 [style=dashed label="template-name"]
  1155 -> 530 [style=dashed label="throw-expression"]
  1155 -> 123 [style=dashed label="type-constraint"]
  1155 -> 124 [style=dashed label="type-name"]
  1155 -> 126 [style=dashed label="typedef-name"]
  1155 -> 531 [style=dashed label="typename-specifier"]
  1155 -> 449 [style=dashed label="unary-expression"]
  1155 -> 450 [style=dashed label="unary-operator"]
  1155 -> 129 [style=dashed label="unqualified-id"]
  1155 -> 451 [style=dashed label="user-defined-character-literal"]
  1155 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1155 -> 453 [style=dashed label="user-defined-integer-literal"]
  1155 -> 454 [style=dashed label="user-defined-literal"]
  1155 -> 455 [style=dashed label="user-defined-string-literal"]
  1155 -> 532 [style=dashed label="yield-expression"]
  1156 [label="State 1156\n\l573 mem-initializer: mem-initializer-id braced-init-list •\l"]
  1156 -> "1156R573" [style=solid]
 "1156R573" [label="R573", fillcolor=3, shape=diamond, style=filled]
  1157 [label="State 1157\n\l578 mem-initializer-list: mem-initializer-list COMMA • mem-initializer\l579                     | mem-initializer-list COMMA • mem-initializer ELLIPSIS\l"]
  1157 -> 656 [style=solid label="IDENTIFIER"]
  1157 -> 9 [style=solid label="SCOPE"]
  1157 -> 134 [style=solid label="DECLTYPE"]
  1157 -> 65 [style=dashed label="class-name"]
  1157 -> 657 [style=dashed label="class-or-decltype"]
  1157 -> 620 [style=dashed label="decltype-specifier"]
  1157 -> 84 [style=dashed label="enum-name"]
  1157 -> 1526 [style=dashed label="mem-initializer"]
  1157 -> 659 [style=dashed label="mem-initializer-id"]
  1157 -> 99 [style=dashed label="namespace-alias"]
  1157 -> 102 [style=dashed label="namespace-name"]
  1157 -> 621 [style=dashed label="nested-name-specifier"]
  1157 -> 141 [style=dashed label="simple-template-id"]
  1157 -> 142 [style=dashed label="template-name"]
  1157 -> 622 [style=dashed label="type-name"]
  1157 -> 126 [style=dashed label="typedef-name"]
  1158 [label="State 1158\n\l520 labeled-statement: IDENTIFIER COLON • statement\l"]
  1158 -> 356 [style=solid label="PLUS"]
  1158 -> 357 [style=solid label="MINUS"]
  1158 -> 1 [style=solid label="USING"]
  1158 -> 661 [style=solid label="IDENTIFIER"]
  1158 -> 662 [style=solid label="SEMICOLON"]
  1158 -> 4 [style=solid label="ALIGNAS"]
  1158 -> 358 [style=solid label="OPEN_PAREN"]
  1158 -> 359 [style=solid label="AND"]
  1158 -> 8 [style=solid label="ASM"]
  1158 -> 360 [style=solid label="SCOPE"]
  1158 -> 663 [style=solid label="OPEN_SQUARE"]
  1158 -> 362 [style=solid label="CO_AWAIT"]
  1158 -> 289 [style=solid label="OPEN_BRACE"]
  1158 -> 11 [style=solid label="VIRTUAL"]
  1158 -> 363 [style=solid label="ZERO_LB"]
  1158 -> 364 [style=solid label="ZERO_HB"]
  1158 -> 365 [style=solid label="SINGLE_QUOTE"]
  1158 -> 366 [style=solid label="FALSE"]
  1158 -> 367 [style=solid label="TRUE"]
  1158 -> 12 [style=solid label="CLASS"]
  1158 -> 13 [style=solid label="STRUCT"]
  1158 -> 14 [style=solid label="UNION"]
  1158 -> 368 [style=solid label="NOEXCEPT"]
  1158 -> 17 [style=solid label="OPERATOR"]
  1158 -> 665 [style=solid label="CO_RETURN"]
  1158 -> 18 [style=solid label="CONST"]
  1158 -> 19 [style=solid label="VOLATILE"]
  1158 -> 20 [style=solid label="FRIEND"]
  1158 -> 21 [style=solid label="TYPEDEF"]
  1158 -> 22 [style=solid label="CONSTEXPR"]
  1158 -> 23 [style=solid label="CONSTEVAL"]
  1158 -> 24 [style=solid label="CONSTINIT"]
  1158 -> 258 [style=solid label="INLINE"]
  1158 -> 26 [style=solid label="DECLTYPE"]
  1158 -> 369 [style=solid label="DELETE"]
  1158 -> 370 [style=solid label="DOT"]
  1158 -> 27 [style=solid label="ENUM"]
  1158 -> 184 [style=solid label="UNICODE_8"]
  1158 -> 259 [style=solid label="EXTERN"]
  1158 -> 29 [style=solid label="EXPLICIT"]
  1158 -> 371 [style=solid label="MULT"]
  1158 -> 666 [style=solid label="DEFAULT"]
  1158 -> 667 [style=solid label="TRY"]
  1158 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1158 -> 372 [style=solid label="ZERO_LX"]
  1158 -> 373 [style=solid label="ZERO_HX"]
  1158 -> 668 [style=solid label="WHILE"]
  1158 -> 669 [style=solid label="DO"]
  1158 -> 670 [style=solid label="FOR"]
  1158 -> 671 [style=solid label="BREAK"]
  1158 -> 672 [style=solid label="CONTINUE"]
  1158 -> 673 [style=solid label="RETURN"]
  1158 -> 674 [style=solid label="GOTO"]
  1158 -> 675 [style=solid label="CASE"]
  1158 -> 676 [style=solid label="NAMESPACE"]
  1158 -> 374 [style=solid label="REQUIRES"]
  1158 -> 375 [style=solid label="NEW"]
  1158 -> 376 [style=solid label="COMPL"]
  1158 -> 377 [style=solid label="NOT"]
  1158 -> 378 [style=solid label="PLUS_PLUS"]
  1158 -> 379 [style=solid label="MINUS_MINUS"]
  1158 -> 380 [style=solid label="THIS"]
  1158 -> 36 [style=solid label="AUTO"]
  1158 -> 381 [style=solid label="NULLPTR"]
  1158 -> 382 [style=solid label="DYNAMIC_CAST"]
  1158 -> 383 [style=solid label="STATIC_CAST"]
  1158 -> 384 [style=solid label="REINTERPRET_CAST"]
  1158 -> 385 [style=solid label="CONST_CAST"]
  1158 -> 386 [style=solid label="TYPEID"]
  1158 -> 677 [style=solid label="IF"]
  1158 -> 678 [style=solid label="SWITCH"]
  1158 -> 37 [style=solid label="CHAR"]
  1158 -> 38 [style=solid label="CHAR8_T"]
  1158 -> 39 [style=solid label="CHAR16_T"]
  1158 -> 40 [style=solid label="CHAR32_T"]
  1158 -> 41 [style=solid label="WCHAR_T"]
  1158 -> 42 [style=solid label="BOOL"]
  1158 -> 43 [style=solid label="SHORT"]
  1158 -> 44 [style=solid label="INT"]
  1158 -> 45 [style=solid label="LONG"]
  1158 -> 46 [style=solid label="SIGNED"]
  1158 -> 47 [style=solid label="UNSIGNED"]
  1158 -> 48 [style=solid label="FLOAT"]
  1158 -> 49 [style=solid label="DOUBLE"]
  1158 -> 50 [style=solid label="VOID"]
  1158 -> 51 [style=solid label="STATIC_ASSERT"]
  1158 -> 52 [style=solid label="STATIC"]
  1158 -> 53 [style=solid label="THREAD_LOCAL"]
  1158 -> 54 [style=solid label="MUTABLE"]
  1158 -> 523 [style=solid label="THROW"]
  1158 -> 55 [style=solid label="TYPENAME"]
  1158 -> 387 [style=solid label="SIZEOF"]
  1158 -> 388 [style=solid label="ALIGNOF"]
  1158 -> 524 [style=solid label="CO_YIELD"]
  1158 -> 389 [style=solid label="'0'"]
  1158 -> 390 [style=solid label="'1'"]
  1158 -> 391 [style=solid label="'2'"]
  1158 -> 392 [style=solid label="'3'"]
  1158 -> 393 [style=solid label="'4'"]
  1158 -> 394 [style=solid label="'5'"]
  1158 -> 395 [style=solid label="'6'"]
  1158 -> 396 [style=solid label="'7'"]
  1158 -> 397 [style=solid label="'8'"]
  1158 -> 398 [style=solid label="'9'"]
  1158 -> 205 [style=solid label="'u'"]
  1158 -> 206 [style=solid label="'U'"]
  1158 -> 207 [style=solid label="'L'"]
  1158 -> 208 [style=solid label="'R'"]
  1158 -> 399 [style=dashed label="additive-expression"]
  1158 -> 56 [style=dashed label="alias-declaration"]
  1158 -> 57 [style=dashed label="alignment-specifier"]
  1158 -> 400 [style=dashed label="and-expression"]
  1158 -> 58 [style=dashed label="asm-declaration"]
  1158 -> 525 [style=dashed label="assignment-expression"]
  1158 -> 60 [style=dashed label="attribute-specifier"]
  1158 -> 679 [style=dashed label="attribute-specifier-seq"]
  1158 -> 401 [style=dashed label="await-expression"]
  1158 -> 402 [style=dashed label="binary-literal"]
  1158 -> 680 [style=dashed label="block-declaration"]
  1158 -> 403 [style=dashed label="boolean-literal"]
  1158 -> 404 [style=dashed label="cast-expression"]
  1158 -> 405 [style=dashed label="character-literal"]
  1158 -> 63 [style=dashed label="class-head"]
  1158 -> 64 [style=dashed label="class-key"]
  1158 -> 65 [style=dashed label="class-name"]
  1158 -> 66 [style=dashed label="class-specifier"]
  1158 -> 406 [style=dashed label="compare-expression"]
  1158 -> 681 [style=dashed label="compound-statement"]
  1158 -> 67 [style=dashed label="concept-name"]
  1158 -> 526 [style=dashed label="conditional-expression"]
  1158 -> 68 [style=dashed label="conversion-function-id"]
  1158 -> 682 [style=dashed label="coroutine-return-statement"]
  1158 -> 69 [style=dashed label="cv-qualifier"]
  1158 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1158 -> 410 [style=dashed label="decimal-literal"]
  1158 -> 70 [style=dashed label="decl-specifier"]
  1158 -> 683 [style=dashed label="decl-specifier-seq"]
  1158 -> 684 [style=dashed label="declaration-statement"]
  1158 -> 76 [style=dashed label="decltype-specifier"]
  1158 -> 78 [style=dashed label="defining-type-specifier"]
  1158 -> 411 [style=dashed label="delete-expression"]
  1158 -> 412 [style=dashed label="digit"]
  1158 -> 413 [style=dashed label="digit-sequence"]
  1158 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1158 -> 80 [style=dashed label="elaborated-type-specifier"]
  1158 -> 414 [style=dashed label="encoding-prefix"]
  1158 -> 82 [style=dashed label="enum-head"]
  1158 -> 83 [style=dashed label="enum-key"]
  1158 -> 84 [style=dashed label="enum-name"]
  1158 -> 85 [style=dashed label="enum-specifier"]
  1158 -> 415 [style=dashed label="equality-expression"]
  1158 -> 416 [style=dashed label="exclusive-or-expression"]
  1158 -> 264 [style=dashed label="explicit-specifier"]
  1158 -> 685 [style=dashed label="expression"]
  1158 -> 686 [style=dashed label="expression-statement"]
  1158 -> 417 [style=dashed label="floating-point-literal"]
  1158 -> 418 [style=dashed label="fold-expression"]
  1158 -> 419 [style=dashed label="fractional-constant"]
  1158 -> 91 [style=dashed label="function-specifier"]
  1158 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1158 -> 421 [style=dashed label="hexadecimal-literal"]
  1158 -> 422 [style=dashed label="hexadecimal-prefix"]
  1158 -> 423 [style=dashed label="id-expression"]
  1158 -> 424 [style=dashed label="inclusive-or-expression"]
  1158 -> 425 [style=dashed label="integer-literal"]
  1158 -> 687 [style=dashed label="iteration-statement"]
  1158 -> 688 [style=dashed label="jump-statement"]
  1158 -> 689 [style=dashed label="labeled-statement"]
  1158 -> 426 [style=dashed label="lambda-expression"]
  1158 -> 427 [style=dashed label="lambda-introducer"]
  1158 -> 428 [style=dashed label="literal"]
  1158 -> 95 [style=dashed label="literal-operator-id"]
  1158 -> 429 [style=dashed label="logical-and-expression"]
  1158 -> 528 [style=dashed label="logical-or-expression"]
  1158 -> 431 [style=dashed label="multiplicative-expression"]
  1158 -> 99 [style=dashed label="namespace-alias"]
  1158 -> 100 [style=dashed label="namespace-alias-definition"]
  1158 -> 102 [style=dashed label="namespace-name"]
  1158 -> 432 [style=dashed label="nested-name-specifier"]
  1158 -> 433 [style=dashed label="new-expression"]
  1158 -> 434 [style=dashed label="noexcept-expression"]
  1158 -> 435 [style=dashed label="nonzero-digit"]
  1158 -> 436 [style=dashed label="octal-literal"]
  1158 -> 107 [style=dashed label="opaque-enum-declaration"]
  1158 -> 108 [style=dashed label="operator-function-id"]
  1158 -> 109 [style=dashed label="placeholder-type-specifier"]
  1158 -> 437 [style=dashed label="pm-expression"]
  1158 -> 438 [style=dashed label="pointer-literal"]
  1158 -> 439 [style=dashed label="postfix-expression"]
  1158 -> 440 [style=dashed label="primary-expression"]
  1158 -> 112 [style=dashed label="qualified-id"]
  1158 -> 441 [style=dashed label="relational-expression"]
  1158 -> 442 [style=dashed label="requires-expression"]
  1158 -> 690 [style=dashed label="selection-statement"]
  1158 -> 443 [style=dashed label="shift-expression"]
  1158 -> 113 [style=dashed label="simple-declaration"]
  1158 -> 114 [style=dashed label="simple-template-id"]
  1158 -> 444 [style=dashed label="simple-type-specifier"]
  1158 -> 1527 [style=dashed label="statement"]
  1158 -> 116 [style=dashed label="static_assert-declaration"]
  1158 -> 117 [style=dashed label="storage-class-specifier"]
  1158 -> 445 [style=dashed label="string-literal"]
  1158 -> 120 [style=dashed label="template-id"]
  1158 -> 215 [style=dashed label="template-name"]
  1158 -> 530 [style=dashed label="throw-expression"]
  1158 -> 693 [style=dashed label="try-block"]
  1158 -> 123 [style=dashed label="type-constraint"]
  1158 -> 124 [style=dashed label="type-name"]
  1158 -> 125 [style=dashed label="type-specifier"]
  1158 -> 126 [style=dashed label="typedef-name"]
  1158 -> 448 [style=dashed label="typename-specifier"]
  1158 -> 449 [style=dashed label="unary-expression"]
  1158 -> 450 [style=dashed label="unary-operator"]
  1158 -> 129 [style=dashed label="unqualified-id"]
  1158 -> 451 [style=dashed label="user-defined-character-literal"]
  1158 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1158 -> 453 [style=dashed label="user-defined-integer-literal"]
  1158 -> 454 [style=dashed label="user-defined-literal"]
  1158 -> 455 [style=dashed label="user-defined-string-literal"]
  1158 -> 130 [style=dashed label="using-declaration"]
  1158 -> 131 [style=dashed label="using-directive"]
  1158 -> 132 [style=dashed label="using-enum-declaration"]
  1158 -> 532 [style=dashed label="yield-expression"]
  1159 [label="State 1159\n\l182 coroutine-return-statement: CO_RETURN SEMICOLON •\l"]
  1159 -> "1159R182" [style=solid]
 "1159R182" [label="R182", fillcolor=3, shape=diamond, style=filled]
  1160 [label="State 1160\n\l333 expr-or-braced-init-list: braced-init-list •\l"]
  1160 -> "1160R333" [style=solid]
 "1160R333" [label="R333", fillcolor=3, shape=diamond, style=filled]
  1161 [label="State 1161\n\l183 coroutine-return-statement: CO_RETURN expr-or-braced-init-list • SEMICOLON\l"]
  1161 -> 1528 [style=solid label="SEMICOLON"]
  1162 [label="State 1162\n\l332 expr-or-braced-init-list: expression •\l335 expression: expression • COMMA assignment-expression\l"]
  1162 -> 1029 [style=solid label="COMMA"]
  1162 -> "1162R332" [style=solid]
 "1162R332" [label="R332", fillcolor=3, shape=diamond, style=filled]
  1163 [label="State 1163\n\l524 labeled-statement: DEFAULT COLON • statement\l"]
  1163 -> 356 [style=solid label="PLUS"]
  1163 -> 357 [style=solid label="MINUS"]
  1163 -> 1 [style=solid label="USING"]
  1163 -> 661 [style=solid label="IDENTIFIER"]
  1163 -> 662 [style=solid label="SEMICOLON"]
  1163 -> 4 [style=solid label="ALIGNAS"]
  1163 -> 358 [style=solid label="OPEN_PAREN"]
  1163 -> 359 [style=solid label="AND"]
  1163 -> 8 [style=solid label="ASM"]
  1163 -> 360 [style=solid label="SCOPE"]
  1163 -> 663 [style=solid label="OPEN_SQUARE"]
  1163 -> 362 [style=solid label="CO_AWAIT"]
  1163 -> 289 [style=solid label="OPEN_BRACE"]
  1163 -> 11 [style=solid label="VIRTUAL"]
  1163 -> 363 [style=solid label="ZERO_LB"]
  1163 -> 364 [style=solid label="ZERO_HB"]
  1163 -> 365 [style=solid label="SINGLE_QUOTE"]
  1163 -> 366 [style=solid label="FALSE"]
  1163 -> 367 [style=solid label="TRUE"]
  1163 -> 12 [style=solid label="CLASS"]
  1163 -> 13 [style=solid label="STRUCT"]
  1163 -> 14 [style=solid label="UNION"]
  1163 -> 368 [style=solid label="NOEXCEPT"]
  1163 -> 17 [style=solid label="OPERATOR"]
  1163 -> 665 [style=solid label="CO_RETURN"]
  1163 -> 18 [style=solid label="CONST"]
  1163 -> 19 [style=solid label="VOLATILE"]
  1163 -> 20 [style=solid label="FRIEND"]
  1163 -> 21 [style=solid label="TYPEDEF"]
  1163 -> 22 [style=solid label="CONSTEXPR"]
  1163 -> 23 [style=solid label="CONSTEVAL"]
  1163 -> 24 [style=solid label="CONSTINIT"]
  1163 -> 258 [style=solid label="INLINE"]
  1163 -> 26 [style=solid label="DECLTYPE"]
  1163 -> 369 [style=solid label="DELETE"]
  1163 -> 370 [style=solid label="DOT"]
  1163 -> 27 [style=solid label="ENUM"]
  1163 -> 184 [style=solid label="UNICODE_8"]
  1163 -> 259 [style=solid label="EXTERN"]
  1163 -> 29 [style=solid label="EXPLICIT"]
  1163 -> 371 [style=solid label="MULT"]
  1163 -> 666 [style=solid label="DEFAULT"]
  1163 -> 667 [style=solid label="TRY"]
  1163 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1163 -> 372 [style=solid label="ZERO_LX"]
  1163 -> 373 [style=solid label="ZERO_HX"]
  1163 -> 668 [style=solid label="WHILE"]
  1163 -> 669 [style=solid label="DO"]
  1163 -> 670 [style=solid label="FOR"]
  1163 -> 671 [style=solid label="BREAK"]
  1163 -> 672 [style=solid label="CONTINUE"]
  1163 -> 673 [style=solid label="RETURN"]
  1163 -> 674 [style=solid label="GOTO"]
  1163 -> 675 [style=solid label="CASE"]
  1163 -> 676 [style=solid label="NAMESPACE"]
  1163 -> 374 [style=solid label="REQUIRES"]
  1163 -> 375 [style=solid label="NEW"]
  1163 -> 376 [style=solid label="COMPL"]
  1163 -> 377 [style=solid label="NOT"]
  1163 -> 378 [style=solid label="PLUS_PLUS"]
  1163 -> 379 [style=solid label="MINUS_MINUS"]
  1163 -> 380 [style=solid label="THIS"]
  1163 -> 36 [style=solid label="AUTO"]
  1163 -> 381 [style=solid label="NULLPTR"]
  1163 -> 382 [style=solid label="DYNAMIC_CAST"]
  1163 -> 383 [style=solid label="STATIC_CAST"]
  1163 -> 384 [style=solid label="REINTERPRET_CAST"]
  1163 -> 385 [style=solid label="CONST_CAST"]
  1163 -> 386 [style=solid label="TYPEID"]
  1163 -> 677 [style=solid label="IF"]
  1163 -> 678 [style=solid label="SWITCH"]
  1163 -> 37 [style=solid label="CHAR"]
  1163 -> 38 [style=solid label="CHAR8_T"]
  1163 -> 39 [style=solid label="CHAR16_T"]
  1163 -> 40 [style=solid label="CHAR32_T"]
  1163 -> 41 [style=solid label="WCHAR_T"]
  1163 -> 42 [style=solid label="BOOL"]
  1163 -> 43 [style=solid label="SHORT"]
  1163 -> 44 [style=solid label="INT"]
  1163 -> 45 [style=solid label="LONG"]
  1163 -> 46 [style=solid label="SIGNED"]
  1163 -> 47 [style=solid label="UNSIGNED"]
  1163 -> 48 [style=solid label="FLOAT"]
  1163 -> 49 [style=solid label="DOUBLE"]
  1163 -> 50 [style=solid label="VOID"]
  1163 -> 51 [style=solid label="STATIC_ASSERT"]
  1163 -> 52 [style=solid label="STATIC"]
  1163 -> 53 [style=solid label="THREAD_LOCAL"]
  1163 -> 54 [style=solid label="MUTABLE"]
  1163 -> 523 [style=solid label="THROW"]
  1163 -> 55 [style=solid label="TYPENAME"]
  1163 -> 387 [style=solid label="SIZEOF"]
  1163 -> 388 [style=solid label="ALIGNOF"]
  1163 -> 524 [style=solid label="CO_YIELD"]
  1163 -> 389 [style=solid label="'0'"]
  1163 -> 390 [style=solid label="'1'"]
  1163 -> 391 [style=solid label="'2'"]
  1163 -> 392 [style=solid label="'3'"]
  1163 -> 393 [style=solid label="'4'"]
  1163 -> 394 [style=solid label="'5'"]
  1163 -> 395 [style=solid label="'6'"]
  1163 -> 396 [style=solid label="'7'"]
  1163 -> 397 [style=solid label="'8'"]
  1163 -> 398 [style=solid label="'9'"]
  1163 -> 205 [style=solid label="'u'"]
  1163 -> 206 [style=solid label="'U'"]
  1163 -> 207 [style=solid label="'L'"]
  1163 -> 208 [style=solid label="'R'"]
  1163 -> 399 [style=dashed label="additive-expression"]
  1163 -> 56 [style=dashed label="alias-declaration"]
  1163 -> 57 [style=dashed label="alignment-specifier"]
  1163 -> 400 [style=dashed label="and-expression"]
  1163 -> 58 [style=dashed label="asm-declaration"]
  1163 -> 525 [style=dashed label="assignment-expression"]
  1163 -> 60 [style=dashed label="attribute-specifier"]
  1163 -> 679 [style=dashed label="attribute-specifier-seq"]
  1163 -> 401 [style=dashed label="await-expression"]
  1163 -> 402 [style=dashed label="binary-literal"]
  1163 -> 680 [style=dashed label="block-declaration"]
  1163 -> 403 [style=dashed label="boolean-literal"]
  1163 -> 404 [style=dashed label="cast-expression"]
  1163 -> 405 [style=dashed label="character-literal"]
  1163 -> 63 [style=dashed label="class-head"]
  1163 -> 64 [style=dashed label="class-key"]
  1163 -> 65 [style=dashed label="class-name"]
  1163 -> 66 [style=dashed label="class-specifier"]
  1163 -> 406 [style=dashed label="compare-expression"]
  1163 -> 681 [style=dashed label="compound-statement"]
  1163 -> 67 [style=dashed label="concept-name"]
  1163 -> 526 [style=dashed label="conditional-expression"]
  1163 -> 68 [style=dashed label="conversion-function-id"]
  1163 -> 682 [style=dashed label="coroutine-return-statement"]
  1163 -> 69 [style=dashed label="cv-qualifier"]
  1163 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1163 -> 410 [style=dashed label="decimal-literal"]
  1163 -> 70 [style=dashed label="decl-specifier"]
  1163 -> 683 [style=dashed label="decl-specifier-seq"]
  1163 -> 684 [style=dashed label="declaration-statement"]
  1163 -> 76 [style=dashed label="decltype-specifier"]
  1163 -> 78 [style=dashed label="defining-type-specifier"]
  1163 -> 411 [style=dashed label="delete-expression"]
  1163 -> 412 [style=dashed label="digit"]
  1163 -> 413 [style=dashed label="digit-sequence"]
  1163 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1163 -> 80 [style=dashed label="elaborated-type-specifier"]
  1163 -> 414 [style=dashed label="encoding-prefix"]
  1163 -> 82 [style=dashed label="enum-head"]
  1163 -> 83 [style=dashed label="enum-key"]
  1163 -> 84 [style=dashed label="enum-name"]
  1163 -> 85 [style=dashed label="enum-specifier"]
  1163 -> 415 [style=dashed label="equality-expression"]
  1163 -> 416 [style=dashed label="exclusive-or-expression"]
  1163 -> 264 [style=dashed label="explicit-specifier"]
  1163 -> 685 [style=dashed label="expression"]
  1163 -> 686 [style=dashed label="expression-statement"]
  1163 -> 417 [style=dashed label="floating-point-literal"]
  1163 -> 418 [style=dashed label="fold-expression"]
  1163 -> 419 [style=dashed label="fractional-constant"]
  1163 -> 91 [style=dashed label="function-specifier"]
  1163 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1163 -> 421 [style=dashed label="hexadecimal-literal"]
  1163 -> 422 [style=dashed label="hexadecimal-prefix"]
  1163 -> 423 [style=dashed label="id-expression"]
  1163 -> 424 [style=dashed label="inclusive-or-expression"]
  1163 -> 425 [style=dashed label="integer-literal"]
  1163 -> 687 [style=dashed label="iteration-statement"]
  1163 -> 688 [style=dashed label="jump-statement"]
  1163 -> 689 [style=dashed label="labeled-statement"]
  1163 -> 426 [style=dashed label="lambda-expression"]
  1163 -> 427 [style=dashed label="lambda-introducer"]
  1163 -> 428 [style=dashed label="literal"]
  1163 -> 95 [style=dashed label="literal-operator-id"]
  1163 -> 429 [style=dashed label="logical-and-expression"]
  1163 -> 528 [style=dashed label="logical-or-expression"]
  1163 -> 431 [style=dashed label="multiplicative-expression"]
  1163 -> 99 [style=dashed label="namespace-alias"]
  1163 -> 100 [style=dashed label="namespace-alias-definition"]
  1163 -> 102 [style=dashed label="namespace-name"]
  1163 -> 432 [style=dashed label="nested-name-specifier"]
  1163 -> 433 [style=dashed label="new-expression"]
  1163 -> 434 [style=dashed label="noexcept-expression"]
  1163 -> 435 [style=dashed label="nonzero-digit"]
  1163 -> 436 [style=dashed label="octal-literal"]
  1163 -> 107 [style=dashed label="opaque-enum-declaration"]
  1163 -> 108 [style=dashed label="operator-function-id"]
  1163 -> 109 [style=dashed label="placeholder-type-specifier"]
  1163 -> 437 [style=dashed label="pm-expression"]
  1163 -> 438 [style=dashed label="pointer-literal"]
  1163 -> 439 [style=dashed label="postfix-expression"]
  1163 -> 440 [style=dashed label="primary-expression"]
  1163 -> 112 [style=dashed label="qualified-id"]
  1163 -> 441 [style=dashed label="relational-expression"]
  1163 -> 442 [style=dashed label="requires-expression"]
  1163 -> 690 [style=dashed label="selection-statement"]
  1163 -> 443 [style=dashed label="shift-expression"]
  1163 -> 113 [style=dashed label="simple-declaration"]
  1163 -> 114 [style=dashed label="simple-template-id"]
  1163 -> 444 [style=dashed label="simple-type-specifier"]
  1163 -> 1529 [style=dashed label="statement"]
  1163 -> 116 [style=dashed label="static_assert-declaration"]
  1163 -> 117 [style=dashed label="storage-class-specifier"]
  1163 -> 445 [style=dashed label="string-literal"]
  1163 -> 120 [style=dashed label="template-id"]
  1163 -> 215 [style=dashed label="template-name"]
  1163 -> 530 [style=dashed label="throw-expression"]
  1163 -> 693 [style=dashed label="try-block"]
  1163 -> 123 [style=dashed label="type-constraint"]
  1163 -> 124 [style=dashed label="type-name"]
  1163 -> 125 [style=dashed label="type-specifier"]
  1163 -> 126 [style=dashed label="typedef-name"]
  1163 -> 448 [style=dashed label="typename-specifier"]
  1163 -> 449 [style=dashed label="unary-expression"]
  1163 -> 450 [style=dashed label="unary-operator"]
  1163 -> 129 [style=dashed label="unqualified-id"]
  1163 -> 451 [style=dashed label="user-defined-character-literal"]
  1163 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1163 -> 453 [style=dashed label="user-defined-integer-literal"]
  1163 -> 454 [style=dashed label="user-defined-literal"]
  1163 -> 455 [style=dashed label="user-defined-string-literal"]
  1163 -> 130 [style=dashed label="using-declaration"]
  1163 -> 131 [style=dashed label="using-directive"]
  1163 -> 132 [style=dashed label="using-enum-declaration"]
  1163 -> 532 [style=dashed label="yield-expression"]
  1164 [label="State 1164\n\l1069 try-block: TRY compound-statement • handler-seq\l"]
  1164 -> 1193 [style=solid label="CATCH"]
  1164 -> 1194 [style=dashed label="handler"]
  1164 -> 1530 [style=dashed label="handler-seq"]
  1165 [label="State 1165\n\l505 iteration-statement: WHILE OPEN_PAREN • condition CLOSE_PAREN statement\l"]
  1165 -> 356 [style=solid label="PLUS"]
  1165 -> 357 [style=solid label="MINUS"]
  1165 -> 2 [style=solid label="IDENTIFIER"]
  1165 -> 4 [style=solid label="ALIGNAS"]
  1165 -> 358 [style=solid label="OPEN_PAREN"]
  1165 -> 359 [style=solid label="AND"]
  1165 -> 360 [style=solid label="SCOPE"]
  1165 -> 663 [style=solid label="OPEN_SQUARE"]
  1165 -> 362 [style=solid label="CO_AWAIT"]
  1165 -> 11 [style=solid label="VIRTUAL"]
  1165 -> 363 [style=solid label="ZERO_LB"]
  1165 -> 364 [style=solid label="ZERO_HB"]
  1165 -> 365 [style=solid label="SINGLE_QUOTE"]
  1165 -> 366 [style=solid label="FALSE"]
  1165 -> 367 [style=solid label="TRUE"]
  1165 -> 12 [style=solid label="CLASS"]
  1165 -> 13 [style=solid label="STRUCT"]
  1165 -> 14 [style=solid label="UNION"]
  1165 -> 368 [style=solid label="NOEXCEPT"]
  1165 -> 17 [style=solid label="OPERATOR"]
  1165 -> 18 [style=solid label="CONST"]
  1165 -> 19 [style=solid label="VOLATILE"]
  1165 -> 20 [style=solid label="FRIEND"]
  1165 -> 21 [style=solid label="TYPEDEF"]
  1165 -> 22 [style=solid label="CONSTEXPR"]
  1165 -> 23 [style=solid label="CONSTEVAL"]
  1165 -> 24 [style=solid label="CONSTINIT"]
  1165 -> 258 [style=solid label="INLINE"]
  1165 -> 26 [style=solid label="DECLTYPE"]
  1165 -> 369 [style=solid label="DELETE"]
  1165 -> 370 [style=solid label="DOT"]
  1165 -> 27 [style=solid label="ENUM"]
  1165 -> 184 [style=solid label="UNICODE_8"]
  1165 -> 259 [style=solid label="EXTERN"]
  1165 -> 29 [style=solid label="EXPLICIT"]
  1165 -> 371 [style=solid label="MULT"]
  1165 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1165 -> 372 [style=solid label="ZERO_LX"]
  1165 -> 373 [style=solid label="ZERO_HX"]
  1165 -> 374 [style=solid label="REQUIRES"]
  1165 -> 375 [style=solid label="NEW"]
  1165 -> 376 [style=solid label="COMPL"]
  1165 -> 377 [style=solid label="NOT"]
  1165 -> 378 [style=solid label="PLUS_PLUS"]
  1165 -> 379 [style=solid label="MINUS_MINUS"]
  1165 -> 380 [style=solid label="THIS"]
  1165 -> 36 [style=solid label="AUTO"]
  1165 -> 381 [style=solid label="NULLPTR"]
  1165 -> 382 [style=solid label="DYNAMIC_CAST"]
  1165 -> 383 [style=solid label="STATIC_CAST"]
  1165 -> 384 [style=solid label="REINTERPRET_CAST"]
  1165 -> 385 [style=solid label="CONST_CAST"]
  1165 -> 386 [style=solid label="TYPEID"]
  1165 -> 37 [style=solid label="CHAR"]
  1165 -> 38 [style=solid label="CHAR8_T"]
  1165 -> 39 [style=solid label="CHAR16_T"]
  1165 -> 40 [style=solid label="CHAR32_T"]
  1165 -> 41 [style=solid label="WCHAR_T"]
  1165 -> 42 [style=solid label="BOOL"]
  1165 -> 43 [style=solid label="SHORT"]
  1165 -> 44 [style=solid label="INT"]
  1165 -> 45 [style=solid label="LONG"]
  1165 -> 46 [style=solid label="SIGNED"]
  1165 -> 47 [style=solid label="UNSIGNED"]
  1165 -> 48 [style=solid label="FLOAT"]
  1165 -> 49 [style=solid label="DOUBLE"]
  1165 -> 50 [style=solid label="VOID"]
  1165 -> 52 [style=solid label="STATIC"]
  1165 -> 53 [style=solid label="THREAD_LOCAL"]
  1165 -> 54 [style=solid label="MUTABLE"]
  1165 -> 523 [style=solid label="THROW"]
  1165 -> 55 [style=solid label="TYPENAME"]
  1165 -> 387 [style=solid label="SIZEOF"]
  1165 -> 388 [style=solid label="ALIGNOF"]
  1165 -> 524 [style=solid label="CO_YIELD"]
  1165 -> 389 [style=solid label="'0'"]
  1165 -> 390 [style=solid label="'1'"]
  1165 -> 391 [style=solid label="'2'"]
  1165 -> 392 [style=solid label="'3'"]
  1165 -> 393 [style=solid label="'4'"]
  1165 -> 394 [style=solid label="'5'"]
  1165 -> 395 [style=solid label="'6'"]
  1165 -> 396 [style=solid label="'7'"]
  1165 -> 397 [style=solid label="'8'"]
  1165 -> 398 [style=solid label="'9'"]
  1165 -> 205 [style=solid label="'u'"]
  1165 -> 206 [style=solid label="'U'"]
  1165 -> 207 [style=solid label="'L'"]
  1165 -> 208 [style=solid label="'R'"]
  1165 -> 399 [style=dashed label="additive-expression"]
  1165 -> 57 [style=dashed label="alignment-specifier"]
  1165 -> 400 [style=dashed label="and-expression"]
  1165 -> 525 [style=dashed label="assignment-expression"]
  1165 -> 60 [style=dashed label="attribute-specifier"]
  1165 -> 1531 [style=dashed label="attribute-specifier-seq"]
  1165 -> 401 [style=dashed label="await-expression"]
  1165 -> 402 [style=dashed label="binary-literal"]
  1165 -> 403 [style=dashed label="boolean-literal"]
  1165 -> 404 [style=dashed label="cast-expression"]
  1165 -> 405 [style=dashed label="character-literal"]
  1165 -> 63 [style=dashed label="class-head"]
  1165 -> 64 [style=dashed label="class-key"]
  1165 -> 65 [style=dashed label="class-name"]
  1165 -> 66 [style=dashed label="class-specifier"]
  1165 -> 406 [style=dashed label="compare-expression"]
  1165 -> 67 [style=dashed label="concept-name"]
  1165 -> 1532 [style=dashed label="condition"]
  1165 -> 526 [style=dashed label="conditional-expression"]
  1165 -> 68 [style=dashed label="conversion-function-id"]
  1165 -> 69 [style=dashed label="cv-qualifier"]
  1165 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1165 -> 410 [style=dashed label="decimal-literal"]
  1165 -> 70 [style=dashed label="decl-specifier"]
  1165 -> 1533 [style=dashed label="decl-specifier-seq"]
  1165 -> 76 [style=dashed label="decltype-specifier"]
  1165 -> 78 [style=dashed label="defining-type-specifier"]
  1165 -> 411 [style=dashed label="delete-expression"]
  1165 -> 412 [style=dashed label="digit"]
  1165 -> 413 [style=dashed label="digit-sequence"]
  1165 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1165 -> 80 [style=dashed label="elaborated-type-specifier"]
  1165 -> 414 [style=dashed label="encoding-prefix"]
  1165 -> 82 [style=dashed label="enum-head"]
  1165 -> 263 [style=dashed label="enum-key"]
  1165 -> 84 [style=dashed label="enum-name"]
  1165 -> 85 [style=dashed label="enum-specifier"]
  1165 -> 415 [style=dashed label="equality-expression"]
  1165 -> 416 [style=dashed label="exclusive-or-expression"]
  1165 -> 264 [style=dashed label="explicit-specifier"]
  1165 -> 1534 [style=dashed label="expression"]
  1165 -> 417 [style=dashed label="floating-point-literal"]
  1165 -> 418 [style=dashed label="fold-expression"]
  1165 -> 419 [style=dashed label="fractional-constant"]
  1165 -> 91 [style=dashed label="function-specifier"]
  1165 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1165 -> 421 [style=dashed label="hexadecimal-literal"]
  1165 -> 422 [style=dashed label="hexadecimal-prefix"]
  1165 -> 423 [style=dashed label="id-expression"]
  1165 -> 424 [style=dashed label="inclusive-or-expression"]
  1165 -> 425 [style=dashed label="integer-literal"]
  1165 -> 426 [style=dashed label="lambda-expression"]
  1165 -> 427 [style=dashed label="lambda-introducer"]
  1165 -> 428 [style=dashed label="literal"]
  1165 -> 95 [style=dashed label="literal-operator-id"]
  1165 -> 429 [style=dashed label="logical-and-expression"]
  1165 -> 528 [style=dashed label="logical-or-expression"]
  1165 -> 431 [style=dashed label="multiplicative-expression"]
  1165 -> 99 [style=dashed label="namespace-alias"]
  1165 -> 102 [style=dashed label="namespace-name"]
  1165 -> 432 [style=dashed label="nested-name-specifier"]
  1165 -> 433 [style=dashed label="new-expression"]
  1165 -> 434 [style=dashed label="noexcept-expression"]
  1165 -> 435 [style=dashed label="nonzero-digit"]
  1165 -> 436 [style=dashed label="octal-literal"]
  1165 -> 108 [style=dashed label="operator-function-id"]
  1165 -> 109 [style=dashed label="placeholder-type-specifier"]
  1165 -> 437 [style=dashed label="pm-expression"]
  1165 -> 438 [style=dashed label="pointer-literal"]
  1165 -> 439 [style=dashed label="postfix-expression"]
  1165 -> 440 [style=dashed label="primary-expression"]
  1165 -> 112 [style=dashed label="qualified-id"]
  1165 -> 441 [style=dashed label="relational-expression"]
  1165 -> 442 [style=dashed label="requires-expression"]
  1165 -> 443 [style=dashed label="shift-expression"]
  1165 -> 114 [style=dashed label="simple-template-id"]
  1165 -> 444 [style=dashed label="simple-type-specifier"]
  1165 -> 117 [style=dashed label="storage-class-specifier"]
  1165 -> 445 [style=dashed label="string-literal"]
  1165 -> 120 [style=dashed label="template-id"]
  1165 -> 215 [style=dashed label="template-name"]
  1165 -> 530 [style=dashed label="throw-expression"]
  1165 -> 123 [style=dashed label="type-constraint"]
  1165 -> 124 [style=dashed label="type-name"]
  1165 -> 125 [style=dashed label="type-specifier"]
  1165 -> 126 [style=dashed label="typedef-name"]
  1165 -> 448 [style=dashed label="typename-specifier"]
  1165 -> 449 [style=dashed label="unary-expression"]
  1165 -> 450 [style=dashed label="unary-operator"]
  1165 -> 129 [style=dashed label="unqualified-id"]
  1165 -> 451 [style=dashed label="user-defined-character-literal"]
  1165 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1165 -> 453 [style=dashed label="user-defined-integer-literal"]
  1165 -> 454 [style=dashed label="user-defined-literal"]
  1165 -> 455 [style=dashed label="user-defined-string-literal"]
  1165 -> 532 [style=dashed label="yield-expression"]
  1166 [label="State 1166\n\l506 iteration-statement: DO statement • WHILE OPEN_PAREN expression CLOSE_PAREN SEMICOLON\l"]
  1166 -> 1535 [style=solid label="WHILE"]
  1167 [label="State 1167\n\l507 iteration-statement: FOR OPEN_PAREN • init-statement SEMICOLON CLOSE_PAREN statement\l508                    | FOR OPEN_PAREN • init-statement condition SEMICOLON CLOSE_PAREN statement\l509                    | FOR OPEN_PAREN • init-statement SEMICOLON expression CLOSE_PAREN statement\l510                    | FOR OPEN_PAREN • init-statement condition SEMICOLON expression CLOSE_PAREN statement\l511                    | FOR OPEN_PAREN • for-range-declaration COLON for-range-initializer CLOSE_PAREN statement\l512                    | FOR OPEN_PAREN • init-statement for-range-declaration COLON for-range-initializer CLOSE_PAREN statement\l"]
  1167 -> 356 [style=solid label="PLUS"]
  1167 -> 357 [style=solid label="MINUS"]
  1167 -> 1536 [style=solid label="USING"]
  1167 -> 2 [style=solid label="IDENTIFIER"]
  1167 -> 662 [style=solid label="SEMICOLON"]
  1167 -> 4 [style=solid label="ALIGNAS"]
  1167 -> 358 [style=solid label="OPEN_PAREN"]
  1167 -> 359 [style=solid label="AND"]
  1167 -> 360 [style=solid label="SCOPE"]
  1167 -> 663 [style=solid label="OPEN_SQUARE"]
  1167 -> 362 [style=solid label="CO_AWAIT"]
  1167 -> 11 [style=solid label="VIRTUAL"]
  1167 -> 363 [style=solid label="ZERO_LB"]
  1167 -> 364 [style=solid label="ZERO_HB"]
  1167 -> 365 [style=solid label="SINGLE_QUOTE"]
  1167 -> 366 [style=solid label="FALSE"]
  1167 -> 367 [style=solid label="TRUE"]
  1167 -> 12 [style=solid label="CLASS"]
  1167 -> 13 [style=solid label="STRUCT"]
  1167 -> 14 [style=solid label="UNION"]
  1167 -> 368 [style=solid label="NOEXCEPT"]
  1167 -> 17 [style=solid label="OPERATOR"]
  1167 -> 18 [style=solid label="CONST"]
  1167 -> 19 [style=solid label="VOLATILE"]
  1167 -> 20 [style=solid label="FRIEND"]
  1167 -> 21 [style=solid label="TYPEDEF"]
  1167 -> 22 [style=solid label="CONSTEXPR"]
  1167 -> 23 [style=solid label="CONSTEVAL"]
  1167 -> 24 [style=solid label="CONSTINIT"]
  1167 -> 258 [style=solid label="INLINE"]
  1167 -> 26 [style=solid label="DECLTYPE"]
  1167 -> 369 [style=solid label="DELETE"]
  1167 -> 370 [style=solid label="DOT"]
  1167 -> 27 [style=solid label="ENUM"]
  1167 -> 184 [style=solid label="UNICODE_8"]
  1167 -> 259 [style=solid label="EXTERN"]
  1167 -> 29 [style=solid label="EXPLICIT"]
  1167 -> 371 [style=solid label="MULT"]
  1167 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1167 -> 372 [style=solid label="ZERO_LX"]
  1167 -> 373 [style=solid label="ZERO_HX"]
  1167 -> 374 [style=solid label="REQUIRES"]
  1167 -> 375 [style=solid label="NEW"]
  1167 -> 376 [style=solid label="COMPL"]
  1167 -> 377 [style=solid label="NOT"]
  1167 -> 378 [style=solid label="PLUS_PLUS"]
  1167 -> 379 [style=solid label="MINUS_MINUS"]
  1167 -> 380 [style=solid label="THIS"]
  1167 -> 36 [style=solid label="AUTO"]
  1167 -> 381 [style=solid label="NULLPTR"]
  1167 -> 382 [style=solid label="DYNAMIC_CAST"]
  1167 -> 383 [style=solid label="STATIC_CAST"]
  1167 -> 384 [style=solid label="REINTERPRET_CAST"]
  1167 -> 385 [style=solid label="CONST_CAST"]
  1167 -> 386 [style=solid label="TYPEID"]
  1167 -> 37 [style=solid label="CHAR"]
  1167 -> 38 [style=solid label="CHAR8_T"]
  1167 -> 39 [style=solid label="CHAR16_T"]
  1167 -> 40 [style=solid label="CHAR32_T"]
  1167 -> 41 [style=solid label="WCHAR_T"]
  1167 -> 42 [style=solid label="BOOL"]
  1167 -> 43 [style=solid label="SHORT"]
  1167 -> 44 [style=solid label="INT"]
  1167 -> 45 [style=solid label="LONG"]
  1167 -> 46 [style=solid label="SIGNED"]
  1167 -> 47 [style=solid label="UNSIGNED"]
  1167 -> 48 [style=solid label="FLOAT"]
  1167 -> 49 [style=solid label="DOUBLE"]
  1167 -> 50 [style=solid label="VOID"]
  1167 -> 52 [style=solid label="STATIC"]
  1167 -> 53 [style=solid label="THREAD_LOCAL"]
  1167 -> 54 [style=solid label="MUTABLE"]
  1167 -> 523 [style=solid label="THROW"]
  1167 -> 55 [style=solid label="TYPENAME"]
  1167 -> 387 [style=solid label="SIZEOF"]
  1167 -> 388 [style=solid label="ALIGNOF"]
  1167 -> 524 [style=solid label="CO_YIELD"]
  1167 -> 389 [style=solid label="'0'"]
  1167 -> 390 [style=solid label="'1'"]
  1167 -> 391 [style=solid label="'2'"]
  1167 -> 392 [style=solid label="'3'"]
  1167 -> 393 [style=solid label="'4'"]
  1167 -> 394 [style=solid label="'5'"]
  1167 -> 395 [style=solid label="'6'"]
  1167 -> 396 [style=solid label="'7'"]
  1167 -> 397 [style=solid label="'8'"]
  1167 -> 398 [style=solid label="'9'"]
  1167 -> 205 [style=solid label="'u'"]
  1167 -> 206 [style=solid label="'U'"]
  1167 -> 207 [style=solid label="'L'"]
  1167 -> 208 [style=solid label="'R'"]
  1167 -> 399 [style=dashed label="additive-expression"]
  1167 -> 1537 [style=dashed label="alias-declaration"]
  1167 -> 57 [style=dashed label="alignment-specifier"]
  1167 -> 400 [style=dashed label="and-expression"]
  1167 -> 525 [style=dashed label="assignment-expression"]
  1167 -> 60 [style=dashed label="attribute-specifier"]
  1167 -> 1538 [style=dashed label="attribute-specifier-seq"]
  1167 -> 401 [style=dashed label="await-expression"]
  1167 -> 402 [style=dashed label="binary-literal"]
  1167 -> 403 [style=dashed label="boolean-literal"]
  1167 -> 404 [style=dashed label="cast-expression"]
  1167 -> 405 [style=dashed label="character-literal"]
  1167 -> 63 [style=dashed label="class-head"]
  1167 -> 64 [style=dashed label="class-key"]
  1167 -> 65 [style=dashed label="class-name"]
  1167 -> 66 [style=dashed label="class-specifier"]
  1167 -> 406 [style=dashed label="compare-expression"]
  1167 -> 67 [style=dashed label="concept-name"]
  1167 -> 526 [style=dashed label="conditional-expression"]
  1167 -> 68 [style=dashed label="conversion-function-id"]
  1167 -> 69 [style=dashed label="cv-qualifier"]
  1167 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1167 -> 410 [style=dashed label="decimal-literal"]
  1167 -> 70 [style=dashed label="decl-specifier"]
  1167 -> 1539 [style=dashed label="decl-specifier-seq"]
  1167 -> 76 [style=dashed label="decltype-specifier"]
  1167 -> 78 [style=dashed label="defining-type-specifier"]
  1167 -> 411 [style=dashed label="delete-expression"]
  1167 -> 412 [style=dashed label="digit"]
  1167 -> 413 [style=dashed label="digit-sequence"]
  1167 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1167 -> 80 [style=dashed label="elaborated-type-specifier"]
  1167 -> 414 [style=dashed label="encoding-prefix"]
  1167 -> 82 [style=dashed label="enum-head"]
  1167 -> 263 [style=dashed label="enum-key"]
  1167 -> 84 [style=dashed label="enum-name"]
  1167 -> 85 [style=dashed label="enum-specifier"]
  1167 -> 415 [style=dashed label="equality-expression"]
  1167 -> 416 [style=dashed label="exclusive-or-expression"]
  1167 -> 264 [style=dashed label="explicit-specifier"]
  1167 -> 685 [style=dashed label="expression"]
  1167 -> 1540 [style=dashed label="expression-statement"]
  1167 -> 417 [style=dashed label="floating-point-literal"]
  1167 -> 418 [style=dashed label="fold-expression"]
  1167 -> 1541 [style=dashed label="for-range-declaration"]
  1167 -> 419 [style=dashed label="fractional-constant"]
  1167 -> 91 [style=dashed label="function-specifier"]
  1167 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1167 -> 421 [style=dashed label="hexadecimal-literal"]
  1167 -> 422 [style=dashed label="hexadecimal-prefix"]
  1167 -> 423 [style=dashed label="id-expression"]
  1167 -> 424 [style=dashed label="inclusive-or-expression"]
  1167 -> 1542 [style=dashed label="init-statement"]
  1167 -> 425 [style=dashed label="integer-literal"]
  1167 -> 426 [style=dashed label="lambda-expression"]
  1167 -> 427 [style=dashed label="lambda-introducer"]
  1167 -> 428 [style=dashed label="literal"]
  1167 -> 95 [style=dashed label="literal-operator-id"]
  1167 -> 429 [style=dashed label="logical-and-expression"]
  1167 -> 528 [style=dashed label="logical-or-expression"]
  1167 -> 431 [style=dashed label="multiplicative-expression"]
  1167 -> 99 [style=dashed label="namespace-alias"]
  1167 -> 102 [style=dashed label="namespace-name"]
  1167 -> 432 [style=dashed label="nested-name-specifier"]
  1167 -> 433 [style=dashed label="new-expression"]
  1167 -> 434 [style=dashed label="noexcept-expression"]
  1167 -> 435 [style=dashed label="nonzero-digit"]
  1167 -> 436 [style=dashed label="octal-literal"]
  1167 -> 108 [style=dashed label="operator-function-id"]
  1167 -> 109 [style=dashed label="placeholder-type-specifier"]
  1167 -> 437 [style=dashed label="pm-expression"]
  1167 -> 438 [style=dashed label="pointer-literal"]
  1167 -> 439 [style=dashed label="postfix-expression"]
  1167 -> 440 [style=dashed label="primary-expression"]
  1167 -> 112 [style=dashed label="qualified-id"]
  1167 -> 441 [style=dashed label="relational-expression"]
  1167 -> 442 [style=dashed label="requires-expression"]
  1167 -> 443 [style=dashed label="shift-expression"]
  1167 -> 1543 [style=dashed label="simple-declaration"]
  1167 -> 114 [style=dashed label="simple-template-id"]
  1167 -> 444 [style=dashed label="simple-type-specifier"]
  1167 -> 117 [style=dashed label="storage-class-specifier"]
  1167 -> 445 [style=dashed label="string-literal"]
  1167 -> 120 [style=dashed label="template-id"]
  1167 -> 215 [style=dashed label="template-name"]
  1167 -> 530 [style=dashed label="throw-expression"]
  1167 -> 123 [style=dashed label="type-constraint"]
  1167 -> 124 [style=dashed label="type-name"]
  1167 -> 125 [style=dashed label="type-specifier"]
  1167 -> 126 [style=dashed label="typedef-name"]
  1167 -> 448 [style=dashed label="typename-specifier"]
  1167 -> 449 [style=dashed label="unary-expression"]
  1167 -> 450 [style=dashed label="unary-operator"]
  1167 -> 129 [style=dashed label="unqualified-id"]
  1167 -> 451 [style=dashed label="user-defined-character-literal"]
  1167 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1167 -> 453 [style=dashed label="user-defined-integer-literal"]
  1167 -> 454 [style=dashed label="user-defined-literal"]
  1167 -> 455 [style=dashed label="user-defined-string-literal"]
  1167 -> 532 [style=dashed label="yield-expression"]
  1168 [label="State 1168\n\l513 jump-statement: BREAK SEMICOLON •\l"]
  1168 -> "1168R513" [style=solid]
 "1168R513" [label="R513", fillcolor=3, shape=diamond, style=filled]
  1169 [label="State 1169\n\l514 jump-statement: CONTINUE SEMICOLON •\l"]
  1169 -> "1169R514" [style=solid]
 "1169R514" [label="R514", fillcolor=3, shape=diamond, style=filled]
  1170 [label="State 1170\n\l515 jump-statement: RETURN SEMICOLON •\l"]
  1170 -> "1170R515" [style=solid]
 "1170R515" [label="R515", fillcolor=3, shape=diamond, style=filled]
  1171 [label="State 1171\n\l516 jump-statement: RETURN expr-or-braced-init-list • SEMICOLON\l"]
  1171 -> 1544 [style=solid label="SEMICOLON"]
  1172 [label="State 1172\n\l518 jump-statement: GOTO IDENTIFIER • SEMICOLON\l"]
  1172 -> 1545 [style=solid label="SEMICOLON"]
  1173 [label="State 1173\n\l522 labeled-statement: CASE constant-expression • COLON statement\l"]
  1173 -> 1546 [style=solid label="COLON"]
  1174 [label="State 1174\n\l648 namespace-alias-definition: NAMESPACE IDENTIFIER • EQ qualified-namespace-specifier SEMICOLON\l"]
  1174 -> 564 [style=solid label="EQ"]
  1175 [label="State 1175\n\l938 selection-statement: IF OPEN_PAREN • condition CLOSE_PAREN statement\l940                    | IF OPEN_PAREN • init-statement condition CLOSE_PAREN statement\l942                    | IF OPEN_PAREN • condition CLOSE_PAREN statement ELSE statement\l944                    | IF OPEN_PAREN • init-statement condition CLOSE_PAREN statement ELSE statement\l"]
  1175 -> 356 [style=solid label="PLUS"]
  1175 -> 357 [style=solid label="MINUS"]
  1175 -> 1536 [style=solid label="USING"]
  1175 -> 2 [style=solid label="IDENTIFIER"]
  1175 -> 662 [style=solid label="SEMICOLON"]
  1175 -> 4 [style=solid label="ALIGNAS"]
  1175 -> 358 [style=solid label="OPEN_PAREN"]
  1175 -> 359 [style=solid label="AND"]
  1175 -> 360 [style=solid label="SCOPE"]
  1175 -> 663 [style=solid label="OPEN_SQUARE"]
  1175 -> 362 [style=solid label="CO_AWAIT"]
  1175 -> 11 [style=solid label="VIRTUAL"]
  1175 -> 363 [style=solid label="ZERO_LB"]
  1175 -> 364 [style=solid label="ZERO_HB"]
  1175 -> 365 [style=solid label="SINGLE_QUOTE"]
  1175 -> 366 [style=solid label="FALSE"]
  1175 -> 367 [style=solid label="TRUE"]
  1175 -> 12 [style=solid label="CLASS"]
  1175 -> 13 [style=solid label="STRUCT"]
  1175 -> 14 [style=solid label="UNION"]
  1175 -> 368 [style=solid label="NOEXCEPT"]
  1175 -> 17 [style=solid label="OPERATOR"]
  1175 -> 18 [style=solid label="CONST"]
  1175 -> 19 [style=solid label="VOLATILE"]
  1175 -> 20 [style=solid label="FRIEND"]
  1175 -> 21 [style=solid label="TYPEDEF"]
  1175 -> 22 [style=solid label="CONSTEXPR"]
  1175 -> 23 [style=solid label="CONSTEVAL"]
  1175 -> 24 [style=solid label="CONSTINIT"]
  1175 -> 258 [style=solid label="INLINE"]
  1175 -> 26 [style=solid label="DECLTYPE"]
  1175 -> 369 [style=solid label="DELETE"]
  1175 -> 370 [style=solid label="DOT"]
  1175 -> 27 [style=solid label="ENUM"]
  1175 -> 184 [style=solid label="UNICODE_8"]
  1175 -> 259 [style=solid label="EXTERN"]
  1175 -> 29 [style=solid label="EXPLICIT"]
  1175 -> 371 [style=solid label="MULT"]
  1175 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1175 -> 372 [style=solid label="ZERO_LX"]
  1175 -> 373 [style=solid label="ZERO_HX"]
  1175 -> 374 [style=solid label="REQUIRES"]
  1175 -> 375 [style=solid label="NEW"]
  1175 -> 376 [style=solid label="COMPL"]
  1175 -> 377 [style=solid label="NOT"]
  1175 -> 378 [style=solid label="PLUS_PLUS"]
  1175 -> 379 [style=solid label="MINUS_MINUS"]
  1175 -> 380 [style=solid label="THIS"]
  1175 -> 36 [style=solid label="AUTO"]
  1175 -> 381 [style=solid label="NULLPTR"]
  1175 -> 382 [style=solid label="DYNAMIC_CAST"]
  1175 -> 383 [style=solid label="STATIC_CAST"]
  1175 -> 384 [style=solid label="REINTERPRET_CAST"]
  1175 -> 385 [style=solid label="CONST_CAST"]
  1175 -> 386 [style=solid label="TYPEID"]
  1175 -> 37 [style=solid label="CHAR"]
  1175 -> 38 [style=solid label="CHAR8_T"]
  1175 -> 39 [style=solid label="CHAR16_T"]
  1175 -> 40 [style=solid label="CHAR32_T"]
  1175 -> 41 [style=solid label="WCHAR_T"]
  1175 -> 42 [style=solid label="BOOL"]
  1175 -> 43 [style=solid label="SHORT"]
  1175 -> 44 [style=solid label="INT"]
  1175 -> 45 [style=solid label="LONG"]
  1175 -> 46 [style=solid label="SIGNED"]
  1175 -> 47 [style=solid label="UNSIGNED"]
  1175 -> 48 [style=solid label="FLOAT"]
  1175 -> 49 [style=solid label="DOUBLE"]
  1175 -> 50 [style=solid label="VOID"]
  1175 -> 52 [style=solid label="STATIC"]
  1175 -> 53 [style=solid label="THREAD_LOCAL"]
  1175 -> 54 [style=solid label="MUTABLE"]
  1175 -> 523 [style=solid label="THROW"]
  1175 -> 55 [style=solid label="TYPENAME"]
  1175 -> 387 [style=solid label="SIZEOF"]
  1175 -> 388 [style=solid label="ALIGNOF"]
  1175 -> 524 [style=solid label="CO_YIELD"]
  1175 -> 389 [style=solid label="'0'"]
  1175 -> 390 [style=solid label="'1'"]
  1175 -> 391 [style=solid label="'2'"]
  1175 -> 392 [style=solid label="'3'"]
  1175 -> 393 [style=solid label="'4'"]
  1175 -> 394 [style=solid label="'5'"]
  1175 -> 395 [style=solid label="'6'"]
  1175 -> 396 [style=solid label="'7'"]
  1175 -> 397 [style=solid label="'8'"]
  1175 -> 398 [style=solid label="'9'"]
  1175 -> 205 [style=solid label="'u'"]
  1175 -> 206 [style=solid label="'U'"]
  1175 -> 207 [style=solid label="'L'"]
  1175 -> 208 [style=solid label="'R'"]
  1175 -> 399 [style=dashed label="additive-expression"]
  1175 -> 1537 [style=dashed label="alias-declaration"]
  1175 -> 57 [style=dashed label="alignment-specifier"]
  1175 -> 400 [style=dashed label="and-expression"]
  1175 -> 525 [style=dashed label="assignment-expression"]
  1175 -> 60 [style=dashed label="attribute-specifier"]
  1175 -> 1547 [style=dashed label="attribute-specifier-seq"]
  1175 -> 401 [style=dashed label="await-expression"]
  1175 -> 402 [style=dashed label="binary-literal"]
  1175 -> 403 [style=dashed label="boolean-literal"]
  1175 -> 404 [style=dashed label="cast-expression"]
  1175 -> 405 [style=dashed label="character-literal"]
  1175 -> 63 [style=dashed label="class-head"]
  1175 -> 64 [style=dashed label="class-key"]
  1175 -> 65 [style=dashed label="class-name"]
  1175 -> 66 [style=dashed label="class-specifier"]
  1175 -> 406 [style=dashed label="compare-expression"]
  1175 -> 67 [style=dashed label="concept-name"]
  1175 -> 1548 [style=dashed label="condition"]
  1175 -> 526 [style=dashed label="conditional-expression"]
  1175 -> 68 [style=dashed label="conversion-function-id"]
  1175 -> 69 [style=dashed label="cv-qualifier"]
  1175 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1175 -> 410 [style=dashed label="decimal-literal"]
  1175 -> 70 [style=dashed label="decl-specifier"]
  1175 -> 1549 [style=dashed label="decl-specifier-seq"]
  1175 -> 76 [style=dashed label="decltype-specifier"]
  1175 -> 78 [style=dashed label="defining-type-specifier"]
  1175 -> 411 [style=dashed label="delete-expression"]
  1175 -> 412 [style=dashed label="digit"]
  1175 -> 413 [style=dashed label="digit-sequence"]
  1175 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1175 -> 80 [style=dashed label="elaborated-type-specifier"]
  1175 -> 414 [style=dashed label="encoding-prefix"]
  1175 -> 82 [style=dashed label="enum-head"]
  1175 -> 263 [style=dashed label="enum-key"]
  1175 -> 84 [style=dashed label="enum-name"]
  1175 -> 85 [style=dashed label="enum-specifier"]
  1175 -> 415 [style=dashed label="equality-expression"]
  1175 -> 416 [style=dashed label="exclusive-or-expression"]
  1175 -> 264 [style=dashed label="explicit-specifier"]
  1175 -> 1550 [style=dashed label="expression"]
  1175 -> 1540 [style=dashed label="expression-statement"]
  1175 -> 417 [style=dashed label="floating-point-literal"]
  1175 -> 418 [style=dashed label="fold-expression"]
  1175 -> 419 [style=dashed label="fractional-constant"]
  1175 -> 91 [style=dashed label="function-specifier"]
  1175 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1175 -> 421 [style=dashed label="hexadecimal-literal"]
  1175 -> 422 [style=dashed label="hexadecimal-prefix"]
  1175 -> 423 [style=dashed label="id-expression"]
  1175 -> 424 [style=dashed label="inclusive-or-expression"]
  1175 -> 1551 [style=dashed label="init-statement"]
  1175 -> 425 [style=dashed label="integer-literal"]
  1175 -> 426 [style=dashed label="lambda-expression"]
  1175 -> 427 [style=dashed label="lambda-introducer"]
  1175 -> 428 [style=dashed label="literal"]
  1175 -> 95 [style=dashed label="literal-operator-id"]
  1175 -> 429 [style=dashed label="logical-and-expression"]
  1175 -> 528 [style=dashed label="logical-or-expression"]
  1175 -> 431 [style=dashed label="multiplicative-expression"]
  1175 -> 99 [style=dashed label="namespace-alias"]
  1175 -> 102 [style=dashed label="namespace-name"]
  1175 -> 432 [style=dashed label="nested-name-specifier"]
  1175 -> 433 [style=dashed label="new-expression"]
  1175 -> 434 [style=dashed label="noexcept-expression"]
  1175 -> 435 [style=dashed label="nonzero-digit"]
  1175 -> 436 [style=dashed label="octal-literal"]
  1175 -> 108 [style=dashed label="operator-function-id"]
  1175 -> 109 [style=dashed label="placeholder-type-specifier"]
  1175 -> 437 [style=dashed label="pm-expression"]
  1175 -> 438 [style=dashed label="pointer-literal"]
  1175 -> 439 [style=dashed label="postfix-expression"]
  1175 -> 440 [style=dashed label="primary-expression"]
  1175 -> 112 [style=dashed label="qualified-id"]
  1175 -> 441 [style=dashed label="relational-expression"]
  1175 -> 442 [style=dashed label="requires-expression"]
  1175 -> 443 [style=dashed label="shift-expression"]
  1175 -> 1543 [style=dashed label="simple-declaration"]
  1175 -> 114 [style=dashed label="simple-template-id"]
  1175 -> 444 [style=dashed label="simple-type-specifier"]
  1175 -> 117 [style=dashed label="storage-class-specifier"]
  1175 -> 445 [style=dashed label="string-literal"]
  1175 -> 120 [style=dashed label="template-id"]
  1175 -> 215 [style=dashed label="template-name"]
  1175 -> 530 [style=dashed label="throw-expression"]
  1175 -> 123 [style=dashed label="type-constraint"]
  1175 -> 124 [style=dashed label="type-name"]
  1175 -> 125 [style=dashed label="type-specifier"]
  1175 -> 126 [style=dashed label="typedef-name"]
  1175 -> 448 [style=dashed label="typename-specifier"]
  1175 -> 449 [style=dashed label="unary-expression"]
  1175 -> 450 [style=dashed label="unary-operator"]
  1175 -> 129 [style=dashed label="unqualified-id"]
  1175 -> 451 [style=dashed label="user-defined-character-literal"]
  1175 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1175 -> 453 [style=dashed label="user-defined-integer-literal"]
  1175 -> 454 [style=dashed label="user-defined-literal"]
  1175 -> 455 [style=dashed label="user-defined-string-literal"]
  1175 -> 532 [style=dashed label="yield-expression"]
  1176 [label="State 1176\n\l939 selection-statement: IF CONSTEXPR • OPEN_PAREN condition CLOSE_PAREN statement\l941                    | IF CONSTEXPR • OPEN_PAREN init-statement condition CLOSE_PAREN statement\l943                    | IF CONSTEXPR • OPEN_PAREN condition CLOSE_PAREN statement ELSE statement\l945                    | IF CONSTEXPR • OPEN_PAREN init-statement condition CLOSE_PAREN statement ELSE statement\l"]
  1176 -> 1552 [style=solid label="OPEN_PAREN"]
  1177 [label="State 1177\n\l946 selection-statement: IF CONSTEVAL • compound-statement\l948                    | IF CONSTEVAL • compound-statement ELSE statement\l"]
  1177 -> 289 [style=solid label="OPEN_BRACE"]
  1177 -> 1553 [style=dashed label="compound-statement"]
  1178 [label="State 1178\n\l947 selection-statement: IF NOT • CONSTEVAL compound-statement\l949                    | IF NOT • CONSTEVAL compound-statement ELSE statement\l"]
  1178 -> 1554 [style=solid label="CONSTEVAL"]
  1179 [label="State 1179\n\l950 selection-statement: SWITCH OPEN_PAREN • condition CLOSE_PAREN statement\l951                    | SWITCH OPEN_PAREN • init-statement condition CLOSE_PAREN statement\l"]
  1179 -> 356 [style=solid label="PLUS"]
  1179 -> 357 [style=solid label="MINUS"]
  1179 -> 1536 [style=solid label="USING"]
  1179 -> 2 [style=solid label="IDENTIFIER"]
  1179 -> 662 [style=solid label="SEMICOLON"]
  1179 -> 4 [style=solid label="ALIGNAS"]
  1179 -> 358 [style=solid label="OPEN_PAREN"]
  1179 -> 359 [style=solid label="AND"]
  1179 -> 360 [style=solid label="SCOPE"]
  1179 -> 663 [style=solid label="OPEN_SQUARE"]
  1179 -> 362 [style=solid label="CO_AWAIT"]
  1179 -> 11 [style=solid label="VIRTUAL"]
  1179 -> 363 [style=solid label="ZERO_LB"]
  1179 -> 364 [style=solid label="ZERO_HB"]
  1179 -> 365 [style=solid label="SINGLE_QUOTE"]
  1179 -> 366 [style=solid label="FALSE"]
  1179 -> 367 [style=solid label="TRUE"]
  1179 -> 12 [style=solid label="CLASS"]
  1179 -> 13 [style=solid label="STRUCT"]
  1179 -> 14 [style=solid label="UNION"]
  1179 -> 368 [style=solid label="NOEXCEPT"]
  1179 -> 17 [style=solid label="OPERATOR"]
  1179 -> 18 [style=solid label="CONST"]
  1179 -> 19 [style=solid label="VOLATILE"]
  1179 -> 20 [style=solid label="FRIEND"]
  1179 -> 21 [style=solid label="TYPEDEF"]
  1179 -> 22 [style=solid label="CONSTEXPR"]
  1179 -> 23 [style=solid label="CONSTEVAL"]
  1179 -> 24 [style=solid label="CONSTINIT"]
  1179 -> 258 [style=solid label="INLINE"]
  1179 -> 26 [style=solid label="DECLTYPE"]
  1179 -> 369 [style=solid label="DELETE"]
  1179 -> 370 [style=solid label="DOT"]
  1179 -> 27 [style=solid label="ENUM"]
  1179 -> 184 [style=solid label="UNICODE_8"]
  1179 -> 259 [style=solid label="EXTERN"]
  1179 -> 29 [style=solid label="EXPLICIT"]
  1179 -> 371 [style=solid label="MULT"]
  1179 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1179 -> 372 [style=solid label="ZERO_LX"]
  1179 -> 373 [style=solid label="ZERO_HX"]
  1179 -> 374 [style=solid label="REQUIRES"]
  1179 -> 375 [style=solid label="NEW"]
  1179 -> 376 [style=solid label="COMPL"]
  1179 -> 377 [style=solid label="NOT"]
  1179 -> 378 [style=solid label="PLUS_PLUS"]
  1179 -> 379 [style=solid label="MINUS_MINUS"]
  1179 -> 380 [style=solid label="THIS"]
  1179 -> 36 [style=solid label="AUTO"]
  1179 -> 381 [style=solid label="NULLPTR"]
  1179 -> 382 [style=solid label="DYNAMIC_CAST"]
  1179 -> 383 [style=solid label="STATIC_CAST"]
  1179 -> 384 [style=solid label="REINTERPRET_CAST"]
  1179 -> 385 [style=solid label="CONST_CAST"]
  1179 -> 386 [style=solid label="TYPEID"]
  1179 -> 37 [style=solid label="CHAR"]
  1179 -> 38 [style=solid label="CHAR8_T"]
  1179 -> 39 [style=solid label="CHAR16_T"]
  1179 -> 40 [style=solid label="CHAR32_T"]
  1179 -> 41 [style=solid label="WCHAR_T"]
  1179 -> 42 [style=solid label="BOOL"]
  1179 -> 43 [style=solid label="SHORT"]
  1179 -> 44 [style=solid label="INT"]
  1179 -> 45 [style=solid label="LONG"]
  1179 -> 46 [style=solid label="SIGNED"]
  1179 -> 47 [style=solid label="UNSIGNED"]
  1179 -> 48 [style=solid label="FLOAT"]
  1179 -> 49 [style=solid label="DOUBLE"]
  1179 -> 50 [style=solid label="VOID"]
  1179 -> 52 [style=solid label="STATIC"]
  1179 -> 53 [style=solid label="THREAD_LOCAL"]
  1179 -> 54 [style=solid label="MUTABLE"]
  1179 -> 523 [style=solid label="THROW"]
  1179 -> 55 [style=solid label="TYPENAME"]
  1179 -> 387 [style=solid label="SIZEOF"]
  1179 -> 388 [style=solid label="ALIGNOF"]
  1179 -> 524 [style=solid label="CO_YIELD"]
  1179 -> 389 [style=solid label="'0'"]
  1179 -> 390 [style=solid label="'1'"]
  1179 -> 391 [style=solid label="'2'"]
  1179 -> 392 [style=solid label="'3'"]
  1179 -> 393 [style=solid label="'4'"]
  1179 -> 394 [style=solid label="'5'"]
  1179 -> 395 [style=solid label="'6'"]
  1179 -> 396 [style=solid label="'7'"]
  1179 -> 397 [style=solid label="'8'"]
  1179 -> 398 [style=solid label="'9'"]
  1179 -> 205 [style=solid label="'u'"]
  1179 -> 206 [style=solid label="'U'"]
  1179 -> 207 [style=solid label="'L'"]
  1179 -> 208 [style=solid label="'R'"]
  1179 -> 399 [style=dashed label="additive-expression"]
  1179 -> 1537 [style=dashed label="alias-declaration"]
  1179 -> 57 [style=dashed label="alignment-specifier"]
  1179 -> 400 [style=dashed label="and-expression"]
  1179 -> 525 [style=dashed label="assignment-expression"]
  1179 -> 60 [style=dashed label="attribute-specifier"]
  1179 -> 1547 [style=dashed label="attribute-specifier-seq"]
  1179 -> 401 [style=dashed label="await-expression"]
  1179 -> 402 [style=dashed label="binary-literal"]
  1179 -> 403 [style=dashed label="boolean-literal"]
  1179 -> 404 [style=dashed label="cast-expression"]
  1179 -> 405 [style=dashed label="character-literal"]
  1179 -> 63 [style=dashed label="class-head"]
  1179 -> 64 [style=dashed label="class-key"]
  1179 -> 65 [style=dashed label="class-name"]
  1179 -> 66 [style=dashed label="class-specifier"]
  1179 -> 406 [style=dashed label="compare-expression"]
  1179 -> 67 [style=dashed label="concept-name"]
  1179 -> 1555 [style=dashed label="condition"]
  1179 -> 526 [style=dashed label="conditional-expression"]
  1179 -> 68 [style=dashed label="conversion-function-id"]
  1179 -> 69 [style=dashed label="cv-qualifier"]
  1179 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1179 -> 410 [style=dashed label="decimal-literal"]
  1179 -> 70 [style=dashed label="decl-specifier"]
  1179 -> 1549 [style=dashed label="decl-specifier-seq"]
  1179 -> 76 [style=dashed label="decltype-specifier"]
  1179 -> 78 [style=dashed label="defining-type-specifier"]
  1179 -> 411 [style=dashed label="delete-expression"]
  1179 -> 412 [style=dashed label="digit"]
  1179 -> 413 [style=dashed label="digit-sequence"]
  1179 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1179 -> 80 [style=dashed label="elaborated-type-specifier"]
  1179 -> 414 [style=dashed label="encoding-prefix"]
  1179 -> 82 [style=dashed label="enum-head"]
  1179 -> 263 [style=dashed label="enum-key"]
  1179 -> 84 [style=dashed label="enum-name"]
  1179 -> 85 [style=dashed label="enum-specifier"]
  1179 -> 415 [style=dashed label="equality-expression"]
  1179 -> 416 [style=dashed label="exclusive-or-expression"]
  1179 -> 264 [style=dashed label="explicit-specifier"]
  1179 -> 1550 [style=dashed label="expression"]
  1179 -> 1540 [style=dashed label="expression-statement"]
  1179 -> 417 [style=dashed label="floating-point-literal"]
  1179 -> 418 [style=dashed label="fold-expression"]
  1179 -> 419 [style=dashed label="fractional-constant"]
  1179 -> 91 [style=dashed label="function-specifier"]
  1179 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1179 -> 421 [style=dashed label="hexadecimal-literal"]
  1179 -> 422 [style=dashed label="hexadecimal-prefix"]
  1179 -> 423 [style=dashed label="id-expression"]
  1179 -> 424 [style=dashed label="inclusive-or-expression"]
  1179 -> 1556 [style=dashed label="init-statement"]
  1179 -> 425 [style=dashed label="integer-literal"]
  1179 -> 426 [style=dashed label="lambda-expression"]
  1179 -> 427 [style=dashed label="lambda-introducer"]
  1179 -> 428 [style=dashed label="literal"]
  1179 -> 95 [style=dashed label="literal-operator-id"]
  1179 -> 429 [style=dashed label="logical-and-expression"]
  1179 -> 528 [style=dashed label="logical-or-expression"]
  1179 -> 431 [style=dashed label="multiplicative-expression"]
  1179 -> 99 [style=dashed label="namespace-alias"]
  1179 -> 102 [style=dashed label="namespace-name"]
  1179 -> 432 [style=dashed label="nested-name-specifier"]
  1179 -> 433 [style=dashed label="new-expression"]
  1179 -> 434 [style=dashed label="noexcept-expression"]
  1179 -> 435 [style=dashed label="nonzero-digit"]
  1179 -> 436 [style=dashed label="octal-literal"]
  1179 -> 108 [style=dashed label="operator-function-id"]
  1179 -> 109 [style=dashed label="placeholder-type-specifier"]
  1179 -> 437 [style=dashed label="pm-expression"]
  1179 -> 438 [style=dashed label="pointer-literal"]
  1179 -> 439 [style=dashed label="postfix-expression"]
  1179 -> 440 [style=dashed label="primary-expression"]
  1179 -> 112 [style=dashed label="qualified-id"]
  1179 -> 441 [style=dashed label="relational-expression"]
  1179 -> 442 [style=dashed label="requires-expression"]
  1179 -> 443 [style=dashed label="shift-expression"]
  1179 -> 1543 [style=dashed label="simple-declaration"]
  1179 -> 114 [style=dashed label="simple-template-id"]
  1179 -> 444 [style=dashed label="simple-type-specifier"]
  1179 -> 117 [style=dashed label="storage-class-specifier"]
  1179 -> 445 [style=dashed label="string-literal"]
  1179 -> 120 [style=dashed label="template-id"]
  1179 -> 215 [style=dashed label="template-name"]
  1179 -> 530 [style=dashed label="throw-expression"]
  1179 -> 123 [style=dashed label="type-constraint"]
  1179 -> 124 [style=dashed label="type-name"]
  1179 -> 125 [style=dashed label="type-specifier"]
  1179 -> 126 [style=dashed label="typedef-name"]
  1179 -> 448 [style=dashed label="typename-specifier"]
  1179 -> 449 [style=dashed label="unary-expression"]
  1179 -> 450 [style=dashed label="unary-operator"]
  1179 -> 129 [style=dashed label="unqualified-id"]
  1179 -> 451 [style=dashed label="user-defined-character-literal"]
  1179 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1179 -> 453 [style=dashed label="user-defined-integer-literal"]
  1179 -> 454 [style=dashed label="user-defined-literal"]
  1179 -> 455 [style=dashed label="user-defined-string-literal"]
  1179 -> 532 [style=dashed label="yield-expression"]
  1180 [label="State 1180\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l519 labeled-statement: attribute-specifier-seq IDENTIFIER • COLON statement\l647 namespace-alias: IDENTIFIER •\l653 namespace-name: IDENTIFIER •\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l1140 unqualified-id: IDENTIFIER •\l"]
  1180 -> 1557 [style=solid label="COLON"]
  1180 -> "1180R145" [style=solid]
 "1180R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  1180 -> "1180R163d" [label="[DECLTYPE, AUTO]", style=solid]
 "1180R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  1180 -> "1180R163" [label="[LESS]", style=solid]
 "1180R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  1180 -> "1180R294d" [label="[IDENTIFIER, ALIGNAS, OPEN_PAREN, ELLIPSIS, AND, SCOPE, OPEN_SQUARE, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "1180R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  1180 -> "1180R647d" [label="[SCOPE]", style=solid]
 "1180R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  1180 -> "1180R653d" [label="[SCOPE]", style=solid]
 "1180R653d" [label="R653", fillcolor=5, shape=diamond, style=filled]
  1180 -> "1180R1052d" [label="[IDENTIFIER, ALIGNAS, OPEN_PAREN, ELLIPSIS, AND, SCOPE, OPEN_SQUARE, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, LESS, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "1180R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  1180 -> "1180R1110d" [label="[IDENTIFIER, ALIGNAS, OPEN_PAREN, ELLIPSIS, AND, SCOPE, OPEN_SQUARE, OPEN_BRACE, VIRTUAL, CLASS, STRUCT, UNION, AND_AND, OPERATOR, CONST, VOLATILE, FRIEND, TYPEDEF, CONSTEXPR, CONSTEVAL, CONSTINIT, INLINE, DECLTYPE, ENUM, EXTERN, EXPLICIT, MULT, COMPL, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, STATIC, THREAD_LOCAL, MUTABLE, TYPENAME]", style=solid]
 "1180R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  1180 -> "1180R1140d" [label="[OPEN_PAREN, AND, OPEN_SQUARE, AND_AND, LESS, MULT]", style=solid]
 "1180R1140d" [label="R1140", fillcolor=5, shape=diamond, style=filled]
  1180 -> "1180R1140" [label="[PLUS, MINUS, EQ, SEMICOLON, MULT_EQ, DIV_EQ, MOD_EQ, PLUS_EQ, MINUS_EQ, RSHIFT_EQ, LSHIFT_EQ, AND_EQ, XOR_EQ, OR_EQ, COMMA, SPACESHIP, QUERY, OR_OR, DEREF, DOT, EQ_EQ, NOT_EQ, XOR, GREATER, DIV, MOD, OR, LSHIFT, RSHIFT, LESS_EQ, GREATER_EQ, DOT_STAR, DEREF_STAR, PLUS_PLUS, MINUS_MINUS]", style=solid]
 "1180R1140" [label="R1140", fillcolor=3, shape=diamond, style=filled]
  1181 [label="State 1181\n\l523 labeled-statement: attribute-specifier-seq DEFAULT • COLON statement\l"]
  1181 -> 1558 [style=solid label="COLON"]
  1182 [label="State 1182\n\l521 labeled-statement: attribute-specifier-seq CASE • constant-expression COLON statement\l"]
  1182 -> 356 [style=solid label="PLUS"]
  1182 -> 357 [style=solid label="MINUS"]
  1182 -> 2 [style=solid label="IDENTIFIER"]
  1182 -> 358 [style=solid label="OPEN_PAREN"]
  1182 -> 359 [style=solid label="AND"]
  1182 -> 360 [style=solid label="SCOPE"]
  1182 -> 361 [style=solid label="OPEN_SQUARE"]
  1182 -> 362 [style=solid label="CO_AWAIT"]
  1182 -> 363 [style=solid label="ZERO_LB"]
  1182 -> 364 [style=solid label="ZERO_HB"]
  1182 -> 365 [style=solid label="SINGLE_QUOTE"]
  1182 -> 366 [style=solid label="FALSE"]
  1182 -> 367 [style=solid label="TRUE"]
  1182 -> 368 [style=solid label="NOEXCEPT"]
  1182 -> 17 [style=solid label="OPERATOR"]
  1182 -> 26 [style=solid label="DECLTYPE"]
  1182 -> 369 [style=solid label="DELETE"]
  1182 -> 370 [style=solid label="DOT"]
  1182 -> 184 [style=solid label="UNICODE_8"]
  1182 -> 371 [style=solid label="MULT"]
  1182 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1182 -> 372 [style=solid label="ZERO_LX"]
  1182 -> 373 [style=solid label="ZERO_HX"]
  1182 -> 374 [style=solid label="REQUIRES"]
  1182 -> 375 [style=solid label="NEW"]
  1182 -> 376 [style=solid label="COMPL"]
  1182 -> 377 [style=solid label="NOT"]
  1182 -> 378 [style=solid label="PLUS_PLUS"]
  1182 -> 379 [style=solid label="MINUS_MINUS"]
  1182 -> 380 [style=solid label="THIS"]
  1182 -> 36 [style=solid label="AUTO"]
  1182 -> 381 [style=solid label="NULLPTR"]
  1182 -> 382 [style=solid label="DYNAMIC_CAST"]
  1182 -> 383 [style=solid label="STATIC_CAST"]
  1182 -> 384 [style=solid label="REINTERPRET_CAST"]
  1182 -> 385 [style=solid label="CONST_CAST"]
  1182 -> 386 [style=solid label="TYPEID"]
  1182 -> 37 [style=solid label="CHAR"]
  1182 -> 38 [style=solid label="CHAR8_T"]
  1182 -> 39 [style=solid label="CHAR16_T"]
  1182 -> 40 [style=solid label="CHAR32_T"]
  1182 -> 41 [style=solid label="WCHAR_T"]
  1182 -> 42 [style=solid label="BOOL"]
  1182 -> 43 [style=solid label="SHORT"]
  1182 -> 44 [style=solid label="INT"]
  1182 -> 45 [style=solid label="LONG"]
  1182 -> 46 [style=solid label="SIGNED"]
  1182 -> 47 [style=solid label="UNSIGNED"]
  1182 -> 48 [style=solid label="FLOAT"]
  1182 -> 49 [style=solid label="DOUBLE"]
  1182 -> 50 [style=solid label="VOID"]
  1182 -> 55 [style=solid label="TYPENAME"]
  1182 -> 387 [style=solid label="SIZEOF"]
  1182 -> 388 [style=solid label="ALIGNOF"]
  1182 -> 389 [style=solid label="'0'"]
  1182 -> 390 [style=solid label="'1'"]
  1182 -> 391 [style=solid label="'2'"]
  1182 -> 392 [style=solid label="'3'"]
  1182 -> 393 [style=solid label="'4'"]
  1182 -> 394 [style=solid label="'5'"]
  1182 -> 395 [style=solid label="'6'"]
  1182 -> 396 [style=solid label="'7'"]
  1182 -> 397 [style=solid label="'8'"]
  1182 -> 398 [style=solid label="'9'"]
  1182 -> 205 [style=solid label="'u'"]
  1182 -> 206 [style=solid label="'U'"]
  1182 -> 207 [style=solid label="'L'"]
  1182 -> 208 [style=solid label="'R'"]
  1182 -> 399 [style=dashed label="additive-expression"]
  1182 -> 400 [style=dashed label="and-expression"]
  1182 -> 401 [style=dashed label="await-expression"]
  1182 -> 402 [style=dashed label="binary-literal"]
  1182 -> 403 [style=dashed label="boolean-literal"]
  1182 -> 404 [style=dashed label="cast-expression"]
  1182 -> 405 [style=dashed label="character-literal"]
  1182 -> 65 [style=dashed label="class-name"]
  1182 -> 406 [style=dashed label="compare-expression"]
  1182 -> 67 [style=dashed label="concept-name"]
  1182 -> 407 [style=dashed label="conditional-expression"]
  1182 -> 1559 [style=dashed label="constant-expression"]
  1182 -> 68 [style=dashed label="conversion-function-id"]
  1182 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1182 -> 410 [style=dashed label="decimal-literal"]
  1182 -> 76 [style=dashed label="decltype-specifier"]
  1182 -> 411 [style=dashed label="delete-expression"]
  1182 -> 412 [style=dashed label="digit"]
  1182 -> 413 [style=dashed label="digit-sequence"]
  1182 -> 414 [style=dashed label="encoding-prefix"]
  1182 -> 84 [style=dashed label="enum-name"]
  1182 -> 415 [style=dashed label="equality-expression"]
  1182 -> 416 [style=dashed label="exclusive-or-expression"]
  1182 -> 417 [style=dashed label="floating-point-literal"]
  1182 -> 418 [style=dashed label="fold-expression"]
  1182 -> 419 [style=dashed label="fractional-constant"]
  1182 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1182 -> 421 [style=dashed label="hexadecimal-literal"]
  1182 -> 422 [style=dashed label="hexadecimal-prefix"]
  1182 -> 423 [style=dashed label="id-expression"]
  1182 -> 424 [style=dashed label="inclusive-or-expression"]
  1182 -> 425 [style=dashed label="integer-literal"]
  1182 -> 426 [style=dashed label="lambda-expression"]
  1182 -> 427 [style=dashed label="lambda-introducer"]
  1182 -> 428 [style=dashed label="literal"]
  1182 -> 95 [style=dashed label="literal-operator-id"]
  1182 -> 429 [style=dashed label="logical-and-expression"]
  1182 -> 430 [style=dashed label="logical-or-expression"]
  1182 -> 431 [style=dashed label="multiplicative-expression"]
  1182 -> 99 [style=dashed label="namespace-alias"]
  1182 -> 102 [style=dashed label="namespace-name"]
  1182 -> 432 [style=dashed label="nested-name-specifier"]
  1182 -> 433 [style=dashed label="new-expression"]
  1182 -> 434 [style=dashed label="noexcept-expression"]
  1182 -> 435 [style=dashed label="nonzero-digit"]
  1182 -> 436 [style=dashed label="octal-literal"]
  1182 -> 108 [style=dashed label="operator-function-id"]
  1182 -> 109 [style=dashed label="placeholder-type-specifier"]
  1182 -> 437 [style=dashed label="pm-expression"]
  1182 -> 438 [style=dashed label="pointer-literal"]
  1182 -> 439 [style=dashed label="postfix-expression"]
  1182 -> 440 [style=dashed label="primary-expression"]
  1182 -> 112 [style=dashed label="qualified-id"]
  1182 -> 441 [style=dashed label="relational-expression"]
  1182 -> 442 [style=dashed label="requires-expression"]
  1182 -> 443 [style=dashed label="shift-expression"]
  1182 -> 114 [style=dashed label="simple-template-id"]
  1182 -> 529 [style=dashed label="simple-type-specifier"]
  1182 -> 445 [style=dashed label="string-literal"]
  1182 -> 120 [style=dashed label="template-id"]
  1182 -> 215 [style=dashed label="template-name"]
  1182 -> 123 [style=dashed label="type-constraint"]
  1182 -> 124 [style=dashed label="type-name"]
  1182 -> 126 [style=dashed label="typedef-name"]
  1182 -> 531 [style=dashed label="typename-specifier"]
  1182 -> 449 [style=dashed label="unary-expression"]
  1182 -> 450 [style=dashed label="unary-operator"]
  1182 -> 129 [style=dashed label="unqualified-id"]
  1182 -> 451 [style=dashed label="user-defined-character-literal"]
  1182 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1182 -> 453 [style=dashed label="user-defined-integer-literal"]
  1182 -> 454 [style=dashed label="user-defined-literal"]
  1182 -> 455 [style=dashed label="user-defined-string-literal"]
  1183 [label="State 1183\n\l1011 statement: attribute-specifier-seq compound-statement •\l"]
  1183 -> "1183R1011" [style=solid]
 "1183R1011" [label="R1011", fillcolor=3, shape=diamond, style=filled]
  1184 [label="State 1184\n\l965 simple-declaration: attribute-specifier-seq decl-specifier-seq • init-declarator-list SEMICOLON\l966                   | attribute-specifier-seq decl-specifier-seq • OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l968                   | attribute-specifier-seq decl-specifier-seq • ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1184 -> 147 [style=solid label="IDENTIFIER"]
  1184 -> 5 [style=solid label="OPEN_PAREN"]
  1184 -> 6 [style=solid label="ELLIPSIS"]
  1184 -> 278 [style=solid label="AND"]
  1184 -> 9 [style=solid label="SCOPE"]
  1184 -> 577 [style=solid label="OPEN_SQUARE"]
  1184 -> 280 [style=solid label="AND_AND"]
  1184 -> 17 [style=solid label="OPERATOR"]
  1184 -> 134 [style=solid label="DECLTYPE"]
  1184 -> 31 [style=solid label="MULT"]
  1184 -> 35 [style=solid label="COMPL"]
  1184 -> 65 [style=dashed label="class-name"]
  1184 -> 68 [style=dashed label="conversion-function-id"]
  1184 -> 1149 [style=dashed label="declarator"]
  1184 -> 75 [style=dashed label="declarator-id"]
  1184 -> 138 [style=dashed label="decltype-specifier"]
  1184 -> 84 [style=dashed label="enum-name"]
  1184 -> 93 [style=dashed label="id-expression"]
  1184 -> 282 [style=dashed label="init-declarator"]
  1184 -> 579 [style=dashed label="init-declarator-list"]
  1184 -> 95 [style=dashed label="literal-operator-id"]
  1184 -> 99 [style=dashed label="namespace-alias"]
  1184 -> 102 [style=dashed label="namespace-name"]
  1184 -> 148 [style=dashed label="nested-name-specifier"]
  1184 -> 106 [style=dashed label="noptr-declarator"]
  1184 -> 108 [style=dashed label="operator-function-id"]
  1184 -> 110 [style=dashed label="ptr-declarator"]
  1184 -> 111 [style=dashed label="ptr-operator"]
  1184 -> 112 [style=dashed label="qualified-id"]
  1184 -> 580 [style=dashed label="ref-qualifier"]
  1184 -> 114 [style=dashed label="simple-template-id"]
  1184 -> 120 [style=dashed label="template-id"]
  1184 -> 142 [style=dashed label="template-name"]
  1184 -> 143 [style=dashed label="type-name"]
  1184 -> 126 [style=dashed label="typedef-name"]
  1184 -> 129 [style=dashed label="unqualified-id"]
  1185 [label="State 1185\n\l1009 statement: attribute-specifier-seq expression-statement •\l"]
  1185 -> "1185R1009" [style=solid]
 "1185R1009" [label="R1009", fillcolor=3, shape=diamond, style=filled]
  1186 [label="State 1186\n\l1015 statement: attribute-specifier-seq iteration-statement •\l"]
  1186 -> "1186R1015" [style=solid]
 "1186R1015" [label="R1015", fillcolor=3, shape=diamond, style=filled]
  1187 [label="State 1187\n\l1017 statement: attribute-specifier-seq jump-statement •\l"]
  1187 -> "1187R1017" [style=solid]
 "1187R1017" [label="R1017", fillcolor=3, shape=diamond, style=filled]
  1188 [label="State 1188\n\l1013 statement: attribute-specifier-seq selection-statement •\l"]
  1188 -> "1188R1013" [style=solid]
 "1188R1013" [label="R1013", fillcolor=3, shape=diamond, style=filled]
  1189 [label="State 1189\n\l1020 statement: attribute-specifier-seq try-block •\l"]
  1189 -> "1189R1020" [style=solid]
 "1189R1020" [label="R1020", fillcolor=3, shape=diamond, style=filled]
  1190 [label="State 1190\n\l337 expression-statement: expression SEMICOLON •\l"]
  1190 -> "1190R337" [style=solid]
 "1190R337" [label="R337", fillcolor=3, shape=diamond, style=filled]
  1191 [label="State 1191\n\l161 compound-statement: OPEN_BRACE statement-seq CLOSE_BRACE •\l"]
  1191 -> "1191R161" [style=solid]
 "1191R161" [label="R161", fillcolor=3, shape=diamond, style=filled]
  1192 [label="State 1192\n\l1023 statement-seq: statement-seq statement •\l"]
  1192 -> "1192R1023" [style=solid]
 "1192R1023" [label="R1023", fillcolor=3, shape=diamond, style=filled]
  1193 [label="State 1193\n\l416 handler: CATCH • OPEN_PAREN exception-declaration CLOSE_PAREN compound-statement\l"]
  1193 -> 1560 [style=solid label="OPEN_PAREN"]
  1194 [label="State 1194\n\l417 handler-seq: handler •\l418            | handler • handler-seq\l"]
  1194 -> 1193 [style=solid label="CATCH"]
  1194 -> 1194 [style=dashed label="handler"]
  1194 -> 1561 [style=dashed label="handler-seq"]
  1194 -> "1194R417" [style=solid]
 "1194R417" [label="R417", fillcolor=3, shape=diamond, style=filled]
  1195 [label="State 1195\n\l409 function-try-block: TRY compound-statement handler-seq •\l"]
  1195 -> "1195R409" [style=solid]
 "1195R409" [label="R409", fillcolor=3, shape=diamond, style=filled]
  1196 [label="State 1196\n\l410 function-try-block: TRY ctor-initializer compound-statement • handler-seq\l"]
  1196 -> 1193 [style=solid label="CATCH"]
  1196 -> 1194 [style=dashed label="handler"]
  1196 -> 1562 [style=dashed label="handler-seq"]
  1197 [label="State 1197\n\l174 constraint-logical-and-expression: constraint-logical-and-expression AND_AND • primary-expression\l"]
  1197 -> 147 [style=solid label="IDENTIFIER"]
  1197 -> 696 [style=solid label="OPEN_PAREN"]
  1197 -> 9 [style=solid label="SCOPE"]
  1197 -> 361 [style=solid label="OPEN_SQUARE"]
  1197 -> 363 [style=solid label="ZERO_LB"]
  1197 -> 364 [style=solid label="ZERO_HB"]
  1197 -> 365 [style=solid label="SINGLE_QUOTE"]
  1197 -> 366 [style=solid label="FALSE"]
  1197 -> 367 [style=solid label="TRUE"]
  1197 -> 17 [style=solid label="OPERATOR"]
  1197 -> 134 [style=solid label="DECLTYPE"]
  1197 -> 370 [style=solid label="DOT"]
  1197 -> 184 [style=solid label="UNICODE_8"]
  1197 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1197 -> 372 [style=solid label="ZERO_LX"]
  1197 -> 373 [style=solid label="ZERO_HX"]
  1197 -> 374 [style=solid label="REQUIRES"]
  1197 -> 35 [style=solid label="COMPL"]
  1197 -> 380 [style=solid label="THIS"]
  1197 -> 381 [style=solid label="NULLPTR"]
  1197 -> 389 [style=solid label="'0'"]
  1197 -> 390 [style=solid label="'1'"]
  1197 -> 391 [style=solid label="'2'"]
  1197 -> 392 [style=solid label="'3'"]
  1197 -> 393 [style=solid label="'4'"]
  1197 -> 394 [style=solid label="'5'"]
  1197 -> 395 [style=solid label="'6'"]
  1197 -> 396 [style=solid label="'7'"]
  1197 -> 397 [style=solid label="'8'"]
  1197 -> 398 [style=solid label="'9'"]
  1197 -> 205 [style=solid label="'u'"]
  1197 -> 206 [style=solid label="'U'"]
  1197 -> 207 [style=solid label="'L'"]
  1197 -> 208 [style=solid label="'R'"]
  1197 -> 402 [style=dashed label="binary-literal"]
  1197 -> 403 [style=dashed label="boolean-literal"]
  1197 -> 405 [style=dashed label="character-literal"]
  1197 -> 65 [style=dashed label="class-name"]
  1197 -> 68 [style=dashed label="conversion-function-id"]
  1197 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1197 -> 410 [style=dashed label="decimal-literal"]
  1197 -> 138 [style=dashed label="decltype-specifier"]
  1197 -> 412 [style=dashed label="digit"]
  1197 -> 413 [style=dashed label="digit-sequence"]
  1197 -> 414 [style=dashed label="encoding-prefix"]
  1197 -> 84 [style=dashed label="enum-name"]
  1197 -> 417 [style=dashed label="floating-point-literal"]
  1197 -> 418 [style=dashed label="fold-expression"]
  1197 -> 419 [style=dashed label="fractional-constant"]
  1197 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1197 -> 421 [style=dashed label="hexadecimal-literal"]
  1197 -> 422 [style=dashed label="hexadecimal-prefix"]
  1197 -> 423 [style=dashed label="id-expression"]
  1197 -> 425 [style=dashed label="integer-literal"]
  1197 -> 426 [style=dashed label="lambda-expression"]
  1197 -> 427 [style=dashed label="lambda-introducer"]
  1197 -> 428 [style=dashed label="literal"]
  1197 -> 95 [style=dashed label="literal-operator-id"]
  1197 -> 99 [style=dashed label="namespace-alias"]
  1197 -> 102 [style=dashed label="namespace-name"]
  1197 -> 152 [style=dashed label="nested-name-specifier"]
  1197 -> 435 [style=dashed label="nonzero-digit"]
  1197 -> 436 [style=dashed label="octal-literal"]
  1197 -> 108 [style=dashed label="operator-function-id"]
  1197 -> 438 [style=dashed label="pointer-literal"]
  1197 -> 1563 [style=dashed label="primary-expression"]
  1197 -> 112 [style=dashed label="qualified-id"]
  1197 -> 442 [style=dashed label="requires-expression"]
  1197 -> 114 [style=dashed label="simple-template-id"]
  1197 -> 445 [style=dashed label="string-literal"]
  1197 -> 120 [style=dashed label="template-id"]
  1197 -> 142 [style=dashed label="template-name"]
  1197 -> 143 [style=dashed label="type-name"]
  1197 -> 126 [style=dashed label="typedef-name"]
  1197 -> 129 [style=dashed label="unqualified-id"]
  1197 -> 451 [style=dashed label="user-defined-character-literal"]
  1197 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1197 -> 453 [style=dashed label="user-defined-integer-literal"]
  1197 -> 454 [style=dashed label="user-defined-literal"]
  1197 -> 455 [style=dashed label="user-defined-string-literal"]
  1198 [label="State 1198\n\l176 constraint-logical-or-expression: constraint-logical-or-expression OR_OR • constraint-logical-and-expression\l"]
  1198 -> 147 [style=solid label="IDENTIFIER"]
  1198 -> 696 [style=solid label="OPEN_PAREN"]
  1198 -> 9 [style=solid label="SCOPE"]
  1198 -> 361 [style=solid label="OPEN_SQUARE"]
  1198 -> 363 [style=solid label="ZERO_LB"]
  1198 -> 364 [style=solid label="ZERO_HB"]
  1198 -> 365 [style=solid label="SINGLE_QUOTE"]
  1198 -> 366 [style=solid label="FALSE"]
  1198 -> 367 [style=solid label="TRUE"]
  1198 -> 17 [style=solid label="OPERATOR"]
  1198 -> 134 [style=solid label="DECLTYPE"]
  1198 -> 370 [style=solid label="DOT"]
  1198 -> 184 [style=solid label="UNICODE_8"]
  1198 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1198 -> 372 [style=solid label="ZERO_LX"]
  1198 -> 373 [style=solid label="ZERO_HX"]
  1198 -> 374 [style=solid label="REQUIRES"]
  1198 -> 35 [style=solid label="COMPL"]
  1198 -> 380 [style=solid label="THIS"]
  1198 -> 381 [style=solid label="NULLPTR"]
  1198 -> 389 [style=solid label="'0'"]
  1198 -> 390 [style=solid label="'1'"]
  1198 -> 391 [style=solid label="'2'"]
  1198 -> 392 [style=solid label="'3'"]
  1198 -> 393 [style=solid label="'4'"]
  1198 -> 394 [style=solid label="'5'"]
  1198 -> 395 [style=solid label="'6'"]
  1198 -> 396 [style=solid label="'7'"]
  1198 -> 397 [style=solid label="'8'"]
  1198 -> 398 [style=solid label="'9'"]
  1198 -> 205 [style=solid label="'u'"]
  1198 -> 206 [style=solid label="'U'"]
  1198 -> 207 [style=solid label="'L'"]
  1198 -> 208 [style=solid label="'R'"]
  1198 -> 402 [style=dashed label="binary-literal"]
  1198 -> 403 [style=dashed label="boolean-literal"]
  1198 -> 405 [style=dashed label="character-literal"]
  1198 -> 65 [style=dashed label="class-name"]
  1198 -> 1564 [style=dashed label="constraint-logical-and-expression"]
  1198 -> 68 [style=dashed label="conversion-function-id"]
  1198 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1198 -> 410 [style=dashed label="decimal-literal"]
  1198 -> 138 [style=dashed label="decltype-specifier"]
  1198 -> 412 [style=dashed label="digit"]
  1198 -> 413 [style=dashed label="digit-sequence"]
  1198 -> 414 [style=dashed label="encoding-prefix"]
  1198 -> 84 [style=dashed label="enum-name"]
  1198 -> 417 [style=dashed label="floating-point-literal"]
  1198 -> 418 [style=dashed label="fold-expression"]
  1198 -> 419 [style=dashed label="fractional-constant"]
  1198 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1198 -> 421 [style=dashed label="hexadecimal-literal"]
  1198 -> 422 [style=dashed label="hexadecimal-prefix"]
  1198 -> 423 [style=dashed label="id-expression"]
  1198 -> 425 [style=dashed label="integer-literal"]
  1198 -> 426 [style=dashed label="lambda-expression"]
  1198 -> 427 [style=dashed label="lambda-introducer"]
  1198 -> 428 [style=dashed label="literal"]
  1198 -> 95 [style=dashed label="literal-operator-id"]
  1198 -> 99 [style=dashed label="namespace-alias"]
  1198 -> 102 [style=dashed label="namespace-name"]
  1198 -> 152 [style=dashed label="nested-name-specifier"]
  1198 -> 435 [style=dashed label="nonzero-digit"]
  1198 -> 436 [style=dashed label="octal-literal"]
  1198 -> 108 [style=dashed label="operator-function-id"]
  1198 -> 438 [style=dashed label="pointer-literal"]
  1198 -> 699 [style=dashed label="primary-expression"]
  1198 -> 112 [style=dashed label="qualified-id"]
  1198 -> 442 [style=dashed label="requires-expression"]
  1198 -> 114 [style=dashed label="simple-template-id"]
  1198 -> 445 [style=dashed label="string-literal"]
  1198 -> 120 [style=dashed label="template-id"]
  1198 -> 142 [style=dashed label="template-name"]
  1198 -> 143 [style=dashed label="type-name"]
  1198 -> 126 [style=dashed label="typedef-name"]
  1198 -> 129 [style=dashed label="unqualified-id"]
  1198 -> 451 [style=dashed label="user-defined-character-literal"]
  1198 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1198 -> 453 [style=dashed label="user-defined-integer-literal"]
  1198 -> 454 [style=dashed label="user-defined-literal"]
  1198 -> 455 [style=dashed label="user-defined-string-literal"]
  1199 [label="State 1199\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l299 enumerator: IDENTIFIER attribute-specifier-seq •\l"]
  1199 -> 4 [style=solid label="ALIGNAS"]
  1199 -> 10 [style=solid label="OPEN_SQUARE"]
  1199 -> 57 [style=dashed label="alignment-specifier"]
  1199 -> 260 [style=dashed label="attribute-specifier"]
  1199 -> "1199R299" [style=solid]
 "1199R299" [label="R299", fillcolor=3, shape=diamond, style=filled]
  1200 [label="State 1200\n\l301 enumerator-definition: enumerator EQ • constant-expression\l"]
  1200 -> 356 [style=solid label="PLUS"]
  1200 -> 357 [style=solid label="MINUS"]
  1200 -> 2 [style=solid label="IDENTIFIER"]
  1200 -> 358 [style=solid label="OPEN_PAREN"]
  1200 -> 359 [style=solid label="AND"]
  1200 -> 360 [style=solid label="SCOPE"]
  1200 -> 361 [style=solid label="OPEN_SQUARE"]
  1200 -> 362 [style=solid label="CO_AWAIT"]
  1200 -> 363 [style=solid label="ZERO_LB"]
  1200 -> 364 [style=solid label="ZERO_HB"]
  1200 -> 365 [style=solid label="SINGLE_QUOTE"]
  1200 -> 366 [style=solid label="FALSE"]
  1200 -> 367 [style=solid label="TRUE"]
  1200 -> 368 [style=solid label="NOEXCEPT"]
  1200 -> 17 [style=solid label="OPERATOR"]
  1200 -> 26 [style=solid label="DECLTYPE"]
  1200 -> 369 [style=solid label="DELETE"]
  1200 -> 370 [style=solid label="DOT"]
  1200 -> 184 [style=solid label="UNICODE_8"]
  1200 -> 371 [style=solid label="MULT"]
  1200 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1200 -> 372 [style=solid label="ZERO_LX"]
  1200 -> 373 [style=solid label="ZERO_HX"]
  1200 -> 374 [style=solid label="REQUIRES"]
  1200 -> 375 [style=solid label="NEW"]
  1200 -> 376 [style=solid label="COMPL"]
  1200 -> 377 [style=solid label="NOT"]
  1200 -> 378 [style=solid label="PLUS_PLUS"]
  1200 -> 379 [style=solid label="MINUS_MINUS"]
  1200 -> 380 [style=solid label="THIS"]
  1200 -> 36 [style=solid label="AUTO"]
  1200 -> 381 [style=solid label="NULLPTR"]
  1200 -> 382 [style=solid label="DYNAMIC_CAST"]
  1200 -> 383 [style=solid label="STATIC_CAST"]
  1200 -> 384 [style=solid label="REINTERPRET_CAST"]
  1200 -> 385 [style=solid label="CONST_CAST"]
  1200 -> 386 [style=solid label="TYPEID"]
  1200 -> 37 [style=solid label="CHAR"]
  1200 -> 38 [style=solid label="CHAR8_T"]
  1200 -> 39 [style=solid label="CHAR16_T"]
  1200 -> 40 [style=solid label="CHAR32_T"]
  1200 -> 41 [style=solid label="WCHAR_T"]
  1200 -> 42 [style=solid label="BOOL"]
  1200 -> 43 [style=solid label="SHORT"]
  1200 -> 44 [style=solid label="INT"]
  1200 -> 45 [style=solid label="LONG"]
  1200 -> 46 [style=solid label="SIGNED"]
  1200 -> 47 [style=solid label="UNSIGNED"]
  1200 -> 48 [style=solid label="FLOAT"]
  1200 -> 49 [style=solid label="DOUBLE"]
  1200 -> 50 [style=solid label="VOID"]
  1200 -> 55 [style=solid label="TYPENAME"]
  1200 -> 387 [style=solid label="SIZEOF"]
  1200 -> 388 [style=solid label="ALIGNOF"]
  1200 -> 389 [style=solid label="'0'"]
  1200 -> 390 [style=solid label="'1'"]
  1200 -> 391 [style=solid label="'2'"]
  1200 -> 392 [style=solid label="'3'"]
  1200 -> 393 [style=solid label="'4'"]
  1200 -> 394 [style=solid label="'5'"]
  1200 -> 395 [style=solid label="'6'"]
  1200 -> 396 [style=solid label="'7'"]
  1200 -> 397 [style=solid label="'8'"]
  1200 -> 398 [style=solid label="'9'"]
  1200 -> 205 [style=solid label="'u'"]
  1200 -> 206 [style=solid label="'U'"]
  1200 -> 207 [style=solid label="'L'"]
  1200 -> 208 [style=solid label="'R'"]
  1200 -> 399 [style=dashed label="additive-expression"]
  1200 -> 400 [style=dashed label="and-expression"]
  1200 -> 401 [style=dashed label="await-expression"]
  1200 -> 402 [style=dashed label="binary-literal"]
  1200 -> 403 [style=dashed label="boolean-literal"]
  1200 -> 404 [style=dashed label="cast-expression"]
  1200 -> 405 [style=dashed label="character-literal"]
  1200 -> 65 [style=dashed label="class-name"]
  1200 -> 406 [style=dashed label="compare-expression"]
  1200 -> 67 [style=dashed label="concept-name"]
  1200 -> 407 [style=dashed label="conditional-expression"]
  1200 -> 1565 [style=dashed label="constant-expression"]
  1200 -> 68 [style=dashed label="conversion-function-id"]
  1200 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1200 -> 410 [style=dashed label="decimal-literal"]
  1200 -> 76 [style=dashed label="decltype-specifier"]
  1200 -> 411 [style=dashed label="delete-expression"]
  1200 -> 412 [style=dashed label="digit"]
  1200 -> 413 [style=dashed label="digit-sequence"]
  1200 -> 414 [style=dashed label="encoding-prefix"]
  1200 -> 84 [style=dashed label="enum-name"]
  1200 -> 415 [style=dashed label="equality-expression"]
  1200 -> 416 [style=dashed label="exclusive-or-expression"]
  1200 -> 417 [style=dashed label="floating-point-literal"]
  1200 -> 418 [style=dashed label="fold-expression"]
  1200 -> 419 [style=dashed label="fractional-constant"]
  1200 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1200 -> 421 [style=dashed label="hexadecimal-literal"]
  1200 -> 422 [style=dashed label="hexadecimal-prefix"]
  1200 -> 423 [style=dashed label="id-expression"]
  1200 -> 424 [style=dashed label="inclusive-or-expression"]
  1200 -> 425 [style=dashed label="integer-literal"]
  1200 -> 426 [style=dashed label="lambda-expression"]
  1200 -> 427 [style=dashed label="lambda-introducer"]
  1200 -> 428 [style=dashed label="literal"]
  1200 -> 95 [style=dashed label="literal-operator-id"]
  1200 -> 429 [style=dashed label="logical-and-expression"]
  1200 -> 430 [style=dashed label="logical-or-expression"]
  1200 -> 431 [style=dashed label="multiplicative-expression"]
  1200 -> 99 [style=dashed label="namespace-alias"]
  1200 -> 102 [style=dashed label="namespace-name"]
  1200 -> 432 [style=dashed label="nested-name-specifier"]
  1200 -> 433 [style=dashed label="new-expression"]
  1200 -> 434 [style=dashed label="noexcept-expression"]
  1200 -> 435 [style=dashed label="nonzero-digit"]
  1200 -> 436 [style=dashed label="octal-literal"]
  1200 -> 108 [style=dashed label="operator-function-id"]
  1200 -> 109 [style=dashed label="placeholder-type-specifier"]
  1200 -> 437 [style=dashed label="pm-expression"]
  1200 -> 438 [style=dashed label="pointer-literal"]
  1200 -> 439 [style=dashed label="postfix-expression"]
  1200 -> 440 [style=dashed label="primary-expression"]
  1200 -> 112 [style=dashed label="qualified-id"]
  1200 -> 441 [style=dashed label="relational-expression"]
  1200 -> 442 [style=dashed label="requires-expression"]
  1200 -> 443 [style=dashed label="shift-expression"]
  1200 -> 114 [style=dashed label="simple-template-id"]
  1200 -> 529 [style=dashed label="simple-type-specifier"]
  1200 -> 445 [style=dashed label="string-literal"]
  1200 -> 120 [style=dashed label="template-id"]
  1200 -> 215 [style=dashed label="template-name"]
  1200 -> 123 [style=dashed label="type-constraint"]
  1200 -> 124 [style=dashed label="type-name"]
  1200 -> 126 [style=dashed label="typedef-name"]
  1200 -> 531 [style=dashed label="typename-specifier"]
  1200 -> 449 [style=dashed label="unary-expression"]
  1200 -> 450 [style=dashed label="unary-operator"]
  1200 -> 129 [style=dashed label="unqualified-id"]
  1200 -> 451 [style=dashed label="user-defined-character-literal"]
  1200 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1200 -> 453 [style=dashed label="user-defined-integer-literal"]
  1200 -> 454 [style=dashed label="user-defined-literal"]
  1200 -> 455 [style=dashed label="user-defined-string-literal"]
  1201 [label="State 1201\n\l297 enum-specifier: enum-head OPEN_BRACE enumerator-list COMMA • CLOSE_BRACE\l303 enumerator-list: enumerator-list COMMA • enumerator-definition\l"]
  1201 -> 704 [style=solid label="IDENTIFIER"]
  1201 -> 1566 [style=solid label="CLOSE_BRACE"]
  1201 -> 706 [style=dashed label="enumerator"]
  1201 -> 1567 [style=dashed label="enumerator-definition"]
  1202 [label="State 1202\n\l296 enum-specifier: enum-head OPEN_BRACE enumerator-list CLOSE_BRACE •\l"]
  1202 -> "1202R296" [style=solid]
 "1202R296" [label="R296", fillcolor=3, shape=diamond, style=filled]
  1203 [label="State 1203\n\l752 opaque-enum-declaration: enum-key attribute-specifier-seq enum-head-name SEMICOLON •\l"]
  1203 -> "1203R752" [style=solid]
 "1203R752" [label="R752", fillcolor=3, shape=diamond, style=filled]
  1204 [label="State 1204\n\l288 enum-head: enum-key attribute-specifier-seq enum-head-name enum-base •\l754 opaque-enum-declaration: enum-key attribute-specifier-seq enum-head-name enum-base • SEMICOLON\l"]
  1204 -> 1568 [style=solid label="SEMICOLON"]
  1204 -> "1204R288" [style=solid]
 "1204R288" [label="R288", fillcolor=3, shape=diamond, style=filled]
  1205 [label="State 1205\n\l753 opaque-enum-declaration: enum-key enum-head-name enum-base SEMICOLON •\l"]
  1205 -> "1205R753" [style=solid]
 "1205R753" [label="R753", fillcolor=3, shape=diamond, style=filled]
  1206 [label="State 1206\n\l231 deduction-guide: explicit-specifier template-name OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN DEREF simple-template-id SEMICOLON\l"]
  1206 -> 1569 [style=solid label="CLOSE_PAREN"]
  1207 [label="State 1207\n\l1067 translation-unit: global-module-fragment module-declaration declaration-seq private-module-fragment •\l"]
  1207 -> "1207R1067" [style=solid]
 "1207R1067" [label="R1067", fillcolor=3, shape=diamond, style=filled]
  1208 [label="State 1208\n\l1051 template-id: literal-operator-id LESS template-argument-list GREATER •\l"]
  1208 -> "1208R1051" [style=solid]
 "1208R1051" [label="R1051", fillcolor=3, shape=diamond, style=filled]
  1209 [label="State 1209\n\l886 private-module-fragment: MODULE COLON PRIVATE • SEMICOLON\l887                        | MODULE COLON PRIVATE • SEMICOLON declaration-seq\l"]
  1209 -> 1570 [style=solid label="SEMICOLON"]
  1210 [label="State 1210\n\l661 nested-name-specifier: nested-name-specifier TEMPLATE simple-template-id SCOPE •\l"]
  1210 -> "1210R661" [style=solid]
 "1210R661" [label="R661", fillcolor=3, shape=diamond, style=filled]
  1211 [label="State 1211\n\l904 ptr-operator: nested-name-specifier MULT attribute-specifier-seq cv-qualifier-seq •\l"]
  1211 -> "1211R904" [style=solid]
 "1211R904" [label="R904", fillcolor=3, shape=diamond, style=filled]
  1212 [label="State 1212\n\l1072 type-constraint: nested-name-specifier concept-name LESS GREATER •\l"]
  1212 -> "1212R1072" [style=solid]
 "1212R1072" [label="R1072", fillcolor=3, shape=diamond, style=filled]
  1213 [label="State 1213\n\l1041 template-argument-list: template-argument-list • COMMA template-argument\l1042                       | template-argument-list • COMMA template-argument ELLIPSIS\l1074 type-constraint: nested-name-specifier concept-name LESS template-argument-list • GREATER\l"]
  1213 -> 1129 [style=solid label="COMMA"]
  1213 -> 1571 [style=solid label="GREATER"]
  1214 [label="State 1214\n\l832 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN •\l833                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • cv-qualifier-seq\l834                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • ref-qualifier\l835                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • cv-qualifier-seq ref-qualifier\l836                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • noexcept-specifier\l837                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • cv-qualifier-seq noexcept-specifier\l838                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • ref-qualifier noexcept-specifier\l839                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • cv-qualifier-seq ref-qualifier noexcept-specifier\l840                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • attribute-specifier-seq\l841                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • cv-qualifier-seq attribute-specifier-seq\l842                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • ref-qualifier attribute-specifier-seq\l843                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • cv-qualifier-seq ref-qualifier attribute-specifier-seq\l844                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • noexcept-specifier attribute-specifier-seq\l845                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • cv-qualifier-seq noexcept-specifier attribute-specifier-seq\l846                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • ref-qualifier noexcept-specifier attribute-specifier-seq\l847                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq\l"]
  1214 -> 4 [style=solid label="ALIGNAS"]
  1214 -> 1572 [style=solid label="AND"]
  1214 -> 10 [style=solid label="OPEN_SQUARE"]
  1214 -> 894 [style=solid label="NOEXCEPT"]
  1214 -> 1573 [style=solid label="AND_AND"]
  1214 -> 18 [style=solid label="CONST"]
  1214 -> 19 [style=solid label="VOLATILE"]
  1214 -> 57 [style=dashed label="alignment-specifier"]
  1214 -> 60 [style=dashed label="attribute-specifier"]
  1214 -> 1574 [style=dashed label="attribute-specifier-seq"]
  1214 -> 233 [style=dashed label="cv-qualifier"]
  1214 -> 1575 [style=dashed label="cv-qualifier-seq"]
  1214 -> 1576 [style=dashed label="noexcept-specifier"]
  1214 -> 1577 [style=dashed label="ref-qualifier"]
  1214 -> "1214R832d" [label="[OPEN_SQUARE]", style=solid]
 "1214R832d" [label="R832", fillcolor=5, shape=diamond, style=filled]
  1214 -> "1214R832" [style=solid]
 "1214R832" [label="R832", fillcolor=3, shape=diamond, style=filled]
  1215 [label="State 1215\n\l827 parameter-declaration-clause: parameter-declaration-list ELLIPSIS •\l"]
  1215 -> "1215R827" [style=solid]
 "1215R827" [label="R827", fillcolor=3, shape=diamond, style=filled]
  1216 [label="State 1216\n\l829 parameter-declaration-clause: parameter-declaration-list COMMA • ELLIPSIS\l831 parameter-declaration-list: parameter-declaration-list COMMA • parameter-declaration\l"]
  1216 -> 162 [style=solid label="IDENTIFIER"]
  1216 -> 4 [style=solid label="ALIGNAS"]
  1216 -> 1578 [style=solid label="ELLIPSIS"]
  1216 -> 9 [style=solid label="SCOPE"]
  1216 -> 10 [style=solid label="OPEN_SQUARE"]
  1216 -> 11 [style=solid label="VIRTUAL"]
  1216 -> 12 [style=solid label="CLASS"]
  1216 -> 13 [style=solid label="STRUCT"]
  1216 -> 14 [style=solid label="UNION"]
  1216 -> 18 [style=solid label="CONST"]
  1216 -> 19 [style=solid label="VOLATILE"]
  1216 -> 20 [style=solid label="FRIEND"]
  1216 -> 21 [style=solid label="TYPEDEF"]
  1216 -> 22 [style=solid label="CONSTEXPR"]
  1216 -> 23 [style=solid label="CONSTEVAL"]
  1216 -> 24 [style=solid label="CONSTINIT"]
  1216 -> 258 [style=solid label="INLINE"]
  1216 -> 26 [style=solid label="DECLTYPE"]
  1216 -> 27 [style=solid label="ENUM"]
  1216 -> 259 [style=solid label="EXTERN"]
  1216 -> 29 [style=solid label="EXPLICIT"]
  1216 -> 471 [style=solid label="THIS"]
  1216 -> 36 [style=solid label="AUTO"]
  1216 -> 37 [style=solid label="CHAR"]
  1216 -> 38 [style=solid label="CHAR8_T"]
  1216 -> 39 [style=solid label="CHAR16_T"]
  1216 -> 40 [style=solid label="CHAR32_T"]
  1216 -> 41 [style=solid label="WCHAR_T"]
  1216 -> 42 [style=solid label="BOOL"]
  1216 -> 43 [style=solid label="SHORT"]
  1216 -> 44 [style=solid label="INT"]
  1216 -> 45 [style=solid label="LONG"]
  1216 -> 46 [style=solid label="SIGNED"]
  1216 -> 47 [style=solid label="UNSIGNED"]
  1216 -> 48 [style=solid label="FLOAT"]
  1216 -> 49 [style=solid label="DOUBLE"]
  1216 -> 50 [style=solid label="VOID"]
  1216 -> 52 [style=solid label="STATIC"]
  1216 -> 53 [style=solid label="THREAD_LOCAL"]
  1216 -> 54 [style=solid label="MUTABLE"]
  1216 -> 55 [style=solid label="TYPENAME"]
  1216 -> 57 [style=dashed label="alignment-specifier"]
  1216 -> 60 [style=dashed label="attribute-specifier"]
  1216 -> 473 [style=dashed label="attribute-specifier-seq"]
  1216 -> 63 [style=dashed label="class-head"]
  1216 -> 64 [style=dashed label="class-key"]
  1216 -> 65 [style=dashed label="class-name"]
  1216 -> 66 [style=dashed label="class-specifier"]
  1216 -> 67 [style=dashed label="concept-name"]
  1216 -> 69 [style=dashed label="cv-qualifier"]
  1216 -> 70 [style=dashed label="decl-specifier"]
  1216 -> 474 [style=dashed label="decl-specifier-seq"]
  1216 -> 76 [style=dashed label="decltype-specifier"]
  1216 -> 78 [style=dashed label="defining-type-specifier"]
  1216 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1216 -> 80 [style=dashed label="elaborated-type-specifier"]
  1216 -> 82 [style=dashed label="enum-head"]
  1216 -> 263 [style=dashed label="enum-key"]
  1216 -> 84 [style=dashed label="enum-name"]
  1216 -> 85 [style=dashed label="enum-specifier"]
  1216 -> 264 [style=dashed label="explicit-specifier"]
  1216 -> 91 [style=dashed label="function-specifier"]
  1216 -> 99 [style=dashed label="namespace-alias"]
  1216 -> 102 [style=dashed label="namespace-name"]
  1216 -> 212 [style=dashed label="nested-name-specifier"]
  1216 -> 1579 [style=dashed label="parameter-declaration"]
  1216 -> 109 [style=dashed label="placeholder-type-specifier"]
  1216 -> 141 [style=dashed label="simple-template-id"]
  1216 -> 115 [style=dashed label="simple-type-specifier"]
  1216 -> 117 [style=dashed label="storage-class-specifier"]
  1216 -> 215 [style=dashed label="template-name"]
  1216 -> 123 [style=dashed label="type-constraint"]
  1216 -> 124 [style=dashed label="type-name"]
  1216 -> 125 [style=dashed label="type-specifier"]
  1216 -> 126 [style=dashed label="typedef-name"]
  1216 -> 127 [style=dashed label="typename-specifier"]
  1217 [label="State 1217\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l726 noptr-declarator: noptr-declarator OPEN_SQUARE CLOSE_SQUARE attribute-specifier-seq •\l"]
  1217 -> 4 [style=solid label="ALIGNAS"]
  1217 -> 10 [style=solid label="OPEN_SQUARE"]
  1217 -> 57 [style=dashed label="alignment-specifier"]
  1217 -> 260 [style=dashed label="attribute-specifier"]
  1217 -> "1217R726d" [label="[OPEN_SQUARE]", style=solid]
 "1217R726d" [label="R726", fillcolor=5, shape=diamond, style=filled]
  1217 -> "1217R726" [style=solid]
 "1217R726" [label="R726", fillcolor=3, shape=diamond, style=filled]
  1218 [label="State 1218\n\l725 noptr-declarator: noptr-declarator OPEN_SQUARE constant-expression CLOSE_SQUARE •\l727                 | noptr-declarator OPEN_SQUARE constant-expression CLOSE_SQUARE • attribute-specifier-seq\l"]
  1218 -> 4 [style=solid label="ALIGNAS"]
  1218 -> 10 [style=solid label="OPEN_SQUARE"]
  1218 -> 57 [style=dashed label="alignment-specifier"]
  1218 -> 60 [style=dashed label="attribute-specifier"]
  1218 -> 1580 [style=dashed label="attribute-specifier-seq"]
  1218 -> "1218R725d" [label="[OPEN_SQUARE]", style=solid]
 "1218R725d" [label="R725", fillcolor=5, shape=diamond, style=filled]
  1218 -> "1218R725" [style=solid]
 "1218R725" [label="R725", fillcolor=3, shape=diamond, style=filled]
  1219 [label="State 1219\n\l1059 trailing-return-type: DEREF type-id •\l"]
  1219 -> "1219R1059" [style=solid]
 "1219R1059" [label="R1059", fillcolor=3, shape=diamond, style=filled]
  1220 [label="State 1220\n\l1049 template-id: operator-function-id LESS template-argument-list GREATER •\l"]
  1220 -> "1220R1049" [style=solid]
 "1220R1049" [label="R1049", fillcolor=3, shape=diamond, style=filled]
  1221 [label="State 1221\n\l162 concept-definition: CONCEPT concept-name EQ • constraint-expression SEMICOLON\l"]
  1221 -> 356 [style=solid label="PLUS"]
  1221 -> 357 [style=solid label="MINUS"]
  1221 -> 2 [style=solid label="IDENTIFIER"]
  1221 -> 358 [style=solid label="OPEN_PAREN"]
  1221 -> 359 [style=solid label="AND"]
  1221 -> 360 [style=solid label="SCOPE"]
  1221 -> 361 [style=solid label="OPEN_SQUARE"]
  1221 -> 362 [style=solid label="CO_AWAIT"]
  1221 -> 363 [style=solid label="ZERO_LB"]
  1221 -> 364 [style=solid label="ZERO_HB"]
  1221 -> 365 [style=solid label="SINGLE_QUOTE"]
  1221 -> 366 [style=solid label="FALSE"]
  1221 -> 367 [style=solid label="TRUE"]
  1221 -> 368 [style=solid label="NOEXCEPT"]
  1221 -> 17 [style=solid label="OPERATOR"]
  1221 -> 26 [style=solid label="DECLTYPE"]
  1221 -> 369 [style=solid label="DELETE"]
  1221 -> 370 [style=solid label="DOT"]
  1221 -> 184 [style=solid label="UNICODE_8"]
  1221 -> 371 [style=solid label="MULT"]
  1221 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1221 -> 372 [style=solid label="ZERO_LX"]
  1221 -> 373 [style=solid label="ZERO_HX"]
  1221 -> 374 [style=solid label="REQUIRES"]
  1221 -> 375 [style=solid label="NEW"]
  1221 -> 376 [style=solid label="COMPL"]
  1221 -> 377 [style=solid label="NOT"]
  1221 -> 378 [style=solid label="PLUS_PLUS"]
  1221 -> 379 [style=solid label="MINUS_MINUS"]
  1221 -> 380 [style=solid label="THIS"]
  1221 -> 36 [style=solid label="AUTO"]
  1221 -> 381 [style=solid label="NULLPTR"]
  1221 -> 382 [style=solid label="DYNAMIC_CAST"]
  1221 -> 383 [style=solid label="STATIC_CAST"]
  1221 -> 384 [style=solid label="REINTERPRET_CAST"]
  1221 -> 385 [style=solid label="CONST_CAST"]
  1221 -> 386 [style=solid label="TYPEID"]
  1221 -> 37 [style=solid label="CHAR"]
  1221 -> 38 [style=solid label="CHAR8_T"]
  1221 -> 39 [style=solid label="CHAR16_T"]
  1221 -> 40 [style=solid label="CHAR32_T"]
  1221 -> 41 [style=solid label="WCHAR_T"]
  1221 -> 42 [style=solid label="BOOL"]
  1221 -> 43 [style=solid label="SHORT"]
  1221 -> 44 [style=solid label="INT"]
  1221 -> 45 [style=solid label="LONG"]
  1221 -> 46 [style=solid label="SIGNED"]
  1221 -> 47 [style=solid label="UNSIGNED"]
  1221 -> 48 [style=solid label="FLOAT"]
  1221 -> 49 [style=solid label="DOUBLE"]
  1221 -> 50 [style=solid label="VOID"]
  1221 -> 55 [style=solid label="TYPENAME"]
  1221 -> 387 [style=solid label="SIZEOF"]
  1221 -> 388 [style=solid label="ALIGNOF"]
  1221 -> 389 [style=solid label="'0'"]
  1221 -> 390 [style=solid label="'1'"]
  1221 -> 391 [style=solid label="'2'"]
  1221 -> 392 [style=solid label="'3'"]
  1221 -> 393 [style=solid label="'4'"]
  1221 -> 394 [style=solid label="'5'"]
  1221 -> 395 [style=solid label="'6'"]
  1221 -> 396 [style=solid label="'7'"]
  1221 -> 397 [style=solid label="'8'"]
  1221 -> 398 [style=solid label="'9'"]
  1221 -> 205 [style=solid label="'u'"]
  1221 -> 206 [style=solid label="'U'"]
  1221 -> 207 [style=solid label="'L'"]
  1221 -> 208 [style=solid label="'R'"]
  1221 -> 399 [style=dashed label="additive-expression"]
  1221 -> 400 [style=dashed label="and-expression"]
  1221 -> 401 [style=dashed label="await-expression"]
  1221 -> 402 [style=dashed label="binary-literal"]
  1221 -> 403 [style=dashed label="boolean-literal"]
  1221 -> 404 [style=dashed label="cast-expression"]
  1221 -> 405 [style=dashed label="character-literal"]
  1221 -> 65 [style=dashed label="class-name"]
  1221 -> 406 [style=dashed label="compare-expression"]
  1221 -> 67 [style=dashed label="concept-name"]
  1221 -> 1581 [style=dashed label="constraint-expression"]
  1221 -> 68 [style=dashed label="conversion-function-id"]
  1221 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1221 -> 410 [style=dashed label="decimal-literal"]
  1221 -> 76 [style=dashed label="decltype-specifier"]
  1221 -> 411 [style=dashed label="delete-expression"]
  1221 -> 412 [style=dashed label="digit"]
  1221 -> 413 [style=dashed label="digit-sequence"]
  1221 -> 414 [style=dashed label="encoding-prefix"]
  1221 -> 84 [style=dashed label="enum-name"]
  1221 -> 415 [style=dashed label="equality-expression"]
  1221 -> 416 [style=dashed label="exclusive-or-expression"]
  1221 -> 417 [style=dashed label="floating-point-literal"]
  1221 -> 418 [style=dashed label="fold-expression"]
  1221 -> 419 [style=dashed label="fractional-constant"]
  1221 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1221 -> 421 [style=dashed label="hexadecimal-literal"]
  1221 -> 422 [style=dashed label="hexadecimal-prefix"]
  1221 -> 423 [style=dashed label="id-expression"]
  1221 -> 424 [style=dashed label="inclusive-or-expression"]
  1221 -> 425 [style=dashed label="integer-literal"]
  1221 -> 426 [style=dashed label="lambda-expression"]
  1221 -> 427 [style=dashed label="lambda-introducer"]
  1221 -> 428 [style=dashed label="literal"]
  1221 -> 95 [style=dashed label="literal-operator-id"]
  1221 -> 429 [style=dashed label="logical-and-expression"]
  1221 -> 1582 [style=dashed label="logical-or-expression"]
  1221 -> 431 [style=dashed label="multiplicative-expression"]
  1221 -> 99 [style=dashed label="namespace-alias"]
  1221 -> 102 [style=dashed label="namespace-name"]
  1221 -> 432 [style=dashed label="nested-name-specifier"]
  1221 -> 433 [style=dashed label="new-expression"]
  1221 -> 434 [style=dashed label="noexcept-expression"]
  1221 -> 435 [style=dashed label="nonzero-digit"]
  1221 -> 436 [style=dashed label="octal-literal"]
  1221 -> 108 [style=dashed label="operator-function-id"]
  1221 -> 109 [style=dashed label="placeholder-type-specifier"]
  1221 -> 437 [style=dashed label="pm-expression"]
  1221 -> 438 [style=dashed label="pointer-literal"]
  1221 -> 439 [style=dashed label="postfix-expression"]
  1221 -> 440 [style=dashed label="primary-expression"]
  1221 -> 112 [style=dashed label="qualified-id"]
  1221 -> 441 [style=dashed label="relational-expression"]
  1221 -> 442 [style=dashed label="requires-expression"]
  1221 -> 443 [style=dashed label="shift-expression"]
  1221 -> 114 [style=dashed label="simple-template-id"]
  1221 -> 529 [style=dashed label="simple-type-specifier"]
  1221 -> 445 [style=dashed label="string-literal"]
  1221 -> 120 [style=dashed label="template-id"]
  1221 -> 215 [style=dashed label="template-name"]
  1221 -> 123 [style=dashed label="type-constraint"]
  1221 -> 124 [style=dashed label="type-name"]
  1221 -> 126 [style=dashed label="typedef-name"]
  1221 -> 531 [style=dashed label="typename-specifier"]
  1221 -> 449 [style=dashed label="unary-expression"]
  1221 -> 450 [style=dashed label="unary-operator"]
  1221 -> 129 [style=dashed label="unqualified-id"]
  1221 -> 451 [style=dashed label="user-defined-character-literal"]
  1221 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1221 -> 453 [style=dashed label="user-defined-integer-literal"]
  1221 -> 454 [style=dashed label="user-defined-literal"]
  1221 -> 455 [style=dashed label="user-defined-string-literal"]
  1222 [label="State 1222\n\l232 deduction-guide: template-name OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • DEREF simple-template-id SEMICOLON\l"]
  1222 -> 1583 [style=solid label="DEREF"]
  1223 [label="State 1223\n\l984 simple-template-id: template-name LESS template-argument-list GREATER •\l"]
  1223 -> "1223R984" [style=solid]
 "1223R984" [label="R984", fillcolor=3, shape=diamond, style=filled]
  1224 [label="State 1224\n\l850 placeholder-type-specifier: type-constraint DECLTYPE OPEN_PAREN AUTO • CLOSE_PAREN\l"]
  1224 -> 1584 [style=solid label="CLOSE_PAREN"]
  1225 [label="State 1225\n\l 13 alias-declaration: USING IDENTIFIER EQ defining-type-id SEMICOLON •\l"]
  1225 -> "1225R13" [style=solid]
 "1225R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  1226 [label="State 1226\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l239 defining-type-specifier-seq: defining-type-specifier attribute-specifier-seq •\l"]
  1226 -> 4 [style=solid label="ALIGNAS"]
  1226 -> 10 [style=solid label="OPEN_SQUARE"]
  1226 -> 57 [style=dashed label="alignment-specifier"]
  1226 -> 260 [style=dashed label="attribute-specifier"]
  1226 -> "1226R239d" [label="[OPEN_SQUARE]", style=solid]
 "1226R239d" [label="R239", fillcolor=5, shape=diamond, style=filled]
  1226 -> "1226R239" [style=solid]
 "1226R239" [label="R239", fillcolor=3, shape=diamond, style=filled]
  1227 [label="State 1227\n\l240 defining-type-specifier-seq: defining-type-specifier defining-type-specifier-seq •\l"]
  1227 -> "1227R240" [style=solid]
 "1227R240" [label="R240", fillcolor=3, shape=diamond, style=filled]
  1228 [label="State 1228\n\l234 defining-type-id: defining-type-specifier-seq abstract-declarator •\l"]
  1228 -> "1228R234" [style=solid]
 "1228R234" [label="R234", fillcolor=3, shape=diamond, style=filled]
  1229 [label="State 1229\n\l 14 alias-declaration: USING IDENTIFIER attribute-specifier-seq EQ defining-type-id • SEMICOLON\l"]
  1229 -> 1585 [style=solid label="SEMICOLON"]
  1230 [label="State 1230\n\l1174 using-directive: USING NAMESPACE nested-name-specifier namespace-name SEMICOLON •\l"]
  1230 -> "1230R1174" [style=solid]
 "1230R1174" [label="R1174", fillcolor=3, shape=diamond, style=filled]
  1231 [label="State 1231\n\l1170 using-declarator-list: using-declarator-list COMMA using-declarator ELLIPSIS •\l"]
  1231 -> "1231R1170" [style=solid]
 "1231R1170" [label="R1170", fillcolor=3, shape=diamond, style=filled]
  1232 [label="State 1232\n\l348 fold-operator: PLUS •\l"]
  1232 -> "1232R348" [style=solid]
 "1232R348" [label="R348", fillcolor=3, shape=diamond, style=filled]
  1233 [label="State 1233\n\l349 fold-operator: MINUS •\l"]
  1233 -> "1233R349" [style=solid]
 "1233R349" [label="R349", fillcolor=3, shape=diamond, style=filled]
  1234 [label="State 1234\n\l368 fold-operator: EQ •\l"]
  1234 -> "1234R368" [style=solid]
 "1234R368" [label="R368", fillcolor=3, shape=diamond, style=filled]
  1235 [label="State 1235\n\l354 fold-operator: AND •\l"]
  1235 -> "1235R354" [style=solid]
 "1235R354" [label="R354", fillcolor=3, shape=diamond, style=filled]
  1236 [label="State 1236\n\l360 fold-operator: MULT_EQ •\l"]
  1236 -> "1236R360" [style=solid]
 "1236R360" [label="R360", fillcolor=3, shape=diamond, style=filled]
  1237 [label="State 1237\n\l361 fold-operator: DIV_EQ •\l"]
  1237 -> "1237R361" [style=solid]
 "1237R361" [label="R361", fillcolor=3, shape=diamond, style=filled]
  1238 [label="State 1238\n\l362 fold-operator: MOD_EQ •\l"]
  1238 -> "1238R362" [style=solid]
 "1238R362" [label="R362", fillcolor=3, shape=diamond, style=filled]
  1239 [label="State 1239\n\l358 fold-operator: PLUS_EQ •\l"]
  1239 -> "1239R358" [style=solid]
 "1239R358" [label="R358", fillcolor=3, shape=diamond, style=filled]
  1240 [label="State 1240\n\l359 fold-operator: MINUS_EQ •\l"]
  1240 -> "1240R359" [style=solid]
 "1240R359" [label="R359", fillcolor=3, shape=diamond, style=filled]
  1241 [label="State 1241\n\l367 fold-operator: RSHIFT_EQ •\l"]
  1241 -> "1241R367" [style=solid]
 "1241R367" [label="R367", fillcolor=3, shape=diamond, style=filled]
  1242 [label="State 1242\n\l366 fold-operator: LSHIFT_EQ •\l"]
  1242 -> "1242R366" [style=solid]
 "1242R366" [label="R366", fillcolor=3, shape=diamond, style=filled]
  1243 [label="State 1243\n\l364 fold-operator: AND_EQ •\l"]
  1243 -> "1243R364" [style=solid]
 "1243R364" [label="R364", fillcolor=3, shape=diamond, style=filled]
  1244 [label="State 1244\n\l363 fold-operator: XOR_EQ •\l"]
  1244 -> "1244R363" [style=solid]
 "1244R363" [label="R363", fillcolor=3, shape=diamond, style=filled]
  1245 [label="State 1245\n\l365 fold-operator: OR_EQ •\l"]
  1245 -> "1245R365" [style=solid]
 "1245R365" [label="R365", fillcolor=3, shape=diamond, style=filled]
  1246 [label="State 1246\n\l377 fold-operator: COMMA •\l"]
  1246 -> "1246R377" [style=solid]
 "1246R377" [label="R377", fillcolor=3, shape=diamond, style=filled]
  1247 [label="State 1247\n\l375 fold-operator: AND_AND •\l"]
  1247 -> "1247R375" [style=solid]
 "1247R375" [label="R375", fillcolor=3, shape=diamond, style=filled]
  1248 [label="State 1248\n\l376 fold-operator: OR_OR •\l"]
  1248 -> "1248R376" [style=solid]
 "1248R376" [label="R376", fillcolor=3, shape=diamond, style=filled]
  1249 [label="State 1249\n\l369 fold-operator: EQ_EQ •\l"]
  1249 -> "1249R369" [style=solid]
 "1249R369" [label="R369", fillcolor=3, shape=diamond, style=filled]
  1250 [label="State 1250\n\l370 fold-operator: NOT_EQ •\l"]
  1250 -> "1250R370" [style=solid]
 "1250R370" [label="R370", fillcolor=3, shape=diamond, style=filled]
  1251 [label="State 1251\n\l353 fold-operator: XOR •\l"]
  1251 -> "1251R353" [style=solid]
 "1251R353" [label="R353", fillcolor=3, shape=diamond, style=filled]
  1252 [label="State 1252\n\l371 fold-operator: LESS •\l"]
  1252 -> "1252R371" [style=solid]
 "1252R371" [label="R371", fillcolor=3, shape=diamond, style=filled]
  1253 [label="State 1253\n\l372 fold-operator: GREATER •\l"]
  1253 -> "1253R372" [style=solid]
 "1253R372" [label="R372", fillcolor=3, shape=diamond, style=filled]
  1254 [label="State 1254\n\l350 fold-operator: MULT •\l"]
  1254 -> "1254R350" [style=solid]
 "1254R350" [label="R350", fillcolor=3, shape=diamond, style=filled]
  1255 [label="State 1255\n\l351 fold-operator: DIV •\l"]
  1255 -> "1255R351" [style=solid]
 "1255R351" [label="R351", fillcolor=3, shape=diamond, style=filled]
  1256 [label="State 1256\n\l352 fold-operator: MOD •\l"]
  1256 -> "1256R352" [style=solid]
 "1256R352" [label="R352", fillcolor=3, shape=diamond, style=filled]
  1257 [label="State 1257\n\l355 fold-operator: OR •\l"]
  1257 -> "1257R355" [style=solid]
 "1257R355" [label="R355", fillcolor=3, shape=diamond, style=filled]
  1258 [label="State 1258\n\l356 fold-operator: LSHIFT •\l"]
  1258 -> "1258R356" [style=solid]
 "1258R356" [label="R356", fillcolor=3, shape=diamond, style=filled]
  1259 [label="State 1259\n\l357 fold-operator: RSHIFT •\l"]
  1259 -> "1259R357" [style=solid]
 "1259R357" [label="R357", fillcolor=3, shape=diamond, style=filled]
  1260 [label="State 1260\n\l373 fold-operator: LESS_EQ •\l"]
  1260 -> "1260R373" [style=solid]
 "1260R373" [label="R373", fillcolor=3, shape=diamond, style=filled]
  1261 [label="State 1261\n\l374 fold-operator: GREATER_EQ •\l"]
  1261 -> "1261R374" [style=solid]
 "1261R374" [label="R374", fillcolor=3, shape=diamond, style=filled]
  1262 [label="State 1262\n\l378 fold-operator: DOT_STAR •\l"]
  1262 -> "1262R378" [style=solid]
 "1262R378" [label="R378", fillcolor=3, shape=diamond, style=filled]
  1263 [label="State 1263\n\l379 fold-operator: DEREF_STAR •\l"]
  1263 -> "1263R379" [style=solid]
 "1263R379" [label="R379", fillcolor=3, shape=diamond, style=filled]
  1264 [label="State 1264\n\l346 fold-expression: OPEN_PAREN ELLIPSIS fold-operator • cast-expression CLOSE_PAREN\l"]
  1264 -> 356 [style=solid label="PLUS"]
  1264 -> 357 [style=solid label="MINUS"]
  1264 -> 2 [style=solid label="IDENTIFIER"]
  1264 -> 358 [style=solid label="OPEN_PAREN"]
  1264 -> 359 [style=solid label="AND"]
  1264 -> 360 [style=solid label="SCOPE"]
  1264 -> 361 [style=solid label="OPEN_SQUARE"]
  1264 -> 362 [style=solid label="CO_AWAIT"]
  1264 -> 363 [style=solid label="ZERO_LB"]
  1264 -> 364 [style=solid label="ZERO_HB"]
  1264 -> 365 [style=solid label="SINGLE_QUOTE"]
  1264 -> 366 [style=solid label="FALSE"]
  1264 -> 367 [style=solid label="TRUE"]
  1264 -> 368 [style=solid label="NOEXCEPT"]
  1264 -> 17 [style=solid label="OPERATOR"]
  1264 -> 26 [style=solid label="DECLTYPE"]
  1264 -> 369 [style=solid label="DELETE"]
  1264 -> 370 [style=solid label="DOT"]
  1264 -> 184 [style=solid label="UNICODE_8"]
  1264 -> 371 [style=solid label="MULT"]
  1264 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1264 -> 372 [style=solid label="ZERO_LX"]
  1264 -> 373 [style=solid label="ZERO_HX"]
  1264 -> 374 [style=solid label="REQUIRES"]
  1264 -> 375 [style=solid label="NEW"]
  1264 -> 376 [style=solid label="COMPL"]
  1264 -> 377 [style=solid label="NOT"]
  1264 -> 378 [style=solid label="PLUS_PLUS"]
  1264 -> 379 [style=solid label="MINUS_MINUS"]
  1264 -> 380 [style=solid label="THIS"]
  1264 -> 36 [style=solid label="AUTO"]
  1264 -> 381 [style=solid label="NULLPTR"]
  1264 -> 382 [style=solid label="DYNAMIC_CAST"]
  1264 -> 383 [style=solid label="STATIC_CAST"]
  1264 -> 384 [style=solid label="REINTERPRET_CAST"]
  1264 -> 385 [style=solid label="CONST_CAST"]
  1264 -> 386 [style=solid label="TYPEID"]
  1264 -> 37 [style=solid label="CHAR"]
  1264 -> 38 [style=solid label="CHAR8_T"]
  1264 -> 39 [style=solid label="CHAR16_T"]
  1264 -> 40 [style=solid label="CHAR32_T"]
  1264 -> 41 [style=solid label="WCHAR_T"]
  1264 -> 42 [style=solid label="BOOL"]
  1264 -> 43 [style=solid label="SHORT"]
  1264 -> 44 [style=solid label="INT"]
  1264 -> 45 [style=solid label="LONG"]
  1264 -> 46 [style=solid label="SIGNED"]
  1264 -> 47 [style=solid label="UNSIGNED"]
  1264 -> 48 [style=solid label="FLOAT"]
  1264 -> 49 [style=solid label="DOUBLE"]
  1264 -> 50 [style=solid label="VOID"]
  1264 -> 55 [style=solid label="TYPENAME"]
  1264 -> 387 [style=solid label="SIZEOF"]
  1264 -> 388 [style=solid label="ALIGNOF"]
  1264 -> 389 [style=solid label="'0'"]
  1264 -> 390 [style=solid label="'1'"]
  1264 -> 391 [style=solid label="'2'"]
  1264 -> 392 [style=solid label="'3'"]
  1264 -> 393 [style=solid label="'4'"]
  1264 -> 394 [style=solid label="'5'"]
  1264 -> 395 [style=solid label="'6'"]
  1264 -> 396 [style=solid label="'7'"]
  1264 -> 397 [style=solid label="'8'"]
  1264 -> 398 [style=solid label="'9'"]
  1264 -> 205 [style=solid label="'u'"]
  1264 -> 206 [style=solid label="'U'"]
  1264 -> 207 [style=solid label="'L'"]
  1264 -> 208 [style=solid label="'R'"]
  1264 -> 401 [style=dashed label="await-expression"]
  1264 -> 402 [style=dashed label="binary-literal"]
  1264 -> 403 [style=dashed label="boolean-literal"]
  1264 -> 1586 [style=dashed label="cast-expression"]
  1264 -> 405 [style=dashed label="character-literal"]
  1264 -> 65 [style=dashed label="class-name"]
  1264 -> 67 [style=dashed label="concept-name"]
  1264 -> 68 [style=dashed label="conversion-function-id"]
  1264 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1264 -> 410 [style=dashed label="decimal-literal"]
  1264 -> 76 [style=dashed label="decltype-specifier"]
  1264 -> 411 [style=dashed label="delete-expression"]
  1264 -> 412 [style=dashed label="digit"]
  1264 -> 413 [style=dashed label="digit-sequence"]
  1264 -> 414 [style=dashed label="encoding-prefix"]
  1264 -> 84 [style=dashed label="enum-name"]
  1264 -> 417 [style=dashed label="floating-point-literal"]
  1264 -> 418 [style=dashed label="fold-expression"]
  1264 -> 419 [style=dashed label="fractional-constant"]
  1264 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1264 -> 421 [style=dashed label="hexadecimal-literal"]
  1264 -> 422 [style=dashed label="hexadecimal-prefix"]
  1264 -> 423 [style=dashed label="id-expression"]
  1264 -> 425 [style=dashed label="integer-literal"]
  1264 -> 426 [style=dashed label="lambda-expression"]
  1264 -> 427 [style=dashed label="lambda-introducer"]
  1264 -> 428 [style=dashed label="literal"]
  1264 -> 95 [style=dashed label="literal-operator-id"]
  1264 -> 99 [style=dashed label="namespace-alias"]
  1264 -> 102 [style=dashed label="namespace-name"]
  1264 -> 432 [style=dashed label="nested-name-specifier"]
  1264 -> 433 [style=dashed label="new-expression"]
  1264 -> 434 [style=dashed label="noexcept-expression"]
  1264 -> 435 [style=dashed label="nonzero-digit"]
  1264 -> 436 [style=dashed label="octal-literal"]
  1264 -> 108 [style=dashed label="operator-function-id"]
  1264 -> 109 [style=dashed label="placeholder-type-specifier"]
  1264 -> 438 [style=dashed label="pointer-literal"]
  1264 -> 439 [style=dashed label="postfix-expression"]
  1264 -> 440 [style=dashed label="primary-expression"]
  1264 -> 112 [style=dashed label="qualified-id"]
  1264 -> 442 [style=dashed label="requires-expression"]
  1264 -> 114 [style=dashed label="simple-template-id"]
  1264 -> 529 [style=dashed label="simple-type-specifier"]
  1264 -> 445 [style=dashed label="string-literal"]
  1264 -> 120 [style=dashed label="template-id"]
  1264 -> 215 [style=dashed label="template-name"]
  1264 -> 123 [style=dashed label="type-constraint"]
  1264 -> 124 [style=dashed label="type-name"]
  1264 -> 126 [style=dashed label="typedef-name"]
  1264 -> 531 [style=dashed label="typename-specifier"]
  1264 -> 449 [style=dashed label="unary-expression"]
  1264 -> 450 [style=dashed label="unary-operator"]
  1264 -> 129 [style=dashed label="unqualified-id"]
  1264 -> 451 [style=dashed label="user-defined-character-literal"]
  1264 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1264 -> 453 [style=dashed label="user-defined-integer-literal"]
  1264 -> 454 [style=dashed label="user-defined-literal"]
  1264 -> 455 [style=dashed label="user-defined-string-literal"]
  1265 [label="State 1265\n\l345 fold-expression: OPEN_PAREN cast-expression fold-operator • ELLIPSIS CLOSE_PAREN\l347                | OPEN_PAREN cast-expression fold-operator • ELLIPSIS fold-operator cast-expression CLOSE_PAREN\l"]
  1265 -> 1587 [style=solid label="ELLIPSIS"]
  1266 [label="State 1266\n\l881 primary-expression: OPEN_PAREN expression CLOSE_PAREN •\l"]
  1266 -> "1266R881" [style=solid]
 "1266R881" [label="R881", fillcolor=3, shape=diamond, style=filled]
  1267 [label="State 1267\n\l125 cast-expression: OPEN_PAREN type-id CLOSE_PAREN • cast-expression\l"]
  1267 -> 356 [style=solid label="PLUS"]
  1267 -> 357 [style=solid label="MINUS"]
  1267 -> 2 [style=solid label="IDENTIFIER"]
  1267 -> 358 [style=solid label="OPEN_PAREN"]
  1267 -> 359 [style=solid label="AND"]
  1267 -> 360 [style=solid label="SCOPE"]
  1267 -> 361 [style=solid label="OPEN_SQUARE"]
  1267 -> 362 [style=solid label="CO_AWAIT"]
  1267 -> 363 [style=solid label="ZERO_LB"]
  1267 -> 364 [style=solid label="ZERO_HB"]
  1267 -> 365 [style=solid label="SINGLE_QUOTE"]
  1267 -> 366 [style=solid label="FALSE"]
  1267 -> 367 [style=solid label="TRUE"]
  1267 -> 368 [style=solid label="NOEXCEPT"]
  1267 -> 17 [style=solid label="OPERATOR"]
  1267 -> 26 [style=solid label="DECLTYPE"]
  1267 -> 369 [style=solid label="DELETE"]
  1267 -> 370 [style=solid label="DOT"]
  1267 -> 184 [style=solid label="UNICODE_8"]
  1267 -> 371 [style=solid label="MULT"]
  1267 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1267 -> 372 [style=solid label="ZERO_LX"]
  1267 -> 373 [style=solid label="ZERO_HX"]
  1267 -> 374 [style=solid label="REQUIRES"]
  1267 -> 375 [style=solid label="NEW"]
  1267 -> 376 [style=solid label="COMPL"]
  1267 -> 377 [style=solid label="NOT"]
  1267 -> 378 [style=solid label="PLUS_PLUS"]
  1267 -> 379 [style=solid label="MINUS_MINUS"]
  1267 -> 380 [style=solid label="THIS"]
  1267 -> 36 [style=solid label="AUTO"]
  1267 -> 381 [style=solid label="NULLPTR"]
  1267 -> 382 [style=solid label="DYNAMIC_CAST"]
  1267 -> 383 [style=solid label="STATIC_CAST"]
  1267 -> 384 [style=solid label="REINTERPRET_CAST"]
  1267 -> 385 [style=solid label="CONST_CAST"]
  1267 -> 386 [style=solid label="TYPEID"]
  1267 -> 37 [style=solid label="CHAR"]
  1267 -> 38 [style=solid label="CHAR8_T"]
  1267 -> 39 [style=solid label="CHAR16_T"]
  1267 -> 40 [style=solid label="CHAR32_T"]
  1267 -> 41 [style=solid label="WCHAR_T"]
  1267 -> 42 [style=solid label="BOOL"]
  1267 -> 43 [style=solid label="SHORT"]
  1267 -> 44 [style=solid label="INT"]
  1267 -> 45 [style=solid label="LONG"]
  1267 -> 46 [style=solid label="SIGNED"]
  1267 -> 47 [style=solid label="UNSIGNED"]
  1267 -> 48 [style=solid label="FLOAT"]
  1267 -> 49 [style=solid label="DOUBLE"]
  1267 -> 50 [style=solid label="VOID"]
  1267 -> 55 [style=solid label="TYPENAME"]
  1267 -> 387 [style=solid label="SIZEOF"]
  1267 -> 388 [style=solid label="ALIGNOF"]
  1267 -> 389 [style=solid label="'0'"]
  1267 -> 390 [style=solid label="'1'"]
  1267 -> 391 [style=solid label="'2'"]
  1267 -> 392 [style=solid label="'3'"]
  1267 -> 393 [style=solid label="'4'"]
  1267 -> 394 [style=solid label="'5'"]
  1267 -> 395 [style=solid label="'6'"]
  1267 -> 396 [style=solid label="'7'"]
  1267 -> 397 [style=solid label="'8'"]
  1267 -> 398 [style=solid label="'9'"]
  1267 -> 205 [style=solid label="'u'"]
  1267 -> 206 [style=solid label="'U'"]
  1267 -> 207 [style=solid label="'L'"]
  1267 -> 208 [style=solid label="'R'"]
  1267 -> 401 [style=dashed label="await-expression"]
  1267 -> 402 [style=dashed label="binary-literal"]
  1267 -> 403 [style=dashed label="boolean-literal"]
  1267 -> 1588 [style=dashed label="cast-expression"]
  1267 -> 405 [style=dashed label="character-literal"]
  1267 -> 65 [style=dashed label="class-name"]
  1267 -> 67 [style=dashed label="concept-name"]
  1267 -> 68 [style=dashed label="conversion-function-id"]
  1267 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1267 -> 410 [style=dashed label="decimal-literal"]
  1267 -> 76 [style=dashed label="decltype-specifier"]
  1267 -> 411 [style=dashed label="delete-expression"]
  1267 -> 412 [style=dashed label="digit"]
  1267 -> 413 [style=dashed label="digit-sequence"]
  1267 -> 414 [style=dashed label="encoding-prefix"]
  1267 -> 84 [style=dashed label="enum-name"]
  1267 -> 417 [style=dashed label="floating-point-literal"]
  1267 -> 418 [style=dashed label="fold-expression"]
  1267 -> 419 [style=dashed label="fractional-constant"]
  1267 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1267 -> 421 [style=dashed label="hexadecimal-literal"]
  1267 -> 422 [style=dashed label="hexadecimal-prefix"]
  1267 -> 423 [style=dashed label="id-expression"]
  1267 -> 425 [style=dashed label="integer-literal"]
  1267 -> 426 [style=dashed label="lambda-expression"]
  1267 -> 427 [style=dashed label="lambda-introducer"]
  1267 -> 428 [style=dashed label="literal"]
  1267 -> 95 [style=dashed label="literal-operator-id"]
  1267 -> 99 [style=dashed label="namespace-alias"]
  1267 -> 102 [style=dashed label="namespace-name"]
  1267 -> 432 [style=dashed label="nested-name-specifier"]
  1267 -> 433 [style=dashed label="new-expression"]
  1267 -> 434 [style=dashed label="noexcept-expression"]
  1267 -> 435 [style=dashed label="nonzero-digit"]
  1267 -> 436 [style=dashed label="octal-literal"]
  1267 -> 108 [style=dashed label="operator-function-id"]
  1267 -> 109 [style=dashed label="placeholder-type-specifier"]
  1267 -> 438 [style=dashed label="pointer-literal"]
  1267 -> 439 [style=dashed label="postfix-expression"]
  1267 -> 440 [style=dashed label="primary-expression"]
  1267 -> 112 [style=dashed label="qualified-id"]
  1267 -> 442 [style=dashed label="requires-expression"]
  1267 -> 114 [style=dashed label="simple-template-id"]
  1267 -> 529 [style=dashed label="simple-type-specifier"]
  1267 -> 445 [style=dashed label="string-literal"]
  1267 -> 120 [style=dashed label="template-id"]
  1267 -> 215 [style=dashed label="template-name"]
  1267 -> 123 [style=dashed label="type-constraint"]
  1267 -> 124 [style=dashed label="type-name"]
  1267 -> 126 [style=dashed label="typedef-name"]
  1267 -> 531 [style=dashed label="typename-specifier"]
  1267 -> 449 [style=dashed label="unary-expression"]
  1267 -> 450 [style=dashed label="unary-operator"]
  1267 -> 129 [style=dashed label="unqualified-id"]
  1267 -> 451 [style=dashed label="user-defined-character-literal"]
  1267 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1267 -> 453 [style=dashed label="user-defined-integer-literal"]
  1267 -> 454 [style=dashed label="user-defined-literal"]
  1267 -> 455 [style=dashed label="user-defined-string-literal"]
  1268 [label="State 1268\n\l243 delete-expression: SCOPE DELETE OPEN_SQUARE • CLOSE_SQUARE cast-expression\l534 lambda-introducer: OPEN_SQUARE • CLOSE_SQUARE\l535                  | OPEN_SQUARE • lambda-capture CLOSE_SQUARE\l"]
  1268 -> 762 [style=solid label="IDENTIFIER"]
  1268 -> 763 [style=solid label="EQ"]
  1268 -> 764 [style=solid label="ELLIPSIS"]
  1268 -> 765 [style=solid label="AND"]
  1268 -> 1589 [style=solid label="CLOSE_SQUARE"]
  1268 -> 767 [style=solid label="MULT"]
  1268 -> 768 [style=solid label="THIS"]
  1268 -> 769 [style=dashed label="capture"]
  1268 -> 770 [style=dashed label="capture-default"]
  1268 -> 771 [style=dashed label="capture-list"]
  1268 -> 772 [style=dashed label="init-capture"]
  1268 -> 773 [style=dashed label="lambda-capture"]
  1268 -> 774 [style=dashed label="simple-capture"]
  1269 [label="State 1269\n\l241 delete-expression: SCOPE DELETE cast-expression •\l"]
  1269 -> "1269R241" [style=solid]
 "1269R241" [label="R241", fillcolor=3, shape=diamond, style=filled]
  1270 [label="State 1270\n\l676 new-expression: SCOPE NEW OPEN_PAREN • type-id CLOSE_PAREN\l680               | SCOPE NEW OPEN_PAREN • type-id CLOSE_PAREN new-initializer\l687 new-placement: OPEN_PAREN • expression-list CLOSE_PAREN\l"]
  1270 -> 356 [style=solid label="PLUS"]
  1270 -> 357 [style=solid label="MINUS"]
  1270 -> 2 [style=solid label="IDENTIFIER"]
  1270 -> 358 [style=solid label="OPEN_PAREN"]
  1270 -> 359 [style=solid label="AND"]
  1270 -> 360 [style=solid label="SCOPE"]
  1270 -> 361 [style=solid label="OPEN_SQUARE"]
  1270 -> 362 [style=solid label="CO_AWAIT"]
  1270 -> 935 [style=solid label="OPEN_BRACE"]
  1270 -> 363 [style=solid label="ZERO_LB"]
  1270 -> 364 [style=solid label="ZERO_HB"]
  1270 -> 365 [style=solid label="SINGLE_QUOTE"]
  1270 -> 366 [style=solid label="FALSE"]
  1270 -> 367 [style=solid label="TRUE"]
  1270 -> 12 [style=solid label="CLASS"]
  1270 -> 13 [style=solid label="STRUCT"]
  1270 -> 14 [style=solid label="UNION"]
  1270 -> 368 [style=solid label="NOEXCEPT"]
  1270 -> 17 [style=solid label="OPERATOR"]
  1270 -> 18 [style=solid label="CONST"]
  1270 -> 19 [style=solid label="VOLATILE"]
  1270 -> 26 [style=solid label="DECLTYPE"]
  1270 -> 369 [style=solid label="DELETE"]
  1270 -> 370 [style=solid label="DOT"]
  1270 -> 135 [style=solid label="ENUM"]
  1270 -> 184 [style=solid label="UNICODE_8"]
  1270 -> 371 [style=solid label="MULT"]
  1270 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1270 -> 372 [style=solid label="ZERO_LX"]
  1270 -> 373 [style=solid label="ZERO_HX"]
  1270 -> 374 [style=solid label="REQUIRES"]
  1270 -> 375 [style=solid label="NEW"]
  1270 -> 376 [style=solid label="COMPL"]
  1270 -> 377 [style=solid label="NOT"]
  1270 -> 378 [style=solid label="PLUS_PLUS"]
  1270 -> 379 [style=solid label="MINUS_MINUS"]
  1270 -> 380 [style=solid label="THIS"]
  1270 -> 36 [style=solid label="AUTO"]
  1270 -> 381 [style=solid label="NULLPTR"]
  1270 -> 382 [style=solid label="DYNAMIC_CAST"]
  1270 -> 383 [style=solid label="STATIC_CAST"]
  1270 -> 384 [style=solid label="REINTERPRET_CAST"]
  1270 -> 385 [style=solid label="CONST_CAST"]
  1270 -> 386 [style=solid label="TYPEID"]
  1270 -> 37 [style=solid label="CHAR"]
  1270 -> 38 [style=solid label="CHAR8_T"]
  1270 -> 39 [style=solid label="CHAR16_T"]
  1270 -> 40 [style=solid label="CHAR32_T"]
  1270 -> 41 [style=solid label="WCHAR_T"]
  1270 -> 42 [style=solid label="BOOL"]
  1270 -> 43 [style=solid label="SHORT"]
  1270 -> 44 [style=solid label="INT"]
  1270 -> 45 [style=solid label="LONG"]
  1270 -> 46 [style=solid label="SIGNED"]
  1270 -> 47 [style=solid label="UNSIGNED"]
  1270 -> 48 [style=solid label="FLOAT"]
  1270 -> 49 [style=solid label="DOUBLE"]
  1270 -> 50 [style=solid label="VOID"]
  1270 -> 523 [style=solid label="THROW"]
  1270 -> 55 [style=solid label="TYPENAME"]
  1270 -> 387 [style=solid label="SIZEOF"]
  1270 -> 388 [style=solid label="ALIGNOF"]
  1270 -> 524 [style=solid label="CO_YIELD"]
  1270 -> 389 [style=solid label="'0'"]
  1270 -> 390 [style=solid label="'1'"]
  1270 -> 391 [style=solid label="'2'"]
  1270 -> 392 [style=solid label="'3'"]
  1270 -> 393 [style=solid label="'4'"]
  1270 -> 394 [style=solid label="'5'"]
  1270 -> 395 [style=solid label="'6'"]
  1270 -> 396 [style=solid label="'7'"]
  1270 -> 397 [style=solid label="'8'"]
  1270 -> 398 [style=solid label="'9'"]
  1270 -> 205 [style=solid label="'u'"]
  1270 -> 206 [style=solid label="'U'"]
  1270 -> 207 [style=solid label="'L'"]
  1270 -> 208 [style=solid label="'R'"]
  1270 -> 399 [style=dashed label="additive-expression"]
  1270 -> 400 [style=dashed label="and-expression"]
  1270 -> 1134 [style=dashed label="assignment-expression"]
  1270 -> 401 [style=dashed label="await-expression"]
  1270 -> 402 [style=dashed label="binary-literal"]
  1270 -> 403 [style=dashed label="boolean-literal"]
  1270 -> 1135 [style=dashed label="braced-init-list"]
  1270 -> 404 [style=dashed label="cast-expression"]
  1270 -> 405 [style=dashed label="character-literal"]
  1270 -> 209 [style=dashed label="class-key"]
  1270 -> 65 [style=dashed label="class-name"]
  1270 -> 406 [style=dashed label="compare-expression"]
  1270 -> 67 [style=dashed label="concept-name"]
  1270 -> 526 [style=dashed label="conditional-expression"]
  1270 -> 68 [style=dashed label="conversion-function-id"]
  1270 -> 69 [style=dashed label="cv-qualifier"]
  1270 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1270 -> 410 [style=dashed label="decimal-literal"]
  1270 -> 76 [style=dashed label="decltype-specifier"]
  1270 -> 411 [style=dashed label="delete-expression"]
  1270 -> 412 [style=dashed label="digit"]
  1270 -> 413 [style=dashed label="digit-sequence"]
  1270 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1270 -> 80 [style=dashed label="elaborated-type-specifier"]
  1270 -> 414 [style=dashed label="encoding-prefix"]
  1270 -> 84 [style=dashed label="enum-name"]
  1270 -> 415 [style=dashed label="equality-expression"]
  1270 -> 416 [style=dashed label="exclusive-or-expression"]
  1270 -> 1299 [style=dashed label="expression-list"]
  1270 -> 417 [style=dashed label="floating-point-literal"]
  1270 -> 418 [style=dashed label="fold-expression"]
  1270 -> 419 [style=dashed label="fractional-constant"]
  1270 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1270 -> 421 [style=dashed label="hexadecimal-literal"]
  1270 -> 422 [style=dashed label="hexadecimal-prefix"]
  1270 -> 423 [style=dashed label="id-expression"]
  1270 -> 424 [style=dashed label="inclusive-or-expression"]
  1270 -> 1138 [style=dashed label="initializer-clause"]
  1270 -> 1139 [style=dashed label="initializer-list"]
  1270 -> 425 [style=dashed label="integer-literal"]
  1270 -> 426 [style=dashed label="lambda-expression"]
  1270 -> 427 [style=dashed label="lambda-introducer"]
  1270 -> 428 [style=dashed label="literal"]
  1270 -> 95 [style=dashed label="literal-operator-id"]
  1270 -> 429 [style=dashed label="logical-and-expression"]
  1270 -> 528 [style=dashed label="logical-or-expression"]
  1270 -> 431 [style=dashed label="multiplicative-expression"]
  1270 -> 99 [style=dashed label="namespace-alias"]
  1270 -> 102 [style=dashed label="namespace-name"]
  1270 -> 432 [style=dashed label="nested-name-specifier"]
  1270 -> 433 [style=dashed label="new-expression"]
  1270 -> 434 [style=dashed label="noexcept-expression"]
  1270 -> 435 [style=dashed label="nonzero-digit"]
  1270 -> 436 [style=dashed label="octal-literal"]
  1270 -> 108 [style=dashed label="operator-function-id"]
  1270 -> 109 [style=dashed label="placeholder-type-specifier"]
  1270 -> 437 [style=dashed label="pm-expression"]
  1270 -> 438 [style=dashed label="pointer-literal"]
  1270 -> 439 [style=dashed label="postfix-expression"]
  1270 -> 440 [style=dashed label="primary-expression"]
  1270 -> 112 [style=dashed label="qualified-id"]
  1270 -> 441 [style=dashed label="relational-expression"]
  1270 -> 442 [style=dashed label="requires-expression"]
  1270 -> 443 [style=dashed label="shift-expression"]
  1270 -> 114 [style=dashed label="simple-template-id"]
  1270 -> 444 [style=dashed label="simple-type-specifier"]
  1270 -> 445 [style=dashed label="string-literal"]
  1270 -> 120 [style=dashed label="template-id"]
  1270 -> 215 [style=dashed label="template-name"]
  1270 -> 530 [style=dashed label="throw-expression"]
  1270 -> 123 [style=dashed label="type-constraint"]
  1270 -> 1590 [style=dashed label="type-id"]
  1270 -> 124 [style=dashed label="type-name"]
  1270 -> 216 [style=dashed label="type-specifier"]
  1270 -> 447 [style=dashed label="type-specifier-seq"]
  1270 -> 126 [style=dashed label="typedef-name"]
  1270 -> 448 [style=dashed label="typename-specifier"]
  1270 -> 449 [style=dashed label="unary-expression"]
  1270 -> 450 [style=dashed label="unary-operator"]
  1270 -> 129 [style=dashed label="unqualified-id"]
  1270 -> 451 [style=dashed label="user-defined-character-literal"]
  1270 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1270 -> 453 [style=dashed label="user-defined-integer-literal"]
  1270 -> 454 [style=dashed label="user-defined-literal"]
  1270 -> 455 [style=dashed label="user-defined-string-literal"]
  1270 -> 532 [style=dashed label="yield-expression"]
  1271 [label="State 1271\n\l670 new-expression: SCOPE NEW new-placement • new-type-id\l674               | SCOPE NEW new-placement • new-type-id new-initializer\l678               | SCOPE NEW new-placement • OPEN_PAREN type-id CLOSE_PAREN\l682               | SCOPE NEW new-placement • OPEN_PAREN type-id CLOSE_PAREN new-initializer\l"]
  1271 -> 162 [style=solid label="IDENTIFIER"]
  1271 -> 1591 [style=solid label="OPEN_PAREN"]
  1271 -> 9 [style=solid label="SCOPE"]
  1271 -> 12 [style=solid label="CLASS"]
  1271 -> 13 [style=solid label="STRUCT"]
  1271 -> 14 [style=solid label="UNION"]
  1271 -> 18 [style=solid label="CONST"]
  1271 -> 19 [style=solid label="VOLATILE"]
  1271 -> 26 [style=solid label="DECLTYPE"]
  1271 -> 135 [style=solid label="ENUM"]
  1271 -> 36 [style=solid label="AUTO"]
  1271 -> 37 [style=solid label="CHAR"]
  1271 -> 38 [style=solid label="CHAR8_T"]
  1271 -> 39 [style=solid label="CHAR16_T"]
  1271 -> 40 [style=solid label="CHAR32_T"]
  1271 -> 41 [style=solid label="WCHAR_T"]
  1271 -> 42 [style=solid label="BOOL"]
  1271 -> 43 [style=solid label="SHORT"]
  1271 -> 44 [style=solid label="INT"]
  1271 -> 45 [style=solid label="LONG"]
  1271 -> 46 [style=solid label="SIGNED"]
  1271 -> 47 [style=solid label="UNSIGNED"]
  1271 -> 48 [style=solid label="FLOAT"]
  1271 -> 49 [style=solid label="DOUBLE"]
  1271 -> 50 [style=solid label="VOID"]
  1271 -> 55 [style=solid label="TYPENAME"]
  1271 -> 209 [style=dashed label="class-key"]
  1271 -> 65 [style=dashed label="class-name"]
  1271 -> 67 [style=dashed label="concept-name"]
  1271 -> 69 [style=dashed label="cv-qualifier"]
  1271 -> 76 [style=dashed label="decltype-specifier"]
  1271 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1271 -> 80 [style=dashed label="elaborated-type-specifier"]
  1271 -> 84 [style=dashed label="enum-name"]
  1271 -> 99 [style=dashed label="namespace-alias"]
  1271 -> 102 [style=dashed label="namespace-name"]
  1271 -> 212 [style=dashed label="nested-name-specifier"]
  1271 -> 1592 [style=dashed label="new-type-id"]
  1271 -> 109 [style=dashed label="placeholder-type-specifier"]
  1271 -> 141 [style=dashed label="simple-template-id"]
  1271 -> 115 [style=dashed label="simple-type-specifier"]
  1271 -> 215 [style=dashed label="template-name"]
  1271 -> 123 [style=dashed label="type-constraint"]
  1271 -> 124 [style=dashed label="type-name"]
  1271 -> 216 [style=dashed label="type-specifier"]
  1271 -> 807 [style=dashed label="type-specifier-seq"]
  1271 -> 126 [style=dashed label="typedef-name"]
  1271 -> 127 [style=dashed label="typename-specifier"]
  1272 [label="State 1272\n\l668 new-expression: SCOPE NEW new-type-id •\l672               | SCOPE NEW new-type-id • new-initializer\l"]
  1272 -> 1303 [style=solid label="OPEN_PAREN"]
  1272 -> 935 [style=solid label="OPEN_BRACE"]
  1272 -> 1304 [style=dashed label="braced-init-list"]
  1272 -> 1593 [style=dashed label="new-initializer"]
  1272 -> "1272R668d" [label="[OPEN_BRACE]", style=solid]
 "1272R668d" [label="R668", fillcolor=5, shape=diamond, style=filled]
  1272 -> "1272R668" [style=solid]
 "1272R668" [label="R668", fillcolor=3, shape=diamond, style=filled]
  1273 [label="State 1273\n\l106 brace-or-equal-initializer: EQ • initializer-clause\l"]
  1273 -> 356 [style=solid label="PLUS"]
  1273 -> 357 [style=solid label="MINUS"]
  1273 -> 2 [style=solid label="IDENTIFIER"]
  1273 -> 358 [style=solid label="OPEN_PAREN"]
  1273 -> 359 [style=solid label="AND"]
  1273 -> 360 [style=solid label="SCOPE"]
  1273 -> 361 [style=solid label="OPEN_SQUARE"]
  1273 -> 362 [style=solid label="CO_AWAIT"]
  1273 -> 935 [style=solid label="OPEN_BRACE"]
  1273 -> 363 [style=solid label="ZERO_LB"]
  1273 -> 364 [style=solid label="ZERO_HB"]
  1273 -> 365 [style=solid label="SINGLE_QUOTE"]
  1273 -> 366 [style=solid label="FALSE"]
  1273 -> 367 [style=solid label="TRUE"]
  1273 -> 368 [style=solid label="NOEXCEPT"]
  1273 -> 17 [style=solid label="OPERATOR"]
  1273 -> 26 [style=solid label="DECLTYPE"]
  1273 -> 369 [style=solid label="DELETE"]
  1273 -> 370 [style=solid label="DOT"]
  1273 -> 184 [style=solid label="UNICODE_8"]
  1273 -> 371 [style=solid label="MULT"]
  1273 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1273 -> 372 [style=solid label="ZERO_LX"]
  1273 -> 373 [style=solid label="ZERO_HX"]
  1273 -> 374 [style=solid label="REQUIRES"]
  1273 -> 375 [style=solid label="NEW"]
  1273 -> 376 [style=solid label="COMPL"]
  1273 -> 377 [style=solid label="NOT"]
  1273 -> 378 [style=solid label="PLUS_PLUS"]
  1273 -> 379 [style=solid label="MINUS_MINUS"]
  1273 -> 380 [style=solid label="THIS"]
  1273 -> 36 [style=solid label="AUTO"]
  1273 -> 381 [style=solid label="NULLPTR"]
  1273 -> 382 [style=solid label="DYNAMIC_CAST"]
  1273 -> 383 [style=solid label="STATIC_CAST"]
  1273 -> 384 [style=solid label="REINTERPRET_CAST"]
  1273 -> 385 [style=solid label="CONST_CAST"]
  1273 -> 386 [style=solid label="TYPEID"]
  1273 -> 37 [style=solid label="CHAR"]
  1273 -> 38 [style=solid label="CHAR8_T"]
  1273 -> 39 [style=solid label="CHAR16_T"]
  1273 -> 40 [style=solid label="CHAR32_T"]
  1273 -> 41 [style=solid label="WCHAR_T"]
  1273 -> 42 [style=solid label="BOOL"]
  1273 -> 43 [style=solid label="SHORT"]
  1273 -> 44 [style=solid label="INT"]
  1273 -> 45 [style=solid label="LONG"]
  1273 -> 46 [style=solid label="SIGNED"]
  1273 -> 47 [style=solid label="UNSIGNED"]
  1273 -> 48 [style=solid label="FLOAT"]
  1273 -> 49 [style=solid label="DOUBLE"]
  1273 -> 50 [style=solid label="VOID"]
  1273 -> 523 [style=solid label="THROW"]
  1273 -> 55 [style=solid label="TYPENAME"]
  1273 -> 387 [style=solid label="SIZEOF"]
  1273 -> 388 [style=solid label="ALIGNOF"]
  1273 -> 524 [style=solid label="CO_YIELD"]
  1273 -> 389 [style=solid label="'0'"]
  1273 -> 390 [style=solid label="'1'"]
  1273 -> 391 [style=solid label="'2'"]
  1273 -> 392 [style=solid label="'3'"]
  1273 -> 393 [style=solid label="'4'"]
  1273 -> 394 [style=solid label="'5'"]
  1273 -> 395 [style=solid label="'6'"]
  1273 -> 396 [style=solid label="'7'"]
  1273 -> 397 [style=solid label="'8'"]
  1273 -> 398 [style=solid label="'9'"]
  1273 -> 205 [style=solid label="'u'"]
  1273 -> 206 [style=solid label="'U'"]
  1273 -> 207 [style=solid label="'L'"]
  1273 -> 208 [style=solid label="'R'"]
  1273 -> 399 [style=dashed label="additive-expression"]
  1273 -> 400 [style=dashed label="and-expression"]
  1273 -> 1134 [style=dashed label="assignment-expression"]
  1273 -> 401 [style=dashed label="await-expression"]
  1273 -> 402 [style=dashed label="binary-literal"]
  1273 -> 403 [style=dashed label="boolean-literal"]
  1273 -> 1135 [style=dashed label="braced-init-list"]
  1273 -> 404 [style=dashed label="cast-expression"]
  1273 -> 405 [style=dashed label="character-literal"]
  1273 -> 65 [style=dashed label="class-name"]
  1273 -> 406 [style=dashed label="compare-expression"]
  1273 -> 67 [style=dashed label="concept-name"]
  1273 -> 526 [style=dashed label="conditional-expression"]
  1273 -> 68 [style=dashed label="conversion-function-id"]
  1273 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1273 -> 410 [style=dashed label="decimal-literal"]
  1273 -> 76 [style=dashed label="decltype-specifier"]
  1273 -> 411 [style=dashed label="delete-expression"]
  1273 -> 412 [style=dashed label="digit"]
  1273 -> 413 [style=dashed label="digit-sequence"]
  1273 -> 414 [style=dashed label="encoding-prefix"]
  1273 -> 84 [style=dashed label="enum-name"]
  1273 -> 415 [style=dashed label="equality-expression"]
  1273 -> 416 [style=dashed label="exclusive-or-expression"]
  1273 -> 417 [style=dashed label="floating-point-literal"]
  1273 -> 418 [style=dashed label="fold-expression"]
  1273 -> 419 [style=dashed label="fractional-constant"]
  1273 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1273 -> 421 [style=dashed label="hexadecimal-literal"]
  1273 -> 422 [style=dashed label="hexadecimal-prefix"]
  1273 -> 423 [style=dashed label="id-expression"]
  1273 -> 424 [style=dashed label="inclusive-or-expression"]
  1273 -> 1136 [style=dashed label="initializer-clause"]
  1273 -> 425 [style=dashed label="integer-literal"]
  1273 -> 426 [style=dashed label="lambda-expression"]
  1273 -> 427 [style=dashed label="lambda-introducer"]
  1273 -> 428 [style=dashed label="literal"]
  1273 -> 95 [style=dashed label="literal-operator-id"]
  1273 -> 429 [style=dashed label="logical-and-expression"]
  1273 -> 528 [style=dashed label="logical-or-expression"]
  1273 -> 431 [style=dashed label="multiplicative-expression"]
  1273 -> 99 [style=dashed label="namespace-alias"]
  1273 -> 102 [style=dashed label="namespace-name"]
  1273 -> 432 [style=dashed label="nested-name-specifier"]
  1273 -> 433 [style=dashed label="new-expression"]
  1273 -> 434 [style=dashed label="noexcept-expression"]
  1273 -> 435 [style=dashed label="nonzero-digit"]
  1273 -> 436 [style=dashed label="octal-literal"]
  1273 -> 108 [style=dashed label="operator-function-id"]
  1273 -> 109 [style=dashed label="placeholder-type-specifier"]
  1273 -> 437 [style=dashed label="pm-expression"]
  1273 -> 438 [style=dashed label="pointer-literal"]
  1273 -> 439 [style=dashed label="postfix-expression"]
  1273 -> 440 [style=dashed label="primary-expression"]
  1273 -> 112 [style=dashed label="qualified-id"]
  1273 -> 441 [style=dashed label="relational-expression"]
  1273 -> 442 [style=dashed label="requires-expression"]
  1273 -> 443 [style=dashed label="shift-expression"]
  1273 -> 114 [style=dashed label="simple-template-id"]
  1273 -> 529 [style=dashed label="simple-type-specifier"]
  1273 -> 445 [style=dashed label="string-literal"]
  1273 -> 120 [style=dashed label="template-id"]
  1273 -> 215 [style=dashed label="template-name"]
  1273 -> 530 [style=dashed label="throw-expression"]
  1273 -> 123 [style=dashed label="type-constraint"]
  1273 -> 124 [style=dashed label="type-name"]
  1273 -> 126 [style=dashed label="typedef-name"]
  1273 -> 531 [style=dashed label="typename-specifier"]
  1273 -> 449 [style=dashed label="unary-expression"]
  1273 -> 450 [style=dashed label="unary-operator"]
  1273 -> 129 [style=dashed label="unqualified-id"]
  1273 -> 451 [style=dashed label="user-defined-character-literal"]
  1273 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1273 -> 453 [style=dashed label="user-defined-integer-literal"]
  1273 -> 454 [style=dashed label="user-defined-literal"]
  1273 -> 455 [style=dashed label="user-defined-string-literal"]
  1273 -> 532 [style=dashed label="yield-expression"]
  1274 [label="State 1274\n\l958 simple-capture: IDENTIFIER ELLIPSIS •\l"]
  1274 -> "1274R958" [style=solid]
 "1274R958" [label="R958", fillcolor=3, shape=diamond, style=filled]
  1275 [label="State 1275\n\l466 init-capture: IDENTIFIER initializer •\l"]
  1275 -> "1275R466" [style=solid]
 "1275R466" [label="R466", fillcolor=3, shape=diamond, style=filled]
  1276 [label="State 1276\n\l465 init-capture: ELLIPSIS IDENTIFIER • initializer\l"]
  1276 -> 1273 [style=solid label="EQ"]
  1276 -> 643 [style=solid label="OPEN_PAREN"]
  1276 -> 935 [style=solid label="OPEN_BRACE"]
  1276 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1276 -> 646 [style=dashed label="braced-init-list"]
  1276 -> 1594 [style=dashed label="initializer"]
  1277 [label="State 1277\n\l467 init-capture: AND IDENTIFIER • initializer\l959 simple-capture: AND IDENTIFIER •\l960               | AND IDENTIFIER • ELLIPSIS\l"]
  1277 -> 1273 [style=solid label="EQ"]
  1277 -> 643 [style=solid label="OPEN_PAREN"]
  1277 -> 1595 [style=solid label="ELLIPSIS"]
  1277 -> 935 [style=solid label="OPEN_BRACE"]
  1277 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1277 -> 646 [style=dashed label="braced-init-list"]
  1277 -> 1596 [style=dashed label="initializer"]
  1277 -> "1277R959" [style=solid]
 "1277R959" [label="R959", fillcolor=3, shape=diamond, style=filled]
  1278 [label="State 1278\n\l468 init-capture: AND ELLIPSIS • IDENTIFIER initializer\l"]
  1278 -> 1597 [style=solid label="IDENTIFIER"]
  1279 [label="State 1279\n\l962 simple-capture: MULT THIS •\l"]
  1279 -> "1279R962" [style=solid]
 "1279R962" [label="R962", fillcolor=3, shape=diamond, style=filled]
  1280 [label="State 1280\n\l527 lambda-capture: capture-default COMMA • capture-list\l"]
  1280 -> 762 [style=solid label="IDENTIFIER"]
  1280 -> 764 [style=solid label="ELLIPSIS"]
  1280 -> 1598 [style=solid label="AND"]
  1280 -> 767 [style=solid label="MULT"]
  1280 -> 768 [style=solid label="THIS"]
  1280 -> 769 [style=dashed label="capture"]
  1280 -> 1599 [style=dashed label="capture-list"]
  1280 -> 772 [style=dashed label="init-capture"]
  1280 -> 774 [style=dashed label="simple-capture"]
  1281 [label="State 1281\n\l123 capture-list: capture-list COMMA • capture\l"]
  1281 -> 762 [style=solid label="IDENTIFIER"]
  1281 -> 764 [style=solid label="ELLIPSIS"]
  1281 -> 1598 [style=solid label="AND"]
  1281 -> 767 [style=solid label="MULT"]
  1281 -> 768 [style=solid label="THIS"]
  1281 -> 1600 [style=dashed label="capture"]
  1281 -> 772 [style=dashed label="init-capture"]
  1281 -> 774 [style=dashed label="simple-capture"]
  1282 [label="State 1282\n\l535 lambda-introducer: OPEN_SQUARE lambda-capture CLOSE_SQUARE •\l"]
  1282 -> "1282R535" [style=solid]
 "1282R535" [label="R535", fillcolor=3, shape=diamond, style=filled]
  1283 [label="State 1283\n\l127 character-literal: SINGLE_QUOTE c-char-sequence SINGLE_QUOTE •\l"]
  1283 -> "1283R127" [style=solid]
 "1283R127" [label="R127", fillcolor=3, shape=diamond, style=filled]
  1284 [label="State 1284\n\l117 c-char-sequence: c-char-sequence c-char •\l"]
  1284 -> "1284R117" [style=solid]
 "1284R117" [label="R117", fillcolor=3, shape=diamond, style=filled]
  1285 [label="State 1285\n\l335 expression: expression • COMMA assignment-expression\l692 noexcept-expression: NOEXCEPT OPEN_PAREN expression • CLOSE_PAREN\l"]
  1285 -> 1601 [style=solid label="CLOSE_PAREN"]
  1285 -> 1029 [style=solid label="COMMA"]
  1286 [label="State 1286\n\l244 delete-expression: DELETE OPEN_SQUARE CLOSE_SQUARE • cast-expression\l534 lambda-introducer: OPEN_SQUARE CLOSE_SQUARE •\l"]
  1286 -> 356 [style=solid label="PLUS"]
  1286 -> 357 [style=solid label="MINUS"]
  1286 -> 2 [style=solid label="IDENTIFIER"]
  1286 -> 358 [style=solid label="OPEN_PAREN"]
  1286 -> 359 [style=solid label="AND"]
  1286 -> 360 [style=solid label="SCOPE"]
  1286 -> 361 [style=solid label="OPEN_SQUARE"]
  1286 -> 362 [style=solid label="CO_AWAIT"]
  1286 -> 363 [style=solid label="ZERO_LB"]
  1286 -> 364 [style=solid label="ZERO_HB"]
  1286 -> 365 [style=solid label="SINGLE_QUOTE"]
  1286 -> 366 [style=solid label="FALSE"]
  1286 -> 367 [style=solid label="TRUE"]
  1286 -> 368 [style=solid label="NOEXCEPT"]
  1286 -> 17 [style=solid label="OPERATOR"]
  1286 -> 26 [style=solid label="DECLTYPE"]
  1286 -> 369 [style=solid label="DELETE"]
  1286 -> 370 [style=solid label="DOT"]
  1286 -> 184 [style=solid label="UNICODE_8"]
  1286 -> 371 [style=solid label="MULT"]
  1286 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1286 -> 372 [style=solid label="ZERO_LX"]
  1286 -> 373 [style=solid label="ZERO_HX"]
  1286 -> 374 [style=solid label="REQUIRES"]
  1286 -> 375 [style=solid label="NEW"]
  1286 -> 376 [style=solid label="COMPL"]
  1286 -> 377 [style=solid label="NOT"]
  1286 -> 378 [style=solid label="PLUS_PLUS"]
  1286 -> 379 [style=solid label="MINUS_MINUS"]
  1286 -> 380 [style=solid label="THIS"]
  1286 -> 36 [style=solid label="AUTO"]
  1286 -> 381 [style=solid label="NULLPTR"]
  1286 -> 382 [style=solid label="DYNAMIC_CAST"]
  1286 -> 383 [style=solid label="STATIC_CAST"]
  1286 -> 384 [style=solid label="REINTERPRET_CAST"]
  1286 -> 385 [style=solid label="CONST_CAST"]
  1286 -> 386 [style=solid label="TYPEID"]
  1286 -> 37 [style=solid label="CHAR"]
  1286 -> 38 [style=solid label="CHAR8_T"]
  1286 -> 39 [style=solid label="CHAR16_T"]
  1286 -> 40 [style=solid label="CHAR32_T"]
  1286 -> 41 [style=solid label="WCHAR_T"]
  1286 -> 42 [style=solid label="BOOL"]
  1286 -> 43 [style=solid label="SHORT"]
  1286 -> 44 [style=solid label="INT"]
  1286 -> 45 [style=solid label="LONG"]
  1286 -> 46 [style=solid label="SIGNED"]
  1286 -> 47 [style=solid label="UNSIGNED"]
  1286 -> 48 [style=solid label="FLOAT"]
  1286 -> 49 [style=solid label="DOUBLE"]
  1286 -> 50 [style=solid label="VOID"]
  1286 -> 55 [style=solid label="TYPENAME"]
  1286 -> 387 [style=solid label="SIZEOF"]
  1286 -> 388 [style=solid label="ALIGNOF"]
  1286 -> 389 [style=solid label="'0'"]
  1286 -> 390 [style=solid label="'1'"]
  1286 -> 391 [style=solid label="'2'"]
  1286 -> 392 [style=solid label="'3'"]
  1286 -> 393 [style=solid label="'4'"]
  1286 -> 394 [style=solid label="'5'"]
  1286 -> 395 [style=solid label="'6'"]
  1286 -> 396 [style=solid label="'7'"]
  1286 -> 397 [style=solid label="'8'"]
  1286 -> 398 [style=solid label="'9'"]
  1286 -> 205 [style=solid label="'u'"]
  1286 -> 206 [style=solid label="'U'"]
  1286 -> 207 [style=solid label="'L'"]
  1286 -> 208 [style=solid label="'R'"]
  1286 -> 401 [style=dashed label="await-expression"]
  1286 -> 402 [style=dashed label="binary-literal"]
  1286 -> 403 [style=dashed label="boolean-literal"]
  1286 -> 1602 [style=dashed label="cast-expression"]
  1286 -> 405 [style=dashed label="character-literal"]
  1286 -> 65 [style=dashed label="class-name"]
  1286 -> 67 [style=dashed label="concept-name"]
  1286 -> 68 [style=dashed label="conversion-function-id"]
  1286 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1286 -> 410 [style=dashed label="decimal-literal"]
  1286 -> 76 [style=dashed label="decltype-specifier"]
  1286 -> 411 [style=dashed label="delete-expression"]
  1286 -> 412 [style=dashed label="digit"]
  1286 -> 413 [style=dashed label="digit-sequence"]
  1286 -> 414 [style=dashed label="encoding-prefix"]
  1286 -> 84 [style=dashed label="enum-name"]
  1286 -> 417 [style=dashed label="floating-point-literal"]
  1286 -> 418 [style=dashed label="fold-expression"]
  1286 -> 419 [style=dashed label="fractional-constant"]
  1286 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1286 -> 421 [style=dashed label="hexadecimal-literal"]
  1286 -> 422 [style=dashed label="hexadecimal-prefix"]
  1286 -> 423 [style=dashed label="id-expression"]
  1286 -> 425 [style=dashed label="integer-literal"]
  1286 -> 426 [style=dashed label="lambda-expression"]
  1286 -> 427 [style=dashed label="lambda-introducer"]
  1286 -> 428 [style=dashed label="literal"]
  1286 -> 95 [style=dashed label="literal-operator-id"]
  1286 -> 99 [style=dashed label="namespace-alias"]
  1286 -> 102 [style=dashed label="namespace-name"]
  1286 -> 432 [style=dashed label="nested-name-specifier"]
  1286 -> 433 [style=dashed label="new-expression"]
  1286 -> 434 [style=dashed label="noexcept-expression"]
  1286 -> 435 [style=dashed label="nonzero-digit"]
  1286 -> 436 [style=dashed label="octal-literal"]
  1286 -> 108 [style=dashed label="operator-function-id"]
  1286 -> 109 [style=dashed label="placeholder-type-specifier"]
  1286 -> 438 [style=dashed label="pointer-literal"]
  1286 -> 439 [style=dashed label="postfix-expression"]
  1286 -> 440 [style=dashed label="primary-expression"]
  1286 -> 112 [style=dashed label="qualified-id"]
  1286 -> 442 [style=dashed label="requires-expression"]
  1286 -> 114 [style=dashed label="simple-template-id"]
  1286 -> 529 [style=dashed label="simple-type-specifier"]
  1286 -> 445 [style=dashed label="string-literal"]
  1286 -> 120 [style=dashed label="template-id"]
  1286 -> 215 [style=dashed label="template-name"]
  1286 -> 123 [style=dashed label="type-constraint"]
  1286 -> 124 [style=dashed label="type-name"]
  1286 -> 126 [style=dashed label="typedef-name"]
  1286 -> 531 [style=dashed label="typename-specifier"]
  1286 -> 449 [style=dashed label="unary-expression"]
  1286 -> 450 [style=dashed label="unary-operator"]
  1286 -> 129 [style=dashed label="unqualified-id"]
  1286 -> 451 [style=dashed label="user-defined-character-literal"]
  1286 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1286 -> 453 [style=dashed label="user-defined-integer-literal"]
  1286 -> 454 [style=dashed label="user-defined-literal"]
  1286 -> 455 [style=dashed label="user-defined-string-literal"]
  1286 -> "1286R534d" [label="[IDENTIFIER, OPEN_PAREN, SCOPE, OPEN_SQUARE, NOEXCEPT, DECLTYPE, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPENAME]", style=solid]
 "1286R534d" [label="R534", fillcolor=5, shape=diamond, style=filled]
  1286 -> "1286R534" [style=solid]
 "1286R534" [label="R534", fillcolor=3, shape=diamond, style=filled]
  1287 [label="State 1287\n\l926 requirement-parameter-list: OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN\l"]
  1287 -> 1603 [style=solid label="CLOSE_PAREN"]
  1288 [label="State 1288\n\l156 compound-requirement: OPEN_BRACE • expression CLOSE_BRACE SEMICOLON\l157                     | OPEN_BRACE • expression CLOSE_BRACE NOEXCEPT SEMICOLON\l158                     | OPEN_BRACE • expression CLOSE_BRACE return-type-requirement SEMICOLON\l159                     | OPEN_BRACE • expression CLOSE_BRACE NOEXCEPT return-type-requirement SEMICOLON\l"]
  1288 -> 356 [style=solid label="PLUS"]
  1288 -> 357 [style=solid label="MINUS"]
  1288 -> 2 [style=solid label="IDENTIFIER"]
  1288 -> 358 [style=solid label="OPEN_PAREN"]
  1288 -> 359 [style=solid label="AND"]
  1288 -> 360 [style=solid label="SCOPE"]
  1288 -> 361 [style=solid label="OPEN_SQUARE"]
  1288 -> 362 [style=solid label="CO_AWAIT"]
  1288 -> 363 [style=solid label="ZERO_LB"]
  1288 -> 364 [style=solid label="ZERO_HB"]
  1288 -> 365 [style=solid label="SINGLE_QUOTE"]
  1288 -> 366 [style=solid label="FALSE"]
  1288 -> 367 [style=solid label="TRUE"]
  1288 -> 368 [style=solid label="NOEXCEPT"]
  1288 -> 17 [style=solid label="OPERATOR"]
  1288 -> 26 [style=solid label="DECLTYPE"]
  1288 -> 369 [style=solid label="DELETE"]
  1288 -> 370 [style=solid label="DOT"]
  1288 -> 184 [style=solid label="UNICODE_8"]
  1288 -> 371 [style=solid label="MULT"]
  1288 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1288 -> 372 [style=solid label="ZERO_LX"]
  1288 -> 373 [style=solid label="ZERO_HX"]
  1288 -> 374 [style=solid label="REQUIRES"]
  1288 -> 375 [style=solid label="NEW"]
  1288 -> 376 [style=solid label="COMPL"]
  1288 -> 377 [style=solid label="NOT"]
  1288 -> 378 [style=solid label="PLUS_PLUS"]
  1288 -> 379 [style=solid label="MINUS_MINUS"]
  1288 -> 380 [style=solid label="THIS"]
  1288 -> 36 [style=solid label="AUTO"]
  1288 -> 381 [style=solid label="NULLPTR"]
  1288 -> 382 [style=solid label="DYNAMIC_CAST"]
  1288 -> 383 [style=solid label="STATIC_CAST"]
  1288 -> 384 [style=solid label="REINTERPRET_CAST"]
  1288 -> 385 [style=solid label="CONST_CAST"]
  1288 -> 386 [style=solid label="TYPEID"]
  1288 -> 37 [style=solid label="CHAR"]
  1288 -> 38 [style=solid label="CHAR8_T"]
  1288 -> 39 [style=solid label="CHAR16_T"]
  1288 -> 40 [style=solid label="CHAR32_T"]
  1288 -> 41 [style=solid label="WCHAR_T"]
  1288 -> 42 [style=solid label="BOOL"]
  1288 -> 43 [style=solid label="SHORT"]
  1288 -> 44 [style=solid label="INT"]
  1288 -> 45 [style=solid label="LONG"]
  1288 -> 46 [style=solid label="SIGNED"]
  1288 -> 47 [style=solid label="UNSIGNED"]
  1288 -> 48 [style=solid label="FLOAT"]
  1288 -> 49 [style=solid label="DOUBLE"]
  1288 -> 50 [style=solid label="VOID"]
  1288 -> 523 [style=solid label="THROW"]
  1288 -> 55 [style=solid label="TYPENAME"]
  1288 -> 387 [style=solid label="SIZEOF"]
  1288 -> 388 [style=solid label="ALIGNOF"]
  1288 -> 524 [style=solid label="CO_YIELD"]
  1288 -> 389 [style=solid label="'0'"]
  1288 -> 390 [style=solid label="'1'"]
  1288 -> 391 [style=solid label="'2'"]
  1288 -> 392 [style=solid label="'3'"]
  1288 -> 393 [style=solid label="'4'"]
  1288 -> 394 [style=solid label="'5'"]
  1288 -> 395 [style=solid label="'6'"]
  1288 -> 396 [style=solid label="'7'"]
  1288 -> 397 [style=solid label="'8'"]
  1288 -> 398 [style=solid label="'9'"]
  1288 -> 205 [style=solid label="'u'"]
  1288 -> 206 [style=solid label="'U'"]
  1288 -> 207 [style=solid label="'L'"]
  1288 -> 208 [style=solid label="'R'"]
  1288 -> 399 [style=dashed label="additive-expression"]
  1288 -> 400 [style=dashed label="and-expression"]
  1288 -> 525 [style=dashed label="assignment-expression"]
  1288 -> 401 [style=dashed label="await-expression"]
  1288 -> 402 [style=dashed label="binary-literal"]
  1288 -> 403 [style=dashed label="boolean-literal"]
  1288 -> 404 [style=dashed label="cast-expression"]
  1288 -> 405 [style=dashed label="character-literal"]
  1288 -> 65 [style=dashed label="class-name"]
  1288 -> 406 [style=dashed label="compare-expression"]
  1288 -> 67 [style=dashed label="concept-name"]
  1288 -> 526 [style=dashed label="conditional-expression"]
  1288 -> 68 [style=dashed label="conversion-function-id"]
  1288 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1288 -> 410 [style=dashed label="decimal-literal"]
  1288 -> 76 [style=dashed label="decltype-specifier"]
  1288 -> 411 [style=dashed label="delete-expression"]
  1288 -> 412 [style=dashed label="digit"]
  1288 -> 413 [style=dashed label="digit-sequence"]
  1288 -> 414 [style=dashed label="encoding-prefix"]
  1288 -> 84 [style=dashed label="enum-name"]
  1288 -> 415 [style=dashed label="equality-expression"]
  1288 -> 416 [style=dashed label="exclusive-or-expression"]
  1288 -> 1604 [style=dashed label="expression"]
  1288 -> 417 [style=dashed label="floating-point-literal"]
  1288 -> 418 [style=dashed label="fold-expression"]
  1288 -> 419 [style=dashed label="fractional-constant"]
  1288 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1288 -> 421 [style=dashed label="hexadecimal-literal"]
  1288 -> 422 [style=dashed label="hexadecimal-prefix"]
  1288 -> 423 [style=dashed label="id-expression"]
  1288 -> 424 [style=dashed label="inclusive-or-expression"]
  1288 -> 425 [style=dashed label="integer-literal"]
  1288 -> 426 [style=dashed label="lambda-expression"]
  1288 -> 427 [style=dashed label="lambda-introducer"]
  1288 -> 428 [style=dashed label="literal"]
  1288 -> 95 [style=dashed label="literal-operator-id"]
  1288 -> 429 [style=dashed label="logical-and-expression"]
  1288 -> 528 [style=dashed label="logical-or-expression"]
  1288 -> 431 [style=dashed label="multiplicative-expression"]
  1288 -> 99 [style=dashed label="namespace-alias"]
  1288 -> 102 [style=dashed label="namespace-name"]
  1288 -> 432 [style=dashed label="nested-name-specifier"]
  1288 -> 433 [style=dashed label="new-expression"]
  1288 -> 434 [style=dashed label="noexcept-expression"]
  1288 -> 435 [style=dashed label="nonzero-digit"]
  1288 -> 436 [style=dashed label="octal-literal"]
  1288 -> 108 [style=dashed label="operator-function-id"]
  1288 -> 109 [style=dashed label="placeholder-type-specifier"]
  1288 -> 437 [style=dashed label="pm-expression"]
  1288 -> 438 [style=dashed label="pointer-literal"]
  1288 -> 439 [style=dashed label="postfix-expression"]
  1288 -> 440 [style=dashed label="primary-expression"]
  1288 -> 112 [style=dashed label="qualified-id"]
  1288 -> 441 [style=dashed label="relational-expression"]
  1288 -> 442 [style=dashed label="requires-expression"]
  1288 -> 443 [style=dashed label="shift-expression"]
  1288 -> 114 [style=dashed label="simple-template-id"]
  1288 -> 529 [style=dashed label="simple-type-specifier"]
  1288 -> 445 [style=dashed label="string-literal"]
  1288 -> 120 [style=dashed label="template-id"]
  1288 -> 215 [style=dashed label="template-name"]
  1288 -> 530 [style=dashed label="throw-expression"]
  1288 -> 123 [style=dashed label="type-constraint"]
  1288 -> 124 [style=dashed label="type-name"]
  1288 -> 126 [style=dashed label="typedef-name"]
  1288 -> 531 [style=dashed label="typename-specifier"]
  1288 -> 449 [style=dashed label="unary-expression"]
  1288 -> 450 [style=dashed label="unary-operator"]
  1288 -> 129 [style=dashed label="unqualified-id"]
  1288 -> 451 [style=dashed label="user-defined-character-literal"]
  1288 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1288 -> 453 [style=dashed label="user-defined-integer-literal"]
  1288 -> 454 [style=dashed label="user-defined-literal"]
  1288 -> 455 [style=dashed label="user-defined-string-literal"]
  1288 -> 532 [style=dashed label="yield-expression"]
  1289 [label="State 1289\n\l664 nested-requirement: REQUIRES • constraint-expression SEMICOLON\l930 requires-expression: REQUIRES • requirement-body\l931                    | REQUIRES • requirement-parameter-list requirement-body\l"]
  1289 -> 356 [style=solid label="PLUS"]
  1289 -> 357 [style=solid label="MINUS"]
  1289 -> 2 [style=solid label="IDENTIFIER"]
  1289 -> 1605 [style=solid label="OPEN_PAREN"]
  1289 -> 359 [style=solid label="AND"]
  1289 -> 360 [style=solid label="SCOPE"]
  1289 -> 361 [style=solid label="OPEN_SQUARE"]
  1289 -> 362 [style=solid label="CO_AWAIT"]
  1289 -> 801 [style=solid label="OPEN_BRACE"]
  1289 -> 363 [style=solid label="ZERO_LB"]
  1289 -> 364 [style=solid label="ZERO_HB"]
  1289 -> 365 [style=solid label="SINGLE_QUOTE"]
  1289 -> 366 [style=solid label="FALSE"]
  1289 -> 367 [style=solid label="TRUE"]
  1289 -> 368 [style=solid label="NOEXCEPT"]
  1289 -> 17 [style=solid label="OPERATOR"]
  1289 -> 26 [style=solid label="DECLTYPE"]
  1289 -> 369 [style=solid label="DELETE"]
  1289 -> 370 [style=solid label="DOT"]
  1289 -> 184 [style=solid label="UNICODE_8"]
  1289 -> 371 [style=solid label="MULT"]
  1289 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1289 -> 372 [style=solid label="ZERO_LX"]
  1289 -> 373 [style=solid label="ZERO_HX"]
  1289 -> 374 [style=solid label="REQUIRES"]
  1289 -> 375 [style=solid label="NEW"]
  1289 -> 376 [style=solid label="COMPL"]
  1289 -> 377 [style=solid label="NOT"]
  1289 -> 378 [style=solid label="PLUS_PLUS"]
  1289 -> 379 [style=solid label="MINUS_MINUS"]
  1289 -> 380 [style=solid label="THIS"]
  1289 -> 36 [style=solid label="AUTO"]
  1289 -> 381 [style=solid label="NULLPTR"]
  1289 -> 382 [style=solid label="DYNAMIC_CAST"]
  1289 -> 383 [style=solid label="STATIC_CAST"]
  1289 -> 384 [style=solid label="REINTERPRET_CAST"]
  1289 -> 385 [style=solid label="CONST_CAST"]
  1289 -> 386 [style=solid label="TYPEID"]
  1289 -> 37 [style=solid label="CHAR"]
  1289 -> 38 [style=solid label="CHAR8_T"]
  1289 -> 39 [style=solid label="CHAR16_T"]
  1289 -> 40 [style=solid label="CHAR32_T"]
  1289 -> 41 [style=solid label="WCHAR_T"]
  1289 -> 42 [style=solid label="BOOL"]
  1289 -> 43 [style=solid label="SHORT"]
  1289 -> 44 [style=solid label="INT"]
  1289 -> 45 [style=solid label="LONG"]
  1289 -> 46 [style=solid label="SIGNED"]
  1289 -> 47 [style=solid label="UNSIGNED"]
  1289 -> 48 [style=solid label="FLOAT"]
  1289 -> 49 [style=solid label="DOUBLE"]
  1289 -> 50 [style=solid label="VOID"]
  1289 -> 55 [style=solid label="TYPENAME"]
  1289 -> 387 [style=solid label="SIZEOF"]
  1289 -> 388 [style=solid label="ALIGNOF"]
  1289 -> 389 [style=solid label="'0'"]
  1289 -> 390 [style=solid label="'1'"]
  1289 -> 391 [style=solid label="'2'"]
  1289 -> 392 [style=solid label="'3'"]
  1289 -> 393 [style=solid label="'4'"]
  1289 -> 394 [style=solid label="'5'"]
  1289 -> 395 [style=solid label="'6'"]
  1289 -> 396 [style=solid label="'7'"]
  1289 -> 397 [style=solid label="'8'"]
  1289 -> 398 [style=solid label="'9'"]
  1289 -> 205 [style=solid label="'u'"]
  1289 -> 206 [style=solid label="'U'"]
  1289 -> 207 [style=solid label="'L'"]
  1289 -> 208 [style=solid label="'R'"]
  1289 -> 399 [style=dashed label="additive-expression"]
  1289 -> 400 [style=dashed label="and-expression"]
  1289 -> 401 [style=dashed label="await-expression"]
  1289 -> 402 [style=dashed label="binary-literal"]
  1289 -> 403 [style=dashed label="boolean-literal"]
  1289 -> 404 [style=dashed label="cast-expression"]
  1289 -> 405 [style=dashed label="character-literal"]
  1289 -> 65 [style=dashed label="class-name"]
  1289 -> 406 [style=dashed label="compare-expression"]
  1289 -> 67 [style=dashed label="concept-name"]
  1289 -> 1606 [style=dashed label="constraint-expression"]
  1289 -> 68 [style=dashed label="conversion-function-id"]
  1289 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1289 -> 410 [style=dashed label="decimal-literal"]
  1289 -> 76 [style=dashed label="decltype-specifier"]
  1289 -> 411 [style=dashed label="delete-expression"]
  1289 -> 412 [style=dashed label="digit"]
  1289 -> 413 [style=dashed label="digit-sequence"]
  1289 -> 414 [style=dashed label="encoding-prefix"]
  1289 -> 84 [style=dashed label="enum-name"]
  1289 -> 415 [style=dashed label="equality-expression"]
  1289 -> 416 [style=dashed label="exclusive-or-expression"]
  1289 -> 417 [style=dashed label="floating-point-literal"]
  1289 -> 418 [style=dashed label="fold-expression"]
  1289 -> 419 [style=dashed label="fractional-constant"]
  1289 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1289 -> 421 [style=dashed label="hexadecimal-literal"]
  1289 -> 422 [style=dashed label="hexadecimal-prefix"]
  1289 -> 423 [style=dashed label="id-expression"]
  1289 -> 424 [style=dashed label="inclusive-or-expression"]
  1289 -> 425 [style=dashed label="integer-literal"]
  1289 -> 426 [style=dashed label="lambda-expression"]
  1289 -> 427 [style=dashed label="lambda-introducer"]
  1289 -> 428 [style=dashed label="literal"]
  1289 -> 95 [style=dashed label="literal-operator-id"]
  1289 -> 429 [style=dashed label="logical-and-expression"]
  1289 -> 1582 [style=dashed label="logical-or-expression"]
  1289 -> 431 [style=dashed label="multiplicative-expression"]
  1289 -> 99 [style=dashed label="namespace-alias"]
  1289 -> 102 [style=dashed label="namespace-name"]
  1289 -> 432 [style=dashed label="nested-name-specifier"]
  1289 -> 433 [style=dashed label="new-expression"]
  1289 -> 434 [style=dashed label="noexcept-expression"]
  1289 -> 435 [style=dashed label="nonzero-digit"]
  1289 -> 436 [style=dashed label="octal-literal"]
  1289 -> 108 [style=dashed label="operator-function-id"]
  1289 -> 109 [style=dashed label="placeholder-type-specifier"]
  1289 -> 437 [style=dashed label="pm-expression"]
  1289 -> 438 [style=dashed label="pointer-literal"]
  1289 -> 439 [style=dashed label="postfix-expression"]
  1289 -> 440 [style=dashed label="primary-expression"]
  1289 -> 112 [style=dashed label="qualified-id"]
  1289 -> 441 [style=dashed label="relational-expression"]
  1289 -> 802 [style=dashed label="requirement-body"]
  1289 -> 803 [style=dashed label="requirement-parameter-list"]
  1289 -> 442 [style=dashed label="requires-expression"]
  1289 -> 443 [style=dashed label="shift-expression"]
  1289 -> 114 [style=dashed label="simple-template-id"]
  1289 -> 529 [style=dashed label="simple-type-specifier"]
  1289 -> 445 [style=dashed label="string-literal"]
  1289 -> 120 [style=dashed label="template-id"]
  1289 -> 215 [style=dashed label="template-name"]
  1289 -> 123 [style=dashed label="type-constraint"]
  1289 -> 124 [style=dashed label="type-name"]
  1289 -> 126 [style=dashed label="typedef-name"]
  1289 -> 531 [style=dashed label="typename-specifier"]
  1289 -> 449 [style=dashed label="unary-expression"]
  1289 -> 450 [style=dashed label="unary-operator"]
  1289 -> 129 [style=dashed label="unqualified-id"]
  1289 -> 451 [style=dashed label="user-defined-character-literal"]
  1289 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1289 -> 453 [style=dashed label="user-defined-integer-literal"]
  1289 -> 454 [style=dashed label="user-defined-literal"]
  1289 -> 455 [style=dashed label="user-defined-string-literal"]
  1290 [label="State 1290\n\l1101 type-requirement: TYPENAME • type-name SEMICOLON\l1102                 | TYPENAME • nested-name-specifier type-name SEMICOLON\l1112 typename-specifier: TYPENAME • nested-name-specifier IDENTIFIER\l1113                   | TYPENAME • nested-name-specifier simple-template-id\l1114                   | TYPENAME • nested-name-specifier TEMPLATE simple-template-id\l"]
  1290 -> 253 [style=solid label="IDENTIFIER"]
  1290 -> 9 [style=solid label="SCOPE"]
  1290 -> 134 [style=solid label="DECLTYPE"]
  1290 -> 65 [style=dashed label="class-name"]
  1290 -> 138 [style=dashed label="decltype-specifier"]
  1290 -> 84 [style=dashed label="enum-name"]
  1290 -> 99 [style=dashed label="namespace-alias"]
  1290 -> 102 [style=dashed label="namespace-name"]
  1290 -> 1607 [style=dashed label="nested-name-specifier"]
  1290 -> 141 [style=dashed label="simple-template-id"]
  1290 -> 142 [style=dashed label="template-name"]
  1290 -> 1608 [style=dashed label="type-name"]
  1290 -> 126 [style=dashed label="typedef-name"]
  1291 [label="State 1291\n\l923 requirement: compound-requirement •\l"]
  1291 -> "1291R923" [style=solid]
 "1291R923" [label="R923", fillcolor=3, shape=diamond, style=filled]
  1292 [label="State 1292\n\l335 expression: expression • COMMA assignment-expression\l982 simple-requirement: expression • SEMICOLON\l"]
  1292 -> 1609 [style=solid label="SEMICOLON"]
  1292 -> 1029 [style=solid label="COMMA"]
  1293 [label="State 1293\n\l924 requirement: nested-requirement •\l"]
  1293 -> "1293R924" [style=solid]
 "1293R924" [label="R924", fillcolor=3, shape=diamond, style=filled]
  1294 [label="State 1294\n\l927 requirement-seq: requirement •\l"]
  1294 -> "1294R927" [style=solid]
 "1294R927" [label="R927", fillcolor=3, shape=diamond, style=filled]
  1295 [label="State 1295\n\l925 requirement-body: OPEN_BRACE requirement-seq • CLOSE_BRACE\l928 requirement-seq: requirement-seq • requirement\l"]
  1295 -> 356 [style=solid label="PLUS"]
  1295 -> 357 [style=solid label="MINUS"]
  1295 -> 2 [style=solid label="IDENTIFIER"]
  1295 -> 358 [style=solid label="OPEN_PAREN"]
  1295 -> 359 [style=solid label="AND"]
  1295 -> 360 [style=solid label="SCOPE"]
  1295 -> 361 [style=solid label="OPEN_SQUARE"]
  1295 -> 362 [style=solid label="CO_AWAIT"]
  1295 -> 1288 [style=solid label="OPEN_BRACE"]
  1295 -> 1610 [style=solid label="CLOSE_BRACE"]
  1295 -> 363 [style=solid label="ZERO_LB"]
  1295 -> 364 [style=solid label="ZERO_HB"]
  1295 -> 365 [style=solid label="SINGLE_QUOTE"]
  1295 -> 366 [style=solid label="FALSE"]
  1295 -> 367 [style=solid label="TRUE"]
  1295 -> 368 [style=solid label="NOEXCEPT"]
  1295 -> 17 [style=solid label="OPERATOR"]
  1295 -> 26 [style=solid label="DECLTYPE"]
  1295 -> 369 [style=solid label="DELETE"]
  1295 -> 370 [style=solid label="DOT"]
  1295 -> 184 [style=solid label="UNICODE_8"]
  1295 -> 371 [style=solid label="MULT"]
  1295 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1295 -> 372 [style=solid label="ZERO_LX"]
  1295 -> 373 [style=solid label="ZERO_HX"]
  1295 -> 1289 [style=solid label="REQUIRES"]
  1295 -> 375 [style=solid label="NEW"]
  1295 -> 376 [style=solid label="COMPL"]
  1295 -> 377 [style=solid label="NOT"]
  1295 -> 378 [style=solid label="PLUS_PLUS"]
  1295 -> 379 [style=solid label="MINUS_MINUS"]
  1295 -> 380 [style=solid label="THIS"]
  1295 -> 36 [style=solid label="AUTO"]
  1295 -> 381 [style=solid label="NULLPTR"]
  1295 -> 382 [style=solid label="DYNAMIC_CAST"]
  1295 -> 383 [style=solid label="STATIC_CAST"]
  1295 -> 384 [style=solid label="REINTERPRET_CAST"]
  1295 -> 385 [style=solid label="CONST_CAST"]
  1295 -> 386 [style=solid label="TYPEID"]
  1295 -> 37 [style=solid label="CHAR"]
  1295 -> 38 [style=solid label="CHAR8_T"]
  1295 -> 39 [style=solid label="CHAR16_T"]
  1295 -> 40 [style=solid label="CHAR32_T"]
  1295 -> 41 [style=solid label="WCHAR_T"]
  1295 -> 42 [style=solid label="BOOL"]
  1295 -> 43 [style=solid label="SHORT"]
  1295 -> 44 [style=solid label="INT"]
  1295 -> 45 [style=solid label="LONG"]
  1295 -> 46 [style=solid label="SIGNED"]
  1295 -> 47 [style=solid label="UNSIGNED"]
  1295 -> 48 [style=solid label="FLOAT"]
  1295 -> 49 [style=solid label="DOUBLE"]
  1295 -> 50 [style=solid label="VOID"]
  1295 -> 523 [style=solid label="THROW"]
  1295 -> 1290 [style=solid label="TYPENAME"]
  1295 -> 387 [style=solid label="SIZEOF"]
  1295 -> 388 [style=solid label="ALIGNOF"]
  1295 -> 524 [style=solid label="CO_YIELD"]
  1295 -> 389 [style=solid label="'0'"]
  1295 -> 390 [style=solid label="'1'"]
  1295 -> 391 [style=solid label="'2'"]
  1295 -> 392 [style=solid label="'3'"]
  1295 -> 393 [style=solid label="'4'"]
  1295 -> 394 [style=solid label="'5'"]
  1295 -> 395 [style=solid label="'6'"]
  1295 -> 396 [style=solid label="'7'"]
  1295 -> 397 [style=solid label="'8'"]
  1295 -> 398 [style=solid label="'9'"]
  1295 -> 205 [style=solid label="'u'"]
  1295 -> 206 [style=solid label="'U'"]
  1295 -> 207 [style=solid label="'L'"]
  1295 -> 208 [style=solid label="'R'"]
  1295 -> 399 [style=dashed label="additive-expression"]
  1295 -> 400 [style=dashed label="and-expression"]
  1295 -> 525 [style=dashed label="assignment-expression"]
  1295 -> 401 [style=dashed label="await-expression"]
  1295 -> 402 [style=dashed label="binary-literal"]
  1295 -> 403 [style=dashed label="boolean-literal"]
  1295 -> 404 [style=dashed label="cast-expression"]
  1295 -> 405 [style=dashed label="character-literal"]
  1295 -> 65 [style=dashed label="class-name"]
  1295 -> 406 [style=dashed label="compare-expression"]
  1295 -> 1291 [style=dashed label="compound-requirement"]
  1295 -> 67 [style=dashed label="concept-name"]
  1295 -> 526 [style=dashed label="conditional-expression"]
  1295 -> 68 [style=dashed label="conversion-function-id"]
  1295 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1295 -> 410 [style=dashed label="decimal-literal"]
  1295 -> 76 [style=dashed label="decltype-specifier"]
  1295 -> 411 [style=dashed label="delete-expression"]
  1295 -> 412 [style=dashed label="digit"]
  1295 -> 413 [style=dashed label="digit-sequence"]
  1295 -> 414 [style=dashed label="encoding-prefix"]
  1295 -> 84 [style=dashed label="enum-name"]
  1295 -> 415 [style=dashed label="equality-expression"]
  1295 -> 416 [style=dashed label="exclusive-or-expression"]
  1295 -> 1292 [style=dashed label="expression"]
  1295 -> 417 [style=dashed label="floating-point-literal"]
  1295 -> 418 [style=dashed label="fold-expression"]
  1295 -> 419 [style=dashed label="fractional-constant"]
  1295 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1295 -> 421 [style=dashed label="hexadecimal-literal"]
  1295 -> 422 [style=dashed label="hexadecimal-prefix"]
  1295 -> 423 [style=dashed label="id-expression"]
  1295 -> 424 [style=dashed label="inclusive-or-expression"]
  1295 -> 425 [style=dashed label="integer-literal"]
  1295 -> 426 [style=dashed label="lambda-expression"]
  1295 -> 427 [style=dashed label="lambda-introducer"]
  1295 -> 428 [style=dashed label="literal"]
  1295 -> 95 [style=dashed label="literal-operator-id"]
  1295 -> 429 [style=dashed label="logical-and-expression"]
  1295 -> 528 [style=dashed label="logical-or-expression"]
  1295 -> 431 [style=dashed label="multiplicative-expression"]
  1295 -> 99 [style=dashed label="namespace-alias"]
  1295 -> 102 [style=dashed label="namespace-name"]
  1295 -> 432 [style=dashed label="nested-name-specifier"]
  1295 -> 1293 [style=dashed label="nested-requirement"]
  1295 -> 433 [style=dashed label="new-expression"]
  1295 -> 434 [style=dashed label="noexcept-expression"]
  1295 -> 435 [style=dashed label="nonzero-digit"]
  1295 -> 436 [style=dashed label="octal-literal"]
  1295 -> 108 [style=dashed label="operator-function-id"]
  1295 -> 109 [style=dashed label="placeholder-type-specifier"]
  1295 -> 437 [style=dashed label="pm-expression"]
  1295 -> 438 [style=dashed label="pointer-literal"]
  1295 -> 439 [style=dashed label="postfix-expression"]
  1295 -> 440 [style=dashed label="primary-expression"]
  1295 -> 112 [style=dashed label="qualified-id"]
  1295 -> 441 [style=dashed label="relational-expression"]
  1295 -> 1611 [style=dashed label="requirement"]
  1295 -> 442 [style=dashed label="requires-expression"]
  1295 -> 443 [style=dashed label="shift-expression"]
  1295 -> 1296 [style=dashed label="simple-requirement"]
  1295 -> 114 [style=dashed label="simple-template-id"]
  1295 -> 529 [style=dashed label="simple-type-specifier"]
  1295 -> 445 [style=dashed label="string-literal"]
  1295 -> 120 [style=dashed label="template-id"]
  1295 -> 215 [style=dashed label="template-name"]
  1295 -> 530 [style=dashed label="throw-expression"]
  1295 -> 123 [style=dashed label="type-constraint"]
  1295 -> 124 [style=dashed label="type-name"]
  1295 -> 1297 [style=dashed label="type-requirement"]
  1295 -> 126 [style=dashed label="typedef-name"]
  1295 -> 531 [style=dashed label="typename-specifier"]
  1295 -> 449 [style=dashed label="unary-expression"]
  1295 -> 450 [style=dashed label="unary-operator"]
  1295 -> 129 [style=dashed label="unqualified-id"]
  1295 -> 451 [style=dashed label="user-defined-character-literal"]
  1295 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1295 -> 453 [style=dashed label="user-defined-integer-literal"]
  1295 -> 454 [style=dashed label="user-defined-literal"]
  1295 -> 455 [style=dashed label="user-defined-string-literal"]
  1295 -> 532 [style=dashed label="yield-expression"]
  1296 [label="State 1296\n\l921 requirement: simple-requirement •\l"]
  1296 -> "1296R921" [style=solid]
 "1296R921" [label="R921", fillcolor=3, shape=diamond, style=filled]
  1297 [label="State 1297\n\l922 requirement: type-requirement •\l"]
  1297 -> "1297R922" [style=solid]
 "1297R922" [label="R922", fillcolor=3, shape=diamond, style=filled]
  1298 [label="State 1298\n\l931 requires-expression: REQUIRES requirement-parameter-list requirement-body •\l"]
  1298 -> "1298R931" [style=solid]
 "1298R931" [label="R931", fillcolor=3, shape=diamond, style=filled]
  1299 [label="State 1299\n\l687 new-placement: OPEN_PAREN expression-list • CLOSE_PAREN\l"]
  1299 -> 1612 [style=solid label="CLOSE_PAREN"]
  1300 [label="State 1300\n\l677 new-expression: NEW OPEN_PAREN type-id • CLOSE_PAREN\l681               | NEW OPEN_PAREN type-id • CLOSE_PAREN new-initializer\l"]
  1300 -> 1613 [style=solid label="CLOSE_PAREN"]
  1301 [label="State 1301\n\l679 new-expression: NEW new-placement OPEN_PAREN • type-id CLOSE_PAREN\l683               | NEW new-placement OPEN_PAREN • type-id CLOSE_PAREN new-initializer\l"]
  1301 -> 162 [style=solid label="IDENTIFIER"]
  1301 -> 9 [style=solid label="SCOPE"]
  1301 -> 12 [style=solid label="CLASS"]
  1301 -> 13 [style=solid label="STRUCT"]
  1301 -> 14 [style=solid label="UNION"]
  1301 -> 18 [style=solid label="CONST"]
  1301 -> 19 [style=solid label="VOLATILE"]
  1301 -> 26 [style=solid label="DECLTYPE"]
  1301 -> 135 [style=solid label="ENUM"]
  1301 -> 36 [style=solid label="AUTO"]
  1301 -> 37 [style=solid label="CHAR"]
  1301 -> 38 [style=solid label="CHAR8_T"]
  1301 -> 39 [style=solid label="CHAR16_T"]
  1301 -> 40 [style=solid label="CHAR32_T"]
  1301 -> 41 [style=solid label="WCHAR_T"]
  1301 -> 42 [style=solid label="BOOL"]
  1301 -> 43 [style=solid label="SHORT"]
  1301 -> 44 [style=solid label="INT"]
  1301 -> 45 [style=solid label="LONG"]
  1301 -> 46 [style=solid label="SIGNED"]
  1301 -> 47 [style=solid label="UNSIGNED"]
  1301 -> 48 [style=solid label="FLOAT"]
  1301 -> 49 [style=solid label="DOUBLE"]
  1301 -> 50 [style=solid label="VOID"]
  1301 -> 55 [style=solid label="TYPENAME"]
  1301 -> 209 [style=dashed label="class-key"]
  1301 -> 65 [style=dashed label="class-name"]
  1301 -> 67 [style=dashed label="concept-name"]
  1301 -> 69 [style=dashed label="cv-qualifier"]
  1301 -> 76 [style=dashed label="decltype-specifier"]
  1301 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1301 -> 80 [style=dashed label="elaborated-type-specifier"]
  1301 -> 84 [style=dashed label="enum-name"]
  1301 -> 99 [style=dashed label="namespace-alias"]
  1301 -> 102 [style=dashed label="namespace-name"]
  1301 -> 212 [style=dashed label="nested-name-specifier"]
  1301 -> 109 [style=dashed label="placeholder-type-specifier"]
  1301 -> 141 [style=dashed label="simple-template-id"]
  1301 -> 115 [style=dashed label="simple-type-specifier"]
  1301 -> 215 [style=dashed label="template-name"]
  1301 -> 123 [style=dashed label="type-constraint"]
  1301 -> 1614 [style=dashed label="type-id"]
  1301 -> 124 [style=dashed label="type-name"]
  1301 -> 216 [style=dashed label="type-specifier"]
  1301 -> 447 [style=dashed label="type-specifier-seq"]
  1301 -> 126 [style=dashed label="typedef-name"]
  1301 -> 127 [style=dashed label="typename-specifier"]
  1302 [label="State 1302\n\l671 new-expression: NEW new-placement new-type-id •\l675               | NEW new-placement new-type-id • new-initializer\l"]
  1302 -> 1303 [style=solid label="OPEN_PAREN"]
  1302 -> 935 [style=solid label="OPEN_BRACE"]
  1302 -> 1304 [style=dashed label="braced-init-list"]
  1302 -> 1615 [style=dashed label="new-initializer"]
  1302 -> "1302R671d" [label="[OPEN_BRACE]", style=solid]
 "1302R671d" [label="R671", fillcolor=5, shape=diamond, style=filled]
  1302 -> "1302R671" [style=solid]
 "1302R671" [label="R671", fillcolor=3, shape=diamond, style=filled]
  1303 [label="State 1303\n\l684 new-initializer: OPEN_PAREN • CLOSE_PAREN\l685                | OPEN_PAREN • expression-list CLOSE_PAREN\l"]
  1303 -> 356 [style=solid label="PLUS"]
  1303 -> 357 [style=solid label="MINUS"]
  1303 -> 2 [style=solid label="IDENTIFIER"]
  1303 -> 358 [style=solid label="OPEN_PAREN"]
  1303 -> 1616 [style=solid label="CLOSE_PAREN"]
  1303 -> 359 [style=solid label="AND"]
  1303 -> 360 [style=solid label="SCOPE"]
  1303 -> 361 [style=solid label="OPEN_SQUARE"]
  1303 -> 362 [style=solid label="CO_AWAIT"]
  1303 -> 935 [style=solid label="OPEN_BRACE"]
  1303 -> 363 [style=solid label="ZERO_LB"]
  1303 -> 364 [style=solid label="ZERO_HB"]
  1303 -> 365 [style=solid label="SINGLE_QUOTE"]
  1303 -> 366 [style=solid label="FALSE"]
  1303 -> 367 [style=solid label="TRUE"]
  1303 -> 368 [style=solid label="NOEXCEPT"]
  1303 -> 17 [style=solid label="OPERATOR"]
  1303 -> 26 [style=solid label="DECLTYPE"]
  1303 -> 369 [style=solid label="DELETE"]
  1303 -> 370 [style=solid label="DOT"]
  1303 -> 184 [style=solid label="UNICODE_8"]
  1303 -> 371 [style=solid label="MULT"]
  1303 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1303 -> 372 [style=solid label="ZERO_LX"]
  1303 -> 373 [style=solid label="ZERO_HX"]
  1303 -> 374 [style=solid label="REQUIRES"]
  1303 -> 375 [style=solid label="NEW"]
  1303 -> 376 [style=solid label="COMPL"]
  1303 -> 377 [style=solid label="NOT"]
  1303 -> 378 [style=solid label="PLUS_PLUS"]
  1303 -> 379 [style=solid label="MINUS_MINUS"]
  1303 -> 380 [style=solid label="THIS"]
  1303 -> 36 [style=solid label="AUTO"]
  1303 -> 381 [style=solid label="NULLPTR"]
  1303 -> 382 [style=solid label="DYNAMIC_CAST"]
  1303 -> 383 [style=solid label="STATIC_CAST"]
  1303 -> 384 [style=solid label="REINTERPRET_CAST"]
  1303 -> 385 [style=solid label="CONST_CAST"]
  1303 -> 386 [style=solid label="TYPEID"]
  1303 -> 37 [style=solid label="CHAR"]
  1303 -> 38 [style=solid label="CHAR8_T"]
  1303 -> 39 [style=solid label="CHAR16_T"]
  1303 -> 40 [style=solid label="CHAR32_T"]
  1303 -> 41 [style=solid label="WCHAR_T"]
  1303 -> 42 [style=solid label="BOOL"]
  1303 -> 43 [style=solid label="SHORT"]
  1303 -> 44 [style=solid label="INT"]
  1303 -> 45 [style=solid label="LONG"]
  1303 -> 46 [style=solid label="SIGNED"]
  1303 -> 47 [style=solid label="UNSIGNED"]
  1303 -> 48 [style=solid label="FLOAT"]
  1303 -> 49 [style=solid label="DOUBLE"]
  1303 -> 50 [style=solid label="VOID"]
  1303 -> 523 [style=solid label="THROW"]
  1303 -> 55 [style=solid label="TYPENAME"]
  1303 -> 387 [style=solid label="SIZEOF"]
  1303 -> 388 [style=solid label="ALIGNOF"]
  1303 -> 524 [style=solid label="CO_YIELD"]
  1303 -> 389 [style=solid label="'0'"]
  1303 -> 390 [style=solid label="'1'"]
  1303 -> 391 [style=solid label="'2'"]
  1303 -> 392 [style=solid label="'3'"]
  1303 -> 393 [style=solid label="'4'"]
  1303 -> 394 [style=solid label="'5'"]
  1303 -> 395 [style=solid label="'6'"]
  1303 -> 396 [style=solid label="'7'"]
  1303 -> 397 [style=solid label="'8'"]
  1303 -> 398 [style=solid label="'9'"]
  1303 -> 205 [style=solid label="'u'"]
  1303 -> 206 [style=solid label="'U'"]
  1303 -> 207 [style=solid label="'L'"]
  1303 -> 208 [style=solid label="'R'"]
  1303 -> 399 [style=dashed label="additive-expression"]
  1303 -> 400 [style=dashed label="and-expression"]
  1303 -> 1134 [style=dashed label="assignment-expression"]
  1303 -> 401 [style=dashed label="await-expression"]
  1303 -> 402 [style=dashed label="binary-literal"]
  1303 -> 403 [style=dashed label="boolean-literal"]
  1303 -> 1135 [style=dashed label="braced-init-list"]
  1303 -> 404 [style=dashed label="cast-expression"]
  1303 -> 405 [style=dashed label="character-literal"]
  1303 -> 65 [style=dashed label="class-name"]
  1303 -> 406 [style=dashed label="compare-expression"]
  1303 -> 67 [style=dashed label="concept-name"]
  1303 -> 526 [style=dashed label="conditional-expression"]
  1303 -> 68 [style=dashed label="conversion-function-id"]
  1303 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1303 -> 410 [style=dashed label="decimal-literal"]
  1303 -> 76 [style=dashed label="decltype-specifier"]
  1303 -> 411 [style=dashed label="delete-expression"]
  1303 -> 412 [style=dashed label="digit"]
  1303 -> 413 [style=dashed label="digit-sequence"]
  1303 -> 414 [style=dashed label="encoding-prefix"]
  1303 -> 84 [style=dashed label="enum-name"]
  1303 -> 415 [style=dashed label="equality-expression"]
  1303 -> 416 [style=dashed label="exclusive-or-expression"]
  1303 -> 1617 [style=dashed label="expression-list"]
  1303 -> 417 [style=dashed label="floating-point-literal"]
  1303 -> 418 [style=dashed label="fold-expression"]
  1303 -> 419 [style=dashed label="fractional-constant"]
  1303 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1303 -> 421 [style=dashed label="hexadecimal-literal"]
  1303 -> 422 [style=dashed label="hexadecimal-prefix"]
  1303 -> 423 [style=dashed label="id-expression"]
  1303 -> 424 [style=dashed label="inclusive-or-expression"]
  1303 -> 1138 [style=dashed label="initializer-clause"]
  1303 -> 1139 [style=dashed label="initializer-list"]
  1303 -> 425 [style=dashed label="integer-literal"]
  1303 -> 426 [style=dashed label="lambda-expression"]
  1303 -> 427 [style=dashed label="lambda-introducer"]
  1303 -> 428 [style=dashed label="literal"]
  1303 -> 95 [style=dashed label="literal-operator-id"]
  1303 -> 429 [style=dashed label="logical-and-expression"]
  1303 -> 528 [style=dashed label="logical-or-expression"]
  1303 -> 431 [style=dashed label="multiplicative-expression"]
  1303 -> 99 [style=dashed label="namespace-alias"]
  1303 -> 102 [style=dashed label="namespace-name"]
  1303 -> 432 [style=dashed label="nested-name-specifier"]
  1303 -> 433 [style=dashed label="new-expression"]
  1303 -> 434 [style=dashed label="noexcept-expression"]
  1303 -> 435 [style=dashed label="nonzero-digit"]
  1303 -> 436 [style=dashed label="octal-literal"]
  1303 -> 108 [style=dashed label="operator-function-id"]
  1303 -> 109 [style=dashed label="placeholder-type-specifier"]
  1303 -> 437 [style=dashed label="pm-expression"]
  1303 -> 438 [style=dashed label="pointer-literal"]
  1303 -> 439 [style=dashed label="postfix-expression"]
  1303 -> 440 [style=dashed label="primary-expression"]
  1303 -> 112 [style=dashed label="qualified-id"]
  1303 -> 441 [style=dashed label="relational-expression"]
  1303 -> 442 [style=dashed label="requires-expression"]
  1303 -> 443 [style=dashed label="shift-expression"]
  1303 -> 114 [style=dashed label="simple-template-id"]
  1303 -> 529 [style=dashed label="simple-type-specifier"]
  1303 -> 445 [style=dashed label="string-literal"]
  1303 -> 120 [style=dashed label="template-id"]
  1303 -> 215 [style=dashed label="template-name"]
  1303 -> 530 [style=dashed label="throw-expression"]
  1303 -> 123 [style=dashed label="type-constraint"]
  1303 -> 124 [style=dashed label="type-name"]
  1303 -> 126 [style=dashed label="typedef-name"]
  1303 -> 531 [style=dashed label="typename-specifier"]
  1303 -> 449 [style=dashed label="unary-expression"]
  1303 -> 450 [style=dashed label="unary-operator"]
  1303 -> 129 [style=dashed label="unqualified-id"]
  1303 -> 451 [style=dashed label="user-defined-character-literal"]
  1303 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1303 -> 453 [style=dashed label="user-defined-integer-literal"]
  1303 -> 454 [style=dashed label="user-defined-literal"]
  1303 -> 455 [style=dashed label="user-defined-string-literal"]
  1303 -> 532 [style=dashed label="yield-expression"]
  1304 [label="State 1304\n\l686 new-initializer: braced-init-list •\l"]
  1304 -> "1304R686" [style=solid]
 "1304R686" [label="R686", fillcolor=3, shape=diamond, style=filled]
  1305 [label="State 1305\n\l673 new-expression: NEW new-type-id new-initializer •\l"]
  1305 -> "1305R673" [style=solid]
 "1305R673" [label="R673", fillcolor=3, shape=diamond, style=filled]
  1306 [label="State 1306\n\l729 noptr-new-declarator: OPEN_SQUARE • CLOSE_SQUARE\l730                     | OPEN_SQUARE • expression CLOSE_SQUARE\l731                     | OPEN_SQUARE • CLOSE_SQUARE attribute-specifier-seq\l732                     | OPEN_SQUARE • expression CLOSE_SQUARE attribute-specifier-seq\l"]
  1306 -> 356 [style=solid label="PLUS"]
  1306 -> 357 [style=solid label="MINUS"]
  1306 -> 2 [style=solid label="IDENTIFIER"]
  1306 -> 358 [style=solid label="OPEN_PAREN"]
  1306 -> 359 [style=solid label="AND"]
  1306 -> 360 [style=solid label="SCOPE"]
  1306 -> 361 [style=solid label="OPEN_SQUARE"]
  1306 -> 1618 [style=solid label="CLOSE_SQUARE"]
  1306 -> 362 [style=solid label="CO_AWAIT"]
  1306 -> 363 [style=solid label="ZERO_LB"]
  1306 -> 364 [style=solid label="ZERO_HB"]
  1306 -> 365 [style=solid label="SINGLE_QUOTE"]
  1306 -> 366 [style=solid label="FALSE"]
  1306 -> 367 [style=solid label="TRUE"]
  1306 -> 368 [style=solid label="NOEXCEPT"]
  1306 -> 17 [style=solid label="OPERATOR"]
  1306 -> 26 [style=solid label="DECLTYPE"]
  1306 -> 369 [style=solid label="DELETE"]
  1306 -> 370 [style=solid label="DOT"]
  1306 -> 184 [style=solid label="UNICODE_8"]
  1306 -> 371 [style=solid label="MULT"]
  1306 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1306 -> 372 [style=solid label="ZERO_LX"]
  1306 -> 373 [style=solid label="ZERO_HX"]
  1306 -> 374 [style=solid label="REQUIRES"]
  1306 -> 375 [style=solid label="NEW"]
  1306 -> 376 [style=solid label="COMPL"]
  1306 -> 377 [style=solid label="NOT"]
  1306 -> 378 [style=solid label="PLUS_PLUS"]
  1306 -> 379 [style=solid label="MINUS_MINUS"]
  1306 -> 380 [style=solid label="THIS"]
  1306 -> 36 [style=solid label="AUTO"]
  1306 -> 381 [style=solid label="NULLPTR"]
  1306 -> 382 [style=solid label="DYNAMIC_CAST"]
  1306 -> 383 [style=solid label="STATIC_CAST"]
  1306 -> 384 [style=solid label="REINTERPRET_CAST"]
  1306 -> 385 [style=solid label="CONST_CAST"]
  1306 -> 386 [style=solid label="TYPEID"]
  1306 -> 37 [style=solid label="CHAR"]
  1306 -> 38 [style=solid label="CHAR8_T"]
  1306 -> 39 [style=solid label="CHAR16_T"]
  1306 -> 40 [style=solid label="CHAR32_T"]
  1306 -> 41 [style=solid label="WCHAR_T"]
  1306 -> 42 [style=solid label="BOOL"]
  1306 -> 43 [style=solid label="SHORT"]
  1306 -> 44 [style=solid label="INT"]
  1306 -> 45 [style=solid label="LONG"]
  1306 -> 46 [style=solid label="SIGNED"]
  1306 -> 47 [style=solid label="UNSIGNED"]
  1306 -> 48 [style=solid label="FLOAT"]
  1306 -> 49 [style=solid label="DOUBLE"]
  1306 -> 50 [style=solid label="VOID"]
  1306 -> 523 [style=solid label="THROW"]
  1306 -> 55 [style=solid label="TYPENAME"]
  1306 -> 387 [style=solid label="SIZEOF"]
  1306 -> 388 [style=solid label="ALIGNOF"]
  1306 -> 524 [style=solid label="CO_YIELD"]
  1306 -> 389 [style=solid label="'0'"]
  1306 -> 390 [style=solid label="'1'"]
  1306 -> 391 [style=solid label="'2'"]
  1306 -> 392 [style=solid label="'3'"]
  1306 -> 393 [style=solid label="'4'"]
  1306 -> 394 [style=solid label="'5'"]
  1306 -> 395 [style=solid label="'6'"]
  1306 -> 396 [style=solid label="'7'"]
  1306 -> 397 [style=solid label="'8'"]
  1306 -> 398 [style=solid label="'9'"]
  1306 -> 205 [style=solid label="'u'"]
  1306 -> 206 [style=solid label="'U'"]
  1306 -> 207 [style=solid label="'L'"]
  1306 -> 208 [style=solid label="'R'"]
  1306 -> 399 [style=dashed label="additive-expression"]
  1306 -> 400 [style=dashed label="and-expression"]
  1306 -> 525 [style=dashed label="assignment-expression"]
  1306 -> 401 [style=dashed label="await-expression"]
  1306 -> 402 [style=dashed label="binary-literal"]
  1306 -> 403 [style=dashed label="boolean-literal"]
  1306 -> 404 [style=dashed label="cast-expression"]
  1306 -> 405 [style=dashed label="character-literal"]
  1306 -> 65 [style=dashed label="class-name"]
  1306 -> 406 [style=dashed label="compare-expression"]
  1306 -> 67 [style=dashed label="concept-name"]
  1306 -> 526 [style=dashed label="conditional-expression"]
  1306 -> 68 [style=dashed label="conversion-function-id"]
  1306 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1306 -> 410 [style=dashed label="decimal-literal"]
  1306 -> 76 [style=dashed label="decltype-specifier"]
  1306 -> 411 [style=dashed label="delete-expression"]
  1306 -> 412 [style=dashed label="digit"]
  1306 -> 413 [style=dashed label="digit-sequence"]
  1306 -> 414 [style=dashed label="encoding-prefix"]
  1306 -> 84 [style=dashed label="enum-name"]
  1306 -> 415 [style=dashed label="equality-expression"]
  1306 -> 416 [style=dashed label="exclusive-or-expression"]
  1306 -> 1619 [style=dashed label="expression"]
  1306 -> 417 [style=dashed label="floating-point-literal"]
  1306 -> 418 [style=dashed label="fold-expression"]
  1306 -> 419 [style=dashed label="fractional-constant"]
  1306 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1306 -> 421 [style=dashed label="hexadecimal-literal"]
  1306 -> 422 [style=dashed label="hexadecimal-prefix"]
  1306 -> 423 [style=dashed label="id-expression"]
  1306 -> 424 [style=dashed label="inclusive-or-expression"]
  1306 -> 425 [style=dashed label="integer-literal"]
  1306 -> 426 [style=dashed label="lambda-expression"]
  1306 -> 427 [style=dashed label="lambda-introducer"]
  1306 -> 428 [style=dashed label="literal"]
  1306 -> 95 [style=dashed label="literal-operator-id"]
  1306 -> 429 [style=dashed label="logical-and-expression"]
  1306 -> 528 [style=dashed label="logical-or-expression"]
  1306 -> 431 [style=dashed label="multiplicative-expression"]
  1306 -> 99 [style=dashed label="namespace-alias"]
  1306 -> 102 [style=dashed label="namespace-name"]
  1306 -> 432 [style=dashed label="nested-name-specifier"]
  1306 -> 433 [style=dashed label="new-expression"]
  1306 -> 434 [style=dashed label="noexcept-expression"]
  1306 -> 435 [style=dashed label="nonzero-digit"]
  1306 -> 436 [style=dashed label="octal-literal"]
  1306 -> 108 [style=dashed label="operator-function-id"]
  1306 -> 109 [style=dashed label="placeholder-type-specifier"]
  1306 -> 437 [style=dashed label="pm-expression"]
  1306 -> 438 [style=dashed label="pointer-literal"]
  1306 -> 439 [style=dashed label="postfix-expression"]
  1306 -> 440 [style=dashed label="primary-expression"]
  1306 -> 112 [style=dashed label="qualified-id"]
  1306 -> 441 [style=dashed label="relational-expression"]
  1306 -> 442 [style=dashed label="requires-expression"]
  1306 -> 443 [style=dashed label="shift-expression"]
  1306 -> 114 [style=dashed label="simple-template-id"]
  1306 -> 529 [style=dashed label="simple-type-specifier"]
  1306 -> 445 [style=dashed label="string-literal"]
  1306 -> 120 [style=dashed label="template-id"]
  1306 -> 215 [style=dashed label="template-name"]
  1306 -> 530 [style=dashed label="throw-expression"]
  1306 -> 123 [style=dashed label="type-constraint"]
  1306 -> 124 [style=dashed label="type-name"]
  1306 -> 126 [style=dashed label="typedef-name"]
  1306 -> 531 [style=dashed label="typename-specifier"]
  1306 -> 449 [style=dashed label="unary-expression"]
  1306 -> 450 [style=dashed label="unary-operator"]
  1306 -> 129 [style=dashed label="unqualified-id"]
  1306 -> 451 [style=dashed label="user-defined-character-literal"]
  1306 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1306 -> 453 [style=dashed label="user-defined-integer-literal"]
  1306 -> 454 [style=dashed label="user-defined-literal"]
  1306 -> 455 [style=dashed label="user-defined-string-literal"]
  1306 -> 532 [style=dashed label="yield-expression"]
  1307 [label="State 1307\n\l689 new-type-id: type-specifier-seq new-declarator •\l"]
  1307 -> "1307R689" [style=solid]
 "1307R689" [label="R689", fillcolor=3, shape=diamond, style=filled]
  1308 [label="State 1308\n\l667 new-declarator: noptr-new-declarator •\l733 noptr-new-declarator: noptr-new-declarator • OPEN_SQUARE constant-expression CLOSE_SQUARE\l734                     | noptr-new-declarator • OPEN_SQUARE constant-expression CLOSE_SQUARE attribute-specifier-seq\l"]
  1308 -> 1620 [style=solid label="OPEN_SQUARE"]
  1308 -> "1308R667" [style=solid]
 "1308R667" [label="R667", fillcolor=3, shape=diamond, style=filled]
  1309 [label="State 1309\n\l665 new-declarator: ptr-operator •\l666               | ptr-operator • new-declarator\l"]
  1309 -> 253 [style=solid label="IDENTIFIER"]
  1309 -> 7 [style=solid label="AND"]
  1309 -> 9 [style=solid label="SCOPE"]
  1309 -> 1306 [style=solid label="OPEN_SQUARE"]
  1309 -> 16 [style=solid label="AND_AND"]
  1309 -> 134 [style=solid label="DECLTYPE"]
  1309 -> 31 [style=solid label="MULT"]
  1309 -> 65 [style=dashed label="class-name"]
  1309 -> 138 [style=dashed label="decltype-specifier"]
  1309 -> 84 [style=dashed label="enum-name"]
  1309 -> 99 [style=dashed label="namespace-alias"]
  1309 -> 102 [style=dashed label="namespace-name"]
  1309 -> 517 [style=dashed label="nested-name-specifier"]
  1309 -> 1621 [style=dashed label="new-declarator"]
  1309 -> 1308 [style=dashed label="noptr-new-declarator"]
  1309 -> 1309 [style=dashed label="ptr-operator"]
  1309 -> 141 [style=dashed label="simple-template-id"]
  1309 -> 142 [style=dashed label="template-name"]
  1309 -> 143 [style=dashed label="type-name"]
  1309 -> 126 [style=dashed label="typedef-name"]
  1309 -> "1309R665d" [label="[AND, AND_AND, MULT]", style=solid]
 "1309R665d" [label="R665", fillcolor=5, shape=diamond, style=filled]
  1309 -> "1309R665" [style=solid]
 "1309R665" [label="R665", fillcolor=3, shape=diamond, style=filled]
  1310 [label="State 1310\n\l873 postfix-expression: DYNAMIC_CAST LESS type-id • GREATER OPEN_PAREN expression CLOSE_PAREN\l"]
  1310 -> 1622 [style=solid label="GREATER"]
  1311 [label="State 1311\n\l874 postfix-expression: STATIC_CAST LESS type-id • GREATER OPEN_PAREN expression CLOSE_PAREN\l"]
  1311 -> 1623 [style=solid label="GREATER"]
  1312 [label="State 1312\n\l875 postfix-expression: REINTERPRET_CAST LESS type-id • GREATER OPEN_PAREN expression CLOSE_PAREN\l"]
  1312 -> 1624 [style=solid label="GREATER"]
  1313 [label="State 1313\n\l876 postfix-expression: CONST_CAST LESS type-id • GREATER OPEN_PAREN expression CLOSE_PAREN\l"]
  1313 -> 1625 [style=solid label="GREATER"]
  1314 [label="State 1314\n\l335 expression: expression • COMMA assignment-expression\l877 postfix-expression: TYPEID OPEN_PAREN expression • CLOSE_PAREN\l"]
  1314 -> 1626 [style=solid label="CLOSE_PAREN"]
  1314 -> 1029 [style=solid label="COMMA"]
  1315 [label="State 1315\n\l878 postfix-expression: TYPEID OPEN_PAREN type-id • CLOSE_PAREN\l"]
  1315 -> 1627 [style=solid label="CLOSE_PAREN"]
  1316 [label="State 1316\n\l1122 unary-expression: SIZEOF OPEN_PAREN type-id • CLOSE_PAREN\l"]
  1316 -> 1628 [style=solid label="CLOSE_PAREN"]
  1317 [label="State 1317\n\l1123 unary-expression: SIZEOF ELLIPSIS OPEN_PAREN • IDENTIFIER CLOSE_PAREN\l"]
  1317 -> 1629 [style=solid label="IDENTIFIER"]
  1318 [label="State 1318\n\l1124 unary-expression: ALIGNOF OPEN_PAREN type-id • CLOSE_PAREN\l"]
  1318 -> 1630 [style=solid label="CLOSE_PAREN"]
  1319 [label="State 1319\n\l 11 additive-expression: additive-expression PLUS multiplicative-expression •\l640 multiplicative-expression: multiplicative-expression • MULT pm-expression\l641                          | multiplicative-expression • DIV pm-expression\l642                          | multiplicative-expression • MOD pm-expression\l"]
  1319 -> 905 [style=solid label="MULT"]
  1319 -> 906 [style=solid label="DIV"]
  1319 -> 907 [style=solid label="MOD"]
  1319 -> "1319R11" [style=solid]
 "1319R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  1320 [label="State 1320\n\l 12 additive-expression: additive-expression MINUS multiplicative-expression •\l640 multiplicative-expression: multiplicative-expression • MULT pm-expression\l641                          | multiplicative-expression • DIV pm-expression\l642                          | multiplicative-expression • MOD pm-expression\l"]
  1320 -> 905 [style=solid label="MULT"]
  1320 -> 906 [style=solid label="DIV"]
  1320 -> 907 [style=solid label="MOD"]
  1320 -> "1320R12" [style=solid]
 "1320R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  1321 [label="State 1321\n\l 20 and-expression: and-expression AND equality-expression •\l305 equality-expression: equality-expression • EQ_EQ relational-expression\l306                    | equality-expression • NOT_EQ relational-expression\l"]
  1321 -> 854 [style=solid label="EQ_EQ"]
  1321 -> 855 [style=solid label="NOT_EQ"]
  1321 -> "1321R20" [style=solid]
 "1321R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  1322 [label="State 1322\n\l 94 binary-literal: binary-literal SINGLE_QUOTE binary-digit •\l"]
  1322 -> "1322R94" [style=solid]
 "1322R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
  1323 [label="State 1323\n\l502 integer-suffix: long-long-suffix unsigned-suffix •\l"]
  1323 -> "1323R502" [style=solid]
 "1323R502" [label="R502", fillcolor=3, shape=diamond, style=filled]
  1324 [label="State 1324\n\l500 integer-suffix: long-suffix unsigned-suffix •\l"]
  1324 -> "1324R500" [style=solid]
 "1324R500" [label="R500", fillcolor=3, shape=diamond, style=filled]
  1325 [label="State 1325\n\l504 integer-suffix: size-suffix unsigned-suffix •\l"]
  1325 -> "1325R504" [style=solid]
 "1325R504" [label="R504", fillcolor=3, shape=diamond, style=filled]
  1326 [label="State 1326\n\l496 integer-suffix: unsigned-suffix long-long-suffix •\l"]
  1326 -> "1326R496" [style=solid]
 "1326R496" [label="R496", fillcolor=3, shape=diamond, style=filled]
  1327 [label="State 1327\n\l494 integer-suffix: unsigned-suffix long-suffix •\l"]
  1327 -> "1327R494" [style=solid]
 "1327R494" [label="R494", fillcolor=3, shape=diamond, style=filled]
  1328 [label="State 1328\n\l498 integer-suffix: unsigned-suffix size-suffix •\l"]
  1328 -> "1328R498" [style=solid]
 "1328R498" [label="R498", fillcolor=3, shape=diamond, style=filled]
  1329 [label="State 1329\n\l155 compare-expression: compare-expression SPACESHIP shift-expression •\l953 shift-expression: shift-expression • LSHIFT additive-expression\l954                 | shift-expression • RSHIFT additive-expression\l"]
  1329 -> 932 [style=solid label="LSHIFT"]
  1329 -> 933 [style=solid label="RSHIFT"]
  1329 -> "1329R155" [style=solid]
 "1329R155" [label="R155", fillcolor=3, shape=diamond, style=filled]
  1330 [label="State 1330\n\l 18 alignment-specifier: ALIGNAS OPEN_PAREN constant-expression ELLIPSIS CLOSE_PAREN •\l"]
  1330 -> "1330R18" [style=solid]
 "1330R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  1331 [label="State 1331\n\l197 decimal-literal: decimal-literal SINGLE_QUOTE digit •\l"]
  1331 -> "1331R197" [style=solid]
 "1331R197" [label="R197", fillcolor=3, shape=diamond, style=filled]
  1332 [label="State 1332\n\l261 digit-sequence: digit-sequence SINGLE_QUOTE digit •\l"]
  1332 -> "1332R261" [style=solid]
 "1332R261" [label="R261", fillcolor=3, shape=diamond, style=filled]
  1333 [label="State 1333\n\l260 digit-sequence: digit-sequence • digit\l261               | digit-sequence • SINGLE_QUOTE digit\l387 fractional-constant: digit-sequence DOT digit-sequence •\l"]
  1333 -> 847 [style=solid label="SINGLE_QUOTE"]
  1333 -> 789 [style=solid label="'0'"]
  1333 -> 790 [style=solid label="'1'"]
  1333 -> 791 [style=solid label="'2'"]
  1333 -> 792 [style=solid label="'3'"]
  1333 -> 793 [style=solid label="'4'"]
  1333 -> 794 [style=solid label="'5'"]
  1333 -> 795 [style=solid label="'6'"]
  1333 -> 796 [style=solid label="'7'"]
  1333 -> 797 [style=solid label="'8'"]
  1333 -> 798 [style=solid label="'9'"]
  1333 -> 851 [style=dashed label="digit"]
  1333 -> "1333R387" [style=solid]
 "1333R387" [label="R387", fillcolor=3, shape=diamond, style=filled]
  1334 [label="State 1334\n\l955 sign: PLUS •\l"]
  1334 -> "1334R955" [style=solid]
 "1334R955" [label="R955", fillcolor=3, shape=diamond, style=filled]
  1335 [label="State 1335\n\l956 sign: MINUS •\l"]
  1335 -> "1335R956" [style=solid]
 "1335R956" [label="R956", fillcolor=3, shape=diamond, style=filled]
  1336 [label="State 1336\n\l260 digit-sequence: digit-sequence • digit\l261               | digit-sequence • SINGLE_QUOTE digit\l324 exponent-part: 'e' digit-sequence •\l"]
  1336 -> 847 [style=solid label="SINGLE_QUOTE"]
  1336 -> 789 [style=solid label="'0'"]
  1336 -> 790 [style=solid label="'1'"]
  1336 -> 791 [style=solid label="'2'"]
  1336 -> 792 [style=solid label="'3'"]
  1336 -> 793 [style=solid label="'4'"]
  1336 -> 794 [style=solid label="'5'"]
  1336 -> 795 [style=solid label="'6'"]
  1336 -> 796 [style=solid label="'7'"]
  1336 -> 797 [style=solid label="'8'"]
  1336 -> 798 [style=solid label="'9'"]
  1336 -> 851 [style=dashed label="digit"]
  1336 -> "1336R324" [style=solid]
 "1336R324" [label="R324", fillcolor=3, shape=diamond, style=filled]
  1337 [label="State 1337\n\l325 exponent-part: 'e' sign • digit-sequence\l"]
  1337 -> 789 [style=solid label="'0'"]
  1337 -> 790 [style=solid label="'1'"]
  1337 -> 791 [style=solid label="'2'"]
  1337 -> 792 [style=solid label="'3'"]
  1337 -> 793 [style=solid label="'4'"]
  1337 -> 794 [style=solid label="'5'"]
  1337 -> 795 [style=solid label="'6'"]
  1337 -> 796 [style=solid label="'7'"]
  1337 -> 797 [style=solid label="'8'"]
  1337 -> 798 [style=solid label="'9'"]
  1337 -> 412 [style=dashed label="digit"]
  1337 -> 1631 [style=dashed label="digit-sequence"]
  1338 [label="State 1338\n\l260 digit-sequence: digit-sequence • digit\l261               | digit-sequence • SINGLE_QUOTE digit\l326 exponent-part: 'E' digit-sequence •\l"]
  1338 -> 847 [style=solid label="SINGLE_QUOTE"]
  1338 -> 789 [style=solid label="'0'"]
  1338 -> 790 [style=solid label="'1'"]
  1338 -> 791 [style=solid label="'2'"]
  1338 -> 792 [style=solid label="'3'"]
  1338 -> 793 [style=solid label="'4'"]
  1338 -> 794 [style=solid label="'5'"]
  1338 -> 795 [style=solid label="'6'"]
  1338 -> 796 [style=solid label="'7'"]
  1338 -> 797 [style=solid label="'8'"]
  1338 -> 798 [style=solid label="'9'"]
  1338 -> 851 [style=dashed label="digit"]
  1338 -> "1338R326" [style=solid]
 "1338R326" [label="R326", fillcolor=3, shape=diamond, style=filled]
  1339 [label="State 1339\n\l327 exponent-part: 'E' sign • digit-sequence\l"]
  1339 -> 789 [style=solid label="'0'"]
  1339 -> 790 [style=solid label="'1'"]
  1339 -> 791 [style=solid label="'2'"]
  1339 -> 792 [style=solid label="'3'"]
  1339 -> 793 [style=solid label="'4'"]
  1339 -> 794 [style=solid label="'5'"]
  1339 -> 795 [style=solid label="'6'"]
  1339 -> 796 [style=solid label="'7'"]
  1339 -> 797 [style=solid label="'8'"]
  1339 -> 798 [style=solid label="'9'"]
  1339 -> 412 [style=dashed label="digit"]
  1339 -> 1632 [style=dashed label="digit-sequence"]
  1340 [label="State 1340\n\l194 decimal-floating-point-literal: digit-sequence exponent-part floating-point-suffix •\l"]
  1340 -> "1340R194" [style=solid]
 "1340R194" [label="R194", fillcolor=3, shape=diamond, style=filled]
  1341 [label="State 1341\n\l1152 user-defined-floating-point-literal: digit-sequence exponent-part ud-suffix •\l"]
  1341 -> "1341R1152" [style=solid]
 "1341R1152" [label="R1152", fillcolor=3, shape=diamond, style=filled]
  1342 [label="State 1342\n\l117 c-char-sequence: c-char-sequence • c-char\l126 character-literal: encoding-prefix SINGLE_QUOTE c-char-sequence • SINGLE_QUOTE\l"]
  1342 -> 780 [style=solid label="BASIC_C_CHAR"]
  1342 -> 1633 [style=solid label="SINGLE_QUOTE"]
  1342 -> 486 [style=solid label="ESCAPE"]
  1342 -> 488 [style=solid label="ESCAPE_LX"]
  1342 -> 489 [style=solid label="ESCAPE_LU"]
  1342 -> 490 [style=solid label="ESCAPE_HU"]
  1342 -> 781 [style=dashed label="basic-c-char"]
  1342 -> 1284 [style=dashed label="c-char"]
  1342 -> 492 [style=dashed label="conditional-escape-sequence"]
  1342 -> 784 [style=dashed label="escape-sequence"]
  1342 -> 494 [style=dashed label="hexadecimal-escape-sequence"]
  1342 -> 495 [style=dashed label="numeric-escape-sequence"]
  1342 -> 496 [style=dashed label="octal-escape-sequence"]
  1342 -> 499 [style=dashed label="simple-escape-sequence"]
  1342 -> 785 [style=dashed label="universal-character-name"]
  1343 [label="State 1343\n\l305 equality-expression: equality-expression EQ_EQ relational-expression •\l917 relational-expression: relational-expression • LESS compare-expression\l918                      | relational-expression • GREATER compare-expression\l919                      | relational-expression • LESS_EQ compare-expression\l920                      | relational-expression • GREATER_EQ compare-expression\l"]
  1343 -> 928 [style=solid label="LESS"]
  1343 -> 929 [style=solid label="GREATER"]
  1343 -> 930 [style=solid label="LESS_EQ"]
  1343 -> 931 [style=solid label="GREATER_EQ"]
  1343 -> "1343R305d" [label="[GREATER]", style=solid]
 "1343R305d" [label="R305", fillcolor=5, shape=diamond, style=filled]
  1343 -> "1343R305" [style=solid]
 "1343R305" [label="R305", fillcolor=3, shape=diamond, style=filled]
  1344 [label="State 1344\n\l306 equality-expression: equality-expression NOT_EQ relational-expression •\l917 relational-expression: relational-expression • LESS compare-expression\l918                      | relational-expression • GREATER compare-expression\l919                      | relational-expression • LESS_EQ compare-expression\l920                      | relational-expression • GREATER_EQ compare-expression\l"]
  1344 -> 928 [style=solid label="LESS"]
  1344 -> 929 [style=solid label="GREATER"]
  1344 -> 930 [style=solid label="LESS_EQ"]
  1344 -> 931 [style=solid label="GREATER_EQ"]
  1344 -> "1344R306d" [label="[GREATER]", style=solid]
 "1344R306d" [label="R306", fillcolor=5, shape=diamond, style=filled]
  1344 -> "1344R306" [style=solid]
 "1344R306" [label="R306", fillcolor=3, shape=diamond, style=filled]
  1345 [label="State 1345\n\l 20 and-expression: and-expression • AND equality-expression\l318 exclusive-or-expression: exclusive-or-expression XOR and-expression •\l"]
  1345 -> 821 [style=solid label="AND"]
  1345 -> "1345R318" [style=solid]
 "1345R318" [label="R318", fillcolor=3, shape=diamond, style=filled]
  1346 [label="State 1346\n\l192 decimal-floating-point-literal: fractional-constant exponent-part floating-point-suffix •\l"]
  1346 -> "1346R192" [style=solid]
 "1346R192" [label="R192", fillcolor=3, shape=diamond, style=filled]
  1347 [label="State 1347\n\l1151 user-defined-floating-point-literal: fractional-constant exponent-part ud-suffix •\l"]
  1347 -> "1347R1151" [style=solid]
 "1347R1151" [label="R1151", fillcolor=3, shape=diamond, style=filled]
  1348 [label="State 1348\n\l445 hexadecimal-digit-sequence: hexadecimal-digit-sequence • hexadecimal-digit\l446                           | hexadecimal-digit-sequence • SINGLE_QUOTE hexadecimal-digit\l454 hexadecimal-fractional-constant: DOT hexadecimal-digit-sequence •\l"]
  1348 -> 1349 [style=solid label="SINGLE_QUOTE"]
  1348 -> 867 [style=solid label="'0'"]
  1348 -> 868 [style=solid label="'1'"]
  1348 -> 869 [style=solid label="'2'"]
  1348 -> 870 [style=solid label="'3'"]
  1348 -> 871 [style=solid label="'4'"]
  1348 -> 872 [style=solid label="'5'"]
  1348 -> 873 [style=solid label="'6'"]
  1348 -> 874 [style=solid label="'7'"]
  1348 -> 875 [style=solid label="'8'"]
  1348 -> 876 [style=solid label="'9'"]
  1348 -> 877 [style=solid label="'e'"]
  1348 -> 878 [style=solid label="'E'"]
  1348 -> 879 [style=solid label="'f'"]
  1348 -> 880 [style=solid label="'F'"]
  1348 -> 881 [style=solid label="'a'"]
  1348 -> 882 [style=solid label="'b'"]
  1348 -> 883 [style=solid label="'c'"]
  1348 -> 884 [style=solid label="'d'"]
  1348 -> 885 [style=solid label="'A'"]
  1348 -> 886 [style=solid label="'B'"]
  1348 -> 887 [style=solid label="'C'"]
  1348 -> 888 [style=solid label="'D'"]
  1348 -> 1354 [style=dashed label="hexadecimal-digit"]
  1348 -> "1348R454" [style=solid]
 "1348R454" [label="R454", fillcolor=3, shape=diamond, style=filled]
  1349 [label="State 1349\n\l446 hexadecimal-digit-sequence: hexadecimal-digit-sequence SINGLE_QUOTE • hexadecimal-digit\l"]
  1349 -> 867 [style=solid label="'0'"]
  1349 -> 868 [style=solid label="'1'"]
  1349 -> 869 [style=solid label="'2'"]
  1349 -> 870 [style=solid label="'3'"]
  1349 -> 871 [style=solid label="'4'"]
  1349 -> 872 [style=solid label="'5'"]
  1349 -> 873 [style=solid label="'6'"]
  1349 -> 874 [style=solid label="'7'"]
  1349 -> 875 [style=solid label="'8'"]
  1349 -> 876 [style=solid label="'9'"]
  1349 -> 877 [style=solid label="'e'"]
  1349 -> 878 [style=solid label="'E'"]
  1349 -> 879 [style=solid label="'f'"]
  1349 -> 880 [style=solid label="'F'"]
  1349 -> 881 [style=solid label="'a'"]
  1349 -> 882 [style=solid label="'b'"]
  1349 -> 883 [style=solid label="'c'"]
  1349 -> 884 [style=solid label="'d'"]
  1349 -> 885 [style=solid label="'A'"]
  1349 -> 886 [style=solid label="'B'"]
  1349 -> 887 [style=solid label="'C'"]
  1349 -> 888 [style=solid label="'D'"]
  1349 -> 1634 [style=dashed label="hexadecimal-digit"]
  1350 [label="State 1350\n\l453 hexadecimal-fractional-constant: hexadecimal-digit-sequence DOT • hexadecimal-digit-sequence\l455                                | hexadecimal-digit-sequence DOT •\l"]
  1350 -> 867 [style=solid label="'0'"]
  1350 -> 868 [style=solid label="'1'"]
  1350 -> 869 [style=solid label="'2'"]
  1350 -> 870 [style=solid label="'3'"]
  1350 -> 871 [style=solid label="'4'"]
  1350 -> 872 [style=solid label="'5'"]
  1350 -> 873 [style=solid label="'6'"]
  1350 -> 874 [style=solid label="'7'"]
  1350 -> 875 [style=solid label="'8'"]
  1350 -> 876 [style=solid label="'9'"]
  1350 -> 877 [style=solid label="'e'"]
  1350 -> 878 [style=solid label="'E'"]
  1350 -> 879 [style=solid label="'f'"]
  1350 -> 880 [style=solid label="'F'"]
  1350 -> 881 [style=solid label="'a'"]
  1350 -> 882 [style=solid label="'b'"]
  1350 -> 883 [style=solid label="'c'"]
  1350 -> 884 [style=solid label="'d'"]
  1350 -> 885 [style=solid label="'A'"]
  1350 -> 886 [style=solid label="'B'"]
  1350 -> 887 [style=solid label="'C'"]
  1350 -> 888 [style=solid label="'D'"]
  1350 -> 889 [style=dashed label="hexadecimal-digit"]
  1350 -> 1635 [style=dashed label="hexadecimal-digit-sequence"]
  1350 -> "1350R455" [style=solid]
 "1350R455" [label="R455", fillcolor=3, shape=diamond, style=filled]
  1351 [label="State 1351\n\l 87 binary-exponent-part: 'p' • digit-sequence\l 88                     | 'p' • sign digit-sequence\l"]
  1351 -> 1334 [style=solid label="PLUS"]
  1351 -> 1335 [style=solid label="MINUS"]
  1351 -> 789 [style=solid label="'0'"]
  1351 -> 790 [style=solid label="'1'"]
  1351 -> 791 [style=solid label="'2'"]
  1351 -> 792 [style=solid label="'3'"]
  1351 -> 793 [style=solid label="'4'"]
  1351 -> 794 [style=solid label="'5'"]
  1351 -> 795 [style=solid label="'6'"]
  1351 -> 796 [style=solid label="'7'"]
  1351 -> 797 [style=solid label="'8'"]
  1351 -> 798 [style=solid label="'9'"]
  1351 -> 412 [style=dashed label="digit"]
  1351 -> 1636 [style=dashed label="digit-sequence"]
  1351 -> 1637 [style=dashed label="sign"]
  1352 [label="State 1352\n\l 89 binary-exponent-part: 'P' • digit-sequence\l 90                     | 'P' • sign digit-sequence\l"]
  1352 -> 1334 [style=solid label="PLUS"]
  1352 -> 1335 [style=solid label="MINUS"]
  1352 -> 789 [style=solid label="'0'"]
  1352 -> 790 [style=solid label="'1'"]
  1352 -> 791 [style=solid label="'2'"]
  1352 -> 792 [style=solid label="'3'"]
  1352 -> 793 [style=solid label="'4'"]
  1352 -> 794 [style=solid label="'5'"]
  1352 -> 795 [style=solid label="'6'"]
  1352 -> 796 [style=solid label="'7'"]
  1352 -> 797 [style=solid label="'8'"]
  1352 -> 798 [style=solid label="'9'"]
  1352 -> 412 [style=dashed label="digit"]
  1352 -> 1638 [style=dashed label="digit-sequence"]
  1352 -> 1639 [style=dashed label="sign"]
  1353 [label="State 1353\n\l451 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part •\l452                                   | hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part • floating-point-suffix\l1154 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part • ud-suffix\l"]
  1353 -> 822 [style=solid label="IDENTIFIER"]
  1353 -> 857 [style=solid label="'L'"]
  1353 -> 858 [style=solid label="'f'"]
  1353 -> 859 [style=solid label="'l'"]
  1353 -> 860 [style=solid label="'F'"]
  1353 -> 1640 [style=dashed label="floating-point-suffix"]
  1353 -> 1641 [style=dashed label="ud-suffix"]
  1353 -> "1353R451d" [label="[IDENTIFIER]", style=solid]
 "1353R451d" [label="R451", fillcolor=5, shape=diamond, style=filled]
  1353 -> "1353R451" [style=solid]
 "1353R451" [label="R451", fillcolor=3, shape=diamond, style=filled]
  1354 [label="State 1354\n\l445 hexadecimal-digit-sequence: hexadecimal-digit-sequence hexadecimal-digit •\l"]
  1354 -> "1354R445" [style=solid]
 "1354R445" [label="R445", fillcolor=3, shape=diamond, style=filled]
  1355 [label="State 1355\n\l449 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part •\l450                                   | hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part • floating-point-suffix\l1153 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part • ud-suffix\l"]
  1355 -> 822 [style=solid label="IDENTIFIER"]
  1355 -> 857 [style=solid label="'L'"]
  1355 -> 858 [style=solid label="'f'"]
  1355 -> 859 [style=solid label="'l'"]
  1355 -> 860 [style=solid label="'F'"]
  1355 -> 1642 [style=dashed label="floating-point-suffix"]
  1355 -> 1643 [style=dashed label="ud-suffix"]
  1355 -> "1355R449d" [label="[IDENTIFIER]", style=solid]
 "1355R449d" [label="R449", fillcolor=5, shape=diamond, style=filled]
  1355 -> "1355R449" [style=solid]
 "1355R449" [label="R449", fillcolor=3, shape=diamond, style=filled]
  1356 [label="State 1356\n\l318 exclusive-or-expression: exclusive-or-expression • XOR and-expression\l464 inclusive-or-expression: inclusive-or-expression OR exclusive-or-expression •\l"]
  1356 -> 856 [style=solid label="XOR"]
  1356 -> "1356R464" [style=solid]
 "1356R464" [label="R464", fillcolor=3, shape=diamond, style=filled]
  1357 [label="State 1357\n\l529 lambda-declarator: OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN lambda-specifiers\l530                  | OPEN_PAREN parameter-declaration-clause • CLOSE_PAREN lambda-specifiers requires-clause\l"]
  1357 -> 1644 [style=solid label="CLOSE_PAREN"]
  1358 [label="State 1358\n\l693 noexcept-specifier: NOEXCEPT OPEN_PAREN • constant-expression CLOSE_PAREN\l"]
  1358 -> 356 [style=solid label="PLUS"]
  1358 -> 357 [style=solid label="MINUS"]
  1358 -> 2 [style=solid label="IDENTIFIER"]
  1358 -> 358 [style=solid label="OPEN_PAREN"]
  1358 -> 359 [style=solid label="AND"]
  1358 -> 360 [style=solid label="SCOPE"]
  1358 -> 361 [style=solid label="OPEN_SQUARE"]
  1358 -> 362 [style=solid label="CO_AWAIT"]
  1358 -> 363 [style=solid label="ZERO_LB"]
  1358 -> 364 [style=solid label="ZERO_HB"]
  1358 -> 365 [style=solid label="SINGLE_QUOTE"]
  1358 -> 366 [style=solid label="FALSE"]
  1358 -> 367 [style=solid label="TRUE"]
  1358 -> 368 [style=solid label="NOEXCEPT"]
  1358 -> 17 [style=solid label="OPERATOR"]
  1358 -> 26 [style=solid label="DECLTYPE"]
  1358 -> 369 [style=solid label="DELETE"]
  1358 -> 370 [style=solid label="DOT"]
  1358 -> 184 [style=solid label="UNICODE_8"]
  1358 -> 371 [style=solid label="MULT"]
  1358 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1358 -> 372 [style=solid label="ZERO_LX"]
  1358 -> 373 [style=solid label="ZERO_HX"]
  1358 -> 374 [style=solid label="REQUIRES"]
  1358 -> 375 [style=solid label="NEW"]
  1358 -> 376 [style=solid label="COMPL"]
  1358 -> 377 [style=solid label="NOT"]
  1358 -> 378 [style=solid label="PLUS_PLUS"]
  1358 -> 379 [style=solid label="MINUS_MINUS"]
  1358 -> 380 [style=solid label="THIS"]
  1358 -> 36 [style=solid label="AUTO"]
  1358 -> 381 [style=solid label="NULLPTR"]
  1358 -> 382 [style=solid label="DYNAMIC_CAST"]
  1358 -> 383 [style=solid label="STATIC_CAST"]
  1358 -> 384 [style=solid label="REINTERPRET_CAST"]
  1358 -> 385 [style=solid label="CONST_CAST"]
  1358 -> 386 [style=solid label="TYPEID"]
  1358 -> 37 [style=solid label="CHAR"]
  1358 -> 38 [style=solid label="CHAR8_T"]
  1358 -> 39 [style=solid label="CHAR16_T"]
  1358 -> 40 [style=solid label="CHAR32_T"]
  1358 -> 41 [style=solid label="WCHAR_T"]
  1358 -> 42 [style=solid label="BOOL"]
  1358 -> 43 [style=solid label="SHORT"]
  1358 -> 44 [style=solid label="INT"]
  1358 -> 45 [style=solid label="LONG"]
  1358 -> 46 [style=solid label="SIGNED"]
  1358 -> 47 [style=solid label="UNSIGNED"]
  1358 -> 48 [style=solid label="FLOAT"]
  1358 -> 49 [style=solid label="DOUBLE"]
  1358 -> 50 [style=solid label="VOID"]
  1358 -> 55 [style=solid label="TYPENAME"]
  1358 -> 387 [style=solid label="SIZEOF"]
  1358 -> 388 [style=solid label="ALIGNOF"]
  1358 -> 389 [style=solid label="'0'"]
  1358 -> 390 [style=solid label="'1'"]
  1358 -> 391 [style=solid label="'2'"]
  1358 -> 392 [style=solid label="'3'"]
  1358 -> 393 [style=solid label="'4'"]
  1358 -> 394 [style=solid label="'5'"]
  1358 -> 395 [style=solid label="'6'"]
  1358 -> 396 [style=solid label="'7'"]
  1358 -> 397 [style=solid label="'8'"]
  1358 -> 398 [style=solid label="'9'"]
  1358 -> 205 [style=solid label="'u'"]
  1358 -> 206 [style=solid label="'U'"]
  1358 -> 207 [style=solid label="'L'"]
  1358 -> 208 [style=solid label="'R'"]
  1358 -> 399 [style=dashed label="additive-expression"]
  1358 -> 400 [style=dashed label="and-expression"]
  1358 -> 401 [style=dashed label="await-expression"]
  1358 -> 402 [style=dashed label="binary-literal"]
  1358 -> 403 [style=dashed label="boolean-literal"]
  1358 -> 404 [style=dashed label="cast-expression"]
  1358 -> 405 [style=dashed label="character-literal"]
  1358 -> 65 [style=dashed label="class-name"]
  1358 -> 406 [style=dashed label="compare-expression"]
  1358 -> 67 [style=dashed label="concept-name"]
  1358 -> 407 [style=dashed label="conditional-expression"]
  1358 -> 1645 [style=dashed label="constant-expression"]
  1358 -> 68 [style=dashed label="conversion-function-id"]
  1358 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1358 -> 410 [style=dashed label="decimal-literal"]
  1358 -> 76 [style=dashed label="decltype-specifier"]
  1358 -> 411 [style=dashed label="delete-expression"]
  1358 -> 412 [style=dashed label="digit"]
  1358 -> 413 [style=dashed label="digit-sequence"]
  1358 -> 414 [style=dashed label="encoding-prefix"]
  1358 -> 84 [style=dashed label="enum-name"]
  1358 -> 415 [style=dashed label="equality-expression"]
  1358 -> 416 [style=dashed label="exclusive-or-expression"]
  1358 -> 417 [style=dashed label="floating-point-literal"]
  1358 -> 418 [style=dashed label="fold-expression"]
  1358 -> 419 [style=dashed label="fractional-constant"]
  1358 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1358 -> 421 [style=dashed label="hexadecimal-literal"]
  1358 -> 422 [style=dashed label="hexadecimal-prefix"]
  1358 -> 423 [style=dashed label="id-expression"]
  1358 -> 424 [style=dashed label="inclusive-or-expression"]
  1358 -> 425 [style=dashed label="integer-literal"]
  1358 -> 426 [style=dashed label="lambda-expression"]
  1358 -> 427 [style=dashed label="lambda-introducer"]
  1358 -> 428 [style=dashed label="literal"]
  1358 -> 95 [style=dashed label="literal-operator-id"]
  1358 -> 429 [style=dashed label="logical-and-expression"]
  1358 -> 430 [style=dashed label="logical-or-expression"]
  1358 -> 431 [style=dashed label="multiplicative-expression"]
  1358 -> 99 [style=dashed label="namespace-alias"]
  1358 -> 102 [style=dashed label="namespace-name"]
  1358 -> 432 [style=dashed label="nested-name-specifier"]
  1358 -> 433 [style=dashed label="new-expression"]
  1358 -> 434 [style=dashed label="noexcept-expression"]
  1358 -> 435 [style=dashed label="nonzero-digit"]
  1358 -> 436 [style=dashed label="octal-literal"]
  1358 -> 108 [style=dashed label="operator-function-id"]
  1358 -> 109 [style=dashed label="placeholder-type-specifier"]
  1358 -> 437 [style=dashed label="pm-expression"]
  1358 -> 438 [style=dashed label="pointer-literal"]
  1358 -> 439 [style=dashed label="postfix-expression"]
  1358 -> 440 [style=dashed label="primary-expression"]
  1358 -> 112 [style=dashed label="qualified-id"]
  1358 -> 441 [style=dashed label="relational-expression"]
  1358 -> 442 [style=dashed label="requires-expression"]
  1358 -> 443 [style=dashed label="shift-expression"]
  1358 -> 114 [style=dashed label="simple-template-id"]
  1358 -> 529 [style=dashed label="simple-type-specifier"]
  1358 -> 445 [style=dashed label="string-literal"]
  1358 -> 120 [style=dashed label="template-id"]
  1358 -> 215 [style=dashed label="template-name"]
  1358 -> 123 [style=dashed label="type-constraint"]
  1358 -> 124 [style=dashed label="type-name"]
  1358 -> 126 [style=dashed label="typedef-name"]
  1358 -> 531 [style=dashed label="typename-specifier"]
  1358 -> 449 [style=dashed label="unary-expression"]
  1358 -> 450 [style=dashed label="unary-operator"]
  1358 -> 129 [style=dashed label="unqualified-id"]
  1358 -> 451 [style=dashed label="user-defined-character-literal"]
  1358 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1358 -> 453 [style=dashed label="user-defined-integer-literal"]
  1358 -> 454 [style=dashed label="user-defined-literal"]
  1358 -> 455 [style=dashed label="user-defined-string-literal"]
  1359 [label="State 1359\n\l532 lambda-expression: lambda-introducer LESS template-parameter-list • GREATER lambda-declarator compound-statement\l533                  | lambda-introducer LESS template-parameter-list • GREATER requires-clause lambda-declarator compound-statement\l1056 template-parameter-list: template-parameter-list • COMMA template-parameter\l"]
  1359 -> 977 [style=solid label="COMMA"]
  1359 -> 1646 [style=solid label="GREATER"]
  1360 [label="State 1360\n\l548 lambda-specifiers: attribute-specifier-seq trailing-return-type •\l"]
  1360 -> "1360R548" [style=solid]
 "1360R548" [label="R548", fillcolor=3, shape=diamond, style=filled]
  1361 [label="State 1361\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l539 lambda-specifiers: decl-specifier-seq attribute-specifier-seq •\l547                  | decl-specifier-seq attribute-specifier-seq • trailing-return-type\l"]
  1361 -> 4 [style=solid label="ALIGNAS"]
  1361 -> 10 [style=solid label="OPEN_SQUARE"]
  1361 -> 736 [style=solid label="DEREF"]
  1361 -> 57 [style=dashed label="alignment-specifier"]
  1361 -> 260 [style=dashed label="attribute-specifier"]
  1361 -> 1647 [style=dashed label="trailing-return-type"]
  1361 -> "1361R539" [style=solid]
 "1361R539" [label="R539", fillcolor=3, shape=diamond, style=filled]
  1362 [label="State 1362\n\l537 lambda-specifiers: decl-specifier-seq noexcept-specifier •\l541                  | decl-specifier-seq noexcept-specifier • attribute-specifier-seq\l545                  | decl-specifier-seq noexcept-specifier • trailing-return-type\l549                  | decl-specifier-seq noexcept-specifier • attribute-specifier-seq trailing-return-type\l"]
  1362 -> 4 [style=solid label="ALIGNAS"]
  1362 -> 10 [style=solid label="OPEN_SQUARE"]
  1362 -> 736 [style=solid label="DEREF"]
  1362 -> 57 [style=dashed label="alignment-specifier"]
  1362 -> 60 [style=dashed label="attribute-specifier"]
  1362 -> 1648 [style=dashed label="attribute-specifier-seq"]
  1362 -> 1649 [style=dashed label="trailing-return-type"]
  1362 -> "1362R537" [style=solid]
 "1362R537" [label="R537", fillcolor=3, shape=diamond, style=filled]
  1363 [label="State 1363\n\l543 lambda-specifiers: decl-specifier-seq trailing-return-type •\l"]
  1363 -> "1363R543" [style=solid]
 "1363R543" [label="R543", fillcolor=3, shape=diamond, style=filled]
  1364 [label="State 1364\n\l531 lambda-expression: lambda-introducer lambda-declarator compound-statement •\l"]
  1364 -> "1364R531" [style=solid]
 "1364R531" [label="R531", fillcolor=3, shape=diamond, style=filled]
  1365 [label="State 1365\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l542 lambda-specifiers: noexcept-specifier attribute-specifier-seq •\l550                  | noexcept-specifier attribute-specifier-seq • trailing-return-type\l"]
  1365 -> 4 [style=solid label="ALIGNAS"]
  1365 -> 10 [style=solid label="OPEN_SQUARE"]
  1365 -> 736 [style=solid label="DEREF"]
  1365 -> 57 [style=dashed label="alignment-specifier"]
  1365 -> 260 [style=dashed label="attribute-specifier"]
  1365 -> 1650 [style=dashed label="trailing-return-type"]
  1365 -> "1365R542" [style=solid]
 "1365R542" [label="R542", fillcolor=3, shape=diamond, style=filled]
  1366 [label="State 1366\n\l546 lambda-specifiers: noexcept-specifier trailing-return-type •\l"]
  1366 -> "1366R546" [style=solid]
 "1366R546" [label="R546", fillcolor=3, shape=diamond, style=filled]
  1367 [label="State 1367\n\l464 inclusive-or-expression: inclusive-or-expression • OR exclusive-or-expression\l564 logical-and-expression: logical-and-expression AND_AND inclusive-or-expression •\l"]
  1367 -> 892 [style=solid label="OR"]
  1367 -> "1367R564" [style=solid]
 "1367R564" [label="R564", fillcolor=3, shape=diamond, style=filled]
  1368 [label="State 1368\n\l170 conditional-expression: logical-or-expression QUERY expression • COLON assignment-expression\l335 expression: expression • COMMA assignment-expression\l"]
  1368 -> 1029 [style=solid label="COMMA"]
  1368 -> 1651 [style=solid label="COLON"]
  1369 [label="State 1369\n\l564 logical-and-expression: logical-and-expression • AND_AND inclusive-or-expression\l566 logical-or-expression: logical-or-expression OR_OR logical-and-expression •\l"]
  1369 -> 902 [style=solid label="AND_AND"]
  1369 -> "1369R566" [style=solid]
 "1369R566" [label="R566", fillcolor=3, shape=diamond, style=filled]
  1370 [label="State 1370\n\l640 multiplicative-expression: multiplicative-expression MULT pm-expression •\l853 pm-expression: pm-expression • DOT_STAR cast-expression\l854              | pm-expression • DEREF_STAR cast-expression\l"]
  1370 -> 920 [style=solid label="DOT_STAR"]
  1370 -> 921 [style=solid label="DEREF_STAR"]
  1370 -> "1370R640" [style=solid]
 "1370R640" [label="R640", fillcolor=3, shape=diamond, style=filled]
  1371 [label="State 1371\n\l641 multiplicative-expression: multiplicative-expression DIV pm-expression •\l853 pm-expression: pm-expression • DOT_STAR cast-expression\l854              | pm-expression • DEREF_STAR cast-expression\l"]
  1371 -> 920 [style=solid label="DOT_STAR"]
  1371 -> 921 [style=solid label="DEREF_STAR"]
  1371 -> "1371R641" [style=solid]
 "1371R641" [label="R641", fillcolor=3, shape=diamond, style=filled]
  1372 [label="State 1372\n\l642 multiplicative-expression: multiplicative-expression MOD pm-expression •\l853 pm-expression: pm-expression • DOT_STAR cast-expression\l854              | pm-expression • DEREF_STAR cast-expression\l"]
  1372 -> 920 [style=solid label="DOT_STAR"]
  1372 -> 921 [style=solid label="DEREF_STAR"]
  1372 -> "1372R642" [style=solid]
 "1372R642" [label="R642", fillcolor=3, shape=diamond, style=filled]
  1373 [label="State 1373\n\l750 octal-literal: octal-literal SINGLE_QUOTE octal-digit •\l"]
  1373 -> "1373R750" [style=solid]
 "1373R750" [label="R750", fillcolor=3, shape=diamond, style=filled]
  1374 [label="State 1374\n\l853 pm-expression: pm-expression DOT_STAR cast-expression •\l"]
  1374 -> "1374R853" [style=solid]
 "1374R853" [label="R853", fillcolor=3, shape=diamond, style=filled]
  1375 [label="State 1375\n\l854 pm-expression: pm-expression DEREF_STAR cast-expression •\l"]
  1375 -> "1375R854" [style=solid]
 "1375R854" [label="R854", fillcolor=3, shape=diamond, style=filled]
  1376 [label="State 1376\n\l859 postfix-expression: postfix-expression OPEN_PAREN CLOSE_PAREN •\l"]
  1376 -> "1376R859" [style=solid]
 "1376R859" [label="R859", fillcolor=3, shape=diamond, style=filled]
  1377 [label="State 1377\n\l860 postfix-expression: postfix-expression OPEN_PAREN expression-list • CLOSE_PAREN\l"]
  1377 -> 1652 [style=solid label="CLOSE_PAREN"]
  1378 [label="State 1378\n\l857 postfix-expression: postfix-expression OPEN_SQUARE CLOSE_SQUARE •\l"]
  1378 -> "1378R857" [style=solid]
 "1378R857" [label="R857", fillcolor=3, shape=diamond, style=filled]
  1379 [label="State 1379\n\l858 postfix-expression: postfix-expression OPEN_SQUARE expression-list • CLOSE_SQUARE\l"]
  1379 -> 1653 [style=solid label="CLOSE_SQUARE"]
  1380 [label="State 1380\n\l870 postfix-expression: postfix-expression DEREF TEMPLATE • id-expression\l"]
  1380 -> 147 [style=solid label="IDENTIFIER"]
  1380 -> 9 [style=solid label="SCOPE"]
  1380 -> 17 [style=solid label="OPERATOR"]
  1380 -> 134 [style=solid label="DECLTYPE"]
  1380 -> 35 [style=solid label="COMPL"]
  1380 -> 65 [style=dashed label="class-name"]
  1380 -> 68 [style=dashed label="conversion-function-id"]
  1380 -> 138 [style=dashed label="decltype-specifier"]
  1380 -> 84 [style=dashed label="enum-name"]
  1380 -> 1654 [style=dashed label="id-expression"]
  1380 -> 95 [style=dashed label="literal-operator-id"]
  1380 -> 99 [style=dashed label="namespace-alias"]
  1380 -> 102 [style=dashed label="namespace-name"]
  1380 -> 152 [style=dashed label="nested-name-specifier"]
  1380 -> 108 [style=dashed label="operator-function-id"]
  1380 -> 112 [style=dashed label="qualified-id"]
  1380 -> 114 [style=dashed label="simple-template-id"]
  1380 -> 120 [style=dashed label="template-id"]
  1380 -> 142 [style=dashed label="template-name"]
  1380 -> 143 [style=dashed label="type-name"]
  1380 -> 126 [style=dashed label="typedef-name"]
  1380 -> 129 [style=dashed label="unqualified-id"]
  1381 [label="State 1381\n\l869 postfix-expression: postfix-expression DEREF id-expression •\l"]
  1381 -> "1381R869" [style=solid]
 "1381R869" [label="R869", fillcolor=3, shape=diamond, style=filled]
  1382 [label="State 1382\n\l868 postfix-expression: postfix-expression DOT TEMPLATE • id-expression\l"]
  1382 -> 147 [style=solid label="IDENTIFIER"]
  1382 -> 9 [style=solid label="SCOPE"]
  1382 -> 17 [style=solid label="OPERATOR"]
  1382 -> 134 [style=solid label="DECLTYPE"]
  1382 -> 35 [style=solid label="COMPL"]
  1382 -> 65 [style=dashed label="class-name"]
  1382 -> 68 [style=dashed label="conversion-function-id"]
  1382 -> 138 [style=dashed label="decltype-specifier"]
  1382 -> 84 [style=dashed label="enum-name"]
  1382 -> 1655 [style=dashed label="id-expression"]
  1382 -> 95 [style=dashed label="literal-operator-id"]
  1382 -> 99 [style=dashed label="namespace-alias"]
  1382 -> 102 [style=dashed label="namespace-name"]
  1382 -> 152 [style=dashed label="nested-name-specifier"]
  1382 -> 108 [style=dashed label="operator-function-id"]
  1382 -> 112 [style=dashed label="qualified-id"]
  1382 -> 114 [style=dashed label="simple-template-id"]
  1382 -> 120 [style=dashed label="template-id"]
  1382 -> 142 [style=dashed label="template-name"]
  1382 -> 143 [style=dashed label="type-name"]
  1382 -> 126 [style=dashed label="typedef-name"]
  1382 -> 129 [style=dashed label="unqualified-id"]
  1383 [label="State 1383\n\l867 postfix-expression: postfix-expression DOT id-expression •\l"]
  1383 -> "1383R867" [style=solid]
 "1383R867" [label="R867", fillcolor=3, shape=diamond, style=filled]
  1384 [label="State 1384\n\l155 compare-expression: compare-expression • SPACESHIP shift-expression\l917 relational-expression: relational-expression LESS compare-expression •\l"]
  1384 -> 840 [style=solid label="SPACESHIP"]
  1384 -> "1384R917" [style=solid]
 "1384R917" [label="R917", fillcolor=3, shape=diamond, style=filled]
  1385 [label="State 1385\n\l155 compare-expression: compare-expression • SPACESHIP shift-expression\l918 relational-expression: relational-expression GREATER compare-expression •\l"]
  1385 -> 840 [style=solid label="SPACESHIP"]
  1385 -> "1385R918" [style=solid]
 "1385R918" [label="R918", fillcolor=3, shape=diamond, style=filled]
  1386 [label="State 1386\n\l155 compare-expression: compare-expression • SPACESHIP shift-expression\l919 relational-expression: relational-expression LESS_EQ compare-expression •\l"]
  1386 -> 840 [style=solid label="SPACESHIP"]
  1386 -> "1386R919" [style=solid]
 "1386R919" [label="R919", fillcolor=3, shape=diamond, style=filled]
  1387 [label="State 1387\n\l155 compare-expression: compare-expression • SPACESHIP shift-expression\l920 relational-expression: relational-expression GREATER_EQ compare-expression •\l"]
  1387 -> 840 [style=solid label="SPACESHIP"]
  1387 -> "1387R920" [style=solid]
 "1387R920" [label="R920", fillcolor=3, shape=diamond, style=filled]
  1388 [label="State 1388\n\l 11 additive-expression: additive-expression • PLUS multiplicative-expression\l 12                    | additive-expression • MINUS multiplicative-expression\l953 shift-expression: shift-expression LSHIFT additive-expression •\l"]
  1388 -> 819 [style=solid label="PLUS"]
  1388 -> 820 [style=solid label="MINUS"]
  1388 -> "1388R953" [style=solid]
 "1388R953" [label="R953", fillcolor=3, shape=diamond, style=filled]
  1389 [label="State 1389\n\l 11 additive-expression: additive-expression • PLUS multiplicative-expression\l 12                    | additive-expression • MINUS multiplicative-expression\l954 shift-expression: shift-expression RSHIFT additive-expression •\l"]
  1389 -> 819 [style=solid label="PLUS"]
  1389 -> 820 [style=solid label="MINUS"]
  1389 -> "1389R954" [style=solid]
 "1389R954" [label="R954", fillcolor=3, shape=diamond, style=filled]
  1390 [label="State 1390\n\l861 postfix-expression: simple-type-specifier OPEN_PAREN CLOSE_PAREN •\l"]
  1390 -> "1390R861" [style=solid]
 "1390R861" [label="R861", fillcolor=3, shape=diamond, style=filled]
  1391 [label="State 1391\n\l862 postfix-expression: simple-type-specifier OPEN_PAREN expression-list • CLOSE_PAREN\l"]
  1391 -> 1656 [style=solid label="CLOSE_PAREN"]
  1392 [label="State 1392\n\l112 braced-init-list: OPEN_BRACE CLOSE_BRACE •\l"]
  1392 -> "1392R112" [style=solid]
 "1392R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
  1393 [label="State 1393\n\l 16 alignment-specifier: ALIGNAS OPEN_PAREN type-id ELLIPSIS CLOSE_PAREN •\l"]
  1393 -> "1393R16" [style=solid]
 "1393R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  1394 [label="State 1394\n\l 50 attribute-specifier: OPEN_SQUARE • OPEN_SQUARE attribute-list CLOSE_SQUARE CLOSE_SQUARE\l 51                    | OPEN_SQUARE • OPEN_SQUARE attribute-using-prefix attribute-list CLOSE_SQUARE CLOSE_SQUARE\l707 noptr-abstract-declarator: OPEN_SQUARE • CLOSE_SQUARE\l709                          | OPEN_SQUARE • constant-expression CLOSE_SQUARE\l711                          | OPEN_SQUARE • CLOSE_SQUARE attribute-specifier-seq\l713                          | OPEN_SQUARE • constant-expression CLOSE_SQUARE attribute-specifier-seq\l"]
  1394 -> 356 [style=solid label="PLUS"]
  1394 -> 357 [style=solid label="MINUS"]
  1394 -> 2 [style=solid label="IDENTIFIER"]
  1394 -> 358 [style=solid label="OPEN_PAREN"]
  1394 -> 359 [style=solid label="AND"]
  1394 -> 360 [style=solid label="SCOPE"]
  1394 -> 1657 [style=solid label="OPEN_SQUARE"]
  1394 -> 1400 [style=solid label="CLOSE_SQUARE"]
  1394 -> 362 [style=solid label="CO_AWAIT"]
  1394 -> 363 [style=solid label="ZERO_LB"]
  1394 -> 364 [style=solid label="ZERO_HB"]
  1394 -> 365 [style=solid label="SINGLE_QUOTE"]
  1394 -> 366 [style=solid label="FALSE"]
  1394 -> 367 [style=solid label="TRUE"]
  1394 -> 368 [style=solid label="NOEXCEPT"]
  1394 -> 17 [style=solid label="OPERATOR"]
  1394 -> 26 [style=solid label="DECLTYPE"]
  1394 -> 369 [style=solid label="DELETE"]
  1394 -> 370 [style=solid label="DOT"]
  1394 -> 184 [style=solid label="UNICODE_8"]
  1394 -> 371 [style=solid label="MULT"]
  1394 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1394 -> 372 [style=solid label="ZERO_LX"]
  1394 -> 373 [style=solid label="ZERO_HX"]
  1394 -> 374 [style=solid label="REQUIRES"]
  1394 -> 375 [style=solid label="NEW"]
  1394 -> 376 [style=solid label="COMPL"]
  1394 -> 377 [style=solid label="NOT"]
  1394 -> 378 [style=solid label="PLUS_PLUS"]
  1394 -> 379 [style=solid label="MINUS_MINUS"]
  1394 -> 380 [style=solid label="THIS"]
  1394 -> 36 [style=solid label="AUTO"]
  1394 -> 381 [style=solid label="NULLPTR"]
  1394 -> 382 [style=solid label="DYNAMIC_CAST"]
  1394 -> 383 [style=solid label="STATIC_CAST"]
  1394 -> 384 [style=solid label="REINTERPRET_CAST"]
  1394 -> 385 [style=solid label="CONST_CAST"]
  1394 -> 386 [style=solid label="TYPEID"]
  1394 -> 37 [style=solid label="CHAR"]
  1394 -> 38 [style=solid label="CHAR8_T"]
  1394 -> 39 [style=solid label="CHAR16_T"]
  1394 -> 40 [style=solid label="CHAR32_T"]
  1394 -> 41 [style=solid label="WCHAR_T"]
  1394 -> 42 [style=solid label="BOOL"]
  1394 -> 43 [style=solid label="SHORT"]
  1394 -> 44 [style=solid label="INT"]
  1394 -> 45 [style=solid label="LONG"]
  1394 -> 46 [style=solid label="SIGNED"]
  1394 -> 47 [style=solid label="UNSIGNED"]
  1394 -> 48 [style=solid label="FLOAT"]
  1394 -> 49 [style=solid label="DOUBLE"]
  1394 -> 50 [style=solid label="VOID"]
  1394 -> 55 [style=solid label="TYPENAME"]
  1394 -> 387 [style=solid label="SIZEOF"]
  1394 -> 388 [style=solid label="ALIGNOF"]
  1394 -> 389 [style=solid label="'0'"]
  1394 -> 390 [style=solid label="'1'"]
  1394 -> 391 [style=solid label="'2'"]
  1394 -> 392 [style=solid label="'3'"]
  1394 -> 393 [style=solid label="'4'"]
  1394 -> 394 [style=solid label="'5'"]
  1394 -> 395 [style=solid label="'6'"]
  1394 -> 396 [style=solid label="'7'"]
  1394 -> 397 [style=solid label="'8'"]
  1394 -> 398 [style=solid label="'9'"]
  1394 -> 205 [style=solid label="'u'"]
  1394 -> 206 [style=solid label="'U'"]
  1394 -> 207 [style=solid label="'L'"]
  1394 -> 208 [style=solid label="'R'"]
  1394 -> 399 [style=dashed label="additive-expression"]
  1394 -> 400 [style=dashed label="and-expression"]
  1394 -> 401 [style=dashed label="await-expression"]
  1394 -> 402 [style=dashed label="binary-literal"]
  1394 -> 403 [style=dashed label="boolean-literal"]
  1394 -> 404 [style=dashed label="cast-expression"]
  1394 -> 405 [style=dashed label="character-literal"]
  1394 -> 65 [style=dashed label="class-name"]
  1394 -> 406 [style=dashed label="compare-expression"]
  1394 -> 67 [style=dashed label="concept-name"]
  1394 -> 407 [style=dashed label="conditional-expression"]
  1394 -> 1401 [style=dashed label="constant-expression"]
  1394 -> 68 [style=dashed label="conversion-function-id"]
  1394 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1394 -> 410 [style=dashed label="decimal-literal"]
  1394 -> 76 [style=dashed label="decltype-specifier"]
  1394 -> 411 [style=dashed label="delete-expression"]
  1394 -> 412 [style=dashed label="digit"]
  1394 -> 413 [style=dashed label="digit-sequence"]
  1394 -> 414 [style=dashed label="encoding-prefix"]
  1394 -> 84 [style=dashed label="enum-name"]
  1394 -> 415 [style=dashed label="equality-expression"]
  1394 -> 416 [style=dashed label="exclusive-or-expression"]
  1394 -> 417 [style=dashed label="floating-point-literal"]
  1394 -> 418 [style=dashed label="fold-expression"]
  1394 -> 419 [style=dashed label="fractional-constant"]
  1394 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1394 -> 421 [style=dashed label="hexadecimal-literal"]
  1394 -> 422 [style=dashed label="hexadecimal-prefix"]
  1394 -> 423 [style=dashed label="id-expression"]
  1394 -> 424 [style=dashed label="inclusive-or-expression"]
  1394 -> 425 [style=dashed label="integer-literal"]
  1394 -> 426 [style=dashed label="lambda-expression"]
  1394 -> 427 [style=dashed label="lambda-introducer"]
  1394 -> 428 [style=dashed label="literal"]
  1394 -> 95 [style=dashed label="literal-operator-id"]
  1394 -> 429 [style=dashed label="logical-and-expression"]
  1394 -> 430 [style=dashed label="logical-or-expression"]
  1394 -> 431 [style=dashed label="multiplicative-expression"]
  1394 -> 99 [style=dashed label="namespace-alias"]
  1394 -> 102 [style=dashed label="namespace-name"]
  1394 -> 432 [style=dashed label="nested-name-specifier"]
  1394 -> 433 [style=dashed label="new-expression"]
  1394 -> 434 [style=dashed label="noexcept-expression"]
  1394 -> 435 [style=dashed label="nonzero-digit"]
  1394 -> 436 [style=dashed label="octal-literal"]
  1394 -> 108 [style=dashed label="operator-function-id"]
  1394 -> 109 [style=dashed label="placeholder-type-specifier"]
  1394 -> 437 [style=dashed label="pm-expression"]
  1394 -> 438 [style=dashed label="pointer-literal"]
  1394 -> 439 [style=dashed label="postfix-expression"]
  1394 -> 440 [style=dashed label="primary-expression"]
  1394 -> 112 [style=dashed label="qualified-id"]
  1394 -> 441 [style=dashed label="relational-expression"]
  1394 -> 442 [style=dashed label="requires-expression"]
  1394 -> 443 [style=dashed label="shift-expression"]
  1394 -> 114 [style=dashed label="simple-template-id"]
  1394 -> 529 [style=dashed label="simple-type-specifier"]
  1394 -> 445 [style=dashed label="string-literal"]
  1394 -> 120 [style=dashed label="template-id"]
  1394 -> 215 [style=dashed label="template-name"]
  1394 -> 123 [style=dashed label="type-constraint"]
  1394 -> 124 [style=dashed label="type-name"]
  1394 -> 126 [style=dashed label="typedef-name"]
  1394 -> 531 [style=dashed label="typename-specifier"]
  1394 -> 449 [style=dashed label="unary-expression"]
  1394 -> 450 [style=dashed label="unary-operator"]
  1394 -> 129 [style=dashed label="unqualified-id"]
  1394 -> 451 [style=dashed label="user-defined-character-literal"]
  1394 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1394 -> 453 [style=dashed label="user-defined-integer-literal"]
  1394 -> 454 [style=dashed label="user-defined-literal"]
  1394 -> 455 [style=dashed label="user-defined-string-literal"]
  1395 [label="State 1395\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l901 ptr-operator: nested-name-specifier • MULT\l902             | nested-name-specifier • MULT attribute-specifier-seq\l903             | nested-name-specifier • MULT cv-qualifier-seq\l904             | nested-name-specifier • MULT attribute-specifier-seq cv-qualifier-seq\l985 simple-type-specifier: nested-name-specifier • type-name\l987                      | nested-name-specifier • TEMPLATE simple-template-id\l990                      | nested-name-specifier • template-name\l1070 type-constraint: nested-name-specifier • concept-name\l1072                | nested-name-specifier • concept-name LESS GREATER\l1074                | nested-name-specifier • concept-name LESS template-argument-list GREATER\l"]
  1395 -> 508 [style=solid label="IDENTIFIER"]
  1395 -> 509 [style=solid label="TEMPLATE"]
  1395 -> 322 [style=solid label="MULT"]
  1395 -> 65 [style=dashed label="class-name"]
  1395 -> 323 [style=dashed label="concept-name"]
  1395 -> 84 [style=dashed label="enum-name"]
  1395 -> 510 [style=dashed label="simple-template-id"]
  1395 -> 325 [style=dashed label="template-name"]
  1395 -> 326 [style=dashed label="type-name"]
  1395 -> 126 [style=dashed label="typedef-name"]
  1396 [label="State 1396\n\l704 noptr-abstract-declarator: noptr-abstract-declarator • parameters-and-qualifiers\l706                          | noptr-abstract-declarator • OPEN_SQUARE CLOSE_SQUARE\l708                          | noptr-abstract-declarator • OPEN_SQUARE constant-expression CLOSE_SQUARE\l710                          | noptr-abstract-declarator • OPEN_SQUARE CLOSE_SQUARE attribute-specifier-seq\l712                          | noptr-abstract-declarator • OPEN_SQUARE constant-expression CLOSE_SQUARE attribute-specifier-seq\l888 ptr-abstract-declarator: noptr-abstract-declarator •\l"]
  1396 -> 328 [style=solid label="OPEN_PAREN"]
  1396 -> 1402 [style=solid label="OPEN_SQUARE"]
  1396 -> 1658 [style=dashed label="parameters-and-qualifiers"]
  1396 -> "1396R888d" [label="[OPEN_PAREN]", style=solid]
 "1396R888d" [label="R888", fillcolor=5, shape=diamond, style=filled]
  1396 -> "1396R888" [style=solid]
 "1396R888" [label="R888", fillcolor=3, shape=diamond, style=filled]
  1397 [label="State 1397\n\l705 noptr-abstract-declarator: parameters-and-qualifiers •\l"]
  1397 -> "1397R705" [style=solid]
 "1397R705" [label="R705", fillcolor=3, shape=diamond, style=filled]
  1398 [label="State 1398\n\l714 noptr-abstract-declarator: OPEN_PAREN ptr-abstract-declarator • CLOSE_PAREN\l"]
  1398 -> 1659 [style=solid label="CLOSE_PAREN"]
  1399 [label="State 1399\n\l889 ptr-abstract-declarator: ptr-operator •\l890                        | ptr-operator • ptr-abstract-declarator\l"]
  1399 -> 253 [style=solid label="IDENTIFIER"]
  1399 -> 939 [style=solid label="OPEN_PAREN"]
  1399 -> 7 [style=solid label="AND"]
  1399 -> 9 [style=solid label="SCOPE"]
  1399 -> 941 [style=solid label="OPEN_SQUARE"]
  1399 -> 16 [style=solid label="AND_AND"]
  1399 -> 134 [style=solid label="DECLTYPE"]
  1399 -> 31 [style=solid label="MULT"]
  1399 -> 65 [style=dashed label="class-name"]
  1399 -> 138 [style=dashed label="decltype-specifier"]
  1399 -> 84 [style=dashed label="enum-name"]
  1399 -> 99 [style=dashed label="namespace-alias"]
  1399 -> 102 [style=dashed label="namespace-name"]
  1399 -> 517 [style=dashed label="nested-name-specifier"]
  1399 -> 1396 [style=dashed label="noptr-abstract-declarator"]
  1399 -> 1397 [style=dashed label="parameters-and-qualifiers"]
  1399 -> 1408 [style=dashed label="ptr-abstract-declarator"]
  1399 -> 1399 [style=dashed label="ptr-operator"]
  1399 -> 141 [style=dashed label="simple-template-id"]
  1399 -> 142 [style=dashed label="template-name"]
  1399 -> 143 [style=dashed label="type-name"]
  1399 -> 126 [style=dashed label="typedef-name"]
  1399 -> "1399R889" [style=solid]
 "1399R889" [label="R889", fillcolor=3, shape=diamond, style=filled]
  1400 [label="State 1400\n\l707 noptr-abstract-declarator: OPEN_SQUARE CLOSE_SQUARE •\l711                          | OPEN_SQUARE CLOSE_SQUARE • attribute-specifier-seq\l"]
  1400 -> 4 [style=solid label="ALIGNAS"]
  1400 -> 10 [style=solid label="OPEN_SQUARE"]
  1400 -> 57 [style=dashed label="alignment-specifier"]
  1400 -> 60 [style=dashed label="attribute-specifier"]
  1400 -> 1660 [style=dashed label="attribute-specifier-seq"]
  1400 -> "1400R707d" [label="[OPEN_SQUARE]", style=solid]
 "1400R707d" [label="R707", fillcolor=5, shape=diamond, style=filled]
  1400 -> "1400R707" [style=solid]
 "1400R707" [label="R707", fillcolor=3, shape=diamond, style=filled]
  1401 [label="State 1401\n\l709 noptr-abstract-declarator: OPEN_SQUARE constant-expression • CLOSE_SQUARE\l713                          | OPEN_SQUARE constant-expression • CLOSE_SQUARE attribute-specifier-seq\l"]
  1401 -> 1661 [style=solid label="CLOSE_SQUARE"]
  1402 [label="State 1402\n\l706 noptr-abstract-declarator: noptr-abstract-declarator OPEN_SQUARE • CLOSE_SQUARE\l708                          | noptr-abstract-declarator OPEN_SQUARE • constant-expression CLOSE_SQUARE\l710                          | noptr-abstract-declarator OPEN_SQUARE • CLOSE_SQUARE attribute-specifier-seq\l712                          | noptr-abstract-declarator OPEN_SQUARE • constant-expression CLOSE_SQUARE attribute-specifier-seq\l"]
  1402 -> 356 [style=solid label="PLUS"]
  1402 -> 357 [style=solid label="MINUS"]
  1402 -> 2 [style=solid label="IDENTIFIER"]
  1402 -> 358 [style=solid label="OPEN_PAREN"]
  1402 -> 359 [style=solid label="AND"]
  1402 -> 360 [style=solid label="SCOPE"]
  1402 -> 361 [style=solid label="OPEN_SQUARE"]
  1402 -> 1662 [style=solid label="CLOSE_SQUARE"]
  1402 -> 362 [style=solid label="CO_AWAIT"]
  1402 -> 363 [style=solid label="ZERO_LB"]
  1402 -> 364 [style=solid label="ZERO_HB"]
  1402 -> 365 [style=solid label="SINGLE_QUOTE"]
  1402 -> 366 [style=solid label="FALSE"]
  1402 -> 367 [style=solid label="TRUE"]
  1402 -> 368 [style=solid label="NOEXCEPT"]
  1402 -> 17 [style=solid label="OPERATOR"]
  1402 -> 26 [style=solid label="DECLTYPE"]
  1402 -> 369 [style=solid label="DELETE"]
  1402 -> 370 [style=solid label="DOT"]
  1402 -> 184 [style=solid label="UNICODE_8"]
  1402 -> 371 [style=solid label="MULT"]
  1402 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1402 -> 372 [style=solid label="ZERO_LX"]
  1402 -> 373 [style=solid label="ZERO_HX"]
  1402 -> 374 [style=solid label="REQUIRES"]
  1402 -> 375 [style=solid label="NEW"]
  1402 -> 376 [style=solid label="COMPL"]
  1402 -> 377 [style=solid label="NOT"]
  1402 -> 378 [style=solid label="PLUS_PLUS"]
  1402 -> 379 [style=solid label="MINUS_MINUS"]
  1402 -> 380 [style=solid label="THIS"]
  1402 -> 36 [style=solid label="AUTO"]
  1402 -> 381 [style=solid label="NULLPTR"]
  1402 -> 382 [style=solid label="DYNAMIC_CAST"]
  1402 -> 383 [style=solid label="STATIC_CAST"]
  1402 -> 384 [style=solid label="REINTERPRET_CAST"]
  1402 -> 385 [style=solid label="CONST_CAST"]
  1402 -> 386 [style=solid label="TYPEID"]
  1402 -> 37 [style=solid label="CHAR"]
  1402 -> 38 [style=solid label="CHAR8_T"]
  1402 -> 39 [style=solid label="CHAR16_T"]
  1402 -> 40 [style=solid label="CHAR32_T"]
  1402 -> 41 [style=solid label="WCHAR_T"]
  1402 -> 42 [style=solid label="BOOL"]
  1402 -> 43 [style=solid label="SHORT"]
  1402 -> 44 [style=solid label="INT"]
  1402 -> 45 [style=solid label="LONG"]
  1402 -> 46 [style=solid label="SIGNED"]
  1402 -> 47 [style=solid label="UNSIGNED"]
  1402 -> 48 [style=solid label="FLOAT"]
  1402 -> 49 [style=solid label="DOUBLE"]
  1402 -> 50 [style=solid label="VOID"]
  1402 -> 55 [style=solid label="TYPENAME"]
  1402 -> 387 [style=solid label="SIZEOF"]
  1402 -> 388 [style=solid label="ALIGNOF"]
  1402 -> 389 [style=solid label="'0'"]
  1402 -> 390 [style=solid label="'1'"]
  1402 -> 391 [style=solid label="'2'"]
  1402 -> 392 [style=solid label="'3'"]
  1402 -> 393 [style=solid label="'4'"]
  1402 -> 394 [style=solid label="'5'"]
  1402 -> 395 [style=solid label="'6'"]
  1402 -> 396 [style=solid label="'7'"]
  1402 -> 397 [style=solid label="'8'"]
  1402 -> 398 [style=solid label="'9'"]
  1402 -> 205 [style=solid label="'u'"]
  1402 -> 206 [style=solid label="'U'"]
  1402 -> 207 [style=solid label="'L'"]
  1402 -> 208 [style=solid label="'R'"]
  1402 -> 399 [style=dashed label="additive-expression"]
  1402 -> 400 [style=dashed label="and-expression"]
  1402 -> 401 [style=dashed label="await-expression"]
  1402 -> 402 [style=dashed label="binary-literal"]
  1402 -> 403 [style=dashed label="boolean-literal"]
  1402 -> 404 [style=dashed label="cast-expression"]
  1402 -> 405 [style=dashed label="character-literal"]
  1402 -> 65 [style=dashed label="class-name"]
  1402 -> 406 [style=dashed label="compare-expression"]
  1402 -> 67 [style=dashed label="concept-name"]
  1402 -> 407 [style=dashed label="conditional-expression"]
  1402 -> 1663 [style=dashed label="constant-expression"]
  1402 -> 68 [style=dashed label="conversion-function-id"]
  1402 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1402 -> 410 [style=dashed label="decimal-literal"]
  1402 -> 76 [style=dashed label="decltype-specifier"]
  1402 -> 411 [style=dashed label="delete-expression"]
  1402 -> 412 [style=dashed label="digit"]
  1402 -> 413 [style=dashed label="digit-sequence"]
  1402 -> 414 [style=dashed label="encoding-prefix"]
  1402 -> 84 [style=dashed label="enum-name"]
  1402 -> 415 [style=dashed label="equality-expression"]
  1402 -> 416 [style=dashed label="exclusive-or-expression"]
  1402 -> 417 [style=dashed label="floating-point-literal"]
  1402 -> 418 [style=dashed label="fold-expression"]
  1402 -> 419 [style=dashed label="fractional-constant"]
  1402 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1402 -> 421 [style=dashed label="hexadecimal-literal"]
  1402 -> 422 [style=dashed label="hexadecimal-prefix"]
  1402 -> 423 [style=dashed label="id-expression"]
  1402 -> 424 [style=dashed label="inclusive-or-expression"]
  1402 -> 425 [style=dashed label="integer-literal"]
  1402 -> 426 [style=dashed label="lambda-expression"]
  1402 -> 427 [style=dashed label="lambda-introducer"]
  1402 -> 428 [style=dashed label="literal"]
  1402 -> 95 [style=dashed label="literal-operator-id"]
  1402 -> 429 [style=dashed label="logical-and-expression"]
  1402 -> 430 [style=dashed label="logical-or-expression"]
  1402 -> 431 [style=dashed label="multiplicative-expression"]
  1402 -> 99 [style=dashed label="namespace-alias"]
  1402 -> 102 [style=dashed label="namespace-name"]
  1402 -> 432 [style=dashed label="nested-name-specifier"]
  1402 -> 433 [style=dashed label="new-expression"]
  1402 -> 434 [style=dashed label="noexcept-expression"]
  1402 -> 435 [style=dashed label="nonzero-digit"]
  1402 -> 436 [style=dashed label="octal-literal"]
  1402 -> 108 [style=dashed label="operator-function-id"]
  1402 -> 109 [style=dashed label="placeholder-type-specifier"]
  1402 -> 437 [style=dashed label="pm-expression"]
  1402 -> 438 [style=dashed label="pointer-literal"]
  1402 -> 439 [style=dashed label="postfix-expression"]
  1402 -> 440 [style=dashed label="primary-expression"]
  1402 -> 112 [style=dashed label="qualified-id"]
  1402 -> 441 [style=dashed label="relational-expression"]
  1402 -> 442 [style=dashed label="requires-expression"]
  1402 -> 443 [style=dashed label="shift-expression"]
  1402 -> 114 [style=dashed label="simple-template-id"]
  1402 -> 529 [style=dashed label="simple-type-specifier"]
  1402 -> 445 [style=dashed label="string-literal"]
  1402 -> 120 [style=dashed label="template-id"]
  1402 -> 215 [style=dashed label="template-name"]
  1402 -> 123 [style=dashed label="type-constraint"]
  1402 -> 124 [style=dashed label="type-name"]
  1402 -> 126 [style=dashed label="typedef-name"]
  1402 -> 531 [style=dashed label="typename-specifier"]
  1402 -> 449 [style=dashed label="unary-expression"]
  1402 -> 450 [style=dashed label="unary-operator"]
  1402 -> 129 [style=dashed label="unqualified-id"]
  1402 -> 451 [style=dashed label="user-defined-character-literal"]
  1402 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1402 -> 453 [style=dashed label="user-defined-integer-literal"]
  1402 -> 454 [style=dashed label="user-defined-literal"]
  1402 -> 455 [style=dashed label="user-defined-string-literal"]
  1403 [label="State 1403\n\l  2 abstract-declarator: noptr-abstract-declarator parameters-and-qualifiers • trailing-return-type\l704 noptr-abstract-declarator: noptr-abstract-declarator parameters-and-qualifiers •\l"]
  1403 -> 736 [style=solid label="DEREF"]
  1403 -> 1664 [style=dashed label="trailing-return-type"]
  1403 -> "1403R704" [style=solid]
 "1403R704" [label="R704", fillcolor=3, shape=diamond, style=filled]
  1404 [label="State 1404\n\l716 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator OPEN_SQUARE • CLOSE_SQUARE\l717                               | noptr-abstract-pack-declarator OPEN_SQUARE • constant-expression CLOSE_SQUARE\l718                               | noptr-abstract-pack-declarator OPEN_SQUARE • CLOSE_SQUARE attribute-specifier-seq\l719                               | noptr-abstract-pack-declarator OPEN_SQUARE • constant-expression CLOSE_SQUARE attribute-specifier-seq\l"]
  1404 -> 356 [style=solid label="PLUS"]
  1404 -> 357 [style=solid label="MINUS"]
  1404 -> 2 [style=solid label="IDENTIFIER"]
  1404 -> 358 [style=solid label="OPEN_PAREN"]
  1404 -> 359 [style=solid label="AND"]
  1404 -> 360 [style=solid label="SCOPE"]
  1404 -> 361 [style=solid label="OPEN_SQUARE"]
  1404 -> 1665 [style=solid label="CLOSE_SQUARE"]
  1404 -> 362 [style=solid label="CO_AWAIT"]
  1404 -> 363 [style=solid label="ZERO_LB"]
  1404 -> 364 [style=solid label="ZERO_HB"]
  1404 -> 365 [style=solid label="SINGLE_QUOTE"]
  1404 -> 366 [style=solid label="FALSE"]
  1404 -> 367 [style=solid label="TRUE"]
  1404 -> 368 [style=solid label="NOEXCEPT"]
  1404 -> 17 [style=solid label="OPERATOR"]
  1404 -> 26 [style=solid label="DECLTYPE"]
  1404 -> 369 [style=solid label="DELETE"]
  1404 -> 370 [style=solid label="DOT"]
  1404 -> 184 [style=solid label="UNICODE_8"]
  1404 -> 371 [style=solid label="MULT"]
  1404 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1404 -> 372 [style=solid label="ZERO_LX"]
  1404 -> 373 [style=solid label="ZERO_HX"]
  1404 -> 374 [style=solid label="REQUIRES"]
  1404 -> 375 [style=solid label="NEW"]
  1404 -> 376 [style=solid label="COMPL"]
  1404 -> 377 [style=solid label="NOT"]
  1404 -> 378 [style=solid label="PLUS_PLUS"]
  1404 -> 379 [style=solid label="MINUS_MINUS"]
  1404 -> 380 [style=solid label="THIS"]
  1404 -> 36 [style=solid label="AUTO"]
  1404 -> 381 [style=solid label="NULLPTR"]
  1404 -> 382 [style=solid label="DYNAMIC_CAST"]
  1404 -> 383 [style=solid label="STATIC_CAST"]
  1404 -> 384 [style=solid label="REINTERPRET_CAST"]
  1404 -> 385 [style=solid label="CONST_CAST"]
  1404 -> 386 [style=solid label="TYPEID"]
  1404 -> 37 [style=solid label="CHAR"]
  1404 -> 38 [style=solid label="CHAR8_T"]
  1404 -> 39 [style=solid label="CHAR16_T"]
  1404 -> 40 [style=solid label="CHAR32_T"]
  1404 -> 41 [style=solid label="WCHAR_T"]
  1404 -> 42 [style=solid label="BOOL"]
  1404 -> 43 [style=solid label="SHORT"]
  1404 -> 44 [style=solid label="INT"]
  1404 -> 45 [style=solid label="LONG"]
  1404 -> 46 [style=solid label="SIGNED"]
  1404 -> 47 [style=solid label="UNSIGNED"]
  1404 -> 48 [style=solid label="FLOAT"]
  1404 -> 49 [style=solid label="DOUBLE"]
  1404 -> 50 [style=solid label="VOID"]
  1404 -> 55 [style=solid label="TYPENAME"]
  1404 -> 387 [style=solid label="SIZEOF"]
  1404 -> 388 [style=solid label="ALIGNOF"]
  1404 -> 389 [style=solid label="'0'"]
  1404 -> 390 [style=solid label="'1'"]
  1404 -> 391 [style=solid label="'2'"]
  1404 -> 392 [style=solid label="'3'"]
  1404 -> 393 [style=solid label="'4'"]
  1404 -> 394 [style=solid label="'5'"]
  1404 -> 395 [style=solid label="'6'"]
  1404 -> 396 [style=solid label="'7'"]
  1404 -> 397 [style=solid label="'8'"]
  1404 -> 398 [style=solid label="'9'"]
  1404 -> 205 [style=solid label="'u'"]
  1404 -> 206 [style=solid label="'U'"]
  1404 -> 207 [style=solid label="'L'"]
  1404 -> 208 [style=solid label="'R'"]
  1404 -> 399 [style=dashed label="additive-expression"]
  1404 -> 400 [style=dashed label="and-expression"]
  1404 -> 401 [style=dashed label="await-expression"]
  1404 -> 402 [style=dashed label="binary-literal"]
  1404 -> 403 [style=dashed label="boolean-literal"]
  1404 -> 404 [style=dashed label="cast-expression"]
  1404 -> 405 [style=dashed label="character-literal"]
  1404 -> 65 [style=dashed label="class-name"]
  1404 -> 406 [style=dashed label="compare-expression"]
  1404 -> 67 [style=dashed label="concept-name"]
  1404 -> 407 [style=dashed label="conditional-expression"]
  1404 -> 1666 [style=dashed label="constant-expression"]
  1404 -> 68 [style=dashed label="conversion-function-id"]
  1404 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1404 -> 410 [style=dashed label="decimal-literal"]
  1404 -> 76 [style=dashed label="decltype-specifier"]
  1404 -> 411 [style=dashed label="delete-expression"]
  1404 -> 412 [style=dashed label="digit"]
  1404 -> 413 [style=dashed label="digit-sequence"]
  1404 -> 414 [style=dashed label="encoding-prefix"]
  1404 -> 84 [style=dashed label="enum-name"]
  1404 -> 415 [style=dashed label="equality-expression"]
  1404 -> 416 [style=dashed label="exclusive-or-expression"]
  1404 -> 417 [style=dashed label="floating-point-literal"]
  1404 -> 418 [style=dashed label="fold-expression"]
  1404 -> 419 [style=dashed label="fractional-constant"]
  1404 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1404 -> 421 [style=dashed label="hexadecimal-literal"]
  1404 -> 422 [style=dashed label="hexadecimal-prefix"]
  1404 -> 423 [style=dashed label="id-expression"]
  1404 -> 424 [style=dashed label="inclusive-or-expression"]
  1404 -> 425 [style=dashed label="integer-literal"]
  1404 -> 426 [style=dashed label="lambda-expression"]
  1404 -> 427 [style=dashed label="lambda-introducer"]
  1404 -> 428 [style=dashed label="literal"]
  1404 -> 95 [style=dashed label="literal-operator-id"]
  1404 -> 429 [style=dashed label="logical-and-expression"]
  1404 -> 430 [style=dashed label="logical-or-expression"]
  1404 -> 431 [style=dashed label="multiplicative-expression"]
  1404 -> 99 [style=dashed label="namespace-alias"]
  1404 -> 102 [style=dashed label="namespace-name"]
  1404 -> 432 [style=dashed label="nested-name-specifier"]
  1404 -> 433 [style=dashed label="new-expression"]
  1404 -> 434 [style=dashed label="noexcept-expression"]
  1404 -> 435 [style=dashed label="nonzero-digit"]
  1404 -> 436 [style=dashed label="octal-literal"]
  1404 -> 108 [style=dashed label="operator-function-id"]
  1404 -> 109 [style=dashed label="placeholder-type-specifier"]
  1404 -> 437 [style=dashed label="pm-expression"]
  1404 -> 438 [style=dashed label="pointer-literal"]
  1404 -> 439 [style=dashed label="postfix-expression"]
  1404 -> 440 [style=dashed label="primary-expression"]
  1404 -> 112 [style=dashed label="qualified-id"]
  1404 -> 441 [style=dashed label="relational-expression"]
  1404 -> 442 [style=dashed label="requires-expression"]
  1404 -> 443 [style=dashed label="shift-expression"]
  1404 -> 114 [style=dashed label="simple-template-id"]
  1404 -> 529 [style=dashed label="simple-type-specifier"]
  1404 -> 445 [style=dashed label="string-literal"]
  1404 -> 120 [style=dashed label="template-id"]
  1404 -> 215 [style=dashed label="template-name"]
  1404 -> 123 [style=dashed label="type-constraint"]
  1404 -> 124 [style=dashed label="type-name"]
  1404 -> 126 [style=dashed label="typedef-name"]
  1404 -> 531 [style=dashed label="typename-specifier"]
  1404 -> 449 [style=dashed label="unary-expression"]
  1404 -> 450 [style=dashed label="unary-operator"]
  1404 -> 129 [style=dashed label="unqualified-id"]
  1404 -> 451 [style=dashed label="user-defined-character-literal"]
  1404 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1404 -> 453 [style=dashed label="user-defined-integer-literal"]
  1404 -> 454 [style=dashed label="user-defined-literal"]
  1404 -> 455 [style=dashed label="user-defined-string-literal"]
  1405 [label="State 1405\n\l715 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator parameters-and-qualifiers •\l"]
  1405 -> "1405R715" [style=solid]
 "1405R715" [label="R715", fillcolor=3, shape=diamond, style=filled]
  1406 [label="State 1406\n\l  3 abstract-declarator: parameters-and-qualifiers trailing-return-type •\l"]
  1406 -> "1406R3" [style=solid]
 "1406R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  1407 [label="State 1407\n\l  6 abstract-pack-declarator: ptr-operator abstract-pack-declarator •\l"]
  1407 -> "1407R6" [style=solid]
 "1407R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  1408 [label="State 1408\n\l890 ptr-abstract-declarator: ptr-operator ptr-abstract-declarator •\l"]
  1408 -> "1408R890" [style=solid]
 "1408R890" [label="R890", fillcolor=3, shape=diamond, style=filled]
  1409 [label="State 1409\n\l863 postfix-expression: typename-specifier OPEN_PAREN CLOSE_PAREN •\l"]
  1409 -> "1409R863" [style=solid]
 "1409R863" [label="R863", fillcolor=3, shape=diamond, style=filled]
  1410 [label="State 1410\n\l864 postfix-expression: typename-specifier OPEN_PAREN expression-list • CLOSE_PAREN\l"]
  1410 -> 1667 [style=solid label="CLOSE_PAREN"]
  1411 [label="State 1411\n\l 22 asm-declaration: ASM OPEN_PAREN string-literal CLOSE_PAREN SEMICOLON •\l"]
  1411 -> "1411R22" [style=solid]
 "1411R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  1412 [label="State 1412\n\l 57 attribute-using-prefix: USING attribute-namespace COLON •\l"]
  1412 -> "1412R57" [style=solid]
 "1412R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  1413 [label="State 1413\n\l 45 attribute-list: attribute-list COMMA attribute •\l 47               | attribute-list COMMA attribute • ELLIPSIS\l"]
  1413 -> 1668 [style=solid label="ELLIPSIS"]
  1413 -> "1413R45" [style=solid]
 "1413R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  1414 [label="State 1414\n\l 50 attribute-specifier: OPEN_SQUARE OPEN_SQUARE attribute-list CLOSE_SQUARE CLOSE_SQUARE •\l"]
  1414 -> "1414R50" [style=solid]
 "1414R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  1415 [label="State 1415\n\l 49 attribute-scoped-token: attribute-namespace SCOPE IDENTIFIER •\l"]
  1415 -> "1415R49" [style=solid]
 "1415R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
  1416 [label="State 1416\n\l 59 balanced-token: OPEN_PAREN • CLOSE_PAREN\l 60               | OPEN_PAREN • balanced-token-seq CLOSE_PAREN\l"]
  1416 -> 1416 [style=solid label="OPEN_PAREN"]
  1416 -> 1669 [style=solid label="CLOSE_PAREN"]
  1416 -> 1418 [style=solid label="OPEN_SQUARE"]
  1416 -> 1419 [style=solid label="OPEN_BRACE"]
  1416 -> 1420 [style=solid label="BALANCED_TOKEN"]
  1416 -> 1421 [style=dashed label="balanced-token"]
  1416 -> 1670 [style=dashed label="balanced-token-seq"]
  1417 [label="State 1417\n\l 40 attribute-argument-clause: OPEN_PAREN CLOSE_PAREN •\l"]
  1417 -> "1417R40" [style=solid]
 "1417R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  1418 [label="State 1418\n\l 61 balanced-token: OPEN_SQUARE • CLOSE_SQUARE\l 62               | OPEN_SQUARE • balanced-token-seq CLOSE_SQUARE\l"]
  1418 -> 1416 [style=solid label="OPEN_PAREN"]
  1418 -> 1418 [style=solid label="OPEN_SQUARE"]
  1418 -> 1671 [style=solid label="CLOSE_SQUARE"]
  1418 -> 1419 [style=solid label="OPEN_BRACE"]
  1418 -> 1420 [style=solid label="BALANCED_TOKEN"]
  1418 -> 1421 [style=dashed label="balanced-token"]
  1418 -> 1672 [style=dashed label="balanced-token-seq"]
  1419 [label="State 1419\n\l 63 balanced-token: OPEN_BRACE • CLOSE_BRACE\l 64               | OPEN_BRACE • balanced-token-seq CLOSE_BRACE\l"]
  1419 -> 1416 [style=solid label="OPEN_PAREN"]
  1419 -> 1418 [style=solid label="OPEN_SQUARE"]
  1419 -> 1419 [style=solid label="OPEN_BRACE"]
  1419 -> 1673 [style=solid label="CLOSE_BRACE"]
  1419 -> 1420 [style=solid label="BALANCED_TOKEN"]
  1419 -> 1421 [style=dashed label="balanced-token"]
  1419 -> 1674 [style=dashed label="balanced-token-seq"]
  1420 [label="State 1420\n\l 65 balanced-token: BALANCED_TOKEN •\l"]
  1420 -> "1420R65" [style=solid]
 "1420R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
  1421 [label="State 1421\n\l 66 balanced-token-seq: balanced-token •\l"]
  1421 -> "1421R66" [style=solid]
 "1421R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
  1422 [label="State 1422\n\l 41 attribute-argument-clause: OPEN_PAREN balanced-token-seq • CLOSE_PAREN\l 67 balanced-token-seq: balanced-token-seq • balanced-token\l"]
  1422 -> 1416 [style=solid label="OPEN_PAREN"]
  1422 -> 1675 [style=solid label="CLOSE_PAREN"]
  1422 -> 1418 [style=solid label="OPEN_SQUARE"]
  1422 -> 1419 [style=solid label="OPEN_BRACE"]
  1422 -> 1420 [style=solid label="BALANCED_TOKEN"]
  1422 -> 1676 [style=dashed label="balanced-token"]
  1423 [label="State 1423\n\l 51 attribute-specifier: OPEN_SQUARE OPEN_SQUARE attribute-using-prefix attribute-list CLOSE_SQUARE • CLOSE_SQUARE\l"]
  1423 -> 1677 [style=solid label="CLOSE_SQUARE"]
  1424 [label="State 1424\n\l821 parameter-declaration: THIS decl-specifier-seq EQ • initializer-clause\l"]
  1424 -> 356 [style=solid label="PLUS"]
  1424 -> 357 [style=solid label="MINUS"]
  1424 -> 2 [style=solid label="IDENTIFIER"]
  1424 -> 358 [style=solid label="OPEN_PAREN"]
  1424 -> 359 [style=solid label="AND"]
  1424 -> 360 [style=solid label="SCOPE"]
  1424 -> 361 [style=solid label="OPEN_SQUARE"]
  1424 -> 362 [style=solid label="CO_AWAIT"]
  1424 -> 935 [style=solid label="OPEN_BRACE"]
  1424 -> 363 [style=solid label="ZERO_LB"]
  1424 -> 364 [style=solid label="ZERO_HB"]
  1424 -> 365 [style=solid label="SINGLE_QUOTE"]
  1424 -> 366 [style=solid label="FALSE"]
  1424 -> 367 [style=solid label="TRUE"]
  1424 -> 368 [style=solid label="NOEXCEPT"]
  1424 -> 17 [style=solid label="OPERATOR"]
  1424 -> 26 [style=solid label="DECLTYPE"]
  1424 -> 369 [style=solid label="DELETE"]
  1424 -> 370 [style=solid label="DOT"]
  1424 -> 184 [style=solid label="UNICODE_8"]
  1424 -> 371 [style=solid label="MULT"]
  1424 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1424 -> 372 [style=solid label="ZERO_LX"]
  1424 -> 373 [style=solid label="ZERO_HX"]
  1424 -> 374 [style=solid label="REQUIRES"]
  1424 -> 375 [style=solid label="NEW"]
  1424 -> 376 [style=solid label="COMPL"]
  1424 -> 377 [style=solid label="NOT"]
  1424 -> 378 [style=solid label="PLUS_PLUS"]
  1424 -> 379 [style=solid label="MINUS_MINUS"]
  1424 -> 380 [style=solid label="THIS"]
  1424 -> 36 [style=solid label="AUTO"]
  1424 -> 381 [style=solid label="NULLPTR"]
  1424 -> 382 [style=solid label="DYNAMIC_CAST"]
  1424 -> 383 [style=solid label="STATIC_CAST"]
  1424 -> 384 [style=solid label="REINTERPRET_CAST"]
  1424 -> 385 [style=solid label="CONST_CAST"]
  1424 -> 386 [style=solid label="TYPEID"]
  1424 -> 37 [style=solid label="CHAR"]
  1424 -> 38 [style=solid label="CHAR8_T"]
  1424 -> 39 [style=solid label="CHAR16_T"]
  1424 -> 40 [style=solid label="CHAR32_T"]
  1424 -> 41 [style=solid label="WCHAR_T"]
  1424 -> 42 [style=solid label="BOOL"]
  1424 -> 43 [style=solid label="SHORT"]
  1424 -> 44 [style=solid label="INT"]
  1424 -> 45 [style=solid label="LONG"]
  1424 -> 46 [style=solid label="SIGNED"]
  1424 -> 47 [style=solid label="UNSIGNED"]
  1424 -> 48 [style=solid label="FLOAT"]
  1424 -> 49 [style=solid label="DOUBLE"]
  1424 -> 50 [style=solid label="VOID"]
  1424 -> 523 [style=solid label="THROW"]
  1424 -> 55 [style=solid label="TYPENAME"]
  1424 -> 387 [style=solid label="SIZEOF"]
  1424 -> 388 [style=solid label="ALIGNOF"]
  1424 -> 524 [style=solid label="CO_YIELD"]
  1424 -> 389 [style=solid label="'0'"]
  1424 -> 390 [style=solid label="'1'"]
  1424 -> 391 [style=solid label="'2'"]
  1424 -> 392 [style=solid label="'3'"]
  1424 -> 393 [style=solid label="'4'"]
  1424 -> 394 [style=solid label="'5'"]
  1424 -> 395 [style=solid label="'6'"]
  1424 -> 396 [style=solid label="'7'"]
  1424 -> 397 [style=solid label="'8'"]
  1424 -> 398 [style=solid label="'9'"]
  1424 -> 205 [style=solid label="'u'"]
  1424 -> 206 [style=solid label="'U'"]
  1424 -> 207 [style=solid label="'L'"]
  1424 -> 208 [style=solid label="'R'"]
  1424 -> 399 [style=dashed label="additive-expression"]
  1424 -> 400 [style=dashed label="and-expression"]
  1424 -> 1134 [style=dashed label="assignment-expression"]
  1424 -> 401 [style=dashed label="await-expression"]
  1424 -> 402 [style=dashed label="binary-literal"]
  1424 -> 403 [style=dashed label="boolean-literal"]
  1424 -> 1135 [style=dashed label="braced-init-list"]
  1424 -> 404 [style=dashed label="cast-expression"]
  1424 -> 405 [style=dashed label="character-literal"]
  1424 -> 65 [style=dashed label="class-name"]
  1424 -> 406 [style=dashed label="compare-expression"]
  1424 -> 67 [style=dashed label="concept-name"]
  1424 -> 526 [style=dashed label="conditional-expression"]
  1424 -> 68 [style=dashed label="conversion-function-id"]
  1424 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1424 -> 410 [style=dashed label="decimal-literal"]
  1424 -> 76 [style=dashed label="decltype-specifier"]
  1424 -> 411 [style=dashed label="delete-expression"]
  1424 -> 412 [style=dashed label="digit"]
  1424 -> 413 [style=dashed label="digit-sequence"]
  1424 -> 414 [style=dashed label="encoding-prefix"]
  1424 -> 84 [style=dashed label="enum-name"]
  1424 -> 415 [style=dashed label="equality-expression"]
  1424 -> 416 [style=dashed label="exclusive-or-expression"]
  1424 -> 417 [style=dashed label="floating-point-literal"]
  1424 -> 418 [style=dashed label="fold-expression"]
  1424 -> 419 [style=dashed label="fractional-constant"]
  1424 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1424 -> 421 [style=dashed label="hexadecimal-literal"]
  1424 -> 422 [style=dashed label="hexadecimal-prefix"]
  1424 -> 423 [style=dashed label="id-expression"]
  1424 -> 424 [style=dashed label="inclusive-or-expression"]
  1424 -> 1678 [style=dashed label="initializer-clause"]
  1424 -> 425 [style=dashed label="integer-literal"]
  1424 -> 426 [style=dashed label="lambda-expression"]
  1424 -> 427 [style=dashed label="lambda-introducer"]
  1424 -> 428 [style=dashed label="literal"]
  1424 -> 95 [style=dashed label="literal-operator-id"]
  1424 -> 429 [style=dashed label="logical-and-expression"]
  1424 -> 528 [style=dashed label="logical-or-expression"]
  1424 -> 431 [style=dashed label="multiplicative-expression"]
  1424 -> 99 [style=dashed label="namespace-alias"]
  1424 -> 102 [style=dashed label="namespace-name"]
  1424 -> 432 [style=dashed label="nested-name-specifier"]
  1424 -> 433 [style=dashed label="new-expression"]
  1424 -> 434 [style=dashed label="noexcept-expression"]
  1424 -> 435 [style=dashed label="nonzero-digit"]
  1424 -> 436 [style=dashed label="octal-literal"]
  1424 -> 108 [style=dashed label="operator-function-id"]
  1424 -> 109 [style=dashed label="placeholder-type-specifier"]
  1424 -> 437 [style=dashed label="pm-expression"]
  1424 -> 438 [style=dashed label="pointer-literal"]
  1424 -> 439 [style=dashed label="postfix-expression"]
  1424 -> 440 [style=dashed label="primary-expression"]
  1424 -> 112 [style=dashed label="qualified-id"]
  1424 -> 441 [style=dashed label="relational-expression"]
  1424 -> 442 [style=dashed label="requires-expression"]
  1424 -> 443 [style=dashed label="shift-expression"]
  1424 -> 114 [style=dashed label="simple-template-id"]
  1424 -> 529 [style=dashed label="simple-type-specifier"]
  1424 -> 445 [style=dashed label="string-literal"]
  1424 -> 120 [style=dashed label="template-id"]
  1424 -> 215 [style=dashed label="template-name"]
  1424 -> 530 [style=dashed label="throw-expression"]
  1424 -> 123 [style=dashed label="type-constraint"]
  1424 -> 124 [style=dashed label="type-name"]
  1424 -> 126 [style=dashed label="typedef-name"]
  1424 -> 531 [style=dashed label="typename-specifier"]
  1424 -> 449 [style=dashed label="unary-expression"]
  1424 -> 450 [style=dashed label="unary-operator"]
  1424 -> 129 [style=dashed label="unqualified-id"]
  1424 -> 451 [style=dashed label="user-defined-character-literal"]
  1424 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1424 -> 453 [style=dashed label="user-defined-integer-literal"]
  1424 -> 454 [style=dashed label="user-defined-literal"]
  1424 -> 455 [style=dashed label="user-defined-string-literal"]
  1424 -> 532 [style=dashed label="yield-expression"]
  1425 [label="State 1425\n\l817 parameter-declaration: THIS decl-specifier-seq abstract-declarator •\l825                      | THIS decl-specifier-seq abstract-declarator • EQ initializer-clause\l"]
  1425 -> 1679 [style=solid label="EQ"]
  1425 -> "1425R817" [style=solid]
 "1425R817" [label="R817", fillcolor=3, shape=diamond, style=filled]
  1426 [label="State 1426\n\l805 parameter-declaration: THIS decl-specifier-seq declarator •\l809                      | THIS decl-specifier-seq declarator • EQ initializer-clause\l"]
  1426 -> 1680 [style=solid label="EQ"]
  1426 -> "1426R805" [style=solid]
 "1426R805" [label="R805", fillcolor=3, shape=diamond, style=filled]
  1427 [label="State 1427\n\l804 parameter-declaration: attribute-specifier-seq THIS decl-specifier-seq • declarator\l808                      | attribute-specifier-seq THIS decl-specifier-seq • declarator EQ initializer-clause\l812                      | attribute-specifier-seq THIS decl-specifier-seq •\l816                      | attribute-specifier-seq THIS decl-specifier-seq • abstract-declarator\l820                      | attribute-specifier-seq THIS decl-specifier-seq • EQ initializer-clause\l824                      | attribute-specifier-seq THIS decl-specifier-seq • abstract-declarator EQ initializer-clause\l"]
  1427 -> 147 [style=solid label="IDENTIFIER"]
  1427 -> 1681 [style=solid label="EQ"]
  1427 -> 969 [style=solid label="OPEN_PAREN"]
  1427 -> 970 [style=solid label="ELLIPSIS"]
  1427 -> 7 [style=solid label="AND"]
  1427 -> 9 [style=solid label="SCOPE"]
  1427 -> 941 [style=solid label="OPEN_SQUARE"]
  1427 -> 16 [style=solid label="AND_AND"]
  1427 -> 17 [style=solid label="OPERATOR"]
  1427 -> 134 [style=solid label="DECLTYPE"]
  1427 -> 31 [style=solid label="MULT"]
  1427 -> 35 [style=solid label="COMPL"]
  1427 -> 1682 [style=dashed label="abstract-declarator"]
  1427 -> 943 [style=dashed label="abstract-pack-declarator"]
  1427 -> 65 [style=dashed label="class-name"]
  1427 -> 68 [style=dashed label="conversion-function-id"]
  1427 -> 1683 [style=dashed label="declarator"]
  1427 -> 75 [style=dashed label="declarator-id"]
  1427 -> 138 [style=dashed label="decltype-specifier"]
  1427 -> 84 [style=dashed label="enum-name"]
  1427 -> 93 [style=dashed label="id-expression"]
  1427 -> 95 [style=dashed label="literal-operator-id"]
  1427 -> 99 [style=dashed label="namespace-alias"]
  1427 -> 102 [style=dashed label="namespace-name"]
  1427 -> 148 [style=dashed label="nested-name-specifier"]
  1427 -> 944 [style=dashed label="noptr-abstract-declarator"]
  1427 -> 945 [style=dashed label="noptr-abstract-pack-declarator"]
  1427 -> 106 [style=dashed label="noptr-declarator"]
  1427 -> 108 [style=dashed label="operator-function-id"]
  1427 -> 946 [style=dashed label="parameters-and-qualifiers"]
  1427 -> 947 [style=dashed label="ptr-abstract-declarator"]
  1427 -> 110 [style=dashed label="ptr-declarator"]
  1427 -> 973 [style=dashed label="ptr-operator"]
  1427 -> 112 [style=dashed label="qualified-id"]
  1427 -> 114 [style=dashed label="simple-template-id"]
  1427 -> 120 [style=dashed label="template-id"]
  1427 -> 142 [style=dashed label="template-name"]
  1427 -> 143 [style=dashed label="type-name"]
  1427 -> 126 [style=dashed label="typedef-name"]
  1427 -> 129 [style=dashed label="unqualified-id"]
  1427 -> "1427R812d" [label="[ELLIPSIS]", style=solid]
 "1427R812d" [label="R812", fillcolor=5, shape=diamond, style=filled]
  1427 -> "1427R812" [style=solid]
 "1427R812" [label="R812", fillcolor=3, shape=diamond, style=filled]
  1428 [label="State 1428\n\l818 parameter-declaration: attribute-specifier-seq decl-specifier-seq EQ • initializer-clause\l"]
  1428 -> 356 [style=solid label="PLUS"]
  1428 -> 357 [style=solid label="MINUS"]
  1428 -> 2 [style=solid label="IDENTIFIER"]
  1428 -> 358 [style=solid label="OPEN_PAREN"]
  1428 -> 359 [style=solid label="AND"]
  1428 -> 360 [style=solid label="SCOPE"]
  1428 -> 361 [style=solid label="OPEN_SQUARE"]
  1428 -> 362 [style=solid label="CO_AWAIT"]
  1428 -> 935 [style=solid label="OPEN_BRACE"]
  1428 -> 363 [style=solid label="ZERO_LB"]
  1428 -> 364 [style=solid label="ZERO_HB"]
  1428 -> 365 [style=solid label="SINGLE_QUOTE"]
  1428 -> 366 [style=solid label="FALSE"]
  1428 -> 367 [style=solid label="TRUE"]
  1428 -> 368 [style=solid label="NOEXCEPT"]
  1428 -> 17 [style=solid label="OPERATOR"]
  1428 -> 26 [style=solid label="DECLTYPE"]
  1428 -> 369 [style=solid label="DELETE"]
  1428 -> 370 [style=solid label="DOT"]
  1428 -> 184 [style=solid label="UNICODE_8"]
  1428 -> 371 [style=solid label="MULT"]
  1428 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1428 -> 372 [style=solid label="ZERO_LX"]
  1428 -> 373 [style=solid label="ZERO_HX"]
  1428 -> 374 [style=solid label="REQUIRES"]
  1428 -> 375 [style=solid label="NEW"]
  1428 -> 376 [style=solid label="COMPL"]
  1428 -> 377 [style=solid label="NOT"]
  1428 -> 378 [style=solid label="PLUS_PLUS"]
  1428 -> 379 [style=solid label="MINUS_MINUS"]
  1428 -> 380 [style=solid label="THIS"]
  1428 -> 36 [style=solid label="AUTO"]
  1428 -> 381 [style=solid label="NULLPTR"]
  1428 -> 382 [style=solid label="DYNAMIC_CAST"]
  1428 -> 383 [style=solid label="STATIC_CAST"]
  1428 -> 384 [style=solid label="REINTERPRET_CAST"]
  1428 -> 385 [style=solid label="CONST_CAST"]
  1428 -> 386 [style=solid label="TYPEID"]
  1428 -> 37 [style=solid label="CHAR"]
  1428 -> 38 [style=solid label="CHAR8_T"]
  1428 -> 39 [style=solid label="CHAR16_T"]
  1428 -> 40 [style=solid label="CHAR32_T"]
  1428 -> 41 [style=solid label="WCHAR_T"]
  1428 -> 42 [style=solid label="BOOL"]
  1428 -> 43 [style=solid label="SHORT"]
  1428 -> 44 [style=solid label="INT"]
  1428 -> 45 [style=solid label="LONG"]
  1428 -> 46 [style=solid label="SIGNED"]
  1428 -> 47 [style=solid label="UNSIGNED"]
  1428 -> 48 [style=solid label="FLOAT"]
  1428 -> 49 [style=solid label="DOUBLE"]
  1428 -> 50 [style=solid label="VOID"]
  1428 -> 523 [style=solid label="THROW"]
  1428 -> 55 [style=solid label="TYPENAME"]
  1428 -> 387 [style=solid label="SIZEOF"]
  1428 -> 388 [style=solid label="ALIGNOF"]
  1428 -> 524 [style=solid label="CO_YIELD"]
  1428 -> 389 [style=solid label="'0'"]
  1428 -> 390 [style=solid label="'1'"]
  1428 -> 391 [style=solid label="'2'"]
  1428 -> 392 [style=solid label="'3'"]
  1428 -> 393 [style=solid label="'4'"]
  1428 -> 394 [style=solid label="'5'"]
  1428 -> 395 [style=solid label="'6'"]
  1428 -> 396 [style=solid label="'7'"]
  1428 -> 397 [style=solid label="'8'"]
  1428 -> 398 [style=solid label="'9'"]
  1428 -> 205 [style=solid label="'u'"]
  1428 -> 206 [style=solid label="'U'"]
  1428 -> 207 [style=solid label="'L'"]
  1428 -> 208 [style=solid label="'R'"]
  1428 -> 399 [style=dashed label="additive-expression"]
  1428 -> 400 [style=dashed label="and-expression"]
  1428 -> 1134 [style=dashed label="assignment-expression"]
  1428 -> 401 [style=dashed label="await-expression"]
  1428 -> 402 [style=dashed label="binary-literal"]
  1428 -> 403 [style=dashed label="boolean-literal"]
  1428 -> 1135 [style=dashed label="braced-init-list"]
  1428 -> 404 [style=dashed label="cast-expression"]
  1428 -> 405 [style=dashed label="character-literal"]
  1428 -> 65 [style=dashed label="class-name"]
  1428 -> 406 [style=dashed label="compare-expression"]
  1428 -> 67 [style=dashed label="concept-name"]
  1428 -> 526 [style=dashed label="conditional-expression"]
  1428 -> 68 [style=dashed label="conversion-function-id"]
  1428 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1428 -> 410 [style=dashed label="decimal-literal"]
  1428 -> 76 [style=dashed label="decltype-specifier"]
  1428 -> 411 [style=dashed label="delete-expression"]
  1428 -> 412 [style=dashed label="digit"]
  1428 -> 413 [style=dashed label="digit-sequence"]
  1428 -> 414 [style=dashed label="encoding-prefix"]
  1428 -> 84 [style=dashed label="enum-name"]
  1428 -> 415 [style=dashed label="equality-expression"]
  1428 -> 416 [style=dashed label="exclusive-or-expression"]
  1428 -> 417 [style=dashed label="floating-point-literal"]
  1428 -> 418 [style=dashed label="fold-expression"]
  1428 -> 419 [style=dashed label="fractional-constant"]
  1428 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1428 -> 421 [style=dashed label="hexadecimal-literal"]
  1428 -> 422 [style=dashed label="hexadecimal-prefix"]
  1428 -> 423 [style=dashed label="id-expression"]
  1428 -> 424 [style=dashed label="inclusive-or-expression"]
  1428 -> 1684 [style=dashed label="initializer-clause"]
  1428 -> 425 [style=dashed label="integer-literal"]
  1428 -> 426 [style=dashed label="lambda-expression"]
  1428 -> 427 [style=dashed label="lambda-introducer"]
  1428 -> 428 [style=dashed label="literal"]
  1428 -> 95 [style=dashed label="literal-operator-id"]
  1428 -> 429 [style=dashed label="logical-and-expression"]
  1428 -> 528 [style=dashed label="logical-or-expression"]
  1428 -> 431 [style=dashed label="multiplicative-expression"]
  1428 -> 99 [style=dashed label="namespace-alias"]
  1428 -> 102 [style=dashed label="namespace-name"]
  1428 -> 432 [style=dashed label="nested-name-specifier"]
  1428 -> 433 [style=dashed label="new-expression"]
  1428 -> 434 [style=dashed label="noexcept-expression"]
  1428 -> 435 [style=dashed label="nonzero-digit"]
  1428 -> 436 [style=dashed label="octal-literal"]
  1428 -> 108 [style=dashed label="operator-function-id"]
  1428 -> 109 [style=dashed label="placeholder-type-specifier"]
  1428 -> 437 [style=dashed label="pm-expression"]
  1428 -> 438 [style=dashed label="pointer-literal"]
  1428 -> 439 [style=dashed label="postfix-expression"]
  1428 -> 440 [style=dashed label="primary-expression"]
  1428 -> 112 [style=dashed label="qualified-id"]
  1428 -> 441 [style=dashed label="relational-expression"]
  1428 -> 442 [style=dashed label="requires-expression"]
  1428 -> 443 [style=dashed label="shift-expression"]
  1428 -> 114 [style=dashed label="simple-template-id"]
  1428 -> 529 [style=dashed label="simple-type-specifier"]
  1428 -> 445 [style=dashed label="string-literal"]
  1428 -> 120 [style=dashed label="template-id"]
  1428 -> 215 [style=dashed label="template-name"]
  1428 -> 530 [style=dashed label="throw-expression"]
  1428 -> 123 [style=dashed label="type-constraint"]
  1428 -> 124 [style=dashed label="type-name"]
  1428 -> 126 [style=dashed label="typedef-name"]
  1428 -> 531 [style=dashed label="typename-specifier"]
  1428 -> 449 [style=dashed label="unary-expression"]
  1428 -> 450 [style=dashed label="unary-operator"]
  1428 -> 129 [style=dashed label="unqualified-id"]
  1428 -> 451 [style=dashed label="user-defined-character-literal"]
  1428 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1428 -> 453 [style=dashed label="user-defined-integer-literal"]
  1428 -> 454 [style=dashed label="user-defined-literal"]
  1428 -> 455 [style=dashed label="user-defined-string-literal"]
  1428 -> 532 [style=dashed label="yield-expression"]
  1429 [label="State 1429\n\l814 parameter-declaration: attribute-specifier-seq decl-specifier-seq abstract-declarator •\l822                      | attribute-specifier-seq decl-specifier-seq abstract-declarator • EQ initializer-clause\l"]
  1429 -> 1685 [style=solid label="EQ"]
  1429 -> "1429R814" [style=solid]
 "1429R814" [label="R814", fillcolor=3, shape=diamond, style=filled]
  1430 [label="State 1430\n\l802 parameter-declaration: attribute-specifier-seq decl-specifier-seq declarator •\l806                      | attribute-specifier-seq decl-specifier-seq declarator • EQ initializer-clause\l"]
  1430 -> 1686 [style=solid label="EQ"]
  1430 -> "1430R802" [style=solid]
 "1430R802" [label="R802", fillcolor=3, shape=diamond, style=filled]
  1431 [label="State 1431\n\l819 parameter-declaration: decl-specifier-seq EQ initializer-clause •\l"]
  1431 -> "1431R819" [style=solid]
 "1431R819" [label="R819", fillcolor=3, shape=diamond, style=filled]
  1432 [label="State 1432\n\l228 declarator-id: ELLIPSIS • id-expression\l828 parameter-declaration-clause: ELLIPSIS •\l"]
  1432 -> 147 [style=solid label="IDENTIFIER"]
  1432 -> 9 [style=solid label="SCOPE"]
  1432 -> 17 [style=solid label="OPERATOR"]
  1432 -> 134 [style=solid label="DECLTYPE"]
  1432 -> 35 [style=solid label="COMPL"]
  1432 -> 65 [style=dashed label="class-name"]
  1432 -> 68 [style=dashed label="conversion-function-id"]
  1432 -> 138 [style=dashed label="decltype-specifier"]
  1432 -> 84 [style=dashed label="enum-name"]
  1432 -> 151 [style=dashed label="id-expression"]
  1432 -> 95 [style=dashed label="literal-operator-id"]
  1432 -> 99 [style=dashed label="namespace-alias"]
  1432 -> 102 [style=dashed label="namespace-name"]
  1432 -> 152 [style=dashed label="nested-name-specifier"]
  1432 -> 108 [style=dashed label="operator-function-id"]
  1432 -> 112 [style=dashed label="qualified-id"]
  1432 -> 114 [style=dashed label="simple-template-id"]
  1432 -> 120 [style=dashed label="template-id"]
  1432 -> 142 [style=dashed label="template-name"]
  1432 -> 143 [style=dashed label="type-name"]
  1432 -> 126 [style=dashed label="typedef-name"]
  1432 -> 129 [style=dashed label="unqualified-id"]
  1432 -> "1432R828" [style=solid]
 "1432R828" [label="R828", fillcolor=3, shape=diamond, style=filled]
  1433 [label="State 1433\n\l889 ptr-abstract-declarator: ptr-operator •\l890                        | ptr-operator • ptr-abstract-declarator\l892 ptr-declarator: ptr-operator • ptr-declarator\l"]
  1433 -> 147 [style=solid label="IDENTIFIER"]
  1433 -> 969 [style=solid label="OPEN_PAREN"]
  1433 -> 6 [style=solid label="ELLIPSIS"]
  1433 -> 7 [style=solid label="AND"]
  1433 -> 9 [style=solid label="SCOPE"]
  1433 -> 941 [style=solid label="OPEN_SQUARE"]
  1433 -> 16 [style=solid label="AND_AND"]
  1433 -> 17 [style=solid label="OPERATOR"]
  1433 -> 134 [style=solid label="DECLTYPE"]
  1433 -> 31 [style=solid label="MULT"]
  1433 -> 35 [style=solid label="COMPL"]
  1433 -> 65 [style=dashed label="class-name"]
  1433 -> 68 [style=dashed label="conversion-function-id"]
  1433 -> 75 [style=dashed label="declarator-id"]
  1433 -> 138 [style=dashed label="decltype-specifier"]
  1433 -> 84 [style=dashed label="enum-name"]
  1433 -> 93 [style=dashed label="id-expression"]
  1433 -> 95 [style=dashed label="literal-operator-id"]
  1433 -> 99 [style=dashed label="namespace-alias"]
  1433 -> 102 [style=dashed label="namespace-name"]
  1433 -> 148 [style=dashed label="nested-name-specifier"]
  1433 -> 1396 [style=dashed label="noptr-abstract-declarator"]
  1433 -> 149 [style=dashed label="noptr-declarator"]
  1433 -> 108 [style=dashed label="operator-function-id"]
  1433 -> 1397 [style=dashed label="parameters-and-qualifiers"]
  1433 -> 1408 [style=dashed label="ptr-abstract-declarator"]
  1433 -> 332 [style=dashed label="ptr-declarator"]
  1433 -> 1433 [style=dashed label="ptr-operator"]
  1433 -> 112 [style=dashed label="qualified-id"]
  1433 -> 114 [style=dashed label="simple-template-id"]
  1433 -> 120 [style=dashed label="template-id"]
  1433 -> 142 [style=dashed label="template-name"]
  1433 -> 143 [style=dashed label="type-name"]
  1433 -> 126 [style=dashed label="typedef-name"]
  1433 -> 129 [style=dashed label="unqualified-id"]
  1433 -> "1433R889" [style=solid]
 "1433R889" [label="R889", fillcolor=3, shape=diamond, style=filled]
  1434 [label="State 1434\n\l823 parameter-declaration: decl-specifier-seq abstract-declarator EQ • initializer-clause\l"]
  1434 -> 356 [style=solid label="PLUS"]
  1434 -> 357 [style=solid label="MINUS"]
  1434 -> 2 [style=solid label="IDENTIFIER"]
  1434 -> 358 [style=solid label="OPEN_PAREN"]
  1434 -> 359 [style=solid label="AND"]
  1434 -> 360 [style=solid label="SCOPE"]
  1434 -> 361 [style=solid label="OPEN_SQUARE"]
  1434 -> 362 [style=solid label="CO_AWAIT"]
  1434 -> 935 [style=solid label="OPEN_BRACE"]
  1434 -> 363 [style=solid label="ZERO_LB"]
  1434 -> 364 [style=solid label="ZERO_HB"]
  1434 -> 365 [style=solid label="SINGLE_QUOTE"]
  1434 -> 366 [style=solid label="FALSE"]
  1434 -> 367 [style=solid label="TRUE"]
  1434 -> 368 [style=solid label="NOEXCEPT"]
  1434 -> 17 [style=solid label="OPERATOR"]
  1434 -> 26 [style=solid label="DECLTYPE"]
  1434 -> 369 [style=solid label="DELETE"]
  1434 -> 370 [style=solid label="DOT"]
  1434 -> 184 [style=solid label="UNICODE_8"]
  1434 -> 371 [style=solid label="MULT"]
  1434 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1434 -> 372 [style=solid label="ZERO_LX"]
  1434 -> 373 [style=solid label="ZERO_HX"]
  1434 -> 374 [style=solid label="REQUIRES"]
  1434 -> 375 [style=solid label="NEW"]
  1434 -> 376 [style=solid label="COMPL"]
  1434 -> 377 [style=solid label="NOT"]
  1434 -> 378 [style=solid label="PLUS_PLUS"]
  1434 -> 379 [style=solid label="MINUS_MINUS"]
  1434 -> 380 [style=solid label="THIS"]
  1434 -> 36 [style=solid label="AUTO"]
  1434 -> 381 [style=solid label="NULLPTR"]
  1434 -> 382 [style=solid label="DYNAMIC_CAST"]
  1434 -> 383 [style=solid label="STATIC_CAST"]
  1434 -> 384 [style=solid label="REINTERPRET_CAST"]
  1434 -> 385 [style=solid label="CONST_CAST"]
  1434 -> 386 [style=solid label="TYPEID"]
  1434 -> 37 [style=solid label="CHAR"]
  1434 -> 38 [style=solid label="CHAR8_T"]
  1434 -> 39 [style=solid label="CHAR16_T"]
  1434 -> 40 [style=solid label="CHAR32_T"]
  1434 -> 41 [style=solid label="WCHAR_T"]
  1434 -> 42 [style=solid label="BOOL"]
  1434 -> 43 [style=solid label="SHORT"]
  1434 -> 44 [style=solid label="INT"]
  1434 -> 45 [style=solid label="LONG"]
  1434 -> 46 [style=solid label="SIGNED"]
  1434 -> 47 [style=solid label="UNSIGNED"]
  1434 -> 48 [style=solid label="FLOAT"]
  1434 -> 49 [style=solid label="DOUBLE"]
  1434 -> 50 [style=solid label="VOID"]
  1434 -> 523 [style=solid label="THROW"]
  1434 -> 55 [style=solid label="TYPENAME"]
  1434 -> 387 [style=solid label="SIZEOF"]
  1434 -> 388 [style=solid label="ALIGNOF"]
  1434 -> 524 [style=solid label="CO_YIELD"]
  1434 -> 389 [style=solid label="'0'"]
  1434 -> 390 [style=solid label="'1'"]
  1434 -> 391 [style=solid label="'2'"]
  1434 -> 392 [style=solid label="'3'"]
  1434 -> 393 [style=solid label="'4'"]
  1434 -> 394 [style=solid label="'5'"]
  1434 -> 395 [style=solid label="'6'"]
  1434 -> 396 [style=solid label="'7'"]
  1434 -> 397 [style=solid label="'8'"]
  1434 -> 398 [style=solid label="'9'"]
  1434 -> 205 [style=solid label="'u'"]
  1434 -> 206 [style=solid label="'U'"]
  1434 -> 207 [style=solid label="'L'"]
  1434 -> 208 [style=solid label="'R'"]
  1434 -> 399 [style=dashed label="additive-expression"]
  1434 -> 400 [style=dashed label="and-expression"]
  1434 -> 1134 [style=dashed label="assignment-expression"]
  1434 -> 401 [style=dashed label="await-expression"]
  1434 -> 402 [style=dashed label="binary-literal"]
  1434 -> 403 [style=dashed label="boolean-literal"]
  1434 -> 1135 [style=dashed label="braced-init-list"]
  1434 -> 404 [style=dashed label="cast-expression"]
  1434 -> 405 [style=dashed label="character-literal"]
  1434 -> 65 [style=dashed label="class-name"]
  1434 -> 406 [style=dashed label="compare-expression"]
  1434 -> 67 [style=dashed label="concept-name"]
  1434 -> 526 [style=dashed label="conditional-expression"]
  1434 -> 68 [style=dashed label="conversion-function-id"]
  1434 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1434 -> 410 [style=dashed label="decimal-literal"]
  1434 -> 76 [style=dashed label="decltype-specifier"]
  1434 -> 411 [style=dashed label="delete-expression"]
  1434 -> 412 [style=dashed label="digit"]
  1434 -> 413 [style=dashed label="digit-sequence"]
  1434 -> 414 [style=dashed label="encoding-prefix"]
  1434 -> 84 [style=dashed label="enum-name"]
  1434 -> 415 [style=dashed label="equality-expression"]
  1434 -> 416 [style=dashed label="exclusive-or-expression"]
  1434 -> 417 [style=dashed label="floating-point-literal"]
  1434 -> 418 [style=dashed label="fold-expression"]
  1434 -> 419 [style=dashed label="fractional-constant"]
  1434 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1434 -> 421 [style=dashed label="hexadecimal-literal"]
  1434 -> 422 [style=dashed label="hexadecimal-prefix"]
  1434 -> 423 [style=dashed label="id-expression"]
  1434 -> 424 [style=dashed label="inclusive-or-expression"]
  1434 -> 1687 [style=dashed label="initializer-clause"]
  1434 -> 425 [style=dashed label="integer-literal"]
  1434 -> 426 [style=dashed label="lambda-expression"]
  1434 -> 427 [style=dashed label="lambda-introducer"]
  1434 -> 428 [style=dashed label="literal"]
  1434 -> 95 [style=dashed label="literal-operator-id"]
  1434 -> 429 [style=dashed label="logical-and-expression"]
  1434 -> 528 [style=dashed label="logical-or-expression"]
  1434 -> 431 [style=dashed label="multiplicative-expression"]
  1434 -> 99 [style=dashed label="namespace-alias"]
  1434 -> 102 [style=dashed label="namespace-name"]
  1434 -> 432 [style=dashed label="nested-name-specifier"]
  1434 -> 433 [style=dashed label="new-expression"]
  1434 -> 434 [style=dashed label="noexcept-expression"]
  1434 -> 435 [style=dashed label="nonzero-digit"]
  1434 -> 436 [style=dashed label="octal-literal"]
  1434 -> 108 [style=dashed label="operator-function-id"]
  1434 -> 109 [style=dashed label="placeholder-type-specifier"]
  1434 -> 437 [style=dashed label="pm-expression"]
  1434 -> 438 [style=dashed label="pointer-literal"]
  1434 -> 439 [style=dashed label="postfix-expression"]
  1434 -> 440 [style=dashed label="primary-expression"]
  1434 -> 112 [style=dashed label="qualified-id"]
  1434 -> 441 [style=dashed label="relational-expression"]
  1434 -> 442 [style=dashed label="requires-expression"]
  1434 -> 443 [style=dashed label="shift-expression"]
  1434 -> 114 [style=dashed label="simple-template-id"]
  1434 -> 529 [style=dashed label="simple-type-specifier"]
  1434 -> 445 [style=dashed label="string-literal"]
  1434 -> 120 [style=dashed label="template-id"]
  1434 -> 215 [style=dashed label="template-name"]
  1434 -> 530 [style=dashed label="throw-expression"]
  1434 -> 123 [style=dashed label="type-constraint"]
  1434 -> 124 [style=dashed label="type-name"]
  1434 -> 126 [style=dashed label="typedef-name"]
  1434 -> 531 [style=dashed label="typename-specifier"]
  1434 -> 449 [style=dashed label="unary-expression"]
  1434 -> 450 [style=dashed label="unary-operator"]
  1434 -> 129 [style=dashed label="unqualified-id"]
  1434 -> 451 [style=dashed label="user-defined-character-literal"]
  1434 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1434 -> 453 [style=dashed label="user-defined-integer-literal"]
  1434 -> 454 [style=dashed label="user-defined-literal"]
  1434 -> 455 [style=dashed label="user-defined-string-literal"]
  1434 -> 532 [style=dashed label="yield-expression"]
  1435 [label="State 1435\n\l807 parameter-declaration: decl-specifier-seq declarator EQ • initializer-clause\l"]
  1435 -> 356 [style=solid label="PLUS"]
  1435 -> 357 [style=solid label="MINUS"]
  1435 -> 2 [style=solid label="IDENTIFIER"]
  1435 -> 358 [style=solid label="OPEN_PAREN"]
  1435 -> 359 [style=solid label="AND"]
  1435 -> 360 [style=solid label="SCOPE"]
  1435 -> 361 [style=solid label="OPEN_SQUARE"]
  1435 -> 362 [style=solid label="CO_AWAIT"]
  1435 -> 935 [style=solid label="OPEN_BRACE"]
  1435 -> 363 [style=solid label="ZERO_LB"]
  1435 -> 364 [style=solid label="ZERO_HB"]
  1435 -> 365 [style=solid label="SINGLE_QUOTE"]
  1435 -> 366 [style=solid label="FALSE"]
  1435 -> 367 [style=solid label="TRUE"]
  1435 -> 368 [style=solid label="NOEXCEPT"]
  1435 -> 17 [style=solid label="OPERATOR"]
  1435 -> 26 [style=solid label="DECLTYPE"]
  1435 -> 369 [style=solid label="DELETE"]
  1435 -> 370 [style=solid label="DOT"]
  1435 -> 184 [style=solid label="UNICODE_8"]
  1435 -> 371 [style=solid label="MULT"]
  1435 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1435 -> 372 [style=solid label="ZERO_LX"]
  1435 -> 373 [style=solid label="ZERO_HX"]
  1435 -> 374 [style=solid label="REQUIRES"]
  1435 -> 375 [style=solid label="NEW"]
  1435 -> 376 [style=solid label="COMPL"]
  1435 -> 377 [style=solid label="NOT"]
  1435 -> 378 [style=solid label="PLUS_PLUS"]
  1435 -> 379 [style=solid label="MINUS_MINUS"]
  1435 -> 380 [style=solid label="THIS"]
  1435 -> 36 [style=solid label="AUTO"]
  1435 -> 381 [style=solid label="NULLPTR"]
  1435 -> 382 [style=solid label="DYNAMIC_CAST"]
  1435 -> 383 [style=solid label="STATIC_CAST"]
  1435 -> 384 [style=solid label="REINTERPRET_CAST"]
  1435 -> 385 [style=solid label="CONST_CAST"]
  1435 -> 386 [style=solid label="TYPEID"]
  1435 -> 37 [style=solid label="CHAR"]
  1435 -> 38 [style=solid label="CHAR8_T"]
  1435 -> 39 [style=solid label="CHAR16_T"]
  1435 -> 40 [style=solid label="CHAR32_T"]
  1435 -> 41 [style=solid label="WCHAR_T"]
  1435 -> 42 [style=solid label="BOOL"]
  1435 -> 43 [style=solid label="SHORT"]
  1435 -> 44 [style=solid label="INT"]
  1435 -> 45 [style=solid label="LONG"]
  1435 -> 46 [style=solid label="SIGNED"]
  1435 -> 47 [style=solid label="UNSIGNED"]
  1435 -> 48 [style=solid label="FLOAT"]
  1435 -> 49 [style=solid label="DOUBLE"]
  1435 -> 50 [style=solid label="VOID"]
  1435 -> 523 [style=solid label="THROW"]
  1435 -> 55 [style=solid label="TYPENAME"]
  1435 -> 387 [style=solid label="SIZEOF"]
  1435 -> 388 [style=solid label="ALIGNOF"]
  1435 -> 524 [style=solid label="CO_YIELD"]
  1435 -> 389 [style=solid label="'0'"]
  1435 -> 390 [style=solid label="'1'"]
  1435 -> 391 [style=solid label="'2'"]
  1435 -> 392 [style=solid label="'3'"]
  1435 -> 393 [style=solid label="'4'"]
  1435 -> 394 [style=solid label="'5'"]
  1435 -> 395 [style=solid label="'6'"]
  1435 -> 396 [style=solid label="'7'"]
  1435 -> 397 [style=solid label="'8'"]
  1435 -> 398 [style=solid label="'9'"]
  1435 -> 205 [style=solid label="'u'"]
  1435 -> 206 [style=solid label="'U'"]
  1435 -> 207 [style=solid label="'L'"]
  1435 -> 208 [style=solid label="'R'"]
  1435 -> 399 [style=dashed label="additive-expression"]
  1435 -> 400 [style=dashed label="and-expression"]
  1435 -> 1134 [style=dashed label="assignment-expression"]
  1435 -> 401 [style=dashed label="await-expression"]
  1435 -> 402 [style=dashed label="binary-literal"]
  1435 -> 403 [style=dashed label="boolean-literal"]
  1435 -> 1135 [style=dashed label="braced-init-list"]
  1435 -> 404 [style=dashed label="cast-expression"]
  1435 -> 405 [style=dashed label="character-literal"]
  1435 -> 65 [style=dashed label="class-name"]
  1435 -> 406 [style=dashed label="compare-expression"]
  1435 -> 67 [style=dashed label="concept-name"]
  1435 -> 526 [style=dashed label="conditional-expression"]
  1435 -> 68 [style=dashed label="conversion-function-id"]
  1435 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1435 -> 410 [style=dashed label="decimal-literal"]
  1435 -> 76 [style=dashed label="decltype-specifier"]
  1435 -> 411 [style=dashed label="delete-expression"]
  1435 -> 412 [style=dashed label="digit"]
  1435 -> 413 [style=dashed label="digit-sequence"]
  1435 -> 414 [style=dashed label="encoding-prefix"]
  1435 -> 84 [style=dashed label="enum-name"]
  1435 -> 415 [style=dashed label="equality-expression"]
  1435 -> 416 [style=dashed label="exclusive-or-expression"]
  1435 -> 417 [style=dashed label="floating-point-literal"]
  1435 -> 418 [style=dashed label="fold-expression"]
  1435 -> 419 [style=dashed label="fractional-constant"]
  1435 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1435 -> 421 [style=dashed label="hexadecimal-literal"]
  1435 -> 422 [style=dashed label="hexadecimal-prefix"]
  1435 -> 423 [style=dashed label="id-expression"]
  1435 -> 424 [style=dashed label="inclusive-or-expression"]
  1435 -> 1688 [style=dashed label="initializer-clause"]
  1435 -> 425 [style=dashed label="integer-literal"]
  1435 -> 426 [style=dashed label="lambda-expression"]
  1435 -> 427 [style=dashed label="lambda-introducer"]
  1435 -> 428 [style=dashed label="literal"]
  1435 -> 95 [style=dashed label="literal-operator-id"]
  1435 -> 429 [style=dashed label="logical-and-expression"]
  1435 -> 528 [style=dashed label="logical-or-expression"]
  1435 -> 431 [style=dashed label="multiplicative-expression"]
  1435 -> 99 [style=dashed label="namespace-alias"]
  1435 -> 102 [style=dashed label="namespace-name"]
  1435 -> 432 [style=dashed label="nested-name-specifier"]
  1435 -> 433 [style=dashed label="new-expression"]
  1435 -> 434 [style=dashed label="noexcept-expression"]
  1435 -> 435 [style=dashed label="nonzero-digit"]
  1435 -> 436 [style=dashed label="octal-literal"]
  1435 -> 108 [style=dashed label="operator-function-id"]
  1435 -> 109 [style=dashed label="placeholder-type-specifier"]
  1435 -> 437 [style=dashed label="pm-expression"]
  1435 -> 438 [style=dashed label="pointer-literal"]
  1435 -> 439 [style=dashed label="postfix-expression"]
  1435 -> 440 [style=dashed label="primary-expression"]
  1435 -> 112 [style=dashed label="qualified-id"]
  1435 -> 441 [style=dashed label="relational-expression"]
  1435 -> 442 [style=dashed label="requires-expression"]
  1435 -> 443 [style=dashed label="shift-expression"]
  1435 -> 114 [style=dashed label="simple-template-id"]
  1435 -> 529 [style=dashed label="simple-type-specifier"]
  1435 -> 445 [style=dashed label="string-literal"]
  1435 -> 120 [style=dashed label="template-id"]
  1435 -> 215 [style=dashed label="template-name"]
  1435 -> 530 [style=dashed label="throw-expression"]
  1435 -> 123 [style=dashed label="type-constraint"]
  1435 -> 124 [style=dashed label="type-name"]
  1435 -> 126 [style=dashed label="typedef-name"]
  1435 -> 531 [style=dashed label="typename-specifier"]
  1435 -> 449 [style=dashed label="unary-expression"]
  1435 -> 450 [style=dashed label="unary-operator"]
  1435 -> 129 [style=dashed label="unqualified-id"]
  1435 -> 451 [style=dashed label="user-defined-character-literal"]
  1435 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1435 -> 453 [style=dashed label="user-defined-integer-literal"]
  1435 -> 454 [style=dashed label="user-defined-literal"]
  1435 -> 455 [style=dashed label="user-defined-string-literal"]
  1435 -> 532 [style=dashed label="yield-expression"]
  1436 [label="State 1436\n\l1095 type-parameter: template-head type-parameter-key IDENTIFIER •\l1098               | template-head type-parameter-key IDENTIFIER • EQ id-expression\l"]
  1436 -> 1689 [style=solid label="EQ"]
  1436 -> "1436R1095" [style=solid]
 "1436R1095" [label="R1095", fillcolor=3, shape=diamond, style=filled]
  1437 [label="State 1437\n\l1097 type-parameter: template-head type-parameter-key EQ • id-expression\l"]
  1437 -> 147 [style=solid label="IDENTIFIER"]
  1437 -> 9 [style=solid label="SCOPE"]
  1437 -> 17 [style=solid label="OPERATOR"]
  1437 -> 134 [style=solid label="DECLTYPE"]
  1437 -> 35 [style=solid label="COMPL"]
  1437 -> 65 [style=dashed label="class-name"]
  1437 -> 68 [style=dashed label="conversion-function-id"]
  1437 -> 138 [style=dashed label="decltype-specifier"]
  1437 -> 84 [style=dashed label="enum-name"]
  1437 -> 1690 [style=dashed label="id-expression"]
  1437 -> 95 [style=dashed label="literal-operator-id"]
  1437 -> 99 [style=dashed label="namespace-alias"]
  1437 -> 102 [style=dashed label="namespace-name"]
  1437 -> 152 [style=dashed label="nested-name-specifier"]
  1437 -> 108 [style=dashed label="operator-function-id"]
  1437 -> 112 [style=dashed label="qualified-id"]
  1437 -> 114 [style=dashed label="simple-template-id"]
  1437 -> 120 [style=dashed label="template-id"]
  1437 -> 142 [style=dashed label="template-name"]
  1437 -> 143 [style=dashed label="type-name"]
  1437 -> 126 [style=dashed label="typedef-name"]
  1437 -> 129 [style=dashed label="unqualified-id"]
  1438 [label="State 1438\n\l1094 type-parameter: template-head type-parameter-key ELLIPSIS •\l1096               | template-head type-parameter-key ELLIPSIS • IDENTIFIER\l"]
  1438 -> 1691 [style=solid label="IDENTIFIER"]
  1438 -> "1438R1094" [style=solid]
 "1438R1094" [label="R1094", fillcolor=3, shape=diamond, style=filled]
  1439 [label="State 1439\n\l1056 template-parameter-list: template-parameter-list COMMA template-parameter •\l"]
  1439 -> "1439R1056" [style=solid]
 "1439R1056" [label="R1056", fillcolor=3, shape=diamond, style=filled]
  1440 [label="State 1440\n\l1046 template-head: TEMPLATE LESS template-parameter-list GREATER requires-clause •\l"]
  1440 -> "1440R1046" [style=solid]
 "1440R1046" [label="R1046", fillcolor=3, shape=diamond, style=filled]
  1441 [label="State 1441\n\l1092 type-parameter: type-constraint IDENTIFIER EQ • type-id\l"]
  1441 -> 162 [style=solid label="IDENTIFIER"]
  1441 -> 9 [style=solid label="SCOPE"]
  1441 -> 12 [style=solid label="CLASS"]
  1441 -> 13 [style=solid label="STRUCT"]
  1441 -> 14 [style=solid label="UNION"]
  1441 -> 18 [style=solid label="CONST"]
  1441 -> 19 [style=solid label="VOLATILE"]
  1441 -> 26 [style=solid label="DECLTYPE"]
  1441 -> 135 [style=solid label="ENUM"]
  1441 -> 36 [style=solid label="AUTO"]
  1441 -> 37 [style=solid label="CHAR"]
  1441 -> 38 [style=solid label="CHAR8_T"]
  1441 -> 39 [style=solid label="CHAR16_T"]
  1441 -> 40 [style=solid label="CHAR32_T"]
  1441 -> 41 [style=solid label="WCHAR_T"]
  1441 -> 42 [style=solid label="BOOL"]
  1441 -> 43 [style=solid label="SHORT"]
  1441 -> 44 [style=solid label="INT"]
  1441 -> 45 [style=solid label="LONG"]
  1441 -> 46 [style=solid label="SIGNED"]
  1441 -> 47 [style=solid label="UNSIGNED"]
  1441 -> 48 [style=solid label="FLOAT"]
  1441 -> 49 [style=solid label="DOUBLE"]
  1441 -> 50 [style=solid label="VOID"]
  1441 -> 55 [style=solid label="TYPENAME"]
  1441 -> 209 [style=dashed label="class-key"]
  1441 -> 65 [style=dashed label="class-name"]
  1441 -> 67 [style=dashed label="concept-name"]
  1441 -> 69 [style=dashed label="cv-qualifier"]
  1441 -> 76 [style=dashed label="decltype-specifier"]
  1441 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1441 -> 80 [style=dashed label="elaborated-type-specifier"]
  1441 -> 84 [style=dashed label="enum-name"]
  1441 -> 99 [style=dashed label="namespace-alias"]
  1441 -> 102 [style=dashed label="namespace-name"]
  1441 -> 212 [style=dashed label="nested-name-specifier"]
  1441 -> 109 [style=dashed label="placeholder-type-specifier"]
  1441 -> 141 [style=dashed label="simple-template-id"]
  1441 -> 115 [style=dashed label="simple-type-specifier"]
  1441 -> 215 [style=dashed label="template-name"]
  1441 -> 123 [style=dashed label="type-constraint"]
  1441 -> 1692 [style=dashed label="type-id"]
  1441 -> 124 [style=dashed label="type-name"]
  1441 -> 216 [style=dashed label="type-specifier"]
  1441 -> 447 [style=dashed label="type-specifier-seq"]
  1441 -> 126 [style=dashed label="typedef-name"]
  1441 -> 127 [style=dashed label="typename-specifier"]
  1442 [label="State 1442\n\l1091 type-parameter: type-constraint EQ type-id •\l"]
  1442 -> "1442R1091" [style=solid]
 "1442R1091" [label="R1091", fillcolor=3, shape=diamond, style=filled]
  1443 [label="State 1443\n\l1090 type-parameter: type-constraint ELLIPSIS IDENTIFIER •\l"]
  1443 -> "1443R1090" [style=solid]
 "1443R1090" [label="R1090", fillcolor=3, shape=diamond, style=filled]
  1444 [label="State 1444\n\l1086 type-parameter: type-parameter-key IDENTIFIER EQ • type-id\l"]
  1444 -> 162 [style=solid label="IDENTIFIER"]
  1444 -> 9 [style=solid label="SCOPE"]
  1444 -> 12 [style=solid label="CLASS"]
  1444 -> 13 [style=solid label="STRUCT"]
  1444 -> 14 [style=solid label="UNION"]
  1444 -> 18 [style=solid label="CONST"]
  1444 -> 19 [style=solid label="VOLATILE"]
  1444 -> 26 [style=solid label="DECLTYPE"]
  1444 -> 135 [style=solid label="ENUM"]
  1444 -> 36 [style=solid label="AUTO"]
  1444 -> 37 [style=solid label="CHAR"]
  1444 -> 38 [style=solid label="CHAR8_T"]
  1444 -> 39 [style=solid label="CHAR16_T"]
  1444 -> 40 [style=solid label="CHAR32_T"]
  1444 -> 41 [style=solid label="WCHAR_T"]
  1444 -> 42 [style=solid label="BOOL"]
  1444 -> 43 [style=solid label="SHORT"]
  1444 -> 44 [style=solid label="INT"]
  1444 -> 45 [style=solid label="LONG"]
  1444 -> 46 [style=solid label="SIGNED"]
  1444 -> 47 [style=solid label="UNSIGNED"]
  1444 -> 48 [style=solid label="FLOAT"]
  1444 -> 49 [style=solid label="DOUBLE"]
  1444 -> 50 [style=solid label="VOID"]
  1444 -> 55 [style=solid label="TYPENAME"]
  1444 -> 209 [style=dashed label="class-key"]
  1444 -> 65 [style=dashed label="class-name"]
  1444 -> 67 [style=dashed label="concept-name"]
  1444 -> 69 [style=dashed label="cv-qualifier"]
  1444 -> 76 [style=dashed label="decltype-specifier"]
  1444 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1444 -> 80 [style=dashed label="elaborated-type-specifier"]
  1444 -> 84 [style=dashed label="enum-name"]
  1444 -> 99 [style=dashed label="namespace-alias"]
  1444 -> 102 [style=dashed label="namespace-name"]
  1444 -> 212 [style=dashed label="nested-name-specifier"]
  1444 -> 109 [style=dashed label="placeholder-type-specifier"]
  1444 -> 141 [style=dashed label="simple-template-id"]
  1444 -> 115 [style=dashed label="simple-type-specifier"]
  1444 -> 215 [style=dashed label="template-name"]
  1444 -> 123 [style=dashed label="type-constraint"]
  1444 -> 1693 [style=dashed label="type-id"]
  1444 -> 124 [style=dashed label="type-name"]
  1444 -> 216 [style=dashed label="type-specifier"]
  1444 -> 447 [style=dashed label="type-specifier-seq"]
  1444 -> 126 [style=dashed label="typedef-name"]
  1444 -> 127 [style=dashed label="typename-specifier"]
  1445 [label="State 1445\n\l1085 type-parameter: type-parameter-key EQ type-id •\l"]
  1445 -> "1445R1085" [style=solid]
 "1445R1085" [label="R1085", fillcolor=3, shape=diamond, style=filled]
  1446 [label="State 1446\n\l1084 type-parameter: type-parameter-key ELLIPSIS IDENTIFIER •\l"]
  1446 -> "1446R1084" [style=solid]
 "1446R1084" [label="R1084", fillcolor=3, shape=diamond, style=filled]
  1447 [label="State 1447\n\l746 octal-escape-sequence: ESCAPE octal-digit octal-digit •\l747                      | ESCAPE octal-digit octal-digit • octal-digit\l"]
  1447 -> 909 [style=solid label="'0'"]
  1447 -> 910 [style=solid label="'1'"]
  1447 -> 911 [style=solid label="'2'"]
  1447 -> 912 [style=solid label="'3'"]
  1447 -> 913 [style=solid label="'4'"]
  1447 -> 914 [style=solid label="'5'"]
  1447 -> 915 [style=solid label="'6'"]
  1447 -> 916 [style=solid label="'7'"]
  1447 -> 1694 [style=dashed label="octal-digit"]
  1447 -> "1447R746" [style=solid]
 "1447R746" [label="R746", fillcolor=3, shape=diamond, style=filled]
  1448 [label="State 1448\n\l421 hex-quad: hexadecimal-digit hexadecimal-digit • hexadecimal-digit hexadecimal-digit\l"]
  1448 -> 867 [style=solid label="'0'"]
  1448 -> 868 [style=solid label="'1'"]
  1448 -> 869 [style=solid label="'2'"]
  1448 -> 870 [style=solid label="'3'"]
  1448 -> 871 [style=solid label="'4'"]
  1448 -> 872 [style=solid label="'5'"]
  1448 -> 873 [style=solid label="'6'"]
  1448 -> 874 [style=solid label="'7'"]
  1448 -> 875 [style=solid label="'8'"]
  1448 -> 876 [style=solid label="'9'"]
  1448 -> 877 [style=solid label="'e'"]
  1448 -> 878 [style=solid label="'E'"]
  1448 -> 879 [style=solid label="'f'"]
  1448 -> 880 [style=solid label="'F'"]
  1448 -> 881 [style=solid label="'a'"]
  1448 -> 882 [style=solid label="'b'"]
  1448 -> 883 [style=solid label="'c'"]
  1448 -> 884 [style=solid label="'d'"]
  1448 -> 885 [style=solid label="'A'"]
  1448 -> 886 [style=solid label="'B'"]
  1448 -> 887 [style=solid label="'C'"]
  1448 -> 888 [style=solid label="'D'"]
  1448 -> 1695 [style=dashed label="hexadecimal-digit"]
  1449 [label="State 1449\n\l1135 universal-character-name: ESCAPE_HU hex-quad hex-quad •\l"]
  1449 -> "1449R1135" [style=solid]
 "1449R1135" [label="R1135", fillcolor=3, shape=diamond, style=filled]
  1450 [label="State 1450\n\l267 elaborated-type-specifier: class-key attribute-specifier-seq nested-name-specifier IDENTIFIER •\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l"]
  1450 -> 722 [style=solid label="SCOPE"]
  1450 -> "1450R267d" [label="[SCOPE]", style=solid]
 "1450R267d" [label="R267", fillcolor=5, shape=diamond, style=filled]
  1450 -> "1450R267" [style=solid]
 "1450R267" [label="R267", fillcolor=3, shape=diamond, style=filled]
  1450 -> "1450R1052d" [label="[LESS]", style=solid]
 "1450R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  1451 [label="State 1451\n\l1032 string-literal: encoding-prefix DOUBLE_QUOTE s-char-sequence DOUBLE_QUOTE •\l"]
  1451 -> "1451R1032" [style=solid]
 "1451R1032" [label="R1032", fillcolor=3, shape=diamond, style=filled]
  1452 [label="State 1452\n\l757 operator-function-id: OPERATOR overloadable-operator LESS template-argument-list GREATER •\l"]
  1452 -> "1452R757" [style=solid]
 "1452R757" [label="R757", fillcolor=3, shape=diamond, style=filled]
  1453 [label="State 1453\n\l643 named-namespace-definition: INLINE NAMESPACE IDENTIFIER OPEN_BRACE namespace-body • CLOSE_BRACE\l"]
  1453 -> 1696 [style=solid label="CLOSE_BRACE"]
  1454 [label="State 1454\n\l1136 unnamed-namespace-definition: INLINE NAMESPACE OPEN_BRACE namespace-body CLOSE_BRACE •\l"]
  1454 -> "1454R1136" [style=solid]
 "1454R1136" [label="R1136", fillcolor=3, shape=diamond, style=filled]
  1455 [label="State 1455\n\l645 named-namespace-definition: INLINE NAMESPACE attribute-specifier-seq IDENTIFIER OPEN_BRACE • namespace-body CLOSE_BRACE\l"]
  1455 -> 1 [style=solid label="USING"]
  1455 -> 2 [style=solid label="IDENTIFIER"]
  1455 -> 3 [style=solid label="SEMICOLON"]
  1455 -> 4 [style=solid label="ALIGNAS"]
  1455 -> 5 [style=solid label="OPEN_PAREN"]
  1455 -> 6 [style=solid label="ELLIPSIS"]
  1455 -> 7 [style=solid label="AND"]
  1455 -> 8 [style=solid label="ASM"]
  1455 -> 9 [style=solid label="SCOPE"]
  1455 -> 10 [style=solid label="OPEN_SQUARE"]
  1455 -> 11 [style=solid label="VIRTUAL"]
  1455 -> 12 [style=solid label="CLASS"]
  1455 -> 13 [style=solid label="STRUCT"]
  1455 -> 14 [style=solid label="UNION"]
  1455 -> 15 [style=solid label="TEMPLATE"]
  1455 -> 16 [style=solid label="AND_AND"]
  1455 -> 17 [style=solid label="OPERATOR"]
  1455 -> 18 [style=solid label="CONST"]
  1455 -> 19 [style=solid label="VOLATILE"]
  1455 -> 20 [style=solid label="FRIEND"]
  1455 -> 21 [style=solid label="TYPEDEF"]
  1455 -> 22 [style=solid label="CONSTEXPR"]
  1455 -> 23 [style=solid label="CONSTEVAL"]
  1455 -> 24 [style=solid label="CONSTINIT"]
  1455 -> 25 [style=solid label="INLINE"]
  1455 -> 26 [style=solid label="DECLTYPE"]
  1455 -> 27 [style=solid label="ENUM"]
  1455 -> 28 [style=solid label="EXTERN"]
  1455 -> 29 [style=solid label="EXPLICIT"]
  1455 -> 157 [style=solid label="EXPORT"]
  1455 -> 31 [style=solid label="MULT"]
  1455 -> 33 [style=solid label="IMPORT"]
  1455 -> 34 [style=solid label="NAMESPACE"]
  1455 -> 35 [style=solid label="COMPL"]
  1455 -> 36 [style=solid label="AUTO"]
  1455 -> 37 [style=solid label="CHAR"]
  1455 -> 38 [style=solid label="CHAR8_T"]
  1455 -> 39 [style=solid label="CHAR16_T"]
  1455 -> 40 [style=solid label="CHAR32_T"]
  1455 -> 41 [style=solid label="WCHAR_T"]
  1455 -> 42 [style=solid label="BOOL"]
  1455 -> 43 [style=solid label="SHORT"]
  1455 -> 44 [style=solid label="INT"]
  1455 -> 45 [style=solid label="LONG"]
  1455 -> 46 [style=solid label="SIGNED"]
  1455 -> 47 [style=solid label="UNSIGNED"]
  1455 -> 48 [style=solid label="FLOAT"]
  1455 -> 49 [style=solid label="DOUBLE"]
  1455 -> 50 [style=solid label="VOID"]
  1455 -> 51 [style=solid label="STATIC_ASSERT"]
  1455 -> 52 [style=solid label="STATIC"]
  1455 -> 53 [style=solid label="THREAD_LOCAL"]
  1455 -> 54 [style=solid label="MUTABLE"]
  1455 -> 55 [style=solid label="TYPENAME"]
  1455 -> 56 [style=dashed label="alias-declaration"]
  1455 -> 57 [style=dashed label="alignment-specifier"]
  1455 -> 58 [style=dashed label="asm-declaration"]
  1455 -> 59 [style=dashed label="attribute-declaration"]
  1455 -> 60 [style=dashed label="attribute-specifier"]
  1455 -> 61 [style=dashed label="attribute-specifier-seq"]
  1455 -> 62 [style=dashed label="block-declaration"]
  1455 -> 63 [style=dashed label="class-head"]
  1455 -> 64 [style=dashed label="class-key"]
  1455 -> 65 [style=dashed label="class-name"]
  1455 -> 66 [style=dashed label="class-specifier"]
  1455 -> 67 [style=dashed label="concept-name"]
  1455 -> 68 [style=dashed label="conversion-function-id"]
  1455 -> 69 [style=dashed label="cv-qualifier"]
  1455 -> 70 [style=dashed label="decl-specifier"]
  1455 -> 71 [style=dashed label="decl-specifier-seq"]
  1455 -> 72 [style=dashed label="declaration"]
  1455 -> 566 [style=dashed label="declaration-seq"]
  1455 -> 74 [style=dashed label="declarator"]
  1455 -> 75 [style=dashed label="declarator-id"]
  1455 -> 76 [style=dashed label="decltype-specifier"]
  1455 -> 77 [style=dashed label="deduction-guide"]
  1455 -> 78 [style=dashed label="defining-type-specifier"]
  1455 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1455 -> 80 [style=dashed label="elaborated-type-specifier"]
  1455 -> 81 [style=dashed label="empty-declaration"]
  1455 -> 82 [style=dashed label="enum-head"]
  1455 -> 83 [style=dashed label="enum-key"]
  1455 -> 84 [style=dashed label="enum-name"]
  1455 -> 85 [style=dashed label="enum-specifier"]
  1455 -> 86 [style=dashed label="explicit-instantiation"]
  1455 -> 87 [style=dashed label="explicit-specialization"]
  1455 -> 88 [style=dashed label="explicit-specifier"]
  1455 -> 89 [style=dashed label="export-declaration"]
  1455 -> 90 [style=dashed label="function-definition"]
  1455 -> 91 [style=dashed label="function-specifier"]
  1455 -> 93 [style=dashed label="id-expression"]
  1455 -> 94 [style=dashed label="linkage-specification"]
  1455 -> 95 [style=dashed label="literal-operator-id"]
  1455 -> 97 [style=dashed label="module-import-declaration"]
  1455 -> 98 [style=dashed label="named-namespace-definition"]
  1455 -> 99 [style=dashed label="namespace-alias"]
  1455 -> 100 [style=dashed label="namespace-alias-definition"]
  1455 -> 1697 [style=dashed label="namespace-body"]
  1455 -> 101 [style=dashed label="namespace-definition"]
  1455 -> 102 [style=dashed label="namespace-name"]
  1455 -> 103 [style=dashed label="nested-name-specifier"]
  1455 -> 104 [style=dashed label="nested-namespace-definition"]
  1455 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  1455 -> 106 [style=dashed label="noptr-declarator"]
  1455 -> 107 [style=dashed label="opaque-enum-declaration"]
  1455 -> 108 [style=dashed label="operator-function-id"]
  1455 -> 109 [style=dashed label="placeholder-type-specifier"]
  1455 -> 110 [style=dashed label="ptr-declarator"]
  1455 -> 111 [style=dashed label="ptr-operator"]
  1455 -> 112 [style=dashed label="qualified-id"]
  1455 -> 113 [style=dashed label="simple-declaration"]
  1455 -> 114 [style=dashed label="simple-template-id"]
  1455 -> 115 [style=dashed label="simple-type-specifier"]
  1455 -> 116 [style=dashed label="static_assert-declaration"]
  1455 -> 117 [style=dashed label="storage-class-specifier"]
  1455 -> 118 [style=dashed label="template-declaration"]
  1455 -> 119 [style=dashed label="template-head"]
  1455 -> 120 [style=dashed label="template-id"]
  1455 -> 121 [style=dashed label="template-name"]
  1455 -> 123 [style=dashed label="type-constraint"]
  1455 -> 124 [style=dashed label="type-name"]
  1455 -> 125 [style=dashed label="type-specifier"]
  1455 -> 126 [style=dashed label="typedef-name"]
  1455 -> 127 [style=dashed label="typename-specifier"]
  1455 -> 128 [style=dashed label="unnamed-namespace-definition"]
  1455 -> 129 [style=dashed label="unqualified-id"]
  1455 -> 130 [style=dashed label="using-declaration"]
  1455 -> 131 [style=dashed label="using-directive"]
  1455 -> 132 [style=dashed label="using-enum-declaration"]
  1456 [label="State 1456\n\l1138 unnamed-namespace-definition: INLINE NAMESPACE attribute-specifier-seq OPEN_BRACE namespace-body • CLOSE_BRACE\l"]
  1456 -> 1698 [style=solid label="CLOSE_BRACE"]
  1457 [label="State 1457\n\l335 expression: expression COMMA assignment-expression •\l"]
  1457 -> "1457R335" [style=solid]
 "1457R335" [label="R335", fillcolor=3, shape=diamond, style=filled]
  1458 [label="State 1458\n\l 26 assignment-expression: logical-or-expression assignment-operator initializer-clause •\l"]
  1458 -> "1458R26" [style=solid]
 "1458R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  1459 [label="State 1459\n\l552 linkage-specification: EXTERN string-literal OPEN_BRACE declaration-seq CLOSE_BRACE •\l"]
  1459 -> "1459R552" [style=solid]
 "1459R552" [label="R552", fillcolor=3, shape=diamond, style=filled]
  1460 [label="State 1460\n\l623 module-declaration: EXPORT MODULE module-name attribute-specifier-seq SEMICOLON •\l"]
  1460 -> "1460R623" [style=solid]
 "1460R623" [label="R623", fillcolor=3, shape=diamond, style=filled]
  1461 [label="State 1461\n\l621 module-declaration: EXPORT MODULE module-name module-partition SEMICOLON •\l"]
  1461 -> "1461R621" [style=solid]
 "1461R621" [label="R621", fillcolor=3, shape=diamond, style=filled]
  1462 [label="State 1462\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l625 module-declaration: EXPORT MODULE module-name module-partition attribute-specifier-seq • SEMICOLON\l"]
  1462 -> 1699 [style=solid label="SEMICOLON"]
  1462 -> 4 [style=solid label="ALIGNAS"]
  1462 -> 10 [style=solid label="OPEN_SQUARE"]
  1462 -> 57 [style=dashed label="alignment-specifier"]
  1462 -> 260 [style=dashed label="attribute-specifier"]
  1463 [label="State 1463\n\l626 module-declaration: MODULE module-name module-partition attribute-specifier-seq SEMICOLON •\l"]
  1463 -> "1463R626" [style=solid]
 "1463R626" [label="R626", fillcolor=3, shape=diamond, style=filled]
  1464 [label="State 1464\n\l911 qualified-namespace-specifier: nested-name-specifier namespace-name •\l"]
  1464 -> "1464R911" [style=solid]
 "1464R911" [label="R911", fillcolor=3, shape=diamond, style=filled]
  1465 [label="State 1465\n\l648 namespace-alias-definition: NAMESPACE IDENTIFIER EQ qualified-namespace-specifier SEMICOLON •\l"]
  1465 -> "1465R648" [style=solid]
 "1465R648" [label="R648", fillcolor=3, shape=diamond, style=filled]
  1466 [label="State 1466\n\l644 named-namespace-definition: NAMESPACE IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE •\l"]
  1466 -> "1466R644" [style=solid]
 "1466R644" [label="R644", fillcolor=3, shape=diamond, style=filled]
  1467 [label="State 1467\n\l646 named-namespace-definition: NAMESPACE attribute-specifier-seq IDENTIFIER OPEN_BRACE namespace-body • CLOSE_BRACE\l"]
  1467 -> 1700 [style=solid label="CLOSE_BRACE"]
  1468 [label="State 1468\n\l1139 unnamed-namespace-definition: NAMESPACE attribute-specifier-seq OPEN_BRACE namespace-body CLOSE_BRACE •\l"]
  1468 -> "1468R1139" [style=solid]
 "1468R1139" [label="R1139", fillcolor=3, shape=diamond, style=filled]
  1469 [label="State 1469\n\l662 nested-namespace-definition: NAMESPACE enclosing-namespace-specifier SCOPE IDENTIFIER OPEN_BRACE • namespace-body CLOSE_BRACE\l"]
  1469 -> 1 [style=solid label="USING"]
  1469 -> 2 [style=solid label="IDENTIFIER"]
  1469 -> 3 [style=solid label="SEMICOLON"]
  1469 -> 4 [style=solid label="ALIGNAS"]
  1469 -> 5 [style=solid label="OPEN_PAREN"]
  1469 -> 6 [style=solid label="ELLIPSIS"]
  1469 -> 7 [style=solid label="AND"]
  1469 -> 8 [style=solid label="ASM"]
  1469 -> 9 [style=solid label="SCOPE"]
  1469 -> 10 [style=solid label="OPEN_SQUARE"]
  1469 -> 11 [style=solid label="VIRTUAL"]
  1469 -> 12 [style=solid label="CLASS"]
  1469 -> 13 [style=solid label="STRUCT"]
  1469 -> 14 [style=solid label="UNION"]
  1469 -> 15 [style=solid label="TEMPLATE"]
  1469 -> 16 [style=solid label="AND_AND"]
  1469 -> 17 [style=solid label="OPERATOR"]
  1469 -> 18 [style=solid label="CONST"]
  1469 -> 19 [style=solid label="VOLATILE"]
  1469 -> 20 [style=solid label="FRIEND"]
  1469 -> 21 [style=solid label="TYPEDEF"]
  1469 -> 22 [style=solid label="CONSTEXPR"]
  1469 -> 23 [style=solid label="CONSTEVAL"]
  1469 -> 24 [style=solid label="CONSTINIT"]
  1469 -> 25 [style=solid label="INLINE"]
  1469 -> 26 [style=solid label="DECLTYPE"]
  1469 -> 27 [style=solid label="ENUM"]
  1469 -> 28 [style=solid label="EXTERN"]
  1469 -> 29 [style=solid label="EXPLICIT"]
  1469 -> 157 [style=solid label="EXPORT"]
  1469 -> 31 [style=solid label="MULT"]
  1469 -> 33 [style=solid label="IMPORT"]
  1469 -> 34 [style=solid label="NAMESPACE"]
  1469 -> 35 [style=solid label="COMPL"]
  1469 -> 36 [style=solid label="AUTO"]
  1469 -> 37 [style=solid label="CHAR"]
  1469 -> 38 [style=solid label="CHAR8_T"]
  1469 -> 39 [style=solid label="CHAR16_T"]
  1469 -> 40 [style=solid label="CHAR32_T"]
  1469 -> 41 [style=solid label="WCHAR_T"]
  1469 -> 42 [style=solid label="BOOL"]
  1469 -> 43 [style=solid label="SHORT"]
  1469 -> 44 [style=solid label="INT"]
  1469 -> 45 [style=solid label="LONG"]
  1469 -> 46 [style=solid label="SIGNED"]
  1469 -> 47 [style=solid label="UNSIGNED"]
  1469 -> 48 [style=solid label="FLOAT"]
  1469 -> 49 [style=solid label="DOUBLE"]
  1469 -> 50 [style=solid label="VOID"]
  1469 -> 51 [style=solid label="STATIC_ASSERT"]
  1469 -> 52 [style=solid label="STATIC"]
  1469 -> 53 [style=solid label="THREAD_LOCAL"]
  1469 -> 54 [style=solid label="MUTABLE"]
  1469 -> 55 [style=solid label="TYPENAME"]
  1469 -> 56 [style=dashed label="alias-declaration"]
  1469 -> 57 [style=dashed label="alignment-specifier"]
  1469 -> 58 [style=dashed label="asm-declaration"]
  1469 -> 59 [style=dashed label="attribute-declaration"]
  1469 -> 60 [style=dashed label="attribute-specifier"]
  1469 -> 61 [style=dashed label="attribute-specifier-seq"]
  1469 -> 62 [style=dashed label="block-declaration"]
  1469 -> 63 [style=dashed label="class-head"]
  1469 -> 64 [style=dashed label="class-key"]
  1469 -> 65 [style=dashed label="class-name"]
  1469 -> 66 [style=dashed label="class-specifier"]
  1469 -> 67 [style=dashed label="concept-name"]
  1469 -> 68 [style=dashed label="conversion-function-id"]
  1469 -> 69 [style=dashed label="cv-qualifier"]
  1469 -> 70 [style=dashed label="decl-specifier"]
  1469 -> 71 [style=dashed label="decl-specifier-seq"]
  1469 -> 72 [style=dashed label="declaration"]
  1469 -> 566 [style=dashed label="declaration-seq"]
  1469 -> 74 [style=dashed label="declarator"]
  1469 -> 75 [style=dashed label="declarator-id"]
  1469 -> 76 [style=dashed label="decltype-specifier"]
  1469 -> 77 [style=dashed label="deduction-guide"]
  1469 -> 78 [style=dashed label="defining-type-specifier"]
  1469 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1469 -> 80 [style=dashed label="elaborated-type-specifier"]
  1469 -> 81 [style=dashed label="empty-declaration"]
  1469 -> 82 [style=dashed label="enum-head"]
  1469 -> 83 [style=dashed label="enum-key"]
  1469 -> 84 [style=dashed label="enum-name"]
  1469 -> 85 [style=dashed label="enum-specifier"]
  1469 -> 86 [style=dashed label="explicit-instantiation"]
  1469 -> 87 [style=dashed label="explicit-specialization"]
  1469 -> 88 [style=dashed label="explicit-specifier"]
  1469 -> 89 [style=dashed label="export-declaration"]
  1469 -> 90 [style=dashed label="function-definition"]
  1469 -> 91 [style=dashed label="function-specifier"]
  1469 -> 93 [style=dashed label="id-expression"]
  1469 -> 94 [style=dashed label="linkage-specification"]
  1469 -> 95 [style=dashed label="literal-operator-id"]
  1469 -> 97 [style=dashed label="module-import-declaration"]
  1469 -> 98 [style=dashed label="named-namespace-definition"]
  1469 -> 99 [style=dashed label="namespace-alias"]
  1469 -> 100 [style=dashed label="namespace-alias-definition"]
  1469 -> 1701 [style=dashed label="namespace-body"]
  1469 -> 101 [style=dashed label="namespace-definition"]
  1469 -> 102 [style=dashed label="namespace-name"]
  1469 -> 103 [style=dashed label="nested-name-specifier"]
  1469 -> 104 [style=dashed label="nested-namespace-definition"]
  1469 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  1469 -> 106 [style=dashed label="noptr-declarator"]
  1469 -> 107 [style=dashed label="opaque-enum-declaration"]
  1469 -> 108 [style=dashed label="operator-function-id"]
  1469 -> 109 [style=dashed label="placeholder-type-specifier"]
  1469 -> 110 [style=dashed label="ptr-declarator"]
  1469 -> 111 [style=dashed label="ptr-operator"]
  1469 -> 112 [style=dashed label="qualified-id"]
  1469 -> 113 [style=dashed label="simple-declaration"]
  1469 -> 114 [style=dashed label="simple-template-id"]
  1469 -> 115 [style=dashed label="simple-type-specifier"]
  1469 -> 116 [style=dashed label="static_assert-declaration"]
  1469 -> 117 [style=dashed label="storage-class-specifier"]
  1469 -> 118 [style=dashed label="template-declaration"]
  1469 -> 119 [style=dashed label="template-head"]
  1469 -> 120 [style=dashed label="template-id"]
  1469 -> 121 [style=dashed label="template-name"]
  1469 -> 123 [style=dashed label="type-constraint"]
  1469 -> 124 [style=dashed label="type-name"]
  1469 -> 125 [style=dashed label="type-specifier"]
  1469 -> 126 [style=dashed label="typedef-name"]
  1469 -> 127 [style=dashed label="typename-specifier"]
  1469 -> 128 [style=dashed label="unnamed-namespace-definition"]
  1469 -> 129 [style=dashed label="unqualified-id"]
  1469 -> 130 [style=dashed label="using-declaration"]
  1469 -> 131 [style=dashed label="using-directive"]
  1469 -> 132 [style=dashed label="using-enum-declaration"]
  1470 [label="State 1470\n\l275 enclosing-namespace-specifier: enclosing-namespace-specifier SCOPE INLINE IDENTIFIER •\l663 nested-namespace-definition: NAMESPACE enclosing-namespace-specifier SCOPE INLINE IDENTIFIER • OPEN_BRACE namespace-body CLOSE_BRACE\l"]
  1470 -> 1702 [style=solid label="OPEN_BRACE"]
  1470 -> "1470R275" [style=solid]
 "1470R275" [label="R275", fillcolor=3, shape=diamond, style=filled]
  1471 [label="State 1471\n\l1024 static_assert-declaration: STATIC_ASSERT OPEN_PAREN constant-expression CLOSE_PAREN SEMICOLON •\l"]
  1471 -> "1471R1024" [style=solid]
 "1471R1024" [label="R1024", fillcolor=3, shape=diamond, style=filled]
  1472 [label="State 1472\n\l1025 static_assert-declaration: STATIC_ASSERT OPEN_PAREN constant-expression COMMA string-literal • CLOSE_PAREN SEMICOLON\l"]
  1472 -> 1703 [style=solid label="CLOSE_PAREN"]
  1473 [label="State 1473\n\l1171 using-directive: attribute-specifier-seq USING NAMESPACE namespace-name SEMICOLON •\l"]
  1473 -> "1473R1171" [style=solid]
 "1473R1171" [label="R1171", fillcolor=3, shape=diamond, style=filled]
  1474 [label="State 1474\n\l1173 using-directive: attribute-specifier-seq USING NAMESPACE nested-name-specifier namespace-name • SEMICOLON\l"]
  1474 -> 1704 [style=solid label="SEMICOLON"]
  1475 [label="State 1475\n\l 21 asm-declaration: attribute-specifier-seq ASM OPEN_PAREN string-literal CLOSE_PAREN • SEMICOLON\l"]
  1475 -> 1705 [style=solid label="SEMICOLON"]
  1476 [label="State 1476\n\l966 simple-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE • initializer SEMICOLON\l"]
  1476 -> 1273 [style=solid label="EQ"]
  1476 -> 643 [style=solid label="OPEN_PAREN"]
  1476 -> 935 [style=solid label="OPEN_BRACE"]
  1476 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1476 -> 646 [style=dashed label="braced-init-list"]
  1476 -> 1706 [style=dashed label="initializer"]
  1477 [label="State 1477\n\l405 function-definition: attribute-specifier-seq decl-specifier-seq declarator requires-clause function-body •\l"]
  1477 -> "1477R405" [style=solid]
 "1477R405" [label="R405", fillcolor=3, shape=diamond, style=filled]
  1478 [label="State 1478\n\l401 function-definition: attribute-specifier-seq decl-specifier-seq declarator virt-specifier-seq function-body •\l"]
  1478 -> "1478R401" [style=solid]
 "1478R401" [label="R401", fillcolor=3, shape=diamond, style=filled]
  1479 [label="State 1479\n\l462 identifier-list: identifier-list • COMMA IDENTIFIER\l968 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list • CLOSE_SQUARE initializer SEMICOLON\l"]
  1479 -> 1131 [style=solid label="COMMA"]
  1479 -> 1707 [style=solid label="CLOSE_SQUARE"]
  1480 [label="State 1480\n\l288 enum-head: enum-key attribute-specifier-seq enum-head-name enum-base •\l"]
  1480 -> "1480R288" [style=solid]
 "1480R288" [label="R288", fillcolor=3, shape=diamond, style=filled]
  1481 [label="State 1481\n\l605 member-declarator: IDENTIFIER COLON constant-expression •\l609                  | IDENTIFIER COLON constant-expression • brace-or-equal-initializer\l"]
  1481 -> 1273 [style=solid label="EQ"]
  1481 -> 935 [style=solid label="OPEN_BRACE"]
  1481 -> 1708 [style=dashed label="brace-or-equal-initializer"]
  1481 -> 646 [style=dashed label="braced-init-list"]
  1481 -> "1481R605" [style=solid]
 "1481R605" [label="R605", fillcolor=3, shape=diamond, style=filled]
  1482 [label="State 1482\n\l607 member-declarator: IDENTIFIER attribute-specifier-seq COLON • constant-expression\l611                  | IDENTIFIER attribute-specifier-seq COLON • constant-expression brace-or-equal-initializer\l"]
  1482 -> 356 [style=solid label="PLUS"]
  1482 -> 357 [style=solid label="MINUS"]
  1482 -> 2 [style=solid label="IDENTIFIER"]
  1482 -> 358 [style=solid label="OPEN_PAREN"]
  1482 -> 359 [style=solid label="AND"]
  1482 -> 360 [style=solid label="SCOPE"]
  1482 -> 361 [style=solid label="OPEN_SQUARE"]
  1482 -> 362 [style=solid label="CO_AWAIT"]
  1482 -> 363 [style=solid label="ZERO_LB"]
  1482 -> 364 [style=solid label="ZERO_HB"]
  1482 -> 365 [style=solid label="SINGLE_QUOTE"]
  1482 -> 366 [style=solid label="FALSE"]
  1482 -> 367 [style=solid label="TRUE"]
  1482 -> 368 [style=solid label="NOEXCEPT"]
  1482 -> 17 [style=solid label="OPERATOR"]
  1482 -> 26 [style=solid label="DECLTYPE"]
  1482 -> 369 [style=solid label="DELETE"]
  1482 -> 370 [style=solid label="DOT"]
  1482 -> 184 [style=solid label="UNICODE_8"]
  1482 -> 371 [style=solid label="MULT"]
  1482 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1482 -> 372 [style=solid label="ZERO_LX"]
  1482 -> 373 [style=solid label="ZERO_HX"]
  1482 -> 374 [style=solid label="REQUIRES"]
  1482 -> 375 [style=solid label="NEW"]
  1482 -> 376 [style=solid label="COMPL"]
  1482 -> 377 [style=solid label="NOT"]
  1482 -> 378 [style=solid label="PLUS_PLUS"]
  1482 -> 379 [style=solid label="MINUS_MINUS"]
  1482 -> 380 [style=solid label="THIS"]
  1482 -> 36 [style=solid label="AUTO"]
  1482 -> 381 [style=solid label="NULLPTR"]
  1482 -> 382 [style=solid label="DYNAMIC_CAST"]
  1482 -> 383 [style=solid label="STATIC_CAST"]
  1482 -> 384 [style=solid label="REINTERPRET_CAST"]
  1482 -> 385 [style=solid label="CONST_CAST"]
  1482 -> 386 [style=solid label="TYPEID"]
  1482 -> 37 [style=solid label="CHAR"]
  1482 -> 38 [style=solid label="CHAR8_T"]
  1482 -> 39 [style=solid label="CHAR16_T"]
  1482 -> 40 [style=solid label="CHAR32_T"]
  1482 -> 41 [style=solid label="WCHAR_T"]
  1482 -> 42 [style=solid label="BOOL"]
  1482 -> 43 [style=solid label="SHORT"]
  1482 -> 44 [style=solid label="INT"]
  1482 -> 45 [style=solid label="LONG"]
  1482 -> 46 [style=solid label="SIGNED"]
  1482 -> 47 [style=solid label="UNSIGNED"]
  1482 -> 48 [style=solid label="FLOAT"]
  1482 -> 49 [style=solid label="DOUBLE"]
  1482 -> 50 [style=solid label="VOID"]
  1482 -> 55 [style=solid label="TYPENAME"]
  1482 -> 387 [style=solid label="SIZEOF"]
  1482 -> 388 [style=solid label="ALIGNOF"]
  1482 -> 389 [style=solid label="'0'"]
  1482 -> 390 [style=solid label="'1'"]
  1482 -> 391 [style=solid label="'2'"]
  1482 -> 392 [style=solid label="'3'"]
  1482 -> 393 [style=solid label="'4'"]
  1482 -> 394 [style=solid label="'5'"]
  1482 -> 395 [style=solid label="'6'"]
  1482 -> 396 [style=solid label="'7'"]
  1482 -> 397 [style=solid label="'8'"]
  1482 -> 398 [style=solid label="'9'"]
  1482 -> 205 [style=solid label="'u'"]
  1482 -> 206 [style=solid label="'U'"]
  1482 -> 207 [style=solid label="'L'"]
  1482 -> 208 [style=solid label="'R'"]
  1482 -> 399 [style=dashed label="additive-expression"]
  1482 -> 400 [style=dashed label="and-expression"]
  1482 -> 401 [style=dashed label="await-expression"]
  1482 -> 402 [style=dashed label="binary-literal"]
  1482 -> 403 [style=dashed label="boolean-literal"]
  1482 -> 404 [style=dashed label="cast-expression"]
  1482 -> 405 [style=dashed label="character-literal"]
  1482 -> 65 [style=dashed label="class-name"]
  1482 -> 406 [style=dashed label="compare-expression"]
  1482 -> 67 [style=dashed label="concept-name"]
  1482 -> 407 [style=dashed label="conditional-expression"]
  1482 -> 1709 [style=dashed label="constant-expression"]
  1482 -> 68 [style=dashed label="conversion-function-id"]
  1482 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1482 -> 410 [style=dashed label="decimal-literal"]
  1482 -> 76 [style=dashed label="decltype-specifier"]
  1482 -> 411 [style=dashed label="delete-expression"]
  1482 -> 412 [style=dashed label="digit"]
  1482 -> 413 [style=dashed label="digit-sequence"]
  1482 -> 414 [style=dashed label="encoding-prefix"]
  1482 -> 84 [style=dashed label="enum-name"]
  1482 -> 415 [style=dashed label="equality-expression"]
  1482 -> 416 [style=dashed label="exclusive-or-expression"]
  1482 -> 417 [style=dashed label="floating-point-literal"]
  1482 -> 418 [style=dashed label="fold-expression"]
  1482 -> 419 [style=dashed label="fractional-constant"]
  1482 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1482 -> 421 [style=dashed label="hexadecimal-literal"]
  1482 -> 422 [style=dashed label="hexadecimal-prefix"]
  1482 -> 423 [style=dashed label="id-expression"]
  1482 -> 424 [style=dashed label="inclusive-or-expression"]
  1482 -> 425 [style=dashed label="integer-literal"]
  1482 -> 426 [style=dashed label="lambda-expression"]
  1482 -> 427 [style=dashed label="lambda-introducer"]
  1482 -> 428 [style=dashed label="literal"]
  1482 -> 95 [style=dashed label="literal-operator-id"]
  1482 -> 429 [style=dashed label="logical-and-expression"]
  1482 -> 430 [style=dashed label="logical-or-expression"]
  1482 -> 431 [style=dashed label="multiplicative-expression"]
  1482 -> 99 [style=dashed label="namespace-alias"]
  1482 -> 102 [style=dashed label="namespace-name"]
  1482 -> 432 [style=dashed label="nested-name-specifier"]
  1482 -> 433 [style=dashed label="new-expression"]
  1482 -> 434 [style=dashed label="noexcept-expression"]
  1482 -> 435 [style=dashed label="nonzero-digit"]
  1482 -> 436 [style=dashed label="octal-literal"]
  1482 -> 108 [style=dashed label="operator-function-id"]
  1482 -> 109 [style=dashed label="placeholder-type-specifier"]
  1482 -> 437 [style=dashed label="pm-expression"]
  1482 -> 438 [style=dashed label="pointer-literal"]
  1482 -> 439 [style=dashed label="postfix-expression"]
  1482 -> 440 [style=dashed label="primary-expression"]
  1482 -> 112 [style=dashed label="qualified-id"]
  1482 -> 441 [style=dashed label="relational-expression"]
  1482 -> 442 [style=dashed label="requires-expression"]
  1482 -> 443 [style=dashed label="shift-expression"]
  1482 -> 114 [style=dashed label="simple-template-id"]
  1482 -> 529 [style=dashed label="simple-type-specifier"]
  1482 -> 445 [style=dashed label="string-literal"]
  1482 -> 120 [style=dashed label="template-id"]
  1482 -> 215 [style=dashed label="template-name"]
  1482 -> 123 [style=dashed label="type-constraint"]
  1482 -> 124 [style=dashed label="type-name"]
  1482 -> 126 [style=dashed label="typedef-name"]
  1482 -> 531 [style=dashed label="typename-specifier"]
  1482 -> 449 [style=dashed label="unary-expression"]
  1482 -> 450 [style=dashed label="unary-operator"]
  1482 -> 129 [style=dashed label="unqualified-id"]
  1482 -> 451 [style=dashed label="user-defined-character-literal"]
  1482 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1482 -> 453 [style=dashed label="user-defined-integer-literal"]
  1482 -> 454 [style=dashed label="user-defined-literal"]
  1482 -> 455 [style=dashed label="user-defined-string-literal"]
  1483 [label="State 1483\n\l610 member-declarator: COLON constant-expression brace-or-equal-initializer •\l"]
  1483 -> "1483R610" [style=solid]
 "1483R610" [label="R610", fillcolor=3, shape=diamond, style=filled]
  1484 [label="State 1484\n\l618 member-specification: access-specifier COLON member-specification •\l"]
  1484 -> "1484R618" [style=solid]
 "1484R618" [label="R618", fillcolor=3, shape=diamond, style=filled]
  1485 [label="State 1485\n\l606 member-declarator: COLON constant-expression •\l608                  | attribute-specifier-seq COLON constant-expression •\l610                  | COLON constant-expression • brace-or-equal-initializer\l612                  | attribute-specifier-seq COLON constant-expression • brace-or-equal-initializer\l"]
  1485 -> 1273 [style=solid label="EQ"]
  1485 -> 935 [style=solid label="OPEN_BRACE"]
  1485 -> 1710 [style=dashed label="brace-or-equal-initializer"]
  1485 -> 646 [style=dashed label="braced-init-list"]
  1485 -> "1485R606" [style=solid]
 "1485R606" [label="R606", fillcolor=3, shape=diamond, style=filled]
  1485 -> "1485R608d" [label="[SEMICOLON, COMMA]", style=solid]
 "1485R608d" [label="R608", fillcolor=5, shape=diamond, style=filled]
  1486 [label="State 1486\n\l608 member-declarator: attribute-specifier-seq COLON • constant-expression\l612                  | attribute-specifier-seq COLON • constant-expression brace-or-equal-initializer\l"]
  1486 -> 356 [style=solid label="PLUS"]
  1486 -> 357 [style=solid label="MINUS"]
  1486 -> 2 [style=solid label="IDENTIFIER"]
  1486 -> 358 [style=solid label="OPEN_PAREN"]
  1486 -> 359 [style=solid label="AND"]
  1486 -> 360 [style=solid label="SCOPE"]
  1486 -> 361 [style=solid label="OPEN_SQUARE"]
  1486 -> 362 [style=solid label="CO_AWAIT"]
  1486 -> 363 [style=solid label="ZERO_LB"]
  1486 -> 364 [style=solid label="ZERO_HB"]
  1486 -> 365 [style=solid label="SINGLE_QUOTE"]
  1486 -> 366 [style=solid label="FALSE"]
  1486 -> 367 [style=solid label="TRUE"]
  1486 -> 368 [style=solid label="NOEXCEPT"]
  1486 -> 17 [style=solid label="OPERATOR"]
  1486 -> 26 [style=solid label="DECLTYPE"]
  1486 -> 369 [style=solid label="DELETE"]
  1486 -> 370 [style=solid label="DOT"]
  1486 -> 184 [style=solid label="UNICODE_8"]
  1486 -> 371 [style=solid label="MULT"]
  1486 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1486 -> 372 [style=solid label="ZERO_LX"]
  1486 -> 373 [style=solid label="ZERO_HX"]
  1486 -> 374 [style=solid label="REQUIRES"]
  1486 -> 375 [style=solid label="NEW"]
  1486 -> 376 [style=solid label="COMPL"]
  1486 -> 377 [style=solid label="NOT"]
  1486 -> 378 [style=solid label="PLUS_PLUS"]
  1486 -> 379 [style=solid label="MINUS_MINUS"]
  1486 -> 380 [style=solid label="THIS"]
  1486 -> 36 [style=solid label="AUTO"]
  1486 -> 381 [style=solid label="NULLPTR"]
  1486 -> 382 [style=solid label="DYNAMIC_CAST"]
  1486 -> 383 [style=solid label="STATIC_CAST"]
  1486 -> 384 [style=solid label="REINTERPRET_CAST"]
  1486 -> 385 [style=solid label="CONST_CAST"]
  1486 -> 386 [style=solid label="TYPEID"]
  1486 -> 37 [style=solid label="CHAR"]
  1486 -> 38 [style=solid label="CHAR8_T"]
  1486 -> 39 [style=solid label="CHAR16_T"]
  1486 -> 40 [style=solid label="CHAR32_T"]
  1486 -> 41 [style=solid label="WCHAR_T"]
  1486 -> 42 [style=solid label="BOOL"]
  1486 -> 43 [style=solid label="SHORT"]
  1486 -> 44 [style=solid label="INT"]
  1486 -> 45 [style=solid label="LONG"]
  1486 -> 46 [style=solid label="SIGNED"]
  1486 -> 47 [style=solid label="UNSIGNED"]
  1486 -> 48 [style=solid label="FLOAT"]
  1486 -> 49 [style=solid label="DOUBLE"]
  1486 -> 50 [style=solid label="VOID"]
  1486 -> 55 [style=solid label="TYPENAME"]
  1486 -> 387 [style=solid label="SIZEOF"]
  1486 -> 388 [style=solid label="ALIGNOF"]
  1486 -> 389 [style=solid label="'0'"]
  1486 -> 390 [style=solid label="'1'"]
  1486 -> 391 [style=solid label="'2'"]
  1486 -> 392 [style=solid label="'3'"]
  1486 -> 393 [style=solid label="'4'"]
  1486 -> 394 [style=solid label="'5'"]
  1486 -> 395 [style=solid label="'6'"]
  1486 -> 396 [style=solid label="'7'"]
  1486 -> 397 [style=solid label="'8'"]
  1486 -> 398 [style=solid label="'9'"]
  1486 -> 205 [style=solid label="'u'"]
  1486 -> 206 [style=solid label="'U'"]
  1486 -> 207 [style=solid label="'L'"]
  1486 -> 208 [style=solid label="'R'"]
  1486 -> 399 [style=dashed label="additive-expression"]
  1486 -> 400 [style=dashed label="and-expression"]
  1486 -> 401 [style=dashed label="await-expression"]
  1486 -> 402 [style=dashed label="binary-literal"]
  1486 -> 403 [style=dashed label="boolean-literal"]
  1486 -> 404 [style=dashed label="cast-expression"]
  1486 -> 405 [style=dashed label="character-literal"]
  1486 -> 65 [style=dashed label="class-name"]
  1486 -> 406 [style=dashed label="compare-expression"]
  1486 -> 67 [style=dashed label="concept-name"]
  1486 -> 407 [style=dashed label="conditional-expression"]
  1486 -> 1711 [style=dashed label="constant-expression"]
  1486 -> 68 [style=dashed label="conversion-function-id"]
  1486 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1486 -> 410 [style=dashed label="decimal-literal"]
  1486 -> 76 [style=dashed label="decltype-specifier"]
  1486 -> 411 [style=dashed label="delete-expression"]
  1486 -> 412 [style=dashed label="digit"]
  1486 -> 413 [style=dashed label="digit-sequence"]
  1486 -> 414 [style=dashed label="encoding-prefix"]
  1486 -> 84 [style=dashed label="enum-name"]
  1486 -> 415 [style=dashed label="equality-expression"]
  1486 -> 416 [style=dashed label="exclusive-or-expression"]
  1486 -> 417 [style=dashed label="floating-point-literal"]
  1486 -> 418 [style=dashed label="fold-expression"]
  1486 -> 419 [style=dashed label="fractional-constant"]
  1486 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1486 -> 421 [style=dashed label="hexadecimal-literal"]
  1486 -> 422 [style=dashed label="hexadecimal-prefix"]
  1486 -> 423 [style=dashed label="id-expression"]
  1486 -> 424 [style=dashed label="inclusive-or-expression"]
  1486 -> 425 [style=dashed label="integer-literal"]
  1486 -> 426 [style=dashed label="lambda-expression"]
  1486 -> 427 [style=dashed label="lambda-introducer"]
  1486 -> 428 [style=dashed label="literal"]
  1486 -> 95 [style=dashed label="literal-operator-id"]
  1486 -> 429 [style=dashed label="logical-and-expression"]
  1486 -> 430 [style=dashed label="logical-or-expression"]
  1486 -> 431 [style=dashed label="multiplicative-expression"]
  1486 -> 99 [style=dashed label="namespace-alias"]
  1486 -> 102 [style=dashed label="namespace-name"]
  1486 -> 432 [style=dashed label="nested-name-specifier"]
  1486 -> 433 [style=dashed label="new-expression"]
  1486 -> 434 [style=dashed label="noexcept-expression"]
  1486 -> 435 [style=dashed label="nonzero-digit"]
  1486 -> 436 [style=dashed label="octal-literal"]
  1486 -> 108 [style=dashed label="operator-function-id"]
  1486 -> 109 [style=dashed label="placeholder-type-specifier"]
  1486 -> 437 [style=dashed label="pm-expression"]
  1486 -> 438 [style=dashed label="pointer-literal"]
  1486 -> 439 [style=dashed label="postfix-expression"]
  1486 -> 440 [style=dashed label="primary-expression"]
  1486 -> 112 [style=dashed label="qualified-id"]
  1486 -> 441 [style=dashed label="relational-expression"]
  1486 -> 442 [style=dashed label="requires-expression"]
  1486 -> 443 [style=dashed label="shift-expression"]
  1486 -> 114 [style=dashed label="simple-template-id"]
  1486 -> 529 [style=dashed label="simple-type-specifier"]
  1486 -> 445 [style=dashed label="string-literal"]
  1486 -> 120 [style=dashed label="template-id"]
  1486 -> 215 [style=dashed label="template-name"]
  1486 -> 123 [style=dashed label="type-constraint"]
  1486 -> 124 [style=dashed label="type-name"]
  1486 -> 126 [style=dashed label="typedef-name"]
  1486 -> 531 [style=dashed label="typename-specifier"]
  1486 -> 449 [style=dashed label="unary-expression"]
  1486 -> 450 [style=dashed label="unary-operator"]
  1486 -> 129 [style=dashed label="unqualified-id"]
  1486 -> 451 [style=dashed label="user-defined-character-literal"]
  1486 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1486 -> 453 [style=dashed label="user-defined-integer-literal"]
  1486 -> 454 [style=dashed label="user-defined-literal"]
  1486 -> 455 [style=dashed label="user-defined-string-literal"]
  1487 [label="State 1487\n\l582 member-declaration: attribute-specifier-seq decl-specifier-seq SEMICOLON •\l"]
  1487 -> "1487R582" [style=solid]
 "1487R582" [label="R582", fillcolor=3, shape=diamond, style=filled]
  1488 [label="State 1488\n\l397 function-definition: attribute-specifier-seq decl-specifier-seq declarator • function-body\l401                    | attribute-specifier-seq decl-specifier-seq declarator • virt-specifier-seq function-body\l405                    | attribute-specifier-seq decl-specifier-seq declarator • requires-clause function-body\l598 member-declarator: declarator •\l599                  | declarator • virt-specifier-seq\l600                  | declarator • pure-specifier\l601                  | declarator • virt-specifier-seq pure-specifier\l602                  | declarator • requires-clause\l603                  | declarator •\l604                  | declarator • brace-or-equal-initializer\l"]
  1488 -> 1101 [style=solid label="EQ"]
  1488 -> 288 [style=solid label="COLON"]
  1488 -> 644 [style=solid label="OPEN_BRACE"]
  1488 -> 290 [style=solid label="FINAL"]
  1488 -> 291 [style=solid label="TRY"]
  1488 -> 292 [style=solid label="REQUIRES"]
  1488 -> 293 [style=solid label="OVERRIDE"]
  1488 -> 1102 [style=dashed label="brace-or-equal-initializer"]
  1488 -> 646 [style=dashed label="braced-init-list"]
  1488 -> 294 [style=dashed label="compound-statement"]
  1488 -> 295 [style=dashed label="ctor-initializer"]
  1488 -> 1077 [style=dashed label="function-body"]
  1488 -> 297 [style=dashed label="function-try-block"]
  1488 -> 1103 [style=dashed label="pure-specifier"]
  1488 -> 1712 [style=dashed label="requires-clause"]
  1488 -> 299 [style=dashed label="virt-specifier"]
  1488 -> 1713 [style=dashed label="virt-specifier-seq"]
  1488 -> "1488R598" [style=solid]
 "1488R598" [label="R598", fillcolor=3, shape=diamond, style=filled]
  1488 -> "1488R603d" [label="[SEMICOLON, COMMA]", style=solid]
 "1488R603d" [label="R603", fillcolor=5, shape=diamond, style=filled]
  1489 [label="State 1489\n\l586 member-declaration: attribute-specifier-seq decl-specifier-seq member-declarator-list • SEMICOLON\l614 member-declarator-list: member-declarator-list • COMMA member-declarator\l"]
  1489 -> 1714 [style=solid label="SEMICOLON"]
  1489 -> 1108 [style=solid label="COMMA"]
  1490 [label="State 1490\n\l403 function-definition: attribute-specifier-seq declarator requires-clause • function-body\l602 member-declarator: declarator requires-clause •\l"]
  1490 -> 286 [style=solid label="EQ"]
  1490 -> 288 [style=solid label="COLON"]
  1490 -> 289 [style=solid label="OPEN_BRACE"]
  1490 -> 291 [style=solid label="TRY"]
  1490 -> 294 [style=dashed label="compound-statement"]
  1490 -> 295 [style=dashed label="ctor-initializer"]
  1490 -> 1082 [style=dashed label="function-body"]
  1490 -> 297 [style=dashed label="function-try-block"]
  1490 -> "1490R602" [style=solid]
 "1490R602" [label="R602", fillcolor=3, shape=diamond, style=filled]
  1491 [label="State 1491\n\l399 function-definition: attribute-specifier-seq declarator virt-specifier-seq • function-body\l599 member-declarator: declarator virt-specifier-seq •\l601                  | declarator virt-specifier-seq • pure-specifier\l1179 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  1491 -> 1497 [style=solid label="EQ"]
  1491 -> 288 [style=solid label="COLON"]
  1491 -> 289 [style=solid label="OPEN_BRACE"]
  1491 -> 290 [style=solid label="FINAL"]
  1491 -> 291 [style=solid label="TRY"]
  1491 -> 293 [style=solid label="OVERRIDE"]
  1491 -> 294 [style=dashed label="compound-statement"]
  1491 -> 295 [style=dashed label="ctor-initializer"]
  1491 -> 1083 [style=dashed label="function-body"]
  1491 -> 297 [style=dashed label="function-try-block"]
  1491 -> 1498 [style=dashed label="pure-specifier"]
  1491 -> 703 [style=dashed label="virt-specifier"]
  1491 -> "1491R599" [style=solid]
 "1491R599" [label="R599", fillcolor=3, shape=diamond, style=filled]
  1492 [label="State 1492\n\l584 member-declaration: attribute-specifier-seq member-declarator-list SEMICOLON •\l"]
  1492 -> "1492R584" [style=solid]
 "1492R584" [label="R584", fillcolor=3, shape=diamond, style=filled]
  1493 [label="State 1493\n\l406 function-definition: decl-specifier-seq declarator requires-clause • function-body\l602 member-declarator: declarator requires-clause •\l"]
  1493 -> 286 [style=solid label="EQ"]
  1493 -> 288 [style=solid label="COLON"]
  1493 -> 289 [style=solid label="OPEN_BRACE"]
  1493 -> 291 [style=solid label="TRY"]
  1493 -> 294 [style=dashed label="compound-statement"]
  1493 -> 295 [style=dashed label="ctor-initializer"]
  1493 -> 1147 [style=dashed label="function-body"]
  1493 -> 297 [style=dashed label="function-try-block"]
  1493 -> "1493R602" [style=solid]
 "1493R602" [label="R602", fillcolor=3, shape=diamond, style=filled]
  1494 [label="State 1494\n\l402 function-definition: decl-specifier-seq declarator virt-specifier-seq • function-body\l599 member-declarator: declarator virt-specifier-seq •\l601                  | declarator virt-specifier-seq • pure-specifier\l1179 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  1494 -> 1497 [style=solid label="EQ"]
  1494 -> 288 [style=solid label="COLON"]
  1494 -> 289 [style=solid label="OPEN_BRACE"]
  1494 -> 290 [style=solid label="FINAL"]
  1494 -> 291 [style=solid label="TRY"]
  1494 -> 293 [style=solid label="OVERRIDE"]
  1494 -> 294 [style=dashed label="compound-statement"]
  1494 -> 295 [style=dashed label="ctor-initializer"]
  1494 -> 1148 [style=dashed label="function-body"]
  1494 -> 297 [style=dashed label="function-try-block"]
  1494 -> 1498 [style=dashed label="pure-specifier"]
  1494 -> 703 [style=dashed label="virt-specifier"]
  1494 -> "1494R599" [style=solid]
 "1494R599" [label="R599", fillcolor=3, shape=diamond, style=filled]
  1495 [label="State 1495\n\l587 member-declaration: decl-specifier-seq member-declarator-list SEMICOLON •\l"]
  1495 -> "1495R587" [style=solid]
 "1495R587" [label="R587", fillcolor=3, shape=diamond, style=filled]
  1496 [label="State 1496\n\l249 digit: '0' •\l748 octal-literal: '0' •\l905 pure-specifier: EQ '0' •\l"]
  1496 -> "1496R249" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "1496R249" [label="R249", fillcolor=3, shape=diamond, style=filled]
  1496 -> "1496R748d" [label="[SINGLE_QUOTE, DOT, '0', '1', '2', '3', '4', '5', '6', '7']", style=solid]
 "1496R748d" [label="R748", fillcolor=5, shape=diamond, style=filled]
  1496 -> "1496R748" [style=solid]
 "1496R748" [label="R748", fillcolor=3, shape=diamond, style=filled]
  1496 -> "1496R905d" [label="[SEMICOLON, COMMA]", style=solid]
 "1496R905d" [label="R905", fillcolor=5, shape=diamond, style=filled]
  1497 [label="State 1497\n\l393 function-body: EQ • DEFAULT SEMICOLON\l394              | EQ • DELETE SEMICOLON\l905 pure-specifier: EQ • '0'\l"]
  1497 -> 654 [style=solid label="DELETE"]
  1497 -> 655 [style=solid label="DEFAULT"]
  1497 -> 1715 [style=solid label="'0'"]
  1498 [label="State 1498\n\l601 member-declarator: declarator virt-specifier-seq pure-specifier •\l"]
  1498 -> "1498R601" [style=solid]
 "1498R601" [label="R601", fillcolor=3, shape=diamond, style=filled]
  1499 [label="State 1499\n\l598 member-declarator: declarator •\l599                  | declarator • virt-specifier-seq\l600                  | declarator • pure-specifier\l601                  | declarator • virt-specifier-seq pure-specifier\l602                  | declarator • requires-clause\l603                  | declarator •\l604                  | declarator • brace-or-equal-initializer\l"]
  1499 -> 1716 [style=solid label="EQ"]
  1499 -> 935 [style=solid label="OPEN_BRACE"]
  1499 -> 290 [style=solid label="FINAL"]
  1499 -> 292 [style=solid label="REQUIRES"]
  1499 -> 293 [style=solid label="OVERRIDE"]
  1499 -> 1102 [style=dashed label="brace-or-equal-initializer"]
  1499 -> 646 [style=dashed label="braced-init-list"]
  1499 -> 1103 [style=dashed label="pure-specifier"]
  1499 -> 1717 [style=dashed label="requires-clause"]
  1499 -> 299 [style=dashed label="virt-specifier"]
  1499 -> 1718 [style=dashed label="virt-specifier-seq"]
  1499 -> "1499R598" [style=solid]
 "1499R598" [label="R598", fillcolor=3, shape=diamond, style=filled]
  1499 -> "1499R603d" [label="[SEMICOLON, COMMA]", style=solid]
 "1499R603d" [label="R603", fillcolor=5, shape=diamond, style=filled]
  1500 [label="State 1500\n\l614 member-declarator-list: member-declarator-list COMMA member-declarator •\l"]
  1500 -> "1500R614" [style=solid]
 "1500R614" [label="R614", fillcolor=3, shape=diamond, style=filled]
  1501 [label="State 1501\n\l 74 base-specifier: VIRTUAL access-specifier class-or-decltype •\l"]
  1501 -> "1501R74" [style=solid]
 "1501R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  1502 [label="State 1502\n\l 78 base-specifier: access-specifier VIRTUAL class-or-decltype •\l"]
  1502 -> "1502R78" [style=solid]
 "1502R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  1503 [label="State 1503\n\l 73 base-specifier: attribute-specifier-seq VIRTUAL access-specifier • class-or-decltype\l"]
  1503 -> 253 [style=solid label="IDENTIFIER"]
  1503 -> 9 [style=solid label="SCOPE"]
  1503 -> 134 [style=solid label="DECLTYPE"]
  1503 -> 65 [style=dashed label="class-name"]
  1503 -> 1719 [style=dashed label="class-or-decltype"]
  1503 -> 620 [style=dashed label="decltype-specifier"]
  1503 -> 84 [style=dashed label="enum-name"]
  1503 -> 99 [style=dashed label="namespace-alias"]
  1503 -> 102 [style=dashed label="namespace-name"]
  1503 -> 621 [style=dashed label="nested-name-specifier"]
  1503 -> 141 [style=dashed label="simple-template-id"]
  1503 -> 142 [style=dashed label="template-name"]
  1503 -> 622 [style=dashed label="type-name"]
  1503 -> 126 [style=dashed label="typedef-name"]
  1504 [label="State 1504\n\l 71 base-specifier: attribute-specifier-seq VIRTUAL class-or-decltype •\l"]
  1504 -> "1504R71" [style=solid]
 "1504R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  1505 [label="State 1505\n\l 77 base-specifier: attribute-specifier-seq access-specifier VIRTUAL • class-or-decltype\l"]
  1505 -> 253 [style=solid label="IDENTIFIER"]
  1505 -> 9 [style=solid label="SCOPE"]
  1505 -> 134 [style=solid label="DECLTYPE"]
  1505 -> 65 [style=dashed label="class-name"]
  1505 -> 1720 [style=dashed label="class-or-decltype"]
  1505 -> 620 [style=dashed label="decltype-specifier"]
  1505 -> 84 [style=dashed label="enum-name"]
  1505 -> 99 [style=dashed label="namespace-alias"]
  1505 -> 102 [style=dashed label="namespace-name"]
  1505 -> 621 [style=dashed label="nested-name-specifier"]
  1505 -> 141 [style=dashed label="simple-template-id"]
  1505 -> 142 [style=dashed label="template-name"]
  1505 -> 622 [style=dashed label="type-name"]
  1505 -> 126 [style=dashed label="typedef-name"]
  1506 [label="State 1506\n\l 75 base-specifier: attribute-specifier-seq access-specifier class-or-decltype •\l"]
  1506 -> "1506R75" [style=solid]
 "1506R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  1507 [label="State 1507\n\l 81 base-specifier-list: base-specifier-list COMMA base-specifier •\l 82                    | base-specifier-list COMMA base-specifier • ELLIPSIS\l"]
  1507 -> 1721 [style=solid label="ELLIPSIS"]
  1507 -> "1507R81" [style=solid]
 "1507R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
  1508 [label="State 1508\n\l149 class-or-decltype: nested-name-specifier TEMPLATE simple-template-id •\l661 nested-name-specifier: nested-name-specifier TEMPLATE simple-template-id • SCOPE\l"]
  1508 -> 1210 [style=solid label="SCOPE"]
  1508 -> "1508R149" [style=solid]
 "1508R149" [label="R149", fillcolor=3, shape=diamond, style=filled]
  1509 [label="State 1509\n\l135 class-head: class-key attribute-specifier-seq class-head-name class-virt-specifier base-clause •\l"]
  1509 -> "1509R135" [style=solid]
 "1509R135" [label="R135", fillcolor=3, shape=diamond, style=filled]
  1510 [label="State 1510\n\l1041 template-argument-list: template-argument-list COMMA template-argument •\l1042                       | template-argument-list COMMA template-argument • ELLIPSIS\l"]
  1510 -> 1722 [style=solid label="ELLIPSIS"]
  1510 -> "1510R1041" [style=solid]
 "1510R1041" [label="R1041", fillcolor=3, shape=diamond, style=filled]
  1511 [label="State 1511\n\l462 identifier-list: identifier-list COMMA IDENTIFIER •\l"]
  1511 -> "1511R462" [style=solid]
 "1511R462" [label="R462", fillcolor=3, shape=diamond, style=filled]
  1512 [label="State 1512\n\l967 simple-declaration: decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE initializer • SEMICOLON\l"]
  1512 -> 1723 [style=solid label="SEMICOLON"]
  1513 [label="State 1513\n\l478 initializer: OPEN_PAREN expression-list CLOSE_PAREN •\l"]
  1513 -> "1513R478" [style=solid]
 "1513R478" [label="R478", fillcolor=3, shape=diamond, style=filled]
  1514 [label="State 1514\n\l482 initializer-list: initializer-clause ELLIPSIS •\l"]
  1514 -> "1514R482" [style=solid]
 "1514R482" [label="R482", fillcolor=3, shape=diamond, style=filled]
  1515 [label="State 1515\n\l483 initializer-list: initializer-list COMMA • initializer-clause\l484                 | initializer-list COMMA • initializer-clause ELLIPSIS\l"]
  1515 -> 356 [style=solid label="PLUS"]
  1515 -> 357 [style=solid label="MINUS"]
  1515 -> 2 [style=solid label="IDENTIFIER"]
  1515 -> 358 [style=solid label="OPEN_PAREN"]
  1515 -> 359 [style=solid label="AND"]
  1515 -> 360 [style=solid label="SCOPE"]
  1515 -> 361 [style=solid label="OPEN_SQUARE"]
  1515 -> 362 [style=solid label="CO_AWAIT"]
  1515 -> 935 [style=solid label="OPEN_BRACE"]
  1515 -> 363 [style=solid label="ZERO_LB"]
  1515 -> 364 [style=solid label="ZERO_HB"]
  1515 -> 365 [style=solid label="SINGLE_QUOTE"]
  1515 -> 366 [style=solid label="FALSE"]
  1515 -> 367 [style=solid label="TRUE"]
  1515 -> 368 [style=solid label="NOEXCEPT"]
  1515 -> 17 [style=solid label="OPERATOR"]
  1515 -> 26 [style=solid label="DECLTYPE"]
  1515 -> 369 [style=solid label="DELETE"]
  1515 -> 370 [style=solid label="DOT"]
  1515 -> 184 [style=solid label="UNICODE_8"]
  1515 -> 371 [style=solid label="MULT"]
  1515 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1515 -> 372 [style=solid label="ZERO_LX"]
  1515 -> 373 [style=solid label="ZERO_HX"]
  1515 -> 374 [style=solid label="REQUIRES"]
  1515 -> 375 [style=solid label="NEW"]
  1515 -> 376 [style=solid label="COMPL"]
  1515 -> 377 [style=solid label="NOT"]
  1515 -> 378 [style=solid label="PLUS_PLUS"]
  1515 -> 379 [style=solid label="MINUS_MINUS"]
  1515 -> 380 [style=solid label="THIS"]
  1515 -> 36 [style=solid label="AUTO"]
  1515 -> 381 [style=solid label="NULLPTR"]
  1515 -> 382 [style=solid label="DYNAMIC_CAST"]
  1515 -> 383 [style=solid label="STATIC_CAST"]
  1515 -> 384 [style=solid label="REINTERPRET_CAST"]
  1515 -> 385 [style=solid label="CONST_CAST"]
  1515 -> 386 [style=solid label="TYPEID"]
  1515 -> 37 [style=solid label="CHAR"]
  1515 -> 38 [style=solid label="CHAR8_T"]
  1515 -> 39 [style=solid label="CHAR16_T"]
  1515 -> 40 [style=solid label="CHAR32_T"]
  1515 -> 41 [style=solid label="WCHAR_T"]
  1515 -> 42 [style=solid label="BOOL"]
  1515 -> 43 [style=solid label="SHORT"]
  1515 -> 44 [style=solid label="INT"]
  1515 -> 45 [style=solid label="LONG"]
  1515 -> 46 [style=solid label="SIGNED"]
  1515 -> 47 [style=solid label="UNSIGNED"]
  1515 -> 48 [style=solid label="FLOAT"]
  1515 -> 49 [style=solid label="DOUBLE"]
  1515 -> 50 [style=solid label="VOID"]
  1515 -> 523 [style=solid label="THROW"]
  1515 -> 55 [style=solid label="TYPENAME"]
  1515 -> 387 [style=solid label="SIZEOF"]
  1515 -> 388 [style=solid label="ALIGNOF"]
  1515 -> 524 [style=solid label="CO_YIELD"]
  1515 -> 389 [style=solid label="'0'"]
  1515 -> 390 [style=solid label="'1'"]
  1515 -> 391 [style=solid label="'2'"]
  1515 -> 392 [style=solid label="'3'"]
  1515 -> 393 [style=solid label="'4'"]
  1515 -> 394 [style=solid label="'5'"]
  1515 -> 395 [style=solid label="'6'"]
  1515 -> 396 [style=solid label="'7'"]
  1515 -> 397 [style=solid label="'8'"]
  1515 -> 398 [style=solid label="'9'"]
  1515 -> 205 [style=solid label="'u'"]
  1515 -> 206 [style=solid label="'U'"]
  1515 -> 207 [style=solid label="'L'"]
  1515 -> 208 [style=solid label="'R'"]
  1515 -> 399 [style=dashed label="additive-expression"]
  1515 -> 400 [style=dashed label="and-expression"]
  1515 -> 1134 [style=dashed label="assignment-expression"]
  1515 -> 401 [style=dashed label="await-expression"]
  1515 -> 402 [style=dashed label="binary-literal"]
  1515 -> 403 [style=dashed label="boolean-literal"]
  1515 -> 1135 [style=dashed label="braced-init-list"]
  1515 -> 404 [style=dashed label="cast-expression"]
  1515 -> 405 [style=dashed label="character-literal"]
  1515 -> 65 [style=dashed label="class-name"]
  1515 -> 406 [style=dashed label="compare-expression"]
  1515 -> 67 [style=dashed label="concept-name"]
  1515 -> 526 [style=dashed label="conditional-expression"]
  1515 -> 68 [style=dashed label="conversion-function-id"]
  1515 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1515 -> 410 [style=dashed label="decimal-literal"]
  1515 -> 76 [style=dashed label="decltype-specifier"]
  1515 -> 411 [style=dashed label="delete-expression"]
  1515 -> 412 [style=dashed label="digit"]
  1515 -> 413 [style=dashed label="digit-sequence"]
  1515 -> 414 [style=dashed label="encoding-prefix"]
  1515 -> 84 [style=dashed label="enum-name"]
  1515 -> 415 [style=dashed label="equality-expression"]
  1515 -> 416 [style=dashed label="exclusive-or-expression"]
  1515 -> 417 [style=dashed label="floating-point-literal"]
  1515 -> 418 [style=dashed label="fold-expression"]
  1515 -> 419 [style=dashed label="fractional-constant"]
  1515 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1515 -> 421 [style=dashed label="hexadecimal-literal"]
  1515 -> 422 [style=dashed label="hexadecimal-prefix"]
  1515 -> 423 [style=dashed label="id-expression"]
  1515 -> 424 [style=dashed label="inclusive-or-expression"]
  1515 -> 1724 [style=dashed label="initializer-clause"]
  1515 -> 425 [style=dashed label="integer-literal"]
  1515 -> 426 [style=dashed label="lambda-expression"]
  1515 -> 427 [style=dashed label="lambda-introducer"]
  1515 -> 428 [style=dashed label="literal"]
  1515 -> 95 [style=dashed label="literal-operator-id"]
  1515 -> 429 [style=dashed label="logical-and-expression"]
  1515 -> 528 [style=dashed label="logical-or-expression"]
  1515 -> 431 [style=dashed label="multiplicative-expression"]
  1515 -> 99 [style=dashed label="namespace-alias"]
  1515 -> 102 [style=dashed label="namespace-name"]
  1515 -> 432 [style=dashed label="nested-name-specifier"]
  1515 -> 433 [style=dashed label="new-expression"]
  1515 -> 434 [style=dashed label="noexcept-expression"]
  1515 -> 435 [style=dashed label="nonzero-digit"]
  1515 -> 436 [style=dashed label="octal-literal"]
  1515 -> 108 [style=dashed label="operator-function-id"]
  1515 -> 109 [style=dashed label="placeholder-type-specifier"]
  1515 -> 437 [style=dashed label="pm-expression"]
  1515 -> 438 [style=dashed label="pointer-literal"]
  1515 -> 439 [style=dashed label="postfix-expression"]
  1515 -> 440 [style=dashed label="primary-expression"]
  1515 -> 112 [style=dashed label="qualified-id"]
  1515 -> 441 [style=dashed label="relational-expression"]
  1515 -> 442 [style=dashed label="requires-expression"]
  1515 -> 443 [style=dashed label="shift-expression"]
  1515 -> 114 [style=dashed label="simple-template-id"]
  1515 -> 529 [style=dashed label="simple-type-specifier"]
  1515 -> 445 [style=dashed label="string-literal"]
  1515 -> 120 [style=dashed label="template-id"]
  1515 -> 215 [style=dashed label="template-name"]
  1515 -> 530 [style=dashed label="throw-expression"]
  1515 -> 123 [style=dashed label="type-constraint"]
  1515 -> 124 [style=dashed label="type-name"]
  1515 -> 126 [style=dashed label="typedef-name"]
  1515 -> 531 [style=dashed label="typename-specifier"]
  1515 -> 449 [style=dashed label="unary-expression"]
  1515 -> 450 [style=dashed label="unary-operator"]
  1515 -> 129 [style=dashed label="unqualified-id"]
  1515 -> 451 [style=dashed label="user-defined-character-literal"]
  1515 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1515 -> 453 [style=dashed label="user-defined-integer-literal"]
  1515 -> 454 [style=dashed label="user-defined-literal"]
  1515 -> 455 [style=dashed label="user-defined-string-literal"]
  1515 -> 532 [style=dashed label="yield-expression"]
  1516 [label="State 1516\n\l248 designator: DOT IDENTIFIER •\l"]
  1516 -> "1516R248" [style=solid]
 "1516R248" [label="R248", fillcolor=3, shape=diamond, style=filled]
  1517 [label="State 1517\n\l111 braced-init-list: OPEN_BRACE designated-initializer-list COMMA • CLOSE_BRACE\l247 designated-initializer-list: designated-initializer-list COMMA • designated-initializer-clause\l"]
  1517 -> 1725 [style=solid label="CLOSE_BRACE"]
  1517 -> 1726 [style=solid label="DOT"]
  1517 -> 1727 [style=dashed label="designated-initializer-clause"]
  1517 -> 1145 [style=dashed label="designator"]
  1518 [label="State 1518\n\l110 braced-init-list: OPEN_BRACE designated-initializer-list CLOSE_BRACE •\l"]
  1518 -> "1518R110" [style=solid]
 "1518R110" [label="R110", fillcolor=3, shape=diamond, style=filled]
  1519 [label="State 1519\n\l245 designated-initializer-clause: designator brace-or-equal-initializer •\l"]
  1519 -> "1519R245" [style=solid]
 "1519R245" [label="R245", fillcolor=3, shape=diamond, style=filled]
  1520 [label="State 1520\n\l109 braced-init-list: OPEN_BRACE initializer-list COMMA • CLOSE_BRACE\l483 initializer-list: initializer-list COMMA • initializer-clause\l484                 | initializer-list COMMA • initializer-clause ELLIPSIS\l"]
  1520 -> 356 [style=solid label="PLUS"]
  1520 -> 357 [style=solid label="MINUS"]
  1520 -> 2 [style=solid label="IDENTIFIER"]
  1520 -> 358 [style=solid label="OPEN_PAREN"]
  1520 -> 359 [style=solid label="AND"]
  1520 -> 360 [style=solid label="SCOPE"]
  1520 -> 361 [style=solid label="OPEN_SQUARE"]
  1520 -> 362 [style=solid label="CO_AWAIT"]
  1520 -> 935 [style=solid label="OPEN_BRACE"]
  1520 -> 1728 [style=solid label="CLOSE_BRACE"]
  1520 -> 363 [style=solid label="ZERO_LB"]
  1520 -> 364 [style=solid label="ZERO_HB"]
  1520 -> 365 [style=solid label="SINGLE_QUOTE"]
  1520 -> 366 [style=solid label="FALSE"]
  1520 -> 367 [style=solid label="TRUE"]
  1520 -> 368 [style=solid label="NOEXCEPT"]
  1520 -> 17 [style=solid label="OPERATOR"]
  1520 -> 26 [style=solid label="DECLTYPE"]
  1520 -> 369 [style=solid label="DELETE"]
  1520 -> 370 [style=solid label="DOT"]
  1520 -> 184 [style=solid label="UNICODE_8"]
  1520 -> 371 [style=solid label="MULT"]
  1520 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1520 -> 372 [style=solid label="ZERO_LX"]
  1520 -> 373 [style=solid label="ZERO_HX"]
  1520 -> 374 [style=solid label="REQUIRES"]
  1520 -> 375 [style=solid label="NEW"]
  1520 -> 376 [style=solid label="COMPL"]
  1520 -> 377 [style=solid label="NOT"]
  1520 -> 378 [style=solid label="PLUS_PLUS"]
  1520 -> 379 [style=solid label="MINUS_MINUS"]
  1520 -> 380 [style=solid label="THIS"]
  1520 -> 36 [style=solid label="AUTO"]
  1520 -> 381 [style=solid label="NULLPTR"]
  1520 -> 382 [style=solid label="DYNAMIC_CAST"]
  1520 -> 383 [style=solid label="STATIC_CAST"]
  1520 -> 384 [style=solid label="REINTERPRET_CAST"]
  1520 -> 385 [style=solid label="CONST_CAST"]
  1520 -> 386 [style=solid label="TYPEID"]
  1520 -> 37 [style=solid label="CHAR"]
  1520 -> 38 [style=solid label="CHAR8_T"]
  1520 -> 39 [style=solid label="CHAR16_T"]
  1520 -> 40 [style=solid label="CHAR32_T"]
  1520 -> 41 [style=solid label="WCHAR_T"]
  1520 -> 42 [style=solid label="BOOL"]
  1520 -> 43 [style=solid label="SHORT"]
  1520 -> 44 [style=solid label="INT"]
  1520 -> 45 [style=solid label="LONG"]
  1520 -> 46 [style=solid label="SIGNED"]
  1520 -> 47 [style=solid label="UNSIGNED"]
  1520 -> 48 [style=solid label="FLOAT"]
  1520 -> 49 [style=solid label="DOUBLE"]
  1520 -> 50 [style=solid label="VOID"]
  1520 -> 523 [style=solid label="THROW"]
  1520 -> 55 [style=solid label="TYPENAME"]
  1520 -> 387 [style=solid label="SIZEOF"]
  1520 -> 388 [style=solid label="ALIGNOF"]
  1520 -> 524 [style=solid label="CO_YIELD"]
  1520 -> 389 [style=solid label="'0'"]
  1520 -> 390 [style=solid label="'1'"]
  1520 -> 391 [style=solid label="'2'"]
  1520 -> 392 [style=solid label="'3'"]
  1520 -> 393 [style=solid label="'4'"]
  1520 -> 394 [style=solid label="'5'"]
  1520 -> 395 [style=solid label="'6'"]
  1520 -> 396 [style=solid label="'7'"]
  1520 -> 397 [style=solid label="'8'"]
  1520 -> 398 [style=solid label="'9'"]
  1520 -> 205 [style=solid label="'u'"]
  1520 -> 206 [style=solid label="'U'"]
  1520 -> 207 [style=solid label="'L'"]
  1520 -> 208 [style=solid label="'R'"]
  1520 -> 399 [style=dashed label="additive-expression"]
  1520 -> 400 [style=dashed label="and-expression"]
  1520 -> 1134 [style=dashed label="assignment-expression"]
  1520 -> 401 [style=dashed label="await-expression"]
  1520 -> 402 [style=dashed label="binary-literal"]
  1520 -> 403 [style=dashed label="boolean-literal"]
  1520 -> 1135 [style=dashed label="braced-init-list"]
  1520 -> 404 [style=dashed label="cast-expression"]
  1520 -> 405 [style=dashed label="character-literal"]
  1520 -> 65 [style=dashed label="class-name"]
  1520 -> 406 [style=dashed label="compare-expression"]
  1520 -> 67 [style=dashed label="concept-name"]
  1520 -> 526 [style=dashed label="conditional-expression"]
  1520 -> 68 [style=dashed label="conversion-function-id"]
  1520 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1520 -> 410 [style=dashed label="decimal-literal"]
  1520 -> 76 [style=dashed label="decltype-specifier"]
  1520 -> 411 [style=dashed label="delete-expression"]
  1520 -> 412 [style=dashed label="digit"]
  1520 -> 413 [style=dashed label="digit-sequence"]
  1520 -> 414 [style=dashed label="encoding-prefix"]
  1520 -> 84 [style=dashed label="enum-name"]
  1520 -> 415 [style=dashed label="equality-expression"]
  1520 -> 416 [style=dashed label="exclusive-or-expression"]
  1520 -> 417 [style=dashed label="floating-point-literal"]
  1520 -> 418 [style=dashed label="fold-expression"]
  1520 -> 419 [style=dashed label="fractional-constant"]
  1520 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1520 -> 421 [style=dashed label="hexadecimal-literal"]
  1520 -> 422 [style=dashed label="hexadecimal-prefix"]
  1520 -> 423 [style=dashed label="id-expression"]
  1520 -> 424 [style=dashed label="inclusive-or-expression"]
  1520 -> 1724 [style=dashed label="initializer-clause"]
  1520 -> 425 [style=dashed label="integer-literal"]
  1520 -> 426 [style=dashed label="lambda-expression"]
  1520 -> 427 [style=dashed label="lambda-introducer"]
  1520 -> 428 [style=dashed label="literal"]
  1520 -> 95 [style=dashed label="literal-operator-id"]
  1520 -> 429 [style=dashed label="logical-and-expression"]
  1520 -> 528 [style=dashed label="logical-or-expression"]
  1520 -> 431 [style=dashed label="multiplicative-expression"]
  1520 -> 99 [style=dashed label="namespace-alias"]
  1520 -> 102 [style=dashed label="namespace-name"]
  1520 -> 432 [style=dashed label="nested-name-specifier"]
  1520 -> 433 [style=dashed label="new-expression"]
  1520 -> 434 [style=dashed label="noexcept-expression"]
  1520 -> 435 [style=dashed label="nonzero-digit"]
  1520 -> 436 [style=dashed label="octal-literal"]
  1520 -> 108 [style=dashed label="operator-function-id"]
  1520 -> 109 [style=dashed label="placeholder-type-specifier"]
  1520 -> 437 [style=dashed label="pm-expression"]
  1520 -> 438 [style=dashed label="pointer-literal"]
  1520 -> 439 [style=dashed label="postfix-expression"]
  1520 -> 440 [style=dashed label="primary-expression"]
  1520 -> 112 [style=dashed label="qualified-id"]
  1520 -> 441 [style=dashed label="relational-expression"]
  1520 -> 442 [style=dashed label="requires-expression"]
  1520 -> 443 [style=dashed label="shift-expression"]
  1520 -> 114 [style=dashed label="simple-template-id"]
  1520 -> 529 [style=dashed label="simple-type-specifier"]
  1520 -> 445 [style=dashed label="string-literal"]
  1520 -> 120 [style=dashed label="template-id"]
  1520 -> 215 [style=dashed label="template-name"]
  1520 -> 530 [style=dashed label="throw-expression"]
  1520 -> 123 [style=dashed label="type-constraint"]
  1520 -> 124 [style=dashed label="type-name"]
  1520 -> 126 [style=dashed label="typedef-name"]
  1520 -> 531 [style=dashed label="typename-specifier"]
  1520 -> 449 [style=dashed label="unary-expression"]
  1520 -> 450 [style=dashed label="unary-operator"]
  1520 -> 129 [style=dashed label="unqualified-id"]
  1520 -> 451 [style=dashed label="user-defined-character-literal"]
  1520 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1520 -> 453 [style=dashed label="user-defined-integer-literal"]
  1520 -> 454 [style=dashed label="user-defined-literal"]
  1520 -> 455 [style=dashed label="user-defined-string-literal"]
  1520 -> 532 [style=dashed label="yield-expression"]
  1521 [label="State 1521\n\l108 braced-init-list: OPEN_BRACE initializer-list CLOSE_BRACE •\l"]
  1521 -> "1521R108" [style=solid]
 "1521R108" [label="R108", fillcolor=3, shape=diamond, style=filled]
  1522 [label="State 1522\n\l471 init-declarator: declarator requires-clause •\l"]
  1522 -> "1522R471" [style=solid]
 "1522R471" [label="R471", fillcolor=3, shape=diamond, style=filled]
  1523 [label="State 1523\n\l969 simple-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE • initializer SEMICOLON\l"]
  1523 -> 1273 [style=solid label="EQ"]
  1523 -> 643 [style=solid label="OPEN_PAREN"]
  1523 -> 935 [style=solid label="OPEN_BRACE"]
  1523 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1523 -> 646 [style=dashed label="braced-init-list"]
  1523 -> 1729 [style=dashed label="initializer"]
  1524 [label="State 1524\n\l571 mem-initializer: mem-initializer-id OPEN_PAREN CLOSE_PAREN •\l"]
  1524 -> "1524R571" [style=solid]
 "1524R571" [label="R571", fillcolor=3, shape=diamond, style=filled]
  1525 [label="State 1525\n\l572 mem-initializer: mem-initializer-id OPEN_PAREN expression-list • CLOSE_PAREN\l"]
  1525 -> 1730 [style=solid label="CLOSE_PAREN"]
  1526 [label="State 1526\n\l578 mem-initializer-list: mem-initializer-list COMMA mem-initializer •\l579                     | mem-initializer-list COMMA mem-initializer • ELLIPSIS\l"]
  1526 -> 1731 [style=solid label="ELLIPSIS"]
  1526 -> "1526R578" [style=solid]
 "1526R578" [label="R578", fillcolor=3, shape=diamond, style=filled]
  1527 [label="State 1527\n\l520 labeled-statement: IDENTIFIER COLON statement •\l"]
  1527 -> "1527R520" [style=solid]
 "1527R520" [label="R520", fillcolor=3, shape=diamond, style=filled]
  1528 [label="State 1528\n\l183 coroutine-return-statement: CO_RETURN expr-or-braced-init-list SEMICOLON •\l"]
  1528 -> "1528R183" [style=solid]
 "1528R183" [label="R183", fillcolor=3, shape=diamond, style=filled]
  1529 [label="State 1529\n\l524 labeled-statement: DEFAULT COLON statement •\l"]
  1529 -> "1529R524" [style=solid]
 "1529R524" [label="R524", fillcolor=3, shape=diamond, style=filled]
  1530 [label="State 1530\n\l1069 try-block: TRY compound-statement handler-seq •\l"]
  1530 -> "1530R1069" [style=solid]
 "1530R1069" [label="R1069", fillcolor=3, shape=diamond, style=filled]
  1531 [label="State 1531\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l165 condition: attribute-specifier-seq • decl-specifier-seq declarator brace-or-equal-initializer\l"]
  1531 -> 162 [style=solid label="IDENTIFIER"]
  1531 -> 4 [style=solid label="ALIGNAS"]
  1531 -> 9 [style=solid label="SCOPE"]
  1531 -> 10 [style=solid label="OPEN_SQUARE"]
  1531 -> 11 [style=solid label="VIRTUAL"]
  1531 -> 12 [style=solid label="CLASS"]
  1531 -> 13 [style=solid label="STRUCT"]
  1531 -> 14 [style=solid label="UNION"]
  1531 -> 18 [style=solid label="CONST"]
  1531 -> 19 [style=solid label="VOLATILE"]
  1531 -> 20 [style=solid label="FRIEND"]
  1531 -> 21 [style=solid label="TYPEDEF"]
  1531 -> 22 [style=solid label="CONSTEXPR"]
  1531 -> 23 [style=solid label="CONSTEVAL"]
  1531 -> 24 [style=solid label="CONSTINIT"]
  1531 -> 258 [style=solid label="INLINE"]
  1531 -> 26 [style=solid label="DECLTYPE"]
  1531 -> 27 [style=solid label="ENUM"]
  1531 -> 259 [style=solid label="EXTERN"]
  1531 -> 29 [style=solid label="EXPLICIT"]
  1531 -> 36 [style=solid label="AUTO"]
  1531 -> 37 [style=solid label="CHAR"]
  1531 -> 38 [style=solid label="CHAR8_T"]
  1531 -> 39 [style=solid label="CHAR16_T"]
  1531 -> 40 [style=solid label="CHAR32_T"]
  1531 -> 41 [style=solid label="WCHAR_T"]
  1531 -> 42 [style=solid label="BOOL"]
  1531 -> 43 [style=solid label="SHORT"]
  1531 -> 44 [style=solid label="INT"]
  1531 -> 45 [style=solid label="LONG"]
  1531 -> 46 [style=solid label="SIGNED"]
  1531 -> 47 [style=solid label="UNSIGNED"]
  1531 -> 48 [style=solid label="FLOAT"]
  1531 -> 49 [style=solid label="DOUBLE"]
  1531 -> 50 [style=solid label="VOID"]
  1531 -> 52 [style=solid label="STATIC"]
  1531 -> 53 [style=solid label="THREAD_LOCAL"]
  1531 -> 54 [style=solid label="MUTABLE"]
  1531 -> 55 [style=solid label="TYPENAME"]
  1531 -> 57 [style=dashed label="alignment-specifier"]
  1531 -> 260 [style=dashed label="attribute-specifier"]
  1531 -> 63 [style=dashed label="class-head"]
  1531 -> 64 [style=dashed label="class-key"]
  1531 -> 65 [style=dashed label="class-name"]
  1531 -> 66 [style=dashed label="class-specifier"]
  1531 -> 67 [style=dashed label="concept-name"]
  1531 -> 69 [style=dashed label="cv-qualifier"]
  1531 -> 70 [style=dashed label="decl-specifier"]
  1531 -> 1732 [style=dashed label="decl-specifier-seq"]
  1531 -> 76 [style=dashed label="decltype-specifier"]
  1531 -> 78 [style=dashed label="defining-type-specifier"]
  1531 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1531 -> 80 [style=dashed label="elaborated-type-specifier"]
  1531 -> 82 [style=dashed label="enum-head"]
  1531 -> 263 [style=dashed label="enum-key"]
  1531 -> 84 [style=dashed label="enum-name"]
  1531 -> 85 [style=dashed label="enum-specifier"]
  1531 -> 264 [style=dashed label="explicit-specifier"]
  1531 -> 91 [style=dashed label="function-specifier"]
  1531 -> 99 [style=dashed label="namespace-alias"]
  1531 -> 102 [style=dashed label="namespace-name"]
  1531 -> 212 [style=dashed label="nested-name-specifier"]
  1531 -> 109 [style=dashed label="placeholder-type-specifier"]
  1531 -> 141 [style=dashed label="simple-template-id"]
  1531 -> 115 [style=dashed label="simple-type-specifier"]
  1531 -> 117 [style=dashed label="storage-class-specifier"]
  1531 -> 215 [style=dashed label="template-name"]
  1531 -> 123 [style=dashed label="type-constraint"]
  1531 -> 124 [style=dashed label="type-name"]
  1531 -> 125 [style=dashed label="type-specifier"]
  1531 -> 126 [style=dashed label="typedef-name"]
  1531 -> 127 [style=dashed label="typename-specifier"]
  1532 [label="State 1532\n\l505 iteration-statement: WHILE OPEN_PAREN condition • CLOSE_PAREN statement\l"]
  1532 -> 1733 [style=solid label="CLOSE_PAREN"]
  1533 [label="State 1533\n\l166 condition: decl-specifier-seq • declarator brace-or-equal-initializer\l"]
  1533 -> 147 [style=solid label="IDENTIFIER"]
  1533 -> 5 [style=solid label="OPEN_PAREN"]
  1533 -> 6 [style=solid label="ELLIPSIS"]
  1533 -> 7 [style=solid label="AND"]
  1533 -> 9 [style=solid label="SCOPE"]
  1533 -> 16 [style=solid label="AND_AND"]
  1533 -> 17 [style=solid label="OPERATOR"]
  1533 -> 134 [style=solid label="DECLTYPE"]
  1533 -> 31 [style=solid label="MULT"]
  1533 -> 35 [style=solid label="COMPL"]
  1533 -> 65 [style=dashed label="class-name"]
  1533 -> 68 [style=dashed label="conversion-function-id"]
  1533 -> 1734 [style=dashed label="declarator"]
  1533 -> 75 [style=dashed label="declarator-id"]
  1533 -> 138 [style=dashed label="decltype-specifier"]
  1533 -> 84 [style=dashed label="enum-name"]
  1533 -> 93 [style=dashed label="id-expression"]
  1533 -> 95 [style=dashed label="literal-operator-id"]
  1533 -> 99 [style=dashed label="namespace-alias"]
  1533 -> 102 [style=dashed label="namespace-name"]
  1533 -> 148 [style=dashed label="nested-name-specifier"]
  1533 -> 106 [style=dashed label="noptr-declarator"]
  1533 -> 108 [style=dashed label="operator-function-id"]
  1533 -> 110 [style=dashed label="ptr-declarator"]
  1533 -> 111 [style=dashed label="ptr-operator"]
  1533 -> 112 [style=dashed label="qualified-id"]
  1533 -> 114 [style=dashed label="simple-template-id"]
  1533 -> 120 [style=dashed label="template-id"]
  1533 -> 142 [style=dashed label="template-name"]
  1533 -> 143 [style=dashed label="type-name"]
  1533 -> 126 [style=dashed label="typedef-name"]
  1533 -> 129 [style=dashed label="unqualified-id"]
  1534 [label="State 1534\n\l164 condition: expression •\l335 expression: expression • COMMA assignment-expression\l"]
  1534 -> 1029 [style=solid label="COMMA"]
  1534 -> "1534R164" [style=solid]
 "1534R164" [label="R164", fillcolor=3, shape=diamond, style=filled]
  1535 [label="State 1535\n\l506 iteration-statement: DO statement WHILE • OPEN_PAREN expression CLOSE_PAREN SEMICOLON\l"]
  1535 -> 1735 [style=solid label="OPEN_PAREN"]
  1536 [label="State 1536\n\l 13 alias-declaration: USING • IDENTIFIER EQ defining-type-id SEMICOLON\l 14                  | USING • IDENTIFIER attribute-specifier-seq EQ defining-type-id SEMICOLON\l"]
  1536 -> 1736 [style=solid label="IDENTIFIER"]
  1537 [label="State 1537\n\l476 init-statement: alias-declaration •\l"]
  1537 -> "1537R476" [style=solid]
 "1537R476" [label="R476", fillcolor=3, shape=diamond, style=filled]
  1538 [label="State 1538\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l380 for-range-declaration: attribute-specifier-seq • decl-specifier-seq declarator\l382                      | attribute-specifier-seq • decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE\l384                      | attribute-specifier-seq • decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE\l965 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list SEMICOLON\l966                   | attribute-specifier-seq • decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l968                   | attribute-specifier-seq • decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1538 -> 162 [style=solid label="IDENTIFIER"]
  1538 -> 4 [style=solid label="ALIGNAS"]
  1538 -> 9 [style=solid label="SCOPE"]
  1538 -> 10 [style=solid label="OPEN_SQUARE"]
  1538 -> 11 [style=solid label="VIRTUAL"]
  1538 -> 12 [style=solid label="CLASS"]
  1538 -> 13 [style=solid label="STRUCT"]
  1538 -> 14 [style=solid label="UNION"]
  1538 -> 18 [style=solid label="CONST"]
  1538 -> 19 [style=solid label="VOLATILE"]
  1538 -> 20 [style=solid label="FRIEND"]
  1538 -> 21 [style=solid label="TYPEDEF"]
  1538 -> 22 [style=solid label="CONSTEXPR"]
  1538 -> 23 [style=solid label="CONSTEVAL"]
  1538 -> 24 [style=solid label="CONSTINIT"]
  1538 -> 258 [style=solid label="INLINE"]
  1538 -> 26 [style=solid label="DECLTYPE"]
  1538 -> 27 [style=solid label="ENUM"]
  1538 -> 259 [style=solid label="EXTERN"]
  1538 -> 29 [style=solid label="EXPLICIT"]
  1538 -> 36 [style=solid label="AUTO"]
  1538 -> 37 [style=solid label="CHAR"]
  1538 -> 38 [style=solid label="CHAR8_T"]
  1538 -> 39 [style=solid label="CHAR16_T"]
  1538 -> 40 [style=solid label="CHAR32_T"]
  1538 -> 41 [style=solid label="WCHAR_T"]
  1538 -> 42 [style=solid label="BOOL"]
  1538 -> 43 [style=solid label="SHORT"]
  1538 -> 44 [style=solid label="INT"]
  1538 -> 45 [style=solid label="LONG"]
  1538 -> 46 [style=solid label="SIGNED"]
  1538 -> 47 [style=solid label="UNSIGNED"]
  1538 -> 48 [style=solid label="FLOAT"]
  1538 -> 49 [style=solid label="DOUBLE"]
  1538 -> 50 [style=solid label="VOID"]
  1538 -> 52 [style=solid label="STATIC"]
  1538 -> 53 [style=solid label="THREAD_LOCAL"]
  1538 -> 54 [style=solid label="MUTABLE"]
  1538 -> 55 [style=solid label="TYPENAME"]
  1538 -> 57 [style=dashed label="alignment-specifier"]
  1538 -> 260 [style=dashed label="attribute-specifier"]
  1538 -> 63 [style=dashed label="class-head"]
  1538 -> 64 [style=dashed label="class-key"]
  1538 -> 65 [style=dashed label="class-name"]
  1538 -> 66 [style=dashed label="class-specifier"]
  1538 -> 67 [style=dashed label="concept-name"]
  1538 -> 69 [style=dashed label="cv-qualifier"]
  1538 -> 70 [style=dashed label="decl-specifier"]
  1538 -> 1737 [style=dashed label="decl-specifier-seq"]
  1538 -> 76 [style=dashed label="decltype-specifier"]
  1538 -> 78 [style=dashed label="defining-type-specifier"]
  1538 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1538 -> 80 [style=dashed label="elaborated-type-specifier"]
  1538 -> 82 [style=dashed label="enum-head"]
  1538 -> 263 [style=dashed label="enum-key"]
  1538 -> 84 [style=dashed label="enum-name"]
  1538 -> 85 [style=dashed label="enum-specifier"]
  1538 -> 264 [style=dashed label="explicit-specifier"]
  1538 -> 91 [style=dashed label="function-specifier"]
  1538 -> 99 [style=dashed label="namespace-alias"]
  1538 -> 102 [style=dashed label="namespace-name"]
  1538 -> 212 [style=dashed label="nested-name-specifier"]
  1538 -> 109 [style=dashed label="placeholder-type-specifier"]
  1538 -> 141 [style=dashed label="simple-template-id"]
  1538 -> 115 [style=dashed label="simple-type-specifier"]
  1538 -> 117 [style=dashed label="storage-class-specifier"]
  1538 -> 215 [style=dashed label="template-name"]
  1538 -> 123 [style=dashed label="type-constraint"]
  1538 -> 124 [style=dashed label="type-name"]
  1538 -> 125 [style=dashed label="type-specifier"]
  1538 -> 126 [style=dashed label="typedef-name"]
  1538 -> 127 [style=dashed label="typename-specifier"]
  1539 [label="State 1539\n\l381 for-range-declaration: decl-specifier-seq • declarator\l383                      | decl-specifier-seq • OPEN_SQUARE identifier-list CLOSE_SQUARE\l385                      | decl-specifier-seq • ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE\l963 simple-declaration: decl-specifier-seq • SEMICOLON\l964                   | decl-specifier-seq • init-declarator-list SEMICOLON\l967                   | decl-specifier-seq • OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l969                   | decl-specifier-seq • ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1539 -> 147 [style=solid label="IDENTIFIER"]
  1539 -> 277 [style=solid label="SEMICOLON"]
  1539 -> 5 [style=solid label="OPEN_PAREN"]
  1539 -> 6 [style=solid label="ELLIPSIS"]
  1539 -> 278 [style=solid label="AND"]
  1539 -> 9 [style=solid label="SCOPE"]
  1539 -> 1738 [style=solid label="OPEN_SQUARE"]
  1539 -> 280 [style=solid label="AND_AND"]
  1539 -> 17 [style=solid label="OPERATOR"]
  1539 -> 134 [style=solid label="DECLTYPE"]
  1539 -> 31 [style=solid label="MULT"]
  1539 -> 35 [style=solid label="COMPL"]
  1539 -> 65 [style=dashed label="class-name"]
  1539 -> 68 [style=dashed label="conversion-function-id"]
  1539 -> 1739 [style=dashed label="declarator"]
  1539 -> 75 [style=dashed label="declarator-id"]
  1539 -> 138 [style=dashed label="decltype-specifier"]
  1539 -> 84 [style=dashed label="enum-name"]
  1539 -> 93 [style=dashed label="id-expression"]
  1539 -> 282 [style=dashed label="init-declarator"]
  1539 -> 283 [style=dashed label="init-declarator-list"]
  1539 -> 95 [style=dashed label="literal-operator-id"]
  1539 -> 99 [style=dashed label="namespace-alias"]
  1539 -> 102 [style=dashed label="namespace-name"]
  1539 -> 148 [style=dashed label="nested-name-specifier"]
  1539 -> 106 [style=dashed label="noptr-declarator"]
  1539 -> 108 [style=dashed label="operator-function-id"]
  1539 -> 110 [style=dashed label="ptr-declarator"]
  1539 -> 111 [style=dashed label="ptr-operator"]
  1539 -> 112 [style=dashed label="qualified-id"]
  1539 -> 1740 [style=dashed label="ref-qualifier"]
  1539 -> 114 [style=dashed label="simple-template-id"]
  1539 -> 120 [style=dashed label="template-id"]
  1539 -> 142 [style=dashed label="template-name"]
  1539 -> 143 [style=dashed label="type-name"]
  1539 -> 126 [style=dashed label="typedef-name"]
  1539 -> 129 [style=dashed label="unqualified-id"]
  1540 [label="State 1540\n\l474 init-statement: expression-statement •\l"]
  1540 -> "1540R474" [style=solid]
 "1540R474" [label="R474", fillcolor=3, shape=diamond, style=filled]
  1541 [label="State 1541\n\l511 iteration-statement: FOR OPEN_PAREN for-range-declaration • COLON for-range-initializer CLOSE_PAREN statement\l"]
  1541 -> 1741 [style=solid label="COLON"]
  1542 [label="State 1542\n\l507 iteration-statement: FOR OPEN_PAREN init-statement • SEMICOLON CLOSE_PAREN statement\l508                    | FOR OPEN_PAREN init-statement • condition SEMICOLON CLOSE_PAREN statement\l509                    | FOR OPEN_PAREN init-statement • SEMICOLON expression CLOSE_PAREN statement\l510                    | FOR OPEN_PAREN init-statement • condition SEMICOLON expression CLOSE_PAREN statement\l512                    | FOR OPEN_PAREN init-statement • for-range-declaration COLON for-range-initializer CLOSE_PAREN statement\l"]
  1542 -> 356 [style=solid label="PLUS"]
  1542 -> 357 [style=solid label="MINUS"]
  1542 -> 2 [style=solid label="IDENTIFIER"]
  1542 -> 1742 [style=solid label="SEMICOLON"]
  1542 -> 4 [style=solid label="ALIGNAS"]
  1542 -> 358 [style=solid label="OPEN_PAREN"]
  1542 -> 359 [style=solid label="AND"]
  1542 -> 360 [style=solid label="SCOPE"]
  1542 -> 663 [style=solid label="OPEN_SQUARE"]
  1542 -> 362 [style=solid label="CO_AWAIT"]
  1542 -> 11 [style=solid label="VIRTUAL"]
  1542 -> 363 [style=solid label="ZERO_LB"]
  1542 -> 364 [style=solid label="ZERO_HB"]
  1542 -> 365 [style=solid label="SINGLE_QUOTE"]
  1542 -> 366 [style=solid label="FALSE"]
  1542 -> 367 [style=solid label="TRUE"]
  1542 -> 12 [style=solid label="CLASS"]
  1542 -> 13 [style=solid label="STRUCT"]
  1542 -> 14 [style=solid label="UNION"]
  1542 -> 368 [style=solid label="NOEXCEPT"]
  1542 -> 17 [style=solid label="OPERATOR"]
  1542 -> 18 [style=solid label="CONST"]
  1542 -> 19 [style=solid label="VOLATILE"]
  1542 -> 20 [style=solid label="FRIEND"]
  1542 -> 21 [style=solid label="TYPEDEF"]
  1542 -> 22 [style=solid label="CONSTEXPR"]
  1542 -> 23 [style=solid label="CONSTEVAL"]
  1542 -> 24 [style=solid label="CONSTINIT"]
  1542 -> 258 [style=solid label="INLINE"]
  1542 -> 26 [style=solid label="DECLTYPE"]
  1542 -> 369 [style=solid label="DELETE"]
  1542 -> 370 [style=solid label="DOT"]
  1542 -> 27 [style=solid label="ENUM"]
  1542 -> 184 [style=solid label="UNICODE_8"]
  1542 -> 259 [style=solid label="EXTERN"]
  1542 -> 29 [style=solid label="EXPLICIT"]
  1542 -> 371 [style=solid label="MULT"]
  1542 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1542 -> 372 [style=solid label="ZERO_LX"]
  1542 -> 373 [style=solid label="ZERO_HX"]
  1542 -> 374 [style=solid label="REQUIRES"]
  1542 -> 375 [style=solid label="NEW"]
  1542 -> 376 [style=solid label="COMPL"]
  1542 -> 377 [style=solid label="NOT"]
  1542 -> 378 [style=solid label="PLUS_PLUS"]
  1542 -> 379 [style=solid label="MINUS_MINUS"]
  1542 -> 380 [style=solid label="THIS"]
  1542 -> 36 [style=solid label="AUTO"]
  1542 -> 381 [style=solid label="NULLPTR"]
  1542 -> 382 [style=solid label="DYNAMIC_CAST"]
  1542 -> 383 [style=solid label="STATIC_CAST"]
  1542 -> 384 [style=solid label="REINTERPRET_CAST"]
  1542 -> 385 [style=solid label="CONST_CAST"]
  1542 -> 386 [style=solid label="TYPEID"]
  1542 -> 37 [style=solid label="CHAR"]
  1542 -> 38 [style=solid label="CHAR8_T"]
  1542 -> 39 [style=solid label="CHAR16_T"]
  1542 -> 40 [style=solid label="CHAR32_T"]
  1542 -> 41 [style=solid label="WCHAR_T"]
  1542 -> 42 [style=solid label="BOOL"]
  1542 -> 43 [style=solid label="SHORT"]
  1542 -> 44 [style=solid label="INT"]
  1542 -> 45 [style=solid label="LONG"]
  1542 -> 46 [style=solid label="SIGNED"]
  1542 -> 47 [style=solid label="UNSIGNED"]
  1542 -> 48 [style=solid label="FLOAT"]
  1542 -> 49 [style=solid label="DOUBLE"]
  1542 -> 50 [style=solid label="VOID"]
  1542 -> 52 [style=solid label="STATIC"]
  1542 -> 53 [style=solid label="THREAD_LOCAL"]
  1542 -> 54 [style=solid label="MUTABLE"]
  1542 -> 523 [style=solid label="THROW"]
  1542 -> 55 [style=solid label="TYPENAME"]
  1542 -> 387 [style=solid label="SIZEOF"]
  1542 -> 388 [style=solid label="ALIGNOF"]
  1542 -> 524 [style=solid label="CO_YIELD"]
  1542 -> 389 [style=solid label="'0'"]
  1542 -> 390 [style=solid label="'1'"]
  1542 -> 391 [style=solid label="'2'"]
  1542 -> 392 [style=solid label="'3'"]
  1542 -> 393 [style=solid label="'4'"]
  1542 -> 394 [style=solid label="'5'"]
  1542 -> 395 [style=solid label="'6'"]
  1542 -> 396 [style=solid label="'7'"]
  1542 -> 397 [style=solid label="'8'"]
  1542 -> 398 [style=solid label="'9'"]
  1542 -> 205 [style=solid label="'u'"]
  1542 -> 206 [style=solid label="'U'"]
  1542 -> 207 [style=solid label="'L'"]
  1542 -> 208 [style=solid label="'R'"]
  1542 -> 399 [style=dashed label="additive-expression"]
  1542 -> 57 [style=dashed label="alignment-specifier"]
  1542 -> 400 [style=dashed label="and-expression"]
  1542 -> 525 [style=dashed label="assignment-expression"]
  1542 -> 60 [style=dashed label="attribute-specifier"]
  1542 -> 1743 [style=dashed label="attribute-specifier-seq"]
  1542 -> 401 [style=dashed label="await-expression"]
  1542 -> 402 [style=dashed label="binary-literal"]
  1542 -> 403 [style=dashed label="boolean-literal"]
  1542 -> 404 [style=dashed label="cast-expression"]
  1542 -> 405 [style=dashed label="character-literal"]
  1542 -> 63 [style=dashed label="class-head"]
  1542 -> 64 [style=dashed label="class-key"]
  1542 -> 65 [style=dashed label="class-name"]
  1542 -> 66 [style=dashed label="class-specifier"]
  1542 -> 406 [style=dashed label="compare-expression"]
  1542 -> 67 [style=dashed label="concept-name"]
  1542 -> 1744 [style=dashed label="condition"]
  1542 -> 526 [style=dashed label="conditional-expression"]
  1542 -> 68 [style=dashed label="conversion-function-id"]
  1542 -> 69 [style=dashed label="cv-qualifier"]
  1542 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1542 -> 410 [style=dashed label="decimal-literal"]
  1542 -> 70 [style=dashed label="decl-specifier"]
  1542 -> 1745 [style=dashed label="decl-specifier-seq"]
  1542 -> 76 [style=dashed label="decltype-specifier"]
  1542 -> 78 [style=dashed label="defining-type-specifier"]
  1542 -> 411 [style=dashed label="delete-expression"]
  1542 -> 412 [style=dashed label="digit"]
  1542 -> 413 [style=dashed label="digit-sequence"]
  1542 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1542 -> 80 [style=dashed label="elaborated-type-specifier"]
  1542 -> 414 [style=dashed label="encoding-prefix"]
  1542 -> 82 [style=dashed label="enum-head"]
  1542 -> 263 [style=dashed label="enum-key"]
  1542 -> 84 [style=dashed label="enum-name"]
  1542 -> 85 [style=dashed label="enum-specifier"]
  1542 -> 415 [style=dashed label="equality-expression"]
  1542 -> 416 [style=dashed label="exclusive-or-expression"]
  1542 -> 264 [style=dashed label="explicit-specifier"]
  1542 -> 1534 [style=dashed label="expression"]
  1542 -> 417 [style=dashed label="floating-point-literal"]
  1542 -> 418 [style=dashed label="fold-expression"]
  1542 -> 1746 [style=dashed label="for-range-declaration"]
  1542 -> 419 [style=dashed label="fractional-constant"]
  1542 -> 91 [style=dashed label="function-specifier"]
  1542 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1542 -> 421 [style=dashed label="hexadecimal-literal"]
  1542 -> 422 [style=dashed label="hexadecimal-prefix"]
  1542 -> 423 [style=dashed label="id-expression"]
  1542 -> 424 [style=dashed label="inclusive-or-expression"]
  1542 -> 425 [style=dashed label="integer-literal"]
  1542 -> 426 [style=dashed label="lambda-expression"]
  1542 -> 427 [style=dashed label="lambda-introducer"]
  1542 -> 428 [style=dashed label="literal"]
  1542 -> 95 [style=dashed label="literal-operator-id"]
  1542 -> 429 [style=dashed label="logical-and-expression"]
  1542 -> 528 [style=dashed label="logical-or-expression"]
  1542 -> 431 [style=dashed label="multiplicative-expression"]
  1542 -> 99 [style=dashed label="namespace-alias"]
  1542 -> 102 [style=dashed label="namespace-name"]
  1542 -> 432 [style=dashed label="nested-name-specifier"]
  1542 -> 433 [style=dashed label="new-expression"]
  1542 -> 434 [style=dashed label="noexcept-expression"]
  1542 -> 435 [style=dashed label="nonzero-digit"]
  1542 -> 436 [style=dashed label="octal-literal"]
  1542 -> 108 [style=dashed label="operator-function-id"]
  1542 -> 109 [style=dashed label="placeholder-type-specifier"]
  1542 -> 437 [style=dashed label="pm-expression"]
  1542 -> 438 [style=dashed label="pointer-literal"]
  1542 -> 439 [style=dashed label="postfix-expression"]
  1542 -> 440 [style=dashed label="primary-expression"]
  1542 -> 112 [style=dashed label="qualified-id"]
  1542 -> 441 [style=dashed label="relational-expression"]
  1542 -> 442 [style=dashed label="requires-expression"]
  1542 -> 443 [style=dashed label="shift-expression"]
  1542 -> 114 [style=dashed label="simple-template-id"]
  1542 -> 444 [style=dashed label="simple-type-specifier"]
  1542 -> 117 [style=dashed label="storage-class-specifier"]
  1542 -> 445 [style=dashed label="string-literal"]
  1542 -> 120 [style=dashed label="template-id"]
  1542 -> 215 [style=dashed label="template-name"]
  1542 -> 530 [style=dashed label="throw-expression"]
  1542 -> 123 [style=dashed label="type-constraint"]
  1542 -> 124 [style=dashed label="type-name"]
  1542 -> 125 [style=dashed label="type-specifier"]
  1542 -> 126 [style=dashed label="typedef-name"]
  1542 -> 448 [style=dashed label="typename-specifier"]
  1542 -> 449 [style=dashed label="unary-expression"]
  1542 -> 450 [style=dashed label="unary-operator"]
  1542 -> 129 [style=dashed label="unqualified-id"]
  1542 -> 451 [style=dashed label="user-defined-character-literal"]
  1542 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1542 -> 453 [style=dashed label="user-defined-integer-literal"]
  1542 -> 454 [style=dashed label="user-defined-literal"]
  1542 -> 455 [style=dashed label="user-defined-string-literal"]
  1542 -> 532 [style=dashed label="yield-expression"]
  1543 [label="State 1543\n\l475 init-statement: simple-declaration •\l"]
  1543 -> "1543R475" [style=solid]
 "1543R475" [label="R475", fillcolor=3, shape=diamond, style=filled]
  1544 [label="State 1544\n\l516 jump-statement: RETURN expr-or-braced-init-list SEMICOLON •\l"]
  1544 -> "1544R516" [style=solid]
 "1544R516" [label="R516", fillcolor=3, shape=diamond, style=filled]
  1545 [label="State 1545\n\l518 jump-statement: GOTO IDENTIFIER SEMICOLON •\l"]
  1545 -> "1545R518" [style=solid]
 "1545R518" [label="R518", fillcolor=3, shape=diamond, style=filled]
  1546 [label="State 1546\n\l522 labeled-statement: CASE constant-expression COLON • statement\l"]
  1546 -> 356 [style=solid label="PLUS"]
  1546 -> 357 [style=solid label="MINUS"]
  1546 -> 1 [style=solid label="USING"]
  1546 -> 661 [style=solid label="IDENTIFIER"]
  1546 -> 662 [style=solid label="SEMICOLON"]
  1546 -> 4 [style=solid label="ALIGNAS"]
  1546 -> 358 [style=solid label="OPEN_PAREN"]
  1546 -> 359 [style=solid label="AND"]
  1546 -> 8 [style=solid label="ASM"]
  1546 -> 360 [style=solid label="SCOPE"]
  1546 -> 663 [style=solid label="OPEN_SQUARE"]
  1546 -> 362 [style=solid label="CO_AWAIT"]
  1546 -> 289 [style=solid label="OPEN_BRACE"]
  1546 -> 11 [style=solid label="VIRTUAL"]
  1546 -> 363 [style=solid label="ZERO_LB"]
  1546 -> 364 [style=solid label="ZERO_HB"]
  1546 -> 365 [style=solid label="SINGLE_QUOTE"]
  1546 -> 366 [style=solid label="FALSE"]
  1546 -> 367 [style=solid label="TRUE"]
  1546 -> 12 [style=solid label="CLASS"]
  1546 -> 13 [style=solid label="STRUCT"]
  1546 -> 14 [style=solid label="UNION"]
  1546 -> 368 [style=solid label="NOEXCEPT"]
  1546 -> 17 [style=solid label="OPERATOR"]
  1546 -> 665 [style=solid label="CO_RETURN"]
  1546 -> 18 [style=solid label="CONST"]
  1546 -> 19 [style=solid label="VOLATILE"]
  1546 -> 20 [style=solid label="FRIEND"]
  1546 -> 21 [style=solid label="TYPEDEF"]
  1546 -> 22 [style=solid label="CONSTEXPR"]
  1546 -> 23 [style=solid label="CONSTEVAL"]
  1546 -> 24 [style=solid label="CONSTINIT"]
  1546 -> 258 [style=solid label="INLINE"]
  1546 -> 26 [style=solid label="DECLTYPE"]
  1546 -> 369 [style=solid label="DELETE"]
  1546 -> 370 [style=solid label="DOT"]
  1546 -> 27 [style=solid label="ENUM"]
  1546 -> 184 [style=solid label="UNICODE_8"]
  1546 -> 259 [style=solid label="EXTERN"]
  1546 -> 29 [style=solid label="EXPLICIT"]
  1546 -> 371 [style=solid label="MULT"]
  1546 -> 666 [style=solid label="DEFAULT"]
  1546 -> 667 [style=solid label="TRY"]
  1546 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1546 -> 372 [style=solid label="ZERO_LX"]
  1546 -> 373 [style=solid label="ZERO_HX"]
  1546 -> 668 [style=solid label="WHILE"]
  1546 -> 669 [style=solid label="DO"]
  1546 -> 670 [style=solid label="FOR"]
  1546 -> 671 [style=solid label="BREAK"]
  1546 -> 672 [style=solid label="CONTINUE"]
  1546 -> 673 [style=solid label="RETURN"]
  1546 -> 674 [style=solid label="GOTO"]
  1546 -> 675 [style=solid label="CASE"]
  1546 -> 676 [style=solid label="NAMESPACE"]
  1546 -> 374 [style=solid label="REQUIRES"]
  1546 -> 375 [style=solid label="NEW"]
  1546 -> 376 [style=solid label="COMPL"]
  1546 -> 377 [style=solid label="NOT"]
  1546 -> 378 [style=solid label="PLUS_PLUS"]
  1546 -> 379 [style=solid label="MINUS_MINUS"]
  1546 -> 380 [style=solid label="THIS"]
  1546 -> 36 [style=solid label="AUTO"]
  1546 -> 381 [style=solid label="NULLPTR"]
  1546 -> 382 [style=solid label="DYNAMIC_CAST"]
  1546 -> 383 [style=solid label="STATIC_CAST"]
  1546 -> 384 [style=solid label="REINTERPRET_CAST"]
  1546 -> 385 [style=solid label="CONST_CAST"]
  1546 -> 386 [style=solid label="TYPEID"]
  1546 -> 677 [style=solid label="IF"]
  1546 -> 678 [style=solid label="SWITCH"]
  1546 -> 37 [style=solid label="CHAR"]
  1546 -> 38 [style=solid label="CHAR8_T"]
  1546 -> 39 [style=solid label="CHAR16_T"]
  1546 -> 40 [style=solid label="CHAR32_T"]
  1546 -> 41 [style=solid label="WCHAR_T"]
  1546 -> 42 [style=solid label="BOOL"]
  1546 -> 43 [style=solid label="SHORT"]
  1546 -> 44 [style=solid label="INT"]
  1546 -> 45 [style=solid label="LONG"]
  1546 -> 46 [style=solid label="SIGNED"]
  1546 -> 47 [style=solid label="UNSIGNED"]
  1546 -> 48 [style=solid label="FLOAT"]
  1546 -> 49 [style=solid label="DOUBLE"]
  1546 -> 50 [style=solid label="VOID"]
  1546 -> 51 [style=solid label="STATIC_ASSERT"]
  1546 -> 52 [style=solid label="STATIC"]
  1546 -> 53 [style=solid label="THREAD_LOCAL"]
  1546 -> 54 [style=solid label="MUTABLE"]
  1546 -> 523 [style=solid label="THROW"]
  1546 -> 55 [style=solid label="TYPENAME"]
  1546 -> 387 [style=solid label="SIZEOF"]
  1546 -> 388 [style=solid label="ALIGNOF"]
  1546 -> 524 [style=solid label="CO_YIELD"]
  1546 -> 389 [style=solid label="'0'"]
  1546 -> 390 [style=solid label="'1'"]
  1546 -> 391 [style=solid label="'2'"]
  1546 -> 392 [style=solid label="'3'"]
  1546 -> 393 [style=solid label="'4'"]
  1546 -> 394 [style=solid label="'5'"]
  1546 -> 395 [style=solid label="'6'"]
  1546 -> 396 [style=solid label="'7'"]
  1546 -> 397 [style=solid label="'8'"]
  1546 -> 398 [style=solid label="'9'"]
  1546 -> 205 [style=solid label="'u'"]
  1546 -> 206 [style=solid label="'U'"]
  1546 -> 207 [style=solid label="'L'"]
  1546 -> 208 [style=solid label="'R'"]
  1546 -> 399 [style=dashed label="additive-expression"]
  1546 -> 56 [style=dashed label="alias-declaration"]
  1546 -> 57 [style=dashed label="alignment-specifier"]
  1546 -> 400 [style=dashed label="and-expression"]
  1546 -> 58 [style=dashed label="asm-declaration"]
  1546 -> 525 [style=dashed label="assignment-expression"]
  1546 -> 60 [style=dashed label="attribute-specifier"]
  1546 -> 679 [style=dashed label="attribute-specifier-seq"]
  1546 -> 401 [style=dashed label="await-expression"]
  1546 -> 402 [style=dashed label="binary-literal"]
  1546 -> 680 [style=dashed label="block-declaration"]
  1546 -> 403 [style=dashed label="boolean-literal"]
  1546 -> 404 [style=dashed label="cast-expression"]
  1546 -> 405 [style=dashed label="character-literal"]
  1546 -> 63 [style=dashed label="class-head"]
  1546 -> 64 [style=dashed label="class-key"]
  1546 -> 65 [style=dashed label="class-name"]
  1546 -> 66 [style=dashed label="class-specifier"]
  1546 -> 406 [style=dashed label="compare-expression"]
  1546 -> 681 [style=dashed label="compound-statement"]
  1546 -> 67 [style=dashed label="concept-name"]
  1546 -> 526 [style=dashed label="conditional-expression"]
  1546 -> 68 [style=dashed label="conversion-function-id"]
  1546 -> 682 [style=dashed label="coroutine-return-statement"]
  1546 -> 69 [style=dashed label="cv-qualifier"]
  1546 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1546 -> 410 [style=dashed label="decimal-literal"]
  1546 -> 70 [style=dashed label="decl-specifier"]
  1546 -> 683 [style=dashed label="decl-specifier-seq"]
  1546 -> 684 [style=dashed label="declaration-statement"]
  1546 -> 76 [style=dashed label="decltype-specifier"]
  1546 -> 78 [style=dashed label="defining-type-specifier"]
  1546 -> 411 [style=dashed label="delete-expression"]
  1546 -> 412 [style=dashed label="digit"]
  1546 -> 413 [style=dashed label="digit-sequence"]
  1546 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1546 -> 80 [style=dashed label="elaborated-type-specifier"]
  1546 -> 414 [style=dashed label="encoding-prefix"]
  1546 -> 82 [style=dashed label="enum-head"]
  1546 -> 83 [style=dashed label="enum-key"]
  1546 -> 84 [style=dashed label="enum-name"]
  1546 -> 85 [style=dashed label="enum-specifier"]
  1546 -> 415 [style=dashed label="equality-expression"]
  1546 -> 416 [style=dashed label="exclusive-or-expression"]
  1546 -> 264 [style=dashed label="explicit-specifier"]
  1546 -> 685 [style=dashed label="expression"]
  1546 -> 686 [style=dashed label="expression-statement"]
  1546 -> 417 [style=dashed label="floating-point-literal"]
  1546 -> 418 [style=dashed label="fold-expression"]
  1546 -> 419 [style=dashed label="fractional-constant"]
  1546 -> 91 [style=dashed label="function-specifier"]
  1546 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1546 -> 421 [style=dashed label="hexadecimal-literal"]
  1546 -> 422 [style=dashed label="hexadecimal-prefix"]
  1546 -> 423 [style=dashed label="id-expression"]
  1546 -> 424 [style=dashed label="inclusive-or-expression"]
  1546 -> 425 [style=dashed label="integer-literal"]
  1546 -> 687 [style=dashed label="iteration-statement"]
  1546 -> 688 [style=dashed label="jump-statement"]
  1546 -> 689 [style=dashed label="labeled-statement"]
  1546 -> 426 [style=dashed label="lambda-expression"]
  1546 -> 427 [style=dashed label="lambda-introducer"]
  1546 -> 428 [style=dashed label="literal"]
  1546 -> 95 [style=dashed label="literal-operator-id"]
  1546 -> 429 [style=dashed label="logical-and-expression"]
  1546 -> 528 [style=dashed label="logical-or-expression"]
  1546 -> 431 [style=dashed label="multiplicative-expression"]
  1546 -> 99 [style=dashed label="namespace-alias"]
  1546 -> 100 [style=dashed label="namespace-alias-definition"]
  1546 -> 102 [style=dashed label="namespace-name"]
  1546 -> 432 [style=dashed label="nested-name-specifier"]
  1546 -> 433 [style=dashed label="new-expression"]
  1546 -> 434 [style=dashed label="noexcept-expression"]
  1546 -> 435 [style=dashed label="nonzero-digit"]
  1546 -> 436 [style=dashed label="octal-literal"]
  1546 -> 107 [style=dashed label="opaque-enum-declaration"]
  1546 -> 108 [style=dashed label="operator-function-id"]
  1546 -> 109 [style=dashed label="placeholder-type-specifier"]
  1546 -> 437 [style=dashed label="pm-expression"]
  1546 -> 438 [style=dashed label="pointer-literal"]
  1546 -> 439 [style=dashed label="postfix-expression"]
  1546 -> 440 [style=dashed label="primary-expression"]
  1546 -> 112 [style=dashed label="qualified-id"]
  1546 -> 441 [style=dashed label="relational-expression"]
  1546 -> 442 [style=dashed label="requires-expression"]
  1546 -> 690 [style=dashed label="selection-statement"]
  1546 -> 443 [style=dashed label="shift-expression"]
  1546 -> 113 [style=dashed label="simple-declaration"]
  1546 -> 114 [style=dashed label="simple-template-id"]
  1546 -> 444 [style=dashed label="simple-type-specifier"]
  1546 -> 1747 [style=dashed label="statement"]
  1546 -> 116 [style=dashed label="static_assert-declaration"]
  1546 -> 117 [style=dashed label="storage-class-specifier"]
  1546 -> 445 [style=dashed label="string-literal"]
  1546 -> 120 [style=dashed label="template-id"]
  1546 -> 215 [style=dashed label="template-name"]
  1546 -> 530 [style=dashed label="throw-expression"]
  1546 -> 693 [style=dashed label="try-block"]
  1546 -> 123 [style=dashed label="type-constraint"]
  1546 -> 124 [style=dashed label="type-name"]
  1546 -> 125 [style=dashed label="type-specifier"]
  1546 -> 126 [style=dashed label="typedef-name"]
  1546 -> 448 [style=dashed label="typename-specifier"]
  1546 -> 449 [style=dashed label="unary-expression"]
  1546 -> 450 [style=dashed label="unary-operator"]
  1546 -> 129 [style=dashed label="unqualified-id"]
  1546 -> 451 [style=dashed label="user-defined-character-literal"]
  1546 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1546 -> 453 [style=dashed label="user-defined-integer-literal"]
  1546 -> 454 [style=dashed label="user-defined-literal"]
  1546 -> 455 [style=dashed label="user-defined-string-literal"]
  1546 -> 130 [style=dashed label="using-declaration"]
  1546 -> 131 [style=dashed label="using-directive"]
  1546 -> 132 [style=dashed label="using-enum-declaration"]
  1546 -> 532 [style=dashed label="yield-expression"]
  1547 [label="State 1547\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l165 condition: attribute-specifier-seq • decl-specifier-seq declarator brace-or-equal-initializer\l965 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list SEMICOLON\l966                   | attribute-specifier-seq • decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l968                   | attribute-specifier-seq • decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1547 -> 162 [style=solid label="IDENTIFIER"]
  1547 -> 4 [style=solid label="ALIGNAS"]
  1547 -> 9 [style=solid label="SCOPE"]
  1547 -> 10 [style=solid label="OPEN_SQUARE"]
  1547 -> 11 [style=solid label="VIRTUAL"]
  1547 -> 12 [style=solid label="CLASS"]
  1547 -> 13 [style=solid label="STRUCT"]
  1547 -> 14 [style=solid label="UNION"]
  1547 -> 18 [style=solid label="CONST"]
  1547 -> 19 [style=solid label="VOLATILE"]
  1547 -> 20 [style=solid label="FRIEND"]
  1547 -> 21 [style=solid label="TYPEDEF"]
  1547 -> 22 [style=solid label="CONSTEXPR"]
  1547 -> 23 [style=solid label="CONSTEVAL"]
  1547 -> 24 [style=solid label="CONSTINIT"]
  1547 -> 258 [style=solid label="INLINE"]
  1547 -> 26 [style=solid label="DECLTYPE"]
  1547 -> 27 [style=solid label="ENUM"]
  1547 -> 259 [style=solid label="EXTERN"]
  1547 -> 29 [style=solid label="EXPLICIT"]
  1547 -> 36 [style=solid label="AUTO"]
  1547 -> 37 [style=solid label="CHAR"]
  1547 -> 38 [style=solid label="CHAR8_T"]
  1547 -> 39 [style=solid label="CHAR16_T"]
  1547 -> 40 [style=solid label="CHAR32_T"]
  1547 -> 41 [style=solid label="WCHAR_T"]
  1547 -> 42 [style=solid label="BOOL"]
  1547 -> 43 [style=solid label="SHORT"]
  1547 -> 44 [style=solid label="INT"]
  1547 -> 45 [style=solid label="LONG"]
  1547 -> 46 [style=solid label="SIGNED"]
  1547 -> 47 [style=solid label="UNSIGNED"]
  1547 -> 48 [style=solid label="FLOAT"]
  1547 -> 49 [style=solid label="DOUBLE"]
  1547 -> 50 [style=solid label="VOID"]
  1547 -> 52 [style=solid label="STATIC"]
  1547 -> 53 [style=solid label="THREAD_LOCAL"]
  1547 -> 54 [style=solid label="MUTABLE"]
  1547 -> 55 [style=solid label="TYPENAME"]
  1547 -> 57 [style=dashed label="alignment-specifier"]
  1547 -> 260 [style=dashed label="attribute-specifier"]
  1547 -> 63 [style=dashed label="class-head"]
  1547 -> 64 [style=dashed label="class-key"]
  1547 -> 65 [style=dashed label="class-name"]
  1547 -> 66 [style=dashed label="class-specifier"]
  1547 -> 67 [style=dashed label="concept-name"]
  1547 -> 69 [style=dashed label="cv-qualifier"]
  1547 -> 70 [style=dashed label="decl-specifier"]
  1547 -> 1748 [style=dashed label="decl-specifier-seq"]
  1547 -> 76 [style=dashed label="decltype-specifier"]
  1547 -> 78 [style=dashed label="defining-type-specifier"]
  1547 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1547 -> 80 [style=dashed label="elaborated-type-specifier"]
  1547 -> 82 [style=dashed label="enum-head"]
  1547 -> 263 [style=dashed label="enum-key"]
  1547 -> 84 [style=dashed label="enum-name"]
  1547 -> 85 [style=dashed label="enum-specifier"]
  1547 -> 264 [style=dashed label="explicit-specifier"]
  1547 -> 91 [style=dashed label="function-specifier"]
  1547 -> 99 [style=dashed label="namespace-alias"]
  1547 -> 102 [style=dashed label="namespace-name"]
  1547 -> 212 [style=dashed label="nested-name-specifier"]
  1547 -> 109 [style=dashed label="placeholder-type-specifier"]
  1547 -> 141 [style=dashed label="simple-template-id"]
  1547 -> 115 [style=dashed label="simple-type-specifier"]
  1547 -> 117 [style=dashed label="storage-class-specifier"]
  1547 -> 215 [style=dashed label="template-name"]
  1547 -> 123 [style=dashed label="type-constraint"]
  1547 -> 124 [style=dashed label="type-name"]
  1547 -> 125 [style=dashed label="type-specifier"]
  1547 -> 126 [style=dashed label="typedef-name"]
  1547 -> 127 [style=dashed label="typename-specifier"]
  1548 [label="State 1548\n\l938 selection-statement: IF OPEN_PAREN condition • CLOSE_PAREN statement\l942                    | IF OPEN_PAREN condition • CLOSE_PAREN statement ELSE statement\l"]
  1548 -> 1749 [style=solid label="CLOSE_PAREN"]
  1549 [label="State 1549\n\l166 condition: decl-specifier-seq • declarator brace-or-equal-initializer\l963 simple-declaration: decl-specifier-seq • SEMICOLON\l964                   | decl-specifier-seq • init-declarator-list SEMICOLON\l967                   | decl-specifier-seq • OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l969                   | decl-specifier-seq • ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1549 -> 147 [style=solid label="IDENTIFIER"]
  1549 -> 277 [style=solid label="SEMICOLON"]
  1549 -> 5 [style=solid label="OPEN_PAREN"]
  1549 -> 6 [style=solid label="ELLIPSIS"]
  1549 -> 278 [style=solid label="AND"]
  1549 -> 9 [style=solid label="SCOPE"]
  1549 -> 279 [style=solid label="OPEN_SQUARE"]
  1549 -> 280 [style=solid label="AND_AND"]
  1549 -> 17 [style=solid label="OPERATOR"]
  1549 -> 134 [style=solid label="DECLTYPE"]
  1549 -> 31 [style=solid label="MULT"]
  1549 -> 35 [style=solid label="COMPL"]
  1549 -> 65 [style=dashed label="class-name"]
  1549 -> 68 [style=dashed label="conversion-function-id"]
  1549 -> 1750 [style=dashed label="declarator"]
  1549 -> 75 [style=dashed label="declarator-id"]
  1549 -> 138 [style=dashed label="decltype-specifier"]
  1549 -> 84 [style=dashed label="enum-name"]
  1549 -> 93 [style=dashed label="id-expression"]
  1549 -> 282 [style=dashed label="init-declarator"]
  1549 -> 283 [style=dashed label="init-declarator-list"]
  1549 -> 95 [style=dashed label="literal-operator-id"]
  1549 -> 99 [style=dashed label="namespace-alias"]
  1549 -> 102 [style=dashed label="namespace-name"]
  1549 -> 148 [style=dashed label="nested-name-specifier"]
  1549 -> 106 [style=dashed label="noptr-declarator"]
  1549 -> 108 [style=dashed label="operator-function-id"]
  1549 -> 110 [style=dashed label="ptr-declarator"]
  1549 -> 111 [style=dashed label="ptr-operator"]
  1549 -> 112 [style=dashed label="qualified-id"]
  1549 -> 284 [style=dashed label="ref-qualifier"]
  1549 -> 114 [style=dashed label="simple-template-id"]
  1549 -> 120 [style=dashed label="template-id"]
  1549 -> 142 [style=dashed label="template-name"]
  1549 -> 143 [style=dashed label="type-name"]
  1549 -> 126 [style=dashed label="typedef-name"]
  1549 -> 129 [style=dashed label="unqualified-id"]
  1550 [label="State 1550\n\l164 condition: expression •\l335 expression: expression • COMMA assignment-expression\l337 expression-statement: expression • SEMICOLON\l"]
  1550 -> 1190 [style=solid label="SEMICOLON"]
  1550 -> 1029 [style=solid label="COMMA"]
  1550 -> "1550R164" [style=solid]
 "1550R164" [label="R164", fillcolor=3, shape=diamond, style=filled]
  1551 [label="State 1551\n\l940 selection-statement: IF OPEN_PAREN init-statement • condition CLOSE_PAREN statement\l944                    | IF OPEN_PAREN init-statement • condition CLOSE_PAREN statement ELSE statement\l"]
  1551 -> 356 [style=solid label="PLUS"]
  1551 -> 357 [style=solid label="MINUS"]
  1551 -> 2 [style=solid label="IDENTIFIER"]
  1551 -> 4 [style=solid label="ALIGNAS"]
  1551 -> 358 [style=solid label="OPEN_PAREN"]
  1551 -> 359 [style=solid label="AND"]
  1551 -> 360 [style=solid label="SCOPE"]
  1551 -> 663 [style=solid label="OPEN_SQUARE"]
  1551 -> 362 [style=solid label="CO_AWAIT"]
  1551 -> 11 [style=solid label="VIRTUAL"]
  1551 -> 363 [style=solid label="ZERO_LB"]
  1551 -> 364 [style=solid label="ZERO_HB"]
  1551 -> 365 [style=solid label="SINGLE_QUOTE"]
  1551 -> 366 [style=solid label="FALSE"]
  1551 -> 367 [style=solid label="TRUE"]
  1551 -> 12 [style=solid label="CLASS"]
  1551 -> 13 [style=solid label="STRUCT"]
  1551 -> 14 [style=solid label="UNION"]
  1551 -> 368 [style=solid label="NOEXCEPT"]
  1551 -> 17 [style=solid label="OPERATOR"]
  1551 -> 18 [style=solid label="CONST"]
  1551 -> 19 [style=solid label="VOLATILE"]
  1551 -> 20 [style=solid label="FRIEND"]
  1551 -> 21 [style=solid label="TYPEDEF"]
  1551 -> 22 [style=solid label="CONSTEXPR"]
  1551 -> 23 [style=solid label="CONSTEVAL"]
  1551 -> 24 [style=solid label="CONSTINIT"]
  1551 -> 258 [style=solid label="INLINE"]
  1551 -> 26 [style=solid label="DECLTYPE"]
  1551 -> 369 [style=solid label="DELETE"]
  1551 -> 370 [style=solid label="DOT"]
  1551 -> 27 [style=solid label="ENUM"]
  1551 -> 184 [style=solid label="UNICODE_8"]
  1551 -> 259 [style=solid label="EXTERN"]
  1551 -> 29 [style=solid label="EXPLICIT"]
  1551 -> 371 [style=solid label="MULT"]
  1551 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1551 -> 372 [style=solid label="ZERO_LX"]
  1551 -> 373 [style=solid label="ZERO_HX"]
  1551 -> 374 [style=solid label="REQUIRES"]
  1551 -> 375 [style=solid label="NEW"]
  1551 -> 376 [style=solid label="COMPL"]
  1551 -> 377 [style=solid label="NOT"]
  1551 -> 378 [style=solid label="PLUS_PLUS"]
  1551 -> 379 [style=solid label="MINUS_MINUS"]
  1551 -> 380 [style=solid label="THIS"]
  1551 -> 36 [style=solid label="AUTO"]
  1551 -> 381 [style=solid label="NULLPTR"]
  1551 -> 382 [style=solid label="DYNAMIC_CAST"]
  1551 -> 383 [style=solid label="STATIC_CAST"]
  1551 -> 384 [style=solid label="REINTERPRET_CAST"]
  1551 -> 385 [style=solid label="CONST_CAST"]
  1551 -> 386 [style=solid label="TYPEID"]
  1551 -> 37 [style=solid label="CHAR"]
  1551 -> 38 [style=solid label="CHAR8_T"]
  1551 -> 39 [style=solid label="CHAR16_T"]
  1551 -> 40 [style=solid label="CHAR32_T"]
  1551 -> 41 [style=solid label="WCHAR_T"]
  1551 -> 42 [style=solid label="BOOL"]
  1551 -> 43 [style=solid label="SHORT"]
  1551 -> 44 [style=solid label="INT"]
  1551 -> 45 [style=solid label="LONG"]
  1551 -> 46 [style=solid label="SIGNED"]
  1551 -> 47 [style=solid label="UNSIGNED"]
  1551 -> 48 [style=solid label="FLOAT"]
  1551 -> 49 [style=solid label="DOUBLE"]
  1551 -> 50 [style=solid label="VOID"]
  1551 -> 52 [style=solid label="STATIC"]
  1551 -> 53 [style=solid label="THREAD_LOCAL"]
  1551 -> 54 [style=solid label="MUTABLE"]
  1551 -> 523 [style=solid label="THROW"]
  1551 -> 55 [style=solid label="TYPENAME"]
  1551 -> 387 [style=solid label="SIZEOF"]
  1551 -> 388 [style=solid label="ALIGNOF"]
  1551 -> 524 [style=solid label="CO_YIELD"]
  1551 -> 389 [style=solid label="'0'"]
  1551 -> 390 [style=solid label="'1'"]
  1551 -> 391 [style=solid label="'2'"]
  1551 -> 392 [style=solid label="'3'"]
  1551 -> 393 [style=solid label="'4'"]
  1551 -> 394 [style=solid label="'5'"]
  1551 -> 395 [style=solid label="'6'"]
  1551 -> 396 [style=solid label="'7'"]
  1551 -> 397 [style=solid label="'8'"]
  1551 -> 398 [style=solid label="'9'"]
  1551 -> 205 [style=solid label="'u'"]
  1551 -> 206 [style=solid label="'U'"]
  1551 -> 207 [style=solid label="'L'"]
  1551 -> 208 [style=solid label="'R'"]
  1551 -> 399 [style=dashed label="additive-expression"]
  1551 -> 57 [style=dashed label="alignment-specifier"]
  1551 -> 400 [style=dashed label="and-expression"]
  1551 -> 525 [style=dashed label="assignment-expression"]
  1551 -> 60 [style=dashed label="attribute-specifier"]
  1551 -> 1531 [style=dashed label="attribute-specifier-seq"]
  1551 -> 401 [style=dashed label="await-expression"]
  1551 -> 402 [style=dashed label="binary-literal"]
  1551 -> 403 [style=dashed label="boolean-literal"]
  1551 -> 404 [style=dashed label="cast-expression"]
  1551 -> 405 [style=dashed label="character-literal"]
  1551 -> 63 [style=dashed label="class-head"]
  1551 -> 64 [style=dashed label="class-key"]
  1551 -> 65 [style=dashed label="class-name"]
  1551 -> 66 [style=dashed label="class-specifier"]
  1551 -> 406 [style=dashed label="compare-expression"]
  1551 -> 67 [style=dashed label="concept-name"]
  1551 -> 1751 [style=dashed label="condition"]
  1551 -> 526 [style=dashed label="conditional-expression"]
  1551 -> 68 [style=dashed label="conversion-function-id"]
  1551 -> 69 [style=dashed label="cv-qualifier"]
  1551 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1551 -> 410 [style=dashed label="decimal-literal"]
  1551 -> 70 [style=dashed label="decl-specifier"]
  1551 -> 1533 [style=dashed label="decl-specifier-seq"]
  1551 -> 76 [style=dashed label="decltype-specifier"]
  1551 -> 78 [style=dashed label="defining-type-specifier"]
  1551 -> 411 [style=dashed label="delete-expression"]
  1551 -> 412 [style=dashed label="digit"]
  1551 -> 413 [style=dashed label="digit-sequence"]
  1551 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1551 -> 80 [style=dashed label="elaborated-type-specifier"]
  1551 -> 414 [style=dashed label="encoding-prefix"]
  1551 -> 82 [style=dashed label="enum-head"]
  1551 -> 263 [style=dashed label="enum-key"]
  1551 -> 84 [style=dashed label="enum-name"]
  1551 -> 85 [style=dashed label="enum-specifier"]
  1551 -> 415 [style=dashed label="equality-expression"]
  1551 -> 416 [style=dashed label="exclusive-or-expression"]
  1551 -> 264 [style=dashed label="explicit-specifier"]
  1551 -> 1534 [style=dashed label="expression"]
  1551 -> 417 [style=dashed label="floating-point-literal"]
  1551 -> 418 [style=dashed label="fold-expression"]
  1551 -> 419 [style=dashed label="fractional-constant"]
  1551 -> 91 [style=dashed label="function-specifier"]
  1551 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1551 -> 421 [style=dashed label="hexadecimal-literal"]
  1551 -> 422 [style=dashed label="hexadecimal-prefix"]
  1551 -> 423 [style=dashed label="id-expression"]
  1551 -> 424 [style=dashed label="inclusive-or-expression"]
  1551 -> 425 [style=dashed label="integer-literal"]
  1551 -> 426 [style=dashed label="lambda-expression"]
  1551 -> 427 [style=dashed label="lambda-introducer"]
  1551 -> 428 [style=dashed label="literal"]
  1551 -> 95 [style=dashed label="literal-operator-id"]
  1551 -> 429 [style=dashed label="logical-and-expression"]
  1551 -> 528 [style=dashed label="logical-or-expression"]
  1551 -> 431 [style=dashed label="multiplicative-expression"]
  1551 -> 99 [style=dashed label="namespace-alias"]
  1551 -> 102 [style=dashed label="namespace-name"]
  1551 -> 432 [style=dashed label="nested-name-specifier"]
  1551 -> 433 [style=dashed label="new-expression"]
  1551 -> 434 [style=dashed label="noexcept-expression"]
  1551 -> 435 [style=dashed label="nonzero-digit"]
  1551 -> 436 [style=dashed label="octal-literal"]
  1551 -> 108 [style=dashed label="operator-function-id"]
  1551 -> 109 [style=dashed label="placeholder-type-specifier"]
  1551 -> 437 [style=dashed label="pm-expression"]
  1551 -> 438 [style=dashed label="pointer-literal"]
  1551 -> 439 [style=dashed label="postfix-expression"]
  1551 -> 440 [style=dashed label="primary-expression"]
  1551 -> 112 [style=dashed label="qualified-id"]
  1551 -> 441 [style=dashed label="relational-expression"]
  1551 -> 442 [style=dashed label="requires-expression"]
  1551 -> 443 [style=dashed label="shift-expression"]
  1551 -> 114 [style=dashed label="simple-template-id"]
  1551 -> 444 [style=dashed label="simple-type-specifier"]
  1551 -> 117 [style=dashed label="storage-class-specifier"]
  1551 -> 445 [style=dashed label="string-literal"]
  1551 -> 120 [style=dashed label="template-id"]
  1551 -> 215 [style=dashed label="template-name"]
  1551 -> 530 [style=dashed label="throw-expression"]
  1551 -> 123 [style=dashed label="type-constraint"]
  1551 -> 124 [style=dashed label="type-name"]
  1551 -> 125 [style=dashed label="type-specifier"]
  1551 -> 126 [style=dashed label="typedef-name"]
  1551 -> 448 [style=dashed label="typename-specifier"]
  1551 -> 449 [style=dashed label="unary-expression"]
  1551 -> 450 [style=dashed label="unary-operator"]
  1551 -> 129 [style=dashed label="unqualified-id"]
  1551 -> 451 [style=dashed label="user-defined-character-literal"]
  1551 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1551 -> 453 [style=dashed label="user-defined-integer-literal"]
  1551 -> 454 [style=dashed label="user-defined-literal"]
  1551 -> 455 [style=dashed label="user-defined-string-literal"]
  1551 -> 532 [style=dashed label="yield-expression"]
  1552 [label="State 1552\n\l939 selection-statement: IF CONSTEXPR OPEN_PAREN • condition CLOSE_PAREN statement\l941                    | IF CONSTEXPR OPEN_PAREN • init-statement condition CLOSE_PAREN statement\l943                    | IF CONSTEXPR OPEN_PAREN • condition CLOSE_PAREN statement ELSE statement\l945                    | IF CONSTEXPR OPEN_PAREN • init-statement condition CLOSE_PAREN statement ELSE statement\l"]
  1552 -> 356 [style=solid label="PLUS"]
  1552 -> 357 [style=solid label="MINUS"]
  1552 -> 1536 [style=solid label="USING"]
  1552 -> 2 [style=solid label="IDENTIFIER"]
  1552 -> 662 [style=solid label="SEMICOLON"]
  1552 -> 4 [style=solid label="ALIGNAS"]
  1552 -> 358 [style=solid label="OPEN_PAREN"]
  1552 -> 359 [style=solid label="AND"]
  1552 -> 360 [style=solid label="SCOPE"]
  1552 -> 663 [style=solid label="OPEN_SQUARE"]
  1552 -> 362 [style=solid label="CO_AWAIT"]
  1552 -> 11 [style=solid label="VIRTUAL"]
  1552 -> 363 [style=solid label="ZERO_LB"]
  1552 -> 364 [style=solid label="ZERO_HB"]
  1552 -> 365 [style=solid label="SINGLE_QUOTE"]
  1552 -> 366 [style=solid label="FALSE"]
  1552 -> 367 [style=solid label="TRUE"]
  1552 -> 12 [style=solid label="CLASS"]
  1552 -> 13 [style=solid label="STRUCT"]
  1552 -> 14 [style=solid label="UNION"]
  1552 -> 368 [style=solid label="NOEXCEPT"]
  1552 -> 17 [style=solid label="OPERATOR"]
  1552 -> 18 [style=solid label="CONST"]
  1552 -> 19 [style=solid label="VOLATILE"]
  1552 -> 20 [style=solid label="FRIEND"]
  1552 -> 21 [style=solid label="TYPEDEF"]
  1552 -> 22 [style=solid label="CONSTEXPR"]
  1552 -> 23 [style=solid label="CONSTEVAL"]
  1552 -> 24 [style=solid label="CONSTINIT"]
  1552 -> 258 [style=solid label="INLINE"]
  1552 -> 26 [style=solid label="DECLTYPE"]
  1552 -> 369 [style=solid label="DELETE"]
  1552 -> 370 [style=solid label="DOT"]
  1552 -> 27 [style=solid label="ENUM"]
  1552 -> 184 [style=solid label="UNICODE_8"]
  1552 -> 259 [style=solid label="EXTERN"]
  1552 -> 29 [style=solid label="EXPLICIT"]
  1552 -> 371 [style=solid label="MULT"]
  1552 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1552 -> 372 [style=solid label="ZERO_LX"]
  1552 -> 373 [style=solid label="ZERO_HX"]
  1552 -> 374 [style=solid label="REQUIRES"]
  1552 -> 375 [style=solid label="NEW"]
  1552 -> 376 [style=solid label="COMPL"]
  1552 -> 377 [style=solid label="NOT"]
  1552 -> 378 [style=solid label="PLUS_PLUS"]
  1552 -> 379 [style=solid label="MINUS_MINUS"]
  1552 -> 380 [style=solid label="THIS"]
  1552 -> 36 [style=solid label="AUTO"]
  1552 -> 381 [style=solid label="NULLPTR"]
  1552 -> 382 [style=solid label="DYNAMIC_CAST"]
  1552 -> 383 [style=solid label="STATIC_CAST"]
  1552 -> 384 [style=solid label="REINTERPRET_CAST"]
  1552 -> 385 [style=solid label="CONST_CAST"]
  1552 -> 386 [style=solid label="TYPEID"]
  1552 -> 37 [style=solid label="CHAR"]
  1552 -> 38 [style=solid label="CHAR8_T"]
  1552 -> 39 [style=solid label="CHAR16_T"]
  1552 -> 40 [style=solid label="CHAR32_T"]
  1552 -> 41 [style=solid label="WCHAR_T"]
  1552 -> 42 [style=solid label="BOOL"]
  1552 -> 43 [style=solid label="SHORT"]
  1552 -> 44 [style=solid label="INT"]
  1552 -> 45 [style=solid label="LONG"]
  1552 -> 46 [style=solid label="SIGNED"]
  1552 -> 47 [style=solid label="UNSIGNED"]
  1552 -> 48 [style=solid label="FLOAT"]
  1552 -> 49 [style=solid label="DOUBLE"]
  1552 -> 50 [style=solid label="VOID"]
  1552 -> 52 [style=solid label="STATIC"]
  1552 -> 53 [style=solid label="THREAD_LOCAL"]
  1552 -> 54 [style=solid label="MUTABLE"]
  1552 -> 523 [style=solid label="THROW"]
  1552 -> 55 [style=solid label="TYPENAME"]
  1552 -> 387 [style=solid label="SIZEOF"]
  1552 -> 388 [style=solid label="ALIGNOF"]
  1552 -> 524 [style=solid label="CO_YIELD"]
  1552 -> 389 [style=solid label="'0'"]
  1552 -> 390 [style=solid label="'1'"]
  1552 -> 391 [style=solid label="'2'"]
  1552 -> 392 [style=solid label="'3'"]
  1552 -> 393 [style=solid label="'4'"]
  1552 -> 394 [style=solid label="'5'"]
  1552 -> 395 [style=solid label="'6'"]
  1552 -> 396 [style=solid label="'7'"]
  1552 -> 397 [style=solid label="'8'"]
  1552 -> 398 [style=solid label="'9'"]
  1552 -> 205 [style=solid label="'u'"]
  1552 -> 206 [style=solid label="'U'"]
  1552 -> 207 [style=solid label="'L'"]
  1552 -> 208 [style=solid label="'R'"]
  1552 -> 399 [style=dashed label="additive-expression"]
  1552 -> 1537 [style=dashed label="alias-declaration"]
  1552 -> 57 [style=dashed label="alignment-specifier"]
  1552 -> 400 [style=dashed label="and-expression"]
  1552 -> 525 [style=dashed label="assignment-expression"]
  1552 -> 60 [style=dashed label="attribute-specifier"]
  1552 -> 1547 [style=dashed label="attribute-specifier-seq"]
  1552 -> 401 [style=dashed label="await-expression"]
  1552 -> 402 [style=dashed label="binary-literal"]
  1552 -> 403 [style=dashed label="boolean-literal"]
  1552 -> 404 [style=dashed label="cast-expression"]
  1552 -> 405 [style=dashed label="character-literal"]
  1552 -> 63 [style=dashed label="class-head"]
  1552 -> 64 [style=dashed label="class-key"]
  1552 -> 65 [style=dashed label="class-name"]
  1552 -> 66 [style=dashed label="class-specifier"]
  1552 -> 406 [style=dashed label="compare-expression"]
  1552 -> 67 [style=dashed label="concept-name"]
  1552 -> 1752 [style=dashed label="condition"]
  1552 -> 526 [style=dashed label="conditional-expression"]
  1552 -> 68 [style=dashed label="conversion-function-id"]
  1552 -> 69 [style=dashed label="cv-qualifier"]
  1552 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1552 -> 410 [style=dashed label="decimal-literal"]
  1552 -> 70 [style=dashed label="decl-specifier"]
  1552 -> 1549 [style=dashed label="decl-specifier-seq"]
  1552 -> 76 [style=dashed label="decltype-specifier"]
  1552 -> 78 [style=dashed label="defining-type-specifier"]
  1552 -> 411 [style=dashed label="delete-expression"]
  1552 -> 412 [style=dashed label="digit"]
  1552 -> 413 [style=dashed label="digit-sequence"]
  1552 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1552 -> 80 [style=dashed label="elaborated-type-specifier"]
  1552 -> 414 [style=dashed label="encoding-prefix"]
  1552 -> 82 [style=dashed label="enum-head"]
  1552 -> 263 [style=dashed label="enum-key"]
  1552 -> 84 [style=dashed label="enum-name"]
  1552 -> 85 [style=dashed label="enum-specifier"]
  1552 -> 415 [style=dashed label="equality-expression"]
  1552 -> 416 [style=dashed label="exclusive-or-expression"]
  1552 -> 264 [style=dashed label="explicit-specifier"]
  1552 -> 1550 [style=dashed label="expression"]
  1552 -> 1540 [style=dashed label="expression-statement"]
  1552 -> 417 [style=dashed label="floating-point-literal"]
  1552 -> 418 [style=dashed label="fold-expression"]
  1552 -> 419 [style=dashed label="fractional-constant"]
  1552 -> 91 [style=dashed label="function-specifier"]
  1552 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1552 -> 421 [style=dashed label="hexadecimal-literal"]
  1552 -> 422 [style=dashed label="hexadecimal-prefix"]
  1552 -> 423 [style=dashed label="id-expression"]
  1552 -> 424 [style=dashed label="inclusive-or-expression"]
  1552 -> 1753 [style=dashed label="init-statement"]
  1552 -> 425 [style=dashed label="integer-literal"]
  1552 -> 426 [style=dashed label="lambda-expression"]
  1552 -> 427 [style=dashed label="lambda-introducer"]
  1552 -> 428 [style=dashed label="literal"]
  1552 -> 95 [style=dashed label="literal-operator-id"]
  1552 -> 429 [style=dashed label="logical-and-expression"]
  1552 -> 528 [style=dashed label="logical-or-expression"]
  1552 -> 431 [style=dashed label="multiplicative-expression"]
  1552 -> 99 [style=dashed label="namespace-alias"]
  1552 -> 102 [style=dashed label="namespace-name"]
  1552 -> 432 [style=dashed label="nested-name-specifier"]
  1552 -> 433 [style=dashed label="new-expression"]
  1552 -> 434 [style=dashed label="noexcept-expression"]
  1552 -> 435 [style=dashed label="nonzero-digit"]
  1552 -> 436 [style=dashed label="octal-literal"]
  1552 -> 108 [style=dashed label="operator-function-id"]
  1552 -> 109 [style=dashed label="placeholder-type-specifier"]
  1552 -> 437 [style=dashed label="pm-expression"]
  1552 -> 438 [style=dashed label="pointer-literal"]
  1552 -> 439 [style=dashed label="postfix-expression"]
  1552 -> 440 [style=dashed label="primary-expression"]
  1552 -> 112 [style=dashed label="qualified-id"]
  1552 -> 441 [style=dashed label="relational-expression"]
  1552 -> 442 [style=dashed label="requires-expression"]
  1552 -> 443 [style=dashed label="shift-expression"]
  1552 -> 1543 [style=dashed label="simple-declaration"]
  1552 -> 114 [style=dashed label="simple-template-id"]
  1552 -> 444 [style=dashed label="simple-type-specifier"]
  1552 -> 117 [style=dashed label="storage-class-specifier"]
  1552 -> 445 [style=dashed label="string-literal"]
  1552 -> 120 [style=dashed label="template-id"]
  1552 -> 215 [style=dashed label="template-name"]
  1552 -> 530 [style=dashed label="throw-expression"]
  1552 -> 123 [style=dashed label="type-constraint"]
  1552 -> 124 [style=dashed label="type-name"]
  1552 -> 125 [style=dashed label="type-specifier"]
  1552 -> 126 [style=dashed label="typedef-name"]
  1552 -> 448 [style=dashed label="typename-specifier"]
  1552 -> 449 [style=dashed label="unary-expression"]
  1552 -> 450 [style=dashed label="unary-operator"]
  1552 -> 129 [style=dashed label="unqualified-id"]
  1552 -> 451 [style=dashed label="user-defined-character-literal"]
  1552 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1552 -> 453 [style=dashed label="user-defined-integer-literal"]
  1552 -> 454 [style=dashed label="user-defined-literal"]
  1552 -> 455 [style=dashed label="user-defined-string-literal"]
  1552 -> 532 [style=dashed label="yield-expression"]
  1553 [label="State 1553\n\l946 selection-statement: IF CONSTEVAL compound-statement •\l948                    | IF CONSTEVAL compound-statement • ELSE statement\l"]
  1553 -> 1754 [style=solid label="ELSE"]
  1553 -> "1553R946d" [label="[ELSE]", style=solid]
 "1553R946d" [label="R946", fillcolor=5, shape=diamond, style=filled]
  1553 -> "1553R946" [style=solid]
 "1553R946" [label="R946", fillcolor=3, shape=diamond, style=filled]
  1554 [label="State 1554\n\l947 selection-statement: IF NOT CONSTEVAL • compound-statement\l949                    | IF NOT CONSTEVAL • compound-statement ELSE statement\l"]
  1554 -> 289 [style=solid label="OPEN_BRACE"]
  1554 -> 1755 [style=dashed label="compound-statement"]
  1555 [label="State 1555\n\l950 selection-statement: SWITCH OPEN_PAREN condition • CLOSE_PAREN statement\l"]
  1555 -> 1756 [style=solid label="CLOSE_PAREN"]
  1556 [label="State 1556\n\l951 selection-statement: SWITCH OPEN_PAREN init-statement • condition CLOSE_PAREN statement\l"]
  1556 -> 356 [style=solid label="PLUS"]
  1556 -> 357 [style=solid label="MINUS"]
  1556 -> 2 [style=solid label="IDENTIFIER"]
  1556 -> 4 [style=solid label="ALIGNAS"]
  1556 -> 358 [style=solid label="OPEN_PAREN"]
  1556 -> 359 [style=solid label="AND"]
  1556 -> 360 [style=solid label="SCOPE"]
  1556 -> 663 [style=solid label="OPEN_SQUARE"]
  1556 -> 362 [style=solid label="CO_AWAIT"]
  1556 -> 11 [style=solid label="VIRTUAL"]
  1556 -> 363 [style=solid label="ZERO_LB"]
  1556 -> 364 [style=solid label="ZERO_HB"]
  1556 -> 365 [style=solid label="SINGLE_QUOTE"]
  1556 -> 366 [style=solid label="FALSE"]
  1556 -> 367 [style=solid label="TRUE"]
  1556 -> 12 [style=solid label="CLASS"]
  1556 -> 13 [style=solid label="STRUCT"]
  1556 -> 14 [style=solid label="UNION"]
  1556 -> 368 [style=solid label="NOEXCEPT"]
  1556 -> 17 [style=solid label="OPERATOR"]
  1556 -> 18 [style=solid label="CONST"]
  1556 -> 19 [style=solid label="VOLATILE"]
  1556 -> 20 [style=solid label="FRIEND"]
  1556 -> 21 [style=solid label="TYPEDEF"]
  1556 -> 22 [style=solid label="CONSTEXPR"]
  1556 -> 23 [style=solid label="CONSTEVAL"]
  1556 -> 24 [style=solid label="CONSTINIT"]
  1556 -> 258 [style=solid label="INLINE"]
  1556 -> 26 [style=solid label="DECLTYPE"]
  1556 -> 369 [style=solid label="DELETE"]
  1556 -> 370 [style=solid label="DOT"]
  1556 -> 27 [style=solid label="ENUM"]
  1556 -> 184 [style=solid label="UNICODE_8"]
  1556 -> 259 [style=solid label="EXTERN"]
  1556 -> 29 [style=solid label="EXPLICIT"]
  1556 -> 371 [style=solid label="MULT"]
  1556 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1556 -> 372 [style=solid label="ZERO_LX"]
  1556 -> 373 [style=solid label="ZERO_HX"]
  1556 -> 374 [style=solid label="REQUIRES"]
  1556 -> 375 [style=solid label="NEW"]
  1556 -> 376 [style=solid label="COMPL"]
  1556 -> 377 [style=solid label="NOT"]
  1556 -> 378 [style=solid label="PLUS_PLUS"]
  1556 -> 379 [style=solid label="MINUS_MINUS"]
  1556 -> 380 [style=solid label="THIS"]
  1556 -> 36 [style=solid label="AUTO"]
  1556 -> 381 [style=solid label="NULLPTR"]
  1556 -> 382 [style=solid label="DYNAMIC_CAST"]
  1556 -> 383 [style=solid label="STATIC_CAST"]
  1556 -> 384 [style=solid label="REINTERPRET_CAST"]
  1556 -> 385 [style=solid label="CONST_CAST"]
  1556 -> 386 [style=solid label="TYPEID"]
  1556 -> 37 [style=solid label="CHAR"]
  1556 -> 38 [style=solid label="CHAR8_T"]
  1556 -> 39 [style=solid label="CHAR16_T"]
  1556 -> 40 [style=solid label="CHAR32_T"]
  1556 -> 41 [style=solid label="WCHAR_T"]
  1556 -> 42 [style=solid label="BOOL"]
  1556 -> 43 [style=solid label="SHORT"]
  1556 -> 44 [style=solid label="INT"]
  1556 -> 45 [style=solid label="LONG"]
  1556 -> 46 [style=solid label="SIGNED"]
  1556 -> 47 [style=solid label="UNSIGNED"]
  1556 -> 48 [style=solid label="FLOAT"]
  1556 -> 49 [style=solid label="DOUBLE"]
  1556 -> 50 [style=solid label="VOID"]
  1556 -> 52 [style=solid label="STATIC"]
  1556 -> 53 [style=solid label="THREAD_LOCAL"]
  1556 -> 54 [style=solid label="MUTABLE"]
  1556 -> 523 [style=solid label="THROW"]
  1556 -> 55 [style=solid label="TYPENAME"]
  1556 -> 387 [style=solid label="SIZEOF"]
  1556 -> 388 [style=solid label="ALIGNOF"]
  1556 -> 524 [style=solid label="CO_YIELD"]
  1556 -> 389 [style=solid label="'0'"]
  1556 -> 390 [style=solid label="'1'"]
  1556 -> 391 [style=solid label="'2'"]
  1556 -> 392 [style=solid label="'3'"]
  1556 -> 393 [style=solid label="'4'"]
  1556 -> 394 [style=solid label="'5'"]
  1556 -> 395 [style=solid label="'6'"]
  1556 -> 396 [style=solid label="'7'"]
  1556 -> 397 [style=solid label="'8'"]
  1556 -> 398 [style=solid label="'9'"]
  1556 -> 205 [style=solid label="'u'"]
  1556 -> 206 [style=solid label="'U'"]
  1556 -> 207 [style=solid label="'L'"]
  1556 -> 208 [style=solid label="'R'"]
  1556 -> 399 [style=dashed label="additive-expression"]
  1556 -> 57 [style=dashed label="alignment-specifier"]
  1556 -> 400 [style=dashed label="and-expression"]
  1556 -> 525 [style=dashed label="assignment-expression"]
  1556 -> 60 [style=dashed label="attribute-specifier"]
  1556 -> 1531 [style=dashed label="attribute-specifier-seq"]
  1556 -> 401 [style=dashed label="await-expression"]
  1556 -> 402 [style=dashed label="binary-literal"]
  1556 -> 403 [style=dashed label="boolean-literal"]
  1556 -> 404 [style=dashed label="cast-expression"]
  1556 -> 405 [style=dashed label="character-literal"]
  1556 -> 63 [style=dashed label="class-head"]
  1556 -> 64 [style=dashed label="class-key"]
  1556 -> 65 [style=dashed label="class-name"]
  1556 -> 66 [style=dashed label="class-specifier"]
  1556 -> 406 [style=dashed label="compare-expression"]
  1556 -> 67 [style=dashed label="concept-name"]
  1556 -> 1757 [style=dashed label="condition"]
  1556 -> 526 [style=dashed label="conditional-expression"]
  1556 -> 68 [style=dashed label="conversion-function-id"]
  1556 -> 69 [style=dashed label="cv-qualifier"]
  1556 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1556 -> 410 [style=dashed label="decimal-literal"]
  1556 -> 70 [style=dashed label="decl-specifier"]
  1556 -> 1533 [style=dashed label="decl-specifier-seq"]
  1556 -> 76 [style=dashed label="decltype-specifier"]
  1556 -> 78 [style=dashed label="defining-type-specifier"]
  1556 -> 411 [style=dashed label="delete-expression"]
  1556 -> 412 [style=dashed label="digit"]
  1556 -> 413 [style=dashed label="digit-sequence"]
  1556 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1556 -> 80 [style=dashed label="elaborated-type-specifier"]
  1556 -> 414 [style=dashed label="encoding-prefix"]
  1556 -> 82 [style=dashed label="enum-head"]
  1556 -> 263 [style=dashed label="enum-key"]
  1556 -> 84 [style=dashed label="enum-name"]
  1556 -> 85 [style=dashed label="enum-specifier"]
  1556 -> 415 [style=dashed label="equality-expression"]
  1556 -> 416 [style=dashed label="exclusive-or-expression"]
  1556 -> 264 [style=dashed label="explicit-specifier"]
  1556 -> 1534 [style=dashed label="expression"]
  1556 -> 417 [style=dashed label="floating-point-literal"]
  1556 -> 418 [style=dashed label="fold-expression"]
  1556 -> 419 [style=dashed label="fractional-constant"]
  1556 -> 91 [style=dashed label="function-specifier"]
  1556 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1556 -> 421 [style=dashed label="hexadecimal-literal"]
  1556 -> 422 [style=dashed label="hexadecimal-prefix"]
  1556 -> 423 [style=dashed label="id-expression"]
  1556 -> 424 [style=dashed label="inclusive-or-expression"]
  1556 -> 425 [style=dashed label="integer-literal"]
  1556 -> 426 [style=dashed label="lambda-expression"]
  1556 -> 427 [style=dashed label="lambda-introducer"]
  1556 -> 428 [style=dashed label="literal"]
  1556 -> 95 [style=dashed label="literal-operator-id"]
  1556 -> 429 [style=dashed label="logical-and-expression"]
  1556 -> 528 [style=dashed label="logical-or-expression"]
  1556 -> 431 [style=dashed label="multiplicative-expression"]
  1556 -> 99 [style=dashed label="namespace-alias"]
  1556 -> 102 [style=dashed label="namespace-name"]
  1556 -> 432 [style=dashed label="nested-name-specifier"]
  1556 -> 433 [style=dashed label="new-expression"]
  1556 -> 434 [style=dashed label="noexcept-expression"]
  1556 -> 435 [style=dashed label="nonzero-digit"]
  1556 -> 436 [style=dashed label="octal-literal"]
  1556 -> 108 [style=dashed label="operator-function-id"]
  1556 -> 109 [style=dashed label="placeholder-type-specifier"]
  1556 -> 437 [style=dashed label="pm-expression"]
  1556 -> 438 [style=dashed label="pointer-literal"]
  1556 -> 439 [style=dashed label="postfix-expression"]
  1556 -> 440 [style=dashed label="primary-expression"]
  1556 -> 112 [style=dashed label="qualified-id"]
  1556 -> 441 [style=dashed label="relational-expression"]
  1556 -> 442 [style=dashed label="requires-expression"]
  1556 -> 443 [style=dashed label="shift-expression"]
  1556 -> 114 [style=dashed label="simple-template-id"]
  1556 -> 444 [style=dashed label="simple-type-specifier"]
  1556 -> 117 [style=dashed label="storage-class-specifier"]
  1556 -> 445 [style=dashed label="string-literal"]
  1556 -> 120 [style=dashed label="template-id"]
  1556 -> 215 [style=dashed label="template-name"]
  1556 -> 530 [style=dashed label="throw-expression"]
  1556 -> 123 [style=dashed label="type-constraint"]
  1556 -> 124 [style=dashed label="type-name"]
  1556 -> 125 [style=dashed label="type-specifier"]
  1556 -> 126 [style=dashed label="typedef-name"]
  1556 -> 448 [style=dashed label="typename-specifier"]
  1556 -> 449 [style=dashed label="unary-expression"]
  1556 -> 450 [style=dashed label="unary-operator"]
  1556 -> 129 [style=dashed label="unqualified-id"]
  1556 -> 451 [style=dashed label="user-defined-character-literal"]
  1556 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1556 -> 453 [style=dashed label="user-defined-integer-literal"]
  1556 -> 454 [style=dashed label="user-defined-literal"]
  1556 -> 455 [style=dashed label="user-defined-string-literal"]
  1556 -> 532 [style=dashed label="yield-expression"]
  1557 [label="State 1557\n\l519 labeled-statement: attribute-specifier-seq IDENTIFIER COLON • statement\l"]
  1557 -> 356 [style=solid label="PLUS"]
  1557 -> 357 [style=solid label="MINUS"]
  1557 -> 1 [style=solid label="USING"]
  1557 -> 661 [style=solid label="IDENTIFIER"]
  1557 -> 662 [style=solid label="SEMICOLON"]
  1557 -> 4 [style=solid label="ALIGNAS"]
  1557 -> 358 [style=solid label="OPEN_PAREN"]
  1557 -> 359 [style=solid label="AND"]
  1557 -> 8 [style=solid label="ASM"]
  1557 -> 360 [style=solid label="SCOPE"]
  1557 -> 663 [style=solid label="OPEN_SQUARE"]
  1557 -> 362 [style=solid label="CO_AWAIT"]
  1557 -> 289 [style=solid label="OPEN_BRACE"]
  1557 -> 11 [style=solid label="VIRTUAL"]
  1557 -> 363 [style=solid label="ZERO_LB"]
  1557 -> 364 [style=solid label="ZERO_HB"]
  1557 -> 365 [style=solid label="SINGLE_QUOTE"]
  1557 -> 366 [style=solid label="FALSE"]
  1557 -> 367 [style=solid label="TRUE"]
  1557 -> 12 [style=solid label="CLASS"]
  1557 -> 13 [style=solid label="STRUCT"]
  1557 -> 14 [style=solid label="UNION"]
  1557 -> 368 [style=solid label="NOEXCEPT"]
  1557 -> 17 [style=solid label="OPERATOR"]
  1557 -> 665 [style=solid label="CO_RETURN"]
  1557 -> 18 [style=solid label="CONST"]
  1557 -> 19 [style=solid label="VOLATILE"]
  1557 -> 20 [style=solid label="FRIEND"]
  1557 -> 21 [style=solid label="TYPEDEF"]
  1557 -> 22 [style=solid label="CONSTEXPR"]
  1557 -> 23 [style=solid label="CONSTEVAL"]
  1557 -> 24 [style=solid label="CONSTINIT"]
  1557 -> 258 [style=solid label="INLINE"]
  1557 -> 26 [style=solid label="DECLTYPE"]
  1557 -> 369 [style=solid label="DELETE"]
  1557 -> 370 [style=solid label="DOT"]
  1557 -> 27 [style=solid label="ENUM"]
  1557 -> 184 [style=solid label="UNICODE_8"]
  1557 -> 259 [style=solid label="EXTERN"]
  1557 -> 29 [style=solid label="EXPLICIT"]
  1557 -> 371 [style=solid label="MULT"]
  1557 -> 666 [style=solid label="DEFAULT"]
  1557 -> 667 [style=solid label="TRY"]
  1557 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1557 -> 372 [style=solid label="ZERO_LX"]
  1557 -> 373 [style=solid label="ZERO_HX"]
  1557 -> 668 [style=solid label="WHILE"]
  1557 -> 669 [style=solid label="DO"]
  1557 -> 670 [style=solid label="FOR"]
  1557 -> 671 [style=solid label="BREAK"]
  1557 -> 672 [style=solid label="CONTINUE"]
  1557 -> 673 [style=solid label="RETURN"]
  1557 -> 674 [style=solid label="GOTO"]
  1557 -> 675 [style=solid label="CASE"]
  1557 -> 676 [style=solid label="NAMESPACE"]
  1557 -> 374 [style=solid label="REQUIRES"]
  1557 -> 375 [style=solid label="NEW"]
  1557 -> 376 [style=solid label="COMPL"]
  1557 -> 377 [style=solid label="NOT"]
  1557 -> 378 [style=solid label="PLUS_PLUS"]
  1557 -> 379 [style=solid label="MINUS_MINUS"]
  1557 -> 380 [style=solid label="THIS"]
  1557 -> 36 [style=solid label="AUTO"]
  1557 -> 381 [style=solid label="NULLPTR"]
  1557 -> 382 [style=solid label="DYNAMIC_CAST"]
  1557 -> 383 [style=solid label="STATIC_CAST"]
  1557 -> 384 [style=solid label="REINTERPRET_CAST"]
  1557 -> 385 [style=solid label="CONST_CAST"]
  1557 -> 386 [style=solid label="TYPEID"]
  1557 -> 677 [style=solid label="IF"]
  1557 -> 678 [style=solid label="SWITCH"]
  1557 -> 37 [style=solid label="CHAR"]
  1557 -> 38 [style=solid label="CHAR8_T"]
  1557 -> 39 [style=solid label="CHAR16_T"]
  1557 -> 40 [style=solid label="CHAR32_T"]
  1557 -> 41 [style=solid label="WCHAR_T"]
  1557 -> 42 [style=solid label="BOOL"]
  1557 -> 43 [style=solid label="SHORT"]
  1557 -> 44 [style=solid label="INT"]
  1557 -> 45 [style=solid label="LONG"]
  1557 -> 46 [style=solid label="SIGNED"]
  1557 -> 47 [style=solid label="UNSIGNED"]
  1557 -> 48 [style=solid label="FLOAT"]
  1557 -> 49 [style=solid label="DOUBLE"]
  1557 -> 50 [style=solid label="VOID"]
  1557 -> 51 [style=solid label="STATIC_ASSERT"]
  1557 -> 52 [style=solid label="STATIC"]
  1557 -> 53 [style=solid label="THREAD_LOCAL"]
  1557 -> 54 [style=solid label="MUTABLE"]
  1557 -> 523 [style=solid label="THROW"]
  1557 -> 55 [style=solid label="TYPENAME"]
  1557 -> 387 [style=solid label="SIZEOF"]
  1557 -> 388 [style=solid label="ALIGNOF"]
  1557 -> 524 [style=solid label="CO_YIELD"]
  1557 -> 389 [style=solid label="'0'"]
  1557 -> 390 [style=solid label="'1'"]
  1557 -> 391 [style=solid label="'2'"]
  1557 -> 392 [style=solid label="'3'"]
  1557 -> 393 [style=solid label="'4'"]
  1557 -> 394 [style=solid label="'5'"]
  1557 -> 395 [style=solid label="'6'"]
  1557 -> 396 [style=solid label="'7'"]
  1557 -> 397 [style=solid label="'8'"]
  1557 -> 398 [style=solid label="'9'"]
  1557 -> 205 [style=solid label="'u'"]
  1557 -> 206 [style=solid label="'U'"]
  1557 -> 207 [style=solid label="'L'"]
  1557 -> 208 [style=solid label="'R'"]
  1557 -> 399 [style=dashed label="additive-expression"]
  1557 -> 56 [style=dashed label="alias-declaration"]
  1557 -> 57 [style=dashed label="alignment-specifier"]
  1557 -> 400 [style=dashed label="and-expression"]
  1557 -> 58 [style=dashed label="asm-declaration"]
  1557 -> 525 [style=dashed label="assignment-expression"]
  1557 -> 60 [style=dashed label="attribute-specifier"]
  1557 -> 679 [style=dashed label="attribute-specifier-seq"]
  1557 -> 401 [style=dashed label="await-expression"]
  1557 -> 402 [style=dashed label="binary-literal"]
  1557 -> 680 [style=dashed label="block-declaration"]
  1557 -> 403 [style=dashed label="boolean-literal"]
  1557 -> 404 [style=dashed label="cast-expression"]
  1557 -> 405 [style=dashed label="character-literal"]
  1557 -> 63 [style=dashed label="class-head"]
  1557 -> 64 [style=dashed label="class-key"]
  1557 -> 65 [style=dashed label="class-name"]
  1557 -> 66 [style=dashed label="class-specifier"]
  1557 -> 406 [style=dashed label="compare-expression"]
  1557 -> 681 [style=dashed label="compound-statement"]
  1557 -> 67 [style=dashed label="concept-name"]
  1557 -> 526 [style=dashed label="conditional-expression"]
  1557 -> 68 [style=dashed label="conversion-function-id"]
  1557 -> 682 [style=dashed label="coroutine-return-statement"]
  1557 -> 69 [style=dashed label="cv-qualifier"]
  1557 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1557 -> 410 [style=dashed label="decimal-literal"]
  1557 -> 70 [style=dashed label="decl-specifier"]
  1557 -> 683 [style=dashed label="decl-specifier-seq"]
  1557 -> 684 [style=dashed label="declaration-statement"]
  1557 -> 76 [style=dashed label="decltype-specifier"]
  1557 -> 78 [style=dashed label="defining-type-specifier"]
  1557 -> 411 [style=dashed label="delete-expression"]
  1557 -> 412 [style=dashed label="digit"]
  1557 -> 413 [style=dashed label="digit-sequence"]
  1557 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1557 -> 80 [style=dashed label="elaborated-type-specifier"]
  1557 -> 414 [style=dashed label="encoding-prefix"]
  1557 -> 82 [style=dashed label="enum-head"]
  1557 -> 83 [style=dashed label="enum-key"]
  1557 -> 84 [style=dashed label="enum-name"]
  1557 -> 85 [style=dashed label="enum-specifier"]
  1557 -> 415 [style=dashed label="equality-expression"]
  1557 -> 416 [style=dashed label="exclusive-or-expression"]
  1557 -> 264 [style=dashed label="explicit-specifier"]
  1557 -> 685 [style=dashed label="expression"]
  1557 -> 686 [style=dashed label="expression-statement"]
  1557 -> 417 [style=dashed label="floating-point-literal"]
  1557 -> 418 [style=dashed label="fold-expression"]
  1557 -> 419 [style=dashed label="fractional-constant"]
  1557 -> 91 [style=dashed label="function-specifier"]
  1557 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1557 -> 421 [style=dashed label="hexadecimal-literal"]
  1557 -> 422 [style=dashed label="hexadecimal-prefix"]
  1557 -> 423 [style=dashed label="id-expression"]
  1557 -> 424 [style=dashed label="inclusive-or-expression"]
  1557 -> 425 [style=dashed label="integer-literal"]
  1557 -> 687 [style=dashed label="iteration-statement"]
  1557 -> 688 [style=dashed label="jump-statement"]
  1557 -> 689 [style=dashed label="labeled-statement"]
  1557 -> 426 [style=dashed label="lambda-expression"]
  1557 -> 427 [style=dashed label="lambda-introducer"]
  1557 -> 428 [style=dashed label="literal"]
  1557 -> 95 [style=dashed label="literal-operator-id"]
  1557 -> 429 [style=dashed label="logical-and-expression"]
  1557 -> 528 [style=dashed label="logical-or-expression"]
  1557 -> 431 [style=dashed label="multiplicative-expression"]
  1557 -> 99 [style=dashed label="namespace-alias"]
  1557 -> 100 [style=dashed label="namespace-alias-definition"]
  1557 -> 102 [style=dashed label="namespace-name"]
  1557 -> 432 [style=dashed label="nested-name-specifier"]
  1557 -> 433 [style=dashed label="new-expression"]
  1557 -> 434 [style=dashed label="noexcept-expression"]
  1557 -> 435 [style=dashed label="nonzero-digit"]
  1557 -> 436 [style=dashed label="octal-literal"]
  1557 -> 107 [style=dashed label="opaque-enum-declaration"]
  1557 -> 108 [style=dashed label="operator-function-id"]
  1557 -> 109 [style=dashed label="placeholder-type-specifier"]
  1557 -> 437 [style=dashed label="pm-expression"]
  1557 -> 438 [style=dashed label="pointer-literal"]
  1557 -> 439 [style=dashed label="postfix-expression"]
  1557 -> 440 [style=dashed label="primary-expression"]
  1557 -> 112 [style=dashed label="qualified-id"]
  1557 -> 441 [style=dashed label="relational-expression"]
  1557 -> 442 [style=dashed label="requires-expression"]
  1557 -> 690 [style=dashed label="selection-statement"]
  1557 -> 443 [style=dashed label="shift-expression"]
  1557 -> 113 [style=dashed label="simple-declaration"]
  1557 -> 114 [style=dashed label="simple-template-id"]
  1557 -> 444 [style=dashed label="simple-type-specifier"]
  1557 -> 1758 [style=dashed label="statement"]
  1557 -> 116 [style=dashed label="static_assert-declaration"]
  1557 -> 117 [style=dashed label="storage-class-specifier"]
  1557 -> 445 [style=dashed label="string-literal"]
  1557 -> 120 [style=dashed label="template-id"]
  1557 -> 215 [style=dashed label="template-name"]
  1557 -> 530 [style=dashed label="throw-expression"]
  1557 -> 693 [style=dashed label="try-block"]
  1557 -> 123 [style=dashed label="type-constraint"]
  1557 -> 124 [style=dashed label="type-name"]
  1557 -> 125 [style=dashed label="type-specifier"]
  1557 -> 126 [style=dashed label="typedef-name"]
  1557 -> 448 [style=dashed label="typename-specifier"]
  1557 -> 449 [style=dashed label="unary-expression"]
  1557 -> 450 [style=dashed label="unary-operator"]
  1557 -> 129 [style=dashed label="unqualified-id"]
  1557 -> 451 [style=dashed label="user-defined-character-literal"]
  1557 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1557 -> 453 [style=dashed label="user-defined-integer-literal"]
  1557 -> 454 [style=dashed label="user-defined-literal"]
  1557 -> 455 [style=dashed label="user-defined-string-literal"]
  1557 -> 130 [style=dashed label="using-declaration"]
  1557 -> 131 [style=dashed label="using-directive"]
  1557 -> 132 [style=dashed label="using-enum-declaration"]
  1557 -> 532 [style=dashed label="yield-expression"]
  1558 [label="State 1558\n\l523 labeled-statement: attribute-specifier-seq DEFAULT COLON • statement\l"]
  1558 -> 356 [style=solid label="PLUS"]
  1558 -> 357 [style=solid label="MINUS"]
  1558 -> 1 [style=solid label="USING"]
  1558 -> 661 [style=solid label="IDENTIFIER"]
  1558 -> 662 [style=solid label="SEMICOLON"]
  1558 -> 4 [style=solid label="ALIGNAS"]
  1558 -> 358 [style=solid label="OPEN_PAREN"]
  1558 -> 359 [style=solid label="AND"]
  1558 -> 8 [style=solid label="ASM"]
  1558 -> 360 [style=solid label="SCOPE"]
  1558 -> 663 [style=solid label="OPEN_SQUARE"]
  1558 -> 362 [style=solid label="CO_AWAIT"]
  1558 -> 289 [style=solid label="OPEN_BRACE"]
  1558 -> 11 [style=solid label="VIRTUAL"]
  1558 -> 363 [style=solid label="ZERO_LB"]
  1558 -> 364 [style=solid label="ZERO_HB"]
  1558 -> 365 [style=solid label="SINGLE_QUOTE"]
  1558 -> 366 [style=solid label="FALSE"]
  1558 -> 367 [style=solid label="TRUE"]
  1558 -> 12 [style=solid label="CLASS"]
  1558 -> 13 [style=solid label="STRUCT"]
  1558 -> 14 [style=solid label="UNION"]
  1558 -> 368 [style=solid label="NOEXCEPT"]
  1558 -> 17 [style=solid label="OPERATOR"]
  1558 -> 665 [style=solid label="CO_RETURN"]
  1558 -> 18 [style=solid label="CONST"]
  1558 -> 19 [style=solid label="VOLATILE"]
  1558 -> 20 [style=solid label="FRIEND"]
  1558 -> 21 [style=solid label="TYPEDEF"]
  1558 -> 22 [style=solid label="CONSTEXPR"]
  1558 -> 23 [style=solid label="CONSTEVAL"]
  1558 -> 24 [style=solid label="CONSTINIT"]
  1558 -> 258 [style=solid label="INLINE"]
  1558 -> 26 [style=solid label="DECLTYPE"]
  1558 -> 369 [style=solid label="DELETE"]
  1558 -> 370 [style=solid label="DOT"]
  1558 -> 27 [style=solid label="ENUM"]
  1558 -> 184 [style=solid label="UNICODE_8"]
  1558 -> 259 [style=solid label="EXTERN"]
  1558 -> 29 [style=solid label="EXPLICIT"]
  1558 -> 371 [style=solid label="MULT"]
  1558 -> 666 [style=solid label="DEFAULT"]
  1558 -> 667 [style=solid label="TRY"]
  1558 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1558 -> 372 [style=solid label="ZERO_LX"]
  1558 -> 373 [style=solid label="ZERO_HX"]
  1558 -> 668 [style=solid label="WHILE"]
  1558 -> 669 [style=solid label="DO"]
  1558 -> 670 [style=solid label="FOR"]
  1558 -> 671 [style=solid label="BREAK"]
  1558 -> 672 [style=solid label="CONTINUE"]
  1558 -> 673 [style=solid label="RETURN"]
  1558 -> 674 [style=solid label="GOTO"]
  1558 -> 675 [style=solid label="CASE"]
  1558 -> 676 [style=solid label="NAMESPACE"]
  1558 -> 374 [style=solid label="REQUIRES"]
  1558 -> 375 [style=solid label="NEW"]
  1558 -> 376 [style=solid label="COMPL"]
  1558 -> 377 [style=solid label="NOT"]
  1558 -> 378 [style=solid label="PLUS_PLUS"]
  1558 -> 379 [style=solid label="MINUS_MINUS"]
  1558 -> 380 [style=solid label="THIS"]
  1558 -> 36 [style=solid label="AUTO"]
  1558 -> 381 [style=solid label="NULLPTR"]
  1558 -> 382 [style=solid label="DYNAMIC_CAST"]
  1558 -> 383 [style=solid label="STATIC_CAST"]
  1558 -> 384 [style=solid label="REINTERPRET_CAST"]
  1558 -> 385 [style=solid label="CONST_CAST"]
  1558 -> 386 [style=solid label="TYPEID"]
  1558 -> 677 [style=solid label="IF"]
  1558 -> 678 [style=solid label="SWITCH"]
  1558 -> 37 [style=solid label="CHAR"]
  1558 -> 38 [style=solid label="CHAR8_T"]
  1558 -> 39 [style=solid label="CHAR16_T"]
  1558 -> 40 [style=solid label="CHAR32_T"]
  1558 -> 41 [style=solid label="WCHAR_T"]
  1558 -> 42 [style=solid label="BOOL"]
  1558 -> 43 [style=solid label="SHORT"]
  1558 -> 44 [style=solid label="INT"]
  1558 -> 45 [style=solid label="LONG"]
  1558 -> 46 [style=solid label="SIGNED"]
  1558 -> 47 [style=solid label="UNSIGNED"]
  1558 -> 48 [style=solid label="FLOAT"]
  1558 -> 49 [style=solid label="DOUBLE"]
  1558 -> 50 [style=solid label="VOID"]
  1558 -> 51 [style=solid label="STATIC_ASSERT"]
  1558 -> 52 [style=solid label="STATIC"]
  1558 -> 53 [style=solid label="THREAD_LOCAL"]
  1558 -> 54 [style=solid label="MUTABLE"]
  1558 -> 523 [style=solid label="THROW"]
  1558 -> 55 [style=solid label="TYPENAME"]
  1558 -> 387 [style=solid label="SIZEOF"]
  1558 -> 388 [style=solid label="ALIGNOF"]
  1558 -> 524 [style=solid label="CO_YIELD"]
  1558 -> 389 [style=solid label="'0'"]
  1558 -> 390 [style=solid label="'1'"]
  1558 -> 391 [style=solid label="'2'"]
  1558 -> 392 [style=solid label="'3'"]
  1558 -> 393 [style=solid label="'4'"]
  1558 -> 394 [style=solid label="'5'"]
  1558 -> 395 [style=solid label="'6'"]
  1558 -> 396 [style=solid label="'7'"]
  1558 -> 397 [style=solid label="'8'"]
  1558 -> 398 [style=solid label="'9'"]
  1558 -> 205 [style=solid label="'u'"]
  1558 -> 206 [style=solid label="'U'"]
  1558 -> 207 [style=solid label="'L'"]
  1558 -> 208 [style=solid label="'R'"]
  1558 -> 399 [style=dashed label="additive-expression"]
  1558 -> 56 [style=dashed label="alias-declaration"]
  1558 -> 57 [style=dashed label="alignment-specifier"]
  1558 -> 400 [style=dashed label="and-expression"]
  1558 -> 58 [style=dashed label="asm-declaration"]
  1558 -> 525 [style=dashed label="assignment-expression"]
  1558 -> 60 [style=dashed label="attribute-specifier"]
  1558 -> 679 [style=dashed label="attribute-specifier-seq"]
  1558 -> 401 [style=dashed label="await-expression"]
  1558 -> 402 [style=dashed label="binary-literal"]
  1558 -> 680 [style=dashed label="block-declaration"]
  1558 -> 403 [style=dashed label="boolean-literal"]
  1558 -> 404 [style=dashed label="cast-expression"]
  1558 -> 405 [style=dashed label="character-literal"]
  1558 -> 63 [style=dashed label="class-head"]
  1558 -> 64 [style=dashed label="class-key"]
  1558 -> 65 [style=dashed label="class-name"]
  1558 -> 66 [style=dashed label="class-specifier"]
  1558 -> 406 [style=dashed label="compare-expression"]
  1558 -> 681 [style=dashed label="compound-statement"]
  1558 -> 67 [style=dashed label="concept-name"]
  1558 -> 526 [style=dashed label="conditional-expression"]
  1558 -> 68 [style=dashed label="conversion-function-id"]
  1558 -> 682 [style=dashed label="coroutine-return-statement"]
  1558 -> 69 [style=dashed label="cv-qualifier"]
  1558 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1558 -> 410 [style=dashed label="decimal-literal"]
  1558 -> 70 [style=dashed label="decl-specifier"]
  1558 -> 683 [style=dashed label="decl-specifier-seq"]
  1558 -> 684 [style=dashed label="declaration-statement"]
  1558 -> 76 [style=dashed label="decltype-specifier"]
  1558 -> 78 [style=dashed label="defining-type-specifier"]
  1558 -> 411 [style=dashed label="delete-expression"]
  1558 -> 412 [style=dashed label="digit"]
  1558 -> 413 [style=dashed label="digit-sequence"]
  1558 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1558 -> 80 [style=dashed label="elaborated-type-specifier"]
  1558 -> 414 [style=dashed label="encoding-prefix"]
  1558 -> 82 [style=dashed label="enum-head"]
  1558 -> 83 [style=dashed label="enum-key"]
  1558 -> 84 [style=dashed label="enum-name"]
  1558 -> 85 [style=dashed label="enum-specifier"]
  1558 -> 415 [style=dashed label="equality-expression"]
  1558 -> 416 [style=dashed label="exclusive-or-expression"]
  1558 -> 264 [style=dashed label="explicit-specifier"]
  1558 -> 685 [style=dashed label="expression"]
  1558 -> 686 [style=dashed label="expression-statement"]
  1558 -> 417 [style=dashed label="floating-point-literal"]
  1558 -> 418 [style=dashed label="fold-expression"]
  1558 -> 419 [style=dashed label="fractional-constant"]
  1558 -> 91 [style=dashed label="function-specifier"]
  1558 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1558 -> 421 [style=dashed label="hexadecimal-literal"]
  1558 -> 422 [style=dashed label="hexadecimal-prefix"]
  1558 -> 423 [style=dashed label="id-expression"]
  1558 -> 424 [style=dashed label="inclusive-or-expression"]
  1558 -> 425 [style=dashed label="integer-literal"]
  1558 -> 687 [style=dashed label="iteration-statement"]
  1558 -> 688 [style=dashed label="jump-statement"]
  1558 -> 689 [style=dashed label="labeled-statement"]
  1558 -> 426 [style=dashed label="lambda-expression"]
  1558 -> 427 [style=dashed label="lambda-introducer"]
  1558 -> 428 [style=dashed label="literal"]
  1558 -> 95 [style=dashed label="literal-operator-id"]
  1558 -> 429 [style=dashed label="logical-and-expression"]
  1558 -> 528 [style=dashed label="logical-or-expression"]
  1558 -> 431 [style=dashed label="multiplicative-expression"]
  1558 -> 99 [style=dashed label="namespace-alias"]
  1558 -> 100 [style=dashed label="namespace-alias-definition"]
  1558 -> 102 [style=dashed label="namespace-name"]
  1558 -> 432 [style=dashed label="nested-name-specifier"]
  1558 -> 433 [style=dashed label="new-expression"]
  1558 -> 434 [style=dashed label="noexcept-expression"]
  1558 -> 435 [style=dashed label="nonzero-digit"]
  1558 -> 436 [style=dashed label="octal-literal"]
  1558 -> 107 [style=dashed label="opaque-enum-declaration"]
  1558 -> 108 [style=dashed label="operator-function-id"]
  1558 -> 109 [style=dashed label="placeholder-type-specifier"]
  1558 -> 437 [style=dashed label="pm-expression"]
  1558 -> 438 [style=dashed label="pointer-literal"]
  1558 -> 439 [style=dashed label="postfix-expression"]
  1558 -> 440 [style=dashed label="primary-expression"]
  1558 -> 112 [style=dashed label="qualified-id"]
  1558 -> 441 [style=dashed label="relational-expression"]
  1558 -> 442 [style=dashed label="requires-expression"]
  1558 -> 690 [style=dashed label="selection-statement"]
  1558 -> 443 [style=dashed label="shift-expression"]
  1558 -> 113 [style=dashed label="simple-declaration"]
  1558 -> 114 [style=dashed label="simple-template-id"]
  1558 -> 444 [style=dashed label="simple-type-specifier"]
  1558 -> 1759 [style=dashed label="statement"]
  1558 -> 116 [style=dashed label="static_assert-declaration"]
  1558 -> 117 [style=dashed label="storage-class-specifier"]
  1558 -> 445 [style=dashed label="string-literal"]
  1558 -> 120 [style=dashed label="template-id"]
  1558 -> 215 [style=dashed label="template-name"]
  1558 -> 530 [style=dashed label="throw-expression"]
  1558 -> 693 [style=dashed label="try-block"]
  1558 -> 123 [style=dashed label="type-constraint"]
  1558 -> 124 [style=dashed label="type-name"]
  1558 -> 125 [style=dashed label="type-specifier"]
  1558 -> 126 [style=dashed label="typedef-name"]
  1558 -> 448 [style=dashed label="typename-specifier"]
  1558 -> 449 [style=dashed label="unary-expression"]
  1558 -> 450 [style=dashed label="unary-operator"]
  1558 -> 129 [style=dashed label="unqualified-id"]
  1558 -> 451 [style=dashed label="user-defined-character-literal"]
  1558 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1558 -> 453 [style=dashed label="user-defined-integer-literal"]
  1558 -> 454 [style=dashed label="user-defined-literal"]
  1558 -> 455 [style=dashed label="user-defined-string-literal"]
  1558 -> 130 [style=dashed label="using-declaration"]
  1558 -> 131 [style=dashed label="using-directive"]
  1558 -> 132 [style=dashed label="using-enum-declaration"]
  1558 -> 532 [style=dashed label="yield-expression"]
  1559 [label="State 1559\n\l521 labeled-statement: attribute-specifier-seq CASE constant-expression • COLON statement\l"]
  1559 -> 1760 [style=solid label="COLON"]
  1560 [label="State 1560\n\l416 handler: CATCH OPEN_PAREN • exception-declaration CLOSE_PAREN compound-statement\l"]
  1560 -> 162 [style=solid label="IDENTIFIER"]
  1560 -> 4 [style=solid label="ALIGNAS"]
  1560 -> 1761 [style=solid label="ELLIPSIS"]
  1560 -> 9 [style=solid label="SCOPE"]
  1560 -> 10 [style=solid label="OPEN_SQUARE"]
  1560 -> 12 [style=solid label="CLASS"]
  1560 -> 13 [style=solid label="STRUCT"]
  1560 -> 14 [style=solid label="UNION"]
  1560 -> 18 [style=solid label="CONST"]
  1560 -> 19 [style=solid label="VOLATILE"]
  1560 -> 26 [style=solid label="DECLTYPE"]
  1560 -> 135 [style=solid label="ENUM"]
  1560 -> 36 [style=solid label="AUTO"]
  1560 -> 37 [style=solid label="CHAR"]
  1560 -> 38 [style=solid label="CHAR8_T"]
  1560 -> 39 [style=solid label="CHAR16_T"]
  1560 -> 40 [style=solid label="CHAR32_T"]
  1560 -> 41 [style=solid label="WCHAR_T"]
  1560 -> 42 [style=solid label="BOOL"]
  1560 -> 43 [style=solid label="SHORT"]
  1560 -> 44 [style=solid label="INT"]
  1560 -> 45 [style=solid label="LONG"]
  1560 -> 46 [style=solid label="SIGNED"]
  1560 -> 47 [style=solid label="UNSIGNED"]
  1560 -> 48 [style=solid label="FLOAT"]
  1560 -> 49 [style=solid label="DOUBLE"]
  1560 -> 50 [style=solid label="VOID"]
  1560 -> 55 [style=solid label="TYPENAME"]
  1560 -> 57 [style=dashed label="alignment-specifier"]
  1560 -> 60 [style=dashed label="attribute-specifier"]
  1560 -> 1762 [style=dashed label="attribute-specifier-seq"]
  1560 -> 209 [style=dashed label="class-key"]
  1560 -> 65 [style=dashed label="class-name"]
  1560 -> 67 [style=dashed label="concept-name"]
  1560 -> 69 [style=dashed label="cv-qualifier"]
  1560 -> 76 [style=dashed label="decltype-specifier"]
  1560 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1560 -> 80 [style=dashed label="elaborated-type-specifier"]
  1560 -> 84 [style=dashed label="enum-name"]
  1560 -> 1763 [style=dashed label="exception-declaration"]
  1560 -> 99 [style=dashed label="namespace-alias"]
  1560 -> 102 [style=dashed label="namespace-name"]
  1560 -> 212 [style=dashed label="nested-name-specifier"]
  1560 -> 109 [style=dashed label="placeholder-type-specifier"]
  1560 -> 141 [style=dashed label="simple-template-id"]
  1560 -> 115 [style=dashed label="simple-type-specifier"]
  1560 -> 215 [style=dashed label="template-name"]
  1560 -> 123 [style=dashed label="type-constraint"]
  1560 -> 124 [style=dashed label="type-name"]
  1560 -> 216 [style=dashed label="type-specifier"]
  1560 -> 1764 [style=dashed label="type-specifier-seq"]
  1560 -> 126 [style=dashed label="typedef-name"]
  1560 -> 127 [style=dashed label="typename-specifier"]
  1561 [label="State 1561\n\l418 handler-seq: handler handler-seq •\l"]
  1561 -> "1561R418" [style=solid]
 "1561R418" [label="R418", fillcolor=3, shape=diamond, style=filled]
  1562 [label="State 1562\n\l410 function-try-block: TRY ctor-initializer compound-statement handler-seq •\l"]
  1562 -> "1562R410" [style=solid]
 "1562R410" [label="R410", fillcolor=3, shape=diamond, style=filled]
  1563 [label="State 1563\n\l174 constraint-logical-and-expression: constraint-logical-and-expression AND_AND primary-expression •\l"]
  1563 -> "1563R174" [style=solid]
 "1563R174" [label="R174", fillcolor=3, shape=diamond, style=filled]
  1564 [label="State 1564\n\l174 constraint-logical-and-expression: constraint-logical-and-expression • AND_AND primary-expression\l176 constraint-logical-or-expression: constraint-logical-or-expression OR_OR constraint-logical-and-expression •\l"]
  1564 -> 1197 [style=solid label="AND_AND"]
  1564 -> "1564R176d" [label="[AND_AND]", style=solid]
 "1564R176d" [label="R176", fillcolor=5, shape=diamond, style=filled]
  1564 -> "1564R176" [style=solid]
 "1564R176" [label="R176", fillcolor=3, shape=diamond, style=filled]
  1565 [label="State 1565\n\l301 enumerator-definition: enumerator EQ constant-expression •\l"]
  1565 -> "1565R301" [style=solid]
 "1565R301" [label="R301", fillcolor=3, shape=diamond, style=filled]
  1566 [label="State 1566\n\l297 enum-specifier: enum-head OPEN_BRACE enumerator-list COMMA CLOSE_BRACE •\l"]
  1566 -> "1566R297" [style=solid]
 "1566R297" [label="R297", fillcolor=3, shape=diamond, style=filled]
  1567 [label="State 1567\n\l303 enumerator-list: enumerator-list COMMA enumerator-definition •\l"]
  1567 -> "1567R303" [style=solid]
 "1567R303" [label="R303", fillcolor=3, shape=diamond, style=filled]
  1568 [label="State 1568\n\l754 opaque-enum-declaration: enum-key attribute-specifier-seq enum-head-name enum-base SEMICOLON •\l"]
  1568 -> "1568R754" [style=solid]
 "1568R754" [label="R754", fillcolor=3, shape=diamond, style=filled]
  1569 [label="State 1569\n\l231 deduction-guide: explicit-specifier template-name OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • DEREF simple-template-id SEMICOLON\l"]
  1569 -> 1765 [style=solid label="DEREF"]
  1570 [label="State 1570\n\l886 private-module-fragment: MODULE COLON PRIVATE SEMICOLON •\l887                        | MODULE COLON PRIVATE SEMICOLON • declaration-seq\l"]
  1570 -> 1 [style=solid label="USING"]
  1570 -> 2 [style=solid label="IDENTIFIER"]
  1570 -> 3 [style=solid label="SEMICOLON"]
  1570 -> 4 [style=solid label="ALIGNAS"]
  1570 -> 5 [style=solid label="OPEN_PAREN"]
  1570 -> 6 [style=solid label="ELLIPSIS"]
  1570 -> 7 [style=solid label="AND"]
  1570 -> 8 [style=solid label="ASM"]
  1570 -> 9 [style=solid label="SCOPE"]
  1570 -> 10 [style=solid label="OPEN_SQUARE"]
  1570 -> 11 [style=solid label="VIRTUAL"]
  1570 -> 12 [style=solid label="CLASS"]
  1570 -> 13 [style=solid label="STRUCT"]
  1570 -> 14 [style=solid label="UNION"]
  1570 -> 15 [style=solid label="TEMPLATE"]
  1570 -> 16 [style=solid label="AND_AND"]
  1570 -> 17 [style=solid label="OPERATOR"]
  1570 -> 18 [style=solid label="CONST"]
  1570 -> 19 [style=solid label="VOLATILE"]
  1570 -> 20 [style=solid label="FRIEND"]
  1570 -> 21 [style=solid label="TYPEDEF"]
  1570 -> 22 [style=solid label="CONSTEXPR"]
  1570 -> 23 [style=solid label="CONSTEVAL"]
  1570 -> 24 [style=solid label="CONSTINIT"]
  1570 -> 25 [style=solid label="INLINE"]
  1570 -> 26 [style=solid label="DECLTYPE"]
  1570 -> 27 [style=solid label="ENUM"]
  1570 -> 28 [style=solid label="EXTERN"]
  1570 -> 29 [style=solid label="EXPLICIT"]
  1570 -> 157 [style=solid label="EXPORT"]
  1570 -> 31 [style=solid label="MULT"]
  1570 -> 33 [style=solid label="IMPORT"]
  1570 -> 34 [style=solid label="NAMESPACE"]
  1570 -> 35 [style=solid label="COMPL"]
  1570 -> 36 [style=solid label="AUTO"]
  1570 -> 37 [style=solid label="CHAR"]
  1570 -> 38 [style=solid label="CHAR8_T"]
  1570 -> 39 [style=solid label="CHAR16_T"]
  1570 -> 40 [style=solid label="CHAR32_T"]
  1570 -> 41 [style=solid label="WCHAR_T"]
  1570 -> 42 [style=solid label="BOOL"]
  1570 -> 43 [style=solid label="SHORT"]
  1570 -> 44 [style=solid label="INT"]
  1570 -> 45 [style=solid label="LONG"]
  1570 -> 46 [style=solid label="SIGNED"]
  1570 -> 47 [style=solid label="UNSIGNED"]
  1570 -> 48 [style=solid label="FLOAT"]
  1570 -> 49 [style=solid label="DOUBLE"]
  1570 -> 50 [style=solid label="VOID"]
  1570 -> 51 [style=solid label="STATIC_ASSERT"]
  1570 -> 52 [style=solid label="STATIC"]
  1570 -> 53 [style=solid label="THREAD_LOCAL"]
  1570 -> 54 [style=solid label="MUTABLE"]
  1570 -> 55 [style=solid label="TYPENAME"]
  1570 -> 56 [style=dashed label="alias-declaration"]
  1570 -> 57 [style=dashed label="alignment-specifier"]
  1570 -> 58 [style=dashed label="asm-declaration"]
  1570 -> 59 [style=dashed label="attribute-declaration"]
  1570 -> 60 [style=dashed label="attribute-specifier"]
  1570 -> 61 [style=dashed label="attribute-specifier-seq"]
  1570 -> 62 [style=dashed label="block-declaration"]
  1570 -> 63 [style=dashed label="class-head"]
  1570 -> 64 [style=dashed label="class-key"]
  1570 -> 65 [style=dashed label="class-name"]
  1570 -> 66 [style=dashed label="class-specifier"]
  1570 -> 67 [style=dashed label="concept-name"]
  1570 -> 68 [style=dashed label="conversion-function-id"]
  1570 -> 69 [style=dashed label="cv-qualifier"]
  1570 -> 70 [style=dashed label="decl-specifier"]
  1570 -> 71 [style=dashed label="decl-specifier-seq"]
  1570 -> 72 [style=dashed label="declaration"]
  1570 -> 1766 [style=dashed label="declaration-seq"]
  1570 -> 74 [style=dashed label="declarator"]
  1570 -> 75 [style=dashed label="declarator-id"]
  1570 -> 76 [style=dashed label="decltype-specifier"]
  1570 -> 77 [style=dashed label="deduction-guide"]
  1570 -> 78 [style=dashed label="defining-type-specifier"]
  1570 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1570 -> 80 [style=dashed label="elaborated-type-specifier"]
  1570 -> 81 [style=dashed label="empty-declaration"]
  1570 -> 82 [style=dashed label="enum-head"]
  1570 -> 83 [style=dashed label="enum-key"]
  1570 -> 84 [style=dashed label="enum-name"]
  1570 -> 85 [style=dashed label="enum-specifier"]
  1570 -> 86 [style=dashed label="explicit-instantiation"]
  1570 -> 87 [style=dashed label="explicit-specialization"]
  1570 -> 88 [style=dashed label="explicit-specifier"]
  1570 -> 89 [style=dashed label="export-declaration"]
  1570 -> 90 [style=dashed label="function-definition"]
  1570 -> 91 [style=dashed label="function-specifier"]
  1570 -> 93 [style=dashed label="id-expression"]
  1570 -> 94 [style=dashed label="linkage-specification"]
  1570 -> 95 [style=dashed label="literal-operator-id"]
  1570 -> 97 [style=dashed label="module-import-declaration"]
  1570 -> 98 [style=dashed label="named-namespace-definition"]
  1570 -> 99 [style=dashed label="namespace-alias"]
  1570 -> 100 [style=dashed label="namespace-alias-definition"]
  1570 -> 101 [style=dashed label="namespace-definition"]
  1570 -> 102 [style=dashed label="namespace-name"]
  1570 -> 103 [style=dashed label="nested-name-specifier"]
  1570 -> 104 [style=dashed label="nested-namespace-definition"]
  1570 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  1570 -> 106 [style=dashed label="noptr-declarator"]
  1570 -> 107 [style=dashed label="opaque-enum-declaration"]
  1570 -> 108 [style=dashed label="operator-function-id"]
  1570 -> 109 [style=dashed label="placeholder-type-specifier"]
  1570 -> 110 [style=dashed label="ptr-declarator"]
  1570 -> 111 [style=dashed label="ptr-operator"]
  1570 -> 112 [style=dashed label="qualified-id"]
  1570 -> 113 [style=dashed label="simple-declaration"]
  1570 -> 114 [style=dashed label="simple-template-id"]
  1570 -> 115 [style=dashed label="simple-type-specifier"]
  1570 -> 116 [style=dashed label="static_assert-declaration"]
  1570 -> 117 [style=dashed label="storage-class-specifier"]
  1570 -> 118 [style=dashed label="template-declaration"]
  1570 -> 119 [style=dashed label="template-head"]
  1570 -> 120 [style=dashed label="template-id"]
  1570 -> 121 [style=dashed label="template-name"]
  1570 -> 123 [style=dashed label="type-constraint"]
  1570 -> 124 [style=dashed label="type-name"]
  1570 -> 125 [style=dashed label="type-specifier"]
  1570 -> 126 [style=dashed label="typedef-name"]
  1570 -> 127 [style=dashed label="typename-specifier"]
  1570 -> 128 [style=dashed label="unnamed-namespace-definition"]
  1570 -> 129 [style=dashed label="unqualified-id"]
  1570 -> 130 [style=dashed label="using-declaration"]
  1570 -> 131 [style=dashed label="using-directive"]
  1570 -> 132 [style=dashed label="using-enum-declaration"]
  1570 -> "1570R886" [style=solid]
 "1570R886" [label="R886", fillcolor=3, shape=diamond, style=filled]
  1571 [label="State 1571\n\l1074 type-constraint: nested-name-specifier concept-name LESS template-argument-list GREATER •\l"]
  1571 -> "1571R1074" [style=solid]
 "1571R1074" [label="R1074", fillcolor=3, shape=diamond, style=filled]
  1572 [label="State 1572\n\l914 ref-qualifier: AND •\l"]
  1572 -> "1572R914" [style=solid]
 "1572R914" [label="R914", fillcolor=3, shape=diamond, style=filled]
  1573 [label="State 1573\n\l915 ref-qualifier: AND_AND •\l"]
  1573 -> "1573R915" [style=solid]
 "1573R915" [label="R915", fillcolor=3, shape=diamond, style=filled]
  1574 [label="State 1574\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l840 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN attribute-specifier-seq •\l"]
  1574 -> 4 [style=solid label="ALIGNAS"]
  1574 -> 10 [style=solid label="OPEN_SQUARE"]
  1574 -> 57 [style=dashed label="alignment-specifier"]
  1574 -> 260 [style=dashed label="attribute-specifier"]
  1574 -> "1574R840d" [label="[OPEN_SQUARE]", style=solid]
 "1574R840d" [label="R840", fillcolor=5, shape=diamond, style=filled]
  1574 -> "1574R840" [style=solid]
 "1574R840" [label="R840", fillcolor=3, shape=diamond, style=filled]
  1575 [label="State 1575\n\l833 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq •\l835                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq • ref-qualifier\l837                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq • noexcept-specifier\l839                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq • ref-qualifier noexcept-specifier\l841                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq • attribute-specifier-seq\l843                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq • ref-qualifier attribute-specifier-seq\l845                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq • noexcept-specifier attribute-specifier-seq\l847                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq • ref-qualifier noexcept-specifier attribute-specifier-seq\l"]
  1575 -> 4 [style=solid label="ALIGNAS"]
  1575 -> 1572 [style=solid label="AND"]
  1575 -> 10 [style=solid label="OPEN_SQUARE"]
  1575 -> 894 [style=solid label="NOEXCEPT"]
  1575 -> 1573 [style=solid label="AND_AND"]
  1575 -> 57 [style=dashed label="alignment-specifier"]
  1575 -> 60 [style=dashed label="attribute-specifier"]
  1575 -> 1767 [style=dashed label="attribute-specifier-seq"]
  1575 -> 1768 [style=dashed label="noexcept-specifier"]
  1575 -> 1769 [style=dashed label="ref-qualifier"]
  1575 -> "1575R833d" [label="[OPEN_SQUARE]", style=solid]
 "1575R833d" [label="R833", fillcolor=5, shape=diamond, style=filled]
  1575 -> "1575R833" [style=solid]
 "1575R833" [label="R833", fillcolor=3, shape=diamond, style=filled]
  1576 [label="State 1576\n\l836 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN noexcept-specifier •\l844                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN noexcept-specifier • attribute-specifier-seq\l"]
  1576 -> 4 [style=solid label="ALIGNAS"]
  1576 -> 10 [style=solid label="OPEN_SQUARE"]
  1576 -> 57 [style=dashed label="alignment-specifier"]
  1576 -> 60 [style=dashed label="attribute-specifier"]
  1576 -> 1770 [style=dashed label="attribute-specifier-seq"]
  1576 -> "1576R836d" [label="[OPEN_SQUARE]", style=solid]
 "1576R836d" [label="R836", fillcolor=5, shape=diamond, style=filled]
  1576 -> "1576R836" [style=solid]
 "1576R836" [label="R836", fillcolor=3, shape=diamond, style=filled]
  1577 [label="State 1577\n\l834 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN ref-qualifier •\l838                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN ref-qualifier • noexcept-specifier\l842                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN ref-qualifier • attribute-specifier-seq\l846                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN ref-qualifier • noexcept-specifier attribute-specifier-seq\l"]
  1577 -> 4 [style=solid label="ALIGNAS"]
  1577 -> 10 [style=solid label="OPEN_SQUARE"]
  1577 -> 894 [style=solid label="NOEXCEPT"]
  1577 -> 57 [style=dashed label="alignment-specifier"]
  1577 -> 60 [style=dashed label="attribute-specifier"]
  1577 -> 1771 [style=dashed label="attribute-specifier-seq"]
  1577 -> 1772 [style=dashed label="noexcept-specifier"]
  1577 -> "1577R834d" [label="[OPEN_SQUARE]", style=solid]
 "1577R834d" [label="R834", fillcolor=5, shape=diamond, style=filled]
  1577 -> "1577R834" [style=solid]
 "1577R834" [label="R834", fillcolor=3, shape=diamond, style=filled]
  1578 [label="State 1578\n\l829 parameter-declaration-clause: parameter-declaration-list COMMA ELLIPSIS •\l"]
  1578 -> "1578R829" [style=solid]
 "1578R829" [label="R829", fillcolor=3, shape=diamond, style=filled]
  1579 [label="State 1579\n\l831 parameter-declaration-list: parameter-declaration-list COMMA parameter-declaration •\l"]
  1579 -> "1579R831" [style=solid]
 "1579R831" [label="R831", fillcolor=3, shape=diamond, style=filled]
  1580 [label="State 1580\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l727 noptr-declarator: noptr-declarator OPEN_SQUARE constant-expression CLOSE_SQUARE attribute-specifier-seq •\l"]
  1580 -> 4 [style=solid label="ALIGNAS"]
  1580 -> 10 [style=solid label="OPEN_SQUARE"]
  1580 -> 57 [style=dashed label="alignment-specifier"]
  1580 -> 260 [style=dashed label="attribute-specifier"]
  1580 -> "1580R727d" [label="[OPEN_SQUARE]", style=solid]
 "1580R727d" [label="R727", fillcolor=5, shape=diamond, style=filled]
  1580 -> "1580R727" [style=solid]
 "1580R727" [label="R727", fillcolor=3, shape=diamond, style=filled]
  1581 [label="State 1581\n\l162 concept-definition: CONCEPT concept-name EQ constraint-expression • SEMICOLON\l"]
  1581 -> 1773 [style=solid label="SEMICOLON"]
  1582 [label="State 1582\n\l172 constraint-expression: logical-or-expression •\l566 logical-or-expression: logical-or-expression • OR_OR logical-and-expression\l"]
  1582 -> 904 [style=solid label="OR_OR"]
  1582 -> "1582R172" [style=solid]
 "1582R172" [label="R172", fillcolor=3, shape=diamond, style=filled]
  1583 [label="State 1583\n\l232 deduction-guide: template-name OPEN_PAREN parameter-declaration-clause CLOSE_PAREN DEREF • simple-template-id SEMICOLON\l"]
  1583 -> 310 [style=solid label="IDENTIFIER"]
  1583 -> 1774 [style=dashed label="simple-template-id"]
  1583 -> 142 [style=dashed label="template-name"]
  1584 [label="State 1584\n\l850 placeholder-type-specifier: type-constraint DECLTYPE OPEN_PAREN AUTO CLOSE_PAREN •\l"]
  1584 -> "1584R850" [style=solid]
 "1584R850" [label="R850", fillcolor=3, shape=diamond, style=filled]
  1585 [label="State 1585\n\l 14 alias-declaration: USING IDENTIFIER attribute-specifier-seq EQ defining-type-id SEMICOLON •\l"]
  1585 -> "1585R14" [style=solid]
 "1585R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  1586 [label="State 1586\n\l346 fold-expression: OPEN_PAREN ELLIPSIS fold-operator cast-expression • CLOSE_PAREN\l"]
  1586 -> 1775 [style=solid label="CLOSE_PAREN"]
  1587 [label="State 1587\n\l345 fold-expression: OPEN_PAREN cast-expression fold-operator ELLIPSIS • CLOSE_PAREN\l347                | OPEN_PAREN cast-expression fold-operator ELLIPSIS • fold-operator cast-expression CLOSE_PAREN\l"]
  1587 -> 1232 [style=solid label="PLUS"]
  1587 -> 1233 [style=solid label="MINUS"]
  1587 -> 1234 [style=solid label="EQ"]
  1587 -> 1776 [style=solid label="CLOSE_PAREN"]
  1587 -> 1235 [style=solid label="AND"]
  1587 -> 1236 [style=solid label="MULT_EQ"]
  1587 -> 1237 [style=solid label="DIV_EQ"]
  1587 -> 1238 [style=solid label="MOD_EQ"]
  1587 -> 1239 [style=solid label="PLUS_EQ"]
  1587 -> 1240 [style=solid label="MINUS_EQ"]
  1587 -> 1241 [style=solid label="RSHIFT_EQ"]
  1587 -> 1242 [style=solid label="LSHIFT_EQ"]
  1587 -> 1243 [style=solid label="AND_EQ"]
  1587 -> 1244 [style=solid label="XOR_EQ"]
  1587 -> 1245 [style=solid label="OR_EQ"]
  1587 -> 1246 [style=solid label="COMMA"]
  1587 -> 1247 [style=solid label="AND_AND"]
  1587 -> 1248 [style=solid label="OR_OR"]
  1587 -> 1249 [style=solid label="EQ_EQ"]
  1587 -> 1250 [style=solid label="NOT_EQ"]
  1587 -> 1251 [style=solid label="XOR"]
  1587 -> 1252 [style=solid label="LESS"]
  1587 -> 1253 [style=solid label="GREATER"]
  1587 -> 1254 [style=solid label="MULT"]
  1587 -> 1255 [style=solid label="DIV"]
  1587 -> 1256 [style=solid label="MOD"]
  1587 -> 1257 [style=solid label="OR"]
  1587 -> 1258 [style=solid label="LSHIFT"]
  1587 -> 1259 [style=solid label="RSHIFT"]
  1587 -> 1260 [style=solid label="LESS_EQ"]
  1587 -> 1261 [style=solid label="GREATER_EQ"]
  1587 -> 1262 [style=solid label="DOT_STAR"]
  1587 -> 1263 [style=solid label="DEREF_STAR"]
  1587 -> 1777 [style=dashed label="fold-operator"]
  1588 [label="State 1588\n\l125 cast-expression: OPEN_PAREN type-id CLOSE_PAREN cast-expression •\l"]
  1588 -> "1588R125" [style=solid]
 "1588R125" [label="R125", fillcolor=3, shape=diamond, style=filled]
  1589 [label="State 1589\n\l243 delete-expression: SCOPE DELETE OPEN_SQUARE CLOSE_SQUARE • cast-expression\l534 lambda-introducer: OPEN_SQUARE CLOSE_SQUARE •\l"]
  1589 -> 356 [style=solid label="PLUS"]
  1589 -> 357 [style=solid label="MINUS"]
  1589 -> 2 [style=solid label="IDENTIFIER"]
  1589 -> 358 [style=solid label="OPEN_PAREN"]
  1589 -> 359 [style=solid label="AND"]
  1589 -> 360 [style=solid label="SCOPE"]
  1589 -> 361 [style=solid label="OPEN_SQUARE"]
  1589 -> 362 [style=solid label="CO_AWAIT"]
  1589 -> 363 [style=solid label="ZERO_LB"]
  1589 -> 364 [style=solid label="ZERO_HB"]
  1589 -> 365 [style=solid label="SINGLE_QUOTE"]
  1589 -> 366 [style=solid label="FALSE"]
  1589 -> 367 [style=solid label="TRUE"]
  1589 -> 368 [style=solid label="NOEXCEPT"]
  1589 -> 17 [style=solid label="OPERATOR"]
  1589 -> 26 [style=solid label="DECLTYPE"]
  1589 -> 369 [style=solid label="DELETE"]
  1589 -> 370 [style=solid label="DOT"]
  1589 -> 184 [style=solid label="UNICODE_8"]
  1589 -> 371 [style=solid label="MULT"]
  1589 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1589 -> 372 [style=solid label="ZERO_LX"]
  1589 -> 373 [style=solid label="ZERO_HX"]
  1589 -> 374 [style=solid label="REQUIRES"]
  1589 -> 375 [style=solid label="NEW"]
  1589 -> 376 [style=solid label="COMPL"]
  1589 -> 377 [style=solid label="NOT"]
  1589 -> 378 [style=solid label="PLUS_PLUS"]
  1589 -> 379 [style=solid label="MINUS_MINUS"]
  1589 -> 380 [style=solid label="THIS"]
  1589 -> 36 [style=solid label="AUTO"]
  1589 -> 381 [style=solid label="NULLPTR"]
  1589 -> 382 [style=solid label="DYNAMIC_CAST"]
  1589 -> 383 [style=solid label="STATIC_CAST"]
  1589 -> 384 [style=solid label="REINTERPRET_CAST"]
  1589 -> 385 [style=solid label="CONST_CAST"]
  1589 -> 386 [style=solid label="TYPEID"]
  1589 -> 37 [style=solid label="CHAR"]
  1589 -> 38 [style=solid label="CHAR8_T"]
  1589 -> 39 [style=solid label="CHAR16_T"]
  1589 -> 40 [style=solid label="CHAR32_T"]
  1589 -> 41 [style=solid label="WCHAR_T"]
  1589 -> 42 [style=solid label="BOOL"]
  1589 -> 43 [style=solid label="SHORT"]
  1589 -> 44 [style=solid label="INT"]
  1589 -> 45 [style=solid label="LONG"]
  1589 -> 46 [style=solid label="SIGNED"]
  1589 -> 47 [style=solid label="UNSIGNED"]
  1589 -> 48 [style=solid label="FLOAT"]
  1589 -> 49 [style=solid label="DOUBLE"]
  1589 -> 50 [style=solid label="VOID"]
  1589 -> 55 [style=solid label="TYPENAME"]
  1589 -> 387 [style=solid label="SIZEOF"]
  1589 -> 388 [style=solid label="ALIGNOF"]
  1589 -> 389 [style=solid label="'0'"]
  1589 -> 390 [style=solid label="'1'"]
  1589 -> 391 [style=solid label="'2'"]
  1589 -> 392 [style=solid label="'3'"]
  1589 -> 393 [style=solid label="'4'"]
  1589 -> 394 [style=solid label="'5'"]
  1589 -> 395 [style=solid label="'6'"]
  1589 -> 396 [style=solid label="'7'"]
  1589 -> 397 [style=solid label="'8'"]
  1589 -> 398 [style=solid label="'9'"]
  1589 -> 205 [style=solid label="'u'"]
  1589 -> 206 [style=solid label="'U'"]
  1589 -> 207 [style=solid label="'L'"]
  1589 -> 208 [style=solid label="'R'"]
  1589 -> 401 [style=dashed label="await-expression"]
  1589 -> 402 [style=dashed label="binary-literal"]
  1589 -> 403 [style=dashed label="boolean-literal"]
  1589 -> 1778 [style=dashed label="cast-expression"]
  1589 -> 405 [style=dashed label="character-literal"]
  1589 -> 65 [style=dashed label="class-name"]
  1589 -> 67 [style=dashed label="concept-name"]
  1589 -> 68 [style=dashed label="conversion-function-id"]
  1589 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1589 -> 410 [style=dashed label="decimal-literal"]
  1589 -> 76 [style=dashed label="decltype-specifier"]
  1589 -> 411 [style=dashed label="delete-expression"]
  1589 -> 412 [style=dashed label="digit"]
  1589 -> 413 [style=dashed label="digit-sequence"]
  1589 -> 414 [style=dashed label="encoding-prefix"]
  1589 -> 84 [style=dashed label="enum-name"]
  1589 -> 417 [style=dashed label="floating-point-literal"]
  1589 -> 418 [style=dashed label="fold-expression"]
  1589 -> 419 [style=dashed label="fractional-constant"]
  1589 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1589 -> 421 [style=dashed label="hexadecimal-literal"]
  1589 -> 422 [style=dashed label="hexadecimal-prefix"]
  1589 -> 423 [style=dashed label="id-expression"]
  1589 -> 425 [style=dashed label="integer-literal"]
  1589 -> 426 [style=dashed label="lambda-expression"]
  1589 -> 427 [style=dashed label="lambda-introducer"]
  1589 -> 428 [style=dashed label="literal"]
  1589 -> 95 [style=dashed label="literal-operator-id"]
  1589 -> 99 [style=dashed label="namespace-alias"]
  1589 -> 102 [style=dashed label="namespace-name"]
  1589 -> 432 [style=dashed label="nested-name-specifier"]
  1589 -> 433 [style=dashed label="new-expression"]
  1589 -> 434 [style=dashed label="noexcept-expression"]
  1589 -> 435 [style=dashed label="nonzero-digit"]
  1589 -> 436 [style=dashed label="octal-literal"]
  1589 -> 108 [style=dashed label="operator-function-id"]
  1589 -> 109 [style=dashed label="placeholder-type-specifier"]
  1589 -> 438 [style=dashed label="pointer-literal"]
  1589 -> 439 [style=dashed label="postfix-expression"]
  1589 -> 440 [style=dashed label="primary-expression"]
  1589 -> 112 [style=dashed label="qualified-id"]
  1589 -> 442 [style=dashed label="requires-expression"]
  1589 -> 114 [style=dashed label="simple-template-id"]
  1589 -> 529 [style=dashed label="simple-type-specifier"]
  1589 -> 445 [style=dashed label="string-literal"]
  1589 -> 120 [style=dashed label="template-id"]
  1589 -> 215 [style=dashed label="template-name"]
  1589 -> 123 [style=dashed label="type-constraint"]
  1589 -> 124 [style=dashed label="type-name"]
  1589 -> 126 [style=dashed label="typedef-name"]
  1589 -> 531 [style=dashed label="typename-specifier"]
  1589 -> 449 [style=dashed label="unary-expression"]
  1589 -> 450 [style=dashed label="unary-operator"]
  1589 -> 129 [style=dashed label="unqualified-id"]
  1589 -> 451 [style=dashed label="user-defined-character-literal"]
  1589 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1589 -> 453 [style=dashed label="user-defined-integer-literal"]
  1589 -> 454 [style=dashed label="user-defined-literal"]
  1589 -> 455 [style=dashed label="user-defined-string-literal"]
  1589 -> "1589R534d" [label="[IDENTIFIER, OPEN_PAREN, SCOPE, OPEN_SQUARE, NOEXCEPT, DECLTYPE, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPENAME]", style=solid]
 "1589R534d" [label="R534", fillcolor=5, shape=diamond, style=filled]
  1589 -> "1589R534" [style=solid]
 "1589R534" [label="R534", fillcolor=3, shape=diamond, style=filled]
  1590 [label="State 1590\n\l676 new-expression: SCOPE NEW OPEN_PAREN type-id • CLOSE_PAREN\l680               | SCOPE NEW OPEN_PAREN type-id • CLOSE_PAREN new-initializer\l"]
  1590 -> 1779 [style=solid label="CLOSE_PAREN"]
  1591 [label="State 1591\n\l678 new-expression: SCOPE NEW new-placement OPEN_PAREN • type-id CLOSE_PAREN\l682               | SCOPE NEW new-placement OPEN_PAREN • type-id CLOSE_PAREN new-initializer\l"]
  1591 -> 162 [style=solid label="IDENTIFIER"]
  1591 -> 9 [style=solid label="SCOPE"]
  1591 -> 12 [style=solid label="CLASS"]
  1591 -> 13 [style=solid label="STRUCT"]
  1591 -> 14 [style=solid label="UNION"]
  1591 -> 18 [style=solid label="CONST"]
  1591 -> 19 [style=solid label="VOLATILE"]
  1591 -> 26 [style=solid label="DECLTYPE"]
  1591 -> 135 [style=solid label="ENUM"]
  1591 -> 36 [style=solid label="AUTO"]
  1591 -> 37 [style=solid label="CHAR"]
  1591 -> 38 [style=solid label="CHAR8_T"]
  1591 -> 39 [style=solid label="CHAR16_T"]
  1591 -> 40 [style=solid label="CHAR32_T"]
  1591 -> 41 [style=solid label="WCHAR_T"]
  1591 -> 42 [style=solid label="BOOL"]
  1591 -> 43 [style=solid label="SHORT"]
  1591 -> 44 [style=solid label="INT"]
  1591 -> 45 [style=solid label="LONG"]
  1591 -> 46 [style=solid label="SIGNED"]
  1591 -> 47 [style=solid label="UNSIGNED"]
  1591 -> 48 [style=solid label="FLOAT"]
  1591 -> 49 [style=solid label="DOUBLE"]
  1591 -> 50 [style=solid label="VOID"]
  1591 -> 55 [style=solid label="TYPENAME"]
  1591 -> 209 [style=dashed label="class-key"]
  1591 -> 65 [style=dashed label="class-name"]
  1591 -> 67 [style=dashed label="concept-name"]
  1591 -> 69 [style=dashed label="cv-qualifier"]
  1591 -> 76 [style=dashed label="decltype-specifier"]
  1591 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1591 -> 80 [style=dashed label="elaborated-type-specifier"]
  1591 -> 84 [style=dashed label="enum-name"]
  1591 -> 99 [style=dashed label="namespace-alias"]
  1591 -> 102 [style=dashed label="namespace-name"]
  1591 -> 212 [style=dashed label="nested-name-specifier"]
  1591 -> 109 [style=dashed label="placeholder-type-specifier"]
  1591 -> 141 [style=dashed label="simple-template-id"]
  1591 -> 115 [style=dashed label="simple-type-specifier"]
  1591 -> 215 [style=dashed label="template-name"]
  1591 -> 123 [style=dashed label="type-constraint"]
  1591 -> 1780 [style=dashed label="type-id"]
  1591 -> 124 [style=dashed label="type-name"]
  1591 -> 216 [style=dashed label="type-specifier"]
  1591 -> 447 [style=dashed label="type-specifier-seq"]
  1591 -> 126 [style=dashed label="typedef-name"]
  1591 -> 127 [style=dashed label="typename-specifier"]
  1592 [label="State 1592\n\l670 new-expression: SCOPE NEW new-placement new-type-id •\l674               | SCOPE NEW new-placement new-type-id • new-initializer\l"]
  1592 -> 1303 [style=solid label="OPEN_PAREN"]
  1592 -> 935 [style=solid label="OPEN_BRACE"]
  1592 -> 1304 [style=dashed label="braced-init-list"]
  1592 -> 1781 [style=dashed label="new-initializer"]
  1592 -> "1592R670d" [label="[OPEN_BRACE]", style=solid]
 "1592R670d" [label="R670", fillcolor=5, shape=diamond, style=filled]
  1592 -> "1592R670" [style=solid]
 "1592R670" [label="R670", fillcolor=3, shape=diamond, style=filled]
  1593 [label="State 1593\n\l672 new-expression: SCOPE NEW new-type-id new-initializer •\l"]
  1593 -> "1593R672" [style=solid]
 "1593R672" [label="R672", fillcolor=3, shape=diamond, style=filled]
  1594 [label="State 1594\n\l465 init-capture: ELLIPSIS IDENTIFIER initializer •\l"]
  1594 -> "1594R465" [style=solid]
 "1594R465" [label="R465", fillcolor=3, shape=diamond, style=filled]
  1595 [label="State 1595\n\l960 simple-capture: AND IDENTIFIER ELLIPSIS •\l"]
  1595 -> "1595R960" [style=solid]
 "1595R960" [label="R960", fillcolor=3, shape=diamond, style=filled]
  1596 [label="State 1596\n\l467 init-capture: AND IDENTIFIER initializer •\l"]
  1596 -> "1596R467" [style=solid]
 "1596R467" [label="R467", fillcolor=3, shape=diamond, style=filled]
  1597 [label="State 1597\n\l468 init-capture: AND ELLIPSIS IDENTIFIER • initializer\l"]
  1597 -> 1273 [style=solid label="EQ"]
  1597 -> 643 [style=solid label="OPEN_PAREN"]
  1597 -> 935 [style=solid label="OPEN_BRACE"]
  1597 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1597 -> 646 [style=dashed label="braced-init-list"]
  1597 -> 1782 [style=dashed label="initializer"]
  1598 [label="State 1598\n\l467 init-capture: AND • IDENTIFIER initializer\l468             | AND • ELLIPSIS IDENTIFIER initializer\l959 simple-capture: AND • IDENTIFIER\l960               | AND • IDENTIFIER ELLIPSIS\l"]
  1598 -> 1277 [style=solid label="IDENTIFIER"]
  1598 -> 1278 [style=solid label="ELLIPSIS"]
  1599 [label="State 1599\n\l123 capture-list: capture-list • COMMA capture\l527 lambda-capture: capture-default COMMA capture-list •\l"]
  1599 -> 1281 [style=solid label="COMMA"]
  1599 -> "1599R527" [style=solid]
 "1599R527" [label="R527", fillcolor=3, shape=diamond, style=filled]
  1600 [label="State 1600\n\l123 capture-list: capture-list COMMA capture •\l"]
  1600 -> "1600R123" [style=solid]
 "1600R123" [label="R123", fillcolor=3, shape=diamond, style=filled]
  1601 [label="State 1601\n\l692 noexcept-expression: NOEXCEPT OPEN_PAREN expression CLOSE_PAREN •\l"]
  1601 -> "1601R692" [style=solid]
 "1601R692" [label="R692", fillcolor=3, shape=diamond, style=filled]
  1602 [label="State 1602\n\l244 delete-expression: DELETE OPEN_SQUARE CLOSE_SQUARE cast-expression •\l"]
  1602 -> "1602R244" [style=solid]
 "1602R244" [label="R244", fillcolor=3, shape=diamond, style=filled]
  1603 [label="State 1603\n\l926 requirement-parameter-list: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN •\l"]
  1603 -> "1603R926" [style=solid]
 "1603R926" [label="R926", fillcolor=3, shape=diamond, style=filled]
  1604 [label="State 1604\n\l156 compound-requirement: OPEN_BRACE expression • CLOSE_BRACE SEMICOLON\l157                     | OPEN_BRACE expression • CLOSE_BRACE NOEXCEPT SEMICOLON\l158                     | OPEN_BRACE expression • CLOSE_BRACE return-type-requirement SEMICOLON\l159                     | OPEN_BRACE expression • CLOSE_BRACE NOEXCEPT return-type-requirement SEMICOLON\l335 expression: expression • COMMA assignment-expression\l"]
  1604 -> 1029 [style=solid label="COMMA"]
  1604 -> 1783 [style=solid label="CLOSE_BRACE"]
  1605 [label="State 1605\n\l125 cast-expression: OPEN_PAREN • type-id CLOSE_PAREN cast-expression\l345 fold-expression: OPEN_PAREN • cast-expression fold-operator ELLIPSIS CLOSE_PAREN\l346                | OPEN_PAREN • ELLIPSIS fold-operator cast-expression CLOSE_PAREN\l347                | OPEN_PAREN • cast-expression fold-operator ELLIPSIS fold-operator cast-expression CLOSE_PAREN\l881 primary-expression: OPEN_PAREN • expression CLOSE_PAREN\l926 requirement-parameter-list: OPEN_PAREN • parameter-declaration-clause CLOSE_PAREN\l"]
  1605 -> 356 [style=solid label="PLUS"]
  1605 -> 357 [style=solid label="MINUS"]
  1605 -> 2 [style=solid label="IDENTIFIER"]
  1605 -> 4 [style=solid label="ALIGNAS"]
  1605 -> 358 [style=solid label="OPEN_PAREN"]
  1605 -> 1784 [style=solid label="ELLIPSIS"]
  1605 -> 359 [style=solid label="AND"]
  1605 -> 360 [style=solid label="SCOPE"]
  1605 -> 663 [style=solid label="OPEN_SQUARE"]
  1605 -> 362 [style=solid label="CO_AWAIT"]
  1605 -> 11 [style=solid label="VIRTUAL"]
  1605 -> 363 [style=solid label="ZERO_LB"]
  1605 -> 364 [style=solid label="ZERO_HB"]
  1605 -> 365 [style=solid label="SINGLE_QUOTE"]
  1605 -> 366 [style=solid label="FALSE"]
  1605 -> 367 [style=solid label="TRUE"]
  1605 -> 12 [style=solid label="CLASS"]
  1605 -> 13 [style=solid label="STRUCT"]
  1605 -> 14 [style=solid label="UNION"]
  1605 -> 368 [style=solid label="NOEXCEPT"]
  1605 -> 17 [style=solid label="OPERATOR"]
  1605 -> 18 [style=solid label="CONST"]
  1605 -> 19 [style=solid label="VOLATILE"]
  1605 -> 20 [style=solid label="FRIEND"]
  1605 -> 21 [style=solid label="TYPEDEF"]
  1605 -> 22 [style=solid label="CONSTEXPR"]
  1605 -> 23 [style=solid label="CONSTEVAL"]
  1605 -> 24 [style=solid label="CONSTINIT"]
  1605 -> 258 [style=solid label="INLINE"]
  1605 -> 26 [style=solid label="DECLTYPE"]
  1605 -> 369 [style=solid label="DELETE"]
  1605 -> 370 [style=solid label="DOT"]
  1605 -> 27 [style=solid label="ENUM"]
  1605 -> 184 [style=solid label="UNICODE_8"]
  1605 -> 259 [style=solid label="EXTERN"]
  1605 -> 29 [style=solid label="EXPLICIT"]
  1605 -> 371 [style=solid label="MULT"]
  1605 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1605 -> 372 [style=solid label="ZERO_LX"]
  1605 -> 373 [style=solid label="ZERO_HX"]
  1605 -> 374 [style=solid label="REQUIRES"]
  1605 -> 375 [style=solid label="NEW"]
  1605 -> 376 [style=solid label="COMPL"]
  1605 -> 377 [style=solid label="NOT"]
  1605 -> 378 [style=solid label="PLUS_PLUS"]
  1605 -> 379 [style=solid label="MINUS_MINUS"]
  1605 -> 1785 [style=solid label="THIS"]
  1605 -> 36 [style=solid label="AUTO"]
  1605 -> 381 [style=solid label="NULLPTR"]
  1605 -> 382 [style=solid label="DYNAMIC_CAST"]
  1605 -> 383 [style=solid label="STATIC_CAST"]
  1605 -> 384 [style=solid label="REINTERPRET_CAST"]
  1605 -> 385 [style=solid label="CONST_CAST"]
  1605 -> 386 [style=solid label="TYPEID"]
  1605 -> 37 [style=solid label="CHAR"]
  1605 -> 38 [style=solid label="CHAR8_T"]
  1605 -> 39 [style=solid label="CHAR16_T"]
  1605 -> 40 [style=solid label="CHAR32_T"]
  1605 -> 41 [style=solid label="WCHAR_T"]
  1605 -> 42 [style=solid label="BOOL"]
  1605 -> 43 [style=solid label="SHORT"]
  1605 -> 44 [style=solid label="INT"]
  1605 -> 45 [style=solid label="LONG"]
  1605 -> 46 [style=solid label="SIGNED"]
  1605 -> 47 [style=solid label="UNSIGNED"]
  1605 -> 48 [style=solid label="FLOAT"]
  1605 -> 49 [style=solid label="DOUBLE"]
  1605 -> 50 [style=solid label="VOID"]
  1605 -> 52 [style=solid label="STATIC"]
  1605 -> 53 [style=solid label="THREAD_LOCAL"]
  1605 -> 54 [style=solid label="MUTABLE"]
  1605 -> 523 [style=solid label="THROW"]
  1605 -> 55 [style=solid label="TYPENAME"]
  1605 -> 387 [style=solid label="SIZEOF"]
  1605 -> 388 [style=solid label="ALIGNOF"]
  1605 -> 524 [style=solid label="CO_YIELD"]
  1605 -> 389 [style=solid label="'0'"]
  1605 -> 390 [style=solid label="'1'"]
  1605 -> 391 [style=solid label="'2'"]
  1605 -> 392 [style=solid label="'3'"]
  1605 -> 393 [style=solid label="'4'"]
  1605 -> 394 [style=solid label="'5'"]
  1605 -> 395 [style=solid label="'6'"]
  1605 -> 396 [style=solid label="'7'"]
  1605 -> 397 [style=solid label="'8'"]
  1605 -> 398 [style=solid label="'9'"]
  1605 -> 205 [style=solid label="'u'"]
  1605 -> 206 [style=solid label="'U'"]
  1605 -> 207 [style=solid label="'L'"]
  1605 -> 208 [style=solid label="'R'"]
  1605 -> 399 [style=dashed label="additive-expression"]
  1605 -> 57 [style=dashed label="alignment-specifier"]
  1605 -> 400 [style=dashed label="and-expression"]
  1605 -> 525 [style=dashed label="assignment-expression"]
  1605 -> 60 [style=dashed label="attribute-specifier"]
  1605 -> 473 [style=dashed label="attribute-specifier-seq"]
  1605 -> 401 [style=dashed label="await-expression"]
  1605 -> 402 [style=dashed label="binary-literal"]
  1605 -> 403 [style=dashed label="boolean-literal"]
  1605 -> 757 [style=dashed label="cast-expression"]
  1605 -> 405 [style=dashed label="character-literal"]
  1605 -> 63 [style=dashed label="class-head"]
  1605 -> 64 [style=dashed label="class-key"]
  1605 -> 65 [style=dashed label="class-name"]
  1605 -> 66 [style=dashed label="class-specifier"]
  1605 -> 406 [style=dashed label="compare-expression"]
  1605 -> 67 [style=dashed label="concept-name"]
  1605 -> 526 [style=dashed label="conditional-expression"]
  1605 -> 68 [style=dashed label="conversion-function-id"]
  1605 -> 69 [style=dashed label="cv-qualifier"]
  1605 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1605 -> 410 [style=dashed label="decimal-literal"]
  1605 -> 70 [style=dashed label="decl-specifier"]
  1605 -> 474 [style=dashed label="decl-specifier-seq"]
  1605 -> 76 [style=dashed label="decltype-specifier"]
  1605 -> 78 [style=dashed label="defining-type-specifier"]
  1605 -> 411 [style=dashed label="delete-expression"]
  1605 -> 412 [style=dashed label="digit"]
  1605 -> 413 [style=dashed label="digit-sequence"]
  1605 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1605 -> 80 [style=dashed label="elaborated-type-specifier"]
  1605 -> 414 [style=dashed label="encoding-prefix"]
  1605 -> 82 [style=dashed label="enum-head"]
  1605 -> 263 [style=dashed label="enum-key"]
  1605 -> 84 [style=dashed label="enum-name"]
  1605 -> 85 [style=dashed label="enum-specifier"]
  1605 -> 415 [style=dashed label="equality-expression"]
  1605 -> 416 [style=dashed label="exclusive-or-expression"]
  1605 -> 264 [style=dashed label="explicit-specifier"]
  1605 -> 758 [style=dashed label="expression"]
  1605 -> 417 [style=dashed label="floating-point-literal"]
  1605 -> 418 [style=dashed label="fold-expression"]
  1605 -> 419 [style=dashed label="fractional-constant"]
  1605 -> 91 [style=dashed label="function-specifier"]
  1605 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1605 -> 421 [style=dashed label="hexadecimal-literal"]
  1605 -> 422 [style=dashed label="hexadecimal-prefix"]
  1605 -> 423 [style=dashed label="id-expression"]
  1605 -> 424 [style=dashed label="inclusive-or-expression"]
  1605 -> 425 [style=dashed label="integer-literal"]
  1605 -> 426 [style=dashed label="lambda-expression"]
  1605 -> 427 [style=dashed label="lambda-introducer"]
  1605 -> 428 [style=dashed label="literal"]
  1605 -> 95 [style=dashed label="literal-operator-id"]
  1605 -> 429 [style=dashed label="logical-and-expression"]
  1605 -> 528 [style=dashed label="logical-or-expression"]
  1605 -> 431 [style=dashed label="multiplicative-expression"]
  1605 -> 99 [style=dashed label="namespace-alias"]
  1605 -> 102 [style=dashed label="namespace-name"]
  1605 -> 432 [style=dashed label="nested-name-specifier"]
  1605 -> 433 [style=dashed label="new-expression"]
  1605 -> 434 [style=dashed label="noexcept-expression"]
  1605 -> 435 [style=dashed label="nonzero-digit"]
  1605 -> 436 [style=dashed label="octal-literal"]
  1605 -> 108 [style=dashed label="operator-function-id"]
  1605 -> 731 [style=dashed label="parameter-declaration"]
  1605 -> 1287 [style=dashed label="parameter-declaration-clause"]
  1605 -> 733 [style=dashed label="parameter-declaration-list"]
  1605 -> 109 [style=dashed label="placeholder-type-specifier"]
  1605 -> 437 [style=dashed label="pm-expression"]
  1605 -> 438 [style=dashed label="pointer-literal"]
  1605 -> 439 [style=dashed label="postfix-expression"]
  1605 -> 440 [style=dashed label="primary-expression"]
  1605 -> 112 [style=dashed label="qualified-id"]
  1605 -> 441 [style=dashed label="relational-expression"]
  1605 -> 442 [style=dashed label="requires-expression"]
  1605 -> 443 [style=dashed label="shift-expression"]
  1605 -> 114 [style=dashed label="simple-template-id"]
  1605 -> 444 [style=dashed label="simple-type-specifier"]
  1605 -> 117 [style=dashed label="storage-class-specifier"]
  1605 -> 445 [style=dashed label="string-literal"]
  1605 -> 120 [style=dashed label="template-id"]
  1605 -> 215 [style=dashed label="template-name"]
  1605 -> 530 [style=dashed label="throw-expression"]
  1605 -> 123 [style=dashed label="type-constraint"]
  1605 -> 759 [style=dashed label="type-id"]
  1605 -> 124 [style=dashed label="type-name"]
  1605 -> 1786 [style=dashed label="type-specifier"]
  1605 -> 447 [style=dashed label="type-specifier-seq"]
  1605 -> 126 [style=dashed label="typedef-name"]
  1605 -> 448 [style=dashed label="typename-specifier"]
  1605 -> 449 [style=dashed label="unary-expression"]
  1605 -> 450 [style=dashed label="unary-operator"]
  1605 -> 129 [style=dashed label="unqualified-id"]
  1605 -> 451 [style=dashed label="user-defined-character-literal"]
  1605 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1605 -> 453 [style=dashed label="user-defined-integer-literal"]
  1605 -> 454 [style=dashed label="user-defined-literal"]
  1605 -> 455 [style=dashed label="user-defined-string-literal"]
  1605 -> 532 [style=dashed label="yield-expression"]
  1606 [label="State 1606\n\l664 nested-requirement: REQUIRES constraint-expression • SEMICOLON\l"]
  1606 -> 1787 [style=solid label="SEMICOLON"]
  1607 [label="State 1607\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l1102 type-requirement: TYPENAME nested-name-specifier • type-name SEMICOLON\l1112 typename-specifier: TYPENAME nested-name-specifier • IDENTIFIER\l1113                   | TYPENAME nested-name-specifier • simple-template-id\l1114                   | TYPENAME nested-name-specifier • TEMPLATE simple-template-id\l"]
  1607 -> 1788 [style=solid label="IDENTIFIER"]
  1607 -> 573 [style=solid label="TEMPLATE"]
  1607 -> 65 [style=dashed label="class-name"]
  1607 -> 84 [style=dashed label="enum-name"]
  1607 -> 1789 [style=dashed label="simple-template-id"]
  1607 -> 142 [style=dashed label="template-name"]
  1607 -> 1790 [style=dashed label="type-name"]
  1607 -> 126 [style=dashed label="typedef-name"]
  1608 [label="State 1608\n\l656 nested-name-specifier: type-name • SCOPE\l1101 type-requirement: TYPENAME type-name • SEMICOLON\l"]
  1608 -> 1791 [style=solid label="SEMICOLON"]
  1608 -> 341 [style=solid label="SCOPE"]
  1609 [label="State 1609\n\l982 simple-requirement: expression SEMICOLON •\l"]
  1609 -> "1609R982" [style=solid]
 "1609R982" [label="R982", fillcolor=3, shape=diamond, style=filled]
  1610 [label="State 1610\n\l925 requirement-body: OPEN_BRACE requirement-seq CLOSE_BRACE •\l"]
  1610 -> "1610R925" [style=solid]
 "1610R925" [label="R925", fillcolor=3, shape=diamond, style=filled]
  1611 [label="State 1611\n\l928 requirement-seq: requirement-seq requirement •\l"]
  1611 -> "1611R928" [style=solid]
 "1611R928" [label="R928", fillcolor=3, shape=diamond, style=filled]
  1612 [label="State 1612\n\l687 new-placement: OPEN_PAREN expression-list CLOSE_PAREN •\l"]
  1612 -> "1612R687" [style=solid]
 "1612R687" [label="R687", fillcolor=3, shape=diamond, style=filled]
  1613 [label="State 1613\n\l677 new-expression: NEW OPEN_PAREN type-id CLOSE_PAREN •\l681               | NEW OPEN_PAREN type-id CLOSE_PAREN • new-initializer\l"]
  1613 -> 1303 [style=solid label="OPEN_PAREN"]
  1613 -> 935 [style=solid label="OPEN_BRACE"]
  1613 -> 1304 [style=dashed label="braced-init-list"]
  1613 -> 1792 [style=dashed label="new-initializer"]
  1613 -> "1613R677d" [label="[OPEN_BRACE]", style=solid]
 "1613R677d" [label="R677", fillcolor=5, shape=diamond, style=filled]
  1613 -> "1613R677" [style=solid]
 "1613R677" [label="R677", fillcolor=3, shape=diamond, style=filled]
  1614 [label="State 1614\n\l679 new-expression: NEW new-placement OPEN_PAREN type-id • CLOSE_PAREN\l683               | NEW new-placement OPEN_PAREN type-id • CLOSE_PAREN new-initializer\l"]
  1614 -> 1793 [style=solid label="CLOSE_PAREN"]
  1615 [label="State 1615\n\l675 new-expression: NEW new-placement new-type-id new-initializer •\l"]
  1615 -> "1615R675" [style=solid]
 "1615R675" [label="R675", fillcolor=3, shape=diamond, style=filled]
  1616 [label="State 1616\n\l684 new-initializer: OPEN_PAREN CLOSE_PAREN •\l"]
  1616 -> "1616R684" [style=solid]
 "1616R684" [label="R684", fillcolor=3, shape=diamond, style=filled]
  1617 [label="State 1617\n\l685 new-initializer: OPEN_PAREN expression-list • CLOSE_PAREN\l"]
  1617 -> 1794 [style=solid label="CLOSE_PAREN"]
  1618 [label="State 1618\n\l729 noptr-new-declarator: OPEN_SQUARE CLOSE_SQUARE •\l731                     | OPEN_SQUARE CLOSE_SQUARE • attribute-specifier-seq\l"]
  1618 -> 4 [style=solid label="ALIGNAS"]
  1618 -> 10 [style=solid label="OPEN_SQUARE"]
  1618 -> 57 [style=dashed label="alignment-specifier"]
  1618 -> 60 [style=dashed label="attribute-specifier"]
  1618 -> 1795 [style=dashed label="attribute-specifier-seq"]
  1618 -> "1618R729d" [label="[OPEN_SQUARE]", style=solid]
 "1618R729d" [label="R729", fillcolor=5, shape=diamond, style=filled]
  1618 -> "1618R729" [style=solid]
 "1618R729" [label="R729", fillcolor=3, shape=diamond, style=filled]
  1619 [label="State 1619\n\l335 expression: expression • COMMA assignment-expression\l730 noptr-new-declarator: OPEN_SQUARE expression • CLOSE_SQUARE\l732                     | OPEN_SQUARE expression • CLOSE_SQUARE attribute-specifier-seq\l"]
  1619 -> 1029 [style=solid label="COMMA"]
  1619 -> 1796 [style=solid label="CLOSE_SQUARE"]
  1620 [label="State 1620\n\l733 noptr-new-declarator: noptr-new-declarator OPEN_SQUARE • constant-expression CLOSE_SQUARE\l734                     | noptr-new-declarator OPEN_SQUARE • constant-expression CLOSE_SQUARE attribute-specifier-seq\l"]
  1620 -> 356 [style=solid label="PLUS"]
  1620 -> 357 [style=solid label="MINUS"]
  1620 -> 2 [style=solid label="IDENTIFIER"]
  1620 -> 358 [style=solid label="OPEN_PAREN"]
  1620 -> 359 [style=solid label="AND"]
  1620 -> 360 [style=solid label="SCOPE"]
  1620 -> 361 [style=solid label="OPEN_SQUARE"]
  1620 -> 362 [style=solid label="CO_AWAIT"]
  1620 -> 363 [style=solid label="ZERO_LB"]
  1620 -> 364 [style=solid label="ZERO_HB"]
  1620 -> 365 [style=solid label="SINGLE_QUOTE"]
  1620 -> 366 [style=solid label="FALSE"]
  1620 -> 367 [style=solid label="TRUE"]
  1620 -> 368 [style=solid label="NOEXCEPT"]
  1620 -> 17 [style=solid label="OPERATOR"]
  1620 -> 26 [style=solid label="DECLTYPE"]
  1620 -> 369 [style=solid label="DELETE"]
  1620 -> 370 [style=solid label="DOT"]
  1620 -> 184 [style=solid label="UNICODE_8"]
  1620 -> 371 [style=solid label="MULT"]
  1620 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1620 -> 372 [style=solid label="ZERO_LX"]
  1620 -> 373 [style=solid label="ZERO_HX"]
  1620 -> 374 [style=solid label="REQUIRES"]
  1620 -> 375 [style=solid label="NEW"]
  1620 -> 376 [style=solid label="COMPL"]
  1620 -> 377 [style=solid label="NOT"]
  1620 -> 378 [style=solid label="PLUS_PLUS"]
  1620 -> 379 [style=solid label="MINUS_MINUS"]
  1620 -> 380 [style=solid label="THIS"]
  1620 -> 36 [style=solid label="AUTO"]
  1620 -> 381 [style=solid label="NULLPTR"]
  1620 -> 382 [style=solid label="DYNAMIC_CAST"]
  1620 -> 383 [style=solid label="STATIC_CAST"]
  1620 -> 384 [style=solid label="REINTERPRET_CAST"]
  1620 -> 385 [style=solid label="CONST_CAST"]
  1620 -> 386 [style=solid label="TYPEID"]
  1620 -> 37 [style=solid label="CHAR"]
  1620 -> 38 [style=solid label="CHAR8_T"]
  1620 -> 39 [style=solid label="CHAR16_T"]
  1620 -> 40 [style=solid label="CHAR32_T"]
  1620 -> 41 [style=solid label="WCHAR_T"]
  1620 -> 42 [style=solid label="BOOL"]
  1620 -> 43 [style=solid label="SHORT"]
  1620 -> 44 [style=solid label="INT"]
  1620 -> 45 [style=solid label="LONG"]
  1620 -> 46 [style=solid label="SIGNED"]
  1620 -> 47 [style=solid label="UNSIGNED"]
  1620 -> 48 [style=solid label="FLOAT"]
  1620 -> 49 [style=solid label="DOUBLE"]
  1620 -> 50 [style=solid label="VOID"]
  1620 -> 55 [style=solid label="TYPENAME"]
  1620 -> 387 [style=solid label="SIZEOF"]
  1620 -> 388 [style=solid label="ALIGNOF"]
  1620 -> 389 [style=solid label="'0'"]
  1620 -> 390 [style=solid label="'1'"]
  1620 -> 391 [style=solid label="'2'"]
  1620 -> 392 [style=solid label="'3'"]
  1620 -> 393 [style=solid label="'4'"]
  1620 -> 394 [style=solid label="'5'"]
  1620 -> 395 [style=solid label="'6'"]
  1620 -> 396 [style=solid label="'7'"]
  1620 -> 397 [style=solid label="'8'"]
  1620 -> 398 [style=solid label="'9'"]
  1620 -> 205 [style=solid label="'u'"]
  1620 -> 206 [style=solid label="'U'"]
  1620 -> 207 [style=solid label="'L'"]
  1620 -> 208 [style=solid label="'R'"]
  1620 -> 399 [style=dashed label="additive-expression"]
  1620 -> 400 [style=dashed label="and-expression"]
  1620 -> 401 [style=dashed label="await-expression"]
  1620 -> 402 [style=dashed label="binary-literal"]
  1620 -> 403 [style=dashed label="boolean-literal"]
  1620 -> 404 [style=dashed label="cast-expression"]
  1620 -> 405 [style=dashed label="character-literal"]
  1620 -> 65 [style=dashed label="class-name"]
  1620 -> 406 [style=dashed label="compare-expression"]
  1620 -> 67 [style=dashed label="concept-name"]
  1620 -> 407 [style=dashed label="conditional-expression"]
  1620 -> 1797 [style=dashed label="constant-expression"]
  1620 -> 68 [style=dashed label="conversion-function-id"]
  1620 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1620 -> 410 [style=dashed label="decimal-literal"]
  1620 -> 76 [style=dashed label="decltype-specifier"]
  1620 -> 411 [style=dashed label="delete-expression"]
  1620 -> 412 [style=dashed label="digit"]
  1620 -> 413 [style=dashed label="digit-sequence"]
  1620 -> 414 [style=dashed label="encoding-prefix"]
  1620 -> 84 [style=dashed label="enum-name"]
  1620 -> 415 [style=dashed label="equality-expression"]
  1620 -> 416 [style=dashed label="exclusive-or-expression"]
  1620 -> 417 [style=dashed label="floating-point-literal"]
  1620 -> 418 [style=dashed label="fold-expression"]
  1620 -> 419 [style=dashed label="fractional-constant"]
  1620 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1620 -> 421 [style=dashed label="hexadecimal-literal"]
  1620 -> 422 [style=dashed label="hexadecimal-prefix"]
  1620 -> 423 [style=dashed label="id-expression"]
  1620 -> 424 [style=dashed label="inclusive-or-expression"]
  1620 -> 425 [style=dashed label="integer-literal"]
  1620 -> 426 [style=dashed label="lambda-expression"]
  1620 -> 427 [style=dashed label="lambda-introducer"]
  1620 -> 428 [style=dashed label="literal"]
  1620 -> 95 [style=dashed label="literal-operator-id"]
  1620 -> 429 [style=dashed label="logical-and-expression"]
  1620 -> 430 [style=dashed label="logical-or-expression"]
  1620 -> 431 [style=dashed label="multiplicative-expression"]
  1620 -> 99 [style=dashed label="namespace-alias"]
  1620 -> 102 [style=dashed label="namespace-name"]
  1620 -> 432 [style=dashed label="nested-name-specifier"]
  1620 -> 433 [style=dashed label="new-expression"]
  1620 -> 434 [style=dashed label="noexcept-expression"]
  1620 -> 435 [style=dashed label="nonzero-digit"]
  1620 -> 436 [style=dashed label="octal-literal"]
  1620 -> 108 [style=dashed label="operator-function-id"]
  1620 -> 109 [style=dashed label="placeholder-type-specifier"]
  1620 -> 437 [style=dashed label="pm-expression"]
  1620 -> 438 [style=dashed label="pointer-literal"]
  1620 -> 439 [style=dashed label="postfix-expression"]
  1620 -> 440 [style=dashed label="primary-expression"]
  1620 -> 112 [style=dashed label="qualified-id"]
  1620 -> 441 [style=dashed label="relational-expression"]
  1620 -> 442 [style=dashed label="requires-expression"]
  1620 -> 443 [style=dashed label="shift-expression"]
  1620 -> 114 [style=dashed label="simple-template-id"]
  1620 -> 529 [style=dashed label="simple-type-specifier"]
  1620 -> 445 [style=dashed label="string-literal"]
  1620 -> 120 [style=dashed label="template-id"]
  1620 -> 215 [style=dashed label="template-name"]
  1620 -> 123 [style=dashed label="type-constraint"]
  1620 -> 124 [style=dashed label="type-name"]
  1620 -> 126 [style=dashed label="typedef-name"]
  1620 -> 531 [style=dashed label="typename-specifier"]
  1620 -> 449 [style=dashed label="unary-expression"]
  1620 -> 450 [style=dashed label="unary-operator"]
  1620 -> 129 [style=dashed label="unqualified-id"]
  1620 -> 451 [style=dashed label="user-defined-character-literal"]
  1620 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1620 -> 453 [style=dashed label="user-defined-integer-literal"]
  1620 -> 454 [style=dashed label="user-defined-literal"]
  1620 -> 455 [style=dashed label="user-defined-string-literal"]
  1621 [label="State 1621\n\l666 new-declarator: ptr-operator new-declarator •\l"]
  1621 -> "1621R666" [style=solid]
 "1621R666" [label="R666", fillcolor=3, shape=diamond, style=filled]
  1622 [label="State 1622\n\l873 postfix-expression: DYNAMIC_CAST LESS type-id GREATER • OPEN_PAREN expression CLOSE_PAREN\l"]
  1622 -> 1798 [style=solid label="OPEN_PAREN"]
  1623 [label="State 1623\n\l874 postfix-expression: STATIC_CAST LESS type-id GREATER • OPEN_PAREN expression CLOSE_PAREN\l"]
  1623 -> 1799 [style=solid label="OPEN_PAREN"]
  1624 [label="State 1624\n\l875 postfix-expression: REINTERPRET_CAST LESS type-id GREATER • OPEN_PAREN expression CLOSE_PAREN\l"]
  1624 -> 1800 [style=solid label="OPEN_PAREN"]
  1625 [label="State 1625\n\l876 postfix-expression: CONST_CAST LESS type-id GREATER • OPEN_PAREN expression CLOSE_PAREN\l"]
  1625 -> 1801 [style=solid label="OPEN_PAREN"]
  1626 [label="State 1626\n\l877 postfix-expression: TYPEID OPEN_PAREN expression CLOSE_PAREN •\l"]
  1626 -> "1626R877" [style=solid]
 "1626R877" [label="R877", fillcolor=3, shape=diamond, style=filled]
  1627 [label="State 1627\n\l878 postfix-expression: TYPEID OPEN_PAREN type-id CLOSE_PAREN •\l"]
  1627 -> "1627R878" [style=solid]
 "1627R878" [label="R878", fillcolor=3, shape=diamond, style=filled]
  1628 [label="State 1628\n\l1122 unary-expression: SIZEOF OPEN_PAREN type-id CLOSE_PAREN •\l"]
  1628 -> "1628R1122" [style=solid]
 "1628R1122" [label="R1122", fillcolor=3, shape=diamond, style=filled]
  1629 [label="State 1629\n\l1123 unary-expression: SIZEOF ELLIPSIS OPEN_PAREN IDENTIFIER • CLOSE_PAREN\l"]
  1629 -> 1802 [style=solid label="CLOSE_PAREN"]
  1630 [label="State 1630\n\l1124 unary-expression: ALIGNOF OPEN_PAREN type-id CLOSE_PAREN •\l"]
  1630 -> "1630R1124" [style=solid]
 "1630R1124" [label="R1124", fillcolor=3, shape=diamond, style=filled]
  1631 [label="State 1631\n\l260 digit-sequence: digit-sequence • digit\l261               | digit-sequence • SINGLE_QUOTE digit\l325 exponent-part: 'e' sign digit-sequence •\l"]
  1631 -> 847 [style=solid label="SINGLE_QUOTE"]
  1631 -> 789 [style=solid label="'0'"]
  1631 -> 790 [style=solid label="'1'"]
  1631 -> 791 [style=solid label="'2'"]
  1631 -> 792 [style=solid label="'3'"]
  1631 -> 793 [style=solid label="'4'"]
  1631 -> 794 [style=solid label="'5'"]
  1631 -> 795 [style=solid label="'6'"]
  1631 -> 796 [style=solid label="'7'"]
  1631 -> 797 [style=solid label="'8'"]
  1631 -> 798 [style=solid label="'9'"]
  1631 -> 851 [style=dashed label="digit"]
  1631 -> "1631R325" [style=solid]
 "1631R325" [label="R325", fillcolor=3, shape=diamond, style=filled]
  1632 [label="State 1632\n\l260 digit-sequence: digit-sequence • digit\l261               | digit-sequence • SINGLE_QUOTE digit\l327 exponent-part: 'E' sign digit-sequence •\l"]
  1632 -> 847 [style=solid label="SINGLE_QUOTE"]
  1632 -> 789 [style=solid label="'0'"]
  1632 -> 790 [style=solid label="'1'"]
  1632 -> 791 [style=solid label="'2'"]
  1632 -> 792 [style=solid label="'3'"]
  1632 -> 793 [style=solid label="'4'"]
  1632 -> 794 [style=solid label="'5'"]
  1632 -> 795 [style=solid label="'6'"]
  1632 -> 796 [style=solid label="'7'"]
  1632 -> 797 [style=solid label="'8'"]
  1632 -> 798 [style=solid label="'9'"]
  1632 -> 851 [style=dashed label="digit"]
  1632 -> "1632R327" [style=solid]
 "1632R327" [label="R327", fillcolor=3, shape=diamond, style=filled]
  1633 [label="State 1633\n\l126 character-literal: encoding-prefix SINGLE_QUOTE c-char-sequence SINGLE_QUOTE •\l"]
  1633 -> "1633R126" [style=solid]
 "1633R126" [label="R126", fillcolor=3, shape=diamond, style=filled]
  1634 [label="State 1634\n\l446 hexadecimal-digit-sequence: hexadecimal-digit-sequence SINGLE_QUOTE hexadecimal-digit •\l"]
  1634 -> "1634R446" [style=solid]
 "1634R446" [label="R446", fillcolor=3, shape=diamond, style=filled]
  1635 [label="State 1635\n\l445 hexadecimal-digit-sequence: hexadecimal-digit-sequence • hexadecimal-digit\l446                           | hexadecimal-digit-sequence • SINGLE_QUOTE hexadecimal-digit\l453 hexadecimal-fractional-constant: hexadecimal-digit-sequence DOT hexadecimal-digit-sequence •\l"]
  1635 -> 1349 [style=solid label="SINGLE_QUOTE"]
  1635 -> 867 [style=solid label="'0'"]
  1635 -> 868 [style=solid label="'1'"]
  1635 -> 869 [style=solid label="'2'"]
  1635 -> 870 [style=solid label="'3'"]
  1635 -> 871 [style=solid label="'4'"]
  1635 -> 872 [style=solid label="'5'"]
  1635 -> 873 [style=solid label="'6'"]
  1635 -> 874 [style=solid label="'7'"]
  1635 -> 875 [style=solid label="'8'"]
  1635 -> 876 [style=solid label="'9'"]
  1635 -> 877 [style=solid label="'e'"]
  1635 -> 878 [style=solid label="'E'"]
  1635 -> 879 [style=solid label="'f'"]
  1635 -> 880 [style=solid label="'F'"]
  1635 -> 881 [style=solid label="'a'"]
  1635 -> 882 [style=solid label="'b'"]
  1635 -> 883 [style=solid label="'c'"]
  1635 -> 884 [style=solid label="'d'"]
  1635 -> 885 [style=solid label="'A'"]
  1635 -> 886 [style=solid label="'B'"]
  1635 -> 887 [style=solid label="'C'"]
  1635 -> 888 [style=solid label="'D'"]
  1635 -> 1354 [style=dashed label="hexadecimal-digit"]
  1635 -> "1635R453" [style=solid]
 "1635R453" [label="R453", fillcolor=3, shape=diamond, style=filled]
  1636 [label="State 1636\n\l 87 binary-exponent-part: 'p' digit-sequence •\l260 digit-sequence: digit-sequence • digit\l261               | digit-sequence • SINGLE_QUOTE digit\l"]
  1636 -> 847 [style=solid label="SINGLE_QUOTE"]
  1636 -> 789 [style=solid label="'0'"]
  1636 -> 790 [style=solid label="'1'"]
  1636 -> 791 [style=solid label="'2'"]
  1636 -> 792 [style=solid label="'3'"]
  1636 -> 793 [style=solid label="'4'"]
  1636 -> 794 [style=solid label="'5'"]
  1636 -> 795 [style=solid label="'6'"]
  1636 -> 796 [style=solid label="'7'"]
  1636 -> 797 [style=solid label="'8'"]
  1636 -> 798 [style=solid label="'9'"]
  1636 -> 851 [style=dashed label="digit"]
  1636 -> "1636R87" [style=solid]
 "1636R87" [label="R87", fillcolor=3, shape=diamond, style=filled]
  1637 [label="State 1637\n\l 88 binary-exponent-part: 'p' sign • digit-sequence\l"]
  1637 -> 789 [style=solid label="'0'"]
  1637 -> 790 [style=solid label="'1'"]
  1637 -> 791 [style=solid label="'2'"]
  1637 -> 792 [style=solid label="'3'"]
  1637 -> 793 [style=solid label="'4'"]
  1637 -> 794 [style=solid label="'5'"]
  1637 -> 795 [style=solid label="'6'"]
  1637 -> 796 [style=solid label="'7'"]
  1637 -> 797 [style=solid label="'8'"]
  1637 -> 798 [style=solid label="'9'"]
  1637 -> 412 [style=dashed label="digit"]
  1637 -> 1803 [style=dashed label="digit-sequence"]
  1638 [label="State 1638\n\l 89 binary-exponent-part: 'P' digit-sequence •\l260 digit-sequence: digit-sequence • digit\l261               | digit-sequence • SINGLE_QUOTE digit\l"]
  1638 -> 847 [style=solid label="SINGLE_QUOTE"]
  1638 -> 789 [style=solid label="'0'"]
  1638 -> 790 [style=solid label="'1'"]
  1638 -> 791 [style=solid label="'2'"]
  1638 -> 792 [style=solid label="'3'"]
  1638 -> 793 [style=solid label="'4'"]
  1638 -> 794 [style=solid label="'5'"]
  1638 -> 795 [style=solid label="'6'"]
  1638 -> 796 [style=solid label="'7'"]
  1638 -> 797 [style=solid label="'8'"]
  1638 -> 798 [style=solid label="'9'"]
  1638 -> 851 [style=dashed label="digit"]
  1638 -> "1638R89" [style=solid]
 "1638R89" [label="R89", fillcolor=3, shape=diamond, style=filled]
  1639 [label="State 1639\n\l 90 binary-exponent-part: 'P' sign • digit-sequence\l"]
  1639 -> 789 [style=solid label="'0'"]
  1639 -> 790 [style=solid label="'1'"]
  1639 -> 791 [style=solid label="'2'"]
  1639 -> 792 [style=solid label="'3'"]
  1639 -> 793 [style=solid label="'4'"]
  1639 -> 794 [style=solid label="'5'"]
  1639 -> 795 [style=solid label="'6'"]
  1639 -> 796 [style=solid label="'7'"]
  1639 -> 797 [style=solid label="'8'"]
  1639 -> 798 [style=solid label="'9'"]
  1639 -> 412 [style=dashed label="digit"]
  1639 -> 1804 [style=dashed label="digit-sequence"]
  1640 [label="State 1640\n\l452 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part floating-point-suffix •\l"]
  1640 -> "1640R452" [style=solid]
 "1640R452" [label="R452", fillcolor=3, shape=diamond, style=filled]
  1641 [label="State 1641\n\l1154 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part ud-suffix •\l"]
  1641 -> "1641R1154" [style=solid]
 "1641R1154" [label="R1154", fillcolor=3, shape=diamond, style=filled]
  1642 [label="State 1642\n\l450 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part floating-point-suffix •\l"]
  1642 -> "1642R450" [style=solid]
 "1642R450" [label="R450", fillcolor=3, shape=diamond, style=filled]
  1643 [label="State 1643\n\l1153 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part ud-suffix •\l"]
  1643 -> "1643R1153" [style=solid]
 "1643R1153" [label="R1153", fillcolor=3, shape=diamond, style=filled]
  1644 [label="State 1644\n\l529 lambda-declarator: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • lambda-specifiers\l530                  | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN • lambda-specifiers requires-clause\l"]
  1644 -> 162 [style=solid label="IDENTIFIER"]
  1644 -> 4 [style=solid label="ALIGNAS"]
  1644 -> 9 [style=solid label="SCOPE"]
  1644 -> 10 [style=solid label="OPEN_SQUARE"]
  1644 -> 11 [style=solid label="VIRTUAL"]
  1644 -> 12 [style=solid label="CLASS"]
  1644 -> 13 [style=solid label="STRUCT"]
  1644 -> 14 [style=solid label="UNION"]
  1644 -> 894 [style=solid label="NOEXCEPT"]
  1644 -> 18 [style=solid label="CONST"]
  1644 -> 19 [style=solid label="VOLATILE"]
  1644 -> 20 [style=solid label="FRIEND"]
  1644 -> 21 [style=solid label="TYPEDEF"]
  1644 -> 22 [style=solid label="CONSTEXPR"]
  1644 -> 23 [style=solid label="CONSTEVAL"]
  1644 -> 24 [style=solid label="CONSTINIT"]
  1644 -> 258 [style=solid label="INLINE"]
  1644 -> 26 [style=solid label="DECLTYPE"]
  1644 -> 736 [style=solid label="DEREF"]
  1644 -> 27 [style=solid label="ENUM"]
  1644 -> 259 [style=solid label="EXTERN"]
  1644 -> 29 [style=solid label="EXPLICIT"]
  1644 -> 36 [style=solid label="AUTO"]
  1644 -> 37 [style=solid label="CHAR"]
  1644 -> 38 [style=solid label="CHAR8_T"]
  1644 -> 39 [style=solid label="CHAR16_T"]
  1644 -> 40 [style=solid label="CHAR32_T"]
  1644 -> 41 [style=solid label="WCHAR_T"]
  1644 -> 42 [style=solid label="BOOL"]
  1644 -> 43 [style=solid label="SHORT"]
  1644 -> 44 [style=solid label="INT"]
  1644 -> 45 [style=solid label="LONG"]
  1644 -> 46 [style=solid label="SIGNED"]
  1644 -> 47 [style=solid label="UNSIGNED"]
  1644 -> 48 [style=solid label="FLOAT"]
  1644 -> 49 [style=solid label="DOUBLE"]
  1644 -> 50 [style=solid label="VOID"]
  1644 -> 52 [style=solid label="STATIC"]
  1644 -> 53 [style=solid label="THREAD_LOCAL"]
  1644 -> 54 [style=solid label="MUTABLE"]
  1644 -> 55 [style=solid label="TYPENAME"]
  1644 -> 57 [style=dashed label="alignment-specifier"]
  1644 -> 60 [style=dashed label="attribute-specifier"]
  1644 -> 896 [style=dashed label="attribute-specifier-seq"]
  1644 -> 63 [style=dashed label="class-head"]
  1644 -> 64 [style=dashed label="class-key"]
  1644 -> 65 [style=dashed label="class-name"]
  1644 -> 66 [style=dashed label="class-specifier"]
  1644 -> 67 [style=dashed label="concept-name"]
  1644 -> 69 [style=dashed label="cv-qualifier"]
  1644 -> 70 [style=dashed label="decl-specifier"]
  1644 -> 897 [style=dashed label="decl-specifier-seq"]
  1644 -> 76 [style=dashed label="decltype-specifier"]
  1644 -> 78 [style=dashed label="defining-type-specifier"]
  1644 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1644 -> 80 [style=dashed label="elaborated-type-specifier"]
  1644 -> 82 [style=dashed label="enum-head"]
  1644 -> 263 [style=dashed label="enum-key"]
  1644 -> 84 [style=dashed label="enum-name"]
  1644 -> 85 [style=dashed label="enum-specifier"]
  1644 -> 264 [style=dashed label="explicit-specifier"]
  1644 -> 91 [style=dashed label="function-specifier"]
  1644 -> 1805 [style=dashed label="lambda-specifiers"]
  1644 -> 99 [style=dashed label="namespace-alias"]
  1644 -> 102 [style=dashed label="namespace-name"]
  1644 -> 212 [style=dashed label="nested-name-specifier"]
  1644 -> 900 [style=dashed label="noexcept-specifier"]
  1644 -> 109 [style=dashed label="placeholder-type-specifier"]
  1644 -> 141 [style=dashed label="simple-template-id"]
  1644 -> 115 [style=dashed label="simple-type-specifier"]
  1644 -> 117 [style=dashed label="storage-class-specifier"]
  1644 -> 215 [style=dashed label="template-name"]
  1644 -> 901 [style=dashed label="trailing-return-type"]
  1644 -> 123 [style=dashed label="type-constraint"]
  1644 -> 124 [style=dashed label="type-name"]
  1644 -> 125 [style=dashed label="type-specifier"]
  1644 -> 126 [style=dashed label="typedef-name"]
  1644 -> 127 [style=dashed label="typename-specifier"]
  1645 [label="State 1645\n\l693 noexcept-specifier: NOEXCEPT OPEN_PAREN constant-expression • CLOSE_PAREN\l"]
  1645 -> 1806 [style=solid label="CLOSE_PAREN"]
  1646 [label="State 1646\n\l532 lambda-expression: lambda-introducer LESS template-parameter-list GREATER • lambda-declarator compound-statement\l533                  | lambda-introducer LESS template-parameter-list GREATER • requires-clause lambda-declarator compound-statement\l"]
  1646 -> 162 [style=solid label="IDENTIFIER"]
  1646 -> 4 [style=solid label="ALIGNAS"]
  1646 -> 893 [style=solid label="OPEN_PAREN"]
  1646 -> 9 [style=solid label="SCOPE"]
  1646 -> 10 [style=solid label="OPEN_SQUARE"]
  1646 -> 11 [style=solid label="VIRTUAL"]
  1646 -> 12 [style=solid label="CLASS"]
  1646 -> 13 [style=solid label="STRUCT"]
  1646 -> 14 [style=solid label="UNION"]
  1646 -> 894 [style=solid label="NOEXCEPT"]
  1646 -> 18 [style=solid label="CONST"]
  1646 -> 19 [style=solid label="VOLATILE"]
  1646 -> 20 [style=solid label="FRIEND"]
  1646 -> 21 [style=solid label="TYPEDEF"]
  1646 -> 22 [style=solid label="CONSTEXPR"]
  1646 -> 23 [style=solid label="CONSTEVAL"]
  1646 -> 24 [style=solid label="CONSTINIT"]
  1646 -> 258 [style=solid label="INLINE"]
  1646 -> 26 [style=solid label="DECLTYPE"]
  1646 -> 736 [style=solid label="DEREF"]
  1646 -> 27 [style=solid label="ENUM"]
  1646 -> 259 [style=solid label="EXTERN"]
  1646 -> 29 [style=solid label="EXPLICIT"]
  1646 -> 292 [style=solid label="REQUIRES"]
  1646 -> 36 [style=solid label="AUTO"]
  1646 -> 37 [style=solid label="CHAR"]
  1646 -> 38 [style=solid label="CHAR8_T"]
  1646 -> 39 [style=solid label="CHAR16_T"]
  1646 -> 40 [style=solid label="CHAR32_T"]
  1646 -> 41 [style=solid label="WCHAR_T"]
  1646 -> 42 [style=solid label="BOOL"]
  1646 -> 43 [style=solid label="SHORT"]
  1646 -> 44 [style=solid label="INT"]
  1646 -> 45 [style=solid label="LONG"]
  1646 -> 46 [style=solid label="SIGNED"]
  1646 -> 47 [style=solid label="UNSIGNED"]
  1646 -> 48 [style=solid label="FLOAT"]
  1646 -> 49 [style=solid label="DOUBLE"]
  1646 -> 50 [style=solid label="VOID"]
  1646 -> 52 [style=solid label="STATIC"]
  1646 -> 53 [style=solid label="THREAD_LOCAL"]
  1646 -> 54 [style=solid label="MUTABLE"]
  1646 -> 55 [style=solid label="TYPENAME"]
  1646 -> 57 [style=dashed label="alignment-specifier"]
  1646 -> 60 [style=dashed label="attribute-specifier"]
  1646 -> 896 [style=dashed label="attribute-specifier-seq"]
  1646 -> 63 [style=dashed label="class-head"]
  1646 -> 64 [style=dashed label="class-key"]
  1646 -> 65 [style=dashed label="class-name"]
  1646 -> 66 [style=dashed label="class-specifier"]
  1646 -> 67 [style=dashed label="concept-name"]
  1646 -> 69 [style=dashed label="cv-qualifier"]
  1646 -> 70 [style=dashed label="decl-specifier"]
  1646 -> 897 [style=dashed label="decl-specifier-seq"]
  1646 -> 76 [style=dashed label="decltype-specifier"]
  1646 -> 78 [style=dashed label="defining-type-specifier"]
  1646 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1646 -> 80 [style=dashed label="elaborated-type-specifier"]
  1646 -> 82 [style=dashed label="enum-head"]
  1646 -> 263 [style=dashed label="enum-key"]
  1646 -> 84 [style=dashed label="enum-name"]
  1646 -> 85 [style=dashed label="enum-specifier"]
  1646 -> 264 [style=dashed label="explicit-specifier"]
  1646 -> 91 [style=dashed label="function-specifier"]
  1646 -> 1807 [style=dashed label="lambda-declarator"]
  1646 -> 899 [style=dashed label="lambda-specifiers"]
  1646 -> 99 [style=dashed label="namespace-alias"]
  1646 -> 102 [style=dashed label="namespace-name"]
  1646 -> 212 [style=dashed label="nested-name-specifier"]
  1646 -> 900 [style=dashed label="noexcept-specifier"]
  1646 -> 109 [style=dashed label="placeholder-type-specifier"]
  1646 -> 1808 [style=dashed label="requires-clause"]
  1646 -> 141 [style=dashed label="simple-template-id"]
  1646 -> 115 [style=dashed label="simple-type-specifier"]
  1646 -> 117 [style=dashed label="storage-class-specifier"]
  1646 -> 215 [style=dashed label="template-name"]
  1646 -> 901 [style=dashed label="trailing-return-type"]
  1646 -> 123 [style=dashed label="type-constraint"]
  1646 -> 124 [style=dashed label="type-name"]
  1646 -> 125 [style=dashed label="type-specifier"]
  1646 -> 126 [style=dashed label="typedef-name"]
  1646 -> 127 [style=dashed label="typename-specifier"]
  1647 [label="State 1647\n\l547 lambda-specifiers: decl-specifier-seq attribute-specifier-seq trailing-return-type •\l"]
  1647 -> "1647R547" [style=solid]
 "1647R547" [label="R547", fillcolor=3, shape=diamond, style=filled]
  1648 [label="State 1648\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l541 lambda-specifiers: decl-specifier-seq noexcept-specifier attribute-specifier-seq •\l549                  | decl-specifier-seq noexcept-specifier attribute-specifier-seq • trailing-return-type\l"]
  1648 -> 4 [style=solid label="ALIGNAS"]
  1648 -> 10 [style=solid label="OPEN_SQUARE"]
  1648 -> 736 [style=solid label="DEREF"]
  1648 -> 57 [style=dashed label="alignment-specifier"]
  1648 -> 260 [style=dashed label="attribute-specifier"]
  1648 -> 1809 [style=dashed label="trailing-return-type"]
  1648 -> "1648R541" [style=solid]
 "1648R541" [label="R541", fillcolor=3, shape=diamond, style=filled]
  1649 [label="State 1649\n\l545 lambda-specifiers: decl-specifier-seq noexcept-specifier trailing-return-type •\l"]
  1649 -> "1649R545" [style=solid]
 "1649R545" [label="R545", fillcolor=3, shape=diamond, style=filled]
  1650 [label="State 1650\n\l550 lambda-specifiers: noexcept-specifier attribute-specifier-seq trailing-return-type •\l"]
  1650 -> "1650R550" [style=solid]
 "1650R550" [label="R550", fillcolor=3, shape=diamond, style=filled]
  1651 [label="State 1651\n\l170 conditional-expression: logical-or-expression QUERY expression COLON • assignment-expression\l"]
  1651 -> 356 [style=solid label="PLUS"]
  1651 -> 357 [style=solid label="MINUS"]
  1651 -> 2 [style=solid label="IDENTIFIER"]
  1651 -> 358 [style=solid label="OPEN_PAREN"]
  1651 -> 359 [style=solid label="AND"]
  1651 -> 360 [style=solid label="SCOPE"]
  1651 -> 361 [style=solid label="OPEN_SQUARE"]
  1651 -> 362 [style=solid label="CO_AWAIT"]
  1651 -> 363 [style=solid label="ZERO_LB"]
  1651 -> 364 [style=solid label="ZERO_HB"]
  1651 -> 365 [style=solid label="SINGLE_QUOTE"]
  1651 -> 366 [style=solid label="FALSE"]
  1651 -> 367 [style=solid label="TRUE"]
  1651 -> 368 [style=solid label="NOEXCEPT"]
  1651 -> 17 [style=solid label="OPERATOR"]
  1651 -> 26 [style=solid label="DECLTYPE"]
  1651 -> 369 [style=solid label="DELETE"]
  1651 -> 370 [style=solid label="DOT"]
  1651 -> 184 [style=solid label="UNICODE_8"]
  1651 -> 371 [style=solid label="MULT"]
  1651 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1651 -> 372 [style=solid label="ZERO_LX"]
  1651 -> 373 [style=solid label="ZERO_HX"]
  1651 -> 374 [style=solid label="REQUIRES"]
  1651 -> 375 [style=solid label="NEW"]
  1651 -> 376 [style=solid label="COMPL"]
  1651 -> 377 [style=solid label="NOT"]
  1651 -> 378 [style=solid label="PLUS_PLUS"]
  1651 -> 379 [style=solid label="MINUS_MINUS"]
  1651 -> 380 [style=solid label="THIS"]
  1651 -> 36 [style=solid label="AUTO"]
  1651 -> 381 [style=solid label="NULLPTR"]
  1651 -> 382 [style=solid label="DYNAMIC_CAST"]
  1651 -> 383 [style=solid label="STATIC_CAST"]
  1651 -> 384 [style=solid label="REINTERPRET_CAST"]
  1651 -> 385 [style=solid label="CONST_CAST"]
  1651 -> 386 [style=solid label="TYPEID"]
  1651 -> 37 [style=solid label="CHAR"]
  1651 -> 38 [style=solid label="CHAR8_T"]
  1651 -> 39 [style=solid label="CHAR16_T"]
  1651 -> 40 [style=solid label="CHAR32_T"]
  1651 -> 41 [style=solid label="WCHAR_T"]
  1651 -> 42 [style=solid label="BOOL"]
  1651 -> 43 [style=solid label="SHORT"]
  1651 -> 44 [style=solid label="INT"]
  1651 -> 45 [style=solid label="LONG"]
  1651 -> 46 [style=solid label="SIGNED"]
  1651 -> 47 [style=solid label="UNSIGNED"]
  1651 -> 48 [style=solid label="FLOAT"]
  1651 -> 49 [style=solid label="DOUBLE"]
  1651 -> 50 [style=solid label="VOID"]
  1651 -> 523 [style=solid label="THROW"]
  1651 -> 55 [style=solid label="TYPENAME"]
  1651 -> 387 [style=solid label="SIZEOF"]
  1651 -> 388 [style=solid label="ALIGNOF"]
  1651 -> 524 [style=solid label="CO_YIELD"]
  1651 -> 389 [style=solid label="'0'"]
  1651 -> 390 [style=solid label="'1'"]
  1651 -> 391 [style=solid label="'2'"]
  1651 -> 392 [style=solid label="'3'"]
  1651 -> 393 [style=solid label="'4'"]
  1651 -> 394 [style=solid label="'5'"]
  1651 -> 395 [style=solid label="'6'"]
  1651 -> 396 [style=solid label="'7'"]
  1651 -> 397 [style=solid label="'8'"]
  1651 -> 398 [style=solid label="'9'"]
  1651 -> 205 [style=solid label="'u'"]
  1651 -> 206 [style=solid label="'U'"]
  1651 -> 207 [style=solid label="'L'"]
  1651 -> 208 [style=solid label="'R'"]
  1651 -> 399 [style=dashed label="additive-expression"]
  1651 -> 400 [style=dashed label="and-expression"]
  1651 -> 1810 [style=dashed label="assignment-expression"]
  1651 -> 401 [style=dashed label="await-expression"]
  1651 -> 402 [style=dashed label="binary-literal"]
  1651 -> 403 [style=dashed label="boolean-literal"]
  1651 -> 404 [style=dashed label="cast-expression"]
  1651 -> 405 [style=dashed label="character-literal"]
  1651 -> 65 [style=dashed label="class-name"]
  1651 -> 406 [style=dashed label="compare-expression"]
  1651 -> 67 [style=dashed label="concept-name"]
  1651 -> 526 [style=dashed label="conditional-expression"]
  1651 -> 68 [style=dashed label="conversion-function-id"]
  1651 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1651 -> 410 [style=dashed label="decimal-literal"]
  1651 -> 76 [style=dashed label="decltype-specifier"]
  1651 -> 411 [style=dashed label="delete-expression"]
  1651 -> 412 [style=dashed label="digit"]
  1651 -> 413 [style=dashed label="digit-sequence"]
  1651 -> 414 [style=dashed label="encoding-prefix"]
  1651 -> 84 [style=dashed label="enum-name"]
  1651 -> 415 [style=dashed label="equality-expression"]
  1651 -> 416 [style=dashed label="exclusive-or-expression"]
  1651 -> 417 [style=dashed label="floating-point-literal"]
  1651 -> 418 [style=dashed label="fold-expression"]
  1651 -> 419 [style=dashed label="fractional-constant"]
  1651 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1651 -> 421 [style=dashed label="hexadecimal-literal"]
  1651 -> 422 [style=dashed label="hexadecimal-prefix"]
  1651 -> 423 [style=dashed label="id-expression"]
  1651 -> 424 [style=dashed label="inclusive-or-expression"]
  1651 -> 425 [style=dashed label="integer-literal"]
  1651 -> 426 [style=dashed label="lambda-expression"]
  1651 -> 427 [style=dashed label="lambda-introducer"]
  1651 -> 428 [style=dashed label="literal"]
  1651 -> 95 [style=dashed label="literal-operator-id"]
  1651 -> 429 [style=dashed label="logical-and-expression"]
  1651 -> 528 [style=dashed label="logical-or-expression"]
  1651 -> 431 [style=dashed label="multiplicative-expression"]
  1651 -> 99 [style=dashed label="namespace-alias"]
  1651 -> 102 [style=dashed label="namespace-name"]
  1651 -> 432 [style=dashed label="nested-name-specifier"]
  1651 -> 433 [style=dashed label="new-expression"]
  1651 -> 434 [style=dashed label="noexcept-expression"]
  1651 -> 435 [style=dashed label="nonzero-digit"]
  1651 -> 436 [style=dashed label="octal-literal"]
  1651 -> 108 [style=dashed label="operator-function-id"]
  1651 -> 109 [style=dashed label="placeholder-type-specifier"]
  1651 -> 437 [style=dashed label="pm-expression"]
  1651 -> 438 [style=dashed label="pointer-literal"]
  1651 -> 439 [style=dashed label="postfix-expression"]
  1651 -> 440 [style=dashed label="primary-expression"]
  1651 -> 112 [style=dashed label="qualified-id"]
  1651 -> 441 [style=dashed label="relational-expression"]
  1651 -> 442 [style=dashed label="requires-expression"]
  1651 -> 443 [style=dashed label="shift-expression"]
  1651 -> 114 [style=dashed label="simple-template-id"]
  1651 -> 529 [style=dashed label="simple-type-specifier"]
  1651 -> 445 [style=dashed label="string-literal"]
  1651 -> 120 [style=dashed label="template-id"]
  1651 -> 215 [style=dashed label="template-name"]
  1651 -> 530 [style=dashed label="throw-expression"]
  1651 -> 123 [style=dashed label="type-constraint"]
  1651 -> 124 [style=dashed label="type-name"]
  1651 -> 126 [style=dashed label="typedef-name"]
  1651 -> 531 [style=dashed label="typename-specifier"]
  1651 -> 449 [style=dashed label="unary-expression"]
  1651 -> 450 [style=dashed label="unary-operator"]
  1651 -> 129 [style=dashed label="unqualified-id"]
  1651 -> 451 [style=dashed label="user-defined-character-literal"]
  1651 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1651 -> 453 [style=dashed label="user-defined-integer-literal"]
  1651 -> 454 [style=dashed label="user-defined-literal"]
  1651 -> 455 [style=dashed label="user-defined-string-literal"]
  1651 -> 532 [style=dashed label="yield-expression"]
  1652 [label="State 1652\n\l860 postfix-expression: postfix-expression OPEN_PAREN expression-list CLOSE_PAREN •\l"]
  1652 -> "1652R860" [style=solid]
 "1652R860" [label="R860", fillcolor=3, shape=diamond, style=filled]
  1653 [label="State 1653\n\l858 postfix-expression: postfix-expression OPEN_SQUARE expression-list CLOSE_SQUARE •\l"]
  1653 -> "1653R858" [style=solid]
 "1653R858" [label="R858", fillcolor=3, shape=diamond, style=filled]
  1654 [label="State 1654\n\l870 postfix-expression: postfix-expression DEREF TEMPLATE id-expression •\l"]
  1654 -> "1654R870" [style=solid]
 "1654R870" [label="R870", fillcolor=3, shape=diamond, style=filled]
  1655 [label="State 1655\n\l868 postfix-expression: postfix-expression DOT TEMPLATE id-expression •\l"]
  1655 -> "1655R868" [style=solid]
 "1655R868" [label="R868", fillcolor=3, shape=diamond, style=filled]
  1656 [label="State 1656\n\l862 postfix-expression: simple-type-specifier OPEN_PAREN expression-list CLOSE_PAREN •\l"]
  1656 -> "1656R862" [style=solid]
 "1656R862" [label="R862", fillcolor=3, shape=diamond, style=filled]
  1657 [label="State 1657\n\l 50 attribute-specifier: OPEN_SQUARE OPEN_SQUARE • attribute-list CLOSE_SQUARE CLOSE_SQUARE\l 51                    | OPEN_SQUARE OPEN_SQUARE • attribute-using-prefix attribute-list CLOSE_SQUARE CLOSE_SQUARE\l534 lambda-introducer: OPEN_SQUARE • CLOSE_SQUARE\l535                  | OPEN_SQUARE • lambda-capture CLOSE_SQUARE\l"]
  1657 -> 460 [style=solid label="USING"]
  1657 -> 1811 [style=solid label="IDENTIFIER"]
  1657 -> 763 [style=solid label="EQ"]
  1657 -> 764 [style=solid label="ELLIPSIS"]
  1657 -> 765 [style=solid label="AND"]
  1657 -> 766 [style=solid label="CLOSE_SQUARE"]
  1657 -> 767 [style=solid label="MULT"]
  1657 -> 768 [style=solid label="THIS"]
  1657 -> 462 [style=dashed label="attribute"]
  1657 -> 463 [style=dashed label="attribute-list"]
  1657 -> 464 [style=dashed label="attribute-namespace"]
  1657 -> 465 [style=dashed label="attribute-scoped-token"]
  1657 -> 466 [style=dashed label="attribute-token"]
  1657 -> 467 [style=dashed label="attribute-using-prefix"]
  1657 -> 769 [style=dashed label="capture"]
  1657 -> 770 [style=dashed label="capture-default"]
  1657 -> 771 [style=dashed label="capture-list"]
  1657 -> 772 [style=dashed label="init-capture"]
  1657 -> 773 [style=dashed label="lambda-capture"]
  1657 -> 774 [style=dashed label="simple-capture"]
  1658 [label="State 1658\n\l704 noptr-abstract-declarator: noptr-abstract-declarator parameters-and-qualifiers •\l"]
  1658 -> "1658R704" [style=solid]
 "1658R704" [label="R704", fillcolor=3, shape=diamond, style=filled]
  1659 [label="State 1659\n\l714 noptr-abstract-declarator: OPEN_PAREN ptr-abstract-declarator CLOSE_PAREN •\l"]
  1659 -> "1659R714" [style=solid]
 "1659R714" [label="R714", fillcolor=3, shape=diamond, style=filled]
  1660 [label="State 1660\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l711 noptr-abstract-declarator: OPEN_SQUARE CLOSE_SQUARE attribute-specifier-seq •\l"]
  1660 -> 4 [style=solid label="ALIGNAS"]
  1660 -> 10 [style=solid label="OPEN_SQUARE"]
  1660 -> 57 [style=dashed label="alignment-specifier"]
  1660 -> 260 [style=dashed label="attribute-specifier"]
  1660 -> "1660R711d" [label="[OPEN_SQUARE]", style=solid]
 "1660R711d" [label="R711", fillcolor=5, shape=diamond, style=filled]
  1660 -> "1660R711" [style=solid]
 "1660R711" [label="R711", fillcolor=3, shape=diamond, style=filled]
  1661 [label="State 1661\n\l709 noptr-abstract-declarator: OPEN_SQUARE constant-expression CLOSE_SQUARE •\l713                          | OPEN_SQUARE constant-expression CLOSE_SQUARE • attribute-specifier-seq\l"]
  1661 -> 4 [style=solid label="ALIGNAS"]
  1661 -> 10 [style=solid label="OPEN_SQUARE"]
  1661 -> 57 [style=dashed label="alignment-specifier"]
  1661 -> 60 [style=dashed label="attribute-specifier"]
  1661 -> 1812 [style=dashed label="attribute-specifier-seq"]
  1661 -> "1661R709d" [label="[OPEN_SQUARE]", style=solid]
 "1661R709d" [label="R709", fillcolor=5, shape=diamond, style=filled]
  1661 -> "1661R709" [style=solid]
 "1661R709" [label="R709", fillcolor=3, shape=diamond, style=filled]
  1662 [label="State 1662\n\l706 noptr-abstract-declarator: noptr-abstract-declarator OPEN_SQUARE CLOSE_SQUARE •\l710                          | noptr-abstract-declarator OPEN_SQUARE CLOSE_SQUARE • attribute-specifier-seq\l"]
  1662 -> 4 [style=solid label="ALIGNAS"]
  1662 -> 10 [style=solid label="OPEN_SQUARE"]
  1662 -> 57 [style=dashed label="alignment-specifier"]
  1662 -> 60 [style=dashed label="attribute-specifier"]
  1662 -> 1813 [style=dashed label="attribute-specifier-seq"]
  1662 -> "1662R706d" [label="[OPEN_SQUARE]", style=solid]
 "1662R706d" [label="R706", fillcolor=5, shape=diamond, style=filled]
  1662 -> "1662R706" [style=solid]
 "1662R706" [label="R706", fillcolor=3, shape=diamond, style=filled]
  1663 [label="State 1663\n\l708 noptr-abstract-declarator: noptr-abstract-declarator OPEN_SQUARE constant-expression • CLOSE_SQUARE\l712                          | noptr-abstract-declarator OPEN_SQUARE constant-expression • CLOSE_SQUARE attribute-specifier-seq\l"]
  1663 -> 1814 [style=solid label="CLOSE_SQUARE"]
  1664 [label="State 1664\n\l  2 abstract-declarator: noptr-abstract-declarator parameters-and-qualifiers trailing-return-type •\l"]
  1664 -> "1664R2" [style=solid]
 "1664R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  1665 [label="State 1665\n\l716 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator OPEN_SQUARE CLOSE_SQUARE •\l718                               | noptr-abstract-pack-declarator OPEN_SQUARE CLOSE_SQUARE • attribute-specifier-seq\l"]
  1665 -> 4 [style=solid label="ALIGNAS"]
  1665 -> 10 [style=solid label="OPEN_SQUARE"]
  1665 -> 57 [style=dashed label="alignment-specifier"]
  1665 -> 60 [style=dashed label="attribute-specifier"]
  1665 -> 1815 [style=dashed label="attribute-specifier-seq"]
  1665 -> "1665R716d" [label="[OPEN_SQUARE]", style=solid]
 "1665R716d" [label="R716", fillcolor=5, shape=diamond, style=filled]
  1665 -> "1665R716" [style=solid]
 "1665R716" [label="R716", fillcolor=3, shape=diamond, style=filled]
  1666 [label="State 1666\n\l717 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator OPEN_SQUARE constant-expression • CLOSE_SQUARE\l719                               | noptr-abstract-pack-declarator OPEN_SQUARE constant-expression • CLOSE_SQUARE attribute-specifier-seq\l"]
  1666 -> 1816 [style=solid label="CLOSE_SQUARE"]
  1667 [label="State 1667\n\l864 postfix-expression: typename-specifier OPEN_PAREN expression-list CLOSE_PAREN •\l"]
  1667 -> "1667R864" [style=solid]
 "1667R864" [label="R864", fillcolor=3, shape=diamond, style=filled]
  1668 [label="State 1668\n\l 47 attribute-list: attribute-list COMMA attribute ELLIPSIS •\l"]
  1668 -> "1668R47" [style=solid]
 "1668R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  1669 [label="State 1669\n\l 59 balanced-token: OPEN_PAREN CLOSE_PAREN •\l"]
  1669 -> "1669R59" [style=solid]
 "1669R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  1670 [label="State 1670\n\l 60 balanced-token: OPEN_PAREN balanced-token-seq • CLOSE_PAREN\l 67 balanced-token-seq: balanced-token-seq • balanced-token\l"]
  1670 -> 1416 [style=solid label="OPEN_PAREN"]
  1670 -> 1817 [style=solid label="CLOSE_PAREN"]
  1670 -> 1418 [style=solid label="OPEN_SQUARE"]
  1670 -> 1419 [style=solid label="OPEN_BRACE"]
  1670 -> 1420 [style=solid label="BALANCED_TOKEN"]
  1670 -> 1676 [style=dashed label="balanced-token"]
  1671 [label="State 1671\n\l 61 balanced-token: OPEN_SQUARE CLOSE_SQUARE •\l"]
  1671 -> "1671R61" [style=solid]
 "1671R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  1672 [label="State 1672\n\l 62 balanced-token: OPEN_SQUARE balanced-token-seq • CLOSE_SQUARE\l 67 balanced-token-seq: balanced-token-seq • balanced-token\l"]
  1672 -> 1416 [style=solid label="OPEN_PAREN"]
  1672 -> 1418 [style=solid label="OPEN_SQUARE"]
  1672 -> 1818 [style=solid label="CLOSE_SQUARE"]
  1672 -> 1419 [style=solid label="OPEN_BRACE"]
  1672 -> 1420 [style=solid label="BALANCED_TOKEN"]
  1672 -> 1676 [style=dashed label="balanced-token"]
  1673 [label="State 1673\n\l 63 balanced-token: OPEN_BRACE CLOSE_BRACE •\l"]
  1673 -> "1673R63" [style=solid]
 "1673R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  1674 [label="State 1674\n\l 64 balanced-token: OPEN_BRACE balanced-token-seq • CLOSE_BRACE\l 67 balanced-token-seq: balanced-token-seq • balanced-token\l"]
  1674 -> 1416 [style=solid label="OPEN_PAREN"]
  1674 -> 1418 [style=solid label="OPEN_SQUARE"]
  1674 -> 1419 [style=solid label="OPEN_BRACE"]
  1674 -> 1819 [style=solid label="CLOSE_BRACE"]
  1674 -> 1420 [style=solid label="BALANCED_TOKEN"]
  1674 -> 1676 [style=dashed label="balanced-token"]
  1675 [label="State 1675\n\l 41 attribute-argument-clause: OPEN_PAREN balanced-token-seq CLOSE_PAREN •\l"]
  1675 -> "1675R41" [style=solid]
 "1675R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  1676 [label="State 1676\n\l 67 balanced-token-seq: balanced-token-seq balanced-token •\l"]
  1676 -> "1676R67" [style=solid]
 "1676R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
  1677 [label="State 1677\n\l 51 attribute-specifier: OPEN_SQUARE OPEN_SQUARE attribute-using-prefix attribute-list CLOSE_SQUARE CLOSE_SQUARE •\l"]
  1677 -> "1677R51" [style=solid]
 "1677R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  1678 [label="State 1678\n\l821 parameter-declaration: THIS decl-specifier-seq EQ initializer-clause •\l"]
  1678 -> "1678R821" [style=solid]
 "1678R821" [label="R821", fillcolor=3, shape=diamond, style=filled]
  1679 [label="State 1679\n\l825 parameter-declaration: THIS decl-specifier-seq abstract-declarator EQ • initializer-clause\l"]
  1679 -> 356 [style=solid label="PLUS"]
  1679 -> 357 [style=solid label="MINUS"]
  1679 -> 2 [style=solid label="IDENTIFIER"]
  1679 -> 358 [style=solid label="OPEN_PAREN"]
  1679 -> 359 [style=solid label="AND"]
  1679 -> 360 [style=solid label="SCOPE"]
  1679 -> 361 [style=solid label="OPEN_SQUARE"]
  1679 -> 362 [style=solid label="CO_AWAIT"]
  1679 -> 935 [style=solid label="OPEN_BRACE"]
  1679 -> 363 [style=solid label="ZERO_LB"]
  1679 -> 364 [style=solid label="ZERO_HB"]
  1679 -> 365 [style=solid label="SINGLE_QUOTE"]
  1679 -> 366 [style=solid label="FALSE"]
  1679 -> 367 [style=solid label="TRUE"]
  1679 -> 368 [style=solid label="NOEXCEPT"]
  1679 -> 17 [style=solid label="OPERATOR"]
  1679 -> 26 [style=solid label="DECLTYPE"]
  1679 -> 369 [style=solid label="DELETE"]
  1679 -> 370 [style=solid label="DOT"]
  1679 -> 184 [style=solid label="UNICODE_8"]
  1679 -> 371 [style=solid label="MULT"]
  1679 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1679 -> 372 [style=solid label="ZERO_LX"]
  1679 -> 373 [style=solid label="ZERO_HX"]
  1679 -> 374 [style=solid label="REQUIRES"]
  1679 -> 375 [style=solid label="NEW"]
  1679 -> 376 [style=solid label="COMPL"]
  1679 -> 377 [style=solid label="NOT"]
  1679 -> 378 [style=solid label="PLUS_PLUS"]
  1679 -> 379 [style=solid label="MINUS_MINUS"]
  1679 -> 380 [style=solid label="THIS"]
  1679 -> 36 [style=solid label="AUTO"]
  1679 -> 381 [style=solid label="NULLPTR"]
  1679 -> 382 [style=solid label="DYNAMIC_CAST"]
  1679 -> 383 [style=solid label="STATIC_CAST"]
  1679 -> 384 [style=solid label="REINTERPRET_CAST"]
  1679 -> 385 [style=solid label="CONST_CAST"]
  1679 -> 386 [style=solid label="TYPEID"]
  1679 -> 37 [style=solid label="CHAR"]
  1679 -> 38 [style=solid label="CHAR8_T"]
  1679 -> 39 [style=solid label="CHAR16_T"]
  1679 -> 40 [style=solid label="CHAR32_T"]
  1679 -> 41 [style=solid label="WCHAR_T"]
  1679 -> 42 [style=solid label="BOOL"]
  1679 -> 43 [style=solid label="SHORT"]
  1679 -> 44 [style=solid label="INT"]
  1679 -> 45 [style=solid label="LONG"]
  1679 -> 46 [style=solid label="SIGNED"]
  1679 -> 47 [style=solid label="UNSIGNED"]
  1679 -> 48 [style=solid label="FLOAT"]
  1679 -> 49 [style=solid label="DOUBLE"]
  1679 -> 50 [style=solid label="VOID"]
  1679 -> 523 [style=solid label="THROW"]
  1679 -> 55 [style=solid label="TYPENAME"]
  1679 -> 387 [style=solid label="SIZEOF"]
  1679 -> 388 [style=solid label="ALIGNOF"]
  1679 -> 524 [style=solid label="CO_YIELD"]
  1679 -> 389 [style=solid label="'0'"]
  1679 -> 390 [style=solid label="'1'"]
  1679 -> 391 [style=solid label="'2'"]
  1679 -> 392 [style=solid label="'3'"]
  1679 -> 393 [style=solid label="'4'"]
  1679 -> 394 [style=solid label="'5'"]
  1679 -> 395 [style=solid label="'6'"]
  1679 -> 396 [style=solid label="'7'"]
  1679 -> 397 [style=solid label="'8'"]
  1679 -> 398 [style=solid label="'9'"]
  1679 -> 205 [style=solid label="'u'"]
  1679 -> 206 [style=solid label="'U'"]
  1679 -> 207 [style=solid label="'L'"]
  1679 -> 208 [style=solid label="'R'"]
  1679 -> 399 [style=dashed label="additive-expression"]
  1679 -> 400 [style=dashed label="and-expression"]
  1679 -> 1134 [style=dashed label="assignment-expression"]
  1679 -> 401 [style=dashed label="await-expression"]
  1679 -> 402 [style=dashed label="binary-literal"]
  1679 -> 403 [style=dashed label="boolean-literal"]
  1679 -> 1135 [style=dashed label="braced-init-list"]
  1679 -> 404 [style=dashed label="cast-expression"]
  1679 -> 405 [style=dashed label="character-literal"]
  1679 -> 65 [style=dashed label="class-name"]
  1679 -> 406 [style=dashed label="compare-expression"]
  1679 -> 67 [style=dashed label="concept-name"]
  1679 -> 526 [style=dashed label="conditional-expression"]
  1679 -> 68 [style=dashed label="conversion-function-id"]
  1679 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1679 -> 410 [style=dashed label="decimal-literal"]
  1679 -> 76 [style=dashed label="decltype-specifier"]
  1679 -> 411 [style=dashed label="delete-expression"]
  1679 -> 412 [style=dashed label="digit"]
  1679 -> 413 [style=dashed label="digit-sequence"]
  1679 -> 414 [style=dashed label="encoding-prefix"]
  1679 -> 84 [style=dashed label="enum-name"]
  1679 -> 415 [style=dashed label="equality-expression"]
  1679 -> 416 [style=dashed label="exclusive-or-expression"]
  1679 -> 417 [style=dashed label="floating-point-literal"]
  1679 -> 418 [style=dashed label="fold-expression"]
  1679 -> 419 [style=dashed label="fractional-constant"]
  1679 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1679 -> 421 [style=dashed label="hexadecimal-literal"]
  1679 -> 422 [style=dashed label="hexadecimal-prefix"]
  1679 -> 423 [style=dashed label="id-expression"]
  1679 -> 424 [style=dashed label="inclusive-or-expression"]
  1679 -> 1820 [style=dashed label="initializer-clause"]
  1679 -> 425 [style=dashed label="integer-literal"]
  1679 -> 426 [style=dashed label="lambda-expression"]
  1679 -> 427 [style=dashed label="lambda-introducer"]
  1679 -> 428 [style=dashed label="literal"]
  1679 -> 95 [style=dashed label="literal-operator-id"]
  1679 -> 429 [style=dashed label="logical-and-expression"]
  1679 -> 528 [style=dashed label="logical-or-expression"]
  1679 -> 431 [style=dashed label="multiplicative-expression"]
  1679 -> 99 [style=dashed label="namespace-alias"]
  1679 -> 102 [style=dashed label="namespace-name"]
  1679 -> 432 [style=dashed label="nested-name-specifier"]
  1679 -> 433 [style=dashed label="new-expression"]
  1679 -> 434 [style=dashed label="noexcept-expression"]
  1679 -> 435 [style=dashed label="nonzero-digit"]
  1679 -> 436 [style=dashed label="octal-literal"]
  1679 -> 108 [style=dashed label="operator-function-id"]
  1679 -> 109 [style=dashed label="placeholder-type-specifier"]
  1679 -> 437 [style=dashed label="pm-expression"]
  1679 -> 438 [style=dashed label="pointer-literal"]
  1679 -> 439 [style=dashed label="postfix-expression"]
  1679 -> 440 [style=dashed label="primary-expression"]
  1679 -> 112 [style=dashed label="qualified-id"]
  1679 -> 441 [style=dashed label="relational-expression"]
  1679 -> 442 [style=dashed label="requires-expression"]
  1679 -> 443 [style=dashed label="shift-expression"]
  1679 -> 114 [style=dashed label="simple-template-id"]
  1679 -> 529 [style=dashed label="simple-type-specifier"]
  1679 -> 445 [style=dashed label="string-literal"]
  1679 -> 120 [style=dashed label="template-id"]
  1679 -> 215 [style=dashed label="template-name"]
  1679 -> 530 [style=dashed label="throw-expression"]
  1679 -> 123 [style=dashed label="type-constraint"]
  1679 -> 124 [style=dashed label="type-name"]
  1679 -> 126 [style=dashed label="typedef-name"]
  1679 -> 531 [style=dashed label="typename-specifier"]
  1679 -> 449 [style=dashed label="unary-expression"]
  1679 -> 450 [style=dashed label="unary-operator"]
  1679 -> 129 [style=dashed label="unqualified-id"]
  1679 -> 451 [style=dashed label="user-defined-character-literal"]
  1679 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1679 -> 453 [style=dashed label="user-defined-integer-literal"]
  1679 -> 454 [style=dashed label="user-defined-literal"]
  1679 -> 455 [style=dashed label="user-defined-string-literal"]
  1679 -> 532 [style=dashed label="yield-expression"]
  1680 [label="State 1680\n\l809 parameter-declaration: THIS decl-specifier-seq declarator EQ • initializer-clause\l"]
  1680 -> 356 [style=solid label="PLUS"]
  1680 -> 357 [style=solid label="MINUS"]
  1680 -> 2 [style=solid label="IDENTIFIER"]
  1680 -> 358 [style=solid label="OPEN_PAREN"]
  1680 -> 359 [style=solid label="AND"]
  1680 -> 360 [style=solid label="SCOPE"]
  1680 -> 361 [style=solid label="OPEN_SQUARE"]
  1680 -> 362 [style=solid label="CO_AWAIT"]
  1680 -> 935 [style=solid label="OPEN_BRACE"]
  1680 -> 363 [style=solid label="ZERO_LB"]
  1680 -> 364 [style=solid label="ZERO_HB"]
  1680 -> 365 [style=solid label="SINGLE_QUOTE"]
  1680 -> 366 [style=solid label="FALSE"]
  1680 -> 367 [style=solid label="TRUE"]
  1680 -> 368 [style=solid label="NOEXCEPT"]
  1680 -> 17 [style=solid label="OPERATOR"]
  1680 -> 26 [style=solid label="DECLTYPE"]
  1680 -> 369 [style=solid label="DELETE"]
  1680 -> 370 [style=solid label="DOT"]
  1680 -> 184 [style=solid label="UNICODE_8"]
  1680 -> 371 [style=solid label="MULT"]
  1680 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1680 -> 372 [style=solid label="ZERO_LX"]
  1680 -> 373 [style=solid label="ZERO_HX"]
  1680 -> 374 [style=solid label="REQUIRES"]
  1680 -> 375 [style=solid label="NEW"]
  1680 -> 376 [style=solid label="COMPL"]
  1680 -> 377 [style=solid label="NOT"]
  1680 -> 378 [style=solid label="PLUS_PLUS"]
  1680 -> 379 [style=solid label="MINUS_MINUS"]
  1680 -> 380 [style=solid label="THIS"]
  1680 -> 36 [style=solid label="AUTO"]
  1680 -> 381 [style=solid label="NULLPTR"]
  1680 -> 382 [style=solid label="DYNAMIC_CAST"]
  1680 -> 383 [style=solid label="STATIC_CAST"]
  1680 -> 384 [style=solid label="REINTERPRET_CAST"]
  1680 -> 385 [style=solid label="CONST_CAST"]
  1680 -> 386 [style=solid label="TYPEID"]
  1680 -> 37 [style=solid label="CHAR"]
  1680 -> 38 [style=solid label="CHAR8_T"]
  1680 -> 39 [style=solid label="CHAR16_T"]
  1680 -> 40 [style=solid label="CHAR32_T"]
  1680 -> 41 [style=solid label="WCHAR_T"]
  1680 -> 42 [style=solid label="BOOL"]
  1680 -> 43 [style=solid label="SHORT"]
  1680 -> 44 [style=solid label="INT"]
  1680 -> 45 [style=solid label="LONG"]
  1680 -> 46 [style=solid label="SIGNED"]
  1680 -> 47 [style=solid label="UNSIGNED"]
  1680 -> 48 [style=solid label="FLOAT"]
  1680 -> 49 [style=solid label="DOUBLE"]
  1680 -> 50 [style=solid label="VOID"]
  1680 -> 523 [style=solid label="THROW"]
  1680 -> 55 [style=solid label="TYPENAME"]
  1680 -> 387 [style=solid label="SIZEOF"]
  1680 -> 388 [style=solid label="ALIGNOF"]
  1680 -> 524 [style=solid label="CO_YIELD"]
  1680 -> 389 [style=solid label="'0'"]
  1680 -> 390 [style=solid label="'1'"]
  1680 -> 391 [style=solid label="'2'"]
  1680 -> 392 [style=solid label="'3'"]
  1680 -> 393 [style=solid label="'4'"]
  1680 -> 394 [style=solid label="'5'"]
  1680 -> 395 [style=solid label="'6'"]
  1680 -> 396 [style=solid label="'7'"]
  1680 -> 397 [style=solid label="'8'"]
  1680 -> 398 [style=solid label="'9'"]
  1680 -> 205 [style=solid label="'u'"]
  1680 -> 206 [style=solid label="'U'"]
  1680 -> 207 [style=solid label="'L'"]
  1680 -> 208 [style=solid label="'R'"]
  1680 -> 399 [style=dashed label="additive-expression"]
  1680 -> 400 [style=dashed label="and-expression"]
  1680 -> 1134 [style=dashed label="assignment-expression"]
  1680 -> 401 [style=dashed label="await-expression"]
  1680 -> 402 [style=dashed label="binary-literal"]
  1680 -> 403 [style=dashed label="boolean-literal"]
  1680 -> 1135 [style=dashed label="braced-init-list"]
  1680 -> 404 [style=dashed label="cast-expression"]
  1680 -> 405 [style=dashed label="character-literal"]
  1680 -> 65 [style=dashed label="class-name"]
  1680 -> 406 [style=dashed label="compare-expression"]
  1680 -> 67 [style=dashed label="concept-name"]
  1680 -> 526 [style=dashed label="conditional-expression"]
  1680 -> 68 [style=dashed label="conversion-function-id"]
  1680 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1680 -> 410 [style=dashed label="decimal-literal"]
  1680 -> 76 [style=dashed label="decltype-specifier"]
  1680 -> 411 [style=dashed label="delete-expression"]
  1680 -> 412 [style=dashed label="digit"]
  1680 -> 413 [style=dashed label="digit-sequence"]
  1680 -> 414 [style=dashed label="encoding-prefix"]
  1680 -> 84 [style=dashed label="enum-name"]
  1680 -> 415 [style=dashed label="equality-expression"]
  1680 -> 416 [style=dashed label="exclusive-or-expression"]
  1680 -> 417 [style=dashed label="floating-point-literal"]
  1680 -> 418 [style=dashed label="fold-expression"]
  1680 -> 419 [style=dashed label="fractional-constant"]
  1680 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1680 -> 421 [style=dashed label="hexadecimal-literal"]
  1680 -> 422 [style=dashed label="hexadecimal-prefix"]
  1680 -> 423 [style=dashed label="id-expression"]
  1680 -> 424 [style=dashed label="inclusive-or-expression"]
  1680 -> 1821 [style=dashed label="initializer-clause"]
  1680 -> 425 [style=dashed label="integer-literal"]
  1680 -> 426 [style=dashed label="lambda-expression"]
  1680 -> 427 [style=dashed label="lambda-introducer"]
  1680 -> 428 [style=dashed label="literal"]
  1680 -> 95 [style=dashed label="literal-operator-id"]
  1680 -> 429 [style=dashed label="logical-and-expression"]
  1680 -> 528 [style=dashed label="logical-or-expression"]
  1680 -> 431 [style=dashed label="multiplicative-expression"]
  1680 -> 99 [style=dashed label="namespace-alias"]
  1680 -> 102 [style=dashed label="namespace-name"]
  1680 -> 432 [style=dashed label="nested-name-specifier"]
  1680 -> 433 [style=dashed label="new-expression"]
  1680 -> 434 [style=dashed label="noexcept-expression"]
  1680 -> 435 [style=dashed label="nonzero-digit"]
  1680 -> 436 [style=dashed label="octal-literal"]
  1680 -> 108 [style=dashed label="operator-function-id"]
  1680 -> 109 [style=dashed label="placeholder-type-specifier"]
  1680 -> 437 [style=dashed label="pm-expression"]
  1680 -> 438 [style=dashed label="pointer-literal"]
  1680 -> 439 [style=dashed label="postfix-expression"]
  1680 -> 440 [style=dashed label="primary-expression"]
  1680 -> 112 [style=dashed label="qualified-id"]
  1680 -> 441 [style=dashed label="relational-expression"]
  1680 -> 442 [style=dashed label="requires-expression"]
  1680 -> 443 [style=dashed label="shift-expression"]
  1680 -> 114 [style=dashed label="simple-template-id"]
  1680 -> 529 [style=dashed label="simple-type-specifier"]
  1680 -> 445 [style=dashed label="string-literal"]
  1680 -> 120 [style=dashed label="template-id"]
  1680 -> 215 [style=dashed label="template-name"]
  1680 -> 530 [style=dashed label="throw-expression"]
  1680 -> 123 [style=dashed label="type-constraint"]
  1680 -> 124 [style=dashed label="type-name"]
  1680 -> 126 [style=dashed label="typedef-name"]
  1680 -> 531 [style=dashed label="typename-specifier"]
  1680 -> 449 [style=dashed label="unary-expression"]
  1680 -> 450 [style=dashed label="unary-operator"]
  1680 -> 129 [style=dashed label="unqualified-id"]
  1680 -> 451 [style=dashed label="user-defined-character-literal"]
  1680 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1680 -> 453 [style=dashed label="user-defined-integer-literal"]
  1680 -> 454 [style=dashed label="user-defined-literal"]
  1680 -> 455 [style=dashed label="user-defined-string-literal"]
  1680 -> 532 [style=dashed label="yield-expression"]
  1681 [label="State 1681\n\l820 parameter-declaration: attribute-specifier-seq THIS decl-specifier-seq EQ • initializer-clause\l"]
  1681 -> 356 [style=solid label="PLUS"]
  1681 -> 357 [style=solid label="MINUS"]
  1681 -> 2 [style=solid label="IDENTIFIER"]
  1681 -> 358 [style=solid label="OPEN_PAREN"]
  1681 -> 359 [style=solid label="AND"]
  1681 -> 360 [style=solid label="SCOPE"]
  1681 -> 361 [style=solid label="OPEN_SQUARE"]
  1681 -> 362 [style=solid label="CO_AWAIT"]
  1681 -> 935 [style=solid label="OPEN_BRACE"]
  1681 -> 363 [style=solid label="ZERO_LB"]
  1681 -> 364 [style=solid label="ZERO_HB"]
  1681 -> 365 [style=solid label="SINGLE_QUOTE"]
  1681 -> 366 [style=solid label="FALSE"]
  1681 -> 367 [style=solid label="TRUE"]
  1681 -> 368 [style=solid label="NOEXCEPT"]
  1681 -> 17 [style=solid label="OPERATOR"]
  1681 -> 26 [style=solid label="DECLTYPE"]
  1681 -> 369 [style=solid label="DELETE"]
  1681 -> 370 [style=solid label="DOT"]
  1681 -> 184 [style=solid label="UNICODE_8"]
  1681 -> 371 [style=solid label="MULT"]
  1681 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1681 -> 372 [style=solid label="ZERO_LX"]
  1681 -> 373 [style=solid label="ZERO_HX"]
  1681 -> 374 [style=solid label="REQUIRES"]
  1681 -> 375 [style=solid label="NEW"]
  1681 -> 376 [style=solid label="COMPL"]
  1681 -> 377 [style=solid label="NOT"]
  1681 -> 378 [style=solid label="PLUS_PLUS"]
  1681 -> 379 [style=solid label="MINUS_MINUS"]
  1681 -> 380 [style=solid label="THIS"]
  1681 -> 36 [style=solid label="AUTO"]
  1681 -> 381 [style=solid label="NULLPTR"]
  1681 -> 382 [style=solid label="DYNAMIC_CAST"]
  1681 -> 383 [style=solid label="STATIC_CAST"]
  1681 -> 384 [style=solid label="REINTERPRET_CAST"]
  1681 -> 385 [style=solid label="CONST_CAST"]
  1681 -> 386 [style=solid label="TYPEID"]
  1681 -> 37 [style=solid label="CHAR"]
  1681 -> 38 [style=solid label="CHAR8_T"]
  1681 -> 39 [style=solid label="CHAR16_T"]
  1681 -> 40 [style=solid label="CHAR32_T"]
  1681 -> 41 [style=solid label="WCHAR_T"]
  1681 -> 42 [style=solid label="BOOL"]
  1681 -> 43 [style=solid label="SHORT"]
  1681 -> 44 [style=solid label="INT"]
  1681 -> 45 [style=solid label="LONG"]
  1681 -> 46 [style=solid label="SIGNED"]
  1681 -> 47 [style=solid label="UNSIGNED"]
  1681 -> 48 [style=solid label="FLOAT"]
  1681 -> 49 [style=solid label="DOUBLE"]
  1681 -> 50 [style=solid label="VOID"]
  1681 -> 523 [style=solid label="THROW"]
  1681 -> 55 [style=solid label="TYPENAME"]
  1681 -> 387 [style=solid label="SIZEOF"]
  1681 -> 388 [style=solid label="ALIGNOF"]
  1681 -> 524 [style=solid label="CO_YIELD"]
  1681 -> 389 [style=solid label="'0'"]
  1681 -> 390 [style=solid label="'1'"]
  1681 -> 391 [style=solid label="'2'"]
  1681 -> 392 [style=solid label="'3'"]
  1681 -> 393 [style=solid label="'4'"]
  1681 -> 394 [style=solid label="'5'"]
  1681 -> 395 [style=solid label="'6'"]
  1681 -> 396 [style=solid label="'7'"]
  1681 -> 397 [style=solid label="'8'"]
  1681 -> 398 [style=solid label="'9'"]
  1681 -> 205 [style=solid label="'u'"]
  1681 -> 206 [style=solid label="'U'"]
  1681 -> 207 [style=solid label="'L'"]
  1681 -> 208 [style=solid label="'R'"]
  1681 -> 399 [style=dashed label="additive-expression"]
  1681 -> 400 [style=dashed label="and-expression"]
  1681 -> 1134 [style=dashed label="assignment-expression"]
  1681 -> 401 [style=dashed label="await-expression"]
  1681 -> 402 [style=dashed label="binary-literal"]
  1681 -> 403 [style=dashed label="boolean-literal"]
  1681 -> 1135 [style=dashed label="braced-init-list"]
  1681 -> 404 [style=dashed label="cast-expression"]
  1681 -> 405 [style=dashed label="character-literal"]
  1681 -> 65 [style=dashed label="class-name"]
  1681 -> 406 [style=dashed label="compare-expression"]
  1681 -> 67 [style=dashed label="concept-name"]
  1681 -> 526 [style=dashed label="conditional-expression"]
  1681 -> 68 [style=dashed label="conversion-function-id"]
  1681 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1681 -> 410 [style=dashed label="decimal-literal"]
  1681 -> 76 [style=dashed label="decltype-specifier"]
  1681 -> 411 [style=dashed label="delete-expression"]
  1681 -> 412 [style=dashed label="digit"]
  1681 -> 413 [style=dashed label="digit-sequence"]
  1681 -> 414 [style=dashed label="encoding-prefix"]
  1681 -> 84 [style=dashed label="enum-name"]
  1681 -> 415 [style=dashed label="equality-expression"]
  1681 -> 416 [style=dashed label="exclusive-or-expression"]
  1681 -> 417 [style=dashed label="floating-point-literal"]
  1681 -> 418 [style=dashed label="fold-expression"]
  1681 -> 419 [style=dashed label="fractional-constant"]
  1681 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1681 -> 421 [style=dashed label="hexadecimal-literal"]
  1681 -> 422 [style=dashed label="hexadecimal-prefix"]
  1681 -> 423 [style=dashed label="id-expression"]
  1681 -> 424 [style=dashed label="inclusive-or-expression"]
  1681 -> 1822 [style=dashed label="initializer-clause"]
  1681 -> 425 [style=dashed label="integer-literal"]
  1681 -> 426 [style=dashed label="lambda-expression"]
  1681 -> 427 [style=dashed label="lambda-introducer"]
  1681 -> 428 [style=dashed label="literal"]
  1681 -> 95 [style=dashed label="literal-operator-id"]
  1681 -> 429 [style=dashed label="logical-and-expression"]
  1681 -> 528 [style=dashed label="logical-or-expression"]
  1681 -> 431 [style=dashed label="multiplicative-expression"]
  1681 -> 99 [style=dashed label="namespace-alias"]
  1681 -> 102 [style=dashed label="namespace-name"]
  1681 -> 432 [style=dashed label="nested-name-specifier"]
  1681 -> 433 [style=dashed label="new-expression"]
  1681 -> 434 [style=dashed label="noexcept-expression"]
  1681 -> 435 [style=dashed label="nonzero-digit"]
  1681 -> 436 [style=dashed label="octal-literal"]
  1681 -> 108 [style=dashed label="operator-function-id"]
  1681 -> 109 [style=dashed label="placeholder-type-specifier"]
  1681 -> 437 [style=dashed label="pm-expression"]
  1681 -> 438 [style=dashed label="pointer-literal"]
  1681 -> 439 [style=dashed label="postfix-expression"]
  1681 -> 440 [style=dashed label="primary-expression"]
  1681 -> 112 [style=dashed label="qualified-id"]
  1681 -> 441 [style=dashed label="relational-expression"]
  1681 -> 442 [style=dashed label="requires-expression"]
  1681 -> 443 [style=dashed label="shift-expression"]
  1681 -> 114 [style=dashed label="simple-template-id"]
  1681 -> 529 [style=dashed label="simple-type-specifier"]
  1681 -> 445 [style=dashed label="string-literal"]
  1681 -> 120 [style=dashed label="template-id"]
  1681 -> 215 [style=dashed label="template-name"]
  1681 -> 530 [style=dashed label="throw-expression"]
  1681 -> 123 [style=dashed label="type-constraint"]
  1681 -> 124 [style=dashed label="type-name"]
  1681 -> 126 [style=dashed label="typedef-name"]
  1681 -> 531 [style=dashed label="typename-specifier"]
  1681 -> 449 [style=dashed label="unary-expression"]
  1681 -> 450 [style=dashed label="unary-operator"]
  1681 -> 129 [style=dashed label="unqualified-id"]
  1681 -> 451 [style=dashed label="user-defined-character-literal"]
  1681 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1681 -> 453 [style=dashed label="user-defined-integer-literal"]
  1681 -> 454 [style=dashed label="user-defined-literal"]
  1681 -> 455 [style=dashed label="user-defined-string-literal"]
  1681 -> 532 [style=dashed label="yield-expression"]
  1682 [label="State 1682\n\l816 parameter-declaration: attribute-specifier-seq THIS decl-specifier-seq abstract-declarator •\l824                      | attribute-specifier-seq THIS decl-specifier-seq abstract-declarator • EQ initializer-clause\l"]
  1682 -> 1823 [style=solid label="EQ"]
  1682 -> "1682R816" [style=solid]
 "1682R816" [label="R816", fillcolor=3, shape=diamond, style=filled]
  1683 [label="State 1683\n\l804 parameter-declaration: attribute-specifier-seq THIS decl-specifier-seq declarator •\l808                      | attribute-specifier-seq THIS decl-specifier-seq declarator • EQ initializer-clause\l"]
  1683 -> 1824 [style=solid label="EQ"]
  1683 -> "1683R804" [style=solid]
 "1683R804" [label="R804", fillcolor=3, shape=diamond, style=filled]
  1684 [label="State 1684\n\l818 parameter-declaration: attribute-specifier-seq decl-specifier-seq EQ initializer-clause •\l"]
  1684 -> "1684R818" [style=solid]
 "1684R818" [label="R818", fillcolor=3, shape=diamond, style=filled]
  1685 [label="State 1685\n\l822 parameter-declaration: attribute-specifier-seq decl-specifier-seq abstract-declarator EQ • initializer-clause\l"]
  1685 -> 356 [style=solid label="PLUS"]
  1685 -> 357 [style=solid label="MINUS"]
  1685 -> 2 [style=solid label="IDENTIFIER"]
  1685 -> 358 [style=solid label="OPEN_PAREN"]
  1685 -> 359 [style=solid label="AND"]
  1685 -> 360 [style=solid label="SCOPE"]
  1685 -> 361 [style=solid label="OPEN_SQUARE"]
  1685 -> 362 [style=solid label="CO_AWAIT"]
  1685 -> 935 [style=solid label="OPEN_BRACE"]
  1685 -> 363 [style=solid label="ZERO_LB"]
  1685 -> 364 [style=solid label="ZERO_HB"]
  1685 -> 365 [style=solid label="SINGLE_QUOTE"]
  1685 -> 366 [style=solid label="FALSE"]
  1685 -> 367 [style=solid label="TRUE"]
  1685 -> 368 [style=solid label="NOEXCEPT"]
  1685 -> 17 [style=solid label="OPERATOR"]
  1685 -> 26 [style=solid label="DECLTYPE"]
  1685 -> 369 [style=solid label="DELETE"]
  1685 -> 370 [style=solid label="DOT"]
  1685 -> 184 [style=solid label="UNICODE_8"]
  1685 -> 371 [style=solid label="MULT"]
  1685 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1685 -> 372 [style=solid label="ZERO_LX"]
  1685 -> 373 [style=solid label="ZERO_HX"]
  1685 -> 374 [style=solid label="REQUIRES"]
  1685 -> 375 [style=solid label="NEW"]
  1685 -> 376 [style=solid label="COMPL"]
  1685 -> 377 [style=solid label="NOT"]
  1685 -> 378 [style=solid label="PLUS_PLUS"]
  1685 -> 379 [style=solid label="MINUS_MINUS"]
  1685 -> 380 [style=solid label="THIS"]
  1685 -> 36 [style=solid label="AUTO"]
  1685 -> 381 [style=solid label="NULLPTR"]
  1685 -> 382 [style=solid label="DYNAMIC_CAST"]
  1685 -> 383 [style=solid label="STATIC_CAST"]
  1685 -> 384 [style=solid label="REINTERPRET_CAST"]
  1685 -> 385 [style=solid label="CONST_CAST"]
  1685 -> 386 [style=solid label="TYPEID"]
  1685 -> 37 [style=solid label="CHAR"]
  1685 -> 38 [style=solid label="CHAR8_T"]
  1685 -> 39 [style=solid label="CHAR16_T"]
  1685 -> 40 [style=solid label="CHAR32_T"]
  1685 -> 41 [style=solid label="WCHAR_T"]
  1685 -> 42 [style=solid label="BOOL"]
  1685 -> 43 [style=solid label="SHORT"]
  1685 -> 44 [style=solid label="INT"]
  1685 -> 45 [style=solid label="LONG"]
  1685 -> 46 [style=solid label="SIGNED"]
  1685 -> 47 [style=solid label="UNSIGNED"]
  1685 -> 48 [style=solid label="FLOAT"]
  1685 -> 49 [style=solid label="DOUBLE"]
  1685 -> 50 [style=solid label="VOID"]
  1685 -> 523 [style=solid label="THROW"]
  1685 -> 55 [style=solid label="TYPENAME"]
  1685 -> 387 [style=solid label="SIZEOF"]
  1685 -> 388 [style=solid label="ALIGNOF"]
  1685 -> 524 [style=solid label="CO_YIELD"]
  1685 -> 389 [style=solid label="'0'"]
  1685 -> 390 [style=solid label="'1'"]
  1685 -> 391 [style=solid label="'2'"]
  1685 -> 392 [style=solid label="'3'"]
  1685 -> 393 [style=solid label="'4'"]
  1685 -> 394 [style=solid label="'5'"]
  1685 -> 395 [style=solid label="'6'"]
  1685 -> 396 [style=solid label="'7'"]
  1685 -> 397 [style=solid label="'8'"]
  1685 -> 398 [style=solid label="'9'"]
  1685 -> 205 [style=solid label="'u'"]
  1685 -> 206 [style=solid label="'U'"]
  1685 -> 207 [style=solid label="'L'"]
  1685 -> 208 [style=solid label="'R'"]
  1685 -> 399 [style=dashed label="additive-expression"]
  1685 -> 400 [style=dashed label="and-expression"]
  1685 -> 1134 [style=dashed label="assignment-expression"]
  1685 -> 401 [style=dashed label="await-expression"]
  1685 -> 402 [style=dashed label="binary-literal"]
  1685 -> 403 [style=dashed label="boolean-literal"]
  1685 -> 1135 [style=dashed label="braced-init-list"]
  1685 -> 404 [style=dashed label="cast-expression"]
  1685 -> 405 [style=dashed label="character-literal"]
  1685 -> 65 [style=dashed label="class-name"]
  1685 -> 406 [style=dashed label="compare-expression"]
  1685 -> 67 [style=dashed label="concept-name"]
  1685 -> 526 [style=dashed label="conditional-expression"]
  1685 -> 68 [style=dashed label="conversion-function-id"]
  1685 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1685 -> 410 [style=dashed label="decimal-literal"]
  1685 -> 76 [style=dashed label="decltype-specifier"]
  1685 -> 411 [style=dashed label="delete-expression"]
  1685 -> 412 [style=dashed label="digit"]
  1685 -> 413 [style=dashed label="digit-sequence"]
  1685 -> 414 [style=dashed label="encoding-prefix"]
  1685 -> 84 [style=dashed label="enum-name"]
  1685 -> 415 [style=dashed label="equality-expression"]
  1685 -> 416 [style=dashed label="exclusive-or-expression"]
  1685 -> 417 [style=dashed label="floating-point-literal"]
  1685 -> 418 [style=dashed label="fold-expression"]
  1685 -> 419 [style=dashed label="fractional-constant"]
  1685 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1685 -> 421 [style=dashed label="hexadecimal-literal"]
  1685 -> 422 [style=dashed label="hexadecimal-prefix"]
  1685 -> 423 [style=dashed label="id-expression"]
  1685 -> 424 [style=dashed label="inclusive-or-expression"]
  1685 -> 1825 [style=dashed label="initializer-clause"]
  1685 -> 425 [style=dashed label="integer-literal"]
  1685 -> 426 [style=dashed label="lambda-expression"]
  1685 -> 427 [style=dashed label="lambda-introducer"]
  1685 -> 428 [style=dashed label="literal"]
  1685 -> 95 [style=dashed label="literal-operator-id"]
  1685 -> 429 [style=dashed label="logical-and-expression"]
  1685 -> 528 [style=dashed label="logical-or-expression"]
  1685 -> 431 [style=dashed label="multiplicative-expression"]
  1685 -> 99 [style=dashed label="namespace-alias"]
  1685 -> 102 [style=dashed label="namespace-name"]
  1685 -> 432 [style=dashed label="nested-name-specifier"]
  1685 -> 433 [style=dashed label="new-expression"]
  1685 -> 434 [style=dashed label="noexcept-expression"]
  1685 -> 435 [style=dashed label="nonzero-digit"]
  1685 -> 436 [style=dashed label="octal-literal"]
  1685 -> 108 [style=dashed label="operator-function-id"]
  1685 -> 109 [style=dashed label="placeholder-type-specifier"]
  1685 -> 437 [style=dashed label="pm-expression"]
  1685 -> 438 [style=dashed label="pointer-literal"]
  1685 -> 439 [style=dashed label="postfix-expression"]
  1685 -> 440 [style=dashed label="primary-expression"]
  1685 -> 112 [style=dashed label="qualified-id"]
  1685 -> 441 [style=dashed label="relational-expression"]
  1685 -> 442 [style=dashed label="requires-expression"]
  1685 -> 443 [style=dashed label="shift-expression"]
  1685 -> 114 [style=dashed label="simple-template-id"]
  1685 -> 529 [style=dashed label="simple-type-specifier"]
  1685 -> 445 [style=dashed label="string-literal"]
  1685 -> 120 [style=dashed label="template-id"]
  1685 -> 215 [style=dashed label="template-name"]
  1685 -> 530 [style=dashed label="throw-expression"]
  1685 -> 123 [style=dashed label="type-constraint"]
  1685 -> 124 [style=dashed label="type-name"]
  1685 -> 126 [style=dashed label="typedef-name"]
  1685 -> 531 [style=dashed label="typename-specifier"]
  1685 -> 449 [style=dashed label="unary-expression"]
  1685 -> 450 [style=dashed label="unary-operator"]
  1685 -> 129 [style=dashed label="unqualified-id"]
  1685 -> 451 [style=dashed label="user-defined-character-literal"]
  1685 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1685 -> 453 [style=dashed label="user-defined-integer-literal"]
  1685 -> 454 [style=dashed label="user-defined-literal"]
  1685 -> 455 [style=dashed label="user-defined-string-literal"]
  1685 -> 532 [style=dashed label="yield-expression"]
  1686 [label="State 1686\n\l806 parameter-declaration: attribute-specifier-seq decl-specifier-seq declarator EQ • initializer-clause\l"]
  1686 -> 356 [style=solid label="PLUS"]
  1686 -> 357 [style=solid label="MINUS"]
  1686 -> 2 [style=solid label="IDENTIFIER"]
  1686 -> 358 [style=solid label="OPEN_PAREN"]
  1686 -> 359 [style=solid label="AND"]
  1686 -> 360 [style=solid label="SCOPE"]
  1686 -> 361 [style=solid label="OPEN_SQUARE"]
  1686 -> 362 [style=solid label="CO_AWAIT"]
  1686 -> 935 [style=solid label="OPEN_BRACE"]
  1686 -> 363 [style=solid label="ZERO_LB"]
  1686 -> 364 [style=solid label="ZERO_HB"]
  1686 -> 365 [style=solid label="SINGLE_QUOTE"]
  1686 -> 366 [style=solid label="FALSE"]
  1686 -> 367 [style=solid label="TRUE"]
  1686 -> 368 [style=solid label="NOEXCEPT"]
  1686 -> 17 [style=solid label="OPERATOR"]
  1686 -> 26 [style=solid label="DECLTYPE"]
  1686 -> 369 [style=solid label="DELETE"]
  1686 -> 370 [style=solid label="DOT"]
  1686 -> 184 [style=solid label="UNICODE_8"]
  1686 -> 371 [style=solid label="MULT"]
  1686 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1686 -> 372 [style=solid label="ZERO_LX"]
  1686 -> 373 [style=solid label="ZERO_HX"]
  1686 -> 374 [style=solid label="REQUIRES"]
  1686 -> 375 [style=solid label="NEW"]
  1686 -> 376 [style=solid label="COMPL"]
  1686 -> 377 [style=solid label="NOT"]
  1686 -> 378 [style=solid label="PLUS_PLUS"]
  1686 -> 379 [style=solid label="MINUS_MINUS"]
  1686 -> 380 [style=solid label="THIS"]
  1686 -> 36 [style=solid label="AUTO"]
  1686 -> 381 [style=solid label="NULLPTR"]
  1686 -> 382 [style=solid label="DYNAMIC_CAST"]
  1686 -> 383 [style=solid label="STATIC_CAST"]
  1686 -> 384 [style=solid label="REINTERPRET_CAST"]
  1686 -> 385 [style=solid label="CONST_CAST"]
  1686 -> 386 [style=solid label="TYPEID"]
  1686 -> 37 [style=solid label="CHAR"]
  1686 -> 38 [style=solid label="CHAR8_T"]
  1686 -> 39 [style=solid label="CHAR16_T"]
  1686 -> 40 [style=solid label="CHAR32_T"]
  1686 -> 41 [style=solid label="WCHAR_T"]
  1686 -> 42 [style=solid label="BOOL"]
  1686 -> 43 [style=solid label="SHORT"]
  1686 -> 44 [style=solid label="INT"]
  1686 -> 45 [style=solid label="LONG"]
  1686 -> 46 [style=solid label="SIGNED"]
  1686 -> 47 [style=solid label="UNSIGNED"]
  1686 -> 48 [style=solid label="FLOAT"]
  1686 -> 49 [style=solid label="DOUBLE"]
  1686 -> 50 [style=solid label="VOID"]
  1686 -> 523 [style=solid label="THROW"]
  1686 -> 55 [style=solid label="TYPENAME"]
  1686 -> 387 [style=solid label="SIZEOF"]
  1686 -> 388 [style=solid label="ALIGNOF"]
  1686 -> 524 [style=solid label="CO_YIELD"]
  1686 -> 389 [style=solid label="'0'"]
  1686 -> 390 [style=solid label="'1'"]
  1686 -> 391 [style=solid label="'2'"]
  1686 -> 392 [style=solid label="'3'"]
  1686 -> 393 [style=solid label="'4'"]
  1686 -> 394 [style=solid label="'5'"]
  1686 -> 395 [style=solid label="'6'"]
  1686 -> 396 [style=solid label="'7'"]
  1686 -> 397 [style=solid label="'8'"]
  1686 -> 398 [style=solid label="'9'"]
  1686 -> 205 [style=solid label="'u'"]
  1686 -> 206 [style=solid label="'U'"]
  1686 -> 207 [style=solid label="'L'"]
  1686 -> 208 [style=solid label="'R'"]
  1686 -> 399 [style=dashed label="additive-expression"]
  1686 -> 400 [style=dashed label="and-expression"]
  1686 -> 1134 [style=dashed label="assignment-expression"]
  1686 -> 401 [style=dashed label="await-expression"]
  1686 -> 402 [style=dashed label="binary-literal"]
  1686 -> 403 [style=dashed label="boolean-literal"]
  1686 -> 1135 [style=dashed label="braced-init-list"]
  1686 -> 404 [style=dashed label="cast-expression"]
  1686 -> 405 [style=dashed label="character-literal"]
  1686 -> 65 [style=dashed label="class-name"]
  1686 -> 406 [style=dashed label="compare-expression"]
  1686 -> 67 [style=dashed label="concept-name"]
  1686 -> 526 [style=dashed label="conditional-expression"]
  1686 -> 68 [style=dashed label="conversion-function-id"]
  1686 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1686 -> 410 [style=dashed label="decimal-literal"]
  1686 -> 76 [style=dashed label="decltype-specifier"]
  1686 -> 411 [style=dashed label="delete-expression"]
  1686 -> 412 [style=dashed label="digit"]
  1686 -> 413 [style=dashed label="digit-sequence"]
  1686 -> 414 [style=dashed label="encoding-prefix"]
  1686 -> 84 [style=dashed label="enum-name"]
  1686 -> 415 [style=dashed label="equality-expression"]
  1686 -> 416 [style=dashed label="exclusive-or-expression"]
  1686 -> 417 [style=dashed label="floating-point-literal"]
  1686 -> 418 [style=dashed label="fold-expression"]
  1686 -> 419 [style=dashed label="fractional-constant"]
  1686 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1686 -> 421 [style=dashed label="hexadecimal-literal"]
  1686 -> 422 [style=dashed label="hexadecimal-prefix"]
  1686 -> 423 [style=dashed label="id-expression"]
  1686 -> 424 [style=dashed label="inclusive-or-expression"]
  1686 -> 1826 [style=dashed label="initializer-clause"]
  1686 -> 425 [style=dashed label="integer-literal"]
  1686 -> 426 [style=dashed label="lambda-expression"]
  1686 -> 427 [style=dashed label="lambda-introducer"]
  1686 -> 428 [style=dashed label="literal"]
  1686 -> 95 [style=dashed label="literal-operator-id"]
  1686 -> 429 [style=dashed label="logical-and-expression"]
  1686 -> 528 [style=dashed label="logical-or-expression"]
  1686 -> 431 [style=dashed label="multiplicative-expression"]
  1686 -> 99 [style=dashed label="namespace-alias"]
  1686 -> 102 [style=dashed label="namespace-name"]
  1686 -> 432 [style=dashed label="nested-name-specifier"]
  1686 -> 433 [style=dashed label="new-expression"]
  1686 -> 434 [style=dashed label="noexcept-expression"]
  1686 -> 435 [style=dashed label="nonzero-digit"]
  1686 -> 436 [style=dashed label="octal-literal"]
  1686 -> 108 [style=dashed label="operator-function-id"]
  1686 -> 109 [style=dashed label="placeholder-type-specifier"]
  1686 -> 437 [style=dashed label="pm-expression"]
  1686 -> 438 [style=dashed label="pointer-literal"]
  1686 -> 439 [style=dashed label="postfix-expression"]
  1686 -> 440 [style=dashed label="primary-expression"]
  1686 -> 112 [style=dashed label="qualified-id"]
  1686 -> 441 [style=dashed label="relational-expression"]
  1686 -> 442 [style=dashed label="requires-expression"]
  1686 -> 443 [style=dashed label="shift-expression"]
  1686 -> 114 [style=dashed label="simple-template-id"]
  1686 -> 529 [style=dashed label="simple-type-specifier"]
  1686 -> 445 [style=dashed label="string-literal"]
  1686 -> 120 [style=dashed label="template-id"]
  1686 -> 215 [style=dashed label="template-name"]
  1686 -> 530 [style=dashed label="throw-expression"]
  1686 -> 123 [style=dashed label="type-constraint"]
  1686 -> 124 [style=dashed label="type-name"]
  1686 -> 126 [style=dashed label="typedef-name"]
  1686 -> 531 [style=dashed label="typename-specifier"]
  1686 -> 449 [style=dashed label="unary-expression"]
  1686 -> 450 [style=dashed label="unary-operator"]
  1686 -> 129 [style=dashed label="unqualified-id"]
  1686 -> 451 [style=dashed label="user-defined-character-literal"]
  1686 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1686 -> 453 [style=dashed label="user-defined-integer-literal"]
  1686 -> 454 [style=dashed label="user-defined-literal"]
  1686 -> 455 [style=dashed label="user-defined-string-literal"]
  1686 -> 532 [style=dashed label="yield-expression"]
  1687 [label="State 1687\n\l823 parameter-declaration: decl-specifier-seq abstract-declarator EQ initializer-clause •\l"]
  1687 -> "1687R823" [style=solid]
 "1687R823" [label="R823", fillcolor=3, shape=diamond, style=filled]
  1688 [label="State 1688\n\l807 parameter-declaration: decl-specifier-seq declarator EQ initializer-clause •\l"]
  1688 -> "1688R807" [style=solid]
 "1688R807" [label="R807", fillcolor=3, shape=diamond, style=filled]
  1689 [label="State 1689\n\l1098 type-parameter: template-head type-parameter-key IDENTIFIER EQ • id-expression\l"]
  1689 -> 147 [style=solid label="IDENTIFIER"]
  1689 -> 9 [style=solid label="SCOPE"]
  1689 -> 17 [style=solid label="OPERATOR"]
  1689 -> 134 [style=solid label="DECLTYPE"]
  1689 -> 35 [style=solid label="COMPL"]
  1689 -> 65 [style=dashed label="class-name"]
  1689 -> 68 [style=dashed label="conversion-function-id"]
  1689 -> 138 [style=dashed label="decltype-specifier"]
  1689 -> 84 [style=dashed label="enum-name"]
  1689 -> 1827 [style=dashed label="id-expression"]
  1689 -> 95 [style=dashed label="literal-operator-id"]
  1689 -> 99 [style=dashed label="namespace-alias"]
  1689 -> 102 [style=dashed label="namespace-name"]
  1689 -> 152 [style=dashed label="nested-name-specifier"]
  1689 -> 108 [style=dashed label="operator-function-id"]
  1689 -> 112 [style=dashed label="qualified-id"]
  1689 -> 114 [style=dashed label="simple-template-id"]
  1689 -> 120 [style=dashed label="template-id"]
  1689 -> 142 [style=dashed label="template-name"]
  1689 -> 143 [style=dashed label="type-name"]
  1689 -> 126 [style=dashed label="typedef-name"]
  1689 -> 129 [style=dashed label="unqualified-id"]
  1690 [label="State 1690\n\l1097 type-parameter: template-head type-parameter-key EQ id-expression •\l"]
  1690 -> "1690R1097" [style=solid]
 "1690R1097" [label="R1097", fillcolor=3, shape=diamond, style=filled]
  1691 [label="State 1691\n\l1096 type-parameter: template-head type-parameter-key ELLIPSIS IDENTIFIER •\l"]
  1691 -> "1691R1096" [style=solid]
 "1691R1096" [label="R1096", fillcolor=3, shape=diamond, style=filled]
  1692 [label="State 1692\n\l1092 type-parameter: type-constraint IDENTIFIER EQ type-id •\l"]
  1692 -> "1692R1092" [style=solid]
 "1692R1092" [label="R1092", fillcolor=3, shape=diamond, style=filled]
  1693 [label="State 1693\n\l1086 type-parameter: type-parameter-key IDENTIFIER EQ type-id •\l"]
  1693 -> "1693R1086" [style=solid]
 "1693R1086" [label="R1086", fillcolor=3, shape=diamond, style=filled]
  1694 [label="State 1694\n\l747 octal-escape-sequence: ESCAPE octal-digit octal-digit octal-digit •\l"]
  1694 -> "1694R747" [style=solid]
 "1694R747" [label="R747", fillcolor=3, shape=diamond, style=filled]
  1695 [label="State 1695\n\l421 hex-quad: hexadecimal-digit hexadecimal-digit hexadecimal-digit • hexadecimal-digit\l"]
  1695 -> 867 [style=solid label="'0'"]
  1695 -> 868 [style=solid label="'1'"]
  1695 -> 869 [style=solid label="'2'"]
  1695 -> 870 [style=solid label="'3'"]
  1695 -> 871 [style=solid label="'4'"]
  1695 -> 872 [style=solid label="'5'"]
  1695 -> 873 [style=solid label="'6'"]
  1695 -> 874 [style=solid label="'7'"]
  1695 -> 875 [style=solid label="'8'"]
  1695 -> 876 [style=solid label="'9'"]
  1695 -> 877 [style=solid label="'e'"]
  1695 -> 878 [style=solid label="'E'"]
  1695 -> 879 [style=solid label="'f'"]
  1695 -> 880 [style=solid label="'F'"]
  1695 -> 881 [style=solid label="'a'"]
  1695 -> 882 [style=solid label="'b'"]
  1695 -> 883 [style=solid label="'c'"]
  1695 -> 884 [style=solid label="'d'"]
  1695 -> 885 [style=solid label="'A'"]
  1695 -> 886 [style=solid label="'B'"]
  1695 -> 887 [style=solid label="'C'"]
  1695 -> 888 [style=solid label="'D'"]
  1695 -> 1828 [style=dashed label="hexadecimal-digit"]
  1696 [label="State 1696\n\l643 named-namespace-definition: INLINE NAMESPACE IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE •\l"]
  1696 -> "1696R643" [style=solid]
 "1696R643" [label="R643", fillcolor=3, shape=diamond, style=filled]
  1697 [label="State 1697\n\l645 named-namespace-definition: INLINE NAMESPACE attribute-specifier-seq IDENTIFIER OPEN_BRACE namespace-body • CLOSE_BRACE\l"]
  1697 -> 1829 [style=solid label="CLOSE_BRACE"]
  1698 [label="State 1698\n\l1138 unnamed-namespace-definition: INLINE NAMESPACE attribute-specifier-seq OPEN_BRACE namespace-body CLOSE_BRACE •\l"]
  1698 -> "1698R1138" [style=solid]
 "1698R1138" [label="R1138", fillcolor=3, shape=diamond, style=filled]
  1699 [label="State 1699\n\l625 module-declaration: EXPORT MODULE module-name module-partition attribute-specifier-seq SEMICOLON •\l"]
  1699 -> "1699R625" [style=solid]
 "1699R625" [label="R625", fillcolor=3, shape=diamond, style=filled]
  1700 [label="State 1700\n\l646 named-namespace-definition: NAMESPACE attribute-specifier-seq IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE •\l"]
  1700 -> "1700R646" [style=solid]
 "1700R646" [label="R646", fillcolor=3, shape=diamond, style=filled]
  1701 [label="State 1701\n\l662 nested-namespace-definition: NAMESPACE enclosing-namespace-specifier SCOPE IDENTIFIER OPEN_BRACE namespace-body • CLOSE_BRACE\l"]
  1701 -> 1830 [style=solid label="CLOSE_BRACE"]
  1702 [label="State 1702\n\l663 nested-namespace-definition: NAMESPACE enclosing-namespace-specifier SCOPE INLINE IDENTIFIER OPEN_BRACE • namespace-body CLOSE_BRACE\l"]
  1702 -> 1 [style=solid label="USING"]
  1702 -> 2 [style=solid label="IDENTIFIER"]
  1702 -> 3 [style=solid label="SEMICOLON"]
  1702 -> 4 [style=solid label="ALIGNAS"]
  1702 -> 5 [style=solid label="OPEN_PAREN"]
  1702 -> 6 [style=solid label="ELLIPSIS"]
  1702 -> 7 [style=solid label="AND"]
  1702 -> 8 [style=solid label="ASM"]
  1702 -> 9 [style=solid label="SCOPE"]
  1702 -> 10 [style=solid label="OPEN_SQUARE"]
  1702 -> 11 [style=solid label="VIRTUAL"]
  1702 -> 12 [style=solid label="CLASS"]
  1702 -> 13 [style=solid label="STRUCT"]
  1702 -> 14 [style=solid label="UNION"]
  1702 -> 15 [style=solid label="TEMPLATE"]
  1702 -> 16 [style=solid label="AND_AND"]
  1702 -> 17 [style=solid label="OPERATOR"]
  1702 -> 18 [style=solid label="CONST"]
  1702 -> 19 [style=solid label="VOLATILE"]
  1702 -> 20 [style=solid label="FRIEND"]
  1702 -> 21 [style=solid label="TYPEDEF"]
  1702 -> 22 [style=solid label="CONSTEXPR"]
  1702 -> 23 [style=solid label="CONSTEVAL"]
  1702 -> 24 [style=solid label="CONSTINIT"]
  1702 -> 25 [style=solid label="INLINE"]
  1702 -> 26 [style=solid label="DECLTYPE"]
  1702 -> 27 [style=solid label="ENUM"]
  1702 -> 28 [style=solid label="EXTERN"]
  1702 -> 29 [style=solid label="EXPLICIT"]
  1702 -> 157 [style=solid label="EXPORT"]
  1702 -> 31 [style=solid label="MULT"]
  1702 -> 33 [style=solid label="IMPORT"]
  1702 -> 34 [style=solid label="NAMESPACE"]
  1702 -> 35 [style=solid label="COMPL"]
  1702 -> 36 [style=solid label="AUTO"]
  1702 -> 37 [style=solid label="CHAR"]
  1702 -> 38 [style=solid label="CHAR8_T"]
  1702 -> 39 [style=solid label="CHAR16_T"]
  1702 -> 40 [style=solid label="CHAR32_T"]
  1702 -> 41 [style=solid label="WCHAR_T"]
  1702 -> 42 [style=solid label="BOOL"]
  1702 -> 43 [style=solid label="SHORT"]
  1702 -> 44 [style=solid label="INT"]
  1702 -> 45 [style=solid label="LONG"]
  1702 -> 46 [style=solid label="SIGNED"]
  1702 -> 47 [style=solid label="UNSIGNED"]
  1702 -> 48 [style=solid label="FLOAT"]
  1702 -> 49 [style=solid label="DOUBLE"]
  1702 -> 50 [style=solid label="VOID"]
  1702 -> 51 [style=solid label="STATIC_ASSERT"]
  1702 -> 52 [style=solid label="STATIC"]
  1702 -> 53 [style=solid label="THREAD_LOCAL"]
  1702 -> 54 [style=solid label="MUTABLE"]
  1702 -> 55 [style=solid label="TYPENAME"]
  1702 -> 56 [style=dashed label="alias-declaration"]
  1702 -> 57 [style=dashed label="alignment-specifier"]
  1702 -> 58 [style=dashed label="asm-declaration"]
  1702 -> 59 [style=dashed label="attribute-declaration"]
  1702 -> 60 [style=dashed label="attribute-specifier"]
  1702 -> 61 [style=dashed label="attribute-specifier-seq"]
  1702 -> 62 [style=dashed label="block-declaration"]
  1702 -> 63 [style=dashed label="class-head"]
  1702 -> 64 [style=dashed label="class-key"]
  1702 -> 65 [style=dashed label="class-name"]
  1702 -> 66 [style=dashed label="class-specifier"]
  1702 -> 67 [style=dashed label="concept-name"]
  1702 -> 68 [style=dashed label="conversion-function-id"]
  1702 -> 69 [style=dashed label="cv-qualifier"]
  1702 -> 70 [style=dashed label="decl-specifier"]
  1702 -> 71 [style=dashed label="decl-specifier-seq"]
  1702 -> 72 [style=dashed label="declaration"]
  1702 -> 566 [style=dashed label="declaration-seq"]
  1702 -> 74 [style=dashed label="declarator"]
  1702 -> 75 [style=dashed label="declarator-id"]
  1702 -> 76 [style=dashed label="decltype-specifier"]
  1702 -> 77 [style=dashed label="deduction-guide"]
  1702 -> 78 [style=dashed label="defining-type-specifier"]
  1702 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1702 -> 80 [style=dashed label="elaborated-type-specifier"]
  1702 -> 81 [style=dashed label="empty-declaration"]
  1702 -> 82 [style=dashed label="enum-head"]
  1702 -> 83 [style=dashed label="enum-key"]
  1702 -> 84 [style=dashed label="enum-name"]
  1702 -> 85 [style=dashed label="enum-specifier"]
  1702 -> 86 [style=dashed label="explicit-instantiation"]
  1702 -> 87 [style=dashed label="explicit-specialization"]
  1702 -> 88 [style=dashed label="explicit-specifier"]
  1702 -> 89 [style=dashed label="export-declaration"]
  1702 -> 90 [style=dashed label="function-definition"]
  1702 -> 91 [style=dashed label="function-specifier"]
  1702 -> 93 [style=dashed label="id-expression"]
  1702 -> 94 [style=dashed label="linkage-specification"]
  1702 -> 95 [style=dashed label="literal-operator-id"]
  1702 -> 97 [style=dashed label="module-import-declaration"]
  1702 -> 98 [style=dashed label="named-namespace-definition"]
  1702 -> 99 [style=dashed label="namespace-alias"]
  1702 -> 100 [style=dashed label="namespace-alias-definition"]
  1702 -> 1831 [style=dashed label="namespace-body"]
  1702 -> 101 [style=dashed label="namespace-definition"]
  1702 -> 102 [style=dashed label="namespace-name"]
  1702 -> 103 [style=dashed label="nested-name-specifier"]
  1702 -> 104 [style=dashed label="nested-namespace-definition"]
  1702 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  1702 -> 106 [style=dashed label="noptr-declarator"]
  1702 -> 107 [style=dashed label="opaque-enum-declaration"]
  1702 -> 108 [style=dashed label="operator-function-id"]
  1702 -> 109 [style=dashed label="placeholder-type-specifier"]
  1702 -> 110 [style=dashed label="ptr-declarator"]
  1702 -> 111 [style=dashed label="ptr-operator"]
  1702 -> 112 [style=dashed label="qualified-id"]
  1702 -> 113 [style=dashed label="simple-declaration"]
  1702 -> 114 [style=dashed label="simple-template-id"]
  1702 -> 115 [style=dashed label="simple-type-specifier"]
  1702 -> 116 [style=dashed label="static_assert-declaration"]
  1702 -> 117 [style=dashed label="storage-class-specifier"]
  1702 -> 118 [style=dashed label="template-declaration"]
  1702 -> 119 [style=dashed label="template-head"]
  1702 -> 120 [style=dashed label="template-id"]
  1702 -> 121 [style=dashed label="template-name"]
  1702 -> 123 [style=dashed label="type-constraint"]
  1702 -> 124 [style=dashed label="type-name"]
  1702 -> 125 [style=dashed label="type-specifier"]
  1702 -> 126 [style=dashed label="typedef-name"]
  1702 -> 127 [style=dashed label="typename-specifier"]
  1702 -> 128 [style=dashed label="unnamed-namespace-definition"]
  1702 -> 129 [style=dashed label="unqualified-id"]
  1702 -> 130 [style=dashed label="using-declaration"]
  1702 -> 131 [style=dashed label="using-directive"]
  1702 -> 132 [style=dashed label="using-enum-declaration"]
  1703 [label="State 1703\n\l1025 static_assert-declaration: STATIC_ASSERT OPEN_PAREN constant-expression COMMA string-literal CLOSE_PAREN • SEMICOLON\l"]
  1703 -> 1832 [style=solid label="SEMICOLON"]
  1704 [label="State 1704\n\l1173 using-directive: attribute-specifier-seq USING NAMESPACE nested-name-specifier namespace-name SEMICOLON •\l"]
  1704 -> "1704R1173" [style=solid]
 "1704R1173" [label="R1173", fillcolor=3, shape=diamond, style=filled]
  1705 [label="State 1705\n\l 21 asm-declaration: attribute-specifier-seq ASM OPEN_PAREN string-literal CLOSE_PAREN SEMICOLON •\l"]
  1705 -> "1705R21" [style=solid]
 "1705R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  1706 [label="State 1706\n\l966 simple-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE initializer • SEMICOLON\l"]
  1706 -> 1833 [style=solid label="SEMICOLON"]
  1707 [label="State 1707\n\l968 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE • initializer SEMICOLON\l"]
  1707 -> 1273 [style=solid label="EQ"]
  1707 -> 643 [style=solid label="OPEN_PAREN"]
  1707 -> 935 [style=solid label="OPEN_BRACE"]
  1707 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1707 -> 646 [style=dashed label="braced-init-list"]
  1707 -> 1834 [style=dashed label="initializer"]
  1708 [label="State 1708\n\l609 member-declarator: IDENTIFIER COLON constant-expression brace-or-equal-initializer •\l"]
  1708 -> "1708R609" [style=solid]
 "1708R609" [label="R609", fillcolor=3, shape=diamond, style=filled]
  1709 [label="State 1709\n\l607 member-declarator: IDENTIFIER attribute-specifier-seq COLON constant-expression •\l611                  | IDENTIFIER attribute-specifier-seq COLON constant-expression • brace-or-equal-initializer\l"]
  1709 -> 1273 [style=solid label="EQ"]
  1709 -> 935 [style=solid label="OPEN_BRACE"]
  1709 -> 1835 [style=dashed label="brace-or-equal-initializer"]
  1709 -> 646 [style=dashed label="braced-init-list"]
  1709 -> "1709R607" [style=solid]
 "1709R607" [label="R607", fillcolor=3, shape=diamond, style=filled]
  1710 [label="State 1710\n\l610 member-declarator: COLON constant-expression brace-or-equal-initializer •\l612                  | attribute-specifier-seq COLON constant-expression brace-or-equal-initializer •\l"]
  1710 -> "1710R610" [style=solid]
 "1710R610" [label="R610", fillcolor=3, shape=diamond, style=filled]
  1710 -> "1710R612d" [label="[SEMICOLON, COMMA]", style=solid]
 "1710R612d" [label="R612", fillcolor=5, shape=diamond, style=filled]
  1711 [label="State 1711\n\l608 member-declarator: attribute-specifier-seq COLON constant-expression •\l612                  | attribute-specifier-seq COLON constant-expression • brace-or-equal-initializer\l"]
  1711 -> 1273 [style=solid label="EQ"]
  1711 -> 935 [style=solid label="OPEN_BRACE"]
  1711 -> 1836 [style=dashed label="brace-or-equal-initializer"]
  1711 -> 646 [style=dashed label="braced-init-list"]
  1711 -> "1711R608" [style=solid]
 "1711R608" [label="R608", fillcolor=3, shape=diamond, style=filled]
  1712 [label="State 1712\n\l405 function-definition: attribute-specifier-seq decl-specifier-seq declarator requires-clause • function-body\l602 member-declarator: declarator requires-clause •\l"]
  1712 -> 286 [style=solid label="EQ"]
  1712 -> 288 [style=solid label="COLON"]
  1712 -> 289 [style=solid label="OPEN_BRACE"]
  1712 -> 291 [style=solid label="TRY"]
  1712 -> 294 [style=dashed label="compound-statement"]
  1712 -> 295 [style=dashed label="ctor-initializer"]
  1712 -> 1477 [style=dashed label="function-body"]
  1712 -> 297 [style=dashed label="function-try-block"]
  1712 -> "1712R602" [style=solid]
 "1712R602" [label="R602", fillcolor=3, shape=diamond, style=filled]
  1713 [label="State 1713\n\l401 function-definition: attribute-specifier-seq decl-specifier-seq declarator virt-specifier-seq • function-body\l599 member-declarator: declarator virt-specifier-seq •\l601                  | declarator virt-specifier-seq • pure-specifier\l1179 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  1713 -> 1497 [style=solid label="EQ"]
  1713 -> 288 [style=solid label="COLON"]
  1713 -> 289 [style=solid label="OPEN_BRACE"]
  1713 -> 290 [style=solid label="FINAL"]
  1713 -> 291 [style=solid label="TRY"]
  1713 -> 293 [style=solid label="OVERRIDE"]
  1713 -> 294 [style=dashed label="compound-statement"]
  1713 -> 295 [style=dashed label="ctor-initializer"]
  1713 -> 1478 [style=dashed label="function-body"]
  1713 -> 297 [style=dashed label="function-try-block"]
  1713 -> 1498 [style=dashed label="pure-specifier"]
  1713 -> 703 [style=dashed label="virt-specifier"]
  1713 -> "1713R599" [style=solid]
 "1713R599" [label="R599", fillcolor=3, shape=diamond, style=filled]
  1714 [label="State 1714\n\l586 member-declaration: attribute-specifier-seq decl-specifier-seq member-declarator-list SEMICOLON •\l"]
  1714 -> "1714R586" [style=solid]
 "1714R586" [label="R586", fillcolor=3, shape=diamond, style=filled]
  1715 [label="State 1715\n\l905 pure-specifier: EQ '0' •\l"]
  1715 -> "1715R905" [style=solid]
 "1715R905" [label="R905", fillcolor=3, shape=diamond, style=filled]
  1716 [label="State 1716\n\l106 brace-or-equal-initializer: EQ • initializer-clause\l905 pure-specifier: EQ • '0'\l"]
  1716 -> 356 [style=solid label="PLUS"]
  1716 -> 357 [style=solid label="MINUS"]
  1716 -> 2 [style=solid label="IDENTIFIER"]
  1716 -> 358 [style=solid label="OPEN_PAREN"]
  1716 -> 359 [style=solid label="AND"]
  1716 -> 360 [style=solid label="SCOPE"]
  1716 -> 361 [style=solid label="OPEN_SQUARE"]
  1716 -> 362 [style=solid label="CO_AWAIT"]
  1716 -> 935 [style=solid label="OPEN_BRACE"]
  1716 -> 363 [style=solid label="ZERO_LB"]
  1716 -> 364 [style=solid label="ZERO_HB"]
  1716 -> 365 [style=solid label="SINGLE_QUOTE"]
  1716 -> 366 [style=solid label="FALSE"]
  1716 -> 367 [style=solid label="TRUE"]
  1716 -> 368 [style=solid label="NOEXCEPT"]
  1716 -> 17 [style=solid label="OPERATOR"]
  1716 -> 26 [style=solid label="DECLTYPE"]
  1716 -> 369 [style=solid label="DELETE"]
  1716 -> 370 [style=solid label="DOT"]
  1716 -> 184 [style=solid label="UNICODE_8"]
  1716 -> 371 [style=solid label="MULT"]
  1716 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1716 -> 372 [style=solid label="ZERO_LX"]
  1716 -> 373 [style=solid label="ZERO_HX"]
  1716 -> 374 [style=solid label="REQUIRES"]
  1716 -> 375 [style=solid label="NEW"]
  1716 -> 376 [style=solid label="COMPL"]
  1716 -> 377 [style=solid label="NOT"]
  1716 -> 378 [style=solid label="PLUS_PLUS"]
  1716 -> 379 [style=solid label="MINUS_MINUS"]
  1716 -> 380 [style=solid label="THIS"]
  1716 -> 36 [style=solid label="AUTO"]
  1716 -> 381 [style=solid label="NULLPTR"]
  1716 -> 382 [style=solid label="DYNAMIC_CAST"]
  1716 -> 383 [style=solid label="STATIC_CAST"]
  1716 -> 384 [style=solid label="REINTERPRET_CAST"]
  1716 -> 385 [style=solid label="CONST_CAST"]
  1716 -> 386 [style=solid label="TYPEID"]
  1716 -> 37 [style=solid label="CHAR"]
  1716 -> 38 [style=solid label="CHAR8_T"]
  1716 -> 39 [style=solid label="CHAR16_T"]
  1716 -> 40 [style=solid label="CHAR32_T"]
  1716 -> 41 [style=solid label="WCHAR_T"]
  1716 -> 42 [style=solid label="BOOL"]
  1716 -> 43 [style=solid label="SHORT"]
  1716 -> 44 [style=solid label="INT"]
  1716 -> 45 [style=solid label="LONG"]
  1716 -> 46 [style=solid label="SIGNED"]
  1716 -> 47 [style=solid label="UNSIGNED"]
  1716 -> 48 [style=solid label="FLOAT"]
  1716 -> 49 [style=solid label="DOUBLE"]
  1716 -> 50 [style=solid label="VOID"]
  1716 -> 523 [style=solid label="THROW"]
  1716 -> 55 [style=solid label="TYPENAME"]
  1716 -> 387 [style=solid label="SIZEOF"]
  1716 -> 388 [style=solid label="ALIGNOF"]
  1716 -> 524 [style=solid label="CO_YIELD"]
  1716 -> 1496 [style=solid label="'0'"]
  1716 -> 390 [style=solid label="'1'"]
  1716 -> 391 [style=solid label="'2'"]
  1716 -> 392 [style=solid label="'3'"]
  1716 -> 393 [style=solid label="'4'"]
  1716 -> 394 [style=solid label="'5'"]
  1716 -> 395 [style=solid label="'6'"]
  1716 -> 396 [style=solid label="'7'"]
  1716 -> 397 [style=solid label="'8'"]
  1716 -> 398 [style=solid label="'9'"]
  1716 -> 205 [style=solid label="'u'"]
  1716 -> 206 [style=solid label="'U'"]
  1716 -> 207 [style=solid label="'L'"]
  1716 -> 208 [style=solid label="'R'"]
  1716 -> 399 [style=dashed label="additive-expression"]
  1716 -> 400 [style=dashed label="and-expression"]
  1716 -> 1134 [style=dashed label="assignment-expression"]
  1716 -> 401 [style=dashed label="await-expression"]
  1716 -> 402 [style=dashed label="binary-literal"]
  1716 -> 403 [style=dashed label="boolean-literal"]
  1716 -> 1135 [style=dashed label="braced-init-list"]
  1716 -> 404 [style=dashed label="cast-expression"]
  1716 -> 405 [style=dashed label="character-literal"]
  1716 -> 65 [style=dashed label="class-name"]
  1716 -> 406 [style=dashed label="compare-expression"]
  1716 -> 67 [style=dashed label="concept-name"]
  1716 -> 526 [style=dashed label="conditional-expression"]
  1716 -> 68 [style=dashed label="conversion-function-id"]
  1716 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1716 -> 410 [style=dashed label="decimal-literal"]
  1716 -> 76 [style=dashed label="decltype-specifier"]
  1716 -> 411 [style=dashed label="delete-expression"]
  1716 -> 412 [style=dashed label="digit"]
  1716 -> 413 [style=dashed label="digit-sequence"]
  1716 -> 414 [style=dashed label="encoding-prefix"]
  1716 -> 84 [style=dashed label="enum-name"]
  1716 -> 415 [style=dashed label="equality-expression"]
  1716 -> 416 [style=dashed label="exclusive-or-expression"]
  1716 -> 417 [style=dashed label="floating-point-literal"]
  1716 -> 418 [style=dashed label="fold-expression"]
  1716 -> 419 [style=dashed label="fractional-constant"]
  1716 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1716 -> 421 [style=dashed label="hexadecimal-literal"]
  1716 -> 422 [style=dashed label="hexadecimal-prefix"]
  1716 -> 423 [style=dashed label="id-expression"]
  1716 -> 424 [style=dashed label="inclusive-or-expression"]
  1716 -> 1136 [style=dashed label="initializer-clause"]
  1716 -> 425 [style=dashed label="integer-literal"]
  1716 -> 426 [style=dashed label="lambda-expression"]
  1716 -> 427 [style=dashed label="lambda-introducer"]
  1716 -> 428 [style=dashed label="literal"]
  1716 -> 95 [style=dashed label="literal-operator-id"]
  1716 -> 429 [style=dashed label="logical-and-expression"]
  1716 -> 528 [style=dashed label="logical-or-expression"]
  1716 -> 431 [style=dashed label="multiplicative-expression"]
  1716 -> 99 [style=dashed label="namespace-alias"]
  1716 -> 102 [style=dashed label="namespace-name"]
  1716 -> 432 [style=dashed label="nested-name-specifier"]
  1716 -> 433 [style=dashed label="new-expression"]
  1716 -> 434 [style=dashed label="noexcept-expression"]
  1716 -> 435 [style=dashed label="nonzero-digit"]
  1716 -> 436 [style=dashed label="octal-literal"]
  1716 -> 108 [style=dashed label="operator-function-id"]
  1716 -> 109 [style=dashed label="placeholder-type-specifier"]
  1716 -> 437 [style=dashed label="pm-expression"]
  1716 -> 438 [style=dashed label="pointer-literal"]
  1716 -> 439 [style=dashed label="postfix-expression"]
  1716 -> 440 [style=dashed label="primary-expression"]
  1716 -> 112 [style=dashed label="qualified-id"]
  1716 -> 441 [style=dashed label="relational-expression"]
  1716 -> 442 [style=dashed label="requires-expression"]
  1716 -> 443 [style=dashed label="shift-expression"]
  1716 -> 114 [style=dashed label="simple-template-id"]
  1716 -> 529 [style=dashed label="simple-type-specifier"]
  1716 -> 445 [style=dashed label="string-literal"]
  1716 -> 120 [style=dashed label="template-id"]
  1716 -> 215 [style=dashed label="template-name"]
  1716 -> 530 [style=dashed label="throw-expression"]
  1716 -> 123 [style=dashed label="type-constraint"]
  1716 -> 124 [style=dashed label="type-name"]
  1716 -> 126 [style=dashed label="typedef-name"]
  1716 -> 531 [style=dashed label="typename-specifier"]
  1716 -> 449 [style=dashed label="unary-expression"]
  1716 -> 450 [style=dashed label="unary-operator"]
  1716 -> 129 [style=dashed label="unqualified-id"]
  1716 -> 451 [style=dashed label="user-defined-character-literal"]
  1716 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1716 -> 453 [style=dashed label="user-defined-integer-literal"]
  1716 -> 454 [style=dashed label="user-defined-literal"]
  1716 -> 455 [style=dashed label="user-defined-string-literal"]
  1716 -> 532 [style=dashed label="yield-expression"]
  1717 [label="State 1717\n\l602 member-declarator: declarator requires-clause •\l"]
  1717 -> "1717R602" [style=solid]
 "1717R602" [label="R602", fillcolor=3, shape=diamond, style=filled]
  1718 [label="State 1718\n\l599 member-declarator: declarator virt-specifier-seq •\l601                  | declarator virt-specifier-seq • pure-specifier\l1179 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  1718 -> 1837 [style=solid label="EQ"]
  1718 -> 290 [style=solid label="FINAL"]
  1718 -> 293 [style=solid label="OVERRIDE"]
  1718 -> 1498 [style=dashed label="pure-specifier"]
  1718 -> 703 [style=dashed label="virt-specifier"]
  1718 -> "1718R599" [style=solid]
 "1718R599" [label="R599", fillcolor=3, shape=diamond, style=filled]
  1719 [label="State 1719\n\l 73 base-specifier: attribute-specifier-seq VIRTUAL access-specifier class-or-decltype •\l"]
  1719 -> "1719R73" [style=solid]
 "1719R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  1720 [label="State 1720\n\l 77 base-specifier: attribute-specifier-seq access-specifier VIRTUAL class-or-decltype •\l"]
  1720 -> "1720R77" [style=solid]
 "1720R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  1721 [label="State 1721\n\l 82 base-specifier-list: base-specifier-list COMMA base-specifier ELLIPSIS •\l"]
  1721 -> "1721R82" [style=solid]
 "1721R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
  1722 [label="State 1722\n\l1042 template-argument-list: template-argument-list COMMA template-argument ELLIPSIS •\l"]
  1722 -> "1722R1042" [style=solid]
 "1722R1042" [label="R1042", fillcolor=3, shape=diamond, style=filled]
  1723 [label="State 1723\n\l967 simple-declaration: decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON •\l"]
  1723 -> "1723R967" [style=solid]
 "1723R967" [label="R967", fillcolor=3, shape=diamond, style=filled]
  1724 [label="State 1724\n\l483 initializer-list: initializer-list COMMA initializer-clause •\l484                 | initializer-list COMMA initializer-clause • ELLIPSIS\l"]
  1724 -> 1838 [style=solid label="ELLIPSIS"]
  1724 -> "1724R483" [style=solid]
 "1724R483" [label="R483", fillcolor=3, shape=diamond, style=filled]
  1725 [label="State 1725\n\l111 braced-init-list: OPEN_BRACE designated-initializer-list COMMA CLOSE_BRACE •\l"]
  1725 -> "1725R111" [style=solid]
 "1725R111" [label="R111", fillcolor=3, shape=diamond, style=filled]
  1726 [label="State 1726\n\l248 designator: DOT • IDENTIFIER\l"]
  1726 -> 1516 [style=solid label="IDENTIFIER"]
  1727 [label="State 1727\n\l247 designated-initializer-list: designated-initializer-list COMMA designated-initializer-clause •\l"]
  1727 -> "1727R247" [style=solid]
 "1727R247" [label="R247", fillcolor=3, shape=diamond, style=filled]
  1728 [label="State 1728\n\l109 braced-init-list: OPEN_BRACE initializer-list COMMA CLOSE_BRACE •\l"]
  1728 -> "1728R109" [style=solid]
 "1728R109" [label="R109", fillcolor=3, shape=diamond, style=filled]
  1729 [label="State 1729\n\l969 simple-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer • SEMICOLON\l"]
  1729 -> 1839 [style=solid label="SEMICOLON"]
  1730 [label="State 1730\n\l572 mem-initializer: mem-initializer-id OPEN_PAREN expression-list CLOSE_PAREN •\l"]
  1730 -> "1730R572" [style=solid]
 "1730R572" [label="R572", fillcolor=3, shape=diamond, style=filled]
  1731 [label="State 1731\n\l579 mem-initializer-list: mem-initializer-list COMMA mem-initializer ELLIPSIS •\l"]
  1731 -> "1731R579" [style=solid]
 "1731R579" [label="R579", fillcolor=3, shape=diamond, style=filled]
  1732 [label="State 1732\n\l165 condition: attribute-specifier-seq decl-specifier-seq • declarator brace-or-equal-initializer\l"]
  1732 -> 147 [style=solid label="IDENTIFIER"]
  1732 -> 5 [style=solid label="OPEN_PAREN"]
  1732 -> 6 [style=solid label="ELLIPSIS"]
  1732 -> 7 [style=solid label="AND"]
  1732 -> 9 [style=solid label="SCOPE"]
  1732 -> 16 [style=solid label="AND_AND"]
  1732 -> 17 [style=solid label="OPERATOR"]
  1732 -> 134 [style=solid label="DECLTYPE"]
  1732 -> 31 [style=solid label="MULT"]
  1732 -> 35 [style=solid label="COMPL"]
  1732 -> 65 [style=dashed label="class-name"]
  1732 -> 68 [style=dashed label="conversion-function-id"]
  1732 -> 1840 [style=dashed label="declarator"]
  1732 -> 75 [style=dashed label="declarator-id"]
  1732 -> 138 [style=dashed label="decltype-specifier"]
  1732 -> 84 [style=dashed label="enum-name"]
  1732 -> 93 [style=dashed label="id-expression"]
  1732 -> 95 [style=dashed label="literal-operator-id"]
  1732 -> 99 [style=dashed label="namespace-alias"]
  1732 -> 102 [style=dashed label="namespace-name"]
  1732 -> 148 [style=dashed label="nested-name-specifier"]
  1732 -> 106 [style=dashed label="noptr-declarator"]
  1732 -> 108 [style=dashed label="operator-function-id"]
  1732 -> 110 [style=dashed label="ptr-declarator"]
  1732 -> 111 [style=dashed label="ptr-operator"]
  1732 -> 112 [style=dashed label="qualified-id"]
  1732 -> 114 [style=dashed label="simple-template-id"]
  1732 -> 120 [style=dashed label="template-id"]
  1732 -> 142 [style=dashed label="template-name"]
  1732 -> 143 [style=dashed label="type-name"]
  1732 -> 126 [style=dashed label="typedef-name"]
  1732 -> 129 [style=dashed label="unqualified-id"]
  1733 [label="State 1733\n\l505 iteration-statement: WHILE OPEN_PAREN condition CLOSE_PAREN • statement\l"]
  1733 -> 356 [style=solid label="PLUS"]
  1733 -> 357 [style=solid label="MINUS"]
  1733 -> 1 [style=solid label="USING"]
  1733 -> 661 [style=solid label="IDENTIFIER"]
  1733 -> 662 [style=solid label="SEMICOLON"]
  1733 -> 4 [style=solid label="ALIGNAS"]
  1733 -> 358 [style=solid label="OPEN_PAREN"]
  1733 -> 359 [style=solid label="AND"]
  1733 -> 8 [style=solid label="ASM"]
  1733 -> 360 [style=solid label="SCOPE"]
  1733 -> 663 [style=solid label="OPEN_SQUARE"]
  1733 -> 362 [style=solid label="CO_AWAIT"]
  1733 -> 289 [style=solid label="OPEN_BRACE"]
  1733 -> 11 [style=solid label="VIRTUAL"]
  1733 -> 363 [style=solid label="ZERO_LB"]
  1733 -> 364 [style=solid label="ZERO_HB"]
  1733 -> 365 [style=solid label="SINGLE_QUOTE"]
  1733 -> 366 [style=solid label="FALSE"]
  1733 -> 367 [style=solid label="TRUE"]
  1733 -> 12 [style=solid label="CLASS"]
  1733 -> 13 [style=solid label="STRUCT"]
  1733 -> 14 [style=solid label="UNION"]
  1733 -> 368 [style=solid label="NOEXCEPT"]
  1733 -> 17 [style=solid label="OPERATOR"]
  1733 -> 665 [style=solid label="CO_RETURN"]
  1733 -> 18 [style=solid label="CONST"]
  1733 -> 19 [style=solid label="VOLATILE"]
  1733 -> 20 [style=solid label="FRIEND"]
  1733 -> 21 [style=solid label="TYPEDEF"]
  1733 -> 22 [style=solid label="CONSTEXPR"]
  1733 -> 23 [style=solid label="CONSTEVAL"]
  1733 -> 24 [style=solid label="CONSTINIT"]
  1733 -> 258 [style=solid label="INLINE"]
  1733 -> 26 [style=solid label="DECLTYPE"]
  1733 -> 369 [style=solid label="DELETE"]
  1733 -> 370 [style=solid label="DOT"]
  1733 -> 27 [style=solid label="ENUM"]
  1733 -> 184 [style=solid label="UNICODE_8"]
  1733 -> 259 [style=solid label="EXTERN"]
  1733 -> 29 [style=solid label="EXPLICIT"]
  1733 -> 371 [style=solid label="MULT"]
  1733 -> 666 [style=solid label="DEFAULT"]
  1733 -> 667 [style=solid label="TRY"]
  1733 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1733 -> 372 [style=solid label="ZERO_LX"]
  1733 -> 373 [style=solid label="ZERO_HX"]
  1733 -> 668 [style=solid label="WHILE"]
  1733 -> 669 [style=solid label="DO"]
  1733 -> 670 [style=solid label="FOR"]
  1733 -> 671 [style=solid label="BREAK"]
  1733 -> 672 [style=solid label="CONTINUE"]
  1733 -> 673 [style=solid label="RETURN"]
  1733 -> 674 [style=solid label="GOTO"]
  1733 -> 675 [style=solid label="CASE"]
  1733 -> 676 [style=solid label="NAMESPACE"]
  1733 -> 374 [style=solid label="REQUIRES"]
  1733 -> 375 [style=solid label="NEW"]
  1733 -> 376 [style=solid label="COMPL"]
  1733 -> 377 [style=solid label="NOT"]
  1733 -> 378 [style=solid label="PLUS_PLUS"]
  1733 -> 379 [style=solid label="MINUS_MINUS"]
  1733 -> 380 [style=solid label="THIS"]
  1733 -> 36 [style=solid label="AUTO"]
  1733 -> 381 [style=solid label="NULLPTR"]
  1733 -> 382 [style=solid label="DYNAMIC_CAST"]
  1733 -> 383 [style=solid label="STATIC_CAST"]
  1733 -> 384 [style=solid label="REINTERPRET_CAST"]
  1733 -> 385 [style=solid label="CONST_CAST"]
  1733 -> 386 [style=solid label="TYPEID"]
  1733 -> 677 [style=solid label="IF"]
  1733 -> 678 [style=solid label="SWITCH"]
  1733 -> 37 [style=solid label="CHAR"]
  1733 -> 38 [style=solid label="CHAR8_T"]
  1733 -> 39 [style=solid label="CHAR16_T"]
  1733 -> 40 [style=solid label="CHAR32_T"]
  1733 -> 41 [style=solid label="WCHAR_T"]
  1733 -> 42 [style=solid label="BOOL"]
  1733 -> 43 [style=solid label="SHORT"]
  1733 -> 44 [style=solid label="INT"]
  1733 -> 45 [style=solid label="LONG"]
  1733 -> 46 [style=solid label="SIGNED"]
  1733 -> 47 [style=solid label="UNSIGNED"]
  1733 -> 48 [style=solid label="FLOAT"]
  1733 -> 49 [style=solid label="DOUBLE"]
  1733 -> 50 [style=solid label="VOID"]
  1733 -> 51 [style=solid label="STATIC_ASSERT"]
  1733 -> 52 [style=solid label="STATIC"]
  1733 -> 53 [style=solid label="THREAD_LOCAL"]
  1733 -> 54 [style=solid label="MUTABLE"]
  1733 -> 523 [style=solid label="THROW"]
  1733 -> 55 [style=solid label="TYPENAME"]
  1733 -> 387 [style=solid label="SIZEOF"]
  1733 -> 388 [style=solid label="ALIGNOF"]
  1733 -> 524 [style=solid label="CO_YIELD"]
  1733 -> 389 [style=solid label="'0'"]
  1733 -> 390 [style=solid label="'1'"]
  1733 -> 391 [style=solid label="'2'"]
  1733 -> 392 [style=solid label="'3'"]
  1733 -> 393 [style=solid label="'4'"]
  1733 -> 394 [style=solid label="'5'"]
  1733 -> 395 [style=solid label="'6'"]
  1733 -> 396 [style=solid label="'7'"]
  1733 -> 397 [style=solid label="'8'"]
  1733 -> 398 [style=solid label="'9'"]
  1733 -> 205 [style=solid label="'u'"]
  1733 -> 206 [style=solid label="'U'"]
  1733 -> 207 [style=solid label="'L'"]
  1733 -> 208 [style=solid label="'R'"]
  1733 -> 399 [style=dashed label="additive-expression"]
  1733 -> 56 [style=dashed label="alias-declaration"]
  1733 -> 57 [style=dashed label="alignment-specifier"]
  1733 -> 400 [style=dashed label="and-expression"]
  1733 -> 58 [style=dashed label="asm-declaration"]
  1733 -> 525 [style=dashed label="assignment-expression"]
  1733 -> 60 [style=dashed label="attribute-specifier"]
  1733 -> 679 [style=dashed label="attribute-specifier-seq"]
  1733 -> 401 [style=dashed label="await-expression"]
  1733 -> 402 [style=dashed label="binary-literal"]
  1733 -> 680 [style=dashed label="block-declaration"]
  1733 -> 403 [style=dashed label="boolean-literal"]
  1733 -> 404 [style=dashed label="cast-expression"]
  1733 -> 405 [style=dashed label="character-literal"]
  1733 -> 63 [style=dashed label="class-head"]
  1733 -> 64 [style=dashed label="class-key"]
  1733 -> 65 [style=dashed label="class-name"]
  1733 -> 66 [style=dashed label="class-specifier"]
  1733 -> 406 [style=dashed label="compare-expression"]
  1733 -> 681 [style=dashed label="compound-statement"]
  1733 -> 67 [style=dashed label="concept-name"]
  1733 -> 526 [style=dashed label="conditional-expression"]
  1733 -> 68 [style=dashed label="conversion-function-id"]
  1733 -> 682 [style=dashed label="coroutine-return-statement"]
  1733 -> 69 [style=dashed label="cv-qualifier"]
  1733 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1733 -> 410 [style=dashed label="decimal-literal"]
  1733 -> 70 [style=dashed label="decl-specifier"]
  1733 -> 683 [style=dashed label="decl-specifier-seq"]
  1733 -> 684 [style=dashed label="declaration-statement"]
  1733 -> 76 [style=dashed label="decltype-specifier"]
  1733 -> 78 [style=dashed label="defining-type-specifier"]
  1733 -> 411 [style=dashed label="delete-expression"]
  1733 -> 412 [style=dashed label="digit"]
  1733 -> 413 [style=dashed label="digit-sequence"]
  1733 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1733 -> 80 [style=dashed label="elaborated-type-specifier"]
  1733 -> 414 [style=dashed label="encoding-prefix"]
  1733 -> 82 [style=dashed label="enum-head"]
  1733 -> 83 [style=dashed label="enum-key"]
  1733 -> 84 [style=dashed label="enum-name"]
  1733 -> 85 [style=dashed label="enum-specifier"]
  1733 -> 415 [style=dashed label="equality-expression"]
  1733 -> 416 [style=dashed label="exclusive-or-expression"]
  1733 -> 264 [style=dashed label="explicit-specifier"]
  1733 -> 685 [style=dashed label="expression"]
  1733 -> 686 [style=dashed label="expression-statement"]
  1733 -> 417 [style=dashed label="floating-point-literal"]
  1733 -> 418 [style=dashed label="fold-expression"]
  1733 -> 419 [style=dashed label="fractional-constant"]
  1733 -> 91 [style=dashed label="function-specifier"]
  1733 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1733 -> 421 [style=dashed label="hexadecimal-literal"]
  1733 -> 422 [style=dashed label="hexadecimal-prefix"]
  1733 -> 423 [style=dashed label="id-expression"]
  1733 -> 424 [style=dashed label="inclusive-or-expression"]
  1733 -> 425 [style=dashed label="integer-literal"]
  1733 -> 687 [style=dashed label="iteration-statement"]
  1733 -> 688 [style=dashed label="jump-statement"]
  1733 -> 689 [style=dashed label="labeled-statement"]
  1733 -> 426 [style=dashed label="lambda-expression"]
  1733 -> 427 [style=dashed label="lambda-introducer"]
  1733 -> 428 [style=dashed label="literal"]
  1733 -> 95 [style=dashed label="literal-operator-id"]
  1733 -> 429 [style=dashed label="logical-and-expression"]
  1733 -> 528 [style=dashed label="logical-or-expression"]
  1733 -> 431 [style=dashed label="multiplicative-expression"]
  1733 -> 99 [style=dashed label="namespace-alias"]
  1733 -> 100 [style=dashed label="namespace-alias-definition"]
  1733 -> 102 [style=dashed label="namespace-name"]
  1733 -> 432 [style=dashed label="nested-name-specifier"]
  1733 -> 433 [style=dashed label="new-expression"]
  1733 -> 434 [style=dashed label="noexcept-expression"]
  1733 -> 435 [style=dashed label="nonzero-digit"]
  1733 -> 436 [style=dashed label="octal-literal"]
  1733 -> 107 [style=dashed label="opaque-enum-declaration"]
  1733 -> 108 [style=dashed label="operator-function-id"]
  1733 -> 109 [style=dashed label="placeholder-type-specifier"]
  1733 -> 437 [style=dashed label="pm-expression"]
  1733 -> 438 [style=dashed label="pointer-literal"]
  1733 -> 439 [style=dashed label="postfix-expression"]
  1733 -> 440 [style=dashed label="primary-expression"]
  1733 -> 112 [style=dashed label="qualified-id"]
  1733 -> 441 [style=dashed label="relational-expression"]
  1733 -> 442 [style=dashed label="requires-expression"]
  1733 -> 690 [style=dashed label="selection-statement"]
  1733 -> 443 [style=dashed label="shift-expression"]
  1733 -> 113 [style=dashed label="simple-declaration"]
  1733 -> 114 [style=dashed label="simple-template-id"]
  1733 -> 444 [style=dashed label="simple-type-specifier"]
  1733 -> 1841 [style=dashed label="statement"]
  1733 -> 116 [style=dashed label="static_assert-declaration"]
  1733 -> 117 [style=dashed label="storage-class-specifier"]
  1733 -> 445 [style=dashed label="string-literal"]
  1733 -> 120 [style=dashed label="template-id"]
  1733 -> 215 [style=dashed label="template-name"]
  1733 -> 530 [style=dashed label="throw-expression"]
  1733 -> 693 [style=dashed label="try-block"]
  1733 -> 123 [style=dashed label="type-constraint"]
  1733 -> 124 [style=dashed label="type-name"]
  1733 -> 125 [style=dashed label="type-specifier"]
  1733 -> 126 [style=dashed label="typedef-name"]
  1733 -> 448 [style=dashed label="typename-specifier"]
  1733 -> 449 [style=dashed label="unary-expression"]
  1733 -> 450 [style=dashed label="unary-operator"]
  1733 -> 129 [style=dashed label="unqualified-id"]
  1733 -> 451 [style=dashed label="user-defined-character-literal"]
  1733 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1733 -> 453 [style=dashed label="user-defined-integer-literal"]
  1733 -> 454 [style=dashed label="user-defined-literal"]
  1733 -> 455 [style=dashed label="user-defined-string-literal"]
  1733 -> 130 [style=dashed label="using-declaration"]
  1733 -> 131 [style=dashed label="using-directive"]
  1733 -> 132 [style=dashed label="using-enum-declaration"]
  1733 -> 532 [style=dashed label="yield-expression"]
  1734 [label="State 1734\n\l166 condition: decl-specifier-seq declarator • brace-or-equal-initializer\l"]
  1734 -> 1273 [style=solid label="EQ"]
  1734 -> 935 [style=solid label="OPEN_BRACE"]
  1734 -> 1842 [style=dashed label="brace-or-equal-initializer"]
  1734 -> 646 [style=dashed label="braced-init-list"]
  1735 [label="State 1735\n\l506 iteration-statement: DO statement WHILE OPEN_PAREN • expression CLOSE_PAREN SEMICOLON\l"]
  1735 -> 356 [style=solid label="PLUS"]
  1735 -> 357 [style=solid label="MINUS"]
  1735 -> 2 [style=solid label="IDENTIFIER"]
  1735 -> 358 [style=solid label="OPEN_PAREN"]
  1735 -> 359 [style=solid label="AND"]
  1735 -> 360 [style=solid label="SCOPE"]
  1735 -> 361 [style=solid label="OPEN_SQUARE"]
  1735 -> 362 [style=solid label="CO_AWAIT"]
  1735 -> 363 [style=solid label="ZERO_LB"]
  1735 -> 364 [style=solid label="ZERO_HB"]
  1735 -> 365 [style=solid label="SINGLE_QUOTE"]
  1735 -> 366 [style=solid label="FALSE"]
  1735 -> 367 [style=solid label="TRUE"]
  1735 -> 368 [style=solid label="NOEXCEPT"]
  1735 -> 17 [style=solid label="OPERATOR"]
  1735 -> 26 [style=solid label="DECLTYPE"]
  1735 -> 369 [style=solid label="DELETE"]
  1735 -> 370 [style=solid label="DOT"]
  1735 -> 184 [style=solid label="UNICODE_8"]
  1735 -> 371 [style=solid label="MULT"]
  1735 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1735 -> 372 [style=solid label="ZERO_LX"]
  1735 -> 373 [style=solid label="ZERO_HX"]
  1735 -> 374 [style=solid label="REQUIRES"]
  1735 -> 375 [style=solid label="NEW"]
  1735 -> 376 [style=solid label="COMPL"]
  1735 -> 377 [style=solid label="NOT"]
  1735 -> 378 [style=solid label="PLUS_PLUS"]
  1735 -> 379 [style=solid label="MINUS_MINUS"]
  1735 -> 380 [style=solid label="THIS"]
  1735 -> 36 [style=solid label="AUTO"]
  1735 -> 381 [style=solid label="NULLPTR"]
  1735 -> 382 [style=solid label="DYNAMIC_CAST"]
  1735 -> 383 [style=solid label="STATIC_CAST"]
  1735 -> 384 [style=solid label="REINTERPRET_CAST"]
  1735 -> 385 [style=solid label="CONST_CAST"]
  1735 -> 386 [style=solid label="TYPEID"]
  1735 -> 37 [style=solid label="CHAR"]
  1735 -> 38 [style=solid label="CHAR8_T"]
  1735 -> 39 [style=solid label="CHAR16_T"]
  1735 -> 40 [style=solid label="CHAR32_T"]
  1735 -> 41 [style=solid label="WCHAR_T"]
  1735 -> 42 [style=solid label="BOOL"]
  1735 -> 43 [style=solid label="SHORT"]
  1735 -> 44 [style=solid label="INT"]
  1735 -> 45 [style=solid label="LONG"]
  1735 -> 46 [style=solid label="SIGNED"]
  1735 -> 47 [style=solid label="UNSIGNED"]
  1735 -> 48 [style=solid label="FLOAT"]
  1735 -> 49 [style=solid label="DOUBLE"]
  1735 -> 50 [style=solid label="VOID"]
  1735 -> 523 [style=solid label="THROW"]
  1735 -> 55 [style=solid label="TYPENAME"]
  1735 -> 387 [style=solid label="SIZEOF"]
  1735 -> 388 [style=solid label="ALIGNOF"]
  1735 -> 524 [style=solid label="CO_YIELD"]
  1735 -> 389 [style=solid label="'0'"]
  1735 -> 390 [style=solid label="'1'"]
  1735 -> 391 [style=solid label="'2'"]
  1735 -> 392 [style=solid label="'3'"]
  1735 -> 393 [style=solid label="'4'"]
  1735 -> 394 [style=solid label="'5'"]
  1735 -> 395 [style=solid label="'6'"]
  1735 -> 396 [style=solid label="'7'"]
  1735 -> 397 [style=solid label="'8'"]
  1735 -> 398 [style=solid label="'9'"]
  1735 -> 205 [style=solid label="'u'"]
  1735 -> 206 [style=solid label="'U'"]
  1735 -> 207 [style=solid label="'L'"]
  1735 -> 208 [style=solid label="'R'"]
  1735 -> 399 [style=dashed label="additive-expression"]
  1735 -> 400 [style=dashed label="and-expression"]
  1735 -> 525 [style=dashed label="assignment-expression"]
  1735 -> 401 [style=dashed label="await-expression"]
  1735 -> 402 [style=dashed label="binary-literal"]
  1735 -> 403 [style=dashed label="boolean-literal"]
  1735 -> 404 [style=dashed label="cast-expression"]
  1735 -> 405 [style=dashed label="character-literal"]
  1735 -> 65 [style=dashed label="class-name"]
  1735 -> 406 [style=dashed label="compare-expression"]
  1735 -> 67 [style=dashed label="concept-name"]
  1735 -> 526 [style=dashed label="conditional-expression"]
  1735 -> 68 [style=dashed label="conversion-function-id"]
  1735 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1735 -> 410 [style=dashed label="decimal-literal"]
  1735 -> 76 [style=dashed label="decltype-specifier"]
  1735 -> 411 [style=dashed label="delete-expression"]
  1735 -> 412 [style=dashed label="digit"]
  1735 -> 413 [style=dashed label="digit-sequence"]
  1735 -> 414 [style=dashed label="encoding-prefix"]
  1735 -> 84 [style=dashed label="enum-name"]
  1735 -> 415 [style=dashed label="equality-expression"]
  1735 -> 416 [style=dashed label="exclusive-or-expression"]
  1735 -> 1843 [style=dashed label="expression"]
  1735 -> 417 [style=dashed label="floating-point-literal"]
  1735 -> 418 [style=dashed label="fold-expression"]
  1735 -> 419 [style=dashed label="fractional-constant"]
  1735 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1735 -> 421 [style=dashed label="hexadecimal-literal"]
  1735 -> 422 [style=dashed label="hexadecimal-prefix"]
  1735 -> 423 [style=dashed label="id-expression"]
  1735 -> 424 [style=dashed label="inclusive-or-expression"]
  1735 -> 425 [style=dashed label="integer-literal"]
  1735 -> 426 [style=dashed label="lambda-expression"]
  1735 -> 427 [style=dashed label="lambda-introducer"]
  1735 -> 428 [style=dashed label="literal"]
  1735 -> 95 [style=dashed label="literal-operator-id"]
  1735 -> 429 [style=dashed label="logical-and-expression"]
  1735 -> 528 [style=dashed label="logical-or-expression"]
  1735 -> 431 [style=dashed label="multiplicative-expression"]
  1735 -> 99 [style=dashed label="namespace-alias"]
  1735 -> 102 [style=dashed label="namespace-name"]
  1735 -> 432 [style=dashed label="nested-name-specifier"]
  1735 -> 433 [style=dashed label="new-expression"]
  1735 -> 434 [style=dashed label="noexcept-expression"]
  1735 -> 435 [style=dashed label="nonzero-digit"]
  1735 -> 436 [style=dashed label="octal-literal"]
  1735 -> 108 [style=dashed label="operator-function-id"]
  1735 -> 109 [style=dashed label="placeholder-type-specifier"]
  1735 -> 437 [style=dashed label="pm-expression"]
  1735 -> 438 [style=dashed label="pointer-literal"]
  1735 -> 439 [style=dashed label="postfix-expression"]
  1735 -> 440 [style=dashed label="primary-expression"]
  1735 -> 112 [style=dashed label="qualified-id"]
  1735 -> 441 [style=dashed label="relational-expression"]
  1735 -> 442 [style=dashed label="requires-expression"]
  1735 -> 443 [style=dashed label="shift-expression"]
  1735 -> 114 [style=dashed label="simple-template-id"]
  1735 -> 529 [style=dashed label="simple-type-specifier"]
  1735 -> 445 [style=dashed label="string-literal"]
  1735 -> 120 [style=dashed label="template-id"]
  1735 -> 215 [style=dashed label="template-name"]
  1735 -> 530 [style=dashed label="throw-expression"]
  1735 -> 123 [style=dashed label="type-constraint"]
  1735 -> 124 [style=dashed label="type-name"]
  1735 -> 126 [style=dashed label="typedef-name"]
  1735 -> 531 [style=dashed label="typename-specifier"]
  1735 -> 449 [style=dashed label="unary-expression"]
  1735 -> 450 [style=dashed label="unary-operator"]
  1735 -> 129 [style=dashed label="unqualified-id"]
  1735 -> 451 [style=dashed label="user-defined-character-literal"]
  1735 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1735 -> 453 [style=dashed label="user-defined-integer-literal"]
  1735 -> 454 [style=dashed label="user-defined-literal"]
  1735 -> 455 [style=dashed label="user-defined-string-literal"]
  1735 -> 532 [style=dashed label="yield-expression"]
  1736 [label="State 1736\n\l 13 alias-declaration: USING IDENTIFIER • EQ defining-type-id SEMICOLON\l 14                  | USING IDENTIFIER • attribute-specifier-seq EQ defining-type-id SEMICOLON\l"]
  1736 -> 342 [style=solid label="EQ"]
  1736 -> 4 [style=solid label="ALIGNAS"]
  1736 -> 10 [style=solid label="OPEN_SQUARE"]
  1736 -> 57 [style=dashed label="alignment-specifier"]
  1736 -> 60 [style=dashed label="attribute-specifier"]
  1736 -> 343 [style=dashed label="attribute-specifier-seq"]
  1737 [label="State 1737\n\l380 for-range-declaration: attribute-specifier-seq decl-specifier-seq • declarator\l382                      | attribute-specifier-seq decl-specifier-seq • OPEN_SQUARE identifier-list CLOSE_SQUARE\l384                      | attribute-specifier-seq decl-specifier-seq • ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE\l965 simple-declaration: attribute-specifier-seq decl-specifier-seq • init-declarator-list SEMICOLON\l966                   | attribute-specifier-seq decl-specifier-seq • OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l968                   | attribute-specifier-seq decl-specifier-seq • ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1737 -> 147 [style=solid label="IDENTIFIER"]
  1737 -> 5 [style=solid label="OPEN_PAREN"]
  1737 -> 6 [style=solid label="ELLIPSIS"]
  1737 -> 278 [style=solid label="AND"]
  1737 -> 9 [style=solid label="SCOPE"]
  1737 -> 1844 [style=solid label="OPEN_SQUARE"]
  1737 -> 280 [style=solid label="AND_AND"]
  1737 -> 17 [style=solid label="OPERATOR"]
  1737 -> 134 [style=solid label="DECLTYPE"]
  1737 -> 31 [style=solid label="MULT"]
  1737 -> 35 [style=solid label="COMPL"]
  1737 -> 65 [style=dashed label="class-name"]
  1737 -> 68 [style=dashed label="conversion-function-id"]
  1737 -> 1845 [style=dashed label="declarator"]
  1737 -> 75 [style=dashed label="declarator-id"]
  1737 -> 138 [style=dashed label="decltype-specifier"]
  1737 -> 84 [style=dashed label="enum-name"]
  1737 -> 93 [style=dashed label="id-expression"]
  1737 -> 282 [style=dashed label="init-declarator"]
  1737 -> 579 [style=dashed label="init-declarator-list"]
  1737 -> 95 [style=dashed label="literal-operator-id"]
  1737 -> 99 [style=dashed label="namespace-alias"]
  1737 -> 102 [style=dashed label="namespace-name"]
  1737 -> 148 [style=dashed label="nested-name-specifier"]
  1737 -> 106 [style=dashed label="noptr-declarator"]
  1737 -> 108 [style=dashed label="operator-function-id"]
  1737 -> 110 [style=dashed label="ptr-declarator"]
  1737 -> 111 [style=dashed label="ptr-operator"]
  1737 -> 112 [style=dashed label="qualified-id"]
  1737 -> 1846 [style=dashed label="ref-qualifier"]
  1737 -> 114 [style=dashed label="simple-template-id"]
  1737 -> 120 [style=dashed label="template-id"]
  1737 -> 142 [style=dashed label="template-name"]
  1737 -> 143 [style=dashed label="type-name"]
  1737 -> 126 [style=dashed label="typedef-name"]
  1737 -> 129 [style=dashed label="unqualified-id"]
  1738 [label="State 1738\n\l383 for-range-declaration: decl-specifier-seq OPEN_SQUARE • identifier-list CLOSE_SQUARE\l967 simple-declaration: decl-specifier-seq OPEN_SQUARE • identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1738 -> 640 [style=solid label="IDENTIFIER"]
  1738 -> 1847 [style=dashed label="identifier-list"]
  1739 [label="State 1739\n\l381 for-range-declaration: decl-specifier-seq declarator •\l469 init-declarator: declarator •\l470                | declarator • initializer\l471                | declarator • requires-clause\l"]
  1739 -> 1273 [style=solid label="EQ"]
  1739 -> 643 [style=solid label="OPEN_PAREN"]
  1739 -> 935 [style=solid label="OPEN_BRACE"]
  1739 -> 292 [style=solid label="REQUIRES"]
  1739 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1739 -> 646 [style=dashed label="braced-init-list"]
  1739 -> 648 [style=dashed label="initializer"]
  1739 -> 1522 [style=dashed label="requires-clause"]
  1739 -> "1739R381" [label="[COLON]", style=solid]
 "1739R381" [label="R381", fillcolor=3, shape=diamond, style=filled]
  1739 -> "1739R469" [style=solid]
 "1739R469" [label="R469", fillcolor=3, shape=diamond, style=filled]
  1740 [label="State 1740\n\l385 for-range-declaration: decl-specifier-seq ref-qualifier • OPEN_SQUARE identifier-list CLOSE_SQUARE\l969 simple-declaration: decl-specifier-seq ref-qualifier • OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1740 -> 1848 [style=solid label="OPEN_SQUARE"]
  1741 [label="State 1741\n\l511 iteration-statement: FOR OPEN_PAREN for-range-declaration COLON • for-range-initializer CLOSE_PAREN statement\l"]
  1741 -> 356 [style=solid label="PLUS"]
  1741 -> 357 [style=solid label="MINUS"]
  1741 -> 2 [style=solid label="IDENTIFIER"]
  1741 -> 358 [style=solid label="OPEN_PAREN"]
  1741 -> 359 [style=solid label="AND"]
  1741 -> 360 [style=solid label="SCOPE"]
  1741 -> 361 [style=solid label="OPEN_SQUARE"]
  1741 -> 362 [style=solid label="CO_AWAIT"]
  1741 -> 935 [style=solid label="OPEN_BRACE"]
  1741 -> 363 [style=solid label="ZERO_LB"]
  1741 -> 364 [style=solid label="ZERO_HB"]
  1741 -> 365 [style=solid label="SINGLE_QUOTE"]
  1741 -> 366 [style=solid label="FALSE"]
  1741 -> 367 [style=solid label="TRUE"]
  1741 -> 368 [style=solid label="NOEXCEPT"]
  1741 -> 17 [style=solid label="OPERATOR"]
  1741 -> 26 [style=solid label="DECLTYPE"]
  1741 -> 369 [style=solid label="DELETE"]
  1741 -> 370 [style=solid label="DOT"]
  1741 -> 184 [style=solid label="UNICODE_8"]
  1741 -> 371 [style=solid label="MULT"]
  1741 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1741 -> 372 [style=solid label="ZERO_LX"]
  1741 -> 373 [style=solid label="ZERO_HX"]
  1741 -> 374 [style=solid label="REQUIRES"]
  1741 -> 375 [style=solid label="NEW"]
  1741 -> 376 [style=solid label="COMPL"]
  1741 -> 377 [style=solid label="NOT"]
  1741 -> 378 [style=solid label="PLUS_PLUS"]
  1741 -> 379 [style=solid label="MINUS_MINUS"]
  1741 -> 380 [style=solid label="THIS"]
  1741 -> 36 [style=solid label="AUTO"]
  1741 -> 381 [style=solid label="NULLPTR"]
  1741 -> 382 [style=solid label="DYNAMIC_CAST"]
  1741 -> 383 [style=solid label="STATIC_CAST"]
  1741 -> 384 [style=solid label="REINTERPRET_CAST"]
  1741 -> 385 [style=solid label="CONST_CAST"]
  1741 -> 386 [style=solid label="TYPEID"]
  1741 -> 37 [style=solid label="CHAR"]
  1741 -> 38 [style=solid label="CHAR8_T"]
  1741 -> 39 [style=solid label="CHAR16_T"]
  1741 -> 40 [style=solid label="CHAR32_T"]
  1741 -> 41 [style=solid label="WCHAR_T"]
  1741 -> 42 [style=solid label="BOOL"]
  1741 -> 43 [style=solid label="SHORT"]
  1741 -> 44 [style=solid label="INT"]
  1741 -> 45 [style=solid label="LONG"]
  1741 -> 46 [style=solid label="SIGNED"]
  1741 -> 47 [style=solid label="UNSIGNED"]
  1741 -> 48 [style=solid label="FLOAT"]
  1741 -> 49 [style=solid label="DOUBLE"]
  1741 -> 50 [style=solid label="VOID"]
  1741 -> 523 [style=solid label="THROW"]
  1741 -> 55 [style=solid label="TYPENAME"]
  1741 -> 387 [style=solid label="SIZEOF"]
  1741 -> 388 [style=solid label="ALIGNOF"]
  1741 -> 524 [style=solid label="CO_YIELD"]
  1741 -> 389 [style=solid label="'0'"]
  1741 -> 390 [style=solid label="'1'"]
  1741 -> 391 [style=solid label="'2'"]
  1741 -> 392 [style=solid label="'3'"]
  1741 -> 393 [style=solid label="'4'"]
  1741 -> 394 [style=solid label="'5'"]
  1741 -> 395 [style=solid label="'6'"]
  1741 -> 396 [style=solid label="'7'"]
  1741 -> 397 [style=solid label="'8'"]
  1741 -> 398 [style=solid label="'9'"]
  1741 -> 205 [style=solid label="'u'"]
  1741 -> 206 [style=solid label="'U'"]
  1741 -> 207 [style=solid label="'L'"]
  1741 -> 208 [style=solid label="'R'"]
  1741 -> 399 [style=dashed label="additive-expression"]
  1741 -> 400 [style=dashed label="and-expression"]
  1741 -> 525 [style=dashed label="assignment-expression"]
  1741 -> 401 [style=dashed label="await-expression"]
  1741 -> 402 [style=dashed label="binary-literal"]
  1741 -> 403 [style=dashed label="boolean-literal"]
  1741 -> 1160 [style=dashed label="braced-init-list"]
  1741 -> 404 [style=dashed label="cast-expression"]
  1741 -> 405 [style=dashed label="character-literal"]
  1741 -> 65 [style=dashed label="class-name"]
  1741 -> 406 [style=dashed label="compare-expression"]
  1741 -> 67 [style=dashed label="concept-name"]
  1741 -> 526 [style=dashed label="conditional-expression"]
  1741 -> 68 [style=dashed label="conversion-function-id"]
  1741 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1741 -> 410 [style=dashed label="decimal-literal"]
  1741 -> 76 [style=dashed label="decltype-specifier"]
  1741 -> 411 [style=dashed label="delete-expression"]
  1741 -> 412 [style=dashed label="digit"]
  1741 -> 413 [style=dashed label="digit-sequence"]
  1741 -> 414 [style=dashed label="encoding-prefix"]
  1741 -> 84 [style=dashed label="enum-name"]
  1741 -> 415 [style=dashed label="equality-expression"]
  1741 -> 416 [style=dashed label="exclusive-or-expression"]
  1741 -> 1849 [style=dashed label="expr-or-braced-init-list"]
  1741 -> 1162 [style=dashed label="expression"]
  1741 -> 417 [style=dashed label="floating-point-literal"]
  1741 -> 418 [style=dashed label="fold-expression"]
  1741 -> 1850 [style=dashed label="for-range-initializer"]
  1741 -> 419 [style=dashed label="fractional-constant"]
  1741 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1741 -> 421 [style=dashed label="hexadecimal-literal"]
  1741 -> 422 [style=dashed label="hexadecimal-prefix"]
  1741 -> 423 [style=dashed label="id-expression"]
  1741 -> 424 [style=dashed label="inclusive-or-expression"]
  1741 -> 425 [style=dashed label="integer-literal"]
  1741 -> 426 [style=dashed label="lambda-expression"]
  1741 -> 427 [style=dashed label="lambda-introducer"]
  1741 -> 428 [style=dashed label="literal"]
  1741 -> 95 [style=dashed label="literal-operator-id"]
  1741 -> 429 [style=dashed label="logical-and-expression"]
  1741 -> 528 [style=dashed label="logical-or-expression"]
  1741 -> 431 [style=dashed label="multiplicative-expression"]
  1741 -> 99 [style=dashed label="namespace-alias"]
  1741 -> 102 [style=dashed label="namespace-name"]
  1741 -> 432 [style=dashed label="nested-name-specifier"]
  1741 -> 433 [style=dashed label="new-expression"]
  1741 -> 434 [style=dashed label="noexcept-expression"]
  1741 -> 435 [style=dashed label="nonzero-digit"]
  1741 -> 436 [style=dashed label="octal-literal"]
  1741 -> 108 [style=dashed label="operator-function-id"]
  1741 -> 109 [style=dashed label="placeholder-type-specifier"]
  1741 -> 437 [style=dashed label="pm-expression"]
  1741 -> 438 [style=dashed label="pointer-literal"]
  1741 -> 439 [style=dashed label="postfix-expression"]
  1741 -> 440 [style=dashed label="primary-expression"]
  1741 -> 112 [style=dashed label="qualified-id"]
  1741 -> 441 [style=dashed label="relational-expression"]
  1741 -> 442 [style=dashed label="requires-expression"]
  1741 -> 443 [style=dashed label="shift-expression"]
  1741 -> 114 [style=dashed label="simple-template-id"]
  1741 -> 529 [style=dashed label="simple-type-specifier"]
  1741 -> 445 [style=dashed label="string-literal"]
  1741 -> 120 [style=dashed label="template-id"]
  1741 -> 215 [style=dashed label="template-name"]
  1741 -> 530 [style=dashed label="throw-expression"]
  1741 -> 123 [style=dashed label="type-constraint"]
  1741 -> 124 [style=dashed label="type-name"]
  1741 -> 126 [style=dashed label="typedef-name"]
  1741 -> 531 [style=dashed label="typename-specifier"]
  1741 -> 449 [style=dashed label="unary-expression"]
  1741 -> 450 [style=dashed label="unary-operator"]
  1741 -> 129 [style=dashed label="unqualified-id"]
  1741 -> 451 [style=dashed label="user-defined-character-literal"]
  1741 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1741 -> 453 [style=dashed label="user-defined-integer-literal"]
  1741 -> 454 [style=dashed label="user-defined-literal"]
  1741 -> 455 [style=dashed label="user-defined-string-literal"]
  1741 -> 532 [style=dashed label="yield-expression"]
  1742 [label="State 1742\n\l507 iteration-statement: FOR OPEN_PAREN init-statement SEMICOLON • CLOSE_PAREN statement\l509                    | FOR OPEN_PAREN init-statement SEMICOLON • expression CLOSE_PAREN statement\l"]
  1742 -> 356 [style=solid label="PLUS"]
  1742 -> 357 [style=solid label="MINUS"]
  1742 -> 2 [style=solid label="IDENTIFIER"]
  1742 -> 358 [style=solid label="OPEN_PAREN"]
  1742 -> 1851 [style=solid label="CLOSE_PAREN"]
  1742 -> 359 [style=solid label="AND"]
  1742 -> 360 [style=solid label="SCOPE"]
  1742 -> 361 [style=solid label="OPEN_SQUARE"]
  1742 -> 362 [style=solid label="CO_AWAIT"]
  1742 -> 363 [style=solid label="ZERO_LB"]
  1742 -> 364 [style=solid label="ZERO_HB"]
  1742 -> 365 [style=solid label="SINGLE_QUOTE"]
  1742 -> 366 [style=solid label="FALSE"]
  1742 -> 367 [style=solid label="TRUE"]
  1742 -> 368 [style=solid label="NOEXCEPT"]
  1742 -> 17 [style=solid label="OPERATOR"]
  1742 -> 26 [style=solid label="DECLTYPE"]
  1742 -> 369 [style=solid label="DELETE"]
  1742 -> 370 [style=solid label="DOT"]
  1742 -> 184 [style=solid label="UNICODE_8"]
  1742 -> 371 [style=solid label="MULT"]
  1742 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1742 -> 372 [style=solid label="ZERO_LX"]
  1742 -> 373 [style=solid label="ZERO_HX"]
  1742 -> 374 [style=solid label="REQUIRES"]
  1742 -> 375 [style=solid label="NEW"]
  1742 -> 376 [style=solid label="COMPL"]
  1742 -> 377 [style=solid label="NOT"]
  1742 -> 378 [style=solid label="PLUS_PLUS"]
  1742 -> 379 [style=solid label="MINUS_MINUS"]
  1742 -> 380 [style=solid label="THIS"]
  1742 -> 36 [style=solid label="AUTO"]
  1742 -> 381 [style=solid label="NULLPTR"]
  1742 -> 382 [style=solid label="DYNAMIC_CAST"]
  1742 -> 383 [style=solid label="STATIC_CAST"]
  1742 -> 384 [style=solid label="REINTERPRET_CAST"]
  1742 -> 385 [style=solid label="CONST_CAST"]
  1742 -> 386 [style=solid label="TYPEID"]
  1742 -> 37 [style=solid label="CHAR"]
  1742 -> 38 [style=solid label="CHAR8_T"]
  1742 -> 39 [style=solid label="CHAR16_T"]
  1742 -> 40 [style=solid label="CHAR32_T"]
  1742 -> 41 [style=solid label="WCHAR_T"]
  1742 -> 42 [style=solid label="BOOL"]
  1742 -> 43 [style=solid label="SHORT"]
  1742 -> 44 [style=solid label="INT"]
  1742 -> 45 [style=solid label="LONG"]
  1742 -> 46 [style=solid label="SIGNED"]
  1742 -> 47 [style=solid label="UNSIGNED"]
  1742 -> 48 [style=solid label="FLOAT"]
  1742 -> 49 [style=solid label="DOUBLE"]
  1742 -> 50 [style=solid label="VOID"]
  1742 -> 523 [style=solid label="THROW"]
  1742 -> 55 [style=solid label="TYPENAME"]
  1742 -> 387 [style=solid label="SIZEOF"]
  1742 -> 388 [style=solid label="ALIGNOF"]
  1742 -> 524 [style=solid label="CO_YIELD"]
  1742 -> 389 [style=solid label="'0'"]
  1742 -> 390 [style=solid label="'1'"]
  1742 -> 391 [style=solid label="'2'"]
  1742 -> 392 [style=solid label="'3'"]
  1742 -> 393 [style=solid label="'4'"]
  1742 -> 394 [style=solid label="'5'"]
  1742 -> 395 [style=solid label="'6'"]
  1742 -> 396 [style=solid label="'7'"]
  1742 -> 397 [style=solid label="'8'"]
  1742 -> 398 [style=solid label="'9'"]
  1742 -> 205 [style=solid label="'u'"]
  1742 -> 206 [style=solid label="'U'"]
  1742 -> 207 [style=solid label="'L'"]
  1742 -> 208 [style=solid label="'R'"]
  1742 -> 399 [style=dashed label="additive-expression"]
  1742 -> 400 [style=dashed label="and-expression"]
  1742 -> 525 [style=dashed label="assignment-expression"]
  1742 -> 401 [style=dashed label="await-expression"]
  1742 -> 402 [style=dashed label="binary-literal"]
  1742 -> 403 [style=dashed label="boolean-literal"]
  1742 -> 404 [style=dashed label="cast-expression"]
  1742 -> 405 [style=dashed label="character-literal"]
  1742 -> 65 [style=dashed label="class-name"]
  1742 -> 406 [style=dashed label="compare-expression"]
  1742 -> 67 [style=dashed label="concept-name"]
  1742 -> 526 [style=dashed label="conditional-expression"]
  1742 -> 68 [style=dashed label="conversion-function-id"]
  1742 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1742 -> 410 [style=dashed label="decimal-literal"]
  1742 -> 76 [style=dashed label="decltype-specifier"]
  1742 -> 411 [style=dashed label="delete-expression"]
  1742 -> 412 [style=dashed label="digit"]
  1742 -> 413 [style=dashed label="digit-sequence"]
  1742 -> 414 [style=dashed label="encoding-prefix"]
  1742 -> 84 [style=dashed label="enum-name"]
  1742 -> 415 [style=dashed label="equality-expression"]
  1742 -> 416 [style=dashed label="exclusive-or-expression"]
  1742 -> 1852 [style=dashed label="expression"]
  1742 -> 417 [style=dashed label="floating-point-literal"]
  1742 -> 418 [style=dashed label="fold-expression"]
  1742 -> 419 [style=dashed label="fractional-constant"]
  1742 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1742 -> 421 [style=dashed label="hexadecimal-literal"]
  1742 -> 422 [style=dashed label="hexadecimal-prefix"]
  1742 -> 423 [style=dashed label="id-expression"]
  1742 -> 424 [style=dashed label="inclusive-or-expression"]
  1742 -> 425 [style=dashed label="integer-literal"]
  1742 -> 426 [style=dashed label="lambda-expression"]
  1742 -> 427 [style=dashed label="lambda-introducer"]
  1742 -> 428 [style=dashed label="literal"]
  1742 -> 95 [style=dashed label="literal-operator-id"]
  1742 -> 429 [style=dashed label="logical-and-expression"]
  1742 -> 528 [style=dashed label="logical-or-expression"]
  1742 -> 431 [style=dashed label="multiplicative-expression"]
  1742 -> 99 [style=dashed label="namespace-alias"]
  1742 -> 102 [style=dashed label="namespace-name"]
  1742 -> 432 [style=dashed label="nested-name-specifier"]
  1742 -> 433 [style=dashed label="new-expression"]
  1742 -> 434 [style=dashed label="noexcept-expression"]
  1742 -> 435 [style=dashed label="nonzero-digit"]
  1742 -> 436 [style=dashed label="octal-literal"]
  1742 -> 108 [style=dashed label="operator-function-id"]
  1742 -> 109 [style=dashed label="placeholder-type-specifier"]
  1742 -> 437 [style=dashed label="pm-expression"]
  1742 -> 438 [style=dashed label="pointer-literal"]
  1742 -> 439 [style=dashed label="postfix-expression"]
  1742 -> 440 [style=dashed label="primary-expression"]
  1742 -> 112 [style=dashed label="qualified-id"]
  1742 -> 441 [style=dashed label="relational-expression"]
  1742 -> 442 [style=dashed label="requires-expression"]
  1742 -> 443 [style=dashed label="shift-expression"]
  1742 -> 114 [style=dashed label="simple-template-id"]
  1742 -> 529 [style=dashed label="simple-type-specifier"]
  1742 -> 445 [style=dashed label="string-literal"]
  1742 -> 120 [style=dashed label="template-id"]
  1742 -> 215 [style=dashed label="template-name"]
  1742 -> 530 [style=dashed label="throw-expression"]
  1742 -> 123 [style=dashed label="type-constraint"]
  1742 -> 124 [style=dashed label="type-name"]
  1742 -> 126 [style=dashed label="typedef-name"]
  1742 -> 531 [style=dashed label="typename-specifier"]
  1742 -> 449 [style=dashed label="unary-expression"]
  1742 -> 450 [style=dashed label="unary-operator"]
  1742 -> 129 [style=dashed label="unqualified-id"]
  1742 -> 451 [style=dashed label="user-defined-character-literal"]
  1742 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1742 -> 453 [style=dashed label="user-defined-integer-literal"]
  1742 -> 454 [style=dashed label="user-defined-literal"]
  1742 -> 455 [style=dashed label="user-defined-string-literal"]
  1742 -> 532 [style=dashed label="yield-expression"]
  1743 [label="State 1743\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l165 condition: attribute-specifier-seq • decl-specifier-seq declarator brace-or-equal-initializer\l380 for-range-declaration: attribute-specifier-seq • decl-specifier-seq declarator\l382                      | attribute-specifier-seq • decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE\l384                      | attribute-specifier-seq • decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE\l"]
  1743 -> 162 [style=solid label="IDENTIFIER"]
  1743 -> 4 [style=solid label="ALIGNAS"]
  1743 -> 9 [style=solid label="SCOPE"]
  1743 -> 10 [style=solid label="OPEN_SQUARE"]
  1743 -> 11 [style=solid label="VIRTUAL"]
  1743 -> 12 [style=solid label="CLASS"]
  1743 -> 13 [style=solid label="STRUCT"]
  1743 -> 14 [style=solid label="UNION"]
  1743 -> 18 [style=solid label="CONST"]
  1743 -> 19 [style=solid label="VOLATILE"]
  1743 -> 20 [style=solid label="FRIEND"]
  1743 -> 21 [style=solid label="TYPEDEF"]
  1743 -> 22 [style=solid label="CONSTEXPR"]
  1743 -> 23 [style=solid label="CONSTEVAL"]
  1743 -> 24 [style=solid label="CONSTINIT"]
  1743 -> 258 [style=solid label="INLINE"]
  1743 -> 26 [style=solid label="DECLTYPE"]
  1743 -> 27 [style=solid label="ENUM"]
  1743 -> 259 [style=solid label="EXTERN"]
  1743 -> 29 [style=solid label="EXPLICIT"]
  1743 -> 36 [style=solid label="AUTO"]
  1743 -> 37 [style=solid label="CHAR"]
  1743 -> 38 [style=solid label="CHAR8_T"]
  1743 -> 39 [style=solid label="CHAR16_T"]
  1743 -> 40 [style=solid label="CHAR32_T"]
  1743 -> 41 [style=solid label="WCHAR_T"]
  1743 -> 42 [style=solid label="BOOL"]
  1743 -> 43 [style=solid label="SHORT"]
  1743 -> 44 [style=solid label="INT"]
  1743 -> 45 [style=solid label="LONG"]
  1743 -> 46 [style=solid label="SIGNED"]
  1743 -> 47 [style=solid label="UNSIGNED"]
  1743 -> 48 [style=solid label="FLOAT"]
  1743 -> 49 [style=solid label="DOUBLE"]
  1743 -> 50 [style=solid label="VOID"]
  1743 -> 52 [style=solid label="STATIC"]
  1743 -> 53 [style=solid label="THREAD_LOCAL"]
  1743 -> 54 [style=solid label="MUTABLE"]
  1743 -> 55 [style=solid label="TYPENAME"]
  1743 -> 57 [style=dashed label="alignment-specifier"]
  1743 -> 260 [style=dashed label="attribute-specifier"]
  1743 -> 63 [style=dashed label="class-head"]
  1743 -> 64 [style=dashed label="class-key"]
  1743 -> 65 [style=dashed label="class-name"]
  1743 -> 66 [style=dashed label="class-specifier"]
  1743 -> 67 [style=dashed label="concept-name"]
  1743 -> 69 [style=dashed label="cv-qualifier"]
  1743 -> 70 [style=dashed label="decl-specifier"]
  1743 -> 1853 [style=dashed label="decl-specifier-seq"]
  1743 -> 76 [style=dashed label="decltype-specifier"]
  1743 -> 78 [style=dashed label="defining-type-specifier"]
  1743 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1743 -> 80 [style=dashed label="elaborated-type-specifier"]
  1743 -> 82 [style=dashed label="enum-head"]
  1743 -> 263 [style=dashed label="enum-key"]
  1743 -> 84 [style=dashed label="enum-name"]
  1743 -> 85 [style=dashed label="enum-specifier"]
  1743 -> 264 [style=dashed label="explicit-specifier"]
  1743 -> 91 [style=dashed label="function-specifier"]
  1743 -> 99 [style=dashed label="namespace-alias"]
  1743 -> 102 [style=dashed label="namespace-name"]
  1743 -> 212 [style=dashed label="nested-name-specifier"]
  1743 -> 109 [style=dashed label="placeholder-type-specifier"]
  1743 -> 141 [style=dashed label="simple-template-id"]
  1743 -> 115 [style=dashed label="simple-type-specifier"]
  1743 -> 117 [style=dashed label="storage-class-specifier"]
  1743 -> 215 [style=dashed label="template-name"]
  1743 -> 123 [style=dashed label="type-constraint"]
  1743 -> 124 [style=dashed label="type-name"]
  1743 -> 125 [style=dashed label="type-specifier"]
  1743 -> 126 [style=dashed label="typedef-name"]
  1743 -> 127 [style=dashed label="typename-specifier"]
  1744 [label="State 1744\n\l508 iteration-statement: FOR OPEN_PAREN init-statement condition • SEMICOLON CLOSE_PAREN statement\l510                    | FOR OPEN_PAREN init-statement condition • SEMICOLON expression CLOSE_PAREN statement\l"]
  1744 -> 1854 [style=solid label="SEMICOLON"]
  1745 [label="State 1745\n\l166 condition: decl-specifier-seq • declarator brace-or-equal-initializer\l381 for-range-declaration: decl-specifier-seq • declarator\l383                      | decl-specifier-seq • OPEN_SQUARE identifier-list CLOSE_SQUARE\l385                      | decl-specifier-seq • ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE\l"]
  1745 -> 147 [style=solid label="IDENTIFIER"]
  1745 -> 5 [style=solid label="OPEN_PAREN"]
  1745 -> 6 [style=solid label="ELLIPSIS"]
  1745 -> 278 [style=solid label="AND"]
  1745 -> 9 [style=solid label="SCOPE"]
  1745 -> 1855 [style=solid label="OPEN_SQUARE"]
  1745 -> 280 [style=solid label="AND_AND"]
  1745 -> 17 [style=solid label="OPERATOR"]
  1745 -> 134 [style=solid label="DECLTYPE"]
  1745 -> 31 [style=solid label="MULT"]
  1745 -> 35 [style=solid label="COMPL"]
  1745 -> 65 [style=dashed label="class-name"]
  1745 -> 68 [style=dashed label="conversion-function-id"]
  1745 -> 1856 [style=dashed label="declarator"]
  1745 -> 75 [style=dashed label="declarator-id"]
  1745 -> 138 [style=dashed label="decltype-specifier"]
  1745 -> 84 [style=dashed label="enum-name"]
  1745 -> 93 [style=dashed label="id-expression"]
  1745 -> 95 [style=dashed label="literal-operator-id"]
  1745 -> 99 [style=dashed label="namespace-alias"]
  1745 -> 102 [style=dashed label="namespace-name"]
  1745 -> 148 [style=dashed label="nested-name-specifier"]
  1745 -> 106 [style=dashed label="noptr-declarator"]
  1745 -> 108 [style=dashed label="operator-function-id"]
  1745 -> 110 [style=dashed label="ptr-declarator"]
  1745 -> 111 [style=dashed label="ptr-operator"]
  1745 -> 112 [style=dashed label="qualified-id"]
  1745 -> 1857 [style=dashed label="ref-qualifier"]
  1745 -> 114 [style=dashed label="simple-template-id"]
  1745 -> 120 [style=dashed label="template-id"]
  1745 -> 142 [style=dashed label="template-name"]
  1745 -> 143 [style=dashed label="type-name"]
  1745 -> 126 [style=dashed label="typedef-name"]
  1745 -> 129 [style=dashed label="unqualified-id"]
  1746 [label="State 1746\n\l512 iteration-statement: FOR OPEN_PAREN init-statement for-range-declaration • COLON for-range-initializer CLOSE_PAREN statement\l"]
  1746 -> 1858 [style=solid label="COLON"]
  1747 [label="State 1747\n\l522 labeled-statement: CASE constant-expression COLON statement •\l"]
  1747 -> "1747R522" [style=solid]
 "1747R522" [label="R522", fillcolor=3, shape=diamond, style=filled]
  1748 [label="State 1748\n\l165 condition: attribute-specifier-seq decl-specifier-seq • declarator brace-or-equal-initializer\l965 simple-declaration: attribute-specifier-seq decl-specifier-seq • init-declarator-list SEMICOLON\l966                   | attribute-specifier-seq decl-specifier-seq • OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l968                   | attribute-specifier-seq decl-specifier-seq • ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1748 -> 147 [style=solid label="IDENTIFIER"]
  1748 -> 5 [style=solid label="OPEN_PAREN"]
  1748 -> 6 [style=solid label="ELLIPSIS"]
  1748 -> 278 [style=solid label="AND"]
  1748 -> 9 [style=solid label="SCOPE"]
  1748 -> 577 [style=solid label="OPEN_SQUARE"]
  1748 -> 280 [style=solid label="AND_AND"]
  1748 -> 17 [style=solid label="OPERATOR"]
  1748 -> 134 [style=solid label="DECLTYPE"]
  1748 -> 31 [style=solid label="MULT"]
  1748 -> 35 [style=solid label="COMPL"]
  1748 -> 65 [style=dashed label="class-name"]
  1748 -> 68 [style=dashed label="conversion-function-id"]
  1748 -> 1859 [style=dashed label="declarator"]
  1748 -> 75 [style=dashed label="declarator-id"]
  1748 -> 138 [style=dashed label="decltype-specifier"]
  1748 -> 84 [style=dashed label="enum-name"]
  1748 -> 93 [style=dashed label="id-expression"]
  1748 -> 282 [style=dashed label="init-declarator"]
  1748 -> 579 [style=dashed label="init-declarator-list"]
  1748 -> 95 [style=dashed label="literal-operator-id"]
  1748 -> 99 [style=dashed label="namespace-alias"]
  1748 -> 102 [style=dashed label="namespace-name"]
  1748 -> 148 [style=dashed label="nested-name-specifier"]
  1748 -> 106 [style=dashed label="noptr-declarator"]
  1748 -> 108 [style=dashed label="operator-function-id"]
  1748 -> 110 [style=dashed label="ptr-declarator"]
  1748 -> 111 [style=dashed label="ptr-operator"]
  1748 -> 112 [style=dashed label="qualified-id"]
  1748 -> 580 [style=dashed label="ref-qualifier"]
  1748 -> 114 [style=dashed label="simple-template-id"]
  1748 -> 120 [style=dashed label="template-id"]
  1748 -> 142 [style=dashed label="template-name"]
  1748 -> 143 [style=dashed label="type-name"]
  1748 -> 126 [style=dashed label="typedef-name"]
  1748 -> 129 [style=dashed label="unqualified-id"]
  1749 [label="State 1749\n\l938 selection-statement: IF OPEN_PAREN condition CLOSE_PAREN • statement\l942                    | IF OPEN_PAREN condition CLOSE_PAREN • statement ELSE statement\l"]
  1749 -> 356 [style=solid label="PLUS"]
  1749 -> 357 [style=solid label="MINUS"]
  1749 -> 1 [style=solid label="USING"]
  1749 -> 661 [style=solid label="IDENTIFIER"]
  1749 -> 662 [style=solid label="SEMICOLON"]
  1749 -> 4 [style=solid label="ALIGNAS"]
  1749 -> 358 [style=solid label="OPEN_PAREN"]
  1749 -> 359 [style=solid label="AND"]
  1749 -> 8 [style=solid label="ASM"]
  1749 -> 360 [style=solid label="SCOPE"]
  1749 -> 663 [style=solid label="OPEN_SQUARE"]
  1749 -> 362 [style=solid label="CO_AWAIT"]
  1749 -> 289 [style=solid label="OPEN_BRACE"]
  1749 -> 11 [style=solid label="VIRTUAL"]
  1749 -> 363 [style=solid label="ZERO_LB"]
  1749 -> 364 [style=solid label="ZERO_HB"]
  1749 -> 365 [style=solid label="SINGLE_QUOTE"]
  1749 -> 366 [style=solid label="FALSE"]
  1749 -> 367 [style=solid label="TRUE"]
  1749 -> 12 [style=solid label="CLASS"]
  1749 -> 13 [style=solid label="STRUCT"]
  1749 -> 14 [style=solid label="UNION"]
  1749 -> 368 [style=solid label="NOEXCEPT"]
  1749 -> 17 [style=solid label="OPERATOR"]
  1749 -> 665 [style=solid label="CO_RETURN"]
  1749 -> 18 [style=solid label="CONST"]
  1749 -> 19 [style=solid label="VOLATILE"]
  1749 -> 20 [style=solid label="FRIEND"]
  1749 -> 21 [style=solid label="TYPEDEF"]
  1749 -> 22 [style=solid label="CONSTEXPR"]
  1749 -> 23 [style=solid label="CONSTEVAL"]
  1749 -> 24 [style=solid label="CONSTINIT"]
  1749 -> 258 [style=solid label="INLINE"]
  1749 -> 26 [style=solid label="DECLTYPE"]
  1749 -> 369 [style=solid label="DELETE"]
  1749 -> 370 [style=solid label="DOT"]
  1749 -> 27 [style=solid label="ENUM"]
  1749 -> 184 [style=solid label="UNICODE_8"]
  1749 -> 259 [style=solid label="EXTERN"]
  1749 -> 29 [style=solid label="EXPLICIT"]
  1749 -> 371 [style=solid label="MULT"]
  1749 -> 666 [style=solid label="DEFAULT"]
  1749 -> 667 [style=solid label="TRY"]
  1749 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1749 -> 372 [style=solid label="ZERO_LX"]
  1749 -> 373 [style=solid label="ZERO_HX"]
  1749 -> 668 [style=solid label="WHILE"]
  1749 -> 669 [style=solid label="DO"]
  1749 -> 670 [style=solid label="FOR"]
  1749 -> 671 [style=solid label="BREAK"]
  1749 -> 672 [style=solid label="CONTINUE"]
  1749 -> 673 [style=solid label="RETURN"]
  1749 -> 674 [style=solid label="GOTO"]
  1749 -> 675 [style=solid label="CASE"]
  1749 -> 676 [style=solid label="NAMESPACE"]
  1749 -> 374 [style=solid label="REQUIRES"]
  1749 -> 375 [style=solid label="NEW"]
  1749 -> 376 [style=solid label="COMPL"]
  1749 -> 377 [style=solid label="NOT"]
  1749 -> 378 [style=solid label="PLUS_PLUS"]
  1749 -> 379 [style=solid label="MINUS_MINUS"]
  1749 -> 380 [style=solid label="THIS"]
  1749 -> 36 [style=solid label="AUTO"]
  1749 -> 381 [style=solid label="NULLPTR"]
  1749 -> 382 [style=solid label="DYNAMIC_CAST"]
  1749 -> 383 [style=solid label="STATIC_CAST"]
  1749 -> 384 [style=solid label="REINTERPRET_CAST"]
  1749 -> 385 [style=solid label="CONST_CAST"]
  1749 -> 386 [style=solid label="TYPEID"]
  1749 -> 677 [style=solid label="IF"]
  1749 -> 678 [style=solid label="SWITCH"]
  1749 -> 37 [style=solid label="CHAR"]
  1749 -> 38 [style=solid label="CHAR8_T"]
  1749 -> 39 [style=solid label="CHAR16_T"]
  1749 -> 40 [style=solid label="CHAR32_T"]
  1749 -> 41 [style=solid label="WCHAR_T"]
  1749 -> 42 [style=solid label="BOOL"]
  1749 -> 43 [style=solid label="SHORT"]
  1749 -> 44 [style=solid label="INT"]
  1749 -> 45 [style=solid label="LONG"]
  1749 -> 46 [style=solid label="SIGNED"]
  1749 -> 47 [style=solid label="UNSIGNED"]
  1749 -> 48 [style=solid label="FLOAT"]
  1749 -> 49 [style=solid label="DOUBLE"]
  1749 -> 50 [style=solid label="VOID"]
  1749 -> 51 [style=solid label="STATIC_ASSERT"]
  1749 -> 52 [style=solid label="STATIC"]
  1749 -> 53 [style=solid label="THREAD_LOCAL"]
  1749 -> 54 [style=solid label="MUTABLE"]
  1749 -> 523 [style=solid label="THROW"]
  1749 -> 55 [style=solid label="TYPENAME"]
  1749 -> 387 [style=solid label="SIZEOF"]
  1749 -> 388 [style=solid label="ALIGNOF"]
  1749 -> 524 [style=solid label="CO_YIELD"]
  1749 -> 389 [style=solid label="'0'"]
  1749 -> 390 [style=solid label="'1'"]
  1749 -> 391 [style=solid label="'2'"]
  1749 -> 392 [style=solid label="'3'"]
  1749 -> 393 [style=solid label="'4'"]
  1749 -> 394 [style=solid label="'5'"]
  1749 -> 395 [style=solid label="'6'"]
  1749 -> 396 [style=solid label="'7'"]
  1749 -> 397 [style=solid label="'8'"]
  1749 -> 398 [style=solid label="'9'"]
  1749 -> 205 [style=solid label="'u'"]
  1749 -> 206 [style=solid label="'U'"]
  1749 -> 207 [style=solid label="'L'"]
  1749 -> 208 [style=solid label="'R'"]
  1749 -> 399 [style=dashed label="additive-expression"]
  1749 -> 56 [style=dashed label="alias-declaration"]
  1749 -> 57 [style=dashed label="alignment-specifier"]
  1749 -> 400 [style=dashed label="and-expression"]
  1749 -> 58 [style=dashed label="asm-declaration"]
  1749 -> 525 [style=dashed label="assignment-expression"]
  1749 -> 60 [style=dashed label="attribute-specifier"]
  1749 -> 679 [style=dashed label="attribute-specifier-seq"]
  1749 -> 401 [style=dashed label="await-expression"]
  1749 -> 402 [style=dashed label="binary-literal"]
  1749 -> 680 [style=dashed label="block-declaration"]
  1749 -> 403 [style=dashed label="boolean-literal"]
  1749 -> 404 [style=dashed label="cast-expression"]
  1749 -> 405 [style=dashed label="character-literal"]
  1749 -> 63 [style=dashed label="class-head"]
  1749 -> 64 [style=dashed label="class-key"]
  1749 -> 65 [style=dashed label="class-name"]
  1749 -> 66 [style=dashed label="class-specifier"]
  1749 -> 406 [style=dashed label="compare-expression"]
  1749 -> 681 [style=dashed label="compound-statement"]
  1749 -> 67 [style=dashed label="concept-name"]
  1749 -> 526 [style=dashed label="conditional-expression"]
  1749 -> 68 [style=dashed label="conversion-function-id"]
  1749 -> 682 [style=dashed label="coroutine-return-statement"]
  1749 -> 69 [style=dashed label="cv-qualifier"]
  1749 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1749 -> 410 [style=dashed label="decimal-literal"]
  1749 -> 70 [style=dashed label="decl-specifier"]
  1749 -> 683 [style=dashed label="decl-specifier-seq"]
  1749 -> 684 [style=dashed label="declaration-statement"]
  1749 -> 76 [style=dashed label="decltype-specifier"]
  1749 -> 78 [style=dashed label="defining-type-specifier"]
  1749 -> 411 [style=dashed label="delete-expression"]
  1749 -> 412 [style=dashed label="digit"]
  1749 -> 413 [style=dashed label="digit-sequence"]
  1749 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1749 -> 80 [style=dashed label="elaborated-type-specifier"]
  1749 -> 414 [style=dashed label="encoding-prefix"]
  1749 -> 82 [style=dashed label="enum-head"]
  1749 -> 83 [style=dashed label="enum-key"]
  1749 -> 84 [style=dashed label="enum-name"]
  1749 -> 85 [style=dashed label="enum-specifier"]
  1749 -> 415 [style=dashed label="equality-expression"]
  1749 -> 416 [style=dashed label="exclusive-or-expression"]
  1749 -> 264 [style=dashed label="explicit-specifier"]
  1749 -> 685 [style=dashed label="expression"]
  1749 -> 686 [style=dashed label="expression-statement"]
  1749 -> 417 [style=dashed label="floating-point-literal"]
  1749 -> 418 [style=dashed label="fold-expression"]
  1749 -> 419 [style=dashed label="fractional-constant"]
  1749 -> 91 [style=dashed label="function-specifier"]
  1749 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1749 -> 421 [style=dashed label="hexadecimal-literal"]
  1749 -> 422 [style=dashed label="hexadecimal-prefix"]
  1749 -> 423 [style=dashed label="id-expression"]
  1749 -> 424 [style=dashed label="inclusive-or-expression"]
  1749 -> 425 [style=dashed label="integer-literal"]
  1749 -> 687 [style=dashed label="iteration-statement"]
  1749 -> 688 [style=dashed label="jump-statement"]
  1749 -> 689 [style=dashed label="labeled-statement"]
  1749 -> 426 [style=dashed label="lambda-expression"]
  1749 -> 427 [style=dashed label="lambda-introducer"]
  1749 -> 428 [style=dashed label="literal"]
  1749 -> 95 [style=dashed label="literal-operator-id"]
  1749 -> 429 [style=dashed label="logical-and-expression"]
  1749 -> 528 [style=dashed label="logical-or-expression"]
  1749 -> 431 [style=dashed label="multiplicative-expression"]
  1749 -> 99 [style=dashed label="namespace-alias"]
  1749 -> 100 [style=dashed label="namespace-alias-definition"]
  1749 -> 102 [style=dashed label="namespace-name"]
  1749 -> 432 [style=dashed label="nested-name-specifier"]
  1749 -> 433 [style=dashed label="new-expression"]
  1749 -> 434 [style=dashed label="noexcept-expression"]
  1749 -> 435 [style=dashed label="nonzero-digit"]
  1749 -> 436 [style=dashed label="octal-literal"]
  1749 -> 107 [style=dashed label="opaque-enum-declaration"]
  1749 -> 108 [style=dashed label="operator-function-id"]
  1749 -> 109 [style=dashed label="placeholder-type-specifier"]
  1749 -> 437 [style=dashed label="pm-expression"]
  1749 -> 438 [style=dashed label="pointer-literal"]
  1749 -> 439 [style=dashed label="postfix-expression"]
  1749 -> 440 [style=dashed label="primary-expression"]
  1749 -> 112 [style=dashed label="qualified-id"]
  1749 -> 441 [style=dashed label="relational-expression"]
  1749 -> 442 [style=dashed label="requires-expression"]
  1749 -> 690 [style=dashed label="selection-statement"]
  1749 -> 443 [style=dashed label="shift-expression"]
  1749 -> 113 [style=dashed label="simple-declaration"]
  1749 -> 114 [style=dashed label="simple-template-id"]
  1749 -> 444 [style=dashed label="simple-type-specifier"]
  1749 -> 1860 [style=dashed label="statement"]
  1749 -> 116 [style=dashed label="static_assert-declaration"]
  1749 -> 117 [style=dashed label="storage-class-specifier"]
  1749 -> 445 [style=dashed label="string-literal"]
  1749 -> 120 [style=dashed label="template-id"]
  1749 -> 215 [style=dashed label="template-name"]
  1749 -> 530 [style=dashed label="throw-expression"]
  1749 -> 693 [style=dashed label="try-block"]
  1749 -> 123 [style=dashed label="type-constraint"]
  1749 -> 124 [style=dashed label="type-name"]
  1749 -> 125 [style=dashed label="type-specifier"]
  1749 -> 126 [style=dashed label="typedef-name"]
  1749 -> 448 [style=dashed label="typename-specifier"]
  1749 -> 449 [style=dashed label="unary-expression"]
  1749 -> 450 [style=dashed label="unary-operator"]
  1749 -> 129 [style=dashed label="unqualified-id"]
  1749 -> 451 [style=dashed label="user-defined-character-literal"]
  1749 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1749 -> 453 [style=dashed label="user-defined-integer-literal"]
  1749 -> 454 [style=dashed label="user-defined-literal"]
  1749 -> 455 [style=dashed label="user-defined-string-literal"]
  1749 -> 130 [style=dashed label="using-declaration"]
  1749 -> 131 [style=dashed label="using-directive"]
  1749 -> 132 [style=dashed label="using-enum-declaration"]
  1749 -> 532 [style=dashed label="yield-expression"]
  1750 [label="State 1750\n\l166 condition: decl-specifier-seq declarator • brace-or-equal-initializer\l469 init-declarator: declarator •\l470                | declarator • initializer\l471                | declarator • requires-clause\l"]
  1750 -> 1273 [style=solid label="EQ"]
  1750 -> 643 [style=solid label="OPEN_PAREN"]
  1750 -> 935 [style=solid label="OPEN_BRACE"]
  1750 -> 292 [style=solid label="REQUIRES"]
  1750 -> 1861 [style=dashed label="brace-or-equal-initializer"]
  1750 -> 646 [style=dashed label="braced-init-list"]
  1750 -> 648 [style=dashed label="initializer"]
  1750 -> 1522 [style=dashed label="requires-clause"]
  1750 -> "1750R469" [style=solid]
 "1750R469" [label="R469", fillcolor=3, shape=diamond, style=filled]
  1751 [label="State 1751\n\l940 selection-statement: IF OPEN_PAREN init-statement condition • CLOSE_PAREN statement\l944                    | IF OPEN_PAREN init-statement condition • CLOSE_PAREN statement ELSE statement\l"]
  1751 -> 1862 [style=solid label="CLOSE_PAREN"]
  1752 [label="State 1752\n\l939 selection-statement: IF CONSTEXPR OPEN_PAREN condition • CLOSE_PAREN statement\l943                    | IF CONSTEXPR OPEN_PAREN condition • CLOSE_PAREN statement ELSE statement\l"]
  1752 -> 1863 [style=solid label="CLOSE_PAREN"]
  1753 [label="State 1753\n\l941 selection-statement: IF CONSTEXPR OPEN_PAREN init-statement • condition CLOSE_PAREN statement\l945                    | IF CONSTEXPR OPEN_PAREN init-statement • condition CLOSE_PAREN statement ELSE statement\l"]
  1753 -> 356 [style=solid label="PLUS"]
  1753 -> 357 [style=solid label="MINUS"]
  1753 -> 2 [style=solid label="IDENTIFIER"]
  1753 -> 4 [style=solid label="ALIGNAS"]
  1753 -> 358 [style=solid label="OPEN_PAREN"]
  1753 -> 359 [style=solid label="AND"]
  1753 -> 360 [style=solid label="SCOPE"]
  1753 -> 663 [style=solid label="OPEN_SQUARE"]
  1753 -> 362 [style=solid label="CO_AWAIT"]
  1753 -> 11 [style=solid label="VIRTUAL"]
  1753 -> 363 [style=solid label="ZERO_LB"]
  1753 -> 364 [style=solid label="ZERO_HB"]
  1753 -> 365 [style=solid label="SINGLE_QUOTE"]
  1753 -> 366 [style=solid label="FALSE"]
  1753 -> 367 [style=solid label="TRUE"]
  1753 -> 12 [style=solid label="CLASS"]
  1753 -> 13 [style=solid label="STRUCT"]
  1753 -> 14 [style=solid label="UNION"]
  1753 -> 368 [style=solid label="NOEXCEPT"]
  1753 -> 17 [style=solid label="OPERATOR"]
  1753 -> 18 [style=solid label="CONST"]
  1753 -> 19 [style=solid label="VOLATILE"]
  1753 -> 20 [style=solid label="FRIEND"]
  1753 -> 21 [style=solid label="TYPEDEF"]
  1753 -> 22 [style=solid label="CONSTEXPR"]
  1753 -> 23 [style=solid label="CONSTEVAL"]
  1753 -> 24 [style=solid label="CONSTINIT"]
  1753 -> 258 [style=solid label="INLINE"]
  1753 -> 26 [style=solid label="DECLTYPE"]
  1753 -> 369 [style=solid label="DELETE"]
  1753 -> 370 [style=solid label="DOT"]
  1753 -> 27 [style=solid label="ENUM"]
  1753 -> 184 [style=solid label="UNICODE_8"]
  1753 -> 259 [style=solid label="EXTERN"]
  1753 -> 29 [style=solid label="EXPLICIT"]
  1753 -> 371 [style=solid label="MULT"]
  1753 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1753 -> 372 [style=solid label="ZERO_LX"]
  1753 -> 373 [style=solid label="ZERO_HX"]
  1753 -> 374 [style=solid label="REQUIRES"]
  1753 -> 375 [style=solid label="NEW"]
  1753 -> 376 [style=solid label="COMPL"]
  1753 -> 377 [style=solid label="NOT"]
  1753 -> 378 [style=solid label="PLUS_PLUS"]
  1753 -> 379 [style=solid label="MINUS_MINUS"]
  1753 -> 380 [style=solid label="THIS"]
  1753 -> 36 [style=solid label="AUTO"]
  1753 -> 381 [style=solid label="NULLPTR"]
  1753 -> 382 [style=solid label="DYNAMIC_CAST"]
  1753 -> 383 [style=solid label="STATIC_CAST"]
  1753 -> 384 [style=solid label="REINTERPRET_CAST"]
  1753 -> 385 [style=solid label="CONST_CAST"]
  1753 -> 386 [style=solid label="TYPEID"]
  1753 -> 37 [style=solid label="CHAR"]
  1753 -> 38 [style=solid label="CHAR8_T"]
  1753 -> 39 [style=solid label="CHAR16_T"]
  1753 -> 40 [style=solid label="CHAR32_T"]
  1753 -> 41 [style=solid label="WCHAR_T"]
  1753 -> 42 [style=solid label="BOOL"]
  1753 -> 43 [style=solid label="SHORT"]
  1753 -> 44 [style=solid label="INT"]
  1753 -> 45 [style=solid label="LONG"]
  1753 -> 46 [style=solid label="SIGNED"]
  1753 -> 47 [style=solid label="UNSIGNED"]
  1753 -> 48 [style=solid label="FLOAT"]
  1753 -> 49 [style=solid label="DOUBLE"]
  1753 -> 50 [style=solid label="VOID"]
  1753 -> 52 [style=solid label="STATIC"]
  1753 -> 53 [style=solid label="THREAD_LOCAL"]
  1753 -> 54 [style=solid label="MUTABLE"]
  1753 -> 523 [style=solid label="THROW"]
  1753 -> 55 [style=solid label="TYPENAME"]
  1753 -> 387 [style=solid label="SIZEOF"]
  1753 -> 388 [style=solid label="ALIGNOF"]
  1753 -> 524 [style=solid label="CO_YIELD"]
  1753 -> 389 [style=solid label="'0'"]
  1753 -> 390 [style=solid label="'1'"]
  1753 -> 391 [style=solid label="'2'"]
  1753 -> 392 [style=solid label="'3'"]
  1753 -> 393 [style=solid label="'4'"]
  1753 -> 394 [style=solid label="'5'"]
  1753 -> 395 [style=solid label="'6'"]
  1753 -> 396 [style=solid label="'7'"]
  1753 -> 397 [style=solid label="'8'"]
  1753 -> 398 [style=solid label="'9'"]
  1753 -> 205 [style=solid label="'u'"]
  1753 -> 206 [style=solid label="'U'"]
  1753 -> 207 [style=solid label="'L'"]
  1753 -> 208 [style=solid label="'R'"]
  1753 -> 399 [style=dashed label="additive-expression"]
  1753 -> 57 [style=dashed label="alignment-specifier"]
  1753 -> 400 [style=dashed label="and-expression"]
  1753 -> 525 [style=dashed label="assignment-expression"]
  1753 -> 60 [style=dashed label="attribute-specifier"]
  1753 -> 1531 [style=dashed label="attribute-specifier-seq"]
  1753 -> 401 [style=dashed label="await-expression"]
  1753 -> 402 [style=dashed label="binary-literal"]
  1753 -> 403 [style=dashed label="boolean-literal"]
  1753 -> 404 [style=dashed label="cast-expression"]
  1753 -> 405 [style=dashed label="character-literal"]
  1753 -> 63 [style=dashed label="class-head"]
  1753 -> 64 [style=dashed label="class-key"]
  1753 -> 65 [style=dashed label="class-name"]
  1753 -> 66 [style=dashed label="class-specifier"]
  1753 -> 406 [style=dashed label="compare-expression"]
  1753 -> 67 [style=dashed label="concept-name"]
  1753 -> 1864 [style=dashed label="condition"]
  1753 -> 526 [style=dashed label="conditional-expression"]
  1753 -> 68 [style=dashed label="conversion-function-id"]
  1753 -> 69 [style=dashed label="cv-qualifier"]
  1753 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1753 -> 410 [style=dashed label="decimal-literal"]
  1753 -> 70 [style=dashed label="decl-specifier"]
  1753 -> 1533 [style=dashed label="decl-specifier-seq"]
  1753 -> 76 [style=dashed label="decltype-specifier"]
  1753 -> 78 [style=dashed label="defining-type-specifier"]
  1753 -> 411 [style=dashed label="delete-expression"]
  1753 -> 412 [style=dashed label="digit"]
  1753 -> 413 [style=dashed label="digit-sequence"]
  1753 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1753 -> 80 [style=dashed label="elaborated-type-specifier"]
  1753 -> 414 [style=dashed label="encoding-prefix"]
  1753 -> 82 [style=dashed label="enum-head"]
  1753 -> 263 [style=dashed label="enum-key"]
  1753 -> 84 [style=dashed label="enum-name"]
  1753 -> 85 [style=dashed label="enum-specifier"]
  1753 -> 415 [style=dashed label="equality-expression"]
  1753 -> 416 [style=dashed label="exclusive-or-expression"]
  1753 -> 264 [style=dashed label="explicit-specifier"]
  1753 -> 1534 [style=dashed label="expression"]
  1753 -> 417 [style=dashed label="floating-point-literal"]
  1753 -> 418 [style=dashed label="fold-expression"]
  1753 -> 419 [style=dashed label="fractional-constant"]
  1753 -> 91 [style=dashed label="function-specifier"]
  1753 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1753 -> 421 [style=dashed label="hexadecimal-literal"]
  1753 -> 422 [style=dashed label="hexadecimal-prefix"]
  1753 -> 423 [style=dashed label="id-expression"]
  1753 -> 424 [style=dashed label="inclusive-or-expression"]
  1753 -> 425 [style=dashed label="integer-literal"]
  1753 -> 426 [style=dashed label="lambda-expression"]
  1753 -> 427 [style=dashed label="lambda-introducer"]
  1753 -> 428 [style=dashed label="literal"]
  1753 -> 95 [style=dashed label="literal-operator-id"]
  1753 -> 429 [style=dashed label="logical-and-expression"]
  1753 -> 528 [style=dashed label="logical-or-expression"]
  1753 -> 431 [style=dashed label="multiplicative-expression"]
  1753 -> 99 [style=dashed label="namespace-alias"]
  1753 -> 102 [style=dashed label="namespace-name"]
  1753 -> 432 [style=dashed label="nested-name-specifier"]
  1753 -> 433 [style=dashed label="new-expression"]
  1753 -> 434 [style=dashed label="noexcept-expression"]
  1753 -> 435 [style=dashed label="nonzero-digit"]
  1753 -> 436 [style=dashed label="octal-literal"]
  1753 -> 108 [style=dashed label="operator-function-id"]
  1753 -> 109 [style=dashed label="placeholder-type-specifier"]
  1753 -> 437 [style=dashed label="pm-expression"]
  1753 -> 438 [style=dashed label="pointer-literal"]
  1753 -> 439 [style=dashed label="postfix-expression"]
  1753 -> 440 [style=dashed label="primary-expression"]
  1753 -> 112 [style=dashed label="qualified-id"]
  1753 -> 441 [style=dashed label="relational-expression"]
  1753 -> 442 [style=dashed label="requires-expression"]
  1753 -> 443 [style=dashed label="shift-expression"]
  1753 -> 114 [style=dashed label="simple-template-id"]
  1753 -> 444 [style=dashed label="simple-type-specifier"]
  1753 -> 117 [style=dashed label="storage-class-specifier"]
  1753 -> 445 [style=dashed label="string-literal"]
  1753 -> 120 [style=dashed label="template-id"]
  1753 -> 215 [style=dashed label="template-name"]
  1753 -> 530 [style=dashed label="throw-expression"]
  1753 -> 123 [style=dashed label="type-constraint"]
  1753 -> 124 [style=dashed label="type-name"]
  1753 -> 125 [style=dashed label="type-specifier"]
  1753 -> 126 [style=dashed label="typedef-name"]
  1753 -> 448 [style=dashed label="typename-specifier"]
  1753 -> 449 [style=dashed label="unary-expression"]
  1753 -> 450 [style=dashed label="unary-operator"]
  1753 -> 129 [style=dashed label="unqualified-id"]
  1753 -> 451 [style=dashed label="user-defined-character-literal"]
  1753 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1753 -> 453 [style=dashed label="user-defined-integer-literal"]
  1753 -> 454 [style=dashed label="user-defined-literal"]
  1753 -> 455 [style=dashed label="user-defined-string-literal"]
  1753 -> 532 [style=dashed label="yield-expression"]
  1754 [label="State 1754\n\l948 selection-statement: IF CONSTEVAL compound-statement ELSE • statement\l"]
  1754 -> 356 [style=solid label="PLUS"]
  1754 -> 357 [style=solid label="MINUS"]
  1754 -> 1 [style=solid label="USING"]
  1754 -> 661 [style=solid label="IDENTIFIER"]
  1754 -> 662 [style=solid label="SEMICOLON"]
  1754 -> 4 [style=solid label="ALIGNAS"]
  1754 -> 358 [style=solid label="OPEN_PAREN"]
  1754 -> 359 [style=solid label="AND"]
  1754 -> 8 [style=solid label="ASM"]
  1754 -> 360 [style=solid label="SCOPE"]
  1754 -> 663 [style=solid label="OPEN_SQUARE"]
  1754 -> 362 [style=solid label="CO_AWAIT"]
  1754 -> 289 [style=solid label="OPEN_BRACE"]
  1754 -> 11 [style=solid label="VIRTUAL"]
  1754 -> 363 [style=solid label="ZERO_LB"]
  1754 -> 364 [style=solid label="ZERO_HB"]
  1754 -> 365 [style=solid label="SINGLE_QUOTE"]
  1754 -> 366 [style=solid label="FALSE"]
  1754 -> 367 [style=solid label="TRUE"]
  1754 -> 12 [style=solid label="CLASS"]
  1754 -> 13 [style=solid label="STRUCT"]
  1754 -> 14 [style=solid label="UNION"]
  1754 -> 368 [style=solid label="NOEXCEPT"]
  1754 -> 17 [style=solid label="OPERATOR"]
  1754 -> 665 [style=solid label="CO_RETURN"]
  1754 -> 18 [style=solid label="CONST"]
  1754 -> 19 [style=solid label="VOLATILE"]
  1754 -> 20 [style=solid label="FRIEND"]
  1754 -> 21 [style=solid label="TYPEDEF"]
  1754 -> 22 [style=solid label="CONSTEXPR"]
  1754 -> 23 [style=solid label="CONSTEVAL"]
  1754 -> 24 [style=solid label="CONSTINIT"]
  1754 -> 258 [style=solid label="INLINE"]
  1754 -> 26 [style=solid label="DECLTYPE"]
  1754 -> 369 [style=solid label="DELETE"]
  1754 -> 370 [style=solid label="DOT"]
  1754 -> 27 [style=solid label="ENUM"]
  1754 -> 184 [style=solid label="UNICODE_8"]
  1754 -> 259 [style=solid label="EXTERN"]
  1754 -> 29 [style=solid label="EXPLICIT"]
  1754 -> 371 [style=solid label="MULT"]
  1754 -> 666 [style=solid label="DEFAULT"]
  1754 -> 667 [style=solid label="TRY"]
  1754 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1754 -> 372 [style=solid label="ZERO_LX"]
  1754 -> 373 [style=solid label="ZERO_HX"]
  1754 -> 668 [style=solid label="WHILE"]
  1754 -> 669 [style=solid label="DO"]
  1754 -> 670 [style=solid label="FOR"]
  1754 -> 671 [style=solid label="BREAK"]
  1754 -> 672 [style=solid label="CONTINUE"]
  1754 -> 673 [style=solid label="RETURN"]
  1754 -> 674 [style=solid label="GOTO"]
  1754 -> 675 [style=solid label="CASE"]
  1754 -> 676 [style=solid label="NAMESPACE"]
  1754 -> 374 [style=solid label="REQUIRES"]
  1754 -> 375 [style=solid label="NEW"]
  1754 -> 376 [style=solid label="COMPL"]
  1754 -> 377 [style=solid label="NOT"]
  1754 -> 378 [style=solid label="PLUS_PLUS"]
  1754 -> 379 [style=solid label="MINUS_MINUS"]
  1754 -> 380 [style=solid label="THIS"]
  1754 -> 36 [style=solid label="AUTO"]
  1754 -> 381 [style=solid label="NULLPTR"]
  1754 -> 382 [style=solid label="DYNAMIC_CAST"]
  1754 -> 383 [style=solid label="STATIC_CAST"]
  1754 -> 384 [style=solid label="REINTERPRET_CAST"]
  1754 -> 385 [style=solid label="CONST_CAST"]
  1754 -> 386 [style=solid label="TYPEID"]
  1754 -> 677 [style=solid label="IF"]
  1754 -> 678 [style=solid label="SWITCH"]
  1754 -> 37 [style=solid label="CHAR"]
  1754 -> 38 [style=solid label="CHAR8_T"]
  1754 -> 39 [style=solid label="CHAR16_T"]
  1754 -> 40 [style=solid label="CHAR32_T"]
  1754 -> 41 [style=solid label="WCHAR_T"]
  1754 -> 42 [style=solid label="BOOL"]
  1754 -> 43 [style=solid label="SHORT"]
  1754 -> 44 [style=solid label="INT"]
  1754 -> 45 [style=solid label="LONG"]
  1754 -> 46 [style=solid label="SIGNED"]
  1754 -> 47 [style=solid label="UNSIGNED"]
  1754 -> 48 [style=solid label="FLOAT"]
  1754 -> 49 [style=solid label="DOUBLE"]
  1754 -> 50 [style=solid label="VOID"]
  1754 -> 51 [style=solid label="STATIC_ASSERT"]
  1754 -> 52 [style=solid label="STATIC"]
  1754 -> 53 [style=solid label="THREAD_LOCAL"]
  1754 -> 54 [style=solid label="MUTABLE"]
  1754 -> 523 [style=solid label="THROW"]
  1754 -> 55 [style=solid label="TYPENAME"]
  1754 -> 387 [style=solid label="SIZEOF"]
  1754 -> 388 [style=solid label="ALIGNOF"]
  1754 -> 524 [style=solid label="CO_YIELD"]
  1754 -> 389 [style=solid label="'0'"]
  1754 -> 390 [style=solid label="'1'"]
  1754 -> 391 [style=solid label="'2'"]
  1754 -> 392 [style=solid label="'3'"]
  1754 -> 393 [style=solid label="'4'"]
  1754 -> 394 [style=solid label="'5'"]
  1754 -> 395 [style=solid label="'6'"]
  1754 -> 396 [style=solid label="'7'"]
  1754 -> 397 [style=solid label="'8'"]
  1754 -> 398 [style=solid label="'9'"]
  1754 -> 205 [style=solid label="'u'"]
  1754 -> 206 [style=solid label="'U'"]
  1754 -> 207 [style=solid label="'L'"]
  1754 -> 208 [style=solid label="'R'"]
  1754 -> 399 [style=dashed label="additive-expression"]
  1754 -> 56 [style=dashed label="alias-declaration"]
  1754 -> 57 [style=dashed label="alignment-specifier"]
  1754 -> 400 [style=dashed label="and-expression"]
  1754 -> 58 [style=dashed label="asm-declaration"]
  1754 -> 525 [style=dashed label="assignment-expression"]
  1754 -> 60 [style=dashed label="attribute-specifier"]
  1754 -> 679 [style=dashed label="attribute-specifier-seq"]
  1754 -> 401 [style=dashed label="await-expression"]
  1754 -> 402 [style=dashed label="binary-literal"]
  1754 -> 680 [style=dashed label="block-declaration"]
  1754 -> 403 [style=dashed label="boolean-literal"]
  1754 -> 404 [style=dashed label="cast-expression"]
  1754 -> 405 [style=dashed label="character-literal"]
  1754 -> 63 [style=dashed label="class-head"]
  1754 -> 64 [style=dashed label="class-key"]
  1754 -> 65 [style=dashed label="class-name"]
  1754 -> 66 [style=dashed label="class-specifier"]
  1754 -> 406 [style=dashed label="compare-expression"]
  1754 -> 681 [style=dashed label="compound-statement"]
  1754 -> 67 [style=dashed label="concept-name"]
  1754 -> 526 [style=dashed label="conditional-expression"]
  1754 -> 68 [style=dashed label="conversion-function-id"]
  1754 -> 682 [style=dashed label="coroutine-return-statement"]
  1754 -> 69 [style=dashed label="cv-qualifier"]
  1754 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1754 -> 410 [style=dashed label="decimal-literal"]
  1754 -> 70 [style=dashed label="decl-specifier"]
  1754 -> 683 [style=dashed label="decl-specifier-seq"]
  1754 -> 684 [style=dashed label="declaration-statement"]
  1754 -> 76 [style=dashed label="decltype-specifier"]
  1754 -> 78 [style=dashed label="defining-type-specifier"]
  1754 -> 411 [style=dashed label="delete-expression"]
  1754 -> 412 [style=dashed label="digit"]
  1754 -> 413 [style=dashed label="digit-sequence"]
  1754 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1754 -> 80 [style=dashed label="elaborated-type-specifier"]
  1754 -> 414 [style=dashed label="encoding-prefix"]
  1754 -> 82 [style=dashed label="enum-head"]
  1754 -> 83 [style=dashed label="enum-key"]
  1754 -> 84 [style=dashed label="enum-name"]
  1754 -> 85 [style=dashed label="enum-specifier"]
  1754 -> 415 [style=dashed label="equality-expression"]
  1754 -> 416 [style=dashed label="exclusive-or-expression"]
  1754 -> 264 [style=dashed label="explicit-specifier"]
  1754 -> 685 [style=dashed label="expression"]
  1754 -> 686 [style=dashed label="expression-statement"]
  1754 -> 417 [style=dashed label="floating-point-literal"]
  1754 -> 418 [style=dashed label="fold-expression"]
  1754 -> 419 [style=dashed label="fractional-constant"]
  1754 -> 91 [style=dashed label="function-specifier"]
  1754 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1754 -> 421 [style=dashed label="hexadecimal-literal"]
  1754 -> 422 [style=dashed label="hexadecimal-prefix"]
  1754 -> 423 [style=dashed label="id-expression"]
  1754 -> 424 [style=dashed label="inclusive-or-expression"]
  1754 -> 425 [style=dashed label="integer-literal"]
  1754 -> 687 [style=dashed label="iteration-statement"]
  1754 -> 688 [style=dashed label="jump-statement"]
  1754 -> 689 [style=dashed label="labeled-statement"]
  1754 -> 426 [style=dashed label="lambda-expression"]
  1754 -> 427 [style=dashed label="lambda-introducer"]
  1754 -> 428 [style=dashed label="literal"]
  1754 -> 95 [style=dashed label="literal-operator-id"]
  1754 -> 429 [style=dashed label="logical-and-expression"]
  1754 -> 528 [style=dashed label="logical-or-expression"]
  1754 -> 431 [style=dashed label="multiplicative-expression"]
  1754 -> 99 [style=dashed label="namespace-alias"]
  1754 -> 100 [style=dashed label="namespace-alias-definition"]
  1754 -> 102 [style=dashed label="namespace-name"]
  1754 -> 432 [style=dashed label="nested-name-specifier"]
  1754 -> 433 [style=dashed label="new-expression"]
  1754 -> 434 [style=dashed label="noexcept-expression"]
  1754 -> 435 [style=dashed label="nonzero-digit"]
  1754 -> 436 [style=dashed label="octal-literal"]
  1754 -> 107 [style=dashed label="opaque-enum-declaration"]
  1754 -> 108 [style=dashed label="operator-function-id"]
  1754 -> 109 [style=dashed label="placeholder-type-specifier"]
  1754 -> 437 [style=dashed label="pm-expression"]
  1754 -> 438 [style=dashed label="pointer-literal"]
  1754 -> 439 [style=dashed label="postfix-expression"]
  1754 -> 440 [style=dashed label="primary-expression"]
  1754 -> 112 [style=dashed label="qualified-id"]
  1754 -> 441 [style=dashed label="relational-expression"]
  1754 -> 442 [style=dashed label="requires-expression"]
  1754 -> 690 [style=dashed label="selection-statement"]
  1754 -> 443 [style=dashed label="shift-expression"]
  1754 -> 113 [style=dashed label="simple-declaration"]
  1754 -> 114 [style=dashed label="simple-template-id"]
  1754 -> 444 [style=dashed label="simple-type-specifier"]
  1754 -> 1865 [style=dashed label="statement"]
  1754 -> 116 [style=dashed label="static_assert-declaration"]
  1754 -> 117 [style=dashed label="storage-class-specifier"]
  1754 -> 445 [style=dashed label="string-literal"]
  1754 -> 120 [style=dashed label="template-id"]
  1754 -> 215 [style=dashed label="template-name"]
  1754 -> 530 [style=dashed label="throw-expression"]
  1754 -> 693 [style=dashed label="try-block"]
  1754 -> 123 [style=dashed label="type-constraint"]
  1754 -> 124 [style=dashed label="type-name"]
  1754 -> 125 [style=dashed label="type-specifier"]
  1754 -> 126 [style=dashed label="typedef-name"]
  1754 -> 448 [style=dashed label="typename-specifier"]
  1754 -> 449 [style=dashed label="unary-expression"]
  1754 -> 450 [style=dashed label="unary-operator"]
  1754 -> 129 [style=dashed label="unqualified-id"]
  1754 -> 451 [style=dashed label="user-defined-character-literal"]
  1754 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1754 -> 453 [style=dashed label="user-defined-integer-literal"]
  1754 -> 454 [style=dashed label="user-defined-literal"]
  1754 -> 455 [style=dashed label="user-defined-string-literal"]
  1754 -> 130 [style=dashed label="using-declaration"]
  1754 -> 131 [style=dashed label="using-directive"]
  1754 -> 132 [style=dashed label="using-enum-declaration"]
  1754 -> 532 [style=dashed label="yield-expression"]
  1755 [label="State 1755\n\l947 selection-statement: IF NOT CONSTEVAL compound-statement •\l949                    | IF NOT CONSTEVAL compound-statement • ELSE statement\l"]
  1755 -> 1866 [style=solid label="ELSE"]
  1755 -> "1755R947d" [label="[ELSE]", style=solid]
 "1755R947d" [label="R947", fillcolor=5, shape=diamond, style=filled]
  1755 -> "1755R947" [style=solid]
 "1755R947" [label="R947", fillcolor=3, shape=diamond, style=filled]
  1756 [label="State 1756\n\l950 selection-statement: SWITCH OPEN_PAREN condition CLOSE_PAREN • statement\l"]
  1756 -> 356 [style=solid label="PLUS"]
  1756 -> 357 [style=solid label="MINUS"]
  1756 -> 1 [style=solid label="USING"]
  1756 -> 661 [style=solid label="IDENTIFIER"]
  1756 -> 662 [style=solid label="SEMICOLON"]
  1756 -> 4 [style=solid label="ALIGNAS"]
  1756 -> 358 [style=solid label="OPEN_PAREN"]
  1756 -> 359 [style=solid label="AND"]
  1756 -> 8 [style=solid label="ASM"]
  1756 -> 360 [style=solid label="SCOPE"]
  1756 -> 663 [style=solid label="OPEN_SQUARE"]
  1756 -> 362 [style=solid label="CO_AWAIT"]
  1756 -> 289 [style=solid label="OPEN_BRACE"]
  1756 -> 11 [style=solid label="VIRTUAL"]
  1756 -> 363 [style=solid label="ZERO_LB"]
  1756 -> 364 [style=solid label="ZERO_HB"]
  1756 -> 365 [style=solid label="SINGLE_QUOTE"]
  1756 -> 366 [style=solid label="FALSE"]
  1756 -> 367 [style=solid label="TRUE"]
  1756 -> 12 [style=solid label="CLASS"]
  1756 -> 13 [style=solid label="STRUCT"]
  1756 -> 14 [style=solid label="UNION"]
  1756 -> 368 [style=solid label="NOEXCEPT"]
  1756 -> 17 [style=solid label="OPERATOR"]
  1756 -> 665 [style=solid label="CO_RETURN"]
  1756 -> 18 [style=solid label="CONST"]
  1756 -> 19 [style=solid label="VOLATILE"]
  1756 -> 20 [style=solid label="FRIEND"]
  1756 -> 21 [style=solid label="TYPEDEF"]
  1756 -> 22 [style=solid label="CONSTEXPR"]
  1756 -> 23 [style=solid label="CONSTEVAL"]
  1756 -> 24 [style=solid label="CONSTINIT"]
  1756 -> 258 [style=solid label="INLINE"]
  1756 -> 26 [style=solid label="DECLTYPE"]
  1756 -> 369 [style=solid label="DELETE"]
  1756 -> 370 [style=solid label="DOT"]
  1756 -> 27 [style=solid label="ENUM"]
  1756 -> 184 [style=solid label="UNICODE_8"]
  1756 -> 259 [style=solid label="EXTERN"]
  1756 -> 29 [style=solid label="EXPLICIT"]
  1756 -> 371 [style=solid label="MULT"]
  1756 -> 666 [style=solid label="DEFAULT"]
  1756 -> 667 [style=solid label="TRY"]
  1756 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1756 -> 372 [style=solid label="ZERO_LX"]
  1756 -> 373 [style=solid label="ZERO_HX"]
  1756 -> 668 [style=solid label="WHILE"]
  1756 -> 669 [style=solid label="DO"]
  1756 -> 670 [style=solid label="FOR"]
  1756 -> 671 [style=solid label="BREAK"]
  1756 -> 672 [style=solid label="CONTINUE"]
  1756 -> 673 [style=solid label="RETURN"]
  1756 -> 674 [style=solid label="GOTO"]
  1756 -> 675 [style=solid label="CASE"]
  1756 -> 676 [style=solid label="NAMESPACE"]
  1756 -> 374 [style=solid label="REQUIRES"]
  1756 -> 375 [style=solid label="NEW"]
  1756 -> 376 [style=solid label="COMPL"]
  1756 -> 377 [style=solid label="NOT"]
  1756 -> 378 [style=solid label="PLUS_PLUS"]
  1756 -> 379 [style=solid label="MINUS_MINUS"]
  1756 -> 380 [style=solid label="THIS"]
  1756 -> 36 [style=solid label="AUTO"]
  1756 -> 381 [style=solid label="NULLPTR"]
  1756 -> 382 [style=solid label="DYNAMIC_CAST"]
  1756 -> 383 [style=solid label="STATIC_CAST"]
  1756 -> 384 [style=solid label="REINTERPRET_CAST"]
  1756 -> 385 [style=solid label="CONST_CAST"]
  1756 -> 386 [style=solid label="TYPEID"]
  1756 -> 677 [style=solid label="IF"]
  1756 -> 678 [style=solid label="SWITCH"]
  1756 -> 37 [style=solid label="CHAR"]
  1756 -> 38 [style=solid label="CHAR8_T"]
  1756 -> 39 [style=solid label="CHAR16_T"]
  1756 -> 40 [style=solid label="CHAR32_T"]
  1756 -> 41 [style=solid label="WCHAR_T"]
  1756 -> 42 [style=solid label="BOOL"]
  1756 -> 43 [style=solid label="SHORT"]
  1756 -> 44 [style=solid label="INT"]
  1756 -> 45 [style=solid label="LONG"]
  1756 -> 46 [style=solid label="SIGNED"]
  1756 -> 47 [style=solid label="UNSIGNED"]
  1756 -> 48 [style=solid label="FLOAT"]
  1756 -> 49 [style=solid label="DOUBLE"]
  1756 -> 50 [style=solid label="VOID"]
  1756 -> 51 [style=solid label="STATIC_ASSERT"]
  1756 -> 52 [style=solid label="STATIC"]
  1756 -> 53 [style=solid label="THREAD_LOCAL"]
  1756 -> 54 [style=solid label="MUTABLE"]
  1756 -> 523 [style=solid label="THROW"]
  1756 -> 55 [style=solid label="TYPENAME"]
  1756 -> 387 [style=solid label="SIZEOF"]
  1756 -> 388 [style=solid label="ALIGNOF"]
  1756 -> 524 [style=solid label="CO_YIELD"]
  1756 -> 389 [style=solid label="'0'"]
  1756 -> 390 [style=solid label="'1'"]
  1756 -> 391 [style=solid label="'2'"]
  1756 -> 392 [style=solid label="'3'"]
  1756 -> 393 [style=solid label="'4'"]
  1756 -> 394 [style=solid label="'5'"]
  1756 -> 395 [style=solid label="'6'"]
  1756 -> 396 [style=solid label="'7'"]
  1756 -> 397 [style=solid label="'8'"]
  1756 -> 398 [style=solid label="'9'"]
  1756 -> 205 [style=solid label="'u'"]
  1756 -> 206 [style=solid label="'U'"]
  1756 -> 207 [style=solid label="'L'"]
  1756 -> 208 [style=solid label="'R'"]
  1756 -> 399 [style=dashed label="additive-expression"]
  1756 -> 56 [style=dashed label="alias-declaration"]
  1756 -> 57 [style=dashed label="alignment-specifier"]
  1756 -> 400 [style=dashed label="and-expression"]
  1756 -> 58 [style=dashed label="asm-declaration"]
  1756 -> 525 [style=dashed label="assignment-expression"]
  1756 -> 60 [style=dashed label="attribute-specifier"]
  1756 -> 679 [style=dashed label="attribute-specifier-seq"]
  1756 -> 401 [style=dashed label="await-expression"]
  1756 -> 402 [style=dashed label="binary-literal"]
  1756 -> 680 [style=dashed label="block-declaration"]
  1756 -> 403 [style=dashed label="boolean-literal"]
  1756 -> 404 [style=dashed label="cast-expression"]
  1756 -> 405 [style=dashed label="character-literal"]
  1756 -> 63 [style=dashed label="class-head"]
  1756 -> 64 [style=dashed label="class-key"]
  1756 -> 65 [style=dashed label="class-name"]
  1756 -> 66 [style=dashed label="class-specifier"]
  1756 -> 406 [style=dashed label="compare-expression"]
  1756 -> 681 [style=dashed label="compound-statement"]
  1756 -> 67 [style=dashed label="concept-name"]
  1756 -> 526 [style=dashed label="conditional-expression"]
  1756 -> 68 [style=dashed label="conversion-function-id"]
  1756 -> 682 [style=dashed label="coroutine-return-statement"]
  1756 -> 69 [style=dashed label="cv-qualifier"]
  1756 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1756 -> 410 [style=dashed label="decimal-literal"]
  1756 -> 70 [style=dashed label="decl-specifier"]
  1756 -> 683 [style=dashed label="decl-specifier-seq"]
  1756 -> 684 [style=dashed label="declaration-statement"]
  1756 -> 76 [style=dashed label="decltype-specifier"]
  1756 -> 78 [style=dashed label="defining-type-specifier"]
  1756 -> 411 [style=dashed label="delete-expression"]
  1756 -> 412 [style=dashed label="digit"]
  1756 -> 413 [style=dashed label="digit-sequence"]
  1756 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1756 -> 80 [style=dashed label="elaborated-type-specifier"]
  1756 -> 414 [style=dashed label="encoding-prefix"]
  1756 -> 82 [style=dashed label="enum-head"]
  1756 -> 83 [style=dashed label="enum-key"]
  1756 -> 84 [style=dashed label="enum-name"]
  1756 -> 85 [style=dashed label="enum-specifier"]
  1756 -> 415 [style=dashed label="equality-expression"]
  1756 -> 416 [style=dashed label="exclusive-or-expression"]
  1756 -> 264 [style=dashed label="explicit-specifier"]
  1756 -> 685 [style=dashed label="expression"]
  1756 -> 686 [style=dashed label="expression-statement"]
  1756 -> 417 [style=dashed label="floating-point-literal"]
  1756 -> 418 [style=dashed label="fold-expression"]
  1756 -> 419 [style=dashed label="fractional-constant"]
  1756 -> 91 [style=dashed label="function-specifier"]
  1756 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1756 -> 421 [style=dashed label="hexadecimal-literal"]
  1756 -> 422 [style=dashed label="hexadecimal-prefix"]
  1756 -> 423 [style=dashed label="id-expression"]
  1756 -> 424 [style=dashed label="inclusive-or-expression"]
  1756 -> 425 [style=dashed label="integer-literal"]
  1756 -> 687 [style=dashed label="iteration-statement"]
  1756 -> 688 [style=dashed label="jump-statement"]
  1756 -> 689 [style=dashed label="labeled-statement"]
  1756 -> 426 [style=dashed label="lambda-expression"]
  1756 -> 427 [style=dashed label="lambda-introducer"]
  1756 -> 428 [style=dashed label="literal"]
  1756 -> 95 [style=dashed label="literal-operator-id"]
  1756 -> 429 [style=dashed label="logical-and-expression"]
  1756 -> 528 [style=dashed label="logical-or-expression"]
  1756 -> 431 [style=dashed label="multiplicative-expression"]
  1756 -> 99 [style=dashed label="namespace-alias"]
  1756 -> 100 [style=dashed label="namespace-alias-definition"]
  1756 -> 102 [style=dashed label="namespace-name"]
  1756 -> 432 [style=dashed label="nested-name-specifier"]
  1756 -> 433 [style=dashed label="new-expression"]
  1756 -> 434 [style=dashed label="noexcept-expression"]
  1756 -> 435 [style=dashed label="nonzero-digit"]
  1756 -> 436 [style=dashed label="octal-literal"]
  1756 -> 107 [style=dashed label="opaque-enum-declaration"]
  1756 -> 108 [style=dashed label="operator-function-id"]
  1756 -> 109 [style=dashed label="placeholder-type-specifier"]
  1756 -> 437 [style=dashed label="pm-expression"]
  1756 -> 438 [style=dashed label="pointer-literal"]
  1756 -> 439 [style=dashed label="postfix-expression"]
  1756 -> 440 [style=dashed label="primary-expression"]
  1756 -> 112 [style=dashed label="qualified-id"]
  1756 -> 441 [style=dashed label="relational-expression"]
  1756 -> 442 [style=dashed label="requires-expression"]
  1756 -> 690 [style=dashed label="selection-statement"]
  1756 -> 443 [style=dashed label="shift-expression"]
  1756 -> 113 [style=dashed label="simple-declaration"]
  1756 -> 114 [style=dashed label="simple-template-id"]
  1756 -> 444 [style=dashed label="simple-type-specifier"]
  1756 -> 1867 [style=dashed label="statement"]
  1756 -> 116 [style=dashed label="static_assert-declaration"]
  1756 -> 117 [style=dashed label="storage-class-specifier"]
  1756 -> 445 [style=dashed label="string-literal"]
  1756 -> 120 [style=dashed label="template-id"]
  1756 -> 215 [style=dashed label="template-name"]
  1756 -> 530 [style=dashed label="throw-expression"]
  1756 -> 693 [style=dashed label="try-block"]
  1756 -> 123 [style=dashed label="type-constraint"]
  1756 -> 124 [style=dashed label="type-name"]
  1756 -> 125 [style=dashed label="type-specifier"]
  1756 -> 126 [style=dashed label="typedef-name"]
  1756 -> 448 [style=dashed label="typename-specifier"]
  1756 -> 449 [style=dashed label="unary-expression"]
  1756 -> 450 [style=dashed label="unary-operator"]
  1756 -> 129 [style=dashed label="unqualified-id"]
  1756 -> 451 [style=dashed label="user-defined-character-literal"]
  1756 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1756 -> 453 [style=dashed label="user-defined-integer-literal"]
  1756 -> 454 [style=dashed label="user-defined-literal"]
  1756 -> 455 [style=dashed label="user-defined-string-literal"]
  1756 -> 130 [style=dashed label="using-declaration"]
  1756 -> 131 [style=dashed label="using-directive"]
  1756 -> 132 [style=dashed label="using-enum-declaration"]
  1756 -> 532 [style=dashed label="yield-expression"]
  1757 [label="State 1757\n\l951 selection-statement: SWITCH OPEN_PAREN init-statement condition • CLOSE_PAREN statement\l"]
  1757 -> 1868 [style=solid label="CLOSE_PAREN"]
  1758 [label="State 1758\n\l519 labeled-statement: attribute-specifier-seq IDENTIFIER COLON statement •\l"]
  1758 -> "1758R519" [style=solid]
 "1758R519" [label="R519", fillcolor=3, shape=diamond, style=filled]
  1759 [label="State 1759\n\l523 labeled-statement: attribute-specifier-seq DEFAULT COLON statement •\l"]
  1759 -> "1759R523" [style=solid]
 "1759R523" [label="R523", fillcolor=3, shape=diamond, style=filled]
  1760 [label="State 1760\n\l521 labeled-statement: attribute-specifier-seq CASE constant-expression COLON • statement\l"]
  1760 -> 356 [style=solid label="PLUS"]
  1760 -> 357 [style=solid label="MINUS"]
  1760 -> 1 [style=solid label="USING"]
  1760 -> 661 [style=solid label="IDENTIFIER"]
  1760 -> 662 [style=solid label="SEMICOLON"]
  1760 -> 4 [style=solid label="ALIGNAS"]
  1760 -> 358 [style=solid label="OPEN_PAREN"]
  1760 -> 359 [style=solid label="AND"]
  1760 -> 8 [style=solid label="ASM"]
  1760 -> 360 [style=solid label="SCOPE"]
  1760 -> 663 [style=solid label="OPEN_SQUARE"]
  1760 -> 362 [style=solid label="CO_AWAIT"]
  1760 -> 289 [style=solid label="OPEN_BRACE"]
  1760 -> 11 [style=solid label="VIRTUAL"]
  1760 -> 363 [style=solid label="ZERO_LB"]
  1760 -> 364 [style=solid label="ZERO_HB"]
  1760 -> 365 [style=solid label="SINGLE_QUOTE"]
  1760 -> 366 [style=solid label="FALSE"]
  1760 -> 367 [style=solid label="TRUE"]
  1760 -> 12 [style=solid label="CLASS"]
  1760 -> 13 [style=solid label="STRUCT"]
  1760 -> 14 [style=solid label="UNION"]
  1760 -> 368 [style=solid label="NOEXCEPT"]
  1760 -> 17 [style=solid label="OPERATOR"]
  1760 -> 665 [style=solid label="CO_RETURN"]
  1760 -> 18 [style=solid label="CONST"]
  1760 -> 19 [style=solid label="VOLATILE"]
  1760 -> 20 [style=solid label="FRIEND"]
  1760 -> 21 [style=solid label="TYPEDEF"]
  1760 -> 22 [style=solid label="CONSTEXPR"]
  1760 -> 23 [style=solid label="CONSTEVAL"]
  1760 -> 24 [style=solid label="CONSTINIT"]
  1760 -> 258 [style=solid label="INLINE"]
  1760 -> 26 [style=solid label="DECLTYPE"]
  1760 -> 369 [style=solid label="DELETE"]
  1760 -> 370 [style=solid label="DOT"]
  1760 -> 27 [style=solid label="ENUM"]
  1760 -> 184 [style=solid label="UNICODE_8"]
  1760 -> 259 [style=solid label="EXTERN"]
  1760 -> 29 [style=solid label="EXPLICIT"]
  1760 -> 371 [style=solid label="MULT"]
  1760 -> 666 [style=solid label="DEFAULT"]
  1760 -> 667 [style=solid label="TRY"]
  1760 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1760 -> 372 [style=solid label="ZERO_LX"]
  1760 -> 373 [style=solid label="ZERO_HX"]
  1760 -> 668 [style=solid label="WHILE"]
  1760 -> 669 [style=solid label="DO"]
  1760 -> 670 [style=solid label="FOR"]
  1760 -> 671 [style=solid label="BREAK"]
  1760 -> 672 [style=solid label="CONTINUE"]
  1760 -> 673 [style=solid label="RETURN"]
  1760 -> 674 [style=solid label="GOTO"]
  1760 -> 675 [style=solid label="CASE"]
  1760 -> 676 [style=solid label="NAMESPACE"]
  1760 -> 374 [style=solid label="REQUIRES"]
  1760 -> 375 [style=solid label="NEW"]
  1760 -> 376 [style=solid label="COMPL"]
  1760 -> 377 [style=solid label="NOT"]
  1760 -> 378 [style=solid label="PLUS_PLUS"]
  1760 -> 379 [style=solid label="MINUS_MINUS"]
  1760 -> 380 [style=solid label="THIS"]
  1760 -> 36 [style=solid label="AUTO"]
  1760 -> 381 [style=solid label="NULLPTR"]
  1760 -> 382 [style=solid label="DYNAMIC_CAST"]
  1760 -> 383 [style=solid label="STATIC_CAST"]
  1760 -> 384 [style=solid label="REINTERPRET_CAST"]
  1760 -> 385 [style=solid label="CONST_CAST"]
  1760 -> 386 [style=solid label="TYPEID"]
  1760 -> 677 [style=solid label="IF"]
  1760 -> 678 [style=solid label="SWITCH"]
  1760 -> 37 [style=solid label="CHAR"]
  1760 -> 38 [style=solid label="CHAR8_T"]
  1760 -> 39 [style=solid label="CHAR16_T"]
  1760 -> 40 [style=solid label="CHAR32_T"]
  1760 -> 41 [style=solid label="WCHAR_T"]
  1760 -> 42 [style=solid label="BOOL"]
  1760 -> 43 [style=solid label="SHORT"]
  1760 -> 44 [style=solid label="INT"]
  1760 -> 45 [style=solid label="LONG"]
  1760 -> 46 [style=solid label="SIGNED"]
  1760 -> 47 [style=solid label="UNSIGNED"]
  1760 -> 48 [style=solid label="FLOAT"]
  1760 -> 49 [style=solid label="DOUBLE"]
  1760 -> 50 [style=solid label="VOID"]
  1760 -> 51 [style=solid label="STATIC_ASSERT"]
  1760 -> 52 [style=solid label="STATIC"]
  1760 -> 53 [style=solid label="THREAD_LOCAL"]
  1760 -> 54 [style=solid label="MUTABLE"]
  1760 -> 523 [style=solid label="THROW"]
  1760 -> 55 [style=solid label="TYPENAME"]
  1760 -> 387 [style=solid label="SIZEOF"]
  1760 -> 388 [style=solid label="ALIGNOF"]
  1760 -> 524 [style=solid label="CO_YIELD"]
  1760 -> 389 [style=solid label="'0'"]
  1760 -> 390 [style=solid label="'1'"]
  1760 -> 391 [style=solid label="'2'"]
  1760 -> 392 [style=solid label="'3'"]
  1760 -> 393 [style=solid label="'4'"]
  1760 -> 394 [style=solid label="'5'"]
  1760 -> 395 [style=solid label="'6'"]
  1760 -> 396 [style=solid label="'7'"]
  1760 -> 397 [style=solid label="'8'"]
  1760 -> 398 [style=solid label="'9'"]
  1760 -> 205 [style=solid label="'u'"]
  1760 -> 206 [style=solid label="'U'"]
  1760 -> 207 [style=solid label="'L'"]
  1760 -> 208 [style=solid label="'R'"]
  1760 -> 399 [style=dashed label="additive-expression"]
  1760 -> 56 [style=dashed label="alias-declaration"]
  1760 -> 57 [style=dashed label="alignment-specifier"]
  1760 -> 400 [style=dashed label="and-expression"]
  1760 -> 58 [style=dashed label="asm-declaration"]
  1760 -> 525 [style=dashed label="assignment-expression"]
  1760 -> 60 [style=dashed label="attribute-specifier"]
  1760 -> 679 [style=dashed label="attribute-specifier-seq"]
  1760 -> 401 [style=dashed label="await-expression"]
  1760 -> 402 [style=dashed label="binary-literal"]
  1760 -> 680 [style=dashed label="block-declaration"]
  1760 -> 403 [style=dashed label="boolean-literal"]
  1760 -> 404 [style=dashed label="cast-expression"]
  1760 -> 405 [style=dashed label="character-literal"]
  1760 -> 63 [style=dashed label="class-head"]
  1760 -> 64 [style=dashed label="class-key"]
  1760 -> 65 [style=dashed label="class-name"]
  1760 -> 66 [style=dashed label="class-specifier"]
  1760 -> 406 [style=dashed label="compare-expression"]
  1760 -> 681 [style=dashed label="compound-statement"]
  1760 -> 67 [style=dashed label="concept-name"]
  1760 -> 526 [style=dashed label="conditional-expression"]
  1760 -> 68 [style=dashed label="conversion-function-id"]
  1760 -> 682 [style=dashed label="coroutine-return-statement"]
  1760 -> 69 [style=dashed label="cv-qualifier"]
  1760 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1760 -> 410 [style=dashed label="decimal-literal"]
  1760 -> 70 [style=dashed label="decl-specifier"]
  1760 -> 683 [style=dashed label="decl-specifier-seq"]
  1760 -> 684 [style=dashed label="declaration-statement"]
  1760 -> 76 [style=dashed label="decltype-specifier"]
  1760 -> 78 [style=dashed label="defining-type-specifier"]
  1760 -> 411 [style=dashed label="delete-expression"]
  1760 -> 412 [style=dashed label="digit"]
  1760 -> 413 [style=dashed label="digit-sequence"]
  1760 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1760 -> 80 [style=dashed label="elaborated-type-specifier"]
  1760 -> 414 [style=dashed label="encoding-prefix"]
  1760 -> 82 [style=dashed label="enum-head"]
  1760 -> 83 [style=dashed label="enum-key"]
  1760 -> 84 [style=dashed label="enum-name"]
  1760 -> 85 [style=dashed label="enum-specifier"]
  1760 -> 415 [style=dashed label="equality-expression"]
  1760 -> 416 [style=dashed label="exclusive-or-expression"]
  1760 -> 264 [style=dashed label="explicit-specifier"]
  1760 -> 685 [style=dashed label="expression"]
  1760 -> 686 [style=dashed label="expression-statement"]
  1760 -> 417 [style=dashed label="floating-point-literal"]
  1760 -> 418 [style=dashed label="fold-expression"]
  1760 -> 419 [style=dashed label="fractional-constant"]
  1760 -> 91 [style=dashed label="function-specifier"]
  1760 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1760 -> 421 [style=dashed label="hexadecimal-literal"]
  1760 -> 422 [style=dashed label="hexadecimal-prefix"]
  1760 -> 423 [style=dashed label="id-expression"]
  1760 -> 424 [style=dashed label="inclusive-or-expression"]
  1760 -> 425 [style=dashed label="integer-literal"]
  1760 -> 687 [style=dashed label="iteration-statement"]
  1760 -> 688 [style=dashed label="jump-statement"]
  1760 -> 689 [style=dashed label="labeled-statement"]
  1760 -> 426 [style=dashed label="lambda-expression"]
  1760 -> 427 [style=dashed label="lambda-introducer"]
  1760 -> 428 [style=dashed label="literal"]
  1760 -> 95 [style=dashed label="literal-operator-id"]
  1760 -> 429 [style=dashed label="logical-and-expression"]
  1760 -> 528 [style=dashed label="logical-or-expression"]
  1760 -> 431 [style=dashed label="multiplicative-expression"]
  1760 -> 99 [style=dashed label="namespace-alias"]
  1760 -> 100 [style=dashed label="namespace-alias-definition"]
  1760 -> 102 [style=dashed label="namespace-name"]
  1760 -> 432 [style=dashed label="nested-name-specifier"]
  1760 -> 433 [style=dashed label="new-expression"]
  1760 -> 434 [style=dashed label="noexcept-expression"]
  1760 -> 435 [style=dashed label="nonzero-digit"]
  1760 -> 436 [style=dashed label="octal-literal"]
  1760 -> 107 [style=dashed label="opaque-enum-declaration"]
  1760 -> 108 [style=dashed label="operator-function-id"]
  1760 -> 109 [style=dashed label="placeholder-type-specifier"]
  1760 -> 437 [style=dashed label="pm-expression"]
  1760 -> 438 [style=dashed label="pointer-literal"]
  1760 -> 439 [style=dashed label="postfix-expression"]
  1760 -> 440 [style=dashed label="primary-expression"]
  1760 -> 112 [style=dashed label="qualified-id"]
  1760 -> 441 [style=dashed label="relational-expression"]
  1760 -> 442 [style=dashed label="requires-expression"]
  1760 -> 690 [style=dashed label="selection-statement"]
  1760 -> 443 [style=dashed label="shift-expression"]
  1760 -> 113 [style=dashed label="simple-declaration"]
  1760 -> 114 [style=dashed label="simple-template-id"]
  1760 -> 444 [style=dashed label="simple-type-specifier"]
  1760 -> 1869 [style=dashed label="statement"]
  1760 -> 116 [style=dashed label="static_assert-declaration"]
  1760 -> 117 [style=dashed label="storage-class-specifier"]
  1760 -> 445 [style=dashed label="string-literal"]
  1760 -> 120 [style=dashed label="template-id"]
  1760 -> 215 [style=dashed label="template-name"]
  1760 -> 530 [style=dashed label="throw-expression"]
  1760 -> 693 [style=dashed label="try-block"]
  1760 -> 123 [style=dashed label="type-constraint"]
  1760 -> 124 [style=dashed label="type-name"]
  1760 -> 125 [style=dashed label="type-specifier"]
  1760 -> 126 [style=dashed label="typedef-name"]
  1760 -> 448 [style=dashed label="typename-specifier"]
  1760 -> 449 [style=dashed label="unary-expression"]
  1760 -> 450 [style=dashed label="unary-operator"]
  1760 -> 129 [style=dashed label="unqualified-id"]
  1760 -> 451 [style=dashed label="user-defined-character-literal"]
  1760 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1760 -> 453 [style=dashed label="user-defined-integer-literal"]
  1760 -> 454 [style=dashed label="user-defined-literal"]
  1760 -> 455 [style=dashed label="user-defined-string-literal"]
  1760 -> 130 [style=dashed label="using-declaration"]
  1760 -> 131 [style=dashed label="using-directive"]
  1760 -> 132 [style=dashed label="using-enum-declaration"]
  1760 -> 532 [style=dashed label="yield-expression"]
  1761 [label="State 1761\n\l316 exception-declaration: ELLIPSIS •\l"]
  1761 -> "1761R316" [style=solid]
 "1761R316" [label="R316", fillcolor=3, shape=diamond, style=filled]
  1762 [label="State 1762\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l310 exception-declaration: attribute-specifier-seq • type-specifier-seq declarator\l312                      | attribute-specifier-seq • type-specifier-seq\l314                      | attribute-specifier-seq • type-specifier-seq abstract-declarator\l"]
  1762 -> 162 [style=solid label="IDENTIFIER"]
  1762 -> 4 [style=solid label="ALIGNAS"]
  1762 -> 9 [style=solid label="SCOPE"]
  1762 -> 10 [style=solid label="OPEN_SQUARE"]
  1762 -> 12 [style=solid label="CLASS"]
  1762 -> 13 [style=solid label="STRUCT"]
  1762 -> 14 [style=solid label="UNION"]
  1762 -> 18 [style=solid label="CONST"]
  1762 -> 19 [style=solid label="VOLATILE"]
  1762 -> 26 [style=solid label="DECLTYPE"]
  1762 -> 135 [style=solid label="ENUM"]
  1762 -> 36 [style=solid label="AUTO"]
  1762 -> 37 [style=solid label="CHAR"]
  1762 -> 38 [style=solid label="CHAR8_T"]
  1762 -> 39 [style=solid label="CHAR16_T"]
  1762 -> 40 [style=solid label="CHAR32_T"]
  1762 -> 41 [style=solid label="WCHAR_T"]
  1762 -> 42 [style=solid label="BOOL"]
  1762 -> 43 [style=solid label="SHORT"]
  1762 -> 44 [style=solid label="INT"]
  1762 -> 45 [style=solid label="LONG"]
  1762 -> 46 [style=solid label="SIGNED"]
  1762 -> 47 [style=solid label="UNSIGNED"]
  1762 -> 48 [style=solid label="FLOAT"]
  1762 -> 49 [style=solid label="DOUBLE"]
  1762 -> 50 [style=solid label="VOID"]
  1762 -> 55 [style=solid label="TYPENAME"]
  1762 -> 57 [style=dashed label="alignment-specifier"]
  1762 -> 260 [style=dashed label="attribute-specifier"]
  1762 -> 209 [style=dashed label="class-key"]
  1762 -> 65 [style=dashed label="class-name"]
  1762 -> 67 [style=dashed label="concept-name"]
  1762 -> 69 [style=dashed label="cv-qualifier"]
  1762 -> 76 [style=dashed label="decltype-specifier"]
  1762 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1762 -> 80 [style=dashed label="elaborated-type-specifier"]
  1762 -> 84 [style=dashed label="enum-name"]
  1762 -> 99 [style=dashed label="namespace-alias"]
  1762 -> 102 [style=dashed label="namespace-name"]
  1762 -> 212 [style=dashed label="nested-name-specifier"]
  1762 -> 109 [style=dashed label="placeholder-type-specifier"]
  1762 -> 141 [style=dashed label="simple-template-id"]
  1762 -> 115 [style=dashed label="simple-type-specifier"]
  1762 -> 215 [style=dashed label="template-name"]
  1762 -> 123 [style=dashed label="type-constraint"]
  1762 -> 124 [style=dashed label="type-name"]
  1762 -> 216 [style=dashed label="type-specifier"]
  1762 -> 1870 [style=dashed label="type-specifier-seq"]
  1762 -> 126 [style=dashed label="typedef-name"]
  1762 -> 127 [style=dashed label="typename-specifier"]
  1763 [label="State 1763\n\l416 handler: CATCH OPEN_PAREN exception-declaration • CLOSE_PAREN compound-statement\l"]
  1763 -> 1871 [style=solid label="CLOSE_PAREN"]
  1764 [label="State 1764\n\l311 exception-declaration: type-specifier-seq • declarator\l313                      | type-specifier-seq •\l315                      | type-specifier-seq • abstract-declarator\l"]
  1764 -> 147 [style=solid label="IDENTIFIER"]
  1764 -> 969 [style=solid label="OPEN_PAREN"]
  1764 -> 970 [style=solid label="ELLIPSIS"]
  1764 -> 7 [style=solid label="AND"]
  1764 -> 9 [style=solid label="SCOPE"]
  1764 -> 941 [style=solid label="OPEN_SQUARE"]
  1764 -> 16 [style=solid label="AND_AND"]
  1764 -> 17 [style=solid label="OPERATOR"]
  1764 -> 134 [style=solid label="DECLTYPE"]
  1764 -> 31 [style=solid label="MULT"]
  1764 -> 35 [style=solid label="COMPL"]
  1764 -> 1872 [style=dashed label="abstract-declarator"]
  1764 -> 943 [style=dashed label="abstract-pack-declarator"]
  1764 -> 65 [style=dashed label="class-name"]
  1764 -> 68 [style=dashed label="conversion-function-id"]
  1764 -> 1873 [style=dashed label="declarator"]
  1764 -> 75 [style=dashed label="declarator-id"]
  1764 -> 138 [style=dashed label="decltype-specifier"]
  1764 -> 84 [style=dashed label="enum-name"]
  1764 -> 93 [style=dashed label="id-expression"]
  1764 -> 95 [style=dashed label="literal-operator-id"]
  1764 -> 99 [style=dashed label="namespace-alias"]
  1764 -> 102 [style=dashed label="namespace-name"]
  1764 -> 148 [style=dashed label="nested-name-specifier"]
  1764 -> 944 [style=dashed label="noptr-abstract-declarator"]
  1764 -> 945 [style=dashed label="noptr-abstract-pack-declarator"]
  1764 -> 106 [style=dashed label="noptr-declarator"]
  1764 -> 108 [style=dashed label="operator-function-id"]
  1764 -> 946 [style=dashed label="parameters-and-qualifiers"]
  1764 -> 947 [style=dashed label="ptr-abstract-declarator"]
  1764 -> 110 [style=dashed label="ptr-declarator"]
  1764 -> 973 [style=dashed label="ptr-operator"]
  1764 -> 112 [style=dashed label="qualified-id"]
  1764 -> 114 [style=dashed label="simple-template-id"]
  1764 -> 120 [style=dashed label="template-id"]
  1764 -> 142 [style=dashed label="template-name"]
  1764 -> 143 [style=dashed label="type-name"]
  1764 -> 126 [style=dashed label="typedef-name"]
  1764 -> 129 [style=dashed label="unqualified-id"]
  1764 -> "1764R313" [style=solid]
 "1764R313" [label="R313", fillcolor=3, shape=diamond, style=filled]
  1765 [label="State 1765\n\l231 deduction-guide: explicit-specifier template-name OPEN_PAREN parameter-declaration-clause CLOSE_PAREN DEREF • simple-template-id SEMICOLON\l"]
  1765 -> 310 [style=solid label="IDENTIFIER"]
  1765 -> 1874 [style=dashed label="simple-template-id"]
  1765 -> 142 [style=dashed label="template-name"]
  1766 [label="State 1766\n\l224 declaration-seq: declaration-seq • declaration\l887 private-module-fragment: MODULE COLON PRIVATE SEMICOLON declaration-seq •\l"]
  1766 -> 1 [style=solid label="USING"]
  1766 -> 2 [style=solid label="IDENTIFIER"]
  1766 -> 3 [style=solid label="SEMICOLON"]
  1766 -> 4 [style=solid label="ALIGNAS"]
  1766 -> 5 [style=solid label="OPEN_PAREN"]
  1766 -> 6 [style=solid label="ELLIPSIS"]
  1766 -> 7 [style=solid label="AND"]
  1766 -> 8 [style=solid label="ASM"]
  1766 -> 9 [style=solid label="SCOPE"]
  1766 -> 10 [style=solid label="OPEN_SQUARE"]
  1766 -> 11 [style=solid label="VIRTUAL"]
  1766 -> 12 [style=solid label="CLASS"]
  1766 -> 13 [style=solid label="STRUCT"]
  1766 -> 14 [style=solid label="UNION"]
  1766 -> 15 [style=solid label="TEMPLATE"]
  1766 -> 16 [style=solid label="AND_AND"]
  1766 -> 17 [style=solid label="OPERATOR"]
  1766 -> 18 [style=solid label="CONST"]
  1766 -> 19 [style=solid label="VOLATILE"]
  1766 -> 20 [style=solid label="FRIEND"]
  1766 -> 21 [style=solid label="TYPEDEF"]
  1766 -> 22 [style=solid label="CONSTEXPR"]
  1766 -> 23 [style=solid label="CONSTEVAL"]
  1766 -> 24 [style=solid label="CONSTINIT"]
  1766 -> 25 [style=solid label="INLINE"]
  1766 -> 26 [style=solid label="DECLTYPE"]
  1766 -> 27 [style=solid label="ENUM"]
  1766 -> 28 [style=solid label="EXTERN"]
  1766 -> 29 [style=solid label="EXPLICIT"]
  1766 -> 157 [style=solid label="EXPORT"]
  1766 -> 31 [style=solid label="MULT"]
  1766 -> 33 [style=solid label="IMPORT"]
  1766 -> 34 [style=solid label="NAMESPACE"]
  1766 -> 35 [style=solid label="COMPL"]
  1766 -> 36 [style=solid label="AUTO"]
  1766 -> 37 [style=solid label="CHAR"]
  1766 -> 38 [style=solid label="CHAR8_T"]
  1766 -> 39 [style=solid label="CHAR16_T"]
  1766 -> 40 [style=solid label="CHAR32_T"]
  1766 -> 41 [style=solid label="WCHAR_T"]
  1766 -> 42 [style=solid label="BOOL"]
  1766 -> 43 [style=solid label="SHORT"]
  1766 -> 44 [style=solid label="INT"]
  1766 -> 45 [style=solid label="LONG"]
  1766 -> 46 [style=solid label="SIGNED"]
  1766 -> 47 [style=solid label="UNSIGNED"]
  1766 -> 48 [style=solid label="FLOAT"]
  1766 -> 49 [style=solid label="DOUBLE"]
  1766 -> 50 [style=solid label="VOID"]
  1766 -> 51 [style=solid label="STATIC_ASSERT"]
  1766 -> 52 [style=solid label="STATIC"]
  1766 -> 53 [style=solid label="THREAD_LOCAL"]
  1766 -> 54 [style=solid label="MUTABLE"]
  1766 -> 55 [style=solid label="TYPENAME"]
  1766 -> 56 [style=dashed label="alias-declaration"]
  1766 -> 57 [style=dashed label="alignment-specifier"]
  1766 -> 58 [style=dashed label="asm-declaration"]
  1766 -> 59 [style=dashed label="attribute-declaration"]
  1766 -> 60 [style=dashed label="attribute-specifier"]
  1766 -> 61 [style=dashed label="attribute-specifier-seq"]
  1766 -> 62 [style=dashed label="block-declaration"]
  1766 -> 63 [style=dashed label="class-head"]
  1766 -> 64 [style=dashed label="class-key"]
  1766 -> 65 [style=dashed label="class-name"]
  1766 -> 66 [style=dashed label="class-specifier"]
  1766 -> 67 [style=dashed label="concept-name"]
  1766 -> 68 [style=dashed label="conversion-function-id"]
  1766 -> 69 [style=dashed label="cv-qualifier"]
  1766 -> 70 [style=dashed label="decl-specifier"]
  1766 -> 71 [style=dashed label="decl-specifier-seq"]
  1766 -> 285 [style=dashed label="declaration"]
  1766 -> 74 [style=dashed label="declarator"]
  1766 -> 75 [style=dashed label="declarator-id"]
  1766 -> 76 [style=dashed label="decltype-specifier"]
  1766 -> 77 [style=dashed label="deduction-guide"]
  1766 -> 78 [style=dashed label="defining-type-specifier"]
  1766 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1766 -> 80 [style=dashed label="elaborated-type-specifier"]
  1766 -> 81 [style=dashed label="empty-declaration"]
  1766 -> 82 [style=dashed label="enum-head"]
  1766 -> 83 [style=dashed label="enum-key"]
  1766 -> 84 [style=dashed label="enum-name"]
  1766 -> 85 [style=dashed label="enum-specifier"]
  1766 -> 86 [style=dashed label="explicit-instantiation"]
  1766 -> 87 [style=dashed label="explicit-specialization"]
  1766 -> 88 [style=dashed label="explicit-specifier"]
  1766 -> 89 [style=dashed label="export-declaration"]
  1766 -> 90 [style=dashed label="function-definition"]
  1766 -> 91 [style=dashed label="function-specifier"]
  1766 -> 93 [style=dashed label="id-expression"]
  1766 -> 94 [style=dashed label="linkage-specification"]
  1766 -> 95 [style=dashed label="literal-operator-id"]
  1766 -> 97 [style=dashed label="module-import-declaration"]
  1766 -> 98 [style=dashed label="named-namespace-definition"]
  1766 -> 99 [style=dashed label="namespace-alias"]
  1766 -> 100 [style=dashed label="namespace-alias-definition"]
  1766 -> 101 [style=dashed label="namespace-definition"]
  1766 -> 102 [style=dashed label="namespace-name"]
  1766 -> 103 [style=dashed label="nested-name-specifier"]
  1766 -> 104 [style=dashed label="nested-namespace-definition"]
  1766 -> 105 [style=dashed label="nodeclspec-function-declaration"]
  1766 -> 106 [style=dashed label="noptr-declarator"]
  1766 -> 107 [style=dashed label="opaque-enum-declaration"]
  1766 -> 108 [style=dashed label="operator-function-id"]
  1766 -> 109 [style=dashed label="placeholder-type-specifier"]
  1766 -> 110 [style=dashed label="ptr-declarator"]
  1766 -> 111 [style=dashed label="ptr-operator"]
  1766 -> 112 [style=dashed label="qualified-id"]
  1766 -> 113 [style=dashed label="simple-declaration"]
  1766 -> 114 [style=dashed label="simple-template-id"]
  1766 -> 115 [style=dashed label="simple-type-specifier"]
  1766 -> 116 [style=dashed label="static_assert-declaration"]
  1766 -> 117 [style=dashed label="storage-class-specifier"]
  1766 -> 118 [style=dashed label="template-declaration"]
  1766 -> 119 [style=dashed label="template-head"]
  1766 -> 120 [style=dashed label="template-id"]
  1766 -> 121 [style=dashed label="template-name"]
  1766 -> 123 [style=dashed label="type-constraint"]
  1766 -> 124 [style=dashed label="type-name"]
  1766 -> 125 [style=dashed label="type-specifier"]
  1766 -> 126 [style=dashed label="typedef-name"]
  1766 -> 127 [style=dashed label="typename-specifier"]
  1766 -> 128 [style=dashed label="unnamed-namespace-definition"]
  1766 -> 129 [style=dashed label="unqualified-id"]
  1766 -> 130 [style=dashed label="using-declaration"]
  1766 -> 131 [style=dashed label="using-directive"]
  1766 -> 132 [style=dashed label="using-enum-declaration"]
  1766 -> "1766R887" [style=solid]
 "1766R887" [label="R887", fillcolor=3, shape=diamond, style=filled]
  1767 [label="State 1767\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l841 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq attribute-specifier-seq •\l"]
  1767 -> 4 [style=solid label="ALIGNAS"]
  1767 -> 10 [style=solid label="OPEN_SQUARE"]
  1767 -> 57 [style=dashed label="alignment-specifier"]
  1767 -> 260 [style=dashed label="attribute-specifier"]
  1767 -> "1767R841d" [label="[OPEN_SQUARE]", style=solid]
 "1767R841d" [label="R841", fillcolor=5, shape=diamond, style=filled]
  1767 -> "1767R841" [style=solid]
 "1767R841" [label="R841", fillcolor=3, shape=diamond, style=filled]
  1768 [label="State 1768\n\l837 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq noexcept-specifier •\l845                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq noexcept-specifier • attribute-specifier-seq\l"]
  1768 -> 4 [style=solid label="ALIGNAS"]
  1768 -> 10 [style=solid label="OPEN_SQUARE"]
  1768 -> 57 [style=dashed label="alignment-specifier"]
  1768 -> 60 [style=dashed label="attribute-specifier"]
  1768 -> 1875 [style=dashed label="attribute-specifier-seq"]
  1768 -> "1768R837d" [label="[OPEN_SQUARE]", style=solid]
 "1768R837d" [label="R837", fillcolor=5, shape=diamond, style=filled]
  1768 -> "1768R837" [style=solid]
 "1768R837" [label="R837", fillcolor=3, shape=diamond, style=filled]
  1769 [label="State 1769\n\l835 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier •\l839                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier • noexcept-specifier\l843                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier • attribute-specifier-seq\l847                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier • noexcept-specifier attribute-specifier-seq\l"]
  1769 -> 4 [style=solid label="ALIGNAS"]
  1769 -> 10 [style=solid label="OPEN_SQUARE"]
  1769 -> 894 [style=solid label="NOEXCEPT"]
  1769 -> 57 [style=dashed label="alignment-specifier"]
  1769 -> 60 [style=dashed label="attribute-specifier"]
  1769 -> 1876 [style=dashed label="attribute-specifier-seq"]
  1769 -> 1877 [style=dashed label="noexcept-specifier"]
  1769 -> "1769R835d" [label="[OPEN_SQUARE]", style=solid]
 "1769R835d" [label="R835", fillcolor=5, shape=diamond, style=filled]
  1769 -> "1769R835" [style=solid]
 "1769R835" [label="R835", fillcolor=3, shape=diamond, style=filled]
  1770 [label="State 1770\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l844 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN noexcept-specifier attribute-specifier-seq •\l"]
  1770 -> 4 [style=solid label="ALIGNAS"]
  1770 -> 10 [style=solid label="OPEN_SQUARE"]
  1770 -> 57 [style=dashed label="alignment-specifier"]
  1770 -> 260 [style=dashed label="attribute-specifier"]
  1770 -> "1770R844d" [label="[OPEN_SQUARE]", style=solid]
 "1770R844d" [label="R844", fillcolor=5, shape=diamond, style=filled]
  1770 -> "1770R844" [style=solid]
 "1770R844" [label="R844", fillcolor=3, shape=diamond, style=filled]
  1771 [label="State 1771\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l842 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN ref-qualifier attribute-specifier-seq •\l"]
  1771 -> 4 [style=solid label="ALIGNAS"]
  1771 -> 10 [style=solid label="OPEN_SQUARE"]
  1771 -> 57 [style=dashed label="alignment-specifier"]
  1771 -> 260 [style=dashed label="attribute-specifier"]
  1771 -> "1771R842d" [label="[OPEN_SQUARE]", style=solid]
 "1771R842d" [label="R842", fillcolor=5, shape=diamond, style=filled]
  1771 -> "1771R842" [style=solid]
 "1771R842" [label="R842", fillcolor=3, shape=diamond, style=filled]
  1772 [label="State 1772\n\l838 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN ref-qualifier noexcept-specifier •\l846                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN ref-qualifier noexcept-specifier • attribute-specifier-seq\l"]
  1772 -> 4 [style=solid label="ALIGNAS"]
  1772 -> 10 [style=solid label="OPEN_SQUARE"]
  1772 -> 57 [style=dashed label="alignment-specifier"]
  1772 -> 60 [style=dashed label="attribute-specifier"]
  1772 -> 1878 [style=dashed label="attribute-specifier-seq"]
  1772 -> "1772R838d" [label="[OPEN_SQUARE]", style=solid]
 "1772R838d" [label="R838", fillcolor=5, shape=diamond, style=filled]
  1772 -> "1772R838" [style=solid]
 "1772R838" [label="R838", fillcolor=3, shape=diamond, style=filled]
  1773 [label="State 1773\n\l162 concept-definition: CONCEPT concept-name EQ constraint-expression SEMICOLON •\l"]
  1773 -> "1773R162" [style=solid]
 "1773R162" [label="R162", fillcolor=3, shape=diamond, style=filled]
  1774 [label="State 1774\n\l232 deduction-guide: template-name OPEN_PAREN parameter-declaration-clause CLOSE_PAREN DEREF simple-template-id • SEMICOLON\l"]
  1774 -> 1879 [style=solid label="SEMICOLON"]
  1775 [label="State 1775\n\l346 fold-expression: OPEN_PAREN ELLIPSIS fold-operator cast-expression CLOSE_PAREN •\l"]
  1775 -> "1775R346" [style=solid]
 "1775R346" [label="R346", fillcolor=3, shape=diamond, style=filled]
  1776 [label="State 1776\n\l345 fold-expression: OPEN_PAREN cast-expression fold-operator ELLIPSIS CLOSE_PAREN •\l"]
  1776 -> "1776R345" [style=solid]
 "1776R345" [label="R345", fillcolor=3, shape=diamond, style=filled]
  1777 [label="State 1777\n\l347 fold-expression: OPEN_PAREN cast-expression fold-operator ELLIPSIS fold-operator • cast-expression CLOSE_PAREN\l"]
  1777 -> 356 [style=solid label="PLUS"]
  1777 -> 357 [style=solid label="MINUS"]
  1777 -> 2 [style=solid label="IDENTIFIER"]
  1777 -> 358 [style=solid label="OPEN_PAREN"]
  1777 -> 359 [style=solid label="AND"]
  1777 -> 360 [style=solid label="SCOPE"]
  1777 -> 361 [style=solid label="OPEN_SQUARE"]
  1777 -> 362 [style=solid label="CO_AWAIT"]
  1777 -> 363 [style=solid label="ZERO_LB"]
  1777 -> 364 [style=solid label="ZERO_HB"]
  1777 -> 365 [style=solid label="SINGLE_QUOTE"]
  1777 -> 366 [style=solid label="FALSE"]
  1777 -> 367 [style=solid label="TRUE"]
  1777 -> 368 [style=solid label="NOEXCEPT"]
  1777 -> 17 [style=solid label="OPERATOR"]
  1777 -> 26 [style=solid label="DECLTYPE"]
  1777 -> 369 [style=solid label="DELETE"]
  1777 -> 370 [style=solid label="DOT"]
  1777 -> 184 [style=solid label="UNICODE_8"]
  1777 -> 371 [style=solid label="MULT"]
  1777 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1777 -> 372 [style=solid label="ZERO_LX"]
  1777 -> 373 [style=solid label="ZERO_HX"]
  1777 -> 374 [style=solid label="REQUIRES"]
  1777 -> 375 [style=solid label="NEW"]
  1777 -> 376 [style=solid label="COMPL"]
  1777 -> 377 [style=solid label="NOT"]
  1777 -> 378 [style=solid label="PLUS_PLUS"]
  1777 -> 379 [style=solid label="MINUS_MINUS"]
  1777 -> 380 [style=solid label="THIS"]
  1777 -> 36 [style=solid label="AUTO"]
  1777 -> 381 [style=solid label="NULLPTR"]
  1777 -> 382 [style=solid label="DYNAMIC_CAST"]
  1777 -> 383 [style=solid label="STATIC_CAST"]
  1777 -> 384 [style=solid label="REINTERPRET_CAST"]
  1777 -> 385 [style=solid label="CONST_CAST"]
  1777 -> 386 [style=solid label="TYPEID"]
  1777 -> 37 [style=solid label="CHAR"]
  1777 -> 38 [style=solid label="CHAR8_T"]
  1777 -> 39 [style=solid label="CHAR16_T"]
  1777 -> 40 [style=solid label="CHAR32_T"]
  1777 -> 41 [style=solid label="WCHAR_T"]
  1777 -> 42 [style=solid label="BOOL"]
  1777 -> 43 [style=solid label="SHORT"]
  1777 -> 44 [style=solid label="INT"]
  1777 -> 45 [style=solid label="LONG"]
  1777 -> 46 [style=solid label="SIGNED"]
  1777 -> 47 [style=solid label="UNSIGNED"]
  1777 -> 48 [style=solid label="FLOAT"]
  1777 -> 49 [style=solid label="DOUBLE"]
  1777 -> 50 [style=solid label="VOID"]
  1777 -> 55 [style=solid label="TYPENAME"]
  1777 -> 387 [style=solid label="SIZEOF"]
  1777 -> 388 [style=solid label="ALIGNOF"]
  1777 -> 389 [style=solid label="'0'"]
  1777 -> 390 [style=solid label="'1'"]
  1777 -> 391 [style=solid label="'2'"]
  1777 -> 392 [style=solid label="'3'"]
  1777 -> 393 [style=solid label="'4'"]
  1777 -> 394 [style=solid label="'5'"]
  1777 -> 395 [style=solid label="'6'"]
  1777 -> 396 [style=solid label="'7'"]
  1777 -> 397 [style=solid label="'8'"]
  1777 -> 398 [style=solid label="'9'"]
  1777 -> 205 [style=solid label="'u'"]
  1777 -> 206 [style=solid label="'U'"]
  1777 -> 207 [style=solid label="'L'"]
  1777 -> 208 [style=solid label="'R'"]
  1777 -> 401 [style=dashed label="await-expression"]
  1777 -> 402 [style=dashed label="binary-literal"]
  1777 -> 403 [style=dashed label="boolean-literal"]
  1777 -> 1880 [style=dashed label="cast-expression"]
  1777 -> 405 [style=dashed label="character-literal"]
  1777 -> 65 [style=dashed label="class-name"]
  1777 -> 67 [style=dashed label="concept-name"]
  1777 -> 68 [style=dashed label="conversion-function-id"]
  1777 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1777 -> 410 [style=dashed label="decimal-literal"]
  1777 -> 76 [style=dashed label="decltype-specifier"]
  1777 -> 411 [style=dashed label="delete-expression"]
  1777 -> 412 [style=dashed label="digit"]
  1777 -> 413 [style=dashed label="digit-sequence"]
  1777 -> 414 [style=dashed label="encoding-prefix"]
  1777 -> 84 [style=dashed label="enum-name"]
  1777 -> 417 [style=dashed label="floating-point-literal"]
  1777 -> 418 [style=dashed label="fold-expression"]
  1777 -> 419 [style=dashed label="fractional-constant"]
  1777 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1777 -> 421 [style=dashed label="hexadecimal-literal"]
  1777 -> 422 [style=dashed label="hexadecimal-prefix"]
  1777 -> 423 [style=dashed label="id-expression"]
  1777 -> 425 [style=dashed label="integer-literal"]
  1777 -> 426 [style=dashed label="lambda-expression"]
  1777 -> 427 [style=dashed label="lambda-introducer"]
  1777 -> 428 [style=dashed label="literal"]
  1777 -> 95 [style=dashed label="literal-operator-id"]
  1777 -> 99 [style=dashed label="namespace-alias"]
  1777 -> 102 [style=dashed label="namespace-name"]
  1777 -> 432 [style=dashed label="nested-name-specifier"]
  1777 -> 433 [style=dashed label="new-expression"]
  1777 -> 434 [style=dashed label="noexcept-expression"]
  1777 -> 435 [style=dashed label="nonzero-digit"]
  1777 -> 436 [style=dashed label="octal-literal"]
  1777 -> 108 [style=dashed label="operator-function-id"]
  1777 -> 109 [style=dashed label="placeholder-type-specifier"]
  1777 -> 438 [style=dashed label="pointer-literal"]
  1777 -> 439 [style=dashed label="postfix-expression"]
  1777 -> 440 [style=dashed label="primary-expression"]
  1777 -> 112 [style=dashed label="qualified-id"]
  1777 -> 442 [style=dashed label="requires-expression"]
  1777 -> 114 [style=dashed label="simple-template-id"]
  1777 -> 529 [style=dashed label="simple-type-specifier"]
  1777 -> 445 [style=dashed label="string-literal"]
  1777 -> 120 [style=dashed label="template-id"]
  1777 -> 215 [style=dashed label="template-name"]
  1777 -> 123 [style=dashed label="type-constraint"]
  1777 -> 124 [style=dashed label="type-name"]
  1777 -> 126 [style=dashed label="typedef-name"]
  1777 -> 531 [style=dashed label="typename-specifier"]
  1777 -> 449 [style=dashed label="unary-expression"]
  1777 -> 450 [style=dashed label="unary-operator"]
  1777 -> 129 [style=dashed label="unqualified-id"]
  1777 -> 451 [style=dashed label="user-defined-character-literal"]
  1777 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1777 -> 453 [style=dashed label="user-defined-integer-literal"]
  1777 -> 454 [style=dashed label="user-defined-literal"]
  1777 -> 455 [style=dashed label="user-defined-string-literal"]
  1778 [label="State 1778\n\l243 delete-expression: SCOPE DELETE OPEN_SQUARE CLOSE_SQUARE cast-expression •\l"]
  1778 -> "1778R243" [style=solid]
 "1778R243" [label="R243", fillcolor=3, shape=diamond, style=filled]
  1779 [label="State 1779\n\l676 new-expression: SCOPE NEW OPEN_PAREN type-id CLOSE_PAREN •\l680               | SCOPE NEW OPEN_PAREN type-id CLOSE_PAREN • new-initializer\l"]
  1779 -> 1303 [style=solid label="OPEN_PAREN"]
  1779 -> 935 [style=solid label="OPEN_BRACE"]
  1779 -> 1304 [style=dashed label="braced-init-list"]
  1779 -> 1881 [style=dashed label="new-initializer"]
  1779 -> "1779R676d" [label="[OPEN_BRACE]", style=solid]
 "1779R676d" [label="R676", fillcolor=5, shape=diamond, style=filled]
  1779 -> "1779R676" [style=solid]
 "1779R676" [label="R676", fillcolor=3, shape=diamond, style=filled]
  1780 [label="State 1780\n\l678 new-expression: SCOPE NEW new-placement OPEN_PAREN type-id • CLOSE_PAREN\l682               | SCOPE NEW new-placement OPEN_PAREN type-id • CLOSE_PAREN new-initializer\l"]
  1780 -> 1882 [style=solid label="CLOSE_PAREN"]
  1781 [label="State 1781\n\l674 new-expression: SCOPE NEW new-placement new-type-id new-initializer •\l"]
  1781 -> "1781R674" [style=solid]
 "1781R674" [label="R674", fillcolor=3, shape=diamond, style=filled]
  1782 [label="State 1782\n\l468 init-capture: AND ELLIPSIS IDENTIFIER initializer •\l"]
  1782 -> "1782R468" [style=solid]
 "1782R468" [label="R468", fillcolor=3, shape=diamond, style=filled]
  1783 [label="State 1783\n\l156 compound-requirement: OPEN_BRACE expression CLOSE_BRACE • SEMICOLON\l157                     | OPEN_BRACE expression CLOSE_BRACE • NOEXCEPT SEMICOLON\l158                     | OPEN_BRACE expression CLOSE_BRACE • return-type-requirement SEMICOLON\l159                     | OPEN_BRACE expression CLOSE_BRACE • NOEXCEPT return-type-requirement SEMICOLON\l"]
  1783 -> 1883 [style=solid label="SEMICOLON"]
  1783 -> 1884 [style=solid label="NOEXCEPT"]
  1783 -> 1885 [style=solid label="DEREF"]
  1783 -> 1886 [style=dashed label="return-type-requirement"]
  1784 [label="State 1784\n\l346 fold-expression: OPEN_PAREN ELLIPSIS • fold-operator cast-expression CLOSE_PAREN\l828 parameter-declaration-clause: ELLIPSIS •\l"]
  1784 -> 1232 [style=solid label="PLUS"]
  1784 -> 1233 [style=solid label="MINUS"]
  1784 -> 1234 [style=solid label="EQ"]
  1784 -> 1235 [style=solid label="AND"]
  1784 -> 1236 [style=solid label="MULT_EQ"]
  1784 -> 1237 [style=solid label="DIV_EQ"]
  1784 -> 1238 [style=solid label="MOD_EQ"]
  1784 -> 1239 [style=solid label="PLUS_EQ"]
  1784 -> 1240 [style=solid label="MINUS_EQ"]
  1784 -> 1241 [style=solid label="RSHIFT_EQ"]
  1784 -> 1242 [style=solid label="LSHIFT_EQ"]
  1784 -> 1243 [style=solid label="AND_EQ"]
  1784 -> 1244 [style=solid label="XOR_EQ"]
  1784 -> 1245 [style=solid label="OR_EQ"]
  1784 -> 1246 [style=solid label="COMMA"]
  1784 -> 1247 [style=solid label="AND_AND"]
  1784 -> 1248 [style=solid label="OR_OR"]
  1784 -> 1249 [style=solid label="EQ_EQ"]
  1784 -> 1250 [style=solid label="NOT_EQ"]
  1784 -> 1251 [style=solid label="XOR"]
  1784 -> 1252 [style=solid label="LESS"]
  1784 -> 1253 [style=solid label="GREATER"]
  1784 -> 1254 [style=solid label="MULT"]
  1784 -> 1255 [style=solid label="DIV"]
  1784 -> 1256 [style=solid label="MOD"]
  1784 -> 1257 [style=solid label="OR"]
  1784 -> 1258 [style=solid label="LSHIFT"]
  1784 -> 1259 [style=solid label="RSHIFT"]
  1784 -> 1260 [style=solid label="LESS_EQ"]
  1784 -> 1261 [style=solid label="GREATER_EQ"]
  1784 -> 1262 [style=solid label="DOT_STAR"]
  1784 -> 1263 [style=solid label="DEREF_STAR"]
  1784 -> 1264 [style=dashed label="fold-operator"]
  1784 -> "1784R828" [style=solid]
 "1784R828" [label="R828", fillcolor=3, shape=diamond, style=filled]
  1785 [label="State 1785\n\l805 parameter-declaration: THIS • decl-specifier-seq declarator\l809                      | THIS • decl-specifier-seq declarator EQ initializer-clause\l813                      | THIS • decl-specifier-seq\l817                      | THIS • decl-specifier-seq abstract-declarator\l821                      | THIS • decl-specifier-seq EQ initializer-clause\l825                      | THIS • decl-specifier-seq abstract-declarator EQ initializer-clause\l880 primary-expression: THIS •\l"]
  1785 -> 162 [style=solid label="IDENTIFIER"]
  1785 -> 9 [style=solid label="SCOPE"]
  1785 -> 11 [style=solid label="VIRTUAL"]
  1785 -> 12 [style=solid label="CLASS"]
  1785 -> 13 [style=solid label="STRUCT"]
  1785 -> 14 [style=solid label="UNION"]
  1785 -> 18 [style=solid label="CONST"]
  1785 -> 19 [style=solid label="VOLATILE"]
  1785 -> 20 [style=solid label="FRIEND"]
  1785 -> 21 [style=solid label="TYPEDEF"]
  1785 -> 22 [style=solid label="CONSTEXPR"]
  1785 -> 23 [style=solid label="CONSTEVAL"]
  1785 -> 24 [style=solid label="CONSTINIT"]
  1785 -> 258 [style=solid label="INLINE"]
  1785 -> 26 [style=solid label="DECLTYPE"]
  1785 -> 27 [style=solid label="ENUM"]
  1785 -> 259 [style=solid label="EXTERN"]
  1785 -> 29 [style=solid label="EXPLICIT"]
  1785 -> 36 [style=solid label="AUTO"]
  1785 -> 37 [style=solid label="CHAR"]
  1785 -> 38 [style=solid label="CHAR8_T"]
  1785 -> 39 [style=solid label="CHAR16_T"]
  1785 -> 40 [style=solid label="CHAR32_T"]
  1785 -> 41 [style=solid label="WCHAR_T"]
  1785 -> 42 [style=solid label="BOOL"]
  1785 -> 43 [style=solid label="SHORT"]
  1785 -> 44 [style=solid label="INT"]
  1785 -> 45 [style=solid label="LONG"]
  1785 -> 46 [style=solid label="SIGNED"]
  1785 -> 47 [style=solid label="UNSIGNED"]
  1785 -> 48 [style=solid label="FLOAT"]
  1785 -> 49 [style=solid label="DOUBLE"]
  1785 -> 50 [style=solid label="VOID"]
  1785 -> 52 [style=solid label="STATIC"]
  1785 -> 53 [style=solid label="THREAD_LOCAL"]
  1785 -> 54 [style=solid label="MUTABLE"]
  1785 -> 55 [style=solid label="TYPENAME"]
  1785 -> 63 [style=dashed label="class-head"]
  1785 -> 64 [style=dashed label="class-key"]
  1785 -> 65 [style=dashed label="class-name"]
  1785 -> 66 [style=dashed label="class-specifier"]
  1785 -> 67 [style=dashed label="concept-name"]
  1785 -> 69 [style=dashed label="cv-qualifier"]
  1785 -> 70 [style=dashed label="decl-specifier"]
  1785 -> 965 [style=dashed label="decl-specifier-seq"]
  1785 -> 76 [style=dashed label="decltype-specifier"]
  1785 -> 78 [style=dashed label="defining-type-specifier"]
  1785 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1785 -> 80 [style=dashed label="elaborated-type-specifier"]
  1785 -> 82 [style=dashed label="enum-head"]
  1785 -> 263 [style=dashed label="enum-key"]
  1785 -> 84 [style=dashed label="enum-name"]
  1785 -> 85 [style=dashed label="enum-specifier"]
  1785 -> 264 [style=dashed label="explicit-specifier"]
  1785 -> 91 [style=dashed label="function-specifier"]
  1785 -> 99 [style=dashed label="namespace-alias"]
  1785 -> 102 [style=dashed label="namespace-name"]
  1785 -> 212 [style=dashed label="nested-name-specifier"]
  1785 -> 109 [style=dashed label="placeholder-type-specifier"]
  1785 -> 141 [style=dashed label="simple-template-id"]
  1785 -> 115 [style=dashed label="simple-type-specifier"]
  1785 -> 117 [style=dashed label="storage-class-specifier"]
  1785 -> 215 [style=dashed label="template-name"]
  1785 -> 123 [style=dashed label="type-constraint"]
  1785 -> 124 [style=dashed label="type-name"]
  1785 -> 125 [style=dashed label="type-specifier"]
  1785 -> 126 [style=dashed label="typedef-name"]
  1785 -> 127 [style=dashed label="typename-specifier"]
  1785 -> "1785R880" [style=solid]
 "1785R880" [label="R880", fillcolor=3, shape=diamond, style=filled]
  1786 [label="State 1786\n\l235 defining-type-specifier: type-specifier •\l1107 type-specifier-seq: type-specifier •\l1108                   | type-specifier • attribute-specifier-seq\l1109                   | type-specifier • type-specifier-seq\l"]
  1786 -> 162 [style=solid label="IDENTIFIER"]
  1786 -> 4 [style=solid label="ALIGNAS"]
  1786 -> 9 [style=solid label="SCOPE"]
  1786 -> 10 [style=solid label="OPEN_SQUARE"]
  1786 -> 12 [style=solid label="CLASS"]
  1786 -> 13 [style=solid label="STRUCT"]
  1786 -> 14 [style=solid label="UNION"]
  1786 -> 18 [style=solid label="CONST"]
  1786 -> 19 [style=solid label="VOLATILE"]
  1786 -> 26 [style=solid label="DECLTYPE"]
  1786 -> 135 [style=solid label="ENUM"]
  1786 -> 36 [style=solid label="AUTO"]
  1786 -> 37 [style=solid label="CHAR"]
  1786 -> 38 [style=solid label="CHAR8_T"]
  1786 -> 39 [style=solid label="CHAR16_T"]
  1786 -> 40 [style=solid label="CHAR32_T"]
  1786 -> 41 [style=solid label="WCHAR_T"]
  1786 -> 42 [style=solid label="BOOL"]
  1786 -> 43 [style=solid label="SHORT"]
  1786 -> 44 [style=solid label="INT"]
  1786 -> 45 [style=solid label="LONG"]
  1786 -> 46 [style=solid label="SIGNED"]
  1786 -> 47 [style=solid label="UNSIGNED"]
  1786 -> 48 [style=solid label="FLOAT"]
  1786 -> 49 [style=solid label="DOUBLE"]
  1786 -> 50 [style=solid label="VOID"]
  1786 -> 55 [style=solid label="TYPENAME"]
  1786 -> 57 [style=dashed label="alignment-specifier"]
  1786 -> 60 [style=dashed label="attribute-specifier"]
  1786 -> 514 [style=dashed label="attribute-specifier-seq"]
  1786 -> 209 [style=dashed label="class-key"]
  1786 -> 65 [style=dashed label="class-name"]
  1786 -> 67 [style=dashed label="concept-name"]
  1786 -> 69 [style=dashed label="cv-qualifier"]
  1786 -> 76 [style=dashed label="decltype-specifier"]
  1786 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1786 -> 80 [style=dashed label="elaborated-type-specifier"]
  1786 -> 84 [style=dashed label="enum-name"]
  1786 -> 99 [style=dashed label="namespace-alias"]
  1786 -> 102 [style=dashed label="namespace-name"]
  1786 -> 212 [style=dashed label="nested-name-specifier"]
  1786 -> 109 [style=dashed label="placeholder-type-specifier"]
  1786 -> 141 [style=dashed label="simple-template-id"]
  1786 -> 115 [style=dashed label="simple-type-specifier"]
  1786 -> 215 [style=dashed label="template-name"]
  1786 -> 123 [style=dashed label="type-constraint"]
  1786 -> 124 [style=dashed label="type-name"]
  1786 -> 216 [style=dashed label="type-specifier"]
  1786 -> 515 [style=dashed label="type-specifier-seq"]
  1786 -> 126 [style=dashed label="typedef-name"]
  1786 -> 127 [style=dashed label="typename-specifier"]
  1786 -> "1786R235d" [label="[IDENTIFIER, ALIGNAS, SCOPE, OPEN_SQUARE, CLASS, STRUCT, UNION, CONST, VOLATILE, DECLTYPE, ENUM, AUTO, CHAR, CHAR8_T, CHAR16_T, CHAR32_T, WCHAR_T, BOOL, SHORT, INT, LONG, SIGNED, UNSIGNED, FLOAT, DOUBLE, VOID, TYPENAME]", style=solid]
 "1786R235d" [label="R235", fillcolor=5, shape=diamond, style=filled]
  1786 -> "1786R235" [style=solid]
 "1786R235" [label="R235", fillcolor=3, shape=diamond, style=filled]
  1786 -> "1786R1107d" [label="[IDENTIFIER, OPEN_PAREN, CLOSE_PAREN, ELLIPSIS, AND, SCOPE, OPEN_SQUARE, AND_AND, DECLTYPE, MULT]", style=solid]
 "1786R1107d" [label="R1107", fillcolor=5, shape=diamond, style=filled]
  1787 [label="State 1787\n\l664 nested-requirement: REQUIRES constraint-expression SEMICOLON •\l"]
  1787 -> "1787R664" [style=solid]
 "1787R664" [label="R664", fillcolor=3, shape=diamond, style=filled]
  1788 [label="State 1788\n\l145 class-name: IDENTIFIER •\l294 enum-name: IDENTIFIER •\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l1110 typedef-name: IDENTIFIER •\l1112 typename-specifier: TYPENAME nested-name-specifier IDENTIFIER •\l"]
  1788 -> 722 [style=solid label="SCOPE"]
  1788 -> "1788R145" [label="[SEMICOLON]", style=solid]
 "1788R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  1788 -> "1788R294d" [label="[SEMICOLON]", style=solid]
 "1788R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  1788 -> "1788R1052" [label="[LESS]", style=solid]
 "1788R1052" [label="R1052", fillcolor=3, shape=diamond, style=filled]
  1788 -> "1788R1110d" [label="[SEMICOLON]", style=solid]
 "1788R1110d" [label="R1110", fillcolor=5, shape=diamond, style=filled]
  1788 -> "1788R1112" [label="[]", style=solid]
 "1788R1112" [label="R1112", fillcolor=3, shape=diamond, style=filled]
  1789 [label="State 1789\n\l146 class-name: simple-template-id •\l660 nested-name-specifier: nested-name-specifier simple-template-id • SCOPE\l1111 typedef-name: simple-template-id •\l1113 typename-specifier: TYPENAME nested-name-specifier simple-template-id •\l"]
  1789 -> 729 [style=solid label="SCOPE"]
  1789 -> "1789R146" [label="[SEMICOLON]", style=solid]
 "1789R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  1789 -> "1789R1111d" [label="[SEMICOLON]", style=solid]
 "1789R1111d" [label="R1111", fillcolor=5, shape=diamond, style=filled]
  1789 -> "1789R1113" [label="[]", style=solid]
 "1789R1113" [label="R1113", fillcolor=3, shape=diamond, style=filled]
  1790 [label="State 1790\n\l1102 type-requirement: TYPENAME nested-name-specifier type-name • SEMICOLON\l"]
  1790 -> 1887 [style=solid label="SEMICOLON"]
  1791 [label="State 1791\n\l1101 type-requirement: TYPENAME type-name SEMICOLON •\l"]
  1791 -> "1791R1101" [style=solid]
 "1791R1101" [label="R1101", fillcolor=3, shape=diamond, style=filled]
  1792 [label="State 1792\n\l681 new-expression: NEW OPEN_PAREN type-id CLOSE_PAREN new-initializer •\l"]
  1792 -> "1792R681" [style=solid]
 "1792R681" [label="R681", fillcolor=3, shape=diamond, style=filled]
  1793 [label="State 1793\n\l679 new-expression: NEW new-placement OPEN_PAREN type-id CLOSE_PAREN •\l683               | NEW new-placement OPEN_PAREN type-id CLOSE_PAREN • new-initializer\l"]
  1793 -> 1303 [style=solid label="OPEN_PAREN"]
  1793 -> 935 [style=solid label="OPEN_BRACE"]
  1793 -> 1304 [style=dashed label="braced-init-list"]
  1793 -> 1888 [style=dashed label="new-initializer"]
  1793 -> "1793R679d" [label="[OPEN_BRACE]", style=solid]
 "1793R679d" [label="R679", fillcolor=5, shape=diamond, style=filled]
  1793 -> "1793R679" [style=solid]
 "1793R679" [label="R679", fillcolor=3, shape=diamond, style=filled]
  1794 [label="State 1794\n\l685 new-initializer: OPEN_PAREN expression-list CLOSE_PAREN •\l"]
  1794 -> "1794R685" [style=solid]
 "1794R685" [label="R685", fillcolor=3, shape=diamond, style=filled]
  1795 [label="State 1795\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l731 noptr-new-declarator: OPEN_SQUARE CLOSE_SQUARE attribute-specifier-seq •\l"]
  1795 -> 4 [style=solid label="ALIGNAS"]
  1795 -> 10 [style=solid label="OPEN_SQUARE"]
  1795 -> 57 [style=dashed label="alignment-specifier"]
  1795 -> 260 [style=dashed label="attribute-specifier"]
  1795 -> "1795R731d" [label="[OPEN_SQUARE]", style=solid]
 "1795R731d" [label="R731", fillcolor=5, shape=diamond, style=filled]
  1795 -> "1795R731" [style=solid]
 "1795R731" [label="R731", fillcolor=3, shape=diamond, style=filled]
  1796 [label="State 1796\n\l730 noptr-new-declarator: OPEN_SQUARE expression CLOSE_SQUARE •\l732                     | OPEN_SQUARE expression CLOSE_SQUARE • attribute-specifier-seq\l"]
  1796 -> 4 [style=solid label="ALIGNAS"]
  1796 -> 10 [style=solid label="OPEN_SQUARE"]
  1796 -> 57 [style=dashed label="alignment-specifier"]
  1796 -> 60 [style=dashed label="attribute-specifier"]
  1796 -> 1889 [style=dashed label="attribute-specifier-seq"]
  1796 -> "1796R730d" [label="[OPEN_SQUARE]", style=solid]
 "1796R730d" [label="R730", fillcolor=5, shape=diamond, style=filled]
  1796 -> "1796R730" [style=solid]
 "1796R730" [label="R730", fillcolor=3, shape=diamond, style=filled]
  1797 [label="State 1797\n\l733 noptr-new-declarator: noptr-new-declarator OPEN_SQUARE constant-expression • CLOSE_SQUARE\l734                     | noptr-new-declarator OPEN_SQUARE constant-expression • CLOSE_SQUARE attribute-specifier-seq\l"]
  1797 -> 1890 [style=solid label="CLOSE_SQUARE"]
  1798 [label="State 1798\n\l873 postfix-expression: DYNAMIC_CAST LESS type-id GREATER OPEN_PAREN • expression CLOSE_PAREN\l"]
  1798 -> 356 [style=solid label="PLUS"]
  1798 -> 357 [style=solid label="MINUS"]
  1798 -> 2 [style=solid label="IDENTIFIER"]
  1798 -> 358 [style=solid label="OPEN_PAREN"]
  1798 -> 359 [style=solid label="AND"]
  1798 -> 360 [style=solid label="SCOPE"]
  1798 -> 361 [style=solid label="OPEN_SQUARE"]
  1798 -> 362 [style=solid label="CO_AWAIT"]
  1798 -> 363 [style=solid label="ZERO_LB"]
  1798 -> 364 [style=solid label="ZERO_HB"]
  1798 -> 365 [style=solid label="SINGLE_QUOTE"]
  1798 -> 366 [style=solid label="FALSE"]
  1798 -> 367 [style=solid label="TRUE"]
  1798 -> 368 [style=solid label="NOEXCEPT"]
  1798 -> 17 [style=solid label="OPERATOR"]
  1798 -> 26 [style=solid label="DECLTYPE"]
  1798 -> 369 [style=solid label="DELETE"]
  1798 -> 370 [style=solid label="DOT"]
  1798 -> 184 [style=solid label="UNICODE_8"]
  1798 -> 371 [style=solid label="MULT"]
  1798 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1798 -> 372 [style=solid label="ZERO_LX"]
  1798 -> 373 [style=solid label="ZERO_HX"]
  1798 -> 374 [style=solid label="REQUIRES"]
  1798 -> 375 [style=solid label="NEW"]
  1798 -> 376 [style=solid label="COMPL"]
  1798 -> 377 [style=solid label="NOT"]
  1798 -> 378 [style=solid label="PLUS_PLUS"]
  1798 -> 379 [style=solid label="MINUS_MINUS"]
  1798 -> 380 [style=solid label="THIS"]
  1798 -> 36 [style=solid label="AUTO"]
  1798 -> 381 [style=solid label="NULLPTR"]
  1798 -> 382 [style=solid label="DYNAMIC_CAST"]
  1798 -> 383 [style=solid label="STATIC_CAST"]
  1798 -> 384 [style=solid label="REINTERPRET_CAST"]
  1798 -> 385 [style=solid label="CONST_CAST"]
  1798 -> 386 [style=solid label="TYPEID"]
  1798 -> 37 [style=solid label="CHAR"]
  1798 -> 38 [style=solid label="CHAR8_T"]
  1798 -> 39 [style=solid label="CHAR16_T"]
  1798 -> 40 [style=solid label="CHAR32_T"]
  1798 -> 41 [style=solid label="WCHAR_T"]
  1798 -> 42 [style=solid label="BOOL"]
  1798 -> 43 [style=solid label="SHORT"]
  1798 -> 44 [style=solid label="INT"]
  1798 -> 45 [style=solid label="LONG"]
  1798 -> 46 [style=solid label="SIGNED"]
  1798 -> 47 [style=solid label="UNSIGNED"]
  1798 -> 48 [style=solid label="FLOAT"]
  1798 -> 49 [style=solid label="DOUBLE"]
  1798 -> 50 [style=solid label="VOID"]
  1798 -> 523 [style=solid label="THROW"]
  1798 -> 55 [style=solid label="TYPENAME"]
  1798 -> 387 [style=solid label="SIZEOF"]
  1798 -> 388 [style=solid label="ALIGNOF"]
  1798 -> 524 [style=solid label="CO_YIELD"]
  1798 -> 389 [style=solid label="'0'"]
  1798 -> 390 [style=solid label="'1'"]
  1798 -> 391 [style=solid label="'2'"]
  1798 -> 392 [style=solid label="'3'"]
  1798 -> 393 [style=solid label="'4'"]
  1798 -> 394 [style=solid label="'5'"]
  1798 -> 395 [style=solid label="'6'"]
  1798 -> 396 [style=solid label="'7'"]
  1798 -> 397 [style=solid label="'8'"]
  1798 -> 398 [style=solid label="'9'"]
  1798 -> 205 [style=solid label="'u'"]
  1798 -> 206 [style=solid label="'U'"]
  1798 -> 207 [style=solid label="'L'"]
  1798 -> 208 [style=solid label="'R'"]
  1798 -> 399 [style=dashed label="additive-expression"]
  1798 -> 400 [style=dashed label="and-expression"]
  1798 -> 525 [style=dashed label="assignment-expression"]
  1798 -> 401 [style=dashed label="await-expression"]
  1798 -> 402 [style=dashed label="binary-literal"]
  1798 -> 403 [style=dashed label="boolean-literal"]
  1798 -> 404 [style=dashed label="cast-expression"]
  1798 -> 405 [style=dashed label="character-literal"]
  1798 -> 65 [style=dashed label="class-name"]
  1798 -> 406 [style=dashed label="compare-expression"]
  1798 -> 67 [style=dashed label="concept-name"]
  1798 -> 526 [style=dashed label="conditional-expression"]
  1798 -> 68 [style=dashed label="conversion-function-id"]
  1798 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1798 -> 410 [style=dashed label="decimal-literal"]
  1798 -> 76 [style=dashed label="decltype-specifier"]
  1798 -> 411 [style=dashed label="delete-expression"]
  1798 -> 412 [style=dashed label="digit"]
  1798 -> 413 [style=dashed label="digit-sequence"]
  1798 -> 414 [style=dashed label="encoding-prefix"]
  1798 -> 84 [style=dashed label="enum-name"]
  1798 -> 415 [style=dashed label="equality-expression"]
  1798 -> 416 [style=dashed label="exclusive-or-expression"]
  1798 -> 1891 [style=dashed label="expression"]
  1798 -> 417 [style=dashed label="floating-point-literal"]
  1798 -> 418 [style=dashed label="fold-expression"]
  1798 -> 419 [style=dashed label="fractional-constant"]
  1798 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1798 -> 421 [style=dashed label="hexadecimal-literal"]
  1798 -> 422 [style=dashed label="hexadecimal-prefix"]
  1798 -> 423 [style=dashed label="id-expression"]
  1798 -> 424 [style=dashed label="inclusive-or-expression"]
  1798 -> 425 [style=dashed label="integer-literal"]
  1798 -> 426 [style=dashed label="lambda-expression"]
  1798 -> 427 [style=dashed label="lambda-introducer"]
  1798 -> 428 [style=dashed label="literal"]
  1798 -> 95 [style=dashed label="literal-operator-id"]
  1798 -> 429 [style=dashed label="logical-and-expression"]
  1798 -> 528 [style=dashed label="logical-or-expression"]
  1798 -> 431 [style=dashed label="multiplicative-expression"]
  1798 -> 99 [style=dashed label="namespace-alias"]
  1798 -> 102 [style=dashed label="namespace-name"]
  1798 -> 432 [style=dashed label="nested-name-specifier"]
  1798 -> 433 [style=dashed label="new-expression"]
  1798 -> 434 [style=dashed label="noexcept-expression"]
  1798 -> 435 [style=dashed label="nonzero-digit"]
  1798 -> 436 [style=dashed label="octal-literal"]
  1798 -> 108 [style=dashed label="operator-function-id"]
  1798 -> 109 [style=dashed label="placeholder-type-specifier"]
  1798 -> 437 [style=dashed label="pm-expression"]
  1798 -> 438 [style=dashed label="pointer-literal"]
  1798 -> 439 [style=dashed label="postfix-expression"]
  1798 -> 440 [style=dashed label="primary-expression"]
  1798 -> 112 [style=dashed label="qualified-id"]
  1798 -> 441 [style=dashed label="relational-expression"]
  1798 -> 442 [style=dashed label="requires-expression"]
  1798 -> 443 [style=dashed label="shift-expression"]
  1798 -> 114 [style=dashed label="simple-template-id"]
  1798 -> 529 [style=dashed label="simple-type-specifier"]
  1798 -> 445 [style=dashed label="string-literal"]
  1798 -> 120 [style=dashed label="template-id"]
  1798 -> 215 [style=dashed label="template-name"]
  1798 -> 530 [style=dashed label="throw-expression"]
  1798 -> 123 [style=dashed label="type-constraint"]
  1798 -> 124 [style=dashed label="type-name"]
  1798 -> 126 [style=dashed label="typedef-name"]
  1798 -> 531 [style=dashed label="typename-specifier"]
  1798 -> 449 [style=dashed label="unary-expression"]
  1798 -> 450 [style=dashed label="unary-operator"]
  1798 -> 129 [style=dashed label="unqualified-id"]
  1798 -> 451 [style=dashed label="user-defined-character-literal"]
  1798 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1798 -> 453 [style=dashed label="user-defined-integer-literal"]
  1798 -> 454 [style=dashed label="user-defined-literal"]
  1798 -> 455 [style=dashed label="user-defined-string-literal"]
  1798 -> 532 [style=dashed label="yield-expression"]
  1799 [label="State 1799\n\l874 postfix-expression: STATIC_CAST LESS type-id GREATER OPEN_PAREN • expression CLOSE_PAREN\l"]
  1799 -> 356 [style=solid label="PLUS"]
  1799 -> 357 [style=solid label="MINUS"]
  1799 -> 2 [style=solid label="IDENTIFIER"]
  1799 -> 358 [style=solid label="OPEN_PAREN"]
  1799 -> 359 [style=solid label="AND"]
  1799 -> 360 [style=solid label="SCOPE"]
  1799 -> 361 [style=solid label="OPEN_SQUARE"]
  1799 -> 362 [style=solid label="CO_AWAIT"]
  1799 -> 363 [style=solid label="ZERO_LB"]
  1799 -> 364 [style=solid label="ZERO_HB"]
  1799 -> 365 [style=solid label="SINGLE_QUOTE"]
  1799 -> 366 [style=solid label="FALSE"]
  1799 -> 367 [style=solid label="TRUE"]
  1799 -> 368 [style=solid label="NOEXCEPT"]
  1799 -> 17 [style=solid label="OPERATOR"]
  1799 -> 26 [style=solid label="DECLTYPE"]
  1799 -> 369 [style=solid label="DELETE"]
  1799 -> 370 [style=solid label="DOT"]
  1799 -> 184 [style=solid label="UNICODE_8"]
  1799 -> 371 [style=solid label="MULT"]
  1799 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1799 -> 372 [style=solid label="ZERO_LX"]
  1799 -> 373 [style=solid label="ZERO_HX"]
  1799 -> 374 [style=solid label="REQUIRES"]
  1799 -> 375 [style=solid label="NEW"]
  1799 -> 376 [style=solid label="COMPL"]
  1799 -> 377 [style=solid label="NOT"]
  1799 -> 378 [style=solid label="PLUS_PLUS"]
  1799 -> 379 [style=solid label="MINUS_MINUS"]
  1799 -> 380 [style=solid label="THIS"]
  1799 -> 36 [style=solid label="AUTO"]
  1799 -> 381 [style=solid label="NULLPTR"]
  1799 -> 382 [style=solid label="DYNAMIC_CAST"]
  1799 -> 383 [style=solid label="STATIC_CAST"]
  1799 -> 384 [style=solid label="REINTERPRET_CAST"]
  1799 -> 385 [style=solid label="CONST_CAST"]
  1799 -> 386 [style=solid label="TYPEID"]
  1799 -> 37 [style=solid label="CHAR"]
  1799 -> 38 [style=solid label="CHAR8_T"]
  1799 -> 39 [style=solid label="CHAR16_T"]
  1799 -> 40 [style=solid label="CHAR32_T"]
  1799 -> 41 [style=solid label="WCHAR_T"]
  1799 -> 42 [style=solid label="BOOL"]
  1799 -> 43 [style=solid label="SHORT"]
  1799 -> 44 [style=solid label="INT"]
  1799 -> 45 [style=solid label="LONG"]
  1799 -> 46 [style=solid label="SIGNED"]
  1799 -> 47 [style=solid label="UNSIGNED"]
  1799 -> 48 [style=solid label="FLOAT"]
  1799 -> 49 [style=solid label="DOUBLE"]
  1799 -> 50 [style=solid label="VOID"]
  1799 -> 523 [style=solid label="THROW"]
  1799 -> 55 [style=solid label="TYPENAME"]
  1799 -> 387 [style=solid label="SIZEOF"]
  1799 -> 388 [style=solid label="ALIGNOF"]
  1799 -> 524 [style=solid label="CO_YIELD"]
  1799 -> 389 [style=solid label="'0'"]
  1799 -> 390 [style=solid label="'1'"]
  1799 -> 391 [style=solid label="'2'"]
  1799 -> 392 [style=solid label="'3'"]
  1799 -> 393 [style=solid label="'4'"]
  1799 -> 394 [style=solid label="'5'"]
  1799 -> 395 [style=solid label="'6'"]
  1799 -> 396 [style=solid label="'7'"]
  1799 -> 397 [style=solid label="'8'"]
  1799 -> 398 [style=solid label="'9'"]
  1799 -> 205 [style=solid label="'u'"]
  1799 -> 206 [style=solid label="'U'"]
  1799 -> 207 [style=solid label="'L'"]
  1799 -> 208 [style=solid label="'R'"]
  1799 -> 399 [style=dashed label="additive-expression"]
  1799 -> 400 [style=dashed label="and-expression"]
  1799 -> 525 [style=dashed label="assignment-expression"]
  1799 -> 401 [style=dashed label="await-expression"]
  1799 -> 402 [style=dashed label="binary-literal"]
  1799 -> 403 [style=dashed label="boolean-literal"]
  1799 -> 404 [style=dashed label="cast-expression"]
  1799 -> 405 [style=dashed label="character-literal"]
  1799 -> 65 [style=dashed label="class-name"]
  1799 -> 406 [style=dashed label="compare-expression"]
  1799 -> 67 [style=dashed label="concept-name"]
  1799 -> 526 [style=dashed label="conditional-expression"]
  1799 -> 68 [style=dashed label="conversion-function-id"]
  1799 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1799 -> 410 [style=dashed label="decimal-literal"]
  1799 -> 76 [style=dashed label="decltype-specifier"]
  1799 -> 411 [style=dashed label="delete-expression"]
  1799 -> 412 [style=dashed label="digit"]
  1799 -> 413 [style=dashed label="digit-sequence"]
  1799 -> 414 [style=dashed label="encoding-prefix"]
  1799 -> 84 [style=dashed label="enum-name"]
  1799 -> 415 [style=dashed label="equality-expression"]
  1799 -> 416 [style=dashed label="exclusive-or-expression"]
  1799 -> 1892 [style=dashed label="expression"]
  1799 -> 417 [style=dashed label="floating-point-literal"]
  1799 -> 418 [style=dashed label="fold-expression"]
  1799 -> 419 [style=dashed label="fractional-constant"]
  1799 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1799 -> 421 [style=dashed label="hexadecimal-literal"]
  1799 -> 422 [style=dashed label="hexadecimal-prefix"]
  1799 -> 423 [style=dashed label="id-expression"]
  1799 -> 424 [style=dashed label="inclusive-or-expression"]
  1799 -> 425 [style=dashed label="integer-literal"]
  1799 -> 426 [style=dashed label="lambda-expression"]
  1799 -> 427 [style=dashed label="lambda-introducer"]
  1799 -> 428 [style=dashed label="literal"]
  1799 -> 95 [style=dashed label="literal-operator-id"]
  1799 -> 429 [style=dashed label="logical-and-expression"]
  1799 -> 528 [style=dashed label="logical-or-expression"]
  1799 -> 431 [style=dashed label="multiplicative-expression"]
  1799 -> 99 [style=dashed label="namespace-alias"]
  1799 -> 102 [style=dashed label="namespace-name"]
  1799 -> 432 [style=dashed label="nested-name-specifier"]
  1799 -> 433 [style=dashed label="new-expression"]
  1799 -> 434 [style=dashed label="noexcept-expression"]
  1799 -> 435 [style=dashed label="nonzero-digit"]
  1799 -> 436 [style=dashed label="octal-literal"]
  1799 -> 108 [style=dashed label="operator-function-id"]
  1799 -> 109 [style=dashed label="placeholder-type-specifier"]
  1799 -> 437 [style=dashed label="pm-expression"]
  1799 -> 438 [style=dashed label="pointer-literal"]
  1799 -> 439 [style=dashed label="postfix-expression"]
  1799 -> 440 [style=dashed label="primary-expression"]
  1799 -> 112 [style=dashed label="qualified-id"]
  1799 -> 441 [style=dashed label="relational-expression"]
  1799 -> 442 [style=dashed label="requires-expression"]
  1799 -> 443 [style=dashed label="shift-expression"]
  1799 -> 114 [style=dashed label="simple-template-id"]
  1799 -> 529 [style=dashed label="simple-type-specifier"]
  1799 -> 445 [style=dashed label="string-literal"]
  1799 -> 120 [style=dashed label="template-id"]
  1799 -> 215 [style=dashed label="template-name"]
  1799 -> 530 [style=dashed label="throw-expression"]
  1799 -> 123 [style=dashed label="type-constraint"]
  1799 -> 124 [style=dashed label="type-name"]
  1799 -> 126 [style=dashed label="typedef-name"]
  1799 -> 531 [style=dashed label="typename-specifier"]
  1799 -> 449 [style=dashed label="unary-expression"]
  1799 -> 450 [style=dashed label="unary-operator"]
  1799 -> 129 [style=dashed label="unqualified-id"]
  1799 -> 451 [style=dashed label="user-defined-character-literal"]
  1799 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1799 -> 453 [style=dashed label="user-defined-integer-literal"]
  1799 -> 454 [style=dashed label="user-defined-literal"]
  1799 -> 455 [style=dashed label="user-defined-string-literal"]
  1799 -> 532 [style=dashed label="yield-expression"]
  1800 [label="State 1800\n\l875 postfix-expression: REINTERPRET_CAST LESS type-id GREATER OPEN_PAREN • expression CLOSE_PAREN\l"]
  1800 -> 356 [style=solid label="PLUS"]
  1800 -> 357 [style=solid label="MINUS"]
  1800 -> 2 [style=solid label="IDENTIFIER"]
  1800 -> 358 [style=solid label="OPEN_PAREN"]
  1800 -> 359 [style=solid label="AND"]
  1800 -> 360 [style=solid label="SCOPE"]
  1800 -> 361 [style=solid label="OPEN_SQUARE"]
  1800 -> 362 [style=solid label="CO_AWAIT"]
  1800 -> 363 [style=solid label="ZERO_LB"]
  1800 -> 364 [style=solid label="ZERO_HB"]
  1800 -> 365 [style=solid label="SINGLE_QUOTE"]
  1800 -> 366 [style=solid label="FALSE"]
  1800 -> 367 [style=solid label="TRUE"]
  1800 -> 368 [style=solid label="NOEXCEPT"]
  1800 -> 17 [style=solid label="OPERATOR"]
  1800 -> 26 [style=solid label="DECLTYPE"]
  1800 -> 369 [style=solid label="DELETE"]
  1800 -> 370 [style=solid label="DOT"]
  1800 -> 184 [style=solid label="UNICODE_8"]
  1800 -> 371 [style=solid label="MULT"]
  1800 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1800 -> 372 [style=solid label="ZERO_LX"]
  1800 -> 373 [style=solid label="ZERO_HX"]
  1800 -> 374 [style=solid label="REQUIRES"]
  1800 -> 375 [style=solid label="NEW"]
  1800 -> 376 [style=solid label="COMPL"]
  1800 -> 377 [style=solid label="NOT"]
  1800 -> 378 [style=solid label="PLUS_PLUS"]
  1800 -> 379 [style=solid label="MINUS_MINUS"]
  1800 -> 380 [style=solid label="THIS"]
  1800 -> 36 [style=solid label="AUTO"]
  1800 -> 381 [style=solid label="NULLPTR"]
  1800 -> 382 [style=solid label="DYNAMIC_CAST"]
  1800 -> 383 [style=solid label="STATIC_CAST"]
  1800 -> 384 [style=solid label="REINTERPRET_CAST"]
  1800 -> 385 [style=solid label="CONST_CAST"]
  1800 -> 386 [style=solid label="TYPEID"]
  1800 -> 37 [style=solid label="CHAR"]
  1800 -> 38 [style=solid label="CHAR8_T"]
  1800 -> 39 [style=solid label="CHAR16_T"]
  1800 -> 40 [style=solid label="CHAR32_T"]
  1800 -> 41 [style=solid label="WCHAR_T"]
  1800 -> 42 [style=solid label="BOOL"]
  1800 -> 43 [style=solid label="SHORT"]
  1800 -> 44 [style=solid label="INT"]
  1800 -> 45 [style=solid label="LONG"]
  1800 -> 46 [style=solid label="SIGNED"]
  1800 -> 47 [style=solid label="UNSIGNED"]
  1800 -> 48 [style=solid label="FLOAT"]
  1800 -> 49 [style=solid label="DOUBLE"]
  1800 -> 50 [style=solid label="VOID"]
  1800 -> 523 [style=solid label="THROW"]
  1800 -> 55 [style=solid label="TYPENAME"]
  1800 -> 387 [style=solid label="SIZEOF"]
  1800 -> 388 [style=solid label="ALIGNOF"]
  1800 -> 524 [style=solid label="CO_YIELD"]
  1800 -> 389 [style=solid label="'0'"]
  1800 -> 390 [style=solid label="'1'"]
  1800 -> 391 [style=solid label="'2'"]
  1800 -> 392 [style=solid label="'3'"]
  1800 -> 393 [style=solid label="'4'"]
  1800 -> 394 [style=solid label="'5'"]
  1800 -> 395 [style=solid label="'6'"]
  1800 -> 396 [style=solid label="'7'"]
  1800 -> 397 [style=solid label="'8'"]
  1800 -> 398 [style=solid label="'9'"]
  1800 -> 205 [style=solid label="'u'"]
  1800 -> 206 [style=solid label="'U'"]
  1800 -> 207 [style=solid label="'L'"]
  1800 -> 208 [style=solid label="'R'"]
  1800 -> 399 [style=dashed label="additive-expression"]
  1800 -> 400 [style=dashed label="and-expression"]
  1800 -> 525 [style=dashed label="assignment-expression"]
  1800 -> 401 [style=dashed label="await-expression"]
  1800 -> 402 [style=dashed label="binary-literal"]
  1800 -> 403 [style=dashed label="boolean-literal"]
  1800 -> 404 [style=dashed label="cast-expression"]
  1800 -> 405 [style=dashed label="character-literal"]
  1800 -> 65 [style=dashed label="class-name"]
  1800 -> 406 [style=dashed label="compare-expression"]
  1800 -> 67 [style=dashed label="concept-name"]
  1800 -> 526 [style=dashed label="conditional-expression"]
  1800 -> 68 [style=dashed label="conversion-function-id"]
  1800 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1800 -> 410 [style=dashed label="decimal-literal"]
  1800 -> 76 [style=dashed label="decltype-specifier"]
  1800 -> 411 [style=dashed label="delete-expression"]
  1800 -> 412 [style=dashed label="digit"]
  1800 -> 413 [style=dashed label="digit-sequence"]
  1800 -> 414 [style=dashed label="encoding-prefix"]
  1800 -> 84 [style=dashed label="enum-name"]
  1800 -> 415 [style=dashed label="equality-expression"]
  1800 -> 416 [style=dashed label="exclusive-or-expression"]
  1800 -> 1893 [style=dashed label="expression"]
  1800 -> 417 [style=dashed label="floating-point-literal"]
  1800 -> 418 [style=dashed label="fold-expression"]
  1800 -> 419 [style=dashed label="fractional-constant"]
  1800 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1800 -> 421 [style=dashed label="hexadecimal-literal"]
  1800 -> 422 [style=dashed label="hexadecimal-prefix"]
  1800 -> 423 [style=dashed label="id-expression"]
  1800 -> 424 [style=dashed label="inclusive-or-expression"]
  1800 -> 425 [style=dashed label="integer-literal"]
  1800 -> 426 [style=dashed label="lambda-expression"]
  1800 -> 427 [style=dashed label="lambda-introducer"]
  1800 -> 428 [style=dashed label="literal"]
  1800 -> 95 [style=dashed label="literal-operator-id"]
  1800 -> 429 [style=dashed label="logical-and-expression"]
  1800 -> 528 [style=dashed label="logical-or-expression"]
  1800 -> 431 [style=dashed label="multiplicative-expression"]
  1800 -> 99 [style=dashed label="namespace-alias"]
  1800 -> 102 [style=dashed label="namespace-name"]
  1800 -> 432 [style=dashed label="nested-name-specifier"]
  1800 -> 433 [style=dashed label="new-expression"]
  1800 -> 434 [style=dashed label="noexcept-expression"]
  1800 -> 435 [style=dashed label="nonzero-digit"]
  1800 -> 436 [style=dashed label="octal-literal"]
  1800 -> 108 [style=dashed label="operator-function-id"]
  1800 -> 109 [style=dashed label="placeholder-type-specifier"]
  1800 -> 437 [style=dashed label="pm-expression"]
  1800 -> 438 [style=dashed label="pointer-literal"]
  1800 -> 439 [style=dashed label="postfix-expression"]
  1800 -> 440 [style=dashed label="primary-expression"]
  1800 -> 112 [style=dashed label="qualified-id"]
  1800 -> 441 [style=dashed label="relational-expression"]
  1800 -> 442 [style=dashed label="requires-expression"]
  1800 -> 443 [style=dashed label="shift-expression"]
  1800 -> 114 [style=dashed label="simple-template-id"]
  1800 -> 529 [style=dashed label="simple-type-specifier"]
  1800 -> 445 [style=dashed label="string-literal"]
  1800 -> 120 [style=dashed label="template-id"]
  1800 -> 215 [style=dashed label="template-name"]
  1800 -> 530 [style=dashed label="throw-expression"]
  1800 -> 123 [style=dashed label="type-constraint"]
  1800 -> 124 [style=dashed label="type-name"]
  1800 -> 126 [style=dashed label="typedef-name"]
  1800 -> 531 [style=dashed label="typename-specifier"]
  1800 -> 449 [style=dashed label="unary-expression"]
  1800 -> 450 [style=dashed label="unary-operator"]
  1800 -> 129 [style=dashed label="unqualified-id"]
  1800 -> 451 [style=dashed label="user-defined-character-literal"]
  1800 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1800 -> 453 [style=dashed label="user-defined-integer-literal"]
  1800 -> 454 [style=dashed label="user-defined-literal"]
  1800 -> 455 [style=dashed label="user-defined-string-literal"]
  1800 -> 532 [style=dashed label="yield-expression"]
  1801 [label="State 1801\n\l876 postfix-expression: CONST_CAST LESS type-id GREATER OPEN_PAREN • expression CLOSE_PAREN\l"]
  1801 -> 356 [style=solid label="PLUS"]
  1801 -> 357 [style=solid label="MINUS"]
  1801 -> 2 [style=solid label="IDENTIFIER"]
  1801 -> 358 [style=solid label="OPEN_PAREN"]
  1801 -> 359 [style=solid label="AND"]
  1801 -> 360 [style=solid label="SCOPE"]
  1801 -> 361 [style=solid label="OPEN_SQUARE"]
  1801 -> 362 [style=solid label="CO_AWAIT"]
  1801 -> 363 [style=solid label="ZERO_LB"]
  1801 -> 364 [style=solid label="ZERO_HB"]
  1801 -> 365 [style=solid label="SINGLE_QUOTE"]
  1801 -> 366 [style=solid label="FALSE"]
  1801 -> 367 [style=solid label="TRUE"]
  1801 -> 368 [style=solid label="NOEXCEPT"]
  1801 -> 17 [style=solid label="OPERATOR"]
  1801 -> 26 [style=solid label="DECLTYPE"]
  1801 -> 369 [style=solid label="DELETE"]
  1801 -> 370 [style=solid label="DOT"]
  1801 -> 184 [style=solid label="UNICODE_8"]
  1801 -> 371 [style=solid label="MULT"]
  1801 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1801 -> 372 [style=solid label="ZERO_LX"]
  1801 -> 373 [style=solid label="ZERO_HX"]
  1801 -> 374 [style=solid label="REQUIRES"]
  1801 -> 375 [style=solid label="NEW"]
  1801 -> 376 [style=solid label="COMPL"]
  1801 -> 377 [style=solid label="NOT"]
  1801 -> 378 [style=solid label="PLUS_PLUS"]
  1801 -> 379 [style=solid label="MINUS_MINUS"]
  1801 -> 380 [style=solid label="THIS"]
  1801 -> 36 [style=solid label="AUTO"]
  1801 -> 381 [style=solid label="NULLPTR"]
  1801 -> 382 [style=solid label="DYNAMIC_CAST"]
  1801 -> 383 [style=solid label="STATIC_CAST"]
  1801 -> 384 [style=solid label="REINTERPRET_CAST"]
  1801 -> 385 [style=solid label="CONST_CAST"]
  1801 -> 386 [style=solid label="TYPEID"]
  1801 -> 37 [style=solid label="CHAR"]
  1801 -> 38 [style=solid label="CHAR8_T"]
  1801 -> 39 [style=solid label="CHAR16_T"]
  1801 -> 40 [style=solid label="CHAR32_T"]
  1801 -> 41 [style=solid label="WCHAR_T"]
  1801 -> 42 [style=solid label="BOOL"]
  1801 -> 43 [style=solid label="SHORT"]
  1801 -> 44 [style=solid label="INT"]
  1801 -> 45 [style=solid label="LONG"]
  1801 -> 46 [style=solid label="SIGNED"]
  1801 -> 47 [style=solid label="UNSIGNED"]
  1801 -> 48 [style=solid label="FLOAT"]
  1801 -> 49 [style=solid label="DOUBLE"]
  1801 -> 50 [style=solid label="VOID"]
  1801 -> 523 [style=solid label="THROW"]
  1801 -> 55 [style=solid label="TYPENAME"]
  1801 -> 387 [style=solid label="SIZEOF"]
  1801 -> 388 [style=solid label="ALIGNOF"]
  1801 -> 524 [style=solid label="CO_YIELD"]
  1801 -> 389 [style=solid label="'0'"]
  1801 -> 390 [style=solid label="'1'"]
  1801 -> 391 [style=solid label="'2'"]
  1801 -> 392 [style=solid label="'3'"]
  1801 -> 393 [style=solid label="'4'"]
  1801 -> 394 [style=solid label="'5'"]
  1801 -> 395 [style=solid label="'6'"]
  1801 -> 396 [style=solid label="'7'"]
  1801 -> 397 [style=solid label="'8'"]
  1801 -> 398 [style=solid label="'9'"]
  1801 -> 205 [style=solid label="'u'"]
  1801 -> 206 [style=solid label="'U'"]
  1801 -> 207 [style=solid label="'L'"]
  1801 -> 208 [style=solid label="'R'"]
  1801 -> 399 [style=dashed label="additive-expression"]
  1801 -> 400 [style=dashed label="and-expression"]
  1801 -> 525 [style=dashed label="assignment-expression"]
  1801 -> 401 [style=dashed label="await-expression"]
  1801 -> 402 [style=dashed label="binary-literal"]
  1801 -> 403 [style=dashed label="boolean-literal"]
  1801 -> 404 [style=dashed label="cast-expression"]
  1801 -> 405 [style=dashed label="character-literal"]
  1801 -> 65 [style=dashed label="class-name"]
  1801 -> 406 [style=dashed label="compare-expression"]
  1801 -> 67 [style=dashed label="concept-name"]
  1801 -> 526 [style=dashed label="conditional-expression"]
  1801 -> 68 [style=dashed label="conversion-function-id"]
  1801 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1801 -> 410 [style=dashed label="decimal-literal"]
  1801 -> 76 [style=dashed label="decltype-specifier"]
  1801 -> 411 [style=dashed label="delete-expression"]
  1801 -> 412 [style=dashed label="digit"]
  1801 -> 413 [style=dashed label="digit-sequence"]
  1801 -> 414 [style=dashed label="encoding-prefix"]
  1801 -> 84 [style=dashed label="enum-name"]
  1801 -> 415 [style=dashed label="equality-expression"]
  1801 -> 416 [style=dashed label="exclusive-or-expression"]
  1801 -> 1894 [style=dashed label="expression"]
  1801 -> 417 [style=dashed label="floating-point-literal"]
  1801 -> 418 [style=dashed label="fold-expression"]
  1801 -> 419 [style=dashed label="fractional-constant"]
  1801 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1801 -> 421 [style=dashed label="hexadecimal-literal"]
  1801 -> 422 [style=dashed label="hexadecimal-prefix"]
  1801 -> 423 [style=dashed label="id-expression"]
  1801 -> 424 [style=dashed label="inclusive-or-expression"]
  1801 -> 425 [style=dashed label="integer-literal"]
  1801 -> 426 [style=dashed label="lambda-expression"]
  1801 -> 427 [style=dashed label="lambda-introducer"]
  1801 -> 428 [style=dashed label="literal"]
  1801 -> 95 [style=dashed label="literal-operator-id"]
  1801 -> 429 [style=dashed label="logical-and-expression"]
  1801 -> 528 [style=dashed label="logical-or-expression"]
  1801 -> 431 [style=dashed label="multiplicative-expression"]
  1801 -> 99 [style=dashed label="namespace-alias"]
  1801 -> 102 [style=dashed label="namespace-name"]
  1801 -> 432 [style=dashed label="nested-name-specifier"]
  1801 -> 433 [style=dashed label="new-expression"]
  1801 -> 434 [style=dashed label="noexcept-expression"]
  1801 -> 435 [style=dashed label="nonzero-digit"]
  1801 -> 436 [style=dashed label="octal-literal"]
  1801 -> 108 [style=dashed label="operator-function-id"]
  1801 -> 109 [style=dashed label="placeholder-type-specifier"]
  1801 -> 437 [style=dashed label="pm-expression"]
  1801 -> 438 [style=dashed label="pointer-literal"]
  1801 -> 439 [style=dashed label="postfix-expression"]
  1801 -> 440 [style=dashed label="primary-expression"]
  1801 -> 112 [style=dashed label="qualified-id"]
  1801 -> 441 [style=dashed label="relational-expression"]
  1801 -> 442 [style=dashed label="requires-expression"]
  1801 -> 443 [style=dashed label="shift-expression"]
  1801 -> 114 [style=dashed label="simple-template-id"]
  1801 -> 529 [style=dashed label="simple-type-specifier"]
  1801 -> 445 [style=dashed label="string-literal"]
  1801 -> 120 [style=dashed label="template-id"]
  1801 -> 215 [style=dashed label="template-name"]
  1801 -> 530 [style=dashed label="throw-expression"]
  1801 -> 123 [style=dashed label="type-constraint"]
  1801 -> 124 [style=dashed label="type-name"]
  1801 -> 126 [style=dashed label="typedef-name"]
  1801 -> 531 [style=dashed label="typename-specifier"]
  1801 -> 449 [style=dashed label="unary-expression"]
  1801 -> 450 [style=dashed label="unary-operator"]
  1801 -> 129 [style=dashed label="unqualified-id"]
  1801 -> 451 [style=dashed label="user-defined-character-literal"]
  1801 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1801 -> 453 [style=dashed label="user-defined-integer-literal"]
  1801 -> 454 [style=dashed label="user-defined-literal"]
  1801 -> 455 [style=dashed label="user-defined-string-literal"]
  1801 -> 532 [style=dashed label="yield-expression"]
  1802 [label="State 1802\n\l1123 unary-expression: SIZEOF ELLIPSIS OPEN_PAREN IDENTIFIER CLOSE_PAREN •\l"]
  1802 -> "1802R1123" [style=solid]
 "1802R1123" [label="R1123", fillcolor=3, shape=diamond, style=filled]
  1803 [label="State 1803\n\l 88 binary-exponent-part: 'p' sign digit-sequence •\l260 digit-sequence: digit-sequence • digit\l261               | digit-sequence • SINGLE_QUOTE digit\l"]
  1803 -> 847 [style=solid label="SINGLE_QUOTE"]
  1803 -> 789 [style=solid label="'0'"]
  1803 -> 790 [style=solid label="'1'"]
  1803 -> 791 [style=solid label="'2'"]
  1803 -> 792 [style=solid label="'3'"]
  1803 -> 793 [style=solid label="'4'"]
  1803 -> 794 [style=solid label="'5'"]
  1803 -> 795 [style=solid label="'6'"]
  1803 -> 796 [style=solid label="'7'"]
  1803 -> 797 [style=solid label="'8'"]
  1803 -> 798 [style=solid label="'9'"]
  1803 -> 851 [style=dashed label="digit"]
  1803 -> "1803R88" [style=solid]
 "1803R88" [label="R88", fillcolor=3, shape=diamond, style=filled]
  1804 [label="State 1804\n\l 90 binary-exponent-part: 'P' sign digit-sequence •\l260 digit-sequence: digit-sequence • digit\l261               | digit-sequence • SINGLE_QUOTE digit\l"]
  1804 -> 847 [style=solid label="SINGLE_QUOTE"]
  1804 -> 789 [style=solid label="'0'"]
  1804 -> 790 [style=solid label="'1'"]
  1804 -> 791 [style=solid label="'2'"]
  1804 -> 792 [style=solid label="'3'"]
  1804 -> 793 [style=solid label="'4'"]
  1804 -> 794 [style=solid label="'5'"]
  1804 -> 795 [style=solid label="'6'"]
  1804 -> 796 [style=solid label="'7'"]
  1804 -> 797 [style=solid label="'8'"]
  1804 -> 798 [style=solid label="'9'"]
  1804 -> 851 [style=dashed label="digit"]
  1804 -> "1804R90" [style=solid]
 "1804R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
  1805 [label="State 1805\n\l529 lambda-declarator: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN lambda-specifiers •\l530                  | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN lambda-specifiers • requires-clause\l"]
  1805 -> 292 [style=solid label="REQUIRES"]
  1805 -> 1895 [style=dashed label="requires-clause"]
  1805 -> "1805R529" [style=solid]
 "1805R529" [label="R529", fillcolor=3, shape=diamond, style=filled]
  1806 [label="State 1806\n\l693 noexcept-specifier: NOEXCEPT OPEN_PAREN constant-expression CLOSE_PAREN •\l"]
  1806 -> "1806R693" [style=solid]
 "1806R693" [label="R693", fillcolor=3, shape=diamond, style=filled]
  1807 [label="State 1807\n\l532 lambda-expression: lambda-introducer LESS template-parameter-list GREATER lambda-declarator • compound-statement\l"]
  1807 -> 289 [style=solid label="OPEN_BRACE"]
  1807 -> 1896 [style=dashed label="compound-statement"]
  1808 [label="State 1808\n\l533 lambda-expression: lambda-introducer LESS template-parameter-list GREATER requires-clause • lambda-declarator compound-statement\l"]
  1808 -> 162 [style=solid label="IDENTIFIER"]
  1808 -> 4 [style=solid label="ALIGNAS"]
  1808 -> 893 [style=solid label="OPEN_PAREN"]
  1808 -> 9 [style=solid label="SCOPE"]
  1808 -> 10 [style=solid label="OPEN_SQUARE"]
  1808 -> 11 [style=solid label="VIRTUAL"]
  1808 -> 12 [style=solid label="CLASS"]
  1808 -> 13 [style=solid label="STRUCT"]
  1808 -> 14 [style=solid label="UNION"]
  1808 -> 894 [style=solid label="NOEXCEPT"]
  1808 -> 18 [style=solid label="CONST"]
  1808 -> 19 [style=solid label="VOLATILE"]
  1808 -> 20 [style=solid label="FRIEND"]
  1808 -> 21 [style=solid label="TYPEDEF"]
  1808 -> 22 [style=solid label="CONSTEXPR"]
  1808 -> 23 [style=solid label="CONSTEVAL"]
  1808 -> 24 [style=solid label="CONSTINIT"]
  1808 -> 258 [style=solid label="INLINE"]
  1808 -> 26 [style=solid label="DECLTYPE"]
  1808 -> 736 [style=solid label="DEREF"]
  1808 -> 27 [style=solid label="ENUM"]
  1808 -> 259 [style=solid label="EXTERN"]
  1808 -> 29 [style=solid label="EXPLICIT"]
  1808 -> 36 [style=solid label="AUTO"]
  1808 -> 37 [style=solid label="CHAR"]
  1808 -> 38 [style=solid label="CHAR8_T"]
  1808 -> 39 [style=solid label="CHAR16_T"]
  1808 -> 40 [style=solid label="CHAR32_T"]
  1808 -> 41 [style=solid label="WCHAR_T"]
  1808 -> 42 [style=solid label="BOOL"]
  1808 -> 43 [style=solid label="SHORT"]
  1808 -> 44 [style=solid label="INT"]
  1808 -> 45 [style=solid label="LONG"]
  1808 -> 46 [style=solid label="SIGNED"]
  1808 -> 47 [style=solid label="UNSIGNED"]
  1808 -> 48 [style=solid label="FLOAT"]
  1808 -> 49 [style=solid label="DOUBLE"]
  1808 -> 50 [style=solid label="VOID"]
  1808 -> 52 [style=solid label="STATIC"]
  1808 -> 53 [style=solid label="THREAD_LOCAL"]
  1808 -> 54 [style=solid label="MUTABLE"]
  1808 -> 55 [style=solid label="TYPENAME"]
  1808 -> 57 [style=dashed label="alignment-specifier"]
  1808 -> 60 [style=dashed label="attribute-specifier"]
  1808 -> 896 [style=dashed label="attribute-specifier-seq"]
  1808 -> 63 [style=dashed label="class-head"]
  1808 -> 64 [style=dashed label="class-key"]
  1808 -> 65 [style=dashed label="class-name"]
  1808 -> 66 [style=dashed label="class-specifier"]
  1808 -> 67 [style=dashed label="concept-name"]
  1808 -> 69 [style=dashed label="cv-qualifier"]
  1808 -> 70 [style=dashed label="decl-specifier"]
  1808 -> 897 [style=dashed label="decl-specifier-seq"]
  1808 -> 76 [style=dashed label="decltype-specifier"]
  1808 -> 78 [style=dashed label="defining-type-specifier"]
  1808 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1808 -> 80 [style=dashed label="elaborated-type-specifier"]
  1808 -> 82 [style=dashed label="enum-head"]
  1808 -> 263 [style=dashed label="enum-key"]
  1808 -> 84 [style=dashed label="enum-name"]
  1808 -> 85 [style=dashed label="enum-specifier"]
  1808 -> 264 [style=dashed label="explicit-specifier"]
  1808 -> 91 [style=dashed label="function-specifier"]
  1808 -> 1897 [style=dashed label="lambda-declarator"]
  1808 -> 899 [style=dashed label="lambda-specifiers"]
  1808 -> 99 [style=dashed label="namespace-alias"]
  1808 -> 102 [style=dashed label="namespace-name"]
  1808 -> 212 [style=dashed label="nested-name-specifier"]
  1808 -> 900 [style=dashed label="noexcept-specifier"]
  1808 -> 109 [style=dashed label="placeholder-type-specifier"]
  1808 -> 141 [style=dashed label="simple-template-id"]
  1808 -> 115 [style=dashed label="simple-type-specifier"]
  1808 -> 117 [style=dashed label="storage-class-specifier"]
  1808 -> 215 [style=dashed label="template-name"]
  1808 -> 901 [style=dashed label="trailing-return-type"]
  1808 -> 123 [style=dashed label="type-constraint"]
  1808 -> 124 [style=dashed label="type-name"]
  1808 -> 125 [style=dashed label="type-specifier"]
  1808 -> 126 [style=dashed label="typedef-name"]
  1808 -> 127 [style=dashed label="typename-specifier"]
  1809 [label="State 1809\n\l549 lambda-specifiers: decl-specifier-seq noexcept-specifier attribute-specifier-seq trailing-return-type •\l"]
  1809 -> "1809R549" [style=solid]
 "1809R549" [label="R549", fillcolor=3, shape=diamond, style=filled]
  1810 [label="State 1810\n\l170 conditional-expression: logical-or-expression QUERY expression COLON assignment-expression •\l"]
  1810 -> "1810R170" [style=solid]
 "1810R170" [label="R170", fillcolor=3, shape=diamond, style=filled]
  1811 [label="State 1811\n\l 48 attribute-namespace: IDENTIFIER •\l 55 attribute-token: IDENTIFIER •\l466 init-capture: IDENTIFIER • initializer\l957 simple-capture: IDENTIFIER •\l958               | IDENTIFIER • ELLIPSIS\l"]
  1811 -> 1273 [style=solid label="EQ"]
  1811 -> 643 [style=solid label="OPEN_PAREN"]
  1811 -> 1274 [style=solid label="ELLIPSIS"]
  1811 -> 935 [style=solid label="OPEN_BRACE"]
  1811 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1811 -> 646 [style=dashed label="braced-init-list"]
  1811 -> 1275 [style=dashed label="initializer"]
  1811 -> "1811R48" [label="[SCOPE]", style=solid]
 "1811R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  1811 -> "1811R55d" [label="[OPEN_PAREN, ELLIPSIS]", style=solid]
 "1811R55d" [label="R55", fillcolor=5, shape=diamond, style=filled]
  1811 -> "1811R55" [style=solid]
 "1811R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  1811 -> "1811R957d" [label="[COMMA, CLOSE_SQUARE]", style=solid]
 "1811R957d" [label="R957", fillcolor=5, shape=diamond, style=filled]
  1812 [label="State 1812\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l713 noptr-abstract-declarator: OPEN_SQUARE constant-expression CLOSE_SQUARE attribute-specifier-seq •\l"]
  1812 -> 4 [style=solid label="ALIGNAS"]
  1812 -> 10 [style=solid label="OPEN_SQUARE"]
  1812 -> 57 [style=dashed label="alignment-specifier"]
  1812 -> 260 [style=dashed label="attribute-specifier"]
  1812 -> "1812R713d" [label="[OPEN_SQUARE]", style=solid]
 "1812R713d" [label="R713", fillcolor=5, shape=diamond, style=filled]
  1812 -> "1812R713" [style=solid]
 "1812R713" [label="R713", fillcolor=3, shape=diamond, style=filled]
  1813 [label="State 1813\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l710 noptr-abstract-declarator: noptr-abstract-declarator OPEN_SQUARE CLOSE_SQUARE attribute-specifier-seq •\l"]
  1813 -> 4 [style=solid label="ALIGNAS"]
  1813 -> 10 [style=solid label="OPEN_SQUARE"]
  1813 -> 57 [style=dashed label="alignment-specifier"]
  1813 -> 260 [style=dashed label="attribute-specifier"]
  1813 -> "1813R710d" [label="[OPEN_SQUARE]", style=solid]
 "1813R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1813 -> "1813R710" [style=solid]
 "1813R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1814 [label="State 1814\n\l708 noptr-abstract-declarator: noptr-abstract-declarator OPEN_SQUARE constant-expression CLOSE_SQUARE •\l712                          | noptr-abstract-declarator OPEN_SQUARE constant-expression CLOSE_SQUARE • attribute-specifier-seq\l"]
  1814 -> 4 [style=solid label="ALIGNAS"]
  1814 -> 10 [style=solid label="OPEN_SQUARE"]
  1814 -> 57 [style=dashed label="alignment-specifier"]
  1814 -> 60 [style=dashed label="attribute-specifier"]
  1814 -> 1898 [style=dashed label="attribute-specifier-seq"]
  1814 -> "1814R708d" [label="[OPEN_SQUARE]", style=solid]
 "1814R708d" [label="R708", fillcolor=5, shape=diamond, style=filled]
  1814 -> "1814R708" [style=solid]
 "1814R708" [label="R708", fillcolor=3, shape=diamond, style=filled]
  1815 [label="State 1815\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l718 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator OPEN_SQUARE CLOSE_SQUARE attribute-specifier-seq •\l"]
  1815 -> 4 [style=solid label="ALIGNAS"]
  1815 -> 10 [style=solid label="OPEN_SQUARE"]
  1815 -> 57 [style=dashed label="alignment-specifier"]
  1815 -> 260 [style=dashed label="attribute-specifier"]
  1815 -> "1815R718d" [label="[OPEN_SQUARE]", style=solid]
 "1815R718d" [label="R718", fillcolor=5, shape=diamond, style=filled]
  1815 -> "1815R718" [style=solid]
 "1815R718" [label="R718", fillcolor=3, shape=diamond, style=filled]
  1816 [label="State 1816\n\l717 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator OPEN_SQUARE constant-expression CLOSE_SQUARE •\l719                               | noptr-abstract-pack-declarator OPEN_SQUARE constant-expression CLOSE_SQUARE • attribute-specifier-seq\l"]
  1816 -> 4 [style=solid label="ALIGNAS"]
  1816 -> 10 [style=solid label="OPEN_SQUARE"]
  1816 -> 57 [style=dashed label="alignment-specifier"]
  1816 -> 60 [style=dashed label="attribute-specifier"]
  1816 -> 1899 [style=dashed label="attribute-specifier-seq"]
  1816 -> "1816R717d" [label="[OPEN_SQUARE]", style=solid]
 "1816R717d" [label="R717", fillcolor=5, shape=diamond, style=filled]
  1816 -> "1816R717" [style=solid]
 "1816R717" [label="R717", fillcolor=3, shape=diamond, style=filled]
  1817 [label="State 1817\n\l 60 balanced-token: OPEN_PAREN balanced-token-seq CLOSE_PAREN •\l"]
  1817 -> "1817R60" [style=solid]
 "1817R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  1818 [label="State 1818\n\l 62 balanced-token: OPEN_SQUARE balanced-token-seq CLOSE_SQUARE •\l"]
  1818 -> "1818R62" [style=solid]
 "1818R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  1819 [label="State 1819\n\l 64 balanced-token: OPEN_BRACE balanced-token-seq CLOSE_BRACE •\l"]
  1819 -> "1819R64" [style=solid]
 "1819R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  1820 [label="State 1820\n\l825 parameter-declaration: THIS decl-specifier-seq abstract-declarator EQ initializer-clause •\l"]
  1820 -> "1820R825" [style=solid]
 "1820R825" [label="R825", fillcolor=3, shape=diamond, style=filled]
  1821 [label="State 1821\n\l809 parameter-declaration: THIS decl-specifier-seq declarator EQ initializer-clause •\l"]
  1821 -> "1821R809" [style=solid]
 "1821R809" [label="R809", fillcolor=3, shape=diamond, style=filled]
  1822 [label="State 1822\n\l820 parameter-declaration: attribute-specifier-seq THIS decl-specifier-seq EQ initializer-clause •\l"]
  1822 -> "1822R820" [style=solid]
 "1822R820" [label="R820", fillcolor=3, shape=diamond, style=filled]
  1823 [label="State 1823\n\l824 parameter-declaration: attribute-specifier-seq THIS decl-specifier-seq abstract-declarator EQ • initializer-clause\l"]
  1823 -> 356 [style=solid label="PLUS"]
  1823 -> 357 [style=solid label="MINUS"]
  1823 -> 2 [style=solid label="IDENTIFIER"]
  1823 -> 358 [style=solid label="OPEN_PAREN"]
  1823 -> 359 [style=solid label="AND"]
  1823 -> 360 [style=solid label="SCOPE"]
  1823 -> 361 [style=solid label="OPEN_SQUARE"]
  1823 -> 362 [style=solid label="CO_AWAIT"]
  1823 -> 935 [style=solid label="OPEN_BRACE"]
  1823 -> 363 [style=solid label="ZERO_LB"]
  1823 -> 364 [style=solid label="ZERO_HB"]
  1823 -> 365 [style=solid label="SINGLE_QUOTE"]
  1823 -> 366 [style=solid label="FALSE"]
  1823 -> 367 [style=solid label="TRUE"]
  1823 -> 368 [style=solid label="NOEXCEPT"]
  1823 -> 17 [style=solid label="OPERATOR"]
  1823 -> 26 [style=solid label="DECLTYPE"]
  1823 -> 369 [style=solid label="DELETE"]
  1823 -> 370 [style=solid label="DOT"]
  1823 -> 184 [style=solid label="UNICODE_8"]
  1823 -> 371 [style=solid label="MULT"]
  1823 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1823 -> 372 [style=solid label="ZERO_LX"]
  1823 -> 373 [style=solid label="ZERO_HX"]
  1823 -> 374 [style=solid label="REQUIRES"]
  1823 -> 375 [style=solid label="NEW"]
  1823 -> 376 [style=solid label="COMPL"]
  1823 -> 377 [style=solid label="NOT"]
  1823 -> 378 [style=solid label="PLUS_PLUS"]
  1823 -> 379 [style=solid label="MINUS_MINUS"]
  1823 -> 380 [style=solid label="THIS"]
  1823 -> 36 [style=solid label="AUTO"]
  1823 -> 381 [style=solid label="NULLPTR"]
  1823 -> 382 [style=solid label="DYNAMIC_CAST"]
  1823 -> 383 [style=solid label="STATIC_CAST"]
  1823 -> 384 [style=solid label="REINTERPRET_CAST"]
  1823 -> 385 [style=solid label="CONST_CAST"]
  1823 -> 386 [style=solid label="TYPEID"]
  1823 -> 37 [style=solid label="CHAR"]
  1823 -> 38 [style=solid label="CHAR8_T"]
  1823 -> 39 [style=solid label="CHAR16_T"]
  1823 -> 40 [style=solid label="CHAR32_T"]
  1823 -> 41 [style=solid label="WCHAR_T"]
  1823 -> 42 [style=solid label="BOOL"]
  1823 -> 43 [style=solid label="SHORT"]
  1823 -> 44 [style=solid label="INT"]
  1823 -> 45 [style=solid label="LONG"]
  1823 -> 46 [style=solid label="SIGNED"]
  1823 -> 47 [style=solid label="UNSIGNED"]
  1823 -> 48 [style=solid label="FLOAT"]
  1823 -> 49 [style=solid label="DOUBLE"]
  1823 -> 50 [style=solid label="VOID"]
  1823 -> 523 [style=solid label="THROW"]
  1823 -> 55 [style=solid label="TYPENAME"]
  1823 -> 387 [style=solid label="SIZEOF"]
  1823 -> 388 [style=solid label="ALIGNOF"]
  1823 -> 524 [style=solid label="CO_YIELD"]
  1823 -> 389 [style=solid label="'0'"]
  1823 -> 390 [style=solid label="'1'"]
  1823 -> 391 [style=solid label="'2'"]
  1823 -> 392 [style=solid label="'3'"]
  1823 -> 393 [style=solid label="'4'"]
  1823 -> 394 [style=solid label="'5'"]
  1823 -> 395 [style=solid label="'6'"]
  1823 -> 396 [style=solid label="'7'"]
  1823 -> 397 [style=solid label="'8'"]
  1823 -> 398 [style=solid label="'9'"]
  1823 -> 205 [style=solid label="'u'"]
  1823 -> 206 [style=solid label="'U'"]
  1823 -> 207 [style=solid label="'L'"]
  1823 -> 208 [style=solid label="'R'"]
  1823 -> 399 [style=dashed label="additive-expression"]
  1823 -> 400 [style=dashed label="and-expression"]
  1823 -> 1134 [style=dashed label="assignment-expression"]
  1823 -> 401 [style=dashed label="await-expression"]
  1823 -> 402 [style=dashed label="binary-literal"]
  1823 -> 403 [style=dashed label="boolean-literal"]
  1823 -> 1135 [style=dashed label="braced-init-list"]
  1823 -> 404 [style=dashed label="cast-expression"]
  1823 -> 405 [style=dashed label="character-literal"]
  1823 -> 65 [style=dashed label="class-name"]
  1823 -> 406 [style=dashed label="compare-expression"]
  1823 -> 67 [style=dashed label="concept-name"]
  1823 -> 526 [style=dashed label="conditional-expression"]
  1823 -> 68 [style=dashed label="conversion-function-id"]
  1823 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1823 -> 410 [style=dashed label="decimal-literal"]
  1823 -> 76 [style=dashed label="decltype-specifier"]
  1823 -> 411 [style=dashed label="delete-expression"]
  1823 -> 412 [style=dashed label="digit"]
  1823 -> 413 [style=dashed label="digit-sequence"]
  1823 -> 414 [style=dashed label="encoding-prefix"]
  1823 -> 84 [style=dashed label="enum-name"]
  1823 -> 415 [style=dashed label="equality-expression"]
  1823 -> 416 [style=dashed label="exclusive-or-expression"]
  1823 -> 417 [style=dashed label="floating-point-literal"]
  1823 -> 418 [style=dashed label="fold-expression"]
  1823 -> 419 [style=dashed label="fractional-constant"]
  1823 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1823 -> 421 [style=dashed label="hexadecimal-literal"]
  1823 -> 422 [style=dashed label="hexadecimal-prefix"]
  1823 -> 423 [style=dashed label="id-expression"]
  1823 -> 424 [style=dashed label="inclusive-or-expression"]
  1823 -> 1900 [style=dashed label="initializer-clause"]
  1823 -> 425 [style=dashed label="integer-literal"]
  1823 -> 426 [style=dashed label="lambda-expression"]
  1823 -> 427 [style=dashed label="lambda-introducer"]
  1823 -> 428 [style=dashed label="literal"]
  1823 -> 95 [style=dashed label="literal-operator-id"]
  1823 -> 429 [style=dashed label="logical-and-expression"]
  1823 -> 528 [style=dashed label="logical-or-expression"]
  1823 -> 431 [style=dashed label="multiplicative-expression"]
  1823 -> 99 [style=dashed label="namespace-alias"]
  1823 -> 102 [style=dashed label="namespace-name"]
  1823 -> 432 [style=dashed label="nested-name-specifier"]
  1823 -> 433 [style=dashed label="new-expression"]
  1823 -> 434 [style=dashed label="noexcept-expression"]
  1823 -> 435 [style=dashed label="nonzero-digit"]
  1823 -> 436 [style=dashed label="octal-literal"]
  1823 -> 108 [style=dashed label="operator-function-id"]
  1823 -> 109 [style=dashed label="placeholder-type-specifier"]
  1823 -> 437 [style=dashed label="pm-expression"]
  1823 -> 438 [style=dashed label="pointer-literal"]
  1823 -> 439 [style=dashed label="postfix-expression"]
  1823 -> 440 [style=dashed label="primary-expression"]
  1823 -> 112 [style=dashed label="qualified-id"]
  1823 -> 441 [style=dashed label="relational-expression"]
  1823 -> 442 [style=dashed label="requires-expression"]
  1823 -> 443 [style=dashed label="shift-expression"]
  1823 -> 114 [style=dashed label="simple-template-id"]
  1823 -> 529 [style=dashed label="simple-type-specifier"]
  1823 -> 445 [style=dashed label="string-literal"]
  1823 -> 120 [style=dashed label="template-id"]
  1823 -> 215 [style=dashed label="template-name"]
  1823 -> 530 [style=dashed label="throw-expression"]
  1823 -> 123 [style=dashed label="type-constraint"]
  1823 -> 124 [style=dashed label="type-name"]
  1823 -> 126 [style=dashed label="typedef-name"]
  1823 -> 531 [style=dashed label="typename-specifier"]
  1823 -> 449 [style=dashed label="unary-expression"]
  1823 -> 450 [style=dashed label="unary-operator"]
  1823 -> 129 [style=dashed label="unqualified-id"]
  1823 -> 451 [style=dashed label="user-defined-character-literal"]
  1823 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1823 -> 453 [style=dashed label="user-defined-integer-literal"]
  1823 -> 454 [style=dashed label="user-defined-literal"]
  1823 -> 455 [style=dashed label="user-defined-string-literal"]
  1823 -> 532 [style=dashed label="yield-expression"]
  1824 [label="State 1824\n\l808 parameter-declaration: attribute-specifier-seq THIS decl-specifier-seq declarator EQ • initializer-clause\l"]
  1824 -> 356 [style=solid label="PLUS"]
  1824 -> 357 [style=solid label="MINUS"]
  1824 -> 2 [style=solid label="IDENTIFIER"]
  1824 -> 358 [style=solid label="OPEN_PAREN"]
  1824 -> 359 [style=solid label="AND"]
  1824 -> 360 [style=solid label="SCOPE"]
  1824 -> 361 [style=solid label="OPEN_SQUARE"]
  1824 -> 362 [style=solid label="CO_AWAIT"]
  1824 -> 935 [style=solid label="OPEN_BRACE"]
  1824 -> 363 [style=solid label="ZERO_LB"]
  1824 -> 364 [style=solid label="ZERO_HB"]
  1824 -> 365 [style=solid label="SINGLE_QUOTE"]
  1824 -> 366 [style=solid label="FALSE"]
  1824 -> 367 [style=solid label="TRUE"]
  1824 -> 368 [style=solid label="NOEXCEPT"]
  1824 -> 17 [style=solid label="OPERATOR"]
  1824 -> 26 [style=solid label="DECLTYPE"]
  1824 -> 369 [style=solid label="DELETE"]
  1824 -> 370 [style=solid label="DOT"]
  1824 -> 184 [style=solid label="UNICODE_8"]
  1824 -> 371 [style=solid label="MULT"]
  1824 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1824 -> 372 [style=solid label="ZERO_LX"]
  1824 -> 373 [style=solid label="ZERO_HX"]
  1824 -> 374 [style=solid label="REQUIRES"]
  1824 -> 375 [style=solid label="NEW"]
  1824 -> 376 [style=solid label="COMPL"]
  1824 -> 377 [style=solid label="NOT"]
  1824 -> 378 [style=solid label="PLUS_PLUS"]
  1824 -> 379 [style=solid label="MINUS_MINUS"]
  1824 -> 380 [style=solid label="THIS"]
  1824 -> 36 [style=solid label="AUTO"]
  1824 -> 381 [style=solid label="NULLPTR"]
  1824 -> 382 [style=solid label="DYNAMIC_CAST"]
  1824 -> 383 [style=solid label="STATIC_CAST"]
  1824 -> 384 [style=solid label="REINTERPRET_CAST"]
  1824 -> 385 [style=solid label="CONST_CAST"]
  1824 -> 386 [style=solid label="TYPEID"]
  1824 -> 37 [style=solid label="CHAR"]
  1824 -> 38 [style=solid label="CHAR8_T"]
  1824 -> 39 [style=solid label="CHAR16_T"]
  1824 -> 40 [style=solid label="CHAR32_T"]
  1824 -> 41 [style=solid label="WCHAR_T"]
  1824 -> 42 [style=solid label="BOOL"]
  1824 -> 43 [style=solid label="SHORT"]
  1824 -> 44 [style=solid label="INT"]
  1824 -> 45 [style=solid label="LONG"]
  1824 -> 46 [style=solid label="SIGNED"]
  1824 -> 47 [style=solid label="UNSIGNED"]
  1824 -> 48 [style=solid label="FLOAT"]
  1824 -> 49 [style=solid label="DOUBLE"]
  1824 -> 50 [style=solid label="VOID"]
  1824 -> 523 [style=solid label="THROW"]
  1824 -> 55 [style=solid label="TYPENAME"]
  1824 -> 387 [style=solid label="SIZEOF"]
  1824 -> 388 [style=solid label="ALIGNOF"]
  1824 -> 524 [style=solid label="CO_YIELD"]
  1824 -> 389 [style=solid label="'0'"]
  1824 -> 390 [style=solid label="'1'"]
  1824 -> 391 [style=solid label="'2'"]
  1824 -> 392 [style=solid label="'3'"]
  1824 -> 393 [style=solid label="'4'"]
  1824 -> 394 [style=solid label="'5'"]
  1824 -> 395 [style=solid label="'6'"]
  1824 -> 396 [style=solid label="'7'"]
  1824 -> 397 [style=solid label="'8'"]
  1824 -> 398 [style=solid label="'9'"]
  1824 -> 205 [style=solid label="'u'"]
  1824 -> 206 [style=solid label="'U'"]
  1824 -> 207 [style=solid label="'L'"]
  1824 -> 208 [style=solid label="'R'"]
  1824 -> 399 [style=dashed label="additive-expression"]
  1824 -> 400 [style=dashed label="and-expression"]
  1824 -> 1134 [style=dashed label="assignment-expression"]
  1824 -> 401 [style=dashed label="await-expression"]
  1824 -> 402 [style=dashed label="binary-literal"]
  1824 -> 403 [style=dashed label="boolean-literal"]
  1824 -> 1135 [style=dashed label="braced-init-list"]
  1824 -> 404 [style=dashed label="cast-expression"]
  1824 -> 405 [style=dashed label="character-literal"]
  1824 -> 65 [style=dashed label="class-name"]
  1824 -> 406 [style=dashed label="compare-expression"]
  1824 -> 67 [style=dashed label="concept-name"]
  1824 -> 526 [style=dashed label="conditional-expression"]
  1824 -> 68 [style=dashed label="conversion-function-id"]
  1824 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1824 -> 410 [style=dashed label="decimal-literal"]
  1824 -> 76 [style=dashed label="decltype-specifier"]
  1824 -> 411 [style=dashed label="delete-expression"]
  1824 -> 412 [style=dashed label="digit"]
  1824 -> 413 [style=dashed label="digit-sequence"]
  1824 -> 414 [style=dashed label="encoding-prefix"]
  1824 -> 84 [style=dashed label="enum-name"]
  1824 -> 415 [style=dashed label="equality-expression"]
  1824 -> 416 [style=dashed label="exclusive-or-expression"]
  1824 -> 417 [style=dashed label="floating-point-literal"]
  1824 -> 418 [style=dashed label="fold-expression"]
  1824 -> 419 [style=dashed label="fractional-constant"]
  1824 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1824 -> 421 [style=dashed label="hexadecimal-literal"]
  1824 -> 422 [style=dashed label="hexadecimal-prefix"]
  1824 -> 423 [style=dashed label="id-expression"]
  1824 -> 424 [style=dashed label="inclusive-or-expression"]
  1824 -> 1901 [style=dashed label="initializer-clause"]
  1824 -> 425 [style=dashed label="integer-literal"]
  1824 -> 426 [style=dashed label="lambda-expression"]
  1824 -> 427 [style=dashed label="lambda-introducer"]
  1824 -> 428 [style=dashed label="literal"]
  1824 -> 95 [style=dashed label="literal-operator-id"]
  1824 -> 429 [style=dashed label="logical-and-expression"]
  1824 -> 528 [style=dashed label="logical-or-expression"]
  1824 -> 431 [style=dashed label="multiplicative-expression"]
  1824 -> 99 [style=dashed label="namespace-alias"]
  1824 -> 102 [style=dashed label="namespace-name"]
  1824 -> 432 [style=dashed label="nested-name-specifier"]
  1824 -> 433 [style=dashed label="new-expression"]
  1824 -> 434 [style=dashed label="noexcept-expression"]
  1824 -> 435 [style=dashed label="nonzero-digit"]
  1824 -> 436 [style=dashed label="octal-literal"]
  1824 -> 108 [style=dashed label="operator-function-id"]
  1824 -> 109 [style=dashed label="placeholder-type-specifier"]
  1824 -> 437 [style=dashed label="pm-expression"]
  1824 -> 438 [style=dashed label="pointer-literal"]
  1824 -> 439 [style=dashed label="postfix-expression"]
  1824 -> 440 [style=dashed label="primary-expression"]
  1824 -> 112 [style=dashed label="qualified-id"]
  1824 -> 441 [style=dashed label="relational-expression"]
  1824 -> 442 [style=dashed label="requires-expression"]
  1824 -> 443 [style=dashed label="shift-expression"]
  1824 -> 114 [style=dashed label="simple-template-id"]
  1824 -> 529 [style=dashed label="simple-type-specifier"]
  1824 -> 445 [style=dashed label="string-literal"]
  1824 -> 120 [style=dashed label="template-id"]
  1824 -> 215 [style=dashed label="template-name"]
  1824 -> 530 [style=dashed label="throw-expression"]
  1824 -> 123 [style=dashed label="type-constraint"]
  1824 -> 124 [style=dashed label="type-name"]
  1824 -> 126 [style=dashed label="typedef-name"]
  1824 -> 531 [style=dashed label="typename-specifier"]
  1824 -> 449 [style=dashed label="unary-expression"]
  1824 -> 450 [style=dashed label="unary-operator"]
  1824 -> 129 [style=dashed label="unqualified-id"]
  1824 -> 451 [style=dashed label="user-defined-character-literal"]
  1824 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1824 -> 453 [style=dashed label="user-defined-integer-literal"]
  1824 -> 454 [style=dashed label="user-defined-literal"]
  1824 -> 455 [style=dashed label="user-defined-string-literal"]
  1824 -> 532 [style=dashed label="yield-expression"]
  1825 [label="State 1825\n\l822 parameter-declaration: attribute-specifier-seq decl-specifier-seq abstract-declarator EQ initializer-clause •\l"]
  1825 -> "1825R822" [style=solid]
 "1825R822" [label="R822", fillcolor=3, shape=diamond, style=filled]
  1826 [label="State 1826\n\l806 parameter-declaration: attribute-specifier-seq decl-specifier-seq declarator EQ initializer-clause •\l"]
  1826 -> "1826R806" [style=solid]
 "1826R806" [label="R806", fillcolor=3, shape=diamond, style=filled]
  1827 [label="State 1827\n\l1098 type-parameter: template-head type-parameter-key IDENTIFIER EQ id-expression •\l"]
  1827 -> "1827R1098" [style=solid]
 "1827R1098" [label="R1098", fillcolor=3, shape=diamond, style=filled]
  1828 [label="State 1828\n\l421 hex-quad: hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit •\l"]
  1828 -> "1828R421" [style=solid]
 "1828R421" [label="R421", fillcolor=3, shape=diamond, style=filled]
  1829 [label="State 1829\n\l645 named-namespace-definition: INLINE NAMESPACE attribute-specifier-seq IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE •\l"]
  1829 -> "1829R645" [style=solid]
 "1829R645" [label="R645", fillcolor=3, shape=diamond, style=filled]
  1830 [label="State 1830\n\l662 nested-namespace-definition: NAMESPACE enclosing-namespace-specifier SCOPE IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE •\l"]
  1830 -> "1830R662" [style=solid]
 "1830R662" [label="R662", fillcolor=3, shape=diamond, style=filled]
  1831 [label="State 1831\n\l663 nested-namespace-definition: NAMESPACE enclosing-namespace-specifier SCOPE INLINE IDENTIFIER OPEN_BRACE namespace-body • CLOSE_BRACE\l"]
  1831 -> 1902 [style=solid label="CLOSE_BRACE"]
  1832 [label="State 1832\n\l1025 static_assert-declaration: STATIC_ASSERT OPEN_PAREN constant-expression COMMA string-literal CLOSE_PAREN SEMICOLON •\l"]
  1832 -> "1832R1025" [style=solid]
 "1832R1025" [label="R1025", fillcolor=3, shape=diamond, style=filled]
  1833 [label="State 1833\n\l966 simple-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON •\l"]
  1833 -> "1833R966" [style=solid]
 "1833R966" [label="R966", fillcolor=3, shape=diamond, style=filled]
  1834 [label="State 1834\n\l968 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer • SEMICOLON\l"]
  1834 -> 1903 [style=solid label="SEMICOLON"]
  1835 [label="State 1835\n\l611 member-declarator: IDENTIFIER attribute-specifier-seq COLON constant-expression brace-or-equal-initializer •\l"]
  1835 -> "1835R611" [style=solid]
 "1835R611" [label="R611", fillcolor=3, shape=diamond, style=filled]
  1836 [label="State 1836\n\l612 member-declarator: attribute-specifier-seq COLON constant-expression brace-or-equal-initializer •\l"]
  1836 -> "1836R612" [style=solid]
 "1836R612" [label="R612", fillcolor=3, shape=diamond, style=filled]
  1837 [label="State 1837\n\l905 pure-specifier: EQ • '0'\l"]
  1837 -> 1715 [style=solid label="'0'"]
  1838 [label="State 1838\n\l484 initializer-list: initializer-list COMMA initializer-clause ELLIPSIS •\l"]
  1838 -> "1838R484" [style=solid]
 "1838R484" [label="R484", fillcolor=3, shape=diamond, style=filled]
  1839 [label="State 1839\n\l969 simple-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON •\l"]
  1839 -> "1839R969" [style=solid]
 "1839R969" [label="R969", fillcolor=3, shape=diamond, style=filled]
  1840 [label="State 1840\n\l165 condition: attribute-specifier-seq decl-specifier-seq declarator • brace-or-equal-initializer\l"]
  1840 -> 1273 [style=solid label="EQ"]
  1840 -> 935 [style=solid label="OPEN_BRACE"]
  1840 -> 1904 [style=dashed label="brace-or-equal-initializer"]
  1840 -> 646 [style=dashed label="braced-init-list"]
  1841 [label="State 1841\n\l505 iteration-statement: WHILE OPEN_PAREN condition CLOSE_PAREN statement •\l"]
  1841 -> "1841R505" [style=solid]
 "1841R505" [label="R505", fillcolor=3, shape=diamond, style=filled]
  1842 [label="State 1842\n\l166 condition: decl-specifier-seq declarator brace-or-equal-initializer •\l"]
  1842 -> "1842R166" [style=solid]
 "1842R166" [label="R166", fillcolor=3, shape=diamond, style=filled]
  1843 [label="State 1843\n\l335 expression: expression • COMMA assignment-expression\l506 iteration-statement: DO statement WHILE OPEN_PAREN expression • CLOSE_PAREN SEMICOLON\l"]
  1843 -> 1905 [style=solid label="CLOSE_PAREN"]
  1843 -> 1029 [style=solid label="COMMA"]
  1844 [label="State 1844\n\l382 for-range-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE • identifier-list CLOSE_SQUARE\l966 simple-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE • identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1844 -> 640 [style=solid label="IDENTIFIER"]
  1844 -> 1906 [style=dashed label="identifier-list"]
  1845 [label="State 1845\n\l380 for-range-declaration: attribute-specifier-seq decl-specifier-seq declarator •\l469 init-declarator: declarator •\l470                | declarator • initializer\l471                | declarator • requires-clause\l"]
  1845 -> 1273 [style=solid label="EQ"]
  1845 -> 643 [style=solid label="OPEN_PAREN"]
  1845 -> 935 [style=solid label="OPEN_BRACE"]
  1845 -> 292 [style=solid label="REQUIRES"]
  1845 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1845 -> 646 [style=dashed label="braced-init-list"]
  1845 -> 648 [style=dashed label="initializer"]
  1845 -> 1522 [style=dashed label="requires-clause"]
  1845 -> "1845R380" [label="[COLON]", style=solid]
 "1845R380" [label="R380", fillcolor=3, shape=diamond, style=filled]
  1845 -> "1845R469" [style=solid]
 "1845R469" [label="R469", fillcolor=3, shape=diamond, style=filled]
  1846 [label="State 1846\n\l384 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier • OPEN_SQUARE identifier-list CLOSE_SQUARE\l968 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier • OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1846 -> 1907 [style=solid label="OPEN_SQUARE"]
  1847 [label="State 1847\n\l383 for-range-declaration: decl-specifier-seq OPEN_SQUARE identifier-list • CLOSE_SQUARE\l462 identifier-list: identifier-list • COMMA IDENTIFIER\l967 simple-declaration: decl-specifier-seq OPEN_SQUARE identifier-list • CLOSE_SQUARE initializer SEMICOLON\l"]
  1847 -> 1131 [style=solid label="COMMA"]
  1847 -> 1908 [style=solid label="CLOSE_SQUARE"]
  1848 [label="State 1848\n\l385 for-range-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE • identifier-list CLOSE_SQUARE\l969 simple-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE • identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1848 -> 640 [style=solid label="IDENTIFIER"]
  1848 -> 1909 [style=dashed label="identifier-list"]
  1849 [label="State 1849\n\l386 for-range-initializer: expr-or-braced-init-list •\l"]
  1849 -> "1849R386" [style=solid]
 "1849R386" [label="R386", fillcolor=3, shape=diamond, style=filled]
  1850 [label="State 1850\n\l511 iteration-statement: FOR OPEN_PAREN for-range-declaration COLON for-range-initializer • CLOSE_PAREN statement\l"]
  1850 -> 1910 [style=solid label="CLOSE_PAREN"]
  1851 [label="State 1851\n\l507 iteration-statement: FOR OPEN_PAREN init-statement SEMICOLON CLOSE_PAREN • statement\l"]
  1851 -> 356 [style=solid label="PLUS"]
  1851 -> 357 [style=solid label="MINUS"]
  1851 -> 1 [style=solid label="USING"]
  1851 -> 661 [style=solid label="IDENTIFIER"]
  1851 -> 662 [style=solid label="SEMICOLON"]
  1851 -> 4 [style=solid label="ALIGNAS"]
  1851 -> 358 [style=solid label="OPEN_PAREN"]
  1851 -> 359 [style=solid label="AND"]
  1851 -> 8 [style=solid label="ASM"]
  1851 -> 360 [style=solid label="SCOPE"]
  1851 -> 663 [style=solid label="OPEN_SQUARE"]
  1851 -> 362 [style=solid label="CO_AWAIT"]
  1851 -> 289 [style=solid label="OPEN_BRACE"]
  1851 -> 11 [style=solid label="VIRTUAL"]
  1851 -> 363 [style=solid label="ZERO_LB"]
  1851 -> 364 [style=solid label="ZERO_HB"]
  1851 -> 365 [style=solid label="SINGLE_QUOTE"]
  1851 -> 366 [style=solid label="FALSE"]
  1851 -> 367 [style=solid label="TRUE"]
  1851 -> 12 [style=solid label="CLASS"]
  1851 -> 13 [style=solid label="STRUCT"]
  1851 -> 14 [style=solid label="UNION"]
  1851 -> 368 [style=solid label="NOEXCEPT"]
  1851 -> 17 [style=solid label="OPERATOR"]
  1851 -> 665 [style=solid label="CO_RETURN"]
  1851 -> 18 [style=solid label="CONST"]
  1851 -> 19 [style=solid label="VOLATILE"]
  1851 -> 20 [style=solid label="FRIEND"]
  1851 -> 21 [style=solid label="TYPEDEF"]
  1851 -> 22 [style=solid label="CONSTEXPR"]
  1851 -> 23 [style=solid label="CONSTEVAL"]
  1851 -> 24 [style=solid label="CONSTINIT"]
  1851 -> 258 [style=solid label="INLINE"]
  1851 -> 26 [style=solid label="DECLTYPE"]
  1851 -> 369 [style=solid label="DELETE"]
  1851 -> 370 [style=solid label="DOT"]
  1851 -> 27 [style=solid label="ENUM"]
  1851 -> 184 [style=solid label="UNICODE_8"]
  1851 -> 259 [style=solid label="EXTERN"]
  1851 -> 29 [style=solid label="EXPLICIT"]
  1851 -> 371 [style=solid label="MULT"]
  1851 -> 666 [style=solid label="DEFAULT"]
  1851 -> 667 [style=solid label="TRY"]
  1851 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1851 -> 372 [style=solid label="ZERO_LX"]
  1851 -> 373 [style=solid label="ZERO_HX"]
  1851 -> 668 [style=solid label="WHILE"]
  1851 -> 669 [style=solid label="DO"]
  1851 -> 670 [style=solid label="FOR"]
  1851 -> 671 [style=solid label="BREAK"]
  1851 -> 672 [style=solid label="CONTINUE"]
  1851 -> 673 [style=solid label="RETURN"]
  1851 -> 674 [style=solid label="GOTO"]
  1851 -> 675 [style=solid label="CASE"]
  1851 -> 676 [style=solid label="NAMESPACE"]
  1851 -> 374 [style=solid label="REQUIRES"]
  1851 -> 375 [style=solid label="NEW"]
  1851 -> 376 [style=solid label="COMPL"]
  1851 -> 377 [style=solid label="NOT"]
  1851 -> 378 [style=solid label="PLUS_PLUS"]
  1851 -> 379 [style=solid label="MINUS_MINUS"]
  1851 -> 380 [style=solid label="THIS"]
  1851 -> 36 [style=solid label="AUTO"]
  1851 -> 381 [style=solid label="NULLPTR"]
  1851 -> 382 [style=solid label="DYNAMIC_CAST"]
  1851 -> 383 [style=solid label="STATIC_CAST"]
  1851 -> 384 [style=solid label="REINTERPRET_CAST"]
  1851 -> 385 [style=solid label="CONST_CAST"]
  1851 -> 386 [style=solid label="TYPEID"]
  1851 -> 677 [style=solid label="IF"]
  1851 -> 678 [style=solid label="SWITCH"]
  1851 -> 37 [style=solid label="CHAR"]
  1851 -> 38 [style=solid label="CHAR8_T"]
  1851 -> 39 [style=solid label="CHAR16_T"]
  1851 -> 40 [style=solid label="CHAR32_T"]
  1851 -> 41 [style=solid label="WCHAR_T"]
  1851 -> 42 [style=solid label="BOOL"]
  1851 -> 43 [style=solid label="SHORT"]
  1851 -> 44 [style=solid label="INT"]
  1851 -> 45 [style=solid label="LONG"]
  1851 -> 46 [style=solid label="SIGNED"]
  1851 -> 47 [style=solid label="UNSIGNED"]
  1851 -> 48 [style=solid label="FLOAT"]
  1851 -> 49 [style=solid label="DOUBLE"]
  1851 -> 50 [style=solid label="VOID"]
  1851 -> 51 [style=solid label="STATIC_ASSERT"]
  1851 -> 52 [style=solid label="STATIC"]
  1851 -> 53 [style=solid label="THREAD_LOCAL"]
  1851 -> 54 [style=solid label="MUTABLE"]
  1851 -> 523 [style=solid label="THROW"]
  1851 -> 55 [style=solid label="TYPENAME"]
  1851 -> 387 [style=solid label="SIZEOF"]
  1851 -> 388 [style=solid label="ALIGNOF"]
  1851 -> 524 [style=solid label="CO_YIELD"]
  1851 -> 389 [style=solid label="'0'"]
  1851 -> 390 [style=solid label="'1'"]
  1851 -> 391 [style=solid label="'2'"]
  1851 -> 392 [style=solid label="'3'"]
  1851 -> 393 [style=solid label="'4'"]
  1851 -> 394 [style=solid label="'5'"]
  1851 -> 395 [style=solid label="'6'"]
  1851 -> 396 [style=solid label="'7'"]
  1851 -> 397 [style=solid label="'8'"]
  1851 -> 398 [style=solid label="'9'"]
  1851 -> 205 [style=solid label="'u'"]
  1851 -> 206 [style=solid label="'U'"]
  1851 -> 207 [style=solid label="'L'"]
  1851 -> 208 [style=solid label="'R'"]
  1851 -> 399 [style=dashed label="additive-expression"]
  1851 -> 56 [style=dashed label="alias-declaration"]
  1851 -> 57 [style=dashed label="alignment-specifier"]
  1851 -> 400 [style=dashed label="and-expression"]
  1851 -> 58 [style=dashed label="asm-declaration"]
  1851 -> 525 [style=dashed label="assignment-expression"]
  1851 -> 60 [style=dashed label="attribute-specifier"]
  1851 -> 679 [style=dashed label="attribute-specifier-seq"]
  1851 -> 401 [style=dashed label="await-expression"]
  1851 -> 402 [style=dashed label="binary-literal"]
  1851 -> 680 [style=dashed label="block-declaration"]
  1851 -> 403 [style=dashed label="boolean-literal"]
  1851 -> 404 [style=dashed label="cast-expression"]
  1851 -> 405 [style=dashed label="character-literal"]
  1851 -> 63 [style=dashed label="class-head"]
  1851 -> 64 [style=dashed label="class-key"]
  1851 -> 65 [style=dashed label="class-name"]
  1851 -> 66 [style=dashed label="class-specifier"]
  1851 -> 406 [style=dashed label="compare-expression"]
  1851 -> 681 [style=dashed label="compound-statement"]
  1851 -> 67 [style=dashed label="concept-name"]
  1851 -> 526 [style=dashed label="conditional-expression"]
  1851 -> 68 [style=dashed label="conversion-function-id"]
  1851 -> 682 [style=dashed label="coroutine-return-statement"]
  1851 -> 69 [style=dashed label="cv-qualifier"]
  1851 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1851 -> 410 [style=dashed label="decimal-literal"]
  1851 -> 70 [style=dashed label="decl-specifier"]
  1851 -> 683 [style=dashed label="decl-specifier-seq"]
  1851 -> 684 [style=dashed label="declaration-statement"]
  1851 -> 76 [style=dashed label="decltype-specifier"]
  1851 -> 78 [style=dashed label="defining-type-specifier"]
  1851 -> 411 [style=dashed label="delete-expression"]
  1851 -> 412 [style=dashed label="digit"]
  1851 -> 413 [style=dashed label="digit-sequence"]
  1851 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1851 -> 80 [style=dashed label="elaborated-type-specifier"]
  1851 -> 414 [style=dashed label="encoding-prefix"]
  1851 -> 82 [style=dashed label="enum-head"]
  1851 -> 83 [style=dashed label="enum-key"]
  1851 -> 84 [style=dashed label="enum-name"]
  1851 -> 85 [style=dashed label="enum-specifier"]
  1851 -> 415 [style=dashed label="equality-expression"]
  1851 -> 416 [style=dashed label="exclusive-or-expression"]
  1851 -> 264 [style=dashed label="explicit-specifier"]
  1851 -> 685 [style=dashed label="expression"]
  1851 -> 686 [style=dashed label="expression-statement"]
  1851 -> 417 [style=dashed label="floating-point-literal"]
  1851 -> 418 [style=dashed label="fold-expression"]
  1851 -> 419 [style=dashed label="fractional-constant"]
  1851 -> 91 [style=dashed label="function-specifier"]
  1851 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1851 -> 421 [style=dashed label="hexadecimal-literal"]
  1851 -> 422 [style=dashed label="hexadecimal-prefix"]
  1851 -> 423 [style=dashed label="id-expression"]
  1851 -> 424 [style=dashed label="inclusive-or-expression"]
  1851 -> 425 [style=dashed label="integer-literal"]
  1851 -> 687 [style=dashed label="iteration-statement"]
  1851 -> 688 [style=dashed label="jump-statement"]
  1851 -> 689 [style=dashed label="labeled-statement"]
  1851 -> 426 [style=dashed label="lambda-expression"]
  1851 -> 427 [style=dashed label="lambda-introducer"]
  1851 -> 428 [style=dashed label="literal"]
  1851 -> 95 [style=dashed label="literal-operator-id"]
  1851 -> 429 [style=dashed label="logical-and-expression"]
  1851 -> 528 [style=dashed label="logical-or-expression"]
  1851 -> 431 [style=dashed label="multiplicative-expression"]
  1851 -> 99 [style=dashed label="namespace-alias"]
  1851 -> 100 [style=dashed label="namespace-alias-definition"]
  1851 -> 102 [style=dashed label="namespace-name"]
  1851 -> 432 [style=dashed label="nested-name-specifier"]
  1851 -> 433 [style=dashed label="new-expression"]
  1851 -> 434 [style=dashed label="noexcept-expression"]
  1851 -> 435 [style=dashed label="nonzero-digit"]
  1851 -> 436 [style=dashed label="octal-literal"]
  1851 -> 107 [style=dashed label="opaque-enum-declaration"]
  1851 -> 108 [style=dashed label="operator-function-id"]
  1851 -> 109 [style=dashed label="placeholder-type-specifier"]
  1851 -> 437 [style=dashed label="pm-expression"]
  1851 -> 438 [style=dashed label="pointer-literal"]
  1851 -> 439 [style=dashed label="postfix-expression"]
  1851 -> 440 [style=dashed label="primary-expression"]
  1851 -> 112 [style=dashed label="qualified-id"]
  1851 -> 441 [style=dashed label="relational-expression"]
  1851 -> 442 [style=dashed label="requires-expression"]
  1851 -> 690 [style=dashed label="selection-statement"]
  1851 -> 443 [style=dashed label="shift-expression"]
  1851 -> 113 [style=dashed label="simple-declaration"]
  1851 -> 114 [style=dashed label="simple-template-id"]
  1851 -> 444 [style=dashed label="simple-type-specifier"]
  1851 -> 1911 [style=dashed label="statement"]
  1851 -> 116 [style=dashed label="static_assert-declaration"]
  1851 -> 117 [style=dashed label="storage-class-specifier"]
  1851 -> 445 [style=dashed label="string-literal"]
  1851 -> 120 [style=dashed label="template-id"]
  1851 -> 215 [style=dashed label="template-name"]
  1851 -> 530 [style=dashed label="throw-expression"]
  1851 -> 693 [style=dashed label="try-block"]
  1851 -> 123 [style=dashed label="type-constraint"]
  1851 -> 124 [style=dashed label="type-name"]
  1851 -> 125 [style=dashed label="type-specifier"]
  1851 -> 126 [style=dashed label="typedef-name"]
  1851 -> 448 [style=dashed label="typename-specifier"]
  1851 -> 449 [style=dashed label="unary-expression"]
  1851 -> 450 [style=dashed label="unary-operator"]
  1851 -> 129 [style=dashed label="unqualified-id"]
  1851 -> 451 [style=dashed label="user-defined-character-literal"]
  1851 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1851 -> 453 [style=dashed label="user-defined-integer-literal"]
  1851 -> 454 [style=dashed label="user-defined-literal"]
  1851 -> 455 [style=dashed label="user-defined-string-literal"]
  1851 -> 130 [style=dashed label="using-declaration"]
  1851 -> 131 [style=dashed label="using-directive"]
  1851 -> 132 [style=dashed label="using-enum-declaration"]
  1851 -> 532 [style=dashed label="yield-expression"]
  1852 [label="State 1852\n\l335 expression: expression • COMMA assignment-expression\l509 iteration-statement: FOR OPEN_PAREN init-statement SEMICOLON expression • CLOSE_PAREN statement\l"]
  1852 -> 1912 [style=solid label="CLOSE_PAREN"]
  1852 -> 1029 [style=solid label="COMMA"]
  1853 [label="State 1853\n\l165 condition: attribute-specifier-seq decl-specifier-seq • declarator brace-or-equal-initializer\l380 for-range-declaration: attribute-specifier-seq decl-specifier-seq • declarator\l382                      | attribute-specifier-seq decl-specifier-seq • OPEN_SQUARE identifier-list CLOSE_SQUARE\l384                      | attribute-specifier-seq decl-specifier-seq • ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE\l"]
  1853 -> 147 [style=solid label="IDENTIFIER"]
  1853 -> 5 [style=solid label="OPEN_PAREN"]
  1853 -> 6 [style=solid label="ELLIPSIS"]
  1853 -> 278 [style=solid label="AND"]
  1853 -> 9 [style=solid label="SCOPE"]
  1853 -> 1913 [style=solid label="OPEN_SQUARE"]
  1853 -> 280 [style=solid label="AND_AND"]
  1853 -> 17 [style=solid label="OPERATOR"]
  1853 -> 134 [style=solid label="DECLTYPE"]
  1853 -> 31 [style=solid label="MULT"]
  1853 -> 35 [style=solid label="COMPL"]
  1853 -> 65 [style=dashed label="class-name"]
  1853 -> 68 [style=dashed label="conversion-function-id"]
  1853 -> 1914 [style=dashed label="declarator"]
  1853 -> 75 [style=dashed label="declarator-id"]
  1853 -> 138 [style=dashed label="decltype-specifier"]
  1853 -> 84 [style=dashed label="enum-name"]
  1853 -> 93 [style=dashed label="id-expression"]
  1853 -> 95 [style=dashed label="literal-operator-id"]
  1853 -> 99 [style=dashed label="namespace-alias"]
  1853 -> 102 [style=dashed label="namespace-name"]
  1853 -> 148 [style=dashed label="nested-name-specifier"]
  1853 -> 106 [style=dashed label="noptr-declarator"]
  1853 -> 108 [style=dashed label="operator-function-id"]
  1853 -> 110 [style=dashed label="ptr-declarator"]
  1853 -> 111 [style=dashed label="ptr-operator"]
  1853 -> 112 [style=dashed label="qualified-id"]
  1853 -> 1915 [style=dashed label="ref-qualifier"]
  1853 -> 114 [style=dashed label="simple-template-id"]
  1853 -> 120 [style=dashed label="template-id"]
  1853 -> 142 [style=dashed label="template-name"]
  1853 -> 143 [style=dashed label="type-name"]
  1853 -> 126 [style=dashed label="typedef-name"]
  1853 -> 129 [style=dashed label="unqualified-id"]
  1854 [label="State 1854\n\l508 iteration-statement: FOR OPEN_PAREN init-statement condition SEMICOLON • CLOSE_PAREN statement\l510                    | FOR OPEN_PAREN init-statement condition SEMICOLON • expression CLOSE_PAREN statement\l"]
  1854 -> 356 [style=solid label="PLUS"]
  1854 -> 357 [style=solid label="MINUS"]
  1854 -> 2 [style=solid label="IDENTIFIER"]
  1854 -> 358 [style=solid label="OPEN_PAREN"]
  1854 -> 1916 [style=solid label="CLOSE_PAREN"]
  1854 -> 359 [style=solid label="AND"]
  1854 -> 360 [style=solid label="SCOPE"]
  1854 -> 361 [style=solid label="OPEN_SQUARE"]
  1854 -> 362 [style=solid label="CO_AWAIT"]
  1854 -> 363 [style=solid label="ZERO_LB"]
  1854 -> 364 [style=solid label="ZERO_HB"]
  1854 -> 365 [style=solid label="SINGLE_QUOTE"]
  1854 -> 366 [style=solid label="FALSE"]
  1854 -> 367 [style=solid label="TRUE"]
  1854 -> 368 [style=solid label="NOEXCEPT"]
  1854 -> 17 [style=solid label="OPERATOR"]
  1854 -> 26 [style=solid label="DECLTYPE"]
  1854 -> 369 [style=solid label="DELETE"]
  1854 -> 370 [style=solid label="DOT"]
  1854 -> 184 [style=solid label="UNICODE_8"]
  1854 -> 371 [style=solid label="MULT"]
  1854 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1854 -> 372 [style=solid label="ZERO_LX"]
  1854 -> 373 [style=solid label="ZERO_HX"]
  1854 -> 374 [style=solid label="REQUIRES"]
  1854 -> 375 [style=solid label="NEW"]
  1854 -> 376 [style=solid label="COMPL"]
  1854 -> 377 [style=solid label="NOT"]
  1854 -> 378 [style=solid label="PLUS_PLUS"]
  1854 -> 379 [style=solid label="MINUS_MINUS"]
  1854 -> 380 [style=solid label="THIS"]
  1854 -> 36 [style=solid label="AUTO"]
  1854 -> 381 [style=solid label="NULLPTR"]
  1854 -> 382 [style=solid label="DYNAMIC_CAST"]
  1854 -> 383 [style=solid label="STATIC_CAST"]
  1854 -> 384 [style=solid label="REINTERPRET_CAST"]
  1854 -> 385 [style=solid label="CONST_CAST"]
  1854 -> 386 [style=solid label="TYPEID"]
  1854 -> 37 [style=solid label="CHAR"]
  1854 -> 38 [style=solid label="CHAR8_T"]
  1854 -> 39 [style=solid label="CHAR16_T"]
  1854 -> 40 [style=solid label="CHAR32_T"]
  1854 -> 41 [style=solid label="WCHAR_T"]
  1854 -> 42 [style=solid label="BOOL"]
  1854 -> 43 [style=solid label="SHORT"]
  1854 -> 44 [style=solid label="INT"]
  1854 -> 45 [style=solid label="LONG"]
  1854 -> 46 [style=solid label="SIGNED"]
  1854 -> 47 [style=solid label="UNSIGNED"]
  1854 -> 48 [style=solid label="FLOAT"]
  1854 -> 49 [style=solid label="DOUBLE"]
  1854 -> 50 [style=solid label="VOID"]
  1854 -> 523 [style=solid label="THROW"]
  1854 -> 55 [style=solid label="TYPENAME"]
  1854 -> 387 [style=solid label="SIZEOF"]
  1854 -> 388 [style=solid label="ALIGNOF"]
  1854 -> 524 [style=solid label="CO_YIELD"]
  1854 -> 389 [style=solid label="'0'"]
  1854 -> 390 [style=solid label="'1'"]
  1854 -> 391 [style=solid label="'2'"]
  1854 -> 392 [style=solid label="'3'"]
  1854 -> 393 [style=solid label="'4'"]
  1854 -> 394 [style=solid label="'5'"]
  1854 -> 395 [style=solid label="'6'"]
  1854 -> 396 [style=solid label="'7'"]
  1854 -> 397 [style=solid label="'8'"]
  1854 -> 398 [style=solid label="'9'"]
  1854 -> 205 [style=solid label="'u'"]
  1854 -> 206 [style=solid label="'U'"]
  1854 -> 207 [style=solid label="'L'"]
  1854 -> 208 [style=solid label="'R'"]
  1854 -> 399 [style=dashed label="additive-expression"]
  1854 -> 400 [style=dashed label="and-expression"]
  1854 -> 525 [style=dashed label="assignment-expression"]
  1854 -> 401 [style=dashed label="await-expression"]
  1854 -> 402 [style=dashed label="binary-literal"]
  1854 -> 403 [style=dashed label="boolean-literal"]
  1854 -> 404 [style=dashed label="cast-expression"]
  1854 -> 405 [style=dashed label="character-literal"]
  1854 -> 65 [style=dashed label="class-name"]
  1854 -> 406 [style=dashed label="compare-expression"]
  1854 -> 67 [style=dashed label="concept-name"]
  1854 -> 526 [style=dashed label="conditional-expression"]
  1854 -> 68 [style=dashed label="conversion-function-id"]
  1854 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1854 -> 410 [style=dashed label="decimal-literal"]
  1854 -> 76 [style=dashed label="decltype-specifier"]
  1854 -> 411 [style=dashed label="delete-expression"]
  1854 -> 412 [style=dashed label="digit"]
  1854 -> 413 [style=dashed label="digit-sequence"]
  1854 -> 414 [style=dashed label="encoding-prefix"]
  1854 -> 84 [style=dashed label="enum-name"]
  1854 -> 415 [style=dashed label="equality-expression"]
  1854 -> 416 [style=dashed label="exclusive-or-expression"]
  1854 -> 1917 [style=dashed label="expression"]
  1854 -> 417 [style=dashed label="floating-point-literal"]
  1854 -> 418 [style=dashed label="fold-expression"]
  1854 -> 419 [style=dashed label="fractional-constant"]
  1854 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1854 -> 421 [style=dashed label="hexadecimal-literal"]
  1854 -> 422 [style=dashed label="hexadecimal-prefix"]
  1854 -> 423 [style=dashed label="id-expression"]
  1854 -> 424 [style=dashed label="inclusive-or-expression"]
  1854 -> 425 [style=dashed label="integer-literal"]
  1854 -> 426 [style=dashed label="lambda-expression"]
  1854 -> 427 [style=dashed label="lambda-introducer"]
  1854 -> 428 [style=dashed label="literal"]
  1854 -> 95 [style=dashed label="literal-operator-id"]
  1854 -> 429 [style=dashed label="logical-and-expression"]
  1854 -> 528 [style=dashed label="logical-or-expression"]
  1854 -> 431 [style=dashed label="multiplicative-expression"]
  1854 -> 99 [style=dashed label="namespace-alias"]
  1854 -> 102 [style=dashed label="namespace-name"]
  1854 -> 432 [style=dashed label="nested-name-specifier"]
  1854 -> 433 [style=dashed label="new-expression"]
  1854 -> 434 [style=dashed label="noexcept-expression"]
  1854 -> 435 [style=dashed label="nonzero-digit"]
  1854 -> 436 [style=dashed label="octal-literal"]
  1854 -> 108 [style=dashed label="operator-function-id"]
  1854 -> 109 [style=dashed label="placeholder-type-specifier"]
  1854 -> 437 [style=dashed label="pm-expression"]
  1854 -> 438 [style=dashed label="pointer-literal"]
  1854 -> 439 [style=dashed label="postfix-expression"]
  1854 -> 440 [style=dashed label="primary-expression"]
  1854 -> 112 [style=dashed label="qualified-id"]
  1854 -> 441 [style=dashed label="relational-expression"]
  1854 -> 442 [style=dashed label="requires-expression"]
  1854 -> 443 [style=dashed label="shift-expression"]
  1854 -> 114 [style=dashed label="simple-template-id"]
  1854 -> 529 [style=dashed label="simple-type-specifier"]
  1854 -> 445 [style=dashed label="string-literal"]
  1854 -> 120 [style=dashed label="template-id"]
  1854 -> 215 [style=dashed label="template-name"]
  1854 -> 530 [style=dashed label="throw-expression"]
  1854 -> 123 [style=dashed label="type-constraint"]
  1854 -> 124 [style=dashed label="type-name"]
  1854 -> 126 [style=dashed label="typedef-name"]
  1854 -> 531 [style=dashed label="typename-specifier"]
  1854 -> 449 [style=dashed label="unary-expression"]
  1854 -> 450 [style=dashed label="unary-operator"]
  1854 -> 129 [style=dashed label="unqualified-id"]
  1854 -> 451 [style=dashed label="user-defined-character-literal"]
  1854 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1854 -> 453 [style=dashed label="user-defined-integer-literal"]
  1854 -> 454 [style=dashed label="user-defined-literal"]
  1854 -> 455 [style=dashed label="user-defined-string-literal"]
  1854 -> 532 [style=dashed label="yield-expression"]
  1855 [label="State 1855\n\l383 for-range-declaration: decl-specifier-seq OPEN_SQUARE • identifier-list CLOSE_SQUARE\l"]
  1855 -> 640 [style=solid label="IDENTIFIER"]
  1855 -> 1918 [style=dashed label="identifier-list"]
  1856 [label="State 1856\n\l166 condition: decl-specifier-seq declarator • brace-or-equal-initializer\l381 for-range-declaration: decl-specifier-seq declarator •\l"]
  1856 -> 1273 [style=solid label="EQ"]
  1856 -> 935 [style=solid label="OPEN_BRACE"]
  1856 -> 1842 [style=dashed label="brace-or-equal-initializer"]
  1856 -> 646 [style=dashed label="braced-init-list"]
  1856 -> "1856R381" [style=solid]
 "1856R381" [label="R381", fillcolor=3, shape=diamond, style=filled]
  1857 [label="State 1857\n\l385 for-range-declaration: decl-specifier-seq ref-qualifier • OPEN_SQUARE identifier-list CLOSE_SQUARE\l"]
  1857 -> 1919 [style=solid label="OPEN_SQUARE"]
  1858 [label="State 1858\n\l512 iteration-statement: FOR OPEN_PAREN init-statement for-range-declaration COLON • for-range-initializer CLOSE_PAREN statement\l"]
  1858 -> 356 [style=solid label="PLUS"]
  1858 -> 357 [style=solid label="MINUS"]
  1858 -> 2 [style=solid label="IDENTIFIER"]
  1858 -> 358 [style=solid label="OPEN_PAREN"]
  1858 -> 359 [style=solid label="AND"]
  1858 -> 360 [style=solid label="SCOPE"]
  1858 -> 361 [style=solid label="OPEN_SQUARE"]
  1858 -> 362 [style=solid label="CO_AWAIT"]
  1858 -> 935 [style=solid label="OPEN_BRACE"]
  1858 -> 363 [style=solid label="ZERO_LB"]
  1858 -> 364 [style=solid label="ZERO_HB"]
  1858 -> 365 [style=solid label="SINGLE_QUOTE"]
  1858 -> 366 [style=solid label="FALSE"]
  1858 -> 367 [style=solid label="TRUE"]
  1858 -> 368 [style=solid label="NOEXCEPT"]
  1858 -> 17 [style=solid label="OPERATOR"]
  1858 -> 26 [style=solid label="DECLTYPE"]
  1858 -> 369 [style=solid label="DELETE"]
  1858 -> 370 [style=solid label="DOT"]
  1858 -> 184 [style=solid label="UNICODE_8"]
  1858 -> 371 [style=solid label="MULT"]
  1858 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1858 -> 372 [style=solid label="ZERO_LX"]
  1858 -> 373 [style=solid label="ZERO_HX"]
  1858 -> 374 [style=solid label="REQUIRES"]
  1858 -> 375 [style=solid label="NEW"]
  1858 -> 376 [style=solid label="COMPL"]
  1858 -> 377 [style=solid label="NOT"]
  1858 -> 378 [style=solid label="PLUS_PLUS"]
  1858 -> 379 [style=solid label="MINUS_MINUS"]
  1858 -> 380 [style=solid label="THIS"]
  1858 -> 36 [style=solid label="AUTO"]
  1858 -> 381 [style=solid label="NULLPTR"]
  1858 -> 382 [style=solid label="DYNAMIC_CAST"]
  1858 -> 383 [style=solid label="STATIC_CAST"]
  1858 -> 384 [style=solid label="REINTERPRET_CAST"]
  1858 -> 385 [style=solid label="CONST_CAST"]
  1858 -> 386 [style=solid label="TYPEID"]
  1858 -> 37 [style=solid label="CHAR"]
  1858 -> 38 [style=solid label="CHAR8_T"]
  1858 -> 39 [style=solid label="CHAR16_T"]
  1858 -> 40 [style=solid label="CHAR32_T"]
  1858 -> 41 [style=solid label="WCHAR_T"]
  1858 -> 42 [style=solid label="BOOL"]
  1858 -> 43 [style=solid label="SHORT"]
  1858 -> 44 [style=solid label="INT"]
  1858 -> 45 [style=solid label="LONG"]
  1858 -> 46 [style=solid label="SIGNED"]
  1858 -> 47 [style=solid label="UNSIGNED"]
  1858 -> 48 [style=solid label="FLOAT"]
  1858 -> 49 [style=solid label="DOUBLE"]
  1858 -> 50 [style=solid label="VOID"]
  1858 -> 523 [style=solid label="THROW"]
  1858 -> 55 [style=solid label="TYPENAME"]
  1858 -> 387 [style=solid label="SIZEOF"]
  1858 -> 388 [style=solid label="ALIGNOF"]
  1858 -> 524 [style=solid label="CO_YIELD"]
  1858 -> 389 [style=solid label="'0'"]
  1858 -> 390 [style=solid label="'1'"]
  1858 -> 391 [style=solid label="'2'"]
  1858 -> 392 [style=solid label="'3'"]
  1858 -> 393 [style=solid label="'4'"]
  1858 -> 394 [style=solid label="'5'"]
  1858 -> 395 [style=solid label="'6'"]
  1858 -> 396 [style=solid label="'7'"]
  1858 -> 397 [style=solid label="'8'"]
  1858 -> 398 [style=solid label="'9'"]
  1858 -> 205 [style=solid label="'u'"]
  1858 -> 206 [style=solid label="'U'"]
  1858 -> 207 [style=solid label="'L'"]
  1858 -> 208 [style=solid label="'R'"]
  1858 -> 399 [style=dashed label="additive-expression"]
  1858 -> 400 [style=dashed label="and-expression"]
  1858 -> 525 [style=dashed label="assignment-expression"]
  1858 -> 401 [style=dashed label="await-expression"]
  1858 -> 402 [style=dashed label="binary-literal"]
  1858 -> 403 [style=dashed label="boolean-literal"]
  1858 -> 1160 [style=dashed label="braced-init-list"]
  1858 -> 404 [style=dashed label="cast-expression"]
  1858 -> 405 [style=dashed label="character-literal"]
  1858 -> 65 [style=dashed label="class-name"]
  1858 -> 406 [style=dashed label="compare-expression"]
  1858 -> 67 [style=dashed label="concept-name"]
  1858 -> 526 [style=dashed label="conditional-expression"]
  1858 -> 68 [style=dashed label="conversion-function-id"]
  1858 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1858 -> 410 [style=dashed label="decimal-literal"]
  1858 -> 76 [style=dashed label="decltype-specifier"]
  1858 -> 411 [style=dashed label="delete-expression"]
  1858 -> 412 [style=dashed label="digit"]
  1858 -> 413 [style=dashed label="digit-sequence"]
  1858 -> 414 [style=dashed label="encoding-prefix"]
  1858 -> 84 [style=dashed label="enum-name"]
  1858 -> 415 [style=dashed label="equality-expression"]
  1858 -> 416 [style=dashed label="exclusive-or-expression"]
  1858 -> 1849 [style=dashed label="expr-or-braced-init-list"]
  1858 -> 1162 [style=dashed label="expression"]
  1858 -> 417 [style=dashed label="floating-point-literal"]
  1858 -> 418 [style=dashed label="fold-expression"]
  1858 -> 1920 [style=dashed label="for-range-initializer"]
  1858 -> 419 [style=dashed label="fractional-constant"]
  1858 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1858 -> 421 [style=dashed label="hexadecimal-literal"]
  1858 -> 422 [style=dashed label="hexadecimal-prefix"]
  1858 -> 423 [style=dashed label="id-expression"]
  1858 -> 424 [style=dashed label="inclusive-or-expression"]
  1858 -> 425 [style=dashed label="integer-literal"]
  1858 -> 426 [style=dashed label="lambda-expression"]
  1858 -> 427 [style=dashed label="lambda-introducer"]
  1858 -> 428 [style=dashed label="literal"]
  1858 -> 95 [style=dashed label="literal-operator-id"]
  1858 -> 429 [style=dashed label="logical-and-expression"]
  1858 -> 528 [style=dashed label="logical-or-expression"]
  1858 -> 431 [style=dashed label="multiplicative-expression"]
  1858 -> 99 [style=dashed label="namespace-alias"]
  1858 -> 102 [style=dashed label="namespace-name"]
  1858 -> 432 [style=dashed label="nested-name-specifier"]
  1858 -> 433 [style=dashed label="new-expression"]
  1858 -> 434 [style=dashed label="noexcept-expression"]
  1858 -> 435 [style=dashed label="nonzero-digit"]
  1858 -> 436 [style=dashed label="octal-literal"]
  1858 -> 108 [style=dashed label="operator-function-id"]
  1858 -> 109 [style=dashed label="placeholder-type-specifier"]
  1858 -> 437 [style=dashed label="pm-expression"]
  1858 -> 438 [style=dashed label="pointer-literal"]
  1858 -> 439 [style=dashed label="postfix-expression"]
  1858 -> 440 [style=dashed label="primary-expression"]
  1858 -> 112 [style=dashed label="qualified-id"]
  1858 -> 441 [style=dashed label="relational-expression"]
  1858 -> 442 [style=dashed label="requires-expression"]
  1858 -> 443 [style=dashed label="shift-expression"]
  1858 -> 114 [style=dashed label="simple-template-id"]
  1858 -> 529 [style=dashed label="simple-type-specifier"]
  1858 -> 445 [style=dashed label="string-literal"]
  1858 -> 120 [style=dashed label="template-id"]
  1858 -> 215 [style=dashed label="template-name"]
  1858 -> 530 [style=dashed label="throw-expression"]
  1858 -> 123 [style=dashed label="type-constraint"]
  1858 -> 124 [style=dashed label="type-name"]
  1858 -> 126 [style=dashed label="typedef-name"]
  1858 -> 531 [style=dashed label="typename-specifier"]
  1858 -> 449 [style=dashed label="unary-expression"]
  1858 -> 450 [style=dashed label="unary-operator"]
  1858 -> 129 [style=dashed label="unqualified-id"]
  1858 -> 451 [style=dashed label="user-defined-character-literal"]
  1858 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1858 -> 453 [style=dashed label="user-defined-integer-literal"]
  1858 -> 454 [style=dashed label="user-defined-literal"]
  1858 -> 455 [style=dashed label="user-defined-string-literal"]
  1858 -> 532 [style=dashed label="yield-expression"]
  1859 [label="State 1859\n\l165 condition: attribute-specifier-seq decl-specifier-seq declarator • brace-or-equal-initializer\l469 init-declarator: declarator •\l470                | declarator • initializer\l471                | declarator • requires-clause\l"]
  1859 -> 1273 [style=solid label="EQ"]
  1859 -> 643 [style=solid label="OPEN_PAREN"]
  1859 -> 935 [style=solid label="OPEN_BRACE"]
  1859 -> 292 [style=solid label="REQUIRES"]
  1859 -> 1921 [style=dashed label="brace-or-equal-initializer"]
  1859 -> 646 [style=dashed label="braced-init-list"]
  1859 -> 648 [style=dashed label="initializer"]
  1859 -> 1522 [style=dashed label="requires-clause"]
  1859 -> "1859R469" [style=solid]
 "1859R469" [label="R469", fillcolor=3, shape=diamond, style=filled]
  1860 [label="State 1860\n\l938 selection-statement: IF OPEN_PAREN condition CLOSE_PAREN statement •\l942                    | IF OPEN_PAREN condition CLOSE_PAREN statement • ELSE statement\l"]
  1860 -> 1922 [style=solid label="ELSE"]
  1860 -> "1860R938d" [label="[ELSE]", style=solid]
 "1860R938d" [label="R938", fillcolor=5, shape=diamond, style=filled]
  1860 -> "1860R938" [style=solid]
 "1860R938" [label="R938", fillcolor=3, shape=diamond, style=filled]
  1861 [label="State 1861\n\l166 condition: decl-specifier-seq declarator brace-or-equal-initializer •\l477 initializer: brace-or-equal-initializer •\l"]
  1861 -> "1861R166" [label="[CLOSE_PAREN]", style=solid]
 "1861R166" [label="R166", fillcolor=3, shape=diamond, style=filled]
  1861 -> "1861R477" [style=solid]
 "1861R477" [label="R477", fillcolor=3, shape=diamond, style=filled]
  1862 [label="State 1862\n\l940 selection-statement: IF OPEN_PAREN init-statement condition CLOSE_PAREN • statement\l944                    | IF OPEN_PAREN init-statement condition CLOSE_PAREN • statement ELSE statement\l"]
  1862 -> 356 [style=solid label="PLUS"]
  1862 -> 357 [style=solid label="MINUS"]
  1862 -> 1 [style=solid label="USING"]
  1862 -> 661 [style=solid label="IDENTIFIER"]
  1862 -> 662 [style=solid label="SEMICOLON"]
  1862 -> 4 [style=solid label="ALIGNAS"]
  1862 -> 358 [style=solid label="OPEN_PAREN"]
  1862 -> 359 [style=solid label="AND"]
  1862 -> 8 [style=solid label="ASM"]
  1862 -> 360 [style=solid label="SCOPE"]
  1862 -> 663 [style=solid label="OPEN_SQUARE"]
  1862 -> 362 [style=solid label="CO_AWAIT"]
  1862 -> 289 [style=solid label="OPEN_BRACE"]
  1862 -> 11 [style=solid label="VIRTUAL"]
  1862 -> 363 [style=solid label="ZERO_LB"]
  1862 -> 364 [style=solid label="ZERO_HB"]
  1862 -> 365 [style=solid label="SINGLE_QUOTE"]
  1862 -> 366 [style=solid label="FALSE"]
  1862 -> 367 [style=solid label="TRUE"]
  1862 -> 12 [style=solid label="CLASS"]
  1862 -> 13 [style=solid label="STRUCT"]
  1862 -> 14 [style=solid label="UNION"]
  1862 -> 368 [style=solid label="NOEXCEPT"]
  1862 -> 17 [style=solid label="OPERATOR"]
  1862 -> 665 [style=solid label="CO_RETURN"]
  1862 -> 18 [style=solid label="CONST"]
  1862 -> 19 [style=solid label="VOLATILE"]
  1862 -> 20 [style=solid label="FRIEND"]
  1862 -> 21 [style=solid label="TYPEDEF"]
  1862 -> 22 [style=solid label="CONSTEXPR"]
  1862 -> 23 [style=solid label="CONSTEVAL"]
  1862 -> 24 [style=solid label="CONSTINIT"]
  1862 -> 258 [style=solid label="INLINE"]
  1862 -> 26 [style=solid label="DECLTYPE"]
  1862 -> 369 [style=solid label="DELETE"]
  1862 -> 370 [style=solid label="DOT"]
  1862 -> 27 [style=solid label="ENUM"]
  1862 -> 184 [style=solid label="UNICODE_8"]
  1862 -> 259 [style=solid label="EXTERN"]
  1862 -> 29 [style=solid label="EXPLICIT"]
  1862 -> 371 [style=solid label="MULT"]
  1862 -> 666 [style=solid label="DEFAULT"]
  1862 -> 667 [style=solid label="TRY"]
  1862 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1862 -> 372 [style=solid label="ZERO_LX"]
  1862 -> 373 [style=solid label="ZERO_HX"]
  1862 -> 668 [style=solid label="WHILE"]
  1862 -> 669 [style=solid label="DO"]
  1862 -> 670 [style=solid label="FOR"]
  1862 -> 671 [style=solid label="BREAK"]
  1862 -> 672 [style=solid label="CONTINUE"]
  1862 -> 673 [style=solid label="RETURN"]
  1862 -> 674 [style=solid label="GOTO"]
  1862 -> 675 [style=solid label="CASE"]
  1862 -> 676 [style=solid label="NAMESPACE"]
  1862 -> 374 [style=solid label="REQUIRES"]
  1862 -> 375 [style=solid label="NEW"]
  1862 -> 376 [style=solid label="COMPL"]
  1862 -> 377 [style=solid label="NOT"]
  1862 -> 378 [style=solid label="PLUS_PLUS"]
  1862 -> 379 [style=solid label="MINUS_MINUS"]
  1862 -> 380 [style=solid label="THIS"]
  1862 -> 36 [style=solid label="AUTO"]
  1862 -> 381 [style=solid label="NULLPTR"]
  1862 -> 382 [style=solid label="DYNAMIC_CAST"]
  1862 -> 383 [style=solid label="STATIC_CAST"]
  1862 -> 384 [style=solid label="REINTERPRET_CAST"]
  1862 -> 385 [style=solid label="CONST_CAST"]
  1862 -> 386 [style=solid label="TYPEID"]
  1862 -> 677 [style=solid label="IF"]
  1862 -> 678 [style=solid label="SWITCH"]
  1862 -> 37 [style=solid label="CHAR"]
  1862 -> 38 [style=solid label="CHAR8_T"]
  1862 -> 39 [style=solid label="CHAR16_T"]
  1862 -> 40 [style=solid label="CHAR32_T"]
  1862 -> 41 [style=solid label="WCHAR_T"]
  1862 -> 42 [style=solid label="BOOL"]
  1862 -> 43 [style=solid label="SHORT"]
  1862 -> 44 [style=solid label="INT"]
  1862 -> 45 [style=solid label="LONG"]
  1862 -> 46 [style=solid label="SIGNED"]
  1862 -> 47 [style=solid label="UNSIGNED"]
  1862 -> 48 [style=solid label="FLOAT"]
  1862 -> 49 [style=solid label="DOUBLE"]
  1862 -> 50 [style=solid label="VOID"]
  1862 -> 51 [style=solid label="STATIC_ASSERT"]
  1862 -> 52 [style=solid label="STATIC"]
  1862 -> 53 [style=solid label="THREAD_LOCAL"]
  1862 -> 54 [style=solid label="MUTABLE"]
  1862 -> 523 [style=solid label="THROW"]
  1862 -> 55 [style=solid label="TYPENAME"]
  1862 -> 387 [style=solid label="SIZEOF"]
  1862 -> 388 [style=solid label="ALIGNOF"]
  1862 -> 524 [style=solid label="CO_YIELD"]
  1862 -> 389 [style=solid label="'0'"]
  1862 -> 390 [style=solid label="'1'"]
  1862 -> 391 [style=solid label="'2'"]
  1862 -> 392 [style=solid label="'3'"]
  1862 -> 393 [style=solid label="'4'"]
  1862 -> 394 [style=solid label="'5'"]
  1862 -> 395 [style=solid label="'6'"]
  1862 -> 396 [style=solid label="'7'"]
  1862 -> 397 [style=solid label="'8'"]
  1862 -> 398 [style=solid label="'9'"]
  1862 -> 205 [style=solid label="'u'"]
  1862 -> 206 [style=solid label="'U'"]
  1862 -> 207 [style=solid label="'L'"]
  1862 -> 208 [style=solid label="'R'"]
  1862 -> 399 [style=dashed label="additive-expression"]
  1862 -> 56 [style=dashed label="alias-declaration"]
  1862 -> 57 [style=dashed label="alignment-specifier"]
  1862 -> 400 [style=dashed label="and-expression"]
  1862 -> 58 [style=dashed label="asm-declaration"]
  1862 -> 525 [style=dashed label="assignment-expression"]
  1862 -> 60 [style=dashed label="attribute-specifier"]
  1862 -> 679 [style=dashed label="attribute-specifier-seq"]
  1862 -> 401 [style=dashed label="await-expression"]
  1862 -> 402 [style=dashed label="binary-literal"]
  1862 -> 680 [style=dashed label="block-declaration"]
  1862 -> 403 [style=dashed label="boolean-literal"]
  1862 -> 404 [style=dashed label="cast-expression"]
  1862 -> 405 [style=dashed label="character-literal"]
  1862 -> 63 [style=dashed label="class-head"]
  1862 -> 64 [style=dashed label="class-key"]
  1862 -> 65 [style=dashed label="class-name"]
  1862 -> 66 [style=dashed label="class-specifier"]
  1862 -> 406 [style=dashed label="compare-expression"]
  1862 -> 681 [style=dashed label="compound-statement"]
  1862 -> 67 [style=dashed label="concept-name"]
  1862 -> 526 [style=dashed label="conditional-expression"]
  1862 -> 68 [style=dashed label="conversion-function-id"]
  1862 -> 682 [style=dashed label="coroutine-return-statement"]
  1862 -> 69 [style=dashed label="cv-qualifier"]
  1862 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1862 -> 410 [style=dashed label="decimal-literal"]
  1862 -> 70 [style=dashed label="decl-specifier"]
  1862 -> 683 [style=dashed label="decl-specifier-seq"]
  1862 -> 684 [style=dashed label="declaration-statement"]
  1862 -> 76 [style=dashed label="decltype-specifier"]
  1862 -> 78 [style=dashed label="defining-type-specifier"]
  1862 -> 411 [style=dashed label="delete-expression"]
  1862 -> 412 [style=dashed label="digit"]
  1862 -> 413 [style=dashed label="digit-sequence"]
  1862 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1862 -> 80 [style=dashed label="elaborated-type-specifier"]
  1862 -> 414 [style=dashed label="encoding-prefix"]
  1862 -> 82 [style=dashed label="enum-head"]
  1862 -> 83 [style=dashed label="enum-key"]
  1862 -> 84 [style=dashed label="enum-name"]
  1862 -> 85 [style=dashed label="enum-specifier"]
  1862 -> 415 [style=dashed label="equality-expression"]
  1862 -> 416 [style=dashed label="exclusive-or-expression"]
  1862 -> 264 [style=dashed label="explicit-specifier"]
  1862 -> 685 [style=dashed label="expression"]
  1862 -> 686 [style=dashed label="expression-statement"]
  1862 -> 417 [style=dashed label="floating-point-literal"]
  1862 -> 418 [style=dashed label="fold-expression"]
  1862 -> 419 [style=dashed label="fractional-constant"]
  1862 -> 91 [style=dashed label="function-specifier"]
  1862 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1862 -> 421 [style=dashed label="hexadecimal-literal"]
  1862 -> 422 [style=dashed label="hexadecimal-prefix"]
  1862 -> 423 [style=dashed label="id-expression"]
  1862 -> 424 [style=dashed label="inclusive-or-expression"]
  1862 -> 425 [style=dashed label="integer-literal"]
  1862 -> 687 [style=dashed label="iteration-statement"]
  1862 -> 688 [style=dashed label="jump-statement"]
  1862 -> 689 [style=dashed label="labeled-statement"]
  1862 -> 426 [style=dashed label="lambda-expression"]
  1862 -> 427 [style=dashed label="lambda-introducer"]
  1862 -> 428 [style=dashed label="literal"]
  1862 -> 95 [style=dashed label="literal-operator-id"]
  1862 -> 429 [style=dashed label="logical-and-expression"]
  1862 -> 528 [style=dashed label="logical-or-expression"]
  1862 -> 431 [style=dashed label="multiplicative-expression"]
  1862 -> 99 [style=dashed label="namespace-alias"]
  1862 -> 100 [style=dashed label="namespace-alias-definition"]
  1862 -> 102 [style=dashed label="namespace-name"]
  1862 -> 432 [style=dashed label="nested-name-specifier"]
  1862 -> 433 [style=dashed label="new-expression"]
  1862 -> 434 [style=dashed label="noexcept-expression"]
  1862 -> 435 [style=dashed label="nonzero-digit"]
  1862 -> 436 [style=dashed label="octal-literal"]
  1862 -> 107 [style=dashed label="opaque-enum-declaration"]
  1862 -> 108 [style=dashed label="operator-function-id"]
  1862 -> 109 [style=dashed label="placeholder-type-specifier"]
  1862 -> 437 [style=dashed label="pm-expression"]
  1862 -> 438 [style=dashed label="pointer-literal"]
  1862 -> 439 [style=dashed label="postfix-expression"]
  1862 -> 440 [style=dashed label="primary-expression"]
  1862 -> 112 [style=dashed label="qualified-id"]
  1862 -> 441 [style=dashed label="relational-expression"]
  1862 -> 442 [style=dashed label="requires-expression"]
  1862 -> 690 [style=dashed label="selection-statement"]
  1862 -> 443 [style=dashed label="shift-expression"]
  1862 -> 113 [style=dashed label="simple-declaration"]
  1862 -> 114 [style=dashed label="simple-template-id"]
  1862 -> 444 [style=dashed label="simple-type-specifier"]
  1862 -> 1923 [style=dashed label="statement"]
  1862 -> 116 [style=dashed label="static_assert-declaration"]
  1862 -> 117 [style=dashed label="storage-class-specifier"]
  1862 -> 445 [style=dashed label="string-literal"]
  1862 -> 120 [style=dashed label="template-id"]
  1862 -> 215 [style=dashed label="template-name"]
  1862 -> 530 [style=dashed label="throw-expression"]
  1862 -> 693 [style=dashed label="try-block"]
  1862 -> 123 [style=dashed label="type-constraint"]
  1862 -> 124 [style=dashed label="type-name"]
  1862 -> 125 [style=dashed label="type-specifier"]
  1862 -> 126 [style=dashed label="typedef-name"]
  1862 -> 448 [style=dashed label="typename-specifier"]
  1862 -> 449 [style=dashed label="unary-expression"]
  1862 -> 450 [style=dashed label="unary-operator"]
  1862 -> 129 [style=dashed label="unqualified-id"]
  1862 -> 451 [style=dashed label="user-defined-character-literal"]
  1862 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1862 -> 453 [style=dashed label="user-defined-integer-literal"]
  1862 -> 454 [style=dashed label="user-defined-literal"]
  1862 -> 455 [style=dashed label="user-defined-string-literal"]
  1862 -> 130 [style=dashed label="using-declaration"]
  1862 -> 131 [style=dashed label="using-directive"]
  1862 -> 132 [style=dashed label="using-enum-declaration"]
  1862 -> 532 [style=dashed label="yield-expression"]
  1863 [label="State 1863\n\l939 selection-statement: IF CONSTEXPR OPEN_PAREN condition CLOSE_PAREN • statement\l943                    | IF CONSTEXPR OPEN_PAREN condition CLOSE_PAREN • statement ELSE statement\l"]
  1863 -> 356 [style=solid label="PLUS"]
  1863 -> 357 [style=solid label="MINUS"]
  1863 -> 1 [style=solid label="USING"]
  1863 -> 661 [style=solid label="IDENTIFIER"]
  1863 -> 662 [style=solid label="SEMICOLON"]
  1863 -> 4 [style=solid label="ALIGNAS"]
  1863 -> 358 [style=solid label="OPEN_PAREN"]
  1863 -> 359 [style=solid label="AND"]
  1863 -> 8 [style=solid label="ASM"]
  1863 -> 360 [style=solid label="SCOPE"]
  1863 -> 663 [style=solid label="OPEN_SQUARE"]
  1863 -> 362 [style=solid label="CO_AWAIT"]
  1863 -> 289 [style=solid label="OPEN_BRACE"]
  1863 -> 11 [style=solid label="VIRTUAL"]
  1863 -> 363 [style=solid label="ZERO_LB"]
  1863 -> 364 [style=solid label="ZERO_HB"]
  1863 -> 365 [style=solid label="SINGLE_QUOTE"]
  1863 -> 366 [style=solid label="FALSE"]
  1863 -> 367 [style=solid label="TRUE"]
  1863 -> 12 [style=solid label="CLASS"]
  1863 -> 13 [style=solid label="STRUCT"]
  1863 -> 14 [style=solid label="UNION"]
  1863 -> 368 [style=solid label="NOEXCEPT"]
  1863 -> 17 [style=solid label="OPERATOR"]
  1863 -> 665 [style=solid label="CO_RETURN"]
  1863 -> 18 [style=solid label="CONST"]
  1863 -> 19 [style=solid label="VOLATILE"]
  1863 -> 20 [style=solid label="FRIEND"]
  1863 -> 21 [style=solid label="TYPEDEF"]
  1863 -> 22 [style=solid label="CONSTEXPR"]
  1863 -> 23 [style=solid label="CONSTEVAL"]
  1863 -> 24 [style=solid label="CONSTINIT"]
  1863 -> 258 [style=solid label="INLINE"]
  1863 -> 26 [style=solid label="DECLTYPE"]
  1863 -> 369 [style=solid label="DELETE"]
  1863 -> 370 [style=solid label="DOT"]
  1863 -> 27 [style=solid label="ENUM"]
  1863 -> 184 [style=solid label="UNICODE_8"]
  1863 -> 259 [style=solid label="EXTERN"]
  1863 -> 29 [style=solid label="EXPLICIT"]
  1863 -> 371 [style=solid label="MULT"]
  1863 -> 666 [style=solid label="DEFAULT"]
  1863 -> 667 [style=solid label="TRY"]
  1863 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1863 -> 372 [style=solid label="ZERO_LX"]
  1863 -> 373 [style=solid label="ZERO_HX"]
  1863 -> 668 [style=solid label="WHILE"]
  1863 -> 669 [style=solid label="DO"]
  1863 -> 670 [style=solid label="FOR"]
  1863 -> 671 [style=solid label="BREAK"]
  1863 -> 672 [style=solid label="CONTINUE"]
  1863 -> 673 [style=solid label="RETURN"]
  1863 -> 674 [style=solid label="GOTO"]
  1863 -> 675 [style=solid label="CASE"]
  1863 -> 676 [style=solid label="NAMESPACE"]
  1863 -> 374 [style=solid label="REQUIRES"]
  1863 -> 375 [style=solid label="NEW"]
  1863 -> 376 [style=solid label="COMPL"]
  1863 -> 377 [style=solid label="NOT"]
  1863 -> 378 [style=solid label="PLUS_PLUS"]
  1863 -> 379 [style=solid label="MINUS_MINUS"]
  1863 -> 380 [style=solid label="THIS"]
  1863 -> 36 [style=solid label="AUTO"]
  1863 -> 381 [style=solid label="NULLPTR"]
  1863 -> 382 [style=solid label="DYNAMIC_CAST"]
  1863 -> 383 [style=solid label="STATIC_CAST"]
  1863 -> 384 [style=solid label="REINTERPRET_CAST"]
  1863 -> 385 [style=solid label="CONST_CAST"]
  1863 -> 386 [style=solid label="TYPEID"]
  1863 -> 677 [style=solid label="IF"]
  1863 -> 678 [style=solid label="SWITCH"]
  1863 -> 37 [style=solid label="CHAR"]
  1863 -> 38 [style=solid label="CHAR8_T"]
  1863 -> 39 [style=solid label="CHAR16_T"]
  1863 -> 40 [style=solid label="CHAR32_T"]
  1863 -> 41 [style=solid label="WCHAR_T"]
  1863 -> 42 [style=solid label="BOOL"]
  1863 -> 43 [style=solid label="SHORT"]
  1863 -> 44 [style=solid label="INT"]
  1863 -> 45 [style=solid label="LONG"]
  1863 -> 46 [style=solid label="SIGNED"]
  1863 -> 47 [style=solid label="UNSIGNED"]
  1863 -> 48 [style=solid label="FLOAT"]
  1863 -> 49 [style=solid label="DOUBLE"]
  1863 -> 50 [style=solid label="VOID"]
  1863 -> 51 [style=solid label="STATIC_ASSERT"]
  1863 -> 52 [style=solid label="STATIC"]
  1863 -> 53 [style=solid label="THREAD_LOCAL"]
  1863 -> 54 [style=solid label="MUTABLE"]
  1863 -> 523 [style=solid label="THROW"]
  1863 -> 55 [style=solid label="TYPENAME"]
  1863 -> 387 [style=solid label="SIZEOF"]
  1863 -> 388 [style=solid label="ALIGNOF"]
  1863 -> 524 [style=solid label="CO_YIELD"]
  1863 -> 389 [style=solid label="'0'"]
  1863 -> 390 [style=solid label="'1'"]
  1863 -> 391 [style=solid label="'2'"]
  1863 -> 392 [style=solid label="'3'"]
  1863 -> 393 [style=solid label="'4'"]
  1863 -> 394 [style=solid label="'5'"]
  1863 -> 395 [style=solid label="'6'"]
  1863 -> 396 [style=solid label="'7'"]
  1863 -> 397 [style=solid label="'8'"]
  1863 -> 398 [style=solid label="'9'"]
  1863 -> 205 [style=solid label="'u'"]
  1863 -> 206 [style=solid label="'U'"]
  1863 -> 207 [style=solid label="'L'"]
  1863 -> 208 [style=solid label="'R'"]
  1863 -> 399 [style=dashed label="additive-expression"]
  1863 -> 56 [style=dashed label="alias-declaration"]
  1863 -> 57 [style=dashed label="alignment-specifier"]
  1863 -> 400 [style=dashed label="and-expression"]
  1863 -> 58 [style=dashed label="asm-declaration"]
  1863 -> 525 [style=dashed label="assignment-expression"]
  1863 -> 60 [style=dashed label="attribute-specifier"]
  1863 -> 679 [style=dashed label="attribute-specifier-seq"]
  1863 -> 401 [style=dashed label="await-expression"]
  1863 -> 402 [style=dashed label="binary-literal"]
  1863 -> 680 [style=dashed label="block-declaration"]
  1863 -> 403 [style=dashed label="boolean-literal"]
  1863 -> 404 [style=dashed label="cast-expression"]
  1863 -> 405 [style=dashed label="character-literal"]
  1863 -> 63 [style=dashed label="class-head"]
  1863 -> 64 [style=dashed label="class-key"]
  1863 -> 65 [style=dashed label="class-name"]
  1863 -> 66 [style=dashed label="class-specifier"]
  1863 -> 406 [style=dashed label="compare-expression"]
  1863 -> 681 [style=dashed label="compound-statement"]
  1863 -> 67 [style=dashed label="concept-name"]
  1863 -> 526 [style=dashed label="conditional-expression"]
  1863 -> 68 [style=dashed label="conversion-function-id"]
  1863 -> 682 [style=dashed label="coroutine-return-statement"]
  1863 -> 69 [style=dashed label="cv-qualifier"]
  1863 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1863 -> 410 [style=dashed label="decimal-literal"]
  1863 -> 70 [style=dashed label="decl-specifier"]
  1863 -> 683 [style=dashed label="decl-specifier-seq"]
  1863 -> 684 [style=dashed label="declaration-statement"]
  1863 -> 76 [style=dashed label="decltype-specifier"]
  1863 -> 78 [style=dashed label="defining-type-specifier"]
  1863 -> 411 [style=dashed label="delete-expression"]
  1863 -> 412 [style=dashed label="digit"]
  1863 -> 413 [style=dashed label="digit-sequence"]
  1863 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1863 -> 80 [style=dashed label="elaborated-type-specifier"]
  1863 -> 414 [style=dashed label="encoding-prefix"]
  1863 -> 82 [style=dashed label="enum-head"]
  1863 -> 83 [style=dashed label="enum-key"]
  1863 -> 84 [style=dashed label="enum-name"]
  1863 -> 85 [style=dashed label="enum-specifier"]
  1863 -> 415 [style=dashed label="equality-expression"]
  1863 -> 416 [style=dashed label="exclusive-or-expression"]
  1863 -> 264 [style=dashed label="explicit-specifier"]
  1863 -> 685 [style=dashed label="expression"]
  1863 -> 686 [style=dashed label="expression-statement"]
  1863 -> 417 [style=dashed label="floating-point-literal"]
  1863 -> 418 [style=dashed label="fold-expression"]
  1863 -> 419 [style=dashed label="fractional-constant"]
  1863 -> 91 [style=dashed label="function-specifier"]
  1863 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1863 -> 421 [style=dashed label="hexadecimal-literal"]
  1863 -> 422 [style=dashed label="hexadecimal-prefix"]
  1863 -> 423 [style=dashed label="id-expression"]
  1863 -> 424 [style=dashed label="inclusive-or-expression"]
  1863 -> 425 [style=dashed label="integer-literal"]
  1863 -> 687 [style=dashed label="iteration-statement"]
  1863 -> 688 [style=dashed label="jump-statement"]
  1863 -> 689 [style=dashed label="labeled-statement"]
  1863 -> 426 [style=dashed label="lambda-expression"]
  1863 -> 427 [style=dashed label="lambda-introducer"]
  1863 -> 428 [style=dashed label="literal"]
  1863 -> 95 [style=dashed label="literal-operator-id"]
  1863 -> 429 [style=dashed label="logical-and-expression"]
  1863 -> 528 [style=dashed label="logical-or-expression"]
  1863 -> 431 [style=dashed label="multiplicative-expression"]
  1863 -> 99 [style=dashed label="namespace-alias"]
  1863 -> 100 [style=dashed label="namespace-alias-definition"]
  1863 -> 102 [style=dashed label="namespace-name"]
  1863 -> 432 [style=dashed label="nested-name-specifier"]
  1863 -> 433 [style=dashed label="new-expression"]
  1863 -> 434 [style=dashed label="noexcept-expression"]
  1863 -> 435 [style=dashed label="nonzero-digit"]
  1863 -> 436 [style=dashed label="octal-literal"]
  1863 -> 107 [style=dashed label="opaque-enum-declaration"]
  1863 -> 108 [style=dashed label="operator-function-id"]
  1863 -> 109 [style=dashed label="placeholder-type-specifier"]
  1863 -> 437 [style=dashed label="pm-expression"]
  1863 -> 438 [style=dashed label="pointer-literal"]
  1863 -> 439 [style=dashed label="postfix-expression"]
  1863 -> 440 [style=dashed label="primary-expression"]
  1863 -> 112 [style=dashed label="qualified-id"]
  1863 -> 441 [style=dashed label="relational-expression"]
  1863 -> 442 [style=dashed label="requires-expression"]
  1863 -> 690 [style=dashed label="selection-statement"]
  1863 -> 443 [style=dashed label="shift-expression"]
  1863 -> 113 [style=dashed label="simple-declaration"]
  1863 -> 114 [style=dashed label="simple-template-id"]
  1863 -> 444 [style=dashed label="simple-type-specifier"]
  1863 -> 1924 [style=dashed label="statement"]
  1863 -> 116 [style=dashed label="static_assert-declaration"]
  1863 -> 117 [style=dashed label="storage-class-specifier"]
  1863 -> 445 [style=dashed label="string-literal"]
  1863 -> 120 [style=dashed label="template-id"]
  1863 -> 215 [style=dashed label="template-name"]
  1863 -> 530 [style=dashed label="throw-expression"]
  1863 -> 693 [style=dashed label="try-block"]
  1863 -> 123 [style=dashed label="type-constraint"]
  1863 -> 124 [style=dashed label="type-name"]
  1863 -> 125 [style=dashed label="type-specifier"]
  1863 -> 126 [style=dashed label="typedef-name"]
  1863 -> 448 [style=dashed label="typename-specifier"]
  1863 -> 449 [style=dashed label="unary-expression"]
  1863 -> 450 [style=dashed label="unary-operator"]
  1863 -> 129 [style=dashed label="unqualified-id"]
  1863 -> 451 [style=dashed label="user-defined-character-literal"]
  1863 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1863 -> 453 [style=dashed label="user-defined-integer-literal"]
  1863 -> 454 [style=dashed label="user-defined-literal"]
  1863 -> 455 [style=dashed label="user-defined-string-literal"]
  1863 -> 130 [style=dashed label="using-declaration"]
  1863 -> 131 [style=dashed label="using-directive"]
  1863 -> 132 [style=dashed label="using-enum-declaration"]
  1863 -> 532 [style=dashed label="yield-expression"]
  1864 [label="State 1864\n\l941 selection-statement: IF CONSTEXPR OPEN_PAREN init-statement condition • CLOSE_PAREN statement\l945                    | IF CONSTEXPR OPEN_PAREN init-statement condition • CLOSE_PAREN statement ELSE statement\l"]
  1864 -> 1925 [style=solid label="CLOSE_PAREN"]
  1865 [label="State 1865\n\l948 selection-statement: IF CONSTEVAL compound-statement ELSE statement •\l"]
  1865 -> "1865R948" [style=solid]
 "1865R948" [label="R948", fillcolor=3, shape=diamond, style=filled]
  1866 [label="State 1866\n\l949 selection-statement: IF NOT CONSTEVAL compound-statement ELSE • statement\l"]
  1866 -> 356 [style=solid label="PLUS"]
  1866 -> 357 [style=solid label="MINUS"]
  1866 -> 1 [style=solid label="USING"]
  1866 -> 661 [style=solid label="IDENTIFIER"]
  1866 -> 662 [style=solid label="SEMICOLON"]
  1866 -> 4 [style=solid label="ALIGNAS"]
  1866 -> 358 [style=solid label="OPEN_PAREN"]
  1866 -> 359 [style=solid label="AND"]
  1866 -> 8 [style=solid label="ASM"]
  1866 -> 360 [style=solid label="SCOPE"]
  1866 -> 663 [style=solid label="OPEN_SQUARE"]
  1866 -> 362 [style=solid label="CO_AWAIT"]
  1866 -> 289 [style=solid label="OPEN_BRACE"]
  1866 -> 11 [style=solid label="VIRTUAL"]
  1866 -> 363 [style=solid label="ZERO_LB"]
  1866 -> 364 [style=solid label="ZERO_HB"]
  1866 -> 365 [style=solid label="SINGLE_QUOTE"]
  1866 -> 366 [style=solid label="FALSE"]
  1866 -> 367 [style=solid label="TRUE"]
  1866 -> 12 [style=solid label="CLASS"]
  1866 -> 13 [style=solid label="STRUCT"]
  1866 -> 14 [style=solid label="UNION"]
  1866 -> 368 [style=solid label="NOEXCEPT"]
  1866 -> 17 [style=solid label="OPERATOR"]
  1866 -> 665 [style=solid label="CO_RETURN"]
  1866 -> 18 [style=solid label="CONST"]
  1866 -> 19 [style=solid label="VOLATILE"]
  1866 -> 20 [style=solid label="FRIEND"]
  1866 -> 21 [style=solid label="TYPEDEF"]
  1866 -> 22 [style=solid label="CONSTEXPR"]
  1866 -> 23 [style=solid label="CONSTEVAL"]
  1866 -> 24 [style=solid label="CONSTINIT"]
  1866 -> 258 [style=solid label="INLINE"]
  1866 -> 26 [style=solid label="DECLTYPE"]
  1866 -> 369 [style=solid label="DELETE"]
  1866 -> 370 [style=solid label="DOT"]
  1866 -> 27 [style=solid label="ENUM"]
  1866 -> 184 [style=solid label="UNICODE_8"]
  1866 -> 259 [style=solid label="EXTERN"]
  1866 -> 29 [style=solid label="EXPLICIT"]
  1866 -> 371 [style=solid label="MULT"]
  1866 -> 666 [style=solid label="DEFAULT"]
  1866 -> 667 [style=solid label="TRY"]
  1866 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1866 -> 372 [style=solid label="ZERO_LX"]
  1866 -> 373 [style=solid label="ZERO_HX"]
  1866 -> 668 [style=solid label="WHILE"]
  1866 -> 669 [style=solid label="DO"]
  1866 -> 670 [style=solid label="FOR"]
  1866 -> 671 [style=solid label="BREAK"]
  1866 -> 672 [style=solid label="CONTINUE"]
  1866 -> 673 [style=solid label="RETURN"]
  1866 -> 674 [style=solid label="GOTO"]
  1866 -> 675 [style=solid label="CASE"]
  1866 -> 676 [style=solid label="NAMESPACE"]
  1866 -> 374 [style=solid label="REQUIRES"]
  1866 -> 375 [style=solid label="NEW"]
  1866 -> 376 [style=solid label="COMPL"]
  1866 -> 377 [style=solid label="NOT"]
  1866 -> 378 [style=solid label="PLUS_PLUS"]
  1866 -> 379 [style=solid label="MINUS_MINUS"]
  1866 -> 380 [style=solid label="THIS"]
  1866 -> 36 [style=solid label="AUTO"]
  1866 -> 381 [style=solid label="NULLPTR"]
  1866 -> 382 [style=solid label="DYNAMIC_CAST"]
  1866 -> 383 [style=solid label="STATIC_CAST"]
  1866 -> 384 [style=solid label="REINTERPRET_CAST"]
  1866 -> 385 [style=solid label="CONST_CAST"]
  1866 -> 386 [style=solid label="TYPEID"]
  1866 -> 677 [style=solid label="IF"]
  1866 -> 678 [style=solid label="SWITCH"]
  1866 -> 37 [style=solid label="CHAR"]
  1866 -> 38 [style=solid label="CHAR8_T"]
  1866 -> 39 [style=solid label="CHAR16_T"]
  1866 -> 40 [style=solid label="CHAR32_T"]
  1866 -> 41 [style=solid label="WCHAR_T"]
  1866 -> 42 [style=solid label="BOOL"]
  1866 -> 43 [style=solid label="SHORT"]
  1866 -> 44 [style=solid label="INT"]
  1866 -> 45 [style=solid label="LONG"]
  1866 -> 46 [style=solid label="SIGNED"]
  1866 -> 47 [style=solid label="UNSIGNED"]
  1866 -> 48 [style=solid label="FLOAT"]
  1866 -> 49 [style=solid label="DOUBLE"]
  1866 -> 50 [style=solid label="VOID"]
  1866 -> 51 [style=solid label="STATIC_ASSERT"]
  1866 -> 52 [style=solid label="STATIC"]
  1866 -> 53 [style=solid label="THREAD_LOCAL"]
  1866 -> 54 [style=solid label="MUTABLE"]
  1866 -> 523 [style=solid label="THROW"]
  1866 -> 55 [style=solid label="TYPENAME"]
  1866 -> 387 [style=solid label="SIZEOF"]
  1866 -> 388 [style=solid label="ALIGNOF"]
  1866 -> 524 [style=solid label="CO_YIELD"]
  1866 -> 389 [style=solid label="'0'"]
  1866 -> 390 [style=solid label="'1'"]
  1866 -> 391 [style=solid label="'2'"]
  1866 -> 392 [style=solid label="'3'"]
  1866 -> 393 [style=solid label="'4'"]
  1866 -> 394 [style=solid label="'5'"]
  1866 -> 395 [style=solid label="'6'"]
  1866 -> 396 [style=solid label="'7'"]
  1866 -> 397 [style=solid label="'8'"]
  1866 -> 398 [style=solid label="'9'"]
  1866 -> 205 [style=solid label="'u'"]
  1866 -> 206 [style=solid label="'U'"]
  1866 -> 207 [style=solid label="'L'"]
  1866 -> 208 [style=solid label="'R'"]
  1866 -> 399 [style=dashed label="additive-expression"]
  1866 -> 56 [style=dashed label="alias-declaration"]
  1866 -> 57 [style=dashed label="alignment-specifier"]
  1866 -> 400 [style=dashed label="and-expression"]
  1866 -> 58 [style=dashed label="asm-declaration"]
  1866 -> 525 [style=dashed label="assignment-expression"]
  1866 -> 60 [style=dashed label="attribute-specifier"]
  1866 -> 679 [style=dashed label="attribute-specifier-seq"]
  1866 -> 401 [style=dashed label="await-expression"]
  1866 -> 402 [style=dashed label="binary-literal"]
  1866 -> 680 [style=dashed label="block-declaration"]
  1866 -> 403 [style=dashed label="boolean-literal"]
  1866 -> 404 [style=dashed label="cast-expression"]
  1866 -> 405 [style=dashed label="character-literal"]
  1866 -> 63 [style=dashed label="class-head"]
  1866 -> 64 [style=dashed label="class-key"]
  1866 -> 65 [style=dashed label="class-name"]
  1866 -> 66 [style=dashed label="class-specifier"]
  1866 -> 406 [style=dashed label="compare-expression"]
  1866 -> 681 [style=dashed label="compound-statement"]
  1866 -> 67 [style=dashed label="concept-name"]
  1866 -> 526 [style=dashed label="conditional-expression"]
  1866 -> 68 [style=dashed label="conversion-function-id"]
  1866 -> 682 [style=dashed label="coroutine-return-statement"]
  1866 -> 69 [style=dashed label="cv-qualifier"]
  1866 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1866 -> 410 [style=dashed label="decimal-literal"]
  1866 -> 70 [style=dashed label="decl-specifier"]
  1866 -> 683 [style=dashed label="decl-specifier-seq"]
  1866 -> 684 [style=dashed label="declaration-statement"]
  1866 -> 76 [style=dashed label="decltype-specifier"]
  1866 -> 78 [style=dashed label="defining-type-specifier"]
  1866 -> 411 [style=dashed label="delete-expression"]
  1866 -> 412 [style=dashed label="digit"]
  1866 -> 413 [style=dashed label="digit-sequence"]
  1866 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1866 -> 80 [style=dashed label="elaborated-type-specifier"]
  1866 -> 414 [style=dashed label="encoding-prefix"]
  1866 -> 82 [style=dashed label="enum-head"]
  1866 -> 83 [style=dashed label="enum-key"]
  1866 -> 84 [style=dashed label="enum-name"]
  1866 -> 85 [style=dashed label="enum-specifier"]
  1866 -> 415 [style=dashed label="equality-expression"]
  1866 -> 416 [style=dashed label="exclusive-or-expression"]
  1866 -> 264 [style=dashed label="explicit-specifier"]
  1866 -> 685 [style=dashed label="expression"]
  1866 -> 686 [style=dashed label="expression-statement"]
  1866 -> 417 [style=dashed label="floating-point-literal"]
  1866 -> 418 [style=dashed label="fold-expression"]
  1866 -> 419 [style=dashed label="fractional-constant"]
  1866 -> 91 [style=dashed label="function-specifier"]
  1866 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1866 -> 421 [style=dashed label="hexadecimal-literal"]
  1866 -> 422 [style=dashed label="hexadecimal-prefix"]
  1866 -> 423 [style=dashed label="id-expression"]
  1866 -> 424 [style=dashed label="inclusive-or-expression"]
  1866 -> 425 [style=dashed label="integer-literal"]
  1866 -> 687 [style=dashed label="iteration-statement"]
  1866 -> 688 [style=dashed label="jump-statement"]
  1866 -> 689 [style=dashed label="labeled-statement"]
  1866 -> 426 [style=dashed label="lambda-expression"]
  1866 -> 427 [style=dashed label="lambda-introducer"]
  1866 -> 428 [style=dashed label="literal"]
  1866 -> 95 [style=dashed label="literal-operator-id"]
  1866 -> 429 [style=dashed label="logical-and-expression"]
  1866 -> 528 [style=dashed label="logical-or-expression"]
  1866 -> 431 [style=dashed label="multiplicative-expression"]
  1866 -> 99 [style=dashed label="namespace-alias"]
  1866 -> 100 [style=dashed label="namespace-alias-definition"]
  1866 -> 102 [style=dashed label="namespace-name"]
  1866 -> 432 [style=dashed label="nested-name-specifier"]
  1866 -> 433 [style=dashed label="new-expression"]
  1866 -> 434 [style=dashed label="noexcept-expression"]
  1866 -> 435 [style=dashed label="nonzero-digit"]
  1866 -> 436 [style=dashed label="octal-literal"]
  1866 -> 107 [style=dashed label="opaque-enum-declaration"]
  1866 -> 108 [style=dashed label="operator-function-id"]
  1866 -> 109 [style=dashed label="placeholder-type-specifier"]
  1866 -> 437 [style=dashed label="pm-expression"]
  1866 -> 438 [style=dashed label="pointer-literal"]
  1866 -> 439 [style=dashed label="postfix-expression"]
  1866 -> 440 [style=dashed label="primary-expression"]
  1866 -> 112 [style=dashed label="qualified-id"]
  1866 -> 441 [style=dashed label="relational-expression"]
  1866 -> 442 [style=dashed label="requires-expression"]
  1866 -> 690 [style=dashed label="selection-statement"]
  1866 -> 443 [style=dashed label="shift-expression"]
  1866 -> 113 [style=dashed label="simple-declaration"]
  1866 -> 114 [style=dashed label="simple-template-id"]
  1866 -> 444 [style=dashed label="simple-type-specifier"]
  1866 -> 1926 [style=dashed label="statement"]
  1866 -> 116 [style=dashed label="static_assert-declaration"]
  1866 -> 117 [style=dashed label="storage-class-specifier"]
  1866 -> 445 [style=dashed label="string-literal"]
  1866 -> 120 [style=dashed label="template-id"]
  1866 -> 215 [style=dashed label="template-name"]
  1866 -> 530 [style=dashed label="throw-expression"]
  1866 -> 693 [style=dashed label="try-block"]
  1866 -> 123 [style=dashed label="type-constraint"]
  1866 -> 124 [style=dashed label="type-name"]
  1866 -> 125 [style=dashed label="type-specifier"]
  1866 -> 126 [style=dashed label="typedef-name"]
  1866 -> 448 [style=dashed label="typename-specifier"]
  1866 -> 449 [style=dashed label="unary-expression"]
  1866 -> 450 [style=dashed label="unary-operator"]
  1866 -> 129 [style=dashed label="unqualified-id"]
  1866 -> 451 [style=dashed label="user-defined-character-literal"]
  1866 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1866 -> 453 [style=dashed label="user-defined-integer-literal"]
  1866 -> 454 [style=dashed label="user-defined-literal"]
  1866 -> 455 [style=dashed label="user-defined-string-literal"]
  1866 -> 130 [style=dashed label="using-declaration"]
  1866 -> 131 [style=dashed label="using-directive"]
  1866 -> 132 [style=dashed label="using-enum-declaration"]
  1866 -> 532 [style=dashed label="yield-expression"]
  1867 [label="State 1867\n\l950 selection-statement: SWITCH OPEN_PAREN condition CLOSE_PAREN statement •\l"]
  1867 -> "1867R950" [style=solid]
 "1867R950" [label="R950", fillcolor=3, shape=diamond, style=filled]
  1868 [label="State 1868\n\l951 selection-statement: SWITCH OPEN_PAREN init-statement condition CLOSE_PAREN • statement\l"]
  1868 -> 356 [style=solid label="PLUS"]
  1868 -> 357 [style=solid label="MINUS"]
  1868 -> 1 [style=solid label="USING"]
  1868 -> 661 [style=solid label="IDENTIFIER"]
  1868 -> 662 [style=solid label="SEMICOLON"]
  1868 -> 4 [style=solid label="ALIGNAS"]
  1868 -> 358 [style=solid label="OPEN_PAREN"]
  1868 -> 359 [style=solid label="AND"]
  1868 -> 8 [style=solid label="ASM"]
  1868 -> 360 [style=solid label="SCOPE"]
  1868 -> 663 [style=solid label="OPEN_SQUARE"]
  1868 -> 362 [style=solid label="CO_AWAIT"]
  1868 -> 289 [style=solid label="OPEN_BRACE"]
  1868 -> 11 [style=solid label="VIRTUAL"]
  1868 -> 363 [style=solid label="ZERO_LB"]
  1868 -> 364 [style=solid label="ZERO_HB"]
  1868 -> 365 [style=solid label="SINGLE_QUOTE"]
  1868 -> 366 [style=solid label="FALSE"]
  1868 -> 367 [style=solid label="TRUE"]
  1868 -> 12 [style=solid label="CLASS"]
  1868 -> 13 [style=solid label="STRUCT"]
  1868 -> 14 [style=solid label="UNION"]
  1868 -> 368 [style=solid label="NOEXCEPT"]
  1868 -> 17 [style=solid label="OPERATOR"]
  1868 -> 665 [style=solid label="CO_RETURN"]
  1868 -> 18 [style=solid label="CONST"]
  1868 -> 19 [style=solid label="VOLATILE"]
  1868 -> 20 [style=solid label="FRIEND"]
  1868 -> 21 [style=solid label="TYPEDEF"]
  1868 -> 22 [style=solid label="CONSTEXPR"]
  1868 -> 23 [style=solid label="CONSTEVAL"]
  1868 -> 24 [style=solid label="CONSTINIT"]
  1868 -> 258 [style=solid label="INLINE"]
  1868 -> 26 [style=solid label="DECLTYPE"]
  1868 -> 369 [style=solid label="DELETE"]
  1868 -> 370 [style=solid label="DOT"]
  1868 -> 27 [style=solid label="ENUM"]
  1868 -> 184 [style=solid label="UNICODE_8"]
  1868 -> 259 [style=solid label="EXTERN"]
  1868 -> 29 [style=solid label="EXPLICIT"]
  1868 -> 371 [style=solid label="MULT"]
  1868 -> 666 [style=solid label="DEFAULT"]
  1868 -> 667 [style=solid label="TRY"]
  1868 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1868 -> 372 [style=solid label="ZERO_LX"]
  1868 -> 373 [style=solid label="ZERO_HX"]
  1868 -> 668 [style=solid label="WHILE"]
  1868 -> 669 [style=solid label="DO"]
  1868 -> 670 [style=solid label="FOR"]
  1868 -> 671 [style=solid label="BREAK"]
  1868 -> 672 [style=solid label="CONTINUE"]
  1868 -> 673 [style=solid label="RETURN"]
  1868 -> 674 [style=solid label="GOTO"]
  1868 -> 675 [style=solid label="CASE"]
  1868 -> 676 [style=solid label="NAMESPACE"]
  1868 -> 374 [style=solid label="REQUIRES"]
  1868 -> 375 [style=solid label="NEW"]
  1868 -> 376 [style=solid label="COMPL"]
  1868 -> 377 [style=solid label="NOT"]
  1868 -> 378 [style=solid label="PLUS_PLUS"]
  1868 -> 379 [style=solid label="MINUS_MINUS"]
  1868 -> 380 [style=solid label="THIS"]
  1868 -> 36 [style=solid label="AUTO"]
  1868 -> 381 [style=solid label="NULLPTR"]
  1868 -> 382 [style=solid label="DYNAMIC_CAST"]
  1868 -> 383 [style=solid label="STATIC_CAST"]
  1868 -> 384 [style=solid label="REINTERPRET_CAST"]
  1868 -> 385 [style=solid label="CONST_CAST"]
  1868 -> 386 [style=solid label="TYPEID"]
  1868 -> 677 [style=solid label="IF"]
  1868 -> 678 [style=solid label="SWITCH"]
  1868 -> 37 [style=solid label="CHAR"]
  1868 -> 38 [style=solid label="CHAR8_T"]
  1868 -> 39 [style=solid label="CHAR16_T"]
  1868 -> 40 [style=solid label="CHAR32_T"]
  1868 -> 41 [style=solid label="WCHAR_T"]
  1868 -> 42 [style=solid label="BOOL"]
  1868 -> 43 [style=solid label="SHORT"]
  1868 -> 44 [style=solid label="INT"]
  1868 -> 45 [style=solid label="LONG"]
  1868 -> 46 [style=solid label="SIGNED"]
  1868 -> 47 [style=solid label="UNSIGNED"]
  1868 -> 48 [style=solid label="FLOAT"]
  1868 -> 49 [style=solid label="DOUBLE"]
  1868 -> 50 [style=solid label="VOID"]
  1868 -> 51 [style=solid label="STATIC_ASSERT"]
  1868 -> 52 [style=solid label="STATIC"]
  1868 -> 53 [style=solid label="THREAD_LOCAL"]
  1868 -> 54 [style=solid label="MUTABLE"]
  1868 -> 523 [style=solid label="THROW"]
  1868 -> 55 [style=solid label="TYPENAME"]
  1868 -> 387 [style=solid label="SIZEOF"]
  1868 -> 388 [style=solid label="ALIGNOF"]
  1868 -> 524 [style=solid label="CO_YIELD"]
  1868 -> 389 [style=solid label="'0'"]
  1868 -> 390 [style=solid label="'1'"]
  1868 -> 391 [style=solid label="'2'"]
  1868 -> 392 [style=solid label="'3'"]
  1868 -> 393 [style=solid label="'4'"]
  1868 -> 394 [style=solid label="'5'"]
  1868 -> 395 [style=solid label="'6'"]
  1868 -> 396 [style=solid label="'7'"]
  1868 -> 397 [style=solid label="'8'"]
  1868 -> 398 [style=solid label="'9'"]
  1868 -> 205 [style=solid label="'u'"]
  1868 -> 206 [style=solid label="'U'"]
  1868 -> 207 [style=solid label="'L'"]
  1868 -> 208 [style=solid label="'R'"]
  1868 -> 399 [style=dashed label="additive-expression"]
  1868 -> 56 [style=dashed label="alias-declaration"]
  1868 -> 57 [style=dashed label="alignment-specifier"]
  1868 -> 400 [style=dashed label="and-expression"]
  1868 -> 58 [style=dashed label="asm-declaration"]
  1868 -> 525 [style=dashed label="assignment-expression"]
  1868 -> 60 [style=dashed label="attribute-specifier"]
  1868 -> 679 [style=dashed label="attribute-specifier-seq"]
  1868 -> 401 [style=dashed label="await-expression"]
  1868 -> 402 [style=dashed label="binary-literal"]
  1868 -> 680 [style=dashed label="block-declaration"]
  1868 -> 403 [style=dashed label="boolean-literal"]
  1868 -> 404 [style=dashed label="cast-expression"]
  1868 -> 405 [style=dashed label="character-literal"]
  1868 -> 63 [style=dashed label="class-head"]
  1868 -> 64 [style=dashed label="class-key"]
  1868 -> 65 [style=dashed label="class-name"]
  1868 -> 66 [style=dashed label="class-specifier"]
  1868 -> 406 [style=dashed label="compare-expression"]
  1868 -> 681 [style=dashed label="compound-statement"]
  1868 -> 67 [style=dashed label="concept-name"]
  1868 -> 526 [style=dashed label="conditional-expression"]
  1868 -> 68 [style=dashed label="conversion-function-id"]
  1868 -> 682 [style=dashed label="coroutine-return-statement"]
  1868 -> 69 [style=dashed label="cv-qualifier"]
  1868 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1868 -> 410 [style=dashed label="decimal-literal"]
  1868 -> 70 [style=dashed label="decl-specifier"]
  1868 -> 683 [style=dashed label="decl-specifier-seq"]
  1868 -> 684 [style=dashed label="declaration-statement"]
  1868 -> 76 [style=dashed label="decltype-specifier"]
  1868 -> 78 [style=dashed label="defining-type-specifier"]
  1868 -> 411 [style=dashed label="delete-expression"]
  1868 -> 412 [style=dashed label="digit"]
  1868 -> 413 [style=dashed label="digit-sequence"]
  1868 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1868 -> 80 [style=dashed label="elaborated-type-specifier"]
  1868 -> 414 [style=dashed label="encoding-prefix"]
  1868 -> 82 [style=dashed label="enum-head"]
  1868 -> 83 [style=dashed label="enum-key"]
  1868 -> 84 [style=dashed label="enum-name"]
  1868 -> 85 [style=dashed label="enum-specifier"]
  1868 -> 415 [style=dashed label="equality-expression"]
  1868 -> 416 [style=dashed label="exclusive-or-expression"]
  1868 -> 264 [style=dashed label="explicit-specifier"]
  1868 -> 685 [style=dashed label="expression"]
  1868 -> 686 [style=dashed label="expression-statement"]
  1868 -> 417 [style=dashed label="floating-point-literal"]
  1868 -> 418 [style=dashed label="fold-expression"]
  1868 -> 419 [style=dashed label="fractional-constant"]
  1868 -> 91 [style=dashed label="function-specifier"]
  1868 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1868 -> 421 [style=dashed label="hexadecimal-literal"]
  1868 -> 422 [style=dashed label="hexadecimal-prefix"]
  1868 -> 423 [style=dashed label="id-expression"]
  1868 -> 424 [style=dashed label="inclusive-or-expression"]
  1868 -> 425 [style=dashed label="integer-literal"]
  1868 -> 687 [style=dashed label="iteration-statement"]
  1868 -> 688 [style=dashed label="jump-statement"]
  1868 -> 689 [style=dashed label="labeled-statement"]
  1868 -> 426 [style=dashed label="lambda-expression"]
  1868 -> 427 [style=dashed label="lambda-introducer"]
  1868 -> 428 [style=dashed label="literal"]
  1868 -> 95 [style=dashed label="literal-operator-id"]
  1868 -> 429 [style=dashed label="logical-and-expression"]
  1868 -> 528 [style=dashed label="logical-or-expression"]
  1868 -> 431 [style=dashed label="multiplicative-expression"]
  1868 -> 99 [style=dashed label="namespace-alias"]
  1868 -> 100 [style=dashed label="namespace-alias-definition"]
  1868 -> 102 [style=dashed label="namespace-name"]
  1868 -> 432 [style=dashed label="nested-name-specifier"]
  1868 -> 433 [style=dashed label="new-expression"]
  1868 -> 434 [style=dashed label="noexcept-expression"]
  1868 -> 435 [style=dashed label="nonzero-digit"]
  1868 -> 436 [style=dashed label="octal-literal"]
  1868 -> 107 [style=dashed label="opaque-enum-declaration"]
  1868 -> 108 [style=dashed label="operator-function-id"]
  1868 -> 109 [style=dashed label="placeholder-type-specifier"]
  1868 -> 437 [style=dashed label="pm-expression"]
  1868 -> 438 [style=dashed label="pointer-literal"]
  1868 -> 439 [style=dashed label="postfix-expression"]
  1868 -> 440 [style=dashed label="primary-expression"]
  1868 -> 112 [style=dashed label="qualified-id"]
  1868 -> 441 [style=dashed label="relational-expression"]
  1868 -> 442 [style=dashed label="requires-expression"]
  1868 -> 690 [style=dashed label="selection-statement"]
  1868 -> 443 [style=dashed label="shift-expression"]
  1868 -> 113 [style=dashed label="simple-declaration"]
  1868 -> 114 [style=dashed label="simple-template-id"]
  1868 -> 444 [style=dashed label="simple-type-specifier"]
  1868 -> 1927 [style=dashed label="statement"]
  1868 -> 116 [style=dashed label="static_assert-declaration"]
  1868 -> 117 [style=dashed label="storage-class-specifier"]
  1868 -> 445 [style=dashed label="string-literal"]
  1868 -> 120 [style=dashed label="template-id"]
  1868 -> 215 [style=dashed label="template-name"]
  1868 -> 530 [style=dashed label="throw-expression"]
  1868 -> 693 [style=dashed label="try-block"]
  1868 -> 123 [style=dashed label="type-constraint"]
  1868 -> 124 [style=dashed label="type-name"]
  1868 -> 125 [style=dashed label="type-specifier"]
  1868 -> 126 [style=dashed label="typedef-name"]
  1868 -> 448 [style=dashed label="typename-specifier"]
  1868 -> 449 [style=dashed label="unary-expression"]
  1868 -> 450 [style=dashed label="unary-operator"]
  1868 -> 129 [style=dashed label="unqualified-id"]
  1868 -> 451 [style=dashed label="user-defined-character-literal"]
  1868 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1868 -> 453 [style=dashed label="user-defined-integer-literal"]
  1868 -> 454 [style=dashed label="user-defined-literal"]
  1868 -> 455 [style=dashed label="user-defined-string-literal"]
  1868 -> 130 [style=dashed label="using-declaration"]
  1868 -> 131 [style=dashed label="using-directive"]
  1868 -> 132 [style=dashed label="using-enum-declaration"]
  1868 -> 532 [style=dashed label="yield-expression"]
  1869 [label="State 1869\n\l521 labeled-statement: attribute-specifier-seq CASE constant-expression COLON statement •\l"]
  1869 -> "1869R521" [style=solid]
 "1869R521" [label="R521", fillcolor=3, shape=diamond, style=filled]
  1870 [label="State 1870\n\l310 exception-declaration: attribute-specifier-seq type-specifier-seq • declarator\l312                      | attribute-specifier-seq type-specifier-seq •\l314                      | attribute-specifier-seq type-specifier-seq • abstract-declarator\l"]
  1870 -> 147 [style=solid label="IDENTIFIER"]
  1870 -> 969 [style=solid label="OPEN_PAREN"]
  1870 -> 970 [style=solid label="ELLIPSIS"]
  1870 -> 7 [style=solid label="AND"]
  1870 -> 9 [style=solid label="SCOPE"]
  1870 -> 941 [style=solid label="OPEN_SQUARE"]
  1870 -> 16 [style=solid label="AND_AND"]
  1870 -> 17 [style=solid label="OPERATOR"]
  1870 -> 134 [style=solid label="DECLTYPE"]
  1870 -> 31 [style=solid label="MULT"]
  1870 -> 35 [style=solid label="COMPL"]
  1870 -> 1928 [style=dashed label="abstract-declarator"]
  1870 -> 943 [style=dashed label="abstract-pack-declarator"]
  1870 -> 65 [style=dashed label="class-name"]
  1870 -> 68 [style=dashed label="conversion-function-id"]
  1870 -> 1929 [style=dashed label="declarator"]
  1870 -> 75 [style=dashed label="declarator-id"]
  1870 -> 138 [style=dashed label="decltype-specifier"]
  1870 -> 84 [style=dashed label="enum-name"]
  1870 -> 93 [style=dashed label="id-expression"]
  1870 -> 95 [style=dashed label="literal-operator-id"]
  1870 -> 99 [style=dashed label="namespace-alias"]
  1870 -> 102 [style=dashed label="namespace-name"]
  1870 -> 148 [style=dashed label="nested-name-specifier"]
  1870 -> 944 [style=dashed label="noptr-abstract-declarator"]
  1870 -> 945 [style=dashed label="noptr-abstract-pack-declarator"]
  1870 -> 106 [style=dashed label="noptr-declarator"]
  1870 -> 108 [style=dashed label="operator-function-id"]
  1870 -> 946 [style=dashed label="parameters-and-qualifiers"]
  1870 -> 947 [style=dashed label="ptr-abstract-declarator"]
  1870 -> 110 [style=dashed label="ptr-declarator"]
  1870 -> 973 [style=dashed label="ptr-operator"]
  1870 -> 112 [style=dashed label="qualified-id"]
  1870 -> 114 [style=dashed label="simple-template-id"]
  1870 -> 120 [style=dashed label="template-id"]
  1870 -> 142 [style=dashed label="template-name"]
  1870 -> 143 [style=dashed label="type-name"]
  1870 -> 126 [style=dashed label="typedef-name"]
  1870 -> 129 [style=dashed label="unqualified-id"]
  1870 -> "1870R312" [style=solid]
 "1870R312" [label="R312", fillcolor=3, shape=diamond, style=filled]
  1871 [label="State 1871\n\l416 handler: CATCH OPEN_PAREN exception-declaration CLOSE_PAREN • compound-statement\l"]
  1871 -> 289 [style=solid label="OPEN_BRACE"]
  1871 -> 1930 [style=dashed label="compound-statement"]
  1872 [label="State 1872\n\l315 exception-declaration: type-specifier-seq abstract-declarator •\l"]
  1872 -> "1872R315" [style=solid]
 "1872R315" [label="R315", fillcolor=3, shape=diamond, style=filled]
  1873 [label="State 1873\n\l311 exception-declaration: type-specifier-seq declarator •\l"]
  1873 -> "1873R311" [style=solid]
 "1873R311" [label="R311", fillcolor=3, shape=diamond, style=filled]
  1874 [label="State 1874\n\l231 deduction-guide: explicit-specifier template-name OPEN_PAREN parameter-declaration-clause CLOSE_PAREN DEREF simple-template-id • SEMICOLON\l"]
  1874 -> 1931 [style=solid label="SEMICOLON"]
  1875 [label="State 1875\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l845 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq noexcept-specifier attribute-specifier-seq •\l"]
  1875 -> 4 [style=solid label="ALIGNAS"]
  1875 -> 10 [style=solid label="OPEN_SQUARE"]
  1875 -> 57 [style=dashed label="alignment-specifier"]
  1875 -> 260 [style=dashed label="attribute-specifier"]
  1875 -> "1875R845d" [label="[OPEN_SQUARE]", style=solid]
 "1875R845d" [label="R845", fillcolor=5, shape=diamond, style=filled]
  1875 -> "1875R845" [style=solid]
 "1875R845" [label="R845", fillcolor=3, shape=diamond, style=filled]
  1876 [label="State 1876\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l843 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier attribute-specifier-seq •\l"]
  1876 -> 4 [style=solid label="ALIGNAS"]
  1876 -> 10 [style=solid label="OPEN_SQUARE"]
  1876 -> 57 [style=dashed label="alignment-specifier"]
  1876 -> 260 [style=dashed label="attribute-specifier"]
  1876 -> "1876R843d" [label="[OPEN_SQUARE]", style=solid]
 "1876R843d" [label="R843", fillcolor=5, shape=diamond, style=filled]
  1876 -> "1876R843" [style=solid]
 "1876R843" [label="R843", fillcolor=3, shape=diamond, style=filled]
  1877 [label="State 1877\n\l839 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier noexcept-specifier •\l847                          | OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier noexcept-specifier • attribute-specifier-seq\l"]
  1877 -> 4 [style=solid label="ALIGNAS"]
  1877 -> 10 [style=solid label="OPEN_SQUARE"]
  1877 -> 57 [style=dashed label="alignment-specifier"]
  1877 -> 60 [style=dashed label="attribute-specifier"]
  1877 -> 1932 [style=dashed label="attribute-specifier-seq"]
  1877 -> "1877R839d" [label="[OPEN_SQUARE]", style=solid]
 "1877R839d" [label="R839", fillcolor=5, shape=diamond, style=filled]
  1877 -> "1877R839" [style=solid]
 "1877R839" [label="R839", fillcolor=3, shape=diamond, style=filled]
  1878 [label="State 1878\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l846 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN ref-qualifier noexcept-specifier attribute-specifier-seq •\l"]
  1878 -> 4 [style=solid label="ALIGNAS"]
  1878 -> 10 [style=solid label="OPEN_SQUARE"]
  1878 -> 57 [style=dashed label="alignment-specifier"]
  1878 -> 260 [style=dashed label="attribute-specifier"]
  1878 -> "1878R846d" [label="[OPEN_SQUARE]", style=solid]
 "1878R846d" [label="R846", fillcolor=5, shape=diamond, style=filled]
  1878 -> "1878R846" [style=solid]
 "1878R846" [label="R846", fillcolor=3, shape=diamond, style=filled]
  1879 [label="State 1879\n\l232 deduction-guide: template-name OPEN_PAREN parameter-declaration-clause CLOSE_PAREN DEREF simple-template-id SEMICOLON •\l"]
  1879 -> "1879R232" [style=solid]
 "1879R232" [label="R232", fillcolor=3, shape=diamond, style=filled]
  1880 [label="State 1880\n\l347 fold-expression: OPEN_PAREN cast-expression fold-operator ELLIPSIS fold-operator cast-expression • CLOSE_PAREN\l"]
  1880 -> 1933 [style=solid label="CLOSE_PAREN"]
  1881 [label="State 1881\n\l680 new-expression: SCOPE NEW OPEN_PAREN type-id CLOSE_PAREN new-initializer •\l"]
  1881 -> "1881R680" [style=solid]
 "1881R680" [label="R680", fillcolor=3, shape=diamond, style=filled]
  1882 [label="State 1882\n\l678 new-expression: SCOPE NEW new-placement OPEN_PAREN type-id CLOSE_PAREN •\l682               | SCOPE NEW new-placement OPEN_PAREN type-id CLOSE_PAREN • new-initializer\l"]
  1882 -> 1303 [style=solid label="OPEN_PAREN"]
  1882 -> 935 [style=solid label="OPEN_BRACE"]
  1882 -> 1304 [style=dashed label="braced-init-list"]
  1882 -> 1934 [style=dashed label="new-initializer"]
  1882 -> "1882R678d" [label="[OPEN_BRACE]", style=solid]
 "1882R678d" [label="R678", fillcolor=5, shape=diamond, style=filled]
  1882 -> "1882R678" [style=solid]
 "1882R678" [label="R678", fillcolor=3, shape=diamond, style=filled]
  1883 [label="State 1883\n\l156 compound-requirement: OPEN_BRACE expression CLOSE_BRACE SEMICOLON •\l"]
  1883 -> "1883R156" [style=solid]
 "1883R156" [label="R156", fillcolor=3, shape=diamond, style=filled]
  1884 [label="State 1884\n\l157 compound-requirement: OPEN_BRACE expression CLOSE_BRACE NOEXCEPT • SEMICOLON\l159                     | OPEN_BRACE expression CLOSE_BRACE NOEXCEPT • return-type-requirement SEMICOLON\l"]
  1884 -> 1935 [style=solid label="SEMICOLON"]
  1884 -> 1885 [style=solid label="DEREF"]
  1884 -> 1936 [style=dashed label="return-type-requirement"]
  1885 [label="State 1885\n\l932 return-type-requirement: DEREF • type-constraint\l"]
  1885 -> 162 [style=solid label="IDENTIFIER"]
  1885 -> 9 [style=solid label="SCOPE"]
  1885 -> 134 [style=solid label="DECLTYPE"]
  1885 -> 65 [style=dashed label="class-name"]
  1885 -> 67 [style=dashed label="concept-name"]
  1885 -> 138 [style=dashed label="decltype-specifier"]
  1885 -> 84 [style=dashed label="enum-name"]
  1885 -> 99 [style=dashed label="namespace-alias"]
  1885 -> 102 [style=dashed label="namespace-name"]
  1885 -> 1937 [style=dashed label="nested-name-specifier"]
  1885 -> 141 [style=dashed label="simple-template-id"]
  1885 -> 142 [style=dashed label="template-name"]
  1885 -> 1938 [style=dashed label="type-constraint"]
  1885 -> 143 [style=dashed label="type-name"]
  1885 -> 126 [style=dashed label="typedef-name"]
  1886 [label="State 1886\n\l158 compound-requirement: OPEN_BRACE expression CLOSE_BRACE return-type-requirement • SEMICOLON\l"]
  1886 -> 1939 [style=solid label="SEMICOLON"]
  1887 [label="State 1887\n\l1102 type-requirement: TYPENAME nested-name-specifier type-name SEMICOLON •\l"]
  1887 -> "1887R1102" [style=solid]
 "1887R1102" [label="R1102", fillcolor=3, shape=diamond, style=filled]
  1888 [label="State 1888\n\l683 new-expression: NEW new-placement OPEN_PAREN type-id CLOSE_PAREN new-initializer •\l"]
  1888 -> "1888R683" [style=solid]
 "1888R683" [label="R683", fillcolor=3, shape=diamond, style=filled]
  1889 [label="State 1889\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l732 noptr-new-declarator: OPEN_SQUARE expression CLOSE_SQUARE attribute-specifier-seq •\l"]
  1889 -> 4 [style=solid label="ALIGNAS"]
  1889 -> 10 [style=solid label="OPEN_SQUARE"]
  1889 -> 57 [style=dashed label="alignment-specifier"]
  1889 -> 260 [style=dashed label="attribute-specifier"]
  1889 -> "1889R732d" [label="[OPEN_SQUARE]", style=solid]
 "1889R732d" [label="R732", fillcolor=5, shape=diamond, style=filled]
  1889 -> "1889R732" [style=solid]
 "1889R732" [label="R732", fillcolor=3, shape=diamond, style=filled]
  1890 [label="State 1890\n\l733 noptr-new-declarator: noptr-new-declarator OPEN_SQUARE constant-expression CLOSE_SQUARE •\l734                     | noptr-new-declarator OPEN_SQUARE constant-expression CLOSE_SQUARE • attribute-specifier-seq\l"]
  1890 -> 4 [style=solid label="ALIGNAS"]
  1890 -> 10 [style=solid label="OPEN_SQUARE"]
  1890 -> 57 [style=dashed label="alignment-specifier"]
  1890 -> 60 [style=dashed label="attribute-specifier"]
  1890 -> 1940 [style=dashed label="attribute-specifier-seq"]
  1890 -> "1890R733d" [label="[OPEN_SQUARE]", style=solid]
 "1890R733d" [label="R733", fillcolor=5, shape=diamond, style=filled]
  1890 -> "1890R733" [style=solid]
 "1890R733" [label="R733", fillcolor=3, shape=diamond, style=filled]
  1891 [label="State 1891\n\l335 expression: expression • COMMA assignment-expression\l873 postfix-expression: DYNAMIC_CAST LESS type-id GREATER OPEN_PAREN expression • CLOSE_PAREN\l"]
  1891 -> 1941 [style=solid label="CLOSE_PAREN"]
  1891 -> 1029 [style=solid label="COMMA"]
  1892 [label="State 1892\n\l335 expression: expression • COMMA assignment-expression\l874 postfix-expression: STATIC_CAST LESS type-id GREATER OPEN_PAREN expression • CLOSE_PAREN\l"]
  1892 -> 1942 [style=solid label="CLOSE_PAREN"]
  1892 -> 1029 [style=solid label="COMMA"]
  1893 [label="State 1893\n\l335 expression: expression • COMMA assignment-expression\l875 postfix-expression: REINTERPRET_CAST LESS type-id GREATER OPEN_PAREN expression • CLOSE_PAREN\l"]
  1893 -> 1943 [style=solid label="CLOSE_PAREN"]
  1893 -> 1029 [style=solid label="COMMA"]
  1894 [label="State 1894\n\l335 expression: expression • COMMA assignment-expression\l876 postfix-expression: CONST_CAST LESS type-id GREATER OPEN_PAREN expression • CLOSE_PAREN\l"]
  1894 -> 1944 [style=solid label="CLOSE_PAREN"]
  1894 -> 1029 [style=solid label="COMMA"]
  1895 [label="State 1895\n\l530 lambda-declarator: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN lambda-specifiers requires-clause •\l"]
  1895 -> "1895R530" [style=solid]
 "1895R530" [label="R530", fillcolor=3, shape=diamond, style=filled]
  1896 [label="State 1896\n\l532 lambda-expression: lambda-introducer LESS template-parameter-list GREATER lambda-declarator compound-statement •\l"]
  1896 -> "1896R532" [style=solid]
 "1896R532" [label="R532", fillcolor=3, shape=diamond, style=filled]
  1897 [label="State 1897\n\l533 lambda-expression: lambda-introducer LESS template-parameter-list GREATER requires-clause lambda-declarator • compound-statement\l"]
  1897 -> 289 [style=solid label="OPEN_BRACE"]
  1897 -> 1945 [style=dashed label="compound-statement"]
  1898 [label="State 1898\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l712 noptr-abstract-declarator: noptr-abstract-declarator OPEN_SQUARE constant-expression CLOSE_SQUARE attribute-specifier-seq •\l"]
  1898 -> 4 [style=solid label="ALIGNAS"]
  1898 -> 10 [style=solid label="OPEN_SQUARE"]
  1898 -> 57 [style=dashed label="alignment-specifier"]
  1898 -> 260 [style=dashed label="attribute-specifier"]
  1898 -> "1898R712d" [label="[OPEN_SQUARE]", style=solid]
 "1898R712d" [label="R712", fillcolor=5, shape=diamond, style=filled]
  1898 -> "1898R712" [style=solid]
 "1898R712" [label="R712", fillcolor=3, shape=diamond, style=filled]
  1899 [label="State 1899\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l719 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator OPEN_SQUARE constant-expression CLOSE_SQUARE attribute-specifier-seq •\l"]
  1899 -> 4 [style=solid label="ALIGNAS"]
  1899 -> 10 [style=solid label="OPEN_SQUARE"]
  1899 -> 57 [style=dashed label="alignment-specifier"]
  1899 -> 260 [style=dashed label="attribute-specifier"]
  1899 -> "1899R719d" [label="[OPEN_SQUARE]", style=solid]
 "1899R719d" [label="R719", fillcolor=5, shape=diamond, style=filled]
  1899 -> "1899R719" [style=solid]
 "1899R719" [label="R719", fillcolor=3, shape=diamond, style=filled]
  1900 [label="State 1900\n\l824 parameter-declaration: attribute-specifier-seq THIS decl-specifier-seq abstract-declarator EQ initializer-clause •\l"]
  1900 -> "1900R824" [style=solid]
 "1900R824" [label="R824", fillcolor=3, shape=diamond, style=filled]
  1901 [label="State 1901\n\l808 parameter-declaration: attribute-specifier-seq THIS decl-specifier-seq declarator EQ initializer-clause •\l"]
  1901 -> "1901R808" [style=solid]
 "1901R808" [label="R808", fillcolor=3, shape=diamond, style=filled]
  1902 [label="State 1902\n\l663 nested-namespace-definition: NAMESPACE enclosing-namespace-specifier SCOPE INLINE IDENTIFIER OPEN_BRACE namespace-body CLOSE_BRACE •\l"]
  1902 -> "1902R663" [style=solid]
 "1902R663" [label="R663", fillcolor=3, shape=diamond, style=filled]
  1903 [label="State 1903\n\l968 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE initializer SEMICOLON •\l"]
  1903 -> "1903R968" [style=solid]
 "1903R968" [label="R968", fillcolor=3, shape=diamond, style=filled]
  1904 [label="State 1904\n\l165 condition: attribute-specifier-seq decl-specifier-seq declarator brace-or-equal-initializer •\l"]
  1904 -> "1904R165" [style=solid]
 "1904R165" [label="R165", fillcolor=3, shape=diamond, style=filled]
  1905 [label="State 1905\n\l506 iteration-statement: DO statement WHILE OPEN_PAREN expression CLOSE_PAREN • SEMICOLON\l"]
  1905 -> 1946 [style=solid label="SEMICOLON"]
  1906 [label="State 1906\n\l382 for-range-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE identifier-list • CLOSE_SQUARE\l462 identifier-list: identifier-list • COMMA IDENTIFIER\l966 simple-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE identifier-list • CLOSE_SQUARE initializer SEMICOLON\l"]
  1906 -> 1131 [style=solid label="COMMA"]
  1906 -> 1947 [style=solid label="CLOSE_SQUARE"]
  1907 [label="State 1907\n\l384 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE • identifier-list CLOSE_SQUARE\l968 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE • identifier-list CLOSE_SQUARE initializer SEMICOLON\l"]
  1907 -> 640 [style=solid label="IDENTIFIER"]
  1907 -> 1948 [style=dashed label="identifier-list"]
  1908 [label="State 1908\n\l383 for-range-declaration: decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE •\l967 simple-declaration: decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE • initializer SEMICOLON\l"]
  1908 -> 1273 [style=solid label="EQ"]
  1908 -> 643 [style=solid label="OPEN_PAREN"]
  1908 -> 935 [style=solid label="OPEN_BRACE"]
  1908 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1908 -> 646 [style=dashed label="braced-init-list"]
  1908 -> 1512 [style=dashed label="initializer"]
  1908 -> "1908R383" [style=solid]
 "1908R383" [label="R383", fillcolor=3, shape=diamond, style=filled]
  1909 [label="State 1909\n\l385 for-range-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list • CLOSE_SQUARE\l462 identifier-list: identifier-list • COMMA IDENTIFIER\l969 simple-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list • CLOSE_SQUARE initializer SEMICOLON\l"]
  1909 -> 1131 [style=solid label="COMMA"]
  1909 -> 1949 [style=solid label="CLOSE_SQUARE"]
  1910 [label="State 1910\n\l511 iteration-statement: FOR OPEN_PAREN for-range-declaration COLON for-range-initializer CLOSE_PAREN • statement\l"]
  1910 -> 356 [style=solid label="PLUS"]
  1910 -> 357 [style=solid label="MINUS"]
  1910 -> 1 [style=solid label="USING"]
  1910 -> 661 [style=solid label="IDENTIFIER"]
  1910 -> 662 [style=solid label="SEMICOLON"]
  1910 -> 4 [style=solid label="ALIGNAS"]
  1910 -> 358 [style=solid label="OPEN_PAREN"]
  1910 -> 359 [style=solid label="AND"]
  1910 -> 8 [style=solid label="ASM"]
  1910 -> 360 [style=solid label="SCOPE"]
  1910 -> 663 [style=solid label="OPEN_SQUARE"]
  1910 -> 362 [style=solid label="CO_AWAIT"]
  1910 -> 289 [style=solid label="OPEN_BRACE"]
  1910 -> 11 [style=solid label="VIRTUAL"]
  1910 -> 363 [style=solid label="ZERO_LB"]
  1910 -> 364 [style=solid label="ZERO_HB"]
  1910 -> 365 [style=solid label="SINGLE_QUOTE"]
  1910 -> 366 [style=solid label="FALSE"]
  1910 -> 367 [style=solid label="TRUE"]
  1910 -> 12 [style=solid label="CLASS"]
  1910 -> 13 [style=solid label="STRUCT"]
  1910 -> 14 [style=solid label="UNION"]
  1910 -> 368 [style=solid label="NOEXCEPT"]
  1910 -> 17 [style=solid label="OPERATOR"]
  1910 -> 665 [style=solid label="CO_RETURN"]
  1910 -> 18 [style=solid label="CONST"]
  1910 -> 19 [style=solid label="VOLATILE"]
  1910 -> 20 [style=solid label="FRIEND"]
  1910 -> 21 [style=solid label="TYPEDEF"]
  1910 -> 22 [style=solid label="CONSTEXPR"]
  1910 -> 23 [style=solid label="CONSTEVAL"]
  1910 -> 24 [style=solid label="CONSTINIT"]
  1910 -> 258 [style=solid label="INLINE"]
  1910 -> 26 [style=solid label="DECLTYPE"]
  1910 -> 369 [style=solid label="DELETE"]
  1910 -> 370 [style=solid label="DOT"]
  1910 -> 27 [style=solid label="ENUM"]
  1910 -> 184 [style=solid label="UNICODE_8"]
  1910 -> 259 [style=solid label="EXTERN"]
  1910 -> 29 [style=solid label="EXPLICIT"]
  1910 -> 371 [style=solid label="MULT"]
  1910 -> 666 [style=solid label="DEFAULT"]
  1910 -> 667 [style=solid label="TRY"]
  1910 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1910 -> 372 [style=solid label="ZERO_LX"]
  1910 -> 373 [style=solid label="ZERO_HX"]
  1910 -> 668 [style=solid label="WHILE"]
  1910 -> 669 [style=solid label="DO"]
  1910 -> 670 [style=solid label="FOR"]
  1910 -> 671 [style=solid label="BREAK"]
  1910 -> 672 [style=solid label="CONTINUE"]
  1910 -> 673 [style=solid label="RETURN"]
  1910 -> 674 [style=solid label="GOTO"]
  1910 -> 675 [style=solid label="CASE"]
  1910 -> 676 [style=solid label="NAMESPACE"]
  1910 -> 374 [style=solid label="REQUIRES"]
  1910 -> 375 [style=solid label="NEW"]
  1910 -> 376 [style=solid label="COMPL"]
  1910 -> 377 [style=solid label="NOT"]
  1910 -> 378 [style=solid label="PLUS_PLUS"]
  1910 -> 379 [style=solid label="MINUS_MINUS"]
  1910 -> 380 [style=solid label="THIS"]
  1910 -> 36 [style=solid label="AUTO"]
  1910 -> 381 [style=solid label="NULLPTR"]
  1910 -> 382 [style=solid label="DYNAMIC_CAST"]
  1910 -> 383 [style=solid label="STATIC_CAST"]
  1910 -> 384 [style=solid label="REINTERPRET_CAST"]
  1910 -> 385 [style=solid label="CONST_CAST"]
  1910 -> 386 [style=solid label="TYPEID"]
  1910 -> 677 [style=solid label="IF"]
  1910 -> 678 [style=solid label="SWITCH"]
  1910 -> 37 [style=solid label="CHAR"]
  1910 -> 38 [style=solid label="CHAR8_T"]
  1910 -> 39 [style=solid label="CHAR16_T"]
  1910 -> 40 [style=solid label="CHAR32_T"]
  1910 -> 41 [style=solid label="WCHAR_T"]
  1910 -> 42 [style=solid label="BOOL"]
  1910 -> 43 [style=solid label="SHORT"]
  1910 -> 44 [style=solid label="INT"]
  1910 -> 45 [style=solid label="LONG"]
  1910 -> 46 [style=solid label="SIGNED"]
  1910 -> 47 [style=solid label="UNSIGNED"]
  1910 -> 48 [style=solid label="FLOAT"]
  1910 -> 49 [style=solid label="DOUBLE"]
  1910 -> 50 [style=solid label="VOID"]
  1910 -> 51 [style=solid label="STATIC_ASSERT"]
  1910 -> 52 [style=solid label="STATIC"]
  1910 -> 53 [style=solid label="THREAD_LOCAL"]
  1910 -> 54 [style=solid label="MUTABLE"]
  1910 -> 523 [style=solid label="THROW"]
  1910 -> 55 [style=solid label="TYPENAME"]
  1910 -> 387 [style=solid label="SIZEOF"]
  1910 -> 388 [style=solid label="ALIGNOF"]
  1910 -> 524 [style=solid label="CO_YIELD"]
  1910 -> 389 [style=solid label="'0'"]
  1910 -> 390 [style=solid label="'1'"]
  1910 -> 391 [style=solid label="'2'"]
  1910 -> 392 [style=solid label="'3'"]
  1910 -> 393 [style=solid label="'4'"]
  1910 -> 394 [style=solid label="'5'"]
  1910 -> 395 [style=solid label="'6'"]
  1910 -> 396 [style=solid label="'7'"]
  1910 -> 397 [style=solid label="'8'"]
  1910 -> 398 [style=solid label="'9'"]
  1910 -> 205 [style=solid label="'u'"]
  1910 -> 206 [style=solid label="'U'"]
  1910 -> 207 [style=solid label="'L'"]
  1910 -> 208 [style=solid label="'R'"]
  1910 -> 399 [style=dashed label="additive-expression"]
  1910 -> 56 [style=dashed label="alias-declaration"]
  1910 -> 57 [style=dashed label="alignment-specifier"]
  1910 -> 400 [style=dashed label="and-expression"]
  1910 -> 58 [style=dashed label="asm-declaration"]
  1910 -> 525 [style=dashed label="assignment-expression"]
  1910 -> 60 [style=dashed label="attribute-specifier"]
  1910 -> 679 [style=dashed label="attribute-specifier-seq"]
  1910 -> 401 [style=dashed label="await-expression"]
  1910 -> 402 [style=dashed label="binary-literal"]
  1910 -> 680 [style=dashed label="block-declaration"]
  1910 -> 403 [style=dashed label="boolean-literal"]
  1910 -> 404 [style=dashed label="cast-expression"]
  1910 -> 405 [style=dashed label="character-literal"]
  1910 -> 63 [style=dashed label="class-head"]
  1910 -> 64 [style=dashed label="class-key"]
  1910 -> 65 [style=dashed label="class-name"]
  1910 -> 66 [style=dashed label="class-specifier"]
  1910 -> 406 [style=dashed label="compare-expression"]
  1910 -> 681 [style=dashed label="compound-statement"]
  1910 -> 67 [style=dashed label="concept-name"]
  1910 -> 526 [style=dashed label="conditional-expression"]
  1910 -> 68 [style=dashed label="conversion-function-id"]
  1910 -> 682 [style=dashed label="coroutine-return-statement"]
  1910 -> 69 [style=dashed label="cv-qualifier"]
  1910 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1910 -> 410 [style=dashed label="decimal-literal"]
  1910 -> 70 [style=dashed label="decl-specifier"]
  1910 -> 683 [style=dashed label="decl-specifier-seq"]
  1910 -> 684 [style=dashed label="declaration-statement"]
  1910 -> 76 [style=dashed label="decltype-specifier"]
  1910 -> 78 [style=dashed label="defining-type-specifier"]
  1910 -> 411 [style=dashed label="delete-expression"]
  1910 -> 412 [style=dashed label="digit"]
  1910 -> 413 [style=dashed label="digit-sequence"]
  1910 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1910 -> 80 [style=dashed label="elaborated-type-specifier"]
  1910 -> 414 [style=dashed label="encoding-prefix"]
  1910 -> 82 [style=dashed label="enum-head"]
  1910 -> 83 [style=dashed label="enum-key"]
  1910 -> 84 [style=dashed label="enum-name"]
  1910 -> 85 [style=dashed label="enum-specifier"]
  1910 -> 415 [style=dashed label="equality-expression"]
  1910 -> 416 [style=dashed label="exclusive-or-expression"]
  1910 -> 264 [style=dashed label="explicit-specifier"]
  1910 -> 685 [style=dashed label="expression"]
  1910 -> 686 [style=dashed label="expression-statement"]
  1910 -> 417 [style=dashed label="floating-point-literal"]
  1910 -> 418 [style=dashed label="fold-expression"]
  1910 -> 419 [style=dashed label="fractional-constant"]
  1910 -> 91 [style=dashed label="function-specifier"]
  1910 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1910 -> 421 [style=dashed label="hexadecimal-literal"]
  1910 -> 422 [style=dashed label="hexadecimal-prefix"]
  1910 -> 423 [style=dashed label="id-expression"]
  1910 -> 424 [style=dashed label="inclusive-or-expression"]
  1910 -> 425 [style=dashed label="integer-literal"]
  1910 -> 687 [style=dashed label="iteration-statement"]
  1910 -> 688 [style=dashed label="jump-statement"]
  1910 -> 689 [style=dashed label="labeled-statement"]
  1910 -> 426 [style=dashed label="lambda-expression"]
  1910 -> 427 [style=dashed label="lambda-introducer"]
  1910 -> 428 [style=dashed label="literal"]
  1910 -> 95 [style=dashed label="literal-operator-id"]
  1910 -> 429 [style=dashed label="logical-and-expression"]
  1910 -> 528 [style=dashed label="logical-or-expression"]
  1910 -> 431 [style=dashed label="multiplicative-expression"]
  1910 -> 99 [style=dashed label="namespace-alias"]
  1910 -> 100 [style=dashed label="namespace-alias-definition"]
  1910 -> 102 [style=dashed label="namespace-name"]
  1910 -> 432 [style=dashed label="nested-name-specifier"]
  1910 -> 433 [style=dashed label="new-expression"]
  1910 -> 434 [style=dashed label="noexcept-expression"]
  1910 -> 435 [style=dashed label="nonzero-digit"]
  1910 -> 436 [style=dashed label="octal-literal"]
  1910 -> 107 [style=dashed label="opaque-enum-declaration"]
  1910 -> 108 [style=dashed label="operator-function-id"]
  1910 -> 109 [style=dashed label="placeholder-type-specifier"]
  1910 -> 437 [style=dashed label="pm-expression"]
  1910 -> 438 [style=dashed label="pointer-literal"]
  1910 -> 439 [style=dashed label="postfix-expression"]
  1910 -> 440 [style=dashed label="primary-expression"]
  1910 -> 112 [style=dashed label="qualified-id"]
  1910 -> 441 [style=dashed label="relational-expression"]
  1910 -> 442 [style=dashed label="requires-expression"]
  1910 -> 690 [style=dashed label="selection-statement"]
  1910 -> 443 [style=dashed label="shift-expression"]
  1910 -> 113 [style=dashed label="simple-declaration"]
  1910 -> 114 [style=dashed label="simple-template-id"]
  1910 -> 444 [style=dashed label="simple-type-specifier"]
  1910 -> 1950 [style=dashed label="statement"]
  1910 -> 116 [style=dashed label="static_assert-declaration"]
  1910 -> 117 [style=dashed label="storage-class-specifier"]
  1910 -> 445 [style=dashed label="string-literal"]
  1910 -> 120 [style=dashed label="template-id"]
  1910 -> 215 [style=dashed label="template-name"]
  1910 -> 530 [style=dashed label="throw-expression"]
  1910 -> 693 [style=dashed label="try-block"]
  1910 -> 123 [style=dashed label="type-constraint"]
  1910 -> 124 [style=dashed label="type-name"]
  1910 -> 125 [style=dashed label="type-specifier"]
  1910 -> 126 [style=dashed label="typedef-name"]
  1910 -> 448 [style=dashed label="typename-specifier"]
  1910 -> 449 [style=dashed label="unary-expression"]
  1910 -> 450 [style=dashed label="unary-operator"]
  1910 -> 129 [style=dashed label="unqualified-id"]
  1910 -> 451 [style=dashed label="user-defined-character-literal"]
  1910 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1910 -> 453 [style=dashed label="user-defined-integer-literal"]
  1910 -> 454 [style=dashed label="user-defined-literal"]
  1910 -> 455 [style=dashed label="user-defined-string-literal"]
  1910 -> 130 [style=dashed label="using-declaration"]
  1910 -> 131 [style=dashed label="using-directive"]
  1910 -> 132 [style=dashed label="using-enum-declaration"]
  1910 -> 532 [style=dashed label="yield-expression"]
  1911 [label="State 1911\n\l507 iteration-statement: FOR OPEN_PAREN init-statement SEMICOLON CLOSE_PAREN statement •\l"]
  1911 -> "1911R507" [style=solid]
 "1911R507" [label="R507", fillcolor=3, shape=diamond, style=filled]
  1912 [label="State 1912\n\l509 iteration-statement: FOR OPEN_PAREN init-statement SEMICOLON expression CLOSE_PAREN • statement\l"]
  1912 -> 356 [style=solid label="PLUS"]
  1912 -> 357 [style=solid label="MINUS"]
  1912 -> 1 [style=solid label="USING"]
  1912 -> 661 [style=solid label="IDENTIFIER"]
  1912 -> 662 [style=solid label="SEMICOLON"]
  1912 -> 4 [style=solid label="ALIGNAS"]
  1912 -> 358 [style=solid label="OPEN_PAREN"]
  1912 -> 359 [style=solid label="AND"]
  1912 -> 8 [style=solid label="ASM"]
  1912 -> 360 [style=solid label="SCOPE"]
  1912 -> 663 [style=solid label="OPEN_SQUARE"]
  1912 -> 362 [style=solid label="CO_AWAIT"]
  1912 -> 289 [style=solid label="OPEN_BRACE"]
  1912 -> 11 [style=solid label="VIRTUAL"]
  1912 -> 363 [style=solid label="ZERO_LB"]
  1912 -> 364 [style=solid label="ZERO_HB"]
  1912 -> 365 [style=solid label="SINGLE_QUOTE"]
  1912 -> 366 [style=solid label="FALSE"]
  1912 -> 367 [style=solid label="TRUE"]
  1912 -> 12 [style=solid label="CLASS"]
  1912 -> 13 [style=solid label="STRUCT"]
  1912 -> 14 [style=solid label="UNION"]
  1912 -> 368 [style=solid label="NOEXCEPT"]
  1912 -> 17 [style=solid label="OPERATOR"]
  1912 -> 665 [style=solid label="CO_RETURN"]
  1912 -> 18 [style=solid label="CONST"]
  1912 -> 19 [style=solid label="VOLATILE"]
  1912 -> 20 [style=solid label="FRIEND"]
  1912 -> 21 [style=solid label="TYPEDEF"]
  1912 -> 22 [style=solid label="CONSTEXPR"]
  1912 -> 23 [style=solid label="CONSTEVAL"]
  1912 -> 24 [style=solid label="CONSTINIT"]
  1912 -> 258 [style=solid label="INLINE"]
  1912 -> 26 [style=solid label="DECLTYPE"]
  1912 -> 369 [style=solid label="DELETE"]
  1912 -> 370 [style=solid label="DOT"]
  1912 -> 27 [style=solid label="ENUM"]
  1912 -> 184 [style=solid label="UNICODE_8"]
  1912 -> 259 [style=solid label="EXTERN"]
  1912 -> 29 [style=solid label="EXPLICIT"]
  1912 -> 371 [style=solid label="MULT"]
  1912 -> 666 [style=solid label="DEFAULT"]
  1912 -> 667 [style=solid label="TRY"]
  1912 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1912 -> 372 [style=solid label="ZERO_LX"]
  1912 -> 373 [style=solid label="ZERO_HX"]
  1912 -> 668 [style=solid label="WHILE"]
  1912 -> 669 [style=solid label="DO"]
  1912 -> 670 [style=solid label="FOR"]
  1912 -> 671 [style=solid label="BREAK"]
  1912 -> 672 [style=solid label="CONTINUE"]
  1912 -> 673 [style=solid label="RETURN"]
  1912 -> 674 [style=solid label="GOTO"]
  1912 -> 675 [style=solid label="CASE"]
  1912 -> 676 [style=solid label="NAMESPACE"]
  1912 -> 374 [style=solid label="REQUIRES"]
  1912 -> 375 [style=solid label="NEW"]
  1912 -> 376 [style=solid label="COMPL"]
  1912 -> 377 [style=solid label="NOT"]
  1912 -> 378 [style=solid label="PLUS_PLUS"]
  1912 -> 379 [style=solid label="MINUS_MINUS"]
  1912 -> 380 [style=solid label="THIS"]
  1912 -> 36 [style=solid label="AUTO"]
  1912 -> 381 [style=solid label="NULLPTR"]
  1912 -> 382 [style=solid label="DYNAMIC_CAST"]
  1912 -> 383 [style=solid label="STATIC_CAST"]
  1912 -> 384 [style=solid label="REINTERPRET_CAST"]
  1912 -> 385 [style=solid label="CONST_CAST"]
  1912 -> 386 [style=solid label="TYPEID"]
  1912 -> 677 [style=solid label="IF"]
  1912 -> 678 [style=solid label="SWITCH"]
  1912 -> 37 [style=solid label="CHAR"]
  1912 -> 38 [style=solid label="CHAR8_T"]
  1912 -> 39 [style=solid label="CHAR16_T"]
  1912 -> 40 [style=solid label="CHAR32_T"]
  1912 -> 41 [style=solid label="WCHAR_T"]
  1912 -> 42 [style=solid label="BOOL"]
  1912 -> 43 [style=solid label="SHORT"]
  1912 -> 44 [style=solid label="INT"]
  1912 -> 45 [style=solid label="LONG"]
  1912 -> 46 [style=solid label="SIGNED"]
  1912 -> 47 [style=solid label="UNSIGNED"]
  1912 -> 48 [style=solid label="FLOAT"]
  1912 -> 49 [style=solid label="DOUBLE"]
  1912 -> 50 [style=solid label="VOID"]
  1912 -> 51 [style=solid label="STATIC_ASSERT"]
  1912 -> 52 [style=solid label="STATIC"]
  1912 -> 53 [style=solid label="THREAD_LOCAL"]
  1912 -> 54 [style=solid label="MUTABLE"]
  1912 -> 523 [style=solid label="THROW"]
  1912 -> 55 [style=solid label="TYPENAME"]
  1912 -> 387 [style=solid label="SIZEOF"]
  1912 -> 388 [style=solid label="ALIGNOF"]
  1912 -> 524 [style=solid label="CO_YIELD"]
  1912 -> 389 [style=solid label="'0'"]
  1912 -> 390 [style=solid label="'1'"]
  1912 -> 391 [style=solid label="'2'"]
  1912 -> 392 [style=solid label="'3'"]
  1912 -> 393 [style=solid label="'4'"]
  1912 -> 394 [style=solid label="'5'"]
  1912 -> 395 [style=solid label="'6'"]
  1912 -> 396 [style=solid label="'7'"]
  1912 -> 397 [style=solid label="'8'"]
  1912 -> 398 [style=solid label="'9'"]
  1912 -> 205 [style=solid label="'u'"]
  1912 -> 206 [style=solid label="'U'"]
  1912 -> 207 [style=solid label="'L'"]
  1912 -> 208 [style=solid label="'R'"]
  1912 -> 399 [style=dashed label="additive-expression"]
  1912 -> 56 [style=dashed label="alias-declaration"]
  1912 -> 57 [style=dashed label="alignment-specifier"]
  1912 -> 400 [style=dashed label="and-expression"]
  1912 -> 58 [style=dashed label="asm-declaration"]
  1912 -> 525 [style=dashed label="assignment-expression"]
  1912 -> 60 [style=dashed label="attribute-specifier"]
  1912 -> 679 [style=dashed label="attribute-specifier-seq"]
  1912 -> 401 [style=dashed label="await-expression"]
  1912 -> 402 [style=dashed label="binary-literal"]
  1912 -> 680 [style=dashed label="block-declaration"]
  1912 -> 403 [style=dashed label="boolean-literal"]
  1912 -> 404 [style=dashed label="cast-expression"]
  1912 -> 405 [style=dashed label="character-literal"]
  1912 -> 63 [style=dashed label="class-head"]
  1912 -> 64 [style=dashed label="class-key"]
  1912 -> 65 [style=dashed label="class-name"]
  1912 -> 66 [style=dashed label="class-specifier"]
  1912 -> 406 [style=dashed label="compare-expression"]
  1912 -> 681 [style=dashed label="compound-statement"]
  1912 -> 67 [style=dashed label="concept-name"]
  1912 -> 526 [style=dashed label="conditional-expression"]
  1912 -> 68 [style=dashed label="conversion-function-id"]
  1912 -> 682 [style=dashed label="coroutine-return-statement"]
  1912 -> 69 [style=dashed label="cv-qualifier"]
  1912 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1912 -> 410 [style=dashed label="decimal-literal"]
  1912 -> 70 [style=dashed label="decl-specifier"]
  1912 -> 683 [style=dashed label="decl-specifier-seq"]
  1912 -> 684 [style=dashed label="declaration-statement"]
  1912 -> 76 [style=dashed label="decltype-specifier"]
  1912 -> 78 [style=dashed label="defining-type-specifier"]
  1912 -> 411 [style=dashed label="delete-expression"]
  1912 -> 412 [style=dashed label="digit"]
  1912 -> 413 [style=dashed label="digit-sequence"]
  1912 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1912 -> 80 [style=dashed label="elaborated-type-specifier"]
  1912 -> 414 [style=dashed label="encoding-prefix"]
  1912 -> 82 [style=dashed label="enum-head"]
  1912 -> 83 [style=dashed label="enum-key"]
  1912 -> 84 [style=dashed label="enum-name"]
  1912 -> 85 [style=dashed label="enum-specifier"]
  1912 -> 415 [style=dashed label="equality-expression"]
  1912 -> 416 [style=dashed label="exclusive-or-expression"]
  1912 -> 264 [style=dashed label="explicit-specifier"]
  1912 -> 685 [style=dashed label="expression"]
  1912 -> 686 [style=dashed label="expression-statement"]
  1912 -> 417 [style=dashed label="floating-point-literal"]
  1912 -> 418 [style=dashed label="fold-expression"]
  1912 -> 419 [style=dashed label="fractional-constant"]
  1912 -> 91 [style=dashed label="function-specifier"]
  1912 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1912 -> 421 [style=dashed label="hexadecimal-literal"]
  1912 -> 422 [style=dashed label="hexadecimal-prefix"]
  1912 -> 423 [style=dashed label="id-expression"]
  1912 -> 424 [style=dashed label="inclusive-or-expression"]
  1912 -> 425 [style=dashed label="integer-literal"]
  1912 -> 687 [style=dashed label="iteration-statement"]
  1912 -> 688 [style=dashed label="jump-statement"]
  1912 -> 689 [style=dashed label="labeled-statement"]
  1912 -> 426 [style=dashed label="lambda-expression"]
  1912 -> 427 [style=dashed label="lambda-introducer"]
  1912 -> 428 [style=dashed label="literal"]
  1912 -> 95 [style=dashed label="literal-operator-id"]
  1912 -> 429 [style=dashed label="logical-and-expression"]
  1912 -> 528 [style=dashed label="logical-or-expression"]
  1912 -> 431 [style=dashed label="multiplicative-expression"]
  1912 -> 99 [style=dashed label="namespace-alias"]
  1912 -> 100 [style=dashed label="namespace-alias-definition"]
  1912 -> 102 [style=dashed label="namespace-name"]
  1912 -> 432 [style=dashed label="nested-name-specifier"]
  1912 -> 433 [style=dashed label="new-expression"]
  1912 -> 434 [style=dashed label="noexcept-expression"]
  1912 -> 435 [style=dashed label="nonzero-digit"]
  1912 -> 436 [style=dashed label="octal-literal"]
  1912 -> 107 [style=dashed label="opaque-enum-declaration"]
  1912 -> 108 [style=dashed label="operator-function-id"]
  1912 -> 109 [style=dashed label="placeholder-type-specifier"]
  1912 -> 437 [style=dashed label="pm-expression"]
  1912 -> 438 [style=dashed label="pointer-literal"]
  1912 -> 439 [style=dashed label="postfix-expression"]
  1912 -> 440 [style=dashed label="primary-expression"]
  1912 -> 112 [style=dashed label="qualified-id"]
  1912 -> 441 [style=dashed label="relational-expression"]
  1912 -> 442 [style=dashed label="requires-expression"]
  1912 -> 690 [style=dashed label="selection-statement"]
  1912 -> 443 [style=dashed label="shift-expression"]
  1912 -> 113 [style=dashed label="simple-declaration"]
  1912 -> 114 [style=dashed label="simple-template-id"]
  1912 -> 444 [style=dashed label="simple-type-specifier"]
  1912 -> 1951 [style=dashed label="statement"]
  1912 -> 116 [style=dashed label="static_assert-declaration"]
  1912 -> 117 [style=dashed label="storage-class-specifier"]
  1912 -> 445 [style=dashed label="string-literal"]
  1912 -> 120 [style=dashed label="template-id"]
  1912 -> 215 [style=dashed label="template-name"]
  1912 -> 530 [style=dashed label="throw-expression"]
  1912 -> 693 [style=dashed label="try-block"]
  1912 -> 123 [style=dashed label="type-constraint"]
  1912 -> 124 [style=dashed label="type-name"]
  1912 -> 125 [style=dashed label="type-specifier"]
  1912 -> 126 [style=dashed label="typedef-name"]
  1912 -> 448 [style=dashed label="typename-specifier"]
  1912 -> 449 [style=dashed label="unary-expression"]
  1912 -> 450 [style=dashed label="unary-operator"]
  1912 -> 129 [style=dashed label="unqualified-id"]
  1912 -> 451 [style=dashed label="user-defined-character-literal"]
  1912 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1912 -> 453 [style=dashed label="user-defined-integer-literal"]
  1912 -> 454 [style=dashed label="user-defined-literal"]
  1912 -> 455 [style=dashed label="user-defined-string-literal"]
  1912 -> 130 [style=dashed label="using-declaration"]
  1912 -> 131 [style=dashed label="using-directive"]
  1912 -> 132 [style=dashed label="using-enum-declaration"]
  1912 -> 532 [style=dashed label="yield-expression"]
  1913 [label="State 1913\n\l382 for-range-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE • identifier-list CLOSE_SQUARE\l"]
  1913 -> 640 [style=solid label="IDENTIFIER"]
  1913 -> 1952 [style=dashed label="identifier-list"]
  1914 [label="State 1914\n\l165 condition: attribute-specifier-seq decl-specifier-seq declarator • brace-or-equal-initializer\l380 for-range-declaration: attribute-specifier-seq decl-specifier-seq declarator •\l"]
  1914 -> 1273 [style=solid label="EQ"]
  1914 -> 935 [style=solid label="OPEN_BRACE"]
  1914 -> 1904 [style=dashed label="brace-or-equal-initializer"]
  1914 -> 646 [style=dashed label="braced-init-list"]
  1914 -> "1914R380" [style=solid]
 "1914R380" [label="R380", fillcolor=3, shape=diamond, style=filled]
  1915 [label="State 1915\n\l384 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier • OPEN_SQUARE identifier-list CLOSE_SQUARE\l"]
  1915 -> 1953 [style=solid label="OPEN_SQUARE"]
  1916 [label="State 1916\n\l508 iteration-statement: FOR OPEN_PAREN init-statement condition SEMICOLON CLOSE_PAREN • statement\l"]
  1916 -> 356 [style=solid label="PLUS"]
  1916 -> 357 [style=solid label="MINUS"]
  1916 -> 1 [style=solid label="USING"]
  1916 -> 661 [style=solid label="IDENTIFIER"]
  1916 -> 662 [style=solid label="SEMICOLON"]
  1916 -> 4 [style=solid label="ALIGNAS"]
  1916 -> 358 [style=solid label="OPEN_PAREN"]
  1916 -> 359 [style=solid label="AND"]
  1916 -> 8 [style=solid label="ASM"]
  1916 -> 360 [style=solid label="SCOPE"]
  1916 -> 663 [style=solid label="OPEN_SQUARE"]
  1916 -> 362 [style=solid label="CO_AWAIT"]
  1916 -> 289 [style=solid label="OPEN_BRACE"]
  1916 -> 11 [style=solid label="VIRTUAL"]
  1916 -> 363 [style=solid label="ZERO_LB"]
  1916 -> 364 [style=solid label="ZERO_HB"]
  1916 -> 365 [style=solid label="SINGLE_QUOTE"]
  1916 -> 366 [style=solid label="FALSE"]
  1916 -> 367 [style=solid label="TRUE"]
  1916 -> 12 [style=solid label="CLASS"]
  1916 -> 13 [style=solid label="STRUCT"]
  1916 -> 14 [style=solid label="UNION"]
  1916 -> 368 [style=solid label="NOEXCEPT"]
  1916 -> 17 [style=solid label="OPERATOR"]
  1916 -> 665 [style=solid label="CO_RETURN"]
  1916 -> 18 [style=solid label="CONST"]
  1916 -> 19 [style=solid label="VOLATILE"]
  1916 -> 20 [style=solid label="FRIEND"]
  1916 -> 21 [style=solid label="TYPEDEF"]
  1916 -> 22 [style=solid label="CONSTEXPR"]
  1916 -> 23 [style=solid label="CONSTEVAL"]
  1916 -> 24 [style=solid label="CONSTINIT"]
  1916 -> 258 [style=solid label="INLINE"]
  1916 -> 26 [style=solid label="DECLTYPE"]
  1916 -> 369 [style=solid label="DELETE"]
  1916 -> 370 [style=solid label="DOT"]
  1916 -> 27 [style=solid label="ENUM"]
  1916 -> 184 [style=solid label="UNICODE_8"]
  1916 -> 259 [style=solid label="EXTERN"]
  1916 -> 29 [style=solid label="EXPLICIT"]
  1916 -> 371 [style=solid label="MULT"]
  1916 -> 666 [style=solid label="DEFAULT"]
  1916 -> 667 [style=solid label="TRY"]
  1916 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1916 -> 372 [style=solid label="ZERO_LX"]
  1916 -> 373 [style=solid label="ZERO_HX"]
  1916 -> 668 [style=solid label="WHILE"]
  1916 -> 669 [style=solid label="DO"]
  1916 -> 670 [style=solid label="FOR"]
  1916 -> 671 [style=solid label="BREAK"]
  1916 -> 672 [style=solid label="CONTINUE"]
  1916 -> 673 [style=solid label="RETURN"]
  1916 -> 674 [style=solid label="GOTO"]
  1916 -> 675 [style=solid label="CASE"]
  1916 -> 676 [style=solid label="NAMESPACE"]
  1916 -> 374 [style=solid label="REQUIRES"]
  1916 -> 375 [style=solid label="NEW"]
  1916 -> 376 [style=solid label="COMPL"]
  1916 -> 377 [style=solid label="NOT"]
  1916 -> 378 [style=solid label="PLUS_PLUS"]
  1916 -> 379 [style=solid label="MINUS_MINUS"]
  1916 -> 380 [style=solid label="THIS"]
  1916 -> 36 [style=solid label="AUTO"]
  1916 -> 381 [style=solid label="NULLPTR"]
  1916 -> 382 [style=solid label="DYNAMIC_CAST"]
  1916 -> 383 [style=solid label="STATIC_CAST"]
  1916 -> 384 [style=solid label="REINTERPRET_CAST"]
  1916 -> 385 [style=solid label="CONST_CAST"]
  1916 -> 386 [style=solid label="TYPEID"]
  1916 -> 677 [style=solid label="IF"]
  1916 -> 678 [style=solid label="SWITCH"]
  1916 -> 37 [style=solid label="CHAR"]
  1916 -> 38 [style=solid label="CHAR8_T"]
  1916 -> 39 [style=solid label="CHAR16_T"]
  1916 -> 40 [style=solid label="CHAR32_T"]
  1916 -> 41 [style=solid label="WCHAR_T"]
  1916 -> 42 [style=solid label="BOOL"]
  1916 -> 43 [style=solid label="SHORT"]
  1916 -> 44 [style=solid label="INT"]
  1916 -> 45 [style=solid label="LONG"]
  1916 -> 46 [style=solid label="SIGNED"]
  1916 -> 47 [style=solid label="UNSIGNED"]
  1916 -> 48 [style=solid label="FLOAT"]
  1916 -> 49 [style=solid label="DOUBLE"]
  1916 -> 50 [style=solid label="VOID"]
  1916 -> 51 [style=solid label="STATIC_ASSERT"]
  1916 -> 52 [style=solid label="STATIC"]
  1916 -> 53 [style=solid label="THREAD_LOCAL"]
  1916 -> 54 [style=solid label="MUTABLE"]
  1916 -> 523 [style=solid label="THROW"]
  1916 -> 55 [style=solid label="TYPENAME"]
  1916 -> 387 [style=solid label="SIZEOF"]
  1916 -> 388 [style=solid label="ALIGNOF"]
  1916 -> 524 [style=solid label="CO_YIELD"]
  1916 -> 389 [style=solid label="'0'"]
  1916 -> 390 [style=solid label="'1'"]
  1916 -> 391 [style=solid label="'2'"]
  1916 -> 392 [style=solid label="'3'"]
  1916 -> 393 [style=solid label="'4'"]
  1916 -> 394 [style=solid label="'5'"]
  1916 -> 395 [style=solid label="'6'"]
  1916 -> 396 [style=solid label="'7'"]
  1916 -> 397 [style=solid label="'8'"]
  1916 -> 398 [style=solid label="'9'"]
  1916 -> 205 [style=solid label="'u'"]
  1916 -> 206 [style=solid label="'U'"]
  1916 -> 207 [style=solid label="'L'"]
  1916 -> 208 [style=solid label="'R'"]
  1916 -> 399 [style=dashed label="additive-expression"]
  1916 -> 56 [style=dashed label="alias-declaration"]
  1916 -> 57 [style=dashed label="alignment-specifier"]
  1916 -> 400 [style=dashed label="and-expression"]
  1916 -> 58 [style=dashed label="asm-declaration"]
  1916 -> 525 [style=dashed label="assignment-expression"]
  1916 -> 60 [style=dashed label="attribute-specifier"]
  1916 -> 679 [style=dashed label="attribute-specifier-seq"]
  1916 -> 401 [style=dashed label="await-expression"]
  1916 -> 402 [style=dashed label="binary-literal"]
  1916 -> 680 [style=dashed label="block-declaration"]
  1916 -> 403 [style=dashed label="boolean-literal"]
  1916 -> 404 [style=dashed label="cast-expression"]
  1916 -> 405 [style=dashed label="character-literal"]
  1916 -> 63 [style=dashed label="class-head"]
  1916 -> 64 [style=dashed label="class-key"]
  1916 -> 65 [style=dashed label="class-name"]
  1916 -> 66 [style=dashed label="class-specifier"]
  1916 -> 406 [style=dashed label="compare-expression"]
  1916 -> 681 [style=dashed label="compound-statement"]
  1916 -> 67 [style=dashed label="concept-name"]
  1916 -> 526 [style=dashed label="conditional-expression"]
  1916 -> 68 [style=dashed label="conversion-function-id"]
  1916 -> 682 [style=dashed label="coroutine-return-statement"]
  1916 -> 69 [style=dashed label="cv-qualifier"]
  1916 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1916 -> 410 [style=dashed label="decimal-literal"]
  1916 -> 70 [style=dashed label="decl-specifier"]
  1916 -> 683 [style=dashed label="decl-specifier-seq"]
  1916 -> 684 [style=dashed label="declaration-statement"]
  1916 -> 76 [style=dashed label="decltype-specifier"]
  1916 -> 78 [style=dashed label="defining-type-specifier"]
  1916 -> 411 [style=dashed label="delete-expression"]
  1916 -> 412 [style=dashed label="digit"]
  1916 -> 413 [style=dashed label="digit-sequence"]
  1916 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1916 -> 80 [style=dashed label="elaborated-type-specifier"]
  1916 -> 414 [style=dashed label="encoding-prefix"]
  1916 -> 82 [style=dashed label="enum-head"]
  1916 -> 83 [style=dashed label="enum-key"]
  1916 -> 84 [style=dashed label="enum-name"]
  1916 -> 85 [style=dashed label="enum-specifier"]
  1916 -> 415 [style=dashed label="equality-expression"]
  1916 -> 416 [style=dashed label="exclusive-or-expression"]
  1916 -> 264 [style=dashed label="explicit-specifier"]
  1916 -> 685 [style=dashed label="expression"]
  1916 -> 686 [style=dashed label="expression-statement"]
  1916 -> 417 [style=dashed label="floating-point-literal"]
  1916 -> 418 [style=dashed label="fold-expression"]
  1916 -> 419 [style=dashed label="fractional-constant"]
  1916 -> 91 [style=dashed label="function-specifier"]
  1916 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1916 -> 421 [style=dashed label="hexadecimal-literal"]
  1916 -> 422 [style=dashed label="hexadecimal-prefix"]
  1916 -> 423 [style=dashed label="id-expression"]
  1916 -> 424 [style=dashed label="inclusive-or-expression"]
  1916 -> 425 [style=dashed label="integer-literal"]
  1916 -> 687 [style=dashed label="iteration-statement"]
  1916 -> 688 [style=dashed label="jump-statement"]
  1916 -> 689 [style=dashed label="labeled-statement"]
  1916 -> 426 [style=dashed label="lambda-expression"]
  1916 -> 427 [style=dashed label="lambda-introducer"]
  1916 -> 428 [style=dashed label="literal"]
  1916 -> 95 [style=dashed label="literal-operator-id"]
  1916 -> 429 [style=dashed label="logical-and-expression"]
  1916 -> 528 [style=dashed label="logical-or-expression"]
  1916 -> 431 [style=dashed label="multiplicative-expression"]
  1916 -> 99 [style=dashed label="namespace-alias"]
  1916 -> 100 [style=dashed label="namespace-alias-definition"]
  1916 -> 102 [style=dashed label="namespace-name"]
  1916 -> 432 [style=dashed label="nested-name-specifier"]
  1916 -> 433 [style=dashed label="new-expression"]
  1916 -> 434 [style=dashed label="noexcept-expression"]
  1916 -> 435 [style=dashed label="nonzero-digit"]
  1916 -> 436 [style=dashed label="octal-literal"]
  1916 -> 107 [style=dashed label="opaque-enum-declaration"]
  1916 -> 108 [style=dashed label="operator-function-id"]
  1916 -> 109 [style=dashed label="placeholder-type-specifier"]
  1916 -> 437 [style=dashed label="pm-expression"]
  1916 -> 438 [style=dashed label="pointer-literal"]
  1916 -> 439 [style=dashed label="postfix-expression"]
  1916 -> 440 [style=dashed label="primary-expression"]
  1916 -> 112 [style=dashed label="qualified-id"]
  1916 -> 441 [style=dashed label="relational-expression"]
  1916 -> 442 [style=dashed label="requires-expression"]
  1916 -> 690 [style=dashed label="selection-statement"]
  1916 -> 443 [style=dashed label="shift-expression"]
  1916 -> 113 [style=dashed label="simple-declaration"]
  1916 -> 114 [style=dashed label="simple-template-id"]
  1916 -> 444 [style=dashed label="simple-type-specifier"]
  1916 -> 1954 [style=dashed label="statement"]
  1916 -> 116 [style=dashed label="static_assert-declaration"]
  1916 -> 117 [style=dashed label="storage-class-specifier"]
  1916 -> 445 [style=dashed label="string-literal"]
  1916 -> 120 [style=dashed label="template-id"]
  1916 -> 215 [style=dashed label="template-name"]
  1916 -> 530 [style=dashed label="throw-expression"]
  1916 -> 693 [style=dashed label="try-block"]
  1916 -> 123 [style=dashed label="type-constraint"]
  1916 -> 124 [style=dashed label="type-name"]
  1916 -> 125 [style=dashed label="type-specifier"]
  1916 -> 126 [style=dashed label="typedef-name"]
  1916 -> 448 [style=dashed label="typename-specifier"]
  1916 -> 449 [style=dashed label="unary-expression"]
  1916 -> 450 [style=dashed label="unary-operator"]
  1916 -> 129 [style=dashed label="unqualified-id"]
  1916 -> 451 [style=dashed label="user-defined-character-literal"]
  1916 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1916 -> 453 [style=dashed label="user-defined-integer-literal"]
  1916 -> 454 [style=dashed label="user-defined-literal"]
  1916 -> 455 [style=dashed label="user-defined-string-literal"]
  1916 -> 130 [style=dashed label="using-declaration"]
  1916 -> 131 [style=dashed label="using-directive"]
  1916 -> 132 [style=dashed label="using-enum-declaration"]
  1916 -> 532 [style=dashed label="yield-expression"]
  1917 [label="State 1917\n\l335 expression: expression • COMMA assignment-expression\l510 iteration-statement: FOR OPEN_PAREN init-statement condition SEMICOLON expression • CLOSE_PAREN statement\l"]
  1917 -> 1955 [style=solid label="CLOSE_PAREN"]
  1917 -> 1029 [style=solid label="COMMA"]
  1918 [label="State 1918\n\l383 for-range-declaration: decl-specifier-seq OPEN_SQUARE identifier-list • CLOSE_SQUARE\l462 identifier-list: identifier-list • COMMA IDENTIFIER\l"]
  1918 -> 1131 [style=solid label="COMMA"]
  1918 -> 1956 [style=solid label="CLOSE_SQUARE"]
  1919 [label="State 1919\n\l385 for-range-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE • identifier-list CLOSE_SQUARE\l"]
  1919 -> 640 [style=solid label="IDENTIFIER"]
  1919 -> 1957 [style=dashed label="identifier-list"]
  1920 [label="State 1920\n\l512 iteration-statement: FOR OPEN_PAREN init-statement for-range-declaration COLON for-range-initializer • CLOSE_PAREN statement\l"]
  1920 -> 1958 [style=solid label="CLOSE_PAREN"]
  1921 [label="State 1921\n\l165 condition: attribute-specifier-seq decl-specifier-seq declarator brace-or-equal-initializer •\l477 initializer: brace-or-equal-initializer •\l"]
  1921 -> "1921R165" [label="[CLOSE_PAREN]", style=solid]
 "1921R165" [label="R165", fillcolor=3, shape=diamond, style=filled]
  1921 -> "1921R477" [style=solid]
 "1921R477" [label="R477", fillcolor=3, shape=diamond, style=filled]
  1922 [label="State 1922\n\l942 selection-statement: IF OPEN_PAREN condition CLOSE_PAREN statement ELSE • statement\l"]
  1922 -> 356 [style=solid label="PLUS"]
  1922 -> 357 [style=solid label="MINUS"]
  1922 -> 1 [style=solid label="USING"]
  1922 -> 661 [style=solid label="IDENTIFIER"]
  1922 -> 662 [style=solid label="SEMICOLON"]
  1922 -> 4 [style=solid label="ALIGNAS"]
  1922 -> 358 [style=solid label="OPEN_PAREN"]
  1922 -> 359 [style=solid label="AND"]
  1922 -> 8 [style=solid label="ASM"]
  1922 -> 360 [style=solid label="SCOPE"]
  1922 -> 663 [style=solid label="OPEN_SQUARE"]
  1922 -> 362 [style=solid label="CO_AWAIT"]
  1922 -> 289 [style=solid label="OPEN_BRACE"]
  1922 -> 11 [style=solid label="VIRTUAL"]
  1922 -> 363 [style=solid label="ZERO_LB"]
  1922 -> 364 [style=solid label="ZERO_HB"]
  1922 -> 365 [style=solid label="SINGLE_QUOTE"]
  1922 -> 366 [style=solid label="FALSE"]
  1922 -> 367 [style=solid label="TRUE"]
  1922 -> 12 [style=solid label="CLASS"]
  1922 -> 13 [style=solid label="STRUCT"]
  1922 -> 14 [style=solid label="UNION"]
  1922 -> 368 [style=solid label="NOEXCEPT"]
  1922 -> 17 [style=solid label="OPERATOR"]
  1922 -> 665 [style=solid label="CO_RETURN"]
  1922 -> 18 [style=solid label="CONST"]
  1922 -> 19 [style=solid label="VOLATILE"]
  1922 -> 20 [style=solid label="FRIEND"]
  1922 -> 21 [style=solid label="TYPEDEF"]
  1922 -> 22 [style=solid label="CONSTEXPR"]
  1922 -> 23 [style=solid label="CONSTEVAL"]
  1922 -> 24 [style=solid label="CONSTINIT"]
  1922 -> 258 [style=solid label="INLINE"]
  1922 -> 26 [style=solid label="DECLTYPE"]
  1922 -> 369 [style=solid label="DELETE"]
  1922 -> 370 [style=solid label="DOT"]
  1922 -> 27 [style=solid label="ENUM"]
  1922 -> 184 [style=solid label="UNICODE_8"]
  1922 -> 259 [style=solid label="EXTERN"]
  1922 -> 29 [style=solid label="EXPLICIT"]
  1922 -> 371 [style=solid label="MULT"]
  1922 -> 666 [style=solid label="DEFAULT"]
  1922 -> 667 [style=solid label="TRY"]
  1922 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1922 -> 372 [style=solid label="ZERO_LX"]
  1922 -> 373 [style=solid label="ZERO_HX"]
  1922 -> 668 [style=solid label="WHILE"]
  1922 -> 669 [style=solid label="DO"]
  1922 -> 670 [style=solid label="FOR"]
  1922 -> 671 [style=solid label="BREAK"]
  1922 -> 672 [style=solid label="CONTINUE"]
  1922 -> 673 [style=solid label="RETURN"]
  1922 -> 674 [style=solid label="GOTO"]
  1922 -> 675 [style=solid label="CASE"]
  1922 -> 676 [style=solid label="NAMESPACE"]
  1922 -> 374 [style=solid label="REQUIRES"]
  1922 -> 375 [style=solid label="NEW"]
  1922 -> 376 [style=solid label="COMPL"]
  1922 -> 377 [style=solid label="NOT"]
  1922 -> 378 [style=solid label="PLUS_PLUS"]
  1922 -> 379 [style=solid label="MINUS_MINUS"]
  1922 -> 380 [style=solid label="THIS"]
  1922 -> 36 [style=solid label="AUTO"]
  1922 -> 381 [style=solid label="NULLPTR"]
  1922 -> 382 [style=solid label="DYNAMIC_CAST"]
  1922 -> 383 [style=solid label="STATIC_CAST"]
  1922 -> 384 [style=solid label="REINTERPRET_CAST"]
  1922 -> 385 [style=solid label="CONST_CAST"]
  1922 -> 386 [style=solid label="TYPEID"]
  1922 -> 677 [style=solid label="IF"]
  1922 -> 678 [style=solid label="SWITCH"]
  1922 -> 37 [style=solid label="CHAR"]
  1922 -> 38 [style=solid label="CHAR8_T"]
  1922 -> 39 [style=solid label="CHAR16_T"]
  1922 -> 40 [style=solid label="CHAR32_T"]
  1922 -> 41 [style=solid label="WCHAR_T"]
  1922 -> 42 [style=solid label="BOOL"]
  1922 -> 43 [style=solid label="SHORT"]
  1922 -> 44 [style=solid label="INT"]
  1922 -> 45 [style=solid label="LONG"]
  1922 -> 46 [style=solid label="SIGNED"]
  1922 -> 47 [style=solid label="UNSIGNED"]
  1922 -> 48 [style=solid label="FLOAT"]
  1922 -> 49 [style=solid label="DOUBLE"]
  1922 -> 50 [style=solid label="VOID"]
  1922 -> 51 [style=solid label="STATIC_ASSERT"]
  1922 -> 52 [style=solid label="STATIC"]
  1922 -> 53 [style=solid label="THREAD_LOCAL"]
  1922 -> 54 [style=solid label="MUTABLE"]
  1922 -> 523 [style=solid label="THROW"]
  1922 -> 55 [style=solid label="TYPENAME"]
  1922 -> 387 [style=solid label="SIZEOF"]
  1922 -> 388 [style=solid label="ALIGNOF"]
  1922 -> 524 [style=solid label="CO_YIELD"]
  1922 -> 389 [style=solid label="'0'"]
  1922 -> 390 [style=solid label="'1'"]
  1922 -> 391 [style=solid label="'2'"]
  1922 -> 392 [style=solid label="'3'"]
  1922 -> 393 [style=solid label="'4'"]
  1922 -> 394 [style=solid label="'5'"]
  1922 -> 395 [style=solid label="'6'"]
  1922 -> 396 [style=solid label="'7'"]
  1922 -> 397 [style=solid label="'8'"]
  1922 -> 398 [style=solid label="'9'"]
  1922 -> 205 [style=solid label="'u'"]
  1922 -> 206 [style=solid label="'U'"]
  1922 -> 207 [style=solid label="'L'"]
  1922 -> 208 [style=solid label="'R'"]
  1922 -> 399 [style=dashed label="additive-expression"]
  1922 -> 56 [style=dashed label="alias-declaration"]
  1922 -> 57 [style=dashed label="alignment-specifier"]
  1922 -> 400 [style=dashed label="and-expression"]
  1922 -> 58 [style=dashed label="asm-declaration"]
  1922 -> 525 [style=dashed label="assignment-expression"]
  1922 -> 60 [style=dashed label="attribute-specifier"]
  1922 -> 679 [style=dashed label="attribute-specifier-seq"]
  1922 -> 401 [style=dashed label="await-expression"]
  1922 -> 402 [style=dashed label="binary-literal"]
  1922 -> 680 [style=dashed label="block-declaration"]
  1922 -> 403 [style=dashed label="boolean-literal"]
  1922 -> 404 [style=dashed label="cast-expression"]
  1922 -> 405 [style=dashed label="character-literal"]
  1922 -> 63 [style=dashed label="class-head"]
  1922 -> 64 [style=dashed label="class-key"]
  1922 -> 65 [style=dashed label="class-name"]
  1922 -> 66 [style=dashed label="class-specifier"]
  1922 -> 406 [style=dashed label="compare-expression"]
  1922 -> 681 [style=dashed label="compound-statement"]
  1922 -> 67 [style=dashed label="concept-name"]
  1922 -> 526 [style=dashed label="conditional-expression"]
  1922 -> 68 [style=dashed label="conversion-function-id"]
  1922 -> 682 [style=dashed label="coroutine-return-statement"]
  1922 -> 69 [style=dashed label="cv-qualifier"]
  1922 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1922 -> 410 [style=dashed label="decimal-literal"]
  1922 -> 70 [style=dashed label="decl-specifier"]
  1922 -> 683 [style=dashed label="decl-specifier-seq"]
  1922 -> 684 [style=dashed label="declaration-statement"]
  1922 -> 76 [style=dashed label="decltype-specifier"]
  1922 -> 78 [style=dashed label="defining-type-specifier"]
  1922 -> 411 [style=dashed label="delete-expression"]
  1922 -> 412 [style=dashed label="digit"]
  1922 -> 413 [style=dashed label="digit-sequence"]
  1922 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1922 -> 80 [style=dashed label="elaborated-type-specifier"]
  1922 -> 414 [style=dashed label="encoding-prefix"]
  1922 -> 82 [style=dashed label="enum-head"]
  1922 -> 83 [style=dashed label="enum-key"]
  1922 -> 84 [style=dashed label="enum-name"]
  1922 -> 85 [style=dashed label="enum-specifier"]
  1922 -> 415 [style=dashed label="equality-expression"]
  1922 -> 416 [style=dashed label="exclusive-or-expression"]
  1922 -> 264 [style=dashed label="explicit-specifier"]
  1922 -> 685 [style=dashed label="expression"]
  1922 -> 686 [style=dashed label="expression-statement"]
  1922 -> 417 [style=dashed label="floating-point-literal"]
  1922 -> 418 [style=dashed label="fold-expression"]
  1922 -> 419 [style=dashed label="fractional-constant"]
  1922 -> 91 [style=dashed label="function-specifier"]
  1922 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1922 -> 421 [style=dashed label="hexadecimal-literal"]
  1922 -> 422 [style=dashed label="hexadecimal-prefix"]
  1922 -> 423 [style=dashed label="id-expression"]
  1922 -> 424 [style=dashed label="inclusive-or-expression"]
  1922 -> 425 [style=dashed label="integer-literal"]
  1922 -> 687 [style=dashed label="iteration-statement"]
  1922 -> 688 [style=dashed label="jump-statement"]
  1922 -> 689 [style=dashed label="labeled-statement"]
  1922 -> 426 [style=dashed label="lambda-expression"]
  1922 -> 427 [style=dashed label="lambda-introducer"]
  1922 -> 428 [style=dashed label="literal"]
  1922 -> 95 [style=dashed label="literal-operator-id"]
  1922 -> 429 [style=dashed label="logical-and-expression"]
  1922 -> 528 [style=dashed label="logical-or-expression"]
  1922 -> 431 [style=dashed label="multiplicative-expression"]
  1922 -> 99 [style=dashed label="namespace-alias"]
  1922 -> 100 [style=dashed label="namespace-alias-definition"]
  1922 -> 102 [style=dashed label="namespace-name"]
  1922 -> 432 [style=dashed label="nested-name-specifier"]
  1922 -> 433 [style=dashed label="new-expression"]
  1922 -> 434 [style=dashed label="noexcept-expression"]
  1922 -> 435 [style=dashed label="nonzero-digit"]
  1922 -> 436 [style=dashed label="octal-literal"]
  1922 -> 107 [style=dashed label="opaque-enum-declaration"]
  1922 -> 108 [style=dashed label="operator-function-id"]
  1922 -> 109 [style=dashed label="placeholder-type-specifier"]
  1922 -> 437 [style=dashed label="pm-expression"]
  1922 -> 438 [style=dashed label="pointer-literal"]
  1922 -> 439 [style=dashed label="postfix-expression"]
  1922 -> 440 [style=dashed label="primary-expression"]
  1922 -> 112 [style=dashed label="qualified-id"]
  1922 -> 441 [style=dashed label="relational-expression"]
  1922 -> 442 [style=dashed label="requires-expression"]
  1922 -> 690 [style=dashed label="selection-statement"]
  1922 -> 443 [style=dashed label="shift-expression"]
  1922 -> 113 [style=dashed label="simple-declaration"]
  1922 -> 114 [style=dashed label="simple-template-id"]
  1922 -> 444 [style=dashed label="simple-type-specifier"]
  1922 -> 1959 [style=dashed label="statement"]
  1922 -> 116 [style=dashed label="static_assert-declaration"]
  1922 -> 117 [style=dashed label="storage-class-specifier"]
  1922 -> 445 [style=dashed label="string-literal"]
  1922 -> 120 [style=dashed label="template-id"]
  1922 -> 215 [style=dashed label="template-name"]
  1922 -> 530 [style=dashed label="throw-expression"]
  1922 -> 693 [style=dashed label="try-block"]
  1922 -> 123 [style=dashed label="type-constraint"]
  1922 -> 124 [style=dashed label="type-name"]
  1922 -> 125 [style=dashed label="type-specifier"]
  1922 -> 126 [style=dashed label="typedef-name"]
  1922 -> 448 [style=dashed label="typename-specifier"]
  1922 -> 449 [style=dashed label="unary-expression"]
  1922 -> 450 [style=dashed label="unary-operator"]
  1922 -> 129 [style=dashed label="unqualified-id"]
  1922 -> 451 [style=dashed label="user-defined-character-literal"]
  1922 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1922 -> 453 [style=dashed label="user-defined-integer-literal"]
  1922 -> 454 [style=dashed label="user-defined-literal"]
  1922 -> 455 [style=dashed label="user-defined-string-literal"]
  1922 -> 130 [style=dashed label="using-declaration"]
  1922 -> 131 [style=dashed label="using-directive"]
  1922 -> 132 [style=dashed label="using-enum-declaration"]
  1922 -> 532 [style=dashed label="yield-expression"]
  1923 [label="State 1923\n\l940 selection-statement: IF OPEN_PAREN init-statement condition CLOSE_PAREN statement •\l944                    | IF OPEN_PAREN init-statement condition CLOSE_PAREN statement • ELSE statement\l"]
  1923 -> 1960 [style=solid label="ELSE"]
  1923 -> "1923R940d" [label="[ELSE]", style=solid]
 "1923R940d" [label="R940", fillcolor=5, shape=diamond, style=filled]
  1923 -> "1923R940" [style=solid]
 "1923R940" [label="R940", fillcolor=3, shape=diamond, style=filled]
  1924 [label="State 1924\n\l939 selection-statement: IF CONSTEXPR OPEN_PAREN condition CLOSE_PAREN statement •\l943                    | IF CONSTEXPR OPEN_PAREN condition CLOSE_PAREN statement • ELSE statement\l"]
  1924 -> 1961 [style=solid label="ELSE"]
  1924 -> "1924R939d" [label="[ELSE]", style=solid]
 "1924R939d" [label="R939", fillcolor=5, shape=diamond, style=filled]
  1924 -> "1924R939" [style=solid]
 "1924R939" [label="R939", fillcolor=3, shape=diamond, style=filled]
  1925 [label="State 1925\n\l941 selection-statement: IF CONSTEXPR OPEN_PAREN init-statement condition CLOSE_PAREN • statement\l945                    | IF CONSTEXPR OPEN_PAREN init-statement condition CLOSE_PAREN • statement ELSE statement\l"]
  1925 -> 356 [style=solid label="PLUS"]
  1925 -> 357 [style=solid label="MINUS"]
  1925 -> 1 [style=solid label="USING"]
  1925 -> 661 [style=solid label="IDENTIFIER"]
  1925 -> 662 [style=solid label="SEMICOLON"]
  1925 -> 4 [style=solid label="ALIGNAS"]
  1925 -> 358 [style=solid label="OPEN_PAREN"]
  1925 -> 359 [style=solid label="AND"]
  1925 -> 8 [style=solid label="ASM"]
  1925 -> 360 [style=solid label="SCOPE"]
  1925 -> 663 [style=solid label="OPEN_SQUARE"]
  1925 -> 362 [style=solid label="CO_AWAIT"]
  1925 -> 289 [style=solid label="OPEN_BRACE"]
  1925 -> 11 [style=solid label="VIRTUAL"]
  1925 -> 363 [style=solid label="ZERO_LB"]
  1925 -> 364 [style=solid label="ZERO_HB"]
  1925 -> 365 [style=solid label="SINGLE_QUOTE"]
  1925 -> 366 [style=solid label="FALSE"]
  1925 -> 367 [style=solid label="TRUE"]
  1925 -> 12 [style=solid label="CLASS"]
  1925 -> 13 [style=solid label="STRUCT"]
  1925 -> 14 [style=solid label="UNION"]
  1925 -> 368 [style=solid label="NOEXCEPT"]
  1925 -> 17 [style=solid label="OPERATOR"]
  1925 -> 665 [style=solid label="CO_RETURN"]
  1925 -> 18 [style=solid label="CONST"]
  1925 -> 19 [style=solid label="VOLATILE"]
  1925 -> 20 [style=solid label="FRIEND"]
  1925 -> 21 [style=solid label="TYPEDEF"]
  1925 -> 22 [style=solid label="CONSTEXPR"]
  1925 -> 23 [style=solid label="CONSTEVAL"]
  1925 -> 24 [style=solid label="CONSTINIT"]
  1925 -> 258 [style=solid label="INLINE"]
  1925 -> 26 [style=solid label="DECLTYPE"]
  1925 -> 369 [style=solid label="DELETE"]
  1925 -> 370 [style=solid label="DOT"]
  1925 -> 27 [style=solid label="ENUM"]
  1925 -> 184 [style=solid label="UNICODE_8"]
  1925 -> 259 [style=solid label="EXTERN"]
  1925 -> 29 [style=solid label="EXPLICIT"]
  1925 -> 371 [style=solid label="MULT"]
  1925 -> 666 [style=solid label="DEFAULT"]
  1925 -> 667 [style=solid label="TRY"]
  1925 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1925 -> 372 [style=solid label="ZERO_LX"]
  1925 -> 373 [style=solid label="ZERO_HX"]
  1925 -> 668 [style=solid label="WHILE"]
  1925 -> 669 [style=solid label="DO"]
  1925 -> 670 [style=solid label="FOR"]
  1925 -> 671 [style=solid label="BREAK"]
  1925 -> 672 [style=solid label="CONTINUE"]
  1925 -> 673 [style=solid label="RETURN"]
  1925 -> 674 [style=solid label="GOTO"]
  1925 -> 675 [style=solid label="CASE"]
  1925 -> 676 [style=solid label="NAMESPACE"]
  1925 -> 374 [style=solid label="REQUIRES"]
  1925 -> 375 [style=solid label="NEW"]
  1925 -> 376 [style=solid label="COMPL"]
  1925 -> 377 [style=solid label="NOT"]
  1925 -> 378 [style=solid label="PLUS_PLUS"]
  1925 -> 379 [style=solid label="MINUS_MINUS"]
  1925 -> 380 [style=solid label="THIS"]
  1925 -> 36 [style=solid label="AUTO"]
  1925 -> 381 [style=solid label="NULLPTR"]
  1925 -> 382 [style=solid label="DYNAMIC_CAST"]
  1925 -> 383 [style=solid label="STATIC_CAST"]
  1925 -> 384 [style=solid label="REINTERPRET_CAST"]
  1925 -> 385 [style=solid label="CONST_CAST"]
  1925 -> 386 [style=solid label="TYPEID"]
  1925 -> 677 [style=solid label="IF"]
  1925 -> 678 [style=solid label="SWITCH"]
  1925 -> 37 [style=solid label="CHAR"]
  1925 -> 38 [style=solid label="CHAR8_T"]
  1925 -> 39 [style=solid label="CHAR16_T"]
  1925 -> 40 [style=solid label="CHAR32_T"]
  1925 -> 41 [style=solid label="WCHAR_T"]
  1925 -> 42 [style=solid label="BOOL"]
  1925 -> 43 [style=solid label="SHORT"]
  1925 -> 44 [style=solid label="INT"]
  1925 -> 45 [style=solid label="LONG"]
  1925 -> 46 [style=solid label="SIGNED"]
  1925 -> 47 [style=solid label="UNSIGNED"]
  1925 -> 48 [style=solid label="FLOAT"]
  1925 -> 49 [style=solid label="DOUBLE"]
  1925 -> 50 [style=solid label="VOID"]
  1925 -> 51 [style=solid label="STATIC_ASSERT"]
  1925 -> 52 [style=solid label="STATIC"]
  1925 -> 53 [style=solid label="THREAD_LOCAL"]
  1925 -> 54 [style=solid label="MUTABLE"]
  1925 -> 523 [style=solid label="THROW"]
  1925 -> 55 [style=solid label="TYPENAME"]
  1925 -> 387 [style=solid label="SIZEOF"]
  1925 -> 388 [style=solid label="ALIGNOF"]
  1925 -> 524 [style=solid label="CO_YIELD"]
  1925 -> 389 [style=solid label="'0'"]
  1925 -> 390 [style=solid label="'1'"]
  1925 -> 391 [style=solid label="'2'"]
  1925 -> 392 [style=solid label="'3'"]
  1925 -> 393 [style=solid label="'4'"]
  1925 -> 394 [style=solid label="'5'"]
  1925 -> 395 [style=solid label="'6'"]
  1925 -> 396 [style=solid label="'7'"]
  1925 -> 397 [style=solid label="'8'"]
  1925 -> 398 [style=solid label="'9'"]
  1925 -> 205 [style=solid label="'u'"]
  1925 -> 206 [style=solid label="'U'"]
  1925 -> 207 [style=solid label="'L'"]
  1925 -> 208 [style=solid label="'R'"]
  1925 -> 399 [style=dashed label="additive-expression"]
  1925 -> 56 [style=dashed label="alias-declaration"]
  1925 -> 57 [style=dashed label="alignment-specifier"]
  1925 -> 400 [style=dashed label="and-expression"]
  1925 -> 58 [style=dashed label="asm-declaration"]
  1925 -> 525 [style=dashed label="assignment-expression"]
  1925 -> 60 [style=dashed label="attribute-specifier"]
  1925 -> 679 [style=dashed label="attribute-specifier-seq"]
  1925 -> 401 [style=dashed label="await-expression"]
  1925 -> 402 [style=dashed label="binary-literal"]
  1925 -> 680 [style=dashed label="block-declaration"]
  1925 -> 403 [style=dashed label="boolean-literal"]
  1925 -> 404 [style=dashed label="cast-expression"]
  1925 -> 405 [style=dashed label="character-literal"]
  1925 -> 63 [style=dashed label="class-head"]
  1925 -> 64 [style=dashed label="class-key"]
  1925 -> 65 [style=dashed label="class-name"]
  1925 -> 66 [style=dashed label="class-specifier"]
  1925 -> 406 [style=dashed label="compare-expression"]
  1925 -> 681 [style=dashed label="compound-statement"]
  1925 -> 67 [style=dashed label="concept-name"]
  1925 -> 526 [style=dashed label="conditional-expression"]
  1925 -> 68 [style=dashed label="conversion-function-id"]
  1925 -> 682 [style=dashed label="coroutine-return-statement"]
  1925 -> 69 [style=dashed label="cv-qualifier"]
  1925 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1925 -> 410 [style=dashed label="decimal-literal"]
  1925 -> 70 [style=dashed label="decl-specifier"]
  1925 -> 683 [style=dashed label="decl-specifier-seq"]
  1925 -> 684 [style=dashed label="declaration-statement"]
  1925 -> 76 [style=dashed label="decltype-specifier"]
  1925 -> 78 [style=dashed label="defining-type-specifier"]
  1925 -> 411 [style=dashed label="delete-expression"]
  1925 -> 412 [style=dashed label="digit"]
  1925 -> 413 [style=dashed label="digit-sequence"]
  1925 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1925 -> 80 [style=dashed label="elaborated-type-specifier"]
  1925 -> 414 [style=dashed label="encoding-prefix"]
  1925 -> 82 [style=dashed label="enum-head"]
  1925 -> 83 [style=dashed label="enum-key"]
  1925 -> 84 [style=dashed label="enum-name"]
  1925 -> 85 [style=dashed label="enum-specifier"]
  1925 -> 415 [style=dashed label="equality-expression"]
  1925 -> 416 [style=dashed label="exclusive-or-expression"]
  1925 -> 264 [style=dashed label="explicit-specifier"]
  1925 -> 685 [style=dashed label="expression"]
  1925 -> 686 [style=dashed label="expression-statement"]
  1925 -> 417 [style=dashed label="floating-point-literal"]
  1925 -> 418 [style=dashed label="fold-expression"]
  1925 -> 419 [style=dashed label="fractional-constant"]
  1925 -> 91 [style=dashed label="function-specifier"]
  1925 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1925 -> 421 [style=dashed label="hexadecimal-literal"]
  1925 -> 422 [style=dashed label="hexadecimal-prefix"]
  1925 -> 423 [style=dashed label="id-expression"]
  1925 -> 424 [style=dashed label="inclusive-or-expression"]
  1925 -> 425 [style=dashed label="integer-literal"]
  1925 -> 687 [style=dashed label="iteration-statement"]
  1925 -> 688 [style=dashed label="jump-statement"]
  1925 -> 689 [style=dashed label="labeled-statement"]
  1925 -> 426 [style=dashed label="lambda-expression"]
  1925 -> 427 [style=dashed label="lambda-introducer"]
  1925 -> 428 [style=dashed label="literal"]
  1925 -> 95 [style=dashed label="literal-operator-id"]
  1925 -> 429 [style=dashed label="logical-and-expression"]
  1925 -> 528 [style=dashed label="logical-or-expression"]
  1925 -> 431 [style=dashed label="multiplicative-expression"]
  1925 -> 99 [style=dashed label="namespace-alias"]
  1925 -> 100 [style=dashed label="namespace-alias-definition"]
  1925 -> 102 [style=dashed label="namespace-name"]
  1925 -> 432 [style=dashed label="nested-name-specifier"]
  1925 -> 433 [style=dashed label="new-expression"]
  1925 -> 434 [style=dashed label="noexcept-expression"]
  1925 -> 435 [style=dashed label="nonzero-digit"]
  1925 -> 436 [style=dashed label="octal-literal"]
  1925 -> 107 [style=dashed label="opaque-enum-declaration"]
  1925 -> 108 [style=dashed label="operator-function-id"]
  1925 -> 109 [style=dashed label="placeholder-type-specifier"]
  1925 -> 437 [style=dashed label="pm-expression"]
  1925 -> 438 [style=dashed label="pointer-literal"]
  1925 -> 439 [style=dashed label="postfix-expression"]
  1925 -> 440 [style=dashed label="primary-expression"]
  1925 -> 112 [style=dashed label="qualified-id"]
  1925 -> 441 [style=dashed label="relational-expression"]
  1925 -> 442 [style=dashed label="requires-expression"]
  1925 -> 690 [style=dashed label="selection-statement"]
  1925 -> 443 [style=dashed label="shift-expression"]
  1925 -> 113 [style=dashed label="simple-declaration"]
  1925 -> 114 [style=dashed label="simple-template-id"]
  1925 -> 444 [style=dashed label="simple-type-specifier"]
  1925 -> 1962 [style=dashed label="statement"]
  1925 -> 116 [style=dashed label="static_assert-declaration"]
  1925 -> 117 [style=dashed label="storage-class-specifier"]
  1925 -> 445 [style=dashed label="string-literal"]
  1925 -> 120 [style=dashed label="template-id"]
  1925 -> 215 [style=dashed label="template-name"]
  1925 -> 530 [style=dashed label="throw-expression"]
  1925 -> 693 [style=dashed label="try-block"]
  1925 -> 123 [style=dashed label="type-constraint"]
  1925 -> 124 [style=dashed label="type-name"]
  1925 -> 125 [style=dashed label="type-specifier"]
  1925 -> 126 [style=dashed label="typedef-name"]
  1925 -> 448 [style=dashed label="typename-specifier"]
  1925 -> 449 [style=dashed label="unary-expression"]
  1925 -> 450 [style=dashed label="unary-operator"]
  1925 -> 129 [style=dashed label="unqualified-id"]
  1925 -> 451 [style=dashed label="user-defined-character-literal"]
  1925 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1925 -> 453 [style=dashed label="user-defined-integer-literal"]
  1925 -> 454 [style=dashed label="user-defined-literal"]
  1925 -> 455 [style=dashed label="user-defined-string-literal"]
  1925 -> 130 [style=dashed label="using-declaration"]
  1925 -> 131 [style=dashed label="using-directive"]
  1925 -> 132 [style=dashed label="using-enum-declaration"]
  1925 -> 532 [style=dashed label="yield-expression"]
  1926 [label="State 1926\n\l949 selection-statement: IF NOT CONSTEVAL compound-statement ELSE statement •\l"]
  1926 -> "1926R949" [style=solid]
 "1926R949" [label="R949", fillcolor=3, shape=diamond, style=filled]
  1927 [label="State 1927\n\l951 selection-statement: SWITCH OPEN_PAREN init-statement condition CLOSE_PAREN statement •\l"]
  1927 -> "1927R951" [style=solid]
 "1927R951" [label="R951", fillcolor=3, shape=diamond, style=filled]
  1928 [label="State 1928\n\l314 exception-declaration: attribute-specifier-seq type-specifier-seq abstract-declarator •\l"]
  1928 -> "1928R314" [style=solid]
 "1928R314" [label="R314", fillcolor=3, shape=diamond, style=filled]
  1929 [label="State 1929\n\l310 exception-declaration: attribute-specifier-seq type-specifier-seq declarator •\l"]
  1929 -> "1929R310" [style=solid]
 "1929R310" [label="R310", fillcolor=3, shape=diamond, style=filled]
  1930 [label="State 1930\n\l416 handler: CATCH OPEN_PAREN exception-declaration CLOSE_PAREN compound-statement •\l"]
  1930 -> "1930R416" [style=solid]
 "1930R416" [label="R416", fillcolor=3, shape=diamond, style=filled]
  1931 [label="State 1931\n\l231 deduction-guide: explicit-specifier template-name OPEN_PAREN parameter-declaration-clause CLOSE_PAREN DEREF simple-template-id SEMICOLON •\l"]
  1931 -> "1931R231" [style=solid]
 "1931R231" [label="R231", fillcolor=3, shape=diamond, style=filled]
  1932 [label="State 1932\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l847 parameters-and-qualifiers: OPEN_PAREN parameter-declaration-clause CLOSE_PAREN cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq •\l"]
  1932 -> 4 [style=solid label="ALIGNAS"]
  1932 -> 10 [style=solid label="OPEN_SQUARE"]
  1932 -> 57 [style=dashed label="alignment-specifier"]
  1932 -> 260 [style=dashed label="attribute-specifier"]
  1932 -> "1932R847d" [label="[OPEN_SQUARE]", style=solid]
 "1932R847d" [label="R847", fillcolor=5, shape=diamond, style=filled]
  1932 -> "1932R847" [style=solid]
 "1932R847" [label="R847", fillcolor=3, shape=diamond, style=filled]
  1933 [label="State 1933\n\l347 fold-expression: OPEN_PAREN cast-expression fold-operator ELLIPSIS fold-operator cast-expression CLOSE_PAREN •\l"]
  1933 -> "1933R347" [style=solid]
 "1933R347" [label="R347", fillcolor=3, shape=diamond, style=filled]
  1934 [label="State 1934\n\l682 new-expression: SCOPE NEW new-placement OPEN_PAREN type-id CLOSE_PAREN new-initializer •\l"]
  1934 -> "1934R682" [style=solid]
 "1934R682" [label="R682", fillcolor=3, shape=diamond, style=filled]
  1935 [label="State 1935\n\l157 compound-requirement: OPEN_BRACE expression CLOSE_BRACE NOEXCEPT SEMICOLON •\l"]
  1935 -> "1935R157" [style=solid]
 "1935R157" [label="R157", fillcolor=3, shape=diamond, style=filled]
  1936 [label="State 1936\n\l159 compound-requirement: OPEN_BRACE expression CLOSE_BRACE NOEXCEPT return-type-requirement • SEMICOLON\l"]
  1936 -> 1963 [style=solid label="SEMICOLON"]
  1937 [label="State 1937\n\l659 nested-name-specifier: nested-name-specifier • IDENTIFIER SCOPE\l660                      | nested-name-specifier • simple-template-id SCOPE\l661                      | nested-name-specifier • TEMPLATE simple-template-id SCOPE\l1070 type-constraint: nested-name-specifier • concept-name\l1072                | nested-name-specifier • concept-name LESS GREATER\l1074                | nested-name-specifier • concept-name LESS template-argument-list GREATER\l"]
  1937 -> 1964 [style=solid label="IDENTIFIER"]
  1937 -> 350 [style=solid label="TEMPLATE"]
  1937 -> 323 [style=dashed label="concept-name"]
  1937 -> 534 [style=dashed label="simple-template-id"]
  1937 -> 142 [style=dashed label="template-name"]
  1938 [label="State 1938\n\l932 return-type-requirement: DEREF type-constraint •\l"]
  1938 -> "1938R932" [style=solid]
 "1938R932" [label="R932", fillcolor=3, shape=diamond, style=filled]
  1939 [label="State 1939\n\l158 compound-requirement: OPEN_BRACE expression CLOSE_BRACE return-type-requirement SEMICOLON •\l"]
  1939 -> "1939R158" [style=solid]
 "1939R158" [label="R158", fillcolor=3, shape=diamond, style=filled]
  1940 [label="State 1940\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l734 noptr-new-declarator: noptr-new-declarator OPEN_SQUARE constant-expression CLOSE_SQUARE attribute-specifier-seq •\l"]
  1940 -> 4 [style=solid label="ALIGNAS"]
  1940 -> 10 [style=solid label="OPEN_SQUARE"]
  1940 -> 57 [style=dashed label="alignment-specifier"]
  1940 -> 260 [style=dashed label="attribute-specifier"]
  1940 -> "1940R734d" [label="[OPEN_SQUARE]", style=solid]
 "1940R734d" [label="R734", fillcolor=5, shape=diamond, style=filled]
  1940 -> "1940R734" [style=solid]
 "1940R734" [label="R734", fillcolor=3, shape=diamond, style=filled]
  1941 [label="State 1941\n\l873 postfix-expression: DYNAMIC_CAST LESS type-id GREATER OPEN_PAREN expression CLOSE_PAREN •\l"]
  1941 -> "1941R873" [style=solid]
 "1941R873" [label="R873", fillcolor=3, shape=diamond, style=filled]
  1942 [label="State 1942\n\l874 postfix-expression: STATIC_CAST LESS type-id GREATER OPEN_PAREN expression CLOSE_PAREN •\l"]
  1942 -> "1942R874" [style=solid]
 "1942R874" [label="R874", fillcolor=3, shape=diamond, style=filled]
  1943 [label="State 1943\n\l875 postfix-expression: REINTERPRET_CAST LESS type-id GREATER OPEN_PAREN expression CLOSE_PAREN •\l"]
  1943 -> "1943R875" [style=solid]
 "1943R875" [label="R875", fillcolor=3, shape=diamond, style=filled]
  1944 [label="State 1944\n\l876 postfix-expression: CONST_CAST LESS type-id GREATER OPEN_PAREN expression CLOSE_PAREN •\l"]
  1944 -> "1944R876" [style=solid]
 "1944R876" [label="R876", fillcolor=3, shape=diamond, style=filled]
  1945 [label="State 1945\n\l533 lambda-expression: lambda-introducer LESS template-parameter-list GREATER requires-clause lambda-declarator compound-statement •\l"]
  1945 -> "1945R533" [style=solid]
 "1945R533" [label="R533", fillcolor=3, shape=diamond, style=filled]
  1946 [label="State 1946\n\l506 iteration-statement: DO statement WHILE OPEN_PAREN expression CLOSE_PAREN SEMICOLON •\l"]
  1946 -> "1946R506" [style=solid]
 "1946R506" [label="R506", fillcolor=3, shape=diamond, style=filled]
  1947 [label="State 1947\n\l382 for-range-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE •\l966 simple-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE • initializer SEMICOLON\l"]
  1947 -> 1273 [style=solid label="EQ"]
  1947 -> 643 [style=solid label="OPEN_PAREN"]
  1947 -> 935 [style=solid label="OPEN_BRACE"]
  1947 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1947 -> 646 [style=dashed label="braced-init-list"]
  1947 -> 1706 [style=dashed label="initializer"]
  1947 -> "1947R382" [style=solid]
 "1947R382" [label="R382", fillcolor=3, shape=diamond, style=filled]
  1948 [label="State 1948\n\l384 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list • CLOSE_SQUARE\l462 identifier-list: identifier-list • COMMA IDENTIFIER\l968 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list • CLOSE_SQUARE initializer SEMICOLON\l"]
  1948 -> 1131 [style=solid label="COMMA"]
  1948 -> 1965 [style=solid label="CLOSE_SQUARE"]
  1949 [label="State 1949\n\l385 for-range-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE •\l969 simple-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE • initializer SEMICOLON\l"]
  1949 -> 1273 [style=solid label="EQ"]
  1949 -> 643 [style=solid label="OPEN_PAREN"]
  1949 -> 935 [style=solid label="OPEN_BRACE"]
  1949 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1949 -> 646 [style=dashed label="braced-init-list"]
  1949 -> 1729 [style=dashed label="initializer"]
  1949 -> "1949R385" [style=solid]
 "1949R385" [label="R385", fillcolor=3, shape=diamond, style=filled]
  1950 [label="State 1950\n\l511 iteration-statement: FOR OPEN_PAREN for-range-declaration COLON for-range-initializer CLOSE_PAREN statement •\l"]
  1950 -> "1950R511" [style=solid]
 "1950R511" [label="R511", fillcolor=3, shape=diamond, style=filled]
  1951 [label="State 1951\n\l509 iteration-statement: FOR OPEN_PAREN init-statement SEMICOLON expression CLOSE_PAREN statement •\l"]
  1951 -> "1951R509" [style=solid]
 "1951R509" [label="R509", fillcolor=3, shape=diamond, style=filled]
  1952 [label="State 1952\n\l382 for-range-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE identifier-list • CLOSE_SQUARE\l462 identifier-list: identifier-list • COMMA IDENTIFIER\l"]
  1952 -> 1131 [style=solid label="COMMA"]
  1952 -> 1966 [style=solid label="CLOSE_SQUARE"]
  1953 [label="State 1953\n\l384 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE • identifier-list CLOSE_SQUARE\l"]
  1953 -> 640 [style=solid label="IDENTIFIER"]
  1953 -> 1967 [style=dashed label="identifier-list"]
  1954 [label="State 1954\n\l508 iteration-statement: FOR OPEN_PAREN init-statement condition SEMICOLON CLOSE_PAREN statement •\l"]
  1954 -> "1954R508" [style=solid]
 "1954R508" [label="R508", fillcolor=3, shape=diamond, style=filled]
  1955 [label="State 1955\n\l510 iteration-statement: FOR OPEN_PAREN init-statement condition SEMICOLON expression CLOSE_PAREN • statement\l"]
  1955 -> 356 [style=solid label="PLUS"]
  1955 -> 357 [style=solid label="MINUS"]
  1955 -> 1 [style=solid label="USING"]
  1955 -> 661 [style=solid label="IDENTIFIER"]
  1955 -> 662 [style=solid label="SEMICOLON"]
  1955 -> 4 [style=solid label="ALIGNAS"]
  1955 -> 358 [style=solid label="OPEN_PAREN"]
  1955 -> 359 [style=solid label="AND"]
  1955 -> 8 [style=solid label="ASM"]
  1955 -> 360 [style=solid label="SCOPE"]
  1955 -> 663 [style=solid label="OPEN_SQUARE"]
  1955 -> 362 [style=solid label="CO_AWAIT"]
  1955 -> 289 [style=solid label="OPEN_BRACE"]
  1955 -> 11 [style=solid label="VIRTUAL"]
  1955 -> 363 [style=solid label="ZERO_LB"]
  1955 -> 364 [style=solid label="ZERO_HB"]
  1955 -> 365 [style=solid label="SINGLE_QUOTE"]
  1955 -> 366 [style=solid label="FALSE"]
  1955 -> 367 [style=solid label="TRUE"]
  1955 -> 12 [style=solid label="CLASS"]
  1955 -> 13 [style=solid label="STRUCT"]
  1955 -> 14 [style=solid label="UNION"]
  1955 -> 368 [style=solid label="NOEXCEPT"]
  1955 -> 17 [style=solid label="OPERATOR"]
  1955 -> 665 [style=solid label="CO_RETURN"]
  1955 -> 18 [style=solid label="CONST"]
  1955 -> 19 [style=solid label="VOLATILE"]
  1955 -> 20 [style=solid label="FRIEND"]
  1955 -> 21 [style=solid label="TYPEDEF"]
  1955 -> 22 [style=solid label="CONSTEXPR"]
  1955 -> 23 [style=solid label="CONSTEVAL"]
  1955 -> 24 [style=solid label="CONSTINIT"]
  1955 -> 258 [style=solid label="INLINE"]
  1955 -> 26 [style=solid label="DECLTYPE"]
  1955 -> 369 [style=solid label="DELETE"]
  1955 -> 370 [style=solid label="DOT"]
  1955 -> 27 [style=solid label="ENUM"]
  1955 -> 184 [style=solid label="UNICODE_8"]
  1955 -> 259 [style=solid label="EXTERN"]
  1955 -> 29 [style=solid label="EXPLICIT"]
  1955 -> 371 [style=solid label="MULT"]
  1955 -> 666 [style=solid label="DEFAULT"]
  1955 -> 667 [style=solid label="TRY"]
  1955 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1955 -> 372 [style=solid label="ZERO_LX"]
  1955 -> 373 [style=solid label="ZERO_HX"]
  1955 -> 668 [style=solid label="WHILE"]
  1955 -> 669 [style=solid label="DO"]
  1955 -> 670 [style=solid label="FOR"]
  1955 -> 671 [style=solid label="BREAK"]
  1955 -> 672 [style=solid label="CONTINUE"]
  1955 -> 673 [style=solid label="RETURN"]
  1955 -> 674 [style=solid label="GOTO"]
  1955 -> 675 [style=solid label="CASE"]
  1955 -> 676 [style=solid label="NAMESPACE"]
  1955 -> 374 [style=solid label="REQUIRES"]
  1955 -> 375 [style=solid label="NEW"]
  1955 -> 376 [style=solid label="COMPL"]
  1955 -> 377 [style=solid label="NOT"]
  1955 -> 378 [style=solid label="PLUS_PLUS"]
  1955 -> 379 [style=solid label="MINUS_MINUS"]
  1955 -> 380 [style=solid label="THIS"]
  1955 -> 36 [style=solid label="AUTO"]
  1955 -> 381 [style=solid label="NULLPTR"]
  1955 -> 382 [style=solid label="DYNAMIC_CAST"]
  1955 -> 383 [style=solid label="STATIC_CAST"]
  1955 -> 384 [style=solid label="REINTERPRET_CAST"]
  1955 -> 385 [style=solid label="CONST_CAST"]
  1955 -> 386 [style=solid label="TYPEID"]
  1955 -> 677 [style=solid label="IF"]
  1955 -> 678 [style=solid label="SWITCH"]
  1955 -> 37 [style=solid label="CHAR"]
  1955 -> 38 [style=solid label="CHAR8_T"]
  1955 -> 39 [style=solid label="CHAR16_T"]
  1955 -> 40 [style=solid label="CHAR32_T"]
  1955 -> 41 [style=solid label="WCHAR_T"]
  1955 -> 42 [style=solid label="BOOL"]
  1955 -> 43 [style=solid label="SHORT"]
  1955 -> 44 [style=solid label="INT"]
  1955 -> 45 [style=solid label="LONG"]
  1955 -> 46 [style=solid label="SIGNED"]
  1955 -> 47 [style=solid label="UNSIGNED"]
  1955 -> 48 [style=solid label="FLOAT"]
  1955 -> 49 [style=solid label="DOUBLE"]
  1955 -> 50 [style=solid label="VOID"]
  1955 -> 51 [style=solid label="STATIC_ASSERT"]
  1955 -> 52 [style=solid label="STATIC"]
  1955 -> 53 [style=solid label="THREAD_LOCAL"]
  1955 -> 54 [style=solid label="MUTABLE"]
  1955 -> 523 [style=solid label="THROW"]
  1955 -> 55 [style=solid label="TYPENAME"]
  1955 -> 387 [style=solid label="SIZEOF"]
  1955 -> 388 [style=solid label="ALIGNOF"]
  1955 -> 524 [style=solid label="CO_YIELD"]
  1955 -> 389 [style=solid label="'0'"]
  1955 -> 390 [style=solid label="'1'"]
  1955 -> 391 [style=solid label="'2'"]
  1955 -> 392 [style=solid label="'3'"]
  1955 -> 393 [style=solid label="'4'"]
  1955 -> 394 [style=solid label="'5'"]
  1955 -> 395 [style=solid label="'6'"]
  1955 -> 396 [style=solid label="'7'"]
  1955 -> 397 [style=solid label="'8'"]
  1955 -> 398 [style=solid label="'9'"]
  1955 -> 205 [style=solid label="'u'"]
  1955 -> 206 [style=solid label="'U'"]
  1955 -> 207 [style=solid label="'L'"]
  1955 -> 208 [style=solid label="'R'"]
  1955 -> 399 [style=dashed label="additive-expression"]
  1955 -> 56 [style=dashed label="alias-declaration"]
  1955 -> 57 [style=dashed label="alignment-specifier"]
  1955 -> 400 [style=dashed label="and-expression"]
  1955 -> 58 [style=dashed label="asm-declaration"]
  1955 -> 525 [style=dashed label="assignment-expression"]
  1955 -> 60 [style=dashed label="attribute-specifier"]
  1955 -> 679 [style=dashed label="attribute-specifier-seq"]
  1955 -> 401 [style=dashed label="await-expression"]
  1955 -> 402 [style=dashed label="binary-literal"]
  1955 -> 680 [style=dashed label="block-declaration"]
  1955 -> 403 [style=dashed label="boolean-literal"]
  1955 -> 404 [style=dashed label="cast-expression"]
  1955 -> 405 [style=dashed label="character-literal"]
  1955 -> 63 [style=dashed label="class-head"]
  1955 -> 64 [style=dashed label="class-key"]
  1955 -> 65 [style=dashed label="class-name"]
  1955 -> 66 [style=dashed label="class-specifier"]
  1955 -> 406 [style=dashed label="compare-expression"]
  1955 -> 681 [style=dashed label="compound-statement"]
  1955 -> 67 [style=dashed label="concept-name"]
  1955 -> 526 [style=dashed label="conditional-expression"]
  1955 -> 68 [style=dashed label="conversion-function-id"]
  1955 -> 682 [style=dashed label="coroutine-return-statement"]
  1955 -> 69 [style=dashed label="cv-qualifier"]
  1955 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1955 -> 410 [style=dashed label="decimal-literal"]
  1955 -> 70 [style=dashed label="decl-specifier"]
  1955 -> 683 [style=dashed label="decl-specifier-seq"]
  1955 -> 684 [style=dashed label="declaration-statement"]
  1955 -> 76 [style=dashed label="decltype-specifier"]
  1955 -> 78 [style=dashed label="defining-type-specifier"]
  1955 -> 411 [style=dashed label="delete-expression"]
  1955 -> 412 [style=dashed label="digit"]
  1955 -> 413 [style=dashed label="digit-sequence"]
  1955 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1955 -> 80 [style=dashed label="elaborated-type-specifier"]
  1955 -> 414 [style=dashed label="encoding-prefix"]
  1955 -> 82 [style=dashed label="enum-head"]
  1955 -> 83 [style=dashed label="enum-key"]
  1955 -> 84 [style=dashed label="enum-name"]
  1955 -> 85 [style=dashed label="enum-specifier"]
  1955 -> 415 [style=dashed label="equality-expression"]
  1955 -> 416 [style=dashed label="exclusive-or-expression"]
  1955 -> 264 [style=dashed label="explicit-specifier"]
  1955 -> 685 [style=dashed label="expression"]
  1955 -> 686 [style=dashed label="expression-statement"]
  1955 -> 417 [style=dashed label="floating-point-literal"]
  1955 -> 418 [style=dashed label="fold-expression"]
  1955 -> 419 [style=dashed label="fractional-constant"]
  1955 -> 91 [style=dashed label="function-specifier"]
  1955 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1955 -> 421 [style=dashed label="hexadecimal-literal"]
  1955 -> 422 [style=dashed label="hexadecimal-prefix"]
  1955 -> 423 [style=dashed label="id-expression"]
  1955 -> 424 [style=dashed label="inclusive-or-expression"]
  1955 -> 425 [style=dashed label="integer-literal"]
  1955 -> 687 [style=dashed label="iteration-statement"]
  1955 -> 688 [style=dashed label="jump-statement"]
  1955 -> 689 [style=dashed label="labeled-statement"]
  1955 -> 426 [style=dashed label="lambda-expression"]
  1955 -> 427 [style=dashed label="lambda-introducer"]
  1955 -> 428 [style=dashed label="literal"]
  1955 -> 95 [style=dashed label="literal-operator-id"]
  1955 -> 429 [style=dashed label="logical-and-expression"]
  1955 -> 528 [style=dashed label="logical-or-expression"]
  1955 -> 431 [style=dashed label="multiplicative-expression"]
  1955 -> 99 [style=dashed label="namespace-alias"]
  1955 -> 100 [style=dashed label="namespace-alias-definition"]
  1955 -> 102 [style=dashed label="namespace-name"]
  1955 -> 432 [style=dashed label="nested-name-specifier"]
  1955 -> 433 [style=dashed label="new-expression"]
  1955 -> 434 [style=dashed label="noexcept-expression"]
  1955 -> 435 [style=dashed label="nonzero-digit"]
  1955 -> 436 [style=dashed label="octal-literal"]
  1955 -> 107 [style=dashed label="opaque-enum-declaration"]
  1955 -> 108 [style=dashed label="operator-function-id"]
  1955 -> 109 [style=dashed label="placeholder-type-specifier"]
  1955 -> 437 [style=dashed label="pm-expression"]
  1955 -> 438 [style=dashed label="pointer-literal"]
  1955 -> 439 [style=dashed label="postfix-expression"]
  1955 -> 440 [style=dashed label="primary-expression"]
  1955 -> 112 [style=dashed label="qualified-id"]
  1955 -> 441 [style=dashed label="relational-expression"]
  1955 -> 442 [style=dashed label="requires-expression"]
  1955 -> 690 [style=dashed label="selection-statement"]
  1955 -> 443 [style=dashed label="shift-expression"]
  1955 -> 113 [style=dashed label="simple-declaration"]
  1955 -> 114 [style=dashed label="simple-template-id"]
  1955 -> 444 [style=dashed label="simple-type-specifier"]
  1955 -> 1968 [style=dashed label="statement"]
  1955 -> 116 [style=dashed label="static_assert-declaration"]
  1955 -> 117 [style=dashed label="storage-class-specifier"]
  1955 -> 445 [style=dashed label="string-literal"]
  1955 -> 120 [style=dashed label="template-id"]
  1955 -> 215 [style=dashed label="template-name"]
  1955 -> 530 [style=dashed label="throw-expression"]
  1955 -> 693 [style=dashed label="try-block"]
  1955 -> 123 [style=dashed label="type-constraint"]
  1955 -> 124 [style=dashed label="type-name"]
  1955 -> 125 [style=dashed label="type-specifier"]
  1955 -> 126 [style=dashed label="typedef-name"]
  1955 -> 448 [style=dashed label="typename-specifier"]
  1955 -> 449 [style=dashed label="unary-expression"]
  1955 -> 450 [style=dashed label="unary-operator"]
  1955 -> 129 [style=dashed label="unqualified-id"]
  1955 -> 451 [style=dashed label="user-defined-character-literal"]
  1955 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1955 -> 453 [style=dashed label="user-defined-integer-literal"]
  1955 -> 454 [style=dashed label="user-defined-literal"]
  1955 -> 455 [style=dashed label="user-defined-string-literal"]
  1955 -> 130 [style=dashed label="using-declaration"]
  1955 -> 131 [style=dashed label="using-directive"]
  1955 -> 132 [style=dashed label="using-enum-declaration"]
  1955 -> 532 [style=dashed label="yield-expression"]
  1956 [label="State 1956\n\l383 for-range-declaration: decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE •\l"]
  1956 -> "1956R383" [style=solid]
 "1956R383" [label="R383", fillcolor=3, shape=diamond, style=filled]
  1957 [label="State 1957\n\l385 for-range-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list • CLOSE_SQUARE\l462 identifier-list: identifier-list • COMMA IDENTIFIER\l"]
  1957 -> 1131 [style=solid label="COMMA"]
  1957 -> 1969 [style=solid label="CLOSE_SQUARE"]
  1958 [label="State 1958\n\l512 iteration-statement: FOR OPEN_PAREN init-statement for-range-declaration COLON for-range-initializer CLOSE_PAREN • statement\l"]
  1958 -> 356 [style=solid label="PLUS"]
  1958 -> 357 [style=solid label="MINUS"]
  1958 -> 1 [style=solid label="USING"]
  1958 -> 661 [style=solid label="IDENTIFIER"]
  1958 -> 662 [style=solid label="SEMICOLON"]
  1958 -> 4 [style=solid label="ALIGNAS"]
  1958 -> 358 [style=solid label="OPEN_PAREN"]
  1958 -> 359 [style=solid label="AND"]
  1958 -> 8 [style=solid label="ASM"]
  1958 -> 360 [style=solid label="SCOPE"]
  1958 -> 663 [style=solid label="OPEN_SQUARE"]
  1958 -> 362 [style=solid label="CO_AWAIT"]
  1958 -> 289 [style=solid label="OPEN_BRACE"]
  1958 -> 11 [style=solid label="VIRTUAL"]
  1958 -> 363 [style=solid label="ZERO_LB"]
  1958 -> 364 [style=solid label="ZERO_HB"]
  1958 -> 365 [style=solid label="SINGLE_QUOTE"]
  1958 -> 366 [style=solid label="FALSE"]
  1958 -> 367 [style=solid label="TRUE"]
  1958 -> 12 [style=solid label="CLASS"]
  1958 -> 13 [style=solid label="STRUCT"]
  1958 -> 14 [style=solid label="UNION"]
  1958 -> 368 [style=solid label="NOEXCEPT"]
  1958 -> 17 [style=solid label="OPERATOR"]
  1958 -> 665 [style=solid label="CO_RETURN"]
  1958 -> 18 [style=solid label="CONST"]
  1958 -> 19 [style=solid label="VOLATILE"]
  1958 -> 20 [style=solid label="FRIEND"]
  1958 -> 21 [style=solid label="TYPEDEF"]
  1958 -> 22 [style=solid label="CONSTEXPR"]
  1958 -> 23 [style=solid label="CONSTEVAL"]
  1958 -> 24 [style=solid label="CONSTINIT"]
  1958 -> 258 [style=solid label="INLINE"]
  1958 -> 26 [style=solid label="DECLTYPE"]
  1958 -> 369 [style=solid label="DELETE"]
  1958 -> 370 [style=solid label="DOT"]
  1958 -> 27 [style=solid label="ENUM"]
  1958 -> 184 [style=solid label="UNICODE_8"]
  1958 -> 259 [style=solid label="EXTERN"]
  1958 -> 29 [style=solid label="EXPLICIT"]
  1958 -> 371 [style=solid label="MULT"]
  1958 -> 666 [style=solid label="DEFAULT"]
  1958 -> 667 [style=solid label="TRY"]
  1958 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1958 -> 372 [style=solid label="ZERO_LX"]
  1958 -> 373 [style=solid label="ZERO_HX"]
  1958 -> 668 [style=solid label="WHILE"]
  1958 -> 669 [style=solid label="DO"]
  1958 -> 670 [style=solid label="FOR"]
  1958 -> 671 [style=solid label="BREAK"]
  1958 -> 672 [style=solid label="CONTINUE"]
  1958 -> 673 [style=solid label="RETURN"]
  1958 -> 674 [style=solid label="GOTO"]
  1958 -> 675 [style=solid label="CASE"]
  1958 -> 676 [style=solid label="NAMESPACE"]
  1958 -> 374 [style=solid label="REQUIRES"]
  1958 -> 375 [style=solid label="NEW"]
  1958 -> 376 [style=solid label="COMPL"]
  1958 -> 377 [style=solid label="NOT"]
  1958 -> 378 [style=solid label="PLUS_PLUS"]
  1958 -> 379 [style=solid label="MINUS_MINUS"]
  1958 -> 380 [style=solid label="THIS"]
  1958 -> 36 [style=solid label="AUTO"]
  1958 -> 381 [style=solid label="NULLPTR"]
  1958 -> 382 [style=solid label="DYNAMIC_CAST"]
  1958 -> 383 [style=solid label="STATIC_CAST"]
  1958 -> 384 [style=solid label="REINTERPRET_CAST"]
  1958 -> 385 [style=solid label="CONST_CAST"]
  1958 -> 386 [style=solid label="TYPEID"]
  1958 -> 677 [style=solid label="IF"]
  1958 -> 678 [style=solid label="SWITCH"]
  1958 -> 37 [style=solid label="CHAR"]
  1958 -> 38 [style=solid label="CHAR8_T"]
  1958 -> 39 [style=solid label="CHAR16_T"]
  1958 -> 40 [style=solid label="CHAR32_T"]
  1958 -> 41 [style=solid label="WCHAR_T"]
  1958 -> 42 [style=solid label="BOOL"]
  1958 -> 43 [style=solid label="SHORT"]
  1958 -> 44 [style=solid label="INT"]
  1958 -> 45 [style=solid label="LONG"]
  1958 -> 46 [style=solid label="SIGNED"]
  1958 -> 47 [style=solid label="UNSIGNED"]
  1958 -> 48 [style=solid label="FLOAT"]
  1958 -> 49 [style=solid label="DOUBLE"]
  1958 -> 50 [style=solid label="VOID"]
  1958 -> 51 [style=solid label="STATIC_ASSERT"]
  1958 -> 52 [style=solid label="STATIC"]
  1958 -> 53 [style=solid label="THREAD_LOCAL"]
  1958 -> 54 [style=solid label="MUTABLE"]
  1958 -> 523 [style=solid label="THROW"]
  1958 -> 55 [style=solid label="TYPENAME"]
  1958 -> 387 [style=solid label="SIZEOF"]
  1958 -> 388 [style=solid label="ALIGNOF"]
  1958 -> 524 [style=solid label="CO_YIELD"]
  1958 -> 389 [style=solid label="'0'"]
  1958 -> 390 [style=solid label="'1'"]
  1958 -> 391 [style=solid label="'2'"]
  1958 -> 392 [style=solid label="'3'"]
  1958 -> 393 [style=solid label="'4'"]
  1958 -> 394 [style=solid label="'5'"]
  1958 -> 395 [style=solid label="'6'"]
  1958 -> 396 [style=solid label="'7'"]
  1958 -> 397 [style=solid label="'8'"]
  1958 -> 398 [style=solid label="'9'"]
  1958 -> 205 [style=solid label="'u'"]
  1958 -> 206 [style=solid label="'U'"]
  1958 -> 207 [style=solid label="'L'"]
  1958 -> 208 [style=solid label="'R'"]
  1958 -> 399 [style=dashed label="additive-expression"]
  1958 -> 56 [style=dashed label="alias-declaration"]
  1958 -> 57 [style=dashed label="alignment-specifier"]
  1958 -> 400 [style=dashed label="and-expression"]
  1958 -> 58 [style=dashed label="asm-declaration"]
  1958 -> 525 [style=dashed label="assignment-expression"]
  1958 -> 60 [style=dashed label="attribute-specifier"]
  1958 -> 679 [style=dashed label="attribute-specifier-seq"]
  1958 -> 401 [style=dashed label="await-expression"]
  1958 -> 402 [style=dashed label="binary-literal"]
  1958 -> 680 [style=dashed label="block-declaration"]
  1958 -> 403 [style=dashed label="boolean-literal"]
  1958 -> 404 [style=dashed label="cast-expression"]
  1958 -> 405 [style=dashed label="character-literal"]
  1958 -> 63 [style=dashed label="class-head"]
  1958 -> 64 [style=dashed label="class-key"]
  1958 -> 65 [style=dashed label="class-name"]
  1958 -> 66 [style=dashed label="class-specifier"]
  1958 -> 406 [style=dashed label="compare-expression"]
  1958 -> 681 [style=dashed label="compound-statement"]
  1958 -> 67 [style=dashed label="concept-name"]
  1958 -> 526 [style=dashed label="conditional-expression"]
  1958 -> 68 [style=dashed label="conversion-function-id"]
  1958 -> 682 [style=dashed label="coroutine-return-statement"]
  1958 -> 69 [style=dashed label="cv-qualifier"]
  1958 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1958 -> 410 [style=dashed label="decimal-literal"]
  1958 -> 70 [style=dashed label="decl-specifier"]
  1958 -> 683 [style=dashed label="decl-specifier-seq"]
  1958 -> 684 [style=dashed label="declaration-statement"]
  1958 -> 76 [style=dashed label="decltype-specifier"]
  1958 -> 78 [style=dashed label="defining-type-specifier"]
  1958 -> 411 [style=dashed label="delete-expression"]
  1958 -> 412 [style=dashed label="digit"]
  1958 -> 413 [style=dashed label="digit-sequence"]
  1958 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1958 -> 80 [style=dashed label="elaborated-type-specifier"]
  1958 -> 414 [style=dashed label="encoding-prefix"]
  1958 -> 82 [style=dashed label="enum-head"]
  1958 -> 83 [style=dashed label="enum-key"]
  1958 -> 84 [style=dashed label="enum-name"]
  1958 -> 85 [style=dashed label="enum-specifier"]
  1958 -> 415 [style=dashed label="equality-expression"]
  1958 -> 416 [style=dashed label="exclusive-or-expression"]
  1958 -> 264 [style=dashed label="explicit-specifier"]
  1958 -> 685 [style=dashed label="expression"]
  1958 -> 686 [style=dashed label="expression-statement"]
  1958 -> 417 [style=dashed label="floating-point-literal"]
  1958 -> 418 [style=dashed label="fold-expression"]
  1958 -> 419 [style=dashed label="fractional-constant"]
  1958 -> 91 [style=dashed label="function-specifier"]
  1958 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1958 -> 421 [style=dashed label="hexadecimal-literal"]
  1958 -> 422 [style=dashed label="hexadecimal-prefix"]
  1958 -> 423 [style=dashed label="id-expression"]
  1958 -> 424 [style=dashed label="inclusive-or-expression"]
  1958 -> 425 [style=dashed label="integer-literal"]
  1958 -> 687 [style=dashed label="iteration-statement"]
  1958 -> 688 [style=dashed label="jump-statement"]
  1958 -> 689 [style=dashed label="labeled-statement"]
  1958 -> 426 [style=dashed label="lambda-expression"]
  1958 -> 427 [style=dashed label="lambda-introducer"]
  1958 -> 428 [style=dashed label="literal"]
  1958 -> 95 [style=dashed label="literal-operator-id"]
  1958 -> 429 [style=dashed label="logical-and-expression"]
  1958 -> 528 [style=dashed label="logical-or-expression"]
  1958 -> 431 [style=dashed label="multiplicative-expression"]
  1958 -> 99 [style=dashed label="namespace-alias"]
  1958 -> 100 [style=dashed label="namespace-alias-definition"]
  1958 -> 102 [style=dashed label="namespace-name"]
  1958 -> 432 [style=dashed label="nested-name-specifier"]
  1958 -> 433 [style=dashed label="new-expression"]
  1958 -> 434 [style=dashed label="noexcept-expression"]
  1958 -> 435 [style=dashed label="nonzero-digit"]
  1958 -> 436 [style=dashed label="octal-literal"]
  1958 -> 107 [style=dashed label="opaque-enum-declaration"]
  1958 -> 108 [style=dashed label="operator-function-id"]
  1958 -> 109 [style=dashed label="placeholder-type-specifier"]
  1958 -> 437 [style=dashed label="pm-expression"]
  1958 -> 438 [style=dashed label="pointer-literal"]
  1958 -> 439 [style=dashed label="postfix-expression"]
  1958 -> 440 [style=dashed label="primary-expression"]
  1958 -> 112 [style=dashed label="qualified-id"]
  1958 -> 441 [style=dashed label="relational-expression"]
  1958 -> 442 [style=dashed label="requires-expression"]
  1958 -> 690 [style=dashed label="selection-statement"]
  1958 -> 443 [style=dashed label="shift-expression"]
  1958 -> 113 [style=dashed label="simple-declaration"]
  1958 -> 114 [style=dashed label="simple-template-id"]
  1958 -> 444 [style=dashed label="simple-type-specifier"]
  1958 -> 1970 [style=dashed label="statement"]
  1958 -> 116 [style=dashed label="static_assert-declaration"]
  1958 -> 117 [style=dashed label="storage-class-specifier"]
  1958 -> 445 [style=dashed label="string-literal"]
  1958 -> 120 [style=dashed label="template-id"]
  1958 -> 215 [style=dashed label="template-name"]
  1958 -> 530 [style=dashed label="throw-expression"]
  1958 -> 693 [style=dashed label="try-block"]
  1958 -> 123 [style=dashed label="type-constraint"]
  1958 -> 124 [style=dashed label="type-name"]
  1958 -> 125 [style=dashed label="type-specifier"]
  1958 -> 126 [style=dashed label="typedef-name"]
  1958 -> 448 [style=dashed label="typename-specifier"]
  1958 -> 449 [style=dashed label="unary-expression"]
  1958 -> 450 [style=dashed label="unary-operator"]
  1958 -> 129 [style=dashed label="unqualified-id"]
  1958 -> 451 [style=dashed label="user-defined-character-literal"]
  1958 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1958 -> 453 [style=dashed label="user-defined-integer-literal"]
  1958 -> 454 [style=dashed label="user-defined-literal"]
  1958 -> 455 [style=dashed label="user-defined-string-literal"]
  1958 -> 130 [style=dashed label="using-declaration"]
  1958 -> 131 [style=dashed label="using-directive"]
  1958 -> 132 [style=dashed label="using-enum-declaration"]
  1958 -> 532 [style=dashed label="yield-expression"]
  1959 [label="State 1959\n\l942 selection-statement: IF OPEN_PAREN condition CLOSE_PAREN statement ELSE statement •\l"]
  1959 -> "1959R942" [style=solid]
 "1959R942" [label="R942", fillcolor=3, shape=diamond, style=filled]
  1960 [label="State 1960\n\l944 selection-statement: IF OPEN_PAREN init-statement condition CLOSE_PAREN statement ELSE • statement\l"]
  1960 -> 356 [style=solid label="PLUS"]
  1960 -> 357 [style=solid label="MINUS"]
  1960 -> 1 [style=solid label="USING"]
  1960 -> 661 [style=solid label="IDENTIFIER"]
  1960 -> 662 [style=solid label="SEMICOLON"]
  1960 -> 4 [style=solid label="ALIGNAS"]
  1960 -> 358 [style=solid label="OPEN_PAREN"]
  1960 -> 359 [style=solid label="AND"]
  1960 -> 8 [style=solid label="ASM"]
  1960 -> 360 [style=solid label="SCOPE"]
  1960 -> 663 [style=solid label="OPEN_SQUARE"]
  1960 -> 362 [style=solid label="CO_AWAIT"]
  1960 -> 289 [style=solid label="OPEN_BRACE"]
  1960 -> 11 [style=solid label="VIRTUAL"]
  1960 -> 363 [style=solid label="ZERO_LB"]
  1960 -> 364 [style=solid label="ZERO_HB"]
  1960 -> 365 [style=solid label="SINGLE_QUOTE"]
  1960 -> 366 [style=solid label="FALSE"]
  1960 -> 367 [style=solid label="TRUE"]
  1960 -> 12 [style=solid label="CLASS"]
  1960 -> 13 [style=solid label="STRUCT"]
  1960 -> 14 [style=solid label="UNION"]
  1960 -> 368 [style=solid label="NOEXCEPT"]
  1960 -> 17 [style=solid label="OPERATOR"]
  1960 -> 665 [style=solid label="CO_RETURN"]
  1960 -> 18 [style=solid label="CONST"]
  1960 -> 19 [style=solid label="VOLATILE"]
  1960 -> 20 [style=solid label="FRIEND"]
  1960 -> 21 [style=solid label="TYPEDEF"]
  1960 -> 22 [style=solid label="CONSTEXPR"]
  1960 -> 23 [style=solid label="CONSTEVAL"]
  1960 -> 24 [style=solid label="CONSTINIT"]
  1960 -> 258 [style=solid label="INLINE"]
  1960 -> 26 [style=solid label="DECLTYPE"]
  1960 -> 369 [style=solid label="DELETE"]
  1960 -> 370 [style=solid label="DOT"]
  1960 -> 27 [style=solid label="ENUM"]
  1960 -> 184 [style=solid label="UNICODE_8"]
  1960 -> 259 [style=solid label="EXTERN"]
  1960 -> 29 [style=solid label="EXPLICIT"]
  1960 -> 371 [style=solid label="MULT"]
  1960 -> 666 [style=solid label="DEFAULT"]
  1960 -> 667 [style=solid label="TRY"]
  1960 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1960 -> 372 [style=solid label="ZERO_LX"]
  1960 -> 373 [style=solid label="ZERO_HX"]
  1960 -> 668 [style=solid label="WHILE"]
  1960 -> 669 [style=solid label="DO"]
  1960 -> 670 [style=solid label="FOR"]
  1960 -> 671 [style=solid label="BREAK"]
  1960 -> 672 [style=solid label="CONTINUE"]
  1960 -> 673 [style=solid label="RETURN"]
  1960 -> 674 [style=solid label="GOTO"]
  1960 -> 675 [style=solid label="CASE"]
  1960 -> 676 [style=solid label="NAMESPACE"]
  1960 -> 374 [style=solid label="REQUIRES"]
  1960 -> 375 [style=solid label="NEW"]
  1960 -> 376 [style=solid label="COMPL"]
  1960 -> 377 [style=solid label="NOT"]
  1960 -> 378 [style=solid label="PLUS_PLUS"]
  1960 -> 379 [style=solid label="MINUS_MINUS"]
  1960 -> 380 [style=solid label="THIS"]
  1960 -> 36 [style=solid label="AUTO"]
  1960 -> 381 [style=solid label="NULLPTR"]
  1960 -> 382 [style=solid label="DYNAMIC_CAST"]
  1960 -> 383 [style=solid label="STATIC_CAST"]
  1960 -> 384 [style=solid label="REINTERPRET_CAST"]
  1960 -> 385 [style=solid label="CONST_CAST"]
  1960 -> 386 [style=solid label="TYPEID"]
  1960 -> 677 [style=solid label="IF"]
  1960 -> 678 [style=solid label="SWITCH"]
  1960 -> 37 [style=solid label="CHAR"]
  1960 -> 38 [style=solid label="CHAR8_T"]
  1960 -> 39 [style=solid label="CHAR16_T"]
  1960 -> 40 [style=solid label="CHAR32_T"]
  1960 -> 41 [style=solid label="WCHAR_T"]
  1960 -> 42 [style=solid label="BOOL"]
  1960 -> 43 [style=solid label="SHORT"]
  1960 -> 44 [style=solid label="INT"]
  1960 -> 45 [style=solid label="LONG"]
  1960 -> 46 [style=solid label="SIGNED"]
  1960 -> 47 [style=solid label="UNSIGNED"]
  1960 -> 48 [style=solid label="FLOAT"]
  1960 -> 49 [style=solid label="DOUBLE"]
  1960 -> 50 [style=solid label="VOID"]
  1960 -> 51 [style=solid label="STATIC_ASSERT"]
  1960 -> 52 [style=solid label="STATIC"]
  1960 -> 53 [style=solid label="THREAD_LOCAL"]
  1960 -> 54 [style=solid label="MUTABLE"]
  1960 -> 523 [style=solid label="THROW"]
  1960 -> 55 [style=solid label="TYPENAME"]
  1960 -> 387 [style=solid label="SIZEOF"]
  1960 -> 388 [style=solid label="ALIGNOF"]
  1960 -> 524 [style=solid label="CO_YIELD"]
  1960 -> 389 [style=solid label="'0'"]
  1960 -> 390 [style=solid label="'1'"]
  1960 -> 391 [style=solid label="'2'"]
  1960 -> 392 [style=solid label="'3'"]
  1960 -> 393 [style=solid label="'4'"]
  1960 -> 394 [style=solid label="'5'"]
  1960 -> 395 [style=solid label="'6'"]
  1960 -> 396 [style=solid label="'7'"]
  1960 -> 397 [style=solid label="'8'"]
  1960 -> 398 [style=solid label="'9'"]
  1960 -> 205 [style=solid label="'u'"]
  1960 -> 206 [style=solid label="'U'"]
  1960 -> 207 [style=solid label="'L'"]
  1960 -> 208 [style=solid label="'R'"]
  1960 -> 399 [style=dashed label="additive-expression"]
  1960 -> 56 [style=dashed label="alias-declaration"]
  1960 -> 57 [style=dashed label="alignment-specifier"]
  1960 -> 400 [style=dashed label="and-expression"]
  1960 -> 58 [style=dashed label="asm-declaration"]
  1960 -> 525 [style=dashed label="assignment-expression"]
  1960 -> 60 [style=dashed label="attribute-specifier"]
  1960 -> 679 [style=dashed label="attribute-specifier-seq"]
  1960 -> 401 [style=dashed label="await-expression"]
  1960 -> 402 [style=dashed label="binary-literal"]
  1960 -> 680 [style=dashed label="block-declaration"]
  1960 -> 403 [style=dashed label="boolean-literal"]
  1960 -> 404 [style=dashed label="cast-expression"]
  1960 -> 405 [style=dashed label="character-literal"]
  1960 -> 63 [style=dashed label="class-head"]
  1960 -> 64 [style=dashed label="class-key"]
  1960 -> 65 [style=dashed label="class-name"]
  1960 -> 66 [style=dashed label="class-specifier"]
  1960 -> 406 [style=dashed label="compare-expression"]
  1960 -> 681 [style=dashed label="compound-statement"]
  1960 -> 67 [style=dashed label="concept-name"]
  1960 -> 526 [style=dashed label="conditional-expression"]
  1960 -> 68 [style=dashed label="conversion-function-id"]
  1960 -> 682 [style=dashed label="coroutine-return-statement"]
  1960 -> 69 [style=dashed label="cv-qualifier"]
  1960 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1960 -> 410 [style=dashed label="decimal-literal"]
  1960 -> 70 [style=dashed label="decl-specifier"]
  1960 -> 683 [style=dashed label="decl-specifier-seq"]
  1960 -> 684 [style=dashed label="declaration-statement"]
  1960 -> 76 [style=dashed label="decltype-specifier"]
  1960 -> 78 [style=dashed label="defining-type-specifier"]
  1960 -> 411 [style=dashed label="delete-expression"]
  1960 -> 412 [style=dashed label="digit"]
  1960 -> 413 [style=dashed label="digit-sequence"]
  1960 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1960 -> 80 [style=dashed label="elaborated-type-specifier"]
  1960 -> 414 [style=dashed label="encoding-prefix"]
  1960 -> 82 [style=dashed label="enum-head"]
  1960 -> 83 [style=dashed label="enum-key"]
  1960 -> 84 [style=dashed label="enum-name"]
  1960 -> 85 [style=dashed label="enum-specifier"]
  1960 -> 415 [style=dashed label="equality-expression"]
  1960 -> 416 [style=dashed label="exclusive-or-expression"]
  1960 -> 264 [style=dashed label="explicit-specifier"]
  1960 -> 685 [style=dashed label="expression"]
  1960 -> 686 [style=dashed label="expression-statement"]
  1960 -> 417 [style=dashed label="floating-point-literal"]
  1960 -> 418 [style=dashed label="fold-expression"]
  1960 -> 419 [style=dashed label="fractional-constant"]
  1960 -> 91 [style=dashed label="function-specifier"]
  1960 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1960 -> 421 [style=dashed label="hexadecimal-literal"]
  1960 -> 422 [style=dashed label="hexadecimal-prefix"]
  1960 -> 423 [style=dashed label="id-expression"]
  1960 -> 424 [style=dashed label="inclusive-or-expression"]
  1960 -> 425 [style=dashed label="integer-literal"]
  1960 -> 687 [style=dashed label="iteration-statement"]
  1960 -> 688 [style=dashed label="jump-statement"]
  1960 -> 689 [style=dashed label="labeled-statement"]
  1960 -> 426 [style=dashed label="lambda-expression"]
  1960 -> 427 [style=dashed label="lambda-introducer"]
  1960 -> 428 [style=dashed label="literal"]
  1960 -> 95 [style=dashed label="literal-operator-id"]
  1960 -> 429 [style=dashed label="logical-and-expression"]
  1960 -> 528 [style=dashed label="logical-or-expression"]
  1960 -> 431 [style=dashed label="multiplicative-expression"]
  1960 -> 99 [style=dashed label="namespace-alias"]
  1960 -> 100 [style=dashed label="namespace-alias-definition"]
  1960 -> 102 [style=dashed label="namespace-name"]
  1960 -> 432 [style=dashed label="nested-name-specifier"]
  1960 -> 433 [style=dashed label="new-expression"]
  1960 -> 434 [style=dashed label="noexcept-expression"]
  1960 -> 435 [style=dashed label="nonzero-digit"]
  1960 -> 436 [style=dashed label="octal-literal"]
  1960 -> 107 [style=dashed label="opaque-enum-declaration"]
  1960 -> 108 [style=dashed label="operator-function-id"]
  1960 -> 109 [style=dashed label="placeholder-type-specifier"]
  1960 -> 437 [style=dashed label="pm-expression"]
  1960 -> 438 [style=dashed label="pointer-literal"]
  1960 -> 439 [style=dashed label="postfix-expression"]
  1960 -> 440 [style=dashed label="primary-expression"]
  1960 -> 112 [style=dashed label="qualified-id"]
  1960 -> 441 [style=dashed label="relational-expression"]
  1960 -> 442 [style=dashed label="requires-expression"]
  1960 -> 690 [style=dashed label="selection-statement"]
  1960 -> 443 [style=dashed label="shift-expression"]
  1960 -> 113 [style=dashed label="simple-declaration"]
  1960 -> 114 [style=dashed label="simple-template-id"]
  1960 -> 444 [style=dashed label="simple-type-specifier"]
  1960 -> 1971 [style=dashed label="statement"]
  1960 -> 116 [style=dashed label="static_assert-declaration"]
  1960 -> 117 [style=dashed label="storage-class-specifier"]
  1960 -> 445 [style=dashed label="string-literal"]
  1960 -> 120 [style=dashed label="template-id"]
  1960 -> 215 [style=dashed label="template-name"]
  1960 -> 530 [style=dashed label="throw-expression"]
  1960 -> 693 [style=dashed label="try-block"]
  1960 -> 123 [style=dashed label="type-constraint"]
  1960 -> 124 [style=dashed label="type-name"]
  1960 -> 125 [style=dashed label="type-specifier"]
  1960 -> 126 [style=dashed label="typedef-name"]
  1960 -> 448 [style=dashed label="typename-specifier"]
  1960 -> 449 [style=dashed label="unary-expression"]
  1960 -> 450 [style=dashed label="unary-operator"]
  1960 -> 129 [style=dashed label="unqualified-id"]
  1960 -> 451 [style=dashed label="user-defined-character-literal"]
  1960 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1960 -> 453 [style=dashed label="user-defined-integer-literal"]
  1960 -> 454 [style=dashed label="user-defined-literal"]
  1960 -> 455 [style=dashed label="user-defined-string-literal"]
  1960 -> 130 [style=dashed label="using-declaration"]
  1960 -> 131 [style=dashed label="using-directive"]
  1960 -> 132 [style=dashed label="using-enum-declaration"]
  1960 -> 532 [style=dashed label="yield-expression"]
  1961 [label="State 1961\n\l943 selection-statement: IF CONSTEXPR OPEN_PAREN condition CLOSE_PAREN statement ELSE • statement\l"]
  1961 -> 356 [style=solid label="PLUS"]
  1961 -> 357 [style=solid label="MINUS"]
  1961 -> 1 [style=solid label="USING"]
  1961 -> 661 [style=solid label="IDENTIFIER"]
  1961 -> 662 [style=solid label="SEMICOLON"]
  1961 -> 4 [style=solid label="ALIGNAS"]
  1961 -> 358 [style=solid label="OPEN_PAREN"]
  1961 -> 359 [style=solid label="AND"]
  1961 -> 8 [style=solid label="ASM"]
  1961 -> 360 [style=solid label="SCOPE"]
  1961 -> 663 [style=solid label="OPEN_SQUARE"]
  1961 -> 362 [style=solid label="CO_AWAIT"]
  1961 -> 289 [style=solid label="OPEN_BRACE"]
  1961 -> 11 [style=solid label="VIRTUAL"]
  1961 -> 363 [style=solid label="ZERO_LB"]
  1961 -> 364 [style=solid label="ZERO_HB"]
  1961 -> 365 [style=solid label="SINGLE_QUOTE"]
  1961 -> 366 [style=solid label="FALSE"]
  1961 -> 367 [style=solid label="TRUE"]
  1961 -> 12 [style=solid label="CLASS"]
  1961 -> 13 [style=solid label="STRUCT"]
  1961 -> 14 [style=solid label="UNION"]
  1961 -> 368 [style=solid label="NOEXCEPT"]
  1961 -> 17 [style=solid label="OPERATOR"]
  1961 -> 665 [style=solid label="CO_RETURN"]
  1961 -> 18 [style=solid label="CONST"]
  1961 -> 19 [style=solid label="VOLATILE"]
  1961 -> 20 [style=solid label="FRIEND"]
  1961 -> 21 [style=solid label="TYPEDEF"]
  1961 -> 22 [style=solid label="CONSTEXPR"]
  1961 -> 23 [style=solid label="CONSTEVAL"]
  1961 -> 24 [style=solid label="CONSTINIT"]
  1961 -> 258 [style=solid label="INLINE"]
  1961 -> 26 [style=solid label="DECLTYPE"]
  1961 -> 369 [style=solid label="DELETE"]
  1961 -> 370 [style=solid label="DOT"]
  1961 -> 27 [style=solid label="ENUM"]
  1961 -> 184 [style=solid label="UNICODE_8"]
  1961 -> 259 [style=solid label="EXTERN"]
  1961 -> 29 [style=solid label="EXPLICIT"]
  1961 -> 371 [style=solid label="MULT"]
  1961 -> 666 [style=solid label="DEFAULT"]
  1961 -> 667 [style=solid label="TRY"]
  1961 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1961 -> 372 [style=solid label="ZERO_LX"]
  1961 -> 373 [style=solid label="ZERO_HX"]
  1961 -> 668 [style=solid label="WHILE"]
  1961 -> 669 [style=solid label="DO"]
  1961 -> 670 [style=solid label="FOR"]
  1961 -> 671 [style=solid label="BREAK"]
  1961 -> 672 [style=solid label="CONTINUE"]
  1961 -> 673 [style=solid label="RETURN"]
  1961 -> 674 [style=solid label="GOTO"]
  1961 -> 675 [style=solid label="CASE"]
  1961 -> 676 [style=solid label="NAMESPACE"]
  1961 -> 374 [style=solid label="REQUIRES"]
  1961 -> 375 [style=solid label="NEW"]
  1961 -> 376 [style=solid label="COMPL"]
  1961 -> 377 [style=solid label="NOT"]
  1961 -> 378 [style=solid label="PLUS_PLUS"]
  1961 -> 379 [style=solid label="MINUS_MINUS"]
  1961 -> 380 [style=solid label="THIS"]
  1961 -> 36 [style=solid label="AUTO"]
  1961 -> 381 [style=solid label="NULLPTR"]
  1961 -> 382 [style=solid label="DYNAMIC_CAST"]
  1961 -> 383 [style=solid label="STATIC_CAST"]
  1961 -> 384 [style=solid label="REINTERPRET_CAST"]
  1961 -> 385 [style=solid label="CONST_CAST"]
  1961 -> 386 [style=solid label="TYPEID"]
  1961 -> 677 [style=solid label="IF"]
  1961 -> 678 [style=solid label="SWITCH"]
  1961 -> 37 [style=solid label="CHAR"]
  1961 -> 38 [style=solid label="CHAR8_T"]
  1961 -> 39 [style=solid label="CHAR16_T"]
  1961 -> 40 [style=solid label="CHAR32_T"]
  1961 -> 41 [style=solid label="WCHAR_T"]
  1961 -> 42 [style=solid label="BOOL"]
  1961 -> 43 [style=solid label="SHORT"]
  1961 -> 44 [style=solid label="INT"]
  1961 -> 45 [style=solid label="LONG"]
  1961 -> 46 [style=solid label="SIGNED"]
  1961 -> 47 [style=solid label="UNSIGNED"]
  1961 -> 48 [style=solid label="FLOAT"]
  1961 -> 49 [style=solid label="DOUBLE"]
  1961 -> 50 [style=solid label="VOID"]
  1961 -> 51 [style=solid label="STATIC_ASSERT"]
  1961 -> 52 [style=solid label="STATIC"]
  1961 -> 53 [style=solid label="THREAD_LOCAL"]
  1961 -> 54 [style=solid label="MUTABLE"]
  1961 -> 523 [style=solid label="THROW"]
  1961 -> 55 [style=solid label="TYPENAME"]
  1961 -> 387 [style=solid label="SIZEOF"]
  1961 -> 388 [style=solid label="ALIGNOF"]
  1961 -> 524 [style=solid label="CO_YIELD"]
  1961 -> 389 [style=solid label="'0'"]
  1961 -> 390 [style=solid label="'1'"]
  1961 -> 391 [style=solid label="'2'"]
  1961 -> 392 [style=solid label="'3'"]
  1961 -> 393 [style=solid label="'4'"]
  1961 -> 394 [style=solid label="'5'"]
  1961 -> 395 [style=solid label="'6'"]
  1961 -> 396 [style=solid label="'7'"]
  1961 -> 397 [style=solid label="'8'"]
  1961 -> 398 [style=solid label="'9'"]
  1961 -> 205 [style=solid label="'u'"]
  1961 -> 206 [style=solid label="'U'"]
  1961 -> 207 [style=solid label="'L'"]
  1961 -> 208 [style=solid label="'R'"]
  1961 -> 399 [style=dashed label="additive-expression"]
  1961 -> 56 [style=dashed label="alias-declaration"]
  1961 -> 57 [style=dashed label="alignment-specifier"]
  1961 -> 400 [style=dashed label="and-expression"]
  1961 -> 58 [style=dashed label="asm-declaration"]
  1961 -> 525 [style=dashed label="assignment-expression"]
  1961 -> 60 [style=dashed label="attribute-specifier"]
  1961 -> 679 [style=dashed label="attribute-specifier-seq"]
  1961 -> 401 [style=dashed label="await-expression"]
  1961 -> 402 [style=dashed label="binary-literal"]
  1961 -> 680 [style=dashed label="block-declaration"]
  1961 -> 403 [style=dashed label="boolean-literal"]
  1961 -> 404 [style=dashed label="cast-expression"]
  1961 -> 405 [style=dashed label="character-literal"]
  1961 -> 63 [style=dashed label="class-head"]
  1961 -> 64 [style=dashed label="class-key"]
  1961 -> 65 [style=dashed label="class-name"]
  1961 -> 66 [style=dashed label="class-specifier"]
  1961 -> 406 [style=dashed label="compare-expression"]
  1961 -> 681 [style=dashed label="compound-statement"]
  1961 -> 67 [style=dashed label="concept-name"]
  1961 -> 526 [style=dashed label="conditional-expression"]
  1961 -> 68 [style=dashed label="conversion-function-id"]
  1961 -> 682 [style=dashed label="coroutine-return-statement"]
  1961 -> 69 [style=dashed label="cv-qualifier"]
  1961 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1961 -> 410 [style=dashed label="decimal-literal"]
  1961 -> 70 [style=dashed label="decl-specifier"]
  1961 -> 683 [style=dashed label="decl-specifier-seq"]
  1961 -> 684 [style=dashed label="declaration-statement"]
  1961 -> 76 [style=dashed label="decltype-specifier"]
  1961 -> 78 [style=dashed label="defining-type-specifier"]
  1961 -> 411 [style=dashed label="delete-expression"]
  1961 -> 412 [style=dashed label="digit"]
  1961 -> 413 [style=dashed label="digit-sequence"]
  1961 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1961 -> 80 [style=dashed label="elaborated-type-specifier"]
  1961 -> 414 [style=dashed label="encoding-prefix"]
  1961 -> 82 [style=dashed label="enum-head"]
  1961 -> 83 [style=dashed label="enum-key"]
  1961 -> 84 [style=dashed label="enum-name"]
  1961 -> 85 [style=dashed label="enum-specifier"]
  1961 -> 415 [style=dashed label="equality-expression"]
  1961 -> 416 [style=dashed label="exclusive-or-expression"]
  1961 -> 264 [style=dashed label="explicit-specifier"]
  1961 -> 685 [style=dashed label="expression"]
  1961 -> 686 [style=dashed label="expression-statement"]
  1961 -> 417 [style=dashed label="floating-point-literal"]
  1961 -> 418 [style=dashed label="fold-expression"]
  1961 -> 419 [style=dashed label="fractional-constant"]
  1961 -> 91 [style=dashed label="function-specifier"]
  1961 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1961 -> 421 [style=dashed label="hexadecimal-literal"]
  1961 -> 422 [style=dashed label="hexadecimal-prefix"]
  1961 -> 423 [style=dashed label="id-expression"]
  1961 -> 424 [style=dashed label="inclusive-or-expression"]
  1961 -> 425 [style=dashed label="integer-literal"]
  1961 -> 687 [style=dashed label="iteration-statement"]
  1961 -> 688 [style=dashed label="jump-statement"]
  1961 -> 689 [style=dashed label="labeled-statement"]
  1961 -> 426 [style=dashed label="lambda-expression"]
  1961 -> 427 [style=dashed label="lambda-introducer"]
  1961 -> 428 [style=dashed label="literal"]
  1961 -> 95 [style=dashed label="literal-operator-id"]
  1961 -> 429 [style=dashed label="logical-and-expression"]
  1961 -> 528 [style=dashed label="logical-or-expression"]
  1961 -> 431 [style=dashed label="multiplicative-expression"]
  1961 -> 99 [style=dashed label="namespace-alias"]
  1961 -> 100 [style=dashed label="namespace-alias-definition"]
  1961 -> 102 [style=dashed label="namespace-name"]
  1961 -> 432 [style=dashed label="nested-name-specifier"]
  1961 -> 433 [style=dashed label="new-expression"]
  1961 -> 434 [style=dashed label="noexcept-expression"]
  1961 -> 435 [style=dashed label="nonzero-digit"]
  1961 -> 436 [style=dashed label="octal-literal"]
  1961 -> 107 [style=dashed label="opaque-enum-declaration"]
  1961 -> 108 [style=dashed label="operator-function-id"]
  1961 -> 109 [style=dashed label="placeholder-type-specifier"]
  1961 -> 437 [style=dashed label="pm-expression"]
  1961 -> 438 [style=dashed label="pointer-literal"]
  1961 -> 439 [style=dashed label="postfix-expression"]
  1961 -> 440 [style=dashed label="primary-expression"]
  1961 -> 112 [style=dashed label="qualified-id"]
  1961 -> 441 [style=dashed label="relational-expression"]
  1961 -> 442 [style=dashed label="requires-expression"]
  1961 -> 690 [style=dashed label="selection-statement"]
  1961 -> 443 [style=dashed label="shift-expression"]
  1961 -> 113 [style=dashed label="simple-declaration"]
  1961 -> 114 [style=dashed label="simple-template-id"]
  1961 -> 444 [style=dashed label="simple-type-specifier"]
  1961 -> 1972 [style=dashed label="statement"]
  1961 -> 116 [style=dashed label="static_assert-declaration"]
  1961 -> 117 [style=dashed label="storage-class-specifier"]
  1961 -> 445 [style=dashed label="string-literal"]
  1961 -> 120 [style=dashed label="template-id"]
  1961 -> 215 [style=dashed label="template-name"]
  1961 -> 530 [style=dashed label="throw-expression"]
  1961 -> 693 [style=dashed label="try-block"]
  1961 -> 123 [style=dashed label="type-constraint"]
  1961 -> 124 [style=dashed label="type-name"]
  1961 -> 125 [style=dashed label="type-specifier"]
  1961 -> 126 [style=dashed label="typedef-name"]
  1961 -> 448 [style=dashed label="typename-specifier"]
  1961 -> 449 [style=dashed label="unary-expression"]
  1961 -> 450 [style=dashed label="unary-operator"]
  1961 -> 129 [style=dashed label="unqualified-id"]
  1961 -> 451 [style=dashed label="user-defined-character-literal"]
  1961 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1961 -> 453 [style=dashed label="user-defined-integer-literal"]
  1961 -> 454 [style=dashed label="user-defined-literal"]
  1961 -> 455 [style=dashed label="user-defined-string-literal"]
  1961 -> 130 [style=dashed label="using-declaration"]
  1961 -> 131 [style=dashed label="using-directive"]
  1961 -> 132 [style=dashed label="using-enum-declaration"]
  1961 -> 532 [style=dashed label="yield-expression"]
  1962 [label="State 1962\n\l941 selection-statement: IF CONSTEXPR OPEN_PAREN init-statement condition CLOSE_PAREN statement •\l945                    | IF CONSTEXPR OPEN_PAREN init-statement condition CLOSE_PAREN statement • ELSE statement\l"]
  1962 -> 1973 [style=solid label="ELSE"]
  1962 -> "1962R941d" [label="[ELSE]", style=solid]
 "1962R941d" [label="R941", fillcolor=5, shape=diamond, style=filled]
  1962 -> "1962R941" [style=solid]
 "1962R941" [label="R941", fillcolor=3, shape=diamond, style=filled]
  1963 [label="State 1963\n\l159 compound-requirement: OPEN_BRACE expression CLOSE_BRACE NOEXCEPT return-type-requirement SEMICOLON •\l"]
  1963 -> "1963R159" [style=solid]
 "1963R159" [label="R159", fillcolor=3, shape=diamond, style=filled]
  1964 [label="State 1964\n\l163 concept-name: IDENTIFIER •\l659 nested-name-specifier: nested-name-specifier IDENTIFIER • SCOPE\l1052 template-name: IDENTIFIER •\l"]
  1964 -> 722 [style=solid label="SCOPE"]
  1964 -> "1964R163" [style=solid]
 "1964R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  1964 -> "1964R1052d" [label="[LESS]", style=solid]
 "1964R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  1965 [label="State 1965\n\l384 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE •\l968 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE • initializer SEMICOLON\l"]
  1965 -> 1273 [style=solid label="EQ"]
  1965 -> 643 [style=solid label="OPEN_PAREN"]
  1965 -> 935 [style=solid label="OPEN_BRACE"]
  1965 -> 645 [style=dashed label="brace-or-equal-initializer"]
  1965 -> 646 [style=dashed label="braced-init-list"]
  1965 -> 1834 [style=dashed label="initializer"]
  1965 -> "1965R384" [style=solid]
 "1965R384" [label="R384", fillcolor=3, shape=diamond, style=filled]
  1966 [label="State 1966\n\l382 for-range-declaration: attribute-specifier-seq decl-specifier-seq OPEN_SQUARE identifier-list CLOSE_SQUARE •\l"]
  1966 -> "1966R382" [style=solid]
 "1966R382" [label="R382", fillcolor=3, shape=diamond, style=filled]
  1967 [label="State 1967\n\l384 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list • CLOSE_SQUARE\l462 identifier-list: identifier-list • COMMA IDENTIFIER\l"]
  1967 -> 1131 [style=solid label="COMMA"]
  1967 -> 1974 [style=solid label="CLOSE_SQUARE"]
  1968 [label="State 1968\n\l510 iteration-statement: FOR OPEN_PAREN init-statement condition SEMICOLON expression CLOSE_PAREN statement •\l"]
  1968 -> "1968R510" [style=solid]
 "1968R510" [label="R510", fillcolor=3, shape=diamond, style=filled]
  1969 [label="State 1969\n\l385 for-range-declaration: decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE •\l"]
  1969 -> "1969R385" [style=solid]
 "1969R385" [label="R385", fillcolor=3, shape=diamond, style=filled]
  1970 [label="State 1970\n\l512 iteration-statement: FOR OPEN_PAREN init-statement for-range-declaration COLON for-range-initializer CLOSE_PAREN statement •\l"]
  1970 -> "1970R512" [style=solid]
 "1970R512" [label="R512", fillcolor=3, shape=diamond, style=filled]
  1971 [label="State 1971\n\l944 selection-statement: IF OPEN_PAREN init-statement condition CLOSE_PAREN statement ELSE statement •\l"]
  1971 -> "1971R944" [style=solid]
 "1971R944" [label="R944", fillcolor=3, shape=diamond, style=filled]
  1972 [label="State 1972\n\l943 selection-statement: IF CONSTEXPR OPEN_PAREN condition CLOSE_PAREN statement ELSE statement •\l"]
  1972 -> "1972R943" [style=solid]
 "1972R943" [label="R943", fillcolor=3, shape=diamond, style=filled]
  1973 [label="State 1973\n\l945 selection-statement: IF CONSTEXPR OPEN_PAREN init-statement condition CLOSE_PAREN statement ELSE • statement\l"]
  1973 -> 356 [style=solid label="PLUS"]
  1973 -> 357 [style=solid label="MINUS"]
  1973 -> 1 [style=solid label="USING"]
  1973 -> 661 [style=solid label="IDENTIFIER"]
  1973 -> 662 [style=solid label="SEMICOLON"]
  1973 -> 4 [style=solid label="ALIGNAS"]
  1973 -> 358 [style=solid label="OPEN_PAREN"]
  1973 -> 359 [style=solid label="AND"]
  1973 -> 8 [style=solid label="ASM"]
  1973 -> 360 [style=solid label="SCOPE"]
  1973 -> 663 [style=solid label="OPEN_SQUARE"]
  1973 -> 362 [style=solid label="CO_AWAIT"]
  1973 -> 289 [style=solid label="OPEN_BRACE"]
  1973 -> 11 [style=solid label="VIRTUAL"]
  1973 -> 363 [style=solid label="ZERO_LB"]
  1973 -> 364 [style=solid label="ZERO_HB"]
  1973 -> 365 [style=solid label="SINGLE_QUOTE"]
  1973 -> 366 [style=solid label="FALSE"]
  1973 -> 367 [style=solid label="TRUE"]
  1973 -> 12 [style=solid label="CLASS"]
  1973 -> 13 [style=solid label="STRUCT"]
  1973 -> 14 [style=solid label="UNION"]
  1973 -> 368 [style=solid label="NOEXCEPT"]
  1973 -> 17 [style=solid label="OPERATOR"]
  1973 -> 665 [style=solid label="CO_RETURN"]
  1973 -> 18 [style=solid label="CONST"]
  1973 -> 19 [style=solid label="VOLATILE"]
  1973 -> 20 [style=solid label="FRIEND"]
  1973 -> 21 [style=solid label="TYPEDEF"]
  1973 -> 22 [style=solid label="CONSTEXPR"]
  1973 -> 23 [style=solid label="CONSTEVAL"]
  1973 -> 24 [style=solid label="CONSTINIT"]
  1973 -> 258 [style=solid label="INLINE"]
  1973 -> 26 [style=solid label="DECLTYPE"]
  1973 -> 369 [style=solid label="DELETE"]
  1973 -> 370 [style=solid label="DOT"]
  1973 -> 27 [style=solid label="ENUM"]
  1973 -> 184 [style=solid label="UNICODE_8"]
  1973 -> 259 [style=solid label="EXTERN"]
  1973 -> 29 [style=solid label="EXPLICIT"]
  1973 -> 371 [style=solid label="MULT"]
  1973 -> 666 [style=solid label="DEFAULT"]
  1973 -> 667 [style=solid label="TRY"]
  1973 -> 199 [style=solid label="DOUBLE_QUOTE"]
  1973 -> 372 [style=solid label="ZERO_LX"]
  1973 -> 373 [style=solid label="ZERO_HX"]
  1973 -> 668 [style=solid label="WHILE"]
  1973 -> 669 [style=solid label="DO"]
  1973 -> 670 [style=solid label="FOR"]
  1973 -> 671 [style=solid label="BREAK"]
  1973 -> 672 [style=solid label="CONTINUE"]
  1973 -> 673 [style=solid label="RETURN"]
  1973 -> 674 [style=solid label="GOTO"]
  1973 -> 675 [style=solid label="CASE"]
  1973 -> 676 [style=solid label="NAMESPACE"]
  1973 -> 374 [style=solid label="REQUIRES"]
  1973 -> 375 [style=solid label="NEW"]
  1973 -> 376 [style=solid label="COMPL"]
  1973 -> 377 [style=solid label="NOT"]
  1973 -> 378 [style=solid label="PLUS_PLUS"]
  1973 -> 379 [style=solid label="MINUS_MINUS"]
  1973 -> 380 [style=solid label="THIS"]
  1973 -> 36 [style=solid label="AUTO"]
  1973 -> 381 [style=solid label="NULLPTR"]
  1973 -> 382 [style=solid label="DYNAMIC_CAST"]
  1973 -> 383 [style=solid label="STATIC_CAST"]
  1973 -> 384 [style=solid label="REINTERPRET_CAST"]
  1973 -> 385 [style=solid label="CONST_CAST"]
  1973 -> 386 [style=solid label="TYPEID"]
  1973 -> 677 [style=solid label="IF"]
  1973 -> 678 [style=solid label="SWITCH"]
  1973 -> 37 [style=solid label="CHAR"]
  1973 -> 38 [style=solid label="CHAR8_T"]
  1973 -> 39 [style=solid label="CHAR16_T"]
  1973 -> 40 [style=solid label="CHAR32_T"]
  1973 -> 41 [style=solid label="WCHAR_T"]
  1973 -> 42 [style=solid label="BOOL"]
  1973 -> 43 [style=solid label="SHORT"]
  1973 -> 44 [style=solid label="INT"]
  1973 -> 45 [style=solid label="LONG"]
  1973 -> 46 [style=solid label="SIGNED"]
  1973 -> 47 [style=solid label="UNSIGNED"]
  1973 -> 48 [style=solid label="FLOAT"]
  1973 -> 49 [style=solid label="DOUBLE"]
  1973 -> 50 [style=solid label="VOID"]
  1973 -> 51 [style=solid label="STATIC_ASSERT"]
  1973 -> 52 [style=solid label="STATIC"]
  1973 -> 53 [style=solid label="THREAD_LOCAL"]
  1973 -> 54 [style=solid label="MUTABLE"]
  1973 -> 523 [style=solid label="THROW"]
  1973 -> 55 [style=solid label="TYPENAME"]
  1973 -> 387 [style=solid label="SIZEOF"]
  1973 -> 388 [style=solid label="ALIGNOF"]
  1973 -> 524 [style=solid label="CO_YIELD"]
  1973 -> 389 [style=solid label="'0'"]
  1973 -> 390 [style=solid label="'1'"]
  1973 -> 391 [style=solid label="'2'"]
  1973 -> 392 [style=solid label="'3'"]
  1973 -> 393 [style=solid label="'4'"]
  1973 -> 394 [style=solid label="'5'"]
  1973 -> 395 [style=solid label="'6'"]
  1973 -> 396 [style=solid label="'7'"]
  1973 -> 397 [style=solid label="'8'"]
  1973 -> 398 [style=solid label="'9'"]
  1973 -> 205 [style=solid label="'u'"]
  1973 -> 206 [style=solid label="'U'"]
  1973 -> 207 [style=solid label="'L'"]
  1973 -> 208 [style=solid label="'R'"]
  1973 -> 399 [style=dashed label="additive-expression"]
  1973 -> 56 [style=dashed label="alias-declaration"]
  1973 -> 57 [style=dashed label="alignment-specifier"]
  1973 -> 400 [style=dashed label="and-expression"]
  1973 -> 58 [style=dashed label="asm-declaration"]
  1973 -> 525 [style=dashed label="assignment-expression"]
  1973 -> 60 [style=dashed label="attribute-specifier"]
  1973 -> 679 [style=dashed label="attribute-specifier-seq"]
  1973 -> 401 [style=dashed label="await-expression"]
  1973 -> 402 [style=dashed label="binary-literal"]
  1973 -> 680 [style=dashed label="block-declaration"]
  1973 -> 403 [style=dashed label="boolean-literal"]
  1973 -> 404 [style=dashed label="cast-expression"]
  1973 -> 405 [style=dashed label="character-literal"]
  1973 -> 63 [style=dashed label="class-head"]
  1973 -> 64 [style=dashed label="class-key"]
  1973 -> 65 [style=dashed label="class-name"]
  1973 -> 66 [style=dashed label="class-specifier"]
  1973 -> 406 [style=dashed label="compare-expression"]
  1973 -> 681 [style=dashed label="compound-statement"]
  1973 -> 67 [style=dashed label="concept-name"]
  1973 -> 526 [style=dashed label="conditional-expression"]
  1973 -> 68 [style=dashed label="conversion-function-id"]
  1973 -> 682 [style=dashed label="coroutine-return-statement"]
  1973 -> 69 [style=dashed label="cv-qualifier"]
  1973 -> 409 [style=dashed label="decimal-floating-point-literal"]
  1973 -> 410 [style=dashed label="decimal-literal"]
  1973 -> 70 [style=dashed label="decl-specifier"]
  1973 -> 683 [style=dashed label="decl-specifier-seq"]
  1973 -> 684 [style=dashed label="declaration-statement"]
  1973 -> 76 [style=dashed label="decltype-specifier"]
  1973 -> 78 [style=dashed label="defining-type-specifier"]
  1973 -> 411 [style=dashed label="delete-expression"]
  1973 -> 412 [style=dashed label="digit"]
  1973 -> 413 [style=dashed label="digit-sequence"]
  1973 -> 79 [style=dashed label="elaborated-enum-specifier"]
  1973 -> 80 [style=dashed label="elaborated-type-specifier"]
  1973 -> 414 [style=dashed label="encoding-prefix"]
  1973 -> 82 [style=dashed label="enum-head"]
  1973 -> 83 [style=dashed label="enum-key"]
  1973 -> 84 [style=dashed label="enum-name"]
  1973 -> 85 [style=dashed label="enum-specifier"]
  1973 -> 415 [style=dashed label="equality-expression"]
  1973 -> 416 [style=dashed label="exclusive-or-expression"]
  1973 -> 264 [style=dashed label="explicit-specifier"]
  1973 -> 685 [style=dashed label="expression"]
  1973 -> 686 [style=dashed label="expression-statement"]
  1973 -> 417 [style=dashed label="floating-point-literal"]
  1973 -> 418 [style=dashed label="fold-expression"]
  1973 -> 419 [style=dashed label="fractional-constant"]
  1973 -> 91 [style=dashed label="function-specifier"]
  1973 -> 420 [style=dashed label="hexadecimal-floating-point-literal"]
  1973 -> 421 [style=dashed label="hexadecimal-literal"]
  1973 -> 422 [style=dashed label="hexadecimal-prefix"]
  1973 -> 423 [style=dashed label="id-expression"]
  1973 -> 424 [style=dashed label="inclusive-or-expression"]
  1973 -> 425 [style=dashed label="integer-literal"]
  1973 -> 687 [style=dashed label="iteration-statement"]
  1973 -> 688 [style=dashed label="jump-statement"]
  1973 -> 689 [style=dashed label="labeled-statement"]
  1973 -> 426 [style=dashed label="lambda-expression"]
  1973 -> 427 [style=dashed label="lambda-introducer"]
  1973 -> 428 [style=dashed label="literal"]
  1973 -> 95 [style=dashed label="literal-operator-id"]
  1973 -> 429 [style=dashed label="logical-and-expression"]
  1973 -> 528 [style=dashed label="logical-or-expression"]
  1973 -> 431 [style=dashed label="multiplicative-expression"]
  1973 -> 99 [style=dashed label="namespace-alias"]
  1973 -> 100 [style=dashed label="namespace-alias-definition"]
  1973 -> 102 [style=dashed label="namespace-name"]
  1973 -> 432 [style=dashed label="nested-name-specifier"]
  1973 -> 433 [style=dashed label="new-expression"]
  1973 -> 434 [style=dashed label="noexcept-expression"]
  1973 -> 435 [style=dashed label="nonzero-digit"]
  1973 -> 436 [style=dashed label="octal-literal"]
  1973 -> 107 [style=dashed label="opaque-enum-declaration"]
  1973 -> 108 [style=dashed label="operator-function-id"]
  1973 -> 109 [style=dashed label="placeholder-type-specifier"]
  1973 -> 437 [style=dashed label="pm-expression"]
  1973 -> 438 [style=dashed label="pointer-literal"]
  1973 -> 439 [style=dashed label="postfix-expression"]
  1973 -> 440 [style=dashed label="primary-expression"]
  1973 -> 112 [style=dashed label="qualified-id"]
  1973 -> 441 [style=dashed label="relational-expression"]
  1973 -> 442 [style=dashed label="requires-expression"]
  1973 -> 690 [style=dashed label="selection-statement"]
  1973 -> 443 [style=dashed label="shift-expression"]
  1973 -> 113 [style=dashed label="simple-declaration"]
  1973 -> 114 [style=dashed label="simple-template-id"]
  1973 -> 444 [style=dashed label="simple-type-specifier"]
  1973 -> 1975 [style=dashed label="statement"]
  1973 -> 116 [style=dashed label="static_assert-declaration"]
  1973 -> 117 [style=dashed label="storage-class-specifier"]
  1973 -> 445 [style=dashed label="string-literal"]
  1973 -> 120 [style=dashed label="template-id"]
  1973 -> 215 [style=dashed label="template-name"]
  1973 -> 530 [style=dashed label="throw-expression"]
  1973 -> 693 [style=dashed label="try-block"]
  1973 -> 123 [style=dashed label="type-constraint"]
  1973 -> 124 [style=dashed label="type-name"]
  1973 -> 125 [style=dashed label="type-specifier"]
  1973 -> 126 [style=dashed label="typedef-name"]
  1973 -> 448 [style=dashed label="typename-specifier"]
  1973 -> 449 [style=dashed label="unary-expression"]
  1973 -> 450 [style=dashed label="unary-operator"]
  1973 -> 129 [style=dashed label="unqualified-id"]
  1973 -> 451 [style=dashed label="user-defined-character-literal"]
  1973 -> 452 [style=dashed label="user-defined-floating-point-literal"]
  1973 -> 453 [style=dashed label="user-defined-integer-literal"]
  1973 -> 454 [style=dashed label="user-defined-literal"]
  1973 -> 455 [style=dashed label="user-defined-string-literal"]
  1973 -> 130 [style=dashed label="using-declaration"]
  1973 -> 131 [style=dashed label="using-directive"]
  1973 -> 132 [style=dashed label="using-enum-declaration"]
  1973 -> 532 [style=dashed label="yield-expression"]
  1974 [label="State 1974\n\l384 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier OPEN_SQUARE identifier-list CLOSE_SQUARE •\l"]
  1974 -> "1974R384" [style=solid]
 "1974R384" [label="R384", fillcolor=3, shape=diamond, style=filled]
  1975 [label="State 1975\n\l945 selection-statement: IF CONSTEXPR OPEN_PAREN init-statement condition CLOSE_PAREN statement ELSE statement •\l"]
  1975 -> "1975R945" [style=solid]
 "1975R945" [label="R945", fillcolor=3, shape=diamond, style=filled]
}
