// Generated by GNU Bison 3.8.2.9-6571.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <https://www.gnu.org/software/bison/>.

digraph "cplusplus.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: • result $end\l"]
  0 -> 1 [style=solid label="\"constexpr\""]
  0 -> 2 [style=solid label="\"export\""]
  0 -> 3 [style=solid label="\"extern\""]
  0 -> 4 [style=solid label="IDENTIFIER"]
  0 -> 5 [style=solid label="\"inline\""]
  0 -> 6 [style=solid label="\"::\""]
  0 -> 7 [style=solid label="\"template\""]
  0 -> 8 [style=solid label="\"typename\""]
  0 -> 9 [style=solid label="\"virtual\""]
  0 -> 10 [style=solid label="\"using\""]
  0 -> 11 [style=solid label="\";\""]
  0 -> 12 [style=solid label="\"class\""]
  0 -> 13 [style=solid label="\"struct\""]
  0 -> 14 [style=solid label="\"union\""]
  0 -> 15 [style=solid label="\"const\""]
  0 -> 16 [style=solid label="\"volatile\""]
  0 -> 17 [style=solid label="\"friend\""]
  0 -> 18 [style=solid label="\"typedef\""]
  0 -> 19 [style=solid label="\"consteval\""]
  0 -> 20 [style=solid label="\"constinit\""]
  0 -> 21 [style=solid label="\"decltype\""]
  0 -> 22 [style=solid label="\"enum\""]
  0 -> 23 [style=solid label="\"explicit\""]
  0 -> 24 [style=solid label="\"module\""]
  0 -> 25 [style=solid label="\"import\""]
  0 -> 26 [style=solid label="\"namespace\""]
  0 -> 27 [style=solid label="\"char\""]
  0 -> 28 [style=solid label="\"char8_t\""]
  0 -> 29 [style=solid label="\"char16_t\""]
  0 -> 30 [style=solid label="\"char32_t\""]
  0 -> 31 [style=solid label="\"wchar_t\""]
  0 -> 32 [style=solid label="\"bool\""]
  0 -> 33 [style=solid label="\"short\""]
  0 -> 34 [style=solid label="\"int\""]
  0 -> 35 [style=solid label="\"long\""]
  0 -> 36 [style=solid label="\"signed\""]
  0 -> 37 [style=solid label="\"unsigned\""]
  0 -> 38 [style=solid label="\"float\""]
  0 -> 39 [style=solid label="\"double\""]
  0 -> 40 [style=solid label="\"void\""]
  0 -> 41 [style=solid label="\"static_assert\""]
  0 -> 42 [style=solid label="\"static\""]
  0 -> 43 [style=solid label="\"thread_local\""]
  0 -> 44 [style=solid label="\"mutable\""]
  0 -> 45 [style=dashed label="EXTERN-opt"]
  0 -> 46 [style=dashed label="INLINE-opt"]
  0 -> 47 [style=dashed label="alias-declaration"]
  0 -> 48 [style=dashed label="asm-declaration"]
  0 -> 49 [style=dashed label="attribute-declaration"]
  0 -> 50 [style=dashed label="attribute-specifier-seq"]
  0 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  0 -> 52 [style=dashed label="block-declaration"]
  0 -> 53 [style=dashed label="class-head"]
  0 -> 54 [style=dashed label="class-key"]
  0 -> 55 [style=dashed label="class-name"]
  0 -> 56 [style=dashed label="class-specifier"]
  0 -> 57 [style=dashed label="cv-qualifier"]
  0 -> 58 [style=dashed label="decl-specifier"]
  0 -> 59 [style=dashed label="decl-specifier-seq"]
  0 -> 60 [style=dashed label="declaration"]
  0 -> 61 [style=dashed label="declaration-seq"]
  0 -> 62 [style=dashed label="declaration-seq-opt"]
  0 -> 63 [style=dashed label="decltype-specifier"]
  0 -> 64 [style=dashed label="deduction-guide"]
  0 -> 65 [style=dashed label="defining-type-specifier"]
  0 -> 66 [style=dashed label="elaborated-enum-specifier"]
  0 -> 67 [style=dashed label="elaborated-type-specifier"]
  0 -> 68 [style=dashed label="empty-declaration"]
  0 -> 69 [style=dashed label="enum-head"]
  0 -> 70 [style=dashed label="enum-key"]
  0 -> 71 [style=dashed label="enum-name"]
  0 -> 72 [style=dashed label="enum-specifier"]
  0 -> 73 [style=dashed label="explicit-instantiation"]
  0 -> 74 [style=dashed label="explicit-specialization"]
  0 -> 75 [style=dashed label="explicit-specifier"]
  0 -> 76 [style=dashed label="explicit-specifier-opt"]
  0 -> 77 [style=dashed label="export-declaration"]
  0 -> 78 [style=dashed label="function-definition"]
  0 -> 79 [style=dashed label="function-specifier"]
  0 -> 80 [style=dashed label="global-module-fragment"]
  0 -> 81 [style=dashed label="global-module-fragment-opt"]
  0 -> 82 [style=dashed label="linkage-specification"]
  0 -> 83 [style=dashed label="module-import-declaration"]
  0 -> 84 [style=dashed label="named-namespace-definition"]
  0 -> 85 [style=dashed label="namespace-alias"]
  0 -> 86 [style=dashed label="namespace-alias-definition"]
  0 -> 87 [style=dashed label="namespace-definition"]
  0 -> 88 [style=dashed label="namespace-name"]
  0 -> 89 [style=dashed label="nested-name-specifier"]
  0 -> 90 [style=dashed label="nested-name-specifier-opt"]
  0 -> 91 [style=dashed label="nested-namespace-definition"]
  0 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  0 -> 93 [style=dashed label="opaque-enum-declaration"]
  0 -> 94 [style=dashed label="placeholder-type-specifier"]
  0 -> 95 [style=dashed label="simple-declaration"]
  0 -> 96 [style=dashed label="simple-template-id"]
  0 -> 97 [style=dashed label="simple-type-specifier"]
  0 -> 98 [style=dashed label="static_assert-declaration"]
  0 -> 99 [style=dashed label="storage-class-specifier"]
  0 -> 100 [style=dashed label="template-declaration"]
  0 -> 101 [style=dashed label="template-head"]
  0 -> 102 [style=dashed label="template-name"]
  0 -> 103 [style=dashed label="translation-unit"]
  0 -> 104 [style=dashed label="type-constraint"]
  0 -> 105 [style=dashed label="type-constraint-opt"]
  0 -> 106 [style=dashed label="type-name"]
  0 -> 107 [style=dashed label="type-specifier"]
  0 -> 108 [style=dashed label="typedef-name"]
  0 -> 109 [style=dashed label="typename-specifier"]
  0 -> 110 [style=dashed label="unnamed-namespace-definition"]
  0 -> 111 [style=dashed label="using-declaration"]
  0 -> 112 [style=dashed label="using-directive"]
  0 -> 113 [style=dashed label="using-enum-declaration"]
  0 -> 114 [style=dashed label="result"]
  0 -> "0R9d" [label="[\"template\"]", style=solid]
 "0R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  0 -> "0R13d" [label="[\"namespace\"]", style=solid]
 "0R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  0 -> "0R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "0R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  0 -> "0R83" [label="[]", style=solid]
 "0R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  0 -> "0R208" [label="[$end]", style=solid]
 "0R208" [label="R208", fillcolor=3, shape=diamond, style=filled]
  0 -> "0R268d" [label="[IDENTIFIER]", style=solid]
 "0R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  0 -> "0R333d" [label="[\"export\", \"module\"]", style=solid]
 "0R333d" [label="R333", fillcolor=5, shape=diamond, style=filled]
  0 -> "0R458d" [label="[IDENTIFIER]", style=solid]
 "0R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  0 -> "0R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "0R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1 [label="State 1\n\l185 decl-specifier: \"constexpr\" •\l"]
  1 -> "1R185" [style=solid]
 "1R185" [label="R185", fillcolor=3, shape=diamond, style=filled]
  2 [label="State 2\n\l270 export-declaration: \"export\" • declaration\l271                   | \"export\" • \"{\" declaration-seq-opt \"}\"\l272                   | \"export\" • module-import-declaration\l"]
  2 -> 1 [style=solid label="\"constexpr\""]
  2 -> 2 [style=solid label="\"export\""]
  2 -> 3 [style=solid label="\"extern\""]
  2 -> 4 [style=solid label="IDENTIFIER"]
  2 -> 5 [style=solid label="\"inline\""]
  2 -> 6 [style=solid label="\"::\""]
  2 -> 7 [style=solid label="\"template\""]
  2 -> 8 [style=solid label="\"typename\""]
  2 -> 9 [style=solid label="\"virtual\""]
  2 -> 10 [style=solid label="\"using\""]
  2 -> 11 [style=solid label="\";\""]
  2 -> 115 [style=solid label="\"{\""]
  2 -> 12 [style=solid label="\"class\""]
  2 -> 13 [style=solid label="\"struct\""]
  2 -> 14 [style=solid label="\"union\""]
  2 -> 15 [style=solid label="\"const\""]
  2 -> 16 [style=solid label="\"volatile\""]
  2 -> 17 [style=solid label="\"friend\""]
  2 -> 18 [style=solid label="\"typedef\""]
  2 -> 19 [style=solid label="\"consteval\""]
  2 -> 20 [style=solid label="\"constinit\""]
  2 -> 21 [style=solid label="\"decltype\""]
  2 -> 22 [style=solid label="\"enum\""]
  2 -> 23 [style=solid label="\"explicit\""]
  2 -> 25 [style=solid label="\"import\""]
  2 -> 26 [style=solid label="\"namespace\""]
  2 -> 27 [style=solid label="\"char\""]
  2 -> 28 [style=solid label="\"char8_t\""]
  2 -> 29 [style=solid label="\"char16_t\""]
  2 -> 30 [style=solid label="\"char32_t\""]
  2 -> 31 [style=solid label="\"wchar_t\""]
  2 -> 32 [style=solid label="\"bool\""]
  2 -> 33 [style=solid label="\"short\""]
  2 -> 34 [style=solid label="\"int\""]
  2 -> 35 [style=solid label="\"long\""]
  2 -> 36 [style=solid label="\"signed\""]
  2 -> 37 [style=solid label="\"unsigned\""]
  2 -> 38 [style=solid label="\"float\""]
  2 -> 39 [style=solid label="\"double\""]
  2 -> 40 [style=solid label="\"void\""]
  2 -> 41 [style=solid label="\"static_assert\""]
  2 -> 42 [style=solid label="\"static\""]
  2 -> 43 [style=solid label="\"thread_local\""]
  2 -> 44 [style=solid label="\"mutable\""]
  2 -> 45 [style=dashed label="EXTERN-opt"]
  2 -> 46 [style=dashed label="INLINE-opt"]
  2 -> 47 [style=dashed label="alias-declaration"]
  2 -> 48 [style=dashed label="asm-declaration"]
  2 -> 49 [style=dashed label="attribute-declaration"]
  2 -> 50 [style=dashed label="attribute-specifier-seq"]
  2 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  2 -> 52 [style=dashed label="block-declaration"]
  2 -> 53 [style=dashed label="class-head"]
  2 -> 54 [style=dashed label="class-key"]
  2 -> 55 [style=dashed label="class-name"]
  2 -> 56 [style=dashed label="class-specifier"]
  2 -> 57 [style=dashed label="cv-qualifier"]
  2 -> 58 [style=dashed label="decl-specifier"]
  2 -> 59 [style=dashed label="decl-specifier-seq"]
  2 -> 116 [style=dashed label="declaration"]
  2 -> 63 [style=dashed label="decltype-specifier"]
  2 -> 64 [style=dashed label="deduction-guide"]
  2 -> 65 [style=dashed label="defining-type-specifier"]
  2 -> 66 [style=dashed label="elaborated-enum-specifier"]
  2 -> 67 [style=dashed label="elaborated-type-specifier"]
  2 -> 68 [style=dashed label="empty-declaration"]
  2 -> 69 [style=dashed label="enum-head"]
  2 -> 70 [style=dashed label="enum-key"]
  2 -> 71 [style=dashed label="enum-name"]
  2 -> 72 [style=dashed label="enum-specifier"]
  2 -> 73 [style=dashed label="explicit-instantiation"]
  2 -> 74 [style=dashed label="explicit-specialization"]
  2 -> 75 [style=dashed label="explicit-specifier"]
  2 -> 76 [style=dashed label="explicit-specifier-opt"]
  2 -> 77 [style=dashed label="export-declaration"]
  2 -> 78 [style=dashed label="function-definition"]
  2 -> 79 [style=dashed label="function-specifier"]
  2 -> 82 [style=dashed label="linkage-specification"]
  2 -> 117 [style=dashed label="module-import-declaration"]
  2 -> 84 [style=dashed label="named-namespace-definition"]
  2 -> 85 [style=dashed label="namespace-alias"]
  2 -> 86 [style=dashed label="namespace-alias-definition"]
  2 -> 87 [style=dashed label="namespace-definition"]
  2 -> 88 [style=dashed label="namespace-name"]
  2 -> 89 [style=dashed label="nested-name-specifier"]
  2 -> 90 [style=dashed label="nested-name-specifier-opt"]
  2 -> 91 [style=dashed label="nested-namespace-definition"]
  2 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  2 -> 93 [style=dashed label="opaque-enum-declaration"]
  2 -> 94 [style=dashed label="placeholder-type-specifier"]
  2 -> 95 [style=dashed label="simple-declaration"]
  2 -> 96 [style=dashed label="simple-template-id"]
  2 -> 97 [style=dashed label="simple-type-specifier"]
  2 -> 98 [style=dashed label="static_assert-declaration"]
  2 -> 99 [style=dashed label="storage-class-specifier"]
  2 -> 100 [style=dashed label="template-declaration"]
  2 -> 101 [style=dashed label="template-head"]
  2 -> 102 [style=dashed label="template-name"]
  2 -> 104 [style=dashed label="type-constraint"]
  2 -> 105 [style=dashed label="type-constraint-opt"]
  2 -> 106 [style=dashed label="type-name"]
  2 -> 107 [style=dashed label="type-specifier"]
  2 -> 108 [style=dashed label="typedef-name"]
  2 -> 109 [style=dashed label="typename-specifier"]
  2 -> 110 [style=dashed label="unnamed-namespace-definition"]
  2 -> 111 [style=dashed label="using-declaration"]
  2 -> 112 [style=dashed label="using-directive"]
  2 -> 113 [style=dashed label="using-enum-declaration"]
  2 -> "2R9d" [label="[\"template\"]", style=solid]
 "2R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R13d" [label="[\"namespace\"]", style=solid]
 "2R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "2R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R83" [label="[]", style=solid]
 "2R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  2 -> "2R268d" [label="[IDENTIFIER]", style=solid]
 "2R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R458d" [label="[IDENTIFIER]", style=solid]
 "2R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  2 -> "2R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "2R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  3 [label="State 3\n\l 10 EXTERN-opt: \"extern\" •\l390 linkage-specification: \"extern\" • string-literal \"{\" declaration-seq-opt \"}\"\l391                      | \"extern\" • string-literal declaration\l680 storage-class-specifier: \"extern\" •\l"]
  3 -> 118 [style=solid label="STRING_LITERAL"]
  3 -> 119 [style=dashed label="string-literal"]
  3 -> "3R10" [label="[\"template\"]", style=solid]
 "3R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  3 -> "3R680" [style=solid]
 "3R680" [label="R680", fillcolor=3, shape=diamond, style=filled]
  4 [label="State 4\n\l137 class-name: IDENTIFIER •\l246 enum-name: IDENTIFIER •\l444 namespace-alias: IDENTIFIER •\l450 namespace-name: IDENTIFIER •\l696 template-name: IDENTIFIER •\l731 typedef-name: IDENTIFIER •\l"]
  4 -> "4R137" [style=solid]
 "4R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  4 -> "4R246d" [label="[\"::\"]", style=solid]
 "4R246d" [label="R246", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R444d" [label="[\"::\"]", style=solid]
 "4R444d" [label="R444", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R450d" [label="[\"::\"]", style=solid]
 "4R450d" [label="R450", fillcolor=5, shape=diamond, style=filled]
  4 -> "4R696" [label="[\"<\"]", style=solid]
 "4R696" [label="R696", fillcolor=3, shape=diamond, style=filled]
  4 -> "4R731d" [label="[\"::\"]", style=solid]
 "4R731d" [label="R731", fillcolor=5, shape=diamond, style=filled]
  5 [label="State 5\n\l 14 INLINE-opt: \"inline\" •\l188 decl-specifier: \"inline\" •\l"]
  5 -> "5R14" [label="[\"namespace\"]", style=solid]
 "5R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  5 -> "5R188" [style=solid]
 "5R188" [label="R188", fillcolor=3, shape=diamond, style=filled]
  6 [label="State 6\n\l452 nested-name-specifier: \"::\" •\l"]
  6 -> "6R452" [style=solid]
 "6R452" [label="R452", fillcolor=3, shape=diamond, style=filled]
  7 [label="State 7\n\l265 explicit-specialization: \"template\" • \"<\" \">\" declaration\l692 template-head: \"template\" • \"<\" template-parameter-list \">\" requires-clause-opt\l"]
  7 -> 120 [style=solid label="\"<\""]
  8 [label="State 8\n\l733 typename-specifier: \"typename\" • nested-name-specifier IDENTIFIER\l734                   | \"typename\" • nested-name-specifier TEMPLATE-opt simple-template-id\l"]
  8 -> 4 [style=solid label="IDENTIFIER"]
  8 -> 6 [style=solid label="\"::\""]
  8 -> 21 [style=solid label="\"decltype\""]
  8 -> 55 [style=dashed label="class-name"]
  8 -> 121 [style=dashed label="decltype-specifier"]
  8 -> 71 [style=dashed label="enum-name"]
  8 -> 85 [style=dashed label="namespace-alias"]
  8 -> 88 [style=dashed label="namespace-name"]
  8 -> 122 [style=dashed label="nested-name-specifier"]
  8 -> 96 [style=dashed label="simple-template-id"]
  8 -> 102 [style=dashed label="template-name"]
  8 -> 106 [style=dashed label="type-name"]
  8 -> 108 [style=dashed label="typedef-name"]
  9 [label="State 9\n\l329 function-specifier: \"virtual\" •\l"]
  9 -> "9R329" [style=solid]
 "9R329" [label="R329", fillcolor=3, shape=diamond, style=filled]
  10 [label="State 10\n\l 44 alias-declaration: \"using\" • IDENTIFIER attribute-specifier-seq-opt \"=\" defining-type-id \";\"\l763 using-declaration: \"using\" • using-declarator-list \";\"\l768 using-enum-declaration: \"using\" • elaborated-enum-specifier \";\"\l"]
  10 -> 123 [style=solid label="IDENTIFIER"]
  10 -> 124 [style=solid label="\"typename\""]
  10 -> 125 [style=solid label="\"enum\""]
  10 -> 126 [style=dashed label="TYPENAME-opt"]
  10 -> 127 [style=dashed label="elaborated-enum-specifier"]
  10 -> 128 [style=dashed label="using-declarator"]
  10 -> 129 [style=dashed label="using-declarator-list"]
  10 -> "10R25d" [label="[IDENTIFIER]", style=solid]
 "10R25d" [label="R25", fillcolor=5, shape=diamond, style=filled]
  10 -> "10R25" [style=solid]
 "10R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  11 [label="State 11\n\l233 empty-declaration: \";\" •\l"]
  11 -> "11R233" [style=solid]
 "11R233" [label="R233", fillcolor=3, shape=diamond, style=filled]
  12 [label="State 12\n\l134 class-key: \"class\" •\l"]
  12 -> "12R134" [style=solid]
 "12R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
  13 [label="State 13\n\l135 class-key: \"struct\" •\l"]
  13 -> "13R135" [style=solid]
 "13R135" [label="R135", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l136 class-key: \"union\" •\l"]
  14 -> "14R136" [style=solid]
 "14R136" [label="R136", fillcolor=3, shape=diamond, style=filled]
  15 [label="State 15\n\l175 cv-qualifier: \"const\" •\l"]
  15 -> "15R175" [style=solid]
 "15R175" [label="R175", fillcolor=3, shape=diamond, style=filled]
  16 [label="State 16\n\l176 cv-qualifier: \"volatile\" •\l"]
  16 -> "16R176" [style=solid]
 "16R176" [label="R176", fillcolor=3, shape=diamond, style=filled]
  17 [label="State 17\n\l183 decl-specifier: \"friend\" •\l"]
  17 -> "17R183" [style=solid]
 "17R183" [label="R183", fillcolor=3, shape=diamond, style=filled]
  18 [label="State 18\n\l184 decl-specifier: \"typedef\" •\l"]
  18 -> "18R184" [style=solid]
 "18R184" [label="R184", fillcolor=3, shape=diamond, style=filled]
  19 [label="State 19\n\l186 decl-specifier: \"consteval\" •\l"]
  19 -> "19R186" [style=solid]
 "19R186" [label="R186", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l187 decl-specifier: \"constinit\" •\l"]
  20 -> "20R187" [style=solid]
 "20R187" [label="R187", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l214 decltype-specifier: \"decltype\" • \"(\" expression \")\"\l"]
  21 -> 130 [style=solid label="\"(\""]
  22 [label="State 22\n\l228 elaborated-enum-specifier: \"enum\" • nested-name-specifier-opt IDENTIFIER\l243 enum-key: \"enum\" •\l244         | \"enum\" • \"class\"\l245         | \"enum\" • \"struct\"\l"]
  22 -> 4 [style=solid label="IDENTIFIER"]
  22 -> 6 [style=solid label="\"::\""]
  22 -> 131 [style=solid label="\"class\""]
  22 -> 132 [style=solid label="\"struct\""]
  22 -> 21 [style=solid label="\"decltype\""]
  22 -> 55 [style=dashed label="class-name"]
  22 -> 121 [style=dashed label="decltype-specifier"]
  22 -> 71 [style=dashed label="enum-name"]
  22 -> 85 [style=dashed label="namespace-alias"]
  22 -> 88 [style=dashed label="namespace-name"]
  22 -> 133 [style=dashed label="nested-name-specifier"]
  22 -> 134 [style=dashed label="nested-name-specifier-opt"]
  22 -> 96 [style=dashed label="simple-template-id"]
  22 -> 102 [style=dashed label="template-name"]
  22 -> 106 [style=dashed label="type-name"]
  22 -> 108 [style=dashed label="typedef-name"]
  22 -> "22R243d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "22R243d" [label="R243", fillcolor=5, shape=diamond, style=filled]
  22 -> "22R243" [style=solid]
 "22R243" [label="R243", fillcolor=3, shape=diamond, style=filled]
  22 -> "22R458d" [label="[IDENTIFIER]", style=solid]
 "22R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  23 [label="State 23\n\l266 explicit-specifier: \"explicit\" • \"(\" constant-expression \")\"\l267                   | \"explicit\" •\l"]
  23 -> 135 [style=solid label="\"(\""]
  23 -> "23R267d" [label="[\"(\"]", style=solid]
 "23R267d" [label="R267", fillcolor=5, shape=diamond, style=filled]
  23 -> "23R267" [style=solid]
 "23R267" [label="R267", fillcolor=3, shape=diamond, style=filled]
  24 [label="State 24\n\l332 global-module-fragment: \"module\" • \";\" declaration-seq-opt\l"]
  24 -> 136 [style=solid label="\";\""]
  25 [label="State 25\n\l428 module-import-declaration: \"import\" • module-name attribute-specifier-seq-opt \";\"\l429                          | \"import\" • module-partition attribute-specifier-seq-opt \";\"\l430                          | \"import\" • header-name attribute-specifier-seq-opt \";\"\l"]
  25 -> 137 [style=solid label="IDENTIFIER"]
  25 -> 138 [style=solid label="\":\""]
  25 -> 139 [style=solid label="HEADER_NAME"]
  25 -> 140 [style=dashed label="header-name"]
  25 -> 141 [style=dashed label="module-name"]
  25 -> 142 [style=dashed label="module-name-qualifier"]
  25 -> 143 [style=dashed label="module-name-qualifier-opt"]
  25 -> 144 [style=dashed label="module-partition"]
  25 -> "25R434d" [label="[IDENTIFIER]", style=solid]
 "25R434d" [label="R434", fillcolor=5, shape=diamond, style=filled]
  26 [label="State 26\n\l445 namespace-alias-definition: \"namespace\" • IDENTIFIER \"=\" qualified-namespace-specifier \";\"\l460 nested-namespace-definition: \"namespace\" • enclosing-namespace-specifier \"::\" INLINE-opt IDENTIFIER \"{\" namespace-body \"}\"\l"]
  26 -> 145 [style=solid label="IDENTIFIER"]
  26 -> 146 [style=dashed label="enclosing-namespace-specifier"]
  27 [label="State 27\n\l650 simple-type-specifier: \"char\" •\l"]
  27 -> "27R650" [style=solid]
 "27R650" [label="R650", fillcolor=3, shape=diamond, style=filled]
  28 [label="State 28\n\l651 simple-type-specifier: \"char8_t\" •\l"]
  28 -> "28R651" [style=solid]
 "28R651" [label="R651", fillcolor=3, shape=diamond, style=filled]
  29 [label="State 29\n\l652 simple-type-specifier: \"char16_t\" •\l"]
  29 -> "29R652" [style=solid]
 "29R652" [label="R652", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l653 simple-type-specifier: \"char32_t\" •\l"]
  30 -> "30R653" [style=solid]
 "30R653" [label="R653", fillcolor=3, shape=diamond, style=filled]
  31 [label="State 31\n\l654 simple-type-specifier: \"wchar_t\" •\l"]
  31 -> "31R654" [style=solid]
 "31R654" [label="R654", fillcolor=3, shape=diamond, style=filled]
  32 [label="State 32\n\l655 simple-type-specifier: \"bool\" •\l"]
  32 -> "32R655" [style=solid]
 "32R655" [label="R655", fillcolor=3, shape=diamond, style=filled]
  33 [label="State 33\n\l656 simple-type-specifier: \"short\" •\l"]
  33 -> "33R656" [style=solid]
 "33R656" [label="R656", fillcolor=3, shape=diamond, style=filled]
  34 [label="State 34\n\l657 simple-type-specifier: \"int\" •\l"]
  34 -> "34R657" [style=solid]
 "34R657" [label="R657", fillcolor=3, shape=diamond, style=filled]
  35 [label="State 35\n\l658 simple-type-specifier: \"long\" •\l"]
  35 -> "35R658" [style=solid]
 "35R658" [label="R658", fillcolor=3, shape=diamond, style=filled]
  36 [label="State 36\n\l659 simple-type-specifier: \"signed\" •\l"]
  36 -> "36R659" [style=solid]
 "36R659" [label="R659", fillcolor=3, shape=diamond, style=filled]
  37 [label="State 37\n\l660 simple-type-specifier: \"unsigned\" •\l"]
  37 -> "37R660" [style=solid]
 "37R660" [label="R660", fillcolor=3, shape=diamond, style=filled]
  38 [label="State 38\n\l661 simple-type-specifier: \"float\" •\l"]
  38 -> "38R661" [style=solid]
 "38R661" [label="R661", fillcolor=3, shape=diamond, style=filled]
  39 [label="State 39\n\l662 simple-type-specifier: \"double\" •\l"]
  39 -> "39R662" [style=solid]
 "39R662" [label="R662", fillcolor=3, shape=diamond, style=filled]
  40 [label="State 40\n\l663 simple-type-specifier: \"void\" •\l"]
  40 -> "40R663" [style=solid]
 "40R663" [label="R663", fillcolor=3, shape=diamond, style=filled]
  41 [label="State 41\n\l676 static_assert-declaration: \"static_assert\" • \"(\" constant-expression \")\" \";\"\l677                          | \"static_assert\" • \"(\" constant-expression \",\" string-literal \")\" \";\"\l"]
  41 -> 147 [style=solid label="\"(\""]
  42 [label="State 42\n\l678 storage-class-specifier: \"static\" •\l"]
  42 -> "42R678" [style=solid]
 "42R678" [label="R678", fillcolor=3, shape=diamond, style=filled]
  43 [label="State 43\n\l679 storage-class-specifier: \"thread_local\" •\l"]
  43 -> "43R679" [style=solid]
 "43R679" [label="R679", fillcolor=3, shape=diamond, style=filled]
  44 [label="State 44\n\l681 storage-class-specifier: \"mutable\" •\l"]
  44 -> "44R681" [style=solid]
 "44R681" [label="R681", fillcolor=3, shape=diamond, style=filled]
  45 [label="State 45\n\l264 explicit-instantiation: EXTERN-opt • \"template\" declaration\l"]
  45 -> 148 [style=solid label="\"template\""]
  46 [label="State 46\n\l443 named-namespace-definition: INLINE-opt • \"namespace\" attribute-specifier-seq-opt IDENTIFIER \"{\" namespace-body \"}\"\l754 unnamed-namespace-definition: INLINE-opt • \"namespace\" attribute-specifier-seq-opt \"{\" namespace-body \"}\"\l"]
  46 -> 149 [style=solid label="\"namespace\""]
  47 [label="State 47\n\l114 block-declaration: alias-declaration •\l"]
  47 -> "47R114" [style=solid]
 "47R114" [label="R114", fillcolor=3, shape=diamond, style=filled]
  48 [label="State 48\n\l108 block-declaration: asm-declaration •\l"]
  48 -> "48R108" [style=solid]
 "48R108" [label="R108", fillcolor=3, shape=diamond, style=filled]
  49 [label="State 49\n\l204 declaration: attribute-declaration •\l"]
  49 -> "49R204" [style=solid]
 "49R204" [label="R204", fillcolor=3, shape=diamond, style=filled]
  50 [label="State 50\n\l 71 attribute-declaration: attribute-specifier-seq • \";\"\l 84 attribute-specifier-seq-opt: attribute-specifier-seq •\l641 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list \";\"\l"]
  50 -> 1 [style=solid label="\"constexpr\""]
  50 -> 150 [style=solid label="\"extern\""]
  50 -> 4 [style=solid label="IDENTIFIER"]
  50 -> 151 [style=solid label="\"inline\""]
  50 -> 6 [style=solid label="\"::\""]
  50 -> 8 [style=solid label="\"typename\""]
  50 -> 9 [style=solid label="\"virtual\""]
  50 -> 152 [style=solid label="\";\""]
  50 -> 12 [style=solid label="\"class\""]
  50 -> 13 [style=solid label="\"struct\""]
  50 -> 14 [style=solid label="\"union\""]
  50 -> 15 [style=solid label="\"const\""]
  50 -> 16 [style=solid label="\"volatile\""]
  50 -> 17 [style=solid label="\"friend\""]
  50 -> 18 [style=solid label="\"typedef\""]
  50 -> 19 [style=solid label="\"consteval\""]
  50 -> 20 [style=solid label="\"constinit\""]
  50 -> 21 [style=solid label="\"decltype\""]
  50 -> 22 [style=solid label="\"enum\""]
  50 -> 23 [style=solid label="\"explicit\""]
  50 -> 27 [style=solid label="\"char\""]
  50 -> 28 [style=solid label="\"char8_t\""]
  50 -> 29 [style=solid label="\"char16_t\""]
  50 -> 30 [style=solid label="\"char32_t\""]
  50 -> 31 [style=solid label="\"wchar_t\""]
  50 -> 32 [style=solid label="\"bool\""]
  50 -> 33 [style=solid label="\"short\""]
  50 -> 34 [style=solid label="\"int\""]
  50 -> 35 [style=solid label="\"long\""]
  50 -> 36 [style=solid label="\"signed\""]
  50 -> 37 [style=solid label="\"unsigned\""]
  50 -> 38 [style=solid label="\"float\""]
  50 -> 39 [style=solid label="\"double\""]
  50 -> 40 [style=solid label="\"void\""]
  50 -> 42 [style=solid label="\"static\""]
  50 -> 43 [style=solid label="\"thread_local\""]
  50 -> 44 [style=solid label="\"mutable\""]
  50 -> 53 [style=dashed label="class-head"]
  50 -> 54 [style=dashed label="class-key"]
  50 -> 55 [style=dashed label="class-name"]
  50 -> 56 [style=dashed label="class-specifier"]
  50 -> 57 [style=dashed label="cv-qualifier"]
  50 -> 58 [style=dashed label="decl-specifier"]
  50 -> 153 [style=dashed label="decl-specifier-seq"]
  50 -> 63 [style=dashed label="decltype-specifier"]
  50 -> 65 [style=dashed label="defining-type-specifier"]
  50 -> 66 [style=dashed label="elaborated-enum-specifier"]
  50 -> 67 [style=dashed label="elaborated-type-specifier"]
  50 -> 69 [style=dashed label="enum-head"]
  50 -> 154 [style=dashed label="enum-key"]
  50 -> 71 [style=dashed label="enum-name"]
  50 -> 72 [style=dashed label="enum-specifier"]
  50 -> 155 [style=dashed label="explicit-specifier"]
  50 -> 79 [style=dashed label="function-specifier"]
  50 -> 85 [style=dashed label="namespace-alias"]
  50 -> 88 [style=dashed label="namespace-name"]
  50 -> 89 [style=dashed label="nested-name-specifier"]
  50 -> 90 [style=dashed label="nested-name-specifier-opt"]
  50 -> 94 [style=dashed label="placeholder-type-specifier"]
  50 -> 96 [style=dashed label="simple-template-id"]
  50 -> 97 [style=dashed label="simple-type-specifier"]
  50 -> 99 [style=dashed label="storage-class-specifier"]
  50 -> 102 [style=dashed label="template-name"]
  50 -> 104 [style=dashed label="type-constraint"]
  50 -> 105 [style=dashed label="type-constraint-opt"]
  50 -> 106 [style=dashed label="type-name"]
  50 -> 107 [style=dashed label="type-specifier"]
  50 -> 108 [style=dashed label="typedef-name"]
  50 -> 109 [style=dashed label="typename-specifier"]
  50 -> "50R84d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "50R84d" [label="R84", fillcolor=5, shape=diamond, style=filled]
  50 -> "50R84" [style=solid]
 "50R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  50 -> "50R458d" [label="[IDENTIFIER]", style=solid]
 "50R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  50 -> "50R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "50R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  51 [label="State 51\n\l 49 asm-declaration: attribute-specifier-seq-opt • \"asm\" \"(\" string-literal \")\" \";\"\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l327 function-definition: attribute-specifier-seq-opt • decl-specifier-seq-opt declarator virt-specifier-seq-opt function-body\l328                    | attribute-specifier-seq-opt • decl-specifier-seq-opt declarator requires-clause function-body\l476 nodeclspec-function-declaration: attribute-specifier-seq-opt • declarator \";\"\l642 simple-declaration: attribute-specifier-seq-opt • decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" initializer \";\"\l767 using-directive: attribute-specifier-seq-opt • \"using\" \"namespace\" nested-name-specifier-opt namespace-name \";\"\l"]
  51 -> 1 [style=solid label="\"constexpr\""]
  51 -> 156 [style=solid label="\"...\""]
  51 -> 150 [style=solid label="\"extern\""]
  51 -> 4 [style=solid label="IDENTIFIER"]
  51 -> 151 [style=solid label="\"inline\""]
  51 -> 6 [style=solid label="\"::\""]
  51 -> 8 [style=solid label="\"typename\""]
  51 -> 9 [style=solid label="\"virtual\""]
  51 -> 157 [style=solid label="\"using\""]
  51 -> 158 [style=solid label="\"alignas\""]
  51 -> 159 [style=solid label="\"(\""]
  51 -> 160 [style=solid label="\"&\""]
  51 -> 161 [style=solid label="\"asm\""]
  51 -> 162 [style=solid label="\"[\""]
  51 -> 12 [style=solid label="\"class\""]
  51 -> 13 [style=solid label="\"struct\""]
  51 -> 14 [style=solid label="\"union\""]
  51 -> 163 [style=solid label="\"&&\""]
  51 -> 15 [style=solid label="\"const\""]
  51 -> 16 [style=solid label="\"volatile\""]
  51 -> 17 [style=solid label="\"friend\""]
  51 -> 18 [style=solid label="\"typedef\""]
  51 -> 19 [style=solid label="\"consteval\""]
  51 -> 20 [style=solid label="\"constinit\""]
  51 -> 21 [style=solid label="\"decltype\""]
  51 -> 22 [style=solid label="\"enum\""]
  51 -> 23 [style=solid label="\"explicit\""]
  51 -> 164 [style=solid label="\"*\""]
  51 -> 27 [style=solid label="\"char\""]
  51 -> 28 [style=solid label="\"char8_t\""]
  51 -> 29 [style=solid label="\"char16_t\""]
  51 -> 30 [style=solid label="\"char32_t\""]
  51 -> 31 [style=solid label="\"wchar_t\""]
  51 -> 32 [style=solid label="\"bool\""]
  51 -> 33 [style=solid label="\"short\""]
  51 -> 34 [style=solid label="\"int\""]
  51 -> 35 [style=solid label="\"long\""]
  51 -> 36 [style=solid label="\"signed\""]
  51 -> 37 [style=solid label="\"unsigned\""]
  51 -> 38 [style=solid label="\"float\""]
  51 -> 39 [style=solid label="\"double\""]
  51 -> 40 [style=solid label="\"void\""]
  51 -> 42 [style=solid label="\"static\""]
  51 -> 43 [style=solid label="\"thread_local\""]
  51 -> 44 [style=solid label="\"mutable\""]
  51 -> 165 [style=dashed label="ELLIPSIS-opt"]
  51 -> 166 [style=dashed label="alignment-specifier"]
  51 -> 167 [style=dashed label="attribute-specifier"]
  51 -> 53 [style=dashed label="class-head"]
  51 -> 54 [style=dashed label="class-key"]
  51 -> 55 [style=dashed label="class-name"]
  51 -> 56 [style=dashed label="class-specifier"]
  51 -> 57 [style=dashed label="cv-qualifier"]
  51 -> 58 [style=dashed label="decl-specifier"]
  51 -> 168 [style=dashed label="decl-specifier-seq"]
  51 -> 169 [style=dashed label="decl-specifier-seq-opt"]
  51 -> 170 [style=dashed label="declarator"]
  51 -> 171 [style=dashed label="declarator-id"]
  51 -> 63 [style=dashed label="decltype-specifier"]
  51 -> 65 [style=dashed label="defining-type-specifier"]
  51 -> 66 [style=dashed label="elaborated-enum-specifier"]
  51 -> 67 [style=dashed label="elaborated-type-specifier"]
  51 -> 69 [style=dashed label="enum-head"]
  51 -> 154 [style=dashed label="enum-key"]
  51 -> 71 [style=dashed label="enum-name"]
  51 -> 72 [style=dashed label="enum-specifier"]
  51 -> 155 [style=dashed label="explicit-specifier"]
  51 -> 79 [style=dashed label="function-specifier"]
  51 -> 85 [style=dashed label="namespace-alias"]
  51 -> 88 [style=dashed label="namespace-name"]
  51 -> 172 [style=dashed label="nested-name-specifier"]
  51 -> 90 [style=dashed label="nested-name-specifier-opt"]
  51 -> 173 [style=dashed label="noptr-declarator"]
  51 -> 94 [style=dashed label="placeholder-type-specifier"]
  51 -> 174 [style=dashed label="ptr-declarator"]
  51 -> 175 [style=dashed label="ptr-operator"]
  51 -> 96 [style=dashed label="simple-template-id"]
  51 -> 97 [style=dashed label="simple-type-specifier"]
  51 -> 99 [style=dashed label="storage-class-specifier"]
  51 -> 102 [style=dashed label="template-name"]
  51 -> 104 [style=dashed label="type-constraint"]
  51 -> 105 [style=dashed label="type-constraint-opt"]
  51 -> 106 [style=dashed label="type-name"]
  51 -> 107 [style=dashed label="type-specifier"]
  51 -> 108 [style=dashed label="typedef-name"]
  51 -> 109 [style=dashed label="typename-specifier"]
  51 -> "51R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "51R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  51 -> "51R5" [style=solid]
 "51R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  51 -> "51R191d" [label="[\"...\", IDENTIFIER, \"::\", \"(\", \"&\", \"&&\", \"operator\", \"decltype\", \"*\", \"~\"]", style=solid]
 "51R191d" [label="R191", fillcolor=5, shape=diamond, style=filled]
  51 -> "51R458d" [label="[IDENTIFIER]", style=solid]
 "51R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  51 -> "51R710d" [label="[\"decltype\"]", style=solid]
 "51R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  51 -> "51R710" [label="[\"auto\"]", style=solid]
 "51R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  52 [label="State 52\n\l193 declaration: block-declaration •\l"]
  52 -> "52R193" [style=solid]
 "52R193" [label="R193", fillcolor=3, shape=diamond, style=filled]
  53 [label="State 53\n\l142 class-specifier: class-head • \"{\" member-specification-opt \"}\"\l"]
  53 -> 176 [style=solid label="\"{\""]
  54 [label="State 54\n\l131 class-head: class-key • attribute-specifier-seq-opt class-head-name class-virt-specifier-opt base-clause-opt\l132           | class-key • attribute-specifier-seq-opt base-clause-opt\l229 elaborated-type-specifier: class-key • attribute-specifier-seq-opt nested-name-specifier-opt IDENTIFIER\l230                          | class-key • simple-template-id\l231                          | class-key • nested-name-specifier TEMPLATE-opt simple-template-id\l"]
  54 -> 4 [style=solid label="IDENTIFIER"]
  54 -> 6 [style=solid label="\"::\""]
  54 -> 21 [style=solid label="\"decltype\""]
  54 -> 177 [style=dashed label="attribute-specifier-seq"]
  54 -> 178 [style=dashed label="attribute-specifier-seq-opt"]
  54 -> 55 [style=dashed label="class-name"]
  54 -> 121 [style=dashed label="decltype-specifier"]
  54 -> 71 [style=dashed label="enum-name"]
  54 -> 85 [style=dashed label="namespace-alias"]
  54 -> 88 [style=dashed label="namespace-name"]
  54 -> 179 [style=dashed label="nested-name-specifier"]
  54 -> 180 [style=dashed label="simple-template-id"]
  54 -> 102 [style=dashed label="template-name"]
  54 -> 106 [style=dashed label="type-name"]
  54 -> 108 [style=dashed label="typedef-name"]
  54 -> "54R83d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "54R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  54 -> "54R83" [style=solid]
 "54R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  55 [label="State 55\n\l713 type-name: class-name •\l"]
  55 -> "55R713" [style=solid]
 "55R713" [label="R713", fillcolor=3, shape=diamond, style=filled]
  56 [label="State 56\n\l218 defining-type-specifier: class-specifier •\l"]
  56 -> "56R218" [style=solid]
 "56R218" [label="R218", fillcolor=3, shape=diamond, style=filled]
  57 [label="State 57\n\l728 type-specifier: cv-qualifier •\l"]
  57 -> "57R728" [style=solid]
 "57R728" [label="R728", fillcolor=3, shape=diamond, style=filled]
  58 [label="State 58\n\l189 decl-specifier-seq: decl-specifier • attribute-specifier-seq-opt\l190                   | decl-specifier • decl-specifier-seq\l"]
  58 -> 1 [style=solid label="\"constexpr\""]
  58 -> 150 [style=solid label="\"extern\""]
  58 -> 4 [style=solid label="IDENTIFIER"]
  58 -> 151 [style=solid label="\"inline\""]
  58 -> 6 [style=solid label="\"::\""]
  58 -> 8 [style=solid label="\"typename\""]
  58 -> 9 [style=solid label="\"virtual\""]
  58 -> 12 [style=solid label="\"class\""]
  58 -> 13 [style=solid label="\"struct\""]
  58 -> 14 [style=solid label="\"union\""]
  58 -> 15 [style=solid label="\"const\""]
  58 -> 16 [style=solid label="\"volatile\""]
  58 -> 17 [style=solid label="\"friend\""]
  58 -> 18 [style=solid label="\"typedef\""]
  58 -> 19 [style=solid label="\"consteval\""]
  58 -> 20 [style=solid label="\"constinit\""]
  58 -> 21 [style=solid label="\"decltype\""]
  58 -> 22 [style=solid label="\"enum\""]
  58 -> 23 [style=solid label="\"explicit\""]
  58 -> 27 [style=solid label="\"char\""]
  58 -> 28 [style=solid label="\"char8_t\""]
  58 -> 29 [style=solid label="\"char16_t\""]
  58 -> 30 [style=solid label="\"char32_t\""]
  58 -> 31 [style=solid label="\"wchar_t\""]
  58 -> 32 [style=solid label="\"bool\""]
  58 -> 33 [style=solid label="\"short\""]
  58 -> 34 [style=solid label="\"int\""]
  58 -> 35 [style=solid label="\"long\""]
  58 -> 36 [style=solid label="\"signed\""]
  58 -> 37 [style=solid label="\"unsigned\""]
  58 -> 38 [style=solid label="\"float\""]
  58 -> 39 [style=solid label="\"double\""]
  58 -> 40 [style=solid label="\"void\""]
  58 -> 42 [style=solid label="\"static\""]
  58 -> 43 [style=solid label="\"thread_local\""]
  58 -> 44 [style=solid label="\"mutable\""]
  58 -> 177 [style=dashed label="attribute-specifier-seq"]
  58 -> 181 [style=dashed label="attribute-specifier-seq-opt"]
  58 -> 53 [style=dashed label="class-head"]
  58 -> 54 [style=dashed label="class-key"]
  58 -> 55 [style=dashed label="class-name"]
  58 -> 56 [style=dashed label="class-specifier"]
  58 -> 57 [style=dashed label="cv-qualifier"]
  58 -> 58 [style=dashed label="decl-specifier"]
  58 -> 182 [style=dashed label="decl-specifier-seq"]
  58 -> 63 [style=dashed label="decltype-specifier"]
  58 -> 65 [style=dashed label="defining-type-specifier"]
  58 -> 66 [style=dashed label="elaborated-enum-specifier"]
  58 -> 67 [style=dashed label="elaborated-type-specifier"]
  58 -> 69 [style=dashed label="enum-head"]
  58 -> 154 [style=dashed label="enum-key"]
  58 -> 71 [style=dashed label="enum-name"]
  58 -> 72 [style=dashed label="enum-specifier"]
  58 -> 155 [style=dashed label="explicit-specifier"]
  58 -> 79 [style=dashed label="function-specifier"]
  58 -> 85 [style=dashed label="namespace-alias"]
  58 -> 88 [style=dashed label="namespace-name"]
  58 -> 89 [style=dashed label="nested-name-specifier"]
  58 -> 90 [style=dashed label="nested-name-specifier-opt"]
  58 -> 94 [style=dashed label="placeholder-type-specifier"]
  58 -> 96 [style=dashed label="simple-template-id"]
  58 -> 97 [style=dashed label="simple-type-specifier"]
  58 -> 99 [style=dashed label="storage-class-specifier"]
  58 -> 102 [style=dashed label="template-name"]
  58 -> 104 [style=dashed label="type-constraint"]
  58 -> 105 [style=dashed label="type-constraint-opt"]
  58 -> 106 [style=dashed label="type-name"]
  58 -> 107 [style=dashed label="type-specifier"]
  58 -> 108 [style=dashed label="typedef-name"]
  58 -> 109 [style=dashed label="typename-specifier"]
  58 -> "58R83d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "58R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  58 -> "58R83" [style=solid]
 "58R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  58 -> "58R458d" [label="[IDENTIFIER]", style=solid]
 "58R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  58 -> "58R710d" [label="[\"decltype\"]", style=solid]
 "58R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  58 -> "58R710" [label="[\"auto\"]", style=solid]
 "58R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  59 [label="State 59\n\l640 simple-declaration: decl-specifier-seq • init-declarator-list-opt \";\"\l"]
  59 -> 156 [style=solid label="\"...\""]
  59 -> 4 [style=solid label="IDENTIFIER"]
  59 -> 6 [style=solid label="\"::\""]
  59 -> 159 [style=solid label="\"(\""]
  59 -> 160 [style=solid label="\"&\""]
  59 -> 163 [style=solid label="\"&&\""]
  59 -> 21 [style=solid label="\"decltype\""]
  59 -> 164 [style=solid label="\"*\""]
  59 -> 165 [style=dashed label="ELLIPSIS-opt"]
  59 -> 55 [style=dashed label="class-name"]
  59 -> 183 [style=dashed label="declarator"]
  59 -> 171 [style=dashed label="declarator-id"]
  59 -> 121 [style=dashed label="decltype-specifier"]
  59 -> 71 [style=dashed label="enum-name"]
  59 -> 184 [style=dashed label="init-declarator"]
  59 -> 185 [style=dashed label="init-declarator-list"]
  59 -> 186 [style=dashed label="init-declarator-list-opt"]
  59 -> 85 [style=dashed label="namespace-alias"]
  59 -> 88 [style=dashed label="namespace-name"]
  59 -> 187 [style=dashed label="nested-name-specifier"]
  59 -> 173 [style=dashed label="noptr-declarator"]
  59 -> 174 [style=dashed label="ptr-declarator"]
  59 -> 175 [style=dashed label="ptr-operator"]
  59 -> 96 [style=dashed label="simple-template-id"]
  59 -> 102 [style=dashed label="template-name"]
  59 -> 106 [style=dashed label="type-name"]
  59 -> 108 [style=dashed label="typedef-name"]
  59 -> "59R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "59R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  59 -> "59R5" [style=solid]
 "59R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  59 -> "59R352" [label="[\";\"]", style=solid]
 "59R352" [label="R352", fillcolor=3, shape=diamond, style=filled]
  60 [label="State 60\n\l206 declaration-seq: declaration •\l"]
  60 -> "60R206" [style=solid]
 "60R206" [label="R206", fillcolor=3, shape=diamond, style=filled]
  61 [label="State 61\n\l207 declaration-seq: declaration-seq • declaration\l209 declaration-seq-opt: declaration-seq •\l"]
  61 -> 1 [style=solid label="\"constexpr\""]
  61 -> 2 [style=solid label="\"export\""]
  61 -> 3 [style=solid label="\"extern\""]
  61 -> 4 [style=solid label="IDENTIFIER"]
  61 -> 5 [style=solid label="\"inline\""]
  61 -> 6 [style=solid label="\"::\""]
  61 -> 7 [style=solid label="\"template\""]
  61 -> 8 [style=solid label="\"typename\""]
  61 -> 9 [style=solid label="\"virtual\""]
  61 -> 10 [style=solid label="\"using\""]
  61 -> 11 [style=solid label="\";\""]
  61 -> 12 [style=solid label="\"class\""]
  61 -> 13 [style=solid label="\"struct\""]
  61 -> 14 [style=solid label="\"union\""]
  61 -> 15 [style=solid label="\"const\""]
  61 -> 16 [style=solid label="\"volatile\""]
  61 -> 17 [style=solid label="\"friend\""]
  61 -> 18 [style=solid label="\"typedef\""]
  61 -> 19 [style=solid label="\"consteval\""]
  61 -> 20 [style=solid label="\"constinit\""]
  61 -> 21 [style=solid label="\"decltype\""]
  61 -> 22 [style=solid label="\"enum\""]
  61 -> 23 [style=solid label="\"explicit\""]
  61 -> 25 [style=solid label="\"import\""]
  61 -> 26 [style=solid label="\"namespace\""]
  61 -> 27 [style=solid label="\"char\""]
  61 -> 28 [style=solid label="\"char8_t\""]
  61 -> 29 [style=solid label="\"char16_t\""]
  61 -> 30 [style=solid label="\"char32_t\""]
  61 -> 31 [style=solid label="\"wchar_t\""]
  61 -> 32 [style=solid label="\"bool\""]
  61 -> 33 [style=solid label="\"short\""]
  61 -> 34 [style=solid label="\"int\""]
  61 -> 35 [style=solid label="\"long\""]
  61 -> 36 [style=solid label="\"signed\""]
  61 -> 37 [style=solid label="\"unsigned\""]
  61 -> 38 [style=solid label="\"float\""]
  61 -> 39 [style=solid label="\"double\""]
  61 -> 40 [style=solid label="\"void\""]
  61 -> 41 [style=solid label="\"static_assert\""]
  61 -> 42 [style=solid label="\"static\""]
  61 -> 43 [style=solid label="\"thread_local\""]
  61 -> 44 [style=solid label="\"mutable\""]
  61 -> 45 [style=dashed label="EXTERN-opt"]
  61 -> 46 [style=dashed label="INLINE-opt"]
  61 -> 47 [style=dashed label="alias-declaration"]
  61 -> 48 [style=dashed label="asm-declaration"]
  61 -> 49 [style=dashed label="attribute-declaration"]
  61 -> 50 [style=dashed label="attribute-specifier-seq"]
  61 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  61 -> 52 [style=dashed label="block-declaration"]
  61 -> 53 [style=dashed label="class-head"]
  61 -> 54 [style=dashed label="class-key"]
  61 -> 55 [style=dashed label="class-name"]
  61 -> 56 [style=dashed label="class-specifier"]
  61 -> 57 [style=dashed label="cv-qualifier"]
  61 -> 58 [style=dashed label="decl-specifier"]
  61 -> 59 [style=dashed label="decl-specifier-seq"]
  61 -> 188 [style=dashed label="declaration"]
  61 -> 63 [style=dashed label="decltype-specifier"]
  61 -> 64 [style=dashed label="deduction-guide"]
  61 -> 65 [style=dashed label="defining-type-specifier"]
  61 -> 66 [style=dashed label="elaborated-enum-specifier"]
  61 -> 67 [style=dashed label="elaborated-type-specifier"]
  61 -> 68 [style=dashed label="empty-declaration"]
  61 -> 69 [style=dashed label="enum-head"]
  61 -> 70 [style=dashed label="enum-key"]
  61 -> 71 [style=dashed label="enum-name"]
  61 -> 72 [style=dashed label="enum-specifier"]
  61 -> 73 [style=dashed label="explicit-instantiation"]
  61 -> 74 [style=dashed label="explicit-specialization"]
  61 -> 75 [style=dashed label="explicit-specifier"]
  61 -> 76 [style=dashed label="explicit-specifier-opt"]
  61 -> 77 [style=dashed label="export-declaration"]
  61 -> 78 [style=dashed label="function-definition"]
  61 -> 79 [style=dashed label="function-specifier"]
  61 -> 82 [style=dashed label="linkage-specification"]
  61 -> 83 [style=dashed label="module-import-declaration"]
  61 -> 84 [style=dashed label="named-namespace-definition"]
  61 -> 85 [style=dashed label="namespace-alias"]
  61 -> 86 [style=dashed label="namespace-alias-definition"]
  61 -> 87 [style=dashed label="namespace-definition"]
  61 -> 88 [style=dashed label="namespace-name"]
  61 -> 89 [style=dashed label="nested-name-specifier"]
  61 -> 90 [style=dashed label="nested-name-specifier-opt"]
  61 -> 91 [style=dashed label="nested-namespace-definition"]
  61 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  61 -> 93 [style=dashed label="opaque-enum-declaration"]
  61 -> 94 [style=dashed label="placeholder-type-specifier"]
  61 -> 95 [style=dashed label="simple-declaration"]
  61 -> 96 [style=dashed label="simple-template-id"]
  61 -> 97 [style=dashed label="simple-type-specifier"]
  61 -> 98 [style=dashed label="static_assert-declaration"]
  61 -> 99 [style=dashed label="storage-class-specifier"]
  61 -> 100 [style=dashed label="template-declaration"]
  61 -> 101 [style=dashed label="template-head"]
  61 -> 102 [style=dashed label="template-name"]
  61 -> 104 [style=dashed label="type-constraint"]
  61 -> 105 [style=dashed label="type-constraint-opt"]
  61 -> 106 [style=dashed label="type-name"]
  61 -> 107 [style=dashed label="type-specifier"]
  61 -> 108 [style=dashed label="typedef-name"]
  61 -> 109 [style=dashed label="typename-specifier"]
  61 -> 110 [style=dashed label="unnamed-namespace-definition"]
  61 -> 111 [style=dashed label="using-declaration"]
  61 -> 112 [style=dashed label="using-directive"]
  61 -> 113 [style=dashed label="using-enum-declaration"]
  61 -> "61R9d" [label="[\"template\"]", style=solid]
 "61R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  61 -> "61R13d" [label="[\"namespace\"]", style=solid]
 "61R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  61 -> "61R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "61R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  61 -> "61R83" [label="[]", style=solid]
 "61R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  61 -> "61R209d" [label="[\"export\"]", style=solid]
 "61R209d" [label="R209", fillcolor=5, shape=diamond, style=filled]
  61 -> "61R209" [label="[$end, \"}\", \"module\"]", style=solid]
 "61R209" [label="R209", fillcolor=3, shape=diamond, style=filled]
  61 -> "61R268d" [label="[IDENTIFIER]", style=solid]
 "61R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  61 -> "61R458d" [label="[IDENTIFIER]", style=solid]
 "61R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  61 -> "61R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "61R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  62 [label="State 62\n\l705 translation-unit: declaration-seq-opt •\l"]
  62 -> "62R705" [style=solid]
 "62R705" [label="R705", fillcolor=3, shape=diamond, style=filled]
  63 [label="State 63\n\l455 nested-name-specifier: decltype-specifier • \"::\"\l647 simple-type-specifier: decltype-specifier •\l"]
  63 -> 189 [style=solid label="\"::\""]
  63 -> "63R647d" [label="[\"::\"]", style=solid]
 "63R647d" [label="R647", fillcolor=5, shape=diamond, style=filled]
  63 -> "63R647" [style=solid]
 "63R647" [label="R647", fillcolor=3, shape=diamond, style=filled]
  64 [label="State 64\n\l197 declaration: deduction-guide •\l"]
  64 -> "64R197" [style=solid]
 "64R197" [label="R197", fillcolor=3, shape=diamond, style=filled]
  65 [label="State 65\n\l181 decl-specifier: defining-type-specifier •\l"]
  65 -> "65R181" [style=solid]
 "65R181" [label="R181", fillcolor=3, shape=diamond, style=filled]
  66 [label="State 66\n\l232 elaborated-type-specifier: elaborated-enum-specifier •\l"]
  66 -> "66R232" [style=solid]
 "66R232" [label="R232", fillcolor=3, shape=diamond, style=filled]
  67 [label="State 67\n\l726 type-specifier: elaborated-type-specifier •\l"]
  67 -> "67R726" [style=solid]
 "67R726" [label="R726", fillcolor=3, shape=diamond, style=filled]
  68 [label="State 68\n\l203 declaration: empty-declaration •\l"]
  68 -> "68R203" [style=solid]
 "68R203" [label="R203", fillcolor=3, shape=diamond, style=filled]
  69 [label="State 69\n\l247 enum-specifier: enum-head • \"{\" enumerator-list-opt \"}\"\l248               | enum-head • \"{\" enumerator-list \",\" \"}\"\l"]
  69 -> 190 [style=solid label="\"{\""]
  70 [label="State 70\n\l239 enum-head: enum-key • attribute-specifier-seq-opt enum-head-name-opt enum-base-opt\l496 opaque-enum-declaration: enum-key • attribute-specifier-seq-opt enum-head-name enum-base-opt \";\"\l"]
  70 -> 177 [style=dashed label="attribute-specifier-seq"]
  70 -> 191 [style=dashed label="attribute-specifier-seq-opt"]
  70 -> "70R83" [style=solid]
 "70R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  71 [label="State 71\n\l714 type-name: enum-name •\l"]
  71 -> "71R714" [style=solid]
 "71R714" [label="R714", fillcolor=3, shape=diamond, style=filled]
  72 [label="State 72\n\l219 defining-type-specifier: enum-specifier •\l"]
  72 -> "72R219" [style=solid]
 "72R219" [label="R219", fillcolor=3, shape=diamond, style=filled]
  73 [label="State 73\n\l198 declaration: explicit-instantiation •\l"]
  73 -> "73R198" [style=solid]
 "73R198" [label="R198", fillcolor=3, shape=diamond, style=filled]
  74 [label="State 74\n\l199 declaration: explicit-specialization •\l"]
  74 -> "74R199" [style=solid]
 "74R199" [label="R199", fillcolor=3, shape=diamond, style=filled]
  75 [label="State 75\n\l269 explicit-specifier-opt: explicit-specifier •\l330 function-specifier: explicit-specifier •\l"]
  75 -> "75R269" [label="[IDENTIFIER]", style=solid]
 "75R269" [label="R269", fillcolor=3, shape=diamond, style=filled]
  75 -> "75R330d" [label="[IDENTIFIER]", style=solid]
 "75R330d" [label="R330", fillcolor=5, shape=diamond, style=filled]
  75 -> "75R330" [style=solid]
 "75R330" [label="R330", fillcolor=3, shape=diamond, style=filled]
  76 [label="State 76\n\l215 deduction-guide: explicit-specifier-opt • template-name \"(\" parameter-declaration-clause \")\" \"->\" simple-template-id \";\"\l"]
  76 -> 192 [style=solid label="IDENTIFIER"]
  76 -> 193 [style=dashed label="template-name"]
  77 [label="State 77\n\l200 declaration: export-declaration •\l"]
  77 -> "77R200" [style=solid]
 "77R200" [label="R200", fillcolor=3, shape=diamond, style=filled]
  78 [label="State 78\n\l195 declaration: function-definition •\l"]
  78 -> "78R195" [style=solid]
 "78R195" [label="R195", fillcolor=3, shape=diamond, style=filled]
  79 [label="State 79\n\l182 decl-specifier: function-specifier •\l"]
  79 -> "79R182" [style=solid]
 "79R182" [label="R182", fillcolor=3, shape=diamond, style=filled]
  80 [label="State 80\n\l334 global-module-fragment-opt: global-module-fragment •\l"]
  80 -> "80R334" [style=solid]
 "80R334" [label="R334", fillcolor=3, shape=diamond, style=filled]
  81 [label="State 81\n\l706 translation-unit: global-module-fragment-opt • module-declaration declaration-seq-opt private-module-fragment-opt\l"]
  81 -> 194 [style=solid label="\"export\""]
  81 -> 195 [style=dashed label="EXPORT-opt"]
  81 -> 196 [style=dashed label="module-declaration"]
  81 -> "81R7" [style=solid]
 "81R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  82 [label="State 82\n\l201 declaration: linkage-specification •\l"]
  82 -> "82R201" [style=solid]
 "82R201" [label="R201", fillcolor=3, shape=diamond, style=filled]
  83 [label="State 83\n\l205 declaration: module-import-declaration •\l"]
  83 -> "83R205" [style=solid]
 "83R205" [label="R205", fillcolor=3, shape=diamond, style=filled]
  84 [label="State 84\n\l447 namespace-definition: named-namespace-definition •\l"]
  84 -> "84R447" [style=solid]
 "84R447" [label="R447", fillcolor=3, shape=diamond, style=filled]
  85 [label="State 85\n\l451 namespace-name: namespace-alias •\l"]
  85 -> "85R451" [style=solid]
 "85R451" [label="R451", fillcolor=3, shape=diamond, style=filled]
  86 [label="State 86\n\l109 block-declaration: namespace-alias-definition •\l"]
  86 -> "86R109" [style=solid]
 "86R109" [label="R109", fillcolor=3, shape=diamond, style=filled]
  87 [label="State 87\n\l202 declaration: namespace-definition •\l"]
  87 -> "87R202" [style=solid]
 "87R202" [label="R202", fillcolor=3, shape=diamond, style=filled]
  88 [label="State 88\n\l454 nested-name-specifier: namespace-name • \"::\"\l"]
  88 -> 197 [style=solid label="\"::\""]
  89 [label="State 89\n\l456 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l457                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l459 nested-name-specifier-opt: nested-name-specifier •\l646 simple-type-specifier: nested-name-specifier • \"template\" simple-template-id\l"]
  89 -> 198 [style=solid label="IDENTIFIER"]
  89 -> 199 [style=solid label="\"template\""]
  89 -> 200 [style=dashed label="TEMPLATE-opt"]
  89 -> "89R21d" [label="[IDENTIFIER]", style=solid]
 "89R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  89 -> "89R459d" [label="[IDENTIFIER]", style=solid]
 "89R459d" [label="R459", fillcolor=5, shape=diamond, style=filled]
  90 [label="State 90\n\l645 simple-type-specifier: nested-name-specifier-opt • type-name\l649                      | nested-name-specifier-opt • template-name\l708 type-constraint: nested-name-specifier-opt • concept-name\l709                | nested-name-specifier-opt • concept-name \"<\" template-argument-list-opt \">\"\l"]
  90 -> 201 [style=solid label="IDENTIFIER"]
  90 -> 55 [style=dashed label="class-name"]
  90 -> 202 [style=dashed label="concept-name"]
  90 -> 71 [style=dashed label="enum-name"]
  90 -> 96 [style=dashed label="simple-template-id"]
  90 -> 203 [style=dashed label="template-name"]
  90 -> 204 [style=dashed label="type-name"]
  90 -> 108 [style=dashed label="typedef-name"]
  91 [label="State 91\n\l449 namespace-definition: nested-namespace-definition •\l"]
  91 -> "91R449" [style=solid]
 "91R449" [label="R449", fillcolor=3, shape=diamond, style=filled]
  92 [label="State 92\n\l194 declaration: nodeclspec-function-declaration •\l"]
  92 -> "92R194" [style=solid]
 "92R194" [label="R194", fillcolor=3, shape=diamond, style=filled]
  93 [label="State 93\n\l115 block-declaration: opaque-enum-declaration •\l"]
  93 -> "93R115" [style=solid]
 "93R115" [label="R115", fillcolor=3, shape=diamond, style=filled]
  94 [label="State 94\n\l648 simple-type-specifier: placeholder-type-specifier •\l"]
  94 -> "94R648" [style=solid]
 "94R648" [label="R648", fillcolor=3, shape=diamond, style=filled]
  95 [label="State 95\n\l107 block-declaration: simple-declaration •\l"]
  95 -> "95R107" [style=solid]
 "95R107" [label="R107", fillcolor=3, shape=diamond, style=filled]
  96 [label="State 96\n\l138 class-name: simple-template-id •\l732 typedef-name: simple-template-id •\l"]
  96 -> "96R138" [style=solid]
 "96R138" [label="R138", fillcolor=3, shape=diamond, style=filled]
  96 -> "96R732d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "96R732d" [label="R732", fillcolor=5, shape=diamond, style=filled]
  97 [label="State 97\n\l725 type-specifier: simple-type-specifier •\l"]
  97 -> "97R725" [style=solid]
 "97R725" [label="R725", fillcolor=3, shape=diamond, style=filled]
  98 [label="State 98\n\l113 block-declaration: static_assert-declaration •\l"]
  98 -> "98R113" [style=solid]
 "98R113" [label="R113", fillcolor=3, shape=diamond, style=filled]
  99 [label="State 99\n\l180 decl-specifier: storage-class-specifier •\l"]
  99 -> "99R180" [style=solid]
 "99R180" [label="R180", fillcolor=3, shape=diamond, style=filled]
  100 [label="State 100\n\l196 declaration: template-declaration •\l"]
  100 -> "100R196" [style=solid]
 "100R196" [label="R196", fillcolor=3, shape=diamond, style=filled]
  101 [label="State 101\n\l690 template-declaration: template-head • declaration\l691                     | template-head • concept-definition\l"]
  101 -> 1 [style=solid label="\"constexpr\""]
  101 -> 2 [style=solid label="\"export\""]
  101 -> 3 [style=solid label="\"extern\""]
  101 -> 4 [style=solid label="IDENTIFIER"]
  101 -> 5 [style=solid label="\"inline\""]
  101 -> 6 [style=solid label="\"::\""]
  101 -> 7 [style=solid label="\"template\""]
  101 -> 8 [style=solid label="\"typename\""]
  101 -> 9 [style=solid label="\"virtual\""]
  101 -> 10 [style=solid label="\"using\""]
  101 -> 11 [style=solid label="\";\""]
  101 -> 12 [style=solid label="\"class\""]
  101 -> 13 [style=solid label="\"struct\""]
  101 -> 14 [style=solid label="\"union\""]
  101 -> 205 [style=solid label="\"concept\""]
  101 -> 15 [style=solid label="\"const\""]
  101 -> 16 [style=solid label="\"volatile\""]
  101 -> 17 [style=solid label="\"friend\""]
  101 -> 18 [style=solid label="\"typedef\""]
  101 -> 19 [style=solid label="\"consteval\""]
  101 -> 20 [style=solid label="\"constinit\""]
  101 -> 21 [style=solid label="\"decltype\""]
  101 -> 22 [style=solid label="\"enum\""]
  101 -> 23 [style=solid label="\"explicit\""]
  101 -> 25 [style=solid label="\"import\""]
  101 -> 26 [style=solid label="\"namespace\""]
  101 -> 27 [style=solid label="\"char\""]
  101 -> 28 [style=solid label="\"char8_t\""]
  101 -> 29 [style=solid label="\"char16_t\""]
  101 -> 30 [style=solid label="\"char32_t\""]
  101 -> 31 [style=solid label="\"wchar_t\""]
  101 -> 32 [style=solid label="\"bool\""]
  101 -> 33 [style=solid label="\"short\""]
  101 -> 34 [style=solid label="\"int\""]
  101 -> 35 [style=solid label="\"long\""]
  101 -> 36 [style=solid label="\"signed\""]
  101 -> 37 [style=solid label="\"unsigned\""]
  101 -> 38 [style=solid label="\"float\""]
  101 -> 39 [style=solid label="\"double\""]
  101 -> 40 [style=solid label="\"void\""]
  101 -> 41 [style=solid label="\"static_assert\""]
  101 -> 42 [style=solid label="\"static\""]
  101 -> 43 [style=solid label="\"thread_local\""]
  101 -> 44 [style=solid label="\"mutable\""]
  101 -> 45 [style=dashed label="EXTERN-opt"]
  101 -> 46 [style=dashed label="INLINE-opt"]
  101 -> 47 [style=dashed label="alias-declaration"]
  101 -> 48 [style=dashed label="asm-declaration"]
  101 -> 49 [style=dashed label="attribute-declaration"]
  101 -> 50 [style=dashed label="attribute-specifier-seq"]
  101 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  101 -> 52 [style=dashed label="block-declaration"]
  101 -> 53 [style=dashed label="class-head"]
  101 -> 54 [style=dashed label="class-key"]
  101 -> 55 [style=dashed label="class-name"]
  101 -> 56 [style=dashed label="class-specifier"]
  101 -> 206 [style=dashed label="concept-definition"]
  101 -> 57 [style=dashed label="cv-qualifier"]
  101 -> 58 [style=dashed label="decl-specifier"]
  101 -> 59 [style=dashed label="decl-specifier-seq"]
  101 -> 207 [style=dashed label="declaration"]
  101 -> 63 [style=dashed label="decltype-specifier"]
  101 -> 64 [style=dashed label="deduction-guide"]
  101 -> 65 [style=dashed label="defining-type-specifier"]
  101 -> 66 [style=dashed label="elaborated-enum-specifier"]
  101 -> 67 [style=dashed label="elaborated-type-specifier"]
  101 -> 68 [style=dashed label="empty-declaration"]
  101 -> 69 [style=dashed label="enum-head"]
  101 -> 70 [style=dashed label="enum-key"]
  101 -> 71 [style=dashed label="enum-name"]
  101 -> 72 [style=dashed label="enum-specifier"]
  101 -> 73 [style=dashed label="explicit-instantiation"]
  101 -> 74 [style=dashed label="explicit-specialization"]
  101 -> 75 [style=dashed label="explicit-specifier"]
  101 -> 76 [style=dashed label="explicit-specifier-opt"]
  101 -> 77 [style=dashed label="export-declaration"]
  101 -> 78 [style=dashed label="function-definition"]
  101 -> 79 [style=dashed label="function-specifier"]
  101 -> 82 [style=dashed label="linkage-specification"]
  101 -> 83 [style=dashed label="module-import-declaration"]
  101 -> 84 [style=dashed label="named-namespace-definition"]
  101 -> 85 [style=dashed label="namespace-alias"]
  101 -> 86 [style=dashed label="namespace-alias-definition"]
  101 -> 87 [style=dashed label="namespace-definition"]
  101 -> 88 [style=dashed label="namespace-name"]
  101 -> 89 [style=dashed label="nested-name-specifier"]
  101 -> 90 [style=dashed label="nested-name-specifier-opt"]
  101 -> 91 [style=dashed label="nested-namespace-definition"]
  101 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  101 -> 93 [style=dashed label="opaque-enum-declaration"]
  101 -> 94 [style=dashed label="placeholder-type-specifier"]
  101 -> 95 [style=dashed label="simple-declaration"]
  101 -> 96 [style=dashed label="simple-template-id"]
  101 -> 97 [style=dashed label="simple-type-specifier"]
  101 -> 98 [style=dashed label="static_assert-declaration"]
  101 -> 99 [style=dashed label="storage-class-specifier"]
  101 -> 100 [style=dashed label="template-declaration"]
  101 -> 101 [style=dashed label="template-head"]
  101 -> 102 [style=dashed label="template-name"]
  101 -> 104 [style=dashed label="type-constraint"]
  101 -> 105 [style=dashed label="type-constraint-opt"]
  101 -> 106 [style=dashed label="type-name"]
  101 -> 107 [style=dashed label="type-specifier"]
  101 -> 108 [style=dashed label="typedef-name"]
  101 -> 109 [style=dashed label="typename-specifier"]
  101 -> 110 [style=dashed label="unnamed-namespace-definition"]
  101 -> 111 [style=dashed label="using-declaration"]
  101 -> 112 [style=dashed label="using-directive"]
  101 -> 113 [style=dashed label="using-enum-declaration"]
  101 -> "101R9d" [label="[\"template\"]", style=solid]
 "101R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  101 -> "101R13d" [label="[\"namespace\"]", style=solid]
 "101R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  101 -> "101R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "101R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  101 -> "101R83" [label="[]", style=solid]
 "101R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  101 -> "101R268d" [label="[IDENTIFIER]", style=solid]
 "101R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  101 -> "101R458d" [label="[IDENTIFIER]", style=solid]
 "101R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  101 -> "101R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "101R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  102 [label="State 102\n\l644 simple-template-id: template-name • \"<\" template-argument-list-opt \">\"\l"]
  102 -> 208 [style=solid label="\"<\""]
  103 [label="State 103\n\l777 result: translation-unit •\l"]
  103 -> "103R777" [style=solid]
 "103R777" [label="R777", fillcolor=3, shape=diamond, style=filled]
  104 [label="State 104\n\l711 type-constraint-opt: type-constraint •\l"]
  104 -> "104R711" [style=solid]
 "104R711" [label="R711", fillcolor=3, shape=diamond, style=filled]
  105 [label="State 105\n\l554 placeholder-type-specifier: type-constraint-opt • \"auto\"\l555                           | type-constraint-opt • \"decltype\" \"(\" \"auto\" \")\"\l"]
  105 -> 209 [style=solid label="\"decltype\""]
  105 -> 210 [style=solid label="\"auto\""]
  106 [label="State 106\n\l453 nested-name-specifier: type-name • \"::\"\l"]
  106 -> 211 [style=solid label="\"::\""]
  107 [label="State 107\n\l217 defining-type-specifier: type-specifier •\l"]
  107 -> "107R217" [style=solid]
 "107R217" [label="R217", fillcolor=3, shape=diamond, style=filled]
  108 [label="State 108\n\l715 type-name: typedef-name •\l"]
  108 -> "108R715" [style=solid]
 "108R715" [label="R715", fillcolor=3, shape=diamond, style=filled]
  109 [label="State 109\n\l727 type-specifier: typename-specifier •\l"]
  109 -> "109R727" [style=solid]
 "109R727" [label="R727", fillcolor=3, shape=diamond, style=filled]
  110 [label="State 110\n\l448 namespace-definition: unnamed-namespace-definition •\l"]
  110 -> "110R448" [style=solid]
 "110R448" [label="R448", fillcolor=3, shape=diamond, style=filled]
  111 [label="State 111\n\l110 block-declaration: using-declaration •\l"]
  111 -> "111R110" [style=solid]
 "111R110" [label="R110", fillcolor=3, shape=diamond, style=filled]
  112 [label="State 112\n\l112 block-declaration: using-directive •\l"]
  112 -> "112R112" [style=solid]
 "112R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
  113 [label="State 113\n\l111 block-declaration: using-enum-declaration •\l"]
  113 -> "113R111" [style=solid]
 "113R111" [label="R111", fillcolor=3, shape=diamond, style=filled]
  114 [label="State 114\n\l  0 $accept: result • $end\l"]
  114 -> 212 [style=solid label="$end"]
  115 [label="State 115\n\l271 export-declaration: \"export\" \"{\" • declaration-seq-opt \"}\"\l"]
  115 -> 1 [style=solid label="\"constexpr\""]
  115 -> 2 [style=solid label="\"export\""]
  115 -> 3 [style=solid label="\"extern\""]
  115 -> 4 [style=solid label="IDENTIFIER"]
  115 -> 5 [style=solid label="\"inline\""]
  115 -> 6 [style=solid label="\"::\""]
  115 -> 7 [style=solid label="\"template\""]
  115 -> 8 [style=solid label="\"typename\""]
  115 -> 9 [style=solid label="\"virtual\""]
  115 -> 10 [style=solid label="\"using\""]
  115 -> 11 [style=solid label="\";\""]
  115 -> 12 [style=solid label="\"class\""]
  115 -> 13 [style=solid label="\"struct\""]
  115 -> 14 [style=solid label="\"union\""]
  115 -> 15 [style=solid label="\"const\""]
  115 -> 16 [style=solid label="\"volatile\""]
  115 -> 17 [style=solid label="\"friend\""]
  115 -> 18 [style=solid label="\"typedef\""]
  115 -> 19 [style=solid label="\"consteval\""]
  115 -> 20 [style=solid label="\"constinit\""]
  115 -> 21 [style=solid label="\"decltype\""]
  115 -> 22 [style=solid label="\"enum\""]
  115 -> 23 [style=solid label="\"explicit\""]
  115 -> 25 [style=solid label="\"import\""]
  115 -> 26 [style=solid label="\"namespace\""]
  115 -> 27 [style=solid label="\"char\""]
  115 -> 28 [style=solid label="\"char8_t\""]
  115 -> 29 [style=solid label="\"char16_t\""]
  115 -> 30 [style=solid label="\"char32_t\""]
  115 -> 31 [style=solid label="\"wchar_t\""]
  115 -> 32 [style=solid label="\"bool\""]
  115 -> 33 [style=solid label="\"short\""]
  115 -> 34 [style=solid label="\"int\""]
  115 -> 35 [style=solid label="\"long\""]
  115 -> 36 [style=solid label="\"signed\""]
  115 -> 37 [style=solid label="\"unsigned\""]
  115 -> 38 [style=solid label="\"float\""]
  115 -> 39 [style=solid label="\"double\""]
  115 -> 40 [style=solid label="\"void\""]
  115 -> 41 [style=solid label="\"static_assert\""]
  115 -> 42 [style=solid label="\"static\""]
  115 -> 43 [style=solid label="\"thread_local\""]
  115 -> 44 [style=solid label="\"mutable\""]
  115 -> 45 [style=dashed label="EXTERN-opt"]
  115 -> 46 [style=dashed label="INLINE-opt"]
  115 -> 47 [style=dashed label="alias-declaration"]
  115 -> 48 [style=dashed label="asm-declaration"]
  115 -> 49 [style=dashed label="attribute-declaration"]
  115 -> 50 [style=dashed label="attribute-specifier-seq"]
  115 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  115 -> 52 [style=dashed label="block-declaration"]
  115 -> 53 [style=dashed label="class-head"]
  115 -> 54 [style=dashed label="class-key"]
  115 -> 55 [style=dashed label="class-name"]
  115 -> 56 [style=dashed label="class-specifier"]
  115 -> 57 [style=dashed label="cv-qualifier"]
  115 -> 58 [style=dashed label="decl-specifier"]
  115 -> 59 [style=dashed label="decl-specifier-seq"]
  115 -> 60 [style=dashed label="declaration"]
  115 -> 61 [style=dashed label="declaration-seq"]
  115 -> 213 [style=dashed label="declaration-seq-opt"]
  115 -> 63 [style=dashed label="decltype-specifier"]
  115 -> 64 [style=dashed label="deduction-guide"]
  115 -> 65 [style=dashed label="defining-type-specifier"]
  115 -> 66 [style=dashed label="elaborated-enum-specifier"]
  115 -> 67 [style=dashed label="elaborated-type-specifier"]
  115 -> 68 [style=dashed label="empty-declaration"]
  115 -> 69 [style=dashed label="enum-head"]
  115 -> 70 [style=dashed label="enum-key"]
  115 -> 71 [style=dashed label="enum-name"]
  115 -> 72 [style=dashed label="enum-specifier"]
  115 -> 73 [style=dashed label="explicit-instantiation"]
  115 -> 74 [style=dashed label="explicit-specialization"]
  115 -> 75 [style=dashed label="explicit-specifier"]
  115 -> 76 [style=dashed label="explicit-specifier-opt"]
  115 -> 77 [style=dashed label="export-declaration"]
  115 -> 78 [style=dashed label="function-definition"]
  115 -> 79 [style=dashed label="function-specifier"]
  115 -> 82 [style=dashed label="linkage-specification"]
  115 -> 83 [style=dashed label="module-import-declaration"]
  115 -> 84 [style=dashed label="named-namespace-definition"]
  115 -> 85 [style=dashed label="namespace-alias"]
  115 -> 86 [style=dashed label="namespace-alias-definition"]
  115 -> 87 [style=dashed label="namespace-definition"]
  115 -> 88 [style=dashed label="namespace-name"]
  115 -> 89 [style=dashed label="nested-name-specifier"]
  115 -> 90 [style=dashed label="nested-name-specifier-opt"]
  115 -> 91 [style=dashed label="nested-namespace-definition"]
  115 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  115 -> 93 [style=dashed label="opaque-enum-declaration"]
  115 -> 94 [style=dashed label="placeholder-type-specifier"]
  115 -> 95 [style=dashed label="simple-declaration"]
  115 -> 96 [style=dashed label="simple-template-id"]
  115 -> 97 [style=dashed label="simple-type-specifier"]
  115 -> 98 [style=dashed label="static_assert-declaration"]
  115 -> 99 [style=dashed label="storage-class-specifier"]
  115 -> 100 [style=dashed label="template-declaration"]
  115 -> 101 [style=dashed label="template-head"]
  115 -> 102 [style=dashed label="template-name"]
  115 -> 104 [style=dashed label="type-constraint"]
  115 -> 105 [style=dashed label="type-constraint-opt"]
  115 -> 106 [style=dashed label="type-name"]
  115 -> 107 [style=dashed label="type-specifier"]
  115 -> 108 [style=dashed label="typedef-name"]
  115 -> 109 [style=dashed label="typename-specifier"]
  115 -> 110 [style=dashed label="unnamed-namespace-definition"]
  115 -> 111 [style=dashed label="using-declaration"]
  115 -> 112 [style=dashed label="using-directive"]
  115 -> 113 [style=dashed label="using-enum-declaration"]
  115 -> "115R9d" [label="[\"template\"]", style=solid]
 "115R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  115 -> "115R13d" [label="[\"namespace\"]", style=solid]
 "115R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  115 -> "115R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "115R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  115 -> "115R83" [label="[]", style=solid]
 "115R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  115 -> "115R208" [label="[\"}\"]", style=solid]
 "115R208" [label="R208", fillcolor=3, shape=diamond, style=filled]
  115 -> "115R268d" [label="[IDENTIFIER]", style=solid]
 "115R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  115 -> "115R458d" [label="[IDENTIFIER]", style=solid]
 "115R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  115 -> "115R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "115R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  116 [label="State 116\n\l270 export-declaration: \"export\" declaration •\l"]
  116 -> "116R270" [style=solid]
 "116R270" [label="R270", fillcolor=3, shape=diamond, style=filled]
  117 [label="State 117\n\l205 declaration: module-import-declaration •\l272 export-declaration: \"export\" module-import-declaration •\l"]
  117 -> "117R205" [style=solid]
 "117R205" [label="R205", fillcolor=3, shape=diamond, style=filled]
  117 -> "117R272d" [label="[$end, \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"template\", \"typename\", \"virtual\", \"private\", \"protected\", \"public\", \"using\", \";\", \"alignas\", \"(\", \"&\", \"asm\", \"[\", \":\", \"}\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"*\", \"module\", \"import\", \"namespace\", \"~\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "117R272d" [label="R272", fillcolor=5, shape=diamond, style=filled]
  118 [label="State 118\n\l682 string-literal: STRING_LITERAL •\l"]
  118 -> "118R682" [style=solid]
 "118R682" [label="R682", fillcolor=3, shape=diamond, style=filled]
  119 [label="State 119\n\l390 linkage-specification: \"extern\" string-literal • \"{\" declaration-seq-opt \"}\"\l391                      | \"extern\" string-literal • declaration\l"]
  119 -> 1 [style=solid label="\"constexpr\""]
  119 -> 2 [style=solid label="\"export\""]
  119 -> 3 [style=solid label="\"extern\""]
  119 -> 4 [style=solid label="IDENTIFIER"]
  119 -> 5 [style=solid label="\"inline\""]
  119 -> 6 [style=solid label="\"::\""]
  119 -> 7 [style=solid label="\"template\""]
  119 -> 8 [style=solid label="\"typename\""]
  119 -> 9 [style=solid label="\"virtual\""]
  119 -> 10 [style=solid label="\"using\""]
  119 -> 11 [style=solid label="\";\""]
  119 -> 214 [style=solid label="\"{\""]
  119 -> 12 [style=solid label="\"class\""]
  119 -> 13 [style=solid label="\"struct\""]
  119 -> 14 [style=solid label="\"union\""]
  119 -> 15 [style=solid label="\"const\""]
  119 -> 16 [style=solid label="\"volatile\""]
  119 -> 17 [style=solid label="\"friend\""]
  119 -> 18 [style=solid label="\"typedef\""]
  119 -> 19 [style=solid label="\"consteval\""]
  119 -> 20 [style=solid label="\"constinit\""]
  119 -> 21 [style=solid label="\"decltype\""]
  119 -> 22 [style=solid label="\"enum\""]
  119 -> 23 [style=solid label="\"explicit\""]
  119 -> 25 [style=solid label="\"import\""]
  119 -> 26 [style=solid label="\"namespace\""]
  119 -> 27 [style=solid label="\"char\""]
  119 -> 28 [style=solid label="\"char8_t\""]
  119 -> 29 [style=solid label="\"char16_t\""]
  119 -> 30 [style=solid label="\"char32_t\""]
  119 -> 31 [style=solid label="\"wchar_t\""]
  119 -> 32 [style=solid label="\"bool\""]
  119 -> 33 [style=solid label="\"short\""]
  119 -> 34 [style=solid label="\"int\""]
  119 -> 35 [style=solid label="\"long\""]
  119 -> 36 [style=solid label="\"signed\""]
  119 -> 37 [style=solid label="\"unsigned\""]
  119 -> 38 [style=solid label="\"float\""]
  119 -> 39 [style=solid label="\"double\""]
  119 -> 40 [style=solid label="\"void\""]
  119 -> 41 [style=solid label="\"static_assert\""]
  119 -> 42 [style=solid label="\"static\""]
  119 -> 43 [style=solid label="\"thread_local\""]
  119 -> 44 [style=solid label="\"mutable\""]
  119 -> 45 [style=dashed label="EXTERN-opt"]
  119 -> 46 [style=dashed label="INLINE-opt"]
  119 -> 47 [style=dashed label="alias-declaration"]
  119 -> 48 [style=dashed label="asm-declaration"]
  119 -> 49 [style=dashed label="attribute-declaration"]
  119 -> 50 [style=dashed label="attribute-specifier-seq"]
  119 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  119 -> 52 [style=dashed label="block-declaration"]
  119 -> 53 [style=dashed label="class-head"]
  119 -> 54 [style=dashed label="class-key"]
  119 -> 55 [style=dashed label="class-name"]
  119 -> 56 [style=dashed label="class-specifier"]
  119 -> 57 [style=dashed label="cv-qualifier"]
  119 -> 58 [style=dashed label="decl-specifier"]
  119 -> 59 [style=dashed label="decl-specifier-seq"]
  119 -> 215 [style=dashed label="declaration"]
  119 -> 63 [style=dashed label="decltype-specifier"]
  119 -> 64 [style=dashed label="deduction-guide"]
  119 -> 65 [style=dashed label="defining-type-specifier"]
  119 -> 66 [style=dashed label="elaborated-enum-specifier"]
  119 -> 67 [style=dashed label="elaborated-type-specifier"]
  119 -> 68 [style=dashed label="empty-declaration"]
  119 -> 69 [style=dashed label="enum-head"]
  119 -> 70 [style=dashed label="enum-key"]
  119 -> 71 [style=dashed label="enum-name"]
  119 -> 72 [style=dashed label="enum-specifier"]
  119 -> 73 [style=dashed label="explicit-instantiation"]
  119 -> 74 [style=dashed label="explicit-specialization"]
  119 -> 75 [style=dashed label="explicit-specifier"]
  119 -> 76 [style=dashed label="explicit-specifier-opt"]
  119 -> 77 [style=dashed label="export-declaration"]
  119 -> 78 [style=dashed label="function-definition"]
  119 -> 79 [style=dashed label="function-specifier"]
  119 -> 82 [style=dashed label="linkage-specification"]
  119 -> 83 [style=dashed label="module-import-declaration"]
  119 -> 84 [style=dashed label="named-namespace-definition"]
  119 -> 85 [style=dashed label="namespace-alias"]
  119 -> 86 [style=dashed label="namespace-alias-definition"]
  119 -> 87 [style=dashed label="namespace-definition"]
  119 -> 88 [style=dashed label="namespace-name"]
  119 -> 89 [style=dashed label="nested-name-specifier"]
  119 -> 90 [style=dashed label="nested-name-specifier-opt"]
  119 -> 91 [style=dashed label="nested-namespace-definition"]
  119 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  119 -> 93 [style=dashed label="opaque-enum-declaration"]
  119 -> 94 [style=dashed label="placeholder-type-specifier"]
  119 -> 95 [style=dashed label="simple-declaration"]
  119 -> 96 [style=dashed label="simple-template-id"]
  119 -> 97 [style=dashed label="simple-type-specifier"]
  119 -> 98 [style=dashed label="static_assert-declaration"]
  119 -> 99 [style=dashed label="storage-class-specifier"]
  119 -> 100 [style=dashed label="template-declaration"]
  119 -> 101 [style=dashed label="template-head"]
  119 -> 102 [style=dashed label="template-name"]
  119 -> 104 [style=dashed label="type-constraint"]
  119 -> 105 [style=dashed label="type-constraint-opt"]
  119 -> 106 [style=dashed label="type-name"]
  119 -> 107 [style=dashed label="type-specifier"]
  119 -> 108 [style=dashed label="typedef-name"]
  119 -> 109 [style=dashed label="typename-specifier"]
  119 -> 110 [style=dashed label="unnamed-namespace-definition"]
  119 -> 111 [style=dashed label="using-declaration"]
  119 -> 112 [style=dashed label="using-directive"]
  119 -> 113 [style=dashed label="using-enum-declaration"]
  119 -> "119R9d" [label="[\"template\"]", style=solid]
 "119R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  119 -> "119R13d" [label="[\"namespace\"]", style=solid]
 "119R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  119 -> "119R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "119R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  119 -> "119R83" [label="[]", style=solid]
 "119R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  119 -> "119R268d" [label="[IDENTIFIER]", style=solid]
 "119R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  119 -> "119R458d" [label="[IDENTIFIER]", style=solid]
 "119R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  119 -> "119R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "119R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  120 [label="State 120\n\l265 explicit-specialization: \"template\" \"<\" • \">\" declaration\l692 template-head: \"template\" \"<\" • template-parameter-list \">\" requires-clause-opt\l"]
  120 -> 4 [style=solid label="IDENTIFIER"]
  120 -> 6 [style=solid label="\"::\""]
  120 -> 216 [style=solid label="\"template\""]
  120 -> 217 [style=solid label="\"typename\""]
  120 -> 218 [style=solid label="\"class\""]
  120 -> 21 [style=solid label="\"decltype\""]
  120 -> 219 [style=solid label="\">\""]
  120 -> 177 [style=dashed label="attribute-specifier-seq"]
  120 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  120 -> 55 [style=dashed label="class-name"]
  120 -> 121 [style=dashed label="decltype-specifier"]
  120 -> 71 [style=dashed label="enum-name"]
  120 -> 85 [style=dashed label="namespace-alias"]
  120 -> 88 [style=dashed label="namespace-name"]
  120 -> 133 [style=dashed label="nested-name-specifier"]
  120 -> 221 [style=dashed label="nested-name-specifier-opt"]
  120 -> 222 [style=dashed label="parameter-declaration"]
  120 -> 96 [style=dashed label="simple-template-id"]
  120 -> 223 [style=dashed label="template-head"]
  120 -> 102 [style=dashed label="template-name"]
  120 -> 224 [style=dashed label="template-parameter"]
  120 -> 225 [style=dashed label="template-parameter-list"]
  120 -> 226 [style=dashed label="type-constraint"]
  120 -> 106 [style=dashed label="type-name"]
  120 -> 227 [style=dashed label="type-parameter"]
  120 -> 228 [style=dashed label="type-parameter-key"]
  120 -> 108 [style=dashed label="typedef-name"]
  120 -> "120R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"class\", \"decltype\"]", style=solid]
 "120R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  120 -> "120R83" [style=solid]
 "120R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  120 -> "120R458d" [label="[IDENTIFIER]", style=solid]
 "120R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  121 [label="State 121\n\l455 nested-name-specifier: decltype-specifier • \"::\"\l"]
  121 -> 189 [style=solid label="\"::\""]
  122 [label="State 122\n\l456 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l457                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l733 typename-specifier: \"typename\" nested-name-specifier • IDENTIFIER\l734                   | \"typename\" nested-name-specifier • TEMPLATE-opt simple-template-id\l"]
  122 -> 229 [style=solid label="IDENTIFIER"]
  122 -> 230 [style=solid label="\"template\""]
  122 -> 231 [style=dashed label="TEMPLATE-opt"]
  122 -> "122R21d" [label="[IDENTIFIER]", style=solid]
 "122R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  123 [label="State 123\n\l 44 alias-declaration: \"using\" IDENTIFIER • attribute-specifier-seq-opt \"=\" defining-type-id \";\"\l"]
  123 -> 177 [style=dashed label="attribute-specifier-seq"]
  123 -> 232 [style=dashed label="attribute-specifier-seq-opt"]
  123 -> "123R83" [style=solid]
 "123R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  124 [label="State 124\n\l 26 TYPENAME-opt: \"typename\" •\l"]
  124 -> "124R26" [style=solid]
 "124R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  125 [label="State 125\n\l228 elaborated-enum-specifier: \"enum\" • nested-name-specifier-opt IDENTIFIER\l"]
  125 -> 4 [style=solid label="IDENTIFIER"]
  125 -> 6 [style=solid label="\"::\""]
  125 -> 21 [style=solid label="\"decltype\""]
  125 -> 55 [style=dashed label="class-name"]
  125 -> 121 [style=dashed label="decltype-specifier"]
  125 -> 71 [style=dashed label="enum-name"]
  125 -> 85 [style=dashed label="namespace-alias"]
  125 -> 88 [style=dashed label="namespace-name"]
  125 -> 133 [style=dashed label="nested-name-specifier"]
  125 -> 134 [style=dashed label="nested-name-specifier-opt"]
  125 -> 96 [style=dashed label="simple-template-id"]
  125 -> 102 [style=dashed label="template-name"]
  125 -> 106 [style=dashed label="type-name"]
  125 -> 108 [style=dashed label="typedef-name"]
  125 -> "125R458d" [label="[IDENTIFIER]", style=solid]
 "125R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  126 [label="State 126\n\l764 using-declarator: TYPENAME-opt • nested-name-specifier unqualified-id\l"]
  126 -> 4 [style=solid label="IDENTIFIER"]
  126 -> 6 [style=solid label="\"::\""]
  126 -> 21 [style=solid label="\"decltype\""]
  126 -> 55 [style=dashed label="class-name"]
  126 -> 121 [style=dashed label="decltype-specifier"]
  126 -> 71 [style=dashed label="enum-name"]
  126 -> 85 [style=dashed label="namespace-alias"]
  126 -> 88 [style=dashed label="namespace-name"]
  126 -> 233 [style=dashed label="nested-name-specifier"]
  126 -> 96 [style=dashed label="simple-template-id"]
  126 -> 102 [style=dashed label="template-name"]
  126 -> 106 [style=dashed label="type-name"]
  126 -> 108 [style=dashed label="typedef-name"]
  127 [label="State 127\n\l768 using-enum-declaration: \"using\" elaborated-enum-specifier • \";\"\l"]
  127 -> 234 [style=solid label="\";\""]
  128 [label="State 128\n\l765 using-declarator-list: using-declarator • ELLIPSIS-opt\l"]
  128 -> 156 [style=solid label="\"...\""]
  128 -> 235 [style=dashed label="ELLIPSIS-opt"]
  128 -> "128R5" [style=solid]
 "128R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  129 [label="State 129\n\l763 using-declaration: \"using\" using-declarator-list • \";\"\l766 using-declarator-list: using-declarator-list • \",\" using-declarator ELLIPSIS-opt\l"]
  129 -> 236 [style=solid label="\",\""]
  129 -> 237 [style=solid label="\";\""]
  130 [label="State 130\n\l214 decltype-specifier: \"decltype\" \"(\" • expression \")\"\l"]
  130 -> 238 [style=solid label="IDENTIFIER"]
  130 -> 239 [style=solid label="\"noexcept\""]
  130 -> 240 [style=solid label="\"!\""]
  130 -> 241 [style=solid label="\"::\""]
  130 -> 242 [style=solid label="\"this\""]
  130 -> 8 [style=solid label="\"typename\""]
  130 -> 243 [style=solid label="\"+\""]
  130 -> 244 [style=solid label="\"-\""]
  130 -> 245 [style=solid label="\"(\""]
  130 -> 246 [style=solid label="\"&\""]
  130 -> 247 [style=solid label="\"[\""]
  130 -> 248 [style=solid label="\"co_await\""]
  130 -> 249 [style=solid label="\"operator\""]
  130 -> 21 [style=solid label="\"decltype\""]
  130 -> 250 [style=solid label="\"*\""]
  130 -> 251 [style=solid label="\"requires\""]
  130 -> 252 [style=solid label="\"~\""]
  130 -> 253 [style=solid label="\"++\""]
  130 -> 254 [style=solid label="\"--\""]
  130 -> 255 [style=solid label="\"dynamic_cast\""]
  130 -> 256 [style=solid label="\"static_cast\""]
  130 -> 257 [style=solid label="\"reinterpret_cast\""]
  130 -> 258 [style=solid label="\"const_cast\""]
  130 -> 259 [style=solid label="\"typeid\""]
  130 -> 260 [style=solid label="\"literal\""]
  130 -> 27 [style=solid label="\"char\""]
  130 -> 28 [style=solid label="\"char8_t\""]
  130 -> 29 [style=solid label="\"char16_t\""]
  130 -> 30 [style=solid label="\"char32_t\""]
  130 -> 31 [style=solid label="\"wchar_t\""]
  130 -> 32 [style=solid label="\"bool\""]
  130 -> 33 [style=solid label="\"short\""]
  130 -> 34 [style=solid label="\"int\""]
  130 -> 35 [style=solid label="\"long\""]
  130 -> 36 [style=solid label="\"signed\""]
  130 -> 37 [style=solid label="\"unsigned\""]
  130 -> 38 [style=solid label="\"float\""]
  130 -> 39 [style=solid label="\"double\""]
  130 -> 40 [style=solid label="\"void\""]
  130 -> 118 [style=solid label="STRING_LITERAL"]
  130 -> 261 [style=solid label="\"throw\""]
  130 -> 262 [style=solid label="\"sizeof\""]
  130 -> 263 [style=solid label="\"alignof\""]
  130 -> 264 [style=solid label="\"co_yield\""]
  130 -> 265 [style=dashed label="SCOPE-opt"]
  130 -> 266 [style=dashed label="additive-expression"]
  130 -> 267 [style=dashed label="and-expression"]
  130 -> 268 [style=dashed label="assignment-expression"]
  130 -> 269 [style=dashed label="await-expression"]
  130 -> 270 [style=dashed label="cast-expression"]
  130 -> 55 [style=dashed label="class-name"]
  130 -> 271 [style=dashed label="compare-expression"]
  130 -> 272 [style=dashed label="conditional-expression"]
  130 -> 273 [style=dashed label="conversion-function-id"]
  130 -> 63 [style=dashed label="decltype-specifier"]
  130 -> 274 [style=dashed label="delete-expression"]
  130 -> 71 [style=dashed label="enum-name"]
  130 -> 275 [style=dashed label="equality-expression"]
  130 -> 276 [style=dashed label="exclusive-or-expression"]
  130 -> 277 [style=dashed label="expression"]
  130 -> 278 [style=dashed label="fold-expression"]
  130 -> 279 [style=dashed label="id-expression"]
  130 -> 280 [style=dashed label="inclusive-or-expression"]
  130 -> 281 [style=dashed label="lambda-expression"]
  130 -> 282 [style=dashed label="lambda-introducer"]
  130 -> 283 [style=dashed label="literal-operator-id"]
  130 -> 284 [style=dashed label="logical-and-expression"]
  130 -> 285 [style=dashed label="logical-or-expression"]
  130 -> 286 [style=dashed label="multiplicative-expression"]
  130 -> 85 [style=dashed label="namespace-alias"]
  130 -> 88 [style=dashed label="namespace-name"]
  130 -> 287 [style=dashed label="nested-name-specifier"]
  130 -> 90 [style=dashed label="nested-name-specifier-opt"]
  130 -> 288 [style=dashed label="new-expression"]
  130 -> 289 [style=dashed label="noexcept-expression"]
  130 -> 290 [style=dashed label="operator-function-id"]
  130 -> 94 [style=dashed label="placeholder-type-specifier"]
  130 -> 291 [style=dashed label="pm-expression"]
  130 -> 292 [style=dashed label="postfix-expression"]
  130 -> 293 [style=dashed label="primary-expression"]
  130 -> 294 [style=dashed label="qualified-id"]
  130 -> 295 [style=dashed label="relational-expression"]
  130 -> 296 [style=dashed label="requires-expression"]
  130 -> 297 [style=dashed label="shift-expression"]
  130 -> 298 [style=dashed label="simple-template-id"]
  130 -> 299 [style=dashed label="simple-type-specifier"]
  130 -> 300 [style=dashed label="string-literal"]
  130 -> 301 [style=dashed label="template-id"]
  130 -> 102 [style=dashed label="template-name"]
  130 -> 302 [style=dashed label="throw-expression"]
  130 -> 104 [style=dashed label="type-constraint"]
  130 -> 105 [style=dashed label="type-constraint-opt"]
  130 -> 106 [style=dashed label="type-name"]
  130 -> 108 [style=dashed label="typedef-name"]
  130 -> 303 [style=dashed label="typename-specifier"]
  130 -> 304 [style=dashed label="unary-expression"]
  130 -> 305 [style=dashed label="unary-operator"]
  130 -> 306 [style=dashed label="unqualified-id"]
  130 -> 307 [style=dashed label="yield-expression"]
  130 -> "130R19" [style=solid]
 "130R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  130 -> "130R458d" [label="[IDENTIFIER]", style=solid]
 "130R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  130 -> "130R710d" [label="[\"decltype\"]", style=solid]
 "130R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  130 -> "130R710" [label="[\"auto\"]", style=solid]
 "130R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  131 [label="State 131\n\l244 enum-key: \"enum\" \"class\" •\l"]
  131 -> "131R244" [style=solid]
 "131R244" [label="R244", fillcolor=3, shape=diamond, style=filled]
  132 [label="State 132\n\l245 enum-key: \"enum\" \"struct\" •\l"]
  132 -> "132R245" [style=solid]
 "132R245" [label="R245", fillcolor=3, shape=diamond, style=filled]
  133 [label="State 133\n\l456 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l457                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l459 nested-name-specifier-opt: nested-name-specifier •\l"]
  133 -> 198 [style=solid label="IDENTIFIER"]
  133 -> 230 [style=solid label="\"template\""]
  133 -> 200 [style=dashed label="TEMPLATE-opt"]
  133 -> "133R21d" [label="[IDENTIFIER]", style=solid]
 "133R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  133 -> "133R459d" [label="[IDENTIFIER]", style=solid]
 "133R459d" [label="R459", fillcolor=5, shape=diamond, style=filled]
  134 [label="State 134\n\l228 elaborated-enum-specifier: \"enum\" nested-name-specifier-opt • IDENTIFIER\l"]
  134 -> 308 [style=solid label="IDENTIFIER"]
  135 [label="State 135\n\l266 explicit-specifier: \"explicit\" \"(\" • constant-expression \")\"\l"]
  135 -> 238 [style=solid label="IDENTIFIER"]
  135 -> 239 [style=solid label="\"noexcept\""]
  135 -> 240 [style=solid label="\"!\""]
  135 -> 241 [style=solid label="\"::\""]
  135 -> 242 [style=solid label="\"this\""]
  135 -> 8 [style=solid label="\"typename\""]
  135 -> 243 [style=solid label="\"+\""]
  135 -> 244 [style=solid label="\"-\""]
  135 -> 245 [style=solid label="\"(\""]
  135 -> 246 [style=solid label="\"&\""]
  135 -> 247 [style=solid label="\"[\""]
  135 -> 248 [style=solid label="\"co_await\""]
  135 -> 249 [style=solid label="\"operator\""]
  135 -> 21 [style=solid label="\"decltype\""]
  135 -> 250 [style=solid label="\"*\""]
  135 -> 251 [style=solid label="\"requires\""]
  135 -> 252 [style=solid label="\"~\""]
  135 -> 253 [style=solid label="\"++\""]
  135 -> 254 [style=solid label="\"--\""]
  135 -> 255 [style=solid label="\"dynamic_cast\""]
  135 -> 256 [style=solid label="\"static_cast\""]
  135 -> 257 [style=solid label="\"reinterpret_cast\""]
  135 -> 258 [style=solid label="\"const_cast\""]
  135 -> 259 [style=solid label="\"typeid\""]
  135 -> 260 [style=solid label="\"literal\""]
  135 -> 27 [style=solid label="\"char\""]
  135 -> 28 [style=solid label="\"char8_t\""]
  135 -> 29 [style=solid label="\"char16_t\""]
  135 -> 30 [style=solid label="\"char32_t\""]
  135 -> 31 [style=solid label="\"wchar_t\""]
  135 -> 32 [style=solid label="\"bool\""]
  135 -> 33 [style=solid label="\"short\""]
  135 -> 34 [style=solid label="\"int\""]
  135 -> 35 [style=solid label="\"long\""]
  135 -> 36 [style=solid label="\"signed\""]
  135 -> 37 [style=solid label="\"unsigned\""]
  135 -> 38 [style=solid label="\"float\""]
  135 -> 39 [style=solid label="\"double\""]
  135 -> 40 [style=solid label="\"void\""]
  135 -> 118 [style=solid label="STRING_LITERAL"]
  135 -> 262 [style=solid label="\"sizeof\""]
  135 -> 263 [style=solid label="\"alignof\""]
  135 -> 265 [style=dashed label="SCOPE-opt"]
  135 -> 266 [style=dashed label="additive-expression"]
  135 -> 267 [style=dashed label="and-expression"]
  135 -> 269 [style=dashed label="await-expression"]
  135 -> 270 [style=dashed label="cast-expression"]
  135 -> 55 [style=dashed label="class-name"]
  135 -> 271 [style=dashed label="compare-expression"]
  135 -> 309 [style=dashed label="conditional-expression"]
  135 -> 310 [style=dashed label="constant-expression"]
  135 -> 273 [style=dashed label="conversion-function-id"]
  135 -> 63 [style=dashed label="decltype-specifier"]
  135 -> 274 [style=dashed label="delete-expression"]
  135 -> 71 [style=dashed label="enum-name"]
  135 -> 275 [style=dashed label="equality-expression"]
  135 -> 276 [style=dashed label="exclusive-or-expression"]
  135 -> 278 [style=dashed label="fold-expression"]
  135 -> 279 [style=dashed label="id-expression"]
  135 -> 280 [style=dashed label="inclusive-or-expression"]
  135 -> 281 [style=dashed label="lambda-expression"]
  135 -> 282 [style=dashed label="lambda-introducer"]
  135 -> 283 [style=dashed label="literal-operator-id"]
  135 -> 284 [style=dashed label="logical-and-expression"]
  135 -> 311 [style=dashed label="logical-or-expression"]
  135 -> 286 [style=dashed label="multiplicative-expression"]
  135 -> 85 [style=dashed label="namespace-alias"]
  135 -> 88 [style=dashed label="namespace-name"]
  135 -> 287 [style=dashed label="nested-name-specifier"]
  135 -> 90 [style=dashed label="nested-name-specifier-opt"]
  135 -> 288 [style=dashed label="new-expression"]
  135 -> 289 [style=dashed label="noexcept-expression"]
  135 -> 290 [style=dashed label="operator-function-id"]
  135 -> 94 [style=dashed label="placeholder-type-specifier"]
  135 -> 291 [style=dashed label="pm-expression"]
  135 -> 292 [style=dashed label="postfix-expression"]
  135 -> 293 [style=dashed label="primary-expression"]
  135 -> 294 [style=dashed label="qualified-id"]
  135 -> 295 [style=dashed label="relational-expression"]
  135 -> 296 [style=dashed label="requires-expression"]
  135 -> 297 [style=dashed label="shift-expression"]
  135 -> 298 [style=dashed label="simple-template-id"]
  135 -> 299 [style=dashed label="simple-type-specifier"]
  135 -> 300 [style=dashed label="string-literal"]
  135 -> 301 [style=dashed label="template-id"]
  135 -> 102 [style=dashed label="template-name"]
  135 -> 104 [style=dashed label="type-constraint"]
  135 -> 105 [style=dashed label="type-constraint-opt"]
  135 -> 106 [style=dashed label="type-name"]
  135 -> 108 [style=dashed label="typedef-name"]
  135 -> 303 [style=dashed label="typename-specifier"]
  135 -> 304 [style=dashed label="unary-expression"]
  135 -> 305 [style=dashed label="unary-operator"]
  135 -> 306 [style=dashed label="unqualified-id"]
  135 -> "135R19" [style=solid]
 "135R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  135 -> "135R458d" [label="[IDENTIFIER]", style=solid]
 "135R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  135 -> "135R710d" [label="[\"decltype\"]", style=solid]
 "135R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  135 -> "135R710" [label="[\"auto\"]", style=solid]
 "135R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  136 [label="State 136\n\l332 global-module-fragment: \"module\" \";\" • declaration-seq-opt\l"]
  136 -> 1 [style=solid label="\"constexpr\""]
  136 -> 2 [style=solid label="\"export\""]
  136 -> 3 [style=solid label="\"extern\""]
  136 -> 4 [style=solid label="IDENTIFIER"]
  136 -> 5 [style=solid label="\"inline\""]
  136 -> 6 [style=solid label="\"::\""]
  136 -> 7 [style=solid label="\"template\""]
  136 -> 8 [style=solid label="\"typename\""]
  136 -> 9 [style=solid label="\"virtual\""]
  136 -> 10 [style=solid label="\"using\""]
  136 -> 11 [style=solid label="\";\""]
  136 -> 12 [style=solid label="\"class\""]
  136 -> 13 [style=solid label="\"struct\""]
  136 -> 14 [style=solid label="\"union\""]
  136 -> 15 [style=solid label="\"const\""]
  136 -> 16 [style=solid label="\"volatile\""]
  136 -> 17 [style=solid label="\"friend\""]
  136 -> 18 [style=solid label="\"typedef\""]
  136 -> 19 [style=solid label="\"consteval\""]
  136 -> 20 [style=solid label="\"constinit\""]
  136 -> 21 [style=solid label="\"decltype\""]
  136 -> 22 [style=solid label="\"enum\""]
  136 -> 23 [style=solid label="\"explicit\""]
  136 -> 25 [style=solid label="\"import\""]
  136 -> 26 [style=solid label="\"namespace\""]
  136 -> 27 [style=solid label="\"char\""]
  136 -> 28 [style=solid label="\"char8_t\""]
  136 -> 29 [style=solid label="\"char16_t\""]
  136 -> 30 [style=solid label="\"char32_t\""]
  136 -> 31 [style=solid label="\"wchar_t\""]
  136 -> 32 [style=solid label="\"bool\""]
  136 -> 33 [style=solid label="\"short\""]
  136 -> 34 [style=solid label="\"int\""]
  136 -> 35 [style=solid label="\"long\""]
  136 -> 36 [style=solid label="\"signed\""]
  136 -> 37 [style=solid label="\"unsigned\""]
  136 -> 38 [style=solid label="\"float\""]
  136 -> 39 [style=solid label="\"double\""]
  136 -> 40 [style=solid label="\"void\""]
  136 -> 41 [style=solid label="\"static_assert\""]
  136 -> 42 [style=solid label="\"static\""]
  136 -> 43 [style=solid label="\"thread_local\""]
  136 -> 44 [style=solid label="\"mutable\""]
  136 -> 45 [style=dashed label="EXTERN-opt"]
  136 -> 46 [style=dashed label="INLINE-opt"]
  136 -> 47 [style=dashed label="alias-declaration"]
  136 -> 48 [style=dashed label="asm-declaration"]
  136 -> 49 [style=dashed label="attribute-declaration"]
  136 -> 50 [style=dashed label="attribute-specifier-seq"]
  136 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  136 -> 52 [style=dashed label="block-declaration"]
  136 -> 53 [style=dashed label="class-head"]
  136 -> 54 [style=dashed label="class-key"]
  136 -> 55 [style=dashed label="class-name"]
  136 -> 56 [style=dashed label="class-specifier"]
  136 -> 57 [style=dashed label="cv-qualifier"]
  136 -> 58 [style=dashed label="decl-specifier"]
  136 -> 59 [style=dashed label="decl-specifier-seq"]
  136 -> 60 [style=dashed label="declaration"]
  136 -> 61 [style=dashed label="declaration-seq"]
  136 -> 312 [style=dashed label="declaration-seq-opt"]
  136 -> 63 [style=dashed label="decltype-specifier"]
  136 -> 64 [style=dashed label="deduction-guide"]
  136 -> 65 [style=dashed label="defining-type-specifier"]
  136 -> 66 [style=dashed label="elaborated-enum-specifier"]
  136 -> 67 [style=dashed label="elaborated-type-specifier"]
  136 -> 68 [style=dashed label="empty-declaration"]
  136 -> 69 [style=dashed label="enum-head"]
  136 -> 70 [style=dashed label="enum-key"]
  136 -> 71 [style=dashed label="enum-name"]
  136 -> 72 [style=dashed label="enum-specifier"]
  136 -> 73 [style=dashed label="explicit-instantiation"]
  136 -> 74 [style=dashed label="explicit-specialization"]
  136 -> 75 [style=dashed label="explicit-specifier"]
  136 -> 76 [style=dashed label="explicit-specifier-opt"]
  136 -> 77 [style=dashed label="export-declaration"]
  136 -> 78 [style=dashed label="function-definition"]
  136 -> 79 [style=dashed label="function-specifier"]
  136 -> 82 [style=dashed label="linkage-specification"]
  136 -> 83 [style=dashed label="module-import-declaration"]
  136 -> 84 [style=dashed label="named-namespace-definition"]
  136 -> 85 [style=dashed label="namespace-alias"]
  136 -> 86 [style=dashed label="namespace-alias-definition"]
  136 -> 87 [style=dashed label="namespace-definition"]
  136 -> 88 [style=dashed label="namespace-name"]
  136 -> 89 [style=dashed label="nested-name-specifier"]
  136 -> 90 [style=dashed label="nested-name-specifier-opt"]
  136 -> 91 [style=dashed label="nested-namespace-definition"]
  136 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  136 -> 93 [style=dashed label="opaque-enum-declaration"]
  136 -> 94 [style=dashed label="placeholder-type-specifier"]
  136 -> 95 [style=dashed label="simple-declaration"]
  136 -> 96 [style=dashed label="simple-template-id"]
  136 -> 97 [style=dashed label="simple-type-specifier"]
  136 -> 98 [style=dashed label="static_assert-declaration"]
  136 -> 99 [style=dashed label="storage-class-specifier"]
  136 -> 100 [style=dashed label="template-declaration"]
  136 -> 101 [style=dashed label="template-head"]
  136 -> 102 [style=dashed label="template-name"]
  136 -> 104 [style=dashed label="type-constraint"]
  136 -> 105 [style=dashed label="type-constraint-opt"]
  136 -> 106 [style=dashed label="type-name"]
  136 -> 107 [style=dashed label="type-specifier"]
  136 -> 108 [style=dashed label="typedef-name"]
  136 -> 109 [style=dashed label="typename-specifier"]
  136 -> 110 [style=dashed label="unnamed-namespace-definition"]
  136 -> 111 [style=dashed label="using-declaration"]
  136 -> 112 [style=dashed label="using-directive"]
  136 -> 113 [style=dashed label="using-enum-declaration"]
  136 -> "136R9d" [label="[\"template\"]", style=solid]
 "136R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  136 -> "136R13d" [label="[\"namespace\"]", style=solid]
 "136R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  136 -> "136R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "136R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  136 -> "136R83" [label="[]", style=solid]
 "136R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  136 -> "136R208d" [label="[\"export\"]", style=solid]
 "136R208d" [label="R208", fillcolor=5, shape=diamond, style=filled]
  136 -> "136R208" [label="[\"module\"]", style=solid]
 "136R208" [label="R208", fillcolor=3, shape=diamond, style=filled]
  136 -> "136R268d" [label="[IDENTIFIER]", style=solid]
 "136R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  136 -> "136R458d" [label="[IDENTIFIER]", style=solid]
 "136R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  136 -> "136R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "136R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  137 [label="State 137\n\l432 module-name-qualifier: IDENTIFIER • \".\"\l"]
  137 -> 313 [style=solid label="\".\""]
  138 [label="State 138\n\l436 module-partition: \":\" • module-name-qualifier-opt IDENTIFIER\l"]
  138 -> 137 [style=solid label="IDENTIFIER"]
  138 -> 142 [style=dashed label="module-name-qualifier"]
  138 -> 314 [style=dashed label="module-name-qualifier-opt"]
  138 -> "138R434d" [label="[IDENTIFIER]", style=solid]
 "138R434d" [label="R434", fillcolor=5, shape=diamond, style=filled]
  139 [label="State 139\n\l339 header-name: HEADER_NAME •\l"]
  139 -> "139R339" [style=solid]
 "139R339" [label="R339", fillcolor=3, shape=diamond, style=filled]
  140 [label="State 140\n\l430 module-import-declaration: \"import\" header-name • attribute-specifier-seq-opt \";\"\l"]
  140 -> 177 [style=dashed label="attribute-specifier-seq"]
  140 -> 315 [style=dashed label="attribute-specifier-seq-opt"]
  140 -> "140R83" [style=solid]
 "140R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  141 [label="State 141\n\l428 module-import-declaration: \"import\" module-name • attribute-specifier-seq-opt \";\"\l"]
  141 -> 177 [style=dashed label="attribute-specifier-seq"]
  141 -> 316 [style=dashed label="attribute-specifier-seq-opt"]
  141 -> "141R83" [style=solid]
 "141R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  142 [label="State 142\n\l433 module-name-qualifier: module-name-qualifier • IDENTIFIER \".\"\l435 module-name-qualifier-opt: module-name-qualifier •\l"]
  142 -> 317 [style=solid label="IDENTIFIER"]
  142 -> "142R435d" [label="[IDENTIFIER]", style=solid]
 "142R435d" [label="R435", fillcolor=5, shape=diamond, style=filled]
  143 [label="State 143\n\l431 module-name: module-name-qualifier-opt • IDENTIFIER\l"]
  143 -> 318 [style=solid label="IDENTIFIER"]
  144 [label="State 144\n\l429 module-import-declaration: \"import\" module-partition • attribute-specifier-seq-opt \";\"\l"]
  144 -> 177 [style=dashed label="attribute-specifier-seq"]
  144 -> 319 [style=dashed label="attribute-specifier-seq-opt"]
  144 -> "144R83" [style=solid]
 "144R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  145 [label="State 145\n\l234 enclosing-namespace-specifier: IDENTIFIER •\l445 namespace-alias-definition: \"namespace\" IDENTIFIER • \"=\" qualified-namespace-specifier \";\"\l"]
  145 -> 320 [style=solid label="\"=\""]
  145 -> "145R234" [style=solid]
 "145R234" [label="R234", fillcolor=3, shape=diamond, style=filled]
  146 [label="State 146\n\l235 enclosing-namespace-specifier: enclosing-namespace-specifier • \"::\" INLINE-opt IDENTIFIER\l460 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier • \"::\" INLINE-opt IDENTIFIER \"{\" namespace-body \"}\"\l"]
  146 -> 321 [style=solid label="\"::\""]
  147 [label="State 147\n\l676 static_assert-declaration: \"static_assert\" \"(\" • constant-expression \")\" \";\"\l677                          | \"static_assert\" \"(\" • constant-expression \",\" string-literal \")\" \";\"\l"]
  147 -> 238 [style=solid label="IDENTIFIER"]
  147 -> 239 [style=solid label="\"noexcept\""]
  147 -> 240 [style=solid label="\"!\""]
  147 -> 241 [style=solid label="\"::\""]
  147 -> 242 [style=solid label="\"this\""]
  147 -> 8 [style=solid label="\"typename\""]
  147 -> 243 [style=solid label="\"+\""]
  147 -> 244 [style=solid label="\"-\""]
  147 -> 245 [style=solid label="\"(\""]
  147 -> 246 [style=solid label="\"&\""]
  147 -> 247 [style=solid label="\"[\""]
  147 -> 248 [style=solid label="\"co_await\""]
  147 -> 249 [style=solid label="\"operator\""]
  147 -> 21 [style=solid label="\"decltype\""]
  147 -> 250 [style=solid label="\"*\""]
  147 -> 251 [style=solid label="\"requires\""]
  147 -> 252 [style=solid label="\"~\""]
  147 -> 253 [style=solid label="\"++\""]
  147 -> 254 [style=solid label="\"--\""]
  147 -> 255 [style=solid label="\"dynamic_cast\""]
  147 -> 256 [style=solid label="\"static_cast\""]
  147 -> 257 [style=solid label="\"reinterpret_cast\""]
  147 -> 258 [style=solid label="\"const_cast\""]
  147 -> 259 [style=solid label="\"typeid\""]
  147 -> 260 [style=solid label="\"literal\""]
  147 -> 27 [style=solid label="\"char\""]
  147 -> 28 [style=solid label="\"char8_t\""]
  147 -> 29 [style=solid label="\"char16_t\""]
  147 -> 30 [style=solid label="\"char32_t\""]
  147 -> 31 [style=solid label="\"wchar_t\""]
  147 -> 32 [style=solid label="\"bool\""]
  147 -> 33 [style=solid label="\"short\""]
  147 -> 34 [style=solid label="\"int\""]
  147 -> 35 [style=solid label="\"long\""]
  147 -> 36 [style=solid label="\"signed\""]
  147 -> 37 [style=solid label="\"unsigned\""]
  147 -> 38 [style=solid label="\"float\""]
  147 -> 39 [style=solid label="\"double\""]
  147 -> 40 [style=solid label="\"void\""]
  147 -> 118 [style=solid label="STRING_LITERAL"]
  147 -> 262 [style=solid label="\"sizeof\""]
  147 -> 263 [style=solid label="\"alignof\""]
  147 -> 265 [style=dashed label="SCOPE-opt"]
  147 -> 266 [style=dashed label="additive-expression"]
  147 -> 267 [style=dashed label="and-expression"]
  147 -> 269 [style=dashed label="await-expression"]
  147 -> 270 [style=dashed label="cast-expression"]
  147 -> 55 [style=dashed label="class-name"]
  147 -> 271 [style=dashed label="compare-expression"]
  147 -> 309 [style=dashed label="conditional-expression"]
  147 -> 322 [style=dashed label="constant-expression"]
  147 -> 273 [style=dashed label="conversion-function-id"]
  147 -> 63 [style=dashed label="decltype-specifier"]
  147 -> 274 [style=dashed label="delete-expression"]
  147 -> 71 [style=dashed label="enum-name"]
  147 -> 275 [style=dashed label="equality-expression"]
  147 -> 276 [style=dashed label="exclusive-or-expression"]
  147 -> 278 [style=dashed label="fold-expression"]
  147 -> 279 [style=dashed label="id-expression"]
  147 -> 280 [style=dashed label="inclusive-or-expression"]
  147 -> 281 [style=dashed label="lambda-expression"]
  147 -> 282 [style=dashed label="lambda-introducer"]
  147 -> 283 [style=dashed label="literal-operator-id"]
  147 -> 284 [style=dashed label="logical-and-expression"]
  147 -> 311 [style=dashed label="logical-or-expression"]
  147 -> 286 [style=dashed label="multiplicative-expression"]
  147 -> 85 [style=dashed label="namespace-alias"]
  147 -> 88 [style=dashed label="namespace-name"]
  147 -> 287 [style=dashed label="nested-name-specifier"]
  147 -> 90 [style=dashed label="nested-name-specifier-opt"]
  147 -> 288 [style=dashed label="new-expression"]
  147 -> 289 [style=dashed label="noexcept-expression"]
  147 -> 290 [style=dashed label="operator-function-id"]
  147 -> 94 [style=dashed label="placeholder-type-specifier"]
  147 -> 291 [style=dashed label="pm-expression"]
  147 -> 292 [style=dashed label="postfix-expression"]
  147 -> 293 [style=dashed label="primary-expression"]
  147 -> 294 [style=dashed label="qualified-id"]
  147 -> 295 [style=dashed label="relational-expression"]
  147 -> 296 [style=dashed label="requires-expression"]
  147 -> 297 [style=dashed label="shift-expression"]
  147 -> 298 [style=dashed label="simple-template-id"]
  147 -> 299 [style=dashed label="simple-type-specifier"]
  147 -> 300 [style=dashed label="string-literal"]
  147 -> 301 [style=dashed label="template-id"]
  147 -> 102 [style=dashed label="template-name"]
  147 -> 104 [style=dashed label="type-constraint"]
  147 -> 105 [style=dashed label="type-constraint-opt"]
  147 -> 106 [style=dashed label="type-name"]
  147 -> 108 [style=dashed label="typedef-name"]
  147 -> 303 [style=dashed label="typename-specifier"]
  147 -> 304 [style=dashed label="unary-expression"]
  147 -> 305 [style=dashed label="unary-operator"]
  147 -> 306 [style=dashed label="unqualified-id"]
  147 -> "147R19" [style=solid]
 "147R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  147 -> "147R458d" [label="[IDENTIFIER]", style=solid]
 "147R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  147 -> "147R710d" [label="[\"decltype\"]", style=solid]
 "147R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  147 -> "147R710" [label="[\"auto\"]", style=solid]
 "147R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  148 [label="State 148\n\l264 explicit-instantiation: EXTERN-opt \"template\" • declaration\l"]
  148 -> 1 [style=solid label="\"constexpr\""]
  148 -> 2 [style=solid label="\"export\""]
  148 -> 3 [style=solid label="\"extern\""]
  148 -> 4 [style=solid label="IDENTIFIER"]
  148 -> 5 [style=solid label="\"inline\""]
  148 -> 6 [style=solid label="\"::\""]
  148 -> 7 [style=solid label="\"template\""]
  148 -> 8 [style=solid label="\"typename\""]
  148 -> 9 [style=solid label="\"virtual\""]
  148 -> 10 [style=solid label="\"using\""]
  148 -> 11 [style=solid label="\";\""]
  148 -> 12 [style=solid label="\"class\""]
  148 -> 13 [style=solid label="\"struct\""]
  148 -> 14 [style=solid label="\"union\""]
  148 -> 15 [style=solid label="\"const\""]
  148 -> 16 [style=solid label="\"volatile\""]
  148 -> 17 [style=solid label="\"friend\""]
  148 -> 18 [style=solid label="\"typedef\""]
  148 -> 19 [style=solid label="\"consteval\""]
  148 -> 20 [style=solid label="\"constinit\""]
  148 -> 21 [style=solid label="\"decltype\""]
  148 -> 22 [style=solid label="\"enum\""]
  148 -> 23 [style=solid label="\"explicit\""]
  148 -> 25 [style=solid label="\"import\""]
  148 -> 26 [style=solid label="\"namespace\""]
  148 -> 27 [style=solid label="\"char\""]
  148 -> 28 [style=solid label="\"char8_t\""]
  148 -> 29 [style=solid label="\"char16_t\""]
  148 -> 30 [style=solid label="\"char32_t\""]
  148 -> 31 [style=solid label="\"wchar_t\""]
  148 -> 32 [style=solid label="\"bool\""]
  148 -> 33 [style=solid label="\"short\""]
  148 -> 34 [style=solid label="\"int\""]
  148 -> 35 [style=solid label="\"long\""]
  148 -> 36 [style=solid label="\"signed\""]
  148 -> 37 [style=solid label="\"unsigned\""]
  148 -> 38 [style=solid label="\"float\""]
  148 -> 39 [style=solid label="\"double\""]
  148 -> 40 [style=solid label="\"void\""]
  148 -> 41 [style=solid label="\"static_assert\""]
  148 -> 42 [style=solid label="\"static\""]
  148 -> 43 [style=solid label="\"thread_local\""]
  148 -> 44 [style=solid label="\"mutable\""]
  148 -> 45 [style=dashed label="EXTERN-opt"]
  148 -> 46 [style=dashed label="INLINE-opt"]
  148 -> 47 [style=dashed label="alias-declaration"]
  148 -> 48 [style=dashed label="asm-declaration"]
  148 -> 49 [style=dashed label="attribute-declaration"]
  148 -> 50 [style=dashed label="attribute-specifier-seq"]
  148 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  148 -> 52 [style=dashed label="block-declaration"]
  148 -> 53 [style=dashed label="class-head"]
  148 -> 54 [style=dashed label="class-key"]
  148 -> 55 [style=dashed label="class-name"]
  148 -> 56 [style=dashed label="class-specifier"]
  148 -> 57 [style=dashed label="cv-qualifier"]
  148 -> 58 [style=dashed label="decl-specifier"]
  148 -> 59 [style=dashed label="decl-specifier-seq"]
  148 -> 323 [style=dashed label="declaration"]
  148 -> 63 [style=dashed label="decltype-specifier"]
  148 -> 64 [style=dashed label="deduction-guide"]
  148 -> 65 [style=dashed label="defining-type-specifier"]
  148 -> 66 [style=dashed label="elaborated-enum-specifier"]
  148 -> 67 [style=dashed label="elaborated-type-specifier"]
  148 -> 68 [style=dashed label="empty-declaration"]
  148 -> 69 [style=dashed label="enum-head"]
  148 -> 70 [style=dashed label="enum-key"]
  148 -> 71 [style=dashed label="enum-name"]
  148 -> 72 [style=dashed label="enum-specifier"]
  148 -> 73 [style=dashed label="explicit-instantiation"]
  148 -> 74 [style=dashed label="explicit-specialization"]
  148 -> 75 [style=dashed label="explicit-specifier"]
  148 -> 76 [style=dashed label="explicit-specifier-opt"]
  148 -> 77 [style=dashed label="export-declaration"]
  148 -> 78 [style=dashed label="function-definition"]
  148 -> 79 [style=dashed label="function-specifier"]
  148 -> 82 [style=dashed label="linkage-specification"]
  148 -> 83 [style=dashed label="module-import-declaration"]
  148 -> 84 [style=dashed label="named-namespace-definition"]
  148 -> 85 [style=dashed label="namespace-alias"]
  148 -> 86 [style=dashed label="namespace-alias-definition"]
  148 -> 87 [style=dashed label="namespace-definition"]
  148 -> 88 [style=dashed label="namespace-name"]
  148 -> 89 [style=dashed label="nested-name-specifier"]
  148 -> 90 [style=dashed label="nested-name-specifier-opt"]
  148 -> 91 [style=dashed label="nested-namespace-definition"]
  148 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  148 -> 93 [style=dashed label="opaque-enum-declaration"]
  148 -> 94 [style=dashed label="placeholder-type-specifier"]
  148 -> 95 [style=dashed label="simple-declaration"]
  148 -> 96 [style=dashed label="simple-template-id"]
  148 -> 97 [style=dashed label="simple-type-specifier"]
  148 -> 98 [style=dashed label="static_assert-declaration"]
  148 -> 99 [style=dashed label="storage-class-specifier"]
  148 -> 100 [style=dashed label="template-declaration"]
  148 -> 101 [style=dashed label="template-head"]
  148 -> 102 [style=dashed label="template-name"]
  148 -> 104 [style=dashed label="type-constraint"]
  148 -> 105 [style=dashed label="type-constraint-opt"]
  148 -> 106 [style=dashed label="type-name"]
  148 -> 107 [style=dashed label="type-specifier"]
  148 -> 108 [style=dashed label="typedef-name"]
  148 -> 109 [style=dashed label="typename-specifier"]
  148 -> 110 [style=dashed label="unnamed-namespace-definition"]
  148 -> 111 [style=dashed label="using-declaration"]
  148 -> 112 [style=dashed label="using-directive"]
  148 -> 113 [style=dashed label="using-enum-declaration"]
  148 -> "148R9d" [label="[\"template\"]", style=solid]
 "148R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R13d" [label="[\"namespace\"]", style=solid]
 "148R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "148R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R83" [label="[]", style=solid]
 "148R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  148 -> "148R268d" [label="[IDENTIFIER]", style=solid]
 "148R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R458d" [label="[IDENTIFIER]", style=solid]
 "148R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "148R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  149 [label="State 149\n\l443 named-namespace-definition: INLINE-opt \"namespace\" • attribute-specifier-seq-opt IDENTIFIER \"{\" namespace-body \"}\"\l754 unnamed-namespace-definition: INLINE-opt \"namespace\" • attribute-specifier-seq-opt \"{\" namespace-body \"}\"\l"]
  149 -> 177 [style=dashed label="attribute-specifier-seq"]
  149 -> 324 [style=dashed label="attribute-specifier-seq-opt"]
  149 -> "149R83" [style=solid]
 "149R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  150 [label="State 150\n\l680 storage-class-specifier: \"extern\" •\l"]
  150 -> "150R680" [style=solid]
 "150R680" [label="R680", fillcolor=3, shape=diamond, style=filled]
  151 [label="State 151\n\l188 decl-specifier: \"inline\" •\l"]
  151 -> "151R188" [style=solid]
 "151R188" [label="R188", fillcolor=3, shape=diamond, style=filled]
  152 [label="State 152\n\l 71 attribute-declaration: attribute-specifier-seq \";\" •\l"]
  152 -> "152R71" [style=solid]
 "152R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  153 [label="State 153\n\l641 simple-declaration: attribute-specifier-seq decl-specifier-seq • init-declarator-list \";\"\l"]
  153 -> 156 [style=solid label="\"...\""]
  153 -> 4 [style=solid label="IDENTIFIER"]
  153 -> 6 [style=solid label="\"::\""]
  153 -> 159 [style=solid label="\"(\""]
  153 -> 160 [style=solid label="\"&\""]
  153 -> 163 [style=solid label="\"&&\""]
  153 -> 21 [style=solid label="\"decltype\""]
  153 -> 164 [style=solid label="\"*\""]
  153 -> 165 [style=dashed label="ELLIPSIS-opt"]
  153 -> 55 [style=dashed label="class-name"]
  153 -> 183 [style=dashed label="declarator"]
  153 -> 171 [style=dashed label="declarator-id"]
  153 -> 121 [style=dashed label="decltype-specifier"]
  153 -> 71 [style=dashed label="enum-name"]
  153 -> 184 [style=dashed label="init-declarator"]
  153 -> 325 [style=dashed label="init-declarator-list"]
  153 -> 85 [style=dashed label="namespace-alias"]
  153 -> 88 [style=dashed label="namespace-name"]
  153 -> 187 [style=dashed label="nested-name-specifier"]
  153 -> 173 [style=dashed label="noptr-declarator"]
  153 -> 174 [style=dashed label="ptr-declarator"]
  153 -> 175 [style=dashed label="ptr-operator"]
  153 -> 96 [style=dashed label="simple-template-id"]
  153 -> 102 [style=dashed label="template-name"]
  153 -> 106 [style=dashed label="type-name"]
  153 -> 108 [style=dashed label="typedef-name"]
  153 -> "153R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "153R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  153 -> "153R5" [style=solid]
 "153R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  154 [label="State 154\n\l239 enum-head: enum-key • attribute-specifier-seq-opt enum-head-name-opt enum-base-opt\l"]
  154 -> 177 [style=dashed label="attribute-specifier-seq"]
  154 -> 326 [style=dashed label="attribute-specifier-seq-opt"]
  154 -> "154R83" [style=solid]
 "154R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  155 [label="State 155\n\l330 function-specifier: explicit-specifier •\l"]
  155 -> "155R330" [style=solid]
 "155R330" [label="R330", fillcolor=3, shape=diamond, style=filled]
  156 [label="State 156\n\l  6 ELLIPSIS-opt: \"...\" •\l"]
  156 -> "156R6" [style=solid]
 "156R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  157 [label="State 157\n\l767 using-directive: attribute-specifier-seq-opt \"using\" • \"namespace\" nested-name-specifier-opt namespace-name \";\"\l"]
  157 -> 327 [style=solid label="\"namespace\""]
  158 [label="State 158\n\l 45 alignment-specifier: \"alignas\" • \"(\" type-id ELLIPSIS-opt \")\"\l 46                    | \"alignas\" • \"(\" constant-expression ELLIPSIS-opt \")\"\l"]
  158 -> 328 [style=solid label="\"(\""]
  159 [label="State 159\n\l493 noptr-declarator: \"(\" • ptr-declarator \")\"\l"]
  159 -> 156 [style=solid label="\"...\""]
  159 -> 4 [style=solid label="IDENTIFIER"]
  159 -> 6 [style=solid label="\"::\""]
  159 -> 159 [style=solid label="\"(\""]
  159 -> 160 [style=solid label="\"&\""]
  159 -> 163 [style=solid label="\"&&\""]
  159 -> 21 [style=solid label="\"decltype\""]
  159 -> 164 [style=solid label="\"*\""]
  159 -> 165 [style=dashed label="ELLIPSIS-opt"]
  159 -> 55 [style=dashed label="class-name"]
  159 -> 171 [style=dashed label="declarator-id"]
  159 -> 121 [style=dashed label="decltype-specifier"]
  159 -> 71 [style=dashed label="enum-name"]
  159 -> 85 [style=dashed label="namespace-alias"]
  159 -> 88 [style=dashed label="namespace-name"]
  159 -> 187 [style=dashed label="nested-name-specifier"]
  159 -> 329 [style=dashed label="noptr-declarator"]
  159 -> 330 [style=dashed label="ptr-declarator"]
  159 -> 175 [style=dashed label="ptr-operator"]
  159 -> 96 [style=dashed label="simple-template-id"]
  159 -> 102 [style=dashed label="template-name"]
  159 -> 106 [style=dashed label="type-name"]
  159 -> 108 [style=dashed label="typedef-name"]
  159 -> "159R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "159R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  159 -> "159R5" [style=solid]
 "159R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  160 [label="State 160\n\l594 ptr-operator: \"&\" • attribute-specifier-seq-opt\l"]
  160 -> 177 [style=dashed label="attribute-specifier-seq"]
  160 -> 331 [style=dashed label="attribute-specifier-seq-opt"]
  160 -> "160R83" [style=solid]
 "160R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  161 [label="State 161\n\l 49 asm-declaration: attribute-specifier-seq-opt \"asm\" • \"(\" string-literal \")\" \";\"\l"]
  161 -> 332 [style=solid label="\"(\""]
  162 [label="State 162\n\l 80 attribute-specifier: \"[\" • \"[\" attribute-using-prefix-opt attribute-list \"]\" \"]\"\l"]
  162 -> 333 [style=solid label="\"[\""]
  163 [label="State 163\n\l595 ptr-operator: \"&&\" • attribute-specifier-seq-opt\l"]
  163 -> 177 [style=dashed label="attribute-specifier-seq"]
  163 -> 334 [style=dashed label="attribute-specifier-seq-opt"]
  163 -> "163R83" [style=solid]
 "163R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  164 [label="State 164\n\l593 ptr-operator: \"*\" • attribute-specifier-seq-opt cv-qualifier-seq-opt\l"]
  164 -> 177 [style=dashed label="attribute-specifier-seq"]
  164 -> 335 [style=dashed label="attribute-specifier-seq-opt"]
  164 -> "164R83" [style=solid]
 "164R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  165 [label="State 165\n\l213 declarator-id: ELLIPSIS-opt • id-expression\l"]
  165 -> 238 [style=solid label="IDENTIFIER"]
  165 -> 6 [style=solid label="\"::\""]
  165 -> 249 [style=solid label="\"operator\""]
  165 -> 21 [style=solid label="\"decltype\""]
  165 -> 336 [style=solid label="\"~\""]
  165 -> 55 [style=dashed label="class-name"]
  165 -> 273 [style=dashed label="conversion-function-id"]
  165 -> 121 [style=dashed label="decltype-specifier"]
  165 -> 71 [style=dashed label="enum-name"]
  165 -> 337 [style=dashed label="id-expression"]
  165 -> 283 [style=dashed label="literal-operator-id"]
  165 -> 85 [style=dashed label="namespace-alias"]
  165 -> 88 [style=dashed label="namespace-name"]
  165 -> 338 [style=dashed label="nested-name-specifier"]
  165 -> 290 [style=dashed label="operator-function-id"]
  165 -> 294 [style=dashed label="qualified-id"]
  165 -> 298 [style=dashed label="simple-template-id"]
  165 -> 301 [style=dashed label="template-id"]
  165 -> 102 [style=dashed label="template-name"]
  165 -> 106 [style=dashed label="type-name"]
  165 -> 108 [style=dashed label="typedef-name"]
  165 -> 306 [style=dashed label="unqualified-id"]
  166 [label="State 166\n\l 81 attribute-specifier: alignment-specifier •\l"]
  166 -> "166R81" [style=solid]
 "166R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
  167 [label="State 167\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt attribute-specifier •\l"]
  167 -> "167R82" [style=solid]
 "167R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
  168 [label="State 168\n\l192 decl-specifier-seq-opt: decl-specifier-seq •\l642 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq • ref-qualifier-opt \"[\" identifier-list \"]\" initializer \";\"\l"]
  168 -> 339 [style=solid label="\"&\""]
  168 -> 340 [style=solid label="\"&&\""]
  168 -> 341 [style=dashed label="ref-qualifier"]
  168 -> 342 [style=dashed label="ref-qualifier-opt"]
  168 -> "168R192d" [label="[\"&\", \"&&\"]", style=solid]
 "168R192d" [label="R192", fillcolor=5, shape=diamond, style=filled]
  168 -> "168R192" [style=solid]
 "168R192" [label="R192", fillcolor=3, shape=diamond, style=filled]
  168 -> "168R604" [label="[\"[\"]", style=solid]
 "168R604" [label="R604", fillcolor=3, shape=diamond, style=filled]
  169 [label="State 169\n\l327 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt • declarator virt-specifier-seq-opt function-body\l328                    | attribute-specifier-seq-opt decl-specifier-seq-opt • declarator requires-clause function-body\l"]
  169 -> 156 [style=solid label="\"...\""]
  169 -> 4 [style=solid label="IDENTIFIER"]
  169 -> 6 [style=solid label="\"::\""]
  169 -> 159 [style=solid label="\"(\""]
  169 -> 160 [style=solid label="\"&\""]
  169 -> 163 [style=solid label="\"&&\""]
  169 -> 21 [style=solid label="\"decltype\""]
  169 -> 164 [style=solid label="\"*\""]
  169 -> 165 [style=dashed label="ELLIPSIS-opt"]
  169 -> 55 [style=dashed label="class-name"]
  169 -> 343 [style=dashed label="declarator"]
  169 -> 171 [style=dashed label="declarator-id"]
  169 -> 121 [style=dashed label="decltype-specifier"]
  169 -> 71 [style=dashed label="enum-name"]
  169 -> 85 [style=dashed label="namespace-alias"]
  169 -> 88 [style=dashed label="namespace-name"]
  169 -> 187 [style=dashed label="nested-name-specifier"]
  169 -> 173 [style=dashed label="noptr-declarator"]
  169 -> 174 [style=dashed label="ptr-declarator"]
  169 -> 175 [style=dashed label="ptr-operator"]
  169 -> 96 [style=dashed label="simple-template-id"]
  169 -> 102 [style=dashed label="template-name"]
  169 -> 106 [style=dashed label="type-name"]
  169 -> 108 [style=dashed label="typedef-name"]
  169 -> "169R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "169R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  169 -> "169R5" [style=solid]
 "169R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  170 [label="State 170\n\l476 nodeclspec-function-declaration: attribute-specifier-seq-opt declarator • \";\"\l"]
  170 -> 344 [style=solid label="\";\""]
  171 [label="State 171\n\l490 noptr-declarator: declarator-id • attribute-specifier-seq-opt\l"]
  171 -> 177 [style=dashed label="attribute-specifier-seq"]
  171 -> 345 [style=dashed label="attribute-specifier-seq-opt"]
  171 -> "171R83" [style=solid]
 "171R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  172 [label="State 172\n\l456 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l457                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l459 nested-name-specifier-opt: nested-name-specifier •\l596 ptr-operator: nested-name-specifier • \"*\" attribute-specifier-seq-opt cv-qualifier-seq-opt\l646 simple-type-specifier: nested-name-specifier • \"template\" simple-template-id\l"]
  172 -> 198 [style=solid label="IDENTIFIER"]
  172 -> 199 [style=solid label="\"template\""]
  172 -> 346 [style=solid label="\"*\""]
  172 -> 200 [style=dashed label="TEMPLATE-opt"]
  172 -> "172R21d" [label="[IDENTIFIER]", style=solid]
 "172R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  172 -> "172R459d" [label="[IDENTIFIER]", style=solid]
 "172R459d" [label="R459", fillcolor=5, shape=diamond, style=filled]
  173 [label="State 173\n\l212 declarator: noptr-declarator • parameters-and-qualifiers trailing-return-type\l491 noptr-declarator: noptr-declarator • parameters-and-qualifiers\l492                 | noptr-declarator • \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt\l591 ptr-declarator: noptr-declarator •\l"]
  173 -> 347 [style=solid label="\"(\""]
  173 -> 348 [style=solid label="\"[\""]
  173 -> 349 [style=dashed label="parameters-and-qualifiers"]
  173 -> "173R591d" [label="[\"(\"]", style=solid]
 "173R591d" [label="R591", fillcolor=5, shape=diamond, style=filled]
  173 -> "173R591" [style=solid]
 "173R591" [label="R591", fillcolor=3, shape=diamond, style=filled]
  174 [label="State 174\n\l211 declarator: ptr-declarator •\l"]
  174 -> "174R211" [style=solid]
 "174R211" [label="R211", fillcolor=3, shape=diamond, style=filled]
  175 [label="State 175\n\l592 ptr-declarator: ptr-operator • ptr-declarator\l"]
  175 -> 156 [style=solid label="\"...\""]
  175 -> 4 [style=solid label="IDENTIFIER"]
  175 -> 6 [style=solid label="\"::\""]
  175 -> 159 [style=solid label="\"(\""]
  175 -> 160 [style=solid label="\"&\""]
  175 -> 163 [style=solid label="\"&&\""]
  175 -> 21 [style=solid label="\"decltype\""]
  175 -> 164 [style=solid label="\"*\""]
  175 -> 165 [style=dashed label="ELLIPSIS-opt"]
  175 -> 55 [style=dashed label="class-name"]
  175 -> 171 [style=dashed label="declarator-id"]
  175 -> 121 [style=dashed label="decltype-specifier"]
  175 -> 71 [style=dashed label="enum-name"]
  175 -> 85 [style=dashed label="namespace-alias"]
  175 -> 88 [style=dashed label="namespace-name"]
  175 -> 187 [style=dashed label="nested-name-specifier"]
  175 -> 329 [style=dashed label="noptr-declarator"]
  175 -> 350 [style=dashed label="ptr-declarator"]
  175 -> 175 [style=dashed label="ptr-operator"]
  175 -> 96 [style=dashed label="simple-template-id"]
  175 -> 102 [style=dashed label="template-name"]
  175 -> 106 [style=dashed label="type-name"]
  175 -> 108 [style=dashed label="typedef-name"]
  175 -> "175R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "175R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  175 -> "175R5" [style=solid]
 "175R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  176 [label="State 176\n\l142 class-specifier: class-head \"{\" • member-specification-opt \"}\"\l"]
  176 -> 7 [style=solid label="\"template\""]
  176 -> 351 [style=solid label="\"private\""]
  176 -> 352 [style=solid label="\"protected\""]
  176 -> 353 [style=solid label="\"public\""]
  176 -> 10 [style=solid label="\"using\""]
  176 -> 11 [style=solid label="\";\""]
  176 -> 354 [style=solid label="\"enum\""]
  176 -> 23 [style=solid label="\"explicit\""]
  176 -> 41 [style=solid label="\"static_assert\""]
  176 -> 355 [style=dashed label="access-specifier"]
  176 -> 356 [style=dashed label="alias-declaration"]
  176 -> 177 [style=dashed label="attribute-specifier-seq"]
  176 -> 357 [style=dashed label="attribute-specifier-seq-opt"]
  176 -> 358 [style=dashed label="deduction-guide"]
  176 -> 359 [style=dashed label="empty-declaration"]
  176 -> 360 [style=dashed label="enum-key"]
  176 -> 361 [style=dashed label="explicit-specialization"]
  176 -> 362 [style=dashed label="explicit-specifier"]
  176 -> 76 [style=dashed label="explicit-specifier-opt"]
  176 -> 363 [style=dashed label="function-definition"]
  176 -> 364 [style=dashed label="member-declaration"]
  176 -> 365 [style=dashed label="member-specification"]
  176 -> 366 [style=dashed label="member-specification-opt"]
  176 -> 367 [style=dashed label="opaque-enum-declaration"]
  176 -> 368 [style=dashed label="static_assert-declaration"]
  176 -> 369 [style=dashed label="template-declaration"]
  176 -> 101 [style=dashed label="template-head"]
  176 -> 370 [style=dashed label="using-declaration"]
  176 -> 371 [style=dashed label="using-enum-declaration"]
  176 -> "176R83d" [label="[\";\", \"enum\", \"explicit\"]", style=solid]
 "176R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  176 -> "176R83" [style=solid]
 "176R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  176 -> "176R268d" [label="[IDENTIFIER]", style=solid]
 "176R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  176 -> "176R425" [label="[\"}\"]", style=solid]
 "176R425" [label="R425", fillcolor=3, shape=diamond, style=filled]
  177 [label="State 177\n\l 84 attribute-specifier-seq-opt: attribute-specifier-seq •\l"]
  177 -> "177R84" [style=solid]
 "177R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  178 [label="State 178\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l131 class-head: class-key attribute-specifier-seq-opt • class-head-name class-virt-specifier-opt base-clause-opt\l132           | class-key attribute-specifier-seq-opt • base-clause-opt\l229 elaborated-type-specifier: class-key attribute-specifier-seq-opt • nested-name-specifier-opt IDENTIFIER\l"]
  178 -> 4 [style=solid label="IDENTIFIER"]
  178 -> 6 [style=solid label="\"::\""]
  178 -> 158 [style=solid label="\"alignas\""]
  178 -> 162 [style=solid label="\"[\""]
  178 -> 372 [style=solid label="\":\""]
  178 -> 21 [style=solid label="\"decltype\""]
  178 -> 166 [style=dashed label="alignment-specifier"]
  178 -> 167 [style=dashed label="attribute-specifier"]
  178 -> 373 [style=dashed label="base-clause"]
  178 -> 374 [style=dashed label="base-clause-opt"]
  178 -> 375 [style=dashed label="class-head-name"]
  178 -> 55 [style=dashed label="class-name"]
  178 -> 121 [style=dashed label="decltype-specifier"]
  178 -> 71 [style=dashed label="enum-name"]
  178 -> 85 [style=dashed label="namespace-alias"]
  178 -> 88 [style=dashed label="namespace-name"]
  178 -> 133 [style=dashed label="nested-name-specifier"]
  178 -> 376 [style=dashed label="nested-name-specifier-opt"]
  178 -> 96 [style=dashed label="simple-template-id"]
  178 -> 102 [style=dashed label="template-name"]
  178 -> 106 [style=dashed label="type-name"]
  178 -> 108 [style=dashed label="typedef-name"]
  178 -> "178R100" [style=solid]
 "178R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
  178 -> "178R458d" [label="[IDENTIFIER]", style=solid]
 "178R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  179 [label="State 179\n\l231 elaborated-type-specifier: class-key nested-name-specifier • TEMPLATE-opt simple-template-id\l456 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l457                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l"]
  179 -> 198 [style=solid label="IDENTIFIER"]
  179 -> 230 [style=solid label="\"template\""]
  179 -> 377 [style=dashed label="TEMPLATE-opt"]
  179 -> "179R21d" [label="[IDENTIFIER]", style=solid]
 "179R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  180 [label="State 180\n\l138 class-name: simple-template-id •\l230 elaborated-type-specifier: class-key simple-template-id •\l732 typedef-name: simple-template-id •\l"]
  180 -> "180R138" [label="[\"::\"]", style=solid]
 "180R138" [label="R138", fillcolor=3, shape=diamond, style=filled]
  180 -> "180R230d" [label="[\"::\"]", style=solid]
 "180R230d" [label="R230", fillcolor=5, shape=diamond, style=filled]
  180 -> "180R230" [style=solid]
 "180R230" [label="R230", fillcolor=3, shape=diamond, style=filled]
  180 -> "180R732d" [label="[\"::\"]", style=solid]
 "180R732d" [label="R732", fillcolor=5, shape=diamond, style=filled]
  181 [label="State 181\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l189 decl-specifier-seq: decl-specifier attribute-specifier-seq-opt •\l"]
  181 -> 158 [style=solid label="\"alignas\""]
  181 -> 162 [style=solid label="\"[\""]
  181 -> 166 [style=dashed label="alignment-specifier"]
  181 -> 167 [style=dashed label="attribute-specifier"]
  181 -> "181R189d" [label="[\"alignas\", \"[\"]", style=solid]
 "181R189d" [label="R189", fillcolor=5, shape=diamond, style=filled]
  181 -> "181R189" [style=solid]
 "181R189" [label="R189", fillcolor=3, shape=diamond, style=filled]
  182 [label="State 182\n\l190 decl-specifier-seq: decl-specifier decl-specifier-seq •\l"]
  182 -> "182R190" [style=solid]
 "182R190" [label="R190", fillcolor=3, shape=diamond, style=filled]
  183 [label="State 183\n\l348 init-declarator: declarator • initializer-opt\l349                | declarator • requires-clause\l"]
  183 -> 378 [style=solid label="\"=\""]
  183 -> 379 [style=solid label="\"(\""]
  183 -> 380 [style=solid label="\"{\""]
  183 -> 381 [style=solid label="\"requires\""]
  183 -> 382 [style=dashed label="brace-or-equal-initializer"]
  183 -> 383 [style=dashed label="braced-init-list"]
  183 -> 384 [style=dashed label="initializer"]
  183 -> 385 [style=dashed label="initializer-opt"]
  183 -> 386 [style=dashed label="requires-clause"]
  183 -> "183R365" [style=solid]
 "183R365" [label="R365", fillcolor=3, shape=diamond, style=filled]
  184 [label="State 184\n\l350 init-declarator-list: init-declarator •\l"]
  184 -> "184R350" [style=solid]
 "184R350" [label="R350", fillcolor=3, shape=diamond, style=filled]
  185 [label="State 185\n\l351 init-declarator-list: init-declarator-list • \",\" init-declarator\l353 init-declarator-list-opt: init-declarator-list •\l"]
  185 -> 387 [style=solid label="\",\""]
  185 -> "185R353" [style=solid]
 "185R353" [label="R353", fillcolor=3, shape=diamond, style=filled]
  186 [label="State 186\n\l640 simple-declaration: decl-specifier-seq init-declarator-list-opt • \";\"\l"]
  186 -> 388 [style=solid label="\";\""]
  187 [label="State 187\n\l456 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l457                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l596 ptr-operator: nested-name-specifier • \"*\" attribute-specifier-seq-opt cv-qualifier-seq-opt\l"]
  187 -> 198 [style=solid label="IDENTIFIER"]
  187 -> 230 [style=solid label="\"template\""]
  187 -> 346 [style=solid label="\"*\""]
  187 -> 200 [style=dashed label="TEMPLATE-opt"]
  187 -> "187R21d" [label="[IDENTIFIER]", style=solid]
 "187R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  188 [label="State 188\n\l207 declaration-seq: declaration-seq declaration •\l"]
  188 -> "188R207" [style=solid]
 "188R207" [label="R207", fillcolor=3, shape=diamond, style=filled]
  189 [label="State 189\n\l455 nested-name-specifier: decltype-specifier \"::\" •\l"]
  189 -> "189R455" [style=solid]
 "189R455" [label="R455", fillcolor=3, shape=diamond, style=filled]
  190 [label="State 190\n\l247 enum-specifier: enum-head \"{\" • enumerator-list-opt \"}\"\l248               | enum-head \"{\" • enumerator-list \",\" \"}\"\l"]
  190 -> 389 [style=solid label="IDENTIFIER"]
  190 -> 390 [style=dashed label="enumerator"]
  190 -> 391 [style=dashed label="enumerator-definition"]
  190 -> 392 [style=dashed label="enumerator-list"]
  190 -> 393 [style=dashed label="enumerator-list-opt"]
  190 -> "190R254" [style=solid]
 "190R254" [label="R254", fillcolor=3, shape=diamond, style=filled]
  191 [label="State 191\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l239 enum-head: enum-key attribute-specifier-seq-opt • enum-head-name-opt enum-base-opt\l496 opaque-enum-declaration: enum-key attribute-specifier-seq-opt • enum-head-name enum-base-opt \";\"\l"]
  191 -> 4 [style=solid label="IDENTIFIER"]
  191 -> 6 [style=solid label="\"::\""]
  191 -> 158 [style=solid label="\"alignas\""]
  191 -> 162 [style=solid label="\"[\""]
  191 -> 21 [style=solid label="\"decltype\""]
  191 -> 166 [style=dashed label="alignment-specifier"]
  191 -> 167 [style=dashed label="attribute-specifier"]
  191 -> 55 [style=dashed label="class-name"]
  191 -> 121 [style=dashed label="decltype-specifier"]
  191 -> 394 [style=dashed label="enum-head-name"]
  191 -> 395 [style=dashed label="enum-head-name-opt"]
  191 -> 71 [style=dashed label="enum-name"]
  191 -> 85 [style=dashed label="namespace-alias"]
  191 -> 88 [style=dashed label="namespace-name"]
  191 -> 133 [style=dashed label="nested-name-specifier"]
  191 -> 396 [style=dashed label="nested-name-specifier-opt"]
  191 -> 96 [style=dashed label="simple-template-id"]
  191 -> 102 [style=dashed label="template-name"]
  191 -> 106 [style=dashed label="type-name"]
  191 -> 108 [style=dashed label="typedef-name"]
  191 -> "191R241" [style=solid]
 "191R241" [label="R241", fillcolor=3, shape=diamond, style=filled]
  191 -> "191R458d" [label="[IDENTIFIER]", style=solid]
 "191R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  192 [label="State 192\n\l696 template-name: IDENTIFIER •\l"]
  192 -> "192R696" [style=solid]
 "192R696" [label="R696", fillcolor=3, shape=diamond, style=filled]
  193 [label="State 193\n\l215 deduction-guide: explicit-specifier-opt template-name • \"(\" parameter-declaration-clause \")\" \"->\" simple-template-id \";\"\l"]
  193 -> 397 [style=solid label="\"(\""]
  194 [label="State 194\n\l  8 EXPORT-opt: \"export\" •\l"]
  194 -> "194R8" [style=solid]
 "194R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  195 [label="State 195\n\l427 module-declaration: EXPORT-opt • \"module\" module-name module-partition-opt attribute-specifier-seq-opt \";\"\l"]
  195 -> 398 [style=solid label="\"module\""]
  196 [label="State 196\n\l706 translation-unit: global-module-fragment-opt module-declaration • declaration-seq-opt private-module-fragment-opt\l"]
  196 -> 1 [style=solid label="\"constexpr\""]
  196 -> 2 [style=solid label="\"export\""]
  196 -> 3 [style=solid label="\"extern\""]
  196 -> 4 [style=solid label="IDENTIFIER"]
  196 -> 5 [style=solid label="\"inline\""]
  196 -> 6 [style=solid label="\"::\""]
  196 -> 7 [style=solid label="\"template\""]
  196 -> 8 [style=solid label="\"typename\""]
  196 -> 9 [style=solid label="\"virtual\""]
  196 -> 10 [style=solid label="\"using\""]
  196 -> 11 [style=solid label="\";\""]
  196 -> 12 [style=solid label="\"class\""]
  196 -> 13 [style=solid label="\"struct\""]
  196 -> 14 [style=solid label="\"union\""]
  196 -> 15 [style=solid label="\"const\""]
  196 -> 16 [style=solid label="\"volatile\""]
  196 -> 17 [style=solid label="\"friend\""]
  196 -> 18 [style=solid label="\"typedef\""]
  196 -> 19 [style=solid label="\"consteval\""]
  196 -> 20 [style=solid label="\"constinit\""]
  196 -> 21 [style=solid label="\"decltype\""]
  196 -> 22 [style=solid label="\"enum\""]
  196 -> 23 [style=solid label="\"explicit\""]
  196 -> 25 [style=solid label="\"import\""]
  196 -> 26 [style=solid label="\"namespace\""]
  196 -> 27 [style=solid label="\"char\""]
  196 -> 28 [style=solid label="\"char8_t\""]
  196 -> 29 [style=solid label="\"char16_t\""]
  196 -> 30 [style=solid label="\"char32_t\""]
  196 -> 31 [style=solid label="\"wchar_t\""]
  196 -> 32 [style=solid label="\"bool\""]
  196 -> 33 [style=solid label="\"short\""]
  196 -> 34 [style=solid label="\"int\""]
  196 -> 35 [style=solid label="\"long\""]
  196 -> 36 [style=solid label="\"signed\""]
  196 -> 37 [style=solid label="\"unsigned\""]
  196 -> 38 [style=solid label="\"float\""]
  196 -> 39 [style=solid label="\"double\""]
  196 -> 40 [style=solid label="\"void\""]
  196 -> 41 [style=solid label="\"static_assert\""]
  196 -> 42 [style=solid label="\"static\""]
  196 -> 43 [style=solid label="\"thread_local\""]
  196 -> 44 [style=solid label="\"mutable\""]
  196 -> 45 [style=dashed label="EXTERN-opt"]
  196 -> 46 [style=dashed label="INLINE-opt"]
  196 -> 47 [style=dashed label="alias-declaration"]
  196 -> 48 [style=dashed label="asm-declaration"]
  196 -> 49 [style=dashed label="attribute-declaration"]
  196 -> 50 [style=dashed label="attribute-specifier-seq"]
  196 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  196 -> 52 [style=dashed label="block-declaration"]
  196 -> 53 [style=dashed label="class-head"]
  196 -> 54 [style=dashed label="class-key"]
  196 -> 55 [style=dashed label="class-name"]
  196 -> 56 [style=dashed label="class-specifier"]
  196 -> 57 [style=dashed label="cv-qualifier"]
  196 -> 58 [style=dashed label="decl-specifier"]
  196 -> 59 [style=dashed label="decl-specifier-seq"]
  196 -> 60 [style=dashed label="declaration"]
  196 -> 61 [style=dashed label="declaration-seq"]
  196 -> 399 [style=dashed label="declaration-seq-opt"]
  196 -> 63 [style=dashed label="decltype-specifier"]
  196 -> 64 [style=dashed label="deduction-guide"]
  196 -> 65 [style=dashed label="defining-type-specifier"]
  196 -> 66 [style=dashed label="elaborated-enum-specifier"]
  196 -> 67 [style=dashed label="elaborated-type-specifier"]
  196 -> 68 [style=dashed label="empty-declaration"]
  196 -> 69 [style=dashed label="enum-head"]
  196 -> 70 [style=dashed label="enum-key"]
  196 -> 71 [style=dashed label="enum-name"]
  196 -> 72 [style=dashed label="enum-specifier"]
  196 -> 73 [style=dashed label="explicit-instantiation"]
  196 -> 74 [style=dashed label="explicit-specialization"]
  196 -> 75 [style=dashed label="explicit-specifier"]
  196 -> 76 [style=dashed label="explicit-specifier-opt"]
  196 -> 77 [style=dashed label="export-declaration"]
  196 -> 78 [style=dashed label="function-definition"]
  196 -> 79 [style=dashed label="function-specifier"]
  196 -> 82 [style=dashed label="linkage-specification"]
  196 -> 83 [style=dashed label="module-import-declaration"]
  196 -> 84 [style=dashed label="named-namespace-definition"]
  196 -> 85 [style=dashed label="namespace-alias"]
  196 -> 86 [style=dashed label="namespace-alias-definition"]
  196 -> 87 [style=dashed label="namespace-definition"]
  196 -> 88 [style=dashed label="namespace-name"]
  196 -> 89 [style=dashed label="nested-name-specifier"]
  196 -> 90 [style=dashed label="nested-name-specifier-opt"]
  196 -> 91 [style=dashed label="nested-namespace-definition"]
  196 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  196 -> 93 [style=dashed label="opaque-enum-declaration"]
  196 -> 94 [style=dashed label="placeholder-type-specifier"]
  196 -> 95 [style=dashed label="simple-declaration"]
  196 -> 96 [style=dashed label="simple-template-id"]
  196 -> 97 [style=dashed label="simple-type-specifier"]
  196 -> 98 [style=dashed label="static_assert-declaration"]
  196 -> 99 [style=dashed label="storage-class-specifier"]
  196 -> 100 [style=dashed label="template-declaration"]
  196 -> 101 [style=dashed label="template-head"]
  196 -> 102 [style=dashed label="template-name"]
  196 -> 104 [style=dashed label="type-constraint"]
  196 -> 105 [style=dashed label="type-constraint-opt"]
  196 -> 106 [style=dashed label="type-name"]
  196 -> 107 [style=dashed label="type-specifier"]
  196 -> 108 [style=dashed label="typedef-name"]
  196 -> 109 [style=dashed label="typename-specifier"]
  196 -> 110 [style=dashed label="unnamed-namespace-definition"]
  196 -> 111 [style=dashed label="using-declaration"]
  196 -> 112 [style=dashed label="using-directive"]
  196 -> 113 [style=dashed label="using-enum-declaration"]
  196 -> "196R9d" [label="[\"template\"]", style=solid]
 "196R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  196 -> "196R13d" [label="[\"namespace\"]", style=solid]
 "196R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  196 -> "196R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "196R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  196 -> "196R83" [label="[]", style=solid]
 "196R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  196 -> "196R208" [label="[$end, \"module\"]", style=solid]
 "196R208" [label="R208", fillcolor=3, shape=diamond, style=filled]
  196 -> "196R268d" [label="[IDENTIFIER]", style=solid]
 "196R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  196 -> "196R458d" [label="[IDENTIFIER]", style=solid]
 "196R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  196 -> "196R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "196R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  197 [label="State 197\n\l454 nested-name-specifier: namespace-name \"::\" •\l"]
  197 -> "197R454" [style=solid]
 "197R454" [label="R454", fillcolor=3, shape=diamond, style=filled]
  198 [label="State 198\n\l456 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l"]
  198 -> 400 [style=solid label="\"::\""]
  199 [label="State 199\n\l 22 TEMPLATE-opt: \"template\" •\l646 simple-type-specifier: nested-name-specifier \"template\" • simple-template-id\l"]
  199 -> 192 [style=solid label="IDENTIFIER"]
  199 -> 401 [style=dashed label="simple-template-id"]
  199 -> 102 [style=dashed label="template-name"]
  199 -> "199R22d" [label="[IDENTIFIER]", style=solid]
 "199R22d" [label="R22", fillcolor=5, shape=diamond, style=filled]
  199 -> "199R22" [style=solid]
 "199R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  200 [label="State 200\n\l457 nested-name-specifier: nested-name-specifier TEMPLATE-opt • simple-template-id \"::\"\l"]
  200 -> 192 [style=solid label="IDENTIFIER"]
  200 -> 402 [style=dashed label="simple-template-id"]
  200 -> 102 [style=dashed label="template-name"]
  201 [label="State 201\n\l137 class-name: IDENTIFIER •\l151 concept-name: IDENTIFIER •\l246 enum-name: IDENTIFIER •\l696 template-name: IDENTIFIER •\l731 typedef-name: IDENTIFIER •\l"]
  201 -> "201R137" [style=solid]
 "201R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  201 -> "201R151d" [label="[\"decltype\", \"<\", \"auto\"]", style=solid]
 "201R151d" [label="R151", fillcolor=5, shape=diamond, style=filled]
  201 -> "201R246d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "201R246d" [label="R246", fillcolor=5, shape=diamond, style=filled]
  201 -> "201R696d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "201R696d" [label="R696", fillcolor=5, shape=diamond, style=filled]
  201 -> "201R731d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "201R731d" [label="R731", fillcolor=5, shape=diamond, style=filled]
  202 [label="State 202\n\l708 type-constraint: nested-name-specifier-opt concept-name •\l709                | nested-name-specifier-opt concept-name • \"<\" template-argument-list-opt \">\"\l"]
  202 -> 403 [style=solid label="\"<\""]
  202 -> "202R708" [style=solid]
 "202R708" [label="R708", fillcolor=3, shape=diamond, style=filled]
  203 [label="State 203\n\l644 simple-template-id: template-name • \"<\" template-argument-list-opt \">\"\l649 simple-type-specifier: nested-name-specifier-opt template-name •\l"]
  203 -> 208 [style=solid label="\"<\""]
  203 -> "203R649d" [label="[\"<\"]", style=solid]
 "203R649d" [label="R649", fillcolor=5, shape=diamond, style=filled]
  203 -> "203R649" [style=solid]
 "203R649" [label="R649", fillcolor=3, shape=diamond, style=filled]
  204 [label="State 204\n\l645 simple-type-specifier: nested-name-specifier-opt type-name •\l"]
  204 -> "204R645" [style=solid]
 "204R645" [label="R645", fillcolor=3, shape=diamond, style=filled]
  205 [label="State 205\n\l150 concept-definition: \"concept\" • concept-name \"=\" constraint-expression \";\"\l"]
  205 -> 404 [style=solid label="IDENTIFIER"]
  205 -> 405 [style=dashed label="concept-name"]
  206 [label="State 206\n\l691 template-declaration: template-head concept-definition •\l"]
  206 -> "206R691" [style=solid]
 "206R691" [label="R691", fillcolor=3, shape=diamond, style=filled]
  207 [label="State 207\n\l690 template-declaration: template-head declaration •\l"]
  207 -> "207R690" [style=solid]
 "207R690" [label="R690", fillcolor=3, shape=diamond, style=filled]
  208 [label="State 208\n\l644 simple-template-id: template-name \"<\" • template-argument-list-opt \">\"\l"]
  208 -> 238 [style=solid label="IDENTIFIER"]
  208 -> 239 [style=solid label="\"noexcept\""]
  208 -> 240 [style=solid label="\"!\""]
  208 -> 241 [style=solid label="\"::\""]
  208 -> 242 [style=solid label="\"this\""]
  208 -> 8 [style=solid label="\"typename\""]
  208 -> 243 [style=solid label="\"+\""]
  208 -> 244 [style=solid label="\"-\""]
  208 -> 245 [style=solid label="\"(\""]
  208 -> 246 [style=solid label="\"&\""]
  208 -> 247 [style=solid label="\"[\""]
  208 -> 248 [style=solid label="\"co_await\""]
  208 -> 12 [style=solid label="\"class\""]
  208 -> 13 [style=solid label="\"struct\""]
  208 -> 14 [style=solid label="\"union\""]
  208 -> 249 [style=solid label="\"operator\""]
  208 -> 15 [style=solid label="\"const\""]
  208 -> 16 [style=solid label="\"volatile\""]
  208 -> 21 [style=solid label="\"decltype\""]
  208 -> 125 [style=solid label="\"enum\""]
  208 -> 250 [style=solid label="\"*\""]
  208 -> 251 [style=solid label="\"requires\""]
  208 -> 252 [style=solid label="\"~\""]
  208 -> 253 [style=solid label="\"++\""]
  208 -> 254 [style=solid label="\"--\""]
  208 -> 255 [style=solid label="\"dynamic_cast\""]
  208 -> 256 [style=solid label="\"static_cast\""]
  208 -> 257 [style=solid label="\"reinterpret_cast\""]
  208 -> 258 [style=solid label="\"const_cast\""]
  208 -> 259 [style=solid label="\"typeid\""]
  208 -> 260 [style=solid label="\"literal\""]
  208 -> 27 [style=solid label="\"char\""]
  208 -> 28 [style=solid label="\"char8_t\""]
  208 -> 29 [style=solid label="\"char16_t\""]
  208 -> 30 [style=solid label="\"char32_t\""]
  208 -> 31 [style=solid label="\"wchar_t\""]
  208 -> 32 [style=solid label="\"bool\""]
  208 -> 33 [style=solid label="\"short\""]
  208 -> 34 [style=solid label="\"int\""]
  208 -> 35 [style=solid label="\"long\""]
  208 -> 36 [style=solid label="\"signed\""]
  208 -> 37 [style=solid label="\"unsigned\""]
  208 -> 38 [style=solid label="\"float\""]
  208 -> 39 [style=solid label="\"double\""]
  208 -> 40 [style=solid label="\"void\""]
  208 -> 118 [style=solid label="STRING_LITERAL"]
  208 -> 262 [style=solid label="\"sizeof\""]
  208 -> 263 [style=solid label="\"alignof\""]
  208 -> 265 [style=dashed label="SCOPE-opt"]
  208 -> 266 [style=dashed label="additive-expression"]
  208 -> 267 [style=dashed label="and-expression"]
  208 -> 269 [style=dashed label="await-expression"]
  208 -> 270 [style=dashed label="cast-expression"]
  208 -> 406 [style=dashed label="class-key"]
  208 -> 55 [style=dashed label="class-name"]
  208 -> 271 [style=dashed label="compare-expression"]
  208 -> 309 [style=dashed label="conditional-expression"]
  208 -> 407 [style=dashed label="constant-expression"]
  208 -> 273 [style=dashed label="conversion-function-id"]
  208 -> 57 [style=dashed label="cv-qualifier"]
  208 -> 63 [style=dashed label="decltype-specifier"]
  208 -> 274 [style=dashed label="delete-expression"]
  208 -> 66 [style=dashed label="elaborated-enum-specifier"]
  208 -> 67 [style=dashed label="elaborated-type-specifier"]
  208 -> 71 [style=dashed label="enum-name"]
  208 -> 275 [style=dashed label="equality-expression"]
  208 -> 276 [style=dashed label="exclusive-or-expression"]
  208 -> 278 [style=dashed label="fold-expression"]
  208 -> 408 [style=dashed label="id-expression"]
  208 -> 280 [style=dashed label="inclusive-or-expression"]
  208 -> 281 [style=dashed label="lambda-expression"]
  208 -> 282 [style=dashed label="lambda-introducer"]
  208 -> 283 [style=dashed label="literal-operator-id"]
  208 -> 284 [style=dashed label="logical-and-expression"]
  208 -> 311 [style=dashed label="logical-or-expression"]
  208 -> 286 [style=dashed label="multiplicative-expression"]
  208 -> 85 [style=dashed label="namespace-alias"]
  208 -> 88 [style=dashed label="namespace-name"]
  208 -> 287 [style=dashed label="nested-name-specifier"]
  208 -> 90 [style=dashed label="nested-name-specifier-opt"]
  208 -> 288 [style=dashed label="new-expression"]
  208 -> 289 [style=dashed label="noexcept-expression"]
  208 -> 290 [style=dashed label="operator-function-id"]
  208 -> 94 [style=dashed label="placeholder-type-specifier"]
  208 -> 291 [style=dashed label="pm-expression"]
  208 -> 292 [style=dashed label="postfix-expression"]
  208 -> 293 [style=dashed label="primary-expression"]
  208 -> 294 [style=dashed label="qualified-id"]
  208 -> 295 [style=dashed label="relational-expression"]
  208 -> 296 [style=dashed label="requires-expression"]
  208 -> 297 [style=dashed label="shift-expression"]
  208 -> 298 [style=dashed label="simple-template-id"]
  208 -> 409 [style=dashed label="simple-type-specifier"]
  208 -> 300 [style=dashed label="string-literal"]
  208 -> 410 [style=dashed label="template-argument"]
  208 -> 411 [style=dashed label="template-argument-list"]
  208 -> 412 [style=dashed label="template-argument-list-opt"]
  208 -> 301 [style=dashed label="template-id"]
  208 -> 102 [style=dashed label="template-name"]
  208 -> 104 [style=dashed label="type-constraint"]
  208 -> 105 [style=dashed label="type-constraint-opt"]
  208 -> 413 [style=dashed label="type-id"]
  208 -> 106 [style=dashed label="type-name"]
  208 -> 414 [style=dashed label="type-specifier"]
  208 -> 415 [style=dashed label="type-specifier-seq"]
  208 -> 108 [style=dashed label="typedef-name"]
  208 -> 416 [style=dashed label="typename-specifier"]
  208 -> 304 [style=dashed label="unary-expression"]
  208 -> 305 [style=dashed label="unary-operator"]
  208 -> 306 [style=dashed label="unqualified-id"]
  208 -> "208R19" [style=solid]
 "208R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  208 -> "208R458d" [label="[IDENTIFIER]", style=solid]
 "208R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  208 -> "208R688" [label="[\">\"]", style=solid]
 "208R688" [label="R688", fillcolor=3, shape=diamond, style=filled]
  208 -> "208R710d" [label="[\"decltype\"]", style=solid]
 "208R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  208 -> "208R710" [label="[\"auto\"]", style=solid]
 "208R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  209 [label="State 209\n\l555 placeholder-type-specifier: type-constraint-opt \"decltype\" • \"(\" \"auto\" \")\"\l"]
  209 -> 417 [style=solid label="\"(\""]
  210 [label="State 210\n\l554 placeholder-type-specifier: type-constraint-opt \"auto\" •\l"]
  210 -> "210R554" [style=solid]
 "210R554" [label="R554", fillcolor=3, shape=diamond, style=filled]
  211 [label="State 211\n\l453 nested-name-specifier: type-name \"::\" •\l"]
  211 -> "211R453" [style=solid]
 "211R453" [label="R453", fillcolor=3, shape=diamond, style=filled]
  212 [label="State 212\n\l  0 $accept: result $end •\l"]
  212 -> "212R0" [style=solid]
 "212R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  213 [label="State 213\n\l271 export-declaration: \"export\" \"{\" declaration-seq-opt • \"}\"\l"]
  213 -> 418 [style=solid label="\"}\""]
  214 [label="State 214\n\l390 linkage-specification: \"extern\" string-literal \"{\" • declaration-seq-opt \"}\"\l"]
  214 -> 1 [style=solid label="\"constexpr\""]
  214 -> 2 [style=solid label="\"export\""]
  214 -> 3 [style=solid label="\"extern\""]
  214 -> 4 [style=solid label="IDENTIFIER"]
  214 -> 5 [style=solid label="\"inline\""]
  214 -> 6 [style=solid label="\"::\""]
  214 -> 7 [style=solid label="\"template\""]
  214 -> 8 [style=solid label="\"typename\""]
  214 -> 9 [style=solid label="\"virtual\""]
  214 -> 10 [style=solid label="\"using\""]
  214 -> 11 [style=solid label="\";\""]
  214 -> 12 [style=solid label="\"class\""]
  214 -> 13 [style=solid label="\"struct\""]
  214 -> 14 [style=solid label="\"union\""]
  214 -> 15 [style=solid label="\"const\""]
  214 -> 16 [style=solid label="\"volatile\""]
  214 -> 17 [style=solid label="\"friend\""]
  214 -> 18 [style=solid label="\"typedef\""]
  214 -> 19 [style=solid label="\"consteval\""]
  214 -> 20 [style=solid label="\"constinit\""]
  214 -> 21 [style=solid label="\"decltype\""]
  214 -> 22 [style=solid label="\"enum\""]
  214 -> 23 [style=solid label="\"explicit\""]
  214 -> 25 [style=solid label="\"import\""]
  214 -> 26 [style=solid label="\"namespace\""]
  214 -> 27 [style=solid label="\"char\""]
  214 -> 28 [style=solid label="\"char8_t\""]
  214 -> 29 [style=solid label="\"char16_t\""]
  214 -> 30 [style=solid label="\"char32_t\""]
  214 -> 31 [style=solid label="\"wchar_t\""]
  214 -> 32 [style=solid label="\"bool\""]
  214 -> 33 [style=solid label="\"short\""]
  214 -> 34 [style=solid label="\"int\""]
  214 -> 35 [style=solid label="\"long\""]
  214 -> 36 [style=solid label="\"signed\""]
  214 -> 37 [style=solid label="\"unsigned\""]
  214 -> 38 [style=solid label="\"float\""]
  214 -> 39 [style=solid label="\"double\""]
  214 -> 40 [style=solid label="\"void\""]
  214 -> 41 [style=solid label="\"static_assert\""]
  214 -> 42 [style=solid label="\"static\""]
  214 -> 43 [style=solid label="\"thread_local\""]
  214 -> 44 [style=solid label="\"mutable\""]
  214 -> 45 [style=dashed label="EXTERN-opt"]
  214 -> 46 [style=dashed label="INLINE-opt"]
  214 -> 47 [style=dashed label="alias-declaration"]
  214 -> 48 [style=dashed label="asm-declaration"]
  214 -> 49 [style=dashed label="attribute-declaration"]
  214 -> 50 [style=dashed label="attribute-specifier-seq"]
  214 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  214 -> 52 [style=dashed label="block-declaration"]
  214 -> 53 [style=dashed label="class-head"]
  214 -> 54 [style=dashed label="class-key"]
  214 -> 55 [style=dashed label="class-name"]
  214 -> 56 [style=dashed label="class-specifier"]
  214 -> 57 [style=dashed label="cv-qualifier"]
  214 -> 58 [style=dashed label="decl-specifier"]
  214 -> 59 [style=dashed label="decl-specifier-seq"]
  214 -> 60 [style=dashed label="declaration"]
  214 -> 61 [style=dashed label="declaration-seq"]
  214 -> 419 [style=dashed label="declaration-seq-opt"]
  214 -> 63 [style=dashed label="decltype-specifier"]
  214 -> 64 [style=dashed label="deduction-guide"]
  214 -> 65 [style=dashed label="defining-type-specifier"]
  214 -> 66 [style=dashed label="elaborated-enum-specifier"]
  214 -> 67 [style=dashed label="elaborated-type-specifier"]
  214 -> 68 [style=dashed label="empty-declaration"]
  214 -> 69 [style=dashed label="enum-head"]
  214 -> 70 [style=dashed label="enum-key"]
  214 -> 71 [style=dashed label="enum-name"]
  214 -> 72 [style=dashed label="enum-specifier"]
  214 -> 73 [style=dashed label="explicit-instantiation"]
  214 -> 74 [style=dashed label="explicit-specialization"]
  214 -> 75 [style=dashed label="explicit-specifier"]
  214 -> 76 [style=dashed label="explicit-specifier-opt"]
  214 -> 77 [style=dashed label="export-declaration"]
  214 -> 78 [style=dashed label="function-definition"]
  214 -> 79 [style=dashed label="function-specifier"]
  214 -> 82 [style=dashed label="linkage-specification"]
  214 -> 83 [style=dashed label="module-import-declaration"]
  214 -> 84 [style=dashed label="named-namespace-definition"]
  214 -> 85 [style=dashed label="namespace-alias"]
  214 -> 86 [style=dashed label="namespace-alias-definition"]
  214 -> 87 [style=dashed label="namespace-definition"]
  214 -> 88 [style=dashed label="namespace-name"]
  214 -> 89 [style=dashed label="nested-name-specifier"]
  214 -> 90 [style=dashed label="nested-name-specifier-opt"]
  214 -> 91 [style=dashed label="nested-namespace-definition"]
  214 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  214 -> 93 [style=dashed label="opaque-enum-declaration"]
  214 -> 94 [style=dashed label="placeholder-type-specifier"]
  214 -> 95 [style=dashed label="simple-declaration"]
  214 -> 96 [style=dashed label="simple-template-id"]
  214 -> 97 [style=dashed label="simple-type-specifier"]
  214 -> 98 [style=dashed label="static_assert-declaration"]
  214 -> 99 [style=dashed label="storage-class-specifier"]
  214 -> 100 [style=dashed label="template-declaration"]
  214 -> 101 [style=dashed label="template-head"]
  214 -> 102 [style=dashed label="template-name"]
  214 -> 104 [style=dashed label="type-constraint"]
  214 -> 105 [style=dashed label="type-constraint-opt"]
  214 -> 106 [style=dashed label="type-name"]
  214 -> 107 [style=dashed label="type-specifier"]
  214 -> 108 [style=dashed label="typedef-name"]
  214 -> 109 [style=dashed label="typename-specifier"]
  214 -> 110 [style=dashed label="unnamed-namespace-definition"]
  214 -> 111 [style=dashed label="using-declaration"]
  214 -> 112 [style=dashed label="using-directive"]
  214 -> 113 [style=dashed label="using-enum-declaration"]
  214 -> "214R9d" [label="[\"template\"]", style=solid]
 "214R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  214 -> "214R13d" [label="[\"namespace\"]", style=solid]
 "214R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  214 -> "214R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "214R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  214 -> "214R83" [label="[]", style=solid]
 "214R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  214 -> "214R208" [label="[\"}\"]", style=solid]
 "214R208" [label="R208", fillcolor=3, shape=diamond, style=filled]
  214 -> "214R268d" [label="[IDENTIFIER]", style=solid]
 "214R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  214 -> "214R458d" [label="[IDENTIFIER]", style=solid]
 "214R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  214 -> "214R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "214R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  215 [label="State 215\n\l391 linkage-specification: \"extern\" string-literal declaration •\l"]
  215 -> "215R391" [style=solid]
 "215R391" [label="R391", fillcolor=3, shape=diamond, style=filled]
  216 [label="State 216\n\l692 template-head: \"template\" • \"<\" template-parameter-list \">\" requires-clause-opt\l"]
  216 -> 420 [style=solid label="\"<\""]
  217 [label="State 217\n\l723 type-parameter-key: \"typename\" •\l"]
  217 -> "217R723" [style=solid]
 "217R723" [label="R723", fillcolor=3, shape=diamond, style=filled]
  218 [label="State 218\n\l722 type-parameter-key: \"class\" •\l"]
  218 -> "218R722" [style=solid]
 "218R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  219 [label="State 219\n\l265 explicit-specialization: \"template\" \"<\" \">\" • declaration\l"]
  219 -> 1 [style=solid label="\"constexpr\""]
  219 -> 2 [style=solid label="\"export\""]
  219 -> 3 [style=solid label="\"extern\""]
  219 -> 4 [style=solid label="IDENTIFIER"]
  219 -> 5 [style=solid label="\"inline\""]
  219 -> 6 [style=solid label="\"::\""]
  219 -> 7 [style=solid label="\"template\""]
  219 -> 8 [style=solid label="\"typename\""]
  219 -> 9 [style=solid label="\"virtual\""]
  219 -> 10 [style=solid label="\"using\""]
  219 -> 11 [style=solid label="\";\""]
  219 -> 12 [style=solid label="\"class\""]
  219 -> 13 [style=solid label="\"struct\""]
  219 -> 14 [style=solid label="\"union\""]
  219 -> 15 [style=solid label="\"const\""]
  219 -> 16 [style=solid label="\"volatile\""]
  219 -> 17 [style=solid label="\"friend\""]
  219 -> 18 [style=solid label="\"typedef\""]
  219 -> 19 [style=solid label="\"consteval\""]
  219 -> 20 [style=solid label="\"constinit\""]
  219 -> 21 [style=solid label="\"decltype\""]
  219 -> 22 [style=solid label="\"enum\""]
  219 -> 23 [style=solid label="\"explicit\""]
  219 -> 25 [style=solid label="\"import\""]
  219 -> 26 [style=solid label="\"namespace\""]
  219 -> 27 [style=solid label="\"char\""]
  219 -> 28 [style=solid label="\"char8_t\""]
  219 -> 29 [style=solid label="\"char16_t\""]
  219 -> 30 [style=solid label="\"char32_t\""]
  219 -> 31 [style=solid label="\"wchar_t\""]
  219 -> 32 [style=solid label="\"bool\""]
  219 -> 33 [style=solid label="\"short\""]
  219 -> 34 [style=solid label="\"int\""]
  219 -> 35 [style=solid label="\"long\""]
  219 -> 36 [style=solid label="\"signed\""]
  219 -> 37 [style=solid label="\"unsigned\""]
  219 -> 38 [style=solid label="\"float\""]
  219 -> 39 [style=solid label="\"double\""]
  219 -> 40 [style=solid label="\"void\""]
  219 -> 41 [style=solid label="\"static_assert\""]
  219 -> 42 [style=solid label="\"static\""]
  219 -> 43 [style=solid label="\"thread_local\""]
  219 -> 44 [style=solid label="\"mutable\""]
  219 -> 45 [style=dashed label="EXTERN-opt"]
  219 -> 46 [style=dashed label="INLINE-opt"]
  219 -> 47 [style=dashed label="alias-declaration"]
  219 -> 48 [style=dashed label="asm-declaration"]
  219 -> 49 [style=dashed label="attribute-declaration"]
  219 -> 50 [style=dashed label="attribute-specifier-seq"]
  219 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  219 -> 52 [style=dashed label="block-declaration"]
  219 -> 53 [style=dashed label="class-head"]
  219 -> 54 [style=dashed label="class-key"]
  219 -> 55 [style=dashed label="class-name"]
  219 -> 56 [style=dashed label="class-specifier"]
  219 -> 57 [style=dashed label="cv-qualifier"]
  219 -> 58 [style=dashed label="decl-specifier"]
  219 -> 59 [style=dashed label="decl-specifier-seq"]
  219 -> 421 [style=dashed label="declaration"]
  219 -> 63 [style=dashed label="decltype-specifier"]
  219 -> 64 [style=dashed label="deduction-guide"]
  219 -> 65 [style=dashed label="defining-type-specifier"]
  219 -> 66 [style=dashed label="elaborated-enum-specifier"]
  219 -> 67 [style=dashed label="elaborated-type-specifier"]
  219 -> 68 [style=dashed label="empty-declaration"]
  219 -> 69 [style=dashed label="enum-head"]
  219 -> 70 [style=dashed label="enum-key"]
  219 -> 71 [style=dashed label="enum-name"]
  219 -> 72 [style=dashed label="enum-specifier"]
  219 -> 73 [style=dashed label="explicit-instantiation"]
  219 -> 74 [style=dashed label="explicit-specialization"]
  219 -> 75 [style=dashed label="explicit-specifier"]
  219 -> 76 [style=dashed label="explicit-specifier-opt"]
  219 -> 77 [style=dashed label="export-declaration"]
  219 -> 78 [style=dashed label="function-definition"]
  219 -> 79 [style=dashed label="function-specifier"]
  219 -> 82 [style=dashed label="linkage-specification"]
  219 -> 83 [style=dashed label="module-import-declaration"]
  219 -> 84 [style=dashed label="named-namespace-definition"]
  219 -> 85 [style=dashed label="namespace-alias"]
  219 -> 86 [style=dashed label="namespace-alias-definition"]
  219 -> 87 [style=dashed label="namespace-definition"]
  219 -> 88 [style=dashed label="namespace-name"]
  219 -> 89 [style=dashed label="nested-name-specifier"]
  219 -> 90 [style=dashed label="nested-name-specifier-opt"]
  219 -> 91 [style=dashed label="nested-namespace-definition"]
  219 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  219 -> 93 [style=dashed label="opaque-enum-declaration"]
  219 -> 94 [style=dashed label="placeholder-type-specifier"]
  219 -> 95 [style=dashed label="simple-declaration"]
  219 -> 96 [style=dashed label="simple-template-id"]
  219 -> 97 [style=dashed label="simple-type-specifier"]
  219 -> 98 [style=dashed label="static_assert-declaration"]
  219 -> 99 [style=dashed label="storage-class-specifier"]
  219 -> 100 [style=dashed label="template-declaration"]
  219 -> 101 [style=dashed label="template-head"]
  219 -> 102 [style=dashed label="template-name"]
  219 -> 104 [style=dashed label="type-constraint"]
  219 -> 105 [style=dashed label="type-constraint-opt"]
  219 -> 106 [style=dashed label="type-name"]
  219 -> 107 [style=dashed label="type-specifier"]
  219 -> 108 [style=dashed label="typedef-name"]
  219 -> 109 [style=dashed label="typename-specifier"]
  219 -> 110 [style=dashed label="unnamed-namespace-definition"]
  219 -> 111 [style=dashed label="using-declaration"]
  219 -> 112 [style=dashed label="using-directive"]
  219 -> 113 [style=dashed label="using-enum-declaration"]
  219 -> "219R9d" [label="[\"template\"]", style=solid]
 "219R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  219 -> "219R13d" [label="[\"namespace\"]", style=solid]
 "219R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  219 -> "219R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "219R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  219 -> "219R83" [label="[]", style=solid]
 "219R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  219 -> "219R268d" [label="[IDENTIFIER]", style=solid]
 "219R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  219 -> "219R458d" [label="[IDENTIFIER]", style=solid]
 "219R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  219 -> "219R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "219R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  220 [label="State 220\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l543 parameter-declaration: attribute-specifier-seq-opt • THIS-opt decl-specifier-seq declarator\l544                      | attribute-specifier-seq-opt • THIS-opt decl-specifier-seq declarator \"=\" initializer-clause\l545                      | attribute-specifier-seq-opt • THIS-opt decl-specifier-seq abstract-declarator-opt\l546                      | attribute-specifier-seq-opt • THIS-opt decl-specifier-seq abstract-declarator-opt \"=\" initializer-clause\l"]
  220 -> 422 [style=solid label="\"this\""]
  220 -> 158 [style=solid label="\"alignas\""]
  220 -> 162 [style=solid label="\"[\""]
  220 -> 423 [style=dashed label="THIS-opt"]
  220 -> 166 [style=dashed label="alignment-specifier"]
  220 -> 167 [style=dashed label="attribute-specifier"]
  220 -> "220R23" [style=solid]
 "220R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  221 [label="State 221\n\l708 type-constraint: nested-name-specifier-opt • concept-name\l709                | nested-name-specifier-opt • concept-name \"<\" template-argument-list-opt \">\"\l"]
  221 -> 404 [style=solid label="IDENTIFIER"]
  221 -> 202 [style=dashed label="concept-name"]
  222 [label="State 222\n\l698 template-parameter: parameter-declaration •\l"]
  222 -> "222R698" [style=solid]
 "222R698" [label="R698", fillcolor=3, shape=diamond, style=filled]
  223 [label="State 223\n\l720 type-parameter: template-head • type-parameter-key ELLIPSIS-opt IDENTIFIER-opt\l721               | template-head • type-parameter-key IDENTIFIER-opt \"=\" id-expression\l"]
  223 -> 217 [style=solid label="\"typename\""]
  223 -> 218 [style=solid label="\"class\""]
  223 -> 424 [style=dashed label="type-parameter-key"]
  224 [label="State 224\n\l699 template-parameter-list: template-parameter •\l"]
  224 -> "224R699" [style=solid]
 "224R699" [label="R699", fillcolor=3, shape=diamond, style=filled]
  225 [label="State 225\n\l692 template-head: \"template\" \"<\" template-parameter-list • \">\" requires-clause-opt\l700 template-parameter-list: template-parameter-list • \",\" template-parameter\l"]
  225 -> 425 [style=solid label="\",\""]
  225 -> 426 [style=solid label="\">\""]
  226 [label="State 226\n\l718 type-parameter: type-constraint • ELLIPSIS-opt IDENTIFIER-opt\l719               | type-constraint • IDENTIFIER-opt \"=\" type-id\l"]
  226 -> 156 [style=solid label="\"...\""]
  226 -> 427 [style=solid label="IDENTIFIER"]
  226 -> 428 [style=dashed label="ELLIPSIS-opt"]
  226 -> 429 [style=dashed label="IDENTIFIER-opt"]
  226 -> "226R5d" [label="[IDENTIFIER]", style=solid]
 "226R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  226 -> "226R5" [style=solid]
 "226R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  226 -> "226R11" [label="[\"=\"]", style=solid]
 "226R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  227 [label="State 227\n\l697 template-parameter: type-parameter •\l"]
  227 -> "227R697" [style=solid]
 "227R697" [label="R697", fillcolor=3, shape=diamond, style=filled]
  228 [label="State 228\n\l716 type-parameter: type-parameter-key • ELLIPSIS-opt IDENTIFIER-opt\l717               | type-parameter-key • IDENTIFIER-opt \"=\" type-id\l"]
  228 -> 156 [style=solid label="\"...\""]
  228 -> 427 [style=solid label="IDENTIFIER"]
  228 -> 430 [style=dashed label="ELLIPSIS-opt"]
  228 -> 431 [style=dashed label="IDENTIFIER-opt"]
  228 -> "228R5d" [label="[IDENTIFIER]", style=solid]
 "228R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  228 -> "228R5" [style=solid]
 "228R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  228 -> "228R11" [label="[\"=\"]", style=solid]
 "228R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  229 [label="State 229\n\l456 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l733 typename-specifier: \"typename\" nested-name-specifier IDENTIFIER •\l"]
  229 -> 400 [style=solid label="\"::\""]
  229 -> "229R733d" [label="[\"::\"]", style=solid]
 "229R733d" [label="R733", fillcolor=5, shape=diamond, style=filled]
  229 -> "229R733" [style=solid]
 "229R733" [label="R733", fillcolor=3, shape=diamond, style=filled]
  230 [label="State 230\n\l 22 TEMPLATE-opt: \"template\" •\l"]
  230 -> "230R22" [style=solid]
 "230R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  231 [label="State 231\n\l457 nested-name-specifier: nested-name-specifier TEMPLATE-opt • simple-template-id \"::\"\l734 typename-specifier: \"typename\" nested-name-specifier TEMPLATE-opt • simple-template-id\l"]
  231 -> 192 [style=solid label="IDENTIFIER"]
  231 -> 432 [style=dashed label="simple-template-id"]
  231 -> 102 [style=dashed label="template-name"]
  232 [label="State 232\n\l 44 alias-declaration: \"using\" IDENTIFIER attribute-specifier-seq-opt • \"=\" defining-type-id \";\"\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l"]
  232 -> 433 [style=solid label="\"=\""]
  232 -> 158 [style=solid label="\"alignas\""]
  232 -> 162 [style=solid label="\"[\""]
  232 -> 166 [style=dashed label="alignment-specifier"]
  232 -> 167 [style=dashed label="attribute-specifier"]
  233 [label="State 233\n\l456 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l457                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l764 using-declarator: TYPENAME-opt nested-name-specifier • unqualified-id\l"]
  233 -> 434 [style=solid label="IDENTIFIER"]
  233 -> 230 [style=solid label="\"template\""]
  233 -> 249 [style=solid label="\"operator\""]
  233 -> 336 [style=solid label="\"~\""]
  233 -> 200 [style=dashed label="TEMPLATE-opt"]
  233 -> 273 [style=dashed label="conversion-function-id"]
  233 -> 283 [style=dashed label="literal-operator-id"]
  233 -> 290 [style=dashed label="operator-function-id"]
  233 -> 435 [style=dashed label="simple-template-id"]
  233 -> 301 [style=dashed label="template-id"]
  233 -> 102 [style=dashed label="template-name"]
  233 -> 436 [style=dashed label="unqualified-id"]
  233 -> "233R21d" [label="[IDENTIFIER]", style=solid]
 "233R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  234 [label="State 234\n\l768 using-enum-declaration: \"using\" elaborated-enum-specifier \";\" •\l"]
  234 -> "234R768" [style=solid]
 "234R768" [label="R768", fillcolor=3, shape=diamond, style=filled]
  235 [label="State 235\n\l765 using-declarator-list: using-declarator ELLIPSIS-opt •\l"]
  235 -> "235R765" [style=solid]
 "235R765" [label="R765", fillcolor=3, shape=diamond, style=filled]
  236 [label="State 236\n\l766 using-declarator-list: using-declarator-list \",\" • using-declarator ELLIPSIS-opt\l"]
  236 -> 124 [style=solid label="\"typename\""]
  236 -> 126 [style=dashed label="TYPENAME-opt"]
  236 -> 437 [style=dashed label="using-declarator"]
  236 -> "236R25" [style=solid]
 "236R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  237 [label="State 237\n\l763 using-declaration: \"using\" using-declarator-list \";\" •\l"]
  237 -> "237R763" [style=solid]
 "237R763" [label="R763", fillcolor=3, shape=diamond, style=filled]
  238 [label="State 238\n\l137 class-name: IDENTIFIER •\l246 enum-name: IDENTIFIER •\l444 namespace-alias: IDENTIFIER •\l450 namespace-name: IDENTIFIER •\l696 template-name: IDENTIFIER •\l731 typedef-name: IDENTIFIER •\l755 unqualified-id: IDENTIFIER •\l"]
  238 -> "238R137" [label="[\"::\"]", style=solid]
 "238R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  238 -> "238R246d" [label="[\"::\"]", style=solid]
 "238R246d" [label="R246", fillcolor=5, shape=diamond, style=filled]
  238 -> "238R444d" [label="[\"::\"]", style=solid]
 "238R444d" [label="R444", fillcolor=5, shape=diamond, style=filled]
  238 -> "238R450d" [label="[\"::\"]", style=solid]
 "238R450d" [label="R450", fillcolor=5, shape=diamond, style=filled]
  238 -> "238R696" [label="[\"<\"]", style=solid]
 "238R696" [label="R696", fillcolor=3, shape=diamond, style=filled]
  238 -> "238R731d" [label="[\"::\"]", style=solid]
 "238R731d" [label="R731", fillcolor=5, shape=diamond, style=filled]
  238 -> "238R755d" [label="[\"::\", \"<\"]", style=solid]
 "238R755d" [label="R755", fillcolor=5, shape=diamond, style=filled]
  238 -> "238R755" [label="[]", style=solid]
 "238R755" [label="R755", fillcolor=3, shape=diamond, style=filled]
  239 [label="State 239\n\l477 noexcept-expression: \"noexcept\" • \"(\" expression \")\"\l"]
  239 -> 438 [style=solid label="\"(\""]
  240 [label="State 240\n\l752 unary-operator: \"!\" •\l"]
  240 -> "240R752" [style=solid]
 "240R752" [label="R752", fillcolor=3, shape=diamond, style=filled]
  241 [label="State 241\n\l 20 SCOPE-opt: \"::\" •\l452 nested-name-specifier: \"::\" •\l"]
  241 -> "241R20" [label="[\"delete\", \"new\"]", style=solid]
 "241R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  241 -> "241R452" [style=solid]
 "241R452" [label="R452", fillcolor=3, shape=diamond, style=filled]
  242 [label="State 242\n\l578 primary-expression: \"this\" •\l"]
  242 -> "242R578" [style=solid]
 "242R578" [label="R578", fillcolor=3, shape=diamond, style=filled]
  243 [label="State 243\n\l750 unary-operator: \"+\" •\l"]
  243 -> "243R750" [style=solid]
 "243R750" [label="R750", fillcolor=3, shape=diamond, style=filled]
  244 [label="State 244\n\l751 unary-operator: \"-\" •\l"]
  244 -> "244R751" [style=solid]
 "244R751" [label="R751", fillcolor=3, shape=diamond, style=filled]
  245 [label="State 245\n\l130 cast-expression: \"(\" • type-id \")\" cast-expression\l285 fold-expression: \"(\" • cast-expression fold-operator \"...\" \")\"\l286                | \"(\" • \"...\" fold-operator cast-expression \")\"\l287                | \"(\" • cast-expression fold-operator \"...\" fold-operator cast-expression \")\"\l579 primary-expression: \"(\" • expression \")\"\l"]
  245 -> 439 [style=solid label="\"...\""]
  245 -> 238 [style=solid label="IDENTIFIER"]
  245 -> 239 [style=solid label="\"noexcept\""]
  245 -> 240 [style=solid label="\"!\""]
  245 -> 241 [style=solid label="\"::\""]
  245 -> 242 [style=solid label="\"this\""]
  245 -> 8 [style=solid label="\"typename\""]
  245 -> 243 [style=solid label="\"+\""]
  245 -> 244 [style=solid label="\"-\""]
  245 -> 245 [style=solid label="\"(\""]
  245 -> 246 [style=solid label="\"&\""]
  245 -> 247 [style=solid label="\"[\""]
  245 -> 248 [style=solid label="\"co_await\""]
  245 -> 12 [style=solid label="\"class\""]
  245 -> 13 [style=solid label="\"struct\""]
  245 -> 14 [style=solid label="\"union\""]
  245 -> 249 [style=solid label="\"operator\""]
  245 -> 15 [style=solid label="\"const\""]
  245 -> 16 [style=solid label="\"volatile\""]
  245 -> 21 [style=solid label="\"decltype\""]
  245 -> 125 [style=solid label="\"enum\""]
  245 -> 250 [style=solid label="\"*\""]
  245 -> 251 [style=solid label="\"requires\""]
  245 -> 252 [style=solid label="\"~\""]
  245 -> 253 [style=solid label="\"++\""]
  245 -> 254 [style=solid label="\"--\""]
  245 -> 255 [style=solid label="\"dynamic_cast\""]
  245 -> 256 [style=solid label="\"static_cast\""]
  245 -> 257 [style=solid label="\"reinterpret_cast\""]
  245 -> 258 [style=solid label="\"const_cast\""]
  245 -> 259 [style=solid label="\"typeid\""]
  245 -> 260 [style=solid label="\"literal\""]
  245 -> 27 [style=solid label="\"char\""]
  245 -> 28 [style=solid label="\"char8_t\""]
  245 -> 29 [style=solid label="\"char16_t\""]
  245 -> 30 [style=solid label="\"char32_t\""]
  245 -> 31 [style=solid label="\"wchar_t\""]
  245 -> 32 [style=solid label="\"bool\""]
  245 -> 33 [style=solid label="\"short\""]
  245 -> 34 [style=solid label="\"int\""]
  245 -> 35 [style=solid label="\"long\""]
  245 -> 36 [style=solid label="\"signed\""]
  245 -> 37 [style=solid label="\"unsigned\""]
  245 -> 38 [style=solid label="\"float\""]
  245 -> 39 [style=solid label="\"double\""]
  245 -> 40 [style=solid label="\"void\""]
  245 -> 118 [style=solid label="STRING_LITERAL"]
  245 -> 261 [style=solid label="\"throw\""]
  245 -> 262 [style=solid label="\"sizeof\""]
  245 -> 263 [style=solid label="\"alignof\""]
  245 -> 264 [style=solid label="\"co_yield\""]
  245 -> 265 [style=dashed label="SCOPE-opt"]
  245 -> 266 [style=dashed label="additive-expression"]
  245 -> 267 [style=dashed label="and-expression"]
  245 -> 268 [style=dashed label="assignment-expression"]
  245 -> 269 [style=dashed label="await-expression"]
  245 -> 440 [style=dashed label="cast-expression"]
  245 -> 406 [style=dashed label="class-key"]
  245 -> 55 [style=dashed label="class-name"]
  245 -> 271 [style=dashed label="compare-expression"]
  245 -> 272 [style=dashed label="conditional-expression"]
  245 -> 273 [style=dashed label="conversion-function-id"]
  245 -> 57 [style=dashed label="cv-qualifier"]
  245 -> 63 [style=dashed label="decltype-specifier"]
  245 -> 274 [style=dashed label="delete-expression"]
  245 -> 66 [style=dashed label="elaborated-enum-specifier"]
  245 -> 67 [style=dashed label="elaborated-type-specifier"]
  245 -> 71 [style=dashed label="enum-name"]
  245 -> 275 [style=dashed label="equality-expression"]
  245 -> 276 [style=dashed label="exclusive-or-expression"]
  245 -> 441 [style=dashed label="expression"]
  245 -> 278 [style=dashed label="fold-expression"]
  245 -> 279 [style=dashed label="id-expression"]
  245 -> 280 [style=dashed label="inclusive-or-expression"]
  245 -> 281 [style=dashed label="lambda-expression"]
  245 -> 282 [style=dashed label="lambda-introducer"]
  245 -> 283 [style=dashed label="literal-operator-id"]
  245 -> 284 [style=dashed label="logical-and-expression"]
  245 -> 285 [style=dashed label="logical-or-expression"]
  245 -> 286 [style=dashed label="multiplicative-expression"]
  245 -> 85 [style=dashed label="namespace-alias"]
  245 -> 88 [style=dashed label="namespace-name"]
  245 -> 287 [style=dashed label="nested-name-specifier"]
  245 -> 90 [style=dashed label="nested-name-specifier-opt"]
  245 -> 288 [style=dashed label="new-expression"]
  245 -> 289 [style=dashed label="noexcept-expression"]
  245 -> 290 [style=dashed label="operator-function-id"]
  245 -> 94 [style=dashed label="placeholder-type-specifier"]
  245 -> 291 [style=dashed label="pm-expression"]
  245 -> 292 [style=dashed label="postfix-expression"]
  245 -> 293 [style=dashed label="primary-expression"]
  245 -> 294 [style=dashed label="qualified-id"]
  245 -> 295 [style=dashed label="relational-expression"]
  245 -> 296 [style=dashed label="requires-expression"]
  245 -> 297 [style=dashed label="shift-expression"]
  245 -> 298 [style=dashed label="simple-template-id"]
  245 -> 409 [style=dashed label="simple-type-specifier"]
  245 -> 300 [style=dashed label="string-literal"]
  245 -> 301 [style=dashed label="template-id"]
  245 -> 102 [style=dashed label="template-name"]
  245 -> 302 [style=dashed label="throw-expression"]
  245 -> 104 [style=dashed label="type-constraint"]
  245 -> 105 [style=dashed label="type-constraint-opt"]
  245 -> 442 [style=dashed label="type-id"]
  245 -> 106 [style=dashed label="type-name"]
  245 -> 414 [style=dashed label="type-specifier"]
  245 -> 415 [style=dashed label="type-specifier-seq"]
  245 -> 108 [style=dashed label="typedef-name"]
  245 -> 416 [style=dashed label="typename-specifier"]
  245 -> 304 [style=dashed label="unary-expression"]
  245 -> 305 [style=dashed label="unary-operator"]
  245 -> 306 [style=dashed label="unqualified-id"]
  245 -> 307 [style=dashed label="yield-expression"]
  245 -> "245R19" [style=solid]
 "245R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  245 -> "245R458d" [label="[IDENTIFIER]", style=solid]
 "245R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  245 -> "245R710d" [label="[\"decltype\"]", style=solid]
 "245R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  245 -> "245R710" [label="[\"auto\"]", style=solid]
 "245R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  246 [label="State 246\n\l749 unary-operator: \"&\" •\l"]
  246 -> "246R749" [style=solid]
 "246R749" [label="R749", fillcolor=3, shape=diamond, style=filled]
  247 [label="State 247\n\l388 lambda-introducer: \"[\" • lambda-capture-opt \"]\"\l"]
  247 -> 156 [style=solid label="\"...\""]
  247 -> 443 [style=solid label="IDENTIFIER"]
  247 -> 444 [style=solid label="\"this\""]
  247 -> 445 [style=solid label="\"=\""]
  247 -> 446 [style=solid label="\"&\""]
  247 -> 447 [style=solid label="\"*\""]
  247 -> 448 [style=dashed label="ELLIPSIS-opt"]
  247 -> 449 [style=dashed label="capture"]
  247 -> 450 [style=dashed label="capture-default"]
  247 -> 451 [style=dashed label="capture-list"]
  247 -> 452 [style=dashed label="init-capture"]
  247 -> 453 [style=dashed label="lambda-capture"]
  247 -> 454 [style=dashed label="lambda-capture-opt"]
  247 -> 455 [style=dashed label="simple-capture"]
  247 -> "247R5d" [label="[IDENTIFIER]", style=solid]
 "247R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  247 -> "247R382" [label="[]", style=solid]
 "247R382" [label="R382", fillcolor=3, shape=diamond, style=filled]
  248 [label="State 248\n\l 90 await-expression: \"co_await\" • cast-expression\l"]
  248 -> 238 [style=solid label="IDENTIFIER"]
  248 -> 239 [style=solid label="\"noexcept\""]
  248 -> 240 [style=solid label="\"!\""]
  248 -> 241 [style=solid label="\"::\""]
  248 -> 242 [style=solid label="\"this\""]
  248 -> 8 [style=solid label="\"typename\""]
  248 -> 243 [style=solid label="\"+\""]
  248 -> 244 [style=solid label="\"-\""]
  248 -> 245 [style=solid label="\"(\""]
  248 -> 246 [style=solid label="\"&\""]
  248 -> 247 [style=solid label="\"[\""]
  248 -> 248 [style=solid label="\"co_await\""]
  248 -> 249 [style=solid label="\"operator\""]
  248 -> 21 [style=solid label="\"decltype\""]
  248 -> 250 [style=solid label="\"*\""]
  248 -> 251 [style=solid label="\"requires\""]
  248 -> 252 [style=solid label="\"~\""]
  248 -> 253 [style=solid label="\"++\""]
  248 -> 254 [style=solid label="\"--\""]
  248 -> 255 [style=solid label="\"dynamic_cast\""]
  248 -> 256 [style=solid label="\"static_cast\""]
  248 -> 257 [style=solid label="\"reinterpret_cast\""]
  248 -> 258 [style=solid label="\"const_cast\""]
  248 -> 259 [style=solid label="\"typeid\""]
  248 -> 260 [style=solid label="\"literal\""]
  248 -> 27 [style=solid label="\"char\""]
  248 -> 28 [style=solid label="\"char8_t\""]
  248 -> 29 [style=solid label="\"char16_t\""]
  248 -> 30 [style=solid label="\"char32_t\""]
  248 -> 31 [style=solid label="\"wchar_t\""]
  248 -> 32 [style=solid label="\"bool\""]
  248 -> 33 [style=solid label="\"short\""]
  248 -> 34 [style=solid label="\"int\""]
  248 -> 35 [style=solid label="\"long\""]
  248 -> 36 [style=solid label="\"signed\""]
  248 -> 37 [style=solid label="\"unsigned\""]
  248 -> 38 [style=solid label="\"float\""]
  248 -> 39 [style=solid label="\"double\""]
  248 -> 40 [style=solid label="\"void\""]
  248 -> 118 [style=solid label="STRING_LITERAL"]
  248 -> 262 [style=solid label="\"sizeof\""]
  248 -> 263 [style=solid label="\"alignof\""]
  248 -> 265 [style=dashed label="SCOPE-opt"]
  248 -> 269 [style=dashed label="await-expression"]
  248 -> 456 [style=dashed label="cast-expression"]
  248 -> 55 [style=dashed label="class-name"]
  248 -> 273 [style=dashed label="conversion-function-id"]
  248 -> 63 [style=dashed label="decltype-specifier"]
  248 -> 274 [style=dashed label="delete-expression"]
  248 -> 71 [style=dashed label="enum-name"]
  248 -> 278 [style=dashed label="fold-expression"]
  248 -> 279 [style=dashed label="id-expression"]
  248 -> 281 [style=dashed label="lambda-expression"]
  248 -> 282 [style=dashed label="lambda-introducer"]
  248 -> 283 [style=dashed label="literal-operator-id"]
  248 -> 85 [style=dashed label="namespace-alias"]
  248 -> 88 [style=dashed label="namespace-name"]
  248 -> 287 [style=dashed label="nested-name-specifier"]
  248 -> 90 [style=dashed label="nested-name-specifier-opt"]
  248 -> 288 [style=dashed label="new-expression"]
  248 -> 289 [style=dashed label="noexcept-expression"]
  248 -> 290 [style=dashed label="operator-function-id"]
  248 -> 94 [style=dashed label="placeholder-type-specifier"]
  248 -> 292 [style=dashed label="postfix-expression"]
  248 -> 293 [style=dashed label="primary-expression"]
  248 -> 294 [style=dashed label="qualified-id"]
  248 -> 296 [style=dashed label="requires-expression"]
  248 -> 298 [style=dashed label="simple-template-id"]
  248 -> 299 [style=dashed label="simple-type-specifier"]
  248 -> 300 [style=dashed label="string-literal"]
  248 -> 301 [style=dashed label="template-id"]
  248 -> 102 [style=dashed label="template-name"]
  248 -> 104 [style=dashed label="type-constraint"]
  248 -> 105 [style=dashed label="type-constraint-opt"]
  248 -> 106 [style=dashed label="type-name"]
  248 -> 108 [style=dashed label="typedef-name"]
  248 -> 303 [style=dashed label="typename-specifier"]
  248 -> 304 [style=dashed label="unary-expression"]
  248 -> 305 [style=dashed label="unary-operator"]
  248 -> 306 [style=dashed label="unqualified-id"]
  248 -> "248R19" [style=solid]
 "248R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  248 -> "248R458d" [label="[IDENTIFIER]", style=solid]
 "248R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  248 -> "248R710d" [label="[\"decltype\"]", style=solid]
 "248R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  248 -> "248R710" [label="[\"auto\"]", style=solid]
 "248R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  249 [label="State 249\n\l169 conversion-function-id: \"operator\" • conversion-type-id\l392 literal-operator-id: \"operator\" • string-literal IDENTIFIER\l393                    | \"operator\" • user-defined-string-literal\l497 operator-function-id: \"operator\" • overloadable-operator\l498                     | \"operator\" • overloadable-operator \"<\" template-argument-list-opt \">\"\l"]
  249 -> 457 [style=solid label="\",\""]
  249 -> 4 [style=solid label="IDENTIFIER"]
  249 -> 458 [style=solid label="\"!\""]
  249 -> 6 [style=solid label="\"::\""]
  249 -> 8 [style=solid label="\"typename\""]
  249 -> 459 [style=solid label="\"+\""]
  249 -> 460 [style=solid label="\"-\""]
  249 -> 461 [style=solid label="\"=\""]
  249 -> 462 [style=solid label="\"(\""]
  249 -> 463 [style=solid label="\"&\""]
  249 -> 464 [style=solid label="\"*=\""]
  249 -> 465 [style=solid label="\"/=\""]
  249 -> 466 [style=solid label="\"%=\""]
  249 -> 467 [style=solid label="\"+=\""]
  249 -> 468 [style=solid label="\"-=\""]
  249 -> 469 [style=solid label="\">>=\""]
  249 -> 470 [style=solid label="\"<<=\""]
  249 -> 471 [style=solid label="\"&=\""]
  249 -> 472 [style=solid label="\"^=\""]
  249 -> 473 [style=solid label="\"|=\""]
  249 -> 474 [style=solid label="\"[\""]
  249 -> 475 [style=solid label="\"co_await\""]
  249 -> 12 [style=solid label="\"class\""]
  249 -> 13 [style=solid label="\"struct\""]
  249 -> 14 [style=solid label="\"union\""]
  249 -> 476 [style=solid label="\"<=>\""]
  249 -> 477 [style=solid label="\"&&\""]
  249 -> 478 [style=solid label="\"||\""]
  249 -> 15 [style=solid label="\"const\""]
  249 -> 16 [style=solid label="\"volatile\""]
  249 -> 21 [style=solid label="\"decltype\""]
  249 -> 479 [style=solid label="\"->\""]
  249 -> 480 [style=solid label="\"delete\""]
  249 -> 125 [style=solid label="\"enum\""]
  249 -> 481 [style=solid label="\"==\""]
  249 -> 482 [style=solid label="\"!=\""]
  249 -> 483 [style=solid label="\"^\""]
  249 -> 484 [style=solid label="\"<\""]
  249 -> 485 [style=solid label="\">\""]
  249 -> 486 [style=solid label="\"*\""]
  249 -> 487 [style=solid label="\"/\""]
  249 -> 488 [style=solid label="\"%\""]
  249 -> 489 [style=solid label="\"|\""]
  249 -> 490 [style=solid label="\"<<\""]
  249 -> 491 [style=solid label="\">>\""]
  249 -> 492 [style=solid label="\"<=\""]
  249 -> 493 [style=solid label="\">=\""]
  249 -> 494 [style=solid label="\"->*\""]
  249 -> 495 [style=solid label="\"new\""]
  249 -> 496 [style=solid label="\"~\""]
  249 -> 497 [style=solid label="\"++\""]
  249 -> 498 [style=solid label="\"--\""]
  249 -> 27 [style=solid label="\"char\""]
  249 -> 28 [style=solid label="\"char8_t\""]
  249 -> 29 [style=solid label="\"char16_t\""]
  249 -> 30 [style=solid label="\"char32_t\""]
  249 -> 31 [style=solid label="\"wchar_t\""]
  249 -> 32 [style=solid label="\"bool\""]
  249 -> 33 [style=solid label="\"short\""]
  249 -> 34 [style=solid label="\"int\""]
  249 -> 35 [style=solid label="\"long\""]
  249 -> 36 [style=solid label="\"signed\""]
  249 -> 37 [style=solid label="\"unsigned\""]
  249 -> 38 [style=solid label="\"float\""]
  249 -> 39 [style=solid label="\"double\""]
  249 -> 40 [style=solid label="\"void\""]
  249 -> 118 [style=solid label="STRING_LITERAL"]
  249 -> 406 [style=dashed label="class-key"]
  249 -> 55 [style=dashed label="class-name"]
  249 -> 499 [style=dashed label="conversion-type-id"]
  249 -> 57 [style=dashed label="cv-qualifier"]
  249 -> 63 [style=dashed label="decltype-specifier"]
  249 -> 66 [style=dashed label="elaborated-enum-specifier"]
  249 -> 67 [style=dashed label="elaborated-type-specifier"]
  249 -> 71 [style=dashed label="enum-name"]
  249 -> 85 [style=dashed label="namespace-alias"]
  249 -> 88 [style=dashed label="namespace-name"]
  249 -> 89 [style=dashed label="nested-name-specifier"]
  249 -> 90 [style=dashed label="nested-name-specifier-opt"]
  249 -> 500 [style=dashed label="overloadable-operator"]
  249 -> 94 [style=dashed label="placeholder-type-specifier"]
  249 -> 96 [style=dashed label="simple-template-id"]
  249 -> 97 [style=dashed label="simple-type-specifier"]
  249 -> 501 [style=dashed label="string-literal"]
  249 -> 102 [style=dashed label="template-name"]
  249 -> 104 [style=dashed label="type-constraint"]
  249 -> 105 [style=dashed label="type-constraint-opt"]
  249 -> 106 [style=dashed label="type-name"]
  249 -> 414 [style=dashed label="type-specifier"]
  249 -> 502 [style=dashed label="type-specifier-seq"]
  249 -> 108 [style=dashed label="typedef-name"]
  249 -> 109 [style=dashed label="typename-specifier"]
  249 -> 503 [style=dashed label="user-defined-string-literal"]
  249 -> "249R458d" [label="[IDENTIFIER]", style=solid]
 "249R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  249 -> "249R710d" [label="[\"decltype\"]", style=solid]
 "249R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  249 -> "249R710" [label="[]", style=solid]
 "249R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  250 [label="State 250\n\l748 unary-operator: \"*\" •\l"]
  250 -> "250R748" [style=solid]
 "250R748" [label="R748", fillcolor=3, shape=diamond, style=filled]
  251 [label="State 251\n\l624 requires-expression: \"requires\" • requirement-parameter-list-opt requirement-body\l"]
  251 -> 504 [style=solid label="\"(\""]
  251 -> 505 [style=dashed label="requirement-parameter-list"]
  251 -> 506 [style=dashed label="requirement-parameter-list-opt"]
  251 -> "251R617" [style=solid]
 "251R617" [label="R617", fillcolor=3, shape=diamond, style=filled]
  252 [label="State 252\n\l753 unary-operator: \"~\" •\l759 unqualified-id: \"~\" • type-name\l760               | \"~\" • decltype-specifier\l"]
  252 -> 507 [style=solid label="IDENTIFIER"]
  252 -> 21 [style=solid label="\"decltype\""]
  252 -> 55 [style=dashed label="class-name"]
  252 -> 508 [style=dashed label="decltype-specifier"]
  252 -> 71 [style=dashed label="enum-name"]
  252 -> 96 [style=dashed label="simple-template-id"]
  252 -> 102 [style=dashed label="template-name"]
  252 -> 509 [style=dashed label="type-name"]
  252 -> 108 [style=dashed label="typedef-name"]
  252 -> "252R753d" [label="[IDENTIFIER, \"decltype\"]", style=solid]
 "252R753d" [label="R753", fillcolor=5, shape=diamond, style=filled]
  252 -> "252R753" [style=solid]
 "252R753" [label="R753", fillcolor=3, shape=diamond, style=filled]
  253 [label="State 253\n\l738 unary-expression: \"++\" • cast-expression\l"]
  253 -> 238 [style=solid label="IDENTIFIER"]
  253 -> 239 [style=solid label="\"noexcept\""]
  253 -> 240 [style=solid label="\"!\""]
  253 -> 241 [style=solid label="\"::\""]
  253 -> 242 [style=solid label="\"this\""]
  253 -> 8 [style=solid label="\"typename\""]
  253 -> 243 [style=solid label="\"+\""]
  253 -> 244 [style=solid label="\"-\""]
  253 -> 245 [style=solid label="\"(\""]
  253 -> 246 [style=solid label="\"&\""]
  253 -> 247 [style=solid label="\"[\""]
  253 -> 248 [style=solid label="\"co_await\""]
  253 -> 249 [style=solid label="\"operator\""]
  253 -> 21 [style=solid label="\"decltype\""]
  253 -> 250 [style=solid label="\"*\""]
  253 -> 251 [style=solid label="\"requires\""]
  253 -> 252 [style=solid label="\"~\""]
  253 -> 253 [style=solid label="\"++\""]
  253 -> 254 [style=solid label="\"--\""]
  253 -> 255 [style=solid label="\"dynamic_cast\""]
  253 -> 256 [style=solid label="\"static_cast\""]
  253 -> 257 [style=solid label="\"reinterpret_cast\""]
  253 -> 258 [style=solid label="\"const_cast\""]
  253 -> 259 [style=solid label="\"typeid\""]
  253 -> 260 [style=solid label="\"literal\""]
  253 -> 27 [style=solid label="\"char\""]
  253 -> 28 [style=solid label="\"char8_t\""]
  253 -> 29 [style=solid label="\"char16_t\""]
  253 -> 30 [style=solid label="\"char32_t\""]
  253 -> 31 [style=solid label="\"wchar_t\""]
  253 -> 32 [style=solid label="\"bool\""]
  253 -> 33 [style=solid label="\"short\""]
  253 -> 34 [style=solid label="\"int\""]
  253 -> 35 [style=solid label="\"long\""]
  253 -> 36 [style=solid label="\"signed\""]
  253 -> 37 [style=solid label="\"unsigned\""]
  253 -> 38 [style=solid label="\"float\""]
  253 -> 39 [style=solid label="\"double\""]
  253 -> 40 [style=solid label="\"void\""]
  253 -> 118 [style=solid label="STRING_LITERAL"]
  253 -> 262 [style=solid label="\"sizeof\""]
  253 -> 263 [style=solid label="\"alignof\""]
  253 -> 265 [style=dashed label="SCOPE-opt"]
  253 -> 269 [style=dashed label="await-expression"]
  253 -> 510 [style=dashed label="cast-expression"]
  253 -> 55 [style=dashed label="class-name"]
  253 -> 273 [style=dashed label="conversion-function-id"]
  253 -> 63 [style=dashed label="decltype-specifier"]
  253 -> 274 [style=dashed label="delete-expression"]
  253 -> 71 [style=dashed label="enum-name"]
  253 -> 278 [style=dashed label="fold-expression"]
  253 -> 279 [style=dashed label="id-expression"]
  253 -> 281 [style=dashed label="lambda-expression"]
  253 -> 282 [style=dashed label="lambda-introducer"]
  253 -> 283 [style=dashed label="literal-operator-id"]
  253 -> 85 [style=dashed label="namespace-alias"]
  253 -> 88 [style=dashed label="namespace-name"]
  253 -> 287 [style=dashed label="nested-name-specifier"]
  253 -> 90 [style=dashed label="nested-name-specifier-opt"]
  253 -> 288 [style=dashed label="new-expression"]
  253 -> 289 [style=dashed label="noexcept-expression"]
  253 -> 290 [style=dashed label="operator-function-id"]
  253 -> 94 [style=dashed label="placeholder-type-specifier"]
  253 -> 292 [style=dashed label="postfix-expression"]
  253 -> 293 [style=dashed label="primary-expression"]
  253 -> 294 [style=dashed label="qualified-id"]
  253 -> 296 [style=dashed label="requires-expression"]
  253 -> 298 [style=dashed label="simple-template-id"]
  253 -> 299 [style=dashed label="simple-type-specifier"]
  253 -> 300 [style=dashed label="string-literal"]
  253 -> 301 [style=dashed label="template-id"]
  253 -> 102 [style=dashed label="template-name"]
  253 -> 104 [style=dashed label="type-constraint"]
  253 -> 105 [style=dashed label="type-constraint-opt"]
  253 -> 106 [style=dashed label="type-name"]
  253 -> 108 [style=dashed label="typedef-name"]
  253 -> 303 [style=dashed label="typename-specifier"]
  253 -> 304 [style=dashed label="unary-expression"]
  253 -> 305 [style=dashed label="unary-operator"]
  253 -> 306 [style=dashed label="unqualified-id"]
  253 -> "253R19" [style=solid]
 "253R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  253 -> "253R458d" [label="[IDENTIFIER]", style=solid]
 "253R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  253 -> "253R710d" [label="[\"decltype\"]", style=solid]
 "253R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  253 -> "253R710" [label="[\"auto\"]", style=solid]
 "253R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  254 [label="State 254\n\l739 unary-expression: \"--\" • cast-expression\l"]
  254 -> 238 [style=solid label="IDENTIFIER"]
  254 -> 239 [style=solid label="\"noexcept\""]
  254 -> 240 [style=solid label="\"!\""]
  254 -> 241 [style=solid label="\"::\""]
  254 -> 242 [style=solid label="\"this\""]
  254 -> 8 [style=solid label="\"typename\""]
  254 -> 243 [style=solid label="\"+\""]
  254 -> 244 [style=solid label="\"-\""]
  254 -> 245 [style=solid label="\"(\""]
  254 -> 246 [style=solid label="\"&\""]
  254 -> 247 [style=solid label="\"[\""]
  254 -> 248 [style=solid label="\"co_await\""]
  254 -> 249 [style=solid label="\"operator\""]
  254 -> 21 [style=solid label="\"decltype\""]
  254 -> 250 [style=solid label="\"*\""]
  254 -> 251 [style=solid label="\"requires\""]
  254 -> 252 [style=solid label="\"~\""]
  254 -> 253 [style=solid label="\"++\""]
  254 -> 254 [style=solid label="\"--\""]
  254 -> 255 [style=solid label="\"dynamic_cast\""]
  254 -> 256 [style=solid label="\"static_cast\""]
  254 -> 257 [style=solid label="\"reinterpret_cast\""]
  254 -> 258 [style=solid label="\"const_cast\""]
  254 -> 259 [style=solid label="\"typeid\""]
  254 -> 260 [style=solid label="\"literal\""]
  254 -> 27 [style=solid label="\"char\""]
  254 -> 28 [style=solid label="\"char8_t\""]
  254 -> 29 [style=solid label="\"char16_t\""]
  254 -> 30 [style=solid label="\"char32_t\""]
  254 -> 31 [style=solid label="\"wchar_t\""]
  254 -> 32 [style=solid label="\"bool\""]
  254 -> 33 [style=solid label="\"short\""]
  254 -> 34 [style=solid label="\"int\""]
  254 -> 35 [style=solid label="\"long\""]
  254 -> 36 [style=solid label="\"signed\""]
  254 -> 37 [style=solid label="\"unsigned\""]
  254 -> 38 [style=solid label="\"float\""]
  254 -> 39 [style=solid label="\"double\""]
  254 -> 40 [style=solid label="\"void\""]
  254 -> 118 [style=solid label="STRING_LITERAL"]
  254 -> 262 [style=solid label="\"sizeof\""]
  254 -> 263 [style=solid label="\"alignof\""]
  254 -> 265 [style=dashed label="SCOPE-opt"]
  254 -> 269 [style=dashed label="await-expression"]
  254 -> 511 [style=dashed label="cast-expression"]
  254 -> 55 [style=dashed label="class-name"]
  254 -> 273 [style=dashed label="conversion-function-id"]
  254 -> 63 [style=dashed label="decltype-specifier"]
  254 -> 274 [style=dashed label="delete-expression"]
  254 -> 71 [style=dashed label="enum-name"]
  254 -> 278 [style=dashed label="fold-expression"]
  254 -> 279 [style=dashed label="id-expression"]
  254 -> 281 [style=dashed label="lambda-expression"]
  254 -> 282 [style=dashed label="lambda-introducer"]
  254 -> 283 [style=dashed label="literal-operator-id"]
  254 -> 85 [style=dashed label="namespace-alias"]
  254 -> 88 [style=dashed label="namespace-name"]
  254 -> 287 [style=dashed label="nested-name-specifier"]
  254 -> 90 [style=dashed label="nested-name-specifier-opt"]
  254 -> 288 [style=dashed label="new-expression"]
  254 -> 289 [style=dashed label="noexcept-expression"]
  254 -> 290 [style=dashed label="operator-function-id"]
  254 -> 94 [style=dashed label="placeholder-type-specifier"]
  254 -> 292 [style=dashed label="postfix-expression"]
  254 -> 293 [style=dashed label="primary-expression"]
  254 -> 294 [style=dashed label="qualified-id"]
  254 -> 296 [style=dashed label="requires-expression"]
  254 -> 298 [style=dashed label="simple-template-id"]
  254 -> 299 [style=dashed label="simple-type-specifier"]
  254 -> 300 [style=dashed label="string-literal"]
  254 -> 301 [style=dashed label="template-id"]
  254 -> 102 [style=dashed label="template-name"]
  254 -> 104 [style=dashed label="type-constraint"]
  254 -> 105 [style=dashed label="type-constraint-opt"]
  254 -> 106 [style=dashed label="type-name"]
  254 -> 108 [style=dashed label="typedef-name"]
  254 -> 303 [style=dashed label="typename-specifier"]
  254 -> 304 [style=dashed label="unary-expression"]
  254 -> 305 [style=dashed label="unary-operator"]
  254 -> 306 [style=dashed label="unqualified-id"]
  254 -> "254R19" [style=solid]
 "254R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  254 -> "254R458d" [label="[IDENTIFIER]", style=solid]
 "254R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  254 -> "254R710d" [label="[\"decltype\"]", style=solid]
 "254R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  254 -> "254R710" [label="[\"auto\"]", style=solid]
 "254R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  255 [label="State 255\n\l570 postfix-expression: \"dynamic_cast\" • \"<\" type-id \">\" \"(\" expression \")\"\l"]
  255 -> 512 [style=solid label="\"<\""]
  256 [label="State 256\n\l571 postfix-expression: \"static_cast\" • \"<\" type-id \">\" \"(\" expression \")\"\l"]
  256 -> 513 [style=solid label="\"<\""]
  257 [label="State 257\n\l572 postfix-expression: \"reinterpret_cast\" • \"<\" type-id \">\" \"(\" expression \")\"\l"]
  257 -> 514 [style=solid label="\"<\""]
  258 [label="State 258\n\l573 postfix-expression: \"const_cast\" • \"<\" type-id \">\" \"(\" expression \")\"\l"]
  258 -> 515 [style=solid label="\"<\""]
  259 [label="State 259\n\l574 postfix-expression: \"typeid\" • \"(\" expression \")\"\l575                   | \"typeid\" • \"(\" type-id \")\"\l"]
  259 -> 516 [style=solid label="\"(\""]
  260 [label="State 260\n\l576 primary-expression: \"literal\" •\l"]
  260 -> "260R576" [style=solid]
 "260R576" [label="R576", fillcolor=3, shape=diamond, style=filled]
  261 [label="State 261\n\l701 throw-expression: \"throw\" • assignment-expression-opt\l"]
  261 -> 238 [style=solid label="IDENTIFIER"]
  261 -> 239 [style=solid label="\"noexcept\""]
  261 -> 240 [style=solid label="\"!\""]
  261 -> 241 [style=solid label="\"::\""]
  261 -> 242 [style=solid label="\"this\""]
  261 -> 8 [style=solid label="\"typename\""]
  261 -> 243 [style=solid label="\"+\""]
  261 -> 244 [style=solid label="\"-\""]
  261 -> 245 [style=solid label="\"(\""]
  261 -> 246 [style=solid label="\"&\""]
  261 -> 247 [style=solid label="\"[\""]
  261 -> 248 [style=solid label="\"co_await\""]
  261 -> 249 [style=solid label="\"operator\""]
  261 -> 21 [style=solid label="\"decltype\""]
  261 -> 250 [style=solid label="\"*\""]
  261 -> 251 [style=solid label="\"requires\""]
  261 -> 252 [style=solid label="\"~\""]
  261 -> 253 [style=solid label="\"++\""]
  261 -> 254 [style=solid label="\"--\""]
  261 -> 255 [style=solid label="\"dynamic_cast\""]
  261 -> 256 [style=solid label="\"static_cast\""]
  261 -> 257 [style=solid label="\"reinterpret_cast\""]
  261 -> 258 [style=solid label="\"const_cast\""]
  261 -> 259 [style=solid label="\"typeid\""]
  261 -> 260 [style=solid label="\"literal\""]
  261 -> 27 [style=solid label="\"char\""]
  261 -> 28 [style=solid label="\"char8_t\""]
  261 -> 29 [style=solid label="\"char16_t\""]
  261 -> 30 [style=solid label="\"char32_t\""]
  261 -> 31 [style=solid label="\"wchar_t\""]
  261 -> 32 [style=solid label="\"bool\""]
  261 -> 33 [style=solid label="\"short\""]
  261 -> 34 [style=solid label="\"int\""]
  261 -> 35 [style=solid label="\"long\""]
  261 -> 36 [style=solid label="\"signed\""]
  261 -> 37 [style=solid label="\"unsigned\""]
  261 -> 38 [style=solid label="\"float\""]
  261 -> 39 [style=solid label="\"double\""]
  261 -> 40 [style=solid label="\"void\""]
  261 -> 118 [style=solid label="STRING_LITERAL"]
  261 -> 261 [style=solid label="\"throw\""]
  261 -> 262 [style=solid label="\"sizeof\""]
  261 -> 263 [style=solid label="\"alignof\""]
  261 -> 264 [style=solid label="\"co_yield\""]
  261 -> 265 [style=dashed label="SCOPE-opt"]
  261 -> 266 [style=dashed label="additive-expression"]
  261 -> 267 [style=dashed label="and-expression"]
  261 -> 517 [style=dashed label="assignment-expression"]
  261 -> 518 [style=dashed label="assignment-expression-opt"]
  261 -> 269 [style=dashed label="await-expression"]
  261 -> 270 [style=dashed label="cast-expression"]
  261 -> 55 [style=dashed label="class-name"]
  261 -> 271 [style=dashed label="compare-expression"]
  261 -> 272 [style=dashed label="conditional-expression"]
  261 -> 273 [style=dashed label="conversion-function-id"]
  261 -> 63 [style=dashed label="decltype-specifier"]
  261 -> 274 [style=dashed label="delete-expression"]
  261 -> 71 [style=dashed label="enum-name"]
  261 -> 275 [style=dashed label="equality-expression"]
  261 -> 276 [style=dashed label="exclusive-or-expression"]
  261 -> 278 [style=dashed label="fold-expression"]
  261 -> 279 [style=dashed label="id-expression"]
  261 -> 280 [style=dashed label="inclusive-or-expression"]
  261 -> 281 [style=dashed label="lambda-expression"]
  261 -> 282 [style=dashed label="lambda-introducer"]
  261 -> 283 [style=dashed label="literal-operator-id"]
  261 -> 284 [style=dashed label="logical-and-expression"]
  261 -> 285 [style=dashed label="logical-or-expression"]
  261 -> 286 [style=dashed label="multiplicative-expression"]
  261 -> 85 [style=dashed label="namespace-alias"]
  261 -> 88 [style=dashed label="namespace-name"]
  261 -> 287 [style=dashed label="nested-name-specifier"]
  261 -> 90 [style=dashed label="nested-name-specifier-opt"]
  261 -> 288 [style=dashed label="new-expression"]
  261 -> 289 [style=dashed label="noexcept-expression"]
  261 -> 290 [style=dashed label="operator-function-id"]
  261 -> 94 [style=dashed label="placeholder-type-specifier"]
  261 -> 291 [style=dashed label="pm-expression"]
  261 -> 292 [style=dashed label="postfix-expression"]
  261 -> 293 [style=dashed label="primary-expression"]
  261 -> 294 [style=dashed label="qualified-id"]
  261 -> 295 [style=dashed label="relational-expression"]
  261 -> 296 [style=dashed label="requires-expression"]
  261 -> 297 [style=dashed label="shift-expression"]
  261 -> 298 [style=dashed label="simple-template-id"]
  261 -> 299 [style=dashed label="simple-type-specifier"]
  261 -> 300 [style=dashed label="string-literal"]
  261 -> 301 [style=dashed label="template-id"]
  261 -> 102 [style=dashed label="template-name"]
  261 -> 302 [style=dashed label="throw-expression"]
  261 -> 104 [style=dashed label="type-constraint"]
  261 -> 105 [style=dashed label="type-constraint-opt"]
  261 -> 106 [style=dashed label="type-name"]
  261 -> 108 [style=dashed label="typedef-name"]
  261 -> 303 [style=dashed label="typename-specifier"]
  261 -> 304 [style=dashed label="unary-expression"]
  261 -> 305 [style=dashed label="unary-operator"]
  261 -> 306 [style=dashed label="unqualified-id"]
  261 -> 307 [style=dashed label="yield-expression"]
  261 -> "261R19" [label="[\"delete\", \"new\"]", style=solid]
 "261R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  261 -> "261R54" [style=solid]
 "261R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  261 -> "261R458d" [label="[IDENTIFIER]", style=solid]
 "261R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  261 -> "261R710d" [label="[\"decltype\"]", style=solid]
 "261R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  261 -> "261R710" [label="[\"auto\"]", style=solid]
 "261R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  262 [label="State 262\n\l741 unary-expression: \"sizeof\" • unary-expression\l742                 | \"sizeof\" • \"(\" type-id \")\"\l743                 | \"sizeof\" • \"...\" \"(\" IDENTIFIER \")\"\l"]
  262 -> 519 [style=solid label="\"...\""]
  262 -> 238 [style=solid label="IDENTIFIER"]
  262 -> 239 [style=solid label="\"noexcept\""]
  262 -> 240 [style=solid label="\"!\""]
  262 -> 241 [style=solid label="\"::\""]
  262 -> 242 [style=solid label="\"this\""]
  262 -> 8 [style=solid label="\"typename\""]
  262 -> 243 [style=solid label="\"+\""]
  262 -> 244 [style=solid label="\"-\""]
  262 -> 520 [style=solid label="\"(\""]
  262 -> 246 [style=solid label="\"&\""]
  262 -> 247 [style=solid label="\"[\""]
  262 -> 248 [style=solid label="\"co_await\""]
  262 -> 249 [style=solid label="\"operator\""]
  262 -> 21 [style=solid label="\"decltype\""]
  262 -> 250 [style=solid label="\"*\""]
  262 -> 251 [style=solid label="\"requires\""]
  262 -> 252 [style=solid label="\"~\""]
  262 -> 253 [style=solid label="\"++\""]
  262 -> 254 [style=solid label="\"--\""]
  262 -> 255 [style=solid label="\"dynamic_cast\""]
  262 -> 256 [style=solid label="\"static_cast\""]
  262 -> 257 [style=solid label="\"reinterpret_cast\""]
  262 -> 258 [style=solid label="\"const_cast\""]
  262 -> 259 [style=solid label="\"typeid\""]
  262 -> 260 [style=solid label="\"literal\""]
  262 -> 27 [style=solid label="\"char\""]
  262 -> 28 [style=solid label="\"char8_t\""]
  262 -> 29 [style=solid label="\"char16_t\""]
  262 -> 30 [style=solid label="\"char32_t\""]
  262 -> 31 [style=solid label="\"wchar_t\""]
  262 -> 32 [style=solid label="\"bool\""]
  262 -> 33 [style=solid label="\"short\""]
  262 -> 34 [style=solid label="\"int\""]
  262 -> 35 [style=solid label="\"long\""]
  262 -> 36 [style=solid label="\"signed\""]
  262 -> 37 [style=solid label="\"unsigned\""]
  262 -> 38 [style=solid label="\"float\""]
  262 -> 39 [style=solid label="\"double\""]
  262 -> 40 [style=solid label="\"void\""]
  262 -> 118 [style=solid label="STRING_LITERAL"]
  262 -> 262 [style=solid label="\"sizeof\""]
  262 -> 263 [style=solid label="\"alignof\""]
  262 -> 265 [style=dashed label="SCOPE-opt"]
  262 -> 269 [style=dashed label="await-expression"]
  262 -> 55 [style=dashed label="class-name"]
  262 -> 273 [style=dashed label="conversion-function-id"]
  262 -> 63 [style=dashed label="decltype-specifier"]
  262 -> 274 [style=dashed label="delete-expression"]
  262 -> 71 [style=dashed label="enum-name"]
  262 -> 278 [style=dashed label="fold-expression"]
  262 -> 279 [style=dashed label="id-expression"]
  262 -> 281 [style=dashed label="lambda-expression"]
  262 -> 282 [style=dashed label="lambda-introducer"]
  262 -> 283 [style=dashed label="literal-operator-id"]
  262 -> 85 [style=dashed label="namespace-alias"]
  262 -> 88 [style=dashed label="namespace-name"]
  262 -> 287 [style=dashed label="nested-name-specifier"]
  262 -> 90 [style=dashed label="nested-name-specifier-opt"]
  262 -> 288 [style=dashed label="new-expression"]
  262 -> 289 [style=dashed label="noexcept-expression"]
  262 -> 290 [style=dashed label="operator-function-id"]
  262 -> 94 [style=dashed label="placeholder-type-specifier"]
  262 -> 292 [style=dashed label="postfix-expression"]
  262 -> 293 [style=dashed label="primary-expression"]
  262 -> 294 [style=dashed label="qualified-id"]
  262 -> 296 [style=dashed label="requires-expression"]
  262 -> 298 [style=dashed label="simple-template-id"]
  262 -> 299 [style=dashed label="simple-type-specifier"]
  262 -> 300 [style=dashed label="string-literal"]
  262 -> 301 [style=dashed label="template-id"]
  262 -> 102 [style=dashed label="template-name"]
  262 -> 104 [style=dashed label="type-constraint"]
  262 -> 105 [style=dashed label="type-constraint-opt"]
  262 -> 106 [style=dashed label="type-name"]
  262 -> 108 [style=dashed label="typedef-name"]
  262 -> 303 [style=dashed label="typename-specifier"]
  262 -> 521 [style=dashed label="unary-expression"]
  262 -> 305 [style=dashed label="unary-operator"]
  262 -> 306 [style=dashed label="unqualified-id"]
  262 -> "262R19" [style=solid]
 "262R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  262 -> "262R458d" [label="[IDENTIFIER]", style=solid]
 "262R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  262 -> "262R710d" [label="[\"decltype\"]", style=solid]
 "262R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  262 -> "262R710" [label="[\"auto\"]", style=solid]
 "262R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  263 [label="State 263\n\l744 unary-expression: \"alignof\" • \"(\" type-id \")\"\l"]
  263 -> 522 [style=solid label="\"(\""]
  264 [label="State 264\n\l775 yield-expression: \"co_yield\" • assignment-expression\l776                 | \"co_yield\" • braced-init-list\l"]
  264 -> 238 [style=solid label="IDENTIFIER"]
  264 -> 239 [style=solid label="\"noexcept\""]
  264 -> 240 [style=solid label="\"!\""]
  264 -> 241 [style=solid label="\"::\""]
  264 -> 242 [style=solid label="\"this\""]
  264 -> 8 [style=solid label="\"typename\""]
  264 -> 243 [style=solid label="\"+\""]
  264 -> 244 [style=solid label="\"-\""]
  264 -> 245 [style=solid label="\"(\""]
  264 -> 246 [style=solid label="\"&\""]
  264 -> 247 [style=solid label="\"[\""]
  264 -> 248 [style=solid label="\"co_await\""]
  264 -> 380 [style=solid label="\"{\""]
  264 -> 249 [style=solid label="\"operator\""]
  264 -> 21 [style=solid label="\"decltype\""]
  264 -> 250 [style=solid label="\"*\""]
  264 -> 251 [style=solid label="\"requires\""]
  264 -> 252 [style=solid label="\"~\""]
  264 -> 253 [style=solid label="\"++\""]
  264 -> 254 [style=solid label="\"--\""]
  264 -> 255 [style=solid label="\"dynamic_cast\""]
  264 -> 256 [style=solid label="\"static_cast\""]
  264 -> 257 [style=solid label="\"reinterpret_cast\""]
  264 -> 258 [style=solid label="\"const_cast\""]
  264 -> 259 [style=solid label="\"typeid\""]
  264 -> 260 [style=solid label="\"literal\""]
  264 -> 27 [style=solid label="\"char\""]
  264 -> 28 [style=solid label="\"char8_t\""]
  264 -> 29 [style=solid label="\"char16_t\""]
  264 -> 30 [style=solid label="\"char32_t\""]
  264 -> 31 [style=solid label="\"wchar_t\""]
  264 -> 32 [style=solid label="\"bool\""]
  264 -> 33 [style=solid label="\"short\""]
  264 -> 34 [style=solid label="\"int\""]
  264 -> 35 [style=solid label="\"long\""]
  264 -> 36 [style=solid label="\"signed\""]
  264 -> 37 [style=solid label="\"unsigned\""]
  264 -> 38 [style=solid label="\"float\""]
  264 -> 39 [style=solid label="\"double\""]
  264 -> 40 [style=solid label="\"void\""]
  264 -> 118 [style=solid label="STRING_LITERAL"]
  264 -> 261 [style=solid label="\"throw\""]
  264 -> 262 [style=solid label="\"sizeof\""]
  264 -> 263 [style=solid label="\"alignof\""]
  264 -> 264 [style=solid label="\"co_yield\""]
  264 -> 265 [style=dashed label="SCOPE-opt"]
  264 -> 266 [style=dashed label="additive-expression"]
  264 -> 267 [style=dashed label="and-expression"]
  264 -> 523 [style=dashed label="assignment-expression"]
  264 -> 269 [style=dashed label="await-expression"]
  264 -> 524 [style=dashed label="braced-init-list"]
  264 -> 270 [style=dashed label="cast-expression"]
  264 -> 55 [style=dashed label="class-name"]
  264 -> 271 [style=dashed label="compare-expression"]
  264 -> 272 [style=dashed label="conditional-expression"]
  264 -> 273 [style=dashed label="conversion-function-id"]
  264 -> 63 [style=dashed label="decltype-specifier"]
  264 -> 274 [style=dashed label="delete-expression"]
  264 -> 71 [style=dashed label="enum-name"]
  264 -> 275 [style=dashed label="equality-expression"]
  264 -> 276 [style=dashed label="exclusive-or-expression"]
  264 -> 278 [style=dashed label="fold-expression"]
  264 -> 279 [style=dashed label="id-expression"]
  264 -> 280 [style=dashed label="inclusive-or-expression"]
  264 -> 281 [style=dashed label="lambda-expression"]
  264 -> 282 [style=dashed label="lambda-introducer"]
  264 -> 283 [style=dashed label="literal-operator-id"]
  264 -> 284 [style=dashed label="logical-and-expression"]
  264 -> 285 [style=dashed label="logical-or-expression"]
  264 -> 286 [style=dashed label="multiplicative-expression"]
  264 -> 85 [style=dashed label="namespace-alias"]
  264 -> 88 [style=dashed label="namespace-name"]
  264 -> 287 [style=dashed label="nested-name-specifier"]
  264 -> 90 [style=dashed label="nested-name-specifier-opt"]
  264 -> 288 [style=dashed label="new-expression"]
  264 -> 289 [style=dashed label="noexcept-expression"]
  264 -> 290 [style=dashed label="operator-function-id"]
  264 -> 94 [style=dashed label="placeholder-type-specifier"]
  264 -> 291 [style=dashed label="pm-expression"]
  264 -> 292 [style=dashed label="postfix-expression"]
  264 -> 293 [style=dashed label="primary-expression"]
  264 -> 294 [style=dashed label="qualified-id"]
  264 -> 295 [style=dashed label="relational-expression"]
  264 -> 296 [style=dashed label="requires-expression"]
  264 -> 297 [style=dashed label="shift-expression"]
  264 -> 298 [style=dashed label="simple-template-id"]
  264 -> 299 [style=dashed label="simple-type-specifier"]
  264 -> 300 [style=dashed label="string-literal"]
  264 -> 301 [style=dashed label="template-id"]
  264 -> 102 [style=dashed label="template-name"]
  264 -> 302 [style=dashed label="throw-expression"]
  264 -> 104 [style=dashed label="type-constraint"]
  264 -> 105 [style=dashed label="type-constraint-opt"]
  264 -> 106 [style=dashed label="type-name"]
  264 -> 108 [style=dashed label="typedef-name"]
  264 -> 303 [style=dashed label="typename-specifier"]
  264 -> 304 [style=dashed label="unary-expression"]
  264 -> 305 [style=dashed label="unary-operator"]
  264 -> 306 [style=dashed label="unqualified-id"]
  264 -> 307 [style=dashed label="yield-expression"]
  264 -> "264R19" [style=solid]
 "264R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  264 -> "264R458d" [label="[IDENTIFIER]", style=solid]
 "264R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  264 -> "264R710d" [label="[\"decltype\"]", style=solid]
 "264R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  264 -> "264R710" [label="[\"auto\"]", style=solid]
 "264R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  265 [label="State 265\n\l222 delete-expression: SCOPE-opt • \"delete\" cast-expression\l223                  | SCOPE-opt • \"delete\" \"[\" \"]\" cast-expression\l466 new-expression: SCOPE-opt • \"new\" new-placement-opt new-type-id new-initializer-opt\l467               | SCOPE-opt • \"new\" new-placement-opt \"(\" type-id \")\" new-initializer-opt\l"]
  265 -> 525 [style=solid label="\"delete\""]
  265 -> 526 [style=solid label="\"new\""]
  266 [label="State 266\n\l 42 additive-expression: additive-expression • \"+\" multiplicative-expression\l 43                    | additive-expression • \"-\" multiplicative-expression\l633 shift-expression: additive-expression •\l"]
  266 -> 527 [style=solid label="\"+\""]
  266 -> 528 [style=solid label="\"-\""]
  266 -> "266R633" [style=solid]
 "266R633" [label="R633", fillcolor=3, shape=diamond, style=filled]
  267 [label="State 267\n\l 48 and-expression: and-expression • \"&\" equality-expression\l262 exclusive-or-expression: and-expression •\l"]
  267 -> 529 [style=solid label="\"&\""]
  267 -> "267R262" [style=solid]
 "267R262" [label="R262", fillcolor=3, shape=diamond, style=filled]
  268 [label="State 268\n\l277 expression: assignment-expression •\l"]
  268 -> "268R277" [style=solid]
 "268R277" [label="R277", fillcolor=3, shape=diamond, style=filled]
  269 [label="State 269\n\l740 unary-expression: await-expression •\l"]
  269 -> "269R740" [style=solid]
 "269R740" [label="R740", fillcolor=3, shape=diamond, style=filled]
  270 [label="State 270\n\l556 pm-expression: cast-expression •\l"]
  270 -> "270R556" [style=solid]
 "270R556" [label="R556", fillcolor=3, shape=diamond, style=filled]
  271 [label="State 271\n\l147 compare-expression: compare-expression • \"<=>\" shift-expression\l606 relational-expression: compare-expression •\l"]
  271 -> 530 [style=solid label="\"<=>\""]
  271 -> "271R606" [style=solid]
 "271R606" [label="R606", fillcolor=3, shape=diamond, style=filled]
  272 [label="State 272\n\l 50 assignment-expression: conditional-expression •\l"]
  272 -> "272R50" [style=solid]
 "272R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  273 [label="State 273\n\l757 unqualified-id: conversion-function-id •\l"]
  273 -> "273R757" [style=solid]
 "273R757" [label="R757", fillcolor=3, shape=diamond, style=filled]
  274 [label="State 274\n\l747 unary-expression: delete-expression •\l"]
  274 -> "274R747" [style=solid]
 "274R747" [label="R747", fillcolor=3, shape=diamond, style=filled]
  275 [label="State 275\n\l 47 and-expression: equality-expression •\l257 equality-expression: equality-expression • \"==\" relational-expression\l258                    | equality-expression • \"!=\" relational-expression\l"]
  275 -> 531 [style=solid label="\"==\""]
  275 -> 532 [style=solid label="\"!=\""]
  275 -> "275R47" [style=solid]
 "275R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  276 [label="State 276\n\l263 exclusive-or-expression: exclusive-or-expression • \"^\" and-expression\l344 inclusive-or-expression: exclusive-or-expression •\l"]
  276 -> 533 [style=solid label="\"^\""]
  276 -> "276R344" [style=solid]
 "276R344" [label="R344", fillcolor=3, shape=diamond, style=filled]
  277 [label="State 277\n\l214 decltype-specifier: \"decltype\" \"(\" expression • \")\"\l278 expression: expression • \",\" assignment-expression\l"]
  277 -> 534 [style=solid label="\",\""]
  277 -> 535 [style=solid label="\")\""]
  278 [label="State 278\n\l582 primary-expression: fold-expression •\l"]
  278 -> "278R582" [style=solid]
 "278R582" [label="R582", fillcolor=3, shape=diamond, style=filled]
  279 [label="State 279\n\l580 primary-expression: id-expression •\l"]
  279 -> "279R580" [style=solid]
 "279R580" [label="R580", fillcolor=3, shape=diamond, style=filled]
  280 [label="State 280\n\l345 inclusive-or-expression: inclusive-or-expression • \"|\" exclusive-or-expression\l394 logical-and-expression: inclusive-or-expression •\l"]
  280 -> 536 [style=solid label="\"|\""]
  280 -> "280R394" [style=solid]
 "280R394" [label="R394", fillcolor=3, shape=diamond, style=filled]
  281 [label="State 281\n\l581 primary-expression: lambda-expression •\l"]
  281 -> "281R581" [style=solid]
 "281R581" [label="R581", fillcolor=3, shape=diamond, style=filled]
  282 [label="State 282\n\l386 lambda-expression: lambda-introducer • lambda-declarator compound-statement\l387                  | lambda-introducer • \"<\" template-parameter-list \">\" requires-clause-opt lambda-declarator compound-statement\l"]
  282 -> 1 [style=solid label="\"constexpr\""]
  282 -> 150 [style=solid label="\"extern\""]
  282 -> 4 [style=solid label="IDENTIFIER"]
  282 -> 151 [style=solid label="\"inline\""]
  282 -> 6 [style=solid label="\"::\""]
  282 -> 8 [style=solid label="\"typename\""]
  282 -> 9 [style=solid label="\"virtual\""]
  282 -> 537 [style=solid label="\"(\""]
  282 -> 12 [style=solid label="\"class\""]
  282 -> 13 [style=solid label="\"struct\""]
  282 -> 14 [style=solid label="\"union\""]
  282 -> 15 [style=solid label="\"const\""]
  282 -> 16 [style=solid label="\"volatile\""]
  282 -> 17 [style=solid label="\"friend\""]
  282 -> 18 [style=solid label="\"typedef\""]
  282 -> 19 [style=solid label="\"consteval\""]
  282 -> 20 [style=solid label="\"constinit\""]
  282 -> 21 [style=solid label="\"decltype\""]
  282 -> 22 [style=solid label="\"enum\""]
  282 -> 538 [style=solid label="\"<\""]
  282 -> 23 [style=solid label="\"explicit\""]
  282 -> 27 [style=solid label="\"char\""]
  282 -> 28 [style=solid label="\"char8_t\""]
  282 -> 29 [style=solid label="\"char16_t\""]
  282 -> 30 [style=solid label="\"char32_t\""]
  282 -> 31 [style=solid label="\"wchar_t\""]
  282 -> 32 [style=solid label="\"bool\""]
  282 -> 33 [style=solid label="\"short\""]
  282 -> 34 [style=solid label="\"int\""]
  282 -> 35 [style=solid label="\"long\""]
  282 -> 36 [style=solid label="\"signed\""]
  282 -> 37 [style=solid label="\"unsigned\""]
  282 -> 38 [style=solid label="\"float\""]
  282 -> 39 [style=solid label="\"double\""]
  282 -> 40 [style=solid label="\"void\""]
  282 -> 42 [style=solid label="\"static\""]
  282 -> 43 [style=solid label="\"thread_local\""]
  282 -> 44 [style=solid label="\"mutable\""]
  282 -> 53 [style=dashed label="class-head"]
  282 -> 54 [style=dashed label="class-key"]
  282 -> 55 [style=dashed label="class-name"]
  282 -> 56 [style=dashed label="class-specifier"]
  282 -> 57 [style=dashed label="cv-qualifier"]
  282 -> 58 [style=dashed label="decl-specifier"]
  282 -> 539 [style=dashed label="decl-specifier-seq"]
  282 -> 540 [style=dashed label="decl-specifier-seq-opt"]
  282 -> 63 [style=dashed label="decltype-specifier"]
  282 -> 65 [style=dashed label="defining-type-specifier"]
  282 -> 66 [style=dashed label="elaborated-enum-specifier"]
  282 -> 67 [style=dashed label="elaborated-type-specifier"]
  282 -> 69 [style=dashed label="enum-head"]
  282 -> 154 [style=dashed label="enum-key"]
  282 -> 71 [style=dashed label="enum-name"]
  282 -> 72 [style=dashed label="enum-specifier"]
  282 -> 155 [style=dashed label="explicit-specifier"]
  282 -> 79 [style=dashed label="function-specifier"]
  282 -> 541 [style=dashed label="lambda-declarator"]
  282 -> 542 [style=dashed label="lambda-specifiers"]
  282 -> 85 [style=dashed label="namespace-alias"]
  282 -> 88 [style=dashed label="namespace-name"]
  282 -> 89 [style=dashed label="nested-name-specifier"]
  282 -> 90 [style=dashed label="nested-name-specifier-opt"]
  282 -> 94 [style=dashed label="placeholder-type-specifier"]
  282 -> 96 [style=dashed label="simple-template-id"]
  282 -> 97 [style=dashed label="simple-type-specifier"]
  282 -> 99 [style=dashed label="storage-class-specifier"]
  282 -> 102 [style=dashed label="template-name"]
  282 -> 104 [style=dashed label="type-constraint"]
  282 -> 105 [style=dashed label="type-constraint-opt"]
  282 -> 106 [style=dashed label="type-name"]
  282 -> 107 [style=dashed label="type-specifier"]
  282 -> 108 [style=dashed label="typedef-name"]
  282 -> 109 [style=dashed label="typename-specifier"]
  282 -> "282R191" [style=solid]
 "282R191" [label="R191", fillcolor=3, shape=diamond, style=filled]
  282 -> "282R458d" [label="[IDENTIFIER]", style=solid]
 "282R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  282 -> "282R710d" [label="[\"decltype\"]", style=solid]
 "282R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  282 -> "282R710" [label="[\"auto\"]", style=solid]
 "282R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  283 [label="State 283\n\l695 template-id: literal-operator-id • \"<\" template-argument-list-opt \">\"\l758 unqualified-id: literal-operator-id •\l"]
  283 -> 543 [style=solid label="\"<\""]
  283 -> "283R758d" [label="[\"<\"]", style=solid]
 "283R758d" [label="R758", fillcolor=5, shape=diamond, style=filled]
  283 -> "283R758" [style=solid]
 "283R758" [label="R758", fillcolor=3, shape=diamond, style=filled]
  284 [label="State 284\n\l395 logical-and-expression: logical-and-expression • \"&&\" inclusive-or-expression\l396 logical-or-expression: logical-and-expression •\l"]
  284 -> 544 [style=solid label="\"&&\""]
  284 -> "284R396" [style=solid]
 "284R396" [label="R396", fillcolor=3, shape=diamond, style=filled]
  285 [label="State 285\n\l 53 assignment-expression: logical-or-expression • assignment-operator initializer-clause\l156 conditional-expression: logical-or-expression •\l157                       | logical-or-expression • \"?\" expression \":\" assignment-expression\l397 logical-or-expression: logical-or-expression • \"||\" logical-and-expression\l"]
  285 -> 545 [style=solid label="\"=\""]
  285 -> 546 [style=solid label="\"*=\""]
  285 -> 547 [style=solid label="\"/=\""]
  285 -> 548 [style=solid label="\"%=\""]
  285 -> 549 [style=solid label="\"+=\""]
  285 -> 550 [style=solid label="\"-=\""]
  285 -> 551 [style=solid label="\">>=\""]
  285 -> 552 [style=solid label="\"<<=\""]
  285 -> 553 [style=solid label="\"&=\""]
  285 -> 554 [style=solid label="\"^=\""]
  285 -> 555 [style=solid label="\"|=\""]
  285 -> 556 [style=solid label="\"?\""]
  285 -> 557 [style=solid label="\"||\""]
  285 -> 558 [style=dashed label="assignment-operator"]
  285 -> "285R156d" [label="[\"=\"]", style=solid]
 "285R156d" [label="R156", fillcolor=5, shape=diamond, style=filled]
  285 -> "285R156" [style=solid]
 "285R156" [label="R156", fillcolor=3, shape=diamond, style=filled]
  286 [label="State 286\n\l 41 additive-expression: multiplicative-expression •\l440 multiplicative-expression: multiplicative-expression • \"*\" pm-expression\l441                          | multiplicative-expression • \"/\" pm-expression\l442                          | multiplicative-expression • \"%\" pm-expression\l"]
  286 -> 559 [style=solid label="\"*\""]
  286 -> 560 [style=solid label="\"/\""]
  286 -> 561 [style=solid label="\"%\""]
  286 -> "286R41" [style=solid]
 "286R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  287 [label="State 287\n\l456 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l457                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l459 nested-name-specifier-opt: nested-name-specifier •\l600 qualified-id: nested-name-specifier • TEMPLATE-opt unqualified-id\l646 simple-type-specifier: nested-name-specifier • \"template\" simple-template-id\l"]
  287 -> 198 [style=solid label="IDENTIFIER"]
  287 -> 199 [style=solid label="\"template\""]
  287 -> 562 [style=dashed label="TEMPLATE-opt"]
  287 -> "287R21d" [label="[IDENTIFIER]", style=solid]
 "287R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  287 -> "287R21" [style=solid]
 "287R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  287 -> "287R459d" [label="[IDENTIFIER]", style=solid]
 "287R459d" [label="R459", fillcolor=5, shape=diamond, style=filled]
  288 [label="State 288\n\l746 unary-expression: new-expression •\l"]
  288 -> "288R746" [style=solid]
 "288R746" [label="R746", fillcolor=3, shape=diamond, style=filled]
  289 [label="State 289\n\l745 unary-expression: noexcept-expression •\l"]
  289 -> "289R745" [style=solid]
 "289R745" [label="R745", fillcolor=3, shape=diamond, style=filled]
  290 [label="State 290\n\l694 template-id: operator-function-id • \"<\" template-argument-list-opt \">\"\l756 unqualified-id: operator-function-id •\l"]
  290 -> 563 [style=solid label="\"<\""]
  290 -> "290R756d" [label="[\"<\"]", style=solid]
 "290R756d" [label="R756", fillcolor=5, shape=diamond, style=filled]
  290 -> "290R756" [style=solid]
 "290R756" [label="R756", fillcolor=3, shape=diamond, style=filled]
  291 [label="State 291\n\l439 multiplicative-expression: pm-expression •\l557 pm-expression: pm-expression • \".*\" cast-expression\l558              | pm-expression • \"->*\" cast-expression\l"]
  291 -> 564 [style=solid label="\".*\""]
  291 -> 565 [style=solid label="\"->*\""]
  291 -> "291R439" [style=solid]
 "291R439" [label="R439", fillcolor=3, shape=diamond, style=filled]
  292 [label="State 292\n\l560 postfix-expression: postfix-expression • \"[\" expression-list-opt \"]\"\l561                   | postfix-expression • \"(\" expression-list-opt \")\"\l566                   | postfix-expression • \".\" TEMPLATE-opt id-expression\l567                   | postfix-expression • \"->\" TEMPLATE-opt id-expression\l568                   | postfix-expression • \"++\"\l569                   | postfix-expression • \"--\"\l736 unary-expression: postfix-expression •\l"]
  292 -> 566 [style=solid label="\"(\""]
  292 -> 567 [style=solid label="\"[\""]
  292 -> 568 [style=solid label="\"->\""]
  292 -> 569 [style=solid label="\".\""]
  292 -> 570 [style=solid label="\"++\""]
  292 -> 571 [style=solid label="\"--\""]
  292 -> "292R736" [style=solid]
 "292R736" [label="R736", fillcolor=3, shape=diamond, style=filled]
  293 [label="State 293\n\l559 postfix-expression: primary-expression •\l"]
  293 -> "293R559" [style=solid]
 "293R559" [label="R559", fillcolor=3, shape=diamond, style=filled]
  294 [label="State 294\n\l341 id-expression: qualified-id •\l"]
  294 -> "294R341" [style=solid]
 "294R341" [label="R341", fillcolor=3, shape=diamond, style=filled]
  295 [label="State 295\n\l256 equality-expression: relational-expression •\l607 relational-expression: relational-expression • \"<\" compare-expression\l608                      | relational-expression • \">\" compare-expression\l609                      | relational-expression • \"<=\" compare-expression\l610                      | relational-expression • \">=\" compare-expression\l"]
  295 -> 572 [style=solid label="\"<\""]
  295 -> 573 [style=solid label="\">\""]
  295 -> 574 [style=solid label="\"<=\""]
  295 -> 575 [style=solid label="\">=\""]
  295 -> "295R256d" [label="[\">\"]", style=solid]
 "295R256d" [label="R256", fillcolor=5, shape=diamond, style=filled]
  295 -> "295R256" [style=solid]
 "295R256" [label="R256", fillcolor=3, shape=diamond, style=filled]
  296 [label="State 296\n\l583 primary-expression: requires-expression •\l"]
  296 -> "296R583" [style=solid]
 "296R583" [label="R583", fillcolor=3, shape=diamond, style=filled]
  297 [label="State 297\n\l146 compare-expression: shift-expression •\l634 shift-expression: shift-expression • \"<<\" additive-expression\l635                 | shift-expression • \">>\" additive-expression\l"]
  297 -> 576 [style=solid label="\"<<\""]
  297 -> 577 [style=solid label="\">>\""]
  297 -> "297R146" [style=solid]
 "297R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  298 [label="State 298\n\l138 class-name: simple-template-id •\l693 template-id: simple-template-id •\l732 typedef-name: simple-template-id •\l"]
  298 -> "298R138" [label="[\"::\"]", style=solid]
 "298R138" [label="R138", fillcolor=3, shape=diamond, style=filled]
  298 -> "298R693d" [label="[\"::\"]", style=solid]
 "298R693d" [label="R693", fillcolor=5, shape=diamond, style=filled]
  298 -> "298R693" [style=solid]
 "298R693" [label="R693", fillcolor=3, shape=diamond, style=filled]
  298 -> "298R732d" [label="[\"::\"]", style=solid]
 "298R732d" [label="R732", fillcolor=5, shape=diamond, style=filled]
  299 [label="State 299\n\l562 postfix-expression: simple-type-specifier • \"(\" expression-list-opt \")\"\l564                   | simple-type-specifier • braced-init-list\l"]
  299 -> 578 [style=solid label="\"(\""]
  299 -> 380 [style=solid label="\"{\""]
  299 -> 579 [style=dashed label="braced-init-list"]
  300 [label="State 300\n\l577 primary-expression: string-literal •\l"]
  300 -> "300R577" [style=solid]
 "300R577" [label="R577", fillcolor=3, shape=diamond, style=filled]
  301 [label="State 301\n\l761 unqualified-id: template-id •\l"]
  301 -> "301R761" [style=solid]
 "301R761" [label="R761", fillcolor=3, shape=diamond, style=filled]
  302 [label="State 302\n\l 52 assignment-expression: throw-expression •\l"]
  302 -> "302R52" [style=solid]
 "302R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  303 [label="State 303\n\l563 postfix-expression: typename-specifier • \"(\" expression-list-opt \")\"\l565                   | typename-specifier • braced-init-list\l"]
  303 -> 580 [style=solid label="\"(\""]
  303 -> 380 [style=solid label="\"{\""]
  303 -> 581 [style=dashed label="braced-init-list"]
  304 [label="State 304\n\l129 cast-expression: unary-expression •\l"]
  304 -> "304R129" [style=solid]
 "304R129" [label="R129", fillcolor=3, shape=diamond, style=filled]
  305 [label="State 305\n\l737 unary-expression: unary-operator • cast-expression\l"]
  305 -> 238 [style=solid label="IDENTIFIER"]
  305 -> 239 [style=solid label="\"noexcept\""]
  305 -> 240 [style=solid label="\"!\""]
  305 -> 241 [style=solid label="\"::\""]
  305 -> 242 [style=solid label="\"this\""]
  305 -> 8 [style=solid label="\"typename\""]
  305 -> 243 [style=solid label="\"+\""]
  305 -> 244 [style=solid label="\"-\""]
  305 -> 245 [style=solid label="\"(\""]
  305 -> 246 [style=solid label="\"&\""]
  305 -> 247 [style=solid label="\"[\""]
  305 -> 248 [style=solid label="\"co_await\""]
  305 -> 249 [style=solid label="\"operator\""]
  305 -> 21 [style=solid label="\"decltype\""]
  305 -> 250 [style=solid label="\"*\""]
  305 -> 251 [style=solid label="\"requires\""]
  305 -> 252 [style=solid label="\"~\""]
  305 -> 253 [style=solid label="\"++\""]
  305 -> 254 [style=solid label="\"--\""]
  305 -> 255 [style=solid label="\"dynamic_cast\""]
  305 -> 256 [style=solid label="\"static_cast\""]
  305 -> 257 [style=solid label="\"reinterpret_cast\""]
  305 -> 258 [style=solid label="\"const_cast\""]
  305 -> 259 [style=solid label="\"typeid\""]
  305 -> 260 [style=solid label="\"literal\""]
  305 -> 27 [style=solid label="\"char\""]
  305 -> 28 [style=solid label="\"char8_t\""]
  305 -> 29 [style=solid label="\"char16_t\""]
  305 -> 30 [style=solid label="\"char32_t\""]
  305 -> 31 [style=solid label="\"wchar_t\""]
  305 -> 32 [style=solid label="\"bool\""]
  305 -> 33 [style=solid label="\"short\""]
  305 -> 34 [style=solid label="\"int\""]
  305 -> 35 [style=solid label="\"long\""]
  305 -> 36 [style=solid label="\"signed\""]
  305 -> 37 [style=solid label="\"unsigned\""]
  305 -> 38 [style=solid label="\"float\""]
  305 -> 39 [style=solid label="\"double\""]
  305 -> 40 [style=solid label="\"void\""]
  305 -> 118 [style=solid label="STRING_LITERAL"]
  305 -> 262 [style=solid label="\"sizeof\""]
  305 -> 263 [style=solid label="\"alignof\""]
  305 -> 265 [style=dashed label="SCOPE-opt"]
  305 -> 269 [style=dashed label="await-expression"]
  305 -> 582 [style=dashed label="cast-expression"]
  305 -> 55 [style=dashed label="class-name"]
  305 -> 273 [style=dashed label="conversion-function-id"]
  305 -> 63 [style=dashed label="decltype-specifier"]
  305 -> 274 [style=dashed label="delete-expression"]
  305 -> 71 [style=dashed label="enum-name"]
  305 -> 278 [style=dashed label="fold-expression"]
  305 -> 279 [style=dashed label="id-expression"]
  305 -> 281 [style=dashed label="lambda-expression"]
  305 -> 282 [style=dashed label="lambda-introducer"]
  305 -> 283 [style=dashed label="literal-operator-id"]
  305 -> 85 [style=dashed label="namespace-alias"]
  305 -> 88 [style=dashed label="namespace-name"]
  305 -> 287 [style=dashed label="nested-name-specifier"]
  305 -> 90 [style=dashed label="nested-name-specifier-opt"]
  305 -> 288 [style=dashed label="new-expression"]
  305 -> 289 [style=dashed label="noexcept-expression"]
  305 -> 290 [style=dashed label="operator-function-id"]
  305 -> 94 [style=dashed label="placeholder-type-specifier"]
  305 -> 292 [style=dashed label="postfix-expression"]
  305 -> 293 [style=dashed label="primary-expression"]
  305 -> 294 [style=dashed label="qualified-id"]
  305 -> 296 [style=dashed label="requires-expression"]
  305 -> 298 [style=dashed label="simple-template-id"]
  305 -> 299 [style=dashed label="simple-type-specifier"]
  305 -> 300 [style=dashed label="string-literal"]
  305 -> 301 [style=dashed label="template-id"]
  305 -> 102 [style=dashed label="template-name"]
  305 -> 104 [style=dashed label="type-constraint"]
  305 -> 105 [style=dashed label="type-constraint-opt"]
  305 -> 106 [style=dashed label="type-name"]
  305 -> 108 [style=dashed label="typedef-name"]
  305 -> 303 [style=dashed label="typename-specifier"]
  305 -> 304 [style=dashed label="unary-expression"]
  305 -> 305 [style=dashed label="unary-operator"]
  305 -> 306 [style=dashed label="unqualified-id"]
  305 -> "305R19" [style=solid]
 "305R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  305 -> "305R458d" [label="[IDENTIFIER]", style=solid]
 "305R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  305 -> "305R710d" [label="[\"decltype\"]", style=solid]
 "305R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  305 -> "305R710" [label="[\"auto\"]", style=solid]
 "305R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  306 [label="State 306\n\l340 id-expression: unqualified-id •\l"]
  306 -> "306R340" [style=solid]
 "306R340" [label="R340", fillcolor=3, shape=diamond, style=filled]
  307 [label="State 307\n\l 51 assignment-expression: yield-expression •\l"]
  307 -> "307R51" [style=solid]
 "307R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  308 [label="State 308\n\l228 elaborated-enum-specifier: \"enum\" nested-name-specifier-opt IDENTIFIER •\l"]
  308 -> "308R228" [style=solid]
 "308R228" [label="R228", fillcolor=3, shape=diamond, style=filled]
  309 [label="State 309\n\l158 constant-expression: conditional-expression •\l"]
  309 -> "309R158" [style=solid]
 "309R158" [label="R158", fillcolor=3, shape=diamond, style=filled]
  310 [label="State 310\n\l266 explicit-specifier: \"explicit\" \"(\" constant-expression • \")\"\l"]
  310 -> 583 [style=solid label="\")\""]
  311 [label="State 311\n\l156 conditional-expression: logical-or-expression •\l157                       | logical-or-expression • \"?\" expression \":\" assignment-expression\l397 logical-or-expression: logical-or-expression • \"||\" logical-and-expression\l"]
  311 -> 556 [style=solid label="\"?\""]
  311 -> 557 [style=solid label="\"||\""]
  311 -> "311R156" [style=solid]
 "311R156" [label="R156", fillcolor=3, shape=diamond, style=filled]
  312 [label="State 312\n\l332 global-module-fragment: \"module\" \";\" declaration-seq-opt •\l"]
  312 -> "312R332" [style=solid]
 "312R332" [label="R332", fillcolor=3, shape=diamond, style=filled]
  313 [label="State 313\n\l432 module-name-qualifier: IDENTIFIER \".\" •\l"]
  313 -> "313R432" [style=solid]
 "313R432" [label="R432", fillcolor=3, shape=diamond, style=filled]
  314 [label="State 314\n\l436 module-partition: \":\" module-name-qualifier-opt • IDENTIFIER\l"]
  314 -> 584 [style=solid label="IDENTIFIER"]
  315 [label="State 315\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l430 module-import-declaration: \"import\" header-name attribute-specifier-seq-opt • \";\"\l"]
  315 -> 585 [style=solid label="\";\""]
  315 -> 158 [style=solid label="\"alignas\""]
  315 -> 162 [style=solid label="\"[\""]
  315 -> 166 [style=dashed label="alignment-specifier"]
  315 -> 167 [style=dashed label="attribute-specifier"]
  316 [label="State 316\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l428 module-import-declaration: \"import\" module-name attribute-specifier-seq-opt • \";\"\l"]
  316 -> 586 [style=solid label="\";\""]
  316 -> 158 [style=solid label="\"alignas\""]
  316 -> 162 [style=solid label="\"[\""]
  316 -> 166 [style=dashed label="alignment-specifier"]
  316 -> 167 [style=dashed label="attribute-specifier"]
  317 [label="State 317\n\l433 module-name-qualifier: module-name-qualifier IDENTIFIER • \".\"\l"]
  317 -> 587 [style=solid label="\".\""]
  318 [label="State 318\n\l431 module-name: module-name-qualifier-opt IDENTIFIER •\l"]
  318 -> "318R431" [style=solid]
 "318R431" [label="R431", fillcolor=3, shape=diamond, style=filled]
  319 [label="State 319\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l429 module-import-declaration: \"import\" module-partition attribute-specifier-seq-opt • \";\"\l"]
  319 -> 588 [style=solid label="\";\""]
  319 -> 158 [style=solid label="\"alignas\""]
  319 -> 162 [style=solid label="\"[\""]
  319 -> 166 [style=dashed label="alignment-specifier"]
  319 -> 167 [style=dashed label="attribute-specifier"]
  320 [label="State 320\n\l445 namespace-alias-definition: \"namespace\" IDENTIFIER \"=\" • qualified-namespace-specifier \";\"\l"]
  320 -> 4 [style=solid label="IDENTIFIER"]
  320 -> 6 [style=solid label="\"::\""]
  320 -> 21 [style=solid label="\"decltype\""]
  320 -> 55 [style=dashed label="class-name"]
  320 -> 121 [style=dashed label="decltype-specifier"]
  320 -> 71 [style=dashed label="enum-name"]
  320 -> 85 [style=dashed label="namespace-alias"]
  320 -> 88 [style=dashed label="namespace-name"]
  320 -> 133 [style=dashed label="nested-name-specifier"]
  320 -> 589 [style=dashed label="nested-name-specifier-opt"]
  320 -> 590 [style=dashed label="qualified-namespace-specifier"]
  320 -> 96 [style=dashed label="simple-template-id"]
  320 -> 102 [style=dashed label="template-name"]
  320 -> 106 [style=dashed label="type-name"]
  320 -> 108 [style=dashed label="typedef-name"]
  320 -> "320R458d" [label="[IDENTIFIER]", style=solid]
 "320R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  321 [label="State 321\n\l235 enclosing-namespace-specifier: enclosing-namespace-specifier \"::\" • INLINE-opt IDENTIFIER\l460 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" • INLINE-opt IDENTIFIER \"{\" namespace-body \"}\"\l"]
  321 -> 591 [style=solid label="\"inline\""]
  321 -> 592 [style=dashed label="INLINE-opt"]
  321 -> "321R13" [style=solid]
 "321R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  322 [label="State 322\n\l676 static_assert-declaration: \"static_assert\" \"(\" constant-expression • \")\" \";\"\l677                          | \"static_assert\" \"(\" constant-expression • \",\" string-literal \")\" \";\"\l"]
  322 -> 593 [style=solid label="\",\""]
  322 -> 594 [style=solid label="\")\""]
  323 [label="State 323\n\l264 explicit-instantiation: EXTERN-opt \"template\" declaration •\l"]
  323 -> "323R264" [style=solid]
 "323R264" [label="R264", fillcolor=3, shape=diamond, style=filled]
  324 [label="State 324\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l443 named-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt • IDENTIFIER \"{\" namespace-body \"}\"\l754 unnamed-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt • \"{\" namespace-body \"}\"\l"]
  324 -> 595 [style=solid label="IDENTIFIER"]
  324 -> 158 [style=solid label="\"alignas\""]
  324 -> 162 [style=solid label="\"[\""]
  324 -> 596 [style=solid label="\"{\""]
  324 -> 166 [style=dashed label="alignment-specifier"]
  324 -> 167 [style=dashed label="attribute-specifier"]
  325 [label="State 325\n\l351 init-declarator-list: init-declarator-list • \",\" init-declarator\l641 simple-declaration: attribute-specifier-seq decl-specifier-seq init-declarator-list • \";\"\l"]
  325 -> 387 [style=solid label="\",\""]
  325 -> 597 [style=solid label="\";\""]
  326 [label="State 326\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l239 enum-head: enum-key attribute-specifier-seq-opt • enum-head-name-opt enum-base-opt\l"]
  326 -> 4 [style=solid label="IDENTIFIER"]
  326 -> 6 [style=solid label="\"::\""]
  326 -> 158 [style=solid label="\"alignas\""]
  326 -> 162 [style=solid label="\"[\""]
  326 -> 21 [style=solid label="\"decltype\""]
  326 -> 166 [style=dashed label="alignment-specifier"]
  326 -> 167 [style=dashed label="attribute-specifier"]
  326 -> 55 [style=dashed label="class-name"]
  326 -> 121 [style=dashed label="decltype-specifier"]
  326 -> 598 [style=dashed label="enum-head-name"]
  326 -> 395 [style=dashed label="enum-head-name-opt"]
  326 -> 71 [style=dashed label="enum-name"]
  326 -> 85 [style=dashed label="namespace-alias"]
  326 -> 88 [style=dashed label="namespace-name"]
  326 -> 133 [style=dashed label="nested-name-specifier"]
  326 -> 396 [style=dashed label="nested-name-specifier-opt"]
  326 -> 96 [style=dashed label="simple-template-id"]
  326 -> 102 [style=dashed label="template-name"]
  326 -> 106 [style=dashed label="type-name"]
  326 -> 108 [style=dashed label="typedef-name"]
  326 -> "326R241" [style=solid]
 "326R241" [label="R241", fillcolor=3, shape=diamond, style=filled]
  326 -> "326R458d" [label="[IDENTIFIER]", style=solid]
 "326R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  327 [label="State 327\n\l767 using-directive: attribute-specifier-seq-opt \"using\" \"namespace\" • nested-name-specifier-opt namespace-name \";\"\l"]
  327 -> 4 [style=solid label="IDENTIFIER"]
  327 -> 6 [style=solid label="\"::\""]
  327 -> 21 [style=solid label="\"decltype\""]
  327 -> 55 [style=dashed label="class-name"]
  327 -> 121 [style=dashed label="decltype-specifier"]
  327 -> 71 [style=dashed label="enum-name"]
  327 -> 85 [style=dashed label="namespace-alias"]
  327 -> 88 [style=dashed label="namespace-name"]
  327 -> 133 [style=dashed label="nested-name-specifier"]
  327 -> 599 [style=dashed label="nested-name-specifier-opt"]
  327 -> 96 [style=dashed label="simple-template-id"]
  327 -> 102 [style=dashed label="template-name"]
  327 -> 106 [style=dashed label="type-name"]
  327 -> 108 [style=dashed label="typedef-name"]
  327 -> "327R458d" [label="[IDENTIFIER]", style=solid]
 "327R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  328 [label="State 328\n\l 45 alignment-specifier: \"alignas\" \"(\" • type-id ELLIPSIS-opt \")\"\l 46                    | \"alignas\" \"(\" • constant-expression ELLIPSIS-opt \")\"\l"]
  328 -> 238 [style=solid label="IDENTIFIER"]
  328 -> 239 [style=solid label="\"noexcept\""]
  328 -> 240 [style=solid label="\"!\""]
  328 -> 241 [style=solid label="\"::\""]
  328 -> 242 [style=solid label="\"this\""]
  328 -> 8 [style=solid label="\"typename\""]
  328 -> 243 [style=solid label="\"+\""]
  328 -> 244 [style=solid label="\"-\""]
  328 -> 245 [style=solid label="\"(\""]
  328 -> 246 [style=solid label="\"&\""]
  328 -> 247 [style=solid label="\"[\""]
  328 -> 248 [style=solid label="\"co_await\""]
  328 -> 12 [style=solid label="\"class\""]
  328 -> 13 [style=solid label="\"struct\""]
  328 -> 14 [style=solid label="\"union\""]
  328 -> 249 [style=solid label="\"operator\""]
  328 -> 15 [style=solid label="\"const\""]
  328 -> 16 [style=solid label="\"volatile\""]
  328 -> 21 [style=solid label="\"decltype\""]
  328 -> 125 [style=solid label="\"enum\""]
  328 -> 250 [style=solid label="\"*\""]
  328 -> 251 [style=solid label="\"requires\""]
  328 -> 252 [style=solid label="\"~\""]
  328 -> 253 [style=solid label="\"++\""]
  328 -> 254 [style=solid label="\"--\""]
  328 -> 255 [style=solid label="\"dynamic_cast\""]
  328 -> 256 [style=solid label="\"static_cast\""]
  328 -> 257 [style=solid label="\"reinterpret_cast\""]
  328 -> 258 [style=solid label="\"const_cast\""]
  328 -> 259 [style=solid label="\"typeid\""]
  328 -> 260 [style=solid label="\"literal\""]
  328 -> 27 [style=solid label="\"char\""]
  328 -> 28 [style=solid label="\"char8_t\""]
  328 -> 29 [style=solid label="\"char16_t\""]
  328 -> 30 [style=solid label="\"char32_t\""]
  328 -> 31 [style=solid label="\"wchar_t\""]
  328 -> 32 [style=solid label="\"bool\""]
  328 -> 33 [style=solid label="\"short\""]
  328 -> 34 [style=solid label="\"int\""]
  328 -> 35 [style=solid label="\"long\""]
  328 -> 36 [style=solid label="\"signed\""]
  328 -> 37 [style=solid label="\"unsigned\""]
  328 -> 38 [style=solid label="\"float\""]
  328 -> 39 [style=solid label="\"double\""]
  328 -> 40 [style=solid label="\"void\""]
  328 -> 118 [style=solid label="STRING_LITERAL"]
  328 -> 262 [style=solid label="\"sizeof\""]
  328 -> 263 [style=solid label="\"alignof\""]
  328 -> 265 [style=dashed label="SCOPE-opt"]
  328 -> 266 [style=dashed label="additive-expression"]
  328 -> 267 [style=dashed label="and-expression"]
  328 -> 269 [style=dashed label="await-expression"]
  328 -> 270 [style=dashed label="cast-expression"]
  328 -> 406 [style=dashed label="class-key"]
  328 -> 55 [style=dashed label="class-name"]
  328 -> 271 [style=dashed label="compare-expression"]
  328 -> 309 [style=dashed label="conditional-expression"]
  328 -> 600 [style=dashed label="constant-expression"]
  328 -> 273 [style=dashed label="conversion-function-id"]
  328 -> 57 [style=dashed label="cv-qualifier"]
  328 -> 63 [style=dashed label="decltype-specifier"]
  328 -> 274 [style=dashed label="delete-expression"]
  328 -> 66 [style=dashed label="elaborated-enum-specifier"]
  328 -> 67 [style=dashed label="elaborated-type-specifier"]
  328 -> 71 [style=dashed label="enum-name"]
  328 -> 275 [style=dashed label="equality-expression"]
  328 -> 276 [style=dashed label="exclusive-or-expression"]
  328 -> 278 [style=dashed label="fold-expression"]
  328 -> 279 [style=dashed label="id-expression"]
  328 -> 280 [style=dashed label="inclusive-or-expression"]
  328 -> 281 [style=dashed label="lambda-expression"]
  328 -> 282 [style=dashed label="lambda-introducer"]
  328 -> 283 [style=dashed label="literal-operator-id"]
  328 -> 284 [style=dashed label="logical-and-expression"]
  328 -> 311 [style=dashed label="logical-or-expression"]
  328 -> 286 [style=dashed label="multiplicative-expression"]
  328 -> 85 [style=dashed label="namespace-alias"]
  328 -> 88 [style=dashed label="namespace-name"]
  328 -> 287 [style=dashed label="nested-name-specifier"]
  328 -> 90 [style=dashed label="nested-name-specifier-opt"]
  328 -> 288 [style=dashed label="new-expression"]
  328 -> 289 [style=dashed label="noexcept-expression"]
  328 -> 290 [style=dashed label="operator-function-id"]
  328 -> 94 [style=dashed label="placeholder-type-specifier"]
  328 -> 291 [style=dashed label="pm-expression"]
  328 -> 292 [style=dashed label="postfix-expression"]
  328 -> 293 [style=dashed label="primary-expression"]
  328 -> 294 [style=dashed label="qualified-id"]
  328 -> 295 [style=dashed label="relational-expression"]
  328 -> 296 [style=dashed label="requires-expression"]
  328 -> 297 [style=dashed label="shift-expression"]
  328 -> 298 [style=dashed label="simple-template-id"]
  328 -> 409 [style=dashed label="simple-type-specifier"]
  328 -> 300 [style=dashed label="string-literal"]
  328 -> 301 [style=dashed label="template-id"]
  328 -> 102 [style=dashed label="template-name"]
  328 -> 104 [style=dashed label="type-constraint"]
  328 -> 105 [style=dashed label="type-constraint-opt"]
  328 -> 601 [style=dashed label="type-id"]
  328 -> 106 [style=dashed label="type-name"]
  328 -> 414 [style=dashed label="type-specifier"]
  328 -> 415 [style=dashed label="type-specifier-seq"]
  328 -> 108 [style=dashed label="typedef-name"]
  328 -> 416 [style=dashed label="typename-specifier"]
  328 -> 304 [style=dashed label="unary-expression"]
  328 -> 305 [style=dashed label="unary-operator"]
  328 -> 306 [style=dashed label="unqualified-id"]
  328 -> "328R19" [style=solid]
 "328R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  328 -> "328R458d" [label="[IDENTIFIER]", style=solid]
 "328R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  328 -> "328R710d" [label="[\"decltype\"]", style=solid]
 "328R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  328 -> "328R710" [label="[\"auto\"]", style=solid]
 "328R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  329 [label="State 329\n\l491 noptr-declarator: noptr-declarator • parameters-and-qualifiers\l492                 | noptr-declarator • \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt\l591 ptr-declarator: noptr-declarator •\l"]
  329 -> 347 [style=solid label="\"(\""]
  329 -> 348 [style=solid label="\"[\""]
  329 -> 602 [style=dashed label="parameters-and-qualifiers"]
  329 -> "329R591d" [label="[\"(\"]", style=solid]
 "329R591d" [label="R591", fillcolor=5, shape=diamond, style=filled]
  329 -> "329R591" [style=solid]
 "329R591" [label="R591", fillcolor=3, shape=diamond, style=filled]
  330 [label="State 330\n\l493 noptr-declarator: \"(\" ptr-declarator • \")\"\l"]
  330 -> 603 [style=solid label="\")\""]
  331 [label="State 331\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l594 ptr-operator: \"&\" attribute-specifier-seq-opt •\l"]
  331 -> 158 [style=solid label="\"alignas\""]
  331 -> 162 [style=solid label="\"[\""]
  331 -> 166 [style=dashed label="alignment-specifier"]
  331 -> 167 [style=dashed label="attribute-specifier"]
  331 -> "331R594d" [label="[\"alignas\", \"[\"]", style=solid]
 "331R594d" [label="R594", fillcolor=5, shape=diamond, style=filled]
  331 -> "331R594" [style=solid]
 "331R594" [label="R594", fillcolor=3, shape=diamond, style=filled]
  332 [label="State 332\n\l 49 asm-declaration: attribute-specifier-seq-opt \"asm\" \"(\" • string-literal \")\" \";\"\l"]
  332 -> 118 [style=solid label="STRING_LITERAL"]
  332 -> 604 [style=dashed label="string-literal"]
  333 [label="State 333\n\l 80 attribute-specifier: \"[\" \"[\" • attribute-using-prefix-opt attribute-list \"]\" \"]\"\l"]
  333 -> 605 [style=solid label="\"using\""]
  333 -> 606 [style=dashed label="attribute-using-prefix"]
  333 -> 607 [style=dashed label="attribute-using-prefix-opt"]
  333 -> "333R88" [style=solid]
 "333R88" [label="R88", fillcolor=3, shape=diamond, style=filled]
  334 [label="State 334\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l595 ptr-operator: \"&&\" attribute-specifier-seq-opt •\l"]
  334 -> 158 [style=solid label="\"alignas\""]
  334 -> 162 [style=solid label="\"[\""]
  334 -> 166 [style=dashed label="alignment-specifier"]
  334 -> 167 [style=dashed label="attribute-specifier"]
  334 -> "334R595d" [label="[\"alignas\", \"[\"]", style=solid]
 "334R595d" [label="R595", fillcolor=5, shape=diamond, style=filled]
  334 -> "334R595" [style=solid]
 "334R595" [label="R595", fillcolor=3, shape=diamond, style=filled]
  335 [label="State 335\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l593 ptr-operator: \"*\" attribute-specifier-seq-opt • cv-qualifier-seq-opt\l"]
  335 -> 158 [style=solid label="\"alignas\""]
  335 -> 162 [style=solid label="\"[\""]
  335 -> 15 [style=solid label="\"const\""]
  335 -> 16 [style=solid label="\"volatile\""]
  335 -> 166 [style=dashed label="alignment-specifier"]
  335 -> 167 [style=dashed label="attribute-specifier"]
  335 -> 608 [style=dashed label="cv-qualifier"]
  335 -> 609 [style=dashed label="cv-qualifier-seq"]
  335 -> 610 [style=dashed label="cv-qualifier-seq-opt"]
  335 -> "335R178d" [label="[\"alignas\", \"[\", \"const\", \"volatile\"]", style=solid]
 "335R178d" [label="R178", fillcolor=5, shape=diamond, style=filled]
  335 -> "335R178" [style=solid]
 "335R178" [label="R178", fillcolor=3, shape=diamond, style=filled]
  336 [label="State 336\n\l759 unqualified-id: \"~\" • type-name\l760               | \"~\" • decltype-specifier\l"]
  336 -> 507 [style=solid label="IDENTIFIER"]
  336 -> 21 [style=solid label="\"decltype\""]
  336 -> 55 [style=dashed label="class-name"]
  336 -> 508 [style=dashed label="decltype-specifier"]
  336 -> 71 [style=dashed label="enum-name"]
  336 -> 96 [style=dashed label="simple-template-id"]
  336 -> 102 [style=dashed label="template-name"]
  336 -> 509 [style=dashed label="type-name"]
  336 -> 108 [style=dashed label="typedef-name"]
  337 [label="State 337\n\l213 declarator-id: ELLIPSIS-opt id-expression •\l"]
  337 -> "337R213" [style=solid]
 "337R213" [label="R213", fillcolor=3, shape=diamond, style=filled]
  338 [label="State 338\n\l456 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l457                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l600 qualified-id: nested-name-specifier • TEMPLATE-opt unqualified-id\l"]
  338 -> 198 [style=solid label="IDENTIFIER"]
  338 -> 230 [style=solid label="\"template\""]
  338 -> 562 [style=dashed label="TEMPLATE-opt"]
  338 -> "338R21d" [label="[IDENTIFIER]", style=solid]
 "338R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  338 -> "338R21" [style=solid]
 "338R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  339 [label="State 339\n\l602 ref-qualifier: \"&\" •\l"]
  339 -> "339R602" [style=solid]
 "339R602" [label="R602", fillcolor=3, shape=diamond, style=filled]
  340 [label="State 340\n\l603 ref-qualifier: \"&&\" •\l"]
  340 -> "340R603" [style=solid]
 "340R603" [label="R603", fillcolor=3, shape=diamond, style=filled]
  341 [label="State 341\n\l605 ref-qualifier-opt: ref-qualifier •\l"]
  341 -> "341R605" [style=solid]
 "341R605" [label="R605", fillcolor=3, shape=diamond, style=filled]
  342 [label="State 342\n\l642 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt • \"[\" identifier-list \"]\" initializer \";\"\l"]
  342 -> 611 [style=solid label="\"[\""]
  343 [label="State 343\n\l327 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator • virt-specifier-seq-opt function-body\l328                    | attribute-specifier-seq-opt decl-specifier-seq-opt declarator • requires-clause function-body\l"]
  343 -> 612 [style=solid label="\"final\""]
  343 -> 381 [style=solid label="\"requires\""]
  343 -> 613 [style=solid label="\"override\""]
  343 -> 614 [style=dashed label="requires-clause"]
  343 -> 615 [style=dashed label="virt-specifier"]
  343 -> 616 [style=dashed label="virt-specifier-seq"]
  343 -> 617 [style=dashed label="virt-specifier-seq-opt"]
  343 -> "343R773" [style=solid]
 "343R773" [label="R773", fillcolor=3, shape=diamond, style=filled]
  344 [label="State 344\n\l476 nodeclspec-function-declaration: attribute-specifier-seq-opt declarator \";\" •\l"]
  344 -> "344R476" [style=solid]
 "344R476" [label="R476", fillcolor=3, shape=diamond, style=filled]
  345 [label="State 345\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l490 noptr-declarator: declarator-id attribute-specifier-seq-opt •\l"]
  345 -> 158 [style=solid label="\"alignas\""]
  345 -> 162 [style=solid label="\"[\""]
  345 -> 166 [style=dashed label="alignment-specifier"]
  345 -> 167 [style=dashed label="attribute-specifier"]
  345 -> "345R490d" [label="[\"[\"]", style=solid]
 "345R490d" [label="R490", fillcolor=5, shape=diamond, style=filled]
  345 -> "345R490" [style=solid]
 "345R490" [label="R490", fillcolor=3, shape=diamond, style=filled]
  346 [label="State 346\n\l596 ptr-operator: nested-name-specifier \"*\" • attribute-specifier-seq-opt cv-qualifier-seq-opt\l"]
  346 -> 177 [style=dashed label="attribute-specifier-seq"]
  346 -> 618 [style=dashed label="attribute-specifier-seq-opt"]
  346 -> "346R83" [style=solid]
 "346R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  347 [label="State 347\n\l553 parameters-and-qualifiers: \"(\" • parameter-declaration-clause \")\" cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt\l"]
  347 -> 177 [style=dashed label="attribute-specifier-seq"]
  347 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  347 -> 619 [style=dashed label="parameter-declaration"]
  347 -> 620 [style=dashed label="parameter-declaration-clause"]
  347 -> 621 [style=dashed label="parameter-declaration-list"]
  347 -> 622 [style=dashed label="parameter-declaration-list-opt"]
  347 -> "347R83" [style=solid]
 "347R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  347 -> "347R551" [label="[\"...\", \")\"]", style=solid]
 "347R551" [label="R551", fillcolor=3, shape=diamond, style=filled]
  348 [label="State 348\n\l492 noptr-declarator: noptr-declarator \"[\" • constant-expression-opt \"]\" attribute-specifier-seq-opt\l"]
  348 -> 238 [style=solid label="IDENTIFIER"]
  348 -> 239 [style=solid label="\"noexcept\""]
  348 -> 240 [style=solid label="\"!\""]
  348 -> 241 [style=solid label="\"::\""]
  348 -> 242 [style=solid label="\"this\""]
  348 -> 8 [style=solid label="\"typename\""]
  348 -> 243 [style=solid label="\"+\""]
  348 -> 244 [style=solid label="\"-\""]
  348 -> 245 [style=solid label="\"(\""]
  348 -> 246 [style=solid label="\"&\""]
  348 -> 247 [style=solid label="\"[\""]
  348 -> 248 [style=solid label="\"co_await\""]
  348 -> 249 [style=solid label="\"operator\""]
  348 -> 21 [style=solid label="\"decltype\""]
  348 -> 250 [style=solid label="\"*\""]
  348 -> 251 [style=solid label="\"requires\""]
  348 -> 252 [style=solid label="\"~\""]
  348 -> 253 [style=solid label="\"++\""]
  348 -> 254 [style=solid label="\"--\""]
  348 -> 255 [style=solid label="\"dynamic_cast\""]
  348 -> 256 [style=solid label="\"static_cast\""]
  348 -> 257 [style=solid label="\"reinterpret_cast\""]
  348 -> 258 [style=solid label="\"const_cast\""]
  348 -> 259 [style=solid label="\"typeid\""]
  348 -> 260 [style=solid label="\"literal\""]
  348 -> 27 [style=solid label="\"char\""]
  348 -> 28 [style=solid label="\"char8_t\""]
  348 -> 29 [style=solid label="\"char16_t\""]
  348 -> 30 [style=solid label="\"char32_t\""]
  348 -> 31 [style=solid label="\"wchar_t\""]
  348 -> 32 [style=solid label="\"bool\""]
  348 -> 33 [style=solid label="\"short\""]
  348 -> 34 [style=solid label="\"int\""]
  348 -> 35 [style=solid label="\"long\""]
  348 -> 36 [style=solid label="\"signed\""]
  348 -> 37 [style=solid label="\"unsigned\""]
  348 -> 38 [style=solid label="\"float\""]
  348 -> 39 [style=solid label="\"double\""]
  348 -> 40 [style=solid label="\"void\""]
  348 -> 118 [style=solid label="STRING_LITERAL"]
  348 -> 262 [style=solid label="\"sizeof\""]
  348 -> 263 [style=solid label="\"alignof\""]
  348 -> 265 [style=dashed label="SCOPE-opt"]
  348 -> 266 [style=dashed label="additive-expression"]
  348 -> 267 [style=dashed label="and-expression"]
  348 -> 269 [style=dashed label="await-expression"]
  348 -> 270 [style=dashed label="cast-expression"]
  348 -> 55 [style=dashed label="class-name"]
  348 -> 271 [style=dashed label="compare-expression"]
  348 -> 309 [style=dashed label="conditional-expression"]
  348 -> 623 [style=dashed label="constant-expression"]
  348 -> 624 [style=dashed label="constant-expression-opt"]
  348 -> 273 [style=dashed label="conversion-function-id"]
  348 -> 63 [style=dashed label="decltype-specifier"]
  348 -> 274 [style=dashed label="delete-expression"]
  348 -> 71 [style=dashed label="enum-name"]
  348 -> 275 [style=dashed label="equality-expression"]
  348 -> 276 [style=dashed label="exclusive-or-expression"]
  348 -> 278 [style=dashed label="fold-expression"]
  348 -> 279 [style=dashed label="id-expression"]
  348 -> 280 [style=dashed label="inclusive-or-expression"]
  348 -> 281 [style=dashed label="lambda-expression"]
  348 -> 282 [style=dashed label="lambda-introducer"]
  348 -> 283 [style=dashed label="literal-operator-id"]
  348 -> 284 [style=dashed label="logical-and-expression"]
  348 -> 311 [style=dashed label="logical-or-expression"]
  348 -> 286 [style=dashed label="multiplicative-expression"]
  348 -> 85 [style=dashed label="namespace-alias"]
  348 -> 88 [style=dashed label="namespace-name"]
  348 -> 287 [style=dashed label="nested-name-specifier"]
  348 -> 90 [style=dashed label="nested-name-specifier-opt"]
  348 -> 288 [style=dashed label="new-expression"]
  348 -> 289 [style=dashed label="noexcept-expression"]
  348 -> 290 [style=dashed label="operator-function-id"]
  348 -> 94 [style=dashed label="placeholder-type-specifier"]
  348 -> 291 [style=dashed label="pm-expression"]
  348 -> 292 [style=dashed label="postfix-expression"]
  348 -> 293 [style=dashed label="primary-expression"]
  348 -> 294 [style=dashed label="qualified-id"]
  348 -> 295 [style=dashed label="relational-expression"]
  348 -> 296 [style=dashed label="requires-expression"]
  348 -> 297 [style=dashed label="shift-expression"]
  348 -> 298 [style=dashed label="simple-template-id"]
  348 -> 299 [style=dashed label="simple-type-specifier"]
  348 -> 300 [style=dashed label="string-literal"]
  348 -> 301 [style=dashed label="template-id"]
  348 -> 102 [style=dashed label="template-name"]
  348 -> 104 [style=dashed label="type-constraint"]
  348 -> 105 [style=dashed label="type-constraint-opt"]
  348 -> 106 [style=dashed label="type-name"]
  348 -> 108 [style=dashed label="typedef-name"]
  348 -> 303 [style=dashed label="typename-specifier"]
  348 -> 304 [style=dashed label="unary-expression"]
  348 -> 305 [style=dashed label="unary-operator"]
  348 -> 306 [style=dashed label="unqualified-id"]
  348 -> "348R19" [style=solid]
 "348R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  348 -> "348R159" [label="[\"]\"]", style=solid]
 "348R159" [label="R159", fillcolor=3, shape=diamond, style=filled]
  348 -> "348R458d" [label="[IDENTIFIER]", style=solid]
 "348R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  348 -> "348R710d" [label="[\"decltype\"]", style=solid]
 "348R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  348 -> "348R710" [label="[\"auto\"]", style=solid]
 "348R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  349 [label="State 349\n\l212 declarator: noptr-declarator parameters-and-qualifiers • trailing-return-type\l491 noptr-declarator: noptr-declarator parameters-and-qualifiers •\l"]
  349 -> 625 [style=solid label="\"->\""]
  349 -> 626 [style=dashed label="trailing-return-type"]
  349 -> "349R491" [style=solid]
 "349R491" [label="R491", fillcolor=3, shape=diamond, style=filled]
  350 [label="State 350\n\l592 ptr-declarator: ptr-operator ptr-declarator •\l"]
  350 -> "350R592" [style=solid]
 "350R592" [label="R592", fillcolor=3, shape=diamond, style=filled]
  351 [label="State 351\n\l 36 access-specifier: \"private\" •\l"]
  351 -> "351R36" [style=solid]
 "351R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  352 [label="State 352\n\l 37 access-specifier: \"protected\" •\l"]
  352 -> "352R37" [style=solid]
 "352R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  353 [label="State 353\n\l 38 access-specifier: \"public\" •\l"]
  353 -> "353R38" [style=solid]
 "353R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  354 [label="State 354\n\l243 enum-key: \"enum\" •\l244         | \"enum\" • \"class\"\l245         | \"enum\" • \"struct\"\l"]
  354 -> 131 [style=solid label="\"class\""]
  354 -> 132 [style=solid label="\"struct\""]
  354 -> "354R243" [style=solid]
 "354R243" [label="R243", fillcolor=3, shape=diamond, style=filled]
  355 [label="State 355\n\l424 member-specification: access-specifier • \":\" member-specification-opt\l"]
  355 -> 627 [style=solid label="\":\""]
  356 [label="State 356\n\l412 member-declaration: alias-declaration •\l"]
  356 -> "356R412" [style=solid]
 "356R412" [label="R412", fillcolor=3, shape=diamond, style=filled]
  357 [label="State 357\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l327 function-definition: attribute-specifier-seq-opt • decl-specifier-seq-opt declarator virt-specifier-seq-opt function-body\l328                    | attribute-specifier-seq-opt • decl-specifier-seq-opt declarator requires-clause function-body\l404 member-declaration: attribute-specifier-seq-opt • decl-specifier-seq-opt member-declarator-list-opt \";\"\l"]
  357 -> 1 [style=solid label="\"constexpr\""]
  357 -> 150 [style=solid label="\"extern\""]
  357 -> 4 [style=solid label="IDENTIFIER"]
  357 -> 151 [style=solid label="\"inline\""]
  357 -> 6 [style=solid label="\"::\""]
  357 -> 8 [style=solid label="\"typename\""]
  357 -> 9 [style=solid label="\"virtual\""]
  357 -> 158 [style=solid label="\"alignas\""]
  357 -> 162 [style=solid label="\"[\""]
  357 -> 12 [style=solid label="\"class\""]
  357 -> 13 [style=solid label="\"struct\""]
  357 -> 14 [style=solid label="\"union\""]
  357 -> 15 [style=solid label="\"const\""]
  357 -> 16 [style=solid label="\"volatile\""]
  357 -> 17 [style=solid label="\"friend\""]
  357 -> 18 [style=solid label="\"typedef\""]
  357 -> 19 [style=solid label="\"consteval\""]
  357 -> 20 [style=solid label="\"constinit\""]
  357 -> 21 [style=solid label="\"decltype\""]
  357 -> 22 [style=solid label="\"enum\""]
  357 -> 23 [style=solid label="\"explicit\""]
  357 -> 27 [style=solid label="\"char\""]
  357 -> 28 [style=solid label="\"char8_t\""]
  357 -> 29 [style=solid label="\"char16_t\""]
  357 -> 30 [style=solid label="\"char32_t\""]
  357 -> 31 [style=solid label="\"wchar_t\""]
  357 -> 32 [style=solid label="\"bool\""]
  357 -> 33 [style=solid label="\"short\""]
  357 -> 34 [style=solid label="\"int\""]
  357 -> 35 [style=solid label="\"long\""]
  357 -> 36 [style=solid label="\"signed\""]
  357 -> 37 [style=solid label="\"unsigned\""]
  357 -> 38 [style=solid label="\"float\""]
  357 -> 39 [style=solid label="\"double\""]
  357 -> 40 [style=solid label="\"void\""]
  357 -> 42 [style=solid label="\"static\""]
  357 -> 43 [style=solid label="\"thread_local\""]
  357 -> 44 [style=solid label="\"mutable\""]
  357 -> 166 [style=dashed label="alignment-specifier"]
  357 -> 167 [style=dashed label="attribute-specifier"]
  357 -> 53 [style=dashed label="class-head"]
  357 -> 54 [style=dashed label="class-key"]
  357 -> 55 [style=dashed label="class-name"]
  357 -> 56 [style=dashed label="class-specifier"]
  357 -> 57 [style=dashed label="cv-qualifier"]
  357 -> 58 [style=dashed label="decl-specifier"]
  357 -> 539 [style=dashed label="decl-specifier-seq"]
  357 -> 628 [style=dashed label="decl-specifier-seq-opt"]
  357 -> 63 [style=dashed label="decltype-specifier"]
  357 -> 65 [style=dashed label="defining-type-specifier"]
  357 -> 66 [style=dashed label="elaborated-enum-specifier"]
  357 -> 67 [style=dashed label="elaborated-type-specifier"]
  357 -> 69 [style=dashed label="enum-head"]
  357 -> 154 [style=dashed label="enum-key"]
  357 -> 71 [style=dashed label="enum-name"]
  357 -> 72 [style=dashed label="enum-specifier"]
  357 -> 155 [style=dashed label="explicit-specifier"]
  357 -> 79 [style=dashed label="function-specifier"]
  357 -> 85 [style=dashed label="namespace-alias"]
  357 -> 88 [style=dashed label="namespace-name"]
  357 -> 89 [style=dashed label="nested-name-specifier"]
  357 -> 90 [style=dashed label="nested-name-specifier-opt"]
  357 -> 94 [style=dashed label="placeholder-type-specifier"]
  357 -> 96 [style=dashed label="simple-template-id"]
  357 -> 97 [style=dashed label="simple-type-specifier"]
  357 -> 99 [style=dashed label="storage-class-specifier"]
  357 -> 102 [style=dashed label="template-name"]
  357 -> 104 [style=dashed label="type-constraint"]
  357 -> 105 [style=dashed label="type-constraint-opt"]
  357 -> 106 [style=dashed label="type-name"]
  357 -> 107 [style=dashed label="type-specifier"]
  357 -> 108 [style=dashed label="typedef-name"]
  357 -> 109 [style=dashed label="typename-specifier"]
  357 -> "357R191d" [label="[IDENTIFIER, \"::\", \"alignas\", \"[\", \"decltype\"]", style=solid]
 "357R191d" [label="R191", fillcolor=5, shape=diamond, style=filled]
  357 -> "357R191" [style=solid]
 "357R191" [label="R191", fillcolor=3, shape=diamond, style=filled]
  357 -> "357R458d" [label="[IDENTIFIER]", style=solid]
 "357R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  357 -> "357R710d" [label="[\"decltype\"]", style=solid]
 "357R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  357 -> "357R710" [label="[\"auto\"]", style=solid]
 "357R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  358 [label="State 358\n\l411 member-declaration: deduction-guide •\l"]
  358 -> "358R411" [style=solid]
 "358R411" [label="R411", fillcolor=3, shape=diamond, style=filled]
  359 [label="State 359\n\l414 member-declaration: empty-declaration •\l"]
  359 -> "359R414" [style=solid]
 "359R414" [label="R414", fillcolor=3, shape=diamond, style=filled]
  360 [label="State 360\n\l496 opaque-enum-declaration: enum-key • attribute-specifier-seq-opt enum-head-name enum-base-opt \";\"\l"]
  360 -> 177 [style=dashed label="attribute-specifier-seq"]
  360 -> 629 [style=dashed label="attribute-specifier-seq-opt"]
  360 -> "360R83" [style=solid]
 "360R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  361 [label="State 361\n\l410 member-declaration: explicit-specialization •\l"]
  361 -> "361R410" [style=solid]
 "361R410" [label="R410", fillcolor=3, shape=diamond, style=filled]
  362 [label="State 362\n\l269 explicit-specifier-opt: explicit-specifier •\l"]
  362 -> "362R269" [style=solid]
 "362R269" [label="R269", fillcolor=3, shape=diamond, style=filled]
  363 [label="State 363\n\l405 member-declaration: function-definition •\l"]
  363 -> "363R405" [style=solid]
 "363R405" [label="R405", fillcolor=3, shape=diamond, style=filled]
  364 [label="State 364\n\l423 member-specification: member-declaration • member-specification-opt\l"]
  364 -> 7 [style=solid label="\"template\""]
  364 -> 351 [style=solid label="\"private\""]
  364 -> 352 [style=solid label="\"protected\""]
  364 -> 353 [style=solid label="\"public\""]
  364 -> 10 [style=solid label="\"using\""]
  364 -> 11 [style=solid label="\";\""]
  364 -> 354 [style=solid label="\"enum\""]
  364 -> 23 [style=solid label="\"explicit\""]
  364 -> 41 [style=solid label="\"static_assert\""]
  364 -> 355 [style=dashed label="access-specifier"]
  364 -> 356 [style=dashed label="alias-declaration"]
  364 -> 177 [style=dashed label="attribute-specifier-seq"]
  364 -> 357 [style=dashed label="attribute-specifier-seq-opt"]
  364 -> 358 [style=dashed label="deduction-guide"]
  364 -> 359 [style=dashed label="empty-declaration"]
  364 -> 360 [style=dashed label="enum-key"]
  364 -> 361 [style=dashed label="explicit-specialization"]
  364 -> 362 [style=dashed label="explicit-specifier"]
  364 -> 76 [style=dashed label="explicit-specifier-opt"]
  364 -> 363 [style=dashed label="function-definition"]
  364 -> 364 [style=dashed label="member-declaration"]
  364 -> 365 [style=dashed label="member-specification"]
  364 -> 630 [style=dashed label="member-specification-opt"]
  364 -> 367 [style=dashed label="opaque-enum-declaration"]
  364 -> 368 [style=dashed label="static_assert-declaration"]
  364 -> 369 [style=dashed label="template-declaration"]
  364 -> 101 [style=dashed label="template-head"]
  364 -> 370 [style=dashed label="using-declaration"]
  364 -> 371 [style=dashed label="using-enum-declaration"]
  364 -> "364R83d" [label="[\";\", \"enum\", \"explicit\"]", style=solid]
 "364R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  364 -> "364R83" [style=solid]
 "364R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  364 -> "364R268d" [label="[IDENTIFIER]", style=solid]
 "364R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  364 -> "364R425" [label="[\"}\"]", style=solid]
 "364R425" [label="R425", fillcolor=3, shape=diamond, style=filled]
  365 [label="State 365\n\l426 member-specification-opt: member-specification •\l"]
  365 -> "365R426" [style=solid]
 "365R426" [label="R426", fillcolor=3, shape=diamond, style=filled]
  366 [label="State 366\n\l142 class-specifier: class-head \"{\" member-specification-opt • \"}\"\l"]
  366 -> 631 [style=solid label="\"}\""]
  367 [label="State 367\n\l413 member-declaration: opaque-enum-declaration •\l"]
  367 -> "367R413" [style=solid]
 "367R413" [label="R413", fillcolor=3, shape=diamond, style=filled]
  368 [label="State 368\n\l408 member-declaration: static_assert-declaration •\l"]
  368 -> "368R408" [style=solid]
 "368R408" [label="R408", fillcolor=3, shape=diamond, style=filled]
  369 [label="State 369\n\l409 member-declaration: template-declaration •\l"]
  369 -> "369R409" [style=solid]
 "369R409" [label="R409", fillcolor=3, shape=diamond, style=filled]
  370 [label="State 370\n\l406 member-declaration: using-declaration •\l"]
  370 -> "370R406" [style=solid]
 "370R406" [label="R406", fillcolor=3, shape=diamond, style=filled]
  371 [label="State 371\n\l407 member-declaration: using-enum-declaration •\l"]
  371 -> "371R407" [style=solid]
 "371R407" [label="R407", fillcolor=3, shape=diamond, style=filled]
  372 [label="State 372\n\l 99 base-clause: \":\" • base-specifier-list\l"]
  372 -> 177 [style=dashed label="attribute-specifier-seq"]
  372 -> 632 [style=dashed label="attribute-specifier-seq-opt"]
  372 -> 633 [style=dashed label="base-specifier"]
  372 -> 634 [style=dashed label="base-specifier-list"]
  372 -> "372R83" [style=solid]
 "372R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  373 [label="State 373\n\l101 base-clause-opt: base-clause •\l"]
  373 -> "373R101" [style=solid]
 "373R101" [label="R101", fillcolor=3, shape=diamond, style=filled]
  374 [label="State 374\n\l132 class-head: class-key attribute-specifier-seq-opt base-clause-opt •\l"]
  374 -> "374R132" [style=solid]
 "374R132" [label="R132", fillcolor=3, shape=diamond, style=filled]
  375 [label="State 375\n\l131 class-head: class-key attribute-specifier-seq-opt class-head-name • class-virt-specifier-opt base-clause-opt\l"]
  375 -> 635 [style=solid label="\"final\""]
  375 -> 636 [style=dashed label="class-virt-specifier"]
  375 -> 637 [style=dashed label="class-virt-specifier-opt"]
  375 -> "375R144" [style=solid]
 "375R144" [label="R144", fillcolor=3, shape=diamond, style=filled]
  376 [label="State 376\n\l133 class-head-name: nested-name-specifier-opt • class-name\l229 elaborated-type-specifier: class-key attribute-specifier-seq-opt nested-name-specifier-opt • IDENTIFIER\l"]
  376 -> 638 [style=solid label="IDENTIFIER"]
  376 -> 639 [style=dashed label="class-name"]
  376 -> 640 [style=dashed label="simple-template-id"]
  376 -> 102 [style=dashed label="template-name"]
  377 [label="State 377\n\l231 elaborated-type-specifier: class-key nested-name-specifier TEMPLATE-opt • simple-template-id\l457 nested-name-specifier: nested-name-specifier TEMPLATE-opt • simple-template-id \"::\"\l"]
  377 -> 192 [style=solid label="IDENTIFIER"]
  377 -> 641 [style=dashed label="simple-template-id"]
  377 -> 102 [style=dashed label="template-name"]
  378 [label="State 378\n\l116 brace-or-equal-initializer: \"=\" • initializer-clause\l"]
  378 -> 238 [style=solid label="IDENTIFIER"]
  378 -> 239 [style=solid label="\"noexcept\""]
  378 -> 240 [style=solid label="\"!\""]
  378 -> 241 [style=solid label="\"::\""]
  378 -> 242 [style=solid label="\"this\""]
  378 -> 8 [style=solid label="\"typename\""]
  378 -> 243 [style=solid label="\"+\""]
  378 -> 244 [style=solid label="\"-\""]
  378 -> 245 [style=solid label="\"(\""]
  378 -> 246 [style=solid label="\"&\""]
  378 -> 247 [style=solid label="\"[\""]
  378 -> 248 [style=solid label="\"co_await\""]
  378 -> 380 [style=solid label="\"{\""]
  378 -> 249 [style=solid label="\"operator\""]
  378 -> 21 [style=solid label="\"decltype\""]
  378 -> 250 [style=solid label="\"*\""]
  378 -> 251 [style=solid label="\"requires\""]
  378 -> 252 [style=solid label="\"~\""]
  378 -> 253 [style=solid label="\"++\""]
  378 -> 254 [style=solid label="\"--\""]
  378 -> 255 [style=solid label="\"dynamic_cast\""]
  378 -> 256 [style=solid label="\"static_cast\""]
  378 -> 257 [style=solid label="\"reinterpret_cast\""]
  378 -> 258 [style=solid label="\"const_cast\""]
  378 -> 259 [style=solid label="\"typeid\""]
  378 -> 260 [style=solid label="\"literal\""]
  378 -> 27 [style=solid label="\"char\""]
  378 -> 28 [style=solid label="\"char8_t\""]
  378 -> 29 [style=solid label="\"char16_t\""]
  378 -> 30 [style=solid label="\"char32_t\""]
  378 -> 31 [style=solid label="\"wchar_t\""]
  378 -> 32 [style=solid label="\"bool\""]
  378 -> 33 [style=solid label="\"short\""]
  378 -> 34 [style=solid label="\"int\""]
  378 -> 35 [style=solid label="\"long\""]
  378 -> 36 [style=solid label="\"signed\""]
  378 -> 37 [style=solid label="\"unsigned\""]
  378 -> 38 [style=solid label="\"float\""]
  378 -> 39 [style=solid label="\"double\""]
  378 -> 40 [style=solid label="\"void\""]
  378 -> 118 [style=solid label="STRING_LITERAL"]
  378 -> 261 [style=solid label="\"throw\""]
  378 -> 262 [style=solid label="\"sizeof\""]
  378 -> 263 [style=solid label="\"alignof\""]
  378 -> 264 [style=solid label="\"co_yield\""]
  378 -> 265 [style=dashed label="SCOPE-opt"]
  378 -> 266 [style=dashed label="additive-expression"]
  378 -> 267 [style=dashed label="and-expression"]
  378 -> 642 [style=dashed label="assignment-expression"]
  378 -> 269 [style=dashed label="await-expression"]
  378 -> 643 [style=dashed label="braced-init-list"]
  378 -> 270 [style=dashed label="cast-expression"]
  378 -> 55 [style=dashed label="class-name"]
  378 -> 271 [style=dashed label="compare-expression"]
  378 -> 272 [style=dashed label="conditional-expression"]
  378 -> 273 [style=dashed label="conversion-function-id"]
  378 -> 63 [style=dashed label="decltype-specifier"]
  378 -> 274 [style=dashed label="delete-expression"]
  378 -> 71 [style=dashed label="enum-name"]
  378 -> 275 [style=dashed label="equality-expression"]
  378 -> 276 [style=dashed label="exclusive-or-expression"]
  378 -> 278 [style=dashed label="fold-expression"]
  378 -> 279 [style=dashed label="id-expression"]
  378 -> 280 [style=dashed label="inclusive-or-expression"]
  378 -> 644 [style=dashed label="initializer-clause"]
  378 -> 281 [style=dashed label="lambda-expression"]
  378 -> 282 [style=dashed label="lambda-introducer"]
  378 -> 283 [style=dashed label="literal-operator-id"]
  378 -> 284 [style=dashed label="logical-and-expression"]
  378 -> 285 [style=dashed label="logical-or-expression"]
  378 -> 286 [style=dashed label="multiplicative-expression"]
  378 -> 85 [style=dashed label="namespace-alias"]
  378 -> 88 [style=dashed label="namespace-name"]
  378 -> 287 [style=dashed label="nested-name-specifier"]
  378 -> 90 [style=dashed label="nested-name-specifier-opt"]
  378 -> 288 [style=dashed label="new-expression"]
  378 -> 289 [style=dashed label="noexcept-expression"]
  378 -> 290 [style=dashed label="operator-function-id"]
  378 -> 94 [style=dashed label="placeholder-type-specifier"]
  378 -> 291 [style=dashed label="pm-expression"]
  378 -> 292 [style=dashed label="postfix-expression"]
  378 -> 293 [style=dashed label="primary-expression"]
  378 -> 294 [style=dashed label="qualified-id"]
  378 -> 295 [style=dashed label="relational-expression"]
  378 -> 296 [style=dashed label="requires-expression"]
  378 -> 297 [style=dashed label="shift-expression"]
  378 -> 298 [style=dashed label="simple-template-id"]
  378 -> 299 [style=dashed label="simple-type-specifier"]
  378 -> 300 [style=dashed label="string-literal"]
  378 -> 301 [style=dashed label="template-id"]
  378 -> 102 [style=dashed label="template-name"]
  378 -> 302 [style=dashed label="throw-expression"]
  378 -> 104 [style=dashed label="type-constraint"]
  378 -> 105 [style=dashed label="type-constraint-opt"]
  378 -> 106 [style=dashed label="type-name"]
  378 -> 108 [style=dashed label="typedef-name"]
  378 -> 303 [style=dashed label="typename-specifier"]
  378 -> 304 [style=dashed label="unary-expression"]
  378 -> 305 [style=dashed label="unary-operator"]
  378 -> 306 [style=dashed label="unqualified-id"]
  378 -> 307 [style=dashed label="yield-expression"]
  378 -> "378R19" [style=solid]
 "378R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  378 -> "378R458d" [label="[IDENTIFIER]", style=solid]
 "378R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  378 -> "378R710d" [label="[\"decltype\"]", style=solid]
 "378R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  378 -> "378R710" [label="[\"auto\"]", style=solid]
 "378R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  379 [label="State 379\n\l360 initializer: \"(\" • expression-list \")\"\l"]
  379 -> 238 [style=solid label="IDENTIFIER"]
  379 -> 239 [style=solid label="\"noexcept\""]
  379 -> 240 [style=solid label="\"!\""]
  379 -> 241 [style=solid label="\"::\""]
  379 -> 242 [style=solid label="\"this\""]
  379 -> 8 [style=solid label="\"typename\""]
  379 -> 243 [style=solid label="\"+\""]
  379 -> 244 [style=solid label="\"-\""]
  379 -> 245 [style=solid label="\"(\""]
  379 -> 246 [style=solid label="\"&\""]
  379 -> 247 [style=solid label="\"[\""]
  379 -> 248 [style=solid label="\"co_await\""]
  379 -> 380 [style=solid label="\"{\""]
  379 -> 249 [style=solid label="\"operator\""]
  379 -> 21 [style=solid label="\"decltype\""]
  379 -> 250 [style=solid label="\"*\""]
  379 -> 251 [style=solid label="\"requires\""]
  379 -> 252 [style=solid label="\"~\""]
  379 -> 253 [style=solid label="\"++\""]
  379 -> 254 [style=solid label="\"--\""]
  379 -> 255 [style=solid label="\"dynamic_cast\""]
  379 -> 256 [style=solid label="\"static_cast\""]
  379 -> 257 [style=solid label="\"reinterpret_cast\""]
  379 -> 258 [style=solid label="\"const_cast\""]
  379 -> 259 [style=solid label="\"typeid\""]
  379 -> 260 [style=solid label="\"literal\""]
  379 -> 27 [style=solid label="\"char\""]
  379 -> 28 [style=solid label="\"char8_t\""]
  379 -> 29 [style=solid label="\"char16_t\""]
  379 -> 30 [style=solid label="\"char32_t\""]
  379 -> 31 [style=solid label="\"wchar_t\""]
  379 -> 32 [style=solid label="\"bool\""]
  379 -> 33 [style=solid label="\"short\""]
  379 -> 34 [style=solid label="\"int\""]
  379 -> 35 [style=solid label="\"long\""]
  379 -> 36 [style=solid label="\"signed\""]
  379 -> 37 [style=solid label="\"unsigned\""]
  379 -> 38 [style=solid label="\"float\""]
  379 -> 39 [style=solid label="\"double\""]
  379 -> 40 [style=solid label="\"void\""]
  379 -> 118 [style=solid label="STRING_LITERAL"]
  379 -> 261 [style=solid label="\"throw\""]
  379 -> 262 [style=solid label="\"sizeof\""]
  379 -> 263 [style=solid label="\"alignof\""]
  379 -> 264 [style=solid label="\"co_yield\""]
  379 -> 265 [style=dashed label="SCOPE-opt"]
  379 -> 266 [style=dashed label="additive-expression"]
  379 -> 267 [style=dashed label="and-expression"]
  379 -> 642 [style=dashed label="assignment-expression"]
  379 -> 269 [style=dashed label="await-expression"]
  379 -> 643 [style=dashed label="braced-init-list"]
  379 -> 270 [style=dashed label="cast-expression"]
  379 -> 55 [style=dashed label="class-name"]
  379 -> 271 [style=dashed label="compare-expression"]
  379 -> 272 [style=dashed label="conditional-expression"]
  379 -> 273 [style=dashed label="conversion-function-id"]
  379 -> 63 [style=dashed label="decltype-specifier"]
  379 -> 274 [style=dashed label="delete-expression"]
  379 -> 71 [style=dashed label="enum-name"]
  379 -> 275 [style=dashed label="equality-expression"]
  379 -> 276 [style=dashed label="exclusive-or-expression"]
  379 -> 645 [style=dashed label="expression-list"]
  379 -> 278 [style=dashed label="fold-expression"]
  379 -> 279 [style=dashed label="id-expression"]
  379 -> 280 [style=dashed label="inclusive-or-expression"]
  379 -> 646 [style=dashed label="initializer-clause"]
  379 -> 647 [style=dashed label="initializer-list"]
  379 -> 281 [style=dashed label="lambda-expression"]
  379 -> 282 [style=dashed label="lambda-introducer"]
  379 -> 283 [style=dashed label="literal-operator-id"]
  379 -> 284 [style=dashed label="logical-and-expression"]
  379 -> 285 [style=dashed label="logical-or-expression"]
  379 -> 286 [style=dashed label="multiplicative-expression"]
  379 -> 85 [style=dashed label="namespace-alias"]
  379 -> 88 [style=dashed label="namespace-name"]
  379 -> 287 [style=dashed label="nested-name-specifier"]
  379 -> 90 [style=dashed label="nested-name-specifier-opt"]
  379 -> 288 [style=dashed label="new-expression"]
  379 -> 289 [style=dashed label="noexcept-expression"]
  379 -> 290 [style=dashed label="operator-function-id"]
  379 -> 94 [style=dashed label="placeholder-type-specifier"]
  379 -> 291 [style=dashed label="pm-expression"]
  379 -> 292 [style=dashed label="postfix-expression"]
  379 -> 293 [style=dashed label="primary-expression"]
  379 -> 294 [style=dashed label="qualified-id"]
  379 -> 295 [style=dashed label="relational-expression"]
  379 -> 296 [style=dashed label="requires-expression"]
  379 -> 297 [style=dashed label="shift-expression"]
  379 -> 298 [style=dashed label="simple-template-id"]
  379 -> 299 [style=dashed label="simple-type-specifier"]
  379 -> 300 [style=dashed label="string-literal"]
  379 -> 301 [style=dashed label="template-id"]
  379 -> 102 [style=dashed label="template-name"]
  379 -> 302 [style=dashed label="throw-expression"]
  379 -> 104 [style=dashed label="type-constraint"]
  379 -> 105 [style=dashed label="type-constraint-opt"]
  379 -> 106 [style=dashed label="type-name"]
  379 -> 108 [style=dashed label="typedef-name"]
  379 -> 303 [style=dashed label="typename-specifier"]
  379 -> 304 [style=dashed label="unary-expression"]
  379 -> 305 [style=dashed label="unary-operator"]
  379 -> 306 [style=dashed label="unqualified-id"]
  379 -> 307 [style=dashed label="yield-expression"]
  379 -> "379R19" [style=solid]
 "379R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  379 -> "379R458d" [label="[IDENTIFIER]", style=solid]
 "379R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  379 -> "379R710d" [label="[\"decltype\"]", style=solid]
 "379R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  379 -> "379R710" [label="[\"auto\"]", style=solid]
 "379R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  380 [label="State 380\n\l120 braced-init-list: \"{\" • initializer-list COMMA-opt \"}\"\l121                 | \"{\" • designated-initializer-list COMMA-opt \"}\"\l122                 | \"{\" • \"}\"\l"]
  380 -> 238 [style=solid label="IDENTIFIER"]
  380 -> 239 [style=solid label="\"noexcept\""]
  380 -> 240 [style=solid label="\"!\""]
  380 -> 241 [style=solid label="\"::\""]
  380 -> 242 [style=solid label="\"this\""]
  380 -> 8 [style=solid label="\"typename\""]
  380 -> 243 [style=solid label="\"+\""]
  380 -> 244 [style=solid label="\"-\""]
  380 -> 245 [style=solid label="\"(\""]
  380 -> 246 [style=solid label="\"&\""]
  380 -> 247 [style=solid label="\"[\""]
  380 -> 248 [style=solid label="\"co_await\""]
  380 -> 380 [style=solid label="\"{\""]
  380 -> 648 [style=solid label="\"}\""]
  380 -> 249 [style=solid label="\"operator\""]
  380 -> 21 [style=solid label="\"decltype\""]
  380 -> 649 [style=solid label="\".\""]
  380 -> 250 [style=solid label="\"*\""]
  380 -> 251 [style=solid label="\"requires\""]
  380 -> 252 [style=solid label="\"~\""]
  380 -> 253 [style=solid label="\"++\""]
  380 -> 254 [style=solid label="\"--\""]
  380 -> 255 [style=solid label="\"dynamic_cast\""]
  380 -> 256 [style=solid label="\"static_cast\""]
  380 -> 257 [style=solid label="\"reinterpret_cast\""]
  380 -> 258 [style=solid label="\"const_cast\""]
  380 -> 259 [style=solid label="\"typeid\""]
  380 -> 260 [style=solid label="\"literal\""]
  380 -> 27 [style=solid label="\"char\""]
  380 -> 28 [style=solid label="\"char8_t\""]
  380 -> 29 [style=solid label="\"char16_t\""]
  380 -> 30 [style=solid label="\"char32_t\""]
  380 -> 31 [style=solid label="\"wchar_t\""]
  380 -> 32 [style=solid label="\"bool\""]
  380 -> 33 [style=solid label="\"short\""]
  380 -> 34 [style=solid label="\"int\""]
  380 -> 35 [style=solid label="\"long\""]
  380 -> 36 [style=solid label="\"signed\""]
  380 -> 37 [style=solid label="\"unsigned\""]
  380 -> 38 [style=solid label="\"float\""]
  380 -> 39 [style=solid label="\"double\""]
  380 -> 40 [style=solid label="\"void\""]
  380 -> 118 [style=solid label="STRING_LITERAL"]
  380 -> 261 [style=solid label="\"throw\""]
  380 -> 262 [style=solid label="\"sizeof\""]
  380 -> 263 [style=solid label="\"alignof\""]
  380 -> 264 [style=solid label="\"co_yield\""]
  380 -> 265 [style=dashed label="SCOPE-opt"]
  380 -> 266 [style=dashed label="additive-expression"]
  380 -> 267 [style=dashed label="and-expression"]
  380 -> 642 [style=dashed label="assignment-expression"]
  380 -> 269 [style=dashed label="await-expression"]
  380 -> 643 [style=dashed label="braced-init-list"]
  380 -> 270 [style=dashed label="cast-expression"]
  380 -> 55 [style=dashed label="class-name"]
  380 -> 271 [style=dashed label="compare-expression"]
  380 -> 272 [style=dashed label="conditional-expression"]
  380 -> 273 [style=dashed label="conversion-function-id"]
  380 -> 63 [style=dashed label="decltype-specifier"]
  380 -> 274 [style=dashed label="delete-expression"]
  380 -> 650 [style=dashed label="designated-initializer-clause"]
  380 -> 651 [style=dashed label="designated-initializer-list"]
  380 -> 652 [style=dashed label="designator"]
  380 -> 71 [style=dashed label="enum-name"]
  380 -> 275 [style=dashed label="equality-expression"]
  380 -> 276 [style=dashed label="exclusive-or-expression"]
  380 -> 278 [style=dashed label="fold-expression"]
  380 -> 279 [style=dashed label="id-expression"]
  380 -> 280 [style=dashed label="inclusive-or-expression"]
  380 -> 646 [style=dashed label="initializer-clause"]
  380 -> 653 [style=dashed label="initializer-list"]
  380 -> 281 [style=dashed label="lambda-expression"]
  380 -> 282 [style=dashed label="lambda-introducer"]
  380 -> 283 [style=dashed label="literal-operator-id"]
  380 -> 284 [style=dashed label="logical-and-expression"]
  380 -> 285 [style=dashed label="logical-or-expression"]
  380 -> 286 [style=dashed label="multiplicative-expression"]
  380 -> 85 [style=dashed label="namespace-alias"]
  380 -> 88 [style=dashed label="namespace-name"]
  380 -> 287 [style=dashed label="nested-name-specifier"]
  380 -> 90 [style=dashed label="nested-name-specifier-opt"]
  380 -> 288 [style=dashed label="new-expression"]
  380 -> 289 [style=dashed label="noexcept-expression"]
  380 -> 290 [style=dashed label="operator-function-id"]
  380 -> 94 [style=dashed label="placeholder-type-specifier"]
  380 -> 291 [style=dashed label="pm-expression"]
  380 -> 292 [style=dashed label="postfix-expression"]
  380 -> 293 [style=dashed label="primary-expression"]
  380 -> 294 [style=dashed label="qualified-id"]
  380 -> 295 [style=dashed label="relational-expression"]
  380 -> 296 [style=dashed label="requires-expression"]
  380 -> 297 [style=dashed label="shift-expression"]
  380 -> 298 [style=dashed label="simple-template-id"]
  380 -> 299 [style=dashed label="simple-type-specifier"]
  380 -> 300 [style=dashed label="string-literal"]
  380 -> 301 [style=dashed label="template-id"]
  380 -> 102 [style=dashed label="template-name"]
  380 -> 302 [style=dashed label="throw-expression"]
  380 -> 104 [style=dashed label="type-constraint"]
  380 -> 105 [style=dashed label="type-constraint-opt"]
  380 -> 106 [style=dashed label="type-name"]
  380 -> 108 [style=dashed label="typedef-name"]
  380 -> 303 [style=dashed label="typename-specifier"]
  380 -> 304 [style=dashed label="unary-expression"]
  380 -> 305 [style=dashed label="unary-operator"]
  380 -> 306 [style=dashed label="unqualified-id"]
  380 -> 307 [style=dashed label="yield-expression"]
  380 -> "380R19" [style=solid]
 "380R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  380 -> "380R458d" [label="[IDENTIFIER]", style=solid]
 "380R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  380 -> "380R710d" [label="[\"decltype\"]", style=solid]
 "380R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  380 -> "380R710" [label="[\"auto\"]", style=solid]
 "380R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  381 [label="State 381\n\l621 requires-clause: \"requires\" • constraint-logical-or-expression\l"]
  381 -> 238 [style=solid label="IDENTIFIER"]
  381 -> 6 [style=solid label="\"::\""]
  381 -> 242 [style=solid label="\"this\""]
  381 -> 654 [style=solid label="\"(\""]
  381 -> 247 [style=solid label="\"[\""]
  381 -> 249 [style=solid label="\"operator\""]
  381 -> 21 [style=solid label="\"decltype\""]
  381 -> 251 [style=solid label="\"requires\""]
  381 -> 336 [style=solid label="\"~\""]
  381 -> 260 [style=solid label="\"literal\""]
  381 -> 118 [style=solid label="STRING_LITERAL"]
  381 -> 55 [style=dashed label="class-name"]
  381 -> 655 [style=dashed label="constraint-logical-and-expression"]
  381 -> 656 [style=dashed label="constraint-logical-or-expression"]
  381 -> 273 [style=dashed label="conversion-function-id"]
  381 -> 121 [style=dashed label="decltype-specifier"]
  381 -> 71 [style=dashed label="enum-name"]
  381 -> 278 [style=dashed label="fold-expression"]
  381 -> 279 [style=dashed label="id-expression"]
  381 -> 281 [style=dashed label="lambda-expression"]
  381 -> 282 [style=dashed label="lambda-introducer"]
  381 -> 283 [style=dashed label="literal-operator-id"]
  381 -> 85 [style=dashed label="namespace-alias"]
  381 -> 88 [style=dashed label="namespace-name"]
  381 -> 338 [style=dashed label="nested-name-specifier"]
  381 -> 290 [style=dashed label="operator-function-id"]
  381 -> 657 [style=dashed label="primary-expression"]
  381 -> 294 [style=dashed label="qualified-id"]
  381 -> 296 [style=dashed label="requires-expression"]
  381 -> 298 [style=dashed label="simple-template-id"]
  381 -> 300 [style=dashed label="string-literal"]
  381 -> 301 [style=dashed label="template-id"]
  381 -> 102 [style=dashed label="template-name"]
  381 -> 106 [style=dashed label="type-name"]
  381 -> 108 [style=dashed label="typedef-name"]
  381 -> 306 [style=dashed label="unqualified-id"]
  382 [label="State 382\n\l359 initializer: brace-or-equal-initializer •\l"]
  382 -> "382R359" [style=solid]
 "382R359" [label="R359", fillcolor=3, shape=diamond, style=filled]
  383 [label="State 383\n\l117 brace-or-equal-initializer: braced-init-list •\l"]
  383 -> "383R117" [style=solid]
 "383R117" [label="R117", fillcolor=3, shape=diamond, style=filled]
  384 [label="State 384\n\l366 initializer-opt: initializer •\l"]
  384 -> "384R366" [style=solid]
 "384R366" [label="R366", fillcolor=3, shape=diamond, style=filled]
  385 [label="State 385\n\l348 init-declarator: declarator initializer-opt •\l"]
  385 -> "385R348" [style=solid]
 "385R348" [label="R348", fillcolor=3, shape=diamond, style=filled]
  386 [label="State 386\n\l349 init-declarator: declarator requires-clause •\l"]
  386 -> "386R349" [style=solid]
 "386R349" [label="R349", fillcolor=3, shape=diamond, style=filled]
  387 [label="State 387\n\l351 init-declarator-list: init-declarator-list \",\" • init-declarator\l"]
  387 -> 156 [style=solid label="\"...\""]
  387 -> 4 [style=solid label="IDENTIFIER"]
  387 -> 6 [style=solid label="\"::\""]
  387 -> 159 [style=solid label="\"(\""]
  387 -> 160 [style=solid label="\"&\""]
  387 -> 163 [style=solid label="\"&&\""]
  387 -> 21 [style=solid label="\"decltype\""]
  387 -> 164 [style=solid label="\"*\""]
  387 -> 165 [style=dashed label="ELLIPSIS-opt"]
  387 -> 55 [style=dashed label="class-name"]
  387 -> 183 [style=dashed label="declarator"]
  387 -> 171 [style=dashed label="declarator-id"]
  387 -> 121 [style=dashed label="decltype-specifier"]
  387 -> 71 [style=dashed label="enum-name"]
  387 -> 658 [style=dashed label="init-declarator"]
  387 -> 85 [style=dashed label="namespace-alias"]
  387 -> 88 [style=dashed label="namespace-name"]
  387 -> 187 [style=dashed label="nested-name-specifier"]
  387 -> 173 [style=dashed label="noptr-declarator"]
  387 -> 174 [style=dashed label="ptr-declarator"]
  387 -> 175 [style=dashed label="ptr-operator"]
  387 -> 96 [style=dashed label="simple-template-id"]
  387 -> 102 [style=dashed label="template-name"]
  387 -> 106 [style=dashed label="type-name"]
  387 -> 108 [style=dashed label="typedef-name"]
  387 -> "387R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "387R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  387 -> "387R5" [style=solid]
 "387R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  388 [label="State 388\n\l640 simple-declaration: decl-specifier-seq init-declarator-list-opt \";\" •\l"]
  388 -> "388R640" [style=solid]
 "388R640" [label="R640", fillcolor=3, shape=diamond, style=filled]
  389 [label="State 389\n\l249 enumerator: IDENTIFIER • attribute-specifier-seq-opt\l"]
  389 -> 177 [style=dashed label="attribute-specifier-seq"]
  389 -> 659 [style=dashed label="attribute-specifier-seq-opt"]
  389 -> "389R83" [style=solid]
 "389R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  390 [label="State 390\n\l250 enumerator-definition: enumerator •\l251                      | enumerator • \"=\" constant-expression\l"]
  390 -> 660 [style=solid label="\"=\""]
  390 -> "390R250" [style=solid]
 "390R250" [label="R250", fillcolor=3, shape=diamond, style=filled]
  391 [label="State 391\n\l252 enumerator-list: enumerator-definition •\l"]
  391 -> "391R252" [style=solid]
 "391R252" [label="R252", fillcolor=3, shape=diamond, style=filled]
  392 [label="State 392\n\l248 enum-specifier: enum-head \"{\" enumerator-list • \",\" \"}\"\l253 enumerator-list: enumerator-list • \",\" enumerator-definition\l255 enumerator-list-opt: enumerator-list •\l"]
  392 -> 661 [style=solid label="\",\""]
  392 -> "392R255" [style=solid]
 "392R255" [label="R255", fillcolor=3, shape=diamond, style=filled]
  393 [label="State 393\n\l247 enum-specifier: enum-head \"{\" enumerator-list-opt • \"}\"\l"]
  393 -> 662 [style=solid label="\"}\""]
  394 [label="State 394\n\l242 enum-head-name-opt: enum-head-name •\l496 opaque-enum-declaration: enum-key attribute-specifier-seq-opt enum-head-name • enum-base-opt \";\"\l"]
  394 -> 663 [style=solid label="\":\""]
  394 -> 664 [style=dashed label="enum-base"]
  394 -> 665 [style=dashed label="enum-base-opt"]
  394 -> "394R237" [style=solid]
 "394R237" [label="R237", fillcolor=3, shape=diamond, style=filled]
  394 -> "394R242d" [label="[\":\"]", style=solid]
 "394R242d" [label="R242", fillcolor=5, shape=diamond, style=filled]
  394 -> "394R242" [label="[\"{\"]", style=solid]
 "394R242" [label="R242", fillcolor=3, shape=diamond, style=filled]
  395 [label="State 395\n\l239 enum-head: enum-key attribute-specifier-seq-opt enum-head-name-opt • enum-base-opt\l"]
  395 -> 663 [style=solid label="\":\""]
  395 -> 664 [style=dashed label="enum-base"]
  395 -> 666 [style=dashed label="enum-base-opt"]
  395 -> "395R237" [style=solid]
 "395R237" [label="R237", fillcolor=3, shape=diamond, style=filled]
  396 [label="State 396\n\l240 enum-head-name: nested-name-specifier-opt • IDENTIFIER\l"]
  396 -> 667 [style=solid label="IDENTIFIER"]
  397 [label="State 397\n\l215 deduction-guide: explicit-specifier-opt template-name \"(\" • parameter-declaration-clause \")\" \"->\" simple-template-id \";\"\l"]
  397 -> 177 [style=dashed label="attribute-specifier-seq"]
  397 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  397 -> 619 [style=dashed label="parameter-declaration"]
  397 -> 668 [style=dashed label="parameter-declaration-clause"]
  397 -> 621 [style=dashed label="parameter-declaration-list"]
  397 -> 622 [style=dashed label="parameter-declaration-list-opt"]
  397 -> "397R83" [style=solid]
 "397R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  397 -> "397R551" [label="[\"...\", \")\"]", style=solid]
 "397R551" [label="R551", fillcolor=3, shape=diamond, style=filled]
  398 [label="State 398\n\l427 module-declaration: EXPORT-opt \"module\" • module-name module-partition-opt attribute-specifier-seq-opt \";\"\l"]
  398 -> 137 [style=solid label="IDENTIFIER"]
  398 -> 669 [style=dashed label="module-name"]
  398 -> 142 [style=dashed label="module-name-qualifier"]
  398 -> 143 [style=dashed label="module-name-qualifier-opt"]
  398 -> "398R434d" [label="[IDENTIFIER]", style=solid]
 "398R434d" [label="R434", fillcolor=5, shape=diamond, style=filled]
  399 [label="State 399\n\l706 translation-unit: global-module-fragment-opt module-declaration declaration-seq-opt • private-module-fragment-opt\l"]
  399 -> 670 [style=solid label="\"module\""]
  399 -> 671 [style=dashed label="private-module-fragment"]
  399 -> 672 [style=dashed label="private-module-fragment-opt"]
  399 -> "399R585" [style=solid]
 "399R585" [label="R585", fillcolor=3, shape=diamond, style=filled]
  400 [label="State 400\n\l456 nested-name-specifier: nested-name-specifier IDENTIFIER \"::\" •\l"]
  400 -> "400R456" [style=solid]
 "400R456" [label="R456", fillcolor=3, shape=diamond, style=filled]
  401 [label="State 401\n\l646 simple-type-specifier: nested-name-specifier \"template\" simple-template-id •\l"]
  401 -> "401R646" [style=solid]
 "401R646" [label="R646", fillcolor=3, shape=diamond, style=filled]
  402 [label="State 402\n\l457 nested-name-specifier: nested-name-specifier TEMPLATE-opt simple-template-id • \"::\"\l"]
  402 -> 673 [style=solid label="\"::\""]
  403 [label="State 403\n\l709 type-constraint: nested-name-specifier-opt concept-name \"<\" • template-argument-list-opt \">\"\l"]
  403 -> 238 [style=solid label="IDENTIFIER"]
  403 -> 239 [style=solid label="\"noexcept\""]
  403 -> 240 [style=solid label="\"!\""]
  403 -> 241 [style=solid label="\"::\""]
  403 -> 242 [style=solid label="\"this\""]
  403 -> 8 [style=solid label="\"typename\""]
  403 -> 243 [style=solid label="\"+\""]
  403 -> 244 [style=solid label="\"-\""]
  403 -> 245 [style=solid label="\"(\""]
  403 -> 246 [style=solid label="\"&\""]
  403 -> 247 [style=solid label="\"[\""]
  403 -> 248 [style=solid label="\"co_await\""]
  403 -> 12 [style=solid label="\"class\""]
  403 -> 13 [style=solid label="\"struct\""]
  403 -> 14 [style=solid label="\"union\""]
  403 -> 249 [style=solid label="\"operator\""]
  403 -> 15 [style=solid label="\"const\""]
  403 -> 16 [style=solid label="\"volatile\""]
  403 -> 21 [style=solid label="\"decltype\""]
  403 -> 125 [style=solid label="\"enum\""]
  403 -> 250 [style=solid label="\"*\""]
  403 -> 251 [style=solid label="\"requires\""]
  403 -> 252 [style=solid label="\"~\""]
  403 -> 253 [style=solid label="\"++\""]
  403 -> 254 [style=solid label="\"--\""]
  403 -> 255 [style=solid label="\"dynamic_cast\""]
  403 -> 256 [style=solid label="\"static_cast\""]
  403 -> 257 [style=solid label="\"reinterpret_cast\""]
  403 -> 258 [style=solid label="\"const_cast\""]
  403 -> 259 [style=solid label="\"typeid\""]
  403 -> 260 [style=solid label="\"literal\""]
  403 -> 27 [style=solid label="\"char\""]
  403 -> 28 [style=solid label="\"char8_t\""]
  403 -> 29 [style=solid label="\"char16_t\""]
  403 -> 30 [style=solid label="\"char32_t\""]
  403 -> 31 [style=solid label="\"wchar_t\""]
  403 -> 32 [style=solid label="\"bool\""]
  403 -> 33 [style=solid label="\"short\""]
  403 -> 34 [style=solid label="\"int\""]
  403 -> 35 [style=solid label="\"long\""]
  403 -> 36 [style=solid label="\"signed\""]
  403 -> 37 [style=solid label="\"unsigned\""]
  403 -> 38 [style=solid label="\"float\""]
  403 -> 39 [style=solid label="\"double\""]
  403 -> 40 [style=solid label="\"void\""]
  403 -> 118 [style=solid label="STRING_LITERAL"]
  403 -> 262 [style=solid label="\"sizeof\""]
  403 -> 263 [style=solid label="\"alignof\""]
  403 -> 265 [style=dashed label="SCOPE-opt"]
  403 -> 266 [style=dashed label="additive-expression"]
  403 -> 267 [style=dashed label="and-expression"]
  403 -> 269 [style=dashed label="await-expression"]
  403 -> 270 [style=dashed label="cast-expression"]
  403 -> 406 [style=dashed label="class-key"]
  403 -> 55 [style=dashed label="class-name"]
  403 -> 271 [style=dashed label="compare-expression"]
  403 -> 309 [style=dashed label="conditional-expression"]
  403 -> 407 [style=dashed label="constant-expression"]
  403 -> 273 [style=dashed label="conversion-function-id"]
  403 -> 57 [style=dashed label="cv-qualifier"]
  403 -> 63 [style=dashed label="decltype-specifier"]
  403 -> 274 [style=dashed label="delete-expression"]
  403 -> 66 [style=dashed label="elaborated-enum-specifier"]
  403 -> 67 [style=dashed label="elaborated-type-specifier"]
  403 -> 71 [style=dashed label="enum-name"]
  403 -> 275 [style=dashed label="equality-expression"]
  403 -> 276 [style=dashed label="exclusive-or-expression"]
  403 -> 278 [style=dashed label="fold-expression"]
  403 -> 408 [style=dashed label="id-expression"]
  403 -> 280 [style=dashed label="inclusive-or-expression"]
  403 -> 281 [style=dashed label="lambda-expression"]
  403 -> 282 [style=dashed label="lambda-introducer"]
  403 -> 283 [style=dashed label="literal-operator-id"]
  403 -> 284 [style=dashed label="logical-and-expression"]
  403 -> 311 [style=dashed label="logical-or-expression"]
  403 -> 286 [style=dashed label="multiplicative-expression"]
  403 -> 85 [style=dashed label="namespace-alias"]
  403 -> 88 [style=dashed label="namespace-name"]
  403 -> 287 [style=dashed label="nested-name-specifier"]
  403 -> 90 [style=dashed label="nested-name-specifier-opt"]
  403 -> 288 [style=dashed label="new-expression"]
  403 -> 289 [style=dashed label="noexcept-expression"]
  403 -> 290 [style=dashed label="operator-function-id"]
  403 -> 94 [style=dashed label="placeholder-type-specifier"]
  403 -> 291 [style=dashed label="pm-expression"]
  403 -> 292 [style=dashed label="postfix-expression"]
  403 -> 293 [style=dashed label="primary-expression"]
  403 -> 294 [style=dashed label="qualified-id"]
  403 -> 295 [style=dashed label="relational-expression"]
  403 -> 296 [style=dashed label="requires-expression"]
  403 -> 297 [style=dashed label="shift-expression"]
  403 -> 298 [style=dashed label="simple-template-id"]
  403 -> 409 [style=dashed label="simple-type-specifier"]
  403 -> 300 [style=dashed label="string-literal"]
  403 -> 410 [style=dashed label="template-argument"]
  403 -> 411 [style=dashed label="template-argument-list"]
  403 -> 674 [style=dashed label="template-argument-list-opt"]
  403 -> 301 [style=dashed label="template-id"]
  403 -> 102 [style=dashed label="template-name"]
  403 -> 104 [style=dashed label="type-constraint"]
  403 -> 105 [style=dashed label="type-constraint-opt"]
  403 -> 413 [style=dashed label="type-id"]
  403 -> 106 [style=dashed label="type-name"]
  403 -> 414 [style=dashed label="type-specifier"]
  403 -> 415 [style=dashed label="type-specifier-seq"]
  403 -> 108 [style=dashed label="typedef-name"]
  403 -> 416 [style=dashed label="typename-specifier"]
  403 -> 304 [style=dashed label="unary-expression"]
  403 -> 305 [style=dashed label="unary-operator"]
  403 -> 306 [style=dashed label="unqualified-id"]
  403 -> "403R19" [style=solid]
 "403R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  403 -> "403R458d" [label="[IDENTIFIER]", style=solid]
 "403R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  403 -> "403R688" [label="[\">\"]", style=solid]
 "403R688" [label="R688", fillcolor=3, shape=diamond, style=filled]
  403 -> "403R710d" [label="[\"decltype\"]", style=solid]
 "403R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  403 -> "403R710" [label="[\"auto\"]", style=solid]
 "403R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  404 [label="State 404\n\l151 concept-name: IDENTIFIER •\l"]
  404 -> "404R151" [style=solid]
 "404R151" [label="R151", fillcolor=3, shape=diamond, style=filled]
  405 [label="State 405\n\l150 concept-definition: \"concept\" concept-name • \"=\" constraint-expression \";\"\l"]
  405 -> 675 [style=solid label="\"=\""]
  406 [label="State 406\n\l229 elaborated-type-specifier: class-key • attribute-specifier-seq-opt nested-name-specifier-opt IDENTIFIER\l230                          | class-key • simple-template-id\l231                          | class-key • nested-name-specifier TEMPLATE-opt simple-template-id\l"]
  406 -> 4 [style=solid label="IDENTIFIER"]
  406 -> 6 [style=solid label="\"::\""]
  406 -> 21 [style=solid label="\"decltype\""]
  406 -> 177 [style=dashed label="attribute-specifier-seq"]
  406 -> 676 [style=dashed label="attribute-specifier-seq-opt"]
  406 -> 55 [style=dashed label="class-name"]
  406 -> 121 [style=dashed label="decltype-specifier"]
  406 -> 71 [style=dashed label="enum-name"]
  406 -> 85 [style=dashed label="namespace-alias"]
  406 -> 88 [style=dashed label="namespace-name"]
  406 -> 179 [style=dashed label="nested-name-specifier"]
  406 -> 180 [style=dashed label="simple-template-id"]
  406 -> 102 [style=dashed label="template-name"]
  406 -> 106 [style=dashed label="type-name"]
  406 -> 108 [style=dashed label="typedef-name"]
  406 -> "406R83d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "406R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  406 -> "406R83" [style=solid]
 "406R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  407 [label="State 407\n\l683 template-argument: constant-expression •\l"]
  407 -> "407R683" [style=solid]
 "407R683" [label="R683", fillcolor=3, shape=diamond, style=filled]
  408 [label="State 408\n\l580 primary-expression: id-expression •\l685 template-argument: id-expression •\l"]
  408 -> "408R580" [style=solid]
 "408R580" [label="R580", fillcolor=3, shape=diamond, style=filled]
  408 -> "408R685d" [label="[\",\", \"...\", \">\"]", style=solid]
 "408R685d" [label="R685", fillcolor=5, shape=diamond, style=filled]
  409 [label="State 409\n\l562 postfix-expression: simple-type-specifier • \"(\" expression-list-opt \")\"\l564                   | simple-type-specifier • braced-init-list\l725 type-specifier: simple-type-specifier •\l"]
  409 -> 578 [style=solid label="\"(\""]
  409 -> 380 [style=solid label="\"{\""]
  409 -> 579 [style=dashed label="braced-init-list"]
  409 -> "409R725d" [label="[\"(\"]", style=solid]
 "409R725d" [label="R725", fillcolor=5, shape=diamond, style=filled]
  409 -> "409R725" [style=solid]
 "409R725" [label="R725", fillcolor=3, shape=diamond, style=filled]
  410 [label="State 410\n\l686 template-argument-list: template-argument • ELLIPSIS-opt\l"]
  410 -> 156 [style=solid label="\"...\""]
  410 -> 677 [style=dashed label="ELLIPSIS-opt"]
  410 -> "410R5" [style=solid]
 "410R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  411 [label="State 411\n\l687 template-argument-list: template-argument-list • \",\" template-argument ELLIPSIS-opt\l689 template-argument-list-opt: template-argument-list •\l"]
  411 -> 678 [style=solid label="\",\""]
  411 -> "411R689" [style=solid]
 "411R689" [label="R689", fillcolor=3, shape=diamond, style=filled]
  412 [label="State 412\n\l644 simple-template-id: template-name \"<\" template-argument-list-opt • \">\"\l"]
  412 -> 679 [style=solid label="\">\""]
  413 [label="State 413\n\l684 template-argument: type-id •\l"]
  413 -> "413R684" [style=solid]
 "413R684" [label="R684", fillcolor=3, shape=diamond, style=filled]
  414 [label="State 414\n\l729 type-specifier-seq: type-specifier • attribute-specifier-seq-opt\l730                   | type-specifier • type-specifier-seq\l"]
  414 -> 4 [style=solid label="IDENTIFIER"]
  414 -> 6 [style=solid label="\"::\""]
  414 -> 8 [style=solid label="\"typename\""]
  414 -> 12 [style=solid label="\"class\""]
  414 -> 13 [style=solid label="\"struct\""]
  414 -> 14 [style=solid label="\"union\""]
  414 -> 15 [style=solid label="\"const\""]
  414 -> 16 [style=solid label="\"volatile\""]
  414 -> 21 [style=solid label="\"decltype\""]
  414 -> 125 [style=solid label="\"enum\""]
  414 -> 27 [style=solid label="\"char\""]
  414 -> 28 [style=solid label="\"char8_t\""]
  414 -> 29 [style=solid label="\"char16_t\""]
  414 -> 30 [style=solid label="\"char32_t\""]
  414 -> 31 [style=solid label="\"wchar_t\""]
  414 -> 32 [style=solid label="\"bool\""]
  414 -> 33 [style=solid label="\"short\""]
  414 -> 34 [style=solid label="\"int\""]
  414 -> 35 [style=solid label="\"long\""]
  414 -> 36 [style=solid label="\"signed\""]
  414 -> 37 [style=solid label="\"unsigned\""]
  414 -> 38 [style=solid label="\"float\""]
  414 -> 39 [style=solid label="\"double\""]
  414 -> 40 [style=solid label="\"void\""]
  414 -> 177 [style=dashed label="attribute-specifier-seq"]
  414 -> 680 [style=dashed label="attribute-specifier-seq-opt"]
  414 -> 406 [style=dashed label="class-key"]
  414 -> 55 [style=dashed label="class-name"]
  414 -> 57 [style=dashed label="cv-qualifier"]
  414 -> 63 [style=dashed label="decltype-specifier"]
  414 -> 66 [style=dashed label="elaborated-enum-specifier"]
  414 -> 67 [style=dashed label="elaborated-type-specifier"]
  414 -> 71 [style=dashed label="enum-name"]
  414 -> 85 [style=dashed label="namespace-alias"]
  414 -> 88 [style=dashed label="namespace-name"]
  414 -> 89 [style=dashed label="nested-name-specifier"]
  414 -> 90 [style=dashed label="nested-name-specifier-opt"]
  414 -> 94 [style=dashed label="placeholder-type-specifier"]
  414 -> 96 [style=dashed label="simple-template-id"]
  414 -> 97 [style=dashed label="simple-type-specifier"]
  414 -> 102 [style=dashed label="template-name"]
  414 -> 104 [style=dashed label="type-constraint"]
  414 -> 105 [style=dashed label="type-constraint-opt"]
  414 -> 106 [style=dashed label="type-name"]
  414 -> 414 [style=dashed label="type-specifier"]
  414 -> 681 [style=dashed label="type-specifier-seq"]
  414 -> 108 [style=dashed label="typedef-name"]
  414 -> 109 [style=dashed label="typename-specifier"]
  414 -> "414R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"decltype\", \"enum\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\"]", style=solid]
 "414R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  414 -> "414R83" [style=solid]
 "414R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  414 -> "414R458d" [label="[IDENTIFIER]", style=solid]
 "414R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  414 -> "414R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "414R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  415 [label="State 415\n\l712 type-id: type-specifier-seq • abstract-declarator-opt\l"]
  415 -> 682 [style=solid label="\"...\""]
  415 -> 4 [style=solid label="IDENTIFIER"]
  415 -> 6 [style=solid label="\"::\""]
  415 -> 683 [style=solid label="\"(\""]
  415 -> 160 [style=solid label="\"&\""]
  415 -> 163 [style=solid label="\"&&\""]
  415 -> 21 [style=solid label="\"decltype\""]
  415 -> 164 [style=solid label="\"*\""]
  415 -> 684 [style=dashed label="abstract-declarator"]
  415 -> 685 [style=dashed label="abstract-declarator-opt"]
  415 -> 686 [style=dashed label="abstract-pack-declarator"]
  415 -> 55 [style=dashed label="class-name"]
  415 -> 121 [style=dashed label="decltype-specifier"]
  415 -> 71 [style=dashed label="enum-name"]
  415 -> 85 [style=dashed label="namespace-alias"]
  415 -> 88 [style=dashed label="namespace-name"]
  415 -> 187 [style=dashed label="nested-name-specifier"]
  415 -> 687 [style=dashed label="noptr-abstract-declarator"]
  415 -> 688 [style=dashed label="noptr-abstract-declarator-opt"]
  415 -> 689 [style=dashed label="noptr-abstract-pack-declarator"]
  415 -> 690 [style=dashed label="ptr-abstract-declarator"]
  415 -> 691 [style=dashed label="ptr-operator"]
  415 -> 96 [style=dashed label="simple-template-id"]
  415 -> 102 [style=dashed label="template-name"]
  415 -> 106 [style=dashed label="type-name"]
  415 -> 108 [style=dashed label="typedef-name"]
  415 -> "415R32d" [label="[\"...\", \"(\"]", style=solid]
 "415R32d" [label="R32", fillcolor=5, shape=diamond, style=filled]
  415 -> "415R32" [style=solid]
 "415R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  415 -> "415R485d" [label="[\"(\"]", style=solid]
 "415R485d" [label="R485", fillcolor=5, shape=diamond, style=filled]
  415 -> "415R485" [label="[\"[\"]", style=solid]
 "415R485" [label="R485", fillcolor=3, shape=diamond, style=filled]
  416 [label="State 416\n\l563 postfix-expression: typename-specifier • \"(\" expression-list-opt \")\"\l565                   | typename-specifier • braced-init-list\l727 type-specifier: typename-specifier •\l"]
  416 -> 580 [style=solid label="\"(\""]
  416 -> 380 [style=solid label="\"{\""]
  416 -> 581 [style=dashed label="braced-init-list"]
  416 -> "416R727d" [label="[\"(\"]", style=solid]
 "416R727d" [label="R727", fillcolor=5, shape=diamond, style=filled]
  416 -> "416R727" [style=solid]
 "416R727" [label="R727", fillcolor=3, shape=diamond, style=filled]
  417 [label="State 417\n\l555 placeholder-type-specifier: type-constraint-opt \"decltype\" \"(\" • \"auto\" \")\"\l"]
  417 -> 692 [style=solid label="\"auto\""]
  418 [label="State 418\n\l271 export-declaration: \"export\" \"{\" declaration-seq-opt \"}\" •\l"]
  418 -> "418R271" [style=solid]
 "418R271" [label="R271", fillcolor=3, shape=diamond, style=filled]
  419 [label="State 419\n\l390 linkage-specification: \"extern\" string-literal \"{\" declaration-seq-opt • \"}\"\l"]
  419 -> 693 [style=solid label="\"}\""]
  420 [label="State 420\n\l692 template-head: \"template\" \"<\" • template-parameter-list \">\" requires-clause-opt\l"]
  420 -> 4 [style=solid label="IDENTIFIER"]
  420 -> 6 [style=solid label="\"::\""]
  420 -> 216 [style=solid label="\"template\""]
  420 -> 217 [style=solid label="\"typename\""]
  420 -> 218 [style=solid label="\"class\""]
  420 -> 21 [style=solid label="\"decltype\""]
  420 -> 177 [style=dashed label="attribute-specifier-seq"]
  420 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  420 -> 55 [style=dashed label="class-name"]
  420 -> 121 [style=dashed label="decltype-specifier"]
  420 -> 71 [style=dashed label="enum-name"]
  420 -> 85 [style=dashed label="namespace-alias"]
  420 -> 88 [style=dashed label="namespace-name"]
  420 -> 133 [style=dashed label="nested-name-specifier"]
  420 -> 221 [style=dashed label="nested-name-specifier-opt"]
  420 -> 222 [style=dashed label="parameter-declaration"]
  420 -> 96 [style=dashed label="simple-template-id"]
  420 -> 223 [style=dashed label="template-head"]
  420 -> 102 [style=dashed label="template-name"]
  420 -> 224 [style=dashed label="template-parameter"]
  420 -> 225 [style=dashed label="template-parameter-list"]
  420 -> 226 [style=dashed label="type-constraint"]
  420 -> 106 [style=dashed label="type-name"]
  420 -> 227 [style=dashed label="type-parameter"]
  420 -> 228 [style=dashed label="type-parameter-key"]
  420 -> 108 [style=dashed label="typedef-name"]
  420 -> "420R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"class\", \"decltype\"]", style=solid]
 "420R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  420 -> "420R83" [style=solid]
 "420R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  420 -> "420R458d" [label="[IDENTIFIER]", style=solid]
 "420R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  421 [label="State 421\n\l265 explicit-specialization: \"template\" \"<\" \">\" declaration •\l"]
  421 -> "421R265" [style=solid]
 "421R265" [label="R265", fillcolor=3, shape=diamond, style=filled]
  422 [label="State 422\n\l 24 THIS-opt: \"this\" •\l"]
  422 -> "422R24" [style=solid]
 "422R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  423 [label="State 423\n\l543 parameter-declaration: attribute-specifier-seq-opt THIS-opt • decl-specifier-seq declarator\l544                      | attribute-specifier-seq-opt THIS-opt • decl-specifier-seq declarator \"=\" initializer-clause\l545                      | attribute-specifier-seq-opt THIS-opt • decl-specifier-seq abstract-declarator-opt\l546                      | attribute-specifier-seq-opt THIS-opt • decl-specifier-seq abstract-declarator-opt \"=\" initializer-clause\l"]
  423 -> 1 [style=solid label="\"constexpr\""]
  423 -> 150 [style=solid label="\"extern\""]
  423 -> 4 [style=solid label="IDENTIFIER"]
  423 -> 151 [style=solid label="\"inline\""]
  423 -> 6 [style=solid label="\"::\""]
  423 -> 8 [style=solid label="\"typename\""]
  423 -> 9 [style=solid label="\"virtual\""]
  423 -> 12 [style=solid label="\"class\""]
  423 -> 13 [style=solid label="\"struct\""]
  423 -> 14 [style=solid label="\"union\""]
  423 -> 15 [style=solid label="\"const\""]
  423 -> 16 [style=solid label="\"volatile\""]
  423 -> 17 [style=solid label="\"friend\""]
  423 -> 18 [style=solid label="\"typedef\""]
  423 -> 19 [style=solid label="\"consteval\""]
  423 -> 20 [style=solid label="\"constinit\""]
  423 -> 21 [style=solid label="\"decltype\""]
  423 -> 22 [style=solid label="\"enum\""]
  423 -> 23 [style=solid label="\"explicit\""]
  423 -> 27 [style=solid label="\"char\""]
  423 -> 28 [style=solid label="\"char8_t\""]
  423 -> 29 [style=solid label="\"char16_t\""]
  423 -> 30 [style=solid label="\"char32_t\""]
  423 -> 31 [style=solid label="\"wchar_t\""]
  423 -> 32 [style=solid label="\"bool\""]
  423 -> 33 [style=solid label="\"short\""]
  423 -> 34 [style=solid label="\"int\""]
  423 -> 35 [style=solid label="\"long\""]
  423 -> 36 [style=solid label="\"signed\""]
  423 -> 37 [style=solid label="\"unsigned\""]
  423 -> 38 [style=solid label="\"float\""]
  423 -> 39 [style=solid label="\"double\""]
  423 -> 40 [style=solid label="\"void\""]
  423 -> 42 [style=solid label="\"static\""]
  423 -> 43 [style=solid label="\"thread_local\""]
  423 -> 44 [style=solid label="\"mutable\""]
  423 -> 53 [style=dashed label="class-head"]
  423 -> 54 [style=dashed label="class-key"]
  423 -> 55 [style=dashed label="class-name"]
  423 -> 56 [style=dashed label="class-specifier"]
  423 -> 57 [style=dashed label="cv-qualifier"]
  423 -> 58 [style=dashed label="decl-specifier"]
  423 -> 694 [style=dashed label="decl-specifier-seq"]
  423 -> 63 [style=dashed label="decltype-specifier"]
  423 -> 65 [style=dashed label="defining-type-specifier"]
  423 -> 66 [style=dashed label="elaborated-enum-specifier"]
  423 -> 67 [style=dashed label="elaborated-type-specifier"]
  423 -> 69 [style=dashed label="enum-head"]
  423 -> 154 [style=dashed label="enum-key"]
  423 -> 71 [style=dashed label="enum-name"]
  423 -> 72 [style=dashed label="enum-specifier"]
  423 -> 155 [style=dashed label="explicit-specifier"]
  423 -> 79 [style=dashed label="function-specifier"]
  423 -> 85 [style=dashed label="namespace-alias"]
  423 -> 88 [style=dashed label="namespace-name"]
  423 -> 89 [style=dashed label="nested-name-specifier"]
  423 -> 90 [style=dashed label="nested-name-specifier-opt"]
  423 -> 94 [style=dashed label="placeholder-type-specifier"]
  423 -> 96 [style=dashed label="simple-template-id"]
  423 -> 97 [style=dashed label="simple-type-specifier"]
  423 -> 99 [style=dashed label="storage-class-specifier"]
  423 -> 102 [style=dashed label="template-name"]
  423 -> 104 [style=dashed label="type-constraint"]
  423 -> 105 [style=dashed label="type-constraint-opt"]
  423 -> 106 [style=dashed label="type-name"]
  423 -> 107 [style=dashed label="type-specifier"]
  423 -> 108 [style=dashed label="typedef-name"]
  423 -> 109 [style=dashed label="typename-specifier"]
  423 -> "423R458d" [label="[IDENTIFIER]", style=solid]
 "423R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  423 -> "423R710d" [label="[\"decltype\"]", style=solid]
 "423R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  423 -> "423R710" [label="[]", style=solid]
 "423R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  424 [label="State 424\n\l720 type-parameter: template-head type-parameter-key • ELLIPSIS-opt IDENTIFIER-opt\l721               | template-head type-parameter-key • IDENTIFIER-opt \"=\" id-expression\l"]
  424 -> 156 [style=solid label="\"...\""]
  424 -> 427 [style=solid label="IDENTIFIER"]
  424 -> 695 [style=dashed label="ELLIPSIS-opt"]
  424 -> 696 [style=dashed label="IDENTIFIER-opt"]
  424 -> "424R5d" [label="[IDENTIFIER]", style=solid]
 "424R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  424 -> "424R5" [style=solid]
 "424R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  424 -> "424R11" [label="[\"=\"]", style=solid]
 "424R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  425 [label="State 425\n\l700 template-parameter-list: template-parameter-list \",\" • template-parameter\l"]
  425 -> 4 [style=solid label="IDENTIFIER"]
  425 -> 6 [style=solid label="\"::\""]
  425 -> 216 [style=solid label="\"template\""]
  425 -> 217 [style=solid label="\"typename\""]
  425 -> 218 [style=solid label="\"class\""]
  425 -> 21 [style=solid label="\"decltype\""]
  425 -> 177 [style=dashed label="attribute-specifier-seq"]
  425 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  425 -> 55 [style=dashed label="class-name"]
  425 -> 121 [style=dashed label="decltype-specifier"]
  425 -> 71 [style=dashed label="enum-name"]
  425 -> 85 [style=dashed label="namespace-alias"]
  425 -> 88 [style=dashed label="namespace-name"]
  425 -> 133 [style=dashed label="nested-name-specifier"]
  425 -> 221 [style=dashed label="nested-name-specifier-opt"]
  425 -> 222 [style=dashed label="parameter-declaration"]
  425 -> 96 [style=dashed label="simple-template-id"]
  425 -> 223 [style=dashed label="template-head"]
  425 -> 102 [style=dashed label="template-name"]
  425 -> 697 [style=dashed label="template-parameter"]
  425 -> 226 [style=dashed label="type-constraint"]
  425 -> 106 [style=dashed label="type-name"]
  425 -> 227 [style=dashed label="type-parameter"]
  425 -> 228 [style=dashed label="type-parameter-key"]
  425 -> 108 [style=dashed label="typedef-name"]
  425 -> "425R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"class\", \"decltype\"]", style=solid]
 "425R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  425 -> "425R83" [style=solid]
 "425R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  425 -> "425R458d" [label="[IDENTIFIER]", style=solid]
 "425R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  426 [label="State 426\n\l692 template-head: \"template\" \"<\" template-parameter-list \">\" • requires-clause-opt\l"]
  426 -> 381 [style=solid label="\"requires\""]
  426 -> 698 [style=dashed label="requires-clause"]
  426 -> 699 [style=dashed label="requires-clause-opt"]
  426 -> "426R622" [style=solid]
 "426R622" [label="R622", fillcolor=3, shape=diamond, style=filled]
  427 [label="State 427\n\l 12 IDENTIFIER-opt: IDENTIFIER •\l"]
  427 -> "427R12" [style=solid]
 "427R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  428 [label="State 428\n\l718 type-parameter: type-constraint ELLIPSIS-opt • IDENTIFIER-opt\l"]
  428 -> 427 [style=solid label="IDENTIFIER"]
  428 -> 700 [style=dashed label="IDENTIFIER-opt"]
  428 -> "428R11" [style=solid]
 "428R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  429 [label="State 429\n\l719 type-parameter: type-constraint IDENTIFIER-opt • \"=\" type-id\l"]
  429 -> 701 [style=solid label="\"=\""]
  430 [label="State 430\n\l716 type-parameter: type-parameter-key ELLIPSIS-opt • IDENTIFIER-opt\l"]
  430 -> 427 [style=solid label="IDENTIFIER"]
  430 -> 702 [style=dashed label="IDENTIFIER-opt"]
  430 -> "430R11" [style=solid]
 "430R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  431 [label="State 431\n\l717 type-parameter: type-parameter-key IDENTIFIER-opt • \"=\" type-id\l"]
  431 -> 703 [style=solid label="\"=\""]
  432 [label="State 432\n\l457 nested-name-specifier: nested-name-specifier TEMPLATE-opt simple-template-id • \"::\"\l734 typename-specifier: \"typename\" nested-name-specifier TEMPLATE-opt simple-template-id •\l"]
  432 -> 673 [style=solid label="\"::\""]
  432 -> "432R734d" [label="[\"::\"]", style=solid]
 "432R734d" [label="R734", fillcolor=5, shape=diamond, style=filled]
  432 -> "432R734" [style=solid]
 "432R734" [label="R734", fillcolor=3, shape=diamond, style=filled]
  433 [label="State 433\n\l 44 alias-declaration: \"using\" IDENTIFIER attribute-specifier-seq-opt \"=\" • defining-type-id \";\"\l"]
  433 -> 4 [style=solid label="IDENTIFIER"]
  433 -> 6 [style=solid label="\"::\""]
  433 -> 8 [style=solid label="\"typename\""]
  433 -> 12 [style=solid label="\"class\""]
  433 -> 13 [style=solid label="\"struct\""]
  433 -> 14 [style=solid label="\"union\""]
  433 -> 15 [style=solid label="\"const\""]
  433 -> 16 [style=solid label="\"volatile\""]
  433 -> 21 [style=solid label="\"decltype\""]
  433 -> 22 [style=solid label="\"enum\""]
  433 -> 27 [style=solid label="\"char\""]
  433 -> 28 [style=solid label="\"char8_t\""]
  433 -> 29 [style=solid label="\"char16_t\""]
  433 -> 30 [style=solid label="\"char32_t\""]
  433 -> 31 [style=solid label="\"wchar_t\""]
  433 -> 32 [style=solid label="\"bool\""]
  433 -> 33 [style=solid label="\"short\""]
  433 -> 34 [style=solid label="\"int\""]
  433 -> 35 [style=solid label="\"long\""]
  433 -> 36 [style=solid label="\"signed\""]
  433 -> 37 [style=solid label="\"unsigned\""]
  433 -> 38 [style=solid label="\"float\""]
  433 -> 39 [style=solid label="\"double\""]
  433 -> 40 [style=solid label="\"void\""]
  433 -> 53 [style=dashed label="class-head"]
  433 -> 54 [style=dashed label="class-key"]
  433 -> 55 [style=dashed label="class-name"]
  433 -> 56 [style=dashed label="class-specifier"]
  433 -> 57 [style=dashed label="cv-qualifier"]
  433 -> 63 [style=dashed label="decltype-specifier"]
  433 -> 704 [style=dashed label="defining-type-id"]
  433 -> 705 [style=dashed label="defining-type-specifier"]
  433 -> 706 [style=dashed label="defining-type-specifier-seq"]
  433 -> 66 [style=dashed label="elaborated-enum-specifier"]
  433 -> 67 [style=dashed label="elaborated-type-specifier"]
  433 -> 69 [style=dashed label="enum-head"]
  433 -> 154 [style=dashed label="enum-key"]
  433 -> 71 [style=dashed label="enum-name"]
  433 -> 72 [style=dashed label="enum-specifier"]
  433 -> 85 [style=dashed label="namespace-alias"]
  433 -> 88 [style=dashed label="namespace-name"]
  433 -> 89 [style=dashed label="nested-name-specifier"]
  433 -> 90 [style=dashed label="nested-name-specifier-opt"]
  433 -> 94 [style=dashed label="placeholder-type-specifier"]
  433 -> 96 [style=dashed label="simple-template-id"]
  433 -> 97 [style=dashed label="simple-type-specifier"]
  433 -> 102 [style=dashed label="template-name"]
  433 -> 104 [style=dashed label="type-constraint"]
  433 -> 105 [style=dashed label="type-constraint-opt"]
  433 -> 106 [style=dashed label="type-name"]
  433 -> 107 [style=dashed label="type-specifier"]
  433 -> 108 [style=dashed label="typedef-name"]
  433 -> 109 [style=dashed label="typename-specifier"]
  433 -> "433R458d" [label="[IDENTIFIER]", style=solid]
 "433R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  433 -> "433R710d" [label="[\"decltype\"]", style=solid]
 "433R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  433 -> "433R710" [label="[]", style=solid]
 "433R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  434 [label="State 434\n\l456 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l696 template-name: IDENTIFIER •\l755 unqualified-id: IDENTIFIER •\l"]
  434 -> 400 [style=solid label="\"::\""]
  434 -> "434R696" [label="[\"<\"]", style=solid]
 "434R696" [label="R696", fillcolor=3, shape=diamond, style=filled]
  434 -> "434R755" [style=solid]
 "434R755" [label="R755", fillcolor=3, shape=diamond, style=filled]
  435 [label="State 435\n\l693 template-id: simple-template-id •\l"]
  435 -> "435R693" [style=solid]
 "435R693" [label="R693", fillcolor=3, shape=diamond, style=filled]
  436 [label="State 436\n\l764 using-declarator: TYPENAME-opt nested-name-specifier unqualified-id •\l"]
  436 -> "436R764" [style=solid]
 "436R764" [label="R764", fillcolor=3, shape=diamond, style=filled]
  437 [label="State 437\n\l766 using-declarator-list: using-declarator-list \",\" using-declarator • ELLIPSIS-opt\l"]
  437 -> 156 [style=solid label="\"...\""]
  437 -> 707 [style=dashed label="ELLIPSIS-opt"]
  437 -> "437R5" [style=solid]
 "437R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  438 [label="State 438\n\l477 noexcept-expression: \"noexcept\" \"(\" • expression \")\"\l"]
  438 -> 238 [style=solid label="IDENTIFIER"]
  438 -> 239 [style=solid label="\"noexcept\""]
  438 -> 240 [style=solid label="\"!\""]
  438 -> 241 [style=solid label="\"::\""]
  438 -> 242 [style=solid label="\"this\""]
  438 -> 8 [style=solid label="\"typename\""]
  438 -> 243 [style=solid label="\"+\""]
  438 -> 244 [style=solid label="\"-\""]
  438 -> 245 [style=solid label="\"(\""]
  438 -> 246 [style=solid label="\"&\""]
  438 -> 247 [style=solid label="\"[\""]
  438 -> 248 [style=solid label="\"co_await\""]
  438 -> 249 [style=solid label="\"operator\""]
  438 -> 21 [style=solid label="\"decltype\""]
  438 -> 250 [style=solid label="\"*\""]
  438 -> 251 [style=solid label="\"requires\""]
  438 -> 252 [style=solid label="\"~\""]
  438 -> 253 [style=solid label="\"++\""]
  438 -> 254 [style=solid label="\"--\""]
  438 -> 255 [style=solid label="\"dynamic_cast\""]
  438 -> 256 [style=solid label="\"static_cast\""]
  438 -> 257 [style=solid label="\"reinterpret_cast\""]
  438 -> 258 [style=solid label="\"const_cast\""]
  438 -> 259 [style=solid label="\"typeid\""]
  438 -> 260 [style=solid label="\"literal\""]
  438 -> 27 [style=solid label="\"char\""]
  438 -> 28 [style=solid label="\"char8_t\""]
  438 -> 29 [style=solid label="\"char16_t\""]
  438 -> 30 [style=solid label="\"char32_t\""]
  438 -> 31 [style=solid label="\"wchar_t\""]
  438 -> 32 [style=solid label="\"bool\""]
  438 -> 33 [style=solid label="\"short\""]
  438 -> 34 [style=solid label="\"int\""]
  438 -> 35 [style=solid label="\"long\""]
  438 -> 36 [style=solid label="\"signed\""]
  438 -> 37 [style=solid label="\"unsigned\""]
  438 -> 38 [style=solid label="\"float\""]
  438 -> 39 [style=solid label="\"double\""]
  438 -> 40 [style=solid label="\"void\""]
  438 -> 118 [style=solid label="STRING_LITERAL"]
  438 -> 261 [style=solid label="\"throw\""]
  438 -> 262 [style=solid label="\"sizeof\""]
  438 -> 263 [style=solid label="\"alignof\""]
  438 -> 264 [style=solid label="\"co_yield\""]
  438 -> 265 [style=dashed label="SCOPE-opt"]
  438 -> 266 [style=dashed label="additive-expression"]
  438 -> 267 [style=dashed label="and-expression"]
  438 -> 268 [style=dashed label="assignment-expression"]
  438 -> 269 [style=dashed label="await-expression"]
  438 -> 270 [style=dashed label="cast-expression"]
  438 -> 55 [style=dashed label="class-name"]
  438 -> 271 [style=dashed label="compare-expression"]
  438 -> 272 [style=dashed label="conditional-expression"]
  438 -> 273 [style=dashed label="conversion-function-id"]
  438 -> 63 [style=dashed label="decltype-specifier"]
  438 -> 274 [style=dashed label="delete-expression"]
  438 -> 71 [style=dashed label="enum-name"]
  438 -> 275 [style=dashed label="equality-expression"]
  438 -> 276 [style=dashed label="exclusive-or-expression"]
  438 -> 708 [style=dashed label="expression"]
  438 -> 278 [style=dashed label="fold-expression"]
  438 -> 279 [style=dashed label="id-expression"]
  438 -> 280 [style=dashed label="inclusive-or-expression"]
  438 -> 281 [style=dashed label="lambda-expression"]
  438 -> 282 [style=dashed label="lambda-introducer"]
  438 -> 283 [style=dashed label="literal-operator-id"]
  438 -> 284 [style=dashed label="logical-and-expression"]
  438 -> 285 [style=dashed label="logical-or-expression"]
  438 -> 286 [style=dashed label="multiplicative-expression"]
  438 -> 85 [style=dashed label="namespace-alias"]
  438 -> 88 [style=dashed label="namespace-name"]
  438 -> 287 [style=dashed label="nested-name-specifier"]
  438 -> 90 [style=dashed label="nested-name-specifier-opt"]
  438 -> 288 [style=dashed label="new-expression"]
  438 -> 289 [style=dashed label="noexcept-expression"]
  438 -> 290 [style=dashed label="operator-function-id"]
  438 -> 94 [style=dashed label="placeholder-type-specifier"]
  438 -> 291 [style=dashed label="pm-expression"]
  438 -> 292 [style=dashed label="postfix-expression"]
  438 -> 293 [style=dashed label="primary-expression"]
  438 -> 294 [style=dashed label="qualified-id"]
  438 -> 295 [style=dashed label="relational-expression"]
  438 -> 296 [style=dashed label="requires-expression"]
  438 -> 297 [style=dashed label="shift-expression"]
  438 -> 298 [style=dashed label="simple-template-id"]
  438 -> 299 [style=dashed label="simple-type-specifier"]
  438 -> 300 [style=dashed label="string-literal"]
  438 -> 301 [style=dashed label="template-id"]
  438 -> 102 [style=dashed label="template-name"]
  438 -> 302 [style=dashed label="throw-expression"]
  438 -> 104 [style=dashed label="type-constraint"]
  438 -> 105 [style=dashed label="type-constraint-opt"]
  438 -> 106 [style=dashed label="type-name"]
  438 -> 108 [style=dashed label="typedef-name"]
  438 -> 303 [style=dashed label="typename-specifier"]
  438 -> 304 [style=dashed label="unary-expression"]
  438 -> 305 [style=dashed label="unary-operator"]
  438 -> 306 [style=dashed label="unqualified-id"]
  438 -> 307 [style=dashed label="yield-expression"]
  438 -> "438R19" [style=solid]
 "438R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  438 -> "438R458d" [label="[IDENTIFIER]", style=solid]
 "438R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  438 -> "438R710d" [label="[\"decltype\"]", style=solid]
 "438R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  438 -> "438R710" [label="[\"auto\"]", style=solid]
 "438R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  439 [label="State 439\n\l286 fold-expression: \"(\" \"...\" • fold-operator cast-expression \")\"\l"]
  439 -> 709 [style=solid label="\",\""]
  439 -> 710 [style=solid label="\"+\""]
  439 -> 711 [style=solid label="\"-\""]
  439 -> 712 [style=solid label="\"=\""]
  439 -> 713 [style=solid label="\"&\""]
  439 -> 714 [style=solid label="\"*=\""]
  439 -> 715 [style=solid label="\"/=\""]
  439 -> 716 [style=solid label="\"%=\""]
  439 -> 717 [style=solid label="\"+=\""]
  439 -> 718 [style=solid label="\"-=\""]
  439 -> 719 [style=solid label="\">>=\""]
  439 -> 720 [style=solid label="\"<<=\""]
  439 -> 721 [style=solid label="\"&=\""]
  439 -> 722 [style=solid label="\"^=\""]
  439 -> 723 [style=solid label="\"|=\""]
  439 -> 724 [style=solid label="\"&&\""]
  439 -> 725 [style=solid label="\"||\""]
  439 -> 726 [style=solid label="\"==\""]
  439 -> 727 [style=solid label="\"!=\""]
  439 -> 728 [style=solid label="\"^\""]
  439 -> 729 [style=solid label="\"<\""]
  439 -> 730 [style=solid label="\">\""]
  439 -> 731 [style=solid label="\"*\""]
  439 -> 732 [style=solid label="\"/\""]
  439 -> 733 [style=solid label="\"%\""]
  439 -> 734 [style=solid label="\"|\""]
  439 -> 735 [style=solid label="\"<<\""]
  439 -> 736 [style=solid label="\">>\""]
  439 -> 737 [style=solid label="\"<=\""]
  439 -> 738 [style=solid label="\">=\""]
  439 -> 739 [style=solid label="\".*\""]
  439 -> 740 [style=solid label="\"->*\""]
  439 -> 741 [style=dashed label="fold-operator"]
  440 [label="State 440\n\l285 fold-expression: \"(\" cast-expression • fold-operator \"...\" \")\"\l287                | \"(\" cast-expression • fold-operator \"...\" fold-operator cast-expression \")\"\l556 pm-expression: cast-expression •\l"]
  440 -> 709 [style=solid label="\",\""]
  440 -> 710 [style=solid label="\"+\""]
  440 -> 711 [style=solid label="\"-\""]
  440 -> 712 [style=solid label="\"=\""]
  440 -> 713 [style=solid label="\"&\""]
  440 -> 714 [style=solid label="\"*=\""]
  440 -> 715 [style=solid label="\"/=\""]
  440 -> 716 [style=solid label="\"%=\""]
  440 -> 717 [style=solid label="\"+=\""]
  440 -> 718 [style=solid label="\"-=\""]
  440 -> 719 [style=solid label="\">>=\""]
  440 -> 720 [style=solid label="\"<<=\""]
  440 -> 721 [style=solid label="\"&=\""]
  440 -> 722 [style=solid label="\"^=\""]
  440 -> 723 [style=solid label="\"|=\""]
  440 -> 724 [style=solid label="\"&&\""]
  440 -> 725 [style=solid label="\"||\""]
  440 -> 726 [style=solid label="\"==\""]
  440 -> 727 [style=solid label="\"!=\""]
  440 -> 728 [style=solid label="\"^\""]
  440 -> 729 [style=solid label="\"<\""]
  440 -> 730 [style=solid label="\">\""]
  440 -> 731 [style=solid label="\"*\""]
  440 -> 732 [style=solid label="\"/\""]
  440 -> 733 [style=solid label="\"%\""]
  440 -> 734 [style=solid label="\"|\""]
  440 -> 735 [style=solid label="\"<<\""]
  440 -> 736 [style=solid label="\">>\""]
  440 -> 737 [style=solid label="\"<=\""]
  440 -> 738 [style=solid label="\">=\""]
  440 -> 739 [style=solid label="\".*\""]
  440 -> 740 [style=solid label="\"->*\""]
  440 -> 742 [style=dashed label="fold-operator"]
  440 -> "440R556d" [label="[\",\", \"+\", \"-\", \"=\", \"&\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"&&\", \"||\", \"==\", \"!=\", \"^\", \"<\", \">\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\"]", style=solid]
 "440R556d" [label="R556", fillcolor=5, shape=diamond, style=filled]
  440 -> "440R556" [style=solid]
 "440R556" [label="R556", fillcolor=3, shape=diamond, style=filled]
  441 [label="State 441\n\l278 expression: expression • \",\" assignment-expression\l579 primary-expression: \"(\" expression • \")\"\l"]
  441 -> 534 [style=solid label="\",\""]
  441 -> 743 [style=solid label="\")\""]
  442 [label="State 442\n\l130 cast-expression: \"(\" type-id • \")\" cast-expression\l"]
  442 -> 744 [style=solid label="\")\""]
  443 [label="State 443\n\l636 simple-capture: IDENTIFIER • ELLIPSIS-opt\l"]
  443 -> 156 [style=solid label="\"...\""]
  443 -> 745 [style=dashed label="ELLIPSIS-opt"]
  443 -> "443R5" [style=solid]
 "443R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  444 [label="State 444\n\l638 simple-capture: \"this\" •\l"]
  444 -> "444R638" [style=solid]
 "444R638" [label="R638", fillcolor=3, shape=diamond, style=filled]
  445 [label="State 445\n\l126 capture-default: \"=\" •\l"]
  445 -> "445R126" [style=solid]
 "445R126" [label="R126", fillcolor=3, shape=diamond, style=filled]
  446 [label="State 446\n\l125 capture-default: \"&\" •\l347 init-capture: \"&\" • ELLIPSIS-opt IDENTIFIER initializer\l637 simple-capture: \"&\" • IDENTIFIER ELLIPSIS-opt\l"]
  446 -> 156 [style=solid label="\"...\""]
  446 -> 746 [style=solid label="IDENTIFIER"]
  446 -> 747 [style=dashed label="ELLIPSIS-opt"]
  446 -> "446R5d" [label="[IDENTIFIER]", style=solid]
 "446R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  446 -> "446R125" [label="[]", style=solid]
 "446R125" [label="R125", fillcolor=3, shape=diamond, style=filled]
  447 [label="State 447\n\l639 simple-capture: \"*\" • \"this\"\l"]
  447 -> 748 [style=solid label="\"this\""]
  448 [label="State 448\n\l346 init-capture: ELLIPSIS-opt • IDENTIFIER initializer\l"]
  448 -> 749 [style=solid label="IDENTIFIER"]
  449 [label="State 449\n\l127 capture-list: capture •\l"]
  449 -> "449R127" [style=solid]
 "449R127" [label="R127", fillcolor=3, shape=diamond, style=filled]
  450 [label="State 450\n\l379 lambda-capture: capture-default •\l381               | capture-default • \",\" capture-list\l"]
  450 -> 750 [style=solid label="\",\""]
  450 -> "450R379" [style=solid]
 "450R379" [label="R379", fillcolor=3, shape=diamond, style=filled]
  451 [label="State 451\n\l128 capture-list: capture-list • \",\" capture\l380 lambda-capture: capture-list •\l"]
  451 -> 751 [style=solid label="\",\""]
  451 -> "451R380" [style=solid]
 "451R380" [label="R380", fillcolor=3, shape=diamond, style=filled]
  452 [label="State 452\n\l124 capture: init-capture •\l"]
  452 -> "452R124" [style=solid]
 "452R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
  453 [label="State 453\n\l383 lambda-capture-opt: lambda-capture •\l"]
  453 -> "453R383" [style=solid]
 "453R383" [label="R383", fillcolor=3, shape=diamond, style=filled]
  454 [label="State 454\n\l388 lambda-introducer: \"[\" lambda-capture-opt • \"]\"\l"]
  454 -> 752 [style=solid label="\"]\""]
  455 [label="State 455\n\l123 capture: simple-capture •\l"]
  455 -> "455R123" [style=solid]
 "455R123" [label="R123", fillcolor=3, shape=diamond, style=filled]
  456 [label="State 456\n\l 90 await-expression: \"co_await\" cast-expression •\l"]
  456 -> "456R90" [style=solid]
 "456R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
  457 [label="State 457\n\l542 overloadable-operator: \",\" •\l"]
  457 -> "457R542" [style=solid]
 "457R542" [label="R542", fillcolor=3, shape=diamond, style=filled]
  458 [label="State 458\n\l509 overloadable-operator: \"!\" •\l"]
  458 -> "458R509" [style=solid]
 "458R509" [label="R509", fillcolor=3, shape=diamond, style=filled]
  459 [label="State 459\n\l510 overloadable-operator: \"+\" •\l"]
  459 -> "459R510" [style=solid]
 "459R510" [label="R510", fillcolor=3, shape=diamond, style=filled]
  460 [label="State 460\n\l511 overloadable-operator: \"-\" •\l"]
  460 -> "460R511" [style=solid]
 "460R511" [label="R511", fillcolor=3, shape=diamond, style=filled]
  461 [label="State 461\n\l518 overloadable-operator: \"=\" •\l"]
  461 -> "461R518" [style=solid]
 "461R518" [label="R518", fillcolor=3, shape=diamond, style=filled]
  462 [label="State 462\n\l504 overloadable-operator: \"(\" • \")\"\l"]
  462 -> 753 [style=solid label="\")\""]
  463 [label="State 463\n\l516 overloadable-operator: \"&\" •\l"]
  463 -> "463R516" [style=solid]
 "463R516" [label="R516", fillcolor=3, shape=diamond, style=filled]
  464 [label="State 464\n\l521 overloadable-operator: \"*=\" •\l"]
  464 -> "464R521" [style=solid]
 "464R521" [label="R521", fillcolor=3, shape=diamond, style=filled]
  465 [label="State 465\n\l522 overloadable-operator: \"/=\" •\l"]
  465 -> "465R522" [style=solid]
 "465R522" [label="R522", fillcolor=3, shape=diamond, style=filled]
  466 [label="State 466\n\l523 overloadable-operator: \"%=\" •\l"]
  466 -> "466R523" [style=solid]
 "466R523" [label="R523", fillcolor=3, shape=diamond, style=filled]
  467 [label="State 467\n\l519 overloadable-operator: \"+=\" •\l"]
  467 -> "467R519" [style=solid]
 "467R519" [label="R519", fillcolor=3, shape=diamond, style=filled]
  468 [label="State 468\n\l520 overloadable-operator: \"-=\" •\l"]
  468 -> "468R520" [style=solid]
 "468R520" [label="R520", fillcolor=3, shape=diamond, style=filled]
  469 [label="State 469\n\l539 overloadable-operator: \">>=\" •\l"]
  469 -> "469R539" [style=solid]
 "469R539" [label="R539", fillcolor=3, shape=diamond, style=filled]
  470 [label="State 470\n\l538 overloadable-operator: \"<<=\" •\l"]
  470 -> "470R538" [style=solid]
 "470R538" [label="R538", fillcolor=3, shape=diamond, style=filled]
  471 [label="State 471\n\l525 overloadable-operator: \"&=\" •\l"]
  471 -> "471R525" [style=solid]
 "471R525" [label="R525", fillcolor=3, shape=diamond, style=filled]
  472 [label="State 472\n\l524 overloadable-operator: \"^=\" •\l"]
  472 -> "472R524" [style=solid]
 "472R524" [label="R524", fillcolor=3, shape=diamond, style=filled]
  473 [label="State 473\n\l526 overloadable-operator: \"|=\" •\l"]
  473 -> "473R526" [style=solid]
 "473R526" [label="R526", fillcolor=3, shape=diamond, style=filled]
  474 [label="State 474\n\l505 overloadable-operator: \"[\" • \"]\"\l"]
  474 -> 754 [style=solid label="\"]\""]
  475 [label="State 475\n\l503 overloadable-operator: \"co_await\" •\l"]
  475 -> "475R503" [style=solid]
 "475R503" [label="R503", fillcolor=3, shape=diamond, style=filled]
  476 [label="State 476\n\l533 overloadable-operator: \"<=>\" •\l"]
  476 -> "476R533" [style=solid]
 "476R533" [label="R533", fillcolor=3, shape=diamond, style=filled]
  477 [label="State 477\n\l534 overloadable-operator: \"&&\" •\l"]
  477 -> "477R534" [style=solid]
 "477R534" [label="R534", fillcolor=3, shape=diamond, style=filled]
  478 [label="State 478\n\l535 overloadable-operator: \"||\" •\l"]
  478 -> "478R535" [style=solid]
 "478R535" [label="R535", fillcolor=3, shape=diamond, style=filled]
  479 [label="State 479\n\l506 overloadable-operator: \"->\" •\l"]
  479 -> "479R506" [style=solid]
 "479R506" [label="R506", fillcolor=3, shape=diamond, style=filled]
  480 [label="State 480\n\l500 overloadable-operator: \"delete\" •\l502                      | \"delete\" • \"[\" \"]\"\l"]
  480 -> 755 [style=solid label="\"[\""]
  480 -> "480R500d" [label="[\"[\"]", style=solid]
 "480R500d" [label="R500", fillcolor=5, shape=diamond, style=filled]
  480 -> "480R500" [style=solid]
 "480R500" [label="R500", fillcolor=3, shape=diamond, style=filled]
  481 [label="State 481\n\l527 overloadable-operator: \"==\" •\l"]
  481 -> "481R527" [style=solid]
 "481R527" [label="R527", fillcolor=3, shape=diamond, style=filled]
  482 [label="State 482\n\l528 overloadable-operator: \"!=\" •\l"]
  482 -> "482R528" [style=solid]
 "482R528" [label="R528", fillcolor=3, shape=diamond, style=filled]
  483 [label="State 483\n\l515 overloadable-operator: \"^\" •\l"]
  483 -> "483R515" [style=solid]
 "483R515" [label="R515", fillcolor=3, shape=diamond, style=filled]
  484 [label="State 484\n\l529 overloadable-operator: \"<\" •\l"]
  484 -> "484R529" [style=solid]
 "484R529" [label="R529", fillcolor=3, shape=diamond, style=filled]
  485 [label="State 485\n\l530 overloadable-operator: \">\" •\l"]
  485 -> "485R530" [style=solid]
 "485R530" [label="R530", fillcolor=3, shape=diamond, style=filled]
  486 [label="State 486\n\l512 overloadable-operator: \"*\" •\l"]
  486 -> "486R512" [style=solid]
 "486R512" [label="R512", fillcolor=3, shape=diamond, style=filled]
  487 [label="State 487\n\l513 overloadable-operator: \"/\" •\l"]
  487 -> "487R513" [style=solid]
 "487R513" [label="R513", fillcolor=3, shape=diamond, style=filled]
  488 [label="State 488\n\l514 overloadable-operator: \"%\" •\l"]
  488 -> "488R514" [style=solid]
 "488R514" [label="R514", fillcolor=3, shape=diamond, style=filled]
  489 [label="State 489\n\l517 overloadable-operator: \"|\" •\l"]
  489 -> "489R517" [style=solid]
 "489R517" [label="R517", fillcolor=3, shape=diamond, style=filled]
  490 [label="State 490\n\l536 overloadable-operator: \"<<\" •\l"]
  490 -> "490R536" [style=solid]
 "490R536" [label="R536", fillcolor=3, shape=diamond, style=filled]
  491 [label="State 491\n\l537 overloadable-operator: \">>\" •\l"]
  491 -> "491R537" [style=solid]
 "491R537" [label="R537", fillcolor=3, shape=diamond, style=filled]
  492 [label="State 492\n\l531 overloadable-operator: \"<=\" •\l"]
  492 -> "492R531" [style=solid]
 "492R531" [label="R531", fillcolor=3, shape=diamond, style=filled]
  493 [label="State 493\n\l532 overloadable-operator: \">=\" •\l"]
  493 -> "493R532" [style=solid]
 "493R532" [label="R532", fillcolor=3, shape=diamond, style=filled]
  494 [label="State 494\n\l507 overloadable-operator: \"->*\" •\l"]
  494 -> "494R507" [style=solid]
 "494R507" [label="R507", fillcolor=3, shape=diamond, style=filled]
  495 [label="State 495\n\l499 overloadable-operator: \"new\" •\l501                      | \"new\" • \"[\" \"]\"\l"]
  495 -> 756 [style=solid label="\"[\""]
  495 -> "495R499d" [label="[\"[\"]", style=solid]
 "495R499d" [label="R499", fillcolor=5, shape=diamond, style=filled]
  495 -> "495R499" [style=solid]
 "495R499" [label="R499", fillcolor=3, shape=diamond, style=filled]
  496 [label="State 496\n\l508 overloadable-operator: \"~\" •\l"]
  496 -> "496R508" [style=solid]
 "496R508" [label="R508", fillcolor=3, shape=diamond, style=filled]
  497 [label="State 497\n\l540 overloadable-operator: \"++\" •\l"]
  497 -> "497R540" [style=solid]
 "497R540" [label="R540", fillcolor=3, shape=diamond, style=filled]
  498 [label="State 498\n\l541 overloadable-operator: \"--\" •\l"]
  498 -> "498R541" [style=solid]
 "498R541" [label="R541", fillcolor=3, shape=diamond, style=filled]
  499 [label="State 499\n\l169 conversion-function-id: \"operator\" conversion-type-id •\l"]
  499 -> "499R169" [style=solid]
 "499R169" [label="R169", fillcolor=3, shape=diamond, style=filled]
  500 [label="State 500\n\l497 operator-function-id: \"operator\" overloadable-operator •\l498                     | \"operator\" overloadable-operator • \"<\" template-argument-list-opt \">\"\l"]
  500 -> 757 [style=solid label="\"<\""]
  500 -> "500R497d" [label="[\"<\"]", style=solid]
 "500R497d" [label="R497", fillcolor=5, shape=diamond, style=filled]
  500 -> "500R497" [style=solid]
 "500R497" [label="R497", fillcolor=3, shape=diamond, style=filled]
  501 [label="State 501\n\l392 literal-operator-id: \"operator\" string-literal • IDENTIFIER\l762 user-defined-string-literal: string-literal • ud-suffix\l"]
  501 -> 758 [style=solid label="IDENTIFIER"]
  501 -> 759 [style=dashed label="ud-suffix"]
  502 [label="State 502\n\l170 conversion-type-id: type-specifier-seq • conversion-declarator-opt\l"]
  502 -> 4 [style=solid label="IDENTIFIER"]
  502 -> 6 [style=solid label="\"::\""]
  502 -> 160 [style=solid label="\"&\""]
  502 -> 163 [style=solid label="\"&&\""]
  502 -> 21 [style=solid label="\"decltype\""]
  502 -> 164 [style=solid label="\"*\""]
  502 -> 55 [style=dashed label="class-name"]
  502 -> 760 [style=dashed label="conversion-declarator"]
  502 -> 761 [style=dashed label="conversion-declarator-opt"]
  502 -> 121 [style=dashed label="decltype-specifier"]
  502 -> 71 [style=dashed label="enum-name"]
  502 -> 85 [style=dashed label="namespace-alias"]
  502 -> 88 [style=dashed label="namespace-name"]
  502 -> 187 [style=dashed label="nested-name-specifier"]
  502 -> 762 [style=dashed label="ptr-operator"]
  502 -> 96 [style=dashed label="simple-template-id"]
  502 -> 102 [style=dashed label="template-name"]
  502 -> 106 [style=dashed label="type-name"]
  502 -> 108 [style=dashed label="typedef-name"]
  502 -> "502R167d" [label="[IDENTIFIER, \"::\", \"&\", \"&&\", \"decltype\", \"*\"]", style=solid]
 "502R167d" [label="R167", fillcolor=5, shape=diamond, style=filled]
  502 -> "502R167" [style=solid]
 "502R167" [label="R167", fillcolor=3, shape=diamond, style=filled]
  503 [label="State 503\n\l393 literal-operator-id: \"operator\" user-defined-string-literal •\l"]
  503 -> "503R393" [style=solid]
 "503R393" [label="R393", fillcolor=3, shape=diamond, style=filled]
  504 [label="State 504\n\l616 requirement-parameter-list: \"(\" • parameter-declaration-clause \")\"\l"]
  504 -> 177 [style=dashed label="attribute-specifier-seq"]
  504 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  504 -> 619 [style=dashed label="parameter-declaration"]
  504 -> 763 [style=dashed label="parameter-declaration-clause"]
  504 -> 621 [style=dashed label="parameter-declaration-list"]
  504 -> 622 [style=dashed label="parameter-declaration-list-opt"]
  504 -> "504R83" [style=solid]
 "504R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  504 -> "504R551" [label="[\"...\", \")\"]", style=solid]
 "504R551" [label="R551", fillcolor=3, shape=diamond, style=filled]
  505 [label="State 505\n\l618 requirement-parameter-list-opt: requirement-parameter-list •\l"]
  505 -> "505R618" [style=solid]
 "505R618" [label="R618", fillcolor=3, shape=diamond, style=filled]
  506 [label="State 506\n\l624 requires-expression: \"requires\" requirement-parameter-list-opt • requirement-body\l"]
  506 -> 764 [style=solid label="\"{\""]
  506 -> 765 [style=dashed label="requirement-body"]
  507 [label="State 507\n\l137 class-name: IDENTIFIER •\l246 enum-name: IDENTIFIER •\l696 template-name: IDENTIFIER •\l731 typedef-name: IDENTIFIER •\l"]
  507 -> "507R137" [style=solid]
 "507R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  507 -> "507R246d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "507R246d" [label="R246", fillcolor=5, shape=diamond, style=filled]
  507 -> "507R696d" [label="[\"<\"]", style=solid]
 "507R696d" [label="R696", fillcolor=5, shape=diamond, style=filled]
  507 -> "507R731d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "507R731d" [label="R731", fillcolor=5, shape=diamond, style=filled]
  508 [label="State 508\n\l760 unqualified-id: \"~\" decltype-specifier •\l"]
  508 -> "508R760" [style=solid]
 "508R760" [label="R760", fillcolor=3, shape=diamond, style=filled]
  509 [label="State 509\n\l759 unqualified-id: \"~\" type-name •\l"]
  509 -> "509R759" [style=solid]
 "509R759" [label="R759", fillcolor=3, shape=diamond, style=filled]
  510 [label="State 510\n\l738 unary-expression: \"++\" cast-expression •\l"]
  510 -> "510R738" [style=solid]
 "510R738" [label="R738", fillcolor=3, shape=diamond, style=filled]
  511 [label="State 511\n\l739 unary-expression: \"--\" cast-expression •\l"]
  511 -> "511R739" [style=solid]
 "511R739" [label="R739", fillcolor=3, shape=diamond, style=filled]
  512 [label="State 512\n\l570 postfix-expression: \"dynamic_cast\" \"<\" • type-id \">\" \"(\" expression \")\"\l"]
  512 -> 4 [style=solid label="IDENTIFIER"]
  512 -> 6 [style=solid label="\"::\""]
  512 -> 8 [style=solid label="\"typename\""]
  512 -> 12 [style=solid label="\"class\""]
  512 -> 13 [style=solid label="\"struct\""]
  512 -> 14 [style=solid label="\"union\""]
  512 -> 15 [style=solid label="\"const\""]
  512 -> 16 [style=solid label="\"volatile\""]
  512 -> 21 [style=solid label="\"decltype\""]
  512 -> 125 [style=solid label="\"enum\""]
  512 -> 27 [style=solid label="\"char\""]
  512 -> 28 [style=solid label="\"char8_t\""]
  512 -> 29 [style=solid label="\"char16_t\""]
  512 -> 30 [style=solid label="\"char32_t\""]
  512 -> 31 [style=solid label="\"wchar_t\""]
  512 -> 32 [style=solid label="\"bool\""]
  512 -> 33 [style=solid label="\"short\""]
  512 -> 34 [style=solid label="\"int\""]
  512 -> 35 [style=solid label="\"long\""]
  512 -> 36 [style=solid label="\"signed\""]
  512 -> 37 [style=solid label="\"unsigned\""]
  512 -> 38 [style=solid label="\"float\""]
  512 -> 39 [style=solid label="\"double\""]
  512 -> 40 [style=solid label="\"void\""]
  512 -> 406 [style=dashed label="class-key"]
  512 -> 55 [style=dashed label="class-name"]
  512 -> 57 [style=dashed label="cv-qualifier"]
  512 -> 63 [style=dashed label="decltype-specifier"]
  512 -> 66 [style=dashed label="elaborated-enum-specifier"]
  512 -> 67 [style=dashed label="elaborated-type-specifier"]
  512 -> 71 [style=dashed label="enum-name"]
  512 -> 85 [style=dashed label="namespace-alias"]
  512 -> 88 [style=dashed label="namespace-name"]
  512 -> 89 [style=dashed label="nested-name-specifier"]
  512 -> 90 [style=dashed label="nested-name-specifier-opt"]
  512 -> 94 [style=dashed label="placeholder-type-specifier"]
  512 -> 96 [style=dashed label="simple-template-id"]
  512 -> 97 [style=dashed label="simple-type-specifier"]
  512 -> 102 [style=dashed label="template-name"]
  512 -> 104 [style=dashed label="type-constraint"]
  512 -> 105 [style=dashed label="type-constraint-opt"]
  512 -> 766 [style=dashed label="type-id"]
  512 -> 106 [style=dashed label="type-name"]
  512 -> 414 [style=dashed label="type-specifier"]
  512 -> 415 [style=dashed label="type-specifier-seq"]
  512 -> 108 [style=dashed label="typedef-name"]
  512 -> 109 [style=dashed label="typename-specifier"]
  512 -> "512R458d" [label="[IDENTIFIER]", style=solid]
 "512R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  512 -> "512R710d" [label="[\"decltype\"]", style=solid]
 "512R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  512 -> "512R710" [label="[]", style=solid]
 "512R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  513 [label="State 513\n\l571 postfix-expression: \"static_cast\" \"<\" • type-id \">\" \"(\" expression \")\"\l"]
  513 -> 4 [style=solid label="IDENTIFIER"]
  513 -> 6 [style=solid label="\"::\""]
  513 -> 8 [style=solid label="\"typename\""]
  513 -> 12 [style=solid label="\"class\""]
  513 -> 13 [style=solid label="\"struct\""]
  513 -> 14 [style=solid label="\"union\""]
  513 -> 15 [style=solid label="\"const\""]
  513 -> 16 [style=solid label="\"volatile\""]
  513 -> 21 [style=solid label="\"decltype\""]
  513 -> 125 [style=solid label="\"enum\""]
  513 -> 27 [style=solid label="\"char\""]
  513 -> 28 [style=solid label="\"char8_t\""]
  513 -> 29 [style=solid label="\"char16_t\""]
  513 -> 30 [style=solid label="\"char32_t\""]
  513 -> 31 [style=solid label="\"wchar_t\""]
  513 -> 32 [style=solid label="\"bool\""]
  513 -> 33 [style=solid label="\"short\""]
  513 -> 34 [style=solid label="\"int\""]
  513 -> 35 [style=solid label="\"long\""]
  513 -> 36 [style=solid label="\"signed\""]
  513 -> 37 [style=solid label="\"unsigned\""]
  513 -> 38 [style=solid label="\"float\""]
  513 -> 39 [style=solid label="\"double\""]
  513 -> 40 [style=solid label="\"void\""]
  513 -> 406 [style=dashed label="class-key"]
  513 -> 55 [style=dashed label="class-name"]
  513 -> 57 [style=dashed label="cv-qualifier"]
  513 -> 63 [style=dashed label="decltype-specifier"]
  513 -> 66 [style=dashed label="elaborated-enum-specifier"]
  513 -> 67 [style=dashed label="elaborated-type-specifier"]
  513 -> 71 [style=dashed label="enum-name"]
  513 -> 85 [style=dashed label="namespace-alias"]
  513 -> 88 [style=dashed label="namespace-name"]
  513 -> 89 [style=dashed label="nested-name-specifier"]
  513 -> 90 [style=dashed label="nested-name-specifier-opt"]
  513 -> 94 [style=dashed label="placeholder-type-specifier"]
  513 -> 96 [style=dashed label="simple-template-id"]
  513 -> 97 [style=dashed label="simple-type-specifier"]
  513 -> 102 [style=dashed label="template-name"]
  513 -> 104 [style=dashed label="type-constraint"]
  513 -> 105 [style=dashed label="type-constraint-opt"]
  513 -> 767 [style=dashed label="type-id"]
  513 -> 106 [style=dashed label="type-name"]
  513 -> 414 [style=dashed label="type-specifier"]
  513 -> 415 [style=dashed label="type-specifier-seq"]
  513 -> 108 [style=dashed label="typedef-name"]
  513 -> 109 [style=dashed label="typename-specifier"]
  513 -> "513R458d" [label="[IDENTIFIER]", style=solid]
 "513R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  513 -> "513R710d" [label="[\"decltype\"]", style=solid]
 "513R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  513 -> "513R710" [label="[]", style=solid]
 "513R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  514 [label="State 514\n\l572 postfix-expression: \"reinterpret_cast\" \"<\" • type-id \">\" \"(\" expression \")\"\l"]
  514 -> 4 [style=solid label="IDENTIFIER"]
  514 -> 6 [style=solid label="\"::\""]
  514 -> 8 [style=solid label="\"typename\""]
  514 -> 12 [style=solid label="\"class\""]
  514 -> 13 [style=solid label="\"struct\""]
  514 -> 14 [style=solid label="\"union\""]
  514 -> 15 [style=solid label="\"const\""]
  514 -> 16 [style=solid label="\"volatile\""]
  514 -> 21 [style=solid label="\"decltype\""]
  514 -> 125 [style=solid label="\"enum\""]
  514 -> 27 [style=solid label="\"char\""]
  514 -> 28 [style=solid label="\"char8_t\""]
  514 -> 29 [style=solid label="\"char16_t\""]
  514 -> 30 [style=solid label="\"char32_t\""]
  514 -> 31 [style=solid label="\"wchar_t\""]
  514 -> 32 [style=solid label="\"bool\""]
  514 -> 33 [style=solid label="\"short\""]
  514 -> 34 [style=solid label="\"int\""]
  514 -> 35 [style=solid label="\"long\""]
  514 -> 36 [style=solid label="\"signed\""]
  514 -> 37 [style=solid label="\"unsigned\""]
  514 -> 38 [style=solid label="\"float\""]
  514 -> 39 [style=solid label="\"double\""]
  514 -> 40 [style=solid label="\"void\""]
  514 -> 406 [style=dashed label="class-key"]
  514 -> 55 [style=dashed label="class-name"]
  514 -> 57 [style=dashed label="cv-qualifier"]
  514 -> 63 [style=dashed label="decltype-specifier"]
  514 -> 66 [style=dashed label="elaborated-enum-specifier"]
  514 -> 67 [style=dashed label="elaborated-type-specifier"]
  514 -> 71 [style=dashed label="enum-name"]
  514 -> 85 [style=dashed label="namespace-alias"]
  514 -> 88 [style=dashed label="namespace-name"]
  514 -> 89 [style=dashed label="nested-name-specifier"]
  514 -> 90 [style=dashed label="nested-name-specifier-opt"]
  514 -> 94 [style=dashed label="placeholder-type-specifier"]
  514 -> 96 [style=dashed label="simple-template-id"]
  514 -> 97 [style=dashed label="simple-type-specifier"]
  514 -> 102 [style=dashed label="template-name"]
  514 -> 104 [style=dashed label="type-constraint"]
  514 -> 105 [style=dashed label="type-constraint-opt"]
  514 -> 768 [style=dashed label="type-id"]
  514 -> 106 [style=dashed label="type-name"]
  514 -> 414 [style=dashed label="type-specifier"]
  514 -> 415 [style=dashed label="type-specifier-seq"]
  514 -> 108 [style=dashed label="typedef-name"]
  514 -> 109 [style=dashed label="typename-specifier"]
  514 -> "514R458d" [label="[IDENTIFIER]", style=solid]
 "514R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  514 -> "514R710d" [label="[\"decltype\"]", style=solid]
 "514R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  514 -> "514R710" [label="[]", style=solid]
 "514R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  515 [label="State 515\n\l573 postfix-expression: \"const_cast\" \"<\" • type-id \">\" \"(\" expression \")\"\l"]
  515 -> 4 [style=solid label="IDENTIFIER"]
  515 -> 6 [style=solid label="\"::\""]
  515 -> 8 [style=solid label="\"typename\""]
  515 -> 12 [style=solid label="\"class\""]
  515 -> 13 [style=solid label="\"struct\""]
  515 -> 14 [style=solid label="\"union\""]
  515 -> 15 [style=solid label="\"const\""]
  515 -> 16 [style=solid label="\"volatile\""]
  515 -> 21 [style=solid label="\"decltype\""]
  515 -> 125 [style=solid label="\"enum\""]
  515 -> 27 [style=solid label="\"char\""]
  515 -> 28 [style=solid label="\"char8_t\""]
  515 -> 29 [style=solid label="\"char16_t\""]
  515 -> 30 [style=solid label="\"char32_t\""]
  515 -> 31 [style=solid label="\"wchar_t\""]
  515 -> 32 [style=solid label="\"bool\""]
  515 -> 33 [style=solid label="\"short\""]
  515 -> 34 [style=solid label="\"int\""]
  515 -> 35 [style=solid label="\"long\""]
  515 -> 36 [style=solid label="\"signed\""]
  515 -> 37 [style=solid label="\"unsigned\""]
  515 -> 38 [style=solid label="\"float\""]
  515 -> 39 [style=solid label="\"double\""]
  515 -> 40 [style=solid label="\"void\""]
  515 -> 406 [style=dashed label="class-key"]
  515 -> 55 [style=dashed label="class-name"]
  515 -> 57 [style=dashed label="cv-qualifier"]
  515 -> 63 [style=dashed label="decltype-specifier"]
  515 -> 66 [style=dashed label="elaborated-enum-specifier"]
  515 -> 67 [style=dashed label="elaborated-type-specifier"]
  515 -> 71 [style=dashed label="enum-name"]
  515 -> 85 [style=dashed label="namespace-alias"]
  515 -> 88 [style=dashed label="namespace-name"]
  515 -> 89 [style=dashed label="nested-name-specifier"]
  515 -> 90 [style=dashed label="nested-name-specifier-opt"]
  515 -> 94 [style=dashed label="placeholder-type-specifier"]
  515 -> 96 [style=dashed label="simple-template-id"]
  515 -> 97 [style=dashed label="simple-type-specifier"]
  515 -> 102 [style=dashed label="template-name"]
  515 -> 104 [style=dashed label="type-constraint"]
  515 -> 105 [style=dashed label="type-constraint-opt"]
  515 -> 769 [style=dashed label="type-id"]
  515 -> 106 [style=dashed label="type-name"]
  515 -> 414 [style=dashed label="type-specifier"]
  515 -> 415 [style=dashed label="type-specifier-seq"]
  515 -> 108 [style=dashed label="typedef-name"]
  515 -> 109 [style=dashed label="typename-specifier"]
  515 -> "515R458d" [label="[IDENTIFIER]", style=solid]
 "515R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  515 -> "515R710d" [label="[\"decltype\"]", style=solid]
 "515R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  515 -> "515R710" [label="[]", style=solid]
 "515R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  516 [label="State 516\n\l574 postfix-expression: \"typeid\" \"(\" • expression \")\"\l575                   | \"typeid\" \"(\" • type-id \")\"\l"]
  516 -> 238 [style=solid label="IDENTIFIER"]
  516 -> 239 [style=solid label="\"noexcept\""]
  516 -> 240 [style=solid label="\"!\""]
  516 -> 241 [style=solid label="\"::\""]
  516 -> 242 [style=solid label="\"this\""]
  516 -> 8 [style=solid label="\"typename\""]
  516 -> 243 [style=solid label="\"+\""]
  516 -> 244 [style=solid label="\"-\""]
  516 -> 245 [style=solid label="\"(\""]
  516 -> 246 [style=solid label="\"&\""]
  516 -> 247 [style=solid label="\"[\""]
  516 -> 248 [style=solid label="\"co_await\""]
  516 -> 12 [style=solid label="\"class\""]
  516 -> 13 [style=solid label="\"struct\""]
  516 -> 14 [style=solid label="\"union\""]
  516 -> 249 [style=solid label="\"operator\""]
  516 -> 15 [style=solid label="\"const\""]
  516 -> 16 [style=solid label="\"volatile\""]
  516 -> 21 [style=solid label="\"decltype\""]
  516 -> 125 [style=solid label="\"enum\""]
  516 -> 250 [style=solid label="\"*\""]
  516 -> 251 [style=solid label="\"requires\""]
  516 -> 252 [style=solid label="\"~\""]
  516 -> 253 [style=solid label="\"++\""]
  516 -> 254 [style=solid label="\"--\""]
  516 -> 255 [style=solid label="\"dynamic_cast\""]
  516 -> 256 [style=solid label="\"static_cast\""]
  516 -> 257 [style=solid label="\"reinterpret_cast\""]
  516 -> 258 [style=solid label="\"const_cast\""]
  516 -> 259 [style=solid label="\"typeid\""]
  516 -> 260 [style=solid label="\"literal\""]
  516 -> 27 [style=solid label="\"char\""]
  516 -> 28 [style=solid label="\"char8_t\""]
  516 -> 29 [style=solid label="\"char16_t\""]
  516 -> 30 [style=solid label="\"char32_t\""]
  516 -> 31 [style=solid label="\"wchar_t\""]
  516 -> 32 [style=solid label="\"bool\""]
  516 -> 33 [style=solid label="\"short\""]
  516 -> 34 [style=solid label="\"int\""]
  516 -> 35 [style=solid label="\"long\""]
  516 -> 36 [style=solid label="\"signed\""]
  516 -> 37 [style=solid label="\"unsigned\""]
  516 -> 38 [style=solid label="\"float\""]
  516 -> 39 [style=solid label="\"double\""]
  516 -> 40 [style=solid label="\"void\""]
  516 -> 118 [style=solid label="STRING_LITERAL"]
  516 -> 261 [style=solid label="\"throw\""]
  516 -> 262 [style=solid label="\"sizeof\""]
  516 -> 263 [style=solid label="\"alignof\""]
  516 -> 264 [style=solid label="\"co_yield\""]
  516 -> 265 [style=dashed label="SCOPE-opt"]
  516 -> 266 [style=dashed label="additive-expression"]
  516 -> 267 [style=dashed label="and-expression"]
  516 -> 268 [style=dashed label="assignment-expression"]
  516 -> 269 [style=dashed label="await-expression"]
  516 -> 270 [style=dashed label="cast-expression"]
  516 -> 406 [style=dashed label="class-key"]
  516 -> 55 [style=dashed label="class-name"]
  516 -> 271 [style=dashed label="compare-expression"]
  516 -> 272 [style=dashed label="conditional-expression"]
  516 -> 273 [style=dashed label="conversion-function-id"]
  516 -> 57 [style=dashed label="cv-qualifier"]
  516 -> 63 [style=dashed label="decltype-specifier"]
  516 -> 274 [style=dashed label="delete-expression"]
  516 -> 66 [style=dashed label="elaborated-enum-specifier"]
  516 -> 67 [style=dashed label="elaborated-type-specifier"]
  516 -> 71 [style=dashed label="enum-name"]
  516 -> 275 [style=dashed label="equality-expression"]
  516 -> 276 [style=dashed label="exclusive-or-expression"]
  516 -> 770 [style=dashed label="expression"]
  516 -> 278 [style=dashed label="fold-expression"]
  516 -> 279 [style=dashed label="id-expression"]
  516 -> 280 [style=dashed label="inclusive-or-expression"]
  516 -> 281 [style=dashed label="lambda-expression"]
  516 -> 282 [style=dashed label="lambda-introducer"]
  516 -> 283 [style=dashed label="literal-operator-id"]
  516 -> 284 [style=dashed label="logical-and-expression"]
  516 -> 285 [style=dashed label="logical-or-expression"]
  516 -> 286 [style=dashed label="multiplicative-expression"]
  516 -> 85 [style=dashed label="namespace-alias"]
  516 -> 88 [style=dashed label="namespace-name"]
  516 -> 287 [style=dashed label="nested-name-specifier"]
  516 -> 90 [style=dashed label="nested-name-specifier-opt"]
  516 -> 288 [style=dashed label="new-expression"]
  516 -> 289 [style=dashed label="noexcept-expression"]
  516 -> 290 [style=dashed label="operator-function-id"]
  516 -> 94 [style=dashed label="placeholder-type-specifier"]
  516 -> 291 [style=dashed label="pm-expression"]
  516 -> 292 [style=dashed label="postfix-expression"]
  516 -> 293 [style=dashed label="primary-expression"]
  516 -> 294 [style=dashed label="qualified-id"]
  516 -> 295 [style=dashed label="relational-expression"]
  516 -> 296 [style=dashed label="requires-expression"]
  516 -> 297 [style=dashed label="shift-expression"]
  516 -> 298 [style=dashed label="simple-template-id"]
  516 -> 409 [style=dashed label="simple-type-specifier"]
  516 -> 300 [style=dashed label="string-literal"]
  516 -> 301 [style=dashed label="template-id"]
  516 -> 102 [style=dashed label="template-name"]
  516 -> 302 [style=dashed label="throw-expression"]
  516 -> 104 [style=dashed label="type-constraint"]
  516 -> 105 [style=dashed label="type-constraint-opt"]
  516 -> 771 [style=dashed label="type-id"]
  516 -> 106 [style=dashed label="type-name"]
  516 -> 414 [style=dashed label="type-specifier"]
  516 -> 415 [style=dashed label="type-specifier-seq"]
  516 -> 108 [style=dashed label="typedef-name"]
  516 -> 416 [style=dashed label="typename-specifier"]
  516 -> 304 [style=dashed label="unary-expression"]
  516 -> 305 [style=dashed label="unary-operator"]
  516 -> 306 [style=dashed label="unqualified-id"]
  516 -> 307 [style=dashed label="yield-expression"]
  516 -> "516R19" [style=solid]
 "516R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  516 -> "516R458d" [label="[IDENTIFIER]", style=solid]
 "516R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  516 -> "516R710d" [label="[\"decltype\"]", style=solid]
 "516R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  516 -> "516R710" [label="[\"auto\"]", style=solid]
 "516R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  517 [label="State 517\n\l 55 assignment-expression-opt: assignment-expression •\l"]
  517 -> "517R55" [style=solid]
 "517R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  518 [label="State 518\n\l701 throw-expression: \"throw\" assignment-expression-opt •\l"]
  518 -> "518R701" [style=solid]
 "518R701" [label="R701", fillcolor=3, shape=diamond, style=filled]
  519 [label="State 519\n\l743 unary-expression: \"sizeof\" \"...\" • \"(\" IDENTIFIER \")\"\l"]
  519 -> 772 [style=solid label="\"(\""]
  520 [label="State 520\n\l285 fold-expression: \"(\" • cast-expression fold-operator \"...\" \")\"\l286                | \"(\" • \"...\" fold-operator cast-expression \")\"\l287                | \"(\" • cast-expression fold-operator \"...\" fold-operator cast-expression \")\"\l579 primary-expression: \"(\" • expression \")\"\l742 unary-expression: \"sizeof\" \"(\" • type-id \")\"\l"]
  520 -> 439 [style=solid label="\"...\""]
  520 -> 238 [style=solid label="IDENTIFIER"]
  520 -> 239 [style=solid label="\"noexcept\""]
  520 -> 240 [style=solid label="\"!\""]
  520 -> 241 [style=solid label="\"::\""]
  520 -> 242 [style=solid label="\"this\""]
  520 -> 8 [style=solid label="\"typename\""]
  520 -> 243 [style=solid label="\"+\""]
  520 -> 244 [style=solid label="\"-\""]
  520 -> 245 [style=solid label="\"(\""]
  520 -> 246 [style=solid label="\"&\""]
  520 -> 247 [style=solid label="\"[\""]
  520 -> 248 [style=solid label="\"co_await\""]
  520 -> 12 [style=solid label="\"class\""]
  520 -> 13 [style=solid label="\"struct\""]
  520 -> 14 [style=solid label="\"union\""]
  520 -> 249 [style=solid label="\"operator\""]
  520 -> 15 [style=solid label="\"const\""]
  520 -> 16 [style=solid label="\"volatile\""]
  520 -> 21 [style=solid label="\"decltype\""]
  520 -> 125 [style=solid label="\"enum\""]
  520 -> 250 [style=solid label="\"*\""]
  520 -> 251 [style=solid label="\"requires\""]
  520 -> 252 [style=solid label="\"~\""]
  520 -> 253 [style=solid label="\"++\""]
  520 -> 254 [style=solid label="\"--\""]
  520 -> 255 [style=solid label="\"dynamic_cast\""]
  520 -> 256 [style=solid label="\"static_cast\""]
  520 -> 257 [style=solid label="\"reinterpret_cast\""]
  520 -> 258 [style=solid label="\"const_cast\""]
  520 -> 259 [style=solid label="\"typeid\""]
  520 -> 260 [style=solid label="\"literal\""]
  520 -> 27 [style=solid label="\"char\""]
  520 -> 28 [style=solid label="\"char8_t\""]
  520 -> 29 [style=solid label="\"char16_t\""]
  520 -> 30 [style=solid label="\"char32_t\""]
  520 -> 31 [style=solid label="\"wchar_t\""]
  520 -> 32 [style=solid label="\"bool\""]
  520 -> 33 [style=solid label="\"short\""]
  520 -> 34 [style=solid label="\"int\""]
  520 -> 35 [style=solid label="\"long\""]
  520 -> 36 [style=solid label="\"signed\""]
  520 -> 37 [style=solid label="\"unsigned\""]
  520 -> 38 [style=solid label="\"float\""]
  520 -> 39 [style=solid label="\"double\""]
  520 -> 40 [style=solid label="\"void\""]
  520 -> 118 [style=solid label="STRING_LITERAL"]
  520 -> 261 [style=solid label="\"throw\""]
  520 -> 262 [style=solid label="\"sizeof\""]
  520 -> 263 [style=solid label="\"alignof\""]
  520 -> 264 [style=solid label="\"co_yield\""]
  520 -> 265 [style=dashed label="SCOPE-opt"]
  520 -> 266 [style=dashed label="additive-expression"]
  520 -> 267 [style=dashed label="and-expression"]
  520 -> 268 [style=dashed label="assignment-expression"]
  520 -> 269 [style=dashed label="await-expression"]
  520 -> 440 [style=dashed label="cast-expression"]
  520 -> 406 [style=dashed label="class-key"]
  520 -> 55 [style=dashed label="class-name"]
  520 -> 271 [style=dashed label="compare-expression"]
  520 -> 272 [style=dashed label="conditional-expression"]
  520 -> 273 [style=dashed label="conversion-function-id"]
  520 -> 57 [style=dashed label="cv-qualifier"]
  520 -> 63 [style=dashed label="decltype-specifier"]
  520 -> 274 [style=dashed label="delete-expression"]
  520 -> 66 [style=dashed label="elaborated-enum-specifier"]
  520 -> 67 [style=dashed label="elaborated-type-specifier"]
  520 -> 71 [style=dashed label="enum-name"]
  520 -> 275 [style=dashed label="equality-expression"]
  520 -> 276 [style=dashed label="exclusive-or-expression"]
  520 -> 441 [style=dashed label="expression"]
  520 -> 278 [style=dashed label="fold-expression"]
  520 -> 279 [style=dashed label="id-expression"]
  520 -> 280 [style=dashed label="inclusive-or-expression"]
  520 -> 281 [style=dashed label="lambda-expression"]
  520 -> 282 [style=dashed label="lambda-introducer"]
  520 -> 283 [style=dashed label="literal-operator-id"]
  520 -> 284 [style=dashed label="logical-and-expression"]
  520 -> 285 [style=dashed label="logical-or-expression"]
  520 -> 286 [style=dashed label="multiplicative-expression"]
  520 -> 85 [style=dashed label="namespace-alias"]
  520 -> 88 [style=dashed label="namespace-name"]
  520 -> 287 [style=dashed label="nested-name-specifier"]
  520 -> 90 [style=dashed label="nested-name-specifier-opt"]
  520 -> 288 [style=dashed label="new-expression"]
  520 -> 289 [style=dashed label="noexcept-expression"]
  520 -> 290 [style=dashed label="operator-function-id"]
  520 -> 94 [style=dashed label="placeholder-type-specifier"]
  520 -> 291 [style=dashed label="pm-expression"]
  520 -> 292 [style=dashed label="postfix-expression"]
  520 -> 293 [style=dashed label="primary-expression"]
  520 -> 294 [style=dashed label="qualified-id"]
  520 -> 295 [style=dashed label="relational-expression"]
  520 -> 296 [style=dashed label="requires-expression"]
  520 -> 297 [style=dashed label="shift-expression"]
  520 -> 298 [style=dashed label="simple-template-id"]
  520 -> 409 [style=dashed label="simple-type-specifier"]
  520 -> 300 [style=dashed label="string-literal"]
  520 -> 301 [style=dashed label="template-id"]
  520 -> 102 [style=dashed label="template-name"]
  520 -> 302 [style=dashed label="throw-expression"]
  520 -> 104 [style=dashed label="type-constraint"]
  520 -> 105 [style=dashed label="type-constraint-opt"]
  520 -> 773 [style=dashed label="type-id"]
  520 -> 106 [style=dashed label="type-name"]
  520 -> 414 [style=dashed label="type-specifier"]
  520 -> 415 [style=dashed label="type-specifier-seq"]
  520 -> 108 [style=dashed label="typedef-name"]
  520 -> 416 [style=dashed label="typename-specifier"]
  520 -> 304 [style=dashed label="unary-expression"]
  520 -> 305 [style=dashed label="unary-operator"]
  520 -> 306 [style=dashed label="unqualified-id"]
  520 -> 307 [style=dashed label="yield-expression"]
  520 -> "520R19" [style=solid]
 "520R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  520 -> "520R458d" [label="[IDENTIFIER]", style=solid]
 "520R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  520 -> "520R710d" [label="[\"decltype\"]", style=solid]
 "520R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  520 -> "520R710" [label="[\"auto\"]", style=solid]
 "520R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  521 [label="State 521\n\l741 unary-expression: \"sizeof\" unary-expression •\l"]
  521 -> "521R741" [style=solid]
 "521R741" [label="R741", fillcolor=3, shape=diamond, style=filled]
  522 [label="State 522\n\l744 unary-expression: \"alignof\" \"(\" • type-id \")\"\l"]
  522 -> 4 [style=solid label="IDENTIFIER"]
  522 -> 6 [style=solid label="\"::\""]
  522 -> 8 [style=solid label="\"typename\""]
  522 -> 12 [style=solid label="\"class\""]
  522 -> 13 [style=solid label="\"struct\""]
  522 -> 14 [style=solid label="\"union\""]
  522 -> 15 [style=solid label="\"const\""]
  522 -> 16 [style=solid label="\"volatile\""]
  522 -> 21 [style=solid label="\"decltype\""]
  522 -> 125 [style=solid label="\"enum\""]
  522 -> 27 [style=solid label="\"char\""]
  522 -> 28 [style=solid label="\"char8_t\""]
  522 -> 29 [style=solid label="\"char16_t\""]
  522 -> 30 [style=solid label="\"char32_t\""]
  522 -> 31 [style=solid label="\"wchar_t\""]
  522 -> 32 [style=solid label="\"bool\""]
  522 -> 33 [style=solid label="\"short\""]
  522 -> 34 [style=solid label="\"int\""]
  522 -> 35 [style=solid label="\"long\""]
  522 -> 36 [style=solid label="\"signed\""]
  522 -> 37 [style=solid label="\"unsigned\""]
  522 -> 38 [style=solid label="\"float\""]
  522 -> 39 [style=solid label="\"double\""]
  522 -> 40 [style=solid label="\"void\""]
  522 -> 406 [style=dashed label="class-key"]
  522 -> 55 [style=dashed label="class-name"]
  522 -> 57 [style=dashed label="cv-qualifier"]
  522 -> 63 [style=dashed label="decltype-specifier"]
  522 -> 66 [style=dashed label="elaborated-enum-specifier"]
  522 -> 67 [style=dashed label="elaborated-type-specifier"]
  522 -> 71 [style=dashed label="enum-name"]
  522 -> 85 [style=dashed label="namespace-alias"]
  522 -> 88 [style=dashed label="namespace-name"]
  522 -> 89 [style=dashed label="nested-name-specifier"]
  522 -> 90 [style=dashed label="nested-name-specifier-opt"]
  522 -> 94 [style=dashed label="placeholder-type-specifier"]
  522 -> 96 [style=dashed label="simple-template-id"]
  522 -> 97 [style=dashed label="simple-type-specifier"]
  522 -> 102 [style=dashed label="template-name"]
  522 -> 104 [style=dashed label="type-constraint"]
  522 -> 105 [style=dashed label="type-constraint-opt"]
  522 -> 774 [style=dashed label="type-id"]
  522 -> 106 [style=dashed label="type-name"]
  522 -> 414 [style=dashed label="type-specifier"]
  522 -> 415 [style=dashed label="type-specifier-seq"]
  522 -> 108 [style=dashed label="typedef-name"]
  522 -> 109 [style=dashed label="typename-specifier"]
  522 -> "522R458d" [label="[IDENTIFIER]", style=solid]
 "522R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  522 -> "522R710d" [label="[\"decltype\"]", style=solid]
 "522R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  522 -> "522R710" [label="[]", style=solid]
 "522R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  523 [label="State 523\n\l775 yield-expression: \"co_yield\" assignment-expression •\l"]
  523 -> "523R775" [style=solid]
 "523R775" [label="R775", fillcolor=3, shape=diamond, style=filled]
  524 [label="State 524\n\l776 yield-expression: \"co_yield\" braced-init-list •\l"]
  524 -> "524R776" [style=solid]
 "524R776" [label="R776", fillcolor=3, shape=diamond, style=filled]
  525 [label="State 525\n\l222 delete-expression: SCOPE-opt \"delete\" • cast-expression\l223                  | SCOPE-opt \"delete\" • \"[\" \"]\" cast-expression\l"]
  525 -> 238 [style=solid label="IDENTIFIER"]
  525 -> 239 [style=solid label="\"noexcept\""]
  525 -> 240 [style=solid label="\"!\""]
  525 -> 241 [style=solid label="\"::\""]
  525 -> 242 [style=solid label="\"this\""]
  525 -> 8 [style=solid label="\"typename\""]
  525 -> 243 [style=solid label="\"+\""]
  525 -> 244 [style=solid label="\"-\""]
  525 -> 245 [style=solid label="\"(\""]
  525 -> 246 [style=solid label="\"&\""]
  525 -> 775 [style=solid label="\"[\""]
  525 -> 248 [style=solid label="\"co_await\""]
  525 -> 249 [style=solid label="\"operator\""]
  525 -> 21 [style=solid label="\"decltype\""]
  525 -> 250 [style=solid label="\"*\""]
  525 -> 251 [style=solid label="\"requires\""]
  525 -> 252 [style=solid label="\"~\""]
  525 -> 253 [style=solid label="\"++\""]
  525 -> 254 [style=solid label="\"--\""]
  525 -> 255 [style=solid label="\"dynamic_cast\""]
  525 -> 256 [style=solid label="\"static_cast\""]
  525 -> 257 [style=solid label="\"reinterpret_cast\""]
  525 -> 258 [style=solid label="\"const_cast\""]
  525 -> 259 [style=solid label="\"typeid\""]
  525 -> 260 [style=solid label="\"literal\""]
  525 -> 27 [style=solid label="\"char\""]
  525 -> 28 [style=solid label="\"char8_t\""]
  525 -> 29 [style=solid label="\"char16_t\""]
  525 -> 30 [style=solid label="\"char32_t\""]
  525 -> 31 [style=solid label="\"wchar_t\""]
  525 -> 32 [style=solid label="\"bool\""]
  525 -> 33 [style=solid label="\"short\""]
  525 -> 34 [style=solid label="\"int\""]
  525 -> 35 [style=solid label="\"long\""]
  525 -> 36 [style=solid label="\"signed\""]
  525 -> 37 [style=solid label="\"unsigned\""]
  525 -> 38 [style=solid label="\"float\""]
  525 -> 39 [style=solid label="\"double\""]
  525 -> 40 [style=solid label="\"void\""]
  525 -> 118 [style=solid label="STRING_LITERAL"]
  525 -> 262 [style=solid label="\"sizeof\""]
  525 -> 263 [style=solid label="\"alignof\""]
  525 -> 265 [style=dashed label="SCOPE-opt"]
  525 -> 269 [style=dashed label="await-expression"]
  525 -> 776 [style=dashed label="cast-expression"]
  525 -> 55 [style=dashed label="class-name"]
  525 -> 273 [style=dashed label="conversion-function-id"]
  525 -> 63 [style=dashed label="decltype-specifier"]
  525 -> 274 [style=dashed label="delete-expression"]
  525 -> 71 [style=dashed label="enum-name"]
  525 -> 278 [style=dashed label="fold-expression"]
  525 -> 279 [style=dashed label="id-expression"]
  525 -> 281 [style=dashed label="lambda-expression"]
  525 -> 282 [style=dashed label="lambda-introducer"]
  525 -> 283 [style=dashed label="literal-operator-id"]
  525 -> 85 [style=dashed label="namespace-alias"]
  525 -> 88 [style=dashed label="namespace-name"]
  525 -> 287 [style=dashed label="nested-name-specifier"]
  525 -> 90 [style=dashed label="nested-name-specifier-opt"]
  525 -> 288 [style=dashed label="new-expression"]
  525 -> 289 [style=dashed label="noexcept-expression"]
  525 -> 290 [style=dashed label="operator-function-id"]
  525 -> 94 [style=dashed label="placeholder-type-specifier"]
  525 -> 292 [style=dashed label="postfix-expression"]
  525 -> 293 [style=dashed label="primary-expression"]
  525 -> 294 [style=dashed label="qualified-id"]
  525 -> 296 [style=dashed label="requires-expression"]
  525 -> 298 [style=dashed label="simple-template-id"]
  525 -> 299 [style=dashed label="simple-type-specifier"]
  525 -> 300 [style=dashed label="string-literal"]
  525 -> 301 [style=dashed label="template-id"]
  525 -> 102 [style=dashed label="template-name"]
  525 -> 104 [style=dashed label="type-constraint"]
  525 -> 105 [style=dashed label="type-constraint-opt"]
  525 -> 106 [style=dashed label="type-name"]
  525 -> 108 [style=dashed label="typedef-name"]
  525 -> 303 [style=dashed label="typename-specifier"]
  525 -> 304 [style=dashed label="unary-expression"]
  525 -> 305 [style=dashed label="unary-operator"]
  525 -> 306 [style=dashed label="unqualified-id"]
  525 -> "525R19" [style=solid]
 "525R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  525 -> "525R458d" [label="[IDENTIFIER]", style=solid]
 "525R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  525 -> "525R710d" [label="[\"decltype\"]", style=solid]
 "525R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  525 -> "525R710" [label="[\"auto\"]", style=solid]
 "525R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  526 [label="State 526\n\l466 new-expression: SCOPE-opt \"new\" • new-placement-opt new-type-id new-initializer-opt\l467               | SCOPE-opt \"new\" • new-placement-opt \"(\" type-id \")\" new-initializer-opt\l"]
  526 -> 777 [style=solid label="\"(\""]
  526 -> 778 [style=dashed label="new-placement"]
  526 -> 779 [style=dashed label="new-placement-opt"]
  526 -> "526R473d" [label="[\"(\"]", style=solid]
 "526R473d" [label="R473", fillcolor=5, shape=diamond, style=filled]
  526 -> "526R473" [style=solid]
 "526R473" [label="R473", fillcolor=3, shape=diamond, style=filled]
  527 [label="State 527\n\l 42 additive-expression: additive-expression \"+\" • multiplicative-expression\l"]
  527 -> 238 [style=solid label="IDENTIFIER"]
  527 -> 239 [style=solid label="\"noexcept\""]
  527 -> 240 [style=solid label="\"!\""]
  527 -> 241 [style=solid label="\"::\""]
  527 -> 242 [style=solid label="\"this\""]
  527 -> 8 [style=solid label="\"typename\""]
  527 -> 243 [style=solid label="\"+\""]
  527 -> 244 [style=solid label="\"-\""]
  527 -> 245 [style=solid label="\"(\""]
  527 -> 246 [style=solid label="\"&\""]
  527 -> 247 [style=solid label="\"[\""]
  527 -> 248 [style=solid label="\"co_await\""]
  527 -> 249 [style=solid label="\"operator\""]
  527 -> 21 [style=solid label="\"decltype\""]
  527 -> 250 [style=solid label="\"*\""]
  527 -> 251 [style=solid label="\"requires\""]
  527 -> 252 [style=solid label="\"~\""]
  527 -> 253 [style=solid label="\"++\""]
  527 -> 254 [style=solid label="\"--\""]
  527 -> 255 [style=solid label="\"dynamic_cast\""]
  527 -> 256 [style=solid label="\"static_cast\""]
  527 -> 257 [style=solid label="\"reinterpret_cast\""]
  527 -> 258 [style=solid label="\"const_cast\""]
  527 -> 259 [style=solid label="\"typeid\""]
  527 -> 260 [style=solid label="\"literal\""]
  527 -> 27 [style=solid label="\"char\""]
  527 -> 28 [style=solid label="\"char8_t\""]
  527 -> 29 [style=solid label="\"char16_t\""]
  527 -> 30 [style=solid label="\"char32_t\""]
  527 -> 31 [style=solid label="\"wchar_t\""]
  527 -> 32 [style=solid label="\"bool\""]
  527 -> 33 [style=solid label="\"short\""]
  527 -> 34 [style=solid label="\"int\""]
  527 -> 35 [style=solid label="\"long\""]
  527 -> 36 [style=solid label="\"signed\""]
  527 -> 37 [style=solid label="\"unsigned\""]
  527 -> 38 [style=solid label="\"float\""]
  527 -> 39 [style=solid label="\"double\""]
  527 -> 40 [style=solid label="\"void\""]
  527 -> 118 [style=solid label="STRING_LITERAL"]
  527 -> 262 [style=solid label="\"sizeof\""]
  527 -> 263 [style=solid label="\"alignof\""]
  527 -> 265 [style=dashed label="SCOPE-opt"]
  527 -> 269 [style=dashed label="await-expression"]
  527 -> 270 [style=dashed label="cast-expression"]
  527 -> 55 [style=dashed label="class-name"]
  527 -> 273 [style=dashed label="conversion-function-id"]
  527 -> 63 [style=dashed label="decltype-specifier"]
  527 -> 274 [style=dashed label="delete-expression"]
  527 -> 71 [style=dashed label="enum-name"]
  527 -> 278 [style=dashed label="fold-expression"]
  527 -> 279 [style=dashed label="id-expression"]
  527 -> 281 [style=dashed label="lambda-expression"]
  527 -> 282 [style=dashed label="lambda-introducer"]
  527 -> 283 [style=dashed label="literal-operator-id"]
  527 -> 780 [style=dashed label="multiplicative-expression"]
  527 -> 85 [style=dashed label="namespace-alias"]
  527 -> 88 [style=dashed label="namespace-name"]
  527 -> 287 [style=dashed label="nested-name-specifier"]
  527 -> 90 [style=dashed label="nested-name-specifier-opt"]
  527 -> 288 [style=dashed label="new-expression"]
  527 -> 289 [style=dashed label="noexcept-expression"]
  527 -> 290 [style=dashed label="operator-function-id"]
  527 -> 94 [style=dashed label="placeholder-type-specifier"]
  527 -> 291 [style=dashed label="pm-expression"]
  527 -> 292 [style=dashed label="postfix-expression"]
  527 -> 293 [style=dashed label="primary-expression"]
  527 -> 294 [style=dashed label="qualified-id"]
  527 -> 296 [style=dashed label="requires-expression"]
  527 -> 298 [style=dashed label="simple-template-id"]
  527 -> 299 [style=dashed label="simple-type-specifier"]
  527 -> 300 [style=dashed label="string-literal"]
  527 -> 301 [style=dashed label="template-id"]
  527 -> 102 [style=dashed label="template-name"]
  527 -> 104 [style=dashed label="type-constraint"]
  527 -> 105 [style=dashed label="type-constraint-opt"]
  527 -> 106 [style=dashed label="type-name"]
  527 -> 108 [style=dashed label="typedef-name"]
  527 -> 303 [style=dashed label="typename-specifier"]
  527 -> 304 [style=dashed label="unary-expression"]
  527 -> 305 [style=dashed label="unary-operator"]
  527 -> 306 [style=dashed label="unqualified-id"]
  527 -> "527R19" [style=solid]
 "527R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  527 -> "527R458d" [label="[IDENTIFIER]", style=solid]
 "527R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  527 -> "527R710d" [label="[\"decltype\"]", style=solid]
 "527R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  527 -> "527R710" [label="[\"auto\"]", style=solid]
 "527R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  528 [label="State 528\n\l 43 additive-expression: additive-expression \"-\" • multiplicative-expression\l"]
  528 -> 238 [style=solid label="IDENTIFIER"]
  528 -> 239 [style=solid label="\"noexcept\""]
  528 -> 240 [style=solid label="\"!\""]
  528 -> 241 [style=solid label="\"::\""]
  528 -> 242 [style=solid label="\"this\""]
  528 -> 8 [style=solid label="\"typename\""]
  528 -> 243 [style=solid label="\"+\""]
  528 -> 244 [style=solid label="\"-\""]
  528 -> 245 [style=solid label="\"(\""]
  528 -> 246 [style=solid label="\"&\""]
  528 -> 247 [style=solid label="\"[\""]
  528 -> 248 [style=solid label="\"co_await\""]
  528 -> 249 [style=solid label="\"operator\""]
  528 -> 21 [style=solid label="\"decltype\""]
  528 -> 250 [style=solid label="\"*\""]
  528 -> 251 [style=solid label="\"requires\""]
  528 -> 252 [style=solid label="\"~\""]
  528 -> 253 [style=solid label="\"++\""]
  528 -> 254 [style=solid label="\"--\""]
  528 -> 255 [style=solid label="\"dynamic_cast\""]
  528 -> 256 [style=solid label="\"static_cast\""]
  528 -> 257 [style=solid label="\"reinterpret_cast\""]
  528 -> 258 [style=solid label="\"const_cast\""]
  528 -> 259 [style=solid label="\"typeid\""]
  528 -> 260 [style=solid label="\"literal\""]
  528 -> 27 [style=solid label="\"char\""]
  528 -> 28 [style=solid label="\"char8_t\""]
  528 -> 29 [style=solid label="\"char16_t\""]
  528 -> 30 [style=solid label="\"char32_t\""]
  528 -> 31 [style=solid label="\"wchar_t\""]
  528 -> 32 [style=solid label="\"bool\""]
  528 -> 33 [style=solid label="\"short\""]
  528 -> 34 [style=solid label="\"int\""]
  528 -> 35 [style=solid label="\"long\""]
  528 -> 36 [style=solid label="\"signed\""]
  528 -> 37 [style=solid label="\"unsigned\""]
  528 -> 38 [style=solid label="\"float\""]
  528 -> 39 [style=solid label="\"double\""]
  528 -> 40 [style=solid label="\"void\""]
  528 -> 118 [style=solid label="STRING_LITERAL"]
  528 -> 262 [style=solid label="\"sizeof\""]
  528 -> 263 [style=solid label="\"alignof\""]
  528 -> 265 [style=dashed label="SCOPE-opt"]
  528 -> 269 [style=dashed label="await-expression"]
  528 -> 270 [style=dashed label="cast-expression"]
  528 -> 55 [style=dashed label="class-name"]
  528 -> 273 [style=dashed label="conversion-function-id"]
  528 -> 63 [style=dashed label="decltype-specifier"]
  528 -> 274 [style=dashed label="delete-expression"]
  528 -> 71 [style=dashed label="enum-name"]
  528 -> 278 [style=dashed label="fold-expression"]
  528 -> 279 [style=dashed label="id-expression"]
  528 -> 281 [style=dashed label="lambda-expression"]
  528 -> 282 [style=dashed label="lambda-introducer"]
  528 -> 283 [style=dashed label="literal-operator-id"]
  528 -> 781 [style=dashed label="multiplicative-expression"]
  528 -> 85 [style=dashed label="namespace-alias"]
  528 -> 88 [style=dashed label="namespace-name"]
  528 -> 287 [style=dashed label="nested-name-specifier"]
  528 -> 90 [style=dashed label="nested-name-specifier-opt"]
  528 -> 288 [style=dashed label="new-expression"]
  528 -> 289 [style=dashed label="noexcept-expression"]
  528 -> 290 [style=dashed label="operator-function-id"]
  528 -> 94 [style=dashed label="placeholder-type-specifier"]
  528 -> 291 [style=dashed label="pm-expression"]
  528 -> 292 [style=dashed label="postfix-expression"]
  528 -> 293 [style=dashed label="primary-expression"]
  528 -> 294 [style=dashed label="qualified-id"]
  528 -> 296 [style=dashed label="requires-expression"]
  528 -> 298 [style=dashed label="simple-template-id"]
  528 -> 299 [style=dashed label="simple-type-specifier"]
  528 -> 300 [style=dashed label="string-literal"]
  528 -> 301 [style=dashed label="template-id"]
  528 -> 102 [style=dashed label="template-name"]
  528 -> 104 [style=dashed label="type-constraint"]
  528 -> 105 [style=dashed label="type-constraint-opt"]
  528 -> 106 [style=dashed label="type-name"]
  528 -> 108 [style=dashed label="typedef-name"]
  528 -> 303 [style=dashed label="typename-specifier"]
  528 -> 304 [style=dashed label="unary-expression"]
  528 -> 305 [style=dashed label="unary-operator"]
  528 -> 306 [style=dashed label="unqualified-id"]
  528 -> "528R19" [style=solid]
 "528R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  528 -> "528R458d" [label="[IDENTIFIER]", style=solid]
 "528R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  528 -> "528R710d" [label="[\"decltype\"]", style=solid]
 "528R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  528 -> "528R710" [label="[\"auto\"]", style=solid]
 "528R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  529 [label="State 529\n\l 48 and-expression: and-expression \"&\" • equality-expression\l"]
  529 -> 238 [style=solid label="IDENTIFIER"]
  529 -> 239 [style=solid label="\"noexcept\""]
  529 -> 240 [style=solid label="\"!\""]
  529 -> 241 [style=solid label="\"::\""]
  529 -> 242 [style=solid label="\"this\""]
  529 -> 8 [style=solid label="\"typename\""]
  529 -> 243 [style=solid label="\"+\""]
  529 -> 244 [style=solid label="\"-\""]
  529 -> 245 [style=solid label="\"(\""]
  529 -> 246 [style=solid label="\"&\""]
  529 -> 247 [style=solid label="\"[\""]
  529 -> 248 [style=solid label="\"co_await\""]
  529 -> 249 [style=solid label="\"operator\""]
  529 -> 21 [style=solid label="\"decltype\""]
  529 -> 250 [style=solid label="\"*\""]
  529 -> 251 [style=solid label="\"requires\""]
  529 -> 252 [style=solid label="\"~\""]
  529 -> 253 [style=solid label="\"++\""]
  529 -> 254 [style=solid label="\"--\""]
  529 -> 255 [style=solid label="\"dynamic_cast\""]
  529 -> 256 [style=solid label="\"static_cast\""]
  529 -> 257 [style=solid label="\"reinterpret_cast\""]
  529 -> 258 [style=solid label="\"const_cast\""]
  529 -> 259 [style=solid label="\"typeid\""]
  529 -> 260 [style=solid label="\"literal\""]
  529 -> 27 [style=solid label="\"char\""]
  529 -> 28 [style=solid label="\"char8_t\""]
  529 -> 29 [style=solid label="\"char16_t\""]
  529 -> 30 [style=solid label="\"char32_t\""]
  529 -> 31 [style=solid label="\"wchar_t\""]
  529 -> 32 [style=solid label="\"bool\""]
  529 -> 33 [style=solid label="\"short\""]
  529 -> 34 [style=solid label="\"int\""]
  529 -> 35 [style=solid label="\"long\""]
  529 -> 36 [style=solid label="\"signed\""]
  529 -> 37 [style=solid label="\"unsigned\""]
  529 -> 38 [style=solid label="\"float\""]
  529 -> 39 [style=solid label="\"double\""]
  529 -> 40 [style=solid label="\"void\""]
  529 -> 118 [style=solid label="STRING_LITERAL"]
  529 -> 262 [style=solid label="\"sizeof\""]
  529 -> 263 [style=solid label="\"alignof\""]
  529 -> 265 [style=dashed label="SCOPE-opt"]
  529 -> 266 [style=dashed label="additive-expression"]
  529 -> 269 [style=dashed label="await-expression"]
  529 -> 270 [style=dashed label="cast-expression"]
  529 -> 55 [style=dashed label="class-name"]
  529 -> 271 [style=dashed label="compare-expression"]
  529 -> 273 [style=dashed label="conversion-function-id"]
  529 -> 63 [style=dashed label="decltype-specifier"]
  529 -> 274 [style=dashed label="delete-expression"]
  529 -> 71 [style=dashed label="enum-name"]
  529 -> 782 [style=dashed label="equality-expression"]
  529 -> 278 [style=dashed label="fold-expression"]
  529 -> 279 [style=dashed label="id-expression"]
  529 -> 281 [style=dashed label="lambda-expression"]
  529 -> 282 [style=dashed label="lambda-introducer"]
  529 -> 283 [style=dashed label="literal-operator-id"]
  529 -> 286 [style=dashed label="multiplicative-expression"]
  529 -> 85 [style=dashed label="namespace-alias"]
  529 -> 88 [style=dashed label="namespace-name"]
  529 -> 287 [style=dashed label="nested-name-specifier"]
  529 -> 90 [style=dashed label="nested-name-specifier-opt"]
  529 -> 288 [style=dashed label="new-expression"]
  529 -> 289 [style=dashed label="noexcept-expression"]
  529 -> 290 [style=dashed label="operator-function-id"]
  529 -> 94 [style=dashed label="placeholder-type-specifier"]
  529 -> 291 [style=dashed label="pm-expression"]
  529 -> 292 [style=dashed label="postfix-expression"]
  529 -> 293 [style=dashed label="primary-expression"]
  529 -> 294 [style=dashed label="qualified-id"]
  529 -> 295 [style=dashed label="relational-expression"]
  529 -> 296 [style=dashed label="requires-expression"]
  529 -> 297 [style=dashed label="shift-expression"]
  529 -> 298 [style=dashed label="simple-template-id"]
  529 -> 299 [style=dashed label="simple-type-specifier"]
  529 -> 300 [style=dashed label="string-literal"]
  529 -> 301 [style=dashed label="template-id"]
  529 -> 102 [style=dashed label="template-name"]
  529 -> 104 [style=dashed label="type-constraint"]
  529 -> 105 [style=dashed label="type-constraint-opt"]
  529 -> 106 [style=dashed label="type-name"]
  529 -> 108 [style=dashed label="typedef-name"]
  529 -> 303 [style=dashed label="typename-specifier"]
  529 -> 304 [style=dashed label="unary-expression"]
  529 -> 305 [style=dashed label="unary-operator"]
  529 -> 306 [style=dashed label="unqualified-id"]
  529 -> "529R19" [style=solid]
 "529R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  529 -> "529R458d" [label="[IDENTIFIER]", style=solid]
 "529R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  529 -> "529R710d" [label="[\"decltype\"]", style=solid]
 "529R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  529 -> "529R710" [label="[\"auto\"]", style=solid]
 "529R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  530 [label="State 530\n\l147 compare-expression: compare-expression \"<=>\" • shift-expression\l"]
  530 -> 238 [style=solid label="IDENTIFIER"]
  530 -> 239 [style=solid label="\"noexcept\""]
  530 -> 240 [style=solid label="\"!\""]
  530 -> 241 [style=solid label="\"::\""]
  530 -> 242 [style=solid label="\"this\""]
  530 -> 8 [style=solid label="\"typename\""]
  530 -> 243 [style=solid label="\"+\""]
  530 -> 244 [style=solid label="\"-\""]
  530 -> 245 [style=solid label="\"(\""]
  530 -> 246 [style=solid label="\"&\""]
  530 -> 247 [style=solid label="\"[\""]
  530 -> 248 [style=solid label="\"co_await\""]
  530 -> 249 [style=solid label="\"operator\""]
  530 -> 21 [style=solid label="\"decltype\""]
  530 -> 250 [style=solid label="\"*\""]
  530 -> 251 [style=solid label="\"requires\""]
  530 -> 252 [style=solid label="\"~\""]
  530 -> 253 [style=solid label="\"++\""]
  530 -> 254 [style=solid label="\"--\""]
  530 -> 255 [style=solid label="\"dynamic_cast\""]
  530 -> 256 [style=solid label="\"static_cast\""]
  530 -> 257 [style=solid label="\"reinterpret_cast\""]
  530 -> 258 [style=solid label="\"const_cast\""]
  530 -> 259 [style=solid label="\"typeid\""]
  530 -> 260 [style=solid label="\"literal\""]
  530 -> 27 [style=solid label="\"char\""]
  530 -> 28 [style=solid label="\"char8_t\""]
  530 -> 29 [style=solid label="\"char16_t\""]
  530 -> 30 [style=solid label="\"char32_t\""]
  530 -> 31 [style=solid label="\"wchar_t\""]
  530 -> 32 [style=solid label="\"bool\""]
  530 -> 33 [style=solid label="\"short\""]
  530 -> 34 [style=solid label="\"int\""]
  530 -> 35 [style=solid label="\"long\""]
  530 -> 36 [style=solid label="\"signed\""]
  530 -> 37 [style=solid label="\"unsigned\""]
  530 -> 38 [style=solid label="\"float\""]
  530 -> 39 [style=solid label="\"double\""]
  530 -> 40 [style=solid label="\"void\""]
  530 -> 118 [style=solid label="STRING_LITERAL"]
  530 -> 262 [style=solid label="\"sizeof\""]
  530 -> 263 [style=solid label="\"alignof\""]
  530 -> 265 [style=dashed label="SCOPE-opt"]
  530 -> 266 [style=dashed label="additive-expression"]
  530 -> 269 [style=dashed label="await-expression"]
  530 -> 270 [style=dashed label="cast-expression"]
  530 -> 55 [style=dashed label="class-name"]
  530 -> 273 [style=dashed label="conversion-function-id"]
  530 -> 63 [style=dashed label="decltype-specifier"]
  530 -> 274 [style=dashed label="delete-expression"]
  530 -> 71 [style=dashed label="enum-name"]
  530 -> 278 [style=dashed label="fold-expression"]
  530 -> 279 [style=dashed label="id-expression"]
  530 -> 281 [style=dashed label="lambda-expression"]
  530 -> 282 [style=dashed label="lambda-introducer"]
  530 -> 283 [style=dashed label="literal-operator-id"]
  530 -> 286 [style=dashed label="multiplicative-expression"]
  530 -> 85 [style=dashed label="namespace-alias"]
  530 -> 88 [style=dashed label="namespace-name"]
  530 -> 287 [style=dashed label="nested-name-specifier"]
  530 -> 90 [style=dashed label="nested-name-specifier-opt"]
  530 -> 288 [style=dashed label="new-expression"]
  530 -> 289 [style=dashed label="noexcept-expression"]
  530 -> 290 [style=dashed label="operator-function-id"]
  530 -> 94 [style=dashed label="placeholder-type-specifier"]
  530 -> 291 [style=dashed label="pm-expression"]
  530 -> 292 [style=dashed label="postfix-expression"]
  530 -> 293 [style=dashed label="primary-expression"]
  530 -> 294 [style=dashed label="qualified-id"]
  530 -> 296 [style=dashed label="requires-expression"]
  530 -> 783 [style=dashed label="shift-expression"]
  530 -> 298 [style=dashed label="simple-template-id"]
  530 -> 299 [style=dashed label="simple-type-specifier"]
  530 -> 300 [style=dashed label="string-literal"]
  530 -> 301 [style=dashed label="template-id"]
  530 -> 102 [style=dashed label="template-name"]
  530 -> 104 [style=dashed label="type-constraint"]
  530 -> 105 [style=dashed label="type-constraint-opt"]
  530 -> 106 [style=dashed label="type-name"]
  530 -> 108 [style=dashed label="typedef-name"]
  530 -> 303 [style=dashed label="typename-specifier"]
  530 -> 304 [style=dashed label="unary-expression"]
  530 -> 305 [style=dashed label="unary-operator"]
  530 -> 306 [style=dashed label="unqualified-id"]
  530 -> "530R19" [style=solid]
 "530R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  530 -> "530R458d" [label="[IDENTIFIER]", style=solid]
 "530R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  530 -> "530R710d" [label="[\"decltype\"]", style=solid]
 "530R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  530 -> "530R710" [label="[\"auto\"]", style=solid]
 "530R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  531 [label="State 531\n\l257 equality-expression: equality-expression \"==\" • relational-expression\l"]
  531 -> 238 [style=solid label="IDENTIFIER"]
  531 -> 239 [style=solid label="\"noexcept\""]
  531 -> 240 [style=solid label="\"!\""]
  531 -> 241 [style=solid label="\"::\""]
  531 -> 242 [style=solid label="\"this\""]
  531 -> 8 [style=solid label="\"typename\""]
  531 -> 243 [style=solid label="\"+\""]
  531 -> 244 [style=solid label="\"-\""]
  531 -> 245 [style=solid label="\"(\""]
  531 -> 246 [style=solid label="\"&\""]
  531 -> 247 [style=solid label="\"[\""]
  531 -> 248 [style=solid label="\"co_await\""]
  531 -> 249 [style=solid label="\"operator\""]
  531 -> 21 [style=solid label="\"decltype\""]
  531 -> 250 [style=solid label="\"*\""]
  531 -> 251 [style=solid label="\"requires\""]
  531 -> 252 [style=solid label="\"~\""]
  531 -> 253 [style=solid label="\"++\""]
  531 -> 254 [style=solid label="\"--\""]
  531 -> 255 [style=solid label="\"dynamic_cast\""]
  531 -> 256 [style=solid label="\"static_cast\""]
  531 -> 257 [style=solid label="\"reinterpret_cast\""]
  531 -> 258 [style=solid label="\"const_cast\""]
  531 -> 259 [style=solid label="\"typeid\""]
  531 -> 260 [style=solid label="\"literal\""]
  531 -> 27 [style=solid label="\"char\""]
  531 -> 28 [style=solid label="\"char8_t\""]
  531 -> 29 [style=solid label="\"char16_t\""]
  531 -> 30 [style=solid label="\"char32_t\""]
  531 -> 31 [style=solid label="\"wchar_t\""]
  531 -> 32 [style=solid label="\"bool\""]
  531 -> 33 [style=solid label="\"short\""]
  531 -> 34 [style=solid label="\"int\""]
  531 -> 35 [style=solid label="\"long\""]
  531 -> 36 [style=solid label="\"signed\""]
  531 -> 37 [style=solid label="\"unsigned\""]
  531 -> 38 [style=solid label="\"float\""]
  531 -> 39 [style=solid label="\"double\""]
  531 -> 40 [style=solid label="\"void\""]
  531 -> 118 [style=solid label="STRING_LITERAL"]
  531 -> 262 [style=solid label="\"sizeof\""]
  531 -> 263 [style=solid label="\"alignof\""]
  531 -> 265 [style=dashed label="SCOPE-opt"]
  531 -> 266 [style=dashed label="additive-expression"]
  531 -> 269 [style=dashed label="await-expression"]
  531 -> 270 [style=dashed label="cast-expression"]
  531 -> 55 [style=dashed label="class-name"]
  531 -> 271 [style=dashed label="compare-expression"]
  531 -> 273 [style=dashed label="conversion-function-id"]
  531 -> 63 [style=dashed label="decltype-specifier"]
  531 -> 274 [style=dashed label="delete-expression"]
  531 -> 71 [style=dashed label="enum-name"]
  531 -> 278 [style=dashed label="fold-expression"]
  531 -> 279 [style=dashed label="id-expression"]
  531 -> 281 [style=dashed label="lambda-expression"]
  531 -> 282 [style=dashed label="lambda-introducer"]
  531 -> 283 [style=dashed label="literal-operator-id"]
  531 -> 286 [style=dashed label="multiplicative-expression"]
  531 -> 85 [style=dashed label="namespace-alias"]
  531 -> 88 [style=dashed label="namespace-name"]
  531 -> 287 [style=dashed label="nested-name-specifier"]
  531 -> 90 [style=dashed label="nested-name-specifier-opt"]
  531 -> 288 [style=dashed label="new-expression"]
  531 -> 289 [style=dashed label="noexcept-expression"]
  531 -> 290 [style=dashed label="operator-function-id"]
  531 -> 94 [style=dashed label="placeholder-type-specifier"]
  531 -> 291 [style=dashed label="pm-expression"]
  531 -> 292 [style=dashed label="postfix-expression"]
  531 -> 293 [style=dashed label="primary-expression"]
  531 -> 294 [style=dashed label="qualified-id"]
  531 -> 784 [style=dashed label="relational-expression"]
  531 -> 296 [style=dashed label="requires-expression"]
  531 -> 297 [style=dashed label="shift-expression"]
  531 -> 298 [style=dashed label="simple-template-id"]
  531 -> 299 [style=dashed label="simple-type-specifier"]
  531 -> 300 [style=dashed label="string-literal"]
  531 -> 301 [style=dashed label="template-id"]
  531 -> 102 [style=dashed label="template-name"]
  531 -> 104 [style=dashed label="type-constraint"]
  531 -> 105 [style=dashed label="type-constraint-opt"]
  531 -> 106 [style=dashed label="type-name"]
  531 -> 108 [style=dashed label="typedef-name"]
  531 -> 303 [style=dashed label="typename-specifier"]
  531 -> 304 [style=dashed label="unary-expression"]
  531 -> 305 [style=dashed label="unary-operator"]
  531 -> 306 [style=dashed label="unqualified-id"]
  531 -> "531R19" [style=solid]
 "531R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  531 -> "531R458d" [label="[IDENTIFIER]", style=solid]
 "531R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  531 -> "531R710d" [label="[\"decltype\"]", style=solid]
 "531R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  531 -> "531R710" [label="[\"auto\"]", style=solid]
 "531R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  532 [label="State 532\n\l258 equality-expression: equality-expression \"!=\" • relational-expression\l"]
  532 -> 238 [style=solid label="IDENTIFIER"]
  532 -> 239 [style=solid label="\"noexcept\""]
  532 -> 240 [style=solid label="\"!\""]
  532 -> 241 [style=solid label="\"::\""]
  532 -> 242 [style=solid label="\"this\""]
  532 -> 8 [style=solid label="\"typename\""]
  532 -> 243 [style=solid label="\"+\""]
  532 -> 244 [style=solid label="\"-\""]
  532 -> 245 [style=solid label="\"(\""]
  532 -> 246 [style=solid label="\"&\""]
  532 -> 247 [style=solid label="\"[\""]
  532 -> 248 [style=solid label="\"co_await\""]
  532 -> 249 [style=solid label="\"operator\""]
  532 -> 21 [style=solid label="\"decltype\""]
  532 -> 250 [style=solid label="\"*\""]
  532 -> 251 [style=solid label="\"requires\""]
  532 -> 252 [style=solid label="\"~\""]
  532 -> 253 [style=solid label="\"++\""]
  532 -> 254 [style=solid label="\"--\""]
  532 -> 255 [style=solid label="\"dynamic_cast\""]
  532 -> 256 [style=solid label="\"static_cast\""]
  532 -> 257 [style=solid label="\"reinterpret_cast\""]
  532 -> 258 [style=solid label="\"const_cast\""]
  532 -> 259 [style=solid label="\"typeid\""]
  532 -> 260 [style=solid label="\"literal\""]
  532 -> 27 [style=solid label="\"char\""]
  532 -> 28 [style=solid label="\"char8_t\""]
  532 -> 29 [style=solid label="\"char16_t\""]
  532 -> 30 [style=solid label="\"char32_t\""]
  532 -> 31 [style=solid label="\"wchar_t\""]
  532 -> 32 [style=solid label="\"bool\""]
  532 -> 33 [style=solid label="\"short\""]
  532 -> 34 [style=solid label="\"int\""]
  532 -> 35 [style=solid label="\"long\""]
  532 -> 36 [style=solid label="\"signed\""]
  532 -> 37 [style=solid label="\"unsigned\""]
  532 -> 38 [style=solid label="\"float\""]
  532 -> 39 [style=solid label="\"double\""]
  532 -> 40 [style=solid label="\"void\""]
  532 -> 118 [style=solid label="STRING_LITERAL"]
  532 -> 262 [style=solid label="\"sizeof\""]
  532 -> 263 [style=solid label="\"alignof\""]
  532 -> 265 [style=dashed label="SCOPE-opt"]
  532 -> 266 [style=dashed label="additive-expression"]
  532 -> 269 [style=dashed label="await-expression"]
  532 -> 270 [style=dashed label="cast-expression"]
  532 -> 55 [style=dashed label="class-name"]
  532 -> 271 [style=dashed label="compare-expression"]
  532 -> 273 [style=dashed label="conversion-function-id"]
  532 -> 63 [style=dashed label="decltype-specifier"]
  532 -> 274 [style=dashed label="delete-expression"]
  532 -> 71 [style=dashed label="enum-name"]
  532 -> 278 [style=dashed label="fold-expression"]
  532 -> 279 [style=dashed label="id-expression"]
  532 -> 281 [style=dashed label="lambda-expression"]
  532 -> 282 [style=dashed label="lambda-introducer"]
  532 -> 283 [style=dashed label="literal-operator-id"]
  532 -> 286 [style=dashed label="multiplicative-expression"]
  532 -> 85 [style=dashed label="namespace-alias"]
  532 -> 88 [style=dashed label="namespace-name"]
  532 -> 287 [style=dashed label="nested-name-specifier"]
  532 -> 90 [style=dashed label="nested-name-specifier-opt"]
  532 -> 288 [style=dashed label="new-expression"]
  532 -> 289 [style=dashed label="noexcept-expression"]
  532 -> 290 [style=dashed label="operator-function-id"]
  532 -> 94 [style=dashed label="placeholder-type-specifier"]
  532 -> 291 [style=dashed label="pm-expression"]
  532 -> 292 [style=dashed label="postfix-expression"]
  532 -> 293 [style=dashed label="primary-expression"]
  532 -> 294 [style=dashed label="qualified-id"]
  532 -> 785 [style=dashed label="relational-expression"]
  532 -> 296 [style=dashed label="requires-expression"]
  532 -> 297 [style=dashed label="shift-expression"]
  532 -> 298 [style=dashed label="simple-template-id"]
  532 -> 299 [style=dashed label="simple-type-specifier"]
  532 -> 300 [style=dashed label="string-literal"]
  532 -> 301 [style=dashed label="template-id"]
  532 -> 102 [style=dashed label="template-name"]
  532 -> 104 [style=dashed label="type-constraint"]
  532 -> 105 [style=dashed label="type-constraint-opt"]
  532 -> 106 [style=dashed label="type-name"]
  532 -> 108 [style=dashed label="typedef-name"]
  532 -> 303 [style=dashed label="typename-specifier"]
  532 -> 304 [style=dashed label="unary-expression"]
  532 -> 305 [style=dashed label="unary-operator"]
  532 -> 306 [style=dashed label="unqualified-id"]
  532 -> "532R19" [style=solid]
 "532R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  532 -> "532R458d" [label="[IDENTIFIER]", style=solid]
 "532R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  532 -> "532R710d" [label="[\"decltype\"]", style=solid]
 "532R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  532 -> "532R710" [label="[\"auto\"]", style=solid]
 "532R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  533 [label="State 533\n\l263 exclusive-or-expression: exclusive-or-expression \"^\" • and-expression\l"]
  533 -> 238 [style=solid label="IDENTIFIER"]
  533 -> 239 [style=solid label="\"noexcept\""]
  533 -> 240 [style=solid label="\"!\""]
  533 -> 241 [style=solid label="\"::\""]
  533 -> 242 [style=solid label="\"this\""]
  533 -> 8 [style=solid label="\"typename\""]
  533 -> 243 [style=solid label="\"+\""]
  533 -> 244 [style=solid label="\"-\""]
  533 -> 245 [style=solid label="\"(\""]
  533 -> 246 [style=solid label="\"&\""]
  533 -> 247 [style=solid label="\"[\""]
  533 -> 248 [style=solid label="\"co_await\""]
  533 -> 249 [style=solid label="\"operator\""]
  533 -> 21 [style=solid label="\"decltype\""]
  533 -> 250 [style=solid label="\"*\""]
  533 -> 251 [style=solid label="\"requires\""]
  533 -> 252 [style=solid label="\"~\""]
  533 -> 253 [style=solid label="\"++\""]
  533 -> 254 [style=solid label="\"--\""]
  533 -> 255 [style=solid label="\"dynamic_cast\""]
  533 -> 256 [style=solid label="\"static_cast\""]
  533 -> 257 [style=solid label="\"reinterpret_cast\""]
  533 -> 258 [style=solid label="\"const_cast\""]
  533 -> 259 [style=solid label="\"typeid\""]
  533 -> 260 [style=solid label="\"literal\""]
  533 -> 27 [style=solid label="\"char\""]
  533 -> 28 [style=solid label="\"char8_t\""]
  533 -> 29 [style=solid label="\"char16_t\""]
  533 -> 30 [style=solid label="\"char32_t\""]
  533 -> 31 [style=solid label="\"wchar_t\""]
  533 -> 32 [style=solid label="\"bool\""]
  533 -> 33 [style=solid label="\"short\""]
  533 -> 34 [style=solid label="\"int\""]
  533 -> 35 [style=solid label="\"long\""]
  533 -> 36 [style=solid label="\"signed\""]
  533 -> 37 [style=solid label="\"unsigned\""]
  533 -> 38 [style=solid label="\"float\""]
  533 -> 39 [style=solid label="\"double\""]
  533 -> 40 [style=solid label="\"void\""]
  533 -> 118 [style=solid label="STRING_LITERAL"]
  533 -> 262 [style=solid label="\"sizeof\""]
  533 -> 263 [style=solid label="\"alignof\""]
  533 -> 265 [style=dashed label="SCOPE-opt"]
  533 -> 266 [style=dashed label="additive-expression"]
  533 -> 786 [style=dashed label="and-expression"]
  533 -> 269 [style=dashed label="await-expression"]
  533 -> 270 [style=dashed label="cast-expression"]
  533 -> 55 [style=dashed label="class-name"]
  533 -> 271 [style=dashed label="compare-expression"]
  533 -> 273 [style=dashed label="conversion-function-id"]
  533 -> 63 [style=dashed label="decltype-specifier"]
  533 -> 274 [style=dashed label="delete-expression"]
  533 -> 71 [style=dashed label="enum-name"]
  533 -> 275 [style=dashed label="equality-expression"]
  533 -> 278 [style=dashed label="fold-expression"]
  533 -> 279 [style=dashed label="id-expression"]
  533 -> 281 [style=dashed label="lambda-expression"]
  533 -> 282 [style=dashed label="lambda-introducer"]
  533 -> 283 [style=dashed label="literal-operator-id"]
  533 -> 286 [style=dashed label="multiplicative-expression"]
  533 -> 85 [style=dashed label="namespace-alias"]
  533 -> 88 [style=dashed label="namespace-name"]
  533 -> 287 [style=dashed label="nested-name-specifier"]
  533 -> 90 [style=dashed label="nested-name-specifier-opt"]
  533 -> 288 [style=dashed label="new-expression"]
  533 -> 289 [style=dashed label="noexcept-expression"]
  533 -> 290 [style=dashed label="operator-function-id"]
  533 -> 94 [style=dashed label="placeholder-type-specifier"]
  533 -> 291 [style=dashed label="pm-expression"]
  533 -> 292 [style=dashed label="postfix-expression"]
  533 -> 293 [style=dashed label="primary-expression"]
  533 -> 294 [style=dashed label="qualified-id"]
  533 -> 295 [style=dashed label="relational-expression"]
  533 -> 296 [style=dashed label="requires-expression"]
  533 -> 297 [style=dashed label="shift-expression"]
  533 -> 298 [style=dashed label="simple-template-id"]
  533 -> 299 [style=dashed label="simple-type-specifier"]
  533 -> 300 [style=dashed label="string-literal"]
  533 -> 301 [style=dashed label="template-id"]
  533 -> 102 [style=dashed label="template-name"]
  533 -> 104 [style=dashed label="type-constraint"]
  533 -> 105 [style=dashed label="type-constraint-opt"]
  533 -> 106 [style=dashed label="type-name"]
  533 -> 108 [style=dashed label="typedef-name"]
  533 -> 303 [style=dashed label="typename-specifier"]
  533 -> 304 [style=dashed label="unary-expression"]
  533 -> 305 [style=dashed label="unary-operator"]
  533 -> 306 [style=dashed label="unqualified-id"]
  533 -> "533R19" [style=solid]
 "533R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  533 -> "533R458d" [label="[IDENTIFIER]", style=solid]
 "533R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  533 -> "533R710d" [label="[\"decltype\"]", style=solid]
 "533R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  533 -> "533R710" [label="[\"auto\"]", style=solid]
 "533R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  534 [label="State 534\n\l278 expression: expression \",\" • assignment-expression\l"]
  534 -> 238 [style=solid label="IDENTIFIER"]
  534 -> 239 [style=solid label="\"noexcept\""]
  534 -> 240 [style=solid label="\"!\""]
  534 -> 241 [style=solid label="\"::\""]
  534 -> 242 [style=solid label="\"this\""]
  534 -> 8 [style=solid label="\"typename\""]
  534 -> 243 [style=solid label="\"+\""]
  534 -> 244 [style=solid label="\"-\""]
  534 -> 245 [style=solid label="\"(\""]
  534 -> 246 [style=solid label="\"&\""]
  534 -> 247 [style=solid label="\"[\""]
  534 -> 248 [style=solid label="\"co_await\""]
  534 -> 249 [style=solid label="\"operator\""]
  534 -> 21 [style=solid label="\"decltype\""]
  534 -> 250 [style=solid label="\"*\""]
  534 -> 251 [style=solid label="\"requires\""]
  534 -> 252 [style=solid label="\"~\""]
  534 -> 253 [style=solid label="\"++\""]
  534 -> 254 [style=solid label="\"--\""]
  534 -> 255 [style=solid label="\"dynamic_cast\""]
  534 -> 256 [style=solid label="\"static_cast\""]
  534 -> 257 [style=solid label="\"reinterpret_cast\""]
  534 -> 258 [style=solid label="\"const_cast\""]
  534 -> 259 [style=solid label="\"typeid\""]
  534 -> 260 [style=solid label="\"literal\""]
  534 -> 27 [style=solid label="\"char\""]
  534 -> 28 [style=solid label="\"char8_t\""]
  534 -> 29 [style=solid label="\"char16_t\""]
  534 -> 30 [style=solid label="\"char32_t\""]
  534 -> 31 [style=solid label="\"wchar_t\""]
  534 -> 32 [style=solid label="\"bool\""]
  534 -> 33 [style=solid label="\"short\""]
  534 -> 34 [style=solid label="\"int\""]
  534 -> 35 [style=solid label="\"long\""]
  534 -> 36 [style=solid label="\"signed\""]
  534 -> 37 [style=solid label="\"unsigned\""]
  534 -> 38 [style=solid label="\"float\""]
  534 -> 39 [style=solid label="\"double\""]
  534 -> 40 [style=solid label="\"void\""]
  534 -> 118 [style=solid label="STRING_LITERAL"]
  534 -> 261 [style=solid label="\"throw\""]
  534 -> 262 [style=solid label="\"sizeof\""]
  534 -> 263 [style=solid label="\"alignof\""]
  534 -> 264 [style=solid label="\"co_yield\""]
  534 -> 265 [style=dashed label="SCOPE-opt"]
  534 -> 266 [style=dashed label="additive-expression"]
  534 -> 267 [style=dashed label="and-expression"]
  534 -> 787 [style=dashed label="assignment-expression"]
  534 -> 269 [style=dashed label="await-expression"]
  534 -> 270 [style=dashed label="cast-expression"]
  534 -> 55 [style=dashed label="class-name"]
  534 -> 271 [style=dashed label="compare-expression"]
  534 -> 272 [style=dashed label="conditional-expression"]
  534 -> 273 [style=dashed label="conversion-function-id"]
  534 -> 63 [style=dashed label="decltype-specifier"]
  534 -> 274 [style=dashed label="delete-expression"]
  534 -> 71 [style=dashed label="enum-name"]
  534 -> 275 [style=dashed label="equality-expression"]
  534 -> 276 [style=dashed label="exclusive-or-expression"]
  534 -> 278 [style=dashed label="fold-expression"]
  534 -> 279 [style=dashed label="id-expression"]
  534 -> 280 [style=dashed label="inclusive-or-expression"]
  534 -> 281 [style=dashed label="lambda-expression"]
  534 -> 282 [style=dashed label="lambda-introducer"]
  534 -> 283 [style=dashed label="literal-operator-id"]
  534 -> 284 [style=dashed label="logical-and-expression"]
  534 -> 285 [style=dashed label="logical-or-expression"]
  534 -> 286 [style=dashed label="multiplicative-expression"]
  534 -> 85 [style=dashed label="namespace-alias"]
  534 -> 88 [style=dashed label="namespace-name"]
  534 -> 287 [style=dashed label="nested-name-specifier"]
  534 -> 90 [style=dashed label="nested-name-specifier-opt"]
  534 -> 288 [style=dashed label="new-expression"]
  534 -> 289 [style=dashed label="noexcept-expression"]
  534 -> 290 [style=dashed label="operator-function-id"]
  534 -> 94 [style=dashed label="placeholder-type-specifier"]
  534 -> 291 [style=dashed label="pm-expression"]
  534 -> 292 [style=dashed label="postfix-expression"]
  534 -> 293 [style=dashed label="primary-expression"]
  534 -> 294 [style=dashed label="qualified-id"]
  534 -> 295 [style=dashed label="relational-expression"]
  534 -> 296 [style=dashed label="requires-expression"]
  534 -> 297 [style=dashed label="shift-expression"]
  534 -> 298 [style=dashed label="simple-template-id"]
  534 -> 299 [style=dashed label="simple-type-specifier"]
  534 -> 300 [style=dashed label="string-literal"]
  534 -> 301 [style=dashed label="template-id"]
  534 -> 102 [style=dashed label="template-name"]
  534 -> 302 [style=dashed label="throw-expression"]
  534 -> 104 [style=dashed label="type-constraint"]
  534 -> 105 [style=dashed label="type-constraint-opt"]
  534 -> 106 [style=dashed label="type-name"]
  534 -> 108 [style=dashed label="typedef-name"]
  534 -> 303 [style=dashed label="typename-specifier"]
  534 -> 304 [style=dashed label="unary-expression"]
  534 -> 305 [style=dashed label="unary-operator"]
  534 -> 306 [style=dashed label="unqualified-id"]
  534 -> 307 [style=dashed label="yield-expression"]
  534 -> "534R19" [style=solid]
 "534R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  534 -> "534R458d" [label="[IDENTIFIER]", style=solid]
 "534R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  534 -> "534R710d" [label="[\"decltype\"]", style=solid]
 "534R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  534 -> "534R710" [label="[\"auto\"]", style=solid]
 "534R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  535 [label="State 535\n\l214 decltype-specifier: \"decltype\" \"(\" expression \")\" •\l"]
  535 -> "535R214" [style=solid]
 "535R214" [label="R214", fillcolor=3, shape=diamond, style=filled]
  536 [label="State 536\n\l345 inclusive-or-expression: inclusive-or-expression \"|\" • exclusive-or-expression\l"]
  536 -> 238 [style=solid label="IDENTIFIER"]
  536 -> 239 [style=solid label="\"noexcept\""]
  536 -> 240 [style=solid label="\"!\""]
  536 -> 241 [style=solid label="\"::\""]
  536 -> 242 [style=solid label="\"this\""]
  536 -> 8 [style=solid label="\"typename\""]
  536 -> 243 [style=solid label="\"+\""]
  536 -> 244 [style=solid label="\"-\""]
  536 -> 245 [style=solid label="\"(\""]
  536 -> 246 [style=solid label="\"&\""]
  536 -> 247 [style=solid label="\"[\""]
  536 -> 248 [style=solid label="\"co_await\""]
  536 -> 249 [style=solid label="\"operator\""]
  536 -> 21 [style=solid label="\"decltype\""]
  536 -> 250 [style=solid label="\"*\""]
  536 -> 251 [style=solid label="\"requires\""]
  536 -> 252 [style=solid label="\"~\""]
  536 -> 253 [style=solid label="\"++\""]
  536 -> 254 [style=solid label="\"--\""]
  536 -> 255 [style=solid label="\"dynamic_cast\""]
  536 -> 256 [style=solid label="\"static_cast\""]
  536 -> 257 [style=solid label="\"reinterpret_cast\""]
  536 -> 258 [style=solid label="\"const_cast\""]
  536 -> 259 [style=solid label="\"typeid\""]
  536 -> 260 [style=solid label="\"literal\""]
  536 -> 27 [style=solid label="\"char\""]
  536 -> 28 [style=solid label="\"char8_t\""]
  536 -> 29 [style=solid label="\"char16_t\""]
  536 -> 30 [style=solid label="\"char32_t\""]
  536 -> 31 [style=solid label="\"wchar_t\""]
  536 -> 32 [style=solid label="\"bool\""]
  536 -> 33 [style=solid label="\"short\""]
  536 -> 34 [style=solid label="\"int\""]
  536 -> 35 [style=solid label="\"long\""]
  536 -> 36 [style=solid label="\"signed\""]
  536 -> 37 [style=solid label="\"unsigned\""]
  536 -> 38 [style=solid label="\"float\""]
  536 -> 39 [style=solid label="\"double\""]
  536 -> 40 [style=solid label="\"void\""]
  536 -> 118 [style=solid label="STRING_LITERAL"]
  536 -> 262 [style=solid label="\"sizeof\""]
  536 -> 263 [style=solid label="\"alignof\""]
  536 -> 265 [style=dashed label="SCOPE-opt"]
  536 -> 266 [style=dashed label="additive-expression"]
  536 -> 267 [style=dashed label="and-expression"]
  536 -> 269 [style=dashed label="await-expression"]
  536 -> 270 [style=dashed label="cast-expression"]
  536 -> 55 [style=dashed label="class-name"]
  536 -> 271 [style=dashed label="compare-expression"]
  536 -> 273 [style=dashed label="conversion-function-id"]
  536 -> 63 [style=dashed label="decltype-specifier"]
  536 -> 274 [style=dashed label="delete-expression"]
  536 -> 71 [style=dashed label="enum-name"]
  536 -> 275 [style=dashed label="equality-expression"]
  536 -> 788 [style=dashed label="exclusive-or-expression"]
  536 -> 278 [style=dashed label="fold-expression"]
  536 -> 279 [style=dashed label="id-expression"]
  536 -> 281 [style=dashed label="lambda-expression"]
  536 -> 282 [style=dashed label="lambda-introducer"]
  536 -> 283 [style=dashed label="literal-operator-id"]
  536 -> 286 [style=dashed label="multiplicative-expression"]
  536 -> 85 [style=dashed label="namespace-alias"]
  536 -> 88 [style=dashed label="namespace-name"]
  536 -> 287 [style=dashed label="nested-name-specifier"]
  536 -> 90 [style=dashed label="nested-name-specifier-opt"]
  536 -> 288 [style=dashed label="new-expression"]
  536 -> 289 [style=dashed label="noexcept-expression"]
  536 -> 290 [style=dashed label="operator-function-id"]
  536 -> 94 [style=dashed label="placeholder-type-specifier"]
  536 -> 291 [style=dashed label="pm-expression"]
  536 -> 292 [style=dashed label="postfix-expression"]
  536 -> 293 [style=dashed label="primary-expression"]
  536 -> 294 [style=dashed label="qualified-id"]
  536 -> 295 [style=dashed label="relational-expression"]
  536 -> 296 [style=dashed label="requires-expression"]
  536 -> 297 [style=dashed label="shift-expression"]
  536 -> 298 [style=dashed label="simple-template-id"]
  536 -> 299 [style=dashed label="simple-type-specifier"]
  536 -> 300 [style=dashed label="string-literal"]
  536 -> 301 [style=dashed label="template-id"]
  536 -> 102 [style=dashed label="template-name"]
  536 -> 104 [style=dashed label="type-constraint"]
  536 -> 105 [style=dashed label="type-constraint-opt"]
  536 -> 106 [style=dashed label="type-name"]
  536 -> 108 [style=dashed label="typedef-name"]
  536 -> 303 [style=dashed label="typename-specifier"]
  536 -> 304 [style=dashed label="unary-expression"]
  536 -> 305 [style=dashed label="unary-operator"]
  536 -> 306 [style=dashed label="unqualified-id"]
  536 -> "536R19" [style=solid]
 "536R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  536 -> "536R458d" [label="[IDENTIFIER]", style=solid]
 "536R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  536 -> "536R710d" [label="[\"decltype\"]", style=solid]
 "536R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  536 -> "536R710" [label="[\"auto\"]", style=solid]
 "536R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  537 [label="State 537\n\l385 lambda-declarator: \"(\" • parameter-declaration-clause \")\" lambda-specifiers requires-clause-opt\l"]
  537 -> 177 [style=dashed label="attribute-specifier-seq"]
  537 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  537 -> 619 [style=dashed label="parameter-declaration"]
  537 -> 789 [style=dashed label="parameter-declaration-clause"]
  537 -> 621 [style=dashed label="parameter-declaration-list"]
  537 -> 622 [style=dashed label="parameter-declaration-list-opt"]
  537 -> "537R83" [style=solid]
 "537R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  537 -> "537R551" [label="[\"...\", \")\"]", style=solid]
 "537R551" [label="R551", fillcolor=3, shape=diamond, style=filled]
  538 [label="State 538\n\l387 lambda-expression: lambda-introducer \"<\" • template-parameter-list \">\" requires-clause-opt lambda-declarator compound-statement\l"]
  538 -> 4 [style=solid label="IDENTIFIER"]
  538 -> 6 [style=solid label="\"::\""]
  538 -> 216 [style=solid label="\"template\""]
  538 -> 217 [style=solid label="\"typename\""]
  538 -> 218 [style=solid label="\"class\""]
  538 -> 21 [style=solid label="\"decltype\""]
  538 -> 177 [style=dashed label="attribute-specifier-seq"]
  538 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  538 -> 55 [style=dashed label="class-name"]
  538 -> 121 [style=dashed label="decltype-specifier"]
  538 -> 71 [style=dashed label="enum-name"]
  538 -> 85 [style=dashed label="namespace-alias"]
  538 -> 88 [style=dashed label="namespace-name"]
  538 -> 133 [style=dashed label="nested-name-specifier"]
  538 -> 221 [style=dashed label="nested-name-specifier-opt"]
  538 -> 222 [style=dashed label="parameter-declaration"]
  538 -> 96 [style=dashed label="simple-template-id"]
  538 -> 223 [style=dashed label="template-head"]
  538 -> 102 [style=dashed label="template-name"]
  538 -> 224 [style=dashed label="template-parameter"]
  538 -> 790 [style=dashed label="template-parameter-list"]
  538 -> 226 [style=dashed label="type-constraint"]
  538 -> 106 [style=dashed label="type-name"]
  538 -> 227 [style=dashed label="type-parameter"]
  538 -> 228 [style=dashed label="type-parameter-key"]
  538 -> 108 [style=dashed label="typedef-name"]
  538 -> "538R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"class\", \"decltype\"]", style=solid]
 "538R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  538 -> "538R83" [style=solid]
 "538R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  538 -> "538R458d" [label="[IDENTIFIER]", style=solid]
 "538R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  539 [label="State 539\n\l192 decl-specifier-seq-opt: decl-specifier-seq •\l"]
  539 -> "539R192" [style=solid]
 "539R192" [label="R192", fillcolor=3, shape=diamond, style=filled]
  540 [label="State 540\n\l389 lambda-specifiers: decl-specifier-seq-opt • noexcept-specifier-opt attribute-specifier-seq-opt trailing-return-type-opt\l"]
  540 -> 791 [style=solid label="\"noexcept\""]
  540 -> 792 [style=dashed label="noexcept-specifier"]
  540 -> 793 [style=dashed label="noexcept-specifier-opt"]
  540 -> "540R480" [style=solid]
 "540R480" [label="R480", fillcolor=3, shape=diamond, style=filled]
  541 [label="State 541\n\l386 lambda-expression: lambda-introducer lambda-declarator • compound-statement\l"]
  541 -> 794 [style=solid label="\"{\""]
  541 -> 795 [style=dashed label="compound-statement"]
  542 [label="State 542\n\l384 lambda-declarator: lambda-specifiers •\l"]
  542 -> "542R384" [style=solid]
 "542R384" [label="R384", fillcolor=3, shape=diamond, style=filled]
  543 [label="State 543\n\l695 template-id: literal-operator-id \"<\" • template-argument-list-opt \">\"\l"]
  543 -> 238 [style=solid label="IDENTIFIER"]
  543 -> 239 [style=solid label="\"noexcept\""]
  543 -> 240 [style=solid label="\"!\""]
  543 -> 241 [style=solid label="\"::\""]
  543 -> 242 [style=solid label="\"this\""]
  543 -> 8 [style=solid label="\"typename\""]
  543 -> 243 [style=solid label="\"+\""]
  543 -> 244 [style=solid label="\"-\""]
  543 -> 245 [style=solid label="\"(\""]
  543 -> 246 [style=solid label="\"&\""]
  543 -> 247 [style=solid label="\"[\""]
  543 -> 248 [style=solid label="\"co_await\""]
  543 -> 12 [style=solid label="\"class\""]
  543 -> 13 [style=solid label="\"struct\""]
  543 -> 14 [style=solid label="\"union\""]
  543 -> 249 [style=solid label="\"operator\""]
  543 -> 15 [style=solid label="\"const\""]
  543 -> 16 [style=solid label="\"volatile\""]
  543 -> 21 [style=solid label="\"decltype\""]
  543 -> 125 [style=solid label="\"enum\""]
  543 -> 250 [style=solid label="\"*\""]
  543 -> 251 [style=solid label="\"requires\""]
  543 -> 252 [style=solid label="\"~\""]
  543 -> 253 [style=solid label="\"++\""]
  543 -> 254 [style=solid label="\"--\""]
  543 -> 255 [style=solid label="\"dynamic_cast\""]
  543 -> 256 [style=solid label="\"static_cast\""]
  543 -> 257 [style=solid label="\"reinterpret_cast\""]
  543 -> 258 [style=solid label="\"const_cast\""]
  543 -> 259 [style=solid label="\"typeid\""]
  543 -> 260 [style=solid label="\"literal\""]
  543 -> 27 [style=solid label="\"char\""]
  543 -> 28 [style=solid label="\"char8_t\""]
  543 -> 29 [style=solid label="\"char16_t\""]
  543 -> 30 [style=solid label="\"char32_t\""]
  543 -> 31 [style=solid label="\"wchar_t\""]
  543 -> 32 [style=solid label="\"bool\""]
  543 -> 33 [style=solid label="\"short\""]
  543 -> 34 [style=solid label="\"int\""]
  543 -> 35 [style=solid label="\"long\""]
  543 -> 36 [style=solid label="\"signed\""]
  543 -> 37 [style=solid label="\"unsigned\""]
  543 -> 38 [style=solid label="\"float\""]
  543 -> 39 [style=solid label="\"double\""]
  543 -> 40 [style=solid label="\"void\""]
  543 -> 118 [style=solid label="STRING_LITERAL"]
  543 -> 262 [style=solid label="\"sizeof\""]
  543 -> 263 [style=solid label="\"alignof\""]
  543 -> 265 [style=dashed label="SCOPE-opt"]
  543 -> 266 [style=dashed label="additive-expression"]
  543 -> 267 [style=dashed label="and-expression"]
  543 -> 269 [style=dashed label="await-expression"]
  543 -> 270 [style=dashed label="cast-expression"]
  543 -> 406 [style=dashed label="class-key"]
  543 -> 55 [style=dashed label="class-name"]
  543 -> 271 [style=dashed label="compare-expression"]
  543 -> 309 [style=dashed label="conditional-expression"]
  543 -> 407 [style=dashed label="constant-expression"]
  543 -> 273 [style=dashed label="conversion-function-id"]
  543 -> 57 [style=dashed label="cv-qualifier"]
  543 -> 63 [style=dashed label="decltype-specifier"]
  543 -> 274 [style=dashed label="delete-expression"]
  543 -> 66 [style=dashed label="elaborated-enum-specifier"]
  543 -> 67 [style=dashed label="elaborated-type-specifier"]
  543 -> 71 [style=dashed label="enum-name"]
  543 -> 275 [style=dashed label="equality-expression"]
  543 -> 276 [style=dashed label="exclusive-or-expression"]
  543 -> 278 [style=dashed label="fold-expression"]
  543 -> 408 [style=dashed label="id-expression"]
  543 -> 280 [style=dashed label="inclusive-or-expression"]
  543 -> 281 [style=dashed label="lambda-expression"]
  543 -> 282 [style=dashed label="lambda-introducer"]
  543 -> 283 [style=dashed label="literal-operator-id"]
  543 -> 284 [style=dashed label="logical-and-expression"]
  543 -> 311 [style=dashed label="logical-or-expression"]
  543 -> 286 [style=dashed label="multiplicative-expression"]
  543 -> 85 [style=dashed label="namespace-alias"]
  543 -> 88 [style=dashed label="namespace-name"]
  543 -> 287 [style=dashed label="nested-name-specifier"]
  543 -> 90 [style=dashed label="nested-name-specifier-opt"]
  543 -> 288 [style=dashed label="new-expression"]
  543 -> 289 [style=dashed label="noexcept-expression"]
  543 -> 290 [style=dashed label="operator-function-id"]
  543 -> 94 [style=dashed label="placeholder-type-specifier"]
  543 -> 291 [style=dashed label="pm-expression"]
  543 -> 292 [style=dashed label="postfix-expression"]
  543 -> 293 [style=dashed label="primary-expression"]
  543 -> 294 [style=dashed label="qualified-id"]
  543 -> 295 [style=dashed label="relational-expression"]
  543 -> 296 [style=dashed label="requires-expression"]
  543 -> 297 [style=dashed label="shift-expression"]
  543 -> 298 [style=dashed label="simple-template-id"]
  543 -> 409 [style=dashed label="simple-type-specifier"]
  543 -> 300 [style=dashed label="string-literal"]
  543 -> 410 [style=dashed label="template-argument"]
  543 -> 411 [style=dashed label="template-argument-list"]
  543 -> 796 [style=dashed label="template-argument-list-opt"]
  543 -> 301 [style=dashed label="template-id"]
  543 -> 102 [style=dashed label="template-name"]
  543 -> 104 [style=dashed label="type-constraint"]
  543 -> 105 [style=dashed label="type-constraint-opt"]
  543 -> 413 [style=dashed label="type-id"]
  543 -> 106 [style=dashed label="type-name"]
  543 -> 414 [style=dashed label="type-specifier"]
  543 -> 415 [style=dashed label="type-specifier-seq"]
  543 -> 108 [style=dashed label="typedef-name"]
  543 -> 416 [style=dashed label="typename-specifier"]
  543 -> 304 [style=dashed label="unary-expression"]
  543 -> 305 [style=dashed label="unary-operator"]
  543 -> 306 [style=dashed label="unqualified-id"]
  543 -> "543R19" [style=solid]
 "543R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  543 -> "543R458d" [label="[IDENTIFIER]", style=solid]
 "543R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  543 -> "543R688" [label="[\">\"]", style=solid]
 "543R688" [label="R688", fillcolor=3, shape=diamond, style=filled]
  543 -> "543R710d" [label="[\"decltype\"]", style=solid]
 "543R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  543 -> "543R710" [label="[\"auto\"]", style=solid]
 "543R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  544 [label="State 544\n\l395 logical-and-expression: logical-and-expression \"&&\" • inclusive-or-expression\l"]
  544 -> 238 [style=solid label="IDENTIFIER"]
  544 -> 239 [style=solid label="\"noexcept\""]
  544 -> 240 [style=solid label="\"!\""]
  544 -> 241 [style=solid label="\"::\""]
  544 -> 242 [style=solid label="\"this\""]
  544 -> 8 [style=solid label="\"typename\""]
  544 -> 243 [style=solid label="\"+\""]
  544 -> 244 [style=solid label="\"-\""]
  544 -> 245 [style=solid label="\"(\""]
  544 -> 246 [style=solid label="\"&\""]
  544 -> 247 [style=solid label="\"[\""]
  544 -> 248 [style=solid label="\"co_await\""]
  544 -> 249 [style=solid label="\"operator\""]
  544 -> 21 [style=solid label="\"decltype\""]
  544 -> 250 [style=solid label="\"*\""]
  544 -> 251 [style=solid label="\"requires\""]
  544 -> 252 [style=solid label="\"~\""]
  544 -> 253 [style=solid label="\"++\""]
  544 -> 254 [style=solid label="\"--\""]
  544 -> 255 [style=solid label="\"dynamic_cast\""]
  544 -> 256 [style=solid label="\"static_cast\""]
  544 -> 257 [style=solid label="\"reinterpret_cast\""]
  544 -> 258 [style=solid label="\"const_cast\""]
  544 -> 259 [style=solid label="\"typeid\""]
  544 -> 260 [style=solid label="\"literal\""]
  544 -> 27 [style=solid label="\"char\""]
  544 -> 28 [style=solid label="\"char8_t\""]
  544 -> 29 [style=solid label="\"char16_t\""]
  544 -> 30 [style=solid label="\"char32_t\""]
  544 -> 31 [style=solid label="\"wchar_t\""]
  544 -> 32 [style=solid label="\"bool\""]
  544 -> 33 [style=solid label="\"short\""]
  544 -> 34 [style=solid label="\"int\""]
  544 -> 35 [style=solid label="\"long\""]
  544 -> 36 [style=solid label="\"signed\""]
  544 -> 37 [style=solid label="\"unsigned\""]
  544 -> 38 [style=solid label="\"float\""]
  544 -> 39 [style=solid label="\"double\""]
  544 -> 40 [style=solid label="\"void\""]
  544 -> 118 [style=solid label="STRING_LITERAL"]
  544 -> 262 [style=solid label="\"sizeof\""]
  544 -> 263 [style=solid label="\"alignof\""]
  544 -> 265 [style=dashed label="SCOPE-opt"]
  544 -> 266 [style=dashed label="additive-expression"]
  544 -> 267 [style=dashed label="and-expression"]
  544 -> 269 [style=dashed label="await-expression"]
  544 -> 270 [style=dashed label="cast-expression"]
  544 -> 55 [style=dashed label="class-name"]
  544 -> 271 [style=dashed label="compare-expression"]
  544 -> 273 [style=dashed label="conversion-function-id"]
  544 -> 63 [style=dashed label="decltype-specifier"]
  544 -> 274 [style=dashed label="delete-expression"]
  544 -> 71 [style=dashed label="enum-name"]
  544 -> 275 [style=dashed label="equality-expression"]
  544 -> 276 [style=dashed label="exclusive-or-expression"]
  544 -> 278 [style=dashed label="fold-expression"]
  544 -> 279 [style=dashed label="id-expression"]
  544 -> 797 [style=dashed label="inclusive-or-expression"]
  544 -> 281 [style=dashed label="lambda-expression"]
  544 -> 282 [style=dashed label="lambda-introducer"]
  544 -> 283 [style=dashed label="literal-operator-id"]
  544 -> 286 [style=dashed label="multiplicative-expression"]
  544 -> 85 [style=dashed label="namespace-alias"]
  544 -> 88 [style=dashed label="namespace-name"]
  544 -> 287 [style=dashed label="nested-name-specifier"]
  544 -> 90 [style=dashed label="nested-name-specifier-opt"]
  544 -> 288 [style=dashed label="new-expression"]
  544 -> 289 [style=dashed label="noexcept-expression"]
  544 -> 290 [style=dashed label="operator-function-id"]
  544 -> 94 [style=dashed label="placeholder-type-specifier"]
  544 -> 291 [style=dashed label="pm-expression"]
  544 -> 292 [style=dashed label="postfix-expression"]
  544 -> 293 [style=dashed label="primary-expression"]
  544 -> 294 [style=dashed label="qualified-id"]
  544 -> 295 [style=dashed label="relational-expression"]
  544 -> 296 [style=dashed label="requires-expression"]
  544 -> 297 [style=dashed label="shift-expression"]
  544 -> 298 [style=dashed label="simple-template-id"]
  544 -> 299 [style=dashed label="simple-type-specifier"]
  544 -> 300 [style=dashed label="string-literal"]
  544 -> 301 [style=dashed label="template-id"]
  544 -> 102 [style=dashed label="template-name"]
  544 -> 104 [style=dashed label="type-constraint"]
  544 -> 105 [style=dashed label="type-constraint-opt"]
  544 -> 106 [style=dashed label="type-name"]
  544 -> 108 [style=dashed label="typedef-name"]
  544 -> 303 [style=dashed label="typename-specifier"]
  544 -> 304 [style=dashed label="unary-expression"]
  544 -> 305 [style=dashed label="unary-operator"]
  544 -> 306 [style=dashed label="unqualified-id"]
  544 -> "544R19" [style=solid]
 "544R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  544 -> "544R458d" [label="[IDENTIFIER]", style=solid]
 "544R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  544 -> "544R710d" [label="[\"decltype\"]", style=solid]
 "544R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  544 -> "544R710" [label="[\"auto\"]", style=solid]
 "544R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  545 [label="State 545\n\l 56 assignment-operator: \"=\" •\l"]
  545 -> "545R56" [style=solid]
 "545R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  546 [label="State 546\n\l 57 assignment-operator: \"*=\" •\l"]
  546 -> "546R57" [style=solid]
 "546R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  547 [label="State 547\n\l 58 assignment-operator: \"/=\" •\l"]
  547 -> "547R58" [style=solid]
 "547R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  548 [label="State 548\n\l 59 assignment-operator: \"%=\" •\l"]
  548 -> "548R59" [style=solid]
 "548R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  549 [label="State 549\n\l 60 assignment-operator: \"+=\" •\l"]
  549 -> "549R60" [style=solid]
 "549R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  550 [label="State 550\n\l 61 assignment-operator: \"-=\" •\l"]
  550 -> "550R61" [style=solid]
 "550R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  551 [label="State 551\n\l 62 assignment-operator: \">>=\" •\l"]
  551 -> "551R62" [style=solid]
 "551R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  552 [label="State 552\n\l 63 assignment-operator: \"<<=\" •\l"]
  552 -> "552R63" [style=solid]
 "552R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  553 [label="State 553\n\l 64 assignment-operator: \"&=\" •\l"]
  553 -> "553R64" [style=solid]
 "553R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  554 [label="State 554\n\l 65 assignment-operator: \"^=\" •\l"]
  554 -> "554R65" [style=solid]
 "554R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
  555 [label="State 555\n\l 66 assignment-operator: \"|=\" •\l"]
  555 -> "555R66" [style=solid]
 "555R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
  556 [label="State 556\n\l157 conditional-expression: logical-or-expression \"?\" • expression \":\" assignment-expression\l"]
  556 -> 238 [style=solid label="IDENTIFIER"]
  556 -> 239 [style=solid label="\"noexcept\""]
  556 -> 240 [style=solid label="\"!\""]
  556 -> 241 [style=solid label="\"::\""]
  556 -> 242 [style=solid label="\"this\""]
  556 -> 8 [style=solid label="\"typename\""]
  556 -> 243 [style=solid label="\"+\""]
  556 -> 244 [style=solid label="\"-\""]
  556 -> 245 [style=solid label="\"(\""]
  556 -> 246 [style=solid label="\"&\""]
  556 -> 247 [style=solid label="\"[\""]
  556 -> 248 [style=solid label="\"co_await\""]
  556 -> 249 [style=solid label="\"operator\""]
  556 -> 21 [style=solid label="\"decltype\""]
  556 -> 250 [style=solid label="\"*\""]
  556 -> 251 [style=solid label="\"requires\""]
  556 -> 252 [style=solid label="\"~\""]
  556 -> 253 [style=solid label="\"++\""]
  556 -> 254 [style=solid label="\"--\""]
  556 -> 255 [style=solid label="\"dynamic_cast\""]
  556 -> 256 [style=solid label="\"static_cast\""]
  556 -> 257 [style=solid label="\"reinterpret_cast\""]
  556 -> 258 [style=solid label="\"const_cast\""]
  556 -> 259 [style=solid label="\"typeid\""]
  556 -> 260 [style=solid label="\"literal\""]
  556 -> 27 [style=solid label="\"char\""]
  556 -> 28 [style=solid label="\"char8_t\""]
  556 -> 29 [style=solid label="\"char16_t\""]
  556 -> 30 [style=solid label="\"char32_t\""]
  556 -> 31 [style=solid label="\"wchar_t\""]
  556 -> 32 [style=solid label="\"bool\""]
  556 -> 33 [style=solid label="\"short\""]
  556 -> 34 [style=solid label="\"int\""]
  556 -> 35 [style=solid label="\"long\""]
  556 -> 36 [style=solid label="\"signed\""]
  556 -> 37 [style=solid label="\"unsigned\""]
  556 -> 38 [style=solid label="\"float\""]
  556 -> 39 [style=solid label="\"double\""]
  556 -> 40 [style=solid label="\"void\""]
  556 -> 118 [style=solid label="STRING_LITERAL"]
  556 -> 261 [style=solid label="\"throw\""]
  556 -> 262 [style=solid label="\"sizeof\""]
  556 -> 263 [style=solid label="\"alignof\""]
  556 -> 264 [style=solid label="\"co_yield\""]
  556 -> 265 [style=dashed label="SCOPE-opt"]
  556 -> 266 [style=dashed label="additive-expression"]
  556 -> 267 [style=dashed label="and-expression"]
  556 -> 268 [style=dashed label="assignment-expression"]
  556 -> 269 [style=dashed label="await-expression"]
  556 -> 270 [style=dashed label="cast-expression"]
  556 -> 55 [style=dashed label="class-name"]
  556 -> 271 [style=dashed label="compare-expression"]
  556 -> 272 [style=dashed label="conditional-expression"]
  556 -> 273 [style=dashed label="conversion-function-id"]
  556 -> 63 [style=dashed label="decltype-specifier"]
  556 -> 274 [style=dashed label="delete-expression"]
  556 -> 71 [style=dashed label="enum-name"]
  556 -> 275 [style=dashed label="equality-expression"]
  556 -> 276 [style=dashed label="exclusive-or-expression"]
  556 -> 798 [style=dashed label="expression"]
  556 -> 278 [style=dashed label="fold-expression"]
  556 -> 279 [style=dashed label="id-expression"]
  556 -> 280 [style=dashed label="inclusive-or-expression"]
  556 -> 281 [style=dashed label="lambda-expression"]
  556 -> 282 [style=dashed label="lambda-introducer"]
  556 -> 283 [style=dashed label="literal-operator-id"]
  556 -> 284 [style=dashed label="logical-and-expression"]
  556 -> 285 [style=dashed label="logical-or-expression"]
  556 -> 286 [style=dashed label="multiplicative-expression"]
  556 -> 85 [style=dashed label="namespace-alias"]
  556 -> 88 [style=dashed label="namespace-name"]
  556 -> 287 [style=dashed label="nested-name-specifier"]
  556 -> 90 [style=dashed label="nested-name-specifier-opt"]
  556 -> 288 [style=dashed label="new-expression"]
  556 -> 289 [style=dashed label="noexcept-expression"]
  556 -> 290 [style=dashed label="operator-function-id"]
  556 -> 94 [style=dashed label="placeholder-type-specifier"]
  556 -> 291 [style=dashed label="pm-expression"]
  556 -> 292 [style=dashed label="postfix-expression"]
  556 -> 293 [style=dashed label="primary-expression"]
  556 -> 294 [style=dashed label="qualified-id"]
  556 -> 295 [style=dashed label="relational-expression"]
  556 -> 296 [style=dashed label="requires-expression"]
  556 -> 297 [style=dashed label="shift-expression"]
  556 -> 298 [style=dashed label="simple-template-id"]
  556 -> 299 [style=dashed label="simple-type-specifier"]
  556 -> 300 [style=dashed label="string-literal"]
  556 -> 301 [style=dashed label="template-id"]
  556 -> 102 [style=dashed label="template-name"]
  556 -> 302 [style=dashed label="throw-expression"]
  556 -> 104 [style=dashed label="type-constraint"]
  556 -> 105 [style=dashed label="type-constraint-opt"]
  556 -> 106 [style=dashed label="type-name"]
  556 -> 108 [style=dashed label="typedef-name"]
  556 -> 303 [style=dashed label="typename-specifier"]
  556 -> 304 [style=dashed label="unary-expression"]
  556 -> 305 [style=dashed label="unary-operator"]
  556 -> 306 [style=dashed label="unqualified-id"]
  556 -> 307 [style=dashed label="yield-expression"]
  556 -> "556R19" [style=solid]
 "556R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  556 -> "556R458d" [label="[IDENTIFIER]", style=solid]
 "556R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  556 -> "556R710d" [label="[\"decltype\"]", style=solid]
 "556R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  556 -> "556R710" [label="[\"auto\"]", style=solid]
 "556R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  557 [label="State 557\n\l397 logical-or-expression: logical-or-expression \"||\" • logical-and-expression\l"]
  557 -> 238 [style=solid label="IDENTIFIER"]
  557 -> 239 [style=solid label="\"noexcept\""]
  557 -> 240 [style=solid label="\"!\""]
  557 -> 241 [style=solid label="\"::\""]
  557 -> 242 [style=solid label="\"this\""]
  557 -> 8 [style=solid label="\"typename\""]
  557 -> 243 [style=solid label="\"+\""]
  557 -> 244 [style=solid label="\"-\""]
  557 -> 245 [style=solid label="\"(\""]
  557 -> 246 [style=solid label="\"&\""]
  557 -> 247 [style=solid label="\"[\""]
  557 -> 248 [style=solid label="\"co_await\""]
  557 -> 249 [style=solid label="\"operator\""]
  557 -> 21 [style=solid label="\"decltype\""]
  557 -> 250 [style=solid label="\"*\""]
  557 -> 251 [style=solid label="\"requires\""]
  557 -> 252 [style=solid label="\"~\""]
  557 -> 253 [style=solid label="\"++\""]
  557 -> 254 [style=solid label="\"--\""]
  557 -> 255 [style=solid label="\"dynamic_cast\""]
  557 -> 256 [style=solid label="\"static_cast\""]
  557 -> 257 [style=solid label="\"reinterpret_cast\""]
  557 -> 258 [style=solid label="\"const_cast\""]
  557 -> 259 [style=solid label="\"typeid\""]
  557 -> 260 [style=solid label="\"literal\""]
  557 -> 27 [style=solid label="\"char\""]
  557 -> 28 [style=solid label="\"char8_t\""]
  557 -> 29 [style=solid label="\"char16_t\""]
  557 -> 30 [style=solid label="\"char32_t\""]
  557 -> 31 [style=solid label="\"wchar_t\""]
  557 -> 32 [style=solid label="\"bool\""]
  557 -> 33 [style=solid label="\"short\""]
  557 -> 34 [style=solid label="\"int\""]
  557 -> 35 [style=solid label="\"long\""]
  557 -> 36 [style=solid label="\"signed\""]
  557 -> 37 [style=solid label="\"unsigned\""]
  557 -> 38 [style=solid label="\"float\""]
  557 -> 39 [style=solid label="\"double\""]
  557 -> 40 [style=solid label="\"void\""]
  557 -> 118 [style=solid label="STRING_LITERAL"]
  557 -> 262 [style=solid label="\"sizeof\""]
  557 -> 263 [style=solid label="\"alignof\""]
  557 -> 265 [style=dashed label="SCOPE-opt"]
  557 -> 266 [style=dashed label="additive-expression"]
  557 -> 267 [style=dashed label="and-expression"]
  557 -> 269 [style=dashed label="await-expression"]
  557 -> 270 [style=dashed label="cast-expression"]
  557 -> 55 [style=dashed label="class-name"]
  557 -> 271 [style=dashed label="compare-expression"]
  557 -> 273 [style=dashed label="conversion-function-id"]
  557 -> 63 [style=dashed label="decltype-specifier"]
  557 -> 274 [style=dashed label="delete-expression"]
  557 -> 71 [style=dashed label="enum-name"]
  557 -> 275 [style=dashed label="equality-expression"]
  557 -> 276 [style=dashed label="exclusive-or-expression"]
  557 -> 278 [style=dashed label="fold-expression"]
  557 -> 279 [style=dashed label="id-expression"]
  557 -> 280 [style=dashed label="inclusive-or-expression"]
  557 -> 281 [style=dashed label="lambda-expression"]
  557 -> 282 [style=dashed label="lambda-introducer"]
  557 -> 283 [style=dashed label="literal-operator-id"]
  557 -> 799 [style=dashed label="logical-and-expression"]
  557 -> 286 [style=dashed label="multiplicative-expression"]
  557 -> 85 [style=dashed label="namespace-alias"]
  557 -> 88 [style=dashed label="namespace-name"]
  557 -> 287 [style=dashed label="nested-name-specifier"]
  557 -> 90 [style=dashed label="nested-name-specifier-opt"]
  557 -> 288 [style=dashed label="new-expression"]
  557 -> 289 [style=dashed label="noexcept-expression"]
  557 -> 290 [style=dashed label="operator-function-id"]
  557 -> 94 [style=dashed label="placeholder-type-specifier"]
  557 -> 291 [style=dashed label="pm-expression"]
  557 -> 292 [style=dashed label="postfix-expression"]
  557 -> 293 [style=dashed label="primary-expression"]
  557 -> 294 [style=dashed label="qualified-id"]
  557 -> 295 [style=dashed label="relational-expression"]
  557 -> 296 [style=dashed label="requires-expression"]
  557 -> 297 [style=dashed label="shift-expression"]
  557 -> 298 [style=dashed label="simple-template-id"]
  557 -> 299 [style=dashed label="simple-type-specifier"]
  557 -> 300 [style=dashed label="string-literal"]
  557 -> 301 [style=dashed label="template-id"]
  557 -> 102 [style=dashed label="template-name"]
  557 -> 104 [style=dashed label="type-constraint"]
  557 -> 105 [style=dashed label="type-constraint-opt"]
  557 -> 106 [style=dashed label="type-name"]
  557 -> 108 [style=dashed label="typedef-name"]
  557 -> 303 [style=dashed label="typename-specifier"]
  557 -> 304 [style=dashed label="unary-expression"]
  557 -> 305 [style=dashed label="unary-operator"]
  557 -> 306 [style=dashed label="unqualified-id"]
  557 -> "557R19" [style=solid]
 "557R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  557 -> "557R458d" [label="[IDENTIFIER]", style=solid]
 "557R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  557 -> "557R710d" [label="[\"decltype\"]", style=solid]
 "557R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  557 -> "557R710" [label="[\"auto\"]", style=solid]
 "557R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  558 [label="State 558\n\l 53 assignment-expression: logical-or-expression assignment-operator • initializer-clause\l"]
  558 -> 238 [style=solid label="IDENTIFIER"]
  558 -> 239 [style=solid label="\"noexcept\""]
  558 -> 240 [style=solid label="\"!\""]
  558 -> 241 [style=solid label="\"::\""]
  558 -> 242 [style=solid label="\"this\""]
  558 -> 8 [style=solid label="\"typename\""]
  558 -> 243 [style=solid label="\"+\""]
  558 -> 244 [style=solid label="\"-\""]
  558 -> 245 [style=solid label="\"(\""]
  558 -> 246 [style=solid label="\"&\""]
  558 -> 247 [style=solid label="\"[\""]
  558 -> 248 [style=solid label="\"co_await\""]
  558 -> 380 [style=solid label="\"{\""]
  558 -> 249 [style=solid label="\"operator\""]
  558 -> 21 [style=solid label="\"decltype\""]
  558 -> 250 [style=solid label="\"*\""]
  558 -> 251 [style=solid label="\"requires\""]
  558 -> 252 [style=solid label="\"~\""]
  558 -> 253 [style=solid label="\"++\""]
  558 -> 254 [style=solid label="\"--\""]
  558 -> 255 [style=solid label="\"dynamic_cast\""]
  558 -> 256 [style=solid label="\"static_cast\""]
  558 -> 257 [style=solid label="\"reinterpret_cast\""]
  558 -> 258 [style=solid label="\"const_cast\""]
  558 -> 259 [style=solid label="\"typeid\""]
  558 -> 260 [style=solid label="\"literal\""]
  558 -> 27 [style=solid label="\"char\""]
  558 -> 28 [style=solid label="\"char8_t\""]
  558 -> 29 [style=solid label="\"char16_t\""]
  558 -> 30 [style=solid label="\"char32_t\""]
  558 -> 31 [style=solid label="\"wchar_t\""]
  558 -> 32 [style=solid label="\"bool\""]
  558 -> 33 [style=solid label="\"short\""]
  558 -> 34 [style=solid label="\"int\""]
  558 -> 35 [style=solid label="\"long\""]
  558 -> 36 [style=solid label="\"signed\""]
  558 -> 37 [style=solid label="\"unsigned\""]
  558 -> 38 [style=solid label="\"float\""]
  558 -> 39 [style=solid label="\"double\""]
  558 -> 40 [style=solid label="\"void\""]
  558 -> 118 [style=solid label="STRING_LITERAL"]
  558 -> 261 [style=solid label="\"throw\""]
  558 -> 262 [style=solid label="\"sizeof\""]
  558 -> 263 [style=solid label="\"alignof\""]
  558 -> 264 [style=solid label="\"co_yield\""]
  558 -> 265 [style=dashed label="SCOPE-opt"]
  558 -> 266 [style=dashed label="additive-expression"]
  558 -> 267 [style=dashed label="and-expression"]
  558 -> 642 [style=dashed label="assignment-expression"]
  558 -> 269 [style=dashed label="await-expression"]
  558 -> 643 [style=dashed label="braced-init-list"]
  558 -> 270 [style=dashed label="cast-expression"]
  558 -> 55 [style=dashed label="class-name"]
  558 -> 271 [style=dashed label="compare-expression"]
  558 -> 272 [style=dashed label="conditional-expression"]
  558 -> 273 [style=dashed label="conversion-function-id"]
  558 -> 63 [style=dashed label="decltype-specifier"]
  558 -> 274 [style=dashed label="delete-expression"]
  558 -> 71 [style=dashed label="enum-name"]
  558 -> 275 [style=dashed label="equality-expression"]
  558 -> 276 [style=dashed label="exclusive-or-expression"]
  558 -> 278 [style=dashed label="fold-expression"]
  558 -> 279 [style=dashed label="id-expression"]
  558 -> 280 [style=dashed label="inclusive-or-expression"]
  558 -> 800 [style=dashed label="initializer-clause"]
  558 -> 281 [style=dashed label="lambda-expression"]
  558 -> 282 [style=dashed label="lambda-introducer"]
  558 -> 283 [style=dashed label="literal-operator-id"]
  558 -> 284 [style=dashed label="logical-and-expression"]
  558 -> 285 [style=dashed label="logical-or-expression"]
  558 -> 286 [style=dashed label="multiplicative-expression"]
  558 -> 85 [style=dashed label="namespace-alias"]
  558 -> 88 [style=dashed label="namespace-name"]
  558 -> 287 [style=dashed label="nested-name-specifier"]
  558 -> 90 [style=dashed label="nested-name-specifier-opt"]
  558 -> 288 [style=dashed label="new-expression"]
  558 -> 289 [style=dashed label="noexcept-expression"]
  558 -> 290 [style=dashed label="operator-function-id"]
  558 -> 94 [style=dashed label="placeholder-type-specifier"]
  558 -> 291 [style=dashed label="pm-expression"]
  558 -> 292 [style=dashed label="postfix-expression"]
  558 -> 293 [style=dashed label="primary-expression"]
  558 -> 294 [style=dashed label="qualified-id"]
  558 -> 295 [style=dashed label="relational-expression"]
  558 -> 296 [style=dashed label="requires-expression"]
  558 -> 297 [style=dashed label="shift-expression"]
  558 -> 298 [style=dashed label="simple-template-id"]
  558 -> 299 [style=dashed label="simple-type-specifier"]
  558 -> 300 [style=dashed label="string-literal"]
  558 -> 301 [style=dashed label="template-id"]
  558 -> 102 [style=dashed label="template-name"]
  558 -> 302 [style=dashed label="throw-expression"]
  558 -> 104 [style=dashed label="type-constraint"]
  558 -> 105 [style=dashed label="type-constraint-opt"]
  558 -> 106 [style=dashed label="type-name"]
  558 -> 108 [style=dashed label="typedef-name"]
  558 -> 303 [style=dashed label="typename-specifier"]
  558 -> 304 [style=dashed label="unary-expression"]
  558 -> 305 [style=dashed label="unary-operator"]
  558 -> 306 [style=dashed label="unqualified-id"]
  558 -> 307 [style=dashed label="yield-expression"]
  558 -> "558R19" [style=solid]
 "558R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  558 -> "558R458d" [label="[IDENTIFIER]", style=solid]
 "558R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  558 -> "558R710d" [label="[\"decltype\"]", style=solid]
 "558R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  558 -> "558R710" [label="[\"auto\"]", style=solid]
 "558R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  559 [label="State 559\n\l440 multiplicative-expression: multiplicative-expression \"*\" • pm-expression\l"]
  559 -> 238 [style=solid label="IDENTIFIER"]
  559 -> 239 [style=solid label="\"noexcept\""]
  559 -> 240 [style=solid label="\"!\""]
  559 -> 241 [style=solid label="\"::\""]
  559 -> 242 [style=solid label="\"this\""]
  559 -> 8 [style=solid label="\"typename\""]
  559 -> 243 [style=solid label="\"+\""]
  559 -> 244 [style=solid label="\"-\""]
  559 -> 245 [style=solid label="\"(\""]
  559 -> 246 [style=solid label="\"&\""]
  559 -> 247 [style=solid label="\"[\""]
  559 -> 248 [style=solid label="\"co_await\""]
  559 -> 249 [style=solid label="\"operator\""]
  559 -> 21 [style=solid label="\"decltype\""]
  559 -> 250 [style=solid label="\"*\""]
  559 -> 251 [style=solid label="\"requires\""]
  559 -> 252 [style=solid label="\"~\""]
  559 -> 253 [style=solid label="\"++\""]
  559 -> 254 [style=solid label="\"--\""]
  559 -> 255 [style=solid label="\"dynamic_cast\""]
  559 -> 256 [style=solid label="\"static_cast\""]
  559 -> 257 [style=solid label="\"reinterpret_cast\""]
  559 -> 258 [style=solid label="\"const_cast\""]
  559 -> 259 [style=solid label="\"typeid\""]
  559 -> 260 [style=solid label="\"literal\""]
  559 -> 27 [style=solid label="\"char\""]
  559 -> 28 [style=solid label="\"char8_t\""]
  559 -> 29 [style=solid label="\"char16_t\""]
  559 -> 30 [style=solid label="\"char32_t\""]
  559 -> 31 [style=solid label="\"wchar_t\""]
  559 -> 32 [style=solid label="\"bool\""]
  559 -> 33 [style=solid label="\"short\""]
  559 -> 34 [style=solid label="\"int\""]
  559 -> 35 [style=solid label="\"long\""]
  559 -> 36 [style=solid label="\"signed\""]
  559 -> 37 [style=solid label="\"unsigned\""]
  559 -> 38 [style=solid label="\"float\""]
  559 -> 39 [style=solid label="\"double\""]
  559 -> 40 [style=solid label="\"void\""]
  559 -> 118 [style=solid label="STRING_LITERAL"]
  559 -> 262 [style=solid label="\"sizeof\""]
  559 -> 263 [style=solid label="\"alignof\""]
  559 -> 265 [style=dashed label="SCOPE-opt"]
  559 -> 269 [style=dashed label="await-expression"]
  559 -> 270 [style=dashed label="cast-expression"]
  559 -> 55 [style=dashed label="class-name"]
  559 -> 273 [style=dashed label="conversion-function-id"]
  559 -> 63 [style=dashed label="decltype-specifier"]
  559 -> 274 [style=dashed label="delete-expression"]
  559 -> 71 [style=dashed label="enum-name"]
  559 -> 278 [style=dashed label="fold-expression"]
  559 -> 279 [style=dashed label="id-expression"]
  559 -> 281 [style=dashed label="lambda-expression"]
  559 -> 282 [style=dashed label="lambda-introducer"]
  559 -> 283 [style=dashed label="literal-operator-id"]
  559 -> 85 [style=dashed label="namespace-alias"]
  559 -> 88 [style=dashed label="namespace-name"]
  559 -> 287 [style=dashed label="nested-name-specifier"]
  559 -> 90 [style=dashed label="nested-name-specifier-opt"]
  559 -> 288 [style=dashed label="new-expression"]
  559 -> 289 [style=dashed label="noexcept-expression"]
  559 -> 290 [style=dashed label="operator-function-id"]
  559 -> 94 [style=dashed label="placeholder-type-specifier"]
  559 -> 801 [style=dashed label="pm-expression"]
  559 -> 292 [style=dashed label="postfix-expression"]
  559 -> 293 [style=dashed label="primary-expression"]
  559 -> 294 [style=dashed label="qualified-id"]
  559 -> 296 [style=dashed label="requires-expression"]
  559 -> 298 [style=dashed label="simple-template-id"]
  559 -> 299 [style=dashed label="simple-type-specifier"]
  559 -> 300 [style=dashed label="string-literal"]
  559 -> 301 [style=dashed label="template-id"]
  559 -> 102 [style=dashed label="template-name"]
  559 -> 104 [style=dashed label="type-constraint"]
  559 -> 105 [style=dashed label="type-constraint-opt"]
  559 -> 106 [style=dashed label="type-name"]
  559 -> 108 [style=dashed label="typedef-name"]
  559 -> 303 [style=dashed label="typename-specifier"]
  559 -> 304 [style=dashed label="unary-expression"]
  559 -> 305 [style=dashed label="unary-operator"]
  559 -> 306 [style=dashed label="unqualified-id"]
  559 -> "559R19" [style=solid]
 "559R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  559 -> "559R458d" [label="[IDENTIFIER]", style=solid]
 "559R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  559 -> "559R710d" [label="[\"decltype\"]", style=solid]
 "559R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  559 -> "559R710" [label="[\"auto\"]", style=solid]
 "559R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  560 [label="State 560\n\l441 multiplicative-expression: multiplicative-expression \"/\" • pm-expression\l"]
  560 -> 238 [style=solid label="IDENTIFIER"]
  560 -> 239 [style=solid label="\"noexcept\""]
  560 -> 240 [style=solid label="\"!\""]
  560 -> 241 [style=solid label="\"::\""]
  560 -> 242 [style=solid label="\"this\""]
  560 -> 8 [style=solid label="\"typename\""]
  560 -> 243 [style=solid label="\"+\""]
  560 -> 244 [style=solid label="\"-\""]
  560 -> 245 [style=solid label="\"(\""]
  560 -> 246 [style=solid label="\"&\""]
  560 -> 247 [style=solid label="\"[\""]
  560 -> 248 [style=solid label="\"co_await\""]
  560 -> 249 [style=solid label="\"operator\""]
  560 -> 21 [style=solid label="\"decltype\""]
  560 -> 250 [style=solid label="\"*\""]
  560 -> 251 [style=solid label="\"requires\""]
  560 -> 252 [style=solid label="\"~\""]
  560 -> 253 [style=solid label="\"++\""]
  560 -> 254 [style=solid label="\"--\""]
  560 -> 255 [style=solid label="\"dynamic_cast\""]
  560 -> 256 [style=solid label="\"static_cast\""]
  560 -> 257 [style=solid label="\"reinterpret_cast\""]
  560 -> 258 [style=solid label="\"const_cast\""]
  560 -> 259 [style=solid label="\"typeid\""]
  560 -> 260 [style=solid label="\"literal\""]
  560 -> 27 [style=solid label="\"char\""]
  560 -> 28 [style=solid label="\"char8_t\""]
  560 -> 29 [style=solid label="\"char16_t\""]
  560 -> 30 [style=solid label="\"char32_t\""]
  560 -> 31 [style=solid label="\"wchar_t\""]
  560 -> 32 [style=solid label="\"bool\""]
  560 -> 33 [style=solid label="\"short\""]
  560 -> 34 [style=solid label="\"int\""]
  560 -> 35 [style=solid label="\"long\""]
  560 -> 36 [style=solid label="\"signed\""]
  560 -> 37 [style=solid label="\"unsigned\""]
  560 -> 38 [style=solid label="\"float\""]
  560 -> 39 [style=solid label="\"double\""]
  560 -> 40 [style=solid label="\"void\""]
  560 -> 118 [style=solid label="STRING_LITERAL"]
  560 -> 262 [style=solid label="\"sizeof\""]
  560 -> 263 [style=solid label="\"alignof\""]
  560 -> 265 [style=dashed label="SCOPE-opt"]
  560 -> 269 [style=dashed label="await-expression"]
  560 -> 270 [style=dashed label="cast-expression"]
  560 -> 55 [style=dashed label="class-name"]
  560 -> 273 [style=dashed label="conversion-function-id"]
  560 -> 63 [style=dashed label="decltype-specifier"]
  560 -> 274 [style=dashed label="delete-expression"]
  560 -> 71 [style=dashed label="enum-name"]
  560 -> 278 [style=dashed label="fold-expression"]
  560 -> 279 [style=dashed label="id-expression"]
  560 -> 281 [style=dashed label="lambda-expression"]
  560 -> 282 [style=dashed label="lambda-introducer"]
  560 -> 283 [style=dashed label="literal-operator-id"]
  560 -> 85 [style=dashed label="namespace-alias"]
  560 -> 88 [style=dashed label="namespace-name"]
  560 -> 287 [style=dashed label="nested-name-specifier"]
  560 -> 90 [style=dashed label="nested-name-specifier-opt"]
  560 -> 288 [style=dashed label="new-expression"]
  560 -> 289 [style=dashed label="noexcept-expression"]
  560 -> 290 [style=dashed label="operator-function-id"]
  560 -> 94 [style=dashed label="placeholder-type-specifier"]
  560 -> 802 [style=dashed label="pm-expression"]
  560 -> 292 [style=dashed label="postfix-expression"]
  560 -> 293 [style=dashed label="primary-expression"]
  560 -> 294 [style=dashed label="qualified-id"]
  560 -> 296 [style=dashed label="requires-expression"]
  560 -> 298 [style=dashed label="simple-template-id"]
  560 -> 299 [style=dashed label="simple-type-specifier"]
  560 -> 300 [style=dashed label="string-literal"]
  560 -> 301 [style=dashed label="template-id"]
  560 -> 102 [style=dashed label="template-name"]
  560 -> 104 [style=dashed label="type-constraint"]
  560 -> 105 [style=dashed label="type-constraint-opt"]
  560 -> 106 [style=dashed label="type-name"]
  560 -> 108 [style=dashed label="typedef-name"]
  560 -> 303 [style=dashed label="typename-specifier"]
  560 -> 304 [style=dashed label="unary-expression"]
  560 -> 305 [style=dashed label="unary-operator"]
  560 -> 306 [style=dashed label="unqualified-id"]
  560 -> "560R19" [style=solid]
 "560R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  560 -> "560R458d" [label="[IDENTIFIER]", style=solid]
 "560R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  560 -> "560R710d" [label="[\"decltype\"]", style=solid]
 "560R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  560 -> "560R710" [label="[\"auto\"]", style=solid]
 "560R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  561 [label="State 561\n\l442 multiplicative-expression: multiplicative-expression \"%\" • pm-expression\l"]
  561 -> 238 [style=solid label="IDENTIFIER"]
  561 -> 239 [style=solid label="\"noexcept\""]
  561 -> 240 [style=solid label="\"!\""]
  561 -> 241 [style=solid label="\"::\""]
  561 -> 242 [style=solid label="\"this\""]
  561 -> 8 [style=solid label="\"typename\""]
  561 -> 243 [style=solid label="\"+\""]
  561 -> 244 [style=solid label="\"-\""]
  561 -> 245 [style=solid label="\"(\""]
  561 -> 246 [style=solid label="\"&\""]
  561 -> 247 [style=solid label="\"[\""]
  561 -> 248 [style=solid label="\"co_await\""]
  561 -> 249 [style=solid label="\"operator\""]
  561 -> 21 [style=solid label="\"decltype\""]
  561 -> 250 [style=solid label="\"*\""]
  561 -> 251 [style=solid label="\"requires\""]
  561 -> 252 [style=solid label="\"~\""]
  561 -> 253 [style=solid label="\"++\""]
  561 -> 254 [style=solid label="\"--\""]
  561 -> 255 [style=solid label="\"dynamic_cast\""]
  561 -> 256 [style=solid label="\"static_cast\""]
  561 -> 257 [style=solid label="\"reinterpret_cast\""]
  561 -> 258 [style=solid label="\"const_cast\""]
  561 -> 259 [style=solid label="\"typeid\""]
  561 -> 260 [style=solid label="\"literal\""]
  561 -> 27 [style=solid label="\"char\""]
  561 -> 28 [style=solid label="\"char8_t\""]
  561 -> 29 [style=solid label="\"char16_t\""]
  561 -> 30 [style=solid label="\"char32_t\""]
  561 -> 31 [style=solid label="\"wchar_t\""]
  561 -> 32 [style=solid label="\"bool\""]
  561 -> 33 [style=solid label="\"short\""]
  561 -> 34 [style=solid label="\"int\""]
  561 -> 35 [style=solid label="\"long\""]
  561 -> 36 [style=solid label="\"signed\""]
  561 -> 37 [style=solid label="\"unsigned\""]
  561 -> 38 [style=solid label="\"float\""]
  561 -> 39 [style=solid label="\"double\""]
  561 -> 40 [style=solid label="\"void\""]
  561 -> 118 [style=solid label="STRING_LITERAL"]
  561 -> 262 [style=solid label="\"sizeof\""]
  561 -> 263 [style=solid label="\"alignof\""]
  561 -> 265 [style=dashed label="SCOPE-opt"]
  561 -> 269 [style=dashed label="await-expression"]
  561 -> 270 [style=dashed label="cast-expression"]
  561 -> 55 [style=dashed label="class-name"]
  561 -> 273 [style=dashed label="conversion-function-id"]
  561 -> 63 [style=dashed label="decltype-specifier"]
  561 -> 274 [style=dashed label="delete-expression"]
  561 -> 71 [style=dashed label="enum-name"]
  561 -> 278 [style=dashed label="fold-expression"]
  561 -> 279 [style=dashed label="id-expression"]
  561 -> 281 [style=dashed label="lambda-expression"]
  561 -> 282 [style=dashed label="lambda-introducer"]
  561 -> 283 [style=dashed label="literal-operator-id"]
  561 -> 85 [style=dashed label="namespace-alias"]
  561 -> 88 [style=dashed label="namespace-name"]
  561 -> 287 [style=dashed label="nested-name-specifier"]
  561 -> 90 [style=dashed label="nested-name-specifier-opt"]
  561 -> 288 [style=dashed label="new-expression"]
  561 -> 289 [style=dashed label="noexcept-expression"]
  561 -> 290 [style=dashed label="operator-function-id"]
  561 -> 94 [style=dashed label="placeholder-type-specifier"]
  561 -> 803 [style=dashed label="pm-expression"]
  561 -> 292 [style=dashed label="postfix-expression"]
  561 -> 293 [style=dashed label="primary-expression"]
  561 -> 294 [style=dashed label="qualified-id"]
  561 -> 296 [style=dashed label="requires-expression"]
  561 -> 298 [style=dashed label="simple-template-id"]
  561 -> 299 [style=dashed label="simple-type-specifier"]
  561 -> 300 [style=dashed label="string-literal"]
  561 -> 301 [style=dashed label="template-id"]
  561 -> 102 [style=dashed label="template-name"]
  561 -> 104 [style=dashed label="type-constraint"]
  561 -> 105 [style=dashed label="type-constraint-opt"]
  561 -> 106 [style=dashed label="type-name"]
  561 -> 108 [style=dashed label="typedef-name"]
  561 -> 303 [style=dashed label="typename-specifier"]
  561 -> 304 [style=dashed label="unary-expression"]
  561 -> 305 [style=dashed label="unary-operator"]
  561 -> 306 [style=dashed label="unqualified-id"]
  561 -> "561R19" [style=solid]
 "561R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  561 -> "561R458d" [label="[IDENTIFIER]", style=solid]
 "561R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  561 -> "561R710d" [label="[\"decltype\"]", style=solid]
 "561R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  561 -> "561R710" [label="[\"auto\"]", style=solid]
 "561R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  562 [label="State 562\n\l457 nested-name-specifier: nested-name-specifier TEMPLATE-opt • simple-template-id \"::\"\l600 qualified-id: nested-name-specifier TEMPLATE-opt • unqualified-id\l"]
  562 -> 804 [style=solid label="IDENTIFIER"]
  562 -> 249 [style=solid label="\"operator\""]
  562 -> 336 [style=solid label="\"~\""]
  562 -> 273 [style=dashed label="conversion-function-id"]
  562 -> 283 [style=dashed label="literal-operator-id"]
  562 -> 290 [style=dashed label="operator-function-id"]
  562 -> 805 [style=dashed label="simple-template-id"]
  562 -> 301 [style=dashed label="template-id"]
  562 -> 102 [style=dashed label="template-name"]
  562 -> 806 [style=dashed label="unqualified-id"]
  563 [label="State 563\n\l694 template-id: operator-function-id \"<\" • template-argument-list-opt \">\"\l"]
  563 -> 238 [style=solid label="IDENTIFIER"]
  563 -> 239 [style=solid label="\"noexcept\""]
  563 -> 240 [style=solid label="\"!\""]
  563 -> 241 [style=solid label="\"::\""]
  563 -> 242 [style=solid label="\"this\""]
  563 -> 8 [style=solid label="\"typename\""]
  563 -> 243 [style=solid label="\"+\""]
  563 -> 244 [style=solid label="\"-\""]
  563 -> 245 [style=solid label="\"(\""]
  563 -> 246 [style=solid label="\"&\""]
  563 -> 247 [style=solid label="\"[\""]
  563 -> 248 [style=solid label="\"co_await\""]
  563 -> 12 [style=solid label="\"class\""]
  563 -> 13 [style=solid label="\"struct\""]
  563 -> 14 [style=solid label="\"union\""]
  563 -> 249 [style=solid label="\"operator\""]
  563 -> 15 [style=solid label="\"const\""]
  563 -> 16 [style=solid label="\"volatile\""]
  563 -> 21 [style=solid label="\"decltype\""]
  563 -> 125 [style=solid label="\"enum\""]
  563 -> 250 [style=solid label="\"*\""]
  563 -> 251 [style=solid label="\"requires\""]
  563 -> 252 [style=solid label="\"~\""]
  563 -> 253 [style=solid label="\"++\""]
  563 -> 254 [style=solid label="\"--\""]
  563 -> 255 [style=solid label="\"dynamic_cast\""]
  563 -> 256 [style=solid label="\"static_cast\""]
  563 -> 257 [style=solid label="\"reinterpret_cast\""]
  563 -> 258 [style=solid label="\"const_cast\""]
  563 -> 259 [style=solid label="\"typeid\""]
  563 -> 260 [style=solid label="\"literal\""]
  563 -> 27 [style=solid label="\"char\""]
  563 -> 28 [style=solid label="\"char8_t\""]
  563 -> 29 [style=solid label="\"char16_t\""]
  563 -> 30 [style=solid label="\"char32_t\""]
  563 -> 31 [style=solid label="\"wchar_t\""]
  563 -> 32 [style=solid label="\"bool\""]
  563 -> 33 [style=solid label="\"short\""]
  563 -> 34 [style=solid label="\"int\""]
  563 -> 35 [style=solid label="\"long\""]
  563 -> 36 [style=solid label="\"signed\""]
  563 -> 37 [style=solid label="\"unsigned\""]
  563 -> 38 [style=solid label="\"float\""]
  563 -> 39 [style=solid label="\"double\""]
  563 -> 40 [style=solid label="\"void\""]
  563 -> 118 [style=solid label="STRING_LITERAL"]
  563 -> 262 [style=solid label="\"sizeof\""]
  563 -> 263 [style=solid label="\"alignof\""]
  563 -> 265 [style=dashed label="SCOPE-opt"]
  563 -> 266 [style=dashed label="additive-expression"]
  563 -> 267 [style=dashed label="and-expression"]
  563 -> 269 [style=dashed label="await-expression"]
  563 -> 270 [style=dashed label="cast-expression"]
  563 -> 406 [style=dashed label="class-key"]
  563 -> 55 [style=dashed label="class-name"]
  563 -> 271 [style=dashed label="compare-expression"]
  563 -> 309 [style=dashed label="conditional-expression"]
  563 -> 407 [style=dashed label="constant-expression"]
  563 -> 273 [style=dashed label="conversion-function-id"]
  563 -> 57 [style=dashed label="cv-qualifier"]
  563 -> 63 [style=dashed label="decltype-specifier"]
  563 -> 274 [style=dashed label="delete-expression"]
  563 -> 66 [style=dashed label="elaborated-enum-specifier"]
  563 -> 67 [style=dashed label="elaborated-type-specifier"]
  563 -> 71 [style=dashed label="enum-name"]
  563 -> 275 [style=dashed label="equality-expression"]
  563 -> 276 [style=dashed label="exclusive-or-expression"]
  563 -> 278 [style=dashed label="fold-expression"]
  563 -> 408 [style=dashed label="id-expression"]
  563 -> 280 [style=dashed label="inclusive-or-expression"]
  563 -> 281 [style=dashed label="lambda-expression"]
  563 -> 282 [style=dashed label="lambda-introducer"]
  563 -> 283 [style=dashed label="literal-operator-id"]
  563 -> 284 [style=dashed label="logical-and-expression"]
  563 -> 311 [style=dashed label="logical-or-expression"]
  563 -> 286 [style=dashed label="multiplicative-expression"]
  563 -> 85 [style=dashed label="namespace-alias"]
  563 -> 88 [style=dashed label="namespace-name"]
  563 -> 287 [style=dashed label="nested-name-specifier"]
  563 -> 90 [style=dashed label="nested-name-specifier-opt"]
  563 -> 288 [style=dashed label="new-expression"]
  563 -> 289 [style=dashed label="noexcept-expression"]
  563 -> 290 [style=dashed label="operator-function-id"]
  563 -> 94 [style=dashed label="placeholder-type-specifier"]
  563 -> 291 [style=dashed label="pm-expression"]
  563 -> 292 [style=dashed label="postfix-expression"]
  563 -> 293 [style=dashed label="primary-expression"]
  563 -> 294 [style=dashed label="qualified-id"]
  563 -> 295 [style=dashed label="relational-expression"]
  563 -> 296 [style=dashed label="requires-expression"]
  563 -> 297 [style=dashed label="shift-expression"]
  563 -> 298 [style=dashed label="simple-template-id"]
  563 -> 409 [style=dashed label="simple-type-specifier"]
  563 -> 300 [style=dashed label="string-literal"]
  563 -> 410 [style=dashed label="template-argument"]
  563 -> 411 [style=dashed label="template-argument-list"]
  563 -> 807 [style=dashed label="template-argument-list-opt"]
  563 -> 301 [style=dashed label="template-id"]
  563 -> 102 [style=dashed label="template-name"]
  563 -> 104 [style=dashed label="type-constraint"]
  563 -> 105 [style=dashed label="type-constraint-opt"]
  563 -> 413 [style=dashed label="type-id"]
  563 -> 106 [style=dashed label="type-name"]
  563 -> 414 [style=dashed label="type-specifier"]
  563 -> 415 [style=dashed label="type-specifier-seq"]
  563 -> 108 [style=dashed label="typedef-name"]
  563 -> 416 [style=dashed label="typename-specifier"]
  563 -> 304 [style=dashed label="unary-expression"]
  563 -> 305 [style=dashed label="unary-operator"]
  563 -> 306 [style=dashed label="unqualified-id"]
  563 -> "563R19" [style=solid]
 "563R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  563 -> "563R458d" [label="[IDENTIFIER]", style=solid]
 "563R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  563 -> "563R688" [label="[\">\"]", style=solid]
 "563R688" [label="R688", fillcolor=3, shape=diamond, style=filled]
  563 -> "563R710d" [label="[\"decltype\"]", style=solid]
 "563R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  563 -> "563R710" [label="[\"auto\"]", style=solid]
 "563R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  564 [label="State 564\n\l557 pm-expression: pm-expression \".*\" • cast-expression\l"]
  564 -> 238 [style=solid label="IDENTIFIER"]
  564 -> 239 [style=solid label="\"noexcept\""]
  564 -> 240 [style=solid label="\"!\""]
  564 -> 241 [style=solid label="\"::\""]
  564 -> 242 [style=solid label="\"this\""]
  564 -> 8 [style=solid label="\"typename\""]
  564 -> 243 [style=solid label="\"+\""]
  564 -> 244 [style=solid label="\"-\""]
  564 -> 245 [style=solid label="\"(\""]
  564 -> 246 [style=solid label="\"&\""]
  564 -> 247 [style=solid label="\"[\""]
  564 -> 248 [style=solid label="\"co_await\""]
  564 -> 249 [style=solid label="\"operator\""]
  564 -> 21 [style=solid label="\"decltype\""]
  564 -> 250 [style=solid label="\"*\""]
  564 -> 251 [style=solid label="\"requires\""]
  564 -> 252 [style=solid label="\"~\""]
  564 -> 253 [style=solid label="\"++\""]
  564 -> 254 [style=solid label="\"--\""]
  564 -> 255 [style=solid label="\"dynamic_cast\""]
  564 -> 256 [style=solid label="\"static_cast\""]
  564 -> 257 [style=solid label="\"reinterpret_cast\""]
  564 -> 258 [style=solid label="\"const_cast\""]
  564 -> 259 [style=solid label="\"typeid\""]
  564 -> 260 [style=solid label="\"literal\""]
  564 -> 27 [style=solid label="\"char\""]
  564 -> 28 [style=solid label="\"char8_t\""]
  564 -> 29 [style=solid label="\"char16_t\""]
  564 -> 30 [style=solid label="\"char32_t\""]
  564 -> 31 [style=solid label="\"wchar_t\""]
  564 -> 32 [style=solid label="\"bool\""]
  564 -> 33 [style=solid label="\"short\""]
  564 -> 34 [style=solid label="\"int\""]
  564 -> 35 [style=solid label="\"long\""]
  564 -> 36 [style=solid label="\"signed\""]
  564 -> 37 [style=solid label="\"unsigned\""]
  564 -> 38 [style=solid label="\"float\""]
  564 -> 39 [style=solid label="\"double\""]
  564 -> 40 [style=solid label="\"void\""]
  564 -> 118 [style=solid label="STRING_LITERAL"]
  564 -> 262 [style=solid label="\"sizeof\""]
  564 -> 263 [style=solid label="\"alignof\""]
  564 -> 265 [style=dashed label="SCOPE-opt"]
  564 -> 269 [style=dashed label="await-expression"]
  564 -> 808 [style=dashed label="cast-expression"]
  564 -> 55 [style=dashed label="class-name"]
  564 -> 273 [style=dashed label="conversion-function-id"]
  564 -> 63 [style=dashed label="decltype-specifier"]
  564 -> 274 [style=dashed label="delete-expression"]
  564 -> 71 [style=dashed label="enum-name"]
  564 -> 278 [style=dashed label="fold-expression"]
  564 -> 279 [style=dashed label="id-expression"]
  564 -> 281 [style=dashed label="lambda-expression"]
  564 -> 282 [style=dashed label="lambda-introducer"]
  564 -> 283 [style=dashed label="literal-operator-id"]
  564 -> 85 [style=dashed label="namespace-alias"]
  564 -> 88 [style=dashed label="namespace-name"]
  564 -> 287 [style=dashed label="nested-name-specifier"]
  564 -> 90 [style=dashed label="nested-name-specifier-opt"]
  564 -> 288 [style=dashed label="new-expression"]
  564 -> 289 [style=dashed label="noexcept-expression"]
  564 -> 290 [style=dashed label="operator-function-id"]
  564 -> 94 [style=dashed label="placeholder-type-specifier"]
  564 -> 292 [style=dashed label="postfix-expression"]
  564 -> 293 [style=dashed label="primary-expression"]
  564 -> 294 [style=dashed label="qualified-id"]
  564 -> 296 [style=dashed label="requires-expression"]
  564 -> 298 [style=dashed label="simple-template-id"]
  564 -> 299 [style=dashed label="simple-type-specifier"]
  564 -> 300 [style=dashed label="string-literal"]
  564 -> 301 [style=dashed label="template-id"]
  564 -> 102 [style=dashed label="template-name"]
  564 -> 104 [style=dashed label="type-constraint"]
  564 -> 105 [style=dashed label="type-constraint-opt"]
  564 -> 106 [style=dashed label="type-name"]
  564 -> 108 [style=dashed label="typedef-name"]
  564 -> 303 [style=dashed label="typename-specifier"]
  564 -> 304 [style=dashed label="unary-expression"]
  564 -> 305 [style=dashed label="unary-operator"]
  564 -> 306 [style=dashed label="unqualified-id"]
  564 -> "564R19" [style=solid]
 "564R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  564 -> "564R458d" [label="[IDENTIFIER]", style=solid]
 "564R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  564 -> "564R710d" [label="[\"decltype\"]", style=solid]
 "564R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  564 -> "564R710" [label="[\"auto\"]", style=solid]
 "564R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  565 [label="State 565\n\l558 pm-expression: pm-expression \"->*\" • cast-expression\l"]
  565 -> 238 [style=solid label="IDENTIFIER"]
  565 -> 239 [style=solid label="\"noexcept\""]
  565 -> 240 [style=solid label="\"!\""]
  565 -> 241 [style=solid label="\"::\""]
  565 -> 242 [style=solid label="\"this\""]
  565 -> 8 [style=solid label="\"typename\""]
  565 -> 243 [style=solid label="\"+\""]
  565 -> 244 [style=solid label="\"-\""]
  565 -> 245 [style=solid label="\"(\""]
  565 -> 246 [style=solid label="\"&\""]
  565 -> 247 [style=solid label="\"[\""]
  565 -> 248 [style=solid label="\"co_await\""]
  565 -> 249 [style=solid label="\"operator\""]
  565 -> 21 [style=solid label="\"decltype\""]
  565 -> 250 [style=solid label="\"*\""]
  565 -> 251 [style=solid label="\"requires\""]
  565 -> 252 [style=solid label="\"~\""]
  565 -> 253 [style=solid label="\"++\""]
  565 -> 254 [style=solid label="\"--\""]
  565 -> 255 [style=solid label="\"dynamic_cast\""]
  565 -> 256 [style=solid label="\"static_cast\""]
  565 -> 257 [style=solid label="\"reinterpret_cast\""]
  565 -> 258 [style=solid label="\"const_cast\""]
  565 -> 259 [style=solid label="\"typeid\""]
  565 -> 260 [style=solid label="\"literal\""]
  565 -> 27 [style=solid label="\"char\""]
  565 -> 28 [style=solid label="\"char8_t\""]
  565 -> 29 [style=solid label="\"char16_t\""]
  565 -> 30 [style=solid label="\"char32_t\""]
  565 -> 31 [style=solid label="\"wchar_t\""]
  565 -> 32 [style=solid label="\"bool\""]
  565 -> 33 [style=solid label="\"short\""]
  565 -> 34 [style=solid label="\"int\""]
  565 -> 35 [style=solid label="\"long\""]
  565 -> 36 [style=solid label="\"signed\""]
  565 -> 37 [style=solid label="\"unsigned\""]
  565 -> 38 [style=solid label="\"float\""]
  565 -> 39 [style=solid label="\"double\""]
  565 -> 40 [style=solid label="\"void\""]
  565 -> 118 [style=solid label="STRING_LITERAL"]
  565 -> 262 [style=solid label="\"sizeof\""]
  565 -> 263 [style=solid label="\"alignof\""]
  565 -> 265 [style=dashed label="SCOPE-opt"]
  565 -> 269 [style=dashed label="await-expression"]
  565 -> 809 [style=dashed label="cast-expression"]
  565 -> 55 [style=dashed label="class-name"]
  565 -> 273 [style=dashed label="conversion-function-id"]
  565 -> 63 [style=dashed label="decltype-specifier"]
  565 -> 274 [style=dashed label="delete-expression"]
  565 -> 71 [style=dashed label="enum-name"]
  565 -> 278 [style=dashed label="fold-expression"]
  565 -> 279 [style=dashed label="id-expression"]
  565 -> 281 [style=dashed label="lambda-expression"]
  565 -> 282 [style=dashed label="lambda-introducer"]
  565 -> 283 [style=dashed label="literal-operator-id"]
  565 -> 85 [style=dashed label="namespace-alias"]
  565 -> 88 [style=dashed label="namespace-name"]
  565 -> 287 [style=dashed label="nested-name-specifier"]
  565 -> 90 [style=dashed label="nested-name-specifier-opt"]
  565 -> 288 [style=dashed label="new-expression"]
  565 -> 289 [style=dashed label="noexcept-expression"]
  565 -> 290 [style=dashed label="operator-function-id"]
  565 -> 94 [style=dashed label="placeholder-type-specifier"]
  565 -> 292 [style=dashed label="postfix-expression"]
  565 -> 293 [style=dashed label="primary-expression"]
  565 -> 294 [style=dashed label="qualified-id"]
  565 -> 296 [style=dashed label="requires-expression"]
  565 -> 298 [style=dashed label="simple-template-id"]
  565 -> 299 [style=dashed label="simple-type-specifier"]
  565 -> 300 [style=dashed label="string-literal"]
  565 -> 301 [style=dashed label="template-id"]
  565 -> 102 [style=dashed label="template-name"]
  565 -> 104 [style=dashed label="type-constraint"]
  565 -> 105 [style=dashed label="type-constraint-opt"]
  565 -> 106 [style=dashed label="type-name"]
  565 -> 108 [style=dashed label="typedef-name"]
  565 -> 303 [style=dashed label="typename-specifier"]
  565 -> 304 [style=dashed label="unary-expression"]
  565 -> 305 [style=dashed label="unary-operator"]
  565 -> 306 [style=dashed label="unqualified-id"]
  565 -> "565R19" [style=solid]
 "565R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  565 -> "565R458d" [label="[IDENTIFIER]", style=solid]
 "565R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  565 -> "565R710d" [label="[\"decltype\"]", style=solid]
 "565R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  565 -> "565R710" [label="[\"auto\"]", style=solid]
 "565R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  566 [label="State 566\n\l561 postfix-expression: postfix-expression \"(\" • expression-list-opt \")\"\l"]
  566 -> 238 [style=solid label="IDENTIFIER"]
  566 -> 239 [style=solid label="\"noexcept\""]
  566 -> 240 [style=solid label="\"!\""]
  566 -> 241 [style=solid label="\"::\""]
  566 -> 242 [style=solid label="\"this\""]
  566 -> 8 [style=solid label="\"typename\""]
  566 -> 243 [style=solid label="\"+\""]
  566 -> 244 [style=solid label="\"-\""]
  566 -> 245 [style=solid label="\"(\""]
  566 -> 246 [style=solid label="\"&\""]
  566 -> 247 [style=solid label="\"[\""]
  566 -> 248 [style=solid label="\"co_await\""]
  566 -> 380 [style=solid label="\"{\""]
  566 -> 249 [style=solid label="\"operator\""]
  566 -> 21 [style=solid label="\"decltype\""]
  566 -> 250 [style=solid label="\"*\""]
  566 -> 251 [style=solid label="\"requires\""]
  566 -> 252 [style=solid label="\"~\""]
  566 -> 253 [style=solid label="\"++\""]
  566 -> 254 [style=solid label="\"--\""]
  566 -> 255 [style=solid label="\"dynamic_cast\""]
  566 -> 256 [style=solid label="\"static_cast\""]
  566 -> 257 [style=solid label="\"reinterpret_cast\""]
  566 -> 258 [style=solid label="\"const_cast\""]
  566 -> 259 [style=solid label="\"typeid\""]
  566 -> 260 [style=solid label="\"literal\""]
  566 -> 27 [style=solid label="\"char\""]
  566 -> 28 [style=solid label="\"char8_t\""]
  566 -> 29 [style=solid label="\"char16_t\""]
  566 -> 30 [style=solid label="\"char32_t\""]
  566 -> 31 [style=solid label="\"wchar_t\""]
  566 -> 32 [style=solid label="\"bool\""]
  566 -> 33 [style=solid label="\"short\""]
  566 -> 34 [style=solid label="\"int\""]
  566 -> 35 [style=solid label="\"long\""]
  566 -> 36 [style=solid label="\"signed\""]
  566 -> 37 [style=solid label="\"unsigned\""]
  566 -> 38 [style=solid label="\"float\""]
  566 -> 39 [style=solid label="\"double\""]
  566 -> 40 [style=solid label="\"void\""]
  566 -> 118 [style=solid label="STRING_LITERAL"]
  566 -> 261 [style=solid label="\"throw\""]
  566 -> 262 [style=solid label="\"sizeof\""]
  566 -> 263 [style=solid label="\"alignof\""]
  566 -> 264 [style=solid label="\"co_yield\""]
  566 -> 265 [style=dashed label="SCOPE-opt"]
  566 -> 266 [style=dashed label="additive-expression"]
  566 -> 267 [style=dashed label="and-expression"]
  566 -> 642 [style=dashed label="assignment-expression"]
  566 -> 269 [style=dashed label="await-expression"]
  566 -> 643 [style=dashed label="braced-init-list"]
  566 -> 270 [style=dashed label="cast-expression"]
  566 -> 55 [style=dashed label="class-name"]
  566 -> 271 [style=dashed label="compare-expression"]
  566 -> 272 [style=dashed label="conditional-expression"]
  566 -> 273 [style=dashed label="conversion-function-id"]
  566 -> 63 [style=dashed label="decltype-specifier"]
  566 -> 274 [style=dashed label="delete-expression"]
  566 -> 71 [style=dashed label="enum-name"]
  566 -> 275 [style=dashed label="equality-expression"]
  566 -> 276 [style=dashed label="exclusive-or-expression"]
  566 -> 810 [style=dashed label="expression-list"]
  566 -> 811 [style=dashed label="expression-list-opt"]
  566 -> 278 [style=dashed label="fold-expression"]
  566 -> 279 [style=dashed label="id-expression"]
  566 -> 280 [style=dashed label="inclusive-or-expression"]
  566 -> 646 [style=dashed label="initializer-clause"]
  566 -> 647 [style=dashed label="initializer-list"]
  566 -> 281 [style=dashed label="lambda-expression"]
  566 -> 282 [style=dashed label="lambda-introducer"]
  566 -> 283 [style=dashed label="literal-operator-id"]
  566 -> 284 [style=dashed label="logical-and-expression"]
  566 -> 285 [style=dashed label="logical-or-expression"]
  566 -> 286 [style=dashed label="multiplicative-expression"]
  566 -> 85 [style=dashed label="namespace-alias"]
  566 -> 88 [style=dashed label="namespace-name"]
  566 -> 287 [style=dashed label="nested-name-specifier"]
  566 -> 90 [style=dashed label="nested-name-specifier-opt"]
  566 -> 288 [style=dashed label="new-expression"]
  566 -> 289 [style=dashed label="noexcept-expression"]
  566 -> 290 [style=dashed label="operator-function-id"]
  566 -> 94 [style=dashed label="placeholder-type-specifier"]
  566 -> 291 [style=dashed label="pm-expression"]
  566 -> 292 [style=dashed label="postfix-expression"]
  566 -> 293 [style=dashed label="primary-expression"]
  566 -> 294 [style=dashed label="qualified-id"]
  566 -> 295 [style=dashed label="relational-expression"]
  566 -> 296 [style=dashed label="requires-expression"]
  566 -> 297 [style=dashed label="shift-expression"]
  566 -> 298 [style=dashed label="simple-template-id"]
  566 -> 299 [style=dashed label="simple-type-specifier"]
  566 -> 300 [style=dashed label="string-literal"]
  566 -> 301 [style=dashed label="template-id"]
  566 -> 102 [style=dashed label="template-name"]
  566 -> 302 [style=dashed label="throw-expression"]
  566 -> 104 [style=dashed label="type-constraint"]
  566 -> 105 [style=dashed label="type-constraint-opt"]
  566 -> 106 [style=dashed label="type-name"]
  566 -> 108 [style=dashed label="typedef-name"]
  566 -> 303 [style=dashed label="typename-specifier"]
  566 -> 304 [style=dashed label="unary-expression"]
  566 -> 305 [style=dashed label="unary-operator"]
  566 -> 306 [style=dashed label="unqualified-id"]
  566 -> 307 [style=dashed label="yield-expression"]
  566 -> "566R19" [style=solid]
 "566R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  566 -> "566R280" [label="[\")\"]", style=solid]
 "566R280" [label="R280", fillcolor=3, shape=diamond, style=filled]
  566 -> "566R458d" [label="[IDENTIFIER]", style=solid]
 "566R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  566 -> "566R710d" [label="[\"decltype\"]", style=solid]
 "566R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  566 -> "566R710" [label="[\"auto\"]", style=solid]
 "566R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  567 [label="State 567\n\l560 postfix-expression: postfix-expression \"[\" • expression-list-opt \"]\"\l"]
  567 -> 238 [style=solid label="IDENTIFIER"]
  567 -> 239 [style=solid label="\"noexcept\""]
  567 -> 240 [style=solid label="\"!\""]
  567 -> 241 [style=solid label="\"::\""]
  567 -> 242 [style=solid label="\"this\""]
  567 -> 8 [style=solid label="\"typename\""]
  567 -> 243 [style=solid label="\"+\""]
  567 -> 244 [style=solid label="\"-\""]
  567 -> 245 [style=solid label="\"(\""]
  567 -> 246 [style=solid label="\"&\""]
  567 -> 247 [style=solid label="\"[\""]
  567 -> 248 [style=solid label="\"co_await\""]
  567 -> 380 [style=solid label="\"{\""]
  567 -> 249 [style=solid label="\"operator\""]
  567 -> 21 [style=solid label="\"decltype\""]
  567 -> 250 [style=solid label="\"*\""]
  567 -> 251 [style=solid label="\"requires\""]
  567 -> 252 [style=solid label="\"~\""]
  567 -> 253 [style=solid label="\"++\""]
  567 -> 254 [style=solid label="\"--\""]
  567 -> 255 [style=solid label="\"dynamic_cast\""]
  567 -> 256 [style=solid label="\"static_cast\""]
  567 -> 257 [style=solid label="\"reinterpret_cast\""]
  567 -> 258 [style=solid label="\"const_cast\""]
  567 -> 259 [style=solid label="\"typeid\""]
  567 -> 260 [style=solid label="\"literal\""]
  567 -> 27 [style=solid label="\"char\""]
  567 -> 28 [style=solid label="\"char8_t\""]
  567 -> 29 [style=solid label="\"char16_t\""]
  567 -> 30 [style=solid label="\"char32_t\""]
  567 -> 31 [style=solid label="\"wchar_t\""]
  567 -> 32 [style=solid label="\"bool\""]
  567 -> 33 [style=solid label="\"short\""]
  567 -> 34 [style=solid label="\"int\""]
  567 -> 35 [style=solid label="\"long\""]
  567 -> 36 [style=solid label="\"signed\""]
  567 -> 37 [style=solid label="\"unsigned\""]
  567 -> 38 [style=solid label="\"float\""]
  567 -> 39 [style=solid label="\"double\""]
  567 -> 40 [style=solid label="\"void\""]
  567 -> 118 [style=solid label="STRING_LITERAL"]
  567 -> 261 [style=solid label="\"throw\""]
  567 -> 262 [style=solid label="\"sizeof\""]
  567 -> 263 [style=solid label="\"alignof\""]
  567 -> 264 [style=solid label="\"co_yield\""]
  567 -> 265 [style=dashed label="SCOPE-opt"]
  567 -> 266 [style=dashed label="additive-expression"]
  567 -> 267 [style=dashed label="and-expression"]
  567 -> 642 [style=dashed label="assignment-expression"]
  567 -> 269 [style=dashed label="await-expression"]
  567 -> 643 [style=dashed label="braced-init-list"]
  567 -> 270 [style=dashed label="cast-expression"]
  567 -> 55 [style=dashed label="class-name"]
  567 -> 271 [style=dashed label="compare-expression"]
  567 -> 272 [style=dashed label="conditional-expression"]
  567 -> 273 [style=dashed label="conversion-function-id"]
  567 -> 63 [style=dashed label="decltype-specifier"]
  567 -> 274 [style=dashed label="delete-expression"]
  567 -> 71 [style=dashed label="enum-name"]
  567 -> 275 [style=dashed label="equality-expression"]
  567 -> 276 [style=dashed label="exclusive-or-expression"]
  567 -> 810 [style=dashed label="expression-list"]
  567 -> 812 [style=dashed label="expression-list-opt"]
  567 -> 278 [style=dashed label="fold-expression"]
  567 -> 279 [style=dashed label="id-expression"]
  567 -> 280 [style=dashed label="inclusive-or-expression"]
  567 -> 646 [style=dashed label="initializer-clause"]
  567 -> 647 [style=dashed label="initializer-list"]
  567 -> 281 [style=dashed label="lambda-expression"]
  567 -> 282 [style=dashed label="lambda-introducer"]
  567 -> 283 [style=dashed label="literal-operator-id"]
  567 -> 284 [style=dashed label="logical-and-expression"]
  567 -> 285 [style=dashed label="logical-or-expression"]
  567 -> 286 [style=dashed label="multiplicative-expression"]
  567 -> 85 [style=dashed label="namespace-alias"]
  567 -> 88 [style=dashed label="namespace-name"]
  567 -> 287 [style=dashed label="nested-name-specifier"]
  567 -> 90 [style=dashed label="nested-name-specifier-opt"]
  567 -> 288 [style=dashed label="new-expression"]
  567 -> 289 [style=dashed label="noexcept-expression"]
  567 -> 290 [style=dashed label="operator-function-id"]
  567 -> 94 [style=dashed label="placeholder-type-specifier"]
  567 -> 291 [style=dashed label="pm-expression"]
  567 -> 292 [style=dashed label="postfix-expression"]
  567 -> 293 [style=dashed label="primary-expression"]
  567 -> 294 [style=dashed label="qualified-id"]
  567 -> 295 [style=dashed label="relational-expression"]
  567 -> 296 [style=dashed label="requires-expression"]
  567 -> 297 [style=dashed label="shift-expression"]
  567 -> 298 [style=dashed label="simple-template-id"]
  567 -> 299 [style=dashed label="simple-type-specifier"]
  567 -> 300 [style=dashed label="string-literal"]
  567 -> 301 [style=dashed label="template-id"]
  567 -> 102 [style=dashed label="template-name"]
  567 -> 302 [style=dashed label="throw-expression"]
  567 -> 104 [style=dashed label="type-constraint"]
  567 -> 105 [style=dashed label="type-constraint-opt"]
  567 -> 106 [style=dashed label="type-name"]
  567 -> 108 [style=dashed label="typedef-name"]
  567 -> 303 [style=dashed label="typename-specifier"]
  567 -> 304 [style=dashed label="unary-expression"]
  567 -> 305 [style=dashed label="unary-operator"]
  567 -> 306 [style=dashed label="unqualified-id"]
  567 -> 307 [style=dashed label="yield-expression"]
  567 -> "567R19" [style=solid]
 "567R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  567 -> "567R280" [label="[\"]\"]", style=solid]
 "567R280" [label="R280", fillcolor=3, shape=diamond, style=filled]
  567 -> "567R458d" [label="[IDENTIFIER]", style=solid]
 "567R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  567 -> "567R710d" [label="[\"decltype\"]", style=solid]
 "567R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  567 -> "567R710" [label="[\"auto\"]", style=solid]
 "567R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  568 [label="State 568\n\l567 postfix-expression: postfix-expression \"->\" • TEMPLATE-opt id-expression\l"]
  568 -> 230 [style=solid label="\"template\""]
  568 -> 813 [style=dashed label="TEMPLATE-opt"]
  568 -> "568R21" [style=solid]
 "568R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  569 [label="State 569\n\l566 postfix-expression: postfix-expression \".\" • TEMPLATE-opt id-expression\l"]
  569 -> 230 [style=solid label="\"template\""]
  569 -> 814 [style=dashed label="TEMPLATE-opt"]
  569 -> "569R21" [style=solid]
 "569R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  570 [label="State 570\n\l568 postfix-expression: postfix-expression \"++\" •\l"]
  570 -> "570R568" [style=solid]
 "570R568" [label="R568", fillcolor=3, shape=diamond, style=filled]
  571 [label="State 571\n\l569 postfix-expression: postfix-expression \"--\" •\l"]
  571 -> "571R569" [style=solid]
 "571R569" [label="R569", fillcolor=3, shape=diamond, style=filled]
  572 [label="State 572\n\l607 relational-expression: relational-expression \"<\" • compare-expression\l"]
  572 -> 238 [style=solid label="IDENTIFIER"]
  572 -> 239 [style=solid label="\"noexcept\""]
  572 -> 240 [style=solid label="\"!\""]
  572 -> 241 [style=solid label="\"::\""]
  572 -> 242 [style=solid label="\"this\""]
  572 -> 8 [style=solid label="\"typename\""]
  572 -> 243 [style=solid label="\"+\""]
  572 -> 244 [style=solid label="\"-\""]
  572 -> 245 [style=solid label="\"(\""]
  572 -> 246 [style=solid label="\"&\""]
  572 -> 247 [style=solid label="\"[\""]
  572 -> 248 [style=solid label="\"co_await\""]
  572 -> 249 [style=solid label="\"operator\""]
  572 -> 21 [style=solid label="\"decltype\""]
  572 -> 250 [style=solid label="\"*\""]
  572 -> 251 [style=solid label="\"requires\""]
  572 -> 252 [style=solid label="\"~\""]
  572 -> 253 [style=solid label="\"++\""]
  572 -> 254 [style=solid label="\"--\""]
  572 -> 255 [style=solid label="\"dynamic_cast\""]
  572 -> 256 [style=solid label="\"static_cast\""]
  572 -> 257 [style=solid label="\"reinterpret_cast\""]
  572 -> 258 [style=solid label="\"const_cast\""]
  572 -> 259 [style=solid label="\"typeid\""]
  572 -> 260 [style=solid label="\"literal\""]
  572 -> 27 [style=solid label="\"char\""]
  572 -> 28 [style=solid label="\"char8_t\""]
  572 -> 29 [style=solid label="\"char16_t\""]
  572 -> 30 [style=solid label="\"char32_t\""]
  572 -> 31 [style=solid label="\"wchar_t\""]
  572 -> 32 [style=solid label="\"bool\""]
  572 -> 33 [style=solid label="\"short\""]
  572 -> 34 [style=solid label="\"int\""]
  572 -> 35 [style=solid label="\"long\""]
  572 -> 36 [style=solid label="\"signed\""]
  572 -> 37 [style=solid label="\"unsigned\""]
  572 -> 38 [style=solid label="\"float\""]
  572 -> 39 [style=solid label="\"double\""]
  572 -> 40 [style=solid label="\"void\""]
  572 -> 118 [style=solid label="STRING_LITERAL"]
  572 -> 262 [style=solid label="\"sizeof\""]
  572 -> 263 [style=solid label="\"alignof\""]
  572 -> 265 [style=dashed label="SCOPE-opt"]
  572 -> 266 [style=dashed label="additive-expression"]
  572 -> 269 [style=dashed label="await-expression"]
  572 -> 270 [style=dashed label="cast-expression"]
  572 -> 55 [style=dashed label="class-name"]
  572 -> 815 [style=dashed label="compare-expression"]
  572 -> 273 [style=dashed label="conversion-function-id"]
  572 -> 63 [style=dashed label="decltype-specifier"]
  572 -> 274 [style=dashed label="delete-expression"]
  572 -> 71 [style=dashed label="enum-name"]
  572 -> 278 [style=dashed label="fold-expression"]
  572 -> 279 [style=dashed label="id-expression"]
  572 -> 281 [style=dashed label="lambda-expression"]
  572 -> 282 [style=dashed label="lambda-introducer"]
  572 -> 283 [style=dashed label="literal-operator-id"]
  572 -> 286 [style=dashed label="multiplicative-expression"]
  572 -> 85 [style=dashed label="namespace-alias"]
  572 -> 88 [style=dashed label="namespace-name"]
  572 -> 287 [style=dashed label="nested-name-specifier"]
  572 -> 90 [style=dashed label="nested-name-specifier-opt"]
  572 -> 288 [style=dashed label="new-expression"]
  572 -> 289 [style=dashed label="noexcept-expression"]
  572 -> 290 [style=dashed label="operator-function-id"]
  572 -> 94 [style=dashed label="placeholder-type-specifier"]
  572 -> 291 [style=dashed label="pm-expression"]
  572 -> 292 [style=dashed label="postfix-expression"]
  572 -> 293 [style=dashed label="primary-expression"]
  572 -> 294 [style=dashed label="qualified-id"]
  572 -> 296 [style=dashed label="requires-expression"]
  572 -> 297 [style=dashed label="shift-expression"]
  572 -> 298 [style=dashed label="simple-template-id"]
  572 -> 299 [style=dashed label="simple-type-specifier"]
  572 -> 300 [style=dashed label="string-literal"]
  572 -> 301 [style=dashed label="template-id"]
  572 -> 102 [style=dashed label="template-name"]
  572 -> 104 [style=dashed label="type-constraint"]
  572 -> 105 [style=dashed label="type-constraint-opt"]
  572 -> 106 [style=dashed label="type-name"]
  572 -> 108 [style=dashed label="typedef-name"]
  572 -> 303 [style=dashed label="typename-specifier"]
  572 -> 304 [style=dashed label="unary-expression"]
  572 -> 305 [style=dashed label="unary-operator"]
  572 -> 306 [style=dashed label="unqualified-id"]
  572 -> "572R19" [style=solid]
 "572R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  572 -> "572R458d" [label="[IDENTIFIER]", style=solid]
 "572R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  572 -> "572R710d" [label="[\"decltype\"]", style=solid]
 "572R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  572 -> "572R710" [label="[\"auto\"]", style=solid]
 "572R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  573 [label="State 573\n\l608 relational-expression: relational-expression \">\" • compare-expression\l"]
  573 -> 238 [style=solid label="IDENTIFIER"]
  573 -> 239 [style=solid label="\"noexcept\""]
  573 -> 240 [style=solid label="\"!\""]
  573 -> 241 [style=solid label="\"::\""]
  573 -> 242 [style=solid label="\"this\""]
  573 -> 8 [style=solid label="\"typename\""]
  573 -> 243 [style=solid label="\"+\""]
  573 -> 244 [style=solid label="\"-\""]
  573 -> 245 [style=solid label="\"(\""]
  573 -> 246 [style=solid label="\"&\""]
  573 -> 247 [style=solid label="\"[\""]
  573 -> 248 [style=solid label="\"co_await\""]
  573 -> 249 [style=solid label="\"operator\""]
  573 -> 21 [style=solid label="\"decltype\""]
  573 -> 250 [style=solid label="\"*\""]
  573 -> 251 [style=solid label="\"requires\""]
  573 -> 252 [style=solid label="\"~\""]
  573 -> 253 [style=solid label="\"++\""]
  573 -> 254 [style=solid label="\"--\""]
  573 -> 255 [style=solid label="\"dynamic_cast\""]
  573 -> 256 [style=solid label="\"static_cast\""]
  573 -> 257 [style=solid label="\"reinterpret_cast\""]
  573 -> 258 [style=solid label="\"const_cast\""]
  573 -> 259 [style=solid label="\"typeid\""]
  573 -> 260 [style=solid label="\"literal\""]
  573 -> 27 [style=solid label="\"char\""]
  573 -> 28 [style=solid label="\"char8_t\""]
  573 -> 29 [style=solid label="\"char16_t\""]
  573 -> 30 [style=solid label="\"char32_t\""]
  573 -> 31 [style=solid label="\"wchar_t\""]
  573 -> 32 [style=solid label="\"bool\""]
  573 -> 33 [style=solid label="\"short\""]
  573 -> 34 [style=solid label="\"int\""]
  573 -> 35 [style=solid label="\"long\""]
  573 -> 36 [style=solid label="\"signed\""]
  573 -> 37 [style=solid label="\"unsigned\""]
  573 -> 38 [style=solid label="\"float\""]
  573 -> 39 [style=solid label="\"double\""]
  573 -> 40 [style=solid label="\"void\""]
  573 -> 118 [style=solid label="STRING_LITERAL"]
  573 -> 262 [style=solid label="\"sizeof\""]
  573 -> 263 [style=solid label="\"alignof\""]
  573 -> 265 [style=dashed label="SCOPE-opt"]
  573 -> 266 [style=dashed label="additive-expression"]
  573 -> 269 [style=dashed label="await-expression"]
  573 -> 270 [style=dashed label="cast-expression"]
  573 -> 55 [style=dashed label="class-name"]
  573 -> 816 [style=dashed label="compare-expression"]
  573 -> 273 [style=dashed label="conversion-function-id"]
  573 -> 63 [style=dashed label="decltype-specifier"]
  573 -> 274 [style=dashed label="delete-expression"]
  573 -> 71 [style=dashed label="enum-name"]
  573 -> 278 [style=dashed label="fold-expression"]
  573 -> 279 [style=dashed label="id-expression"]
  573 -> 281 [style=dashed label="lambda-expression"]
  573 -> 282 [style=dashed label="lambda-introducer"]
  573 -> 283 [style=dashed label="literal-operator-id"]
  573 -> 286 [style=dashed label="multiplicative-expression"]
  573 -> 85 [style=dashed label="namespace-alias"]
  573 -> 88 [style=dashed label="namespace-name"]
  573 -> 287 [style=dashed label="nested-name-specifier"]
  573 -> 90 [style=dashed label="nested-name-specifier-opt"]
  573 -> 288 [style=dashed label="new-expression"]
  573 -> 289 [style=dashed label="noexcept-expression"]
  573 -> 290 [style=dashed label="operator-function-id"]
  573 -> 94 [style=dashed label="placeholder-type-specifier"]
  573 -> 291 [style=dashed label="pm-expression"]
  573 -> 292 [style=dashed label="postfix-expression"]
  573 -> 293 [style=dashed label="primary-expression"]
  573 -> 294 [style=dashed label="qualified-id"]
  573 -> 296 [style=dashed label="requires-expression"]
  573 -> 297 [style=dashed label="shift-expression"]
  573 -> 298 [style=dashed label="simple-template-id"]
  573 -> 299 [style=dashed label="simple-type-specifier"]
  573 -> 300 [style=dashed label="string-literal"]
  573 -> 301 [style=dashed label="template-id"]
  573 -> 102 [style=dashed label="template-name"]
  573 -> 104 [style=dashed label="type-constraint"]
  573 -> 105 [style=dashed label="type-constraint-opt"]
  573 -> 106 [style=dashed label="type-name"]
  573 -> 108 [style=dashed label="typedef-name"]
  573 -> 303 [style=dashed label="typename-specifier"]
  573 -> 304 [style=dashed label="unary-expression"]
  573 -> 305 [style=dashed label="unary-operator"]
  573 -> 306 [style=dashed label="unqualified-id"]
  573 -> "573R19" [style=solid]
 "573R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  573 -> "573R458d" [label="[IDENTIFIER]", style=solid]
 "573R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  573 -> "573R710d" [label="[\"decltype\"]", style=solid]
 "573R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  573 -> "573R710" [label="[\"auto\"]", style=solid]
 "573R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  574 [label="State 574\n\l609 relational-expression: relational-expression \"<=\" • compare-expression\l"]
  574 -> 238 [style=solid label="IDENTIFIER"]
  574 -> 239 [style=solid label="\"noexcept\""]
  574 -> 240 [style=solid label="\"!\""]
  574 -> 241 [style=solid label="\"::\""]
  574 -> 242 [style=solid label="\"this\""]
  574 -> 8 [style=solid label="\"typename\""]
  574 -> 243 [style=solid label="\"+\""]
  574 -> 244 [style=solid label="\"-\""]
  574 -> 245 [style=solid label="\"(\""]
  574 -> 246 [style=solid label="\"&\""]
  574 -> 247 [style=solid label="\"[\""]
  574 -> 248 [style=solid label="\"co_await\""]
  574 -> 249 [style=solid label="\"operator\""]
  574 -> 21 [style=solid label="\"decltype\""]
  574 -> 250 [style=solid label="\"*\""]
  574 -> 251 [style=solid label="\"requires\""]
  574 -> 252 [style=solid label="\"~\""]
  574 -> 253 [style=solid label="\"++\""]
  574 -> 254 [style=solid label="\"--\""]
  574 -> 255 [style=solid label="\"dynamic_cast\""]
  574 -> 256 [style=solid label="\"static_cast\""]
  574 -> 257 [style=solid label="\"reinterpret_cast\""]
  574 -> 258 [style=solid label="\"const_cast\""]
  574 -> 259 [style=solid label="\"typeid\""]
  574 -> 260 [style=solid label="\"literal\""]
  574 -> 27 [style=solid label="\"char\""]
  574 -> 28 [style=solid label="\"char8_t\""]
  574 -> 29 [style=solid label="\"char16_t\""]
  574 -> 30 [style=solid label="\"char32_t\""]
  574 -> 31 [style=solid label="\"wchar_t\""]
  574 -> 32 [style=solid label="\"bool\""]
  574 -> 33 [style=solid label="\"short\""]
  574 -> 34 [style=solid label="\"int\""]
  574 -> 35 [style=solid label="\"long\""]
  574 -> 36 [style=solid label="\"signed\""]
  574 -> 37 [style=solid label="\"unsigned\""]
  574 -> 38 [style=solid label="\"float\""]
  574 -> 39 [style=solid label="\"double\""]
  574 -> 40 [style=solid label="\"void\""]
  574 -> 118 [style=solid label="STRING_LITERAL"]
  574 -> 262 [style=solid label="\"sizeof\""]
  574 -> 263 [style=solid label="\"alignof\""]
  574 -> 265 [style=dashed label="SCOPE-opt"]
  574 -> 266 [style=dashed label="additive-expression"]
  574 -> 269 [style=dashed label="await-expression"]
  574 -> 270 [style=dashed label="cast-expression"]
  574 -> 55 [style=dashed label="class-name"]
  574 -> 817 [style=dashed label="compare-expression"]
  574 -> 273 [style=dashed label="conversion-function-id"]
  574 -> 63 [style=dashed label="decltype-specifier"]
  574 -> 274 [style=dashed label="delete-expression"]
  574 -> 71 [style=dashed label="enum-name"]
  574 -> 278 [style=dashed label="fold-expression"]
  574 -> 279 [style=dashed label="id-expression"]
  574 -> 281 [style=dashed label="lambda-expression"]
  574 -> 282 [style=dashed label="lambda-introducer"]
  574 -> 283 [style=dashed label="literal-operator-id"]
  574 -> 286 [style=dashed label="multiplicative-expression"]
  574 -> 85 [style=dashed label="namespace-alias"]
  574 -> 88 [style=dashed label="namespace-name"]
  574 -> 287 [style=dashed label="nested-name-specifier"]
  574 -> 90 [style=dashed label="nested-name-specifier-opt"]
  574 -> 288 [style=dashed label="new-expression"]
  574 -> 289 [style=dashed label="noexcept-expression"]
  574 -> 290 [style=dashed label="operator-function-id"]
  574 -> 94 [style=dashed label="placeholder-type-specifier"]
  574 -> 291 [style=dashed label="pm-expression"]
  574 -> 292 [style=dashed label="postfix-expression"]
  574 -> 293 [style=dashed label="primary-expression"]
  574 -> 294 [style=dashed label="qualified-id"]
  574 -> 296 [style=dashed label="requires-expression"]
  574 -> 297 [style=dashed label="shift-expression"]
  574 -> 298 [style=dashed label="simple-template-id"]
  574 -> 299 [style=dashed label="simple-type-specifier"]
  574 -> 300 [style=dashed label="string-literal"]
  574 -> 301 [style=dashed label="template-id"]
  574 -> 102 [style=dashed label="template-name"]
  574 -> 104 [style=dashed label="type-constraint"]
  574 -> 105 [style=dashed label="type-constraint-opt"]
  574 -> 106 [style=dashed label="type-name"]
  574 -> 108 [style=dashed label="typedef-name"]
  574 -> 303 [style=dashed label="typename-specifier"]
  574 -> 304 [style=dashed label="unary-expression"]
  574 -> 305 [style=dashed label="unary-operator"]
  574 -> 306 [style=dashed label="unqualified-id"]
  574 -> "574R19" [style=solid]
 "574R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  574 -> "574R458d" [label="[IDENTIFIER]", style=solid]
 "574R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  574 -> "574R710d" [label="[\"decltype\"]", style=solid]
 "574R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  574 -> "574R710" [label="[\"auto\"]", style=solid]
 "574R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  575 [label="State 575\n\l610 relational-expression: relational-expression \">=\" • compare-expression\l"]
  575 -> 238 [style=solid label="IDENTIFIER"]
  575 -> 239 [style=solid label="\"noexcept\""]
  575 -> 240 [style=solid label="\"!\""]
  575 -> 241 [style=solid label="\"::\""]
  575 -> 242 [style=solid label="\"this\""]
  575 -> 8 [style=solid label="\"typename\""]
  575 -> 243 [style=solid label="\"+\""]
  575 -> 244 [style=solid label="\"-\""]
  575 -> 245 [style=solid label="\"(\""]
  575 -> 246 [style=solid label="\"&\""]
  575 -> 247 [style=solid label="\"[\""]
  575 -> 248 [style=solid label="\"co_await\""]
  575 -> 249 [style=solid label="\"operator\""]
  575 -> 21 [style=solid label="\"decltype\""]
  575 -> 250 [style=solid label="\"*\""]
  575 -> 251 [style=solid label="\"requires\""]
  575 -> 252 [style=solid label="\"~\""]
  575 -> 253 [style=solid label="\"++\""]
  575 -> 254 [style=solid label="\"--\""]
  575 -> 255 [style=solid label="\"dynamic_cast\""]
  575 -> 256 [style=solid label="\"static_cast\""]
  575 -> 257 [style=solid label="\"reinterpret_cast\""]
  575 -> 258 [style=solid label="\"const_cast\""]
  575 -> 259 [style=solid label="\"typeid\""]
  575 -> 260 [style=solid label="\"literal\""]
  575 -> 27 [style=solid label="\"char\""]
  575 -> 28 [style=solid label="\"char8_t\""]
  575 -> 29 [style=solid label="\"char16_t\""]
  575 -> 30 [style=solid label="\"char32_t\""]
  575 -> 31 [style=solid label="\"wchar_t\""]
  575 -> 32 [style=solid label="\"bool\""]
  575 -> 33 [style=solid label="\"short\""]
  575 -> 34 [style=solid label="\"int\""]
  575 -> 35 [style=solid label="\"long\""]
  575 -> 36 [style=solid label="\"signed\""]
  575 -> 37 [style=solid label="\"unsigned\""]
  575 -> 38 [style=solid label="\"float\""]
  575 -> 39 [style=solid label="\"double\""]
  575 -> 40 [style=solid label="\"void\""]
  575 -> 118 [style=solid label="STRING_LITERAL"]
  575 -> 262 [style=solid label="\"sizeof\""]
  575 -> 263 [style=solid label="\"alignof\""]
  575 -> 265 [style=dashed label="SCOPE-opt"]
  575 -> 266 [style=dashed label="additive-expression"]
  575 -> 269 [style=dashed label="await-expression"]
  575 -> 270 [style=dashed label="cast-expression"]
  575 -> 55 [style=dashed label="class-name"]
  575 -> 818 [style=dashed label="compare-expression"]
  575 -> 273 [style=dashed label="conversion-function-id"]
  575 -> 63 [style=dashed label="decltype-specifier"]
  575 -> 274 [style=dashed label="delete-expression"]
  575 -> 71 [style=dashed label="enum-name"]
  575 -> 278 [style=dashed label="fold-expression"]
  575 -> 279 [style=dashed label="id-expression"]
  575 -> 281 [style=dashed label="lambda-expression"]
  575 -> 282 [style=dashed label="lambda-introducer"]
  575 -> 283 [style=dashed label="literal-operator-id"]
  575 -> 286 [style=dashed label="multiplicative-expression"]
  575 -> 85 [style=dashed label="namespace-alias"]
  575 -> 88 [style=dashed label="namespace-name"]
  575 -> 287 [style=dashed label="nested-name-specifier"]
  575 -> 90 [style=dashed label="nested-name-specifier-opt"]
  575 -> 288 [style=dashed label="new-expression"]
  575 -> 289 [style=dashed label="noexcept-expression"]
  575 -> 290 [style=dashed label="operator-function-id"]
  575 -> 94 [style=dashed label="placeholder-type-specifier"]
  575 -> 291 [style=dashed label="pm-expression"]
  575 -> 292 [style=dashed label="postfix-expression"]
  575 -> 293 [style=dashed label="primary-expression"]
  575 -> 294 [style=dashed label="qualified-id"]
  575 -> 296 [style=dashed label="requires-expression"]
  575 -> 297 [style=dashed label="shift-expression"]
  575 -> 298 [style=dashed label="simple-template-id"]
  575 -> 299 [style=dashed label="simple-type-specifier"]
  575 -> 300 [style=dashed label="string-literal"]
  575 -> 301 [style=dashed label="template-id"]
  575 -> 102 [style=dashed label="template-name"]
  575 -> 104 [style=dashed label="type-constraint"]
  575 -> 105 [style=dashed label="type-constraint-opt"]
  575 -> 106 [style=dashed label="type-name"]
  575 -> 108 [style=dashed label="typedef-name"]
  575 -> 303 [style=dashed label="typename-specifier"]
  575 -> 304 [style=dashed label="unary-expression"]
  575 -> 305 [style=dashed label="unary-operator"]
  575 -> 306 [style=dashed label="unqualified-id"]
  575 -> "575R19" [style=solid]
 "575R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  575 -> "575R458d" [label="[IDENTIFIER]", style=solid]
 "575R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  575 -> "575R710d" [label="[\"decltype\"]", style=solid]
 "575R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  575 -> "575R710" [label="[\"auto\"]", style=solid]
 "575R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  576 [label="State 576\n\l634 shift-expression: shift-expression \"<<\" • additive-expression\l"]
  576 -> 238 [style=solid label="IDENTIFIER"]
  576 -> 239 [style=solid label="\"noexcept\""]
  576 -> 240 [style=solid label="\"!\""]
  576 -> 241 [style=solid label="\"::\""]
  576 -> 242 [style=solid label="\"this\""]
  576 -> 8 [style=solid label="\"typename\""]
  576 -> 243 [style=solid label="\"+\""]
  576 -> 244 [style=solid label="\"-\""]
  576 -> 245 [style=solid label="\"(\""]
  576 -> 246 [style=solid label="\"&\""]
  576 -> 247 [style=solid label="\"[\""]
  576 -> 248 [style=solid label="\"co_await\""]
  576 -> 249 [style=solid label="\"operator\""]
  576 -> 21 [style=solid label="\"decltype\""]
  576 -> 250 [style=solid label="\"*\""]
  576 -> 251 [style=solid label="\"requires\""]
  576 -> 252 [style=solid label="\"~\""]
  576 -> 253 [style=solid label="\"++\""]
  576 -> 254 [style=solid label="\"--\""]
  576 -> 255 [style=solid label="\"dynamic_cast\""]
  576 -> 256 [style=solid label="\"static_cast\""]
  576 -> 257 [style=solid label="\"reinterpret_cast\""]
  576 -> 258 [style=solid label="\"const_cast\""]
  576 -> 259 [style=solid label="\"typeid\""]
  576 -> 260 [style=solid label="\"literal\""]
  576 -> 27 [style=solid label="\"char\""]
  576 -> 28 [style=solid label="\"char8_t\""]
  576 -> 29 [style=solid label="\"char16_t\""]
  576 -> 30 [style=solid label="\"char32_t\""]
  576 -> 31 [style=solid label="\"wchar_t\""]
  576 -> 32 [style=solid label="\"bool\""]
  576 -> 33 [style=solid label="\"short\""]
  576 -> 34 [style=solid label="\"int\""]
  576 -> 35 [style=solid label="\"long\""]
  576 -> 36 [style=solid label="\"signed\""]
  576 -> 37 [style=solid label="\"unsigned\""]
  576 -> 38 [style=solid label="\"float\""]
  576 -> 39 [style=solid label="\"double\""]
  576 -> 40 [style=solid label="\"void\""]
  576 -> 118 [style=solid label="STRING_LITERAL"]
  576 -> 262 [style=solid label="\"sizeof\""]
  576 -> 263 [style=solid label="\"alignof\""]
  576 -> 265 [style=dashed label="SCOPE-opt"]
  576 -> 819 [style=dashed label="additive-expression"]
  576 -> 269 [style=dashed label="await-expression"]
  576 -> 270 [style=dashed label="cast-expression"]
  576 -> 55 [style=dashed label="class-name"]
  576 -> 273 [style=dashed label="conversion-function-id"]
  576 -> 63 [style=dashed label="decltype-specifier"]
  576 -> 274 [style=dashed label="delete-expression"]
  576 -> 71 [style=dashed label="enum-name"]
  576 -> 278 [style=dashed label="fold-expression"]
  576 -> 279 [style=dashed label="id-expression"]
  576 -> 281 [style=dashed label="lambda-expression"]
  576 -> 282 [style=dashed label="lambda-introducer"]
  576 -> 283 [style=dashed label="literal-operator-id"]
  576 -> 286 [style=dashed label="multiplicative-expression"]
  576 -> 85 [style=dashed label="namespace-alias"]
  576 -> 88 [style=dashed label="namespace-name"]
  576 -> 287 [style=dashed label="nested-name-specifier"]
  576 -> 90 [style=dashed label="nested-name-specifier-opt"]
  576 -> 288 [style=dashed label="new-expression"]
  576 -> 289 [style=dashed label="noexcept-expression"]
  576 -> 290 [style=dashed label="operator-function-id"]
  576 -> 94 [style=dashed label="placeholder-type-specifier"]
  576 -> 291 [style=dashed label="pm-expression"]
  576 -> 292 [style=dashed label="postfix-expression"]
  576 -> 293 [style=dashed label="primary-expression"]
  576 -> 294 [style=dashed label="qualified-id"]
  576 -> 296 [style=dashed label="requires-expression"]
  576 -> 298 [style=dashed label="simple-template-id"]
  576 -> 299 [style=dashed label="simple-type-specifier"]
  576 -> 300 [style=dashed label="string-literal"]
  576 -> 301 [style=dashed label="template-id"]
  576 -> 102 [style=dashed label="template-name"]
  576 -> 104 [style=dashed label="type-constraint"]
  576 -> 105 [style=dashed label="type-constraint-opt"]
  576 -> 106 [style=dashed label="type-name"]
  576 -> 108 [style=dashed label="typedef-name"]
  576 -> 303 [style=dashed label="typename-specifier"]
  576 -> 304 [style=dashed label="unary-expression"]
  576 -> 305 [style=dashed label="unary-operator"]
  576 -> 306 [style=dashed label="unqualified-id"]
  576 -> "576R19" [style=solid]
 "576R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  576 -> "576R458d" [label="[IDENTIFIER]", style=solid]
 "576R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  576 -> "576R710d" [label="[\"decltype\"]", style=solid]
 "576R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  576 -> "576R710" [label="[\"auto\"]", style=solid]
 "576R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  577 [label="State 577\n\l635 shift-expression: shift-expression \">>\" • additive-expression\l"]
  577 -> 238 [style=solid label="IDENTIFIER"]
  577 -> 239 [style=solid label="\"noexcept\""]
  577 -> 240 [style=solid label="\"!\""]
  577 -> 241 [style=solid label="\"::\""]
  577 -> 242 [style=solid label="\"this\""]
  577 -> 8 [style=solid label="\"typename\""]
  577 -> 243 [style=solid label="\"+\""]
  577 -> 244 [style=solid label="\"-\""]
  577 -> 245 [style=solid label="\"(\""]
  577 -> 246 [style=solid label="\"&\""]
  577 -> 247 [style=solid label="\"[\""]
  577 -> 248 [style=solid label="\"co_await\""]
  577 -> 249 [style=solid label="\"operator\""]
  577 -> 21 [style=solid label="\"decltype\""]
  577 -> 250 [style=solid label="\"*\""]
  577 -> 251 [style=solid label="\"requires\""]
  577 -> 252 [style=solid label="\"~\""]
  577 -> 253 [style=solid label="\"++\""]
  577 -> 254 [style=solid label="\"--\""]
  577 -> 255 [style=solid label="\"dynamic_cast\""]
  577 -> 256 [style=solid label="\"static_cast\""]
  577 -> 257 [style=solid label="\"reinterpret_cast\""]
  577 -> 258 [style=solid label="\"const_cast\""]
  577 -> 259 [style=solid label="\"typeid\""]
  577 -> 260 [style=solid label="\"literal\""]
  577 -> 27 [style=solid label="\"char\""]
  577 -> 28 [style=solid label="\"char8_t\""]
  577 -> 29 [style=solid label="\"char16_t\""]
  577 -> 30 [style=solid label="\"char32_t\""]
  577 -> 31 [style=solid label="\"wchar_t\""]
  577 -> 32 [style=solid label="\"bool\""]
  577 -> 33 [style=solid label="\"short\""]
  577 -> 34 [style=solid label="\"int\""]
  577 -> 35 [style=solid label="\"long\""]
  577 -> 36 [style=solid label="\"signed\""]
  577 -> 37 [style=solid label="\"unsigned\""]
  577 -> 38 [style=solid label="\"float\""]
  577 -> 39 [style=solid label="\"double\""]
  577 -> 40 [style=solid label="\"void\""]
  577 -> 118 [style=solid label="STRING_LITERAL"]
  577 -> 262 [style=solid label="\"sizeof\""]
  577 -> 263 [style=solid label="\"alignof\""]
  577 -> 265 [style=dashed label="SCOPE-opt"]
  577 -> 820 [style=dashed label="additive-expression"]
  577 -> 269 [style=dashed label="await-expression"]
  577 -> 270 [style=dashed label="cast-expression"]
  577 -> 55 [style=dashed label="class-name"]
  577 -> 273 [style=dashed label="conversion-function-id"]
  577 -> 63 [style=dashed label="decltype-specifier"]
  577 -> 274 [style=dashed label="delete-expression"]
  577 -> 71 [style=dashed label="enum-name"]
  577 -> 278 [style=dashed label="fold-expression"]
  577 -> 279 [style=dashed label="id-expression"]
  577 -> 281 [style=dashed label="lambda-expression"]
  577 -> 282 [style=dashed label="lambda-introducer"]
  577 -> 283 [style=dashed label="literal-operator-id"]
  577 -> 286 [style=dashed label="multiplicative-expression"]
  577 -> 85 [style=dashed label="namespace-alias"]
  577 -> 88 [style=dashed label="namespace-name"]
  577 -> 287 [style=dashed label="nested-name-specifier"]
  577 -> 90 [style=dashed label="nested-name-specifier-opt"]
  577 -> 288 [style=dashed label="new-expression"]
  577 -> 289 [style=dashed label="noexcept-expression"]
  577 -> 290 [style=dashed label="operator-function-id"]
  577 -> 94 [style=dashed label="placeholder-type-specifier"]
  577 -> 291 [style=dashed label="pm-expression"]
  577 -> 292 [style=dashed label="postfix-expression"]
  577 -> 293 [style=dashed label="primary-expression"]
  577 -> 294 [style=dashed label="qualified-id"]
  577 -> 296 [style=dashed label="requires-expression"]
  577 -> 298 [style=dashed label="simple-template-id"]
  577 -> 299 [style=dashed label="simple-type-specifier"]
  577 -> 300 [style=dashed label="string-literal"]
  577 -> 301 [style=dashed label="template-id"]
  577 -> 102 [style=dashed label="template-name"]
  577 -> 104 [style=dashed label="type-constraint"]
  577 -> 105 [style=dashed label="type-constraint-opt"]
  577 -> 106 [style=dashed label="type-name"]
  577 -> 108 [style=dashed label="typedef-name"]
  577 -> 303 [style=dashed label="typename-specifier"]
  577 -> 304 [style=dashed label="unary-expression"]
  577 -> 305 [style=dashed label="unary-operator"]
  577 -> 306 [style=dashed label="unqualified-id"]
  577 -> "577R19" [style=solid]
 "577R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  577 -> "577R458d" [label="[IDENTIFIER]", style=solid]
 "577R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  577 -> "577R710d" [label="[\"decltype\"]", style=solid]
 "577R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  577 -> "577R710" [label="[\"auto\"]", style=solid]
 "577R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  578 [label="State 578\n\l562 postfix-expression: simple-type-specifier \"(\" • expression-list-opt \")\"\l"]
  578 -> 238 [style=solid label="IDENTIFIER"]
  578 -> 239 [style=solid label="\"noexcept\""]
  578 -> 240 [style=solid label="\"!\""]
  578 -> 241 [style=solid label="\"::\""]
  578 -> 242 [style=solid label="\"this\""]
  578 -> 8 [style=solid label="\"typename\""]
  578 -> 243 [style=solid label="\"+\""]
  578 -> 244 [style=solid label="\"-\""]
  578 -> 245 [style=solid label="\"(\""]
  578 -> 246 [style=solid label="\"&\""]
  578 -> 247 [style=solid label="\"[\""]
  578 -> 248 [style=solid label="\"co_await\""]
  578 -> 380 [style=solid label="\"{\""]
  578 -> 249 [style=solid label="\"operator\""]
  578 -> 21 [style=solid label="\"decltype\""]
  578 -> 250 [style=solid label="\"*\""]
  578 -> 251 [style=solid label="\"requires\""]
  578 -> 252 [style=solid label="\"~\""]
  578 -> 253 [style=solid label="\"++\""]
  578 -> 254 [style=solid label="\"--\""]
  578 -> 255 [style=solid label="\"dynamic_cast\""]
  578 -> 256 [style=solid label="\"static_cast\""]
  578 -> 257 [style=solid label="\"reinterpret_cast\""]
  578 -> 258 [style=solid label="\"const_cast\""]
  578 -> 259 [style=solid label="\"typeid\""]
  578 -> 260 [style=solid label="\"literal\""]
  578 -> 27 [style=solid label="\"char\""]
  578 -> 28 [style=solid label="\"char8_t\""]
  578 -> 29 [style=solid label="\"char16_t\""]
  578 -> 30 [style=solid label="\"char32_t\""]
  578 -> 31 [style=solid label="\"wchar_t\""]
  578 -> 32 [style=solid label="\"bool\""]
  578 -> 33 [style=solid label="\"short\""]
  578 -> 34 [style=solid label="\"int\""]
  578 -> 35 [style=solid label="\"long\""]
  578 -> 36 [style=solid label="\"signed\""]
  578 -> 37 [style=solid label="\"unsigned\""]
  578 -> 38 [style=solid label="\"float\""]
  578 -> 39 [style=solid label="\"double\""]
  578 -> 40 [style=solid label="\"void\""]
  578 -> 118 [style=solid label="STRING_LITERAL"]
  578 -> 261 [style=solid label="\"throw\""]
  578 -> 262 [style=solid label="\"sizeof\""]
  578 -> 263 [style=solid label="\"alignof\""]
  578 -> 264 [style=solid label="\"co_yield\""]
  578 -> 265 [style=dashed label="SCOPE-opt"]
  578 -> 266 [style=dashed label="additive-expression"]
  578 -> 267 [style=dashed label="and-expression"]
  578 -> 642 [style=dashed label="assignment-expression"]
  578 -> 269 [style=dashed label="await-expression"]
  578 -> 643 [style=dashed label="braced-init-list"]
  578 -> 270 [style=dashed label="cast-expression"]
  578 -> 55 [style=dashed label="class-name"]
  578 -> 271 [style=dashed label="compare-expression"]
  578 -> 272 [style=dashed label="conditional-expression"]
  578 -> 273 [style=dashed label="conversion-function-id"]
  578 -> 63 [style=dashed label="decltype-specifier"]
  578 -> 274 [style=dashed label="delete-expression"]
  578 -> 71 [style=dashed label="enum-name"]
  578 -> 275 [style=dashed label="equality-expression"]
  578 -> 276 [style=dashed label="exclusive-or-expression"]
  578 -> 810 [style=dashed label="expression-list"]
  578 -> 821 [style=dashed label="expression-list-opt"]
  578 -> 278 [style=dashed label="fold-expression"]
  578 -> 279 [style=dashed label="id-expression"]
  578 -> 280 [style=dashed label="inclusive-or-expression"]
  578 -> 646 [style=dashed label="initializer-clause"]
  578 -> 647 [style=dashed label="initializer-list"]
  578 -> 281 [style=dashed label="lambda-expression"]
  578 -> 282 [style=dashed label="lambda-introducer"]
  578 -> 283 [style=dashed label="literal-operator-id"]
  578 -> 284 [style=dashed label="logical-and-expression"]
  578 -> 285 [style=dashed label="logical-or-expression"]
  578 -> 286 [style=dashed label="multiplicative-expression"]
  578 -> 85 [style=dashed label="namespace-alias"]
  578 -> 88 [style=dashed label="namespace-name"]
  578 -> 287 [style=dashed label="nested-name-specifier"]
  578 -> 90 [style=dashed label="nested-name-specifier-opt"]
  578 -> 288 [style=dashed label="new-expression"]
  578 -> 289 [style=dashed label="noexcept-expression"]
  578 -> 290 [style=dashed label="operator-function-id"]
  578 -> 94 [style=dashed label="placeholder-type-specifier"]
  578 -> 291 [style=dashed label="pm-expression"]
  578 -> 292 [style=dashed label="postfix-expression"]
  578 -> 293 [style=dashed label="primary-expression"]
  578 -> 294 [style=dashed label="qualified-id"]
  578 -> 295 [style=dashed label="relational-expression"]
  578 -> 296 [style=dashed label="requires-expression"]
  578 -> 297 [style=dashed label="shift-expression"]
  578 -> 298 [style=dashed label="simple-template-id"]
  578 -> 299 [style=dashed label="simple-type-specifier"]
  578 -> 300 [style=dashed label="string-literal"]
  578 -> 301 [style=dashed label="template-id"]
  578 -> 102 [style=dashed label="template-name"]
  578 -> 302 [style=dashed label="throw-expression"]
  578 -> 104 [style=dashed label="type-constraint"]
  578 -> 105 [style=dashed label="type-constraint-opt"]
  578 -> 106 [style=dashed label="type-name"]
  578 -> 108 [style=dashed label="typedef-name"]
  578 -> 303 [style=dashed label="typename-specifier"]
  578 -> 304 [style=dashed label="unary-expression"]
  578 -> 305 [style=dashed label="unary-operator"]
  578 -> 306 [style=dashed label="unqualified-id"]
  578 -> 307 [style=dashed label="yield-expression"]
  578 -> "578R19" [style=solid]
 "578R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  578 -> "578R280" [label="[\")\"]", style=solid]
 "578R280" [label="R280", fillcolor=3, shape=diamond, style=filled]
  578 -> "578R458d" [label="[IDENTIFIER]", style=solid]
 "578R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  578 -> "578R710d" [label="[\"decltype\"]", style=solid]
 "578R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  578 -> "578R710" [label="[\"auto\"]", style=solid]
 "578R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  579 [label="State 579\n\l564 postfix-expression: simple-type-specifier braced-init-list •\l"]
  579 -> "579R564" [style=solid]
 "579R564" [label="R564", fillcolor=3, shape=diamond, style=filled]
  580 [label="State 580\n\l563 postfix-expression: typename-specifier \"(\" • expression-list-opt \")\"\l"]
  580 -> 238 [style=solid label="IDENTIFIER"]
  580 -> 239 [style=solid label="\"noexcept\""]
  580 -> 240 [style=solid label="\"!\""]
  580 -> 241 [style=solid label="\"::\""]
  580 -> 242 [style=solid label="\"this\""]
  580 -> 8 [style=solid label="\"typename\""]
  580 -> 243 [style=solid label="\"+\""]
  580 -> 244 [style=solid label="\"-\""]
  580 -> 245 [style=solid label="\"(\""]
  580 -> 246 [style=solid label="\"&\""]
  580 -> 247 [style=solid label="\"[\""]
  580 -> 248 [style=solid label="\"co_await\""]
  580 -> 380 [style=solid label="\"{\""]
  580 -> 249 [style=solid label="\"operator\""]
  580 -> 21 [style=solid label="\"decltype\""]
  580 -> 250 [style=solid label="\"*\""]
  580 -> 251 [style=solid label="\"requires\""]
  580 -> 252 [style=solid label="\"~\""]
  580 -> 253 [style=solid label="\"++\""]
  580 -> 254 [style=solid label="\"--\""]
  580 -> 255 [style=solid label="\"dynamic_cast\""]
  580 -> 256 [style=solid label="\"static_cast\""]
  580 -> 257 [style=solid label="\"reinterpret_cast\""]
  580 -> 258 [style=solid label="\"const_cast\""]
  580 -> 259 [style=solid label="\"typeid\""]
  580 -> 260 [style=solid label="\"literal\""]
  580 -> 27 [style=solid label="\"char\""]
  580 -> 28 [style=solid label="\"char8_t\""]
  580 -> 29 [style=solid label="\"char16_t\""]
  580 -> 30 [style=solid label="\"char32_t\""]
  580 -> 31 [style=solid label="\"wchar_t\""]
  580 -> 32 [style=solid label="\"bool\""]
  580 -> 33 [style=solid label="\"short\""]
  580 -> 34 [style=solid label="\"int\""]
  580 -> 35 [style=solid label="\"long\""]
  580 -> 36 [style=solid label="\"signed\""]
  580 -> 37 [style=solid label="\"unsigned\""]
  580 -> 38 [style=solid label="\"float\""]
  580 -> 39 [style=solid label="\"double\""]
  580 -> 40 [style=solid label="\"void\""]
  580 -> 118 [style=solid label="STRING_LITERAL"]
  580 -> 261 [style=solid label="\"throw\""]
  580 -> 262 [style=solid label="\"sizeof\""]
  580 -> 263 [style=solid label="\"alignof\""]
  580 -> 264 [style=solid label="\"co_yield\""]
  580 -> 265 [style=dashed label="SCOPE-opt"]
  580 -> 266 [style=dashed label="additive-expression"]
  580 -> 267 [style=dashed label="and-expression"]
  580 -> 642 [style=dashed label="assignment-expression"]
  580 -> 269 [style=dashed label="await-expression"]
  580 -> 643 [style=dashed label="braced-init-list"]
  580 -> 270 [style=dashed label="cast-expression"]
  580 -> 55 [style=dashed label="class-name"]
  580 -> 271 [style=dashed label="compare-expression"]
  580 -> 272 [style=dashed label="conditional-expression"]
  580 -> 273 [style=dashed label="conversion-function-id"]
  580 -> 63 [style=dashed label="decltype-specifier"]
  580 -> 274 [style=dashed label="delete-expression"]
  580 -> 71 [style=dashed label="enum-name"]
  580 -> 275 [style=dashed label="equality-expression"]
  580 -> 276 [style=dashed label="exclusive-or-expression"]
  580 -> 810 [style=dashed label="expression-list"]
  580 -> 822 [style=dashed label="expression-list-opt"]
  580 -> 278 [style=dashed label="fold-expression"]
  580 -> 279 [style=dashed label="id-expression"]
  580 -> 280 [style=dashed label="inclusive-or-expression"]
  580 -> 646 [style=dashed label="initializer-clause"]
  580 -> 647 [style=dashed label="initializer-list"]
  580 -> 281 [style=dashed label="lambda-expression"]
  580 -> 282 [style=dashed label="lambda-introducer"]
  580 -> 283 [style=dashed label="literal-operator-id"]
  580 -> 284 [style=dashed label="logical-and-expression"]
  580 -> 285 [style=dashed label="logical-or-expression"]
  580 -> 286 [style=dashed label="multiplicative-expression"]
  580 -> 85 [style=dashed label="namespace-alias"]
  580 -> 88 [style=dashed label="namespace-name"]
  580 -> 287 [style=dashed label="nested-name-specifier"]
  580 -> 90 [style=dashed label="nested-name-specifier-opt"]
  580 -> 288 [style=dashed label="new-expression"]
  580 -> 289 [style=dashed label="noexcept-expression"]
  580 -> 290 [style=dashed label="operator-function-id"]
  580 -> 94 [style=dashed label="placeholder-type-specifier"]
  580 -> 291 [style=dashed label="pm-expression"]
  580 -> 292 [style=dashed label="postfix-expression"]
  580 -> 293 [style=dashed label="primary-expression"]
  580 -> 294 [style=dashed label="qualified-id"]
  580 -> 295 [style=dashed label="relational-expression"]
  580 -> 296 [style=dashed label="requires-expression"]
  580 -> 297 [style=dashed label="shift-expression"]
  580 -> 298 [style=dashed label="simple-template-id"]
  580 -> 299 [style=dashed label="simple-type-specifier"]
  580 -> 300 [style=dashed label="string-literal"]
  580 -> 301 [style=dashed label="template-id"]
  580 -> 102 [style=dashed label="template-name"]
  580 -> 302 [style=dashed label="throw-expression"]
  580 -> 104 [style=dashed label="type-constraint"]
  580 -> 105 [style=dashed label="type-constraint-opt"]
  580 -> 106 [style=dashed label="type-name"]
  580 -> 108 [style=dashed label="typedef-name"]
  580 -> 303 [style=dashed label="typename-specifier"]
  580 -> 304 [style=dashed label="unary-expression"]
  580 -> 305 [style=dashed label="unary-operator"]
  580 -> 306 [style=dashed label="unqualified-id"]
  580 -> 307 [style=dashed label="yield-expression"]
  580 -> "580R19" [style=solid]
 "580R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  580 -> "580R280" [label="[\")\"]", style=solid]
 "580R280" [label="R280", fillcolor=3, shape=diamond, style=filled]
  580 -> "580R458d" [label="[IDENTIFIER]", style=solid]
 "580R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  580 -> "580R710d" [label="[\"decltype\"]", style=solid]
 "580R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  580 -> "580R710" [label="[\"auto\"]", style=solid]
 "580R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  581 [label="State 581\n\l565 postfix-expression: typename-specifier braced-init-list •\l"]
  581 -> "581R565" [style=solid]
 "581R565" [label="R565", fillcolor=3, shape=diamond, style=filled]
  582 [label="State 582\n\l737 unary-expression: unary-operator cast-expression •\l"]
  582 -> "582R737" [style=solid]
 "582R737" [label="R737", fillcolor=3, shape=diamond, style=filled]
  583 [label="State 583\n\l266 explicit-specifier: \"explicit\" \"(\" constant-expression \")\" •\l"]
  583 -> "583R266" [style=solid]
 "583R266" [label="R266", fillcolor=3, shape=diamond, style=filled]
  584 [label="State 584\n\l436 module-partition: \":\" module-name-qualifier-opt IDENTIFIER •\l"]
  584 -> "584R436" [style=solid]
 "584R436" [label="R436", fillcolor=3, shape=diamond, style=filled]
  585 [label="State 585\n\l430 module-import-declaration: \"import\" header-name attribute-specifier-seq-opt \";\" •\l"]
  585 -> "585R430" [style=solid]
 "585R430" [label="R430", fillcolor=3, shape=diamond, style=filled]
  586 [label="State 586\n\l428 module-import-declaration: \"import\" module-name attribute-specifier-seq-opt \";\" •\l"]
  586 -> "586R428" [style=solid]
 "586R428" [label="R428", fillcolor=3, shape=diamond, style=filled]
  587 [label="State 587\n\l433 module-name-qualifier: module-name-qualifier IDENTIFIER \".\" •\l"]
  587 -> "587R433" [style=solid]
 "587R433" [label="R433", fillcolor=3, shape=diamond, style=filled]
  588 [label="State 588\n\l429 module-import-declaration: \"import\" module-partition attribute-specifier-seq-opt \";\" •\l"]
  588 -> "588R429" [style=solid]
 "588R429" [label="R429", fillcolor=3, shape=diamond, style=filled]
  589 [label="State 589\n\l601 qualified-namespace-specifier: nested-name-specifier-opt • namespace-name\l"]
  589 -> 823 [style=solid label="IDENTIFIER"]
  589 -> 85 [style=dashed label="namespace-alias"]
  589 -> 824 [style=dashed label="namespace-name"]
  590 [label="State 590\n\l445 namespace-alias-definition: \"namespace\" IDENTIFIER \"=\" qualified-namespace-specifier • \";\"\l"]
  590 -> 825 [style=solid label="\";\""]
  591 [label="State 591\n\l 14 INLINE-opt: \"inline\" •\l"]
  591 -> "591R14" [style=solid]
 "591R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  592 [label="State 592\n\l235 enclosing-namespace-specifier: enclosing-namespace-specifier \"::\" INLINE-opt • IDENTIFIER\l460 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" INLINE-opt • IDENTIFIER \"{\" namespace-body \"}\"\l"]
  592 -> 826 [style=solid label="IDENTIFIER"]
  593 [label="State 593\n\l677 static_assert-declaration: \"static_assert\" \"(\" constant-expression \",\" • string-literal \")\" \";\"\l"]
  593 -> 118 [style=solid label="STRING_LITERAL"]
  593 -> 827 [style=dashed label="string-literal"]
  594 [label="State 594\n\l676 static_assert-declaration: \"static_assert\" \"(\" constant-expression \")\" • \";\"\l"]
  594 -> 828 [style=solid label="\";\""]
  595 [label="State 595\n\l443 named-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt IDENTIFIER • \"{\" namespace-body \"}\"\l"]
  595 -> 829 [style=solid label="\"{\""]
  596 [label="State 596\n\l754 unnamed-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt \"{\" • namespace-body \"}\"\l"]
  596 -> 1 [style=solid label="\"constexpr\""]
  596 -> 2 [style=solid label="\"export\""]
  596 -> 3 [style=solid label="\"extern\""]
  596 -> 4 [style=solid label="IDENTIFIER"]
  596 -> 5 [style=solid label="\"inline\""]
  596 -> 6 [style=solid label="\"::\""]
  596 -> 7 [style=solid label="\"template\""]
  596 -> 8 [style=solid label="\"typename\""]
  596 -> 9 [style=solid label="\"virtual\""]
  596 -> 10 [style=solid label="\"using\""]
  596 -> 11 [style=solid label="\";\""]
  596 -> 12 [style=solid label="\"class\""]
  596 -> 13 [style=solid label="\"struct\""]
  596 -> 14 [style=solid label="\"union\""]
  596 -> 15 [style=solid label="\"const\""]
  596 -> 16 [style=solid label="\"volatile\""]
  596 -> 17 [style=solid label="\"friend\""]
  596 -> 18 [style=solid label="\"typedef\""]
  596 -> 19 [style=solid label="\"consteval\""]
  596 -> 20 [style=solid label="\"constinit\""]
  596 -> 21 [style=solid label="\"decltype\""]
  596 -> 22 [style=solid label="\"enum\""]
  596 -> 23 [style=solid label="\"explicit\""]
  596 -> 25 [style=solid label="\"import\""]
  596 -> 26 [style=solid label="\"namespace\""]
  596 -> 27 [style=solid label="\"char\""]
  596 -> 28 [style=solid label="\"char8_t\""]
  596 -> 29 [style=solid label="\"char16_t\""]
  596 -> 30 [style=solid label="\"char32_t\""]
  596 -> 31 [style=solid label="\"wchar_t\""]
  596 -> 32 [style=solid label="\"bool\""]
  596 -> 33 [style=solid label="\"short\""]
  596 -> 34 [style=solid label="\"int\""]
  596 -> 35 [style=solid label="\"long\""]
  596 -> 36 [style=solid label="\"signed\""]
  596 -> 37 [style=solid label="\"unsigned\""]
  596 -> 38 [style=solid label="\"float\""]
  596 -> 39 [style=solid label="\"double\""]
  596 -> 40 [style=solid label="\"void\""]
  596 -> 41 [style=solid label="\"static_assert\""]
  596 -> 42 [style=solid label="\"static\""]
  596 -> 43 [style=solid label="\"thread_local\""]
  596 -> 44 [style=solid label="\"mutable\""]
  596 -> 45 [style=dashed label="EXTERN-opt"]
  596 -> 46 [style=dashed label="INLINE-opt"]
  596 -> 47 [style=dashed label="alias-declaration"]
  596 -> 48 [style=dashed label="asm-declaration"]
  596 -> 49 [style=dashed label="attribute-declaration"]
  596 -> 50 [style=dashed label="attribute-specifier-seq"]
  596 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  596 -> 52 [style=dashed label="block-declaration"]
  596 -> 53 [style=dashed label="class-head"]
  596 -> 54 [style=dashed label="class-key"]
  596 -> 55 [style=dashed label="class-name"]
  596 -> 56 [style=dashed label="class-specifier"]
  596 -> 57 [style=dashed label="cv-qualifier"]
  596 -> 58 [style=dashed label="decl-specifier"]
  596 -> 59 [style=dashed label="decl-specifier-seq"]
  596 -> 60 [style=dashed label="declaration"]
  596 -> 61 [style=dashed label="declaration-seq"]
  596 -> 830 [style=dashed label="declaration-seq-opt"]
  596 -> 63 [style=dashed label="decltype-specifier"]
  596 -> 64 [style=dashed label="deduction-guide"]
  596 -> 65 [style=dashed label="defining-type-specifier"]
  596 -> 66 [style=dashed label="elaborated-enum-specifier"]
  596 -> 67 [style=dashed label="elaborated-type-specifier"]
  596 -> 68 [style=dashed label="empty-declaration"]
  596 -> 69 [style=dashed label="enum-head"]
  596 -> 70 [style=dashed label="enum-key"]
  596 -> 71 [style=dashed label="enum-name"]
  596 -> 72 [style=dashed label="enum-specifier"]
  596 -> 73 [style=dashed label="explicit-instantiation"]
  596 -> 74 [style=dashed label="explicit-specialization"]
  596 -> 75 [style=dashed label="explicit-specifier"]
  596 -> 76 [style=dashed label="explicit-specifier-opt"]
  596 -> 77 [style=dashed label="export-declaration"]
  596 -> 78 [style=dashed label="function-definition"]
  596 -> 79 [style=dashed label="function-specifier"]
  596 -> 82 [style=dashed label="linkage-specification"]
  596 -> 83 [style=dashed label="module-import-declaration"]
  596 -> 84 [style=dashed label="named-namespace-definition"]
  596 -> 85 [style=dashed label="namespace-alias"]
  596 -> 86 [style=dashed label="namespace-alias-definition"]
  596 -> 831 [style=dashed label="namespace-body"]
  596 -> 87 [style=dashed label="namespace-definition"]
  596 -> 88 [style=dashed label="namespace-name"]
  596 -> 89 [style=dashed label="nested-name-specifier"]
  596 -> 90 [style=dashed label="nested-name-specifier-opt"]
  596 -> 91 [style=dashed label="nested-namespace-definition"]
  596 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  596 -> 93 [style=dashed label="opaque-enum-declaration"]
  596 -> 94 [style=dashed label="placeholder-type-specifier"]
  596 -> 95 [style=dashed label="simple-declaration"]
  596 -> 96 [style=dashed label="simple-template-id"]
  596 -> 97 [style=dashed label="simple-type-specifier"]
  596 -> 98 [style=dashed label="static_assert-declaration"]
  596 -> 99 [style=dashed label="storage-class-specifier"]
  596 -> 100 [style=dashed label="template-declaration"]
  596 -> 101 [style=dashed label="template-head"]
  596 -> 102 [style=dashed label="template-name"]
  596 -> 104 [style=dashed label="type-constraint"]
  596 -> 105 [style=dashed label="type-constraint-opt"]
  596 -> 106 [style=dashed label="type-name"]
  596 -> 107 [style=dashed label="type-specifier"]
  596 -> 108 [style=dashed label="typedef-name"]
  596 -> 109 [style=dashed label="typename-specifier"]
  596 -> 110 [style=dashed label="unnamed-namespace-definition"]
  596 -> 111 [style=dashed label="using-declaration"]
  596 -> 112 [style=dashed label="using-directive"]
  596 -> 113 [style=dashed label="using-enum-declaration"]
  596 -> "596R9d" [label="[\"template\"]", style=solid]
 "596R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  596 -> "596R13d" [label="[\"namespace\"]", style=solid]
 "596R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  596 -> "596R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "596R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  596 -> "596R83" [label="[]", style=solid]
 "596R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  596 -> "596R208" [label="[\"}\"]", style=solid]
 "596R208" [label="R208", fillcolor=3, shape=diamond, style=filled]
  596 -> "596R268d" [label="[IDENTIFIER]", style=solid]
 "596R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  596 -> "596R458d" [label="[IDENTIFIER]", style=solid]
 "596R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  596 -> "596R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "596R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  597 [label="State 597\n\l641 simple-declaration: attribute-specifier-seq decl-specifier-seq init-declarator-list \";\" •\l"]
  597 -> "597R641" [style=solid]
 "597R641" [label="R641", fillcolor=3, shape=diamond, style=filled]
  598 [label="State 598\n\l242 enum-head-name-opt: enum-head-name •\l"]
  598 -> "598R242" [style=solid]
 "598R242" [label="R242", fillcolor=3, shape=diamond, style=filled]
  599 [label="State 599\n\l767 using-directive: attribute-specifier-seq-opt \"using\" \"namespace\" nested-name-specifier-opt • namespace-name \";\"\l"]
  599 -> 823 [style=solid label="IDENTIFIER"]
  599 -> 85 [style=dashed label="namespace-alias"]
  599 -> 832 [style=dashed label="namespace-name"]
  600 [label="State 600\n\l 46 alignment-specifier: \"alignas\" \"(\" constant-expression • ELLIPSIS-opt \")\"\l"]
  600 -> 156 [style=solid label="\"...\""]
  600 -> 833 [style=dashed label="ELLIPSIS-opt"]
  600 -> "600R5" [style=solid]
 "600R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  601 [label="State 601\n\l 45 alignment-specifier: \"alignas\" \"(\" type-id • ELLIPSIS-opt \")\"\l"]
  601 -> 156 [style=solid label="\"...\""]
  601 -> 834 [style=dashed label="ELLIPSIS-opt"]
  601 -> "601R5" [style=solid]
 "601R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  602 [label="State 602\n\l491 noptr-declarator: noptr-declarator parameters-and-qualifiers •\l"]
  602 -> "602R491" [style=solid]
 "602R491" [label="R491", fillcolor=3, shape=diamond, style=filled]
  603 [label="State 603\n\l493 noptr-declarator: \"(\" ptr-declarator \")\" •\l"]
  603 -> "603R493" [style=solid]
 "603R493" [label="R493", fillcolor=3, shape=diamond, style=filled]
  604 [label="State 604\n\l 49 asm-declaration: attribute-specifier-seq-opt \"asm\" \"(\" string-literal • \")\" \";\"\l"]
  604 -> 835 [style=solid label="\")\""]
  605 [label="State 605\n\l 87 attribute-using-prefix: \"using\" • attribute-namespace \":\"\l"]
  605 -> 836 [style=solid label="IDENTIFIER"]
  605 -> 837 [style=dashed label="attribute-namespace"]
  606 [label="State 606\n\l 89 attribute-using-prefix-opt: attribute-using-prefix •\l"]
  606 -> "606R89" [style=solid]
 "606R89" [label="R89", fillcolor=3, shape=diamond, style=filled]
  607 [label="State 607\n\l 80 attribute-specifier: \"[\" \"[\" attribute-using-prefix-opt • attribute-list \"]\" \"]\"\l"]
  607 -> 838 [style=solid label="IDENTIFIER"]
  607 -> 839 [style=dashed label="attribute"]
  607 -> 840 [style=dashed label="attribute-list"]
  607 -> 841 [style=dashed label="attribute-namespace"]
  607 -> 842 [style=dashed label="attribute-opt"]
  607 -> 843 [style=dashed label="attribute-scoped-token"]
  607 -> 844 [style=dashed label="attribute-token"]
  607 -> "607R77" [style=solid]
 "607R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  608 [label="State 608\n\l177 cv-qualifier-seq: cv-qualifier • cv-qualifier-seq-opt\l"]
  608 -> 15 [style=solid label="\"const\""]
  608 -> 16 [style=solid label="\"volatile\""]
  608 -> 608 [style=dashed label="cv-qualifier"]
  608 -> 609 [style=dashed label="cv-qualifier-seq"]
  608 -> 845 [style=dashed label="cv-qualifier-seq-opt"]
  608 -> "608R178d" [label="[\"const\", \"volatile\"]", style=solid]
 "608R178d" [label="R178", fillcolor=5, shape=diamond, style=filled]
  608 -> "608R178" [style=solid]
 "608R178" [label="R178", fillcolor=3, shape=diamond, style=filled]
  609 [label="State 609\n\l179 cv-qualifier-seq-opt: cv-qualifier-seq •\l"]
  609 -> "609R179" [style=solid]
 "609R179" [label="R179", fillcolor=3, shape=diamond, style=filled]
  610 [label="State 610\n\l593 ptr-operator: \"*\" attribute-specifier-seq-opt cv-qualifier-seq-opt •\l"]
  610 -> "610R593" [style=solid]
 "610R593" [label="R593", fillcolor=3, shape=diamond, style=filled]
  611 [label="State 611\n\l642 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" • identifier-list \"]\" initializer \";\"\l"]
  611 -> 846 [style=solid label="IDENTIFIER"]
  611 -> 847 [style=dashed label="identifier-list"]
  612 [label="State 612\n\l770 virt-specifier: \"final\" •\l"]
  612 -> "612R770" [style=solid]
 "612R770" [label="R770", fillcolor=3, shape=diamond, style=filled]
  613 [label="State 613\n\l769 virt-specifier: \"override\" •\l"]
  613 -> "613R769" [style=solid]
 "613R769" [label="R769", fillcolor=3, shape=diamond, style=filled]
  614 [label="State 614\n\l328 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator requires-clause • function-body\l"]
  614 -> 848 [style=solid label="\"=\""]
  614 -> 849 [style=solid label="\":\""]
  614 -> 850 [style=solid label="\"try\""]
  614 -> 851 [style=dashed label="ctor-initializer"]
  614 -> 852 [style=dashed label="ctor-initializer-opt"]
  614 -> 853 [style=dashed label="function-body"]
  614 -> 854 [style=dashed label="function-try-block"]
  614 -> "614R173" [style=solid]
 "614R173" [label="R173", fillcolor=3, shape=diamond, style=filled]
  615 [label="State 615\n\l771 virt-specifier-seq: virt-specifier •\l"]
  615 -> "615R771" [style=solid]
 "615R771" [label="R771", fillcolor=3, shape=diamond, style=filled]
  616 [label="State 616\n\l772 virt-specifier-seq: virt-specifier-seq • virt-specifier\l774 virt-specifier-seq-opt: virt-specifier-seq •\l"]
  616 -> 612 [style=solid label="\"final\""]
  616 -> 613 [style=solid label="\"override\""]
  616 -> 855 [style=dashed label="virt-specifier"]
  616 -> "616R774" [style=solid]
 "616R774" [label="R774", fillcolor=3, shape=diamond, style=filled]
  617 [label="State 617\n\l327 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator virt-specifier-seq-opt • function-body\l"]
  617 -> 848 [style=solid label="\"=\""]
  617 -> 849 [style=solid label="\":\""]
  617 -> 850 [style=solid label="\"try\""]
  617 -> 851 [style=dashed label="ctor-initializer"]
  617 -> 852 [style=dashed label="ctor-initializer-opt"]
  617 -> 856 [style=dashed label="function-body"]
  617 -> 854 [style=dashed label="function-try-block"]
  617 -> "617R173" [style=solid]
 "617R173" [label="R173", fillcolor=3, shape=diamond, style=filled]
  618 [label="State 618\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l596 ptr-operator: nested-name-specifier \"*\" attribute-specifier-seq-opt • cv-qualifier-seq-opt\l"]
  618 -> 158 [style=solid label="\"alignas\""]
  618 -> 162 [style=solid label="\"[\""]
  618 -> 15 [style=solid label="\"const\""]
  618 -> 16 [style=solid label="\"volatile\""]
  618 -> 166 [style=dashed label="alignment-specifier"]
  618 -> 167 [style=dashed label="attribute-specifier"]
  618 -> 608 [style=dashed label="cv-qualifier"]
  618 -> 609 [style=dashed label="cv-qualifier-seq"]
  618 -> 857 [style=dashed label="cv-qualifier-seq-opt"]
  618 -> "618R178d" [label="[\"alignas\", \"[\", \"const\", \"volatile\"]", style=solid]
 "618R178d" [label="R178", fillcolor=5, shape=diamond, style=filled]
  618 -> "618R178" [style=solid]
 "618R178" [label="R178", fillcolor=3, shape=diamond, style=filled]
  619 [label="State 619\n\l549 parameter-declaration-list: parameter-declaration •\l"]
  619 -> "619R549" [style=solid]
 "619R549" [label="R549", fillcolor=3, shape=diamond, style=filled]
  620 [label="State 620\n\l553 parameters-and-qualifiers: \"(\" parameter-declaration-clause • \")\" cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt\l"]
  620 -> 858 [style=solid label="\")\""]
  621 [label="State 621\n\l548 parameter-declaration-clause: parameter-declaration-list • \",\" \"...\"\l550 parameter-declaration-list: parameter-declaration-list • \",\" parameter-declaration\l552 parameter-declaration-list-opt: parameter-declaration-list •\l"]
  621 -> 859 [style=solid label="\",\""]
  621 -> "621R552" [style=solid]
 "621R552" [label="R552", fillcolor=3, shape=diamond, style=filled]
  622 [label="State 622\n\l547 parameter-declaration-clause: parameter-declaration-list-opt • ELLIPSIS-opt\l"]
  622 -> 156 [style=solid label="\"...\""]
  622 -> 860 [style=dashed label="ELLIPSIS-opt"]
  622 -> "622R5" [style=solid]
 "622R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  623 [label="State 623\n\l160 constant-expression-opt: constant-expression •\l"]
  623 -> "623R160" [style=solid]
 "623R160" [label="R160", fillcolor=3, shape=diamond, style=filled]
  624 [label="State 624\n\l492 noptr-declarator: noptr-declarator \"[\" constant-expression-opt • \"]\" attribute-specifier-seq-opt\l"]
  624 -> 861 [style=solid label="\"]\""]
  625 [label="State 625\n\l702 trailing-return-type: \"->\" • type-id\l"]
  625 -> 4 [style=solid label="IDENTIFIER"]
  625 -> 6 [style=solid label="\"::\""]
  625 -> 8 [style=solid label="\"typename\""]
  625 -> 12 [style=solid label="\"class\""]
  625 -> 13 [style=solid label="\"struct\""]
  625 -> 14 [style=solid label="\"union\""]
  625 -> 15 [style=solid label="\"const\""]
  625 -> 16 [style=solid label="\"volatile\""]
  625 -> 21 [style=solid label="\"decltype\""]
  625 -> 125 [style=solid label="\"enum\""]
  625 -> 27 [style=solid label="\"char\""]
  625 -> 28 [style=solid label="\"char8_t\""]
  625 -> 29 [style=solid label="\"char16_t\""]
  625 -> 30 [style=solid label="\"char32_t\""]
  625 -> 31 [style=solid label="\"wchar_t\""]
  625 -> 32 [style=solid label="\"bool\""]
  625 -> 33 [style=solid label="\"short\""]
  625 -> 34 [style=solid label="\"int\""]
  625 -> 35 [style=solid label="\"long\""]
  625 -> 36 [style=solid label="\"signed\""]
  625 -> 37 [style=solid label="\"unsigned\""]
  625 -> 38 [style=solid label="\"float\""]
  625 -> 39 [style=solid label="\"double\""]
  625 -> 40 [style=solid label="\"void\""]
  625 -> 406 [style=dashed label="class-key"]
  625 -> 55 [style=dashed label="class-name"]
  625 -> 57 [style=dashed label="cv-qualifier"]
  625 -> 63 [style=dashed label="decltype-specifier"]
  625 -> 66 [style=dashed label="elaborated-enum-specifier"]
  625 -> 67 [style=dashed label="elaborated-type-specifier"]
  625 -> 71 [style=dashed label="enum-name"]
  625 -> 85 [style=dashed label="namespace-alias"]
  625 -> 88 [style=dashed label="namespace-name"]
  625 -> 89 [style=dashed label="nested-name-specifier"]
  625 -> 90 [style=dashed label="nested-name-specifier-opt"]
  625 -> 94 [style=dashed label="placeholder-type-specifier"]
  625 -> 96 [style=dashed label="simple-template-id"]
  625 -> 97 [style=dashed label="simple-type-specifier"]
  625 -> 102 [style=dashed label="template-name"]
  625 -> 104 [style=dashed label="type-constraint"]
  625 -> 105 [style=dashed label="type-constraint-opt"]
  625 -> 862 [style=dashed label="type-id"]
  625 -> 106 [style=dashed label="type-name"]
  625 -> 414 [style=dashed label="type-specifier"]
  625 -> 415 [style=dashed label="type-specifier-seq"]
  625 -> 108 [style=dashed label="typedef-name"]
  625 -> 109 [style=dashed label="typename-specifier"]
  625 -> "625R458d" [label="[IDENTIFIER]", style=solid]
 "625R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  625 -> "625R710d" [label="[\"decltype\"]", style=solid]
 "625R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  625 -> "625R710" [label="[]", style=solid]
 "625R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  626 [label="State 626\n\l212 declarator: noptr-declarator parameters-and-qualifiers trailing-return-type •\l"]
  626 -> "626R212" [style=solid]
 "626R212" [label="R212", fillcolor=3, shape=diamond, style=filled]
  627 [label="State 627\n\l424 member-specification: access-specifier \":\" • member-specification-opt\l"]
  627 -> 7 [style=solid label="\"template\""]
  627 -> 351 [style=solid label="\"private\""]
  627 -> 352 [style=solid label="\"protected\""]
  627 -> 353 [style=solid label="\"public\""]
  627 -> 10 [style=solid label="\"using\""]
  627 -> 11 [style=solid label="\";\""]
  627 -> 354 [style=solid label="\"enum\""]
  627 -> 23 [style=solid label="\"explicit\""]
  627 -> 41 [style=solid label="\"static_assert\""]
  627 -> 355 [style=dashed label="access-specifier"]
  627 -> 356 [style=dashed label="alias-declaration"]
  627 -> 177 [style=dashed label="attribute-specifier-seq"]
  627 -> 357 [style=dashed label="attribute-specifier-seq-opt"]
  627 -> 358 [style=dashed label="deduction-guide"]
  627 -> 359 [style=dashed label="empty-declaration"]
  627 -> 360 [style=dashed label="enum-key"]
  627 -> 361 [style=dashed label="explicit-specialization"]
  627 -> 362 [style=dashed label="explicit-specifier"]
  627 -> 76 [style=dashed label="explicit-specifier-opt"]
  627 -> 363 [style=dashed label="function-definition"]
  627 -> 364 [style=dashed label="member-declaration"]
  627 -> 365 [style=dashed label="member-specification"]
  627 -> 863 [style=dashed label="member-specification-opt"]
  627 -> 367 [style=dashed label="opaque-enum-declaration"]
  627 -> 368 [style=dashed label="static_assert-declaration"]
  627 -> 369 [style=dashed label="template-declaration"]
  627 -> 101 [style=dashed label="template-head"]
  627 -> 370 [style=dashed label="using-declaration"]
  627 -> 371 [style=dashed label="using-enum-declaration"]
  627 -> "627R83d" [label="[\";\", \"enum\", \"explicit\"]", style=solid]
 "627R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  627 -> "627R83" [style=solid]
 "627R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  627 -> "627R268d" [label="[IDENTIFIER]", style=solid]
 "627R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  627 -> "627R425" [label="[\"}\"]", style=solid]
 "627R425" [label="R425", fillcolor=3, shape=diamond, style=filled]
  628 [label="State 628\n\l327 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt • declarator virt-specifier-seq-opt function-body\l328                    | attribute-specifier-seq-opt decl-specifier-seq-opt • declarator requires-clause function-body\l404 member-declaration: attribute-specifier-seq-opt decl-specifier-seq-opt • member-declarator-list-opt \";\"\l"]
  628 -> 156 [style=solid label="\"...\""]
  628 -> 864 [style=solid label="IDENTIFIER"]
  628 -> 6 [style=solid label="\"::\""]
  628 -> 159 [style=solid label="\"(\""]
  628 -> 160 [style=solid label="\"&\""]
  628 -> 163 [style=solid label="\"&&\""]
  628 -> 21 [style=solid label="\"decltype\""]
  628 -> 164 [style=solid label="\"*\""]
  628 -> 165 [style=dashed label="ELLIPSIS-opt"]
  628 -> 865 [style=dashed label="IDENTIFIER-opt"]
  628 -> 55 [style=dashed label="class-name"]
  628 -> 866 [style=dashed label="declarator"]
  628 -> 171 [style=dashed label="declarator-id"]
  628 -> 121 [style=dashed label="decltype-specifier"]
  628 -> 71 [style=dashed label="enum-name"]
  628 -> 867 [style=dashed label="member-declarator"]
  628 -> 868 [style=dashed label="member-declarator-list"]
  628 -> 869 [style=dashed label="member-declarator-list-opt"]
  628 -> 85 [style=dashed label="namespace-alias"]
  628 -> 88 [style=dashed label="namespace-name"]
  628 -> 187 [style=dashed label="nested-name-specifier"]
  628 -> 173 [style=dashed label="noptr-declarator"]
  628 -> 174 [style=dashed label="ptr-declarator"]
  628 -> 175 [style=dashed label="ptr-operator"]
  628 -> 96 [style=dashed label="simple-template-id"]
  628 -> 102 [style=dashed label="template-name"]
  628 -> 106 [style=dashed label="type-name"]
  628 -> 108 [style=dashed label="typedef-name"]
  628 -> "628R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "628R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  628 -> "628R5" [label="[\"operator\", \"~\"]", style=solid]
 "628R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  628 -> "628R11" [style=solid]
 "628R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  628 -> "628R421" [label="[\";\"]", style=solid]
 "628R421" [label="R421", fillcolor=3, shape=diamond, style=filled]
  629 [label="State 629\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l496 opaque-enum-declaration: enum-key attribute-specifier-seq-opt • enum-head-name enum-base-opt \";\"\l"]
  629 -> 4 [style=solid label="IDENTIFIER"]
  629 -> 6 [style=solid label="\"::\""]
  629 -> 158 [style=solid label="\"alignas\""]
  629 -> 162 [style=solid label="\"[\""]
  629 -> 21 [style=solid label="\"decltype\""]
  629 -> 166 [style=dashed label="alignment-specifier"]
  629 -> 167 [style=dashed label="attribute-specifier"]
  629 -> 55 [style=dashed label="class-name"]
  629 -> 121 [style=dashed label="decltype-specifier"]
  629 -> 870 [style=dashed label="enum-head-name"]
  629 -> 71 [style=dashed label="enum-name"]
  629 -> 85 [style=dashed label="namespace-alias"]
  629 -> 88 [style=dashed label="namespace-name"]
  629 -> 133 [style=dashed label="nested-name-specifier"]
  629 -> 396 [style=dashed label="nested-name-specifier-opt"]
  629 -> 96 [style=dashed label="simple-template-id"]
  629 -> 102 [style=dashed label="template-name"]
  629 -> 106 [style=dashed label="type-name"]
  629 -> 108 [style=dashed label="typedef-name"]
  629 -> "629R458d" [label="[IDENTIFIER]", style=solid]
 "629R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  630 [label="State 630\n\l423 member-specification: member-declaration member-specification-opt •\l"]
  630 -> "630R423" [style=solid]
 "630R423" [label="R423", fillcolor=3, shape=diamond, style=filled]
  631 [label="State 631\n\l142 class-specifier: class-head \"{\" member-specification-opt \"}\" •\l"]
  631 -> "631R142" [style=solid]
 "631R142" [label="R142", fillcolor=3, shape=diamond, style=filled]
  632 [label="State 632\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l102 base-specifier: attribute-specifier-seq-opt • class-or-decltype\l103               | attribute-specifier-seq-opt • \"virtual\" access-specifier-opt class-or-decltype\l104               | attribute-specifier-seq-opt • access-specifier VIRTUAL-opt class-or-decltype\l"]
  632 -> 4 [style=solid label="IDENTIFIER"]
  632 -> 6 [style=solid label="\"::\""]
  632 -> 871 [style=solid label="\"virtual\""]
  632 -> 351 [style=solid label="\"private\""]
  632 -> 352 [style=solid label="\"protected\""]
  632 -> 353 [style=solid label="\"public\""]
  632 -> 158 [style=solid label="\"alignas\""]
  632 -> 162 [style=solid label="\"[\""]
  632 -> 21 [style=solid label="\"decltype\""]
  632 -> 872 [style=dashed label="access-specifier"]
  632 -> 166 [style=dashed label="alignment-specifier"]
  632 -> 167 [style=dashed label="attribute-specifier"]
  632 -> 55 [style=dashed label="class-name"]
  632 -> 873 [style=dashed label="class-or-decltype"]
  632 -> 874 [style=dashed label="decltype-specifier"]
  632 -> 71 [style=dashed label="enum-name"]
  632 -> 85 [style=dashed label="namespace-alias"]
  632 -> 88 [style=dashed label="namespace-name"]
  632 -> 875 [style=dashed label="nested-name-specifier"]
  632 -> 876 [style=dashed label="nested-name-specifier-opt"]
  632 -> 96 [style=dashed label="simple-template-id"]
  632 -> 102 [style=dashed label="template-name"]
  632 -> 106 [style=dashed label="type-name"]
  632 -> 108 [style=dashed label="typedef-name"]
  632 -> "632R458d" [label="[IDENTIFIER]", style=solid]
 "632R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  633 [label="State 633\n\l105 base-specifier-list: base-specifier • ELLIPSIS-opt\l"]
  633 -> 156 [style=solid label="\"...\""]
  633 -> 877 [style=dashed label="ELLIPSIS-opt"]
  633 -> "633R5" [style=solid]
 "633R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  634 [label="State 634\n\l 99 base-clause: \":\" base-specifier-list •\l106 base-specifier-list: base-specifier-list • \",\" base-specifier ELLIPSIS-opt\l"]
  634 -> 878 [style=solid label="\",\""]
  634 -> "634R99" [style=solid]
 "634R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
  635 [label="State 635\n\l143 class-virt-specifier: \"final\" •\l"]
  635 -> "635R143" [style=solid]
 "635R143" [label="R143", fillcolor=3, shape=diamond, style=filled]
  636 [label="State 636\n\l145 class-virt-specifier-opt: class-virt-specifier •\l"]
  636 -> "636R145" [style=solid]
 "636R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  637 [label="State 637\n\l131 class-head: class-key attribute-specifier-seq-opt class-head-name class-virt-specifier-opt • base-clause-opt\l"]
  637 -> 372 [style=solid label="\":\""]
  637 -> 373 [style=dashed label="base-clause"]
  637 -> 879 [style=dashed label="base-clause-opt"]
  637 -> "637R100" [style=solid]
 "637R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
  638 [label="State 638\n\l137 class-name: IDENTIFIER •\l229 elaborated-type-specifier: class-key attribute-specifier-seq-opt nested-name-specifier-opt IDENTIFIER •\l696 template-name: IDENTIFIER •\l"]
  638 -> "638R137" [label="[\":\", \"{\", \"final\"]", style=solid]
 "638R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  638 -> "638R229d" [label="[\":\", \"{\"]", style=solid]
 "638R229d" [label="R229", fillcolor=5, shape=diamond, style=filled]
  638 -> "638R229" [style=solid]
 "638R229" [label="R229", fillcolor=3, shape=diamond, style=filled]
  638 -> "638R696" [label="[\"<\"]", style=solid]
 "638R696" [label="R696", fillcolor=3, shape=diamond, style=filled]
  639 [label="State 639\n\l133 class-head-name: nested-name-specifier-opt class-name •\l"]
  639 -> "639R133" [style=solid]
 "639R133" [label="R133", fillcolor=3, shape=diamond, style=filled]
  640 [label="State 640\n\l138 class-name: simple-template-id •\l"]
  640 -> "640R138" [style=solid]
 "640R138" [label="R138", fillcolor=3, shape=diamond, style=filled]
  641 [label="State 641\n\l231 elaborated-type-specifier: class-key nested-name-specifier TEMPLATE-opt simple-template-id •\l457 nested-name-specifier: nested-name-specifier TEMPLATE-opt simple-template-id • \"::\"\l"]
  641 -> 673 [style=solid label="\"::\""]
  641 -> "641R231d" [label="[\"::\"]", style=solid]
 "641R231d" [label="R231", fillcolor=5, shape=diamond, style=filled]
  641 -> "641R231" [style=solid]
 "641R231" [label="R231", fillcolor=3, shape=diamond, style=filled]
  642 [label="State 642\n\l361 initializer-clause: assignment-expression •\l"]
  642 -> "642R361" [style=solid]
 "642R361" [label="R361", fillcolor=3, shape=diamond, style=filled]
  643 [label="State 643\n\l362 initializer-clause: braced-init-list •\l"]
  643 -> "643R362" [style=solid]
 "643R362" [label="R362", fillcolor=3, shape=diamond, style=filled]
  644 [label="State 644\n\l116 brace-or-equal-initializer: \"=\" initializer-clause •\l"]
  644 -> "644R116" [style=solid]
 "644R116" [label="R116", fillcolor=3, shape=diamond, style=filled]
  645 [label="State 645\n\l360 initializer: \"(\" expression-list • \")\"\l"]
  645 -> 880 [style=solid label="\")\""]
  646 [label="State 646\n\l363 initializer-list: initializer-clause • ELLIPSIS-opt\l"]
  646 -> 156 [style=solid label="\"...\""]
  646 -> 881 [style=dashed label="ELLIPSIS-opt"]
  646 -> "646R5" [style=solid]
 "646R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  647 [label="State 647\n\l279 expression-list: initializer-list •\l364 initializer-list: initializer-list • \",\" initializer-clause ELLIPSIS-opt\l"]
  647 -> 882 [style=solid label="\",\""]
  647 -> "647R279" [style=solid]
 "647R279" [label="R279", fillcolor=3, shape=diamond, style=filled]
  648 [label="State 648\n\l122 braced-init-list: \"{\" \"}\" •\l"]
  648 -> "648R122" [style=solid]
 "648R122" [label="R122", fillcolor=3, shape=diamond, style=filled]
  649 [label="State 649\n\l227 designator: \".\" • IDENTIFIER\l"]
  649 -> 883 [style=solid label="IDENTIFIER"]
  650 [label="State 650\n\l225 designated-initializer-list: designated-initializer-clause •\l"]
  650 -> "650R225" [style=solid]
 "650R225" [label="R225", fillcolor=3, shape=diamond, style=filled]
  651 [label="State 651\n\l121 braced-init-list: \"{\" designated-initializer-list • COMMA-opt \"}\"\l226 designated-initializer-list: designated-initializer-list • \",\" designated-initializer-clause\l"]
  651 -> 884 [style=solid label="\",\""]
  651 -> 885 [style=dashed label="COMMA-opt"]
  651 -> "651R1" [style=solid]
 "651R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  652 [label="State 652\n\l224 designated-initializer-clause: designator • brace-or-equal-initializer\l"]
  652 -> 378 [style=solid label="\"=\""]
  652 -> 380 [style=solid label="\"{\""]
  652 -> 886 [style=dashed label="brace-or-equal-initializer"]
  652 -> 383 [style=dashed label="braced-init-list"]
  653 [label="State 653\n\l120 braced-init-list: \"{\" initializer-list • COMMA-opt \"}\"\l364 initializer-list: initializer-list • \",\" initializer-clause ELLIPSIS-opt\l"]
  653 -> 887 [style=solid label="\",\""]
  653 -> 888 [style=dashed label="COMMA-opt"]
  653 -> "653R1" [style=solid]
 "653R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  654 [label="State 654\n\l285 fold-expression: \"(\" • cast-expression fold-operator \"...\" \")\"\l286                | \"(\" • \"...\" fold-operator cast-expression \")\"\l287                | \"(\" • cast-expression fold-operator \"...\" fold-operator cast-expression \")\"\l579 primary-expression: \"(\" • expression \")\"\l"]
  654 -> 439 [style=solid label="\"...\""]
  654 -> 238 [style=solid label="IDENTIFIER"]
  654 -> 239 [style=solid label="\"noexcept\""]
  654 -> 240 [style=solid label="\"!\""]
  654 -> 241 [style=solid label="\"::\""]
  654 -> 242 [style=solid label="\"this\""]
  654 -> 8 [style=solid label="\"typename\""]
  654 -> 243 [style=solid label="\"+\""]
  654 -> 244 [style=solid label="\"-\""]
  654 -> 245 [style=solid label="\"(\""]
  654 -> 246 [style=solid label="\"&\""]
  654 -> 247 [style=solid label="\"[\""]
  654 -> 248 [style=solid label="\"co_await\""]
  654 -> 249 [style=solid label="\"operator\""]
  654 -> 21 [style=solid label="\"decltype\""]
  654 -> 250 [style=solid label="\"*\""]
  654 -> 251 [style=solid label="\"requires\""]
  654 -> 252 [style=solid label="\"~\""]
  654 -> 253 [style=solid label="\"++\""]
  654 -> 254 [style=solid label="\"--\""]
  654 -> 255 [style=solid label="\"dynamic_cast\""]
  654 -> 256 [style=solid label="\"static_cast\""]
  654 -> 257 [style=solid label="\"reinterpret_cast\""]
  654 -> 258 [style=solid label="\"const_cast\""]
  654 -> 259 [style=solid label="\"typeid\""]
  654 -> 260 [style=solid label="\"literal\""]
  654 -> 27 [style=solid label="\"char\""]
  654 -> 28 [style=solid label="\"char8_t\""]
  654 -> 29 [style=solid label="\"char16_t\""]
  654 -> 30 [style=solid label="\"char32_t\""]
  654 -> 31 [style=solid label="\"wchar_t\""]
  654 -> 32 [style=solid label="\"bool\""]
  654 -> 33 [style=solid label="\"short\""]
  654 -> 34 [style=solid label="\"int\""]
  654 -> 35 [style=solid label="\"long\""]
  654 -> 36 [style=solid label="\"signed\""]
  654 -> 37 [style=solid label="\"unsigned\""]
  654 -> 38 [style=solid label="\"float\""]
  654 -> 39 [style=solid label="\"double\""]
  654 -> 40 [style=solid label="\"void\""]
  654 -> 118 [style=solid label="STRING_LITERAL"]
  654 -> 261 [style=solid label="\"throw\""]
  654 -> 262 [style=solid label="\"sizeof\""]
  654 -> 263 [style=solid label="\"alignof\""]
  654 -> 264 [style=solid label="\"co_yield\""]
  654 -> 265 [style=dashed label="SCOPE-opt"]
  654 -> 266 [style=dashed label="additive-expression"]
  654 -> 267 [style=dashed label="and-expression"]
  654 -> 268 [style=dashed label="assignment-expression"]
  654 -> 269 [style=dashed label="await-expression"]
  654 -> 440 [style=dashed label="cast-expression"]
  654 -> 55 [style=dashed label="class-name"]
  654 -> 271 [style=dashed label="compare-expression"]
  654 -> 272 [style=dashed label="conditional-expression"]
  654 -> 273 [style=dashed label="conversion-function-id"]
  654 -> 63 [style=dashed label="decltype-specifier"]
  654 -> 274 [style=dashed label="delete-expression"]
  654 -> 71 [style=dashed label="enum-name"]
  654 -> 275 [style=dashed label="equality-expression"]
  654 -> 276 [style=dashed label="exclusive-or-expression"]
  654 -> 441 [style=dashed label="expression"]
  654 -> 278 [style=dashed label="fold-expression"]
  654 -> 279 [style=dashed label="id-expression"]
  654 -> 280 [style=dashed label="inclusive-or-expression"]
  654 -> 281 [style=dashed label="lambda-expression"]
  654 -> 282 [style=dashed label="lambda-introducer"]
  654 -> 283 [style=dashed label="literal-operator-id"]
  654 -> 284 [style=dashed label="logical-and-expression"]
  654 -> 285 [style=dashed label="logical-or-expression"]
  654 -> 286 [style=dashed label="multiplicative-expression"]
  654 -> 85 [style=dashed label="namespace-alias"]
  654 -> 88 [style=dashed label="namespace-name"]
  654 -> 287 [style=dashed label="nested-name-specifier"]
  654 -> 90 [style=dashed label="nested-name-specifier-opt"]
  654 -> 288 [style=dashed label="new-expression"]
  654 -> 289 [style=dashed label="noexcept-expression"]
  654 -> 290 [style=dashed label="operator-function-id"]
  654 -> 94 [style=dashed label="placeholder-type-specifier"]
  654 -> 291 [style=dashed label="pm-expression"]
  654 -> 292 [style=dashed label="postfix-expression"]
  654 -> 293 [style=dashed label="primary-expression"]
  654 -> 294 [style=dashed label="qualified-id"]
  654 -> 295 [style=dashed label="relational-expression"]
  654 -> 296 [style=dashed label="requires-expression"]
  654 -> 297 [style=dashed label="shift-expression"]
  654 -> 298 [style=dashed label="simple-template-id"]
  654 -> 299 [style=dashed label="simple-type-specifier"]
  654 -> 300 [style=dashed label="string-literal"]
  654 -> 301 [style=dashed label="template-id"]
  654 -> 102 [style=dashed label="template-name"]
  654 -> 302 [style=dashed label="throw-expression"]
  654 -> 104 [style=dashed label="type-constraint"]
  654 -> 105 [style=dashed label="type-constraint-opt"]
  654 -> 106 [style=dashed label="type-name"]
  654 -> 108 [style=dashed label="typedef-name"]
  654 -> 303 [style=dashed label="typename-specifier"]
  654 -> 304 [style=dashed label="unary-expression"]
  654 -> 305 [style=dashed label="unary-operator"]
  654 -> 306 [style=dashed label="unqualified-id"]
  654 -> 307 [style=dashed label="yield-expression"]
  654 -> "654R19" [style=solid]
 "654R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  654 -> "654R458d" [label="[IDENTIFIER]", style=solid]
 "654R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  654 -> "654R710d" [label="[\"decltype\"]", style=solid]
 "654R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  654 -> "654R710" [label="[\"auto\"]", style=solid]
 "654R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  655 [label="State 655\n\l163 constraint-logical-and-expression: constraint-logical-and-expression • \"&&\" primary-expression\l164 constraint-logical-or-expression: constraint-logical-and-expression •\l"]
  655 -> 889 [style=solid label="\"&&\""]
  655 -> "655R164d" [label="[\"&&\"]", style=solid]
 "655R164d" [label="R164", fillcolor=5, shape=diamond, style=filled]
  655 -> "655R164" [style=solid]
 "655R164" [label="R164", fillcolor=3, shape=diamond, style=filled]
  656 [label="State 656\n\l165 constraint-logical-or-expression: constraint-logical-or-expression • \"||\" constraint-logical-and-expression\l621 requires-clause: \"requires\" constraint-logical-or-expression •\l"]
  656 -> 890 [style=solid label="\"||\""]
  656 -> "656R621" [style=solid]
 "656R621" [label="R621", fillcolor=3, shape=diamond, style=filled]
  657 [label="State 657\n\l162 constraint-logical-and-expression: primary-expression •\l"]
  657 -> "657R162" [style=solid]
 "657R162" [label="R162", fillcolor=3, shape=diamond, style=filled]
  658 [label="State 658\n\l351 init-declarator-list: init-declarator-list \",\" init-declarator •\l"]
  658 -> "658R351" [style=solid]
 "658R351" [label="R351", fillcolor=3, shape=diamond, style=filled]
  659 [label="State 659\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l249 enumerator: IDENTIFIER attribute-specifier-seq-opt •\l"]
  659 -> 158 [style=solid label="\"alignas\""]
  659 -> 162 [style=solid label="\"[\""]
  659 -> 166 [style=dashed label="alignment-specifier"]
  659 -> 167 [style=dashed label="attribute-specifier"]
  659 -> "659R249" [style=solid]
 "659R249" [label="R249", fillcolor=3, shape=diamond, style=filled]
  660 [label="State 660\n\l251 enumerator-definition: enumerator \"=\" • constant-expression\l"]
  660 -> 238 [style=solid label="IDENTIFIER"]
  660 -> 239 [style=solid label="\"noexcept\""]
  660 -> 240 [style=solid label="\"!\""]
  660 -> 241 [style=solid label="\"::\""]
  660 -> 242 [style=solid label="\"this\""]
  660 -> 8 [style=solid label="\"typename\""]
  660 -> 243 [style=solid label="\"+\""]
  660 -> 244 [style=solid label="\"-\""]
  660 -> 245 [style=solid label="\"(\""]
  660 -> 246 [style=solid label="\"&\""]
  660 -> 247 [style=solid label="\"[\""]
  660 -> 248 [style=solid label="\"co_await\""]
  660 -> 249 [style=solid label="\"operator\""]
  660 -> 21 [style=solid label="\"decltype\""]
  660 -> 250 [style=solid label="\"*\""]
  660 -> 251 [style=solid label="\"requires\""]
  660 -> 252 [style=solid label="\"~\""]
  660 -> 253 [style=solid label="\"++\""]
  660 -> 254 [style=solid label="\"--\""]
  660 -> 255 [style=solid label="\"dynamic_cast\""]
  660 -> 256 [style=solid label="\"static_cast\""]
  660 -> 257 [style=solid label="\"reinterpret_cast\""]
  660 -> 258 [style=solid label="\"const_cast\""]
  660 -> 259 [style=solid label="\"typeid\""]
  660 -> 260 [style=solid label="\"literal\""]
  660 -> 27 [style=solid label="\"char\""]
  660 -> 28 [style=solid label="\"char8_t\""]
  660 -> 29 [style=solid label="\"char16_t\""]
  660 -> 30 [style=solid label="\"char32_t\""]
  660 -> 31 [style=solid label="\"wchar_t\""]
  660 -> 32 [style=solid label="\"bool\""]
  660 -> 33 [style=solid label="\"short\""]
  660 -> 34 [style=solid label="\"int\""]
  660 -> 35 [style=solid label="\"long\""]
  660 -> 36 [style=solid label="\"signed\""]
  660 -> 37 [style=solid label="\"unsigned\""]
  660 -> 38 [style=solid label="\"float\""]
  660 -> 39 [style=solid label="\"double\""]
  660 -> 40 [style=solid label="\"void\""]
  660 -> 118 [style=solid label="STRING_LITERAL"]
  660 -> 262 [style=solid label="\"sizeof\""]
  660 -> 263 [style=solid label="\"alignof\""]
  660 -> 265 [style=dashed label="SCOPE-opt"]
  660 -> 266 [style=dashed label="additive-expression"]
  660 -> 267 [style=dashed label="and-expression"]
  660 -> 269 [style=dashed label="await-expression"]
  660 -> 270 [style=dashed label="cast-expression"]
  660 -> 55 [style=dashed label="class-name"]
  660 -> 271 [style=dashed label="compare-expression"]
  660 -> 309 [style=dashed label="conditional-expression"]
  660 -> 891 [style=dashed label="constant-expression"]
  660 -> 273 [style=dashed label="conversion-function-id"]
  660 -> 63 [style=dashed label="decltype-specifier"]
  660 -> 274 [style=dashed label="delete-expression"]
  660 -> 71 [style=dashed label="enum-name"]
  660 -> 275 [style=dashed label="equality-expression"]
  660 -> 276 [style=dashed label="exclusive-or-expression"]
  660 -> 278 [style=dashed label="fold-expression"]
  660 -> 279 [style=dashed label="id-expression"]
  660 -> 280 [style=dashed label="inclusive-or-expression"]
  660 -> 281 [style=dashed label="lambda-expression"]
  660 -> 282 [style=dashed label="lambda-introducer"]
  660 -> 283 [style=dashed label="literal-operator-id"]
  660 -> 284 [style=dashed label="logical-and-expression"]
  660 -> 311 [style=dashed label="logical-or-expression"]
  660 -> 286 [style=dashed label="multiplicative-expression"]
  660 -> 85 [style=dashed label="namespace-alias"]
  660 -> 88 [style=dashed label="namespace-name"]
  660 -> 287 [style=dashed label="nested-name-specifier"]
  660 -> 90 [style=dashed label="nested-name-specifier-opt"]
  660 -> 288 [style=dashed label="new-expression"]
  660 -> 289 [style=dashed label="noexcept-expression"]
  660 -> 290 [style=dashed label="operator-function-id"]
  660 -> 94 [style=dashed label="placeholder-type-specifier"]
  660 -> 291 [style=dashed label="pm-expression"]
  660 -> 292 [style=dashed label="postfix-expression"]
  660 -> 293 [style=dashed label="primary-expression"]
  660 -> 294 [style=dashed label="qualified-id"]
  660 -> 295 [style=dashed label="relational-expression"]
  660 -> 296 [style=dashed label="requires-expression"]
  660 -> 297 [style=dashed label="shift-expression"]
  660 -> 298 [style=dashed label="simple-template-id"]
  660 -> 299 [style=dashed label="simple-type-specifier"]
  660 -> 300 [style=dashed label="string-literal"]
  660 -> 301 [style=dashed label="template-id"]
  660 -> 102 [style=dashed label="template-name"]
  660 -> 104 [style=dashed label="type-constraint"]
  660 -> 105 [style=dashed label="type-constraint-opt"]
  660 -> 106 [style=dashed label="type-name"]
  660 -> 108 [style=dashed label="typedef-name"]
  660 -> 303 [style=dashed label="typename-specifier"]
  660 -> 304 [style=dashed label="unary-expression"]
  660 -> 305 [style=dashed label="unary-operator"]
  660 -> 306 [style=dashed label="unqualified-id"]
  660 -> "660R19" [style=solid]
 "660R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  660 -> "660R458d" [label="[IDENTIFIER]", style=solid]
 "660R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  660 -> "660R710d" [label="[\"decltype\"]", style=solid]
 "660R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  660 -> "660R710" [label="[\"auto\"]", style=solid]
 "660R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  661 [label="State 661\n\l248 enum-specifier: enum-head \"{\" enumerator-list \",\" • \"}\"\l253 enumerator-list: enumerator-list \",\" • enumerator-definition\l"]
  661 -> 389 [style=solid label="IDENTIFIER"]
  661 -> 892 [style=solid label="\"}\""]
  661 -> 390 [style=dashed label="enumerator"]
  661 -> 893 [style=dashed label="enumerator-definition"]
  662 [label="State 662\n\l247 enum-specifier: enum-head \"{\" enumerator-list-opt \"}\" •\l"]
  662 -> "662R247" [style=solid]
 "662R247" [label="R247", fillcolor=3, shape=diamond, style=filled]
  663 [label="State 663\n\l236 enum-base: \":\" • type-specifier-seq\l"]
  663 -> 4 [style=solid label="IDENTIFIER"]
  663 -> 6 [style=solid label="\"::\""]
  663 -> 8 [style=solid label="\"typename\""]
  663 -> 12 [style=solid label="\"class\""]
  663 -> 13 [style=solid label="\"struct\""]
  663 -> 14 [style=solid label="\"union\""]
  663 -> 15 [style=solid label="\"const\""]
  663 -> 16 [style=solid label="\"volatile\""]
  663 -> 21 [style=solid label="\"decltype\""]
  663 -> 125 [style=solid label="\"enum\""]
  663 -> 27 [style=solid label="\"char\""]
  663 -> 28 [style=solid label="\"char8_t\""]
  663 -> 29 [style=solid label="\"char16_t\""]
  663 -> 30 [style=solid label="\"char32_t\""]
  663 -> 31 [style=solid label="\"wchar_t\""]
  663 -> 32 [style=solid label="\"bool\""]
  663 -> 33 [style=solid label="\"short\""]
  663 -> 34 [style=solid label="\"int\""]
  663 -> 35 [style=solid label="\"long\""]
  663 -> 36 [style=solid label="\"signed\""]
  663 -> 37 [style=solid label="\"unsigned\""]
  663 -> 38 [style=solid label="\"float\""]
  663 -> 39 [style=solid label="\"double\""]
  663 -> 40 [style=solid label="\"void\""]
  663 -> 406 [style=dashed label="class-key"]
  663 -> 55 [style=dashed label="class-name"]
  663 -> 57 [style=dashed label="cv-qualifier"]
  663 -> 63 [style=dashed label="decltype-specifier"]
  663 -> 66 [style=dashed label="elaborated-enum-specifier"]
  663 -> 67 [style=dashed label="elaborated-type-specifier"]
  663 -> 71 [style=dashed label="enum-name"]
  663 -> 85 [style=dashed label="namespace-alias"]
  663 -> 88 [style=dashed label="namespace-name"]
  663 -> 89 [style=dashed label="nested-name-specifier"]
  663 -> 90 [style=dashed label="nested-name-specifier-opt"]
  663 -> 94 [style=dashed label="placeholder-type-specifier"]
  663 -> 96 [style=dashed label="simple-template-id"]
  663 -> 97 [style=dashed label="simple-type-specifier"]
  663 -> 102 [style=dashed label="template-name"]
  663 -> 104 [style=dashed label="type-constraint"]
  663 -> 105 [style=dashed label="type-constraint-opt"]
  663 -> 106 [style=dashed label="type-name"]
  663 -> 414 [style=dashed label="type-specifier"]
  663 -> 894 [style=dashed label="type-specifier-seq"]
  663 -> 108 [style=dashed label="typedef-name"]
  663 -> 109 [style=dashed label="typename-specifier"]
  663 -> "663R458d" [label="[IDENTIFIER]", style=solid]
 "663R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  663 -> "663R710d" [label="[\"decltype\"]", style=solid]
 "663R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  663 -> "663R710" [label="[]", style=solid]
 "663R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  664 [label="State 664\n\l238 enum-base-opt: enum-base •\l"]
  664 -> "664R238" [style=solid]
 "664R238" [label="R238", fillcolor=3, shape=diamond, style=filled]
  665 [label="State 665\n\l496 opaque-enum-declaration: enum-key attribute-specifier-seq-opt enum-head-name enum-base-opt • \";\"\l"]
  665 -> 895 [style=solid label="\";\""]
  666 [label="State 666\n\l239 enum-head: enum-key attribute-specifier-seq-opt enum-head-name-opt enum-base-opt •\l"]
  666 -> "666R239" [style=solid]
 "666R239" [label="R239", fillcolor=3, shape=diamond, style=filled]
  667 [label="State 667\n\l240 enum-head-name: nested-name-specifier-opt IDENTIFIER •\l"]
  667 -> "667R240" [style=solid]
 "667R240" [label="R240", fillcolor=3, shape=diamond, style=filled]
  668 [label="State 668\n\l215 deduction-guide: explicit-specifier-opt template-name \"(\" parameter-declaration-clause • \")\" \"->\" simple-template-id \";\"\l"]
  668 -> 896 [style=solid label="\")\""]
  669 [label="State 669\n\l427 module-declaration: EXPORT-opt \"module\" module-name • module-partition-opt attribute-specifier-seq-opt \";\"\l"]
  669 -> 138 [style=solid label="\":\""]
  669 -> 897 [style=dashed label="module-partition"]
  669 -> 898 [style=dashed label="module-partition-opt"]
  669 -> "669R437" [style=solid]
 "669R437" [label="R437", fillcolor=3, shape=diamond, style=filled]
  670 [label="State 670\n\l584 private-module-fragment: \"module\" • \":\" \"private\" \";\" declaration-seq-opt\l"]
  670 -> 899 [style=solid label="\":\""]
  671 [label="State 671\n\l586 private-module-fragment-opt: private-module-fragment •\l"]
  671 -> "671R586" [style=solid]
 "671R586" [label="R586", fillcolor=3, shape=diamond, style=filled]
  672 [label="State 672\n\l706 translation-unit: global-module-fragment-opt module-declaration declaration-seq-opt private-module-fragment-opt •\l"]
  672 -> "672R706" [style=solid]
 "672R706" [label="R706", fillcolor=3, shape=diamond, style=filled]
  673 [label="State 673\n\l457 nested-name-specifier: nested-name-specifier TEMPLATE-opt simple-template-id \"::\" •\l"]
  673 -> "673R457" [style=solid]
 "673R457" [label="R457", fillcolor=3, shape=diamond, style=filled]
  674 [label="State 674\n\l709 type-constraint: nested-name-specifier-opt concept-name \"<\" template-argument-list-opt • \">\"\l"]
  674 -> 900 [style=solid label="\">\""]
  675 [label="State 675\n\l150 concept-definition: \"concept\" concept-name \"=\" • constraint-expression \";\"\l"]
  675 -> 238 [style=solid label="IDENTIFIER"]
  675 -> 239 [style=solid label="\"noexcept\""]
  675 -> 240 [style=solid label="\"!\""]
  675 -> 241 [style=solid label="\"::\""]
  675 -> 242 [style=solid label="\"this\""]
  675 -> 8 [style=solid label="\"typename\""]
  675 -> 243 [style=solid label="\"+\""]
  675 -> 244 [style=solid label="\"-\""]
  675 -> 245 [style=solid label="\"(\""]
  675 -> 246 [style=solid label="\"&\""]
  675 -> 247 [style=solid label="\"[\""]
  675 -> 248 [style=solid label="\"co_await\""]
  675 -> 249 [style=solid label="\"operator\""]
  675 -> 21 [style=solid label="\"decltype\""]
  675 -> 250 [style=solid label="\"*\""]
  675 -> 251 [style=solid label="\"requires\""]
  675 -> 252 [style=solid label="\"~\""]
  675 -> 253 [style=solid label="\"++\""]
  675 -> 254 [style=solid label="\"--\""]
  675 -> 255 [style=solid label="\"dynamic_cast\""]
  675 -> 256 [style=solid label="\"static_cast\""]
  675 -> 257 [style=solid label="\"reinterpret_cast\""]
  675 -> 258 [style=solid label="\"const_cast\""]
  675 -> 259 [style=solid label="\"typeid\""]
  675 -> 260 [style=solid label="\"literal\""]
  675 -> 27 [style=solid label="\"char\""]
  675 -> 28 [style=solid label="\"char8_t\""]
  675 -> 29 [style=solid label="\"char16_t\""]
  675 -> 30 [style=solid label="\"char32_t\""]
  675 -> 31 [style=solid label="\"wchar_t\""]
  675 -> 32 [style=solid label="\"bool\""]
  675 -> 33 [style=solid label="\"short\""]
  675 -> 34 [style=solid label="\"int\""]
  675 -> 35 [style=solid label="\"long\""]
  675 -> 36 [style=solid label="\"signed\""]
  675 -> 37 [style=solid label="\"unsigned\""]
  675 -> 38 [style=solid label="\"float\""]
  675 -> 39 [style=solid label="\"double\""]
  675 -> 40 [style=solid label="\"void\""]
  675 -> 118 [style=solid label="STRING_LITERAL"]
  675 -> 262 [style=solid label="\"sizeof\""]
  675 -> 263 [style=solid label="\"alignof\""]
  675 -> 265 [style=dashed label="SCOPE-opt"]
  675 -> 266 [style=dashed label="additive-expression"]
  675 -> 267 [style=dashed label="and-expression"]
  675 -> 269 [style=dashed label="await-expression"]
  675 -> 270 [style=dashed label="cast-expression"]
  675 -> 55 [style=dashed label="class-name"]
  675 -> 271 [style=dashed label="compare-expression"]
  675 -> 901 [style=dashed label="constraint-expression"]
  675 -> 273 [style=dashed label="conversion-function-id"]
  675 -> 63 [style=dashed label="decltype-specifier"]
  675 -> 274 [style=dashed label="delete-expression"]
  675 -> 71 [style=dashed label="enum-name"]
  675 -> 275 [style=dashed label="equality-expression"]
  675 -> 276 [style=dashed label="exclusive-or-expression"]
  675 -> 278 [style=dashed label="fold-expression"]
  675 -> 279 [style=dashed label="id-expression"]
  675 -> 280 [style=dashed label="inclusive-or-expression"]
  675 -> 281 [style=dashed label="lambda-expression"]
  675 -> 282 [style=dashed label="lambda-introducer"]
  675 -> 283 [style=dashed label="literal-operator-id"]
  675 -> 284 [style=dashed label="logical-and-expression"]
  675 -> 902 [style=dashed label="logical-or-expression"]
  675 -> 286 [style=dashed label="multiplicative-expression"]
  675 -> 85 [style=dashed label="namespace-alias"]
  675 -> 88 [style=dashed label="namespace-name"]
  675 -> 287 [style=dashed label="nested-name-specifier"]
  675 -> 90 [style=dashed label="nested-name-specifier-opt"]
  675 -> 288 [style=dashed label="new-expression"]
  675 -> 289 [style=dashed label="noexcept-expression"]
  675 -> 290 [style=dashed label="operator-function-id"]
  675 -> 94 [style=dashed label="placeholder-type-specifier"]
  675 -> 291 [style=dashed label="pm-expression"]
  675 -> 292 [style=dashed label="postfix-expression"]
  675 -> 293 [style=dashed label="primary-expression"]
  675 -> 294 [style=dashed label="qualified-id"]
  675 -> 295 [style=dashed label="relational-expression"]
  675 -> 296 [style=dashed label="requires-expression"]
  675 -> 297 [style=dashed label="shift-expression"]
  675 -> 298 [style=dashed label="simple-template-id"]
  675 -> 299 [style=dashed label="simple-type-specifier"]
  675 -> 300 [style=dashed label="string-literal"]
  675 -> 301 [style=dashed label="template-id"]
  675 -> 102 [style=dashed label="template-name"]
  675 -> 104 [style=dashed label="type-constraint"]
  675 -> 105 [style=dashed label="type-constraint-opt"]
  675 -> 106 [style=dashed label="type-name"]
  675 -> 108 [style=dashed label="typedef-name"]
  675 -> 303 [style=dashed label="typename-specifier"]
  675 -> 304 [style=dashed label="unary-expression"]
  675 -> 305 [style=dashed label="unary-operator"]
  675 -> 306 [style=dashed label="unqualified-id"]
  675 -> "675R19" [style=solid]
 "675R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  675 -> "675R458d" [label="[IDENTIFIER]", style=solid]
 "675R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  675 -> "675R710d" [label="[\"decltype\"]", style=solid]
 "675R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  675 -> "675R710" [label="[\"auto\"]", style=solid]
 "675R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  676 [label="State 676\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l229 elaborated-type-specifier: class-key attribute-specifier-seq-opt • nested-name-specifier-opt IDENTIFIER\l"]
  676 -> 4 [style=solid label="IDENTIFIER"]
  676 -> 6 [style=solid label="\"::\""]
  676 -> 158 [style=solid label="\"alignas\""]
  676 -> 162 [style=solid label="\"[\""]
  676 -> 21 [style=solid label="\"decltype\""]
  676 -> 166 [style=dashed label="alignment-specifier"]
  676 -> 167 [style=dashed label="attribute-specifier"]
  676 -> 55 [style=dashed label="class-name"]
  676 -> 121 [style=dashed label="decltype-specifier"]
  676 -> 71 [style=dashed label="enum-name"]
  676 -> 85 [style=dashed label="namespace-alias"]
  676 -> 88 [style=dashed label="namespace-name"]
  676 -> 133 [style=dashed label="nested-name-specifier"]
  676 -> 903 [style=dashed label="nested-name-specifier-opt"]
  676 -> 96 [style=dashed label="simple-template-id"]
  676 -> 102 [style=dashed label="template-name"]
  676 -> 106 [style=dashed label="type-name"]
  676 -> 108 [style=dashed label="typedef-name"]
  676 -> "676R458d" [label="[IDENTIFIER]", style=solid]
 "676R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  677 [label="State 677\n\l686 template-argument-list: template-argument ELLIPSIS-opt •\l"]
  677 -> "677R686" [style=solid]
 "677R686" [label="R686", fillcolor=3, shape=diamond, style=filled]
  678 [label="State 678\n\l687 template-argument-list: template-argument-list \",\" • template-argument ELLIPSIS-opt\l"]
  678 -> 238 [style=solid label="IDENTIFIER"]
  678 -> 239 [style=solid label="\"noexcept\""]
  678 -> 240 [style=solid label="\"!\""]
  678 -> 241 [style=solid label="\"::\""]
  678 -> 242 [style=solid label="\"this\""]
  678 -> 8 [style=solid label="\"typename\""]
  678 -> 243 [style=solid label="\"+\""]
  678 -> 244 [style=solid label="\"-\""]
  678 -> 245 [style=solid label="\"(\""]
  678 -> 246 [style=solid label="\"&\""]
  678 -> 247 [style=solid label="\"[\""]
  678 -> 248 [style=solid label="\"co_await\""]
  678 -> 12 [style=solid label="\"class\""]
  678 -> 13 [style=solid label="\"struct\""]
  678 -> 14 [style=solid label="\"union\""]
  678 -> 249 [style=solid label="\"operator\""]
  678 -> 15 [style=solid label="\"const\""]
  678 -> 16 [style=solid label="\"volatile\""]
  678 -> 21 [style=solid label="\"decltype\""]
  678 -> 125 [style=solid label="\"enum\""]
  678 -> 250 [style=solid label="\"*\""]
  678 -> 251 [style=solid label="\"requires\""]
  678 -> 252 [style=solid label="\"~\""]
  678 -> 253 [style=solid label="\"++\""]
  678 -> 254 [style=solid label="\"--\""]
  678 -> 255 [style=solid label="\"dynamic_cast\""]
  678 -> 256 [style=solid label="\"static_cast\""]
  678 -> 257 [style=solid label="\"reinterpret_cast\""]
  678 -> 258 [style=solid label="\"const_cast\""]
  678 -> 259 [style=solid label="\"typeid\""]
  678 -> 260 [style=solid label="\"literal\""]
  678 -> 27 [style=solid label="\"char\""]
  678 -> 28 [style=solid label="\"char8_t\""]
  678 -> 29 [style=solid label="\"char16_t\""]
  678 -> 30 [style=solid label="\"char32_t\""]
  678 -> 31 [style=solid label="\"wchar_t\""]
  678 -> 32 [style=solid label="\"bool\""]
  678 -> 33 [style=solid label="\"short\""]
  678 -> 34 [style=solid label="\"int\""]
  678 -> 35 [style=solid label="\"long\""]
  678 -> 36 [style=solid label="\"signed\""]
  678 -> 37 [style=solid label="\"unsigned\""]
  678 -> 38 [style=solid label="\"float\""]
  678 -> 39 [style=solid label="\"double\""]
  678 -> 40 [style=solid label="\"void\""]
  678 -> 118 [style=solid label="STRING_LITERAL"]
  678 -> 262 [style=solid label="\"sizeof\""]
  678 -> 263 [style=solid label="\"alignof\""]
  678 -> 265 [style=dashed label="SCOPE-opt"]
  678 -> 266 [style=dashed label="additive-expression"]
  678 -> 267 [style=dashed label="and-expression"]
  678 -> 269 [style=dashed label="await-expression"]
  678 -> 270 [style=dashed label="cast-expression"]
  678 -> 406 [style=dashed label="class-key"]
  678 -> 55 [style=dashed label="class-name"]
  678 -> 271 [style=dashed label="compare-expression"]
  678 -> 309 [style=dashed label="conditional-expression"]
  678 -> 407 [style=dashed label="constant-expression"]
  678 -> 273 [style=dashed label="conversion-function-id"]
  678 -> 57 [style=dashed label="cv-qualifier"]
  678 -> 63 [style=dashed label="decltype-specifier"]
  678 -> 274 [style=dashed label="delete-expression"]
  678 -> 66 [style=dashed label="elaborated-enum-specifier"]
  678 -> 67 [style=dashed label="elaborated-type-specifier"]
  678 -> 71 [style=dashed label="enum-name"]
  678 -> 275 [style=dashed label="equality-expression"]
  678 -> 276 [style=dashed label="exclusive-or-expression"]
  678 -> 278 [style=dashed label="fold-expression"]
  678 -> 408 [style=dashed label="id-expression"]
  678 -> 280 [style=dashed label="inclusive-or-expression"]
  678 -> 281 [style=dashed label="lambda-expression"]
  678 -> 282 [style=dashed label="lambda-introducer"]
  678 -> 283 [style=dashed label="literal-operator-id"]
  678 -> 284 [style=dashed label="logical-and-expression"]
  678 -> 311 [style=dashed label="logical-or-expression"]
  678 -> 286 [style=dashed label="multiplicative-expression"]
  678 -> 85 [style=dashed label="namespace-alias"]
  678 -> 88 [style=dashed label="namespace-name"]
  678 -> 287 [style=dashed label="nested-name-specifier"]
  678 -> 90 [style=dashed label="nested-name-specifier-opt"]
  678 -> 288 [style=dashed label="new-expression"]
  678 -> 289 [style=dashed label="noexcept-expression"]
  678 -> 290 [style=dashed label="operator-function-id"]
  678 -> 94 [style=dashed label="placeholder-type-specifier"]
  678 -> 291 [style=dashed label="pm-expression"]
  678 -> 292 [style=dashed label="postfix-expression"]
  678 -> 293 [style=dashed label="primary-expression"]
  678 -> 294 [style=dashed label="qualified-id"]
  678 -> 295 [style=dashed label="relational-expression"]
  678 -> 296 [style=dashed label="requires-expression"]
  678 -> 297 [style=dashed label="shift-expression"]
  678 -> 298 [style=dashed label="simple-template-id"]
  678 -> 409 [style=dashed label="simple-type-specifier"]
  678 -> 300 [style=dashed label="string-literal"]
  678 -> 904 [style=dashed label="template-argument"]
  678 -> 301 [style=dashed label="template-id"]
  678 -> 102 [style=dashed label="template-name"]
  678 -> 104 [style=dashed label="type-constraint"]
  678 -> 105 [style=dashed label="type-constraint-opt"]
  678 -> 413 [style=dashed label="type-id"]
  678 -> 106 [style=dashed label="type-name"]
  678 -> 414 [style=dashed label="type-specifier"]
  678 -> 415 [style=dashed label="type-specifier-seq"]
  678 -> 108 [style=dashed label="typedef-name"]
  678 -> 416 [style=dashed label="typename-specifier"]
  678 -> 304 [style=dashed label="unary-expression"]
  678 -> 305 [style=dashed label="unary-operator"]
  678 -> 306 [style=dashed label="unqualified-id"]
  678 -> "678R19" [style=solid]
 "678R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  678 -> "678R458d" [label="[IDENTIFIER]", style=solid]
 "678R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  678 -> "678R710d" [label="[\"decltype\"]", style=solid]
 "678R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  678 -> "678R710" [label="[\"auto\"]", style=solid]
 "678R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  679 [label="State 679\n\l644 simple-template-id: template-name \"<\" template-argument-list-opt \">\" •\l"]
  679 -> "679R644" [style=solid]
 "679R644" [label="R644", fillcolor=3, shape=diamond, style=filled]
  680 [label="State 680\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l729 type-specifier-seq: type-specifier attribute-specifier-seq-opt •\l"]
  680 -> 158 [style=solid label="\"alignas\""]
  680 -> 162 [style=solid label="\"[\""]
  680 -> 166 [style=dashed label="alignment-specifier"]
  680 -> 167 [style=dashed label="attribute-specifier"]
  680 -> "680R729d" [label="[\"alignas\", \"[\"]", style=solid]
 "680R729d" [label="R729", fillcolor=5, shape=diamond, style=filled]
  680 -> "680R729" [style=solid]
 "680R729" [label="R729", fillcolor=3, shape=diamond, style=filled]
  681 [label="State 681\n\l730 type-specifier-seq: type-specifier type-specifier-seq •\l"]
  681 -> "681R730" [style=solid]
 "681R730" [label="R730", fillcolor=3, shape=diamond, style=filled]
  682 [label="State 682\n\l489 noptr-abstract-pack-declarator: \"...\" •\l"]
  682 -> "682R489" [style=solid]
 "682R489" [label="R489", fillcolor=3, shape=diamond, style=filled]
  683 [label="State 683\n\l484 noptr-abstract-declarator: \"(\" • ptr-abstract-declarator \")\"\l"]
  683 -> 4 [style=solid label="IDENTIFIER"]
  683 -> 6 [style=solid label="\"::\""]
  683 -> 683 [style=solid label="\"(\""]
  683 -> 160 [style=solid label="\"&\""]
  683 -> 163 [style=solid label="\"&&\""]
  683 -> 21 [style=solid label="\"decltype\""]
  683 -> 164 [style=solid label="\"*\""]
  683 -> 55 [style=dashed label="class-name"]
  683 -> 121 [style=dashed label="decltype-specifier"]
  683 -> 71 [style=dashed label="enum-name"]
  683 -> 85 [style=dashed label="namespace-alias"]
  683 -> 88 [style=dashed label="namespace-name"]
  683 -> 187 [style=dashed label="nested-name-specifier"]
  683 -> 687 [style=dashed label="noptr-abstract-declarator"]
  683 -> 905 [style=dashed label="noptr-abstract-declarator-opt"]
  683 -> 906 [style=dashed label="ptr-abstract-declarator"]
  683 -> 907 [style=dashed label="ptr-operator"]
  683 -> 96 [style=dashed label="simple-template-id"]
  683 -> 102 [style=dashed label="template-name"]
  683 -> 106 [style=dashed label="type-name"]
  683 -> 108 [style=dashed label="typedef-name"]
  683 -> "683R485d" [label="[\"(\"]", style=solid]
 "683R485d" [label="R485", fillcolor=5, shape=diamond, style=filled]
  683 -> "683R485" [style=solid]
 "683R485" [label="R485", fillcolor=3, shape=diamond, style=filled]
  684 [label="State 684\n\l 33 abstract-declarator-opt: abstract-declarator •\l"]
  684 -> "684R33" [style=solid]
 "684R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  685 [label="State 685\n\l712 type-id: type-specifier-seq abstract-declarator-opt •\l"]
  685 -> "685R712" [style=solid]
 "685R712" [label="R712", fillcolor=3, shape=diamond, style=filled]
  686 [label="State 686\n\l 31 abstract-declarator: abstract-pack-declarator •\l"]
  686 -> "686R31" [style=solid]
 "686R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  687 [label="State 687\n\l486 noptr-abstract-declarator-opt: noptr-abstract-declarator •\l587 ptr-abstract-declarator: noptr-abstract-declarator •\l"]
  687 -> "687R486" [label="[\"(\", \"[\"]", style=solid]
 "687R486" [label="R486", fillcolor=3, shape=diamond, style=filled]
  687 -> "687R587d" [label="[\"(\"]", style=solid]
 "687R587d" [label="R587", fillcolor=5, shape=diamond, style=filled]
  687 -> "687R587" [style=solid]
 "687R587" [label="R587", fillcolor=3, shape=diamond, style=filled]
  688 [label="State 688\n\l 30 abstract-declarator: noptr-abstract-declarator-opt • parameters-and-qualifiers trailing-return-type\l482 noptr-abstract-declarator: noptr-abstract-declarator-opt • parameters-and-qualifiers\l483                          | noptr-abstract-declarator-opt • \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt\l"]
  688 -> 347 [style=solid label="\"(\""]
  688 -> 908 [style=solid label="\"[\""]
  688 -> 909 [style=dashed label="parameters-and-qualifiers"]
  689 [label="State 689\n\l 34 abstract-pack-declarator: noptr-abstract-pack-declarator •\l487 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator • parameters-and-qualifiers\l488                               | noptr-abstract-pack-declarator • \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt\l"]
  689 -> 347 [style=solid label="\"(\""]
  689 -> 910 [style=solid label="\"[\""]
  689 -> 911 [style=dashed label="parameters-and-qualifiers"]
  689 -> "689R34d" [label="[\"(\"]", style=solid]
 "689R34d" [label="R34", fillcolor=5, shape=diamond, style=filled]
  689 -> "689R34" [style=solid]
 "689R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  690 [label="State 690\n\l 29 abstract-declarator: ptr-abstract-declarator •\l"]
  690 -> "690R29" [style=solid]
 "690R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  691 [label="State 691\n\l 35 abstract-pack-declarator: ptr-operator • abstract-pack-declarator\l588 ptr-abstract-declarator: ptr-operator • ptr-abstract-declarator-opt\l"]
  691 -> 682 [style=solid label="\"...\""]
  691 -> 4 [style=solid label="IDENTIFIER"]
  691 -> 6 [style=solid label="\"::\""]
  691 -> 683 [style=solid label="\"(\""]
  691 -> 160 [style=solid label="\"&\""]
  691 -> 163 [style=solid label="\"&&\""]
  691 -> 21 [style=solid label="\"decltype\""]
  691 -> 164 [style=solid label="\"*\""]
  691 -> 912 [style=dashed label="abstract-pack-declarator"]
  691 -> 55 [style=dashed label="class-name"]
  691 -> 121 [style=dashed label="decltype-specifier"]
  691 -> 71 [style=dashed label="enum-name"]
  691 -> 85 [style=dashed label="namespace-alias"]
  691 -> 88 [style=dashed label="namespace-name"]
  691 -> 187 [style=dashed label="nested-name-specifier"]
  691 -> 687 [style=dashed label="noptr-abstract-declarator"]
  691 -> 905 [style=dashed label="noptr-abstract-declarator-opt"]
  691 -> 689 [style=dashed label="noptr-abstract-pack-declarator"]
  691 -> 913 [style=dashed label="ptr-abstract-declarator"]
  691 -> 914 [style=dashed label="ptr-abstract-declarator-opt"]
  691 -> 691 [style=dashed label="ptr-operator"]
  691 -> 96 [style=dashed label="simple-template-id"]
  691 -> 102 [style=dashed label="template-name"]
  691 -> 106 [style=dashed label="type-name"]
  691 -> 108 [style=dashed label="typedef-name"]
  691 -> "691R485d" [label="[\"(\"]", style=solid]
 "691R485d" [label="R485", fillcolor=5, shape=diamond, style=filled]
  691 -> "691R485" [label="[\"[\"]", style=solid]
 "691R485" [label="R485", fillcolor=3, shape=diamond, style=filled]
  691 -> "691R589d" [label="[\"...\", \"(\"]", style=solid]
 "691R589d" [label="R589", fillcolor=5, shape=diamond, style=filled]
  691 -> "691R589" [style=solid]
 "691R589" [label="R589", fillcolor=3, shape=diamond, style=filled]
  692 [label="State 692\n\l555 placeholder-type-specifier: type-constraint-opt \"decltype\" \"(\" \"auto\" • \")\"\l"]
  692 -> 915 [style=solid label="\")\""]
  693 [label="State 693\n\l390 linkage-specification: \"extern\" string-literal \"{\" declaration-seq-opt \"}\" •\l"]
  693 -> "693R390" [style=solid]
 "693R390" [label="R390", fillcolor=3, shape=diamond, style=filled]
  694 [label="State 694\n\l543 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq • declarator\l544                      | attribute-specifier-seq-opt THIS-opt decl-specifier-seq • declarator \"=\" initializer-clause\l545                      | attribute-specifier-seq-opt THIS-opt decl-specifier-seq • abstract-declarator-opt\l546                      | attribute-specifier-seq-opt THIS-opt decl-specifier-seq • abstract-declarator-opt \"=\" initializer-clause\l"]
  694 -> 916 [style=solid label="\"...\""]
  694 -> 4 [style=solid label="IDENTIFIER"]
  694 -> 6 [style=solid label="\"::\""]
  694 -> 917 [style=solid label="\"(\""]
  694 -> 160 [style=solid label="\"&\""]
  694 -> 163 [style=solid label="\"&&\""]
  694 -> 21 [style=solid label="\"decltype\""]
  694 -> 164 [style=solid label="\"*\""]
  694 -> 165 [style=dashed label="ELLIPSIS-opt"]
  694 -> 684 [style=dashed label="abstract-declarator"]
  694 -> 918 [style=dashed label="abstract-declarator-opt"]
  694 -> 686 [style=dashed label="abstract-pack-declarator"]
  694 -> 55 [style=dashed label="class-name"]
  694 -> 919 [style=dashed label="declarator"]
  694 -> 171 [style=dashed label="declarator-id"]
  694 -> 121 [style=dashed label="decltype-specifier"]
  694 -> 71 [style=dashed label="enum-name"]
  694 -> 85 [style=dashed label="namespace-alias"]
  694 -> 88 [style=dashed label="namespace-name"]
  694 -> 187 [style=dashed label="nested-name-specifier"]
  694 -> 687 [style=dashed label="noptr-abstract-declarator"]
  694 -> 688 [style=dashed label="noptr-abstract-declarator-opt"]
  694 -> 689 [style=dashed label="noptr-abstract-pack-declarator"]
  694 -> 173 [style=dashed label="noptr-declarator"]
  694 -> 690 [style=dashed label="ptr-abstract-declarator"]
  694 -> 174 [style=dashed label="ptr-declarator"]
  694 -> 920 [style=dashed label="ptr-operator"]
  694 -> 96 [style=dashed label="simple-template-id"]
  694 -> 102 [style=dashed label="template-name"]
  694 -> 106 [style=dashed label="type-name"]
  694 -> 108 [style=dashed label="typedef-name"]
  694 -> "694R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "694R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  694 -> "694R5" [label="[\"operator\", \"~\"]", style=solid]
 "694R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  694 -> "694R32d" [label="[\"...\"]", style=solid]
 "694R32d" [label="R32", fillcolor=5, shape=diamond, style=filled]
  694 -> "694R32" [style=solid]
 "694R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  694 -> "694R485d" [label="[\"(\"]", style=solid]
 "694R485d" [label="R485", fillcolor=5, shape=diamond, style=filled]
  694 -> "694R485" [label="[\"[\"]", style=solid]
 "694R485" [label="R485", fillcolor=3, shape=diamond, style=filled]
  695 [label="State 695\n\l720 type-parameter: template-head type-parameter-key ELLIPSIS-opt • IDENTIFIER-opt\l"]
  695 -> 427 [style=solid label="IDENTIFIER"]
  695 -> 921 [style=dashed label="IDENTIFIER-opt"]
  695 -> "695R11" [style=solid]
 "695R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  696 [label="State 696\n\l721 type-parameter: template-head type-parameter-key IDENTIFIER-opt • \"=\" id-expression\l"]
  696 -> 922 [style=solid label="\"=\""]
  697 [label="State 697\n\l700 template-parameter-list: template-parameter-list \",\" template-parameter •\l"]
  697 -> "697R700" [style=solid]
 "697R700" [label="R700", fillcolor=3, shape=diamond, style=filled]
  698 [label="State 698\n\l623 requires-clause-opt: requires-clause •\l"]
  698 -> "698R623" [style=solid]
 "698R623" [label="R623", fillcolor=3, shape=diamond, style=filled]
  699 [label="State 699\n\l692 template-head: \"template\" \"<\" template-parameter-list \">\" requires-clause-opt •\l"]
  699 -> "699R692" [style=solid]
 "699R692" [label="R692", fillcolor=3, shape=diamond, style=filled]
  700 [label="State 700\n\l718 type-parameter: type-constraint ELLIPSIS-opt IDENTIFIER-opt •\l"]
  700 -> "700R718" [style=solid]
 "700R718" [label="R718", fillcolor=3, shape=diamond, style=filled]
  701 [label="State 701\n\l719 type-parameter: type-constraint IDENTIFIER-opt \"=\" • type-id\l"]
  701 -> 4 [style=solid label="IDENTIFIER"]
  701 -> 6 [style=solid label="\"::\""]
  701 -> 8 [style=solid label="\"typename\""]
  701 -> 12 [style=solid label="\"class\""]
  701 -> 13 [style=solid label="\"struct\""]
  701 -> 14 [style=solid label="\"union\""]
  701 -> 15 [style=solid label="\"const\""]
  701 -> 16 [style=solid label="\"volatile\""]
  701 -> 21 [style=solid label="\"decltype\""]
  701 -> 125 [style=solid label="\"enum\""]
  701 -> 27 [style=solid label="\"char\""]
  701 -> 28 [style=solid label="\"char8_t\""]
  701 -> 29 [style=solid label="\"char16_t\""]
  701 -> 30 [style=solid label="\"char32_t\""]
  701 -> 31 [style=solid label="\"wchar_t\""]
  701 -> 32 [style=solid label="\"bool\""]
  701 -> 33 [style=solid label="\"short\""]
  701 -> 34 [style=solid label="\"int\""]
  701 -> 35 [style=solid label="\"long\""]
  701 -> 36 [style=solid label="\"signed\""]
  701 -> 37 [style=solid label="\"unsigned\""]
  701 -> 38 [style=solid label="\"float\""]
  701 -> 39 [style=solid label="\"double\""]
  701 -> 40 [style=solid label="\"void\""]
  701 -> 406 [style=dashed label="class-key"]
  701 -> 55 [style=dashed label="class-name"]
  701 -> 57 [style=dashed label="cv-qualifier"]
  701 -> 63 [style=dashed label="decltype-specifier"]
  701 -> 66 [style=dashed label="elaborated-enum-specifier"]
  701 -> 67 [style=dashed label="elaborated-type-specifier"]
  701 -> 71 [style=dashed label="enum-name"]
  701 -> 85 [style=dashed label="namespace-alias"]
  701 -> 88 [style=dashed label="namespace-name"]
  701 -> 89 [style=dashed label="nested-name-specifier"]
  701 -> 90 [style=dashed label="nested-name-specifier-opt"]
  701 -> 94 [style=dashed label="placeholder-type-specifier"]
  701 -> 96 [style=dashed label="simple-template-id"]
  701 -> 97 [style=dashed label="simple-type-specifier"]
  701 -> 102 [style=dashed label="template-name"]
  701 -> 104 [style=dashed label="type-constraint"]
  701 -> 105 [style=dashed label="type-constraint-opt"]
  701 -> 923 [style=dashed label="type-id"]
  701 -> 106 [style=dashed label="type-name"]
  701 -> 414 [style=dashed label="type-specifier"]
  701 -> 415 [style=dashed label="type-specifier-seq"]
  701 -> 108 [style=dashed label="typedef-name"]
  701 -> 109 [style=dashed label="typename-specifier"]
  701 -> "701R458d" [label="[IDENTIFIER]", style=solid]
 "701R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  701 -> "701R710d" [label="[\"decltype\"]", style=solid]
 "701R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  701 -> "701R710" [label="[]", style=solid]
 "701R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  702 [label="State 702\n\l716 type-parameter: type-parameter-key ELLIPSIS-opt IDENTIFIER-opt •\l"]
  702 -> "702R716" [style=solid]
 "702R716" [label="R716", fillcolor=3, shape=diamond, style=filled]
  703 [label="State 703\n\l717 type-parameter: type-parameter-key IDENTIFIER-opt \"=\" • type-id\l"]
  703 -> 4 [style=solid label="IDENTIFIER"]
  703 -> 6 [style=solid label="\"::\""]
  703 -> 8 [style=solid label="\"typename\""]
  703 -> 12 [style=solid label="\"class\""]
  703 -> 13 [style=solid label="\"struct\""]
  703 -> 14 [style=solid label="\"union\""]
  703 -> 15 [style=solid label="\"const\""]
  703 -> 16 [style=solid label="\"volatile\""]
  703 -> 21 [style=solid label="\"decltype\""]
  703 -> 125 [style=solid label="\"enum\""]
  703 -> 27 [style=solid label="\"char\""]
  703 -> 28 [style=solid label="\"char8_t\""]
  703 -> 29 [style=solid label="\"char16_t\""]
  703 -> 30 [style=solid label="\"char32_t\""]
  703 -> 31 [style=solid label="\"wchar_t\""]
  703 -> 32 [style=solid label="\"bool\""]
  703 -> 33 [style=solid label="\"short\""]
  703 -> 34 [style=solid label="\"int\""]
  703 -> 35 [style=solid label="\"long\""]
  703 -> 36 [style=solid label="\"signed\""]
  703 -> 37 [style=solid label="\"unsigned\""]
  703 -> 38 [style=solid label="\"float\""]
  703 -> 39 [style=solid label="\"double\""]
  703 -> 40 [style=solid label="\"void\""]
  703 -> 406 [style=dashed label="class-key"]
  703 -> 55 [style=dashed label="class-name"]
  703 -> 57 [style=dashed label="cv-qualifier"]
  703 -> 63 [style=dashed label="decltype-specifier"]
  703 -> 66 [style=dashed label="elaborated-enum-specifier"]
  703 -> 67 [style=dashed label="elaborated-type-specifier"]
  703 -> 71 [style=dashed label="enum-name"]
  703 -> 85 [style=dashed label="namespace-alias"]
  703 -> 88 [style=dashed label="namespace-name"]
  703 -> 89 [style=dashed label="nested-name-specifier"]
  703 -> 90 [style=dashed label="nested-name-specifier-opt"]
  703 -> 94 [style=dashed label="placeholder-type-specifier"]
  703 -> 96 [style=dashed label="simple-template-id"]
  703 -> 97 [style=dashed label="simple-type-specifier"]
  703 -> 102 [style=dashed label="template-name"]
  703 -> 104 [style=dashed label="type-constraint"]
  703 -> 105 [style=dashed label="type-constraint-opt"]
  703 -> 924 [style=dashed label="type-id"]
  703 -> 106 [style=dashed label="type-name"]
  703 -> 414 [style=dashed label="type-specifier"]
  703 -> 415 [style=dashed label="type-specifier-seq"]
  703 -> 108 [style=dashed label="typedef-name"]
  703 -> 109 [style=dashed label="typename-specifier"]
  703 -> "703R458d" [label="[IDENTIFIER]", style=solid]
 "703R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  703 -> "703R710d" [label="[\"decltype\"]", style=solid]
 "703R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  703 -> "703R710" [label="[]", style=solid]
 "703R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  704 [label="State 704\n\l 44 alias-declaration: \"using\" IDENTIFIER attribute-specifier-seq-opt \"=\" defining-type-id • \";\"\l"]
  704 -> 925 [style=solid label="\";\""]
  705 [label="State 705\n\l220 defining-type-specifier-seq: defining-type-specifier • attribute-specifier-seq-opt\l221                            | defining-type-specifier • defining-type-specifier-seq\l"]
  705 -> 4 [style=solid label="IDENTIFIER"]
  705 -> 6 [style=solid label="\"::\""]
  705 -> 8 [style=solid label="\"typename\""]
  705 -> 12 [style=solid label="\"class\""]
  705 -> 13 [style=solid label="\"struct\""]
  705 -> 14 [style=solid label="\"union\""]
  705 -> 15 [style=solid label="\"const\""]
  705 -> 16 [style=solid label="\"volatile\""]
  705 -> 21 [style=solid label="\"decltype\""]
  705 -> 22 [style=solid label="\"enum\""]
  705 -> 27 [style=solid label="\"char\""]
  705 -> 28 [style=solid label="\"char8_t\""]
  705 -> 29 [style=solid label="\"char16_t\""]
  705 -> 30 [style=solid label="\"char32_t\""]
  705 -> 31 [style=solid label="\"wchar_t\""]
  705 -> 32 [style=solid label="\"bool\""]
  705 -> 33 [style=solid label="\"short\""]
  705 -> 34 [style=solid label="\"int\""]
  705 -> 35 [style=solid label="\"long\""]
  705 -> 36 [style=solid label="\"signed\""]
  705 -> 37 [style=solid label="\"unsigned\""]
  705 -> 38 [style=solid label="\"float\""]
  705 -> 39 [style=solid label="\"double\""]
  705 -> 40 [style=solid label="\"void\""]
  705 -> 177 [style=dashed label="attribute-specifier-seq"]
  705 -> 926 [style=dashed label="attribute-specifier-seq-opt"]
  705 -> 53 [style=dashed label="class-head"]
  705 -> 54 [style=dashed label="class-key"]
  705 -> 55 [style=dashed label="class-name"]
  705 -> 56 [style=dashed label="class-specifier"]
  705 -> 57 [style=dashed label="cv-qualifier"]
  705 -> 63 [style=dashed label="decltype-specifier"]
  705 -> 705 [style=dashed label="defining-type-specifier"]
  705 -> 927 [style=dashed label="defining-type-specifier-seq"]
  705 -> 66 [style=dashed label="elaborated-enum-specifier"]
  705 -> 67 [style=dashed label="elaborated-type-specifier"]
  705 -> 69 [style=dashed label="enum-head"]
  705 -> 154 [style=dashed label="enum-key"]
  705 -> 71 [style=dashed label="enum-name"]
  705 -> 72 [style=dashed label="enum-specifier"]
  705 -> 85 [style=dashed label="namespace-alias"]
  705 -> 88 [style=dashed label="namespace-name"]
  705 -> 89 [style=dashed label="nested-name-specifier"]
  705 -> 90 [style=dashed label="nested-name-specifier-opt"]
  705 -> 94 [style=dashed label="placeholder-type-specifier"]
  705 -> 96 [style=dashed label="simple-template-id"]
  705 -> 97 [style=dashed label="simple-type-specifier"]
  705 -> 102 [style=dashed label="template-name"]
  705 -> 104 [style=dashed label="type-constraint"]
  705 -> 105 [style=dashed label="type-constraint-opt"]
  705 -> 106 [style=dashed label="type-name"]
  705 -> 107 [style=dashed label="type-specifier"]
  705 -> 108 [style=dashed label="typedef-name"]
  705 -> 109 [style=dashed label="typename-specifier"]
  705 -> "705R83d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "705R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  705 -> "705R83" [style=solid]
 "705R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  705 -> "705R458d" [label="[IDENTIFIER]", style=solid]
 "705R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  705 -> "705R710d" [label="[\"decltype\"]", style=solid]
 "705R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  705 -> "705R710" [label="[\"auto\"]", style=solid]
 "705R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  706 [label="State 706\n\l216 defining-type-id: defining-type-specifier-seq • abstract-declarator-opt\l"]
  706 -> 682 [style=solid label="\"...\""]
  706 -> 4 [style=solid label="IDENTIFIER"]
  706 -> 6 [style=solid label="\"::\""]
  706 -> 683 [style=solid label="\"(\""]
  706 -> 160 [style=solid label="\"&\""]
  706 -> 163 [style=solid label="\"&&\""]
  706 -> 21 [style=solid label="\"decltype\""]
  706 -> 164 [style=solid label="\"*\""]
  706 -> 684 [style=dashed label="abstract-declarator"]
  706 -> 928 [style=dashed label="abstract-declarator-opt"]
  706 -> 686 [style=dashed label="abstract-pack-declarator"]
  706 -> 55 [style=dashed label="class-name"]
  706 -> 121 [style=dashed label="decltype-specifier"]
  706 -> 71 [style=dashed label="enum-name"]
  706 -> 85 [style=dashed label="namespace-alias"]
  706 -> 88 [style=dashed label="namespace-name"]
  706 -> 187 [style=dashed label="nested-name-specifier"]
  706 -> 687 [style=dashed label="noptr-abstract-declarator"]
  706 -> 688 [style=dashed label="noptr-abstract-declarator-opt"]
  706 -> 689 [style=dashed label="noptr-abstract-pack-declarator"]
  706 -> 690 [style=dashed label="ptr-abstract-declarator"]
  706 -> 691 [style=dashed label="ptr-operator"]
  706 -> 96 [style=dashed label="simple-template-id"]
  706 -> 102 [style=dashed label="template-name"]
  706 -> 106 [style=dashed label="type-name"]
  706 -> 108 [style=dashed label="typedef-name"]
  706 -> "706R32" [style=solid]
 "706R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  706 -> "706R485d" [label="[\"(\"]", style=solid]
 "706R485d" [label="R485", fillcolor=5, shape=diamond, style=filled]
  706 -> "706R485" [label="[\"[\"]", style=solid]
 "706R485" [label="R485", fillcolor=3, shape=diamond, style=filled]
  707 [label="State 707\n\l766 using-declarator-list: using-declarator-list \",\" using-declarator ELLIPSIS-opt •\l"]
  707 -> "707R766" [style=solid]
 "707R766" [label="R766", fillcolor=3, shape=diamond, style=filled]
  708 [label="State 708\n\l278 expression: expression • \",\" assignment-expression\l477 noexcept-expression: \"noexcept\" \"(\" expression • \")\"\l"]
  708 -> 534 [style=solid label="\",\""]
  708 -> 929 [style=solid label="\")\""]
  709 [label="State 709\n\l317 fold-operator: \",\" •\l"]
  709 -> "709R317" [style=solid]
 "709R317" [label="R317", fillcolor=3, shape=diamond, style=filled]
  710 [label="State 710\n\l288 fold-operator: \"+\" •\l"]
  710 -> "710R288" [style=solid]
 "710R288" [label="R288", fillcolor=3, shape=diamond, style=filled]
  711 [label="State 711\n\l289 fold-operator: \"-\" •\l"]
  711 -> "711R289" [style=solid]
 "711R289" [label="R289", fillcolor=3, shape=diamond, style=filled]
  712 [label="State 712\n\l308 fold-operator: \"=\" •\l"]
  712 -> "712R308" [style=solid]
 "712R308" [label="R308", fillcolor=3, shape=diamond, style=filled]
  713 [label="State 713\n\l294 fold-operator: \"&\" •\l"]
  713 -> "713R294" [style=solid]
 "713R294" [label="R294", fillcolor=3, shape=diamond, style=filled]
  714 [label="State 714\n\l300 fold-operator: \"*=\" •\l"]
  714 -> "714R300" [style=solid]
 "714R300" [label="R300", fillcolor=3, shape=diamond, style=filled]
  715 [label="State 715\n\l301 fold-operator: \"/=\" •\l"]
  715 -> "715R301" [style=solid]
 "715R301" [label="R301", fillcolor=3, shape=diamond, style=filled]
  716 [label="State 716\n\l302 fold-operator: \"%=\" •\l"]
  716 -> "716R302" [style=solid]
 "716R302" [label="R302", fillcolor=3, shape=diamond, style=filled]
  717 [label="State 717\n\l298 fold-operator: \"+=\" •\l"]
  717 -> "717R298" [style=solid]
 "717R298" [label="R298", fillcolor=3, shape=diamond, style=filled]
  718 [label="State 718\n\l299 fold-operator: \"-=\" •\l"]
  718 -> "718R299" [style=solid]
 "718R299" [label="R299", fillcolor=3, shape=diamond, style=filled]
  719 [label="State 719\n\l307 fold-operator: \">>=\" •\l"]
  719 -> "719R307" [style=solid]
 "719R307" [label="R307", fillcolor=3, shape=diamond, style=filled]
  720 [label="State 720\n\l306 fold-operator: \"<<=\" •\l"]
  720 -> "720R306" [style=solid]
 "720R306" [label="R306", fillcolor=3, shape=diamond, style=filled]
  721 [label="State 721\n\l304 fold-operator: \"&=\" •\l"]
  721 -> "721R304" [style=solid]
 "721R304" [label="R304", fillcolor=3, shape=diamond, style=filled]
  722 [label="State 722\n\l303 fold-operator: \"^=\" •\l"]
  722 -> "722R303" [style=solid]
 "722R303" [label="R303", fillcolor=3, shape=diamond, style=filled]
  723 [label="State 723\n\l305 fold-operator: \"|=\" •\l"]
  723 -> "723R305" [style=solid]
 "723R305" [label="R305", fillcolor=3, shape=diamond, style=filled]
  724 [label="State 724\n\l315 fold-operator: \"&&\" •\l"]
  724 -> "724R315" [style=solid]
 "724R315" [label="R315", fillcolor=3, shape=diamond, style=filled]
  725 [label="State 725\n\l316 fold-operator: \"||\" •\l"]
  725 -> "725R316" [style=solid]
 "725R316" [label="R316", fillcolor=3, shape=diamond, style=filled]
  726 [label="State 726\n\l309 fold-operator: \"==\" •\l"]
  726 -> "726R309" [style=solid]
 "726R309" [label="R309", fillcolor=3, shape=diamond, style=filled]
  727 [label="State 727\n\l310 fold-operator: \"!=\" •\l"]
  727 -> "727R310" [style=solid]
 "727R310" [label="R310", fillcolor=3, shape=diamond, style=filled]
  728 [label="State 728\n\l293 fold-operator: \"^\" •\l"]
  728 -> "728R293" [style=solid]
 "728R293" [label="R293", fillcolor=3, shape=diamond, style=filled]
  729 [label="State 729\n\l311 fold-operator: \"<\" •\l"]
  729 -> "729R311" [style=solid]
 "729R311" [label="R311", fillcolor=3, shape=diamond, style=filled]
  730 [label="State 730\n\l312 fold-operator: \">\" •\l"]
  730 -> "730R312" [style=solid]
 "730R312" [label="R312", fillcolor=3, shape=diamond, style=filled]
  731 [label="State 731\n\l290 fold-operator: \"*\" •\l"]
  731 -> "731R290" [style=solid]
 "731R290" [label="R290", fillcolor=3, shape=diamond, style=filled]
  732 [label="State 732\n\l291 fold-operator: \"/\" •\l"]
  732 -> "732R291" [style=solid]
 "732R291" [label="R291", fillcolor=3, shape=diamond, style=filled]
  733 [label="State 733\n\l292 fold-operator: \"%\" •\l"]
  733 -> "733R292" [style=solid]
 "733R292" [label="R292", fillcolor=3, shape=diamond, style=filled]
  734 [label="State 734\n\l295 fold-operator: \"|\" •\l"]
  734 -> "734R295" [style=solid]
 "734R295" [label="R295", fillcolor=3, shape=diamond, style=filled]
  735 [label="State 735\n\l296 fold-operator: \"<<\" •\l"]
  735 -> "735R296" [style=solid]
 "735R296" [label="R296", fillcolor=3, shape=diamond, style=filled]
  736 [label="State 736\n\l297 fold-operator: \">>\" •\l"]
  736 -> "736R297" [style=solid]
 "736R297" [label="R297", fillcolor=3, shape=diamond, style=filled]
  737 [label="State 737\n\l313 fold-operator: \"<=\" •\l"]
  737 -> "737R313" [style=solid]
 "737R313" [label="R313", fillcolor=3, shape=diamond, style=filled]
  738 [label="State 738\n\l314 fold-operator: \">=\" •\l"]
  738 -> "738R314" [style=solid]
 "738R314" [label="R314", fillcolor=3, shape=diamond, style=filled]
  739 [label="State 739\n\l318 fold-operator: \".*\" •\l"]
  739 -> "739R318" [style=solid]
 "739R318" [label="R318", fillcolor=3, shape=diamond, style=filled]
  740 [label="State 740\n\l319 fold-operator: \"->*\" •\l"]
  740 -> "740R319" [style=solid]
 "740R319" [label="R319", fillcolor=3, shape=diamond, style=filled]
  741 [label="State 741\n\l286 fold-expression: \"(\" \"...\" fold-operator • cast-expression \")\"\l"]
  741 -> 238 [style=solid label="IDENTIFIER"]
  741 -> 239 [style=solid label="\"noexcept\""]
  741 -> 240 [style=solid label="\"!\""]
  741 -> 241 [style=solid label="\"::\""]
  741 -> 242 [style=solid label="\"this\""]
  741 -> 8 [style=solid label="\"typename\""]
  741 -> 243 [style=solid label="\"+\""]
  741 -> 244 [style=solid label="\"-\""]
  741 -> 245 [style=solid label="\"(\""]
  741 -> 246 [style=solid label="\"&\""]
  741 -> 247 [style=solid label="\"[\""]
  741 -> 248 [style=solid label="\"co_await\""]
  741 -> 249 [style=solid label="\"operator\""]
  741 -> 21 [style=solid label="\"decltype\""]
  741 -> 250 [style=solid label="\"*\""]
  741 -> 251 [style=solid label="\"requires\""]
  741 -> 252 [style=solid label="\"~\""]
  741 -> 253 [style=solid label="\"++\""]
  741 -> 254 [style=solid label="\"--\""]
  741 -> 255 [style=solid label="\"dynamic_cast\""]
  741 -> 256 [style=solid label="\"static_cast\""]
  741 -> 257 [style=solid label="\"reinterpret_cast\""]
  741 -> 258 [style=solid label="\"const_cast\""]
  741 -> 259 [style=solid label="\"typeid\""]
  741 -> 260 [style=solid label="\"literal\""]
  741 -> 27 [style=solid label="\"char\""]
  741 -> 28 [style=solid label="\"char8_t\""]
  741 -> 29 [style=solid label="\"char16_t\""]
  741 -> 30 [style=solid label="\"char32_t\""]
  741 -> 31 [style=solid label="\"wchar_t\""]
  741 -> 32 [style=solid label="\"bool\""]
  741 -> 33 [style=solid label="\"short\""]
  741 -> 34 [style=solid label="\"int\""]
  741 -> 35 [style=solid label="\"long\""]
  741 -> 36 [style=solid label="\"signed\""]
  741 -> 37 [style=solid label="\"unsigned\""]
  741 -> 38 [style=solid label="\"float\""]
  741 -> 39 [style=solid label="\"double\""]
  741 -> 40 [style=solid label="\"void\""]
  741 -> 118 [style=solid label="STRING_LITERAL"]
  741 -> 262 [style=solid label="\"sizeof\""]
  741 -> 263 [style=solid label="\"alignof\""]
  741 -> 265 [style=dashed label="SCOPE-opt"]
  741 -> 269 [style=dashed label="await-expression"]
  741 -> 930 [style=dashed label="cast-expression"]
  741 -> 55 [style=dashed label="class-name"]
  741 -> 273 [style=dashed label="conversion-function-id"]
  741 -> 63 [style=dashed label="decltype-specifier"]
  741 -> 274 [style=dashed label="delete-expression"]
  741 -> 71 [style=dashed label="enum-name"]
  741 -> 278 [style=dashed label="fold-expression"]
  741 -> 279 [style=dashed label="id-expression"]
  741 -> 281 [style=dashed label="lambda-expression"]
  741 -> 282 [style=dashed label="lambda-introducer"]
  741 -> 283 [style=dashed label="literal-operator-id"]
  741 -> 85 [style=dashed label="namespace-alias"]
  741 -> 88 [style=dashed label="namespace-name"]
  741 -> 287 [style=dashed label="nested-name-specifier"]
  741 -> 90 [style=dashed label="nested-name-specifier-opt"]
  741 -> 288 [style=dashed label="new-expression"]
  741 -> 289 [style=dashed label="noexcept-expression"]
  741 -> 290 [style=dashed label="operator-function-id"]
  741 -> 94 [style=dashed label="placeholder-type-specifier"]
  741 -> 292 [style=dashed label="postfix-expression"]
  741 -> 293 [style=dashed label="primary-expression"]
  741 -> 294 [style=dashed label="qualified-id"]
  741 -> 296 [style=dashed label="requires-expression"]
  741 -> 298 [style=dashed label="simple-template-id"]
  741 -> 299 [style=dashed label="simple-type-specifier"]
  741 -> 300 [style=dashed label="string-literal"]
  741 -> 301 [style=dashed label="template-id"]
  741 -> 102 [style=dashed label="template-name"]
  741 -> 104 [style=dashed label="type-constraint"]
  741 -> 105 [style=dashed label="type-constraint-opt"]
  741 -> 106 [style=dashed label="type-name"]
  741 -> 108 [style=dashed label="typedef-name"]
  741 -> 303 [style=dashed label="typename-specifier"]
  741 -> 304 [style=dashed label="unary-expression"]
  741 -> 305 [style=dashed label="unary-operator"]
  741 -> 306 [style=dashed label="unqualified-id"]
  741 -> "741R19" [style=solid]
 "741R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  741 -> "741R458d" [label="[IDENTIFIER]", style=solid]
 "741R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  741 -> "741R710d" [label="[\"decltype\"]", style=solid]
 "741R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  741 -> "741R710" [label="[\"auto\"]", style=solid]
 "741R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  742 [label="State 742\n\l285 fold-expression: \"(\" cast-expression fold-operator • \"...\" \")\"\l287                | \"(\" cast-expression fold-operator • \"...\" fold-operator cast-expression \")\"\l"]
  742 -> 931 [style=solid label="\"...\""]
  743 [label="State 743\n\l579 primary-expression: \"(\" expression \")\" •\l"]
  743 -> "743R579" [style=solid]
 "743R579" [label="R579", fillcolor=3, shape=diamond, style=filled]
  744 [label="State 744\n\l130 cast-expression: \"(\" type-id \")\" • cast-expression\l"]
  744 -> 238 [style=solid label="IDENTIFIER"]
  744 -> 239 [style=solid label="\"noexcept\""]
  744 -> 240 [style=solid label="\"!\""]
  744 -> 241 [style=solid label="\"::\""]
  744 -> 242 [style=solid label="\"this\""]
  744 -> 8 [style=solid label="\"typename\""]
  744 -> 243 [style=solid label="\"+\""]
  744 -> 244 [style=solid label="\"-\""]
  744 -> 245 [style=solid label="\"(\""]
  744 -> 246 [style=solid label="\"&\""]
  744 -> 247 [style=solid label="\"[\""]
  744 -> 248 [style=solid label="\"co_await\""]
  744 -> 249 [style=solid label="\"operator\""]
  744 -> 21 [style=solid label="\"decltype\""]
  744 -> 250 [style=solid label="\"*\""]
  744 -> 251 [style=solid label="\"requires\""]
  744 -> 252 [style=solid label="\"~\""]
  744 -> 253 [style=solid label="\"++\""]
  744 -> 254 [style=solid label="\"--\""]
  744 -> 255 [style=solid label="\"dynamic_cast\""]
  744 -> 256 [style=solid label="\"static_cast\""]
  744 -> 257 [style=solid label="\"reinterpret_cast\""]
  744 -> 258 [style=solid label="\"const_cast\""]
  744 -> 259 [style=solid label="\"typeid\""]
  744 -> 260 [style=solid label="\"literal\""]
  744 -> 27 [style=solid label="\"char\""]
  744 -> 28 [style=solid label="\"char8_t\""]
  744 -> 29 [style=solid label="\"char16_t\""]
  744 -> 30 [style=solid label="\"char32_t\""]
  744 -> 31 [style=solid label="\"wchar_t\""]
  744 -> 32 [style=solid label="\"bool\""]
  744 -> 33 [style=solid label="\"short\""]
  744 -> 34 [style=solid label="\"int\""]
  744 -> 35 [style=solid label="\"long\""]
  744 -> 36 [style=solid label="\"signed\""]
  744 -> 37 [style=solid label="\"unsigned\""]
  744 -> 38 [style=solid label="\"float\""]
  744 -> 39 [style=solid label="\"double\""]
  744 -> 40 [style=solid label="\"void\""]
  744 -> 118 [style=solid label="STRING_LITERAL"]
  744 -> 262 [style=solid label="\"sizeof\""]
  744 -> 263 [style=solid label="\"alignof\""]
  744 -> 265 [style=dashed label="SCOPE-opt"]
  744 -> 269 [style=dashed label="await-expression"]
  744 -> 932 [style=dashed label="cast-expression"]
  744 -> 55 [style=dashed label="class-name"]
  744 -> 273 [style=dashed label="conversion-function-id"]
  744 -> 63 [style=dashed label="decltype-specifier"]
  744 -> 274 [style=dashed label="delete-expression"]
  744 -> 71 [style=dashed label="enum-name"]
  744 -> 278 [style=dashed label="fold-expression"]
  744 -> 279 [style=dashed label="id-expression"]
  744 -> 281 [style=dashed label="lambda-expression"]
  744 -> 282 [style=dashed label="lambda-introducer"]
  744 -> 283 [style=dashed label="literal-operator-id"]
  744 -> 85 [style=dashed label="namespace-alias"]
  744 -> 88 [style=dashed label="namespace-name"]
  744 -> 287 [style=dashed label="nested-name-specifier"]
  744 -> 90 [style=dashed label="nested-name-specifier-opt"]
  744 -> 288 [style=dashed label="new-expression"]
  744 -> 289 [style=dashed label="noexcept-expression"]
  744 -> 290 [style=dashed label="operator-function-id"]
  744 -> 94 [style=dashed label="placeholder-type-specifier"]
  744 -> 292 [style=dashed label="postfix-expression"]
  744 -> 293 [style=dashed label="primary-expression"]
  744 -> 294 [style=dashed label="qualified-id"]
  744 -> 296 [style=dashed label="requires-expression"]
  744 -> 298 [style=dashed label="simple-template-id"]
  744 -> 299 [style=dashed label="simple-type-specifier"]
  744 -> 300 [style=dashed label="string-literal"]
  744 -> 301 [style=dashed label="template-id"]
  744 -> 102 [style=dashed label="template-name"]
  744 -> 104 [style=dashed label="type-constraint"]
  744 -> 105 [style=dashed label="type-constraint-opt"]
  744 -> 106 [style=dashed label="type-name"]
  744 -> 108 [style=dashed label="typedef-name"]
  744 -> 303 [style=dashed label="typename-specifier"]
  744 -> 304 [style=dashed label="unary-expression"]
  744 -> 305 [style=dashed label="unary-operator"]
  744 -> 306 [style=dashed label="unqualified-id"]
  744 -> "744R19" [style=solid]
 "744R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  744 -> "744R458d" [label="[IDENTIFIER]", style=solid]
 "744R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  744 -> "744R710d" [label="[\"decltype\"]", style=solid]
 "744R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  744 -> "744R710" [label="[\"auto\"]", style=solid]
 "744R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  745 [label="State 745\n\l636 simple-capture: IDENTIFIER ELLIPSIS-opt •\l"]
  745 -> "745R636" [style=solid]
 "745R636" [label="R636", fillcolor=3, shape=diamond, style=filled]
  746 [label="State 746\n\l637 simple-capture: \"&\" IDENTIFIER • ELLIPSIS-opt\l"]
  746 -> 156 [style=solid label="\"...\""]
  746 -> 933 [style=dashed label="ELLIPSIS-opt"]
  746 -> "746R5" [style=solid]
 "746R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  747 [label="State 747\n\l347 init-capture: \"&\" ELLIPSIS-opt • IDENTIFIER initializer\l"]
  747 -> 934 [style=solid label="IDENTIFIER"]
  748 [label="State 748\n\l639 simple-capture: \"*\" \"this\" •\l"]
  748 -> "748R639" [style=solid]
 "748R639" [label="R639", fillcolor=3, shape=diamond, style=filled]
  749 [label="State 749\n\l346 init-capture: ELLIPSIS-opt IDENTIFIER • initializer\l"]
  749 -> 378 [style=solid label="\"=\""]
  749 -> 379 [style=solid label="\"(\""]
  749 -> 380 [style=solid label="\"{\""]
  749 -> 382 [style=dashed label="brace-or-equal-initializer"]
  749 -> 383 [style=dashed label="braced-init-list"]
  749 -> 935 [style=dashed label="initializer"]
  750 [label="State 750\n\l381 lambda-capture: capture-default \",\" • capture-list\l"]
  750 -> 156 [style=solid label="\"...\""]
  750 -> 443 [style=solid label="IDENTIFIER"]
  750 -> 444 [style=solid label="\"this\""]
  750 -> 936 [style=solid label="\"&\""]
  750 -> 447 [style=solid label="\"*\""]
  750 -> 448 [style=dashed label="ELLIPSIS-opt"]
  750 -> 449 [style=dashed label="capture"]
  750 -> 937 [style=dashed label="capture-list"]
  750 -> 452 [style=dashed label="init-capture"]
  750 -> 455 [style=dashed label="simple-capture"]
  750 -> "750R5d" [label="[IDENTIFIER]", style=solid]
 "750R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  751 [label="State 751\n\l128 capture-list: capture-list \",\" • capture\l"]
  751 -> 156 [style=solid label="\"...\""]
  751 -> 443 [style=solid label="IDENTIFIER"]
  751 -> 444 [style=solid label="\"this\""]
  751 -> 936 [style=solid label="\"&\""]
  751 -> 447 [style=solid label="\"*\""]
  751 -> 448 [style=dashed label="ELLIPSIS-opt"]
  751 -> 938 [style=dashed label="capture"]
  751 -> 452 [style=dashed label="init-capture"]
  751 -> 455 [style=dashed label="simple-capture"]
  751 -> "751R5d" [label="[IDENTIFIER]", style=solid]
 "751R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  752 [label="State 752\n\l388 lambda-introducer: \"[\" lambda-capture-opt \"]\" •\l"]
  752 -> "752R388" [style=solid]
 "752R388" [label="R388", fillcolor=3, shape=diamond, style=filled]
  753 [label="State 753\n\l504 overloadable-operator: \"(\" \")\" •\l"]
  753 -> "753R504" [style=solid]
 "753R504" [label="R504", fillcolor=3, shape=diamond, style=filled]
  754 [label="State 754\n\l505 overloadable-operator: \"[\" \"]\" •\l"]
  754 -> "754R505" [style=solid]
 "754R505" [label="R505", fillcolor=3, shape=diamond, style=filled]
  755 [label="State 755\n\l502 overloadable-operator: \"delete\" \"[\" • \"]\"\l"]
  755 -> 939 [style=solid label="\"]\""]
  756 [label="State 756\n\l501 overloadable-operator: \"new\" \"[\" • \"]\"\l"]
  756 -> 940 [style=solid label="\"]\""]
  757 [label="State 757\n\l498 operator-function-id: \"operator\" overloadable-operator \"<\" • template-argument-list-opt \">\"\l"]
  757 -> 238 [style=solid label="IDENTIFIER"]
  757 -> 239 [style=solid label="\"noexcept\""]
  757 -> 240 [style=solid label="\"!\""]
  757 -> 241 [style=solid label="\"::\""]
  757 -> 242 [style=solid label="\"this\""]
  757 -> 8 [style=solid label="\"typename\""]
  757 -> 243 [style=solid label="\"+\""]
  757 -> 244 [style=solid label="\"-\""]
  757 -> 245 [style=solid label="\"(\""]
  757 -> 246 [style=solid label="\"&\""]
  757 -> 247 [style=solid label="\"[\""]
  757 -> 248 [style=solid label="\"co_await\""]
  757 -> 12 [style=solid label="\"class\""]
  757 -> 13 [style=solid label="\"struct\""]
  757 -> 14 [style=solid label="\"union\""]
  757 -> 249 [style=solid label="\"operator\""]
  757 -> 15 [style=solid label="\"const\""]
  757 -> 16 [style=solid label="\"volatile\""]
  757 -> 21 [style=solid label="\"decltype\""]
  757 -> 125 [style=solid label="\"enum\""]
  757 -> 250 [style=solid label="\"*\""]
  757 -> 251 [style=solid label="\"requires\""]
  757 -> 252 [style=solid label="\"~\""]
  757 -> 253 [style=solid label="\"++\""]
  757 -> 254 [style=solid label="\"--\""]
  757 -> 255 [style=solid label="\"dynamic_cast\""]
  757 -> 256 [style=solid label="\"static_cast\""]
  757 -> 257 [style=solid label="\"reinterpret_cast\""]
  757 -> 258 [style=solid label="\"const_cast\""]
  757 -> 259 [style=solid label="\"typeid\""]
  757 -> 260 [style=solid label="\"literal\""]
  757 -> 27 [style=solid label="\"char\""]
  757 -> 28 [style=solid label="\"char8_t\""]
  757 -> 29 [style=solid label="\"char16_t\""]
  757 -> 30 [style=solid label="\"char32_t\""]
  757 -> 31 [style=solid label="\"wchar_t\""]
  757 -> 32 [style=solid label="\"bool\""]
  757 -> 33 [style=solid label="\"short\""]
  757 -> 34 [style=solid label="\"int\""]
  757 -> 35 [style=solid label="\"long\""]
  757 -> 36 [style=solid label="\"signed\""]
  757 -> 37 [style=solid label="\"unsigned\""]
  757 -> 38 [style=solid label="\"float\""]
  757 -> 39 [style=solid label="\"double\""]
  757 -> 40 [style=solid label="\"void\""]
  757 -> 118 [style=solid label="STRING_LITERAL"]
  757 -> 262 [style=solid label="\"sizeof\""]
  757 -> 263 [style=solid label="\"alignof\""]
  757 -> 265 [style=dashed label="SCOPE-opt"]
  757 -> 266 [style=dashed label="additive-expression"]
  757 -> 267 [style=dashed label="and-expression"]
  757 -> 269 [style=dashed label="await-expression"]
  757 -> 270 [style=dashed label="cast-expression"]
  757 -> 406 [style=dashed label="class-key"]
  757 -> 55 [style=dashed label="class-name"]
  757 -> 271 [style=dashed label="compare-expression"]
  757 -> 309 [style=dashed label="conditional-expression"]
  757 -> 407 [style=dashed label="constant-expression"]
  757 -> 273 [style=dashed label="conversion-function-id"]
  757 -> 57 [style=dashed label="cv-qualifier"]
  757 -> 63 [style=dashed label="decltype-specifier"]
  757 -> 274 [style=dashed label="delete-expression"]
  757 -> 66 [style=dashed label="elaborated-enum-specifier"]
  757 -> 67 [style=dashed label="elaborated-type-specifier"]
  757 -> 71 [style=dashed label="enum-name"]
  757 -> 275 [style=dashed label="equality-expression"]
  757 -> 276 [style=dashed label="exclusive-or-expression"]
  757 -> 278 [style=dashed label="fold-expression"]
  757 -> 408 [style=dashed label="id-expression"]
  757 -> 280 [style=dashed label="inclusive-or-expression"]
  757 -> 281 [style=dashed label="lambda-expression"]
  757 -> 282 [style=dashed label="lambda-introducer"]
  757 -> 283 [style=dashed label="literal-operator-id"]
  757 -> 284 [style=dashed label="logical-and-expression"]
  757 -> 311 [style=dashed label="logical-or-expression"]
  757 -> 286 [style=dashed label="multiplicative-expression"]
  757 -> 85 [style=dashed label="namespace-alias"]
  757 -> 88 [style=dashed label="namespace-name"]
  757 -> 287 [style=dashed label="nested-name-specifier"]
  757 -> 90 [style=dashed label="nested-name-specifier-opt"]
  757 -> 288 [style=dashed label="new-expression"]
  757 -> 289 [style=dashed label="noexcept-expression"]
  757 -> 290 [style=dashed label="operator-function-id"]
  757 -> 94 [style=dashed label="placeholder-type-specifier"]
  757 -> 291 [style=dashed label="pm-expression"]
  757 -> 292 [style=dashed label="postfix-expression"]
  757 -> 293 [style=dashed label="primary-expression"]
  757 -> 294 [style=dashed label="qualified-id"]
  757 -> 295 [style=dashed label="relational-expression"]
  757 -> 296 [style=dashed label="requires-expression"]
  757 -> 297 [style=dashed label="shift-expression"]
  757 -> 298 [style=dashed label="simple-template-id"]
  757 -> 409 [style=dashed label="simple-type-specifier"]
  757 -> 300 [style=dashed label="string-literal"]
  757 -> 410 [style=dashed label="template-argument"]
  757 -> 411 [style=dashed label="template-argument-list"]
  757 -> 941 [style=dashed label="template-argument-list-opt"]
  757 -> 301 [style=dashed label="template-id"]
  757 -> 102 [style=dashed label="template-name"]
  757 -> 104 [style=dashed label="type-constraint"]
  757 -> 105 [style=dashed label="type-constraint-opt"]
  757 -> 413 [style=dashed label="type-id"]
  757 -> 106 [style=dashed label="type-name"]
  757 -> 414 [style=dashed label="type-specifier"]
  757 -> 415 [style=dashed label="type-specifier-seq"]
  757 -> 108 [style=dashed label="typedef-name"]
  757 -> 416 [style=dashed label="typename-specifier"]
  757 -> 304 [style=dashed label="unary-expression"]
  757 -> 305 [style=dashed label="unary-operator"]
  757 -> 306 [style=dashed label="unqualified-id"]
  757 -> "757R19" [style=solid]
 "757R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  757 -> "757R458d" [label="[IDENTIFIER]", style=solid]
 "757R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  757 -> "757R688" [label="[\">\"]", style=solid]
 "757R688" [label="R688", fillcolor=3, shape=diamond, style=filled]
  757 -> "757R710d" [label="[\"decltype\"]", style=solid]
 "757R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  757 -> "757R710" [label="[\"auto\"]", style=solid]
 "757R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  758 [label="State 758\n\l392 literal-operator-id: \"operator\" string-literal IDENTIFIER •\l735 ud-suffix: IDENTIFIER •\l"]
  758 -> "758R392" [style=solid]
 "758R392" [label="R392", fillcolor=3, shape=diamond, style=filled]
  758 -> "758R735d" [label="[\",\", \"constexpr\", \"...\", \"export\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"::\", \"template\", \"typename\", \"virtual\", \"+\", \"-\", \"using\", \"=\", \";\", \"alignas\", \"(\", \")\", \"&\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", \"[\", \"]\", \":\", \"{\", \"}\", \"class\", \"struct\", \"union\", \"final\", \"<=>\", \"concept\", \"?\", \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"->\", \".\", \"enum\", \"==\", \"!=\", \"^\", \"<\", \">\", \"explicit\", \"*\", \"/\", \"%\", \"|\", \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import\", \"namespace\", \"requires\", \"~\", \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"override\"]", style=solid]
 "758R735d" [label="R735", fillcolor=5, shape=diamond, style=filled]
  759 [label="State 759\n\l762 user-defined-string-literal: string-literal ud-suffix •\l"]
  759 -> "759R762" [style=solid]
 "759R762" [label="R762", fillcolor=3, shape=diamond, style=filled]
  760 [label="State 760\n\l168 conversion-declarator-opt: conversion-declarator •\l"]
  760 -> "760R168" [style=solid]
 "760R168" [label="R168", fillcolor=3, shape=diamond, style=filled]
  761 [label="State 761\n\l170 conversion-type-id: type-specifier-seq conversion-declarator-opt •\l"]
  761 -> "761R170" [style=solid]
 "761R170" [label="R170", fillcolor=3, shape=diamond, style=filled]
  762 [label="State 762\n\l166 conversion-declarator: ptr-operator • conversion-declarator-opt\l"]
  762 -> 4 [style=solid label="IDENTIFIER"]
  762 -> 6 [style=solid label="\"::\""]
  762 -> 160 [style=solid label="\"&\""]
  762 -> 163 [style=solid label="\"&&\""]
  762 -> 21 [style=solid label="\"decltype\""]
  762 -> 164 [style=solid label="\"*\""]
  762 -> 55 [style=dashed label="class-name"]
  762 -> 760 [style=dashed label="conversion-declarator"]
  762 -> 942 [style=dashed label="conversion-declarator-opt"]
  762 -> 121 [style=dashed label="decltype-specifier"]
  762 -> 71 [style=dashed label="enum-name"]
  762 -> 85 [style=dashed label="namespace-alias"]
  762 -> 88 [style=dashed label="namespace-name"]
  762 -> 187 [style=dashed label="nested-name-specifier"]
  762 -> 762 [style=dashed label="ptr-operator"]
  762 -> 96 [style=dashed label="simple-template-id"]
  762 -> 102 [style=dashed label="template-name"]
  762 -> 106 [style=dashed label="type-name"]
  762 -> 108 [style=dashed label="typedef-name"]
  762 -> "762R167d" [label="[IDENTIFIER, \"::\", \"&\", \"&&\", \"decltype\", \"*\"]", style=solid]
 "762R167d" [label="R167", fillcolor=5, shape=diamond, style=filled]
  762 -> "762R167" [style=solid]
 "762R167" [label="R167", fillcolor=3, shape=diamond, style=filled]
  763 [label="State 763\n\l616 requirement-parameter-list: \"(\" parameter-declaration-clause • \")\"\l"]
  763 -> 943 [style=solid label="\")\""]
  764 [label="State 764\n\l615 requirement-body: \"{\" • requirement-seq \"}\"\l"]
  764 -> 238 [style=solid label="IDENTIFIER"]
  764 -> 239 [style=solid label="\"noexcept\""]
  764 -> 240 [style=solid label="\"!\""]
  764 -> 241 [style=solid label="\"::\""]
  764 -> 242 [style=solid label="\"this\""]
  764 -> 944 [style=solid label="\"typename\""]
  764 -> 243 [style=solid label="\"+\""]
  764 -> 244 [style=solid label="\"-\""]
  764 -> 245 [style=solid label="\"(\""]
  764 -> 246 [style=solid label="\"&\""]
  764 -> 247 [style=solid label="\"[\""]
  764 -> 248 [style=solid label="\"co_await\""]
  764 -> 945 [style=solid label="\"{\""]
  764 -> 249 [style=solid label="\"operator\""]
  764 -> 21 [style=solid label="\"decltype\""]
  764 -> 250 [style=solid label="\"*\""]
  764 -> 946 [style=solid label="\"requires\""]
  764 -> 252 [style=solid label="\"~\""]
  764 -> 253 [style=solid label="\"++\""]
  764 -> 254 [style=solid label="\"--\""]
  764 -> 255 [style=solid label="\"dynamic_cast\""]
  764 -> 256 [style=solid label="\"static_cast\""]
  764 -> 257 [style=solid label="\"reinterpret_cast\""]
  764 -> 258 [style=solid label="\"const_cast\""]
  764 -> 259 [style=solid label="\"typeid\""]
  764 -> 260 [style=solid label="\"literal\""]
  764 -> 27 [style=solid label="\"char\""]
  764 -> 28 [style=solid label="\"char8_t\""]
  764 -> 29 [style=solid label="\"char16_t\""]
  764 -> 30 [style=solid label="\"char32_t\""]
  764 -> 31 [style=solid label="\"wchar_t\""]
  764 -> 32 [style=solid label="\"bool\""]
  764 -> 33 [style=solid label="\"short\""]
  764 -> 34 [style=solid label="\"int\""]
  764 -> 35 [style=solid label="\"long\""]
  764 -> 36 [style=solid label="\"signed\""]
  764 -> 37 [style=solid label="\"unsigned\""]
  764 -> 38 [style=solid label="\"float\""]
  764 -> 39 [style=solid label="\"double\""]
  764 -> 40 [style=solid label="\"void\""]
  764 -> 118 [style=solid label="STRING_LITERAL"]
  764 -> 261 [style=solid label="\"throw\""]
  764 -> 262 [style=solid label="\"sizeof\""]
  764 -> 263 [style=solid label="\"alignof\""]
  764 -> 264 [style=solid label="\"co_yield\""]
  764 -> 265 [style=dashed label="SCOPE-opt"]
  764 -> 266 [style=dashed label="additive-expression"]
  764 -> 267 [style=dashed label="and-expression"]
  764 -> 268 [style=dashed label="assignment-expression"]
  764 -> 269 [style=dashed label="await-expression"]
  764 -> 270 [style=dashed label="cast-expression"]
  764 -> 55 [style=dashed label="class-name"]
  764 -> 271 [style=dashed label="compare-expression"]
  764 -> 947 [style=dashed label="compound-requirement"]
  764 -> 272 [style=dashed label="conditional-expression"]
  764 -> 273 [style=dashed label="conversion-function-id"]
  764 -> 63 [style=dashed label="decltype-specifier"]
  764 -> 274 [style=dashed label="delete-expression"]
  764 -> 71 [style=dashed label="enum-name"]
  764 -> 275 [style=dashed label="equality-expression"]
  764 -> 276 [style=dashed label="exclusive-or-expression"]
  764 -> 948 [style=dashed label="expression"]
  764 -> 278 [style=dashed label="fold-expression"]
  764 -> 279 [style=dashed label="id-expression"]
  764 -> 280 [style=dashed label="inclusive-or-expression"]
  764 -> 281 [style=dashed label="lambda-expression"]
  764 -> 282 [style=dashed label="lambda-introducer"]
  764 -> 283 [style=dashed label="literal-operator-id"]
  764 -> 284 [style=dashed label="logical-and-expression"]
  764 -> 285 [style=dashed label="logical-or-expression"]
  764 -> 286 [style=dashed label="multiplicative-expression"]
  764 -> 85 [style=dashed label="namespace-alias"]
  764 -> 88 [style=dashed label="namespace-name"]
  764 -> 287 [style=dashed label="nested-name-specifier"]
  764 -> 90 [style=dashed label="nested-name-specifier-opt"]
  764 -> 949 [style=dashed label="nested-requirement"]
  764 -> 288 [style=dashed label="new-expression"]
  764 -> 289 [style=dashed label="noexcept-expression"]
  764 -> 290 [style=dashed label="operator-function-id"]
  764 -> 94 [style=dashed label="placeholder-type-specifier"]
  764 -> 291 [style=dashed label="pm-expression"]
  764 -> 292 [style=dashed label="postfix-expression"]
  764 -> 293 [style=dashed label="primary-expression"]
  764 -> 294 [style=dashed label="qualified-id"]
  764 -> 295 [style=dashed label="relational-expression"]
  764 -> 950 [style=dashed label="requirement"]
  764 -> 951 [style=dashed label="requirement-seq"]
  764 -> 296 [style=dashed label="requires-expression"]
  764 -> 297 [style=dashed label="shift-expression"]
  764 -> 952 [style=dashed label="simple-requirement"]
  764 -> 298 [style=dashed label="simple-template-id"]
  764 -> 299 [style=dashed label="simple-type-specifier"]
  764 -> 300 [style=dashed label="string-literal"]
  764 -> 301 [style=dashed label="template-id"]
  764 -> 102 [style=dashed label="template-name"]
  764 -> 302 [style=dashed label="throw-expression"]
  764 -> 104 [style=dashed label="type-constraint"]
  764 -> 105 [style=dashed label="type-constraint-opt"]
  764 -> 106 [style=dashed label="type-name"]
  764 -> 953 [style=dashed label="type-requirement"]
  764 -> 108 [style=dashed label="typedef-name"]
  764 -> 303 [style=dashed label="typename-specifier"]
  764 -> 304 [style=dashed label="unary-expression"]
  764 -> 305 [style=dashed label="unary-operator"]
  764 -> 306 [style=dashed label="unqualified-id"]
  764 -> 307 [style=dashed label="yield-expression"]
  764 -> "764R19" [style=solid]
 "764R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  764 -> "764R458d" [label="[IDENTIFIER]", style=solid]
 "764R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  764 -> "764R710d" [label="[\"decltype\"]", style=solid]
 "764R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  764 -> "764R710" [label="[\"auto\"]", style=solid]
 "764R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  765 [label="State 765\n\l624 requires-expression: \"requires\" requirement-parameter-list-opt requirement-body •\l"]
  765 -> "765R624" [style=solid]
 "765R624" [label="R624", fillcolor=3, shape=diamond, style=filled]
  766 [label="State 766\n\l570 postfix-expression: \"dynamic_cast\" \"<\" type-id • \">\" \"(\" expression \")\"\l"]
  766 -> 954 [style=solid label="\">\""]
  767 [label="State 767\n\l571 postfix-expression: \"static_cast\" \"<\" type-id • \">\" \"(\" expression \")\"\l"]
  767 -> 955 [style=solid label="\">\""]
  768 [label="State 768\n\l572 postfix-expression: \"reinterpret_cast\" \"<\" type-id • \">\" \"(\" expression \")\"\l"]
  768 -> 956 [style=solid label="\">\""]
  769 [label="State 769\n\l573 postfix-expression: \"const_cast\" \"<\" type-id • \">\" \"(\" expression \")\"\l"]
  769 -> 957 [style=solid label="\">\""]
  770 [label="State 770\n\l278 expression: expression • \",\" assignment-expression\l574 postfix-expression: \"typeid\" \"(\" expression • \")\"\l"]
  770 -> 534 [style=solid label="\",\""]
  770 -> 958 [style=solid label="\")\""]
  771 [label="State 771\n\l575 postfix-expression: \"typeid\" \"(\" type-id • \")\"\l"]
  771 -> 959 [style=solid label="\")\""]
  772 [label="State 772\n\l743 unary-expression: \"sizeof\" \"...\" \"(\" • IDENTIFIER \")\"\l"]
  772 -> 960 [style=solid label="IDENTIFIER"]
  773 [label="State 773\n\l742 unary-expression: \"sizeof\" \"(\" type-id • \")\"\l"]
  773 -> 961 [style=solid label="\")\""]
  774 [label="State 774\n\l744 unary-expression: \"alignof\" \"(\" type-id • \")\"\l"]
  774 -> 962 [style=solid label="\")\""]
  775 [label="State 775\n\l223 delete-expression: SCOPE-opt \"delete\" \"[\" • \"]\" cast-expression\l388 lambda-introducer: \"[\" • lambda-capture-opt \"]\"\l"]
  775 -> 156 [style=solid label="\"...\""]
  775 -> 443 [style=solid label="IDENTIFIER"]
  775 -> 444 [style=solid label="\"this\""]
  775 -> 445 [style=solid label="\"=\""]
  775 -> 446 [style=solid label="\"&\""]
  775 -> 963 [style=solid label="\"]\""]
  775 -> 447 [style=solid label="\"*\""]
  775 -> 448 [style=dashed label="ELLIPSIS-opt"]
  775 -> 449 [style=dashed label="capture"]
  775 -> 450 [style=dashed label="capture-default"]
  775 -> 451 [style=dashed label="capture-list"]
  775 -> 452 [style=dashed label="init-capture"]
  775 -> 453 [style=dashed label="lambda-capture"]
  775 -> 454 [style=dashed label="lambda-capture-opt"]
  775 -> 455 [style=dashed label="simple-capture"]
  775 -> "775R5d" [label="[IDENTIFIER]", style=solid]
 "775R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  775 -> "775R382d" [label="[\"]\"]", style=solid]
 "775R382d" [label="R382", fillcolor=5, shape=diamond, style=filled]
  776 [label="State 776\n\l222 delete-expression: SCOPE-opt \"delete\" cast-expression •\l"]
  776 -> "776R222" [style=solid]
 "776R222" [label="R222", fillcolor=3, shape=diamond, style=filled]
  777 [label="State 777\n\l472 new-placement: \"(\" • expression-list \")\"\l"]
  777 -> 238 [style=solid label="IDENTIFIER"]
  777 -> 239 [style=solid label="\"noexcept\""]
  777 -> 240 [style=solid label="\"!\""]
  777 -> 241 [style=solid label="\"::\""]
  777 -> 242 [style=solid label="\"this\""]
  777 -> 8 [style=solid label="\"typename\""]
  777 -> 243 [style=solid label="\"+\""]
  777 -> 244 [style=solid label="\"-\""]
  777 -> 245 [style=solid label="\"(\""]
  777 -> 246 [style=solid label="\"&\""]
  777 -> 247 [style=solid label="\"[\""]
  777 -> 248 [style=solid label="\"co_await\""]
  777 -> 380 [style=solid label="\"{\""]
  777 -> 249 [style=solid label="\"operator\""]
  777 -> 21 [style=solid label="\"decltype\""]
  777 -> 250 [style=solid label="\"*\""]
  777 -> 251 [style=solid label="\"requires\""]
  777 -> 252 [style=solid label="\"~\""]
  777 -> 253 [style=solid label="\"++\""]
  777 -> 254 [style=solid label="\"--\""]
  777 -> 255 [style=solid label="\"dynamic_cast\""]
  777 -> 256 [style=solid label="\"static_cast\""]
  777 -> 257 [style=solid label="\"reinterpret_cast\""]
  777 -> 258 [style=solid label="\"const_cast\""]
  777 -> 259 [style=solid label="\"typeid\""]
  777 -> 260 [style=solid label="\"literal\""]
  777 -> 27 [style=solid label="\"char\""]
  777 -> 28 [style=solid label="\"char8_t\""]
  777 -> 29 [style=solid label="\"char16_t\""]
  777 -> 30 [style=solid label="\"char32_t\""]
  777 -> 31 [style=solid label="\"wchar_t\""]
  777 -> 32 [style=solid label="\"bool\""]
  777 -> 33 [style=solid label="\"short\""]
  777 -> 34 [style=solid label="\"int\""]
  777 -> 35 [style=solid label="\"long\""]
  777 -> 36 [style=solid label="\"signed\""]
  777 -> 37 [style=solid label="\"unsigned\""]
  777 -> 38 [style=solid label="\"float\""]
  777 -> 39 [style=solid label="\"double\""]
  777 -> 40 [style=solid label="\"void\""]
  777 -> 118 [style=solid label="STRING_LITERAL"]
  777 -> 261 [style=solid label="\"throw\""]
  777 -> 262 [style=solid label="\"sizeof\""]
  777 -> 263 [style=solid label="\"alignof\""]
  777 -> 264 [style=solid label="\"co_yield\""]
  777 -> 265 [style=dashed label="SCOPE-opt"]
  777 -> 266 [style=dashed label="additive-expression"]
  777 -> 267 [style=dashed label="and-expression"]
  777 -> 642 [style=dashed label="assignment-expression"]
  777 -> 269 [style=dashed label="await-expression"]
  777 -> 643 [style=dashed label="braced-init-list"]
  777 -> 270 [style=dashed label="cast-expression"]
  777 -> 55 [style=dashed label="class-name"]
  777 -> 271 [style=dashed label="compare-expression"]
  777 -> 272 [style=dashed label="conditional-expression"]
  777 -> 273 [style=dashed label="conversion-function-id"]
  777 -> 63 [style=dashed label="decltype-specifier"]
  777 -> 274 [style=dashed label="delete-expression"]
  777 -> 71 [style=dashed label="enum-name"]
  777 -> 275 [style=dashed label="equality-expression"]
  777 -> 276 [style=dashed label="exclusive-or-expression"]
  777 -> 964 [style=dashed label="expression-list"]
  777 -> 278 [style=dashed label="fold-expression"]
  777 -> 279 [style=dashed label="id-expression"]
  777 -> 280 [style=dashed label="inclusive-or-expression"]
  777 -> 646 [style=dashed label="initializer-clause"]
  777 -> 647 [style=dashed label="initializer-list"]
  777 -> 281 [style=dashed label="lambda-expression"]
  777 -> 282 [style=dashed label="lambda-introducer"]
  777 -> 283 [style=dashed label="literal-operator-id"]
  777 -> 284 [style=dashed label="logical-and-expression"]
  777 -> 285 [style=dashed label="logical-or-expression"]
  777 -> 286 [style=dashed label="multiplicative-expression"]
  777 -> 85 [style=dashed label="namespace-alias"]
  777 -> 88 [style=dashed label="namespace-name"]
  777 -> 287 [style=dashed label="nested-name-specifier"]
  777 -> 90 [style=dashed label="nested-name-specifier-opt"]
  777 -> 288 [style=dashed label="new-expression"]
  777 -> 289 [style=dashed label="noexcept-expression"]
  777 -> 290 [style=dashed label="operator-function-id"]
  777 -> 94 [style=dashed label="placeholder-type-specifier"]
  777 -> 291 [style=dashed label="pm-expression"]
  777 -> 292 [style=dashed label="postfix-expression"]
  777 -> 293 [style=dashed label="primary-expression"]
  777 -> 294 [style=dashed label="qualified-id"]
  777 -> 295 [style=dashed label="relational-expression"]
  777 -> 296 [style=dashed label="requires-expression"]
  777 -> 297 [style=dashed label="shift-expression"]
  777 -> 298 [style=dashed label="simple-template-id"]
  777 -> 299 [style=dashed label="simple-type-specifier"]
  777 -> 300 [style=dashed label="string-literal"]
  777 -> 301 [style=dashed label="template-id"]
  777 -> 102 [style=dashed label="template-name"]
  777 -> 302 [style=dashed label="throw-expression"]
  777 -> 104 [style=dashed label="type-constraint"]
  777 -> 105 [style=dashed label="type-constraint-opt"]
  777 -> 106 [style=dashed label="type-name"]
  777 -> 108 [style=dashed label="typedef-name"]
  777 -> 303 [style=dashed label="typename-specifier"]
  777 -> 304 [style=dashed label="unary-expression"]
  777 -> 305 [style=dashed label="unary-operator"]
  777 -> 306 [style=dashed label="unqualified-id"]
  777 -> 307 [style=dashed label="yield-expression"]
  777 -> "777R19" [style=solid]
 "777R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  777 -> "777R458d" [label="[IDENTIFIER]", style=solid]
 "777R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  777 -> "777R710d" [label="[\"decltype\"]", style=solid]
 "777R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  777 -> "777R710" [label="[\"auto\"]", style=solid]
 "777R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  778 [label="State 778\n\l474 new-placement-opt: new-placement •\l"]
  778 -> "778R474" [style=solid]
 "778R474" [label="R474", fillcolor=3, shape=diamond, style=filled]
  779 [label="State 779\n\l466 new-expression: SCOPE-opt \"new\" new-placement-opt • new-type-id new-initializer-opt\l467               | SCOPE-opt \"new\" new-placement-opt • \"(\" type-id \")\" new-initializer-opt\l"]
  779 -> 4 [style=solid label="IDENTIFIER"]
  779 -> 6 [style=solid label="\"::\""]
  779 -> 8 [style=solid label="\"typename\""]
  779 -> 965 [style=solid label="\"(\""]
  779 -> 12 [style=solid label="\"class\""]
  779 -> 13 [style=solid label="\"struct\""]
  779 -> 14 [style=solid label="\"union\""]
  779 -> 15 [style=solid label="\"const\""]
  779 -> 16 [style=solid label="\"volatile\""]
  779 -> 21 [style=solid label="\"decltype\""]
  779 -> 125 [style=solid label="\"enum\""]
  779 -> 27 [style=solid label="\"char\""]
  779 -> 28 [style=solid label="\"char8_t\""]
  779 -> 29 [style=solid label="\"char16_t\""]
  779 -> 30 [style=solid label="\"char32_t\""]
  779 -> 31 [style=solid label="\"wchar_t\""]
  779 -> 32 [style=solid label="\"bool\""]
  779 -> 33 [style=solid label="\"short\""]
  779 -> 34 [style=solid label="\"int\""]
  779 -> 35 [style=solid label="\"long\""]
  779 -> 36 [style=solid label="\"signed\""]
  779 -> 37 [style=solid label="\"unsigned\""]
  779 -> 38 [style=solid label="\"float\""]
  779 -> 39 [style=solid label="\"double\""]
  779 -> 40 [style=solid label="\"void\""]
  779 -> 406 [style=dashed label="class-key"]
  779 -> 55 [style=dashed label="class-name"]
  779 -> 57 [style=dashed label="cv-qualifier"]
  779 -> 63 [style=dashed label="decltype-specifier"]
  779 -> 66 [style=dashed label="elaborated-enum-specifier"]
  779 -> 67 [style=dashed label="elaborated-type-specifier"]
  779 -> 71 [style=dashed label="enum-name"]
  779 -> 85 [style=dashed label="namespace-alias"]
  779 -> 88 [style=dashed label="namespace-name"]
  779 -> 89 [style=dashed label="nested-name-specifier"]
  779 -> 90 [style=dashed label="nested-name-specifier-opt"]
  779 -> 966 [style=dashed label="new-type-id"]
  779 -> 94 [style=dashed label="placeholder-type-specifier"]
  779 -> 96 [style=dashed label="simple-template-id"]
  779 -> 97 [style=dashed label="simple-type-specifier"]
  779 -> 102 [style=dashed label="template-name"]
  779 -> 104 [style=dashed label="type-constraint"]
  779 -> 105 [style=dashed label="type-constraint-opt"]
  779 -> 106 [style=dashed label="type-name"]
  779 -> 414 [style=dashed label="type-specifier"]
  779 -> 967 [style=dashed label="type-specifier-seq"]
  779 -> 108 [style=dashed label="typedef-name"]
  779 -> 109 [style=dashed label="typename-specifier"]
  779 -> "779R458d" [label="[IDENTIFIER]", style=solid]
 "779R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  779 -> "779R710d" [label="[\"decltype\"]", style=solid]
 "779R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  779 -> "779R710" [label="[]", style=solid]
 "779R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  780 [label="State 780\n\l 42 additive-expression: additive-expression \"+\" multiplicative-expression •\l440 multiplicative-expression: multiplicative-expression • \"*\" pm-expression\l441                          | multiplicative-expression • \"/\" pm-expression\l442                          | multiplicative-expression • \"%\" pm-expression\l"]
  780 -> 559 [style=solid label="\"*\""]
  780 -> 560 [style=solid label="\"/\""]
  780 -> 561 [style=solid label="\"%\""]
  780 -> "780R42" [style=solid]
 "780R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  781 [label="State 781\n\l 43 additive-expression: additive-expression \"-\" multiplicative-expression •\l440 multiplicative-expression: multiplicative-expression • \"*\" pm-expression\l441                          | multiplicative-expression • \"/\" pm-expression\l442                          | multiplicative-expression • \"%\" pm-expression\l"]
  781 -> 559 [style=solid label="\"*\""]
  781 -> 560 [style=solid label="\"/\""]
  781 -> 561 [style=solid label="\"%\""]
  781 -> "781R43" [style=solid]
 "781R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  782 [label="State 782\n\l 48 and-expression: and-expression \"&\" equality-expression •\l257 equality-expression: equality-expression • \"==\" relational-expression\l258                    | equality-expression • \"!=\" relational-expression\l"]
  782 -> 531 [style=solid label="\"==\""]
  782 -> 532 [style=solid label="\"!=\""]
  782 -> "782R48" [style=solid]
 "782R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  783 [label="State 783\n\l147 compare-expression: compare-expression \"<=>\" shift-expression •\l634 shift-expression: shift-expression • \"<<\" additive-expression\l635                 | shift-expression • \">>\" additive-expression\l"]
  783 -> 576 [style=solid label="\"<<\""]
  783 -> 577 [style=solid label="\">>\""]
  783 -> "783R147" [style=solid]
 "783R147" [label="R147", fillcolor=3, shape=diamond, style=filled]
  784 [label="State 784\n\l257 equality-expression: equality-expression \"==\" relational-expression •\l607 relational-expression: relational-expression • \"<\" compare-expression\l608                      | relational-expression • \">\" compare-expression\l609                      | relational-expression • \"<=\" compare-expression\l610                      | relational-expression • \">=\" compare-expression\l"]
  784 -> 572 [style=solid label="\"<\""]
  784 -> 573 [style=solid label="\">\""]
  784 -> 574 [style=solid label="\"<=\""]
  784 -> 575 [style=solid label="\">=\""]
  784 -> "784R257" [style=solid]
 "784R257" [label="R257", fillcolor=3, shape=diamond, style=filled]
  785 [label="State 785\n\l258 equality-expression: equality-expression \"!=\" relational-expression •\l607 relational-expression: relational-expression • \"<\" compare-expression\l608                      | relational-expression • \">\" compare-expression\l609                      | relational-expression • \"<=\" compare-expression\l610                      | relational-expression • \">=\" compare-expression\l"]
  785 -> 572 [style=solid label="\"<\""]
  785 -> 573 [style=solid label="\">\""]
  785 -> 574 [style=solid label="\"<=\""]
  785 -> 575 [style=solid label="\">=\""]
  785 -> "785R258" [style=solid]
 "785R258" [label="R258", fillcolor=3, shape=diamond, style=filled]
  786 [label="State 786\n\l 48 and-expression: and-expression • \"&\" equality-expression\l263 exclusive-or-expression: exclusive-or-expression \"^\" and-expression •\l"]
  786 -> 529 [style=solid label="\"&\""]
  786 -> "786R263" [style=solid]
 "786R263" [label="R263", fillcolor=3, shape=diamond, style=filled]
  787 [label="State 787\n\l278 expression: expression \",\" assignment-expression •\l"]
  787 -> "787R278" [style=solid]
 "787R278" [label="R278", fillcolor=3, shape=diamond, style=filled]
  788 [label="State 788\n\l263 exclusive-or-expression: exclusive-or-expression • \"^\" and-expression\l345 inclusive-or-expression: inclusive-or-expression \"|\" exclusive-or-expression •\l"]
  788 -> 533 [style=solid label="\"^\""]
  788 -> "788R345" [style=solid]
 "788R345" [label="R345", fillcolor=3, shape=diamond, style=filled]
  789 [label="State 789\n\l385 lambda-declarator: \"(\" parameter-declaration-clause • \")\" lambda-specifiers requires-clause-opt\l"]
  789 -> 968 [style=solid label="\")\""]
  790 [label="State 790\n\l387 lambda-expression: lambda-introducer \"<\" template-parameter-list • \">\" requires-clause-opt lambda-declarator compound-statement\l700 template-parameter-list: template-parameter-list • \",\" template-parameter\l"]
  790 -> 425 [style=solid label="\",\""]
  790 -> 969 [style=solid label="\">\""]
  791 [label="State 791\n\l478 noexcept-specifier: \"noexcept\" • \"(\" constant-expression \")\"\l479                   | \"noexcept\" •\l"]
  791 -> 970 [style=solid label="\"(\""]
  791 -> "791R479d" [label="[\"(\"]", style=solid]
 "791R479d" [label="R479", fillcolor=5, shape=diamond, style=filled]
  791 -> "791R479" [style=solid]
 "791R479" [label="R479", fillcolor=3, shape=diamond, style=filled]
  792 [label="State 792\n\l481 noexcept-specifier-opt: noexcept-specifier •\l"]
  792 -> "792R481" [style=solid]
 "792R481" [label="R481", fillcolor=3, shape=diamond, style=filled]
  793 [label="State 793\n\l389 lambda-specifiers: decl-specifier-seq-opt noexcept-specifier-opt • attribute-specifier-seq-opt trailing-return-type-opt\l"]
  793 -> 177 [style=dashed label="attribute-specifier-seq"]
  793 -> 971 [style=dashed label="attribute-specifier-seq-opt"]
  793 -> "793R83" [style=solid]
 "793R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  794 [label="State 794\n\l149 compound-statement: \"{\" • statement-seq-opt \"}\"\l"]
  794 -> 1 [style=solid label="\"constexpr\""]
  794 -> 150 [style=solid label="\"extern\""]
  794 -> 4 [style=solid label="IDENTIFIER"]
  794 -> 151 [style=solid label="\"inline\""]
  794 -> 6 [style=solid label="\"::\""]
  794 -> 8 [style=solid label="\"typename\""]
  794 -> 9 [style=solid label="\"virtual\""]
  794 -> 10 [style=solid label="\"using\""]
  794 -> 12 [style=solid label="\"class\""]
  794 -> 13 [style=solid label="\"struct\""]
  794 -> 14 [style=solid label="\"union\""]
  794 -> 15 [style=solid label="\"const\""]
  794 -> 16 [style=solid label="\"volatile\""]
  794 -> 17 [style=solid label="\"friend\""]
  794 -> 18 [style=solid label="\"typedef\""]
  794 -> 19 [style=solid label="\"consteval\""]
  794 -> 20 [style=solid label="\"constinit\""]
  794 -> 21 [style=solid label="\"decltype\""]
  794 -> 22 [style=solid label="\"enum\""]
  794 -> 23 [style=solid label="\"explicit\""]
  794 -> 972 [style=solid label="\"namespace\""]
  794 -> 27 [style=solid label="\"char\""]
  794 -> 28 [style=solid label="\"char8_t\""]
  794 -> 29 [style=solid label="\"char16_t\""]
  794 -> 30 [style=solid label="\"char32_t\""]
  794 -> 31 [style=solid label="\"wchar_t\""]
  794 -> 32 [style=solid label="\"bool\""]
  794 -> 33 [style=solid label="\"short\""]
  794 -> 34 [style=solid label="\"int\""]
  794 -> 35 [style=solid label="\"long\""]
  794 -> 36 [style=solid label="\"signed\""]
  794 -> 37 [style=solid label="\"unsigned\""]
  794 -> 38 [style=solid label="\"float\""]
  794 -> 39 [style=solid label="\"double\""]
  794 -> 40 [style=solid label="\"void\""]
  794 -> 41 [style=solid label="\"static_assert\""]
  794 -> 42 [style=solid label="\"static\""]
  794 -> 43 [style=solid label="\"thread_local\""]
  794 -> 44 [style=solid label="\"mutable\""]
  794 -> 47 [style=dashed label="alias-declaration"]
  794 -> 48 [style=dashed label="asm-declaration"]
  794 -> 973 [style=dashed label="attribute-specifier-seq"]
  794 -> 974 [style=dashed label="attribute-specifier-seq-opt"]
  794 -> 975 [style=dashed label="block-declaration"]
  794 -> 53 [style=dashed label="class-head"]
  794 -> 54 [style=dashed label="class-key"]
  794 -> 55 [style=dashed label="class-name"]
  794 -> 56 [style=dashed label="class-specifier"]
  794 -> 57 [style=dashed label="cv-qualifier"]
  794 -> 58 [style=dashed label="decl-specifier"]
  794 -> 59 [style=dashed label="decl-specifier-seq"]
  794 -> 976 [style=dashed label="declaration-statement"]
  794 -> 63 [style=dashed label="decltype-specifier"]
  794 -> 65 [style=dashed label="defining-type-specifier"]
  794 -> 66 [style=dashed label="elaborated-enum-specifier"]
  794 -> 67 [style=dashed label="elaborated-type-specifier"]
  794 -> 69 [style=dashed label="enum-head"]
  794 -> 70 [style=dashed label="enum-key"]
  794 -> 71 [style=dashed label="enum-name"]
  794 -> 72 [style=dashed label="enum-specifier"]
  794 -> 155 [style=dashed label="explicit-specifier"]
  794 -> 79 [style=dashed label="function-specifier"]
  794 -> 977 [style=dashed label="labeled-statement"]
  794 -> 85 [style=dashed label="namespace-alias"]
  794 -> 86 [style=dashed label="namespace-alias-definition"]
  794 -> 88 [style=dashed label="namespace-name"]
  794 -> 89 [style=dashed label="nested-name-specifier"]
  794 -> 90 [style=dashed label="nested-name-specifier-opt"]
  794 -> 93 [style=dashed label="opaque-enum-declaration"]
  794 -> 94 [style=dashed label="placeholder-type-specifier"]
  794 -> 95 [style=dashed label="simple-declaration"]
  794 -> 96 [style=dashed label="simple-template-id"]
  794 -> 97 [style=dashed label="simple-type-specifier"]
  794 -> 978 [style=dashed label="statement"]
  794 -> 979 [style=dashed label="statement-seq"]
  794 -> 980 [style=dashed label="statement-seq-opt"]
  794 -> 98 [style=dashed label="static_assert-declaration"]
  794 -> 99 [style=dashed label="storage-class-specifier"]
  794 -> 102 [style=dashed label="template-name"]
  794 -> 104 [style=dashed label="type-constraint"]
  794 -> 105 [style=dashed label="type-constraint-opt"]
  794 -> 106 [style=dashed label="type-name"]
  794 -> 107 [style=dashed label="type-specifier"]
  794 -> 108 [style=dashed label="typedef-name"]
  794 -> 109 [style=dashed label="typename-specifier"]
  794 -> 111 [style=dashed label="using-declaration"]
  794 -> 112 [style=dashed label="using-directive"]
  794 -> 113 [style=dashed label="using-enum-declaration"]
  794 -> "794R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "794R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  794 -> "794R83" [style=solid]
 "794R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  794 -> "794R458d" [label="[IDENTIFIER]", style=solid]
 "794R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  794 -> "794R674" [label="[\"}\"]", style=solid]
 "794R674" [label="R674", fillcolor=3, shape=diamond, style=filled]
  794 -> "794R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "794R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  795 [label="State 795\n\l386 lambda-expression: lambda-introducer lambda-declarator compound-statement •\l"]
  795 -> "795R386" [style=solid]
 "795R386" [label="R386", fillcolor=3, shape=diamond, style=filled]
  796 [label="State 796\n\l695 template-id: literal-operator-id \"<\" template-argument-list-opt • \">\"\l"]
  796 -> 981 [style=solid label="\">\""]
  797 [label="State 797\n\l345 inclusive-or-expression: inclusive-or-expression • \"|\" exclusive-or-expression\l395 logical-and-expression: logical-and-expression \"&&\" inclusive-or-expression •\l"]
  797 -> 536 [style=solid label="\"|\""]
  797 -> "797R395" [style=solid]
 "797R395" [label="R395", fillcolor=3, shape=diamond, style=filled]
  798 [label="State 798\n\l157 conditional-expression: logical-or-expression \"?\" expression • \":\" assignment-expression\l278 expression: expression • \",\" assignment-expression\l"]
  798 -> 534 [style=solid label="\",\""]
  798 -> 982 [style=solid label="\":\""]
  799 [label="State 799\n\l395 logical-and-expression: logical-and-expression • \"&&\" inclusive-or-expression\l397 logical-or-expression: logical-or-expression \"||\" logical-and-expression •\l"]
  799 -> 544 [style=solid label="\"&&\""]
  799 -> "799R397" [style=solid]
 "799R397" [label="R397", fillcolor=3, shape=diamond, style=filled]
  800 [label="State 800\n\l 53 assignment-expression: logical-or-expression assignment-operator initializer-clause •\l"]
  800 -> "800R53" [style=solid]
 "800R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  801 [label="State 801\n\l440 multiplicative-expression: multiplicative-expression \"*\" pm-expression •\l557 pm-expression: pm-expression • \".*\" cast-expression\l558              | pm-expression • \"->*\" cast-expression\l"]
  801 -> 564 [style=solid label="\".*\""]
  801 -> 565 [style=solid label="\"->*\""]
  801 -> "801R440" [style=solid]
 "801R440" [label="R440", fillcolor=3, shape=diamond, style=filled]
  802 [label="State 802\n\l441 multiplicative-expression: multiplicative-expression \"/\" pm-expression •\l557 pm-expression: pm-expression • \".*\" cast-expression\l558              | pm-expression • \"->*\" cast-expression\l"]
  802 -> 564 [style=solid label="\".*\""]
  802 -> 565 [style=solid label="\"->*\""]
  802 -> "802R441" [style=solid]
 "802R441" [label="R441", fillcolor=3, shape=diamond, style=filled]
  803 [label="State 803\n\l442 multiplicative-expression: multiplicative-expression \"%\" pm-expression •\l557 pm-expression: pm-expression • \".*\" cast-expression\l558              | pm-expression • \"->*\" cast-expression\l"]
  803 -> 564 [style=solid label="\".*\""]
  803 -> 565 [style=solid label="\"->*\""]
  803 -> "803R442" [style=solid]
 "803R442" [label="R442", fillcolor=3, shape=diamond, style=filled]
  804 [label="State 804\n\l696 template-name: IDENTIFIER •\l755 unqualified-id: IDENTIFIER •\l"]
  804 -> "804R696" [label="[\"<\"]", style=solid]
 "804R696" [label="R696", fillcolor=3, shape=diamond, style=filled]
  804 -> "804R755d" [label="[\"<\"]", style=solid]
 "804R755d" [label="R755", fillcolor=5, shape=diamond, style=filled]
  804 -> "804R755" [style=solid]
 "804R755" [label="R755", fillcolor=3, shape=diamond, style=filled]
  805 [label="State 805\n\l457 nested-name-specifier: nested-name-specifier TEMPLATE-opt simple-template-id • \"::\"\l693 template-id: simple-template-id •\l"]
  805 -> 673 [style=solid label="\"::\""]
  805 -> "805R693d" [label="[\"::\"]", style=solid]
 "805R693d" [label="R693", fillcolor=5, shape=diamond, style=filled]
  805 -> "805R693" [style=solid]
 "805R693" [label="R693", fillcolor=3, shape=diamond, style=filled]
  806 [label="State 806\n\l600 qualified-id: nested-name-specifier TEMPLATE-opt unqualified-id •\l"]
  806 -> "806R600" [style=solid]
 "806R600" [label="R600", fillcolor=3, shape=diamond, style=filled]
  807 [label="State 807\n\l694 template-id: operator-function-id \"<\" template-argument-list-opt • \">\"\l"]
  807 -> 983 [style=solid label="\">\""]
  808 [label="State 808\n\l557 pm-expression: pm-expression \".*\" cast-expression •\l"]
  808 -> "808R557" [style=solid]
 "808R557" [label="R557", fillcolor=3, shape=diamond, style=filled]
  809 [label="State 809\n\l558 pm-expression: pm-expression \"->*\" cast-expression •\l"]
  809 -> "809R558" [style=solid]
 "809R558" [label="R558", fillcolor=3, shape=diamond, style=filled]
  810 [label="State 810\n\l281 expression-list-opt: expression-list •\l"]
  810 -> "810R281" [style=solid]
 "810R281" [label="R281", fillcolor=3, shape=diamond, style=filled]
  811 [label="State 811\n\l561 postfix-expression: postfix-expression \"(\" expression-list-opt • \")\"\l"]
  811 -> 984 [style=solid label="\")\""]
  812 [label="State 812\n\l560 postfix-expression: postfix-expression \"[\" expression-list-opt • \"]\"\l"]
  812 -> 985 [style=solid label="\"]\""]
  813 [label="State 813\n\l567 postfix-expression: postfix-expression \"->\" TEMPLATE-opt • id-expression\l"]
  813 -> 238 [style=solid label="IDENTIFIER"]
  813 -> 6 [style=solid label="\"::\""]
  813 -> 249 [style=solid label="\"operator\""]
  813 -> 21 [style=solid label="\"decltype\""]
  813 -> 336 [style=solid label="\"~\""]
  813 -> 55 [style=dashed label="class-name"]
  813 -> 273 [style=dashed label="conversion-function-id"]
  813 -> 121 [style=dashed label="decltype-specifier"]
  813 -> 71 [style=dashed label="enum-name"]
  813 -> 986 [style=dashed label="id-expression"]
  813 -> 283 [style=dashed label="literal-operator-id"]
  813 -> 85 [style=dashed label="namespace-alias"]
  813 -> 88 [style=dashed label="namespace-name"]
  813 -> 338 [style=dashed label="nested-name-specifier"]
  813 -> 290 [style=dashed label="operator-function-id"]
  813 -> 294 [style=dashed label="qualified-id"]
  813 -> 298 [style=dashed label="simple-template-id"]
  813 -> 301 [style=dashed label="template-id"]
  813 -> 102 [style=dashed label="template-name"]
  813 -> 106 [style=dashed label="type-name"]
  813 -> 108 [style=dashed label="typedef-name"]
  813 -> 306 [style=dashed label="unqualified-id"]
  814 [label="State 814\n\l566 postfix-expression: postfix-expression \".\" TEMPLATE-opt • id-expression\l"]
  814 -> 238 [style=solid label="IDENTIFIER"]
  814 -> 6 [style=solid label="\"::\""]
  814 -> 249 [style=solid label="\"operator\""]
  814 -> 21 [style=solid label="\"decltype\""]
  814 -> 336 [style=solid label="\"~\""]
  814 -> 55 [style=dashed label="class-name"]
  814 -> 273 [style=dashed label="conversion-function-id"]
  814 -> 121 [style=dashed label="decltype-specifier"]
  814 -> 71 [style=dashed label="enum-name"]
  814 -> 987 [style=dashed label="id-expression"]
  814 -> 283 [style=dashed label="literal-operator-id"]
  814 -> 85 [style=dashed label="namespace-alias"]
  814 -> 88 [style=dashed label="namespace-name"]
  814 -> 338 [style=dashed label="nested-name-specifier"]
  814 -> 290 [style=dashed label="operator-function-id"]
  814 -> 294 [style=dashed label="qualified-id"]
  814 -> 298 [style=dashed label="simple-template-id"]
  814 -> 301 [style=dashed label="template-id"]
  814 -> 102 [style=dashed label="template-name"]
  814 -> 106 [style=dashed label="type-name"]
  814 -> 108 [style=dashed label="typedef-name"]
  814 -> 306 [style=dashed label="unqualified-id"]
  815 [label="State 815\n\l147 compare-expression: compare-expression • \"<=>\" shift-expression\l607 relational-expression: relational-expression \"<\" compare-expression •\l"]
  815 -> 530 [style=solid label="\"<=>\""]
  815 -> "815R607" [style=solid]
 "815R607" [label="R607", fillcolor=3, shape=diamond, style=filled]
  816 [label="State 816\n\l147 compare-expression: compare-expression • \"<=>\" shift-expression\l608 relational-expression: relational-expression \">\" compare-expression •\l"]
  816 -> 530 [style=solid label="\"<=>\""]
  816 -> "816R608" [style=solid]
 "816R608" [label="R608", fillcolor=3, shape=diamond, style=filled]
  817 [label="State 817\n\l147 compare-expression: compare-expression • \"<=>\" shift-expression\l609 relational-expression: relational-expression \"<=\" compare-expression •\l"]
  817 -> 530 [style=solid label="\"<=>\""]
  817 -> "817R609" [style=solid]
 "817R609" [label="R609", fillcolor=3, shape=diamond, style=filled]
  818 [label="State 818\n\l147 compare-expression: compare-expression • \"<=>\" shift-expression\l610 relational-expression: relational-expression \">=\" compare-expression •\l"]
  818 -> 530 [style=solid label="\"<=>\""]
  818 -> "818R610" [style=solid]
 "818R610" [label="R610", fillcolor=3, shape=diamond, style=filled]
  819 [label="State 819\n\l 42 additive-expression: additive-expression • \"+\" multiplicative-expression\l 43                    | additive-expression • \"-\" multiplicative-expression\l634 shift-expression: shift-expression \"<<\" additive-expression •\l"]
  819 -> 527 [style=solid label="\"+\""]
  819 -> 528 [style=solid label="\"-\""]
  819 -> "819R634" [style=solid]
 "819R634" [label="R634", fillcolor=3, shape=diamond, style=filled]
  820 [label="State 820\n\l 42 additive-expression: additive-expression • \"+\" multiplicative-expression\l 43                    | additive-expression • \"-\" multiplicative-expression\l635 shift-expression: shift-expression \">>\" additive-expression •\l"]
  820 -> 527 [style=solid label="\"+\""]
  820 -> 528 [style=solid label="\"-\""]
  820 -> "820R635" [style=solid]
 "820R635" [label="R635", fillcolor=3, shape=diamond, style=filled]
  821 [label="State 821\n\l562 postfix-expression: simple-type-specifier \"(\" expression-list-opt • \")\"\l"]
  821 -> 988 [style=solid label="\")\""]
  822 [label="State 822\n\l563 postfix-expression: typename-specifier \"(\" expression-list-opt • \")\"\l"]
  822 -> 989 [style=solid label="\")\""]
  823 [label="State 823\n\l444 namespace-alias: IDENTIFIER •\l450 namespace-name: IDENTIFIER •\l"]
  823 -> "823R444" [style=solid]
 "823R444" [label="R444", fillcolor=3, shape=diamond, style=filled]
  823 -> "823R450d" [label="[\";\"]", style=solid]
 "823R450d" [label="R450", fillcolor=5, shape=diamond, style=filled]
  824 [label="State 824\n\l601 qualified-namespace-specifier: nested-name-specifier-opt namespace-name •\l"]
  824 -> "824R601" [style=solid]
 "824R601" [label="R601", fillcolor=3, shape=diamond, style=filled]
  825 [label="State 825\n\l445 namespace-alias-definition: \"namespace\" IDENTIFIER \"=\" qualified-namespace-specifier \";\" •\l"]
  825 -> "825R445" [style=solid]
 "825R445" [label="R445", fillcolor=3, shape=diamond, style=filled]
  826 [label="State 826\n\l235 enclosing-namespace-specifier: enclosing-namespace-specifier \"::\" INLINE-opt IDENTIFIER •\l460 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" INLINE-opt IDENTIFIER • \"{\" namespace-body \"}\"\l"]
  826 -> 990 [style=solid label="\"{\""]
  826 -> "826R235" [style=solid]
 "826R235" [label="R235", fillcolor=3, shape=diamond, style=filled]
  827 [label="State 827\n\l677 static_assert-declaration: \"static_assert\" \"(\" constant-expression \",\" string-literal • \")\" \";\"\l"]
  827 -> 991 [style=solid label="\")\""]
  828 [label="State 828\n\l676 static_assert-declaration: \"static_assert\" \"(\" constant-expression \")\" \";\" •\l"]
  828 -> "828R676" [style=solid]
 "828R676" [label="R676", fillcolor=3, shape=diamond, style=filled]
  829 [label="State 829\n\l443 named-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt IDENTIFIER \"{\" • namespace-body \"}\"\l"]
  829 -> 1 [style=solid label="\"constexpr\""]
  829 -> 2 [style=solid label="\"export\""]
  829 -> 3 [style=solid label="\"extern\""]
  829 -> 4 [style=solid label="IDENTIFIER"]
  829 -> 5 [style=solid label="\"inline\""]
  829 -> 6 [style=solid label="\"::\""]
  829 -> 7 [style=solid label="\"template\""]
  829 -> 8 [style=solid label="\"typename\""]
  829 -> 9 [style=solid label="\"virtual\""]
  829 -> 10 [style=solid label="\"using\""]
  829 -> 11 [style=solid label="\";\""]
  829 -> 12 [style=solid label="\"class\""]
  829 -> 13 [style=solid label="\"struct\""]
  829 -> 14 [style=solid label="\"union\""]
  829 -> 15 [style=solid label="\"const\""]
  829 -> 16 [style=solid label="\"volatile\""]
  829 -> 17 [style=solid label="\"friend\""]
  829 -> 18 [style=solid label="\"typedef\""]
  829 -> 19 [style=solid label="\"consteval\""]
  829 -> 20 [style=solid label="\"constinit\""]
  829 -> 21 [style=solid label="\"decltype\""]
  829 -> 22 [style=solid label="\"enum\""]
  829 -> 23 [style=solid label="\"explicit\""]
  829 -> 25 [style=solid label="\"import\""]
  829 -> 26 [style=solid label="\"namespace\""]
  829 -> 27 [style=solid label="\"char\""]
  829 -> 28 [style=solid label="\"char8_t\""]
  829 -> 29 [style=solid label="\"char16_t\""]
  829 -> 30 [style=solid label="\"char32_t\""]
  829 -> 31 [style=solid label="\"wchar_t\""]
  829 -> 32 [style=solid label="\"bool\""]
  829 -> 33 [style=solid label="\"short\""]
  829 -> 34 [style=solid label="\"int\""]
  829 -> 35 [style=solid label="\"long\""]
  829 -> 36 [style=solid label="\"signed\""]
  829 -> 37 [style=solid label="\"unsigned\""]
  829 -> 38 [style=solid label="\"float\""]
  829 -> 39 [style=solid label="\"double\""]
  829 -> 40 [style=solid label="\"void\""]
  829 -> 41 [style=solid label="\"static_assert\""]
  829 -> 42 [style=solid label="\"static\""]
  829 -> 43 [style=solid label="\"thread_local\""]
  829 -> 44 [style=solid label="\"mutable\""]
  829 -> 45 [style=dashed label="EXTERN-opt"]
  829 -> 46 [style=dashed label="INLINE-opt"]
  829 -> 47 [style=dashed label="alias-declaration"]
  829 -> 48 [style=dashed label="asm-declaration"]
  829 -> 49 [style=dashed label="attribute-declaration"]
  829 -> 50 [style=dashed label="attribute-specifier-seq"]
  829 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  829 -> 52 [style=dashed label="block-declaration"]
  829 -> 53 [style=dashed label="class-head"]
  829 -> 54 [style=dashed label="class-key"]
  829 -> 55 [style=dashed label="class-name"]
  829 -> 56 [style=dashed label="class-specifier"]
  829 -> 57 [style=dashed label="cv-qualifier"]
  829 -> 58 [style=dashed label="decl-specifier"]
  829 -> 59 [style=dashed label="decl-specifier-seq"]
  829 -> 60 [style=dashed label="declaration"]
  829 -> 61 [style=dashed label="declaration-seq"]
  829 -> 830 [style=dashed label="declaration-seq-opt"]
  829 -> 63 [style=dashed label="decltype-specifier"]
  829 -> 64 [style=dashed label="deduction-guide"]
  829 -> 65 [style=dashed label="defining-type-specifier"]
  829 -> 66 [style=dashed label="elaborated-enum-specifier"]
  829 -> 67 [style=dashed label="elaborated-type-specifier"]
  829 -> 68 [style=dashed label="empty-declaration"]
  829 -> 69 [style=dashed label="enum-head"]
  829 -> 70 [style=dashed label="enum-key"]
  829 -> 71 [style=dashed label="enum-name"]
  829 -> 72 [style=dashed label="enum-specifier"]
  829 -> 73 [style=dashed label="explicit-instantiation"]
  829 -> 74 [style=dashed label="explicit-specialization"]
  829 -> 75 [style=dashed label="explicit-specifier"]
  829 -> 76 [style=dashed label="explicit-specifier-opt"]
  829 -> 77 [style=dashed label="export-declaration"]
  829 -> 78 [style=dashed label="function-definition"]
  829 -> 79 [style=dashed label="function-specifier"]
  829 -> 82 [style=dashed label="linkage-specification"]
  829 -> 83 [style=dashed label="module-import-declaration"]
  829 -> 84 [style=dashed label="named-namespace-definition"]
  829 -> 85 [style=dashed label="namespace-alias"]
  829 -> 86 [style=dashed label="namespace-alias-definition"]
  829 -> 992 [style=dashed label="namespace-body"]
  829 -> 87 [style=dashed label="namespace-definition"]
  829 -> 88 [style=dashed label="namespace-name"]
  829 -> 89 [style=dashed label="nested-name-specifier"]
  829 -> 90 [style=dashed label="nested-name-specifier-opt"]
  829 -> 91 [style=dashed label="nested-namespace-definition"]
  829 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  829 -> 93 [style=dashed label="opaque-enum-declaration"]
  829 -> 94 [style=dashed label="placeholder-type-specifier"]
  829 -> 95 [style=dashed label="simple-declaration"]
  829 -> 96 [style=dashed label="simple-template-id"]
  829 -> 97 [style=dashed label="simple-type-specifier"]
  829 -> 98 [style=dashed label="static_assert-declaration"]
  829 -> 99 [style=dashed label="storage-class-specifier"]
  829 -> 100 [style=dashed label="template-declaration"]
  829 -> 101 [style=dashed label="template-head"]
  829 -> 102 [style=dashed label="template-name"]
  829 -> 104 [style=dashed label="type-constraint"]
  829 -> 105 [style=dashed label="type-constraint-opt"]
  829 -> 106 [style=dashed label="type-name"]
  829 -> 107 [style=dashed label="type-specifier"]
  829 -> 108 [style=dashed label="typedef-name"]
  829 -> 109 [style=dashed label="typename-specifier"]
  829 -> 110 [style=dashed label="unnamed-namespace-definition"]
  829 -> 111 [style=dashed label="using-declaration"]
  829 -> 112 [style=dashed label="using-directive"]
  829 -> 113 [style=dashed label="using-enum-declaration"]
  829 -> "829R9d" [label="[\"template\"]", style=solid]
 "829R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  829 -> "829R13d" [label="[\"namespace\"]", style=solid]
 "829R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  829 -> "829R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "829R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  829 -> "829R83" [label="[]", style=solid]
 "829R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  829 -> "829R208" [label="[\"}\"]", style=solid]
 "829R208" [label="R208", fillcolor=3, shape=diamond, style=filled]
  829 -> "829R268d" [label="[IDENTIFIER]", style=solid]
 "829R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  829 -> "829R458d" [label="[IDENTIFIER]", style=solid]
 "829R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  829 -> "829R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "829R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  830 [label="State 830\n\l446 namespace-body: declaration-seq-opt •\l"]
  830 -> "830R446" [style=solid]
 "830R446" [label="R446", fillcolor=3, shape=diamond, style=filled]
  831 [label="State 831\n\l754 unnamed-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt \"{\" namespace-body • \"}\"\l"]
  831 -> 993 [style=solid label="\"}\""]
  832 [label="State 832\n\l767 using-directive: attribute-specifier-seq-opt \"using\" \"namespace\" nested-name-specifier-opt namespace-name • \";\"\l"]
  832 -> 994 [style=solid label="\";\""]
  833 [label="State 833\n\l 46 alignment-specifier: \"alignas\" \"(\" constant-expression ELLIPSIS-opt • \")\"\l"]
  833 -> 995 [style=solid label="\")\""]
  834 [label="State 834\n\l 45 alignment-specifier: \"alignas\" \"(\" type-id ELLIPSIS-opt • \")\"\l"]
  834 -> 996 [style=solid label="\")\""]
  835 [label="State 835\n\l 49 asm-declaration: attribute-specifier-seq-opt \"asm\" \"(\" string-literal \")\" • \";\"\l"]
  835 -> 997 [style=solid label="\";\""]
  836 [label="State 836\n\l 76 attribute-namespace: IDENTIFIER •\l"]
  836 -> "836R76" [style=solid]
 "836R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  837 [label="State 837\n\l 87 attribute-using-prefix: \"using\" attribute-namespace • \":\"\l"]
  837 -> 998 [style=solid label="\":\""]
  838 [label="State 838\n\l 76 attribute-namespace: IDENTIFIER •\l 85 attribute-token: IDENTIFIER •\l"]
  838 -> "838R76" [label="[\"::\"]", style=solid]
 "838R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  838 -> "838R85" [style=solid]
 "838R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
  839 [label="State 839\n\l 74 attribute-list: attribute • \"...\"\l 78 attribute-opt: attribute •\l"]
  839 -> 999 [style=solid label="\"...\""]
  839 -> "839R78" [style=solid]
 "839R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  840 [label="State 840\n\l 73 attribute-list: attribute-list • \",\" attribute-opt\l 75               | attribute-list • \",\" attribute \"...\"\l 80 attribute-specifier: \"[\" \"[\" attribute-using-prefix-opt attribute-list • \"]\" \"]\"\l"]
  840 -> 1000 [style=solid label="\",\""]
  840 -> 1001 [style=solid label="\"]\""]
  841 [label="State 841\n\l 79 attribute-scoped-token: attribute-namespace • \"::\" IDENTIFIER\l"]
  841 -> 1002 [style=solid label="\"::\""]
  842 [label="State 842\n\l 72 attribute-list: attribute-opt •\l"]
  842 -> "842R72" [style=solid]
 "842R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  843 [label="State 843\n\l 86 attribute-token: attribute-scoped-token •\l"]
  843 -> "843R86" [style=solid]
 "843R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
  844 [label="State 844\n\l 67 attribute: attribute-token • attribute-argument-clause-opt\l"]
  844 -> 1003 [style=solid label="\"(\""]
  844 -> 1004 [style=dashed label="attribute-argument-clause"]
  844 -> 1005 [style=dashed label="attribute-argument-clause-opt"]
  844 -> "844R69" [style=solid]
 "844R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
  845 [label="State 845\n\l177 cv-qualifier-seq: cv-qualifier cv-qualifier-seq-opt •\l"]
  845 -> "845R177" [style=solid]
 "845R177" [label="R177", fillcolor=3, shape=diamond, style=filled]
  846 [label="State 846\n\l342 identifier-list: IDENTIFIER •\l"]
  846 -> "846R342" [style=solid]
 "846R342" [label="R342", fillcolor=3, shape=diamond, style=filled]
  847 [label="State 847\n\l343 identifier-list: identifier-list • \",\" IDENTIFIER\l642 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" identifier-list • \"]\" initializer \";\"\l"]
  847 -> 1006 [style=solid label="\",\""]
  847 -> 1007 [style=solid label="\"]\""]
  848 [label="State 848\n\l325 function-body: \"=\" • \"default\" \";\"\l326              | \"=\" • \"delete\" \";\"\l"]
  848 -> 1008 [style=solid label="\"delete\""]
  848 -> 1009 [style=solid label="\"default\""]
  849 [label="State 849\n\l172 ctor-initializer: \":\" • mem-initializer-list\l"]
  849 -> 1010 [style=solid label="IDENTIFIER"]
  849 -> 6 [style=solid label="\"::\""]
  849 -> 21 [style=solid label="\"decltype\""]
  849 -> 55 [style=dashed label="class-name"]
  849 -> 1011 [style=dashed label="class-or-decltype"]
  849 -> 874 [style=dashed label="decltype-specifier"]
  849 -> 71 [style=dashed label="enum-name"]
  849 -> 1012 [style=dashed label="mem-initializer"]
  849 -> 1013 [style=dashed label="mem-initializer-id"]
  849 -> 1014 [style=dashed label="mem-initializer-list"]
  849 -> 85 [style=dashed label="namespace-alias"]
  849 -> 88 [style=dashed label="namespace-name"]
  849 -> 875 [style=dashed label="nested-name-specifier"]
  849 -> 876 [style=dashed label="nested-name-specifier-opt"]
  849 -> 96 [style=dashed label="simple-template-id"]
  849 -> 102 [style=dashed label="template-name"]
  849 -> 106 [style=dashed label="type-name"]
  849 -> 108 [style=dashed label="typedef-name"]
  849 -> "849R458d" [label="[IDENTIFIER]", style=solid]
 "849R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  850 [label="State 850\n\l331 function-try-block: \"try\" • ctor-initializer-opt compound-statement handler-seq\l"]
  850 -> 849 [style=solid label="\":\""]
  850 -> 851 [style=dashed label="ctor-initializer"]
  850 -> 1015 [style=dashed label="ctor-initializer-opt"]
  850 -> "850R173" [style=solid]
 "850R173" [label="R173", fillcolor=3, shape=diamond, style=filled]
  851 [label="State 851\n\l174 ctor-initializer-opt: ctor-initializer •\l"]
  851 -> "851R174" [style=solid]
 "851R174" [label="R174", fillcolor=3, shape=diamond, style=filled]
  852 [label="State 852\n\l323 function-body: ctor-initializer-opt • compound-statement\l"]
  852 -> 794 [style=solid label="\"{\""]
  852 -> 1016 [style=dashed label="compound-statement"]
  853 [label="State 853\n\l328 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator requires-clause function-body •\l"]
  853 -> "853R328" [style=solid]
 "853R328" [label="R328", fillcolor=3, shape=diamond, style=filled]
  854 [label="State 854\n\l324 function-body: function-try-block •\l"]
  854 -> "854R324" [style=solid]
 "854R324" [label="R324", fillcolor=3, shape=diamond, style=filled]
  855 [label="State 855\n\l772 virt-specifier-seq: virt-specifier-seq virt-specifier •\l"]
  855 -> "855R772" [style=solid]
 "855R772" [label="R772", fillcolor=3, shape=diamond, style=filled]
  856 [label="State 856\n\l327 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator virt-specifier-seq-opt function-body •\l"]
  856 -> "856R327" [style=solid]
 "856R327" [label="R327", fillcolor=3, shape=diamond, style=filled]
  857 [label="State 857\n\l596 ptr-operator: nested-name-specifier \"*\" attribute-specifier-seq-opt cv-qualifier-seq-opt •\l"]
  857 -> "857R596" [style=solid]
 "857R596" [label="R596", fillcolor=3, shape=diamond, style=filled]
  858 [label="State 858\n\l553 parameters-and-qualifiers: \"(\" parameter-declaration-clause \")\" • cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt\l"]
  858 -> 15 [style=solid label="\"const\""]
  858 -> 16 [style=solid label="\"volatile\""]
  858 -> 608 [style=dashed label="cv-qualifier"]
  858 -> 609 [style=dashed label="cv-qualifier-seq"]
  858 -> 1017 [style=dashed label="cv-qualifier-seq-opt"]
  858 -> "858R178" [style=solid]
 "858R178" [label="R178", fillcolor=3, shape=diamond, style=filled]
  859 [label="State 859\n\l548 parameter-declaration-clause: parameter-declaration-list \",\" • \"...\"\l550 parameter-declaration-list: parameter-declaration-list \",\" • parameter-declaration\l"]
  859 -> 1018 [style=solid label="\"...\""]
  859 -> 177 [style=dashed label="attribute-specifier-seq"]
  859 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  859 -> 1019 [style=dashed label="parameter-declaration"]
  859 -> "859R83" [style=solid]
 "859R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  860 [label="State 860\n\l547 parameter-declaration-clause: parameter-declaration-list-opt ELLIPSIS-opt •\l"]
  860 -> "860R547" [style=solid]
 "860R547" [label="R547", fillcolor=3, shape=diamond, style=filled]
  861 [label="State 861\n\l492 noptr-declarator: noptr-declarator \"[\" constant-expression-opt \"]\" • attribute-specifier-seq-opt\l"]
  861 -> 177 [style=dashed label="attribute-specifier-seq"]
  861 -> 1020 [style=dashed label="attribute-specifier-seq-opt"]
  861 -> "861R83" [style=solid]
 "861R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  862 [label="State 862\n\l702 trailing-return-type: \"->\" type-id •\l"]
  862 -> "862R702" [style=solid]
 "862R702" [label="R702", fillcolor=3, shape=diamond, style=filled]
  863 [label="State 863\n\l424 member-specification: access-specifier \":\" member-specification-opt •\l"]
  863 -> "863R424" [style=solid]
 "863R424" [label="R424", fillcolor=3, shape=diamond, style=filled]
  864 [label="State 864\n\l 12 IDENTIFIER-opt: IDENTIFIER •\l137 class-name: IDENTIFIER •\l246 enum-name: IDENTIFIER •\l444 namespace-alias: IDENTIFIER •\l450 namespace-name: IDENTIFIER •\l696 template-name: IDENTIFIER •\l731 typedef-name: IDENTIFIER •\l"]
  864 -> "864R12" [style=solid]
 "864R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  864 -> "864R137" [label="[\"::\"]", style=solid]
 "864R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  864 -> "864R246d" [label="[\"::\"]", style=solid]
 "864R246d" [label="R246", fillcolor=5, shape=diamond, style=filled]
  864 -> "864R444d" [label="[\"::\"]", style=solid]
 "864R444d" [label="R444", fillcolor=5, shape=diamond, style=filled]
  864 -> "864R450d" [label="[\"::\"]", style=solid]
 "864R450d" [label="R450", fillcolor=5, shape=diamond, style=filled]
  864 -> "864R696" [label="[\"<\"]", style=solid]
 "864R696" [label="R696", fillcolor=3, shape=diamond, style=filled]
  864 -> "864R731d" [label="[\"::\"]", style=solid]
 "864R731d" [label="R731", fillcolor=5, shape=diamond, style=filled]
  865 [label="State 865\n\l418 member-declarator: IDENTIFIER-opt • attribute-specifier-seq-opt \":\" constant-expression brace-or-equal-initializer-opt\l"]
  865 -> 177 [style=dashed label="attribute-specifier-seq"]
  865 -> 1021 [style=dashed label="attribute-specifier-seq-opt"]
  865 -> "865R83" [style=solid]
 "865R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  866 [label="State 866\n\l327 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator • virt-specifier-seq-opt function-body\l328                    | attribute-specifier-seq-opt decl-specifier-seq-opt declarator • requires-clause function-body\l415 member-declarator: declarator • virt-specifier-seq-opt pure-specifier-opt\l416                  | declarator • requires-clause\l417                  | declarator • brace-or-equal-initializer-opt\l"]
  866 -> 378 [style=solid label="\"=\""]
  866 -> 380 [style=solid label="\"{\""]
  866 -> 612 [style=solid label="\"final\""]
  866 -> 381 [style=solid label="\"requires\""]
  866 -> 613 [style=solid label="\"override\""]
  866 -> 1022 [style=dashed label="brace-or-equal-initializer"]
  866 -> 1023 [style=dashed label="brace-or-equal-initializer-opt"]
  866 -> 383 [style=dashed label="braced-init-list"]
  866 -> 1024 [style=dashed label="requires-clause"]
  866 -> 615 [style=dashed label="virt-specifier"]
  866 -> 616 [style=dashed label="virt-specifier-seq"]
  866 -> 1025 [style=dashed label="virt-specifier-seq-opt"]
  866 -> "866R118" [style=solid]
 "866R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
  866 -> "866R773d" [label="[\",\", \"=\", \";\", \"{\"]", style=solid]
 "866R773d" [label="R773", fillcolor=5, shape=diamond, style=filled]
  866 -> "866R773" [label="[\":\", \"try\"]", style=solid]
 "866R773" [label="R773", fillcolor=3, shape=diamond, style=filled]
  867 [label="State 867\n\l419 member-declarator-list: member-declarator •\l"]
  867 -> "867R419" [style=solid]
 "867R419" [label="R419", fillcolor=3, shape=diamond, style=filled]
  868 [label="State 868\n\l420 member-declarator-list: member-declarator-list • \",\" member-declarator\l422 member-declarator-list-opt: member-declarator-list •\l"]
  868 -> 1026 [style=solid label="\",\""]
  868 -> "868R422" [style=solid]
 "868R422" [label="R422", fillcolor=3, shape=diamond, style=filled]
  869 [label="State 869\n\l404 member-declaration: attribute-specifier-seq-opt decl-specifier-seq-opt member-declarator-list-opt • \";\"\l"]
  869 -> 1027 [style=solid label="\";\""]
  870 [label="State 870\n\l496 opaque-enum-declaration: enum-key attribute-specifier-seq-opt enum-head-name • enum-base-opt \";\"\l"]
  870 -> 663 [style=solid label="\":\""]
  870 -> 664 [style=dashed label="enum-base"]
  870 -> 665 [style=dashed label="enum-base-opt"]
  870 -> "870R237" [style=solid]
 "870R237" [label="R237", fillcolor=3, shape=diamond, style=filled]
  871 [label="State 871\n\l103 base-specifier: attribute-specifier-seq-opt \"virtual\" • access-specifier-opt class-or-decltype\l"]
  871 -> 351 [style=solid label="\"private\""]
  871 -> 352 [style=solid label="\"protected\""]
  871 -> 353 [style=solid label="\"public\""]
  871 -> 1028 [style=dashed label="access-specifier"]
  871 -> 1029 [style=dashed label="access-specifier-opt"]
  871 -> "871R39" [style=solid]
 "871R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  872 [label="State 872\n\l104 base-specifier: attribute-specifier-seq-opt access-specifier • VIRTUAL-opt class-or-decltype\l"]
  872 -> 1030 [style=solid label="\"virtual\""]
  872 -> 1031 [style=dashed label="VIRTUAL-opt"]
  872 -> "872R27" [style=solid]
 "872R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  873 [label="State 873\n\l102 base-specifier: attribute-specifier-seq-opt class-or-decltype •\l"]
  873 -> "873R102" [style=solid]
 "873R102" [label="R102", fillcolor=3, shape=diamond, style=filled]
  874 [label="State 874\n\l141 class-or-decltype: decltype-specifier •\l455 nested-name-specifier: decltype-specifier • \"::\"\l"]
  874 -> 189 [style=solid label="\"::\""]
  874 -> "874R141" [style=solid]
 "874R141" [label="R141", fillcolor=3, shape=diamond, style=filled]
  875 [label="State 875\n\l140 class-or-decltype: nested-name-specifier • \"template\" simple-template-id\l456 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l457                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l459 nested-name-specifier-opt: nested-name-specifier •\l"]
  875 -> 198 [style=solid label="IDENTIFIER"]
  875 -> 1032 [style=solid label="\"template\""]
  875 -> 200 [style=dashed label="TEMPLATE-opt"]
  875 -> "875R21d" [label="[IDENTIFIER]", style=solid]
 "875R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  875 -> "875R459d" [label="[IDENTIFIER]", style=solid]
 "875R459d" [label="R459", fillcolor=5, shape=diamond, style=filled]
  876 [label="State 876\n\l139 class-or-decltype: nested-name-specifier-opt • type-name\l"]
  876 -> 507 [style=solid label="IDENTIFIER"]
  876 -> 55 [style=dashed label="class-name"]
  876 -> 71 [style=dashed label="enum-name"]
  876 -> 96 [style=dashed label="simple-template-id"]
  876 -> 102 [style=dashed label="template-name"]
  876 -> 1033 [style=dashed label="type-name"]
  876 -> 108 [style=dashed label="typedef-name"]
  877 [label="State 877\n\l105 base-specifier-list: base-specifier ELLIPSIS-opt •\l"]
  877 -> "877R105" [style=solid]
 "877R105" [label="R105", fillcolor=3, shape=diamond, style=filled]
  878 [label="State 878\n\l106 base-specifier-list: base-specifier-list \",\" • base-specifier ELLIPSIS-opt\l"]
  878 -> 177 [style=dashed label="attribute-specifier-seq"]
  878 -> 632 [style=dashed label="attribute-specifier-seq-opt"]
  878 -> 1034 [style=dashed label="base-specifier"]
  878 -> "878R83" [style=solid]
 "878R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  879 [label="State 879\n\l131 class-head: class-key attribute-specifier-seq-opt class-head-name class-virt-specifier-opt base-clause-opt •\l"]
  879 -> "879R131" [style=solid]
 "879R131" [label="R131", fillcolor=3, shape=diamond, style=filled]
  880 [label="State 880\n\l360 initializer: \"(\" expression-list \")\" •\l"]
  880 -> "880R360" [style=solid]
 "880R360" [label="R360", fillcolor=3, shape=diamond, style=filled]
  881 [label="State 881\n\l363 initializer-list: initializer-clause ELLIPSIS-opt •\l"]
  881 -> "881R363" [style=solid]
 "881R363" [label="R363", fillcolor=3, shape=diamond, style=filled]
  882 [label="State 882\n\l364 initializer-list: initializer-list \",\" • initializer-clause ELLIPSIS-opt\l"]
  882 -> 238 [style=solid label="IDENTIFIER"]
  882 -> 239 [style=solid label="\"noexcept\""]
  882 -> 240 [style=solid label="\"!\""]
  882 -> 241 [style=solid label="\"::\""]
  882 -> 242 [style=solid label="\"this\""]
  882 -> 8 [style=solid label="\"typename\""]
  882 -> 243 [style=solid label="\"+\""]
  882 -> 244 [style=solid label="\"-\""]
  882 -> 245 [style=solid label="\"(\""]
  882 -> 246 [style=solid label="\"&\""]
  882 -> 247 [style=solid label="\"[\""]
  882 -> 248 [style=solid label="\"co_await\""]
  882 -> 380 [style=solid label="\"{\""]
  882 -> 249 [style=solid label="\"operator\""]
  882 -> 21 [style=solid label="\"decltype\""]
  882 -> 250 [style=solid label="\"*\""]
  882 -> 251 [style=solid label="\"requires\""]
  882 -> 252 [style=solid label="\"~\""]
  882 -> 253 [style=solid label="\"++\""]
  882 -> 254 [style=solid label="\"--\""]
  882 -> 255 [style=solid label="\"dynamic_cast\""]
  882 -> 256 [style=solid label="\"static_cast\""]
  882 -> 257 [style=solid label="\"reinterpret_cast\""]
  882 -> 258 [style=solid label="\"const_cast\""]
  882 -> 259 [style=solid label="\"typeid\""]
  882 -> 260 [style=solid label="\"literal\""]
  882 -> 27 [style=solid label="\"char\""]
  882 -> 28 [style=solid label="\"char8_t\""]
  882 -> 29 [style=solid label="\"char16_t\""]
  882 -> 30 [style=solid label="\"char32_t\""]
  882 -> 31 [style=solid label="\"wchar_t\""]
  882 -> 32 [style=solid label="\"bool\""]
  882 -> 33 [style=solid label="\"short\""]
  882 -> 34 [style=solid label="\"int\""]
  882 -> 35 [style=solid label="\"long\""]
  882 -> 36 [style=solid label="\"signed\""]
  882 -> 37 [style=solid label="\"unsigned\""]
  882 -> 38 [style=solid label="\"float\""]
  882 -> 39 [style=solid label="\"double\""]
  882 -> 40 [style=solid label="\"void\""]
  882 -> 118 [style=solid label="STRING_LITERAL"]
  882 -> 261 [style=solid label="\"throw\""]
  882 -> 262 [style=solid label="\"sizeof\""]
  882 -> 263 [style=solid label="\"alignof\""]
  882 -> 264 [style=solid label="\"co_yield\""]
  882 -> 265 [style=dashed label="SCOPE-opt"]
  882 -> 266 [style=dashed label="additive-expression"]
  882 -> 267 [style=dashed label="and-expression"]
  882 -> 642 [style=dashed label="assignment-expression"]
  882 -> 269 [style=dashed label="await-expression"]
  882 -> 643 [style=dashed label="braced-init-list"]
  882 -> 270 [style=dashed label="cast-expression"]
  882 -> 55 [style=dashed label="class-name"]
  882 -> 271 [style=dashed label="compare-expression"]
  882 -> 272 [style=dashed label="conditional-expression"]
  882 -> 273 [style=dashed label="conversion-function-id"]
  882 -> 63 [style=dashed label="decltype-specifier"]
  882 -> 274 [style=dashed label="delete-expression"]
  882 -> 71 [style=dashed label="enum-name"]
  882 -> 275 [style=dashed label="equality-expression"]
  882 -> 276 [style=dashed label="exclusive-or-expression"]
  882 -> 278 [style=dashed label="fold-expression"]
  882 -> 279 [style=dashed label="id-expression"]
  882 -> 280 [style=dashed label="inclusive-or-expression"]
  882 -> 1035 [style=dashed label="initializer-clause"]
  882 -> 281 [style=dashed label="lambda-expression"]
  882 -> 282 [style=dashed label="lambda-introducer"]
  882 -> 283 [style=dashed label="literal-operator-id"]
  882 -> 284 [style=dashed label="logical-and-expression"]
  882 -> 285 [style=dashed label="logical-or-expression"]
  882 -> 286 [style=dashed label="multiplicative-expression"]
  882 -> 85 [style=dashed label="namespace-alias"]
  882 -> 88 [style=dashed label="namespace-name"]
  882 -> 287 [style=dashed label="nested-name-specifier"]
  882 -> 90 [style=dashed label="nested-name-specifier-opt"]
  882 -> 288 [style=dashed label="new-expression"]
  882 -> 289 [style=dashed label="noexcept-expression"]
  882 -> 290 [style=dashed label="operator-function-id"]
  882 -> 94 [style=dashed label="placeholder-type-specifier"]
  882 -> 291 [style=dashed label="pm-expression"]
  882 -> 292 [style=dashed label="postfix-expression"]
  882 -> 293 [style=dashed label="primary-expression"]
  882 -> 294 [style=dashed label="qualified-id"]
  882 -> 295 [style=dashed label="relational-expression"]
  882 -> 296 [style=dashed label="requires-expression"]
  882 -> 297 [style=dashed label="shift-expression"]
  882 -> 298 [style=dashed label="simple-template-id"]
  882 -> 299 [style=dashed label="simple-type-specifier"]
  882 -> 300 [style=dashed label="string-literal"]
  882 -> 301 [style=dashed label="template-id"]
  882 -> 102 [style=dashed label="template-name"]
  882 -> 302 [style=dashed label="throw-expression"]
  882 -> 104 [style=dashed label="type-constraint"]
  882 -> 105 [style=dashed label="type-constraint-opt"]
  882 -> 106 [style=dashed label="type-name"]
  882 -> 108 [style=dashed label="typedef-name"]
  882 -> 303 [style=dashed label="typename-specifier"]
  882 -> 304 [style=dashed label="unary-expression"]
  882 -> 305 [style=dashed label="unary-operator"]
  882 -> 306 [style=dashed label="unqualified-id"]
  882 -> 307 [style=dashed label="yield-expression"]
  882 -> "882R19" [style=solid]
 "882R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  882 -> "882R458d" [label="[IDENTIFIER]", style=solid]
 "882R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  882 -> "882R710d" [label="[\"decltype\"]", style=solid]
 "882R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  882 -> "882R710" [label="[\"auto\"]", style=solid]
 "882R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  883 [label="State 883\n\l227 designator: \".\" IDENTIFIER •\l"]
  883 -> "883R227" [style=solid]
 "883R227" [label="R227", fillcolor=3, shape=diamond, style=filled]
  884 [label="State 884\n\l  2 COMMA-opt: \",\" •\l226 designated-initializer-list: designated-initializer-list \",\" • designated-initializer-clause\l"]
  884 -> 649 [style=solid label="\".\""]
  884 -> 1036 [style=dashed label="designated-initializer-clause"]
  884 -> 652 [style=dashed label="designator"]
  884 -> "884R2" [style=solid]
 "884R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  885 [label="State 885\n\l121 braced-init-list: \"{\" designated-initializer-list COMMA-opt • \"}\"\l"]
  885 -> 1037 [style=solid label="\"}\""]
  886 [label="State 886\n\l224 designated-initializer-clause: designator brace-or-equal-initializer •\l"]
  886 -> "886R224" [style=solid]
 "886R224" [label="R224", fillcolor=3, shape=diamond, style=filled]
  887 [label="State 887\n\l  2 COMMA-opt: \",\" •\l364 initializer-list: initializer-list \",\" • initializer-clause ELLIPSIS-opt\l"]
  887 -> 238 [style=solid label="IDENTIFIER"]
  887 -> 239 [style=solid label="\"noexcept\""]
  887 -> 240 [style=solid label="\"!\""]
  887 -> 241 [style=solid label="\"::\""]
  887 -> 242 [style=solid label="\"this\""]
  887 -> 8 [style=solid label="\"typename\""]
  887 -> 243 [style=solid label="\"+\""]
  887 -> 244 [style=solid label="\"-\""]
  887 -> 245 [style=solid label="\"(\""]
  887 -> 246 [style=solid label="\"&\""]
  887 -> 247 [style=solid label="\"[\""]
  887 -> 248 [style=solid label="\"co_await\""]
  887 -> 380 [style=solid label="\"{\""]
  887 -> 249 [style=solid label="\"operator\""]
  887 -> 21 [style=solid label="\"decltype\""]
  887 -> 250 [style=solid label="\"*\""]
  887 -> 251 [style=solid label="\"requires\""]
  887 -> 252 [style=solid label="\"~\""]
  887 -> 253 [style=solid label="\"++\""]
  887 -> 254 [style=solid label="\"--\""]
  887 -> 255 [style=solid label="\"dynamic_cast\""]
  887 -> 256 [style=solid label="\"static_cast\""]
  887 -> 257 [style=solid label="\"reinterpret_cast\""]
  887 -> 258 [style=solid label="\"const_cast\""]
  887 -> 259 [style=solid label="\"typeid\""]
  887 -> 260 [style=solid label="\"literal\""]
  887 -> 27 [style=solid label="\"char\""]
  887 -> 28 [style=solid label="\"char8_t\""]
  887 -> 29 [style=solid label="\"char16_t\""]
  887 -> 30 [style=solid label="\"char32_t\""]
  887 -> 31 [style=solid label="\"wchar_t\""]
  887 -> 32 [style=solid label="\"bool\""]
  887 -> 33 [style=solid label="\"short\""]
  887 -> 34 [style=solid label="\"int\""]
  887 -> 35 [style=solid label="\"long\""]
  887 -> 36 [style=solid label="\"signed\""]
  887 -> 37 [style=solid label="\"unsigned\""]
  887 -> 38 [style=solid label="\"float\""]
  887 -> 39 [style=solid label="\"double\""]
  887 -> 40 [style=solid label="\"void\""]
  887 -> 118 [style=solid label="STRING_LITERAL"]
  887 -> 261 [style=solid label="\"throw\""]
  887 -> 262 [style=solid label="\"sizeof\""]
  887 -> 263 [style=solid label="\"alignof\""]
  887 -> 264 [style=solid label="\"co_yield\""]
  887 -> 265 [style=dashed label="SCOPE-opt"]
  887 -> 266 [style=dashed label="additive-expression"]
  887 -> 267 [style=dashed label="and-expression"]
  887 -> 642 [style=dashed label="assignment-expression"]
  887 -> 269 [style=dashed label="await-expression"]
  887 -> 643 [style=dashed label="braced-init-list"]
  887 -> 270 [style=dashed label="cast-expression"]
  887 -> 55 [style=dashed label="class-name"]
  887 -> 271 [style=dashed label="compare-expression"]
  887 -> 272 [style=dashed label="conditional-expression"]
  887 -> 273 [style=dashed label="conversion-function-id"]
  887 -> 63 [style=dashed label="decltype-specifier"]
  887 -> 274 [style=dashed label="delete-expression"]
  887 -> 71 [style=dashed label="enum-name"]
  887 -> 275 [style=dashed label="equality-expression"]
  887 -> 276 [style=dashed label="exclusive-or-expression"]
  887 -> 278 [style=dashed label="fold-expression"]
  887 -> 279 [style=dashed label="id-expression"]
  887 -> 280 [style=dashed label="inclusive-or-expression"]
  887 -> 1035 [style=dashed label="initializer-clause"]
  887 -> 281 [style=dashed label="lambda-expression"]
  887 -> 282 [style=dashed label="lambda-introducer"]
  887 -> 283 [style=dashed label="literal-operator-id"]
  887 -> 284 [style=dashed label="logical-and-expression"]
  887 -> 285 [style=dashed label="logical-or-expression"]
  887 -> 286 [style=dashed label="multiplicative-expression"]
  887 -> 85 [style=dashed label="namespace-alias"]
  887 -> 88 [style=dashed label="namespace-name"]
  887 -> 287 [style=dashed label="nested-name-specifier"]
  887 -> 90 [style=dashed label="nested-name-specifier-opt"]
  887 -> 288 [style=dashed label="new-expression"]
  887 -> 289 [style=dashed label="noexcept-expression"]
  887 -> 290 [style=dashed label="operator-function-id"]
  887 -> 94 [style=dashed label="placeholder-type-specifier"]
  887 -> 291 [style=dashed label="pm-expression"]
  887 -> 292 [style=dashed label="postfix-expression"]
  887 -> 293 [style=dashed label="primary-expression"]
  887 -> 294 [style=dashed label="qualified-id"]
  887 -> 295 [style=dashed label="relational-expression"]
  887 -> 296 [style=dashed label="requires-expression"]
  887 -> 297 [style=dashed label="shift-expression"]
  887 -> 298 [style=dashed label="simple-template-id"]
  887 -> 299 [style=dashed label="simple-type-specifier"]
  887 -> 300 [style=dashed label="string-literal"]
  887 -> 301 [style=dashed label="template-id"]
  887 -> 102 [style=dashed label="template-name"]
  887 -> 302 [style=dashed label="throw-expression"]
  887 -> 104 [style=dashed label="type-constraint"]
  887 -> 105 [style=dashed label="type-constraint-opt"]
  887 -> 106 [style=dashed label="type-name"]
  887 -> 108 [style=dashed label="typedef-name"]
  887 -> 303 [style=dashed label="typename-specifier"]
  887 -> 304 [style=dashed label="unary-expression"]
  887 -> 305 [style=dashed label="unary-operator"]
  887 -> 306 [style=dashed label="unqualified-id"]
  887 -> 307 [style=dashed label="yield-expression"]
  887 -> "887R2" [label="[\"}\"]", style=solid]
 "887R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  887 -> "887R19" [style=solid]
 "887R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  887 -> "887R458d" [label="[IDENTIFIER]", style=solid]
 "887R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  887 -> "887R710d" [label="[\"decltype\"]", style=solid]
 "887R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  887 -> "887R710" [label="[\"auto\"]", style=solid]
 "887R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  888 [label="State 888\n\l120 braced-init-list: \"{\" initializer-list COMMA-opt • \"}\"\l"]
  888 -> 1038 [style=solid label="\"}\""]
  889 [label="State 889\n\l163 constraint-logical-and-expression: constraint-logical-and-expression \"&&\" • primary-expression\l"]
  889 -> 238 [style=solid label="IDENTIFIER"]
  889 -> 6 [style=solid label="\"::\""]
  889 -> 242 [style=solid label="\"this\""]
  889 -> 654 [style=solid label="\"(\""]
  889 -> 247 [style=solid label="\"[\""]
  889 -> 249 [style=solid label="\"operator\""]
  889 -> 21 [style=solid label="\"decltype\""]
  889 -> 251 [style=solid label="\"requires\""]
  889 -> 336 [style=solid label="\"~\""]
  889 -> 260 [style=solid label="\"literal\""]
  889 -> 118 [style=solid label="STRING_LITERAL"]
  889 -> 55 [style=dashed label="class-name"]
  889 -> 273 [style=dashed label="conversion-function-id"]
  889 -> 121 [style=dashed label="decltype-specifier"]
  889 -> 71 [style=dashed label="enum-name"]
  889 -> 278 [style=dashed label="fold-expression"]
  889 -> 279 [style=dashed label="id-expression"]
  889 -> 281 [style=dashed label="lambda-expression"]
  889 -> 282 [style=dashed label="lambda-introducer"]
  889 -> 283 [style=dashed label="literal-operator-id"]
  889 -> 85 [style=dashed label="namespace-alias"]
  889 -> 88 [style=dashed label="namespace-name"]
  889 -> 338 [style=dashed label="nested-name-specifier"]
  889 -> 290 [style=dashed label="operator-function-id"]
  889 -> 1039 [style=dashed label="primary-expression"]
  889 -> 294 [style=dashed label="qualified-id"]
  889 -> 296 [style=dashed label="requires-expression"]
  889 -> 298 [style=dashed label="simple-template-id"]
  889 -> 300 [style=dashed label="string-literal"]
  889 -> 301 [style=dashed label="template-id"]
  889 -> 102 [style=dashed label="template-name"]
  889 -> 106 [style=dashed label="type-name"]
  889 -> 108 [style=dashed label="typedef-name"]
  889 -> 306 [style=dashed label="unqualified-id"]
  890 [label="State 890\n\l165 constraint-logical-or-expression: constraint-logical-or-expression \"||\" • constraint-logical-and-expression\l"]
  890 -> 238 [style=solid label="IDENTIFIER"]
  890 -> 6 [style=solid label="\"::\""]
  890 -> 242 [style=solid label="\"this\""]
  890 -> 654 [style=solid label="\"(\""]
  890 -> 247 [style=solid label="\"[\""]
  890 -> 249 [style=solid label="\"operator\""]
  890 -> 21 [style=solid label="\"decltype\""]
  890 -> 251 [style=solid label="\"requires\""]
  890 -> 336 [style=solid label="\"~\""]
  890 -> 260 [style=solid label="\"literal\""]
  890 -> 118 [style=solid label="STRING_LITERAL"]
  890 -> 55 [style=dashed label="class-name"]
  890 -> 1040 [style=dashed label="constraint-logical-and-expression"]
  890 -> 273 [style=dashed label="conversion-function-id"]
  890 -> 121 [style=dashed label="decltype-specifier"]
  890 -> 71 [style=dashed label="enum-name"]
  890 -> 278 [style=dashed label="fold-expression"]
  890 -> 279 [style=dashed label="id-expression"]
  890 -> 281 [style=dashed label="lambda-expression"]
  890 -> 282 [style=dashed label="lambda-introducer"]
  890 -> 283 [style=dashed label="literal-operator-id"]
  890 -> 85 [style=dashed label="namespace-alias"]
  890 -> 88 [style=dashed label="namespace-name"]
  890 -> 338 [style=dashed label="nested-name-specifier"]
  890 -> 290 [style=dashed label="operator-function-id"]
  890 -> 657 [style=dashed label="primary-expression"]
  890 -> 294 [style=dashed label="qualified-id"]
  890 -> 296 [style=dashed label="requires-expression"]
  890 -> 298 [style=dashed label="simple-template-id"]
  890 -> 300 [style=dashed label="string-literal"]
  890 -> 301 [style=dashed label="template-id"]
  890 -> 102 [style=dashed label="template-name"]
  890 -> 106 [style=dashed label="type-name"]
  890 -> 108 [style=dashed label="typedef-name"]
  890 -> 306 [style=dashed label="unqualified-id"]
  891 [label="State 891\n\l251 enumerator-definition: enumerator \"=\" constant-expression •\l"]
  891 -> "891R251" [style=solid]
 "891R251" [label="R251", fillcolor=3, shape=diamond, style=filled]
  892 [label="State 892\n\l248 enum-specifier: enum-head \"{\" enumerator-list \",\" \"}\" •\l"]
  892 -> "892R248" [style=solid]
 "892R248" [label="R248", fillcolor=3, shape=diamond, style=filled]
  893 [label="State 893\n\l253 enumerator-list: enumerator-list \",\" enumerator-definition •\l"]
  893 -> "893R253" [style=solid]
 "893R253" [label="R253", fillcolor=3, shape=diamond, style=filled]
  894 [label="State 894\n\l236 enum-base: \":\" type-specifier-seq •\l"]
  894 -> "894R236" [style=solid]
 "894R236" [label="R236", fillcolor=3, shape=diamond, style=filled]
  895 [label="State 895\n\l496 opaque-enum-declaration: enum-key attribute-specifier-seq-opt enum-head-name enum-base-opt \";\" •\l"]
  895 -> "895R496" [style=solid]
 "895R496" [label="R496", fillcolor=3, shape=diamond, style=filled]
  896 [label="State 896\n\l215 deduction-guide: explicit-specifier-opt template-name \"(\" parameter-declaration-clause \")\" • \"->\" simple-template-id \";\"\l"]
  896 -> 1041 [style=solid label="\"->\""]
  897 [label="State 897\n\l438 module-partition-opt: module-partition •\l"]
  897 -> "897R438" [style=solid]
 "897R438" [label="R438", fillcolor=3, shape=diamond, style=filled]
  898 [label="State 898\n\l427 module-declaration: EXPORT-opt \"module\" module-name module-partition-opt • attribute-specifier-seq-opt \";\"\l"]
  898 -> 177 [style=dashed label="attribute-specifier-seq"]
  898 -> 1042 [style=dashed label="attribute-specifier-seq-opt"]
  898 -> "898R83" [style=solid]
 "898R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  899 [label="State 899\n\l584 private-module-fragment: \"module\" \":\" • \"private\" \";\" declaration-seq-opt\l"]
  899 -> 1043 [style=solid label="\"private\""]
  900 [label="State 900\n\l709 type-constraint: nested-name-specifier-opt concept-name \"<\" template-argument-list-opt \">\" •\l"]
  900 -> "900R709" [style=solid]
 "900R709" [label="R709", fillcolor=3, shape=diamond, style=filled]
  901 [label="State 901\n\l150 concept-definition: \"concept\" concept-name \"=\" constraint-expression • \";\"\l"]
  901 -> 1044 [style=solid label="\";\""]
  902 [label="State 902\n\l161 constraint-expression: logical-or-expression •\l397 logical-or-expression: logical-or-expression • \"||\" logical-and-expression\l"]
  902 -> 557 [style=solid label="\"||\""]
  902 -> "902R161" [style=solid]
 "902R161" [label="R161", fillcolor=3, shape=diamond, style=filled]
  903 [label="State 903\n\l229 elaborated-type-specifier: class-key attribute-specifier-seq-opt nested-name-specifier-opt • IDENTIFIER\l"]
  903 -> 1045 [style=solid label="IDENTIFIER"]
  904 [label="State 904\n\l687 template-argument-list: template-argument-list \",\" template-argument • ELLIPSIS-opt\l"]
  904 -> 156 [style=solid label="\"...\""]
  904 -> 1046 [style=dashed label="ELLIPSIS-opt"]
  904 -> "904R5" [style=solid]
 "904R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  905 [label="State 905\n\l482 noptr-abstract-declarator: noptr-abstract-declarator-opt • parameters-and-qualifiers\l483                          | noptr-abstract-declarator-opt • \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt\l"]
  905 -> 347 [style=solid label="\"(\""]
  905 -> 908 [style=solid label="\"[\""]
  905 -> 1047 [style=dashed label="parameters-and-qualifiers"]
  906 [label="State 906\n\l484 noptr-abstract-declarator: \"(\" ptr-abstract-declarator • \")\"\l"]
  906 -> 1048 [style=solid label="\")\""]
  907 [label="State 907\n\l588 ptr-abstract-declarator: ptr-operator • ptr-abstract-declarator-opt\l"]
  907 -> 4 [style=solid label="IDENTIFIER"]
  907 -> 6 [style=solid label="\"::\""]
  907 -> 683 [style=solid label="\"(\""]
  907 -> 160 [style=solid label="\"&\""]
  907 -> 163 [style=solid label="\"&&\""]
  907 -> 21 [style=solid label="\"decltype\""]
  907 -> 164 [style=solid label="\"*\""]
  907 -> 55 [style=dashed label="class-name"]
  907 -> 121 [style=dashed label="decltype-specifier"]
  907 -> 71 [style=dashed label="enum-name"]
  907 -> 85 [style=dashed label="namespace-alias"]
  907 -> 88 [style=dashed label="namespace-name"]
  907 -> 187 [style=dashed label="nested-name-specifier"]
  907 -> 687 [style=dashed label="noptr-abstract-declarator"]
  907 -> 905 [style=dashed label="noptr-abstract-declarator-opt"]
  907 -> 913 [style=dashed label="ptr-abstract-declarator"]
  907 -> 914 [style=dashed label="ptr-abstract-declarator-opt"]
  907 -> 907 [style=dashed label="ptr-operator"]
  907 -> 96 [style=dashed label="simple-template-id"]
  907 -> 102 [style=dashed label="template-name"]
  907 -> 106 [style=dashed label="type-name"]
  907 -> 108 [style=dashed label="typedef-name"]
  907 -> "907R485d" [label="[\"(\"]", style=solid]
 "907R485d" [label="R485", fillcolor=5, shape=diamond, style=filled]
  907 -> "907R485" [style=solid]
 "907R485" [label="R485", fillcolor=3, shape=diamond, style=filled]
  907 -> "907R589" [label="[\")\"]", style=solid]
 "907R589" [label="R589", fillcolor=3, shape=diamond, style=filled]
  908 [label="State 908\n\l483 noptr-abstract-declarator: noptr-abstract-declarator-opt \"[\" • constant-expression-opt \"]\" attribute-specifier-seq-opt\l"]
  908 -> 238 [style=solid label="IDENTIFIER"]
  908 -> 239 [style=solid label="\"noexcept\""]
  908 -> 240 [style=solid label="\"!\""]
  908 -> 241 [style=solid label="\"::\""]
  908 -> 242 [style=solid label="\"this\""]
  908 -> 8 [style=solid label="\"typename\""]
  908 -> 243 [style=solid label="\"+\""]
  908 -> 244 [style=solid label="\"-\""]
  908 -> 245 [style=solid label="\"(\""]
  908 -> 246 [style=solid label="\"&\""]
  908 -> 247 [style=solid label="\"[\""]
  908 -> 248 [style=solid label="\"co_await\""]
  908 -> 249 [style=solid label="\"operator\""]
  908 -> 21 [style=solid label="\"decltype\""]
  908 -> 250 [style=solid label="\"*\""]
  908 -> 251 [style=solid label="\"requires\""]
  908 -> 252 [style=solid label="\"~\""]
  908 -> 253 [style=solid label="\"++\""]
  908 -> 254 [style=solid label="\"--\""]
  908 -> 255 [style=solid label="\"dynamic_cast\""]
  908 -> 256 [style=solid label="\"static_cast\""]
  908 -> 257 [style=solid label="\"reinterpret_cast\""]
  908 -> 258 [style=solid label="\"const_cast\""]
  908 -> 259 [style=solid label="\"typeid\""]
  908 -> 260 [style=solid label="\"literal\""]
  908 -> 27 [style=solid label="\"char\""]
  908 -> 28 [style=solid label="\"char8_t\""]
  908 -> 29 [style=solid label="\"char16_t\""]
  908 -> 30 [style=solid label="\"char32_t\""]
  908 -> 31 [style=solid label="\"wchar_t\""]
  908 -> 32 [style=solid label="\"bool\""]
  908 -> 33 [style=solid label="\"short\""]
  908 -> 34 [style=solid label="\"int\""]
  908 -> 35 [style=solid label="\"long\""]
  908 -> 36 [style=solid label="\"signed\""]
  908 -> 37 [style=solid label="\"unsigned\""]
  908 -> 38 [style=solid label="\"float\""]
  908 -> 39 [style=solid label="\"double\""]
  908 -> 40 [style=solid label="\"void\""]
  908 -> 118 [style=solid label="STRING_LITERAL"]
  908 -> 262 [style=solid label="\"sizeof\""]
  908 -> 263 [style=solid label="\"alignof\""]
  908 -> 265 [style=dashed label="SCOPE-opt"]
  908 -> 266 [style=dashed label="additive-expression"]
  908 -> 267 [style=dashed label="and-expression"]
  908 -> 269 [style=dashed label="await-expression"]
  908 -> 270 [style=dashed label="cast-expression"]
  908 -> 55 [style=dashed label="class-name"]
  908 -> 271 [style=dashed label="compare-expression"]
  908 -> 309 [style=dashed label="conditional-expression"]
  908 -> 623 [style=dashed label="constant-expression"]
  908 -> 1049 [style=dashed label="constant-expression-opt"]
  908 -> 273 [style=dashed label="conversion-function-id"]
  908 -> 63 [style=dashed label="decltype-specifier"]
  908 -> 274 [style=dashed label="delete-expression"]
  908 -> 71 [style=dashed label="enum-name"]
  908 -> 275 [style=dashed label="equality-expression"]
  908 -> 276 [style=dashed label="exclusive-or-expression"]
  908 -> 278 [style=dashed label="fold-expression"]
  908 -> 279 [style=dashed label="id-expression"]
  908 -> 280 [style=dashed label="inclusive-or-expression"]
  908 -> 281 [style=dashed label="lambda-expression"]
  908 -> 282 [style=dashed label="lambda-introducer"]
  908 -> 283 [style=dashed label="literal-operator-id"]
  908 -> 284 [style=dashed label="logical-and-expression"]
  908 -> 311 [style=dashed label="logical-or-expression"]
  908 -> 286 [style=dashed label="multiplicative-expression"]
  908 -> 85 [style=dashed label="namespace-alias"]
  908 -> 88 [style=dashed label="namespace-name"]
  908 -> 287 [style=dashed label="nested-name-specifier"]
  908 -> 90 [style=dashed label="nested-name-specifier-opt"]
  908 -> 288 [style=dashed label="new-expression"]
  908 -> 289 [style=dashed label="noexcept-expression"]
  908 -> 290 [style=dashed label="operator-function-id"]
  908 -> 94 [style=dashed label="placeholder-type-specifier"]
  908 -> 291 [style=dashed label="pm-expression"]
  908 -> 292 [style=dashed label="postfix-expression"]
  908 -> 293 [style=dashed label="primary-expression"]
  908 -> 294 [style=dashed label="qualified-id"]
  908 -> 295 [style=dashed label="relational-expression"]
  908 -> 296 [style=dashed label="requires-expression"]
  908 -> 297 [style=dashed label="shift-expression"]
  908 -> 298 [style=dashed label="simple-template-id"]
  908 -> 299 [style=dashed label="simple-type-specifier"]
  908 -> 300 [style=dashed label="string-literal"]
  908 -> 301 [style=dashed label="template-id"]
  908 -> 102 [style=dashed label="template-name"]
  908 -> 104 [style=dashed label="type-constraint"]
  908 -> 105 [style=dashed label="type-constraint-opt"]
  908 -> 106 [style=dashed label="type-name"]
  908 -> 108 [style=dashed label="typedef-name"]
  908 -> 303 [style=dashed label="typename-specifier"]
  908 -> 304 [style=dashed label="unary-expression"]
  908 -> 305 [style=dashed label="unary-operator"]
  908 -> 306 [style=dashed label="unqualified-id"]
  908 -> "908R19" [style=solid]
 "908R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  908 -> "908R159" [label="[\"]\"]", style=solid]
 "908R159" [label="R159", fillcolor=3, shape=diamond, style=filled]
  908 -> "908R458d" [label="[IDENTIFIER]", style=solid]
 "908R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  908 -> "908R710d" [label="[\"decltype\"]", style=solid]
 "908R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  908 -> "908R710" [label="[\"auto\"]", style=solid]
 "908R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  909 [label="State 909\n\l 30 abstract-declarator: noptr-abstract-declarator-opt parameters-and-qualifiers • trailing-return-type\l482 noptr-abstract-declarator: noptr-abstract-declarator-opt parameters-and-qualifiers •\l"]
  909 -> 625 [style=solid label="\"->\""]
  909 -> 1050 [style=dashed label="trailing-return-type"]
  909 -> "909R482" [style=solid]
 "909R482" [label="R482", fillcolor=3, shape=diamond, style=filled]
  910 [label="State 910\n\l488 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator \"[\" • constant-expression-opt \"]\" attribute-specifier-seq-opt\l"]
  910 -> 238 [style=solid label="IDENTIFIER"]
  910 -> 239 [style=solid label="\"noexcept\""]
  910 -> 240 [style=solid label="\"!\""]
  910 -> 241 [style=solid label="\"::\""]
  910 -> 242 [style=solid label="\"this\""]
  910 -> 8 [style=solid label="\"typename\""]
  910 -> 243 [style=solid label="\"+\""]
  910 -> 244 [style=solid label="\"-\""]
  910 -> 245 [style=solid label="\"(\""]
  910 -> 246 [style=solid label="\"&\""]
  910 -> 247 [style=solid label="\"[\""]
  910 -> 248 [style=solid label="\"co_await\""]
  910 -> 249 [style=solid label="\"operator\""]
  910 -> 21 [style=solid label="\"decltype\""]
  910 -> 250 [style=solid label="\"*\""]
  910 -> 251 [style=solid label="\"requires\""]
  910 -> 252 [style=solid label="\"~\""]
  910 -> 253 [style=solid label="\"++\""]
  910 -> 254 [style=solid label="\"--\""]
  910 -> 255 [style=solid label="\"dynamic_cast\""]
  910 -> 256 [style=solid label="\"static_cast\""]
  910 -> 257 [style=solid label="\"reinterpret_cast\""]
  910 -> 258 [style=solid label="\"const_cast\""]
  910 -> 259 [style=solid label="\"typeid\""]
  910 -> 260 [style=solid label="\"literal\""]
  910 -> 27 [style=solid label="\"char\""]
  910 -> 28 [style=solid label="\"char8_t\""]
  910 -> 29 [style=solid label="\"char16_t\""]
  910 -> 30 [style=solid label="\"char32_t\""]
  910 -> 31 [style=solid label="\"wchar_t\""]
  910 -> 32 [style=solid label="\"bool\""]
  910 -> 33 [style=solid label="\"short\""]
  910 -> 34 [style=solid label="\"int\""]
  910 -> 35 [style=solid label="\"long\""]
  910 -> 36 [style=solid label="\"signed\""]
  910 -> 37 [style=solid label="\"unsigned\""]
  910 -> 38 [style=solid label="\"float\""]
  910 -> 39 [style=solid label="\"double\""]
  910 -> 40 [style=solid label="\"void\""]
  910 -> 118 [style=solid label="STRING_LITERAL"]
  910 -> 262 [style=solid label="\"sizeof\""]
  910 -> 263 [style=solid label="\"alignof\""]
  910 -> 265 [style=dashed label="SCOPE-opt"]
  910 -> 266 [style=dashed label="additive-expression"]
  910 -> 267 [style=dashed label="and-expression"]
  910 -> 269 [style=dashed label="await-expression"]
  910 -> 270 [style=dashed label="cast-expression"]
  910 -> 55 [style=dashed label="class-name"]
  910 -> 271 [style=dashed label="compare-expression"]
  910 -> 309 [style=dashed label="conditional-expression"]
  910 -> 623 [style=dashed label="constant-expression"]
  910 -> 1051 [style=dashed label="constant-expression-opt"]
  910 -> 273 [style=dashed label="conversion-function-id"]
  910 -> 63 [style=dashed label="decltype-specifier"]
  910 -> 274 [style=dashed label="delete-expression"]
  910 -> 71 [style=dashed label="enum-name"]
  910 -> 275 [style=dashed label="equality-expression"]
  910 -> 276 [style=dashed label="exclusive-or-expression"]
  910 -> 278 [style=dashed label="fold-expression"]
  910 -> 279 [style=dashed label="id-expression"]
  910 -> 280 [style=dashed label="inclusive-or-expression"]
  910 -> 281 [style=dashed label="lambda-expression"]
  910 -> 282 [style=dashed label="lambda-introducer"]
  910 -> 283 [style=dashed label="literal-operator-id"]
  910 -> 284 [style=dashed label="logical-and-expression"]
  910 -> 311 [style=dashed label="logical-or-expression"]
  910 -> 286 [style=dashed label="multiplicative-expression"]
  910 -> 85 [style=dashed label="namespace-alias"]
  910 -> 88 [style=dashed label="namespace-name"]
  910 -> 287 [style=dashed label="nested-name-specifier"]
  910 -> 90 [style=dashed label="nested-name-specifier-opt"]
  910 -> 288 [style=dashed label="new-expression"]
  910 -> 289 [style=dashed label="noexcept-expression"]
  910 -> 290 [style=dashed label="operator-function-id"]
  910 -> 94 [style=dashed label="placeholder-type-specifier"]
  910 -> 291 [style=dashed label="pm-expression"]
  910 -> 292 [style=dashed label="postfix-expression"]
  910 -> 293 [style=dashed label="primary-expression"]
  910 -> 294 [style=dashed label="qualified-id"]
  910 -> 295 [style=dashed label="relational-expression"]
  910 -> 296 [style=dashed label="requires-expression"]
  910 -> 297 [style=dashed label="shift-expression"]
  910 -> 298 [style=dashed label="simple-template-id"]
  910 -> 299 [style=dashed label="simple-type-specifier"]
  910 -> 300 [style=dashed label="string-literal"]
  910 -> 301 [style=dashed label="template-id"]
  910 -> 102 [style=dashed label="template-name"]
  910 -> 104 [style=dashed label="type-constraint"]
  910 -> 105 [style=dashed label="type-constraint-opt"]
  910 -> 106 [style=dashed label="type-name"]
  910 -> 108 [style=dashed label="typedef-name"]
  910 -> 303 [style=dashed label="typename-specifier"]
  910 -> 304 [style=dashed label="unary-expression"]
  910 -> 305 [style=dashed label="unary-operator"]
  910 -> 306 [style=dashed label="unqualified-id"]
  910 -> "910R19" [style=solid]
 "910R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  910 -> "910R159" [label="[\"]\"]", style=solid]
 "910R159" [label="R159", fillcolor=3, shape=diamond, style=filled]
  910 -> "910R458d" [label="[IDENTIFIER]", style=solid]
 "910R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  910 -> "910R710d" [label="[\"decltype\"]", style=solid]
 "910R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  910 -> "910R710" [label="[\"auto\"]", style=solid]
 "910R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  911 [label="State 911\n\l487 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator parameters-and-qualifiers •\l"]
  911 -> "911R487" [style=solid]
 "911R487" [label="R487", fillcolor=3, shape=diamond, style=filled]
  912 [label="State 912\n\l 35 abstract-pack-declarator: ptr-operator abstract-pack-declarator •\l"]
  912 -> "912R35" [style=solid]
 "912R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  913 [label="State 913\n\l590 ptr-abstract-declarator-opt: ptr-abstract-declarator •\l"]
  913 -> "913R590" [style=solid]
 "913R590" [label="R590", fillcolor=3, shape=diamond, style=filled]
  914 [label="State 914\n\l588 ptr-abstract-declarator: ptr-operator ptr-abstract-declarator-opt •\l"]
  914 -> "914R588" [style=solid]
 "914R588" [label="R588", fillcolor=3, shape=diamond, style=filled]
  915 [label="State 915\n\l555 placeholder-type-specifier: type-constraint-opt \"decltype\" \"(\" \"auto\" \")\" •\l"]
  915 -> "915R555" [style=solid]
 "915R555" [label="R555", fillcolor=3, shape=diamond, style=filled]
  916 [label="State 916\n\l  6 ELLIPSIS-opt: \"...\" •\l489 noptr-abstract-pack-declarator: \"...\" •\l"]
  916 -> "916R6" [label="[IDENTIFIER, \"::\", \"operator\", \"decltype\", \"~\"]", style=solid]
 "916R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  916 -> "916R489" [style=solid]
 "916R489" [label="R489", fillcolor=3, shape=diamond, style=filled]
  917 [label="State 917\n\l484 noptr-abstract-declarator: \"(\" • ptr-abstract-declarator \")\"\l493 noptr-declarator: \"(\" • ptr-declarator \")\"\l"]
  917 -> 156 [style=solid label="\"...\""]
  917 -> 4 [style=solid label="IDENTIFIER"]
  917 -> 6 [style=solid label="\"::\""]
  917 -> 917 [style=solid label="\"(\""]
  917 -> 160 [style=solid label="\"&\""]
  917 -> 163 [style=solid label="\"&&\""]
  917 -> 21 [style=solid label="\"decltype\""]
  917 -> 164 [style=solid label="\"*\""]
  917 -> 165 [style=dashed label="ELLIPSIS-opt"]
  917 -> 55 [style=dashed label="class-name"]
  917 -> 171 [style=dashed label="declarator-id"]
  917 -> 121 [style=dashed label="decltype-specifier"]
  917 -> 71 [style=dashed label="enum-name"]
  917 -> 85 [style=dashed label="namespace-alias"]
  917 -> 88 [style=dashed label="namespace-name"]
  917 -> 187 [style=dashed label="nested-name-specifier"]
  917 -> 687 [style=dashed label="noptr-abstract-declarator"]
  917 -> 905 [style=dashed label="noptr-abstract-declarator-opt"]
  917 -> 329 [style=dashed label="noptr-declarator"]
  917 -> 906 [style=dashed label="ptr-abstract-declarator"]
  917 -> 330 [style=dashed label="ptr-declarator"]
  917 -> 1052 [style=dashed label="ptr-operator"]
  917 -> 96 [style=dashed label="simple-template-id"]
  917 -> 102 [style=dashed label="template-name"]
  917 -> 106 [style=dashed label="type-name"]
  917 -> 108 [style=dashed label="typedef-name"]
  917 -> "917R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "917R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  917 -> "917R5" [style=solid]
 "917R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  917 -> "917R485d" [label="[\"(\"]", style=solid]
 "917R485d" [label="R485", fillcolor=5, shape=diamond, style=filled]
  917 -> "917R485" [label="[\"[\"]", style=solid]
 "917R485" [label="R485", fillcolor=3, shape=diamond, style=filled]
  918 [label="State 918\n\l545 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq abstract-declarator-opt •\l546                      | attribute-specifier-seq-opt THIS-opt decl-specifier-seq abstract-declarator-opt • \"=\" initializer-clause\l"]
  918 -> 1053 [style=solid label="\"=\""]
  918 -> "918R545" [style=solid]
 "918R545" [label="R545", fillcolor=3, shape=diamond, style=filled]
  919 [label="State 919\n\l543 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq declarator •\l544                      | attribute-specifier-seq-opt THIS-opt decl-specifier-seq declarator • \"=\" initializer-clause\l"]
  919 -> 1054 [style=solid label="\"=\""]
  919 -> "919R543" [style=solid]
 "919R543" [label="R543", fillcolor=3, shape=diamond, style=filled]
  920 [label="State 920\n\l 35 abstract-pack-declarator: ptr-operator • abstract-pack-declarator\l588 ptr-abstract-declarator: ptr-operator • ptr-abstract-declarator-opt\l592 ptr-declarator: ptr-operator • ptr-declarator\l"]
  920 -> 916 [style=solid label="\"...\""]
  920 -> 4 [style=solid label="IDENTIFIER"]
  920 -> 6 [style=solid label="\"::\""]
  920 -> 917 [style=solid label="\"(\""]
  920 -> 160 [style=solid label="\"&\""]
  920 -> 163 [style=solid label="\"&&\""]
  920 -> 21 [style=solid label="\"decltype\""]
  920 -> 164 [style=solid label="\"*\""]
  920 -> 165 [style=dashed label="ELLIPSIS-opt"]
  920 -> 912 [style=dashed label="abstract-pack-declarator"]
  920 -> 55 [style=dashed label="class-name"]
  920 -> 171 [style=dashed label="declarator-id"]
  920 -> 121 [style=dashed label="decltype-specifier"]
  920 -> 71 [style=dashed label="enum-name"]
  920 -> 85 [style=dashed label="namespace-alias"]
  920 -> 88 [style=dashed label="namespace-name"]
  920 -> 187 [style=dashed label="nested-name-specifier"]
  920 -> 687 [style=dashed label="noptr-abstract-declarator"]
  920 -> 905 [style=dashed label="noptr-abstract-declarator-opt"]
  920 -> 689 [style=dashed label="noptr-abstract-pack-declarator"]
  920 -> 329 [style=dashed label="noptr-declarator"]
  920 -> 913 [style=dashed label="ptr-abstract-declarator"]
  920 -> 914 [style=dashed label="ptr-abstract-declarator-opt"]
  920 -> 350 [style=dashed label="ptr-declarator"]
  920 -> 920 [style=dashed label="ptr-operator"]
  920 -> 96 [style=dashed label="simple-template-id"]
  920 -> 102 [style=dashed label="template-name"]
  920 -> 106 [style=dashed label="type-name"]
  920 -> 108 [style=dashed label="typedef-name"]
  920 -> "920R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "920R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  920 -> "920R5" [label="[\"operator\", \"~\"]", style=solid]
 "920R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  920 -> "920R485d" [label="[\"(\"]", style=solid]
 "920R485d" [label="R485", fillcolor=5, shape=diamond, style=filled]
  920 -> "920R485" [label="[\"[\"]", style=solid]
 "920R485" [label="R485", fillcolor=3, shape=diamond, style=filled]
  920 -> "920R589d" [label="[\"...\"]", style=solid]
 "920R589d" [label="R589", fillcolor=5, shape=diamond, style=filled]
  920 -> "920R589" [style=solid]
 "920R589" [label="R589", fillcolor=3, shape=diamond, style=filled]
  921 [label="State 921\n\l720 type-parameter: template-head type-parameter-key ELLIPSIS-opt IDENTIFIER-opt •\l"]
  921 -> "921R720" [style=solid]
 "921R720" [label="R720", fillcolor=3, shape=diamond, style=filled]
  922 [label="State 922\n\l721 type-parameter: template-head type-parameter-key IDENTIFIER-opt \"=\" • id-expression\l"]
  922 -> 238 [style=solid label="IDENTIFIER"]
  922 -> 6 [style=solid label="\"::\""]
  922 -> 249 [style=solid label="\"operator\""]
  922 -> 21 [style=solid label="\"decltype\""]
  922 -> 336 [style=solid label="\"~\""]
  922 -> 55 [style=dashed label="class-name"]
  922 -> 273 [style=dashed label="conversion-function-id"]
  922 -> 121 [style=dashed label="decltype-specifier"]
  922 -> 71 [style=dashed label="enum-name"]
  922 -> 1055 [style=dashed label="id-expression"]
  922 -> 283 [style=dashed label="literal-operator-id"]
  922 -> 85 [style=dashed label="namespace-alias"]
  922 -> 88 [style=dashed label="namespace-name"]
  922 -> 338 [style=dashed label="nested-name-specifier"]
  922 -> 290 [style=dashed label="operator-function-id"]
  922 -> 294 [style=dashed label="qualified-id"]
  922 -> 298 [style=dashed label="simple-template-id"]
  922 -> 301 [style=dashed label="template-id"]
  922 -> 102 [style=dashed label="template-name"]
  922 -> 106 [style=dashed label="type-name"]
  922 -> 108 [style=dashed label="typedef-name"]
  922 -> 306 [style=dashed label="unqualified-id"]
  923 [label="State 923\n\l719 type-parameter: type-constraint IDENTIFIER-opt \"=\" type-id •\l"]
  923 -> "923R719" [style=solid]
 "923R719" [label="R719", fillcolor=3, shape=diamond, style=filled]
  924 [label="State 924\n\l717 type-parameter: type-parameter-key IDENTIFIER-opt \"=\" type-id •\l"]
  924 -> "924R717" [style=solid]
 "924R717" [label="R717", fillcolor=3, shape=diamond, style=filled]
  925 [label="State 925\n\l 44 alias-declaration: \"using\" IDENTIFIER attribute-specifier-seq-opt \"=\" defining-type-id \";\" •\l"]
  925 -> "925R44" [style=solid]
 "925R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  926 [label="State 926\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l220 defining-type-specifier-seq: defining-type-specifier attribute-specifier-seq-opt •\l"]
  926 -> 158 [style=solid label="\"alignas\""]
  926 -> 162 [style=solid label="\"[\""]
  926 -> 166 [style=dashed label="alignment-specifier"]
  926 -> 167 [style=dashed label="attribute-specifier"]
  926 -> "926R220d" [label="[\"[\"]", style=solid]
 "926R220d" [label="R220", fillcolor=5, shape=diamond, style=filled]
  926 -> "926R220" [style=solid]
 "926R220" [label="R220", fillcolor=3, shape=diamond, style=filled]
  927 [label="State 927\n\l221 defining-type-specifier-seq: defining-type-specifier defining-type-specifier-seq •\l"]
  927 -> "927R221" [style=solid]
 "927R221" [label="R221", fillcolor=3, shape=diamond, style=filled]
  928 [label="State 928\n\l216 defining-type-id: defining-type-specifier-seq abstract-declarator-opt •\l"]
  928 -> "928R216" [style=solid]
 "928R216" [label="R216", fillcolor=3, shape=diamond, style=filled]
  929 [label="State 929\n\l477 noexcept-expression: \"noexcept\" \"(\" expression \")\" •\l"]
  929 -> "929R477" [style=solid]
 "929R477" [label="R477", fillcolor=3, shape=diamond, style=filled]
  930 [label="State 930\n\l286 fold-expression: \"(\" \"...\" fold-operator cast-expression • \")\"\l"]
  930 -> 1056 [style=solid label="\")\""]
  931 [label="State 931\n\l285 fold-expression: \"(\" cast-expression fold-operator \"...\" • \")\"\l287                | \"(\" cast-expression fold-operator \"...\" • fold-operator cast-expression \")\"\l"]
  931 -> 709 [style=solid label="\",\""]
  931 -> 710 [style=solid label="\"+\""]
  931 -> 711 [style=solid label="\"-\""]
  931 -> 712 [style=solid label="\"=\""]
  931 -> 1057 [style=solid label="\")\""]
  931 -> 713 [style=solid label="\"&\""]
  931 -> 714 [style=solid label="\"*=\""]
  931 -> 715 [style=solid label="\"/=\""]
  931 -> 716 [style=solid label="\"%=\""]
  931 -> 717 [style=solid label="\"+=\""]
  931 -> 718 [style=solid label="\"-=\""]
  931 -> 719 [style=solid label="\">>=\""]
  931 -> 720 [style=solid label="\"<<=\""]
  931 -> 721 [style=solid label="\"&=\""]
  931 -> 722 [style=solid label="\"^=\""]
  931 -> 723 [style=solid label="\"|=\""]
  931 -> 724 [style=solid label="\"&&\""]
  931 -> 725 [style=solid label="\"||\""]
  931 -> 726 [style=solid label="\"==\""]
  931 -> 727 [style=solid label="\"!=\""]
  931 -> 728 [style=solid label="\"^\""]
  931 -> 729 [style=solid label="\"<\""]
  931 -> 730 [style=solid label="\">\""]
  931 -> 731 [style=solid label="\"*\""]
  931 -> 732 [style=solid label="\"/\""]
  931 -> 733 [style=solid label="\"%\""]
  931 -> 734 [style=solid label="\"|\""]
  931 -> 735 [style=solid label="\"<<\""]
  931 -> 736 [style=solid label="\">>\""]
  931 -> 737 [style=solid label="\"<=\""]
  931 -> 738 [style=solid label="\">=\""]
  931 -> 739 [style=solid label="\".*\""]
  931 -> 740 [style=solid label="\"->*\""]
  931 -> 1058 [style=dashed label="fold-operator"]
  932 [label="State 932\n\l130 cast-expression: \"(\" type-id \")\" cast-expression •\l"]
  932 -> "932R130" [style=solid]
 "932R130" [label="R130", fillcolor=3, shape=diamond, style=filled]
  933 [label="State 933\n\l637 simple-capture: \"&\" IDENTIFIER ELLIPSIS-opt •\l"]
  933 -> "933R637" [style=solid]
 "933R637" [label="R637", fillcolor=3, shape=diamond, style=filled]
  934 [label="State 934\n\l347 init-capture: \"&\" ELLIPSIS-opt IDENTIFIER • initializer\l"]
  934 -> 378 [style=solid label="\"=\""]
  934 -> 379 [style=solid label="\"(\""]
  934 -> 380 [style=solid label="\"{\""]
  934 -> 382 [style=dashed label="brace-or-equal-initializer"]
  934 -> 383 [style=dashed label="braced-init-list"]
  934 -> 1059 [style=dashed label="initializer"]
  935 [label="State 935\n\l346 init-capture: ELLIPSIS-opt IDENTIFIER initializer •\l"]
  935 -> "935R346" [style=solid]
 "935R346" [label="R346", fillcolor=3, shape=diamond, style=filled]
  936 [label="State 936\n\l347 init-capture: \"&\" • ELLIPSIS-opt IDENTIFIER initializer\l637 simple-capture: \"&\" • IDENTIFIER ELLIPSIS-opt\l"]
  936 -> 156 [style=solid label="\"...\""]
  936 -> 746 [style=solid label="IDENTIFIER"]
  936 -> 747 [style=dashed label="ELLIPSIS-opt"]
  936 -> "936R5d" [label="[IDENTIFIER]", style=solid]
 "936R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  937 [label="State 937\n\l128 capture-list: capture-list • \",\" capture\l381 lambda-capture: capture-default \",\" capture-list •\l"]
  937 -> 751 [style=solid label="\",\""]
  937 -> "937R381" [style=solid]
 "937R381" [label="R381", fillcolor=3, shape=diamond, style=filled]
  938 [label="State 938\n\l128 capture-list: capture-list \",\" capture •\l"]
  938 -> "938R128" [style=solid]
 "938R128" [label="R128", fillcolor=3, shape=diamond, style=filled]
  939 [label="State 939\n\l502 overloadable-operator: \"delete\" \"[\" \"]\" •\l"]
  939 -> "939R502" [style=solid]
 "939R502" [label="R502", fillcolor=3, shape=diamond, style=filled]
  940 [label="State 940\n\l501 overloadable-operator: \"new\" \"[\" \"]\" •\l"]
  940 -> "940R501" [style=solid]
 "940R501" [label="R501", fillcolor=3, shape=diamond, style=filled]
  941 [label="State 941\n\l498 operator-function-id: \"operator\" overloadable-operator \"<\" template-argument-list-opt • \">\"\l"]
  941 -> 1060 [style=solid label="\">\""]
  942 [label="State 942\n\l166 conversion-declarator: ptr-operator conversion-declarator-opt •\l"]
  942 -> "942R166" [style=solid]
 "942R166" [label="R166", fillcolor=3, shape=diamond, style=filled]
  943 [label="State 943\n\l616 requirement-parameter-list: \"(\" parameter-declaration-clause \")\" •\l"]
  943 -> "943R616" [style=solid]
 "943R616" [label="R616", fillcolor=3, shape=diamond, style=filled]
  944 [label="State 944\n\l724 type-requirement: \"typename\" • nested-name-specifier-opt type-name \";\"\l733 typename-specifier: \"typename\" • nested-name-specifier IDENTIFIER\l734                   | \"typename\" • nested-name-specifier TEMPLATE-opt simple-template-id\l"]
  944 -> 4 [style=solid label="IDENTIFIER"]
  944 -> 6 [style=solid label="\"::\""]
  944 -> 21 [style=solid label="\"decltype\""]
  944 -> 55 [style=dashed label="class-name"]
  944 -> 121 [style=dashed label="decltype-specifier"]
  944 -> 71 [style=dashed label="enum-name"]
  944 -> 85 [style=dashed label="namespace-alias"]
  944 -> 88 [style=dashed label="namespace-name"]
  944 -> 1061 [style=dashed label="nested-name-specifier"]
  944 -> 1062 [style=dashed label="nested-name-specifier-opt"]
  944 -> 96 [style=dashed label="simple-template-id"]
  944 -> 102 [style=dashed label="template-name"]
  944 -> 106 [style=dashed label="type-name"]
  944 -> 108 [style=dashed label="typedef-name"]
  944 -> "944R458d" [label="[IDENTIFIER]", style=solid]
 "944R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  945 [label="State 945\n\l148 compound-requirement: \"{\" • expression \"}\" NOEXCEPT-opt return-type-requirement-opt \";\"\l"]
  945 -> 238 [style=solid label="IDENTIFIER"]
  945 -> 239 [style=solid label="\"noexcept\""]
  945 -> 240 [style=solid label="\"!\""]
  945 -> 241 [style=solid label="\"::\""]
  945 -> 242 [style=solid label="\"this\""]
  945 -> 8 [style=solid label="\"typename\""]
  945 -> 243 [style=solid label="\"+\""]
  945 -> 244 [style=solid label="\"-\""]
  945 -> 245 [style=solid label="\"(\""]
  945 -> 246 [style=solid label="\"&\""]
  945 -> 247 [style=solid label="\"[\""]
  945 -> 248 [style=solid label="\"co_await\""]
  945 -> 249 [style=solid label="\"operator\""]
  945 -> 21 [style=solid label="\"decltype\""]
  945 -> 250 [style=solid label="\"*\""]
  945 -> 251 [style=solid label="\"requires\""]
  945 -> 252 [style=solid label="\"~\""]
  945 -> 253 [style=solid label="\"++\""]
  945 -> 254 [style=solid label="\"--\""]
  945 -> 255 [style=solid label="\"dynamic_cast\""]
  945 -> 256 [style=solid label="\"static_cast\""]
  945 -> 257 [style=solid label="\"reinterpret_cast\""]
  945 -> 258 [style=solid label="\"const_cast\""]
  945 -> 259 [style=solid label="\"typeid\""]
  945 -> 260 [style=solid label="\"literal\""]
  945 -> 27 [style=solid label="\"char\""]
  945 -> 28 [style=solid label="\"char8_t\""]
  945 -> 29 [style=solid label="\"char16_t\""]
  945 -> 30 [style=solid label="\"char32_t\""]
  945 -> 31 [style=solid label="\"wchar_t\""]
  945 -> 32 [style=solid label="\"bool\""]
  945 -> 33 [style=solid label="\"short\""]
  945 -> 34 [style=solid label="\"int\""]
  945 -> 35 [style=solid label="\"long\""]
  945 -> 36 [style=solid label="\"signed\""]
  945 -> 37 [style=solid label="\"unsigned\""]
  945 -> 38 [style=solid label="\"float\""]
  945 -> 39 [style=solid label="\"double\""]
  945 -> 40 [style=solid label="\"void\""]
  945 -> 118 [style=solid label="STRING_LITERAL"]
  945 -> 261 [style=solid label="\"throw\""]
  945 -> 262 [style=solid label="\"sizeof\""]
  945 -> 263 [style=solid label="\"alignof\""]
  945 -> 264 [style=solid label="\"co_yield\""]
  945 -> 265 [style=dashed label="SCOPE-opt"]
  945 -> 266 [style=dashed label="additive-expression"]
  945 -> 267 [style=dashed label="and-expression"]
  945 -> 268 [style=dashed label="assignment-expression"]
  945 -> 269 [style=dashed label="await-expression"]
  945 -> 270 [style=dashed label="cast-expression"]
  945 -> 55 [style=dashed label="class-name"]
  945 -> 271 [style=dashed label="compare-expression"]
  945 -> 272 [style=dashed label="conditional-expression"]
  945 -> 273 [style=dashed label="conversion-function-id"]
  945 -> 63 [style=dashed label="decltype-specifier"]
  945 -> 274 [style=dashed label="delete-expression"]
  945 -> 71 [style=dashed label="enum-name"]
  945 -> 275 [style=dashed label="equality-expression"]
  945 -> 276 [style=dashed label="exclusive-or-expression"]
  945 -> 1063 [style=dashed label="expression"]
  945 -> 278 [style=dashed label="fold-expression"]
  945 -> 279 [style=dashed label="id-expression"]
  945 -> 280 [style=dashed label="inclusive-or-expression"]
  945 -> 281 [style=dashed label="lambda-expression"]
  945 -> 282 [style=dashed label="lambda-introducer"]
  945 -> 283 [style=dashed label="literal-operator-id"]
  945 -> 284 [style=dashed label="logical-and-expression"]
  945 -> 285 [style=dashed label="logical-or-expression"]
  945 -> 286 [style=dashed label="multiplicative-expression"]
  945 -> 85 [style=dashed label="namespace-alias"]
  945 -> 88 [style=dashed label="namespace-name"]
  945 -> 287 [style=dashed label="nested-name-specifier"]
  945 -> 90 [style=dashed label="nested-name-specifier-opt"]
  945 -> 288 [style=dashed label="new-expression"]
  945 -> 289 [style=dashed label="noexcept-expression"]
  945 -> 290 [style=dashed label="operator-function-id"]
  945 -> 94 [style=dashed label="placeholder-type-specifier"]
  945 -> 291 [style=dashed label="pm-expression"]
  945 -> 292 [style=dashed label="postfix-expression"]
  945 -> 293 [style=dashed label="primary-expression"]
  945 -> 294 [style=dashed label="qualified-id"]
  945 -> 295 [style=dashed label="relational-expression"]
  945 -> 296 [style=dashed label="requires-expression"]
  945 -> 297 [style=dashed label="shift-expression"]
  945 -> 298 [style=dashed label="simple-template-id"]
  945 -> 299 [style=dashed label="simple-type-specifier"]
  945 -> 300 [style=dashed label="string-literal"]
  945 -> 301 [style=dashed label="template-id"]
  945 -> 102 [style=dashed label="template-name"]
  945 -> 302 [style=dashed label="throw-expression"]
  945 -> 104 [style=dashed label="type-constraint"]
  945 -> 105 [style=dashed label="type-constraint-opt"]
  945 -> 106 [style=dashed label="type-name"]
  945 -> 108 [style=dashed label="typedef-name"]
  945 -> 303 [style=dashed label="typename-specifier"]
  945 -> 304 [style=dashed label="unary-expression"]
  945 -> 305 [style=dashed label="unary-operator"]
  945 -> 306 [style=dashed label="unqualified-id"]
  945 -> 307 [style=dashed label="yield-expression"]
  945 -> "945R19" [style=solid]
 "945R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  945 -> "945R458d" [label="[IDENTIFIER]", style=solid]
 "945R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  945 -> "945R710d" [label="[\"decltype\"]", style=solid]
 "945R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  945 -> "945R710" [label="[\"auto\"]", style=solid]
 "945R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  946 [label="State 946\n\l461 nested-requirement: \"requires\" • constraint-expression \";\"\l624 requires-expression: \"requires\" • requirement-parameter-list-opt requirement-body\l"]
  946 -> 238 [style=solid label="IDENTIFIER"]
  946 -> 239 [style=solid label="\"noexcept\""]
  946 -> 240 [style=solid label="\"!\""]
  946 -> 241 [style=solid label="\"::\""]
  946 -> 242 [style=solid label="\"this\""]
  946 -> 8 [style=solid label="\"typename\""]
  946 -> 243 [style=solid label="\"+\""]
  946 -> 244 [style=solid label="\"-\""]
  946 -> 1064 [style=solid label="\"(\""]
  946 -> 246 [style=solid label="\"&\""]
  946 -> 247 [style=solid label="\"[\""]
  946 -> 248 [style=solid label="\"co_await\""]
  946 -> 249 [style=solid label="\"operator\""]
  946 -> 21 [style=solid label="\"decltype\""]
  946 -> 250 [style=solid label="\"*\""]
  946 -> 251 [style=solid label="\"requires\""]
  946 -> 252 [style=solid label="\"~\""]
  946 -> 253 [style=solid label="\"++\""]
  946 -> 254 [style=solid label="\"--\""]
  946 -> 255 [style=solid label="\"dynamic_cast\""]
  946 -> 256 [style=solid label="\"static_cast\""]
  946 -> 257 [style=solid label="\"reinterpret_cast\""]
  946 -> 258 [style=solid label="\"const_cast\""]
  946 -> 259 [style=solid label="\"typeid\""]
  946 -> 260 [style=solid label="\"literal\""]
  946 -> 27 [style=solid label="\"char\""]
  946 -> 28 [style=solid label="\"char8_t\""]
  946 -> 29 [style=solid label="\"char16_t\""]
  946 -> 30 [style=solid label="\"char32_t\""]
  946 -> 31 [style=solid label="\"wchar_t\""]
  946 -> 32 [style=solid label="\"bool\""]
  946 -> 33 [style=solid label="\"short\""]
  946 -> 34 [style=solid label="\"int\""]
  946 -> 35 [style=solid label="\"long\""]
  946 -> 36 [style=solid label="\"signed\""]
  946 -> 37 [style=solid label="\"unsigned\""]
  946 -> 38 [style=solid label="\"float\""]
  946 -> 39 [style=solid label="\"double\""]
  946 -> 40 [style=solid label="\"void\""]
  946 -> 118 [style=solid label="STRING_LITERAL"]
  946 -> 262 [style=solid label="\"sizeof\""]
  946 -> 263 [style=solid label="\"alignof\""]
  946 -> 265 [style=dashed label="SCOPE-opt"]
  946 -> 266 [style=dashed label="additive-expression"]
  946 -> 267 [style=dashed label="and-expression"]
  946 -> 269 [style=dashed label="await-expression"]
  946 -> 270 [style=dashed label="cast-expression"]
  946 -> 55 [style=dashed label="class-name"]
  946 -> 271 [style=dashed label="compare-expression"]
  946 -> 1065 [style=dashed label="constraint-expression"]
  946 -> 273 [style=dashed label="conversion-function-id"]
  946 -> 63 [style=dashed label="decltype-specifier"]
  946 -> 274 [style=dashed label="delete-expression"]
  946 -> 71 [style=dashed label="enum-name"]
  946 -> 275 [style=dashed label="equality-expression"]
  946 -> 276 [style=dashed label="exclusive-or-expression"]
  946 -> 278 [style=dashed label="fold-expression"]
  946 -> 279 [style=dashed label="id-expression"]
  946 -> 280 [style=dashed label="inclusive-or-expression"]
  946 -> 281 [style=dashed label="lambda-expression"]
  946 -> 282 [style=dashed label="lambda-introducer"]
  946 -> 283 [style=dashed label="literal-operator-id"]
  946 -> 284 [style=dashed label="logical-and-expression"]
  946 -> 902 [style=dashed label="logical-or-expression"]
  946 -> 286 [style=dashed label="multiplicative-expression"]
  946 -> 85 [style=dashed label="namespace-alias"]
  946 -> 88 [style=dashed label="namespace-name"]
  946 -> 287 [style=dashed label="nested-name-specifier"]
  946 -> 90 [style=dashed label="nested-name-specifier-opt"]
  946 -> 288 [style=dashed label="new-expression"]
  946 -> 289 [style=dashed label="noexcept-expression"]
  946 -> 290 [style=dashed label="operator-function-id"]
  946 -> 94 [style=dashed label="placeholder-type-specifier"]
  946 -> 291 [style=dashed label="pm-expression"]
  946 -> 292 [style=dashed label="postfix-expression"]
  946 -> 293 [style=dashed label="primary-expression"]
  946 -> 294 [style=dashed label="qualified-id"]
  946 -> 295 [style=dashed label="relational-expression"]
  946 -> 505 [style=dashed label="requirement-parameter-list"]
  946 -> 506 [style=dashed label="requirement-parameter-list-opt"]
  946 -> 296 [style=dashed label="requires-expression"]
  946 -> 297 [style=dashed label="shift-expression"]
  946 -> 298 [style=dashed label="simple-template-id"]
  946 -> 299 [style=dashed label="simple-type-specifier"]
  946 -> 300 [style=dashed label="string-literal"]
  946 -> 301 [style=dashed label="template-id"]
  946 -> 102 [style=dashed label="template-name"]
  946 -> 104 [style=dashed label="type-constraint"]
  946 -> 105 [style=dashed label="type-constraint-opt"]
  946 -> 106 [style=dashed label="type-name"]
  946 -> 108 [style=dashed label="typedef-name"]
  946 -> 303 [style=dashed label="typename-specifier"]
  946 -> 304 [style=dashed label="unary-expression"]
  946 -> 305 [style=dashed label="unary-operator"]
  946 -> 306 [style=dashed label="unqualified-id"]
  946 -> "946R19" [style=solid]
 "946R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  946 -> "946R458d" [label="[IDENTIFIER]", style=solid]
 "946R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  946 -> "946R617" [label="[\"{\"]", style=solid]
 "946R617" [label="R617", fillcolor=3, shape=diamond, style=filled]
  946 -> "946R710d" [label="[\"decltype\"]", style=solid]
 "946R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  946 -> "946R710" [label="[\"auto\"]", style=solid]
 "946R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  947 [label="State 947\n\l613 requirement: compound-requirement •\l"]
  947 -> "947R613" [style=solid]
 "947R613" [label="R613", fillcolor=3, shape=diamond, style=filled]
  948 [label="State 948\n\l278 expression: expression • \",\" assignment-expression\l643 simple-requirement: expression • \";\"\l"]
  948 -> 534 [style=solid label="\",\""]
  948 -> 1066 [style=solid label="\";\""]
  949 [label="State 949\n\l614 requirement: nested-requirement •\l"]
  949 -> "949R614" [style=solid]
 "949R614" [label="R614", fillcolor=3, shape=diamond, style=filled]
  950 [label="State 950\n\l619 requirement-seq: requirement •\l"]
  950 -> "950R619" [style=solid]
 "950R619" [label="R619", fillcolor=3, shape=diamond, style=filled]
  951 [label="State 951\n\l615 requirement-body: \"{\" requirement-seq • \"}\"\l620 requirement-seq: requirement-seq • requirement\l"]
  951 -> 238 [style=solid label="IDENTIFIER"]
  951 -> 239 [style=solid label="\"noexcept\""]
  951 -> 240 [style=solid label="\"!\""]
  951 -> 241 [style=solid label="\"::\""]
  951 -> 242 [style=solid label="\"this\""]
  951 -> 944 [style=solid label="\"typename\""]
  951 -> 243 [style=solid label="\"+\""]
  951 -> 244 [style=solid label="\"-\""]
  951 -> 245 [style=solid label="\"(\""]
  951 -> 246 [style=solid label="\"&\""]
  951 -> 247 [style=solid label="\"[\""]
  951 -> 248 [style=solid label="\"co_await\""]
  951 -> 945 [style=solid label="\"{\""]
  951 -> 1067 [style=solid label="\"}\""]
  951 -> 249 [style=solid label="\"operator\""]
  951 -> 21 [style=solid label="\"decltype\""]
  951 -> 250 [style=solid label="\"*\""]
  951 -> 946 [style=solid label="\"requires\""]
  951 -> 252 [style=solid label="\"~\""]
  951 -> 253 [style=solid label="\"++\""]
  951 -> 254 [style=solid label="\"--\""]
  951 -> 255 [style=solid label="\"dynamic_cast\""]
  951 -> 256 [style=solid label="\"static_cast\""]
  951 -> 257 [style=solid label="\"reinterpret_cast\""]
  951 -> 258 [style=solid label="\"const_cast\""]
  951 -> 259 [style=solid label="\"typeid\""]
  951 -> 260 [style=solid label="\"literal\""]
  951 -> 27 [style=solid label="\"char\""]
  951 -> 28 [style=solid label="\"char8_t\""]
  951 -> 29 [style=solid label="\"char16_t\""]
  951 -> 30 [style=solid label="\"char32_t\""]
  951 -> 31 [style=solid label="\"wchar_t\""]
  951 -> 32 [style=solid label="\"bool\""]
  951 -> 33 [style=solid label="\"short\""]
  951 -> 34 [style=solid label="\"int\""]
  951 -> 35 [style=solid label="\"long\""]
  951 -> 36 [style=solid label="\"signed\""]
  951 -> 37 [style=solid label="\"unsigned\""]
  951 -> 38 [style=solid label="\"float\""]
  951 -> 39 [style=solid label="\"double\""]
  951 -> 40 [style=solid label="\"void\""]
  951 -> 118 [style=solid label="STRING_LITERAL"]
  951 -> 261 [style=solid label="\"throw\""]
  951 -> 262 [style=solid label="\"sizeof\""]
  951 -> 263 [style=solid label="\"alignof\""]
  951 -> 264 [style=solid label="\"co_yield\""]
  951 -> 265 [style=dashed label="SCOPE-opt"]
  951 -> 266 [style=dashed label="additive-expression"]
  951 -> 267 [style=dashed label="and-expression"]
  951 -> 268 [style=dashed label="assignment-expression"]
  951 -> 269 [style=dashed label="await-expression"]
  951 -> 270 [style=dashed label="cast-expression"]
  951 -> 55 [style=dashed label="class-name"]
  951 -> 271 [style=dashed label="compare-expression"]
  951 -> 947 [style=dashed label="compound-requirement"]
  951 -> 272 [style=dashed label="conditional-expression"]
  951 -> 273 [style=dashed label="conversion-function-id"]
  951 -> 63 [style=dashed label="decltype-specifier"]
  951 -> 274 [style=dashed label="delete-expression"]
  951 -> 71 [style=dashed label="enum-name"]
  951 -> 275 [style=dashed label="equality-expression"]
  951 -> 276 [style=dashed label="exclusive-or-expression"]
  951 -> 948 [style=dashed label="expression"]
  951 -> 278 [style=dashed label="fold-expression"]
  951 -> 279 [style=dashed label="id-expression"]
  951 -> 280 [style=dashed label="inclusive-or-expression"]
  951 -> 281 [style=dashed label="lambda-expression"]
  951 -> 282 [style=dashed label="lambda-introducer"]
  951 -> 283 [style=dashed label="literal-operator-id"]
  951 -> 284 [style=dashed label="logical-and-expression"]
  951 -> 285 [style=dashed label="logical-or-expression"]
  951 -> 286 [style=dashed label="multiplicative-expression"]
  951 -> 85 [style=dashed label="namespace-alias"]
  951 -> 88 [style=dashed label="namespace-name"]
  951 -> 287 [style=dashed label="nested-name-specifier"]
  951 -> 90 [style=dashed label="nested-name-specifier-opt"]
  951 -> 949 [style=dashed label="nested-requirement"]
  951 -> 288 [style=dashed label="new-expression"]
  951 -> 289 [style=dashed label="noexcept-expression"]
  951 -> 290 [style=dashed label="operator-function-id"]
  951 -> 94 [style=dashed label="placeholder-type-specifier"]
  951 -> 291 [style=dashed label="pm-expression"]
  951 -> 292 [style=dashed label="postfix-expression"]
  951 -> 293 [style=dashed label="primary-expression"]
  951 -> 294 [style=dashed label="qualified-id"]
  951 -> 295 [style=dashed label="relational-expression"]
  951 -> 1068 [style=dashed label="requirement"]
  951 -> 296 [style=dashed label="requires-expression"]
  951 -> 297 [style=dashed label="shift-expression"]
  951 -> 952 [style=dashed label="simple-requirement"]
  951 -> 298 [style=dashed label="simple-template-id"]
  951 -> 299 [style=dashed label="simple-type-specifier"]
  951 -> 300 [style=dashed label="string-literal"]
  951 -> 301 [style=dashed label="template-id"]
  951 -> 102 [style=dashed label="template-name"]
  951 -> 302 [style=dashed label="throw-expression"]
  951 -> 104 [style=dashed label="type-constraint"]
  951 -> 105 [style=dashed label="type-constraint-opt"]
  951 -> 106 [style=dashed label="type-name"]
  951 -> 953 [style=dashed label="type-requirement"]
  951 -> 108 [style=dashed label="typedef-name"]
  951 -> 303 [style=dashed label="typename-specifier"]
  951 -> 304 [style=dashed label="unary-expression"]
  951 -> 305 [style=dashed label="unary-operator"]
  951 -> 306 [style=dashed label="unqualified-id"]
  951 -> 307 [style=dashed label="yield-expression"]
  951 -> "951R19" [style=solid]
 "951R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  951 -> "951R458d" [label="[IDENTIFIER]", style=solid]
 "951R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  951 -> "951R710d" [label="[\"decltype\"]", style=solid]
 "951R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  951 -> "951R710" [label="[\"auto\"]", style=solid]
 "951R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  952 [label="State 952\n\l611 requirement: simple-requirement •\l"]
  952 -> "952R611" [style=solid]
 "952R611" [label="R611", fillcolor=3, shape=diamond, style=filled]
  953 [label="State 953\n\l612 requirement: type-requirement •\l"]
  953 -> "953R612" [style=solid]
 "953R612" [label="R612", fillcolor=3, shape=diamond, style=filled]
  954 [label="State 954\n\l570 postfix-expression: \"dynamic_cast\" \"<\" type-id \">\" • \"(\" expression \")\"\l"]
  954 -> 1069 [style=solid label="\"(\""]
  955 [label="State 955\n\l571 postfix-expression: \"static_cast\" \"<\" type-id \">\" • \"(\" expression \")\"\l"]
  955 -> 1070 [style=solid label="\"(\""]
  956 [label="State 956\n\l572 postfix-expression: \"reinterpret_cast\" \"<\" type-id \">\" • \"(\" expression \")\"\l"]
  956 -> 1071 [style=solid label="\"(\""]
  957 [label="State 957\n\l573 postfix-expression: \"const_cast\" \"<\" type-id \">\" • \"(\" expression \")\"\l"]
  957 -> 1072 [style=solid label="\"(\""]
  958 [label="State 958\n\l574 postfix-expression: \"typeid\" \"(\" expression \")\" •\l"]
  958 -> "958R574" [style=solid]
 "958R574" [label="R574", fillcolor=3, shape=diamond, style=filled]
  959 [label="State 959\n\l575 postfix-expression: \"typeid\" \"(\" type-id \")\" •\l"]
  959 -> "959R575" [style=solid]
 "959R575" [label="R575", fillcolor=3, shape=diamond, style=filled]
  960 [label="State 960\n\l743 unary-expression: \"sizeof\" \"...\" \"(\" IDENTIFIER • \")\"\l"]
  960 -> 1073 [style=solid label="\")\""]
  961 [label="State 961\n\l742 unary-expression: \"sizeof\" \"(\" type-id \")\" •\l"]
  961 -> "961R742" [style=solid]
 "961R742" [label="R742", fillcolor=3, shape=diamond, style=filled]
  962 [label="State 962\n\l744 unary-expression: \"alignof\" \"(\" type-id \")\" •\l"]
  962 -> "962R744" [style=solid]
 "962R744" [label="R744", fillcolor=3, shape=diamond, style=filled]
  963 [label="State 963\n\l223 delete-expression: SCOPE-opt \"delete\" \"[\" \"]\" • cast-expression\l"]
  963 -> 238 [style=solid label="IDENTIFIER"]
  963 -> 239 [style=solid label="\"noexcept\""]
  963 -> 240 [style=solid label="\"!\""]
  963 -> 241 [style=solid label="\"::\""]
  963 -> 242 [style=solid label="\"this\""]
  963 -> 8 [style=solid label="\"typename\""]
  963 -> 243 [style=solid label="\"+\""]
  963 -> 244 [style=solid label="\"-\""]
  963 -> 245 [style=solid label="\"(\""]
  963 -> 246 [style=solid label="\"&\""]
  963 -> 247 [style=solid label="\"[\""]
  963 -> 248 [style=solid label="\"co_await\""]
  963 -> 249 [style=solid label="\"operator\""]
  963 -> 21 [style=solid label="\"decltype\""]
  963 -> 250 [style=solid label="\"*\""]
  963 -> 251 [style=solid label="\"requires\""]
  963 -> 252 [style=solid label="\"~\""]
  963 -> 253 [style=solid label="\"++\""]
  963 -> 254 [style=solid label="\"--\""]
  963 -> 255 [style=solid label="\"dynamic_cast\""]
  963 -> 256 [style=solid label="\"static_cast\""]
  963 -> 257 [style=solid label="\"reinterpret_cast\""]
  963 -> 258 [style=solid label="\"const_cast\""]
  963 -> 259 [style=solid label="\"typeid\""]
  963 -> 260 [style=solid label="\"literal\""]
  963 -> 27 [style=solid label="\"char\""]
  963 -> 28 [style=solid label="\"char8_t\""]
  963 -> 29 [style=solid label="\"char16_t\""]
  963 -> 30 [style=solid label="\"char32_t\""]
  963 -> 31 [style=solid label="\"wchar_t\""]
  963 -> 32 [style=solid label="\"bool\""]
  963 -> 33 [style=solid label="\"short\""]
  963 -> 34 [style=solid label="\"int\""]
  963 -> 35 [style=solid label="\"long\""]
  963 -> 36 [style=solid label="\"signed\""]
  963 -> 37 [style=solid label="\"unsigned\""]
  963 -> 38 [style=solid label="\"float\""]
  963 -> 39 [style=solid label="\"double\""]
  963 -> 40 [style=solid label="\"void\""]
  963 -> 118 [style=solid label="STRING_LITERAL"]
  963 -> 262 [style=solid label="\"sizeof\""]
  963 -> 263 [style=solid label="\"alignof\""]
  963 -> 265 [style=dashed label="SCOPE-opt"]
  963 -> 269 [style=dashed label="await-expression"]
  963 -> 1074 [style=dashed label="cast-expression"]
  963 -> 55 [style=dashed label="class-name"]
  963 -> 273 [style=dashed label="conversion-function-id"]
  963 -> 63 [style=dashed label="decltype-specifier"]
  963 -> 274 [style=dashed label="delete-expression"]
  963 -> 71 [style=dashed label="enum-name"]
  963 -> 278 [style=dashed label="fold-expression"]
  963 -> 279 [style=dashed label="id-expression"]
  963 -> 281 [style=dashed label="lambda-expression"]
  963 -> 282 [style=dashed label="lambda-introducer"]
  963 -> 283 [style=dashed label="literal-operator-id"]
  963 -> 85 [style=dashed label="namespace-alias"]
  963 -> 88 [style=dashed label="namespace-name"]
  963 -> 287 [style=dashed label="nested-name-specifier"]
  963 -> 90 [style=dashed label="nested-name-specifier-opt"]
  963 -> 288 [style=dashed label="new-expression"]
  963 -> 289 [style=dashed label="noexcept-expression"]
  963 -> 290 [style=dashed label="operator-function-id"]
  963 -> 94 [style=dashed label="placeholder-type-specifier"]
  963 -> 292 [style=dashed label="postfix-expression"]
  963 -> 293 [style=dashed label="primary-expression"]
  963 -> 294 [style=dashed label="qualified-id"]
  963 -> 296 [style=dashed label="requires-expression"]
  963 -> 298 [style=dashed label="simple-template-id"]
  963 -> 299 [style=dashed label="simple-type-specifier"]
  963 -> 300 [style=dashed label="string-literal"]
  963 -> 301 [style=dashed label="template-id"]
  963 -> 102 [style=dashed label="template-name"]
  963 -> 104 [style=dashed label="type-constraint"]
  963 -> 105 [style=dashed label="type-constraint-opt"]
  963 -> 106 [style=dashed label="type-name"]
  963 -> 108 [style=dashed label="typedef-name"]
  963 -> 303 [style=dashed label="typename-specifier"]
  963 -> 304 [style=dashed label="unary-expression"]
  963 -> 305 [style=dashed label="unary-operator"]
  963 -> 306 [style=dashed label="unqualified-id"]
  963 -> "963R19" [style=solid]
 "963R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  963 -> "963R458d" [label="[IDENTIFIER]", style=solid]
 "963R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  963 -> "963R710d" [label="[\"decltype\"]", style=solid]
 "963R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  963 -> "963R710" [label="[\"auto\"]", style=solid]
 "963R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  964 [label="State 964\n\l472 new-placement: \"(\" expression-list • \")\"\l"]
  964 -> 1075 [style=solid label="\")\""]
  965 [label="State 965\n\l467 new-expression: SCOPE-opt \"new\" new-placement-opt \"(\" • type-id \")\" new-initializer-opt\l"]
  965 -> 4 [style=solid label="IDENTIFIER"]
  965 -> 6 [style=solid label="\"::\""]
  965 -> 8 [style=solid label="\"typename\""]
  965 -> 12 [style=solid label="\"class\""]
  965 -> 13 [style=solid label="\"struct\""]
  965 -> 14 [style=solid label="\"union\""]
  965 -> 15 [style=solid label="\"const\""]
  965 -> 16 [style=solid label="\"volatile\""]
  965 -> 21 [style=solid label="\"decltype\""]
  965 -> 125 [style=solid label="\"enum\""]
  965 -> 27 [style=solid label="\"char\""]
  965 -> 28 [style=solid label="\"char8_t\""]
  965 -> 29 [style=solid label="\"char16_t\""]
  965 -> 30 [style=solid label="\"char32_t\""]
  965 -> 31 [style=solid label="\"wchar_t\""]
  965 -> 32 [style=solid label="\"bool\""]
  965 -> 33 [style=solid label="\"short\""]
  965 -> 34 [style=solid label="\"int\""]
  965 -> 35 [style=solid label="\"long\""]
  965 -> 36 [style=solid label="\"signed\""]
  965 -> 37 [style=solid label="\"unsigned\""]
  965 -> 38 [style=solid label="\"float\""]
  965 -> 39 [style=solid label="\"double\""]
  965 -> 40 [style=solid label="\"void\""]
  965 -> 406 [style=dashed label="class-key"]
  965 -> 55 [style=dashed label="class-name"]
  965 -> 57 [style=dashed label="cv-qualifier"]
  965 -> 63 [style=dashed label="decltype-specifier"]
  965 -> 66 [style=dashed label="elaborated-enum-specifier"]
  965 -> 67 [style=dashed label="elaborated-type-specifier"]
  965 -> 71 [style=dashed label="enum-name"]
  965 -> 85 [style=dashed label="namespace-alias"]
  965 -> 88 [style=dashed label="namespace-name"]
  965 -> 89 [style=dashed label="nested-name-specifier"]
  965 -> 90 [style=dashed label="nested-name-specifier-opt"]
  965 -> 94 [style=dashed label="placeholder-type-specifier"]
  965 -> 96 [style=dashed label="simple-template-id"]
  965 -> 97 [style=dashed label="simple-type-specifier"]
  965 -> 102 [style=dashed label="template-name"]
  965 -> 104 [style=dashed label="type-constraint"]
  965 -> 105 [style=dashed label="type-constraint-opt"]
  965 -> 1076 [style=dashed label="type-id"]
  965 -> 106 [style=dashed label="type-name"]
  965 -> 414 [style=dashed label="type-specifier"]
  965 -> 415 [style=dashed label="type-specifier-seq"]
  965 -> 108 [style=dashed label="typedef-name"]
  965 -> 109 [style=dashed label="typename-specifier"]
  965 -> "965R458d" [label="[IDENTIFIER]", style=solid]
 "965R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  965 -> "965R710d" [label="[\"decltype\"]", style=solid]
 "965R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  965 -> "965R710" [label="[]", style=solid]
 "965R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  966 [label="State 966\n\l466 new-expression: SCOPE-opt \"new\" new-placement-opt new-type-id • new-initializer-opt\l"]
  966 -> 1077 [style=solid label="\"(\""]
  966 -> 380 [style=solid label="\"{\""]
  966 -> 1078 [style=dashed label="braced-init-list"]
  966 -> 1079 [style=dashed label="new-initializer"]
  966 -> 1080 [style=dashed label="new-initializer-opt"]
  966 -> "966R470d" [label="[\"{\"]", style=solid]
 "966R470d" [label="R470", fillcolor=5, shape=diamond, style=filled]
  966 -> "966R470" [style=solid]
 "966R470" [label="R470", fillcolor=3, shape=diamond, style=filled]
  967 [label="State 967\n\l475 new-type-id: type-specifier-seq • new-declarator-opt\l"]
  967 -> 4 [style=solid label="IDENTIFIER"]
  967 -> 6 [style=solid label="\"::\""]
  967 -> 160 [style=solid label="\"&\""]
  967 -> 1081 [style=solid label="\"[\""]
  967 -> 163 [style=solid label="\"&&\""]
  967 -> 21 [style=solid label="\"decltype\""]
  967 -> 164 [style=solid label="\"*\""]
  967 -> 55 [style=dashed label="class-name"]
  967 -> 121 [style=dashed label="decltype-specifier"]
  967 -> 71 [style=dashed label="enum-name"]
  967 -> 85 [style=dashed label="namespace-alias"]
  967 -> 88 [style=dashed label="namespace-name"]
  967 -> 187 [style=dashed label="nested-name-specifier"]
  967 -> 1082 [style=dashed label="new-declarator"]
  967 -> 1083 [style=dashed label="new-declarator-opt"]
  967 -> 1084 [style=dashed label="noptr-new-declarator"]
  967 -> 1085 [style=dashed label="ptr-operator"]
  967 -> 96 [style=dashed label="simple-template-id"]
  967 -> 102 [style=dashed label="template-name"]
  967 -> 106 [style=dashed label="type-name"]
  967 -> 108 [style=dashed label="typedef-name"]
  967 -> "967R464d" [label="[\"&\", \"&&\", \"*\"]", style=solid]
 "967R464d" [label="R464", fillcolor=5, shape=diamond, style=filled]
  967 -> "967R464" [style=solid]
 "967R464" [label="R464", fillcolor=3, shape=diamond, style=filled]
  968 [label="State 968\n\l385 lambda-declarator: \"(\" parameter-declaration-clause \")\" • lambda-specifiers requires-clause-opt\l"]
  968 -> 1 [style=solid label="\"constexpr\""]
  968 -> 150 [style=solid label="\"extern\""]
  968 -> 4 [style=solid label="IDENTIFIER"]
  968 -> 151 [style=solid label="\"inline\""]
  968 -> 6 [style=solid label="\"::\""]
  968 -> 8 [style=solid label="\"typename\""]
  968 -> 9 [style=solid label="\"virtual\""]
  968 -> 12 [style=solid label="\"class\""]
  968 -> 13 [style=solid label="\"struct\""]
  968 -> 14 [style=solid label="\"union\""]
  968 -> 15 [style=solid label="\"const\""]
  968 -> 16 [style=solid label="\"volatile\""]
  968 -> 17 [style=solid label="\"friend\""]
  968 -> 18 [style=solid label="\"typedef\""]
  968 -> 19 [style=solid label="\"consteval\""]
  968 -> 20 [style=solid label="\"constinit\""]
  968 -> 21 [style=solid label="\"decltype\""]
  968 -> 22 [style=solid label="\"enum\""]
  968 -> 23 [style=solid label="\"explicit\""]
  968 -> 27 [style=solid label="\"char\""]
  968 -> 28 [style=solid label="\"char8_t\""]
  968 -> 29 [style=solid label="\"char16_t\""]
  968 -> 30 [style=solid label="\"char32_t\""]
  968 -> 31 [style=solid label="\"wchar_t\""]
  968 -> 32 [style=solid label="\"bool\""]
  968 -> 33 [style=solid label="\"short\""]
  968 -> 34 [style=solid label="\"int\""]
  968 -> 35 [style=solid label="\"long\""]
  968 -> 36 [style=solid label="\"signed\""]
  968 -> 37 [style=solid label="\"unsigned\""]
  968 -> 38 [style=solid label="\"float\""]
  968 -> 39 [style=solid label="\"double\""]
  968 -> 40 [style=solid label="\"void\""]
  968 -> 42 [style=solid label="\"static\""]
  968 -> 43 [style=solid label="\"thread_local\""]
  968 -> 44 [style=solid label="\"mutable\""]
  968 -> 53 [style=dashed label="class-head"]
  968 -> 54 [style=dashed label="class-key"]
  968 -> 55 [style=dashed label="class-name"]
  968 -> 56 [style=dashed label="class-specifier"]
  968 -> 57 [style=dashed label="cv-qualifier"]
  968 -> 58 [style=dashed label="decl-specifier"]
  968 -> 539 [style=dashed label="decl-specifier-seq"]
  968 -> 540 [style=dashed label="decl-specifier-seq-opt"]
  968 -> 63 [style=dashed label="decltype-specifier"]
  968 -> 65 [style=dashed label="defining-type-specifier"]
  968 -> 66 [style=dashed label="elaborated-enum-specifier"]
  968 -> 67 [style=dashed label="elaborated-type-specifier"]
  968 -> 69 [style=dashed label="enum-head"]
  968 -> 154 [style=dashed label="enum-key"]
  968 -> 71 [style=dashed label="enum-name"]
  968 -> 72 [style=dashed label="enum-specifier"]
  968 -> 155 [style=dashed label="explicit-specifier"]
  968 -> 79 [style=dashed label="function-specifier"]
  968 -> 1086 [style=dashed label="lambda-specifiers"]
  968 -> 85 [style=dashed label="namespace-alias"]
  968 -> 88 [style=dashed label="namespace-name"]
  968 -> 89 [style=dashed label="nested-name-specifier"]
  968 -> 90 [style=dashed label="nested-name-specifier-opt"]
  968 -> 94 [style=dashed label="placeholder-type-specifier"]
  968 -> 96 [style=dashed label="simple-template-id"]
  968 -> 97 [style=dashed label="simple-type-specifier"]
  968 -> 99 [style=dashed label="storage-class-specifier"]
  968 -> 102 [style=dashed label="template-name"]
  968 -> 104 [style=dashed label="type-constraint"]
  968 -> 105 [style=dashed label="type-constraint-opt"]
  968 -> 106 [style=dashed label="type-name"]
  968 -> 107 [style=dashed label="type-specifier"]
  968 -> 108 [style=dashed label="typedef-name"]
  968 -> 109 [style=dashed label="typename-specifier"]
  968 -> "968R191" [style=solid]
 "968R191" [label="R191", fillcolor=3, shape=diamond, style=filled]
  968 -> "968R458d" [label="[IDENTIFIER]", style=solid]
 "968R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  968 -> "968R710d" [label="[\"decltype\"]", style=solid]
 "968R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  968 -> "968R710" [label="[\"auto\"]", style=solid]
 "968R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  969 [label="State 969\n\l387 lambda-expression: lambda-introducer \"<\" template-parameter-list \">\" • requires-clause-opt lambda-declarator compound-statement\l"]
  969 -> 381 [style=solid label="\"requires\""]
  969 -> 698 [style=dashed label="requires-clause"]
  969 -> 1087 [style=dashed label="requires-clause-opt"]
  969 -> "969R622" [style=solid]
 "969R622" [label="R622", fillcolor=3, shape=diamond, style=filled]
  970 [label="State 970\n\l478 noexcept-specifier: \"noexcept\" \"(\" • constant-expression \")\"\l"]
  970 -> 238 [style=solid label="IDENTIFIER"]
  970 -> 239 [style=solid label="\"noexcept\""]
  970 -> 240 [style=solid label="\"!\""]
  970 -> 241 [style=solid label="\"::\""]
  970 -> 242 [style=solid label="\"this\""]
  970 -> 8 [style=solid label="\"typename\""]
  970 -> 243 [style=solid label="\"+\""]
  970 -> 244 [style=solid label="\"-\""]
  970 -> 245 [style=solid label="\"(\""]
  970 -> 246 [style=solid label="\"&\""]
  970 -> 247 [style=solid label="\"[\""]
  970 -> 248 [style=solid label="\"co_await\""]
  970 -> 249 [style=solid label="\"operator\""]
  970 -> 21 [style=solid label="\"decltype\""]
  970 -> 250 [style=solid label="\"*\""]
  970 -> 251 [style=solid label="\"requires\""]
  970 -> 252 [style=solid label="\"~\""]
  970 -> 253 [style=solid label="\"++\""]
  970 -> 254 [style=solid label="\"--\""]
  970 -> 255 [style=solid label="\"dynamic_cast\""]
  970 -> 256 [style=solid label="\"static_cast\""]
  970 -> 257 [style=solid label="\"reinterpret_cast\""]
  970 -> 258 [style=solid label="\"const_cast\""]
  970 -> 259 [style=solid label="\"typeid\""]
  970 -> 260 [style=solid label="\"literal\""]
  970 -> 27 [style=solid label="\"char\""]
  970 -> 28 [style=solid label="\"char8_t\""]
  970 -> 29 [style=solid label="\"char16_t\""]
  970 -> 30 [style=solid label="\"char32_t\""]
  970 -> 31 [style=solid label="\"wchar_t\""]
  970 -> 32 [style=solid label="\"bool\""]
  970 -> 33 [style=solid label="\"short\""]
  970 -> 34 [style=solid label="\"int\""]
  970 -> 35 [style=solid label="\"long\""]
  970 -> 36 [style=solid label="\"signed\""]
  970 -> 37 [style=solid label="\"unsigned\""]
  970 -> 38 [style=solid label="\"float\""]
  970 -> 39 [style=solid label="\"double\""]
  970 -> 40 [style=solid label="\"void\""]
  970 -> 118 [style=solid label="STRING_LITERAL"]
  970 -> 262 [style=solid label="\"sizeof\""]
  970 -> 263 [style=solid label="\"alignof\""]
  970 -> 265 [style=dashed label="SCOPE-opt"]
  970 -> 266 [style=dashed label="additive-expression"]
  970 -> 267 [style=dashed label="and-expression"]
  970 -> 269 [style=dashed label="await-expression"]
  970 -> 270 [style=dashed label="cast-expression"]
  970 -> 55 [style=dashed label="class-name"]
  970 -> 271 [style=dashed label="compare-expression"]
  970 -> 309 [style=dashed label="conditional-expression"]
  970 -> 1088 [style=dashed label="constant-expression"]
  970 -> 273 [style=dashed label="conversion-function-id"]
  970 -> 63 [style=dashed label="decltype-specifier"]
  970 -> 274 [style=dashed label="delete-expression"]
  970 -> 71 [style=dashed label="enum-name"]
  970 -> 275 [style=dashed label="equality-expression"]
  970 -> 276 [style=dashed label="exclusive-or-expression"]
  970 -> 278 [style=dashed label="fold-expression"]
  970 -> 279 [style=dashed label="id-expression"]
  970 -> 280 [style=dashed label="inclusive-or-expression"]
  970 -> 281 [style=dashed label="lambda-expression"]
  970 -> 282 [style=dashed label="lambda-introducer"]
  970 -> 283 [style=dashed label="literal-operator-id"]
  970 -> 284 [style=dashed label="logical-and-expression"]
  970 -> 311 [style=dashed label="logical-or-expression"]
  970 -> 286 [style=dashed label="multiplicative-expression"]
  970 -> 85 [style=dashed label="namespace-alias"]
  970 -> 88 [style=dashed label="namespace-name"]
  970 -> 287 [style=dashed label="nested-name-specifier"]
  970 -> 90 [style=dashed label="nested-name-specifier-opt"]
  970 -> 288 [style=dashed label="new-expression"]
  970 -> 289 [style=dashed label="noexcept-expression"]
  970 -> 290 [style=dashed label="operator-function-id"]
  970 -> 94 [style=dashed label="placeholder-type-specifier"]
  970 -> 291 [style=dashed label="pm-expression"]
  970 -> 292 [style=dashed label="postfix-expression"]
  970 -> 293 [style=dashed label="primary-expression"]
  970 -> 294 [style=dashed label="qualified-id"]
  970 -> 295 [style=dashed label="relational-expression"]
  970 -> 296 [style=dashed label="requires-expression"]
  970 -> 297 [style=dashed label="shift-expression"]
  970 -> 298 [style=dashed label="simple-template-id"]
  970 -> 299 [style=dashed label="simple-type-specifier"]
  970 -> 300 [style=dashed label="string-literal"]
  970 -> 301 [style=dashed label="template-id"]
  970 -> 102 [style=dashed label="template-name"]
  970 -> 104 [style=dashed label="type-constraint"]
  970 -> 105 [style=dashed label="type-constraint-opt"]
  970 -> 106 [style=dashed label="type-name"]
  970 -> 108 [style=dashed label="typedef-name"]
  970 -> 303 [style=dashed label="typename-specifier"]
  970 -> 304 [style=dashed label="unary-expression"]
  970 -> 305 [style=dashed label="unary-operator"]
  970 -> 306 [style=dashed label="unqualified-id"]
  970 -> "970R19" [style=solid]
 "970R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  970 -> "970R458d" [label="[IDENTIFIER]", style=solid]
 "970R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  970 -> "970R710d" [label="[\"decltype\"]", style=solid]
 "970R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  970 -> "970R710" [label="[\"auto\"]", style=solid]
 "970R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  971 [label="State 971\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l389 lambda-specifiers: decl-specifier-seq-opt noexcept-specifier-opt attribute-specifier-seq-opt • trailing-return-type-opt\l"]
  971 -> 158 [style=solid label="\"alignas\""]
  971 -> 162 [style=solid label="\"[\""]
  971 -> 625 [style=solid label="\"->\""]
  971 -> 166 [style=dashed label="alignment-specifier"]
  971 -> 167 [style=dashed label="attribute-specifier"]
  971 -> 1089 [style=dashed label="trailing-return-type"]
  971 -> 1090 [style=dashed label="trailing-return-type-opt"]
  971 -> "971R703" [style=solid]
 "971R703" [label="R703", fillcolor=3, shape=diamond, style=filled]
  972 [label="State 972\n\l445 namespace-alias-definition: \"namespace\" • IDENTIFIER \"=\" qualified-namespace-specifier \";\"\l"]
  972 -> 1091 [style=solid label="IDENTIFIER"]
  973 [label="State 973\n\l 84 attribute-specifier-seq-opt: attribute-specifier-seq •\l641 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list \";\"\l"]
  973 -> 1 [style=solid label="\"constexpr\""]
  973 -> 150 [style=solid label="\"extern\""]
  973 -> 4 [style=solid label="IDENTIFIER"]
  973 -> 151 [style=solid label="\"inline\""]
  973 -> 6 [style=solid label="\"::\""]
  973 -> 8 [style=solid label="\"typename\""]
  973 -> 9 [style=solid label="\"virtual\""]
  973 -> 12 [style=solid label="\"class\""]
  973 -> 13 [style=solid label="\"struct\""]
  973 -> 14 [style=solid label="\"union\""]
  973 -> 15 [style=solid label="\"const\""]
  973 -> 16 [style=solid label="\"volatile\""]
  973 -> 17 [style=solid label="\"friend\""]
  973 -> 18 [style=solid label="\"typedef\""]
  973 -> 19 [style=solid label="\"consteval\""]
  973 -> 20 [style=solid label="\"constinit\""]
  973 -> 21 [style=solid label="\"decltype\""]
  973 -> 22 [style=solid label="\"enum\""]
  973 -> 23 [style=solid label="\"explicit\""]
  973 -> 27 [style=solid label="\"char\""]
  973 -> 28 [style=solid label="\"char8_t\""]
  973 -> 29 [style=solid label="\"char16_t\""]
  973 -> 30 [style=solid label="\"char32_t\""]
  973 -> 31 [style=solid label="\"wchar_t\""]
  973 -> 32 [style=solid label="\"bool\""]
  973 -> 33 [style=solid label="\"short\""]
  973 -> 34 [style=solid label="\"int\""]
  973 -> 35 [style=solid label="\"long\""]
  973 -> 36 [style=solid label="\"signed\""]
  973 -> 37 [style=solid label="\"unsigned\""]
  973 -> 38 [style=solid label="\"float\""]
  973 -> 39 [style=solid label="\"double\""]
  973 -> 40 [style=solid label="\"void\""]
  973 -> 42 [style=solid label="\"static\""]
  973 -> 43 [style=solid label="\"thread_local\""]
  973 -> 44 [style=solid label="\"mutable\""]
  973 -> 53 [style=dashed label="class-head"]
  973 -> 54 [style=dashed label="class-key"]
  973 -> 55 [style=dashed label="class-name"]
  973 -> 56 [style=dashed label="class-specifier"]
  973 -> 57 [style=dashed label="cv-qualifier"]
  973 -> 58 [style=dashed label="decl-specifier"]
  973 -> 153 [style=dashed label="decl-specifier-seq"]
  973 -> 63 [style=dashed label="decltype-specifier"]
  973 -> 65 [style=dashed label="defining-type-specifier"]
  973 -> 66 [style=dashed label="elaborated-enum-specifier"]
  973 -> 67 [style=dashed label="elaborated-type-specifier"]
  973 -> 69 [style=dashed label="enum-head"]
  973 -> 154 [style=dashed label="enum-key"]
  973 -> 71 [style=dashed label="enum-name"]
  973 -> 72 [style=dashed label="enum-specifier"]
  973 -> 155 [style=dashed label="explicit-specifier"]
  973 -> 79 [style=dashed label="function-specifier"]
  973 -> 85 [style=dashed label="namespace-alias"]
  973 -> 88 [style=dashed label="namespace-name"]
  973 -> 89 [style=dashed label="nested-name-specifier"]
  973 -> 90 [style=dashed label="nested-name-specifier-opt"]
  973 -> 94 [style=dashed label="placeholder-type-specifier"]
  973 -> 96 [style=dashed label="simple-template-id"]
  973 -> 97 [style=dashed label="simple-type-specifier"]
  973 -> 99 [style=dashed label="storage-class-specifier"]
  973 -> 102 [style=dashed label="template-name"]
  973 -> 104 [style=dashed label="type-constraint"]
  973 -> 105 [style=dashed label="type-constraint-opt"]
  973 -> 106 [style=dashed label="type-name"]
  973 -> 107 [style=dashed label="type-specifier"]
  973 -> 108 [style=dashed label="typedef-name"]
  973 -> 109 [style=dashed label="typename-specifier"]
  973 -> "973R84d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "973R84d" [label="R84", fillcolor=5, shape=diamond, style=filled]
  973 -> "973R84" [style=solid]
 "973R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  973 -> "973R458d" [label="[IDENTIFIER]", style=solid]
 "973R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  973 -> "973R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "973R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  974 [label="State 974\n\l 49 asm-declaration: attribute-specifier-seq-opt • \"asm\" \"(\" string-literal \")\" \";\"\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l376 labeled-statement: attribute-specifier-seq-opt • IDENTIFIER \":\" statement\l377                  | attribute-specifier-seq-opt • \"case\" constant-expression \":\" statement\l378                  | attribute-specifier-seq-opt • \"default\" \":\" statement\l642 simple-declaration: attribute-specifier-seq-opt • decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" initializer \";\"\l665 statement: attribute-specifier-seq-opt • expression-statement\l666          | attribute-specifier-seq-opt • compound-statement\l667          | attribute-specifier-seq-opt • selection-statement\l668          | attribute-specifier-seq-opt • iteration-statement\l669          | attribute-specifier-seq-opt • jump-statement\l671          | attribute-specifier-seq-opt • try-block\l767 using-directive: attribute-specifier-seq-opt • \"using\" \"namespace\" nested-name-specifier-opt namespace-name \";\"\l"]
  974 -> 1 [style=solid label="\"constexpr\""]
  974 -> 150 [style=solid label="\"extern\""]
  974 -> 1092 [style=solid label="IDENTIFIER"]
  974 -> 151 [style=solid label="\"inline\""]
  974 -> 239 [style=solid label="\"noexcept\""]
  974 -> 240 [style=solid label="\"!\""]
  974 -> 241 [style=solid label="\"::\""]
  974 -> 242 [style=solid label="\"this\""]
  974 -> 8 [style=solid label="\"typename\""]
  974 -> 9 [style=solid label="\"virtual\""]
  974 -> 243 [style=solid label="\"+\""]
  974 -> 244 [style=solid label="\"-\""]
  974 -> 157 [style=solid label="\"using\""]
  974 -> 158 [style=solid label="\"alignas\""]
  974 -> 245 [style=solid label="\"(\""]
  974 -> 246 [style=solid label="\"&\""]
  974 -> 161 [style=solid label="\"asm\""]
  974 -> 1093 [style=solid label="\"[\""]
  974 -> 248 [style=solid label="\"co_await\""]
  974 -> 794 [style=solid label="\"{\""]
  974 -> 12 [style=solid label="\"class\""]
  974 -> 13 [style=solid label="\"struct\""]
  974 -> 14 [style=solid label="\"union\""]
  974 -> 249 [style=solid label="\"operator\""]
  974 -> 1094 [style=solid label="\"co_return\""]
  974 -> 15 [style=solid label="\"const\""]
  974 -> 16 [style=solid label="\"volatile\""]
  974 -> 17 [style=solid label="\"friend\""]
  974 -> 18 [style=solid label="\"typedef\""]
  974 -> 19 [style=solid label="\"consteval\""]
  974 -> 20 [style=solid label="\"constinit\""]
  974 -> 21 [style=solid label="\"decltype\""]
  974 -> 22 [style=solid label="\"enum\""]
  974 -> 23 [style=solid label="\"explicit\""]
  974 -> 250 [style=solid label="\"*\""]
  974 -> 1095 [style=solid label="\"default\""]
  974 -> 1096 [style=solid label="\"try\""]
  974 -> 1097 [style=solid label="\"while\""]
  974 -> 1098 [style=solid label="\"do\""]
  974 -> 1099 [style=solid label="\"for\""]
  974 -> 1100 [style=solid label="\"break\""]
  974 -> 1101 [style=solid label="\"continue\""]
  974 -> 1102 [style=solid label="\"return\""]
  974 -> 1103 [style=solid label="\"goto\""]
  974 -> 1104 [style=solid label="\"case\""]
  974 -> 251 [style=solid label="\"requires\""]
  974 -> 252 [style=solid label="\"~\""]
  974 -> 253 [style=solid label="\"++\""]
  974 -> 254 [style=solid label="\"--\""]
  974 -> 255 [style=solid label="\"dynamic_cast\""]
  974 -> 256 [style=solid label="\"static_cast\""]
  974 -> 257 [style=solid label="\"reinterpret_cast\""]
  974 -> 258 [style=solid label="\"const_cast\""]
  974 -> 259 [style=solid label="\"typeid\""]
  974 -> 260 [style=solid label="\"literal\""]
  974 -> 1105 [style=solid label="\"if\""]
  974 -> 1106 [style=solid label="\"switch\""]
  974 -> 27 [style=solid label="\"char\""]
  974 -> 28 [style=solid label="\"char8_t\""]
  974 -> 29 [style=solid label="\"char16_t\""]
  974 -> 30 [style=solid label="\"char32_t\""]
  974 -> 31 [style=solid label="\"wchar_t\""]
  974 -> 32 [style=solid label="\"bool\""]
  974 -> 33 [style=solid label="\"short\""]
  974 -> 34 [style=solid label="\"int\""]
  974 -> 35 [style=solid label="\"long\""]
  974 -> 36 [style=solid label="\"signed\""]
  974 -> 37 [style=solid label="\"unsigned\""]
  974 -> 38 [style=solid label="\"float\""]
  974 -> 39 [style=solid label="\"double\""]
  974 -> 40 [style=solid label="\"void\""]
  974 -> 42 [style=solid label="\"static\""]
  974 -> 43 [style=solid label="\"thread_local\""]
  974 -> 44 [style=solid label="\"mutable\""]
  974 -> 118 [style=solid label="STRING_LITERAL"]
  974 -> 261 [style=solid label="\"throw\""]
  974 -> 262 [style=solid label="\"sizeof\""]
  974 -> 263 [style=solid label="\"alignof\""]
  974 -> 264 [style=solid label="\"co_yield\""]
  974 -> 265 [style=dashed label="SCOPE-opt"]
  974 -> 266 [style=dashed label="additive-expression"]
  974 -> 166 [style=dashed label="alignment-specifier"]
  974 -> 267 [style=dashed label="and-expression"]
  974 -> 268 [style=dashed label="assignment-expression"]
  974 -> 167 [style=dashed label="attribute-specifier"]
  974 -> 269 [style=dashed label="await-expression"]
  974 -> 270 [style=dashed label="cast-expression"]
  974 -> 53 [style=dashed label="class-head"]
  974 -> 54 [style=dashed label="class-key"]
  974 -> 55 [style=dashed label="class-name"]
  974 -> 56 [style=dashed label="class-specifier"]
  974 -> 271 [style=dashed label="compare-expression"]
  974 -> 1107 [style=dashed label="compound-statement"]
  974 -> 272 [style=dashed label="conditional-expression"]
  974 -> 273 [style=dashed label="conversion-function-id"]
  974 -> 1108 [style=dashed label="coroutine-return-statement"]
  974 -> 57 [style=dashed label="cv-qualifier"]
  974 -> 58 [style=dashed label="decl-specifier"]
  974 -> 1109 [style=dashed label="decl-specifier-seq"]
  974 -> 63 [style=dashed label="decltype-specifier"]
  974 -> 65 [style=dashed label="defining-type-specifier"]
  974 -> 274 [style=dashed label="delete-expression"]
  974 -> 66 [style=dashed label="elaborated-enum-specifier"]
  974 -> 67 [style=dashed label="elaborated-type-specifier"]
  974 -> 69 [style=dashed label="enum-head"]
  974 -> 154 [style=dashed label="enum-key"]
  974 -> 71 [style=dashed label="enum-name"]
  974 -> 72 [style=dashed label="enum-specifier"]
  974 -> 275 [style=dashed label="equality-expression"]
  974 -> 276 [style=dashed label="exclusive-or-expression"]
  974 -> 155 [style=dashed label="explicit-specifier"]
  974 -> 1110 [style=dashed label="expression"]
  974 -> 1111 [style=dashed label="expression-opt"]
  974 -> 1112 [style=dashed label="expression-statement"]
  974 -> 278 [style=dashed label="fold-expression"]
  974 -> 79 [style=dashed label="function-specifier"]
  974 -> 279 [style=dashed label="id-expression"]
  974 -> 280 [style=dashed label="inclusive-or-expression"]
  974 -> 1113 [style=dashed label="iteration-statement"]
  974 -> 1114 [style=dashed label="jump-statement"]
  974 -> 281 [style=dashed label="lambda-expression"]
  974 -> 282 [style=dashed label="lambda-introducer"]
  974 -> 283 [style=dashed label="literal-operator-id"]
  974 -> 284 [style=dashed label="logical-and-expression"]
  974 -> 285 [style=dashed label="logical-or-expression"]
  974 -> 286 [style=dashed label="multiplicative-expression"]
  974 -> 85 [style=dashed label="namespace-alias"]
  974 -> 88 [style=dashed label="namespace-name"]
  974 -> 287 [style=dashed label="nested-name-specifier"]
  974 -> 90 [style=dashed label="nested-name-specifier-opt"]
  974 -> 288 [style=dashed label="new-expression"]
  974 -> 289 [style=dashed label="noexcept-expression"]
  974 -> 290 [style=dashed label="operator-function-id"]
  974 -> 94 [style=dashed label="placeholder-type-specifier"]
  974 -> 291 [style=dashed label="pm-expression"]
  974 -> 292 [style=dashed label="postfix-expression"]
  974 -> 293 [style=dashed label="primary-expression"]
  974 -> 294 [style=dashed label="qualified-id"]
  974 -> 295 [style=dashed label="relational-expression"]
  974 -> 296 [style=dashed label="requires-expression"]
  974 -> 1115 [style=dashed label="selection-statement"]
  974 -> 297 [style=dashed label="shift-expression"]
  974 -> 298 [style=dashed label="simple-template-id"]
  974 -> 409 [style=dashed label="simple-type-specifier"]
  974 -> 99 [style=dashed label="storage-class-specifier"]
  974 -> 300 [style=dashed label="string-literal"]
  974 -> 301 [style=dashed label="template-id"]
  974 -> 102 [style=dashed label="template-name"]
  974 -> 302 [style=dashed label="throw-expression"]
  974 -> 1116 [style=dashed label="try-block"]
  974 -> 104 [style=dashed label="type-constraint"]
  974 -> 105 [style=dashed label="type-constraint-opt"]
  974 -> 106 [style=dashed label="type-name"]
  974 -> 107 [style=dashed label="type-specifier"]
  974 -> 108 [style=dashed label="typedef-name"]
  974 -> 416 [style=dashed label="typename-specifier"]
  974 -> 304 [style=dashed label="unary-expression"]
  974 -> 305 [style=dashed label="unary-operator"]
  974 -> 306 [style=dashed label="unqualified-id"]
  974 -> 307 [style=dashed label="yield-expression"]
  974 -> "974R19" [style=solid]
 "974R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  974 -> "974R282" [label="[\";\"]", style=solid]
 "974R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  974 -> "974R458d" [label="[IDENTIFIER]", style=solid]
 "974R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  974 -> "974R710d" [label="[\"decltype\"]", style=solid]
 "974R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  974 -> "974R710" [label="[\"auto\"]", style=solid]
 "974R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  975 [label="State 975\n\l210 declaration-statement: block-declaration •\l"]
  975 -> "975R210" [style=solid]
 "975R210" [label="R210", fillcolor=3, shape=diamond, style=filled]
  976 [label="State 976\n\l670 statement: declaration-statement •\l"]
  976 -> "976R670" [style=solid]
 "976R670" [label="R670", fillcolor=3, shape=diamond, style=filled]
  977 [label="State 977\n\l664 statement: labeled-statement •\l"]
  977 -> "977R664" [style=solid]
 "977R664" [label="R664", fillcolor=3, shape=diamond, style=filled]
  978 [label="State 978\n\l672 statement-seq: statement •\l"]
  978 -> "978R672" [style=solid]
 "978R672" [label="R672", fillcolor=3, shape=diamond, style=filled]
  979 [label="State 979\n\l673 statement-seq: statement-seq • statement\l675 statement-seq-opt: statement-seq •\l"]
  979 -> 1 [style=solid label="\"constexpr\""]
  979 -> 150 [style=solid label="\"extern\""]
  979 -> 4 [style=solid label="IDENTIFIER"]
  979 -> 151 [style=solid label="\"inline\""]
  979 -> 6 [style=solid label="\"::\""]
  979 -> 8 [style=solid label="\"typename\""]
  979 -> 9 [style=solid label="\"virtual\""]
  979 -> 10 [style=solid label="\"using\""]
  979 -> 12 [style=solid label="\"class\""]
  979 -> 13 [style=solid label="\"struct\""]
  979 -> 14 [style=solid label="\"union\""]
  979 -> 15 [style=solid label="\"const\""]
  979 -> 16 [style=solid label="\"volatile\""]
  979 -> 17 [style=solid label="\"friend\""]
  979 -> 18 [style=solid label="\"typedef\""]
  979 -> 19 [style=solid label="\"consteval\""]
  979 -> 20 [style=solid label="\"constinit\""]
  979 -> 21 [style=solid label="\"decltype\""]
  979 -> 22 [style=solid label="\"enum\""]
  979 -> 23 [style=solid label="\"explicit\""]
  979 -> 972 [style=solid label="\"namespace\""]
  979 -> 27 [style=solid label="\"char\""]
  979 -> 28 [style=solid label="\"char8_t\""]
  979 -> 29 [style=solid label="\"char16_t\""]
  979 -> 30 [style=solid label="\"char32_t\""]
  979 -> 31 [style=solid label="\"wchar_t\""]
  979 -> 32 [style=solid label="\"bool\""]
  979 -> 33 [style=solid label="\"short\""]
  979 -> 34 [style=solid label="\"int\""]
  979 -> 35 [style=solid label="\"long\""]
  979 -> 36 [style=solid label="\"signed\""]
  979 -> 37 [style=solid label="\"unsigned\""]
  979 -> 38 [style=solid label="\"float\""]
  979 -> 39 [style=solid label="\"double\""]
  979 -> 40 [style=solid label="\"void\""]
  979 -> 41 [style=solid label="\"static_assert\""]
  979 -> 42 [style=solid label="\"static\""]
  979 -> 43 [style=solid label="\"thread_local\""]
  979 -> 44 [style=solid label="\"mutable\""]
  979 -> 47 [style=dashed label="alias-declaration"]
  979 -> 48 [style=dashed label="asm-declaration"]
  979 -> 973 [style=dashed label="attribute-specifier-seq"]
  979 -> 974 [style=dashed label="attribute-specifier-seq-opt"]
  979 -> 975 [style=dashed label="block-declaration"]
  979 -> 53 [style=dashed label="class-head"]
  979 -> 54 [style=dashed label="class-key"]
  979 -> 55 [style=dashed label="class-name"]
  979 -> 56 [style=dashed label="class-specifier"]
  979 -> 57 [style=dashed label="cv-qualifier"]
  979 -> 58 [style=dashed label="decl-specifier"]
  979 -> 59 [style=dashed label="decl-specifier-seq"]
  979 -> 976 [style=dashed label="declaration-statement"]
  979 -> 63 [style=dashed label="decltype-specifier"]
  979 -> 65 [style=dashed label="defining-type-specifier"]
  979 -> 66 [style=dashed label="elaborated-enum-specifier"]
  979 -> 67 [style=dashed label="elaborated-type-specifier"]
  979 -> 69 [style=dashed label="enum-head"]
  979 -> 70 [style=dashed label="enum-key"]
  979 -> 71 [style=dashed label="enum-name"]
  979 -> 72 [style=dashed label="enum-specifier"]
  979 -> 155 [style=dashed label="explicit-specifier"]
  979 -> 79 [style=dashed label="function-specifier"]
  979 -> 977 [style=dashed label="labeled-statement"]
  979 -> 85 [style=dashed label="namespace-alias"]
  979 -> 86 [style=dashed label="namespace-alias-definition"]
  979 -> 88 [style=dashed label="namespace-name"]
  979 -> 89 [style=dashed label="nested-name-specifier"]
  979 -> 90 [style=dashed label="nested-name-specifier-opt"]
  979 -> 93 [style=dashed label="opaque-enum-declaration"]
  979 -> 94 [style=dashed label="placeholder-type-specifier"]
  979 -> 95 [style=dashed label="simple-declaration"]
  979 -> 96 [style=dashed label="simple-template-id"]
  979 -> 97 [style=dashed label="simple-type-specifier"]
  979 -> 1117 [style=dashed label="statement"]
  979 -> 98 [style=dashed label="static_assert-declaration"]
  979 -> 99 [style=dashed label="storage-class-specifier"]
  979 -> 102 [style=dashed label="template-name"]
  979 -> 104 [style=dashed label="type-constraint"]
  979 -> 105 [style=dashed label="type-constraint-opt"]
  979 -> 106 [style=dashed label="type-name"]
  979 -> 107 [style=dashed label="type-specifier"]
  979 -> 108 [style=dashed label="typedef-name"]
  979 -> 109 [style=dashed label="typename-specifier"]
  979 -> 111 [style=dashed label="using-declaration"]
  979 -> 112 [style=dashed label="using-directive"]
  979 -> 113 [style=dashed label="using-enum-declaration"]
  979 -> "979R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "979R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  979 -> "979R83" [style=solid]
 "979R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  979 -> "979R458d" [label="[IDENTIFIER]", style=solid]
 "979R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  979 -> "979R675" [label="[\"}\"]", style=solid]
 "979R675" [label="R675", fillcolor=3, shape=diamond, style=filled]
  979 -> "979R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "979R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  980 [label="State 980\n\l149 compound-statement: \"{\" statement-seq-opt • \"}\"\l"]
  980 -> 1118 [style=solid label="\"}\""]
  981 [label="State 981\n\l695 template-id: literal-operator-id \"<\" template-argument-list-opt \">\" •\l"]
  981 -> "981R695" [style=solid]
 "981R695" [label="R695", fillcolor=3, shape=diamond, style=filled]
  982 [label="State 982\n\l157 conditional-expression: logical-or-expression \"?\" expression \":\" • assignment-expression\l"]
  982 -> 238 [style=solid label="IDENTIFIER"]
  982 -> 239 [style=solid label="\"noexcept\""]
  982 -> 240 [style=solid label="\"!\""]
  982 -> 241 [style=solid label="\"::\""]
  982 -> 242 [style=solid label="\"this\""]
  982 -> 8 [style=solid label="\"typename\""]
  982 -> 243 [style=solid label="\"+\""]
  982 -> 244 [style=solid label="\"-\""]
  982 -> 245 [style=solid label="\"(\""]
  982 -> 246 [style=solid label="\"&\""]
  982 -> 247 [style=solid label="\"[\""]
  982 -> 248 [style=solid label="\"co_await\""]
  982 -> 249 [style=solid label="\"operator\""]
  982 -> 21 [style=solid label="\"decltype\""]
  982 -> 250 [style=solid label="\"*\""]
  982 -> 251 [style=solid label="\"requires\""]
  982 -> 252 [style=solid label="\"~\""]
  982 -> 253 [style=solid label="\"++\""]
  982 -> 254 [style=solid label="\"--\""]
  982 -> 255 [style=solid label="\"dynamic_cast\""]
  982 -> 256 [style=solid label="\"static_cast\""]
  982 -> 257 [style=solid label="\"reinterpret_cast\""]
  982 -> 258 [style=solid label="\"const_cast\""]
  982 -> 259 [style=solid label="\"typeid\""]
  982 -> 260 [style=solid label="\"literal\""]
  982 -> 27 [style=solid label="\"char\""]
  982 -> 28 [style=solid label="\"char8_t\""]
  982 -> 29 [style=solid label="\"char16_t\""]
  982 -> 30 [style=solid label="\"char32_t\""]
  982 -> 31 [style=solid label="\"wchar_t\""]
  982 -> 32 [style=solid label="\"bool\""]
  982 -> 33 [style=solid label="\"short\""]
  982 -> 34 [style=solid label="\"int\""]
  982 -> 35 [style=solid label="\"long\""]
  982 -> 36 [style=solid label="\"signed\""]
  982 -> 37 [style=solid label="\"unsigned\""]
  982 -> 38 [style=solid label="\"float\""]
  982 -> 39 [style=solid label="\"double\""]
  982 -> 40 [style=solid label="\"void\""]
  982 -> 118 [style=solid label="STRING_LITERAL"]
  982 -> 261 [style=solid label="\"throw\""]
  982 -> 262 [style=solid label="\"sizeof\""]
  982 -> 263 [style=solid label="\"alignof\""]
  982 -> 264 [style=solid label="\"co_yield\""]
  982 -> 265 [style=dashed label="SCOPE-opt"]
  982 -> 266 [style=dashed label="additive-expression"]
  982 -> 267 [style=dashed label="and-expression"]
  982 -> 1119 [style=dashed label="assignment-expression"]
  982 -> 269 [style=dashed label="await-expression"]
  982 -> 270 [style=dashed label="cast-expression"]
  982 -> 55 [style=dashed label="class-name"]
  982 -> 271 [style=dashed label="compare-expression"]
  982 -> 272 [style=dashed label="conditional-expression"]
  982 -> 273 [style=dashed label="conversion-function-id"]
  982 -> 63 [style=dashed label="decltype-specifier"]
  982 -> 274 [style=dashed label="delete-expression"]
  982 -> 71 [style=dashed label="enum-name"]
  982 -> 275 [style=dashed label="equality-expression"]
  982 -> 276 [style=dashed label="exclusive-or-expression"]
  982 -> 278 [style=dashed label="fold-expression"]
  982 -> 279 [style=dashed label="id-expression"]
  982 -> 280 [style=dashed label="inclusive-or-expression"]
  982 -> 281 [style=dashed label="lambda-expression"]
  982 -> 282 [style=dashed label="lambda-introducer"]
  982 -> 283 [style=dashed label="literal-operator-id"]
  982 -> 284 [style=dashed label="logical-and-expression"]
  982 -> 285 [style=dashed label="logical-or-expression"]
  982 -> 286 [style=dashed label="multiplicative-expression"]
  982 -> 85 [style=dashed label="namespace-alias"]
  982 -> 88 [style=dashed label="namespace-name"]
  982 -> 287 [style=dashed label="nested-name-specifier"]
  982 -> 90 [style=dashed label="nested-name-specifier-opt"]
  982 -> 288 [style=dashed label="new-expression"]
  982 -> 289 [style=dashed label="noexcept-expression"]
  982 -> 290 [style=dashed label="operator-function-id"]
  982 -> 94 [style=dashed label="placeholder-type-specifier"]
  982 -> 291 [style=dashed label="pm-expression"]
  982 -> 292 [style=dashed label="postfix-expression"]
  982 -> 293 [style=dashed label="primary-expression"]
  982 -> 294 [style=dashed label="qualified-id"]
  982 -> 295 [style=dashed label="relational-expression"]
  982 -> 296 [style=dashed label="requires-expression"]
  982 -> 297 [style=dashed label="shift-expression"]
  982 -> 298 [style=dashed label="simple-template-id"]
  982 -> 299 [style=dashed label="simple-type-specifier"]
  982 -> 300 [style=dashed label="string-literal"]
  982 -> 301 [style=dashed label="template-id"]
  982 -> 102 [style=dashed label="template-name"]
  982 -> 302 [style=dashed label="throw-expression"]
  982 -> 104 [style=dashed label="type-constraint"]
  982 -> 105 [style=dashed label="type-constraint-opt"]
  982 -> 106 [style=dashed label="type-name"]
  982 -> 108 [style=dashed label="typedef-name"]
  982 -> 303 [style=dashed label="typename-specifier"]
  982 -> 304 [style=dashed label="unary-expression"]
  982 -> 305 [style=dashed label="unary-operator"]
  982 -> 306 [style=dashed label="unqualified-id"]
  982 -> 307 [style=dashed label="yield-expression"]
  982 -> "982R19" [style=solid]
 "982R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  982 -> "982R458d" [label="[IDENTIFIER]", style=solid]
 "982R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  982 -> "982R710d" [label="[\"decltype\"]", style=solid]
 "982R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  982 -> "982R710" [label="[\"auto\"]", style=solid]
 "982R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  983 [label="State 983\n\l694 template-id: operator-function-id \"<\" template-argument-list-opt \">\" •\l"]
  983 -> "983R694" [style=solid]
 "983R694" [label="R694", fillcolor=3, shape=diamond, style=filled]
  984 [label="State 984\n\l561 postfix-expression: postfix-expression \"(\" expression-list-opt \")\" •\l"]
  984 -> "984R561" [style=solid]
 "984R561" [label="R561", fillcolor=3, shape=diamond, style=filled]
  985 [label="State 985\n\l560 postfix-expression: postfix-expression \"[\" expression-list-opt \"]\" •\l"]
  985 -> "985R560" [style=solid]
 "985R560" [label="R560", fillcolor=3, shape=diamond, style=filled]
  986 [label="State 986\n\l567 postfix-expression: postfix-expression \"->\" TEMPLATE-opt id-expression •\l"]
  986 -> "986R567" [style=solid]
 "986R567" [label="R567", fillcolor=3, shape=diamond, style=filled]
  987 [label="State 987\n\l566 postfix-expression: postfix-expression \".\" TEMPLATE-opt id-expression •\l"]
  987 -> "987R566" [style=solid]
 "987R566" [label="R566", fillcolor=3, shape=diamond, style=filled]
  988 [label="State 988\n\l562 postfix-expression: simple-type-specifier \"(\" expression-list-opt \")\" •\l"]
  988 -> "988R562" [style=solid]
 "988R562" [label="R562", fillcolor=3, shape=diamond, style=filled]
  989 [label="State 989\n\l563 postfix-expression: typename-specifier \"(\" expression-list-opt \")\" •\l"]
  989 -> "989R563" [style=solid]
 "989R563" [label="R563", fillcolor=3, shape=diamond, style=filled]
  990 [label="State 990\n\l460 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" INLINE-opt IDENTIFIER \"{\" • namespace-body \"}\"\l"]
  990 -> 1 [style=solid label="\"constexpr\""]
  990 -> 2 [style=solid label="\"export\""]
  990 -> 3 [style=solid label="\"extern\""]
  990 -> 4 [style=solid label="IDENTIFIER"]
  990 -> 5 [style=solid label="\"inline\""]
  990 -> 6 [style=solid label="\"::\""]
  990 -> 7 [style=solid label="\"template\""]
  990 -> 8 [style=solid label="\"typename\""]
  990 -> 9 [style=solid label="\"virtual\""]
  990 -> 10 [style=solid label="\"using\""]
  990 -> 11 [style=solid label="\";\""]
  990 -> 12 [style=solid label="\"class\""]
  990 -> 13 [style=solid label="\"struct\""]
  990 -> 14 [style=solid label="\"union\""]
  990 -> 15 [style=solid label="\"const\""]
  990 -> 16 [style=solid label="\"volatile\""]
  990 -> 17 [style=solid label="\"friend\""]
  990 -> 18 [style=solid label="\"typedef\""]
  990 -> 19 [style=solid label="\"consteval\""]
  990 -> 20 [style=solid label="\"constinit\""]
  990 -> 21 [style=solid label="\"decltype\""]
  990 -> 22 [style=solid label="\"enum\""]
  990 -> 23 [style=solid label="\"explicit\""]
  990 -> 25 [style=solid label="\"import\""]
  990 -> 26 [style=solid label="\"namespace\""]
  990 -> 27 [style=solid label="\"char\""]
  990 -> 28 [style=solid label="\"char8_t\""]
  990 -> 29 [style=solid label="\"char16_t\""]
  990 -> 30 [style=solid label="\"char32_t\""]
  990 -> 31 [style=solid label="\"wchar_t\""]
  990 -> 32 [style=solid label="\"bool\""]
  990 -> 33 [style=solid label="\"short\""]
  990 -> 34 [style=solid label="\"int\""]
  990 -> 35 [style=solid label="\"long\""]
  990 -> 36 [style=solid label="\"signed\""]
  990 -> 37 [style=solid label="\"unsigned\""]
  990 -> 38 [style=solid label="\"float\""]
  990 -> 39 [style=solid label="\"double\""]
  990 -> 40 [style=solid label="\"void\""]
  990 -> 41 [style=solid label="\"static_assert\""]
  990 -> 42 [style=solid label="\"static\""]
  990 -> 43 [style=solid label="\"thread_local\""]
  990 -> 44 [style=solid label="\"mutable\""]
  990 -> 45 [style=dashed label="EXTERN-opt"]
  990 -> 46 [style=dashed label="INLINE-opt"]
  990 -> 47 [style=dashed label="alias-declaration"]
  990 -> 48 [style=dashed label="asm-declaration"]
  990 -> 49 [style=dashed label="attribute-declaration"]
  990 -> 50 [style=dashed label="attribute-specifier-seq"]
  990 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  990 -> 52 [style=dashed label="block-declaration"]
  990 -> 53 [style=dashed label="class-head"]
  990 -> 54 [style=dashed label="class-key"]
  990 -> 55 [style=dashed label="class-name"]
  990 -> 56 [style=dashed label="class-specifier"]
  990 -> 57 [style=dashed label="cv-qualifier"]
  990 -> 58 [style=dashed label="decl-specifier"]
  990 -> 59 [style=dashed label="decl-specifier-seq"]
  990 -> 60 [style=dashed label="declaration"]
  990 -> 61 [style=dashed label="declaration-seq"]
  990 -> 830 [style=dashed label="declaration-seq-opt"]
  990 -> 63 [style=dashed label="decltype-specifier"]
  990 -> 64 [style=dashed label="deduction-guide"]
  990 -> 65 [style=dashed label="defining-type-specifier"]
  990 -> 66 [style=dashed label="elaborated-enum-specifier"]
  990 -> 67 [style=dashed label="elaborated-type-specifier"]
  990 -> 68 [style=dashed label="empty-declaration"]
  990 -> 69 [style=dashed label="enum-head"]
  990 -> 70 [style=dashed label="enum-key"]
  990 -> 71 [style=dashed label="enum-name"]
  990 -> 72 [style=dashed label="enum-specifier"]
  990 -> 73 [style=dashed label="explicit-instantiation"]
  990 -> 74 [style=dashed label="explicit-specialization"]
  990 -> 75 [style=dashed label="explicit-specifier"]
  990 -> 76 [style=dashed label="explicit-specifier-opt"]
  990 -> 77 [style=dashed label="export-declaration"]
  990 -> 78 [style=dashed label="function-definition"]
  990 -> 79 [style=dashed label="function-specifier"]
  990 -> 82 [style=dashed label="linkage-specification"]
  990 -> 83 [style=dashed label="module-import-declaration"]
  990 -> 84 [style=dashed label="named-namespace-definition"]
  990 -> 85 [style=dashed label="namespace-alias"]
  990 -> 86 [style=dashed label="namespace-alias-definition"]
  990 -> 1120 [style=dashed label="namespace-body"]
  990 -> 87 [style=dashed label="namespace-definition"]
  990 -> 88 [style=dashed label="namespace-name"]
  990 -> 89 [style=dashed label="nested-name-specifier"]
  990 -> 90 [style=dashed label="nested-name-specifier-opt"]
  990 -> 91 [style=dashed label="nested-namespace-definition"]
  990 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  990 -> 93 [style=dashed label="opaque-enum-declaration"]
  990 -> 94 [style=dashed label="placeholder-type-specifier"]
  990 -> 95 [style=dashed label="simple-declaration"]
  990 -> 96 [style=dashed label="simple-template-id"]
  990 -> 97 [style=dashed label="simple-type-specifier"]
  990 -> 98 [style=dashed label="static_assert-declaration"]
  990 -> 99 [style=dashed label="storage-class-specifier"]
  990 -> 100 [style=dashed label="template-declaration"]
  990 -> 101 [style=dashed label="template-head"]
  990 -> 102 [style=dashed label="template-name"]
  990 -> 104 [style=dashed label="type-constraint"]
  990 -> 105 [style=dashed label="type-constraint-opt"]
  990 -> 106 [style=dashed label="type-name"]
  990 -> 107 [style=dashed label="type-specifier"]
  990 -> 108 [style=dashed label="typedef-name"]
  990 -> 109 [style=dashed label="typename-specifier"]
  990 -> 110 [style=dashed label="unnamed-namespace-definition"]
  990 -> 111 [style=dashed label="using-declaration"]
  990 -> 112 [style=dashed label="using-directive"]
  990 -> 113 [style=dashed label="using-enum-declaration"]
  990 -> "990R9d" [label="[\"template\"]", style=solid]
 "990R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  990 -> "990R13d" [label="[\"namespace\"]", style=solid]
 "990R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  990 -> "990R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "990R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  990 -> "990R83" [label="[]", style=solid]
 "990R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  990 -> "990R208" [label="[\"}\"]", style=solid]
 "990R208" [label="R208", fillcolor=3, shape=diamond, style=filled]
  990 -> "990R268d" [label="[IDENTIFIER]", style=solid]
 "990R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  990 -> "990R458d" [label="[IDENTIFIER]", style=solid]
 "990R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  990 -> "990R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "990R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  991 [label="State 991\n\l677 static_assert-declaration: \"static_assert\" \"(\" constant-expression \",\" string-literal \")\" • \";\"\l"]
  991 -> 1121 [style=solid label="\";\""]
  992 [label="State 992\n\l443 named-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt IDENTIFIER \"{\" namespace-body • \"}\"\l"]
  992 -> 1122 [style=solid label="\"}\""]
  993 [label="State 993\n\l754 unnamed-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt \"{\" namespace-body \"}\" •\l"]
  993 -> "993R754" [style=solid]
 "993R754" [label="R754", fillcolor=3, shape=diamond, style=filled]
  994 [label="State 994\n\l767 using-directive: attribute-specifier-seq-opt \"using\" \"namespace\" nested-name-specifier-opt namespace-name \";\" •\l"]
  994 -> "994R767" [style=solid]
 "994R767" [label="R767", fillcolor=3, shape=diamond, style=filled]
  995 [label="State 995\n\l 46 alignment-specifier: \"alignas\" \"(\" constant-expression ELLIPSIS-opt \")\" •\l"]
  995 -> "995R46" [style=solid]
 "995R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  996 [label="State 996\n\l 45 alignment-specifier: \"alignas\" \"(\" type-id ELLIPSIS-opt \")\" •\l"]
  996 -> "996R45" [style=solid]
 "996R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  997 [label="State 997\n\l 49 asm-declaration: attribute-specifier-seq-opt \"asm\" \"(\" string-literal \")\" \";\" •\l"]
  997 -> "997R49" [style=solid]
 "997R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
  998 [label="State 998\n\l 87 attribute-using-prefix: \"using\" attribute-namespace \":\" •\l"]
  998 -> "998R87" [style=solid]
 "998R87" [label="R87", fillcolor=3, shape=diamond, style=filled]
  999 [label="State 999\n\l 74 attribute-list: attribute \"...\" •\l"]
  999 -> "999R74" [style=solid]
 "999R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  1000 [label="State 1000\n\l 73 attribute-list: attribute-list \",\" • attribute-opt\l 75               | attribute-list \",\" • attribute \"...\"\l"]
  1000 -> 838 [style=solid label="IDENTIFIER"]
  1000 -> 1123 [style=dashed label="attribute"]
  1000 -> 841 [style=dashed label="attribute-namespace"]
  1000 -> 1124 [style=dashed label="attribute-opt"]
  1000 -> 843 [style=dashed label="attribute-scoped-token"]
  1000 -> 844 [style=dashed label="attribute-token"]
  1000 -> "1000R77" [style=solid]
 "1000R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  1001 [label="State 1001\n\l 80 attribute-specifier: \"[\" \"[\" attribute-using-prefix-opt attribute-list \"]\" • \"]\"\l"]
  1001 -> 1125 [style=solid label="\"]\""]
  1002 [label="State 1002\n\l 79 attribute-scoped-token: attribute-namespace \"::\" • IDENTIFIER\l"]
  1002 -> 1126 [style=solid label="IDENTIFIER"]
  1003 [label="State 1003\n\l 68 attribute-argument-clause: \"(\" • balanced-token-seq-opt \")\"\l"]
  1003 -> 1127 [style=solid label="\"(\""]
  1003 -> 1128 [style=solid label="\"[\""]
  1003 -> 1129 [style=solid label="\"{\""]
  1003 -> 1130 [style=solid label="BALANCED_TOKEN"]
  1003 -> 1131 [style=dashed label="balanced-token"]
  1003 -> 1132 [style=dashed label="balanced-token-seq"]
  1003 -> 1133 [style=dashed label="balanced-token-seq-opt"]
  1003 -> "1003R97" [style=solid]
 "1003R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  1004 [label="State 1004\n\l 70 attribute-argument-clause-opt: attribute-argument-clause •\l"]
  1004 -> "1004R70" [style=solid]
 "1004R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
  1005 [label="State 1005\n\l 67 attribute: attribute-token attribute-argument-clause-opt •\l"]
  1005 -> "1005R67" [style=solid]
 "1005R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
  1006 [label="State 1006\n\l343 identifier-list: identifier-list \",\" • IDENTIFIER\l"]
  1006 -> 1134 [style=solid label="IDENTIFIER"]
  1007 [label="State 1007\n\l642 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" • initializer \";\"\l"]
  1007 -> 378 [style=solid label="\"=\""]
  1007 -> 379 [style=solid label="\"(\""]
  1007 -> 380 [style=solid label="\"{\""]
  1007 -> 382 [style=dashed label="brace-or-equal-initializer"]
  1007 -> 383 [style=dashed label="braced-init-list"]
  1007 -> 1135 [style=dashed label="initializer"]
  1008 [label="State 1008\n\l326 function-body: \"=\" \"delete\" • \";\"\l"]
  1008 -> 1136 [style=solid label="\";\""]
  1009 [label="State 1009\n\l325 function-body: \"=\" \"default\" • \";\"\l"]
  1009 -> 1137 [style=solid label="\";\""]
  1010 [label="State 1010\n\l137 class-name: IDENTIFIER •\l246 enum-name: IDENTIFIER •\l401 mem-initializer-id: IDENTIFIER •\l444 namespace-alias: IDENTIFIER •\l450 namespace-name: IDENTIFIER •\l696 template-name: IDENTIFIER •\l731 typedef-name: IDENTIFIER •\l"]
  1010 -> "1010R137" [label="[\"::\"]", style=solid]
 "1010R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  1010 -> "1010R246d" [label="[\"::\"]", style=solid]
 "1010R246d" [label="R246", fillcolor=5, shape=diamond, style=filled]
  1010 -> "1010R401" [label="[]", style=solid]
 "1010R401" [label="R401", fillcolor=3, shape=diamond, style=filled]
  1010 -> "1010R444d" [label="[\"::\"]", style=solid]
 "1010R444d" [label="R444", fillcolor=5, shape=diamond, style=filled]
  1010 -> "1010R450d" [label="[\"::\"]", style=solid]
 "1010R450d" [label="R450", fillcolor=5, shape=diamond, style=filled]
  1010 -> "1010R696" [label="[\"<\"]", style=solid]
 "1010R696" [label="R696", fillcolor=3, shape=diamond, style=filled]
  1010 -> "1010R731d" [label="[\"::\"]", style=solid]
 "1010R731d" [label="R731", fillcolor=5, shape=diamond, style=filled]
  1011 [label="State 1011\n\l400 mem-initializer-id: class-or-decltype •\l"]
  1011 -> "1011R400" [style=solid]
 "1011R400" [label="R400", fillcolor=3, shape=diamond, style=filled]
  1012 [label="State 1012\n\l402 mem-initializer-list: mem-initializer • ELLIPSIS-opt\l"]
  1012 -> 156 [style=solid label="\"...\""]
  1012 -> 1138 [style=dashed label="ELLIPSIS-opt"]
  1012 -> "1012R5" [style=solid]
 "1012R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1013 [label="State 1013\n\l398 mem-initializer: mem-initializer-id • \"(\" expression-list-opt \")\"\l399                | mem-initializer-id • braced-init-list\l"]
  1013 -> 1139 [style=solid label="\"(\""]
  1013 -> 380 [style=solid label="\"{\""]
  1013 -> 1140 [style=dashed label="braced-init-list"]
  1014 [label="State 1014\n\l172 ctor-initializer: \":\" mem-initializer-list •\l403 mem-initializer-list: mem-initializer-list • \",\" mem-initializer ELLIPSIS-opt\l"]
  1014 -> 1141 [style=solid label="\",\""]
  1014 -> "1014R172" [style=solid]
 "1014R172" [label="R172", fillcolor=3, shape=diamond, style=filled]
  1015 [label="State 1015\n\l331 function-try-block: \"try\" ctor-initializer-opt • compound-statement handler-seq\l"]
  1015 -> 794 [style=solid label="\"{\""]
  1015 -> 1142 [style=dashed label="compound-statement"]
  1016 [label="State 1016\n\l323 function-body: ctor-initializer-opt compound-statement •\l"]
  1016 -> "1016R323" [style=solid]
 "1016R323" [label="R323", fillcolor=3, shape=diamond, style=filled]
  1017 [label="State 1017\n\l553 parameters-and-qualifiers: \"(\" parameter-declaration-clause \")\" cv-qualifier-seq-opt • ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt\l"]
  1017 -> 339 [style=solid label="\"&\""]
  1017 -> 340 [style=solid label="\"&&\""]
  1017 -> 341 [style=dashed label="ref-qualifier"]
  1017 -> 1143 [style=dashed label="ref-qualifier-opt"]
  1017 -> "1017R604" [style=solid]
 "1017R604" [label="R604", fillcolor=3, shape=diamond, style=filled]
  1018 [label="State 1018\n\l548 parameter-declaration-clause: parameter-declaration-list \",\" \"...\" •\l"]
  1018 -> "1018R548" [style=solid]
 "1018R548" [label="R548", fillcolor=3, shape=diamond, style=filled]
  1019 [label="State 1019\n\l550 parameter-declaration-list: parameter-declaration-list \",\" parameter-declaration •\l"]
  1019 -> "1019R550" [style=solid]
 "1019R550" [label="R550", fillcolor=3, shape=diamond, style=filled]
  1020 [label="State 1020\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l492 noptr-declarator: noptr-declarator \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt •\l"]
  1020 -> 158 [style=solid label="\"alignas\""]
  1020 -> 162 [style=solid label="\"[\""]
  1020 -> 166 [style=dashed label="alignment-specifier"]
  1020 -> 167 [style=dashed label="attribute-specifier"]
  1020 -> "1020R492d" [label="[\"[\"]", style=solid]
 "1020R492d" [label="R492", fillcolor=5, shape=diamond, style=filled]
  1020 -> "1020R492" [style=solid]
 "1020R492" [label="R492", fillcolor=3, shape=diamond, style=filled]
  1021 [label="State 1021\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l418 member-declarator: IDENTIFIER-opt attribute-specifier-seq-opt • \":\" constant-expression brace-or-equal-initializer-opt\l"]
  1021 -> 158 [style=solid label="\"alignas\""]
  1021 -> 162 [style=solid label="\"[\""]
  1021 -> 1144 [style=solid label="\":\""]
  1021 -> 166 [style=dashed label="alignment-specifier"]
  1021 -> 167 [style=dashed label="attribute-specifier"]
  1022 [label="State 1022\n\l119 brace-or-equal-initializer-opt: brace-or-equal-initializer •\l"]
  1022 -> "1022R119" [style=solid]
 "1022R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
  1023 [label="State 1023\n\l417 member-declarator: declarator brace-or-equal-initializer-opt •\l"]
  1023 -> "1023R417" [style=solid]
 "1023R417" [label="R417", fillcolor=3, shape=diamond, style=filled]
  1024 [label="State 1024\n\l328 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator requires-clause • function-body\l416 member-declarator: declarator requires-clause •\l"]
  1024 -> 848 [style=solid label="\"=\""]
  1024 -> 849 [style=solid label="\":\""]
  1024 -> 850 [style=solid label="\"try\""]
  1024 -> 851 [style=dashed label="ctor-initializer"]
  1024 -> 852 [style=dashed label="ctor-initializer-opt"]
  1024 -> 853 [style=dashed label="function-body"]
  1024 -> 854 [style=dashed label="function-try-block"]
  1024 -> "1024R173" [label="[\"{\"]", style=solid]
 "1024R173" [label="R173", fillcolor=3, shape=diamond, style=filled]
  1024 -> "1024R416" [style=solid]
 "1024R416" [label="R416", fillcolor=3, shape=diamond, style=filled]
  1025 [label="State 1025\n\l327 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator virt-specifier-seq-opt • function-body\l415 member-declarator: declarator virt-specifier-seq-opt • pure-specifier-opt\l"]
  1025 -> 1145 [style=solid label="\"=\""]
  1025 -> 849 [style=solid label="\":\""]
  1025 -> 850 [style=solid label="\"try\""]
  1025 -> 851 [style=dashed label="ctor-initializer"]
  1025 -> 852 [style=dashed label="ctor-initializer-opt"]
  1025 -> 856 [style=dashed label="function-body"]
  1025 -> 854 [style=dashed label="function-try-block"]
  1025 -> 1146 [style=dashed label="pure-specifier"]
  1025 -> 1147 [style=dashed label="pure-specifier-opt"]
  1025 -> "1025R173" [label="[\"{\"]", style=solid]
 "1025R173" [label="R173", fillcolor=3, shape=diamond, style=filled]
  1025 -> "1025R598" [style=solid]
 "1025R598" [label="R598", fillcolor=3, shape=diamond, style=filled]
  1026 [label="State 1026\n\l420 member-declarator-list: member-declarator-list \",\" • member-declarator\l"]
  1026 -> 156 [style=solid label="\"...\""]
  1026 -> 864 [style=solid label="IDENTIFIER"]
  1026 -> 6 [style=solid label="\"::\""]
  1026 -> 159 [style=solid label="\"(\""]
  1026 -> 160 [style=solid label="\"&\""]
  1026 -> 163 [style=solid label="\"&&\""]
  1026 -> 21 [style=solid label="\"decltype\""]
  1026 -> 164 [style=solid label="\"*\""]
  1026 -> 165 [style=dashed label="ELLIPSIS-opt"]
  1026 -> 865 [style=dashed label="IDENTIFIER-opt"]
  1026 -> 55 [style=dashed label="class-name"]
  1026 -> 1148 [style=dashed label="declarator"]
  1026 -> 171 [style=dashed label="declarator-id"]
  1026 -> 121 [style=dashed label="decltype-specifier"]
  1026 -> 71 [style=dashed label="enum-name"]
  1026 -> 1149 [style=dashed label="member-declarator"]
  1026 -> 85 [style=dashed label="namespace-alias"]
  1026 -> 88 [style=dashed label="namespace-name"]
  1026 -> 187 [style=dashed label="nested-name-specifier"]
  1026 -> 173 [style=dashed label="noptr-declarator"]
  1026 -> 174 [style=dashed label="ptr-declarator"]
  1026 -> 175 [style=dashed label="ptr-operator"]
  1026 -> 96 [style=dashed label="simple-template-id"]
  1026 -> 102 [style=dashed label="template-name"]
  1026 -> 106 [style=dashed label="type-name"]
  1026 -> 108 [style=dashed label="typedef-name"]
  1026 -> "1026R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "1026R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  1026 -> "1026R5" [label="[\"operator\", \"~\"]", style=solid]
 "1026R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1026 -> "1026R11" [style=solid]
 "1026R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  1027 [label="State 1027\n\l404 member-declaration: attribute-specifier-seq-opt decl-specifier-seq-opt member-declarator-list-opt \";\" •\l"]
  1027 -> "1027R404" [style=solid]
 "1027R404" [label="R404", fillcolor=3, shape=diamond, style=filled]
  1028 [label="State 1028\n\l 40 access-specifier-opt: access-specifier •\l"]
  1028 -> "1028R40" [style=solid]
 "1028R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  1029 [label="State 1029\n\l103 base-specifier: attribute-specifier-seq-opt \"virtual\" access-specifier-opt • class-or-decltype\l"]
  1029 -> 4 [style=solid label="IDENTIFIER"]
  1029 -> 6 [style=solid label="\"::\""]
  1029 -> 21 [style=solid label="\"decltype\""]
  1029 -> 55 [style=dashed label="class-name"]
  1029 -> 1150 [style=dashed label="class-or-decltype"]
  1029 -> 874 [style=dashed label="decltype-specifier"]
  1029 -> 71 [style=dashed label="enum-name"]
  1029 -> 85 [style=dashed label="namespace-alias"]
  1029 -> 88 [style=dashed label="namespace-name"]
  1029 -> 875 [style=dashed label="nested-name-specifier"]
  1029 -> 876 [style=dashed label="nested-name-specifier-opt"]
  1029 -> 96 [style=dashed label="simple-template-id"]
  1029 -> 102 [style=dashed label="template-name"]
  1029 -> 106 [style=dashed label="type-name"]
  1029 -> 108 [style=dashed label="typedef-name"]
  1029 -> "1029R458d" [label="[IDENTIFIER]", style=solid]
 "1029R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1030 [label="State 1030\n\l 28 VIRTUAL-opt: \"virtual\" •\l"]
  1030 -> "1030R28" [style=solid]
 "1030R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  1031 [label="State 1031\n\l104 base-specifier: attribute-specifier-seq-opt access-specifier VIRTUAL-opt • class-or-decltype\l"]
  1031 -> 4 [style=solid label="IDENTIFIER"]
  1031 -> 6 [style=solid label="\"::\""]
  1031 -> 21 [style=solid label="\"decltype\""]
  1031 -> 55 [style=dashed label="class-name"]
  1031 -> 1151 [style=dashed label="class-or-decltype"]
  1031 -> 874 [style=dashed label="decltype-specifier"]
  1031 -> 71 [style=dashed label="enum-name"]
  1031 -> 85 [style=dashed label="namespace-alias"]
  1031 -> 88 [style=dashed label="namespace-name"]
  1031 -> 875 [style=dashed label="nested-name-specifier"]
  1031 -> 876 [style=dashed label="nested-name-specifier-opt"]
  1031 -> 96 [style=dashed label="simple-template-id"]
  1031 -> 102 [style=dashed label="template-name"]
  1031 -> 106 [style=dashed label="type-name"]
  1031 -> 108 [style=dashed label="typedef-name"]
  1031 -> "1031R458d" [label="[IDENTIFIER]", style=solid]
 "1031R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1032 [label="State 1032\n\l 22 TEMPLATE-opt: \"template\" •\l140 class-or-decltype: nested-name-specifier \"template\" • simple-template-id\l"]
  1032 -> 192 [style=solid label="IDENTIFIER"]
  1032 -> 1152 [style=dashed label="simple-template-id"]
  1032 -> 102 [style=dashed label="template-name"]
  1032 -> "1032R22d" [label="[IDENTIFIER]", style=solid]
 "1032R22d" [label="R22", fillcolor=5, shape=diamond, style=filled]
  1033 [label="State 1033\n\l139 class-or-decltype: nested-name-specifier-opt type-name •\l"]
  1033 -> "1033R139" [style=solid]
 "1033R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  1034 [label="State 1034\n\l106 base-specifier-list: base-specifier-list \",\" base-specifier • ELLIPSIS-opt\l"]
  1034 -> 156 [style=solid label="\"...\""]
  1034 -> 1153 [style=dashed label="ELLIPSIS-opt"]
  1034 -> "1034R5" [style=solid]
 "1034R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1035 [label="State 1035\n\l364 initializer-list: initializer-list \",\" initializer-clause • ELLIPSIS-opt\l"]
  1035 -> 156 [style=solid label="\"...\""]
  1035 -> 1154 [style=dashed label="ELLIPSIS-opt"]
  1035 -> "1035R5" [style=solid]
 "1035R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1036 [label="State 1036\n\l226 designated-initializer-list: designated-initializer-list \",\" designated-initializer-clause •\l"]
  1036 -> "1036R226" [style=solid]
 "1036R226" [label="R226", fillcolor=3, shape=diamond, style=filled]
  1037 [label="State 1037\n\l121 braced-init-list: \"{\" designated-initializer-list COMMA-opt \"}\" •\l"]
  1037 -> "1037R121" [style=solid]
 "1037R121" [label="R121", fillcolor=3, shape=diamond, style=filled]
  1038 [label="State 1038\n\l120 braced-init-list: \"{\" initializer-list COMMA-opt \"}\" •\l"]
  1038 -> "1038R120" [style=solid]
 "1038R120" [label="R120", fillcolor=3, shape=diamond, style=filled]
  1039 [label="State 1039\n\l163 constraint-logical-and-expression: constraint-logical-and-expression \"&&\" primary-expression •\l"]
  1039 -> "1039R163" [style=solid]
 "1039R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  1040 [label="State 1040\n\l163 constraint-logical-and-expression: constraint-logical-and-expression • \"&&\" primary-expression\l165 constraint-logical-or-expression: constraint-logical-or-expression \"||\" constraint-logical-and-expression •\l"]
  1040 -> 889 [style=solid label="\"&&\""]
  1040 -> "1040R165" [style=solid]
 "1040R165" [label="R165", fillcolor=3, shape=diamond, style=filled]
  1041 [label="State 1041\n\l215 deduction-guide: explicit-specifier-opt template-name \"(\" parameter-declaration-clause \")\" \"->\" • simple-template-id \";\"\l"]
  1041 -> 192 [style=solid label="IDENTIFIER"]
  1041 -> 1155 [style=dashed label="simple-template-id"]
  1041 -> 102 [style=dashed label="template-name"]
  1042 [label="State 1042\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l427 module-declaration: EXPORT-opt \"module\" module-name module-partition-opt attribute-specifier-seq-opt • \";\"\l"]
  1042 -> 1156 [style=solid label="\";\""]
  1042 -> 158 [style=solid label="\"alignas\""]
  1042 -> 162 [style=solid label="\"[\""]
  1042 -> 166 [style=dashed label="alignment-specifier"]
  1042 -> 167 [style=dashed label="attribute-specifier"]
  1043 [label="State 1043\n\l584 private-module-fragment: \"module\" \":\" \"private\" • \";\" declaration-seq-opt\l"]
  1043 -> 1157 [style=solid label="\";\""]
  1044 [label="State 1044\n\l150 concept-definition: \"concept\" concept-name \"=\" constraint-expression \";\" •\l"]
  1044 -> "1044R150" [style=solid]
 "1044R150" [label="R150", fillcolor=3, shape=diamond, style=filled]
  1045 [label="State 1045\n\l229 elaborated-type-specifier: class-key attribute-specifier-seq-opt nested-name-specifier-opt IDENTIFIER •\l"]
  1045 -> "1045R229" [style=solid]
 "1045R229" [label="R229", fillcolor=3, shape=diamond, style=filled]
  1046 [label="State 1046\n\l687 template-argument-list: template-argument-list \",\" template-argument ELLIPSIS-opt •\l"]
  1046 -> "1046R687" [style=solid]
 "1046R687" [label="R687", fillcolor=3, shape=diamond, style=filled]
  1047 [label="State 1047\n\l482 noptr-abstract-declarator: noptr-abstract-declarator-opt parameters-and-qualifiers •\l"]
  1047 -> "1047R482" [style=solid]
 "1047R482" [label="R482", fillcolor=3, shape=diamond, style=filled]
  1048 [label="State 1048\n\l484 noptr-abstract-declarator: \"(\" ptr-abstract-declarator \")\" •\l"]
  1048 -> "1048R484" [style=solid]
 "1048R484" [label="R484", fillcolor=3, shape=diamond, style=filled]
  1049 [label="State 1049\n\l483 noptr-abstract-declarator: noptr-abstract-declarator-opt \"[\" constant-expression-opt • \"]\" attribute-specifier-seq-opt\l"]
  1049 -> 1158 [style=solid label="\"]\""]
  1050 [label="State 1050\n\l 30 abstract-declarator: noptr-abstract-declarator-opt parameters-and-qualifiers trailing-return-type •\l"]
  1050 -> "1050R30" [style=solid]
 "1050R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  1051 [label="State 1051\n\l488 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator \"[\" constant-expression-opt • \"]\" attribute-specifier-seq-opt\l"]
  1051 -> 1159 [style=solid label="\"]\""]
  1052 [label="State 1052\n\l588 ptr-abstract-declarator: ptr-operator • ptr-abstract-declarator-opt\l592 ptr-declarator: ptr-operator • ptr-declarator\l"]
  1052 -> 156 [style=solid label="\"...\""]
  1052 -> 4 [style=solid label="IDENTIFIER"]
  1052 -> 6 [style=solid label="\"::\""]
  1052 -> 917 [style=solid label="\"(\""]
  1052 -> 160 [style=solid label="\"&\""]
  1052 -> 163 [style=solid label="\"&&\""]
  1052 -> 21 [style=solid label="\"decltype\""]
  1052 -> 164 [style=solid label="\"*\""]
  1052 -> 165 [style=dashed label="ELLIPSIS-opt"]
  1052 -> 55 [style=dashed label="class-name"]
  1052 -> 171 [style=dashed label="declarator-id"]
  1052 -> 121 [style=dashed label="decltype-specifier"]
  1052 -> 71 [style=dashed label="enum-name"]
  1052 -> 85 [style=dashed label="namespace-alias"]
  1052 -> 88 [style=dashed label="namespace-name"]
  1052 -> 187 [style=dashed label="nested-name-specifier"]
  1052 -> 687 [style=dashed label="noptr-abstract-declarator"]
  1052 -> 905 [style=dashed label="noptr-abstract-declarator-opt"]
  1052 -> 329 [style=dashed label="noptr-declarator"]
  1052 -> 913 [style=dashed label="ptr-abstract-declarator"]
  1052 -> 914 [style=dashed label="ptr-abstract-declarator-opt"]
  1052 -> 350 [style=dashed label="ptr-declarator"]
  1052 -> 1052 [style=dashed label="ptr-operator"]
  1052 -> 96 [style=dashed label="simple-template-id"]
  1052 -> 102 [style=dashed label="template-name"]
  1052 -> 106 [style=dashed label="type-name"]
  1052 -> 108 [style=dashed label="typedef-name"]
  1052 -> "1052R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "1052R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  1052 -> "1052R5" [style=solid]
 "1052R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1052 -> "1052R485d" [label="[\"(\"]", style=solid]
 "1052R485d" [label="R485", fillcolor=5, shape=diamond, style=filled]
  1052 -> "1052R485" [label="[\"[\"]", style=solid]
 "1052R485" [label="R485", fillcolor=3, shape=diamond, style=filled]
  1052 -> "1052R589" [label="[\")\"]", style=solid]
 "1052R589" [label="R589", fillcolor=3, shape=diamond, style=filled]
  1053 [label="State 1053\n\l546 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq abstract-declarator-opt \"=\" • initializer-clause\l"]
  1053 -> 238 [style=solid label="IDENTIFIER"]
  1053 -> 239 [style=solid label="\"noexcept\""]
  1053 -> 240 [style=solid label="\"!\""]
  1053 -> 241 [style=solid label="\"::\""]
  1053 -> 242 [style=solid label="\"this\""]
  1053 -> 8 [style=solid label="\"typename\""]
  1053 -> 243 [style=solid label="\"+\""]
  1053 -> 244 [style=solid label="\"-\""]
  1053 -> 245 [style=solid label="\"(\""]
  1053 -> 246 [style=solid label="\"&\""]
  1053 -> 247 [style=solid label="\"[\""]
  1053 -> 248 [style=solid label="\"co_await\""]
  1053 -> 380 [style=solid label="\"{\""]
  1053 -> 249 [style=solid label="\"operator\""]
  1053 -> 21 [style=solid label="\"decltype\""]
  1053 -> 250 [style=solid label="\"*\""]
  1053 -> 251 [style=solid label="\"requires\""]
  1053 -> 252 [style=solid label="\"~\""]
  1053 -> 253 [style=solid label="\"++\""]
  1053 -> 254 [style=solid label="\"--\""]
  1053 -> 255 [style=solid label="\"dynamic_cast\""]
  1053 -> 256 [style=solid label="\"static_cast\""]
  1053 -> 257 [style=solid label="\"reinterpret_cast\""]
  1053 -> 258 [style=solid label="\"const_cast\""]
  1053 -> 259 [style=solid label="\"typeid\""]
  1053 -> 260 [style=solid label="\"literal\""]
  1053 -> 27 [style=solid label="\"char\""]
  1053 -> 28 [style=solid label="\"char8_t\""]
  1053 -> 29 [style=solid label="\"char16_t\""]
  1053 -> 30 [style=solid label="\"char32_t\""]
  1053 -> 31 [style=solid label="\"wchar_t\""]
  1053 -> 32 [style=solid label="\"bool\""]
  1053 -> 33 [style=solid label="\"short\""]
  1053 -> 34 [style=solid label="\"int\""]
  1053 -> 35 [style=solid label="\"long\""]
  1053 -> 36 [style=solid label="\"signed\""]
  1053 -> 37 [style=solid label="\"unsigned\""]
  1053 -> 38 [style=solid label="\"float\""]
  1053 -> 39 [style=solid label="\"double\""]
  1053 -> 40 [style=solid label="\"void\""]
  1053 -> 118 [style=solid label="STRING_LITERAL"]
  1053 -> 261 [style=solid label="\"throw\""]
  1053 -> 262 [style=solid label="\"sizeof\""]
  1053 -> 263 [style=solid label="\"alignof\""]
  1053 -> 264 [style=solid label="\"co_yield\""]
  1053 -> 265 [style=dashed label="SCOPE-opt"]
  1053 -> 266 [style=dashed label="additive-expression"]
  1053 -> 267 [style=dashed label="and-expression"]
  1053 -> 642 [style=dashed label="assignment-expression"]
  1053 -> 269 [style=dashed label="await-expression"]
  1053 -> 643 [style=dashed label="braced-init-list"]
  1053 -> 270 [style=dashed label="cast-expression"]
  1053 -> 55 [style=dashed label="class-name"]
  1053 -> 271 [style=dashed label="compare-expression"]
  1053 -> 272 [style=dashed label="conditional-expression"]
  1053 -> 273 [style=dashed label="conversion-function-id"]
  1053 -> 63 [style=dashed label="decltype-specifier"]
  1053 -> 274 [style=dashed label="delete-expression"]
  1053 -> 71 [style=dashed label="enum-name"]
  1053 -> 275 [style=dashed label="equality-expression"]
  1053 -> 276 [style=dashed label="exclusive-or-expression"]
  1053 -> 278 [style=dashed label="fold-expression"]
  1053 -> 279 [style=dashed label="id-expression"]
  1053 -> 280 [style=dashed label="inclusive-or-expression"]
  1053 -> 1160 [style=dashed label="initializer-clause"]
  1053 -> 281 [style=dashed label="lambda-expression"]
  1053 -> 282 [style=dashed label="lambda-introducer"]
  1053 -> 283 [style=dashed label="literal-operator-id"]
  1053 -> 284 [style=dashed label="logical-and-expression"]
  1053 -> 285 [style=dashed label="logical-or-expression"]
  1053 -> 286 [style=dashed label="multiplicative-expression"]
  1053 -> 85 [style=dashed label="namespace-alias"]
  1053 -> 88 [style=dashed label="namespace-name"]
  1053 -> 287 [style=dashed label="nested-name-specifier"]
  1053 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1053 -> 288 [style=dashed label="new-expression"]
  1053 -> 289 [style=dashed label="noexcept-expression"]
  1053 -> 290 [style=dashed label="operator-function-id"]
  1053 -> 94 [style=dashed label="placeholder-type-specifier"]
  1053 -> 291 [style=dashed label="pm-expression"]
  1053 -> 292 [style=dashed label="postfix-expression"]
  1053 -> 293 [style=dashed label="primary-expression"]
  1053 -> 294 [style=dashed label="qualified-id"]
  1053 -> 295 [style=dashed label="relational-expression"]
  1053 -> 296 [style=dashed label="requires-expression"]
  1053 -> 297 [style=dashed label="shift-expression"]
  1053 -> 298 [style=dashed label="simple-template-id"]
  1053 -> 299 [style=dashed label="simple-type-specifier"]
  1053 -> 300 [style=dashed label="string-literal"]
  1053 -> 301 [style=dashed label="template-id"]
  1053 -> 102 [style=dashed label="template-name"]
  1053 -> 302 [style=dashed label="throw-expression"]
  1053 -> 104 [style=dashed label="type-constraint"]
  1053 -> 105 [style=dashed label="type-constraint-opt"]
  1053 -> 106 [style=dashed label="type-name"]
  1053 -> 108 [style=dashed label="typedef-name"]
  1053 -> 303 [style=dashed label="typename-specifier"]
  1053 -> 304 [style=dashed label="unary-expression"]
  1053 -> 305 [style=dashed label="unary-operator"]
  1053 -> 306 [style=dashed label="unqualified-id"]
  1053 -> 307 [style=dashed label="yield-expression"]
  1053 -> "1053R19" [style=solid]
 "1053R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1053 -> "1053R458d" [label="[IDENTIFIER]", style=solid]
 "1053R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1053 -> "1053R710d" [label="[\"decltype\"]", style=solid]
 "1053R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1053 -> "1053R710" [label="[\"auto\"]", style=solid]
 "1053R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1054 [label="State 1054\n\l544 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq declarator \"=\" • initializer-clause\l"]
  1054 -> 238 [style=solid label="IDENTIFIER"]
  1054 -> 239 [style=solid label="\"noexcept\""]
  1054 -> 240 [style=solid label="\"!\""]
  1054 -> 241 [style=solid label="\"::\""]
  1054 -> 242 [style=solid label="\"this\""]
  1054 -> 8 [style=solid label="\"typename\""]
  1054 -> 243 [style=solid label="\"+\""]
  1054 -> 244 [style=solid label="\"-\""]
  1054 -> 245 [style=solid label="\"(\""]
  1054 -> 246 [style=solid label="\"&\""]
  1054 -> 247 [style=solid label="\"[\""]
  1054 -> 248 [style=solid label="\"co_await\""]
  1054 -> 380 [style=solid label="\"{\""]
  1054 -> 249 [style=solid label="\"operator\""]
  1054 -> 21 [style=solid label="\"decltype\""]
  1054 -> 250 [style=solid label="\"*\""]
  1054 -> 251 [style=solid label="\"requires\""]
  1054 -> 252 [style=solid label="\"~\""]
  1054 -> 253 [style=solid label="\"++\""]
  1054 -> 254 [style=solid label="\"--\""]
  1054 -> 255 [style=solid label="\"dynamic_cast\""]
  1054 -> 256 [style=solid label="\"static_cast\""]
  1054 -> 257 [style=solid label="\"reinterpret_cast\""]
  1054 -> 258 [style=solid label="\"const_cast\""]
  1054 -> 259 [style=solid label="\"typeid\""]
  1054 -> 260 [style=solid label="\"literal\""]
  1054 -> 27 [style=solid label="\"char\""]
  1054 -> 28 [style=solid label="\"char8_t\""]
  1054 -> 29 [style=solid label="\"char16_t\""]
  1054 -> 30 [style=solid label="\"char32_t\""]
  1054 -> 31 [style=solid label="\"wchar_t\""]
  1054 -> 32 [style=solid label="\"bool\""]
  1054 -> 33 [style=solid label="\"short\""]
  1054 -> 34 [style=solid label="\"int\""]
  1054 -> 35 [style=solid label="\"long\""]
  1054 -> 36 [style=solid label="\"signed\""]
  1054 -> 37 [style=solid label="\"unsigned\""]
  1054 -> 38 [style=solid label="\"float\""]
  1054 -> 39 [style=solid label="\"double\""]
  1054 -> 40 [style=solid label="\"void\""]
  1054 -> 118 [style=solid label="STRING_LITERAL"]
  1054 -> 261 [style=solid label="\"throw\""]
  1054 -> 262 [style=solid label="\"sizeof\""]
  1054 -> 263 [style=solid label="\"alignof\""]
  1054 -> 264 [style=solid label="\"co_yield\""]
  1054 -> 265 [style=dashed label="SCOPE-opt"]
  1054 -> 266 [style=dashed label="additive-expression"]
  1054 -> 267 [style=dashed label="and-expression"]
  1054 -> 642 [style=dashed label="assignment-expression"]
  1054 -> 269 [style=dashed label="await-expression"]
  1054 -> 643 [style=dashed label="braced-init-list"]
  1054 -> 270 [style=dashed label="cast-expression"]
  1054 -> 55 [style=dashed label="class-name"]
  1054 -> 271 [style=dashed label="compare-expression"]
  1054 -> 272 [style=dashed label="conditional-expression"]
  1054 -> 273 [style=dashed label="conversion-function-id"]
  1054 -> 63 [style=dashed label="decltype-specifier"]
  1054 -> 274 [style=dashed label="delete-expression"]
  1054 -> 71 [style=dashed label="enum-name"]
  1054 -> 275 [style=dashed label="equality-expression"]
  1054 -> 276 [style=dashed label="exclusive-or-expression"]
  1054 -> 278 [style=dashed label="fold-expression"]
  1054 -> 279 [style=dashed label="id-expression"]
  1054 -> 280 [style=dashed label="inclusive-or-expression"]
  1054 -> 1161 [style=dashed label="initializer-clause"]
  1054 -> 281 [style=dashed label="lambda-expression"]
  1054 -> 282 [style=dashed label="lambda-introducer"]
  1054 -> 283 [style=dashed label="literal-operator-id"]
  1054 -> 284 [style=dashed label="logical-and-expression"]
  1054 -> 285 [style=dashed label="logical-or-expression"]
  1054 -> 286 [style=dashed label="multiplicative-expression"]
  1054 -> 85 [style=dashed label="namespace-alias"]
  1054 -> 88 [style=dashed label="namespace-name"]
  1054 -> 287 [style=dashed label="nested-name-specifier"]
  1054 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1054 -> 288 [style=dashed label="new-expression"]
  1054 -> 289 [style=dashed label="noexcept-expression"]
  1054 -> 290 [style=dashed label="operator-function-id"]
  1054 -> 94 [style=dashed label="placeholder-type-specifier"]
  1054 -> 291 [style=dashed label="pm-expression"]
  1054 -> 292 [style=dashed label="postfix-expression"]
  1054 -> 293 [style=dashed label="primary-expression"]
  1054 -> 294 [style=dashed label="qualified-id"]
  1054 -> 295 [style=dashed label="relational-expression"]
  1054 -> 296 [style=dashed label="requires-expression"]
  1054 -> 297 [style=dashed label="shift-expression"]
  1054 -> 298 [style=dashed label="simple-template-id"]
  1054 -> 299 [style=dashed label="simple-type-specifier"]
  1054 -> 300 [style=dashed label="string-literal"]
  1054 -> 301 [style=dashed label="template-id"]
  1054 -> 102 [style=dashed label="template-name"]
  1054 -> 302 [style=dashed label="throw-expression"]
  1054 -> 104 [style=dashed label="type-constraint"]
  1054 -> 105 [style=dashed label="type-constraint-opt"]
  1054 -> 106 [style=dashed label="type-name"]
  1054 -> 108 [style=dashed label="typedef-name"]
  1054 -> 303 [style=dashed label="typename-specifier"]
  1054 -> 304 [style=dashed label="unary-expression"]
  1054 -> 305 [style=dashed label="unary-operator"]
  1054 -> 306 [style=dashed label="unqualified-id"]
  1054 -> 307 [style=dashed label="yield-expression"]
  1054 -> "1054R19" [style=solid]
 "1054R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1054 -> "1054R458d" [label="[IDENTIFIER]", style=solid]
 "1054R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1054 -> "1054R710d" [label="[\"decltype\"]", style=solid]
 "1054R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1054 -> "1054R710" [label="[\"auto\"]", style=solid]
 "1054R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1055 [label="State 1055\n\l721 type-parameter: template-head type-parameter-key IDENTIFIER-opt \"=\" id-expression •\l"]
  1055 -> "1055R721" [style=solid]
 "1055R721" [label="R721", fillcolor=3, shape=diamond, style=filled]
  1056 [label="State 1056\n\l286 fold-expression: \"(\" \"...\" fold-operator cast-expression \")\" •\l"]
  1056 -> "1056R286" [style=solid]
 "1056R286" [label="R286", fillcolor=3, shape=diamond, style=filled]
  1057 [label="State 1057\n\l285 fold-expression: \"(\" cast-expression fold-operator \"...\" \")\" •\l"]
  1057 -> "1057R285" [style=solid]
 "1057R285" [label="R285", fillcolor=3, shape=diamond, style=filled]
  1058 [label="State 1058\n\l287 fold-expression: \"(\" cast-expression fold-operator \"...\" fold-operator • cast-expression \")\"\l"]
  1058 -> 238 [style=solid label="IDENTIFIER"]
  1058 -> 239 [style=solid label="\"noexcept\""]
  1058 -> 240 [style=solid label="\"!\""]
  1058 -> 241 [style=solid label="\"::\""]
  1058 -> 242 [style=solid label="\"this\""]
  1058 -> 8 [style=solid label="\"typename\""]
  1058 -> 243 [style=solid label="\"+\""]
  1058 -> 244 [style=solid label="\"-\""]
  1058 -> 245 [style=solid label="\"(\""]
  1058 -> 246 [style=solid label="\"&\""]
  1058 -> 247 [style=solid label="\"[\""]
  1058 -> 248 [style=solid label="\"co_await\""]
  1058 -> 249 [style=solid label="\"operator\""]
  1058 -> 21 [style=solid label="\"decltype\""]
  1058 -> 250 [style=solid label="\"*\""]
  1058 -> 251 [style=solid label="\"requires\""]
  1058 -> 252 [style=solid label="\"~\""]
  1058 -> 253 [style=solid label="\"++\""]
  1058 -> 254 [style=solid label="\"--\""]
  1058 -> 255 [style=solid label="\"dynamic_cast\""]
  1058 -> 256 [style=solid label="\"static_cast\""]
  1058 -> 257 [style=solid label="\"reinterpret_cast\""]
  1058 -> 258 [style=solid label="\"const_cast\""]
  1058 -> 259 [style=solid label="\"typeid\""]
  1058 -> 260 [style=solid label="\"literal\""]
  1058 -> 27 [style=solid label="\"char\""]
  1058 -> 28 [style=solid label="\"char8_t\""]
  1058 -> 29 [style=solid label="\"char16_t\""]
  1058 -> 30 [style=solid label="\"char32_t\""]
  1058 -> 31 [style=solid label="\"wchar_t\""]
  1058 -> 32 [style=solid label="\"bool\""]
  1058 -> 33 [style=solid label="\"short\""]
  1058 -> 34 [style=solid label="\"int\""]
  1058 -> 35 [style=solid label="\"long\""]
  1058 -> 36 [style=solid label="\"signed\""]
  1058 -> 37 [style=solid label="\"unsigned\""]
  1058 -> 38 [style=solid label="\"float\""]
  1058 -> 39 [style=solid label="\"double\""]
  1058 -> 40 [style=solid label="\"void\""]
  1058 -> 118 [style=solid label="STRING_LITERAL"]
  1058 -> 262 [style=solid label="\"sizeof\""]
  1058 -> 263 [style=solid label="\"alignof\""]
  1058 -> 265 [style=dashed label="SCOPE-opt"]
  1058 -> 269 [style=dashed label="await-expression"]
  1058 -> 1162 [style=dashed label="cast-expression"]
  1058 -> 55 [style=dashed label="class-name"]
  1058 -> 273 [style=dashed label="conversion-function-id"]
  1058 -> 63 [style=dashed label="decltype-specifier"]
  1058 -> 274 [style=dashed label="delete-expression"]
  1058 -> 71 [style=dashed label="enum-name"]
  1058 -> 278 [style=dashed label="fold-expression"]
  1058 -> 279 [style=dashed label="id-expression"]
  1058 -> 281 [style=dashed label="lambda-expression"]
  1058 -> 282 [style=dashed label="lambda-introducer"]
  1058 -> 283 [style=dashed label="literal-operator-id"]
  1058 -> 85 [style=dashed label="namespace-alias"]
  1058 -> 88 [style=dashed label="namespace-name"]
  1058 -> 287 [style=dashed label="nested-name-specifier"]
  1058 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1058 -> 288 [style=dashed label="new-expression"]
  1058 -> 289 [style=dashed label="noexcept-expression"]
  1058 -> 290 [style=dashed label="operator-function-id"]
  1058 -> 94 [style=dashed label="placeholder-type-specifier"]
  1058 -> 292 [style=dashed label="postfix-expression"]
  1058 -> 293 [style=dashed label="primary-expression"]
  1058 -> 294 [style=dashed label="qualified-id"]
  1058 -> 296 [style=dashed label="requires-expression"]
  1058 -> 298 [style=dashed label="simple-template-id"]
  1058 -> 299 [style=dashed label="simple-type-specifier"]
  1058 -> 300 [style=dashed label="string-literal"]
  1058 -> 301 [style=dashed label="template-id"]
  1058 -> 102 [style=dashed label="template-name"]
  1058 -> 104 [style=dashed label="type-constraint"]
  1058 -> 105 [style=dashed label="type-constraint-opt"]
  1058 -> 106 [style=dashed label="type-name"]
  1058 -> 108 [style=dashed label="typedef-name"]
  1058 -> 303 [style=dashed label="typename-specifier"]
  1058 -> 304 [style=dashed label="unary-expression"]
  1058 -> 305 [style=dashed label="unary-operator"]
  1058 -> 306 [style=dashed label="unqualified-id"]
  1058 -> "1058R19" [style=solid]
 "1058R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1058 -> "1058R458d" [label="[IDENTIFIER]", style=solid]
 "1058R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1058 -> "1058R710d" [label="[\"decltype\"]", style=solid]
 "1058R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1058 -> "1058R710" [label="[\"auto\"]", style=solid]
 "1058R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1059 [label="State 1059\n\l347 init-capture: \"&\" ELLIPSIS-opt IDENTIFIER initializer •\l"]
  1059 -> "1059R347" [style=solid]
 "1059R347" [label="R347", fillcolor=3, shape=diamond, style=filled]
  1060 [label="State 1060\n\l498 operator-function-id: \"operator\" overloadable-operator \"<\" template-argument-list-opt \">\" •\l"]
  1060 -> "1060R498" [style=solid]
 "1060R498" [label="R498", fillcolor=3, shape=diamond, style=filled]
  1061 [label="State 1061\n\l456 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l457                      | nested-name-specifier • TEMPLATE-opt simple-template-id \"::\"\l459 nested-name-specifier-opt: nested-name-specifier •\l733 typename-specifier: \"typename\" nested-name-specifier • IDENTIFIER\l734                   | \"typename\" nested-name-specifier • TEMPLATE-opt simple-template-id\l"]
  1061 -> 229 [style=solid label="IDENTIFIER"]
  1061 -> 230 [style=solid label="\"template\""]
  1061 -> 231 [style=dashed label="TEMPLATE-opt"]
  1061 -> "1061R21d" [label="[IDENTIFIER]", style=solid]
 "1061R21d" [label="R21", fillcolor=5, shape=diamond, style=filled]
  1061 -> "1061R459d" [label="[IDENTIFIER]", style=solid]
 "1061R459d" [label="R459", fillcolor=5, shape=diamond, style=filled]
  1062 [label="State 1062\n\l724 type-requirement: \"typename\" nested-name-specifier-opt • type-name \";\"\l"]
  1062 -> 507 [style=solid label="IDENTIFIER"]
  1062 -> 55 [style=dashed label="class-name"]
  1062 -> 71 [style=dashed label="enum-name"]
  1062 -> 96 [style=dashed label="simple-template-id"]
  1062 -> 102 [style=dashed label="template-name"]
  1062 -> 1163 [style=dashed label="type-name"]
  1062 -> 108 [style=dashed label="typedef-name"]
  1063 [label="State 1063\n\l148 compound-requirement: \"{\" expression • \"}\" NOEXCEPT-opt return-type-requirement-opt \";\"\l278 expression: expression • \",\" assignment-expression\l"]
  1063 -> 534 [style=solid label="\",\""]
  1063 -> 1164 [style=solid label="\"}\""]
  1064 [label="State 1064\n\l130 cast-expression: \"(\" • type-id \")\" cast-expression\l285 fold-expression: \"(\" • cast-expression fold-operator \"...\" \")\"\l286                | \"(\" • \"...\" fold-operator cast-expression \")\"\l287                | \"(\" • cast-expression fold-operator \"...\" fold-operator cast-expression \")\"\l579 primary-expression: \"(\" • expression \")\"\l616 requirement-parameter-list: \"(\" • parameter-declaration-clause \")\"\l"]
  1064 -> 439 [style=solid label="\"...\""]
  1064 -> 238 [style=solid label="IDENTIFIER"]
  1064 -> 239 [style=solid label="\"noexcept\""]
  1064 -> 240 [style=solid label="\"!\""]
  1064 -> 241 [style=solid label="\"::\""]
  1064 -> 242 [style=solid label="\"this\""]
  1064 -> 8 [style=solid label="\"typename\""]
  1064 -> 243 [style=solid label="\"+\""]
  1064 -> 244 [style=solid label="\"-\""]
  1064 -> 245 [style=solid label="\"(\""]
  1064 -> 246 [style=solid label="\"&\""]
  1064 -> 247 [style=solid label="\"[\""]
  1064 -> 248 [style=solid label="\"co_await\""]
  1064 -> 12 [style=solid label="\"class\""]
  1064 -> 13 [style=solid label="\"struct\""]
  1064 -> 14 [style=solid label="\"union\""]
  1064 -> 249 [style=solid label="\"operator\""]
  1064 -> 15 [style=solid label="\"const\""]
  1064 -> 16 [style=solid label="\"volatile\""]
  1064 -> 21 [style=solid label="\"decltype\""]
  1064 -> 125 [style=solid label="\"enum\""]
  1064 -> 250 [style=solid label="\"*\""]
  1064 -> 251 [style=solid label="\"requires\""]
  1064 -> 252 [style=solid label="\"~\""]
  1064 -> 253 [style=solid label="\"++\""]
  1064 -> 254 [style=solid label="\"--\""]
  1064 -> 255 [style=solid label="\"dynamic_cast\""]
  1064 -> 256 [style=solid label="\"static_cast\""]
  1064 -> 257 [style=solid label="\"reinterpret_cast\""]
  1064 -> 258 [style=solid label="\"const_cast\""]
  1064 -> 259 [style=solid label="\"typeid\""]
  1064 -> 260 [style=solid label="\"literal\""]
  1064 -> 27 [style=solid label="\"char\""]
  1064 -> 28 [style=solid label="\"char8_t\""]
  1064 -> 29 [style=solid label="\"char16_t\""]
  1064 -> 30 [style=solid label="\"char32_t\""]
  1064 -> 31 [style=solid label="\"wchar_t\""]
  1064 -> 32 [style=solid label="\"bool\""]
  1064 -> 33 [style=solid label="\"short\""]
  1064 -> 34 [style=solid label="\"int\""]
  1064 -> 35 [style=solid label="\"long\""]
  1064 -> 36 [style=solid label="\"signed\""]
  1064 -> 37 [style=solid label="\"unsigned\""]
  1064 -> 38 [style=solid label="\"float\""]
  1064 -> 39 [style=solid label="\"double\""]
  1064 -> 40 [style=solid label="\"void\""]
  1064 -> 118 [style=solid label="STRING_LITERAL"]
  1064 -> 261 [style=solid label="\"throw\""]
  1064 -> 262 [style=solid label="\"sizeof\""]
  1064 -> 263 [style=solid label="\"alignof\""]
  1064 -> 264 [style=solid label="\"co_yield\""]
  1064 -> 265 [style=dashed label="SCOPE-opt"]
  1064 -> 266 [style=dashed label="additive-expression"]
  1064 -> 267 [style=dashed label="and-expression"]
  1064 -> 268 [style=dashed label="assignment-expression"]
  1064 -> 177 [style=dashed label="attribute-specifier-seq"]
  1064 -> 220 [style=dashed label="attribute-specifier-seq-opt"]
  1064 -> 269 [style=dashed label="await-expression"]
  1064 -> 440 [style=dashed label="cast-expression"]
  1064 -> 406 [style=dashed label="class-key"]
  1064 -> 55 [style=dashed label="class-name"]
  1064 -> 271 [style=dashed label="compare-expression"]
  1064 -> 272 [style=dashed label="conditional-expression"]
  1064 -> 273 [style=dashed label="conversion-function-id"]
  1064 -> 57 [style=dashed label="cv-qualifier"]
  1064 -> 63 [style=dashed label="decltype-specifier"]
  1064 -> 274 [style=dashed label="delete-expression"]
  1064 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1064 -> 67 [style=dashed label="elaborated-type-specifier"]
  1064 -> 71 [style=dashed label="enum-name"]
  1064 -> 275 [style=dashed label="equality-expression"]
  1064 -> 276 [style=dashed label="exclusive-or-expression"]
  1064 -> 441 [style=dashed label="expression"]
  1064 -> 278 [style=dashed label="fold-expression"]
  1064 -> 279 [style=dashed label="id-expression"]
  1064 -> 280 [style=dashed label="inclusive-or-expression"]
  1064 -> 281 [style=dashed label="lambda-expression"]
  1064 -> 282 [style=dashed label="lambda-introducer"]
  1064 -> 283 [style=dashed label="literal-operator-id"]
  1064 -> 284 [style=dashed label="logical-and-expression"]
  1064 -> 285 [style=dashed label="logical-or-expression"]
  1064 -> 286 [style=dashed label="multiplicative-expression"]
  1064 -> 85 [style=dashed label="namespace-alias"]
  1064 -> 88 [style=dashed label="namespace-name"]
  1064 -> 287 [style=dashed label="nested-name-specifier"]
  1064 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1064 -> 288 [style=dashed label="new-expression"]
  1064 -> 289 [style=dashed label="noexcept-expression"]
  1064 -> 290 [style=dashed label="operator-function-id"]
  1064 -> 619 [style=dashed label="parameter-declaration"]
  1064 -> 763 [style=dashed label="parameter-declaration-clause"]
  1064 -> 621 [style=dashed label="parameter-declaration-list"]
  1064 -> 622 [style=dashed label="parameter-declaration-list-opt"]
  1064 -> 94 [style=dashed label="placeholder-type-specifier"]
  1064 -> 291 [style=dashed label="pm-expression"]
  1064 -> 292 [style=dashed label="postfix-expression"]
  1064 -> 293 [style=dashed label="primary-expression"]
  1064 -> 294 [style=dashed label="qualified-id"]
  1064 -> 295 [style=dashed label="relational-expression"]
  1064 -> 296 [style=dashed label="requires-expression"]
  1064 -> 297 [style=dashed label="shift-expression"]
  1064 -> 298 [style=dashed label="simple-template-id"]
  1064 -> 409 [style=dashed label="simple-type-specifier"]
  1064 -> 300 [style=dashed label="string-literal"]
  1064 -> 301 [style=dashed label="template-id"]
  1064 -> 102 [style=dashed label="template-name"]
  1064 -> 302 [style=dashed label="throw-expression"]
  1064 -> 104 [style=dashed label="type-constraint"]
  1064 -> 105 [style=dashed label="type-constraint-opt"]
  1064 -> 442 [style=dashed label="type-id"]
  1064 -> 106 [style=dashed label="type-name"]
  1064 -> 414 [style=dashed label="type-specifier"]
  1064 -> 415 [style=dashed label="type-specifier-seq"]
  1064 -> 108 [style=dashed label="typedef-name"]
  1064 -> 416 [style=dashed label="typename-specifier"]
  1064 -> 304 [style=dashed label="unary-expression"]
  1064 -> 305 [style=dashed label="unary-operator"]
  1064 -> 306 [style=dashed label="unqualified-id"]
  1064 -> 307 [style=dashed label="yield-expression"]
  1064 -> "1064R19" [label="[\"delete\", \"new\"]", style=solid]
 "1064R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1064 -> "1064R83d" [label="[IDENTIFIER, \"::\", \"this\", \"typename\", \"[\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"decltype\", \"enum\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\"]", style=solid]
 "1064R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1064 -> "1064R83" [style=solid]
 "1064R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1064 -> "1064R458d" [label="[IDENTIFIER]", style=solid]
 "1064R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1064 -> "1064R551d" [label="[\"...\"]", style=solid]
 "1064R551d" [label="R551", fillcolor=5, shape=diamond, style=filled]
  1064 -> "1064R551" [label="[\")\"]", style=solid]
 "1064R551" [label="R551", fillcolor=3, shape=diamond, style=filled]
  1064 -> "1064R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1064R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1065 [label="State 1065\n\l461 nested-requirement: \"requires\" constraint-expression • \";\"\l"]
  1065 -> 1165 [style=solid label="\";\""]
  1066 [label="State 1066\n\l643 simple-requirement: expression \";\" •\l"]
  1066 -> "1066R643" [style=solid]
 "1066R643" [label="R643", fillcolor=3, shape=diamond, style=filled]
  1067 [label="State 1067\n\l615 requirement-body: \"{\" requirement-seq \"}\" •\l"]
  1067 -> "1067R615" [style=solid]
 "1067R615" [label="R615", fillcolor=3, shape=diamond, style=filled]
  1068 [label="State 1068\n\l620 requirement-seq: requirement-seq requirement •\l"]
  1068 -> "1068R620" [style=solid]
 "1068R620" [label="R620", fillcolor=3, shape=diamond, style=filled]
  1069 [label="State 1069\n\l570 postfix-expression: \"dynamic_cast\" \"<\" type-id \">\" \"(\" • expression \")\"\l"]
  1069 -> 238 [style=solid label="IDENTIFIER"]
  1069 -> 239 [style=solid label="\"noexcept\""]
  1069 -> 240 [style=solid label="\"!\""]
  1069 -> 241 [style=solid label="\"::\""]
  1069 -> 242 [style=solid label="\"this\""]
  1069 -> 8 [style=solid label="\"typename\""]
  1069 -> 243 [style=solid label="\"+\""]
  1069 -> 244 [style=solid label="\"-\""]
  1069 -> 245 [style=solid label="\"(\""]
  1069 -> 246 [style=solid label="\"&\""]
  1069 -> 247 [style=solid label="\"[\""]
  1069 -> 248 [style=solid label="\"co_await\""]
  1069 -> 249 [style=solid label="\"operator\""]
  1069 -> 21 [style=solid label="\"decltype\""]
  1069 -> 250 [style=solid label="\"*\""]
  1069 -> 251 [style=solid label="\"requires\""]
  1069 -> 252 [style=solid label="\"~\""]
  1069 -> 253 [style=solid label="\"++\""]
  1069 -> 254 [style=solid label="\"--\""]
  1069 -> 255 [style=solid label="\"dynamic_cast\""]
  1069 -> 256 [style=solid label="\"static_cast\""]
  1069 -> 257 [style=solid label="\"reinterpret_cast\""]
  1069 -> 258 [style=solid label="\"const_cast\""]
  1069 -> 259 [style=solid label="\"typeid\""]
  1069 -> 260 [style=solid label="\"literal\""]
  1069 -> 27 [style=solid label="\"char\""]
  1069 -> 28 [style=solid label="\"char8_t\""]
  1069 -> 29 [style=solid label="\"char16_t\""]
  1069 -> 30 [style=solid label="\"char32_t\""]
  1069 -> 31 [style=solid label="\"wchar_t\""]
  1069 -> 32 [style=solid label="\"bool\""]
  1069 -> 33 [style=solid label="\"short\""]
  1069 -> 34 [style=solid label="\"int\""]
  1069 -> 35 [style=solid label="\"long\""]
  1069 -> 36 [style=solid label="\"signed\""]
  1069 -> 37 [style=solid label="\"unsigned\""]
  1069 -> 38 [style=solid label="\"float\""]
  1069 -> 39 [style=solid label="\"double\""]
  1069 -> 40 [style=solid label="\"void\""]
  1069 -> 118 [style=solid label="STRING_LITERAL"]
  1069 -> 261 [style=solid label="\"throw\""]
  1069 -> 262 [style=solid label="\"sizeof\""]
  1069 -> 263 [style=solid label="\"alignof\""]
  1069 -> 264 [style=solid label="\"co_yield\""]
  1069 -> 265 [style=dashed label="SCOPE-opt"]
  1069 -> 266 [style=dashed label="additive-expression"]
  1069 -> 267 [style=dashed label="and-expression"]
  1069 -> 268 [style=dashed label="assignment-expression"]
  1069 -> 269 [style=dashed label="await-expression"]
  1069 -> 270 [style=dashed label="cast-expression"]
  1069 -> 55 [style=dashed label="class-name"]
  1069 -> 271 [style=dashed label="compare-expression"]
  1069 -> 272 [style=dashed label="conditional-expression"]
  1069 -> 273 [style=dashed label="conversion-function-id"]
  1069 -> 63 [style=dashed label="decltype-specifier"]
  1069 -> 274 [style=dashed label="delete-expression"]
  1069 -> 71 [style=dashed label="enum-name"]
  1069 -> 275 [style=dashed label="equality-expression"]
  1069 -> 276 [style=dashed label="exclusive-or-expression"]
  1069 -> 1166 [style=dashed label="expression"]
  1069 -> 278 [style=dashed label="fold-expression"]
  1069 -> 279 [style=dashed label="id-expression"]
  1069 -> 280 [style=dashed label="inclusive-or-expression"]
  1069 -> 281 [style=dashed label="lambda-expression"]
  1069 -> 282 [style=dashed label="lambda-introducer"]
  1069 -> 283 [style=dashed label="literal-operator-id"]
  1069 -> 284 [style=dashed label="logical-and-expression"]
  1069 -> 285 [style=dashed label="logical-or-expression"]
  1069 -> 286 [style=dashed label="multiplicative-expression"]
  1069 -> 85 [style=dashed label="namespace-alias"]
  1069 -> 88 [style=dashed label="namespace-name"]
  1069 -> 287 [style=dashed label="nested-name-specifier"]
  1069 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1069 -> 288 [style=dashed label="new-expression"]
  1069 -> 289 [style=dashed label="noexcept-expression"]
  1069 -> 290 [style=dashed label="operator-function-id"]
  1069 -> 94 [style=dashed label="placeholder-type-specifier"]
  1069 -> 291 [style=dashed label="pm-expression"]
  1069 -> 292 [style=dashed label="postfix-expression"]
  1069 -> 293 [style=dashed label="primary-expression"]
  1069 -> 294 [style=dashed label="qualified-id"]
  1069 -> 295 [style=dashed label="relational-expression"]
  1069 -> 296 [style=dashed label="requires-expression"]
  1069 -> 297 [style=dashed label="shift-expression"]
  1069 -> 298 [style=dashed label="simple-template-id"]
  1069 -> 299 [style=dashed label="simple-type-specifier"]
  1069 -> 300 [style=dashed label="string-literal"]
  1069 -> 301 [style=dashed label="template-id"]
  1069 -> 102 [style=dashed label="template-name"]
  1069 -> 302 [style=dashed label="throw-expression"]
  1069 -> 104 [style=dashed label="type-constraint"]
  1069 -> 105 [style=dashed label="type-constraint-opt"]
  1069 -> 106 [style=dashed label="type-name"]
  1069 -> 108 [style=dashed label="typedef-name"]
  1069 -> 303 [style=dashed label="typename-specifier"]
  1069 -> 304 [style=dashed label="unary-expression"]
  1069 -> 305 [style=dashed label="unary-operator"]
  1069 -> 306 [style=dashed label="unqualified-id"]
  1069 -> 307 [style=dashed label="yield-expression"]
  1069 -> "1069R19" [style=solid]
 "1069R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1069 -> "1069R458d" [label="[IDENTIFIER]", style=solid]
 "1069R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1069 -> "1069R710d" [label="[\"decltype\"]", style=solid]
 "1069R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1069 -> "1069R710" [label="[\"auto\"]", style=solid]
 "1069R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1070 [label="State 1070\n\l571 postfix-expression: \"static_cast\" \"<\" type-id \">\" \"(\" • expression \")\"\l"]
  1070 -> 238 [style=solid label="IDENTIFIER"]
  1070 -> 239 [style=solid label="\"noexcept\""]
  1070 -> 240 [style=solid label="\"!\""]
  1070 -> 241 [style=solid label="\"::\""]
  1070 -> 242 [style=solid label="\"this\""]
  1070 -> 8 [style=solid label="\"typename\""]
  1070 -> 243 [style=solid label="\"+\""]
  1070 -> 244 [style=solid label="\"-\""]
  1070 -> 245 [style=solid label="\"(\""]
  1070 -> 246 [style=solid label="\"&\""]
  1070 -> 247 [style=solid label="\"[\""]
  1070 -> 248 [style=solid label="\"co_await\""]
  1070 -> 249 [style=solid label="\"operator\""]
  1070 -> 21 [style=solid label="\"decltype\""]
  1070 -> 250 [style=solid label="\"*\""]
  1070 -> 251 [style=solid label="\"requires\""]
  1070 -> 252 [style=solid label="\"~\""]
  1070 -> 253 [style=solid label="\"++\""]
  1070 -> 254 [style=solid label="\"--\""]
  1070 -> 255 [style=solid label="\"dynamic_cast\""]
  1070 -> 256 [style=solid label="\"static_cast\""]
  1070 -> 257 [style=solid label="\"reinterpret_cast\""]
  1070 -> 258 [style=solid label="\"const_cast\""]
  1070 -> 259 [style=solid label="\"typeid\""]
  1070 -> 260 [style=solid label="\"literal\""]
  1070 -> 27 [style=solid label="\"char\""]
  1070 -> 28 [style=solid label="\"char8_t\""]
  1070 -> 29 [style=solid label="\"char16_t\""]
  1070 -> 30 [style=solid label="\"char32_t\""]
  1070 -> 31 [style=solid label="\"wchar_t\""]
  1070 -> 32 [style=solid label="\"bool\""]
  1070 -> 33 [style=solid label="\"short\""]
  1070 -> 34 [style=solid label="\"int\""]
  1070 -> 35 [style=solid label="\"long\""]
  1070 -> 36 [style=solid label="\"signed\""]
  1070 -> 37 [style=solid label="\"unsigned\""]
  1070 -> 38 [style=solid label="\"float\""]
  1070 -> 39 [style=solid label="\"double\""]
  1070 -> 40 [style=solid label="\"void\""]
  1070 -> 118 [style=solid label="STRING_LITERAL"]
  1070 -> 261 [style=solid label="\"throw\""]
  1070 -> 262 [style=solid label="\"sizeof\""]
  1070 -> 263 [style=solid label="\"alignof\""]
  1070 -> 264 [style=solid label="\"co_yield\""]
  1070 -> 265 [style=dashed label="SCOPE-opt"]
  1070 -> 266 [style=dashed label="additive-expression"]
  1070 -> 267 [style=dashed label="and-expression"]
  1070 -> 268 [style=dashed label="assignment-expression"]
  1070 -> 269 [style=dashed label="await-expression"]
  1070 -> 270 [style=dashed label="cast-expression"]
  1070 -> 55 [style=dashed label="class-name"]
  1070 -> 271 [style=dashed label="compare-expression"]
  1070 -> 272 [style=dashed label="conditional-expression"]
  1070 -> 273 [style=dashed label="conversion-function-id"]
  1070 -> 63 [style=dashed label="decltype-specifier"]
  1070 -> 274 [style=dashed label="delete-expression"]
  1070 -> 71 [style=dashed label="enum-name"]
  1070 -> 275 [style=dashed label="equality-expression"]
  1070 -> 276 [style=dashed label="exclusive-or-expression"]
  1070 -> 1167 [style=dashed label="expression"]
  1070 -> 278 [style=dashed label="fold-expression"]
  1070 -> 279 [style=dashed label="id-expression"]
  1070 -> 280 [style=dashed label="inclusive-or-expression"]
  1070 -> 281 [style=dashed label="lambda-expression"]
  1070 -> 282 [style=dashed label="lambda-introducer"]
  1070 -> 283 [style=dashed label="literal-operator-id"]
  1070 -> 284 [style=dashed label="logical-and-expression"]
  1070 -> 285 [style=dashed label="logical-or-expression"]
  1070 -> 286 [style=dashed label="multiplicative-expression"]
  1070 -> 85 [style=dashed label="namespace-alias"]
  1070 -> 88 [style=dashed label="namespace-name"]
  1070 -> 287 [style=dashed label="nested-name-specifier"]
  1070 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1070 -> 288 [style=dashed label="new-expression"]
  1070 -> 289 [style=dashed label="noexcept-expression"]
  1070 -> 290 [style=dashed label="operator-function-id"]
  1070 -> 94 [style=dashed label="placeholder-type-specifier"]
  1070 -> 291 [style=dashed label="pm-expression"]
  1070 -> 292 [style=dashed label="postfix-expression"]
  1070 -> 293 [style=dashed label="primary-expression"]
  1070 -> 294 [style=dashed label="qualified-id"]
  1070 -> 295 [style=dashed label="relational-expression"]
  1070 -> 296 [style=dashed label="requires-expression"]
  1070 -> 297 [style=dashed label="shift-expression"]
  1070 -> 298 [style=dashed label="simple-template-id"]
  1070 -> 299 [style=dashed label="simple-type-specifier"]
  1070 -> 300 [style=dashed label="string-literal"]
  1070 -> 301 [style=dashed label="template-id"]
  1070 -> 102 [style=dashed label="template-name"]
  1070 -> 302 [style=dashed label="throw-expression"]
  1070 -> 104 [style=dashed label="type-constraint"]
  1070 -> 105 [style=dashed label="type-constraint-opt"]
  1070 -> 106 [style=dashed label="type-name"]
  1070 -> 108 [style=dashed label="typedef-name"]
  1070 -> 303 [style=dashed label="typename-specifier"]
  1070 -> 304 [style=dashed label="unary-expression"]
  1070 -> 305 [style=dashed label="unary-operator"]
  1070 -> 306 [style=dashed label="unqualified-id"]
  1070 -> 307 [style=dashed label="yield-expression"]
  1070 -> "1070R19" [style=solid]
 "1070R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1070 -> "1070R458d" [label="[IDENTIFIER]", style=solid]
 "1070R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1070 -> "1070R710d" [label="[\"decltype\"]", style=solid]
 "1070R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1070 -> "1070R710" [label="[\"auto\"]", style=solid]
 "1070R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1071 [label="State 1071\n\l572 postfix-expression: \"reinterpret_cast\" \"<\" type-id \">\" \"(\" • expression \")\"\l"]
  1071 -> 238 [style=solid label="IDENTIFIER"]
  1071 -> 239 [style=solid label="\"noexcept\""]
  1071 -> 240 [style=solid label="\"!\""]
  1071 -> 241 [style=solid label="\"::\""]
  1071 -> 242 [style=solid label="\"this\""]
  1071 -> 8 [style=solid label="\"typename\""]
  1071 -> 243 [style=solid label="\"+\""]
  1071 -> 244 [style=solid label="\"-\""]
  1071 -> 245 [style=solid label="\"(\""]
  1071 -> 246 [style=solid label="\"&\""]
  1071 -> 247 [style=solid label="\"[\""]
  1071 -> 248 [style=solid label="\"co_await\""]
  1071 -> 249 [style=solid label="\"operator\""]
  1071 -> 21 [style=solid label="\"decltype\""]
  1071 -> 250 [style=solid label="\"*\""]
  1071 -> 251 [style=solid label="\"requires\""]
  1071 -> 252 [style=solid label="\"~\""]
  1071 -> 253 [style=solid label="\"++\""]
  1071 -> 254 [style=solid label="\"--\""]
  1071 -> 255 [style=solid label="\"dynamic_cast\""]
  1071 -> 256 [style=solid label="\"static_cast\""]
  1071 -> 257 [style=solid label="\"reinterpret_cast\""]
  1071 -> 258 [style=solid label="\"const_cast\""]
  1071 -> 259 [style=solid label="\"typeid\""]
  1071 -> 260 [style=solid label="\"literal\""]
  1071 -> 27 [style=solid label="\"char\""]
  1071 -> 28 [style=solid label="\"char8_t\""]
  1071 -> 29 [style=solid label="\"char16_t\""]
  1071 -> 30 [style=solid label="\"char32_t\""]
  1071 -> 31 [style=solid label="\"wchar_t\""]
  1071 -> 32 [style=solid label="\"bool\""]
  1071 -> 33 [style=solid label="\"short\""]
  1071 -> 34 [style=solid label="\"int\""]
  1071 -> 35 [style=solid label="\"long\""]
  1071 -> 36 [style=solid label="\"signed\""]
  1071 -> 37 [style=solid label="\"unsigned\""]
  1071 -> 38 [style=solid label="\"float\""]
  1071 -> 39 [style=solid label="\"double\""]
  1071 -> 40 [style=solid label="\"void\""]
  1071 -> 118 [style=solid label="STRING_LITERAL"]
  1071 -> 261 [style=solid label="\"throw\""]
  1071 -> 262 [style=solid label="\"sizeof\""]
  1071 -> 263 [style=solid label="\"alignof\""]
  1071 -> 264 [style=solid label="\"co_yield\""]
  1071 -> 265 [style=dashed label="SCOPE-opt"]
  1071 -> 266 [style=dashed label="additive-expression"]
  1071 -> 267 [style=dashed label="and-expression"]
  1071 -> 268 [style=dashed label="assignment-expression"]
  1071 -> 269 [style=dashed label="await-expression"]
  1071 -> 270 [style=dashed label="cast-expression"]
  1071 -> 55 [style=dashed label="class-name"]
  1071 -> 271 [style=dashed label="compare-expression"]
  1071 -> 272 [style=dashed label="conditional-expression"]
  1071 -> 273 [style=dashed label="conversion-function-id"]
  1071 -> 63 [style=dashed label="decltype-specifier"]
  1071 -> 274 [style=dashed label="delete-expression"]
  1071 -> 71 [style=dashed label="enum-name"]
  1071 -> 275 [style=dashed label="equality-expression"]
  1071 -> 276 [style=dashed label="exclusive-or-expression"]
  1071 -> 1168 [style=dashed label="expression"]
  1071 -> 278 [style=dashed label="fold-expression"]
  1071 -> 279 [style=dashed label="id-expression"]
  1071 -> 280 [style=dashed label="inclusive-or-expression"]
  1071 -> 281 [style=dashed label="lambda-expression"]
  1071 -> 282 [style=dashed label="lambda-introducer"]
  1071 -> 283 [style=dashed label="literal-operator-id"]
  1071 -> 284 [style=dashed label="logical-and-expression"]
  1071 -> 285 [style=dashed label="logical-or-expression"]
  1071 -> 286 [style=dashed label="multiplicative-expression"]
  1071 -> 85 [style=dashed label="namespace-alias"]
  1071 -> 88 [style=dashed label="namespace-name"]
  1071 -> 287 [style=dashed label="nested-name-specifier"]
  1071 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1071 -> 288 [style=dashed label="new-expression"]
  1071 -> 289 [style=dashed label="noexcept-expression"]
  1071 -> 290 [style=dashed label="operator-function-id"]
  1071 -> 94 [style=dashed label="placeholder-type-specifier"]
  1071 -> 291 [style=dashed label="pm-expression"]
  1071 -> 292 [style=dashed label="postfix-expression"]
  1071 -> 293 [style=dashed label="primary-expression"]
  1071 -> 294 [style=dashed label="qualified-id"]
  1071 -> 295 [style=dashed label="relational-expression"]
  1071 -> 296 [style=dashed label="requires-expression"]
  1071 -> 297 [style=dashed label="shift-expression"]
  1071 -> 298 [style=dashed label="simple-template-id"]
  1071 -> 299 [style=dashed label="simple-type-specifier"]
  1071 -> 300 [style=dashed label="string-literal"]
  1071 -> 301 [style=dashed label="template-id"]
  1071 -> 102 [style=dashed label="template-name"]
  1071 -> 302 [style=dashed label="throw-expression"]
  1071 -> 104 [style=dashed label="type-constraint"]
  1071 -> 105 [style=dashed label="type-constraint-opt"]
  1071 -> 106 [style=dashed label="type-name"]
  1071 -> 108 [style=dashed label="typedef-name"]
  1071 -> 303 [style=dashed label="typename-specifier"]
  1071 -> 304 [style=dashed label="unary-expression"]
  1071 -> 305 [style=dashed label="unary-operator"]
  1071 -> 306 [style=dashed label="unqualified-id"]
  1071 -> 307 [style=dashed label="yield-expression"]
  1071 -> "1071R19" [style=solid]
 "1071R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1071 -> "1071R458d" [label="[IDENTIFIER]", style=solid]
 "1071R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1071 -> "1071R710d" [label="[\"decltype\"]", style=solid]
 "1071R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1071 -> "1071R710" [label="[\"auto\"]", style=solid]
 "1071R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1072 [label="State 1072\n\l573 postfix-expression: \"const_cast\" \"<\" type-id \">\" \"(\" • expression \")\"\l"]
  1072 -> 238 [style=solid label="IDENTIFIER"]
  1072 -> 239 [style=solid label="\"noexcept\""]
  1072 -> 240 [style=solid label="\"!\""]
  1072 -> 241 [style=solid label="\"::\""]
  1072 -> 242 [style=solid label="\"this\""]
  1072 -> 8 [style=solid label="\"typename\""]
  1072 -> 243 [style=solid label="\"+\""]
  1072 -> 244 [style=solid label="\"-\""]
  1072 -> 245 [style=solid label="\"(\""]
  1072 -> 246 [style=solid label="\"&\""]
  1072 -> 247 [style=solid label="\"[\""]
  1072 -> 248 [style=solid label="\"co_await\""]
  1072 -> 249 [style=solid label="\"operator\""]
  1072 -> 21 [style=solid label="\"decltype\""]
  1072 -> 250 [style=solid label="\"*\""]
  1072 -> 251 [style=solid label="\"requires\""]
  1072 -> 252 [style=solid label="\"~\""]
  1072 -> 253 [style=solid label="\"++\""]
  1072 -> 254 [style=solid label="\"--\""]
  1072 -> 255 [style=solid label="\"dynamic_cast\""]
  1072 -> 256 [style=solid label="\"static_cast\""]
  1072 -> 257 [style=solid label="\"reinterpret_cast\""]
  1072 -> 258 [style=solid label="\"const_cast\""]
  1072 -> 259 [style=solid label="\"typeid\""]
  1072 -> 260 [style=solid label="\"literal\""]
  1072 -> 27 [style=solid label="\"char\""]
  1072 -> 28 [style=solid label="\"char8_t\""]
  1072 -> 29 [style=solid label="\"char16_t\""]
  1072 -> 30 [style=solid label="\"char32_t\""]
  1072 -> 31 [style=solid label="\"wchar_t\""]
  1072 -> 32 [style=solid label="\"bool\""]
  1072 -> 33 [style=solid label="\"short\""]
  1072 -> 34 [style=solid label="\"int\""]
  1072 -> 35 [style=solid label="\"long\""]
  1072 -> 36 [style=solid label="\"signed\""]
  1072 -> 37 [style=solid label="\"unsigned\""]
  1072 -> 38 [style=solid label="\"float\""]
  1072 -> 39 [style=solid label="\"double\""]
  1072 -> 40 [style=solid label="\"void\""]
  1072 -> 118 [style=solid label="STRING_LITERAL"]
  1072 -> 261 [style=solid label="\"throw\""]
  1072 -> 262 [style=solid label="\"sizeof\""]
  1072 -> 263 [style=solid label="\"alignof\""]
  1072 -> 264 [style=solid label="\"co_yield\""]
  1072 -> 265 [style=dashed label="SCOPE-opt"]
  1072 -> 266 [style=dashed label="additive-expression"]
  1072 -> 267 [style=dashed label="and-expression"]
  1072 -> 268 [style=dashed label="assignment-expression"]
  1072 -> 269 [style=dashed label="await-expression"]
  1072 -> 270 [style=dashed label="cast-expression"]
  1072 -> 55 [style=dashed label="class-name"]
  1072 -> 271 [style=dashed label="compare-expression"]
  1072 -> 272 [style=dashed label="conditional-expression"]
  1072 -> 273 [style=dashed label="conversion-function-id"]
  1072 -> 63 [style=dashed label="decltype-specifier"]
  1072 -> 274 [style=dashed label="delete-expression"]
  1072 -> 71 [style=dashed label="enum-name"]
  1072 -> 275 [style=dashed label="equality-expression"]
  1072 -> 276 [style=dashed label="exclusive-or-expression"]
  1072 -> 1169 [style=dashed label="expression"]
  1072 -> 278 [style=dashed label="fold-expression"]
  1072 -> 279 [style=dashed label="id-expression"]
  1072 -> 280 [style=dashed label="inclusive-or-expression"]
  1072 -> 281 [style=dashed label="lambda-expression"]
  1072 -> 282 [style=dashed label="lambda-introducer"]
  1072 -> 283 [style=dashed label="literal-operator-id"]
  1072 -> 284 [style=dashed label="logical-and-expression"]
  1072 -> 285 [style=dashed label="logical-or-expression"]
  1072 -> 286 [style=dashed label="multiplicative-expression"]
  1072 -> 85 [style=dashed label="namespace-alias"]
  1072 -> 88 [style=dashed label="namespace-name"]
  1072 -> 287 [style=dashed label="nested-name-specifier"]
  1072 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1072 -> 288 [style=dashed label="new-expression"]
  1072 -> 289 [style=dashed label="noexcept-expression"]
  1072 -> 290 [style=dashed label="operator-function-id"]
  1072 -> 94 [style=dashed label="placeholder-type-specifier"]
  1072 -> 291 [style=dashed label="pm-expression"]
  1072 -> 292 [style=dashed label="postfix-expression"]
  1072 -> 293 [style=dashed label="primary-expression"]
  1072 -> 294 [style=dashed label="qualified-id"]
  1072 -> 295 [style=dashed label="relational-expression"]
  1072 -> 296 [style=dashed label="requires-expression"]
  1072 -> 297 [style=dashed label="shift-expression"]
  1072 -> 298 [style=dashed label="simple-template-id"]
  1072 -> 299 [style=dashed label="simple-type-specifier"]
  1072 -> 300 [style=dashed label="string-literal"]
  1072 -> 301 [style=dashed label="template-id"]
  1072 -> 102 [style=dashed label="template-name"]
  1072 -> 302 [style=dashed label="throw-expression"]
  1072 -> 104 [style=dashed label="type-constraint"]
  1072 -> 105 [style=dashed label="type-constraint-opt"]
  1072 -> 106 [style=dashed label="type-name"]
  1072 -> 108 [style=dashed label="typedef-name"]
  1072 -> 303 [style=dashed label="typename-specifier"]
  1072 -> 304 [style=dashed label="unary-expression"]
  1072 -> 305 [style=dashed label="unary-operator"]
  1072 -> 306 [style=dashed label="unqualified-id"]
  1072 -> 307 [style=dashed label="yield-expression"]
  1072 -> "1072R19" [style=solid]
 "1072R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1072 -> "1072R458d" [label="[IDENTIFIER]", style=solid]
 "1072R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1072 -> "1072R710d" [label="[\"decltype\"]", style=solid]
 "1072R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1072 -> "1072R710" [label="[\"auto\"]", style=solid]
 "1072R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1073 [label="State 1073\n\l743 unary-expression: \"sizeof\" \"...\" \"(\" IDENTIFIER \")\" •\l"]
  1073 -> "1073R743" [style=solid]
 "1073R743" [label="R743", fillcolor=3, shape=diamond, style=filled]
  1074 [label="State 1074\n\l223 delete-expression: SCOPE-opt \"delete\" \"[\" \"]\" cast-expression •\l"]
  1074 -> "1074R223" [style=solid]
 "1074R223" [label="R223", fillcolor=3, shape=diamond, style=filled]
  1075 [label="State 1075\n\l472 new-placement: \"(\" expression-list \")\" •\l"]
  1075 -> "1075R472" [style=solid]
 "1075R472" [label="R472", fillcolor=3, shape=diamond, style=filled]
  1076 [label="State 1076\n\l467 new-expression: SCOPE-opt \"new\" new-placement-opt \"(\" type-id • \")\" new-initializer-opt\l"]
  1076 -> 1170 [style=solid label="\")\""]
  1077 [label="State 1077\n\l468 new-initializer: \"(\" • expression-list-opt \")\"\l"]
  1077 -> 238 [style=solid label="IDENTIFIER"]
  1077 -> 239 [style=solid label="\"noexcept\""]
  1077 -> 240 [style=solid label="\"!\""]
  1077 -> 241 [style=solid label="\"::\""]
  1077 -> 242 [style=solid label="\"this\""]
  1077 -> 8 [style=solid label="\"typename\""]
  1077 -> 243 [style=solid label="\"+\""]
  1077 -> 244 [style=solid label="\"-\""]
  1077 -> 245 [style=solid label="\"(\""]
  1077 -> 246 [style=solid label="\"&\""]
  1077 -> 247 [style=solid label="\"[\""]
  1077 -> 248 [style=solid label="\"co_await\""]
  1077 -> 380 [style=solid label="\"{\""]
  1077 -> 249 [style=solid label="\"operator\""]
  1077 -> 21 [style=solid label="\"decltype\""]
  1077 -> 250 [style=solid label="\"*\""]
  1077 -> 251 [style=solid label="\"requires\""]
  1077 -> 252 [style=solid label="\"~\""]
  1077 -> 253 [style=solid label="\"++\""]
  1077 -> 254 [style=solid label="\"--\""]
  1077 -> 255 [style=solid label="\"dynamic_cast\""]
  1077 -> 256 [style=solid label="\"static_cast\""]
  1077 -> 257 [style=solid label="\"reinterpret_cast\""]
  1077 -> 258 [style=solid label="\"const_cast\""]
  1077 -> 259 [style=solid label="\"typeid\""]
  1077 -> 260 [style=solid label="\"literal\""]
  1077 -> 27 [style=solid label="\"char\""]
  1077 -> 28 [style=solid label="\"char8_t\""]
  1077 -> 29 [style=solid label="\"char16_t\""]
  1077 -> 30 [style=solid label="\"char32_t\""]
  1077 -> 31 [style=solid label="\"wchar_t\""]
  1077 -> 32 [style=solid label="\"bool\""]
  1077 -> 33 [style=solid label="\"short\""]
  1077 -> 34 [style=solid label="\"int\""]
  1077 -> 35 [style=solid label="\"long\""]
  1077 -> 36 [style=solid label="\"signed\""]
  1077 -> 37 [style=solid label="\"unsigned\""]
  1077 -> 38 [style=solid label="\"float\""]
  1077 -> 39 [style=solid label="\"double\""]
  1077 -> 40 [style=solid label="\"void\""]
  1077 -> 118 [style=solid label="STRING_LITERAL"]
  1077 -> 261 [style=solid label="\"throw\""]
  1077 -> 262 [style=solid label="\"sizeof\""]
  1077 -> 263 [style=solid label="\"alignof\""]
  1077 -> 264 [style=solid label="\"co_yield\""]
  1077 -> 265 [style=dashed label="SCOPE-opt"]
  1077 -> 266 [style=dashed label="additive-expression"]
  1077 -> 267 [style=dashed label="and-expression"]
  1077 -> 642 [style=dashed label="assignment-expression"]
  1077 -> 269 [style=dashed label="await-expression"]
  1077 -> 643 [style=dashed label="braced-init-list"]
  1077 -> 270 [style=dashed label="cast-expression"]
  1077 -> 55 [style=dashed label="class-name"]
  1077 -> 271 [style=dashed label="compare-expression"]
  1077 -> 272 [style=dashed label="conditional-expression"]
  1077 -> 273 [style=dashed label="conversion-function-id"]
  1077 -> 63 [style=dashed label="decltype-specifier"]
  1077 -> 274 [style=dashed label="delete-expression"]
  1077 -> 71 [style=dashed label="enum-name"]
  1077 -> 275 [style=dashed label="equality-expression"]
  1077 -> 276 [style=dashed label="exclusive-or-expression"]
  1077 -> 810 [style=dashed label="expression-list"]
  1077 -> 1171 [style=dashed label="expression-list-opt"]
  1077 -> 278 [style=dashed label="fold-expression"]
  1077 -> 279 [style=dashed label="id-expression"]
  1077 -> 280 [style=dashed label="inclusive-or-expression"]
  1077 -> 646 [style=dashed label="initializer-clause"]
  1077 -> 647 [style=dashed label="initializer-list"]
  1077 -> 281 [style=dashed label="lambda-expression"]
  1077 -> 282 [style=dashed label="lambda-introducer"]
  1077 -> 283 [style=dashed label="literal-operator-id"]
  1077 -> 284 [style=dashed label="logical-and-expression"]
  1077 -> 285 [style=dashed label="logical-or-expression"]
  1077 -> 286 [style=dashed label="multiplicative-expression"]
  1077 -> 85 [style=dashed label="namespace-alias"]
  1077 -> 88 [style=dashed label="namespace-name"]
  1077 -> 287 [style=dashed label="nested-name-specifier"]
  1077 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1077 -> 288 [style=dashed label="new-expression"]
  1077 -> 289 [style=dashed label="noexcept-expression"]
  1077 -> 290 [style=dashed label="operator-function-id"]
  1077 -> 94 [style=dashed label="placeholder-type-specifier"]
  1077 -> 291 [style=dashed label="pm-expression"]
  1077 -> 292 [style=dashed label="postfix-expression"]
  1077 -> 293 [style=dashed label="primary-expression"]
  1077 -> 294 [style=dashed label="qualified-id"]
  1077 -> 295 [style=dashed label="relational-expression"]
  1077 -> 296 [style=dashed label="requires-expression"]
  1077 -> 297 [style=dashed label="shift-expression"]
  1077 -> 298 [style=dashed label="simple-template-id"]
  1077 -> 299 [style=dashed label="simple-type-specifier"]
  1077 -> 300 [style=dashed label="string-literal"]
  1077 -> 301 [style=dashed label="template-id"]
  1077 -> 102 [style=dashed label="template-name"]
  1077 -> 302 [style=dashed label="throw-expression"]
  1077 -> 104 [style=dashed label="type-constraint"]
  1077 -> 105 [style=dashed label="type-constraint-opt"]
  1077 -> 106 [style=dashed label="type-name"]
  1077 -> 108 [style=dashed label="typedef-name"]
  1077 -> 303 [style=dashed label="typename-specifier"]
  1077 -> 304 [style=dashed label="unary-expression"]
  1077 -> 305 [style=dashed label="unary-operator"]
  1077 -> 306 [style=dashed label="unqualified-id"]
  1077 -> 307 [style=dashed label="yield-expression"]
  1077 -> "1077R19" [style=solid]
 "1077R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1077 -> "1077R280" [label="[\")\"]", style=solid]
 "1077R280" [label="R280", fillcolor=3, shape=diamond, style=filled]
  1077 -> "1077R458d" [label="[IDENTIFIER]", style=solid]
 "1077R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1077 -> "1077R710d" [label="[\"decltype\"]", style=solid]
 "1077R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1077 -> "1077R710" [label="[\"auto\"]", style=solid]
 "1077R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1078 [label="State 1078\n\l469 new-initializer: braced-init-list •\l"]
  1078 -> "1078R469" [style=solid]
 "1078R469" [label="R469", fillcolor=3, shape=diamond, style=filled]
  1079 [label="State 1079\n\l471 new-initializer-opt: new-initializer •\l"]
  1079 -> "1079R471" [style=solid]
 "1079R471" [label="R471", fillcolor=3, shape=diamond, style=filled]
  1080 [label="State 1080\n\l466 new-expression: SCOPE-opt \"new\" new-placement-opt new-type-id new-initializer-opt •\l"]
  1080 -> "1080R466" [style=solid]
 "1080R466" [label="R466", fillcolor=3, shape=diamond, style=filled]
  1081 [label="State 1081\n\l494 noptr-new-declarator: \"[\" • expression-opt \"]\" attribute-specifier-seq-opt\l"]
  1081 -> 238 [style=solid label="IDENTIFIER"]
  1081 -> 239 [style=solid label="\"noexcept\""]
  1081 -> 240 [style=solid label="\"!\""]
  1081 -> 241 [style=solid label="\"::\""]
  1081 -> 242 [style=solid label="\"this\""]
  1081 -> 8 [style=solid label="\"typename\""]
  1081 -> 243 [style=solid label="\"+\""]
  1081 -> 244 [style=solid label="\"-\""]
  1081 -> 245 [style=solid label="\"(\""]
  1081 -> 246 [style=solid label="\"&\""]
  1081 -> 247 [style=solid label="\"[\""]
  1081 -> 248 [style=solid label="\"co_await\""]
  1081 -> 249 [style=solid label="\"operator\""]
  1081 -> 21 [style=solid label="\"decltype\""]
  1081 -> 250 [style=solid label="\"*\""]
  1081 -> 251 [style=solid label="\"requires\""]
  1081 -> 252 [style=solid label="\"~\""]
  1081 -> 253 [style=solid label="\"++\""]
  1081 -> 254 [style=solid label="\"--\""]
  1081 -> 255 [style=solid label="\"dynamic_cast\""]
  1081 -> 256 [style=solid label="\"static_cast\""]
  1081 -> 257 [style=solid label="\"reinterpret_cast\""]
  1081 -> 258 [style=solid label="\"const_cast\""]
  1081 -> 259 [style=solid label="\"typeid\""]
  1081 -> 260 [style=solid label="\"literal\""]
  1081 -> 27 [style=solid label="\"char\""]
  1081 -> 28 [style=solid label="\"char8_t\""]
  1081 -> 29 [style=solid label="\"char16_t\""]
  1081 -> 30 [style=solid label="\"char32_t\""]
  1081 -> 31 [style=solid label="\"wchar_t\""]
  1081 -> 32 [style=solid label="\"bool\""]
  1081 -> 33 [style=solid label="\"short\""]
  1081 -> 34 [style=solid label="\"int\""]
  1081 -> 35 [style=solid label="\"long\""]
  1081 -> 36 [style=solid label="\"signed\""]
  1081 -> 37 [style=solid label="\"unsigned\""]
  1081 -> 38 [style=solid label="\"float\""]
  1081 -> 39 [style=solid label="\"double\""]
  1081 -> 40 [style=solid label="\"void\""]
  1081 -> 118 [style=solid label="STRING_LITERAL"]
  1081 -> 261 [style=solid label="\"throw\""]
  1081 -> 262 [style=solid label="\"sizeof\""]
  1081 -> 263 [style=solid label="\"alignof\""]
  1081 -> 264 [style=solid label="\"co_yield\""]
  1081 -> 265 [style=dashed label="SCOPE-opt"]
  1081 -> 266 [style=dashed label="additive-expression"]
  1081 -> 267 [style=dashed label="and-expression"]
  1081 -> 268 [style=dashed label="assignment-expression"]
  1081 -> 269 [style=dashed label="await-expression"]
  1081 -> 270 [style=dashed label="cast-expression"]
  1081 -> 55 [style=dashed label="class-name"]
  1081 -> 271 [style=dashed label="compare-expression"]
  1081 -> 272 [style=dashed label="conditional-expression"]
  1081 -> 273 [style=dashed label="conversion-function-id"]
  1081 -> 63 [style=dashed label="decltype-specifier"]
  1081 -> 274 [style=dashed label="delete-expression"]
  1081 -> 71 [style=dashed label="enum-name"]
  1081 -> 275 [style=dashed label="equality-expression"]
  1081 -> 276 [style=dashed label="exclusive-or-expression"]
  1081 -> 1110 [style=dashed label="expression"]
  1081 -> 1172 [style=dashed label="expression-opt"]
  1081 -> 278 [style=dashed label="fold-expression"]
  1081 -> 279 [style=dashed label="id-expression"]
  1081 -> 280 [style=dashed label="inclusive-or-expression"]
  1081 -> 281 [style=dashed label="lambda-expression"]
  1081 -> 282 [style=dashed label="lambda-introducer"]
  1081 -> 283 [style=dashed label="literal-operator-id"]
  1081 -> 284 [style=dashed label="logical-and-expression"]
  1081 -> 285 [style=dashed label="logical-or-expression"]
  1081 -> 286 [style=dashed label="multiplicative-expression"]
  1081 -> 85 [style=dashed label="namespace-alias"]
  1081 -> 88 [style=dashed label="namespace-name"]
  1081 -> 287 [style=dashed label="nested-name-specifier"]
  1081 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1081 -> 288 [style=dashed label="new-expression"]
  1081 -> 289 [style=dashed label="noexcept-expression"]
  1081 -> 290 [style=dashed label="operator-function-id"]
  1081 -> 94 [style=dashed label="placeholder-type-specifier"]
  1081 -> 291 [style=dashed label="pm-expression"]
  1081 -> 292 [style=dashed label="postfix-expression"]
  1081 -> 293 [style=dashed label="primary-expression"]
  1081 -> 294 [style=dashed label="qualified-id"]
  1081 -> 295 [style=dashed label="relational-expression"]
  1081 -> 296 [style=dashed label="requires-expression"]
  1081 -> 297 [style=dashed label="shift-expression"]
  1081 -> 298 [style=dashed label="simple-template-id"]
  1081 -> 299 [style=dashed label="simple-type-specifier"]
  1081 -> 300 [style=dashed label="string-literal"]
  1081 -> 301 [style=dashed label="template-id"]
  1081 -> 102 [style=dashed label="template-name"]
  1081 -> 302 [style=dashed label="throw-expression"]
  1081 -> 104 [style=dashed label="type-constraint"]
  1081 -> 105 [style=dashed label="type-constraint-opt"]
  1081 -> 106 [style=dashed label="type-name"]
  1081 -> 108 [style=dashed label="typedef-name"]
  1081 -> 303 [style=dashed label="typename-specifier"]
  1081 -> 304 [style=dashed label="unary-expression"]
  1081 -> 305 [style=dashed label="unary-operator"]
  1081 -> 306 [style=dashed label="unqualified-id"]
  1081 -> 307 [style=dashed label="yield-expression"]
  1081 -> "1081R19" [style=solid]
 "1081R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1081 -> "1081R282" [label="[\"]\"]", style=solid]
 "1081R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  1081 -> "1081R458d" [label="[IDENTIFIER]", style=solid]
 "1081R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1081 -> "1081R710d" [label="[\"decltype\"]", style=solid]
 "1081R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1081 -> "1081R710" [label="[\"auto\"]", style=solid]
 "1081R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1082 [label="State 1082\n\l465 new-declarator-opt: new-declarator •\l"]
  1082 -> "1082R465" [style=solid]
 "1082R465" [label="R465", fillcolor=3, shape=diamond, style=filled]
  1083 [label="State 1083\n\l475 new-type-id: type-specifier-seq new-declarator-opt •\l"]
  1083 -> "1083R475" [style=solid]
 "1083R475" [label="R475", fillcolor=3, shape=diamond, style=filled]
  1084 [label="State 1084\n\l463 new-declarator: noptr-new-declarator •\l495 noptr-new-declarator: noptr-new-declarator • \"[\" constant-expression \"]\" attribute-specifier-seq-opt\l"]
  1084 -> 1173 [style=solid label="\"[\""]
  1084 -> "1084R463" [style=solid]
 "1084R463" [label="R463", fillcolor=3, shape=diamond, style=filled]
  1085 [label="State 1085\n\l462 new-declarator: ptr-operator • new-declarator-opt\l"]
  1085 -> 4 [style=solid label="IDENTIFIER"]
  1085 -> 6 [style=solid label="\"::\""]
  1085 -> 160 [style=solid label="\"&\""]
  1085 -> 1081 [style=solid label="\"[\""]
  1085 -> 163 [style=solid label="\"&&\""]
  1085 -> 21 [style=solid label="\"decltype\""]
  1085 -> 164 [style=solid label="\"*\""]
  1085 -> 55 [style=dashed label="class-name"]
  1085 -> 121 [style=dashed label="decltype-specifier"]
  1085 -> 71 [style=dashed label="enum-name"]
  1085 -> 85 [style=dashed label="namespace-alias"]
  1085 -> 88 [style=dashed label="namespace-name"]
  1085 -> 187 [style=dashed label="nested-name-specifier"]
  1085 -> 1082 [style=dashed label="new-declarator"]
  1085 -> 1174 [style=dashed label="new-declarator-opt"]
  1085 -> 1084 [style=dashed label="noptr-new-declarator"]
  1085 -> 1085 [style=dashed label="ptr-operator"]
  1085 -> 96 [style=dashed label="simple-template-id"]
  1085 -> 102 [style=dashed label="template-name"]
  1085 -> 106 [style=dashed label="type-name"]
  1085 -> 108 [style=dashed label="typedef-name"]
  1085 -> "1085R464d" [label="[\"&\", \"&&\", \"*\"]", style=solid]
 "1085R464d" [label="R464", fillcolor=5, shape=diamond, style=filled]
  1085 -> "1085R464" [style=solid]
 "1085R464" [label="R464", fillcolor=3, shape=diamond, style=filled]
  1086 [label="State 1086\n\l385 lambda-declarator: \"(\" parameter-declaration-clause \")\" lambda-specifiers • requires-clause-opt\l"]
  1086 -> 381 [style=solid label="\"requires\""]
  1086 -> 698 [style=dashed label="requires-clause"]
  1086 -> 1175 [style=dashed label="requires-clause-opt"]
  1086 -> "1086R622" [style=solid]
 "1086R622" [label="R622", fillcolor=3, shape=diamond, style=filled]
  1087 [label="State 1087\n\l387 lambda-expression: lambda-introducer \"<\" template-parameter-list \">\" requires-clause-opt • lambda-declarator compound-statement\l"]
  1087 -> 1 [style=solid label="\"constexpr\""]
  1087 -> 150 [style=solid label="\"extern\""]
  1087 -> 4 [style=solid label="IDENTIFIER"]
  1087 -> 151 [style=solid label="\"inline\""]
  1087 -> 6 [style=solid label="\"::\""]
  1087 -> 8 [style=solid label="\"typename\""]
  1087 -> 9 [style=solid label="\"virtual\""]
  1087 -> 537 [style=solid label="\"(\""]
  1087 -> 12 [style=solid label="\"class\""]
  1087 -> 13 [style=solid label="\"struct\""]
  1087 -> 14 [style=solid label="\"union\""]
  1087 -> 15 [style=solid label="\"const\""]
  1087 -> 16 [style=solid label="\"volatile\""]
  1087 -> 17 [style=solid label="\"friend\""]
  1087 -> 18 [style=solid label="\"typedef\""]
  1087 -> 19 [style=solid label="\"consteval\""]
  1087 -> 20 [style=solid label="\"constinit\""]
  1087 -> 21 [style=solid label="\"decltype\""]
  1087 -> 22 [style=solid label="\"enum\""]
  1087 -> 23 [style=solid label="\"explicit\""]
  1087 -> 27 [style=solid label="\"char\""]
  1087 -> 28 [style=solid label="\"char8_t\""]
  1087 -> 29 [style=solid label="\"char16_t\""]
  1087 -> 30 [style=solid label="\"char32_t\""]
  1087 -> 31 [style=solid label="\"wchar_t\""]
  1087 -> 32 [style=solid label="\"bool\""]
  1087 -> 33 [style=solid label="\"short\""]
  1087 -> 34 [style=solid label="\"int\""]
  1087 -> 35 [style=solid label="\"long\""]
  1087 -> 36 [style=solid label="\"signed\""]
  1087 -> 37 [style=solid label="\"unsigned\""]
  1087 -> 38 [style=solid label="\"float\""]
  1087 -> 39 [style=solid label="\"double\""]
  1087 -> 40 [style=solid label="\"void\""]
  1087 -> 42 [style=solid label="\"static\""]
  1087 -> 43 [style=solid label="\"thread_local\""]
  1087 -> 44 [style=solid label="\"mutable\""]
  1087 -> 53 [style=dashed label="class-head"]
  1087 -> 54 [style=dashed label="class-key"]
  1087 -> 55 [style=dashed label="class-name"]
  1087 -> 56 [style=dashed label="class-specifier"]
  1087 -> 57 [style=dashed label="cv-qualifier"]
  1087 -> 58 [style=dashed label="decl-specifier"]
  1087 -> 539 [style=dashed label="decl-specifier-seq"]
  1087 -> 540 [style=dashed label="decl-specifier-seq-opt"]
  1087 -> 63 [style=dashed label="decltype-specifier"]
  1087 -> 65 [style=dashed label="defining-type-specifier"]
  1087 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1087 -> 67 [style=dashed label="elaborated-type-specifier"]
  1087 -> 69 [style=dashed label="enum-head"]
  1087 -> 154 [style=dashed label="enum-key"]
  1087 -> 71 [style=dashed label="enum-name"]
  1087 -> 72 [style=dashed label="enum-specifier"]
  1087 -> 155 [style=dashed label="explicit-specifier"]
  1087 -> 79 [style=dashed label="function-specifier"]
  1087 -> 1176 [style=dashed label="lambda-declarator"]
  1087 -> 542 [style=dashed label="lambda-specifiers"]
  1087 -> 85 [style=dashed label="namespace-alias"]
  1087 -> 88 [style=dashed label="namespace-name"]
  1087 -> 89 [style=dashed label="nested-name-specifier"]
  1087 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1087 -> 94 [style=dashed label="placeholder-type-specifier"]
  1087 -> 96 [style=dashed label="simple-template-id"]
  1087 -> 97 [style=dashed label="simple-type-specifier"]
  1087 -> 99 [style=dashed label="storage-class-specifier"]
  1087 -> 102 [style=dashed label="template-name"]
  1087 -> 104 [style=dashed label="type-constraint"]
  1087 -> 105 [style=dashed label="type-constraint-opt"]
  1087 -> 106 [style=dashed label="type-name"]
  1087 -> 107 [style=dashed label="type-specifier"]
  1087 -> 108 [style=dashed label="typedef-name"]
  1087 -> 109 [style=dashed label="typename-specifier"]
  1087 -> "1087R191" [style=solid]
 "1087R191" [label="R191", fillcolor=3, shape=diamond, style=filled]
  1087 -> "1087R458d" [label="[IDENTIFIER]", style=solid]
 "1087R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1087 -> "1087R710d" [label="[\"decltype\"]", style=solid]
 "1087R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1087 -> "1087R710" [label="[\"auto\"]", style=solid]
 "1087R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1088 [label="State 1088\n\l478 noexcept-specifier: \"noexcept\" \"(\" constant-expression • \")\"\l"]
  1088 -> 1177 [style=solid label="\")\""]
  1089 [label="State 1089\n\l704 trailing-return-type-opt: trailing-return-type •\l"]
  1089 -> "1089R704" [style=solid]
 "1089R704" [label="R704", fillcolor=3, shape=diamond, style=filled]
  1090 [label="State 1090\n\l389 lambda-specifiers: decl-specifier-seq-opt noexcept-specifier-opt attribute-specifier-seq-opt trailing-return-type-opt •\l"]
  1090 -> "1090R389" [style=solid]
 "1090R389" [label="R389", fillcolor=3, shape=diamond, style=filled]
  1091 [label="State 1091\n\l445 namespace-alias-definition: \"namespace\" IDENTIFIER • \"=\" qualified-namespace-specifier \";\"\l"]
  1091 -> 320 [style=solid label="\"=\""]
  1092 [label="State 1092\n\l137 class-name: IDENTIFIER •\l246 enum-name: IDENTIFIER •\l376 labeled-statement: attribute-specifier-seq-opt IDENTIFIER • \":\" statement\l444 namespace-alias: IDENTIFIER •\l450 namespace-name: IDENTIFIER •\l696 template-name: IDENTIFIER •\l731 typedef-name: IDENTIFIER •\l755 unqualified-id: IDENTIFIER •\l"]
  1092 -> 1178 [style=solid label="\":\""]
  1092 -> "1092R137" [label="[\"::\"]", style=solid]
 "1092R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  1092 -> "1092R246d" [label="[\"::\"]", style=solid]
 "1092R246d" [label="R246", fillcolor=5, shape=diamond, style=filled]
  1092 -> "1092R444d" [label="[\"::\"]", style=solid]
 "1092R444d" [label="R444", fillcolor=5, shape=diamond, style=filled]
  1092 -> "1092R450d" [label="[\"::\"]", style=solid]
 "1092R450d" [label="R450", fillcolor=5, shape=diamond, style=filled]
  1092 -> "1092R696" [label="[\"<\"]", style=solid]
 "1092R696" [label="R696", fillcolor=3, shape=diamond, style=filled]
  1092 -> "1092R731d" [label="[\"::\"]", style=solid]
 "1092R731d" [label="R731", fillcolor=5, shape=diamond, style=filled]
  1092 -> "1092R755d" [label="[\"<\"]", style=solid]
 "1092R755d" [label="R755", fillcolor=5, shape=diamond, style=filled]
  1092 -> "1092R755" [label="[]", style=solid]
 "1092R755" [label="R755", fillcolor=3, shape=diamond, style=filled]
  1093 [label="State 1093\n\l 80 attribute-specifier: \"[\" • \"[\" attribute-using-prefix-opt attribute-list \"]\" \"]\"\l388 lambda-introducer: \"[\" • lambda-capture-opt \"]\"\l"]
  1093 -> 156 [style=solid label="\"...\""]
  1093 -> 443 [style=solid label="IDENTIFIER"]
  1093 -> 444 [style=solid label="\"this\""]
  1093 -> 445 [style=solid label="\"=\""]
  1093 -> 446 [style=solid label="\"&\""]
  1093 -> 333 [style=solid label="\"[\""]
  1093 -> 447 [style=solid label="\"*\""]
  1093 -> 448 [style=dashed label="ELLIPSIS-opt"]
  1093 -> 449 [style=dashed label="capture"]
  1093 -> 450 [style=dashed label="capture-default"]
  1093 -> 451 [style=dashed label="capture-list"]
  1093 -> 452 [style=dashed label="init-capture"]
  1093 -> 453 [style=dashed label="lambda-capture"]
  1093 -> 454 [style=dashed label="lambda-capture-opt"]
  1093 -> 455 [style=dashed label="simple-capture"]
  1093 -> "1093R5d" [label="[IDENTIFIER]", style=solid]
 "1093R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  1093 -> "1093R382" [label="[]", style=solid]
 "1093R382" [label="R382", fillcolor=3, shape=diamond, style=filled]
  1094 [label="State 1094\n\l171 coroutine-return-statement: \"co_return\" • expr-or-braced-init-list-opt \";\"\l"]
  1094 -> 238 [style=solid label="IDENTIFIER"]
  1094 -> 239 [style=solid label="\"noexcept\""]
  1094 -> 240 [style=solid label="\"!\""]
  1094 -> 241 [style=solid label="\"::\""]
  1094 -> 242 [style=solid label="\"this\""]
  1094 -> 8 [style=solid label="\"typename\""]
  1094 -> 243 [style=solid label="\"+\""]
  1094 -> 244 [style=solid label="\"-\""]
  1094 -> 245 [style=solid label="\"(\""]
  1094 -> 246 [style=solid label="\"&\""]
  1094 -> 247 [style=solid label="\"[\""]
  1094 -> 248 [style=solid label="\"co_await\""]
  1094 -> 380 [style=solid label="\"{\""]
  1094 -> 249 [style=solid label="\"operator\""]
  1094 -> 21 [style=solid label="\"decltype\""]
  1094 -> 250 [style=solid label="\"*\""]
  1094 -> 251 [style=solid label="\"requires\""]
  1094 -> 252 [style=solid label="\"~\""]
  1094 -> 253 [style=solid label="\"++\""]
  1094 -> 254 [style=solid label="\"--\""]
  1094 -> 255 [style=solid label="\"dynamic_cast\""]
  1094 -> 256 [style=solid label="\"static_cast\""]
  1094 -> 257 [style=solid label="\"reinterpret_cast\""]
  1094 -> 258 [style=solid label="\"const_cast\""]
  1094 -> 259 [style=solid label="\"typeid\""]
  1094 -> 260 [style=solid label="\"literal\""]
  1094 -> 27 [style=solid label="\"char\""]
  1094 -> 28 [style=solid label="\"char8_t\""]
  1094 -> 29 [style=solid label="\"char16_t\""]
  1094 -> 30 [style=solid label="\"char32_t\""]
  1094 -> 31 [style=solid label="\"wchar_t\""]
  1094 -> 32 [style=solid label="\"bool\""]
  1094 -> 33 [style=solid label="\"short\""]
  1094 -> 34 [style=solid label="\"int\""]
  1094 -> 35 [style=solid label="\"long\""]
  1094 -> 36 [style=solid label="\"signed\""]
  1094 -> 37 [style=solid label="\"unsigned\""]
  1094 -> 38 [style=solid label="\"float\""]
  1094 -> 39 [style=solid label="\"double\""]
  1094 -> 40 [style=solid label="\"void\""]
  1094 -> 118 [style=solid label="STRING_LITERAL"]
  1094 -> 261 [style=solid label="\"throw\""]
  1094 -> 262 [style=solid label="\"sizeof\""]
  1094 -> 263 [style=solid label="\"alignof\""]
  1094 -> 264 [style=solid label="\"co_yield\""]
  1094 -> 265 [style=dashed label="SCOPE-opt"]
  1094 -> 266 [style=dashed label="additive-expression"]
  1094 -> 267 [style=dashed label="and-expression"]
  1094 -> 268 [style=dashed label="assignment-expression"]
  1094 -> 269 [style=dashed label="await-expression"]
  1094 -> 1179 [style=dashed label="braced-init-list"]
  1094 -> 270 [style=dashed label="cast-expression"]
  1094 -> 55 [style=dashed label="class-name"]
  1094 -> 271 [style=dashed label="compare-expression"]
  1094 -> 272 [style=dashed label="conditional-expression"]
  1094 -> 273 [style=dashed label="conversion-function-id"]
  1094 -> 63 [style=dashed label="decltype-specifier"]
  1094 -> 274 [style=dashed label="delete-expression"]
  1094 -> 71 [style=dashed label="enum-name"]
  1094 -> 275 [style=dashed label="equality-expression"]
  1094 -> 276 [style=dashed label="exclusive-or-expression"]
  1094 -> 1180 [style=dashed label="expr-or-braced-init-list"]
  1094 -> 1181 [style=dashed label="expr-or-braced-init-list-opt"]
  1094 -> 1182 [style=dashed label="expression"]
  1094 -> 278 [style=dashed label="fold-expression"]
  1094 -> 279 [style=dashed label="id-expression"]
  1094 -> 280 [style=dashed label="inclusive-or-expression"]
  1094 -> 281 [style=dashed label="lambda-expression"]
  1094 -> 282 [style=dashed label="lambda-introducer"]
  1094 -> 283 [style=dashed label="literal-operator-id"]
  1094 -> 284 [style=dashed label="logical-and-expression"]
  1094 -> 285 [style=dashed label="logical-or-expression"]
  1094 -> 286 [style=dashed label="multiplicative-expression"]
  1094 -> 85 [style=dashed label="namespace-alias"]
  1094 -> 88 [style=dashed label="namespace-name"]
  1094 -> 287 [style=dashed label="nested-name-specifier"]
  1094 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1094 -> 288 [style=dashed label="new-expression"]
  1094 -> 289 [style=dashed label="noexcept-expression"]
  1094 -> 290 [style=dashed label="operator-function-id"]
  1094 -> 94 [style=dashed label="placeholder-type-specifier"]
  1094 -> 291 [style=dashed label="pm-expression"]
  1094 -> 292 [style=dashed label="postfix-expression"]
  1094 -> 293 [style=dashed label="primary-expression"]
  1094 -> 294 [style=dashed label="qualified-id"]
  1094 -> 295 [style=dashed label="relational-expression"]
  1094 -> 296 [style=dashed label="requires-expression"]
  1094 -> 297 [style=dashed label="shift-expression"]
  1094 -> 298 [style=dashed label="simple-template-id"]
  1094 -> 299 [style=dashed label="simple-type-specifier"]
  1094 -> 300 [style=dashed label="string-literal"]
  1094 -> 301 [style=dashed label="template-id"]
  1094 -> 102 [style=dashed label="template-name"]
  1094 -> 302 [style=dashed label="throw-expression"]
  1094 -> 104 [style=dashed label="type-constraint"]
  1094 -> 105 [style=dashed label="type-constraint-opt"]
  1094 -> 106 [style=dashed label="type-name"]
  1094 -> 108 [style=dashed label="typedef-name"]
  1094 -> 303 [style=dashed label="typename-specifier"]
  1094 -> 304 [style=dashed label="unary-expression"]
  1094 -> 305 [style=dashed label="unary-operator"]
  1094 -> 306 [style=dashed label="unqualified-id"]
  1094 -> 307 [style=dashed label="yield-expression"]
  1094 -> "1094R19" [style=solid]
 "1094R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1094 -> "1094R275" [label="[\";\"]", style=solid]
 "1094R275" [label="R275", fillcolor=3, shape=diamond, style=filled]
  1094 -> "1094R458d" [label="[IDENTIFIER]", style=solid]
 "1094R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1094 -> "1094R710d" [label="[\"decltype\"]", style=solid]
 "1094R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1094 -> "1094R710" [label="[\"auto\"]", style=solid]
 "1094R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1095 [label="State 1095\n\l378 labeled-statement: attribute-specifier-seq-opt \"default\" • \":\" statement\l"]
  1095 -> 1183 [style=solid label="\":\""]
  1096 [label="State 1096\n\l707 try-block: \"try\" • compound-statement handler-seq\l"]
  1096 -> 794 [style=solid label="\"{\""]
  1096 -> 1184 [style=dashed label="compound-statement"]
  1097 [label="State 1097\n\l367 iteration-statement: \"while\" • \"(\" condition \")\" statement\l"]
  1097 -> 1185 [style=solid label="\"(\""]
  1098 [label="State 1098\n\l368 iteration-statement: \"do\" • statement \"while\" \"(\" expression \")\" \";\"\l"]
  1098 -> 1 [style=solid label="\"constexpr\""]
  1098 -> 150 [style=solid label="\"extern\""]
  1098 -> 4 [style=solid label="IDENTIFIER"]
  1098 -> 151 [style=solid label="\"inline\""]
  1098 -> 6 [style=solid label="\"::\""]
  1098 -> 8 [style=solid label="\"typename\""]
  1098 -> 9 [style=solid label="\"virtual\""]
  1098 -> 10 [style=solid label="\"using\""]
  1098 -> 12 [style=solid label="\"class\""]
  1098 -> 13 [style=solid label="\"struct\""]
  1098 -> 14 [style=solid label="\"union\""]
  1098 -> 15 [style=solid label="\"const\""]
  1098 -> 16 [style=solid label="\"volatile\""]
  1098 -> 17 [style=solid label="\"friend\""]
  1098 -> 18 [style=solid label="\"typedef\""]
  1098 -> 19 [style=solid label="\"consteval\""]
  1098 -> 20 [style=solid label="\"constinit\""]
  1098 -> 21 [style=solid label="\"decltype\""]
  1098 -> 22 [style=solid label="\"enum\""]
  1098 -> 23 [style=solid label="\"explicit\""]
  1098 -> 972 [style=solid label="\"namespace\""]
  1098 -> 27 [style=solid label="\"char\""]
  1098 -> 28 [style=solid label="\"char8_t\""]
  1098 -> 29 [style=solid label="\"char16_t\""]
  1098 -> 30 [style=solid label="\"char32_t\""]
  1098 -> 31 [style=solid label="\"wchar_t\""]
  1098 -> 32 [style=solid label="\"bool\""]
  1098 -> 33 [style=solid label="\"short\""]
  1098 -> 34 [style=solid label="\"int\""]
  1098 -> 35 [style=solid label="\"long\""]
  1098 -> 36 [style=solid label="\"signed\""]
  1098 -> 37 [style=solid label="\"unsigned\""]
  1098 -> 38 [style=solid label="\"float\""]
  1098 -> 39 [style=solid label="\"double\""]
  1098 -> 40 [style=solid label="\"void\""]
  1098 -> 41 [style=solid label="\"static_assert\""]
  1098 -> 42 [style=solid label="\"static\""]
  1098 -> 43 [style=solid label="\"thread_local\""]
  1098 -> 44 [style=solid label="\"mutable\""]
  1098 -> 47 [style=dashed label="alias-declaration"]
  1098 -> 48 [style=dashed label="asm-declaration"]
  1098 -> 973 [style=dashed label="attribute-specifier-seq"]
  1098 -> 974 [style=dashed label="attribute-specifier-seq-opt"]
  1098 -> 975 [style=dashed label="block-declaration"]
  1098 -> 53 [style=dashed label="class-head"]
  1098 -> 54 [style=dashed label="class-key"]
  1098 -> 55 [style=dashed label="class-name"]
  1098 -> 56 [style=dashed label="class-specifier"]
  1098 -> 57 [style=dashed label="cv-qualifier"]
  1098 -> 58 [style=dashed label="decl-specifier"]
  1098 -> 59 [style=dashed label="decl-specifier-seq"]
  1098 -> 976 [style=dashed label="declaration-statement"]
  1098 -> 63 [style=dashed label="decltype-specifier"]
  1098 -> 65 [style=dashed label="defining-type-specifier"]
  1098 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1098 -> 67 [style=dashed label="elaborated-type-specifier"]
  1098 -> 69 [style=dashed label="enum-head"]
  1098 -> 70 [style=dashed label="enum-key"]
  1098 -> 71 [style=dashed label="enum-name"]
  1098 -> 72 [style=dashed label="enum-specifier"]
  1098 -> 155 [style=dashed label="explicit-specifier"]
  1098 -> 79 [style=dashed label="function-specifier"]
  1098 -> 977 [style=dashed label="labeled-statement"]
  1098 -> 85 [style=dashed label="namespace-alias"]
  1098 -> 86 [style=dashed label="namespace-alias-definition"]
  1098 -> 88 [style=dashed label="namespace-name"]
  1098 -> 89 [style=dashed label="nested-name-specifier"]
  1098 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1098 -> 93 [style=dashed label="opaque-enum-declaration"]
  1098 -> 94 [style=dashed label="placeholder-type-specifier"]
  1098 -> 95 [style=dashed label="simple-declaration"]
  1098 -> 96 [style=dashed label="simple-template-id"]
  1098 -> 97 [style=dashed label="simple-type-specifier"]
  1098 -> 1186 [style=dashed label="statement"]
  1098 -> 98 [style=dashed label="static_assert-declaration"]
  1098 -> 99 [style=dashed label="storage-class-specifier"]
  1098 -> 102 [style=dashed label="template-name"]
  1098 -> 104 [style=dashed label="type-constraint"]
  1098 -> 105 [style=dashed label="type-constraint-opt"]
  1098 -> 106 [style=dashed label="type-name"]
  1098 -> 107 [style=dashed label="type-specifier"]
  1098 -> 108 [style=dashed label="typedef-name"]
  1098 -> 109 [style=dashed label="typename-specifier"]
  1098 -> 111 [style=dashed label="using-declaration"]
  1098 -> 112 [style=dashed label="using-directive"]
  1098 -> 113 [style=dashed label="using-enum-declaration"]
  1098 -> "1098R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1098R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1098 -> "1098R83" [style=solid]
 "1098R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1098 -> "1098R458d" [label="[IDENTIFIER]", style=solid]
 "1098R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1098 -> "1098R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1098R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1099 [label="State 1099\n\l369 iteration-statement: \"for\" • \"(\" init-statement condition-opt \";\" expression-opt \")\" statement\l370                    | \"for\" • \"(\" init-statement-opt for-range-declaration \":\" for-range-initializer \")\" statement\l"]
  1099 -> 1187 [style=solid label="\"(\""]
  1100 [label="State 1100\n\l371 jump-statement: \"break\" • \";\"\l"]
  1100 -> 1188 [style=solid label="\";\""]
  1101 [label="State 1101\n\l372 jump-statement: \"continue\" • \";\"\l"]
  1101 -> 1189 [style=solid label="\";\""]
  1102 [label="State 1102\n\l373 jump-statement: \"return\" • expr-or-braced-init-list-opt \";\"\l"]
  1102 -> 238 [style=solid label="IDENTIFIER"]
  1102 -> 239 [style=solid label="\"noexcept\""]
  1102 -> 240 [style=solid label="\"!\""]
  1102 -> 241 [style=solid label="\"::\""]
  1102 -> 242 [style=solid label="\"this\""]
  1102 -> 8 [style=solid label="\"typename\""]
  1102 -> 243 [style=solid label="\"+\""]
  1102 -> 244 [style=solid label="\"-\""]
  1102 -> 245 [style=solid label="\"(\""]
  1102 -> 246 [style=solid label="\"&\""]
  1102 -> 247 [style=solid label="\"[\""]
  1102 -> 248 [style=solid label="\"co_await\""]
  1102 -> 380 [style=solid label="\"{\""]
  1102 -> 249 [style=solid label="\"operator\""]
  1102 -> 21 [style=solid label="\"decltype\""]
  1102 -> 250 [style=solid label="\"*\""]
  1102 -> 251 [style=solid label="\"requires\""]
  1102 -> 252 [style=solid label="\"~\""]
  1102 -> 253 [style=solid label="\"++\""]
  1102 -> 254 [style=solid label="\"--\""]
  1102 -> 255 [style=solid label="\"dynamic_cast\""]
  1102 -> 256 [style=solid label="\"static_cast\""]
  1102 -> 257 [style=solid label="\"reinterpret_cast\""]
  1102 -> 258 [style=solid label="\"const_cast\""]
  1102 -> 259 [style=solid label="\"typeid\""]
  1102 -> 260 [style=solid label="\"literal\""]
  1102 -> 27 [style=solid label="\"char\""]
  1102 -> 28 [style=solid label="\"char8_t\""]
  1102 -> 29 [style=solid label="\"char16_t\""]
  1102 -> 30 [style=solid label="\"char32_t\""]
  1102 -> 31 [style=solid label="\"wchar_t\""]
  1102 -> 32 [style=solid label="\"bool\""]
  1102 -> 33 [style=solid label="\"short\""]
  1102 -> 34 [style=solid label="\"int\""]
  1102 -> 35 [style=solid label="\"long\""]
  1102 -> 36 [style=solid label="\"signed\""]
  1102 -> 37 [style=solid label="\"unsigned\""]
  1102 -> 38 [style=solid label="\"float\""]
  1102 -> 39 [style=solid label="\"double\""]
  1102 -> 40 [style=solid label="\"void\""]
  1102 -> 118 [style=solid label="STRING_LITERAL"]
  1102 -> 261 [style=solid label="\"throw\""]
  1102 -> 262 [style=solid label="\"sizeof\""]
  1102 -> 263 [style=solid label="\"alignof\""]
  1102 -> 264 [style=solid label="\"co_yield\""]
  1102 -> 265 [style=dashed label="SCOPE-opt"]
  1102 -> 266 [style=dashed label="additive-expression"]
  1102 -> 267 [style=dashed label="and-expression"]
  1102 -> 268 [style=dashed label="assignment-expression"]
  1102 -> 269 [style=dashed label="await-expression"]
  1102 -> 1179 [style=dashed label="braced-init-list"]
  1102 -> 270 [style=dashed label="cast-expression"]
  1102 -> 55 [style=dashed label="class-name"]
  1102 -> 271 [style=dashed label="compare-expression"]
  1102 -> 272 [style=dashed label="conditional-expression"]
  1102 -> 273 [style=dashed label="conversion-function-id"]
  1102 -> 63 [style=dashed label="decltype-specifier"]
  1102 -> 274 [style=dashed label="delete-expression"]
  1102 -> 71 [style=dashed label="enum-name"]
  1102 -> 275 [style=dashed label="equality-expression"]
  1102 -> 276 [style=dashed label="exclusive-or-expression"]
  1102 -> 1180 [style=dashed label="expr-or-braced-init-list"]
  1102 -> 1190 [style=dashed label="expr-or-braced-init-list-opt"]
  1102 -> 1182 [style=dashed label="expression"]
  1102 -> 278 [style=dashed label="fold-expression"]
  1102 -> 279 [style=dashed label="id-expression"]
  1102 -> 280 [style=dashed label="inclusive-or-expression"]
  1102 -> 281 [style=dashed label="lambda-expression"]
  1102 -> 282 [style=dashed label="lambda-introducer"]
  1102 -> 283 [style=dashed label="literal-operator-id"]
  1102 -> 284 [style=dashed label="logical-and-expression"]
  1102 -> 285 [style=dashed label="logical-or-expression"]
  1102 -> 286 [style=dashed label="multiplicative-expression"]
  1102 -> 85 [style=dashed label="namespace-alias"]
  1102 -> 88 [style=dashed label="namespace-name"]
  1102 -> 287 [style=dashed label="nested-name-specifier"]
  1102 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1102 -> 288 [style=dashed label="new-expression"]
  1102 -> 289 [style=dashed label="noexcept-expression"]
  1102 -> 290 [style=dashed label="operator-function-id"]
  1102 -> 94 [style=dashed label="placeholder-type-specifier"]
  1102 -> 291 [style=dashed label="pm-expression"]
  1102 -> 292 [style=dashed label="postfix-expression"]
  1102 -> 293 [style=dashed label="primary-expression"]
  1102 -> 294 [style=dashed label="qualified-id"]
  1102 -> 295 [style=dashed label="relational-expression"]
  1102 -> 296 [style=dashed label="requires-expression"]
  1102 -> 297 [style=dashed label="shift-expression"]
  1102 -> 298 [style=dashed label="simple-template-id"]
  1102 -> 299 [style=dashed label="simple-type-specifier"]
  1102 -> 300 [style=dashed label="string-literal"]
  1102 -> 301 [style=dashed label="template-id"]
  1102 -> 102 [style=dashed label="template-name"]
  1102 -> 302 [style=dashed label="throw-expression"]
  1102 -> 104 [style=dashed label="type-constraint"]
  1102 -> 105 [style=dashed label="type-constraint-opt"]
  1102 -> 106 [style=dashed label="type-name"]
  1102 -> 108 [style=dashed label="typedef-name"]
  1102 -> 303 [style=dashed label="typename-specifier"]
  1102 -> 304 [style=dashed label="unary-expression"]
  1102 -> 305 [style=dashed label="unary-operator"]
  1102 -> 306 [style=dashed label="unqualified-id"]
  1102 -> 307 [style=dashed label="yield-expression"]
  1102 -> "1102R19" [style=solid]
 "1102R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1102 -> "1102R275" [label="[\";\"]", style=solid]
 "1102R275" [label="R275", fillcolor=3, shape=diamond, style=filled]
  1102 -> "1102R458d" [label="[IDENTIFIER]", style=solid]
 "1102R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1102 -> "1102R710d" [label="[\"decltype\"]", style=solid]
 "1102R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1102 -> "1102R710" [label="[\"auto\"]", style=solid]
 "1102R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1103 [label="State 1103\n\l375 jump-statement: \"goto\" • IDENTIFIER \";\"\l"]
  1103 -> 1191 [style=solid label="IDENTIFIER"]
  1104 [label="State 1104\n\l377 labeled-statement: attribute-specifier-seq-opt \"case\" • constant-expression \":\" statement\l"]
  1104 -> 238 [style=solid label="IDENTIFIER"]
  1104 -> 239 [style=solid label="\"noexcept\""]
  1104 -> 240 [style=solid label="\"!\""]
  1104 -> 241 [style=solid label="\"::\""]
  1104 -> 242 [style=solid label="\"this\""]
  1104 -> 8 [style=solid label="\"typename\""]
  1104 -> 243 [style=solid label="\"+\""]
  1104 -> 244 [style=solid label="\"-\""]
  1104 -> 245 [style=solid label="\"(\""]
  1104 -> 246 [style=solid label="\"&\""]
  1104 -> 247 [style=solid label="\"[\""]
  1104 -> 248 [style=solid label="\"co_await\""]
  1104 -> 249 [style=solid label="\"operator\""]
  1104 -> 21 [style=solid label="\"decltype\""]
  1104 -> 250 [style=solid label="\"*\""]
  1104 -> 251 [style=solid label="\"requires\""]
  1104 -> 252 [style=solid label="\"~\""]
  1104 -> 253 [style=solid label="\"++\""]
  1104 -> 254 [style=solid label="\"--\""]
  1104 -> 255 [style=solid label="\"dynamic_cast\""]
  1104 -> 256 [style=solid label="\"static_cast\""]
  1104 -> 257 [style=solid label="\"reinterpret_cast\""]
  1104 -> 258 [style=solid label="\"const_cast\""]
  1104 -> 259 [style=solid label="\"typeid\""]
  1104 -> 260 [style=solid label="\"literal\""]
  1104 -> 27 [style=solid label="\"char\""]
  1104 -> 28 [style=solid label="\"char8_t\""]
  1104 -> 29 [style=solid label="\"char16_t\""]
  1104 -> 30 [style=solid label="\"char32_t\""]
  1104 -> 31 [style=solid label="\"wchar_t\""]
  1104 -> 32 [style=solid label="\"bool\""]
  1104 -> 33 [style=solid label="\"short\""]
  1104 -> 34 [style=solid label="\"int\""]
  1104 -> 35 [style=solid label="\"long\""]
  1104 -> 36 [style=solid label="\"signed\""]
  1104 -> 37 [style=solid label="\"unsigned\""]
  1104 -> 38 [style=solid label="\"float\""]
  1104 -> 39 [style=solid label="\"double\""]
  1104 -> 40 [style=solid label="\"void\""]
  1104 -> 118 [style=solid label="STRING_LITERAL"]
  1104 -> 262 [style=solid label="\"sizeof\""]
  1104 -> 263 [style=solid label="\"alignof\""]
  1104 -> 265 [style=dashed label="SCOPE-opt"]
  1104 -> 266 [style=dashed label="additive-expression"]
  1104 -> 267 [style=dashed label="and-expression"]
  1104 -> 269 [style=dashed label="await-expression"]
  1104 -> 270 [style=dashed label="cast-expression"]
  1104 -> 55 [style=dashed label="class-name"]
  1104 -> 271 [style=dashed label="compare-expression"]
  1104 -> 309 [style=dashed label="conditional-expression"]
  1104 -> 1192 [style=dashed label="constant-expression"]
  1104 -> 273 [style=dashed label="conversion-function-id"]
  1104 -> 63 [style=dashed label="decltype-specifier"]
  1104 -> 274 [style=dashed label="delete-expression"]
  1104 -> 71 [style=dashed label="enum-name"]
  1104 -> 275 [style=dashed label="equality-expression"]
  1104 -> 276 [style=dashed label="exclusive-or-expression"]
  1104 -> 278 [style=dashed label="fold-expression"]
  1104 -> 279 [style=dashed label="id-expression"]
  1104 -> 280 [style=dashed label="inclusive-or-expression"]
  1104 -> 281 [style=dashed label="lambda-expression"]
  1104 -> 282 [style=dashed label="lambda-introducer"]
  1104 -> 283 [style=dashed label="literal-operator-id"]
  1104 -> 284 [style=dashed label="logical-and-expression"]
  1104 -> 311 [style=dashed label="logical-or-expression"]
  1104 -> 286 [style=dashed label="multiplicative-expression"]
  1104 -> 85 [style=dashed label="namespace-alias"]
  1104 -> 88 [style=dashed label="namespace-name"]
  1104 -> 287 [style=dashed label="nested-name-specifier"]
  1104 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1104 -> 288 [style=dashed label="new-expression"]
  1104 -> 289 [style=dashed label="noexcept-expression"]
  1104 -> 290 [style=dashed label="operator-function-id"]
  1104 -> 94 [style=dashed label="placeholder-type-specifier"]
  1104 -> 291 [style=dashed label="pm-expression"]
  1104 -> 292 [style=dashed label="postfix-expression"]
  1104 -> 293 [style=dashed label="primary-expression"]
  1104 -> 294 [style=dashed label="qualified-id"]
  1104 -> 295 [style=dashed label="relational-expression"]
  1104 -> 296 [style=dashed label="requires-expression"]
  1104 -> 297 [style=dashed label="shift-expression"]
  1104 -> 298 [style=dashed label="simple-template-id"]
  1104 -> 299 [style=dashed label="simple-type-specifier"]
  1104 -> 300 [style=dashed label="string-literal"]
  1104 -> 301 [style=dashed label="template-id"]
  1104 -> 102 [style=dashed label="template-name"]
  1104 -> 104 [style=dashed label="type-constraint"]
  1104 -> 105 [style=dashed label="type-constraint-opt"]
  1104 -> 106 [style=dashed label="type-name"]
  1104 -> 108 [style=dashed label="typedef-name"]
  1104 -> 303 [style=dashed label="typename-specifier"]
  1104 -> 304 [style=dashed label="unary-expression"]
  1104 -> 305 [style=dashed label="unary-operator"]
  1104 -> 306 [style=dashed label="unqualified-id"]
  1104 -> "1104R19" [style=solid]
 "1104R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1104 -> "1104R458d" [label="[IDENTIFIER]", style=solid]
 "1104R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1104 -> "1104R710d" [label="[\"decltype\"]", style=solid]
 "1104R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1104 -> "1104R710" [label="[\"auto\"]", style=solid]
 "1104R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1105 [label="State 1105\n\l628 selection-statement: \"if\" • CONSTEXPR-opt \"(\" init-statement-opt condition \")\" statement\l629                    | \"if\" • CONSTEXPR-opt \"(\" init-statement-opt condition \")\" statement \"else\" statement\l630                    | \"if\" • NOT-opt \"consteval\" compound-statement\l631                    | \"if\" • NOT-opt \"consteval\" compound-statement \"else\" statement\l"]
  1105 -> 1193 [style=solid label="\"constexpr\""]
  1105 -> 1194 [style=solid label="\"!\""]
  1105 -> 1195 [style=dashed label="CONSTEXPR-opt"]
  1105 -> 1196 [style=dashed label="NOT-opt"]
  1105 -> "1105R3" [style=solid]
 "1105R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  1105 -> "1105R17" [label="[\"consteval\"]", style=solid]
 "1105R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  1106 [label="State 1106\n\l632 selection-statement: \"switch\" • \"(\" init-statement-opt condition \")\" statement\l"]
  1106 -> 1197 [style=solid label="\"(\""]
  1107 [label="State 1107\n\l666 statement: attribute-specifier-seq-opt compound-statement •\l"]
  1107 -> "1107R666" [style=solid]
 "1107R666" [label="R666", fillcolor=3, shape=diamond, style=filled]
  1108 [label="State 1108\n\l374 jump-statement: coroutine-return-statement •\l"]
  1108 -> "1108R374" [style=solid]
 "1108R374" [label="R374", fillcolor=3, shape=diamond, style=filled]
  1109 [label="State 1109\n\l642 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq • ref-qualifier-opt \"[\" identifier-list \"]\" initializer \";\"\l"]
  1109 -> 339 [style=solid label="\"&\""]
  1109 -> 340 [style=solid label="\"&&\""]
  1109 -> 341 [style=dashed label="ref-qualifier"]
  1109 -> 342 [style=dashed label="ref-qualifier-opt"]
  1109 -> "1109R604" [style=solid]
 "1109R604" [label="R604", fillcolor=3, shape=diamond, style=filled]
  1110 [label="State 1110\n\l278 expression: expression • \",\" assignment-expression\l283 expression-opt: expression •\l"]
  1110 -> 534 [style=solid label="\",\""]
  1110 -> "1110R283" [style=solid]
 "1110R283" [label="R283", fillcolor=3, shape=diamond, style=filled]
  1111 [label="State 1111\n\l284 expression-statement: expression-opt • \";\"\l"]
  1111 -> 1198 [style=solid label="\";\""]
  1112 [label="State 1112\n\l665 statement: attribute-specifier-seq-opt expression-statement •\l"]
  1112 -> "1112R665" [style=solid]
 "1112R665" [label="R665", fillcolor=3, shape=diamond, style=filled]
  1113 [label="State 1113\n\l668 statement: attribute-specifier-seq-opt iteration-statement •\l"]
  1113 -> "1113R668" [style=solid]
 "1113R668" [label="R668", fillcolor=3, shape=diamond, style=filled]
  1114 [label="State 1114\n\l669 statement: attribute-specifier-seq-opt jump-statement •\l"]
  1114 -> "1114R669" [style=solid]
 "1114R669" [label="R669", fillcolor=3, shape=diamond, style=filled]
  1115 [label="State 1115\n\l667 statement: attribute-specifier-seq-opt selection-statement •\l"]
  1115 -> "1115R667" [style=solid]
 "1115R667" [label="R667", fillcolor=3, shape=diamond, style=filled]
  1116 [label="State 1116\n\l671 statement: attribute-specifier-seq-opt try-block •\l"]
  1116 -> "1116R671" [style=solid]
 "1116R671" [label="R671", fillcolor=3, shape=diamond, style=filled]
  1117 [label="State 1117\n\l673 statement-seq: statement-seq statement •\l"]
  1117 -> "1117R673" [style=solid]
 "1117R673" [label="R673", fillcolor=3, shape=diamond, style=filled]
  1118 [label="State 1118\n\l149 compound-statement: \"{\" statement-seq-opt \"}\" •\l"]
  1118 -> "1118R149" [style=solid]
 "1118R149" [label="R149", fillcolor=3, shape=diamond, style=filled]
  1119 [label="State 1119\n\l157 conditional-expression: logical-or-expression \"?\" expression \":\" assignment-expression •\l"]
  1119 -> "1119R157" [style=solid]
 "1119R157" [label="R157", fillcolor=3, shape=diamond, style=filled]
  1120 [label="State 1120\n\l460 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" INLINE-opt IDENTIFIER \"{\" namespace-body • \"}\"\l"]
  1120 -> 1199 [style=solid label="\"}\""]
  1121 [label="State 1121\n\l677 static_assert-declaration: \"static_assert\" \"(\" constant-expression \",\" string-literal \")\" \";\" •\l"]
  1121 -> "1121R677" [style=solid]
 "1121R677" [label="R677", fillcolor=3, shape=diamond, style=filled]
  1122 [label="State 1122\n\l443 named-namespace-definition: INLINE-opt \"namespace\" attribute-specifier-seq-opt IDENTIFIER \"{\" namespace-body \"}\" •\l"]
  1122 -> "1122R443" [style=solid]
 "1122R443" [label="R443", fillcolor=3, shape=diamond, style=filled]
  1123 [label="State 1123\n\l 75 attribute-list: attribute-list \",\" attribute • \"...\"\l 78 attribute-opt: attribute •\l"]
  1123 -> 1200 [style=solid label="\"...\""]
  1123 -> "1123R78" [style=solid]
 "1123R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  1124 [label="State 1124\n\l 73 attribute-list: attribute-list \",\" attribute-opt •\l"]
  1124 -> "1124R73" [style=solid]
 "1124R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  1125 [label="State 1125\n\l 80 attribute-specifier: \"[\" \"[\" attribute-using-prefix-opt attribute-list \"]\" \"]\" •\l"]
  1125 -> "1125R80" [style=solid]
 "1125R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  1126 [label="State 1126\n\l 79 attribute-scoped-token: attribute-namespace \"::\" IDENTIFIER •\l"]
  1126 -> "1126R79" [style=solid]
 "1126R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
  1127 [label="State 1127\n\l 91 balanced-token: \"(\" • balanced-token-seq-opt \")\"\l"]
  1127 -> 1127 [style=solid label="\"(\""]
  1127 -> 1128 [style=solid label="\"[\""]
  1127 -> 1129 [style=solid label="\"{\""]
  1127 -> 1130 [style=solid label="BALANCED_TOKEN"]
  1127 -> 1131 [style=dashed label="balanced-token"]
  1127 -> 1132 [style=dashed label="balanced-token-seq"]
  1127 -> 1201 [style=dashed label="balanced-token-seq-opt"]
  1127 -> "1127R97" [style=solid]
 "1127R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  1128 [label="State 1128\n\l 92 balanced-token: \"[\" • balanced-token-seq-opt \"]\"\l"]
  1128 -> 1127 [style=solid label="\"(\""]
  1128 -> 1128 [style=solid label="\"[\""]
  1128 -> 1129 [style=solid label="\"{\""]
  1128 -> 1130 [style=solid label="BALANCED_TOKEN"]
  1128 -> 1131 [style=dashed label="balanced-token"]
  1128 -> 1132 [style=dashed label="balanced-token-seq"]
  1128 -> 1202 [style=dashed label="balanced-token-seq-opt"]
  1128 -> "1128R97" [style=solid]
 "1128R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  1129 [label="State 1129\n\l 93 balanced-token: \"{\" • balanced-token-seq-opt \"}\"\l"]
  1129 -> 1127 [style=solid label="\"(\""]
  1129 -> 1128 [style=solid label="\"[\""]
  1129 -> 1129 [style=solid label="\"{\""]
  1129 -> 1130 [style=solid label="BALANCED_TOKEN"]
  1129 -> 1131 [style=dashed label="balanced-token"]
  1129 -> 1132 [style=dashed label="balanced-token-seq"]
  1129 -> 1203 [style=dashed label="balanced-token-seq-opt"]
  1129 -> "1129R97" [style=solid]
 "1129R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  1130 [label="State 1130\n\l 94 balanced-token: BALANCED_TOKEN •\l"]
  1130 -> "1130R94" [style=solid]
 "1130R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
  1131 [label="State 1131\n\l 95 balanced-token-seq: balanced-token •\l"]
  1131 -> "1131R95" [style=solid]
 "1131R95" [label="R95", fillcolor=3, shape=diamond, style=filled]
  1132 [label="State 1132\n\l 96 balanced-token-seq: balanced-token-seq • balanced-token\l 98 balanced-token-seq-opt: balanced-token-seq •\l"]
  1132 -> 1127 [style=solid label="\"(\""]
  1132 -> 1128 [style=solid label="\"[\""]
  1132 -> 1129 [style=solid label="\"{\""]
  1132 -> 1130 [style=solid label="BALANCED_TOKEN"]
  1132 -> 1204 [style=dashed label="balanced-token"]
  1132 -> "1132R98" [style=solid]
 "1132R98" [label="R98", fillcolor=3, shape=diamond, style=filled]
  1133 [label="State 1133\n\l 68 attribute-argument-clause: \"(\" balanced-token-seq-opt • \")\"\l"]
  1133 -> 1205 [style=solid label="\")\""]
  1134 [label="State 1134\n\l343 identifier-list: identifier-list \",\" IDENTIFIER •\l"]
  1134 -> "1134R343" [style=solid]
 "1134R343" [label="R343", fillcolor=3, shape=diamond, style=filled]
  1135 [label="State 1135\n\l642 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" initializer • \";\"\l"]
  1135 -> 1206 [style=solid label="\";\""]
  1136 [label="State 1136\n\l326 function-body: \"=\" \"delete\" \";\" •\l"]
  1136 -> "1136R326" [style=solid]
 "1136R326" [label="R326", fillcolor=3, shape=diamond, style=filled]
  1137 [label="State 1137\n\l325 function-body: \"=\" \"default\" \";\" •\l"]
  1137 -> "1137R325" [style=solid]
 "1137R325" [label="R325", fillcolor=3, shape=diamond, style=filled]
  1138 [label="State 1138\n\l402 mem-initializer-list: mem-initializer ELLIPSIS-opt •\l"]
  1138 -> "1138R402" [style=solid]
 "1138R402" [label="R402", fillcolor=3, shape=diamond, style=filled]
  1139 [label="State 1139\n\l398 mem-initializer: mem-initializer-id \"(\" • expression-list-opt \")\"\l"]
  1139 -> 238 [style=solid label="IDENTIFIER"]
  1139 -> 239 [style=solid label="\"noexcept\""]
  1139 -> 240 [style=solid label="\"!\""]
  1139 -> 241 [style=solid label="\"::\""]
  1139 -> 242 [style=solid label="\"this\""]
  1139 -> 8 [style=solid label="\"typename\""]
  1139 -> 243 [style=solid label="\"+\""]
  1139 -> 244 [style=solid label="\"-\""]
  1139 -> 245 [style=solid label="\"(\""]
  1139 -> 246 [style=solid label="\"&\""]
  1139 -> 247 [style=solid label="\"[\""]
  1139 -> 248 [style=solid label="\"co_await\""]
  1139 -> 380 [style=solid label="\"{\""]
  1139 -> 249 [style=solid label="\"operator\""]
  1139 -> 21 [style=solid label="\"decltype\""]
  1139 -> 250 [style=solid label="\"*\""]
  1139 -> 251 [style=solid label="\"requires\""]
  1139 -> 252 [style=solid label="\"~\""]
  1139 -> 253 [style=solid label="\"++\""]
  1139 -> 254 [style=solid label="\"--\""]
  1139 -> 255 [style=solid label="\"dynamic_cast\""]
  1139 -> 256 [style=solid label="\"static_cast\""]
  1139 -> 257 [style=solid label="\"reinterpret_cast\""]
  1139 -> 258 [style=solid label="\"const_cast\""]
  1139 -> 259 [style=solid label="\"typeid\""]
  1139 -> 260 [style=solid label="\"literal\""]
  1139 -> 27 [style=solid label="\"char\""]
  1139 -> 28 [style=solid label="\"char8_t\""]
  1139 -> 29 [style=solid label="\"char16_t\""]
  1139 -> 30 [style=solid label="\"char32_t\""]
  1139 -> 31 [style=solid label="\"wchar_t\""]
  1139 -> 32 [style=solid label="\"bool\""]
  1139 -> 33 [style=solid label="\"short\""]
  1139 -> 34 [style=solid label="\"int\""]
  1139 -> 35 [style=solid label="\"long\""]
  1139 -> 36 [style=solid label="\"signed\""]
  1139 -> 37 [style=solid label="\"unsigned\""]
  1139 -> 38 [style=solid label="\"float\""]
  1139 -> 39 [style=solid label="\"double\""]
  1139 -> 40 [style=solid label="\"void\""]
  1139 -> 118 [style=solid label="STRING_LITERAL"]
  1139 -> 261 [style=solid label="\"throw\""]
  1139 -> 262 [style=solid label="\"sizeof\""]
  1139 -> 263 [style=solid label="\"alignof\""]
  1139 -> 264 [style=solid label="\"co_yield\""]
  1139 -> 265 [style=dashed label="SCOPE-opt"]
  1139 -> 266 [style=dashed label="additive-expression"]
  1139 -> 267 [style=dashed label="and-expression"]
  1139 -> 642 [style=dashed label="assignment-expression"]
  1139 -> 269 [style=dashed label="await-expression"]
  1139 -> 643 [style=dashed label="braced-init-list"]
  1139 -> 270 [style=dashed label="cast-expression"]
  1139 -> 55 [style=dashed label="class-name"]
  1139 -> 271 [style=dashed label="compare-expression"]
  1139 -> 272 [style=dashed label="conditional-expression"]
  1139 -> 273 [style=dashed label="conversion-function-id"]
  1139 -> 63 [style=dashed label="decltype-specifier"]
  1139 -> 274 [style=dashed label="delete-expression"]
  1139 -> 71 [style=dashed label="enum-name"]
  1139 -> 275 [style=dashed label="equality-expression"]
  1139 -> 276 [style=dashed label="exclusive-or-expression"]
  1139 -> 810 [style=dashed label="expression-list"]
  1139 -> 1207 [style=dashed label="expression-list-opt"]
  1139 -> 278 [style=dashed label="fold-expression"]
  1139 -> 279 [style=dashed label="id-expression"]
  1139 -> 280 [style=dashed label="inclusive-or-expression"]
  1139 -> 646 [style=dashed label="initializer-clause"]
  1139 -> 647 [style=dashed label="initializer-list"]
  1139 -> 281 [style=dashed label="lambda-expression"]
  1139 -> 282 [style=dashed label="lambda-introducer"]
  1139 -> 283 [style=dashed label="literal-operator-id"]
  1139 -> 284 [style=dashed label="logical-and-expression"]
  1139 -> 285 [style=dashed label="logical-or-expression"]
  1139 -> 286 [style=dashed label="multiplicative-expression"]
  1139 -> 85 [style=dashed label="namespace-alias"]
  1139 -> 88 [style=dashed label="namespace-name"]
  1139 -> 287 [style=dashed label="nested-name-specifier"]
  1139 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1139 -> 288 [style=dashed label="new-expression"]
  1139 -> 289 [style=dashed label="noexcept-expression"]
  1139 -> 290 [style=dashed label="operator-function-id"]
  1139 -> 94 [style=dashed label="placeholder-type-specifier"]
  1139 -> 291 [style=dashed label="pm-expression"]
  1139 -> 292 [style=dashed label="postfix-expression"]
  1139 -> 293 [style=dashed label="primary-expression"]
  1139 -> 294 [style=dashed label="qualified-id"]
  1139 -> 295 [style=dashed label="relational-expression"]
  1139 -> 296 [style=dashed label="requires-expression"]
  1139 -> 297 [style=dashed label="shift-expression"]
  1139 -> 298 [style=dashed label="simple-template-id"]
  1139 -> 299 [style=dashed label="simple-type-specifier"]
  1139 -> 300 [style=dashed label="string-literal"]
  1139 -> 301 [style=dashed label="template-id"]
  1139 -> 102 [style=dashed label="template-name"]
  1139 -> 302 [style=dashed label="throw-expression"]
  1139 -> 104 [style=dashed label="type-constraint"]
  1139 -> 105 [style=dashed label="type-constraint-opt"]
  1139 -> 106 [style=dashed label="type-name"]
  1139 -> 108 [style=dashed label="typedef-name"]
  1139 -> 303 [style=dashed label="typename-specifier"]
  1139 -> 304 [style=dashed label="unary-expression"]
  1139 -> 305 [style=dashed label="unary-operator"]
  1139 -> 306 [style=dashed label="unqualified-id"]
  1139 -> 307 [style=dashed label="yield-expression"]
  1139 -> "1139R19" [style=solid]
 "1139R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1139 -> "1139R280" [label="[\")\"]", style=solid]
 "1139R280" [label="R280", fillcolor=3, shape=diamond, style=filled]
  1139 -> "1139R458d" [label="[IDENTIFIER]", style=solid]
 "1139R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1139 -> "1139R710d" [label="[\"decltype\"]", style=solid]
 "1139R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1139 -> "1139R710" [label="[\"auto\"]", style=solid]
 "1139R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1140 [label="State 1140\n\l399 mem-initializer: mem-initializer-id braced-init-list •\l"]
  1140 -> "1140R399" [style=solid]
 "1140R399" [label="R399", fillcolor=3, shape=diamond, style=filled]
  1141 [label="State 1141\n\l403 mem-initializer-list: mem-initializer-list \",\" • mem-initializer ELLIPSIS-opt\l"]
  1141 -> 1010 [style=solid label="IDENTIFIER"]
  1141 -> 6 [style=solid label="\"::\""]
  1141 -> 21 [style=solid label="\"decltype\""]
  1141 -> 55 [style=dashed label="class-name"]
  1141 -> 1011 [style=dashed label="class-or-decltype"]
  1141 -> 874 [style=dashed label="decltype-specifier"]
  1141 -> 71 [style=dashed label="enum-name"]
  1141 -> 1208 [style=dashed label="mem-initializer"]
  1141 -> 1013 [style=dashed label="mem-initializer-id"]
  1141 -> 85 [style=dashed label="namespace-alias"]
  1141 -> 88 [style=dashed label="namespace-name"]
  1141 -> 875 [style=dashed label="nested-name-specifier"]
  1141 -> 876 [style=dashed label="nested-name-specifier-opt"]
  1141 -> 96 [style=dashed label="simple-template-id"]
  1141 -> 102 [style=dashed label="template-name"]
  1141 -> 106 [style=dashed label="type-name"]
  1141 -> 108 [style=dashed label="typedef-name"]
  1141 -> "1141R458d" [label="[IDENTIFIER]", style=solid]
 "1141R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1142 [label="State 1142\n\l331 function-try-block: \"try\" ctor-initializer-opt compound-statement • handler-seq\l"]
  1142 -> 1209 [style=solid label="\"catch\""]
  1142 -> 1210 [style=dashed label="handler"]
  1142 -> 1211 [style=dashed label="handler-seq"]
  1143 [label="State 1143\n\l553 parameters-and-qualifiers: \"(\" parameter-declaration-clause \")\" cv-qualifier-seq-opt ref-qualifier-opt • noexcept-specifier-opt attribute-specifier-seq-opt\l"]
  1143 -> 791 [style=solid label="\"noexcept\""]
  1143 -> 792 [style=dashed label="noexcept-specifier"]
  1143 -> 1212 [style=dashed label="noexcept-specifier-opt"]
  1143 -> "1143R480" [style=solid]
 "1143R480" [label="R480", fillcolor=3, shape=diamond, style=filled]
  1144 [label="State 1144\n\l418 member-declarator: IDENTIFIER-opt attribute-specifier-seq-opt \":\" • constant-expression brace-or-equal-initializer-opt\l"]
  1144 -> 238 [style=solid label="IDENTIFIER"]
  1144 -> 239 [style=solid label="\"noexcept\""]
  1144 -> 240 [style=solid label="\"!\""]
  1144 -> 241 [style=solid label="\"::\""]
  1144 -> 242 [style=solid label="\"this\""]
  1144 -> 8 [style=solid label="\"typename\""]
  1144 -> 243 [style=solid label="\"+\""]
  1144 -> 244 [style=solid label="\"-\""]
  1144 -> 245 [style=solid label="\"(\""]
  1144 -> 246 [style=solid label="\"&\""]
  1144 -> 247 [style=solid label="\"[\""]
  1144 -> 248 [style=solid label="\"co_await\""]
  1144 -> 249 [style=solid label="\"operator\""]
  1144 -> 21 [style=solid label="\"decltype\""]
  1144 -> 250 [style=solid label="\"*\""]
  1144 -> 251 [style=solid label="\"requires\""]
  1144 -> 252 [style=solid label="\"~\""]
  1144 -> 253 [style=solid label="\"++\""]
  1144 -> 254 [style=solid label="\"--\""]
  1144 -> 255 [style=solid label="\"dynamic_cast\""]
  1144 -> 256 [style=solid label="\"static_cast\""]
  1144 -> 257 [style=solid label="\"reinterpret_cast\""]
  1144 -> 258 [style=solid label="\"const_cast\""]
  1144 -> 259 [style=solid label="\"typeid\""]
  1144 -> 260 [style=solid label="\"literal\""]
  1144 -> 27 [style=solid label="\"char\""]
  1144 -> 28 [style=solid label="\"char8_t\""]
  1144 -> 29 [style=solid label="\"char16_t\""]
  1144 -> 30 [style=solid label="\"char32_t\""]
  1144 -> 31 [style=solid label="\"wchar_t\""]
  1144 -> 32 [style=solid label="\"bool\""]
  1144 -> 33 [style=solid label="\"short\""]
  1144 -> 34 [style=solid label="\"int\""]
  1144 -> 35 [style=solid label="\"long\""]
  1144 -> 36 [style=solid label="\"signed\""]
  1144 -> 37 [style=solid label="\"unsigned\""]
  1144 -> 38 [style=solid label="\"float\""]
  1144 -> 39 [style=solid label="\"double\""]
  1144 -> 40 [style=solid label="\"void\""]
  1144 -> 118 [style=solid label="STRING_LITERAL"]
  1144 -> 262 [style=solid label="\"sizeof\""]
  1144 -> 263 [style=solid label="\"alignof\""]
  1144 -> 265 [style=dashed label="SCOPE-opt"]
  1144 -> 266 [style=dashed label="additive-expression"]
  1144 -> 267 [style=dashed label="and-expression"]
  1144 -> 269 [style=dashed label="await-expression"]
  1144 -> 270 [style=dashed label="cast-expression"]
  1144 -> 55 [style=dashed label="class-name"]
  1144 -> 271 [style=dashed label="compare-expression"]
  1144 -> 309 [style=dashed label="conditional-expression"]
  1144 -> 1213 [style=dashed label="constant-expression"]
  1144 -> 273 [style=dashed label="conversion-function-id"]
  1144 -> 63 [style=dashed label="decltype-specifier"]
  1144 -> 274 [style=dashed label="delete-expression"]
  1144 -> 71 [style=dashed label="enum-name"]
  1144 -> 275 [style=dashed label="equality-expression"]
  1144 -> 276 [style=dashed label="exclusive-or-expression"]
  1144 -> 278 [style=dashed label="fold-expression"]
  1144 -> 279 [style=dashed label="id-expression"]
  1144 -> 280 [style=dashed label="inclusive-or-expression"]
  1144 -> 281 [style=dashed label="lambda-expression"]
  1144 -> 282 [style=dashed label="lambda-introducer"]
  1144 -> 283 [style=dashed label="literal-operator-id"]
  1144 -> 284 [style=dashed label="logical-and-expression"]
  1144 -> 311 [style=dashed label="logical-or-expression"]
  1144 -> 286 [style=dashed label="multiplicative-expression"]
  1144 -> 85 [style=dashed label="namespace-alias"]
  1144 -> 88 [style=dashed label="namespace-name"]
  1144 -> 287 [style=dashed label="nested-name-specifier"]
  1144 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1144 -> 288 [style=dashed label="new-expression"]
  1144 -> 289 [style=dashed label="noexcept-expression"]
  1144 -> 290 [style=dashed label="operator-function-id"]
  1144 -> 94 [style=dashed label="placeholder-type-specifier"]
  1144 -> 291 [style=dashed label="pm-expression"]
  1144 -> 292 [style=dashed label="postfix-expression"]
  1144 -> 293 [style=dashed label="primary-expression"]
  1144 -> 294 [style=dashed label="qualified-id"]
  1144 -> 295 [style=dashed label="relational-expression"]
  1144 -> 296 [style=dashed label="requires-expression"]
  1144 -> 297 [style=dashed label="shift-expression"]
  1144 -> 298 [style=dashed label="simple-template-id"]
  1144 -> 299 [style=dashed label="simple-type-specifier"]
  1144 -> 300 [style=dashed label="string-literal"]
  1144 -> 301 [style=dashed label="template-id"]
  1144 -> 102 [style=dashed label="template-name"]
  1144 -> 104 [style=dashed label="type-constraint"]
  1144 -> 105 [style=dashed label="type-constraint-opt"]
  1144 -> 106 [style=dashed label="type-name"]
  1144 -> 108 [style=dashed label="typedef-name"]
  1144 -> 303 [style=dashed label="typename-specifier"]
  1144 -> 304 [style=dashed label="unary-expression"]
  1144 -> 305 [style=dashed label="unary-operator"]
  1144 -> 306 [style=dashed label="unqualified-id"]
  1144 -> "1144R19" [style=solid]
 "1144R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1144 -> "1144R458d" [label="[IDENTIFIER]", style=solid]
 "1144R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1144 -> "1144R710d" [label="[\"decltype\"]", style=solid]
 "1144R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1144 -> "1144R710" [label="[\"auto\"]", style=solid]
 "1144R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1145 [label="State 1145\n\l325 function-body: \"=\" • \"default\" \";\"\l326              | \"=\" • \"delete\" \";\"\l597 pure-specifier: \"=\" • '0'\l"]
  1145 -> 1008 [style=solid label="\"delete\""]
  1145 -> 1009 [style=solid label="\"default\""]
  1145 -> 1214 [style=solid label="'0'"]
  1146 [label="State 1146\n\l599 pure-specifier-opt: pure-specifier •\l"]
  1146 -> "1146R599" [style=solid]
 "1146R599" [label="R599", fillcolor=3, shape=diamond, style=filled]
  1147 [label="State 1147\n\l415 member-declarator: declarator virt-specifier-seq-opt pure-specifier-opt •\l"]
  1147 -> "1147R415" [style=solid]
 "1147R415" [label="R415", fillcolor=3, shape=diamond, style=filled]
  1148 [label="State 1148\n\l415 member-declarator: declarator • virt-specifier-seq-opt pure-specifier-opt\l416                  | declarator • requires-clause\l417                  | declarator • brace-or-equal-initializer-opt\l"]
  1148 -> 378 [style=solid label="\"=\""]
  1148 -> 380 [style=solid label="\"{\""]
  1148 -> 612 [style=solid label="\"final\""]
  1148 -> 381 [style=solid label="\"requires\""]
  1148 -> 613 [style=solid label="\"override\""]
  1148 -> 1022 [style=dashed label="brace-or-equal-initializer"]
  1148 -> 1023 [style=dashed label="brace-or-equal-initializer-opt"]
  1148 -> 383 [style=dashed label="braced-init-list"]
  1148 -> 1215 [style=dashed label="requires-clause"]
  1148 -> 615 [style=dashed label="virt-specifier"]
  1148 -> 616 [style=dashed label="virt-specifier-seq"]
  1148 -> 1216 [style=dashed label="virt-specifier-seq-opt"]
  1148 -> "1148R118" [style=solid]
 "1148R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
  1148 -> "1148R773d" [label="[\",\", \"=\", \";\"]", style=solid]
 "1148R773d" [label="R773", fillcolor=5, shape=diamond, style=filled]
  1149 [label="State 1149\n\l420 member-declarator-list: member-declarator-list \",\" member-declarator •\l"]
  1149 -> "1149R420" [style=solid]
 "1149R420" [label="R420", fillcolor=3, shape=diamond, style=filled]
  1150 [label="State 1150\n\l103 base-specifier: attribute-specifier-seq-opt \"virtual\" access-specifier-opt class-or-decltype •\l"]
  1150 -> "1150R103" [style=solid]
 "1150R103" [label="R103", fillcolor=3, shape=diamond, style=filled]
  1151 [label="State 1151\n\l104 base-specifier: attribute-specifier-seq-opt access-specifier VIRTUAL-opt class-or-decltype •\l"]
  1151 -> "1151R104" [style=solid]
 "1151R104" [label="R104", fillcolor=3, shape=diamond, style=filled]
  1152 [label="State 1152\n\l140 class-or-decltype: nested-name-specifier \"template\" simple-template-id •\l"]
  1152 -> "1152R140" [style=solid]
 "1152R140" [label="R140", fillcolor=3, shape=diamond, style=filled]
  1153 [label="State 1153\n\l106 base-specifier-list: base-specifier-list \",\" base-specifier ELLIPSIS-opt •\l"]
  1153 -> "1153R106" [style=solid]
 "1153R106" [label="R106", fillcolor=3, shape=diamond, style=filled]
  1154 [label="State 1154\n\l364 initializer-list: initializer-list \",\" initializer-clause ELLIPSIS-opt •\l"]
  1154 -> "1154R364" [style=solid]
 "1154R364" [label="R364", fillcolor=3, shape=diamond, style=filled]
  1155 [label="State 1155\n\l215 deduction-guide: explicit-specifier-opt template-name \"(\" parameter-declaration-clause \")\" \"->\" simple-template-id • \";\"\l"]
  1155 -> 1217 [style=solid label="\";\""]
  1156 [label="State 1156\n\l427 module-declaration: EXPORT-opt \"module\" module-name module-partition-opt attribute-specifier-seq-opt \";\" •\l"]
  1156 -> "1156R427" [style=solid]
 "1156R427" [label="R427", fillcolor=3, shape=diamond, style=filled]
  1157 [label="State 1157\n\l584 private-module-fragment: \"module\" \":\" \"private\" \";\" • declaration-seq-opt\l"]
  1157 -> 1 [style=solid label="\"constexpr\""]
  1157 -> 2 [style=solid label="\"export\""]
  1157 -> 3 [style=solid label="\"extern\""]
  1157 -> 4 [style=solid label="IDENTIFIER"]
  1157 -> 5 [style=solid label="\"inline\""]
  1157 -> 6 [style=solid label="\"::\""]
  1157 -> 7 [style=solid label="\"template\""]
  1157 -> 8 [style=solid label="\"typename\""]
  1157 -> 9 [style=solid label="\"virtual\""]
  1157 -> 10 [style=solid label="\"using\""]
  1157 -> 11 [style=solid label="\";\""]
  1157 -> 12 [style=solid label="\"class\""]
  1157 -> 13 [style=solid label="\"struct\""]
  1157 -> 14 [style=solid label="\"union\""]
  1157 -> 15 [style=solid label="\"const\""]
  1157 -> 16 [style=solid label="\"volatile\""]
  1157 -> 17 [style=solid label="\"friend\""]
  1157 -> 18 [style=solid label="\"typedef\""]
  1157 -> 19 [style=solid label="\"consteval\""]
  1157 -> 20 [style=solid label="\"constinit\""]
  1157 -> 21 [style=solid label="\"decltype\""]
  1157 -> 22 [style=solid label="\"enum\""]
  1157 -> 23 [style=solid label="\"explicit\""]
  1157 -> 25 [style=solid label="\"import\""]
  1157 -> 26 [style=solid label="\"namespace\""]
  1157 -> 27 [style=solid label="\"char\""]
  1157 -> 28 [style=solid label="\"char8_t\""]
  1157 -> 29 [style=solid label="\"char16_t\""]
  1157 -> 30 [style=solid label="\"char32_t\""]
  1157 -> 31 [style=solid label="\"wchar_t\""]
  1157 -> 32 [style=solid label="\"bool\""]
  1157 -> 33 [style=solid label="\"short\""]
  1157 -> 34 [style=solid label="\"int\""]
  1157 -> 35 [style=solid label="\"long\""]
  1157 -> 36 [style=solid label="\"signed\""]
  1157 -> 37 [style=solid label="\"unsigned\""]
  1157 -> 38 [style=solid label="\"float\""]
  1157 -> 39 [style=solid label="\"double\""]
  1157 -> 40 [style=solid label="\"void\""]
  1157 -> 41 [style=solid label="\"static_assert\""]
  1157 -> 42 [style=solid label="\"static\""]
  1157 -> 43 [style=solid label="\"thread_local\""]
  1157 -> 44 [style=solid label="\"mutable\""]
  1157 -> 45 [style=dashed label="EXTERN-opt"]
  1157 -> 46 [style=dashed label="INLINE-opt"]
  1157 -> 47 [style=dashed label="alias-declaration"]
  1157 -> 48 [style=dashed label="asm-declaration"]
  1157 -> 49 [style=dashed label="attribute-declaration"]
  1157 -> 50 [style=dashed label="attribute-specifier-seq"]
  1157 -> 51 [style=dashed label="attribute-specifier-seq-opt"]
  1157 -> 52 [style=dashed label="block-declaration"]
  1157 -> 53 [style=dashed label="class-head"]
  1157 -> 54 [style=dashed label="class-key"]
  1157 -> 55 [style=dashed label="class-name"]
  1157 -> 56 [style=dashed label="class-specifier"]
  1157 -> 57 [style=dashed label="cv-qualifier"]
  1157 -> 58 [style=dashed label="decl-specifier"]
  1157 -> 59 [style=dashed label="decl-specifier-seq"]
  1157 -> 60 [style=dashed label="declaration"]
  1157 -> 61 [style=dashed label="declaration-seq"]
  1157 -> 1218 [style=dashed label="declaration-seq-opt"]
  1157 -> 63 [style=dashed label="decltype-specifier"]
  1157 -> 64 [style=dashed label="deduction-guide"]
  1157 -> 65 [style=dashed label="defining-type-specifier"]
  1157 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1157 -> 67 [style=dashed label="elaborated-type-specifier"]
  1157 -> 68 [style=dashed label="empty-declaration"]
  1157 -> 69 [style=dashed label="enum-head"]
  1157 -> 70 [style=dashed label="enum-key"]
  1157 -> 71 [style=dashed label="enum-name"]
  1157 -> 72 [style=dashed label="enum-specifier"]
  1157 -> 73 [style=dashed label="explicit-instantiation"]
  1157 -> 74 [style=dashed label="explicit-specialization"]
  1157 -> 75 [style=dashed label="explicit-specifier"]
  1157 -> 76 [style=dashed label="explicit-specifier-opt"]
  1157 -> 77 [style=dashed label="export-declaration"]
  1157 -> 78 [style=dashed label="function-definition"]
  1157 -> 79 [style=dashed label="function-specifier"]
  1157 -> 82 [style=dashed label="linkage-specification"]
  1157 -> 83 [style=dashed label="module-import-declaration"]
  1157 -> 84 [style=dashed label="named-namespace-definition"]
  1157 -> 85 [style=dashed label="namespace-alias"]
  1157 -> 86 [style=dashed label="namespace-alias-definition"]
  1157 -> 87 [style=dashed label="namespace-definition"]
  1157 -> 88 [style=dashed label="namespace-name"]
  1157 -> 89 [style=dashed label="nested-name-specifier"]
  1157 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1157 -> 91 [style=dashed label="nested-namespace-definition"]
  1157 -> 92 [style=dashed label="nodeclspec-function-declaration"]
  1157 -> 93 [style=dashed label="opaque-enum-declaration"]
  1157 -> 94 [style=dashed label="placeholder-type-specifier"]
  1157 -> 95 [style=dashed label="simple-declaration"]
  1157 -> 96 [style=dashed label="simple-template-id"]
  1157 -> 97 [style=dashed label="simple-type-specifier"]
  1157 -> 98 [style=dashed label="static_assert-declaration"]
  1157 -> 99 [style=dashed label="storage-class-specifier"]
  1157 -> 100 [style=dashed label="template-declaration"]
  1157 -> 101 [style=dashed label="template-head"]
  1157 -> 102 [style=dashed label="template-name"]
  1157 -> 104 [style=dashed label="type-constraint"]
  1157 -> 105 [style=dashed label="type-constraint-opt"]
  1157 -> 106 [style=dashed label="type-name"]
  1157 -> 107 [style=dashed label="type-specifier"]
  1157 -> 108 [style=dashed label="typedef-name"]
  1157 -> 109 [style=dashed label="typename-specifier"]
  1157 -> 110 [style=dashed label="unnamed-namespace-definition"]
  1157 -> 111 [style=dashed label="using-declaration"]
  1157 -> 112 [style=dashed label="using-directive"]
  1157 -> 113 [style=dashed label="using-enum-declaration"]
  1157 -> "1157R9d" [label="[\"template\"]", style=solid]
 "1157R9d" [label="R9", fillcolor=5, shape=diamond, style=filled]
  1157 -> "1157R13d" [label="[\"namespace\"]", style=solid]
 "1157R13d" [label="R13", fillcolor=5, shape=diamond, style=filled]
  1157 -> "1157R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1157R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1157 -> "1157R83" [label="[]", style=solid]
 "1157R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1157 -> "1157R208" [label="[$end]", style=solid]
 "1157R208" [label="R208", fillcolor=3, shape=diamond, style=filled]
  1157 -> "1157R268d" [label="[IDENTIFIER]", style=solid]
 "1157R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  1157 -> "1157R458d" [label="[IDENTIFIER]", style=solid]
 "1157R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1157 -> "1157R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1157R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1158 [label="State 1158\n\l483 noptr-abstract-declarator: noptr-abstract-declarator-opt \"[\" constant-expression-opt \"]\" • attribute-specifier-seq-opt\l"]
  1158 -> 177 [style=dashed label="attribute-specifier-seq"]
  1158 -> 1219 [style=dashed label="attribute-specifier-seq-opt"]
  1158 -> "1158R83" [style=solid]
 "1158R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1159 [label="State 1159\n\l488 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator \"[\" constant-expression-opt \"]\" • attribute-specifier-seq-opt\l"]
  1159 -> 177 [style=dashed label="attribute-specifier-seq"]
  1159 -> 1220 [style=dashed label="attribute-specifier-seq-opt"]
  1159 -> "1159R83" [style=solid]
 "1159R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1160 [label="State 1160\n\l546 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq abstract-declarator-opt \"=\" initializer-clause •\l"]
  1160 -> "1160R546" [style=solid]
 "1160R546" [label="R546", fillcolor=3, shape=diamond, style=filled]
  1161 [label="State 1161\n\l544 parameter-declaration: attribute-specifier-seq-opt THIS-opt decl-specifier-seq declarator \"=\" initializer-clause •\l"]
  1161 -> "1161R544" [style=solid]
 "1161R544" [label="R544", fillcolor=3, shape=diamond, style=filled]
  1162 [label="State 1162\n\l287 fold-expression: \"(\" cast-expression fold-operator \"...\" fold-operator cast-expression • \")\"\l"]
  1162 -> 1221 [style=solid label="\")\""]
  1163 [label="State 1163\n\l724 type-requirement: \"typename\" nested-name-specifier-opt type-name • \";\"\l"]
  1163 -> 1222 [style=solid label="\";\""]
  1164 [label="State 1164\n\l148 compound-requirement: \"{\" expression \"}\" • NOEXCEPT-opt return-type-requirement-opt \";\"\l"]
  1164 -> 1223 [style=solid label="\"noexcept\""]
  1164 -> 1224 [style=dashed label="NOEXCEPT-opt"]
  1164 -> "1164R15" [style=solid]
 "1164R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  1165 [label="State 1165\n\l461 nested-requirement: \"requires\" constraint-expression \";\" •\l"]
  1165 -> "1165R461" [style=solid]
 "1165R461" [label="R461", fillcolor=3, shape=diamond, style=filled]
  1166 [label="State 1166\n\l278 expression: expression • \",\" assignment-expression\l570 postfix-expression: \"dynamic_cast\" \"<\" type-id \">\" \"(\" expression • \")\"\l"]
  1166 -> 534 [style=solid label="\",\""]
  1166 -> 1225 [style=solid label="\")\""]
  1167 [label="State 1167\n\l278 expression: expression • \",\" assignment-expression\l571 postfix-expression: \"static_cast\" \"<\" type-id \">\" \"(\" expression • \")\"\l"]
  1167 -> 534 [style=solid label="\",\""]
  1167 -> 1226 [style=solid label="\")\""]
  1168 [label="State 1168\n\l278 expression: expression • \",\" assignment-expression\l572 postfix-expression: \"reinterpret_cast\" \"<\" type-id \">\" \"(\" expression • \")\"\l"]
  1168 -> 534 [style=solid label="\",\""]
  1168 -> 1227 [style=solid label="\")\""]
  1169 [label="State 1169\n\l278 expression: expression • \",\" assignment-expression\l573 postfix-expression: \"const_cast\" \"<\" type-id \">\" \"(\" expression • \")\"\l"]
  1169 -> 534 [style=solid label="\",\""]
  1169 -> 1228 [style=solid label="\")\""]
  1170 [label="State 1170\n\l467 new-expression: SCOPE-opt \"new\" new-placement-opt \"(\" type-id \")\" • new-initializer-opt\l"]
  1170 -> 1077 [style=solid label="\"(\""]
  1170 -> 380 [style=solid label="\"{\""]
  1170 -> 1078 [style=dashed label="braced-init-list"]
  1170 -> 1079 [style=dashed label="new-initializer"]
  1170 -> 1229 [style=dashed label="new-initializer-opt"]
  1170 -> "1170R470d" [label="[\"{\"]", style=solid]
 "1170R470d" [label="R470", fillcolor=5, shape=diamond, style=filled]
  1170 -> "1170R470" [style=solid]
 "1170R470" [label="R470", fillcolor=3, shape=diamond, style=filled]
  1171 [label="State 1171\n\l468 new-initializer: \"(\" expression-list-opt • \")\"\l"]
  1171 -> 1230 [style=solid label="\")\""]
  1172 [label="State 1172\n\l494 noptr-new-declarator: \"[\" expression-opt • \"]\" attribute-specifier-seq-opt\l"]
  1172 -> 1231 [style=solid label="\"]\""]
  1173 [label="State 1173\n\l495 noptr-new-declarator: noptr-new-declarator \"[\" • constant-expression \"]\" attribute-specifier-seq-opt\l"]
  1173 -> 238 [style=solid label="IDENTIFIER"]
  1173 -> 239 [style=solid label="\"noexcept\""]
  1173 -> 240 [style=solid label="\"!\""]
  1173 -> 241 [style=solid label="\"::\""]
  1173 -> 242 [style=solid label="\"this\""]
  1173 -> 8 [style=solid label="\"typename\""]
  1173 -> 243 [style=solid label="\"+\""]
  1173 -> 244 [style=solid label="\"-\""]
  1173 -> 245 [style=solid label="\"(\""]
  1173 -> 246 [style=solid label="\"&\""]
  1173 -> 247 [style=solid label="\"[\""]
  1173 -> 248 [style=solid label="\"co_await\""]
  1173 -> 249 [style=solid label="\"operator\""]
  1173 -> 21 [style=solid label="\"decltype\""]
  1173 -> 250 [style=solid label="\"*\""]
  1173 -> 251 [style=solid label="\"requires\""]
  1173 -> 252 [style=solid label="\"~\""]
  1173 -> 253 [style=solid label="\"++\""]
  1173 -> 254 [style=solid label="\"--\""]
  1173 -> 255 [style=solid label="\"dynamic_cast\""]
  1173 -> 256 [style=solid label="\"static_cast\""]
  1173 -> 257 [style=solid label="\"reinterpret_cast\""]
  1173 -> 258 [style=solid label="\"const_cast\""]
  1173 -> 259 [style=solid label="\"typeid\""]
  1173 -> 260 [style=solid label="\"literal\""]
  1173 -> 27 [style=solid label="\"char\""]
  1173 -> 28 [style=solid label="\"char8_t\""]
  1173 -> 29 [style=solid label="\"char16_t\""]
  1173 -> 30 [style=solid label="\"char32_t\""]
  1173 -> 31 [style=solid label="\"wchar_t\""]
  1173 -> 32 [style=solid label="\"bool\""]
  1173 -> 33 [style=solid label="\"short\""]
  1173 -> 34 [style=solid label="\"int\""]
  1173 -> 35 [style=solid label="\"long\""]
  1173 -> 36 [style=solid label="\"signed\""]
  1173 -> 37 [style=solid label="\"unsigned\""]
  1173 -> 38 [style=solid label="\"float\""]
  1173 -> 39 [style=solid label="\"double\""]
  1173 -> 40 [style=solid label="\"void\""]
  1173 -> 118 [style=solid label="STRING_LITERAL"]
  1173 -> 262 [style=solid label="\"sizeof\""]
  1173 -> 263 [style=solid label="\"alignof\""]
  1173 -> 265 [style=dashed label="SCOPE-opt"]
  1173 -> 266 [style=dashed label="additive-expression"]
  1173 -> 267 [style=dashed label="and-expression"]
  1173 -> 269 [style=dashed label="await-expression"]
  1173 -> 270 [style=dashed label="cast-expression"]
  1173 -> 55 [style=dashed label="class-name"]
  1173 -> 271 [style=dashed label="compare-expression"]
  1173 -> 309 [style=dashed label="conditional-expression"]
  1173 -> 1232 [style=dashed label="constant-expression"]
  1173 -> 273 [style=dashed label="conversion-function-id"]
  1173 -> 63 [style=dashed label="decltype-specifier"]
  1173 -> 274 [style=dashed label="delete-expression"]
  1173 -> 71 [style=dashed label="enum-name"]
  1173 -> 275 [style=dashed label="equality-expression"]
  1173 -> 276 [style=dashed label="exclusive-or-expression"]
  1173 -> 278 [style=dashed label="fold-expression"]
  1173 -> 279 [style=dashed label="id-expression"]
  1173 -> 280 [style=dashed label="inclusive-or-expression"]
  1173 -> 281 [style=dashed label="lambda-expression"]
  1173 -> 282 [style=dashed label="lambda-introducer"]
  1173 -> 283 [style=dashed label="literal-operator-id"]
  1173 -> 284 [style=dashed label="logical-and-expression"]
  1173 -> 311 [style=dashed label="logical-or-expression"]
  1173 -> 286 [style=dashed label="multiplicative-expression"]
  1173 -> 85 [style=dashed label="namespace-alias"]
  1173 -> 88 [style=dashed label="namespace-name"]
  1173 -> 287 [style=dashed label="nested-name-specifier"]
  1173 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1173 -> 288 [style=dashed label="new-expression"]
  1173 -> 289 [style=dashed label="noexcept-expression"]
  1173 -> 290 [style=dashed label="operator-function-id"]
  1173 -> 94 [style=dashed label="placeholder-type-specifier"]
  1173 -> 291 [style=dashed label="pm-expression"]
  1173 -> 292 [style=dashed label="postfix-expression"]
  1173 -> 293 [style=dashed label="primary-expression"]
  1173 -> 294 [style=dashed label="qualified-id"]
  1173 -> 295 [style=dashed label="relational-expression"]
  1173 -> 296 [style=dashed label="requires-expression"]
  1173 -> 297 [style=dashed label="shift-expression"]
  1173 -> 298 [style=dashed label="simple-template-id"]
  1173 -> 299 [style=dashed label="simple-type-specifier"]
  1173 -> 300 [style=dashed label="string-literal"]
  1173 -> 301 [style=dashed label="template-id"]
  1173 -> 102 [style=dashed label="template-name"]
  1173 -> 104 [style=dashed label="type-constraint"]
  1173 -> 105 [style=dashed label="type-constraint-opt"]
  1173 -> 106 [style=dashed label="type-name"]
  1173 -> 108 [style=dashed label="typedef-name"]
  1173 -> 303 [style=dashed label="typename-specifier"]
  1173 -> 304 [style=dashed label="unary-expression"]
  1173 -> 305 [style=dashed label="unary-operator"]
  1173 -> 306 [style=dashed label="unqualified-id"]
  1173 -> "1173R19" [style=solid]
 "1173R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1173 -> "1173R458d" [label="[IDENTIFIER]", style=solid]
 "1173R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1173 -> "1173R710d" [label="[\"decltype\"]", style=solid]
 "1173R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1173 -> "1173R710" [label="[\"auto\"]", style=solid]
 "1173R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1174 [label="State 1174\n\l462 new-declarator: ptr-operator new-declarator-opt •\l"]
  1174 -> "1174R462" [style=solid]
 "1174R462" [label="R462", fillcolor=3, shape=diamond, style=filled]
  1175 [label="State 1175\n\l385 lambda-declarator: \"(\" parameter-declaration-clause \")\" lambda-specifiers requires-clause-opt •\l"]
  1175 -> "1175R385" [style=solid]
 "1175R385" [label="R385", fillcolor=3, shape=diamond, style=filled]
  1176 [label="State 1176\n\l387 lambda-expression: lambda-introducer \"<\" template-parameter-list \">\" requires-clause-opt lambda-declarator • compound-statement\l"]
  1176 -> 794 [style=solid label="\"{\""]
  1176 -> 1233 [style=dashed label="compound-statement"]
  1177 [label="State 1177\n\l478 noexcept-specifier: \"noexcept\" \"(\" constant-expression \")\" •\l"]
  1177 -> "1177R478" [style=solid]
 "1177R478" [label="R478", fillcolor=3, shape=diamond, style=filled]
  1178 [label="State 1178\n\l376 labeled-statement: attribute-specifier-seq-opt IDENTIFIER \":\" • statement\l"]
  1178 -> 1 [style=solid label="\"constexpr\""]
  1178 -> 150 [style=solid label="\"extern\""]
  1178 -> 4 [style=solid label="IDENTIFIER"]
  1178 -> 151 [style=solid label="\"inline\""]
  1178 -> 6 [style=solid label="\"::\""]
  1178 -> 8 [style=solid label="\"typename\""]
  1178 -> 9 [style=solid label="\"virtual\""]
  1178 -> 10 [style=solid label="\"using\""]
  1178 -> 12 [style=solid label="\"class\""]
  1178 -> 13 [style=solid label="\"struct\""]
  1178 -> 14 [style=solid label="\"union\""]
  1178 -> 15 [style=solid label="\"const\""]
  1178 -> 16 [style=solid label="\"volatile\""]
  1178 -> 17 [style=solid label="\"friend\""]
  1178 -> 18 [style=solid label="\"typedef\""]
  1178 -> 19 [style=solid label="\"consteval\""]
  1178 -> 20 [style=solid label="\"constinit\""]
  1178 -> 21 [style=solid label="\"decltype\""]
  1178 -> 22 [style=solid label="\"enum\""]
  1178 -> 23 [style=solid label="\"explicit\""]
  1178 -> 972 [style=solid label="\"namespace\""]
  1178 -> 27 [style=solid label="\"char\""]
  1178 -> 28 [style=solid label="\"char8_t\""]
  1178 -> 29 [style=solid label="\"char16_t\""]
  1178 -> 30 [style=solid label="\"char32_t\""]
  1178 -> 31 [style=solid label="\"wchar_t\""]
  1178 -> 32 [style=solid label="\"bool\""]
  1178 -> 33 [style=solid label="\"short\""]
  1178 -> 34 [style=solid label="\"int\""]
  1178 -> 35 [style=solid label="\"long\""]
  1178 -> 36 [style=solid label="\"signed\""]
  1178 -> 37 [style=solid label="\"unsigned\""]
  1178 -> 38 [style=solid label="\"float\""]
  1178 -> 39 [style=solid label="\"double\""]
  1178 -> 40 [style=solid label="\"void\""]
  1178 -> 41 [style=solid label="\"static_assert\""]
  1178 -> 42 [style=solid label="\"static\""]
  1178 -> 43 [style=solid label="\"thread_local\""]
  1178 -> 44 [style=solid label="\"mutable\""]
  1178 -> 47 [style=dashed label="alias-declaration"]
  1178 -> 48 [style=dashed label="asm-declaration"]
  1178 -> 973 [style=dashed label="attribute-specifier-seq"]
  1178 -> 974 [style=dashed label="attribute-specifier-seq-opt"]
  1178 -> 975 [style=dashed label="block-declaration"]
  1178 -> 53 [style=dashed label="class-head"]
  1178 -> 54 [style=dashed label="class-key"]
  1178 -> 55 [style=dashed label="class-name"]
  1178 -> 56 [style=dashed label="class-specifier"]
  1178 -> 57 [style=dashed label="cv-qualifier"]
  1178 -> 58 [style=dashed label="decl-specifier"]
  1178 -> 59 [style=dashed label="decl-specifier-seq"]
  1178 -> 976 [style=dashed label="declaration-statement"]
  1178 -> 63 [style=dashed label="decltype-specifier"]
  1178 -> 65 [style=dashed label="defining-type-specifier"]
  1178 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1178 -> 67 [style=dashed label="elaborated-type-specifier"]
  1178 -> 69 [style=dashed label="enum-head"]
  1178 -> 70 [style=dashed label="enum-key"]
  1178 -> 71 [style=dashed label="enum-name"]
  1178 -> 72 [style=dashed label="enum-specifier"]
  1178 -> 155 [style=dashed label="explicit-specifier"]
  1178 -> 79 [style=dashed label="function-specifier"]
  1178 -> 977 [style=dashed label="labeled-statement"]
  1178 -> 85 [style=dashed label="namespace-alias"]
  1178 -> 86 [style=dashed label="namespace-alias-definition"]
  1178 -> 88 [style=dashed label="namespace-name"]
  1178 -> 89 [style=dashed label="nested-name-specifier"]
  1178 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1178 -> 93 [style=dashed label="opaque-enum-declaration"]
  1178 -> 94 [style=dashed label="placeholder-type-specifier"]
  1178 -> 95 [style=dashed label="simple-declaration"]
  1178 -> 96 [style=dashed label="simple-template-id"]
  1178 -> 97 [style=dashed label="simple-type-specifier"]
  1178 -> 1234 [style=dashed label="statement"]
  1178 -> 98 [style=dashed label="static_assert-declaration"]
  1178 -> 99 [style=dashed label="storage-class-specifier"]
  1178 -> 102 [style=dashed label="template-name"]
  1178 -> 104 [style=dashed label="type-constraint"]
  1178 -> 105 [style=dashed label="type-constraint-opt"]
  1178 -> 106 [style=dashed label="type-name"]
  1178 -> 107 [style=dashed label="type-specifier"]
  1178 -> 108 [style=dashed label="typedef-name"]
  1178 -> 109 [style=dashed label="typename-specifier"]
  1178 -> 111 [style=dashed label="using-declaration"]
  1178 -> 112 [style=dashed label="using-directive"]
  1178 -> 113 [style=dashed label="using-enum-declaration"]
  1178 -> "1178R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1178R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1178 -> "1178R83" [style=solid]
 "1178R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1178 -> "1178R458d" [label="[IDENTIFIER]", style=solid]
 "1178R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1178 -> "1178R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1178R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1179 [label="State 1179\n\l274 expr-or-braced-init-list: braced-init-list •\l"]
  1179 -> "1179R274" [style=solid]
 "1179R274" [label="R274", fillcolor=3, shape=diamond, style=filled]
  1180 [label="State 1180\n\l276 expr-or-braced-init-list-opt: expr-or-braced-init-list •\l"]
  1180 -> "1180R276" [style=solid]
 "1180R276" [label="R276", fillcolor=3, shape=diamond, style=filled]
  1181 [label="State 1181\n\l171 coroutine-return-statement: \"co_return\" expr-or-braced-init-list-opt • \";\"\l"]
  1181 -> 1235 [style=solid label="\";\""]
  1182 [label="State 1182\n\l273 expr-or-braced-init-list: expression •\l278 expression: expression • \",\" assignment-expression\l"]
  1182 -> 534 [style=solid label="\",\""]
  1182 -> "1182R273" [style=solid]
 "1182R273" [label="R273", fillcolor=3, shape=diamond, style=filled]
  1183 [label="State 1183\n\l378 labeled-statement: attribute-specifier-seq-opt \"default\" \":\" • statement\l"]
  1183 -> 1 [style=solid label="\"constexpr\""]
  1183 -> 150 [style=solid label="\"extern\""]
  1183 -> 4 [style=solid label="IDENTIFIER"]
  1183 -> 151 [style=solid label="\"inline\""]
  1183 -> 6 [style=solid label="\"::\""]
  1183 -> 8 [style=solid label="\"typename\""]
  1183 -> 9 [style=solid label="\"virtual\""]
  1183 -> 10 [style=solid label="\"using\""]
  1183 -> 12 [style=solid label="\"class\""]
  1183 -> 13 [style=solid label="\"struct\""]
  1183 -> 14 [style=solid label="\"union\""]
  1183 -> 15 [style=solid label="\"const\""]
  1183 -> 16 [style=solid label="\"volatile\""]
  1183 -> 17 [style=solid label="\"friend\""]
  1183 -> 18 [style=solid label="\"typedef\""]
  1183 -> 19 [style=solid label="\"consteval\""]
  1183 -> 20 [style=solid label="\"constinit\""]
  1183 -> 21 [style=solid label="\"decltype\""]
  1183 -> 22 [style=solid label="\"enum\""]
  1183 -> 23 [style=solid label="\"explicit\""]
  1183 -> 972 [style=solid label="\"namespace\""]
  1183 -> 27 [style=solid label="\"char\""]
  1183 -> 28 [style=solid label="\"char8_t\""]
  1183 -> 29 [style=solid label="\"char16_t\""]
  1183 -> 30 [style=solid label="\"char32_t\""]
  1183 -> 31 [style=solid label="\"wchar_t\""]
  1183 -> 32 [style=solid label="\"bool\""]
  1183 -> 33 [style=solid label="\"short\""]
  1183 -> 34 [style=solid label="\"int\""]
  1183 -> 35 [style=solid label="\"long\""]
  1183 -> 36 [style=solid label="\"signed\""]
  1183 -> 37 [style=solid label="\"unsigned\""]
  1183 -> 38 [style=solid label="\"float\""]
  1183 -> 39 [style=solid label="\"double\""]
  1183 -> 40 [style=solid label="\"void\""]
  1183 -> 41 [style=solid label="\"static_assert\""]
  1183 -> 42 [style=solid label="\"static\""]
  1183 -> 43 [style=solid label="\"thread_local\""]
  1183 -> 44 [style=solid label="\"mutable\""]
  1183 -> 47 [style=dashed label="alias-declaration"]
  1183 -> 48 [style=dashed label="asm-declaration"]
  1183 -> 973 [style=dashed label="attribute-specifier-seq"]
  1183 -> 974 [style=dashed label="attribute-specifier-seq-opt"]
  1183 -> 975 [style=dashed label="block-declaration"]
  1183 -> 53 [style=dashed label="class-head"]
  1183 -> 54 [style=dashed label="class-key"]
  1183 -> 55 [style=dashed label="class-name"]
  1183 -> 56 [style=dashed label="class-specifier"]
  1183 -> 57 [style=dashed label="cv-qualifier"]
  1183 -> 58 [style=dashed label="decl-specifier"]
  1183 -> 59 [style=dashed label="decl-specifier-seq"]
  1183 -> 976 [style=dashed label="declaration-statement"]
  1183 -> 63 [style=dashed label="decltype-specifier"]
  1183 -> 65 [style=dashed label="defining-type-specifier"]
  1183 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1183 -> 67 [style=dashed label="elaborated-type-specifier"]
  1183 -> 69 [style=dashed label="enum-head"]
  1183 -> 70 [style=dashed label="enum-key"]
  1183 -> 71 [style=dashed label="enum-name"]
  1183 -> 72 [style=dashed label="enum-specifier"]
  1183 -> 155 [style=dashed label="explicit-specifier"]
  1183 -> 79 [style=dashed label="function-specifier"]
  1183 -> 977 [style=dashed label="labeled-statement"]
  1183 -> 85 [style=dashed label="namespace-alias"]
  1183 -> 86 [style=dashed label="namespace-alias-definition"]
  1183 -> 88 [style=dashed label="namespace-name"]
  1183 -> 89 [style=dashed label="nested-name-specifier"]
  1183 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1183 -> 93 [style=dashed label="opaque-enum-declaration"]
  1183 -> 94 [style=dashed label="placeholder-type-specifier"]
  1183 -> 95 [style=dashed label="simple-declaration"]
  1183 -> 96 [style=dashed label="simple-template-id"]
  1183 -> 97 [style=dashed label="simple-type-specifier"]
  1183 -> 1236 [style=dashed label="statement"]
  1183 -> 98 [style=dashed label="static_assert-declaration"]
  1183 -> 99 [style=dashed label="storage-class-specifier"]
  1183 -> 102 [style=dashed label="template-name"]
  1183 -> 104 [style=dashed label="type-constraint"]
  1183 -> 105 [style=dashed label="type-constraint-opt"]
  1183 -> 106 [style=dashed label="type-name"]
  1183 -> 107 [style=dashed label="type-specifier"]
  1183 -> 108 [style=dashed label="typedef-name"]
  1183 -> 109 [style=dashed label="typename-specifier"]
  1183 -> 111 [style=dashed label="using-declaration"]
  1183 -> 112 [style=dashed label="using-directive"]
  1183 -> 113 [style=dashed label="using-enum-declaration"]
  1183 -> "1183R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1183R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1183 -> "1183R83" [style=solid]
 "1183R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1183 -> "1183R458d" [label="[IDENTIFIER]", style=solid]
 "1183R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1183 -> "1183R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1183R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1184 [label="State 1184\n\l707 try-block: \"try\" compound-statement • handler-seq\l"]
  1184 -> 1209 [style=solid label="\"catch\""]
  1184 -> 1210 [style=dashed label="handler"]
  1184 -> 1237 [style=dashed label="handler-seq"]
  1185 [label="State 1185\n\l367 iteration-statement: \"while\" \"(\" • condition \")\" statement\l"]
  1185 -> 238 [style=solid label="IDENTIFIER"]
  1185 -> 239 [style=solid label="\"noexcept\""]
  1185 -> 240 [style=solid label="\"!\""]
  1185 -> 241 [style=solid label="\"::\""]
  1185 -> 242 [style=solid label="\"this\""]
  1185 -> 8 [style=solid label="\"typename\""]
  1185 -> 243 [style=solid label="\"+\""]
  1185 -> 244 [style=solid label="\"-\""]
  1185 -> 245 [style=solid label="\"(\""]
  1185 -> 246 [style=solid label="\"&\""]
  1185 -> 247 [style=solid label="\"[\""]
  1185 -> 248 [style=solid label="\"co_await\""]
  1185 -> 249 [style=solid label="\"operator\""]
  1185 -> 21 [style=solid label="\"decltype\""]
  1185 -> 250 [style=solid label="\"*\""]
  1185 -> 251 [style=solid label="\"requires\""]
  1185 -> 252 [style=solid label="\"~\""]
  1185 -> 253 [style=solid label="\"++\""]
  1185 -> 254 [style=solid label="\"--\""]
  1185 -> 255 [style=solid label="\"dynamic_cast\""]
  1185 -> 256 [style=solid label="\"static_cast\""]
  1185 -> 257 [style=solid label="\"reinterpret_cast\""]
  1185 -> 258 [style=solid label="\"const_cast\""]
  1185 -> 259 [style=solid label="\"typeid\""]
  1185 -> 260 [style=solid label="\"literal\""]
  1185 -> 27 [style=solid label="\"char\""]
  1185 -> 28 [style=solid label="\"char8_t\""]
  1185 -> 29 [style=solid label="\"char16_t\""]
  1185 -> 30 [style=solid label="\"char32_t\""]
  1185 -> 31 [style=solid label="\"wchar_t\""]
  1185 -> 32 [style=solid label="\"bool\""]
  1185 -> 33 [style=solid label="\"short\""]
  1185 -> 34 [style=solid label="\"int\""]
  1185 -> 35 [style=solid label="\"long\""]
  1185 -> 36 [style=solid label="\"signed\""]
  1185 -> 37 [style=solid label="\"unsigned\""]
  1185 -> 38 [style=solid label="\"float\""]
  1185 -> 39 [style=solid label="\"double\""]
  1185 -> 40 [style=solid label="\"void\""]
  1185 -> 118 [style=solid label="STRING_LITERAL"]
  1185 -> 261 [style=solid label="\"throw\""]
  1185 -> 262 [style=solid label="\"sizeof\""]
  1185 -> 263 [style=solid label="\"alignof\""]
  1185 -> 264 [style=solid label="\"co_yield\""]
  1185 -> 265 [style=dashed label="SCOPE-opt"]
  1185 -> 266 [style=dashed label="additive-expression"]
  1185 -> 267 [style=dashed label="and-expression"]
  1185 -> 268 [style=dashed label="assignment-expression"]
  1185 -> 177 [style=dashed label="attribute-specifier-seq"]
  1185 -> 1238 [style=dashed label="attribute-specifier-seq-opt"]
  1185 -> 269 [style=dashed label="await-expression"]
  1185 -> 270 [style=dashed label="cast-expression"]
  1185 -> 55 [style=dashed label="class-name"]
  1185 -> 271 [style=dashed label="compare-expression"]
  1185 -> 1239 [style=dashed label="condition"]
  1185 -> 272 [style=dashed label="conditional-expression"]
  1185 -> 273 [style=dashed label="conversion-function-id"]
  1185 -> 63 [style=dashed label="decltype-specifier"]
  1185 -> 274 [style=dashed label="delete-expression"]
  1185 -> 71 [style=dashed label="enum-name"]
  1185 -> 275 [style=dashed label="equality-expression"]
  1185 -> 276 [style=dashed label="exclusive-or-expression"]
  1185 -> 1240 [style=dashed label="expression"]
  1185 -> 278 [style=dashed label="fold-expression"]
  1185 -> 279 [style=dashed label="id-expression"]
  1185 -> 280 [style=dashed label="inclusive-or-expression"]
  1185 -> 281 [style=dashed label="lambda-expression"]
  1185 -> 282 [style=dashed label="lambda-introducer"]
  1185 -> 283 [style=dashed label="literal-operator-id"]
  1185 -> 284 [style=dashed label="logical-and-expression"]
  1185 -> 285 [style=dashed label="logical-or-expression"]
  1185 -> 286 [style=dashed label="multiplicative-expression"]
  1185 -> 85 [style=dashed label="namespace-alias"]
  1185 -> 88 [style=dashed label="namespace-name"]
  1185 -> 287 [style=dashed label="nested-name-specifier"]
  1185 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1185 -> 288 [style=dashed label="new-expression"]
  1185 -> 289 [style=dashed label="noexcept-expression"]
  1185 -> 290 [style=dashed label="operator-function-id"]
  1185 -> 94 [style=dashed label="placeholder-type-specifier"]
  1185 -> 291 [style=dashed label="pm-expression"]
  1185 -> 292 [style=dashed label="postfix-expression"]
  1185 -> 293 [style=dashed label="primary-expression"]
  1185 -> 294 [style=dashed label="qualified-id"]
  1185 -> 295 [style=dashed label="relational-expression"]
  1185 -> 296 [style=dashed label="requires-expression"]
  1185 -> 297 [style=dashed label="shift-expression"]
  1185 -> 298 [style=dashed label="simple-template-id"]
  1185 -> 299 [style=dashed label="simple-type-specifier"]
  1185 -> 300 [style=dashed label="string-literal"]
  1185 -> 301 [style=dashed label="template-id"]
  1185 -> 102 [style=dashed label="template-name"]
  1185 -> 302 [style=dashed label="throw-expression"]
  1185 -> 104 [style=dashed label="type-constraint"]
  1185 -> 105 [style=dashed label="type-constraint-opt"]
  1185 -> 106 [style=dashed label="type-name"]
  1185 -> 108 [style=dashed label="typedef-name"]
  1185 -> 303 [style=dashed label="typename-specifier"]
  1185 -> 304 [style=dashed label="unary-expression"]
  1185 -> 305 [style=dashed label="unary-operator"]
  1185 -> 306 [style=dashed label="unqualified-id"]
  1185 -> 307 [style=dashed label="yield-expression"]
  1185 -> "1185R19" [label="[\"delete\", \"new\"]", style=solid]
 "1185R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1185 -> "1185R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"[\", \"decltype\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\"]", style=solid]
 "1185R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1185 -> "1185R83" [style=solid]
 "1185R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1185 -> "1185R458d" [label="[IDENTIFIER]", style=solid]
 "1185R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1185 -> "1185R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1185R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1186 [label="State 1186\n\l368 iteration-statement: \"do\" statement • \"while\" \"(\" expression \")\" \";\"\l"]
  1186 -> 1241 [style=solid label="\"while\""]
  1187 [label="State 1187\n\l369 iteration-statement: \"for\" \"(\" • init-statement condition-opt \";\" expression-opt \")\" statement\l370                    | \"for\" \"(\" • init-statement-opt for-range-declaration \":\" for-range-initializer \")\" statement\l"]
  1187 -> 1 [style=solid label="\"constexpr\""]
  1187 -> 150 [style=solid label="\"extern\""]
  1187 -> 238 [style=solid label="IDENTIFIER"]
  1187 -> 151 [style=solid label="\"inline\""]
  1187 -> 239 [style=solid label="\"noexcept\""]
  1187 -> 240 [style=solid label="\"!\""]
  1187 -> 241 [style=solid label="\"::\""]
  1187 -> 242 [style=solid label="\"this\""]
  1187 -> 8 [style=solid label="\"typename\""]
  1187 -> 9 [style=solid label="\"virtual\""]
  1187 -> 243 [style=solid label="\"+\""]
  1187 -> 244 [style=solid label="\"-\""]
  1187 -> 1242 [style=solid label="\"using\""]
  1187 -> 245 [style=solid label="\"(\""]
  1187 -> 246 [style=solid label="\"&\""]
  1187 -> 247 [style=solid label="\"[\""]
  1187 -> 248 [style=solid label="\"co_await\""]
  1187 -> 12 [style=solid label="\"class\""]
  1187 -> 13 [style=solid label="\"struct\""]
  1187 -> 14 [style=solid label="\"union\""]
  1187 -> 249 [style=solid label="\"operator\""]
  1187 -> 15 [style=solid label="\"const\""]
  1187 -> 16 [style=solid label="\"volatile\""]
  1187 -> 17 [style=solid label="\"friend\""]
  1187 -> 18 [style=solid label="\"typedef\""]
  1187 -> 19 [style=solid label="\"consteval\""]
  1187 -> 20 [style=solid label="\"constinit\""]
  1187 -> 21 [style=solid label="\"decltype\""]
  1187 -> 22 [style=solid label="\"enum\""]
  1187 -> 23 [style=solid label="\"explicit\""]
  1187 -> 250 [style=solid label="\"*\""]
  1187 -> 251 [style=solid label="\"requires\""]
  1187 -> 252 [style=solid label="\"~\""]
  1187 -> 253 [style=solid label="\"++\""]
  1187 -> 254 [style=solid label="\"--\""]
  1187 -> 255 [style=solid label="\"dynamic_cast\""]
  1187 -> 256 [style=solid label="\"static_cast\""]
  1187 -> 257 [style=solid label="\"reinterpret_cast\""]
  1187 -> 258 [style=solid label="\"const_cast\""]
  1187 -> 259 [style=solid label="\"typeid\""]
  1187 -> 260 [style=solid label="\"literal\""]
  1187 -> 27 [style=solid label="\"char\""]
  1187 -> 28 [style=solid label="\"char8_t\""]
  1187 -> 29 [style=solid label="\"char16_t\""]
  1187 -> 30 [style=solid label="\"char32_t\""]
  1187 -> 31 [style=solid label="\"wchar_t\""]
  1187 -> 32 [style=solid label="\"bool\""]
  1187 -> 33 [style=solid label="\"short\""]
  1187 -> 34 [style=solid label="\"int\""]
  1187 -> 35 [style=solid label="\"long\""]
  1187 -> 36 [style=solid label="\"signed\""]
  1187 -> 37 [style=solid label="\"unsigned\""]
  1187 -> 38 [style=solid label="\"float\""]
  1187 -> 39 [style=solid label="\"double\""]
  1187 -> 40 [style=solid label="\"void\""]
  1187 -> 42 [style=solid label="\"static\""]
  1187 -> 43 [style=solid label="\"thread_local\""]
  1187 -> 44 [style=solid label="\"mutable\""]
  1187 -> 118 [style=solid label="STRING_LITERAL"]
  1187 -> 261 [style=solid label="\"throw\""]
  1187 -> 262 [style=solid label="\"sizeof\""]
  1187 -> 263 [style=solid label="\"alignof\""]
  1187 -> 264 [style=solid label="\"co_yield\""]
  1187 -> 265 [style=dashed label="SCOPE-opt"]
  1187 -> 266 [style=dashed label="additive-expression"]
  1187 -> 1243 [style=dashed label="alias-declaration"]
  1187 -> 267 [style=dashed label="and-expression"]
  1187 -> 268 [style=dashed label="assignment-expression"]
  1187 -> 973 [style=dashed label="attribute-specifier-seq"]
  1187 -> 1244 [style=dashed label="attribute-specifier-seq-opt"]
  1187 -> 269 [style=dashed label="await-expression"]
  1187 -> 270 [style=dashed label="cast-expression"]
  1187 -> 53 [style=dashed label="class-head"]
  1187 -> 54 [style=dashed label="class-key"]
  1187 -> 55 [style=dashed label="class-name"]
  1187 -> 56 [style=dashed label="class-specifier"]
  1187 -> 271 [style=dashed label="compare-expression"]
  1187 -> 272 [style=dashed label="conditional-expression"]
  1187 -> 273 [style=dashed label="conversion-function-id"]
  1187 -> 57 [style=dashed label="cv-qualifier"]
  1187 -> 58 [style=dashed label="decl-specifier"]
  1187 -> 59 [style=dashed label="decl-specifier-seq"]
  1187 -> 63 [style=dashed label="decltype-specifier"]
  1187 -> 65 [style=dashed label="defining-type-specifier"]
  1187 -> 274 [style=dashed label="delete-expression"]
  1187 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1187 -> 67 [style=dashed label="elaborated-type-specifier"]
  1187 -> 69 [style=dashed label="enum-head"]
  1187 -> 154 [style=dashed label="enum-key"]
  1187 -> 71 [style=dashed label="enum-name"]
  1187 -> 72 [style=dashed label="enum-specifier"]
  1187 -> 275 [style=dashed label="equality-expression"]
  1187 -> 276 [style=dashed label="exclusive-or-expression"]
  1187 -> 155 [style=dashed label="explicit-specifier"]
  1187 -> 1110 [style=dashed label="expression"]
  1187 -> 1111 [style=dashed label="expression-opt"]
  1187 -> 1245 [style=dashed label="expression-statement"]
  1187 -> 278 [style=dashed label="fold-expression"]
  1187 -> 79 [style=dashed label="function-specifier"]
  1187 -> 279 [style=dashed label="id-expression"]
  1187 -> 280 [style=dashed label="inclusive-or-expression"]
  1187 -> 1246 [style=dashed label="init-statement"]
  1187 -> 1247 [style=dashed label="init-statement-opt"]
  1187 -> 281 [style=dashed label="lambda-expression"]
  1187 -> 282 [style=dashed label="lambda-introducer"]
  1187 -> 283 [style=dashed label="literal-operator-id"]
  1187 -> 284 [style=dashed label="logical-and-expression"]
  1187 -> 285 [style=dashed label="logical-or-expression"]
  1187 -> 286 [style=dashed label="multiplicative-expression"]
  1187 -> 85 [style=dashed label="namespace-alias"]
  1187 -> 88 [style=dashed label="namespace-name"]
  1187 -> 287 [style=dashed label="nested-name-specifier"]
  1187 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1187 -> 288 [style=dashed label="new-expression"]
  1187 -> 289 [style=dashed label="noexcept-expression"]
  1187 -> 290 [style=dashed label="operator-function-id"]
  1187 -> 94 [style=dashed label="placeholder-type-specifier"]
  1187 -> 291 [style=dashed label="pm-expression"]
  1187 -> 292 [style=dashed label="postfix-expression"]
  1187 -> 293 [style=dashed label="primary-expression"]
  1187 -> 294 [style=dashed label="qualified-id"]
  1187 -> 295 [style=dashed label="relational-expression"]
  1187 -> 296 [style=dashed label="requires-expression"]
  1187 -> 297 [style=dashed label="shift-expression"]
  1187 -> 1248 [style=dashed label="simple-declaration"]
  1187 -> 298 [style=dashed label="simple-template-id"]
  1187 -> 409 [style=dashed label="simple-type-specifier"]
  1187 -> 99 [style=dashed label="storage-class-specifier"]
  1187 -> 300 [style=dashed label="string-literal"]
  1187 -> 301 [style=dashed label="template-id"]
  1187 -> 102 [style=dashed label="template-name"]
  1187 -> 302 [style=dashed label="throw-expression"]
  1187 -> 104 [style=dashed label="type-constraint"]
  1187 -> 105 [style=dashed label="type-constraint-opt"]
  1187 -> 106 [style=dashed label="type-name"]
  1187 -> 107 [style=dashed label="type-specifier"]
  1187 -> 108 [style=dashed label="typedef-name"]
  1187 -> 416 [style=dashed label="typename-specifier"]
  1187 -> 304 [style=dashed label="unary-expression"]
  1187 -> 305 [style=dashed label="unary-operator"]
  1187 -> 306 [style=dashed label="unqualified-id"]
  1187 -> 307 [style=dashed label="yield-expression"]
  1187 -> "1187R19" [style=solid]
 "1187R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1187 -> "1187R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"[\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1187R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1187 -> "1187R83" [label="[\"alignas\", \"auto\"]", style=solid]
 "1187R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1187 -> "1187R282" [label="[\";\"]", style=solid]
 "1187R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  1187 -> "1187R357d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"alignas\", \"[\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1187R357d" [label="R357", fillcolor=5, shape=diamond, style=filled]
  1187 -> "1187R458d" [label="[IDENTIFIER]", style=solid]
 "1187R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1187 -> "1187R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1187R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1188 [label="State 1188\n\l371 jump-statement: \"break\" \";\" •\l"]
  1188 -> "1188R371" [style=solid]
 "1188R371" [label="R371", fillcolor=3, shape=diamond, style=filled]
  1189 [label="State 1189\n\l372 jump-statement: \"continue\" \";\" •\l"]
  1189 -> "1189R372" [style=solid]
 "1189R372" [label="R372", fillcolor=3, shape=diamond, style=filled]
  1190 [label="State 1190\n\l373 jump-statement: \"return\" expr-or-braced-init-list-opt • \";\"\l"]
  1190 -> 1249 [style=solid label="\";\""]
  1191 [label="State 1191\n\l375 jump-statement: \"goto\" IDENTIFIER • \";\"\l"]
  1191 -> 1250 [style=solid label="\";\""]
  1192 [label="State 1192\n\l377 labeled-statement: attribute-specifier-seq-opt \"case\" constant-expression • \":\" statement\l"]
  1192 -> 1251 [style=solid label="\":\""]
  1193 [label="State 1193\n\l  4 CONSTEXPR-opt: \"constexpr\" •\l"]
  1193 -> "1193R4" [style=solid]
 "1193R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  1194 [label="State 1194\n\l 18 NOT-opt: \"!\" •\l"]
  1194 -> "1194R18" [style=solid]
 "1194R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  1195 [label="State 1195\n\l628 selection-statement: \"if\" CONSTEXPR-opt • \"(\" init-statement-opt condition \")\" statement\l629                    | \"if\" CONSTEXPR-opt • \"(\" init-statement-opt condition \")\" statement \"else\" statement\l"]
  1195 -> 1252 [style=solid label="\"(\""]
  1196 [label="State 1196\n\l630 selection-statement: \"if\" NOT-opt • \"consteval\" compound-statement\l631                    | \"if\" NOT-opt • \"consteval\" compound-statement \"else\" statement\l"]
  1196 -> 1253 [style=solid label="\"consteval\""]
  1197 [label="State 1197\n\l632 selection-statement: \"switch\" \"(\" • init-statement-opt condition \")\" statement\l"]
  1197 -> 1 [style=solid label="\"constexpr\""]
  1197 -> 150 [style=solid label="\"extern\""]
  1197 -> 238 [style=solid label="IDENTIFIER"]
  1197 -> 151 [style=solid label="\"inline\""]
  1197 -> 239 [style=solid label="\"noexcept\""]
  1197 -> 240 [style=solid label="\"!\""]
  1197 -> 241 [style=solid label="\"::\""]
  1197 -> 242 [style=solid label="\"this\""]
  1197 -> 8 [style=solid label="\"typename\""]
  1197 -> 9 [style=solid label="\"virtual\""]
  1197 -> 243 [style=solid label="\"+\""]
  1197 -> 244 [style=solid label="\"-\""]
  1197 -> 1242 [style=solid label="\"using\""]
  1197 -> 245 [style=solid label="\"(\""]
  1197 -> 246 [style=solid label="\"&\""]
  1197 -> 247 [style=solid label="\"[\""]
  1197 -> 248 [style=solid label="\"co_await\""]
  1197 -> 12 [style=solid label="\"class\""]
  1197 -> 13 [style=solid label="\"struct\""]
  1197 -> 14 [style=solid label="\"union\""]
  1197 -> 249 [style=solid label="\"operator\""]
  1197 -> 15 [style=solid label="\"const\""]
  1197 -> 16 [style=solid label="\"volatile\""]
  1197 -> 17 [style=solid label="\"friend\""]
  1197 -> 18 [style=solid label="\"typedef\""]
  1197 -> 19 [style=solid label="\"consteval\""]
  1197 -> 20 [style=solid label="\"constinit\""]
  1197 -> 21 [style=solid label="\"decltype\""]
  1197 -> 22 [style=solid label="\"enum\""]
  1197 -> 23 [style=solid label="\"explicit\""]
  1197 -> 250 [style=solid label="\"*\""]
  1197 -> 251 [style=solid label="\"requires\""]
  1197 -> 252 [style=solid label="\"~\""]
  1197 -> 253 [style=solid label="\"++\""]
  1197 -> 254 [style=solid label="\"--\""]
  1197 -> 255 [style=solid label="\"dynamic_cast\""]
  1197 -> 256 [style=solid label="\"static_cast\""]
  1197 -> 257 [style=solid label="\"reinterpret_cast\""]
  1197 -> 258 [style=solid label="\"const_cast\""]
  1197 -> 259 [style=solid label="\"typeid\""]
  1197 -> 260 [style=solid label="\"literal\""]
  1197 -> 27 [style=solid label="\"char\""]
  1197 -> 28 [style=solid label="\"char8_t\""]
  1197 -> 29 [style=solid label="\"char16_t\""]
  1197 -> 30 [style=solid label="\"char32_t\""]
  1197 -> 31 [style=solid label="\"wchar_t\""]
  1197 -> 32 [style=solid label="\"bool\""]
  1197 -> 33 [style=solid label="\"short\""]
  1197 -> 34 [style=solid label="\"int\""]
  1197 -> 35 [style=solid label="\"long\""]
  1197 -> 36 [style=solid label="\"signed\""]
  1197 -> 37 [style=solid label="\"unsigned\""]
  1197 -> 38 [style=solid label="\"float\""]
  1197 -> 39 [style=solid label="\"double\""]
  1197 -> 40 [style=solid label="\"void\""]
  1197 -> 42 [style=solid label="\"static\""]
  1197 -> 43 [style=solid label="\"thread_local\""]
  1197 -> 44 [style=solid label="\"mutable\""]
  1197 -> 118 [style=solid label="STRING_LITERAL"]
  1197 -> 261 [style=solid label="\"throw\""]
  1197 -> 262 [style=solid label="\"sizeof\""]
  1197 -> 263 [style=solid label="\"alignof\""]
  1197 -> 264 [style=solid label="\"co_yield\""]
  1197 -> 265 [style=dashed label="SCOPE-opt"]
  1197 -> 266 [style=dashed label="additive-expression"]
  1197 -> 1243 [style=dashed label="alias-declaration"]
  1197 -> 267 [style=dashed label="and-expression"]
  1197 -> 268 [style=dashed label="assignment-expression"]
  1197 -> 973 [style=dashed label="attribute-specifier-seq"]
  1197 -> 1244 [style=dashed label="attribute-specifier-seq-opt"]
  1197 -> 269 [style=dashed label="await-expression"]
  1197 -> 270 [style=dashed label="cast-expression"]
  1197 -> 53 [style=dashed label="class-head"]
  1197 -> 54 [style=dashed label="class-key"]
  1197 -> 55 [style=dashed label="class-name"]
  1197 -> 56 [style=dashed label="class-specifier"]
  1197 -> 271 [style=dashed label="compare-expression"]
  1197 -> 272 [style=dashed label="conditional-expression"]
  1197 -> 273 [style=dashed label="conversion-function-id"]
  1197 -> 57 [style=dashed label="cv-qualifier"]
  1197 -> 58 [style=dashed label="decl-specifier"]
  1197 -> 59 [style=dashed label="decl-specifier-seq"]
  1197 -> 63 [style=dashed label="decltype-specifier"]
  1197 -> 65 [style=dashed label="defining-type-specifier"]
  1197 -> 274 [style=dashed label="delete-expression"]
  1197 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1197 -> 67 [style=dashed label="elaborated-type-specifier"]
  1197 -> 69 [style=dashed label="enum-head"]
  1197 -> 154 [style=dashed label="enum-key"]
  1197 -> 71 [style=dashed label="enum-name"]
  1197 -> 72 [style=dashed label="enum-specifier"]
  1197 -> 275 [style=dashed label="equality-expression"]
  1197 -> 276 [style=dashed label="exclusive-or-expression"]
  1197 -> 155 [style=dashed label="explicit-specifier"]
  1197 -> 1110 [style=dashed label="expression"]
  1197 -> 1111 [style=dashed label="expression-opt"]
  1197 -> 1245 [style=dashed label="expression-statement"]
  1197 -> 278 [style=dashed label="fold-expression"]
  1197 -> 79 [style=dashed label="function-specifier"]
  1197 -> 279 [style=dashed label="id-expression"]
  1197 -> 280 [style=dashed label="inclusive-or-expression"]
  1197 -> 1254 [style=dashed label="init-statement"]
  1197 -> 1255 [style=dashed label="init-statement-opt"]
  1197 -> 281 [style=dashed label="lambda-expression"]
  1197 -> 282 [style=dashed label="lambda-introducer"]
  1197 -> 283 [style=dashed label="literal-operator-id"]
  1197 -> 284 [style=dashed label="logical-and-expression"]
  1197 -> 285 [style=dashed label="logical-or-expression"]
  1197 -> 286 [style=dashed label="multiplicative-expression"]
  1197 -> 85 [style=dashed label="namespace-alias"]
  1197 -> 88 [style=dashed label="namespace-name"]
  1197 -> 287 [style=dashed label="nested-name-specifier"]
  1197 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1197 -> 288 [style=dashed label="new-expression"]
  1197 -> 289 [style=dashed label="noexcept-expression"]
  1197 -> 290 [style=dashed label="operator-function-id"]
  1197 -> 94 [style=dashed label="placeholder-type-specifier"]
  1197 -> 291 [style=dashed label="pm-expression"]
  1197 -> 292 [style=dashed label="postfix-expression"]
  1197 -> 293 [style=dashed label="primary-expression"]
  1197 -> 294 [style=dashed label="qualified-id"]
  1197 -> 295 [style=dashed label="relational-expression"]
  1197 -> 296 [style=dashed label="requires-expression"]
  1197 -> 297 [style=dashed label="shift-expression"]
  1197 -> 1248 [style=dashed label="simple-declaration"]
  1197 -> 298 [style=dashed label="simple-template-id"]
  1197 -> 409 [style=dashed label="simple-type-specifier"]
  1197 -> 99 [style=dashed label="storage-class-specifier"]
  1197 -> 300 [style=dashed label="string-literal"]
  1197 -> 301 [style=dashed label="template-id"]
  1197 -> 102 [style=dashed label="template-name"]
  1197 -> 302 [style=dashed label="throw-expression"]
  1197 -> 104 [style=dashed label="type-constraint"]
  1197 -> 105 [style=dashed label="type-constraint-opt"]
  1197 -> 106 [style=dashed label="type-name"]
  1197 -> 107 [style=dashed label="type-specifier"]
  1197 -> 108 [style=dashed label="typedef-name"]
  1197 -> 416 [style=dashed label="typename-specifier"]
  1197 -> 304 [style=dashed label="unary-expression"]
  1197 -> 305 [style=dashed label="unary-operator"]
  1197 -> 306 [style=dashed label="unqualified-id"]
  1197 -> 307 [style=dashed label="yield-expression"]
  1197 -> "1197R19" [style=solid]
 "1197R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1197 -> "1197R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"[\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1197R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1197 -> "1197R83" [label="[\"alignas\", \"auto\"]", style=solid]
 "1197R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1197 -> "1197R282" [label="[\";\"]", style=solid]
 "1197R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  1197 -> "1197R357d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"!\", \"::\", \"this\", \"typename\", \"virtual\", \"+\", \"-\", \"alignas\", \"(\", \"&\", \"[\", \"co_await\", \"class\", \"struct\", \"union\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"delete\", \"enum\", \"explicit\", \"*\", \"requires\", \"new\", \"~\", \"++\", \"--\", \"auto\", \"dynamic_cast\", \"static_cast\", \"reinterpret_cast\", \"const_cast\", \"typeid\", \"literal\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", STRING_LITERAL, \"throw\", \"sizeof\", \"alignof\", \"co_yield\"]", style=solid]
 "1197R357d" [label="R357", fillcolor=5, shape=diamond, style=filled]
  1197 -> "1197R458d" [label="[IDENTIFIER]", style=solid]
 "1197R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1197 -> "1197R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1197R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1198 [label="State 1198\n\l284 expression-statement: expression-opt \";\" •\l"]
  1198 -> "1198R284" [style=solid]
 "1198R284" [label="R284", fillcolor=3, shape=diamond, style=filled]
  1199 [label="State 1199\n\l460 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" INLINE-opt IDENTIFIER \"{\" namespace-body \"}\" •\l"]
  1199 -> "1199R460" [style=solid]
 "1199R460" [label="R460", fillcolor=3, shape=diamond, style=filled]
  1200 [label="State 1200\n\l 75 attribute-list: attribute-list \",\" attribute \"...\" •\l"]
  1200 -> "1200R75" [style=solid]
 "1200R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  1201 [label="State 1201\n\l 91 balanced-token: \"(\" balanced-token-seq-opt • \")\"\l"]
  1201 -> 1256 [style=solid label="\")\""]
  1202 [label="State 1202\n\l 92 balanced-token: \"[\" balanced-token-seq-opt • \"]\"\l"]
  1202 -> 1257 [style=solid label="\"]\""]
  1203 [label="State 1203\n\l 93 balanced-token: \"{\" balanced-token-seq-opt • \"}\"\l"]
  1203 -> 1258 [style=solid label="\"}\""]
  1204 [label="State 1204\n\l 96 balanced-token-seq: balanced-token-seq balanced-token •\l"]
  1204 -> "1204R96" [style=solid]
 "1204R96" [label="R96", fillcolor=3, shape=diamond, style=filled]
  1205 [label="State 1205\n\l 68 attribute-argument-clause: \"(\" balanced-token-seq-opt \")\" •\l"]
  1205 -> "1205R68" [style=solid]
 "1205R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
  1206 [label="State 1206\n\l642 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" initializer \";\" •\l"]
  1206 -> "1206R642" [style=solid]
 "1206R642" [label="R642", fillcolor=3, shape=diamond, style=filled]
  1207 [label="State 1207\n\l398 mem-initializer: mem-initializer-id \"(\" expression-list-opt • \")\"\l"]
  1207 -> 1259 [style=solid label="\")\""]
  1208 [label="State 1208\n\l403 mem-initializer-list: mem-initializer-list \",\" mem-initializer • ELLIPSIS-opt\l"]
  1208 -> 156 [style=solid label="\"...\""]
  1208 -> 1260 [style=dashed label="ELLIPSIS-opt"]
  1208 -> "1208R5" [style=solid]
 "1208R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1209 [label="State 1209\n\l335 handler: \"catch\" • \"(\" exception-declaration \")\" compound-statement\l"]
  1209 -> 1261 [style=solid label="\"(\""]
  1210 [label="State 1210\n\l336 handler-seq: handler • handler-seq-opt\l"]
  1210 -> 1209 [style=solid label="\"catch\""]
  1210 -> 1210 [style=dashed label="handler"]
  1210 -> 1262 [style=dashed label="handler-seq"]
  1210 -> 1263 [style=dashed label="handler-seq-opt"]
  1210 -> "1210R337" [style=solid]
 "1210R337" [label="R337", fillcolor=3, shape=diamond, style=filled]
  1211 [label="State 1211\n\l331 function-try-block: \"try\" ctor-initializer-opt compound-statement handler-seq •\l"]
  1211 -> "1211R331" [style=solid]
 "1211R331" [label="R331", fillcolor=3, shape=diamond, style=filled]
  1212 [label="State 1212\n\l553 parameters-and-qualifiers: \"(\" parameter-declaration-clause \")\" cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt • attribute-specifier-seq-opt\l"]
  1212 -> 177 [style=dashed label="attribute-specifier-seq"]
  1212 -> 1264 [style=dashed label="attribute-specifier-seq-opt"]
  1212 -> "1212R83" [style=solid]
 "1212R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1213 [label="State 1213\n\l418 member-declarator: IDENTIFIER-opt attribute-specifier-seq-opt \":\" constant-expression • brace-or-equal-initializer-opt\l"]
  1213 -> 378 [style=solid label="\"=\""]
  1213 -> 380 [style=solid label="\"{\""]
  1213 -> 1022 [style=dashed label="brace-or-equal-initializer"]
  1213 -> 1265 [style=dashed label="brace-or-equal-initializer-opt"]
  1213 -> 383 [style=dashed label="braced-init-list"]
  1213 -> "1213R118" [style=solid]
 "1213R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
  1214 [label="State 1214\n\l597 pure-specifier: \"=\" '0' •\l"]
  1214 -> "1214R597" [style=solid]
 "1214R597" [label="R597", fillcolor=3, shape=diamond, style=filled]
  1215 [label="State 1215\n\l416 member-declarator: declarator requires-clause •\l"]
  1215 -> "1215R416" [style=solid]
 "1215R416" [label="R416", fillcolor=3, shape=diamond, style=filled]
  1216 [label="State 1216\n\l415 member-declarator: declarator virt-specifier-seq-opt • pure-specifier-opt\l"]
  1216 -> 1266 [style=solid label="\"=\""]
  1216 -> 1146 [style=dashed label="pure-specifier"]
  1216 -> 1147 [style=dashed label="pure-specifier-opt"]
  1216 -> "1216R598" [style=solid]
 "1216R598" [label="R598", fillcolor=3, shape=diamond, style=filled]
  1217 [label="State 1217\n\l215 deduction-guide: explicit-specifier-opt template-name \"(\" parameter-declaration-clause \")\" \"->\" simple-template-id \";\" •\l"]
  1217 -> "1217R215" [style=solid]
 "1217R215" [label="R215", fillcolor=3, shape=diamond, style=filled]
  1218 [label="State 1218\n\l584 private-module-fragment: \"module\" \":\" \"private\" \";\" declaration-seq-opt •\l"]
  1218 -> "1218R584" [style=solid]
 "1218R584" [label="R584", fillcolor=3, shape=diamond, style=filled]
  1219 [label="State 1219\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l483 noptr-abstract-declarator: noptr-abstract-declarator-opt \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt •\l"]
  1219 -> 158 [style=solid label="\"alignas\""]
  1219 -> 162 [style=solid label="\"[\""]
  1219 -> 166 [style=dashed label="alignment-specifier"]
  1219 -> 167 [style=dashed label="attribute-specifier"]
  1219 -> "1219R483d" [label="[\"[\"]", style=solid]
 "1219R483d" [label="R483", fillcolor=5, shape=diamond, style=filled]
  1219 -> "1219R483" [style=solid]
 "1219R483" [label="R483", fillcolor=3, shape=diamond, style=filled]
  1220 [label="State 1220\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l488 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator \"[\" constant-expression-opt \"]\" attribute-specifier-seq-opt •\l"]
  1220 -> 158 [style=solid label="\"alignas\""]
  1220 -> 162 [style=solid label="\"[\""]
  1220 -> 166 [style=dashed label="alignment-specifier"]
  1220 -> 167 [style=dashed label="attribute-specifier"]
  1220 -> "1220R488d" [label="[\"[\"]", style=solid]
 "1220R488d" [label="R488", fillcolor=5, shape=diamond, style=filled]
  1220 -> "1220R488" [style=solid]
 "1220R488" [label="R488", fillcolor=3, shape=diamond, style=filled]
  1221 [label="State 1221\n\l287 fold-expression: \"(\" cast-expression fold-operator \"...\" fold-operator cast-expression \")\" •\l"]
  1221 -> "1221R287" [style=solid]
 "1221R287" [label="R287", fillcolor=3, shape=diamond, style=filled]
  1222 [label="State 1222\n\l724 type-requirement: \"typename\" nested-name-specifier-opt type-name \";\" •\l"]
  1222 -> "1222R724" [style=solid]
 "1222R724" [label="R724", fillcolor=3, shape=diamond, style=filled]
  1223 [label="State 1223\n\l 16 NOEXCEPT-opt: \"noexcept\" •\l"]
  1223 -> "1223R16" [style=solid]
 "1223R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  1224 [label="State 1224\n\l148 compound-requirement: \"{\" expression \"}\" NOEXCEPT-opt • return-type-requirement-opt \";\"\l"]
  1224 -> 1267 [style=solid label="\"->\""]
  1224 -> 1268 [style=dashed label="return-type-requirement"]
  1224 -> 1269 [style=dashed label="return-type-requirement-opt"]
  1224 -> "1224R626" [style=solid]
 "1224R626" [label="R626", fillcolor=3, shape=diamond, style=filled]
  1225 [label="State 1225\n\l570 postfix-expression: \"dynamic_cast\" \"<\" type-id \">\" \"(\" expression \")\" •\l"]
  1225 -> "1225R570" [style=solid]
 "1225R570" [label="R570", fillcolor=3, shape=diamond, style=filled]
  1226 [label="State 1226\n\l571 postfix-expression: \"static_cast\" \"<\" type-id \">\" \"(\" expression \")\" •\l"]
  1226 -> "1226R571" [style=solid]
 "1226R571" [label="R571", fillcolor=3, shape=diamond, style=filled]
  1227 [label="State 1227\n\l572 postfix-expression: \"reinterpret_cast\" \"<\" type-id \">\" \"(\" expression \")\" •\l"]
  1227 -> "1227R572" [style=solid]
 "1227R572" [label="R572", fillcolor=3, shape=diamond, style=filled]
  1228 [label="State 1228\n\l573 postfix-expression: \"const_cast\" \"<\" type-id \">\" \"(\" expression \")\" •\l"]
  1228 -> "1228R573" [style=solid]
 "1228R573" [label="R573", fillcolor=3, shape=diamond, style=filled]
  1229 [label="State 1229\n\l467 new-expression: SCOPE-opt \"new\" new-placement-opt \"(\" type-id \")\" new-initializer-opt •\l"]
  1229 -> "1229R467" [style=solid]
 "1229R467" [label="R467", fillcolor=3, shape=diamond, style=filled]
  1230 [label="State 1230\n\l468 new-initializer: \"(\" expression-list-opt \")\" •\l"]
  1230 -> "1230R468" [style=solid]
 "1230R468" [label="R468", fillcolor=3, shape=diamond, style=filled]
  1231 [label="State 1231\n\l494 noptr-new-declarator: \"[\" expression-opt \"]\" • attribute-specifier-seq-opt\l"]
  1231 -> 177 [style=dashed label="attribute-specifier-seq"]
  1231 -> 1270 [style=dashed label="attribute-specifier-seq-opt"]
  1231 -> "1231R83" [style=solid]
 "1231R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1232 [label="State 1232\n\l495 noptr-new-declarator: noptr-new-declarator \"[\" constant-expression • \"]\" attribute-specifier-seq-opt\l"]
  1232 -> 1271 [style=solid label="\"]\""]
  1233 [label="State 1233\n\l387 lambda-expression: lambda-introducer \"<\" template-parameter-list \">\" requires-clause-opt lambda-declarator compound-statement •\l"]
  1233 -> "1233R387" [style=solid]
 "1233R387" [label="R387", fillcolor=3, shape=diamond, style=filled]
  1234 [label="State 1234\n\l376 labeled-statement: attribute-specifier-seq-opt IDENTIFIER \":\" statement •\l"]
  1234 -> "1234R376" [style=solid]
 "1234R376" [label="R376", fillcolor=3, shape=diamond, style=filled]
  1235 [label="State 1235\n\l171 coroutine-return-statement: \"co_return\" expr-or-braced-init-list-opt \";\" •\l"]
  1235 -> "1235R171" [style=solid]
 "1235R171" [label="R171", fillcolor=3, shape=diamond, style=filled]
  1236 [label="State 1236\n\l378 labeled-statement: attribute-specifier-seq-opt \"default\" \":\" statement •\l"]
  1236 -> "1236R378" [style=solid]
 "1236R378" [label="R378", fillcolor=3, shape=diamond, style=filled]
  1237 [label="State 1237\n\l707 try-block: \"try\" compound-statement handler-seq •\l"]
  1237 -> "1237R707" [style=solid]
 "1237R707" [label="R707", fillcolor=3, shape=diamond, style=filled]
  1238 [label="State 1238\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l153 condition: attribute-specifier-seq-opt • decl-specifier-seq declarator brace-or-equal-initializer\l"]
  1238 -> 1 [style=solid label="\"constexpr\""]
  1238 -> 150 [style=solid label="\"extern\""]
  1238 -> 4 [style=solid label="IDENTIFIER"]
  1238 -> 151 [style=solid label="\"inline\""]
  1238 -> 6 [style=solid label="\"::\""]
  1238 -> 8 [style=solid label="\"typename\""]
  1238 -> 9 [style=solid label="\"virtual\""]
  1238 -> 158 [style=solid label="\"alignas\""]
  1238 -> 162 [style=solid label="\"[\""]
  1238 -> 12 [style=solid label="\"class\""]
  1238 -> 13 [style=solid label="\"struct\""]
  1238 -> 14 [style=solid label="\"union\""]
  1238 -> 15 [style=solid label="\"const\""]
  1238 -> 16 [style=solid label="\"volatile\""]
  1238 -> 17 [style=solid label="\"friend\""]
  1238 -> 18 [style=solid label="\"typedef\""]
  1238 -> 19 [style=solid label="\"consteval\""]
  1238 -> 20 [style=solid label="\"constinit\""]
  1238 -> 21 [style=solid label="\"decltype\""]
  1238 -> 22 [style=solid label="\"enum\""]
  1238 -> 23 [style=solid label="\"explicit\""]
  1238 -> 27 [style=solid label="\"char\""]
  1238 -> 28 [style=solid label="\"char8_t\""]
  1238 -> 29 [style=solid label="\"char16_t\""]
  1238 -> 30 [style=solid label="\"char32_t\""]
  1238 -> 31 [style=solid label="\"wchar_t\""]
  1238 -> 32 [style=solid label="\"bool\""]
  1238 -> 33 [style=solid label="\"short\""]
  1238 -> 34 [style=solid label="\"int\""]
  1238 -> 35 [style=solid label="\"long\""]
  1238 -> 36 [style=solid label="\"signed\""]
  1238 -> 37 [style=solid label="\"unsigned\""]
  1238 -> 38 [style=solid label="\"float\""]
  1238 -> 39 [style=solid label="\"double\""]
  1238 -> 40 [style=solid label="\"void\""]
  1238 -> 42 [style=solid label="\"static\""]
  1238 -> 43 [style=solid label="\"thread_local\""]
  1238 -> 44 [style=solid label="\"mutable\""]
  1238 -> 166 [style=dashed label="alignment-specifier"]
  1238 -> 167 [style=dashed label="attribute-specifier"]
  1238 -> 53 [style=dashed label="class-head"]
  1238 -> 54 [style=dashed label="class-key"]
  1238 -> 55 [style=dashed label="class-name"]
  1238 -> 56 [style=dashed label="class-specifier"]
  1238 -> 57 [style=dashed label="cv-qualifier"]
  1238 -> 58 [style=dashed label="decl-specifier"]
  1238 -> 1272 [style=dashed label="decl-specifier-seq"]
  1238 -> 63 [style=dashed label="decltype-specifier"]
  1238 -> 65 [style=dashed label="defining-type-specifier"]
  1238 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1238 -> 67 [style=dashed label="elaborated-type-specifier"]
  1238 -> 69 [style=dashed label="enum-head"]
  1238 -> 154 [style=dashed label="enum-key"]
  1238 -> 71 [style=dashed label="enum-name"]
  1238 -> 72 [style=dashed label="enum-specifier"]
  1238 -> 155 [style=dashed label="explicit-specifier"]
  1238 -> 79 [style=dashed label="function-specifier"]
  1238 -> 85 [style=dashed label="namespace-alias"]
  1238 -> 88 [style=dashed label="namespace-name"]
  1238 -> 89 [style=dashed label="nested-name-specifier"]
  1238 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1238 -> 94 [style=dashed label="placeholder-type-specifier"]
  1238 -> 96 [style=dashed label="simple-template-id"]
  1238 -> 97 [style=dashed label="simple-type-specifier"]
  1238 -> 99 [style=dashed label="storage-class-specifier"]
  1238 -> 102 [style=dashed label="template-name"]
  1238 -> 104 [style=dashed label="type-constraint"]
  1238 -> 105 [style=dashed label="type-constraint-opt"]
  1238 -> 106 [style=dashed label="type-name"]
  1238 -> 107 [style=dashed label="type-specifier"]
  1238 -> 108 [style=dashed label="typedef-name"]
  1238 -> 109 [style=dashed label="typename-specifier"]
  1238 -> "1238R458d" [label="[IDENTIFIER]", style=solid]
 "1238R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1238 -> "1238R710d" [label="[\"decltype\"]", style=solid]
 "1238R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1238 -> "1238R710" [label="[]", style=solid]
 "1238R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1239 [label="State 1239\n\l367 iteration-statement: \"while\" \"(\" condition • \")\" statement\l"]
  1239 -> 1273 [style=solid label="\")\""]
  1240 [label="State 1240\n\l152 condition: expression •\l278 expression: expression • \",\" assignment-expression\l"]
  1240 -> 534 [style=solid label="\",\""]
  1240 -> "1240R152" [style=solid]
 "1240R152" [label="R152", fillcolor=3, shape=diamond, style=filled]
  1241 [label="State 1241\n\l368 iteration-statement: \"do\" statement \"while\" • \"(\" expression \")\" \";\"\l"]
  1241 -> 1274 [style=solid label="\"(\""]
  1242 [label="State 1242\n\l 44 alias-declaration: \"using\" • IDENTIFIER attribute-specifier-seq-opt \"=\" defining-type-id \";\"\l"]
  1242 -> 123 [style=solid label="IDENTIFIER"]
  1243 [label="State 1243\n\l356 init-statement: alias-declaration •\l"]
  1243 -> "1243R356" [style=solid]
 "1243R356" [label="R356", fillcolor=3, shape=diamond, style=filled]
  1244 [label="State 1244\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l642 simple-declaration: attribute-specifier-seq-opt • decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" initializer \";\"\l"]
  1244 -> 1 [style=solid label="\"constexpr\""]
  1244 -> 150 [style=solid label="\"extern\""]
  1244 -> 4 [style=solid label="IDENTIFIER"]
  1244 -> 151 [style=solid label="\"inline\""]
  1244 -> 6 [style=solid label="\"::\""]
  1244 -> 8 [style=solid label="\"typename\""]
  1244 -> 9 [style=solid label="\"virtual\""]
  1244 -> 158 [style=solid label="\"alignas\""]
  1244 -> 162 [style=solid label="\"[\""]
  1244 -> 12 [style=solid label="\"class\""]
  1244 -> 13 [style=solid label="\"struct\""]
  1244 -> 14 [style=solid label="\"union\""]
  1244 -> 15 [style=solid label="\"const\""]
  1244 -> 16 [style=solid label="\"volatile\""]
  1244 -> 17 [style=solid label="\"friend\""]
  1244 -> 18 [style=solid label="\"typedef\""]
  1244 -> 19 [style=solid label="\"consteval\""]
  1244 -> 20 [style=solid label="\"constinit\""]
  1244 -> 21 [style=solid label="\"decltype\""]
  1244 -> 22 [style=solid label="\"enum\""]
  1244 -> 23 [style=solid label="\"explicit\""]
  1244 -> 27 [style=solid label="\"char\""]
  1244 -> 28 [style=solid label="\"char8_t\""]
  1244 -> 29 [style=solid label="\"char16_t\""]
  1244 -> 30 [style=solid label="\"char32_t\""]
  1244 -> 31 [style=solid label="\"wchar_t\""]
  1244 -> 32 [style=solid label="\"bool\""]
  1244 -> 33 [style=solid label="\"short\""]
  1244 -> 34 [style=solid label="\"int\""]
  1244 -> 35 [style=solid label="\"long\""]
  1244 -> 36 [style=solid label="\"signed\""]
  1244 -> 37 [style=solid label="\"unsigned\""]
  1244 -> 38 [style=solid label="\"float\""]
  1244 -> 39 [style=solid label="\"double\""]
  1244 -> 40 [style=solid label="\"void\""]
  1244 -> 42 [style=solid label="\"static\""]
  1244 -> 43 [style=solid label="\"thread_local\""]
  1244 -> 44 [style=solid label="\"mutable\""]
  1244 -> 166 [style=dashed label="alignment-specifier"]
  1244 -> 167 [style=dashed label="attribute-specifier"]
  1244 -> 53 [style=dashed label="class-head"]
  1244 -> 54 [style=dashed label="class-key"]
  1244 -> 55 [style=dashed label="class-name"]
  1244 -> 56 [style=dashed label="class-specifier"]
  1244 -> 57 [style=dashed label="cv-qualifier"]
  1244 -> 58 [style=dashed label="decl-specifier"]
  1244 -> 1109 [style=dashed label="decl-specifier-seq"]
  1244 -> 63 [style=dashed label="decltype-specifier"]
  1244 -> 65 [style=dashed label="defining-type-specifier"]
  1244 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1244 -> 67 [style=dashed label="elaborated-type-specifier"]
  1244 -> 69 [style=dashed label="enum-head"]
  1244 -> 154 [style=dashed label="enum-key"]
  1244 -> 71 [style=dashed label="enum-name"]
  1244 -> 72 [style=dashed label="enum-specifier"]
  1244 -> 155 [style=dashed label="explicit-specifier"]
  1244 -> 79 [style=dashed label="function-specifier"]
  1244 -> 85 [style=dashed label="namespace-alias"]
  1244 -> 88 [style=dashed label="namespace-name"]
  1244 -> 89 [style=dashed label="nested-name-specifier"]
  1244 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1244 -> 94 [style=dashed label="placeholder-type-specifier"]
  1244 -> 96 [style=dashed label="simple-template-id"]
  1244 -> 97 [style=dashed label="simple-type-specifier"]
  1244 -> 99 [style=dashed label="storage-class-specifier"]
  1244 -> 102 [style=dashed label="template-name"]
  1244 -> 104 [style=dashed label="type-constraint"]
  1244 -> 105 [style=dashed label="type-constraint-opt"]
  1244 -> 106 [style=dashed label="type-name"]
  1244 -> 107 [style=dashed label="type-specifier"]
  1244 -> 108 [style=dashed label="typedef-name"]
  1244 -> 109 [style=dashed label="typename-specifier"]
  1244 -> "1244R458d" [label="[IDENTIFIER]", style=solid]
 "1244R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1244 -> "1244R710d" [label="[\"decltype\"]", style=solid]
 "1244R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1244 -> "1244R710" [label="[]", style=solid]
 "1244R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1245 [label="State 1245\n\l354 init-statement: expression-statement •\l"]
  1245 -> "1245R354" [style=solid]
 "1245R354" [label="R354", fillcolor=3, shape=diamond, style=filled]
  1246 [label="State 1246\n\l358 init-statement-opt: init-statement •\l369 iteration-statement: \"for\" \"(\" init-statement • condition-opt \";\" expression-opt \")\" statement\l"]
  1246 -> 238 [style=solid label="IDENTIFIER"]
  1246 -> 239 [style=solid label="\"noexcept\""]
  1246 -> 240 [style=solid label="\"!\""]
  1246 -> 241 [style=solid label="\"::\""]
  1246 -> 242 [style=solid label="\"this\""]
  1246 -> 8 [style=solid label="\"typename\""]
  1246 -> 243 [style=solid label="\"+\""]
  1246 -> 244 [style=solid label="\"-\""]
  1246 -> 245 [style=solid label="\"(\""]
  1246 -> 246 [style=solid label="\"&\""]
  1246 -> 247 [style=solid label="\"[\""]
  1246 -> 248 [style=solid label="\"co_await\""]
  1246 -> 249 [style=solid label="\"operator\""]
  1246 -> 21 [style=solid label="\"decltype\""]
  1246 -> 250 [style=solid label="\"*\""]
  1246 -> 251 [style=solid label="\"requires\""]
  1246 -> 252 [style=solid label="\"~\""]
  1246 -> 253 [style=solid label="\"++\""]
  1246 -> 254 [style=solid label="\"--\""]
  1246 -> 255 [style=solid label="\"dynamic_cast\""]
  1246 -> 256 [style=solid label="\"static_cast\""]
  1246 -> 257 [style=solid label="\"reinterpret_cast\""]
  1246 -> 258 [style=solid label="\"const_cast\""]
  1246 -> 259 [style=solid label="\"typeid\""]
  1246 -> 260 [style=solid label="\"literal\""]
  1246 -> 27 [style=solid label="\"char\""]
  1246 -> 28 [style=solid label="\"char8_t\""]
  1246 -> 29 [style=solid label="\"char16_t\""]
  1246 -> 30 [style=solid label="\"char32_t\""]
  1246 -> 31 [style=solid label="\"wchar_t\""]
  1246 -> 32 [style=solid label="\"bool\""]
  1246 -> 33 [style=solid label="\"short\""]
  1246 -> 34 [style=solid label="\"int\""]
  1246 -> 35 [style=solid label="\"long\""]
  1246 -> 36 [style=solid label="\"signed\""]
  1246 -> 37 [style=solid label="\"unsigned\""]
  1246 -> 38 [style=solid label="\"float\""]
  1246 -> 39 [style=solid label="\"double\""]
  1246 -> 40 [style=solid label="\"void\""]
  1246 -> 118 [style=solid label="STRING_LITERAL"]
  1246 -> 261 [style=solid label="\"throw\""]
  1246 -> 262 [style=solid label="\"sizeof\""]
  1246 -> 263 [style=solid label="\"alignof\""]
  1246 -> 264 [style=solid label="\"co_yield\""]
  1246 -> 265 [style=dashed label="SCOPE-opt"]
  1246 -> 266 [style=dashed label="additive-expression"]
  1246 -> 267 [style=dashed label="and-expression"]
  1246 -> 268 [style=dashed label="assignment-expression"]
  1246 -> 177 [style=dashed label="attribute-specifier-seq"]
  1246 -> 1238 [style=dashed label="attribute-specifier-seq-opt"]
  1246 -> 269 [style=dashed label="await-expression"]
  1246 -> 270 [style=dashed label="cast-expression"]
  1246 -> 55 [style=dashed label="class-name"]
  1246 -> 271 [style=dashed label="compare-expression"]
  1246 -> 1275 [style=dashed label="condition"]
  1246 -> 1276 [style=dashed label="condition-opt"]
  1246 -> 272 [style=dashed label="conditional-expression"]
  1246 -> 273 [style=dashed label="conversion-function-id"]
  1246 -> 63 [style=dashed label="decltype-specifier"]
  1246 -> 274 [style=dashed label="delete-expression"]
  1246 -> 71 [style=dashed label="enum-name"]
  1246 -> 275 [style=dashed label="equality-expression"]
  1246 -> 276 [style=dashed label="exclusive-or-expression"]
  1246 -> 1240 [style=dashed label="expression"]
  1246 -> 278 [style=dashed label="fold-expression"]
  1246 -> 279 [style=dashed label="id-expression"]
  1246 -> 280 [style=dashed label="inclusive-or-expression"]
  1246 -> 281 [style=dashed label="lambda-expression"]
  1246 -> 282 [style=dashed label="lambda-introducer"]
  1246 -> 283 [style=dashed label="literal-operator-id"]
  1246 -> 284 [style=dashed label="logical-and-expression"]
  1246 -> 285 [style=dashed label="logical-or-expression"]
  1246 -> 286 [style=dashed label="multiplicative-expression"]
  1246 -> 85 [style=dashed label="namespace-alias"]
  1246 -> 88 [style=dashed label="namespace-name"]
  1246 -> 287 [style=dashed label="nested-name-specifier"]
  1246 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1246 -> 288 [style=dashed label="new-expression"]
  1246 -> 289 [style=dashed label="noexcept-expression"]
  1246 -> 290 [style=dashed label="operator-function-id"]
  1246 -> 94 [style=dashed label="placeholder-type-specifier"]
  1246 -> 291 [style=dashed label="pm-expression"]
  1246 -> 292 [style=dashed label="postfix-expression"]
  1246 -> 293 [style=dashed label="primary-expression"]
  1246 -> 294 [style=dashed label="qualified-id"]
  1246 -> 295 [style=dashed label="relational-expression"]
  1246 -> 296 [style=dashed label="requires-expression"]
  1246 -> 297 [style=dashed label="shift-expression"]
  1246 -> 298 [style=dashed label="simple-template-id"]
  1246 -> 299 [style=dashed label="simple-type-specifier"]
  1246 -> 300 [style=dashed label="string-literal"]
  1246 -> 301 [style=dashed label="template-id"]
  1246 -> 102 [style=dashed label="template-name"]
  1246 -> 302 [style=dashed label="throw-expression"]
  1246 -> 104 [style=dashed label="type-constraint"]
  1246 -> 105 [style=dashed label="type-constraint-opt"]
  1246 -> 106 [style=dashed label="type-name"]
  1246 -> 108 [style=dashed label="typedef-name"]
  1246 -> 303 [style=dashed label="typename-specifier"]
  1246 -> 304 [style=dashed label="unary-expression"]
  1246 -> 305 [style=dashed label="unary-operator"]
  1246 -> 306 [style=dashed label="unqualified-id"]
  1246 -> 307 [style=dashed label="yield-expression"]
  1246 -> "1246R19" [label="[\"delete\", \"new\"]", style=solid]
 "1246R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1246 -> "1246R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"[\", \"decltype\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\"]", style=solid]
 "1246R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1246 -> "1246R83" [style=solid]
 "1246R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1246 -> "1246R154" [label="[\";\"]", style=solid]
 "1246R154" [label="R154", fillcolor=3, shape=diamond, style=filled]
  1246 -> "1246R358d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"alignas\", \"[\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1246R358d" [label="R358", fillcolor=5, shape=diamond, style=filled]
  1246 -> "1246R458d" [label="[IDENTIFIER]", style=solid]
 "1246R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1246 -> "1246R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1246R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1247 [label="State 1247\n\l370 iteration-statement: \"for\" \"(\" init-statement-opt • for-range-declaration \":\" for-range-initializer \")\" statement\l"]
  1247 -> 177 [style=dashed label="attribute-specifier-seq"]
  1247 -> 1277 [style=dashed label="attribute-specifier-seq-opt"]
  1247 -> 1278 [style=dashed label="for-range-declaration"]
  1247 -> "1247R83" [style=solid]
 "1247R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1248 [label="State 1248\n\l355 init-statement: simple-declaration •\l"]
  1248 -> "1248R355" [style=solid]
 "1248R355" [label="R355", fillcolor=3, shape=diamond, style=filled]
  1249 [label="State 1249\n\l373 jump-statement: \"return\" expr-or-braced-init-list-opt \";\" •\l"]
  1249 -> "1249R373" [style=solid]
 "1249R373" [label="R373", fillcolor=3, shape=diamond, style=filled]
  1250 [label="State 1250\n\l375 jump-statement: \"goto\" IDENTIFIER \";\" •\l"]
  1250 -> "1250R375" [style=solid]
 "1250R375" [label="R375", fillcolor=3, shape=diamond, style=filled]
  1251 [label="State 1251\n\l377 labeled-statement: attribute-specifier-seq-opt \"case\" constant-expression \":\" • statement\l"]
  1251 -> 1 [style=solid label="\"constexpr\""]
  1251 -> 150 [style=solid label="\"extern\""]
  1251 -> 4 [style=solid label="IDENTIFIER"]
  1251 -> 151 [style=solid label="\"inline\""]
  1251 -> 6 [style=solid label="\"::\""]
  1251 -> 8 [style=solid label="\"typename\""]
  1251 -> 9 [style=solid label="\"virtual\""]
  1251 -> 10 [style=solid label="\"using\""]
  1251 -> 12 [style=solid label="\"class\""]
  1251 -> 13 [style=solid label="\"struct\""]
  1251 -> 14 [style=solid label="\"union\""]
  1251 -> 15 [style=solid label="\"const\""]
  1251 -> 16 [style=solid label="\"volatile\""]
  1251 -> 17 [style=solid label="\"friend\""]
  1251 -> 18 [style=solid label="\"typedef\""]
  1251 -> 19 [style=solid label="\"consteval\""]
  1251 -> 20 [style=solid label="\"constinit\""]
  1251 -> 21 [style=solid label="\"decltype\""]
  1251 -> 22 [style=solid label="\"enum\""]
  1251 -> 23 [style=solid label="\"explicit\""]
  1251 -> 972 [style=solid label="\"namespace\""]
  1251 -> 27 [style=solid label="\"char\""]
  1251 -> 28 [style=solid label="\"char8_t\""]
  1251 -> 29 [style=solid label="\"char16_t\""]
  1251 -> 30 [style=solid label="\"char32_t\""]
  1251 -> 31 [style=solid label="\"wchar_t\""]
  1251 -> 32 [style=solid label="\"bool\""]
  1251 -> 33 [style=solid label="\"short\""]
  1251 -> 34 [style=solid label="\"int\""]
  1251 -> 35 [style=solid label="\"long\""]
  1251 -> 36 [style=solid label="\"signed\""]
  1251 -> 37 [style=solid label="\"unsigned\""]
  1251 -> 38 [style=solid label="\"float\""]
  1251 -> 39 [style=solid label="\"double\""]
  1251 -> 40 [style=solid label="\"void\""]
  1251 -> 41 [style=solid label="\"static_assert\""]
  1251 -> 42 [style=solid label="\"static\""]
  1251 -> 43 [style=solid label="\"thread_local\""]
  1251 -> 44 [style=solid label="\"mutable\""]
  1251 -> 47 [style=dashed label="alias-declaration"]
  1251 -> 48 [style=dashed label="asm-declaration"]
  1251 -> 973 [style=dashed label="attribute-specifier-seq"]
  1251 -> 974 [style=dashed label="attribute-specifier-seq-opt"]
  1251 -> 975 [style=dashed label="block-declaration"]
  1251 -> 53 [style=dashed label="class-head"]
  1251 -> 54 [style=dashed label="class-key"]
  1251 -> 55 [style=dashed label="class-name"]
  1251 -> 56 [style=dashed label="class-specifier"]
  1251 -> 57 [style=dashed label="cv-qualifier"]
  1251 -> 58 [style=dashed label="decl-specifier"]
  1251 -> 59 [style=dashed label="decl-specifier-seq"]
  1251 -> 976 [style=dashed label="declaration-statement"]
  1251 -> 63 [style=dashed label="decltype-specifier"]
  1251 -> 65 [style=dashed label="defining-type-specifier"]
  1251 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1251 -> 67 [style=dashed label="elaborated-type-specifier"]
  1251 -> 69 [style=dashed label="enum-head"]
  1251 -> 70 [style=dashed label="enum-key"]
  1251 -> 71 [style=dashed label="enum-name"]
  1251 -> 72 [style=dashed label="enum-specifier"]
  1251 -> 155 [style=dashed label="explicit-specifier"]
  1251 -> 79 [style=dashed label="function-specifier"]
  1251 -> 977 [style=dashed label="labeled-statement"]
  1251 -> 85 [style=dashed label="namespace-alias"]
  1251 -> 86 [style=dashed label="namespace-alias-definition"]
  1251 -> 88 [style=dashed label="namespace-name"]
  1251 -> 89 [style=dashed label="nested-name-specifier"]
  1251 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1251 -> 93 [style=dashed label="opaque-enum-declaration"]
  1251 -> 94 [style=dashed label="placeholder-type-specifier"]
  1251 -> 95 [style=dashed label="simple-declaration"]
  1251 -> 96 [style=dashed label="simple-template-id"]
  1251 -> 97 [style=dashed label="simple-type-specifier"]
  1251 -> 1279 [style=dashed label="statement"]
  1251 -> 98 [style=dashed label="static_assert-declaration"]
  1251 -> 99 [style=dashed label="storage-class-specifier"]
  1251 -> 102 [style=dashed label="template-name"]
  1251 -> 104 [style=dashed label="type-constraint"]
  1251 -> 105 [style=dashed label="type-constraint-opt"]
  1251 -> 106 [style=dashed label="type-name"]
  1251 -> 107 [style=dashed label="type-specifier"]
  1251 -> 108 [style=dashed label="typedef-name"]
  1251 -> 109 [style=dashed label="typename-specifier"]
  1251 -> 111 [style=dashed label="using-declaration"]
  1251 -> 112 [style=dashed label="using-directive"]
  1251 -> 113 [style=dashed label="using-enum-declaration"]
  1251 -> "1251R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1251R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1251 -> "1251R83" [style=solid]
 "1251R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1251 -> "1251R458d" [label="[IDENTIFIER]", style=solid]
 "1251R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1251 -> "1251R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1251R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1252 [label="State 1252\n\l628 selection-statement: \"if\" CONSTEXPR-opt \"(\" • init-statement-opt condition \")\" statement\l629                    | \"if\" CONSTEXPR-opt \"(\" • init-statement-opt condition \")\" statement \"else\" statement\l"]
  1252 -> 1 [style=solid label="\"constexpr\""]
  1252 -> 150 [style=solid label="\"extern\""]
  1252 -> 238 [style=solid label="IDENTIFIER"]
  1252 -> 151 [style=solid label="\"inline\""]
  1252 -> 239 [style=solid label="\"noexcept\""]
  1252 -> 240 [style=solid label="\"!\""]
  1252 -> 241 [style=solid label="\"::\""]
  1252 -> 242 [style=solid label="\"this\""]
  1252 -> 8 [style=solid label="\"typename\""]
  1252 -> 9 [style=solid label="\"virtual\""]
  1252 -> 243 [style=solid label="\"+\""]
  1252 -> 244 [style=solid label="\"-\""]
  1252 -> 1242 [style=solid label="\"using\""]
  1252 -> 245 [style=solid label="\"(\""]
  1252 -> 246 [style=solid label="\"&\""]
  1252 -> 247 [style=solid label="\"[\""]
  1252 -> 248 [style=solid label="\"co_await\""]
  1252 -> 12 [style=solid label="\"class\""]
  1252 -> 13 [style=solid label="\"struct\""]
  1252 -> 14 [style=solid label="\"union\""]
  1252 -> 249 [style=solid label="\"operator\""]
  1252 -> 15 [style=solid label="\"const\""]
  1252 -> 16 [style=solid label="\"volatile\""]
  1252 -> 17 [style=solid label="\"friend\""]
  1252 -> 18 [style=solid label="\"typedef\""]
  1252 -> 19 [style=solid label="\"consteval\""]
  1252 -> 20 [style=solid label="\"constinit\""]
  1252 -> 21 [style=solid label="\"decltype\""]
  1252 -> 22 [style=solid label="\"enum\""]
  1252 -> 23 [style=solid label="\"explicit\""]
  1252 -> 250 [style=solid label="\"*\""]
  1252 -> 251 [style=solid label="\"requires\""]
  1252 -> 252 [style=solid label="\"~\""]
  1252 -> 253 [style=solid label="\"++\""]
  1252 -> 254 [style=solid label="\"--\""]
  1252 -> 255 [style=solid label="\"dynamic_cast\""]
  1252 -> 256 [style=solid label="\"static_cast\""]
  1252 -> 257 [style=solid label="\"reinterpret_cast\""]
  1252 -> 258 [style=solid label="\"const_cast\""]
  1252 -> 259 [style=solid label="\"typeid\""]
  1252 -> 260 [style=solid label="\"literal\""]
  1252 -> 27 [style=solid label="\"char\""]
  1252 -> 28 [style=solid label="\"char8_t\""]
  1252 -> 29 [style=solid label="\"char16_t\""]
  1252 -> 30 [style=solid label="\"char32_t\""]
  1252 -> 31 [style=solid label="\"wchar_t\""]
  1252 -> 32 [style=solid label="\"bool\""]
  1252 -> 33 [style=solid label="\"short\""]
  1252 -> 34 [style=solid label="\"int\""]
  1252 -> 35 [style=solid label="\"long\""]
  1252 -> 36 [style=solid label="\"signed\""]
  1252 -> 37 [style=solid label="\"unsigned\""]
  1252 -> 38 [style=solid label="\"float\""]
  1252 -> 39 [style=solid label="\"double\""]
  1252 -> 40 [style=solid label="\"void\""]
  1252 -> 42 [style=solid label="\"static\""]
  1252 -> 43 [style=solid label="\"thread_local\""]
  1252 -> 44 [style=solid label="\"mutable\""]
  1252 -> 118 [style=solid label="STRING_LITERAL"]
  1252 -> 261 [style=solid label="\"throw\""]
  1252 -> 262 [style=solid label="\"sizeof\""]
  1252 -> 263 [style=solid label="\"alignof\""]
  1252 -> 264 [style=solid label="\"co_yield\""]
  1252 -> 265 [style=dashed label="SCOPE-opt"]
  1252 -> 266 [style=dashed label="additive-expression"]
  1252 -> 1243 [style=dashed label="alias-declaration"]
  1252 -> 267 [style=dashed label="and-expression"]
  1252 -> 268 [style=dashed label="assignment-expression"]
  1252 -> 973 [style=dashed label="attribute-specifier-seq"]
  1252 -> 1244 [style=dashed label="attribute-specifier-seq-opt"]
  1252 -> 269 [style=dashed label="await-expression"]
  1252 -> 270 [style=dashed label="cast-expression"]
  1252 -> 53 [style=dashed label="class-head"]
  1252 -> 54 [style=dashed label="class-key"]
  1252 -> 55 [style=dashed label="class-name"]
  1252 -> 56 [style=dashed label="class-specifier"]
  1252 -> 271 [style=dashed label="compare-expression"]
  1252 -> 272 [style=dashed label="conditional-expression"]
  1252 -> 273 [style=dashed label="conversion-function-id"]
  1252 -> 57 [style=dashed label="cv-qualifier"]
  1252 -> 58 [style=dashed label="decl-specifier"]
  1252 -> 59 [style=dashed label="decl-specifier-seq"]
  1252 -> 63 [style=dashed label="decltype-specifier"]
  1252 -> 65 [style=dashed label="defining-type-specifier"]
  1252 -> 274 [style=dashed label="delete-expression"]
  1252 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1252 -> 67 [style=dashed label="elaborated-type-specifier"]
  1252 -> 69 [style=dashed label="enum-head"]
  1252 -> 154 [style=dashed label="enum-key"]
  1252 -> 71 [style=dashed label="enum-name"]
  1252 -> 72 [style=dashed label="enum-specifier"]
  1252 -> 275 [style=dashed label="equality-expression"]
  1252 -> 276 [style=dashed label="exclusive-or-expression"]
  1252 -> 155 [style=dashed label="explicit-specifier"]
  1252 -> 1110 [style=dashed label="expression"]
  1252 -> 1111 [style=dashed label="expression-opt"]
  1252 -> 1245 [style=dashed label="expression-statement"]
  1252 -> 278 [style=dashed label="fold-expression"]
  1252 -> 79 [style=dashed label="function-specifier"]
  1252 -> 279 [style=dashed label="id-expression"]
  1252 -> 280 [style=dashed label="inclusive-or-expression"]
  1252 -> 1254 [style=dashed label="init-statement"]
  1252 -> 1280 [style=dashed label="init-statement-opt"]
  1252 -> 281 [style=dashed label="lambda-expression"]
  1252 -> 282 [style=dashed label="lambda-introducer"]
  1252 -> 283 [style=dashed label="literal-operator-id"]
  1252 -> 284 [style=dashed label="logical-and-expression"]
  1252 -> 285 [style=dashed label="logical-or-expression"]
  1252 -> 286 [style=dashed label="multiplicative-expression"]
  1252 -> 85 [style=dashed label="namespace-alias"]
  1252 -> 88 [style=dashed label="namespace-name"]
  1252 -> 287 [style=dashed label="nested-name-specifier"]
  1252 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1252 -> 288 [style=dashed label="new-expression"]
  1252 -> 289 [style=dashed label="noexcept-expression"]
  1252 -> 290 [style=dashed label="operator-function-id"]
  1252 -> 94 [style=dashed label="placeholder-type-specifier"]
  1252 -> 291 [style=dashed label="pm-expression"]
  1252 -> 292 [style=dashed label="postfix-expression"]
  1252 -> 293 [style=dashed label="primary-expression"]
  1252 -> 294 [style=dashed label="qualified-id"]
  1252 -> 295 [style=dashed label="relational-expression"]
  1252 -> 296 [style=dashed label="requires-expression"]
  1252 -> 297 [style=dashed label="shift-expression"]
  1252 -> 1248 [style=dashed label="simple-declaration"]
  1252 -> 298 [style=dashed label="simple-template-id"]
  1252 -> 409 [style=dashed label="simple-type-specifier"]
  1252 -> 99 [style=dashed label="storage-class-specifier"]
  1252 -> 300 [style=dashed label="string-literal"]
  1252 -> 301 [style=dashed label="template-id"]
  1252 -> 102 [style=dashed label="template-name"]
  1252 -> 302 [style=dashed label="throw-expression"]
  1252 -> 104 [style=dashed label="type-constraint"]
  1252 -> 105 [style=dashed label="type-constraint-opt"]
  1252 -> 106 [style=dashed label="type-name"]
  1252 -> 107 [style=dashed label="type-specifier"]
  1252 -> 108 [style=dashed label="typedef-name"]
  1252 -> 416 [style=dashed label="typename-specifier"]
  1252 -> 304 [style=dashed label="unary-expression"]
  1252 -> 305 [style=dashed label="unary-operator"]
  1252 -> 306 [style=dashed label="unqualified-id"]
  1252 -> 307 [style=dashed label="yield-expression"]
  1252 -> "1252R19" [style=solid]
 "1252R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1252 -> "1252R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"[\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1252R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1252 -> "1252R83" [label="[\"alignas\", \"auto\"]", style=solid]
 "1252R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1252 -> "1252R282" [label="[\";\"]", style=solid]
 "1252R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  1252 -> "1252R357d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"noexcept\", \"!\", \"::\", \"this\", \"typename\", \"virtual\", \"+\", \"-\", \"alignas\", \"(\", \"&\", \"[\", \"co_await\", \"class\", \"struct\", \"union\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"delete\", \"enum\", \"explicit\", \"*\", \"requires\", \"new\", \"~\", \"++\", \"--\", \"auto\", \"dynamic_cast\", \"static_cast\", \"reinterpret_cast\", \"const_cast\", \"typeid\", \"literal\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", STRING_LITERAL, \"throw\", \"sizeof\", \"alignof\", \"co_yield\"]", style=solid]
 "1252R357d" [label="R357", fillcolor=5, shape=diamond, style=filled]
  1252 -> "1252R458d" [label="[IDENTIFIER]", style=solid]
 "1252R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1252 -> "1252R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1252R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1253 [label="State 1253\n\l630 selection-statement: \"if\" NOT-opt \"consteval\" • compound-statement\l631                    | \"if\" NOT-opt \"consteval\" • compound-statement \"else\" statement\l"]
  1253 -> 794 [style=solid label="\"{\""]
  1253 -> 1281 [style=dashed label="compound-statement"]
  1254 [label="State 1254\n\l358 init-statement-opt: init-statement •\l"]
  1254 -> "1254R358" [style=solid]
 "1254R358" [label="R358", fillcolor=3, shape=diamond, style=filled]
  1255 [label="State 1255\n\l632 selection-statement: \"switch\" \"(\" init-statement-opt • condition \")\" statement\l"]
  1255 -> 238 [style=solid label="IDENTIFIER"]
  1255 -> 239 [style=solid label="\"noexcept\""]
  1255 -> 240 [style=solid label="\"!\""]
  1255 -> 241 [style=solid label="\"::\""]
  1255 -> 242 [style=solid label="\"this\""]
  1255 -> 8 [style=solid label="\"typename\""]
  1255 -> 243 [style=solid label="\"+\""]
  1255 -> 244 [style=solid label="\"-\""]
  1255 -> 245 [style=solid label="\"(\""]
  1255 -> 246 [style=solid label="\"&\""]
  1255 -> 247 [style=solid label="\"[\""]
  1255 -> 248 [style=solid label="\"co_await\""]
  1255 -> 249 [style=solid label="\"operator\""]
  1255 -> 21 [style=solid label="\"decltype\""]
  1255 -> 250 [style=solid label="\"*\""]
  1255 -> 251 [style=solid label="\"requires\""]
  1255 -> 252 [style=solid label="\"~\""]
  1255 -> 253 [style=solid label="\"++\""]
  1255 -> 254 [style=solid label="\"--\""]
  1255 -> 255 [style=solid label="\"dynamic_cast\""]
  1255 -> 256 [style=solid label="\"static_cast\""]
  1255 -> 257 [style=solid label="\"reinterpret_cast\""]
  1255 -> 258 [style=solid label="\"const_cast\""]
  1255 -> 259 [style=solid label="\"typeid\""]
  1255 -> 260 [style=solid label="\"literal\""]
  1255 -> 27 [style=solid label="\"char\""]
  1255 -> 28 [style=solid label="\"char8_t\""]
  1255 -> 29 [style=solid label="\"char16_t\""]
  1255 -> 30 [style=solid label="\"char32_t\""]
  1255 -> 31 [style=solid label="\"wchar_t\""]
  1255 -> 32 [style=solid label="\"bool\""]
  1255 -> 33 [style=solid label="\"short\""]
  1255 -> 34 [style=solid label="\"int\""]
  1255 -> 35 [style=solid label="\"long\""]
  1255 -> 36 [style=solid label="\"signed\""]
  1255 -> 37 [style=solid label="\"unsigned\""]
  1255 -> 38 [style=solid label="\"float\""]
  1255 -> 39 [style=solid label="\"double\""]
  1255 -> 40 [style=solid label="\"void\""]
  1255 -> 118 [style=solid label="STRING_LITERAL"]
  1255 -> 261 [style=solid label="\"throw\""]
  1255 -> 262 [style=solid label="\"sizeof\""]
  1255 -> 263 [style=solid label="\"alignof\""]
  1255 -> 264 [style=solid label="\"co_yield\""]
  1255 -> 265 [style=dashed label="SCOPE-opt"]
  1255 -> 266 [style=dashed label="additive-expression"]
  1255 -> 267 [style=dashed label="and-expression"]
  1255 -> 268 [style=dashed label="assignment-expression"]
  1255 -> 177 [style=dashed label="attribute-specifier-seq"]
  1255 -> 1238 [style=dashed label="attribute-specifier-seq-opt"]
  1255 -> 269 [style=dashed label="await-expression"]
  1255 -> 270 [style=dashed label="cast-expression"]
  1255 -> 55 [style=dashed label="class-name"]
  1255 -> 271 [style=dashed label="compare-expression"]
  1255 -> 1282 [style=dashed label="condition"]
  1255 -> 272 [style=dashed label="conditional-expression"]
  1255 -> 273 [style=dashed label="conversion-function-id"]
  1255 -> 63 [style=dashed label="decltype-specifier"]
  1255 -> 274 [style=dashed label="delete-expression"]
  1255 -> 71 [style=dashed label="enum-name"]
  1255 -> 275 [style=dashed label="equality-expression"]
  1255 -> 276 [style=dashed label="exclusive-or-expression"]
  1255 -> 1240 [style=dashed label="expression"]
  1255 -> 278 [style=dashed label="fold-expression"]
  1255 -> 279 [style=dashed label="id-expression"]
  1255 -> 280 [style=dashed label="inclusive-or-expression"]
  1255 -> 281 [style=dashed label="lambda-expression"]
  1255 -> 282 [style=dashed label="lambda-introducer"]
  1255 -> 283 [style=dashed label="literal-operator-id"]
  1255 -> 284 [style=dashed label="logical-and-expression"]
  1255 -> 285 [style=dashed label="logical-or-expression"]
  1255 -> 286 [style=dashed label="multiplicative-expression"]
  1255 -> 85 [style=dashed label="namespace-alias"]
  1255 -> 88 [style=dashed label="namespace-name"]
  1255 -> 287 [style=dashed label="nested-name-specifier"]
  1255 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1255 -> 288 [style=dashed label="new-expression"]
  1255 -> 289 [style=dashed label="noexcept-expression"]
  1255 -> 290 [style=dashed label="operator-function-id"]
  1255 -> 94 [style=dashed label="placeholder-type-specifier"]
  1255 -> 291 [style=dashed label="pm-expression"]
  1255 -> 292 [style=dashed label="postfix-expression"]
  1255 -> 293 [style=dashed label="primary-expression"]
  1255 -> 294 [style=dashed label="qualified-id"]
  1255 -> 295 [style=dashed label="relational-expression"]
  1255 -> 296 [style=dashed label="requires-expression"]
  1255 -> 297 [style=dashed label="shift-expression"]
  1255 -> 298 [style=dashed label="simple-template-id"]
  1255 -> 299 [style=dashed label="simple-type-specifier"]
  1255 -> 300 [style=dashed label="string-literal"]
  1255 -> 301 [style=dashed label="template-id"]
  1255 -> 102 [style=dashed label="template-name"]
  1255 -> 302 [style=dashed label="throw-expression"]
  1255 -> 104 [style=dashed label="type-constraint"]
  1255 -> 105 [style=dashed label="type-constraint-opt"]
  1255 -> 106 [style=dashed label="type-name"]
  1255 -> 108 [style=dashed label="typedef-name"]
  1255 -> 303 [style=dashed label="typename-specifier"]
  1255 -> 304 [style=dashed label="unary-expression"]
  1255 -> 305 [style=dashed label="unary-operator"]
  1255 -> 306 [style=dashed label="unqualified-id"]
  1255 -> 307 [style=dashed label="yield-expression"]
  1255 -> "1255R19" [label="[\"delete\", \"new\"]", style=solid]
 "1255R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1255 -> "1255R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"[\", \"decltype\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\"]", style=solid]
 "1255R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1255 -> "1255R83" [style=solid]
 "1255R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1255 -> "1255R458d" [label="[IDENTIFIER]", style=solid]
 "1255R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1255 -> "1255R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1255R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1256 [label="State 1256\n\l 91 balanced-token: \"(\" balanced-token-seq-opt \")\" •\l"]
  1256 -> "1256R91" [style=solid]
 "1256R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
  1257 [label="State 1257\n\l 92 balanced-token: \"[\" balanced-token-seq-opt \"]\" •\l"]
  1257 -> "1257R92" [style=solid]
 "1257R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
  1258 [label="State 1258\n\l 93 balanced-token: \"{\" balanced-token-seq-opt \"}\" •\l"]
  1258 -> "1258R93" [style=solid]
 "1258R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  1259 [label="State 1259\n\l398 mem-initializer: mem-initializer-id \"(\" expression-list-opt \")\" •\l"]
  1259 -> "1259R398" [style=solid]
 "1259R398" [label="R398", fillcolor=3, shape=diamond, style=filled]
  1260 [label="State 1260\n\l403 mem-initializer-list: mem-initializer-list \",\" mem-initializer ELLIPSIS-opt •\l"]
  1260 -> "1260R403" [style=solid]
 "1260R403" [label="R403", fillcolor=3, shape=diamond, style=filled]
  1261 [label="State 1261\n\l335 handler: \"catch\" \"(\" • exception-declaration \")\" compound-statement\l"]
  1261 -> 1283 [style=solid label="\"...\""]
  1261 -> 177 [style=dashed label="attribute-specifier-seq"]
  1261 -> 1284 [style=dashed label="attribute-specifier-seq-opt"]
  1261 -> 1285 [style=dashed label="exception-declaration"]
  1261 -> "1261R83" [style=solid]
 "1261R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1262 [label="State 1262\n\l338 handler-seq-opt: handler-seq •\l"]
  1262 -> "1262R338" [style=solid]
 "1262R338" [label="R338", fillcolor=3, shape=diamond, style=filled]
  1263 [label="State 1263\n\l336 handler-seq: handler handler-seq-opt •\l"]
  1263 -> "1263R336" [style=solid]
 "1263R336" [label="R336", fillcolor=3, shape=diamond, style=filled]
  1264 [label="State 1264\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l553 parameters-and-qualifiers: \"(\" parameter-declaration-clause \")\" cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt •\l"]
  1264 -> 158 [style=solid label="\"alignas\""]
  1264 -> 162 [style=solid label="\"[\""]
  1264 -> 166 [style=dashed label="alignment-specifier"]
  1264 -> 167 [style=dashed label="attribute-specifier"]
  1264 -> "1264R553d" [label="[\"[\"]", style=solid]
 "1264R553d" [label="R553", fillcolor=5, shape=diamond, style=filled]
  1264 -> "1264R553" [style=solid]
 "1264R553" [label="R553", fillcolor=3, shape=diamond, style=filled]
  1265 [label="State 1265\n\l418 member-declarator: IDENTIFIER-opt attribute-specifier-seq-opt \":\" constant-expression brace-or-equal-initializer-opt •\l"]
  1265 -> "1265R418" [style=solid]
 "1265R418" [label="R418", fillcolor=3, shape=diamond, style=filled]
  1266 [label="State 1266\n\l597 pure-specifier: \"=\" • '0'\l"]
  1266 -> 1214 [style=solid label="'0'"]
  1267 [label="State 1267\n\l625 return-type-requirement: \"->\" • type-constraint\l"]
  1267 -> 4 [style=solid label="IDENTIFIER"]
  1267 -> 6 [style=solid label="\"::\""]
  1267 -> 21 [style=solid label="\"decltype\""]
  1267 -> 55 [style=dashed label="class-name"]
  1267 -> 121 [style=dashed label="decltype-specifier"]
  1267 -> 71 [style=dashed label="enum-name"]
  1267 -> 85 [style=dashed label="namespace-alias"]
  1267 -> 88 [style=dashed label="namespace-name"]
  1267 -> 133 [style=dashed label="nested-name-specifier"]
  1267 -> 221 [style=dashed label="nested-name-specifier-opt"]
  1267 -> 96 [style=dashed label="simple-template-id"]
  1267 -> 102 [style=dashed label="template-name"]
  1267 -> 1286 [style=dashed label="type-constraint"]
  1267 -> 106 [style=dashed label="type-name"]
  1267 -> 108 [style=dashed label="typedef-name"]
  1267 -> "1267R458d" [label="[IDENTIFIER]", style=solid]
 "1267R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1268 [label="State 1268\n\l627 return-type-requirement-opt: return-type-requirement •\l"]
  1268 -> "1268R627" [style=solid]
 "1268R627" [label="R627", fillcolor=3, shape=diamond, style=filled]
  1269 [label="State 1269\n\l148 compound-requirement: \"{\" expression \"}\" NOEXCEPT-opt return-type-requirement-opt • \";\"\l"]
  1269 -> 1287 [style=solid label="\";\""]
  1270 [label="State 1270\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l494 noptr-new-declarator: \"[\" expression-opt \"]\" attribute-specifier-seq-opt •\l"]
  1270 -> 158 [style=solid label="\"alignas\""]
  1270 -> 162 [style=solid label="\"[\""]
  1270 -> 166 [style=dashed label="alignment-specifier"]
  1270 -> 167 [style=dashed label="attribute-specifier"]
  1270 -> "1270R494d" [label="[\"[\"]", style=solid]
 "1270R494d" [label="R494", fillcolor=5, shape=diamond, style=filled]
  1270 -> "1270R494" [style=solid]
 "1270R494" [label="R494", fillcolor=3, shape=diamond, style=filled]
  1271 [label="State 1271\n\l495 noptr-new-declarator: noptr-new-declarator \"[\" constant-expression \"]\" • attribute-specifier-seq-opt\l"]
  1271 -> 177 [style=dashed label="attribute-specifier-seq"]
  1271 -> 1288 [style=dashed label="attribute-specifier-seq-opt"]
  1271 -> "1271R83" [style=solid]
 "1271R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1272 [label="State 1272\n\l153 condition: attribute-specifier-seq-opt decl-specifier-seq • declarator brace-or-equal-initializer\l"]
  1272 -> 156 [style=solid label="\"...\""]
  1272 -> 4 [style=solid label="IDENTIFIER"]
  1272 -> 6 [style=solid label="\"::\""]
  1272 -> 159 [style=solid label="\"(\""]
  1272 -> 160 [style=solid label="\"&\""]
  1272 -> 163 [style=solid label="\"&&\""]
  1272 -> 21 [style=solid label="\"decltype\""]
  1272 -> 164 [style=solid label="\"*\""]
  1272 -> 165 [style=dashed label="ELLIPSIS-opt"]
  1272 -> 55 [style=dashed label="class-name"]
  1272 -> 1289 [style=dashed label="declarator"]
  1272 -> 171 [style=dashed label="declarator-id"]
  1272 -> 121 [style=dashed label="decltype-specifier"]
  1272 -> 71 [style=dashed label="enum-name"]
  1272 -> 85 [style=dashed label="namespace-alias"]
  1272 -> 88 [style=dashed label="namespace-name"]
  1272 -> 187 [style=dashed label="nested-name-specifier"]
  1272 -> 173 [style=dashed label="noptr-declarator"]
  1272 -> 174 [style=dashed label="ptr-declarator"]
  1272 -> 175 [style=dashed label="ptr-operator"]
  1272 -> 96 [style=dashed label="simple-template-id"]
  1272 -> 102 [style=dashed label="template-name"]
  1272 -> 106 [style=dashed label="type-name"]
  1272 -> 108 [style=dashed label="typedef-name"]
  1272 -> "1272R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "1272R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  1272 -> "1272R5" [style=solid]
 "1272R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1273 [label="State 1273\n\l367 iteration-statement: \"while\" \"(\" condition \")\" • statement\l"]
  1273 -> 1 [style=solid label="\"constexpr\""]
  1273 -> 150 [style=solid label="\"extern\""]
  1273 -> 4 [style=solid label="IDENTIFIER"]
  1273 -> 151 [style=solid label="\"inline\""]
  1273 -> 6 [style=solid label="\"::\""]
  1273 -> 8 [style=solid label="\"typename\""]
  1273 -> 9 [style=solid label="\"virtual\""]
  1273 -> 10 [style=solid label="\"using\""]
  1273 -> 12 [style=solid label="\"class\""]
  1273 -> 13 [style=solid label="\"struct\""]
  1273 -> 14 [style=solid label="\"union\""]
  1273 -> 15 [style=solid label="\"const\""]
  1273 -> 16 [style=solid label="\"volatile\""]
  1273 -> 17 [style=solid label="\"friend\""]
  1273 -> 18 [style=solid label="\"typedef\""]
  1273 -> 19 [style=solid label="\"consteval\""]
  1273 -> 20 [style=solid label="\"constinit\""]
  1273 -> 21 [style=solid label="\"decltype\""]
  1273 -> 22 [style=solid label="\"enum\""]
  1273 -> 23 [style=solid label="\"explicit\""]
  1273 -> 972 [style=solid label="\"namespace\""]
  1273 -> 27 [style=solid label="\"char\""]
  1273 -> 28 [style=solid label="\"char8_t\""]
  1273 -> 29 [style=solid label="\"char16_t\""]
  1273 -> 30 [style=solid label="\"char32_t\""]
  1273 -> 31 [style=solid label="\"wchar_t\""]
  1273 -> 32 [style=solid label="\"bool\""]
  1273 -> 33 [style=solid label="\"short\""]
  1273 -> 34 [style=solid label="\"int\""]
  1273 -> 35 [style=solid label="\"long\""]
  1273 -> 36 [style=solid label="\"signed\""]
  1273 -> 37 [style=solid label="\"unsigned\""]
  1273 -> 38 [style=solid label="\"float\""]
  1273 -> 39 [style=solid label="\"double\""]
  1273 -> 40 [style=solid label="\"void\""]
  1273 -> 41 [style=solid label="\"static_assert\""]
  1273 -> 42 [style=solid label="\"static\""]
  1273 -> 43 [style=solid label="\"thread_local\""]
  1273 -> 44 [style=solid label="\"mutable\""]
  1273 -> 47 [style=dashed label="alias-declaration"]
  1273 -> 48 [style=dashed label="asm-declaration"]
  1273 -> 973 [style=dashed label="attribute-specifier-seq"]
  1273 -> 974 [style=dashed label="attribute-specifier-seq-opt"]
  1273 -> 975 [style=dashed label="block-declaration"]
  1273 -> 53 [style=dashed label="class-head"]
  1273 -> 54 [style=dashed label="class-key"]
  1273 -> 55 [style=dashed label="class-name"]
  1273 -> 56 [style=dashed label="class-specifier"]
  1273 -> 57 [style=dashed label="cv-qualifier"]
  1273 -> 58 [style=dashed label="decl-specifier"]
  1273 -> 59 [style=dashed label="decl-specifier-seq"]
  1273 -> 976 [style=dashed label="declaration-statement"]
  1273 -> 63 [style=dashed label="decltype-specifier"]
  1273 -> 65 [style=dashed label="defining-type-specifier"]
  1273 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1273 -> 67 [style=dashed label="elaborated-type-specifier"]
  1273 -> 69 [style=dashed label="enum-head"]
  1273 -> 70 [style=dashed label="enum-key"]
  1273 -> 71 [style=dashed label="enum-name"]
  1273 -> 72 [style=dashed label="enum-specifier"]
  1273 -> 155 [style=dashed label="explicit-specifier"]
  1273 -> 79 [style=dashed label="function-specifier"]
  1273 -> 977 [style=dashed label="labeled-statement"]
  1273 -> 85 [style=dashed label="namespace-alias"]
  1273 -> 86 [style=dashed label="namespace-alias-definition"]
  1273 -> 88 [style=dashed label="namespace-name"]
  1273 -> 89 [style=dashed label="nested-name-specifier"]
  1273 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1273 -> 93 [style=dashed label="opaque-enum-declaration"]
  1273 -> 94 [style=dashed label="placeholder-type-specifier"]
  1273 -> 95 [style=dashed label="simple-declaration"]
  1273 -> 96 [style=dashed label="simple-template-id"]
  1273 -> 97 [style=dashed label="simple-type-specifier"]
  1273 -> 1290 [style=dashed label="statement"]
  1273 -> 98 [style=dashed label="static_assert-declaration"]
  1273 -> 99 [style=dashed label="storage-class-specifier"]
  1273 -> 102 [style=dashed label="template-name"]
  1273 -> 104 [style=dashed label="type-constraint"]
  1273 -> 105 [style=dashed label="type-constraint-opt"]
  1273 -> 106 [style=dashed label="type-name"]
  1273 -> 107 [style=dashed label="type-specifier"]
  1273 -> 108 [style=dashed label="typedef-name"]
  1273 -> 109 [style=dashed label="typename-specifier"]
  1273 -> 111 [style=dashed label="using-declaration"]
  1273 -> 112 [style=dashed label="using-directive"]
  1273 -> 113 [style=dashed label="using-enum-declaration"]
  1273 -> "1273R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1273R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1273 -> "1273R83" [style=solid]
 "1273R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1273 -> "1273R458d" [label="[IDENTIFIER]", style=solid]
 "1273R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1273 -> "1273R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1273R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1274 [label="State 1274\n\l368 iteration-statement: \"do\" statement \"while\" \"(\" • expression \")\" \";\"\l"]
  1274 -> 238 [style=solid label="IDENTIFIER"]
  1274 -> 239 [style=solid label="\"noexcept\""]
  1274 -> 240 [style=solid label="\"!\""]
  1274 -> 241 [style=solid label="\"::\""]
  1274 -> 242 [style=solid label="\"this\""]
  1274 -> 8 [style=solid label="\"typename\""]
  1274 -> 243 [style=solid label="\"+\""]
  1274 -> 244 [style=solid label="\"-\""]
  1274 -> 245 [style=solid label="\"(\""]
  1274 -> 246 [style=solid label="\"&\""]
  1274 -> 247 [style=solid label="\"[\""]
  1274 -> 248 [style=solid label="\"co_await\""]
  1274 -> 249 [style=solid label="\"operator\""]
  1274 -> 21 [style=solid label="\"decltype\""]
  1274 -> 250 [style=solid label="\"*\""]
  1274 -> 251 [style=solid label="\"requires\""]
  1274 -> 252 [style=solid label="\"~\""]
  1274 -> 253 [style=solid label="\"++\""]
  1274 -> 254 [style=solid label="\"--\""]
  1274 -> 255 [style=solid label="\"dynamic_cast\""]
  1274 -> 256 [style=solid label="\"static_cast\""]
  1274 -> 257 [style=solid label="\"reinterpret_cast\""]
  1274 -> 258 [style=solid label="\"const_cast\""]
  1274 -> 259 [style=solid label="\"typeid\""]
  1274 -> 260 [style=solid label="\"literal\""]
  1274 -> 27 [style=solid label="\"char\""]
  1274 -> 28 [style=solid label="\"char8_t\""]
  1274 -> 29 [style=solid label="\"char16_t\""]
  1274 -> 30 [style=solid label="\"char32_t\""]
  1274 -> 31 [style=solid label="\"wchar_t\""]
  1274 -> 32 [style=solid label="\"bool\""]
  1274 -> 33 [style=solid label="\"short\""]
  1274 -> 34 [style=solid label="\"int\""]
  1274 -> 35 [style=solid label="\"long\""]
  1274 -> 36 [style=solid label="\"signed\""]
  1274 -> 37 [style=solid label="\"unsigned\""]
  1274 -> 38 [style=solid label="\"float\""]
  1274 -> 39 [style=solid label="\"double\""]
  1274 -> 40 [style=solid label="\"void\""]
  1274 -> 118 [style=solid label="STRING_LITERAL"]
  1274 -> 261 [style=solid label="\"throw\""]
  1274 -> 262 [style=solid label="\"sizeof\""]
  1274 -> 263 [style=solid label="\"alignof\""]
  1274 -> 264 [style=solid label="\"co_yield\""]
  1274 -> 265 [style=dashed label="SCOPE-opt"]
  1274 -> 266 [style=dashed label="additive-expression"]
  1274 -> 267 [style=dashed label="and-expression"]
  1274 -> 268 [style=dashed label="assignment-expression"]
  1274 -> 269 [style=dashed label="await-expression"]
  1274 -> 270 [style=dashed label="cast-expression"]
  1274 -> 55 [style=dashed label="class-name"]
  1274 -> 271 [style=dashed label="compare-expression"]
  1274 -> 272 [style=dashed label="conditional-expression"]
  1274 -> 273 [style=dashed label="conversion-function-id"]
  1274 -> 63 [style=dashed label="decltype-specifier"]
  1274 -> 274 [style=dashed label="delete-expression"]
  1274 -> 71 [style=dashed label="enum-name"]
  1274 -> 275 [style=dashed label="equality-expression"]
  1274 -> 276 [style=dashed label="exclusive-or-expression"]
  1274 -> 1291 [style=dashed label="expression"]
  1274 -> 278 [style=dashed label="fold-expression"]
  1274 -> 279 [style=dashed label="id-expression"]
  1274 -> 280 [style=dashed label="inclusive-or-expression"]
  1274 -> 281 [style=dashed label="lambda-expression"]
  1274 -> 282 [style=dashed label="lambda-introducer"]
  1274 -> 283 [style=dashed label="literal-operator-id"]
  1274 -> 284 [style=dashed label="logical-and-expression"]
  1274 -> 285 [style=dashed label="logical-or-expression"]
  1274 -> 286 [style=dashed label="multiplicative-expression"]
  1274 -> 85 [style=dashed label="namespace-alias"]
  1274 -> 88 [style=dashed label="namespace-name"]
  1274 -> 287 [style=dashed label="nested-name-specifier"]
  1274 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1274 -> 288 [style=dashed label="new-expression"]
  1274 -> 289 [style=dashed label="noexcept-expression"]
  1274 -> 290 [style=dashed label="operator-function-id"]
  1274 -> 94 [style=dashed label="placeholder-type-specifier"]
  1274 -> 291 [style=dashed label="pm-expression"]
  1274 -> 292 [style=dashed label="postfix-expression"]
  1274 -> 293 [style=dashed label="primary-expression"]
  1274 -> 294 [style=dashed label="qualified-id"]
  1274 -> 295 [style=dashed label="relational-expression"]
  1274 -> 296 [style=dashed label="requires-expression"]
  1274 -> 297 [style=dashed label="shift-expression"]
  1274 -> 298 [style=dashed label="simple-template-id"]
  1274 -> 299 [style=dashed label="simple-type-specifier"]
  1274 -> 300 [style=dashed label="string-literal"]
  1274 -> 301 [style=dashed label="template-id"]
  1274 -> 102 [style=dashed label="template-name"]
  1274 -> 302 [style=dashed label="throw-expression"]
  1274 -> 104 [style=dashed label="type-constraint"]
  1274 -> 105 [style=dashed label="type-constraint-opt"]
  1274 -> 106 [style=dashed label="type-name"]
  1274 -> 108 [style=dashed label="typedef-name"]
  1274 -> 303 [style=dashed label="typename-specifier"]
  1274 -> 304 [style=dashed label="unary-expression"]
  1274 -> 305 [style=dashed label="unary-operator"]
  1274 -> 306 [style=dashed label="unqualified-id"]
  1274 -> 307 [style=dashed label="yield-expression"]
  1274 -> "1274R19" [style=solid]
 "1274R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1274 -> "1274R458d" [label="[IDENTIFIER]", style=solid]
 "1274R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1274 -> "1274R710d" [label="[\"decltype\"]", style=solid]
 "1274R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1274 -> "1274R710" [label="[\"auto\"]", style=solid]
 "1274R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1275 [label="State 1275\n\l155 condition-opt: condition •\l"]
  1275 -> "1275R155" [style=solid]
 "1275R155" [label="R155", fillcolor=3, shape=diamond, style=filled]
  1276 [label="State 1276\n\l369 iteration-statement: \"for\" \"(\" init-statement condition-opt • \";\" expression-opt \")\" statement\l"]
  1276 -> 1292 [style=solid label="\";\""]
  1277 [label="State 1277\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l320 for-range-declaration: attribute-specifier-seq-opt • decl-specifier-seq declarator\l321                      | attribute-specifier-seq-opt • decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\"\l"]
  1277 -> 1 [style=solid label="\"constexpr\""]
  1277 -> 150 [style=solid label="\"extern\""]
  1277 -> 4 [style=solid label="IDENTIFIER"]
  1277 -> 151 [style=solid label="\"inline\""]
  1277 -> 6 [style=solid label="\"::\""]
  1277 -> 8 [style=solid label="\"typename\""]
  1277 -> 9 [style=solid label="\"virtual\""]
  1277 -> 158 [style=solid label="\"alignas\""]
  1277 -> 162 [style=solid label="\"[\""]
  1277 -> 12 [style=solid label="\"class\""]
  1277 -> 13 [style=solid label="\"struct\""]
  1277 -> 14 [style=solid label="\"union\""]
  1277 -> 15 [style=solid label="\"const\""]
  1277 -> 16 [style=solid label="\"volatile\""]
  1277 -> 17 [style=solid label="\"friend\""]
  1277 -> 18 [style=solid label="\"typedef\""]
  1277 -> 19 [style=solid label="\"consteval\""]
  1277 -> 20 [style=solid label="\"constinit\""]
  1277 -> 21 [style=solid label="\"decltype\""]
  1277 -> 22 [style=solid label="\"enum\""]
  1277 -> 23 [style=solid label="\"explicit\""]
  1277 -> 27 [style=solid label="\"char\""]
  1277 -> 28 [style=solid label="\"char8_t\""]
  1277 -> 29 [style=solid label="\"char16_t\""]
  1277 -> 30 [style=solid label="\"char32_t\""]
  1277 -> 31 [style=solid label="\"wchar_t\""]
  1277 -> 32 [style=solid label="\"bool\""]
  1277 -> 33 [style=solid label="\"short\""]
  1277 -> 34 [style=solid label="\"int\""]
  1277 -> 35 [style=solid label="\"long\""]
  1277 -> 36 [style=solid label="\"signed\""]
  1277 -> 37 [style=solid label="\"unsigned\""]
  1277 -> 38 [style=solid label="\"float\""]
  1277 -> 39 [style=solid label="\"double\""]
  1277 -> 40 [style=solid label="\"void\""]
  1277 -> 42 [style=solid label="\"static\""]
  1277 -> 43 [style=solid label="\"thread_local\""]
  1277 -> 44 [style=solid label="\"mutable\""]
  1277 -> 166 [style=dashed label="alignment-specifier"]
  1277 -> 167 [style=dashed label="attribute-specifier"]
  1277 -> 53 [style=dashed label="class-head"]
  1277 -> 54 [style=dashed label="class-key"]
  1277 -> 55 [style=dashed label="class-name"]
  1277 -> 56 [style=dashed label="class-specifier"]
  1277 -> 57 [style=dashed label="cv-qualifier"]
  1277 -> 58 [style=dashed label="decl-specifier"]
  1277 -> 1293 [style=dashed label="decl-specifier-seq"]
  1277 -> 63 [style=dashed label="decltype-specifier"]
  1277 -> 65 [style=dashed label="defining-type-specifier"]
  1277 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1277 -> 67 [style=dashed label="elaborated-type-specifier"]
  1277 -> 69 [style=dashed label="enum-head"]
  1277 -> 154 [style=dashed label="enum-key"]
  1277 -> 71 [style=dashed label="enum-name"]
  1277 -> 72 [style=dashed label="enum-specifier"]
  1277 -> 155 [style=dashed label="explicit-specifier"]
  1277 -> 79 [style=dashed label="function-specifier"]
  1277 -> 85 [style=dashed label="namespace-alias"]
  1277 -> 88 [style=dashed label="namespace-name"]
  1277 -> 89 [style=dashed label="nested-name-specifier"]
  1277 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1277 -> 94 [style=dashed label="placeholder-type-specifier"]
  1277 -> 96 [style=dashed label="simple-template-id"]
  1277 -> 97 [style=dashed label="simple-type-specifier"]
  1277 -> 99 [style=dashed label="storage-class-specifier"]
  1277 -> 102 [style=dashed label="template-name"]
  1277 -> 104 [style=dashed label="type-constraint"]
  1277 -> 105 [style=dashed label="type-constraint-opt"]
  1277 -> 106 [style=dashed label="type-name"]
  1277 -> 107 [style=dashed label="type-specifier"]
  1277 -> 108 [style=dashed label="typedef-name"]
  1277 -> 109 [style=dashed label="typename-specifier"]
  1277 -> "1277R458d" [label="[IDENTIFIER]", style=solid]
 "1277R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1277 -> "1277R710d" [label="[\"decltype\"]", style=solid]
 "1277R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1277 -> "1277R710" [label="[]", style=solid]
 "1277R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1278 [label="State 1278\n\l370 iteration-statement: \"for\" \"(\" init-statement-opt for-range-declaration • \":\" for-range-initializer \")\" statement\l"]
  1278 -> 1294 [style=solid label="\":\""]
  1279 [label="State 1279\n\l377 labeled-statement: attribute-specifier-seq-opt \"case\" constant-expression \":\" statement •\l"]
  1279 -> "1279R377" [style=solid]
 "1279R377" [label="R377", fillcolor=3, shape=diamond, style=filled]
  1280 [label="State 1280\n\l628 selection-statement: \"if\" CONSTEXPR-opt \"(\" init-statement-opt • condition \")\" statement\l629                    | \"if\" CONSTEXPR-opt \"(\" init-statement-opt • condition \")\" statement \"else\" statement\l"]
  1280 -> 238 [style=solid label="IDENTIFIER"]
  1280 -> 239 [style=solid label="\"noexcept\""]
  1280 -> 240 [style=solid label="\"!\""]
  1280 -> 241 [style=solid label="\"::\""]
  1280 -> 242 [style=solid label="\"this\""]
  1280 -> 8 [style=solid label="\"typename\""]
  1280 -> 243 [style=solid label="\"+\""]
  1280 -> 244 [style=solid label="\"-\""]
  1280 -> 245 [style=solid label="\"(\""]
  1280 -> 246 [style=solid label="\"&\""]
  1280 -> 247 [style=solid label="\"[\""]
  1280 -> 248 [style=solid label="\"co_await\""]
  1280 -> 249 [style=solid label="\"operator\""]
  1280 -> 21 [style=solid label="\"decltype\""]
  1280 -> 250 [style=solid label="\"*\""]
  1280 -> 251 [style=solid label="\"requires\""]
  1280 -> 252 [style=solid label="\"~\""]
  1280 -> 253 [style=solid label="\"++\""]
  1280 -> 254 [style=solid label="\"--\""]
  1280 -> 255 [style=solid label="\"dynamic_cast\""]
  1280 -> 256 [style=solid label="\"static_cast\""]
  1280 -> 257 [style=solid label="\"reinterpret_cast\""]
  1280 -> 258 [style=solid label="\"const_cast\""]
  1280 -> 259 [style=solid label="\"typeid\""]
  1280 -> 260 [style=solid label="\"literal\""]
  1280 -> 27 [style=solid label="\"char\""]
  1280 -> 28 [style=solid label="\"char8_t\""]
  1280 -> 29 [style=solid label="\"char16_t\""]
  1280 -> 30 [style=solid label="\"char32_t\""]
  1280 -> 31 [style=solid label="\"wchar_t\""]
  1280 -> 32 [style=solid label="\"bool\""]
  1280 -> 33 [style=solid label="\"short\""]
  1280 -> 34 [style=solid label="\"int\""]
  1280 -> 35 [style=solid label="\"long\""]
  1280 -> 36 [style=solid label="\"signed\""]
  1280 -> 37 [style=solid label="\"unsigned\""]
  1280 -> 38 [style=solid label="\"float\""]
  1280 -> 39 [style=solid label="\"double\""]
  1280 -> 40 [style=solid label="\"void\""]
  1280 -> 118 [style=solid label="STRING_LITERAL"]
  1280 -> 261 [style=solid label="\"throw\""]
  1280 -> 262 [style=solid label="\"sizeof\""]
  1280 -> 263 [style=solid label="\"alignof\""]
  1280 -> 264 [style=solid label="\"co_yield\""]
  1280 -> 265 [style=dashed label="SCOPE-opt"]
  1280 -> 266 [style=dashed label="additive-expression"]
  1280 -> 267 [style=dashed label="and-expression"]
  1280 -> 268 [style=dashed label="assignment-expression"]
  1280 -> 177 [style=dashed label="attribute-specifier-seq"]
  1280 -> 1238 [style=dashed label="attribute-specifier-seq-opt"]
  1280 -> 269 [style=dashed label="await-expression"]
  1280 -> 270 [style=dashed label="cast-expression"]
  1280 -> 55 [style=dashed label="class-name"]
  1280 -> 271 [style=dashed label="compare-expression"]
  1280 -> 1295 [style=dashed label="condition"]
  1280 -> 272 [style=dashed label="conditional-expression"]
  1280 -> 273 [style=dashed label="conversion-function-id"]
  1280 -> 63 [style=dashed label="decltype-specifier"]
  1280 -> 274 [style=dashed label="delete-expression"]
  1280 -> 71 [style=dashed label="enum-name"]
  1280 -> 275 [style=dashed label="equality-expression"]
  1280 -> 276 [style=dashed label="exclusive-or-expression"]
  1280 -> 1240 [style=dashed label="expression"]
  1280 -> 278 [style=dashed label="fold-expression"]
  1280 -> 279 [style=dashed label="id-expression"]
  1280 -> 280 [style=dashed label="inclusive-or-expression"]
  1280 -> 281 [style=dashed label="lambda-expression"]
  1280 -> 282 [style=dashed label="lambda-introducer"]
  1280 -> 283 [style=dashed label="literal-operator-id"]
  1280 -> 284 [style=dashed label="logical-and-expression"]
  1280 -> 285 [style=dashed label="logical-or-expression"]
  1280 -> 286 [style=dashed label="multiplicative-expression"]
  1280 -> 85 [style=dashed label="namespace-alias"]
  1280 -> 88 [style=dashed label="namespace-name"]
  1280 -> 287 [style=dashed label="nested-name-specifier"]
  1280 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1280 -> 288 [style=dashed label="new-expression"]
  1280 -> 289 [style=dashed label="noexcept-expression"]
  1280 -> 290 [style=dashed label="operator-function-id"]
  1280 -> 94 [style=dashed label="placeholder-type-specifier"]
  1280 -> 291 [style=dashed label="pm-expression"]
  1280 -> 292 [style=dashed label="postfix-expression"]
  1280 -> 293 [style=dashed label="primary-expression"]
  1280 -> 294 [style=dashed label="qualified-id"]
  1280 -> 295 [style=dashed label="relational-expression"]
  1280 -> 296 [style=dashed label="requires-expression"]
  1280 -> 297 [style=dashed label="shift-expression"]
  1280 -> 298 [style=dashed label="simple-template-id"]
  1280 -> 299 [style=dashed label="simple-type-specifier"]
  1280 -> 300 [style=dashed label="string-literal"]
  1280 -> 301 [style=dashed label="template-id"]
  1280 -> 102 [style=dashed label="template-name"]
  1280 -> 302 [style=dashed label="throw-expression"]
  1280 -> 104 [style=dashed label="type-constraint"]
  1280 -> 105 [style=dashed label="type-constraint-opt"]
  1280 -> 106 [style=dashed label="type-name"]
  1280 -> 108 [style=dashed label="typedef-name"]
  1280 -> 303 [style=dashed label="typename-specifier"]
  1280 -> 304 [style=dashed label="unary-expression"]
  1280 -> 305 [style=dashed label="unary-operator"]
  1280 -> 306 [style=dashed label="unqualified-id"]
  1280 -> 307 [style=dashed label="yield-expression"]
  1280 -> "1280R19" [label="[\"delete\", \"new\"]", style=solid]
 "1280R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1280 -> "1280R83d" [label="[IDENTIFIER, \"::\", \"typename\", \"[\", \"decltype\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\"]", style=solid]
 "1280R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1280 -> "1280R83" [style=solid]
 "1280R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1280 -> "1280R458d" [label="[IDENTIFIER]", style=solid]
 "1280R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1280 -> "1280R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1280R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1281 [label="State 1281\n\l630 selection-statement: \"if\" NOT-opt \"consteval\" compound-statement •\l631                    | \"if\" NOT-opt \"consteval\" compound-statement • \"else\" statement\l"]
  1281 -> 1296 [style=solid label="\"else\""]
  1281 -> "1281R630d" [label="[\"else\"]", style=solid]
 "1281R630d" [label="R630", fillcolor=5, shape=diamond, style=filled]
  1281 -> "1281R630" [style=solid]
 "1281R630" [label="R630", fillcolor=3, shape=diamond, style=filled]
  1282 [label="State 1282\n\l632 selection-statement: \"switch\" \"(\" init-statement-opt condition • \")\" statement\l"]
  1282 -> 1297 [style=solid label="\")\""]
  1283 [label="State 1283\n\l261 exception-declaration: \"...\" •\l"]
  1283 -> "1283R261" [style=solid]
 "1283R261" [label="R261", fillcolor=3, shape=diamond, style=filled]
  1284 [label="State 1284\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l259 exception-declaration: attribute-specifier-seq-opt • type-specifier-seq declarator\l260                      | attribute-specifier-seq-opt • type-specifier-seq abstract-declarator-opt\l"]
  1284 -> 4 [style=solid label="IDENTIFIER"]
  1284 -> 6 [style=solid label="\"::\""]
  1284 -> 8 [style=solid label="\"typename\""]
  1284 -> 158 [style=solid label="\"alignas\""]
  1284 -> 162 [style=solid label="\"[\""]
  1284 -> 12 [style=solid label="\"class\""]
  1284 -> 13 [style=solid label="\"struct\""]
  1284 -> 14 [style=solid label="\"union\""]
  1284 -> 15 [style=solid label="\"const\""]
  1284 -> 16 [style=solid label="\"volatile\""]
  1284 -> 21 [style=solid label="\"decltype\""]
  1284 -> 125 [style=solid label="\"enum\""]
  1284 -> 27 [style=solid label="\"char\""]
  1284 -> 28 [style=solid label="\"char8_t\""]
  1284 -> 29 [style=solid label="\"char16_t\""]
  1284 -> 30 [style=solid label="\"char32_t\""]
  1284 -> 31 [style=solid label="\"wchar_t\""]
  1284 -> 32 [style=solid label="\"bool\""]
  1284 -> 33 [style=solid label="\"short\""]
  1284 -> 34 [style=solid label="\"int\""]
  1284 -> 35 [style=solid label="\"long\""]
  1284 -> 36 [style=solid label="\"signed\""]
  1284 -> 37 [style=solid label="\"unsigned\""]
  1284 -> 38 [style=solid label="\"float\""]
  1284 -> 39 [style=solid label="\"double\""]
  1284 -> 40 [style=solid label="\"void\""]
  1284 -> 166 [style=dashed label="alignment-specifier"]
  1284 -> 167 [style=dashed label="attribute-specifier"]
  1284 -> 406 [style=dashed label="class-key"]
  1284 -> 55 [style=dashed label="class-name"]
  1284 -> 57 [style=dashed label="cv-qualifier"]
  1284 -> 63 [style=dashed label="decltype-specifier"]
  1284 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1284 -> 67 [style=dashed label="elaborated-type-specifier"]
  1284 -> 71 [style=dashed label="enum-name"]
  1284 -> 85 [style=dashed label="namespace-alias"]
  1284 -> 88 [style=dashed label="namespace-name"]
  1284 -> 89 [style=dashed label="nested-name-specifier"]
  1284 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1284 -> 94 [style=dashed label="placeholder-type-specifier"]
  1284 -> 96 [style=dashed label="simple-template-id"]
  1284 -> 97 [style=dashed label="simple-type-specifier"]
  1284 -> 102 [style=dashed label="template-name"]
  1284 -> 104 [style=dashed label="type-constraint"]
  1284 -> 105 [style=dashed label="type-constraint-opt"]
  1284 -> 106 [style=dashed label="type-name"]
  1284 -> 414 [style=dashed label="type-specifier"]
  1284 -> 1298 [style=dashed label="type-specifier-seq"]
  1284 -> 108 [style=dashed label="typedef-name"]
  1284 -> 109 [style=dashed label="typename-specifier"]
  1284 -> "1284R458d" [label="[IDENTIFIER]", style=solid]
 "1284R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1284 -> "1284R710d" [label="[\"decltype\"]", style=solid]
 "1284R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1284 -> "1284R710" [label="[]", style=solid]
 "1284R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1285 [label="State 1285\n\l335 handler: \"catch\" \"(\" exception-declaration • \")\" compound-statement\l"]
  1285 -> 1299 [style=solid label="\")\""]
  1286 [label="State 1286\n\l625 return-type-requirement: \"->\" type-constraint •\l"]
  1286 -> "1286R625" [style=solid]
 "1286R625" [label="R625", fillcolor=3, shape=diamond, style=filled]
  1287 [label="State 1287\n\l148 compound-requirement: \"{\" expression \"}\" NOEXCEPT-opt return-type-requirement-opt \";\" •\l"]
  1287 -> "1287R148" [style=solid]
 "1287R148" [label="R148", fillcolor=3, shape=diamond, style=filled]
  1288 [label="State 1288\n\l 82 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier\l495 noptr-new-declarator: noptr-new-declarator \"[\" constant-expression \"]\" attribute-specifier-seq-opt •\l"]
  1288 -> 158 [style=solid label="\"alignas\""]
  1288 -> 162 [style=solid label="\"[\""]
  1288 -> 166 [style=dashed label="alignment-specifier"]
  1288 -> 167 [style=dashed label="attribute-specifier"]
  1288 -> "1288R495d" [label="[\"[\"]", style=solid]
 "1288R495d" [label="R495", fillcolor=5, shape=diamond, style=filled]
  1288 -> "1288R495" [style=solid]
 "1288R495" [label="R495", fillcolor=3, shape=diamond, style=filled]
  1289 [label="State 1289\n\l153 condition: attribute-specifier-seq-opt decl-specifier-seq declarator • brace-or-equal-initializer\l"]
  1289 -> 378 [style=solid label="\"=\""]
  1289 -> 380 [style=solid label="\"{\""]
  1289 -> 1300 [style=dashed label="brace-or-equal-initializer"]
  1289 -> 383 [style=dashed label="braced-init-list"]
  1290 [label="State 1290\n\l367 iteration-statement: \"while\" \"(\" condition \")\" statement •\l"]
  1290 -> "1290R367" [style=solid]
 "1290R367" [label="R367", fillcolor=3, shape=diamond, style=filled]
  1291 [label="State 1291\n\l278 expression: expression • \",\" assignment-expression\l368 iteration-statement: \"do\" statement \"while\" \"(\" expression • \")\" \";\"\l"]
  1291 -> 534 [style=solid label="\",\""]
  1291 -> 1301 [style=solid label="\")\""]
  1292 [label="State 1292\n\l369 iteration-statement: \"for\" \"(\" init-statement condition-opt \";\" • expression-opt \")\" statement\l"]
  1292 -> 238 [style=solid label="IDENTIFIER"]
  1292 -> 239 [style=solid label="\"noexcept\""]
  1292 -> 240 [style=solid label="\"!\""]
  1292 -> 241 [style=solid label="\"::\""]
  1292 -> 242 [style=solid label="\"this\""]
  1292 -> 8 [style=solid label="\"typename\""]
  1292 -> 243 [style=solid label="\"+\""]
  1292 -> 244 [style=solid label="\"-\""]
  1292 -> 245 [style=solid label="\"(\""]
  1292 -> 246 [style=solid label="\"&\""]
  1292 -> 247 [style=solid label="\"[\""]
  1292 -> 248 [style=solid label="\"co_await\""]
  1292 -> 249 [style=solid label="\"operator\""]
  1292 -> 21 [style=solid label="\"decltype\""]
  1292 -> 250 [style=solid label="\"*\""]
  1292 -> 251 [style=solid label="\"requires\""]
  1292 -> 252 [style=solid label="\"~\""]
  1292 -> 253 [style=solid label="\"++\""]
  1292 -> 254 [style=solid label="\"--\""]
  1292 -> 255 [style=solid label="\"dynamic_cast\""]
  1292 -> 256 [style=solid label="\"static_cast\""]
  1292 -> 257 [style=solid label="\"reinterpret_cast\""]
  1292 -> 258 [style=solid label="\"const_cast\""]
  1292 -> 259 [style=solid label="\"typeid\""]
  1292 -> 260 [style=solid label="\"literal\""]
  1292 -> 27 [style=solid label="\"char\""]
  1292 -> 28 [style=solid label="\"char8_t\""]
  1292 -> 29 [style=solid label="\"char16_t\""]
  1292 -> 30 [style=solid label="\"char32_t\""]
  1292 -> 31 [style=solid label="\"wchar_t\""]
  1292 -> 32 [style=solid label="\"bool\""]
  1292 -> 33 [style=solid label="\"short\""]
  1292 -> 34 [style=solid label="\"int\""]
  1292 -> 35 [style=solid label="\"long\""]
  1292 -> 36 [style=solid label="\"signed\""]
  1292 -> 37 [style=solid label="\"unsigned\""]
  1292 -> 38 [style=solid label="\"float\""]
  1292 -> 39 [style=solid label="\"double\""]
  1292 -> 40 [style=solid label="\"void\""]
  1292 -> 118 [style=solid label="STRING_LITERAL"]
  1292 -> 261 [style=solid label="\"throw\""]
  1292 -> 262 [style=solid label="\"sizeof\""]
  1292 -> 263 [style=solid label="\"alignof\""]
  1292 -> 264 [style=solid label="\"co_yield\""]
  1292 -> 265 [style=dashed label="SCOPE-opt"]
  1292 -> 266 [style=dashed label="additive-expression"]
  1292 -> 267 [style=dashed label="and-expression"]
  1292 -> 268 [style=dashed label="assignment-expression"]
  1292 -> 269 [style=dashed label="await-expression"]
  1292 -> 270 [style=dashed label="cast-expression"]
  1292 -> 55 [style=dashed label="class-name"]
  1292 -> 271 [style=dashed label="compare-expression"]
  1292 -> 272 [style=dashed label="conditional-expression"]
  1292 -> 273 [style=dashed label="conversion-function-id"]
  1292 -> 63 [style=dashed label="decltype-specifier"]
  1292 -> 274 [style=dashed label="delete-expression"]
  1292 -> 71 [style=dashed label="enum-name"]
  1292 -> 275 [style=dashed label="equality-expression"]
  1292 -> 276 [style=dashed label="exclusive-or-expression"]
  1292 -> 1110 [style=dashed label="expression"]
  1292 -> 1302 [style=dashed label="expression-opt"]
  1292 -> 278 [style=dashed label="fold-expression"]
  1292 -> 279 [style=dashed label="id-expression"]
  1292 -> 280 [style=dashed label="inclusive-or-expression"]
  1292 -> 281 [style=dashed label="lambda-expression"]
  1292 -> 282 [style=dashed label="lambda-introducer"]
  1292 -> 283 [style=dashed label="literal-operator-id"]
  1292 -> 284 [style=dashed label="logical-and-expression"]
  1292 -> 285 [style=dashed label="logical-or-expression"]
  1292 -> 286 [style=dashed label="multiplicative-expression"]
  1292 -> 85 [style=dashed label="namespace-alias"]
  1292 -> 88 [style=dashed label="namespace-name"]
  1292 -> 287 [style=dashed label="nested-name-specifier"]
  1292 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1292 -> 288 [style=dashed label="new-expression"]
  1292 -> 289 [style=dashed label="noexcept-expression"]
  1292 -> 290 [style=dashed label="operator-function-id"]
  1292 -> 94 [style=dashed label="placeholder-type-specifier"]
  1292 -> 291 [style=dashed label="pm-expression"]
  1292 -> 292 [style=dashed label="postfix-expression"]
  1292 -> 293 [style=dashed label="primary-expression"]
  1292 -> 294 [style=dashed label="qualified-id"]
  1292 -> 295 [style=dashed label="relational-expression"]
  1292 -> 296 [style=dashed label="requires-expression"]
  1292 -> 297 [style=dashed label="shift-expression"]
  1292 -> 298 [style=dashed label="simple-template-id"]
  1292 -> 299 [style=dashed label="simple-type-specifier"]
  1292 -> 300 [style=dashed label="string-literal"]
  1292 -> 301 [style=dashed label="template-id"]
  1292 -> 102 [style=dashed label="template-name"]
  1292 -> 302 [style=dashed label="throw-expression"]
  1292 -> 104 [style=dashed label="type-constraint"]
  1292 -> 105 [style=dashed label="type-constraint-opt"]
  1292 -> 106 [style=dashed label="type-name"]
  1292 -> 108 [style=dashed label="typedef-name"]
  1292 -> 303 [style=dashed label="typename-specifier"]
  1292 -> 304 [style=dashed label="unary-expression"]
  1292 -> 305 [style=dashed label="unary-operator"]
  1292 -> 306 [style=dashed label="unqualified-id"]
  1292 -> 307 [style=dashed label="yield-expression"]
  1292 -> "1292R19" [style=solid]
 "1292R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1292 -> "1292R282" [label="[\")\"]", style=solid]
 "1292R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  1292 -> "1292R458d" [label="[IDENTIFIER]", style=solid]
 "1292R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1292 -> "1292R710d" [label="[\"decltype\"]", style=solid]
 "1292R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1292 -> "1292R710" [label="[\"auto\"]", style=solid]
 "1292R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1293 [label="State 1293\n\l320 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq • declarator\l321                      | attribute-specifier-seq-opt decl-specifier-seq • ref-qualifier-opt \"[\" identifier-list \"]\"\l"]
  1293 -> 156 [style=solid label="\"...\""]
  1293 -> 4 [style=solid label="IDENTIFIER"]
  1293 -> 6 [style=solid label="\"::\""]
  1293 -> 159 [style=solid label="\"(\""]
  1293 -> 1303 [style=solid label="\"&\""]
  1293 -> 1304 [style=solid label="\"&&\""]
  1293 -> 21 [style=solid label="\"decltype\""]
  1293 -> 164 [style=solid label="\"*\""]
  1293 -> 165 [style=dashed label="ELLIPSIS-opt"]
  1293 -> 55 [style=dashed label="class-name"]
  1293 -> 1305 [style=dashed label="declarator"]
  1293 -> 171 [style=dashed label="declarator-id"]
  1293 -> 121 [style=dashed label="decltype-specifier"]
  1293 -> 71 [style=dashed label="enum-name"]
  1293 -> 85 [style=dashed label="namespace-alias"]
  1293 -> 88 [style=dashed label="namespace-name"]
  1293 -> 187 [style=dashed label="nested-name-specifier"]
  1293 -> 173 [style=dashed label="noptr-declarator"]
  1293 -> 174 [style=dashed label="ptr-declarator"]
  1293 -> 175 [style=dashed label="ptr-operator"]
  1293 -> 341 [style=dashed label="ref-qualifier"]
  1293 -> 1306 [style=dashed label="ref-qualifier-opt"]
  1293 -> 96 [style=dashed label="simple-template-id"]
  1293 -> 102 [style=dashed label="template-name"]
  1293 -> 106 [style=dashed label="type-name"]
  1293 -> 108 [style=dashed label="typedef-name"]
  1293 -> "1293R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "1293R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  1293 -> "1293R5" [style=solid]
 "1293R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1293 -> "1293R604" [label="[\"[\"]", style=solid]
 "1293R604" [label="R604", fillcolor=3, shape=diamond, style=filled]
  1294 [label="State 1294\n\l370 iteration-statement: \"for\" \"(\" init-statement-opt for-range-declaration \":\" • for-range-initializer \")\" statement\l"]
  1294 -> 238 [style=solid label="IDENTIFIER"]
  1294 -> 239 [style=solid label="\"noexcept\""]
  1294 -> 240 [style=solid label="\"!\""]
  1294 -> 241 [style=solid label="\"::\""]
  1294 -> 242 [style=solid label="\"this\""]
  1294 -> 8 [style=solid label="\"typename\""]
  1294 -> 243 [style=solid label="\"+\""]
  1294 -> 244 [style=solid label="\"-\""]
  1294 -> 245 [style=solid label="\"(\""]
  1294 -> 246 [style=solid label="\"&\""]
  1294 -> 247 [style=solid label="\"[\""]
  1294 -> 248 [style=solid label="\"co_await\""]
  1294 -> 380 [style=solid label="\"{\""]
  1294 -> 249 [style=solid label="\"operator\""]
  1294 -> 21 [style=solid label="\"decltype\""]
  1294 -> 250 [style=solid label="\"*\""]
  1294 -> 251 [style=solid label="\"requires\""]
  1294 -> 252 [style=solid label="\"~\""]
  1294 -> 253 [style=solid label="\"++\""]
  1294 -> 254 [style=solid label="\"--\""]
  1294 -> 255 [style=solid label="\"dynamic_cast\""]
  1294 -> 256 [style=solid label="\"static_cast\""]
  1294 -> 257 [style=solid label="\"reinterpret_cast\""]
  1294 -> 258 [style=solid label="\"const_cast\""]
  1294 -> 259 [style=solid label="\"typeid\""]
  1294 -> 260 [style=solid label="\"literal\""]
  1294 -> 27 [style=solid label="\"char\""]
  1294 -> 28 [style=solid label="\"char8_t\""]
  1294 -> 29 [style=solid label="\"char16_t\""]
  1294 -> 30 [style=solid label="\"char32_t\""]
  1294 -> 31 [style=solid label="\"wchar_t\""]
  1294 -> 32 [style=solid label="\"bool\""]
  1294 -> 33 [style=solid label="\"short\""]
  1294 -> 34 [style=solid label="\"int\""]
  1294 -> 35 [style=solid label="\"long\""]
  1294 -> 36 [style=solid label="\"signed\""]
  1294 -> 37 [style=solid label="\"unsigned\""]
  1294 -> 38 [style=solid label="\"float\""]
  1294 -> 39 [style=solid label="\"double\""]
  1294 -> 40 [style=solid label="\"void\""]
  1294 -> 118 [style=solid label="STRING_LITERAL"]
  1294 -> 261 [style=solid label="\"throw\""]
  1294 -> 262 [style=solid label="\"sizeof\""]
  1294 -> 263 [style=solid label="\"alignof\""]
  1294 -> 264 [style=solid label="\"co_yield\""]
  1294 -> 265 [style=dashed label="SCOPE-opt"]
  1294 -> 266 [style=dashed label="additive-expression"]
  1294 -> 267 [style=dashed label="and-expression"]
  1294 -> 268 [style=dashed label="assignment-expression"]
  1294 -> 269 [style=dashed label="await-expression"]
  1294 -> 1179 [style=dashed label="braced-init-list"]
  1294 -> 270 [style=dashed label="cast-expression"]
  1294 -> 55 [style=dashed label="class-name"]
  1294 -> 271 [style=dashed label="compare-expression"]
  1294 -> 272 [style=dashed label="conditional-expression"]
  1294 -> 273 [style=dashed label="conversion-function-id"]
  1294 -> 63 [style=dashed label="decltype-specifier"]
  1294 -> 274 [style=dashed label="delete-expression"]
  1294 -> 71 [style=dashed label="enum-name"]
  1294 -> 275 [style=dashed label="equality-expression"]
  1294 -> 276 [style=dashed label="exclusive-or-expression"]
  1294 -> 1307 [style=dashed label="expr-or-braced-init-list"]
  1294 -> 1182 [style=dashed label="expression"]
  1294 -> 278 [style=dashed label="fold-expression"]
  1294 -> 1308 [style=dashed label="for-range-initializer"]
  1294 -> 279 [style=dashed label="id-expression"]
  1294 -> 280 [style=dashed label="inclusive-or-expression"]
  1294 -> 281 [style=dashed label="lambda-expression"]
  1294 -> 282 [style=dashed label="lambda-introducer"]
  1294 -> 283 [style=dashed label="literal-operator-id"]
  1294 -> 284 [style=dashed label="logical-and-expression"]
  1294 -> 285 [style=dashed label="logical-or-expression"]
  1294 -> 286 [style=dashed label="multiplicative-expression"]
  1294 -> 85 [style=dashed label="namespace-alias"]
  1294 -> 88 [style=dashed label="namespace-name"]
  1294 -> 287 [style=dashed label="nested-name-specifier"]
  1294 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1294 -> 288 [style=dashed label="new-expression"]
  1294 -> 289 [style=dashed label="noexcept-expression"]
  1294 -> 290 [style=dashed label="operator-function-id"]
  1294 -> 94 [style=dashed label="placeholder-type-specifier"]
  1294 -> 291 [style=dashed label="pm-expression"]
  1294 -> 292 [style=dashed label="postfix-expression"]
  1294 -> 293 [style=dashed label="primary-expression"]
  1294 -> 294 [style=dashed label="qualified-id"]
  1294 -> 295 [style=dashed label="relational-expression"]
  1294 -> 296 [style=dashed label="requires-expression"]
  1294 -> 297 [style=dashed label="shift-expression"]
  1294 -> 298 [style=dashed label="simple-template-id"]
  1294 -> 299 [style=dashed label="simple-type-specifier"]
  1294 -> 300 [style=dashed label="string-literal"]
  1294 -> 301 [style=dashed label="template-id"]
  1294 -> 102 [style=dashed label="template-name"]
  1294 -> 302 [style=dashed label="throw-expression"]
  1294 -> 104 [style=dashed label="type-constraint"]
  1294 -> 105 [style=dashed label="type-constraint-opt"]
  1294 -> 106 [style=dashed label="type-name"]
  1294 -> 108 [style=dashed label="typedef-name"]
  1294 -> 303 [style=dashed label="typename-specifier"]
  1294 -> 304 [style=dashed label="unary-expression"]
  1294 -> 305 [style=dashed label="unary-operator"]
  1294 -> 306 [style=dashed label="unqualified-id"]
  1294 -> 307 [style=dashed label="yield-expression"]
  1294 -> "1294R19" [style=solid]
 "1294R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  1294 -> "1294R458d" [label="[IDENTIFIER]", style=solid]
 "1294R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1294 -> "1294R710d" [label="[\"decltype\"]", style=solid]
 "1294R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1294 -> "1294R710" [label="[\"auto\"]", style=solid]
 "1294R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1295 [label="State 1295\n\l628 selection-statement: \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition • \")\" statement\l629                    | \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition • \")\" statement \"else\" statement\l"]
  1295 -> 1309 [style=solid label="\")\""]
  1296 [label="State 1296\n\l631 selection-statement: \"if\" NOT-opt \"consteval\" compound-statement \"else\" • statement\l"]
  1296 -> 1 [style=solid label="\"constexpr\""]
  1296 -> 150 [style=solid label="\"extern\""]
  1296 -> 4 [style=solid label="IDENTIFIER"]
  1296 -> 151 [style=solid label="\"inline\""]
  1296 -> 6 [style=solid label="\"::\""]
  1296 -> 8 [style=solid label="\"typename\""]
  1296 -> 9 [style=solid label="\"virtual\""]
  1296 -> 10 [style=solid label="\"using\""]
  1296 -> 12 [style=solid label="\"class\""]
  1296 -> 13 [style=solid label="\"struct\""]
  1296 -> 14 [style=solid label="\"union\""]
  1296 -> 15 [style=solid label="\"const\""]
  1296 -> 16 [style=solid label="\"volatile\""]
  1296 -> 17 [style=solid label="\"friend\""]
  1296 -> 18 [style=solid label="\"typedef\""]
  1296 -> 19 [style=solid label="\"consteval\""]
  1296 -> 20 [style=solid label="\"constinit\""]
  1296 -> 21 [style=solid label="\"decltype\""]
  1296 -> 22 [style=solid label="\"enum\""]
  1296 -> 23 [style=solid label="\"explicit\""]
  1296 -> 972 [style=solid label="\"namespace\""]
  1296 -> 27 [style=solid label="\"char\""]
  1296 -> 28 [style=solid label="\"char8_t\""]
  1296 -> 29 [style=solid label="\"char16_t\""]
  1296 -> 30 [style=solid label="\"char32_t\""]
  1296 -> 31 [style=solid label="\"wchar_t\""]
  1296 -> 32 [style=solid label="\"bool\""]
  1296 -> 33 [style=solid label="\"short\""]
  1296 -> 34 [style=solid label="\"int\""]
  1296 -> 35 [style=solid label="\"long\""]
  1296 -> 36 [style=solid label="\"signed\""]
  1296 -> 37 [style=solid label="\"unsigned\""]
  1296 -> 38 [style=solid label="\"float\""]
  1296 -> 39 [style=solid label="\"double\""]
  1296 -> 40 [style=solid label="\"void\""]
  1296 -> 41 [style=solid label="\"static_assert\""]
  1296 -> 42 [style=solid label="\"static\""]
  1296 -> 43 [style=solid label="\"thread_local\""]
  1296 -> 44 [style=solid label="\"mutable\""]
  1296 -> 47 [style=dashed label="alias-declaration"]
  1296 -> 48 [style=dashed label="asm-declaration"]
  1296 -> 973 [style=dashed label="attribute-specifier-seq"]
  1296 -> 974 [style=dashed label="attribute-specifier-seq-opt"]
  1296 -> 975 [style=dashed label="block-declaration"]
  1296 -> 53 [style=dashed label="class-head"]
  1296 -> 54 [style=dashed label="class-key"]
  1296 -> 55 [style=dashed label="class-name"]
  1296 -> 56 [style=dashed label="class-specifier"]
  1296 -> 57 [style=dashed label="cv-qualifier"]
  1296 -> 58 [style=dashed label="decl-specifier"]
  1296 -> 59 [style=dashed label="decl-specifier-seq"]
  1296 -> 976 [style=dashed label="declaration-statement"]
  1296 -> 63 [style=dashed label="decltype-specifier"]
  1296 -> 65 [style=dashed label="defining-type-specifier"]
  1296 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1296 -> 67 [style=dashed label="elaborated-type-specifier"]
  1296 -> 69 [style=dashed label="enum-head"]
  1296 -> 70 [style=dashed label="enum-key"]
  1296 -> 71 [style=dashed label="enum-name"]
  1296 -> 72 [style=dashed label="enum-specifier"]
  1296 -> 155 [style=dashed label="explicit-specifier"]
  1296 -> 79 [style=dashed label="function-specifier"]
  1296 -> 977 [style=dashed label="labeled-statement"]
  1296 -> 85 [style=dashed label="namespace-alias"]
  1296 -> 86 [style=dashed label="namespace-alias-definition"]
  1296 -> 88 [style=dashed label="namespace-name"]
  1296 -> 89 [style=dashed label="nested-name-specifier"]
  1296 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1296 -> 93 [style=dashed label="opaque-enum-declaration"]
  1296 -> 94 [style=dashed label="placeholder-type-specifier"]
  1296 -> 95 [style=dashed label="simple-declaration"]
  1296 -> 96 [style=dashed label="simple-template-id"]
  1296 -> 97 [style=dashed label="simple-type-specifier"]
  1296 -> 1310 [style=dashed label="statement"]
  1296 -> 98 [style=dashed label="static_assert-declaration"]
  1296 -> 99 [style=dashed label="storage-class-specifier"]
  1296 -> 102 [style=dashed label="template-name"]
  1296 -> 104 [style=dashed label="type-constraint"]
  1296 -> 105 [style=dashed label="type-constraint-opt"]
  1296 -> 106 [style=dashed label="type-name"]
  1296 -> 107 [style=dashed label="type-specifier"]
  1296 -> 108 [style=dashed label="typedef-name"]
  1296 -> 109 [style=dashed label="typename-specifier"]
  1296 -> 111 [style=dashed label="using-declaration"]
  1296 -> 112 [style=dashed label="using-directive"]
  1296 -> 113 [style=dashed label="using-enum-declaration"]
  1296 -> "1296R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1296R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1296 -> "1296R83" [style=solid]
 "1296R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1296 -> "1296R458d" [label="[IDENTIFIER]", style=solid]
 "1296R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1296 -> "1296R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1296R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1297 [label="State 1297\n\l632 selection-statement: \"switch\" \"(\" init-statement-opt condition \")\" • statement\l"]
  1297 -> 1 [style=solid label="\"constexpr\""]
  1297 -> 150 [style=solid label="\"extern\""]
  1297 -> 4 [style=solid label="IDENTIFIER"]
  1297 -> 151 [style=solid label="\"inline\""]
  1297 -> 6 [style=solid label="\"::\""]
  1297 -> 8 [style=solid label="\"typename\""]
  1297 -> 9 [style=solid label="\"virtual\""]
  1297 -> 10 [style=solid label="\"using\""]
  1297 -> 12 [style=solid label="\"class\""]
  1297 -> 13 [style=solid label="\"struct\""]
  1297 -> 14 [style=solid label="\"union\""]
  1297 -> 15 [style=solid label="\"const\""]
  1297 -> 16 [style=solid label="\"volatile\""]
  1297 -> 17 [style=solid label="\"friend\""]
  1297 -> 18 [style=solid label="\"typedef\""]
  1297 -> 19 [style=solid label="\"consteval\""]
  1297 -> 20 [style=solid label="\"constinit\""]
  1297 -> 21 [style=solid label="\"decltype\""]
  1297 -> 22 [style=solid label="\"enum\""]
  1297 -> 23 [style=solid label="\"explicit\""]
  1297 -> 972 [style=solid label="\"namespace\""]
  1297 -> 27 [style=solid label="\"char\""]
  1297 -> 28 [style=solid label="\"char8_t\""]
  1297 -> 29 [style=solid label="\"char16_t\""]
  1297 -> 30 [style=solid label="\"char32_t\""]
  1297 -> 31 [style=solid label="\"wchar_t\""]
  1297 -> 32 [style=solid label="\"bool\""]
  1297 -> 33 [style=solid label="\"short\""]
  1297 -> 34 [style=solid label="\"int\""]
  1297 -> 35 [style=solid label="\"long\""]
  1297 -> 36 [style=solid label="\"signed\""]
  1297 -> 37 [style=solid label="\"unsigned\""]
  1297 -> 38 [style=solid label="\"float\""]
  1297 -> 39 [style=solid label="\"double\""]
  1297 -> 40 [style=solid label="\"void\""]
  1297 -> 41 [style=solid label="\"static_assert\""]
  1297 -> 42 [style=solid label="\"static\""]
  1297 -> 43 [style=solid label="\"thread_local\""]
  1297 -> 44 [style=solid label="\"mutable\""]
  1297 -> 47 [style=dashed label="alias-declaration"]
  1297 -> 48 [style=dashed label="asm-declaration"]
  1297 -> 973 [style=dashed label="attribute-specifier-seq"]
  1297 -> 974 [style=dashed label="attribute-specifier-seq-opt"]
  1297 -> 975 [style=dashed label="block-declaration"]
  1297 -> 53 [style=dashed label="class-head"]
  1297 -> 54 [style=dashed label="class-key"]
  1297 -> 55 [style=dashed label="class-name"]
  1297 -> 56 [style=dashed label="class-specifier"]
  1297 -> 57 [style=dashed label="cv-qualifier"]
  1297 -> 58 [style=dashed label="decl-specifier"]
  1297 -> 59 [style=dashed label="decl-specifier-seq"]
  1297 -> 976 [style=dashed label="declaration-statement"]
  1297 -> 63 [style=dashed label="decltype-specifier"]
  1297 -> 65 [style=dashed label="defining-type-specifier"]
  1297 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1297 -> 67 [style=dashed label="elaborated-type-specifier"]
  1297 -> 69 [style=dashed label="enum-head"]
  1297 -> 70 [style=dashed label="enum-key"]
  1297 -> 71 [style=dashed label="enum-name"]
  1297 -> 72 [style=dashed label="enum-specifier"]
  1297 -> 155 [style=dashed label="explicit-specifier"]
  1297 -> 79 [style=dashed label="function-specifier"]
  1297 -> 977 [style=dashed label="labeled-statement"]
  1297 -> 85 [style=dashed label="namespace-alias"]
  1297 -> 86 [style=dashed label="namespace-alias-definition"]
  1297 -> 88 [style=dashed label="namespace-name"]
  1297 -> 89 [style=dashed label="nested-name-specifier"]
  1297 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1297 -> 93 [style=dashed label="opaque-enum-declaration"]
  1297 -> 94 [style=dashed label="placeholder-type-specifier"]
  1297 -> 95 [style=dashed label="simple-declaration"]
  1297 -> 96 [style=dashed label="simple-template-id"]
  1297 -> 97 [style=dashed label="simple-type-specifier"]
  1297 -> 1311 [style=dashed label="statement"]
  1297 -> 98 [style=dashed label="static_assert-declaration"]
  1297 -> 99 [style=dashed label="storage-class-specifier"]
  1297 -> 102 [style=dashed label="template-name"]
  1297 -> 104 [style=dashed label="type-constraint"]
  1297 -> 105 [style=dashed label="type-constraint-opt"]
  1297 -> 106 [style=dashed label="type-name"]
  1297 -> 107 [style=dashed label="type-specifier"]
  1297 -> 108 [style=dashed label="typedef-name"]
  1297 -> 109 [style=dashed label="typename-specifier"]
  1297 -> 111 [style=dashed label="using-declaration"]
  1297 -> 112 [style=dashed label="using-directive"]
  1297 -> 113 [style=dashed label="using-enum-declaration"]
  1297 -> "1297R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1297R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1297 -> "1297R83" [style=solid]
 "1297R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1297 -> "1297R458d" [label="[IDENTIFIER]", style=solid]
 "1297R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1297 -> "1297R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1297R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1298 [label="State 1298\n\l259 exception-declaration: attribute-specifier-seq-opt type-specifier-seq • declarator\l260                      | attribute-specifier-seq-opt type-specifier-seq • abstract-declarator-opt\l"]
  1298 -> 916 [style=solid label="\"...\""]
  1298 -> 4 [style=solid label="IDENTIFIER"]
  1298 -> 6 [style=solid label="\"::\""]
  1298 -> 917 [style=solid label="\"(\""]
  1298 -> 160 [style=solid label="\"&\""]
  1298 -> 163 [style=solid label="\"&&\""]
  1298 -> 21 [style=solid label="\"decltype\""]
  1298 -> 164 [style=solid label="\"*\""]
  1298 -> 165 [style=dashed label="ELLIPSIS-opt"]
  1298 -> 684 [style=dashed label="abstract-declarator"]
  1298 -> 1312 [style=dashed label="abstract-declarator-opt"]
  1298 -> 686 [style=dashed label="abstract-pack-declarator"]
  1298 -> 55 [style=dashed label="class-name"]
  1298 -> 1313 [style=dashed label="declarator"]
  1298 -> 171 [style=dashed label="declarator-id"]
  1298 -> 121 [style=dashed label="decltype-specifier"]
  1298 -> 71 [style=dashed label="enum-name"]
  1298 -> 85 [style=dashed label="namespace-alias"]
  1298 -> 88 [style=dashed label="namespace-name"]
  1298 -> 187 [style=dashed label="nested-name-specifier"]
  1298 -> 687 [style=dashed label="noptr-abstract-declarator"]
  1298 -> 688 [style=dashed label="noptr-abstract-declarator-opt"]
  1298 -> 689 [style=dashed label="noptr-abstract-pack-declarator"]
  1298 -> 173 [style=dashed label="noptr-declarator"]
  1298 -> 690 [style=dashed label="ptr-abstract-declarator"]
  1298 -> 174 [style=dashed label="ptr-declarator"]
  1298 -> 920 [style=dashed label="ptr-operator"]
  1298 -> 96 [style=dashed label="simple-template-id"]
  1298 -> 102 [style=dashed label="template-name"]
  1298 -> 106 [style=dashed label="type-name"]
  1298 -> 108 [style=dashed label="typedef-name"]
  1298 -> "1298R5d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "1298R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  1298 -> "1298R5" [style=solid]
 "1298R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  1298 -> "1298R32" [label="[\")\"]", style=solid]
 "1298R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  1298 -> "1298R485d" [label="[\"(\"]", style=solid]
 "1298R485d" [label="R485", fillcolor=5, shape=diamond, style=filled]
  1298 -> "1298R485" [label="[\"[\"]", style=solid]
 "1298R485" [label="R485", fillcolor=3, shape=diamond, style=filled]
  1299 [label="State 1299\n\l335 handler: \"catch\" \"(\" exception-declaration \")\" • compound-statement\l"]
  1299 -> 794 [style=solid label="\"{\""]
  1299 -> 1314 [style=dashed label="compound-statement"]
  1300 [label="State 1300\n\l153 condition: attribute-specifier-seq-opt decl-specifier-seq declarator brace-or-equal-initializer •\l"]
  1300 -> "1300R153" [style=solid]
 "1300R153" [label="R153", fillcolor=3, shape=diamond, style=filled]
  1301 [label="State 1301\n\l368 iteration-statement: \"do\" statement \"while\" \"(\" expression \")\" • \";\"\l"]
  1301 -> 1315 [style=solid label="\";\""]
  1302 [label="State 1302\n\l369 iteration-statement: \"for\" \"(\" init-statement condition-opt \";\" expression-opt • \")\" statement\l"]
  1302 -> 1316 [style=solid label="\")\""]
  1303 [label="State 1303\n\l594 ptr-operator: \"&\" • attribute-specifier-seq-opt\l602 ref-qualifier: \"&\" •\l"]
  1303 -> 177 [style=dashed label="attribute-specifier-seq"]
  1303 -> 331 [style=dashed label="attribute-specifier-seq-opt"]
  1303 -> "1303R83" [style=solid]
 "1303R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1303 -> "1303R602d" [label="[\"[\"]", style=solid]
 "1303R602d" [label="R602", fillcolor=5, shape=diamond, style=filled]
  1304 [label="State 1304\n\l595 ptr-operator: \"&&\" • attribute-specifier-seq-opt\l603 ref-qualifier: \"&&\" •\l"]
  1304 -> 177 [style=dashed label="attribute-specifier-seq"]
  1304 -> 334 [style=dashed label="attribute-specifier-seq-opt"]
  1304 -> "1304R83" [style=solid]
 "1304R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1304 -> "1304R603d" [label="[\"[\"]", style=solid]
 "1304R603d" [label="R603", fillcolor=5, shape=diamond, style=filled]
  1305 [label="State 1305\n\l320 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq declarator •\l"]
  1305 -> "1305R320" [style=solid]
 "1305R320" [label="R320", fillcolor=3, shape=diamond, style=filled]
  1306 [label="State 1306\n\l321 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt • \"[\" identifier-list \"]\"\l"]
  1306 -> 1317 [style=solid label="\"[\""]
  1307 [label="State 1307\n\l322 for-range-initializer: expr-or-braced-init-list •\l"]
  1307 -> "1307R322" [style=solid]
 "1307R322" [label="R322", fillcolor=3, shape=diamond, style=filled]
  1308 [label="State 1308\n\l370 iteration-statement: \"for\" \"(\" init-statement-opt for-range-declaration \":\" for-range-initializer • \")\" statement\l"]
  1308 -> 1318 [style=solid label="\")\""]
  1309 [label="State 1309\n\l628 selection-statement: \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition \")\" • statement\l629                    | \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition \")\" • statement \"else\" statement\l"]
  1309 -> 1 [style=solid label="\"constexpr\""]
  1309 -> 150 [style=solid label="\"extern\""]
  1309 -> 4 [style=solid label="IDENTIFIER"]
  1309 -> 151 [style=solid label="\"inline\""]
  1309 -> 6 [style=solid label="\"::\""]
  1309 -> 8 [style=solid label="\"typename\""]
  1309 -> 9 [style=solid label="\"virtual\""]
  1309 -> 10 [style=solid label="\"using\""]
  1309 -> 12 [style=solid label="\"class\""]
  1309 -> 13 [style=solid label="\"struct\""]
  1309 -> 14 [style=solid label="\"union\""]
  1309 -> 15 [style=solid label="\"const\""]
  1309 -> 16 [style=solid label="\"volatile\""]
  1309 -> 17 [style=solid label="\"friend\""]
  1309 -> 18 [style=solid label="\"typedef\""]
  1309 -> 19 [style=solid label="\"consteval\""]
  1309 -> 20 [style=solid label="\"constinit\""]
  1309 -> 21 [style=solid label="\"decltype\""]
  1309 -> 22 [style=solid label="\"enum\""]
  1309 -> 23 [style=solid label="\"explicit\""]
  1309 -> 972 [style=solid label="\"namespace\""]
  1309 -> 27 [style=solid label="\"char\""]
  1309 -> 28 [style=solid label="\"char8_t\""]
  1309 -> 29 [style=solid label="\"char16_t\""]
  1309 -> 30 [style=solid label="\"char32_t\""]
  1309 -> 31 [style=solid label="\"wchar_t\""]
  1309 -> 32 [style=solid label="\"bool\""]
  1309 -> 33 [style=solid label="\"short\""]
  1309 -> 34 [style=solid label="\"int\""]
  1309 -> 35 [style=solid label="\"long\""]
  1309 -> 36 [style=solid label="\"signed\""]
  1309 -> 37 [style=solid label="\"unsigned\""]
  1309 -> 38 [style=solid label="\"float\""]
  1309 -> 39 [style=solid label="\"double\""]
  1309 -> 40 [style=solid label="\"void\""]
  1309 -> 41 [style=solid label="\"static_assert\""]
  1309 -> 42 [style=solid label="\"static\""]
  1309 -> 43 [style=solid label="\"thread_local\""]
  1309 -> 44 [style=solid label="\"mutable\""]
  1309 -> 47 [style=dashed label="alias-declaration"]
  1309 -> 48 [style=dashed label="asm-declaration"]
  1309 -> 973 [style=dashed label="attribute-specifier-seq"]
  1309 -> 974 [style=dashed label="attribute-specifier-seq-opt"]
  1309 -> 975 [style=dashed label="block-declaration"]
  1309 -> 53 [style=dashed label="class-head"]
  1309 -> 54 [style=dashed label="class-key"]
  1309 -> 55 [style=dashed label="class-name"]
  1309 -> 56 [style=dashed label="class-specifier"]
  1309 -> 57 [style=dashed label="cv-qualifier"]
  1309 -> 58 [style=dashed label="decl-specifier"]
  1309 -> 59 [style=dashed label="decl-specifier-seq"]
  1309 -> 976 [style=dashed label="declaration-statement"]
  1309 -> 63 [style=dashed label="decltype-specifier"]
  1309 -> 65 [style=dashed label="defining-type-specifier"]
  1309 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1309 -> 67 [style=dashed label="elaborated-type-specifier"]
  1309 -> 69 [style=dashed label="enum-head"]
  1309 -> 70 [style=dashed label="enum-key"]
  1309 -> 71 [style=dashed label="enum-name"]
  1309 -> 72 [style=dashed label="enum-specifier"]
  1309 -> 155 [style=dashed label="explicit-specifier"]
  1309 -> 79 [style=dashed label="function-specifier"]
  1309 -> 977 [style=dashed label="labeled-statement"]
  1309 -> 85 [style=dashed label="namespace-alias"]
  1309 -> 86 [style=dashed label="namespace-alias-definition"]
  1309 -> 88 [style=dashed label="namespace-name"]
  1309 -> 89 [style=dashed label="nested-name-specifier"]
  1309 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1309 -> 93 [style=dashed label="opaque-enum-declaration"]
  1309 -> 94 [style=dashed label="placeholder-type-specifier"]
  1309 -> 95 [style=dashed label="simple-declaration"]
  1309 -> 96 [style=dashed label="simple-template-id"]
  1309 -> 97 [style=dashed label="simple-type-specifier"]
  1309 -> 1319 [style=dashed label="statement"]
  1309 -> 98 [style=dashed label="static_assert-declaration"]
  1309 -> 99 [style=dashed label="storage-class-specifier"]
  1309 -> 102 [style=dashed label="template-name"]
  1309 -> 104 [style=dashed label="type-constraint"]
  1309 -> 105 [style=dashed label="type-constraint-opt"]
  1309 -> 106 [style=dashed label="type-name"]
  1309 -> 107 [style=dashed label="type-specifier"]
  1309 -> 108 [style=dashed label="typedef-name"]
  1309 -> 109 [style=dashed label="typename-specifier"]
  1309 -> 111 [style=dashed label="using-declaration"]
  1309 -> 112 [style=dashed label="using-directive"]
  1309 -> 113 [style=dashed label="using-enum-declaration"]
  1309 -> "1309R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1309R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1309 -> "1309R83" [style=solid]
 "1309R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1309 -> "1309R458d" [label="[IDENTIFIER]", style=solid]
 "1309R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1309 -> "1309R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1309R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1310 [label="State 1310\n\l631 selection-statement: \"if\" NOT-opt \"consteval\" compound-statement \"else\" statement •\l"]
  1310 -> "1310R631" [style=solid]
 "1310R631" [label="R631", fillcolor=3, shape=diamond, style=filled]
  1311 [label="State 1311\n\l632 selection-statement: \"switch\" \"(\" init-statement-opt condition \")\" statement •\l"]
  1311 -> "1311R632" [style=solid]
 "1311R632" [label="R632", fillcolor=3, shape=diamond, style=filled]
  1312 [label="State 1312\n\l260 exception-declaration: attribute-specifier-seq-opt type-specifier-seq abstract-declarator-opt •\l"]
  1312 -> "1312R260" [style=solid]
 "1312R260" [label="R260", fillcolor=3, shape=diamond, style=filled]
  1313 [label="State 1313\n\l259 exception-declaration: attribute-specifier-seq-opt type-specifier-seq declarator •\l"]
  1313 -> "1313R259" [style=solid]
 "1313R259" [label="R259", fillcolor=3, shape=diamond, style=filled]
  1314 [label="State 1314\n\l335 handler: \"catch\" \"(\" exception-declaration \")\" compound-statement •\l"]
  1314 -> "1314R335" [style=solid]
 "1314R335" [label="R335", fillcolor=3, shape=diamond, style=filled]
  1315 [label="State 1315\n\l368 iteration-statement: \"do\" statement \"while\" \"(\" expression \")\" \";\" •\l"]
  1315 -> "1315R368" [style=solid]
 "1315R368" [label="R368", fillcolor=3, shape=diamond, style=filled]
  1316 [label="State 1316\n\l369 iteration-statement: \"for\" \"(\" init-statement condition-opt \";\" expression-opt \")\" • statement\l"]
  1316 -> 1 [style=solid label="\"constexpr\""]
  1316 -> 150 [style=solid label="\"extern\""]
  1316 -> 4 [style=solid label="IDENTIFIER"]
  1316 -> 151 [style=solid label="\"inline\""]
  1316 -> 6 [style=solid label="\"::\""]
  1316 -> 8 [style=solid label="\"typename\""]
  1316 -> 9 [style=solid label="\"virtual\""]
  1316 -> 10 [style=solid label="\"using\""]
  1316 -> 12 [style=solid label="\"class\""]
  1316 -> 13 [style=solid label="\"struct\""]
  1316 -> 14 [style=solid label="\"union\""]
  1316 -> 15 [style=solid label="\"const\""]
  1316 -> 16 [style=solid label="\"volatile\""]
  1316 -> 17 [style=solid label="\"friend\""]
  1316 -> 18 [style=solid label="\"typedef\""]
  1316 -> 19 [style=solid label="\"consteval\""]
  1316 -> 20 [style=solid label="\"constinit\""]
  1316 -> 21 [style=solid label="\"decltype\""]
  1316 -> 22 [style=solid label="\"enum\""]
  1316 -> 23 [style=solid label="\"explicit\""]
  1316 -> 972 [style=solid label="\"namespace\""]
  1316 -> 27 [style=solid label="\"char\""]
  1316 -> 28 [style=solid label="\"char8_t\""]
  1316 -> 29 [style=solid label="\"char16_t\""]
  1316 -> 30 [style=solid label="\"char32_t\""]
  1316 -> 31 [style=solid label="\"wchar_t\""]
  1316 -> 32 [style=solid label="\"bool\""]
  1316 -> 33 [style=solid label="\"short\""]
  1316 -> 34 [style=solid label="\"int\""]
  1316 -> 35 [style=solid label="\"long\""]
  1316 -> 36 [style=solid label="\"signed\""]
  1316 -> 37 [style=solid label="\"unsigned\""]
  1316 -> 38 [style=solid label="\"float\""]
  1316 -> 39 [style=solid label="\"double\""]
  1316 -> 40 [style=solid label="\"void\""]
  1316 -> 41 [style=solid label="\"static_assert\""]
  1316 -> 42 [style=solid label="\"static\""]
  1316 -> 43 [style=solid label="\"thread_local\""]
  1316 -> 44 [style=solid label="\"mutable\""]
  1316 -> 47 [style=dashed label="alias-declaration"]
  1316 -> 48 [style=dashed label="asm-declaration"]
  1316 -> 973 [style=dashed label="attribute-specifier-seq"]
  1316 -> 974 [style=dashed label="attribute-specifier-seq-opt"]
  1316 -> 975 [style=dashed label="block-declaration"]
  1316 -> 53 [style=dashed label="class-head"]
  1316 -> 54 [style=dashed label="class-key"]
  1316 -> 55 [style=dashed label="class-name"]
  1316 -> 56 [style=dashed label="class-specifier"]
  1316 -> 57 [style=dashed label="cv-qualifier"]
  1316 -> 58 [style=dashed label="decl-specifier"]
  1316 -> 59 [style=dashed label="decl-specifier-seq"]
  1316 -> 976 [style=dashed label="declaration-statement"]
  1316 -> 63 [style=dashed label="decltype-specifier"]
  1316 -> 65 [style=dashed label="defining-type-specifier"]
  1316 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1316 -> 67 [style=dashed label="elaborated-type-specifier"]
  1316 -> 69 [style=dashed label="enum-head"]
  1316 -> 70 [style=dashed label="enum-key"]
  1316 -> 71 [style=dashed label="enum-name"]
  1316 -> 72 [style=dashed label="enum-specifier"]
  1316 -> 155 [style=dashed label="explicit-specifier"]
  1316 -> 79 [style=dashed label="function-specifier"]
  1316 -> 977 [style=dashed label="labeled-statement"]
  1316 -> 85 [style=dashed label="namespace-alias"]
  1316 -> 86 [style=dashed label="namespace-alias-definition"]
  1316 -> 88 [style=dashed label="namespace-name"]
  1316 -> 89 [style=dashed label="nested-name-specifier"]
  1316 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1316 -> 93 [style=dashed label="opaque-enum-declaration"]
  1316 -> 94 [style=dashed label="placeholder-type-specifier"]
  1316 -> 95 [style=dashed label="simple-declaration"]
  1316 -> 96 [style=dashed label="simple-template-id"]
  1316 -> 97 [style=dashed label="simple-type-specifier"]
  1316 -> 1320 [style=dashed label="statement"]
  1316 -> 98 [style=dashed label="static_assert-declaration"]
  1316 -> 99 [style=dashed label="storage-class-specifier"]
  1316 -> 102 [style=dashed label="template-name"]
  1316 -> 104 [style=dashed label="type-constraint"]
  1316 -> 105 [style=dashed label="type-constraint-opt"]
  1316 -> 106 [style=dashed label="type-name"]
  1316 -> 107 [style=dashed label="type-specifier"]
  1316 -> 108 [style=dashed label="typedef-name"]
  1316 -> 109 [style=dashed label="typename-specifier"]
  1316 -> 111 [style=dashed label="using-declaration"]
  1316 -> 112 [style=dashed label="using-directive"]
  1316 -> 113 [style=dashed label="using-enum-declaration"]
  1316 -> "1316R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1316R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1316 -> "1316R83" [style=solid]
 "1316R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1316 -> "1316R458d" [label="[IDENTIFIER]", style=solid]
 "1316R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1316 -> "1316R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1316R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1317 [label="State 1317\n\l321 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" • identifier-list \"]\"\l"]
  1317 -> 846 [style=solid label="IDENTIFIER"]
  1317 -> 1321 [style=dashed label="identifier-list"]
  1318 [label="State 1318\n\l370 iteration-statement: \"for\" \"(\" init-statement-opt for-range-declaration \":\" for-range-initializer \")\" • statement\l"]
  1318 -> 1 [style=solid label="\"constexpr\""]
  1318 -> 150 [style=solid label="\"extern\""]
  1318 -> 4 [style=solid label="IDENTIFIER"]
  1318 -> 151 [style=solid label="\"inline\""]
  1318 -> 6 [style=solid label="\"::\""]
  1318 -> 8 [style=solid label="\"typename\""]
  1318 -> 9 [style=solid label="\"virtual\""]
  1318 -> 10 [style=solid label="\"using\""]
  1318 -> 12 [style=solid label="\"class\""]
  1318 -> 13 [style=solid label="\"struct\""]
  1318 -> 14 [style=solid label="\"union\""]
  1318 -> 15 [style=solid label="\"const\""]
  1318 -> 16 [style=solid label="\"volatile\""]
  1318 -> 17 [style=solid label="\"friend\""]
  1318 -> 18 [style=solid label="\"typedef\""]
  1318 -> 19 [style=solid label="\"consteval\""]
  1318 -> 20 [style=solid label="\"constinit\""]
  1318 -> 21 [style=solid label="\"decltype\""]
  1318 -> 22 [style=solid label="\"enum\""]
  1318 -> 23 [style=solid label="\"explicit\""]
  1318 -> 972 [style=solid label="\"namespace\""]
  1318 -> 27 [style=solid label="\"char\""]
  1318 -> 28 [style=solid label="\"char8_t\""]
  1318 -> 29 [style=solid label="\"char16_t\""]
  1318 -> 30 [style=solid label="\"char32_t\""]
  1318 -> 31 [style=solid label="\"wchar_t\""]
  1318 -> 32 [style=solid label="\"bool\""]
  1318 -> 33 [style=solid label="\"short\""]
  1318 -> 34 [style=solid label="\"int\""]
  1318 -> 35 [style=solid label="\"long\""]
  1318 -> 36 [style=solid label="\"signed\""]
  1318 -> 37 [style=solid label="\"unsigned\""]
  1318 -> 38 [style=solid label="\"float\""]
  1318 -> 39 [style=solid label="\"double\""]
  1318 -> 40 [style=solid label="\"void\""]
  1318 -> 41 [style=solid label="\"static_assert\""]
  1318 -> 42 [style=solid label="\"static\""]
  1318 -> 43 [style=solid label="\"thread_local\""]
  1318 -> 44 [style=solid label="\"mutable\""]
  1318 -> 47 [style=dashed label="alias-declaration"]
  1318 -> 48 [style=dashed label="asm-declaration"]
  1318 -> 973 [style=dashed label="attribute-specifier-seq"]
  1318 -> 974 [style=dashed label="attribute-specifier-seq-opt"]
  1318 -> 975 [style=dashed label="block-declaration"]
  1318 -> 53 [style=dashed label="class-head"]
  1318 -> 54 [style=dashed label="class-key"]
  1318 -> 55 [style=dashed label="class-name"]
  1318 -> 56 [style=dashed label="class-specifier"]
  1318 -> 57 [style=dashed label="cv-qualifier"]
  1318 -> 58 [style=dashed label="decl-specifier"]
  1318 -> 59 [style=dashed label="decl-specifier-seq"]
  1318 -> 976 [style=dashed label="declaration-statement"]
  1318 -> 63 [style=dashed label="decltype-specifier"]
  1318 -> 65 [style=dashed label="defining-type-specifier"]
  1318 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1318 -> 67 [style=dashed label="elaborated-type-specifier"]
  1318 -> 69 [style=dashed label="enum-head"]
  1318 -> 70 [style=dashed label="enum-key"]
  1318 -> 71 [style=dashed label="enum-name"]
  1318 -> 72 [style=dashed label="enum-specifier"]
  1318 -> 155 [style=dashed label="explicit-specifier"]
  1318 -> 79 [style=dashed label="function-specifier"]
  1318 -> 977 [style=dashed label="labeled-statement"]
  1318 -> 85 [style=dashed label="namespace-alias"]
  1318 -> 86 [style=dashed label="namespace-alias-definition"]
  1318 -> 88 [style=dashed label="namespace-name"]
  1318 -> 89 [style=dashed label="nested-name-specifier"]
  1318 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1318 -> 93 [style=dashed label="opaque-enum-declaration"]
  1318 -> 94 [style=dashed label="placeholder-type-specifier"]
  1318 -> 95 [style=dashed label="simple-declaration"]
  1318 -> 96 [style=dashed label="simple-template-id"]
  1318 -> 97 [style=dashed label="simple-type-specifier"]
  1318 -> 1322 [style=dashed label="statement"]
  1318 -> 98 [style=dashed label="static_assert-declaration"]
  1318 -> 99 [style=dashed label="storage-class-specifier"]
  1318 -> 102 [style=dashed label="template-name"]
  1318 -> 104 [style=dashed label="type-constraint"]
  1318 -> 105 [style=dashed label="type-constraint-opt"]
  1318 -> 106 [style=dashed label="type-name"]
  1318 -> 107 [style=dashed label="type-specifier"]
  1318 -> 108 [style=dashed label="typedef-name"]
  1318 -> 109 [style=dashed label="typename-specifier"]
  1318 -> 111 [style=dashed label="using-declaration"]
  1318 -> 112 [style=dashed label="using-directive"]
  1318 -> 113 [style=dashed label="using-enum-declaration"]
  1318 -> "1318R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1318R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1318 -> "1318R83" [style=solid]
 "1318R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1318 -> "1318R458d" [label="[IDENTIFIER]", style=solid]
 "1318R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1318 -> "1318R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1318R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1319 [label="State 1319\n\l628 selection-statement: \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition \")\" statement •\l629                    | \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition \")\" statement • \"else\" statement\l"]
  1319 -> 1323 [style=solid label="\"else\""]
  1319 -> "1319R628d" [label="[\"else\"]", style=solid]
 "1319R628d" [label="R628", fillcolor=5, shape=diamond, style=filled]
  1319 -> "1319R628" [style=solid]
 "1319R628" [label="R628", fillcolor=3, shape=diamond, style=filled]
  1320 [label="State 1320\n\l369 iteration-statement: \"for\" \"(\" init-statement condition-opt \";\" expression-opt \")\" statement •\l"]
  1320 -> "1320R369" [style=solid]
 "1320R369" [label="R369", fillcolor=3, shape=diamond, style=filled]
  1321 [label="State 1321\n\l321 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" identifier-list • \"]\"\l343 identifier-list: identifier-list • \",\" IDENTIFIER\l"]
  1321 -> 1006 [style=solid label="\",\""]
  1321 -> 1324 [style=solid label="\"]\""]
  1322 [label="State 1322\n\l370 iteration-statement: \"for\" \"(\" init-statement-opt for-range-declaration \":\" for-range-initializer \")\" statement •\l"]
  1322 -> "1322R370" [style=solid]
 "1322R370" [label="R370", fillcolor=3, shape=diamond, style=filled]
  1323 [label="State 1323\n\l629 selection-statement: \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition \")\" statement \"else\" • statement\l"]
  1323 -> 1 [style=solid label="\"constexpr\""]
  1323 -> 150 [style=solid label="\"extern\""]
  1323 -> 4 [style=solid label="IDENTIFIER"]
  1323 -> 151 [style=solid label="\"inline\""]
  1323 -> 6 [style=solid label="\"::\""]
  1323 -> 8 [style=solid label="\"typename\""]
  1323 -> 9 [style=solid label="\"virtual\""]
  1323 -> 10 [style=solid label="\"using\""]
  1323 -> 12 [style=solid label="\"class\""]
  1323 -> 13 [style=solid label="\"struct\""]
  1323 -> 14 [style=solid label="\"union\""]
  1323 -> 15 [style=solid label="\"const\""]
  1323 -> 16 [style=solid label="\"volatile\""]
  1323 -> 17 [style=solid label="\"friend\""]
  1323 -> 18 [style=solid label="\"typedef\""]
  1323 -> 19 [style=solid label="\"consteval\""]
  1323 -> 20 [style=solid label="\"constinit\""]
  1323 -> 21 [style=solid label="\"decltype\""]
  1323 -> 22 [style=solid label="\"enum\""]
  1323 -> 23 [style=solid label="\"explicit\""]
  1323 -> 972 [style=solid label="\"namespace\""]
  1323 -> 27 [style=solid label="\"char\""]
  1323 -> 28 [style=solid label="\"char8_t\""]
  1323 -> 29 [style=solid label="\"char16_t\""]
  1323 -> 30 [style=solid label="\"char32_t\""]
  1323 -> 31 [style=solid label="\"wchar_t\""]
  1323 -> 32 [style=solid label="\"bool\""]
  1323 -> 33 [style=solid label="\"short\""]
  1323 -> 34 [style=solid label="\"int\""]
  1323 -> 35 [style=solid label="\"long\""]
  1323 -> 36 [style=solid label="\"signed\""]
  1323 -> 37 [style=solid label="\"unsigned\""]
  1323 -> 38 [style=solid label="\"float\""]
  1323 -> 39 [style=solid label="\"double\""]
  1323 -> 40 [style=solid label="\"void\""]
  1323 -> 41 [style=solid label="\"static_assert\""]
  1323 -> 42 [style=solid label="\"static\""]
  1323 -> 43 [style=solid label="\"thread_local\""]
  1323 -> 44 [style=solid label="\"mutable\""]
  1323 -> 47 [style=dashed label="alias-declaration"]
  1323 -> 48 [style=dashed label="asm-declaration"]
  1323 -> 973 [style=dashed label="attribute-specifier-seq"]
  1323 -> 974 [style=dashed label="attribute-specifier-seq-opt"]
  1323 -> 975 [style=dashed label="block-declaration"]
  1323 -> 53 [style=dashed label="class-head"]
  1323 -> 54 [style=dashed label="class-key"]
  1323 -> 55 [style=dashed label="class-name"]
  1323 -> 56 [style=dashed label="class-specifier"]
  1323 -> 57 [style=dashed label="cv-qualifier"]
  1323 -> 58 [style=dashed label="decl-specifier"]
  1323 -> 59 [style=dashed label="decl-specifier-seq"]
  1323 -> 976 [style=dashed label="declaration-statement"]
  1323 -> 63 [style=dashed label="decltype-specifier"]
  1323 -> 65 [style=dashed label="defining-type-specifier"]
  1323 -> 66 [style=dashed label="elaborated-enum-specifier"]
  1323 -> 67 [style=dashed label="elaborated-type-specifier"]
  1323 -> 69 [style=dashed label="enum-head"]
  1323 -> 70 [style=dashed label="enum-key"]
  1323 -> 71 [style=dashed label="enum-name"]
  1323 -> 72 [style=dashed label="enum-specifier"]
  1323 -> 155 [style=dashed label="explicit-specifier"]
  1323 -> 79 [style=dashed label="function-specifier"]
  1323 -> 977 [style=dashed label="labeled-statement"]
  1323 -> 85 [style=dashed label="namespace-alias"]
  1323 -> 86 [style=dashed label="namespace-alias-definition"]
  1323 -> 88 [style=dashed label="namespace-name"]
  1323 -> 89 [style=dashed label="nested-name-specifier"]
  1323 -> 90 [style=dashed label="nested-name-specifier-opt"]
  1323 -> 93 [style=dashed label="opaque-enum-declaration"]
  1323 -> 94 [style=dashed label="placeholder-type-specifier"]
  1323 -> 95 [style=dashed label="simple-declaration"]
  1323 -> 96 [style=dashed label="simple-template-id"]
  1323 -> 97 [style=dashed label="simple-type-specifier"]
  1323 -> 1325 [style=dashed label="statement"]
  1323 -> 98 [style=dashed label="static_assert-declaration"]
  1323 -> 99 [style=dashed label="storage-class-specifier"]
  1323 -> 102 [style=dashed label="template-name"]
  1323 -> 104 [style=dashed label="type-constraint"]
  1323 -> 105 [style=dashed label="type-constraint-opt"]
  1323 -> 106 [style=dashed label="type-name"]
  1323 -> 107 [style=dashed label="type-specifier"]
  1323 -> 108 [style=dashed label="typedef-name"]
  1323 -> 109 [style=dashed label="typename-specifier"]
  1323 -> 111 [style=dashed label="using-declaration"]
  1323 -> 112 [style=dashed label="using-directive"]
  1323 -> 113 [style=dashed label="using-enum-declaration"]
  1323 -> "1323R83d" [label="[\"constexpr\", \"extern\", IDENTIFIER, \"inline\", \"::\", \"typename\", \"virtual\", \"using\", \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"friend\", \"typedef\", \"consteval\", \"constinit\", \"decltype\", \"enum\", \"explicit\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\"]", style=solid]
 "1323R83d" [label="R83", fillcolor=5, shape=diamond, style=filled]
  1323 -> "1323R83" [style=solid]
 "1323R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  1323 -> "1323R458d" [label="[IDENTIFIER]", style=solid]
 "1323R458d" [label="R458", fillcolor=5, shape=diamond, style=filled]
  1323 -> "1323R710d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1323R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1324 [label="State 1324\n\l321 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt \"[\" identifier-list \"]\" •\l"]
  1324 -> "1324R321" [style=solid]
 "1324R321" [label="R321", fillcolor=3, shape=diamond, style=filled]
  1325 [label="State 1325\n\l629 selection-statement: \"if\" CONSTEXPR-opt \"(\" init-statement-opt condition \")\" statement \"else\" statement •\l"]
  1325 -> "1325R629" [style=solid]
 "1325R629" [label="R629", fillcolor=3, shape=diamond, style=filled]
}
