// Generated by GNU Bison 3.8.2.9-6571.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <https://www.gnu.org/software/bison/>.

digraph "cplusplus.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: • translation-unit $end\l"]
  0 -> 1 [style=solid label="IDENTIFIER"]
  0 -> 2 [style=solid label="\"using\""]
  0 -> 3 [style=solid label="';'"]
  0 -> 4 [style=solid label="\"alignas\""]
  0 -> 5 [style=solid label="'('"]
  0 -> 6 [style=solid label="\"...\""]
  0 -> 7 [style=solid label="'&'"]
  0 -> 8 [style=solid label="\"asm\""]
  0 -> 9 [style=solid label="\"::\""]
  0 -> 10 [style=solid label="'['"]
  0 -> 11 [style=solid label="\"virtual\""]
  0 -> 12 [style=solid label="\"class\""]
  0 -> 13 [style=solid label="\"struct\""]
  0 -> 14 [style=solid label="\"union\""]
  0 -> 15 [style=solid label="\"template\""]
  0 -> 16 [style=solid label="\"&&\""]
  0 -> 17 [style=solid label="\"operator\""]
  0 -> 18 [style=solid label="\"const\""]
  0 -> 19 [style=solid label="\"volatile\""]
  0 -> 20 [style=solid label="\"friend\""]
  0 -> 21 [style=solid label="\"typedef\""]
  0 -> 22 [style=solid label="\"constexpr\""]
  0 -> 23 [style=solid label="\"consteval\""]
  0 -> 24 [style=solid label="\"constinit\""]
  0 -> 25 [style=solid label="\"inline\""]
  0 -> 26 [style=solid label="\"decltype\""]
  0 -> 27 [style=solid label="\"enum\""]
  0 -> 28 [style=solid label="\"extern\""]
  0 -> 29 [style=solid label="\"explicit\""]
  0 -> 30 [style=solid label="\"export\""]
  0 -> 31 [style=solid label="\"export-keyword\""]
  0 -> 32 [style=solid label="'*'"]
  0 -> 33 [style=solid label="\"module-keyword\""]
  0 -> 34 [style=solid label="\"import-keyword\""]
  0 -> 35 [style=solid label="\"namespace\""]
  0 -> 36 [style=solid label="'~'"]
  0 -> 37 [style=solid label="\"auto\""]
  0 -> 38 [style=solid label="\"char\""]
  0 -> 39 [style=solid label="\"char8_t\""]
  0 -> 40 [style=solid label="\"char16_t\""]
  0 -> 41 [style=solid label="\"char32_t\""]
  0 -> 42 [style=solid label="\"wchar_t\""]
  0 -> 43 [style=solid label="\"bool\""]
  0 -> 44 [style=solid label="\"short\""]
  0 -> 45 [style=solid label="\"int\""]
  0 -> 46 [style=solid label="\"long\""]
  0 -> 47 [style=solid label="\"signed\""]
  0 -> 48 [style=solid label="\"unsigned\""]
  0 -> 49 [style=solid label="\"float\""]
  0 -> 50 [style=solid label="\"double\""]
  0 -> 51 [style=solid label="\"void\""]
  0 -> 52 [style=solid label="\"static_assert\""]
  0 -> 53 [style=solid label="\"static\""]
  0 -> 54 [style=solid label="\"thread_local\""]
  0 -> 55 [style=solid label="\"mutable\""]
  0 -> 56 [style=solid label="\"typename\""]
  0 -> 57 [style=dashed label="alias-declaration"]
  0 -> 58 [style=dashed label="alignment-specifier"]
  0 -> 59 [style=dashed label="asm-declaration"]
  0 -> 60 [style=dashed label="attribute-declaration"]
  0 -> 61 [style=dashed label="attribute-specifier"]
  0 -> 62 [style=dashed label="attribute-specifier-seq"]
  0 -> 63 [style=dashed label="block-declaration"]
  0 -> 64 [style=dashed label="class-head"]
  0 -> 65 [style=dashed label="class-key"]
  0 -> 66 [style=dashed label="class-name"]
  0 -> 67 [style=dashed label="class-specifier"]
  0 -> 68 [style=dashed label="concept-name"]
  0 -> 69 [style=dashed label="conversion-function-id"]
  0 -> 70 [style=dashed label="cv-qualifier"]
  0 -> 71 [style=dashed label="decl-specifier"]
  0 -> 72 [style=dashed label="decl-specifier-seq"]
  0 -> 73 [style=dashed label="declaration"]
  0 -> 74 [style=dashed label="declaration-seq"]
  0 -> 75 [style=dashed label="declarator"]
  0 -> 76 [style=dashed label="declarator-id"]
  0 -> 77 [style=dashed label="decltype-specifier"]
  0 -> 78 [style=dashed label="deduction-guide"]
  0 -> 79 [style=dashed label="defining-type-specifier"]
  0 -> 80 [style=dashed label="elaborated-enum-specifier"]
  0 -> 81 [style=dashed label="elaborated-type-specifier"]
  0 -> 82 [style=dashed label="empty-declaration"]
  0 -> 83 [style=dashed label="enum-head"]
  0 -> 84 [style=dashed label="enum-key"]
  0 -> 85 [style=dashed label="enum-name"]
  0 -> 86 [style=dashed label="enum-specifier"]
  0 -> 87 [style=dashed label="explicit-instantiation"]
  0 -> 88 [style=dashed label="explicit-specialization"]
  0 -> 89 [style=dashed label="explicit-specifier"]
  0 -> 90 [style=dashed label="export-declaration"]
  0 -> 91 [style=dashed label="function-definition"]
  0 -> 92 [style=dashed label="function-specifier"]
  0 -> 93 [style=dashed label="global-module-fragment"]
  0 -> 94 [style=dashed label="id-expression"]
  0 -> 95 [style=dashed label="linkage-specification"]
  0 -> 96 [style=dashed label="literal-operator-id"]
  0 -> 97 [style=dashed label="module-declaration"]
  0 -> 98 [style=dashed label="module-import-declaration"]
  0 -> 99 [style=dashed label="named-namespace-definition"]
  0 -> 100 [style=dashed label="namespace-alias"]
  0 -> 101 [style=dashed label="namespace-alias-definition"]
  0 -> 102 [style=dashed label="namespace-definition"]
  0 -> 103 [style=dashed label="namespace-name"]
  0 -> 104 [style=dashed label="nested-name-specifier"]
  0 -> 105 [style=dashed label="nested-namespace-definition"]
  0 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  0 -> 107 [style=dashed label="noptr-declarator"]
  0 -> 108 [style=dashed label="opaque-enum-declaration"]
  0 -> 109 [style=dashed label="operator-function-id"]
  0 -> 110 [style=dashed label="placeholder-type-specifier"]
  0 -> 111 [style=dashed label="ptr-declarator"]
  0 -> 112 [style=dashed label="ptr-operator"]
  0 -> 113 [style=dashed label="qualified-id"]
  0 -> 114 [style=dashed label="simple-declaration"]
  0 -> 115 [style=dashed label="simple-template-id"]
  0 -> 116 [style=dashed label="simple-type-specifier"]
  0 -> 117 [style=dashed label="static_assert-declaration"]
  0 -> 118 [style=dashed label="storage-class-specifier"]
  0 -> 119 [style=dashed label="template-declaration"]
  0 -> 120 [style=dashed label="template-head"]
  0 -> 121 [style=dashed label="template-id"]
  0 -> 122 [style=dashed label="template-name"]
  0 -> 123 [style=dashed label="translation-unit"]
  0 -> 124 [style=dashed label="type-constraint"]
  0 -> 125 [style=dashed label="type-name"]
  0 -> 126 [style=dashed label="type-specifier"]
  0 -> 127 [style=dashed label="typedef-name"]
  0 -> 128 [style=dashed label="typename-specifier"]
  0 -> 129 [style=dashed label="unnamed-namespace-definition"]
  0 -> 130 [style=dashed label="unqualified-id"]
  0 -> 131 [style=dashed label="using-declaration"]
  0 -> 132 [style=dashed label="using-directive"]
  0 -> 133 [style=dashed label="using-enum-declaration"]
  1 [label="State 1\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l1154 unqualified-id: IDENTIFIER •\l"]
  1 -> "1R145" [style=solid]
 "1R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  1 -> "1R163d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  1 -> "1R163" [label="['<']", style=solid]
 "1R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  1 -> "1R297d" [label="[IDENTIFIER, '=', ';', \"alignas\", '(', ')', \"...\", '&', ',', \"::\", '[', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", '>', \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "1R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  1 -> "1R651d" [label="[\"::\"]", style=solid]
 "1R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  1 -> "1R657d" [label="[\"::\"]", style=solid]
 "1R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  1 -> "1R1066d" [label="[IDENTIFIER, '=', ';', \"alignas\", '(', ')', \"...\", '&', ',', \"::\", '[', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", '<', '>', \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "1R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  1 -> "1R1124d" [label="[IDENTIFIER, '=', ';', \"alignas\", '(', ')', \"...\", '&', ',', \"::\", '[', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", '>', \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "1R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  1 -> "1R1154d" [label="['=', ';', \"alignas\", '(', ')', \"...\", '&', ',', '[', '{', \"&&\", '<', '>', '*']", style=solid]
 "1R1154d" [label="R1154", fillcolor=5, shape=diamond, style=filled]
  1 -> "1R1154" [label="['+', '-', \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ']', ':', '}', \"final\", \"<=>\", '?', \"||\", \"->\", '.', \"==\", \"!=\", '^', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"requires\", \"++\", \"--\", \"override\"]", style=solid]
 "1R1154" [label="R1154", fillcolor=3, shape=diamond, style=filled]
  2 [label="State 2\n\l 13 alias-declaration: \"using\" • IDENTIFIER '=' defining-type-id ';'\l 14                  | \"using\" • IDENTIFIER attribute-specifier-seq '=' defining-type-id ';'\l1178 using-declaration: \"using\" • using-declarator-list ';'\l1186 using-directive: \"using\" • \"namespace\" namespace-name ';'\l1188                | \"using\" • \"namespace\" nested-name-specifier namespace-name ';'\l1189 using-enum-declaration: \"using\" • elaborated-enum-specifier ';'\l"]
  2 -> 134 [style=solid label="IDENTIFIER"]
  2 -> 9 [style=solid label="\"::\""]
  2 -> 135 [style=solid label="\"decltype\""]
  2 -> 136 [style=solid label="\"enum\""]
  2 -> 137 [style=solid label="\"namespace\""]
  2 -> 138 [style=solid label="\"typename\""]
  2 -> 66 [style=dashed label="class-name"]
  2 -> 139 [style=dashed label="decltype-specifier"]
  2 -> 140 [style=dashed label="elaborated-enum-specifier"]
  2 -> 85 [style=dashed label="enum-name"]
  2 -> 100 [style=dashed label="namespace-alias"]
  2 -> 103 [style=dashed label="namespace-name"]
  2 -> 141 [style=dashed label="nested-name-specifier"]
  2 -> 142 [style=dashed label="simple-template-id"]
  2 -> 143 [style=dashed label="template-name"]
  2 -> 144 [style=dashed label="type-name"]
  2 -> 127 [style=dashed label="typedef-name"]
  2 -> 145 [style=dashed label="using-declarator"]
  2 -> 146 [style=dashed label="using-declarator-list"]
  3 [label="State 3\n\l275 empty-declaration: ';' •\l"]
  3 -> "3R275" [style=solid]
 "3R275" [label="R275", fillcolor=3, shape=diamond, style=filled]
  4 [label="State 4\n\l 15 alignment-specifier: \"alignas\" • '(' type-id ')'\l 16                    | \"alignas\" • '(' type-id \"...\" ')'\l 17                    | \"alignas\" • '(' constant-expression ')'\l 18                    | \"alignas\" • '(' constant-expression \"...\" ')'\l"]
  4 -> 147 [style=solid label="'('"]
  5 [label="State 5\n\l732 noptr-declarator: '(' • ptr-declarator ')'\l"]
  5 -> 148 [style=solid label="IDENTIFIER"]
  5 -> 5 [style=solid label="'('"]
  5 -> 6 [style=solid label="\"...\""]
  5 -> 7 [style=solid label="'&'"]
  5 -> 9 [style=solid label="\"::\""]
  5 -> 16 [style=solid label="\"&&\""]
  5 -> 17 [style=solid label="\"operator\""]
  5 -> 135 [style=solid label="\"decltype\""]
  5 -> 32 [style=solid label="'*'"]
  5 -> 36 [style=solid label="'~'"]
  5 -> 66 [style=dashed label="class-name"]
  5 -> 69 [style=dashed label="conversion-function-id"]
  5 -> 76 [style=dashed label="declarator-id"]
  5 -> 139 [style=dashed label="decltype-specifier"]
  5 -> 85 [style=dashed label="enum-name"]
  5 -> 94 [style=dashed label="id-expression"]
  5 -> 96 [style=dashed label="literal-operator-id"]
  5 -> 100 [style=dashed label="namespace-alias"]
  5 -> 103 [style=dashed label="namespace-name"]
  5 -> 149 [style=dashed label="nested-name-specifier"]
  5 -> 150 [style=dashed label="noptr-declarator"]
  5 -> 109 [style=dashed label="operator-function-id"]
  5 -> 151 [style=dashed label="ptr-declarator"]
  5 -> 112 [style=dashed label="ptr-operator"]
  5 -> 113 [style=dashed label="qualified-id"]
  5 -> 115 [style=dashed label="simple-template-id"]
  5 -> 121 [style=dashed label="template-id"]
  5 -> 143 [style=dashed label="template-name"]
  5 -> 144 [style=dashed label="type-name"]
  5 -> 127 [style=dashed label="typedef-name"]
  5 -> 130 [style=dashed label="unqualified-id"]
  6 [label="State 6\n\l231 declarator-id: \"...\" • id-expression\l"]
  6 -> 148 [style=solid label="IDENTIFIER"]
  6 -> 9 [style=solid label="\"::\""]
  6 -> 17 [style=solid label="\"operator\""]
  6 -> 135 [style=solid label="\"decltype\""]
  6 -> 36 [style=solid label="'~'"]
  6 -> 66 [style=dashed label="class-name"]
  6 -> 69 [style=dashed label="conversion-function-id"]
  6 -> 139 [style=dashed label="decltype-specifier"]
  6 -> 85 [style=dashed label="enum-name"]
  6 -> 152 [style=dashed label="id-expression"]
  6 -> 96 [style=dashed label="literal-operator-id"]
  6 -> 100 [style=dashed label="namespace-alias"]
  6 -> 103 [style=dashed label="namespace-name"]
  6 -> 153 [style=dashed label="nested-name-specifier"]
  6 -> 109 [style=dashed label="operator-function-id"]
  6 -> 113 [style=dashed label="qualified-id"]
  6 -> 115 [style=dashed label="simple-template-id"]
  6 -> 121 [style=dashed label="template-id"]
  6 -> 143 [style=dashed label="template-name"]
  6 -> 144 [style=dashed label="type-name"]
  6 -> 127 [style=dashed label="typedef-name"]
  6 -> 130 [style=dashed label="unqualified-id"]
  7 [label="State 7\n\l901 ptr-operator: '&' •\l902             | '&' • attribute-specifier-seq\l"]
  7 -> 4 [style=solid label="\"alignas\""]
  7 -> 10 [style=solid label="'['"]
  7 -> 58 [style=dashed label="alignment-specifier"]
  7 -> 61 [style=dashed label="attribute-specifier"]
  7 -> 154 [style=dashed label="attribute-specifier-seq"]
  7 -> "7R901d" [label="[\"alignas\", '[']", style=solid]
 "7R901d" [label="R901", fillcolor=5, shape=diamond, style=filled]
  7 -> "7R901" [style=solid]
 "7R901" [label="R901", fillcolor=3, shape=diamond, style=filled]
  8 [label="State 8\n\l 22 asm-declaration: \"asm\" • '(' string-literal ')' ';'\l"]
  8 -> 155 [style=solid label="'('"]
  9 [label="State 9\n\l659 nested-name-specifier: \"::\" •\l"]
  9 -> "9R659" [style=solid]
 "9R659" [label="R659", fillcolor=3, shape=diamond, style=filled]
  10 [label="State 10\n\l 50 attribute-specifier: '[' • '[' attribute-list ']' ']'\l 51                    | '[' • '[' attribute-using-prefix attribute-list ']' ']'\l"]
  10 -> 156 [style=solid label="'['"]
  11 [label="State 11\n\l410 function-specifier: \"virtual\" •\l"]
  11 -> "11R410" [style=solid]
 "11R410" [label="R410", fillcolor=3, shape=diamond, style=filled]
  12 [label="State 12\n\l142 class-key: \"class\" •\l"]
  12 -> "12R142" [style=solid]
 "12R142" [label="R142", fillcolor=3, shape=diamond, style=filled]
  13 [label="State 13\n\l143 class-key: \"struct\" •\l"]
  13 -> "13R143" [style=solid]
 "13R143" [label="R143", fillcolor=3, shape=diamond, style=filled]
  14 [label="State 14\n\l144 class-key: \"union\" •\l"]
  14 -> "14R144" [style=solid]
 "14R144" [label="R144", fillcolor=3, shape=diamond, style=filled]
  15 [label="State 15\n\l323 explicit-instantiation: \"template\" • declaration\l324 explicit-specialization: \"template\" • '<' '>' declaration\l1059 template-head: \"template\" • '<' template-parameter-list '>'\l1060              | \"template\" • '<' template-parameter-list '>' requires-clause\l"]
  15 -> 1 [style=solid label="IDENTIFIER"]
  15 -> 2 [style=solid label="\"using\""]
  15 -> 3 [style=solid label="';'"]
  15 -> 4 [style=solid label="\"alignas\""]
  15 -> 5 [style=solid label="'('"]
  15 -> 6 [style=solid label="\"...\""]
  15 -> 7 [style=solid label="'&'"]
  15 -> 8 [style=solid label="\"asm\""]
  15 -> 9 [style=solid label="\"::\""]
  15 -> 10 [style=solid label="'['"]
  15 -> 11 [style=solid label="\"virtual\""]
  15 -> 12 [style=solid label="\"class\""]
  15 -> 13 [style=solid label="\"struct\""]
  15 -> 14 [style=solid label="\"union\""]
  15 -> 15 [style=solid label="\"template\""]
  15 -> 16 [style=solid label="\"&&\""]
  15 -> 17 [style=solid label="\"operator\""]
  15 -> 18 [style=solid label="\"const\""]
  15 -> 19 [style=solid label="\"volatile\""]
  15 -> 20 [style=solid label="\"friend\""]
  15 -> 21 [style=solid label="\"typedef\""]
  15 -> 22 [style=solid label="\"constexpr\""]
  15 -> 23 [style=solid label="\"consteval\""]
  15 -> 24 [style=solid label="\"constinit\""]
  15 -> 25 [style=solid label="\"inline\""]
  15 -> 26 [style=solid label="\"decltype\""]
  15 -> 27 [style=solid label="\"enum\""]
  15 -> 28 [style=solid label="\"extern\""]
  15 -> 157 [style=solid label="'<'"]
  15 -> 29 [style=solid label="\"explicit\""]
  15 -> 30 [style=solid label="\"export\""]
  15 -> 158 [style=solid label="\"export-keyword\""]
  15 -> 32 [style=solid label="'*'"]
  15 -> 34 [style=solid label="\"import-keyword\""]
  15 -> 35 [style=solid label="\"namespace\""]
  15 -> 36 [style=solid label="'~'"]
  15 -> 37 [style=solid label="\"auto\""]
  15 -> 38 [style=solid label="\"char\""]
  15 -> 39 [style=solid label="\"char8_t\""]
  15 -> 40 [style=solid label="\"char16_t\""]
  15 -> 41 [style=solid label="\"char32_t\""]
  15 -> 42 [style=solid label="\"wchar_t\""]
  15 -> 43 [style=solid label="\"bool\""]
  15 -> 44 [style=solid label="\"short\""]
  15 -> 45 [style=solid label="\"int\""]
  15 -> 46 [style=solid label="\"long\""]
  15 -> 47 [style=solid label="\"signed\""]
  15 -> 48 [style=solid label="\"unsigned\""]
  15 -> 49 [style=solid label="\"float\""]
  15 -> 50 [style=solid label="\"double\""]
  15 -> 51 [style=solid label="\"void\""]
  15 -> 52 [style=solid label="\"static_assert\""]
  15 -> 53 [style=solid label="\"static\""]
  15 -> 54 [style=solid label="\"thread_local\""]
  15 -> 55 [style=solid label="\"mutable\""]
  15 -> 56 [style=solid label="\"typename\""]
  15 -> 57 [style=dashed label="alias-declaration"]
  15 -> 58 [style=dashed label="alignment-specifier"]
  15 -> 59 [style=dashed label="asm-declaration"]
  15 -> 60 [style=dashed label="attribute-declaration"]
  15 -> 61 [style=dashed label="attribute-specifier"]
  15 -> 62 [style=dashed label="attribute-specifier-seq"]
  15 -> 63 [style=dashed label="block-declaration"]
  15 -> 64 [style=dashed label="class-head"]
  15 -> 65 [style=dashed label="class-key"]
  15 -> 66 [style=dashed label="class-name"]
  15 -> 67 [style=dashed label="class-specifier"]
  15 -> 68 [style=dashed label="concept-name"]
  15 -> 69 [style=dashed label="conversion-function-id"]
  15 -> 70 [style=dashed label="cv-qualifier"]
  15 -> 71 [style=dashed label="decl-specifier"]
  15 -> 72 [style=dashed label="decl-specifier-seq"]
  15 -> 159 [style=dashed label="declaration"]
  15 -> 75 [style=dashed label="declarator"]
  15 -> 76 [style=dashed label="declarator-id"]
  15 -> 77 [style=dashed label="decltype-specifier"]
  15 -> 78 [style=dashed label="deduction-guide"]
  15 -> 79 [style=dashed label="defining-type-specifier"]
  15 -> 80 [style=dashed label="elaborated-enum-specifier"]
  15 -> 81 [style=dashed label="elaborated-type-specifier"]
  15 -> 82 [style=dashed label="empty-declaration"]
  15 -> 83 [style=dashed label="enum-head"]
  15 -> 84 [style=dashed label="enum-key"]
  15 -> 85 [style=dashed label="enum-name"]
  15 -> 86 [style=dashed label="enum-specifier"]
  15 -> 87 [style=dashed label="explicit-instantiation"]
  15 -> 88 [style=dashed label="explicit-specialization"]
  15 -> 89 [style=dashed label="explicit-specifier"]
  15 -> 90 [style=dashed label="export-declaration"]
  15 -> 91 [style=dashed label="function-definition"]
  15 -> 92 [style=dashed label="function-specifier"]
  15 -> 94 [style=dashed label="id-expression"]
  15 -> 95 [style=dashed label="linkage-specification"]
  15 -> 96 [style=dashed label="literal-operator-id"]
  15 -> 98 [style=dashed label="module-import-declaration"]
  15 -> 99 [style=dashed label="named-namespace-definition"]
  15 -> 100 [style=dashed label="namespace-alias"]
  15 -> 101 [style=dashed label="namespace-alias-definition"]
  15 -> 102 [style=dashed label="namespace-definition"]
  15 -> 103 [style=dashed label="namespace-name"]
  15 -> 104 [style=dashed label="nested-name-specifier"]
  15 -> 105 [style=dashed label="nested-namespace-definition"]
  15 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  15 -> 107 [style=dashed label="noptr-declarator"]
  15 -> 108 [style=dashed label="opaque-enum-declaration"]
  15 -> 109 [style=dashed label="operator-function-id"]
  15 -> 110 [style=dashed label="placeholder-type-specifier"]
  15 -> 111 [style=dashed label="ptr-declarator"]
  15 -> 112 [style=dashed label="ptr-operator"]
  15 -> 113 [style=dashed label="qualified-id"]
  15 -> 114 [style=dashed label="simple-declaration"]
  15 -> 115 [style=dashed label="simple-template-id"]
  15 -> 116 [style=dashed label="simple-type-specifier"]
  15 -> 117 [style=dashed label="static_assert-declaration"]
  15 -> 118 [style=dashed label="storage-class-specifier"]
  15 -> 119 [style=dashed label="template-declaration"]
  15 -> 120 [style=dashed label="template-head"]
  15 -> 121 [style=dashed label="template-id"]
  15 -> 122 [style=dashed label="template-name"]
  15 -> 124 [style=dashed label="type-constraint"]
  15 -> 125 [style=dashed label="type-name"]
  15 -> 126 [style=dashed label="type-specifier"]
  15 -> 127 [style=dashed label="typedef-name"]
  15 -> 128 [style=dashed label="typename-specifier"]
  15 -> 129 [style=dashed label="unnamed-namespace-definition"]
  15 -> 130 [style=dashed label="unqualified-id"]
  15 -> 131 [style=dashed label="using-declaration"]
  15 -> 132 [style=dashed label="using-directive"]
  15 -> 133 [style=dashed label="using-enum-declaration"]
  16 [label="State 16\n\l903 ptr-operator: \"&&\" •\l904             | \"&&\" • attribute-specifier-seq\l"]
  16 -> 4 [style=solid label="\"alignas\""]
  16 -> 10 [style=solid label="'['"]
  16 -> 58 [style=dashed label="alignment-specifier"]
  16 -> 61 [style=dashed label="attribute-specifier"]
  16 -> 160 [style=dashed label="attribute-specifier-seq"]
  16 -> "16R903d" [label="[\"alignas\", '[']", style=solid]
 "16R903d" [label="R903", fillcolor=5, shape=diamond, style=filled]
  16 -> "16R903" [style=solid]
 "16R903" [label="R903", fillcolor=3, shape=diamond, style=filled]
  17 [label="State 17\n\l179 conversion-function-id: \"operator\" • conversion-type-id\l565 literal-operator-id: \"operator\" • string-literal IDENTIFIER\l566                    | \"operator\" • user-defined-string-literal\l759 operator-function-id: \"operator\" • overloadable-operator\l760                     | \"operator\" • overloadable-operator '<' '>'\l761                     | \"operator\" • overloadable-operator '<' template-argument-list '>'\l"]
  17 -> 161 [style=solid label="IDENTIFIER"]
  17 -> 162 [style=solid label="'+'"]
  17 -> 163 [style=solid label="'-'"]
  17 -> 164 [style=solid label="'='"]
  17 -> 165 [style=solid label="'('"]
  17 -> 166 [style=solid label="'&'"]
  17 -> 167 [style=solid label="\"*=\""]
  17 -> 168 [style=solid label="\"/=\""]
  17 -> 169 [style=solid label="\"%=\""]
  17 -> 170 [style=solid label="\"+=\""]
  17 -> 171 [style=solid label="\"-=\""]
  17 -> 172 [style=solid label="\">>=\""]
  17 -> 173 [style=solid label="\"<<=\""]
  17 -> 174 [style=solid label="\"&=\""]
  17 -> 175 [style=solid label="\"^=\""]
  17 -> 176 [style=solid label="\"|=\""]
  17 -> 177 [style=solid label="','"]
  17 -> 9 [style=solid label="\"::\""]
  17 -> 178 [style=solid label="'['"]
  17 -> 179 [style=solid label="\"co_await\""]
  17 -> 12 [style=solid label="\"class\""]
  17 -> 13 [style=solid label="\"struct\""]
  17 -> 14 [style=solid label="\"union\""]
  17 -> 180 [style=solid label="\"<=>\""]
  17 -> 181 [style=solid label="\"&&\""]
  17 -> 182 [style=solid label="\"||\""]
  17 -> 18 [style=solid label="\"const\""]
  17 -> 19 [style=solid label="\"volatile\""]
  17 -> 26 [style=solid label="\"decltype\""]
  17 -> 183 [style=solid label="\"->\""]
  17 -> 184 [style=solid label="\"delete\""]
  17 -> 136 [style=solid label="\"enum\""]
  17 -> 185 [style=solid label="\"u8\""]
  17 -> 186 [style=solid label="'u'"]
  17 -> 187 [style=solid label="'U'"]
  17 -> 188 [style=solid label="'L'"]
  17 -> 189 [style=solid label="\"==\""]
  17 -> 190 [style=solid label="\"!=\""]
  17 -> 191 [style=solid label="'^'"]
  17 -> 192 [style=solid label="'<'"]
  17 -> 193 [style=solid label="'>'"]
  17 -> 194 [style=solid label="'*'"]
  17 -> 195 [style=solid label="'/'"]
  17 -> 196 [style=solid label="'%'"]
  17 -> 197 [style=solid label="'|'"]
  17 -> 198 [style=solid label="\"<<\""]
  17 -> 199 [style=solid label="\">>\""]
  17 -> 200 [style=solid label="\"<=\""]
  17 -> 201 [style=solid label="\">=\""]
  17 -> 202 [style=solid label="\"->*\""]
  17 -> 203 [style=solid label="'\"'"]
  17 -> 204 [style=solid label="\"new\""]
  17 -> 205 [style=solid label="'~'"]
  17 -> 206 [style=solid label="'!'"]
  17 -> 207 [style=solid label="\"++\""]
  17 -> 208 [style=solid label="\"--\""]
  17 -> 37 [style=solid label="\"auto\""]
  17 -> 38 [style=solid label="\"char\""]
  17 -> 39 [style=solid label="\"char8_t\""]
  17 -> 40 [style=solid label="\"char16_t\""]
  17 -> 41 [style=solid label="\"char32_t\""]
  17 -> 42 [style=solid label="\"wchar_t\""]
  17 -> 43 [style=solid label="\"bool\""]
  17 -> 44 [style=solid label="\"short\""]
  17 -> 45 [style=solid label="\"int\""]
  17 -> 46 [style=solid label="\"long\""]
  17 -> 47 [style=solid label="\"signed\""]
  17 -> 48 [style=solid label="\"unsigned\""]
  17 -> 49 [style=solid label="\"float\""]
  17 -> 50 [style=solid label="\"double\""]
  17 -> 51 [style=solid label="\"void\""]
  17 -> 209 [style=solid label="'R'"]
  17 -> 56 [style=solid label="\"typename\""]
  17 -> 210 [style=dashed label="class-key"]
  17 -> 66 [style=dashed label="class-name"]
  17 -> 68 [style=dashed label="concept-name"]
  17 -> 211 [style=dashed label="conversion-type-id"]
  17 -> 70 [style=dashed label="cv-qualifier"]
  17 -> 77 [style=dashed label="decltype-specifier"]
  17 -> 80 [style=dashed label="elaborated-enum-specifier"]
  17 -> 81 [style=dashed label="elaborated-type-specifier"]
  17 -> 212 [style=dashed label="encoding-prefix"]
  17 -> 85 [style=dashed label="enum-name"]
  17 -> 100 [style=dashed label="namespace-alias"]
  17 -> 103 [style=dashed label="namespace-name"]
  17 -> 213 [style=dashed label="nested-name-specifier"]
  17 -> 214 [style=dashed label="overloadable-operator"]
  17 -> 110 [style=dashed label="placeholder-type-specifier"]
  17 -> 142 [style=dashed label="simple-template-id"]
  17 -> 116 [style=dashed label="simple-type-specifier"]
  17 -> 215 [style=dashed label="string-literal"]
  17 -> 216 [style=dashed label="template-name"]
  17 -> 124 [style=dashed label="type-constraint"]
  17 -> 125 [style=dashed label="type-name"]
  17 -> 217 [style=dashed label="type-specifier"]
  17 -> 218 [style=dashed label="type-specifier-seq"]
  17 -> 127 [style=dashed label="typedef-name"]
  17 -> 128 [style=dashed label="typename-specifier"]
  17 -> 219 [style=dashed label="user-defined-string-literal"]
  18 [label="State 18\n\l185 cv-qualifier: \"const\" •\l"]
  18 -> "18R185" [style=solid]
 "18R185" [label="R185", fillcolor=3, shape=diamond, style=filled]
  19 [label="State 19\n\l186 cv-qualifier: \"volatile\" •\l"]
  19 -> "19R186" [style=solid]
 "19R186" [label="R186", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l204 decl-specifier: \"friend\" •\l"]
  20 -> "20R204" [style=solid]
 "20R204" [label="R204", fillcolor=3, shape=diamond, style=filled]
  21 [label="State 21\n\l205 decl-specifier: \"typedef\" •\l"]
  21 -> "21R205" [style=solid]
 "21R205" [label="R205", fillcolor=3, shape=diamond, style=filled]
  22 [label="State 22\n\l206 decl-specifier: \"constexpr\" •\l"]
  22 -> "22R206" [style=solid]
 "22R206" [label="R206", fillcolor=3, shape=diamond, style=filled]
  23 [label="State 23\n\l207 decl-specifier: \"consteval\" •\l"]
  23 -> "23R207" [style=solid]
 "23R207" [label="R207", fillcolor=3, shape=diamond, style=filled]
  24 [label="State 24\n\l208 decl-specifier: \"constinit\" •\l"]
  24 -> "24R208" [style=solid]
 "24R208" [label="R208", fillcolor=3, shape=diamond, style=filled]
  25 [label="State 25\n\l209 decl-specifier: \"inline\" •\l647 named-namespace-definition: \"inline\" • \"namespace\" IDENTIFIER '{' namespace-body '}'\l649                           | \"inline\" • \"namespace\" attribute-specifier-seq IDENTIFIER '{' namespace-body '}'\l1150 unnamed-namespace-definition: \"inline\" • \"namespace\" '{' namespace-body '}'\l1152                             | \"inline\" • \"namespace\" attribute-specifier-seq '{' namespace-body '}'\l"]
  25 -> 220 [style=solid label="\"namespace\""]
  25 -> "25R209" [style=solid]
 "25R209" [label="R209", fillcolor=3, shape=diamond, style=filled]
  26 [label="State 26\n\l233 decltype-specifier: \"decltype\" • '(' expression ')'\l855 placeholder-type-specifier: \"decltype\" • '(' \"auto\" ')'\l"]
  26 -> 221 [style=solid label="'('"]
  27 [label="State 27\n\l265 elaborated-enum-specifier: \"enum\" • IDENTIFIER\l266                          | \"enum\" • nested-name-specifier IDENTIFIER\l294 enum-key: \"enum\" •\l295         | \"enum\" • \"class\"\l296         | \"enum\" • \"struct\"\l"]
  27 -> 222 [style=solid label="IDENTIFIER"]
  27 -> 9 [style=solid label="\"::\""]
  27 -> 223 [style=solid label="\"class\""]
  27 -> 224 [style=solid label="\"struct\""]
  27 -> 135 [style=solid label="\"decltype\""]
  27 -> 66 [style=dashed label="class-name"]
  27 -> 139 [style=dashed label="decltype-specifier"]
  27 -> 85 [style=dashed label="enum-name"]
  27 -> 100 [style=dashed label="namespace-alias"]
  27 -> 103 [style=dashed label="namespace-name"]
  27 -> 225 [style=dashed label="nested-name-specifier"]
  27 -> 142 [style=dashed label="simple-template-id"]
  27 -> 143 [style=dashed label="template-name"]
  27 -> 144 [style=dashed label="type-name"]
  27 -> 127 [style=dashed label="typedef-name"]
  27 -> "27R294d" [label="[IDENTIFIER, \"::\", \"decltype\"]", style=solid]
 "27R294d" [label="R294", fillcolor=5, shape=diamond, style=filled]
  27 -> "27R294" [style=solid]
 "27R294" [label="R294", fillcolor=3, shape=diamond, style=filled]
  28 [label="State 28\n\l322 explicit-instantiation: \"extern\" • \"template\" declaration\l555 linkage-specification: \"extern\" • string-literal '{' '}'\l556                      | \"extern\" • string-literal '{' declaration-seq '}'\l557                      | \"extern\" • string-literal declaration\l1042 storage-class-specifier: \"extern\" •\l"]
  28 -> 226 [style=solid label="\"template\""]
  28 -> 185 [style=solid label="\"u8\""]
  28 -> 186 [style=solid label="'u'"]
  28 -> 187 [style=solid label="'U'"]
  28 -> 188 [style=solid label="'L'"]
  28 -> 203 [style=solid label="'\"'"]
  28 -> 209 [style=solid label="'R'"]
  28 -> 212 [style=dashed label="encoding-prefix"]
  28 -> 227 [style=dashed label="string-literal"]
  28 -> "28R1042" [style=solid]
 "28R1042" [label="R1042", fillcolor=3, shape=diamond, style=filled]
  29 [label="State 29\n\l325 explicit-specifier: \"explicit\" • '(' constant-expression ')'\l326                   | \"explicit\" •\l"]
  29 -> 228 [style=solid label="'('"]
  29 -> "29R326d" [label="['(']", style=solid]
 "29R326d" [label="R326", fillcolor=5, shape=diamond, style=filled]
  29 -> "29R326" [style=solid]
 "29R326" [label="R326", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l331 export-declaration: \"export\" • declaration\l332                   | \"export\" • '{' '}'\l333                   | \"export\" • '{' declaration-seq '}'\l"]
  30 -> 1 [style=solid label="IDENTIFIER"]
  30 -> 2 [style=solid label="\"using\""]
  30 -> 3 [style=solid label="';'"]
  30 -> 4 [style=solid label="\"alignas\""]
  30 -> 5 [style=solid label="'('"]
  30 -> 6 [style=solid label="\"...\""]
  30 -> 7 [style=solid label="'&'"]
  30 -> 8 [style=solid label="\"asm\""]
  30 -> 9 [style=solid label="\"::\""]
  30 -> 10 [style=solid label="'['"]
  30 -> 229 [style=solid label="'{'"]
  30 -> 11 [style=solid label="\"virtual\""]
  30 -> 12 [style=solid label="\"class\""]
  30 -> 13 [style=solid label="\"struct\""]
  30 -> 14 [style=solid label="\"union\""]
  30 -> 15 [style=solid label="\"template\""]
  30 -> 16 [style=solid label="\"&&\""]
  30 -> 17 [style=solid label="\"operator\""]
  30 -> 18 [style=solid label="\"const\""]
  30 -> 19 [style=solid label="\"volatile\""]
  30 -> 20 [style=solid label="\"friend\""]
  30 -> 21 [style=solid label="\"typedef\""]
  30 -> 22 [style=solid label="\"constexpr\""]
  30 -> 23 [style=solid label="\"consteval\""]
  30 -> 24 [style=solid label="\"constinit\""]
  30 -> 25 [style=solid label="\"inline\""]
  30 -> 26 [style=solid label="\"decltype\""]
  30 -> 27 [style=solid label="\"enum\""]
  30 -> 28 [style=solid label="\"extern\""]
  30 -> 29 [style=solid label="\"explicit\""]
  30 -> 30 [style=solid label="\"export\""]
  30 -> 158 [style=solid label="\"export-keyword\""]
  30 -> 32 [style=solid label="'*'"]
  30 -> 34 [style=solid label="\"import-keyword\""]
  30 -> 35 [style=solid label="\"namespace\""]
  30 -> 36 [style=solid label="'~'"]
  30 -> 37 [style=solid label="\"auto\""]
  30 -> 38 [style=solid label="\"char\""]
  30 -> 39 [style=solid label="\"char8_t\""]
  30 -> 40 [style=solid label="\"char16_t\""]
  30 -> 41 [style=solid label="\"char32_t\""]
  30 -> 42 [style=solid label="\"wchar_t\""]
  30 -> 43 [style=solid label="\"bool\""]
  30 -> 44 [style=solid label="\"short\""]
  30 -> 45 [style=solid label="\"int\""]
  30 -> 46 [style=solid label="\"long\""]
  30 -> 47 [style=solid label="\"signed\""]
  30 -> 48 [style=solid label="\"unsigned\""]
  30 -> 49 [style=solid label="\"float\""]
  30 -> 50 [style=solid label="\"double\""]
  30 -> 51 [style=solid label="\"void\""]
  30 -> 52 [style=solid label="\"static_assert\""]
  30 -> 53 [style=solid label="\"static\""]
  30 -> 54 [style=solid label="\"thread_local\""]
  30 -> 55 [style=solid label="\"mutable\""]
  30 -> 56 [style=solid label="\"typename\""]
  30 -> 57 [style=dashed label="alias-declaration"]
  30 -> 58 [style=dashed label="alignment-specifier"]
  30 -> 59 [style=dashed label="asm-declaration"]
  30 -> 60 [style=dashed label="attribute-declaration"]
  30 -> 61 [style=dashed label="attribute-specifier"]
  30 -> 62 [style=dashed label="attribute-specifier-seq"]
  30 -> 63 [style=dashed label="block-declaration"]
  30 -> 64 [style=dashed label="class-head"]
  30 -> 65 [style=dashed label="class-key"]
  30 -> 66 [style=dashed label="class-name"]
  30 -> 67 [style=dashed label="class-specifier"]
  30 -> 68 [style=dashed label="concept-name"]
  30 -> 69 [style=dashed label="conversion-function-id"]
  30 -> 70 [style=dashed label="cv-qualifier"]
  30 -> 71 [style=dashed label="decl-specifier"]
  30 -> 72 [style=dashed label="decl-specifier-seq"]
  30 -> 230 [style=dashed label="declaration"]
  30 -> 75 [style=dashed label="declarator"]
  30 -> 76 [style=dashed label="declarator-id"]
  30 -> 77 [style=dashed label="decltype-specifier"]
  30 -> 78 [style=dashed label="deduction-guide"]
  30 -> 79 [style=dashed label="defining-type-specifier"]
  30 -> 80 [style=dashed label="elaborated-enum-specifier"]
  30 -> 81 [style=dashed label="elaborated-type-specifier"]
  30 -> 82 [style=dashed label="empty-declaration"]
  30 -> 83 [style=dashed label="enum-head"]
  30 -> 84 [style=dashed label="enum-key"]
  30 -> 85 [style=dashed label="enum-name"]
  30 -> 86 [style=dashed label="enum-specifier"]
  30 -> 87 [style=dashed label="explicit-instantiation"]
  30 -> 88 [style=dashed label="explicit-specialization"]
  30 -> 89 [style=dashed label="explicit-specifier"]
  30 -> 90 [style=dashed label="export-declaration"]
  30 -> 91 [style=dashed label="function-definition"]
  30 -> 92 [style=dashed label="function-specifier"]
  30 -> 94 [style=dashed label="id-expression"]
  30 -> 95 [style=dashed label="linkage-specification"]
  30 -> 96 [style=dashed label="literal-operator-id"]
  30 -> 98 [style=dashed label="module-import-declaration"]
  30 -> 99 [style=dashed label="named-namespace-definition"]
  30 -> 100 [style=dashed label="namespace-alias"]
  30 -> 101 [style=dashed label="namespace-alias-definition"]
  30 -> 102 [style=dashed label="namespace-definition"]
  30 -> 103 [style=dashed label="namespace-name"]
  30 -> 104 [style=dashed label="nested-name-specifier"]
  30 -> 105 [style=dashed label="nested-namespace-definition"]
  30 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  30 -> 107 [style=dashed label="noptr-declarator"]
  30 -> 108 [style=dashed label="opaque-enum-declaration"]
  30 -> 109 [style=dashed label="operator-function-id"]
  30 -> 110 [style=dashed label="placeholder-type-specifier"]
  30 -> 111 [style=dashed label="ptr-declarator"]
  30 -> 112 [style=dashed label="ptr-operator"]
  30 -> 113 [style=dashed label="qualified-id"]
  30 -> 114 [style=dashed label="simple-declaration"]
  30 -> 115 [style=dashed label="simple-template-id"]
  30 -> 116 [style=dashed label="simple-type-specifier"]
  30 -> 117 [style=dashed label="static_assert-declaration"]
  30 -> 118 [style=dashed label="storage-class-specifier"]
  30 -> 119 [style=dashed label="template-declaration"]
  30 -> 120 [style=dashed label="template-head"]
  30 -> 121 [style=dashed label="template-id"]
  30 -> 122 [style=dashed label="template-name"]
  30 -> 124 [style=dashed label="type-constraint"]
  30 -> 125 [style=dashed label="type-name"]
  30 -> 126 [style=dashed label="type-specifier"]
  30 -> 127 [style=dashed label="typedef-name"]
  30 -> 128 [style=dashed label="typename-specifier"]
  30 -> 129 [style=dashed label="unnamed-namespace-definition"]
  30 -> 130 [style=dashed label="unqualified-id"]
  30 -> 131 [style=dashed label="using-declaration"]
  30 -> 132 [style=dashed label="using-directive"]
  30 -> 133 [style=dashed label="using-enum-declaration"]
  31 [label="State 31\n\l334 export-declaration: \"export-keyword\" • module-import-declaration\l623 module-declaration: \"export-keyword\" • \"module-keyword\" module-name ';'\l625                   | \"export-keyword\" • \"module-keyword\" module-name module-partition ';'\l627                   | \"export-keyword\" • \"module-keyword\" module-name attribute-specifier-seq ';'\l629                   | \"export-keyword\" • \"module-keyword\" module-name module-partition attribute-specifier-seq ';'\l"]
  31 -> 231 [style=solid label="\"module-keyword\""]
  31 -> 34 [style=solid label="\"import-keyword\""]
  31 -> 232 [style=dashed label="module-import-declaration"]
  32 [label="State 32\n\l897 ptr-operator: '*' •\l898             | '*' • attribute-specifier-seq\l899             | '*' • cv-qualifier-seq\l900             | '*' • attribute-specifier-seq cv-qualifier-seq\l"]
  32 -> 4 [style=solid label="\"alignas\""]
  32 -> 10 [style=solid label="'['"]
  32 -> 18 [style=solid label="\"const\""]
  32 -> 19 [style=solid label="\"volatile\""]
  32 -> 58 [style=dashed label="alignment-specifier"]
  32 -> 61 [style=dashed label="attribute-specifier"]
  32 -> 233 [style=dashed label="attribute-specifier-seq"]
  32 -> 234 [style=dashed label="cv-qualifier"]
  32 -> 235 [style=dashed label="cv-qualifier-seq"]
  32 -> "32R897d" [label="[\"alignas\", '[', \"const\", \"volatile\"]", style=solid]
 "32R897d" [label="R897", fillcolor=5, shape=diamond, style=filled]
  32 -> "32R897" [style=solid]
 "32R897" [label="R897", fillcolor=3, shape=diamond, style=filled]
  33 [label="State 33\n\l414 global-module-fragment: \"module-keyword\" • ';'\l415                       | \"module-keyword\" • ';' declaration-seq\l624 module-declaration: \"module-keyword\" • module-name ';'\l626                   | \"module-keyword\" • module-name module-partition ';'\l628                   | \"module-keyword\" • module-name attribute-specifier-seq ';'\l630                   | \"module-keyword\" • module-name module-partition attribute-specifier-seq ';'\l"]
  33 -> 236 [style=solid label="IDENTIFIER"]
  33 -> 237 [style=solid label="';'"]
  33 -> 238 [style=dashed label="module-name"]
  33 -> 239 [style=dashed label="module-name-qualifier"]
  34 [label="State 34\n\l631 module-import-declaration: \"import-keyword\" • module-name ';'\l632                          | \"import-keyword\" • module-name attribute-specifier-seq ';'\l633                          | \"import-keyword\" • module-partition ';'\l634                          | \"import-keyword\" • module-partition attribute-specifier-seq ';'\l635                          | \"import-keyword\" • header-name ';'\l636                          | \"import-keyword\" • header-name attribute-specifier-seq ';'\l"]
  34 -> 236 [style=solid label="IDENTIFIER"]
  34 -> 240 [style=solid label="EXCEPT_NEW_LINE_AND_GREATER_THAN_SIGN"]
  34 -> 241 [style=solid label="':'"]
  34 -> 242 [style=solid label="'<'"]
  34 -> 243 [style=solid label="\"h-char-sequence\""]
  34 -> 244 [style=solid label="'\"'"]
  34 -> 245 [style=solid label="\"h-char-sequence:\""]
  34 -> 246 [style=dashed label="h-char"]
  34 -> 247 [style=dashed label="header-name"]
  34 -> 248 [style=dashed label="module-name"]
  34 -> 239 [style=dashed label="module-name-qualifier"]
  34 -> 249 [style=dashed label="module-partition"]
  35 [label="State 35\n\l648 named-namespace-definition: \"namespace\" • IDENTIFIER '{' namespace-body '}'\l650                           | \"namespace\" • attribute-specifier-seq IDENTIFIER '{' namespace-body '}'\l652 namespace-alias-definition: \"namespace\" • IDENTIFIER '=' qualified-namespace-specifier ';'\l666 nested-namespace-definition: \"namespace\" • enclosing-namespace-specifier \"::\" IDENTIFIER '{' namespace-body '}'\l667                            | \"namespace\" • enclosing-namespace-specifier \"::\" \"inline\" IDENTIFIER '{' namespace-body '}'\l1151 unnamed-namespace-definition: \"namespace\" • '{' namespace-body '}'\l1153                             | \"namespace\" • attribute-specifier-seq '{' namespace-body '}'\l"]
  35 -> 250 [style=solid label="IDENTIFIER"]
  35 -> 4 [style=solid label="\"alignas\""]
  35 -> 10 [style=solid label="'['"]
  35 -> 251 [style=solid label="'{'"]
  35 -> 58 [style=dashed label="alignment-specifier"]
  35 -> 61 [style=dashed label="attribute-specifier"]
  35 -> 252 [style=dashed label="attribute-specifier-seq"]
  35 -> 253 [style=dashed label="enclosing-namespace-specifier"]
  36 [label="State 36\n\l1158 unqualified-id: '~' • type-name\l1159               | '~' • decltype-specifier\l"]
  36 -> 254 [style=solid label="IDENTIFIER"]
  36 -> 135 [style=solid label="\"decltype\""]
  36 -> 66 [style=dashed label="class-name"]
  36 -> 255 [style=dashed label="decltype-specifier"]
  36 -> 85 [style=dashed label="enum-name"]
  36 -> 142 [style=dashed label="simple-template-id"]
  36 -> 143 [style=dashed label="template-name"]
  36 -> 256 [style=dashed label="type-name"]
  36 -> 127 [style=dashed label="typedef-name"]
  37 [label="State 37\n\l853 placeholder-type-specifier: \"auto\" •\l"]
  37 -> "37R853" [style=solid]
 "37R853" [label="R853", fillcolor=3, shape=diamond, style=filled]
  38 [label="State 38\n\l1006 simple-type-specifier: \"char\" •\l"]
  38 -> "38R1006" [style=solid]
 "38R1006" [label="R1006", fillcolor=3, shape=diamond, style=filled]
  39 [label="State 39\n\l1007 simple-type-specifier: \"char8_t\" •\l"]
  39 -> "39R1007" [style=solid]
 "39R1007" [label="R1007", fillcolor=3, shape=diamond, style=filled]
  40 [label="State 40\n\l1008 simple-type-specifier: \"char16_t\" •\l"]
  40 -> "40R1008" [style=solid]
 "40R1008" [label="R1008", fillcolor=3, shape=diamond, style=filled]
  41 [label="State 41\n\l1009 simple-type-specifier: \"char32_t\" •\l"]
  41 -> "41R1009" [style=solid]
 "41R1009" [label="R1009", fillcolor=3, shape=diamond, style=filled]
  42 [label="State 42\n\l1010 simple-type-specifier: \"wchar_t\" •\l"]
  42 -> "42R1010" [style=solid]
 "42R1010" [label="R1010", fillcolor=3, shape=diamond, style=filled]
  43 [label="State 43\n\l1011 simple-type-specifier: \"bool\" •\l"]
  43 -> "43R1011" [style=solid]
 "43R1011" [label="R1011", fillcolor=3, shape=diamond, style=filled]
  44 [label="State 44\n\l1012 simple-type-specifier: \"short\" •\l"]
  44 -> "44R1012" [style=solid]
 "44R1012" [label="R1012", fillcolor=3, shape=diamond, style=filled]
  45 [label="State 45\n\l1013 simple-type-specifier: \"int\" •\l"]
  45 -> "45R1013" [style=solid]
 "45R1013" [label="R1013", fillcolor=3, shape=diamond, style=filled]
  46 [label="State 46\n\l1014 simple-type-specifier: \"long\" •\l"]
  46 -> "46R1014" [style=solid]
 "46R1014" [label="R1014", fillcolor=3, shape=diamond, style=filled]
  47 [label="State 47\n\l1015 simple-type-specifier: \"signed\" •\l"]
  47 -> "47R1015" [style=solid]
 "47R1015" [label="R1015", fillcolor=3, shape=diamond, style=filled]
  48 [label="State 48\n\l1016 simple-type-specifier: \"unsigned\" •\l"]
  48 -> "48R1016" [style=solid]
 "48R1016" [label="R1016", fillcolor=3, shape=diamond, style=filled]
  49 [label="State 49\n\l1017 simple-type-specifier: \"float\" •\l"]
  49 -> "49R1017" [style=solid]
 "49R1017" [label="R1017", fillcolor=3, shape=diamond, style=filled]
  50 [label="State 50\n\l1018 simple-type-specifier: \"double\" •\l"]
  50 -> "50R1018" [style=solid]
 "50R1018" [label="R1018", fillcolor=3, shape=diamond, style=filled]
  51 [label="State 51\n\l1019 simple-type-specifier: \"void\" •\l"]
  51 -> "51R1019" [style=solid]
 "51R1019" [label="R1019", fillcolor=3, shape=diamond, style=filled]
  52 [label="State 52\n\l1038 static_assert-declaration: \"static_assert\" • '(' constant-expression ')' ';'\l1039                          | \"static_assert\" • '(' constant-expression ',' string-literal ')' ';'\l"]
  52 -> 257 [style=solid label="'('"]
  53 [label="State 53\n\l1040 storage-class-specifier: \"static\" •\l"]
  53 -> "53R1040" [style=solid]
 "53R1040" [label="R1040", fillcolor=3, shape=diamond, style=filled]
  54 [label="State 54\n\l1041 storage-class-specifier: \"thread_local\" •\l"]
  54 -> "54R1041" [style=solid]
 "54R1041" [label="R1041", fillcolor=3, shape=diamond, style=filled]
  55 [label="State 55\n\l1043 storage-class-specifier: \"mutable\" •\l"]
  55 -> "55R1043" [style=solid]
 "55R1043" [label="R1043", fillcolor=3, shape=diamond, style=filled]
  56 [label="State 56\n\l1126 typename-specifier: \"typename\" • nested-name-specifier IDENTIFIER\l1127                   | \"typename\" • nested-name-specifier simple-template-id\l1128                   | \"typename\" • nested-name-specifier \"template\" simple-template-id\l"]
  56 -> 258 [style=solid label="IDENTIFIER"]
  56 -> 9 [style=solid label="\"::\""]
  56 -> 135 [style=solid label="\"decltype\""]
  56 -> 66 [style=dashed label="class-name"]
  56 -> 139 [style=dashed label="decltype-specifier"]
  56 -> 85 [style=dashed label="enum-name"]
  56 -> 100 [style=dashed label="namespace-alias"]
  56 -> 103 [style=dashed label="namespace-name"]
  56 -> 259 [style=dashed label="nested-name-specifier"]
  56 -> 142 [style=dashed label="simple-template-id"]
  56 -> 143 [style=dashed label="template-name"]
  56 -> 144 [style=dashed label="type-name"]
  56 -> 127 [style=dashed label="typedef-name"]
  57 [label="State 57\n\l102 block-declaration: alias-declaration •\l"]
  57 -> "57R102" [style=solid]
 "57R102" [label="R102", fillcolor=3, shape=diamond, style=filled]
  58 [label="State 58\n\l 52 attribute-specifier: alignment-specifier •\l"]
  58 -> "58R52" [style=solid]
 "58R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  59 [label="State 59\n\l 96 block-declaration: asm-declaration •\l"]
  59 -> "59R96" [style=solid]
 "59R96" [label="R96", fillcolor=3, shape=diamond, style=filled]
  60 [label="State 60\n\l224 declaration: attribute-declaration •\l"]
  60 -> "60R224" [style=solid]
 "60R224" [label="R224", fillcolor=3, shape=diamond, style=filled]
  61 [label="State 61\n\l 54 attribute-specifier-seq: attribute-specifier •\l"]
  61 -> "61R54" [style=solid]
 "61R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  62 [label="State 62\n\l 21 asm-declaration: attribute-specifier-seq • \"asm\" '(' string-literal ')' ';'\l 42 attribute-declaration: attribute-specifier-seq • ';'\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l398 function-definition: attribute-specifier-seq • declarator function-body\l400                    | attribute-specifier-seq • decl-specifier-seq declarator function-body\l402                    | attribute-specifier-seq • declarator virt-specifier-seq function-body\l404                    | attribute-specifier-seq • decl-specifier-seq declarator virt-specifier-seq function-body\l406                    | attribute-specifier-seq • declarator requires-clause function-body\l408                    | attribute-specifier-seq • decl-specifier-seq declarator requires-clause function-body\l694 nodeclspec-function-declaration: attribute-specifier-seq • declarator ';'\l979 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list ';'\l980                   | attribute-specifier-seq • decl-specifier-seq '[' identifier-list ']' initializer ';'\l982                   | attribute-specifier-seq • decl-specifier-seq ref-qualifier '[' identifier-list ']' initializer ';'\l1185 using-directive: attribute-specifier-seq • \"using\" \"namespace\" namespace-name ';'\l1187                | attribute-specifier-seq • \"using\" \"namespace\" nested-name-specifier namespace-name ';'\l"]
  62 -> 1 [style=solid label="IDENTIFIER"]
  62 -> 260 [style=solid label="\"using\""]
  62 -> 261 [style=solid label="';'"]
  62 -> 4 [style=solid label="\"alignas\""]
  62 -> 5 [style=solid label="'('"]
  62 -> 6 [style=solid label="\"...\""]
  62 -> 7 [style=solid label="'&'"]
  62 -> 262 [style=solid label="\"asm\""]
  62 -> 9 [style=solid label="\"::\""]
  62 -> 10 [style=solid label="'['"]
  62 -> 11 [style=solid label="\"virtual\""]
  62 -> 12 [style=solid label="\"class\""]
  62 -> 13 [style=solid label="\"struct\""]
  62 -> 14 [style=solid label="\"union\""]
  62 -> 16 [style=solid label="\"&&\""]
  62 -> 17 [style=solid label="\"operator\""]
  62 -> 18 [style=solid label="\"const\""]
  62 -> 19 [style=solid label="\"volatile\""]
  62 -> 20 [style=solid label="\"friend\""]
  62 -> 21 [style=solid label="\"typedef\""]
  62 -> 22 [style=solid label="\"constexpr\""]
  62 -> 23 [style=solid label="\"consteval\""]
  62 -> 24 [style=solid label="\"constinit\""]
  62 -> 263 [style=solid label="\"inline\""]
  62 -> 26 [style=solid label="\"decltype\""]
  62 -> 27 [style=solid label="\"enum\""]
  62 -> 264 [style=solid label="\"extern\""]
  62 -> 29 [style=solid label="\"explicit\""]
  62 -> 32 [style=solid label="'*'"]
  62 -> 36 [style=solid label="'~'"]
  62 -> 37 [style=solid label="\"auto\""]
  62 -> 38 [style=solid label="\"char\""]
  62 -> 39 [style=solid label="\"char8_t\""]
  62 -> 40 [style=solid label="\"char16_t\""]
  62 -> 41 [style=solid label="\"char32_t\""]
  62 -> 42 [style=solid label="\"wchar_t\""]
  62 -> 43 [style=solid label="\"bool\""]
  62 -> 44 [style=solid label="\"short\""]
  62 -> 45 [style=solid label="\"int\""]
  62 -> 46 [style=solid label="\"long\""]
  62 -> 47 [style=solid label="\"signed\""]
  62 -> 48 [style=solid label="\"unsigned\""]
  62 -> 49 [style=solid label="\"float\""]
  62 -> 50 [style=solid label="\"double\""]
  62 -> 51 [style=solid label="\"void\""]
  62 -> 53 [style=solid label="\"static\""]
  62 -> 54 [style=solid label="\"thread_local\""]
  62 -> 55 [style=solid label="\"mutable\""]
  62 -> 56 [style=solid label="\"typename\""]
  62 -> 58 [style=dashed label="alignment-specifier"]
  62 -> 265 [style=dashed label="attribute-specifier"]
  62 -> 64 [style=dashed label="class-head"]
  62 -> 65 [style=dashed label="class-key"]
  62 -> 66 [style=dashed label="class-name"]
  62 -> 67 [style=dashed label="class-specifier"]
  62 -> 68 [style=dashed label="concept-name"]
  62 -> 69 [style=dashed label="conversion-function-id"]
  62 -> 70 [style=dashed label="cv-qualifier"]
  62 -> 71 [style=dashed label="decl-specifier"]
  62 -> 266 [style=dashed label="decl-specifier-seq"]
  62 -> 267 [style=dashed label="declarator"]
  62 -> 76 [style=dashed label="declarator-id"]
  62 -> 77 [style=dashed label="decltype-specifier"]
  62 -> 79 [style=dashed label="defining-type-specifier"]
  62 -> 80 [style=dashed label="elaborated-enum-specifier"]
  62 -> 81 [style=dashed label="elaborated-type-specifier"]
  62 -> 83 [style=dashed label="enum-head"]
  62 -> 268 [style=dashed label="enum-key"]
  62 -> 85 [style=dashed label="enum-name"]
  62 -> 86 [style=dashed label="enum-specifier"]
  62 -> 269 [style=dashed label="explicit-specifier"]
  62 -> 92 [style=dashed label="function-specifier"]
  62 -> 94 [style=dashed label="id-expression"]
  62 -> 96 [style=dashed label="literal-operator-id"]
  62 -> 100 [style=dashed label="namespace-alias"]
  62 -> 103 [style=dashed label="namespace-name"]
  62 -> 104 [style=dashed label="nested-name-specifier"]
  62 -> 107 [style=dashed label="noptr-declarator"]
  62 -> 109 [style=dashed label="operator-function-id"]
  62 -> 110 [style=dashed label="placeholder-type-specifier"]
  62 -> 111 [style=dashed label="ptr-declarator"]
  62 -> 112 [style=dashed label="ptr-operator"]
  62 -> 113 [style=dashed label="qualified-id"]
  62 -> 115 [style=dashed label="simple-template-id"]
  62 -> 116 [style=dashed label="simple-type-specifier"]
  62 -> 118 [style=dashed label="storage-class-specifier"]
  62 -> 121 [style=dashed label="template-id"]
  62 -> 216 [style=dashed label="template-name"]
  62 -> 124 [style=dashed label="type-constraint"]
  62 -> 125 [style=dashed label="type-name"]
  62 -> 126 [style=dashed label="type-specifier"]
  62 -> 127 [style=dashed label="typedef-name"]
  62 -> 128 [style=dashed label="typename-specifier"]
  62 -> 130 [style=dashed label="unqualified-id"]
  63 [label="State 63\n\l213 declaration: block-declaration •\l"]
  63 -> "63R213" [style=solid]
 "63R213" [label="R213", fillcolor=3, shape=diamond, style=filled]
  64 [label="State 64\n\l151 class-specifier: class-head • '{' '}'\l152                | class-head • '{' member-specification '}'\l"]
  64 -> 270 [style=solid label="'{'"]
  65 [label="State 65\n\l128 class-head: class-key • class-head-name\l129           | class-key • attribute-specifier-seq class-head-name\l130           | class-key • class-head-name class-virt-specifier\l131           | class-key • attribute-specifier-seq class-head-name class-virt-specifier\l132           | class-key • class-head-name base-clause\l133           | class-key • attribute-specifier-seq class-head-name base-clause\l134           | class-key • class-head-name class-virt-specifier base-clause\l135           | class-key • attribute-specifier-seq class-head-name class-virt-specifier base-clause\l136           | class-key •\l137           | class-key • attribute-specifier-seq\l138           | class-key • base-clause\l139           | class-key • attribute-specifier-seq base-clause\l267 elaborated-type-specifier: class-key • IDENTIFIER\l268                          | class-key • attribute-specifier-seq IDENTIFIER\l269                          | class-key • nested-name-specifier IDENTIFIER\l270                          | class-key • attribute-specifier-seq nested-name-specifier IDENTIFIER\l271                          | class-key • simple-template-id\l272                          | class-key • nested-name-specifier simple-template-id\l273                          | class-key • nested-name-specifier \"template\" simple-template-id\l"]
  65 -> 271 [style=solid label="IDENTIFIER"]
  65 -> 4 [style=solid label="\"alignas\""]
  65 -> 9 [style=solid label="\"::\""]
  65 -> 10 [style=solid label="'['"]
  65 -> 272 [style=solid label="':'"]
  65 -> 135 [style=solid label="\"decltype\""]
  65 -> 58 [style=dashed label="alignment-specifier"]
  65 -> 61 [style=dashed label="attribute-specifier"]
  65 -> 273 [style=dashed label="attribute-specifier-seq"]
  65 -> 274 [style=dashed label="base-clause"]
  65 -> 275 [style=dashed label="class-head-name"]
  65 -> 276 [style=dashed label="class-name"]
  65 -> 139 [style=dashed label="decltype-specifier"]
  65 -> 85 [style=dashed label="enum-name"]
  65 -> 100 [style=dashed label="namespace-alias"]
  65 -> 103 [style=dashed label="namespace-name"]
  65 -> 277 [style=dashed label="nested-name-specifier"]
  65 -> 278 [style=dashed label="simple-template-id"]
  65 -> 143 [style=dashed label="template-name"]
  65 -> 144 [style=dashed label="type-name"]
  65 -> 127 [style=dashed label="typedef-name"]
  65 -> "65R136" [style=solid]
 "65R136" [label="R136", fillcolor=3, shape=diamond, style=filled]
  66 [label="State 66\n\l1092 type-name: class-name •\l"]
  66 -> "66R1092" [style=solid]
 "66R1092" [label="R1092", fillcolor=3, shape=diamond, style=filled]
  67 [label="State 67\n\l239 defining-type-specifier: class-specifier •\l"]
  67 -> "67R239" [style=solid]
 "67R239" [label="R239", fillcolor=3, shape=diamond, style=filled]
  68 [label="State 68\n\l1085 type-constraint: concept-name •\l1087                | concept-name • '<' '>'\l1089                | concept-name • '<' template-argument-list '>'\l"]
  68 -> 279 [style=solid label="'<'"]
  68 -> "68R1085" [style=solid]
 "68R1085" [label="R1085", fillcolor=3, shape=diamond, style=filled]
  69 [label="State 69\n\l1156 unqualified-id: conversion-function-id •\l"]
  69 -> "69R1156" [style=solid]
 "69R1156" [label="R1156", fillcolor=3, shape=diamond, style=filled]
  70 [label="State 70\n\l1120 type-specifier: cv-qualifier •\l"]
  70 -> "70R1120" [style=solid]
 "70R1120" [label="R1120", fillcolor=3, shape=diamond, style=filled]
  71 [label="State 71\n\l210 decl-specifier-seq: decl-specifier •\l211                   | decl-specifier • attribute-specifier-seq\l212                   | decl-specifier • decl-specifier-seq\l"]
  71 -> 161 [style=solid label="IDENTIFIER"]
  71 -> 4 [style=solid label="\"alignas\""]
  71 -> 9 [style=solid label="\"::\""]
  71 -> 10 [style=solid label="'['"]
  71 -> 11 [style=solid label="\"virtual\""]
  71 -> 12 [style=solid label="\"class\""]
  71 -> 13 [style=solid label="\"struct\""]
  71 -> 14 [style=solid label="\"union\""]
  71 -> 18 [style=solid label="\"const\""]
  71 -> 19 [style=solid label="\"volatile\""]
  71 -> 20 [style=solid label="\"friend\""]
  71 -> 21 [style=solid label="\"typedef\""]
  71 -> 22 [style=solid label="\"constexpr\""]
  71 -> 23 [style=solid label="\"consteval\""]
  71 -> 24 [style=solid label="\"constinit\""]
  71 -> 263 [style=solid label="\"inline\""]
  71 -> 26 [style=solid label="\"decltype\""]
  71 -> 27 [style=solid label="\"enum\""]
  71 -> 264 [style=solid label="\"extern\""]
  71 -> 29 [style=solid label="\"explicit\""]
  71 -> 37 [style=solid label="\"auto\""]
  71 -> 38 [style=solid label="\"char\""]
  71 -> 39 [style=solid label="\"char8_t\""]
  71 -> 40 [style=solid label="\"char16_t\""]
  71 -> 41 [style=solid label="\"char32_t\""]
  71 -> 42 [style=solid label="\"wchar_t\""]
  71 -> 43 [style=solid label="\"bool\""]
  71 -> 44 [style=solid label="\"short\""]
  71 -> 45 [style=solid label="\"int\""]
  71 -> 46 [style=solid label="\"long\""]
  71 -> 47 [style=solid label="\"signed\""]
  71 -> 48 [style=solid label="\"unsigned\""]
  71 -> 49 [style=solid label="\"float\""]
  71 -> 50 [style=solid label="\"double\""]
  71 -> 51 [style=solid label="\"void\""]
  71 -> 53 [style=solid label="\"static\""]
  71 -> 54 [style=solid label="\"thread_local\""]
  71 -> 55 [style=solid label="\"mutable\""]
  71 -> 56 [style=solid label="\"typename\""]
  71 -> 58 [style=dashed label="alignment-specifier"]
  71 -> 61 [style=dashed label="attribute-specifier"]
  71 -> 280 [style=dashed label="attribute-specifier-seq"]
  71 -> 64 [style=dashed label="class-head"]
  71 -> 65 [style=dashed label="class-key"]
  71 -> 66 [style=dashed label="class-name"]
  71 -> 67 [style=dashed label="class-specifier"]
  71 -> 68 [style=dashed label="concept-name"]
  71 -> 70 [style=dashed label="cv-qualifier"]
  71 -> 71 [style=dashed label="decl-specifier"]
  71 -> 281 [style=dashed label="decl-specifier-seq"]
  71 -> 77 [style=dashed label="decltype-specifier"]
  71 -> 79 [style=dashed label="defining-type-specifier"]
  71 -> 80 [style=dashed label="elaborated-enum-specifier"]
  71 -> 81 [style=dashed label="elaborated-type-specifier"]
  71 -> 83 [style=dashed label="enum-head"]
  71 -> 268 [style=dashed label="enum-key"]
  71 -> 85 [style=dashed label="enum-name"]
  71 -> 86 [style=dashed label="enum-specifier"]
  71 -> 269 [style=dashed label="explicit-specifier"]
  71 -> 92 [style=dashed label="function-specifier"]
  71 -> 100 [style=dashed label="namespace-alias"]
  71 -> 103 [style=dashed label="namespace-name"]
  71 -> 213 [style=dashed label="nested-name-specifier"]
  71 -> 110 [style=dashed label="placeholder-type-specifier"]
  71 -> 142 [style=dashed label="simple-template-id"]
  71 -> 116 [style=dashed label="simple-type-specifier"]
  71 -> 118 [style=dashed label="storage-class-specifier"]
  71 -> 216 [style=dashed label="template-name"]
  71 -> 124 [style=dashed label="type-constraint"]
  71 -> 125 [style=dashed label="type-name"]
  71 -> 126 [style=dashed label="type-specifier"]
  71 -> 127 [style=dashed label="typedef-name"]
  71 -> 128 [style=dashed label="typename-specifier"]
  71 -> "71R210d" [label="[IDENTIFIER, \"alignas\", \"::\", '[', \"decltype\"]", style=solid]
 "71R210d" [label="R210", fillcolor=5, shape=diamond, style=filled]
  71 -> "71R210" [style=solid]
 "71R210" [label="R210", fillcolor=3, shape=diamond, style=filled]
  72 [label="State 72\n\l401 function-definition: decl-specifier-seq • declarator function-body\l405                    | decl-specifier-seq • declarator virt-specifier-seq function-body\l409                    | decl-specifier-seq • declarator requires-clause function-body\l977 simple-declaration: decl-specifier-seq • ';'\l978                   | decl-specifier-seq • init-declarator-list ';'\l981                   | decl-specifier-seq • '[' identifier-list ']' initializer ';'\l983                   | decl-specifier-seq • ref-qualifier '[' identifier-list ']' initializer ';'\l"]
  72 -> 148 [style=solid label="IDENTIFIER"]
  72 -> 282 [style=solid label="';'"]
  72 -> 5 [style=solid label="'('"]
  72 -> 6 [style=solid label="\"...\""]
  72 -> 283 [style=solid label="'&'"]
  72 -> 9 [style=solid label="\"::\""]
  72 -> 284 [style=solid label="'['"]
  72 -> 285 [style=solid label="\"&&\""]
  72 -> 17 [style=solid label="\"operator\""]
  72 -> 135 [style=solid label="\"decltype\""]
  72 -> 32 [style=solid label="'*'"]
  72 -> 36 [style=solid label="'~'"]
  72 -> 66 [style=dashed label="class-name"]
  72 -> 69 [style=dashed label="conversion-function-id"]
  72 -> 286 [style=dashed label="declarator"]
  72 -> 76 [style=dashed label="declarator-id"]
  72 -> 139 [style=dashed label="decltype-specifier"]
  72 -> 85 [style=dashed label="enum-name"]
  72 -> 94 [style=dashed label="id-expression"]
  72 -> 287 [style=dashed label="init-declarator"]
  72 -> 288 [style=dashed label="init-declarator-list"]
  72 -> 96 [style=dashed label="literal-operator-id"]
  72 -> 100 [style=dashed label="namespace-alias"]
  72 -> 103 [style=dashed label="namespace-name"]
  72 -> 149 [style=dashed label="nested-name-specifier"]
  72 -> 107 [style=dashed label="noptr-declarator"]
  72 -> 109 [style=dashed label="operator-function-id"]
  72 -> 111 [style=dashed label="ptr-declarator"]
  72 -> 112 [style=dashed label="ptr-operator"]
  72 -> 113 [style=dashed label="qualified-id"]
  72 -> 289 [style=dashed label="ref-qualifier"]
  72 -> 115 [style=dashed label="simple-template-id"]
  72 -> 121 [style=dashed label="template-id"]
  72 -> 143 [style=dashed label="template-name"]
  72 -> 144 [style=dashed label="type-name"]
  72 -> 127 [style=dashed label="typedef-name"]
  72 -> 130 [style=dashed label="unqualified-id"]
  73 [label="State 73\n\l226 declaration-seq: declaration •\l"]
  73 -> "73R226" [style=solid]
 "73R226" [label="R226", fillcolor=3, shape=diamond, style=filled]
  74 [label="State 74\n\l227 declaration-seq: declaration-seq • declaration\l1074 translation-unit: declaration-seq •\l"]
  74 -> 1 [style=solid label="IDENTIFIER"]
  74 -> 2 [style=solid label="\"using\""]
  74 -> 3 [style=solid label="';'"]
  74 -> 4 [style=solid label="\"alignas\""]
  74 -> 5 [style=solid label="'('"]
  74 -> 6 [style=solid label="\"...\""]
  74 -> 7 [style=solid label="'&'"]
  74 -> 8 [style=solid label="\"asm\""]
  74 -> 9 [style=solid label="\"::\""]
  74 -> 10 [style=solid label="'['"]
  74 -> 11 [style=solid label="\"virtual\""]
  74 -> 12 [style=solid label="\"class\""]
  74 -> 13 [style=solid label="\"struct\""]
  74 -> 14 [style=solid label="\"union\""]
  74 -> 15 [style=solid label="\"template\""]
  74 -> 16 [style=solid label="\"&&\""]
  74 -> 17 [style=solid label="\"operator\""]
  74 -> 18 [style=solid label="\"const\""]
  74 -> 19 [style=solid label="\"volatile\""]
  74 -> 20 [style=solid label="\"friend\""]
  74 -> 21 [style=solid label="\"typedef\""]
  74 -> 22 [style=solid label="\"constexpr\""]
  74 -> 23 [style=solid label="\"consteval\""]
  74 -> 24 [style=solid label="\"constinit\""]
  74 -> 25 [style=solid label="\"inline\""]
  74 -> 26 [style=solid label="\"decltype\""]
  74 -> 27 [style=solid label="\"enum\""]
  74 -> 28 [style=solid label="\"extern\""]
  74 -> 29 [style=solid label="\"explicit\""]
  74 -> 30 [style=solid label="\"export\""]
  74 -> 158 [style=solid label="\"export-keyword\""]
  74 -> 32 [style=solid label="'*'"]
  74 -> 34 [style=solid label="\"import-keyword\""]
  74 -> 35 [style=solid label="\"namespace\""]
  74 -> 36 [style=solid label="'~'"]
  74 -> 37 [style=solid label="\"auto\""]
  74 -> 38 [style=solid label="\"char\""]
  74 -> 39 [style=solid label="\"char8_t\""]
  74 -> 40 [style=solid label="\"char16_t\""]
  74 -> 41 [style=solid label="\"char32_t\""]
  74 -> 42 [style=solid label="\"wchar_t\""]
  74 -> 43 [style=solid label="\"bool\""]
  74 -> 44 [style=solid label="\"short\""]
  74 -> 45 [style=solid label="\"int\""]
  74 -> 46 [style=solid label="\"long\""]
  74 -> 47 [style=solid label="\"signed\""]
  74 -> 48 [style=solid label="\"unsigned\""]
  74 -> 49 [style=solid label="\"float\""]
  74 -> 50 [style=solid label="\"double\""]
  74 -> 51 [style=solid label="\"void\""]
  74 -> 52 [style=solid label="\"static_assert\""]
  74 -> 53 [style=solid label="\"static\""]
  74 -> 54 [style=solid label="\"thread_local\""]
  74 -> 55 [style=solid label="\"mutable\""]
  74 -> 56 [style=solid label="\"typename\""]
  74 -> 57 [style=dashed label="alias-declaration"]
  74 -> 58 [style=dashed label="alignment-specifier"]
  74 -> 59 [style=dashed label="asm-declaration"]
  74 -> 60 [style=dashed label="attribute-declaration"]
  74 -> 61 [style=dashed label="attribute-specifier"]
  74 -> 62 [style=dashed label="attribute-specifier-seq"]
  74 -> 63 [style=dashed label="block-declaration"]
  74 -> 64 [style=dashed label="class-head"]
  74 -> 65 [style=dashed label="class-key"]
  74 -> 66 [style=dashed label="class-name"]
  74 -> 67 [style=dashed label="class-specifier"]
  74 -> 68 [style=dashed label="concept-name"]
  74 -> 69 [style=dashed label="conversion-function-id"]
  74 -> 70 [style=dashed label="cv-qualifier"]
  74 -> 71 [style=dashed label="decl-specifier"]
  74 -> 72 [style=dashed label="decl-specifier-seq"]
  74 -> 290 [style=dashed label="declaration"]
  74 -> 75 [style=dashed label="declarator"]
  74 -> 76 [style=dashed label="declarator-id"]
  74 -> 77 [style=dashed label="decltype-specifier"]
  74 -> 78 [style=dashed label="deduction-guide"]
  74 -> 79 [style=dashed label="defining-type-specifier"]
  74 -> 80 [style=dashed label="elaborated-enum-specifier"]
  74 -> 81 [style=dashed label="elaborated-type-specifier"]
  74 -> 82 [style=dashed label="empty-declaration"]
  74 -> 83 [style=dashed label="enum-head"]
  74 -> 84 [style=dashed label="enum-key"]
  74 -> 85 [style=dashed label="enum-name"]
  74 -> 86 [style=dashed label="enum-specifier"]
  74 -> 87 [style=dashed label="explicit-instantiation"]
  74 -> 88 [style=dashed label="explicit-specialization"]
  74 -> 89 [style=dashed label="explicit-specifier"]
  74 -> 90 [style=dashed label="export-declaration"]
  74 -> 91 [style=dashed label="function-definition"]
  74 -> 92 [style=dashed label="function-specifier"]
  74 -> 94 [style=dashed label="id-expression"]
  74 -> 95 [style=dashed label="linkage-specification"]
  74 -> 96 [style=dashed label="literal-operator-id"]
  74 -> 98 [style=dashed label="module-import-declaration"]
  74 -> 99 [style=dashed label="named-namespace-definition"]
  74 -> 100 [style=dashed label="namespace-alias"]
  74 -> 101 [style=dashed label="namespace-alias-definition"]
  74 -> 102 [style=dashed label="namespace-definition"]
  74 -> 103 [style=dashed label="namespace-name"]
  74 -> 104 [style=dashed label="nested-name-specifier"]
  74 -> 105 [style=dashed label="nested-namespace-definition"]
  74 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  74 -> 107 [style=dashed label="noptr-declarator"]
  74 -> 108 [style=dashed label="opaque-enum-declaration"]
  74 -> 109 [style=dashed label="operator-function-id"]
  74 -> 110 [style=dashed label="placeholder-type-specifier"]
  74 -> 111 [style=dashed label="ptr-declarator"]
  74 -> 112 [style=dashed label="ptr-operator"]
  74 -> 113 [style=dashed label="qualified-id"]
  74 -> 114 [style=dashed label="simple-declaration"]
  74 -> 115 [style=dashed label="simple-template-id"]
  74 -> 116 [style=dashed label="simple-type-specifier"]
  74 -> 117 [style=dashed label="static_assert-declaration"]
  74 -> 118 [style=dashed label="storage-class-specifier"]
  74 -> 119 [style=dashed label="template-declaration"]
  74 -> 120 [style=dashed label="template-head"]
  74 -> 121 [style=dashed label="template-id"]
  74 -> 122 [style=dashed label="template-name"]
  74 -> 124 [style=dashed label="type-constraint"]
  74 -> 125 [style=dashed label="type-name"]
  74 -> 126 [style=dashed label="type-specifier"]
  74 -> 127 [style=dashed label="typedef-name"]
  74 -> 128 [style=dashed label="typename-specifier"]
  74 -> 129 [style=dashed label="unnamed-namespace-definition"]
  74 -> 130 [style=dashed label="unqualified-id"]
  74 -> 131 [style=dashed label="using-declaration"]
  74 -> 132 [style=dashed label="using-directive"]
  74 -> 133 [style=dashed label="using-enum-declaration"]
  74 -> "74R1074" [style=solid]
 "74R1074" [label="R1074", fillcolor=3, shape=diamond, style=filled]
  75 [label="State 75\n\l399 function-definition: declarator • function-body\l403                    | declarator • virt-specifier-seq function-body\l407                    | declarator • requires-clause function-body\l695 nodeclspec-function-declaration: declarator • ';'\l"]
  75 -> 291 [style=solid label="'='"]
  75 -> 292 [style=solid label="';'"]
  75 -> 293 [style=solid label="':'"]
  75 -> 294 [style=solid label="'{'"]
  75 -> 295 [style=solid label="\"final\""]
  75 -> 296 [style=solid label="\"try\""]
  75 -> 297 [style=solid label="\"requires\""]
  75 -> 298 [style=solid label="\"override\""]
  75 -> 299 [style=dashed label="compound-statement"]
  75 -> 300 [style=dashed label="ctor-initializer"]
  75 -> 301 [style=dashed label="function-body"]
  75 -> 302 [style=dashed label="function-try-block"]
  75 -> 303 [style=dashed label="requires-clause"]
  75 -> 304 [style=dashed label="virt-specifier"]
  75 -> 305 [style=dashed label="virt-specifier-seq"]
  76 [label="State 76\n\l725 noptr-declarator: declarator-id •\l726                 | declarator-id • attribute-specifier-seq\l"]
  76 -> 4 [style=solid label="\"alignas\""]
  76 -> 10 [style=solid label="'['"]
  76 -> 58 [style=dashed label="alignment-specifier"]
  76 -> 61 [style=dashed label="attribute-specifier"]
  76 -> 306 [style=dashed label="attribute-specifier-seq"]
  76 -> "76R725d" [label="['[']", style=solid]
 "76R725d" [label="R725", fillcolor=5, shape=diamond, style=filled]
  76 -> "76R725" [style=solid]
 "76R725" [label="R725", fillcolor=3, shape=diamond, style=filled]
  77 [label="State 77\n\l662 nested-name-specifier: decltype-specifier • \"::\"\l1002 simple-type-specifier: decltype-specifier •\l"]
  77 -> 307 [style=solid label="\"::\""]
  77 -> "77R1002d" [label="[\"::\"]", style=solid]
 "77R1002d" [label="R1002", fillcolor=5, shape=diamond, style=filled]
  77 -> "77R1002" [style=solid]
 "77R1002" [label="R1002", fillcolor=3, shape=diamond, style=filled]
  78 [label="State 78\n\l217 declaration: deduction-guide •\l"]
  78 -> "78R217" [style=solid]
 "78R217" [label="R217", fillcolor=3, shape=diamond, style=filled]
  79 [label="State 79\n\l202 decl-specifier: defining-type-specifier •\l"]
  79 -> "79R202" [style=solid]
 "79R202" [label="R202", fillcolor=3, shape=diamond, style=filled]
  80 [label="State 80\n\l274 elaborated-type-specifier: elaborated-enum-specifier •\l"]
  80 -> "80R274" [style=solid]
 "80R274" [label="R274", fillcolor=3, shape=diamond, style=filled]
  81 [label="State 81\n\l1118 type-specifier: elaborated-type-specifier •\l"]
  81 -> "81R1118" [style=solid]
 "81R1118" [label="R1118", fillcolor=3, shape=diamond, style=filled]
  82 [label="State 82\n\l223 declaration: empty-declaration •\l"]
  82 -> "82R223" [style=solid]
 "82R223" [label="R223", fillcolor=3, shape=diamond, style=filled]
  83 [label="State 83\n\l298 enum-specifier: enum-head • '{' '}'\l299               | enum-head • '{' enumerator-list '}'\l300               | enum-head • '{' enumerator-list ',' '}'\l"]
  83 -> 308 [style=solid label="'{'"]
  84 [label="State 84\n\l284 enum-head: enum-key •\l285          | enum-key • attribute-specifier-seq\l286          | enum-key • enum-head-name\l287          | enum-key • attribute-specifier-seq enum-head-name\l288          | enum-key • enum-base\l289          | enum-key • attribute-specifier-seq enum-base\l290          | enum-key • enum-head-name enum-base\l291          | enum-key • attribute-specifier-seq enum-head-name enum-base\l755 opaque-enum-declaration: enum-key • enum-head-name ';'\l756                        | enum-key • attribute-specifier-seq enum-head-name ';'\l757                        | enum-key • enum-head-name enum-base ';'\l758                        | enum-key • attribute-specifier-seq enum-head-name enum-base ';'\l"]
  84 -> 309 [style=solid label="IDENTIFIER"]
  84 -> 4 [style=solid label="\"alignas\""]
  84 -> 9 [style=solid label="\"::\""]
  84 -> 10 [style=solid label="'['"]
  84 -> 310 [style=solid label="':'"]
  84 -> 135 [style=solid label="\"decltype\""]
  84 -> 58 [style=dashed label="alignment-specifier"]
  84 -> 61 [style=dashed label="attribute-specifier"]
  84 -> 311 [style=dashed label="attribute-specifier-seq"]
  84 -> 66 [style=dashed label="class-name"]
  84 -> 139 [style=dashed label="decltype-specifier"]
  84 -> 312 [style=dashed label="enum-base"]
  84 -> 313 [style=dashed label="enum-head-name"]
  84 -> 85 [style=dashed label="enum-name"]
  84 -> 100 [style=dashed label="namespace-alias"]
  84 -> 103 [style=dashed label="namespace-name"]
  84 -> 314 [style=dashed label="nested-name-specifier"]
  84 -> 142 [style=dashed label="simple-template-id"]
  84 -> 143 [style=dashed label="template-name"]
  84 -> 144 [style=dashed label="type-name"]
  84 -> 127 [style=dashed label="typedef-name"]
  84 -> "84R284" [style=solid]
 "84R284" [label="R284", fillcolor=3, shape=diamond, style=filled]
  85 [label="State 85\n\l1093 type-name: enum-name •\l"]
  85 -> "85R1093" [style=solid]
 "85R1093" [label="R1093", fillcolor=3, shape=diamond, style=filled]
  86 [label="State 86\n\l240 defining-type-specifier: enum-specifier •\l"]
  86 -> "86R240" [style=solid]
 "86R240" [label="R240", fillcolor=3, shape=diamond, style=filled]
  87 [label="State 87\n\l218 declaration: explicit-instantiation •\l"]
  87 -> "87R218" [style=solid]
 "87R218" [label="R218", fillcolor=3, shape=diamond, style=filled]
  88 [label="State 88\n\l219 declaration: explicit-specialization •\l"]
  88 -> "88R219" [style=solid]
 "88R219" [label="R219", fillcolor=3, shape=diamond, style=filled]
  89 [label="State 89\n\l234 deduction-guide: explicit-specifier • template-name '(' parameter-declaration-clause ')' \"->\" simple-template-id ';'\l411 function-specifier: explicit-specifier •\l"]
  89 -> 315 [style=solid label="IDENTIFIER"]
  89 -> 316 [style=dashed label="template-name"]
  89 -> "89R411d" [label="[IDENTIFIER]", style=solid]
 "89R411d" [label="R411", fillcolor=5, shape=diamond, style=filled]
  89 -> "89R411" [style=solid]
 "89R411" [label="R411", fillcolor=3, shape=diamond, style=filled]
  90 [label="State 90\n\l220 declaration: export-declaration •\l"]
  90 -> "90R220" [style=solid]
 "90R220" [label="R220", fillcolor=3, shape=diamond, style=filled]
  91 [label="State 91\n\l215 declaration: function-definition •\l"]
  91 -> "91R215" [style=solid]
 "91R215" [label="R215", fillcolor=3, shape=diamond, style=filled]
  92 [label="State 92\n\l203 decl-specifier: function-specifier •\l"]
  92 -> "92R203" [style=solid]
 "92R203" [label="R203", fillcolor=3, shape=diamond, style=filled]
  93 [label="State 93\n\l1075 translation-unit: global-module-fragment • module-declaration\l1077                 | global-module-fragment • module-declaration declaration-seq\l1079                 | global-module-fragment • module-declaration private-module-fragment\l1081                 | global-module-fragment • module-declaration declaration-seq private-module-fragment\l"]
  93 -> 317 [style=solid label="\"export-keyword\""]
  93 -> 318 [style=solid label="\"module-keyword\""]
  93 -> 319 [style=dashed label="module-declaration"]
  94 [label="State 94\n\l232 declarator-id: id-expression •\l"]
  94 -> "94R232" [style=solid]
 "94R232" [label="R232", fillcolor=3, shape=diamond, style=filled]
  95 [label="State 95\n\l221 declaration: linkage-specification •\l"]
  95 -> "95R221" [style=solid]
 "95R221" [label="R221", fillcolor=3, shape=diamond, style=filled]
  96 [label="State 96\n\l1064 template-id: literal-operator-id • '<' '>'\l1065            | literal-operator-id • '<' template-argument-list '>'\l1157 unqualified-id: literal-operator-id •\l"]
  96 -> 320 [style=solid label="'<'"]
  96 -> "96R1157d" [label="['<']", style=solid]
 "96R1157d" [label="R1157", fillcolor=5, shape=diamond, style=filled]
  96 -> "96R1157" [style=solid]
 "96R1157" [label="R1157", fillcolor=3, shape=diamond, style=filled]
  97 [label="State 97\n\l1076 translation-unit: module-declaration •\l1078                 | module-declaration • declaration-seq\l1080                 | module-declaration • private-module-fragment\l1082                 | module-declaration • declaration-seq private-module-fragment\l"]
  97 -> 1 [style=solid label="IDENTIFIER"]
  97 -> 2 [style=solid label="\"using\""]
  97 -> 3 [style=solid label="';'"]
  97 -> 4 [style=solid label="\"alignas\""]
  97 -> 5 [style=solid label="'('"]
  97 -> 6 [style=solid label="\"...\""]
  97 -> 7 [style=solid label="'&'"]
  97 -> 8 [style=solid label="\"asm\""]
  97 -> 9 [style=solid label="\"::\""]
  97 -> 10 [style=solid label="'['"]
  97 -> 11 [style=solid label="\"virtual\""]
  97 -> 12 [style=solid label="\"class\""]
  97 -> 13 [style=solid label="\"struct\""]
  97 -> 14 [style=solid label="\"union\""]
  97 -> 15 [style=solid label="\"template\""]
  97 -> 16 [style=solid label="\"&&\""]
  97 -> 17 [style=solid label="\"operator\""]
  97 -> 18 [style=solid label="\"const\""]
  97 -> 19 [style=solid label="\"volatile\""]
  97 -> 20 [style=solid label="\"friend\""]
  97 -> 21 [style=solid label="\"typedef\""]
  97 -> 22 [style=solid label="\"constexpr\""]
  97 -> 23 [style=solid label="\"consteval\""]
  97 -> 24 [style=solid label="\"constinit\""]
  97 -> 25 [style=solid label="\"inline\""]
  97 -> 26 [style=solid label="\"decltype\""]
  97 -> 27 [style=solid label="\"enum\""]
  97 -> 28 [style=solid label="\"extern\""]
  97 -> 29 [style=solid label="\"explicit\""]
  97 -> 30 [style=solid label="\"export\""]
  97 -> 158 [style=solid label="\"export-keyword\""]
  97 -> 32 [style=solid label="'*'"]
  97 -> 321 [style=solid label="\"module-keyword\""]
  97 -> 34 [style=solid label="\"import-keyword\""]
  97 -> 35 [style=solid label="\"namespace\""]
  97 -> 36 [style=solid label="'~'"]
  97 -> 37 [style=solid label="\"auto\""]
  97 -> 38 [style=solid label="\"char\""]
  97 -> 39 [style=solid label="\"char8_t\""]
  97 -> 40 [style=solid label="\"char16_t\""]
  97 -> 41 [style=solid label="\"char32_t\""]
  97 -> 42 [style=solid label="\"wchar_t\""]
  97 -> 43 [style=solid label="\"bool\""]
  97 -> 44 [style=solid label="\"short\""]
  97 -> 45 [style=solid label="\"int\""]
  97 -> 46 [style=solid label="\"long\""]
  97 -> 47 [style=solid label="\"signed\""]
  97 -> 48 [style=solid label="\"unsigned\""]
  97 -> 49 [style=solid label="\"float\""]
  97 -> 50 [style=solid label="\"double\""]
  97 -> 51 [style=solid label="\"void\""]
  97 -> 52 [style=solid label="\"static_assert\""]
  97 -> 53 [style=solid label="\"static\""]
  97 -> 54 [style=solid label="\"thread_local\""]
  97 -> 55 [style=solid label="\"mutable\""]
  97 -> 56 [style=solid label="\"typename\""]
  97 -> 57 [style=dashed label="alias-declaration"]
  97 -> 58 [style=dashed label="alignment-specifier"]
  97 -> 59 [style=dashed label="asm-declaration"]
  97 -> 60 [style=dashed label="attribute-declaration"]
  97 -> 61 [style=dashed label="attribute-specifier"]
  97 -> 62 [style=dashed label="attribute-specifier-seq"]
  97 -> 63 [style=dashed label="block-declaration"]
  97 -> 64 [style=dashed label="class-head"]
  97 -> 65 [style=dashed label="class-key"]
  97 -> 66 [style=dashed label="class-name"]
  97 -> 67 [style=dashed label="class-specifier"]
  97 -> 68 [style=dashed label="concept-name"]
  97 -> 69 [style=dashed label="conversion-function-id"]
  97 -> 70 [style=dashed label="cv-qualifier"]
  97 -> 71 [style=dashed label="decl-specifier"]
  97 -> 72 [style=dashed label="decl-specifier-seq"]
  97 -> 73 [style=dashed label="declaration"]
  97 -> 322 [style=dashed label="declaration-seq"]
  97 -> 75 [style=dashed label="declarator"]
  97 -> 76 [style=dashed label="declarator-id"]
  97 -> 77 [style=dashed label="decltype-specifier"]
  97 -> 78 [style=dashed label="deduction-guide"]
  97 -> 79 [style=dashed label="defining-type-specifier"]
  97 -> 80 [style=dashed label="elaborated-enum-specifier"]
  97 -> 81 [style=dashed label="elaborated-type-specifier"]
  97 -> 82 [style=dashed label="empty-declaration"]
  97 -> 83 [style=dashed label="enum-head"]
  97 -> 84 [style=dashed label="enum-key"]
  97 -> 85 [style=dashed label="enum-name"]
  97 -> 86 [style=dashed label="enum-specifier"]
  97 -> 87 [style=dashed label="explicit-instantiation"]
  97 -> 88 [style=dashed label="explicit-specialization"]
  97 -> 89 [style=dashed label="explicit-specifier"]
  97 -> 90 [style=dashed label="export-declaration"]
  97 -> 91 [style=dashed label="function-definition"]
  97 -> 92 [style=dashed label="function-specifier"]
  97 -> 94 [style=dashed label="id-expression"]
  97 -> 95 [style=dashed label="linkage-specification"]
  97 -> 96 [style=dashed label="literal-operator-id"]
  97 -> 98 [style=dashed label="module-import-declaration"]
  97 -> 99 [style=dashed label="named-namespace-definition"]
  97 -> 100 [style=dashed label="namespace-alias"]
  97 -> 101 [style=dashed label="namespace-alias-definition"]
  97 -> 102 [style=dashed label="namespace-definition"]
  97 -> 103 [style=dashed label="namespace-name"]
  97 -> 104 [style=dashed label="nested-name-specifier"]
  97 -> 105 [style=dashed label="nested-namespace-definition"]
  97 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  97 -> 107 [style=dashed label="noptr-declarator"]
  97 -> 108 [style=dashed label="opaque-enum-declaration"]
  97 -> 109 [style=dashed label="operator-function-id"]
  97 -> 110 [style=dashed label="placeholder-type-specifier"]
  97 -> 323 [style=dashed label="private-module-fragment"]
  97 -> 111 [style=dashed label="ptr-declarator"]
  97 -> 112 [style=dashed label="ptr-operator"]
  97 -> 113 [style=dashed label="qualified-id"]
  97 -> 114 [style=dashed label="simple-declaration"]
  97 -> 115 [style=dashed label="simple-template-id"]
  97 -> 116 [style=dashed label="simple-type-specifier"]
  97 -> 117 [style=dashed label="static_assert-declaration"]
  97 -> 118 [style=dashed label="storage-class-specifier"]
  97 -> 119 [style=dashed label="template-declaration"]
  97 -> 120 [style=dashed label="template-head"]
  97 -> 121 [style=dashed label="template-id"]
  97 -> 122 [style=dashed label="template-name"]
  97 -> 124 [style=dashed label="type-constraint"]
  97 -> 125 [style=dashed label="type-name"]
  97 -> 126 [style=dashed label="type-specifier"]
  97 -> 127 [style=dashed label="typedef-name"]
  97 -> 128 [style=dashed label="typename-specifier"]
  97 -> 129 [style=dashed label="unnamed-namespace-definition"]
  97 -> 130 [style=dashed label="unqualified-id"]
  97 -> 131 [style=dashed label="using-declaration"]
  97 -> 132 [style=dashed label="using-directive"]
  97 -> 133 [style=dashed label="using-enum-declaration"]
  97 -> "97R1076" [style=solid]
 "97R1076" [label="R1076", fillcolor=3, shape=diamond, style=filled]
  98 [label="State 98\n\l225 declaration: module-import-declaration •\l"]
  98 -> "98R225" [style=solid]
 "98R225" [label="R225", fillcolor=3, shape=diamond, style=filled]
  99 [label="State 99\n\l654 namespace-definition: named-namespace-definition •\l"]
  99 -> "99R654" [style=solid]
 "99R654" [label="R654", fillcolor=3, shape=diamond, style=filled]
  100 [label="State 100\n\l658 namespace-name: namespace-alias •\l"]
  100 -> "100R658" [style=solid]
 "100R658" [label="R658", fillcolor=3, shape=diamond, style=filled]
  101 [label="State 101\n\l 97 block-declaration: namespace-alias-definition •\l"]
  101 -> "101R97" [style=solid]
 "101R97" [label="R97", fillcolor=3, shape=diamond, style=filled]
  102 [label="State 102\n\l222 declaration: namespace-definition •\l"]
  102 -> "102R222" [style=solid]
 "102R222" [label="R222", fillcolor=3, shape=diamond, style=filled]
  103 [label="State 103\n\l661 nested-name-specifier: namespace-name • \"::\"\l"]
  103 -> 324 [style=solid label="\"::\""]
  104 [label="State 104\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l905 ptr-operator: nested-name-specifier • '*'\l906             | nested-name-specifier • '*' attribute-specifier-seq\l907             | nested-name-specifier • '*' cv-qualifier-seq\l908             | nested-name-specifier • '*' attribute-specifier-seq cv-qualifier-seq\l913 qualified-id: nested-name-specifier • unqualified-id\l914             | nested-name-specifier • \"template\" unqualified-id\l999 simple-type-specifier: nested-name-specifier • type-name\l1001                      | nested-name-specifier • \"template\" simple-template-id\l1004                      | nested-name-specifier • template-name\l1084 type-constraint: nested-name-specifier • concept-name\l1086                | nested-name-specifier • concept-name '<' '>'\l1088                | nested-name-specifier • concept-name '<' template-argument-list '>'\l"]
  104 -> 325 [style=solid label="IDENTIFIER"]
  104 -> 326 [style=solid label="\"template\""]
  104 -> 17 [style=solid label="\"operator\""]
  104 -> 327 [style=solid label="'*'"]
  104 -> 36 [style=solid label="'~'"]
  104 -> 66 [style=dashed label="class-name"]
  104 -> 328 [style=dashed label="concept-name"]
  104 -> 69 [style=dashed label="conversion-function-id"]
  104 -> 85 [style=dashed label="enum-name"]
  104 -> 96 [style=dashed label="literal-operator-id"]
  104 -> 109 [style=dashed label="operator-function-id"]
  104 -> 329 [style=dashed label="simple-template-id"]
  104 -> 121 [style=dashed label="template-id"]
  104 -> 330 [style=dashed label="template-name"]
  104 -> 331 [style=dashed label="type-name"]
  104 -> 127 [style=dashed label="typedef-name"]
  104 -> 332 [style=dashed label="unqualified-id"]
  105 [label="State 105\n\l656 namespace-definition: nested-namespace-definition •\l"]
  105 -> "105R656" [style=solid]
 "105R656" [label="R656", fillcolor=3, shape=diamond, style=filled]
  106 [label="State 106\n\l214 declaration: nodeclspec-function-declaration •\l"]
  106 -> "106R214" [style=solid]
 "106R214" [label="R214", fillcolor=3, shape=diamond, style=filled]
  107 [label="State 107\n\l230 declarator: noptr-declarator • parameters-and-qualifiers trailing-return-type\l727 noptr-declarator: noptr-declarator • parameters-and-qualifiers\l728                 | noptr-declarator • '[' ']'\l729                 | noptr-declarator • '[' constant-expression ']'\l730                 | noptr-declarator • '[' ']' attribute-specifier-seq\l731                 | noptr-declarator • '[' constant-expression ']' attribute-specifier-seq\l895 ptr-declarator: noptr-declarator •\l"]
  107 -> 333 [style=solid label="'('"]
  107 -> 334 [style=solid label="'['"]
  107 -> 335 [style=dashed label="parameters-and-qualifiers"]
  107 -> "107R895d" [label="['(']", style=solid]
 "107R895d" [label="R895", fillcolor=5, shape=diamond, style=filled]
  107 -> "107R895" [style=solid]
 "107R895" [label="R895", fillcolor=3, shape=diamond, style=filled]
  108 [label="State 108\n\l103 block-declaration: opaque-enum-declaration •\l"]
  108 -> "108R103" [style=solid]
 "108R103" [label="R103", fillcolor=3, shape=diamond, style=filled]
  109 [label="State 109\n\l1062 template-id: operator-function-id • '<' '>'\l1063            | operator-function-id • '<' template-argument-list '>'\l1155 unqualified-id: operator-function-id •\l"]
  109 -> 336 [style=solid label="'<'"]
  109 -> "109R1155d" [label="['<']", style=solid]
 "109R1155d" [label="R1155", fillcolor=5, shape=diamond, style=filled]
  109 -> "109R1155" [style=solid]
 "109R1155" [label="R1155", fillcolor=3, shape=diamond, style=filled]
  110 [label="State 110\n\l1003 simple-type-specifier: placeholder-type-specifier •\l"]
  110 -> "110R1003" [style=solid]
 "110R1003" [label="R1003", fillcolor=3, shape=diamond, style=filled]
  111 [label="State 111\n\l229 declarator: ptr-declarator •\l"]
  111 -> "111R229" [style=solid]
 "111R229" [label="R229", fillcolor=3, shape=diamond, style=filled]
  112 [label="State 112\n\l896 ptr-declarator: ptr-operator • ptr-declarator\l"]
  112 -> 148 [style=solid label="IDENTIFIER"]
  112 -> 5 [style=solid label="'('"]
  112 -> 6 [style=solid label="\"...\""]
  112 -> 7 [style=solid label="'&'"]
  112 -> 9 [style=solid label="\"::\""]
  112 -> 16 [style=solid label="\"&&\""]
  112 -> 17 [style=solid label="\"operator\""]
  112 -> 135 [style=solid label="\"decltype\""]
  112 -> 32 [style=solid label="'*'"]
  112 -> 36 [style=solid label="'~'"]
  112 -> 66 [style=dashed label="class-name"]
  112 -> 69 [style=dashed label="conversion-function-id"]
  112 -> 76 [style=dashed label="declarator-id"]
  112 -> 139 [style=dashed label="decltype-specifier"]
  112 -> 85 [style=dashed label="enum-name"]
  112 -> 94 [style=dashed label="id-expression"]
  112 -> 96 [style=dashed label="literal-operator-id"]
  112 -> 100 [style=dashed label="namespace-alias"]
  112 -> 103 [style=dashed label="namespace-name"]
  112 -> 149 [style=dashed label="nested-name-specifier"]
  112 -> 150 [style=dashed label="noptr-declarator"]
  112 -> 109 [style=dashed label="operator-function-id"]
  112 -> 337 [style=dashed label="ptr-declarator"]
  112 -> 112 [style=dashed label="ptr-operator"]
  112 -> 113 [style=dashed label="qualified-id"]
  112 -> 115 [style=dashed label="simple-template-id"]
  112 -> 121 [style=dashed label="template-id"]
  112 -> 143 [style=dashed label="template-name"]
  112 -> 144 [style=dashed label="type-name"]
  112 -> 127 [style=dashed label="typedef-name"]
  112 -> 130 [style=dashed label="unqualified-id"]
  113 [label="State 113\n\l464 id-expression: qualified-id •\l"]
  113 -> "113R464" [style=solid]
 "113R464" [label="R464", fillcolor=3, shape=diamond, style=filled]
  114 [label="State 114\n\l 95 block-declaration: simple-declaration •\l"]
  114 -> "114R95" [style=solid]
 "114R95" [label="R95", fillcolor=3, shape=diamond, style=filled]
  115 [label="State 115\n\l146 class-name: simple-template-id •\l1061 template-id: simple-template-id •\l1125 typedef-name: simple-template-id •\l"]
  115 -> "115R146" [style=solid]
 "115R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  115 -> "115R1061d" [label="[IDENTIFIER, '=', ';', \"alignas\", '(', ')', \"...\", '&', ',', \"::\", '[', ':', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", '>', \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "115R1061d" [label="R1061", fillcolor=5, shape=diamond, style=filled]
  115 -> "115R1061" [label="['+', '-', \"using\", \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ']', '}', \"template\", \"final\", \"<=>\", \"noexcept\", \"concept\", '?', \"||\", \"->\", '.', \"==\", \"!=\", '^', '<', \"export\", \"export-keyword\", '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", \"requires\", \"++\", \"--\", \"static_assert\", \"override\"]", style=solid]
 "115R1061" [label="R1061", fillcolor=3, shape=diamond, style=filled]
  115 -> "115R1125d" [label="[IDENTIFIER, '=', ';', \"alignas\", '(', ')', \"...\", '&', ',', \"::\", '[', ':', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", '>', \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "115R1125d" [label="R1125", fillcolor=5, shape=diamond, style=filled]
  116 [label="State 116\n\l1117 type-specifier: simple-type-specifier •\l"]
  116 -> "116R1117" [style=solid]
 "116R1117" [label="R1117", fillcolor=3, shape=diamond, style=filled]
  117 [label="State 117\n\l101 block-declaration: static_assert-declaration •\l"]
  117 -> "117R101" [style=solid]
 "117R101" [label="R101", fillcolor=3, shape=diamond, style=filled]
  118 [label="State 118\n\l201 decl-specifier: storage-class-specifier •\l"]
  118 -> "118R201" [style=solid]
 "118R201" [label="R201", fillcolor=3, shape=diamond, style=filled]
  119 [label="State 119\n\l216 declaration: template-declaration •\l"]
  119 -> "119R216" [style=solid]
 "119R216" [label="R216", fillcolor=3, shape=diamond, style=filled]
  120 [label="State 120\n\l1057 template-declaration: template-head • declaration\l1058                     | template-head • concept-definition\l"]
  120 -> 1 [style=solid label="IDENTIFIER"]
  120 -> 2 [style=solid label="\"using\""]
  120 -> 3 [style=solid label="';'"]
  120 -> 4 [style=solid label="\"alignas\""]
  120 -> 5 [style=solid label="'('"]
  120 -> 6 [style=solid label="\"...\""]
  120 -> 7 [style=solid label="'&'"]
  120 -> 8 [style=solid label="\"asm\""]
  120 -> 9 [style=solid label="\"::\""]
  120 -> 10 [style=solid label="'['"]
  120 -> 11 [style=solid label="\"virtual\""]
  120 -> 12 [style=solid label="\"class\""]
  120 -> 13 [style=solid label="\"struct\""]
  120 -> 14 [style=solid label="\"union\""]
  120 -> 15 [style=solid label="\"template\""]
  120 -> 338 [style=solid label="\"concept\""]
  120 -> 16 [style=solid label="\"&&\""]
  120 -> 17 [style=solid label="\"operator\""]
  120 -> 18 [style=solid label="\"const\""]
  120 -> 19 [style=solid label="\"volatile\""]
  120 -> 20 [style=solid label="\"friend\""]
  120 -> 21 [style=solid label="\"typedef\""]
  120 -> 22 [style=solid label="\"constexpr\""]
  120 -> 23 [style=solid label="\"consteval\""]
  120 -> 24 [style=solid label="\"constinit\""]
  120 -> 25 [style=solid label="\"inline\""]
  120 -> 26 [style=solid label="\"decltype\""]
  120 -> 27 [style=solid label="\"enum\""]
  120 -> 28 [style=solid label="\"extern\""]
  120 -> 29 [style=solid label="\"explicit\""]
  120 -> 30 [style=solid label="\"export\""]
  120 -> 158 [style=solid label="\"export-keyword\""]
  120 -> 32 [style=solid label="'*'"]
  120 -> 34 [style=solid label="\"import-keyword\""]
  120 -> 35 [style=solid label="\"namespace\""]
  120 -> 36 [style=solid label="'~'"]
  120 -> 37 [style=solid label="\"auto\""]
  120 -> 38 [style=solid label="\"char\""]
  120 -> 39 [style=solid label="\"char8_t\""]
  120 -> 40 [style=solid label="\"char16_t\""]
  120 -> 41 [style=solid label="\"char32_t\""]
  120 -> 42 [style=solid label="\"wchar_t\""]
  120 -> 43 [style=solid label="\"bool\""]
  120 -> 44 [style=solid label="\"short\""]
  120 -> 45 [style=solid label="\"int\""]
  120 -> 46 [style=solid label="\"long\""]
  120 -> 47 [style=solid label="\"signed\""]
  120 -> 48 [style=solid label="\"unsigned\""]
  120 -> 49 [style=solid label="\"float\""]
  120 -> 50 [style=solid label="\"double\""]
  120 -> 51 [style=solid label="\"void\""]
  120 -> 52 [style=solid label="\"static_assert\""]
  120 -> 53 [style=solid label="\"static\""]
  120 -> 54 [style=solid label="\"thread_local\""]
  120 -> 55 [style=solid label="\"mutable\""]
  120 -> 56 [style=solid label="\"typename\""]
  120 -> 57 [style=dashed label="alias-declaration"]
  120 -> 58 [style=dashed label="alignment-specifier"]
  120 -> 59 [style=dashed label="asm-declaration"]
  120 -> 60 [style=dashed label="attribute-declaration"]
  120 -> 61 [style=dashed label="attribute-specifier"]
  120 -> 62 [style=dashed label="attribute-specifier-seq"]
  120 -> 63 [style=dashed label="block-declaration"]
  120 -> 64 [style=dashed label="class-head"]
  120 -> 65 [style=dashed label="class-key"]
  120 -> 66 [style=dashed label="class-name"]
  120 -> 67 [style=dashed label="class-specifier"]
  120 -> 339 [style=dashed label="concept-definition"]
  120 -> 68 [style=dashed label="concept-name"]
  120 -> 69 [style=dashed label="conversion-function-id"]
  120 -> 70 [style=dashed label="cv-qualifier"]
  120 -> 71 [style=dashed label="decl-specifier"]
  120 -> 72 [style=dashed label="decl-specifier-seq"]
  120 -> 340 [style=dashed label="declaration"]
  120 -> 75 [style=dashed label="declarator"]
  120 -> 76 [style=dashed label="declarator-id"]
  120 -> 77 [style=dashed label="decltype-specifier"]
  120 -> 78 [style=dashed label="deduction-guide"]
  120 -> 79 [style=dashed label="defining-type-specifier"]
  120 -> 80 [style=dashed label="elaborated-enum-specifier"]
  120 -> 81 [style=dashed label="elaborated-type-specifier"]
  120 -> 82 [style=dashed label="empty-declaration"]
  120 -> 83 [style=dashed label="enum-head"]
  120 -> 84 [style=dashed label="enum-key"]
  120 -> 85 [style=dashed label="enum-name"]
  120 -> 86 [style=dashed label="enum-specifier"]
  120 -> 87 [style=dashed label="explicit-instantiation"]
  120 -> 88 [style=dashed label="explicit-specialization"]
  120 -> 89 [style=dashed label="explicit-specifier"]
  120 -> 90 [style=dashed label="export-declaration"]
  120 -> 91 [style=dashed label="function-definition"]
  120 -> 92 [style=dashed label="function-specifier"]
  120 -> 94 [style=dashed label="id-expression"]
  120 -> 95 [style=dashed label="linkage-specification"]
  120 -> 96 [style=dashed label="literal-operator-id"]
  120 -> 98 [style=dashed label="module-import-declaration"]
  120 -> 99 [style=dashed label="named-namespace-definition"]
  120 -> 100 [style=dashed label="namespace-alias"]
  120 -> 101 [style=dashed label="namespace-alias-definition"]
  120 -> 102 [style=dashed label="namespace-definition"]
  120 -> 103 [style=dashed label="namespace-name"]
  120 -> 104 [style=dashed label="nested-name-specifier"]
  120 -> 105 [style=dashed label="nested-namespace-definition"]
  120 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  120 -> 107 [style=dashed label="noptr-declarator"]
  120 -> 108 [style=dashed label="opaque-enum-declaration"]
  120 -> 109 [style=dashed label="operator-function-id"]
  120 -> 110 [style=dashed label="placeholder-type-specifier"]
  120 -> 111 [style=dashed label="ptr-declarator"]
  120 -> 112 [style=dashed label="ptr-operator"]
  120 -> 113 [style=dashed label="qualified-id"]
  120 -> 114 [style=dashed label="simple-declaration"]
  120 -> 115 [style=dashed label="simple-template-id"]
  120 -> 116 [style=dashed label="simple-type-specifier"]
  120 -> 117 [style=dashed label="static_assert-declaration"]
  120 -> 118 [style=dashed label="storage-class-specifier"]
  120 -> 119 [style=dashed label="template-declaration"]
  120 -> 120 [style=dashed label="template-head"]
  120 -> 121 [style=dashed label="template-id"]
  120 -> 122 [style=dashed label="template-name"]
  120 -> 124 [style=dashed label="type-constraint"]
  120 -> 125 [style=dashed label="type-name"]
  120 -> 126 [style=dashed label="type-specifier"]
  120 -> 127 [style=dashed label="typedef-name"]
  120 -> 128 [style=dashed label="typename-specifier"]
  120 -> 129 [style=dashed label="unnamed-namespace-definition"]
  120 -> 130 [style=dashed label="unqualified-id"]
  120 -> 131 [style=dashed label="using-declaration"]
  120 -> 132 [style=dashed label="using-directive"]
  120 -> 133 [style=dashed label="using-enum-declaration"]
  121 [label="State 121\n\l1160 unqualified-id: template-id •\l"]
  121 -> "121R1160" [style=solid]
 "121R1160" [label="R1160", fillcolor=3, shape=diamond, style=filled]
  122 [label="State 122\n\l235 deduction-guide: template-name • '(' parameter-declaration-clause ')' \"->\" simple-template-id ';'\l997 simple-template-id: template-name • '<' '>'\l998                   | template-name • '<' template-argument-list '>'\l1005 simple-type-specifier: template-name •\l"]
  122 -> 341 [style=solid label="'('"]
  122 -> 342 [style=solid label="'<'"]
  122 -> "122R1005d" [label="['(']", style=solid]
 "122R1005d" [label="R1005", fillcolor=5, shape=diamond, style=filled]
  122 -> "122R1005" [style=solid]
 "122R1005" [label="R1005", fillcolor=3, shape=diamond, style=filled]
  123 [label="State 123\n\l  0 $accept: translation-unit • $end\l"]
  123 -> 343 [style=solid label="$end"]
  124 [label="State 124\n\l852 placeholder-type-specifier: type-constraint • \"auto\"\l854                           | type-constraint • \"decltype\" '(' \"auto\" ')'\l"]
  124 -> 344 [style=solid label="\"decltype\""]
  124 -> 345 [style=solid label="\"auto\""]
  125 [label="State 125\n\l660 nested-name-specifier: type-name • \"::\"\l1000 simple-type-specifier: type-name •\l"]
  125 -> 346 [style=solid label="\"::\""]
  125 -> "125R1000d" [label="[\"::\"]", style=solid]
 "125R1000d" [label="R1000", fillcolor=5, shape=diamond, style=filled]
  125 -> "125R1000" [style=solid]
 "125R1000" [label="R1000", fillcolor=3, shape=diamond, style=filled]
  126 [label="State 126\n\l238 defining-type-specifier: type-specifier •\l"]
  126 -> "126R238" [style=solid]
 "126R238" [label="R238", fillcolor=3, shape=diamond, style=filled]
  127 [label="State 127\n\l1094 type-name: typedef-name •\l"]
  127 -> "127R1094" [style=solid]
 "127R1094" [label="R1094", fillcolor=3, shape=diamond, style=filled]
  128 [label="State 128\n\l1119 type-specifier: typename-specifier •\l"]
  128 -> "128R1119" [style=solid]
 "128R1119" [label="R1119", fillcolor=3, shape=diamond, style=filled]
  129 [label="State 129\n\l655 namespace-definition: unnamed-namespace-definition •\l"]
  129 -> "129R655" [style=solid]
 "129R655" [label="R655", fillcolor=3, shape=diamond, style=filled]
  130 [label="State 130\n\l463 id-expression: unqualified-id •\l"]
  130 -> "130R463" [style=solid]
 "130R463" [label="R463", fillcolor=3, shape=diamond, style=filled]
  131 [label="State 131\n\l 98 block-declaration: using-declaration •\l"]
  131 -> "131R98" [style=solid]
 "131R98" [label="R98", fillcolor=3, shape=diamond, style=filled]
  132 [label="State 132\n\l100 block-declaration: using-directive •\l"]
  132 -> "132R100" [style=solid]
 "132R100" [label="R100", fillcolor=3, shape=diamond, style=filled]
  133 [label="State 133\n\l 99 block-declaration: using-enum-declaration •\l"]
  133 -> "133R99" [style=solid]
 "133R99" [label="R99", fillcolor=3, shape=diamond, style=filled]
  134 [label="State 134\n\l 13 alias-declaration: \"using\" IDENTIFIER • '=' defining-type-id ';'\l 14                  | \"using\" IDENTIFIER • attribute-specifier-seq '=' defining-type-id ';'\l145 class-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l"]
  134 -> 347 [style=solid label="'='"]
  134 -> 4 [style=solid label="\"alignas\""]
  134 -> 10 [style=solid label="'['"]
  134 -> 58 [style=dashed label="alignment-specifier"]
  134 -> 61 [style=dashed label="attribute-specifier"]
  134 -> 348 [style=dashed label="attribute-specifier-seq"]
  134 -> "134R145" [style=solid]
 "134R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  134 -> "134R297d" [label="[\"::\"]", style=solid]
 "134R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  134 -> "134R651d" [label="[\"::\"]", style=solid]
 "134R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  134 -> "134R657d" [label="[\"::\"]", style=solid]
 "134R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  134 -> "134R1066" [label="['<']", style=solid]
 "134R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  134 -> "134R1124d" [label="[\"::\"]", style=solid]
 "134R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  135 [label="State 135\n\l233 decltype-specifier: \"decltype\" • '(' expression ')'\l"]
  135 -> 349 [style=solid label="'('"]
  136 [label="State 136\n\l265 elaborated-enum-specifier: \"enum\" • IDENTIFIER\l266                          | \"enum\" • nested-name-specifier IDENTIFIER\l"]
  136 -> 222 [style=solid label="IDENTIFIER"]
  136 -> 9 [style=solid label="\"::\""]
  136 -> 135 [style=solid label="\"decltype\""]
  136 -> 66 [style=dashed label="class-name"]
  136 -> 139 [style=dashed label="decltype-specifier"]
  136 -> 85 [style=dashed label="enum-name"]
  136 -> 100 [style=dashed label="namespace-alias"]
  136 -> 103 [style=dashed label="namespace-name"]
  136 -> 225 [style=dashed label="nested-name-specifier"]
  136 -> 142 [style=dashed label="simple-template-id"]
  136 -> 143 [style=dashed label="template-name"]
  136 -> 144 [style=dashed label="type-name"]
  136 -> 127 [style=dashed label="typedef-name"]
  137 [label="State 137\n\l1186 using-directive: \"using\" \"namespace\" • namespace-name ';'\l1188                | \"using\" \"namespace\" • nested-name-specifier namespace-name ';'\l"]
  137 -> 258 [style=solid label="IDENTIFIER"]
  137 -> 9 [style=solid label="\"::\""]
  137 -> 135 [style=solid label="\"decltype\""]
  137 -> 66 [style=dashed label="class-name"]
  137 -> 139 [style=dashed label="decltype-specifier"]
  137 -> 85 [style=dashed label="enum-name"]
  137 -> 100 [style=dashed label="namespace-alias"]
  137 -> 350 [style=dashed label="namespace-name"]
  137 -> 351 [style=dashed label="nested-name-specifier"]
  137 -> 142 [style=dashed label="simple-template-id"]
  137 -> 143 [style=dashed label="template-name"]
  137 -> 144 [style=dashed label="type-name"]
  137 -> 127 [style=dashed label="typedef-name"]
  138 [label="State 138\n\l1179 using-declarator: \"typename\" • nested-name-specifier unqualified-id\l"]
  138 -> 258 [style=solid label="IDENTIFIER"]
  138 -> 9 [style=solid label="\"::\""]
  138 -> 135 [style=solid label="\"decltype\""]
  138 -> 66 [style=dashed label="class-name"]
  138 -> 139 [style=dashed label="decltype-specifier"]
  138 -> 85 [style=dashed label="enum-name"]
  138 -> 100 [style=dashed label="namespace-alias"]
  138 -> 103 [style=dashed label="namespace-name"]
  138 -> 352 [style=dashed label="nested-name-specifier"]
  138 -> 142 [style=dashed label="simple-template-id"]
  138 -> 143 [style=dashed label="template-name"]
  138 -> 144 [style=dashed label="type-name"]
  138 -> 127 [style=dashed label="typedef-name"]
  139 [label="State 139\n\l662 nested-name-specifier: decltype-specifier • \"::\"\l"]
  139 -> 307 [style=solid label="\"::\""]
  140 [label="State 140\n\l1189 using-enum-declaration: \"using\" elaborated-enum-specifier • ';'\l"]
  140 -> 353 [style=solid label="';'"]
  141 [label="State 141\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l1180 using-declarator: nested-name-specifier • unqualified-id\l"]
  141 -> 354 [style=solid label="IDENTIFIER"]
  141 -> 355 [style=solid label="\"template\""]
  141 -> 17 [style=solid label="\"operator\""]
  141 -> 36 [style=solid label="'~'"]
  141 -> 69 [style=dashed label="conversion-function-id"]
  141 -> 96 [style=dashed label="literal-operator-id"]
  141 -> 109 [style=dashed label="operator-function-id"]
  141 -> 356 [style=dashed label="simple-template-id"]
  141 -> 121 [style=dashed label="template-id"]
  141 -> 143 [style=dashed label="template-name"]
  141 -> 357 [style=dashed label="unqualified-id"]
  142 [label="State 142\n\l146 class-name: simple-template-id •\l1125 typedef-name: simple-template-id •\l"]
  142 -> "142R146" [style=solid]
 "142R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  142 -> "142R1125d" [label="[IDENTIFIER, '+', '-', \"using\", '=', ';', \"alignas\", '(', ')', \"...\", '&', \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"::\", '[', ']', ':', '{', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"final\", \"<=>\", \"noexcept\", \"concept\", '?', \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"->\", '.', \"enum\", \"==\", \"!=\", '^', \"extern\", '<', '>', \"explicit\", \"export\", \"export-keyword\", '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", \"requires\", '~', \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\", \"override\"]", style=solid]
 "142R1125d" [label="R1125", fillcolor=5, shape=diamond, style=filled]
  143 [label="State 143\n\l997 simple-template-id: template-name • '<' '>'\l998                   | template-name • '<' template-argument-list '>'\l"]
  143 -> 342 [style=solid label="'<'"]
  144 [label="State 144\n\l660 nested-name-specifier: type-name • \"::\"\l"]
  144 -> 346 [style=solid label="\"::\""]
  145 [label="State 145\n\l1181 using-declarator-list: using-declarator •\l1182                      | using-declarator • \"...\"\l"]
  145 -> 358 [style=solid label="\"...\""]
  145 -> "145R1181" [style=solid]
 "145R1181" [label="R1181", fillcolor=3, shape=diamond, style=filled]
  146 [label="State 146\n\l1178 using-declaration: \"using\" using-declarator-list • ';'\l1183 using-declarator-list: using-declarator-list • ',' using-declarator\l1184                      | using-declarator-list • ',' using-declarator \"...\"\l"]
  146 -> 359 [style=solid label="';'"]
  146 -> 360 [style=solid label="','"]
  147 [label="State 147\n\l 15 alignment-specifier: \"alignas\" '(' • type-id ')'\l 16                    | \"alignas\" '(' • type-id \"...\" ')'\l 17                    | \"alignas\" '(' • constant-expression ')'\l 18                    | \"alignas\" '(' • constant-expression \"...\" ')'\l"]
  147 -> 1 [style=solid label="IDENTIFIER"]
  147 -> 361 [style=solid label="'+'"]
  147 -> 362 [style=solid label="'-'"]
  147 -> 363 [style=solid label="'('"]
  147 -> 364 [style=solid label="'&'"]
  147 -> 365 [style=solid label="\"::\""]
  147 -> 366 [style=solid label="'['"]
  147 -> 367 [style=solid label="\"co_await\""]
  147 -> 368 [style=solid label="'0'"]
  147 -> 369 [style=solid label="'1'"]
  147 -> 370 [style=solid label="\"0b\""]
  147 -> 371 [style=solid label="\"0B\""]
  147 -> 372 [style=solid label="'\\''"]
  147 -> 373 [style=solid label="\"false\""]
  147 -> 374 [style=solid label="\"true\""]
  147 -> 12 [style=solid label="\"class\""]
  147 -> 13 [style=solid label="\"struct\""]
  147 -> 14 [style=solid label="\"union\""]
  147 -> 375 [style=solid label="\"noexcept\""]
  147 -> 17 [style=solid label="\"operator\""]
  147 -> 18 [style=solid label="\"const\""]
  147 -> 19 [style=solid label="\"volatile\""]
  147 -> 26 [style=solid label="\"decltype\""]
  147 -> 376 [style=solid label="\"delete\""]
  147 -> 377 [style=solid label="'.'"]
  147 -> 378 [style=solid label="'2'"]
  147 -> 379 [style=solid label="'3'"]
  147 -> 380 [style=solid label="'4'"]
  147 -> 381 [style=solid label="'5'"]
  147 -> 382 [style=solid label="'6'"]
  147 -> 383 [style=solid label="'7'"]
  147 -> 384 [style=solid label="'8'"]
  147 -> 385 [style=solid label="'9'"]
  147 -> 136 [style=solid label="\"enum\""]
  147 -> 185 [style=solid label="\"u8\""]
  147 -> 186 [style=solid label="'u'"]
  147 -> 187 [style=solid label="'U'"]
  147 -> 188 [style=solid label="'L'"]
  147 -> 386 [style=solid label="'*'"]
  147 -> 203 [style=solid label="'\"'"]
  147 -> 387 [style=solid label="\"0x\""]
  147 -> 388 [style=solid label="\"0X\""]
  147 -> 389 [style=solid label="\"requires\""]
  147 -> 390 [style=solid label="\"new\""]
  147 -> 391 [style=solid label="'~'"]
  147 -> 392 [style=solid label="'!'"]
  147 -> 393 [style=solid label="\"++\""]
  147 -> 394 [style=solid label="\"--\""]
  147 -> 395 [style=solid label="\"this\""]
  147 -> 37 [style=solid label="\"auto\""]
  147 -> 396 [style=solid label="\"nullptr\""]
  147 -> 397 [style=solid label="\"dynamic_cast\""]
  147 -> 398 [style=solid label="\"static_cast\""]
  147 -> 399 [style=solid label="\"reinterpret_cast\""]
  147 -> 400 [style=solid label="\"const_cast\""]
  147 -> 401 [style=solid label="\"typeid\""]
  147 -> 38 [style=solid label="\"char\""]
  147 -> 39 [style=solid label="\"char8_t\""]
  147 -> 40 [style=solid label="\"char16_t\""]
  147 -> 41 [style=solid label="\"char32_t\""]
  147 -> 42 [style=solid label="\"wchar_t\""]
  147 -> 43 [style=solid label="\"bool\""]
  147 -> 44 [style=solid label="\"short\""]
  147 -> 45 [style=solid label="\"int\""]
  147 -> 46 [style=solid label="\"long\""]
  147 -> 47 [style=solid label="\"signed\""]
  147 -> 48 [style=solid label="\"unsigned\""]
  147 -> 49 [style=solid label="\"float\""]
  147 -> 50 [style=solid label="\"double\""]
  147 -> 51 [style=solid label="\"void\""]
  147 -> 209 [style=solid label="'R'"]
  147 -> 56 [style=solid label="\"typename\""]
  147 -> 402 [style=solid label="\"sizeof\""]
  147 -> 403 [style=solid label="\"alignof\""]
  147 -> 404 [style=dashed label="additive-expression"]
  147 -> 405 [style=dashed label="and-expression"]
  147 -> 406 [style=dashed label="await-expression"]
  147 -> 407 [style=dashed label="binary-literal"]
  147 -> 408 [style=dashed label="boolean-literal"]
  147 -> 409 [style=dashed label="cast-expression"]
  147 -> 410 [style=dashed label="character-literal"]
  147 -> 210 [style=dashed label="class-key"]
  147 -> 66 [style=dashed label="class-name"]
  147 -> 411 [style=dashed label="compare-expression"]
  147 -> 68 [style=dashed label="concept-name"]
  147 -> 412 [style=dashed label="conditional-expression"]
  147 -> 413 [style=dashed label="constant-expression"]
  147 -> 69 [style=dashed label="conversion-function-id"]
  147 -> 70 [style=dashed label="cv-qualifier"]
  147 -> 414 [style=dashed label="decimal-floating-point-literal"]
  147 -> 415 [style=dashed label="decimal-literal"]
  147 -> 77 [style=dashed label="decltype-specifier"]
  147 -> 416 [style=dashed label="delete-expression"]
  147 -> 417 [style=dashed label="digit"]
  147 -> 418 [style=dashed label="digit-sequence"]
  147 -> 80 [style=dashed label="elaborated-enum-specifier"]
  147 -> 81 [style=dashed label="elaborated-type-specifier"]
  147 -> 419 [style=dashed label="encoding-prefix"]
  147 -> 85 [style=dashed label="enum-name"]
  147 -> 420 [style=dashed label="equality-expression"]
  147 -> 421 [style=dashed label="exclusive-or-expression"]
  147 -> 422 [style=dashed label="floating-point-literal"]
  147 -> 423 [style=dashed label="fold-expression"]
  147 -> 424 [style=dashed label="fractional-constant"]
  147 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  147 -> 426 [style=dashed label="hexadecimal-literal"]
  147 -> 427 [style=dashed label="hexadecimal-prefix"]
  147 -> 428 [style=dashed label="id-expression"]
  147 -> 429 [style=dashed label="inclusive-or-expression"]
  147 -> 430 [style=dashed label="integer-literal"]
  147 -> 431 [style=dashed label="lambda-expression"]
  147 -> 432 [style=dashed label="lambda-introducer"]
  147 -> 433 [style=dashed label="literal"]
  147 -> 96 [style=dashed label="literal-operator-id"]
  147 -> 434 [style=dashed label="logical-and-expression"]
  147 -> 435 [style=dashed label="logical-or-expression"]
  147 -> 436 [style=dashed label="multiplicative-expression"]
  147 -> 100 [style=dashed label="namespace-alias"]
  147 -> 103 [style=dashed label="namespace-name"]
  147 -> 437 [style=dashed label="nested-name-specifier"]
  147 -> 438 [style=dashed label="new-expression"]
  147 -> 439 [style=dashed label="noexcept-expression"]
  147 -> 440 [style=dashed label="nonzero-digit"]
  147 -> 441 [style=dashed label="octal-literal"]
  147 -> 109 [style=dashed label="operator-function-id"]
  147 -> 110 [style=dashed label="placeholder-type-specifier"]
  147 -> 442 [style=dashed label="pm-expression"]
  147 -> 443 [style=dashed label="pointer-literal"]
  147 -> 444 [style=dashed label="postfix-expression"]
  147 -> 445 [style=dashed label="primary-expression"]
  147 -> 113 [style=dashed label="qualified-id"]
  147 -> 446 [style=dashed label="relational-expression"]
  147 -> 447 [style=dashed label="requires-expression"]
  147 -> 448 [style=dashed label="shift-expression"]
  147 -> 115 [style=dashed label="simple-template-id"]
  147 -> 449 [style=dashed label="simple-type-specifier"]
  147 -> 450 [style=dashed label="string-literal"]
  147 -> 121 [style=dashed label="template-id"]
  147 -> 216 [style=dashed label="template-name"]
  147 -> 124 [style=dashed label="type-constraint"]
  147 -> 451 [style=dashed label="type-id"]
  147 -> 125 [style=dashed label="type-name"]
  147 -> 217 [style=dashed label="type-specifier"]
  147 -> 452 [style=dashed label="type-specifier-seq"]
  147 -> 127 [style=dashed label="typedef-name"]
  147 -> 453 [style=dashed label="typename-specifier"]
  147 -> 454 [style=dashed label="unary-expression"]
  147 -> 455 [style=dashed label="unary-operator"]
  147 -> 130 [style=dashed label="unqualified-id"]
  147 -> 456 [style=dashed label="user-defined-character-literal"]
  147 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  147 -> 458 [style=dashed label="user-defined-integer-literal"]
  147 -> 459 [style=dashed label="user-defined-literal"]
  147 -> 460 [style=dashed label="user-defined-string-literal"]
  148 [label="State 148\n\l145 class-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l1154 unqualified-id: IDENTIFIER •\l"]
  148 -> "148R145" [label="[\"::\"]", style=solid]
 "148R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  148 -> "148R297d" [label="[\"::\"]", style=solid]
 "148R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R651d" [label="[\"::\"]", style=solid]
 "148R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R657d" [label="[\"::\"]", style=solid]
 "148R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R1066" [label="['<']", style=solid]
 "148R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  148 -> "148R1124d" [label="[\"::\"]", style=solid]
 "148R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R1154d" [label="[\"::\", '<']", style=solid]
 "148R1154d" [label="R1154", fillcolor=5, shape=diamond, style=filled]
  148 -> "148R1154" [label="[]", style=solid]
 "148R1154" [label="R1154", fillcolor=3, shape=diamond, style=filled]
  149 [label="State 149\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l905 ptr-operator: nested-name-specifier • '*'\l906             | nested-name-specifier • '*' attribute-specifier-seq\l907             | nested-name-specifier • '*' cv-qualifier-seq\l908             | nested-name-specifier • '*' attribute-specifier-seq cv-qualifier-seq\l913 qualified-id: nested-name-specifier • unqualified-id\l914             | nested-name-specifier • \"template\" unqualified-id\l"]
  149 -> 354 [style=solid label="IDENTIFIER"]
  149 -> 461 [style=solid label="\"template\""]
  149 -> 17 [style=solid label="\"operator\""]
  149 -> 327 [style=solid label="'*'"]
  149 -> 36 [style=solid label="'~'"]
  149 -> 69 [style=dashed label="conversion-function-id"]
  149 -> 96 [style=dashed label="literal-operator-id"]
  149 -> 109 [style=dashed label="operator-function-id"]
  149 -> 356 [style=dashed label="simple-template-id"]
  149 -> 121 [style=dashed label="template-id"]
  149 -> 143 [style=dashed label="template-name"]
  149 -> 332 [style=dashed label="unqualified-id"]
  150 [label="State 150\n\l727 noptr-declarator: noptr-declarator • parameters-and-qualifiers\l728                 | noptr-declarator • '[' ']'\l729                 | noptr-declarator • '[' constant-expression ']'\l730                 | noptr-declarator • '[' ']' attribute-specifier-seq\l731                 | noptr-declarator • '[' constant-expression ']' attribute-specifier-seq\l895 ptr-declarator: noptr-declarator •\l"]
  150 -> 333 [style=solid label="'('"]
  150 -> 334 [style=solid label="'['"]
  150 -> 462 [style=dashed label="parameters-and-qualifiers"]
  150 -> "150R895d" [label="['(']", style=solid]
 "150R895d" [label="R895", fillcolor=5, shape=diamond, style=filled]
  150 -> "150R895" [style=solid]
 "150R895" [label="R895", fillcolor=3, shape=diamond, style=filled]
  151 [label="State 151\n\l732 noptr-declarator: '(' ptr-declarator • ')'\l"]
  151 -> 463 [style=solid label="')'"]
  152 [label="State 152\n\l231 declarator-id: \"...\" id-expression •\l"]
  152 -> "152R231" [style=solid]
 "152R231" [label="R231", fillcolor=3, shape=diamond, style=filled]
  153 [label="State 153\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l913 qualified-id: nested-name-specifier • unqualified-id\l914             | nested-name-specifier • \"template\" unqualified-id\l"]
  153 -> 354 [style=solid label="IDENTIFIER"]
  153 -> 461 [style=solid label="\"template\""]
  153 -> 17 [style=solid label="\"operator\""]
  153 -> 36 [style=solid label="'~'"]
  153 -> 69 [style=dashed label="conversion-function-id"]
  153 -> 96 [style=dashed label="literal-operator-id"]
  153 -> 109 [style=dashed label="operator-function-id"]
  153 -> 356 [style=dashed label="simple-template-id"]
  153 -> 121 [style=dashed label="template-id"]
  153 -> 143 [style=dashed label="template-name"]
  153 -> 332 [style=dashed label="unqualified-id"]
  154 [label="State 154\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l902 ptr-operator: '&' attribute-specifier-seq •\l"]
  154 -> 4 [style=solid label="\"alignas\""]
  154 -> 10 [style=solid label="'['"]
  154 -> 58 [style=dashed label="alignment-specifier"]
  154 -> 265 [style=dashed label="attribute-specifier"]
  154 -> "154R902d" [label="[\"alignas\", '[']", style=solid]
 "154R902d" [label="R902", fillcolor=5, shape=diamond, style=filled]
  154 -> "154R902" [style=solid]
 "154R902" [label="R902", fillcolor=3, shape=diamond, style=filled]
  155 [label="State 155\n\l 22 asm-declaration: \"asm\" '(' • string-literal ')' ';'\l"]
  155 -> 185 [style=solid label="\"u8\""]
  155 -> 186 [style=solid label="'u'"]
  155 -> 187 [style=solid label="'U'"]
  155 -> 188 [style=solid label="'L'"]
  155 -> 203 [style=solid label="'\"'"]
  155 -> 209 [style=solid label="'R'"]
  155 -> 212 [style=dashed label="encoding-prefix"]
  155 -> 464 [style=dashed label="string-literal"]
  156 [label="State 156\n\l 50 attribute-specifier: '[' '[' • attribute-list ']' ']'\l 51                    | '[' '[' • attribute-using-prefix attribute-list ']' ']'\l"]
  156 -> 465 [style=solid label="IDENTIFIER"]
  156 -> 466 [style=solid label="\"using\""]
  156 -> 467 [style=dashed label="attribute"]
  156 -> 468 [style=dashed label="attribute-list"]
  156 -> 469 [style=dashed label="attribute-namespace"]
  156 -> 470 [style=dashed label="attribute-scoped-token"]
  156 -> 471 [style=dashed label="attribute-token"]
  156 -> 472 [style=dashed label="attribute-using-prefix"]
  157 [label="State 157\n\l324 explicit-specialization: \"template\" '<' • '>' declaration\l1059 template-head: \"template\" '<' • template-parameter-list '>'\l1060              | \"template\" '<' • template-parameter-list '>' requires-clause\l"]
  157 -> 161 [style=solid label="IDENTIFIER"]
  157 -> 4 [style=solid label="\"alignas\""]
  157 -> 9 [style=solid label="\"::\""]
  157 -> 10 [style=solid label="'['"]
  157 -> 11 [style=solid label="\"virtual\""]
  157 -> 473 [style=solid label="\"class\""]
  157 -> 13 [style=solid label="\"struct\""]
  157 -> 14 [style=solid label="\"union\""]
  157 -> 474 [style=solid label="\"template\""]
  157 -> 18 [style=solid label="\"const\""]
  157 -> 19 [style=solid label="\"volatile\""]
  157 -> 20 [style=solid label="\"friend\""]
  157 -> 21 [style=solid label="\"typedef\""]
  157 -> 22 [style=solid label="\"constexpr\""]
  157 -> 23 [style=solid label="\"consteval\""]
  157 -> 24 [style=solid label="\"constinit\""]
  157 -> 263 [style=solid label="\"inline\""]
  157 -> 26 [style=solid label="\"decltype\""]
  157 -> 27 [style=solid label="\"enum\""]
  157 -> 264 [style=solid label="\"extern\""]
  157 -> 475 [style=solid label="'>'"]
  157 -> 29 [style=solid label="\"explicit\""]
  157 -> 476 [style=solid label="\"this\""]
  157 -> 37 [style=solid label="\"auto\""]
  157 -> 38 [style=solid label="\"char\""]
  157 -> 39 [style=solid label="\"char8_t\""]
  157 -> 40 [style=solid label="\"char16_t\""]
  157 -> 41 [style=solid label="\"char32_t\""]
  157 -> 42 [style=solid label="\"wchar_t\""]
  157 -> 43 [style=solid label="\"bool\""]
  157 -> 44 [style=solid label="\"short\""]
  157 -> 45 [style=solid label="\"int\""]
  157 -> 46 [style=solid label="\"long\""]
  157 -> 47 [style=solid label="\"signed\""]
  157 -> 48 [style=solid label="\"unsigned\""]
  157 -> 49 [style=solid label="\"float\""]
  157 -> 50 [style=solid label="\"double\""]
  157 -> 51 [style=solid label="\"void\""]
  157 -> 53 [style=solid label="\"static\""]
  157 -> 54 [style=solid label="\"thread_local\""]
  157 -> 55 [style=solid label="\"mutable\""]
  157 -> 477 [style=solid label="\"typename\""]
  157 -> 58 [style=dashed label="alignment-specifier"]
  157 -> 61 [style=dashed label="attribute-specifier"]
  157 -> 478 [style=dashed label="attribute-specifier-seq"]
  157 -> 64 [style=dashed label="class-head"]
  157 -> 65 [style=dashed label="class-key"]
  157 -> 66 [style=dashed label="class-name"]
  157 -> 67 [style=dashed label="class-specifier"]
  157 -> 68 [style=dashed label="concept-name"]
  157 -> 70 [style=dashed label="cv-qualifier"]
  157 -> 71 [style=dashed label="decl-specifier"]
  157 -> 479 [style=dashed label="decl-specifier-seq"]
  157 -> 77 [style=dashed label="decltype-specifier"]
  157 -> 79 [style=dashed label="defining-type-specifier"]
  157 -> 80 [style=dashed label="elaborated-enum-specifier"]
  157 -> 81 [style=dashed label="elaborated-type-specifier"]
  157 -> 83 [style=dashed label="enum-head"]
  157 -> 268 [style=dashed label="enum-key"]
  157 -> 85 [style=dashed label="enum-name"]
  157 -> 86 [style=dashed label="enum-specifier"]
  157 -> 269 [style=dashed label="explicit-specifier"]
  157 -> 92 [style=dashed label="function-specifier"]
  157 -> 100 [style=dashed label="namespace-alias"]
  157 -> 103 [style=dashed label="namespace-name"]
  157 -> 213 [style=dashed label="nested-name-specifier"]
  157 -> 480 [style=dashed label="parameter-declaration"]
  157 -> 110 [style=dashed label="placeholder-type-specifier"]
  157 -> 142 [style=dashed label="simple-template-id"]
  157 -> 116 [style=dashed label="simple-type-specifier"]
  157 -> 118 [style=dashed label="storage-class-specifier"]
  157 -> 481 [style=dashed label="template-head"]
  157 -> 216 [style=dashed label="template-name"]
  157 -> 482 [style=dashed label="template-parameter"]
  157 -> 483 [style=dashed label="template-parameter-list"]
  157 -> 484 [style=dashed label="type-constraint"]
  157 -> 125 [style=dashed label="type-name"]
  157 -> 485 [style=dashed label="type-parameter"]
  157 -> 486 [style=dashed label="type-parameter-key"]
  157 -> 126 [style=dashed label="type-specifier"]
  157 -> 127 [style=dashed label="typedef-name"]
  157 -> 128 [style=dashed label="typename-specifier"]
  158 [label="State 158\n\l334 export-declaration: \"export-keyword\" • module-import-declaration\l"]
  158 -> 34 [style=solid label="\"import-keyword\""]
  158 -> 232 [style=dashed label="module-import-declaration"]
  159 [label="State 159\n\l323 explicit-instantiation: \"template\" declaration •\l"]
  159 -> "159R323" [style=solid]
 "159R323" [label="R323", fillcolor=3, shape=diamond, style=filled]
  160 [label="State 160\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l904 ptr-operator: \"&&\" attribute-specifier-seq •\l"]
  160 -> 4 [style=solid label="\"alignas\""]
  160 -> 10 [style=solid label="'['"]
  160 -> 58 [style=dashed label="alignment-specifier"]
  160 -> 265 [style=dashed label="attribute-specifier"]
  160 -> "160R904d" [label="[\"alignas\", '[']", style=solid]
 "160R904d" [label="R904", fillcolor=5, shape=diamond, style=filled]
  160 -> "160R904" [style=solid]
 "160R904" [label="R904", fillcolor=3, shape=diamond, style=filled]
  161 [label="State 161\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l"]
  161 -> "161R145" [style=solid]
 "161R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  161 -> "161R163d" [label="[IDENTIFIER, '=', ';', \"...\", ',', \"decltype\", '<', '>', \"auto\"]", style=solid]
 "161R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  161 -> "161R297d" [label="[IDENTIFIER, '+', '-', \"using\", '=', ';', \"alignas\", '(', ')', \"...\", '&', \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"::\", '[', ']', ':', '{', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"final\", \"<=>\", \"noexcept\", \"concept\", '?', \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"->\", '.', \"enum\", \"==\", \"!=\", '^', \"extern\", '<', '>', \"explicit\", \"export\", \"export-keyword\", '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", \"requires\", '~', \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\", \"override\"]", style=solid]
 "161R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  161 -> "161R651d" [label="[\"::\"]", style=solid]
 "161R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  161 -> "161R657d" [label="[\"::\"]", style=solid]
 "161R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  161 -> "161R1066d" [label="[IDENTIFIER, '+', '-', \"using\", '=', ';', \"alignas\", '(', ')', \"...\", '&', \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"::\", '[', ']', ':', '{', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"final\", \"<=>\", \"noexcept\", \"concept\", '?', \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"->\", '.', \"enum\", \"==\", \"!=\", '^', \"extern\", '<', '>', \"explicit\", \"export\", \"export-keyword\", '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", \"requires\", '~', \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\", \"override\"]", style=solid]
 "161R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  161 -> "161R1124d" [label="[IDENTIFIER, '+', '-', \"using\", '=', ';', \"alignas\", '(', ')', \"...\", '&', \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"::\", '[', ']', ':', '{', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"final\", \"<=>\", \"noexcept\", \"concept\", '?', \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"->\", '.', \"enum\", \"==\", \"!=\", '^', \"extern\", '<', '>', \"explicit\", \"export\", \"export-keyword\", '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", \"requires\", '~', \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\", \"override\"]", style=solid]
 "161R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  162 [label="State 162\n\l773 overloadable-operator: '+' •\l"]
  162 -> "162R773" [style=solid]
 "162R773" [label="R773", fillcolor=3, shape=diamond, style=filled]
  163 [label="State 163\n\l774 overloadable-operator: '-' •\l"]
  163 -> "163R774" [style=solid]
 "163R774" [label="R774", fillcolor=3, shape=diamond, style=filled]
  164 [label="State 164\n\l781 overloadable-operator: '=' •\l"]
  164 -> "164R781" [style=solid]
 "164R781" [label="R781", fillcolor=3, shape=diamond, style=filled]
  165 [label="State 165\n\l767 overloadable-operator: '(' • ')'\l"]
  165 -> 487 [style=solid label="')'"]
  166 [label="State 166\n\l779 overloadable-operator: '&' •\l"]
  166 -> "166R779" [style=solid]
 "166R779" [label="R779", fillcolor=3, shape=diamond, style=filled]
  167 [label="State 167\n\l784 overloadable-operator: \"*=\" •\l"]
  167 -> "167R784" [style=solid]
 "167R784" [label="R784", fillcolor=3, shape=diamond, style=filled]
  168 [label="State 168\n\l785 overloadable-operator: \"/=\" •\l"]
  168 -> "168R785" [style=solid]
 "168R785" [label="R785", fillcolor=3, shape=diamond, style=filled]
  169 [label="State 169\n\l786 overloadable-operator: \"%=\" •\l"]
  169 -> "169R786" [style=solid]
 "169R786" [label="R786", fillcolor=3, shape=diamond, style=filled]
  170 [label="State 170\n\l782 overloadable-operator: \"+=\" •\l"]
  170 -> "170R782" [style=solid]
 "170R782" [label="R782", fillcolor=3, shape=diamond, style=filled]
  171 [label="State 171\n\l783 overloadable-operator: \"-=\" •\l"]
  171 -> "171R783" [style=solid]
 "171R783" [label="R783", fillcolor=3, shape=diamond, style=filled]
  172 [label="State 172\n\l802 overloadable-operator: \">>=\" •\l"]
  172 -> "172R802" [style=solid]
 "172R802" [label="R802", fillcolor=3, shape=diamond, style=filled]
  173 [label="State 173\n\l801 overloadable-operator: \"<<=\" •\l"]
  173 -> "173R801" [style=solid]
 "173R801" [label="R801", fillcolor=3, shape=diamond, style=filled]
  174 [label="State 174\n\l788 overloadable-operator: \"&=\" •\l"]
  174 -> "174R788" [style=solid]
 "174R788" [label="R788", fillcolor=3, shape=diamond, style=filled]
  175 [label="State 175\n\l787 overloadable-operator: \"^=\" •\l"]
  175 -> "175R787" [style=solid]
 "175R787" [label="R787", fillcolor=3, shape=diamond, style=filled]
  176 [label="State 176\n\l789 overloadable-operator: \"|=\" •\l"]
  176 -> "176R789" [style=solid]
 "176R789" [label="R789", fillcolor=3, shape=diamond, style=filled]
  177 [label="State 177\n\l805 overloadable-operator: ',' •\l"]
  177 -> "177R805" [style=solid]
 "177R805" [label="R805", fillcolor=3, shape=diamond, style=filled]
  178 [label="State 178\n\l768 overloadable-operator: '[' • ']'\l"]
  178 -> 488 [style=solid label="']'"]
  179 [label="State 179\n\l766 overloadable-operator: \"co_await\" •\l"]
  179 -> "179R766" [style=solid]
 "179R766" [label="R766", fillcolor=3, shape=diamond, style=filled]
  180 [label="State 180\n\l796 overloadable-operator: \"<=>\" •\l"]
  180 -> "180R796" [style=solid]
 "180R796" [label="R796", fillcolor=3, shape=diamond, style=filled]
  181 [label="State 181\n\l797 overloadable-operator: \"&&\" •\l"]
  181 -> "181R797" [style=solid]
 "181R797" [label="R797", fillcolor=3, shape=diamond, style=filled]
  182 [label="State 182\n\l798 overloadable-operator: \"||\" •\l"]
  182 -> "182R798" [style=solid]
 "182R798" [label="R798", fillcolor=3, shape=diamond, style=filled]
  183 [label="State 183\n\l769 overloadable-operator: \"->\" •\l"]
  183 -> "183R769" [style=solid]
 "183R769" [label="R769", fillcolor=3, shape=diamond, style=filled]
  184 [label="State 184\n\l763 overloadable-operator: \"delete\" •\l765                      | \"delete\" • '[' ']'\l"]
  184 -> 489 [style=solid label="'['"]
  184 -> "184R763d" [label="['[']", style=solid]
 "184R763d" [label="R763", fillcolor=5, shape=diamond, style=filled]
  184 -> "184R763" [style=solid]
 "184R763" [label="R763", fillcolor=3, shape=diamond, style=filled]
  185 [label="State 185\n\l279 encoding-prefix: \"u8\" •\l"]
  185 -> "185R279" [style=solid]
 "185R279" [label="R279", fillcolor=3, shape=diamond, style=filled]
  186 [label="State 186\n\l280 encoding-prefix: 'u' •\l"]
  186 -> "186R280" [style=solid]
 "186R280" [label="R280", fillcolor=3, shape=diamond, style=filled]
  187 [label="State 187\n\l281 encoding-prefix: 'U' •\l"]
  187 -> "187R281" [style=solid]
 "187R281" [label="R281", fillcolor=3, shape=diamond, style=filled]
  188 [label="State 188\n\l282 encoding-prefix: 'L' •\l"]
  188 -> "188R282" [style=solid]
 "188R282" [label="R282", fillcolor=3, shape=diamond, style=filled]
  189 [label="State 189\n\l790 overloadable-operator: \"==\" •\l"]
  189 -> "189R790" [style=solid]
 "189R790" [label="R790", fillcolor=3, shape=diamond, style=filled]
  190 [label="State 190\n\l791 overloadable-operator: \"!=\" •\l"]
  190 -> "190R791" [style=solid]
 "190R791" [label="R791", fillcolor=3, shape=diamond, style=filled]
  191 [label="State 191\n\l778 overloadable-operator: '^' •\l"]
  191 -> "191R778" [style=solid]
 "191R778" [label="R778", fillcolor=3, shape=diamond, style=filled]
  192 [label="State 192\n\l792 overloadable-operator: '<' •\l"]
  192 -> "192R792" [style=solid]
 "192R792" [label="R792", fillcolor=3, shape=diamond, style=filled]
  193 [label="State 193\n\l793 overloadable-operator: '>' •\l"]
  193 -> "193R793" [style=solid]
 "193R793" [label="R793", fillcolor=3, shape=diamond, style=filled]
  194 [label="State 194\n\l775 overloadable-operator: '*' •\l"]
  194 -> "194R775" [style=solid]
 "194R775" [label="R775", fillcolor=3, shape=diamond, style=filled]
  195 [label="State 195\n\l776 overloadable-operator: '/' •\l"]
  195 -> "195R776" [style=solid]
 "195R776" [label="R776", fillcolor=3, shape=diamond, style=filled]
  196 [label="State 196\n\l777 overloadable-operator: '%' •\l"]
  196 -> "196R777" [style=solid]
 "196R777" [label="R777", fillcolor=3, shape=diamond, style=filled]
  197 [label="State 197\n\l780 overloadable-operator: '|' •\l"]
  197 -> "197R780" [style=solid]
 "197R780" [label="R780", fillcolor=3, shape=diamond, style=filled]
  198 [label="State 198\n\l799 overloadable-operator: \"<<\" •\l"]
  198 -> "198R799" [style=solid]
 "198R799" [label="R799", fillcolor=3, shape=diamond, style=filled]
  199 [label="State 199\n\l800 overloadable-operator: \">>\" •\l"]
  199 -> "199R800" [style=solid]
 "199R800" [label="R800", fillcolor=3, shape=diamond, style=filled]
  200 [label="State 200\n\l794 overloadable-operator: \"<=\" •\l"]
  200 -> "200R794" [style=solid]
 "200R794" [label="R794", fillcolor=3, shape=diamond, style=filled]
  201 [label="State 201\n\l795 overloadable-operator: \">=\" •\l"]
  201 -> "201R795" [style=solid]
 "201R795" [label="R795", fillcolor=3, shape=diamond, style=filled]
  202 [label="State 202\n\l770 overloadable-operator: \"->*\" •\l"]
  202 -> "202R770" [style=solid]
 "202R770" [label="R770", fillcolor=3, shape=diamond, style=filled]
  203 [label="State 203\n\l1045 string-literal: '\"' • '\"'\l1047               | '\"' • s-char-sequence '\"'\l"]
  203 -> 490 [style=solid label="EXCEPT_THE_QUOTATION_MARK_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER"]
  203 -> 491 [style=solid label="'\\\\'"]
  203 -> 492 [style=solid label="'\"'"]
  203 -> 493 [style=solid label="\"\\\\x\""]
  203 -> 494 [style=solid label="\"\\\\u\""]
  203 -> 495 [style=solid label="\"\\\\U\""]
  203 -> 496 [style=dashed label="basic-s-char"]
  203 -> 497 [style=dashed label="conditional-escape-sequence"]
  203 -> 498 [style=dashed label="escape-sequence"]
  203 -> 499 [style=dashed label="hexadecimal-escape-sequence"]
  203 -> 500 [style=dashed label="numeric-escape-sequence"]
  203 -> 501 [style=dashed label="octal-escape-sequence"]
  203 -> 502 [style=dashed label="s-char"]
  203 -> 503 [style=dashed label="s-char-sequence"]
  203 -> 504 [style=dashed label="simple-escape-sequence"]
  203 -> 505 [style=dashed label="universal-character-name"]
  204 [label="State 204\n\l762 overloadable-operator: \"new\" •\l764                      | \"new\" • '[' ']'\l"]
  204 -> 506 [style=solid label="'['"]
  204 -> "204R762d" [label="['[']", style=solid]
 "204R762d" [label="R762", fillcolor=5, shape=diamond, style=filled]
  204 -> "204R762" [style=solid]
 "204R762" [label="R762", fillcolor=3, shape=diamond, style=filled]
  205 [label="State 205\n\l771 overloadable-operator: '~' •\l"]
  205 -> "205R771" [style=solid]
 "205R771" [label="R771", fillcolor=3, shape=diamond, style=filled]
  206 [label="State 206\n\l772 overloadable-operator: '!' •\l"]
  206 -> "206R772" [style=solid]
 "206R772" [label="R772", fillcolor=3, shape=diamond, style=filled]
  207 [label="State 207\n\l803 overloadable-operator: \"++\" •\l"]
  207 -> "207R803" [style=solid]
 "207R803" [label="R803", fillcolor=3, shape=diamond, style=filled]
  208 [label="State 208\n\l804 overloadable-operator: \"--\" •\l"]
  208 -> "208R804" [style=solid]
 "208R804" [label="R804", fillcolor=3, shape=diamond, style=filled]
  209 [label="State 209\n\l1049 string-literal: 'R' • raw-string\l"]
  209 -> 507 [style=solid label="'\"'"]
  209 -> 508 [style=dashed label="raw-string"]
  210 [label="State 210\n\l267 elaborated-type-specifier: class-key • IDENTIFIER\l268                          | class-key • attribute-specifier-seq IDENTIFIER\l269                          | class-key • nested-name-specifier IDENTIFIER\l270                          | class-key • attribute-specifier-seq nested-name-specifier IDENTIFIER\l271                          | class-key • simple-template-id\l272                          | class-key • nested-name-specifier simple-template-id\l273                          | class-key • nested-name-specifier \"template\" simple-template-id\l"]
  210 -> 271 [style=solid label="IDENTIFIER"]
  210 -> 4 [style=solid label="\"alignas\""]
  210 -> 9 [style=solid label="\"::\""]
  210 -> 10 [style=solid label="'['"]
  210 -> 135 [style=solid label="\"decltype\""]
  210 -> 58 [style=dashed label="alignment-specifier"]
  210 -> 61 [style=dashed label="attribute-specifier"]
  210 -> 509 [style=dashed label="attribute-specifier-seq"]
  210 -> 66 [style=dashed label="class-name"]
  210 -> 139 [style=dashed label="decltype-specifier"]
  210 -> 85 [style=dashed label="enum-name"]
  210 -> 100 [style=dashed label="namespace-alias"]
  210 -> 103 [style=dashed label="namespace-name"]
  210 -> 510 [style=dashed label="nested-name-specifier"]
  210 -> 278 [style=dashed label="simple-template-id"]
  210 -> 143 [style=dashed label="template-name"]
  210 -> 144 [style=dashed label="type-name"]
  210 -> 127 [style=dashed label="typedef-name"]
  211 [label="State 211\n\l179 conversion-function-id: \"operator\" conversion-type-id •\l"]
  211 -> "211R179" [style=solid]
 "211R179" [label="R179", fillcolor=3, shape=diamond, style=filled]
  212 [label="State 212\n\l1044 string-literal: encoding-prefix • '\"' '\"'\l1046               | encoding-prefix • '\"' s-char-sequence '\"'\l1048               | encoding-prefix • 'R' raw-string\l"]
  212 -> 511 [style=solid label="'\"'"]
  212 -> 512 [style=solid label="'R'"]
  213 [label="State 213\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l999 simple-type-specifier: nested-name-specifier • type-name\l1001                      | nested-name-specifier • \"template\" simple-template-id\l1004                      | nested-name-specifier • template-name\l1084 type-constraint: nested-name-specifier • concept-name\l1086                | nested-name-specifier • concept-name '<' '>'\l1088                | nested-name-specifier • concept-name '<' template-argument-list '>'\l"]
  213 -> 513 [style=solid label="IDENTIFIER"]
  213 -> 514 [style=solid label="\"template\""]
  213 -> 66 [style=dashed label="class-name"]
  213 -> 328 [style=dashed label="concept-name"]
  213 -> 85 [style=dashed label="enum-name"]
  213 -> 515 [style=dashed label="simple-template-id"]
  213 -> 330 [style=dashed label="template-name"]
  213 -> 331 [style=dashed label="type-name"]
  213 -> 127 [style=dashed label="typedef-name"]
  214 [label="State 214\n\l759 operator-function-id: \"operator\" overloadable-operator •\l760                     | \"operator\" overloadable-operator • '<' '>'\l761                     | \"operator\" overloadable-operator • '<' template-argument-list '>'\l"]
  214 -> 516 [style=solid label="'<'"]
  214 -> "214R759d" [label="['<']", style=solid]
 "214R759d" [label="R759", fillcolor=5, shape=diamond, style=filled]
  214 -> "214R759" [style=solid]
 "214R759" [label="R759", fillcolor=3, shape=diamond, style=filled]
  215 [label="State 215\n\l565 literal-operator-id: \"operator\" string-literal • IDENTIFIER\l1177 user-defined-string-literal: string-literal • ud-suffix\l"]
  215 -> 517 [style=solid label="IDENTIFIER"]
  215 -> 518 [style=dashed label="ud-suffix"]
  216 [label="State 216\n\l997 simple-template-id: template-name • '<' '>'\l998                   | template-name • '<' template-argument-list '>'\l1005 simple-type-specifier: template-name •\l"]
  216 -> 342 [style=solid label="'<'"]
  216 -> "216R1005d" [label="['<']", style=solid]
 "216R1005d" [label="R1005", fillcolor=5, shape=diamond, style=filled]
  216 -> "216R1005" [style=solid]
 "216R1005" [label="R1005", fillcolor=3, shape=diamond, style=filled]
  217 [label="State 217\n\l1121 type-specifier-seq: type-specifier •\l1122                   | type-specifier • attribute-specifier-seq\l1123                   | type-specifier • type-specifier-seq\l"]
  217 -> 161 [style=solid label="IDENTIFIER"]
  217 -> 4 [style=solid label="\"alignas\""]
  217 -> 9 [style=solid label="\"::\""]
  217 -> 10 [style=solid label="'['"]
  217 -> 12 [style=solid label="\"class\""]
  217 -> 13 [style=solid label="\"struct\""]
  217 -> 14 [style=solid label="\"union\""]
  217 -> 18 [style=solid label="\"const\""]
  217 -> 19 [style=solid label="\"volatile\""]
  217 -> 26 [style=solid label="\"decltype\""]
  217 -> 136 [style=solid label="\"enum\""]
  217 -> 37 [style=solid label="\"auto\""]
  217 -> 38 [style=solid label="\"char\""]
  217 -> 39 [style=solid label="\"char8_t\""]
  217 -> 40 [style=solid label="\"char16_t\""]
  217 -> 41 [style=solid label="\"char32_t\""]
  217 -> 42 [style=solid label="\"wchar_t\""]
  217 -> 43 [style=solid label="\"bool\""]
  217 -> 44 [style=solid label="\"short\""]
  217 -> 45 [style=solid label="\"int\""]
  217 -> 46 [style=solid label="\"long\""]
  217 -> 47 [style=solid label="\"signed\""]
  217 -> 48 [style=solid label="\"unsigned\""]
  217 -> 49 [style=solid label="\"float\""]
  217 -> 50 [style=solid label="\"double\""]
  217 -> 51 [style=solid label="\"void\""]
  217 -> 56 [style=solid label="\"typename\""]
  217 -> 58 [style=dashed label="alignment-specifier"]
  217 -> 61 [style=dashed label="attribute-specifier"]
  217 -> 519 [style=dashed label="attribute-specifier-seq"]
  217 -> 210 [style=dashed label="class-key"]
  217 -> 66 [style=dashed label="class-name"]
  217 -> 68 [style=dashed label="concept-name"]
  217 -> 70 [style=dashed label="cv-qualifier"]
  217 -> 77 [style=dashed label="decltype-specifier"]
  217 -> 80 [style=dashed label="elaborated-enum-specifier"]
  217 -> 81 [style=dashed label="elaborated-type-specifier"]
  217 -> 85 [style=dashed label="enum-name"]
  217 -> 100 [style=dashed label="namespace-alias"]
  217 -> 103 [style=dashed label="namespace-name"]
  217 -> 213 [style=dashed label="nested-name-specifier"]
  217 -> 110 [style=dashed label="placeholder-type-specifier"]
  217 -> 142 [style=dashed label="simple-template-id"]
  217 -> 116 [style=dashed label="simple-type-specifier"]
  217 -> 216 [style=dashed label="template-name"]
  217 -> 124 [style=dashed label="type-constraint"]
  217 -> 125 [style=dashed label="type-name"]
  217 -> 217 [style=dashed label="type-specifier"]
  217 -> 520 [style=dashed label="type-specifier-seq"]
  217 -> 127 [style=dashed label="typedef-name"]
  217 -> 128 [style=dashed label="typename-specifier"]
  217 -> "217R1121d" [label="[IDENTIFIER, \"alignas\", \"::\", '[', \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"decltype\", \"enum\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"typename\"]", style=solid]
 "217R1121d" [label="R1121", fillcolor=5, shape=diamond, style=filled]
  217 -> "217R1121" [style=solid]
 "217R1121" [label="R1121", fillcolor=3, shape=diamond, style=filled]
  218 [label="State 218\n\l180 conversion-type-id: type-specifier-seq •\l181                   | type-specifier-seq • conversion-declarator\l"]
  218 -> 258 [style=solid label="IDENTIFIER"]
  218 -> 7 [style=solid label="'&'"]
  218 -> 9 [style=solid label="\"::\""]
  218 -> 16 [style=solid label="\"&&\""]
  218 -> 135 [style=solid label="\"decltype\""]
  218 -> 32 [style=solid label="'*'"]
  218 -> 66 [style=dashed label="class-name"]
  218 -> 521 [style=dashed label="conversion-declarator"]
  218 -> 139 [style=dashed label="decltype-specifier"]
  218 -> 85 [style=dashed label="enum-name"]
  218 -> 100 [style=dashed label="namespace-alias"]
  218 -> 103 [style=dashed label="namespace-name"]
  218 -> 522 [style=dashed label="nested-name-specifier"]
  218 -> 523 [style=dashed label="ptr-operator"]
  218 -> 142 [style=dashed label="simple-template-id"]
  218 -> 143 [style=dashed label="template-name"]
  218 -> 144 [style=dashed label="type-name"]
  218 -> 127 [style=dashed label="typedef-name"]
  218 -> "218R180d" [label="[IDENTIFIER, '&', \"::\", \"&&\", \"decltype\", '*']", style=solid]
 "218R180d" [label="R180", fillcolor=5, shape=diamond, style=filled]
  218 -> "218R180" [style=solid]
 "218R180" [label="R180", fillcolor=3, shape=diamond, style=filled]
  219 [label="State 219\n\l566 literal-operator-id: \"operator\" user-defined-string-literal •\l"]
  219 -> "219R566" [style=solid]
 "219R566" [label="R566", fillcolor=3, shape=diamond, style=filled]
  220 [label="State 220\n\l647 named-namespace-definition: \"inline\" \"namespace\" • IDENTIFIER '{' namespace-body '}'\l649                           | \"inline\" \"namespace\" • attribute-specifier-seq IDENTIFIER '{' namespace-body '}'\l1150 unnamed-namespace-definition: \"inline\" \"namespace\" • '{' namespace-body '}'\l1152                             | \"inline\" \"namespace\" • attribute-specifier-seq '{' namespace-body '}'\l"]
  220 -> 524 [style=solid label="IDENTIFIER"]
  220 -> 4 [style=solid label="\"alignas\""]
  220 -> 10 [style=solid label="'['"]
  220 -> 525 [style=solid label="'{'"]
  220 -> 58 [style=dashed label="alignment-specifier"]
  220 -> 61 [style=dashed label="attribute-specifier"]
  220 -> 526 [style=dashed label="attribute-specifier-seq"]
  221 [label="State 221\n\l233 decltype-specifier: \"decltype\" '(' • expression ')'\l855 placeholder-type-specifier: \"decltype\" '(' • \"auto\" ')'\l"]
  221 -> 1 [style=solid label="IDENTIFIER"]
  221 -> 361 [style=solid label="'+'"]
  221 -> 362 [style=solid label="'-'"]
  221 -> 363 [style=solid label="'('"]
  221 -> 364 [style=solid label="'&'"]
  221 -> 365 [style=solid label="\"::\""]
  221 -> 366 [style=solid label="'['"]
  221 -> 367 [style=solid label="\"co_await\""]
  221 -> 368 [style=solid label="'0'"]
  221 -> 369 [style=solid label="'1'"]
  221 -> 370 [style=solid label="\"0b\""]
  221 -> 371 [style=solid label="\"0B\""]
  221 -> 372 [style=solid label="'\\''"]
  221 -> 373 [style=solid label="\"false\""]
  221 -> 374 [style=solid label="\"true\""]
  221 -> 375 [style=solid label="\"noexcept\""]
  221 -> 17 [style=solid label="\"operator\""]
  221 -> 26 [style=solid label="\"decltype\""]
  221 -> 376 [style=solid label="\"delete\""]
  221 -> 377 [style=solid label="'.'"]
  221 -> 378 [style=solid label="'2'"]
  221 -> 379 [style=solid label="'3'"]
  221 -> 380 [style=solid label="'4'"]
  221 -> 381 [style=solid label="'5'"]
  221 -> 382 [style=solid label="'6'"]
  221 -> 383 [style=solid label="'7'"]
  221 -> 384 [style=solid label="'8'"]
  221 -> 385 [style=solid label="'9'"]
  221 -> 185 [style=solid label="\"u8\""]
  221 -> 186 [style=solid label="'u'"]
  221 -> 187 [style=solid label="'U'"]
  221 -> 188 [style=solid label="'L'"]
  221 -> 386 [style=solid label="'*'"]
  221 -> 203 [style=solid label="'\"'"]
  221 -> 387 [style=solid label="\"0x\""]
  221 -> 388 [style=solid label="\"0X\""]
  221 -> 389 [style=solid label="\"requires\""]
  221 -> 390 [style=solid label="\"new\""]
  221 -> 391 [style=solid label="'~'"]
  221 -> 392 [style=solid label="'!'"]
  221 -> 393 [style=solid label="\"++\""]
  221 -> 394 [style=solid label="\"--\""]
  221 -> 395 [style=solid label="\"this\""]
  221 -> 527 [style=solid label="\"auto\""]
  221 -> 396 [style=solid label="\"nullptr\""]
  221 -> 397 [style=solid label="\"dynamic_cast\""]
  221 -> 398 [style=solid label="\"static_cast\""]
  221 -> 399 [style=solid label="\"reinterpret_cast\""]
  221 -> 400 [style=solid label="\"const_cast\""]
  221 -> 401 [style=solid label="\"typeid\""]
  221 -> 38 [style=solid label="\"char\""]
  221 -> 39 [style=solid label="\"char8_t\""]
  221 -> 40 [style=solid label="\"char16_t\""]
  221 -> 41 [style=solid label="\"char32_t\""]
  221 -> 42 [style=solid label="\"wchar_t\""]
  221 -> 43 [style=solid label="\"bool\""]
  221 -> 44 [style=solid label="\"short\""]
  221 -> 45 [style=solid label="\"int\""]
  221 -> 46 [style=solid label="\"long\""]
  221 -> 47 [style=solid label="\"signed\""]
  221 -> 48 [style=solid label="\"unsigned\""]
  221 -> 49 [style=solid label="\"float\""]
  221 -> 50 [style=solid label="\"double\""]
  221 -> 51 [style=solid label="\"void\""]
  221 -> 209 [style=solid label="'R'"]
  221 -> 528 [style=solid label="\"throw\""]
  221 -> 56 [style=solid label="\"typename\""]
  221 -> 402 [style=solid label="\"sizeof\""]
  221 -> 403 [style=solid label="\"alignof\""]
  221 -> 529 [style=solid label="\"co_yield\""]
  221 -> 404 [style=dashed label="additive-expression"]
  221 -> 405 [style=dashed label="and-expression"]
  221 -> 530 [style=dashed label="assignment-expression"]
  221 -> 406 [style=dashed label="await-expression"]
  221 -> 407 [style=dashed label="binary-literal"]
  221 -> 408 [style=dashed label="boolean-literal"]
  221 -> 409 [style=dashed label="cast-expression"]
  221 -> 410 [style=dashed label="character-literal"]
  221 -> 66 [style=dashed label="class-name"]
  221 -> 411 [style=dashed label="compare-expression"]
  221 -> 68 [style=dashed label="concept-name"]
  221 -> 531 [style=dashed label="conditional-expression"]
  221 -> 69 [style=dashed label="conversion-function-id"]
  221 -> 414 [style=dashed label="decimal-floating-point-literal"]
  221 -> 415 [style=dashed label="decimal-literal"]
  221 -> 77 [style=dashed label="decltype-specifier"]
  221 -> 416 [style=dashed label="delete-expression"]
  221 -> 417 [style=dashed label="digit"]
  221 -> 418 [style=dashed label="digit-sequence"]
  221 -> 419 [style=dashed label="encoding-prefix"]
  221 -> 85 [style=dashed label="enum-name"]
  221 -> 420 [style=dashed label="equality-expression"]
  221 -> 421 [style=dashed label="exclusive-or-expression"]
  221 -> 532 [style=dashed label="expression"]
  221 -> 422 [style=dashed label="floating-point-literal"]
  221 -> 423 [style=dashed label="fold-expression"]
  221 -> 424 [style=dashed label="fractional-constant"]
  221 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  221 -> 426 [style=dashed label="hexadecimal-literal"]
  221 -> 427 [style=dashed label="hexadecimal-prefix"]
  221 -> 428 [style=dashed label="id-expression"]
  221 -> 429 [style=dashed label="inclusive-or-expression"]
  221 -> 430 [style=dashed label="integer-literal"]
  221 -> 431 [style=dashed label="lambda-expression"]
  221 -> 432 [style=dashed label="lambda-introducer"]
  221 -> 433 [style=dashed label="literal"]
  221 -> 96 [style=dashed label="literal-operator-id"]
  221 -> 434 [style=dashed label="logical-and-expression"]
  221 -> 533 [style=dashed label="logical-or-expression"]
  221 -> 436 [style=dashed label="multiplicative-expression"]
  221 -> 100 [style=dashed label="namespace-alias"]
  221 -> 103 [style=dashed label="namespace-name"]
  221 -> 437 [style=dashed label="nested-name-specifier"]
  221 -> 438 [style=dashed label="new-expression"]
  221 -> 439 [style=dashed label="noexcept-expression"]
  221 -> 440 [style=dashed label="nonzero-digit"]
  221 -> 441 [style=dashed label="octal-literal"]
  221 -> 109 [style=dashed label="operator-function-id"]
  221 -> 110 [style=dashed label="placeholder-type-specifier"]
  221 -> 442 [style=dashed label="pm-expression"]
  221 -> 443 [style=dashed label="pointer-literal"]
  221 -> 444 [style=dashed label="postfix-expression"]
  221 -> 445 [style=dashed label="primary-expression"]
  221 -> 113 [style=dashed label="qualified-id"]
  221 -> 446 [style=dashed label="relational-expression"]
  221 -> 447 [style=dashed label="requires-expression"]
  221 -> 448 [style=dashed label="shift-expression"]
  221 -> 115 [style=dashed label="simple-template-id"]
  221 -> 534 [style=dashed label="simple-type-specifier"]
  221 -> 450 [style=dashed label="string-literal"]
  221 -> 121 [style=dashed label="template-id"]
  221 -> 216 [style=dashed label="template-name"]
  221 -> 535 [style=dashed label="throw-expression"]
  221 -> 124 [style=dashed label="type-constraint"]
  221 -> 125 [style=dashed label="type-name"]
  221 -> 127 [style=dashed label="typedef-name"]
  221 -> 536 [style=dashed label="typename-specifier"]
  221 -> 454 [style=dashed label="unary-expression"]
  221 -> 455 [style=dashed label="unary-operator"]
  221 -> 130 [style=dashed label="unqualified-id"]
  221 -> 456 [style=dashed label="user-defined-character-literal"]
  221 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  221 -> 458 [style=dashed label="user-defined-integer-literal"]
  221 -> 459 [style=dashed label="user-defined-literal"]
  221 -> 460 [style=dashed label="user-defined-string-literal"]
  221 -> 537 [style=dashed label="yield-expression"]
  222 [label="State 222\n\l145 class-name: IDENTIFIER •\l265 elaborated-enum-specifier: \"enum\" IDENTIFIER •\l297 enum-name: IDENTIFIER •\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l"]
  222 -> "222R145" [label="[\"::\"]", style=solid]
 "222R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  222 -> "222R265d" [label="[\"::\"]", style=solid]
 "222R265d" [label="R265", fillcolor=5, shape=diamond, style=filled]
  222 -> "222R265" [style=solid]
 "222R265" [label="R265", fillcolor=3, shape=diamond, style=filled]
  222 -> "222R297d" [label="[\"::\"]", style=solid]
 "222R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  222 -> "222R651d" [label="[\"::\"]", style=solid]
 "222R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  222 -> "222R657d" [label="[\"::\"]", style=solid]
 "222R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  222 -> "222R1066d" [label="['<']", style=solid]
 "222R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  222 -> "222R1124d" [label="[\"::\"]", style=solid]
 "222R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  223 [label="State 223\n\l295 enum-key: \"enum\" \"class\" •\l"]
  223 -> "223R295" [style=solid]
 "223R295" [label="R295", fillcolor=3, shape=diamond, style=filled]
  224 [label="State 224\n\l296 enum-key: \"enum\" \"struct\" •\l"]
  224 -> "224R296" [style=solid]
 "224R296" [label="R296", fillcolor=3, shape=diamond, style=filled]
  225 [label="State 225\n\l266 elaborated-enum-specifier: \"enum\" nested-name-specifier • IDENTIFIER\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l"]
  225 -> 538 [style=solid label="IDENTIFIER"]
  225 -> 355 [style=solid label="\"template\""]
  225 -> 539 [style=dashed label="simple-template-id"]
  225 -> 143 [style=dashed label="template-name"]
  226 [label="State 226\n\l322 explicit-instantiation: \"extern\" \"template\" • declaration\l"]
  226 -> 1 [style=solid label="IDENTIFIER"]
  226 -> 2 [style=solid label="\"using\""]
  226 -> 3 [style=solid label="';'"]
  226 -> 4 [style=solid label="\"alignas\""]
  226 -> 5 [style=solid label="'('"]
  226 -> 6 [style=solid label="\"...\""]
  226 -> 7 [style=solid label="'&'"]
  226 -> 8 [style=solid label="\"asm\""]
  226 -> 9 [style=solid label="\"::\""]
  226 -> 10 [style=solid label="'['"]
  226 -> 11 [style=solid label="\"virtual\""]
  226 -> 12 [style=solid label="\"class\""]
  226 -> 13 [style=solid label="\"struct\""]
  226 -> 14 [style=solid label="\"union\""]
  226 -> 15 [style=solid label="\"template\""]
  226 -> 16 [style=solid label="\"&&\""]
  226 -> 17 [style=solid label="\"operator\""]
  226 -> 18 [style=solid label="\"const\""]
  226 -> 19 [style=solid label="\"volatile\""]
  226 -> 20 [style=solid label="\"friend\""]
  226 -> 21 [style=solid label="\"typedef\""]
  226 -> 22 [style=solid label="\"constexpr\""]
  226 -> 23 [style=solid label="\"consteval\""]
  226 -> 24 [style=solid label="\"constinit\""]
  226 -> 25 [style=solid label="\"inline\""]
  226 -> 26 [style=solid label="\"decltype\""]
  226 -> 27 [style=solid label="\"enum\""]
  226 -> 28 [style=solid label="\"extern\""]
  226 -> 29 [style=solid label="\"explicit\""]
  226 -> 30 [style=solid label="\"export\""]
  226 -> 158 [style=solid label="\"export-keyword\""]
  226 -> 32 [style=solid label="'*'"]
  226 -> 34 [style=solid label="\"import-keyword\""]
  226 -> 35 [style=solid label="\"namespace\""]
  226 -> 36 [style=solid label="'~'"]
  226 -> 37 [style=solid label="\"auto\""]
  226 -> 38 [style=solid label="\"char\""]
  226 -> 39 [style=solid label="\"char8_t\""]
  226 -> 40 [style=solid label="\"char16_t\""]
  226 -> 41 [style=solid label="\"char32_t\""]
  226 -> 42 [style=solid label="\"wchar_t\""]
  226 -> 43 [style=solid label="\"bool\""]
  226 -> 44 [style=solid label="\"short\""]
  226 -> 45 [style=solid label="\"int\""]
  226 -> 46 [style=solid label="\"long\""]
  226 -> 47 [style=solid label="\"signed\""]
  226 -> 48 [style=solid label="\"unsigned\""]
  226 -> 49 [style=solid label="\"float\""]
  226 -> 50 [style=solid label="\"double\""]
  226 -> 51 [style=solid label="\"void\""]
  226 -> 52 [style=solid label="\"static_assert\""]
  226 -> 53 [style=solid label="\"static\""]
  226 -> 54 [style=solid label="\"thread_local\""]
  226 -> 55 [style=solid label="\"mutable\""]
  226 -> 56 [style=solid label="\"typename\""]
  226 -> 57 [style=dashed label="alias-declaration"]
  226 -> 58 [style=dashed label="alignment-specifier"]
  226 -> 59 [style=dashed label="asm-declaration"]
  226 -> 60 [style=dashed label="attribute-declaration"]
  226 -> 61 [style=dashed label="attribute-specifier"]
  226 -> 62 [style=dashed label="attribute-specifier-seq"]
  226 -> 63 [style=dashed label="block-declaration"]
  226 -> 64 [style=dashed label="class-head"]
  226 -> 65 [style=dashed label="class-key"]
  226 -> 66 [style=dashed label="class-name"]
  226 -> 67 [style=dashed label="class-specifier"]
  226 -> 68 [style=dashed label="concept-name"]
  226 -> 69 [style=dashed label="conversion-function-id"]
  226 -> 70 [style=dashed label="cv-qualifier"]
  226 -> 71 [style=dashed label="decl-specifier"]
  226 -> 72 [style=dashed label="decl-specifier-seq"]
  226 -> 540 [style=dashed label="declaration"]
  226 -> 75 [style=dashed label="declarator"]
  226 -> 76 [style=dashed label="declarator-id"]
  226 -> 77 [style=dashed label="decltype-specifier"]
  226 -> 78 [style=dashed label="deduction-guide"]
  226 -> 79 [style=dashed label="defining-type-specifier"]
  226 -> 80 [style=dashed label="elaborated-enum-specifier"]
  226 -> 81 [style=dashed label="elaborated-type-specifier"]
  226 -> 82 [style=dashed label="empty-declaration"]
  226 -> 83 [style=dashed label="enum-head"]
  226 -> 84 [style=dashed label="enum-key"]
  226 -> 85 [style=dashed label="enum-name"]
  226 -> 86 [style=dashed label="enum-specifier"]
  226 -> 87 [style=dashed label="explicit-instantiation"]
  226 -> 88 [style=dashed label="explicit-specialization"]
  226 -> 89 [style=dashed label="explicit-specifier"]
  226 -> 90 [style=dashed label="export-declaration"]
  226 -> 91 [style=dashed label="function-definition"]
  226 -> 92 [style=dashed label="function-specifier"]
  226 -> 94 [style=dashed label="id-expression"]
  226 -> 95 [style=dashed label="linkage-specification"]
  226 -> 96 [style=dashed label="literal-operator-id"]
  226 -> 98 [style=dashed label="module-import-declaration"]
  226 -> 99 [style=dashed label="named-namespace-definition"]
  226 -> 100 [style=dashed label="namespace-alias"]
  226 -> 101 [style=dashed label="namespace-alias-definition"]
  226 -> 102 [style=dashed label="namespace-definition"]
  226 -> 103 [style=dashed label="namespace-name"]
  226 -> 104 [style=dashed label="nested-name-specifier"]
  226 -> 105 [style=dashed label="nested-namespace-definition"]
  226 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  226 -> 107 [style=dashed label="noptr-declarator"]
  226 -> 108 [style=dashed label="opaque-enum-declaration"]
  226 -> 109 [style=dashed label="operator-function-id"]
  226 -> 110 [style=dashed label="placeholder-type-specifier"]
  226 -> 111 [style=dashed label="ptr-declarator"]
  226 -> 112 [style=dashed label="ptr-operator"]
  226 -> 113 [style=dashed label="qualified-id"]
  226 -> 114 [style=dashed label="simple-declaration"]
  226 -> 115 [style=dashed label="simple-template-id"]
  226 -> 116 [style=dashed label="simple-type-specifier"]
  226 -> 117 [style=dashed label="static_assert-declaration"]
  226 -> 118 [style=dashed label="storage-class-specifier"]
  226 -> 119 [style=dashed label="template-declaration"]
  226 -> 120 [style=dashed label="template-head"]
  226 -> 121 [style=dashed label="template-id"]
  226 -> 122 [style=dashed label="template-name"]
  226 -> 124 [style=dashed label="type-constraint"]
  226 -> 125 [style=dashed label="type-name"]
  226 -> 126 [style=dashed label="type-specifier"]
  226 -> 127 [style=dashed label="typedef-name"]
  226 -> 128 [style=dashed label="typename-specifier"]
  226 -> 129 [style=dashed label="unnamed-namespace-definition"]
  226 -> 130 [style=dashed label="unqualified-id"]
  226 -> 131 [style=dashed label="using-declaration"]
  226 -> 132 [style=dashed label="using-directive"]
  226 -> 133 [style=dashed label="using-enum-declaration"]
  227 [label="State 227\n\l555 linkage-specification: \"extern\" string-literal • '{' '}'\l556                      | \"extern\" string-literal • '{' declaration-seq '}'\l557                      | \"extern\" string-literal • declaration\l"]
  227 -> 1 [style=solid label="IDENTIFIER"]
  227 -> 2 [style=solid label="\"using\""]
  227 -> 3 [style=solid label="';'"]
  227 -> 4 [style=solid label="\"alignas\""]
  227 -> 5 [style=solid label="'('"]
  227 -> 6 [style=solid label="\"...\""]
  227 -> 7 [style=solid label="'&'"]
  227 -> 8 [style=solid label="\"asm\""]
  227 -> 9 [style=solid label="\"::\""]
  227 -> 10 [style=solid label="'['"]
  227 -> 541 [style=solid label="'{'"]
  227 -> 11 [style=solid label="\"virtual\""]
  227 -> 12 [style=solid label="\"class\""]
  227 -> 13 [style=solid label="\"struct\""]
  227 -> 14 [style=solid label="\"union\""]
  227 -> 15 [style=solid label="\"template\""]
  227 -> 16 [style=solid label="\"&&\""]
  227 -> 17 [style=solid label="\"operator\""]
  227 -> 18 [style=solid label="\"const\""]
  227 -> 19 [style=solid label="\"volatile\""]
  227 -> 20 [style=solid label="\"friend\""]
  227 -> 21 [style=solid label="\"typedef\""]
  227 -> 22 [style=solid label="\"constexpr\""]
  227 -> 23 [style=solid label="\"consteval\""]
  227 -> 24 [style=solid label="\"constinit\""]
  227 -> 25 [style=solid label="\"inline\""]
  227 -> 26 [style=solid label="\"decltype\""]
  227 -> 27 [style=solid label="\"enum\""]
  227 -> 28 [style=solid label="\"extern\""]
  227 -> 29 [style=solid label="\"explicit\""]
  227 -> 30 [style=solid label="\"export\""]
  227 -> 158 [style=solid label="\"export-keyword\""]
  227 -> 32 [style=solid label="'*'"]
  227 -> 34 [style=solid label="\"import-keyword\""]
  227 -> 35 [style=solid label="\"namespace\""]
  227 -> 36 [style=solid label="'~'"]
  227 -> 37 [style=solid label="\"auto\""]
  227 -> 38 [style=solid label="\"char\""]
  227 -> 39 [style=solid label="\"char8_t\""]
  227 -> 40 [style=solid label="\"char16_t\""]
  227 -> 41 [style=solid label="\"char32_t\""]
  227 -> 42 [style=solid label="\"wchar_t\""]
  227 -> 43 [style=solid label="\"bool\""]
  227 -> 44 [style=solid label="\"short\""]
  227 -> 45 [style=solid label="\"int\""]
  227 -> 46 [style=solid label="\"long\""]
  227 -> 47 [style=solid label="\"signed\""]
  227 -> 48 [style=solid label="\"unsigned\""]
  227 -> 49 [style=solid label="\"float\""]
  227 -> 50 [style=solid label="\"double\""]
  227 -> 51 [style=solid label="\"void\""]
  227 -> 52 [style=solid label="\"static_assert\""]
  227 -> 53 [style=solid label="\"static\""]
  227 -> 54 [style=solid label="\"thread_local\""]
  227 -> 55 [style=solid label="\"mutable\""]
  227 -> 56 [style=solid label="\"typename\""]
  227 -> 57 [style=dashed label="alias-declaration"]
  227 -> 58 [style=dashed label="alignment-specifier"]
  227 -> 59 [style=dashed label="asm-declaration"]
  227 -> 60 [style=dashed label="attribute-declaration"]
  227 -> 61 [style=dashed label="attribute-specifier"]
  227 -> 62 [style=dashed label="attribute-specifier-seq"]
  227 -> 63 [style=dashed label="block-declaration"]
  227 -> 64 [style=dashed label="class-head"]
  227 -> 65 [style=dashed label="class-key"]
  227 -> 66 [style=dashed label="class-name"]
  227 -> 67 [style=dashed label="class-specifier"]
  227 -> 68 [style=dashed label="concept-name"]
  227 -> 69 [style=dashed label="conversion-function-id"]
  227 -> 70 [style=dashed label="cv-qualifier"]
  227 -> 71 [style=dashed label="decl-specifier"]
  227 -> 72 [style=dashed label="decl-specifier-seq"]
  227 -> 542 [style=dashed label="declaration"]
  227 -> 75 [style=dashed label="declarator"]
  227 -> 76 [style=dashed label="declarator-id"]
  227 -> 77 [style=dashed label="decltype-specifier"]
  227 -> 78 [style=dashed label="deduction-guide"]
  227 -> 79 [style=dashed label="defining-type-specifier"]
  227 -> 80 [style=dashed label="elaborated-enum-specifier"]
  227 -> 81 [style=dashed label="elaborated-type-specifier"]
  227 -> 82 [style=dashed label="empty-declaration"]
  227 -> 83 [style=dashed label="enum-head"]
  227 -> 84 [style=dashed label="enum-key"]
  227 -> 85 [style=dashed label="enum-name"]
  227 -> 86 [style=dashed label="enum-specifier"]
  227 -> 87 [style=dashed label="explicit-instantiation"]
  227 -> 88 [style=dashed label="explicit-specialization"]
  227 -> 89 [style=dashed label="explicit-specifier"]
  227 -> 90 [style=dashed label="export-declaration"]
  227 -> 91 [style=dashed label="function-definition"]
  227 -> 92 [style=dashed label="function-specifier"]
  227 -> 94 [style=dashed label="id-expression"]
  227 -> 95 [style=dashed label="linkage-specification"]
  227 -> 96 [style=dashed label="literal-operator-id"]
  227 -> 98 [style=dashed label="module-import-declaration"]
  227 -> 99 [style=dashed label="named-namespace-definition"]
  227 -> 100 [style=dashed label="namespace-alias"]
  227 -> 101 [style=dashed label="namespace-alias-definition"]
  227 -> 102 [style=dashed label="namespace-definition"]
  227 -> 103 [style=dashed label="namespace-name"]
  227 -> 104 [style=dashed label="nested-name-specifier"]
  227 -> 105 [style=dashed label="nested-namespace-definition"]
  227 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  227 -> 107 [style=dashed label="noptr-declarator"]
  227 -> 108 [style=dashed label="opaque-enum-declaration"]
  227 -> 109 [style=dashed label="operator-function-id"]
  227 -> 110 [style=dashed label="placeholder-type-specifier"]
  227 -> 111 [style=dashed label="ptr-declarator"]
  227 -> 112 [style=dashed label="ptr-operator"]
  227 -> 113 [style=dashed label="qualified-id"]
  227 -> 114 [style=dashed label="simple-declaration"]
  227 -> 115 [style=dashed label="simple-template-id"]
  227 -> 116 [style=dashed label="simple-type-specifier"]
  227 -> 117 [style=dashed label="static_assert-declaration"]
  227 -> 118 [style=dashed label="storage-class-specifier"]
  227 -> 119 [style=dashed label="template-declaration"]
  227 -> 120 [style=dashed label="template-head"]
  227 -> 121 [style=dashed label="template-id"]
  227 -> 122 [style=dashed label="template-name"]
  227 -> 124 [style=dashed label="type-constraint"]
  227 -> 125 [style=dashed label="type-name"]
  227 -> 126 [style=dashed label="type-specifier"]
  227 -> 127 [style=dashed label="typedef-name"]
  227 -> 128 [style=dashed label="typename-specifier"]
  227 -> 129 [style=dashed label="unnamed-namespace-definition"]
  227 -> 130 [style=dashed label="unqualified-id"]
  227 -> 131 [style=dashed label="using-declaration"]
  227 -> 132 [style=dashed label="using-directive"]
  227 -> 133 [style=dashed label="using-enum-declaration"]
  228 [label="State 228\n\l325 explicit-specifier: \"explicit\" '(' • constant-expression ')'\l"]
  228 -> 1 [style=solid label="IDENTIFIER"]
  228 -> 361 [style=solid label="'+'"]
  228 -> 362 [style=solid label="'-'"]
  228 -> 363 [style=solid label="'('"]
  228 -> 364 [style=solid label="'&'"]
  228 -> 365 [style=solid label="\"::\""]
  228 -> 366 [style=solid label="'['"]
  228 -> 367 [style=solid label="\"co_await\""]
  228 -> 368 [style=solid label="'0'"]
  228 -> 369 [style=solid label="'1'"]
  228 -> 370 [style=solid label="\"0b\""]
  228 -> 371 [style=solid label="\"0B\""]
  228 -> 372 [style=solid label="'\\''"]
  228 -> 373 [style=solid label="\"false\""]
  228 -> 374 [style=solid label="\"true\""]
  228 -> 375 [style=solid label="\"noexcept\""]
  228 -> 17 [style=solid label="\"operator\""]
  228 -> 26 [style=solid label="\"decltype\""]
  228 -> 376 [style=solid label="\"delete\""]
  228 -> 377 [style=solid label="'.'"]
  228 -> 378 [style=solid label="'2'"]
  228 -> 379 [style=solid label="'3'"]
  228 -> 380 [style=solid label="'4'"]
  228 -> 381 [style=solid label="'5'"]
  228 -> 382 [style=solid label="'6'"]
  228 -> 383 [style=solid label="'7'"]
  228 -> 384 [style=solid label="'8'"]
  228 -> 385 [style=solid label="'9'"]
  228 -> 185 [style=solid label="\"u8\""]
  228 -> 186 [style=solid label="'u'"]
  228 -> 187 [style=solid label="'U'"]
  228 -> 188 [style=solid label="'L'"]
  228 -> 386 [style=solid label="'*'"]
  228 -> 203 [style=solid label="'\"'"]
  228 -> 387 [style=solid label="\"0x\""]
  228 -> 388 [style=solid label="\"0X\""]
  228 -> 389 [style=solid label="\"requires\""]
  228 -> 390 [style=solid label="\"new\""]
  228 -> 391 [style=solid label="'~'"]
  228 -> 392 [style=solid label="'!'"]
  228 -> 393 [style=solid label="\"++\""]
  228 -> 394 [style=solid label="\"--\""]
  228 -> 395 [style=solid label="\"this\""]
  228 -> 37 [style=solid label="\"auto\""]
  228 -> 396 [style=solid label="\"nullptr\""]
  228 -> 397 [style=solid label="\"dynamic_cast\""]
  228 -> 398 [style=solid label="\"static_cast\""]
  228 -> 399 [style=solid label="\"reinterpret_cast\""]
  228 -> 400 [style=solid label="\"const_cast\""]
  228 -> 401 [style=solid label="\"typeid\""]
  228 -> 38 [style=solid label="\"char\""]
  228 -> 39 [style=solid label="\"char8_t\""]
  228 -> 40 [style=solid label="\"char16_t\""]
  228 -> 41 [style=solid label="\"char32_t\""]
  228 -> 42 [style=solid label="\"wchar_t\""]
  228 -> 43 [style=solid label="\"bool\""]
  228 -> 44 [style=solid label="\"short\""]
  228 -> 45 [style=solid label="\"int\""]
  228 -> 46 [style=solid label="\"long\""]
  228 -> 47 [style=solid label="\"signed\""]
  228 -> 48 [style=solid label="\"unsigned\""]
  228 -> 49 [style=solid label="\"float\""]
  228 -> 50 [style=solid label="\"double\""]
  228 -> 51 [style=solid label="\"void\""]
  228 -> 209 [style=solid label="'R'"]
  228 -> 56 [style=solid label="\"typename\""]
  228 -> 402 [style=solid label="\"sizeof\""]
  228 -> 403 [style=solid label="\"alignof\""]
  228 -> 404 [style=dashed label="additive-expression"]
  228 -> 405 [style=dashed label="and-expression"]
  228 -> 406 [style=dashed label="await-expression"]
  228 -> 407 [style=dashed label="binary-literal"]
  228 -> 408 [style=dashed label="boolean-literal"]
  228 -> 409 [style=dashed label="cast-expression"]
  228 -> 410 [style=dashed label="character-literal"]
  228 -> 66 [style=dashed label="class-name"]
  228 -> 411 [style=dashed label="compare-expression"]
  228 -> 68 [style=dashed label="concept-name"]
  228 -> 412 [style=dashed label="conditional-expression"]
  228 -> 543 [style=dashed label="constant-expression"]
  228 -> 69 [style=dashed label="conversion-function-id"]
  228 -> 414 [style=dashed label="decimal-floating-point-literal"]
  228 -> 415 [style=dashed label="decimal-literal"]
  228 -> 77 [style=dashed label="decltype-specifier"]
  228 -> 416 [style=dashed label="delete-expression"]
  228 -> 417 [style=dashed label="digit"]
  228 -> 418 [style=dashed label="digit-sequence"]
  228 -> 419 [style=dashed label="encoding-prefix"]
  228 -> 85 [style=dashed label="enum-name"]
  228 -> 420 [style=dashed label="equality-expression"]
  228 -> 421 [style=dashed label="exclusive-or-expression"]
  228 -> 422 [style=dashed label="floating-point-literal"]
  228 -> 423 [style=dashed label="fold-expression"]
  228 -> 424 [style=dashed label="fractional-constant"]
  228 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  228 -> 426 [style=dashed label="hexadecimal-literal"]
  228 -> 427 [style=dashed label="hexadecimal-prefix"]
  228 -> 428 [style=dashed label="id-expression"]
  228 -> 429 [style=dashed label="inclusive-or-expression"]
  228 -> 430 [style=dashed label="integer-literal"]
  228 -> 431 [style=dashed label="lambda-expression"]
  228 -> 432 [style=dashed label="lambda-introducer"]
  228 -> 433 [style=dashed label="literal"]
  228 -> 96 [style=dashed label="literal-operator-id"]
  228 -> 434 [style=dashed label="logical-and-expression"]
  228 -> 435 [style=dashed label="logical-or-expression"]
  228 -> 436 [style=dashed label="multiplicative-expression"]
  228 -> 100 [style=dashed label="namespace-alias"]
  228 -> 103 [style=dashed label="namespace-name"]
  228 -> 437 [style=dashed label="nested-name-specifier"]
  228 -> 438 [style=dashed label="new-expression"]
  228 -> 439 [style=dashed label="noexcept-expression"]
  228 -> 440 [style=dashed label="nonzero-digit"]
  228 -> 441 [style=dashed label="octal-literal"]
  228 -> 109 [style=dashed label="operator-function-id"]
  228 -> 110 [style=dashed label="placeholder-type-specifier"]
  228 -> 442 [style=dashed label="pm-expression"]
  228 -> 443 [style=dashed label="pointer-literal"]
  228 -> 444 [style=dashed label="postfix-expression"]
  228 -> 445 [style=dashed label="primary-expression"]
  228 -> 113 [style=dashed label="qualified-id"]
  228 -> 446 [style=dashed label="relational-expression"]
  228 -> 447 [style=dashed label="requires-expression"]
  228 -> 448 [style=dashed label="shift-expression"]
  228 -> 115 [style=dashed label="simple-template-id"]
  228 -> 534 [style=dashed label="simple-type-specifier"]
  228 -> 450 [style=dashed label="string-literal"]
  228 -> 121 [style=dashed label="template-id"]
  228 -> 216 [style=dashed label="template-name"]
  228 -> 124 [style=dashed label="type-constraint"]
  228 -> 125 [style=dashed label="type-name"]
  228 -> 127 [style=dashed label="typedef-name"]
  228 -> 536 [style=dashed label="typename-specifier"]
  228 -> 454 [style=dashed label="unary-expression"]
  228 -> 455 [style=dashed label="unary-operator"]
  228 -> 130 [style=dashed label="unqualified-id"]
  228 -> 456 [style=dashed label="user-defined-character-literal"]
  228 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  228 -> 458 [style=dashed label="user-defined-integer-literal"]
  228 -> 459 [style=dashed label="user-defined-literal"]
  228 -> 460 [style=dashed label="user-defined-string-literal"]
  229 [label="State 229\n\l332 export-declaration: \"export\" '{' • '}'\l333                   | \"export\" '{' • declaration-seq '}'\l"]
  229 -> 1 [style=solid label="IDENTIFIER"]
  229 -> 2 [style=solid label="\"using\""]
  229 -> 3 [style=solid label="';'"]
  229 -> 4 [style=solid label="\"alignas\""]
  229 -> 5 [style=solid label="'('"]
  229 -> 6 [style=solid label="\"...\""]
  229 -> 7 [style=solid label="'&'"]
  229 -> 8 [style=solid label="\"asm\""]
  229 -> 9 [style=solid label="\"::\""]
  229 -> 10 [style=solid label="'['"]
  229 -> 544 [style=solid label="'}'"]
  229 -> 11 [style=solid label="\"virtual\""]
  229 -> 12 [style=solid label="\"class\""]
  229 -> 13 [style=solid label="\"struct\""]
  229 -> 14 [style=solid label="\"union\""]
  229 -> 15 [style=solid label="\"template\""]
  229 -> 16 [style=solid label="\"&&\""]
  229 -> 17 [style=solid label="\"operator\""]
  229 -> 18 [style=solid label="\"const\""]
  229 -> 19 [style=solid label="\"volatile\""]
  229 -> 20 [style=solid label="\"friend\""]
  229 -> 21 [style=solid label="\"typedef\""]
  229 -> 22 [style=solid label="\"constexpr\""]
  229 -> 23 [style=solid label="\"consteval\""]
  229 -> 24 [style=solid label="\"constinit\""]
  229 -> 25 [style=solid label="\"inline\""]
  229 -> 26 [style=solid label="\"decltype\""]
  229 -> 27 [style=solid label="\"enum\""]
  229 -> 28 [style=solid label="\"extern\""]
  229 -> 29 [style=solid label="\"explicit\""]
  229 -> 30 [style=solid label="\"export\""]
  229 -> 158 [style=solid label="\"export-keyword\""]
  229 -> 32 [style=solid label="'*'"]
  229 -> 34 [style=solid label="\"import-keyword\""]
  229 -> 35 [style=solid label="\"namespace\""]
  229 -> 36 [style=solid label="'~'"]
  229 -> 37 [style=solid label="\"auto\""]
  229 -> 38 [style=solid label="\"char\""]
  229 -> 39 [style=solid label="\"char8_t\""]
  229 -> 40 [style=solid label="\"char16_t\""]
  229 -> 41 [style=solid label="\"char32_t\""]
  229 -> 42 [style=solid label="\"wchar_t\""]
  229 -> 43 [style=solid label="\"bool\""]
  229 -> 44 [style=solid label="\"short\""]
  229 -> 45 [style=solid label="\"int\""]
  229 -> 46 [style=solid label="\"long\""]
  229 -> 47 [style=solid label="\"signed\""]
  229 -> 48 [style=solid label="\"unsigned\""]
  229 -> 49 [style=solid label="\"float\""]
  229 -> 50 [style=solid label="\"double\""]
  229 -> 51 [style=solid label="\"void\""]
  229 -> 52 [style=solid label="\"static_assert\""]
  229 -> 53 [style=solid label="\"static\""]
  229 -> 54 [style=solid label="\"thread_local\""]
  229 -> 55 [style=solid label="\"mutable\""]
  229 -> 56 [style=solid label="\"typename\""]
  229 -> 57 [style=dashed label="alias-declaration"]
  229 -> 58 [style=dashed label="alignment-specifier"]
  229 -> 59 [style=dashed label="asm-declaration"]
  229 -> 60 [style=dashed label="attribute-declaration"]
  229 -> 61 [style=dashed label="attribute-specifier"]
  229 -> 62 [style=dashed label="attribute-specifier-seq"]
  229 -> 63 [style=dashed label="block-declaration"]
  229 -> 64 [style=dashed label="class-head"]
  229 -> 65 [style=dashed label="class-key"]
  229 -> 66 [style=dashed label="class-name"]
  229 -> 67 [style=dashed label="class-specifier"]
  229 -> 68 [style=dashed label="concept-name"]
  229 -> 69 [style=dashed label="conversion-function-id"]
  229 -> 70 [style=dashed label="cv-qualifier"]
  229 -> 71 [style=dashed label="decl-specifier"]
  229 -> 72 [style=dashed label="decl-specifier-seq"]
  229 -> 73 [style=dashed label="declaration"]
  229 -> 545 [style=dashed label="declaration-seq"]
  229 -> 75 [style=dashed label="declarator"]
  229 -> 76 [style=dashed label="declarator-id"]
  229 -> 77 [style=dashed label="decltype-specifier"]
  229 -> 78 [style=dashed label="deduction-guide"]
  229 -> 79 [style=dashed label="defining-type-specifier"]
  229 -> 80 [style=dashed label="elaborated-enum-specifier"]
  229 -> 81 [style=dashed label="elaborated-type-specifier"]
  229 -> 82 [style=dashed label="empty-declaration"]
  229 -> 83 [style=dashed label="enum-head"]
  229 -> 84 [style=dashed label="enum-key"]
  229 -> 85 [style=dashed label="enum-name"]
  229 -> 86 [style=dashed label="enum-specifier"]
  229 -> 87 [style=dashed label="explicit-instantiation"]
  229 -> 88 [style=dashed label="explicit-specialization"]
  229 -> 89 [style=dashed label="explicit-specifier"]
  229 -> 90 [style=dashed label="export-declaration"]
  229 -> 91 [style=dashed label="function-definition"]
  229 -> 92 [style=dashed label="function-specifier"]
  229 -> 94 [style=dashed label="id-expression"]
  229 -> 95 [style=dashed label="linkage-specification"]
  229 -> 96 [style=dashed label="literal-operator-id"]
  229 -> 98 [style=dashed label="module-import-declaration"]
  229 -> 99 [style=dashed label="named-namespace-definition"]
  229 -> 100 [style=dashed label="namespace-alias"]
  229 -> 101 [style=dashed label="namespace-alias-definition"]
  229 -> 102 [style=dashed label="namespace-definition"]
  229 -> 103 [style=dashed label="namespace-name"]
  229 -> 104 [style=dashed label="nested-name-specifier"]
  229 -> 105 [style=dashed label="nested-namespace-definition"]
  229 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  229 -> 107 [style=dashed label="noptr-declarator"]
  229 -> 108 [style=dashed label="opaque-enum-declaration"]
  229 -> 109 [style=dashed label="operator-function-id"]
  229 -> 110 [style=dashed label="placeholder-type-specifier"]
  229 -> 111 [style=dashed label="ptr-declarator"]
  229 -> 112 [style=dashed label="ptr-operator"]
  229 -> 113 [style=dashed label="qualified-id"]
  229 -> 114 [style=dashed label="simple-declaration"]
  229 -> 115 [style=dashed label="simple-template-id"]
  229 -> 116 [style=dashed label="simple-type-specifier"]
  229 -> 117 [style=dashed label="static_assert-declaration"]
  229 -> 118 [style=dashed label="storage-class-specifier"]
  229 -> 119 [style=dashed label="template-declaration"]
  229 -> 120 [style=dashed label="template-head"]
  229 -> 121 [style=dashed label="template-id"]
  229 -> 122 [style=dashed label="template-name"]
  229 -> 124 [style=dashed label="type-constraint"]
  229 -> 125 [style=dashed label="type-name"]
  229 -> 126 [style=dashed label="type-specifier"]
  229 -> 127 [style=dashed label="typedef-name"]
  229 -> 128 [style=dashed label="typename-specifier"]
  229 -> 129 [style=dashed label="unnamed-namespace-definition"]
  229 -> 130 [style=dashed label="unqualified-id"]
  229 -> 131 [style=dashed label="using-declaration"]
  229 -> 132 [style=dashed label="using-directive"]
  229 -> 133 [style=dashed label="using-enum-declaration"]
  230 [label="State 230\n\l331 export-declaration: \"export\" declaration •\l"]
  230 -> "230R331" [style=solid]
 "230R331" [label="R331", fillcolor=3, shape=diamond, style=filled]
  231 [label="State 231\n\l623 module-declaration: \"export-keyword\" \"module-keyword\" • module-name ';'\l625                   | \"export-keyword\" \"module-keyword\" • module-name module-partition ';'\l627                   | \"export-keyword\" \"module-keyword\" • module-name attribute-specifier-seq ';'\l629                   | \"export-keyword\" \"module-keyword\" • module-name module-partition attribute-specifier-seq ';'\l"]
  231 -> 236 [style=solid label="IDENTIFIER"]
  231 -> 546 [style=dashed label="module-name"]
  231 -> 239 [style=dashed label="module-name-qualifier"]
  232 [label="State 232\n\l334 export-declaration: \"export-keyword\" module-import-declaration •\l"]
  232 -> "232R334" [style=solid]
 "232R334" [label="R334", fillcolor=3, shape=diamond, style=filled]
  233 [label="State 233\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l898 ptr-operator: '*' attribute-specifier-seq •\l900             | '*' attribute-specifier-seq • cv-qualifier-seq\l"]
  233 -> 4 [style=solid label="\"alignas\""]
  233 -> 10 [style=solid label="'['"]
  233 -> 18 [style=solid label="\"const\""]
  233 -> 19 [style=solid label="\"volatile\""]
  233 -> 58 [style=dashed label="alignment-specifier"]
  233 -> 265 [style=dashed label="attribute-specifier"]
  233 -> 234 [style=dashed label="cv-qualifier"]
  233 -> 547 [style=dashed label="cv-qualifier-seq"]
  233 -> "233R898d" [label="[\"alignas\", '[', \"const\", \"volatile\"]", style=solid]
 "233R898d" [label="R898", fillcolor=5, shape=diamond, style=filled]
  233 -> "233R898" [style=solid]
 "233R898" [label="R898", fillcolor=3, shape=diamond, style=filled]
  234 [label="State 234\n\l187 cv-qualifier-seq: cv-qualifier •\l188                 | cv-qualifier • cv-qualifier-seq\l"]
  234 -> 18 [style=solid label="\"const\""]
  234 -> 19 [style=solid label="\"volatile\""]
  234 -> 234 [style=dashed label="cv-qualifier"]
  234 -> 548 [style=dashed label="cv-qualifier-seq"]
  234 -> "234R187d" [label="[\"const\", \"volatile\"]", style=solid]
 "234R187d" [label="R187", fillcolor=5, shape=diamond, style=filled]
  234 -> "234R187" [style=solid]
 "234R187" [label="R187", fillcolor=3, shape=diamond, style=filled]
  235 [label="State 235\n\l899 ptr-operator: '*' cv-qualifier-seq •\l"]
  235 -> "235R899" [style=solid]
 "235R899" [label="R899", fillcolor=3, shape=diamond, style=filled]
  236 [label="State 236\n\l638 module-name: IDENTIFIER •\l639 module-name-qualifier: IDENTIFIER • '.'\l"]
  236 -> 549 [style=solid label="'.'"]
  236 -> "236R638" [style=solid]
 "236R638" [label="R638", fillcolor=3, shape=diamond, style=filled]
  237 [label="State 237\n\l414 global-module-fragment: \"module-keyword\" ';' •\l415                       | \"module-keyword\" ';' • declaration-seq\l"]
  237 -> 1 [style=solid label="IDENTIFIER"]
  237 -> 2 [style=solid label="\"using\""]
  237 -> 3 [style=solid label="';'"]
  237 -> 4 [style=solid label="\"alignas\""]
  237 -> 5 [style=solid label="'('"]
  237 -> 6 [style=solid label="\"...\""]
  237 -> 7 [style=solid label="'&'"]
  237 -> 8 [style=solid label="\"asm\""]
  237 -> 9 [style=solid label="\"::\""]
  237 -> 10 [style=solid label="'['"]
  237 -> 11 [style=solid label="\"virtual\""]
  237 -> 12 [style=solid label="\"class\""]
  237 -> 13 [style=solid label="\"struct\""]
  237 -> 14 [style=solid label="\"union\""]
  237 -> 15 [style=solid label="\"template\""]
  237 -> 16 [style=solid label="\"&&\""]
  237 -> 17 [style=solid label="\"operator\""]
  237 -> 18 [style=solid label="\"const\""]
  237 -> 19 [style=solid label="\"volatile\""]
  237 -> 20 [style=solid label="\"friend\""]
  237 -> 21 [style=solid label="\"typedef\""]
  237 -> 22 [style=solid label="\"constexpr\""]
  237 -> 23 [style=solid label="\"consteval\""]
  237 -> 24 [style=solid label="\"constinit\""]
  237 -> 25 [style=solid label="\"inline\""]
  237 -> 26 [style=solid label="\"decltype\""]
  237 -> 27 [style=solid label="\"enum\""]
  237 -> 28 [style=solid label="\"extern\""]
  237 -> 29 [style=solid label="\"explicit\""]
  237 -> 30 [style=solid label="\"export\""]
  237 -> 158 [style=solid label="\"export-keyword\""]
  237 -> 32 [style=solid label="'*'"]
  237 -> 34 [style=solid label="\"import-keyword\""]
  237 -> 35 [style=solid label="\"namespace\""]
  237 -> 36 [style=solid label="'~'"]
  237 -> 37 [style=solid label="\"auto\""]
  237 -> 38 [style=solid label="\"char\""]
  237 -> 39 [style=solid label="\"char8_t\""]
  237 -> 40 [style=solid label="\"char16_t\""]
  237 -> 41 [style=solid label="\"char32_t\""]
  237 -> 42 [style=solid label="\"wchar_t\""]
  237 -> 43 [style=solid label="\"bool\""]
  237 -> 44 [style=solid label="\"short\""]
  237 -> 45 [style=solid label="\"int\""]
  237 -> 46 [style=solid label="\"long\""]
  237 -> 47 [style=solid label="\"signed\""]
  237 -> 48 [style=solid label="\"unsigned\""]
  237 -> 49 [style=solid label="\"float\""]
  237 -> 50 [style=solid label="\"double\""]
  237 -> 51 [style=solid label="\"void\""]
  237 -> 52 [style=solid label="\"static_assert\""]
  237 -> 53 [style=solid label="\"static\""]
  237 -> 54 [style=solid label="\"thread_local\""]
  237 -> 55 [style=solid label="\"mutable\""]
  237 -> 56 [style=solid label="\"typename\""]
  237 -> 57 [style=dashed label="alias-declaration"]
  237 -> 58 [style=dashed label="alignment-specifier"]
  237 -> 59 [style=dashed label="asm-declaration"]
  237 -> 60 [style=dashed label="attribute-declaration"]
  237 -> 61 [style=dashed label="attribute-specifier"]
  237 -> 62 [style=dashed label="attribute-specifier-seq"]
  237 -> 63 [style=dashed label="block-declaration"]
  237 -> 64 [style=dashed label="class-head"]
  237 -> 65 [style=dashed label="class-key"]
  237 -> 66 [style=dashed label="class-name"]
  237 -> 67 [style=dashed label="class-specifier"]
  237 -> 68 [style=dashed label="concept-name"]
  237 -> 69 [style=dashed label="conversion-function-id"]
  237 -> 70 [style=dashed label="cv-qualifier"]
  237 -> 71 [style=dashed label="decl-specifier"]
  237 -> 72 [style=dashed label="decl-specifier-seq"]
  237 -> 73 [style=dashed label="declaration"]
  237 -> 550 [style=dashed label="declaration-seq"]
  237 -> 75 [style=dashed label="declarator"]
  237 -> 76 [style=dashed label="declarator-id"]
  237 -> 77 [style=dashed label="decltype-specifier"]
  237 -> 78 [style=dashed label="deduction-guide"]
  237 -> 79 [style=dashed label="defining-type-specifier"]
  237 -> 80 [style=dashed label="elaborated-enum-specifier"]
  237 -> 81 [style=dashed label="elaborated-type-specifier"]
  237 -> 82 [style=dashed label="empty-declaration"]
  237 -> 83 [style=dashed label="enum-head"]
  237 -> 84 [style=dashed label="enum-key"]
  237 -> 85 [style=dashed label="enum-name"]
  237 -> 86 [style=dashed label="enum-specifier"]
  237 -> 87 [style=dashed label="explicit-instantiation"]
  237 -> 88 [style=dashed label="explicit-specialization"]
  237 -> 89 [style=dashed label="explicit-specifier"]
  237 -> 90 [style=dashed label="export-declaration"]
  237 -> 91 [style=dashed label="function-definition"]
  237 -> 92 [style=dashed label="function-specifier"]
  237 -> 94 [style=dashed label="id-expression"]
  237 -> 95 [style=dashed label="linkage-specification"]
  237 -> 96 [style=dashed label="literal-operator-id"]
  237 -> 98 [style=dashed label="module-import-declaration"]
  237 -> 99 [style=dashed label="named-namespace-definition"]
  237 -> 100 [style=dashed label="namespace-alias"]
  237 -> 101 [style=dashed label="namespace-alias-definition"]
  237 -> 102 [style=dashed label="namespace-definition"]
  237 -> 103 [style=dashed label="namespace-name"]
  237 -> 104 [style=dashed label="nested-name-specifier"]
  237 -> 105 [style=dashed label="nested-namespace-definition"]
  237 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  237 -> 107 [style=dashed label="noptr-declarator"]
  237 -> 108 [style=dashed label="opaque-enum-declaration"]
  237 -> 109 [style=dashed label="operator-function-id"]
  237 -> 110 [style=dashed label="placeholder-type-specifier"]
  237 -> 111 [style=dashed label="ptr-declarator"]
  237 -> 112 [style=dashed label="ptr-operator"]
  237 -> 113 [style=dashed label="qualified-id"]
  237 -> 114 [style=dashed label="simple-declaration"]
  237 -> 115 [style=dashed label="simple-template-id"]
  237 -> 116 [style=dashed label="simple-type-specifier"]
  237 -> 117 [style=dashed label="static_assert-declaration"]
  237 -> 118 [style=dashed label="storage-class-specifier"]
  237 -> 119 [style=dashed label="template-declaration"]
  237 -> 120 [style=dashed label="template-head"]
  237 -> 121 [style=dashed label="template-id"]
  237 -> 122 [style=dashed label="template-name"]
  237 -> 124 [style=dashed label="type-constraint"]
  237 -> 125 [style=dashed label="type-name"]
  237 -> 126 [style=dashed label="type-specifier"]
  237 -> 127 [style=dashed label="typedef-name"]
  237 -> 128 [style=dashed label="typename-specifier"]
  237 -> 129 [style=dashed label="unnamed-namespace-definition"]
  237 -> 130 [style=dashed label="unqualified-id"]
  237 -> 131 [style=dashed label="using-declaration"]
  237 -> 132 [style=dashed label="using-directive"]
  237 -> 133 [style=dashed label="using-enum-declaration"]
  237 -> "237R414d" [label="[\"export-keyword\"]", style=solid]
 "237R414d" [label="R414", fillcolor=5, shape=diamond, style=filled]
  237 -> "237R414" [style=solid]
 "237R414" [label="R414", fillcolor=3, shape=diamond, style=filled]
  238 [label="State 238\n\l624 module-declaration: \"module-keyword\" module-name • ';'\l626                   | \"module-keyword\" module-name • module-partition ';'\l628                   | \"module-keyword\" module-name • attribute-specifier-seq ';'\l630                   | \"module-keyword\" module-name • module-partition attribute-specifier-seq ';'\l"]
  238 -> 551 [style=solid label="';'"]
  238 -> 4 [style=solid label="\"alignas\""]
  238 -> 10 [style=solid label="'['"]
  238 -> 241 [style=solid label="':'"]
  238 -> 58 [style=dashed label="alignment-specifier"]
  238 -> 61 [style=dashed label="attribute-specifier"]
  238 -> 552 [style=dashed label="attribute-specifier-seq"]
  238 -> 553 [style=dashed label="module-partition"]
  239 [label="State 239\n\l637 module-name: module-name-qualifier • IDENTIFIER\l640 module-name-qualifier: module-name-qualifier • IDENTIFIER '.'\l"]
  239 -> 554 [style=solid label="IDENTIFIER"]
  240 [label="State 240\n\l416 h-char: EXCEPT_NEW_LINE_AND_GREATER_THAN_SIGN •\l"]
  240 -> "240R416" [style=solid]
 "240R416" [label="R416", fillcolor=3, shape=diamond, style=filled]
  241 [label="State 241\n\l641 module-partition: ':' • IDENTIFIER\l642                 | ':' • module-name-qualifier IDENTIFIER\l"]
  241 -> 555 [style=solid label="IDENTIFIER"]
  241 -> 556 [style=dashed label="module-name-qualifier"]
  242 [label="State 242\n\l420 header-name: '<' • \"h-char-sequence\" '>'\l"]
  242 -> 557 [style=solid label="\"h-char-sequence\""]
  243 [label="State 243\n\l424 header-name: \"h-char-sequence\" • h-char\l"]
  243 -> 240 [style=solid label="EXCEPT_NEW_LINE_AND_GREATER_THAN_SIGN"]
  243 -> 558 [style=dashed label="h-char"]
  244 [label="State 244\n\l421 header-name: '\"' • q-char-sequence '\"'\l"]
  244 -> 559 [style=solid label="EXCEPT_NEW_LINE_AND_QUOTATION_MARK"]
  244 -> 560 [style=dashed label="q-char"]
  244 -> 561 [style=dashed label="q-char-sequence"]
  245 [label="State 245\n\l422 header-name: \"h-char-sequence:\" •\l"]
  245 -> "245R422" [style=solid]
 "245R422" [label="R422", fillcolor=3, shape=diamond, style=filled]
  246 [label="State 246\n\l423 header-name: h-char •\l"]
  246 -> "246R423" [style=solid]
 "246R423" [label="R423", fillcolor=3, shape=diamond, style=filled]
  247 [label="State 247\n\l635 module-import-declaration: \"import-keyword\" header-name • ';'\l636                          | \"import-keyword\" header-name • attribute-specifier-seq ';'\l"]
  247 -> 562 [style=solid label="';'"]
  247 -> 4 [style=solid label="\"alignas\""]
  247 -> 10 [style=solid label="'['"]
  247 -> 58 [style=dashed label="alignment-specifier"]
  247 -> 61 [style=dashed label="attribute-specifier"]
  247 -> 563 [style=dashed label="attribute-specifier-seq"]
  248 [label="State 248\n\l631 module-import-declaration: \"import-keyword\" module-name • ';'\l632                          | \"import-keyword\" module-name • attribute-specifier-seq ';'\l"]
  248 -> 564 [style=solid label="';'"]
  248 -> 4 [style=solid label="\"alignas\""]
  248 -> 10 [style=solid label="'['"]
  248 -> 58 [style=dashed label="alignment-specifier"]
  248 -> 61 [style=dashed label="attribute-specifier"]
  248 -> 565 [style=dashed label="attribute-specifier-seq"]
  249 [label="State 249\n\l633 module-import-declaration: \"import-keyword\" module-partition • ';'\l634                          | \"import-keyword\" module-partition • attribute-specifier-seq ';'\l"]
  249 -> 566 [style=solid label="';'"]
  249 -> 4 [style=solid label="\"alignas\""]
  249 -> 10 [style=solid label="'['"]
  249 -> 58 [style=dashed label="alignment-specifier"]
  249 -> 61 [style=dashed label="attribute-specifier"]
  249 -> 567 [style=dashed label="attribute-specifier-seq"]
  250 [label="State 250\n\l276 enclosing-namespace-specifier: IDENTIFIER •\l648 named-namespace-definition: \"namespace\" IDENTIFIER • '{' namespace-body '}'\l652 namespace-alias-definition: \"namespace\" IDENTIFIER • '=' qualified-namespace-specifier ';'\l"]
  250 -> 568 [style=solid label="'='"]
  250 -> 569 [style=solid label="'{'"]
  250 -> "250R276" [style=solid]
 "250R276" [label="R276", fillcolor=3, shape=diamond, style=filled]
  251 [label="State 251\n\l1151 unnamed-namespace-definition: \"namespace\" '{' • namespace-body '}'\l"]
  251 -> 1 [style=solid label="IDENTIFIER"]
  251 -> 2 [style=solid label="\"using\""]
  251 -> 3 [style=solid label="';'"]
  251 -> 4 [style=solid label="\"alignas\""]
  251 -> 5 [style=solid label="'('"]
  251 -> 6 [style=solid label="\"...\""]
  251 -> 7 [style=solid label="'&'"]
  251 -> 8 [style=solid label="\"asm\""]
  251 -> 9 [style=solid label="\"::\""]
  251 -> 10 [style=solid label="'['"]
  251 -> 11 [style=solid label="\"virtual\""]
  251 -> 12 [style=solid label="\"class\""]
  251 -> 13 [style=solid label="\"struct\""]
  251 -> 14 [style=solid label="\"union\""]
  251 -> 15 [style=solid label="\"template\""]
  251 -> 16 [style=solid label="\"&&\""]
  251 -> 17 [style=solid label="\"operator\""]
  251 -> 18 [style=solid label="\"const\""]
  251 -> 19 [style=solid label="\"volatile\""]
  251 -> 20 [style=solid label="\"friend\""]
  251 -> 21 [style=solid label="\"typedef\""]
  251 -> 22 [style=solid label="\"constexpr\""]
  251 -> 23 [style=solid label="\"consteval\""]
  251 -> 24 [style=solid label="\"constinit\""]
  251 -> 25 [style=solid label="\"inline\""]
  251 -> 26 [style=solid label="\"decltype\""]
  251 -> 27 [style=solid label="\"enum\""]
  251 -> 28 [style=solid label="\"extern\""]
  251 -> 29 [style=solid label="\"explicit\""]
  251 -> 30 [style=solid label="\"export\""]
  251 -> 158 [style=solid label="\"export-keyword\""]
  251 -> 32 [style=solid label="'*'"]
  251 -> 34 [style=solid label="\"import-keyword\""]
  251 -> 35 [style=solid label="\"namespace\""]
  251 -> 36 [style=solid label="'~'"]
  251 -> 37 [style=solid label="\"auto\""]
  251 -> 38 [style=solid label="\"char\""]
  251 -> 39 [style=solid label="\"char8_t\""]
  251 -> 40 [style=solid label="\"char16_t\""]
  251 -> 41 [style=solid label="\"char32_t\""]
  251 -> 42 [style=solid label="\"wchar_t\""]
  251 -> 43 [style=solid label="\"bool\""]
  251 -> 44 [style=solid label="\"short\""]
  251 -> 45 [style=solid label="\"int\""]
  251 -> 46 [style=solid label="\"long\""]
  251 -> 47 [style=solid label="\"signed\""]
  251 -> 48 [style=solid label="\"unsigned\""]
  251 -> 49 [style=solid label="\"float\""]
  251 -> 50 [style=solid label="\"double\""]
  251 -> 51 [style=solid label="\"void\""]
  251 -> 52 [style=solid label="\"static_assert\""]
  251 -> 53 [style=solid label="\"static\""]
  251 -> 54 [style=solid label="\"thread_local\""]
  251 -> 55 [style=solid label="\"mutable\""]
  251 -> 56 [style=solid label="\"typename\""]
  251 -> 57 [style=dashed label="alias-declaration"]
  251 -> 58 [style=dashed label="alignment-specifier"]
  251 -> 59 [style=dashed label="asm-declaration"]
  251 -> 60 [style=dashed label="attribute-declaration"]
  251 -> 61 [style=dashed label="attribute-specifier"]
  251 -> 62 [style=dashed label="attribute-specifier-seq"]
  251 -> 63 [style=dashed label="block-declaration"]
  251 -> 64 [style=dashed label="class-head"]
  251 -> 65 [style=dashed label="class-key"]
  251 -> 66 [style=dashed label="class-name"]
  251 -> 67 [style=dashed label="class-specifier"]
  251 -> 68 [style=dashed label="concept-name"]
  251 -> 69 [style=dashed label="conversion-function-id"]
  251 -> 70 [style=dashed label="cv-qualifier"]
  251 -> 71 [style=dashed label="decl-specifier"]
  251 -> 72 [style=dashed label="decl-specifier-seq"]
  251 -> 73 [style=dashed label="declaration"]
  251 -> 570 [style=dashed label="declaration-seq"]
  251 -> 75 [style=dashed label="declarator"]
  251 -> 76 [style=dashed label="declarator-id"]
  251 -> 77 [style=dashed label="decltype-specifier"]
  251 -> 78 [style=dashed label="deduction-guide"]
  251 -> 79 [style=dashed label="defining-type-specifier"]
  251 -> 80 [style=dashed label="elaborated-enum-specifier"]
  251 -> 81 [style=dashed label="elaborated-type-specifier"]
  251 -> 82 [style=dashed label="empty-declaration"]
  251 -> 83 [style=dashed label="enum-head"]
  251 -> 84 [style=dashed label="enum-key"]
  251 -> 85 [style=dashed label="enum-name"]
  251 -> 86 [style=dashed label="enum-specifier"]
  251 -> 87 [style=dashed label="explicit-instantiation"]
  251 -> 88 [style=dashed label="explicit-specialization"]
  251 -> 89 [style=dashed label="explicit-specifier"]
  251 -> 90 [style=dashed label="export-declaration"]
  251 -> 91 [style=dashed label="function-definition"]
  251 -> 92 [style=dashed label="function-specifier"]
  251 -> 94 [style=dashed label="id-expression"]
  251 -> 95 [style=dashed label="linkage-specification"]
  251 -> 96 [style=dashed label="literal-operator-id"]
  251 -> 98 [style=dashed label="module-import-declaration"]
  251 -> 99 [style=dashed label="named-namespace-definition"]
  251 -> 100 [style=dashed label="namespace-alias"]
  251 -> 101 [style=dashed label="namespace-alias-definition"]
  251 -> 571 [style=dashed label="namespace-body"]
  251 -> 102 [style=dashed label="namespace-definition"]
  251 -> 103 [style=dashed label="namespace-name"]
  251 -> 104 [style=dashed label="nested-name-specifier"]
  251 -> 105 [style=dashed label="nested-namespace-definition"]
  251 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  251 -> 107 [style=dashed label="noptr-declarator"]
  251 -> 108 [style=dashed label="opaque-enum-declaration"]
  251 -> 109 [style=dashed label="operator-function-id"]
  251 -> 110 [style=dashed label="placeholder-type-specifier"]
  251 -> 111 [style=dashed label="ptr-declarator"]
  251 -> 112 [style=dashed label="ptr-operator"]
  251 -> 113 [style=dashed label="qualified-id"]
  251 -> 114 [style=dashed label="simple-declaration"]
  251 -> 115 [style=dashed label="simple-template-id"]
  251 -> 116 [style=dashed label="simple-type-specifier"]
  251 -> 117 [style=dashed label="static_assert-declaration"]
  251 -> 118 [style=dashed label="storage-class-specifier"]
  251 -> 119 [style=dashed label="template-declaration"]
  251 -> 120 [style=dashed label="template-head"]
  251 -> 121 [style=dashed label="template-id"]
  251 -> 122 [style=dashed label="template-name"]
  251 -> 124 [style=dashed label="type-constraint"]
  251 -> 125 [style=dashed label="type-name"]
  251 -> 126 [style=dashed label="type-specifier"]
  251 -> 127 [style=dashed label="typedef-name"]
  251 -> 128 [style=dashed label="typename-specifier"]
  251 -> 129 [style=dashed label="unnamed-namespace-definition"]
  251 -> 130 [style=dashed label="unqualified-id"]
  251 -> 131 [style=dashed label="using-declaration"]
  251 -> 132 [style=dashed label="using-directive"]
  251 -> 133 [style=dashed label="using-enum-declaration"]
  252 [label="State 252\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l650 named-namespace-definition: \"namespace\" attribute-specifier-seq • IDENTIFIER '{' namespace-body '}'\l1153 unnamed-namespace-definition: \"namespace\" attribute-specifier-seq • '{' namespace-body '}'\l"]
  252 -> 572 [style=solid label="IDENTIFIER"]
  252 -> 4 [style=solid label="\"alignas\""]
  252 -> 10 [style=solid label="'['"]
  252 -> 573 [style=solid label="'{'"]
  252 -> 58 [style=dashed label="alignment-specifier"]
  252 -> 265 [style=dashed label="attribute-specifier"]
  253 [label="State 253\n\l277 enclosing-namespace-specifier: enclosing-namespace-specifier • \"::\" IDENTIFIER\l278                              | enclosing-namespace-specifier • \"::\" \"inline\" IDENTIFIER\l666 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier • \"::\" IDENTIFIER '{' namespace-body '}'\l667                            | \"namespace\" enclosing-namespace-specifier • \"::\" \"inline\" IDENTIFIER '{' namespace-body '}'\l"]
  253 -> 574 [style=solid label="\"::\""]
  254 [label="State 254\n\l145 class-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l"]
  254 -> "254R145" [style=solid]
 "254R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  254 -> "254R297d" [label="[IDENTIFIER, '+', '-', \"using\", '=', ';', \"alignas\", '(', ')', \"...\", '&', \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"::\", '[', ']', ':', '{', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"final\", \"<=>\", \"noexcept\", \"concept\", '?', \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"->\", '.', \"enum\", \"==\", \"!=\", '^', \"extern\", '<', '>', \"explicit\", \"export\", \"export-keyword\", '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", \"requires\", '~', \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\", \"override\"]", style=solid]
 "254R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  254 -> "254R1066d" [label="['<']", style=solid]
 "254R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  254 -> "254R1124d" [label="[IDENTIFIER, '+', '-', \"using\", '=', ';', \"alignas\", '(', ')', \"...\", '&', \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"::\", '[', ']', ':', '{', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"final\", \"<=>\", \"noexcept\", \"concept\", '?', \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"->\", '.', \"enum\", \"==\", \"!=\", '^', \"extern\", '<', '>', \"explicit\", \"export\", \"export-keyword\", '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", \"requires\", '~', \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\", \"override\"]", style=solid]
 "254R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  255 [label="State 255\n\l1159 unqualified-id: '~' decltype-specifier •\l"]
  255 -> "255R1159" [style=solid]
 "255R1159" [label="R1159", fillcolor=3, shape=diamond, style=filled]
  256 [label="State 256\n\l1158 unqualified-id: '~' type-name •\l"]
  256 -> "256R1158" [style=solid]
 "256R1158" [label="R1158", fillcolor=3, shape=diamond, style=filled]
  257 [label="State 257\n\l1038 static_assert-declaration: \"static_assert\" '(' • constant-expression ')' ';'\l1039                          | \"static_assert\" '(' • constant-expression ',' string-literal ')' ';'\l"]
  257 -> 1 [style=solid label="IDENTIFIER"]
  257 -> 361 [style=solid label="'+'"]
  257 -> 362 [style=solid label="'-'"]
  257 -> 363 [style=solid label="'('"]
  257 -> 364 [style=solid label="'&'"]
  257 -> 365 [style=solid label="\"::\""]
  257 -> 366 [style=solid label="'['"]
  257 -> 367 [style=solid label="\"co_await\""]
  257 -> 368 [style=solid label="'0'"]
  257 -> 369 [style=solid label="'1'"]
  257 -> 370 [style=solid label="\"0b\""]
  257 -> 371 [style=solid label="\"0B\""]
  257 -> 372 [style=solid label="'\\''"]
  257 -> 373 [style=solid label="\"false\""]
  257 -> 374 [style=solid label="\"true\""]
  257 -> 375 [style=solid label="\"noexcept\""]
  257 -> 17 [style=solid label="\"operator\""]
  257 -> 26 [style=solid label="\"decltype\""]
  257 -> 376 [style=solid label="\"delete\""]
  257 -> 377 [style=solid label="'.'"]
  257 -> 378 [style=solid label="'2'"]
  257 -> 379 [style=solid label="'3'"]
  257 -> 380 [style=solid label="'4'"]
  257 -> 381 [style=solid label="'5'"]
  257 -> 382 [style=solid label="'6'"]
  257 -> 383 [style=solid label="'7'"]
  257 -> 384 [style=solid label="'8'"]
  257 -> 385 [style=solid label="'9'"]
  257 -> 185 [style=solid label="\"u8\""]
  257 -> 186 [style=solid label="'u'"]
  257 -> 187 [style=solid label="'U'"]
  257 -> 188 [style=solid label="'L'"]
  257 -> 386 [style=solid label="'*'"]
  257 -> 203 [style=solid label="'\"'"]
  257 -> 387 [style=solid label="\"0x\""]
  257 -> 388 [style=solid label="\"0X\""]
  257 -> 389 [style=solid label="\"requires\""]
  257 -> 390 [style=solid label="\"new\""]
  257 -> 391 [style=solid label="'~'"]
  257 -> 392 [style=solid label="'!'"]
  257 -> 393 [style=solid label="\"++\""]
  257 -> 394 [style=solid label="\"--\""]
  257 -> 395 [style=solid label="\"this\""]
  257 -> 37 [style=solid label="\"auto\""]
  257 -> 396 [style=solid label="\"nullptr\""]
  257 -> 397 [style=solid label="\"dynamic_cast\""]
  257 -> 398 [style=solid label="\"static_cast\""]
  257 -> 399 [style=solid label="\"reinterpret_cast\""]
  257 -> 400 [style=solid label="\"const_cast\""]
  257 -> 401 [style=solid label="\"typeid\""]
  257 -> 38 [style=solid label="\"char\""]
  257 -> 39 [style=solid label="\"char8_t\""]
  257 -> 40 [style=solid label="\"char16_t\""]
  257 -> 41 [style=solid label="\"char32_t\""]
  257 -> 42 [style=solid label="\"wchar_t\""]
  257 -> 43 [style=solid label="\"bool\""]
  257 -> 44 [style=solid label="\"short\""]
  257 -> 45 [style=solid label="\"int\""]
  257 -> 46 [style=solid label="\"long\""]
  257 -> 47 [style=solid label="\"signed\""]
  257 -> 48 [style=solid label="\"unsigned\""]
  257 -> 49 [style=solid label="\"float\""]
  257 -> 50 [style=solid label="\"double\""]
  257 -> 51 [style=solid label="\"void\""]
  257 -> 209 [style=solid label="'R'"]
  257 -> 56 [style=solid label="\"typename\""]
  257 -> 402 [style=solid label="\"sizeof\""]
  257 -> 403 [style=solid label="\"alignof\""]
  257 -> 404 [style=dashed label="additive-expression"]
  257 -> 405 [style=dashed label="and-expression"]
  257 -> 406 [style=dashed label="await-expression"]
  257 -> 407 [style=dashed label="binary-literal"]
  257 -> 408 [style=dashed label="boolean-literal"]
  257 -> 409 [style=dashed label="cast-expression"]
  257 -> 410 [style=dashed label="character-literal"]
  257 -> 66 [style=dashed label="class-name"]
  257 -> 411 [style=dashed label="compare-expression"]
  257 -> 68 [style=dashed label="concept-name"]
  257 -> 412 [style=dashed label="conditional-expression"]
  257 -> 575 [style=dashed label="constant-expression"]
  257 -> 69 [style=dashed label="conversion-function-id"]
  257 -> 414 [style=dashed label="decimal-floating-point-literal"]
  257 -> 415 [style=dashed label="decimal-literal"]
  257 -> 77 [style=dashed label="decltype-specifier"]
  257 -> 416 [style=dashed label="delete-expression"]
  257 -> 417 [style=dashed label="digit"]
  257 -> 418 [style=dashed label="digit-sequence"]
  257 -> 419 [style=dashed label="encoding-prefix"]
  257 -> 85 [style=dashed label="enum-name"]
  257 -> 420 [style=dashed label="equality-expression"]
  257 -> 421 [style=dashed label="exclusive-or-expression"]
  257 -> 422 [style=dashed label="floating-point-literal"]
  257 -> 423 [style=dashed label="fold-expression"]
  257 -> 424 [style=dashed label="fractional-constant"]
  257 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  257 -> 426 [style=dashed label="hexadecimal-literal"]
  257 -> 427 [style=dashed label="hexadecimal-prefix"]
  257 -> 428 [style=dashed label="id-expression"]
  257 -> 429 [style=dashed label="inclusive-or-expression"]
  257 -> 430 [style=dashed label="integer-literal"]
  257 -> 431 [style=dashed label="lambda-expression"]
  257 -> 432 [style=dashed label="lambda-introducer"]
  257 -> 433 [style=dashed label="literal"]
  257 -> 96 [style=dashed label="literal-operator-id"]
  257 -> 434 [style=dashed label="logical-and-expression"]
  257 -> 435 [style=dashed label="logical-or-expression"]
  257 -> 436 [style=dashed label="multiplicative-expression"]
  257 -> 100 [style=dashed label="namespace-alias"]
  257 -> 103 [style=dashed label="namespace-name"]
  257 -> 437 [style=dashed label="nested-name-specifier"]
  257 -> 438 [style=dashed label="new-expression"]
  257 -> 439 [style=dashed label="noexcept-expression"]
  257 -> 440 [style=dashed label="nonzero-digit"]
  257 -> 441 [style=dashed label="octal-literal"]
  257 -> 109 [style=dashed label="operator-function-id"]
  257 -> 110 [style=dashed label="placeholder-type-specifier"]
  257 -> 442 [style=dashed label="pm-expression"]
  257 -> 443 [style=dashed label="pointer-literal"]
  257 -> 444 [style=dashed label="postfix-expression"]
  257 -> 445 [style=dashed label="primary-expression"]
  257 -> 113 [style=dashed label="qualified-id"]
  257 -> 446 [style=dashed label="relational-expression"]
  257 -> 447 [style=dashed label="requires-expression"]
  257 -> 448 [style=dashed label="shift-expression"]
  257 -> 115 [style=dashed label="simple-template-id"]
  257 -> 534 [style=dashed label="simple-type-specifier"]
  257 -> 450 [style=dashed label="string-literal"]
  257 -> 121 [style=dashed label="template-id"]
  257 -> 216 [style=dashed label="template-name"]
  257 -> 124 [style=dashed label="type-constraint"]
  257 -> 125 [style=dashed label="type-name"]
  257 -> 127 [style=dashed label="typedef-name"]
  257 -> 536 [style=dashed label="typename-specifier"]
  257 -> 454 [style=dashed label="unary-expression"]
  257 -> 455 [style=dashed label="unary-operator"]
  257 -> 130 [style=dashed label="unqualified-id"]
  257 -> 456 [style=dashed label="user-defined-character-literal"]
  257 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  257 -> 458 [style=dashed label="user-defined-integer-literal"]
  257 -> 459 [style=dashed label="user-defined-literal"]
  257 -> 460 [style=dashed label="user-defined-string-literal"]
  258 [label="State 258\n\l145 class-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l"]
  258 -> "258R145" [style=solid]
 "258R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  258 -> "258R297d" [label="[';', \"...\", ',', \"::\", '{']", style=solid]
 "258R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  258 -> "258R651d" [label="[';', \"::\"]", style=solid]
 "258R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  258 -> "258R657d" [label="[';', \"::\"]", style=solid]
 "258R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  258 -> "258R1066" [label="['<']", style=solid]
 "258R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  258 -> "258R1124d" [label="[';', \"...\", ',', \"::\", '{']", style=solid]
 "258R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  259 [label="State 259\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l1126 typename-specifier: \"typename\" nested-name-specifier • IDENTIFIER\l1127                   | \"typename\" nested-name-specifier • simple-template-id\l1128                   | \"typename\" nested-name-specifier • \"template\" simple-template-id\l"]
  259 -> 576 [style=solid label="IDENTIFIER"]
  259 -> 577 [style=solid label="\"template\""]
  259 -> 578 [style=dashed label="simple-template-id"]
  259 -> 143 [style=dashed label="template-name"]
  260 [label="State 260\n\l1185 using-directive: attribute-specifier-seq \"using\" • \"namespace\" namespace-name ';'\l1187                | attribute-specifier-seq \"using\" • \"namespace\" nested-name-specifier namespace-name ';'\l"]
  260 -> 579 [style=solid label="\"namespace\""]
  261 [label="State 261\n\l 42 attribute-declaration: attribute-specifier-seq ';' •\l"]
  261 -> "261R42" [style=solid]
 "261R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  262 [label="State 262\n\l 21 asm-declaration: attribute-specifier-seq \"asm\" • '(' string-literal ')' ';'\l"]
  262 -> 580 [style=solid label="'('"]
  263 [label="State 263\n\l209 decl-specifier: \"inline\" •\l"]
  263 -> "263R209" [style=solid]
 "263R209" [label="R209", fillcolor=3, shape=diamond, style=filled]
  264 [label="State 264\n\l1042 storage-class-specifier: \"extern\" •\l"]
  264 -> "264R1042" [style=solid]
 "264R1042" [label="R1042", fillcolor=3, shape=diamond, style=filled]
  265 [label="State 265\n\l 53 attribute-specifier-seq: attribute-specifier-seq attribute-specifier •\l"]
  265 -> "265R53" [style=solid]
 "265R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  266 [label="State 266\n\l400 function-definition: attribute-specifier-seq decl-specifier-seq • declarator function-body\l404                    | attribute-specifier-seq decl-specifier-seq • declarator virt-specifier-seq function-body\l408                    | attribute-specifier-seq decl-specifier-seq • declarator requires-clause function-body\l979 simple-declaration: attribute-specifier-seq decl-specifier-seq • init-declarator-list ';'\l980                   | attribute-specifier-seq decl-specifier-seq • '[' identifier-list ']' initializer ';'\l982                   | attribute-specifier-seq decl-specifier-seq • ref-qualifier '[' identifier-list ']' initializer ';'\l"]
  266 -> 148 [style=solid label="IDENTIFIER"]
  266 -> 5 [style=solid label="'('"]
  266 -> 6 [style=solid label="\"...\""]
  266 -> 283 [style=solid label="'&'"]
  266 -> 9 [style=solid label="\"::\""]
  266 -> 581 [style=solid label="'['"]
  266 -> 285 [style=solid label="\"&&\""]
  266 -> 17 [style=solid label="\"operator\""]
  266 -> 135 [style=solid label="\"decltype\""]
  266 -> 32 [style=solid label="'*'"]
  266 -> 36 [style=solid label="'~'"]
  266 -> 66 [style=dashed label="class-name"]
  266 -> 69 [style=dashed label="conversion-function-id"]
  266 -> 582 [style=dashed label="declarator"]
  266 -> 76 [style=dashed label="declarator-id"]
  266 -> 139 [style=dashed label="decltype-specifier"]
  266 -> 85 [style=dashed label="enum-name"]
  266 -> 94 [style=dashed label="id-expression"]
  266 -> 287 [style=dashed label="init-declarator"]
  266 -> 583 [style=dashed label="init-declarator-list"]
  266 -> 96 [style=dashed label="literal-operator-id"]
  266 -> 100 [style=dashed label="namespace-alias"]
  266 -> 103 [style=dashed label="namespace-name"]
  266 -> 149 [style=dashed label="nested-name-specifier"]
  266 -> 107 [style=dashed label="noptr-declarator"]
  266 -> 109 [style=dashed label="operator-function-id"]
  266 -> 111 [style=dashed label="ptr-declarator"]
  266 -> 112 [style=dashed label="ptr-operator"]
  266 -> 113 [style=dashed label="qualified-id"]
  266 -> 584 [style=dashed label="ref-qualifier"]
  266 -> 115 [style=dashed label="simple-template-id"]
  266 -> 121 [style=dashed label="template-id"]
  266 -> 143 [style=dashed label="template-name"]
  266 -> 144 [style=dashed label="type-name"]
  266 -> 127 [style=dashed label="typedef-name"]
  266 -> 130 [style=dashed label="unqualified-id"]
  267 [label="State 267\n\l398 function-definition: attribute-specifier-seq declarator • function-body\l402                    | attribute-specifier-seq declarator • virt-specifier-seq function-body\l406                    | attribute-specifier-seq declarator • requires-clause function-body\l694 nodeclspec-function-declaration: attribute-specifier-seq declarator • ';'\l"]
  267 -> 291 [style=solid label="'='"]
  267 -> 585 [style=solid label="';'"]
  267 -> 293 [style=solid label="':'"]
  267 -> 294 [style=solid label="'{'"]
  267 -> 295 [style=solid label="\"final\""]
  267 -> 296 [style=solid label="\"try\""]
  267 -> 297 [style=solid label="\"requires\""]
  267 -> 298 [style=solid label="\"override\""]
  267 -> 299 [style=dashed label="compound-statement"]
  267 -> 300 [style=dashed label="ctor-initializer"]
  267 -> 586 [style=dashed label="function-body"]
  267 -> 302 [style=dashed label="function-try-block"]
  267 -> 587 [style=dashed label="requires-clause"]
  267 -> 304 [style=dashed label="virt-specifier"]
  267 -> 588 [style=dashed label="virt-specifier-seq"]
  268 [label="State 268\n\l284 enum-head: enum-key •\l285          | enum-key • attribute-specifier-seq\l286          | enum-key • enum-head-name\l287          | enum-key • attribute-specifier-seq enum-head-name\l288          | enum-key • enum-base\l289          | enum-key • attribute-specifier-seq enum-base\l290          | enum-key • enum-head-name enum-base\l291          | enum-key • attribute-specifier-seq enum-head-name enum-base\l"]
  268 -> 309 [style=solid label="IDENTIFIER"]
  268 -> 4 [style=solid label="\"alignas\""]
  268 -> 9 [style=solid label="\"::\""]
  268 -> 10 [style=solid label="'['"]
  268 -> 310 [style=solid label="':'"]
  268 -> 135 [style=solid label="\"decltype\""]
  268 -> 58 [style=dashed label="alignment-specifier"]
  268 -> 61 [style=dashed label="attribute-specifier"]
  268 -> 589 [style=dashed label="attribute-specifier-seq"]
  268 -> 66 [style=dashed label="class-name"]
  268 -> 139 [style=dashed label="decltype-specifier"]
  268 -> 312 [style=dashed label="enum-base"]
  268 -> 590 [style=dashed label="enum-head-name"]
  268 -> 85 [style=dashed label="enum-name"]
  268 -> 100 [style=dashed label="namespace-alias"]
  268 -> 103 [style=dashed label="namespace-name"]
  268 -> 314 [style=dashed label="nested-name-specifier"]
  268 -> 142 [style=dashed label="simple-template-id"]
  268 -> 143 [style=dashed label="template-name"]
  268 -> 144 [style=dashed label="type-name"]
  268 -> 127 [style=dashed label="typedef-name"]
  268 -> "268R284" [style=solid]
 "268R284" [label="R284", fillcolor=3, shape=diamond, style=filled]
  269 [label="State 269\n\l411 function-specifier: explicit-specifier •\l"]
  269 -> "269R411" [style=solid]
 "269R411" [label="R411", fillcolor=3, shape=diamond, style=filled]
  270 [label="State 270\n\l151 class-specifier: class-head '{' • '}'\l152                | class-head '{' • member-specification '}'\l"]
  270 -> 591 [style=solid label="IDENTIFIER"]
  270 -> 592 [style=solid label="\"private\""]
  270 -> 593 [style=solid label="\"protected\""]
  270 -> 594 [style=solid label="\"public\""]
  270 -> 595 [style=solid label="\"using\""]
  270 -> 596 [style=solid label="';'"]
  270 -> 4 [style=solid label="\"alignas\""]
  270 -> 5 [style=solid label="'('"]
  270 -> 6 [style=solid label="\"...\""]
  270 -> 7 [style=solid label="'&'"]
  270 -> 9 [style=solid label="\"::\""]
  270 -> 10 [style=solid label="'['"]
  270 -> 597 [style=solid label="':'"]
  270 -> 598 [style=solid label="'}'"]
  270 -> 11 [style=solid label="\"virtual\""]
  270 -> 12 [style=solid label="\"class\""]
  270 -> 13 [style=solid label="\"struct\""]
  270 -> 14 [style=solid label="\"union\""]
  270 -> 599 [style=solid label="\"template\""]
  270 -> 16 [style=solid label="\"&&\""]
  270 -> 17 [style=solid label="\"operator\""]
  270 -> 18 [style=solid label="\"const\""]
  270 -> 19 [style=solid label="\"volatile\""]
  270 -> 20 [style=solid label="\"friend\""]
  270 -> 21 [style=solid label="\"typedef\""]
  270 -> 22 [style=solid label="\"constexpr\""]
  270 -> 23 [style=solid label="\"consteval\""]
  270 -> 24 [style=solid label="\"constinit\""]
  270 -> 263 [style=solid label="\"inline\""]
  270 -> 26 [style=solid label="\"decltype\""]
  270 -> 27 [style=solid label="\"enum\""]
  270 -> 264 [style=solid label="\"extern\""]
  270 -> 29 [style=solid label="\"explicit\""]
  270 -> 32 [style=solid label="'*'"]
  270 -> 36 [style=solid label="'~'"]
  270 -> 37 [style=solid label="\"auto\""]
  270 -> 38 [style=solid label="\"char\""]
  270 -> 39 [style=solid label="\"char8_t\""]
  270 -> 40 [style=solid label="\"char16_t\""]
  270 -> 41 [style=solid label="\"char32_t\""]
  270 -> 42 [style=solid label="\"wchar_t\""]
  270 -> 43 [style=solid label="\"bool\""]
  270 -> 44 [style=solid label="\"short\""]
  270 -> 45 [style=solid label="\"int\""]
  270 -> 46 [style=solid label="\"long\""]
  270 -> 47 [style=solid label="\"signed\""]
  270 -> 48 [style=solid label="\"unsigned\""]
  270 -> 49 [style=solid label="\"float\""]
  270 -> 50 [style=solid label="\"double\""]
  270 -> 51 [style=solid label="\"void\""]
  270 -> 52 [style=solid label="\"static_assert\""]
  270 -> 53 [style=solid label="\"static\""]
  270 -> 54 [style=solid label="\"thread_local\""]
  270 -> 55 [style=solid label="\"mutable\""]
  270 -> 56 [style=solid label="\"typename\""]
  270 -> 600 [style=dashed label="access-specifier"]
  270 -> 601 [style=dashed label="alias-declaration"]
  270 -> 58 [style=dashed label="alignment-specifier"]
  270 -> 61 [style=dashed label="attribute-specifier"]
  270 -> 602 [style=dashed label="attribute-specifier-seq"]
  270 -> 64 [style=dashed label="class-head"]
  270 -> 65 [style=dashed label="class-key"]
  270 -> 66 [style=dashed label="class-name"]
  270 -> 67 [style=dashed label="class-specifier"]
  270 -> 68 [style=dashed label="concept-name"]
  270 -> 69 [style=dashed label="conversion-function-id"]
  270 -> 70 [style=dashed label="cv-qualifier"]
  270 -> 71 [style=dashed label="decl-specifier"]
  270 -> 603 [style=dashed label="decl-specifier-seq"]
  270 -> 604 [style=dashed label="declarator"]
  270 -> 76 [style=dashed label="declarator-id"]
  270 -> 77 [style=dashed label="decltype-specifier"]
  270 -> 605 [style=dashed label="deduction-guide"]
  270 -> 79 [style=dashed label="defining-type-specifier"]
  270 -> 80 [style=dashed label="elaborated-enum-specifier"]
  270 -> 81 [style=dashed label="elaborated-type-specifier"]
  270 -> 606 [style=dashed label="empty-declaration"]
  270 -> 83 [style=dashed label="enum-head"]
  270 -> 84 [style=dashed label="enum-key"]
  270 -> 85 [style=dashed label="enum-name"]
  270 -> 86 [style=dashed label="enum-specifier"]
  270 -> 607 [style=dashed label="explicit-specialization"]
  270 -> 89 [style=dashed label="explicit-specifier"]
  270 -> 608 [style=dashed label="function-definition"]
  270 -> 92 [style=dashed label="function-specifier"]
  270 -> 94 [style=dashed label="id-expression"]
  270 -> 96 [style=dashed label="literal-operator-id"]
  270 -> 609 [style=dashed label="member-declaration"]
  270 -> 610 [style=dashed label="member-declarator"]
  270 -> 611 [style=dashed label="member-declarator-list"]
  270 -> 612 [style=dashed label="member-specification"]
  270 -> 100 [style=dashed label="namespace-alias"]
  270 -> 103 [style=dashed label="namespace-name"]
  270 -> 104 [style=dashed label="nested-name-specifier"]
  270 -> 107 [style=dashed label="noptr-declarator"]
  270 -> 613 [style=dashed label="opaque-enum-declaration"]
  270 -> 109 [style=dashed label="operator-function-id"]
  270 -> 110 [style=dashed label="placeholder-type-specifier"]
  270 -> 111 [style=dashed label="ptr-declarator"]
  270 -> 112 [style=dashed label="ptr-operator"]
  270 -> 113 [style=dashed label="qualified-id"]
  270 -> 115 [style=dashed label="simple-template-id"]
  270 -> 116 [style=dashed label="simple-type-specifier"]
  270 -> 614 [style=dashed label="static_assert-declaration"]
  270 -> 118 [style=dashed label="storage-class-specifier"]
  270 -> 615 [style=dashed label="template-declaration"]
  270 -> 120 [style=dashed label="template-head"]
  270 -> 121 [style=dashed label="template-id"]
  270 -> 122 [style=dashed label="template-name"]
  270 -> 124 [style=dashed label="type-constraint"]
  270 -> 125 [style=dashed label="type-name"]
  270 -> 126 [style=dashed label="type-specifier"]
  270 -> 127 [style=dashed label="typedef-name"]
  270 -> 128 [style=dashed label="typename-specifier"]
  270 -> 130 [style=dashed label="unqualified-id"]
  270 -> 616 [style=dashed label="using-declaration"]
  270 -> 617 [style=dashed label="using-enum-declaration"]
  271 [label="State 271\n\l145 class-name: IDENTIFIER •\l267 elaborated-type-specifier: class-key IDENTIFIER •\l297 enum-name: IDENTIFIER •\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l"]
  271 -> "271R145" [label="[\"::\", ':', '{', \"final\"]", style=solid]
 "271R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  271 -> "271R267d" [label="[\"::\", ':', '{', \"final\"]", style=solid]
 "271R267d" [label="R267", fillcolor=5, shape=diamond, style=filled]
  271 -> "271R267" [style=solid]
 "271R267" [label="R267", fillcolor=3, shape=diamond, style=filled]
  271 -> "271R297d" [label="[\"::\"]", style=solid]
 "271R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  271 -> "271R651d" [label="[\"::\"]", style=solid]
 "271R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  271 -> "271R657d" [label="[\"::\"]", style=solid]
 "271R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  271 -> "271R1066d" [label="['<']", style=solid]
 "271R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  271 -> "271R1124d" [label="[\"::\"]", style=solid]
 "271R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  272 [label="State 272\n\l 68 base-clause: ':' • base-specifier-list\l"]
  272 -> 258 [style=solid label="IDENTIFIER"]
  272 -> 592 [style=solid label="\"private\""]
  272 -> 593 [style=solid label="\"protected\""]
  272 -> 594 [style=solid label="\"public\""]
  272 -> 4 [style=solid label="\"alignas\""]
  272 -> 9 [style=solid label="\"::\""]
  272 -> 10 [style=solid label="'['"]
  272 -> 618 [style=solid label="\"virtual\""]
  272 -> 135 [style=solid label="\"decltype\""]
  272 -> 619 [style=dashed label="access-specifier"]
  272 -> 58 [style=dashed label="alignment-specifier"]
  272 -> 61 [style=dashed label="attribute-specifier"]
  272 -> 620 [style=dashed label="attribute-specifier-seq"]
  272 -> 621 [style=dashed label="base-specifier"]
  272 -> 622 [style=dashed label="base-specifier-list"]
  272 -> 66 [style=dashed label="class-name"]
  272 -> 623 [style=dashed label="class-or-decltype"]
  272 -> 624 [style=dashed label="decltype-specifier"]
  272 -> 85 [style=dashed label="enum-name"]
  272 -> 100 [style=dashed label="namespace-alias"]
  272 -> 103 [style=dashed label="namespace-name"]
  272 -> 625 [style=dashed label="nested-name-specifier"]
  272 -> 142 [style=dashed label="simple-template-id"]
  272 -> 143 [style=dashed label="template-name"]
  272 -> 626 [style=dashed label="type-name"]
  272 -> 127 [style=dashed label="typedef-name"]
  273 [label="State 273\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l129 class-head: class-key attribute-specifier-seq • class-head-name\l131           | class-key attribute-specifier-seq • class-head-name class-virt-specifier\l133           | class-key attribute-specifier-seq • class-head-name base-clause\l135           | class-key attribute-specifier-seq • class-head-name class-virt-specifier base-clause\l137           | class-key attribute-specifier-seq •\l139           | class-key attribute-specifier-seq • base-clause\l268 elaborated-type-specifier: class-key attribute-specifier-seq • IDENTIFIER\l270                          | class-key attribute-specifier-seq • nested-name-specifier IDENTIFIER\l"]
  273 -> 627 [style=solid label="IDENTIFIER"]
  273 -> 4 [style=solid label="\"alignas\""]
  273 -> 9 [style=solid label="\"::\""]
  273 -> 10 [style=solid label="'['"]
  273 -> 272 [style=solid label="':'"]
  273 -> 135 [style=solid label="\"decltype\""]
  273 -> 58 [style=dashed label="alignment-specifier"]
  273 -> 265 [style=dashed label="attribute-specifier"]
  273 -> 628 [style=dashed label="base-clause"]
  273 -> 629 [style=dashed label="class-head-name"]
  273 -> 276 [style=dashed label="class-name"]
  273 -> 139 [style=dashed label="decltype-specifier"]
  273 -> 85 [style=dashed label="enum-name"]
  273 -> 100 [style=dashed label="namespace-alias"]
  273 -> 103 [style=dashed label="namespace-name"]
  273 -> 630 [style=dashed label="nested-name-specifier"]
  273 -> 142 [style=dashed label="simple-template-id"]
  273 -> 143 [style=dashed label="template-name"]
  273 -> 144 [style=dashed label="type-name"]
  273 -> 127 [style=dashed label="typedef-name"]
  273 -> "273R137" [style=solid]
 "273R137" [label="R137", fillcolor=3, shape=diamond, style=filled]
  274 [label="State 274\n\l138 class-head: class-key base-clause •\l"]
  274 -> "274R138" [style=solid]
 "274R138" [label="R138", fillcolor=3, shape=diamond, style=filled]
  275 [label="State 275\n\l128 class-head: class-key class-head-name •\l130           | class-key class-head-name • class-virt-specifier\l132           | class-key class-head-name • base-clause\l134           | class-key class-head-name • class-virt-specifier base-clause\l"]
  275 -> 272 [style=solid label="':'"]
  275 -> 631 [style=solid label="\"final\""]
  275 -> 632 [style=dashed label="base-clause"]
  275 -> 633 [style=dashed label="class-virt-specifier"]
  275 -> "275R128" [style=solid]
 "275R128" [label="R128", fillcolor=3, shape=diamond, style=filled]
  276 [label="State 276\n\l141 class-head-name: class-name •\l1092 type-name: class-name •\l"]
  276 -> "276R141" [style=solid]
 "276R141" [label="R141", fillcolor=3, shape=diamond, style=filled]
  276 -> "276R1092" [label="[\"::\"]", style=solid]
 "276R1092" [label="R1092", fillcolor=3, shape=diamond, style=filled]
  277 [label="State 277\n\l140 class-head-name: nested-name-specifier • class-name\l269 elaborated-type-specifier: class-key nested-name-specifier • IDENTIFIER\l272                          | class-key nested-name-specifier • simple-template-id\l273                          | class-key nested-name-specifier • \"template\" simple-template-id\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l"]
  277 -> 634 [style=solid label="IDENTIFIER"]
  277 -> 635 [style=solid label="\"template\""]
  277 -> 636 [style=dashed label="class-name"]
  277 -> 637 [style=dashed label="simple-template-id"]
  277 -> 143 [style=dashed label="template-name"]
  278 [label="State 278\n\l146 class-name: simple-template-id •\l271 elaborated-type-specifier: class-key simple-template-id •\l1125 typedef-name: simple-template-id •\l"]
  278 -> "278R146" [label="[\"::\", ':', '{', \"final\"]", style=solid]
 "278R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  278 -> "278R271d" [label="[\"::\", ':', '{', \"final\"]", style=solid]
 "278R271d" [label="R271", fillcolor=5, shape=diamond, style=filled]
  278 -> "278R271" [style=solid]
 "278R271" [label="R271", fillcolor=3, shape=diamond, style=filled]
  278 -> "278R1125d" [label="[\"::\"]", style=solid]
 "278R1125d" [label="R1125", fillcolor=5, shape=diamond, style=filled]
  279 [label="State 279\n\l1087 type-constraint: concept-name '<' • '>'\l1089                | concept-name '<' • template-argument-list '>'\l"]
  279 -> 1 [style=solid label="IDENTIFIER"]
  279 -> 361 [style=solid label="'+'"]
  279 -> 362 [style=solid label="'-'"]
  279 -> 363 [style=solid label="'('"]
  279 -> 364 [style=solid label="'&'"]
  279 -> 365 [style=solid label="\"::\""]
  279 -> 366 [style=solid label="'['"]
  279 -> 367 [style=solid label="\"co_await\""]
  279 -> 368 [style=solid label="'0'"]
  279 -> 369 [style=solid label="'1'"]
  279 -> 370 [style=solid label="\"0b\""]
  279 -> 371 [style=solid label="\"0B\""]
  279 -> 372 [style=solid label="'\\''"]
  279 -> 373 [style=solid label="\"false\""]
  279 -> 374 [style=solid label="\"true\""]
  279 -> 12 [style=solid label="\"class\""]
  279 -> 13 [style=solid label="\"struct\""]
  279 -> 14 [style=solid label="\"union\""]
  279 -> 375 [style=solid label="\"noexcept\""]
  279 -> 17 [style=solid label="\"operator\""]
  279 -> 18 [style=solid label="\"const\""]
  279 -> 19 [style=solid label="\"volatile\""]
  279 -> 26 [style=solid label="\"decltype\""]
  279 -> 376 [style=solid label="\"delete\""]
  279 -> 377 [style=solid label="'.'"]
  279 -> 378 [style=solid label="'2'"]
  279 -> 379 [style=solid label="'3'"]
  279 -> 380 [style=solid label="'4'"]
  279 -> 381 [style=solid label="'5'"]
  279 -> 382 [style=solid label="'6'"]
  279 -> 383 [style=solid label="'7'"]
  279 -> 384 [style=solid label="'8'"]
  279 -> 385 [style=solid label="'9'"]
  279 -> 136 [style=solid label="\"enum\""]
  279 -> 185 [style=solid label="\"u8\""]
  279 -> 186 [style=solid label="'u'"]
  279 -> 187 [style=solid label="'U'"]
  279 -> 188 [style=solid label="'L'"]
  279 -> 638 [style=solid label="'>'"]
  279 -> 386 [style=solid label="'*'"]
  279 -> 203 [style=solid label="'\"'"]
  279 -> 387 [style=solid label="\"0x\""]
  279 -> 388 [style=solid label="\"0X\""]
  279 -> 389 [style=solid label="\"requires\""]
  279 -> 390 [style=solid label="\"new\""]
  279 -> 391 [style=solid label="'~'"]
  279 -> 392 [style=solid label="'!'"]
  279 -> 393 [style=solid label="\"++\""]
  279 -> 394 [style=solid label="\"--\""]
  279 -> 395 [style=solid label="\"this\""]
  279 -> 37 [style=solid label="\"auto\""]
  279 -> 396 [style=solid label="\"nullptr\""]
  279 -> 397 [style=solid label="\"dynamic_cast\""]
  279 -> 398 [style=solid label="\"static_cast\""]
  279 -> 399 [style=solid label="\"reinterpret_cast\""]
  279 -> 400 [style=solid label="\"const_cast\""]
  279 -> 401 [style=solid label="\"typeid\""]
  279 -> 38 [style=solid label="\"char\""]
  279 -> 39 [style=solid label="\"char8_t\""]
  279 -> 40 [style=solid label="\"char16_t\""]
  279 -> 41 [style=solid label="\"char32_t\""]
  279 -> 42 [style=solid label="\"wchar_t\""]
  279 -> 43 [style=solid label="\"bool\""]
  279 -> 44 [style=solid label="\"short\""]
  279 -> 45 [style=solid label="\"int\""]
  279 -> 46 [style=solid label="\"long\""]
  279 -> 47 [style=solid label="\"signed\""]
  279 -> 48 [style=solid label="\"unsigned\""]
  279 -> 49 [style=solid label="\"float\""]
  279 -> 50 [style=solid label="\"double\""]
  279 -> 51 [style=solid label="\"void\""]
  279 -> 209 [style=solid label="'R'"]
  279 -> 56 [style=solid label="\"typename\""]
  279 -> 402 [style=solid label="\"sizeof\""]
  279 -> 403 [style=solid label="\"alignof\""]
  279 -> 404 [style=dashed label="additive-expression"]
  279 -> 405 [style=dashed label="and-expression"]
  279 -> 406 [style=dashed label="await-expression"]
  279 -> 407 [style=dashed label="binary-literal"]
  279 -> 408 [style=dashed label="boolean-literal"]
  279 -> 409 [style=dashed label="cast-expression"]
  279 -> 410 [style=dashed label="character-literal"]
  279 -> 210 [style=dashed label="class-key"]
  279 -> 66 [style=dashed label="class-name"]
  279 -> 411 [style=dashed label="compare-expression"]
  279 -> 68 [style=dashed label="concept-name"]
  279 -> 412 [style=dashed label="conditional-expression"]
  279 -> 639 [style=dashed label="constant-expression"]
  279 -> 69 [style=dashed label="conversion-function-id"]
  279 -> 70 [style=dashed label="cv-qualifier"]
  279 -> 414 [style=dashed label="decimal-floating-point-literal"]
  279 -> 415 [style=dashed label="decimal-literal"]
  279 -> 77 [style=dashed label="decltype-specifier"]
  279 -> 416 [style=dashed label="delete-expression"]
  279 -> 417 [style=dashed label="digit"]
  279 -> 418 [style=dashed label="digit-sequence"]
  279 -> 80 [style=dashed label="elaborated-enum-specifier"]
  279 -> 81 [style=dashed label="elaborated-type-specifier"]
  279 -> 419 [style=dashed label="encoding-prefix"]
  279 -> 85 [style=dashed label="enum-name"]
  279 -> 420 [style=dashed label="equality-expression"]
  279 -> 421 [style=dashed label="exclusive-or-expression"]
  279 -> 422 [style=dashed label="floating-point-literal"]
  279 -> 423 [style=dashed label="fold-expression"]
  279 -> 424 [style=dashed label="fractional-constant"]
  279 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  279 -> 426 [style=dashed label="hexadecimal-literal"]
  279 -> 427 [style=dashed label="hexadecimal-prefix"]
  279 -> 640 [style=dashed label="id-expression"]
  279 -> 429 [style=dashed label="inclusive-or-expression"]
  279 -> 430 [style=dashed label="integer-literal"]
  279 -> 431 [style=dashed label="lambda-expression"]
  279 -> 432 [style=dashed label="lambda-introducer"]
  279 -> 433 [style=dashed label="literal"]
  279 -> 96 [style=dashed label="literal-operator-id"]
  279 -> 434 [style=dashed label="logical-and-expression"]
  279 -> 435 [style=dashed label="logical-or-expression"]
  279 -> 436 [style=dashed label="multiplicative-expression"]
  279 -> 100 [style=dashed label="namespace-alias"]
  279 -> 103 [style=dashed label="namespace-name"]
  279 -> 437 [style=dashed label="nested-name-specifier"]
  279 -> 438 [style=dashed label="new-expression"]
  279 -> 439 [style=dashed label="noexcept-expression"]
  279 -> 440 [style=dashed label="nonzero-digit"]
  279 -> 441 [style=dashed label="octal-literal"]
  279 -> 109 [style=dashed label="operator-function-id"]
  279 -> 110 [style=dashed label="placeholder-type-specifier"]
  279 -> 442 [style=dashed label="pm-expression"]
  279 -> 443 [style=dashed label="pointer-literal"]
  279 -> 444 [style=dashed label="postfix-expression"]
  279 -> 445 [style=dashed label="primary-expression"]
  279 -> 113 [style=dashed label="qualified-id"]
  279 -> 446 [style=dashed label="relational-expression"]
  279 -> 447 [style=dashed label="requires-expression"]
  279 -> 448 [style=dashed label="shift-expression"]
  279 -> 115 [style=dashed label="simple-template-id"]
  279 -> 449 [style=dashed label="simple-type-specifier"]
  279 -> 450 [style=dashed label="string-literal"]
  279 -> 641 [style=dashed label="template-argument"]
  279 -> 642 [style=dashed label="template-argument-list"]
  279 -> 121 [style=dashed label="template-id"]
  279 -> 216 [style=dashed label="template-name"]
  279 -> 124 [style=dashed label="type-constraint"]
  279 -> 643 [style=dashed label="type-id"]
  279 -> 125 [style=dashed label="type-name"]
  279 -> 217 [style=dashed label="type-specifier"]
  279 -> 452 [style=dashed label="type-specifier-seq"]
  279 -> 127 [style=dashed label="typedef-name"]
  279 -> 453 [style=dashed label="typename-specifier"]
  279 -> 454 [style=dashed label="unary-expression"]
  279 -> 455 [style=dashed label="unary-operator"]
  279 -> 130 [style=dashed label="unqualified-id"]
  279 -> 456 [style=dashed label="user-defined-character-literal"]
  279 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  279 -> 458 [style=dashed label="user-defined-integer-literal"]
  279 -> 459 [style=dashed label="user-defined-literal"]
  279 -> 460 [style=dashed label="user-defined-string-literal"]
  280 [label="State 280\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l211 decl-specifier-seq: decl-specifier attribute-specifier-seq •\l"]
  280 -> 4 [style=solid label="\"alignas\""]
  280 -> 10 [style=solid label="'['"]
  280 -> 58 [style=dashed label="alignment-specifier"]
  280 -> 265 [style=dashed label="attribute-specifier"]
  280 -> "280R211d" [label="[\"alignas\", '[']", style=solid]
 "280R211d" [label="R211", fillcolor=5, shape=diamond, style=filled]
  280 -> "280R211" [style=solid]
 "280R211" [label="R211", fillcolor=3, shape=diamond, style=filled]
  281 [label="State 281\n\l212 decl-specifier-seq: decl-specifier decl-specifier-seq •\l"]
  281 -> "281R212" [style=solid]
 "281R212" [label="R212", fillcolor=3, shape=diamond, style=filled]
  282 [label="State 282\n\l977 simple-declaration: decl-specifier-seq ';' •\l"]
  282 -> "282R977" [style=solid]
 "282R977" [label="R977", fillcolor=3, shape=diamond, style=filled]
  283 [label="State 283\n\l901 ptr-operator: '&' •\l902             | '&' • attribute-specifier-seq\l928 ref-qualifier: '&' •\l"]
  283 -> 4 [style=solid label="\"alignas\""]
  283 -> 10 [style=solid label="'['"]
  283 -> 58 [style=dashed label="alignment-specifier"]
  283 -> 61 [style=dashed label="attribute-specifier"]
  283 -> 154 [style=dashed label="attribute-specifier-seq"]
  283 -> "283R901" [style=solid]
 "283R901" [label="R901", fillcolor=3, shape=diamond, style=filled]
  283 -> "283R928d" [label="['[']", style=solid]
 "283R928d" [label="R928", fillcolor=5, shape=diamond, style=filled]
  284 [label="State 284\n\l981 simple-declaration: decl-specifier-seq '[' • identifier-list ']' initializer ';'\l"]
  284 -> 644 [style=solid label="IDENTIFIER"]
  284 -> 645 [style=dashed label="identifier-list"]
  285 [label="State 285\n\l903 ptr-operator: \"&&\" •\l904             | \"&&\" • attribute-specifier-seq\l929 ref-qualifier: \"&&\" •\l"]
  285 -> 4 [style=solid label="\"alignas\""]
  285 -> 10 [style=solid label="'['"]
  285 -> 58 [style=dashed label="alignment-specifier"]
  285 -> 61 [style=dashed label="attribute-specifier"]
  285 -> 160 [style=dashed label="attribute-specifier-seq"]
  285 -> "285R903" [style=solid]
 "285R903" [label="R903", fillcolor=3, shape=diamond, style=filled]
  285 -> "285R929d" [label="['[']", style=solid]
 "285R929d" [label="R929", fillcolor=5, shape=diamond, style=filled]
  286 [label="State 286\n\l401 function-definition: decl-specifier-seq declarator • function-body\l405                    | decl-specifier-seq declarator • virt-specifier-seq function-body\l409                    | decl-specifier-seq declarator • requires-clause function-body\l473 init-declarator: declarator •\l474                | declarator • initializer\l475                | declarator • requires-clause\l"]
  286 -> 646 [style=solid label="'='"]
  286 -> 647 [style=solid label="'('"]
  286 -> 293 [style=solid label="':'"]
  286 -> 648 [style=solid label="'{'"]
  286 -> 295 [style=solid label="\"final\""]
  286 -> 296 [style=solid label="\"try\""]
  286 -> 297 [style=solid label="\"requires\""]
  286 -> 298 [style=solid label="\"override\""]
  286 -> 649 [style=dashed label="brace-or-equal-initializer"]
  286 -> 650 [style=dashed label="braced-init-list"]
  286 -> 299 [style=dashed label="compound-statement"]
  286 -> 300 [style=dashed label="ctor-initializer"]
  286 -> 651 [style=dashed label="function-body"]
  286 -> 302 [style=dashed label="function-try-block"]
  286 -> 652 [style=dashed label="initializer"]
  286 -> 653 [style=dashed label="requires-clause"]
  286 -> 304 [style=dashed label="virt-specifier"]
  286 -> 654 [style=dashed label="virt-specifier-seq"]
  286 -> "286R473" [style=solid]
 "286R473" [label="R473", fillcolor=3, shape=diamond, style=filled]
  287 [label="State 287\n\l476 init-declarator-list: init-declarator •\l"]
  287 -> "287R476" [style=solid]
 "287R476" [label="R476", fillcolor=3, shape=diamond, style=filled]
  288 [label="State 288\n\l477 init-declarator-list: init-declarator-list • ',' init-declarator\l978 simple-declaration: decl-specifier-seq init-declarator-list • ';'\l"]
  288 -> 655 [style=solid label="';'"]
  288 -> 656 [style=solid label="','"]
  289 [label="State 289\n\l983 simple-declaration: decl-specifier-seq ref-qualifier • '[' identifier-list ']' initializer ';'\l"]
  289 -> 657 [style=solid label="'['"]
  290 [label="State 290\n\l227 declaration-seq: declaration-seq declaration •\l"]
  290 -> "290R227" [style=solid]
 "290R227" [label="R227", fillcolor=3, shape=diamond, style=filled]
  291 [label="State 291\n\l396 function-body: '=' • \"default\" ';'\l397              | '=' • \"delete\" ';'\l"]
  291 -> 658 [style=solid label="\"delete\""]
  291 -> 659 [style=solid label="\"default\""]
  292 [label="State 292\n\l695 nodeclspec-function-declaration: declarator ';' •\l"]
  292 -> "292R695" [style=solid]
 "292R695" [label="R695", fillcolor=3, shape=diamond, style=filled]
  293 [label="State 293\n\l184 ctor-initializer: ':' • mem-initializer-list\l"]
  293 -> 660 [style=solid label="IDENTIFIER"]
  293 -> 9 [style=solid label="\"::\""]
  293 -> 135 [style=solid label="\"decltype\""]
  293 -> 66 [style=dashed label="class-name"]
  293 -> 661 [style=dashed label="class-or-decltype"]
  293 -> 624 [style=dashed label="decltype-specifier"]
  293 -> 85 [style=dashed label="enum-name"]
  293 -> 662 [style=dashed label="mem-initializer"]
  293 -> 663 [style=dashed label="mem-initializer-id"]
  293 -> 664 [style=dashed label="mem-initializer-list"]
  293 -> 100 [style=dashed label="namespace-alias"]
  293 -> 103 [style=dashed label="namespace-name"]
  293 -> 625 [style=dashed label="nested-name-specifier"]
  293 -> 142 [style=dashed label="simple-template-id"]
  293 -> 143 [style=dashed label="template-name"]
  293 -> 626 [style=dashed label="type-name"]
  293 -> 127 [style=dashed label="typedef-name"]
  294 [label="State 294\n\l160 compound-statement: '{' • '}'\l161                   | '{' • statement-seq '}'\l"]
  294 -> 665 [style=solid label="IDENTIFIER"]
  294 -> 361 [style=solid label="'+'"]
  294 -> 362 [style=solid label="'-'"]
  294 -> 2 [style=solid label="\"using\""]
  294 -> 666 [style=solid label="';'"]
  294 -> 4 [style=solid label="\"alignas\""]
  294 -> 363 [style=solid label="'('"]
  294 -> 364 [style=solid label="'&'"]
  294 -> 8 [style=solid label="\"asm\""]
  294 -> 365 [style=solid label="\"::\""]
  294 -> 667 [style=solid label="'['"]
  294 -> 367 [style=solid label="\"co_await\""]
  294 -> 294 [style=solid label="'{'"]
  294 -> 668 [style=solid label="'}'"]
  294 -> 11 [style=solid label="\"virtual\""]
  294 -> 368 [style=solid label="'0'"]
  294 -> 369 [style=solid label="'1'"]
  294 -> 370 [style=solid label="\"0b\""]
  294 -> 371 [style=solid label="\"0B\""]
  294 -> 372 [style=solid label="'\\''"]
  294 -> 373 [style=solid label="\"false\""]
  294 -> 374 [style=solid label="\"true\""]
  294 -> 12 [style=solid label="\"class\""]
  294 -> 13 [style=solid label="\"struct\""]
  294 -> 14 [style=solid label="\"union\""]
  294 -> 375 [style=solid label="\"noexcept\""]
  294 -> 17 [style=solid label="\"operator\""]
  294 -> 669 [style=solid label="\"co_return\""]
  294 -> 18 [style=solid label="\"const\""]
  294 -> 19 [style=solid label="\"volatile\""]
  294 -> 20 [style=solid label="\"friend\""]
  294 -> 21 [style=solid label="\"typedef\""]
  294 -> 22 [style=solid label="\"constexpr\""]
  294 -> 23 [style=solid label="\"consteval\""]
  294 -> 24 [style=solid label="\"constinit\""]
  294 -> 263 [style=solid label="\"inline\""]
  294 -> 26 [style=solid label="\"decltype\""]
  294 -> 376 [style=solid label="\"delete\""]
  294 -> 377 [style=solid label="'.'"]
  294 -> 378 [style=solid label="'2'"]
  294 -> 379 [style=solid label="'3'"]
  294 -> 380 [style=solid label="'4'"]
  294 -> 381 [style=solid label="'5'"]
  294 -> 382 [style=solid label="'6'"]
  294 -> 383 [style=solid label="'7'"]
  294 -> 384 [style=solid label="'8'"]
  294 -> 385 [style=solid label="'9'"]
  294 -> 27 [style=solid label="\"enum\""]
  294 -> 185 [style=solid label="\"u8\""]
  294 -> 186 [style=solid label="'u'"]
  294 -> 187 [style=solid label="'U'"]
  294 -> 188 [style=solid label="'L'"]
  294 -> 264 [style=solid label="\"extern\""]
  294 -> 29 [style=solid label="\"explicit\""]
  294 -> 386 [style=solid label="'*'"]
  294 -> 670 [style=solid label="\"default\""]
  294 -> 671 [style=solid label="\"try\""]
  294 -> 203 [style=solid label="'\"'"]
  294 -> 387 [style=solid label="\"0x\""]
  294 -> 388 [style=solid label="\"0X\""]
  294 -> 672 [style=solid label="\"while\""]
  294 -> 673 [style=solid label="\"do\""]
  294 -> 674 [style=solid label="\"for\""]
  294 -> 675 [style=solid label="\"break\""]
  294 -> 676 [style=solid label="\"continue\""]
  294 -> 677 [style=solid label="\"return\""]
  294 -> 678 [style=solid label="\"goto\""]
  294 -> 679 [style=solid label="\"case\""]
  294 -> 680 [style=solid label="\"namespace\""]
  294 -> 389 [style=solid label="\"requires\""]
  294 -> 390 [style=solid label="\"new\""]
  294 -> 391 [style=solid label="'~'"]
  294 -> 392 [style=solid label="'!'"]
  294 -> 393 [style=solid label="\"++\""]
  294 -> 394 [style=solid label="\"--\""]
  294 -> 395 [style=solid label="\"this\""]
  294 -> 37 [style=solid label="\"auto\""]
  294 -> 396 [style=solid label="\"nullptr\""]
  294 -> 397 [style=solid label="\"dynamic_cast\""]
  294 -> 398 [style=solid label="\"static_cast\""]
  294 -> 399 [style=solid label="\"reinterpret_cast\""]
  294 -> 400 [style=solid label="\"const_cast\""]
  294 -> 401 [style=solid label="\"typeid\""]
  294 -> 681 [style=solid label="\"if\""]
  294 -> 682 [style=solid label="\"switch\""]
  294 -> 38 [style=solid label="\"char\""]
  294 -> 39 [style=solid label="\"char8_t\""]
  294 -> 40 [style=solid label="\"char16_t\""]
  294 -> 41 [style=solid label="\"char32_t\""]
  294 -> 42 [style=solid label="\"wchar_t\""]
  294 -> 43 [style=solid label="\"bool\""]
  294 -> 44 [style=solid label="\"short\""]
  294 -> 45 [style=solid label="\"int\""]
  294 -> 46 [style=solid label="\"long\""]
  294 -> 47 [style=solid label="\"signed\""]
  294 -> 48 [style=solid label="\"unsigned\""]
  294 -> 49 [style=solid label="\"float\""]
  294 -> 50 [style=solid label="\"double\""]
  294 -> 51 [style=solid label="\"void\""]
  294 -> 52 [style=solid label="\"static_assert\""]
  294 -> 53 [style=solid label="\"static\""]
  294 -> 54 [style=solid label="\"thread_local\""]
  294 -> 55 [style=solid label="\"mutable\""]
  294 -> 209 [style=solid label="'R'"]
  294 -> 528 [style=solid label="\"throw\""]
  294 -> 56 [style=solid label="\"typename\""]
  294 -> 402 [style=solid label="\"sizeof\""]
  294 -> 403 [style=solid label="\"alignof\""]
  294 -> 529 [style=solid label="\"co_yield\""]
  294 -> 404 [style=dashed label="additive-expression"]
  294 -> 57 [style=dashed label="alias-declaration"]
  294 -> 58 [style=dashed label="alignment-specifier"]
  294 -> 405 [style=dashed label="and-expression"]
  294 -> 59 [style=dashed label="asm-declaration"]
  294 -> 530 [style=dashed label="assignment-expression"]
  294 -> 61 [style=dashed label="attribute-specifier"]
  294 -> 683 [style=dashed label="attribute-specifier-seq"]
  294 -> 406 [style=dashed label="await-expression"]
  294 -> 407 [style=dashed label="binary-literal"]
  294 -> 684 [style=dashed label="block-declaration"]
  294 -> 408 [style=dashed label="boolean-literal"]
  294 -> 409 [style=dashed label="cast-expression"]
  294 -> 410 [style=dashed label="character-literal"]
  294 -> 64 [style=dashed label="class-head"]
  294 -> 65 [style=dashed label="class-key"]
  294 -> 66 [style=dashed label="class-name"]
  294 -> 67 [style=dashed label="class-specifier"]
  294 -> 411 [style=dashed label="compare-expression"]
  294 -> 685 [style=dashed label="compound-statement"]
  294 -> 68 [style=dashed label="concept-name"]
  294 -> 531 [style=dashed label="conditional-expression"]
  294 -> 69 [style=dashed label="conversion-function-id"]
  294 -> 686 [style=dashed label="coroutine-return-statement"]
  294 -> 70 [style=dashed label="cv-qualifier"]
  294 -> 414 [style=dashed label="decimal-floating-point-literal"]
  294 -> 415 [style=dashed label="decimal-literal"]
  294 -> 71 [style=dashed label="decl-specifier"]
  294 -> 687 [style=dashed label="decl-specifier-seq"]
  294 -> 688 [style=dashed label="declaration-statement"]
  294 -> 77 [style=dashed label="decltype-specifier"]
  294 -> 79 [style=dashed label="defining-type-specifier"]
  294 -> 416 [style=dashed label="delete-expression"]
  294 -> 417 [style=dashed label="digit"]
  294 -> 418 [style=dashed label="digit-sequence"]
  294 -> 80 [style=dashed label="elaborated-enum-specifier"]
  294 -> 81 [style=dashed label="elaborated-type-specifier"]
  294 -> 419 [style=dashed label="encoding-prefix"]
  294 -> 83 [style=dashed label="enum-head"]
  294 -> 84 [style=dashed label="enum-key"]
  294 -> 85 [style=dashed label="enum-name"]
  294 -> 86 [style=dashed label="enum-specifier"]
  294 -> 420 [style=dashed label="equality-expression"]
  294 -> 421 [style=dashed label="exclusive-or-expression"]
  294 -> 269 [style=dashed label="explicit-specifier"]
  294 -> 689 [style=dashed label="expression"]
  294 -> 690 [style=dashed label="expression-statement"]
  294 -> 422 [style=dashed label="floating-point-literal"]
  294 -> 423 [style=dashed label="fold-expression"]
  294 -> 424 [style=dashed label="fractional-constant"]
  294 -> 92 [style=dashed label="function-specifier"]
  294 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  294 -> 426 [style=dashed label="hexadecimal-literal"]
  294 -> 427 [style=dashed label="hexadecimal-prefix"]
  294 -> 428 [style=dashed label="id-expression"]
  294 -> 429 [style=dashed label="inclusive-or-expression"]
  294 -> 430 [style=dashed label="integer-literal"]
  294 -> 691 [style=dashed label="iteration-statement"]
  294 -> 692 [style=dashed label="jump-statement"]
  294 -> 693 [style=dashed label="labeled-statement"]
  294 -> 431 [style=dashed label="lambda-expression"]
  294 -> 432 [style=dashed label="lambda-introducer"]
  294 -> 433 [style=dashed label="literal"]
  294 -> 96 [style=dashed label="literal-operator-id"]
  294 -> 434 [style=dashed label="logical-and-expression"]
  294 -> 533 [style=dashed label="logical-or-expression"]
  294 -> 436 [style=dashed label="multiplicative-expression"]
  294 -> 100 [style=dashed label="namespace-alias"]
  294 -> 101 [style=dashed label="namespace-alias-definition"]
  294 -> 103 [style=dashed label="namespace-name"]
  294 -> 437 [style=dashed label="nested-name-specifier"]
  294 -> 438 [style=dashed label="new-expression"]
  294 -> 439 [style=dashed label="noexcept-expression"]
  294 -> 440 [style=dashed label="nonzero-digit"]
  294 -> 441 [style=dashed label="octal-literal"]
  294 -> 108 [style=dashed label="opaque-enum-declaration"]
  294 -> 109 [style=dashed label="operator-function-id"]
  294 -> 110 [style=dashed label="placeholder-type-specifier"]
  294 -> 442 [style=dashed label="pm-expression"]
  294 -> 443 [style=dashed label="pointer-literal"]
  294 -> 444 [style=dashed label="postfix-expression"]
  294 -> 445 [style=dashed label="primary-expression"]
  294 -> 113 [style=dashed label="qualified-id"]
  294 -> 446 [style=dashed label="relational-expression"]
  294 -> 447 [style=dashed label="requires-expression"]
  294 -> 694 [style=dashed label="selection-statement"]
  294 -> 448 [style=dashed label="shift-expression"]
  294 -> 114 [style=dashed label="simple-declaration"]
  294 -> 115 [style=dashed label="simple-template-id"]
  294 -> 449 [style=dashed label="simple-type-specifier"]
  294 -> 695 [style=dashed label="statement"]
  294 -> 696 [style=dashed label="statement-seq"]
  294 -> 117 [style=dashed label="static_assert-declaration"]
  294 -> 118 [style=dashed label="storage-class-specifier"]
  294 -> 450 [style=dashed label="string-literal"]
  294 -> 121 [style=dashed label="template-id"]
  294 -> 216 [style=dashed label="template-name"]
  294 -> 535 [style=dashed label="throw-expression"]
  294 -> 697 [style=dashed label="try-block"]
  294 -> 124 [style=dashed label="type-constraint"]
  294 -> 125 [style=dashed label="type-name"]
  294 -> 126 [style=dashed label="type-specifier"]
  294 -> 127 [style=dashed label="typedef-name"]
  294 -> 453 [style=dashed label="typename-specifier"]
  294 -> 454 [style=dashed label="unary-expression"]
  294 -> 455 [style=dashed label="unary-operator"]
  294 -> 130 [style=dashed label="unqualified-id"]
  294 -> 456 [style=dashed label="user-defined-character-literal"]
  294 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  294 -> 458 [style=dashed label="user-defined-integer-literal"]
  294 -> 459 [style=dashed label="user-defined-literal"]
  294 -> 460 [style=dashed label="user-defined-string-literal"]
  294 -> 131 [style=dashed label="using-declaration"]
  294 -> 132 [style=dashed label="using-directive"]
  294 -> 133 [style=dashed label="using-enum-declaration"]
  294 -> 537 [style=dashed label="yield-expression"]
  295 [label="State 295\n\l1191 virt-specifier: \"final\" •\l"]
  295 -> "295R1191" [style=solid]
 "295R1191" [label="R1191", fillcolor=3, shape=diamond, style=filled]
  296 [label="State 296\n\l412 function-try-block: \"try\" • compound-statement handler-seq\l413                   | \"try\" • ctor-initializer compound-statement handler-seq\l"]
  296 -> 293 [style=solid label="':'"]
  296 -> 294 [style=solid label="'{'"]
  296 -> 698 [style=dashed label="compound-statement"]
  296 -> 699 [style=dashed label="ctor-initializer"]
  297 [label="State 297\n\l943 requires-clause: \"requires\" • constraint-logical-or-expression\l"]
  297 -> 148 [style=solid label="IDENTIFIER"]
  297 -> 700 [style=solid label="'('"]
  297 -> 9 [style=solid label="\"::\""]
  297 -> 366 [style=solid label="'['"]
  297 -> 368 [style=solid label="'0'"]
  297 -> 369 [style=solid label="'1'"]
  297 -> 370 [style=solid label="\"0b\""]
  297 -> 371 [style=solid label="\"0B\""]
  297 -> 372 [style=solid label="'\\''"]
  297 -> 373 [style=solid label="\"false\""]
  297 -> 374 [style=solid label="\"true\""]
  297 -> 17 [style=solid label="\"operator\""]
  297 -> 135 [style=solid label="\"decltype\""]
  297 -> 377 [style=solid label="'.'"]
  297 -> 378 [style=solid label="'2'"]
  297 -> 379 [style=solid label="'3'"]
  297 -> 380 [style=solid label="'4'"]
  297 -> 381 [style=solid label="'5'"]
  297 -> 382 [style=solid label="'6'"]
  297 -> 383 [style=solid label="'7'"]
  297 -> 384 [style=solid label="'8'"]
  297 -> 385 [style=solid label="'9'"]
  297 -> 185 [style=solid label="\"u8\""]
  297 -> 186 [style=solid label="'u'"]
  297 -> 187 [style=solid label="'U'"]
  297 -> 188 [style=solid label="'L'"]
  297 -> 203 [style=solid label="'\"'"]
  297 -> 387 [style=solid label="\"0x\""]
  297 -> 388 [style=solid label="\"0X\""]
  297 -> 389 [style=solid label="\"requires\""]
  297 -> 36 [style=solid label="'~'"]
  297 -> 395 [style=solid label="\"this\""]
  297 -> 396 [style=solid label="\"nullptr\""]
  297 -> 209 [style=solid label="'R'"]
  297 -> 407 [style=dashed label="binary-literal"]
  297 -> 408 [style=dashed label="boolean-literal"]
  297 -> 410 [style=dashed label="character-literal"]
  297 -> 66 [style=dashed label="class-name"]
  297 -> 701 [style=dashed label="constraint-logical-and-expression"]
  297 -> 702 [style=dashed label="constraint-logical-or-expression"]
  297 -> 69 [style=dashed label="conversion-function-id"]
  297 -> 414 [style=dashed label="decimal-floating-point-literal"]
  297 -> 415 [style=dashed label="decimal-literal"]
  297 -> 139 [style=dashed label="decltype-specifier"]
  297 -> 417 [style=dashed label="digit"]
  297 -> 418 [style=dashed label="digit-sequence"]
  297 -> 419 [style=dashed label="encoding-prefix"]
  297 -> 85 [style=dashed label="enum-name"]
  297 -> 422 [style=dashed label="floating-point-literal"]
  297 -> 423 [style=dashed label="fold-expression"]
  297 -> 424 [style=dashed label="fractional-constant"]
  297 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  297 -> 426 [style=dashed label="hexadecimal-literal"]
  297 -> 427 [style=dashed label="hexadecimal-prefix"]
  297 -> 428 [style=dashed label="id-expression"]
  297 -> 430 [style=dashed label="integer-literal"]
  297 -> 431 [style=dashed label="lambda-expression"]
  297 -> 432 [style=dashed label="lambda-introducer"]
  297 -> 433 [style=dashed label="literal"]
  297 -> 96 [style=dashed label="literal-operator-id"]
  297 -> 100 [style=dashed label="namespace-alias"]
  297 -> 103 [style=dashed label="namespace-name"]
  297 -> 153 [style=dashed label="nested-name-specifier"]
  297 -> 440 [style=dashed label="nonzero-digit"]
  297 -> 441 [style=dashed label="octal-literal"]
  297 -> 109 [style=dashed label="operator-function-id"]
  297 -> 443 [style=dashed label="pointer-literal"]
  297 -> 703 [style=dashed label="primary-expression"]
  297 -> 113 [style=dashed label="qualified-id"]
  297 -> 447 [style=dashed label="requires-expression"]
  297 -> 115 [style=dashed label="simple-template-id"]
  297 -> 450 [style=dashed label="string-literal"]
  297 -> 121 [style=dashed label="template-id"]
  297 -> 143 [style=dashed label="template-name"]
  297 -> 144 [style=dashed label="type-name"]
  297 -> 127 [style=dashed label="typedef-name"]
  297 -> 130 [style=dashed label="unqualified-id"]
  297 -> 456 [style=dashed label="user-defined-character-literal"]
  297 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  297 -> 458 [style=dashed label="user-defined-integer-literal"]
  297 -> 459 [style=dashed label="user-defined-literal"]
  297 -> 460 [style=dashed label="user-defined-string-literal"]
  298 [label="State 298\n\l1190 virt-specifier: \"override\" •\l"]
  298 -> "298R1190" [style=solid]
 "298R1190" [label="R1190", fillcolor=3, shape=diamond, style=filled]
  299 [label="State 299\n\l394 function-body: compound-statement •\l"]
  299 -> "299R394" [style=solid]
 "299R394" [label="R394", fillcolor=3, shape=diamond, style=filled]
  300 [label="State 300\n\l393 function-body: ctor-initializer • compound-statement\l"]
  300 -> 294 [style=solid label="'{'"]
  300 -> 704 [style=dashed label="compound-statement"]
  301 [label="State 301\n\l399 function-definition: declarator function-body •\l"]
  301 -> "301R399" [style=solid]
 "301R399" [label="R399", fillcolor=3, shape=diamond, style=filled]
  302 [label="State 302\n\l395 function-body: function-try-block •\l"]
  302 -> "302R395" [style=solid]
 "302R395" [label="R395", fillcolor=3, shape=diamond, style=filled]
  303 [label="State 303\n\l407 function-definition: declarator requires-clause • function-body\l"]
  303 -> 291 [style=solid label="'='"]
  303 -> 293 [style=solid label="':'"]
  303 -> 294 [style=solid label="'{'"]
  303 -> 296 [style=solid label="\"try\""]
  303 -> 299 [style=dashed label="compound-statement"]
  303 -> 300 [style=dashed label="ctor-initializer"]
  303 -> 705 [style=dashed label="function-body"]
  303 -> 302 [style=dashed label="function-try-block"]
  304 [label="State 304\n\l1192 virt-specifier-seq: virt-specifier •\l"]
  304 -> "304R1192" [style=solid]
 "304R1192" [label="R1192", fillcolor=3, shape=diamond, style=filled]
  305 [label="State 305\n\l403 function-definition: declarator virt-specifier-seq • function-body\l1193 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  305 -> 291 [style=solid label="'='"]
  305 -> 293 [style=solid label="':'"]
  305 -> 294 [style=solid label="'{'"]
  305 -> 295 [style=solid label="\"final\""]
  305 -> 296 [style=solid label="\"try\""]
  305 -> 298 [style=solid label="\"override\""]
  305 -> 299 [style=dashed label="compound-statement"]
  305 -> 300 [style=dashed label="ctor-initializer"]
  305 -> 706 [style=dashed label="function-body"]
  305 -> 302 [style=dashed label="function-try-block"]
  305 -> 707 [style=dashed label="virt-specifier"]
  306 [label="State 306\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l726 noptr-declarator: declarator-id attribute-specifier-seq •\l"]
  306 -> 4 [style=solid label="\"alignas\""]
  306 -> 10 [style=solid label="'['"]
  306 -> 58 [style=dashed label="alignment-specifier"]
  306 -> 265 [style=dashed label="attribute-specifier"]
  306 -> "306R726d" [label="['[']", style=solid]
 "306R726d" [label="R726", fillcolor=5, shape=diamond, style=filled]
  306 -> "306R726" [style=solid]
 "306R726" [label="R726", fillcolor=3, shape=diamond, style=filled]
  307 [label="State 307\n\l662 nested-name-specifier: decltype-specifier \"::\" •\l"]
  307 -> "307R662" [style=solid]
 "307R662" [label="R662", fillcolor=3, shape=diamond, style=filled]
  308 [label="State 308\n\l298 enum-specifier: enum-head '{' • '}'\l299               | enum-head '{' • enumerator-list '}'\l300               | enum-head '{' • enumerator-list ',' '}'\l"]
  308 -> 708 [style=solid label="IDENTIFIER"]
  308 -> 709 [style=solid label="'}'"]
  308 -> 710 [style=dashed label="enumerator"]
  308 -> 711 [style=dashed label="enumerator-definition"]
  308 -> 712 [style=dashed label="enumerator-list"]
  309 [label="State 309\n\l145 class-name: IDENTIFIER •\l293 enum-head-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l"]
  309 -> "309R145" [label="[\"::\"]", style=solid]
 "309R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  309 -> "309R293" [style=solid]
 "309R293" [label="R293", fillcolor=3, shape=diamond, style=filled]
  309 -> "309R297d" [label="[\"::\"]", style=solid]
 "309R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  309 -> "309R651d" [label="[\"::\"]", style=solid]
 "309R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  309 -> "309R657d" [label="[\"::\"]", style=solid]
 "309R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  309 -> "309R1066" [label="['<']", style=solid]
 "309R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  309 -> "309R1124d" [label="[\"::\"]", style=solid]
 "309R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  310 [label="State 310\n\l283 enum-base: ':' • type-specifier-seq\l"]
  310 -> 161 [style=solid label="IDENTIFIER"]
  310 -> 9 [style=solid label="\"::\""]
  310 -> 12 [style=solid label="\"class\""]
  310 -> 13 [style=solid label="\"struct\""]
  310 -> 14 [style=solid label="\"union\""]
  310 -> 18 [style=solid label="\"const\""]
  310 -> 19 [style=solid label="\"volatile\""]
  310 -> 26 [style=solid label="\"decltype\""]
  310 -> 136 [style=solid label="\"enum\""]
  310 -> 37 [style=solid label="\"auto\""]
  310 -> 38 [style=solid label="\"char\""]
  310 -> 39 [style=solid label="\"char8_t\""]
  310 -> 40 [style=solid label="\"char16_t\""]
  310 -> 41 [style=solid label="\"char32_t\""]
  310 -> 42 [style=solid label="\"wchar_t\""]
  310 -> 43 [style=solid label="\"bool\""]
  310 -> 44 [style=solid label="\"short\""]
  310 -> 45 [style=solid label="\"int\""]
  310 -> 46 [style=solid label="\"long\""]
  310 -> 47 [style=solid label="\"signed\""]
  310 -> 48 [style=solid label="\"unsigned\""]
  310 -> 49 [style=solid label="\"float\""]
  310 -> 50 [style=solid label="\"double\""]
  310 -> 51 [style=solid label="\"void\""]
  310 -> 56 [style=solid label="\"typename\""]
  310 -> 210 [style=dashed label="class-key"]
  310 -> 66 [style=dashed label="class-name"]
  310 -> 68 [style=dashed label="concept-name"]
  310 -> 70 [style=dashed label="cv-qualifier"]
  310 -> 77 [style=dashed label="decltype-specifier"]
  310 -> 80 [style=dashed label="elaborated-enum-specifier"]
  310 -> 81 [style=dashed label="elaborated-type-specifier"]
  310 -> 85 [style=dashed label="enum-name"]
  310 -> 100 [style=dashed label="namespace-alias"]
  310 -> 103 [style=dashed label="namespace-name"]
  310 -> 213 [style=dashed label="nested-name-specifier"]
  310 -> 110 [style=dashed label="placeholder-type-specifier"]
  310 -> 142 [style=dashed label="simple-template-id"]
  310 -> 116 [style=dashed label="simple-type-specifier"]
  310 -> 216 [style=dashed label="template-name"]
  310 -> 124 [style=dashed label="type-constraint"]
  310 -> 125 [style=dashed label="type-name"]
  310 -> 217 [style=dashed label="type-specifier"]
  310 -> 713 [style=dashed label="type-specifier-seq"]
  310 -> 127 [style=dashed label="typedef-name"]
  310 -> 128 [style=dashed label="typename-specifier"]
  311 [label="State 311\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l285 enum-head: enum-key attribute-specifier-seq •\l287          | enum-key attribute-specifier-seq • enum-head-name\l289          | enum-key attribute-specifier-seq • enum-base\l291          | enum-key attribute-specifier-seq • enum-head-name enum-base\l756 opaque-enum-declaration: enum-key attribute-specifier-seq • enum-head-name ';'\l758                        | enum-key attribute-specifier-seq • enum-head-name enum-base ';'\l"]
  311 -> 309 [style=solid label="IDENTIFIER"]
  311 -> 4 [style=solid label="\"alignas\""]
  311 -> 9 [style=solid label="\"::\""]
  311 -> 10 [style=solid label="'['"]
  311 -> 310 [style=solid label="':'"]
  311 -> 135 [style=solid label="\"decltype\""]
  311 -> 58 [style=dashed label="alignment-specifier"]
  311 -> 265 [style=dashed label="attribute-specifier"]
  311 -> 66 [style=dashed label="class-name"]
  311 -> 139 [style=dashed label="decltype-specifier"]
  311 -> 714 [style=dashed label="enum-base"]
  311 -> 715 [style=dashed label="enum-head-name"]
  311 -> 85 [style=dashed label="enum-name"]
  311 -> 100 [style=dashed label="namespace-alias"]
  311 -> 103 [style=dashed label="namespace-name"]
  311 -> 314 [style=dashed label="nested-name-specifier"]
  311 -> 142 [style=dashed label="simple-template-id"]
  311 -> 143 [style=dashed label="template-name"]
  311 -> 144 [style=dashed label="type-name"]
  311 -> 127 [style=dashed label="typedef-name"]
  311 -> "311R285" [style=solid]
 "311R285" [label="R285", fillcolor=3, shape=diamond, style=filled]
  312 [label="State 312\n\l288 enum-head: enum-key enum-base •\l"]
  312 -> "312R288" [style=solid]
 "312R288" [label="R288", fillcolor=3, shape=diamond, style=filled]
  313 [label="State 313\n\l286 enum-head: enum-key enum-head-name •\l290          | enum-key enum-head-name • enum-base\l755 opaque-enum-declaration: enum-key enum-head-name • ';'\l757                        | enum-key enum-head-name • enum-base ';'\l"]
  313 -> 716 [style=solid label="';'"]
  313 -> 310 [style=solid label="':'"]
  313 -> 717 [style=dashed label="enum-base"]
  313 -> "313R286" [style=solid]
 "313R286" [label="R286", fillcolor=3, shape=diamond, style=filled]
  314 [label="State 314\n\l292 enum-head-name: nested-name-specifier • IDENTIFIER\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l"]
  314 -> 718 [style=solid label="IDENTIFIER"]
  314 -> 355 [style=solid label="\"template\""]
  314 -> 539 [style=dashed label="simple-template-id"]
  314 -> 143 [style=dashed label="template-name"]
  315 [label="State 315\n\l1066 template-name: IDENTIFIER •\l"]
  315 -> "315R1066" [style=solid]
 "315R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  316 [label="State 316\n\l234 deduction-guide: explicit-specifier template-name • '(' parameter-declaration-clause ')' \"->\" simple-template-id ';'\l"]
  316 -> 719 [style=solid label="'('"]
  317 [label="State 317\n\l623 module-declaration: \"export-keyword\" • \"module-keyword\" module-name ';'\l625                   | \"export-keyword\" • \"module-keyword\" module-name module-partition ';'\l627                   | \"export-keyword\" • \"module-keyword\" module-name attribute-specifier-seq ';'\l629                   | \"export-keyword\" • \"module-keyword\" module-name module-partition attribute-specifier-seq ';'\l"]
  317 -> 231 [style=solid label="\"module-keyword\""]
  318 [label="State 318\n\l624 module-declaration: \"module-keyword\" • module-name ';'\l626                   | \"module-keyword\" • module-name module-partition ';'\l628                   | \"module-keyword\" • module-name attribute-specifier-seq ';'\l630                   | \"module-keyword\" • module-name module-partition attribute-specifier-seq ';'\l"]
  318 -> 236 [style=solid label="IDENTIFIER"]
  318 -> 238 [style=dashed label="module-name"]
  318 -> 239 [style=dashed label="module-name-qualifier"]
  319 [label="State 319\n\l1075 translation-unit: global-module-fragment module-declaration •\l1077                 | global-module-fragment module-declaration • declaration-seq\l1079                 | global-module-fragment module-declaration • private-module-fragment\l1081                 | global-module-fragment module-declaration • declaration-seq private-module-fragment\l"]
  319 -> 1 [style=solid label="IDENTIFIER"]
  319 -> 2 [style=solid label="\"using\""]
  319 -> 3 [style=solid label="';'"]
  319 -> 4 [style=solid label="\"alignas\""]
  319 -> 5 [style=solid label="'('"]
  319 -> 6 [style=solid label="\"...\""]
  319 -> 7 [style=solid label="'&'"]
  319 -> 8 [style=solid label="\"asm\""]
  319 -> 9 [style=solid label="\"::\""]
  319 -> 10 [style=solid label="'['"]
  319 -> 11 [style=solid label="\"virtual\""]
  319 -> 12 [style=solid label="\"class\""]
  319 -> 13 [style=solid label="\"struct\""]
  319 -> 14 [style=solid label="\"union\""]
  319 -> 15 [style=solid label="\"template\""]
  319 -> 16 [style=solid label="\"&&\""]
  319 -> 17 [style=solid label="\"operator\""]
  319 -> 18 [style=solid label="\"const\""]
  319 -> 19 [style=solid label="\"volatile\""]
  319 -> 20 [style=solid label="\"friend\""]
  319 -> 21 [style=solid label="\"typedef\""]
  319 -> 22 [style=solid label="\"constexpr\""]
  319 -> 23 [style=solid label="\"consteval\""]
  319 -> 24 [style=solid label="\"constinit\""]
  319 -> 25 [style=solid label="\"inline\""]
  319 -> 26 [style=solid label="\"decltype\""]
  319 -> 27 [style=solid label="\"enum\""]
  319 -> 28 [style=solid label="\"extern\""]
  319 -> 29 [style=solid label="\"explicit\""]
  319 -> 30 [style=solid label="\"export\""]
  319 -> 158 [style=solid label="\"export-keyword\""]
  319 -> 32 [style=solid label="'*'"]
  319 -> 321 [style=solid label="\"module-keyword\""]
  319 -> 34 [style=solid label="\"import-keyword\""]
  319 -> 35 [style=solid label="\"namespace\""]
  319 -> 36 [style=solid label="'~'"]
  319 -> 37 [style=solid label="\"auto\""]
  319 -> 38 [style=solid label="\"char\""]
  319 -> 39 [style=solid label="\"char8_t\""]
  319 -> 40 [style=solid label="\"char16_t\""]
  319 -> 41 [style=solid label="\"char32_t\""]
  319 -> 42 [style=solid label="\"wchar_t\""]
  319 -> 43 [style=solid label="\"bool\""]
  319 -> 44 [style=solid label="\"short\""]
  319 -> 45 [style=solid label="\"int\""]
  319 -> 46 [style=solid label="\"long\""]
  319 -> 47 [style=solid label="\"signed\""]
  319 -> 48 [style=solid label="\"unsigned\""]
  319 -> 49 [style=solid label="\"float\""]
  319 -> 50 [style=solid label="\"double\""]
  319 -> 51 [style=solid label="\"void\""]
  319 -> 52 [style=solid label="\"static_assert\""]
  319 -> 53 [style=solid label="\"static\""]
  319 -> 54 [style=solid label="\"thread_local\""]
  319 -> 55 [style=solid label="\"mutable\""]
  319 -> 56 [style=solid label="\"typename\""]
  319 -> 57 [style=dashed label="alias-declaration"]
  319 -> 58 [style=dashed label="alignment-specifier"]
  319 -> 59 [style=dashed label="asm-declaration"]
  319 -> 60 [style=dashed label="attribute-declaration"]
  319 -> 61 [style=dashed label="attribute-specifier"]
  319 -> 62 [style=dashed label="attribute-specifier-seq"]
  319 -> 63 [style=dashed label="block-declaration"]
  319 -> 64 [style=dashed label="class-head"]
  319 -> 65 [style=dashed label="class-key"]
  319 -> 66 [style=dashed label="class-name"]
  319 -> 67 [style=dashed label="class-specifier"]
  319 -> 68 [style=dashed label="concept-name"]
  319 -> 69 [style=dashed label="conversion-function-id"]
  319 -> 70 [style=dashed label="cv-qualifier"]
  319 -> 71 [style=dashed label="decl-specifier"]
  319 -> 72 [style=dashed label="decl-specifier-seq"]
  319 -> 73 [style=dashed label="declaration"]
  319 -> 720 [style=dashed label="declaration-seq"]
  319 -> 75 [style=dashed label="declarator"]
  319 -> 76 [style=dashed label="declarator-id"]
  319 -> 77 [style=dashed label="decltype-specifier"]
  319 -> 78 [style=dashed label="deduction-guide"]
  319 -> 79 [style=dashed label="defining-type-specifier"]
  319 -> 80 [style=dashed label="elaborated-enum-specifier"]
  319 -> 81 [style=dashed label="elaborated-type-specifier"]
  319 -> 82 [style=dashed label="empty-declaration"]
  319 -> 83 [style=dashed label="enum-head"]
  319 -> 84 [style=dashed label="enum-key"]
  319 -> 85 [style=dashed label="enum-name"]
  319 -> 86 [style=dashed label="enum-specifier"]
  319 -> 87 [style=dashed label="explicit-instantiation"]
  319 -> 88 [style=dashed label="explicit-specialization"]
  319 -> 89 [style=dashed label="explicit-specifier"]
  319 -> 90 [style=dashed label="export-declaration"]
  319 -> 91 [style=dashed label="function-definition"]
  319 -> 92 [style=dashed label="function-specifier"]
  319 -> 94 [style=dashed label="id-expression"]
  319 -> 95 [style=dashed label="linkage-specification"]
  319 -> 96 [style=dashed label="literal-operator-id"]
  319 -> 98 [style=dashed label="module-import-declaration"]
  319 -> 99 [style=dashed label="named-namespace-definition"]
  319 -> 100 [style=dashed label="namespace-alias"]
  319 -> 101 [style=dashed label="namespace-alias-definition"]
  319 -> 102 [style=dashed label="namespace-definition"]
  319 -> 103 [style=dashed label="namespace-name"]
  319 -> 104 [style=dashed label="nested-name-specifier"]
  319 -> 105 [style=dashed label="nested-namespace-definition"]
  319 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  319 -> 107 [style=dashed label="noptr-declarator"]
  319 -> 108 [style=dashed label="opaque-enum-declaration"]
  319 -> 109 [style=dashed label="operator-function-id"]
  319 -> 110 [style=dashed label="placeholder-type-specifier"]
  319 -> 721 [style=dashed label="private-module-fragment"]
  319 -> 111 [style=dashed label="ptr-declarator"]
  319 -> 112 [style=dashed label="ptr-operator"]
  319 -> 113 [style=dashed label="qualified-id"]
  319 -> 114 [style=dashed label="simple-declaration"]
  319 -> 115 [style=dashed label="simple-template-id"]
  319 -> 116 [style=dashed label="simple-type-specifier"]
  319 -> 117 [style=dashed label="static_assert-declaration"]
  319 -> 118 [style=dashed label="storage-class-specifier"]
  319 -> 119 [style=dashed label="template-declaration"]
  319 -> 120 [style=dashed label="template-head"]
  319 -> 121 [style=dashed label="template-id"]
  319 -> 122 [style=dashed label="template-name"]
  319 -> 124 [style=dashed label="type-constraint"]
  319 -> 125 [style=dashed label="type-name"]
  319 -> 126 [style=dashed label="type-specifier"]
  319 -> 127 [style=dashed label="typedef-name"]
  319 -> 128 [style=dashed label="typename-specifier"]
  319 -> 129 [style=dashed label="unnamed-namespace-definition"]
  319 -> 130 [style=dashed label="unqualified-id"]
  319 -> 131 [style=dashed label="using-declaration"]
  319 -> 132 [style=dashed label="using-directive"]
  319 -> 133 [style=dashed label="using-enum-declaration"]
  319 -> "319R1075" [style=solid]
 "319R1075" [label="R1075", fillcolor=3, shape=diamond, style=filled]
  320 [label="State 320\n\l1064 template-id: literal-operator-id '<' • '>'\l1065            | literal-operator-id '<' • template-argument-list '>'\l"]
  320 -> 1 [style=solid label="IDENTIFIER"]
  320 -> 361 [style=solid label="'+'"]
  320 -> 362 [style=solid label="'-'"]
  320 -> 363 [style=solid label="'('"]
  320 -> 364 [style=solid label="'&'"]
  320 -> 365 [style=solid label="\"::\""]
  320 -> 366 [style=solid label="'['"]
  320 -> 367 [style=solid label="\"co_await\""]
  320 -> 368 [style=solid label="'0'"]
  320 -> 369 [style=solid label="'1'"]
  320 -> 370 [style=solid label="\"0b\""]
  320 -> 371 [style=solid label="\"0B\""]
  320 -> 372 [style=solid label="'\\''"]
  320 -> 373 [style=solid label="\"false\""]
  320 -> 374 [style=solid label="\"true\""]
  320 -> 12 [style=solid label="\"class\""]
  320 -> 13 [style=solid label="\"struct\""]
  320 -> 14 [style=solid label="\"union\""]
  320 -> 375 [style=solid label="\"noexcept\""]
  320 -> 17 [style=solid label="\"operator\""]
  320 -> 18 [style=solid label="\"const\""]
  320 -> 19 [style=solid label="\"volatile\""]
  320 -> 26 [style=solid label="\"decltype\""]
  320 -> 376 [style=solid label="\"delete\""]
  320 -> 377 [style=solid label="'.'"]
  320 -> 378 [style=solid label="'2'"]
  320 -> 379 [style=solid label="'3'"]
  320 -> 380 [style=solid label="'4'"]
  320 -> 381 [style=solid label="'5'"]
  320 -> 382 [style=solid label="'6'"]
  320 -> 383 [style=solid label="'7'"]
  320 -> 384 [style=solid label="'8'"]
  320 -> 385 [style=solid label="'9'"]
  320 -> 136 [style=solid label="\"enum\""]
  320 -> 185 [style=solid label="\"u8\""]
  320 -> 186 [style=solid label="'u'"]
  320 -> 187 [style=solid label="'U'"]
  320 -> 188 [style=solid label="'L'"]
  320 -> 722 [style=solid label="'>'"]
  320 -> 386 [style=solid label="'*'"]
  320 -> 203 [style=solid label="'\"'"]
  320 -> 387 [style=solid label="\"0x\""]
  320 -> 388 [style=solid label="\"0X\""]
  320 -> 389 [style=solid label="\"requires\""]
  320 -> 390 [style=solid label="\"new\""]
  320 -> 391 [style=solid label="'~'"]
  320 -> 392 [style=solid label="'!'"]
  320 -> 393 [style=solid label="\"++\""]
  320 -> 394 [style=solid label="\"--\""]
  320 -> 395 [style=solid label="\"this\""]
  320 -> 37 [style=solid label="\"auto\""]
  320 -> 396 [style=solid label="\"nullptr\""]
  320 -> 397 [style=solid label="\"dynamic_cast\""]
  320 -> 398 [style=solid label="\"static_cast\""]
  320 -> 399 [style=solid label="\"reinterpret_cast\""]
  320 -> 400 [style=solid label="\"const_cast\""]
  320 -> 401 [style=solid label="\"typeid\""]
  320 -> 38 [style=solid label="\"char\""]
  320 -> 39 [style=solid label="\"char8_t\""]
  320 -> 40 [style=solid label="\"char16_t\""]
  320 -> 41 [style=solid label="\"char32_t\""]
  320 -> 42 [style=solid label="\"wchar_t\""]
  320 -> 43 [style=solid label="\"bool\""]
  320 -> 44 [style=solid label="\"short\""]
  320 -> 45 [style=solid label="\"int\""]
  320 -> 46 [style=solid label="\"long\""]
  320 -> 47 [style=solid label="\"signed\""]
  320 -> 48 [style=solid label="\"unsigned\""]
  320 -> 49 [style=solid label="\"float\""]
  320 -> 50 [style=solid label="\"double\""]
  320 -> 51 [style=solid label="\"void\""]
  320 -> 209 [style=solid label="'R'"]
  320 -> 56 [style=solid label="\"typename\""]
  320 -> 402 [style=solid label="\"sizeof\""]
  320 -> 403 [style=solid label="\"alignof\""]
  320 -> 404 [style=dashed label="additive-expression"]
  320 -> 405 [style=dashed label="and-expression"]
  320 -> 406 [style=dashed label="await-expression"]
  320 -> 407 [style=dashed label="binary-literal"]
  320 -> 408 [style=dashed label="boolean-literal"]
  320 -> 409 [style=dashed label="cast-expression"]
  320 -> 410 [style=dashed label="character-literal"]
  320 -> 210 [style=dashed label="class-key"]
  320 -> 66 [style=dashed label="class-name"]
  320 -> 411 [style=dashed label="compare-expression"]
  320 -> 68 [style=dashed label="concept-name"]
  320 -> 412 [style=dashed label="conditional-expression"]
  320 -> 639 [style=dashed label="constant-expression"]
  320 -> 69 [style=dashed label="conversion-function-id"]
  320 -> 70 [style=dashed label="cv-qualifier"]
  320 -> 414 [style=dashed label="decimal-floating-point-literal"]
  320 -> 415 [style=dashed label="decimal-literal"]
  320 -> 77 [style=dashed label="decltype-specifier"]
  320 -> 416 [style=dashed label="delete-expression"]
  320 -> 417 [style=dashed label="digit"]
  320 -> 418 [style=dashed label="digit-sequence"]
  320 -> 80 [style=dashed label="elaborated-enum-specifier"]
  320 -> 81 [style=dashed label="elaborated-type-specifier"]
  320 -> 419 [style=dashed label="encoding-prefix"]
  320 -> 85 [style=dashed label="enum-name"]
  320 -> 420 [style=dashed label="equality-expression"]
  320 -> 421 [style=dashed label="exclusive-or-expression"]
  320 -> 422 [style=dashed label="floating-point-literal"]
  320 -> 423 [style=dashed label="fold-expression"]
  320 -> 424 [style=dashed label="fractional-constant"]
  320 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  320 -> 426 [style=dashed label="hexadecimal-literal"]
  320 -> 427 [style=dashed label="hexadecimal-prefix"]
  320 -> 640 [style=dashed label="id-expression"]
  320 -> 429 [style=dashed label="inclusive-or-expression"]
  320 -> 430 [style=dashed label="integer-literal"]
  320 -> 431 [style=dashed label="lambda-expression"]
  320 -> 432 [style=dashed label="lambda-introducer"]
  320 -> 433 [style=dashed label="literal"]
  320 -> 96 [style=dashed label="literal-operator-id"]
  320 -> 434 [style=dashed label="logical-and-expression"]
  320 -> 435 [style=dashed label="logical-or-expression"]
  320 -> 436 [style=dashed label="multiplicative-expression"]
  320 -> 100 [style=dashed label="namespace-alias"]
  320 -> 103 [style=dashed label="namespace-name"]
  320 -> 437 [style=dashed label="nested-name-specifier"]
  320 -> 438 [style=dashed label="new-expression"]
  320 -> 439 [style=dashed label="noexcept-expression"]
  320 -> 440 [style=dashed label="nonzero-digit"]
  320 -> 441 [style=dashed label="octal-literal"]
  320 -> 109 [style=dashed label="operator-function-id"]
  320 -> 110 [style=dashed label="placeholder-type-specifier"]
  320 -> 442 [style=dashed label="pm-expression"]
  320 -> 443 [style=dashed label="pointer-literal"]
  320 -> 444 [style=dashed label="postfix-expression"]
  320 -> 445 [style=dashed label="primary-expression"]
  320 -> 113 [style=dashed label="qualified-id"]
  320 -> 446 [style=dashed label="relational-expression"]
  320 -> 447 [style=dashed label="requires-expression"]
  320 -> 448 [style=dashed label="shift-expression"]
  320 -> 115 [style=dashed label="simple-template-id"]
  320 -> 449 [style=dashed label="simple-type-specifier"]
  320 -> 450 [style=dashed label="string-literal"]
  320 -> 641 [style=dashed label="template-argument"]
  320 -> 723 [style=dashed label="template-argument-list"]
  320 -> 121 [style=dashed label="template-id"]
  320 -> 216 [style=dashed label="template-name"]
  320 -> 124 [style=dashed label="type-constraint"]
  320 -> 643 [style=dashed label="type-id"]
  320 -> 125 [style=dashed label="type-name"]
  320 -> 217 [style=dashed label="type-specifier"]
  320 -> 452 [style=dashed label="type-specifier-seq"]
  320 -> 127 [style=dashed label="typedef-name"]
  320 -> 453 [style=dashed label="typename-specifier"]
  320 -> 454 [style=dashed label="unary-expression"]
  320 -> 455 [style=dashed label="unary-operator"]
  320 -> 130 [style=dashed label="unqualified-id"]
  320 -> 456 [style=dashed label="user-defined-character-literal"]
  320 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  320 -> 458 [style=dashed label="user-defined-integer-literal"]
  320 -> 459 [style=dashed label="user-defined-literal"]
  320 -> 460 [style=dashed label="user-defined-string-literal"]
  321 [label="State 321\n\l890 private-module-fragment: \"module-keyword\" • ':' \"private\" ';'\l891                        | \"module-keyword\" • ':' \"private\" ';' declaration-seq\l"]
  321 -> 724 [style=solid label="':'"]
  322 [label="State 322\n\l227 declaration-seq: declaration-seq • declaration\l1078 translation-unit: module-declaration declaration-seq •\l1082                 | module-declaration declaration-seq • private-module-fragment\l"]
  322 -> 1 [style=solid label="IDENTIFIER"]
  322 -> 2 [style=solid label="\"using\""]
  322 -> 3 [style=solid label="';'"]
  322 -> 4 [style=solid label="\"alignas\""]
  322 -> 5 [style=solid label="'('"]
  322 -> 6 [style=solid label="\"...\""]
  322 -> 7 [style=solid label="'&'"]
  322 -> 8 [style=solid label="\"asm\""]
  322 -> 9 [style=solid label="\"::\""]
  322 -> 10 [style=solid label="'['"]
  322 -> 11 [style=solid label="\"virtual\""]
  322 -> 12 [style=solid label="\"class\""]
  322 -> 13 [style=solid label="\"struct\""]
  322 -> 14 [style=solid label="\"union\""]
  322 -> 15 [style=solid label="\"template\""]
  322 -> 16 [style=solid label="\"&&\""]
  322 -> 17 [style=solid label="\"operator\""]
  322 -> 18 [style=solid label="\"const\""]
  322 -> 19 [style=solid label="\"volatile\""]
  322 -> 20 [style=solid label="\"friend\""]
  322 -> 21 [style=solid label="\"typedef\""]
  322 -> 22 [style=solid label="\"constexpr\""]
  322 -> 23 [style=solid label="\"consteval\""]
  322 -> 24 [style=solid label="\"constinit\""]
  322 -> 25 [style=solid label="\"inline\""]
  322 -> 26 [style=solid label="\"decltype\""]
  322 -> 27 [style=solid label="\"enum\""]
  322 -> 28 [style=solid label="\"extern\""]
  322 -> 29 [style=solid label="\"explicit\""]
  322 -> 30 [style=solid label="\"export\""]
  322 -> 158 [style=solid label="\"export-keyword\""]
  322 -> 32 [style=solid label="'*'"]
  322 -> 321 [style=solid label="\"module-keyword\""]
  322 -> 34 [style=solid label="\"import-keyword\""]
  322 -> 35 [style=solid label="\"namespace\""]
  322 -> 36 [style=solid label="'~'"]
  322 -> 37 [style=solid label="\"auto\""]
  322 -> 38 [style=solid label="\"char\""]
  322 -> 39 [style=solid label="\"char8_t\""]
  322 -> 40 [style=solid label="\"char16_t\""]
  322 -> 41 [style=solid label="\"char32_t\""]
  322 -> 42 [style=solid label="\"wchar_t\""]
  322 -> 43 [style=solid label="\"bool\""]
  322 -> 44 [style=solid label="\"short\""]
  322 -> 45 [style=solid label="\"int\""]
  322 -> 46 [style=solid label="\"long\""]
  322 -> 47 [style=solid label="\"signed\""]
  322 -> 48 [style=solid label="\"unsigned\""]
  322 -> 49 [style=solid label="\"float\""]
  322 -> 50 [style=solid label="\"double\""]
  322 -> 51 [style=solid label="\"void\""]
  322 -> 52 [style=solid label="\"static_assert\""]
  322 -> 53 [style=solid label="\"static\""]
  322 -> 54 [style=solid label="\"thread_local\""]
  322 -> 55 [style=solid label="\"mutable\""]
  322 -> 56 [style=solid label="\"typename\""]
  322 -> 57 [style=dashed label="alias-declaration"]
  322 -> 58 [style=dashed label="alignment-specifier"]
  322 -> 59 [style=dashed label="asm-declaration"]
  322 -> 60 [style=dashed label="attribute-declaration"]
  322 -> 61 [style=dashed label="attribute-specifier"]
  322 -> 62 [style=dashed label="attribute-specifier-seq"]
  322 -> 63 [style=dashed label="block-declaration"]
  322 -> 64 [style=dashed label="class-head"]
  322 -> 65 [style=dashed label="class-key"]
  322 -> 66 [style=dashed label="class-name"]
  322 -> 67 [style=dashed label="class-specifier"]
  322 -> 68 [style=dashed label="concept-name"]
  322 -> 69 [style=dashed label="conversion-function-id"]
  322 -> 70 [style=dashed label="cv-qualifier"]
  322 -> 71 [style=dashed label="decl-specifier"]
  322 -> 72 [style=dashed label="decl-specifier-seq"]
  322 -> 290 [style=dashed label="declaration"]
  322 -> 75 [style=dashed label="declarator"]
  322 -> 76 [style=dashed label="declarator-id"]
  322 -> 77 [style=dashed label="decltype-specifier"]
  322 -> 78 [style=dashed label="deduction-guide"]
  322 -> 79 [style=dashed label="defining-type-specifier"]
  322 -> 80 [style=dashed label="elaborated-enum-specifier"]
  322 -> 81 [style=dashed label="elaborated-type-specifier"]
  322 -> 82 [style=dashed label="empty-declaration"]
  322 -> 83 [style=dashed label="enum-head"]
  322 -> 84 [style=dashed label="enum-key"]
  322 -> 85 [style=dashed label="enum-name"]
  322 -> 86 [style=dashed label="enum-specifier"]
  322 -> 87 [style=dashed label="explicit-instantiation"]
  322 -> 88 [style=dashed label="explicit-specialization"]
  322 -> 89 [style=dashed label="explicit-specifier"]
  322 -> 90 [style=dashed label="export-declaration"]
  322 -> 91 [style=dashed label="function-definition"]
  322 -> 92 [style=dashed label="function-specifier"]
  322 -> 94 [style=dashed label="id-expression"]
  322 -> 95 [style=dashed label="linkage-specification"]
  322 -> 96 [style=dashed label="literal-operator-id"]
  322 -> 98 [style=dashed label="module-import-declaration"]
  322 -> 99 [style=dashed label="named-namespace-definition"]
  322 -> 100 [style=dashed label="namespace-alias"]
  322 -> 101 [style=dashed label="namespace-alias-definition"]
  322 -> 102 [style=dashed label="namespace-definition"]
  322 -> 103 [style=dashed label="namespace-name"]
  322 -> 104 [style=dashed label="nested-name-specifier"]
  322 -> 105 [style=dashed label="nested-namespace-definition"]
  322 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  322 -> 107 [style=dashed label="noptr-declarator"]
  322 -> 108 [style=dashed label="opaque-enum-declaration"]
  322 -> 109 [style=dashed label="operator-function-id"]
  322 -> 110 [style=dashed label="placeholder-type-specifier"]
  322 -> 725 [style=dashed label="private-module-fragment"]
  322 -> 111 [style=dashed label="ptr-declarator"]
  322 -> 112 [style=dashed label="ptr-operator"]
  322 -> 113 [style=dashed label="qualified-id"]
  322 -> 114 [style=dashed label="simple-declaration"]
  322 -> 115 [style=dashed label="simple-template-id"]
  322 -> 116 [style=dashed label="simple-type-specifier"]
  322 -> 117 [style=dashed label="static_assert-declaration"]
  322 -> 118 [style=dashed label="storage-class-specifier"]
  322 -> 119 [style=dashed label="template-declaration"]
  322 -> 120 [style=dashed label="template-head"]
  322 -> 121 [style=dashed label="template-id"]
  322 -> 122 [style=dashed label="template-name"]
  322 -> 124 [style=dashed label="type-constraint"]
  322 -> 125 [style=dashed label="type-name"]
  322 -> 126 [style=dashed label="type-specifier"]
  322 -> 127 [style=dashed label="typedef-name"]
  322 -> 128 [style=dashed label="typename-specifier"]
  322 -> 129 [style=dashed label="unnamed-namespace-definition"]
  322 -> 130 [style=dashed label="unqualified-id"]
  322 -> 131 [style=dashed label="using-declaration"]
  322 -> 132 [style=dashed label="using-directive"]
  322 -> 133 [style=dashed label="using-enum-declaration"]
  322 -> "322R1078" [style=solid]
 "322R1078" [label="R1078", fillcolor=3, shape=diamond, style=filled]
  323 [label="State 323\n\l1080 translation-unit: module-declaration private-module-fragment •\l"]
  323 -> "323R1080" [style=solid]
 "323R1080" [label="R1080", fillcolor=3, shape=diamond, style=filled]
  324 [label="State 324\n\l661 nested-name-specifier: namespace-name \"::\" •\l"]
  324 -> "324R661" [style=solid]
 "324R661" [label="R661", fillcolor=3, shape=diamond, style=filled]
  325 [label="State 325\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l1154 unqualified-id: IDENTIFIER •\l"]
  325 -> 726 [style=solid label="\"::\""]
  325 -> "325R145d" [label="[\"::\"]", style=solid]
 "325R145d" [label="R145", fillcolor=5, shape=diamond, style=filled]
  325 -> "325R145" [style=solid]
 "325R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  325 -> "325R163d" [label="[\"decltype\", \"auto\"]", style=solid]
 "325R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  325 -> "325R163" [label="['<']", style=solid]
 "325R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  325 -> "325R297d" [label="[IDENTIFIER, '=', ';', \"alignas\", '(', ')', \"...\", '&', ',', \"::\", '[', ':', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", '>', \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "325R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  325 -> "325R1066d" [label="[IDENTIFIER, '=', ';', \"alignas\", '(', ')', \"...\", '&', ',', \"::\", '[', ':', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", '<', '>', \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "325R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  325 -> "325R1124d" [label="[IDENTIFIER, '=', ';', \"alignas\", '(', ')', \"...\", '&', ',', \"::\", '[', ':', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", '>', \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "325R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  325 -> "325R1154d" [label="['=', ';', \"alignas\", '(', ')', \"...\", '&', ',', '[', ':', '{', \"&&\", '<', '>', '*']", style=solid]
 "325R1154d" [label="R1154", fillcolor=5, shape=diamond, style=filled]
  325 -> "325R1154" [label="['+', '-', \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ']', '}', \"final\", \"<=>\", '?', \"||\", \"->\", '.', \"==\", \"!=\", '^', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"requires\", \"++\", \"--\", \"override\"]", style=solid]
 "325R1154" [label="R1154", fillcolor=3, shape=diamond, style=filled]
  326 [label="State 326\n\l665 nested-name-specifier: nested-name-specifier \"template\" • simple-template-id \"::\"\l914 qualified-id: nested-name-specifier \"template\" • unqualified-id\l1001 simple-type-specifier: nested-name-specifier \"template\" • simple-template-id\l"]
  326 -> 727 [style=solid label="IDENTIFIER"]
  326 -> 17 [style=solid label="\"operator\""]
  326 -> 36 [style=solid label="'~'"]
  326 -> 69 [style=dashed label="conversion-function-id"]
  326 -> 96 [style=dashed label="literal-operator-id"]
  326 -> 109 [style=dashed label="operator-function-id"]
  326 -> 728 [style=dashed label="simple-template-id"]
  326 -> 121 [style=dashed label="template-id"]
  326 -> 143 [style=dashed label="template-name"]
  326 -> 729 [style=dashed label="unqualified-id"]
  327 [label="State 327\n\l905 ptr-operator: nested-name-specifier '*' •\l906             | nested-name-specifier '*' • attribute-specifier-seq\l907             | nested-name-specifier '*' • cv-qualifier-seq\l908             | nested-name-specifier '*' • attribute-specifier-seq cv-qualifier-seq\l"]
  327 -> 4 [style=solid label="\"alignas\""]
  327 -> 10 [style=solid label="'['"]
  327 -> 18 [style=solid label="\"const\""]
  327 -> 19 [style=solid label="\"volatile\""]
  327 -> 58 [style=dashed label="alignment-specifier"]
  327 -> 61 [style=dashed label="attribute-specifier"]
  327 -> 730 [style=dashed label="attribute-specifier-seq"]
  327 -> 234 [style=dashed label="cv-qualifier"]
  327 -> 731 [style=dashed label="cv-qualifier-seq"]
  327 -> "327R905d" [label="[\"alignas\", '[', \"const\", \"volatile\"]", style=solid]
 "327R905d" [label="R905", fillcolor=5, shape=diamond, style=filled]
  327 -> "327R905" [style=solid]
 "327R905" [label="R905", fillcolor=3, shape=diamond, style=filled]
  328 [label="State 328\n\l1084 type-constraint: nested-name-specifier concept-name •\l1086                | nested-name-specifier concept-name • '<' '>'\l1088                | nested-name-specifier concept-name • '<' template-argument-list '>'\l"]
  328 -> 732 [style=solid label="'<'"]
  328 -> "328R1084" [style=solid]
 "328R1084" [label="R1084", fillcolor=3, shape=diamond, style=filled]
  329 [label="State 329\n\l146 class-name: simple-template-id •\l664 nested-name-specifier: nested-name-specifier simple-template-id • \"::\"\l1061 template-id: simple-template-id •\l1125 typedef-name: simple-template-id •\l"]
  329 -> 733 [style=solid label="\"::\""]
  329 -> "329R146d" [label="[\"::\"]", style=solid]
 "329R146d" [label="R146", fillcolor=5, shape=diamond, style=filled]
  329 -> "329R146" [style=solid]
 "329R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  329 -> "329R1061d" [label="['=', ';', \"alignas\", '(', ')', \"...\", '&', ',', '[', ':', '{', \"&&\", '>', '*']", style=solid]
 "329R1061d" [label="R1061", fillcolor=5, shape=diamond, style=filled]
  329 -> "329R1061" [label="['+', '-', \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ']', '}', \"final\", \"<=>\", '?', \"||\", \"->\", '.', \"==\", \"!=\", '^', '<', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"requires\", \"++\", \"--\", \"override\"]", style=solid]
 "329R1061" [label="R1061", fillcolor=3, shape=diamond, style=filled]
  329 -> "329R1125d" [label="[IDENTIFIER, '=', ';', \"alignas\", '(', ')', \"...\", '&', ',', \"::\", '[', ':', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", '>', \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "329R1125d" [label="R1125", fillcolor=5, shape=diamond, style=filled]
  330 [label="State 330\n\l997 simple-template-id: template-name • '<' '>'\l998                   | template-name • '<' template-argument-list '>'\l1004 simple-type-specifier: nested-name-specifier template-name •\l"]
  330 -> 342 [style=solid label="'<'"]
  330 -> "330R1004d" [label="['<']", style=solid]
 "330R1004d" [label="R1004", fillcolor=5, shape=diamond, style=filled]
  330 -> "330R1004" [style=solid]
 "330R1004" [label="R1004", fillcolor=3, shape=diamond, style=filled]
  331 [label="State 331\n\l999 simple-type-specifier: nested-name-specifier type-name •\l"]
  331 -> "331R999" [style=solid]
 "331R999" [label="R999", fillcolor=3, shape=diamond, style=filled]
  332 [label="State 332\n\l913 qualified-id: nested-name-specifier unqualified-id •\l"]
  332 -> "332R913" [style=solid]
 "332R913" [label="R913", fillcolor=3, shape=diamond, style=filled]
  333 [label="State 333\n\l836 parameters-and-qualifiers: '(' • parameter-declaration-clause ')'\l837                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq\l838                          | '(' • parameter-declaration-clause ')' ref-qualifier\l839                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier\l840                          | '(' • parameter-declaration-clause ')' noexcept-specifier\l841                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier\l842                          | '(' • parameter-declaration-clause ')' ref-qualifier noexcept-specifier\l843                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier\l844                          | '(' • parameter-declaration-clause ')' attribute-specifier-seq\l845                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq attribute-specifier-seq\l846                          | '(' • parameter-declaration-clause ')' ref-qualifier attribute-specifier-seq\l847                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier attribute-specifier-seq\l848                          | '(' • parameter-declaration-clause ')' noexcept-specifier attribute-specifier-seq\l849                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier attribute-specifier-seq\l850                          | '(' • parameter-declaration-clause ')' ref-qualifier noexcept-specifier attribute-specifier-seq\l851                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq\l"]
  333 -> 161 [style=solid label="IDENTIFIER"]
  333 -> 4 [style=solid label="\"alignas\""]
  333 -> 734 [style=solid label="\"...\""]
  333 -> 9 [style=solid label="\"::\""]
  333 -> 10 [style=solid label="'['"]
  333 -> 11 [style=solid label="\"virtual\""]
  333 -> 12 [style=solid label="\"class\""]
  333 -> 13 [style=solid label="\"struct\""]
  333 -> 14 [style=solid label="\"union\""]
  333 -> 18 [style=solid label="\"const\""]
  333 -> 19 [style=solid label="\"volatile\""]
  333 -> 20 [style=solid label="\"friend\""]
  333 -> 21 [style=solid label="\"typedef\""]
  333 -> 22 [style=solid label="\"constexpr\""]
  333 -> 23 [style=solid label="\"consteval\""]
  333 -> 24 [style=solid label="\"constinit\""]
  333 -> 263 [style=solid label="\"inline\""]
  333 -> 26 [style=solid label="\"decltype\""]
  333 -> 27 [style=solid label="\"enum\""]
  333 -> 264 [style=solid label="\"extern\""]
  333 -> 29 [style=solid label="\"explicit\""]
  333 -> 476 [style=solid label="\"this\""]
  333 -> 37 [style=solid label="\"auto\""]
  333 -> 38 [style=solid label="\"char\""]
  333 -> 39 [style=solid label="\"char8_t\""]
  333 -> 40 [style=solid label="\"char16_t\""]
  333 -> 41 [style=solid label="\"char32_t\""]
  333 -> 42 [style=solid label="\"wchar_t\""]
  333 -> 43 [style=solid label="\"bool\""]
  333 -> 44 [style=solid label="\"short\""]
  333 -> 45 [style=solid label="\"int\""]
  333 -> 46 [style=solid label="\"long\""]
  333 -> 47 [style=solid label="\"signed\""]
  333 -> 48 [style=solid label="\"unsigned\""]
  333 -> 49 [style=solid label="\"float\""]
  333 -> 50 [style=solid label="\"double\""]
  333 -> 51 [style=solid label="\"void\""]
  333 -> 53 [style=solid label="\"static\""]
  333 -> 54 [style=solid label="\"thread_local\""]
  333 -> 55 [style=solid label="\"mutable\""]
  333 -> 56 [style=solid label="\"typename\""]
  333 -> 58 [style=dashed label="alignment-specifier"]
  333 -> 61 [style=dashed label="attribute-specifier"]
  333 -> 478 [style=dashed label="attribute-specifier-seq"]
  333 -> 64 [style=dashed label="class-head"]
  333 -> 65 [style=dashed label="class-key"]
  333 -> 66 [style=dashed label="class-name"]
  333 -> 67 [style=dashed label="class-specifier"]
  333 -> 68 [style=dashed label="concept-name"]
  333 -> 70 [style=dashed label="cv-qualifier"]
  333 -> 71 [style=dashed label="decl-specifier"]
  333 -> 479 [style=dashed label="decl-specifier-seq"]
  333 -> 77 [style=dashed label="decltype-specifier"]
  333 -> 79 [style=dashed label="defining-type-specifier"]
  333 -> 80 [style=dashed label="elaborated-enum-specifier"]
  333 -> 81 [style=dashed label="elaborated-type-specifier"]
  333 -> 83 [style=dashed label="enum-head"]
  333 -> 268 [style=dashed label="enum-key"]
  333 -> 85 [style=dashed label="enum-name"]
  333 -> 86 [style=dashed label="enum-specifier"]
  333 -> 269 [style=dashed label="explicit-specifier"]
  333 -> 92 [style=dashed label="function-specifier"]
  333 -> 100 [style=dashed label="namespace-alias"]
  333 -> 103 [style=dashed label="namespace-name"]
  333 -> 213 [style=dashed label="nested-name-specifier"]
  333 -> 735 [style=dashed label="parameter-declaration"]
  333 -> 736 [style=dashed label="parameter-declaration-clause"]
  333 -> 737 [style=dashed label="parameter-declaration-list"]
  333 -> 110 [style=dashed label="placeholder-type-specifier"]
  333 -> 142 [style=dashed label="simple-template-id"]
  333 -> 116 [style=dashed label="simple-type-specifier"]
  333 -> 118 [style=dashed label="storage-class-specifier"]
  333 -> 216 [style=dashed label="template-name"]
  333 -> 124 [style=dashed label="type-constraint"]
  333 -> 125 [style=dashed label="type-name"]
  333 -> 126 [style=dashed label="type-specifier"]
  333 -> 127 [style=dashed label="typedef-name"]
  333 -> 128 [style=dashed label="typename-specifier"]
  334 [label="State 334\n\l728 noptr-declarator: noptr-declarator '[' • ']'\l729                 | noptr-declarator '[' • constant-expression ']'\l730                 | noptr-declarator '[' • ']' attribute-specifier-seq\l731                 | noptr-declarator '[' • constant-expression ']' attribute-specifier-seq\l"]
  334 -> 1 [style=solid label="IDENTIFIER"]
  334 -> 361 [style=solid label="'+'"]
  334 -> 362 [style=solid label="'-'"]
  334 -> 363 [style=solid label="'('"]
  334 -> 364 [style=solid label="'&'"]
  334 -> 365 [style=solid label="\"::\""]
  334 -> 366 [style=solid label="'['"]
  334 -> 738 [style=solid label="']'"]
  334 -> 367 [style=solid label="\"co_await\""]
  334 -> 368 [style=solid label="'0'"]
  334 -> 369 [style=solid label="'1'"]
  334 -> 370 [style=solid label="\"0b\""]
  334 -> 371 [style=solid label="\"0B\""]
  334 -> 372 [style=solid label="'\\''"]
  334 -> 373 [style=solid label="\"false\""]
  334 -> 374 [style=solid label="\"true\""]
  334 -> 375 [style=solid label="\"noexcept\""]
  334 -> 17 [style=solid label="\"operator\""]
  334 -> 26 [style=solid label="\"decltype\""]
  334 -> 376 [style=solid label="\"delete\""]
  334 -> 377 [style=solid label="'.'"]
  334 -> 378 [style=solid label="'2'"]
  334 -> 379 [style=solid label="'3'"]
  334 -> 380 [style=solid label="'4'"]
  334 -> 381 [style=solid label="'5'"]
  334 -> 382 [style=solid label="'6'"]
  334 -> 383 [style=solid label="'7'"]
  334 -> 384 [style=solid label="'8'"]
  334 -> 385 [style=solid label="'9'"]
  334 -> 185 [style=solid label="\"u8\""]
  334 -> 186 [style=solid label="'u'"]
  334 -> 187 [style=solid label="'U'"]
  334 -> 188 [style=solid label="'L'"]
  334 -> 386 [style=solid label="'*'"]
  334 -> 203 [style=solid label="'\"'"]
  334 -> 387 [style=solid label="\"0x\""]
  334 -> 388 [style=solid label="\"0X\""]
  334 -> 389 [style=solid label="\"requires\""]
  334 -> 390 [style=solid label="\"new\""]
  334 -> 391 [style=solid label="'~'"]
  334 -> 392 [style=solid label="'!'"]
  334 -> 393 [style=solid label="\"++\""]
  334 -> 394 [style=solid label="\"--\""]
  334 -> 395 [style=solid label="\"this\""]
  334 -> 37 [style=solid label="\"auto\""]
  334 -> 396 [style=solid label="\"nullptr\""]
  334 -> 397 [style=solid label="\"dynamic_cast\""]
  334 -> 398 [style=solid label="\"static_cast\""]
  334 -> 399 [style=solid label="\"reinterpret_cast\""]
  334 -> 400 [style=solid label="\"const_cast\""]
  334 -> 401 [style=solid label="\"typeid\""]
  334 -> 38 [style=solid label="\"char\""]
  334 -> 39 [style=solid label="\"char8_t\""]
  334 -> 40 [style=solid label="\"char16_t\""]
  334 -> 41 [style=solid label="\"char32_t\""]
  334 -> 42 [style=solid label="\"wchar_t\""]
  334 -> 43 [style=solid label="\"bool\""]
  334 -> 44 [style=solid label="\"short\""]
  334 -> 45 [style=solid label="\"int\""]
  334 -> 46 [style=solid label="\"long\""]
  334 -> 47 [style=solid label="\"signed\""]
  334 -> 48 [style=solid label="\"unsigned\""]
  334 -> 49 [style=solid label="\"float\""]
  334 -> 50 [style=solid label="\"double\""]
  334 -> 51 [style=solid label="\"void\""]
  334 -> 209 [style=solid label="'R'"]
  334 -> 56 [style=solid label="\"typename\""]
  334 -> 402 [style=solid label="\"sizeof\""]
  334 -> 403 [style=solid label="\"alignof\""]
  334 -> 404 [style=dashed label="additive-expression"]
  334 -> 405 [style=dashed label="and-expression"]
  334 -> 406 [style=dashed label="await-expression"]
  334 -> 407 [style=dashed label="binary-literal"]
  334 -> 408 [style=dashed label="boolean-literal"]
  334 -> 409 [style=dashed label="cast-expression"]
  334 -> 410 [style=dashed label="character-literal"]
  334 -> 66 [style=dashed label="class-name"]
  334 -> 411 [style=dashed label="compare-expression"]
  334 -> 68 [style=dashed label="concept-name"]
  334 -> 412 [style=dashed label="conditional-expression"]
  334 -> 739 [style=dashed label="constant-expression"]
  334 -> 69 [style=dashed label="conversion-function-id"]
  334 -> 414 [style=dashed label="decimal-floating-point-literal"]
  334 -> 415 [style=dashed label="decimal-literal"]
  334 -> 77 [style=dashed label="decltype-specifier"]
  334 -> 416 [style=dashed label="delete-expression"]
  334 -> 417 [style=dashed label="digit"]
  334 -> 418 [style=dashed label="digit-sequence"]
  334 -> 419 [style=dashed label="encoding-prefix"]
  334 -> 85 [style=dashed label="enum-name"]
  334 -> 420 [style=dashed label="equality-expression"]
  334 -> 421 [style=dashed label="exclusive-or-expression"]
  334 -> 422 [style=dashed label="floating-point-literal"]
  334 -> 423 [style=dashed label="fold-expression"]
  334 -> 424 [style=dashed label="fractional-constant"]
  334 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  334 -> 426 [style=dashed label="hexadecimal-literal"]
  334 -> 427 [style=dashed label="hexadecimal-prefix"]
  334 -> 428 [style=dashed label="id-expression"]
  334 -> 429 [style=dashed label="inclusive-or-expression"]
  334 -> 430 [style=dashed label="integer-literal"]
  334 -> 431 [style=dashed label="lambda-expression"]
  334 -> 432 [style=dashed label="lambda-introducer"]
  334 -> 433 [style=dashed label="literal"]
  334 -> 96 [style=dashed label="literal-operator-id"]
  334 -> 434 [style=dashed label="logical-and-expression"]
  334 -> 435 [style=dashed label="logical-or-expression"]
  334 -> 436 [style=dashed label="multiplicative-expression"]
  334 -> 100 [style=dashed label="namespace-alias"]
  334 -> 103 [style=dashed label="namespace-name"]
  334 -> 437 [style=dashed label="nested-name-specifier"]
  334 -> 438 [style=dashed label="new-expression"]
  334 -> 439 [style=dashed label="noexcept-expression"]
  334 -> 440 [style=dashed label="nonzero-digit"]
  334 -> 441 [style=dashed label="octal-literal"]
  334 -> 109 [style=dashed label="operator-function-id"]
  334 -> 110 [style=dashed label="placeholder-type-specifier"]
  334 -> 442 [style=dashed label="pm-expression"]
  334 -> 443 [style=dashed label="pointer-literal"]
  334 -> 444 [style=dashed label="postfix-expression"]
  334 -> 445 [style=dashed label="primary-expression"]
  334 -> 113 [style=dashed label="qualified-id"]
  334 -> 446 [style=dashed label="relational-expression"]
  334 -> 447 [style=dashed label="requires-expression"]
  334 -> 448 [style=dashed label="shift-expression"]
  334 -> 115 [style=dashed label="simple-template-id"]
  334 -> 534 [style=dashed label="simple-type-specifier"]
  334 -> 450 [style=dashed label="string-literal"]
  334 -> 121 [style=dashed label="template-id"]
  334 -> 216 [style=dashed label="template-name"]
  334 -> 124 [style=dashed label="type-constraint"]
  334 -> 125 [style=dashed label="type-name"]
  334 -> 127 [style=dashed label="typedef-name"]
  334 -> 536 [style=dashed label="typename-specifier"]
  334 -> 454 [style=dashed label="unary-expression"]
  334 -> 455 [style=dashed label="unary-operator"]
  334 -> 130 [style=dashed label="unqualified-id"]
  334 -> 456 [style=dashed label="user-defined-character-literal"]
  334 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  334 -> 458 [style=dashed label="user-defined-integer-literal"]
  334 -> 459 [style=dashed label="user-defined-literal"]
  334 -> 460 [style=dashed label="user-defined-string-literal"]
  335 [label="State 335\n\l230 declarator: noptr-declarator parameters-and-qualifiers • trailing-return-type\l727 noptr-declarator: noptr-declarator parameters-and-qualifiers •\l"]
  335 -> 740 [style=solid label="\"->\""]
  335 -> 741 [style=dashed label="trailing-return-type"]
  335 -> "335R727" [style=solid]
 "335R727" [label="R727", fillcolor=3, shape=diamond, style=filled]
  336 [label="State 336\n\l1062 template-id: operator-function-id '<' • '>'\l1063            | operator-function-id '<' • template-argument-list '>'\l"]
  336 -> 1 [style=solid label="IDENTIFIER"]
  336 -> 361 [style=solid label="'+'"]
  336 -> 362 [style=solid label="'-'"]
  336 -> 363 [style=solid label="'('"]
  336 -> 364 [style=solid label="'&'"]
  336 -> 365 [style=solid label="\"::\""]
  336 -> 366 [style=solid label="'['"]
  336 -> 367 [style=solid label="\"co_await\""]
  336 -> 368 [style=solid label="'0'"]
  336 -> 369 [style=solid label="'1'"]
  336 -> 370 [style=solid label="\"0b\""]
  336 -> 371 [style=solid label="\"0B\""]
  336 -> 372 [style=solid label="'\\''"]
  336 -> 373 [style=solid label="\"false\""]
  336 -> 374 [style=solid label="\"true\""]
  336 -> 12 [style=solid label="\"class\""]
  336 -> 13 [style=solid label="\"struct\""]
  336 -> 14 [style=solid label="\"union\""]
  336 -> 375 [style=solid label="\"noexcept\""]
  336 -> 17 [style=solid label="\"operator\""]
  336 -> 18 [style=solid label="\"const\""]
  336 -> 19 [style=solid label="\"volatile\""]
  336 -> 26 [style=solid label="\"decltype\""]
  336 -> 376 [style=solid label="\"delete\""]
  336 -> 377 [style=solid label="'.'"]
  336 -> 378 [style=solid label="'2'"]
  336 -> 379 [style=solid label="'3'"]
  336 -> 380 [style=solid label="'4'"]
  336 -> 381 [style=solid label="'5'"]
  336 -> 382 [style=solid label="'6'"]
  336 -> 383 [style=solid label="'7'"]
  336 -> 384 [style=solid label="'8'"]
  336 -> 385 [style=solid label="'9'"]
  336 -> 136 [style=solid label="\"enum\""]
  336 -> 185 [style=solid label="\"u8\""]
  336 -> 186 [style=solid label="'u'"]
  336 -> 187 [style=solid label="'U'"]
  336 -> 188 [style=solid label="'L'"]
  336 -> 742 [style=solid label="'>'"]
  336 -> 386 [style=solid label="'*'"]
  336 -> 203 [style=solid label="'\"'"]
  336 -> 387 [style=solid label="\"0x\""]
  336 -> 388 [style=solid label="\"0X\""]
  336 -> 389 [style=solid label="\"requires\""]
  336 -> 390 [style=solid label="\"new\""]
  336 -> 391 [style=solid label="'~'"]
  336 -> 392 [style=solid label="'!'"]
  336 -> 393 [style=solid label="\"++\""]
  336 -> 394 [style=solid label="\"--\""]
  336 -> 395 [style=solid label="\"this\""]
  336 -> 37 [style=solid label="\"auto\""]
  336 -> 396 [style=solid label="\"nullptr\""]
  336 -> 397 [style=solid label="\"dynamic_cast\""]
  336 -> 398 [style=solid label="\"static_cast\""]
  336 -> 399 [style=solid label="\"reinterpret_cast\""]
  336 -> 400 [style=solid label="\"const_cast\""]
  336 -> 401 [style=solid label="\"typeid\""]
  336 -> 38 [style=solid label="\"char\""]
  336 -> 39 [style=solid label="\"char8_t\""]
  336 -> 40 [style=solid label="\"char16_t\""]
  336 -> 41 [style=solid label="\"char32_t\""]
  336 -> 42 [style=solid label="\"wchar_t\""]
  336 -> 43 [style=solid label="\"bool\""]
  336 -> 44 [style=solid label="\"short\""]
  336 -> 45 [style=solid label="\"int\""]
  336 -> 46 [style=solid label="\"long\""]
  336 -> 47 [style=solid label="\"signed\""]
  336 -> 48 [style=solid label="\"unsigned\""]
  336 -> 49 [style=solid label="\"float\""]
  336 -> 50 [style=solid label="\"double\""]
  336 -> 51 [style=solid label="\"void\""]
  336 -> 209 [style=solid label="'R'"]
  336 -> 56 [style=solid label="\"typename\""]
  336 -> 402 [style=solid label="\"sizeof\""]
  336 -> 403 [style=solid label="\"alignof\""]
  336 -> 404 [style=dashed label="additive-expression"]
  336 -> 405 [style=dashed label="and-expression"]
  336 -> 406 [style=dashed label="await-expression"]
  336 -> 407 [style=dashed label="binary-literal"]
  336 -> 408 [style=dashed label="boolean-literal"]
  336 -> 409 [style=dashed label="cast-expression"]
  336 -> 410 [style=dashed label="character-literal"]
  336 -> 210 [style=dashed label="class-key"]
  336 -> 66 [style=dashed label="class-name"]
  336 -> 411 [style=dashed label="compare-expression"]
  336 -> 68 [style=dashed label="concept-name"]
  336 -> 412 [style=dashed label="conditional-expression"]
  336 -> 639 [style=dashed label="constant-expression"]
  336 -> 69 [style=dashed label="conversion-function-id"]
  336 -> 70 [style=dashed label="cv-qualifier"]
  336 -> 414 [style=dashed label="decimal-floating-point-literal"]
  336 -> 415 [style=dashed label="decimal-literal"]
  336 -> 77 [style=dashed label="decltype-specifier"]
  336 -> 416 [style=dashed label="delete-expression"]
  336 -> 417 [style=dashed label="digit"]
  336 -> 418 [style=dashed label="digit-sequence"]
  336 -> 80 [style=dashed label="elaborated-enum-specifier"]
  336 -> 81 [style=dashed label="elaborated-type-specifier"]
  336 -> 419 [style=dashed label="encoding-prefix"]
  336 -> 85 [style=dashed label="enum-name"]
  336 -> 420 [style=dashed label="equality-expression"]
  336 -> 421 [style=dashed label="exclusive-or-expression"]
  336 -> 422 [style=dashed label="floating-point-literal"]
  336 -> 423 [style=dashed label="fold-expression"]
  336 -> 424 [style=dashed label="fractional-constant"]
  336 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  336 -> 426 [style=dashed label="hexadecimal-literal"]
  336 -> 427 [style=dashed label="hexadecimal-prefix"]
  336 -> 640 [style=dashed label="id-expression"]
  336 -> 429 [style=dashed label="inclusive-or-expression"]
  336 -> 430 [style=dashed label="integer-literal"]
  336 -> 431 [style=dashed label="lambda-expression"]
  336 -> 432 [style=dashed label="lambda-introducer"]
  336 -> 433 [style=dashed label="literal"]
  336 -> 96 [style=dashed label="literal-operator-id"]
  336 -> 434 [style=dashed label="logical-and-expression"]
  336 -> 435 [style=dashed label="logical-or-expression"]
  336 -> 436 [style=dashed label="multiplicative-expression"]
  336 -> 100 [style=dashed label="namespace-alias"]
  336 -> 103 [style=dashed label="namespace-name"]
  336 -> 437 [style=dashed label="nested-name-specifier"]
  336 -> 438 [style=dashed label="new-expression"]
  336 -> 439 [style=dashed label="noexcept-expression"]
  336 -> 440 [style=dashed label="nonzero-digit"]
  336 -> 441 [style=dashed label="octal-literal"]
  336 -> 109 [style=dashed label="operator-function-id"]
  336 -> 110 [style=dashed label="placeholder-type-specifier"]
  336 -> 442 [style=dashed label="pm-expression"]
  336 -> 443 [style=dashed label="pointer-literal"]
  336 -> 444 [style=dashed label="postfix-expression"]
  336 -> 445 [style=dashed label="primary-expression"]
  336 -> 113 [style=dashed label="qualified-id"]
  336 -> 446 [style=dashed label="relational-expression"]
  336 -> 447 [style=dashed label="requires-expression"]
  336 -> 448 [style=dashed label="shift-expression"]
  336 -> 115 [style=dashed label="simple-template-id"]
  336 -> 449 [style=dashed label="simple-type-specifier"]
  336 -> 450 [style=dashed label="string-literal"]
  336 -> 641 [style=dashed label="template-argument"]
  336 -> 743 [style=dashed label="template-argument-list"]
  336 -> 121 [style=dashed label="template-id"]
  336 -> 216 [style=dashed label="template-name"]
  336 -> 124 [style=dashed label="type-constraint"]
  336 -> 643 [style=dashed label="type-id"]
  336 -> 125 [style=dashed label="type-name"]
  336 -> 217 [style=dashed label="type-specifier"]
  336 -> 452 [style=dashed label="type-specifier-seq"]
  336 -> 127 [style=dashed label="typedef-name"]
  336 -> 453 [style=dashed label="typename-specifier"]
  336 -> 454 [style=dashed label="unary-expression"]
  336 -> 455 [style=dashed label="unary-operator"]
  336 -> 130 [style=dashed label="unqualified-id"]
  336 -> 456 [style=dashed label="user-defined-character-literal"]
  336 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  336 -> 458 [style=dashed label="user-defined-integer-literal"]
  336 -> 459 [style=dashed label="user-defined-literal"]
  336 -> 460 [style=dashed label="user-defined-string-literal"]
  337 [label="State 337\n\l896 ptr-declarator: ptr-operator ptr-declarator •\l"]
  337 -> "337R896" [style=solid]
 "337R896" [label="R896", fillcolor=3, shape=diamond, style=filled]
  338 [label="State 338\n\l162 concept-definition: \"concept\" • concept-name '=' constraint-expression ';'\l"]
  338 -> 744 [style=solid label="IDENTIFIER"]
  338 -> 745 [style=dashed label="concept-name"]
  339 [label="State 339\n\l1058 template-declaration: template-head concept-definition •\l"]
  339 -> "339R1058" [style=solid]
 "339R1058" [label="R1058", fillcolor=3, shape=diamond, style=filled]
  340 [label="State 340\n\l1057 template-declaration: template-head declaration •\l"]
  340 -> "340R1057" [style=solid]
 "340R1057" [label="R1057", fillcolor=3, shape=diamond, style=filled]
  341 [label="State 341\n\l235 deduction-guide: template-name '(' • parameter-declaration-clause ')' \"->\" simple-template-id ';'\l"]
  341 -> 161 [style=solid label="IDENTIFIER"]
  341 -> 4 [style=solid label="\"alignas\""]
  341 -> 734 [style=solid label="\"...\""]
  341 -> 9 [style=solid label="\"::\""]
  341 -> 10 [style=solid label="'['"]
  341 -> 11 [style=solid label="\"virtual\""]
  341 -> 12 [style=solid label="\"class\""]
  341 -> 13 [style=solid label="\"struct\""]
  341 -> 14 [style=solid label="\"union\""]
  341 -> 18 [style=solid label="\"const\""]
  341 -> 19 [style=solid label="\"volatile\""]
  341 -> 20 [style=solid label="\"friend\""]
  341 -> 21 [style=solid label="\"typedef\""]
  341 -> 22 [style=solid label="\"constexpr\""]
  341 -> 23 [style=solid label="\"consteval\""]
  341 -> 24 [style=solid label="\"constinit\""]
  341 -> 263 [style=solid label="\"inline\""]
  341 -> 26 [style=solid label="\"decltype\""]
  341 -> 27 [style=solid label="\"enum\""]
  341 -> 264 [style=solid label="\"extern\""]
  341 -> 29 [style=solid label="\"explicit\""]
  341 -> 476 [style=solid label="\"this\""]
  341 -> 37 [style=solid label="\"auto\""]
  341 -> 38 [style=solid label="\"char\""]
  341 -> 39 [style=solid label="\"char8_t\""]
  341 -> 40 [style=solid label="\"char16_t\""]
  341 -> 41 [style=solid label="\"char32_t\""]
  341 -> 42 [style=solid label="\"wchar_t\""]
  341 -> 43 [style=solid label="\"bool\""]
  341 -> 44 [style=solid label="\"short\""]
  341 -> 45 [style=solid label="\"int\""]
  341 -> 46 [style=solid label="\"long\""]
  341 -> 47 [style=solid label="\"signed\""]
  341 -> 48 [style=solid label="\"unsigned\""]
  341 -> 49 [style=solid label="\"float\""]
  341 -> 50 [style=solid label="\"double\""]
  341 -> 51 [style=solid label="\"void\""]
  341 -> 53 [style=solid label="\"static\""]
  341 -> 54 [style=solid label="\"thread_local\""]
  341 -> 55 [style=solid label="\"mutable\""]
  341 -> 56 [style=solid label="\"typename\""]
  341 -> 58 [style=dashed label="alignment-specifier"]
  341 -> 61 [style=dashed label="attribute-specifier"]
  341 -> 478 [style=dashed label="attribute-specifier-seq"]
  341 -> 64 [style=dashed label="class-head"]
  341 -> 65 [style=dashed label="class-key"]
  341 -> 66 [style=dashed label="class-name"]
  341 -> 67 [style=dashed label="class-specifier"]
  341 -> 68 [style=dashed label="concept-name"]
  341 -> 70 [style=dashed label="cv-qualifier"]
  341 -> 71 [style=dashed label="decl-specifier"]
  341 -> 479 [style=dashed label="decl-specifier-seq"]
  341 -> 77 [style=dashed label="decltype-specifier"]
  341 -> 79 [style=dashed label="defining-type-specifier"]
  341 -> 80 [style=dashed label="elaborated-enum-specifier"]
  341 -> 81 [style=dashed label="elaborated-type-specifier"]
  341 -> 83 [style=dashed label="enum-head"]
  341 -> 268 [style=dashed label="enum-key"]
  341 -> 85 [style=dashed label="enum-name"]
  341 -> 86 [style=dashed label="enum-specifier"]
  341 -> 269 [style=dashed label="explicit-specifier"]
  341 -> 92 [style=dashed label="function-specifier"]
  341 -> 100 [style=dashed label="namespace-alias"]
  341 -> 103 [style=dashed label="namespace-name"]
  341 -> 213 [style=dashed label="nested-name-specifier"]
  341 -> 735 [style=dashed label="parameter-declaration"]
  341 -> 746 [style=dashed label="parameter-declaration-clause"]
  341 -> 737 [style=dashed label="parameter-declaration-list"]
  341 -> 110 [style=dashed label="placeholder-type-specifier"]
  341 -> 142 [style=dashed label="simple-template-id"]
  341 -> 116 [style=dashed label="simple-type-specifier"]
  341 -> 118 [style=dashed label="storage-class-specifier"]
  341 -> 216 [style=dashed label="template-name"]
  341 -> 124 [style=dashed label="type-constraint"]
  341 -> 125 [style=dashed label="type-name"]
  341 -> 126 [style=dashed label="type-specifier"]
  341 -> 127 [style=dashed label="typedef-name"]
  341 -> 128 [style=dashed label="typename-specifier"]
  342 [label="State 342\n\l997 simple-template-id: template-name '<' • '>'\l998                   | template-name '<' • template-argument-list '>'\l"]
  342 -> 1 [style=solid label="IDENTIFIER"]
  342 -> 361 [style=solid label="'+'"]
  342 -> 362 [style=solid label="'-'"]
  342 -> 363 [style=solid label="'('"]
  342 -> 364 [style=solid label="'&'"]
  342 -> 365 [style=solid label="\"::\""]
  342 -> 366 [style=solid label="'['"]
  342 -> 367 [style=solid label="\"co_await\""]
  342 -> 368 [style=solid label="'0'"]
  342 -> 369 [style=solid label="'1'"]
  342 -> 370 [style=solid label="\"0b\""]
  342 -> 371 [style=solid label="\"0B\""]
  342 -> 372 [style=solid label="'\\''"]
  342 -> 373 [style=solid label="\"false\""]
  342 -> 374 [style=solid label="\"true\""]
  342 -> 12 [style=solid label="\"class\""]
  342 -> 13 [style=solid label="\"struct\""]
  342 -> 14 [style=solid label="\"union\""]
  342 -> 375 [style=solid label="\"noexcept\""]
  342 -> 17 [style=solid label="\"operator\""]
  342 -> 18 [style=solid label="\"const\""]
  342 -> 19 [style=solid label="\"volatile\""]
  342 -> 26 [style=solid label="\"decltype\""]
  342 -> 376 [style=solid label="\"delete\""]
  342 -> 377 [style=solid label="'.'"]
  342 -> 378 [style=solid label="'2'"]
  342 -> 379 [style=solid label="'3'"]
  342 -> 380 [style=solid label="'4'"]
  342 -> 381 [style=solid label="'5'"]
  342 -> 382 [style=solid label="'6'"]
  342 -> 383 [style=solid label="'7'"]
  342 -> 384 [style=solid label="'8'"]
  342 -> 385 [style=solid label="'9'"]
  342 -> 136 [style=solid label="\"enum\""]
  342 -> 185 [style=solid label="\"u8\""]
  342 -> 186 [style=solid label="'u'"]
  342 -> 187 [style=solid label="'U'"]
  342 -> 188 [style=solid label="'L'"]
  342 -> 747 [style=solid label="'>'"]
  342 -> 386 [style=solid label="'*'"]
  342 -> 203 [style=solid label="'\"'"]
  342 -> 387 [style=solid label="\"0x\""]
  342 -> 388 [style=solid label="\"0X\""]
  342 -> 389 [style=solid label="\"requires\""]
  342 -> 390 [style=solid label="\"new\""]
  342 -> 391 [style=solid label="'~'"]
  342 -> 392 [style=solid label="'!'"]
  342 -> 393 [style=solid label="\"++\""]
  342 -> 394 [style=solid label="\"--\""]
  342 -> 395 [style=solid label="\"this\""]
  342 -> 37 [style=solid label="\"auto\""]
  342 -> 396 [style=solid label="\"nullptr\""]
  342 -> 397 [style=solid label="\"dynamic_cast\""]
  342 -> 398 [style=solid label="\"static_cast\""]
  342 -> 399 [style=solid label="\"reinterpret_cast\""]
  342 -> 400 [style=solid label="\"const_cast\""]
  342 -> 401 [style=solid label="\"typeid\""]
  342 -> 38 [style=solid label="\"char\""]
  342 -> 39 [style=solid label="\"char8_t\""]
  342 -> 40 [style=solid label="\"char16_t\""]
  342 -> 41 [style=solid label="\"char32_t\""]
  342 -> 42 [style=solid label="\"wchar_t\""]
  342 -> 43 [style=solid label="\"bool\""]
  342 -> 44 [style=solid label="\"short\""]
  342 -> 45 [style=solid label="\"int\""]
  342 -> 46 [style=solid label="\"long\""]
  342 -> 47 [style=solid label="\"signed\""]
  342 -> 48 [style=solid label="\"unsigned\""]
  342 -> 49 [style=solid label="\"float\""]
  342 -> 50 [style=solid label="\"double\""]
  342 -> 51 [style=solid label="\"void\""]
  342 -> 209 [style=solid label="'R'"]
  342 -> 56 [style=solid label="\"typename\""]
  342 -> 402 [style=solid label="\"sizeof\""]
  342 -> 403 [style=solid label="\"alignof\""]
  342 -> 404 [style=dashed label="additive-expression"]
  342 -> 405 [style=dashed label="and-expression"]
  342 -> 406 [style=dashed label="await-expression"]
  342 -> 407 [style=dashed label="binary-literal"]
  342 -> 408 [style=dashed label="boolean-literal"]
  342 -> 409 [style=dashed label="cast-expression"]
  342 -> 410 [style=dashed label="character-literal"]
  342 -> 210 [style=dashed label="class-key"]
  342 -> 66 [style=dashed label="class-name"]
  342 -> 411 [style=dashed label="compare-expression"]
  342 -> 68 [style=dashed label="concept-name"]
  342 -> 412 [style=dashed label="conditional-expression"]
  342 -> 639 [style=dashed label="constant-expression"]
  342 -> 69 [style=dashed label="conversion-function-id"]
  342 -> 70 [style=dashed label="cv-qualifier"]
  342 -> 414 [style=dashed label="decimal-floating-point-literal"]
  342 -> 415 [style=dashed label="decimal-literal"]
  342 -> 77 [style=dashed label="decltype-specifier"]
  342 -> 416 [style=dashed label="delete-expression"]
  342 -> 417 [style=dashed label="digit"]
  342 -> 418 [style=dashed label="digit-sequence"]
  342 -> 80 [style=dashed label="elaborated-enum-specifier"]
  342 -> 81 [style=dashed label="elaborated-type-specifier"]
  342 -> 419 [style=dashed label="encoding-prefix"]
  342 -> 85 [style=dashed label="enum-name"]
  342 -> 420 [style=dashed label="equality-expression"]
  342 -> 421 [style=dashed label="exclusive-or-expression"]
  342 -> 422 [style=dashed label="floating-point-literal"]
  342 -> 423 [style=dashed label="fold-expression"]
  342 -> 424 [style=dashed label="fractional-constant"]
  342 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  342 -> 426 [style=dashed label="hexadecimal-literal"]
  342 -> 427 [style=dashed label="hexadecimal-prefix"]
  342 -> 640 [style=dashed label="id-expression"]
  342 -> 429 [style=dashed label="inclusive-or-expression"]
  342 -> 430 [style=dashed label="integer-literal"]
  342 -> 431 [style=dashed label="lambda-expression"]
  342 -> 432 [style=dashed label="lambda-introducer"]
  342 -> 433 [style=dashed label="literal"]
  342 -> 96 [style=dashed label="literal-operator-id"]
  342 -> 434 [style=dashed label="logical-and-expression"]
  342 -> 435 [style=dashed label="logical-or-expression"]
  342 -> 436 [style=dashed label="multiplicative-expression"]
  342 -> 100 [style=dashed label="namespace-alias"]
  342 -> 103 [style=dashed label="namespace-name"]
  342 -> 437 [style=dashed label="nested-name-specifier"]
  342 -> 438 [style=dashed label="new-expression"]
  342 -> 439 [style=dashed label="noexcept-expression"]
  342 -> 440 [style=dashed label="nonzero-digit"]
  342 -> 441 [style=dashed label="octal-literal"]
  342 -> 109 [style=dashed label="operator-function-id"]
  342 -> 110 [style=dashed label="placeholder-type-specifier"]
  342 -> 442 [style=dashed label="pm-expression"]
  342 -> 443 [style=dashed label="pointer-literal"]
  342 -> 444 [style=dashed label="postfix-expression"]
  342 -> 445 [style=dashed label="primary-expression"]
  342 -> 113 [style=dashed label="qualified-id"]
  342 -> 446 [style=dashed label="relational-expression"]
  342 -> 447 [style=dashed label="requires-expression"]
  342 -> 448 [style=dashed label="shift-expression"]
  342 -> 115 [style=dashed label="simple-template-id"]
  342 -> 449 [style=dashed label="simple-type-specifier"]
  342 -> 450 [style=dashed label="string-literal"]
  342 -> 641 [style=dashed label="template-argument"]
  342 -> 748 [style=dashed label="template-argument-list"]
  342 -> 121 [style=dashed label="template-id"]
  342 -> 216 [style=dashed label="template-name"]
  342 -> 124 [style=dashed label="type-constraint"]
  342 -> 643 [style=dashed label="type-id"]
  342 -> 125 [style=dashed label="type-name"]
  342 -> 217 [style=dashed label="type-specifier"]
  342 -> 452 [style=dashed label="type-specifier-seq"]
  342 -> 127 [style=dashed label="typedef-name"]
  342 -> 453 [style=dashed label="typename-specifier"]
  342 -> 454 [style=dashed label="unary-expression"]
  342 -> 455 [style=dashed label="unary-operator"]
  342 -> 130 [style=dashed label="unqualified-id"]
  342 -> 456 [style=dashed label="user-defined-character-literal"]
  342 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  342 -> 458 [style=dashed label="user-defined-integer-literal"]
  342 -> 459 [style=dashed label="user-defined-literal"]
  342 -> 460 [style=dashed label="user-defined-string-literal"]
  343 [label="State 343\n\l  0 $accept: translation-unit $end •\l"]
  343 -> "343R0" [style=solid]
 "343R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  344 [label="State 344\n\l854 placeholder-type-specifier: type-constraint \"decltype\" • '(' \"auto\" ')'\l"]
  344 -> 749 [style=solid label="'('"]
  345 [label="State 345\n\l852 placeholder-type-specifier: type-constraint \"auto\" •\l"]
  345 -> "345R852" [style=solid]
 "345R852" [label="R852", fillcolor=3, shape=diamond, style=filled]
  346 [label="State 346\n\l660 nested-name-specifier: type-name \"::\" •\l"]
  346 -> "346R660" [style=solid]
 "346R660" [label="R660", fillcolor=3, shape=diamond, style=filled]
  347 [label="State 347\n\l 13 alias-declaration: \"using\" IDENTIFIER '=' • defining-type-id ';'\l"]
  347 -> 161 [style=solid label="IDENTIFIER"]
  347 -> 9 [style=solid label="\"::\""]
  347 -> 12 [style=solid label="\"class\""]
  347 -> 13 [style=solid label="\"struct\""]
  347 -> 14 [style=solid label="\"union\""]
  347 -> 18 [style=solid label="\"const\""]
  347 -> 19 [style=solid label="\"volatile\""]
  347 -> 26 [style=solid label="\"decltype\""]
  347 -> 27 [style=solid label="\"enum\""]
  347 -> 37 [style=solid label="\"auto\""]
  347 -> 38 [style=solid label="\"char\""]
  347 -> 39 [style=solid label="\"char8_t\""]
  347 -> 40 [style=solid label="\"char16_t\""]
  347 -> 41 [style=solid label="\"char32_t\""]
  347 -> 42 [style=solid label="\"wchar_t\""]
  347 -> 43 [style=solid label="\"bool\""]
  347 -> 44 [style=solid label="\"short\""]
  347 -> 45 [style=solid label="\"int\""]
  347 -> 46 [style=solid label="\"long\""]
  347 -> 47 [style=solid label="\"signed\""]
  347 -> 48 [style=solid label="\"unsigned\""]
  347 -> 49 [style=solid label="\"float\""]
  347 -> 50 [style=solid label="\"double\""]
  347 -> 51 [style=solid label="\"void\""]
  347 -> 56 [style=solid label="\"typename\""]
  347 -> 64 [style=dashed label="class-head"]
  347 -> 65 [style=dashed label="class-key"]
  347 -> 66 [style=dashed label="class-name"]
  347 -> 67 [style=dashed label="class-specifier"]
  347 -> 68 [style=dashed label="concept-name"]
  347 -> 70 [style=dashed label="cv-qualifier"]
  347 -> 77 [style=dashed label="decltype-specifier"]
  347 -> 750 [style=dashed label="defining-type-id"]
  347 -> 751 [style=dashed label="defining-type-specifier"]
  347 -> 752 [style=dashed label="defining-type-specifier-seq"]
  347 -> 80 [style=dashed label="elaborated-enum-specifier"]
  347 -> 81 [style=dashed label="elaborated-type-specifier"]
  347 -> 83 [style=dashed label="enum-head"]
  347 -> 268 [style=dashed label="enum-key"]
  347 -> 85 [style=dashed label="enum-name"]
  347 -> 86 [style=dashed label="enum-specifier"]
  347 -> 100 [style=dashed label="namespace-alias"]
  347 -> 103 [style=dashed label="namespace-name"]
  347 -> 213 [style=dashed label="nested-name-specifier"]
  347 -> 110 [style=dashed label="placeholder-type-specifier"]
  347 -> 142 [style=dashed label="simple-template-id"]
  347 -> 116 [style=dashed label="simple-type-specifier"]
  347 -> 216 [style=dashed label="template-name"]
  347 -> 124 [style=dashed label="type-constraint"]
  347 -> 125 [style=dashed label="type-name"]
  347 -> 126 [style=dashed label="type-specifier"]
  347 -> 127 [style=dashed label="typedef-name"]
  347 -> 128 [style=dashed label="typename-specifier"]
  348 [label="State 348\n\l 14 alias-declaration: \"using\" IDENTIFIER attribute-specifier-seq • '=' defining-type-id ';'\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l"]
  348 -> 753 [style=solid label="'='"]
  348 -> 4 [style=solid label="\"alignas\""]
  348 -> 10 [style=solid label="'['"]
  348 -> 58 [style=dashed label="alignment-specifier"]
  348 -> 265 [style=dashed label="attribute-specifier"]
  349 [label="State 349\n\l233 decltype-specifier: \"decltype\" '(' • expression ')'\l"]
  349 -> 1 [style=solid label="IDENTIFIER"]
  349 -> 361 [style=solid label="'+'"]
  349 -> 362 [style=solid label="'-'"]
  349 -> 363 [style=solid label="'('"]
  349 -> 364 [style=solid label="'&'"]
  349 -> 365 [style=solid label="\"::\""]
  349 -> 366 [style=solid label="'['"]
  349 -> 367 [style=solid label="\"co_await\""]
  349 -> 368 [style=solid label="'0'"]
  349 -> 369 [style=solid label="'1'"]
  349 -> 370 [style=solid label="\"0b\""]
  349 -> 371 [style=solid label="\"0B\""]
  349 -> 372 [style=solid label="'\\''"]
  349 -> 373 [style=solid label="\"false\""]
  349 -> 374 [style=solid label="\"true\""]
  349 -> 375 [style=solid label="\"noexcept\""]
  349 -> 17 [style=solid label="\"operator\""]
  349 -> 26 [style=solid label="\"decltype\""]
  349 -> 376 [style=solid label="\"delete\""]
  349 -> 377 [style=solid label="'.'"]
  349 -> 378 [style=solid label="'2'"]
  349 -> 379 [style=solid label="'3'"]
  349 -> 380 [style=solid label="'4'"]
  349 -> 381 [style=solid label="'5'"]
  349 -> 382 [style=solid label="'6'"]
  349 -> 383 [style=solid label="'7'"]
  349 -> 384 [style=solid label="'8'"]
  349 -> 385 [style=solid label="'9'"]
  349 -> 185 [style=solid label="\"u8\""]
  349 -> 186 [style=solid label="'u'"]
  349 -> 187 [style=solid label="'U'"]
  349 -> 188 [style=solid label="'L'"]
  349 -> 386 [style=solid label="'*'"]
  349 -> 203 [style=solid label="'\"'"]
  349 -> 387 [style=solid label="\"0x\""]
  349 -> 388 [style=solid label="\"0X\""]
  349 -> 389 [style=solid label="\"requires\""]
  349 -> 390 [style=solid label="\"new\""]
  349 -> 391 [style=solid label="'~'"]
  349 -> 392 [style=solid label="'!'"]
  349 -> 393 [style=solid label="\"++\""]
  349 -> 394 [style=solid label="\"--\""]
  349 -> 395 [style=solid label="\"this\""]
  349 -> 37 [style=solid label="\"auto\""]
  349 -> 396 [style=solid label="\"nullptr\""]
  349 -> 397 [style=solid label="\"dynamic_cast\""]
  349 -> 398 [style=solid label="\"static_cast\""]
  349 -> 399 [style=solid label="\"reinterpret_cast\""]
  349 -> 400 [style=solid label="\"const_cast\""]
  349 -> 401 [style=solid label="\"typeid\""]
  349 -> 38 [style=solid label="\"char\""]
  349 -> 39 [style=solid label="\"char8_t\""]
  349 -> 40 [style=solid label="\"char16_t\""]
  349 -> 41 [style=solid label="\"char32_t\""]
  349 -> 42 [style=solid label="\"wchar_t\""]
  349 -> 43 [style=solid label="\"bool\""]
  349 -> 44 [style=solid label="\"short\""]
  349 -> 45 [style=solid label="\"int\""]
  349 -> 46 [style=solid label="\"long\""]
  349 -> 47 [style=solid label="\"signed\""]
  349 -> 48 [style=solid label="\"unsigned\""]
  349 -> 49 [style=solid label="\"float\""]
  349 -> 50 [style=solid label="\"double\""]
  349 -> 51 [style=solid label="\"void\""]
  349 -> 209 [style=solid label="'R'"]
  349 -> 528 [style=solid label="\"throw\""]
  349 -> 56 [style=solid label="\"typename\""]
  349 -> 402 [style=solid label="\"sizeof\""]
  349 -> 403 [style=solid label="\"alignof\""]
  349 -> 529 [style=solid label="\"co_yield\""]
  349 -> 404 [style=dashed label="additive-expression"]
  349 -> 405 [style=dashed label="and-expression"]
  349 -> 530 [style=dashed label="assignment-expression"]
  349 -> 406 [style=dashed label="await-expression"]
  349 -> 407 [style=dashed label="binary-literal"]
  349 -> 408 [style=dashed label="boolean-literal"]
  349 -> 409 [style=dashed label="cast-expression"]
  349 -> 410 [style=dashed label="character-literal"]
  349 -> 66 [style=dashed label="class-name"]
  349 -> 411 [style=dashed label="compare-expression"]
  349 -> 68 [style=dashed label="concept-name"]
  349 -> 531 [style=dashed label="conditional-expression"]
  349 -> 69 [style=dashed label="conversion-function-id"]
  349 -> 414 [style=dashed label="decimal-floating-point-literal"]
  349 -> 415 [style=dashed label="decimal-literal"]
  349 -> 77 [style=dashed label="decltype-specifier"]
  349 -> 416 [style=dashed label="delete-expression"]
  349 -> 417 [style=dashed label="digit"]
  349 -> 418 [style=dashed label="digit-sequence"]
  349 -> 419 [style=dashed label="encoding-prefix"]
  349 -> 85 [style=dashed label="enum-name"]
  349 -> 420 [style=dashed label="equality-expression"]
  349 -> 421 [style=dashed label="exclusive-or-expression"]
  349 -> 532 [style=dashed label="expression"]
  349 -> 422 [style=dashed label="floating-point-literal"]
  349 -> 423 [style=dashed label="fold-expression"]
  349 -> 424 [style=dashed label="fractional-constant"]
  349 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  349 -> 426 [style=dashed label="hexadecimal-literal"]
  349 -> 427 [style=dashed label="hexadecimal-prefix"]
  349 -> 428 [style=dashed label="id-expression"]
  349 -> 429 [style=dashed label="inclusive-or-expression"]
  349 -> 430 [style=dashed label="integer-literal"]
  349 -> 431 [style=dashed label="lambda-expression"]
  349 -> 432 [style=dashed label="lambda-introducer"]
  349 -> 433 [style=dashed label="literal"]
  349 -> 96 [style=dashed label="literal-operator-id"]
  349 -> 434 [style=dashed label="logical-and-expression"]
  349 -> 533 [style=dashed label="logical-or-expression"]
  349 -> 436 [style=dashed label="multiplicative-expression"]
  349 -> 100 [style=dashed label="namespace-alias"]
  349 -> 103 [style=dashed label="namespace-name"]
  349 -> 437 [style=dashed label="nested-name-specifier"]
  349 -> 438 [style=dashed label="new-expression"]
  349 -> 439 [style=dashed label="noexcept-expression"]
  349 -> 440 [style=dashed label="nonzero-digit"]
  349 -> 441 [style=dashed label="octal-literal"]
  349 -> 109 [style=dashed label="operator-function-id"]
  349 -> 110 [style=dashed label="placeholder-type-specifier"]
  349 -> 442 [style=dashed label="pm-expression"]
  349 -> 443 [style=dashed label="pointer-literal"]
  349 -> 444 [style=dashed label="postfix-expression"]
  349 -> 445 [style=dashed label="primary-expression"]
  349 -> 113 [style=dashed label="qualified-id"]
  349 -> 446 [style=dashed label="relational-expression"]
  349 -> 447 [style=dashed label="requires-expression"]
  349 -> 448 [style=dashed label="shift-expression"]
  349 -> 115 [style=dashed label="simple-template-id"]
  349 -> 534 [style=dashed label="simple-type-specifier"]
  349 -> 450 [style=dashed label="string-literal"]
  349 -> 121 [style=dashed label="template-id"]
  349 -> 216 [style=dashed label="template-name"]
  349 -> 535 [style=dashed label="throw-expression"]
  349 -> 124 [style=dashed label="type-constraint"]
  349 -> 125 [style=dashed label="type-name"]
  349 -> 127 [style=dashed label="typedef-name"]
  349 -> 536 [style=dashed label="typename-specifier"]
  349 -> 454 [style=dashed label="unary-expression"]
  349 -> 455 [style=dashed label="unary-operator"]
  349 -> 130 [style=dashed label="unqualified-id"]
  349 -> 456 [style=dashed label="user-defined-character-literal"]
  349 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  349 -> 458 [style=dashed label="user-defined-integer-literal"]
  349 -> 459 [style=dashed label="user-defined-literal"]
  349 -> 460 [style=dashed label="user-defined-string-literal"]
  349 -> 537 [style=dashed label="yield-expression"]
  350 [label="State 350\n\l661 nested-name-specifier: namespace-name • \"::\"\l1186 using-directive: \"using\" \"namespace\" namespace-name • ';'\l"]
  350 -> 754 [style=solid label="';'"]
  350 -> 324 [style=solid label="\"::\""]
  351 [label="State 351\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l1188 using-directive: \"using\" \"namespace\" nested-name-specifier • namespace-name ';'\l"]
  351 -> 755 [style=solid label="IDENTIFIER"]
  351 -> 355 [style=solid label="\"template\""]
  351 -> 100 [style=dashed label="namespace-alias"]
  351 -> 756 [style=dashed label="namespace-name"]
  351 -> 539 [style=dashed label="simple-template-id"]
  351 -> 143 [style=dashed label="template-name"]
  352 [label="State 352\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l1179 using-declarator: \"typename\" nested-name-specifier • unqualified-id\l"]
  352 -> 354 [style=solid label="IDENTIFIER"]
  352 -> 355 [style=solid label="\"template\""]
  352 -> 17 [style=solid label="\"operator\""]
  352 -> 36 [style=solid label="'~'"]
  352 -> 69 [style=dashed label="conversion-function-id"]
  352 -> 96 [style=dashed label="literal-operator-id"]
  352 -> 109 [style=dashed label="operator-function-id"]
  352 -> 356 [style=dashed label="simple-template-id"]
  352 -> 121 [style=dashed label="template-id"]
  352 -> 143 [style=dashed label="template-name"]
  352 -> 757 [style=dashed label="unqualified-id"]
  353 [label="State 353\n\l1189 using-enum-declaration: \"using\" elaborated-enum-specifier ';' •\l"]
  353 -> "353R1189" [style=solid]
 "353R1189" [label="R1189", fillcolor=3, shape=diamond, style=filled]
  354 [label="State 354\n\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l1154 unqualified-id: IDENTIFIER •\l"]
  354 -> 726 [style=solid label="\"::\""]
  354 -> "354R1066" [label="['<']", style=solid]
 "354R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  354 -> "354R1154d" [label="[\"::\", '<']", style=solid]
 "354R1154d" [label="R1154", fillcolor=5, shape=diamond, style=filled]
  354 -> "354R1154" [style=solid]
 "354R1154" [label="R1154", fillcolor=3, shape=diamond, style=filled]
  355 [label="State 355\n\l665 nested-name-specifier: nested-name-specifier \"template\" • simple-template-id \"::\"\l"]
  355 -> 315 [style=solid label="IDENTIFIER"]
  355 -> 758 [style=dashed label="simple-template-id"]
  355 -> 143 [style=dashed label="template-name"]
  356 [label="State 356\n\l664 nested-name-specifier: nested-name-specifier simple-template-id • \"::\"\l1061 template-id: simple-template-id •\l"]
  356 -> 733 [style=solid label="\"::\""]
  356 -> "356R1061d" [label="[\"::\"]", style=solid]
 "356R1061d" [label="R1061", fillcolor=5, shape=diamond, style=filled]
  356 -> "356R1061" [style=solid]
 "356R1061" [label="R1061", fillcolor=3, shape=diamond, style=filled]
  357 [label="State 357\n\l1180 using-declarator: nested-name-specifier unqualified-id •\l"]
  357 -> "357R1180" [style=solid]
 "357R1180" [label="R1180", fillcolor=3, shape=diamond, style=filled]
  358 [label="State 358\n\l1182 using-declarator-list: using-declarator \"...\" •\l"]
  358 -> "358R1182" [style=solid]
 "358R1182" [label="R1182", fillcolor=3, shape=diamond, style=filled]
  359 [label="State 359\n\l1178 using-declaration: \"using\" using-declarator-list ';' •\l"]
  359 -> "359R1178" [style=solid]
 "359R1178" [label="R1178", fillcolor=3, shape=diamond, style=filled]
  360 [label="State 360\n\l1183 using-declarator-list: using-declarator-list ',' • using-declarator\l1184                      | using-declarator-list ',' • using-declarator \"...\"\l"]
  360 -> 258 [style=solid label="IDENTIFIER"]
  360 -> 9 [style=solid label="\"::\""]
  360 -> 135 [style=solid label="\"decltype\""]
  360 -> 138 [style=solid label="\"typename\""]
  360 -> 66 [style=dashed label="class-name"]
  360 -> 139 [style=dashed label="decltype-specifier"]
  360 -> 85 [style=dashed label="enum-name"]
  360 -> 100 [style=dashed label="namespace-alias"]
  360 -> 103 [style=dashed label="namespace-name"]
  360 -> 141 [style=dashed label="nested-name-specifier"]
  360 -> 142 [style=dashed label="simple-template-id"]
  360 -> 143 [style=dashed label="template-name"]
  360 -> 144 [style=dashed label="type-name"]
  360 -> 127 [style=dashed label="typedef-name"]
  360 -> 759 [style=dashed label="using-declarator"]
  361 [label="State 361\n\l1144 unary-operator: '+' •\l"]
  361 -> "361R1144" [style=solid]
 "361R1144" [label="R1144", fillcolor=3, shape=diamond, style=filled]
  362 [label="State 362\n\l1145 unary-operator: '-' •\l"]
  362 -> "362R1145" [style=solid]
 "362R1145" [label="R1145", fillcolor=3, shape=diamond, style=filled]
  363 [label="State 363\n\l125 cast-expression: '(' • type-id ')' cast-expression\l348 fold-expression: '(' • cast-expression fold-operator \"...\" ')'\l349                | '(' • \"...\" fold-operator cast-expression ')'\l350                | '(' • cast-expression fold-operator \"...\" fold-operator cast-expression ')'\l885 primary-expression: '(' • expression ')'\l"]
  363 -> 1 [style=solid label="IDENTIFIER"]
  363 -> 361 [style=solid label="'+'"]
  363 -> 362 [style=solid label="'-'"]
  363 -> 363 [style=solid label="'('"]
  363 -> 760 [style=solid label="\"...\""]
  363 -> 364 [style=solid label="'&'"]
  363 -> 365 [style=solid label="\"::\""]
  363 -> 366 [style=solid label="'['"]
  363 -> 367 [style=solid label="\"co_await\""]
  363 -> 368 [style=solid label="'0'"]
  363 -> 369 [style=solid label="'1'"]
  363 -> 370 [style=solid label="\"0b\""]
  363 -> 371 [style=solid label="\"0B\""]
  363 -> 372 [style=solid label="'\\''"]
  363 -> 373 [style=solid label="\"false\""]
  363 -> 374 [style=solid label="\"true\""]
  363 -> 12 [style=solid label="\"class\""]
  363 -> 13 [style=solid label="\"struct\""]
  363 -> 14 [style=solid label="\"union\""]
  363 -> 375 [style=solid label="\"noexcept\""]
  363 -> 17 [style=solid label="\"operator\""]
  363 -> 18 [style=solid label="\"const\""]
  363 -> 19 [style=solid label="\"volatile\""]
  363 -> 26 [style=solid label="\"decltype\""]
  363 -> 376 [style=solid label="\"delete\""]
  363 -> 377 [style=solid label="'.'"]
  363 -> 378 [style=solid label="'2'"]
  363 -> 379 [style=solid label="'3'"]
  363 -> 380 [style=solid label="'4'"]
  363 -> 381 [style=solid label="'5'"]
  363 -> 382 [style=solid label="'6'"]
  363 -> 383 [style=solid label="'7'"]
  363 -> 384 [style=solid label="'8'"]
  363 -> 385 [style=solid label="'9'"]
  363 -> 136 [style=solid label="\"enum\""]
  363 -> 185 [style=solid label="\"u8\""]
  363 -> 186 [style=solid label="'u'"]
  363 -> 187 [style=solid label="'U'"]
  363 -> 188 [style=solid label="'L'"]
  363 -> 386 [style=solid label="'*'"]
  363 -> 203 [style=solid label="'\"'"]
  363 -> 387 [style=solid label="\"0x\""]
  363 -> 388 [style=solid label="\"0X\""]
  363 -> 389 [style=solid label="\"requires\""]
  363 -> 390 [style=solid label="\"new\""]
  363 -> 391 [style=solid label="'~'"]
  363 -> 392 [style=solid label="'!'"]
  363 -> 393 [style=solid label="\"++\""]
  363 -> 394 [style=solid label="\"--\""]
  363 -> 395 [style=solid label="\"this\""]
  363 -> 37 [style=solid label="\"auto\""]
  363 -> 396 [style=solid label="\"nullptr\""]
  363 -> 397 [style=solid label="\"dynamic_cast\""]
  363 -> 398 [style=solid label="\"static_cast\""]
  363 -> 399 [style=solid label="\"reinterpret_cast\""]
  363 -> 400 [style=solid label="\"const_cast\""]
  363 -> 401 [style=solid label="\"typeid\""]
  363 -> 38 [style=solid label="\"char\""]
  363 -> 39 [style=solid label="\"char8_t\""]
  363 -> 40 [style=solid label="\"char16_t\""]
  363 -> 41 [style=solid label="\"char32_t\""]
  363 -> 42 [style=solid label="\"wchar_t\""]
  363 -> 43 [style=solid label="\"bool\""]
  363 -> 44 [style=solid label="\"short\""]
  363 -> 45 [style=solid label="\"int\""]
  363 -> 46 [style=solid label="\"long\""]
  363 -> 47 [style=solid label="\"signed\""]
  363 -> 48 [style=solid label="\"unsigned\""]
  363 -> 49 [style=solid label="\"float\""]
  363 -> 50 [style=solid label="\"double\""]
  363 -> 51 [style=solid label="\"void\""]
  363 -> 209 [style=solid label="'R'"]
  363 -> 528 [style=solid label="\"throw\""]
  363 -> 56 [style=solid label="\"typename\""]
  363 -> 402 [style=solid label="\"sizeof\""]
  363 -> 403 [style=solid label="\"alignof\""]
  363 -> 529 [style=solid label="\"co_yield\""]
  363 -> 404 [style=dashed label="additive-expression"]
  363 -> 405 [style=dashed label="and-expression"]
  363 -> 530 [style=dashed label="assignment-expression"]
  363 -> 406 [style=dashed label="await-expression"]
  363 -> 407 [style=dashed label="binary-literal"]
  363 -> 408 [style=dashed label="boolean-literal"]
  363 -> 761 [style=dashed label="cast-expression"]
  363 -> 410 [style=dashed label="character-literal"]
  363 -> 210 [style=dashed label="class-key"]
  363 -> 66 [style=dashed label="class-name"]
  363 -> 411 [style=dashed label="compare-expression"]
  363 -> 68 [style=dashed label="concept-name"]
  363 -> 531 [style=dashed label="conditional-expression"]
  363 -> 69 [style=dashed label="conversion-function-id"]
  363 -> 70 [style=dashed label="cv-qualifier"]
  363 -> 414 [style=dashed label="decimal-floating-point-literal"]
  363 -> 415 [style=dashed label="decimal-literal"]
  363 -> 77 [style=dashed label="decltype-specifier"]
  363 -> 416 [style=dashed label="delete-expression"]
  363 -> 417 [style=dashed label="digit"]
  363 -> 418 [style=dashed label="digit-sequence"]
  363 -> 80 [style=dashed label="elaborated-enum-specifier"]
  363 -> 81 [style=dashed label="elaborated-type-specifier"]
  363 -> 419 [style=dashed label="encoding-prefix"]
  363 -> 85 [style=dashed label="enum-name"]
  363 -> 420 [style=dashed label="equality-expression"]
  363 -> 421 [style=dashed label="exclusive-or-expression"]
  363 -> 762 [style=dashed label="expression"]
  363 -> 422 [style=dashed label="floating-point-literal"]
  363 -> 423 [style=dashed label="fold-expression"]
  363 -> 424 [style=dashed label="fractional-constant"]
  363 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  363 -> 426 [style=dashed label="hexadecimal-literal"]
  363 -> 427 [style=dashed label="hexadecimal-prefix"]
  363 -> 428 [style=dashed label="id-expression"]
  363 -> 429 [style=dashed label="inclusive-or-expression"]
  363 -> 430 [style=dashed label="integer-literal"]
  363 -> 431 [style=dashed label="lambda-expression"]
  363 -> 432 [style=dashed label="lambda-introducer"]
  363 -> 433 [style=dashed label="literal"]
  363 -> 96 [style=dashed label="literal-operator-id"]
  363 -> 434 [style=dashed label="logical-and-expression"]
  363 -> 533 [style=dashed label="logical-or-expression"]
  363 -> 436 [style=dashed label="multiplicative-expression"]
  363 -> 100 [style=dashed label="namespace-alias"]
  363 -> 103 [style=dashed label="namespace-name"]
  363 -> 437 [style=dashed label="nested-name-specifier"]
  363 -> 438 [style=dashed label="new-expression"]
  363 -> 439 [style=dashed label="noexcept-expression"]
  363 -> 440 [style=dashed label="nonzero-digit"]
  363 -> 441 [style=dashed label="octal-literal"]
  363 -> 109 [style=dashed label="operator-function-id"]
  363 -> 110 [style=dashed label="placeholder-type-specifier"]
  363 -> 442 [style=dashed label="pm-expression"]
  363 -> 443 [style=dashed label="pointer-literal"]
  363 -> 444 [style=dashed label="postfix-expression"]
  363 -> 445 [style=dashed label="primary-expression"]
  363 -> 113 [style=dashed label="qualified-id"]
  363 -> 446 [style=dashed label="relational-expression"]
  363 -> 447 [style=dashed label="requires-expression"]
  363 -> 448 [style=dashed label="shift-expression"]
  363 -> 115 [style=dashed label="simple-template-id"]
  363 -> 449 [style=dashed label="simple-type-specifier"]
  363 -> 450 [style=dashed label="string-literal"]
  363 -> 121 [style=dashed label="template-id"]
  363 -> 216 [style=dashed label="template-name"]
  363 -> 535 [style=dashed label="throw-expression"]
  363 -> 124 [style=dashed label="type-constraint"]
  363 -> 763 [style=dashed label="type-id"]
  363 -> 125 [style=dashed label="type-name"]
  363 -> 217 [style=dashed label="type-specifier"]
  363 -> 452 [style=dashed label="type-specifier-seq"]
  363 -> 127 [style=dashed label="typedef-name"]
  363 -> 453 [style=dashed label="typename-specifier"]
  363 -> 454 [style=dashed label="unary-expression"]
  363 -> 455 [style=dashed label="unary-operator"]
  363 -> 130 [style=dashed label="unqualified-id"]
  363 -> 456 [style=dashed label="user-defined-character-literal"]
  363 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  363 -> 458 [style=dashed label="user-defined-integer-literal"]
  363 -> 459 [style=dashed label="user-defined-literal"]
  363 -> 460 [style=dashed label="user-defined-string-literal"]
  363 -> 537 [style=dashed label="yield-expression"]
  364 [label="State 364\n\l1143 unary-operator: '&' •\l"]
  364 -> "364R1143" [style=solid]
 "364R1143" [label="R1143", fillcolor=3, shape=diamond, style=filled]
  365 [label="State 365\n\l244 delete-expression: \"::\" • \"delete\" cast-expression\l246                  | \"::\" • \"delete\" '[' ']' cast-expression\l659 nested-name-specifier: \"::\" •\l672 new-expression: \"::\" • \"new\" new-type-id\l674               | \"::\" • \"new\" new-placement new-type-id\l676               | \"::\" • \"new\" new-type-id new-initializer\l678               | \"::\" • \"new\" new-placement new-type-id new-initializer\l680               | \"::\" • \"new\" '(' type-id ')'\l682               | \"::\" • \"new\" new-placement '(' type-id ')'\l684               | \"::\" • \"new\" '(' type-id ')' new-initializer\l686               | \"::\" • \"new\" new-placement '(' type-id ')' new-initializer\l"]
  365 -> 764 [style=solid label="\"delete\""]
  365 -> 765 [style=solid label="\"new\""]
  365 -> "365R659" [style=solid]
 "365R659" [label="R659", fillcolor=3, shape=diamond, style=filled]
  366 [label="State 366\n\l538 lambda-introducer: '[' • ']'\l539                  | '[' • lambda-capture ']'\l"]
  366 -> 766 [style=solid label="IDENTIFIER"]
  366 -> 767 [style=solid label="'='"]
  366 -> 768 [style=solid label="\"...\""]
  366 -> 769 [style=solid label="'&'"]
  366 -> 770 [style=solid label="']'"]
  366 -> 771 [style=solid label="'*'"]
  366 -> 772 [style=solid label="\"this\""]
  366 -> 773 [style=dashed label="capture"]
  366 -> 774 [style=dashed label="capture-default"]
  366 -> 775 [style=dashed label="capture-list"]
  366 -> 776 [style=dashed label="init-capture"]
  366 -> 777 [style=dashed label="lambda-capture"]
  366 -> 778 [style=dashed label="simple-capture"]
  367 [label="State 367\n\l 58 await-expression: \"co_await\" • cast-expression\l"]
  367 -> 1 [style=solid label="IDENTIFIER"]
  367 -> 361 [style=solid label="'+'"]
  367 -> 362 [style=solid label="'-'"]
  367 -> 363 [style=solid label="'('"]
  367 -> 364 [style=solid label="'&'"]
  367 -> 365 [style=solid label="\"::\""]
  367 -> 366 [style=solid label="'['"]
  367 -> 367 [style=solid label="\"co_await\""]
  367 -> 368 [style=solid label="'0'"]
  367 -> 369 [style=solid label="'1'"]
  367 -> 370 [style=solid label="\"0b\""]
  367 -> 371 [style=solid label="\"0B\""]
  367 -> 372 [style=solid label="'\\''"]
  367 -> 373 [style=solid label="\"false\""]
  367 -> 374 [style=solid label="\"true\""]
  367 -> 375 [style=solid label="\"noexcept\""]
  367 -> 17 [style=solid label="\"operator\""]
  367 -> 26 [style=solid label="\"decltype\""]
  367 -> 376 [style=solid label="\"delete\""]
  367 -> 377 [style=solid label="'.'"]
  367 -> 378 [style=solid label="'2'"]
  367 -> 379 [style=solid label="'3'"]
  367 -> 380 [style=solid label="'4'"]
  367 -> 381 [style=solid label="'5'"]
  367 -> 382 [style=solid label="'6'"]
  367 -> 383 [style=solid label="'7'"]
  367 -> 384 [style=solid label="'8'"]
  367 -> 385 [style=solid label="'9'"]
  367 -> 185 [style=solid label="\"u8\""]
  367 -> 186 [style=solid label="'u'"]
  367 -> 187 [style=solid label="'U'"]
  367 -> 188 [style=solid label="'L'"]
  367 -> 386 [style=solid label="'*'"]
  367 -> 203 [style=solid label="'\"'"]
  367 -> 387 [style=solid label="\"0x\""]
  367 -> 388 [style=solid label="\"0X\""]
  367 -> 389 [style=solid label="\"requires\""]
  367 -> 390 [style=solid label="\"new\""]
  367 -> 391 [style=solid label="'~'"]
  367 -> 392 [style=solid label="'!'"]
  367 -> 393 [style=solid label="\"++\""]
  367 -> 394 [style=solid label="\"--\""]
  367 -> 395 [style=solid label="\"this\""]
  367 -> 37 [style=solid label="\"auto\""]
  367 -> 396 [style=solid label="\"nullptr\""]
  367 -> 397 [style=solid label="\"dynamic_cast\""]
  367 -> 398 [style=solid label="\"static_cast\""]
  367 -> 399 [style=solid label="\"reinterpret_cast\""]
  367 -> 400 [style=solid label="\"const_cast\""]
  367 -> 401 [style=solid label="\"typeid\""]
  367 -> 38 [style=solid label="\"char\""]
  367 -> 39 [style=solid label="\"char8_t\""]
  367 -> 40 [style=solid label="\"char16_t\""]
  367 -> 41 [style=solid label="\"char32_t\""]
  367 -> 42 [style=solid label="\"wchar_t\""]
  367 -> 43 [style=solid label="\"bool\""]
  367 -> 44 [style=solid label="\"short\""]
  367 -> 45 [style=solid label="\"int\""]
  367 -> 46 [style=solid label="\"long\""]
  367 -> 47 [style=solid label="\"signed\""]
  367 -> 48 [style=solid label="\"unsigned\""]
  367 -> 49 [style=solid label="\"float\""]
  367 -> 50 [style=solid label="\"double\""]
  367 -> 51 [style=solid label="\"void\""]
  367 -> 209 [style=solid label="'R'"]
  367 -> 56 [style=solid label="\"typename\""]
  367 -> 402 [style=solid label="\"sizeof\""]
  367 -> 403 [style=solid label="\"alignof\""]
  367 -> 406 [style=dashed label="await-expression"]
  367 -> 407 [style=dashed label="binary-literal"]
  367 -> 408 [style=dashed label="boolean-literal"]
  367 -> 779 [style=dashed label="cast-expression"]
  367 -> 410 [style=dashed label="character-literal"]
  367 -> 66 [style=dashed label="class-name"]
  367 -> 68 [style=dashed label="concept-name"]
  367 -> 69 [style=dashed label="conversion-function-id"]
  367 -> 414 [style=dashed label="decimal-floating-point-literal"]
  367 -> 415 [style=dashed label="decimal-literal"]
  367 -> 77 [style=dashed label="decltype-specifier"]
  367 -> 416 [style=dashed label="delete-expression"]
  367 -> 417 [style=dashed label="digit"]
  367 -> 418 [style=dashed label="digit-sequence"]
  367 -> 419 [style=dashed label="encoding-prefix"]
  367 -> 85 [style=dashed label="enum-name"]
  367 -> 422 [style=dashed label="floating-point-literal"]
  367 -> 423 [style=dashed label="fold-expression"]
  367 -> 424 [style=dashed label="fractional-constant"]
  367 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  367 -> 426 [style=dashed label="hexadecimal-literal"]
  367 -> 427 [style=dashed label="hexadecimal-prefix"]
  367 -> 428 [style=dashed label="id-expression"]
  367 -> 430 [style=dashed label="integer-literal"]
  367 -> 431 [style=dashed label="lambda-expression"]
  367 -> 432 [style=dashed label="lambda-introducer"]
  367 -> 433 [style=dashed label="literal"]
  367 -> 96 [style=dashed label="literal-operator-id"]
  367 -> 100 [style=dashed label="namespace-alias"]
  367 -> 103 [style=dashed label="namespace-name"]
  367 -> 437 [style=dashed label="nested-name-specifier"]
  367 -> 438 [style=dashed label="new-expression"]
  367 -> 439 [style=dashed label="noexcept-expression"]
  367 -> 440 [style=dashed label="nonzero-digit"]
  367 -> 441 [style=dashed label="octal-literal"]
  367 -> 109 [style=dashed label="operator-function-id"]
  367 -> 110 [style=dashed label="placeholder-type-specifier"]
  367 -> 443 [style=dashed label="pointer-literal"]
  367 -> 444 [style=dashed label="postfix-expression"]
  367 -> 445 [style=dashed label="primary-expression"]
  367 -> 113 [style=dashed label="qualified-id"]
  367 -> 447 [style=dashed label="requires-expression"]
  367 -> 115 [style=dashed label="simple-template-id"]
  367 -> 534 [style=dashed label="simple-type-specifier"]
  367 -> 450 [style=dashed label="string-literal"]
  367 -> 121 [style=dashed label="template-id"]
  367 -> 216 [style=dashed label="template-name"]
  367 -> 124 [style=dashed label="type-constraint"]
  367 -> 125 [style=dashed label="type-name"]
  367 -> 127 [style=dashed label="typedef-name"]
  367 -> 536 [style=dashed label="typename-specifier"]
  367 -> 454 [style=dashed label="unary-expression"]
  367 -> 455 [style=dashed label="unary-operator"]
  367 -> 130 [style=dashed label="unqualified-id"]
  367 -> 456 [style=dashed label="user-defined-character-literal"]
  367 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  367 -> 458 [style=dashed label="user-defined-integer-literal"]
  367 -> 459 [style=dashed label="user-defined-literal"]
  367 -> 460 [style=dashed label="user-defined-string-literal"]
  368 [label="State 368\n\l252 digit: '0' •\l752 octal-literal: '0' •\l"]
  368 -> "368R252" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "368R252" [label="R252", fillcolor=3, shape=diamond, style=filled]
  368 -> "368R752d" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7']", style=solid]
 "368R752d" [label="R752", fillcolor=5, shape=diamond, style=filled]
  368 -> "368R752" [style=solid]
 "368R752" [label="R752", fillcolor=3, shape=diamond, style=filled]
  369 [label="State 369\n\l253 digit: '1' •\l699 nonzero-digit: '1' •\l"]
  369 -> "369R253" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "369R253" [label="R253", fillcolor=3, shape=diamond, style=filled]
  369 -> "369R699d" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "369R699d" [label="R699", fillcolor=5, shape=diamond, style=filled]
  369 -> "369R699" [style=solid]
 "369R699" [label="R699", fillcolor=3, shape=diamond, style=filled]
  370 [label="State 370\n\l 91 binary-literal: \"0b\" • binary-digit\l"]
  370 -> 780 [style=solid label="'0'"]
  370 -> 781 [style=solid label="'1'"]
  370 -> 782 [style=dashed label="binary-digit"]
  371 [label="State 371\n\l 92 binary-literal: \"0B\" • binary-digit\l"]
  371 -> 780 [style=solid label="'0'"]
  371 -> 781 [style=solid label="'1'"]
  371 -> 783 [style=dashed label="binary-digit"]
  372 [label="State 372\n\l127 character-literal: '\\'' • c-char-sequence '\\''\l"]
  372 -> 784 [style=solid label="EXCEPT_THE_APOSTROPHE_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER"]
  372 -> 491 [style=solid label="'\\\\'"]
  372 -> 493 [style=solid label="\"\\\\x\""]
  372 -> 494 [style=solid label="\"\\\\u\""]
  372 -> 495 [style=solid label="\"\\\\U\""]
  372 -> 785 [style=dashed label="basic-c-char"]
  372 -> 786 [style=dashed label="c-char"]
  372 -> 787 [style=dashed label="c-char-sequence"]
  372 -> 497 [style=dashed label="conditional-escape-sequence"]
  372 -> 788 [style=dashed label="escape-sequence"]
  372 -> 499 [style=dashed label="hexadecimal-escape-sequence"]
  372 -> 500 [style=dashed label="numeric-escape-sequence"]
  372 -> 501 [style=dashed label="octal-escape-sequence"]
  372 -> 504 [style=dashed label="simple-escape-sequence"]
  372 -> 789 [style=dashed label="universal-character-name"]
  373 [label="State 373\n\l104 boolean-literal: \"false\" •\l"]
  373 -> "373R104" [style=solid]
 "373R104" [label="R104", fillcolor=3, shape=diamond, style=filled]
  374 [label="State 374\n\l105 boolean-literal: \"true\" •\l"]
  374 -> "374R105" [style=solid]
 "374R105" [label="R105", fillcolor=3, shape=diamond, style=filled]
  375 [label="State 375\n\l696 noexcept-expression: \"noexcept\" • '(' expression ')'\l"]
  375 -> 790 [style=solid label="'('"]
  376 [label="State 376\n\l245 delete-expression: \"delete\" • cast-expression\l247                  | \"delete\" • '[' ']' cast-expression\l"]
  376 -> 1 [style=solid label="IDENTIFIER"]
  376 -> 361 [style=solid label="'+'"]
  376 -> 362 [style=solid label="'-'"]
  376 -> 363 [style=solid label="'('"]
  376 -> 364 [style=solid label="'&'"]
  376 -> 365 [style=solid label="\"::\""]
  376 -> 791 [style=solid label="'['"]
  376 -> 367 [style=solid label="\"co_await\""]
  376 -> 368 [style=solid label="'0'"]
  376 -> 369 [style=solid label="'1'"]
  376 -> 370 [style=solid label="\"0b\""]
  376 -> 371 [style=solid label="\"0B\""]
  376 -> 372 [style=solid label="'\\''"]
  376 -> 373 [style=solid label="\"false\""]
  376 -> 374 [style=solid label="\"true\""]
  376 -> 375 [style=solid label="\"noexcept\""]
  376 -> 17 [style=solid label="\"operator\""]
  376 -> 26 [style=solid label="\"decltype\""]
  376 -> 376 [style=solid label="\"delete\""]
  376 -> 377 [style=solid label="'.'"]
  376 -> 378 [style=solid label="'2'"]
  376 -> 379 [style=solid label="'3'"]
  376 -> 380 [style=solid label="'4'"]
  376 -> 381 [style=solid label="'5'"]
  376 -> 382 [style=solid label="'6'"]
  376 -> 383 [style=solid label="'7'"]
  376 -> 384 [style=solid label="'8'"]
  376 -> 385 [style=solid label="'9'"]
  376 -> 185 [style=solid label="\"u8\""]
  376 -> 186 [style=solid label="'u'"]
  376 -> 187 [style=solid label="'U'"]
  376 -> 188 [style=solid label="'L'"]
  376 -> 386 [style=solid label="'*'"]
  376 -> 203 [style=solid label="'\"'"]
  376 -> 387 [style=solid label="\"0x\""]
  376 -> 388 [style=solid label="\"0X\""]
  376 -> 389 [style=solid label="\"requires\""]
  376 -> 390 [style=solid label="\"new\""]
  376 -> 391 [style=solid label="'~'"]
  376 -> 392 [style=solid label="'!'"]
  376 -> 393 [style=solid label="\"++\""]
  376 -> 394 [style=solid label="\"--\""]
  376 -> 395 [style=solid label="\"this\""]
  376 -> 37 [style=solid label="\"auto\""]
  376 -> 396 [style=solid label="\"nullptr\""]
  376 -> 397 [style=solid label="\"dynamic_cast\""]
  376 -> 398 [style=solid label="\"static_cast\""]
  376 -> 399 [style=solid label="\"reinterpret_cast\""]
  376 -> 400 [style=solid label="\"const_cast\""]
  376 -> 401 [style=solid label="\"typeid\""]
  376 -> 38 [style=solid label="\"char\""]
  376 -> 39 [style=solid label="\"char8_t\""]
  376 -> 40 [style=solid label="\"char16_t\""]
  376 -> 41 [style=solid label="\"char32_t\""]
  376 -> 42 [style=solid label="\"wchar_t\""]
  376 -> 43 [style=solid label="\"bool\""]
  376 -> 44 [style=solid label="\"short\""]
  376 -> 45 [style=solid label="\"int\""]
  376 -> 46 [style=solid label="\"long\""]
  376 -> 47 [style=solid label="\"signed\""]
  376 -> 48 [style=solid label="\"unsigned\""]
  376 -> 49 [style=solid label="\"float\""]
  376 -> 50 [style=solid label="\"double\""]
  376 -> 51 [style=solid label="\"void\""]
  376 -> 209 [style=solid label="'R'"]
  376 -> 56 [style=solid label="\"typename\""]
  376 -> 402 [style=solid label="\"sizeof\""]
  376 -> 403 [style=solid label="\"alignof\""]
  376 -> 406 [style=dashed label="await-expression"]
  376 -> 407 [style=dashed label="binary-literal"]
  376 -> 408 [style=dashed label="boolean-literal"]
  376 -> 792 [style=dashed label="cast-expression"]
  376 -> 410 [style=dashed label="character-literal"]
  376 -> 66 [style=dashed label="class-name"]
  376 -> 68 [style=dashed label="concept-name"]
  376 -> 69 [style=dashed label="conversion-function-id"]
  376 -> 414 [style=dashed label="decimal-floating-point-literal"]
  376 -> 415 [style=dashed label="decimal-literal"]
  376 -> 77 [style=dashed label="decltype-specifier"]
  376 -> 416 [style=dashed label="delete-expression"]
  376 -> 417 [style=dashed label="digit"]
  376 -> 418 [style=dashed label="digit-sequence"]
  376 -> 419 [style=dashed label="encoding-prefix"]
  376 -> 85 [style=dashed label="enum-name"]
  376 -> 422 [style=dashed label="floating-point-literal"]
  376 -> 423 [style=dashed label="fold-expression"]
  376 -> 424 [style=dashed label="fractional-constant"]
  376 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  376 -> 426 [style=dashed label="hexadecimal-literal"]
  376 -> 427 [style=dashed label="hexadecimal-prefix"]
  376 -> 428 [style=dashed label="id-expression"]
  376 -> 430 [style=dashed label="integer-literal"]
  376 -> 431 [style=dashed label="lambda-expression"]
  376 -> 432 [style=dashed label="lambda-introducer"]
  376 -> 433 [style=dashed label="literal"]
  376 -> 96 [style=dashed label="literal-operator-id"]
  376 -> 100 [style=dashed label="namespace-alias"]
  376 -> 103 [style=dashed label="namespace-name"]
  376 -> 437 [style=dashed label="nested-name-specifier"]
  376 -> 438 [style=dashed label="new-expression"]
  376 -> 439 [style=dashed label="noexcept-expression"]
  376 -> 440 [style=dashed label="nonzero-digit"]
  376 -> 441 [style=dashed label="octal-literal"]
  376 -> 109 [style=dashed label="operator-function-id"]
  376 -> 110 [style=dashed label="placeholder-type-specifier"]
  376 -> 443 [style=dashed label="pointer-literal"]
  376 -> 444 [style=dashed label="postfix-expression"]
  376 -> 445 [style=dashed label="primary-expression"]
  376 -> 113 [style=dashed label="qualified-id"]
  376 -> 447 [style=dashed label="requires-expression"]
  376 -> 115 [style=dashed label="simple-template-id"]
  376 -> 534 [style=dashed label="simple-type-specifier"]
  376 -> 450 [style=dashed label="string-literal"]
  376 -> 121 [style=dashed label="template-id"]
  376 -> 216 [style=dashed label="template-name"]
  376 -> 124 [style=dashed label="type-constraint"]
  376 -> 125 [style=dashed label="type-name"]
  376 -> 127 [style=dashed label="typedef-name"]
  376 -> 536 [style=dashed label="typename-specifier"]
  376 -> 454 [style=dashed label="unary-expression"]
  376 -> 455 [style=dashed label="unary-operator"]
  376 -> 130 [style=dashed label="unqualified-id"]
  376 -> 456 [style=dashed label="user-defined-character-literal"]
  376 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  376 -> 458 [style=dashed label="user-defined-integer-literal"]
  376 -> 459 [style=dashed label="user-defined-literal"]
  376 -> 460 [style=dashed label="user-defined-string-literal"]
  377 [label="State 377\n\l391 fractional-constant: '.' • digit-sequence\l"]
  377 -> 793 [style=solid label="'0'"]
  377 -> 794 [style=solid label="'1'"]
  377 -> 795 [style=solid label="'2'"]
  377 -> 796 [style=solid label="'3'"]
  377 -> 797 [style=solid label="'4'"]
  377 -> 798 [style=solid label="'5'"]
  377 -> 799 [style=solid label="'6'"]
  377 -> 800 [style=solid label="'7'"]
  377 -> 801 [style=solid label="'8'"]
  377 -> 802 [style=solid label="'9'"]
  377 -> 417 [style=dashed label="digit"]
  377 -> 803 [style=dashed label="digit-sequence"]
  378 [label="State 378\n\l254 digit: '2' •\l700 nonzero-digit: '2' •\l"]
  378 -> "378R254" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "378R254" [label="R254", fillcolor=3, shape=diamond, style=filled]
  378 -> "378R700d" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "378R700d" [label="R700", fillcolor=5, shape=diamond, style=filled]
  378 -> "378R700" [style=solid]
 "378R700" [label="R700", fillcolor=3, shape=diamond, style=filled]
  379 [label="State 379\n\l255 digit: '3' •\l701 nonzero-digit: '3' •\l"]
  379 -> "379R255" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "379R255" [label="R255", fillcolor=3, shape=diamond, style=filled]
  379 -> "379R701d" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "379R701d" [label="R701", fillcolor=5, shape=diamond, style=filled]
  379 -> "379R701" [style=solid]
 "379R701" [label="R701", fillcolor=3, shape=diamond, style=filled]
  380 [label="State 380\n\l256 digit: '4' •\l702 nonzero-digit: '4' •\l"]
  380 -> "380R256" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "380R256" [label="R256", fillcolor=3, shape=diamond, style=filled]
  380 -> "380R702d" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "380R702d" [label="R702", fillcolor=5, shape=diamond, style=filled]
  380 -> "380R702" [style=solid]
 "380R702" [label="R702", fillcolor=3, shape=diamond, style=filled]
  381 [label="State 381\n\l257 digit: '5' •\l703 nonzero-digit: '5' •\l"]
  381 -> "381R257" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "381R257" [label="R257", fillcolor=3, shape=diamond, style=filled]
  381 -> "381R703d" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "381R703d" [label="R703", fillcolor=5, shape=diamond, style=filled]
  381 -> "381R703" [style=solid]
 "381R703" [label="R703", fillcolor=3, shape=diamond, style=filled]
  382 [label="State 382\n\l258 digit: '6' •\l704 nonzero-digit: '6' •\l"]
  382 -> "382R258" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "382R258" [label="R258", fillcolor=3, shape=diamond, style=filled]
  382 -> "382R704d" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "382R704d" [label="R704", fillcolor=5, shape=diamond, style=filled]
  382 -> "382R704" [style=solid]
 "382R704" [label="R704", fillcolor=3, shape=diamond, style=filled]
  383 [label="State 383\n\l259 digit: '7' •\l705 nonzero-digit: '7' •\l"]
  383 -> "383R259" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "383R259" [label="R259", fillcolor=3, shape=diamond, style=filled]
  383 -> "383R705d" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "383R705d" [label="R705", fillcolor=5, shape=diamond, style=filled]
  383 -> "383R705" [style=solid]
 "383R705" [label="R705", fillcolor=3, shape=diamond, style=filled]
  384 [label="State 384\n\l260 digit: '8' •\l706 nonzero-digit: '8' •\l"]
  384 -> "384R260" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "384R260" [label="R260", fillcolor=3, shape=diamond, style=filled]
  384 -> "384R706d" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "384R706d" [label="R706", fillcolor=5, shape=diamond, style=filled]
  384 -> "384R706" [style=solid]
 "384R706" [label="R706", fillcolor=3, shape=diamond, style=filled]
  385 [label="State 385\n\l261 digit: '9' •\l707 nonzero-digit: '9' •\l"]
  385 -> "385R261" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "385R261" [label="R261", fillcolor=3, shape=diamond, style=filled]
  385 -> "385R707d" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9']", style=solid]
 "385R707d" [label="R707", fillcolor=5, shape=diamond, style=filled]
  385 -> "385R707" [style=solid]
 "385R707" [label="R707", fillcolor=3, shape=diamond, style=filled]
  386 [label="State 386\n\l1142 unary-operator: '*' •\l"]
  386 -> "386R1142" [style=solid]
 "386R1142" [label="R1142", fillcolor=3, shape=diamond, style=filled]
  387 [label="State 387\n\l461 hexadecimal-prefix: \"0x\" •\l"]
  387 -> "387R461" [style=solid]
 "387R461" [label="R461", fillcolor=3, shape=diamond, style=filled]
  388 [label="State 388\n\l462 hexadecimal-prefix: \"0X\" •\l"]
  388 -> "388R462" [style=solid]
 "388R462" [label="R462", fillcolor=3, shape=diamond, style=filled]
  389 [label="State 389\n\l944 requires-expression: \"requires\" • requirement-body\l945                    | \"requires\" • requirement-parameter-list requirement-body\l"]
  389 -> 804 [style=solid label="'('"]
  389 -> 805 [style=solid label="'{'"]
  389 -> 806 [style=dashed label="requirement-body"]
  389 -> 807 [style=dashed label="requirement-parameter-list"]
  390 [label="State 390\n\l673 new-expression: \"new\" • new-type-id\l675               | \"new\" • new-placement new-type-id\l677               | \"new\" • new-type-id new-initializer\l679               | \"new\" • new-placement new-type-id new-initializer\l681               | \"new\" • '(' type-id ')'\l683               | \"new\" • new-placement '(' type-id ')'\l685               | \"new\" • '(' type-id ')' new-initializer\l687               | \"new\" • new-placement '(' type-id ')' new-initializer\l"]
  390 -> 161 [style=solid label="IDENTIFIER"]
  390 -> 808 [style=solid label="'('"]
  390 -> 9 [style=solid label="\"::\""]
  390 -> 12 [style=solid label="\"class\""]
  390 -> 13 [style=solid label="\"struct\""]
  390 -> 14 [style=solid label="\"union\""]
  390 -> 18 [style=solid label="\"const\""]
  390 -> 19 [style=solid label="\"volatile\""]
  390 -> 26 [style=solid label="\"decltype\""]
  390 -> 136 [style=solid label="\"enum\""]
  390 -> 37 [style=solid label="\"auto\""]
  390 -> 38 [style=solid label="\"char\""]
  390 -> 39 [style=solid label="\"char8_t\""]
  390 -> 40 [style=solid label="\"char16_t\""]
  390 -> 41 [style=solid label="\"char32_t\""]
  390 -> 42 [style=solid label="\"wchar_t\""]
  390 -> 43 [style=solid label="\"bool\""]
  390 -> 44 [style=solid label="\"short\""]
  390 -> 45 [style=solid label="\"int\""]
  390 -> 46 [style=solid label="\"long\""]
  390 -> 47 [style=solid label="\"signed\""]
  390 -> 48 [style=solid label="\"unsigned\""]
  390 -> 49 [style=solid label="\"float\""]
  390 -> 50 [style=solid label="\"double\""]
  390 -> 51 [style=solid label="\"void\""]
  390 -> 56 [style=solid label="\"typename\""]
  390 -> 210 [style=dashed label="class-key"]
  390 -> 66 [style=dashed label="class-name"]
  390 -> 68 [style=dashed label="concept-name"]
  390 -> 70 [style=dashed label="cv-qualifier"]
  390 -> 77 [style=dashed label="decltype-specifier"]
  390 -> 80 [style=dashed label="elaborated-enum-specifier"]
  390 -> 81 [style=dashed label="elaborated-type-specifier"]
  390 -> 85 [style=dashed label="enum-name"]
  390 -> 100 [style=dashed label="namespace-alias"]
  390 -> 103 [style=dashed label="namespace-name"]
  390 -> 213 [style=dashed label="nested-name-specifier"]
  390 -> 809 [style=dashed label="new-placement"]
  390 -> 810 [style=dashed label="new-type-id"]
  390 -> 110 [style=dashed label="placeholder-type-specifier"]
  390 -> 142 [style=dashed label="simple-template-id"]
  390 -> 116 [style=dashed label="simple-type-specifier"]
  390 -> 216 [style=dashed label="template-name"]
  390 -> 124 [style=dashed label="type-constraint"]
  390 -> 125 [style=dashed label="type-name"]
  390 -> 217 [style=dashed label="type-specifier"]
  390 -> 811 [style=dashed label="type-specifier-seq"]
  390 -> 127 [style=dashed label="typedef-name"]
  390 -> 128 [style=dashed label="typename-specifier"]
  391 [label="State 391\n\l1147 unary-operator: '~' •\l1158 unqualified-id: '~' • type-name\l1159               | '~' • decltype-specifier\l"]
  391 -> 254 [style=solid label="IDENTIFIER"]
  391 -> 135 [style=solid label="\"decltype\""]
  391 -> 66 [style=dashed label="class-name"]
  391 -> 255 [style=dashed label="decltype-specifier"]
  391 -> 85 [style=dashed label="enum-name"]
  391 -> 142 [style=dashed label="simple-template-id"]
  391 -> 143 [style=dashed label="template-name"]
  391 -> 256 [style=dashed label="type-name"]
  391 -> 127 [style=dashed label="typedef-name"]
  391 -> "391R1147d" [label="[IDENTIFIER, \"decltype\"]", style=solid]
 "391R1147d" [label="R1147", fillcolor=5, shape=diamond, style=filled]
  391 -> "391R1147" [style=solid]
 "391R1147" [label="R1147", fillcolor=3, shape=diamond, style=filled]
  392 [label="State 392\n\l1146 unary-operator: '!' •\l"]
  392 -> "392R1146" [style=solid]
 "392R1146" [label="R1146", fillcolor=3, shape=diamond, style=filled]
  393 [label="State 393\n\l1132 unary-expression: \"++\" • cast-expression\l"]
  393 -> 1 [style=solid label="IDENTIFIER"]
  393 -> 361 [style=solid label="'+'"]
  393 -> 362 [style=solid label="'-'"]
  393 -> 363 [style=solid label="'('"]
  393 -> 364 [style=solid label="'&'"]
  393 -> 365 [style=solid label="\"::\""]
  393 -> 366 [style=solid label="'['"]
  393 -> 367 [style=solid label="\"co_await\""]
  393 -> 368 [style=solid label="'0'"]
  393 -> 369 [style=solid label="'1'"]
  393 -> 370 [style=solid label="\"0b\""]
  393 -> 371 [style=solid label="\"0B\""]
  393 -> 372 [style=solid label="'\\''"]
  393 -> 373 [style=solid label="\"false\""]
  393 -> 374 [style=solid label="\"true\""]
  393 -> 375 [style=solid label="\"noexcept\""]
  393 -> 17 [style=solid label="\"operator\""]
  393 -> 26 [style=solid label="\"decltype\""]
  393 -> 376 [style=solid label="\"delete\""]
  393 -> 377 [style=solid label="'.'"]
  393 -> 378 [style=solid label="'2'"]
  393 -> 379 [style=solid label="'3'"]
  393 -> 380 [style=solid label="'4'"]
  393 -> 381 [style=solid label="'5'"]
  393 -> 382 [style=solid label="'6'"]
  393 -> 383 [style=solid label="'7'"]
  393 -> 384 [style=solid label="'8'"]
  393 -> 385 [style=solid label="'9'"]
  393 -> 185 [style=solid label="\"u8\""]
  393 -> 186 [style=solid label="'u'"]
  393 -> 187 [style=solid label="'U'"]
  393 -> 188 [style=solid label="'L'"]
  393 -> 386 [style=solid label="'*'"]
  393 -> 203 [style=solid label="'\"'"]
  393 -> 387 [style=solid label="\"0x\""]
  393 -> 388 [style=solid label="\"0X\""]
  393 -> 389 [style=solid label="\"requires\""]
  393 -> 390 [style=solid label="\"new\""]
  393 -> 391 [style=solid label="'~'"]
  393 -> 392 [style=solid label="'!'"]
  393 -> 393 [style=solid label="\"++\""]
  393 -> 394 [style=solid label="\"--\""]
  393 -> 395 [style=solid label="\"this\""]
  393 -> 37 [style=solid label="\"auto\""]
  393 -> 396 [style=solid label="\"nullptr\""]
  393 -> 397 [style=solid label="\"dynamic_cast\""]
  393 -> 398 [style=solid label="\"static_cast\""]
  393 -> 399 [style=solid label="\"reinterpret_cast\""]
  393 -> 400 [style=solid label="\"const_cast\""]
  393 -> 401 [style=solid label="\"typeid\""]
  393 -> 38 [style=solid label="\"char\""]
  393 -> 39 [style=solid label="\"char8_t\""]
  393 -> 40 [style=solid label="\"char16_t\""]
  393 -> 41 [style=solid label="\"char32_t\""]
  393 -> 42 [style=solid label="\"wchar_t\""]
  393 -> 43 [style=solid label="\"bool\""]
  393 -> 44 [style=solid label="\"short\""]
  393 -> 45 [style=solid label="\"int\""]
  393 -> 46 [style=solid label="\"long\""]
  393 -> 47 [style=solid label="\"signed\""]
  393 -> 48 [style=solid label="\"unsigned\""]
  393 -> 49 [style=solid label="\"float\""]
  393 -> 50 [style=solid label="\"double\""]
  393 -> 51 [style=solid label="\"void\""]
  393 -> 209 [style=solid label="'R'"]
  393 -> 56 [style=solid label="\"typename\""]
  393 -> 402 [style=solid label="\"sizeof\""]
  393 -> 403 [style=solid label="\"alignof\""]
  393 -> 406 [style=dashed label="await-expression"]
  393 -> 407 [style=dashed label="binary-literal"]
  393 -> 408 [style=dashed label="boolean-literal"]
  393 -> 812 [style=dashed label="cast-expression"]
  393 -> 410 [style=dashed label="character-literal"]
  393 -> 66 [style=dashed label="class-name"]
  393 -> 68 [style=dashed label="concept-name"]
  393 -> 69 [style=dashed label="conversion-function-id"]
  393 -> 414 [style=dashed label="decimal-floating-point-literal"]
  393 -> 415 [style=dashed label="decimal-literal"]
  393 -> 77 [style=dashed label="decltype-specifier"]
  393 -> 416 [style=dashed label="delete-expression"]
  393 -> 417 [style=dashed label="digit"]
  393 -> 418 [style=dashed label="digit-sequence"]
  393 -> 419 [style=dashed label="encoding-prefix"]
  393 -> 85 [style=dashed label="enum-name"]
  393 -> 422 [style=dashed label="floating-point-literal"]
  393 -> 423 [style=dashed label="fold-expression"]
  393 -> 424 [style=dashed label="fractional-constant"]
  393 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  393 -> 426 [style=dashed label="hexadecimal-literal"]
  393 -> 427 [style=dashed label="hexadecimal-prefix"]
  393 -> 428 [style=dashed label="id-expression"]
  393 -> 430 [style=dashed label="integer-literal"]
  393 -> 431 [style=dashed label="lambda-expression"]
  393 -> 432 [style=dashed label="lambda-introducer"]
  393 -> 433 [style=dashed label="literal"]
  393 -> 96 [style=dashed label="literal-operator-id"]
  393 -> 100 [style=dashed label="namespace-alias"]
  393 -> 103 [style=dashed label="namespace-name"]
  393 -> 437 [style=dashed label="nested-name-specifier"]
  393 -> 438 [style=dashed label="new-expression"]
  393 -> 439 [style=dashed label="noexcept-expression"]
  393 -> 440 [style=dashed label="nonzero-digit"]
  393 -> 441 [style=dashed label="octal-literal"]
  393 -> 109 [style=dashed label="operator-function-id"]
  393 -> 110 [style=dashed label="placeholder-type-specifier"]
  393 -> 443 [style=dashed label="pointer-literal"]
  393 -> 444 [style=dashed label="postfix-expression"]
  393 -> 445 [style=dashed label="primary-expression"]
  393 -> 113 [style=dashed label="qualified-id"]
  393 -> 447 [style=dashed label="requires-expression"]
  393 -> 115 [style=dashed label="simple-template-id"]
  393 -> 534 [style=dashed label="simple-type-specifier"]
  393 -> 450 [style=dashed label="string-literal"]
  393 -> 121 [style=dashed label="template-id"]
  393 -> 216 [style=dashed label="template-name"]
  393 -> 124 [style=dashed label="type-constraint"]
  393 -> 125 [style=dashed label="type-name"]
  393 -> 127 [style=dashed label="typedef-name"]
  393 -> 536 [style=dashed label="typename-specifier"]
  393 -> 454 [style=dashed label="unary-expression"]
  393 -> 455 [style=dashed label="unary-operator"]
  393 -> 130 [style=dashed label="unqualified-id"]
  393 -> 456 [style=dashed label="user-defined-character-literal"]
  393 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  393 -> 458 [style=dashed label="user-defined-integer-literal"]
  393 -> 459 [style=dashed label="user-defined-literal"]
  393 -> 460 [style=dashed label="user-defined-string-literal"]
  394 [label="State 394\n\l1133 unary-expression: \"--\" • cast-expression\l"]
  394 -> 1 [style=solid label="IDENTIFIER"]
  394 -> 361 [style=solid label="'+'"]
  394 -> 362 [style=solid label="'-'"]
  394 -> 363 [style=solid label="'('"]
  394 -> 364 [style=solid label="'&'"]
  394 -> 365 [style=solid label="\"::\""]
  394 -> 366 [style=solid label="'['"]
  394 -> 367 [style=solid label="\"co_await\""]
  394 -> 368 [style=solid label="'0'"]
  394 -> 369 [style=solid label="'1'"]
  394 -> 370 [style=solid label="\"0b\""]
  394 -> 371 [style=solid label="\"0B\""]
  394 -> 372 [style=solid label="'\\''"]
  394 -> 373 [style=solid label="\"false\""]
  394 -> 374 [style=solid label="\"true\""]
  394 -> 375 [style=solid label="\"noexcept\""]
  394 -> 17 [style=solid label="\"operator\""]
  394 -> 26 [style=solid label="\"decltype\""]
  394 -> 376 [style=solid label="\"delete\""]
  394 -> 377 [style=solid label="'.'"]
  394 -> 378 [style=solid label="'2'"]
  394 -> 379 [style=solid label="'3'"]
  394 -> 380 [style=solid label="'4'"]
  394 -> 381 [style=solid label="'5'"]
  394 -> 382 [style=solid label="'6'"]
  394 -> 383 [style=solid label="'7'"]
  394 -> 384 [style=solid label="'8'"]
  394 -> 385 [style=solid label="'9'"]
  394 -> 185 [style=solid label="\"u8\""]
  394 -> 186 [style=solid label="'u'"]
  394 -> 187 [style=solid label="'U'"]
  394 -> 188 [style=solid label="'L'"]
  394 -> 386 [style=solid label="'*'"]
  394 -> 203 [style=solid label="'\"'"]
  394 -> 387 [style=solid label="\"0x\""]
  394 -> 388 [style=solid label="\"0X\""]
  394 -> 389 [style=solid label="\"requires\""]
  394 -> 390 [style=solid label="\"new\""]
  394 -> 391 [style=solid label="'~'"]
  394 -> 392 [style=solid label="'!'"]
  394 -> 393 [style=solid label="\"++\""]
  394 -> 394 [style=solid label="\"--\""]
  394 -> 395 [style=solid label="\"this\""]
  394 -> 37 [style=solid label="\"auto\""]
  394 -> 396 [style=solid label="\"nullptr\""]
  394 -> 397 [style=solid label="\"dynamic_cast\""]
  394 -> 398 [style=solid label="\"static_cast\""]
  394 -> 399 [style=solid label="\"reinterpret_cast\""]
  394 -> 400 [style=solid label="\"const_cast\""]
  394 -> 401 [style=solid label="\"typeid\""]
  394 -> 38 [style=solid label="\"char\""]
  394 -> 39 [style=solid label="\"char8_t\""]
  394 -> 40 [style=solid label="\"char16_t\""]
  394 -> 41 [style=solid label="\"char32_t\""]
  394 -> 42 [style=solid label="\"wchar_t\""]
  394 -> 43 [style=solid label="\"bool\""]
  394 -> 44 [style=solid label="\"short\""]
  394 -> 45 [style=solid label="\"int\""]
  394 -> 46 [style=solid label="\"long\""]
  394 -> 47 [style=solid label="\"signed\""]
  394 -> 48 [style=solid label="\"unsigned\""]
  394 -> 49 [style=solid label="\"float\""]
  394 -> 50 [style=solid label="\"double\""]
  394 -> 51 [style=solid label="\"void\""]
  394 -> 209 [style=solid label="'R'"]
  394 -> 56 [style=solid label="\"typename\""]
  394 -> 402 [style=solid label="\"sizeof\""]
  394 -> 403 [style=solid label="\"alignof\""]
  394 -> 406 [style=dashed label="await-expression"]
  394 -> 407 [style=dashed label="binary-literal"]
  394 -> 408 [style=dashed label="boolean-literal"]
  394 -> 813 [style=dashed label="cast-expression"]
  394 -> 410 [style=dashed label="character-literal"]
  394 -> 66 [style=dashed label="class-name"]
  394 -> 68 [style=dashed label="concept-name"]
  394 -> 69 [style=dashed label="conversion-function-id"]
  394 -> 414 [style=dashed label="decimal-floating-point-literal"]
  394 -> 415 [style=dashed label="decimal-literal"]
  394 -> 77 [style=dashed label="decltype-specifier"]
  394 -> 416 [style=dashed label="delete-expression"]
  394 -> 417 [style=dashed label="digit"]
  394 -> 418 [style=dashed label="digit-sequence"]
  394 -> 419 [style=dashed label="encoding-prefix"]
  394 -> 85 [style=dashed label="enum-name"]
  394 -> 422 [style=dashed label="floating-point-literal"]
  394 -> 423 [style=dashed label="fold-expression"]
  394 -> 424 [style=dashed label="fractional-constant"]
  394 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  394 -> 426 [style=dashed label="hexadecimal-literal"]
  394 -> 427 [style=dashed label="hexadecimal-prefix"]
  394 -> 428 [style=dashed label="id-expression"]
  394 -> 430 [style=dashed label="integer-literal"]
  394 -> 431 [style=dashed label="lambda-expression"]
  394 -> 432 [style=dashed label="lambda-introducer"]
  394 -> 433 [style=dashed label="literal"]
  394 -> 96 [style=dashed label="literal-operator-id"]
  394 -> 100 [style=dashed label="namespace-alias"]
  394 -> 103 [style=dashed label="namespace-name"]
  394 -> 437 [style=dashed label="nested-name-specifier"]
  394 -> 438 [style=dashed label="new-expression"]
  394 -> 439 [style=dashed label="noexcept-expression"]
  394 -> 440 [style=dashed label="nonzero-digit"]
  394 -> 441 [style=dashed label="octal-literal"]
  394 -> 109 [style=dashed label="operator-function-id"]
  394 -> 110 [style=dashed label="placeholder-type-specifier"]
  394 -> 443 [style=dashed label="pointer-literal"]
  394 -> 444 [style=dashed label="postfix-expression"]
  394 -> 445 [style=dashed label="primary-expression"]
  394 -> 113 [style=dashed label="qualified-id"]
  394 -> 447 [style=dashed label="requires-expression"]
  394 -> 115 [style=dashed label="simple-template-id"]
  394 -> 534 [style=dashed label="simple-type-specifier"]
  394 -> 450 [style=dashed label="string-literal"]
  394 -> 121 [style=dashed label="template-id"]
  394 -> 216 [style=dashed label="template-name"]
  394 -> 124 [style=dashed label="type-constraint"]
  394 -> 125 [style=dashed label="type-name"]
  394 -> 127 [style=dashed label="typedef-name"]
  394 -> 536 [style=dashed label="typename-specifier"]
  394 -> 454 [style=dashed label="unary-expression"]
  394 -> 455 [style=dashed label="unary-operator"]
  394 -> 130 [style=dashed label="unqualified-id"]
  394 -> 456 [style=dashed label="user-defined-character-literal"]
  394 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  394 -> 458 [style=dashed label="user-defined-integer-literal"]
  394 -> 459 [style=dashed label="user-defined-literal"]
  394 -> 460 [style=dashed label="user-defined-string-literal"]
  395 [label="State 395\n\l884 primary-expression: \"this\" •\l"]
  395 -> "395R884" [style=solid]
 "395R884" [label="R884", fillcolor=3, shape=diamond, style=filled]
  396 [label="State 396\n\l859 pointer-literal: \"nullptr\" •\l"]
  396 -> "396R859" [style=solid]
 "396R859" [label="R859", fillcolor=3, shape=diamond, style=filled]
  397 [label="State 397\n\l877 postfix-expression: \"dynamic_cast\" • '<' type-id '>' '(' expression ')'\l"]
  397 -> 814 [style=solid label="'<'"]
  398 [label="State 398\n\l878 postfix-expression: \"static_cast\" • '<' type-id '>' '(' expression ')'\l"]
  398 -> 815 [style=solid label="'<'"]
  399 [label="State 399\n\l879 postfix-expression: \"reinterpret_cast\" • '<' type-id '>' '(' expression ')'\l"]
  399 -> 816 [style=solid label="'<'"]
  400 [label="State 400\n\l880 postfix-expression: \"const_cast\" • '<' type-id '>' '(' expression ')'\l"]
  400 -> 817 [style=solid label="'<'"]
  401 [label="State 401\n\l881 postfix-expression: \"typeid\" • '(' expression ')'\l882                   | \"typeid\" • '(' type-id ')'\l"]
  401 -> 818 [style=solid label="'('"]
  402 [label="State 402\n\l1135 unary-expression: \"sizeof\" • unary-expression\l1136                 | \"sizeof\" • '(' type-id ')'\l1137                 | \"sizeof\" • \"...\" '(' IDENTIFIER ')'\l"]
  402 -> 1 [style=solid label="IDENTIFIER"]
  402 -> 361 [style=solid label="'+'"]
  402 -> 362 [style=solid label="'-'"]
  402 -> 819 [style=solid label="'('"]
  402 -> 820 [style=solid label="\"...\""]
  402 -> 364 [style=solid label="'&'"]
  402 -> 365 [style=solid label="\"::\""]
  402 -> 366 [style=solid label="'['"]
  402 -> 367 [style=solid label="\"co_await\""]
  402 -> 368 [style=solid label="'0'"]
  402 -> 369 [style=solid label="'1'"]
  402 -> 370 [style=solid label="\"0b\""]
  402 -> 371 [style=solid label="\"0B\""]
  402 -> 372 [style=solid label="'\\''"]
  402 -> 373 [style=solid label="\"false\""]
  402 -> 374 [style=solid label="\"true\""]
  402 -> 375 [style=solid label="\"noexcept\""]
  402 -> 17 [style=solid label="\"operator\""]
  402 -> 26 [style=solid label="\"decltype\""]
  402 -> 376 [style=solid label="\"delete\""]
  402 -> 377 [style=solid label="'.'"]
  402 -> 378 [style=solid label="'2'"]
  402 -> 379 [style=solid label="'3'"]
  402 -> 380 [style=solid label="'4'"]
  402 -> 381 [style=solid label="'5'"]
  402 -> 382 [style=solid label="'6'"]
  402 -> 383 [style=solid label="'7'"]
  402 -> 384 [style=solid label="'8'"]
  402 -> 385 [style=solid label="'9'"]
  402 -> 185 [style=solid label="\"u8\""]
  402 -> 186 [style=solid label="'u'"]
  402 -> 187 [style=solid label="'U'"]
  402 -> 188 [style=solid label="'L'"]
  402 -> 386 [style=solid label="'*'"]
  402 -> 203 [style=solid label="'\"'"]
  402 -> 387 [style=solid label="\"0x\""]
  402 -> 388 [style=solid label="\"0X\""]
  402 -> 389 [style=solid label="\"requires\""]
  402 -> 390 [style=solid label="\"new\""]
  402 -> 391 [style=solid label="'~'"]
  402 -> 392 [style=solid label="'!'"]
  402 -> 393 [style=solid label="\"++\""]
  402 -> 394 [style=solid label="\"--\""]
  402 -> 395 [style=solid label="\"this\""]
  402 -> 37 [style=solid label="\"auto\""]
  402 -> 396 [style=solid label="\"nullptr\""]
  402 -> 397 [style=solid label="\"dynamic_cast\""]
  402 -> 398 [style=solid label="\"static_cast\""]
  402 -> 399 [style=solid label="\"reinterpret_cast\""]
  402 -> 400 [style=solid label="\"const_cast\""]
  402 -> 401 [style=solid label="\"typeid\""]
  402 -> 38 [style=solid label="\"char\""]
  402 -> 39 [style=solid label="\"char8_t\""]
  402 -> 40 [style=solid label="\"char16_t\""]
  402 -> 41 [style=solid label="\"char32_t\""]
  402 -> 42 [style=solid label="\"wchar_t\""]
  402 -> 43 [style=solid label="\"bool\""]
  402 -> 44 [style=solid label="\"short\""]
  402 -> 45 [style=solid label="\"int\""]
  402 -> 46 [style=solid label="\"long\""]
  402 -> 47 [style=solid label="\"signed\""]
  402 -> 48 [style=solid label="\"unsigned\""]
  402 -> 49 [style=solid label="\"float\""]
  402 -> 50 [style=solid label="\"double\""]
  402 -> 51 [style=solid label="\"void\""]
  402 -> 209 [style=solid label="'R'"]
  402 -> 56 [style=solid label="\"typename\""]
  402 -> 402 [style=solid label="\"sizeof\""]
  402 -> 403 [style=solid label="\"alignof\""]
  402 -> 406 [style=dashed label="await-expression"]
  402 -> 407 [style=dashed label="binary-literal"]
  402 -> 408 [style=dashed label="boolean-literal"]
  402 -> 410 [style=dashed label="character-literal"]
  402 -> 66 [style=dashed label="class-name"]
  402 -> 68 [style=dashed label="concept-name"]
  402 -> 69 [style=dashed label="conversion-function-id"]
  402 -> 414 [style=dashed label="decimal-floating-point-literal"]
  402 -> 415 [style=dashed label="decimal-literal"]
  402 -> 77 [style=dashed label="decltype-specifier"]
  402 -> 416 [style=dashed label="delete-expression"]
  402 -> 417 [style=dashed label="digit"]
  402 -> 418 [style=dashed label="digit-sequence"]
  402 -> 419 [style=dashed label="encoding-prefix"]
  402 -> 85 [style=dashed label="enum-name"]
  402 -> 422 [style=dashed label="floating-point-literal"]
  402 -> 423 [style=dashed label="fold-expression"]
  402 -> 424 [style=dashed label="fractional-constant"]
  402 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  402 -> 426 [style=dashed label="hexadecimal-literal"]
  402 -> 427 [style=dashed label="hexadecimal-prefix"]
  402 -> 428 [style=dashed label="id-expression"]
  402 -> 430 [style=dashed label="integer-literal"]
  402 -> 431 [style=dashed label="lambda-expression"]
  402 -> 432 [style=dashed label="lambda-introducer"]
  402 -> 433 [style=dashed label="literal"]
  402 -> 96 [style=dashed label="literal-operator-id"]
  402 -> 100 [style=dashed label="namespace-alias"]
  402 -> 103 [style=dashed label="namespace-name"]
  402 -> 437 [style=dashed label="nested-name-specifier"]
  402 -> 438 [style=dashed label="new-expression"]
  402 -> 439 [style=dashed label="noexcept-expression"]
  402 -> 440 [style=dashed label="nonzero-digit"]
  402 -> 441 [style=dashed label="octal-literal"]
  402 -> 109 [style=dashed label="operator-function-id"]
  402 -> 110 [style=dashed label="placeholder-type-specifier"]
  402 -> 443 [style=dashed label="pointer-literal"]
  402 -> 444 [style=dashed label="postfix-expression"]
  402 -> 445 [style=dashed label="primary-expression"]
  402 -> 113 [style=dashed label="qualified-id"]
  402 -> 447 [style=dashed label="requires-expression"]
  402 -> 115 [style=dashed label="simple-template-id"]
  402 -> 534 [style=dashed label="simple-type-specifier"]
  402 -> 450 [style=dashed label="string-literal"]
  402 -> 121 [style=dashed label="template-id"]
  402 -> 216 [style=dashed label="template-name"]
  402 -> 124 [style=dashed label="type-constraint"]
  402 -> 125 [style=dashed label="type-name"]
  402 -> 127 [style=dashed label="typedef-name"]
  402 -> 536 [style=dashed label="typename-specifier"]
  402 -> 821 [style=dashed label="unary-expression"]
  402 -> 455 [style=dashed label="unary-operator"]
  402 -> 130 [style=dashed label="unqualified-id"]
  402 -> 456 [style=dashed label="user-defined-character-literal"]
  402 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  402 -> 458 [style=dashed label="user-defined-integer-literal"]
  402 -> 459 [style=dashed label="user-defined-literal"]
  402 -> 460 [style=dashed label="user-defined-string-literal"]
  403 [label="State 403\n\l1138 unary-expression: \"alignof\" • '(' type-id ')'\l"]
  403 -> 822 [style=solid label="'('"]
  404 [label="State 404\n\l 11 additive-expression: additive-expression • '+' multiplicative-expression\l 12                    | additive-expression • '-' multiplicative-expression\l966 shift-expression: additive-expression •\l"]
  404 -> 823 [style=solid label="'+'"]
  404 -> 824 [style=solid label="'-'"]
  404 -> "404R966" [style=solid]
 "404R966" [label="R966", fillcolor=3, shape=diamond, style=filled]
  405 [label="State 405\n\l 20 and-expression: and-expression • '&' equality-expression\l320 exclusive-or-expression: and-expression •\l"]
  405 -> 825 [style=solid label="'&'"]
  405 -> "405R320" [style=solid]
 "405R320" [label="R320", fillcolor=3, shape=diamond, style=filled]
  406 [label="State 406\n\l1134 unary-expression: await-expression •\l"]
  406 -> "406R1134" [style=solid]
 "406R1134" [label="R1134", fillcolor=3, shape=diamond, style=filled]
  407 [label="State 407\n\l 93 binary-literal: binary-literal • binary-digit\l 94               | binary-literal • '\\'' binary-digit\l489 integer-literal: binary-literal •\l490                | binary-literal • integer-suffix\l1172 user-defined-integer-literal: binary-literal • ud-suffix\l"]
  407 -> 826 [style=solid label="IDENTIFIER"]
  407 -> 827 [style=solid label="LL"]
  407 -> 780 [style=solid label="'0'"]
  407 -> 781 [style=solid label="'1'"]
  407 -> 828 [style=solid label="'\\''"]
  407 -> 829 [style=solid label="'u'"]
  407 -> 830 [style=solid label="'U'"]
  407 -> 831 [style=solid label="'L'"]
  407 -> 832 [style=solid label="'l'"]
  407 -> 833 [style=solid label="\"ll\""]
  407 -> 834 [style=solid label="'z'"]
  407 -> 835 [style=solid label="'Z'"]
  407 -> 836 [style=dashed label="binary-digit"]
  407 -> 837 [style=dashed label="integer-suffix"]
  407 -> 838 [style=dashed label="long-long-suffix"]
  407 -> 839 [style=dashed label="long-suffix"]
  407 -> 840 [style=dashed label="size-suffix"]
  407 -> 841 [style=dashed label="ud-suffix"]
  407 -> 842 [style=dashed label="unsigned-suffix"]
  407 -> "407R489d" [label="[IDENTIFIER]", style=solid]
 "407R489d" [label="R489", fillcolor=5, shape=diamond, style=filled]
  407 -> "407R489" [style=solid]
 "407R489" [label="R489", fillcolor=3, shape=diamond, style=filled]
  408 [label="State 408\n\l562 literal: boolean-literal •\l"]
  408 -> "408R562" [style=solid]
 "408R562" [label="R562", fillcolor=3, shape=diamond, style=filled]
  409 [label="State 409\n\l856 pm-expression: cast-expression •\l"]
  409 -> "409R856" [style=solid]
 "409R856" [label="R856", fillcolor=3, shape=diamond, style=filled]
  410 [label="State 410\n\l559 literal: character-literal •\l1163 user-defined-character-literal: character-literal • ud-suffix\l"]
  410 -> 826 [style=solid label="IDENTIFIER"]
  410 -> 843 [style=dashed label="ud-suffix"]
  410 -> "410R559d" [label="[IDENTIFIER]", style=solid]
 "410R559d" [label="R559", fillcolor=5, shape=diamond, style=filled]
  410 -> "410R559" [style=solid]
 "410R559" [label="R559", fillcolor=3, shape=diamond, style=filled]
  411 [label="State 411\n\l155 compare-expression: compare-expression • \"<=>\" shift-expression\l930 relational-expression: compare-expression •\l"]
  411 -> 844 [style=solid label="\"<=>\""]
  411 -> "411R930" [style=solid]
 "411R930" [label="R930", fillcolor=3, shape=diamond, style=filled]
  412 [label="State 412\n\l171 constant-expression: conditional-expression •\l"]
  412 -> "412R171" [style=solid]
 "412R171" [label="R171", fillcolor=3, shape=diamond, style=filled]
  413 [label="State 413\n\l 17 alignment-specifier: \"alignas\" '(' constant-expression • ')'\l 18                    | \"alignas\" '(' constant-expression • \"...\" ')'\l"]
  413 -> 845 [style=solid label="')'"]
  413 -> 846 [style=solid label="\"...\""]
  414 [label="State 414\n\l342 floating-point-literal: decimal-floating-point-literal •\l"]
  414 -> "414R342" [style=solid]
 "414R342" [label="R342", fillcolor=3, shape=diamond, style=filled]
  415 [label="State 415\n\l199 decimal-literal: decimal-literal • digit\l200                | decimal-literal • '\\'' digit\l493 integer-literal: decimal-literal •\l494                | decimal-literal • integer-suffix\l1169 user-defined-integer-literal: decimal-literal • ud-suffix\l"]
  415 -> 826 [style=solid label="IDENTIFIER"]
  415 -> 827 [style=solid label="LL"]
  415 -> 793 [style=solid label="'0'"]
  415 -> 794 [style=solid label="'1'"]
  415 -> 847 [style=solid label="'\\''"]
  415 -> 795 [style=solid label="'2'"]
  415 -> 796 [style=solid label="'3'"]
  415 -> 797 [style=solid label="'4'"]
  415 -> 798 [style=solid label="'5'"]
  415 -> 799 [style=solid label="'6'"]
  415 -> 800 [style=solid label="'7'"]
  415 -> 801 [style=solid label="'8'"]
  415 -> 802 [style=solid label="'9'"]
  415 -> 829 [style=solid label="'u'"]
  415 -> 830 [style=solid label="'U'"]
  415 -> 831 [style=solid label="'L'"]
  415 -> 832 [style=solid label="'l'"]
  415 -> 833 [style=solid label="\"ll\""]
  415 -> 834 [style=solid label="'z'"]
  415 -> 835 [style=solid label="'Z'"]
  415 -> 848 [style=dashed label="digit"]
  415 -> 849 [style=dashed label="integer-suffix"]
  415 -> 838 [style=dashed label="long-long-suffix"]
  415 -> 839 [style=dashed label="long-suffix"]
  415 -> 840 [style=dashed label="size-suffix"]
  415 -> 850 [style=dashed label="ud-suffix"]
  415 -> 842 [style=dashed label="unsigned-suffix"]
  415 -> "415R493d" [label="[IDENTIFIER]", style=solid]
 "415R493d" [label="R493", fillcolor=5, shape=diamond, style=filled]
  415 -> "415R493" [style=solid]
 "415R493" [label="R493", fillcolor=3, shape=diamond, style=filled]
  416 [label="State 416\n\l1141 unary-expression: delete-expression •\l"]
  416 -> "416R1141" [style=solid]
 "416R1141" [label="R1141", fillcolor=3, shape=diamond, style=filled]
  417 [label="State 417\n\l262 digit-sequence: digit •\l"]
  417 -> "417R262" [style=solid]
 "417R262" [label="R262", fillcolor=3, shape=diamond, style=filled]
  418 [label="State 418\n\l196 decimal-floating-point-literal: digit-sequence • exponent-part\l197                               | digit-sequence • exponent-part floating-point-suffix\l263 digit-sequence: digit-sequence • digit\l264               | digit-sequence • '\\'' digit\l390 fractional-constant: digit-sequence • '.' digit-sequence\l392                    | digit-sequence • '.'\l1166 user-defined-floating-point-literal: digit-sequence • exponent-part ud-suffix\l"]
  418 -> 793 [style=solid label="'0'"]
  418 -> 794 [style=solid label="'1'"]
  418 -> 851 [style=solid label="'\\''"]
  418 -> 852 [style=solid label="'.'"]
  418 -> 795 [style=solid label="'2'"]
  418 -> 796 [style=solid label="'3'"]
  418 -> 797 [style=solid label="'4'"]
  418 -> 798 [style=solid label="'5'"]
  418 -> 799 [style=solid label="'6'"]
  418 -> 800 [style=solid label="'7'"]
  418 -> 801 [style=solid label="'8'"]
  418 -> 802 [style=solid label="'9'"]
  418 -> 853 [style=solid label="'e'"]
  418 -> 854 [style=solid label="'E'"]
  418 -> 855 [style=dashed label="digit"]
  418 -> 856 [style=dashed label="exponent-part"]
  419 [label="State 419\n\l126 character-literal: encoding-prefix • '\\'' c-char-sequence '\\''\l1044 string-literal: encoding-prefix • '\"' '\"'\l1046               | encoding-prefix • '\"' s-char-sequence '\"'\l1048               | encoding-prefix • 'R' raw-string\l"]
  419 -> 857 [style=solid label="'\\''"]
  419 -> 511 [style=solid label="'\"'"]
  419 -> 512 [style=solid label="'R'"]
  420 [label="State 420\n\l 19 and-expression: equality-expression •\l308 equality-expression: equality-expression • \"==\" relational-expression\l309                    | equality-expression • \"!=\" relational-expression\l"]
  420 -> 858 [style=solid label="\"==\""]
  420 -> 859 [style=solid label="\"!=\""]
  420 -> "420R19" [style=solid]
 "420R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  421 [label="State 421\n\l321 exclusive-or-expression: exclusive-or-expression • '^' and-expression\l467 inclusive-or-expression: exclusive-or-expression •\l"]
  421 -> 860 [style=solid label="'^'"]
  421 -> "421R467" [style=solid]
 "421R467" [label="R467", fillcolor=3, shape=diamond, style=filled]
  422 [label="State 422\n\l560 literal: floating-point-literal •\l"]
  422 -> "422R560" [style=solid]
 "422R560" [label="R560", fillcolor=3, shape=diamond, style=filled]
  423 [label="State 423\n\l888 primary-expression: fold-expression •\l"]
  423 -> "423R888" [style=solid]
 "423R888" [label="R888", fillcolor=3, shape=diamond, style=filled]
  424 [label="State 424\n\l192 decimal-floating-point-literal: fractional-constant •\l193                               | fractional-constant • exponent-part\l194                               | fractional-constant • floating-point-suffix\l195                               | fractional-constant • exponent-part floating-point-suffix\l1164 user-defined-floating-point-literal: fractional-constant • ud-suffix\l1165                                    | fractional-constant • exponent-part ud-suffix\l"]
  424 -> 826 [style=solid label="IDENTIFIER"]
  424 -> 861 [style=solid label="'L'"]
  424 -> 853 [style=solid label="'e'"]
  424 -> 854 [style=solid label="'E'"]
  424 -> 862 [style=solid label="'f'"]
  424 -> 863 [style=solid label="'l'"]
  424 -> 864 [style=solid label="'F'"]
  424 -> 865 [style=dashed label="exponent-part"]
  424 -> 866 [style=dashed label="floating-point-suffix"]
  424 -> 867 [style=dashed label="ud-suffix"]
  424 -> "424R192d" [label="[IDENTIFIER]", style=solid]
 "424R192d" [label="R192", fillcolor=5, shape=diamond, style=filled]
  424 -> "424R192" [style=solid]
 "424R192" [label="R192", fillcolor=3, shape=diamond, style=filled]
  425 [label="State 425\n\l343 floating-point-literal: hexadecimal-floating-point-literal •\l"]
  425 -> "425R343" [style=solid]
 "425R343" [label="R343", fillcolor=3, shape=diamond, style=filled]
  426 [label="State 426\n\l495 integer-literal: hexadecimal-literal •\l496                | hexadecimal-literal • integer-suffix\l1171 user-defined-integer-literal: hexadecimal-literal • ud-suffix\l"]
  426 -> 826 [style=solid label="IDENTIFIER"]
  426 -> 827 [style=solid label="LL"]
  426 -> 829 [style=solid label="'u'"]
  426 -> 830 [style=solid label="'U'"]
  426 -> 831 [style=solid label="'L'"]
  426 -> 832 [style=solid label="'l'"]
  426 -> 833 [style=solid label="\"ll\""]
  426 -> 834 [style=solid label="'z'"]
  426 -> 835 [style=solid label="'Z'"]
  426 -> 868 [style=dashed label="integer-suffix"]
  426 -> 838 [style=dashed label="long-long-suffix"]
  426 -> 839 [style=dashed label="long-suffix"]
  426 -> 840 [style=dashed label="size-suffix"]
  426 -> 869 [style=dashed label="ud-suffix"]
  426 -> 842 [style=dashed label="unsigned-suffix"]
  426 -> "426R495d" [label="[IDENTIFIER]", style=solid]
 "426R495d" [label="R495", fillcolor=5, shape=diamond, style=filled]
  426 -> "426R495" [style=solid]
 "426R495" [label="R495", fillcolor=3, shape=diamond, style=filled]
  427 [label="State 427\n\l453 hexadecimal-floating-point-literal: hexadecimal-prefix • hexadecimal-fractional-constant binary-exponent-part\l454                                   | hexadecimal-prefix • hexadecimal-fractional-constant binary-exponent-part floating-point-suffix\l455                                   | hexadecimal-prefix • hexadecimal-digit-sequence binary-exponent-part\l456                                   | hexadecimal-prefix • hexadecimal-digit-sequence binary-exponent-part floating-point-suffix\l460 hexadecimal-literal: hexadecimal-prefix • hexadecimal-digit-sequence\l1167 user-defined-floating-point-literal: hexadecimal-prefix • hexadecimal-fractional-constant binary-exponent-part ud-suffix\l1168                                    | hexadecimal-prefix • hexadecimal-digit-sequence binary-exponent-part ud-suffix\l"]
  427 -> 870 [style=solid label="'0'"]
  427 -> 871 [style=solid label="'1'"]
  427 -> 872 [style=solid label="'.'"]
  427 -> 873 [style=solid label="'2'"]
  427 -> 874 [style=solid label="'3'"]
  427 -> 875 [style=solid label="'4'"]
  427 -> 876 [style=solid label="'5'"]
  427 -> 877 [style=solid label="'6'"]
  427 -> 878 [style=solid label="'7'"]
  427 -> 879 [style=solid label="'8'"]
  427 -> 880 [style=solid label="'9'"]
  427 -> 881 [style=solid label="'e'"]
  427 -> 882 [style=solid label="'E'"]
  427 -> 883 [style=solid label="'f'"]
  427 -> 884 [style=solid label="'F'"]
  427 -> 885 [style=solid label="'a'"]
  427 -> 886 [style=solid label="'b'"]
  427 -> 887 [style=solid label="'c'"]
  427 -> 888 [style=solid label="'d'"]
  427 -> 889 [style=solid label="'A'"]
  427 -> 890 [style=solid label="'B'"]
  427 -> 891 [style=solid label="'C'"]
  427 -> 892 [style=solid label="'D'"]
  427 -> 893 [style=dashed label="hexadecimal-digit"]
  427 -> 894 [style=dashed label="hexadecimal-digit-sequence"]
  427 -> 895 [style=dashed label="hexadecimal-fractional-constant"]
  428 [label="State 428\n\l886 primary-expression: id-expression •\l"]
  428 -> "428R886" [style=solid]
 "428R886" [label="R886", fillcolor=3, shape=diamond, style=filled]
  429 [label="State 429\n\l468 inclusive-or-expression: inclusive-or-expression • '|' exclusive-or-expression\l567 logical-and-expression: inclusive-or-expression •\l"]
  429 -> 896 [style=solid label="'|'"]
  429 -> "429R567" [style=solid]
 "429R567" [label="R567", fillcolor=3, shape=diamond, style=filled]
  430 [label="State 430\n\l558 literal: integer-literal •\l"]
  430 -> "430R558" [style=solid]
 "430R558" [label="R558", fillcolor=3, shape=diamond, style=filled]
  431 [label="State 431\n\l887 primary-expression: lambda-expression •\l"]
  431 -> "431R887" [style=solid]
 "431R887" [label="R887", fillcolor=3, shape=diamond, style=filled]
  432 [label="State 432\n\l535 lambda-expression: lambda-introducer • lambda-declarator compound-statement\l536                  | lambda-introducer • '<' template-parameter-list '>' lambda-declarator compound-statement\l537                  | lambda-introducer • '<' template-parameter-list '>' requires-clause lambda-declarator compound-statement\l"]
  432 -> 161 [style=solid label="IDENTIFIER"]
  432 -> 4 [style=solid label="\"alignas\""]
  432 -> 897 [style=solid label="'('"]
  432 -> 9 [style=solid label="\"::\""]
  432 -> 10 [style=solid label="'['"]
  432 -> 11 [style=solid label="\"virtual\""]
  432 -> 12 [style=solid label="\"class\""]
  432 -> 13 [style=solid label="\"struct\""]
  432 -> 14 [style=solid label="\"union\""]
  432 -> 898 [style=solid label="\"noexcept\""]
  432 -> 18 [style=solid label="\"const\""]
  432 -> 19 [style=solid label="\"volatile\""]
  432 -> 20 [style=solid label="\"friend\""]
  432 -> 21 [style=solid label="\"typedef\""]
  432 -> 22 [style=solid label="\"constexpr\""]
  432 -> 23 [style=solid label="\"consteval\""]
  432 -> 24 [style=solid label="\"constinit\""]
  432 -> 263 [style=solid label="\"inline\""]
  432 -> 26 [style=solid label="\"decltype\""]
  432 -> 740 [style=solid label="\"->\""]
  432 -> 27 [style=solid label="\"enum\""]
  432 -> 264 [style=solid label="\"extern\""]
  432 -> 899 [style=solid label="'<'"]
  432 -> 29 [style=solid label="\"explicit\""]
  432 -> 37 [style=solid label="\"auto\""]
  432 -> 38 [style=solid label="\"char\""]
  432 -> 39 [style=solid label="\"char8_t\""]
  432 -> 40 [style=solid label="\"char16_t\""]
  432 -> 41 [style=solid label="\"char32_t\""]
  432 -> 42 [style=solid label="\"wchar_t\""]
  432 -> 43 [style=solid label="\"bool\""]
  432 -> 44 [style=solid label="\"short\""]
  432 -> 45 [style=solid label="\"int\""]
  432 -> 46 [style=solid label="\"long\""]
  432 -> 47 [style=solid label="\"signed\""]
  432 -> 48 [style=solid label="\"unsigned\""]
  432 -> 49 [style=solid label="\"float\""]
  432 -> 50 [style=solid label="\"double\""]
  432 -> 51 [style=solid label="\"void\""]
  432 -> 53 [style=solid label="\"static\""]
  432 -> 54 [style=solid label="\"thread_local\""]
  432 -> 55 [style=solid label="\"mutable\""]
  432 -> 56 [style=solid label="\"typename\""]
  432 -> 58 [style=dashed label="alignment-specifier"]
  432 -> 61 [style=dashed label="attribute-specifier"]
  432 -> 900 [style=dashed label="attribute-specifier-seq"]
  432 -> 64 [style=dashed label="class-head"]
  432 -> 65 [style=dashed label="class-key"]
  432 -> 66 [style=dashed label="class-name"]
  432 -> 67 [style=dashed label="class-specifier"]
  432 -> 68 [style=dashed label="concept-name"]
  432 -> 70 [style=dashed label="cv-qualifier"]
  432 -> 71 [style=dashed label="decl-specifier"]
  432 -> 901 [style=dashed label="decl-specifier-seq"]
  432 -> 77 [style=dashed label="decltype-specifier"]
  432 -> 79 [style=dashed label="defining-type-specifier"]
  432 -> 80 [style=dashed label="elaborated-enum-specifier"]
  432 -> 81 [style=dashed label="elaborated-type-specifier"]
  432 -> 83 [style=dashed label="enum-head"]
  432 -> 268 [style=dashed label="enum-key"]
  432 -> 85 [style=dashed label="enum-name"]
  432 -> 86 [style=dashed label="enum-specifier"]
  432 -> 269 [style=dashed label="explicit-specifier"]
  432 -> 92 [style=dashed label="function-specifier"]
  432 -> 902 [style=dashed label="lambda-declarator"]
  432 -> 903 [style=dashed label="lambda-specifiers"]
  432 -> 100 [style=dashed label="namespace-alias"]
  432 -> 103 [style=dashed label="namespace-name"]
  432 -> 213 [style=dashed label="nested-name-specifier"]
  432 -> 904 [style=dashed label="noexcept-specifier"]
  432 -> 110 [style=dashed label="placeholder-type-specifier"]
  432 -> 142 [style=dashed label="simple-template-id"]
  432 -> 116 [style=dashed label="simple-type-specifier"]
  432 -> 118 [style=dashed label="storage-class-specifier"]
  432 -> 216 [style=dashed label="template-name"]
  432 -> 905 [style=dashed label="trailing-return-type"]
  432 -> 124 [style=dashed label="type-constraint"]
  432 -> 125 [style=dashed label="type-name"]
  432 -> 126 [style=dashed label="type-specifier"]
  432 -> 127 [style=dashed label="typedef-name"]
  432 -> 128 [style=dashed label="typename-specifier"]
  433 [label="State 433\n\l883 primary-expression: literal •\l"]
  433 -> "433R883" [style=solid]
 "433R883" [label="R883", fillcolor=3, shape=diamond, style=filled]
  434 [label="State 434\n\l568 logical-and-expression: logical-and-expression • \"&&\" inclusive-or-expression\l569 logical-or-expression: logical-and-expression •\l"]
  434 -> 906 [style=solid label="\"&&\""]
  434 -> "434R569" [style=solid]
 "434R569" [label="R569", fillcolor=3, shape=diamond, style=filled]
  435 [label="State 435\n\l169 conditional-expression: logical-or-expression •\l170                       | logical-or-expression • '?' expression ':' assignment-expression\l570 logical-or-expression: logical-or-expression • \"||\" logical-and-expression\l"]
  435 -> 907 [style=solid label="'?'"]
  435 -> 908 [style=solid label="\"||\""]
  435 -> "435R169" [style=solid]
 "435R169" [label="R169", fillcolor=3, shape=diamond, style=filled]
  436 [label="State 436\n\l 10 additive-expression: multiplicative-expression •\l644 multiplicative-expression: multiplicative-expression • '*' pm-expression\l645                          | multiplicative-expression • '/' pm-expression\l646                          | multiplicative-expression • '%' pm-expression\l"]
  436 -> 909 [style=solid label="'*'"]
  436 -> 910 [style=solid label="'/'"]
  436 -> 911 [style=solid label="'%'"]
  436 -> "436R10" [style=solid]
 "436R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  437 [label="State 437\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l913 qualified-id: nested-name-specifier • unqualified-id\l914             | nested-name-specifier • \"template\" unqualified-id\l999 simple-type-specifier: nested-name-specifier • type-name\l1001                      | nested-name-specifier • \"template\" simple-template-id\l1004                      | nested-name-specifier • template-name\l1084 type-constraint: nested-name-specifier • concept-name\l1086                | nested-name-specifier • concept-name '<' '>'\l1088                | nested-name-specifier • concept-name '<' template-argument-list '>'\l"]
  437 -> 325 [style=solid label="IDENTIFIER"]
  437 -> 326 [style=solid label="\"template\""]
  437 -> 17 [style=solid label="\"operator\""]
  437 -> 36 [style=solid label="'~'"]
  437 -> 66 [style=dashed label="class-name"]
  437 -> 328 [style=dashed label="concept-name"]
  437 -> 69 [style=dashed label="conversion-function-id"]
  437 -> 85 [style=dashed label="enum-name"]
  437 -> 96 [style=dashed label="literal-operator-id"]
  437 -> 109 [style=dashed label="operator-function-id"]
  437 -> 329 [style=dashed label="simple-template-id"]
  437 -> 121 [style=dashed label="template-id"]
  437 -> 330 [style=dashed label="template-name"]
  437 -> 331 [style=dashed label="type-name"]
  437 -> 127 [style=dashed label="typedef-name"]
  437 -> 332 [style=dashed label="unqualified-id"]
  438 [label="State 438\n\l1140 unary-expression: new-expression •\l"]
  438 -> "438R1140" [style=solid]
 "438R1140" [label="R1140", fillcolor=3, shape=diamond, style=filled]
  439 [label="State 439\n\l1139 unary-expression: noexcept-expression •\l"]
  439 -> "439R1139" [style=solid]
 "439R1139" [label="R1139", fillcolor=3, shape=diamond, style=filled]
  440 [label="State 440\n\l198 decimal-literal: nonzero-digit •\l"]
  440 -> "440R198" [style=solid]
 "440R198" [label="R198", fillcolor=3, shape=diamond, style=filled]
  441 [label="State 441\n\l491 integer-literal: octal-literal •\l492                | octal-literal • integer-suffix\l753 octal-literal: octal-literal • octal-digit\l754              | octal-literal • '\\'' octal-digit\l1170 user-defined-integer-literal: octal-literal • ud-suffix\l"]
  441 -> 826 [style=solid label="IDENTIFIER"]
  441 -> 827 [style=solid label="LL"]
  441 -> 912 [style=solid label="'0'"]
  441 -> 913 [style=solid label="'1'"]
  441 -> 914 [style=solid label="'\\''"]
  441 -> 915 [style=solid label="'2'"]
  441 -> 916 [style=solid label="'3'"]
  441 -> 917 [style=solid label="'4'"]
  441 -> 918 [style=solid label="'5'"]
  441 -> 919 [style=solid label="'6'"]
  441 -> 920 [style=solid label="'7'"]
  441 -> 829 [style=solid label="'u'"]
  441 -> 830 [style=solid label="'U'"]
  441 -> 831 [style=solid label="'L'"]
  441 -> 832 [style=solid label="'l'"]
  441 -> 833 [style=solid label="\"ll\""]
  441 -> 834 [style=solid label="'z'"]
  441 -> 835 [style=solid label="'Z'"]
  441 -> 921 [style=dashed label="integer-suffix"]
  441 -> 838 [style=dashed label="long-long-suffix"]
  441 -> 839 [style=dashed label="long-suffix"]
  441 -> 922 [style=dashed label="octal-digit"]
  441 -> 840 [style=dashed label="size-suffix"]
  441 -> 923 [style=dashed label="ud-suffix"]
  441 -> 842 [style=dashed label="unsigned-suffix"]
  441 -> "441R491d" [label="[IDENTIFIER]", style=solid]
 "441R491d" [label="R491", fillcolor=5, shape=diamond, style=filled]
  441 -> "441R491" [style=solid]
 "441R491" [label="R491", fillcolor=3, shape=diamond, style=filled]
  442 [label="State 442\n\l643 multiplicative-expression: pm-expression •\l857 pm-expression: pm-expression • \".*\" cast-expression\l858              | pm-expression • \"->*\" cast-expression\l"]
  442 -> 924 [style=solid label="\".*\""]
  442 -> 925 [style=solid label="\"->*\""]
  442 -> "442R643" [style=solid]
 "442R643" [label="R643", fillcolor=3, shape=diamond, style=filled]
  443 [label="State 443\n\l563 literal: pointer-literal •\l"]
  443 -> "443R563" [style=solid]
 "443R563" [label="R563", fillcolor=3, shape=diamond, style=filled]
  444 [label="State 444\n\l861 postfix-expression: postfix-expression • '[' ']'\l862                   | postfix-expression • '[' expression-list ']'\l863                   | postfix-expression • '(' ')'\l864                   | postfix-expression • '(' expression-list ')'\l871                   | postfix-expression • '.' id-expression\l872                   | postfix-expression • '.' \"template\" id-expression\l873                   | postfix-expression • \"->\" id-expression\l874                   | postfix-expression • \"->\" \"template\" id-expression\l875                   | postfix-expression • \"++\"\l876                   | postfix-expression • \"--\"\l1130 unary-expression: postfix-expression •\l"]
  444 -> 926 [style=solid label="'('"]
  444 -> 927 [style=solid label="'['"]
  444 -> 928 [style=solid label="\"->\""]
  444 -> 929 [style=solid label="'.'"]
  444 -> 930 [style=solid label="\"++\""]
  444 -> 931 [style=solid label="\"--\""]
  444 -> "444R1130" [style=solid]
 "444R1130" [label="R1130", fillcolor=3, shape=diamond, style=filled]
  445 [label="State 445\n\l860 postfix-expression: primary-expression •\l"]
  445 -> "445R860" [style=solid]
 "445R860" [label="R860", fillcolor=3, shape=diamond, style=filled]
  446 [label="State 446\n\l307 equality-expression: relational-expression •\l931 relational-expression: relational-expression • '<' compare-expression\l932                      | relational-expression • '>' compare-expression\l933                      | relational-expression • \"<=\" compare-expression\l934                      | relational-expression • \">=\" compare-expression\l"]
  446 -> 932 [style=solid label="'<'"]
  446 -> 933 [style=solid label="'>'"]
  446 -> 934 [style=solid label="\"<=\""]
  446 -> 935 [style=solid label="\">=\""]
  446 -> "446R307d" [label="['>']", style=solid]
 "446R307d" [label="R307", fillcolor=5, shape=diamond, style=filled]
  446 -> "446R307" [style=solid]
 "446R307" [label="R307", fillcolor=3, shape=diamond, style=filled]
  447 [label="State 447\n\l889 primary-expression: requires-expression •\l"]
  447 -> "447R889" [style=solid]
 "447R889" [label="R889", fillcolor=3, shape=diamond, style=filled]
  448 [label="State 448\n\l154 compare-expression: shift-expression •\l967 shift-expression: shift-expression • \"<<\" additive-expression\l968                 | shift-expression • \">>\" additive-expression\l"]
  448 -> 936 [style=solid label="\"<<\""]
  448 -> 937 [style=solid label="\">>\""]
  448 -> "448R154" [style=solid]
 "448R154" [label="R154", fillcolor=3, shape=diamond, style=filled]
  449 [label="State 449\n\l865 postfix-expression: simple-type-specifier • '(' ')'\l866                   | simple-type-specifier • '(' expression-list ')'\l869                   | simple-type-specifier • braced-init-list\l1117 type-specifier: simple-type-specifier •\l"]
  449 -> 938 [style=solid label="'('"]
  449 -> 939 [style=solid label="'{'"]
  449 -> 940 [style=dashed label="braced-init-list"]
  449 -> "449R1117d" [label="['(']", style=solid]
 "449R1117d" [label="R1117", fillcolor=5, shape=diamond, style=filled]
  449 -> "449R1117" [style=solid]
 "449R1117" [label="R1117", fillcolor=3, shape=diamond, style=filled]
  450 [label="State 450\n\l561 literal: string-literal •\l1177 user-defined-string-literal: string-literal • ud-suffix\l"]
  450 -> 826 [style=solid label="IDENTIFIER"]
  450 -> 518 [style=dashed label="ud-suffix"]
  450 -> "450R561d" [label="[IDENTIFIER]", style=solid]
 "450R561d" [label="R561", fillcolor=5, shape=diamond, style=filled]
  450 -> "450R561" [style=solid]
 "450R561" [label="R561", fillcolor=3, shape=diamond, style=filled]
  451 [label="State 451\n\l 15 alignment-specifier: \"alignas\" '(' type-id • ')'\l 16                    | \"alignas\" '(' type-id • \"...\" ')'\l"]
  451 -> 941 [style=solid label="')'"]
  451 -> 942 [style=solid label="\"...\""]
  452 [label="State 452\n\l1090 type-id: type-specifier-seq •\l1091        | type-specifier-seq • abstract-declarator\l"]
  452 -> 258 [style=solid label="IDENTIFIER"]
  452 -> 943 [style=solid label="'('"]
  452 -> 944 [style=solid label="\"...\""]
  452 -> 7 [style=solid label="'&'"]
  452 -> 9 [style=solid label="\"::\""]
  452 -> 945 [style=solid label="'['"]
  452 -> 16 [style=solid label="\"&&\""]
  452 -> 135 [style=solid label="\"decltype\""]
  452 -> 32 [style=solid label="'*'"]
  452 -> 946 [style=dashed label="abstract-declarator"]
  452 -> 947 [style=dashed label="abstract-pack-declarator"]
  452 -> 66 [style=dashed label="class-name"]
  452 -> 139 [style=dashed label="decltype-specifier"]
  452 -> 85 [style=dashed label="enum-name"]
  452 -> 100 [style=dashed label="namespace-alias"]
  452 -> 103 [style=dashed label="namespace-name"]
  452 -> 522 [style=dashed label="nested-name-specifier"]
  452 -> 948 [style=dashed label="noptr-abstract-declarator"]
  452 -> 949 [style=dashed label="noptr-abstract-pack-declarator"]
  452 -> 950 [style=dashed label="parameters-and-qualifiers"]
  452 -> 951 [style=dashed label="ptr-abstract-declarator"]
  452 -> 952 [style=dashed label="ptr-operator"]
  452 -> 142 [style=dashed label="simple-template-id"]
  452 -> 143 [style=dashed label="template-name"]
  452 -> 144 [style=dashed label="type-name"]
  452 -> 127 [style=dashed label="typedef-name"]
  452 -> "452R1090d" [label="['(', \"...\"]", style=solid]
 "452R1090d" [label="R1090", fillcolor=5, shape=diamond, style=filled]
  452 -> "452R1090" [style=solid]
 "452R1090" [label="R1090", fillcolor=3, shape=diamond, style=filled]
  453 [label="State 453\n\l867 postfix-expression: typename-specifier • '(' ')'\l868                   | typename-specifier • '(' expression-list ')'\l870                   | typename-specifier • braced-init-list\l1119 type-specifier: typename-specifier •\l"]
  453 -> 953 [style=solid label="'('"]
  453 -> 939 [style=solid label="'{'"]
  453 -> 954 [style=dashed label="braced-init-list"]
  453 -> "453R1119d" [label="['(']", style=solid]
 "453R1119d" [label="R1119", fillcolor=5, shape=diamond, style=filled]
  453 -> "453R1119" [style=solid]
 "453R1119" [label="R1119", fillcolor=3, shape=diamond, style=filled]
  454 [label="State 454\n\l124 cast-expression: unary-expression •\l"]
  454 -> "454R124" [style=solid]
 "454R124" [label="R124", fillcolor=3, shape=diamond, style=filled]
  455 [label="State 455\n\l1131 unary-expression: unary-operator • cast-expression\l"]
  455 -> 1 [style=solid label="IDENTIFIER"]
  455 -> 361 [style=solid label="'+'"]
  455 -> 362 [style=solid label="'-'"]
  455 -> 363 [style=solid label="'('"]
  455 -> 364 [style=solid label="'&'"]
  455 -> 365 [style=solid label="\"::\""]
  455 -> 366 [style=solid label="'['"]
  455 -> 367 [style=solid label="\"co_await\""]
  455 -> 368 [style=solid label="'0'"]
  455 -> 369 [style=solid label="'1'"]
  455 -> 370 [style=solid label="\"0b\""]
  455 -> 371 [style=solid label="\"0B\""]
  455 -> 372 [style=solid label="'\\''"]
  455 -> 373 [style=solid label="\"false\""]
  455 -> 374 [style=solid label="\"true\""]
  455 -> 375 [style=solid label="\"noexcept\""]
  455 -> 17 [style=solid label="\"operator\""]
  455 -> 26 [style=solid label="\"decltype\""]
  455 -> 376 [style=solid label="\"delete\""]
  455 -> 377 [style=solid label="'.'"]
  455 -> 378 [style=solid label="'2'"]
  455 -> 379 [style=solid label="'3'"]
  455 -> 380 [style=solid label="'4'"]
  455 -> 381 [style=solid label="'5'"]
  455 -> 382 [style=solid label="'6'"]
  455 -> 383 [style=solid label="'7'"]
  455 -> 384 [style=solid label="'8'"]
  455 -> 385 [style=solid label="'9'"]
  455 -> 185 [style=solid label="\"u8\""]
  455 -> 186 [style=solid label="'u'"]
  455 -> 187 [style=solid label="'U'"]
  455 -> 188 [style=solid label="'L'"]
  455 -> 386 [style=solid label="'*'"]
  455 -> 203 [style=solid label="'\"'"]
  455 -> 387 [style=solid label="\"0x\""]
  455 -> 388 [style=solid label="\"0X\""]
  455 -> 389 [style=solid label="\"requires\""]
  455 -> 390 [style=solid label="\"new\""]
  455 -> 391 [style=solid label="'~'"]
  455 -> 392 [style=solid label="'!'"]
  455 -> 393 [style=solid label="\"++\""]
  455 -> 394 [style=solid label="\"--\""]
  455 -> 395 [style=solid label="\"this\""]
  455 -> 37 [style=solid label="\"auto\""]
  455 -> 396 [style=solid label="\"nullptr\""]
  455 -> 397 [style=solid label="\"dynamic_cast\""]
  455 -> 398 [style=solid label="\"static_cast\""]
  455 -> 399 [style=solid label="\"reinterpret_cast\""]
  455 -> 400 [style=solid label="\"const_cast\""]
  455 -> 401 [style=solid label="\"typeid\""]
  455 -> 38 [style=solid label="\"char\""]
  455 -> 39 [style=solid label="\"char8_t\""]
  455 -> 40 [style=solid label="\"char16_t\""]
  455 -> 41 [style=solid label="\"char32_t\""]
  455 -> 42 [style=solid label="\"wchar_t\""]
  455 -> 43 [style=solid label="\"bool\""]
  455 -> 44 [style=solid label="\"short\""]
  455 -> 45 [style=solid label="\"int\""]
  455 -> 46 [style=solid label="\"long\""]
  455 -> 47 [style=solid label="\"signed\""]
  455 -> 48 [style=solid label="\"unsigned\""]
  455 -> 49 [style=solid label="\"float\""]
  455 -> 50 [style=solid label="\"double\""]
  455 -> 51 [style=solid label="\"void\""]
  455 -> 209 [style=solid label="'R'"]
  455 -> 56 [style=solid label="\"typename\""]
  455 -> 402 [style=solid label="\"sizeof\""]
  455 -> 403 [style=solid label="\"alignof\""]
  455 -> 406 [style=dashed label="await-expression"]
  455 -> 407 [style=dashed label="binary-literal"]
  455 -> 408 [style=dashed label="boolean-literal"]
  455 -> 955 [style=dashed label="cast-expression"]
  455 -> 410 [style=dashed label="character-literal"]
  455 -> 66 [style=dashed label="class-name"]
  455 -> 68 [style=dashed label="concept-name"]
  455 -> 69 [style=dashed label="conversion-function-id"]
  455 -> 414 [style=dashed label="decimal-floating-point-literal"]
  455 -> 415 [style=dashed label="decimal-literal"]
  455 -> 77 [style=dashed label="decltype-specifier"]
  455 -> 416 [style=dashed label="delete-expression"]
  455 -> 417 [style=dashed label="digit"]
  455 -> 418 [style=dashed label="digit-sequence"]
  455 -> 419 [style=dashed label="encoding-prefix"]
  455 -> 85 [style=dashed label="enum-name"]
  455 -> 422 [style=dashed label="floating-point-literal"]
  455 -> 423 [style=dashed label="fold-expression"]
  455 -> 424 [style=dashed label="fractional-constant"]
  455 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  455 -> 426 [style=dashed label="hexadecimal-literal"]
  455 -> 427 [style=dashed label="hexadecimal-prefix"]
  455 -> 428 [style=dashed label="id-expression"]
  455 -> 430 [style=dashed label="integer-literal"]
  455 -> 431 [style=dashed label="lambda-expression"]
  455 -> 432 [style=dashed label="lambda-introducer"]
  455 -> 433 [style=dashed label="literal"]
  455 -> 96 [style=dashed label="literal-operator-id"]
  455 -> 100 [style=dashed label="namespace-alias"]
  455 -> 103 [style=dashed label="namespace-name"]
  455 -> 437 [style=dashed label="nested-name-specifier"]
  455 -> 438 [style=dashed label="new-expression"]
  455 -> 439 [style=dashed label="noexcept-expression"]
  455 -> 440 [style=dashed label="nonzero-digit"]
  455 -> 441 [style=dashed label="octal-literal"]
  455 -> 109 [style=dashed label="operator-function-id"]
  455 -> 110 [style=dashed label="placeholder-type-specifier"]
  455 -> 443 [style=dashed label="pointer-literal"]
  455 -> 444 [style=dashed label="postfix-expression"]
  455 -> 445 [style=dashed label="primary-expression"]
  455 -> 113 [style=dashed label="qualified-id"]
  455 -> 447 [style=dashed label="requires-expression"]
  455 -> 115 [style=dashed label="simple-template-id"]
  455 -> 534 [style=dashed label="simple-type-specifier"]
  455 -> 450 [style=dashed label="string-literal"]
  455 -> 121 [style=dashed label="template-id"]
  455 -> 216 [style=dashed label="template-name"]
  455 -> 124 [style=dashed label="type-constraint"]
  455 -> 125 [style=dashed label="type-name"]
  455 -> 127 [style=dashed label="typedef-name"]
  455 -> 536 [style=dashed label="typename-specifier"]
  455 -> 454 [style=dashed label="unary-expression"]
  455 -> 455 [style=dashed label="unary-operator"]
  455 -> 130 [style=dashed label="unqualified-id"]
  455 -> 456 [style=dashed label="user-defined-character-literal"]
  455 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  455 -> 458 [style=dashed label="user-defined-integer-literal"]
  455 -> 459 [style=dashed label="user-defined-literal"]
  455 -> 460 [style=dashed label="user-defined-string-literal"]
  456 [label="State 456\n\l1176 user-defined-literal: user-defined-character-literal •\l"]
  456 -> "456R1176" [style=solid]
 "456R1176" [label="R1176", fillcolor=3, shape=diamond, style=filled]
  457 [label="State 457\n\l1174 user-defined-literal: user-defined-floating-point-literal •\l"]
  457 -> "457R1174" [style=solid]
 "457R1174" [label="R1174", fillcolor=3, shape=diamond, style=filled]
  458 [label="State 458\n\l1173 user-defined-literal: user-defined-integer-literal •\l"]
  458 -> "458R1173" [style=solid]
 "458R1173" [label="R1173", fillcolor=3, shape=diamond, style=filled]
  459 [label="State 459\n\l564 literal: user-defined-literal •\l"]
  459 -> "459R564" [style=solid]
 "459R564" [label="R564", fillcolor=3, shape=diamond, style=filled]
  460 [label="State 460\n\l1175 user-defined-literal: user-defined-string-literal •\l"]
  460 -> "460R1175" [style=solid]
 "460R1175" [label="R1175", fillcolor=3, shape=diamond, style=filled]
  461 [label="State 461\n\l665 nested-name-specifier: nested-name-specifier \"template\" • simple-template-id \"::\"\l914 qualified-id: nested-name-specifier \"template\" • unqualified-id\l"]
  461 -> 727 [style=solid label="IDENTIFIER"]
  461 -> 17 [style=solid label="\"operator\""]
  461 -> 36 [style=solid label="'~'"]
  461 -> 69 [style=dashed label="conversion-function-id"]
  461 -> 96 [style=dashed label="literal-operator-id"]
  461 -> 109 [style=dashed label="operator-function-id"]
  461 -> 956 [style=dashed label="simple-template-id"]
  461 -> 121 [style=dashed label="template-id"]
  461 -> 143 [style=dashed label="template-name"]
  461 -> 729 [style=dashed label="unqualified-id"]
  462 [label="State 462\n\l727 noptr-declarator: noptr-declarator parameters-and-qualifiers •\l"]
  462 -> "462R727" [style=solid]
 "462R727" [label="R727", fillcolor=3, shape=diamond, style=filled]
  463 [label="State 463\n\l732 noptr-declarator: '(' ptr-declarator ')' •\l"]
  463 -> "463R732" [style=solid]
 "463R732" [label="R732", fillcolor=3, shape=diamond, style=filled]
  464 [label="State 464\n\l 22 asm-declaration: \"asm\" '(' string-literal • ')' ';'\l"]
  464 -> 957 [style=solid label="')'"]
  465 [label="State 465\n\l 48 attribute-namespace: IDENTIFIER •\l 55 attribute-token: IDENTIFIER •\l"]
  465 -> "465R48" [label="[\"::\"]", style=solid]
 "465R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  465 -> "465R55" [style=solid]
 "465R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  466 [label="State 466\n\l 57 attribute-using-prefix: \"using\" • attribute-namespace ':'\l"]
  466 -> 958 [style=solid label="IDENTIFIER"]
  466 -> 959 [style=dashed label="attribute-namespace"]
  467 [label="State 467\n\l 43 attribute-list: attribute •\l 46               | attribute • \"...\"\l"]
  467 -> 960 [style=solid label="\"...\""]
  467 -> "467R43" [style=solid]
 "467R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  468 [label="State 468\n\l 44 attribute-list: attribute-list • ','\l 45               | attribute-list • ',' attribute\l 47               | attribute-list • ',' attribute \"...\"\l 50 attribute-specifier: '[' '[' attribute-list • ']' ']'\l"]
  468 -> 961 [style=solid label="','"]
  468 -> 962 [style=solid label="']'"]
  469 [label="State 469\n\l 49 attribute-scoped-token: attribute-namespace • \"::\" IDENTIFIER\l"]
  469 -> 963 [style=solid label="\"::\""]
  470 [label="State 470\n\l 56 attribute-token: attribute-scoped-token •\l"]
  470 -> "470R56" [style=solid]
 "470R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  471 [label="State 471\n\l 38 attribute: attribute-token •\l 39          | attribute-token • attribute-argument-clause\l"]
  471 -> 964 [style=solid label="'('"]
  471 -> 965 [style=dashed label="attribute-argument-clause"]
  471 -> "471R38" [style=solid]
 "471R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  472 [label="State 472\n\l 51 attribute-specifier: '[' '[' attribute-using-prefix • attribute-list ']' ']'\l"]
  472 -> 465 [style=solid label="IDENTIFIER"]
  472 -> 467 [style=dashed label="attribute"]
  472 -> 966 [style=dashed label="attribute-list"]
  472 -> 469 [style=dashed label="attribute-namespace"]
  472 -> 470 [style=dashed label="attribute-scoped-token"]
  472 -> 471 [style=dashed label="attribute-token"]
  473 [label="State 473\n\l142 class-key: \"class\" •\l1113 type-parameter-key: \"class\" •\l"]
  473 -> "473R142" [style=solid]
 "473R142" [label="R142", fillcolor=3, shape=diamond, style=filled]
  473 -> "473R1113d" [label="[IDENTIFIER]", style=solid]
 "473R1113d" [label="R1113", fillcolor=5, shape=diamond, style=filled]
  473 -> "473R1113" [label="['=', \"...\", ',', '>']", style=solid]
 "473R1113" [label="R1113", fillcolor=3, shape=diamond, style=filled]
  474 [label="State 474\n\l1059 template-head: \"template\" • '<' template-parameter-list '>'\l1060              | \"template\" • '<' template-parameter-list '>' requires-clause\l"]
  474 -> 967 [style=solid label="'<'"]
  475 [label="State 475\n\l324 explicit-specialization: \"template\" '<' '>' • declaration\l"]
  475 -> 1 [style=solid label="IDENTIFIER"]
  475 -> 2 [style=solid label="\"using\""]
  475 -> 3 [style=solid label="';'"]
  475 -> 4 [style=solid label="\"alignas\""]
  475 -> 5 [style=solid label="'('"]
  475 -> 6 [style=solid label="\"...\""]
  475 -> 7 [style=solid label="'&'"]
  475 -> 8 [style=solid label="\"asm\""]
  475 -> 9 [style=solid label="\"::\""]
  475 -> 10 [style=solid label="'['"]
  475 -> 11 [style=solid label="\"virtual\""]
  475 -> 12 [style=solid label="\"class\""]
  475 -> 13 [style=solid label="\"struct\""]
  475 -> 14 [style=solid label="\"union\""]
  475 -> 15 [style=solid label="\"template\""]
  475 -> 16 [style=solid label="\"&&\""]
  475 -> 17 [style=solid label="\"operator\""]
  475 -> 18 [style=solid label="\"const\""]
  475 -> 19 [style=solid label="\"volatile\""]
  475 -> 20 [style=solid label="\"friend\""]
  475 -> 21 [style=solid label="\"typedef\""]
  475 -> 22 [style=solid label="\"constexpr\""]
  475 -> 23 [style=solid label="\"consteval\""]
  475 -> 24 [style=solid label="\"constinit\""]
  475 -> 25 [style=solid label="\"inline\""]
  475 -> 26 [style=solid label="\"decltype\""]
  475 -> 27 [style=solid label="\"enum\""]
  475 -> 28 [style=solid label="\"extern\""]
  475 -> 29 [style=solid label="\"explicit\""]
  475 -> 30 [style=solid label="\"export\""]
  475 -> 158 [style=solid label="\"export-keyword\""]
  475 -> 32 [style=solid label="'*'"]
  475 -> 34 [style=solid label="\"import-keyword\""]
  475 -> 35 [style=solid label="\"namespace\""]
  475 -> 36 [style=solid label="'~'"]
  475 -> 37 [style=solid label="\"auto\""]
  475 -> 38 [style=solid label="\"char\""]
  475 -> 39 [style=solid label="\"char8_t\""]
  475 -> 40 [style=solid label="\"char16_t\""]
  475 -> 41 [style=solid label="\"char32_t\""]
  475 -> 42 [style=solid label="\"wchar_t\""]
  475 -> 43 [style=solid label="\"bool\""]
  475 -> 44 [style=solid label="\"short\""]
  475 -> 45 [style=solid label="\"int\""]
  475 -> 46 [style=solid label="\"long\""]
  475 -> 47 [style=solid label="\"signed\""]
  475 -> 48 [style=solid label="\"unsigned\""]
  475 -> 49 [style=solid label="\"float\""]
  475 -> 50 [style=solid label="\"double\""]
  475 -> 51 [style=solid label="\"void\""]
  475 -> 52 [style=solid label="\"static_assert\""]
  475 -> 53 [style=solid label="\"static\""]
  475 -> 54 [style=solid label="\"thread_local\""]
  475 -> 55 [style=solid label="\"mutable\""]
  475 -> 56 [style=solid label="\"typename\""]
  475 -> 57 [style=dashed label="alias-declaration"]
  475 -> 58 [style=dashed label="alignment-specifier"]
  475 -> 59 [style=dashed label="asm-declaration"]
  475 -> 60 [style=dashed label="attribute-declaration"]
  475 -> 61 [style=dashed label="attribute-specifier"]
  475 -> 62 [style=dashed label="attribute-specifier-seq"]
  475 -> 63 [style=dashed label="block-declaration"]
  475 -> 64 [style=dashed label="class-head"]
  475 -> 65 [style=dashed label="class-key"]
  475 -> 66 [style=dashed label="class-name"]
  475 -> 67 [style=dashed label="class-specifier"]
  475 -> 68 [style=dashed label="concept-name"]
  475 -> 69 [style=dashed label="conversion-function-id"]
  475 -> 70 [style=dashed label="cv-qualifier"]
  475 -> 71 [style=dashed label="decl-specifier"]
  475 -> 72 [style=dashed label="decl-specifier-seq"]
  475 -> 968 [style=dashed label="declaration"]
  475 -> 75 [style=dashed label="declarator"]
  475 -> 76 [style=dashed label="declarator-id"]
  475 -> 77 [style=dashed label="decltype-specifier"]
  475 -> 78 [style=dashed label="deduction-guide"]
  475 -> 79 [style=dashed label="defining-type-specifier"]
  475 -> 80 [style=dashed label="elaborated-enum-specifier"]
  475 -> 81 [style=dashed label="elaborated-type-specifier"]
  475 -> 82 [style=dashed label="empty-declaration"]
  475 -> 83 [style=dashed label="enum-head"]
  475 -> 84 [style=dashed label="enum-key"]
  475 -> 85 [style=dashed label="enum-name"]
  475 -> 86 [style=dashed label="enum-specifier"]
  475 -> 87 [style=dashed label="explicit-instantiation"]
  475 -> 88 [style=dashed label="explicit-specialization"]
  475 -> 89 [style=dashed label="explicit-specifier"]
  475 -> 90 [style=dashed label="export-declaration"]
  475 -> 91 [style=dashed label="function-definition"]
  475 -> 92 [style=dashed label="function-specifier"]
  475 -> 94 [style=dashed label="id-expression"]
  475 -> 95 [style=dashed label="linkage-specification"]
  475 -> 96 [style=dashed label="literal-operator-id"]
  475 -> 98 [style=dashed label="module-import-declaration"]
  475 -> 99 [style=dashed label="named-namespace-definition"]
  475 -> 100 [style=dashed label="namespace-alias"]
  475 -> 101 [style=dashed label="namespace-alias-definition"]
  475 -> 102 [style=dashed label="namespace-definition"]
  475 -> 103 [style=dashed label="namespace-name"]
  475 -> 104 [style=dashed label="nested-name-specifier"]
  475 -> 105 [style=dashed label="nested-namespace-definition"]
  475 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  475 -> 107 [style=dashed label="noptr-declarator"]
  475 -> 108 [style=dashed label="opaque-enum-declaration"]
  475 -> 109 [style=dashed label="operator-function-id"]
  475 -> 110 [style=dashed label="placeholder-type-specifier"]
  475 -> 111 [style=dashed label="ptr-declarator"]
  475 -> 112 [style=dashed label="ptr-operator"]
  475 -> 113 [style=dashed label="qualified-id"]
  475 -> 114 [style=dashed label="simple-declaration"]
  475 -> 115 [style=dashed label="simple-template-id"]
  475 -> 116 [style=dashed label="simple-type-specifier"]
  475 -> 117 [style=dashed label="static_assert-declaration"]
  475 -> 118 [style=dashed label="storage-class-specifier"]
  475 -> 119 [style=dashed label="template-declaration"]
  475 -> 120 [style=dashed label="template-head"]
  475 -> 121 [style=dashed label="template-id"]
  475 -> 122 [style=dashed label="template-name"]
  475 -> 124 [style=dashed label="type-constraint"]
  475 -> 125 [style=dashed label="type-name"]
  475 -> 126 [style=dashed label="type-specifier"]
  475 -> 127 [style=dashed label="typedef-name"]
  475 -> 128 [style=dashed label="typename-specifier"]
  475 -> 129 [style=dashed label="unnamed-namespace-definition"]
  475 -> 130 [style=dashed label="unqualified-id"]
  475 -> 131 [style=dashed label="using-declaration"]
  475 -> 132 [style=dashed label="using-directive"]
  475 -> 133 [style=dashed label="using-enum-declaration"]
  476 [label="State 476\n\l809 parameter-declaration: \"this\" • decl-specifier-seq declarator\l813                      | \"this\" • decl-specifier-seq declarator '=' initializer-clause\l817                      | \"this\" • decl-specifier-seq\l821                      | \"this\" • decl-specifier-seq abstract-declarator\l825                      | \"this\" • decl-specifier-seq '=' initializer-clause\l829                      | \"this\" • decl-specifier-seq abstract-declarator '=' initializer-clause\l"]
  476 -> 161 [style=solid label="IDENTIFIER"]
  476 -> 9 [style=solid label="\"::\""]
  476 -> 11 [style=solid label="\"virtual\""]
  476 -> 12 [style=solid label="\"class\""]
  476 -> 13 [style=solid label="\"struct\""]
  476 -> 14 [style=solid label="\"union\""]
  476 -> 18 [style=solid label="\"const\""]
  476 -> 19 [style=solid label="\"volatile\""]
  476 -> 20 [style=solid label="\"friend\""]
  476 -> 21 [style=solid label="\"typedef\""]
  476 -> 22 [style=solid label="\"constexpr\""]
  476 -> 23 [style=solid label="\"consteval\""]
  476 -> 24 [style=solid label="\"constinit\""]
  476 -> 263 [style=solid label="\"inline\""]
  476 -> 26 [style=solid label="\"decltype\""]
  476 -> 27 [style=solid label="\"enum\""]
  476 -> 264 [style=solid label="\"extern\""]
  476 -> 29 [style=solid label="\"explicit\""]
  476 -> 37 [style=solid label="\"auto\""]
  476 -> 38 [style=solid label="\"char\""]
  476 -> 39 [style=solid label="\"char8_t\""]
  476 -> 40 [style=solid label="\"char16_t\""]
  476 -> 41 [style=solid label="\"char32_t\""]
  476 -> 42 [style=solid label="\"wchar_t\""]
  476 -> 43 [style=solid label="\"bool\""]
  476 -> 44 [style=solid label="\"short\""]
  476 -> 45 [style=solid label="\"int\""]
  476 -> 46 [style=solid label="\"long\""]
  476 -> 47 [style=solid label="\"signed\""]
  476 -> 48 [style=solid label="\"unsigned\""]
  476 -> 49 [style=solid label="\"float\""]
  476 -> 50 [style=solid label="\"double\""]
  476 -> 51 [style=solid label="\"void\""]
  476 -> 53 [style=solid label="\"static\""]
  476 -> 54 [style=solid label="\"thread_local\""]
  476 -> 55 [style=solid label="\"mutable\""]
  476 -> 56 [style=solid label="\"typename\""]
  476 -> 64 [style=dashed label="class-head"]
  476 -> 65 [style=dashed label="class-key"]
  476 -> 66 [style=dashed label="class-name"]
  476 -> 67 [style=dashed label="class-specifier"]
  476 -> 68 [style=dashed label="concept-name"]
  476 -> 70 [style=dashed label="cv-qualifier"]
  476 -> 71 [style=dashed label="decl-specifier"]
  476 -> 969 [style=dashed label="decl-specifier-seq"]
  476 -> 77 [style=dashed label="decltype-specifier"]
  476 -> 79 [style=dashed label="defining-type-specifier"]
  476 -> 80 [style=dashed label="elaborated-enum-specifier"]
  476 -> 81 [style=dashed label="elaborated-type-specifier"]
  476 -> 83 [style=dashed label="enum-head"]
  476 -> 268 [style=dashed label="enum-key"]
  476 -> 85 [style=dashed label="enum-name"]
  476 -> 86 [style=dashed label="enum-specifier"]
  476 -> 269 [style=dashed label="explicit-specifier"]
  476 -> 92 [style=dashed label="function-specifier"]
  476 -> 100 [style=dashed label="namespace-alias"]
  476 -> 103 [style=dashed label="namespace-name"]
  476 -> 213 [style=dashed label="nested-name-specifier"]
  476 -> 110 [style=dashed label="placeholder-type-specifier"]
  476 -> 142 [style=dashed label="simple-template-id"]
  476 -> 116 [style=dashed label="simple-type-specifier"]
  476 -> 118 [style=dashed label="storage-class-specifier"]
  476 -> 216 [style=dashed label="template-name"]
  476 -> 124 [style=dashed label="type-constraint"]
  476 -> 125 [style=dashed label="type-name"]
  476 -> 126 [style=dashed label="type-specifier"]
  476 -> 127 [style=dashed label="typedef-name"]
  476 -> 128 [style=dashed label="typename-specifier"]
  477 [label="State 477\n\l1114 type-parameter-key: \"typename\" •\l1126 typename-specifier: \"typename\" • nested-name-specifier IDENTIFIER\l1127                   | \"typename\" • nested-name-specifier simple-template-id\l1128                   | \"typename\" • nested-name-specifier \"template\" simple-template-id\l"]
  477 -> 258 [style=solid label="IDENTIFIER"]
  477 -> 9 [style=solid label="\"::\""]
  477 -> 135 [style=solid label="\"decltype\""]
  477 -> 66 [style=dashed label="class-name"]
  477 -> 139 [style=dashed label="decltype-specifier"]
  477 -> 85 [style=dashed label="enum-name"]
  477 -> 100 [style=dashed label="namespace-alias"]
  477 -> 103 [style=dashed label="namespace-name"]
  477 -> 259 [style=dashed label="nested-name-specifier"]
  477 -> 142 [style=dashed label="simple-template-id"]
  477 -> 143 [style=dashed label="template-name"]
  477 -> 144 [style=dashed label="type-name"]
  477 -> 127 [style=dashed label="typedef-name"]
  477 -> "477R1114d" [label="[IDENTIFIER]", style=solid]
 "477R1114d" [label="R1114", fillcolor=5, shape=diamond, style=filled]
  477 -> "477R1114" [style=solid]
 "477R1114" [label="R1114", fillcolor=3, shape=diamond, style=filled]
  478 [label="State 478\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l806 parameter-declaration: attribute-specifier-seq • decl-specifier-seq declarator\l808                      | attribute-specifier-seq • \"this\" decl-specifier-seq declarator\l810                      | attribute-specifier-seq • decl-specifier-seq declarator '=' initializer-clause\l812                      | attribute-specifier-seq • \"this\" decl-specifier-seq declarator '=' initializer-clause\l814                      | attribute-specifier-seq • decl-specifier-seq\l816                      | attribute-specifier-seq • \"this\" decl-specifier-seq\l818                      | attribute-specifier-seq • decl-specifier-seq abstract-declarator\l820                      | attribute-specifier-seq • \"this\" decl-specifier-seq abstract-declarator\l822                      | attribute-specifier-seq • decl-specifier-seq '=' initializer-clause\l824                      | attribute-specifier-seq • \"this\" decl-specifier-seq '=' initializer-clause\l826                      | attribute-specifier-seq • decl-specifier-seq abstract-declarator '=' initializer-clause\l828                      | attribute-specifier-seq • \"this\" decl-specifier-seq abstract-declarator '=' initializer-clause\l"]
  478 -> 161 [style=solid label="IDENTIFIER"]
  478 -> 4 [style=solid label="\"alignas\""]
  478 -> 9 [style=solid label="\"::\""]
  478 -> 10 [style=solid label="'['"]
  478 -> 11 [style=solid label="\"virtual\""]
  478 -> 12 [style=solid label="\"class\""]
  478 -> 13 [style=solid label="\"struct\""]
  478 -> 14 [style=solid label="\"union\""]
  478 -> 18 [style=solid label="\"const\""]
  478 -> 19 [style=solid label="\"volatile\""]
  478 -> 20 [style=solid label="\"friend\""]
  478 -> 21 [style=solid label="\"typedef\""]
  478 -> 22 [style=solid label="\"constexpr\""]
  478 -> 23 [style=solid label="\"consteval\""]
  478 -> 24 [style=solid label="\"constinit\""]
  478 -> 263 [style=solid label="\"inline\""]
  478 -> 26 [style=solid label="\"decltype\""]
  478 -> 27 [style=solid label="\"enum\""]
  478 -> 264 [style=solid label="\"extern\""]
  478 -> 29 [style=solid label="\"explicit\""]
  478 -> 970 [style=solid label="\"this\""]
  478 -> 37 [style=solid label="\"auto\""]
  478 -> 38 [style=solid label="\"char\""]
  478 -> 39 [style=solid label="\"char8_t\""]
  478 -> 40 [style=solid label="\"char16_t\""]
  478 -> 41 [style=solid label="\"char32_t\""]
  478 -> 42 [style=solid label="\"wchar_t\""]
  478 -> 43 [style=solid label="\"bool\""]
  478 -> 44 [style=solid label="\"short\""]
  478 -> 45 [style=solid label="\"int\""]
  478 -> 46 [style=solid label="\"long\""]
  478 -> 47 [style=solid label="\"signed\""]
  478 -> 48 [style=solid label="\"unsigned\""]
  478 -> 49 [style=solid label="\"float\""]
  478 -> 50 [style=solid label="\"double\""]
  478 -> 51 [style=solid label="\"void\""]
  478 -> 53 [style=solid label="\"static\""]
  478 -> 54 [style=solid label="\"thread_local\""]
  478 -> 55 [style=solid label="\"mutable\""]
  478 -> 56 [style=solid label="\"typename\""]
  478 -> 58 [style=dashed label="alignment-specifier"]
  478 -> 265 [style=dashed label="attribute-specifier"]
  478 -> 64 [style=dashed label="class-head"]
  478 -> 65 [style=dashed label="class-key"]
  478 -> 66 [style=dashed label="class-name"]
  478 -> 67 [style=dashed label="class-specifier"]
  478 -> 68 [style=dashed label="concept-name"]
  478 -> 70 [style=dashed label="cv-qualifier"]
  478 -> 71 [style=dashed label="decl-specifier"]
  478 -> 971 [style=dashed label="decl-specifier-seq"]
  478 -> 77 [style=dashed label="decltype-specifier"]
  478 -> 79 [style=dashed label="defining-type-specifier"]
  478 -> 80 [style=dashed label="elaborated-enum-specifier"]
  478 -> 81 [style=dashed label="elaborated-type-specifier"]
  478 -> 83 [style=dashed label="enum-head"]
  478 -> 268 [style=dashed label="enum-key"]
  478 -> 85 [style=dashed label="enum-name"]
  478 -> 86 [style=dashed label="enum-specifier"]
  478 -> 269 [style=dashed label="explicit-specifier"]
  478 -> 92 [style=dashed label="function-specifier"]
  478 -> 100 [style=dashed label="namespace-alias"]
  478 -> 103 [style=dashed label="namespace-name"]
  478 -> 213 [style=dashed label="nested-name-specifier"]
  478 -> 110 [style=dashed label="placeholder-type-specifier"]
  478 -> 142 [style=dashed label="simple-template-id"]
  478 -> 116 [style=dashed label="simple-type-specifier"]
  478 -> 118 [style=dashed label="storage-class-specifier"]
  478 -> 216 [style=dashed label="template-name"]
  478 -> 124 [style=dashed label="type-constraint"]
  478 -> 125 [style=dashed label="type-name"]
  478 -> 126 [style=dashed label="type-specifier"]
  478 -> 127 [style=dashed label="typedef-name"]
  478 -> 128 [style=dashed label="typename-specifier"]
  479 [label="State 479\n\l807 parameter-declaration: decl-specifier-seq • declarator\l811                      | decl-specifier-seq • declarator '=' initializer-clause\l815                      | decl-specifier-seq •\l819                      | decl-specifier-seq • abstract-declarator\l823                      | decl-specifier-seq • '=' initializer-clause\l827                      | decl-specifier-seq • abstract-declarator '=' initializer-clause\l"]
  479 -> 148 [style=solid label="IDENTIFIER"]
  479 -> 972 [style=solid label="'='"]
  479 -> 973 [style=solid label="'('"]
  479 -> 974 [style=solid label="\"...\""]
  479 -> 7 [style=solid label="'&'"]
  479 -> 9 [style=solid label="\"::\""]
  479 -> 945 [style=solid label="'['"]
  479 -> 16 [style=solid label="\"&&\""]
  479 -> 17 [style=solid label="\"operator\""]
  479 -> 135 [style=solid label="\"decltype\""]
  479 -> 32 [style=solid label="'*'"]
  479 -> 36 [style=solid label="'~'"]
  479 -> 975 [style=dashed label="abstract-declarator"]
  479 -> 947 [style=dashed label="abstract-pack-declarator"]
  479 -> 66 [style=dashed label="class-name"]
  479 -> 69 [style=dashed label="conversion-function-id"]
  479 -> 976 [style=dashed label="declarator"]
  479 -> 76 [style=dashed label="declarator-id"]
  479 -> 139 [style=dashed label="decltype-specifier"]
  479 -> 85 [style=dashed label="enum-name"]
  479 -> 94 [style=dashed label="id-expression"]
  479 -> 96 [style=dashed label="literal-operator-id"]
  479 -> 100 [style=dashed label="namespace-alias"]
  479 -> 103 [style=dashed label="namespace-name"]
  479 -> 149 [style=dashed label="nested-name-specifier"]
  479 -> 948 [style=dashed label="noptr-abstract-declarator"]
  479 -> 949 [style=dashed label="noptr-abstract-pack-declarator"]
  479 -> 107 [style=dashed label="noptr-declarator"]
  479 -> 109 [style=dashed label="operator-function-id"]
  479 -> 950 [style=dashed label="parameters-and-qualifiers"]
  479 -> 951 [style=dashed label="ptr-abstract-declarator"]
  479 -> 111 [style=dashed label="ptr-declarator"]
  479 -> 977 [style=dashed label="ptr-operator"]
  479 -> 113 [style=dashed label="qualified-id"]
  479 -> 115 [style=dashed label="simple-template-id"]
  479 -> 121 [style=dashed label="template-id"]
  479 -> 143 [style=dashed label="template-name"]
  479 -> 144 [style=dashed label="type-name"]
  479 -> 127 [style=dashed label="typedef-name"]
  479 -> 130 [style=dashed label="unqualified-id"]
  479 -> "479R815d" [label="[\"...\"]", style=solid]
 "479R815d" [label="R815", fillcolor=5, shape=diamond, style=filled]
  479 -> "479R815" [style=solid]
 "479R815" [label="R815", fillcolor=3, shape=diamond, style=filled]
  480 [label="State 480\n\l1068 template-parameter: parameter-declaration •\l"]
  480 -> "480R1068" [style=solid]
 "480R1068" [label="R1068", fillcolor=3, shape=diamond, style=filled]
  481 [label="State 481\n\l1107 type-parameter: template-head • type-parameter-key\l1108               | template-head • type-parameter-key \"...\"\l1109               | template-head • type-parameter-key IDENTIFIER\l1110               | template-head • type-parameter-key \"...\" IDENTIFIER\l1111               | template-head • type-parameter-key '=' id-expression\l1112               | template-head • type-parameter-key IDENTIFIER '=' id-expression\l"]
  481 -> 978 [style=solid label="\"class\""]
  481 -> 979 [style=solid label="\"typename\""]
  481 -> 980 [style=dashed label="type-parameter-key"]
  482 [label="State 482\n\l1069 template-parameter-list: template-parameter •\l"]
  482 -> "482R1069" [style=solid]
 "482R1069" [label="R1069", fillcolor=3, shape=diamond, style=filled]
  483 [label="State 483\n\l1059 template-head: \"template\" '<' template-parameter-list • '>'\l1060              | \"template\" '<' template-parameter-list • '>' requires-clause\l1070 template-parameter-list: template-parameter-list • ',' template-parameter\l"]
  483 -> 981 [style=solid label="','"]
  483 -> 982 [style=solid label="'>'"]
  484 [label="State 484\n\l852 placeholder-type-specifier: type-constraint • \"auto\"\l854                           | type-constraint • \"decltype\" '(' \"auto\" ')'\l1101 type-parameter: type-constraint •\l1102               | type-constraint • \"...\"\l1103               | type-constraint • IDENTIFIER\l1104               | type-constraint • \"...\" IDENTIFIER\l1105               | type-constraint • '=' type-id\l1106               | type-constraint • IDENTIFIER '=' type-id\l"]
  484 -> 983 [style=solid label="IDENTIFIER"]
  484 -> 984 [style=solid label="'='"]
  484 -> 985 [style=solid label="\"...\""]
  484 -> 344 [style=solid label="\"decltype\""]
  484 -> 345 [style=solid label="\"auto\""]
  484 -> "484R1101" [style=solid]
 "484R1101" [label="R1101", fillcolor=3, shape=diamond, style=filled]
  485 [label="State 485\n\l1067 template-parameter: type-parameter •\l"]
  485 -> "485R1067" [style=solid]
 "485R1067" [label="R1067", fillcolor=3, shape=diamond, style=filled]
  486 [label="State 486\n\l1095 type-parameter: type-parameter-key •\l1096               | type-parameter-key • \"...\"\l1097               | type-parameter-key • IDENTIFIER\l1098               | type-parameter-key • \"...\" IDENTIFIER\l1099               | type-parameter-key • '=' type-id\l1100               | type-parameter-key • IDENTIFIER '=' type-id\l"]
  486 -> 986 [style=solid label="IDENTIFIER"]
  486 -> 987 [style=solid label="'='"]
  486 -> 988 [style=solid label="\"...\""]
  486 -> "486R1095" [style=solid]
 "486R1095" [label="R1095", fillcolor=3, shape=diamond, style=filled]
  487 [label="State 487\n\l767 overloadable-operator: '(' ')' •\l"]
  487 -> "487R767" [style=solid]
 "487R767" [label="R767", fillcolor=3, shape=diamond, style=filled]
  488 [label="State 488\n\l768 overloadable-operator: '[' ']' •\l"]
  488 -> "488R768" [style=solid]
 "488R768" [label="R768", fillcolor=3, shape=diamond, style=filled]
  489 [label="State 489\n\l765 overloadable-operator: \"delete\" '[' • ']'\l"]
  489 -> 989 [style=solid label="']'"]
  490 [label="State 490\n\l 84 basic-s-char: EXCEPT_THE_QUOTATION_MARK_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER •\l"]
  490 -> "490R84" [style=solid]
 "490R84" [label="R84", fillcolor=3, shape=diamond, style=filled]
  491 [label="State 491\n\l167 conditional-escape-sequence: '\\\\' • conditional-escape-sequence-char\l749 octal-escape-sequence: '\\\\' • octal-digit\l750                      | '\\\\' • octal-digit octal-digit\l751                      | '\\\\' • octal-digit octal-digit octal-digit\l984 simple-escape-sequence: '\\\\' • simple-escape-sequence-char\l"]
  491 -> 990 [style=solid label="NOT_AN_OCTAL_DIGIT_A_SIMPLE_ESCAPE_SEQUENCE_CHAR_OR_THE_CHARACTERS_U_U_OR_X"]
  491 -> 912 [style=solid label="'0'"]
  491 -> 913 [style=solid label="'1'"]
  491 -> 991 [style=solid label="'\\''"]
  491 -> 992 [style=solid label="'\\\\'"]
  491 -> 993 [style=solid label="'?'"]
  491 -> 915 [style=solid label="'2'"]
  491 -> 916 [style=solid label="'3'"]
  491 -> 917 [style=solid label="'4'"]
  491 -> 918 [style=solid label="'5'"]
  491 -> 919 [style=solid label="'6'"]
  491 -> 920 [style=solid label="'7'"]
  491 -> 994 [style=solid label="'f'"]
  491 -> 995 [style=solid label="'\"'"]
  491 -> 996 [style=solid label="'a'"]
  491 -> 997 [style=solid label="'b'"]
  491 -> 998 [style=solid label="'n'"]
  491 -> 999 [style=solid label="'r'"]
  491 -> 1000 [style=solid label="'t'"]
  491 -> 1001 [style=solid label="'v'"]
  491 -> 1002 [style=dashed label="conditional-escape-sequence-char"]
  491 -> 1003 [style=dashed label="octal-digit"]
  491 -> 1004 [style=dashed label="simple-escape-sequence-char"]
  492 [label="State 492\n\l1045 string-literal: '\"' '\"' •\l"]
  492 -> "492R1045" [style=solid]
 "492R1045" [label="R1045", fillcolor=3, shape=diamond, style=filled]
  493 [label="State 493\n\l451 hexadecimal-escape-sequence: \"\\\\x\" • hexadecimal-digit\l"]
  493 -> 870 [style=solid label="'0'"]
  493 -> 871 [style=solid label="'1'"]
  493 -> 873 [style=solid label="'2'"]
  493 -> 874 [style=solid label="'3'"]
  493 -> 875 [style=solid label="'4'"]
  493 -> 876 [style=solid label="'5'"]
  493 -> 877 [style=solid label="'6'"]
  493 -> 878 [style=solid label="'7'"]
  493 -> 879 [style=solid label="'8'"]
  493 -> 880 [style=solid label="'9'"]
  493 -> 881 [style=solid label="'e'"]
  493 -> 882 [style=solid label="'E'"]
  493 -> 883 [style=solid label="'f'"]
  493 -> 884 [style=solid label="'F'"]
  493 -> 885 [style=solid label="'a'"]
  493 -> 886 [style=solid label="'b'"]
  493 -> 887 [style=solid label="'c'"]
  493 -> 888 [style=solid label="'d'"]
  493 -> 889 [style=solid label="'A'"]
  493 -> 890 [style=solid label="'B'"]
  493 -> 891 [style=solid label="'C'"]
  493 -> 892 [style=solid label="'D'"]
  493 -> 1005 [style=dashed label="hexadecimal-digit"]
  494 [label="State 494\n\l1148 universal-character-name: \"\\\\u\" • hex-quad\l"]
  494 -> 870 [style=solid label="'0'"]
  494 -> 871 [style=solid label="'1'"]
  494 -> 873 [style=solid label="'2'"]
  494 -> 874 [style=solid label="'3'"]
  494 -> 875 [style=solid label="'4'"]
  494 -> 876 [style=solid label="'5'"]
  494 -> 877 [style=solid label="'6'"]
  494 -> 878 [style=solid label="'7'"]
  494 -> 879 [style=solid label="'8'"]
  494 -> 880 [style=solid label="'9'"]
  494 -> 881 [style=solid label="'e'"]
  494 -> 882 [style=solid label="'E'"]
  494 -> 883 [style=solid label="'f'"]
  494 -> 884 [style=solid label="'F'"]
  494 -> 885 [style=solid label="'a'"]
  494 -> 886 [style=solid label="'b'"]
  494 -> 887 [style=solid label="'c'"]
  494 -> 888 [style=solid label="'d'"]
  494 -> 889 [style=solid label="'A'"]
  494 -> 890 [style=solid label="'B'"]
  494 -> 891 [style=solid label="'C'"]
  494 -> 892 [style=solid label="'D'"]
  494 -> 1006 [style=dashed label="hex-quad"]
  494 -> 1007 [style=dashed label="hexadecimal-digit"]
  495 [label="State 495\n\l1149 universal-character-name: \"\\\\U\" • hex-quad hex-quad\l"]
  495 -> 870 [style=solid label="'0'"]
  495 -> 871 [style=solid label="'1'"]
  495 -> 873 [style=solid label="'2'"]
  495 -> 874 [style=solid label="'3'"]
  495 -> 875 [style=solid label="'4'"]
  495 -> 876 [style=solid label="'5'"]
  495 -> 877 [style=solid label="'6'"]
  495 -> 878 [style=solid label="'7'"]
  495 -> 879 [style=solid label="'8'"]
  495 -> 880 [style=solid label="'9'"]
  495 -> 881 [style=solid label="'e'"]
  495 -> 882 [style=solid label="'E'"]
  495 -> 883 [style=solid label="'f'"]
  495 -> 884 [style=solid label="'F'"]
  495 -> 885 [style=solid label="'a'"]
  495 -> 886 [style=solid label="'b'"]
  495 -> 887 [style=solid label="'c'"]
  495 -> 888 [style=solid label="'d'"]
  495 -> 889 [style=solid label="'A'"]
  495 -> 890 [style=solid label="'B'"]
  495 -> 891 [style=solid label="'C'"]
  495 -> 892 [style=solid label="'D'"]
  495 -> 1008 [style=dashed label="hex-quad"]
  495 -> 1007 [style=dashed label="hexadecimal-digit"]
  496 [label="State 496\n\l947 s-char: basic-s-char •\l"]
  496 -> "496R947" [style=solid]
 "496R947" [label="R947", fillcolor=3, shape=diamond, style=filled]
  497 [label="State 497\n\l312 escape-sequence: conditional-escape-sequence •\l"]
  497 -> "497R312" [style=solid]
 "497R312" [label="R312", fillcolor=3, shape=diamond, style=filled]
  498 [label="State 498\n\l948 s-char: escape-sequence •\l"]
  498 -> "498R948" [style=solid]
 "498R948" [label="R948", fillcolor=3, shape=diamond, style=filled]
  499 [label="State 499\n\l452 hexadecimal-escape-sequence: hexadecimal-escape-sequence • hexadecimal-digit\l740 numeric-escape-sequence: hexadecimal-escape-sequence •\l"]
  499 -> 870 [style=solid label="'0'"]
  499 -> 871 [style=solid label="'1'"]
  499 -> 873 [style=solid label="'2'"]
  499 -> 874 [style=solid label="'3'"]
  499 -> 875 [style=solid label="'4'"]
  499 -> 876 [style=solid label="'5'"]
  499 -> 877 [style=solid label="'6'"]
  499 -> 878 [style=solid label="'7'"]
  499 -> 879 [style=solid label="'8'"]
  499 -> 880 [style=solid label="'9'"]
  499 -> 881 [style=solid label="'e'"]
  499 -> 882 [style=solid label="'E'"]
  499 -> 883 [style=solid label="'f'"]
  499 -> 884 [style=solid label="'F'"]
  499 -> 885 [style=solid label="'a'"]
  499 -> 886 [style=solid label="'b'"]
  499 -> 887 [style=solid label="'c'"]
  499 -> 888 [style=solid label="'d'"]
  499 -> 889 [style=solid label="'A'"]
  499 -> 890 [style=solid label="'B'"]
  499 -> 891 [style=solid label="'C'"]
  499 -> 892 [style=solid label="'D'"]
  499 -> 1009 [style=dashed label="hexadecimal-digit"]
  499 -> "499R740" [style=solid]
 "499R740" [label="R740", fillcolor=3, shape=diamond, style=filled]
  500 [label="State 500\n\l311 escape-sequence: numeric-escape-sequence •\l"]
  500 -> "500R311" [style=solid]
 "500R311" [label="R311", fillcolor=3, shape=diamond, style=filled]
  501 [label="State 501\n\l739 numeric-escape-sequence: octal-escape-sequence •\l"]
  501 -> "501R739" [style=solid]
 "501R739" [label="R739", fillcolor=3, shape=diamond, style=filled]
  502 [label="State 502\n\l950 s-char-sequence: s-char •\l"]
  502 -> "502R950" [style=solid]
 "502R950" [label="R950", fillcolor=3, shape=diamond, style=filled]
  503 [label="State 503\n\l951 s-char-sequence: s-char-sequence • s-char\l1047 string-literal: '\"' s-char-sequence • '\"'\l"]
  503 -> 490 [style=solid label="EXCEPT_THE_QUOTATION_MARK_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER"]
  503 -> 491 [style=solid label="'\\\\'"]
  503 -> 1010 [style=solid label="'\"'"]
  503 -> 493 [style=solid label="\"\\\\x\""]
  503 -> 494 [style=solid label="\"\\\\u\""]
  503 -> 495 [style=solid label="\"\\\\U\""]
  503 -> 496 [style=dashed label="basic-s-char"]
  503 -> 497 [style=dashed label="conditional-escape-sequence"]
  503 -> 498 [style=dashed label="escape-sequence"]
  503 -> 499 [style=dashed label="hexadecimal-escape-sequence"]
  503 -> 500 [style=dashed label="numeric-escape-sequence"]
  503 -> 501 [style=dashed label="octal-escape-sequence"]
  503 -> 1011 [style=dashed label="s-char"]
  503 -> 504 [style=dashed label="simple-escape-sequence"]
  503 -> 505 [style=dashed label="universal-character-name"]
  504 [label="State 504\n\l310 escape-sequence: simple-escape-sequence •\l"]
  504 -> "504R310" [style=solid]
 "504R310" [label="R310", fillcolor=3, shape=diamond, style=filled]
  505 [label="State 505\n\l949 s-char: universal-character-name •\l"]
  505 -> "505R949" [style=solid]
 "505R949" [label="R949", fillcolor=3, shape=diamond, style=filled]
  506 [label="State 506\n\l764 overloadable-operator: \"new\" '[' • ']'\l"]
  506 -> 1012 [style=solid label="']'"]
  507 [label="State 507\n\l920 raw-string: '\"' • '(' ')' '\"'\l921           | '\"' • d-char-sequence '(' ')' '\"'\l922           | '\"' • '(' r-char-sequence ')' '\"'\l923           | '\"' • d-char-sequence '(' r-char-sequence ')' '\"'\l924           | '\"' • '(' ')' d-char-sequence '\"'\l925           | '\"' • d-char-sequence '(' ')' d-char-sequence '\"'\l926           | '\"' • '(' r-char-sequence ')' d-char-sequence '\"'\l927           | '\"' • d-char-sequence '(' r-char-sequence ')' d-char-sequence '\"'\l"]
  507 -> 1013 [style=solid label="EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE"]
  507 -> 1014 [style=solid label="'('"]
  507 -> 1015 [style=dashed label="d-char"]
  507 -> 1016 [style=dashed label="d-char-sequence"]
  508 [label="State 508\n\l1049 string-literal: 'R' raw-string •\l"]
  508 -> "508R1049" [style=solid]
 "508R1049" [label="R1049", fillcolor=3, shape=diamond, style=filled]
  509 [label="State 509\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l268 elaborated-type-specifier: class-key attribute-specifier-seq • IDENTIFIER\l270                          | class-key attribute-specifier-seq • nested-name-specifier IDENTIFIER\l"]
  509 -> 627 [style=solid label="IDENTIFIER"]
  509 -> 4 [style=solid label="\"alignas\""]
  509 -> 9 [style=solid label="\"::\""]
  509 -> 10 [style=solid label="'['"]
  509 -> 135 [style=solid label="\"decltype\""]
  509 -> 58 [style=dashed label="alignment-specifier"]
  509 -> 265 [style=dashed label="attribute-specifier"]
  509 -> 66 [style=dashed label="class-name"]
  509 -> 139 [style=dashed label="decltype-specifier"]
  509 -> 85 [style=dashed label="enum-name"]
  509 -> 100 [style=dashed label="namespace-alias"]
  509 -> 103 [style=dashed label="namespace-name"]
  509 -> 1017 [style=dashed label="nested-name-specifier"]
  509 -> 142 [style=dashed label="simple-template-id"]
  509 -> 143 [style=dashed label="template-name"]
  509 -> 144 [style=dashed label="type-name"]
  509 -> 127 [style=dashed label="typedef-name"]
  510 [label="State 510\n\l269 elaborated-type-specifier: class-key nested-name-specifier • IDENTIFIER\l272                          | class-key nested-name-specifier • simple-template-id\l273                          | class-key nested-name-specifier • \"template\" simple-template-id\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l"]
  510 -> 1018 [style=solid label="IDENTIFIER"]
  510 -> 635 [style=solid label="\"template\""]
  510 -> 1019 [style=dashed label="simple-template-id"]
  510 -> 143 [style=dashed label="template-name"]
  511 [label="State 511\n\l1044 string-literal: encoding-prefix '\"' • '\"'\l1046               | encoding-prefix '\"' • s-char-sequence '\"'\l"]
  511 -> 490 [style=solid label="EXCEPT_THE_QUOTATION_MARK_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER"]
  511 -> 491 [style=solid label="'\\\\'"]
  511 -> 1020 [style=solid label="'\"'"]
  511 -> 493 [style=solid label="\"\\\\x\""]
  511 -> 494 [style=solid label="\"\\\\u\""]
  511 -> 495 [style=solid label="\"\\\\U\""]
  511 -> 496 [style=dashed label="basic-s-char"]
  511 -> 497 [style=dashed label="conditional-escape-sequence"]
  511 -> 498 [style=dashed label="escape-sequence"]
  511 -> 499 [style=dashed label="hexadecimal-escape-sequence"]
  511 -> 500 [style=dashed label="numeric-escape-sequence"]
  511 -> 501 [style=dashed label="octal-escape-sequence"]
  511 -> 502 [style=dashed label="s-char"]
  511 -> 1021 [style=dashed label="s-char-sequence"]
  511 -> 504 [style=dashed label="simple-escape-sequence"]
  511 -> 505 [style=dashed label="universal-character-name"]
  512 [label="State 512\n\l1048 string-literal: encoding-prefix 'R' • raw-string\l"]
  512 -> 507 [style=solid label="'\"'"]
  512 -> 1022 [style=dashed label="raw-string"]
  513 [label="State 513\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l"]
  513 -> 726 [style=solid label="\"::\""]
  513 -> "513R145d" [label="[\"::\"]", style=solid]
 "513R145d" [label="R145", fillcolor=5, shape=diamond, style=filled]
  513 -> "513R145" [style=solid]
 "513R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  513 -> "513R163d" [label="[IDENTIFIER, '=', \"...\", ',', \"decltype\", '<', '>', \"auto\"]", style=solid]
 "513R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  513 -> "513R297d" [label="[IDENTIFIER, '+', '-', \"using\", '=', ';', \"alignas\", '(', ')', \"...\", '&', \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"::\", '[', ']', ':', '{', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"final\", \"<=>\", \"noexcept\", \"concept\", '?', \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"->\", '.', \"enum\", \"==\", \"!=\", '^', \"extern\", '<', '>', \"explicit\", \"export\", \"export-keyword\", '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", \"requires\", '~', \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\", \"override\"]", style=solid]
 "513R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  513 -> "513R1066d" [label="[IDENTIFIER, '+', '-', \"using\", '=', ';', \"alignas\", '(', ')', \"...\", '&', \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"::\", '[', ']', ':', '{', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"final\", \"<=>\", \"noexcept\", \"concept\", '?', \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"->\", '.', \"enum\", \"==\", \"!=\", '^', \"extern\", '<', '>', \"explicit\", \"export\", \"export-keyword\", '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", \"requires\", '~', \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\", \"override\"]", style=solid]
 "513R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  513 -> "513R1124d" [label="[IDENTIFIER, '+', '-', \"using\", '=', ';', \"alignas\", '(', ')', \"...\", '&', \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"::\", '[', ']', ':', '{', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"final\", \"<=>\", \"noexcept\", \"concept\", '?', \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"->\", '.', \"enum\", \"==\", \"!=\", '^', \"extern\", '<', '>', \"explicit\", \"export\", \"export-keyword\", '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", \"requires\", '~', \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\", \"override\"]", style=solid]
 "513R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  514 [label="State 514\n\l665 nested-name-specifier: nested-name-specifier \"template\" • simple-template-id \"::\"\l1001 simple-type-specifier: nested-name-specifier \"template\" • simple-template-id\l"]
  514 -> 315 [style=solid label="IDENTIFIER"]
  514 -> 1023 [style=dashed label="simple-template-id"]
  514 -> 143 [style=dashed label="template-name"]
  515 [label="State 515\n\l146 class-name: simple-template-id •\l664 nested-name-specifier: nested-name-specifier simple-template-id • \"::\"\l1125 typedef-name: simple-template-id •\l"]
  515 -> 733 [style=solid label="\"::\""]
  515 -> "515R146d" [label="[\"::\"]", style=solid]
 "515R146d" [label="R146", fillcolor=5, shape=diamond, style=filled]
  515 -> "515R146" [style=solid]
 "515R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  515 -> "515R1125d" [label="[IDENTIFIER, '+', '-', \"using\", '=', ';', \"alignas\", '(', ')', \"...\", '&', \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"::\", '[', ']', ':', '{', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"final\", \"<=>\", \"noexcept\", \"concept\", '?', \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"->\", '.', \"enum\", \"==\", \"!=\", '^', \"extern\", '<', '>', \"explicit\", \"export\", \"export-keyword\", '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", \"requires\", '~', \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\", \"override\"]", style=solid]
 "515R1125d" [label="R1125", fillcolor=5, shape=diamond, style=filled]
  516 [label="State 516\n\l760 operator-function-id: \"operator\" overloadable-operator '<' • '>'\l761                     | \"operator\" overloadable-operator '<' • template-argument-list '>'\l"]
  516 -> 1 [style=solid label="IDENTIFIER"]
  516 -> 361 [style=solid label="'+'"]
  516 -> 362 [style=solid label="'-'"]
  516 -> 363 [style=solid label="'('"]
  516 -> 364 [style=solid label="'&'"]
  516 -> 365 [style=solid label="\"::\""]
  516 -> 366 [style=solid label="'['"]
  516 -> 367 [style=solid label="\"co_await\""]
  516 -> 368 [style=solid label="'0'"]
  516 -> 369 [style=solid label="'1'"]
  516 -> 370 [style=solid label="\"0b\""]
  516 -> 371 [style=solid label="\"0B\""]
  516 -> 372 [style=solid label="'\\''"]
  516 -> 373 [style=solid label="\"false\""]
  516 -> 374 [style=solid label="\"true\""]
  516 -> 12 [style=solid label="\"class\""]
  516 -> 13 [style=solid label="\"struct\""]
  516 -> 14 [style=solid label="\"union\""]
  516 -> 375 [style=solid label="\"noexcept\""]
  516 -> 17 [style=solid label="\"operator\""]
  516 -> 18 [style=solid label="\"const\""]
  516 -> 19 [style=solid label="\"volatile\""]
  516 -> 26 [style=solid label="\"decltype\""]
  516 -> 376 [style=solid label="\"delete\""]
  516 -> 377 [style=solid label="'.'"]
  516 -> 378 [style=solid label="'2'"]
  516 -> 379 [style=solid label="'3'"]
  516 -> 380 [style=solid label="'4'"]
  516 -> 381 [style=solid label="'5'"]
  516 -> 382 [style=solid label="'6'"]
  516 -> 383 [style=solid label="'7'"]
  516 -> 384 [style=solid label="'8'"]
  516 -> 385 [style=solid label="'9'"]
  516 -> 136 [style=solid label="\"enum\""]
  516 -> 185 [style=solid label="\"u8\""]
  516 -> 186 [style=solid label="'u'"]
  516 -> 187 [style=solid label="'U'"]
  516 -> 188 [style=solid label="'L'"]
  516 -> 1024 [style=solid label="'>'"]
  516 -> 386 [style=solid label="'*'"]
  516 -> 203 [style=solid label="'\"'"]
  516 -> 387 [style=solid label="\"0x\""]
  516 -> 388 [style=solid label="\"0X\""]
  516 -> 389 [style=solid label="\"requires\""]
  516 -> 390 [style=solid label="\"new\""]
  516 -> 391 [style=solid label="'~'"]
  516 -> 392 [style=solid label="'!'"]
  516 -> 393 [style=solid label="\"++\""]
  516 -> 394 [style=solid label="\"--\""]
  516 -> 395 [style=solid label="\"this\""]
  516 -> 37 [style=solid label="\"auto\""]
  516 -> 396 [style=solid label="\"nullptr\""]
  516 -> 397 [style=solid label="\"dynamic_cast\""]
  516 -> 398 [style=solid label="\"static_cast\""]
  516 -> 399 [style=solid label="\"reinterpret_cast\""]
  516 -> 400 [style=solid label="\"const_cast\""]
  516 -> 401 [style=solid label="\"typeid\""]
  516 -> 38 [style=solid label="\"char\""]
  516 -> 39 [style=solid label="\"char8_t\""]
  516 -> 40 [style=solid label="\"char16_t\""]
  516 -> 41 [style=solid label="\"char32_t\""]
  516 -> 42 [style=solid label="\"wchar_t\""]
  516 -> 43 [style=solid label="\"bool\""]
  516 -> 44 [style=solid label="\"short\""]
  516 -> 45 [style=solid label="\"int\""]
  516 -> 46 [style=solid label="\"long\""]
  516 -> 47 [style=solid label="\"signed\""]
  516 -> 48 [style=solid label="\"unsigned\""]
  516 -> 49 [style=solid label="\"float\""]
  516 -> 50 [style=solid label="\"double\""]
  516 -> 51 [style=solid label="\"void\""]
  516 -> 209 [style=solid label="'R'"]
  516 -> 56 [style=solid label="\"typename\""]
  516 -> 402 [style=solid label="\"sizeof\""]
  516 -> 403 [style=solid label="\"alignof\""]
  516 -> 404 [style=dashed label="additive-expression"]
  516 -> 405 [style=dashed label="and-expression"]
  516 -> 406 [style=dashed label="await-expression"]
  516 -> 407 [style=dashed label="binary-literal"]
  516 -> 408 [style=dashed label="boolean-literal"]
  516 -> 409 [style=dashed label="cast-expression"]
  516 -> 410 [style=dashed label="character-literal"]
  516 -> 210 [style=dashed label="class-key"]
  516 -> 66 [style=dashed label="class-name"]
  516 -> 411 [style=dashed label="compare-expression"]
  516 -> 68 [style=dashed label="concept-name"]
  516 -> 412 [style=dashed label="conditional-expression"]
  516 -> 639 [style=dashed label="constant-expression"]
  516 -> 69 [style=dashed label="conversion-function-id"]
  516 -> 70 [style=dashed label="cv-qualifier"]
  516 -> 414 [style=dashed label="decimal-floating-point-literal"]
  516 -> 415 [style=dashed label="decimal-literal"]
  516 -> 77 [style=dashed label="decltype-specifier"]
  516 -> 416 [style=dashed label="delete-expression"]
  516 -> 417 [style=dashed label="digit"]
  516 -> 418 [style=dashed label="digit-sequence"]
  516 -> 80 [style=dashed label="elaborated-enum-specifier"]
  516 -> 81 [style=dashed label="elaborated-type-specifier"]
  516 -> 419 [style=dashed label="encoding-prefix"]
  516 -> 85 [style=dashed label="enum-name"]
  516 -> 420 [style=dashed label="equality-expression"]
  516 -> 421 [style=dashed label="exclusive-or-expression"]
  516 -> 422 [style=dashed label="floating-point-literal"]
  516 -> 423 [style=dashed label="fold-expression"]
  516 -> 424 [style=dashed label="fractional-constant"]
  516 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  516 -> 426 [style=dashed label="hexadecimal-literal"]
  516 -> 427 [style=dashed label="hexadecimal-prefix"]
  516 -> 640 [style=dashed label="id-expression"]
  516 -> 429 [style=dashed label="inclusive-or-expression"]
  516 -> 430 [style=dashed label="integer-literal"]
  516 -> 431 [style=dashed label="lambda-expression"]
  516 -> 432 [style=dashed label="lambda-introducer"]
  516 -> 433 [style=dashed label="literal"]
  516 -> 96 [style=dashed label="literal-operator-id"]
  516 -> 434 [style=dashed label="logical-and-expression"]
  516 -> 435 [style=dashed label="logical-or-expression"]
  516 -> 436 [style=dashed label="multiplicative-expression"]
  516 -> 100 [style=dashed label="namespace-alias"]
  516 -> 103 [style=dashed label="namespace-name"]
  516 -> 437 [style=dashed label="nested-name-specifier"]
  516 -> 438 [style=dashed label="new-expression"]
  516 -> 439 [style=dashed label="noexcept-expression"]
  516 -> 440 [style=dashed label="nonzero-digit"]
  516 -> 441 [style=dashed label="octal-literal"]
  516 -> 109 [style=dashed label="operator-function-id"]
  516 -> 110 [style=dashed label="placeholder-type-specifier"]
  516 -> 442 [style=dashed label="pm-expression"]
  516 -> 443 [style=dashed label="pointer-literal"]
  516 -> 444 [style=dashed label="postfix-expression"]
  516 -> 445 [style=dashed label="primary-expression"]
  516 -> 113 [style=dashed label="qualified-id"]
  516 -> 446 [style=dashed label="relational-expression"]
  516 -> 447 [style=dashed label="requires-expression"]
  516 -> 448 [style=dashed label="shift-expression"]
  516 -> 115 [style=dashed label="simple-template-id"]
  516 -> 449 [style=dashed label="simple-type-specifier"]
  516 -> 450 [style=dashed label="string-literal"]
  516 -> 641 [style=dashed label="template-argument"]
  516 -> 1025 [style=dashed label="template-argument-list"]
  516 -> 121 [style=dashed label="template-id"]
  516 -> 216 [style=dashed label="template-name"]
  516 -> 124 [style=dashed label="type-constraint"]
  516 -> 643 [style=dashed label="type-id"]
  516 -> 125 [style=dashed label="type-name"]
  516 -> 217 [style=dashed label="type-specifier"]
  516 -> 452 [style=dashed label="type-specifier-seq"]
  516 -> 127 [style=dashed label="typedef-name"]
  516 -> 453 [style=dashed label="typename-specifier"]
  516 -> 454 [style=dashed label="unary-expression"]
  516 -> 455 [style=dashed label="unary-operator"]
  516 -> 130 [style=dashed label="unqualified-id"]
  516 -> 456 [style=dashed label="user-defined-character-literal"]
  516 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  516 -> 458 [style=dashed label="user-defined-integer-literal"]
  516 -> 459 [style=dashed label="user-defined-literal"]
  516 -> 460 [style=dashed label="user-defined-string-literal"]
  517 [label="State 517\n\l565 literal-operator-id: \"operator\" string-literal IDENTIFIER •\l1129 ud-suffix: IDENTIFIER •\l"]
  517 -> "517R565" [style=solid]
 "517R565" [label="R565", fillcolor=3, shape=diamond, style=filled]
  517 -> "517R1129d" [label="[IDENTIFIER, '+', '-', \"using\", '=', ';', \"alignas\", '(', ')', \"...\", '&', \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"::\", '[', ']', ':', '{', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"final\", \"<=>\", \"noexcept\", \"concept\", '?', \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"->\", '.', \"enum\", \"==\", \"!=\", '^', \"extern\", '<', '>', \"explicit\", \"export\", \"export-keyword\", '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", \"requires\", '~', \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\", \"override\"]", style=solid]
 "517R1129d" [label="R1129", fillcolor=5, shape=diamond, style=filled]
  518 [label="State 518\n\l1177 user-defined-string-literal: string-literal ud-suffix •\l"]
  518 -> "518R1177" [style=solid]
 "518R1177" [label="R1177", fillcolor=3, shape=diamond, style=filled]
  519 [label="State 519\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l1122 type-specifier-seq: type-specifier attribute-specifier-seq •\l"]
  519 -> 4 [style=solid label="\"alignas\""]
  519 -> 10 [style=solid label="'['"]
  519 -> 58 [style=dashed label="alignment-specifier"]
  519 -> 265 [style=dashed label="attribute-specifier"]
  519 -> "519R1122d" [label="[\"alignas\", '[']", style=solid]
 "519R1122d" [label="R1122", fillcolor=5, shape=diamond, style=filled]
  519 -> "519R1122" [style=solid]
 "519R1122" [label="R1122", fillcolor=3, shape=diamond, style=filled]
  520 [label="State 520\n\l1123 type-specifier-seq: type-specifier type-specifier-seq •\l"]
  520 -> "520R1123" [style=solid]
 "520R1123" [label="R1123", fillcolor=3, shape=diamond, style=filled]
  521 [label="State 521\n\l181 conversion-type-id: type-specifier-seq conversion-declarator •\l"]
  521 -> "521R181" [style=solid]
 "521R181" [label="R181", fillcolor=3, shape=diamond, style=filled]
  522 [label="State 522\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l905 ptr-operator: nested-name-specifier • '*'\l906             | nested-name-specifier • '*' attribute-specifier-seq\l907             | nested-name-specifier • '*' cv-qualifier-seq\l908             | nested-name-specifier • '*' attribute-specifier-seq cv-qualifier-seq\l"]
  522 -> 1026 [style=solid label="IDENTIFIER"]
  522 -> 355 [style=solid label="\"template\""]
  522 -> 327 [style=solid label="'*'"]
  522 -> 539 [style=dashed label="simple-template-id"]
  522 -> 143 [style=dashed label="template-name"]
  523 [label="State 523\n\l177 conversion-declarator: ptr-operator •\l178                      | ptr-operator • conversion-declarator\l"]
  523 -> 258 [style=solid label="IDENTIFIER"]
  523 -> 7 [style=solid label="'&'"]
  523 -> 9 [style=solid label="\"::\""]
  523 -> 16 [style=solid label="\"&&\""]
  523 -> 135 [style=solid label="\"decltype\""]
  523 -> 32 [style=solid label="'*'"]
  523 -> 66 [style=dashed label="class-name"]
  523 -> 1027 [style=dashed label="conversion-declarator"]
  523 -> 139 [style=dashed label="decltype-specifier"]
  523 -> 85 [style=dashed label="enum-name"]
  523 -> 100 [style=dashed label="namespace-alias"]
  523 -> 103 [style=dashed label="namespace-name"]
  523 -> 522 [style=dashed label="nested-name-specifier"]
  523 -> 523 [style=dashed label="ptr-operator"]
  523 -> 142 [style=dashed label="simple-template-id"]
  523 -> 143 [style=dashed label="template-name"]
  523 -> 144 [style=dashed label="type-name"]
  523 -> 127 [style=dashed label="typedef-name"]
  523 -> "523R177d" [label="[IDENTIFIER, '&', \"::\", \"&&\", \"decltype\", '*']", style=solid]
 "523R177d" [label="R177", fillcolor=5, shape=diamond, style=filled]
  523 -> "523R177" [style=solid]
 "523R177" [label="R177", fillcolor=3, shape=diamond, style=filled]
  524 [label="State 524\n\l647 named-namespace-definition: \"inline\" \"namespace\" IDENTIFIER • '{' namespace-body '}'\l"]
  524 -> 1028 [style=solid label="'{'"]
  525 [label="State 525\n\l1150 unnamed-namespace-definition: \"inline\" \"namespace\" '{' • namespace-body '}'\l"]
  525 -> 1 [style=solid label="IDENTIFIER"]
  525 -> 2 [style=solid label="\"using\""]
  525 -> 3 [style=solid label="';'"]
  525 -> 4 [style=solid label="\"alignas\""]
  525 -> 5 [style=solid label="'('"]
  525 -> 6 [style=solid label="\"...\""]
  525 -> 7 [style=solid label="'&'"]
  525 -> 8 [style=solid label="\"asm\""]
  525 -> 9 [style=solid label="\"::\""]
  525 -> 10 [style=solid label="'['"]
  525 -> 11 [style=solid label="\"virtual\""]
  525 -> 12 [style=solid label="\"class\""]
  525 -> 13 [style=solid label="\"struct\""]
  525 -> 14 [style=solid label="\"union\""]
  525 -> 15 [style=solid label="\"template\""]
  525 -> 16 [style=solid label="\"&&\""]
  525 -> 17 [style=solid label="\"operator\""]
  525 -> 18 [style=solid label="\"const\""]
  525 -> 19 [style=solid label="\"volatile\""]
  525 -> 20 [style=solid label="\"friend\""]
  525 -> 21 [style=solid label="\"typedef\""]
  525 -> 22 [style=solid label="\"constexpr\""]
  525 -> 23 [style=solid label="\"consteval\""]
  525 -> 24 [style=solid label="\"constinit\""]
  525 -> 25 [style=solid label="\"inline\""]
  525 -> 26 [style=solid label="\"decltype\""]
  525 -> 27 [style=solid label="\"enum\""]
  525 -> 28 [style=solid label="\"extern\""]
  525 -> 29 [style=solid label="\"explicit\""]
  525 -> 30 [style=solid label="\"export\""]
  525 -> 158 [style=solid label="\"export-keyword\""]
  525 -> 32 [style=solid label="'*'"]
  525 -> 34 [style=solid label="\"import-keyword\""]
  525 -> 35 [style=solid label="\"namespace\""]
  525 -> 36 [style=solid label="'~'"]
  525 -> 37 [style=solid label="\"auto\""]
  525 -> 38 [style=solid label="\"char\""]
  525 -> 39 [style=solid label="\"char8_t\""]
  525 -> 40 [style=solid label="\"char16_t\""]
  525 -> 41 [style=solid label="\"char32_t\""]
  525 -> 42 [style=solid label="\"wchar_t\""]
  525 -> 43 [style=solid label="\"bool\""]
  525 -> 44 [style=solid label="\"short\""]
  525 -> 45 [style=solid label="\"int\""]
  525 -> 46 [style=solid label="\"long\""]
  525 -> 47 [style=solid label="\"signed\""]
  525 -> 48 [style=solid label="\"unsigned\""]
  525 -> 49 [style=solid label="\"float\""]
  525 -> 50 [style=solid label="\"double\""]
  525 -> 51 [style=solid label="\"void\""]
  525 -> 52 [style=solid label="\"static_assert\""]
  525 -> 53 [style=solid label="\"static\""]
  525 -> 54 [style=solid label="\"thread_local\""]
  525 -> 55 [style=solid label="\"mutable\""]
  525 -> 56 [style=solid label="\"typename\""]
  525 -> 57 [style=dashed label="alias-declaration"]
  525 -> 58 [style=dashed label="alignment-specifier"]
  525 -> 59 [style=dashed label="asm-declaration"]
  525 -> 60 [style=dashed label="attribute-declaration"]
  525 -> 61 [style=dashed label="attribute-specifier"]
  525 -> 62 [style=dashed label="attribute-specifier-seq"]
  525 -> 63 [style=dashed label="block-declaration"]
  525 -> 64 [style=dashed label="class-head"]
  525 -> 65 [style=dashed label="class-key"]
  525 -> 66 [style=dashed label="class-name"]
  525 -> 67 [style=dashed label="class-specifier"]
  525 -> 68 [style=dashed label="concept-name"]
  525 -> 69 [style=dashed label="conversion-function-id"]
  525 -> 70 [style=dashed label="cv-qualifier"]
  525 -> 71 [style=dashed label="decl-specifier"]
  525 -> 72 [style=dashed label="decl-specifier-seq"]
  525 -> 73 [style=dashed label="declaration"]
  525 -> 570 [style=dashed label="declaration-seq"]
  525 -> 75 [style=dashed label="declarator"]
  525 -> 76 [style=dashed label="declarator-id"]
  525 -> 77 [style=dashed label="decltype-specifier"]
  525 -> 78 [style=dashed label="deduction-guide"]
  525 -> 79 [style=dashed label="defining-type-specifier"]
  525 -> 80 [style=dashed label="elaborated-enum-specifier"]
  525 -> 81 [style=dashed label="elaborated-type-specifier"]
  525 -> 82 [style=dashed label="empty-declaration"]
  525 -> 83 [style=dashed label="enum-head"]
  525 -> 84 [style=dashed label="enum-key"]
  525 -> 85 [style=dashed label="enum-name"]
  525 -> 86 [style=dashed label="enum-specifier"]
  525 -> 87 [style=dashed label="explicit-instantiation"]
  525 -> 88 [style=dashed label="explicit-specialization"]
  525 -> 89 [style=dashed label="explicit-specifier"]
  525 -> 90 [style=dashed label="export-declaration"]
  525 -> 91 [style=dashed label="function-definition"]
  525 -> 92 [style=dashed label="function-specifier"]
  525 -> 94 [style=dashed label="id-expression"]
  525 -> 95 [style=dashed label="linkage-specification"]
  525 -> 96 [style=dashed label="literal-operator-id"]
  525 -> 98 [style=dashed label="module-import-declaration"]
  525 -> 99 [style=dashed label="named-namespace-definition"]
  525 -> 100 [style=dashed label="namespace-alias"]
  525 -> 101 [style=dashed label="namespace-alias-definition"]
  525 -> 1029 [style=dashed label="namespace-body"]
  525 -> 102 [style=dashed label="namespace-definition"]
  525 -> 103 [style=dashed label="namespace-name"]
  525 -> 104 [style=dashed label="nested-name-specifier"]
  525 -> 105 [style=dashed label="nested-namespace-definition"]
  525 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  525 -> 107 [style=dashed label="noptr-declarator"]
  525 -> 108 [style=dashed label="opaque-enum-declaration"]
  525 -> 109 [style=dashed label="operator-function-id"]
  525 -> 110 [style=dashed label="placeholder-type-specifier"]
  525 -> 111 [style=dashed label="ptr-declarator"]
  525 -> 112 [style=dashed label="ptr-operator"]
  525 -> 113 [style=dashed label="qualified-id"]
  525 -> 114 [style=dashed label="simple-declaration"]
  525 -> 115 [style=dashed label="simple-template-id"]
  525 -> 116 [style=dashed label="simple-type-specifier"]
  525 -> 117 [style=dashed label="static_assert-declaration"]
  525 -> 118 [style=dashed label="storage-class-specifier"]
  525 -> 119 [style=dashed label="template-declaration"]
  525 -> 120 [style=dashed label="template-head"]
  525 -> 121 [style=dashed label="template-id"]
  525 -> 122 [style=dashed label="template-name"]
  525 -> 124 [style=dashed label="type-constraint"]
  525 -> 125 [style=dashed label="type-name"]
  525 -> 126 [style=dashed label="type-specifier"]
  525 -> 127 [style=dashed label="typedef-name"]
  525 -> 128 [style=dashed label="typename-specifier"]
  525 -> 129 [style=dashed label="unnamed-namespace-definition"]
  525 -> 130 [style=dashed label="unqualified-id"]
  525 -> 131 [style=dashed label="using-declaration"]
  525 -> 132 [style=dashed label="using-directive"]
  525 -> 133 [style=dashed label="using-enum-declaration"]
  526 [label="State 526\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l649 named-namespace-definition: \"inline\" \"namespace\" attribute-specifier-seq • IDENTIFIER '{' namespace-body '}'\l1152 unnamed-namespace-definition: \"inline\" \"namespace\" attribute-specifier-seq • '{' namespace-body '}'\l"]
  526 -> 1030 [style=solid label="IDENTIFIER"]
  526 -> 4 [style=solid label="\"alignas\""]
  526 -> 10 [style=solid label="'['"]
  526 -> 1031 [style=solid label="'{'"]
  526 -> 58 [style=dashed label="alignment-specifier"]
  526 -> 265 [style=dashed label="attribute-specifier"]
  527 [label="State 527\n\l853 placeholder-type-specifier: \"auto\" •\l855                           | \"decltype\" '(' \"auto\" • ')'\l"]
  527 -> 1032 [style=solid label="')'"]
  527 -> "527R853" [style=solid]
 "527R853" [label="R853", fillcolor=3, shape=diamond, style=filled]
  528 [label="State 528\n\l1071 throw-expression: \"throw\" •\l1072                 | \"throw\" • assignment-expression\l"]
  528 -> 1 [style=solid label="IDENTIFIER"]
  528 -> 361 [style=solid label="'+'"]
  528 -> 362 [style=solid label="'-'"]
  528 -> 363 [style=solid label="'('"]
  528 -> 364 [style=solid label="'&'"]
  528 -> 365 [style=solid label="\"::\""]
  528 -> 366 [style=solid label="'['"]
  528 -> 367 [style=solid label="\"co_await\""]
  528 -> 368 [style=solid label="'0'"]
  528 -> 369 [style=solid label="'1'"]
  528 -> 370 [style=solid label="\"0b\""]
  528 -> 371 [style=solid label="\"0B\""]
  528 -> 372 [style=solid label="'\\''"]
  528 -> 373 [style=solid label="\"false\""]
  528 -> 374 [style=solid label="\"true\""]
  528 -> 375 [style=solid label="\"noexcept\""]
  528 -> 17 [style=solid label="\"operator\""]
  528 -> 26 [style=solid label="\"decltype\""]
  528 -> 376 [style=solid label="\"delete\""]
  528 -> 377 [style=solid label="'.'"]
  528 -> 378 [style=solid label="'2'"]
  528 -> 379 [style=solid label="'3'"]
  528 -> 380 [style=solid label="'4'"]
  528 -> 381 [style=solid label="'5'"]
  528 -> 382 [style=solid label="'6'"]
  528 -> 383 [style=solid label="'7'"]
  528 -> 384 [style=solid label="'8'"]
  528 -> 385 [style=solid label="'9'"]
  528 -> 185 [style=solid label="\"u8\""]
  528 -> 186 [style=solid label="'u'"]
  528 -> 187 [style=solid label="'U'"]
  528 -> 188 [style=solid label="'L'"]
  528 -> 386 [style=solid label="'*'"]
  528 -> 203 [style=solid label="'\"'"]
  528 -> 387 [style=solid label="\"0x\""]
  528 -> 388 [style=solid label="\"0X\""]
  528 -> 389 [style=solid label="\"requires\""]
  528 -> 390 [style=solid label="\"new\""]
  528 -> 391 [style=solid label="'~'"]
  528 -> 392 [style=solid label="'!'"]
  528 -> 393 [style=solid label="\"++\""]
  528 -> 394 [style=solid label="\"--\""]
  528 -> 395 [style=solid label="\"this\""]
  528 -> 37 [style=solid label="\"auto\""]
  528 -> 396 [style=solid label="\"nullptr\""]
  528 -> 397 [style=solid label="\"dynamic_cast\""]
  528 -> 398 [style=solid label="\"static_cast\""]
  528 -> 399 [style=solid label="\"reinterpret_cast\""]
  528 -> 400 [style=solid label="\"const_cast\""]
  528 -> 401 [style=solid label="\"typeid\""]
  528 -> 38 [style=solid label="\"char\""]
  528 -> 39 [style=solid label="\"char8_t\""]
  528 -> 40 [style=solid label="\"char16_t\""]
  528 -> 41 [style=solid label="\"char32_t\""]
  528 -> 42 [style=solid label="\"wchar_t\""]
  528 -> 43 [style=solid label="\"bool\""]
  528 -> 44 [style=solid label="\"short\""]
  528 -> 45 [style=solid label="\"int\""]
  528 -> 46 [style=solid label="\"long\""]
  528 -> 47 [style=solid label="\"signed\""]
  528 -> 48 [style=solid label="\"unsigned\""]
  528 -> 49 [style=solid label="\"float\""]
  528 -> 50 [style=solid label="\"double\""]
  528 -> 51 [style=solid label="\"void\""]
  528 -> 209 [style=solid label="'R'"]
  528 -> 528 [style=solid label="\"throw\""]
  528 -> 56 [style=solid label="\"typename\""]
  528 -> 402 [style=solid label="\"sizeof\""]
  528 -> 403 [style=solid label="\"alignof\""]
  528 -> 529 [style=solid label="\"co_yield\""]
  528 -> 404 [style=dashed label="additive-expression"]
  528 -> 405 [style=dashed label="and-expression"]
  528 -> 1033 [style=dashed label="assignment-expression"]
  528 -> 406 [style=dashed label="await-expression"]
  528 -> 407 [style=dashed label="binary-literal"]
  528 -> 408 [style=dashed label="boolean-literal"]
  528 -> 409 [style=dashed label="cast-expression"]
  528 -> 410 [style=dashed label="character-literal"]
  528 -> 66 [style=dashed label="class-name"]
  528 -> 411 [style=dashed label="compare-expression"]
  528 -> 68 [style=dashed label="concept-name"]
  528 -> 531 [style=dashed label="conditional-expression"]
  528 -> 69 [style=dashed label="conversion-function-id"]
  528 -> 414 [style=dashed label="decimal-floating-point-literal"]
  528 -> 415 [style=dashed label="decimal-literal"]
  528 -> 77 [style=dashed label="decltype-specifier"]
  528 -> 416 [style=dashed label="delete-expression"]
  528 -> 417 [style=dashed label="digit"]
  528 -> 418 [style=dashed label="digit-sequence"]
  528 -> 419 [style=dashed label="encoding-prefix"]
  528 -> 85 [style=dashed label="enum-name"]
  528 -> 420 [style=dashed label="equality-expression"]
  528 -> 421 [style=dashed label="exclusive-or-expression"]
  528 -> 422 [style=dashed label="floating-point-literal"]
  528 -> 423 [style=dashed label="fold-expression"]
  528 -> 424 [style=dashed label="fractional-constant"]
  528 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  528 -> 426 [style=dashed label="hexadecimal-literal"]
  528 -> 427 [style=dashed label="hexadecimal-prefix"]
  528 -> 428 [style=dashed label="id-expression"]
  528 -> 429 [style=dashed label="inclusive-or-expression"]
  528 -> 430 [style=dashed label="integer-literal"]
  528 -> 431 [style=dashed label="lambda-expression"]
  528 -> 432 [style=dashed label="lambda-introducer"]
  528 -> 433 [style=dashed label="literal"]
  528 -> 96 [style=dashed label="literal-operator-id"]
  528 -> 434 [style=dashed label="logical-and-expression"]
  528 -> 533 [style=dashed label="logical-or-expression"]
  528 -> 436 [style=dashed label="multiplicative-expression"]
  528 -> 100 [style=dashed label="namespace-alias"]
  528 -> 103 [style=dashed label="namespace-name"]
  528 -> 437 [style=dashed label="nested-name-specifier"]
  528 -> 438 [style=dashed label="new-expression"]
  528 -> 439 [style=dashed label="noexcept-expression"]
  528 -> 440 [style=dashed label="nonzero-digit"]
  528 -> 441 [style=dashed label="octal-literal"]
  528 -> 109 [style=dashed label="operator-function-id"]
  528 -> 110 [style=dashed label="placeholder-type-specifier"]
  528 -> 442 [style=dashed label="pm-expression"]
  528 -> 443 [style=dashed label="pointer-literal"]
  528 -> 444 [style=dashed label="postfix-expression"]
  528 -> 445 [style=dashed label="primary-expression"]
  528 -> 113 [style=dashed label="qualified-id"]
  528 -> 446 [style=dashed label="relational-expression"]
  528 -> 447 [style=dashed label="requires-expression"]
  528 -> 448 [style=dashed label="shift-expression"]
  528 -> 115 [style=dashed label="simple-template-id"]
  528 -> 534 [style=dashed label="simple-type-specifier"]
  528 -> 450 [style=dashed label="string-literal"]
  528 -> 121 [style=dashed label="template-id"]
  528 -> 216 [style=dashed label="template-name"]
  528 -> 535 [style=dashed label="throw-expression"]
  528 -> 124 [style=dashed label="type-constraint"]
  528 -> 125 [style=dashed label="type-name"]
  528 -> 127 [style=dashed label="typedef-name"]
  528 -> 536 [style=dashed label="typename-specifier"]
  528 -> 454 [style=dashed label="unary-expression"]
  528 -> 455 [style=dashed label="unary-operator"]
  528 -> 130 [style=dashed label="unqualified-id"]
  528 -> 456 [style=dashed label="user-defined-character-literal"]
  528 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  528 -> 458 [style=dashed label="user-defined-integer-literal"]
  528 -> 459 [style=dashed label="user-defined-literal"]
  528 -> 460 [style=dashed label="user-defined-string-literal"]
  528 -> 537 [style=dashed label="yield-expression"]
  528 -> "528R1071" [style=solid]
 "528R1071" [label="R1071", fillcolor=3, shape=diamond, style=filled]
  529 [label="State 529\n\l1194 yield-expression: \"co_yield\" • assignment-expression\l1195                 | \"co_yield\" • braced-init-list\l"]
  529 -> 1 [style=solid label="IDENTIFIER"]
  529 -> 361 [style=solid label="'+'"]
  529 -> 362 [style=solid label="'-'"]
  529 -> 363 [style=solid label="'('"]
  529 -> 364 [style=solid label="'&'"]
  529 -> 365 [style=solid label="\"::\""]
  529 -> 366 [style=solid label="'['"]
  529 -> 367 [style=solid label="\"co_await\""]
  529 -> 939 [style=solid label="'{'"]
  529 -> 368 [style=solid label="'0'"]
  529 -> 369 [style=solid label="'1'"]
  529 -> 370 [style=solid label="\"0b\""]
  529 -> 371 [style=solid label="\"0B\""]
  529 -> 372 [style=solid label="'\\''"]
  529 -> 373 [style=solid label="\"false\""]
  529 -> 374 [style=solid label="\"true\""]
  529 -> 375 [style=solid label="\"noexcept\""]
  529 -> 17 [style=solid label="\"operator\""]
  529 -> 26 [style=solid label="\"decltype\""]
  529 -> 376 [style=solid label="\"delete\""]
  529 -> 377 [style=solid label="'.'"]
  529 -> 378 [style=solid label="'2'"]
  529 -> 379 [style=solid label="'3'"]
  529 -> 380 [style=solid label="'4'"]
  529 -> 381 [style=solid label="'5'"]
  529 -> 382 [style=solid label="'6'"]
  529 -> 383 [style=solid label="'7'"]
  529 -> 384 [style=solid label="'8'"]
  529 -> 385 [style=solid label="'9'"]
  529 -> 185 [style=solid label="\"u8\""]
  529 -> 186 [style=solid label="'u'"]
  529 -> 187 [style=solid label="'U'"]
  529 -> 188 [style=solid label="'L'"]
  529 -> 386 [style=solid label="'*'"]
  529 -> 203 [style=solid label="'\"'"]
  529 -> 387 [style=solid label="\"0x\""]
  529 -> 388 [style=solid label="\"0X\""]
  529 -> 389 [style=solid label="\"requires\""]
  529 -> 390 [style=solid label="\"new\""]
  529 -> 391 [style=solid label="'~'"]
  529 -> 392 [style=solid label="'!'"]
  529 -> 393 [style=solid label="\"++\""]
  529 -> 394 [style=solid label="\"--\""]
  529 -> 395 [style=solid label="\"this\""]
  529 -> 37 [style=solid label="\"auto\""]
  529 -> 396 [style=solid label="\"nullptr\""]
  529 -> 397 [style=solid label="\"dynamic_cast\""]
  529 -> 398 [style=solid label="\"static_cast\""]
  529 -> 399 [style=solid label="\"reinterpret_cast\""]
  529 -> 400 [style=solid label="\"const_cast\""]
  529 -> 401 [style=solid label="\"typeid\""]
  529 -> 38 [style=solid label="\"char\""]
  529 -> 39 [style=solid label="\"char8_t\""]
  529 -> 40 [style=solid label="\"char16_t\""]
  529 -> 41 [style=solid label="\"char32_t\""]
  529 -> 42 [style=solid label="\"wchar_t\""]
  529 -> 43 [style=solid label="\"bool\""]
  529 -> 44 [style=solid label="\"short\""]
  529 -> 45 [style=solid label="\"int\""]
  529 -> 46 [style=solid label="\"long\""]
  529 -> 47 [style=solid label="\"signed\""]
  529 -> 48 [style=solid label="\"unsigned\""]
  529 -> 49 [style=solid label="\"float\""]
  529 -> 50 [style=solid label="\"double\""]
  529 -> 51 [style=solid label="\"void\""]
  529 -> 209 [style=solid label="'R'"]
  529 -> 528 [style=solid label="\"throw\""]
  529 -> 56 [style=solid label="\"typename\""]
  529 -> 402 [style=solid label="\"sizeof\""]
  529 -> 403 [style=solid label="\"alignof\""]
  529 -> 529 [style=solid label="\"co_yield\""]
  529 -> 404 [style=dashed label="additive-expression"]
  529 -> 405 [style=dashed label="and-expression"]
  529 -> 1034 [style=dashed label="assignment-expression"]
  529 -> 406 [style=dashed label="await-expression"]
  529 -> 407 [style=dashed label="binary-literal"]
  529 -> 408 [style=dashed label="boolean-literal"]
  529 -> 1035 [style=dashed label="braced-init-list"]
  529 -> 409 [style=dashed label="cast-expression"]
  529 -> 410 [style=dashed label="character-literal"]
  529 -> 66 [style=dashed label="class-name"]
  529 -> 411 [style=dashed label="compare-expression"]
  529 -> 68 [style=dashed label="concept-name"]
  529 -> 531 [style=dashed label="conditional-expression"]
  529 -> 69 [style=dashed label="conversion-function-id"]
  529 -> 414 [style=dashed label="decimal-floating-point-literal"]
  529 -> 415 [style=dashed label="decimal-literal"]
  529 -> 77 [style=dashed label="decltype-specifier"]
  529 -> 416 [style=dashed label="delete-expression"]
  529 -> 417 [style=dashed label="digit"]
  529 -> 418 [style=dashed label="digit-sequence"]
  529 -> 419 [style=dashed label="encoding-prefix"]
  529 -> 85 [style=dashed label="enum-name"]
  529 -> 420 [style=dashed label="equality-expression"]
  529 -> 421 [style=dashed label="exclusive-or-expression"]
  529 -> 422 [style=dashed label="floating-point-literal"]
  529 -> 423 [style=dashed label="fold-expression"]
  529 -> 424 [style=dashed label="fractional-constant"]
  529 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  529 -> 426 [style=dashed label="hexadecimal-literal"]
  529 -> 427 [style=dashed label="hexadecimal-prefix"]
  529 -> 428 [style=dashed label="id-expression"]
  529 -> 429 [style=dashed label="inclusive-or-expression"]
  529 -> 430 [style=dashed label="integer-literal"]
  529 -> 431 [style=dashed label="lambda-expression"]
  529 -> 432 [style=dashed label="lambda-introducer"]
  529 -> 433 [style=dashed label="literal"]
  529 -> 96 [style=dashed label="literal-operator-id"]
  529 -> 434 [style=dashed label="logical-and-expression"]
  529 -> 533 [style=dashed label="logical-or-expression"]
  529 -> 436 [style=dashed label="multiplicative-expression"]
  529 -> 100 [style=dashed label="namespace-alias"]
  529 -> 103 [style=dashed label="namespace-name"]
  529 -> 437 [style=dashed label="nested-name-specifier"]
  529 -> 438 [style=dashed label="new-expression"]
  529 -> 439 [style=dashed label="noexcept-expression"]
  529 -> 440 [style=dashed label="nonzero-digit"]
  529 -> 441 [style=dashed label="octal-literal"]
  529 -> 109 [style=dashed label="operator-function-id"]
  529 -> 110 [style=dashed label="placeholder-type-specifier"]
  529 -> 442 [style=dashed label="pm-expression"]
  529 -> 443 [style=dashed label="pointer-literal"]
  529 -> 444 [style=dashed label="postfix-expression"]
  529 -> 445 [style=dashed label="primary-expression"]
  529 -> 113 [style=dashed label="qualified-id"]
  529 -> 446 [style=dashed label="relational-expression"]
  529 -> 447 [style=dashed label="requires-expression"]
  529 -> 448 [style=dashed label="shift-expression"]
  529 -> 115 [style=dashed label="simple-template-id"]
  529 -> 534 [style=dashed label="simple-type-specifier"]
  529 -> 450 [style=dashed label="string-literal"]
  529 -> 121 [style=dashed label="template-id"]
  529 -> 216 [style=dashed label="template-name"]
  529 -> 535 [style=dashed label="throw-expression"]
  529 -> 124 [style=dashed label="type-constraint"]
  529 -> 125 [style=dashed label="type-name"]
  529 -> 127 [style=dashed label="typedef-name"]
  529 -> 536 [style=dashed label="typename-specifier"]
  529 -> 454 [style=dashed label="unary-expression"]
  529 -> 455 [style=dashed label="unary-operator"]
  529 -> 130 [style=dashed label="unqualified-id"]
  529 -> 456 [style=dashed label="user-defined-character-literal"]
  529 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  529 -> 458 [style=dashed label="user-defined-integer-literal"]
  529 -> 459 [style=dashed label="user-defined-literal"]
  529 -> 460 [style=dashed label="user-defined-string-literal"]
  529 -> 537 [style=dashed label="yield-expression"]
  530 [label="State 530\n\l337 expression: assignment-expression •\l"]
  530 -> "530R337" [style=solid]
 "530R337" [label="R337", fillcolor=3, shape=diamond, style=filled]
  531 [label="State 531\n\l 23 assignment-expression: conditional-expression •\l"]
  531 -> "531R23" [style=solid]
 "531R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  532 [label="State 532\n\l233 decltype-specifier: \"decltype\" '(' expression • ')'\l338 expression: expression • ',' assignment-expression\l"]
  532 -> 1036 [style=solid label="')'"]
  532 -> 1037 [style=solid label="','"]
  533 [label="State 533\n\l 26 assignment-expression: logical-or-expression • assignment-operator initializer-clause\l169 conditional-expression: logical-or-expression •\l170                       | logical-or-expression • '?' expression ':' assignment-expression\l570 logical-or-expression: logical-or-expression • \"||\" logical-and-expression\l"]
  533 -> 1038 [style=solid label="'='"]
  533 -> 1039 [style=solid label="\"*=\""]
  533 -> 1040 [style=solid label="\"/=\""]
  533 -> 1041 [style=solid label="\"%=\""]
  533 -> 1042 [style=solid label="\"+=\""]
  533 -> 1043 [style=solid label="\"-=\""]
  533 -> 1044 [style=solid label="\">>=\""]
  533 -> 1045 [style=solid label="\"<<=\""]
  533 -> 1046 [style=solid label="\"&=\""]
  533 -> 1047 [style=solid label="\"^=\""]
  533 -> 1048 [style=solid label="\"|=\""]
  533 -> 907 [style=solid label="'?'"]
  533 -> 908 [style=solid label="\"||\""]
  533 -> 1049 [style=dashed label="assignment-operator"]
  533 -> "533R169d" [label="['=']", style=solid]
 "533R169d" [label="R169", fillcolor=5, shape=diamond, style=filled]
  533 -> "533R169" [style=solid]
 "533R169" [label="R169", fillcolor=3, shape=diamond, style=filled]
  534 [label="State 534\n\l865 postfix-expression: simple-type-specifier • '(' ')'\l866                   | simple-type-specifier • '(' expression-list ')'\l869                   | simple-type-specifier • braced-init-list\l"]
  534 -> 938 [style=solid label="'('"]
  534 -> 939 [style=solid label="'{'"]
  534 -> 940 [style=dashed label="braced-init-list"]
  535 [label="State 535\n\l 25 assignment-expression: throw-expression •\l"]
  535 -> "535R25" [style=solid]
 "535R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  536 [label="State 536\n\l867 postfix-expression: typename-specifier • '(' ')'\l868                   | typename-specifier • '(' expression-list ')'\l870                   | typename-specifier • braced-init-list\l"]
  536 -> 953 [style=solid label="'('"]
  536 -> 939 [style=solid label="'{'"]
  536 -> 954 [style=dashed label="braced-init-list"]
  537 [label="State 537\n\l 24 assignment-expression: yield-expression •\l"]
  537 -> "537R24" [style=solid]
 "537R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  538 [label="State 538\n\l266 elaborated-enum-specifier: \"enum\" nested-name-specifier IDENTIFIER •\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l"]
  538 -> 726 [style=solid label="\"::\""]
  538 -> "538R266d" [label="[\"::\"]", style=solid]
 "538R266d" [label="R266", fillcolor=5, shape=diamond, style=filled]
  538 -> "538R266" [style=solid]
 "538R266" [label="R266", fillcolor=3, shape=diamond, style=filled]
  538 -> "538R1066d" [label="['<']", style=solid]
 "538R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  539 [label="State 539\n\l664 nested-name-specifier: nested-name-specifier simple-template-id • \"::\"\l"]
  539 -> 733 [style=solid label="\"::\""]
  540 [label="State 540\n\l322 explicit-instantiation: \"extern\" \"template\" declaration •\l"]
  540 -> "540R322" [style=solid]
 "540R322" [label="R322", fillcolor=3, shape=diamond, style=filled]
  541 [label="State 541\n\l555 linkage-specification: \"extern\" string-literal '{' • '}'\l556                      | \"extern\" string-literal '{' • declaration-seq '}'\l"]
  541 -> 1 [style=solid label="IDENTIFIER"]
  541 -> 2 [style=solid label="\"using\""]
  541 -> 3 [style=solid label="';'"]
  541 -> 4 [style=solid label="\"alignas\""]
  541 -> 5 [style=solid label="'('"]
  541 -> 6 [style=solid label="\"...\""]
  541 -> 7 [style=solid label="'&'"]
  541 -> 8 [style=solid label="\"asm\""]
  541 -> 9 [style=solid label="\"::\""]
  541 -> 10 [style=solid label="'['"]
  541 -> 1050 [style=solid label="'}'"]
  541 -> 11 [style=solid label="\"virtual\""]
  541 -> 12 [style=solid label="\"class\""]
  541 -> 13 [style=solid label="\"struct\""]
  541 -> 14 [style=solid label="\"union\""]
  541 -> 15 [style=solid label="\"template\""]
  541 -> 16 [style=solid label="\"&&\""]
  541 -> 17 [style=solid label="\"operator\""]
  541 -> 18 [style=solid label="\"const\""]
  541 -> 19 [style=solid label="\"volatile\""]
  541 -> 20 [style=solid label="\"friend\""]
  541 -> 21 [style=solid label="\"typedef\""]
  541 -> 22 [style=solid label="\"constexpr\""]
  541 -> 23 [style=solid label="\"consteval\""]
  541 -> 24 [style=solid label="\"constinit\""]
  541 -> 25 [style=solid label="\"inline\""]
  541 -> 26 [style=solid label="\"decltype\""]
  541 -> 27 [style=solid label="\"enum\""]
  541 -> 28 [style=solid label="\"extern\""]
  541 -> 29 [style=solid label="\"explicit\""]
  541 -> 30 [style=solid label="\"export\""]
  541 -> 158 [style=solid label="\"export-keyword\""]
  541 -> 32 [style=solid label="'*'"]
  541 -> 34 [style=solid label="\"import-keyword\""]
  541 -> 35 [style=solid label="\"namespace\""]
  541 -> 36 [style=solid label="'~'"]
  541 -> 37 [style=solid label="\"auto\""]
  541 -> 38 [style=solid label="\"char\""]
  541 -> 39 [style=solid label="\"char8_t\""]
  541 -> 40 [style=solid label="\"char16_t\""]
  541 -> 41 [style=solid label="\"char32_t\""]
  541 -> 42 [style=solid label="\"wchar_t\""]
  541 -> 43 [style=solid label="\"bool\""]
  541 -> 44 [style=solid label="\"short\""]
  541 -> 45 [style=solid label="\"int\""]
  541 -> 46 [style=solid label="\"long\""]
  541 -> 47 [style=solid label="\"signed\""]
  541 -> 48 [style=solid label="\"unsigned\""]
  541 -> 49 [style=solid label="\"float\""]
  541 -> 50 [style=solid label="\"double\""]
  541 -> 51 [style=solid label="\"void\""]
  541 -> 52 [style=solid label="\"static_assert\""]
  541 -> 53 [style=solid label="\"static\""]
  541 -> 54 [style=solid label="\"thread_local\""]
  541 -> 55 [style=solid label="\"mutable\""]
  541 -> 56 [style=solid label="\"typename\""]
  541 -> 57 [style=dashed label="alias-declaration"]
  541 -> 58 [style=dashed label="alignment-specifier"]
  541 -> 59 [style=dashed label="asm-declaration"]
  541 -> 60 [style=dashed label="attribute-declaration"]
  541 -> 61 [style=dashed label="attribute-specifier"]
  541 -> 62 [style=dashed label="attribute-specifier-seq"]
  541 -> 63 [style=dashed label="block-declaration"]
  541 -> 64 [style=dashed label="class-head"]
  541 -> 65 [style=dashed label="class-key"]
  541 -> 66 [style=dashed label="class-name"]
  541 -> 67 [style=dashed label="class-specifier"]
  541 -> 68 [style=dashed label="concept-name"]
  541 -> 69 [style=dashed label="conversion-function-id"]
  541 -> 70 [style=dashed label="cv-qualifier"]
  541 -> 71 [style=dashed label="decl-specifier"]
  541 -> 72 [style=dashed label="decl-specifier-seq"]
  541 -> 73 [style=dashed label="declaration"]
  541 -> 1051 [style=dashed label="declaration-seq"]
  541 -> 75 [style=dashed label="declarator"]
  541 -> 76 [style=dashed label="declarator-id"]
  541 -> 77 [style=dashed label="decltype-specifier"]
  541 -> 78 [style=dashed label="deduction-guide"]
  541 -> 79 [style=dashed label="defining-type-specifier"]
  541 -> 80 [style=dashed label="elaborated-enum-specifier"]
  541 -> 81 [style=dashed label="elaborated-type-specifier"]
  541 -> 82 [style=dashed label="empty-declaration"]
  541 -> 83 [style=dashed label="enum-head"]
  541 -> 84 [style=dashed label="enum-key"]
  541 -> 85 [style=dashed label="enum-name"]
  541 -> 86 [style=dashed label="enum-specifier"]
  541 -> 87 [style=dashed label="explicit-instantiation"]
  541 -> 88 [style=dashed label="explicit-specialization"]
  541 -> 89 [style=dashed label="explicit-specifier"]
  541 -> 90 [style=dashed label="export-declaration"]
  541 -> 91 [style=dashed label="function-definition"]
  541 -> 92 [style=dashed label="function-specifier"]
  541 -> 94 [style=dashed label="id-expression"]
  541 -> 95 [style=dashed label="linkage-specification"]
  541 -> 96 [style=dashed label="literal-operator-id"]
  541 -> 98 [style=dashed label="module-import-declaration"]
  541 -> 99 [style=dashed label="named-namespace-definition"]
  541 -> 100 [style=dashed label="namespace-alias"]
  541 -> 101 [style=dashed label="namespace-alias-definition"]
  541 -> 102 [style=dashed label="namespace-definition"]
  541 -> 103 [style=dashed label="namespace-name"]
  541 -> 104 [style=dashed label="nested-name-specifier"]
  541 -> 105 [style=dashed label="nested-namespace-definition"]
  541 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  541 -> 107 [style=dashed label="noptr-declarator"]
  541 -> 108 [style=dashed label="opaque-enum-declaration"]
  541 -> 109 [style=dashed label="operator-function-id"]
  541 -> 110 [style=dashed label="placeholder-type-specifier"]
  541 -> 111 [style=dashed label="ptr-declarator"]
  541 -> 112 [style=dashed label="ptr-operator"]
  541 -> 113 [style=dashed label="qualified-id"]
  541 -> 114 [style=dashed label="simple-declaration"]
  541 -> 115 [style=dashed label="simple-template-id"]
  541 -> 116 [style=dashed label="simple-type-specifier"]
  541 -> 117 [style=dashed label="static_assert-declaration"]
  541 -> 118 [style=dashed label="storage-class-specifier"]
  541 -> 119 [style=dashed label="template-declaration"]
  541 -> 120 [style=dashed label="template-head"]
  541 -> 121 [style=dashed label="template-id"]
  541 -> 122 [style=dashed label="template-name"]
  541 -> 124 [style=dashed label="type-constraint"]
  541 -> 125 [style=dashed label="type-name"]
  541 -> 126 [style=dashed label="type-specifier"]
  541 -> 127 [style=dashed label="typedef-name"]
  541 -> 128 [style=dashed label="typename-specifier"]
  541 -> 129 [style=dashed label="unnamed-namespace-definition"]
  541 -> 130 [style=dashed label="unqualified-id"]
  541 -> 131 [style=dashed label="using-declaration"]
  541 -> 132 [style=dashed label="using-directive"]
  541 -> 133 [style=dashed label="using-enum-declaration"]
  542 [label="State 542\n\l557 linkage-specification: \"extern\" string-literal declaration •\l"]
  542 -> "542R557" [style=solid]
 "542R557" [label="R557", fillcolor=3, shape=diamond, style=filled]
  543 [label="State 543\n\l325 explicit-specifier: \"explicit\" '(' constant-expression • ')'\l"]
  543 -> 1052 [style=solid label="')'"]
  544 [label="State 544\n\l332 export-declaration: \"export\" '{' '}' •\l"]
  544 -> "544R332" [style=solid]
 "544R332" [label="R332", fillcolor=3, shape=diamond, style=filled]
  545 [label="State 545\n\l227 declaration-seq: declaration-seq • declaration\l333 export-declaration: \"export\" '{' declaration-seq • '}'\l"]
  545 -> 1 [style=solid label="IDENTIFIER"]
  545 -> 2 [style=solid label="\"using\""]
  545 -> 3 [style=solid label="';'"]
  545 -> 4 [style=solid label="\"alignas\""]
  545 -> 5 [style=solid label="'('"]
  545 -> 6 [style=solid label="\"...\""]
  545 -> 7 [style=solid label="'&'"]
  545 -> 8 [style=solid label="\"asm\""]
  545 -> 9 [style=solid label="\"::\""]
  545 -> 10 [style=solid label="'['"]
  545 -> 1053 [style=solid label="'}'"]
  545 -> 11 [style=solid label="\"virtual\""]
  545 -> 12 [style=solid label="\"class\""]
  545 -> 13 [style=solid label="\"struct\""]
  545 -> 14 [style=solid label="\"union\""]
  545 -> 15 [style=solid label="\"template\""]
  545 -> 16 [style=solid label="\"&&\""]
  545 -> 17 [style=solid label="\"operator\""]
  545 -> 18 [style=solid label="\"const\""]
  545 -> 19 [style=solid label="\"volatile\""]
  545 -> 20 [style=solid label="\"friend\""]
  545 -> 21 [style=solid label="\"typedef\""]
  545 -> 22 [style=solid label="\"constexpr\""]
  545 -> 23 [style=solid label="\"consteval\""]
  545 -> 24 [style=solid label="\"constinit\""]
  545 -> 25 [style=solid label="\"inline\""]
  545 -> 26 [style=solid label="\"decltype\""]
  545 -> 27 [style=solid label="\"enum\""]
  545 -> 28 [style=solid label="\"extern\""]
  545 -> 29 [style=solid label="\"explicit\""]
  545 -> 30 [style=solid label="\"export\""]
  545 -> 158 [style=solid label="\"export-keyword\""]
  545 -> 32 [style=solid label="'*'"]
  545 -> 34 [style=solid label="\"import-keyword\""]
  545 -> 35 [style=solid label="\"namespace\""]
  545 -> 36 [style=solid label="'~'"]
  545 -> 37 [style=solid label="\"auto\""]
  545 -> 38 [style=solid label="\"char\""]
  545 -> 39 [style=solid label="\"char8_t\""]
  545 -> 40 [style=solid label="\"char16_t\""]
  545 -> 41 [style=solid label="\"char32_t\""]
  545 -> 42 [style=solid label="\"wchar_t\""]
  545 -> 43 [style=solid label="\"bool\""]
  545 -> 44 [style=solid label="\"short\""]
  545 -> 45 [style=solid label="\"int\""]
  545 -> 46 [style=solid label="\"long\""]
  545 -> 47 [style=solid label="\"signed\""]
  545 -> 48 [style=solid label="\"unsigned\""]
  545 -> 49 [style=solid label="\"float\""]
  545 -> 50 [style=solid label="\"double\""]
  545 -> 51 [style=solid label="\"void\""]
  545 -> 52 [style=solid label="\"static_assert\""]
  545 -> 53 [style=solid label="\"static\""]
  545 -> 54 [style=solid label="\"thread_local\""]
  545 -> 55 [style=solid label="\"mutable\""]
  545 -> 56 [style=solid label="\"typename\""]
  545 -> 57 [style=dashed label="alias-declaration"]
  545 -> 58 [style=dashed label="alignment-specifier"]
  545 -> 59 [style=dashed label="asm-declaration"]
  545 -> 60 [style=dashed label="attribute-declaration"]
  545 -> 61 [style=dashed label="attribute-specifier"]
  545 -> 62 [style=dashed label="attribute-specifier-seq"]
  545 -> 63 [style=dashed label="block-declaration"]
  545 -> 64 [style=dashed label="class-head"]
  545 -> 65 [style=dashed label="class-key"]
  545 -> 66 [style=dashed label="class-name"]
  545 -> 67 [style=dashed label="class-specifier"]
  545 -> 68 [style=dashed label="concept-name"]
  545 -> 69 [style=dashed label="conversion-function-id"]
  545 -> 70 [style=dashed label="cv-qualifier"]
  545 -> 71 [style=dashed label="decl-specifier"]
  545 -> 72 [style=dashed label="decl-specifier-seq"]
  545 -> 290 [style=dashed label="declaration"]
  545 -> 75 [style=dashed label="declarator"]
  545 -> 76 [style=dashed label="declarator-id"]
  545 -> 77 [style=dashed label="decltype-specifier"]
  545 -> 78 [style=dashed label="deduction-guide"]
  545 -> 79 [style=dashed label="defining-type-specifier"]
  545 -> 80 [style=dashed label="elaborated-enum-specifier"]
  545 -> 81 [style=dashed label="elaborated-type-specifier"]
  545 -> 82 [style=dashed label="empty-declaration"]
  545 -> 83 [style=dashed label="enum-head"]
  545 -> 84 [style=dashed label="enum-key"]
  545 -> 85 [style=dashed label="enum-name"]
  545 -> 86 [style=dashed label="enum-specifier"]
  545 -> 87 [style=dashed label="explicit-instantiation"]
  545 -> 88 [style=dashed label="explicit-specialization"]
  545 -> 89 [style=dashed label="explicit-specifier"]
  545 -> 90 [style=dashed label="export-declaration"]
  545 -> 91 [style=dashed label="function-definition"]
  545 -> 92 [style=dashed label="function-specifier"]
  545 -> 94 [style=dashed label="id-expression"]
  545 -> 95 [style=dashed label="linkage-specification"]
  545 -> 96 [style=dashed label="literal-operator-id"]
  545 -> 98 [style=dashed label="module-import-declaration"]
  545 -> 99 [style=dashed label="named-namespace-definition"]
  545 -> 100 [style=dashed label="namespace-alias"]
  545 -> 101 [style=dashed label="namespace-alias-definition"]
  545 -> 102 [style=dashed label="namespace-definition"]
  545 -> 103 [style=dashed label="namespace-name"]
  545 -> 104 [style=dashed label="nested-name-specifier"]
  545 -> 105 [style=dashed label="nested-namespace-definition"]
  545 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  545 -> 107 [style=dashed label="noptr-declarator"]
  545 -> 108 [style=dashed label="opaque-enum-declaration"]
  545 -> 109 [style=dashed label="operator-function-id"]
  545 -> 110 [style=dashed label="placeholder-type-specifier"]
  545 -> 111 [style=dashed label="ptr-declarator"]
  545 -> 112 [style=dashed label="ptr-operator"]
  545 -> 113 [style=dashed label="qualified-id"]
  545 -> 114 [style=dashed label="simple-declaration"]
  545 -> 115 [style=dashed label="simple-template-id"]
  545 -> 116 [style=dashed label="simple-type-specifier"]
  545 -> 117 [style=dashed label="static_assert-declaration"]
  545 -> 118 [style=dashed label="storage-class-specifier"]
  545 -> 119 [style=dashed label="template-declaration"]
  545 -> 120 [style=dashed label="template-head"]
  545 -> 121 [style=dashed label="template-id"]
  545 -> 122 [style=dashed label="template-name"]
  545 -> 124 [style=dashed label="type-constraint"]
  545 -> 125 [style=dashed label="type-name"]
  545 -> 126 [style=dashed label="type-specifier"]
  545 -> 127 [style=dashed label="typedef-name"]
  545 -> 128 [style=dashed label="typename-specifier"]
  545 -> 129 [style=dashed label="unnamed-namespace-definition"]
  545 -> 130 [style=dashed label="unqualified-id"]
  545 -> 131 [style=dashed label="using-declaration"]
  545 -> 132 [style=dashed label="using-directive"]
  545 -> 133 [style=dashed label="using-enum-declaration"]
  546 [label="State 546\n\l623 module-declaration: \"export-keyword\" \"module-keyword\" module-name • ';'\l625                   | \"export-keyword\" \"module-keyword\" module-name • module-partition ';'\l627                   | \"export-keyword\" \"module-keyword\" module-name • attribute-specifier-seq ';'\l629                   | \"export-keyword\" \"module-keyword\" module-name • module-partition attribute-specifier-seq ';'\l"]
  546 -> 1054 [style=solid label="';'"]
  546 -> 4 [style=solid label="\"alignas\""]
  546 -> 10 [style=solid label="'['"]
  546 -> 241 [style=solid label="':'"]
  546 -> 58 [style=dashed label="alignment-specifier"]
  546 -> 61 [style=dashed label="attribute-specifier"]
  546 -> 1055 [style=dashed label="attribute-specifier-seq"]
  546 -> 1056 [style=dashed label="module-partition"]
  547 [label="State 547\n\l900 ptr-operator: '*' attribute-specifier-seq cv-qualifier-seq •\l"]
  547 -> "547R900" [style=solid]
 "547R900" [label="R900", fillcolor=3, shape=diamond, style=filled]
  548 [label="State 548\n\l188 cv-qualifier-seq: cv-qualifier cv-qualifier-seq •\l"]
  548 -> "548R188" [style=solid]
 "548R188" [label="R188", fillcolor=3, shape=diamond, style=filled]
  549 [label="State 549\n\l639 module-name-qualifier: IDENTIFIER '.' •\l"]
  549 -> "549R639" [style=solid]
 "549R639" [label="R639", fillcolor=3, shape=diamond, style=filled]
  550 [label="State 550\n\l227 declaration-seq: declaration-seq • declaration\l415 global-module-fragment: \"module-keyword\" ';' declaration-seq •\l"]
  550 -> 1 [style=solid label="IDENTIFIER"]
  550 -> 2 [style=solid label="\"using\""]
  550 -> 3 [style=solid label="';'"]
  550 -> 4 [style=solid label="\"alignas\""]
  550 -> 5 [style=solid label="'('"]
  550 -> 6 [style=solid label="\"...\""]
  550 -> 7 [style=solid label="'&'"]
  550 -> 8 [style=solid label="\"asm\""]
  550 -> 9 [style=solid label="\"::\""]
  550 -> 10 [style=solid label="'['"]
  550 -> 11 [style=solid label="\"virtual\""]
  550 -> 12 [style=solid label="\"class\""]
  550 -> 13 [style=solid label="\"struct\""]
  550 -> 14 [style=solid label="\"union\""]
  550 -> 15 [style=solid label="\"template\""]
  550 -> 16 [style=solid label="\"&&\""]
  550 -> 17 [style=solid label="\"operator\""]
  550 -> 18 [style=solid label="\"const\""]
  550 -> 19 [style=solid label="\"volatile\""]
  550 -> 20 [style=solid label="\"friend\""]
  550 -> 21 [style=solid label="\"typedef\""]
  550 -> 22 [style=solid label="\"constexpr\""]
  550 -> 23 [style=solid label="\"consteval\""]
  550 -> 24 [style=solid label="\"constinit\""]
  550 -> 25 [style=solid label="\"inline\""]
  550 -> 26 [style=solid label="\"decltype\""]
  550 -> 27 [style=solid label="\"enum\""]
  550 -> 28 [style=solid label="\"extern\""]
  550 -> 29 [style=solid label="\"explicit\""]
  550 -> 30 [style=solid label="\"export\""]
  550 -> 158 [style=solid label="\"export-keyword\""]
  550 -> 32 [style=solid label="'*'"]
  550 -> 34 [style=solid label="\"import-keyword\""]
  550 -> 35 [style=solid label="\"namespace\""]
  550 -> 36 [style=solid label="'~'"]
  550 -> 37 [style=solid label="\"auto\""]
  550 -> 38 [style=solid label="\"char\""]
  550 -> 39 [style=solid label="\"char8_t\""]
  550 -> 40 [style=solid label="\"char16_t\""]
  550 -> 41 [style=solid label="\"char32_t\""]
  550 -> 42 [style=solid label="\"wchar_t\""]
  550 -> 43 [style=solid label="\"bool\""]
  550 -> 44 [style=solid label="\"short\""]
  550 -> 45 [style=solid label="\"int\""]
  550 -> 46 [style=solid label="\"long\""]
  550 -> 47 [style=solid label="\"signed\""]
  550 -> 48 [style=solid label="\"unsigned\""]
  550 -> 49 [style=solid label="\"float\""]
  550 -> 50 [style=solid label="\"double\""]
  550 -> 51 [style=solid label="\"void\""]
  550 -> 52 [style=solid label="\"static_assert\""]
  550 -> 53 [style=solid label="\"static\""]
  550 -> 54 [style=solid label="\"thread_local\""]
  550 -> 55 [style=solid label="\"mutable\""]
  550 -> 56 [style=solid label="\"typename\""]
  550 -> 57 [style=dashed label="alias-declaration"]
  550 -> 58 [style=dashed label="alignment-specifier"]
  550 -> 59 [style=dashed label="asm-declaration"]
  550 -> 60 [style=dashed label="attribute-declaration"]
  550 -> 61 [style=dashed label="attribute-specifier"]
  550 -> 62 [style=dashed label="attribute-specifier-seq"]
  550 -> 63 [style=dashed label="block-declaration"]
  550 -> 64 [style=dashed label="class-head"]
  550 -> 65 [style=dashed label="class-key"]
  550 -> 66 [style=dashed label="class-name"]
  550 -> 67 [style=dashed label="class-specifier"]
  550 -> 68 [style=dashed label="concept-name"]
  550 -> 69 [style=dashed label="conversion-function-id"]
  550 -> 70 [style=dashed label="cv-qualifier"]
  550 -> 71 [style=dashed label="decl-specifier"]
  550 -> 72 [style=dashed label="decl-specifier-seq"]
  550 -> 290 [style=dashed label="declaration"]
  550 -> 75 [style=dashed label="declarator"]
  550 -> 76 [style=dashed label="declarator-id"]
  550 -> 77 [style=dashed label="decltype-specifier"]
  550 -> 78 [style=dashed label="deduction-guide"]
  550 -> 79 [style=dashed label="defining-type-specifier"]
  550 -> 80 [style=dashed label="elaborated-enum-specifier"]
  550 -> 81 [style=dashed label="elaborated-type-specifier"]
  550 -> 82 [style=dashed label="empty-declaration"]
  550 -> 83 [style=dashed label="enum-head"]
  550 -> 84 [style=dashed label="enum-key"]
  550 -> 85 [style=dashed label="enum-name"]
  550 -> 86 [style=dashed label="enum-specifier"]
  550 -> 87 [style=dashed label="explicit-instantiation"]
  550 -> 88 [style=dashed label="explicit-specialization"]
  550 -> 89 [style=dashed label="explicit-specifier"]
  550 -> 90 [style=dashed label="export-declaration"]
  550 -> 91 [style=dashed label="function-definition"]
  550 -> 92 [style=dashed label="function-specifier"]
  550 -> 94 [style=dashed label="id-expression"]
  550 -> 95 [style=dashed label="linkage-specification"]
  550 -> 96 [style=dashed label="literal-operator-id"]
  550 -> 98 [style=dashed label="module-import-declaration"]
  550 -> 99 [style=dashed label="named-namespace-definition"]
  550 -> 100 [style=dashed label="namespace-alias"]
  550 -> 101 [style=dashed label="namespace-alias-definition"]
  550 -> 102 [style=dashed label="namespace-definition"]
  550 -> 103 [style=dashed label="namespace-name"]
  550 -> 104 [style=dashed label="nested-name-specifier"]
  550 -> 105 [style=dashed label="nested-namespace-definition"]
  550 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  550 -> 107 [style=dashed label="noptr-declarator"]
  550 -> 108 [style=dashed label="opaque-enum-declaration"]
  550 -> 109 [style=dashed label="operator-function-id"]
  550 -> 110 [style=dashed label="placeholder-type-specifier"]
  550 -> 111 [style=dashed label="ptr-declarator"]
  550 -> 112 [style=dashed label="ptr-operator"]
  550 -> 113 [style=dashed label="qualified-id"]
  550 -> 114 [style=dashed label="simple-declaration"]
  550 -> 115 [style=dashed label="simple-template-id"]
  550 -> 116 [style=dashed label="simple-type-specifier"]
  550 -> 117 [style=dashed label="static_assert-declaration"]
  550 -> 118 [style=dashed label="storage-class-specifier"]
  550 -> 119 [style=dashed label="template-declaration"]
  550 -> 120 [style=dashed label="template-head"]
  550 -> 121 [style=dashed label="template-id"]
  550 -> 122 [style=dashed label="template-name"]
  550 -> 124 [style=dashed label="type-constraint"]
  550 -> 125 [style=dashed label="type-name"]
  550 -> 126 [style=dashed label="type-specifier"]
  550 -> 127 [style=dashed label="typedef-name"]
  550 -> 128 [style=dashed label="typename-specifier"]
  550 -> 129 [style=dashed label="unnamed-namespace-definition"]
  550 -> 130 [style=dashed label="unqualified-id"]
  550 -> 131 [style=dashed label="using-declaration"]
  550 -> 132 [style=dashed label="using-directive"]
  550 -> 133 [style=dashed label="using-enum-declaration"]
  550 -> "550R415d" [label="[\"export-keyword\"]", style=solid]
 "550R415d" [label="R415", fillcolor=5, shape=diamond, style=filled]
  550 -> "550R415" [style=solid]
 "550R415" [label="R415", fillcolor=3, shape=diamond, style=filled]
  551 [label="State 551\n\l624 module-declaration: \"module-keyword\" module-name ';' •\l"]
  551 -> "551R624" [style=solid]
 "551R624" [label="R624", fillcolor=3, shape=diamond, style=filled]
  552 [label="State 552\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l628 module-declaration: \"module-keyword\" module-name attribute-specifier-seq • ';'\l"]
  552 -> 1057 [style=solid label="';'"]
  552 -> 4 [style=solid label="\"alignas\""]
  552 -> 10 [style=solid label="'['"]
  552 -> 58 [style=dashed label="alignment-specifier"]
  552 -> 265 [style=dashed label="attribute-specifier"]
  553 [label="State 553\n\l626 module-declaration: \"module-keyword\" module-name module-partition • ';'\l630                   | \"module-keyword\" module-name module-partition • attribute-specifier-seq ';'\l"]
  553 -> 1058 [style=solid label="';'"]
  553 -> 4 [style=solid label="\"alignas\""]
  553 -> 10 [style=solid label="'['"]
  553 -> 58 [style=dashed label="alignment-specifier"]
  553 -> 61 [style=dashed label="attribute-specifier"]
  553 -> 1059 [style=dashed label="attribute-specifier-seq"]
  554 [label="State 554\n\l637 module-name: module-name-qualifier IDENTIFIER •\l640 module-name-qualifier: module-name-qualifier IDENTIFIER • '.'\l"]
  554 -> 1060 [style=solid label="'.'"]
  554 -> "554R637" [style=solid]
 "554R637" [label="R637", fillcolor=3, shape=diamond, style=filled]
  555 [label="State 555\n\l639 module-name-qualifier: IDENTIFIER • '.'\l641 module-partition: ':' IDENTIFIER •\l"]
  555 -> 549 [style=solid label="'.'"]
  555 -> "555R641" [style=solid]
 "555R641" [label="R641", fillcolor=3, shape=diamond, style=filled]
  556 [label="State 556\n\l640 module-name-qualifier: module-name-qualifier • IDENTIFIER '.'\l642 module-partition: ':' module-name-qualifier • IDENTIFIER\l"]
  556 -> 1061 [style=solid label="IDENTIFIER"]
  557 [label="State 557\n\l420 header-name: '<' \"h-char-sequence\" • '>'\l"]
  557 -> 1062 [style=solid label="'>'"]
  558 [label="State 558\n\l424 header-name: \"h-char-sequence\" h-char •\l"]
  558 -> "558R424" [style=solid]
 "558R424" [label="R424", fillcolor=3, shape=diamond, style=filled]
  559 [label="State 559\n\l910 q-char: EXCEPT_NEW_LINE_AND_QUOTATION_MARK •\l"]
  559 -> "559R910" [style=solid]
 "559R910" [label="R910", fillcolor=3, shape=diamond, style=filled]
  560 [label="State 560\n\l911 q-char-sequence: q-char •\l"]
  560 -> "560R911" [style=solid]
 "560R911" [label="R911", fillcolor=3, shape=diamond, style=filled]
  561 [label="State 561\n\l421 header-name: '\"' q-char-sequence • '\"'\l912 q-char-sequence: q-char-sequence • q-char\l"]
  561 -> 559 [style=solid label="EXCEPT_NEW_LINE_AND_QUOTATION_MARK"]
  561 -> 1063 [style=solid label="'\"'"]
  561 -> 1064 [style=dashed label="q-char"]
  562 [label="State 562\n\l635 module-import-declaration: \"import-keyword\" header-name ';' •\l"]
  562 -> "562R635" [style=solid]
 "562R635" [label="R635", fillcolor=3, shape=diamond, style=filled]
  563 [label="State 563\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l636 module-import-declaration: \"import-keyword\" header-name attribute-specifier-seq • ';'\l"]
  563 -> 1065 [style=solid label="';'"]
  563 -> 4 [style=solid label="\"alignas\""]
  563 -> 10 [style=solid label="'['"]
  563 -> 58 [style=dashed label="alignment-specifier"]
  563 -> 265 [style=dashed label="attribute-specifier"]
  564 [label="State 564\n\l631 module-import-declaration: \"import-keyword\" module-name ';' •\l"]
  564 -> "564R631" [style=solid]
 "564R631" [label="R631", fillcolor=3, shape=diamond, style=filled]
  565 [label="State 565\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l632 module-import-declaration: \"import-keyword\" module-name attribute-specifier-seq • ';'\l"]
  565 -> 1066 [style=solid label="';'"]
  565 -> 4 [style=solid label="\"alignas\""]
  565 -> 10 [style=solid label="'['"]
  565 -> 58 [style=dashed label="alignment-specifier"]
  565 -> 265 [style=dashed label="attribute-specifier"]
  566 [label="State 566\n\l633 module-import-declaration: \"import-keyword\" module-partition ';' •\l"]
  566 -> "566R633" [style=solid]
 "566R633" [label="R633", fillcolor=3, shape=diamond, style=filled]
  567 [label="State 567\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l634 module-import-declaration: \"import-keyword\" module-partition attribute-specifier-seq • ';'\l"]
  567 -> 1067 [style=solid label="';'"]
  567 -> 4 [style=solid label="\"alignas\""]
  567 -> 10 [style=solid label="'['"]
  567 -> 58 [style=dashed label="alignment-specifier"]
  567 -> 265 [style=dashed label="attribute-specifier"]
  568 [label="State 568\n\l652 namespace-alias-definition: \"namespace\" IDENTIFIER '=' • qualified-namespace-specifier ';'\l"]
  568 -> 258 [style=solid label="IDENTIFIER"]
  568 -> 9 [style=solid label="\"::\""]
  568 -> 135 [style=solid label="\"decltype\""]
  568 -> 66 [style=dashed label="class-name"]
  568 -> 139 [style=dashed label="decltype-specifier"]
  568 -> 85 [style=dashed label="enum-name"]
  568 -> 100 [style=dashed label="namespace-alias"]
  568 -> 1068 [style=dashed label="namespace-name"]
  568 -> 1069 [style=dashed label="nested-name-specifier"]
  568 -> 1070 [style=dashed label="qualified-namespace-specifier"]
  568 -> 142 [style=dashed label="simple-template-id"]
  568 -> 143 [style=dashed label="template-name"]
  568 -> 144 [style=dashed label="type-name"]
  568 -> 127 [style=dashed label="typedef-name"]
  569 [label="State 569\n\l648 named-namespace-definition: \"namespace\" IDENTIFIER '{' • namespace-body '}'\l"]
  569 -> 1 [style=solid label="IDENTIFIER"]
  569 -> 2 [style=solid label="\"using\""]
  569 -> 3 [style=solid label="';'"]
  569 -> 4 [style=solid label="\"alignas\""]
  569 -> 5 [style=solid label="'('"]
  569 -> 6 [style=solid label="\"...\""]
  569 -> 7 [style=solid label="'&'"]
  569 -> 8 [style=solid label="\"asm\""]
  569 -> 9 [style=solid label="\"::\""]
  569 -> 10 [style=solid label="'['"]
  569 -> 11 [style=solid label="\"virtual\""]
  569 -> 12 [style=solid label="\"class\""]
  569 -> 13 [style=solid label="\"struct\""]
  569 -> 14 [style=solid label="\"union\""]
  569 -> 15 [style=solid label="\"template\""]
  569 -> 16 [style=solid label="\"&&\""]
  569 -> 17 [style=solid label="\"operator\""]
  569 -> 18 [style=solid label="\"const\""]
  569 -> 19 [style=solid label="\"volatile\""]
  569 -> 20 [style=solid label="\"friend\""]
  569 -> 21 [style=solid label="\"typedef\""]
  569 -> 22 [style=solid label="\"constexpr\""]
  569 -> 23 [style=solid label="\"consteval\""]
  569 -> 24 [style=solid label="\"constinit\""]
  569 -> 25 [style=solid label="\"inline\""]
  569 -> 26 [style=solid label="\"decltype\""]
  569 -> 27 [style=solid label="\"enum\""]
  569 -> 28 [style=solid label="\"extern\""]
  569 -> 29 [style=solid label="\"explicit\""]
  569 -> 30 [style=solid label="\"export\""]
  569 -> 158 [style=solid label="\"export-keyword\""]
  569 -> 32 [style=solid label="'*'"]
  569 -> 34 [style=solid label="\"import-keyword\""]
  569 -> 35 [style=solid label="\"namespace\""]
  569 -> 36 [style=solid label="'~'"]
  569 -> 37 [style=solid label="\"auto\""]
  569 -> 38 [style=solid label="\"char\""]
  569 -> 39 [style=solid label="\"char8_t\""]
  569 -> 40 [style=solid label="\"char16_t\""]
  569 -> 41 [style=solid label="\"char32_t\""]
  569 -> 42 [style=solid label="\"wchar_t\""]
  569 -> 43 [style=solid label="\"bool\""]
  569 -> 44 [style=solid label="\"short\""]
  569 -> 45 [style=solid label="\"int\""]
  569 -> 46 [style=solid label="\"long\""]
  569 -> 47 [style=solid label="\"signed\""]
  569 -> 48 [style=solid label="\"unsigned\""]
  569 -> 49 [style=solid label="\"float\""]
  569 -> 50 [style=solid label="\"double\""]
  569 -> 51 [style=solid label="\"void\""]
  569 -> 52 [style=solid label="\"static_assert\""]
  569 -> 53 [style=solid label="\"static\""]
  569 -> 54 [style=solid label="\"thread_local\""]
  569 -> 55 [style=solid label="\"mutable\""]
  569 -> 56 [style=solid label="\"typename\""]
  569 -> 57 [style=dashed label="alias-declaration"]
  569 -> 58 [style=dashed label="alignment-specifier"]
  569 -> 59 [style=dashed label="asm-declaration"]
  569 -> 60 [style=dashed label="attribute-declaration"]
  569 -> 61 [style=dashed label="attribute-specifier"]
  569 -> 62 [style=dashed label="attribute-specifier-seq"]
  569 -> 63 [style=dashed label="block-declaration"]
  569 -> 64 [style=dashed label="class-head"]
  569 -> 65 [style=dashed label="class-key"]
  569 -> 66 [style=dashed label="class-name"]
  569 -> 67 [style=dashed label="class-specifier"]
  569 -> 68 [style=dashed label="concept-name"]
  569 -> 69 [style=dashed label="conversion-function-id"]
  569 -> 70 [style=dashed label="cv-qualifier"]
  569 -> 71 [style=dashed label="decl-specifier"]
  569 -> 72 [style=dashed label="decl-specifier-seq"]
  569 -> 73 [style=dashed label="declaration"]
  569 -> 570 [style=dashed label="declaration-seq"]
  569 -> 75 [style=dashed label="declarator"]
  569 -> 76 [style=dashed label="declarator-id"]
  569 -> 77 [style=dashed label="decltype-specifier"]
  569 -> 78 [style=dashed label="deduction-guide"]
  569 -> 79 [style=dashed label="defining-type-specifier"]
  569 -> 80 [style=dashed label="elaborated-enum-specifier"]
  569 -> 81 [style=dashed label="elaborated-type-specifier"]
  569 -> 82 [style=dashed label="empty-declaration"]
  569 -> 83 [style=dashed label="enum-head"]
  569 -> 84 [style=dashed label="enum-key"]
  569 -> 85 [style=dashed label="enum-name"]
  569 -> 86 [style=dashed label="enum-specifier"]
  569 -> 87 [style=dashed label="explicit-instantiation"]
  569 -> 88 [style=dashed label="explicit-specialization"]
  569 -> 89 [style=dashed label="explicit-specifier"]
  569 -> 90 [style=dashed label="export-declaration"]
  569 -> 91 [style=dashed label="function-definition"]
  569 -> 92 [style=dashed label="function-specifier"]
  569 -> 94 [style=dashed label="id-expression"]
  569 -> 95 [style=dashed label="linkage-specification"]
  569 -> 96 [style=dashed label="literal-operator-id"]
  569 -> 98 [style=dashed label="module-import-declaration"]
  569 -> 99 [style=dashed label="named-namespace-definition"]
  569 -> 100 [style=dashed label="namespace-alias"]
  569 -> 101 [style=dashed label="namespace-alias-definition"]
  569 -> 1071 [style=dashed label="namespace-body"]
  569 -> 102 [style=dashed label="namespace-definition"]
  569 -> 103 [style=dashed label="namespace-name"]
  569 -> 104 [style=dashed label="nested-name-specifier"]
  569 -> 105 [style=dashed label="nested-namespace-definition"]
  569 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  569 -> 107 [style=dashed label="noptr-declarator"]
  569 -> 108 [style=dashed label="opaque-enum-declaration"]
  569 -> 109 [style=dashed label="operator-function-id"]
  569 -> 110 [style=dashed label="placeholder-type-specifier"]
  569 -> 111 [style=dashed label="ptr-declarator"]
  569 -> 112 [style=dashed label="ptr-operator"]
  569 -> 113 [style=dashed label="qualified-id"]
  569 -> 114 [style=dashed label="simple-declaration"]
  569 -> 115 [style=dashed label="simple-template-id"]
  569 -> 116 [style=dashed label="simple-type-specifier"]
  569 -> 117 [style=dashed label="static_assert-declaration"]
  569 -> 118 [style=dashed label="storage-class-specifier"]
  569 -> 119 [style=dashed label="template-declaration"]
  569 -> 120 [style=dashed label="template-head"]
  569 -> 121 [style=dashed label="template-id"]
  569 -> 122 [style=dashed label="template-name"]
  569 -> 124 [style=dashed label="type-constraint"]
  569 -> 125 [style=dashed label="type-name"]
  569 -> 126 [style=dashed label="type-specifier"]
  569 -> 127 [style=dashed label="typedef-name"]
  569 -> 128 [style=dashed label="typename-specifier"]
  569 -> 129 [style=dashed label="unnamed-namespace-definition"]
  569 -> 130 [style=dashed label="unqualified-id"]
  569 -> 131 [style=dashed label="using-declaration"]
  569 -> 132 [style=dashed label="using-directive"]
  569 -> 133 [style=dashed label="using-enum-declaration"]
  570 [label="State 570\n\l227 declaration-seq: declaration-seq • declaration\l653 namespace-body: declaration-seq •\l"]
  570 -> 1 [style=solid label="IDENTIFIER"]
  570 -> 2 [style=solid label="\"using\""]
  570 -> 3 [style=solid label="';'"]
  570 -> 4 [style=solid label="\"alignas\""]
  570 -> 5 [style=solid label="'('"]
  570 -> 6 [style=solid label="\"...\""]
  570 -> 7 [style=solid label="'&'"]
  570 -> 8 [style=solid label="\"asm\""]
  570 -> 9 [style=solid label="\"::\""]
  570 -> 10 [style=solid label="'['"]
  570 -> 11 [style=solid label="\"virtual\""]
  570 -> 12 [style=solid label="\"class\""]
  570 -> 13 [style=solid label="\"struct\""]
  570 -> 14 [style=solid label="\"union\""]
  570 -> 15 [style=solid label="\"template\""]
  570 -> 16 [style=solid label="\"&&\""]
  570 -> 17 [style=solid label="\"operator\""]
  570 -> 18 [style=solid label="\"const\""]
  570 -> 19 [style=solid label="\"volatile\""]
  570 -> 20 [style=solid label="\"friend\""]
  570 -> 21 [style=solid label="\"typedef\""]
  570 -> 22 [style=solid label="\"constexpr\""]
  570 -> 23 [style=solid label="\"consteval\""]
  570 -> 24 [style=solid label="\"constinit\""]
  570 -> 25 [style=solid label="\"inline\""]
  570 -> 26 [style=solid label="\"decltype\""]
  570 -> 27 [style=solid label="\"enum\""]
  570 -> 28 [style=solid label="\"extern\""]
  570 -> 29 [style=solid label="\"explicit\""]
  570 -> 30 [style=solid label="\"export\""]
  570 -> 158 [style=solid label="\"export-keyword\""]
  570 -> 32 [style=solid label="'*'"]
  570 -> 34 [style=solid label="\"import-keyword\""]
  570 -> 35 [style=solid label="\"namespace\""]
  570 -> 36 [style=solid label="'~'"]
  570 -> 37 [style=solid label="\"auto\""]
  570 -> 38 [style=solid label="\"char\""]
  570 -> 39 [style=solid label="\"char8_t\""]
  570 -> 40 [style=solid label="\"char16_t\""]
  570 -> 41 [style=solid label="\"char32_t\""]
  570 -> 42 [style=solid label="\"wchar_t\""]
  570 -> 43 [style=solid label="\"bool\""]
  570 -> 44 [style=solid label="\"short\""]
  570 -> 45 [style=solid label="\"int\""]
  570 -> 46 [style=solid label="\"long\""]
  570 -> 47 [style=solid label="\"signed\""]
  570 -> 48 [style=solid label="\"unsigned\""]
  570 -> 49 [style=solid label="\"float\""]
  570 -> 50 [style=solid label="\"double\""]
  570 -> 51 [style=solid label="\"void\""]
  570 -> 52 [style=solid label="\"static_assert\""]
  570 -> 53 [style=solid label="\"static\""]
  570 -> 54 [style=solid label="\"thread_local\""]
  570 -> 55 [style=solid label="\"mutable\""]
  570 -> 56 [style=solid label="\"typename\""]
  570 -> 57 [style=dashed label="alias-declaration"]
  570 -> 58 [style=dashed label="alignment-specifier"]
  570 -> 59 [style=dashed label="asm-declaration"]
  570 -> 60 [style=dashed label="attribute-declaration"]
  570 -> 61 [style=dashed label="attribute-specifier"]
  570 -> 62 [style=dashed label="attribute-specifier-seq"]
  570 -> 63 [style=dashed label="block-declaration"]
  570 -> 64 [style=dashed label="class-head"]
  570 -> 65 [style=dashed label="class-key"]
  570 -> 66 [style=dashed label="class-name"]
  570 -> 67 [style=dashed label="class-specifier"]
  570 -> 68 [style=dashed label="concept-name"]
  570 -> 69 [style=dashed label="conversion-function-id"]
  570 -> 70 [style=dashed label="cv-qualifier"]
  570 -> 71 [style=dashed label="decl-specifier"]
  570 -> 72 [style=dashed label="decl-specifier-seq"]
  570 -> 290 [style=dashed label="declaration"]
  570 -> 75 [style=dashed label="declarator"]
  570 -> 76 [style=dashed label="declarator-id"]
  570 -> 77 [style=dashed label="decltype-specifier"]
  570 -> 78 [style=dashed label="deduction-guide"]
  570 -> 79 [style=dashed label="defining-type-specifier"]
  570 -> 80 [style=dashed label="elaborated-enum-specifier"]
  570 -> 81 [style=dashed label="elaborated-type-specifier"]
  570 -> 82 [style=dashed label="empty-declaration"]
  570 -> 83 [style=dashed label="enum-head"]
  570 -> 84 [style=dashed label="enum-key"]
  570 -> 85 [style=dashed label="enum-name"]
  570 -> 86 [style=dashed label="enum-specifier"]
  570 -> 87 [style=dashed label="explicit-instantiation"]
  570 -> 88 [style=dashed label="explicit-specialization"]
  570 -> 89 [style=dashed label="explicit-specifier"]
  570 -> 90 [style=dashed label="export-declaration"]
  570 -> 91 [style=dashed label="function-definition"]
  570 -> 92 [style=dashed label="function-specifier"]
  570 -> 94 [style=dashed label="id-expression"]
  570 -> 95 [style=dashed label="linkage-specification"]
  570 -> 96 [style=dashed label="literal-operator-id"]
  570 -> 98 [style=dashed label="module-import-declaration"]
  570 -> 99 [style=dashed label="named-namespace-definition"]
  570 -> 100 [style=dashed label="namespace-alias"]
  570 -> 101 [style=dashed label="namespace-alias-definition"]
  570 -> 102 [style=dashed label="namespace-definition"]
  570 -> 103 [style=dashed label="namespace-name"]
  570 -> 104 [style=dashed label="nested-name-specifier"]
  570 -> 105 [style=dashed label="nested-namespace-definition"]
  570 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  570 -> 107 [style=dashed label="noptr-declarator"]
  570 -> 108 [style=dashed label="opaque-enum-declaration"]
  570 -> 109 [style=dashed label="operator-function-id"]
  570 -> 110 [style=dashed label="placeholder-type-specifier"]
  570 -> 111 [style=dashed label="ptr-declarator"]
  570 -> 112 [style=dashed label="ptr-operator"]
  570 -> 113 [style=dashed label="qualified-id"]
  570 -> 114 [style=dashed label="simple-declaration"]
  570 -> 115 [style=dashed label="simple-template-id"]
  570 -> 116 [style=dashed label="simple-type-specifier"]
  570 -> 117 [style=dashed label="static_assert-declaration"]
  570 -> 118 [style=dashed label="storage-class-specifier"]
  570 -> 119 [style=dashed label="template-declaration"]
  570 -> 120 [style=dashed label="template-head"]
  570 -> 121 [style=dashed label="template-id"]
  570 -> 122 [style=dashed label="template-name"]
  570 -> 124 [style=dashed label="type-constraint"]
  570 -> 125 [style=dashed label="type-name"]
  570 -> 126 [style=dashed label="type-specifier"]
  570 -> 127 [style=dashed label="typedef-name"]
  570 -> 128 [style=dashed label="typename-specifier"]
  570 -> 129 [style=dashed label="unnamed-namespace-definition"]
  570 -> 130 [style=dashed label="unqualified-id"]
  570 -> 131 [style=dashed label="using-declaration"]
  570 -> 132 [style=dashed label="using-directive"]
  570 -> 133 [style=dashed label="using-enum-declaration"]
  570 -> "570R653" [style=solid]
 "570R653" [label="R653", fillcolor=3, shape=diamond, style=filled]
  571 [label="State 571\n\l1151 unnamed-namespace-definition: \"namespace\" '{' namespace-body • '}'\l"]
  571 -> 1072 [style=solid label="'}'"]
  572 [label="State 572\n\l650 named-namespace-definition: \"namespace\" attribute-specifier-seq IDENTIFIER • '{' namespace-body '}'\l"]
  572 -> 1073 [style=solid label="'{'"]
  573 [label="State 573\n\l1153 unnamed-namespace-definition: \"namespace\" attribute-specifier-seq '{' • namespace-body '}'\l"]
  573 -> 1 [style=solid label="IDENTIFIER"]
  573 -> 2 [style=solid label="\"using\""]
  573 -> 3 [style=solid label="';'"]
  573 -> 4 [style=solid label="\"alignas\""]
  573 -> 5 [style=solid label="'('"]
  573 -> 6 [style=solid label="\"...\""]
  573 -> 7 [style=solid label="'&'"]
  573 -> 8 [style=solid label="\"asm\""]
  573 -> 9 [style=solid label="\"::\""]
  573 -> 10 [style=solid label="'['"]
  573 -> 11 [style=solid label="\"virtual\""]
  573 -> 12 [style=solid label="\"class\""]
  573 -> 13 [style=solid label="\"struct\""]
  573 -> 14 [style=solid label="\"union\""]
  573 -> 15 [style=solid label="\"template\""]
  573 -> 16 [style=solid label="\"&&\""]
  573 -> 17 [style=solid label="\"operator\""]
  573 -> 18 [style=solid label="\"const\""]
  573 -> 19 [style=solid label="\"volatile\""]
  573 -> 20 [style=solid label="\"friend\""]
  573 -> 21 [style=solid label="\"typedef\""]
  573 -> 22 [style=solid label="\"constexpr\""]
  573 -> 23 [style=solid label="\"consteval\""]
  573 -> 24 [style=solid label="\"constinit\""]
  573 -> 25 [style=solid label="\"inline\""]
  573 -> 26 [style=solid label="\"decltype\""]
  573 -> 27 [style=solid label="\"enum\""]
  573 -> 28 [style=solid label="\"extern\""]
  573 -> 29 [style=solid label="\"explicit\""]
  573 -> 30 [style=solid label="\"export\""]
  573 -> 158 [style=solid label="\"export-keyword\""]
  573 -> 32 [style=solid label="'*'"]
  573 -> 34 [style=solid label="\"import-keyword\""]
  573 -> 35 [style=solid label="\"namespace\""]
  573 -> 36 [style=solid label="'~'"]
  573 -> 37 [style=solid label="\"auto\""]
  573 -> 38 [style=solid label="\"char\""]
  573 -> 39 [style=solid label="\"char8_t\""]
  573 -> 40 [style=solid label="\"char16_t\""]
  573 -> 41 [style=solid label="\"char32_t\""]
  573 -> 42 [style=solid label="\"wchar_t\""]
  573 -> 43 [style=solid label="\"bool\""]
  573 -> 44 [style=solid label="\"short\""]
  573 -> 45 [style=solid label="\"int\""]
  573 -> 46 [style=solid label="\"long\""]
  573 -> 47 [style=solid label="\"signed\""]
  573 -> 48 [style=solid label="\"unsigned\""]
  573 -> 49 [style=solid label="\"float\""]
  573 -> 50 [style=solid label="\"double\""]
  573 -> 51 [style=solid label="\"void\""]
  573 -> 52 [style=solid label="\"static_assert\""]
  573 -> 53 [style=solid label="\"static\""]
  573 -> 54 [style=solid label="\"thread_local\""]
  573 -> 55 [style=solid label="\"mutable\""]
  573 -> 56 [style=solid label="\"typename\""]
  573 -> 57 [style=dashed label="alias-declaration"]
  573 -> 58 [style=dashed label="alignment-specifier"]
  573 -> 59 [style=dashed label="asm-declaration"]
  573 -> 60 [style=dashed label="attribute-declaration"]
  573 -> 61 [style=dashed label="attribute-specifier"]
  573 -> 62 [style=dashed label="attribute-specifier-seq"]
  573 -> 63 [style=dashed label="block-declaration"]
  573 -> 64 [style=dashed label="class-head"]
  573 -> 65 [style=dashed label="class-key"]
  573 -> 66 [style=dashed label="class-name"]
  573 -> 67 [style=dashed label="class-specifier"]
  573 -> 68 [style=dashed label="concept-name"]
  573 -> 69 [style=dashed label="conversion-function-id"]
  573 -> 70 [style=dashed label="cv-qualifier"]
  573 -> 71 [style=dashed label="decl-specifier"]
  573 -> 72 [style=dashed label="decl-specifier-seq"]
  573 -> 73 [style=dashed label="declaration"]
  573 -> 570 [style=dashed label="declaration-seq"]
  573 -> 75 [style=dashed label="declarator"]
  573 -> 76 [style=dashed label="declarator-id"]
  573 -> 77 [style=dashed label="decltype-specifier"]
  573 -> 78 [style=dashed label="deduction-guide"]
  573 -> 79 [style=dashed label="defining-type-specifier"]
  573 -> 80 [style=dashed label="elaborated-enum-specifier"]
  573 -> 81 [style=dashed label="elaborated-type-specifier"]
  573 -> 82 [style=dashed label="empty-declaration"]
  573 -> 83 [style=dashed label="enum-head"]
  573 -> 84 [style=dashed label="enum-key"]
  573 -> 85 [style=dashed label="enum-name"]
  573 -> 86 [style=dashed label="enum-specifier"]
  573 -> 87 [style=dashed label="explicit-instantiation"]
  573 -> 88 [style=dashed label="explicit-specialization"]
  573 -> 89 [style=dashed label="explicit-specifier"]
  573 -> 90 [style=dashed label="export-declaration"]
  573 -> 91 [style=dashed label="function-definition"]
  573 -> 92 [style=dashed label="function-specifier"]
  573 -> 94 [style=dashed label="id-expression"]
  573 -> 95 [style=dashed label="linkage-specification"]
  573 -> 96 [style=dashed label="literal-operator-id"]
  573 -> 98 [style=dashed label="module-import-declaration"]
  573 -> 99 [style=dashed label="named-namespace-definition"]
  573 -> 100 [style=dashed label="namespace-alias"]
  573 -> 101 [style=dashed label="namespace-alias-definition"]
  573 -> 1074 [style=dashed label="namespace-body"]
  573 -> 102 [style=dashed label="namespace-definition"]
  573 -> 103 [style=dashed label="namespace-name"]
  573 -> 104 [style=dashed label="nested-name-specifier"]
  573 -> 105 [style=dashed label="nested-namespace-definition"]
  573 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  573 -> 107 [style=dashed label="noptr-declarator"]
  573 -> 108 [style=dashed label="opaque-enum-declaration"]
  573 -> 109 [style=dashed label="operator-function-id"]
  573 -> 110 [style=dashed label="placeholder-type-specifier"]
  573 -> 111 [style=dashed label="ptr-declarator"]
  573 -> 112 [style=dashed label="ptr-operator"]
  573 -> 113 [style=dashed label="qualified-id"]
  573 -> 114 [style=dashed label="simple-declaration"]
  573 -> 115 [style=dashed label="simple-template-id"]
  573 -> 116 [style=dashed label="simple-type-specifier"]
  573 -> 117 [style=dashed label="static_assert-declaration"]
  573 -> 118 [style=dashed label="storage-class-specifier"]
  573 -> 119 [style=dashed label="template-declaration"]
  573 -> 120 [style=dashed label="template-head"]
  573 -> 121 [style=dashed label="template-id"]
  573 -> 122 [style=dashed label="template-name"]
  573 -> 124 [style=dashed label="type-constraint"]
  573 -> 125 [style=dashed label="type-name"]
  573 -> 126 [style=dashed label="type-specifier"]
  573 -> 127 [style=dashed label="typedef-name"]
  573 -> 128 [style=dashed label="typename-specifier"]
  573 -> 129 [style=dashed label="unnamed-namespace-definition"]
  573 -> 130 [style=dashed label="unqualified-id"]
  573 -> 131 [style=dashed label="using-declaration"]
  573 -> 132 [style=dashed label="using-directive"]
  573 -> 133 [style=dashed label="using-enum-declaration"]
  574 [label="State 574\n\l277 enclosing-namespace-specifier: enclosing-namespace-specifier \"::\" • IDENTIFIER\l278                              | enclosing-namespace-specifier \"::\" • \"inline\" IDENTIFIER\l666 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" • IDENTIFIER '{' namespace-body '}'\l667                            | \"namespace\" enclosing-namespace-specifier \"::\" • \"inline\" IDENTIFIER '{' namespace-body '}'\l"]
  574 -> 1075 [style=solid label="IDENTIFIER"]
  574 -> 1076 [style=solid label="\"inline\""]
  575 [label="State 575\n\l1038 static_assert-declaration: \"static_assert\" '(' constant-expression • ')' ';'\l1039                          | \"static_assert\" '(' constant-expression • ',' string-literal ')' ';'\l"]
  575 -> 1077 [style=solid label="')'"]
  575 -> 1078 [style=solid label="','"]
  576 [label="State 576\n\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l1126 typename-specifier: \"typename\" nested-name-specifier IDENTIFIER •\l"]
  576 -> 726 [style=solid label="\"::\""]
  576 -> "576R1066" [label="['<']", style=solid]
 "576R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  576 -> "576R1126d" [label="[\"::\", '<']", style=solid]
 "576R1126d" [label="R1126", fillcolor=5, shape=diamond, style=filled]
  576 -> "576R1126" [style=solid]
 "576R1126" [label="R1126", fillcolor=3, shape=diamond, style=filled]
  577 [label="State 577\n\l665 nested-name-specifier: nested-name-specifier \"template\" • simple-template-id \"::\"\l1128 typename-specifier: \"typename\" nested-name-specifier \"template\" • simple-template-id\l"]
  577 -> 315 [style=solid label="IDENTIFIER"]
  577 -> 1079 [style=dashed label="simple-template-id"]
  577 -> 143 [style=dashed label="template-name"]
  578 [label="State 578\n\l664 nested-name-specifier: nested-name-specifier simple-template-id • \"::\"\l1127 typename-specifier: \"typename\" nested-name-specifier simple-template-id •\l"]
  578 -> 733 [style=solid label="\"::\""]
  578 -> "578R1127d" [label="[\"::\"]", style=solid]
 "578R1127d" [label="R1127", fillcolor=5, shape=diamond, style=filled]
  578 -> "578R1127" [style=solid]
 "578R1127" [label="R1127", fillcolor=3, shape=diamond, style=filled]
  579 [label="State 579\n\l1185 using-directive: attribute-specifier-seq \"using\" \"namespace\" • namespace-name ';'\l1187                | attribute-specifier-seq \"using\" \"namespace\" • nested-name-specifier namespace-name ';'\l"]
  579 -> 258 [style=solid label="IDENTIFIER"]
  579 -> 9 [style=solid label="\"::\""]
  579 -> 135 [style=solid label="\"decltype\""]
  579 -> 66 [style=dashed label="class-name"]
  579 -> 139 [style=dashed label="decltype-specifier"]
  579 -> 85 [style=dashed label="enum-name"]
  579 -> 100 [style=dashed label="namespace-alias"]
  579 -> 1080 [style=dashed label="namespace-name"]
  579 -> 1081 [style=dashed label="nested-name-specifier"]
  579 -> 142 [style=dashed label="simple-template-id"]
  579 -> 143 [style=dashed label="template-name"]
  579 -> 144 [style=dashed label="type-name"]
  579 -> 127 [style=dashed label="typedef-name"]
  580 [label="State 580\n\l 21 asm-declaration: attribute-specifier-seq \"asm\" '(' • string-literal ')' ';'\l"]
  580 -> 185 [style=solid label="\"u8\""]
  580 -> 186 [style=solid label="'u'"]
  580 -> 187 [style=solid label="'U'"]
  580 -> 188 [style=solid label="'L'"]
  580 -> 203 [style=solid label="'\"'"]
  580 -> 209 [style=solid label="'R'"]
  580 -> 212 [style=dashed label="encoding-prefix"]
  580 -> 1082 [style=dashed label="string-literal"]
  581 [label="State 581\n\l980 simple-declaration: attribute-specifier-seq decl-specifier-seq '[' • identifier-list ']' initializer ';'\l"]
  581 -> 644 [style=solid label="IDENTIFIER"]
  581 -> 1083 [style=dashed label="identifier-list"]
  582 [label="State 582\n\l400 function-definition: attribute-specifier-seq decl-specifier-seq declarator • function-body\l404                    | attribute-specifier-seq decl-specifier-seq declarator • virt-specifier-seq function-body\l408                    | attribute-specifier-seq decl-specifier-seq declarator • requires-clause function-body\l473 init-declarator: declarator •\l474                | declarator • initializer\l475                | declarator • requires-clause\l"]
  582 -> 646 [style=solid label="'='"]
  582 -> 647 [style=solid label="'('"]
  582 -> 293 [style=solid label="':'"]
  582 -> 648 [style=solid label="'{'"]
  582 -> 295 [style=solid label="\"final\""]
  582 -> 296 [style=solid label="\"try\""]
  582 -> 297 [style=solid label="\"requires\""]
  582 -> 298 [style=solid label="\"override\""]
  582 -> 649 [style=dashed label="brace-or-equal-initializer"]
  582 -> 650 [style=dashed label="braced-init-list"]
  582 -> 299 [style=dashed label="compound-statement"]
  582 -> 300 [style=dashed label="ctor-initializer"]
  582 -> 1084 [style=dashed label="function-body"]
  582 -> 302 [style=dashed label="function-try-block"]
  582 -> 652 [style=dashed label="initializer"]
  582 -> 1085 [style=dashed label="requires-clause"]
  582 -> 304 [style=dashed label="virt-specifier"]
  582 -> 1086 [style=dashed label="virt-specifier-seq"]
  582 -> "582R473" [style=solid]
 "582R473" [label="R473", fillcolor=3, shape=diamond, style=filled]
  583 [label="State 583\n\l477 init-declarator-list: init-declarator-list • ',' init-declarator\l979 simple-declaration: attribute-specifier-seq decl-specifier-seq init-declarator-list • ';'\l"]
  583 -> 1087 [style=solid label="';'"]
  583 -> 656 [style=solid label="','"]
  584 [label="State 584\n\l982 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier • '[' identifier-list ']' initializer ';'\l"]
  584 -> 1088 [style=solid label="'['"]
  585 [label="State 585\n\l694 nodeclspec-function-declaration: attribute-specifier-seq declarator ';' •\l"]
  585 -> "585R694" [style=solid]
 "585R694" [label="R694", fillcolor=3, shape=diamond, style=filled]
  586 [label="State 586\n\l398 function-definition: attribute-specifier-seq declarator function-body •\l"]
  586 -> "586R398" [style=solid]
 "586R398" [label="R398", fillcolor=3, shape=diamond, style=filled]
  587 [label="State 587\n\l406 function-definition: attribute-specifier-seq declarator requires-clause • function-body\l"]
  587 -> 291 [style=solid label="'='"]
  587 -> 293 [style=solid label="':'"]
  587 -> 294 [style=solid label="'{'"]
  587 -> 296 [style=solid label="\"try\""]
  587 -> 299 [style=dashed label="compound-statement"]
  587 -> 300 [style=dashed label="ctor-initializer"]
  587 -> 1089 [style=dashed label="function-body"]
  587 -> 302 [style=dashed label="function-try-block"]
  588 [label="State 588\n\l402 function-definition: attribute-specifier-seq declarator virt-specifier-seq • function-body\l1193 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  588 -> 291 [style=solid label="'='"]
  588 -> 293 [style=solid label="':'"]
  588 -> 294 [style=solid label="'{'"]
  588 -> 295 [style=solid label="\"final\""]
  588 -> 296 [style=solid label="\"try\""]
  588 -> 298 [style=solid label="\"override\""]
  588 -> 299 [style=dashed label="compound-statement"]
  588 -> 300 [style=dashed label="ctor-initializer"]
  588 -> 1090 [style=dashed label="function-body"]
  588 -> 302 [style=dashed label="function-try-block"]
  588 -> 707 [style=dashed label="virt-specifier"]
  589 [label="State 589\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l285 enum-head: enum-key attribute-specifier-seq •\l287          | enum-key attribute-specifier-seq • enum-head-name\l289          | enum-key attribute-specifier-seq • enum-base\l291          | enum-key attribute-specifier-seq • enum-head-name enum-base\l"]
  589 -> 309 [style=solid label="IDENTIFIER"]
  589 -> 4 [style=solid label="\"alignas\""]
  589 -> 9 [style=solid label="\"::\""]
  589 -> 10 [style=solid label="'['"]
  589 -> 310 [style=solid label="':'"]
  589 -> 135 [style=solid label="\"decltype\""]
  589 -> 58 [style=dashed label="alignment-specifier"]
  589 -> 265 [style=dashed label="attribute-specifier"]
  589 -> 66 [style=dashed label="class-name"]
  589 -> 139 [style=dashed label="decltype-specifier"]
  589 -> 714 [style=dashed label="enum-base"]
  589 -> 1091 [style=dashed label="enum-head-name"]
  589 -> 85 [style=dashed label="enum-name"]
  589 -> 100 [style=dashed label="namespace-alias"]
  589 -> 103 [style=dashed label="namespace-name"]
  589 -> 314 [style=dashed label="nested-name-specifier"]
  589 -> 142 [style=dashed label="simple-template-id"]
  589 -> 143 [style=dashed label="template-name"]
  589 -> 144 [style=dashed label="type-name"]
  589 -> 127 [style=dashed label="typedef-name"]
  589 -> "589R285" [style=solid]
 "589R285" [label="R285", fillcolor=3, shape=diamond, style=filled]
  590 [label="State 590\n\l286 enum-head: enum-key enum-head-name •\l290          | enum-key enum-head-name • enum-base\l"]
  590 -> 310 [style=solid label="':'"]
  590 -> 1092 [style=dashed label="enum-base"]
  590 -> "590R286" [style=solid]
 "590R286" [label="R286", fillcolor=3, shape=diamond, style=filled]
  591 [label="State 591\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l609 member-declarator: IDENTIFIER • ':' constant-expression\l611                  | IDENTIFIER • attribute-specifier-seq ':' constant-expression\l613                  | IDENTIFIER • ':' constant-expression brace-or-equal-initializer\l615                  | IDENTIFIER • attribute-specifier-seq ':' constant-expression brace-or-equal-initializer\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l1154 unqualified-id: IDENTIFIER •\l"]
  591 -> 4 [style=solid label="\"alignas\""]
  591 -> 10 [style=solid label="'['"]
  591 -> 1093 [style=solid label="':'"]
  591 -> 58 [style=dashed label="alignment-specifier"]
  591 -> 61 [style=dashed label="attribute-specifier"]
  591 -> 1094 [style=dashed label="attribute-specifier-seq"]
  591 -> "591R145d" [label="[\"alignas\", '[', ':']", style=solid]
 "591R145d" [label="R145", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R145" [style=solid]
 "591R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  591 -> "591R163d" [label="[\"decltype\", \"auto\"]", style=solid]
 "591R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R163" [label="['<']", style=solid]
 "591R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  591 -> "591R297d" [label="[IDENTIFIER, ';', \"alignas\", '(', \"...\", '&', \"::\", '[', ':', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "591R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R651d" [label="[\"::\"]", style=solid]
 "591R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R657d" [label="[\"::\"]", style=solid]
 "591R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R1066d" [label="[IDENTIFIER, ';', \"alignas\", '(', \"...\", '&', \"::\", '[', ':', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", '<', \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "591R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R1124d" [label="[IDENTIFIER, ';', \"alignas\", '(', \"...\", '&', \"::\", '[', ':', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "591R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R1154d" [label="[';', \"alignas\", '(', '[', ':']", style=solid]
 "591R1154d" [label="R1154", fillcolor=5, shape=diamond, style=filled]
  591 -> "591R1154" [label="['=', ',', '{', \"final\", \"try\", \"requires\", \"override\"]", style=solid]
 "591R1154" [label="R1154", fillcolor=3, shape=diamond, style=filled]
  592 [label="State 592\n\l  7 access-specifier: \"private\" •\l"]
  592 -> "592R7" [style=solid]
 "592R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  593 [label="State 593\n\l  8 access-specifier: \"protected\" •\l"]
  593 -> "593R8" [style=solid]
 "593R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  594 [label="State 594\n\l  9 access-specifier: \"public\" •\l"]
  594 -> "594R9" [style=solid]
 "594R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  595 [label="State 595\n\l 13 alias-declaration: \"using\" • IDENTIFIER '=' defining-type-id ';'\l 14                  | \"using\" • IDENTIFIER attribute-specifier-seq '=' defining-type-id ';'\l1178 using-declaration: \"using\" • using-declarator-list ';'\l1189 using-enum-declaration: \"using\" • elaborated-enum-specifier ';'\l"]
  595 -> 134 [style=solid label="IDENTIFIER"]
  595 -> 9 [style=solid label="\"::\""]
  595 -> 135 [style=solid label="\"decltype\""]
  595 -> 136 [style=solid label="\"enum\""]
  595 -> 138 [style=solid label="\"typename\""]
  595 -> 66 [style=dashed label="class-name"]
  595 -> 139 [style=dashed label="decltype-specifier"]
  595 -> 140 [style=dashed label="elaborated-enum-specifier"]
  595 -> 85 [style=dashed label="enum-name"]
  595 -> 100 [style=dashed label="namespace-alias"]
  595 -> 103 [style=dashed label="namespace-name"]
  595 -> 141 [style=dashed label="nested-name-specifier"]
  595 -> 142 [style=dashed label="simple-template-id"]
  595 -> 143 [style=dashed label="template-name"]
  595 -> 144 [style=dashed label="type-name"]
  595 -> 127 [style=dashed label="typedef-name"]
  595 -> 145 [style=dashed label="using-declarator"]
  595 -> 146 [style=dashed label="using-declarator-list"]
  596 [label="State 596\n\l275 empty-declaration: ';' •\l585 member-declaration: ';' •\l"]
  596 -> "596R275" [style=solid]
 "596R275" [label="R275", fillcolor=3, shape=diamond, style=filled]
  596 -> "596R585d" [label="[IDENTIFIER, \"private\", \"protected\", \"public\", \"using\", ';', \"alignas\", '(', \"...\", '&', \"::\", '[', ':', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "596R585d" [label="R585", fillcolor=5, shape=diamond, style=filled]
  597 [label="State 597\n\l610 member-declarator: ':' • constant-expression\l614                  | ':' • constant-expression brace-or-equal-initializer\l"]
  597 -> 1 [style=solid label="IDENTIFIER"]
  597 -> 361 [style=solid label="'+'"]
  597 -> 362 [style=solid label="'-'"]
  597 -> 363 [style=solid label="'('"]
  597 -> 364 [style=solid label="'&'"]
  597 -> 365 [style=solid label="\"::\""]
  597 -> 366 [style=solid label="'['"]
  597 -> 367 [style=solid label="\"co_await\""]
  597 -> 368 [style=solid label="'0'"]
  597 -> 369 [style=solid label="'1'"]
  597 -> 370 [style=solid label="\"0b\""]
  597 -> 371 [style=solid label="\"0B\""]
  597 -> 372 [style=solid label="'\\''"]
  597 -> 373 [style=solid label="\"false\""]
  597 -> 374 [style=solid label="\"true\""]
  597 -> 375 [style=solid label="\"noexcept\""]
  597 -> 17 [style=solid label="\"operator\""]
  597 -> 26 [style=solid label="\"decltype\""]
  597 -> 376 [style=solid label="\"delete\""]
  597 -> 377 [style=solid label="'.'"]
  597 -> 378 [style=solid label="'2'"]
  597 -> 379 [style=solid label="'3'"]
  597 -> 380 [style=solid label="'4'"]
  597 -> 381 [style=solid label="'5'"]
  597 -> 382 [style=solid label="'6'"]
  597 -> 383 [style=solid label="'7'"]
  597 -> 384 [style=solid label="'8'"]
  597 -> 385 [style=solid label="'9'"]
  597 -> 185 [style=solid label="\"u8\""]
  597 -> 186 [style=solid label="'u'"]
  597 -> 187 [style=solid label="'U'"]
  597 -> 188 [style=solid label="'L'"]
  597 -> 386 [style=solid label="'*'"]
  597 -> 203 [style=solid label="'\"'"]
  597 -> 387 [style=solid label="\"0x\""]
  597 -> 388 [style=solid label="\"0X\""]
  597 -> 389 [style=solid label="\"requires\""]
  597 -> 390 [style=solid label="\"new\""]
  597 -> 391 [style=solid label="'~'"]
  597 -> 392 [style=solid label="'!'"]
  597 -> 393 [style=solid label="\"++\""]
  597 -> 394 [style=solid label="\"--\""]
  597 -> 395 [style=solid label="\"this\""]
  597 -> 37 [style=solid label="\"auto\""]
  597 -> 396 [style=solid label="\"nullptr\""]
  597 -> 397 [style=solid label="\"dynamic_cast\""]
  597 -> 398 [style=solid label="\"static_cast\""]
  597 -> 399 [style=solid label="\"reinterpret_cast\""]
  597 -> 400 [style=solid label="\"const_cast\""]
  597 -> 401 [style=solid label="\"typeid\""]
  597 -> 38 [style=solid label="\"char\""]
  597 -> 39 [style=solid label="\"char8_t\""]
  597 -> 40 [style=solid label="\"char16_t\""]
  597 -> 41 [style=solid label="\"char32_t\""]
  597 -> 42 [style=solid label="\"wchar_t\""]
  597 -> 43 [style=solid label="\"bool\""]
  597 -> 44 [style=solid label="\"short\""]
  597 -> 45 [style=solid label="\"int\""]
  597 -> 46 [style=solid label="\"long\""]
  597 -> 47 [style=solid label="\"signed\""]
  597 -> 48 [style=solid label="\"unsigned\""]
  597 -> 49 [style=solid label="\"float\""]
  597 -> 50 [style=solid label="\"double\""]
  597 -> 51 [style=solid label="\"void\""]
  597 -> 209 [style=solid label="'R'"]
  597 -> 56 [style=solid label="\"typename\""]
  597 -> 402 [style=solid label="\"sizeof\""]
  597 -> 403 [style=solid label="\"alignof\""]
  597 -> 404 [style=dashed label="additive-expression"]
  597 -> 405 [style=dashed label="and-expression"]
  597 -> 406 [style=dashed label="await-expression"]
  597 -> 407 [style=dashed label="binary-literal"]
  597 -> 408 [style=dashed label="boolean-literal"]
  597 -> 409 [style=dashed label="cast-expression"]
  597 -> 410 [style=dashed label="character-literal"]
  597 -> 66 [style=dashed label="class-name"]
  597 -> 411 [style=dashed label="compare-expression"]
  597 -> 68 [style=dashed label="concept-name"]
  597 -> 412 [style=dashed label="conditional-expression"]
  597 -> 1095 [style=dashed label="constant-expression"]
  597 -> 69 [style=dashed label="conversion-function-id"]
  597 -> 414 [style=dashed label="decimal-floating-point-literal"]
  597 -> 415 [style=dashed label="decimal-literal"]
  597 -> 77 [style=dashed label="decltype-specifier"]
  597 -> 416 [style=dashed label="delete-expression"]
  597 -> 417 [style=dashed label="digit"]
  597 -> 418 [style=dashed label="digit-sequence"]
  597 -> 419 [style=dashed label="encoding-prefix"]
  597 -> 85 [style=dashed label="enum-name"]
  597 -> 420 [style=dashed label="equality-expression"]
  597 -> 421 [style=dashed label="exclusive-or-expression"]
  597 -> 422 [style=dashed label="floating-point-literal"]
  597 -> 423 [style=dashed label="fold-expression"]
  597 -> 424 [style=dashed label="fractional-constant"]
  597 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  597 -> 426 [style=dashed label="hexadecimal-literal"]
  597 -> 427 [style=dashed label="hexadecimal-prefix"]
  597 -> 428 [style=dashed label="id-expression"]
  597 -> 429 [style=dashed label="inclusive-or-expression"]
  597 -> 430 [style=dashed label="integer-literal"]
  597 -> 431 [style=dashed label="lambda-expression"]
  597 -> 432 [style=dashed label="lambda-introducer"]
  597 -> 433 [style=dashed label="literal"]
  597 -> 96 [style=dashed label="literal-operator-id"]
  597 -> 434 [style=dashed label="logical-and-expression"]
  597 -> 435 [style=dashed label="logical-or-expression"]
  597 -> 436 [style=dashed label="multiplicative-expression"]
  597 -> 100 [style=dashed label="namespace-alias"]
  597 -> 103 [style=dashed label="namespace-name"]
  597 -> 437 [style=dashed label="nested-name-specifier"]
  597 -> 438 [style=dashed label="new-expression"]
  597 -> 439 [style=dashed label="noexcept-expression"]
  597 -> 440 [style=dashed label="nonzero-digit"]
  597 -> 441 [style=dashed label="octal-literal"]
  597 -> 109 [style=dashed label="operator-function-id"]
  597 -> 110 [style=dashed label="placeholder-type-specifier"]
  597 -> 442 [style=dashed label="pm-expression"]
  597 -> 443 [style=dashed label="pointer-literal"]
  597 -> 444 [style=dashed label="postfix-expression"]
  597 -> 445 [style=dashed label="primary-expression"]
  597 -> 113 [style=dashed label="qualified-id"]
  597 -> 446 [style=dashed label="relational-expression"]
  597 -> 447 [style=dashed label="requires-expression"]
  597 -> 448 [style=dashed label="shift-expression"]
  597 -> 115 [style=dashed label="simple-template-id"]
  597 -> 534 [style=dashed label="simple-type-specifier"]
  597 -> 450 [style=dashed label="string-literal"]
  597 -> 121 [style=dashed label="template-id"]
  597 -> 216 [style=dashed label="template-name"]
  597 -> 124 [style=dashed label="type-constraint"]
  597 -> 125 [style=dashed label="type-name"]
  597 -> 127 [style=dashed label="typedef-name"]
  597 -> 536 [style=dashed label="typename-specifier"]
  597 -> 454 [style=dashed label="unary-expression"]
  597 -> 455 [style=dashed label="unary-operator"]
  597 -> 130 [style=dashed label="unqualified-id"]
  597 -> 456 [style=dashed label="user-defined-character-literal"]
  597 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  597 -> 458 [style=dashed label="user-defined-integer-literal"]
  597 -> 459 [style=dashed label="user-defined-literal"]
  597 -> 460 [style=dashed label="user-defined-string-literal"]
  598 [label="State 598\n\l151 class-specifier: class-head '{' '}' •\l"]
  598 -> "598R151" [style=solid]
 "598R151" [label="R151", fillcolor=3, shape=diamond, style=filled]
  599 [label="State 599\n\l324 explicit-specialization: \"template\" • '<' '>' declaration\l1059 template-head: \"template\" • '<' template-parameter-list '>'\l1060              | \"template\" • '<' template-parameter-list '>' requires-clause\l"]
  599 -> 157 [style=solid label="'<'"]
  600 [label="State 600\n\l621 member-specification: access-specifier • ':'\l622                     | access-specifier • ':' member-specification\l"]
  600 -> 1096 [style=solid label="':'"]
  601 [label="State 601\n\l599 member-declaration: alias-declaration •\l"]
  601 -> "601R599" [style=solid]
 "601R599" [label="R599", fillcolor=3, shape=diamond, style=filled]
  602 [label="State 602\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l398 function-definition: attribute-specifier-seq • declarator function-body\l400                    | attribute-specifier-seq • decl-specifier-seq declarator function-body\l402                    | attribute-specifier-seq • declarator virt-specifier-seq function-body\l404                    | attribute-specifier-seq • decl-specifier-seq declarator virt-specifier-seq function-body\l406                    | attribute-specifier-seq • declarator requires-clause function-body\l408                    | attribute-specifier-seq • decl-specifier-seq declarator requires-clause function-body\l584 member-declaration: attribute-specifier-seq • ';'\l586                   | attribute-specifier-seq • decl-specifier-seq ';'\l588                   | attribute-specifier-seq • member-declarator-list ';'\l590                   | attribute-specifier-seq • decl-specifier-seq member-declarator-list ';'\l612 member-declarator: attribute-specifier-seq • ':' constant-expression\l616                  | attribute-specifier-seq • ':' constant-expression brace-or-equal-initializer\l"]
  602 -> 591 [style=solid label="IDENTIFIER"]
  602 -> 1097 [style=solid label="';'"]
  602 -> 4 [style=solid label="\"alignas\""]
  602 -> 5 [style=solid label="'('"]
  602 -> 6 [style=solid label="\"...\""]
  602 -> 7 [style=solid label="'&'"]
  602 -> 9 [style=solid label="\"::\""]
  602 -> 10 [style=solid label="'['"]
  602 -> 1098 [style=solid label="':'"]
  602 -> 11 [style=solid label="\"virtual\""]
  602 -> 12 [style=solid label="\"class\""]
  602 -> 13 [style=solid label="\"struct\""]
  602 -> 14 [style=solid label="\"union\""]
  602 -> 16 [style=solid label="\"&&\""]
  602 -> 17 [style=solid label="\"operator\""]
  602 -> 18 [style=solid label="\"const\""]
  602 -> 19 [style=solid label="\"volatile\""]
  602 -> 20 [style=solid label="\"friend\""]
  602 -> 21 [style=solid label="\"typedef\""]
  602 -> 22 [style=solid label="\"constexpr\""]
  602 -> 23 [style=solid label="\"consteval\""]
  602 -> 24 [style=solid label="\"constinit\""]
  602 -> 263 [style=solid label="\"inline\""]
  602 -> 26 [style=solid label="\"decltype\""]
  602 -> 27 [style=solid label="\"enum\""]
  602 -> 264 [style=solid label="\"extern\""]
  602 -> 29 [style=solid label="\"explicit\""]
  602 -> 32 [style=solid label="'*'"]
  602 -> 36 [style=solid label="'~'"]
  602 -> 37 [style=solid label="\"auto\""]
  602 -> 38 [style=solid label="\"char\""]
  602 -> 39 [style=solid label="\"char8_t\""]
  602 -> 40 [style=solid label="\"char16_t\""]
  602 -> 41 [style=solid label="\"char32_t\""]
  602 -> 42 [style=solid label="\"wchar_t\""]
  602 -> 43 [style=solid label="\"bool\""]
  602 -> 44 [style=solid label="\"short\""]
  602 -> 45 [style=solid label="\"int\""]
  602 -> 46 [style=solid label="\"long\""]
  602 -> 47 [style=solid label="\"signed\""]
  602 -> 48 [style=solid label="\"unsigned\""]
  602 -> 49 [style=solid label="\"float\""]
  602 -> 50 [style=solid label="\"double\""]
  602 -> 51 [style=solid label="\"void\""]
  602 -> 53 [style=solid label="\"static\""]
  602 -> 54 [style=solid label="\"thread_local\""]
  602 -> 55 [style=solid label="\"mutable\""]
  602 -> 56 [style=solid label="\"typename\""]
  602 -> 58 [style=dashed label="alignment-specifier"]
  602 -> 1099 [style=dashed label="attribute-specifier"]
  602 -> 1100 [style=dashed label="attribute-specifier-seq"]
  602 -> 64 [style=dashed label="class-head"]
  602 -> 65 [style=dashed label="class-key"]
  602 -> 66 [style=dashed label="class-name"]
  602 -> 67 [style=dashed label="class-specifier"]
  602 -> 68 [style=dashed label="concept-name"]
  602 -> 69 [style=dashed label="conversion-function-id"]
  602 -> 70 [style=dashed label="cv-qualifier"]
  602 -> 71 [style=dashed label="decl-specifier"]
  602 -> 1101 [style=dashed label="decl-specifier-seq"]
  602 -> 1102 [style=dashed label="declarator"]
  602 -> 76 [style=dashed label="declarator-id"]
  602 -> 77 [style=dashed label="decltype-specifier"]
  602 -> 79 [style=dashed label="defining-type-specifier"]
  602 -> 80 [style=dashed label="elaborated-enum-specifier"]
  602 -> 81 [style=dashed label="elaborated-type-specifier"]
  602 -> 83 [style=dashed label="enum-head"]
  602 -> 268 [style=dashed label="enum-key"]
  602 -> 85 [style=dashed label="enum-name"]
  602 -> 86 [style=dashed label="enum-specifier"]
  602 -> 269 [style=dashed label="explicit-specifier"]
  602 -> 92 [style=dashed label="function-specifier"]
  602 -> 94 [style=dashed label="id-expression"]
  602 -> 96 [style=dashed label="literal-operator-id"]
  602 -> 610 [style=dashed label="member-declarator"]
  602 -> 1103 [style=dashed label="member-declarator-list"]
  602 -> 100 [style=dashed label="namespace-alias"]
  602 -> 103 [style=dashed label="namespace-name"]
  602 -> 104 [style=dashed label="nested-name-specifier"]
  602 -> 107 [style=dashed label="noptr-declarator"]
  602 -> 109 [style=dashed label="operator-function-id"]
  602 -> 110 [style=dashed label="placeholder-type-specifier"]
  602 -> 111 [style=dashed label="ptr-declarator"]
  602 -> 112 [style=dashed label="ptr-operator"]
  602 -> 113 [style=dashed label="qualified-id"]
  602 -> 115 [style=dashed label="simple-template-id"]
  602 -> 116 [style=dashed label="simple-type-specifier"]
  602 -> 118 [style=dashed label="storage-class-specifier"]
  602 -> 121 [style=dashed label="template-id"]
  602 -> 216 [style=dashed label="template-name"]
  602 -> 124 [style=dashed label="type-constraint"]
  602 -> 125 [style=dashed label="type-name"]
  602 -> 126 [style=dashed label="type-specifier"]
  602 -> 127 [style=dashed label="typedef-name"]
  602 -> 128 [style=dashed label="typename-specifier"]
  602 -> 130 [style=dashed label="unqualified-id"]
  603 [label="State 603\n\l401 function-definition: decl-specifier-seq • declarator function-body\l405                    | decl-specifier-seq • declarator virt-specifier-seq function-body\l409                    | decl-specifier-seq • declarator requires-clause function-body\l587 member-declaration: decl-specifier-seq • ';'\l591                   | decl-specifier-seq • member-declarator-list ';'\l"]
  603 -> 1104 [style=solid label="IDENTIFIER"]
  603 -> 1105 [style=solid label="';'"]
  603 -> 4 [style=solid label="\"alignas\""]
  603 -> 5 [style=solid label="'('"]
  603 -> 6 [style=solid label="\"...\""]
  603 -> 7 [style=solid label="'&'"]
  603 -> 9 [style=solid label="\"::\""]
  603 -> 10 [style=solid label="'['"]
  603 -> 597 [style=solid label="':'"]
  603 -> 16 [style=solid label="\"&&\""]
  603 -> 17 [style=solid label="\"operator\""]
  603 -> 135 [style=solid label="\"decltype\""]
  603 -> 32 [style=solid label="'*'"]
  603 -> 36 [style=solid label="'~'"]
  603 -> 58 [style=dashed label="alignment-specifier"]
  603 -> 61 [style=dashed label="attribute-specifier"]
  603 -> 1100 [style=dashed label="attribute-specifier-seq"]
  603 -> 66 [style=dashed label="class-name"]
  603 -> 69 [style=dashed label="conversion-function-id"]
  603 -> 1106 [style=dashed label="declarator"]
  603 -> 76 [style=dashed label="declarator-id"]
  603 -> 139 [style=dashed label="decltype-specifier"]
  603 -> 85 [style=dashed label="enum-name"]
  603 -> 94 [style=dashed label="id-expression"]
  603 -> 96 [style=dashed label="literal-operator-id"]
  603 -> 610 [style=dashed label="member-declarator"]
  603 -> 1107 [style=dashed label="member-declarator-list"]
  603 -> 100 [style=dashed label="namespace-alias"]
  603 -> 103 [style=dashed label="namespace-name"]
  603 -> 149 [style=dashed label="nested-name-specifier"]
  603 -> 107 [style=dashed label="noptr-declarator"]
  603 -> 109 [style=dashed label="operator-function-id"]
  603 -> 111 [style=dashed label="ptr-declarator"]
  603 -> 112 [style=dashed label="ptr-operator"]
  603 -> 113 [style=dashed label="qualified-id"]
  603 -> 115 [style=dashed label="simple-template-id"]
  603 -> 121 [style=dashed label="template-id"]
  603 -> 143 [style=dashed label="template-name"]
  603 -> 144 [style=dashed label="type-name"]
  603 -> 127 [style=dashed label="typedef-name"]
  603 -> 130 [style=dashed label="unqualified-id"]
  604 [label="State 604\n\l399 function-definition: declarator • function-body\l403                    | declarator • virt-specifier-seq function-body\l407                    | declarator • requires-clause function-body\l602 member-declarator: declarator •\l603                  | declarator • virt-specifier-seq\l604                  | declarator • pure-specifier\l605                  | declarator • virt-specifier-seq pure-specifier\l606                  | declarator • requires-clause\l607                  | declarator •\l608                  | declarator • brace-or-equal-initializer\l"]
  604 -> 1108 [style=solid label="'='"]
  604 -> 293 [style=solid label="':'"]
  604 -> 648 [style=solid label="'{'"]
  604 -> 295 [style=solid label="\"final\""]
  604 -> 296 [style=solid label="\"try\""]
  604 -> 297 [style=solid label="\"requires\""]
  604 -> 298 [style=solid label="\"override\""]
  604 -> 1109 [style=dashed label="brace-or-equal-initializer"]
  604 -> 650 [style=dashed label="braced-init-list"]
  604 -> 299 [style=dashed label="compound-statement"]
  604 -> 300 [style=dashed label="ctor-initializer"]
  604 -> 301 [style=dashed label="function-body"]
  604 -> 302 [style=dashed label="function-try-block"]
  604 -> 1110 [style=dashed label="pure-specifier"]
  604 -> 1111 [style=dashed label="requires-clause"]
  604 -> 304 [style=dashed label="virt-specifier"]
  604 -> 1112 [style=dashed label="virt-specifier-seq"]
  604 -> "604R602" [style=solid]
 "604R602" [label="R602", fillcolor=3, shape=diamond, style=filled]
  604 -> "604R607d" [label="[';', ',']", style=solid]
 "604R607d" [label="R607", fillcolor=5, shape=diamond, style=filled]
  605 [label="State 605\n\l598 member-declaration: deduction-guide •\l"]
  605 -> "605R598" [style=solid]
 "605R598" [label="R598", fillcolor=3, shape=diamond, style=filled]
  606 [label="State 606\n\l601 member-declaration: empty-declaration •\l"]
  606 -> "606R601" [style=solid]
 "606R601" [label="R601", fillcolor=3, shape=diamond, style=filled]
  607 [label="State 607\n\l597 member-declaration: explicit-specialization •\l"]
  607 -> "607R597" [style=solid]
 "607R597" [label="R597", fillcolor=3, shape=diamond, style=filled]
  608 [label="State 608\n\l592 member-declaration: function-definition •\l"]
  608 -> "608R592" [style=solid]
 "608R592" [label="R592", fillcolor=3, shape=diamond, style=filled]
  609 [label="State 609\n\l619 member-specification: member-declaration •\l620                     | member-declaration • member-specification\l"]
  609 -> 591 [style=solid label="IDENTIFIER"]
  609 -> 592 [style=solid label="\"private\""]
  609 -> 593 [style=solid label="\"protected\""]
  609 -> 594 [style=solid label="\"public\""]
  609 -> 595 [style=solid label="\"using\""]
  609 -> 596 [style=solid label="';'"]
  609 -> 4 [style=solid label="\"alignas\""]
  609 -> 5 [style=solid label="'('"]
  609 -> 6 [style=solid label="\"...\""]
  609 -> 7 [style=solid label="'&'"]
  609 -> 9 [style=solid label="\"::\""]
  609 -> 10 [style=solid label="'['"]
  609 -> 597 [style=solid label="':'"]
  609 -> 11 [style=solid label="\"virtual\""]
  609 -> 12 [style=solid label="\"class\""]
  609 -> 13 [style=solid label="\"struct\""]
  609 -> 14 [style=solid label="\"union\""]
  609 -> 599 [style=solid label="\"template\""]
  609 -> 16 [style=solid label="\"&&\""]
  609 -> 17 [style=solid label="\"operator\""]
  609 -> 18 [style=solid label="\"const\""]
  609 -> 19 [style=solid label="\"volatile\""]
  609 -> 20 [style=solid label="\"friend\""]
  609 -> 21 [style=solid label="\"typedef\""]
  609 -> 22 [style=solid label="\"constexpr\""]
  609 -> 23 [style=solid label="\"consteval\""]
  609 -> 24 [style=solid label="\"constinit\""]
  609 -> 263 [style=solid label="\"inline\""]
  609 -> 26 [style=solid label="\"decltype\""]
  609 -> 27 [style=solid label="\"enum\""]
  609 -> 264 [style=solid label="\"extern\""]
  609 -> 29 [style=solid label="\"explicit\""]
  609 -> 32 [style=solid label="'*'"]
  609 -> 36 [style=solid label="'~'"]
  609 -> 37 [style=solid label="\"auto\""]
  609 -> 38 [style=solid label="\"char\""]
  609 -> 39 [style=solid label="\"char8_t\""]
  609 -> 40 [style=solid label="\"char16_t\""]
  609 -> 41 [style=solid label="\"char32_t\""]
  609 -> 42 [style=solid label="\"wchar_t\""]
  609 -> 43 [style=solid label="\"bool\""]
  609 -> 44 [style=solid label="\"short\""]
  609 -> 45 [style=solid label="\"int\""]
  609 -> 46 [style=solid label="\"long\""]
  609 -> 47 [style=solid label="\"signed\""]
  609 -> 48 [style=solid label="\"unsigned\""]
  609 -> 49 [style=solid label="\"float\""]
  609 -> 50 [style=solid label="\"double\""]
  609 -> 51 [style=solid label="\"void\""]
  609 -> 52 [style=solid label="\"static_assert\""]
  609 -> 53 [style=solid label="\"static\""]
  609 -> 54 [style=solid label="\"thread_local\""]
  609 -> 55 [style=solid label="\"mutable\""]
  609 -> 56 [style=solid label="\"typename\""]
  609 -> 600 [style=dashed label="access-specifier"]
  609 -> 601 [style=dashed label="alias-declaration"]
  609 -> 58 [style=dashed label="alignment-specifier"]
  609 -> 61 [style=dashed label="attribute-specifier"]
  609 -> 602 [style=dashed label="attribute-specifier-seq"]
  609 -> 64 [style=dashed label="class-head"]
  609 -> 65 [style=dashed label="class-key"]
  609 -> 66 [style=dashed label="class-name"]
  609 -> 67 [style=dashed label="class-specifier"]
  609 -> 68 [style=dashed label="concept-name"]
  609 -> 69 [style=dashed label="conversion-function-id"]
  609 -> 70 [style=dashed label="cv-qualifier"]
  609 -> 71 [style=dashed label="decl-specifier"]
  609 -> 603 [style=dashed label="decl-specifier-seq"]
  609 -> 604 [style=dashed label="declarator"]
  609 -> 76 [style=dashed label="declarator-id"]
  609 -> 77 [style=dashed label="decltype-specifier"]
  609 -> 605 [style=dashed label="deduction-guide"]
  609 -> 79 [style=dashed label="defining-type-specifier"]
  609 -> 80 [style=dashed label="elaborated-enum-specifier"]
  609 -> 81 [style=dashed label="elaborated-type-specifier"]
  609 -> 606 [style=dashed label="empty-declaration"]
  609 -> 83 [style=dashed label="enum-head"]
  609 -> 84 [style=dashed label="enum-key"]
  609 -> 85 [style=dashed label="enum-name"]
  609 -> 86 [style=dashed label="enum-specifier"]
  609 -> 607 [style=dashed label="explicit-specialization"]
  609 -> 89 [style=dashed label="explicit-specifier"]
  609 -> 608 [style=dashed label="function-definition"]
  609 -> 92 [style=dashed label="function-specifier"]
  609 -> 94 [style=dashed label="id-expression"]
  609 -> 96 [style=dashed label="literal-operator-id"]
  609 -> 609 [style=dashed label="member-declaration"]
  609 -> 610 [style=dashed label="member-declarator"]
  609 -> 611 [style=dashed label="member-declarator-list"]
  609 -> 1113 [style=dashed label="member-specification"]
  609 -> 100 [style=dashed label="namespace-alias"]
  609 -> 103 [style=dashed label="namespace-name"]
  609 -> 104 [style=dashed label="nested-name-specifier"]
  609 -> 107 [style=dashed label="noptr-declarator"]
  609 -> 613 [style=dashed label="opaque-enum-declaration"]
  609 -> 109 [style=dashed label="operator-function-id"]
  609 -> 110 [style=dashed label="placeholder-type-specifier"]
  609 -> 111 [style=dashed label="ptr-declarator"]
  609 -> 112 [style=dashed label="ptr-operator"]
  609 -> 113 [style=dashed label="qualified-id"]
  609 -> 115 [style=dashed label="simple-template-id"]
  609 -> 116 [style=dashed label="simple-type-specifier"]
  609 -> 614 [style=dashed label="static_assert-declaration"]
  609 -> 118 [style=dashed label="storage-class-specifier"]
  609 -> 615 [style=dashed label="template-declaration"]
  609 -> 120 [style=dashed label="template-head"]
  609 -> 121 [style=dashed label="template-id"]
  609 -> 122 [style=dashed label="template-name"]
  609 -> 124 [style=dashed label="type-constraint"]
  609 -> 125 [style=dashed label="type-name"]
  609 -> 126 [style=dashed label="type-specifier"]
  609 -> 127 [style=dashed label="typedef-name"]
  609 -> 128 [style=dashed label="typename-specifier"]
  609 -> 130 [style=dashed label="unqualified-id"]
  609 -> 616 [style=dashed label="using-declaration"]
  609 -> 617 [style=dashed label="using-enum-declaration"]
  609 -> "609R619" [style=solid]
 "609R619" [label="R619", fillcolor=3, shape=diamond, style=filled]
  610 [label="State 610\n\l617 member-declarator-list: member-declarator •\l"]
  610 -> "610R617" [style=solid]
 "610R617" [label="R617", fillcolor=3, shape=diamond, style=filled]
  611 [label="State 611\n\l589 member-declaration: member-declarator-list • ';'\l618 member-declarator-list: member-declarator-list • ',' member-declarator\l"]
  611 -> 1114 [style=solid label="';'"]
  611 -> 1115 [style=solid label="','"]
  612 [label="State 612\n\l152 class-specifier: class-head '{' member-specification • '}'\l"]
  612 -> 1116 [style=solid label="'}'"]
  613 [label="State 613\n\l600 member-declaration: opaque-enum-declaration •\l"]
  613 -> "613R600" [style=solid]
 "613R600" [label="R600", fillcolor=3, shape=diamond, style=filled]
  614 [label="State 614\n\l595 member-declaration: static_assert-declaration •\l"]
  614 -> "614R595" [style=solid]
 "614R595" [label="R595", fillcolor=3, shape=diamond, style=filled]
  615 [label="State 615\n\l596 member-declaration: template-declaration •\l"]
  615 -> "615R596" [style=solid]
 "615R596" [label="R596", fillcolor=3, shape=diamond, style=filled]
  616 [label="State 616\n\l593 member-declaration: using-declaration •\l"]
  616 -> "616R593" [style=solid]
 "616R593" [label="R593", fillcolor=3, shape=diamond, style=filled]
  617 [label="State 617\n\l594 member-declaration: using-enum-declaration •\l"]
  617 -> "617R594" [style=solid]
 "617R594" [label="R594", fillcolor=3, shape=diamond, style=filled]
  618 [label="State 618\n\l 72 base-specifier: \"virtual\" • class-or-decltype\l 74               | \"virtual\" • access-specifier class-or-decltype\l"]
  618 -> 258 [style=solid label="IDENTIFIER"]
  618 -> 592 [style=solid label="\"private\""]
  618 -> 593 [style=solid label="\"protected\""]
  618 -> 594 [style=solid label="\"public\""]
  618 -> 9 [style=solid label="\"::\""]
  618 -> 135 [style=solid label="\"decltype\""]
  618 -> 1117 [style=dashed label="access-specifier"]
  618 -> 66 [style=dashed label="class-name"]
  618 -> 1118 [style=dashed label="class-or-decltype"]
  618 -> 624 [style=dashed label="decltype-specifier"]
  618 -> 85 [style=dashed label="enum-name"]
  618 -> 100 [style=dashed label="namespace-alias"]
  618 -> 103 [style=dashed label="namespace-name"]
  618 -> 625 [style=dashed label="nested-name-specifier"]
  618 -> 142 [style=dashed label="simple-template-id"]
  618 -> 143 [style=dashed label="template-name"]
  618 -> 626 [style=dashed label="type-name"]
  618 -> 127 [style=dashed label="typedef-name"]
  619 [label="State 619\n\l 76 base-specifier: access-specifier • class-or-decltype\l 78               | access-specifier • \"virtual\" class-or-decltype\l"]
  619 -> 258 [style=solid label="IDENTIFIER"]
  619 -> 9 [style=solid label="\"::\""]
  619 -> 1119 [style=solid label="\"virtual\""]
  619 -> 135 [style=solid label="\"decltype\""]
  619 -> 66 [style=dashed label="class-name"]
  619 -> 1120 [style=dashed label="class-or-decltype"]
  619 -> 624 [style=dashed label="decltype-specifier"]
  619 -> 85 [style=dashed label="enum-name"]
  619 -> 100 [style=dashed label="namespace-alias"]
  619 -> 103 [style=dashed label="namespace-name"]
  619 -> 625 [style=dashed label="nested-name-specifier"]
  619 -> 142 [style=dashed label="simple-template-id"]
  619 -> 143 [style=dashed label="template-name"]
  619 -> 626 [style=dashed label="type-name"]
  619 -> 127 [style=dashed label="typedef-name"]
  620 [label="State 620\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l 69 base-specifier: attribute-specifier-seq • class-or-decltype\l 71               | attribute-specifier-seq • \"virtual\" class-or-decltype\l 73               | attribute-specifier-seq • \"virtual\" access-specifier class-or-decltype\l 75               | attribute-specifier-seq • access-specifier class-or-decltype\l 77               | attribute-specifier-seq • access-specifier \"virtual\" class-or-decltype\l"]
  620 -> 258 [style=solid label="IDENTIFIER"]
  620 -> 592 [style=solid label="\"private\""]
  620 -> 593 [style=solid label="\"protected\""]
  620 -> 594 [style=solid label="\"public\""]
  620 -> 4 [style=solid label="\"alignas\""]
  620 -> 9 [style=solid label="\"::\""]
  620 -> 10 [style=solid label="'['"]
  620 -> 1121 [style=solid label="\"virtual\""]
  620 -> 135 [style=solid label="\"decltype\""]
  620 -> 1122 [style=dashed label="access-specifier"]
  620 -> 58 [style=dashed label="alignment-specifier"]
  620 -> 265 [style=dashed label="attribute-specifier"]
  620 -> 66 [style=dashed label="class-name"]
  620 -> 1123 [style=dashed label="class-or-decltype"]
  620 -> 624 [style=dashed label="decltype-specifier"]
  620 -> 85 [style=dashed label="enum-name"]
  620 -> 100 [style=dashed label="namespace-alias"]
  620 -> 103 [style=dashed label="namespace-name"]
  620 -> 625 [style=dashed label="nested-name-specifier"]
  620 -> 142 [style=dashed label="simple-template-id"]
  620 -> 143 [style=dashed label="template-name"]
  620 -> 626 [style=dashed label="type-name"]
  620 -> 127 [style=dashed label="typedef-name"]
  621 [label="State 621\n\l 79 base-specifier-list: base-specifier •\l 80                    | base-specifier • \"...\"\l"]
  621 -> 1124 [style=solid label="\"...\""]
  621 -> "621R79" [style=solid]
 "621R79" [label="R79", fillcolor=3, shape=diamond, style=filled]
  622 [label="State 622\n\l 68 base-clause: ':' base-specifier-list •\l 81 base-specifier-list: base-specifier-list • ',' base-specifier\l 82                    | base-specifier-list • ',' base-specifier \"...\"\l"]
  622 -> 1125 [style=solid label="','"]
  622 -> "622R68" [style=solid]
 "622R68" [label="R68", fillcolor=3, shape=diamond, style=filled]
  623 [label="State 623\n\l 70 base-specifier: class-or-decltype •\l"]
  623 -> "623R70" [style=solid]
 "623R70" [label="R70", fillcolor=3, shape=diamond, style=filled]
  624 [label="State 624\n\l150 class-or-decltype: decltype-specifier •\l662 nested-name-specifier: decltype-specifier • \"::\"\l"]
  624 -> 307 [style=solid label="\"::\""]
  624 -> "624R150" [style=solid]
 "624R150" [label="R150", fillcolor=3, shape=diamond, style=filled]
  625 [label="State 625\n\l147 class-or-decltype: nested-name-specifier • type-name\l149                  | nested-name-specifier • \"template\" simple-template-id\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l"]
  625 -> 1126 [style=solid label="IDENTIFIER"]
  625 -> 1127 [style=solid label="\"template\""]
  625 -> 66 [style=dashed label="class-name"]
  625 -> 85 [style=dashed label="enum-name"]
  625 -> 515 [style=dashed label="simple-template-id"]
  625 -> 143 [style=dashed label="template-name"]
  625 -> 1128 [style=dashed label="type-name"]
  625 -> 127 [style=dashed label="typedef-name"]
  626 [label="State 626\n\l148 class-or-decltype: type-name •\l660 nested-name-specifier: type-name • \"::\"\l"]
  626 -> 346 [style=solid label="\"::\""]
  626 -> "626R148" [style=solid]
 "626R148" [label="R148", fillcolor=3, shape=diamond, style=filled]
  627 [label="State 627\n\l145 class-name: IDENTIFIER •\l268 elaborated-type-specifier: class-key attribute-specifier-seq IDENTIFIER •\l297 enum-name: IDENTIFIER •\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l"]
  627 -> "627R145" [label="[\"::\", ':', '{', \"final\"]", style=solid]
 "627R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  627 -> "627R268d" [label="[\"::\", ':', '{', \"final\"]", style=solid]
 "627R268d" [label="R268", fillcolor=5, shape=diamond, style=filled]
  627 -> "627R268" [style=solid]
 "627R268" [label="R268", fillcolor=3, shape=diamond, style=filled]
  627 -> "627R297d" [label="[\"::\"]", style=solid]
 "627R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  627 -> "627R651d" [label="[\"::\"]", style=solid]
 "627R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  627 -> "627R657d" [label="[\"::\"]", style=solid]
 "627R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  627 -> "627R1066d" [label="['<']", style=solid]
 "627R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  627 -> "627R1124d" [label="[\"::\"]", style=solid]
 "627R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  628 [label="State 628\n\l139 class-head: class-key attribute-specifier-seq base-clause •\l"]
  628 -> "628R139" [style=solid]
 "628R139" [label="R139", fillcolor=3, shape=diamond, style=filled]
  629 [label="State 629\n\l129 class-head: class-key attribute-specifier-seq class-head-name •\l131           | class-key attribute-specifier-seq class-head-name • class-virt-specifier\l133           | class-key attribute-specifier-seq class-head-name • base-clause\l135           | class-key attribute-specifier-seq class-head-name • class-virt-specifier base-clause\l"]
  629 -> 272 [style=solid label="':'"]
  629 -> 631 [style=solid label="\"final\""]
  629 -> 1129 [style=dashed label="base-clause"]
  629 -> 1130 [style=dashed label="class-virt-specifier"]
  629 -> "629R129" [style=solid]
 "629R129" [label="R129", fillcolor=3, shape=diamond, style=filled]
  630 [label="State 630\n\l140 class-head-name: nested-name-specifier • class-name\l270 elaborated-type-specifier: class-key attribute-specifier-seq nested-name-specifier • IDENTIFIER\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l"]
  630 -> 1131 [style=solid label="IDENTIFIER"]
  630 -> 355 [style=solid label="\"template\""]
  630 -> 636 [style=dashed label="class-name"]
  630 -> 1132 [style=dashed label="simple-template-id"]
  630 -> 143 [style=dashed label="template-name"]
  631 [label="State 631\n\l153 class-virt-specifier: \"final\" •\l"]
  631 -> "631R153" [style=solid]
 "631R153" [label="R153", fillcolor=3, shape=diamond, style=filled]
  632 [label="State 632\n\l132 class-head: class-key class-head-name base-clause •\l"]
  632 -> "632R132" [style=solid]
 "632R132" [label="R132", fillcolor=3, shape=diamond, style=filled]
  633 [label="State 633\n\l130 class-head: class-key class-head-name class-virt-specifier •\l134           | class-key class-head-name class-virt-specifier • base-clause\l"]
  633 -> 272 [style=solid label="':'"]
  633 -> 1133 [style=dashed label="base-clause"]
  633 -> "633R130" [style=solid]
 "633R130" [label="R130", fillcolor=3, shape=diamond, style=filled]
  634 [label="State 634\n\l145 class-name: IDENTIFIER •\l269 elaborated-type-specifier: class-key nested-name-specifier IDENTIFIER •\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l"]
  634 -> 726 [style=solid label="\"::\""]
  634 -> "634R145" [label="[':', '{', \"final\"]", style=solid]
 "634R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  634 -> "634R269d" [label="[\"::\", ':', '{']", style=solid]
 "634R269d" [label="R269", fillcolor=5, shape=diamond, style=filled]
  634 -> "634R269" [style=solid]
 "634R269" [label="R269", fillcolor=3, shape=diamond, style=filled]
  634 -> "634R1066" [label="['<']", style=solid]
 "634R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  635 [label="State 635\n\l273 elaborated-type-specifier: class-key nested-name-specifier \"template\" • simple-template-id\l665 nested-name-specifier: nested-name-specifier \"template\" • simple-template-id \"::\"\l"]
  635 -> 315 [style=solid label="IDENTIFIER"]
  635 -> 1134 [style=dashed label="simple-template-id"]
  635 -> 143 [style=dashed label="template-name"]
  636 [label="State 636\n\l140 class-head-name: nested-name-specifier class-name •\l"]
  636 -> "636R140" [style=solid]
 "636R140" [label="R140", fillcolor=3, shape=diamond, style=filled]
  637 [label="State 637\n\l146 class-name: simple-template-id •\l272 elaborated-type-specifier: class-key nested-name-specifier simple-template-id •\l664 nested-name-specifier: nested-name-specifier simple-template-id • \"::\"\l"]
  637 -> 733 [style=solid label="\"::\""]
  637 -> "637R146" [label="[':', '{', \"final\"]", style=solid]
 "637R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  637 -> "637R272d" [label="[\"::\", ':', '{']", style=solid]
 "637R272d" [label="R272", fillcolor=5, shape=diamond, style=filled]
  637 -> "637R272" [style=solid]
 "637R272" [label="R272", fillcolor=3, shape=diamond, style=filled]
  638 [label="State 638\n\l1087 type-constraint: concept-name '<' '>' •\l"]
  638 -> "638R1087" [style=solid]
 "638R1087" [label="R1087", fillcolor=3, shape=diamond, style=filled]
  639 [label="State 639\n\l1050 template-argument: constant-expression •\l"]
  639 -> "639R1050" [style=solid]
 "639R1050" [label="R1050", fillcolor=3, shape=diamond, style=filled]
  640 [label="State 640\n\l886 primary-expression: id-expression •\l1052 template-argument: id-expression •\l"]
  640 -> "640R886" [style=solid]
 "640R886" [label="R886", fillcolor=3, shape=diamond, style=filled]
  640 -> "640R1052d" [label="[\"...\", ',', '>']", style=solid]
 "640R1052d" [label="R1052", fillcolor=5, shape=diamond, style=filled]
  641 [label="State 641\n\l1053 template-argument-list: template-argument •\l1054                       | template-argument • \"...\"\l"]
  641 -> 1135 [style=solid label="\"...\""]
  641 -> "641R1053" [style=solid]
 "641R1053" [label="R1053", fillcolor=3, shape=diamond, style=filled]
  642 [label="State 642\n\l1055 template-argument-list: template-argument-list • ',' template-argument\l1056                       | template-argument-list • ',' template-argument \"...\"\l1089 type-constraint: concept-name '<' template-argument-list • '>'\l"]
  642 -> 1136 [style=solid label="','"]
  642 -> 1137 [style=solid label="'>'"]
  643 [label="State 643\n\l1051 template-argument: type-id •\l"]
  643 -> "643R1051" [style=solid]
 "643R1051" [label="R1051", fillcolor=3, shape=diamond, style=filled]
  644 [label="State 644\n\l465 identifier-list: IDENTIFIER •\l"]
  644 -> "644R465" [style=solid]
 "644R465" [label="R465", fillcolor=3, shape=diamond, style=filled]
  645 [label="State 645\n\l466 identifier-list: identifier-list • ',' IDENTIFIER\l981 simple-declaration: decl-specifier-seq '[' identifier-list • ']' initializer ';'\l"]
  645 -> 1138 [style=solid label="','"]
  645 -> 1139 [style=solid label="']'"]
  646 [label="State 646\n\l106 brace-or-equal-initializer: '=' • initializer-clause\l396 function-body: '=' • \"default\" ';'\l397              | '=' • \"delete\" ';'\l"]
  646 -> 1 [style=solid label="IDENTIFIER"]
  646 -> 361 [style=solid label="'+'"]
  646 -> 362 [style=solid label="'-'"]
  646 -> 363 [style=solid label="'('"]
  646 -> 364 [style=solid label="'&'"]
  646 -> 365 [style=solid label="\"::\""]
  646 -> 366 [style=solid label="'['"]
  646 -> 367 [style=solid label="\"co_await\""]
  646 -> 939 [style=solid label="'{'"]
  646 -> 368 [style=solid label="'0'"]
  646 -> 369 [style=solid label="'1'"]
  646 -> 370 [style=solid label="\"0b\""]
  646 -> 371 [style=solid label="\"0B\""]
  646 -> 372 [style=solid label="'\\''"]
  646 -> 373 [style=solid label="\"false\""]
  646 -> 374 [style=solid label="\"true\""]
  646 -> 375 [style=solid label="\"noexcept\""]
  646 -> 17 [style=solid label="\"operator\""]
  646 -> 26 [style=solid label="\"decltype\""]
  646 -> 1140 [style=solid label="\"delete\""]
  646 -> 377 [style=solid label="'.'"]
  646 -> 378 [style=solid label="'2'"]
  646 -> 379 [style=solid label="'3'"]
  646 -> 380 [style=solid label="'4'"]
  646 -> 381 [style=solid label="'5'"]
  646 -> 382 [style=solid label="'6'"]
  646 -> 383 [style=solid label="'7'"]
  646 -> 384 [style=solid label="'8'"]
  646 -> 385 [style=solid label="'9'"]
  646 -> 185 [style=solid label="\"u8\""]
  646 -> 186 [style=solid label="'u'"]
  646 -> 187 [style=solid label="'U'"]
  646 -> 188 [style=solid label="'L'"]
  646 -> 386 [style=solid label="'*'"]
  646 -> 659 [style=solid label="\"default\""]
  646 -> 203 [style=solid label="'\"'"]
  646 -> 387 [style=solid label="\"0x\""]
  646 -> 388 [style=solid label="\"0X\""]
  646 -> 389 [style=solid label="\"requires\""]
  646 -> 390 [style=solid label="\"new\""]
  646 -> 391 [style=solid label="'~'"]
  646 -> 392 [style=solid label="'!'"]
  646 -> 393 [style=solid label="\"++\""]
  646 -> 394 [style=solid label="\"--\""]
  646 -> 395 [style=solid label="\"this\""]
  646 -> 37 [style=solid label="\"auto\""]
  646 -> 396 [style=solid label="\"nullptr\""]
  646 -> 397 [style=solid label="\"dynamic_cast\""]
  646 -> 398 [style=solid label="\"static_cast\""]
  646 -> 399 [style=solid label="\"reinterpret_cast\""]
  646 -> 400 [style=solid label="\"const_cast\""]
  646 -> 401 [style=solid label="\"typeid\""]
  646 -> 38 [style=solid label="\"char\""]
  646 -> 39 [style=solid label="\"char8_t\""]
  646 -> 40 [style=solid label="\"char16_t\""]
  646 -> 41 [style=solid label="\"char32_t\""]
  646 -> 42 [style=solid label="\"wchar_t\""]
  646 -> 43 [style=solid label="\"bool\""]
  646 -> 44 [style=solid label="\"short\""]
  646 -> 45 [style=solid label="\"int\""]
  646 -> 46 [style=solid label="\"long\""]
  646 -> 47 [style=solid label="\"signed\""]
  646 -> 48 [style=solid label="\"unsigned\""]
  646 -> 49 [style=solid label="\"float\""]
  646 -> 50 [style=solid label="\"double\""]
  646 -> 51 [style=solid label="\"void\""]
  646 -> 209 [style=solid label="'R'"]
  646 -> 528 [style=solid label="\"throw\""]
  646 -> 56 [style=solid label="\"typename\""]
  646 -> 402 [style=solid label="\"sizeof\""]
  646 -> 403 [style=solid label="\"alignof\""]
  646 -> 529 [style=solid label="\"co_yield\""]
  646 -> 404 [style=dashed label="additive-expression"]
  646 -> 405 [style=dashed label="and-expression"]
  646 -> 1141 [style=dashed label="assignment-expression"]
  646 -> 406 [style=dashed label="await-expression"]
  646 -> 407 [style=dashed label="binary-literal"]
  646 -> 408 [style=dashed label="boolean-literal"]
  646 -> 1142 [style=dashed label="braced-init-list"]
  646 -> 409 [style=dashed label="cast-expression"]
  646 -> 410 [style=dashed label="character-literal"]
  646 -> 66 [style=dashed label="class-name"]
  646 -> 411 [style=dashed label="compare-expression"]
  646 -> 68 [style=dashed label="concept-name"]
  646 -> 531 [style=dashed label="conditional-expression"]
  646 -> 69 [style=dashed label="conversion-function-id"]
  646 -> 414 [style=dashed label="decimal-floating-point-literal"]
  646 -> 415 [style=dashed label="decimal-literal"]
  646 -> 77 [style=dashed label="decltype-specifier"]
  646 -> 416 [style=dashed label="delete-expression"]
  646 -> 417 [style=dashed label="digit"]
  646 -> 418 [style=dashed label="digit-sequence"]
  646 -> 419 [style=dashed label="encoding-prefix"]
  646 -> 85 [style=dashed label="enum-name"]
  646 -> 420 [style=dashed label="equality-expression"]
  646 -> 421 [style=dashed label="exclusive-or-expression"]
  646 -> 422 [style=dashed label="floating-point-literal"]
  646 -> 423 [style=dashed label="fold-expression"]
  646 -> 424 [style=dashed label="fractional-constant"]
  646 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  646 -> 426 [style=dashed label="hexadecimal-literal"]
  646 -> 427 [style=dashed label="hexadecimal-prefix"]
  646 -> 428 [style=dashed label="id-expression"]
  646 -> 429 [style=dashed label="inclusive-or-expression"]
  646 -> 1143 [style=dashed label="initializer-clause"]
  646 -> 430 [style=dashed label="integer-literal"]
  646 -> 431 [style=dashed label="lambda-expression"]
  646 -> 432 [style=dashed label="lambda-introducer"]
  646 -> 433 [style=dashed label="literal"]
  646 -> 96 [style=dashed label="literal-operator-id"]
  646 -> 434 [style=dashed label="logical-and-expression"]
  646 -> 533 [style=dashed label="logical-or-expression"]
  646 -> 436 [style=dashed label="multiplicative-expression"]
  646 -> 100 [style=dashed label="namespace-alias"]
  646 -> 103 [style=dashed label="namespace-name"]
  646 -> 437 [style=dashed label="nested-name-specifier"]
  646 -> 438 [style=dashed label="new-expression"]
  646 -> 439 [style=dashed label="noexcept-expression"]
  646 -> 440 [style=dashed label="nonzero-digit"]
  646 -> 441 [style=dashed label="octal-literal"]
  646 -> 109 [style=dashed label="operator-function-id"]
  646 -> 110 [style=dashed label="placeholder-type-specifier"]
  646 -> 442 [style=dashed label="pm-expression"]
  646 -> 443 [style=dashed label="pointer-literal"]
  646 -> 444 [style=dashed label="postfix-expression"]
  646 -> 445 [style=dashed label="primary-expression"]
  646 -> 113 [style=dashed label="qualified-id"]
  646 -> 446 [style=dashed label="relational-expression"]
  646 -> 447 [style=dashed label="requires-expression"]
  646 -> 448 [style=dashed label="shift-expression"]
  646 -> 115 [style=dashed label="simple-template-id"]
  646 -> 534 [style=dashed label="simple-type-specifier"]
  646 -> 450 [style=dashed label="string-literal"]
  646 -> 121 [style=dashed label="template-id"]
  646 -> 216 [style=dashed label="template-name"]
  646 -> 535 [style=dashed label="throw-expression"]
  646 -> 124 [style=dashed label="type-constraint"]
  646 -> 125 [style=dashed label="type-name"]
  646 -> 127 [style=dashed label="typedef-name"]
  646 -> 536 [style=dashed label="typename-specifier"]
  646 -> 454 [style=dashed label="unary-expression"]
  646 -> 455 [style=dashed label="unary-operator"]
  646 -> 130 [style=dashed label="unqualified-id"]
  646 -> 456 [style=dashed label="user-defined-character-literal"]
  646 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  646 -> 458 [style=dashed label="user-defined-integer-literal"]
  646 -> 459 [style=dashed label="user-defined-literal"]
  646 -> 460 [style=dashed label="user-defined-string-literal"]
  646 -> 537 [style=dashed label="yield-expression"]
  647 [label="State 647\n\l482 initializer: '(' • expression-list ')'\l"]
  647 -> 1 [style=solid label="IDENTIFIER"]
  647 -> 361 [style=solid label="'+'"]
  647 -> 362 [style=solid label="'-'"]
  647 -> 363 [style=solid label="'('"]
  647 -> 364 [style=solid label="'&'"]
  647 -> 365 [style=solid label="\"::\""]
  647 -> 366 [style=solid label="'['"]
  647 -> 367 [style=solid label="\"co_await\""]
  647 -> 939 [style=solid label="'{'"]
  647 -> 368 [style=solid label="'0'"]
  647 -> 369 [style=solid label="'1'"]
  647 -> 370 [style=solid label="\"0b\""]
  647 -> 371 [style=solid label="\"0B\""]
  647 -> 372 [style=solid label="'\\''"]
  647 -> 373 [style=solid label="\"false\""]
  647 -> 374 [style=solid label="\"true\""]
  647 -> 375 [style=solid label="\"noexcept\""]
  647 -> 17 [style=solid label="\"operator\""]
  647 -> 26 [style=solid label="\"decltype\""]
  647 -> 376 [style=solid label="\"delete\""]
  647 -> 377 [style=solid label="'.'"]
  647 -> 378 [style=solid label="'2'"]
  647 -> 379 [style=solid label="'3'"]
  647 -> 380 [style=solid label="'4'"]
  647 -> 381 [style=solid label="'5'"]
  647 -> 382 [style=solid label="'6'"]
  647 -> 383 [style=solid label="'7'"]
  647 -> 384 [style=solid label="'8'"]
  647 -> 385 [style=solid label="'9'"]
  647 -> 185 [style=solid label="\"u8\""]
  647 -> 186 [style=solid label="'u'"]
  647 -> 187 [style=solid label="'U'"]
  647 -> 188 [style=solid label="'L'"]
  647 -> 386 [style=solid label="'*'"]
  647 -> 203 [style=solid label="'\"'"]
  647 -> 387 [style=solid label="\"0x\""]
  647 -> 388 [style=solid label="\"0X\""]
  647 -> 389 [style=solid label="\"requires\""]
  647 -> 390 [style=solid label="\"new\""]
  647 -> 391 [style=solid label="'~'"]
  647 -> 392 [style=solid label="'!'"]
  647 -> 393 [style=solid label="\"++\""]
  647 -> 394 [style=solid label="\"--\""]
  647 -> 395 [style=solid label="\"this\""]
  647 -> 37 [style=solid label="\"auto\""]
  647 -> 396 [style=solid label="\"nullptr\""]
  647 -> 397 [style=solid label="\"dynamic_cast\""]
  647 -> 398 [style=solid label="\"static_cast\""]
  647 -> 399 [style=solid label="\"reinterpret_cast\""]
  647 -> 400 [style=solid label="\"const_cast\""]
  647 -> 401 [style=solid label="\"typeid\""]
  647 -> 38 [style=solid label="\"char\""]
  647 -> 39 [style=solid label="\"char8_t\""]
  647 -> 40 [style=solid label="\"char16_t\""]
  647 -> 41 [style=solid label="\"char32_t\""]
  647 -> 42 [style=solid label="\"wchar_t\""]
  647 -> 43 [style=solid label="\"bool\""]
  647 -> 44 [style=solid label="\"short\""]
  647 -> 45 [style=solid label="\"int\""]
  647 -> 46 [style=solid label="\"long\""]
  647 -> 47 [style=solid label="\"signed\""]
  647 -> 48 [style=solid label="\"unsigned\""]
  647 -> 49 [style=solid label="\"float\""]
  647 -> 50 [style=solid label="\"double\""]
  647 -> 51 [style=solid label="\"void\""]
  647 -> 209 [style=solid label="'R'"]
  647 -> 528 [style=solid label="\"throw\""]
  647 -> 56 [style=solid label="\"typename\""]
  647 -> 402 [style=solid label="\"sizeof\""]
  647 -> 403 [style=solid label="\"alignof\""]
  647 -> 529 [style=solid label="\"co_yield\""]
  647 -> 404 [style=dashed label="additive-expression"]
  647 -> 405 [style=dashed label="and-expression"]
  647 -> 1141 [style=dashed label="assignment-expression"]
  647 -> 406 [style=dashed label="await-expression"]
  647 -> 407 [style=dashed label="binary-literal"]
  647 -> 408 [style=dashed label="boolean-literal"]
  647 -> 1142 [style=dashed label="braced-init-list"]
  647 -> 409 [style=dashed label="cast-expression"]
  647 -> 410 [style=dashed label="character-literal"]
  647 -> 66 [style=dashed label="class-name"]
  647 -> 411 [style=dashed label="compare-expression"]
  647 -> 68 [style=dashed label="concept-name"]
  647 -> 531 [style=dashed label="conditional-expression"]
  647 -> 69 [style=dashed label="conversion-function-id"]
  647 -> 414 [style=dashed label="decimal-floating-point-literal"]
  647 -> 415 [style=dashed label="decimal-literal"]
  647 -> 77 [style=dashed label="decltype-specifier"]
  647 -> 416 [style=dashed label="delete-expression"]
  647 -> 417 [style=dashed label="digit"]
  647 -> 418 [style=dashed label="digit-sequence"]
  647 -> 419 [style=dashed label="encoding-prefix"]
  647 -> 85 [style=dashed label="enum-name"]
  647 -> 420 [style=dashed label="equality-expression"]
  647 -> 421 [style=dashed label="exclusive-or-expression"]
  647 -> 1144 [style=dashed label="expression-list"]
  647 -> 422 [style=dashed label="floating-point-literal"]
  647 -> 423 [style=dashed label="fold-expression"]
  647 -> 424 [style=dashed label="fractional-constant"]
  647 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  647 -> 426 [style=dashed label="hexadecimal-literal"]
  647 -> 427 [style=dashed label="hexadecimal-prefix"]
  647 -> 428 [style=dashed label="id-expression"]
  647 -> 429 [style=dashed label="inclusive-or-expression"]
  647 -> 1145 [style=dashed label="initializer-clause"]
  647 -> 1146 [style=dashed label="initializer-list"]
  647 -> 430 [style=dashed label="integer-literal"]
  647 -> 431 [style=dashed label="lambda-expression"]
  647 -> 432 [style=dashed label="lambda-introducer"]
  647 -> 433 [style=dashed label="literal"]
  647 -> 96 [style=dashed label="literal-operator-id"]
  647 -> 434 [style=dashed label="logical-and-expression"]
  647 -> 533 [style=dashed label="logical-or-expression"]
  647 -> 436 [style=dashed label="multiplicative-expression"]
  647 -> 100 [style=dashed label="namespace-alias"]
  647 -> 103 [style=dashed label="namespace-name"]
  647 -> 437 [style=dashed label="nested-name-specifier"]
  647 -> 438 [style=dashed label="new-expression"]
  647 -> 439 [style=dashed label="noexcept-expression"]
  647 -> 440 [style=dashed label="nonzero-digit"]
  647 -> 441 [style=dashed label="octal-literal"]
  647 -> 109 [style=dashed label="operator-function-id"]
  647 -> 110 [style=dashed label="placeholder-type-specifier"]
  647 -> 442 [style=dashed label="pm-expression"]
  647 -> 443 [style=dashed label="pointer-literal"]
  647 -> 444 [style=dashed label="postfix-expression"]
  647 -> 445 [style=dashed label="primary-expression"]
  647 -> 113 [style=dashed label="qualified-id"]
  647 -> 446 [style=dashed label="relational-expression"]
  647 -> 447 [style=dashed label="requires-expression"]
  647 -> 448 [style=dashed label="shift-expression"]
  647 -> 115 [style=dashed label="simple-template-id"]
  647 -> 534 [style=dashed label="simple-type-specifier"]
  647 -> 450 [style=dashed label="string-literal"]
  647 -> 121 [style=dashed label="template-id"]
  647 -> 216 [style=dashed label="template-name"]
  647 -> 535 [style=dashed label="throw-expression"]
  647 -> 124 [style=dashed label="type-constraint"]
  647 -> 125 [style=dashed label="type-name"]
  647 -> 127 [style=dashed label="typedef-name"]
  647 -> 536 [style=dashed label="typename-specifier"]
  647 -> 454 [style=dashed label="unary-expression"]
  647 -> 455 [style=dashed label="unary-operator"]
  647 -> 130 [style=dashed label="unqualified-id"]
  647 -> 456 [style=dashed label="user-defined-character-literal"]
  647 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  647 -> 458 [style=dashed label="user-defined-integer-literal"]
  647 -> 459 [style=dashed label="user-defined-literal"]
  647 -> 460 [style=dashed label="user-defined-string-literal"]
  647 -> 537 [style=dashed label="yield-expression"]
  648 [label="State 648\n\l108 braced-init-list: '{' • initializer-list '}'\l109                 | '{' • initializer-list ',' '}'\l110                 | '{' • designated-initializer-list '}'\l111                 | '{' • designated-initializer-list ',' '}'\l112                 | '{' • '}'\l160 compound-statement: '{' • '}'\l161                   | '{' • statement-seq '}'\l"]
  648 -> 665 [style=solid label="IDENTIFIER"]
  648 -> 361 [style=solid label="'+'"]
  648 -> 362 [style=solid label="'-'"]
  648 -> 2 [style=solid label="\"using\""]
  648 -> 666 [style=solid label="';'"]
  648 -> 4 [style=solid label="\"alignas\""]
  648 -> 363 [style=solid label="'('"]
  648 -> 364 [style=solid label="'&'"]
  648 -> 8 [style=solid label="\"asm\""]
  648 -> 365 [style=solid label="\"::\""]
  648 -> 667 [style=solid label="'['"]
  648 -> 367 [style=solid label="\"co_await\""]
  648 -> 648 [style=solid label="'{'"]
  648 -> 1147 [style=solid label="'}'"]
  648 -> 11 [style=solid label="\"virtual\""]
  648 -> 368 [style=solid label="'0'"]
  648 -> 369 [style=solid label="'1'"]
  648 -> 370 [style=solid label="\"0b\""]
  648 -> 371 [style=solid label="\"0B\""]
  648 -> 372 [style=solid label="'\\''"]
  648 -> 373 [style=solid label="\"false\""]
  648 -> 374 [style=solid label="\"true\""]
  648 -> 12 [style=solid label="\"class\""]
  648 -> 13 [style=solid label="\"struct\""]
  648 -> 14 [style=solid label="\"union\""]
  648 -> 375 [style=solid label="\"noexcept\""]
  648 -> 17 [style=solid label="\"operator\""]
  648 -> 669 [style=solid label="\"co_return\""]
  648 -> 18 [style=solid label="\"const\""]
  648 -> 19 [style=solid label="\"volatile\""]
  648 -> 20 [style=solid label="\"friend\""]
  648 -> 21 [style=solid label="\"typedef\""]
  648 -> 22 [style=solid label="\"constexpr\""]
  648 -> 23 [style=solid label="\"consteval\""]
  648 -> 24 [style=solid label="\"constinit\""]
  648 -> 263 [style=solid label="\"inline\""]
  648 -> 26 [style=solid label="\"decltype\""]
  648 -> 376 [style=solid label="\"delete\""]
  648 -> 1148 [style=solid label="'.'"]
  648 -> 378 [style=solid label="'2'"]
  648 -> 379 [style=solid label="'3'"]
  648 -> 380 [style=solid label="'4'"]
  648 -> 381 [style=solid label="'5'"]
  648 -> 382 [style=solid label="'6'"]
  648 -> 383 [style=solid label="'7'"]
  648 -> 384 [style=solid label="'8'"]
  648 -> 385 [style=solid label="'9'"]
  648 -> 27 [style=solid label="\"enum\""]
  648 -> 185 [style=solid label="\"u8\""]
  648 -> 186 [style=solid label="'u'"]
  648 -> 187 [style=solid label="'U'"]
  648 -> 188 [style=solid label="'L'"]
  648 -> 264 [style=solid label="\"extern\""]
  648 -> 29 [style=solid label="\"explicit\""]
  648 -> 386 [style=solid label="'*'"]
  648 -> 670 [style=solid label="\"default\""]
  648 -> 671 [style=solid label="\"try\""]
  648 -> 203 [style=solid label="'\"'"]
  648 -> 387 [style=solid label="\"0x\""]
  648 -> 388 [style=solid label="\"0X\""]
  648 -> 672 [style=solid label="\"while\""]
  648 -> 673 [style=solid label="\"do\""]
  648 -> 674 [style=solid label="\"for\""]
  648 -> 675 [style=solid label="\"break\""]
  648 -> 676 [style=solid label="\"continue\""]
  648 -> 677 [style=solid label="\"return\""]
  648 -> 678 [style=solid label="\"goto\""]
  648 -> 679 [style=solid label="\"case\""]
  648 -> 680 [style=solid label="\"namespace\""]
  648 -> 389 [style=solid label="\"requires\""]
  648 -> 390 [style=solid label="\"new\""]
  648 -> 391 [style=solid label="'~'"]
  648 -> 392 [style=solid label="'!'"]
  648 -> 393 [style=solid label="\"++\""]
  648 -> 394 [style=solid label="\"--\""]
  648 -> 395 [style=solid label="\"this\""]
  648 -> 37 [style=solid label="\"auto\""]
  648 -> 396 [style=solid label="\"nullptr\""]
  648 -> 397 [style=solid label="\"dynamic_cast\""]
  648 -> 398 [style=solid label="\"static_cast\""]
  648 -> 399 [style=solid label="\"reinterpret_cast\""]
  648 -> 400 [style=solid label="\"const_cast\""]
  648 -> 401 [style=solid label="\"typeid\""]
  648 -> 681 [style=solid label="\"if\""]
  648 -> 682 [style=solid label="\"switch\""]
  648 -> 38 [style=solid label="\"char\""]
  648 -> 39 [style=solid label="\"char8_t\""]
  648 -> 40 [style=solid label="\"char16_t\""]
  648 -> 41 [style=solid label="\"char32_t\""]
  648 -> 42 [style=solid label="\"wchar_t\""]
  648 -> 43 [style=solid label="\"bool\""]
  648 -> 44 [style=solid label="\"short\""]
  648 -> 45 [style=solid label="\"int\""]
  648 -> 46 [style=solid label="\"long\""]
  648 -> 47 [style=solid label="\"signed\""]
  648 -> 48 [style=solid label="\"unsigned\""]
  648 -> 49 [style=solid label="\"float\""]
  648 -> 50 [style=solid label="\"double\""]
  648 -> 51 [style=solid label="\"void\""]
  648 -> 52 [style=solid label="\"static_assert\""]
  648 -> 53 [style=solid label="\"static\""]
  648 -> 54 [style=solid label="\"thread_local\""]
  648 -> 55 [style=solid label="\"mutable\""]
  648 -> 209 [style=solid label="'R'"]
  648 -> 528 [style=solid label="\"throw\""]
  648 -> 56 [style=solid label="\"typename\""]
  648 -> 402 [style=solid label="\"sizeof\""]
  648 -> 403 [style=solid label="\"alignof\""]
  648 -> 529 [style=solid label="\"co_yield\""]
  648 -> 404 [style=dashed label="additive-expression"]
  648 -> 57 [style=dashed label="alias-declaration"]
  648 -> 58 [style=dashed label="alignment-specifier"]
  648 -> 405 [style=dashed label="and-expression"]
  648 -> 59 [style=dashed label="asm-declaration"]
  648 -> 1149 [style=dashed label="assignment-expression"]
  648 -> 61 [style=dashed label="attribute-specifier"]
  648 -> 683 [style=dashed label="attribute-specifier-seq"]
  648 -> 406 [style=dashed label="await-expression"]
  648 -> 407 [style=dashed label="binary-literal"]
  648 -> 684 [style=dashed label="block-declaration"]
  648 -> 408 [style=dashed label="boolean-literal"]
  648 -> 1142 [style=dashed label="braced-init-list"]
  648 -> 409 [style=dashed label="cast-expression"]
  648 -> 410 [style=dashed label="character-literal"]
  648 -> 64 [style=dashed label="class-head"]
  648 -> 65 [style=dashed label="class-key"]
  648 -> 66 [style=dashed label="class-name"]
  648 -> 67 [style=dashed label="class-specifier"]
  648 -> 411 [style=dashed label="compare-expression"]
  648 -> 685 [style=dashed label="compound-statement"]
  648 -> 68 [style=dashed label="concept-name"]
  648 -> 531 [style=dashed label="conditional-expression"]
  648 -> 69 [style=dashed label="conversion-function-id"]
  648 -> 686 [style=dashed label="coroutine-return-statement"]
  648 -> 70 [style=dashed label="cv-qualifier"]
  648 -> 414 [style=dashed label="decimal-floating-point-literal"]
  648 -> 415 [style=dashed label="decimal-literal"]
  648 -> 71 [style=dashed label="decl-specifier"]
  648 -> 687 [style=dashed label="decl-specifier-seq"]
  648 -> 688 [style=dashed label="declaration-statement"]
  648 -> 77 [style=dashed label="decltype-specifier"]
  648 -> 79 [style=dashed label="defining-type-specifier"]
  648 -> 416 [style=dashed label="delete-expression"]
  648 -> 1150 [style=dashed label="designated-initializer-clause"]
  648 -> 1151 [style=dashed label="designated-initializer-list"]
  648 -> 1152 [style=dashed label="designator"]
  648 -> 417 [style=dashed label="digit"]
  648 -> 418 [style=dashed label="digit-sequence"]
  648 -> 80 [style=dashed label="elaborated-enum-specifier"]
  648 -> 81 [style=dashed label="elaborated-type-specifier"]
  648 -> 419 [style=dashed label="encoding-prefix"]
  648 -> 83 [style=dashed label="enum-head"]
  648 -> 84 [style=dashed label="enum-key"]
  648 -> 85 [style=dashed label="enum-name"]
  648 -> 86 [style=dashed label="enum-specifier"]
  648 -> 420 [style=dashed label="equality-expression"]
  648 -> 421 [style=dashed label="exclusive-or-expression"]
  648 -> 269 [style=dashed label="explicit-specifier"]
  648 -> 689 [style=dashed label="expression"]
  648 -> 690 [style=dashed label="expression-statement"]
  648 -> 422 [style=dashed label="floating-point-literal"]
  648 -> 423 [style=dashed label="fold-expression"]
  648 -> 424 [style=dashed label="fractional-constant"]
  648 -> 92 [style=dashed label="function-specifier"]
  648 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  648 -> 426 [style=dashed label="hexadecimal-literal"]
  648 -> 427 [style=dashed label="hexadecimal-prefix"]
  648 -> 428 [style=dashed label="id-expression"]
  648 -> 429 [style=dashed label="inclusive-or-expression"]
  648 -> 1145 [style=dashed label="initializer-clause"]
  648 -> 1153 [style=dashed label="initializer-list"]
  648 -> 430 [style=dashed label="integer-literal"]
  648 -> 691 [style=dashed label="iteration-statement"]
  648 -> 692 [style=dashed label="jump-statement"]
  648 -> 693 [style=dashed label="labeled-statement"]
  648 -> 431 [style=dashed label="lambda-expression"]
  648 -> 432 [style=dashed label="lambda-introducer"]
  648 -> 433 [style=dashed label="literal"]
  648 -> 96 [style=dashed label="literal-operator-id"]
  648 -> 434 [style=dashed label="logical-and-expression"]
  648 -> 533 [style=dashed label="logical-or-expression"]
  648 -> 436 [style=dashed label="multiplicative-expression"]
  648 -> 100 [style=dashed label="namespace-alias"]
  648 -> 101 [style=dashed label="namespace-alias-definition"]
  648 -> 103 [style=dashed label="namespace-name"]
  648 -> 437 [style=dashed label="nested-name-specifier"]
  648 -> 438 [style=dashed label="new-expression"]
  648 -> 439 [style=dashed label="noexcept-expression"]
  648 -> 440 [style=dashed label="nonzero-digit"]
  648 -> 441 [style=dashed label="octal-literal"]
  648 -> 108 [style=dashed label="opaque-enum-declaration"]
  648 -> 109 [style=dashed label="operator-function-id"]
  648 -> 110 [style=dashed label="placeholder-type-specifier"]
  648 -> 442 [style=dashed label="pm-expression"]
  648 -> 443 [style=dashed label="pointer-literal"]
  648 -> 444 [style=dashed label="postfix-expression"]
  648 -> 445 [style=dashed label="primary-expression"]
  648 -> 113 [style=dashed label="qualified-id"]
  648 -> 446 [style=dashed label="relational-expression"]
  648 -> 447 [style=dashed label="requires-expression"]
  648 -> 694 [style=dashed label="selection-statement"]
  648 -> 448 [style=dashed label="shift-expression"]
  648 -> 114 [style=dashed label="simple-declaration"]
  648 -> 115 [style=dashed label="simple-template-id"]
  648 -> 449 [style=dashed label="simple-type-specifier"]
  648 -> 695 [style=dashed label="statement"]
  648 -> 696 [style=dashed label="statement-seq"]
  648 -> 117 [style=dashed label="static_assert-declaration"]
  648 -> 118 [style=dashed label="storage-class-specifier"]
  648 -> 450 [style=dashed label="string-literal"]
  648 -> 121 [style=dashed label="template-id"]
  648 -> 216 [style=dashed label="template-name"]
  648 -> 535 [style=dashed label="throw-expression"]
  648 -> 697 [style=dashed label="try-block"]
  648 -> 124 [style=dashed label="type-constraint"]
  648 -> 125 [style=dashed label="type-name"]
  648 -> 126 [style=dashed label="type-specifier"]
  648 -> 127 [style=dashed label="typedef-name"]
  648 -> 453 [style=dashed label="typename-specifier"]
  648 -> 454 [style=dashed label="unary-expression"]
  648 -> 455 [style=dashed label="unary-operator"]
  648 -> 130 [style=dashed label="unqualified-id"]
  648 -> 456 [style=dashed label="user-defined-character-literal"]
  648 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  648 -> 458 [style=dashed label="user-defined-integer-literal"]
  648 -> 459 [style=dashed label="user-defined-literal"]
  648 -> 460 [style=dashed label="user-defined-string-literal"]
  648 -> 131 [style=dashed label="using-declaration"]
  648 -> 132 [style=dashed label="using-directive"]
  648 -> 133 [style=dashed label="using-enum-declaration"]
  648 -> 537 [style=dashed label="yield-expression"]
  649 [label="State 649\n\l481 initializer: brace-or-equal-initializer •\l"]
  649 -> "649R481" [style=solid]
 "649R481" [label="R481", fillcolor=3, shape=diamond, style=filled]
  650 [label="State 650\n\l107 brace-or-equal-initializer: braced-init-list •\l"]
  650 -> "650R107" [style=solid]
 "650R107" [label="R107", fillcolor=3, shape=diamond, style=filled]
  651 [label="State 651\n\l401 function-definition: decl-specifier-seq declarator function-body •\l"]
  651 -> "651R401" [style=solid]
 "651R401" [label="R401", fillcolor=3, shape=diamond, style=filled]
  652 [label="State 652\n\l474 init-declarator: declarator initializer •\l"]
  652 -> "652R474" [style=solid]
 "652R474" [label="R474", fillcolor=3, shape=diamond, style=filled]
  653 [label="State 653\n\l409 function-definition: decl-specifier-seq declarator requires-clause • function-body\l475 init-declarator: declarator requires-clause •\l"]
  653 -> 291 [style=solid label="'='"]
  653 -> 293 [style=solid label="':'"]
  653 -> 294 [style=solid label="'{'"]
  653 -> 296 [style=solid label="\"try\""]
  653 -> 299 [style=dashed label="compound-statement"]
  653 -> 300 [style=dashed label="ctor-initializer"]
  653 -> 1154 [style=dashed label="function-body"]
  653 -> 302 [style=dashed label="function-try-block"]
  653 -> "653R475" [style=solid]
 "653R475" [label="R475", fillcolor=3, shape=diamond, style=filled]
  654 [label="State 654\n\l405 function-definition: decl-specifier-seq declarator virt-specifier-seq • function-body\l1193 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  654 -> 291 [style=solid label="'='"]
  654 -> 293 [style=solid label="':'"]
  654 -> 294 [style=solid label="'{'"]
  654 -> 295 [style=solid label="\"final\""]
  654 -> 296 [style=solid label="\"try\""]
  654 -> 298 [style=solid label="\"override\""]
  654 -> 299 [style=dashed label="compound-statement"]
  654 -> 300 [style=dashed label="ctor-initializer"]
  654 -> 1155 [style=dashed label="function-body"]
  654 -> 302 [style=dashed label="function-try-block"]
  654 -> 707 [style=dashed label="virt-specifier"]
  655 [label="State 655\n\l978 simple-declaration: decl-specifier-seq init-declarator-list ';' •\l"]
  655 -> "655R978" [style=solid]
 "655R978" [label="R978", fillcolor=3, shape=diamond, style=filled]
  656 [label="State 656\n\l477 init-declarator-list: init-declarator-list ',' • init-declarator\l"]
  656 -> 148 [style=solid label="IDENTIFIER"]
  656 -> 5 [style=solid label="'('"]
  656 -> 6 [style=solid label="\"...\""]
  656 -> 7 [style=solid label="'&'"]
  656 -> 9 [style=solid label="\"::\""]
  656 -> 16 [style=solid label="\"&&\""]
  656 -> 17 [style=solid label="\"operator\""]
  656 -> 135 [style=solid label="\"decltype\""]
  656 -> 32 [style=solid label="'*'"]
  656 -> 36 [style=solid label="'~'"]
  656 -> 66 [style=dashed label="class-name"]
  656 -> 69 [style=dashed label="conversion-function-id"]
  656 -> 1156 [style=dashed label="declarator"]
  656 -> 76 [style=dashed label="declarator-id"]
  656 -> 139 [style=dashed label="decltype-specifier"]
  656 -> 85 [style=dashed label="enum-name"]
  656 -> 94 [style=dashed label="id-expression"]
  656 -> 1157 [style=dashed label="init-declarator"]
  656 -> 96 [style=dashed label="literal-operator-id"]
  656 -> 100 [style=dashed label="namespace-alias"]
  656 -> 103 [style=dashed label="namespace-name"]
  656 -> 149 [style=dashed label="nested-name-specifier"]
  656 -> 107 [style=dashed label="noptr-declarator"]
  656 -> 109 [style=dashed label="operator-function-id"]
  656 -> 111 [style=dashed label="ptr-declarator"]
  656 -> 112 [style=dashed label="ptr-operator"]
  656 -> 113 [style=dashed label="qualified-id"]
  656 -> 115 [style=dashed label="simple-template-id"]
  656 -> 121 [style=dashed label="template-id"]
  656 -> 143 [style=dashed label="template-name"]
  656 -> 144 [style=dashed label="type-name"]
  656 -> 127 [style=dashed label="typedef-name"]
  656 -> 130 [style=dashed label="unqualified-id"]
  657 [label="State 657\n\l983 simple-declaration: decl-specifier-seq ref-qualifier '[' • identifier-list ']' initializer ';'\l"]
  657 -> 644 [style=solid label="IDENTIFIER"]
  657 -> 1158 [style=dashed label="identifier-list"]
  658 [label="State 658\n\l397 function-body: '=' \"delete\" • ';'\l"]
  658 -> 1159 [style=solid label="';'"]
  659 [label="State 659\n\l396 function-body: '=' \"default\" • ';'\l"]
  659 -> 1160 [style=solid label="';'"]
  660 [label="State 660\n\l145 class-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l579 mem-initializer-id: IDENTIFIER •\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l"]
  660 -> "660R145" [style=solid]
 "660R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  660 -> "660R297d" [label="['(', \"::\", '{']", style=solid]
 "660R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  660 -> "660R579d" [label="['(', '{']", style=solid]
 "660R579d" [label="R579", fillcolor=5, shape=diamond, style=filled]
  660 -> "660R651d" [label="[\"::\"]", style=solid]
 "660R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  660 -> "660R657d" [label="[\"::\"]", style=solid]
 "660R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  660 -> "660R1066" [label="['<']", style=solid]
 "660R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  660 -> "660R1124d" [label="['(', \"::\", '{']", style=solid]
 "660R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  661 [label="State 661\n\l578 mem-initializer-id: class-or-decltype •\l"]
  661 -> "661R578" [style=solid]
 "661R578" [label="R578", fillcolor=3, shape=diamond, style=filled]
  662 [label="State 662\n\l580 mem-initializer-list: mem-initializer •\l581                     | mem-initializer • \"...\"\l"]
  662 -> 1161 [style=solid label="\"...\""]
  662 -> "662R580" [style=solid]
 "662R580" [label="R580", fillcolor=3, shape=diamond, style=filled]
  663 [label="State 663\n\l575 mem-initializer: mem-initializer-id • '(' ')'\l576                | mem-initializer-id • '(' expression-list ')'\l577                | mem-initializer-id • braced-init-list\l"]
  663 -> 1162 [style=solid label="'('"]
  663 -> 939 [style=solid label="'{'"]
  663 -> 1163 [style=dashed label="braced-init-list"]
  664 [label="State 664\n\l184 ctor-initializer: ':' mem-initializer-list •\l582 mem-initializer-list: mem-initializer-list • ',' mem-initializer\l583                     | mem-initializer-list • ',' mem-initializer \"...\"\l"]
  664 -> 1164 [style=solid label="','"]
  664 -> "664R184" [style=solid]
 "664R184" [label="R184", fillcolor=3, shape=diamond, style=filled]
  665 [label="State 665\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l524 labeled-statement: IDENTIFIER • ':' statement\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l1154 unqualified-id: IDENTIFIER •\l"]
  665 -> 1165 [style=solid label="':'"]
  665 -> "665R145" [style=solid]
 "665R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  665 -> "665R163d" [label="[\"decltype\", \"auto\"]", style=solid]
 "665R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  665 -> "665R163" [label="['<']", style=solid]
 "665R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  665 -> "665R297d" [label="[IDENTIFIER, ';', \"alignas\", '(', \"...\", '&', \"::\", '[', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "665R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  665 -> "665R651d" [label="[\"::\"]", style=solid]
 "665R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  665 -> "665R657d" [label="[\"::\"]", style=solid]
 "665R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  665 -> "665R1066d" [label="[IDENTIFIER, ';', \"alignas\", '(', \"...\", '&', \"::\", '[', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", '<', \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "665R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  665 -> "665R1124d" [label="[IDENTIFIER, ';', \"alignas\", '(', \"...\", '&', \"::\", '[', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "665R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  665 -> "665R1154d" [label="[';', '(', \"...\", '&', '[', \"&&\", '<', '*']", style=solid]
 "665R1154d" [label="R1154", fillcolor=5, shape=diamond, style=filled]
  665 -> "665R1154" [label="['+', '-', '=', \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', '}', \"<=>\", '?', \"||\", \"->\", '.', \"==\", \"!=\", '^', '>', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"++\", \"--\"]", style=solid]
 "665R1154" [label="R1154", fillcolor=3, shape=diamond, style=filled]
  666 [label="State 666\n\l341 expression-statement: ';' •\l"]
  666 -> "666R341" [style=solid]
 "666R341" [label="R341", fillcolor=3, shape=diamond, style=filled]
  667 [label="State 667\n\l 50 attribute-specifier: '[' • '[' attribute-list ']' ']'\l 51                    | '[' • '[' attribute-using-prefix attribute-list ']' ']'\l538 lambda-introducer: '[' • ']'\l539                  | '[' • lambda-capture ']'\l"]
  667 -> 766 [style=solid label="IDENTIFIER"]
  667 -> 767 [style=solid label="'='"]
  667 -> 768 [style=solid label="\"...\""]
  667 -> 769 [style=solid label="'&'"]
  667 -> 156 [style=solid label="'['"]
  667 -> 770 [style=solid label="']'"]
  667 -> 771 [style=solid label="'*'"]
  667 -> 772 [style=solid label="\"this\""]
  667 -> 773 [style=dashed label="capture"]
  667 -> 774 [style=dashed label="capture-default"]
  667 -> 775 [style=dashed label="capture-list"]
  667 -> 776 [style=dashed label="init-capture"]
  667 -> 777 [style=dashed label="lambda-capture"]
  667 -> 778 [style=dashed label="simple-capture"]
  668 [label="State 668\n\l160 compound-statement: '{' '}' •\l"]
  668 -> "668R160" [style=solid]
 "668R160" [label="R160", fillcolor=3, shape=diamond, style=filled]
  669 [label="State 669\n\l182 coroutine-return-statement: \"co_return\" • ';'\l183                           | \"co_return\" • expr-or-braced-init-list ';'\l"]
  669 -> 1 [style=solid label="IDENTIFIER"]
  669 -> 361 [style=solid label="'+'"]
  669 -> 362 [style=solid label="'-'"]
  669 -> 1166 [style=solid label="';'"]
  669 -> 363 [style=solid label="'('"]
  669 -> 364 [style=solid label="'&'"]
  669 -> 365 [style=solid label="\"::\""]
  669 -> 366 [style=solid label="'['"]
  669 -> 367 [style=solid label="\"co_await\""]
  669 -> 939 [style=solid label="'{'"]
  669 -> 368 [style=solid label="'0'"]
  669 -> 369 [style=solid label="'1'"]
  669 -> 370 [style=solid label="\"0b\""]
  669 -> 371 [style=solid label="\"0B\""]
  669 -> 372 [style=solid label="'\\''"]
  669 -> 373 [style=solid label="\"false\""]
  669 -> 374 [style=solid label="\"true\""]
  669 -> 375 [style=solid label="\"noexcept\""]
  669 -> 17 [style=solid label="\"operator\""]
  669 -> 26 [style=solid label="\"decltype\""]
  669 -> 376 [style=solid label="\"delete\""]
  669 -> 377 [style=solid label="'.'"]
  669 -> 378 [style=solid label="'2'"]
  669 -> 379 [style=solid label="'3'"]
  669 -> 380 [style=solid label="'4'"]
  669 -> 381 [style=solid label="'5'"]
  669 -> 382 [style=solid label="'6'"]
  669 -> 383 [style=solid label="'7'"]
  669 -> 384 [style=solid label="'8'"]
  669 -> 385 [style=solid label="'9'"]
  669 -> 185 [style=solid label="\"u8\""]
  669 -> 186 [style=solid label="'u'"]
  669 -> 187 [style=solid label="'U'"]
  669 -> 188 [style=solid label="'L'"]
  669 -> 386 [style=solid label="'*'"]
  669 -> 203 [style=solid label="'\"'"]
  669 -> 387 [style=solid label="\"0x\""]
  669 -> 388 [style=solid label="\"0X\""]
  669 -> 389 [style=solid label="\"requires\""]
  669 -> 390 [style=solid label="\"new\""]
  669 -> 391 [style=solid label="'~'"]
  669 -> 392 [style=solid label="'!'"]
  669 -> 393 [style=solid label="\"++\""]
  669 -> 394 [style=solid label="\"--\""]
  669 -> 395 [style=solid label="\"this\""]
  669 -> 37 [style=solid label="\"auto\""]
  669 -> 396 [style=solid label="\"nullptr\""]
  669 -> 397 [style=solid label="\"dynamic_cast\""]
  669 -> 398 [style=solid label="\"static_cast\""]
  669 -> 399 [style=solid label="\"reinterpret_cast\""]
  669 -> 400 [style=solid label="\"const_cast\""]
  669 -> 401 [style=solid label="\"typeid\""]
  669 -> 38 [style=solid label="\"char\""]
  669 -> 39 [style=solid label="\"char8_t\""]
  669 -> 40 [style=solid label="\"char16_t\""]
  669 -> 41 [style=solid label="\"char32_t\""]
  669 -> 42 [style=solid label="\"wchar_t\""]
  669 -> 43 [style=solid label="\"bool\""]
  669 -> 44 [style=solid label="\"short\""]
  669 -> 45 [style=solid label="\"int\""]
  669 -> 46 [style=solid label="\"long\""]
  669 -> 47 [style=solid label="\"signed\""]
  669 -> 48 [style=solid label="\"unsigned\""]
  669 -> 49 [style=solid label="\"float\""]
  669 -> 50 [style=solid label="\"double\""]
  669 -> 51 [style=solid label="\"void\""]
  669 -> 209 [style=solid label="'R'"]
  669 -> 528 [style=solid label="\"throw\""]
  669 -> 56 [style=solid label="\"typename\""]
  669 -> 402 [style=solid label="\"sizeof\""]
  669 -> 403 [style=solid label="\"alignof\""]
  669 -> 529 [style=solid label="\"co_yield\""]
  669 -> 404 [style=dashed label="additive-expression"]
  669 -> 405 [style=dashed label="and-expression"]
  669 -> 530 [style=dashed label="assignment-expression"]
  669 -> 406 [style=dashed label="await-expression"]
  669 -> 407 [style=dashed label="binary-literal"]
  669 -> 408 [style=dashed label="boolean-literal"]
  669 -> 1167 [style=dashed label="braced-init-list"]
  669 -> 409 [style=dashed label="cast-expression"]
  669 -> 410 [style=dashed label="character-literal"]
  669 -> 66 [style=dashed label="class-name"]
  669 -> 411 [style=dashed label="compare-expression"]
  669 -> 68 [style=dashed label="concept-name"]
  669 -> 531 [style=dashed label="conditional-expression"]
  669 -> 69 [style=dashed label="conversion-function-id"]
  669 -> 414 [style=dashed label="decimal-floating-point-literal"]
  669 -> 415 [style=dashed label="decimal-literal"]
  669 -> 77 [style=dashed label="decltype-specifier"]
  669 -> 416 [style=dashed label="delete-expression"]
  669 -> 417 [style=dashed label="digit"]
  669 -> 418 [style=dashed label="digit-sequence"]
  669 -> 419 [style=dashed label="encoding-prefix"]
  669 -> 85 [style=dashed label="enum-name"]
  669 -> 420 [style=dashed label="equality-expression"]
  669 -> 421 [style=dashed label="exclusive-or-expression"]
  669 -> 1168 [style=dashed label="expr-or-braced-init-list"]
  669 -> 1169 [style=dashed label="expression"]
  669 -> 422 [style=dashed label="floating-point-literal"]
  669 -> 423 [style=dashed label="fold-expression"]
  669 -> 424 [style=dashed label="fractional-constant"]
  669 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  669 -> 426 [style=dashed label="hexadecimal-literal"]
  669 -> 427 [style=dashed label="hexadecimal-prefix"]
  669 -> 428 [style=dashed label="id-expression"]
  669 -> 429 [style=dashed label="inclusive-or-expression"]
  669 -> 430 [style=dashed label="integer-literal"]
  669 -> 431 [style=dashed label="lambda-expression"]
  669 -> 432 [style=dashed label="lambda-introducer"]
  669 -> 433 [style=dashed label="literal"]
  669 -> 96 [style=dashed label="literal-operator-id"]
  669 -> 434 [style=dashed label="logical-and-expression"]
  669 -> 533 [style=dashed label="logical-or-expression"]
  669 -> 436 [style=dashed label="multiplicative-expression"]
  669 -> 100 [style=dashed label="namespace-alias"]
  669 -> 103 [style=dashed label="namespace-name"]
  669 -> 437 [style=dashed label="nested-name-specifier"]
  669 -> 438 [style=dashed label="new-expression"]
  669 -> 439 [style=dashed label="noexcept-expression"]
  669 -> 440 [style=dashed label="nonzero-digit"]
  669 -> 441 [style=dashed label="octal-literal"]
  669 -> 109 [style=dashed label="operator-function-id"]
  669 -> 110 [style=dashed label="placeholder-type-specifier"]
  669 -> 442 [style=dashed label="pm-expression"]
  669 -> 443 [style=dashed label="pointer-literal"]
  669 -> 444 [style=dashed label="postfix-expression"]
  669 -> 445 [style=dashed label="primary-expression"]
  669 -> 113 [style=dashed label="qualified-id"]
  669 -> 446 [style=dashed label="relational-expression"]
  669 -> 447 [style=dashed label="requires-expression"]
  669 -> 448 [style=dashed label="shift-expression"]
  669 -> 115 [style=dashed label="simple-template-id"]
  669 -> 534 [style=dashed label="simple-type-specifier"]
  669 -> 450 [style=dashed label="string-literal"]
  669 -> 121 [style=dashed label="template-id"]
  669 -> 216 [style=dashed label="template-name"]
  669 -> 535 [style=dashed label="throw-expression"]
  669 -> 124 [style=dashed label="type-constraint"]
  669 -> 125 [style=dashed label="type-name"]
  669 -> 127 [style=dashed label="typedef-name"]
  669 -> 536 [style=dashed label="typename-specifier"]
  669 -> 454 [style=dashed label="unary-expression"]
  669 -> 455 [style=dashed label="unary-operator"]
  669 -> 130 [style=dashed label="unqualified-id"]
  669 -> 456 [style=dashed label="user-defined-character-literal"]
  669 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  669 -> 458 [style=dashed label="user-defined-integer-literal"]
  669 -> 459 [style=dashed label="user-defined-literal"]
  669 -> 460 [style=dashed label="user-defined-string-literal"]
  669 -> 537 [style=dashed label="yield-expression"]
  670 [label="State 670\n\l528 labeled-statement: \"default\" • ':' statement\l"]
  670 -> 1170 [style=solid label="':'"]
  671 [label="State 671\n\l1083 try-block: \"try\" • compound-statement handler-seq\l"]
  671 -> 294 [style=solid label="'{'"]
  671 -> 1171 [style=dashed label="compound-statement"]
  672 [label="State 672\n\l509 iteration-statement: \"while\" • '(' condition ')' statement\l"]
  672 -> 1172 [style=solid label="'('"]
  673 [label="State 673\n\l510 iteration-statement: \"do\" • statement \"while\" '(' expression ')' ';'\l"]
  673 -> 665 [style=solid label="IDENTIFIER"]
  673 -> 361 [style=solid label="'+'"]
  673 -> 362 [style=solid label="'-'"]
  673 -> 2 [style=solid label="\"using\""]
  673 -> 666 [style=solid label="';'"]
  673 -> 4 [style=solid label="\"alignas\""]
  673 -> 363 [style=solid label="'('"]
  673 -> 364 [style=solid label="'&'"]
  673 -> 8 [style=solid label="\"asm\""]
  673 -> 365 [style=solid label="\"::\""]
  673 -> 667 [style=solid label="'['"]
  673 -> 367 [style=solid label="\"co_await\""]
  673 -> 294 [style=solid label="'{'"]
  673 -> 11 [style=solid label="\"virtual\""]
  673 -> 368 [style=solid label="'0'"]
  673 -> 369 [style=solid label="'1'"]
  673 -> 370 [style=solid label="\"0b\""]
  673 -> 371 [style=solid label="\"0B\""]
  673 -> 372 [style=solid label="'\\''"]
  673 -> 373 [style=solid label="\"false\""]
  673 -> 374 [style=solid label="\"true\""]
  673 -> 12 [style=solid label="\"class\""]
  673 -> 13 [style=solid label="\"struct\""]
  673 -> 14 [style=solid label="\"union\""]
  673 -> 375 [style=solid label="\"noexcept\""]
  673 -> 17 [style=solid label="\"operator\""]
  673 -> 669 [style=solid label="\"co_return\""]
  673 -> 18 [style=solid label="\"const\""]
  673 -> 19 [style=solid label="\"volatile\""]
  673 -> 20 [style=solid label="\"friend\""]
  673 -> 21 [style=solid label="\"typedef\""]
  673 -> 22 [style=solid label="\"constexpr\""]
  673 -> 23 [style=solid label="\"consteval\""]
  673 -> 24 [style=solid label="\"constinit\""]
  673 -> 263 [style=solid label="\"inline\""]
  673 -> 26 [style=solid label="\"decltype\""]
  673 -> 376 [style=solid label="\"delete\""]
  673 -> 377 [style=solid label="'.'"]
  673 -> 378 [style=solid label="'2'"]
  673 -> 379 [style=solid label="'3'"]
  673 -> 380 [style=solid label="'4'"]
  673 -> 381 [style=solid label="'5'"]
  673 -> 382 [style=solid label="'6'"]
  673 -> 383 [style=solid label="'7'"]
  673 -> 384 [style=solid label="'8'"]
  673 -> 385 [style=solid label="'9'"]
  673 -> 27 [style=solid label="\"enum\""]
  673 -> 185 [style=solid label="\"u8\""]
  673 -> 186 [style=solid label="'u'"]
  673 -> 187 [style=solid label="'U'"]
  673 -> 188 [style=solid label="'L'"]
  673 -> 264 [style=solid label="\"extern\""]
  673 -> 29 [style=solid label="\"explicit\""]
  673 -> 386 [style=solid label="'*'"]
  673 -> 670 [style=solid label="\"default\""]
  673 -> 671 [style=solid label="\"try\""]
  673 -> 203 [style=solid label="'\"'"]
  673 -> 387 [style=solid label="\"0x\""]
  673 -> 388 [style=solid label="\"0X\""]
  673 -> 672 [style=solid label="\"while\""]
  673 -> 673 [style=solid label="\"do\""]
  673 -> 674 [style=solid label="\"for\""]
  673 -> 675 [style=solid label="\"break\""]
  673 -> 676 [style=solid label="\"continue\""]
  673 -> 677 [style=solid label="\"return\""]
  673 -> 678 [style=solid label="\"goto\""]
  673 -> 679 [style=solid label="\"case\""]
  673 -> 680 [style=solid label="\"namespace\""]
  673 -> 389 [style=solid label="\"requires\""]
  673 -> 390 [style=solid label="\"new\""]
  673 -> 391 [style=solid label="'~'"]
  673 -> 392 [style=solid label="'!'"]
  673 -> 393 [style=solid label="\"++\""]
  673 -> 394 [style=solid label="\"--\""]
  673 -> 395 [style=solid label="\"this\""]
  673 -> 37 [style=solid label="\"auto\""]
  673 -> 396 [style=solid label="\"nullptr\""]
  673 -> 397 [style=solid label="\"dynamic_cast\""]
  673 -> 398 [style=solid label="\"static_cast\""]
  673 -> 399 [style=solid label="\"reinterpret_cast\""]
  673 -> 400 [style=solid label="\"const_cast\""]
  673 -> 401 [style=solid label="\"typeid\""]
  673 -> 681 [style=solid label="\"if\""]
  673 -> 682 [style=solid label="\"switch\""]
  673 -> 38 [style=solid label="\"char\""]
  673 -> 39 [style=solid label="\"char8_t\""]
  673 -> 40 [style=solid label="\"char16_t\""]
  673 -> 41 [style=solid label="\"char32_t\""]
  673 -> 42 [style=solid label="\"wchar_t\""]
  673 -> 43 [style=solid label="\"bool\""]
  673 -> 44 [style=solid label="\"short\""]
  673 -> 45 [style=solid label="\"int\""]
  673 -> 46 [style=solid label="\"long\""]
  673 -> 47 [style=solid label="\"signed\""]
  673 -> 48 [style=solid label="\"unsigned\""]
  673 -> 49 [style=solid label="\"float\""]
  673 -> 50 [style=solid label="\"double\""]
  673 -> 51 [style=solid label="\"void\""]
  673 -> 52 [style=solid label="\"static_assert\""]
  673 -> 53 [style=solid label="\"static\""]
  673 -> 54 [style=solid label="\"thread_local\""]
  673 -> 55 [style=solid label="\"mutable\""]
  673 -> 209 [style=solid label="'R'"]
  673 -> 528 [style=solid label="\"throw\""]
  673 -> 56 [style=solid label="\"typename\""]
  673 -> 402 [style=solid label="\"sizeof\""]
  673 -> 403 [style=solid label="\"alignof\""]
  673 -> 529 [style=solid label="\"co_yield\""]
  673 -> 404 [style=dashed label="additive-expression"]
  673 -> 57 [style=dashed label="alias-declaration"]
  673 -> 58 [style=dashed label="alignment-specifier"]
  673 -> 405 [style=dashed label="and-expression"]
  673 -> 59 [style=dashed label="asm-declaration"]
  673 -> 530 [style=dashed label="assignment-expression"]
  673 -> 61 [style=dashed label="attribute-specifier"]
  673 -> 683 [style=dashed label="attribute-specifier-seq"]
  673 -> 406 [style=dashed label="await-expression"]
  673 -> 407 [style=dashed label="binary-literal"]
  673 -> 684 [style=dashed label="block-declaration"]
  673 -> 408 [style=dashed label="boolean-literal"]
  673 -> 409 [style=dashed label="cast-expression"]
  673 -> 410 [style=dashed label="character-literal"]
  673 -> 64 [style=dashed label="class-head"]
  673 -> 65 [style=dashed label="class-key"]
  673 -> 66 [style=dashed label="class-name"]
  673 -> 67 [style=dashed label="class-specifier"]
  673 -> 411 [style=dashed label="compare-expression"]
  673 -> 685 [style=dashed label="compound-statement"]
  673 -> 68 [style=dashed label="concept-name"]
  673 -> 531 [style=dashed label="conditional-expression"]
  673 -> 69 [style=dashed label="conversion-function-id"]
  673 -> 686 [style=dashed label="coroutine-return-statement"]
  673 -> 70 [style=dashed label="cv-qualifier"]
  673 -> 414 [style=dashed label="decimal-floating-point-literal"]
  673 -> 415 [style=dashed label="decimal-literal"]
  673 -> 71 [style=dashed label="decl-specifier"]
  673 -> 687 [style=dashed label="decl-specifier-seq"]
  673 -> 688 [style=dashed label="declaration-statement"]
  673 -> 77 [style=dashed label="decltype-specifier"]
  673 -> 79 [style=dashed label="defining-type-specifier"]
  673 -> 416 [style=dashed label="delete-expression"]
  673 -> 417 [style=dashed label="digit"]
  673 -> 418 [style=dashed label="digit-sequence"]
  673 -> 80 [style=dashed label="elaborated-enum-specifier"]
  673 -> 81 [style=dashed label="elaborated-type-specifier"]
  673 -> 419 [style=dashed label="encoding-prefix"]
  673 -> 83 [style=dashed label="enum-head"]
  673 -> 84 [style=dashed label="enum-key"]
  673 -> 85 [style=dashed label="enum-name"]
  673 -> 86 [style=dashed label="enum-specifier"]
  673 -> 420 [style=dashed label="equality-expression"]
  673 -> 421 [style=dashed label="exclusive-or-expression"]
  673 -> 269 [style=dashed label="explicit-specifier"]
  673 -> 689 [style=dashed label="expression"]
  673 -> 690 [style=dashed label="expression-statement"]
  673 -> 422 [style=dashed label="floating-point-literal"]
  673 -> 423 [style=dashed label="fold-expression"]
  673 -> 424 [style=dashed label="fractional-constant"]
  673 -> 92 [style=dashed label="function-specifier"]
  673 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  673 -> 426 [style=dashed label="hexadecimal-literal"]
  673 -> 427 [style=dashed label="hexadecimal-prefix"]
  673 -> 428 [style=dashed label="id-expression"]
  673 -> 429 [style=dashed label="inclusive-or-expression"]
  673 -> 430 [style=dashed label="integer-literal"]
  673 -> 691 [style=dashed label="iteration-statement"]
  673 -> 692 [style=dashed label="jump-statement"]
  673 -> 693 [style=dashed label="labeled-statement"]
  673 -> 431 [style=dashed label="lambda-expression"]
  673 -> 432 [style=dashed label="lambda-introducer"]
  673 -> 433 [style=dashed label="literal"]
  673 -> 96 [style=dashed label="literal-operator-id"]
  673 -> 434 [style=dashed label="logical-and-expression"]
  673 -> 533 [style=dashed label="logical-or-expression"]
  673 -> 436 [style=dashed label="multiplicative-expression"]
  673 -> 100 [style=dashed label="namespace-alias"]
  673 -> 101 [style=dashed label="namespace-alias-definition"]
  673 -> 103 [style=dashed label="namespace-name"]
  673 -> 437 [style=dashed label="nested-name-specifier"]
  673 -> 438 [style=dashed label="new-expression"]
  673 -> 439 [style=dashed label="noexcept-expression"]
  673 -> 440 [style=dashed label="nonzero-digit"]
  673 -> 441 [style=dashed label="octal-literal"]
  673 -> 108 [style=dashed label="opaque-enum-declaration"]
  673 -> 109 [style=dashed label="operator-function-id"]
  673 -> 110 [style=dashed label="placeholder-type-specifier"]
  673 -> 442 [style=dashed label="pm-expression"]
  673 -> 443 [style=dashed label="pointer-literal"]
  673 -> 444 [style=dashed label="postfix-expression"]
  673 -> 445 [style=dashed label="primary-expression"]
  673 -> 113 [style=dashed label="qualified-id"]
  673 -> 446 [style=dashed label="relational-expression"]
  673 -> 447 [style=dashed label="requires-expression"]
  673 -> 694 [style=dashed label="selection-statement"]
  673 -> 448 [style=dashed label="shift-expression"]
  673 -> 114 [style=dashed label="simple-declaration"]
  673 -> 115 [style=dashed label="simple-template-id"]
  673 -> 449 [style=dashed label="simple-type-specifier"]
  673 -> 1173 [style=dashed label="statement"]
  673 -> 117 [style=dashed label="static_assert-declaration"]
  673 -> 118 [style=dashed label="storage-class-specifier"]
  673 -> 450 [style=dashed label="string-literal"]
  673 -> 121 [style=dashed label="template-id"]
  673 -> 216 [style=dashed label="template-name"]
  673 -> 535 [style=dashed label="throw-expression"]
  673 -> 697 [style=dashed label="try-block"]
  673 -> 124 [style=dashed label="type-constraint"]
  673 -> 125 [style=dashed label="type-name"]
  673 -> 126 [style=dashed label="type-specifier"]
  673 -> 127 [style=dashed label="typedef-name"]
  673 -> 453 [style=dashed label="typename-specifier"]
  673 -> 454 [style=dashed label="unary-expression"]
  673 -> 455 [style=dashed label="unary-operator"]
  673 -> 130 [style=dashed label="unqualified-id"]
  673 -> 456 [style=dashed label="user-defined-character-literal"]
  673 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  673 -> 458 [style=dashed label="user-defined-integer-literal"]
  673 -> 459 [style=dashed label="user-defined-literal"]
  673 -> 460 [style=dashed label="user-defined-string-literal"]
  673 -> 131 [style=dashed label="using-declaration"]
  673 -> 132 [style=dashed label="using-directive"]
  673 -> 133 [style=dashed label="using-enum-declaration"]
  673 -> 537 [style=dashed label="yield-expression"]
  674 [label="State 674\n\l511 iteration-statement: \"for\" • '(' init-statement ';' ')' statement\l512                    | \"for\" • '(' init-statement condition ';' ')' statement\l513                    | \"for\" • '(' init-statement ';' expression ')' statement\l514                    | \"for\" • '(' init-statement condition ';' expression ')' statement\l515                    | \"for\" • '(' for-range-declaration ':' for-range-initializer ')' statement\l516                    | \"for\" • '(' init-statement for-range-declaration ':' for-range-initializer ')' statement\l"]
  674 -> 1174 [style=solid label="'('"]
  675 [label="State 675\n\l517 jump-statement: \"break\" • ';'\l"]
  675 -> 1175 [style=solid label="';'"]
  676 [label="State 676\n\l518 jump-statement: \"continue\" • ';'\l"]
  676 -> 1176 [style=solid label="';'"]
  677 [label="State 677\n\l519 jump-statement: \"return\" • ';'\l520               | \"return\" • expr-or-braced-init-list ';'\l"]
  677 -> 1 [style=solid label="IDENTIFIER"]
  677 -> 361 [style=solid label="'+'"]
  677 -> 362 [style=solid label="'-'"]
  677 -> 1177 [style=solid label="';'"]
  677 -> 363 [style=solid label="'('"]
  677 -> 364 [style=solid label="'&'"]
  677 -> 365 [style=solid label="\"::\""]
  677 -> 366 [style=solid label="'['"]
  677 -> 367 [style=solid label="\"co_await\""]
  677 -> 939 [style=solid label="'{'"]
  677 -> 368 [style=solid label="'0'"]
  677 -> 369 [style=solid label="'1'"]
  677 -> 370 [style=solid label="\"0b\""]
  677 -> 371 [style=solid label="\"0B\""]
  677 -> 372 [style=solid label="'\\''"]
  677 -> 373 [style=solid label="\"false\""]
  677 -> 374 [style=solid label="\"true\""]
  677 -> 375 [style=solid label="\"noexcept\""]
  677 -> 17 [style=solid label="\"operator\""]
  677 -> 26 [style=solid label="\"decltype\""]
  677 -> 376 [style=solid label="\"delete\""]
  677 -> 377 [style=solid label="'.'"]
  677 -> 378 [style=solid label="'2'"]
  677 -> 379 [style=solid label="'3'"]
  677 -> 380 [style=solid label="'4'"]
  677 -> 381 [style=solid label="'5'"]
  677 -> 382 [style=solid label="'6'"]
  677 -> 383 [style=solid label="'7'"]
  677 -> 384 [style=solid label="'8'"]
  677 -> 385 [style=solid label="'9'"]
  677 -> 185 [style=solid label="\"u8\""]
  677 -> 186 [style=solid label="'u'"]
  677 -> 187 [style=solid label="'U'"]
  677 -> 188 [style=solid label="'L'"]
  677 -> 386 [style=solid label="'*'"]
  677 -> 203 [style=solid label="'\"'"]
  677 -> 387 [style=solid label="\"0x\""]
  677 -> 388 [style=solid label="\"0X\""]
  677 -> 389 [style=solid label="\"requires\""]
  677 -> 390 [style=solid label="\"new\""]
  677 -> 391 [style=solid label="'~'"]
  677 -> 392 [style=solid label="'!'"]
  677 -> 393 [style=solid label="\"++\""]
  677 -> 394 [style=solid label="\"--\""]
  677 -> 395 [style=solid label="\"this\""]
  677 -> 37 [style=solid label="\"auto\""]
  677 -> 396 [style=solid label="\"nullptr\""]
  677 -> 397 [style=solid label="\"dynamic_cast\""]
  677 -> 398 [style=solid label="\"static_cast\""]
  677 -> 399 [style=solid label="\"reinterpret_cast\""]
  677 -> 400 [style=solid label="\"const_cast\""]
  677 -> 401 [style=solid label="\"typeid\""]
  677 -> 38 [style=solid label="\"char\""]
  677 -> 39 [style=solid label="\"char8_t\""]
  677 -> 40 [style=solid label="\"char16_t\""]
  677 -> 41 [style=solid label="\"char32_t\""]
  677 -> 42 [style=solid label="\"wchar_t\""]
  677 -> 43 [style=solid label="\"bool\""]
  677 -> 44 [style=solid label="\"short\""]
  677 -> 45 [style=solid label="\"int\""]
  677 -> 46 [style=solid label="\"long\""]
  677 -> 47 [style=solid label="\"signed\""]
  677 -> 48 [style=solid label="\"unsigned\""]
  677 -> 49 [style=solid label="\"float\""]
  677 -> 50 [style=solid label="\"double\""]
  677 -> 51 [style=solid label="\"void\""]
  677 -> 209 [style=solid label="'R'"]
  677 -> 528 [style=solid label="\"throw\""]
  677 -> 56 [style=solid label="\"typename\""]
  677 -> 402 [style=solid label="\"sizeof\""]
  677 -> 403 [style=solid label="\"alignof\""]
  677 -> 529 [style=solid label="\"co_yield\""]
  677 -> 404 [style=dashed label="additive-expression"]
  677 -> 405 [style=dashed label="and-expression"]
  677 -> 530 [style=dashed label="assignment-expression"]
  677 -> 406 [style=dashed label="await-expression"]
  677 -> 407 [style=dashed label="binary-literal"]
  677 -> 408 [style=dashed label="boolean-literal"]
  677 -> 1167 [style=dashed label="braced-init-list"]
  677 -> 409 [style=dashed label="cast-expression"]
  677 -> 410 [style=dashed label="character-literal"]
  677 -> 66 [style=dashed label="class-name"]
  677 -> 411 [style=dashed label="compare-expression"]
  677 -> 68 [style=dashed label="concept-name"]
  677 -> 531 [style=dashed label="conditional-expression"]
  677 -> 69 [style=dashed label="conversion-function-id"]
  677 -> 414 [style=dashed label="decimal-floating-point-literal"]
  677 -> 415 [style=dashed label="decimal-literal"]
  677 -> 77 [style=dashed label="decltype-specifier"]
  677 -> 416 [style=dashed label="delete-expression"]
  677 -> 417 [style=dashed label="digit"]
  677 -> 418 [style=dashed label="digit-sequence"]
  677 -> 419 [style=dashed label="encoding-prefix"]
  677 -> 85 [style=dashed label="enum-name"]
  677 -> 420 [style=dashed label="equality-expression"]
  677 -> 421 [style=dashed label="exclusive-or-expression"]
  677 -> 1178 [style=dashed label="expr-or-braced-init-list"]
  677 -> 1169 [style=dashed label="expression"]
  677 -> 422 [style=dashed label="floating-point-literal"]
  677 -> 423 [style=dashed label="fold-expression"]
  677 -> 424 [style=dashed label="fractional-constant"]
  677 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  677 -> 426 [style=dashed label="hexadecimal-literal"]
  677 -> 427 [style=dashed label="hexadecimal-prefix"]
  677 -> 428 [style=dashed label="id-expression"]
  677 -> 429 [style=dashed label="inclusive-or-expression"]
  677 -> 430 [style=dashed label="integer-literal"]
  677 -> 431 [style=dashed label="lambda-expression"]
  677 -> 432 [style=dashed label="lambda-introducer"]
  677 -> 433 [style=dashed label="literal"]
  677 -> 96 [style=dashed label="literal-operator-id"]
  677 -> 434 [style=dashed label="logical-and-expression"]
  677 -> 533 [style=dashed label="logical-or-expression"]
  677 -> 436 [style=dashed label="multiplicative-expression"]
  677 -> 100 [style=dashed label="namespace-alias"]
  677 -> 103 [style=dashed label="namespace-name"]
  677 -> 437 [style=dashed label="nested-name-specifier"]
  677 -> 438 [style=dashed label="new-expression"]
  677 -> 439 [style=dashed label="noexcept-expression"]
  677 -> 440 [style=dashed label="nonzero-digit"]
  677 -> 441 [style=dashed label="octal-literal"]
  677 -> 109 [style=dashed label="operator-function-id"]
  677 -> 110 [style=dashed label="placeholder-type-specifier"]
  677 -> 442 [style=dashed label="pm-expression"]
  677 -> 443 [style=dashed label="pointer-literal"]
  677 -> 444 [style=dashed label="postfix-expression"]
  677 -> 445 [style=dashed label="primary-expression"]
  677 -> 113 [style=dashed label="qualified-id"]
  677 -> 446 [style=dashed label="relational-expression"]
  677 -> 447 [style=dashed label="requires-expression"]
  677 -> 448 [style=dashed label="shift-expression"]
  677 -> 115 [style=dashed label="simple-template-id"]
  677 -> 534 [style=dashed label="simple-type-specifier"]
  677 -> 450 [style=dashed label="string-literal"]
  677 -> 121 [style=dashed label="template-id"]
  677 -> 216 [style=dashed label="template-name"]
  677 -> 535 [style=dashed label="throw-expression"]
  677 -> 124 [style=dashed label="type-constraint"]
  677 -> 125 [style=dashed label="type-name"]
  677 -> 127 [style=dashed label="typedef-name"]
  677 -> 536 [style=dashed label="typename-specifier"]
  677 -> 454 [style=dashed label="unary-expression"]
  677 -> 455 [style=dashed label="unary-operator"]
  677 -> 130 [style=dashed label="unqualified-id"]
  677 -> 456 [style=dashed label="user-defined-character-literal"]
  677 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  677 -> 458 [style=dashed label="user-defined-integer-literal"]
  677 -> 459 [style=dashed label="user-defined-literal"]
  677 -> 460 [style=dashed label="user-defined-string-literal"]
  677 -> 537 [style=dashed label="yield-expression"]
  678 [label="State 678\n\l522 jump-statement: \"goto\" • IDENTIFIER ';'\l"]
  678 -> 1179 [style=solid label="IDENTIFIER"]
  679 [label="State 679\n\l526 labeled-statement: \"case\" • constant-expression ':' statement\l"]
  679 -> 1 [style=solid label="IDENTIFIER"]
  679 -> 361 [style=solid label="'+'"]
  679 -> 362 [style=solid label="'-'"]
  679 -> 363 [style=solid label="'('"]
  679 -> 364 [style=solid label="'&'"]
  679 -> 365 [style=solid label="\"::\""]
  679 -> 366 [style=solid label="'['"]
  679 -> 367 [style=solid label="\"co_await\""]
  679 -> 368 [style=solid label="'0'"]
  679 -> 369 [style=solid label="'1'"]
  679 -> 370 [style=solid label="\"0b\""]
  679 -> 371 [style=solid label="\"0B\""]
  679 -> 372 [style=solid label="'\\''"]
  679 -> 373 [style=solid label="\"false\""]
  679 -> 374 [style=solid label="\"true\""]
  679 -> 375 [style=solid label="\"noexcept\""]
  679 -> 17 [style=solid label="\"operator\""]
  679 -> 26 [style=solid label="\"decltype\""]
  679 -> 376 [style=solid label="\"delete\""]
  679 -> 377 [style=solid label="'.'"]
  679 -> 378 [style=solid label="'2'"]
  679 -> 379 [style=solid label="'3'"]
  679 -> 380 [style=solid label="'4'"]
  679 -> 381 [style=solid label="'5'"]
  679 -> 382 [style=solid label="'6'"]
  679 -> 383 [style=solid label="'7'"]
  679 -> 384 [style=solid label="'8'"]
  679 -> 385 [style=solid label="'9'"]
  679 -> 185 [style=solid label="\"u8\""]
  679 -> 186 [style=solid label="'u'"]
  679 -> 187 [style=solid label="'U'"]
  679 -> 188 [style=solid label="'L'"]
  679 -> 386 [style=solid label="'*'"]
  679 -> 203 [style=solid label="'\"'"]
  679 -> 387 [style=solid label="\"0x\""]
  679 -> 388 [style=solid label="\"0X\""]
  679 -> 389 [style=solid label="\"requires\""]
  679 -> 390 [style=solid label="\"new\""]
  679 -> 391 [style=solid label="'~'"]
  679 -> 392 [style=solid label="'!'"]
  679 -> 393 [style=solid label="\"++\""]
  679 -> 394 [style=solid label="\"--\""]
  679 -> 395 [style=solid label="\"this\""]
  679 -> 37 [style=solid label="\"auto\""]
  679 -> 396 [style=solid label="\"nullptr\""]
  679 -> 397 [style=solid label="\"dynamic_cast\""]
  679 -> 398 [style=solid label="\"static_cast\""]
  679 -> 399 [style=solid label="\"reinterpret_cast\""]
  679 -> 400 [style=solid label="\"const_cast\""]
  679 -> 401 [style=solid label="\"typeid\""]
  679 -> 38 [style=solid label="\"char\""]
  679 -> 39 [style=solid label="\"char8_t\""]
  679 -> 40 [style=solid label="\"char16_t\""]
  679 -> 41 [style=solid label="\"char32_t\""]
  679 -> 42 [style=solid label="\"wchar_t\""]
  679 -> 43 [style=solid label="\"bool\""]
  679 -> 44 [style=solid label="\"short\""]
  679 -> 45 [style=solid label="\"int\""]
  679 -> 46 [style=solid label="\"long\""]
  679 -> 47 [style=solid label="\"signed\""]
  679 -> 48 [style=solid label="\"unsigned\""]
  679 -> 49 [style=solid label="\"float\""]
  679 -> 50 [style=solid label="\"double\""]
  679 -> 51 [style=solid label="\"void\""]
  679 -> 209 [style=solid label="'R'"]
  679 -> 56 [style=solid label="\"typename\""]
  679 -> 402 [style=solid label="\"sizeof\""]
  679 -> 403 [style=solid label="\"alignof\""]
  679 -> 404 [style=dashed label="additive-expression"]
  679 -> 405 [style=dashed label="and-expression"]
  679 -> 406 [style=dashed label="await-expression"]
  679 -> 407 [style=dashed label="binary-literal"]
  679 -> 408 [style=dashed label="boolean-literal"]
  679 -> 409 [style=dashed label="cast-expression"]
  679 -> 410 [style=dashed label="character-literal"]
  679 -> 66 [style=dashed label="class-name"]
  679 -> 411 [style=dashed label="compare-expression"]
  679 -> 68 [style=dashed label="concept-name"]
  679 -> 412 [style=dashed label="conditional-expression"]
  679 -> 1180 [style=dashed label="constant-expression"]
  679 -> 69 [style=dashed label="conversion-function-id"]
  679 -> 414 [style=dashed label="decimal-floating-point-literal"]
  679 -> 415 [style=dashed label="decimal-literal"]
  679 -> 77 [style=dashed label="decltype-specifier"]
  679 -> 416 [style=dashed label="delete-expression"]
  679 -> 417 [style=dashed label="digit"]
  679 -> 418 [style=dashed label="digit-sequence"]
  679 -> 419 [style=dashed label="encoding-prefix"]
  679 -> 85 [style=dashed label="enum-name"]
  679 -> 420 [style=dashed label="equality-expression"]
  679 -> 421 [style=dashed label="exclusive-or-expression"]
  679 -> 422 [style=dashed label="floating-point-literal"]
  679 -> 423 [style=dashed label="fold-expression"]
  679 -> 424 [style=dashed label="fractional-constant"]
  679 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  679 -> 426 [style=dashed label="hexadecimal-literal"]
  679 -> 427 [style=dashed label="hexadecimal-prefix"]
  679 -> 428 [style=dashed label="id-expression"]
  679 -> 429 [style=dashed label="inclusive-or-expression"]
  679 -> 430 [style=dashed label="integer-literal"]
  679 -> 431 [style=dashed label="lambda-expression"]
  679 -> 432 [style=dashed label="lambda-introducer"]
  679 -> 433 [style=dashed label="literal"]
  679 -> 96 [style=dashed label="literal-operator-id"]
  679 -> 434 [style=dashed label="logical-and-expression"]
  679 -> 435 [style=dashed label="logical-or-expression"]
  679 -> 436 [style=dashed label="multiplicative-expression"]
  679 -> 100 [style=dashed label="namespace-alias"]
  679 -> 103 [style=dashed label="namespace-name"]
  679 -> 437 [style=dashed label="nested-name-specifier"]
  679 -> 438 [style=dashed label="new-expression"]
  679 -> 439 [style=dashed label="noexcept-expression"]
  679 -> 440 [style=dashed label="nonzero-digit"]
  679 -> 441 [style=dashed label="octal-literal"]
  679 -> 109 [style=dashed label="operator-function-id"]
  679 -> 110 [style=dashed label="placeholder-type-specifier"]
  679 -> 442 [style=dashed label="pm-expression"]
  679 -> 443 [style=dashed label="pointer-literal"]
  679 -> 444 [style=dashed label="postfix-expression"]
  679 -> 445 [style=dashed label="primary-expression"]
  679 -> 113 [style=dashed label="qualified-id"]
  679 -> 446 [style=dashed label="relational-expression"]
  679 -> 447 [style=dashed label="requires-expression"]
  679 -> 448 [style=dashed label="shift-expression"]
  679 -> 115 [style=dashed label="simple-template-id"]
  679 -> 534 [style=dashed label="simple-type-specifier"]
  679 -> 450 [style=dashed label="string-literal"]
  679 -> 121 [style=dashed label="template-id"]
  679 -> 216 [style=dashed label="template-name"]
  679 -> 124 [style=dashed label="type-constraint"]
  679 -> 125 [style=dashed label="type-name"]
  679 -> 127 [style=dashed label="typedef-name"]
  679 -> 536 [style=dashed label="typename-specifier"]
  679 -> 454 [style=dashed label="unary-expression"]
  679 -> 455 [style=dashed label="unary-operator"]
  679 -> 130 [style=dashed label="unqualified-id"]
  679 -> 456 [style=dashed label="user-defined-character-literal"]
  679 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  679 -> 458 [style=dashed label="user-defined-integer-literal"]
  679 -> 459 [style=dashed label="user-defined-literal"]
  679 -> 460 [style=dashed label="user-defined-string-literal"]
  680 [label="State 680\n\l652 namespace-alias-definition: \"namespace\" • IDENTIFIER '=' qualified-namespace-specifier ';'\l"]
  680 -> 1181 [style=solid label="IDENTIFIER"]
  681 [label="State 681\n\l952 selection-statement: \"if\" • '(' condition ')' statement\l953                    | \"if\" • \"constexpr\" '(' condition ')' statement\l954                    | \"if\" • '(' init-statement condition ')' statement\l955                    | \"if\" • \"constexpr\" '(' init-statement condition ')' statement\l956                    | \"if\" • '(' condition ')' statement \"else\" statement\l957                    | \"if\" • \"constexpr\" '(' condition ')' statement \"else\" statement\l958                    | \"if\" • '(' init-statement condition ')' statement \"else\" statement\l959                    | \"if\" • \"constexpr\" '(' init-statement condition ')' statement \"else\" statement\l960                    | \"if\" • \"consteval\" compound-statement\l961                    | \"if\" • '!' \"consteval\" compound-statement\l962                    | \"if\" • \"consteval\" compound-statement \"else\" statement\l963                    | \"if\" • '!' \"consteval\" compound-statement \"else\" statement\l"]
  681 -> 1182 [style=solid label="'('"]
  681 -> 1183 [style=solid label="\"constexpr\""]
  681 -> 1184 [style=solid label="\"consteval\""]
  681 -> 1185 [style=solid label="'!'"]
  682 [label="State 682\n\l964 selection-statement: \"switch\" • '(' condition ')' statement\l965                    | \"switch\" • '(' init-statement condition ')' statement\l"]
  682 -> 1186 [style=solid label="'('"]
  683 [label="State 683\n\l 21 asm-declaration: attribute-specifier-seq • \"asm\" '(' string-literal ')' ';'\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l523 labeled-statement: attribute-specifier-seq • IDENTIFIER ':' statement\l525                  | attribute-specifier-seq • \"case\" constant-expression ':' statement\l527                  | attribute-specifier-seq • \"default\" ':' statement\l979 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list ';'\l980                   | attribute-specifier-seq • decl-specifier-seq '[' identifier-list ']' initializer ';'\l982                   | attribute-specifier-seq • decl-specifier-seq ref-qualifier '[' identifier-list ']' initializer ';'\l1023 statement: attribute-specifier-seq • expression-statement\l1025          | attribute-specifier-seq • compound-statement\l1027          | attribute-specifier-seq • selection-statement\l1029          | attribute-specifier-seq • iteration-statement\l1031          | attribute-specifier-seq • jump-statement\l1034          | attribute-specifier-seq • try-block\l1185 using-directive: attribute-specifier-seq • \"using\" \"namespace\" namespace-name ';'\l1187                | attribute-specifier-seq • \"using\" \"namespace\" nested-name-specifier namespace-name ';'\l"]
  683 -> 1187 [style=solid label="IDENTIFIER"]
  683 -> 361 [style=solid label="'+'"]
  683 -> 362 [style=solid label="'-'"]
  683 -> 260 [style=solid label="\"using\""]
  683 -> 666 [style=solid label="';'"]
  683 -> 4 [style=solid label="\"alignas\""]
  683 -> 363 [style=solid label="'('"]
  683 -> 364 [style=solid label="'&'"]
  683 -> 262 [style=solid label="\"asm\""]
  683 -> 365 [style=solid label="\"::\""]
  683 -> 667 [style=solid label="'['"]
  683 -> 367 [style=solid label="\"co_await\""]
  683 -> 294 [style=solid label="'{'"]
  683 -> 11 [style=solid label="\"virtual\""]
  683 -> 368 [style=solid label="'0'"]
  683 -> 369 [style=solid label="'1'"]
  683 -> 370 [style=solid label="\"0b\""]
  683 -> 371 [style=solid label="\"0B\""]
  683 -> 372 [style=solid label="'\\''"]
  683 -> 373 [style=solid label="\"false\""]
  683 -> 374 [style=solid label="\"true\""]
  683 -> 12 [style=solid label="\"class\""]
  683 -> 13 [style=solid label="\"struct\""]
  683 -> 14 [style=solid label="\"union\""]
  683 -> 375 [style=solid label="\"noexcept\""]
  683 -> 17 [style=solid label="\"operator\""]
  683 -> 669 [style=solid label="\"co_return\""]
  683 -> 18 [style=solid label="\"const\""]
  683 -> 19 [style=solid label="\"volatile\""]
  683 -> 20 [style=solid label="\"friend\""]
  683 -> 21 [style=solid label="\"typedef\""]
  683 -> 22 [style=solid label="\"constexpr\""]
  683 -> 23 [style=solid label="\"consteval\""]
  683 -> 24 [style=solid label="\"constinit\""]
  683 -> 263 [style=solid label="\"inline\""]
  683 -> 26 [style=solid label="\"decltype\""]
  683 -> 376 [style=solid label="\"delete\""]
  683 -> 377 [style=solid label="'.'"]
  683 -> 378 [style=solid label="'2'"]
  683 -> 379 [style=solid label="'3'"]
  683 -> 380 [style=solid label="'4'"]
  683 -> 381 [style=solid label="'5'"]
  683 -> 382 [style=solid label="'6'"]
  683 -> 383 [style=solid label="'7'"]
  683 -> 384 [style=solid label="'8'"]
  683 -> 385 [style=solid label="'9'"]
  683 -> 27 [style=solid label="\"enum\""]
  683 -> 185 [style=solid label="\"u8\""]
  683 -> 186 [style=solid label="'u'"]
  683 -> 187 [style=solid label="'U'"]
  683 -> 188 [style=solid label="'L'"]
  683 -> 264 [style=solid label="\"extern\""]
  683 -> 29 [style=solid label="\"explicit\""]
  683 -> 386 [style=solid label="'*'"]
  683 -> 1188 [style=solid label="\"default\""]
  683 -> 671 [style=solid label="\"try\""]
  683 -> 203 [style=solid label="'\"'"]
  683 -> 387 [style=solid label="\"0x\""]
  683 -> 388 [style=solid label="\"0X\""]
  683 -> 672 [style=solid label="\"while\""]
  683 -> 673 [style=solid label="\"do\""]
  683 -> 674 [style=solid label="\"for\""]
  683 -> 675 [style=solid label="\"break\""]
  683 -> 676 [style=solid label="\"continue\""]
  683 -> 677 [style=solid label="\"return\""]
  683 -> 678 [style=solid label="\"goto\""]
  683 -> 1189 [style=solid label="\"case\""]
  683 -> 389 [style=solid label="\"requires\""]
  683 -> 390 [style=solid label="\"new\""]
  683 -> 391 [style=solid label="'~'"]
  683 -> 392 [style=solid label="'!'"]
  683 -> 393 [style=solid label="\"++\""]
  683 -> 394 [style=solid label="\"--\""]
  683 -> 395 [style=solid label="\"this\""]
  683 -> 37 [style=solid label="\"auto\""]
  683 -> 396 [style=solid label="\"nullptr\""]
  683 -> 397 [style=solid label="\"dynamic_cast\""]
  683 -> 398 [style=solid label="\"static_cast\""]
  683 -> 399 [style=solid label="\"reinterpret_cast\""]
  683 -> 400 [style=solid label="\"const_cast\""]
  683 -> 401 [style=solid label="\"typeid\""]
  683 -> 681 [style=solid label="\"if\""]
  683 -> 682 [style=solid label="\"switch\""]
  683 -> 38 [style=solid label="\"char\""]
  683 -> 39 [style=solid label="\"char8_t\""]
  683 -> 40 [style=solid label="\"char16_t\""]
  683 -> 41 [style=solid label="\"char32_t\""]
  683 -> 42 [style=solid label="\"wchar_t\""]
  683 -> 43 [style=solid label="\"bool\""]
  683 -> 44 [style=solid label="\"short\""]
  683 -> 45 [style=solid label="\"int\""]
  683 -> 46 [style=solid label="\"long\""]
  683 -> 47 [style=solid label="\"signed\""]
  683 -> 48 [style=solid label="\"unsigned\""]
  683 -> 49 [style=solid label="\"float\""]
  683 -> 50 [style=solid label="\"double\""]
  683 -> 51 [style=solid label="\"void\""]
  683 -> 53 [style=solid label="\"static\""]
  683 -> 54 [style=solid label="\"thread_local\""]
  683 -> 55 [style=solid label="\"mutable\""]
  683 -> 209 [style=solid label="'R'"]
  683 -> 528 [style=solid label="\"throw\""]
  683 -> 56 [style=solid label="\"typename\""]
  683 -> 402 [style=solid label="\"sizeof\""]
  683 -> 403 [style=solid label="\"alignof\""]
  683 -> 529 [style=solid label="\"co_yield\""]
  683 -> 404 [style=dashed label="additive-expression"]
  683 -> 58 [style=dashed label="alignment-specifier"]
  683 -> 405 [style=dashed label="and-expression"]
  683 -> 530 [style=dashed label="assignment-expression"]
  683 -> 265 [style=dashed label="attribute-specifier"]
  683 -> 406 [style=dashed label="await-expression"]
  683 -> 407 [style=dashed label="binary-literal"]
  683 -> 408 [style=dashed label="boolean-literal"]
  683 -> 409 [style=dashed label="cast-expression"]
  683 -> 410 [style=dashed label="character-literal"]
  683 -> 64 [style=dashed label="class-head"]
  683 -> 65 [style=dashed label="class-key"]
  683 -> 66 [style=dashed label="class-name"]
  683 -> 67 [style=dashed label="class-specifier"]
  683 -> 411 [style=dashed label="compare-expression"]
  683 -> 1190 [style=dashed label="compound-statement"]
  683 -> 68 [style=dashed label="concept-name"]
  683 -> 531 [style=dashed label="conditional-expression"]
  683 -> 69 [style=dashed label="conversion-function-id"]
  683 -> 686 [style=dashed label="coroutine-return-statement"]
  683 -> 70 [style=dashed label="cv-qualifier"]
  683 -> 414 [style=dashed label="decimal-floating-point-literal"]
  683 -> 415 [style=dashed label="decimal-literal"]
  683 -> 71 [style=dashed label="decl-specifier"]
  683 -> 1191 [style=dashed label="decl-specifier-seq"]
  683 -> 77 [style=dashed label="decltype-specifier"]
  683 -> 79 [style=dashed label="defining-type-specifier"]
  683 -> 416 [style=dashed label="delete-expression"]
  683 -> 417 [style=dashed label="digit"]
  683 -> 418 [style=dashed label="digit-sequence"]
  683 -> 80 [style=dashed label="elaborated-enum-specifier"]
  683 -> 81 [style=dashed label="elaborated-type-specifier"]
  683 -> 419 [style=dashed label="encoding-prefix"]
  683 -> 83 [style=dashed label="enum-head"]
  683 -> 268 [style=dashed label="enum-key"]
  683 -> 85 [style=dashed label="enum-name"]
  683 -> 86 [style=dashed label="enum-specifier"]
  683 -> 420 [style=dashed label="equality-expression"]
  683 -> 421 [style=dashed label="exclusive-or-expression"]
  683 -> 269 [style=dashed label="explicit-specifier"]
  683 -> 689 [style=dashed label="expression"]
  683 -> 1192 [style=dashed label="expression-statement"]
  683 -> 422 [style=dashed label="floating-point-literal"]
  683 -> 423 [style=dashed label="fold-expression"]
  683 -> 424 [style=dashed label="fractional-constant"]
  683 -> 92 [style=dashed label="function-specifier"]
  683 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  683 -> 426 [style=dashed label="hexadecimal-literal"]
  683 -> 427 [style=dashed label="hexadecimal-prefix"]
  683 -> 428 [style=dashed label="id-expression"]
  683 -> 429 [style=dashed label="inclusive-or-expression"]
  683 -> 430 [style=dashed label="integer-literal"]
  683 -> 1193 [style=dashed label="iteration-statement"]
  683 -> 1194 [style=dashed label="jump-statement"]
  683 -> 431 [style=dashed label="lambda-expression"]
  683 -> 432 [style=dashed label="lambda-introducer"]
  683 -> 433 [style=dashed label="literal"]
  683 -> 96 [style=dashed label="literal-operator-id"]
  683 -> 434 [style=dashed label="logical-and-expression"]
  683 -> 533 [style=dashed label="logical-or-expression"]
  683 -> 436 [style=dashed label="multiplicative-expression"]
  683 -> 100 [style=dashed label="namespace-alias"]
  683 -> 103 [style=dashed label="namespace-name"]
  683 -> 437 [style=dashed label="nested-name-specifier"]
  683 -> 438 [style=dashed label="new-expression"]
  683 -> 439 [style=dashed label="noexcept-expression"]
  683 -> 440 [style=dashed label="nonzero-digit"]
  683 -> 441 [style=dashed label="octal-literal"]
  683 -> 109 [style=dashed label="operator-function-id"]
  683 -> 110 [style=dashed label="placeholder-type-specifier"]
  683 -> 442 [style=dashed label="pm-expression"]
  683 -> 443 [style=dashed label="pointer-literal"]
  683 -> 444 [style=dashed label="postfix-expression"]
  683 -> 445 [style=dashed label="primary-expression"]
  683 -> 113 [style=dashed label="qualified-id"]
  683 -> 446 [style=dashed label="relational-expression"]
  683 -> 447 [style=dashed label="requires-expression"]
  683 -> 1195 [style=dashed label="selection-statement"]
  683 -> 448 [style=dashed label="shift-expression"]
  683 -> 115 [style=dashed label="simple-template-id"]
  683 -> 449 [style=dashed label="simple-type-specifier"]
  683 -> 118 [style=dashed label="storage-class-specifier"]
  683 -> 450 [style=dashed label="string-literal"]
  683 -> 121 [style=dashed label="template-id"]
  683 -> 216 [style=dashed label="template-name"]
  683 -> 535 [style=dashed label="throw-expression"]
  683 -> 1196 [style=dashed label="try-block"]
  683 -> 124 [style=dashed label="type-constraint"]
  683 -> 125 [style=dashed label="type-name"]
  683 -> 126 [style=dashed label="type-specifier"]
  683 -> 127 [style=dashed label="typedef-name"]
  683 -> 453 [style=dashed label="typename-specifier"]
  683 -> 454 [style=dashed label="unary-expression"]
  683 -> 455 [style=dashed label="unary-operator"]
  683 -> 130 [style=dashed label="unqualified-id"]
  683 -> 456 [style=dashed label="user-defined-character-literal"]
  683 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  683 -> 458 [style=dashed label="user-defined-integer-literal"]
  683 -> 459 [style=dashed label="user-defined-literal"]
  683 -> 460 [style=dashed label="user-defined-string-literal"]
  683 -> 537 [style=dashed label="yield-expression"]
  684 [label="State 684\n\l228 declaration-statement: block-declaration •\l"]
  684 -> "684R228" [style=solid]
 "684R228" [label="R228", fillcolor=3, shape=diamond, style=filled]
  685 [label="State 685\n\l1026 statement: compound-statement •\l"]
  685 -> "685R1026" [style=solid]
 "685R1026" [label="R1026", fillcolor=3, shape=diamond, style=filled]
  686 [label="State 686\n\l521 jump-statement: coroutine-return-statement •\l"]
  686 -> "686R521" [style=solid]
 "686R521" [label="R521", fillcolor=3, shape=diamond, style=filled]
  687 [label="State 687\n\l977 simple-declaration: decl-specifier-seq • ';'\l978                   | decl-specifier-seq • init-declarator-list ';'\l981                   | decl-specifier-seq • '[' identifier-list ']' initializer ';'\l983                   | decl-specifier-seq • ref-qualifier '[' identifier-list ']' initializer ';'\l"]
  687 -> 148 [style=solid label="IDENTIFIER"]
  687 -> 282 [style=solid label="';'"]
  687 -> 5 [style=solid label="'('"]
  687 -> 6 [style=solid label="\"...\""]
  687 -> 283 [style=solid label="'&'"]
  687 -> 9 [style=solid label="\"::\""]
  687 -> 284 [style=solid label="'['"]
  687 -> 285 [style=solid label="\"&&\""]
  687 -> 17 [style=solid label="\"operator\""]
  687 -> 135 [style=solid label="\"decltype\""]
  687 -> 32 [style=solid label="'*'"]
  687 -> 36 [style=solid label="'~'"]
  687 -> 66 [style=dashed label="class-name"]
  687 -> 69 [style=dashed label="conversion-function-id"]
  687 -> 1156 [style=dashed label="declarator"]
  687 -> 76 [style=dashed label="declarator-id"]
  687 -> 139 [style=dashed label="decltype-specifier"]
  687 -> 85 [style=dashed label="enum-name"]
  687 -> 94 [style=dashed label="id-expression"]
  687 -> 287 [style=dashed label="init-declarator"]
  687 -> 288 [style=dashed label="init-declarator-list"]
  687 -> 96 [style=dashed label="literal-operator-id"]
  687 -> 100 [style=dashed label="namespace-alias"]
  687 -> 103 [style=dashed label="namespace-name"]
  687 -> 149 [style=dashed label="nested-name-specifier"]
  687 -> 107 [style=dashed label="noptr-declarator"]
  687 -> 109 [style=dashed label="operator-function-id"]
  687 -> 111 [style=dashed label="ptr-declarator"]
  687 -> 112 [style=dashed label="ptr-operator"]
  687 -> 113 [style=dashed label="qualified-id"]
  687 -> 289 [style=dashed label="ref-qualifier"]
  687 -> 115 [style=dashed label="simple-template-id"]
  687 -> 121 [style=dashed label="template-id"]
  687 -> 143 [style=dashed label="template-name"]
  687 -> 144 [style=dashed label="type-name"]
  687 -> 127 [style=dashed label="typedef-name"]
  687 -> 130 [style=dashed label="unqualified-id"]
  688 [label="State 688\n\l1033 statement: declaration-statement •\l"]
  688 -> "688R1033" [style=solid]
 "688R1033" [label="R1033", fillcolor=3, shape=diamond, style=filled]
  689 [label="State 689\n\l338 expression: expression • ',' assignment-expression\l340 expression-statement: expression • ';'\l"]
  689 -> 1197 [style=solid label="';'"]
  689 -> 1037 [style=solid label="','"]
  690 [label="State 690\n\l1024 statement: expression-statement •\l"]
  690 -> "690R1024" [style=solid]
 "690R1024" [label="R1024", fillcolor=3, shape=diamond, style=filled]
  691 [label="State 691\n\l1030 statement: iteration-statement •\l"]
  691 -> "691R1030" [style=solid]
 "691R1030" [label="R1030", fillcolor=3, shape=diamond, style=filled]
  692 [label="State 692\n\l1032 statement: jump-statement •\l"]
  692 -> "692R1032" [style=solid]
 "692R1032" [label="R1032", fillcolor=3, shape=diamond, style=filled]
  693 [label="State 693\n\l1022 statement: labeled-statement •\l"]
  693 -> "693R1022" [style=solid]
 "693R1022" [label="R1022", fillcolor=3, shape=diamond, style=filled]
  694 [label="State 694\n\l1028 statement: selection-statement •\l"]
  694 -> "694R1028" [style=solid]
 "694R1028" [label="R1028", fillcolor=3, shape=diamond, style=filled]
  695 [label="State 695\n\l1036 statement-seq: statement •\l"]
  695 -> "695R1036" [style=solid]
 "695R1036" [label="R1036", fillcolor=3, shape=diamond, style=filled]
  696 [label="State 696\n\l161 compound-statement: '{' statement-seq • '}'\l1037 statement-seq: statement-seq • statement\l"]
  696 -> 665 [style=solid label="IDENTIFIER"]
  696 -> 361 [style=solid label="'+'"]
  696 -> 362 [style=solid label="'-'"]
  696 -> 2 [style=solid label="\"using\""]
  696 -> 666 [style=solid label="';'"]
  696 -> 4 [style=solid label="\"alignas\""]
  696 -> 363 [style=solid label="'('"]
  696 -> 364 [style=solid label="'&'"]
  696 -> 8 [style=solid label="\"asm\""]
  696 -> 365 [style=solid label="\"::\""]
  696 -> 667 [style=solid label="'['"]
  696 -> 367 [style=solid label="\"co_await\""]
  696 -> 294 [style=solid label="'{'"]
  696 -> 1198 [style=solid label="'}'"]
  696 -> 11 [style=solid label="\"virtual\""]
  696 -> 368 [style=solid label="'0'"]
  696 -> 369 [style=solid label="'1'"]
  696 -> 370 [style=solid label="\"0b\""]
  696 -> 371 [style=solid label="\"0B\""]
  696 -> 372 [style=solid label="'\\''"]
  696 -> 373 [style=solid label="\"false\""]
  696 -> 374 [style=solid label="\"true\""]
  696 -> 12 [style=solid label="\"class\""]
  696 -> 13 [style=solid label="\"struct\""]
  696 -> 14 [style=solid label="\"union\""]
  696 -> 375 [style=solid label="\"noexcept\""]
  696 -> 17 [style=solid label="\"operator\""]
  696 -> 669 [style=solid label="\"co_return\""]
  696 -> 18 [style=solid label="\"const\""]
  696 -> 19 [style=solid label="\"volatile\""]
  696 -> 20 [style=solid label="\"friend\""]
  696 -> 21 [style=solid label="\"typedef\""]
  696 -> 22 [style=solid label="\"constexpr\""]
  696 -> 23 [style=solid label="\"consteval\""]
  696 -> 24 [style=solid label="\"constinit\""]
  696 -> 263 [style=solid label="\"inline\""]
  696 -> 26 [style=solid label="\"decltype\""]
  696 -> 376 [style=solid label="\"delete\""]
  696 -> 377 [style=solid label="'.'"]
  696 -> 378 [style=solid label="'2'"]
  696 -> 379 [style=solid label="'3'"]
  696 -> 380 [style=solid label="'4'"]
  696 -> 381 [style=solid label="'5'"]
  696 -> 382 [style=solid label="'6'"]
  696 -> 383 [style=solid label="'7'"]
  696 -> 384 [style=solid label="'8'"]
  696 -> 385 [style=solid label="'9'"]
  696 -> 27 [style=solid label="\"enum\""]
  696 -> 185 [style=solid label="\"u8\""]
  696 -> 186 [style=solid label="'u'"]
  696 -> 187 [style=solid label="'U'"]
  696 -> 188 [style=solid label="'L'"]
  696 -> 264 [style=solid label="\"extern\""]
  696 -> 29 [style=solid label="\"explicit\""]
  696 -> 386 [style=solid label="'*'"]
  696 -> 670 [style=solid label="\"default\""]
  696 -> 671 [style=solid label="\"try\""]
  696 -> 203 [style=solid label="'\"'"]
  696 -> 387 [style=solid label="\"0x\""]
  696 -> 388 [style=solid label="\"0X\""]
  696 -> 672 [style=solid label="\"while\""]
  696 -> 673 [style=solid label="\"do\""]
  696 -> 674 [style=solid label="\"for\""]
  696 -> 675 [style=solid label="\"break\""]
  696 -> 676 [style=solid label="\"continue\""]
  696 -> 677 [style=solid label="\"return\""]
  696 -> 678 [style=solid label="\"goto\""]
  696 -> 679 [style=solid label="\"case\""]
  696 -> 680 [style=solid label="\"namespace\""]
  696 -> 389 [style=solid label="\"requires\""]
  696 -> 390 [style=solid label="\"new\""]
  696 -> 391 [style=solid label="'~'"]
  696 -> 392 [style=solid label="'!'"]
  696 -> 393 [style=solid label="\"++\""]
  696 -> 394 [style=solid label="\"--\""]
  696 -> 395 [style=solid label="\"this\""]
  696 -> 37 [style=solid label="\"auto\""]
  696 -> 396 [style=solid label="\"nullptr\""]
  696 -> 397 [style=solid label="\"dynamic_cast\""]
  696 -> 398 [style=solid label="\"static_cast\""]
  696 -> 399 [style=solid label="\"reinterpret_cast\""]
  696 -> 400 [style=solid label="\"const_cast\""]
  696 -> 401 [style=solid label="\"typeid\""]
  696 -> 681 [style=solid label="\"if\""]
  696 -> 682 [style=solid label="\"switch\""]
  696 -> 38 [style=solid label="\"char\""]
  696 -> 39 [style=solid label="\"char8_t\""]
  696 -> 40 [style=solid label="\"char16_t\""]
  696 -> 41 [style=solid label="\"char32_t\""]
  696 -> 42 [style=solid label="\"wchar_t\""]
  696 -> 43 [style=solid label="\"bool\""]
  696 -> 44 [style=solid label="\"short\""]
  696 -> 45 [style=solid label="\"int\""]
  696 -> 46 [style=solid label="\"long\""]
  696 -> 47 [style=solid label="\"signed\""]
  696 -> 48 [style=solid label="\"unsigned\""]
  696 -> 49 [style=solid label="\"float\""]
  696 -> 50 [style=solid label="\"double\""]
  696 -> 51 [style=solid label="\"void\""]
  696 -> 52 [style=solid label="\"static_assert\""]
  696 -> 53 [style=solid label="\"static\""]
  696 -> 54 [style=solid label="\"thread_local\""]
  696 -> 55 [style=solid label="\"mutable\""]
  696 -> 209 [style=solid label="'R'"]
  696 -> 528 [style=solid label="\"throw\""]
  696 -> 56 [style=solid label="\"typename\""]
  696 -> 402 [style=solid label="\"sizeof\""]
  696 -> 403 [style=solid label="\"alignof\""]
  696 -> 529 [style=solid label="\"co_yield\""]
  696 -> 404 [style=dashed label="additive-expression"]
  696 -> 57 [style=dashed label="alias-declaration"]
  696 -> 58 [style=dashed label="alignment-specifier"]
  696 -> 405 [style=dashed label="and-expression"]
  696 -> 59 [style=dashed label="asm-declaration"]
  696 -> 530 [style=dashed label="assignment-expression"]
  696 -> 61 [style=dashed label="attribute-specifier"]
  696 -> 683 [style=dashed label="attribute-specifier-seq"]
  696 -> 406 [style=dashed label="await-expression"]
  696 -> 407 [style=dashed label="binary-literal"]
  696 -> 684 [style=dashed label="block-declaration"]
  696 -> 408 [style=dashed label="boolean-literal"]
  696 -> 409 [style=dashed label="cast-expression"]
  696 -> 410 [style=dashed label="character-literal"]
  696 -> 64 [style=dashed label="class-head"]
  696 -> 65 [style=dashed label="class-key"]
  696 -> 66 [style=dashed label="class-name"]
  696 -> 67 [style=dashed label="class-specifier"]
  696 -> 411 [style=dashed label="compare-expression"]
  696 -> 685 [style=dashed label="compound-statement"]
  696 -> 68 [style=dashed label="concept-name"]
  696 -> 531 [style=dashed label="conditional-expression"]
  696 -> 69 [style=dashed label="conversion-function-id"]
  696 -> 686 [style=dashed label="coroutine-return-statement"]
  696 -> 70 [style=dashed label="cv-qualifier"]
  696 -> 414 [style=dashed label="decimal-floating-point-literal"]
  696 -> 415 [style=dashed label="decimal-literal"]
  696 -> 71 [style=dashed label="decl-specifier"]
  696 -> 687 [style=dashed label="decl-specifier-seq"]
  696 -> 688 [style=dashed label="declaration-statement"]
  696 -> 77 [style=dashed label="decltype-specifier"]
  696 -> 79 [style=dashed label="defining-type-specifier"]
  696 -> 416 [style=dashed label="delete-expression"]
  696 -> 417 [style=dashed label="digit"]
  696 -> 418 [style=dashed label="digit-sequence"]
  696 -> 80 [style=dashed label="elaborated-enum-specifier"]
  696 -> 81 [style=dashed label="elaborated-type-specifier"]
  696 -> 419 [style=dashed label="encoding-prefix"]
  696 -> 83 [style=dashed label="enum-head"]
  696 -> 84 [style=dashed label="enum-key"]
  696 -> 85 [style=dashed label="enum-name"]
  696 -> 86 [style=dashed label="enum-specifier"]
  696 -> 420 [style=dashed label="equality-expression"]
  696 -> 421 [style=dashed label="exclusive-or-expression"]
  696 -> 269 [style=dashed label="explicit-specifier"]
  696 -> 689 [style=dashed label="expression"]
  696 -> 690 [style=dashed label="expression-statement"]
  696 -> 422 [style=dashed label="floating-point-literal"]
  696 -> 423 [style=dashed label="fold-expression"]
  696 -> 424 [style=dashed label="fractional-constant"]
  696 -> 92 [style=dashed label="function-specifier"]
  696 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  696 -> 426 [style=dashed label="hexadecimal-literal"]
  696 -> 427 [style=dashed label="hexadecimal-prefix"]
  696 -> 428 [style=dashed label="id-expression"]
  696 -> 429 [style=dashed label="inclusive-or-expression"]
  696 -> 430 [style=dashed label="integer-literal"]
  696 -> 691 [style=dashed label="iteration-statement"]
  696 -> 692 [style=dashed label="jump-statement"]
  696 -> 693 [style=dashed label="labeled-statement"]
  696 -> 431 [style=dashed label="lambda-expression"]
  696 -> 432 [style=dashed label="lambda-introducer"]
  696 -> 433 [style=dashed label="literal"]
  696 -> 96 [style=dashed label="literal-operator-id"]
  696 -> 434 [style=dashed label="logical-and-expression"]
  696 -> 533 [style=dashed label="logical-or-expression"]
  696 -> 436 [style=dashed label="multiplicative-expression"]
  696 -> 100 [style=dashed label="namespace-alias"]
  696 -> 101 [style=dashed label="namespace-alias-definition"]
  696 -> 103 [style=dashed label="namespace-name"]
  696 -> 437 [style=dashed label="nested-name-specifier"]
  696 -> 438 [style=dashed label="new-expression"]
  696 -> 439 [style=dashed label="noexcept-expression"]
  696 -> 440 [style=dashed label="nonzero-digit"]
  696 -> 441 [style=dashed label="octal-literal"]
  696 -> 108 [style=dashed label="opaque-enum-declaration"]
  696 -> 109 [style=dashed label="operator-function-id"]
  696 -> 110 [style=dashed label="placeholder-type-specifier"]
  696 -> 442 [style=dashed label="pm-expression"]
  696 -> 443 [style=dashed label="pointer-literal"]
  696 -> 444 [style=dashed label="postfix-expression"]
  696 -> 445 [style=dashed label="primary-expression"]
  696 -> 113 [style=dashed label="qualified-id"]
  696 -> 446 [style=dashed label="relational-expression"]
  696 -> 447 [style=dashed label="requires-expression"]
  696 -> 694 [style=dashed label="selection-statement"]
  696 -> 448 [style=dashed label="shift-expression"]
  696 -> 114 [style=dashed label="simple-declaration"]
  696 -> 115 [style=dashed label="simple-template-id"]
  696 -> 449 [style=dashed label="simple-type-specifier"]
  696 -> 1199 [style=dashed label="statement"]
  696 -> 117 [style=dashed label="static_assert-declaration"]
  696 -> 118 [style=dashed label="storage-class-specifier"]
  696 -> 450 [style=dashed label="string-literal"]
  696 -> 121 [style=dashed label="template-id"]
  696 -> 216 [style=dashed label="template-name"]
  696 -> 535 [style=dashed label="throw-expression"]
  696 -> 697 [style=dashed label="try-block"]
  696 -> 124 [style=dashed label="type-constraint"]
  696 -> 125 [style=dashed label="type-name"]
  696 -> 126 [style=dashed label="type-specifier"]
  696 -> 127 [style=dashed label="typedef-name"]
  696 -> 453 [style=dashed label="typename-specifier"]
  696 -> 454 [style=dashed label="unary-expression"]
  696 -> 455 [style=dashed label="unary-operator"]
  696 -> 130 [style=dashed label="unqualified-id"]
  696 -> 456 [style=dashed label="user-defined-character-literal"]
  696 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  696 -> 458 [style=dashed label="user-defined-integer-literal"]
  696 -> 459 [style=dashed label="user-defined-literal"]
  696 -> 460 [style=dashed label="user-defined-string-literal"]
  696 -> 131 [style=dashed label="using-declaration"]
  696 -> 132 [style=dashed label="using-directive"]
  696 -> 133 [style=dashed label="using-enum-declaration"]
  696 -> 537 [style=dashed label="yield-expression"]
  697 [label="State 697\n\l1035 statement: try-block •\l"]
  697 -> "697R1035" [style=solid]
 "697R1035" [label="R1035", fillcolor=3, shape=diamond, style=filled]
  698 [label="State 698\n\l412 function-try-block: \"try\" compound-statement • handler-seq\l"]
  698 -> 1200 [style=solid label="\"catch\""]
  698 -> 1201 [style=dashed label="handler"]
  698 -> 1202 [style=dashed label="handler-seq"]
  699 [label="State 699\n\l413 function-try-block: \"try\" ctor-initializer • compound-statement handler-seq\l"]
  699 -> 294 [style=solid label="'{'"]
  699 -> 1203 [style=dashed label="compound-statement"]
  700 [label="State 700\n\l348 fold-expression: '(' • cast-expression fold-operator \"...\" ')'\l349                | '(' • \"...\" fold-operator cast-expression ')'\l350                | '(' • cast-expression fold-operator \"...\" fold-operator cast-expression ')'\l885 primary-expression: '(' • expression ')'\l"]
  700 -> 1 [style=solid label="IDENTIFIER"]
  700 -> 361 [style=solid label="'+'"]
  700 -> 362 [style=solid label="'-'"]
  700 -> 363 [style=solid label="'('"]
  700 -> 760 [style=solid label="\"...\""]
  700 -> 364 [style=solid label="'&'"]
  700 -> 365 [style=solid label="\"::\""]
  700 -> 366 [style=solid label="'['"]
  700 -> 367 [style=solid label="\"co_await\""]
  700 -> 368 [style=solid label="'0'"]
  700 -> 369 [style=solid label="'1'"]
  700 -> 370 [style=solid label="\"0b\""]
  700 -> 371 [style=solid label="\"0B\""]
  700 -> 372 [style=solid label="'\\''"]
  700 -> 373 [style=solid label="\"false\""]
  700 -> 374 [style=solid label="\"true\""]
  700 -> 375 [style=solid label="\"noexcept\""]
  700 -> 17 [style=solid label="\"operator\""]
  700 -> 26 [style=solid label="\"decltype\""]
  700 -> 376 [style=solid label="\"delete\""]
  700 -> 377 [style=solid label="'.'"]
  700 -> 378 [style=solid label="'2'"]
  700 -> 379 [style=solid label="'3'"]
  700 -> 380 [style=solid label="'4'"]
  700 -> 381 [style=solid label="'5'"]
  700 -> 382 [style=solid label="'6'"]
  700 -> 383 [style=solid label="'7'"]
  700 -> 384 [style=solid label="'8'"]
  700 -> 385 [style=solid label="'9'"]
  700 -> 185 [style=solid label="\"u8\""]
  700 -> 186 [style=solid label="'u'"]
  700 -> 187 [style=solid label="'U'"]
  700 -> 188 [style=solid label="'L'"]
  700 -> 386 [style=solid label="'*'"]
  700 -> 203 [style=solid label="'\"'"]
  700 -> 387 [style=solid label="\"0x\""]
  700 -> 388 [style=solid label="\"0X\""]
  700 -> 389 [style=solid label="\"requires\""]
  700 -> 390 [style=solid label="\"new\""]
  700 -> 391 [style=solid label="'~'"]
  700 -> 392 [style=solid label="'!'"]
  700 -> 393 [style=solid label="\"++\""]
  700 -> 394 [style=solid label="\"--\""]
  700 -> 395 [style=solid label="\"this\""]
  700 -> 37 [style=solid label="\"auto\""]
  700 -> 396 [style=solid label="\"nullptr\""]
  700 -> 397 [style=solid label="\"dynamic_cast\""]
  700 -> 398 [style=solid label="\"static_cast\""]
  700 -> 399 [style=solid label="\"reinterpret_cast\""]
  700 -> 400 [style=solid label="\"const_cast\""]
  700 -> 401 [style=solid label="\"typeid\""]
  700 -> 38 [style=solid label="\"char\""]
  700 -> 39 [style=solid label="\"char8_t\""]
  700 -> 40 [style=solid label="\"char16_t\""]
  700 -> 41 [style=solid label="\"char32_t\""]
  700 -> 42 [style=solid label="\"wchar_t\""]
  700 -> 43 [style=solid label="\"bool\""]
  700 -> 44 [style=solid label="\"short\""]
  700 -> 45 [style=solid label="\"int\""]
  700 -> 46 [style=solid label="\"long\""]
  700 -> 47 [style=solid label="\"signed\""]
  700 -> 48 [style=solid label="\"unsigned\""]
  700 -> 49 [style=solid label="\"float\""]
  700 -> 50 [style=solid label="\"double\""]
  700 -> 51 [style=solid label="\"void\""]
  700 -> 209 [style=solid label="'R'"]
  700 -> 528 [style=solid label="\"throw\""]
  700 -> 56 [style=solid label="\"typename\""]
  700 -> 402 [style=solid label="\"sizeof\""]
  700 -> 403 [style=solid label="\"alignof\""]
  700 -> 529 [style=solid label="\"co_yield\""]
  700 -> 404 [style=dashed label="additive-expression"]
  700 -> 405 [style=dashed label="and-expression"]
  700 -> 530 [style=dashed label="assignment-expression"]
  700 -> 406 [style=dashed label="await-expression"]
  700 -> 407 [style=dashed label="binary-literal"]
  700 -> 408 [style=dashed label="boolean-literal"]
  700 -> 761 [style=dashed label="cast-expression"]
  700 -> 410 [style=dashed label="character-literal"]
  700 -> 66 [style=dashed label="class-name"]
  700 -> 411 [style=dashed label="compare-expression"]
  700 -> 68 [style=dashed label="concept-name"]
  700 -> 531 [style=dashed label="conditional-expression"]
  700 -> 69 [style=dashed label="conversion-function-id"]
  700 -> 414 [style=dashed label="decimal-floating-point-literal"]
  700 -> 415 [style=dashed label="decimal-literal"]
  700 -> 77 [style=dashed label="decltype-specifier"]
  700 -> 416 [style=dashed label="delete-expression"]
  700 -> 417 [style=dashed label="digit"]
  700 -> 418 [style=dashed label="digit-sequence"]
  700 -> 419 [style=dashed label="encoding-prefix"]
  700 -> 85 [style=dashed label="enum-name"]
  700 -> 420 [style=dashed label="equality-expression"]
  700 -> 421 [style=dashed label="exclusive-or-expression"]
  700 -> 762 [style=dashed label="expression"]
  700 -> 422 [style=dashed label="floating-point-literal"]
  700 -> 423 [style=dashed label="fold-expression"]
  700 -> 424 [style=dashed label="fractional-constant"]
  700 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  700 -> 426 [style=dashed label="hexadecimal-literal"]
  700 -> 427 [style=dashed label="hexadecimal-prefix"]
  700 -> 428 [style=dashed label="id-expression"]
  700 -> 429 [style=dashed label="inclusive-or-expression"]
  700 -> 430 [style=dashed label="integer-literal"]
  700 -> 431 [style=dashed label="lambda-expression"]
  700 -> 432 [style=dashed label="lambda-introducer"]
  700 -> 433 [style=dashed label="literal"]
  700 -> 96 [style=dashed label="literal-operator-id"]
  700 -> 434 [style=dashed label="logical-and-expression"]
  700 -> 533 [style=dashed label="logical-or-expression"]
  700 -> 436 [style=dashed label="multiplicative-expression"]
  700 -> 100 [style=dashed label="namespace-alias"]
  700 -> 103 [style=dashed label="namespace-name"]
  700 -> 437 [style=dashed label="nested-name-specifier"]
  700 -> 438 [style=dashed label="new-expression"]
  700 -> 439 [style=dashed label="noexcept-expression"]
  700 -> 440 [style=dashed label="nonzero-digit"]
  700 -> 441 [style=dashed label="octal-literal"]
  700 -> 109 [style=dashed label="operator-function-id"]
  700 -> 110 [style=dashed label="placeholder-type-specifier"]
  700 -> 442 [style=dashed label="pm-expression"]
  700 -> 443 [style=dashed label="pointer-literal"]
  700 -> 444 [style=dashed label="postfix-expression"]
  700 -> 445 [style=dashed label="primary-expression"]
  700 -> 113 [style=dashed label="qualified-id"]
  700 -> 446 [style=dashed label="relational-expression"]
  700 -> 447 [style=dashed label="requires-expression"]
  700 -> 448 [style=dashed label="shift-expression"]
  700 -> 115 [style=dashed label="simple-template-id"]
  700 -> 534 [style=dashed label="simple-type-specifier"]
  700 -> 450 [style=dashed label="string-literal"]
  700 -> 121 [style=dashed label="template-id"]
  700 -> 216 [style=dashed label="template-name"]
  700 -> 535 [style=dashed label="throw-expression"]
  700 -> 124 [style=dashed label="type-constraint"]
  700 -> 125 [style=dashed label="type-name"]
  700 -> 127 [style=dashed label="typedef-name"]
  700 -> 536 [style=dashed label="typename-specifier"]
  700 -> 454 [style=dashed label="unary-expression"]
  700 -> 455 [style=dashed label="unary-operator"]
  700 -> 130 [style=dashed label="unqualified-id"]
  700 -> 456 [style=dashed label="user-defined-character-literal"]
  700 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  700 -> 458 [style=dashed label="user-defined-integer-literal"]
  700 -> 459 [style=dashed label="user-defined-literal"]
  700 -> 460 [style=dashed label="user-defined-string-literal"]
  700 -> 537 [style=dashed label="yield-expression"]
  701 [label="State 701\n\l174 constraint-logical-and-expression: constraint-logical-and-expression • \"&&\" primary-expression\l175 constraint-logical-or-expression: constraint-logical-and-expression •\l"]
  701 -> 1204 [style=solid label="\"&&\""]
  701 -> "701R175d" [label="[\"&&\"]", style=solid]
 "701R175d" [label="R175", fillcolor=5, shape=diamond, style=filled]
  701 -> "701R175" [style=solid]
 "701R175" [label="R175", fillcolor=3, shape=diamond, style=filled]
  702 [label="State 702\n\l176 constraint-logical-or-expression: constraint-logical-or-expression • \"||\" constraint-logical-and-expression\l943 requires-clause: \"requires\" constraint-logical-or-expression •\l"]
  702 -> 1205 [style=solid label="\"||\""]
  702 -> "702R943" [style=solid]
 "702R943" [label="R943", fillcolor=3, shape=diamond, style=filled]
  703 [label="State 703\n\l173 constraint-logical-and-expression: primary-expression •\l"]
  703 -> "703R173" [style=solid]
 "703R173" [label="R173", fillcolor=3, shape=diamond, style=filled]
  704 [label="State 704\n\l393 function-body: ctor-initializer compound-statement •\l"]
  704 -> "704R393" [style=solid]
 "704R393" [label="R393", fillcolor=3, shape=diamond, style=filled]
  705 [label="State 705\n\l407 function-definition: declarator requires-clause function-body •\l"]
  705 -> "705R407" [style=solid]
 "705R407" [label="R407", fillcolor=3, shape=diamond, style=filled]
  706 [label="State 706\n\l403 function-definition: declarator virt-specifier-seq function-body •\l"]
  706 -> "706R403" [style=solid]
 "706R403" [label="R403", fillcolor=3, shape=diamond, style=filled]
  707 [label="State 707\n\l1193 virt-specifier-seq: virt-specifier-seq virt-specifier •\l"]
  707 -> "707R1193" [style=solid]
 "707R1193" [label="R1193", fillcolor=3, shape=diamond, style=filled]
  708 [label="State 708\n\l301 enumerator: IDENTIFIER •\l302           | IDENTIFIER • attribute-specifier-seq\l"]
  708 -> 4 [style=solid label="\"alignas\""]
  708 -> 10 [style=solid label="'['"]
  708 -> 58 [style=dashed label="alignment-specifier"]
  708 -> 61 [style=dashed label="attribute-specifier"]
  708 -> 1206 [style=dashed label="attribute-specifier-seq"]
  708 -> "708R301" [style=solid]
 "708R301" [label="R301", fillcolor=3, shape=diamond, style=filled]
  709 [label="State 709\n\l298 enum-specifier: enum-head '{' '}' •\l"]
  709 -> "709R298" [style=solid]
 "709R298" [label="R298", fillcolor=3, shape=diamond, style=filled]
  710 [label="State 710\n\l303 enumerator-definition: enumerator •\l304                      | enumerator • '=' constant-expression\l"]
  710 -> 1207 [style=solid label="'='"]
  710 -> "710R303" [style=solid]
 "710R303" [label="R303", fillcolor=3, shape=diamond, style=filled]
  711 [label="State 711\n\l305 enumerator-list: enumerator-definition •\l"]
  711 -> "711R305" [style=solid]
 "711R305" [label="R305", fillcolor=3, shape=diamond, style=filled]
  712 [label="State 712\n\l299 enum-specifier: enum-head '{' enumerator-list • '}'\l300               | enum-head '{' enumerator-list • ',' '}'\l306 enumerator-list: enumerator-list • ',' enumerator-definition\l"]
  712 -> 1208 [style=solid label="','"]
  712 -> 1209 [style=solid label="'}'"]
  713 [label="State 713\n\l283 enum-base: ':' type-specifier-seq •\l"]
  713 -> "713R283" [style=solid]
 "713R283" [label="R283", fillcolor=3, shape=diamond, style=filled]
  714 [label="State 714\n\l289 enum-head: enum-key attribute-specifier-seq enum-base •\l"]
  714 -> "714R289" [style=solid]
 "714R289" [label="R289", fillcolor=3, shape=diamond, style=filled]
  715 [label="State 715\n\l287 enum-head: enum-key attribute-specifier-seq enum-head-name •\l291          | enum-key attribute-specifier-seq enum-head-name • enum-base\l756 opaque-enum-declaration: enum-key attribute-specifier-seq enum-head-name • ';'\l758                        | enum-key attribute-specifier-seq enum-head-name • enum-base ';'\l"]
  715 -> 1210 [style=solid label="';'"]
  715 -> 310 [style=solid label="':'"]
  715 -> 1211 [style=dashed label="enum-base"]
  715 -> "715R287" [style=solid]
 "715R287" [label="R287", fillcolor=3, shape=diamond, style=filled]
  716 [label="State 716\n\l755 opaque-enum-declaration: enum-key enum-head-name ';' •\l"]
  716 -> "716R755" [style=solid]
 "716R755" [label="R755", fillcolor=3, shape=diamond, style=filled]
  717 [label="State 717\n\l290 enum-head: enum-key enum-head-name enum-base •\l757 opaque-enum-declaration: enum-key enum-head-name enum-base • ';'\l"]
  717 -> 1212 [style=solid label="';'"]
  717 -> "717R290" [style=solid]
 "717R290" [label="R290", fillcolor=3, shape=diamond, style=filled]
  718 [label="State 718\n\l292 enum-head-name: nested-name-specifier IDENTIFIER •\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l"]
  718 -> 726 [style=solid label="\"::\""]
  718 -> "718R292" [style=solid]
 "718R292" [label="R292", fillcolor=3, shape=diamond, style=filled]
  718 -> "718R1066" [label="['<']", style=solid]
 "718R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  719 [label="State 719\n\l234 deduction-guide: explicit-specifier template-name '(' • parameter-declaration-clause ')' \"->\" simple-template-id ';'\l"]
  719 -> 161 [style=solid label="IDENTIFIER"]
  719 -> 4 [style=solid label="\"alignas\""]
  719 -> 734 [style=solid label="\"...\""]
  719 -> 9 [style=solid label="\"::\""]
  719 -> 10 [style=solid label="'['"]
  719 -> 11 [style=solid label="\"virtual\""]
  719 -> 12 [style=solid label="\"class\""]
  719 -> 13 [style=solid label="\"struct\""]
  719 -> 14 [style=solid label="\"union\""]
  719 -> 18 [style=solid label="\"const\""]
  719 -> 19 [style=solid label="\"volatile\""]
  719 -> 20 [style=solid label="\"friend\""]
  719 -> 21 [style=solid label="\"typedef\""]
  719 -> 22 [style=solid label="\"constexpr\""]
  719 -> 23 [style=solid label="\"consteval\""]
  719 -> 24 [style=solid label="\"constinit\""]
  719 -> 263 [style=solid label="\"inline\""]
  719 -> 26 [style=solid label="\"decltype\""]
  719 -> 27 [style=solid label="\"enum\""]
  719 -> 264 [style=solid label="\"extern\""]
  719 -> 29 [style=solid label="\"explicit\""]
  719 -> 476 [style=solid label="\"this\""]
  719 -> 37 [style=solid label="\"auto\""]
  719 -> 38 [style=solid label="\"char\""]
  719 -> 39 [style=solid label="\"char8_t\""]
  719 -> 40 [style=solid label="\"char16_t\""]
  719 -> 41 [style=solid label="\"char32_t\""]
  719 -> 42 [style=solid label="\"wchar_t\""]
  719 -> 43 [style=solid label="\"bool\""]
  719 -> 44 [style=solid label="\"short\""]
  719 -> 45 [style=solid label="\"int\""]
  719 -> 46 [style=solid label="\"long\""]
  719 -> 47 [style=solid label="\"signed\""]
  719 -> 48 [style=solid label="\"unsigned\""]
  719 -> 49 [style=solid label="\"float\""]
  719 -> 50 [style=solid label="\"double\""]
  719 -> 51 [style=solid label="\"void\""]
  719 -> 53 [style=solid label="\"static\""]
  719 -> 54 [style=solid label="\"thread_local\""]
  719 -> 55 [style=solid label="\"mutable\""]
  719 -> 56 [style=solid label="\"typename\""]
  719 -> 58 [style=dashed label="alignment-specifier"]
  719 -> 61 [style=dashed label="attribute-specifier"]
  719 -> 478 [style=dashed label="attribute-specifier-seq"]
  719 -> 64 [style=dashed label="class-head"]
  719 -> 65 [style=dashed label="class-key"]
  719 -> 66 [style=dashed label="class-name"]
  719 -> 67 [style=dashed label="class-specifier"]
  719 -> 68 [style=dashed label="concept-name"]
  719 -> 70 [style=dashed label="cv-qualifier"]
  719 -> 71 [style=dashed label="decl-specifier"]
  719 -> 479 [style=dashed label="decl-specifier-seq"]
  719 -> 77 [style=dashed label="decltype-specifier"]
  719 -> 79 [style=dashed label="defining-type-specifier"]
  719 -> 80 [style=dashed label="elaborated-enum-specifier"]
  719 -> 81 [style=dashed label="elaborated-type-specifier"]
  719 -> 83 [style=dashed label="enum-head"]
  719 -> 268 [style=dashed label="enum-key"]
  719 -> 85 [style=dashed label="enum-name"]
  719 -> 86 [style=dashed label="enum-specifier"]
  719 -> 269 [style=dashed label="explicit-specifier"]
  719 -> 92 [style=dashed label="function-specifier"]
  719 -> 100 [style=dashed label="namespace-alias"]
  719 -> 103 [style=dashed label="namespace-name"]
  719 -> 213 [style=dashed label="nested-name-specifier"]
  719 -> 735 [style=dashed label="parameter-declaration"]
  719 -> 1213 [style=dashed label="parameter-declaration-clause"]
  719 -> 737 [style=dashed label="parameter-declaration-list"]
  719 -> 110 [style=dashed label="placeholder-type-specifier"]
  719 -> 142 [style=dashed label="simple-template-id"]
  719 -> 116 [style=dashed label="simple-type-specifier"]
  719 -> 118 [style=dashed label="storage-class-specifier"]
  719 -> 216 [style=dashed label="template-name"]
  719 -> 124 [style=dashed label="type-constraint"]
  719 -> 125 [style=dashed label="type-name"]
  719 -> 126 [style=dashed label="type-specifier"]
  719 -> 127 [style=dashed label="typedef-name"]
  719 -> 128 [style=dashed label="typename-specifier"]
  720 [label="State 720\n\l227 declaration-seq: declaration-seq • declaration\l1077 translation-unit: global-module-fragment module-declaration declaration-seq •\l1081                 | global-module-fragment module-declaration declaration-seq • private-module-fragment\l"]
  720 -> 1 [style=solid label="IDENTIFIER"]
  720 -> 2 [style=solid label="\"using\""]
  720 -> 3 [style=solid label="';'"]
  720 -> 4 [style=solid label="\"alignas\""]
  720 -> 5 [style=solid label="'('"]
  720 -> 6 [style=solid label="\"...\""]
  720 -> 7 [style=solid label="'&'"]
  720 -> 8 [style=solid label="\"asm\""]
  720 -> 9 [style=solid label="\"::\""]
  720 -> 10 [style=solid label="'['"]
  720 -> 11 [style=solid label="\"virtual\""]
  720 -> 12 [style=solid label="\"class\""]
  720 -> 13 [style=solid label="\"struct\""]
  720 -> 14 [style=solid label="\"union\""]
  720 -> 15 [style=solid label="\"template\""]
  720 -> 16 [style=solid label="\"&&\""]
  720 -> 17 [style=solid label="\"operator\""]
  720 -> 18 [style=solid label="\"const\""]
  720 -> 19 [style=solid label="\"volatile\""]
  720 -> 20 [style=solid label="\"friend\""]
  720 -> 21 [style=solid label="\"typedef\""]
  720 -> 22 [style=solid label="\"constexpr\""]
  720 -> 23 [style=solid label="\"consteval\""]
  720 -> 24 [style=solid label="\"constinit\""]
  720 -> 25 [style=solid label="\"inline\""]
  720 -> 26 [style=solid label="\"decltype\""]
  720 -> 27 [style=solid label="\"enum\""]
  720 -> 28 [style=solid label="\"extern\""]
  720 -> 29 [style=solid label="\"explicit\""]
  720 -> 30 [style=solid label="\"export\""]
  720 -> 158 [style=solid label="\"export-keyword\""]
  720 -> 32 [style=solid label="'*'"]
  720 -> 321 [style=solid label="\"module-keyword\""]
  720 -> 34 [style=solid label="\"import-keyword\""]
  720 -> 35 [style=solid label="\"namespace\""]
  720 -> 36 [style=solid label="'~'"]
  720 -> 37 [style=solid label="\"auto\""]
  720 -> 38 [style=solid label="\"char\""]
  720 -> 39 [style=solid label="\"char8_t\""]
  720 -> 40 [style=solid label="\"char16_t\""]
  720 -> 41 [style=solid label="\"char32_t\""]
  720 -> 42 [style=solid label="\"wchar_t\""]
  720 -> 43 [style=solid label="\"bool\""]
  720 -> 44 [style=solid label="\"short\""]
  720 -> 45 [style=solid label="\"int\""]
  720 -> 46 [style=solid label="\"long\""]
  720 -> 47 [style=solid label="\"signed\""]
  720 -> 48 [style=solid label="\"unsigned\""]
  720 -> 49 [style=solid label="\"float\""]
  720 -> 50 [style=solid label="\"double\""]
  720 -> 51 [style=solid label="\"void\""]
  720 -> 52 [style=solid label="\"static_assert\""]
  720 -> 53 [style=solid label="\"static\""]
  720 -> 54 [style=solid label="\"thread_local\""]
  720 -> 55 [style=solid label="\"mutable\""]
  720 -> 56 [style=solid label="\"typename\""]
  720 -> 57 [style=dashed label="alias-declaration"]
  720 -> 58 [style=dashed label="alignment-specifier"]
  720 -> 59 [style=dashed label="asm-declaration"]
  720 -> 60 [style=dashed label="attribute-declaration"]
  720 -> 61 [style=dashed label="attribute-specifier"]
  720 -> 62 [style=dashed label="attribute-specifier-seq"]
  720 -> 63 [style=dashed label="block-declaration"]
  720 -> 64 [style=dashed label="class-head"]
  720 -> 65 [style=dashed label="class-key"]
  720 -> 66 [style=dashed label="class-name"]
  720 -> 67 [style=dashed label="class-specifier"]
  720 -> 68 [style=dashed label="concept-name"]
  720 -> 69 [style=dashed label="conversion-function-id"]
  720 -> 70 [style=dashed label="cv-qualifier"]
  720 -> 71 [style=dashed label="decl-specifier"]
  720 -> 72 [style=dashed label="decl-specifier-seq"]
  720 -> 290 [style=dashed label="declaration"]
  720 -> 75 [style=dashed label="declarator"]
  720 -> 76 [style=dashed label="declarator-id"]
  720 -> 77 [style=dashed label="decltype-specifier"]
  720 -> 78 [style=dashed label="deduction-guide"]
  720 -> 79 [style=dashed label="defining-type-specifier"]
  720 -> 80 [style=dashed label="elaborated-enum-specifier"]
  720 -> 81 [style=dashed label="elaborated-type-specifier"]
  720 -> 82 [style=dashed label="empty-declaration"]
  720 -> 83 [style=dashed label="enum-head"]
  720 -> 84 [style=dashed label="enum-key"]
  720 -> 85 [style=dashed label="enum-name"]
  720 -> 86 [style=dashed label="enum-specifier"]
  720 -> 87 [style=dashed label="explicit-instantiation"]
  720 -> 88 [style=dashed label="explicit-specialization"]
  720 -> 89 [style=dashed label="explicit-specifier"]
  720 -> 90 [style=dashed label="export-declaration"]
  720 -> 91 [style=dashed label="function-definition"]
  720 -> 92 [style=dashed label="function-specifier"]
  720 -> 94 [style=dashed label="id-expression"]
  720 -> 95 [style=dashed label="linkage-specification"]
  720 -> 96 [style=dashed label="literal-operator-id"]
  720 -> 98 [style=dashed label="module-import-declaration"]
  720 -> 99 [style=dashed label="named-namespace-definition"]
  720 -> 100 [style=dashed label="namespace-alias"]
  720 -> 101 [style=dashed label="namespace-alias-definition"]
  720 -> 102 [style=dashed label="namespace-definition"]
  720 -> 103 [style=dashed label="namespace-name"]
  720 -> 104 [style=dashed label="nested-name-specifier"]
  720 -> 105 [style=dashed label="nested-namespace-definition"]
  720 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  720 -> 107 [style=dashed label="noptr-declarator"]
  720 -> 108 [style=dashed label="opaque-enum-declaration"]
  720 -> 109 [style=dashed label="operator-function-id"]
  720 -> 110 [style=dashed label="placeholder-type-specifier"]
  720 -> 1214 [style=dashed label="private-module-fragment"]
  720 -> 111 [style=dashed label="ptr-declarator"]
  720 -> 112 [style=dashed label="ptr-operator"]
  720 -> 113 [style=dashed label="qualified-id"]
  720 -> 114 [style=dashed label="simple-declaration"]
  720 -> 115 [style=dashed label="simple-template-id"]
  720 -> 116 [style=dashed label="simple-type-specifier"]
  720 -> 117 [style=dashed label="static_assert-declaration"]
  720 -> 118 [style=dashed label="storage-class-specifier"]
  720 -> 119 [style=dashed label="template-declaration"]
  720 -> 120 [style=dashed label="template-head"]
  720 -> 121 [style=dashed label="template-id"]
  720 -> 122 [style=dashed label="template-name"]
  720 -> 124 [style=dashed label="type-constraint"]
  720 -> 125 [style=dashed label="type-name"]
  720 -> 126 [style=dashed label="type-specifier"]
  720 -> 127 [style=dashed label="typedef-name"]
  720 -> 128 [style=dashed label="typename-specifier"]
  720 -> 129 [style=dashed label="unnamed-namespace-definition"]
  720 -> 130 [style=dashed label="unqualified-id"]
  720 -> 131 [style=dashed label="using-declaration"]
  720 -> 132 [style=dashed label="using-directive"]
  720 -> 133 [style=dashed label="using-enum-declaration"]
  720 -> "720R1077" [style=solid]
 "720R1077" [label="R1077", fillcolor=3, shape=diamond, style=filled]
  721 [label="State 721\n\l1079 translation-unit: global-module-fragment module-declaration private-module-fragment •\l"]
  721 -> "721R1079" [style=solid]
 "721R1079" [label="R1079", fillcolor=3, shape=diamond, style=filled]
  722 [label="State 722\n\l1064 template-id: literal-operator-id '<' '>' •\l"]
  722 -> "722R1064" [style=solid]
 "722R1064" [label="R1064", fillcolor=3, shape=diamond, style=filled]
  723 [label="State 723\n\l1055 template-argument-list: template-argument-list • ',' template-argument\l1056                       | template-argument-list • ',' template-argument \"...\"\l1065 template-id: literal-operator-id '<' template-argument-list • '>'\l"]
  723 -> 1136 [style=solid label="','"]
  723 -> 1215 [style=solid label="'>'"]
  724 [label="State 724\n\l890 private-module-fragment: \"module-keyword\" ':' • \"private\" ';'\l891                        | \"module-keyword\" ':' • \"private\" ';' declaration-seq\l"]
  724 -> 1216 [style=solid label="\"private\""]
  725 [label="State 725\n\l1082 translation-unit: module-declaration declaration-seq private-module-fragment •\l"]
  725 -> "725R1082" [style=solid]
 "725R1082" [label="R1082", fillcolor=3, shape=diamond, style=filled]
  726 [label="State 726\n\l663 nested-name-specifier: nested-name-specifier IDENTIFIER \"::\" •\l"]
  726 -> "726R663" [style=solid]
 "726R663" [label="R663", fillcolor=3, shape=diamond, style=filled]
  727 [label="State 727\n\l1066 template-name: IDENTIFIER •\l1154 unqualified-id: IDENTIFIER •\l"]
  727 -> "727R1066" [label="['<']", style=solid]
 "727R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  727 -> "727R1154d" [label="['<']", style=solid]
 "727R1154d" [label="R1154", fillcolor=5, shape=diamond, style=filled]
  727 -> "727R1154" [style=solid]
 "727R1154" [label="R1154", fillcolor=3, shape=diamond, style=filled]
  728 [label="State 728\n\l665 nested-name-specifier: nested-name-specifier \"template\" simple-template-id • \"::\"\l1001 simple-type-specifier: nested-name-specifier \"template\" simple-template-id •\l1061 template-id: simple-template-id •\l"]
  728 -> 1217 [style=solid label="\"::\""]
  728 -> "728R1001d" [label="[\"::\"]", style=solid]
 "728R1001d" [label="R1001", fillcolor=5, shape=diamond, style=filled]
  728 -> "728R1001" [style=solid]
 "728R1001" [label="R1001", fillcolor=3, shape=diamond, style=filled]
  728 -> "728R1061d" [label="['=', ';', \"alignas\", '(', ')', \"...\", '&', ',', '[', ':', '{', \"&&\", '>', '*']", style=solid]
 "728R1061d" [label="R1061", fillcolor=5, shape=diamond, style=filled]
  728 -> "728R1061" [label="['+', '-', \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ']', '}', \"final\", \"<=>\", '?', \"||\", \"->\", '.', \"==\", \"!=\", '^', '<', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"requires\", \"++\", \"--\", \"override\"]", style=solid]
 "728R1061" [label="R1061", fillcolor=3, shape=diamond, style=filled]
  729 [label="State 729\n\l914 qualified-id: nested-name-specifier \"template\" unqualified-id •\l"]
  729 -> "729R914" [style=solid]
 "729R914" [label="R914", fillcolor=3, shape=diamond, style=filled]
  730 [label="State 730\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l906 ptr-operator: nested-name-specifier '*' attribute-specifier-seq •\l908             | nested-name-specifier '*' attribute-specifier-seq • cv-qualifier-seq\l"]
  730 -> 4 [style=solid label="\"alignas\""]
  730 -> 10 [style=solid label="'['"]
  730 -> 18 [style=solid label="\"const\""]
  730 -> 19 [style=solid label="\"volatile\""]
  730 -> 58 [style=dashed label="alignment-specifier"]
  730 -> 265 [style=dashed label="attribute-specifier"]
  730 -> 234 [style=dashed label="cv-qualifier"]
  730 -> 1218 [style=dashed label="cv-qualifier-seq"]
  730 -> "730R906d" [label="[\"alignas\", '[', \"const\", \"volatile\"]", style=solid]
 "730R906d" [label="R906", fillcolor=5, shape=diamond, style=filled]
  730 -> "730R906" [style=solid]
 "730R906" [label="R906", fillcolor=3, shape=diamond, style=filled]
  731 [label="State 731\n\l907 ptr-operator: nested-name-specifier '*' cv-qualifier-seq •\l"]
  731 -> "731R907" [style=solid]
 "731R907" [label="R907", fillcolor=3, shape=diamond, style=filled]
  732 [label="State 732\n\l1086 type-constraint: nested-name-specifier concept-name '<' • '>'\l1088                | nested-name-specifier concept-name '<' • template-argument-list '>'\l"]
  732 -> 1 [style=solid label="IDENTIFIER"]
  732 -> 361 [style=solid label="'+'"]
  732 -> 362 [style=solid label="'-'"]
  732 -> 363 [style=solid label="'('"]
  732 -> 364 [style=solid label="'&'"]
  732 -> 365 [style=solid label="\"::\""]
  732 -> 366 [style=solid label="'['"]
  732 -> 367 [style=solid label="\"co_await\""]
  732 -> 368 [style=solid label="'0'"]
  732 -> 369 [style=solid label="'1'"]
  732 -> 370 [style=solid label="\"0b\""]
  732 -> 371 [style=solid label="\"0B\""]
  732 -> 372 [style=solid label="'\\''"]
  732 -> 373 [style=solid label="\"false\""]
  732 -> 374 [style=solid label="\"true\""]
  732 -> 12 [style=solid label="\"class\""]
  732 -> 13 [style=solid label="\"struct\""]
  732 -> 14 [style=solid label="\"union\""]
  732 -> 375 [style=solid label="\"noexcept\""]
  732 -> 17 [style=solid label="\"operator\""]
  732 -> 18 [style=solid label="\"const\""]
  732 -> 19 [style=solid label="\"volatile\""]
  732 -> 26 [style=solid label="\"decltype\""]
  732 -> 376 [style=solid label="\"delete\""]
  732 -> 377 [style=solid label="'.'"]
  732 -> 378 [style=solid label="'2'"]
  732 -> 379 [style=solid label="'3'"]
  732 -> 380 [style=solid label="'4'"]
  732 -> 381 [style=solid label="'5'"]
  732 -> 382 [style=solid label="'6'"]
  732 -> 383 [style=solid label="'7'"]
  732 -> 384 [style=solid label="'8'"]
  732 -> 385 [style=solid label="'9'"]
  732 -> 136 [style=solid label="\"enum\""]
  732 -> 185 [style=solid label="\"u8\""]
  732 -> 186 [style=solid label="'u'"]
  732 -> 187 [style=solid label="'U'"]
  732 -> 188 [style=solid label="'L'"]
  732 -> 1219 [style=solid label="'>'"]
  732 -> 386 [style=solid label="'*'"]
  732 -> 203 [style=solid label="'\"'"]
  732 -> 387 [style=solid label="\"0x\""]
  732 -> 388 [style=solid label="\"0X\""]
  732 -> 389 [style=solid label="\"requires\""]
  732 -> 390 [style=solid label="\"new\""]
  732 -> 391 [style=solid label="'~'"]
  732 -> 392 [style=solid label="'!'"]
  732 -> 393 [style=solid label="\"++\""]
  732 -> 394 [style=solid label="\"--\""]
  732 -> 395 [style=solid label="\"this\""]
  732 -> 37 [style=solid label="\"auto\""]
  732 -> 396 [style=solid label="\"nullptr\""]
  732 -> 397 [style=solid label="\"dynamic_cast\""]
  732 -> 398 [style=solid label="\"static_cast\""]
  732 -> 399 [style=solid label="\"reinterpret_cast\""]
  732 -> 400 [style=solid label="\"const_cast\""]
  732 -> 401 [style=solid label="\"typeid\""]
  732 -> 38 [style=solid label="\"char\""]
  732 -> 39 [style=solid label="\"char8_t\""]
  732 -> 40 [style=solid label="\"char16_t\""]
  732 -> 41 [style=solid label="\"char32_t\""]
  732 -> 42 [style=solid label="\"wchar_t\""]
  732 -> 43 [style=solid label="\"bool\""]
  732 -> 44 [style=solid label="\"short\""]
  732 -> 45 [style=solid label="\"int\""]
  732 -> 46 [style=solid label="\"long\""]
  732 -> 47 [style=solid label="\"signed\""]
  732 -> 48 [style=solid label="\"unsigned\""]
  732 -> 49 [style=solid label="\"float\""]
  732 -> 50 [style=solid label="\"double\""]
  732 -> 51 [style=solid label="\"void\""]
  732 -> 209 [style=solid label="'R'"]
  732 -> 56 [style=solid label="\"typename\""]
  732 -> 402 [style=solid label="\"sizeof\""]
  732 -> 403 [style=solid label="\"alignof\""]
  732 -> 404 [style=dashed label="additive-expression"]
  732 -> 405 [style=dashed label="and-expression"]
  732 -> 406 [style=dashed label="await-expression"]
  732 -> 407 [style=dashed label="binary-literal"]
  732 -> 408 [style=dashed label="boolean-literal"]
  732 -> 409 [style=dashed label="cast-expression"]
  732 -> 410 [style=dashed label="character-literal"]
  732 -> 210 [style=dashed label="class-key"]
  732 -> 66 [style=dashed label="class-name"]
  732 -> 411 [style=dashed label="compare-expression"]
  732 -> 68 [style=dashed label="concept-name"]
  732 -> 412 [style=dashed label="conditional-expression"]
  732 -> 639 [style=dashed label="constant-expression"]
  732 -> 69 [style=dashed label="conversion-function-id"]
  732 -> 70 [style=dashed label="cv-qualifier"]
  732 -> 414 [style=dashed label="decimal-floating-point-literal"]
  732 -> 415 [style=dashed label="decimal-literal"]
  732 -> 77 [style=dashed label="decltype-specifier"]
  732 -> 416 [style=dashed label="delete-expression"]
  732 -> 417 [style=dashed label="digit"]
  732 -> 418 [style=dashed label="digit-sequence"]
  732 -> 80 [style=dashed label="elaborated-enum-specifier"]
  732 -> 81 [style=dashed label="elaborated-type-specifier"]
  732 -> 419 [style=dashed label="encoding-prefix"]
  732 -> 85 [style=dashed label="enum-name"]
  732 -> 420 [style=dashed label="equality-expression"]
  732 -> 421 [style=dashed label="exclusive-or-expression"]
  732 -> 422 [style=dashed label="floating-point-literal"]
  732 -> 423 [style=dashed label="fold-expression"]
  732 -> 424 [style=dashed label="fractional-constant"]
  732 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  732 -> 426 [style=dashed label="hexadecimal-literal"]
  732 -> 427 [style=dashed label="hexadecimal-prefix"]
  732 -> 640 [style=dashed label="id-expression"]
  732 -> 429 [style=dashed label="inclusive-or-expression"]
  732 -> 430 [style=dashed label="integer-literal"]
  732 -> 431 [style=dashed label="lambda-expression"]
  732 -> 432 [style=dashed label="lambda-introducer"]
  732 -> 433 [style=dashed label="literal"]
  732 -> 96 [style=dashed label="literal-operator-id"]
  732 -> 434 [style=dashed label="logical-and-expression"]
  732 -> 435 [style=dashed label="logical-or-expression"]
  732 -> 436 [style=dashed label="multiplicative-expression"]
  732 -> 100 [style=dashed label="namespace-alias"]
  732 -> 103 [style=dashed label="namespace-name"]
  732 -> 437 [style=dashed label="nested-name-specifier"]
  732 -> 438 [style=dashed label="new-expression"]
  732 -> 439 [style=dashed label="noexcept-expression"]
  732 -> 440 [style=dashed label="nonzero-digit"]
  732 -> 441 [style=dashed label="octal-literal"]
  732 -> 109 [style=dashed label="operator-function-id"]
  732 -> 110 [style=dashed label="placeholder-type-specifier"]
  732 -> 442 [style=dashed label="pm-expression"]
  732 -> 443 [style=dashed label="pointer-literal"]
  732 -> 444 [style=dashed label="postfix-expression"]
  732 -> 445 [style=dashed label="primary-expression"]
  732 -> 113 [style=dashed label="qualified-id"]
  732 -> 446 [style=dashed label="relational-expression"]
  732 -> 447 [style=dashed label="requires-expression"]
  732 -> 448 [style=dashed label="shift-expression"]
  732 -> 115 [style=dashed label="simple-template-id"]
  732 -> 449 [style=dashed label="simple-type-specifier"]
  732 -> 450 [style=dashed label="string-literal"]
  732 -> 641 [style=dashed label="template-argument"]
  732 -> 1220 [style=dashed label="template-argument-list"]
  732 -> 121 [style=dashed label="template-id"]
  732 -> 216 [style=dashed label="template-name"]
  732 -> 124 [style=dashed label="type-constraint"]
  732 -> 643 [style=dashed label="type-id"]
  732 -> 125 [style=dashed label="type-name"]
  732 -> 217 [style=dashed label="type-specifier"]
  732 -> 452 [style=dashed label="type-specifier-seq"]
  732 -> 127 [style=dashed label="typedef-name"]
  732 -> 453 [style=dashed label="typename-specifier"]
  732 -> 454 [style=dashed label="unary-expression"]
  732 -> 455 [style=dashed label="unary-operator"]
  732 -> 130 [style=dashed label="unqualified-id"]
  732 -> 456 [style=dashed label="user-defined-character-literal"]
  732 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  732 -> 458 [style=dashed label="user-defined-integer-literal"]
  732 -> 459 [style=dashed label="user-defined-literal"]
  732 -> 460 [style=dashed label="user-defined-string-literal"]
  733 [label="State 733\n\l664 nested-name-specifier: nested-name-specifier simple-template-id \"::\" •\l"]
  733 -> "733R664" [style=solid]
 "733R664" [label="R664", fillcolor=3, shape=diamond, style=filled]
  734 [label="State 734\n\l832 parameter-declaration-clause: \"...\" •\l"]
  734 -> "734R832" [style=solid]
 "734R832" [label="R832", fillcolor=3, shape=diamond, style=filled]
  735 [label="State 735\n\l834 parameter-declaration-list: parameter-declaration •\l"]
  735 -> "735R834" [style=solid]
 "735R834" [label="R834", fillcolor=3, shape=diamond, style=filled]
  736 [label="State 736\n\l836 parameters-and-qualifiers: '(' parameter-declaration-clause • ')'\l837                          | '(' parameter-declaration-clause • ')' cv-qualifier-seq\l838                          | '(' parameter-declaration-clause • ')' ref-qualifier\l839                          | '(' parameter-declaration-clause • ')' cv-qualifier-seq ref-qualifier\l840                          | '(' parameter-declaration-clause • ')' noexcept-specifier\l841                          | '(' parameter-declaration-clause • ')' cv-qualifier-seq noexcept-specifier\l842                          | '(' parameter-declaration-clause • ')' ref-qualifier noexcept-specifier\l843                          | '(' parameter-declaration-clause • ')' cv-qualifier-seq ref-qualifier noexcept-specifier\l844                          | '(' parameter-declaration-clause • ')' attribute-specifier-seq\l845                          | '(' parameter-declaration-clause • ')' cv-qualifier-seq attribute-specifier-seq\l846                          | '(' parameter-declaration-clause • ')' ref-qualifier attribute-specifier-seq\l847                          | '(' parameter-declaration-clause • ')' cv-qualifier-seq ref-qualifier attribute-specifier-seq\l848                          | '(' parameter-declaration-clause • ')' noexcept-specifier attribute-specifier-seq\l849                          | '(' parameter-declaration-clause • ')' cv-qualifier-seq noexcept-specifier attribute-specifier-seq\l850                          | '(' parameter-declaration-clause • ')' ref-qualifier noexcept-specifier attribute-specifier-seq\l851                          | '(' parameter-declaration-clause • ')' cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq\l"]
  736 -> 1221 [style=solid label="')'"]
  737 [label="State 737\n\l830 parameter-declaration-clause: parameter-declaration-list •\l831                             | parameter-declaration-list • \"...\"\l833                             | parameter-declaration-list • ',' \"...\"\l835 parameter-declaration-list: parameter-declaration-list • ',' parameter-declaration\l"]
  737 -> 1222 [style=solid label="\"...\""]
  737 -> 1223 [style=solid label="','"]
  737 -> "737R830" [style=solid]
 "737R830" [label="R830", fillcolor=3, shape=diamond, style=filled]
  738 [label="State 738\n\l728 noptr-declarator: noptr-declarator '[' ']' •\l730                 | noptr-declarator '[' ']' • attribute-specifier-seq\l"]
  738 -> 4 [style=solid label="\"alignas\""]
  738 -> 10 [style=solid label="'['"]
  738 -> 58 [style=dashed label="alignment-specifier"]
  738 -> 61 [style=dashed label="attribute-specifier"]
  738 -> 1224 [style=dashed label="attribute-specifier-seq"]
  738 -> "738R728d" [label="['[']", style=solid]
 "738R728d" [label="R728", fillcolor=5, shape=diamond, style=filled]
  738 -> "738R728" [style=solid]
 "738R728" [label="R728", fillcolor=3, shape=diamond, style=filled]
  739 [label="State 739\n\l729 noptr-declarator: noptr-declarator '[' constant-expression • ']'\l731                 | noptr-declarator '[' constant-expression • ']' attribute-specifier-seq\l"]
  739 -> 1225 [style=solid label="']'"]
  740 [label="State 740\n\l1073 trailing-return-type: \"->\" • type-id\l"]
  740 -> 161 [style=solid label="IDENTIFIER"]
  740 -> 9 [style=solid label="\"::\""]
  740 -> 12 [style=solid label="\"class\""]
  740 -> 13 [style=solid label="\"struct\""]
  740 -> 14 [style=solid label="\"union\""]
  740 -> 18 [style=solid label="\"const\""]
  740 -> 19 [style=solid label="\"volatile\""]
  740 -> 26 [style=solid label="\"decltype\""]
  740 -> 136 [style=solid label="\"enum\""]
  740 -> 37 [style=solid label="\"auto\""]
  740 -> 38 [style=solid label="\"char\""]
  740 -> 39 [style=solid label="\"char8_t\""]
  740 -> 40 [style=solid label="\"char16_t\""]
  740 -> 41 [style=solid label="\"char32_t\""]
  740 -> 42 [style=solid label="\"wchar_t\""]
  740 -> 43 [style=solid label="\"bool\""]
  740 -> 44 [style=solid label="\"short\""]
  740 -> 45 [style=solid label="\"int\""]
  740 -> 46 [style=solid label="\"long\""]
  740 -> 47 [style=solid label="\"signed\""]
  740 -> 48 [style=solid label="\"unsigned\""]
  740 -> 49 [style=solid label="\"float\""]
  740 -> 50 [style=solid label="\"double\""]
  740 -> 51 [style=solid label="\"void\""]
  740 -> 56 [style=solid label="\"typename\""]
  740 -> 210 [style=dashed label="class-key"]
  740 -> 66 [style=dashed label="class-name"]
  740 -> 68 [style=dashed label="concept-name"]
  740 -> 70 [style=dashed label="cv-qualifier"]
  740 -> 77 [style=dashed label="decltype-specifier"]
  740 -> 80 [style=dashed label="elaborated-enum-specifier"]
  740 -> 81 [style=dashed label="elaborated-type-specifier"]
  740 -> 85 [style=dashed label="enum-name"]
  740 -> 100 [style=dashed label="namespace-alias"]
  740 -> 103 [style=dashed label="namespace-name"]
  740 -> 213 [style=dashed label="nested-name-specifier"]
  740 -> 110 [style=dashed label="placeholder-type-specifier"]
  740 -> 142 [style=dashed label="simple-template-id"]
  740 -> 116 [style=dashed label="simple-type-specifier"]
  740 -> 216 [style=dashed label="template-name"]
  740 -> 124 [style=dashed label="type-constraint"]
  740 -> 1226 [style=dashed label="type-id"]
  740 -> 125 [style=dashed label="type-name"]
  740 -> 217 [style=dashed label="type-specifier"]
  740 -> 452 [style=dashed label="type-specifier-seq"]
  740 -> 127 [style=dashed label="typedef-name"]
  740 -> 128 [style=dashed label="typename-specifier"]
  741 [label="State 741\n\l230 declarator: noptr-declarator parameters-and-qualifiers trailing-return-type •\l"]
  741 -> "741R230" [style=solid]
 "741R230" [label="R230", fillcolor=3, shape=diamond, style=filled]
  742 [label="State 742\n\l1062 template-id: operator-function-id '<' '>' •\l"]
  742 -> "742R1062" [style=solid]
 "742R1062" [label="R1062", fillcolor=3, shape=diamond, style=filled]
  743 [label="State 743\n\l1055 template-argument-list: template-argument-list • ',' template-argument\l1056                       | template-argument-list • ',' template-argument \"...\"\l1063 template-id: operator-function-id '<' template-argument-list • '>'\l"]
  743 -> 1136 [style=solid label="','"]
  743 -> 1227 [style=solid label="'>'"]
  744 [label="State 744\n\l163 concept-name: IDENTIFIER •\l"]
  744 -> "744R163" [style=solid]
 "744R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  745 [label="State 745\n\l162 concept-definition: \"concept\" concept-name • '=' constraint-expression ';'\l"]
  745 -> 1228 [style=solid label="'='"]
  746 [label="State 746\n\l235 deduction-guide: template-name '(' parameter-declaration-clause • ')' \"->\" simple-template-id ';'\l"]
  746 -> 1229 [style=solid label="')'"]
  747 [label="State 747\n\l997 simple-template-id: template-name '<' '>' •\l"]
  747 -> "747R997" [style=solid]
 "747R997" [label="R997", fillcolor=3, shape=diamond, style=filled]
  748 [label="State 748\n\l998 simple-template-id: template-name '<' template-argument-list • '>'\l1055 template-argument-list: template-argument-list • ',' template-argument\l1056                       | template-argument-list • ',' template-argument \"...\"\l"]
  748 -> 1136 [style=solid label="','"]
  748 -> 1230 [style=solid label="'>'"]
  749 [label="State 749\n\l854 placeholder-type-specifier: type-constraint \"decltype\" '(' • \"auto\" ')'\l"]
  749 -> 1231 [style=solid label="\"auto\""]
  750 [label="State 750\n\l 13 alias-declaration: \"using\" IDENTIFIER '=' defining-type-id • ';'\l"]
  750 -> 1232 [style=solid label="';'"]
  751 [label="State 751\n\l241 defining-type-specifier-seq: defining-type-specifier •\l242                            | defining-type-specifier • attribute-specifier-seq\l243                            | defining-type-specifier • defining-type-specifier-seq\l"]
  751 -> 161 [style=solid label="IDENTIFIER"]
  751 -> 4 [style=solid label="\"alignas\""]
  751 -> 9 [style=solid label="\"::\""]
  751 -> 10 [style=solid label="'['"]
  751 -> 12 [style=solid label="\"class\""]
  751 -> 13 [style=solid label="\"struct\""]
  751 -> 14 [style=solid label="\"union\""]
  751 -> 18 [style=solid label="\"const\""]
  751 -> 19 [style=solid label="\"volatile\""]
  751 -> 26 [style=solid label="\"decltype\""]
  751 -> 27 [style=solid label="\"enum\""]
  751 -> 37 [style=solid label="\"auto\""]
  751 -> 38 [style=solid label="\"char\""]
  751 -> 39 [style=solid label="\"char8_t\""]
  751 -> 40 [style=solid label="\"char16_t\""]
  751 -> 41 [style=solid label="\"char32_t\""]
  751 -> 42 [style=solid label="\"wchar_t\""]
  751 -> 43 [style=solid label="\"bool\""]
  751 -> 44 [style=solid label="\"short\""]
  751 -> 45 [style=solid label="\"int\""]
  751 -> 46 [style=solid label="\"long\""]
  751 -> 47 [style=solid label="\"signed\""]
  751 -> 48 [style=solid label="\"unsigned\""]
  751 -> 49 [style=solid label="\"float\""]
  751 -> 50 [style=solid label="\"double\""]
  751 -> 51 [style=solid label="\"void\""]
  751 -> 56 [style=solid label="\"typename\""]
  751 -> 58 [style=dashed label="alignment-specifier"]
  751 -> 61 [style=dashed label="attribute-specifier"]
  751 -> 1233 [style=dashed label="attribute-specifier-seq"]
  751 -> 64 [style=dashed label="class-head"]
  751 -> 65 [style=dashed label="class-key"]
  751 -> 66 [style=dashed label="class-name"]
  751 -> 67 [style=dashed label="class-specifier"]
  751 -> 68 [style=dashed label="concept-name"]
  751 -> 70 [style=dashed label="cv-qualifier"]
  751 -> 77 [style=dashed label="decltype-specifier"]
  751 -> 751 [style=dashed label="defining-type-specifier"]
  751 -> 1234 [style=dashed label="defining-type-specifier-seq"]
  751 -> 80 [style=dashed label="elaborated-enum-specifier"]
  751 -> 81 [style=dashed label="elaborated-type-specifier"]
  751 -> 83 [style=dashed label="enum-head"]
  751 -> 268 [style=dashed label="enum-key"]
  751 -> 85 [style=dashed label="enum-name"]
  751 -> 86 [style=dashed label="enum-specifier"]
  751 -> 100 [style=dashed label="namespace-alias"]
  751 -> 103 [style=dashed label="namespace-name"]
  751 -> 213 [style=dashed label="nested-name-specifier"]
  751 -> 110 [style=dashed label="placeholder-type-specifier"]
  751 -> 142 [style=dashed label="simple-template-id"]
  751 -> 116 [style=dashed label="simple-type-specifier"]
  751 -> 216 [style=dashed label="template-name"]
  751 -> 124 [style=dashed label="type-constraint"]
  751 -> 125 [style=dashed label="type-name"]
  751 -> 126 [style=dashed label="type-specifier"]
  751 -> 127 [style=dashed label="typedef-name"]
  751 -> 128 [style=dashed label="typename-specifier"]
  751 -> "751R241d" [label="[IDENTIFIER, \"::\", '[', \"decltype\"]", style=solid]
 "751R241d" [label="R241", fillcolor=5, shape=diamond, style=filled]
  751 -> "751R241" [style=solid]
 "751R241" [label="R241", fillcolor=3, shape=diamond, style=filled]
  752 [label="State 752\n\l236 defining-type-id: defining-type-specifier-seq •\l237                 | defining-type-specifier-seq • abstract-declarator\l"]
  752 -> 258 [style=solid label="IDENTIFIER"]
  752 -> 943 [style=solid label="'('"]
  752 -> 944 [style=solid label="\"...\""]
  752 -> 7 [style=solid label="'&'"]
  752 -> 9 [style=solid label="\"::\""]
  752 -> 945 [style=solid label="'['"]
  752 -> 16 [style=solid label="\"&&\""]
  752 -> 135 [style=solid label="\"decltype\""]
  752 -> 32 [style=solid label="'*'"]
  752 -> 1235 [style=dashed label="abstract-declarator"]
  752 -> 947 [style=dashed label="abstract-pack-declarator"]
  752 -> 66 [style=dashed label="class-name"]
  752 -> 139 [style=dashed label="decltype-specifier"]
  752 -> 85 [style=dashed label="enum-name"]
  752 -> 100 [style=dashed label="namespace-alias"]
  752 -> 103 [style=dashed label="namespace-name"]
  752 -> 522 [style=dashed label="nested-name-specifier"]
  752 -> 948 [style=dashed label="noptr-abstract-declarator"]
  752 -> 949 [style=dashed label="noptr-abstract-pack-declarator"]
  752 -> 950 [style=dashed label="parameters-and-qualifiers"]
  752 -> 951 [style=dashed label="ptr-abstract-declarator"]
  752 -> 952 [style=dashed label="ptr-operator"]
  752 -> 142 [style=dashed label="simple-template-id"]
  752 -> 143 [style=dashed label="template-name"]
  752 -> 144 [style=dashed label="type-name"]
  752 -> 127 [style=dashed label="typedef-name"]
  752 -> "752R236" [style=solid]
 "752R236" [label="R236", fillcolor=3, shape=diamond, style=filled]
  753 [label="State 753\n\l 14 alias-declaration: \"using\" IDENTIFIER attribute-specifier-seq '=' • defining-type-id ';'\l"]
  753 -> 161 [style=solid label="IDENTIFIER"]
  753 -> 9 [style=solid label="\"::\""]
  753 -> 12 [style=solid label="\"class\""]
  753 -> 13 [style=solid label="\"struct\""]
  753 -> 14 [style=solid label="\"union\""]
  753 -> 18 [style=solid label="\"const\""]
  753 -> 19 [style=solid label="\"volatile\""]
  753 -> 26 [style=solid label="\"decltype\""]
  753 -> 27 [style=solid label="\"enum\""]
  753 -> 37 [style=solid label="\"auto\""]
  753 -> 38 [style=solid label="\"char\""]
  753 -> 39 [style=solid label="\"char8_t\""]
  753 -> 40 [style=solid label="\"char16_t\""]
  753 -> 41 [style=solid label="\"char32_t\""]
  753 -> 42 [style=solid label="\"wchar_t\""]
  753 -> 43 [style=solid label="\"bool\""]
  753 -> 44 [style=solid label="\"short\""]
  753 -> 45 [style=solid label="\"int\""]
  753 -> 46 [style=solid label="\"long\""]
  753 -> 47 [style=solid label="\"signed\""]
  753 -> 48 [style=solid label="\"unsigned\""]
  753 -> 49 [style=solid label="\"float\""]
  753 -> 50 [style=solid label="\"double\""]
  753 -> 51 [style=solid label="\"void\""]
  753 -> 56 [style=solid label="\"typename\""]
  753 -> 64 [style=dashed label="class-head"]
  753 -> 65 [style=dashed label="class-key"]
  753 -> 66 [style=dashed label="class-name"]
  753 -> 67 [style=dashed label="class-specifier"]
  753 -> 68 [style=dashed label="concept-name"]
  753 -> 70 [style=dashed label="cv-qualifier"]
  753 -> 77 [style=dashed label="decltype-specifier"]
  753 -> 1236 [style=dashed label="defining-type-id"]
  753 -> 751 [style=dashed label="defining-type-specifier"]
  753 -> 752 [style=dashed label="defining-type-specifier-seq"]
  753 -> 80 [style=dashed label="elaborated-enum-specifier"]
  753 -> 81 [style=dashed label="elaborated-type-specifier"]
  753 -> 83 [style=dashed label="enum-head"]
  753 -> 268 [style=dashed label="enum-key"]
  753 -> 85 [style=dashed label="enum-name"]
  753 -> 86 [style=dashed label="enum-specifier"]
  753 -> 100 [style=dashed label="namespace-alias"]
  753 -> 103 [style=dashed label="namespace-name"]
  753 -> 213 [style=dashed label="nested-name-specifier"]
  753 -> 110 [style=dashed label="placeholder-type-specifier"]
  753 -> 142 [style=dashed label="simple-template-id"]
  753 -> 116 [style=dashed label="simple-type-specifier"]
  753 -> 216 [style=dashed label="template-name"]
  753 -> 124 [style=dashed label="type-constraint"]
  753 -> 125 [style=dashed label="type-name"]
  753 -> 126 [style=dashed label="type-specifier"]
  753 -> 127 [style=dashed label="typedef-name"]
  753 -> 128 [style=dashed label="typename-specifier"]
  754 [label="State 754\n\l1186 using-directive: \"using\" \"namespace\" namespace-name ';' •\l"]
  754 -> "754R1186" [style=solid]
 "754R1186" [label="R1186", fillcolor=3, shape=diamond, style=filled]
  755 [label="State 755\n\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l"]
  755 -> 726 [style=solid label="\"::\""]
  755 -> "755R651" [style=solid]
 "755R651" [label="R651", fillcolor=3, shape=diamond, style=filled]
  755 -> "755R657d" [label="[';']", style=solid]
 "755R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  755 -> "755R1066" [label="['<']", style=solid]
 "755R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  756 [label="State 756\n\l1188 using-directive: \"using\" \"namespace\" nested-name-specifier namespace-name • ';'\l"]
  756 -> 1237 [style=solid label="';'"]
  757 [label="State 757\n\l1179 using-declarator: \"typename\" nested-name-specifier unqualified-id •\l"]
  757 -> "757R1179" [style=solid]
 "757R1179" [label="R1179", fillcolor=3, shape=diamond, style=filled]
  758 [label="State 758\n\l665 nested-name-specifier: nested-name-specifier \"template\" simple-template-id • \"::\"\l"]
  758 -> 1217 [style=solid label="\"::\""]
  759 [label="State 759\n\l1183 using-declarator-list: using-declarator-list ',' using-declarator •\l1184                      | using-declarator-list ',' using-declarator • \"...\"\l"]
  759 -> 1238 [style=solid label="\"...\""]
  759 -> "759R1183" [style=solid]
 "759R1183" [label="R1183", fillcolor=3, shape=diamond, style=filled]
  760 [label="State 760\n\l349 fold-expression: '(' \"...\" • fold-operator cast-expression ')'\l"]
  760 -> 1239 [style=solid label="'+'"]
  760 -> 1240 [style=solid label="'-'"]
  760 -> 1241 [style=solid label="'='"]
  760 -> 1242 [style=solid label="'&'"]
  760 -> 1243 [style=solid label="\"*=\""]
  760 -> 1244 [style=solid label="\"/=\""]
  760 -> 1245 [style=solid label="\"%=\""]
  760 -> 1246 [style=solid label="\"+=\""]
  760 -> 1247 [style=solid label="\"-=\""]
  760 -> 1248 [style=solid label="\">>=\""]
  760 -> 1249 [style=solid label="\"<<=\""]
  760 -> 1250 [style=solid label="\"&=\""]
  760 -> 1251 [style=solid label="\"^=\""]
  760 -> 1252 [style=solid label="\"|=\""]
  760 -> 1253 [style=solid label="','"]
  760 -> 1254 [style=solid label="\"&&\""]
  760 -> 1255 [style=solid label="\"||\""]
  760 -> 1256 [style=solid label="\"==\""]
  760 -> 1257 [style=solid label="\"!=\""]
  760 -> 1258 [style=solid label="'^'"]
  760 -> 1259 [style=solid label="'<'"]
  760 -> 1260 [style=solid label="'>'"]
  760 -> 1261 [style=solid label="'*'"]
  760 -> 1262 [style=solid label="'/'"]
  760 -> 1263 [style=solid label="'%'"]
  760 -> 1264 [style=solid label="'|'"]
  760 -> 1265 [style=solid label="\"<<\""]
  760 -> 1266 [style=solid label="\">>\""]
  760 -> 1267 [style=solid label="\"<=\""]
  760 -> 1268 [style=solid label="\">=\""]
  760 -> 1269 [style=solid label="\".*\""]
  760 -> 1270 [style=solid label="\"->*\""]
  760 -> 1271 [style=dashed label="fold-operator"]
  761 [label="State 761\n\l348 fold-expression: '(' cast-expression • fold-operator \"...\" ')'\l350                | '(' cast-expression • fold-operator \"...\" fold-operator cast-expression ')'\l856 pm-expression: cast-expression •\l"]
  761 -> 1239 [style=solid label="'+'"]
  761 -> 1240 [style=solid label="'-'"]
  761 -> 1241 [style=solid label="'='"]
  761 -> 1242 [style=solid label="'&'"]
  761 -> 1243 [style=solid label="\"*=\""]
  761 -> 1244 [style=solid label="\"/=\""]
  761 -> 1245 [style=solid label="\"%=\""]
  761 -> 1246 [style=solid label="\"+=\""]
  761 -> 1247 [style=solid label="\"-=\""]
  761 -> 1248 [style=solid label="\">>=\""]
  761 -> 1249 [style=solid label="\"<<=\""]
  761 -> 1250 [style=solid label="\"&=\""]
  761 -> 1251 [style=solid label="\"^=\""]
  761 -> 1252 [style=solid label="\"|=\""]
  761 -> 1253 [style=solid label="','"]
  761 -> 1254 [style=solid label="\"&&\""]
  761 -> 1255 [style=solid label="\"||\""]
  761 -> 1256 [style=solid label="\"==\""]
  761 -> 1257 [style=solid label="\"!=\""]
  761 -> 1258 [style=solid label="'^'"]
  761 -> 1259 [style=solid label="'<'"]
  761 -> 1260 [style=solid label="'>'"]
  761 -> 1261 [style=solid label="'*'"]
  761 -> 1262 [style=solid label="'/'"]
  761 -> 1263 [style=solid label="'%'"]
  761 -> 1264 [style=solid label="'|'"]
  761 -> 1265 [style=solid label="\"<<\""]
  761 -> 1266 [style=solid label="\">>\""]
  761 -> 1267 [style=solid label="\"<=\""]
  761 -> 1268 [style=solid label="\">=\""]
  761 -> 1269 [style=solid label="\".*\""]
  761 -> 1270 [style=solid label="\"->*\""]
  761 -> 1272 [style=dashed label="fold-operator"]
  761 -> "761R856d" [label="['+', '-', '=', '&', \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"&&\", \"||\", \"==\", \"!=\", '^', '<', '>', '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\"]", style=solid]
 "761R856d" [label="R856", fillcolor=5, shape=diamond, style=filled]
  761 -> "761R856" [style=solid]
 "761R856" [label="R856", fillcolor=3, shape=diamond, style=filled]
  762 [label="State 762\n\l338 expression: expression • ',' assignment-expression\l885 primary-expression: '(' expression • ')'\l"]
  762 -> 1273 [style=solid label="')'"]
  762 -> 1037 [style=solid label="','"]
  763 [label="State 763\n\l125 cast-expression: '(' type-id • ')' cast-expression\l"]
  763 -> 1274 [style=solid label="')'"]
  764 [label="State 764\n\l244 delete-expression: \"::\" \"delete\" • cast-expression\l246                  | \"::\" \"delete\" • '[' ']' cast-expression\l"]
  764 -> 1 [style=solid label="IDENTIFIER"]
  764 -> 361 [style=solid label="'+'"]
  764 -> 362 [style=solid label="'-'"]
  764 -> 363 [style=solid label="'('"]
  764 -> 364 [style=solid label="'&'"]
  764 -> 365 [style=solid label="\"::\""]
  764 -> 1275 [style=solid label="'['"]
  764 -> 367 [style=solid label="\"co_await\""]
  764 -> 368 [style=solid label="'0'"]
  764 -> 369 [style=solid label="'1'"]
  764 -> 370 [style=solid label="\"0b\""]
  764 -> 371 [style=solid label="\"0B\""]
  764 -> 372 [style=solid label="'\\''"]
  764 -> 373 [style=solid label="\"false\""]
  764 -> 374 [style=solid label="\"true\""]
  764 -> 375 [style=solid label="\"noexcept\""]
  764 -> 17 [style=solid label="\"operator\""]
  764 -> 26 [style=solid label="\"decltype\""]
  764 -> 376 [style=solid label="\"delete\""]
  764 -> 377 [style=solid label="'.'"]
  764 -> 378 [style=solid label="'2'"]
  764 -> 379 [style=solid label="'3'"]
  764 -> 380 [style=solid label="'4'"]
  764 -> 381 [style=solid label="'5'"]
  764 -> 382 [style=solid label="'6'"]
  764 -> 383 [style=solid label="'7'"]
  764 -> 384 [style=solid label="'8'"]
  764 -> 385 [style=solid label="'9'"]
  764 -> 185 [style=solid label="\"u8\""]
  764 -> 186 [style=solid label="'u'"]
  764 -> 187 [style=solid label="'U'"]
  764 -> 188 [style=solid label="'L'"]
  764 -> 386 [style=solid label="'*'"]
  764 -> 203 [style=solid label="'\"'"]
  764 -> 387 [style=solid label="\"0x\""]
  764 -> 388 [style=solid label="\"0X\""]
  764 -> 389 [style=solid label="\"requires\""]
  764 -> 390 [style=solid label="\"new\""]
  764 -> 391 [style=solid label="'~'"]
  764 -> 392 [style=solid label="'!'"]
  764 -> 393 [style=solid label="\"++\""]
  764 -> 394 [style=solid label="\"--\""]
  764 -> 395 [style=solid label="\"this\""]
  764 -> 37 [style=solid label="\"auto\""]
  764 -> 396 [style=solid label="\"nullptr\""]
  764 -> 397 [style=solid label="\"dynamic_cast\""]
  764 -> 398 [style=solid label="\"static_cast\""]
  764 -> 399 [style=solid label="\"reinterpret_cast\""]
  764 -> 400 [style=solid label="\"const_cast\""]
  764 -> 401 [style=solid label="\"typeid\""]
  764 -> 38 [style=solid label="\"char\""]
  764 -> 39 [style=solid label="\"char8_t\""]
  764 -> 40 [style=solid label="\"char16_t\""]
  764 -> 41 [style=solid label="\"char32_t\""]
  764 -> 42 [style=solid label="\"wchar_t\""]
  764 -> 43 [style=solid label="\"bool\""]
  764 -> 44 [style=solid label="\"short\""]
  764 -> 45 [style=solid label="\"int\""]
  764 -> 46 [style=solid label="\"long\""]
  764 -> 47 [style=solid label="\"signed\""]
  764 -> 48 [style=solid label="\"unsigned\""]
  764 -> 49 [style=solid label="\"float\""]
  764 -> 50 [style=solid label="\"double\""]
  764 -> 51 [style=solid label="\"void\""]
  764 -> 209 [style=solid label="'R'"]
  764 -> 56 [style=solid label="\"typename\""]
  764 -> 402 [style=solid label="\"sizeof\""]
  764 -> 403 [style=solid label="\"alignof\""]
  764 -> 406 [style=dashed label="await-expression"]
  764 -> 407 [style=dashed label="binary-literal"]
  764 -> 408 [style=dashed label="boolean-literal"]
  764 -> 1276 [style=dashed label="cast-expression"]
  764 -> 410 [style=dashed label="character-literal"]
  764 -> 66 [style=dashed label="class-name"]
  764 -> 68 [style=dashed label="concept-name"]
  764 -> 69 [style=dashed label="conversion-function-id"]
  764 -> 414 [style=dashed label="decimal-floating-point-literal"]
  764 -> 415 [style=dashed label="decimal-literal"]
  764 -> 77 [style=dashed label="decltype-specifier"]
  764 -> 416 [style=dashed label="delete-expression"]
  764 -> 417 [style=dashed label="digit"]
  764 -> 418 [style=dashed label="digit-sequence"]
  764 -> 419 [style=dashed label="encoding-prefix"]
  764 -> 85 [style=dashed label="enum-name"]
  764 -> 422 [style=dashed label="floating-point-literal"]
  764 -> 423 [style=dashed label="fold-expression"]
  764 -> 424 [style=dashed label="fractional-constant"]
  764 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  764 -> 426 [style=dashed label="hexadecimal-literal"]
  764 -> 427 [style=dashed label="hexadecimal-prefix"]
  764 -> 428 [style=dashed label="id-expression"]
  764 -> 430 [style=dashed label="integer-literal"]
  764 -> 431 [style=dashed label="lambda-expression"]
  764 -> 432 [style=dashed label="lambda-introducer"]
  764 -> 433 [style=dashed label="literal"]
  764 -> 96 [style=dashed label="literal-operator-id"]
  764 -> 100 [style=dashed label="namespace-alias"]
  764 -> 103 [style=dashed label="namespace-name"]
  764 -> 437 [style=dashed label="nested-name-specifier"]
  764 -> 438 [style=dashed label="new-expression"]
  764 -> 439 [style=dashed label="noexcept-expression"]
  764 -> 440 [style=dashed label="nonzero-digit"]
  764 -> 441 [style=dashed label="octal-literal"]
  764 -> 109 [style=dashed label="operator-function-id"]
  764 -> 110 [style=dashed label="placeholder-type-specifier"]
  764 -> 443 [style=dashed label="pointer-literal"]
  764 -> 444 [style=dashed label="postfix-expression"]
  764 -> 445 [style=dashed label="primary-expression"]
  764 -> 113 [style=dashed label="qualified-id"]
  764 -> 447 [style=dashed label="requires-expression"]
  764 -> 115 [style=dashed label="simple-template-id"]
  764 -> 534 [style=dashed label="simple-type-specifier"]
  764 -> 450 [style=dashed label="string-literal"]
  764 -> 121 [style=dashed label="template-id"]
  764 -> 216 [style=dashed label="template-name"]
  764 -> 124 [style=dashed label="type-constraint"]
  764 -> 125 [style=dashed label="type-name"]
  764 -> 127 [style=dashed label="typedef-name"]
  764 -> 536 [style=dashed label="typename-specifier"]
  764 -> 454 [style=dashed label="unary-expression"]
  764 -> 455 [style=dashed label="unary-operator"]
  764 -> 130 [style=dashed label="unqualified-id"]
  764 -> 456 [style=dashed label="user-defined-character-literal"]
  764 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  764 -> 458 [style=dashed label="user-defined-integer-literal"]
  764 -> 459 [style=dashed label="user-defined-literal"]
  764 -> 460 [style=dashed label="user-defined-string-literal"]
  765 [label="State 765\n\l672 new-expression: \"::\" \"new\" • new-type-id\l674               | \"::\" \"new\" • new-placement new-type-id\l676               | \"::\" \"new\" • new-type-id new-initializer\l678               | \"::\" \"new\" • new-placement new-type-id new-initializer\l680               | \"::\" \"new\" • '(' type-id ')'\l682               | \"::\" \"new\" • new-placement '(' type-id ')'\l684               | \"::\" \"new\" • '(' type-id ')' new-initializer\l686               | \"::\" \"new\" • new-placement '(' type-id ')' new-initializer\l"]
  765 -> 161 [style=solid label="IDENTIFIER"]
  765 -> 1277 [style=solid label="'('"]
  765 -> 9 [style=solid label="\"::\""]
  765 -> 12 [style=solid label="\"class\""]
  765 -> 13 [style=solid label="\"struct\""]
  765 -> 14 [style=solid label="\"union\""]
  765 -> 18 [style=solid label="\"const\""]
  765 -> 19 [style=solid label="\"volatile\""]
  765 -> 26 [style=solid label="\"decltype\""]
  765 -> 136 [style=solid label="\"enum\""]
  765 -> 37 [style=solid label="\"auto\""]
  765 -> 38 [style=solid label="\"char\""]
  765 -> 39 [style=solid label="\"char8_t\""]
  765 -> 40 [style=solid label="\"char16_t\""]
  765 -> 41 [style=solid label="\"char32_t\""]
  765 -> 42 [style=solid label="\"wchar_t\""]
  765 -> 43 [style=solid label="\"bool\""]
  765 -> 44 [style=solid label="\"short\""]
  765 -> 45 [style=solid label="\"int\""]
  765 -> 46 [style=solid label="\"long\""]
  765 -> 47 [style=solid label="\"signed\""]
  765 -> 48 [style=solid label="\"unsigned\""]
  765 -> 49 [style=solid label="\"float\""]
  765 -> 50 [style=solid label="\"double\""]
  765 -> 51 [style=solid label="\"void\""]
  765 -> 56 [style=solid label="\"typename\""]
  765 -> 210 [style=dashed label="class-key"]
  765 -> 66 [style=dashed label="class-name"]
  765 -> 68 [style=dashed label="concept-name"]
  765 -> 70 [style=dashed label="cv-qualifier"]
  765 -> 77 [style=dashed label="decltype-specifier"]
  765 -> 80 [style=dashed label="elaborated-enum-specifier"]
  765 -> 81 [style=dashed label="elaborated-type-specifier"]
  765 -> 85 [style=dashed label="enum-name"]
  765 -> 100 [style=dashed label="namespace-alias"]
  765 -> 103 [style=dashed label="namespace-name"]
  765 -> 213 [style=dashed label="nested-name-specifier"]
  765 -> 1278 [style=dashed label="new-placement"]
  765 -> 1279 [style=dashed label="new-type-id"]
  765 -> 110 [style=dashed label="placeholder-type-specifier"]
  765 -> 142 [style=dashed label="simple-template-id"]
  765 -> 116 [style=dashed label="simple-type-specifier"]
  765 -> 216 [style=dashed label="template-name"]
  765 -> 124 [style=dashed label="type-constraint"]
  765 -> 125 [style=dashed label="type-name"]
  765 -> 217 [style=dashed label="type-specifier"]
  765 -> 811 [style=dashed label="type-specifier-seq"]
  765 -> 127 [style=dashed label="typedef-name"]
  765 -> 128 [style=dashed label="typename-specifier"]
  766 [label="State 766\n\l470 init-capture: IDENTIFIER • initializer\l971 simple-capture: IDENTIFIER •\l972               | IDENTIFIER • \"...\"\l"]
  766 -> 1280 [style=solid label="'='"]
  766 -> 647 [style=solid label="'('"]
  766 -> 1281 [style=solid label="\"...\""]
  766 -> 939 [style=solid label="'{'"]
  766 -> 649 [style=dashed label="brace-or-equal-initializer"]
  766 -> 650 [style=dashed label="braced-init-list"]
  766 -> 1282 [style=dashed label="initializer"]
  766 -> "766R971" [style=solid]
 "766R971" [label="R971", fillcolor=3, shape=diamond, style=filled]
  767 [label="State 767\n\l121 capture-default: '=' •\l"]
  767 -> "767R121" [style=solid]
 "767R121" [label="R121", fillcolor=3, shape=diamond, style=filled]
  768 [label="State 768\n\l469 init-capture: \"...\" • IDENTIFIER initializer\l"]
  768 -> 1283 [style=solid label="IDENTIFIER"]
  769 [label="State 769\n\l120 capture-default: '&' •\l471 init-capture: '&' • IDENTIFIER initializer\l472             | '&' • \"...\" IDENTIFIER initializer\l973 simple-capture: '&' • IDENTIFIER\l974               | '&' • IDENTIFIER \"...\"\l"]
  769 -> 1284 [style=solid label="IDENTIFIER"]
  769 -> 1285 [style=solid label="\"...\""]
  769 -> "769R120" [style=solid]
 "769R120" [label="R120", fillcolor=3, shape=diamond, style=filled]
  770 [label="State 770\n\l538 lambda-introducer: '[' ']' •\l"]
  770 -> "770R538" [style=solid]
 "770R538" [label="R538", fillcolor=3, shape=diamond, style=filled]
  771 [label="State 771\n\l976 simple-capture: '*' • \"this\"\l"]
  771 -> 1286 [style=solid label="\"this\""]
  772 [label="State 772\n\l975 simple-capture: \"this\" •\l"]
  772 -> "772R975" [style=solid]
 "772R975" [label="R975", fillcolor=3, shape=diamond, style=filled]
  773 [label="State 773\n\l122 capture-list: capture •\l"]
  773 -> "773R122" [style=solid]
 "773R122" [label="R122", fillcolor=3, shape=diamond, style=filled]
  774 [label="State 774\n\l529 lambda-capture: capture-default •\l531               | capture-default • ',' capture-list\l"]
  774 -> 1287 [style=solid label="','"]
  774 -> "774R529" [style=solid]
 "774R529" [label="R529", fillcolor=3, shape=diamond, style=filled]
  775 [label="State 775\n\l123 capture-list: capture-list • ',' capture\l530 lambda-capture: capture-list •\l"]
  775 -> 1288 [style=solid label="','"]
  775 -> "775R530" [style=solid]
 "775R530" [label="R530", fillcolor=3, shape=diamond, style=filled]
  776 [label="State 776\n\l119 capture: init-capture •\l"]
  776 -> "776R119" [style=solid]
 "776R119" [label="R119", fillcolor=3, shape=diamond, style=filled]
  777 [label="State 777\n\l539 lambda-introducer: '[' lambda-capture • ']'\l"]
  777 -> 1289 [style=solid label="']'"]
  778 [label="State 778\n\l118 capture: simple-capture •\l"]
  778 -> "778R118" [style=solid]
 "778R118" [label="R118", fillcolor=3, shape=diamond, style=filled]
  779 [label="State 779\n\l 58 await-expression: \"co_await\" cast-expression •\l"]
  779 -> "779R58" [style=solid]
 "779R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  780 [label="State 780\n\l 85 binary-digit: '0' •\l"]
  780 -> "780R85" [style=solid]
 "780R85" [label="R85", fillcolor=3, shape=diamond, style=filled]
  781 [label="State 781\n\l 86 binary-digit: '1' •\l"]
  781 -> "781R86" [style=solid]
 "781R86" [label="R86", fillcolor=3, shape=diamond, style=filled]
  782 [label="State 782\n\l 91 binary-literal: \"0b\" binary-digit •\l"]
  782 -> "782R91" [style=solid]
 "782R91" [label="R91", fillcolor=3, shape=diamond, style=filled]
  783 [label="State 783\n\l 92 binary-literal: \"0B\" binary-digit •\l"]
  783 -> "783R92" [style=solid]
 "783R92" [label="R92", fillcolor=3, shape=diamond, style=filled]
  784 [label="State 784\n\l 83 basic-c-char: EXCEPT_THE_APOSTROPHE_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER •\l"]
  784 -> "784R83" [style=solid]
 "784R83" [label="R83", fillcolor=3, shape=diamond, style=filled]
  785 [label="State 785\n\l113 c-char: basic-c-char •\l"]
  785 -> "785R113" [style=solid]
 "785R113" [label="R113", fillcolor=3, shape=diamond, style=filled]
  786 [label="State 786\n\l116 c-char-sequence: c-char •\l"]
  786 -> "786R116" [style=solid]
 "786R116" [label="R116", fillcolor=3, shape=diamond, style=filled]
  787 [label="State 787\n\l117 c-char-sequence: c-char-sequence • c-char\l127 character-literal: '\\'' c-char-sequence • '\\''\l"]
  787 -> 784 [style=solid label="EXCEPT_THE_APOSTROPHE_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER"]
  787 -> 1290 [style=solid label="'\\''"]
  787 -> 491 [style=solid label="'\\\\'"]
  787 -> 493 [style=solid label="\"\\\\x\""]
  787 -> 494 [style=solid label="\"\\\\u\""]
  787 -> 495 [style=solid label="\"\\\\U\""]
  787 -> 785 [style=dashed label="basic-c-char"]
  787 -> 1291 [style=dashed label="c-char"]
  787 -> 497 [style=dashed label="conditional-escape-sequence"]
  787 -> 788 [style=dashed label="escape-sequence"]
  787 -> 499 [style=dashed label="hexadecimal-escape-sequence"]
  787 -> 500 [style=dashed label="numeric-escape-sequence"]
  787 -> 501 [style=dashed label="octal-escape-sequence"]
  787 -> 504 [style=dashed label="simple-escape-sequence"]
  787 -> 789 [style=dashed label="universal-character-name"]
  788 [label="State 788\n\l114 c-char: escape-sequence •\l"]
  788 -> "788R114" [style=solid]
 "788R114" [label="R114", fillcolor=3, shape=diamond, style=filled]
  789 [label="State 789\n\l115 c-char: universal-character-name •\l"]
  789 -> "789R115" [style=solid]
 "789R115" [label="R115", fillcolor=3, shape=diamond, style=filled]
  790 [label="State 790\n\l696 noexcept-expression: \"noexcept\" '(' • expression ')'\l"]
  790 -> 1 [style=solid label="IDENTIFIER"]
  790 -> 361 [style=solid label="'+'"]
  790 -> 362 [style=solid label="'-'"]
  790 -> 363 [style=solid label="'('"]
  790 -> 364 [style=solid label="'&'"]
  790 -> 365 [style=solid label="\"::\""]
  790 -> 366 [style=solid label="'['"]
  790 -> 367 [style=solid label="\"co_await\""]
  790 -> 368 [style=solid label="'0'"]
  790 -> 369 [style=solid label="'1'"]
  790 -> 370 [style=solid label="\"0b\""]
  790 -> 371 [style=solid label="\"0B\""]
  790 -> 372 [style=solid label="'\\''"]
  790 -> 373 [style=solid label="\"false\""]
  790 -> 374 [style=solid label="\"true\""]
  790 -> 375 [style=solid label="\"noexcept\""]
  790 -> 17 [style=solid label="\"operator\""]
  790 -> 26 [style=solid label="\"decltype\""]
  790 -> 376 [style=solid label="\"delete\""]
  790 -> 377 [style=solid label="'.'"]
  790 -> 378 [style=solid label="'2'"]
  790 -> 379 [style=solid label="'3'"]
  790 -> 380 [style=solid label="'4'"]
  790 -> 381 [style=solid label="'5'"]
  790 -> 382 [style=solid label="'6'"]
  790 -> 383 [style=solid label="'7'"]
  790 -> 384 [style=solid label="'8'"]
  790 -> 385 [style=solid label="'9'"]
  790 -> 185 [style=solid label="\"u8\""]
  790 -> 186 [style=solid label="'u'"]
  790 -> 187 [style=solid label="'U'"]
  790 -> 188 [style=solid label="'L'"]
  790 -> 386 [style=solid label="'*'"]
  790 -> 203 [style=solid label="'\"'"]
  790 -> 387 [style=solid label="\"0x\""]
  790 -> 388 [style=solid label="\"0X\""]
  790 -> 389 [style=solid label="\"requires\""]
  790 -> 390 [style=solid label="\"new\""]
  790 -> 391 [style=solid label="'~'"]
  790 -> 392 [style=solid label="'!'"]
  790 -> 393 [style=solid label="\"++\""]
  790 -> 394 [style=solid label="\"--\""]
  790 -> 395 [style=solid label="\"this\""]
  790 -> 37 [style=solid label="\"auto\""]
  790 -> 396 [style=solid label="\"nullptr\""]
  790 -> 397 [style=solid label="\"dynamic_cast\""]
  790 -> 398 [style=solid label="\"static_cast\""]
  790 -> 399 [style=solid label="\"reinterpret_cast\""]
  790 -> 400 [style=solid label="\"const_cast\""]
  790 -> 401 [style=solid label="\"typeid\""]
  790 -> 38 [style=solid label="\"char\""]
  790 -> 39 [style=solid label="\"char8_t\""]
  790 -> 40 [style=solid label="\"char16_t\""]
  790 -> 41 [style=solid label="\"char32_t\""]
  790 -> 42 [style=solid label="\"wchar_t\""]
  790 -> 43 [style=solid label="\"bool\""]
  790 -> 44 [style=solid label="\"short\""]
  790 -> 45 [style=solid label="\"int\""]
  790 -> 46 [style=solid label="\"long\""]
  790 -> 47 [style=solid label="\"signed\""]
  790 -> 48 [style=solid label="\"unsigned\""]
  790 -> 49 [style=solid label="\"float\""]
  790 -> 50 [style=solid label="\"double\""]
  790 -> 51 [style=solid label="\"void\""]
  790 -> 209 [style=solid label="'R'"]
  790 -> 528 [style=solid label="\"throw\""]
  790 -> 56 [style=solid label="\"typename\""]
  790 -> 402 [style=solid label="\"sizeof\""]
  790 -> 403 [style=solid label="\"alignof\""]
  790 -> 529 [style=solid label="\"co_yield\""]
  790 -> 404 [style=dashed label="additive-expression"]
  790 -> 405 [style=dashed label="and-expression"]
  790 -> 530 [style=dashed label="assignment-expression"]
  790 -> 406 [style=dashed label="await-expression"]
  790 -> 407 [style=dashed label="binary-literal"]
  790 -> 408 [style=dashed label="boolean-literal"]
  790 -> 409 [style=dashed label="cast-expression"]
  790 -> 410 [style=dashed label="character-literal"]
  790 -> 66 [style=dashed label="class-name"]
  790 -> 411 [style=dashed label="compare-expression"]
  790 -> 68 [style=dashed label="concept-name"]
  790 -> 531 [style=dashed label="conditional-expression"]
  790 -> 69 [style=dashed label="conversion-function-id"]
  790 -> 414 [style=dashed label="decimal-floating-point-literal"]
  790 -> 415 [style=dashed label="decimal-literal"]
  790 -> 77 [style=dashed label="decltype-specifier"]
  790 -> 416 [style=dashed label="delete-expression"]
  790 -> 417 [style=dashed label="digit"]
  790 -> 418 [style=dashed label="digit-sequence"]
  790 -> 419 [style=dashed label="encoding-prefix"]
  790 -> 85 [style=dashed label="enum-name"]
  790 -> 420 [style=dashed label="equality-expression"]
  790 -> 421 [style=dashed label="exclusive-or-expression"]
  790 -> 1292 [style=dashed label="expression"]
  790 -> 422 [style=dashed label="floating-point-literal"]
  790 -> 423 [style=dashed label="fold-expression"]
  790 -> 424 [style=dashed label="fractional-constant"]
  790 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  790 -> 426 [style=dashed label="hexadecimal-literal"]
  790 -> 427 [style=dashed label="hexadecimal-prefix"]
  790 -> 428 [style=dashed label="id-expression"]
  790 -> 429 [style=dashed label="inclusive-or-expression"]
  790 -> 430 [style=dashed label="integer-literal"]
  790 -> 431 [style=dashed label="lambda-expression"]
  790 -> 432 [style=dashed label="lambda-introducer"]
  790 -> 433 [style=dashed label="literal"]
  790 -> 96 [style=dashed label="literal-operator-id"]
  790 -> 434 [style=dashed label="logical-and-expression"]
  790 -> 533 [style=dashed label="logical-or-expression"]
  790 -> 436 [style=dashed label="multiplicative-expression"]
  790 -> 100 [style=dashed label="namespace-alias"]
  790 -> 103 [style=dashed label="namespace-name"]
  790 -> 437 [style=dashed label="nested-name-specifier"]
  790 -> 438 [style=dashed label="new-expression"]
  790 -> 439 [style=dashed label="noexcept-expression"]
  790 -> 440 [style=dashed label="nonzero-digit"]
  790 -> 441 [style=dashed label="octal-literal"]
  790 -> 109 [style=dashed label="operator-function-id"]
  790 -> 110 [style=dashed label="placeholder-type-specifier"]
  790 -> 442 [style=dashed label="pm-expression"]
  790 -> 443 [style=dashed label="pointer-literal"]
  790 -> 444 [style=dashed label="postfix-expression"]
  790 -> 445 [style=dashed label="primary-expression"]
  790 -> 113 [style=dashed label="qualified-id"]
  790 -> 446 [style=dashed label="relational-expression"]
  790 -> 447 [style=dashed label="requires-expression"]
  790 -> 448 [style=dashed label="shift-expression"]
  790 -> 115 [style=dashed label="simple-template-id"]
  790 -> 534 [style=dashed label="simple-type-specifier"]
  790 -> 450 [style=dashed label="string-literal"]
  790 -> 121 [style=dashed label="template-id"]
  790 -> 216 [style=dashed label="template-name"]
  790 -> 535 [style=dashed label="throw-expression"]
  790 -> 124 [style=dashed label="type-constraint"]
  790 -> 125 [style=dashed label="type-name"]
  790 -> 127 [style=dashed label="typedef-name"]
  790 -> 536 [style=dashed label="typename-specifier"]
  790 -> 454 [style=dashed label="unary-expression"]
  790 -> 455 [style=dashed label="unary-operator"]
  790 -> 130 [style=dashed label="unqualified-id"]
  790 -> 456 [style=dashed label="user-defined-character-literal"]
  790 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  790 -> 458 [style=dashed label="user-defined-integer-literal"]
  790 -> 459 [style=dashed label="user-defined-literal"]
  790 -> 460 [style=dashed label="user-defined-string-literal"]
  790 -> 537 [style=dashed label="yield-expression"]
  791 [label="State 791\n\l247 delete-expression: \"delete\" '[' • ']' cast-expression\l538 lambda-introducer: '[' • ']'\l539                  | '[' • lambda-capture ']'\l"]
  791 -> 766 [style=solid label="IDENTIFIER"]
  791 -> 767 [style=solid label="'='"]
  791 -> 768 [style=solid label="\"...\""]
  791 -> 769 [style=solid label="'&'"]
  791 -> 1293 [style=solid label="']'"]
  791 -> 771 [style=solid label="'*'"]
  791 -> 772 [style=solid label="\"this\""]
  791 -> 773 [style=dashed label="capture"]
  791 -> 774 [style=dashed label="capture-default"]
  791 -> 775 [style=dashed label="capture-list"]
  791 -> 776 [style=dashed label="init-capture"]
  791 -> 777 [style=dashed label="lambda-capture"]
  791 -> 778 [style=dashed label="simple-capture"]
  792 [label="State 792\n\l245 delete-expression: \"delete\" cast-expression •\l"]
  792 -> "792R245" [style=solid]
 "792R245" [label="R245", fillcolor=3, shape=diamond, style=filled]
  793 [label="State 793\n\l252 digit: '0' •\l"]
  793 -> "793R252" [style=solid]
 "793R252" [label="R252", fillcolor=3, shape=diamond, style=filled]
  794 [label="State 794\n\l253 digit: '1' •\l"]
  794 -> "794R253" [style=solid]
 "794R253" [label="R253", fillcolor=3, shape=diamond, style=filled]
  795 [label="State 795\n\l254 digit: '2' •\l"]
  795 -> "795R254" [style=solid]
 "795R254" [label="R254", fillcolor=3, shape=diamond, style=filled]
  796 [label="State 796\n\l255 digit: '3' •\l"]
  796 -> "796R255" [style=solid]
 "796R255" [label="R255", fillcolor=3, shape=diamond, style=filled]
  797 [label="State 797\n\l256 digit: '4' •\l"]
  797 -> "797R256" [style=solid]
 "797R256" [label="R256", fillcolor=3, shape=diamond, style=filled]
  798 [label="State 798\n\l257 digit: '5' •\l"]
  798 -> "798R257" [style=solid]
 "798R257" [label="R257", fillcolor=3, shape=diamond, style=filled]
  799 [label="State 799\n\l258 digit: '6' •\l"]
  799 -> "799R258" [style=solid]
 "799R258" [label="R258", fillcolor=3, shape=diamond, style=filled]
  800 [label="State 800\n\l259 digit: '7' •\l"]
  800 -> "800R259" [style=solid]
 "800R259" [label="R259", fillcolor=3, shape=diamond, style=filled]
  801 [label="State 801\n\l260 digit: '8' •\l"]
  801 -> "801R260" [style=solid]
 "801R260" [label="R260", fillcolor=3, shape=diamond, style=filled]
  802 [label="State 802\n\l261 digit: '9' •\l"]
  802 -> "802R261" [style=solid]
 "802R261" [label="R261", fillcolor=3, shape=diamond, style=filled]
  803 [label="State 803\n\l263 digit-sequence: digit-sequence • digit\l264               | digit-sequence • '\\'' digit\l391 fractional-constant: '.' digit-sequence •\l"]
  803 -> 793 [style=solid label="'0'"]
  803 -> 794 [style=solid label="'1'"]
  803 -> 851 [style=solid label="'\\''"]
  803 -> 795 [style=solid label="'2'"]
  803 -> 796 [style=solid label="'3'"]
  803 -> 797 [style=solid label="'4'"]
  803 -> 798 [style=solid label="'5'"]
  803 -> 799 [style=solid label="'6'"]
  803 -> 800 [style=solid label="'7'"]
  803 -> 801 [style=solid label="'8'"]
  803 -> 802 [style=solid label="'9'"]
  803 -> 855 [style=dashed label="digit"]
  803 -> "803R391" [style=solid]
 "803R391" [label="R391", fillcolor=3, shape=diamond, style=filled]
  804 [label="State 804\n\l940 requirement-parameter-list: '(' • parameter-declaration-clause ')'\l"]
  804 -> 161 [style=solid label="IDENTIFIER"]
  804 -> 4 [style=solid label="\"alignas\""]
  804 -> 734 [style=solid label="\"...\""]
  804 -> 9 [style=solid label="\"::\""]
  804 -> 10 [style=solid label="'['"]
  804 -> 11 [style=solid label="\"virtual\""]
  804 -> 12 [style=solid label="\"class\""]
  804 -> 13 [style=solid label="\"struct\""]
  804 -> 14 [style=solid label="\"union\""]
  804 -> 18 [style=solid label="\"const\""]
  804 -> 19 [style=solid label="\"volatile\""]
  804 -> 20 [style=solid label="\"friend\""]
  804 -> 21 [style=solid label="\"typedef\""]
  804 -> 22 [style=solid label="\"constexpr\""]
  804 -> 23 [style=solid label="\"consteval\""]
  804 -> 24 [style=solid label="\"constinit\""]
  804 -> 263 [style=solid label="\"inline\""]
  804 -> 26 [style=solid label="\"decltype\""]
  804 -> 27 [style=solid label="\"enum\""]
  804 -> 264 [style=solid label="\"extern\""]
  804 -> 29 [style=solid label="\"explicit\""]
  804 -> 476 [style=solid label="\"this\""]
  804 -> 37 [style=solid label="\"auto\""]
  804 -> 38 [style=solid label="\"char\""]
  804 -> 39 [style=solid label="\"char8_t\""]
  804 -> 40 [style=solid label="\"char16_t\""]
  804 -> 41 [style=solid label="\"char32_t\""]
  804 -> 42 [style=solid label="\"wchar_t\""]
  804 -> 43 [style=solid label="\"bool\""]
  804 -> 44 [style=solid label="\"short\""]
  804 -> 45 [style=solid label="\"int\""]
  804 -> 46 [style=solid label="\"long\""]
  804 -> 47 [style=solid label="\"signed\""]
  804 -> 48 [style=solid label="\"unsigned\""]
  804 -> 49 [style=solid label="\"float\""]
  804 -> 50 [style=solid label="\"double\""]
  804 -> 51 [style=solid label="\"void\""]
  804 -> 53 [style=solid label="\"static\""]
  804 -> 54 [style=solid label="\"thread_local\""]
  804 -> 55 [style=solid label="\"mutable\""]
  804 -> 56 [style=solid label="\"typename\""]
  804 -> 58 [style=dashed label="alignment-specifier"]
  804 -> 61 [style=dashed label="attribute-specifier"]
  804 -> 478 [style=dashed label="attribute-specifier-seq"]
  804 -> 64 [style=dashed label="class-head"]
  804 -> 65 [style=dashed label="class-key"]
  804 -> 66 [style=dashed label="class-name"]
  804 -> 67 [style=dashed label="class-specifier"]
  804 -> 68 [style=dashed label="concept-name"]
  804 -> 70 [style=dashed label="cv-qualifier"]
  804 -> 71 [style=dashed label="decl-specifier"]
  804 -> 479 [style=dashed label="decl-specifier-seq"]
  804 -> 77 [style=dashed label="decltype-specifier"]
  804 -> 79 [style=dashed label="defining-type-specifier"]
  804 -> 80 [style=dashed label="elaborated-enum-specifier"]
  804 -> 81 [style=dashed label="elaborated-type-specifier"]
  804 -> 83 [style=dashed label="enum-head"]
  804 -> 268 [style=dashed label="enum-key"]
  804 -> 85 [style=dashed label="enum-name"]
  804 -> 86 [style=dashed label="enum-specifier"]
  804 -> 269 [style=dashed label="explicit-specifier"]
  804 -> 92 [style=dashed label="function-specifier"]
  804 -> 100 [style=dashed label="namespace-alias"]
  804 -> 103 [style=dashed label="namespace-name"]
  804 -> 213 [style=dashed label="nested-name-specifier"]
  804 -> 735 [style=dashed label="parameter-declaration"]
  804 -> 1294 [style=dashed label="parameter-declaration-clause"]
  804 -> 737 [style=dashed label="parameter-declaration-list"]
  804 -> 110 [style=dashed label="placeholder-type-specifier"]
  804 -> 142 [style=dashed label="simple-template-id"]
  804 -> 116 [style=dashed label="simple-type-specifier"]
  804 -> 118 [style=dashed label="storage-class-specifier"]
  804 -> 216 [style=dashed label="template-name"]
  804 -> 124 [style=dashed label="type-constraint"]
  804 -> 125 [style=dashed label="type-name"]
  804 -> 126 [style=dashed label="type-specifier"]
  804 -> 127 [style=dashed label="typedef-name"]
  804 -> 128 [style=dashed label="typename-specifier"]
  805 [label="State 805\n\l939 requirement-body: '{' • requirement-seq '}'\l"]
  805 -> 1 [style=solid label="IDENTIFIER"]
  805 -> 361 [style=solid label="'+'"]
  805 -> 362 [style=solid label="'-'"]
  805 -> 363 [style=solid label="'('"]
  805 -> 364 [style=solid label="'&'"]
  805 -> 365 [style=solid label="\"::\""]
  805 -> 366 [style=solid label="'['"]
  805 -> 367 [style=solid label="\"co_await\""]
  805 -> 1295 [style=solid label="'{'"]
  805 -> 368 [style=solid label="'0'"]
  805 -> 369 [style=solid label="'1'"]
  805 -> 370 [style=solid label="\"0b\""]
  805 -> 371 [style=solid label="\"0B\""]
  805 -> 372 [style=solid label="'\\''"]
  805 -> 373 [style=solid label="\"false\""]
  805 -> 374 [style=solid label="\"true\""]
  805 -> 375 [style=solid label="\"noexcept\""]
  805 -> 17 [style=solid label="\"operator\""]
  805 -> 26 [style=solid label="\"decltype\""]
  805 -> 376 [style=solid label="\"delete\""]
  805 -> 377 [style=solid label="'.'"]
  805 -> 378 [style=solid label="'2'"]
  805 -> 379 [style=solid label="'3'"]
  805 -> 380 [style=solid label="'4'"]
  805 -> 381 [style=solid label="'5'"]
  805 -> 382 [style=solid label="'6'"]
  805 -> 383 [style=solid label="'7'"]
  805 -> 384 [style=solid label="'8'"]
  805 -> 385 [style=solid label="'9'"]
  805 -> 185 [style=solid label="\"u8\""]
  805 -> 186 [style=solid label="'u'"]
  805 -> 187 [style=solid label="'U'"]
  805 -> 188 [style=solid label="'L'"]
  805 -> 386 [style=solid label="'*'"]
  805 -> 203 [style=solid label="'\"'"]
  805 -> 387 [style=solid label="\"0x\""]
  805 -> 388 [style=solid label="\"0X\""]
  805 -> 1296 [style=solid label="\"requires\""]
  805 -> 390 [style=solid label="\"new\""]
  805 -> 391 [style=solid label="'~'"]
  805 -> 392 [style=solid label="'!'"]
  805 -> 393 [style=solid label="\"++\""]
  805 -> 394 [style=solid label="\"--\""]
  805 -> 395 [style=solid label="\"this\""]
  805 -> 37 [style=solid label="\"auto\""]
  805 -> 396 [style=solid label="\"nullptr\""]
  805 -> 397 [style=solid label="\"dynamic_cast\""]
  805 -> 398 [style=solid label="\"static_cast\""]
  805 -> 399 [style=solid label="\"reinterpret_cast\""]
  805 -> 400 [style=solid label="\"const_cast\""]
  805 -> 401 [style=solid label="\"typeid\""]
  805 -> 38 [style=solid label="\"char\""]
  805 -> 39 [style=solid label="\"char8_t\""]
  805 -> 40 [style=solid label="\"char16_t\""]
  805 -> 41 [style=solid label="\"char32_t\""]
  805 -> 42 [style=solid label="\"wchar_t\""]
  805 -> 43 [style=solid label="\"bool\""]
  805 -> 44 [style=solid label="\"short\""]
  805 -> 45 [style=solid label="\"int\""]
  805 -> 46 [style=solid label="\"long\""]
  805 -> 47 [style=solid label="\"signed\""]
  805 -> 48 [style=solid label="\"unsigned\""]
  805 -> 49 [style=solid label="\"float\""]
  805 -> 50 [style=solid label="\"double\""]
  805 -> 51 [style=solid label="\"void\""]
  805 -> 209 [style=solid label="'R'"]
  805 -> 528 [style=solid label="\"throw\""]
  805 -> 1297 [style=solid label="\"typename\""]
  805 -> 402 [style=solid label="\"sizeof\""]
  805 -> 403 [style=solid label="\"alignof\""]
  805 -> 529 [style=solid label="\"co_yield\""]
  805 -> 404 [style=dashed label="additive-expression"]
  805 -> 405 [style=dashed label="and-expression"]
  805 -> 530 [style=dashed label="assignment-expression"]
  805 -> 406 [style=dashed label="await-expression"]
  805 -> 407 [style=dashed label="binary-literal"]
  805 -> 408 [style=dashed label="boolean-literal"]
  805 -> 409 [style=dashed label="cast-expression"]
  805 -> 410 [style=dashed label="character-literal"]
  805 -> 66 [style=dashed label="class-name"]
  805 -> 411 [style=dashed label="compare-expression"]
  805 -> 1298 [style=dashed label="compound-requirement"]
  805 -> 68 [style=dashed label="concept-name"]
  805 -> 531 [style=dashed label="conditional-expression"]
  805 -> 69 [style=dashed label="conversion-function-id"]
  805 -> 414 [style=dashed label="decimal-floating-point-literal"]
  805 -> 415 [style=dashed label="decimal-literal"]
  805 -> 77 [style=dashed label="decltype-specifier"]
  805 -> 416 [style=dashed label="delete-expression"]
  805 -> 417 [style=dashed label="digit"]
  805 -> 418 [style=dashed label="digit-sequence"]
  805 -> 419 [style=dashed label="encoding-prefix"]
  805 -> 85 [style=dashed label="enum-name"]
  805 -> 420 [style=dashed label="equality-expression"]
  805 -> 421 [style=dashed label="exclusive-or-expression"]
  805 -> 1299 [style=dashed label="expression"]
  805 -> 422 [style=dashed label="floating-point-literal"]
  805 -> 423 [style=dashed label="fold-expression"]
  805 -> 424 [style=dashed label="fractional-constant"]
  805 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  805 -> 426 [style=dashed label="hexadecimal-literal"]
  805 -> 427 [style=dashed label="hexadecimal-prefix"]
  805 -> 428 [style=dashed label="id-expression"]
  805 -> 429 [style=dashed label="inclusive-or-expression"]
  805 -> 430 [style=dashed label="integer-literal"]
  805 -> 431 [style=dashed label="lambda-expression"]
  805 -> 432 [style=dashed label="lambda-introducer"]
  805 -> 433 [style=dashed label="literal"]
  805 -> 96 [style=dashed label="literal-operator-id"]
  805 -> 434 [style=dashed label="logical-and-expression"]
  805 -> 533 [style=dashed label="logical-or-expression"]
  805 -> 436 [style=dashed label="multiplicative-expression"]
  805 -> 100 [style=dashed label="namespace-alias"]
  805 -> 103 [style=dashed label="namespace-name"]
  805 -> 437 [style=dashed label="nested-name-specifier"]
  805 -> 1300 [style=dashed label="nested-requirement"]
  805 -> 438 [style=dashed label="new-expression"]
  805 -> 439 [style=dashed label="noexcept-expression"]
  805 -> 440 [style=dashed label="nonzero-digit"]
  805 -> 441 [style=dashed label="octal-literal"]
  805 -> 109 [style=dashed label="operator-function-id"]
  805 -> 110 [style=dashed label="placeholder-type-specifier"]
  805 -> 442 [style=dashed label="pm-expression"]
  805 -> 443 [style=dashed label="pointer-literal"]
  805 -> 444 [style=dashed label="postfix-expression"]
  805 -> 445 [style=dashed label="primary-expression"]
  805 -> 113 [style=dashed label="qualified-id"]
  805 -> 446 [style=dashed label="relational-expression"]
  805 -> 1301 [style=dashed label="requirement"]
  805 -> 1302 [style=dashed label="requirement-seq"]
  805 -> 447 [style=dashed label="requires-expression"]
  805 -> 448 [style=dashed label="shift-expression"]
  805 -> 1303 [style=dashed label="simple-requirement"]
  805 -> 115 [style=dashed label="simple-template-id"]
  805 -> 534 [style=dashed label="simple-type-specifier"]
  805 -> 450 [style=dashed label="string-literal"]
  805 -> 121 [style=dashed label="template-id"]
  805 -> 216 [style=dashed label="template-name"]
  805 -> 535 [style=dashed label="throw-expression"]
  805 -> 124 [style=dashed label="type-constraint"]
  805 -> 125 [style=dashed label="type-name"]
  805 -> 1304 [style=dashed label="type-requirement"]
  805 -> 127 [style=dashed label="typedef-name"]
  805 -> 536 [style=dashed label="typename-specifier"]
  805 -> 454 [style=dashed label="unary-expression"]
  805 -> 455 [style=dashed label="unary-operator"]
  805 -> 130 [style=dashed label="unqualified-id"]
  805 -> 456 [style=dashed label="user-defined-character-literal"]
  805 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  805 -> 458 [style=dashed label="user-defined-integer-literal"]
  805 -> 459 [style=dashed label="user-defined-literal"]
  805 -> 460 [style=dashed label="user-defined-string-literal"]
  805 -> 537 [style=dashed label="yield-expression"]
  806 [label="State 806\n\l944 requires-expression: \"requires\" requirement-body •\l"]
  806 -> "806R944" [style=solid]
 "806R944" [label="R944", fillcolor=3, shape=diamond, style=filled]
  807 [label="State 807\n\l945 requires-expression: \"requires\" requirement-parameter-list • requirement-body\l"]
  807 -> 805 [style=solid label="'{'"]
  807 -> 1305 [style=dashed label="requirement-body"]
  808 [label="State 808\n\l681 new-expression: \"new\" '(' • type-id ')'\l685               | \"new\" '(' • type-id ')' new-initializer\l691 new-placement: '(' • expression-list ')'\l"]
  808 -> 1 [style=solid label="IDENTIFIER"]
  808 -> 361 [style=solid label="'+'"]
  808 -> 362 [style=solid label="'-'"]
  808 -> 363 [style=solid label="'('"]
  808 -> 364 [style=solid label="'&'"]
  808 -> 365 [style=solid label="\"::\""]
  808 -> 366 [style=solid label="'['"]
  808 -> 367 [style=solid label="\"co_await\""]
  808 -> 939 [style=solid label="'{'"]
  808 -> 368 [style=solid label="'0'"]
  808 -> 369 [style=solid label="'1'"]
  808 -> 370 [style=solid label="\"0b\""]
  808 -> 371 [style=solid label="\"0B\""]
  808 -> 372 [style=solid label="'\\''"]
  808 -> 373 [style=solid label="\"false\""]
  808 -> 374 [style=solid label="\"true\""]
  808 -> 12 [style=solid label="\"class\""]
  808 -> 13 [style=solid label="\"struct\""]
  808 -> 14 [style=solid label="\"union\""]
  808 -> 375 [style=solid label="\"noexcept\""]
  808 -> 17 [style=solid label="\"operator\""]
  808 -> 18 [style=solid label="\"const\""]
  808 -> 19 [style=solid label="\"volatile\""]
  808 -> 26 [style=solid label="\"decltype\""]
  808 -> 376 [style=solid label="\"delete\""]
  808 -> 377 [style=solid label="'.'"]
  808 -> 378 [style=solid label="'2'"]
  808 -> 379 [style=solid label="'3'"]
  808 -> 380 [style=solid label="'4'"]
  808 -> 381 [style=solid label="'5'"]
  808 -> 382 [style=solid label="'6'"]
  808 -> 383 [style=solid label="'7'"]
  808 -> 384 [style=solid label="'8'"]
  808 -> 385 [style=solid label="'9'"]
  808 -> 136 [style=solid label="\"enum\""]
  808 -> 185 [style=solid label="\"u8\""]
  808 -> 186 [style=solid label="'u'"]
  808 -> 187 [style=solid label="'U'"]
  808 -> 188 [style=solid label="'L'"]
  808 -> 386 [style=solid label="'*'"]
  808 -> 203 [style=solid label="'\"'"]
  808 -> 387 [style=solid label="\"0x\""]
  808 -> 388 [style=solid label="\"0X\""]
  808 -> 389 [style=solid label="\"requires\""]
  808 -> 390 [style=solid label="\"new\""]
  808 -> 391 [style=solid label="'~'"]
  808 -> 392 [style=solid label="'!'"]
  808 -> 393 [style=solid label="\"++\""]
  808 -> 394 [style=solid label="\"--\""]
  808 -> 395 [style=solid label="\"this\""]
  808 -> 37 [style=solid label="\"auto\""]
  808 -> 396 [style=solid label="\"nullptr\""]
  808 -> 397 [style=solid label="\"dynamic_cast\""]
  808 -> 398 [style=solid label="\"static_cast\""]
  808 -> 399 [style=solid label="\"reinterpret_cast\""]
  808 -> 400 [style=solid label="\"const_cast\""]
  808 -> 401 [style=solid label="\"typeid\""]
  808 -> 38 [style=solid label="\"char\""]
  808 -> 39 [style=solid label="\"char8_t\""]
  808 -> 40 [style=solid label="\"char16_t\""]
  808 -> 41 [style=solid label="\"char32_t\""]
  808 -> 42 [style=solid label="\"wchar_t\""]
  808 -> 43 [style=solid label="\"bool\""]
  808 -> 44 [style=solid label="\"short\""]
  808 -> 45 [style=solid label="\"int\""]
  808 -> 46 [style=solid label="\"long\""]
  808 -> 47 [style=solid label="\"signed\""]
  808 -> 48 [style=solid label="\"unsigned\""]
  808 -> 49 [style=solid label="\"float\""]
  808 -> 50 [style=solid label="\"double\""]
  808 -> 51 [style=solid label="\"void\""]
  808 -> 209 [style=solid label="'R'"]
  808 -> 528 [style=solid label="\"throw\""]
  808 -> 56 [style=solid label="\"typename\""]
  808 -> 402 [style=solid label="\"sizeof\""]
  808 -> 403 [style=solid label="\"alignof\""]
  808 -> 529 [style=solid label="\"co_yield\""]
  808 -> 404 [style=dashed label="additive-expression"]
  808 -> 405 [style=dashed label="and-expression"]
  808 -> 1141 [style=dashed label="assignment-expression"]
  808 -> 406 [style=dashed label="await-expression"]
  808 -> 407 [style=dashed label="binary-literal"]
  808 -> 408 [style=dashed label="boolean-literal"]
  808 -> 1142 [style=dashed label="braced-init-list"]
  808 -> 409 [style=dashed label="cast-expression"]
  808 -> 410 [style=dashed label="character-literal"]
  808 -> 210 [style=dashed label="class-key"]
  808 -> 66 [style=dashed label="class-name"]
  808 -> 411 [style=dashed label="compare-expression"]
  808 -> 68 [style=dashed label="concept-name"]
  808 -> 531 [style=dashed label="conditional-expression"]
  808 -> 69 [style=dashed label="conversion-function-id"]
  808 -> 70 [style=dashed label="cv-qualifier"]
  808 -> 414 [style=dashed label="decimal-floating-point-literal"]
  808 -> 415 [style=dashed label="decimal-literal"]
  808 -> 77 [style=dashed label="decltype-specifier"]
  808 -> 416 [style=dashed label="delete-expression"]
  808 -> 417 [style=dashed label="digit"]
  808 -> 418 [style=dashed label="digit-sequence"]
  808 -> 80 [style=dashed label="elaborated-enum-specifier"]
  808 -> 81 [style=dashed label="elaborated-type-specifier"]
  808 -> 419 [style=dashed label="encoding-prefix"]
  808 -> 85 [style=dashed label="enum-name"]
  808 -> 420 [style=dashed label="equality-expression"]
  808 -> 421 [style=dashed label="exclusive-or-expression"]
  808 -> 1306 [style=dashed label="expression-list"]
  808 -> 422 [style=dashed label="floating-point-literal"]
  808 -> 423 [style=dashed label="fold-expression"]
  808 -> 424 [style=dashed label="fractional-constant"]
  808 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  808 -> 426 [style=dashed label="hexadecimal-literal"]
  808 -> 427 [style=dashed label="hexadecimal-prefix"]
  808 -> 428 [style=dashed label="id-expression"]
  808 -> 429 [style=dashed label="inclusive-or-expression"]
  808 -> 1145 [style=dashed label="initializer-clause"]
  808 -> 1146 [style=dashed label="initializer-list"]
  808 -> 430 [style=dashed label="integer-literal"]
  808 -> 431 [style=dashed label="lambda-expression"]
  808 -> 432 [style=dashed label="lambda-introducer"]
  808 -> 433 [style=dashed label="literal"]
  808 -> 96 [style=dashed label="literal-operator-id"]
  808 -> 434 [style=dashed label="logical-and-expression"]
  808 -> 533 [style=dashed label="logical-or-expression"]
  808 -> 436 [style=dashed label="multiplicative-expression"]
  808 -> 100 [style=dashed label="namespace-alias"]
  808 -> 103 [style=dashed label="namespace-name"]
  808 -> 437 [style=dashed label="nested-name-specifier"]
  808 -> 438 [style=dashed label="new-expression"]
  808 -> 439 [style=dashed label="noexcept-expression"]
  808 -> 440 [style=dashed label="nonzero-digit"]
  808 -> 441 [style=dashed label="octal-literal"]
  808 -> 109 [style=dashed label="operator-function-id"]
  808 -> 110 [style=dashed label="placeholder-type-specifier"]
  808 -> 442 [style=dashed label="pm-expression"]
  808 -> 443 [style=dashed label="pointer-literal"]
  808 -> 444 [style=dashed label="postfix-expression"]
  808 -> 445 [style=dashed label="primary-expression"]
  808 -> 113 [style=dashed label="qualified-id"]
  808 -> 446 [style=dashed label="relational-expression"]
  808 -> 447 [style=dashed label="requires-expression"]
  808 -> 448 [style=dashed label="shift-expression"]
  808 -> 115 [style=dashed label="simple-template-id"]
  808 -> 449 [style=dashed label="simple-type-specifier"]
  808 -> 450 [style=dashed label="string-literal"]
  808 -> 121 [style=dashed label="template-id"]
  808 -> 216 [style=dashed label="template-name"]
  808 -> 535 [style=dashed label="throw-expression"]
  808 -> 124 [style=dashed label="type-constraint"]
  808 -> 1307 [style=dashed label="type-id"]
  808 -> 125 [style=dashed label="type-name"]
  808 -> 217 [style=dashed label="type-specifier"]
  808 -> 452 [style=dashed label="type-specifier-seq"]
  808 -> 127 [style=dashed label="typedef-name"]
  808 -> 453 [style=dashed label="typename-specifier"]
  808 -> 454 [style=dashed label="unary-expression"]
  808 -> 455 [style=dashed label="unary-operator"]
  808 -> 130 [style=dashed label="unqualified-id"]
  808 -> 456 [style=dashed label="user-defined-character-literal"]
  808 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  808 -> 458 [style=dashed label="user-defined-integer-literal"]
  808 -> 459 [style=dashed label="user-defined-literal"]
  808 -> 460 [style=dashed label="user-defined-string-literal"]
  808 -> 537 [style=dashed label="yield-expression"]
  809 [label="State 809\n\l675 new-expression: \"new\" new-placement • new-type-id\l679               | \"new\" new-placement • new-type-id new-initializer\l683               | \"new\" new-placement • '(' type-id ')'\l687               | \"new\" new-placement • '(' type-id ')' new-initializer\l"]
  809 -> 161 [style=solid label="IDENTIFIER"]
  809 -> 1308 [style=solid label="'('"]
  809 -> 9 [style=solid label="\"::\""]
  809 -> 12 [style=solid label="\"class\""]
  809 -> 13 [style=solid label="\"struct\""]
  809 -> 14 [style=solid label="\"union\""]
  809 -> 18 [style=solid label="\"const\""]
  809 -> 19 [style=solid label="\"volatile\""]
  809 -> 26 [style=solid label="\"decltype\""]
  809 -> 136 [style=solid label="\"enum\""]
  809 -> 37 [style=solid label="\"auto\""]
  809 -> 38 [style=solid label="\"char\""]
  809 -> 39 [style=solid label="\"char8_t\""]
  809 -> 40 [style=solid label="\"char16_t\""]
  809 -> 41 [style=solid label="\"char32_t\""]
  809 -> 42 [style=solid label="\"wchar_t\""]
  809 -> 43 [style=solid label="\"bool\""]
  809 -> 44 [style=solid label="\"short\""]
  809 -> 45 [style=solid label="\"int\""]
  809 -> 46 [style=solid label="\"long\""]
  809 -> 47 [style=solid label="\"signed\""]
  809 -> 48 [style=solid label="\"unsigned\""]
  809 -> 49 [style=solid label="\"float\""]
  809 -> 50 [style=solid label="\"double\""]
  809 -> 51 [style=solid label="\"void\""]
  809 -> 56 [style=solid label="\"typename\""]
  809 -> 210 [style=dashed label="class-key"]
  809 -> 66 [style=dashed label="class-name"]
  809 -> 68 [style=dashed label="concept-name"]
  809 -> 70 [style=dashed label="cv-qualifier"]
  809 -> 77 [style=dashed label="decltype-specifier"]
  809 -> 80 [style=dashed label="elaborated-enum-specifier"]
  809 -> 81 [style=dashed label="elaborated-type-specifier"]
  809 -> 85 [style=dashed label="enum-name"]
  809 -> 100 [style=dashed label="namespace-alias"]
  809 -> 103 [style=dashed label="namespace-name"]
  809 -> 213 [style=dashed label="nested-name-specifier"]
  809 -> 1309 [style=dashed label="new-type-id"]
  809 -> 110 [style=dashed label="placeholder-type-specifier"]
  809 -> 142 [style=dashed label="simple-template-id"]
  809 -> 116 [style=dashed label="simple-type-specifier"]
  809 -> 216 [style=dashed label="template-name"]
  809 -> 124 [style=dashed label="type-constraint"]
  809 -> 125 [style=dashed label="type-name"]
  809 -> 217 [style=dashed label="type-specifier"]
  809 -> 811 [style=dashed label="type-specifier-seq"]
  809 -> 127 [style=dashed label="typedef-name"]
  809 -> 128 [style=dashed label="typename-specifier"]
  810 [label="State 810\n\l673 new-expression: \"new\" new-type-id •\l677               | \"new\" new-type-id • new-initializer\l"]
  810 -> 1310 [style=solid label="'('"]
  810 -> 939 [style=solid label="'{'"]
  810 -> 1311 [style=dashed label="braced-init-list"]
  810 -> 1312 [style=dashed label="new-initializer"]
  810 -> "810R673d" [label="['{']", style=solid]
 "810R673d" [label="R673", fillcolor=5, shape=diamond, style=filled]
  810 -> "810R673" [style=solid]
 "810R673" [label="R673", fillcolor=3, shape=diamond, style=filled]
  811 [label="State 811\n\l692 new-type-id: type-specifier-seq •\l693            | type-specifier-seq • new-declarator\l"]
  811 -> 258 [style=solid label="IDENTIFIER"]
  811 -> 7 [style=solid label="'&'"]
  811 -> 9 [style=solid label="\"::\""]
  811 -> 1313 [style=solid label="'['"]
  811 -> 16 [style=solid label="\"&&\""]
  811 -> 135 [style=solid label="\"decltype\""]
  811 -> 32 [style=solid label="'*'"]
  811 -> 66 [style=dashed label="class-name"]
  811 -> 139 [style=dashed label="decltype-specifier"]
  811 -> 85 [style=dashed label="enum-name"]
  811 -> 100 [style=dashed label="namespace-alias"]
  811 -> 103 [style=dashed label="namespace-name"]
  811 -> 522 [style=dashed label="nested-name-specifier"]
  811 -> 1314 [style=dashed label="new-declarator"]
  811 -> 1315 [style=dashed label="noptr-new-declarator"]
  811 -> 1316 [style=dashed label="ptr-operator"]
  811 -> 142 [style=dashed label="simple-template-id"]
  811 -> 143 [style=dashed label="template-name"]
  811 -> 144 [style=dashed label="type-name"]
  811 -> 127 [style=dashed label="typedef-name"]
  811 -> "811R692d" [label="['&', \"&&\", '*']", style=solid]
 "811R692d" [label="R692", fillcolor=5, shape=diamond, style=filled]
  811 -> "811R692" [style=solid]
 "811R692" [label="R692", fillcolor=3, shape=diamond, style=filled]
  812 [label="State 812\n\l1132 unary-expression: \"++\" cast-expression •\l"]
  812 -> "812R1132" [style=solid]
 "812R1132" [label="R1132", fillcolor=3, shape=diamond, style=filled]
  813 [label="State 813\n\l1133 unary-expression: \"--\" cast-expression •\l"]
  813 -> "813R1133" [style=solid]
 "813R1133" [label="R1133", fillcolor=3, shape=diamond, style=filled]
  814 [label="State 814\n\l877 postfix-expression: \"dynamic_cast\" '<' • type-id '>' '(' expression ')'\l"]
  814 -> 161 [style=solid label="IDENTIFIER"]
  814 -> 9 [style=solid label="\"::\""]
  814 -> 12 [style=solid label="\"class\""]
  814 -> 13 [style=solid label="\"struct\""]
  814 -> 14 [style=solid label="\"union\""]
  814 -> 18 [style=solid label="\"const\""]
  814 -> 19 [style=solid label="\"volatile\""]
  814 -> 26 [style=solid label="\"decltype\""]
  814 -> 136 [style=solid label="\"enum\""]
  814 -> 37 [style=solid label="\"auto\""]
  814 -> 38 [style=solid label="\"char\""]
  814 -> 39 [style=solid label="\"char8_t\""]
  814 -> 40 [style=solid label="\"char16_t\""]
  814 -> 41 [style=solid label="\"char32_t\""]
  814 -> 42 [style=solid label="\"wchar_t\""]
  814 -> 43 [style=solid label="\"bool\""]
  814 -> 44 [style=solid label="\"short\""]
  814 -> 45 [style=solid label="\"int\""]
  814 -> 46 [style=solid label="\"long\""]
  814 -> 47 [style=solid label="\"signed\""]
  814 -> 48 [style=solid label="\"unsigned\""]
  814 -> 49 [style=solid label="\"float\""]
  814 -> 50 [style=solid label="\"double\""]
  814 -> 51 [style=solid label="\"void\""]
  814 -> 56 [style=solid label="\"typename\""]
  814 -> 210 [style=dashed label="class-key"]
  814 -> 66 [style=dashed label="class-name"]
  814 -> 68 [style=dashed label="concept-name"]
  814 -> 70 [style=dashed label="cv-qualifier"]
  814 -> 77 [style=dashed label="decltype-specifier"]
  814 -> 80 [style=dashed label="elaborated-enum-specifier"]
  814 -> 81 [style=dashed label="elaborated-type-specifier"]
  814 -> 85 [style=dashed label="enum-name"]
  814 -> 100 [style=dashed label="namespace-alias"]
  814 -> 103 [style=dashed label="namespace-name"]
  814 -> 213 [style=dashed label="nested-name-specifier"]
  814 -> 110 [style=dashed label="placeholder-type-specifier"]
  814 -> 142 [style=dashed label="simple-template-id"]
  814 -> 116 [style=dashed label="simple-type-specifier"]
  814 -> 216 [style=dashed label="template-name"]
  814 -> 124 [style=dashed label="type-constraint"]
  814 -> 1317 [style=dashed label="type-id"]
  814 -> 125 [style=dashed label="type-name"]
  814 -> 217 [style=dashed label="type-specifier"]
  814 -> 452 [style=dashed label="type-specifier-seq"]
  814 -> 127 [style=dashed label="typedef-name"]
  814 -> 128 [style=dashed label="typename-specifier"]
  815 [label="State 815\n\l878 postfix-expression: \"static_cast\" '<' • type-id '>' '(' expression ')'\l"]
  815 -> 161 [style=solid label="IDENTIFIER"]
  815 -> 9 [style=solid label="\"::\""]
  815 -> 12 [style=solid label="\"class\""]
  815 -> 13 [style=solid label="\"struct\""]
  815 -> 14 [style=solid label="\"union\""]
  815 -> 18 [style=solid label="\"const\""]
  815 -> 19 [style=solid label="\"volatile\""]
  815 -> 26 [style=solid label="\"decltype\""]
  815 -> 136 [style=solid label="\"enum\""]
  815 -> 37 [style=solid label="\"auto\""]
  815 -> 38 [style=solid label="\"char\""]
  815 -> 39 [style=solid label="\"char8_t\""]
  815 -> 40 [style=solid label="\"char16_t\""]
  815 -> 41 [style=solid label="\"char32_t\""]
  815 -> 42 [style=solid label="\"wchar_t\""]
  815 -> 43 [style=solid label="\"bool\""]
  815 -> 44 [style=solid label="\"short\""]
  815 -> 45 [style=solid label="\"int\""]
  815 -> 46 [style=solid label="\"long\""]
  815 -> 47 [style=solid label="\"signed\""]
  815 -> 48 [style=solid label="\"unsigned\""]
  815 -> 49 [style=solid label="\"float\""]
  815 -> 50 [style=solid label="\"double\""]
  815 -> 51 [style=solid label="\"void\""]
  815 -> 56 [style=solid label="\"typename\""]
  815 -> 210 [style=dashed label="class-key"]
  815 -> 66 [style=dashed label="class-name"]
  815 -> 68 [style=dashed label="concept-name"]
  815 -> 70 [style=dashed label="cv-qualifier"]
  815 -> 77 [style=dashed label="decltype-specifier"]
  815 -> 80 [style=dashed label="elaborated-enum-specifier"]
  815 -> 81 [style=dashed label="elaborated-type-specifier"]
  815 -> 85 [style=dashed label="enum-name"]
  815 -> 100 [style=dashed label="namespace-alias"]
  815 -> 103 [style=dashed label="namespace-name"]
  815 -> 213 [style=dashed label="nested-name-specifier"]
  815 -> 110 [style=dashed label="placeholder-type-specifier"]
  815 -> 142 [style=dashed label="simple-template-id"]
  815 -> 116 [style=dashed label="simple-type-specifier"]
  815 -> 216 [style=dashed label="template-name"]
  815 -> 124 [style=dashed label="type-constraint"]
  815 -> 1318 [style=dashed label="type-id"]
  815 -> 125 [style=dashed label="type-name"]
  815 -> 217 [style=dashed label="type-specifier"]
  815 -> 452 [style=dashed label="type-specifier-seq"]
  815 -> 127 [style=dashed label="typedef-name"]
  815 -> 128 [style=dashed label="typename-specifier"]
  816 [label="State 816\n\l879 postfix-expression: \"reinterpret_cast\" '<' • type-id '>' '(' expression ')'\l"]
  816 -> 161 [style=solid label="IDENTIFIER"]
  816 -> 9 [style=solid label="\"::\""]
  816 -> 12 [style=solid label="\"class\""]
  816 -> 13 [style=solid label="\"struct\""]
  816 -> 14 [style=solid label="\"union\""]
  816 -> 18 [style=solid label="\"const\""]
  816 -> 19 [style=solid label="\"volatile\""]
  816 -> 26 [style=solid label="\"decltype\""]
  816 -> 136 [style=solid label="\"enum\""]
  816 -> 37 [style=solid label="\"auto\""]
  816 -> 38 [style=solid label="\"char\""]
  816 -> 39 [style=solid label="\"char8_t\""]
  816 -> 40 [style=solid label="\"char16_t\""]
  816 -> 41 [style=solid label="\"char32_t\""]
  816 -> 42 [style=solid label="\"wchar_t\""]
  816 -> 43 [style=solid label="\"bool\""]
  816 -> 44 [style=solid label="\"short\""]
  816 -> 45 [style=solid label="\"int\""]
  816 -> 46 [style=solid label="\"long\""]
  816 -> 47 [style=solid label="\"signed\""]
  816 -> 48 [style=solid label="\"unsigned\""]
  816 -> 49 [style=solid label="\"float\""]
  816 -> 50 [style=solid label="\"double\""]
  816 -> 51 [style=solid label="\"void\""]
  816 -> 56 [style=solid label="\"typename\""]
  816 -> 210 [style=dashed label="class-key"]
  816 -> 66 [style=dashed label="class-name"]
  816 -> 68 [style=dashed label="concept-name"]
  816 -> 70 [style=dashed label="cv-qualifier"]
  816 -> 77 [style=dashed label="decltype-specifier"]
  816 -> 80 [style=dashed label="elaborated-enum-specifier"]
  816 -> 81 [style=dashed label="elaborated-type-specifier"]
  816 -> 85 [style=dashed label="enum-name"]
  816 -> 100 [style=dashed label="namespace-alias"]
  816 -> 103 [style=dashed label="namespace-name"]
  816 -> 213 [style=dashed label="nested-name-specifier"]
  816 -> 110 [style=dashed label="placeholder-type-specifier"]
  816 -> 142 [style=dashed label="simple-template-id"]
  816 -> 116 [style=dashed label="simple-type-specifier"]
  816 -> 216 [style=dashed label="template-name"]
  816 -> 124 [style=dashed label="type-constraint"]
  816 -> 1319 [style=dashed label="type-id"]
  816 -> 125 [style=dashed label="type-name"]
  816 -> 217 [style=dashed label="type-specifier"]
  816 -> 452 [style=dashed label="type-specifier-seq"]
  816 -> 127 [style=dashed label="typedef-name"]
  816 -> 128 [style=dashed label="typename-specifier"]
  817 [label="State 817\n\l880 postfix-expression: \"const_cast\" '<' • type-id '>' '(' expression ')'\l"]
  817 -> 161 [style=solid label="IDENTIFIER"]
  817 -> 9 [style=solid label="\"::\""]
  817 -> 12 [style=solid label="\"class\""]
  817 -> 13 [style=solid label="\"struct\""]
  817 -> 14 [style=solid label="\"union\""]
  817 -> 18 [style=solid label="\"const\""]
  817 -> 19 [style=solid label="\"volatile\""]
  817 -> 26 [style=solid label="\"decltype\""]
  817 -> 136 [style=solid label="\"enum\""]
  817 -> 37 [style=solid label="\"auto\""]
  817 -> 38 [style=solid label="\"char\""]
  817 -> 39 [style=solid label="\"char8_t\""]
  817 -> 40 [style=solid label="\"char16_t\""]
  817 -> 41 [style=solid label="\"char32_t\""]
  817 -> 42 [style=solid label="\"wchar_t\""]
  817 -> 43 [style=solid label="\"bool\""]
  817 -> 44 [style=solid label="\"short\""]
  817 -> 45 [style=solid label="\"int\""]
  817 -> 46 [style=solid label="\"long\""]
  817 -> 47 [style=solid label="\"signed\""]
  817 -> 48 [style=solid label="\"unsigned\""]
  817 -> 49 [style=solid label="\"float\""]
  817 -> 50 [style=solid label="\"double\""]
  817 -> 51 [style=solid label="\"void\""]
  817 -> 56 [style=solid label="\"typename\""]
  817 -> 210 [style=dashed label="class-key"]
  817 -> 66 [style=dashed label="class-name"]
  817 -> 68 [style=dashed label="concept-name"]
  817 -> 70 [style=dashed label="cv-qualifier"]
  817 -> 77 [style=dashed label="decltype-specifier"]
  817 -> 80 [style=dashed label="elaborated-enum-specifier"]
  817 -> 81 [style=dashed label="elaborated-type-specifier"]
  817 -> 85 [style=dashed label="enum-name"]
  817 -> 100 [style=dashed label="namespace-alias"]
  817 -> 103 [style=dashed label="namespace-name"]
  817 -> 213 [style=dashed label="nested-name-specifier"]
  817 -> 110 [style=dashed label="placeholder-type-specifier"]
  817 -> 142 [style=dashed label="simple-template-id"]
  817 -> 116 [style=dashed label="simple-type-specifier"]
  817 -> 216 [style=dashed label="template-name"]
  817 -> 124 [style=dashed label="type-constraint"]
  817 -> 1320 [style=dashed label="type-id"]
  817 -> 125 [style=dashed label="type-name"]
  817 -> 217 [style=dashed label="type-specifier"]
  817 -> 452 [style=dashed label="type-specifier-seq"]
  817 -> 127 [style=dashed label="typedef-name"]
  817 -> 128 [style=dashed label="typename-specifier"]
  818 [label="State 818\n\l881 postfix-expression: \"typeid\" '(' • expression ')'\l882                   | \"typeid\" '(' • type-id ')'\l"]
  818 -> 1 [style=solid label="IDENTIFIER"]
  818 -> 361 [style=solid label="'+'"]
  818 -> 362 [style=solid label="'-'"]
  818 -> 363 [style=solid label="'('"]
  818 -> 364 [style=solid label="'&'"]
  818 -> 365 [style=solid label="\"::\""]
  818 -> 366 [style=solid label="'['"]
  818 -> 367 [style=solid label="\"co_await\""]
  818 -> 368 [style=solid label="'0'"]
  818 -> 369 [style=solid label="'1'"]
  818 -> 370 [style=solid label="\"0b\""]
  818 -> 371 [style=solid label="\"0B\""]
  818 -> 372 [style=solid label="'\\''"]
  818 -> 373 [style=solid label="\"false\""]
  818 -> 374 [style=solid label="\"true\""]
  818 -> 12 [style=solid label="\"class\""]
  818 -> 13 [style=solid label="\"struct\""]
  818 -> 14 [style=solid label="\"union\""]
  818 -> 375 [style=solid label="\"noexcept\""]
  818 -> 17 [style=solid label="\"operator\""]
  818 -> 18 [style=solid label="\"const\""]
  818 -> 19 [style=solid label="\"volatile\""]
  818 -> 26 [style=solid label="\"decltype\""]
  818 -> 376 [style=solid label="\"delete\""]
  818 -> 377 [style=solid label="'.'"]
  818 -> 378 [style=solid label="'2'"]
  818 -> 379 [style=solid label="'3'"]
  818 -> 380 [style=solid label="'4'"]
  818 -> 381 [style=solid label="'5'"]
  818 -> 382 [style=solid label="'6'"]
  818 -> 383 [style=solid label="'7'"]
  818 -> 384 [style=solid label="'8'"]
  818 -> 385 [style=solid label="'9'"]
  818 -> 136 [style=solid label="\"enum\""]
  818 -> 185 [style=solid label="\"u8\""]
  818 -> 186 [style=solid label="'u'"]
  818 -> 187 [style=solid label="'U'"]
  818 -> 188 [style=solid label="'L'"]
  818 -> 386 [style=solid label="'*'"]
  818 -> 203 [style=solid label="'\"'"]
  818 -> 387 [style=solid label="\"0x\""]
  818 -> 388 [style=solid label="\"0X\""]
  818 -> 389 [style=solid label="\"requires\""]
  818 -> 390 [style=solid label="\"new\""]
  818 -> 391 [style=solid label="'~'"]
  818 -> 392 [style=solid label="'!'"]
  818 -> 393 [style=solid label="\"++\""]
  818 -> 394 [style=solid label="\"--\""]
  818 -> 395 [style=solid label="\"this\""]
  818 -> 37 [style=solid label="\"auto\""]
  818 -> 396 [style=solid label="\"nullptr\""]
  818 -> 397 [style=solid label="\"dynamic_cast\""]
  818 -> 398 [style=solid label="\"static_cast\""]
  818 -> 399 [style=solid label="\"reinterpret_cast\""]
  818 -> 400 [style=solid label="\"const_cast\""]
  818 -> 401 [style=solid label="\"typeid\""]
  818 -> 38 [style=solid label="\"char\""]
  818 -> 39 [style=solid label="\"char8_t\""]
  818 -> 40 [style=solid label="\"char16_t\""]
  818 -> 41 [style=solid label="\"char32_t\""]
  818 -> 42 [style=solid label="\"wchar_t\""]
  818 -> 43 [style=solid label="\"bool\""]
  818 -> 44 [style=solid label="\"short\""]
  818 -> 45 [style=solid label="\"int\""]
  818 -> 46 [style=solid label="\"long\""]
  818 -> 47 [style=solid label="\"signed\""]
  818 -> 48 [style=solid label="\"unsigned\""]
  818 -> 49 [style=solid label="\"float\""]
  818 -> 50 [style=solid label="\"double\""]
  818 -> 51 [style=solid label="\"void\""]
  818 -> 209 [style=solid label="'R'"]
  818 -> 528 [style=solid label="\"throw\""]
  818 -> 56 [style=solid label="\"typename\""]
  818 -> 402 [style=solid label="\"sizeof\""]
  818 -> 403 [style=solid label="\"alignof\""]
  818 -> 529 [style=solid label="\"co_yield\""]
  818 -> 404 [style=dashed label="additive-expression"]
  818 -> 405 [style=dashed label="and-expression"]
  818 -> 530 [style=dashed label="assignment-expression"]
  818 -> 406 [style=dashed label="await-expression"]
  818 -> 407 [style=dashed label="binary-literal"]
  818 -> 408 [style=dashed label="boolean-literal"]
  818 -> 409 [style=dashed label="cast-expression"]
  818 -> 410 [style=dashed label="character-literal"]
  818 -> 210 [style=dashed label="class-key"]
  818 -> 66 [style=dashed label="class-name"]
  818 -> 411 [style=dashed label="compare-expression"]
  818 -> 68 [style=dashed label="concept-name"]
  818 -> 531 [style=dashed label="conditional-expression"]
  818 -> 69 [style=dashed label="conversion-function-id"]
  818 -> 70 [style=dashed label="cv-qualifier"]
  818 -> 414 [style=dashed label="decimal-floating-point-literal"]
  818 -> 415 [style=dashed label="decimal-literal"]
  818 -> 77 [style=dashed label="decltype-specifier"]
  818 -> 416 [style=dashed label="delete-expression"]
  818 -> 417 [style=dashed label="digit"]
  818 -> 418 [style=dashed label="digit-sequence"]
  818 -> 80 [style=dashed label="elaborated-enum-specifier"]
  818 -> 81 [style=dashed label="elaborated-type-specifier"]
  818 -> 419 [style=dashed label="encoding-prefix"]
  818 -> 85 [style=dashed label="enum-name"]
  818 -> 420 [style=dashed label="equality-expression"]
  818 -> 421 [style=dashed label="exclusive-or-expression"]
  818 -> 1321 [style=dashed label="expression"]
  818 -> 422 [style=dashed label="floating-point-literal"]
  818 -> 423 [style=dashed label="fold-expression"]
  818 -> 424 [style=dashed label="fractional-constant"]
  818 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  818 -> 426 [style=dashed label="hexadecimal-literal"]
  818 -> 427 [style=dashed label="hexadecimal-prefix"]
  818 -> 428 [style=dashed label="id-expression"]
  818 -> 429 [style=dashed label="inclusive-or-expression"]
  818 -> 430 [style=dashed label="integer-literal"]
  818 -> 431 [style=dashed label="lambda-expression"]
  818 -> 432 [style=dashed label="lambda-introducer"]
  818 -> 433 [style=dashed label="literal"]
  818 -> 96 [style=dashed label="literal-operator-id"]
  818 -> 434 [style=dashed label="logical-and-expression"]
  818 -> 533 [style=dashed label="logical-or-expression"]
  818 -> 436 [style=dashed label="multiplicative-expression"]
  818 -> 100 [style=dashed label="namespace-alias"]
  818 -> 103 [style=dashed label="namespace-name"]
  818 -> 437 [style=dashed label="nested-name-specifier"]
  818 -> 438 [style=dashed label="new-expression"]
  818 -> 439 [style=dashed label="noexcept-expression"]
  818 -> 440 [style=dashed label="nonzero-digit"]
  818 -> 441 [style=dashed label="octal-literal"]
  818 -> 109 [style=dashed label="operator-function-id"]
  818 -> 110 [style=dashed label="placeholder-type-specifier"]
  818 -> 442 [style=dashed label="pm-expression"]
  818 -> 443 [style=dashed label="pointer-literal"]
  818 -> 444 [style=dashed label="postfix-expression"]
  818 -> 445 [style=dashed label="primary-expression"]
  818 -> 113 [style=dashed label="qualified-id"]
  818 -> 446 [style=dashed label="relational-expression"]
  818 -> 447 [style=dashed label="requires-expression"]
  818 -> 448 [style=dashed label="shift-expression"]
  818 -> 115 [style=dashed label="simple-template-id"]
  818 -> 449 [style=dashed label="simple-type-specifier"]
  818 -> 450 [style=dashed label="string-literal"]
  818 -> 121 [style=dashed label="template-id"]
  818 -> 216 [style=dashed label="template-name"]
  818 -> 535 [style=dashed label="throw-expression"]
  818 -> 124 [style=dashed label="type-constraint"]
  818 -> 1322 [style=dashed label="type-id"]
  818 -> 125 [style=dashed label="type-name"]
  818 -> 217 [style=dashed label="type-specifier"]
  818 -> 452 [style=dashed label="type-specifier-seq"]
  818 -> 127 [style=dashed label="typedef-name"]
  818 -> 453 [style=dashed label="typename-specifier"]
  818 -> 454 [style=dashed label="unary-expression"]
  818 -> 455 [style=dashed label="unary-operator"]
  818 -> 130 [style=dashed label="unqualified-id"]
  818 -> 456 [style=dashed label="user-defined-character-literal"]
  818 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  818 -> 458 [style=dashed label="user-defined-integer-literal"]
  818 -> 459 [style=dashed label="user-defined-literal"]
  818 -> 460 [style=dashed label="user-defined-string-literal"]
  818 -> 537 [style=dashed label="yield-expression"]
  819 [label="State 819\n\l348 fold-expression: '(' • cast-expression fold-operator \"...\" ')'\l349                | '(' • \"...\" fold-operator cast-expression ')'\l350                | '(' • cast-expression fold-operator \"...\" fold-operator cast-expression ')'\l885 primary-expression: '(' • expression ')'\l1136 unary-expression: \"sizeof\" '(' • type-id ')'\l"]
  819 -> 1 [style=solid label="IDENTIFIER"]
  819 -> 361 [style=solid label="'+'"]
  819 -> 362 [style=solid label="'-'"]
  819 -> 363 [style=solid label="'('"]
  819 -> 760 [style=solid label="\"...\""]
  819 -> 364 [style=solid label="'&'"]
  819 -> 365 [style=solid label="\"::\""]
  819 -> 366 [style=solid label="'['"]
  819 -> 367 [style=solid label="\"co_await\""]
  819 -> 368 [style=solid label="'0'"]
  819 -> 369 [style=solid label="'1'"]
  819 -> 370 [style=solid label="\"0b\""]
  819 -> 371 [style=solid label="\"0B\""]
  819 -> 372 [style=solid label="'\\''"]
  819 -> 373 [style=solid label="\"false\""]
  819 -> 374 [style=solid label="\"true\""]
  819 -> 12 [style=solid label="\"class\""]
  819 -> 13 [style=solid label="\"struct\""]
  819 -> 14 [style=solid label="\"union\""]
  819 -> 375 [style=solid label="\"noexcept\""]
  819 -> 17 [style=solid label="\"operator\""]
  819 -> 18 [style=solid label="\"const\""]
  819 -> 19 [style=solid label="\"volatile\""]
  819 -> 26 [style=solid label="\"decltype\""]
  819 -> 376 [style=solid label="\"delete\""]
  819 -> 377 [style=solid label="'.'"]
  819 -> 378 [style=solid label="'2'"]
  819 -> 379 [style=solid label="'3'"]
  819 -> 380 [style=solid label="'4'"]
  819 -> 381 [style=solid label="'5'"]
  819 -> 382 [style=solid label="'6'"]
  819 -> 383 [style=solid label="'7'"]
  819 -> 384 [style=solid label="'8'"]
  819 -> 385 [style=solid label="'9'"]
  819 -> 136 [style=solid label="\"enum\""]
  819 -> 185 [style=solid label="\"u8\""]
  819 -> 186 [style=solid label="'u'"]
  819 -> 187 [style=solid label="'U'"]
  819 -> 188 [style=solid label="'L'"]
  819 -> 386 [style=solid label="'*'"]
  819 -> 203 [style=solid label="'\"'"]
  819 -> 387 [style=solid label="\"0x\""]
  819 -> 388 [style=solid label="\"0X\""]
  819 -> 389 [style=solid label="\"requires\""]
  819 -> 390 [style=solid label="\"new\""]
  819 -> 391 [style=solid label="'~'"]
  819 -> 392 [style=solid label="'!'"]
  819 -> 393 [style=solid label="\"++\""]
  819 -> 394 [style=solid label="\"--\""]
  819 -> 395 [style=solid label="\"this\""]
  819 -> 37 [style=solid label="\"auto\""]
  819 -> 396 [style=solid label="\"nullptr\""]
  819 -> 397 [style=solid label="\"dynamic_cast\""]
  819 -> 398 [style=solid label="\"static_cast\""]
  819 -> 399 [style=solid label="\"reinterpret_cast\""]
  819 -> 400 [style=solid label="\"const_cast\""]
  819 -> 401 [style=solid label="\"typeid\""]
  819 -> 38 [style=solid label="\"char\""]
  819 -> 39 [style=solid label="\"char8_t\""]
  819 -> 40 [style=solid label="\"char16_t\""]
  819 -> 41 [style=solid label="\"char32_t\""]
  819 -> 42 [style=solid label="\"wchar_t\""]
  819 -> 43 [style=solid label="\"bool\""]
  819 -> 44 [style=solid label="\"short\""]
  819 -> 45 [style=solid label="\"int\""]
  819 -> 46 [style=solid label="\"long\""]
  819 -> 47 [style=solid label="\"signed\""]
  819 -> 48 [style=solid label="\"unsigned\""]
  819 -> 49 [style=solid label="\"float\""]
  819 -> 50 [style=solid label="\"double\""]
  819 -> 51 [style=solid label="\"void\""]
  819 -> 209 [style=solid label="'R'"]
  819 -> 528 [style=solid label="\"throw\""]
  819 -> 56 [style=solid label="\"typename\""]
  819 -> 402 [style=solid label="\"sizeof\""]
  819 -> 403 [style=solid label="\"alignof\""]
  819 -> 529 [style=solid label="\"co_yield\""]
  819 -> 404 [style=dashed label="additive-expression"]
  819 -> 405 [style=dashed label="and-expression"]
  819 -> 530 [style=dashed label="assignment-expression"]
  819 -> 406 [style=dashed label="await-expression"]
  819 -> 407 [style=dashed label="binary-literal"]
  819 -> 408 [style=dashed label="boolean-literal"]
  819 -> 761 [style=dashed label="cast-expression"]
  819 -> 410 [style=dashed label="character-literal"]
  819 -> 210 [style=dashed label="class-key"]
  819 -> 66 [style=dashed label="class-name"]
  819 -> 411 [style=dashed label="compare-expression"]
  819 -> 68 [style=dashed label="concept-name"]
  819 -> 531 [style=dashed label="conditional-expression"]
  819 -> 69 [style=dashed label="conversion-function-id"]
  819 -> 70 [style=dashed label="cv-qualifier"]
  819 -> 414 [style=dashed label="decimal-floating-point-literal"]
  819 -> 415 [style=dashed label="decimal-literal"]
  819 -> 77 [style=dashed label="decltype-specifier"]
  819 -> 416 [style=dashed label="delete-expression"]
  819 -> 417 [style=dashed label="digit"]
  819 -> 418 [style=dashed label="digit-sequence"]
  819 -> 80 [style=dashed label="elaborated-enum-specifier"]
  819 -> 81 [style=dashed label="elaborated-type-specifier"]
  819 -> 419 [style=dashed label="encoding-prefix"]
  819 -> 85 [style=dashed label="enum-name"]
  819 -> 420 [style=dashed label="equality-expression"]
  819 -> 421 [style=dashed label="exclusive-or-expression"]
  819 -> 762 [style=dashed label="expression"]
  819 -> 422 [style=dashed label="floating-point-literal"]
  819 -> 423 [style=dashed label="fold-expression"]
  819 -> 424 [style=dashed label="fractional-constant"]
  819 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  819 -> 426 [style=dashed label="hexadecimal-literal"]
  819 -> 427 [style=dashed label="hexadecimal-prefix"]
  819 -> 428 [style=dashed label="id-expression"]
  819 -> 429 [style=dashed label="inclusive-or-expression"]
  819 -> 430 [style=dashed label="integer-literal"]
  819 -> 431 [style=dashed label="lambda-expression"]
  819 -> 432 [style=dashed label="lambda-introducer"]
  819 -> 433 [style=dashed label="literal"]
  819 -> 96 [style=dashed label="literal-operator-id"]
  819 -> 434 [style=dashed label="logical-and-expression"]
  819 -> 533 [style=dashed label="logical-or-expression"]
  819 -> 436 [style=dashed label="multiplicative-expression"]
  819 -> 100 [style=dashed label="namespace-alias"]
  819 -> 103 [style=dashed label="namespace-name"]
  819 -> 437 [style=dashed label="nested-name-specifier"]
  819 -> 438 [style=dashed label="new-expression"]
  819 -> 439 [style=dashed label="noexcept-expression"]
  819 -> 440 [style=dashed label="nonzero-digit"]
  819 -> 441 [style=dashed label="octal-literal"]
  819 -> 109 [style=dashed label="operator-function-id"]
  819 -> 110 [style=dashed label="placeholder-type-specifier"]
  819 -> 442 [style=dashed label="pm-expression"]
  819 -> 443 [style=dashed label="pointer-literal"]
  819 -> 444 [style=dashed label="postfix-expression"]
  819 -> 445 [style=dashed label="primary-expression"]
  819 -> 113 [style=dashed label="qualified-id"]
  819 -> 446 [style=dashed label="relational-expression"]
  819 -> 447 [style=dashed label="requires-expression"]
  819 -> 448 [style=dashed label="shift-expression"]
  819 -> 115 [style=dashed label="simple-template-id"]
  819 -> 449 [style=dashed label="simple-type-specifier"]
  819 -> 450 [style=dashed label="string-literal"]
  819 -> 121 [style=dashed label="template-id"]
  819 -> 216 [style=dashed label="template-name"]
  819 -> 535 [style=dashed label="throw-expression"]
  819 -> 124 [style=dashed label="type-constraint"]
  819 -> 1323 [style=dashed label="type-id"]
  819 -> 125 [style=dashed label="type-name"]
  819 -> 217 [style=dashed label="type-specifier"]
  819 -> 452 [style=dashed label="type-specifier-seq"]
  819 -> 127 [style=dashed label="typedef-name"]
  819 -> 453 [style=dashed label="typename-specifier"]
  819 -> 454 [style=dashed label="unary-expression"]
  819 -> 455 [style=dashed label="unary-operator"]
  819 -> 130 [style=dashed label="unqualified-id"]
  819 -> 456 [style=dashed label="user-defined-character-literal"]
  819 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  819 -> 458 [style=dashed label="user-defined-integer-literal"]
  819 -> 459 [style=dashed label="user-defined-literal"]
  819 -> 460 [style=dashed label="user-defined-string-literal"]
  819 -> 537 [style=dashed label="yield-expression"]
  820 [label="State 820\n\l1137 unary-expression: \"sizeof\" \"...\" • '(' IDENTIFIER ')'\l"]
  820 -> 1324 [style=solid label="'('"]
  821 [label="State 821\n\l1135 unary-expression: \"sizeof\" unary-expression •\l"]
  821 -> "821R1135" [style=solid]
 "821R1135" [label="R1135", fillcolor=3, shape=diamond, style=filled]
  822 [label="State 822\n\l1138 unary-expression: \"alignof\" '(' • type-id ')'\l"]
  822 -> 161 [style=solid label="IDENTIFIER"]
  822 -> 9 [style=solid label="\"::\""]
  822 -> 12 [style=solid label="\"class\""]
  822 -> 13 [style=solid label="\"struct\""]
  822 -> 14 [style=solid label="\"union\""]
  822 -> 18 [style=solid label="\"const\""]
  822 -> 19 [style=solid label="\"volatile\""]
  822 -> 26 [style=solid label="\"decltype\""]
  822 -> 136 [style=solid label="\"enum\""]
  822 -> 37 [style=solid label="\"auto\""]
  822 -> 38 [style=solid label="\"char\""]
  822 -> 39 [style=solid label="\"char8_t\""]
  822 -> 40 [style=solid label="\"char16_t\""]
  822 -> 41 [style=solid label="\"char32_t\""]
  822 -> 42 [style=solid label="\"wchar_t\""]
  822 -> 43 [style=solid label="\"bool\""]
  822 -> 44 [style=solid label="\"short\""]
  822 -> 45 [style=solid label="\"int\""]
  822 -> 46 [style=solid label="\"long\""]
  822 -> 47 [style=solid label="\"signed\""]
  822 -> 48 [style=solid label="\"unsigned\""]
  822 -> 49 [style=solid label="\"float\""]
  822 -> 50 [style=solid label="\"double\""]
  822 -> 51 [style=solid label="\"void\""]
  822 -> 56 [style=solid label="\"typename\""]
  822 -> 210 [style=dashed label="class-key"]
  822 -> 66 [style=dashed label="class-name"]
  822 -> 68 [style=dashed label="concept-name"]
  822 -> 70 [style=dashed label="cv-qualifier"]
  822 -> 77 [style=dashed label="decltype-specifier"]
  822 -> 80 [style=dashed label="elaborated-enum-specifier"]
  822 -> 81 [style=dashed label="elaborated-type-specifier"]
  822 -> 85 [style=dashed label="enum-name"]
  822 -> 100 [style=dashed label="namespace-alias"]
  822 -> 103 [style=dashed label="namespace-name"]
  822 -> 213 [style=dashed label="nested-name-specifier"]
  822 -> 110 [style=dashed label="placeholder-type-specifier"]
  822 -> 142 [style=dashed label="simple-template-id"]
  822 -> 116 [style=dashed label="simple-type-specifier"]
  822 -> 216 [style=dashed label="template-name"]
  822 -> 124 [style=dashed label="type-constraint"]
  822 -> 1325 [style=dashed label="type-id"]
  822 -> 125 [style=dashed label="type-name"]
  822 -> 217 [style=dashed label="type-specifier"]
  822 -> 452 [style=dashed label="type-specifier-seq"]
  822 -> 127 [style=dashed label="typedef-name"]
  822 -> 128 [style=dashed label="typename-specifier"]
  823 [label="State 823\n\l 11 additive-expression: additive-expression '+' • multiplicative-expression\l"]
  823 -> 1 [style=solid label="IDENTIFIER"]
  823 -> 361 [style=solid label="'+'"]
  823 -> 362 [style=solid label="'-'"]
  823 -> 363 [style=solid label="'('"]
  823 -> 364 [style=solid label="'&'"]
  823 -> 365 [style=solid label="\"::\""]
  823 -> 366 [style=solid label="'['"]
  823 -> 367 [style=solid label="\"co_await\""]
  823 -> 368 [style=solid label="'0'"]
  823 -> 369 [style=solid label="'1'"]
  823 -> 370 [style=solid label="\"0b\""]
  823 -> 371 [style=solid label="\"0B\""]
  823 -> 372 [style=solid label="'\\''"]
  823 -> 373 [style=solid label="\"false\""]
  823 -> 374 [style=solid label="\"true\""]
  823 -> 375 [style=solid label="\"noexcept\""]
  823 -> 17 [style=solid label="\"operator\""]
  823 -> 26 [style=solid label="\"decltype\""]
  823 -> 376 [style=solid label="\"delete\""]
  823 -> 377 [style=solid label="'.'"]
  823 -> 378 [style=solid label="'2'"]
  823 -> 379 [style=solid label="'3'"]
  823 -> 380 [style=solid label="'4'"]
  823 -> 381 [style=solid label="'5'"]
  823 -> 382 [style=solid label="'6'"]
  823 -> 383 [style=solid label="'7'"]
  823 -> 384 [style=solid label="'8'"]
  823 -> 385 [style=solid label="'9'"]
  823 -> 185 [style=solid label="\"u8\""]
  823 -> 186 [style=solid label="'u'"]
  823 -> 187 [style=solid label="'U'"]
  823 -> 188 [style=solid label="'L'"]
  823 -> 386 [style=solid label="'*'"]
  823 -> 203 [style=solid label="'\"'"]
  823 -> 387 [style=solid label="\"0x\""]
  823 -> 388 [style=solid label="\"0X\""]
  823 -> 389 [style=solid label="\"requires\""]
  823 -> 390 [style=solid label="\"new\""]
  823 -> 391 [style=solid label="'~'"]
  823 -> 392 [style=solid label="'!'"]
  823 -> 393 [style=solid label="\"++\""]
  823 -> 394 [style=solid label="\"--\""]
  823 -> 395 [style=solid label="\"this\""]
  823 -> 37 [style=solid label="\"auto\""]
  823 -> 396 [style=solid label="\"nullptr\""]
  823 -> 397 [style=solid label="\"dynamic_cast\""]
  823 -> 398 [style=solid label="\"static_cast\""]
  823 -> 399 [style=solid label="\"reinterpret_cast\""]
  823 -> 400 [style=solid label="\"const_cast\""]
  823 -> 401 [style=solid label="\"typeid\""]
  823 -> 38 [style=solid label="\"char\""]
  823 -> 39 [style=solid label="\"char8_t\""]
  823 -> 40 [style=solid label="\"char16_t\""]
  823 -> 41 [style=solid label="\"char32_t\""]
  823 -> 42 [style=solid label="\"wchar_t\""]
  823 -> 43 [style=solid label="\"bool\""]
  823 -> 44 [style=solid label="\"short\""]
  823 -> 45 [style=solid label="\"int\""]
  823 -> 46 [style=solid label="\"long\""]
  823 -> 47 [style=solid label="\"signed\""]
  823 -> 48 [style=solid label="\"unsigned\""]
  823 -> 49 [style=solid label="\"float\""]
  823 -> 50 [style=solid label="\"double\""]
  823 -> 51 [style=solid label="\"void\""]
  823 -> 209 [style=solid label="'R'"]
  823 -> 56 [style=solid label="\"typename\""]
  823 -> 402 [style=solid label="\"sizeof\""]
  823 -> 403 [style=solid label="\"alignof\""]
  823 -> 406 [style=dashed label="await-expression"]
  823 -> 407 [style=dashed label="binary-literal"]
  823 -> 408 [style=dashed label="boolean-literal"]
  823 -> 409 [style=dashed label="cast-expression"]
  823 -> 410 [style=dashed label="character-literal"]
  823 -> 66 [style=dashed label="class-name"]
  823 -> 68 [style=dashed label="concept-name"]
  823 -> 69 [style=dashed label="conversion-function-id"]
  823 -> 414 [style=dashed label="decimal-floating-point-literal"]
  823 -> 415 [style=dashed label="decimal-literal"]
  823 -> 77 [style=dashed label="decltype-specifier"]
  823 -> 416 [style=dashed label="delete-expression"]
  823 -> 417 [style=dashed label="digit"]
  823 -> 418 [style=dashed label="digit-sequence"]
  823 -> 419 [style=dashed label="encoding-prefix"]
  823 -> 85 [style=dashed label="enum-name"]
  823 -> 422 [style=dashed label="floating-point-literal"]
  823 -> 423 [style=dashed label="fold-expression"]
  823 -> 424 [style=dashed label="fractional-constant"]
  823 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  823 -> 426 [style=dashed label="hexadecimal-literal"]
  823 -> 427 [style=dashed label="hexadecimal-prefix"]
  823 -> 428 [style=dashed label="id-expression"]
  823 -> 430 [style=dashed label="integer-literal"]
  823 -> 431 [style=dashed label="lambda-expression"]
  823 -> 432 [style=dashed label="lambda-introducer"]
  823 -> 433 [style=dashed label="literal"]
  823 -> 96 [style=dashed label="literal-operator-id"]
  823 -> 1326 [style=dashed label="multiplicative-expression"]
  823 -> 100 [style=dashed label="namespace-alias"]
  823 -> 103 [style=dashed label="namespace-name"]
  823 -> 437 [style=dashed label="nested-name-specifier"]
  823 -> 438 [style=dashed label="new-expression"]
  823 -> 439 [style=dashed label="noexcept-expression"]
  823 -> 440 [style=dashed label="nonzero-digit"]
  823 -> 441 [style=dashed label="octal-literal"]
  823 -> 109 [style=dashed label="operator-function-id"]
  823 -> 110 [style=dashed label="placeholder-type-specifier"]
  823 -> 442 [style=dashed label="pm-expression"]
  823 -> 443 [style=dashed label="pointer-literal"]
  823 -> 444 [style=dashed label="postfix-expression"]
  823 -> 445 [style=dashed label="primary-expression"]
  823 -> 113 [style=dashed label="qualified-id"]
  823 -> 447 [style=dashed label="requires-expression"]
  823 -> 115 [style=dashed label="simple-template-id"]
  823 -> 534 [style=dashed label="simple-type-specifier"]
  823 -> 450 [style=dashed label="string-literal"]
  823 -> 121 [style=dashed label="template-id"]
  823 -> 216 [style=dashed label="template-name"]
  823 -> 124 [style=dashed label="type-constraint"]
  823 -> 125 [style=dashed label="type-name"]
  823 -> 127 [style=dashed label="typedef-name"]
  823 -> 536 [style=dashed label="typename-specifier"]
  823 -> 454 [style=dashed label="unary-expression"]
  823 -> 455 [style=dashed label="unary-operator"]
  823 -> 130 [style=dashed label="unqualified-id"]
  823 -> 456 [style=dashed label="user-defined-character-literal"]
  823 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  823 -> 458 [style=dashed label="user-defined-integer-literal"]
  823 -> 459 [style=dashed label="user-defined-literal"]
  823 -> 460 [style=dashed label="user-defined-string-literal"]
  824 [label="State 824\n\l 12 additive-expression: additive-expression '-' • multiplicative-expression\l"]
  824 -> 1 [style=solid label="IDENTIFIER"]
  824 -> 361 [style=solid label="'+'"]
  824 -> 362 [style=solid label="'-'"]
  824 -> 363 [style=solid label="'('"]
  824 -> 364 [style=solid label="'&'"]
  824 -> 365 [style=solid label="\"::\""]
  824 -> 366 [style=solid label="'['"]
  824 -> 367 [style=solid label="\"co_await\""]
  824 -> 368 [style=solid label="'0'"]
  824 -> 369 [style=solid label="'1'"]
  824 -> 370 [style=solid label="\"0b\""]
  824 -> 371 [style=solid label="\"0B\""]
  824 -> 372 [style=solid label="'\\''"]
  824 -> 373 [style=solid label="\"false\""]
  824 -> 374 [style=solid label="\"true\""]
  824 -> 375 [style=solid label="\"noexcept\""]
  824 -> 17 [style=solid label="\"operator\""]
  824 -> 26 [style=solid label="\"decltype\""]
  824 -> 376 [style=solid label="\"delete\""]
  824 -> 377 [style=solid label="'.'"]
  824 -> 378 [style=solid label="'2'"]
  824 -> 379 [style=solid label="'3'"]
  824 -> 380 [style=solid label="'4'"]
  824 -> 381 [style=solid label="'5'"]
  824 -> 382 [style=solid label="'6'"]
  824 -> 383 [style=solid label="'7'"]
  824 -> 384 [style=solid label="'8'"]
  824 -> 385 [style=solid label="'9'"]
  824 -> 185 [style=solid label="\"u8\""]
  824 -> 186 [style=solid label="'u'"]
  824 -> 187 [style=solid label="'U'"]
  824 -> 188 [style=solid label="'L'"]
  824 -> 386 [style=solid label="'*'"]
  824 -> 203 [style=solid label="'\"'"]
  824 -> 387 [style=solid label="\"0x\""]
  824 -> 388 [style=solid label="\"0X\""]
  824 -> 389 [style=solid label="\"requires\""]
  824 -> 390 [style=solid label="\"new\""]
  824 -> 391 [style=solid label="'~'"]
  824 -> 392 [style=solid label="'!'"]
  824 -> 393 [style=solid label="\"++\""]
  824 -> 394 [style=solid label="\"--\""]
  824 -> 395 [style=solid label="\"this\""]
  824 -> 37 [style=solid label="\"auto\""]
  824 -> 396 [style=solid label="\"nullptr\""]
  824 -> 397 [style=solid label="\"dynamic_cast\""]
  824 -> 398 [style=solid label="\"static_cast\""]
  824 -> 399 [style=solid label="\"reinterpret_cast\""]
  824 -> 400 [style=solid label="\"const_cast\""]
  824 -> 401 [style=solid label="\"typeid\""]
  824 -> 38 [style=solid label="\"char\""]
  824 -> 39 [style=solid label="\"char8_t\""]
  824 -> 40 [style=solid label="\"char16_t\""]
  824 -> 41 [style=solid label="\"char32_t\""]
  824 -> 42 [style=solid label="\"wchar_t\""]
  824 -> 43 [style=solid label="\"bool\""]
  824 -> 44 [style=solid label="\"short\""]
  824 -> 45 [style=solid label="\"int\""]
  824 -> 46 [style=solid label="\"long\""]
  824 -> 47 [style=solid label="\"signed\""]
  824 -> 48 [style=solid label="\"unsigned\""]
  824 -> 49 [style=solid label="\"float\""]
  824 -> 50 [style=solid label="\"double\""]
  824 -> 51 [style=solid label="\"void\""]
  824 -> 209 [style=solid label="'R'"]
  824 -> 56 [style=solid label="\"typename\""]
  824 -> 402 [style=solid label="\"sizeof\""]
  824 -> 403 [style=solid label="\"alignof\""]
  824 -> 406 [style=dashed label="await-expression"]
  824 -> 407 [style=dashed label="binary-literal"]
  824 -> 408 [style=dashed label="boolean-literal"]
  824 -> 409 [style=dashed label="cast-expression"]
  824 -> 410 [style=dashed label="character-literal"]
  824 -> 66 [style=dashed label="class-name"]
  824 -> 68 [style=dashed label="concept-name"]
  824 -> 69 [style=dashed label="conversion-function-id"]
  824 -> 414 [style=dashed label="decimal-floating-point-literal"]
  824 -> 415 [style=dashed label="decimal-literal"]
  824 -> 77 [style=dashed label="decltype-specifier"]
  824 -> 416 [style=dashed label="delete-expression"]
  824 -> 417 [style=dashed label="digit"]
  824 -> 418 [style=dashed label="digit-sequence"]
  824 -> 419 [style=dashed label="encoding-prefix"]
  824 -> 85 [style=dashed label="enum-name"]
  824 -> 422 [style=dashed label="floating-point-literal"]
  824 -> 423 [style=dashed label="fold-expression"]
  824 -> 424 [style=dashed label="fractional-constant"]
  824 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  824 -> 426 [style=dashed label="hexadecimal-literal"]
  824 -> 427 [style=dashed label="hexadecimal-prefix"]
  824 -> 428 [style=dashed label="id-expression"]
  824 -> 430 [style=dashed label="integer-literal"]
  824 -> 431 [style=dashed label="lambda-expression"]
  824 -> 432 [style=dashed label="lambda-introducer"]
  824 -> 433 [style=dashed label="literal"]
  824 -> 96 [style=dashed label="literal-operator-id"]
  824 -> 1327 [style=dashed label="multiplicative-expression"]
  824 -> 100 [style=dashed label="namespace-alias"]
  824 -> 103 [style=dashed label="namespace-name"]
  824 -> 437 [style=dashed label="nested-name-specifier"]
  824 -> 438 [style=dashed label="new-expression"]
  824 -> 439 [style=dashed label="noexcept-expression"]
  824 -> 440 [style=dashed label="nonzero-digit"]
  824 -> 441 [style=dashed label="octal-literal"]
  824 -> 109 [style=dashed label="operator-function-id"]
  824 -> 110 [style=dashed label="placeholder-type-specifier"]
  824 -> 442 [style=dashed label="pm-expression"]
  824 -> 443 [style=dashed label="pointer-literal"]
  824 -> 444 [style=dashed label="postfix-expression"]
  824 -> 445 [style=dashed label="primary-expression"]
  824 -> 113 [style=dashed label="qualified-id"]
  824 -> 447 [style=dashed label="requires-expression"]
  824 -> 115 [style=dashed label="simple-template-id"]
  824 -> 534 [style=dashed label="simple-type-specifier"]
  824 -> 450 [style=dashed label="string-literal"]
  824 -> 121 [style=dashed label="template-id"]
  824 -> 216 [style=dashed label="template-name"]
  824 -> 124 [style=dashed label="type-constraint"]
  824 -> 125 [style=dashed label="type-name"]
  824 -> 127 [style=dashed label="typedef-name"]
  824 -> 536 [style=dashed label="typename-specifier"]
  824 -> 454 [style=dashed label="unary-expression"]
  824 -> 455 [style=dashed label="unary-operator"]
  824 -> 130 [style=dashed label="unqualified-id"]
  824 -> 456 [style=dashed label="user-defined-character-literal"]
  824 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  824 -> 458 [style=dashed label="user-defined-integer-literal"]
  824 -> 459 [style=dashed label="user-defined-literal"]
  824 -> 460 [style=dashed label="user-defined-string-literal"]
  825 [label="State 825\n\l 20 and-expression: and-expression '&' • equality-expression\l"]
  825 -> 1 [style=solid label="IDENTIFIER"]
  825 -> 361 [style=solid label="'+'"]
  825 -> 362 [style=solid label="'-'"]
  825 -> 363 [style=solid label="'('"]
  825 -> 364 [style=solid label="'&'"]
  825 -> 365 [style=solid label="\"::\""]
  825 -> 366 [style=solid label="'['"]
  825 -> 367 [style=solid label="\"co_await\""]
  825 -> 368 [style=solid label="'0'"]
  825 -> 369 [style=solid label="'1'"]
  825 -> 370 [style=solid label="\"0b\""]
  825 -> 371 [style=solid label="\"0B\""]
  825 -> 372 [style=solid label="'\\''"]
  825 -> 373 [style=solid label="\"false\""]
  825 -> 374 [style=solid label="\"true\""]
  825 -> 375 [style=solid label="\"noexcept\""]
  825 -> 17 [style=solid label="\"operator\""]
  825 -> 26 [style=solid label="\"decltype\""]
  825 -> 376 [style=solid label="\"delete\""]
  825 -> 377 [style=solid label="'.'"]
  825 -> 378 [style=solid label="'2'"]
  825 -> 379 [style=solid label="'3'"]
  825 -> 380 [style=solid label="'4'"]
  825 -> 381 [style=solid label="'5'"]
  825 -> 382 [style=solid label="'6'"]
  825 -> 383 [style=solid label="'7'"]
  825 -> 384 [style=solid label="'8'"]
  825 -> 385 [style=solid label="'9'"]
  825 -> 185 [style=solid label="\"u8\""]
  825 -> 186 [style=solid label="'u'"]
  825 -> 187 [style=solid label="'U'"]
  825 -> 188 [style=solid label="'L'"]
  825 -> 386 [style=solid label="'*'"]
  825 -> 203 [style=solid label="'\"'"]
  825 -> 387 [style=solid label="\"0x\""]
  825 -> 388 [style=solid label="\"0X\""]
  825 -> 389 [style=solid label="\"requires\""]
  825 -> 390 [style=solid label="\"new\""]
  825 -> 391 [style=solid label="'~'"]
  825 -> 392 [style=solid label="'!'"]
  825 -> 393 [style=solid label="\"++\""]
  825 -> 394 [style=solid label="\"--\""]
  825 -> 395 [style=solid label="\"this\""]
  825 -> 37 [style=solid label="\"auto\""]
  825 -> 396 [style=solid label="\"nullptr\""]
  825 -> 397 [style=solid label="\"dynamic_cast\""]
  825 -> 398 [style=solid label="\"static_cast\""]
  825 -> 399 [style=solid label="\"reinterpret_cast\""]
  825 -> 400 [style=solid label="\"const_cast\""]
  825 -> 401 [style=solid label="\"typeid\""]
  825 -> 38 [style=solid label="\"char\""]
  825 -> 39 [style=solid label="\"char8_t\""]
  825 -> 40 [style=solid label="\"char16_t\""]
  825 -> 41 [style=solid label="\"char32_t\""]
  825 -> 42 [style=solid label="\"wchar_t\""]
  825 -> 43 [style=solid label="\"bool\""]
  825 -> 44 [style=solid label="\"short\""]
  825 -> 45 [style=solid label="\"int\""]
  825 -> 46 [style=solid label="\"long\""]
  825 -> 47 [style=solid label="\"signed\""]
  825 -> 48 [style=solid label="\"unsigned\""]
  825 -> 49 [style=solid label="\"float\""]
  825 -> 50 [style=solid label="\"double\""]
  825 -> 51 [style=solid label="\"void\""]
  825 -> 209 [style=solid label="'R'"]
  825 -> 56 [style=solid label="\"typename\""]
  825 -> 402 [style=solid label="\"sizeof\""]
  825 -> 403 [style=solid label="\"alignof\""]
  825 -> 404 [style=dashed label="additive-expression"]
  825 -> 406 [style=dashed label="await-expression"]
  825 -> 407 [style=dashed label="binary-literal"]
  825 -> 408 [style=dashed label="boolean-literal"]
  825 -> 409 [style=dashed label="cast-expression"]
  825 -> 410 [style=dashed label="character-literal"]
  825 -> 66 [style=dashed label="class-name"]
  825 -> 411 [style=dashed label="compare-expression"]
  825 -> 68 [style=dashed label="concept-name"]
  825 -> 69 [style=dashed label="conversion-function-id"]
  825 -> 414 [style=dashed label="decimal-floating-point-literal"]
  825 -> 415 [style=dashed label="decimal-literal"]
  825 -> 77 [style=dashed label="decltype-specifier"]
  825 -> 416 [style=dashed label="delete-expression"]
  825 -> 417 [style=dashed label="digit"]
  825 -> 418 [style=dashed label="digit-sequence"]
  825 -> 419 [style=dashed label="encoding-prefix"]
  825 -> 85 [style=dashed label="enum-name"]
  825 -> 1328 [style=dashed label="equality-expression"]
  825 -> 422 [style=dashed label="floating-point-literal"]
  825 -> 423 [style=dashed label="fold-expression"]
  825 -> 424 [style=dashed label="fractional-constant"]
  825 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  825 -> 426 [style=dashed label="hexadecimal-literal"]
  825 -> 427 [style=dashed label="hexadecimal-prefix"]
  825 -> 428 [style=dashed label="id-expression"]
  825 -> 430 [style=dashed label="integer-literal"]
  825 -> 431 [style=dashed label="lambda-expression"]
  825 -> 432 [style=dashed label="lambda-introducer"]
  825 -> 433 [style=dashed label="literal"]
  825 -> 96 [style=dashed label="literal-operator-id"]
  825 -> 436 [style=dashed label="multiplicative-expression"]
  825 -> 100 [style=dashed label="namespace-alias"]
  825 -> 103 [style=dashed label="namespace-name"]
  825 -> 437 [style=dashed label="nested-name-specifier"]
  825 -> 438 [style=dashed label="new-expression"]
  825 -> 439 [style=dashed label="noexcept-expression"]
  825 -> 440 [style=dashed label="nonzero-digit"]
  825 -> 441 [style=dashed label="octal-literal"]
  825 -> 109 [style=dashed label="operator-function-id"]
  825 -> 110 [style=dashed label="placeholder-type-specifier"]
  825 -> 442 [style=dashed label="pm-expression"]
  825 -> 443 [style=dashed label="pointer-literal"]
  825 -> 444 [style=dashed label="postfix-expression"]
  825 -> 445 [style=dashed label="primary-expression"]
  825 -> 113 [style=dashed label="qualified-id"]
  825 -> 446 [style=dashed label="relational-expression"]
  825 -> 447 [style=dashed label="requires-expression"]
  825 -> 448 [style=dashed label="shift-expression"]
  825 -> 115 [style=dashed label="simple-template-id"]
  825 -> 534 [style=dashed label="simple-type-specifier"]
  825 -> 450 [style=dashed label="string-literal"]
  825 -> 121 [style=dashed label="template-id"]
  825 -> 216 [style=dashed label="template-name"]
  825 -> 124 [style=dashed label="type-constraint"]
  825 -> 125 [style=dashed label="type-name"]
  825 -> 127 [style=dashed label="typedef-name"]
  825 -> 536 [style=dashed label="typename-specifier"]
  825 -> 454 [style=dashed label="unary-expression"]
  825 -> 455 [style=dashed label="unary-operator"]
  825 -> 130 [style=dashed label="unqualified-id"]
  825 -> 456 [style=dashed label="user-defined-character-literal"]
  825 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  825 -> 458 [style=dashed label="user-defined-integer-literal"]
  825 -> 459 [style=dashed label="user-defined-literal"]
  825 -> 460 [style=dashed label="user-defined-string-literal"]
  826 [label="State 826\n\l1129 ud-suffix: IDENTIFIER •\l"]
  826 -> "826R1129" [style=solid]
 "826R1129" [label="R1129", fillcolor=3, shape=diamond, style=filled]
  827 [label="State 827\n\l572 long-long-suffix: LL •\l"]
  827 -> "827R572" [style=solid]
 "827R572" [label="R572", fillcolor=3, shape=diamond, style=filled]
  828 [label="State 828\n\l 94 binary-literal: binary-literal '\\'' • binary-digit\l"]
  828 -> 780 [style=solid label="'0'"]
  828 -> 781 [style=solid label="'1'"]
  828 -> 1329 [style=dashed label="binary-digit"]
  829 [label="State 829\n\l1161 unsigned-suffix: 'u' •\l"]
  829 -> "829R1161" [style=solid]
 "829R1161" [label="R1161", fillcolor=3, shape=diamond, style=filled]
  830 [label="State 830\n\l1162 unsigned-suffix: 'U' •\l"]
  830 -> "830R1162" [style=solid]
 "830R1162" [label="R1162", fillcolor=3, shape=diamond, style=filled]
  831 [label="State 831\n\l574 long-suffix: 'L' •\l"]
  831 -> "831R574" [style=solid]
 "831R574" [label="R574", fillcolor=3, shape=diamond, style=filled]
  832 [label="State 832\n\l573 long-suffix: 'l' •\l"]
  832 -> "832R573" [style=solid]
 "832R573" [label="R573", fillcolor=3, shape=diamond, style=filled]
  833 [label="State 833\n\l571 long-long-suffix: \"ll\" •\l"]
  833 -> "833R571" [style=solid]
 "833R571" [label="R571", fillcolor=3, shape=diamond, style=filled]
  834 [label="State 834\n\l1020 size-suffix: 'z' •\l"]
  834 -> "834R1020" [style=solid]
 "834R1020" [label="R1020", fillcolor=3, shape=diamond, style=filled]
  835 [label="State 835\n\l1021 size-suffix: 'Z' •\l"]
  835 -> "835R1021" [style=solid]
 "835R1021" [label="R1021", fillcolor=3, shape=diamond, style=filled]
  836 [label="State 836\n\l 93 binary-literal: binary-literal binary-digit •\l"]
  836 -> "836R93" [style=solid]
 "836R93" [label="R93", fillcolor=3, shape=diamond, style=filled]
  837 [label="State 837\n\l490 integer-literal: binary-literal integer-suffix •\l"]
  837 -> "837R490" [style=solid]
 "837R490" [label="R490", fillcolor=3, shape=diamond, style=filled]
  838 [label="State 838\n\l505 integer-suffix: long-long-suffix •\l506               | long-long-suffix • unsigned-suffix\l"]
  838 -> 829 [style=solid label="'u'"]
  838 -> 830 [style=solid label="'U'"]
  838 -> 1330 [style=dashed label="unsigned-suffix"]
  838 -> "838R505" [style=solid]
 "838R505" [label="R505", fillcolor=3, shape=diamond, style=filled]
  839 [label="State 839\n\l503 integer-suffix: long-suffix •\l504               | long-suffix • unsigned-suffix\l"]
  839 -> 829 [style=solid label="'u'"]
  839 -> 830 [style=solid label="'U'"]
  839 -> 1331 [style=dashed label="unsigned-suffix"]
  839 -> "839R503" [style=solid]
 "839R503" [label="R503", fillcolor=3, shape=diamond, style=filled]
  840 [label="State 840\n\l507 integer-suffix: size-suffix •\l508               | size-suffix • unsigned-suffix\l"]
  840 -> 829 [style=solid label="'u'"]
  840 -> 830 [style=solid label="'U'"]
  840 -> 1332 [style=dashed label="unsigned-suffix"]
  840 -> "840R507" [style=solid]
 "840R507" [label="R507", fillcolor=3, shape=diamond, style=filled]
  841 [label="State 841\n\l1172 user-defined-integer-literal: binary-literal ud-suffix •\l"]
  841 -> "841R1172" [style=solid]
 "841R1172" [label="R1172", fillcolor=3, shape=diamond, style=filled]
  842 [label="State 842\n\l497 integer-suffix: unsigned-suffix •\l498               | unsigned-suffix • long-suffix\l499               | unsigned-suffix •\l500               | unsigned-suffix • long-long-suffix\l501               | unsigned-suffix •\l502               | unsigned-suffix • size-suffix\l"]
  842 -> 827 [style=solid label="LL"]
  842 -> 831 [style=solid label="'L'"]
  842 -> 832 [style=solid label="'l'"]
  842 -> 833 [style=solid label="\"ll\""]
  842 -> 834 [style=solid label="'z'"]
  842 -> 835 [style=solid label="'Z'"]
  842 -> 1333 [style=dashed label="long-long-suffix"]
  842 -> 1334 [style=dashed label="long-suffix"]
  842 -> 1335 [style=dashed label="size-suffix"]
  842 -> "842R497" [style=solid]
 "842R497" [label="R497", fillcolor=3, shape=diamond, style=filled]
  842 -> "842R499d" [label="[IDENTIFIER, '+', '-', \"using\", '=', ';', \"alignas\", '(', ')', \"...\", '&', \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"::\", '[', ']', ':', '{', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"<=>\", \"noexcept\", \"concept\", '?', \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"->\", '.', \"enum\", \"==\", \"!=\", '^', \"extern\", '<', '>', \"explicit\", \"export\", \"export-keyword\", '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", '~', \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "842R499d" [label="R499", fillcolor=5, shape=diamond, style=filled]
  842 -> "842R501d" [label="[IDENTIFIER, '+', '-', \"using\", '=', ';', \"alignas\", '(', ')', \"...\", '&', \"asm\", \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"::\", '[', ']', ':', '{', '}', \"virtual\", \"class\", \"struct\", \"union\", \"template\", \"<=>\", \"noexcept\", \"concept\", '?', \"&&\", \"||\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"->\", '.', \"enum\", \"==\", \"!=\", '^', \"extern\", '<', '>', \"explicit\", \"export\", \"export-keyword\", '*', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"try\", \"import-keyword\", \"namespace\", '~', \"++\", \"--\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static_assert\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "842R501d" [label="R501", fillcolor=5, shape=diamond, style=filled]
  843 [label="State 843\n\l1163 user-defined-character-literal: character-literal ud-suffix •\l"]
  843 -> "843R1163" [style=solid]
 "843R1163" [label="R1163", fillcolor=3, shape=diamond, style=filled]
  844 [label="State 844\n\l155 compare-expression: compare-expression \"<=>\" • shift-expression\l"]
  844 -> 1 [style=solid label="IDENTIFIER"]
  844 -> 361 [style=solid label="'+'"]
  844 -> 362 [style=solid label="'-'"]
  844 -> 363 [style=solid label="'('"]
  844 -> 364 [style=solid label="'&'"]
  844 -> 365 [style=solid label="\"::\""]
  844 -> 366 [style=solid label="'['"]
  844 -> 367 [style=solid label="\"co_await\""]
  844 -> 368 [style=solid label="'0'"]
  844 -> 369 [style=solid label="'1'"]
  844 -> 370 [style=solid label="\"0b\""]
  844 -> 371 [style=solid label="\"0B\""]
  844 -> 372 [style=solid label="'\\''"]
  844 -> 373 [style=solid label="\"false\""]
  844 -> 374 [style=solid label="\"true\""]
  844 -> 375 [style=solid label="\"noexcept\""]
  844 -> 17 [style=solid label="\"operator\""]
  844 -> 26 [style=solid label="\"decltype\""]
  844 -> 376 [style=solid label="\"delete\""]
  844 -> 377 [style=solid label="'.'"]
  844 -> 378 [style=solid label="'2'"]
  844 -> 379 [style=solid label="'3'"]
  844 -> 380 [style=solid label="'4'"]
  844 -> 381 [style=solid label="'5'"]
  844 -> 382 [style=solid label="'6'"]
  844 -> 383 [style=solid label="'7'"]
  844 -> 384 [style=solid label="'8'"]
  844 -> 385 [style=solid label="'9'"]
  844 -> 185 [style=solid label="\"u8\""]
  844 -> 186 [style=solid label="'u'"]
  844 -> 187 [style=solid label="'U'"]
  844 -> 188 [style=solid label="'L'"]
  844 -> 386 [style=solid label="'*'"]
  844 -> 203 [style=solid label="'\"'"]
  844 -> 387 [style=solid label="\"0x\""]
  844 -> 388 [style=solid label="\"0X\""]
  844 -> 389 [style=solid label="\"requires\""]
  844 -> 390 [style=solid label="\"new\""]
  844 -> 391 [style=solid label="'~'"]
  844 -> 392 [style=solid label="'!'"]
  844 -> 393 [style=solid label="\"++\""]
  844 -> 394 [style=solid label="\"--\""]
  844 -> 395 [style=solid label="\"this\""]
  844 -> 37 [style=solid label="\"auto\""]
  844 -> 396 [style=solid label="\"nullptr\""]
  844 -> 397 [style=solid label="\"dynamic_cast\""]
  844 -> 398 [style=solid label="\"static_cast\""]
  844 -> 399 [style=solid label="\"reinterpret_cast\""]
  844 -> 400 [style=solid label="\"const_cast\""]
  844 -> 401 [style=solid label="\"typeid\""]
  844 -> 38 [style=solid label="\"char\""]
  844 -> 39 [style=solid label="\"char8_t\""]
  844 -> 40 [style=solid label="\"char16_t\""]
  844 -> 41 [style=solid label="\"char32_t\""]
  844 -> 42 [style=solid label="\"wchar_t\""]
  844 -> 43 [style=solid label="\"bool\""]
  844 -> 44 [style=solid label="\"short\""]
  844 -> 45 [style=solid label="\"int\""]
  844 -> 46 [style=solid label="\"long\""]
  844 -> 47 [style=solid label="\"signed\""]
  844 -> 48 [style=solid label="\"unsigned\""]
  844 -> 49 [style=solid label="\"float\""]
  844 -> 50 [style=solid label="\"double\""]
  844 -> 51 [style=solid label="\"void\""]
  844 -> 209 [style=solid label="'R'"]
  844 -> 56 [style=solid label="\"typename\""]
  844 -> 402 [style=solid label="\"sizeof\""]
  844 -> 403 [style=solid label="\"alignof\""]
  844 -> 404 [style=dashed label="additive-expression"]
  844 -> 406 [style=dashed label="await-expression"]
  844 -> 407 [style=dashed label="binary-literal"]
  844 -> 408 [style=dashed label="boolean-literal"]
  844 -> 409 [style=dashed label="cast-expression"]
  844 -> 410 [style=dashed label="character-literal"]
  844 -> 66 [style=dashed label="class-name"]
  844 -> 68 [style=dashed label="concept-name"]
  844 -> 69 [style=dashed label="conversion-function-id"]
  844 -> 414 [style=dashed label="decimal-floating-point-literal"]
  844 -> 415 [style=dashed label="decimal-literal"]
  844 -> 77 [style=dashed label="decltype-specifier"]
  844 -> 416 [style=dashed label="delete-expression"]
  844 -> 417 [style=dashed label="digit"]
  844 -> 418 [style=dashed label="digit-sequence"]
  844 -> 419 [style=dashed label="encoding-prefix"]
  844 -> 85 [style=dashed label="enum-name"]
  844 -> 422 [style=dashed label="floating-point-literal"]
  844 -> 423 [style=dashed label="fold-expression"]
  844 -> 424 [style=dashed label="fractional-constant"]
  844 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  844 -> 426 [style=dashed label="hexadecimal-literal"]
  844 -> 427 [style=dashed label="hexadecimal-prefix"]
  844 -> 428 [style=dashed label="id-expression"]
  844 -> 430 [style=dashed label="integer-literal"]
  844 -> 431 [style=dashed label="lambda-expression"]
  844 -> 432 [style=dashed label="lambda-introducer"]
  844 -> 433 [style=dashed label="literal"]
  844 -> 96 [style=dashed label="literal-operator-id"]
  844 -> 436 [style=dashed label="multiplicative-expression"]
  844 -> 100 [style=dashed label="namespace-alias"]
  844 -> 103 [style=dashed label="namespace-name"]
  844 -> 437 [style=dashed label="nested-name-specifier"]
  844 -> 438 [style=dashed label="new-expression"]
  844 -> 439 [style=dashed label="noexcept-expression"]
  844 -> 440 [style=dashed label="nonzero-digit"]
  844 -> 441 [style=dashed label="octal-literal"]
  844 -> 109 [style=dashed label="operator-function-id"]
  844 -> 110 [style=dashed label="placeholder-type-specifier"]
  844 -> 442 [style=dashed label="pm-expression"]
  844 -> 443 [style=dashed label="pointer-literal"]
  844 -> 444 [style=dashed label="postfix-expression"]
  844 -> 445 [style=dashed label="primary-expression"]
  844 -> 113 [style=dashed label="qualified-id"]
  844 -> 447 [style=dashed label="requires-expression"]
  844 -> 1336 [style=dashed label="shift-expression"]
  844 -> 115 [style=dashed label="simple-template-id"]
  844 -> 534 [style=dashed label="simple-type-specifier"]
  844 -> 450 [style=dashed label="string-literal"]
  844 -> 121 [style=dashed label="template-id"]
  844 -> 216 [style=dashed label="template-name"]
  844 -> 124 [style=dashed label="type-constraint"]
  844 -> 125 [style=dashed label="type-name"]
  844 -> 127 [style=dashed label="typedef-name"]
  844 -> 536 [style=dashed label="typename-specifier"]
  844 -> 454 [style=dashed label="unary-expression"]
  844 -> 455 [style=dashed label="unary-operator"]
  844 -> 130 [style=dashed label="unqualified-id"]
  844 -> 456 [style=dashed label="user-defined-character-literal"]
  844 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  844 -> 458 [style=dashed label="user-defined-integer-literal"]
  844 -> 459 [style=dashed label="user-defined-literal"]
  844 -> 460 [style=dashed label="user-defined-string-literal"]
  845 [label="State 845\n\l 17 alignment-specifier: \"alignas\" '(' constant-expression ')' •\l"]
  845 -> "845R17" [style=solid]
 "845R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  846 [label="State 846\n\l 18 alignment-specifier: \"alignas\" '(' constant-expression \"...\" • ')'\l"]
  846 -> 1337 [style=solid label="')'"]
  847 [label="State 847\n\l200 decimal-literal: decimal-literal '\\'' • digit\l"]
  847 -> 793 [style=solid label="'0'"]
  847 -> 794 [style=solid label="'1'"]
  847 -> 795 [style=solid label="'2'"]
  847 -> 796 [style=solid label="'3'"]
  847 -> 797 [style=solid label="'4'"]
  847 -> 798 [style=solid label="'5'"]
  847 -> 799 [style=solid label="'6'"]
  847 -> 800 [style=solid label="'7'"]
  847 -> 801 [style=solid label="'8'"]
  847 -> 802 [style=solid label="'9'"]
  847 -> 1338 [style=dashed label="digit"]
  848 [label="State 848\n\l199 decimal-literal: decimal-literal digit •\l"]
  848 -> "848R199" [style=solid]
 "848R199" [label="R199", fillcolor=3, shape=diamond, style=filled]
  849 [label="State 849\n\l494 integer-literal: decimal-literal integer-suffix •\l"]
  849 -> "849R494" [style=solid]
 "849R494" [label="R494", fillcolor=3, shape=diamond, style=filled]
  850 [label="State 850\n\l1169 user-defined-integer-literal: decimal-literal ud-suffix •\l"]
  850 -> "850R1169" [style=solid]
 "850R1169" [label="R1169", fillcolor=3, shape=diamond, style=filled]
  851 [label="State 851\n\l264 digit-sequence: digit-sequence '\\'' • digit\l"]
  851 -> 793 [style=solid label="'0'"]
  851 -> 794 [style=solid label="'1'"]
  851 -> 795 [style=solid label="'2'"]
  851 -> 796 [style=solid label="'3'"]
  851 -> 797 [style=solid label="'4'"]
  851 -> 798 [style=solid label="'5'"]
  851 -> 799 [style=solid label="'6'"]
  851 -> 800 [style=solid label="'7'"]
  851 -> 801 [style=solid label="'8'"]
  851 -> 802 [style=solid label="'9'"]
  851 -> 1339 [style=dashed label="digit"]
  852 [label="State 852\n\l390 fractional-constant: digit-sequence '.' • digit-sequence\l392                    | digit-sequence '.' •\l"]
  852 -> 793 [style=solid label="'0'"]
  852 -> 794 [style=solid label="'1'"]
  852 -> 795 [style=solid label="'2'"]
  852 -> 796 [style=solid label="'3'"]
  852 -> 797 [style=solid label="'4'"]
  852 -> 798 [style=solid label="'5'"]
  852 -> 799 [style=solid label="'6'"]
  852 -> 800 [style=solid label="'7'"]
  852 -> 801 [style=solid label="'8'"]
  852 -> 802 [style=solid label="'9'"]
  852 -> 417 [style=dashed label="digit"]
  852 -> 1340 [style=dashed label="digit-sequence"]
  852 -> "852R392" [style=solid]
 "852R392" [label="R392", fillcolor=3, shape=diamond, style=filled]
  853 [label="State 853\n\l327 exponent-part: 'e' • digit-sequence\l328              | 'e' • sign digit-sequence\l"]
  853 -> 1341 [style=solid label="'+'"]
  853 -> 1342 [style=solid label="'-'"]
  853 -> 793 [style=solid label="'0'"]
  853 -> 794 [style=solid label="'1'"]
  853 -> 795 [style=solid label="'2'"]
  853 -> 796 [style=solid label="'3'"]
  853 -> 797 [style=solid label="'4'"]
  853 -> 798 [style=solid label="'5'"]
  853 -> 799 [style=solid label="'6'"]
  853 -> 800 [style=solid label="'7'"]
  853 -> 801 [style=solid label="'8'"]
  853 -> 802 [style=solid label="'9'"]
  853 -> 417 [style=dashed label="digit"]
  853 -> 1343 [style=dashed label="digit-sequence"]
  853 -> 1344 [style=dashed label="sign"]
  854 [label="State 854\n\l329 exponent-part: 'E' • digit-sequence\l330              | 'E' • sign digit-sequence\l"]
  854 -> 1341 [style=solid label="'+'"]
  854 -> 1342 [style=solid label="'-'"]
  854 -> 793 [style=solid label="'0'"]
  854 -> 794 [style=solid label="'1'"]
  854 -> 795 [style=solid label="'2'"]
  854 -> 796 [style=solid label="'3'"]
  854 -> 797 [style=solid label="'4'"]
  854 -> 798 [style=solid label="'5'"]
  854 -> 799 [style=solid label="'6'"]
  854 -> 800 [style=solid label="'7'"]
  854 -> 801 [style=solid label="'8'"]
  854 -> 802 [style=solid label="'9'"]
  854 -> 417 [style=dashed label="digit"]
  854 -> 1345 [style=dashed label="digit-sequence"]
  854 -> 1346 [style=dashed label="sign"]
  855 [label="State 855\n\l263 digit-sequence: digit-sequence digit •\l"]
  855 -> "855R263" [style=solid]
 "855R263" [label="R263", fillcolor=3, shape=diamond, style=filled]
  856 [label="State 856\n\l196 decimal-floating-point-literal: digit-sequence exponent-part •\l197                               | digit-sequence exponent-part • floating-point-suffix\l1166 user-defined-floating-point-literal: digit-sequence exponent-part • ud-suffix\l"]
  856 -> 826 [style=solid label="IDENTIFIER"]
  856 -> 861 [style=solid label="'L'"]
  856 -> 862 [style=solid label="'f'"]
  856 -> 863 [style=solid label="'l'"]
  856 -> 864 [style=solid label="'F'"]
  856 -> 1347 [style=dashed label="floating-point-suffix"]
  856 -> 1348 [style=dashed label="ud-suffix"]
  856 -> "856R196d" [label="[IDENTIFIER]", style=solid]
 "856R196d" [label="R196", fillcolor=5, shape=diamond, style=filled]
  856 -> "856R196" [style=solid]
 "856R196" [label="R196", fillcolor=3, shape=diamond, style=filled]
  857 [label="State 857\n\l126 character-literal: encoding-prefix '\\'' • c-char-sequence '\\''\l"]
  857 -> 784 [style=solid label="EXCEPT_THE_APOSTROPHE_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER"]
  857 -> 491 [style=solid label="'\\\\'"]
  857 -> 493 [style=solid label="\"\\\\x\""]
  857 -> 494 [style=solid label="\"\\\\u\""]
  857 -> 495 [style=solid label="\"\\\\U\""]
  857 -> 785 [style=dashed label="basic-c-char"]
  857 -> 786 [style=dashed label="c-char"]
  857 -> 1349 [style=dashed label="c-char-sequence"]
  857 -> 497 [style=dashed label="conditional-escape-sequence"]
  857 -> 788 [style=dashed label="escape-sequence"]
  857 -> 499 [style=dashed label="hexadecimal-escape-sequence"]
  857 -> 500 [style=dashed label="numeric-escape-sequence"]
  857 -> 501 [style=dashed label="octal-escape-sequence"]
  857 -> 504 [style=dashed label="simple-escape-sequence"]
  857 -> 789 [style=dashed label="universal-character-name"]
  858 [label="State 858\n\l308 equality-expression: equality-expression \"==\" • relational-expression\l"]
  858 -> 1 [style=solid label="IDENTIFIER"]
  858 -> 361 [style=solid label="'+'"]
  858 -> 362 [style=solid label="'-'"]
  858 -> 363 [style=solid label="'('"]
  858 -> 364 [style=solid label="'&'"]
  858 -> 365 [style=solid label="\"::\""]
  858 -> 366 [style=solid label="'['"]
  858 -> 367 [style=solid label="\"co_await\""]
  858 -> 368 [style=solid label="'0'"]
  858 -> 369 [style=solid label="'1'"]
  858 -> 370 [style=solid label="\"0b\""]
  858 -> 371 [style=solid label="\"0B\""]
  858 -> 372 [style=solid label="'\\''"]
  858 -> 373 [style=solid label="\"false\""]
  858 -> 374 [style=solid label="\"true\""]
  858 -> 375 [style=solid label="\"noexcept\""]
  858 -> 17 [style=solid label="\"operator\""]
  858 -> 26 [style=solid label="\"decltype\""]
  858 -> 376 [style=solid label="\"delete\""]
  858 -> 377 [style=solid label="'.'"]
  858 -> 378 [style=solid label="'2'"]
  858 -> 379 [style=solid label="'3'"]
  858 -> 380 [style=solid label="'4'"]
  858 -> 381 [style=solid label="'5'"]
  858 -> 382 [style=solid label="'6'"]
  858 -> 383 [style=solid label="'7'"]
  858 -> 384 [style=solid label="'8'"]
  858 -> 385 [style=solid label="'9'"]
  858 -> 185 [style=solid label="\"u8\""]
  858 -> 186 [style=solid label="'u'"]
  858 -> 187 [style=solid label="'U'"]
  858 -> 188 [style=solid label="'L'"]
  858 -> 386 [style=solid label="'*'"]
  858 -> 203 [style=solid label="'\"'"]
  858 -> 387 [style=solid label="\"0x\""]
  858 -> 388 [style=solid label="\"0X\""]
  858 -> 389 [style=solid label="\"requires\""]
  858 -> 390 [style=solid label="\"new\""]
  858 -> 391 [style=solid label="'~'"]
  858 -> 392 [style=solid label="'!'"]
  858 -> 393 [style=solid label="\"++\""]
  858 -> 394 [style=solid label="\"--\""]
  858 -> 395 [style=solid label="\"this\""]
  858 -> 37 [style=solid label="\"auto\""]
  858 -> 396 [style=solid label="\"nullptr\""]
  858 -> 397 [style=solid label="\"dynamic_cast\""]
  858 -> 398 [style=solid label="\"static_cast\""]
  858 -> 399 [style=solid label="\"reinterpret_cast\""]
  858 -> 400 [style=solid label="\"const_cast\""]
  858 -> 401 [style=solid label="\"typeid\""]
  858 -> 38 [style=solid label="\"char\""]
  858 -> 39 [style=solid label="\"char8_t\""]
  858 -> 40 [style=solid label="\"char16_t\""]
  858 -> 41 [style=solid label="\"char32_t\""]
  858 -> 42 [style=solid label="\"wchar_t\""]
  858 -> 43 [style=solid label="\"bool\""]
  858 -> 44 [style=solid label="\"short\""]
  858 -> 45 [style=solid label="\"int\""]
  858 -> 46 [style=solid label="\"long\""]
  858 -> 47 [style=solid label="\"signed\""]
  858 -> 48 [style=solid label="\"unsigned\""]
  858 -> 49 [style=solid label="\"float\""]
  858 -> 50 [style=solid label="\"double\""]
  858 -> 51 [style=solid label="\"void\""]
  858 -> 209 [style=solid label="'R'"]
  858 -> 56 [style=solid label="\"typename\""]
  858 -> 402 [style=solid label="\"sizeof\""]
  858 -> 403 [style=solid label="\"alignof\""]
  858 -> 404 [style=dashed label="additive-expression"]
  858 -> 406 [style=dashed label="await-expression"]
  858 -> 407 [style=dashed label="binary-literal"]
  858 -> 408 [style=dashed label="boolean-literal"]
  858 -> 409 [style=dashed label="cast-expression"]
  858 -> 410 [style=dashed label="character-literal"]
  858 -> 66 [style=dashed label="class-name"]
  858 -> 411 [style=dashed label="compare-expression"]
  858 -> 68 [style=dashed label="concept-name"]
  858 -> 69 [style=dashed label="conversion-function-id"]
  858 -> 414 [style=dashed label="decimal-floating-point-literal"]
  858 -> 415 [style=dashed label="decimal-literal"]
  858 -> 77 [style=dashed label="decltype-specifier"]
  858 -> 416 [style=dashed label="delete-expression"]
  858 -> 417 [style=dashed label="digit"]
  858 -> 418 [style=dashed label="digit-sequence"]
  858 -> 419 [style=dashed label="encoding-prefix"]
  858 -> 85 [style=dashed label="enum-name"]
  858 -> 422 [style=dashed label="floating-point-literal"]
  858 -> 423 [style=dashed label="fold-expression"]
  858 -> 424 [style=dashed label="fractional-constant"]
  858 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  858 -> 426 [style=dashed label="hexadecimal-literal"]
  858 -> 427 [style=dashed label="hexadecimal-prefix"]
  858 -> 428 [style=dashed label="id-expression"]
  858 -> 430 [style=dashed label="integer-literal"]
  858 -> 431 [style=dashed label="lambda-expression"]
  858 -> 432 [style=dashed label="lambda-introducer"]
  858 -> 433 [style=dashed label="literal"]
  858 -> 96 [style=dashed label="literal-operator-id"]
  858 -> 436 [style=dashed label="multiplicative-expression"]
  858 -> 100 [style=dashed label="namespace-alias"]
  858 -> 103 [style=dashed label="namespace-name"]
  858 -> 437 [style=dashed label="nested-name-specifier"]
  858 -> 438 [style=dashed label="new-expression"]
  858 -> 439 [style=dashed label="noexcept-expression"]
  858 -> 440 [style=dashed label="nonzero-digit"]
  858 -> 441 [style=dashed label="octal-literal"]
  858 -> 109 [style=dashed label="operator-function-id"]
  858 -> 110 [style=dashed label="placeholder-type-specifier"]
  858 -> 442 [style=dashed label="pm-expression"]
  858 -> 443 [style=dashed label="pointer-literal"]
  858 -> 444 [style=dashed label="postfix-expression"]
  858 -> 445 [style=dashed label="primary-expression"]
  858 -> 113 [style=dashed label="qualified-id"]
  858 -> 1350 [style=dashed label="relational-expression"]
  858 -> 447 [style=dashed label="requires-expression"]
  858 -> 448 [style=dashed label="shift-expression"]
  858 -> 115 [style=dashed label="simple-template-id"]
  858 -> 534 [style=dashed label="simple-type-specifier"]
  858 -> 450 [style=dashed label="string-literal"]
  858 -> 121 [style=dashed label="template-id"]
  858 -> 216 [style=dashed label="template-name"]
  858 -> 124 [style=dashed label="type-constraint"]
  858 -> 125 [style=dashed label="type-name"]
  858 -> 127 [style=dashed label="typedef-name"]
  858 -> 536 [style=dashed label="typename-specifier"]
  858 -> 454 [style=dashed label="unary-expression"]
  858 -> 455 [style=dashed label="unary-operator"]
  858 -> 130 [style=dashed label="unqualified-id"]
  858 -> 456 [style=dashed label="user-defined-character-literal"]
  858 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  858 -> 458 [style=dashed label="user-defined-integer-literal"]
  858 -> 459 [style=dashed label="user-defined-literal"]
  858 -> 460 [style=dashed label="user-defined-string-literal"]
  859 [label="State 859\n\l309 equality-expression: equality-expression \"!=\" • relational-expression\l"]
  859 -> 1 [style=solid label="IDENTIFIER"]
  859 -> 361 [style=solid label="'+'"]
  859 -> 362 [style=solid label="'-'"]
  859 -> 363 [style=solid label="'('"]
  859 -> 364 [style=solid label="'&'"]
  859 -> 365 [style=solid label="\"::\""]
  859 -> 366 [style=solid label="'['"]
  859 -> 367 [style=solid label="\"co_await\""]
  859 -> 368 [style=solid label="'0'"]
  859 -> 369 [style=solid label="'1'"]
  859 -> 370 [style=solid label="\"0b\""]
  859 -> 371 [style=solid label="\"0B\""]
  859 -> 372 [style=solid label="'\\''"]
  859 -> 373 [style=solid label="\"false\""]
  859 -> 374 [style=solid label="\"true\""]
  859 -> 375 [style=solid label="\"noexcept\""]
  859 -> 17 [style=solid label="\"operator\""]
  859 -> 26 [style=solid label="\"decltype\""]
  859 -> 376 [style=solid label="\"delete\""]
  859 -> 377 [style=solid label="'.'"]
  859 -> 378 [style=solid label="'2'"]
  859 -> 379 [style=solid label="'3'"]
  859 -> 380 [style=solid label="'4'"]
  859 -> 381 [style=solid label="'5'"]
  859 -> 382 [style=solid label="'6'"]
  859 -> 383 [style=solid label="'7'"]
  859 -> 384 [style=solid label="'8'"]
  859 -> 385 [style=solid label="'9'"]
  859 -> 185 [style=solid label="\"u8\""]
  859 -> 186 [style=solid label="'u'"]
  859 -> 187 [style=solid label="'U'"]
  859 -> 188 [style=solid label="'L'"]
  859 -> 386 [style=solid label="'*'"]
  859 -> 203 [style=solid label="'\"'"]
  859 -> 387 [style=solid label="\"0x\""]
  859 -> 388 [style=solid label="\"0X\""]
  859 -> 389 [style=solid label="\"requires\""]
  859 -> 390 [style=solid label="\"new\""]
  859 -> 391 [style=solid label="'~'"]
  859 -> 392 [style=solid label="'!'"]
  859 -> 393 [style=solid label="\"++\""]
  859 -> 394 [style=solid label="\"--\""]
  859 -> 395 [style=solid label="\"this\""]
  859 -> 37 [style=solid label="\"auto\""]
  859 -> 396 [style=solid label="\"nullptr\""]
  859 -> 397 [style=solid label="\"dynamic_cast\""]
  859 -> 398 [style=solid label="\"static_cast\""]
  859 -> 399 [style=solid label="\"reinterpret_cast\""]
  859 -> 400 [style=solid label="\"const_cast\""]
  859 -> 401 [style=solid label="\"typeid\""]
  859 -> 38 [style=solid label="\"char\""]
  859 -> 39 [style=solid label="\"char8_t\""]
  859 -> 40 [style=solid label="\"char16_t\""]
  859 -> 41 [style=solid label="\"char32_t\""]
  859 -> 42 [style=solid label="\"wchar_t\""]
  859 -> 43 [style=solid label="\"bool\""]
  859 -> 44 [style=solid label="\"short\""]
  859 -> 45 [style=solid label="\"int\""]
  859 -> 46 [style=solid label="\"long\""]
  859 -> 47 [style=solid label="\"signed\""]
  859 -> 48 [style=solid label="\"unsigned\""]
  859 -> 49 [style=solid label="\"float\""]
  859 -> 50 [style=solid label="\"double\""]
  859 -> 51 [style=solid label="\"void\""]
  859 -> 209 [style=solid label="'R'"]
  859 -> 56 [style=solid label="\"typename\""]
  859 -> 402 [style=solid label="\"sizeof\""]
  859 -> 403 [style=solid label="\"alignof\""]
  859 -> 404 [style=dashed label="additive-expression"]
  859 -> 406 [style=dashed label="await-expression"]
  859 -> 407 [style=dashed label="binary-literal"]
  859 -> 408 [style=dashed label="boolean-literal"]
  859 -> 409 [style=dashed label="cast-expression"]
  859 -> 410 [style=dashed label="character-literal"]
  859 -> 66 [style=dashed label="class-name"]
  859 -> 411 [style=dashed label="compare-expression"]
  859 -> 68 [style=dashed label="concept-name"]
  859 -> 69 [style=dashed label="conversion-function-id"]
  859 -> 414 [style=dashed label="decimal-floating-point-literal"]
  859 -> 415 [style=dashed label="decimal-literal"]
  859 -> 77 [style=dashed label="decltype-specifier"]
  859 -> 416 [style=dashed label="delete-expression"]
  859 -> 417 [style=dashed label="digit"]
  859 -> 418 [style=dashed label="digit-sequence"]
  859 -> 419 [style=dashed label="encoding-prefix"]
  859 -> 85 [style=dashed label="enum-name"]
  859 -> 422 [style=dashed label="floating-point-literal"]
  859 -> 423 [style=dashed label="fold-expression"]
  859 -> 424 [style=dashed label="fractional-constant"]
  859 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  859 -> 426 [style=dashed label="hexadecimal-literal"]
  859 -> 427 [style=dashed label="hexadecimal-prefix"]
  859 -> 428 [style=dashed label="id-expression"]
  859 -> 430 [style=dashed label="integer-literal"]
  859 -> 431 [style=dashed label="lambda-expression"]
  859 -> 432 [style=dashed label="lambda-introducer"]
  859 -> 433 [style=dashed label="literal"]
  859 -> 96 [style=dashed label="literal-operator-id"]
  859 -> 436 [style=dashed label="multiplicative-expression"]
  859 -> 100 [style=dashed label="namespace-alias"]
  859 -> 103 [style=dashed label="namespace-name"]
  859 -> 437 [style=dashed label="nested-name-specifier"]
  859 -> 438 [style=dashed label="new-expression"]
  859 -> 439 [style=dashed label="noexcept-expression"]
  859 -> 440 [style=dashed label="nonzero-digit"]
  859 -> 441 [style=dashed label="octal-literal"]
  859 -> 109 [style=dashed label="operator-function-id"]
  859 -> 110 [style=dashed label="placeholder-type-specifier"]
  859 -> 442 [style=dashed label="pm-expression"]
  859 -> 443 [style=dashed label="pointer-literal"]
  859 -> 444 [style=dashed label="postfix-expression"]
  859 -> 445 [style=dashed label="primary-expression"]
  859 -> 113 [style=dashed label="qualified-id"]
  859 -> 1351 [style=dashed label="relational-expression"]
  859 -> 447 [style=dashed label="requires-expression"]
  859 -> 448 [style=dashed label="shift-expression"]
  859 -> 115 [style=dashed label="simple-template-id"]
  859 -> 534 [style=dashed label="simple-type-specifier"]
  859 -> 450 [style=dashed label="string-literal"]
  859 -> 121 [style=dashed label="template-id"]
  859 -> 216 [style=dashed label="template-name"]
  859 -> 124 [style=dashed label="type-constraint"]
  859 -> 125 [style=dashed label="type-name"]
  859 -> 127 [style=dashed label="typedef-name"]
  859 -> 536 [style=dashed label="typename-specifier"]
  859 -> 454 [style=dashed label="unary-expression"]
  859 -> 455 [style=dashed label="unary-operator"]
  859 -> 130 [style=dashed label="unqualified-id"]
  859 -> 456 [style=dashed label="user-defined-character-literal"]
  859 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  859 -> 458 [style=dashed label="user-defined-integer-literal"]
  859 -> 459 [style=dashed label="user-defined-literal"]
  859 -> 460 [style=dashed label="user-defined-string-literal"]
  860 [label="State 860\n\l321 exclusive-or-expression: exclusive-or-expression '^' • and-expression\l"]
  860 -> 1 [style=solid label="IDENTIFIER"]
  860 -> 361 [style=solid label="'+'"]
  860 -> 362 [style=solid label="'-'"]
  860 -> 363 [style=solid label="'('"]
  860 -> 364 [style=solid label="'&'"]
  860 -> 365 [style=solid label="\"::\""]
  860 -> 366 [style=solid label="'['"]
  860 -> 367 [style=solid label="\"co_await\""]
  860 -> 368 [style=solid label="'0'"]
  860 -> 369 [style=solid label="'1'"]
  860 -> 370 [style=solid label="\"0b\""]
  860 -> 371 [style=solid label="\"0B\""]
  860 -> 372 [style=solid label="'\\''"]
  860 -> 373 [style=solid label="\"false\""]
  860 -> 374 [style=solid label="\"true\""]
  860 -> 375 [style=solid label="\"noexcept\""]
  860 -> 17 [style=solid label="\"operator\""]
  860 -> 26 [style=solid label="\"decltype\""]
  860 -> 376 [style=solid label="\"delete\""]
  860 -> 377 [style=solid label="'.'"]
  860 -> 378 [style=solid label="'2'"]
  860 -> 379 [style=solid label="'3'"]
  860 -> 380 [style=solid label="'4'"]
  860 -> 381 [style=solid label="'5'"]
  860 -> 382 [style=solid label="'6'"]
  860 -> 383 [style=solid label="'7'"]
  860 -> 384 [style=solid label="'8'"]
  860 -> 385 [style=solid label="'9'"]
  860 -> 185 [style=solid label="\"u8\""]
  860 -> 186 [style=solid label="'u'"]
  860 -> 187 [style=solid label="'U'"]
  860 -> 188 [style=solid label="'L'"]
  860 -> 386 [style=solid label="'*'"]
  860 -> 203 [style=solid label="'\"'"]
  860 -> 387 [style=solid label="\"0x\""]
  860 -> 388 [style=solid label="\"0X\""]
  860 -> 389 [style=solid label="\"requires\""]
  860 -> 390 [style=solid label="\"new\""]
  860 -> 391 [style=solid label="'~'"]
  860 -> 392 [style=solid label="'!'"]
  860 -> 393 [style=solid label="\"++\""]
  860 -> 394 [style=solid label="\"--\""]
  860 -> 395 [style=solid label="\"this\""]
  860 -> 37 [style=solid label="\"auto\""]
  860 -> 396 [style=solid label="\"nullptr\""]
  860 -> 397 [style=solid label="\"dynamic_cast\""]
  860 -> 398 [style=solid label="\"static_cast\""]
  860 -> 399 [style=solid label="\"reinterpret_cast\""]
  860 -> 400 [style=solid label="\"const_cast\""]
  860 -> 401 [style=solid label="\"typeid\""]
  860 -> 38 [style=solid label="\"char\""]
  860 -> 39 [style=solid label="\"char8_t\""]
  860 -> 40 [style=solid label="\"char16_t\""]
  860 -> 41 [style=solid label="\"char32_t\""]
  860 -> 42 [style=solid label="\"wchar_t\""]
  860 -> 43 [style=solid label="\"bool\""]
  860 -> 44 [style=solid label="\"short\""]
  860 -> 45 [style=solid label="\"int\""]
  860 -> 46 [style=solid label="\"long\""]
  860 -> 47 [style=solid label="\"signed\""]
  860 -> 48 [style=solid label="\"unsigned\""]
  860 -> 49 [style=solid label="\"float\""]
  860 -> 50 [style=solid label="\"double\""]
  860 -> 51 [style=solid label="\"void\""]
  860 -> 209 [style=solid label="'R'"]
  860 -> 56 [style=solid label="\"typename\""]
  860 -> 402 [style=solid label="\"sizeof\""]
  860 -> 403 [style=solid label="\"alignof\""]
  860 -> 404 [style=dashed label="additive-expression"]
  860 -> 1352 [style=dashed label="and-expression"]
  860 -> 406 [style=dashed label="await-expression"]
  860 -> 407 [style=dashed label="binary-literal"]
  860 -> 408 [style=dashed label="boolean-literal"]
  860 -> 409 [style=dashed label="cast-expression"]
  860 -> 410 [style=dashed label="character-literal"]
  860 -> 66 [style=dashed label="class-name"]
  860 -> 411 [style=dashed label="compare-expression"]
  860 -> 68 [style=dashed label="concept-name"]
  860 -> 69 [style=dashed label="conversion-function-id"]
  860 -> 414 [style=dashed label="decimal-floating-point-literal"]
  860 -> 415 [style=dashed label="decimal-literal"]
  860 -> 77 [style=dashed label="decltype-specifier"]
  860 -> 416 [style=dashed label="delete-expression"]
  860 -> 417 [style=dashed label="digit"]
  860 -> 418 [style=dashed label="digit-sequence"]
  860 -> 419 [style=dashed label="encoding-prefix"]
  860 -> 85 [style=dashed label="enum-name"]
  860 -> 420 [style=dashed label="equality-expression"]
  860 -> 422 [style=dashed label="floating-point-literal"]
  860 -> 423 [style=dashed label="fold-expression"]
  860 -> 424 [style=dashed label="fractional-constant"]
  860 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  860 -> 426 [style=dashed label="hexadecimal-literal"]
  860 -> 427 [style=dashed label="hexadecimal-prefix"]
  860 -> 428 [style=dashed label="id-expression"]
  860 -> 430 [style=dashed label="integer-literal"]
  860 -> 431 [style=dashed label="lambda-expression"]
  860 -> 432 [style=dashed label="lambda-introducer"]
  860 -> 433 [style=dashed label="literal"]
  860 -> 96 [style=dashed label="literal-operator-id"]
  860 -> 436 [style=dashed label="multiplicative-expression"]
  860 -> 100 [style=dashed label="namespace-alias"]
  860 -> 103 [style=dashed label="namespace-name"]
  860 -> 437 [style=dashed label="nested-name-specifier"]
  860 -> 438 [style=dashed label="new-expression"]
  860 -> 439 [style=dashed label="noexcept-expression"]
  860 -> 440 [style=dashed label="nonzero-digit"]
  860 -> 441 [style=dashed label="octal-literal"]
  860 -> 109 [style=dashed label="operator-function-id"]
  860 -> 110 [style=dashed label="placeholder-type-specifier"]
  860 -> 442 [style=dashed label="pm-expression"]
  860 -> 443 [style=dashed label="pointer-literal"]
  860 -> 444 [style=dashed label="postfix-expression"]
  860 -> 445 [style=dashed label="primary-expression"]
  860 -> 113 [style=dashed label="qualified-id"]
  860 -> 446 [style=dashed label="relational-expression"]
  860 -> 447 [style=dashed label="requires-expression"]
  860 -> 448 [style=dashed label="shift-expression"]
  860 -> 115 [style=dashed label="simple-template-id"]
  860 -> 534 [style=dashed label="simple-type-specifier"]
  860 -> 450 [style=dashed label="string-literal"]
  860 -> 121 [style=dashed label="template-id"]
  860 -> 216 [style=dashed label="template-name"]
  860 -> 124 [style=dashed label="type-constraint"]
  860 -> 125 [style=dashed label="type-name"]
  860 -> 127 [style=dashed label="typedef-name"]
  860 -> 536 [style=dashed label="typename-specifier"]
  860 -> 454 [style=dashed label="unary-expression"]
  860 -> 455 [style=dashed label="unary-operator"]
  860 -> 130 [style=dashed label="unqualified-id"]
  860 -> 456 [style=dashed label="user-defined-character-literal"]
  860 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  860 -> 458 [style=dashed label="user-defined-integer-literal"]
  860 -> 459 [style=dashed label="user-defined-literal"]
  860 -> 460 [style=dashed label="user-defined-string-literal"]
  861 [label="State 861\n\l347 floating-point-suffix: 'L' •\l"]
  861 -> "861R347" [style=solid]
 "861R347" [label="R347", fillcolor=3, shape=diamond, style=filled]
  862 [label="State 862\n\l344 floating-point-suffix: 'f' •\l"]
  862 -> "862R344" [style=solid]
 "862R344" [label="R344", fillcolor=3, shape=diamond, style=filled]
  863 [label="State 863\n\l345 floating-point-suffix: 'l' •\l"]
  863 -> "863R345" [style=solid]
 "863R345" [label="R345", fillcolor=3, shape=diamond, style=filled]
  864 [label="State 864\n\l346 floating-point-suffix: 'F' •\l"]
  864 -> "864R346" [style=solid]
 "864R346" [label="R346", fillcolor=3, shape=diamond, style=filled]
  865 [label="State 865\n\l193 decimal-floating-point-literal: fractional-constant exponent-part •\l195                               | fractional-constant exponent-part • floating-point-suffix\l1165 user-defined-floating-point-literal: fractional-constant exponent-part • ud-suffix\l"]
  865 -> 826 [style=solid label="IDENTIFIER"]
  865 -> 861 [style=solid label="'L'"]
  865 -> 862 [style=solid label="'f'"]
  865 -> 863 [style=solid label="'l'"]
  865 -> 864 [style=solid label="'F'"]
  865 -> 1353 [style=dashed label="floating-point-suffix"]
  865 -> 1354 [style=dashed label="ud-suffix"]
  865 -> "865R193d" [label="[IDENTIFIER]", style=solid]
 "865R193d" [label="R193", fillcolor=5, shape=diamond, style=filled]
  865 -> "865R193" [style=solid]
 "865R193" [label="R193", fillcolor=3, shape=diamond, style=filled]
  866 [label="State 866\n\l194 decimal-floating-point-literal: fractional-constant floating-point-suffix •\l"]
  866 -> "866R194" [style=solid]
 "866R194" [label="R194", fillcolor=3, shape=diamond, style=filled]
  867 [label="State 867\n\l1164 user-defined-floating-point-literal: fractional-constant ud-suffix •\l"]
  867 -> "867R1164" [style=solid]
 "867R1164" [label="R1164", fillcolor=3, shape=diamond, style=filled]
  868 [label="State 868\n\l496 integer-literal: hexadecimal-literal integer-suffix •\l"]
  868 -> "868R496" [style=solid]
 "868R496" [label="R496", fillcolor=3, shape=diamond, style=filled]
  869 [label="State 869\n\l1171 user-defined-integer-literal: hexadecimal-literal ud-suffix •\l"]
  869 -> "869R1171" [style=solid]
 "869R1171" [label="R1171", fillcolor=3, shape=diamond, style=filled]
  870 [label="State 870\n\l426 hexadecimal-digit: '0' •\l"]
  870 -> "870R426" [style=solid]
 "870R426" [label="R426", fillcolor=3, shape=diamond, style=filled]
  871 [label="State 871\n\l427 hexadecimal-digit: '1' •\l"]
  871 -> "871R427" [style=solid]
 "871R427" [label="R427", fillcolor=3, shape=diamond, style=filled]
  872 [label="State 872\n\l458 hexadecimal-fractional-constant: '.' • hexadecimal-digit-sequence\l"]
  872 -> 870 [style=solid label="'0'"]
  872 -> 871 [style=solid label="'1'"]
  872 -> 873 [style=solid label="'2'"]
  872 -> 874 [style=solid label="'3'"]
  872 -> 875 [style=solid label="'4'"]
  872 -> 876 [style=solid label="'5'"]
  872 -> 877 [style=solid label="'6'"]
  872 -> 878 [style=solid label="'7'"]
  872 -> 879 [style=solid label="'8'"]
  872 -> 880 [style=solid label="'9'"]
  872 -> 881 [style=solid label="'e'"]
  872 -> 882 [style=solid label="'E'"]
  872 -> 883 [style=solid label="'f'"]
  872 -> 884 [style=solid label="'F'"]
  872 -> 885 [style=solid label="'a'"]
  872 -> 886 [style=solid label="'b'"]
  872 -> 887 [style=solid label="'c'"]
  872 -> 888 [style=solid label="'d'"]
  872 -> 889 [style=solid label="'A'"]
  872 -> 890 [style=solid label="'B'"]
  872 -> 891 [style=solid label="'C'"]
  872 -> 892 [style=solid label="'D'"]
  872 -> 893 [style=dashed label="hexadecimal-digit"]
  872 -> 1355 [style=dashed label="hexadecimal-digit-sequence"]
  873 [label="State 873\n\l428 hexadecimal-digit: '2' •\l"]
  873 -> "873R428" [style=solid]
 "873R428" [label="R428", fillcolor=3, shape=diamond, style=filled]
  874 [label="State 874\n\l429 hexadecimal-digit: '3' •\l"]
  874 -> "874R429" [style=solid]
 "874R429" [label="R429", fillcolor=3, shape=diamond, style=filled]
  875 [label="State 875\n\l430 hexadecimal-digit: '4' •\l"]
  875 -> "875R430" [style=solid]
 "875R430" [label="R430", fillcolor=3, shape=diamond, style=filled]
  876 [label="State 876\n\l431 hexadecimal-digit: '5' •\l"]
  876 -> "876R431" [style=solid]
 "876R431" [label="R431", fillcolor=3, shape=diamond, style=filled]
  877 [label="State 877\n\l432 hexadecimal-digit: '6' •\l"]
  877 -> "877R432" [style=solid]
 "877R432" [label="R432", fillcolor=3, shape=diamond, style=filled]
  878 [label="State 878\n\l433 hexadecimal-digit: '7' •\l"]
  878 -> "878R433" [style=solid]
 "878R433" [label="R433", fillcolor=3, shape=diamond, style=filled]
  879 [label="State 879\n\l434 hexadecimal-digit: '8' •\l"]
  879 -> "879R434" [style=solid]
 "879R434" [label="R434", fillcolor=3, shape=diamond, style=filled]
  880 [label="State 880\n\l435 hexadecimal-digit: '9' •\l"]
  880 -> "880R435" [style=solid]
 "880R435" [label="R435", fillcolor=3, shape=diamond, style=filled]
  881 [label="State 881\n\l440 hexadecimal-digit: 'e' •\l"]
  881 -> "881R440" [style=solid]
 "881R440" [label="R440", fillcolor=3, shape=diamond, style=filled]
  882 [label="State 882\n\l446 hexadecimal-digit: 'E' •\l"]
  882 -> "882R446" [style=solid]
 "882R446" [label="R446", fillcolor=3, shape=diamond, style=filled]
  883 [label="State 883\n\l441 hexadecimal-digit: 'f' •\l"]
  883 -> "883R441" [style=solid]
 "883R441" [label="R441", fillcolor=3, shape=diamond, style=filled]
  884 [label="State 884\n\l447 hexadecimal-digit: 'F' •\l"]
  884 -> "884R447" [style=solid]
 "884R447" [label="R447", fillcolor=3, shape=diamond, style=filled]
  885 [label="State 885\n\l436 hexadecimal-digit: 'a' •\l"]
  885 -> "885R436" [style=solid]
 "885R436" [label="R436", fillcolor=3, shape=diamond, style=filled]
  886 [label="State 886\n\l437 hexadecimal-digit: 'b' •\l"]
  886 -> "886R437" [style=solid]
 "886R437" [label="R437", fillcolor=3, shape=diamond, style=filled]
  887 [label="State 887\n\l438 hexadecimal-digit: 'c' •\l"]
  887 -> "887R438" [style=solid]
 "887R438" [label="R438", fillcolor=3, shape=diamond, style=filled]
  888 [label="State 888\n\l439 hexadecimal-digit: 'd' •\l"]
  888 -> "888R439" [style=solid]
 "888R439" [label="R439", fillcolor=3, shape=diamond, style=filled]
  889 [label="State 889\n\l442 hexadecimal-digit: 'A' •\l"]
  889 -> "889R442" [style=solid]
 "889R442" [label="R442", fillcolor=3, shape=diamond, style=filled]
  890 [label="State 890\n\l443 hexadecimal-digit: 'B' •\l"]
  890 -> "890R443" [style=solid]
 "890R443" [label="R443", fillcolor=3, shape=diamond, style=filled]
  891 [label="State 891\n\l444 hexadecimal-digit: 'C' •\l"]
  891 -> "891R444" [style=solid]
 "891R444" [label="R444", fillcolor=3, shape=diamond, style=filled]
  892 [label="State 892\n\l445 hexadecimal-digit: 'D' •\l"]
  892 -> "892R445" [style=solid]
 "892R445" [label="R445", fillcolor=3, shape=diamond, style=filled]
  893 [label="State 893\n\l448 hexadecimal-digit-sequence: hexadecimal-digit •\l"]
  893 -> "893R448" [style=solid]
 "893R448" [label="R448", fillcolor=3, shape=diamond, style=filled]
  894 [label="State 894\n\l449 hexadecimal-digit-sequence: hexadecimal-digit-sequence • hexadecimal-digit\l450                           | hexadecimal-digit-sequence • '\\'' hexadecimal-digit\l455 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence • binary-exponent-part\l456                                   | hexadecimal-prefix hexadecimal-digit-sequence • binary-exponent-part floating-point-suffix\l457 hexadecimal-fractional-constant: hexadecimal-digit-sequence • '.' hexadecimal-digit-sequence\l459                                | hexadecimal-digit-sequence • '.'\l460 hexadecimal-literal: hexadecimal-prefix hexadecimal-digit-sequence •\l1168 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence • binary-exponent-part ud-suffix\l"]
  894 -> 870 [style=solid label="'0'"]
  894 -> 871 [style=solid label="'1'"]
  894 -> 1356 [style=solid label="'p'"]
  894 -> 1357 [style=solid label="'P'"]
  894 -> 1358 [style=solid label="'\\''"]
  894 -> 1359 [style=solid label="'.'"]
  894 -> 873 [style=solid label="'2'"]
  894 -> 874 [style=solid label="'3'"]
  894 -> 875 [style=solid label="'4'"]
  894 -> 876 [style=solid label="'5'"]
  894 -> 877 [style=solid label="'6'"]
  894 -> 878 [style=solid label="'7'"]
  894 -> 879 [style=solid label="'8'"]
  894 -> 880 [style=solid label="'9'"]
  894 -> 881 [style=solid label="'e'"]
  894 -> 882 [style=solid label="'E'"]
  894 -> 883 [style=solid label="'f'"]
  894 -> 884 [style=solid label="'F'"]
  894 -> 885 [style=solid label="'a'"]
  894 -> 886 [style=solid label="'b'"]
  894 -> 887 [style=solid label="'c'"]
  894 -> 888 [style=solid label="'d'"]
  894 -> 889 [style=solid label="'A'"]
  894 -> 890 [style=solid label="'B'"]
  894 -> 891 [style=solid label="'C'"]
  894 -> 892 [style=solid label="'D'"]
  894 -> 1360 [style=dashed label="binary-exponent-part"]
  894 -> 1361 [style=dashed label="hexadecimal-digit"]
  894 -> "894R460d" [label="['.']", style=solid]
 "894R460d" [label="R460", fillcolor=5, shape=diamond, style=filled]
  894 -> "894R460" [style=solid]
 "894R460" [label="R460", fillcolor=3, shape=diamond, style=filled]
  895 [label="State 895\n\l453 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant • binary-exponent-part\l454                                   | hexadecimal-prefix hexadecimal-fractional-constant • binary-exponent-part floating-point-suffix\l1167 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant • binary-exponent-part ud-suffix\l"]
  895 -> 1356 [style=solid label="'p'"]
  895 -> 1357 [style=solid label="'P'"]
  895 -> 1362 [style=dashed label="binary-exponent-part"]
  896 [label="State 896\n\l468 inclusive-or-expression: inclusive-or-expression '|' • exclusive-or-expression\l"]
  896 -> 1 [style=solid label="IDENTIFIER"]
  896 -> 361 [style=solid label="'+'"]
  896 -> 362 [style=solid label="'-'"]
  896 -> 363 [style=solid label="'('"]
  896 -> 364 [style=solid label="'&'"]
  896 -> 365 [style=solid label="\"::\""]
  896 -> 366 [style=solid label="'['"]
  896 -> 367 [style=solid label="\"co_await\""]
  896 -> 368 [style=solid label="'0'"]
  896 -> 369 [style=solid label="'1'"]
  896 -> 370 [style=solid label="\"0b\""]
  896 -> 371 [style=solid label="\"0B\""]
  896 -> 372 [style=solid label="'\\''"]
  896 -> 373 [style=solid label="\"false\""]
  896 -> 374 [style=solid label="\"true\""]
  896 -> 375 [style=solid label="\"noexcept\""]
  896 -> 17 [style=solid label="\"operator\""]
  896 -> 26 [style=solid label="\"decltype\""]
  896 -> 376 [style=solid label="\"delete\""]
  896 -> 377 [style=solid label="'.'"]
  896 -> 378 [style=solid label="'2'"]
  896 -> 379 [style=solid label="'3'"]
  896 -> 380 [style=solid label="'4'"]
  896 -> 381 [style=solid label="'5'"]
  896 -> 382 [style=solid label="'6'"]
  896 -> 383 [style=solid label="'7'"]
  896 -> 384 [style=solid label="'8'"]
  896 -> 385 [style=solid label="'9'"]
  896 -> 185 [style=solid label="\"u8\""]
  896 -> 186 [style=solid label="'u'"]
  896 -> 187 [style=solid label="'U'"]
  896 -> 188 [style=solid label="'L'"]
  896 -> 386 [style=solid label="'*'"]
  896 -> 203 [style=solid label="'\"'"]
  896 -> 387 [style=solid label="\"0x\""]
  896 -> 388 [style=solid label="\"0X\""]
  896 -> 389 [style=solid label="\"requires\""]
  896 -> 390 [style=solid label="\"new\""]
  896 -> 391 [style=solid label="'~'"]
  896 -> 392 [style=solid label="'!'"]
  896 -> 393 [style=solid label="\"++\""]
  896 -> 394 [style=solid label="\"--\""]
  896 -> 395 [style=solid label="\"this\""]
  896 -> 37 [style=solid label="\"auto\""]
  896 -> 396 [style=solid label="\"nullptr\""]
  896 -> 397 [style=solid label="\"dynamic_cast\""]
  896 -> 398 [style=solid label="\"static_cast\""]
  896 -> 399 [style=solid label="\"reinterpret_cast\""]
  896 -> 400 [style=solid label="\"const_cast\""]
  896 -> 401 [style=solid label="\"typeid\""]
  896 -> 38 [style=solid label="\"char\""]
  896 -> 39 [style=solid label="\"char8_t\""]
  896 -> 40 [style=solid label="\"char16_t\""]
  896 -> 41 [style=solid label="\"char32_t\""]
  896 -> 42 [style=solid label="\"wchar_t\""]
  896 -> 43 [style=solid label="\"bool\""]
  896 -> 44 [style=solid label="\"short\""]
  896 -> 45 [style=solid label="\"int\""]
  896 -> 46 [style=solid label="\"long\""]
  896 -> 47 [style=solid label="\"signed\""]
  896 -> 48 [style=solid label="\"unsigned\""]
  896 -> 49 [style=solid label="\"float\""]
  896 -> 50 [style=solid label="\"double\""]
  896 -> 51 [style=solid label="\"void\""]
  896 -> 209 [style=solid label="'R'"]
  896 -> 56 [style=solid label="\"typename\""]
  896 -> 402 [style=solid label="\"sizeof\""]
  896 -> 403 [style=solid label="\"alignof\""]
  896 -> 404 [style=dashed label="additive-expression"]
  896 -> 405 [style=dashed label="and-expression"]
  896 -> 406 [style=dashed label="await-expression"]
  896 -> 407 [style=dashed label="binary-literal"]
  896 -> 408 [style=dashed label="boolean-literal"]
  896 -> 409 [style=dashed label="cast-expression"]
  896 -> 410 [style=dashed label="character-literal"]
  896 -> 66 [style=dashed label="class-name"]
  896 -> 411 [style=dashed label="compare-expression"]
  896 -> 68 [style=dashed label="concept-name"]
  896 -> 69 [style=dashed label="conversion-function-id"]
  896 -> 414 [style=dashed label="decimal-floating-point-literal"]
  896 -> 415 [style=dashed label="decimal-literal"]
  896 -> 77 [style=dashed label="decltype-specifier"]
  896 -> 416 [style=dashed label="delete-expression"]
  896 -> 417 [style=dashed label="digit"]
  896 -> 418 [style=dashed label="digit-sequence"]
  896 -> 419 [style=dashed label="encoding-prefix"]
  896 -> 85 [style=dashed label="enum-name"]
  896 -> 420 [style=dashed label="equality-expression"]
  896 -> 1363 [style=dashed label="exclusive-or-expression"]
  896 -> 422 [style=dashed label="floating-point-literal"]
  896 -> 423 [style=dashed label="fold-expression"]
  896 -> 424 [style=dashed label="fractional-constant"]
  896 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  896 -> 426 [style=dashed label="hexadecimal-literal"]
  896 -> 427 [style=dashed label="hexadecimal-prefix"]
  896 -> 428 [style=dashed label="id-expression"]
  896 -> 430 [style=dashed label="integer-literal"]
  896 -> 431 [style=dashed label="lambda-expression"]
  896 -> 432 [style=dashed label="lambda-introducer"]
  896 -> 433 [style=dashed label="literal"]
  896 -> 96 [style=dashed label="literal-operator-id"]
  896 -> 436 [style=dashed label="multiplicative-expression"]
  896 -> 100 [style=dashed label="namespace-alias"]
  896 -> 103 [style=dashed label="namespace-name"]
  896 -> 437 [style=dashed label="nested-name-specifier"]
  896 -> 438 [style=dashed label="new-expression"]
  896 -> 439 [style=dashed label="noexcept-expression"]
  896 -> 440 [style=dashed label="nonzero-digit"]
  896 -> 441 [style=dashed label="octal-literal"]
  896 -> 109 [style=dashed label="operator-function-id"]
  896 -> 110 [style=dashed label="placeholder-type-specifier"]
  896 -> 442 [style=dashed label="pm-expression"]
  896 -> 443 [style=dashed label="pointer-literal"]
  896 -> 444 [style=dashed label="postfix-expression"]
  896 -> 445 [style=dashed label="primary-expression"]
  896 -> 113 [style=dashed label="qualified-id"]
  896 -> 446 [style=dashed label="relational-expression"]
  896 -> 447 [style=dashed label="requires-expression"]
  896 -> 448 [style=dashed label="shift-expression"]
  896 -> 115 [style=dashed label="simple-template-id"]
  896 -> 534 [style=dashed label="simple-type-specifier"]
  896 -> 450 [style=dashed label="string-literal"]
  896 -> 121 [style=dashed label="template-id"]
  896 -> 216 [style=dashed label="template-name"]
  896 -> 124 [style=dashed label="type-constraint"]
  896 -> 125 [style=dashed label="type-name"]
  896 -> 127 [style=dashed label="typedef-name"]
  896 -> 536 [style=dashed label="typename-specifier"]
  896 -> 454 [style=dashed label="unary-expression"]
  896 -> 455 [style=dashed label="unary-operator"]
  896 -> 130 [style=dashed label="unqualified-id"]
  896 -> 456 [style=dashed label="user-defined-character-literal"]
  896 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  896 -> 458 [style=dashed label="user-defined-integer-literal"]
  896 -> 459 [style=dashed label="user-defined-literal"]
  896 -> 460 [style=dashed label="user-defined-string-literal"]
  897 [label="State 897\n\l533 lambda-declarator: '(' • parameter-declaration-clause ')' lambda-specifiers\l534                  | '(' • parameter-declaration-clause ')' lambda-specifiers requires-clause\l"]
  897 -> 161 [style=solid label="IDENTIFIER"]
  897 -> 4 [style=solid label="\"alignas\""]
  897 -> 734 [style=solid label="\"...\""]
  897 -> 9 [style=solid label="\"::\""]
  897 -> 10 [style=solid label="'['"]
  897 -> 11 [style=solid label="\"virtual\""]
  897 -> 12 [style=solid label="\"class\""]
  897 -> 13 [style=solid label="\"struct\""]
  897 -> 14 [style=solid label="\"union\""]
  897 -> 18 [style=solid label="\"const\""]
  897 -> 19 [style=solid label="\"volatile\""]
  897 -> 20 [style=solid label="\"friend\""]
  897 -> 21 [style=solid label="\"typedef\""]
  897 -> 22 [style=solid label="\"constexpr\""]
  897 -> 23 [style=solid label="\"consteval\""]
  897 -> 24 [style=solid label="\"constinit\""]
  897 -> 263 [style=solid label="\"inline\""]
  897 -> 26 [style=solid label="\"decltype\""]
  897 -> 27 [style=solid label="\"enum\""]
  897 -> 264 [style=solid label="\"extern\""]
  897 -> 29 [style=solid label="\"explicit\""]
  897 -> 476 [style=solid label="\"this\""]
  897 -> 37 [style=solid label="\"auto\""]
  897 -> 38 [style=solid label="\"char\""]
  897 -> 39 [style=solid label="\"char8_t\""]
  897 -> 40 [style=solid label="\"char16_t\""]
  897 -> 41 [style=solid label="\"char32_t\""]
  897 -> 42 [style=solid label="\"wchar_t\""]
  897 -> 43 [style=solid label="\"bool\""]
  897 -> 44 [style=solid label="\"short\""]
  897 -> 45 [style=solid label="\"int\""]
  897 -> 46 [style=solid label="\"long\""]
  897 -> 47 [style=solid label="\"signed\""]
  897 -> 48 [style=solid label="\"unsigned\""]
  897 -> 49 [style=solid label="\"float\""]
  897 -> 50 [style=solid label="\"double\""]
  897 -> 51 [style=solid label="\"void\""]
  897 -> 53 [style=solid label="\"static\""]
  897 -> 54 [style=solid label="\"thread_local\""]
  897 -> 55 [style=solid label="\"mutable\""]
  897 -> 56 [style=solid label="\"typename\""]
  897 -> 58 [style=dashed label="alignment-specifier"]
  897 -> 61 [style=dashed label="attribute-specifier"]
  897 -> 478 [style=dashed label="attribute-specifier-seq"]
  897 -> 64 [style=dashed label="class-head"]
  897 -> 65 [style=dashed label="class-key"]
  897 -> 66 [style=dashed label="class-name"]
  897 -> 67 [style=dashed label="class-specifier"]
  897 -> 68 [style=dashed label="concept-name"]
  897 -> 70 [style=dashed label="cv-qualifier"]
  897 -> 71 [style=dashed label="decl-specifier"]
  897 -> 479 [style=dashed label="decl-specifier-seq"]
  897 -> 77 [style=dashed label="decltype-specifier"]
  897 -> 79 [style=dashed label="defining-type-specifier"]
  897 -> 80 [style=dashed label="elaborated-enum-specifier"]
  897 -> 81 [style=dashed label="elaborated-type-specifier"]
  897 -> 83 [style=dashed label="enum-head"]
  897 -> 268 [style=dashed label="enum-key"]
  897 -> 85 [style=dashed label="enum-name"]
  897 -> 86 [style=dashed label="enum-specifier"]
  897 -> 269 [style=dashed label="explicit-specifier"]
  897 -> 92 [style=dashed label="function-specifier"]
  897 -> 100 [style=dashed label="namespace-alias"]
  897 -> 103 [style=dashed label="namespace-name"]
  897 -> 213 [style=dashed label="nested-name-specifier"]
  897 -> 735 [style=dashed label="parameter-declaration"]
  897 -> 1364 [style=dashed label="parameter-declaration-clause"]
  897 -> 737 [style=dashed label="parameter-declaration-list"]
  897 -> 110 [style=dashed label="placeholder-type-specifier"]
  897 -> 142 [style=dashed label="simple-template-id"]
  897 -> 116 [style=dashed label="simple-type-specifier"]
  897 -> 118 [style=dashed label="storage-class-specifier"]
  897 -> 216 [style=dashed label="template-name"]
  897 -> 124 [style=dashed label="type-constraint"]
  897 -> 125 [style=dashed label="type-name"]
  897 -> 126 [style=dashed label="type-specifier"]
  897 -> 127 [style=dashed label="typedef-name"]
  897 -> 128 [style=dashed label="typename-specifier"]
  898 [label="State 898\n\l697 noexcept-specifier: \"noexcept\" • '(' constant-expression ')'\l698                   | \"noexcept\" •\l"]
  898 -> 1365 [style=solid label="'('"]
  898 -> "898R698d" [label="['(']", style=solid]
 "898R698d" [label="R698", fillcolor=5, shape=diamond, style=filled]
  898 -> "898R698" [style=solid]
 "898R698" [label="R698", fillcolor=3, shape=diamond, style=filled]
  899 [label="State 899\n\l536 lambda-expression: lambda-introducer '<' • template-parameter-list '>' lambda-declarator compound-statement\l537                  | lambda-introducer '<' • template-parameter-list '>' requires-clause lambda-declarator compound-statement\l"]
  899 -> 161 [style=solid label="IDENTIFIER"]
  899 -> 4 [style=solid label="\"alignas\""]
  899 -> 9 [style=solid label="\"::\""]
  899 -> 10 [style=solid label="'['"]
  899 -> 11 [style=solid label="\"virtual\""]
  899 -> 473 [style=solid label="\"class\""]
  899 -> 13 [style=solid label="\"struct\""]
  899 -> 14 [style=solid label="\"union\""]
  899 -> 474 [style=solid label="\"template\""]
  899 -> 18 [style=solid label="\"const\""]
  899 -> 19 [style=solid label="\"volatile\""]
  899 -> 20 [style=solid label="\"friend\""]
  899 -> 21 [style=solid label="\"typedef\""]
  899 -> 22 [style=solid label="\"constexpr\""]
  899 -> 23 [style=solid label="\"consteval\""]
  899 -> 24 [style=solid label="\"constinit\""]
  899 -> 263 [style=solid label="\"inline\""]
  899 -> 26 [style=solid label="\"decltype\""]
  899 -> 27 [style=solid label="\"enum\""]
  899 -> 264 [style=solid label="\"extern\""]
  899 -> 29 [style=solid label="\"explicit\""]
  899 -> 476 [style=solid label="\"this\""]
  899 -> 37 [style=solid label="\"auto\""]
  899 -> 38 [style=solid label="\"char\""]
  899 -> 39 [style=solid label="\"char8_t\""]
  899 -> 40 [style=solid label="\"char16_t\""]
  899 -> 41 [style=solid label="\"char32_t\""]
  899 -> 42 [style=solid label="\"wchar_t\""]
  899 -> 43 [style=solid label="\"bool\""]
  899 -> 44 [style=solid label="\"short\""]
  899 -> 45 [style=solid label="\"int\""]
  899 -> 46 [style=solid label="\"long\""]
  899 -> 47 [style=solid label="\"signed\""]
  899 -> 48 [style=solid label="\"unsigned\""]
  899 -> 49 [style=solid label="\"float\""]
  899 -> 50 [style=solid label="\"double\""]
  899 -> 51 [style=solid label="\"void\""]
  899 -> 53 [style=solid label="\"static\""]
  899 -> 54 [style=solid label="\"thread_local\""]
  899 -> 55 [style=solid label="\"mutable\""]
  899 -> 477 [style=solid label="\"typename\""]
  899 -> 58 [style=dashed label="alignment-specifier"]
  899 -> 61 [style=dashed label="attribute-specifier"]
  899 -> 478 [style=dashed label="attribute-specifier-seq"]
  899 -> 64 [style=dashed label="class-head"]
  899 -> 65 [style=dashed label="class-key"]
  899 -> 66 [style=dashed label="class-name"]
  899 -> 67 [style=dashed label="class-specifier"]
  899 -> 68 [style=dashed label="concept-name"]
  899 -> 70 [style=dashed label="cv-qualifier"]
  899 -> 71 [style=dashed label="decl-specifier"]
  899 -> 479 [style=dashed label="decl-specifier-seq"]
  899 -> 77 [style=dashed label="decltype-specifier"]
  899 -> 79 [style=dashed label="defining-type-specifier"]
  899 -> 80 [style=dashed label="elaborated-enum-specifier"]
  899 -> 81 [style=dashed label="elaborated-type-specifier"]
  899 -> 83 [style=dashed label="enum-head"]
  899 -> 268 [style=dashed label="enum-key"]
  899 -> 85 [style=dashed label="enum-name"]
  899 -> 86 [style=dashed label="enum-specifier"]
  899 -> 269 [style=dashed label="explicit-specifier"]
  899 -> 92 [style=dashed label="function-specifier"]
  899 -> 100 [style=dashed label="namespace-alias"]
  899 -> 103 [style=dashed label="namespace-name"]
  899 -> 213 [style=dashed label="nested-name-specifier"]
  899 -> 480 [style=dashed label="parameter-declaration"]
  899 -> 110 [style=dashed label="placeholder-type-specifier"]
  899 -> 142 [style=dashed label="simple-template-id"]
  899 -> 116 [style=dashed label="simple-type-specifier"]
  899 -> 118 [style=dashed label="storage-class-specifier"]
  899 -> 481 [style=dashed label="template-head"]
  899 -> 216 [style=dashed label="template-name"]
  899 -> 482 [style=dashed label="template-parameter"]
  899 -> 1366 [style=dashed label="template-parameter-list"]
  899 -> 484 [style=dashed label="type-constraint"]
  899 -> 125 [style=dashed label="type-name"]
  899 -> 485 [style=dashed label="type-parameter"]
  899 -> 486 [style=dashed label="type-parameter-key"]
  899 -> 126 [style=dashed label="type-specifier"]
  899 -> 127 [style=dashed label="typedef-name"]
  899 -> 128 [style=dashed label="typename-specifier"]
  900 [label="State 900\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l544 lambda-specifiers: attribute-specifier-seq •\l552                  | attribute-specifier-seq • trailing-return-type\l"]
  900 -> 4 [style=solid label="\"alignas\""]
  900 -> 10 [style=solid label="'['"]
  900 -> 740 [style=solid label="\"->\""]
  900 -> 58 [style=dashed label="alignment-specifier"]
  900 -> 265 [style=dashed label="attribute-specifier"]
  900 -> 1367 [style=dashed label="trailing-return-type"]
  900 -> "900R544" [style=solid]
 "900R544" [label="R544", fillcolor=3, shape=diamond, style=filled]
  901 [label="State 901\n\l540 lambda-specifiers: decl-specifier-seq •\l541                  | decl-specifier-seq • noexcept-specifier\l543                  | decl-specifier-seq • attribute-specifier-seq\l545                  | decl-specifier-seq • noexcept-specifier attribute-specifier-seq\l547                  | decl-specifier-seq • trailing-return-type\l549                  | decl-specifier-seq • noexcept-specifier trailing-return-type\l551                  | decl-specifier-seq • attribute-specifier-seq trailing-return-type\l553                  | decl-specifier-seq • noexcept-specifier attribute-specifier-seq trailing-return-type\l"]
  901 -> 4 [style=solid label="\"alignas\""]
  901 -> 10 [style=solid label="'['"]
  901 -> 898 [style=solid label="\"noexcept\""]
  901 -> 740 [style=solid label="\"->\""]
  901 -> 58 [style=dashed label="alignment-specifier"]
  901 -> 61 [style=dashed label="attribute-specifier"]
  901 -> 1368 [style=dashed label="attribute-specifier-seq"]
  901 -> 1369 [style=dashed label="noexcept-specifier"]
  901 -> 1370 [style=dashed label="trailing-return-type"]
  901 -> "901R540" [style=solid]
 "901R540" [label="R540", fillcolor=3, shape=diamond, style=filled]
  902 [label="State 902\n\l535 lambda-expression: lambda-introducer lambda-declarator • compound-statement\l"]
  902 -> 294 [style=solid label="'{'"]
  902 -> 1371 [style=dashed label="compound-statement"]
  903 [label="State 903\n\l532 lambda-declarator: lambda-specifiers •\l"]
  903 -> "903R532" [style=solid]
 "903R532" [label="R532", fillcolor=3, shape=diamond, style=filled]
  904 [label="State 904\n\l542 lambda-specifiers: noexcept-specifier •\l546                  | noexcept-specifier • attribute-specifier-seq\l550                  | noexcept-specifier • trailing-return-type\l554                  | noexcept-specifier • attribute-specifier-seq trailing-return-type\l"]
  904 -> 4 [style=solid label="\"alignas\""]
  904 -> 10 [style=solid label="'['"]
  904 -> 740 [style=solid label="\"->\""]
  904 -> 58 [style=dashed label="alignment-specifier"]
  904 -> 61 [style=dashed label="attribute-specifier"]
  904 -> 1372 [style=dashed label="attribute-specifier-seq"]
  904 -> 1373 [style=dashed label="trailing-return-type"]
  904 -> "904R542" [style=solid]
 "904R542" [label="R542", fillcolor=3, shape=diamond, style=filled]
  905 [label="State 905\n\l548 lambda-specifiers: trailing-return-type •\l"]
  905 -> "905R548" [style=solid]
 "905R548" [label="R548", fillcolor=3, shape=diamond, style=filled]
  906 [label="State 906\n\l568 logical-and-expression: logical-and-expression \"&&\" • inclusive-or-expression\l"]
  906 -> 1 [style=solid label="IDENTIFIER"]
  906 -> 361 [style=solid label="'+'"]
  906 -> 362 [style=solid label="'-'"]
  906 -> 363 [style=solid label="'('"]
  906 -> 364 [style=solid label="'&'"]
  906 -> 365 [style=solid label="\"::\""]
  906 -> 366 [style=solid label="'['"]
  906 -> 367 [style=solid label="\"co_await\""]
  906 -> 368 [style=solid label="'0'"]
  906 -> 369 [style=solid label="'1'"]
  906 -> 370 [style=solid label="\"0b\""]
  906 -> 371 [style=solid label="\"0B\""]
  906 -> 372 [style=solid label="'\\''"]
  906 -> 373 [style=solid label="\"false\""]
  906 -> 374 [style=solid label="\"true\""]
  906 -> 375 [style=solid label="\"noexcept\""]
  906 -> 17 [style=solid label="\"operator\""]
  906 -> 26 [style=solid label="\"decltype\""]
  906 -> 376 [style=solid label="\"delete\""]
  906 -> 377 [style=solid label="'.'"]
  906 -> 378 [style=solid label="'2'"]
  906 -> 379 [style=solid label="'3'"]
  906 -> 380 [style=solid label="'4'"]
  906 -> 381 [style=solid label="'5'"]
  906 -> 382 [style=solid label="'6'"]
  906 -> 383 [style=solid label="'7'"]
  906 -> 384 [style=solid label="'8'"]
  906 -> 385 [style=solid label="'9'"]
  906 -> 185 [style=solid label="\"u8\""]
  906 -> 186 [style=solid label="'u'"]
  906 -> 187 [style=solid label="'U'"]
  906 -> 188 [style=solid label="'L'"]
  906 -> 386 [style=solid label="'*'"]
  906 -> 203 [style=solid label="'\"'"]
  906 -> 387 [style=solid label="\"0x\""]
  906 -> 388 [style=solid label="\"0X\""]
  906 -> 389 [style=solid label="\"requires\""]
  906 -> 390 [style=solid label="\"new\""]
  906 -> 391 [style=solid label="'~'"]
  906 -> 392 [style=solid label="'!'"]
  906 -> 393 [style=solid label="\"++\""]
  906 -> 394 [style=solid label="\"--\""]
  906 -> 395 [style=solid label="\"this\""]
  906 -> 37 [style=solid label="\"auto\""]
  906 -> 396 [style=solid label="\"nullptr\""]
  906 -> 397 [style=solid label="\"dynamic_cast\""]
  906 -> 398 [style=solid label="\"static_cast\""]
  906 -> 399 [style=solid label="\"reinterpret_cast\""]
  906 -> 400 [style=solid label="\"const_cast\""]
  906 -> 401 [style=solid label="\"typeid\""]
  906 -> 38 [style=solid label="\"char\""]
  906 -> 39 [style=solid label="\"char8_t\""]
  906 -> 40 [style=solid label="\"char16_t\""]
  906 -> 41 [style=solid label="\"char32_t\""]
  906 -> 42 [style=solid label="\"wchar_t\""]
  906 -> 43 [style=solid label="\"bool\""]
  906 -> 44 [style=solid label="\"short\""]
  906 -> 45 [style=solid label="\"int\""]
  906 -> 46 [style=solid label="\"long\""]
  906 -> 47 [style=solid label="\"signed\""]
  906 -> 48 [style=solid label="\"unsigned\""]
  906 -> 49 [style=solid label="\"float\""]
  906 -> 50 [style=solid label="\"double\""]
  906 -> 51 [style=solid label="\"void\""]
  906 -> 209 [style=solid label="'R'"]
  906 -> 56 [style=solid label="\"typename\""]
  906 -> 402 [style=solid label="\"sizeof\""]
  906 -> 403 [style=solid label="\"alignof\""]
  906 -> 404 [style=dashed label="additive-expression"]
  906 -> 405 [style=dashed label="and-expression"]
  906 -> 406 [style=dashed label="await-expression"]
  906 -> 407 [style=dashed label="binary-literal"]
  906 -> 408 [style=dashed label="boolean-literal"]
  906 -> 409 [style=dashed label="cast-expression"]
  906 -> 410 [style=dashed label="character-literal"]
  906 -> 66 [style=dashed label="class-name"]
  906 -> 411 [style=dashed label="compare-expression"]
  906 -> 68 [style=dashed label="concept-name"]
  906 -> 69 [style=dashed label="conversion-function-id"]
  906 -> 414 [style=dashed label="decimal-floating-point-literal"]
  906 -> 415 [style=dashed label="decimal-literal"]
  906 -> 77 [style=dashed label="decltype-specifier"]
  906 -> 416 [style=dashed label="delete-expression"]
  906 -> 417 [style=dashed label="digit"]
  906 -> 418 [style=dashed label="digit-sequence"]
  906 -> 419 [style=dashed label="encoding-prefix"]
  906 -> 85 [style=dashed label="enum-name"]
  906 -> 420 [style=dashed label="equality-expression"]
  906 -> 421 [style=dashed label="exclusive-or-expression"]
  906 -> 422 [style=dashed label="floating-point-literal"]
  906 -> 423 [style=dashed label="fold-expression"]
  906 -> 424 [style=dashed label="fractional-constant"]
  906 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  906 -> 426 [style=dashed label="hexadecimal-literal"]
  906 -> 427 [style=dashed label="hexadecimal-prefix"]
  906 -> 428 [style=dashed label="id-expression"]
  906 -> 1374 [style=dashed label="inclusive-or-expression"]
  906 -> 430 [style=dashed label="integer-literal"]
  906 -> 431 [style=dashed label="lambda-expression"]
  906 -> 432 [style=dashed label="lambda-introducer"]
  906 -> 433 [style=dashed label="literal"]
  906 -> 96 [style=dashed label="literal-operator-id"]
  906 -> 436 [style=dashed label="multiplicative-expression"]
  906 -> 100 [style=dashed label="namespace-alias"]
  906 -> 103 [style=dashed label="namespace-name"]
  906 -> 437 [style=dashed label="nested-name-specifier"]
  906 -> 438 [style=dashed label="new-expression"]
  906 -> 439 [style=dashed label="noexcept-expression"]
  906 -> 440 [style=dashed label="nonzero-digit"]
  906 -> 441 [style=dashed label="octal-literal"]
  906 -> 109 [style=dashed label="operator-function-id"]
  906 -> 110 [style=dashed label="placeholder-type-specifier"]
  906 -> 442 [style=dashed label="pm-expression"]
  906 -> 443 [style=dashed label="pointer-literal"]
  906 -> 444 [style=dashed label="postfix-expression"]
  906 -> 445 [style=dashed label="primary-expression"]
  906 -> 113 [style=dashed label="qualified-id"]
  906 -> 446 [style=dashed label="relational-expression"]
  906 -> 447 [style=dashed label="requires-expression"]
  906 -> 448 [style=dashed label="shift-expression"]
  906 -> 115 [style=dashed label="simple-template-id"]
  906 -> 534 [style=dashed label="simple-type-specifier"]
  906 -> 450 [style=dashed label="string-literal"]
  906 -> 121 [style=dashed label="template-id"]
  906 -> 216 [style=dashed label="template-name"]
  906 -> 124 [style=dashed label="type-constraint"]
  906 -> 125 [style=dashed label="type-name"]
  906 -> 127 [style=dashed label="typedef-name"]
  906 -> 536 [style=dashed label="typename-specifier"]
  906 -> 454 [style=dashed label="unary-expression"]
  906 -> 455 [style=dashed label="unary-operator"]
  906 -> 130 [style=dashed label="unqualified-id"]
  906 -> 456 [style=dashed label="user-defined-character-literal"]
  906 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  906 -> 458 [style=dashed label="user-defined-integer-literal"]
  906 -> 459 [style=dashed label="user-defined-literal"]
  906 -> 460 [style=dashed label="user-defined-string-literal"]
  907 [label="State 907\n\l170 conditional-expression: logical-or-expression '?' • expression ':' assignment-expression\l"]
  907 -> 1 [style=solid label="IDENTIFIER"]
  907 -> 361 [style=solid label="'+'"]
  907 -> 362 [style=solid label="'-'"]
  907 -> 363 [style=solid label="'('"]
  907 -> 364 [style=solid label="'&'"]
  907 -> 365 [style=solid label="\"::\""]
  907 -> 366 [style=solid label="'['"]
  907 -> 367 [style=solid label="\"co_await\""]
  907 -> 368 [style=solid label="'0'"]
  907 -> 369 [style=solid label="'1'"]
  907 -> 370 [style=solid label="\"0b\""]
  907 -> 371 [style=solid label="\"0B\""]
  907 -> 372 [style=solid label="'\\''"]
  907 -> 373 [style=solid label="\"false\""]
  907 -> 374 [style=solid label="\"true\""]
  907 -> 375 [style=solid label="\"noexcept\""]
  907 -> 17 [style=solid label="\"operator\""]
  907 -> 26 [style=solid label="\"decltype\""]
  907 -> 376 [style=solid label="\"delete\""]
  907 -> 377 [style=solid label="'.'"]
  907 -> 378 [style=solid label="'2'"]
  907 -> 379 [style=solid label="'3'"]
  907 -> 380 [style=solid label="'4'"]
  907 -> 381 [style=solid label="'5'"]
  907 -> 382 [style=solid label="'6'"]
  907 -> 383 [style=solid label="'7'"]
  907 -> 384 [style=solid label="'8'"]
  907 -> 385 [style=solid label="'9'"]
  907 -> 185 [style=solid label="\"u8\""]
  907 -> 186 [style=solid label="'u'"]
  907 -> 187 [style=solid label="'U'"]
  907 -> 188 [style=solid label="'L'"]
  907 -> 386 [style=solid label="'*'"]
  907 -> 203 [style=solid label="'\"'"]
  907 -> 387 [style=solid label="\"0x\""]
  907 -> 388 [style=solid label="\"0X\""]
  907 -> 389 [style=solid label="\"requires\""]
  907 -> 390 [style=solid label="\"new\""]
  907 -> 391 [style=solid label="'~'"]
  907 -> 392 [style=solid label="'!'"]
  907 -> 393 [style=solid label="\"++\""]
  907 -> 394 [style=solid label="\"--\""]
  907 -> 395 [style=solid label="\"this\""]
  907 -> 37 [style=solid label="\"auto\""]
  907 -> 396 [style=solid label="\"nullptr\""]
  907 -> 397 [style=solid label="\"dynamic_cast\""]
  907 -> 398 [style=solid label="\"static_cast\""]
  907 -> 399 [style=solid label="\"reinterpret_cast\""]
  907 -> 400 [style=solid label="\"const_cast\""]
  907 -> 401 [style=solid label="\"typeid\""]
  907 -> 38 [style=solid label="\"char\""]
  907 -> 39 [style=solid label="\"char8_t\""]
  907 -> 40 [style=solid label="\"char16_t\""]
  907 -> 41 [style=solid label="\"char32_t\""]
  907 -> 42 [style=solid label="\"wchar_t\""]
  907 -> 43 [style=solid label="\"bool\""]
  907 -> 44 [style=solid label="\"short\""]
  907 -> 45 [style=solid label="\"int\""]
  907 -> 46 [style=solid label="\"long\""]
  907 -> 47 [style=solid label="\"signed\""]
  907 -> 48 [style=solid label="\"unsigned\""]
  907 -> 49 [style=solid label="\"float\""]
  907 -> 50 [style=solid label="\"double\""]
  907 -> 51 [style=solid label="\"void\""]
  907 -> 209 [style=solid label="'R'"]
  907 -> 528 [style=solid label="\"throw\""]
  907 -> 56 [style=solid label="\"typename\""]
  907 -> 402 [style=solid label="\"sizeof\""]
  907 -> 403 [style=solid label="\"alignof\""]
  907 -> 529 [style=solid label="\"co_yield\""]
  907 -> 404 [style=dashed label="additive-expression"]
  907 -> 405 [style=dashed label="and-expression"]
  907 -> 530 [style=dashed label="assignment-expression"]
  907 -> 406 [style=dashed label="await-expression"]
  907 -> 407 [style=dashed label="binary-literal"]
  907 -> 408 [style=dashed label="boolean-literal"]
  907 -> 409 [style=dashed label="cast-expression"]
  907 -> 410 [style=dashed label="character-literal"]
  907 -> 66 [style=dashed label="class-name"]
  907 -> 411 [style=dashed label="compare-expression"]
  907 -> 68 [style=dashed label="concept-name"]
  907 -> 531 [style=dashed label="conditional-expression"]
  907 -> 69 [style=dashed label="conversion-function-id"]
  907 -> 414 [style=dashed label="decimal-floating-point-literal"]
  907 -> 415 [style=dashed label="decimal-literal"]
  907 -> 77 [style=dashed label="decltype-specifier"]
  907 -> 416 [style=dashed label="delete-expression"]
  907 -> 417 [style=dashed label="digit"]
  907 -> 418 [style=dashed label="digit-sequence"]
  907 -> 419 [style=dashed label="encoding-prefix"]
  907 -> 85 [style=dashed label="enum-name"]
  907 -> 420 [style=dashed label="equality-expression"]
  907 -> 421 [style=dashed label="exclusive-or-expression"]
  907 -> 1375 [style=dashed label="expression"]
  907 -> 422 [style=dashed label="floating-point-literal"]
  907 -> 423 [style=dashed label="fold-expression"]
  907 -> 424 [style=dashed label="fractional-constant"]
  907 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  907 -> 426 [style=dashed label="hexadecimal-literal"]
  907 -> 427 [style=dashed label="hexadecimal-prefix"]
  907 -> 428 [style=dashed label="id-expression"]
  907 -> 429 [style=dashed label="inclusive-or-expression"]
  907 -> 430 [style=dashed label="integer-literal"]
  907 -> 431 [style=dashed label="lambda-expression"]
  907 -> 432 [style=dashed label="lambda-introducer"]
  907 -> 433 [style=dashed label="literal"]
  907 -> 96 [style=dashed label="literal-operator-id"]
  907 -> 434 [style=dashed label="logical-and-expression"]
  907 -> 533 [style=dashed label="logical-or-expression"]
  907 -> 436 [style=dashed label="multiplicative-expression"]
  907 -> 100 [style=dashed label="namespace-alias"]
  907 -> 103 [style=dashed label="namespace-name"]
  907 -> 437 [style=dashed label="nested-name-specifier"]
  907 -> 438 [style=dashed label="new-expression"]
  907 -> 439 [style=dashed label="noexcept-expression"]
  907 -> 440 [style=dashed label="nonzero-digit"]
  907 -> 441 [style=dashed label="octal-literal"]
  907 -> 109 [style=dashed label="operator-function-id"]
  907 -> 110 [style=dashed label="placeholder-type-specifier"]
  907 -> 442 [style=dashed label="pm-expression"]
  907 -> 443 [style=dashed label="pointer-literal"]
  907 -> 444 [style=dashed label="postfix-expression"]
  907 -> 445 [style=dashed label="primary-expression"]
  907 -> 113 [style=dashed label="qualified-id"]
  907 -> 446 [style=dashed label="relational-expression"]
  907 -> 447 [style=dashed label="requires-expression"]
  907 -> 448 [style=dashed label="shift-expression"]
  907 -> 115 [style=dashed label="simple-template-id"]
  907 -> 534 [style=dashed label="simple-type-specifier"]
  907 -> 450 [style=dashed label="string-literal"]
  907 -> 121 [style=dashed label="template-id"]
  907 -> 216 [style=dashed label="template-name"]
  907 -> 535 [style=dashed label="throw-expression"]
  907 -> 124 [style=dashed label="type-constraint"]
  907 -> 125 [style=dashed label="type-name"]
  907 -> 127 [style=dashed label="typedef-name"]
  907 -> 536 [style=dashed label="typename-specifier"]
  907 -> 454 [style=dashed label="unary-expression"]
  907 -> 455 [style=dashed label="unary-operator"]
  907 -> 130 [style=dashed label="unqualified-id"]
  907 -> 456 [style=dashed label="user-defined-character-literal"]
  907 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  907 -> 458 [style=dashed label="user-defined-integer-literal"]
  907 -> 459 [style=dashed label="user-defined-literal"]
  907 -> 460 [style=dashed label="user-defined-string-literal"]
  907 -> 537 [style=dashed label="yield-expression"]
  908 [label="State 908\n\l570 logical-or-expression: logical-or-expression \"||\" • logical-and-expression\l"]
  908 -> 1 [style=solid label="IDENTIFIER"]
  908 -> 361 [style=solid label="'+'"]
  908 -> 362 [style=solid label="'-'"]
  908 -> 363 [style=solid label="'('"]
  908 -> 364 [style=solid label="'&'"]
  908 -> 365 [style=solid label="\"::\""]
  908 -> 366 [style=solid label="'['"]
  908 -> 367 [style=solid label="\"co_await\""]
  908 -> 368 [style=solid label="'0'"]
  908 -> 369 [style=solid label="'1'"]
  908 -> 370 [style=solid label="\"0b\""]
  908 -> 371 [style=solid label="\"0B\""]
  908 -> 372 [style=solid label="'\\''"]
  908 -> 373 [style=solid label="\"false\""]
  908 -> 374 [style=solid label="\"true\""]
  908 -> 375 [style=solid label="\"noexcept\""]
  908 -> 17 [style=solid label="\"operator\""]
  908 -> 26 [style=solid label="\"decltype\""]
  908 -> 376 [style=solid label="\"delete\""]
  908 -> 377 [style=solid label="'.'"]
  908 -> 378 [style=solid label="'2'"]
  908 -> 379 [style=solid label="'3'"]
  908 -> 380 [style=solid label="'4'"]
  908 -> 381 [style=solid label="'5'"]
  908 -> 382 [style=solid label="'6'"]
  908 -> 383 [style=solid label="'7'"]
  908 -> 384 [style=solid label="'8'"]
  908 -> 385 [style=solid label="'9'"]
  908 -> 185 [style=solid label="\"u8\""]
  908 -> 186 [style=solid label="'u'"]
  908 -> 187 [style=solid label="'U'"]
  908 -> 188 [style=solid label="'L'"]
  908 -> 386 [style=solid label="'*'"]
  908 -> 203 [style=solid label="'\"'"]
  908 -> 387 [style=solid label="\"0x\""]
  908 -> 388 [style=solid label="\"0X\""]
  908 -> 389 [style=solid label="\"requires\""]
  908 -> 390 [style=solid label="\"new\""]
  908 -> 391 [style=solid label="'~'"]
  908 -> 392 [style=solid label="'!'"]
  908 -> 393 [style=solid label="\"++\""]
  908 -> 394 [style=solid label="\"--\""]
  908 -> 395 [style=solid label="\"this\""]
  908 -> 37 [style=solid label="\"auto\""]
  908 -> 396 [style=solid label="\"nullptr\""]
  908 -> 397 [style=solid label="\"dynamic_cast\""]
  908 -> 398 [style=solid label="\"static_cast\""]
  908 -> 399 [style=solid label="\"reinterpret_cast\""]
  908 -> 400 [style=solid label="\"const_cast\""]
  908 -> 401 [style=solid label="\"typeid\""]
  908 -> 38 [style=solid label="\"char\""]
  908 -> 39 [style=solid label="\"char8_t\""]
  908 -> 40 [style=solid label="\"char16_t\""]
  908 -> 41 [style=solid label="\"char32_t\""]
  908 -> 42 [style=solid label="\"wchar_t\""]
  908 -> 43 [style=solid label="\"bool\""]
  908 -> 44 [style=solid label="\"short\""]
  908 -> 45 [style=solid label="\"int\""]
  908 -> 46 [style=solid label="\"long\""]
  908 -> 47 [style=solid label="\"signed\""]
  908 -> 48 [style=solid label="\"unsigned\""]
  908 -> 49 [style=solid label="\"float\""]
  908 -> 50 [style=solid label="\"double\""]
  908 -> 51 [style=solid label="\"void\""]
  908 -> 209 [style=solid label="'R'"]
  908 -> 56 [style=solid label="\"typename\""]
  908 -> 402 [style=solid label="\"sizeof\""]
  908 -> 403 [style=solid label="\"alignof\""]
  908 -> 404 [style=dashed label="additive-expression"]
  908 -> 405 [style=dashed label="and-expression"]
  908 -> 406 [style=dashed label="await-expression"]
  908 -> 407 [style=dashed label="binary-literal"]
  908 -> 408 [style=dashed label="boolean-literal"]
  908 -> 409 [style=dashed label="cast-expression"]
  908 -> 410 [style=dashed label="character-literal"]
  908 -> 66 [style=dashed label="class-name"]
  908 -> 411 [style=dashed label="compare-expression"]
  908 -> 68 [style=dashed label="concept-name"]
  908 -> 69 [style=dashed label="conversion-function-id"]
  908 -> 414 [style=dashed label="decimal-floating-point-literal"]
  908 -> 415 [style=dashed label="decimal-literal"]
  908 -> 77 [style=dashed label="decltype-specifier"]
  908 -> 416 [style=dashed label="delete-expression"]
  908 -> 417 [style=dashed label="digit"]
  908 -> 418 [style=dashed label="digit-sequence"]
  908 -> 419 [style=dashed label="encoding-prefix"]
  908 -> 85 [style=dashed label="enum-name"]
  908 -> 420 [style=dashed label="equality-expression"]
  908 -> 421 [style=dashed label="exclusive-or-expression"]
  908 -> 422 [style=dashed label="floating-point-literal"]
  908 -> 423 [style=dashed label="fold-expression"]
  908 -> 424 [style=dashed label="fractional-constant"]
  908 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  908 -> 426 [style=dashed label="hexadecimal-literal"]
  908 -> 427 [style=dashed label="hexadecimal-prefix"]
  908 -> 428 [style=dashed label="id-expression"]
  908 -> 429 [style=dashed label="inclusive-or-expression"]
  908 -> 430 [style=dashed label="integer-literal"]
  908 -> 431 [style=dashed label="lambda-expression"]
  908 -> 432 [style=dashed label="lambda-introducer"]
  908 -> 433 [style=dashed label="literal"]
  908 -> 96 [style=dashed label="literal-operator-id"]
  908 -> 1376 [style=dashed label="logical-and-expression"]
  908 -> 436 [style=dashed label="multiplicative-expression"]
  908 -> 100 [style=dashed label="namespace-alias"]
  908 -> 103 [style=dashed label="namespace-name"]
  908 -> 437 [style=dashed label="nested-name-specifier"]
  908 -> 438 [style=dashed label="new-expression"]
  908 -> 439 [style=dashed label="noexcept-expression"]
  908 -> 440 [style=dashed label="nonzero-digit"]
  908 -> 441 [style=dashed label="octal-literal"]
  908 -> 109 [style=dashed label="operator-function-id"]
  908 -> 110 [style=dashed label="placeholder-type-specifier"]
  908 -> 442 [style=dashed label="pm-expression"]
  908 -> 443 [style=dashed label="pointer-literal"]
  908 -> 444 [style=dashed label="postfix-expression"]
  908 -> 445 [style=dashed label="primary-expression"]
  908 -> 113 [style=dashed label="qualified-id"]
  908 -> 446 [style=dashed label="relational-expression"]
  908 -> 447 [style=dashed label="requires-expression"]
  908 -> 448 [style=dashed label="shift-expression"]
  908 -> 115 [style=dashed label="simple-template-id"]
  908 -> 534 [style=dashed label="simple-type-specifier"]
  908 -> 450 [style=dashed label="string-literal"]
  908 -> 121 [style=dashed label="template-id"]
  908 -> 216 [style=dashed label="template-name"]
  908 -> 124 [style=dashed label="type-constraint"]
  908 -> 125 [style=dashed label="type-name"]
  908 -> 127 [style=dashed label="typedef-name"]
  908 -> 536 [style=dashed label="typename-specifier"]
  908 -> 454 [style=dashed label="unary-expression"]
  908 -> 455 [style=dashed label="unary-operator"]
  908 -> 130 [style=dashed label="unqualified-id"]
  908 -> 456 [style=dashed label="user-defined-character-literal"]
  908 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  908 -> 458 [style=dashed label="user-defined-integer-literal"]
  908 -> 459 [style=dashed label="user-defined-literal"]
  908 -> 460 [style=dashed label="user-defined-string-literal"]
  909 [label="State 909\n\l644 multiplicative-expression: multiplicative-expression '*' • pm-expression\l"]
  909 -> 1 [style=solid label="IDENTIFIER"]
  909 -> 361 [style=solid label="'+'"]
  909 -> 362 [style=solid label="'-'"]
  909 -> 363 [style=solid label="'('"]
  909 -> 364 [style=solid label="'&'"]
  909 -> 365 [style=solid label="\"::\""]
  909 -> 366 [style=solid label="'['"]
  909 -> 367 [style=solid label="\"co_await\""]
  909 -> 368 [style=solid label="'0'"]
  909 -> 369 [style=solid label="'1'"]
  909 -> 370 [style=solid label="\"0b\""]
  909 -> 371 [style=solid label="\"0B\""]
  909 -> 372 [style=solid label="'\\''"]
  909 -> 373 [style=solid label="\"false\""]
  909 -> 374 [style=solid label="\"true\""]
  909 -> 375 [style=solid label="\"noexcept\""]
  909 -> 17 [style=solid label="\"operator\""]
  909 -> 26 [style=solid label="\"decltype\""]
  909 -> 376 [style=solid label="\"delete\""]
  909 -> 377 [style=solid label="'.'"]
  909 -> 378 [style=solid label="'2'"]
  909 -> 379 [style=solid label="'3'"]
  909 -> 380 [style=solid label="'4'"]
  909 -> 381 [style=solid label="'5'"]
  909 -> 382 [style=solid label="'6'"]
  909 -> 383 [style=solid label="'7'"]
  909 -> 384 [style=solid label="'8'"]
  909 -> 385 [style=solid label="'9'"]
  909 -> 185 [style=solid label="\"u8\""]
  909 -> 186 [style=solid label="'u'"]
  909 -> 187 [style=solid label="'U'"]
  909 -> 188 [style=solid label="'L'"]
  909 -> 386 [style=solid label="'*'"]
  909 -> 203 [style=solid label="'\"'"]
  909 -> 387 [style=solid label="\"0x\""]
  909 -> 388 [style=solid label="\"0X\""]
  909 -> 389 [style=solid label="\"requires\""]
  909 -> 390 [style=solid label="\"new\""]
  909 -> 391 [style=solid label="'~'"]
  909 -> 392 [style=solid label="'!'"]
  909 -> 393 [style=solid label="\"++\""]
  909 -> 394 [style=solid label="\"--\""]
  909 -> 395 [style=solid label="\"this\""]
  909 -> 37 [style=solid label="\"auto\""]
  909 -> 396 [style=solid label="\"nullptr\""]
  909 -> 397 [style=solid label="\"dynamic_cast\""]
  909 -> 398 [style=solid label="\"static_cast\""]
  909 -> 399 [style=solid label="\"reinterpret_cast\""]
  909 -> 400 [style=solid label="\"const_cast\""]
  909 -> 401 [style=solid label="\"typeid\""]
  909 -> 38 [style=solid label="\"char\""]
  909 -> 39 [style=solid label="\"char8_t\""]
  909 -> 40 [style=solid label="\"char16_t\""]
  909 -> 41 [style=solid label="\"char32_t\""]
  909 -> 42 [style=solid label="\"wchar_t\""]
  909 -> 43 [style=solid label="\"bool\""]
  909 -> 44 [style=solid label="\"short\""]
  909 -> 45 [style=solid label="\"int\""]
  909 -> 46 [style=solid label="\"long\""]
  909 -> 47 [style=solid label="\"signed\""]
  909 -> 48 [style=solid label="\"unsigned\""]
  909 -> 49 [style=solid label="\"float\""]
  909 -> 50 [style=solid label="\"double\""]
  909 -> 51 [style=solid label="\"void\""]
  909 -> 209 [style=solid label="'R'"]
  909 -> 56 [style=solid label="\"typename\""]
  909 -> 402 [style=solid label="\"sizeof\""]
  909 -> 403 [style=solid label="\"alignof\""]
  909 -> 406 [style=dashed label="await-expression"]
  909 -> 407 [style=dashed label="binary-literal"]
  909 -> 408 [style=dashed label="boolean-literal"]
  909 -> 409 [style=dashed label="cast-expression"]
  909 -> 410 [style=dashed label="character-literal"]
  909 -> 66 [style=dashed label="class-name"]
  909 -> 68 [style=dashed label="concept-name"]
  909 -> 69 [style=dashed label="conversion-function-id"]
  909 -> 414 [style=dashed label="decimal-floating-point-literal"]
  909 -> 415 [style=dashed label="decimal-literal"]
  909 -> 77 [style=dashed label="decltype-specifier"]
  909 -> 416 [style=dashed label="delete-expression"]
  909 -> 417 [style=dashed label="digit"]
  909 -> 418 [style=dashed label="digit-sequence"]
  909 -> 419 [style=dashed label="encoding-prefix"]
  909 -> 85 [style=dashed label="enum-name"]
  909 -> 422 [style=dashed label="floating-point-literal"]
  909 -> 423 [style=dashed label="fold-expression"]
  909 -> 424 [style=dashed label="fractional-constant"]
  909 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  909 -> 426 [style=dashed label="hexadecimal-literal"]
  909 -> 427 [style=dashed label="hexadecimal-prefix"]
  909 -> 428 [style=dashed label="id-expression"]
  909 -> 430 [style=dashed label="integer-literal"]
  909 -> 431 [style=dashed label="lambda-expression"]
  909 -> 432 [style=dashed label="lambda-introducer"]
  909 -> 433 [style=dashed label="literal"]
  909 -> 96 [style=dashed label="literal-operator-id"]
  909 -> 100 [style=dashed label="namespace-alias"]
  909 -> 103 [style=dashed label="namespace-name"]
  909 -> 437 [style=dashed label="nested-name-specifier"]
  909 -> 438 [style=dashed label="new-expression"]
  909 -> 439 [style=dashed label="noexcept-expression"]
  909 -> 440 [style=dashed label="nonzero-digit"]
  909 -> 441 [style=dashed label="octal-literal"]
  909 -> 109 [style=dashed label="operator-function-id"]
  909 -> 110 [style=dashed label="placeholder-type-specifier"]
  909 -> 1377 [style=dashed label="pm-expression"]
  909 -> 443 [style=dashed label="pointer-literal"]
  909 -> 444 [style=dashed label="postfix-expression"]
  909 -> 445 [style=dashed label="primary-expression"]
  909 -> 113 [style=dashed label="qualified-id"]
  909 -> 447 [style=dashed label="requires-expression"]
  909 -> 115 [style=dashed label="simple-template-id"]
  909 -> 534 [style=dashed label="simple-type-specifier"]
  909 -> 450 [style=dashed label="string-literal"]
  909 -> 121 [style=dashed label="template-id"]
  909 -> 216 [style=dashed label="template-name"]
  909 -> 124 [style=dashed label="type-constraint"]
  909 -> 125 [style=dashed label="type-name"]
  909 -> 127 [style=dashed label="typedef-name"]
  909 -> 536 [style=dashed label="typename-specifier"]
  909 -> 454 [style=dashed label="unary-expression"]
  909 -> 455 [style=dashed label="unary-operator"]
  909 -> 130 [style=dashed label="unqualified-id"]
  909 -> 456 [style=dashed label="user-defined-character-literal"]
  909 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  909 -> 458 [style=dashed label="user-defined-integer-literal"]
  909 -> 459 [style=dashed label="user-defined-literal"]
  909 -> 460 [style=dashed label="user-defined-string-literal"]
  910 [label="State 910\n\l645 multiplicative-expression: multiplicative-expression '/' • pm-expression\l"]
  910 -> 1 [style=solid label="IDENTIFIER"]
  910 -> 361 [style=solid label="'+'"]
  910 -> 362 [style=solid label="'-'"]
  910 -> 363 [style=solid label="'('"]
  910 -> 364 [style=solid label="'&'"]
  910 -> 365 [style=solid label="\"::\""]
  910 -> 366 [style=solid label="'['"]
  910 -> 367 [style=solid label="\"co_await\""]
  910 -> 368 [style=solid label="'0'"]
  910 -> 369 [style=solid label="'1'"]
  910 -> 370 [style=solid label="\"0b\""]
  910 -> 371 [style=solid label="\"0B\""]
  910 -> 372 [style=solid label="'\\''"]
  910 -> 373 [style=solid label="\"false\""]
  910 -> 374 [style=solid label="\"true\""]
  910 -> 375 [style=solid label="\"noexcept\""]
  910 -> 17 [style=solid label="\"operator\""]
  910 -> 26 [style=solid label="\"decltype\""]
  910 -> 376 [style=solid label="\"delete\""]
  910 -> 377 [style=solid label="'.'"]
  910 -> 378 [style=solid label="'2'"]
  910 -> 379 [style=solid label="'3'"]
  910 -> 380 [style=solid label="'4'"]
  910 -> 381 [style=solid label="'5'"]
  910 -> 382 [style=solid label="'6'"]
  910 -> 383 [style=solid label="'7'"]
  910 -> 384 [style=solid label="'8'"]
  910 -> 385 [style=solid label="'9'"]
  910 -> 185 [style=solid label="\"u8\""]
  910 -> 186 [style=solid label="'u'"]
  910 -> 187 [style=solid label="'U'"]
  910 -> 188 [style=solid label="'L'"]
  910 -> 386 [style=solid label="'*'"]
  910 -> 203 [style=solid label="'\"'"]
  910 -> 387 [style=solid label="\"0x\""]
  910 -> 388 [style=solid label="\"0X\""]
  910 -> 389 [style=solid label="\"requires\""]
  910 -> 390 [style=solid label="\"new\""]
  910 -> 391 [style=solid label="'~'"]
  910 -> 392 [style=solid label="'!'"]
  910 -> 393 [style=solid label="\"++\""]
  910 -> 394 [style=solid label="\"--\""]
  910 -> 395 [style=solid label="\"this\""]
  910 -> 37 [style=solid label="\"auto\""]
  910 -> 396 [style=solid label="\"nullptr\""]
  910 -> 397 [style=solid label="\"dynamic_cast\""]
  910 -> 398 [style=solid label="\"static_cast\""]
  910 -> 399 [style=solid label="\"reinterpret_cast\""]
  910 -> 400 [style=solid label="\"const_cast\""]
  910 -> 401 [style=solid label="\"typeid\""]
  910 -> 38 [style=solid label="\"char\""]
  910 -> 39 [style=solid label="\"char8_t\""]
  910 -> 40 [style=solid label="\"char16_t\""]
  910 -> 41 [style=solid label="\"char32_t\""]
  910 -> 42 [style=solid label="\"wchar_t\""]
  910 -> 43 [style=solid label="\"bool\""]
  910 -> 44 [style=solid label="\"short\""]
  910 -> 45 [style=solid label="\"int\""]
  910 -> 46 [style=solid label="\"long\""]
  910 -> 47 [style=solid label="\"signed\""]
  910 -> 48 [style=solid label="\"unsigned\""]
  910 -> 49 [style=solid label="\"float\""]
  910 -> 50 [style=solid label="\"double\""]
  910 -> 51 [style=solid label="\"void\""]
  910 -> 209 [style=solid label="'R'"]
  910 -> 56 [style=solid label="\"typename\""]
  910 -> 402 [style=solid label="\"sizeof\""]
  910 -> 403 [style=solid label="\"alignof\""]
  910 -> 406 [style=dashed label="await-expression"]
  910 -> 407 [style=dashed label="binary-literal"]
  910 -> 408 [style=dashed label="boolean-literal"]
  910 -> 409 [style=dashed label="cast-expression"]
  910 -> 410 [style=dashed label="character-literal"]
  910 -> 66 [style=dashed label="class-name"]
  910 -> 68 [style=dashed label="concept-name"]
  910 -> 69 [style=dashed label="conversion-function-id"]
  910 -> 414 [style=dashed label="decimal-floating-point-literal"]
  910 -> 415 [style=dashed label="decimal-literal"]
  910 -> 77 [style=dashed label="decltype-specifier"]
  910 -> 416 [style=dashed label="delete-expression"]
  910 -> 417 [style=dashed label="digit"]
  910 -> 418 [style=dashed label="digit-sequence"]
  910 -> 419 [style=dashed label="encoding-prefix"]
  910 -> 85 [style=dashed label="enum-name"]
  910 -> 422 [style=dashed label="floating-point-literal"]
  910 -> 423 [style=dashed label="fold-expression"]
  910 -> 424 [style=dashed label="fractional-constant"]
  910 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  910 -> 426 [style=dashed label="hexadecimal-literal"]
  910 -> 427 [style=dashed label="hexadecimal-prefix"]
  910 -> 428 [style=dashed label="id-expression"]
  910 -> 430 [style=dashed label="integer-literal"]
  910 -> 431 [style=dashed label="lambda-expression"]
  910 -> 432 [style=dashed label="lambda-introducer"]
  910 -> 433 [style=dashed label="literal"]
  910 -> 96 [style=dashed label="literal-operator-id"]
  910 -> 100 [style=dashed label="namespace-alias"]
  910 -> 103 [style=dashed label="namespace-name"]
  910 -> 437 [style=dashed label="nested-name-specifier"]
  910 -> 438 [style=dashed label="new-expression"]
  910 -> 439 [style=dashed label="noexcept-expression"]
  910 -> 440 [style=dashed label="nonzero-digit"]
  910 -> 441 [style=dashed label="octal-literal"]
  910 -> 109 [style=dashed label="operator-function-id"]
  910 -> 110 [style=dashed label="placeholder-type-specifier"]
  910 -> 1378 [style=dashed label="pm-expression"]
  910 -> 443 [style=dashed label="pointer-literal"]
  910 -> 444 [style=dashed label="postfix-expression"]
  910 -> 445 [style=dashed label="primary-expression"]
  910 -> 113 [style=dashed label="qualified-id"]
  910 -> 447 [style=dashed label="requires-expression"]
  910 -> 115 [style=dashed label="simple-template-id"]
  910 -> 534 [style=dashed label="simple-type-specifier"]
  910 -> 450 [style=dashed label="string-literal"]
  910 -> 121 [style=dashed label="template-id"]
  910 -> 216 [style=dashed label="template-name"]
  910 -> 124 [style=dashed label="type-constraint"]
  910 -> 125 [style=dashed label="type-name"]
  910 -> 127 [style=dashed label="typedef-name"]
  910 -> 536 [style=dashed label="typename-specifier"]
  910 -> 454 [style=dashed label="unary-expression"]
  910 -> 455 [style=dashed label="unary-operator"]
  910 -> 130 [style=dashed label="unqualified-id"]
  910 -> 456 [style=dashed label="user-defined-character-literal"]
  910 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  910 -> 458 [style=dashed label="user-defined-integer-literal"]
  910 -> 459 [style=dashed label="user-defined-literal"]
  910 -> 460 [style=dashed label="user-defined-string-literal"]
  911 [label="State 911\n\l646 multiplicative-expression: multiplicative-expression '%' • pm-expression\l"]
  911 -> 1 [style=solid label="IDENTIFIER"]
  911 -> 361 [style=solid label="'+'"]
  911 -> 362 [style=solid label="'-'"]
  911 -> 363 [style=solid label="'('"]
  911 -> 364 [style=solid label="'&'"]
  911 -> 365 [style=solid label="\"::\""]
  911 -> 366 [style=solid label="'['"]
  911 -> 367 [style=solid label="\"co_await\""]
  911 -> 368 [style=solid label="'0'"]
  911 -> 369 [style=solid label="'1'"]
  911 -> 370 [style=solid label="\"0b\""]
  911 -> 371 [style=solid label="\"0B\""]
  911 -> 372 [style=solid label="'\\''"]
  911 -> 373 [style=solid label="\"false\""]
  911 -> 374 [style=solid label="\"true\""]
  911 -> 375 [style=solid label="\"noexcept\""]
  911 -> 17 [style=solid label="\"operator\""]
  911 -> 26 [style=solid label="\"decltype\""]
  911 -> 376 [style=solid label="\"delete\""]
  911 -> 377 [style=solid label="'.'"]
  911 -> 378 [style=solid label="'2'"]
  911 -> 379 [style=solid label="'3'"]
  911 -> 380 [style=solid label="'4'"]
  911 -> 381 [style=solid label="'5'"]
  911 -> 382 [style=solid label="'6'"]
  911 -> 383 [style=solid label="'7'"]
  911 -> 384 [style=solid label="'8'"]
  911 -> 385 [style=solid label="'9'"]
  911 -> 185 [style=solid label="\"u8\""]
  911 -> 186 [style=solid label="'u'"]
  911 -> 187 [style=solid label="'U'"]
  911 -> 188 [style=solid label="'L'"]
  911 -> 386 [style=solid label="'*'"]
  911 -> 203 [style=solid label="'\"'"]
  911 -> 387 [style=solid label="\"0x\""]
  911 -> 388 [style=solid label="\"0X\""]
  911 -> 389 [style=solid label="\"requires\""]
  911 -> 390 [style=solid label="\"new\""]
  911 -> 391 [style=solid label="'~'"]
  911 -> 392 [style=solid label="'!'"]
  911 -> 393 [style=solid label="\"++\""]
  911 -> 394 [style=solid label="\"--\""]
  911 -> 395 [style=solid label="\"this\""]
  911 -> 37 [style=solid label="\"auto\""]
  911 -> 396 [style=solid label="\"nullptr\""]
  911 -> 397 [style=solid label="\"dynamic_cast\""]
  911 -> 398 [style=solid label="\"static_cast\""]
  911 -> 399 [style=solid label="\"reinterpret_cast\""]
  911 -> 400 [style=solid label="\"const_cast\""]
  911 -> 401 [style=solid label="\"typeid\""]
  911 -> 38 [style=solid label="\"char\""]
  911 -> 39 [style=solid label="\"char8_t\""]
  911 -> 40 [style=solid label="\"char16_t\""]
  911 -> 41 [style=solid label="\"char32_t\""]
  911 -> 42 [style=solid label="\"wchar_t\""]
  911 -> 43 [style=solid label="\"bool\""]
  911 -> 44 [style=solid label="\"short\""]
  911 -> 45 [style=solid label="\"int\""]
  911 -> 46 [style=solid label="\"long\""]
  911 -> 47 [style=solid label="\"signed\""]
  911 -> 48 [style=solid label="\"unsigned\""]
  911 -> 49 [style=solid label="\"float\""]
  911 -> 50 [style=solid label="\"double\""]
  911 -> 51 [style=solid label="\"void\""]
  911 -> 209 [style=solid label="'R'"]
  911 -> 56 [style=solid label="\"typename\""]
  911 -> 402 [style=solid label="\"sizeof\""]
  911 -> 403 [style=solid label="\"alignof\""]
  911 -> 406 [style=dashed label="await-expression"]
  911 -> 407 [style=dashed label="binary-literal"]
  911 -> 408 [style=dashed label="boolean-literal"]
  911 -> 409 [style=dashed label="cast-expression"]
  911 -> 410 [style=dashed label="character-literal"]
  911 -> 66 [style=dashed label="class-name"]
  911 -> 68 [style=dashed label="concept-name"]
  911 -> 69 [style=dashed label="conversion-function-id"]
  911 -> 414 [style=dashed label="decimal-floating-point-literal"]
  911 -> 415 [style=dashed label="decimal-literal"]
  911 -> 77 [style=dashed label="decltype-specifier"]
  911 -> 416 [style=dashed label="delete-expression"]
  911 -> 417 [style=dashed label="digit"]
  911 -> 418 [style=dashed label="digit-sequence"]
  911 -> 419 [style=dashed label="encoding-prefix"]
  911 -> 85 [style=dashed label="enum-name"]
  911 -> 422 [style=dashed label="floating-point-literal"]
  911 -> 423 [style=dashed label="fold-expression"]
  911 -> 424 [style=dashed label="fractional-constant"]
  911 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  911 -> 426 [style=dashed label="hexadecimal-literal"]
  911 -> 427 [style=dashed label="hexadecimal-prefix"]
  911 -> 428 [style=dashed label="id-expression"]
  911 -> 430 [style=dashed label="integer-literal"]
  911 -> 431 [style=dashed label="lambda-expression"]
  911 -> 432 [style=dashed label="lambda-introducer"]
  911 -> 433 [style=dashed label="literal"]
  911 -> 96 [style=dashed label="literal-operator-id"]
  911 -> 100 [style=dashed label="namespace-alias"]
  911 -> 103 [style=dashed label="namespace-name"]
  911 -> 437 [style=dashed label="nested-name-specifier"]
  911 -> 438 [style=dashed label="new-expression"]
  911 -> 439 [style=dashed label="noexcept-expression"]
  911 -> 440 [style=dashed label="nonzero-digit"]
  911 -> 441 [style=dashed label="octal-literal"]
  911 -> 109 [style=dashed label="operator-function-id"]
  911 -> 110 [style=dashed label="placeholder-type-specifier"]
  911 -> 1379 [style=dashed label="pm-expression"]
  911 -> 443 [style=dashed label="pointer-literal"]
  911 -> 444 [style=dashed label="postfix-expression"]
  911 -> 445 [style=dashed label="primary-expression"]
  911 -> 113 [style=dashed label="qualified-id"]
  911 -> 447 [style=dashed label="requires-expression"]
  911 -> 115 [style=dashed label="simple-template-id"]
  911 -> 534 [style=dashed label="simple-type-specifier"]
  911 -> 450 [style=dashed label="string-literal"]
  911 -> 121 [style=dashed label="template-id"]
  911 -> 216 [style=dashed label="template-name"]
  911 -> 124 [style=dashed label="type-constraint"]
  911 -> 125 [style=dashed label="type-name"]
  911 -> 127 [style=dashed label="typedef-name"]
  911 -> 536 [style=dashed label="typename-specifier"]
  911 -> 454 [style=dashed label="unary-expression"]
  911 -> 455 [style=dashed label="unary-operator"]
  911 -> 130 [style=dashed label="unqualified-id"]
  911 -> 456 [style=dashed label="user-defined-character-literal"]
  911 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  911 -> 458 [style=dashed label="user-defined-integer-literal"]
  911 -> 459 [style=dashed label="user-defined-literal"]
  911 -> 460 [style=dashed label="user-defined-string-literal"]
  912 [label="State 912\n\l741 octal-digit: '0' •\l"]
  912 -> "912R741" [style=solid]
 "912R741" [label="R741", fillcolor=3, shape=diamond, style=filled]
  913 [label="State 913\n\l742 octal-digit: '1' •\l"]
  913 -> "913R742" [style=solid]
 "913R742" [label="R742", fillcolor=3, shape=diamond, style=filled]
  914 [label="State 914\n\l754 octal-literal: octal-literal '\\'' • octal-digit\l"]
  914 -> 912 [style=solid label="'0'"]
  914 -> 913 [style=solid label="'1'"]
  914 -> 915 [style=solid label="'2'"]
  914 -> 916 [style=solid label="'3'"]
  914 -> 917 [style=solid label="'4'"]
  914 -> 918 [style=solid label="'5'"]
  914 -> 919 [style=solid label="'6'"]
  914 -> 920 [style=solid label="'7'"]
  914 -> 1380 [style=dashed label="octal-digit"]
  915 [label="State 915\n\l743 octal-digit: '2' •\l"]
  915 -> "915R743" [style=solid]
 "915R743" [label="R743", fillcolor=3, shape=diamond, style=filled]
  916 [label="State 916\n\l744 octal-digit: '3' •\l"]
  916 -> "916R744" [style=solid]
 "916R744" [label="R744", fillcolor=3, shape=diamond, style=filled]
  917 [label="State 917\n\l745 octal-digit: '4' •\l"]
  917 -> "917R745" [style=solid]
 "917R745" [label="R745", fillcolor=3, shape=diamond, style=filled]
  918 [label="State 918\n\l746 octal-digit: '5' •\l"]
  918 -> "918R746" [style=solid]
 "918R746" [label="R746", fillcolor=3, shape=diamond, style=filled]
  919 [label="State 919\n\l747 octal-digit: '6' •\l"]
  919 -> "919R747" [style=solid]
 "919R747" [label="R747", fillcolor=3, shape=diamond, style=filled]
  920 [label="State 920\n\l748 octal-digit: '7' •\l"]
  920 -> "920R748" [style=solid]
 "920R748" [label="R748", fillcolor=3, shape=diamond, style=filled]
  921 [label="State 921\n\l492 integer-literal: octal-literal integer-suffix •\l"]
  921 -> "921R492" [style=solid]
 "921R492" [label="R492", fillcolor=3, shape=diamond, style=filled]
  922 [label="State 922\n\l753 octal-literal: octal-literal octal-digit •\l"]
  922 -> "922R753" [style=solid]
 "922R753" [label="R753", fillcolor=3, shape=diamond, style=filled]
  923 [label="State 923\n\l1170 user-defined-integer-literal: octal-literal ud-suffix •\l"]
  923 -> "923R1170" [style=solid]
 "923R1170" [label="R1170", fillcolor=3, shape=diamond, style=filled]
  924 [label="State 924\n\l857 pm-expression: pm-expression \".*\" • cast-expression\l"]
  924 -> 1 [style=solid label="IDENTIFIER"]
  924 -> 361 [style=solid label="'+'"]
  924 -> 362 [style=solid label="'-'"]
  924 -> 363 [style=solid label="'('"]
  924 -> 364 [style=solid label="'&'"]
  924 -> 365 [style=solid label="\"::\""]
  924 -> 366 [style=solid label="'['"]
  924 -> 367 [style=solid label="\"co_await\""]
  924 -> 368 [style=solid label="'0'"]
  924 -> 369 [style=solid label="'1'"]
  924 -> 370 [style=solid label="\"0b\""]
  924 -> 371 [style=solid label="\"0B\""]
  924 -> 372 [style=solid label="'\\''"]
  924 -> 373 [style=solid label="\"false\""]
  924 -> 374 [style=solid label="\"true\""]
  924 -> 375 [style=solid label="\"noexcept\""]
  924 -> 17 [style=solid label="\"operator\""]
  924 -> 26 [style=solid label="\"decltype\""]
  924 -> 376 [style=solid label="\"delete\""]
  924 -> 377 [style=solid label="'.'"]
  924 -> 378 [style=solid label="'2'"]
  924 -> 379 [style=solid label="'3'"]
  924 -> 380 [style=solid label="'4'"]
  924 -> 381 [style=solid label="'5'"]
  924 -> 382 [style=solid label="'6'"]
  924 -> 383 [style=solid label="'7'"]
  924 -> 384 [style=solid label="'8'"]
  924 -> 385 [style=solid label="'9'"]
  924 -> 185 [style=solid label="\"u8\""]
  924 -> 186 [style=solid label="'u'"]
  924 -> 187 [style=solid label="'U'"]
  924 -> 188 [style=solid label="'L'"]
  924 -> 386 [style=solid label="'*'"]
  924 -> 203 [style=solid label="'\"'"]
  924 -> 387 [style=solid label="\"0x\""]
  924 -> 388 [style=solid label="\"0X\""]
  924 -> 389 [style=solid label="\"requires\""]
  924 -> 390 [style=solid label="\"new\""]
  924 -> 391 [style=solid label="'~'"]
  924 -> 392 [style=solid label="'!'"]
  924 -> 393 [style=solid label="\"++\""]
  924 -> 394 [style=solid label="\"--\""]
  924 -> 395 [style=solid label="\"this\""]
  924 -> 37 [style=solid label="\"auto\""]
  924 -> 396 [style=solid label="\"nullptr\""]
  924 -> 397 [style=solid label="\"dynamic_cast\""]
  924 -> 398 [style=solid label="\"static_cast\""]
  924 -> 399 [style=solid label="\"reinterpret_cast\""]
  924 -> 400 [style=solid label="\"const_cast\""]
  924 -> 401 [style=solid label="\"typeid\""]
  924 -> 38 [style=solid label="\"char\""]
  924 -> 39 [style=solid label="\"char8_t\""]
  924 -> 40 [style=solid label="\"char16_t\""]
  924 -> 41 [style=solid label="\"char32_t\""]
  924 -> 42 [style=solid label="\"wchar_t\""]
  924 -> 43 [style=solid label="\"bool\""]
  924 -> 44 [style=solid label="\"short\""]
  924 -> 45 [style=solid label="\"int\""]
  924 -> 46 [style=solid label="\"long\""]
  924 -> 47 [style=solid label="\"signed\""]
  924 -> 48 [style=solid label="\"unsigned\""]
  924 -> 49 [style=solid label="\"float\""]
  924 -> 50 [style=solid label="\"double\""]
  924 -> 51 [style=solid label="\"void\""]
  924 -> 209 [style=solid label="'R'"]
  924 -> 56 [style=solid label="\"typename\""]
  924 -> 402 [style=solid label="\"sizeof\""]
  924 -> 403 [style=solid label="\"alignof\""]
  924 -> 406 [style=dashed label="await-expression"]
  924 -> 407 [style=dashed label="binary-literal"]
  924 -> 408 [style=dashed label="boolean-literal"]
  924 -> 1381 [style=dashed label="cast-expression"]
  924 -> 410 [style=dashed label="character-literal"]
  924 -> 66 [style=dashed label="class-name"]
  924 -> 68 [style=dashed label="concept-name"]
  924 -> 69 [style=dashed label="conversion-function-id"]
  924 -> 414 [style=dashed label="decimal-floating-point-literal"]
  924 -> 415 [style=dashed label="decimal-literal"]
  924 -> 77 [style=dashed label="decltype-specifier"]
  924 -> 416 [style=dashed label="delete-expression"]
  924 -> 417 [style=dashed label="digit"]
  924 -> 418 [style=dashed label="digit-sequence"]
  924 -> 419 [style=dashed label="encoding-prefix"]
  924 -> 85 [style=dashed label="enum-name"]
  924 -> 422 [style=dashed label="floating-point-literal"]
  924 -> 423 [style=dashed label="fold-expression"]
  924 -> 424 [style=dashed label="fractional-constant"]
  924 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  924 -> 426 [style=dashed label="hexadecimal-literal"]
  924 -> 427 [style=dashed label="hexadecimal-prefix"]
  924 -> 428 [style=dashed label="id-expression"]
  924 -> 430 [style=dashed label="integer-literal"]
  924 -> 431 [style=dashed label="lambda-expression"]
  924 -> 432 [style=dashed label="lambda-introducer"]
  924 -> 433 [style=dashed label="literal"]
  924 -> 96 [style=dashed label="literal-operator-id"]
  924 -> 100 [style=dashed label="namespace-alias"]
  924 -> 103 [style=dashed label="namespace-name"]
  924 -> 437 [style=dashed label="nested-name-specifier"]
  924 -> 438 [style=dashed label="new-expression"]
  924 -> 439 [style=dashed label="noexcept-expression"]
  924 -> 440 [style=dashed label="nonzero-digit"]
  924 -> 441 [style=dashed label="octal-literal"]
  924 -> 109 [style=dashed label="operator-function-id"]
  924 -> 110 [style=dashed label="placeholder-type-specifier"]
  924 -> 443 [style=dashed label="pointer-literal"]
  924 -> 444 [style=dashed label="postfix-expression"]
  924 -> 445 [style=dashed label="primary-expression"]
  924 -> 113 [style=dashed label="qualified-id"]
  924 -> 447 [style=dashed label="requires-expression"]
  924 -> 115 [style=dashed label="simple-template-id"]
  924 -> 534 [style=dashed label="simple-type-specifier"]
  924 -> 450 [style=dashed label="string-literal"]
  924 -> 121 [style=dashed label="template-id"]
  924 -> 216 [style=dashed label="template-name"]
  924 -> 124 [style=dashed label="type-constraint"]
  924 -> 125 [style=dashed label="type-name"]
  924 -> 127 [style=dashed label="typedef-name"]
  924 -> 536 [style=dashed label="typename-specifier"]
  924 -> 454 [style=dashed label="unary-expression"]
  924 -> 455 [style=dashed label="unary-operator"]
  924 -> 130 [style=dashed label="unqualified-id"]
  924 -> 456 [style=dashed label="user-defined-character-literal"]
  924 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  924 -> 458 [style=dashed label="user-defined-integer-literal"]
  924 -> 459 [style=dashed label="user-defined-literal"]
  924 -> 460 [style=dashed label="user-defined-string-literal"]
  925 [label="State 925\n\l858 pm-expression: pm-expression \"->*\" • cast-expression\l"]
  925 -> 1 [style=solid label="IDENTIFIER"]
  925 -> 361 [style=solid label="'+'"]
  925 -> 362 [style=solid label="'-'"]
  925 -> 363 [style=solid label="'('"]
  925 -> 364 [style=solid label="'&'"]
  925 -> 365 [style=solid label="\"::\""]
  925 -> 366 [style=solid label="'['"]
  925 -> 367 [style=solid label="\"co_await\""]
  925 -> 368 [style=solid label="'0'"]
  925 -> 369 [style=solid label="'1'"]
  925 -> 370 [style=solid label="\"0b\""]
  925 -> 371 [style=solid label="\"0B\""]
  925 -> 372 [style=solid label="'\\''"]
  925 -> 373 [style=solid label="\"false\""]
  925 -> 374 [style=solid label="\"true\""]
  925 -> 375 [style=solid label="\"noexcept\""]
  925 -> 17 [style=solid label="\"operator\""]
  925 -> 26 [style=solid label="\"decltype\""]
  925 -> 376 [style=solid label="\"delete\""]
  925 -> 377 [style=solid label="'.'"]
  925 -> 378 [style=solid label="'2'"]
  925 -> 379 [style=solid label="'3'"]
  925 -> 380 [style=solid label="'4'"]
  925 -> 381 [style=solid label="'5'"]
  925 -> 382 [style=solid label="'6'"]
  925 -> 383 [style=solid label="'7'"]
  925 -> 384 [style=solid label="'8'"]
  925 -> 385 [style=solid label="'9'"]
  925 -> 185 [style=solid label="\"u8\""]
  925 -> 186 [style=solid label="'u'"]
  925 -> 187 [style=solid label="'U'"]
  925 -> 188 [style=solid label="'L'"]
  925 -> 386 [style=solid label="'*'"]
  925 -> 203 [style=solid label="'\"'"]
  925 -> 387 [style=solid label="\"0x\""]
  925 -> 388 [style=solid label="\"0X\""]
  925 -> 389 [style=solid label="\"requires\""]
  925 -> 390 [style=solid label="\"new\""]
  925 -> 391 [style=solid label="'~'"]
  925 -> 392 [style=solid label="'!'"]
  925 -> 393 [style=solid label="\"++\""]
  925 -> 394 [style=solid label="\"--\""]
  925 -> 395 [style=solid label="\"this\""]
  925 -> 37 [style=solid label="\"auto\""]
  925 -> 396 [style=solid label="\"nullptr\""]
  925 -> 397 [style=solid label="\"dynamic_cast\""]
  925 -> 398 [style=solid label="\"static_cast\""]
  925 -> 399 [style=solid label="\"reinterpret_cast\""]
  925 -> 400 [style=solid label="\"const_cast\""]
  925 -> 401 [style=solid label="\"typeid\""]
  925 -> 38 [style=solid label="\"char\""]
  925 -> 39 [style=solid label="\"char8_t\""]
  925 -> 40 [style=solid label="\"char16_t\""]
  925 -> 41 [style=solid label="\"char32_t\""]
  925 -> 42 [style=solid label="\"wchar_t\""]
  925 -> 43 [style=solid label="\"bool\""]
  925 -> 44 [style=solid label="\"short\""]
  925 -> 45 [style=solid label="\"int\""]
  925 -> 46 [style=solid label="\"long\""]
  925 -> 47 [style=solid label="\"signed\""]
  925 -> 48 [style=solid label="\"unsigned\""]
  925 -> 49 [style=solid label="\"float\""]
  925 -> 50 [style=solid label="\"double\""]
  925 -> 51 [style=solid label="\"void\""]
  925 -> 209 [style=solid label="'R'"]
  925 -> 56 [style=solid label="\"typename\""]
  925 -> 402 [style=solid label="\"sizeof\""]
  925 -> 403 [style=solid label="\"alignof\""]
  925 -> 406 [style=dashed label="await-expression"]
  925 -> 407 [style=dashed label="binary-literal"]
  925 -> 408 [style=dashed label="boolean-literal"]
  925 -> 1382 [style=dashed label="cast-expression"]
  925 -> 410 [style=dashed label="character-literal"]
  925 -> 66 [style=dashed label="class-name"]
  925 -> 68 [style=dashed label="concept-name"]
  925 -> 69 [style=dashed label="conversion-function-id"]
  925 -> 414 [style=dashed label="decimal-floating-point-literal"]
  925 -> 415 [style=dashed label="decimal-literal"]
  925 -> 77 [style=dashed label="decltype-specifier"]
  925 -> 416 [style=dashed label="delete-expression"]
  925 -> 417 [style=dashed label="digit"]
  925 -> 418 [style=dashed label="digit-sequence"]
  925 -> 419 [style=dashed label="encoding-prefix"]
  925 -> 85 [style=dashed label="enum-name"]
  925 -> 422 [style=dashed label="floating-point-literal"]
  925 -> 423 [style=dashed label="fold-expression"]
  925 -> 424 [style=dashed label="fractional-constant"]
  925 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  925 -> 426 [style=dashed label="hexadecimal-literal"]
  925 -> 427 [style=dashed label="hexadecimal-prefix"]
  925 -> 428 [style=dashed label="id-expression"]
  925 -> 430 [style=dashed label="integer-literal"]
  925 -> 431 [style=dashed label="lambda-expression"]
  925 -> 432 [style=dashed label="lambda-introducer"]
  925 -> 433 [style=dashed label="literal"]
  925 -> 96 [style=dashed label="literal-operator-id"]
  925 -> 100 [style=dashed label="namespace-alias"]
  925 -> 103 [style=dashed label="namespace-name"]
  925 -> 437 [style=dashed label="nested-name-specifier"]
  925 -> 438 [style=dashed label="new-expression"]
  925 -> 439 [style=dashed label="noexcept-expression"]
  925 -> 440 [style=dashed label="nonzero-digit"]
  925 -> 441 [style=dashed label="octal-literal"]
  925 -> 109 [style=dashed label="operator-function-id"]
  925 -> 110 [style=dashed label="placeholder-type-specifier"]
  925 -> 443 [style=dashed label="pointer-literal"]
  925 -> 444 [style=dashed label="postfix-expression"]
  925 -> 445 [style=dashed label="primary-expression"]
  925 -> 113 [style=dashed label="qualified-id"]
  925 -> 447 [style=dashed label="requires-expression"]
  925 -> 115 [style=dashed label="simple-template-id"]
  925 -> 534 [style=dashed label="simple-type-specifier"]
  925 -> 450 [style=dashed label="string-literal"]
  925 -> 121 [style=dashed label="template-id"]
  925 -> 216 [style=dashed label="template-name"]
  925 -> 124 [style=dashed label="type-constraint"]
  925 -> 125 [style=dashed label="type-name"]
  925 -> 127 [style=dashed label="typedef-name"]
  925 -> 536 [style=dashed label="typename-specifier"]
  925 -> 454 [style=dashed label="unary-expression"]
  925 -> 455 [style=dashed label="unary-operator"]
  925 -> 130 [style=dashed label="unqualified-id"]
  925 -> 456 [style=dashed label="user-defined-character-literal"]
  925 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  925 -> 458 [style=dashed label="user-defined-integer-literal"]
  925 -> 459 [style=dashed label="user-defined-literal"]
  925 -> 460 [style=dashed label="user-defined-string-literal"]
  926 [label="State 926\n\l863 postfix-expression: postfix-expression '(' • ')'\l864                   | postfix-expression '(' • expression-list ')'\l"]
  926 -> 1 [style=solid label="IDENTIFIER"]
  926 -> 361 [style=solid label="'+'"]
  926 -> 362 [style=solid label="'-'"]
  926 -> 363 [style=solid label="'('"]
  926 -> 1383 [style=solid label="')'"]
  926 -> 364 [style=solid label="'&'"]
  926 -> 365 [style=solid label="\"::\""]
  926 -> 366 [style=solid label="'['"]
  926 -> 367 [style=solid label="\"co_await\""]
  926 -> 939 [style=solid label="'{'"]
  926 -> 368 [style=solid label="'0'"]
  926 -> 369 [style=solid label="'1'"]
  926 -> 370 [style=solid label="\"0b\""]
  926 -> 371 [style=solid label="\"0B\""]
  926 -> 372 [style=solid label="'\\''"]
  926 -> 373 [style=solid label="\"false\""]
  926 -> 374 [style=solid label="\"true\""]
  926 -> 375 [style=solid label="\"noexcept\""]
  926 -> 17 [style=solid label="\"operator\""]
  926 -> 26 [style=solid label="\"decltype\""]
  926 -> 376 [style=solid label="\"delete\""]
  926 -> 377 [style=solid label="'.'"]
  926 -> 378 [style=solid label="'2'"]
  926 -> 379 [style=solid label="'3'"]
  926 -> 380 [style=solid label="'4'"]
  926 -> 381 [style=solid label="'5'"]
  926 -> 382 [style=solid label="'6'"]
  926 -> 383 [style=solid label="'7'"]
  926 -> 384 [style=solid label="'8'"]
  926 -> 385 [style=solid label="'9'"]
  926 -> 185 [style=solid label="\"u8\""]
  926 -> 186 [style=solid label="'u'"]
  926 -> 187 [style=solid label="'U'"]
  926 -> 188 [style=solid label="'L'"]
  926 -> 386 [style=solid label="'*'"]
  926 -> 203 [style=solid label="'\"'"]
  926 -> 387 [style=solid label="\"0x\""]
  926 -> 388 [style=solid label="\"0X\""]
  926 -> 389 [style=solid label="\"requires\""]
  926 -> 390 [style=solid label="\"new\""]
  926 -> 391 [style=solid label="'~'"]
  926 -> 392 [style=solid label="'!'"]
  926 -> 393 [style=solid label="\"++\""]
  926 -> 394 [style=solid label="\"--\""]
  926 -> 395 [style=solid label="\"this\""]
  926 -> 37 [style=solid label="\"auto\""]
  926 -> 396 [style=solid label="\"nullptr\""]
  926 -> 397 [style=solid label="\"dynamic_cast\""]
  926 -> 398 [style=solid label="\"static_cast\""]
  926 -> 399 [style=solid label="\"reinterpret_cast\""]
  926 -> 400 [style=solid label="\"const_cast\""]
  926 -> 401 [style=solid label="\"typeid\""]
  926 -> 38 [style=solid label="\"char\""]
  926 -> 39 [style=solid label="\"char8_t\""]
  926 -> 40 [style=solid label="\"char16_t\""]
  926 -> 41 [style=solid label="\"char32_t\""]
  926 -> 42 [style=solid label="\"wchar_t\""]
  926 -> 43 [style=solid label="\"bool\""]
  926 -> 44 [style=solid label="\"short\""]
  926 -> 45 [style=solid label="\"int\""]
  926 -> 46 [style=solid label="\"long\""]
  926 -> 47 [style=solid label="\"signed\""]
  926 -> 48 [style=solid label="\"unsigned\""]
  926 -> 49 [style=solid label="\"float\""]
  926 -> 50 [style=solid label="\"double\""]
  926 -> 51 [style=solid label="\"void\""]
  926 -> 209 [style=solid label="'R'"]
  926 -> 528 [style=solid label="\"throw\""]
  926 -> 56 [style=solid label="\"typename\""]
  926 -> 402 [style=solid label="\"sizeof\""]
  926 -> 403 [style=solid label="\"alignof\""]
  926 -> 529 [style=solid label="\"co_yield\""]
  926 -> 404 [style=dashed label="additive-expression"]
  926 -> 405 [style=dashed label="and-expression"]
  926 -> 1141 [style=dashed label="assignment-expression"]
  926 -> 406 [style=dashed label="await-expression"]
  926 -> 407 [style=dashed label="binary-literal"]
  926 -> 408 [style=dashed label="boolean-literal"]
  926 -> 1142 [style=dashed label="braced-init-list"]
  926 -> 409 [style=dashed label="cast-expression"]
  926 -> 410 [style=dashed label="character-literal"]
  926 -> 66 [style=dashed label="class-name"]
  926 -> 411 [style=dashed label="compare-expression"]
  926 -> 68 [style=dashed label="concept-name"]
  926 -> 531 [style=dashed label="conditional-expression"]
  926 -> 69 [style=dashed label="conversion-function-id"]
  926 -> 414 [style=dashed label="decimal-floating-point-literal"]
  926 -> 415 [style=dashed label="decimal-literal"]
  926 -> 77 [style=dashed label="decltype-specifier"]
  926 -> 416 [style=dashed label="delete-expression"]
  926 -> 417 [style=dashed label="digit"]
  926 -> 418 [style=dashed label="digit-sequence"]
  926 -> 419 [style=dashed label="encoding-prefix"]
  926 -> 85 [style=dashed label="enum-name"]
  926 -> 420 [style=dashed label="equality-expression"]
  926 -> 421 [style=dashed label="exclusive-or-expression"]
  926 -> 1384 [style=dashed label="expression-list"]
  926 -> 422 [style=dashed label="floating-point-literal"]
  926 -> 423 [style=dashed label="fold-expression"]
  926 -> 424 [style=dashed label="fractional-constant"]
  926 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  926 -> 426 [style=dashed label="hexadecimal-literal"]
  926 -> 427 [style=dashed label="hexadecimal-prefix"]
  926 -> 428 [style=dashed label="id-expression"]
  926 -> 429 [style=dashed label="inclusive-or-expression"]
  926 -> 1145 [style=dashed label="initializer-clause"]
  926 -> 1146 [style=dashed label="initializer-list"]
  926 -> 430 [style=dashed label="integer-literal"]
  926 -> 431 [style=dashed label="lambda-expression"]
  926 -> 432 [style=dashed label="lambda-introducer"]
  926 -> 433 [style=dashed label="literal"]
  926 -> 96 [style=dashed label="literal-operator-id"]
  926 -> 434 [style=dashed label="logical-and-expression"]
  926 -> 533 [style=dashed label="logical-or-expression"]
  926 -> 436 [style=dashed label="multiplicative-expression"]
  926 -> 100 [style=dashed label="namespace-alias"]
  926 -> 103 [style=dashed label="namespace-name"]
  926 -> 437 [style=dashed label="nested-name-specifier"]
  926 -> 438 [style=dashed label="new-expression"]
  926 -> 439 [style=dashed label="noexcept-expression"]
  926 -> 440 [style=dashed label="nonzero-digit"]
  926 -> 441 [style=dashed label="octal-literal"]
  926 -> 109 [style=dashed label="operator-function-id"]
  926 -> 110 [style=dashed label="placeholder-type-specifier"]
  926 -> 442 [style=dashed label="pm-expression"]
  926 -> 443 [style=dashed label="pointer-literal"]
  926 -> 444 [style=dashed label="postfix-expression"]
  926 -> 445 [style=dashed label="primary-expression"]
  926 -> 113 [style=dashed label="qualified-id"]
  926 -> 446 [style=dashed label="relational-expression"]
  926 -> 447 [style=dashed label="requires-expression"]
  926 -> 448 [style=dashed label="shift-expression"]
  926 -> 115 [style=dashed label="simple-template-id"]
  926 -> 534 [style=dashed label="simple-type-specifier"]
  926 -> 450 [style=dashed label="string-literal"]
  926 -> 121 [style=dashed label="template-id"]
  926 -> 216 [style=dashed label="template-name"]
  926 -> 535 [style=dashed label="throw-expression"]
  926 -> 124 [style=dashed label="type-constraint"]
  926 -> 125 [style=dashed label="type-name"]
  926 -> 127 [style=dashed label="typedef-name"]
  926 -> 536 [style=dashed label="typename-specifier"]
  926 -> 454 [style=dashed label="unary-expression"]
  926 -> 455 [style=dashed label="unary-operator"]
  926 -> 130 [style=dashed label="unqualified-id"]
  926 -> 456 [style=dashed label="user-defined-character-literal"]
  926 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  926 -> 458 [style=dashed label="user-defined-integer-literal"]
  926 -> 459 [style=dashed label="user-defined-literal"]
  926 -> 460 [style=dashed label="user-defined-string-literal"]
  926 -> 537 [style=dashed label="yield-expression"]
  927 [label="State 927\n\l861 postfix-expression: postfix-expression '[' • ']'\l862                   | postfix-expression '[' • expression-list ']'\l"]
  927 -> 1 [style=solid label="IDENTIFIER"]
  927 -> 361 [style=solid label="'+'"]
  927 -> 362 [style=solid label="'-'"]
  927 -> 363 [style=solid label="'('"]
  927 -> 364 [style=solid label="'&'"]
  927 -> 365 [style=solid label="\"::\""]
  927 -> 366 [style=solid label="'['"]
  927 -> 1385 [style=solid label="']'"]
  927 -> 367 [style=solid label="\"co_await\""]
  927 -> 939 [style=solid label="'{'"]
  927 -> 368 [style=solid label="'0'"]
  927 -> 369 [style=solid label="'1'"]
  927 -> 370 [style=solid label="\"0b\""]
  927 -> 371 [style=solid label="\"0B\""]
  927 -> 372 [style=solid label="'\\''"]
  927 -> 373 [style=solid label="\"false\""]
  927 -> 374 [style=solid label="\"true\""]
  927 -> 375 [style=solid label="\"noexcept\""]
  927 -> 17 [style=solid label="\"operator\""]
  927 -> 26 [style=solid label="\"decltype\""]
  927 -> 376 [style=solid label="\"delete\""]
  927 -> 377 [style=solid label="'.'"]
  927 -> 378 [style=solid label="'2'"]
  927 -> 379 [style=solid label="'3'"]
  927 -> 380 [style=solid label="'4'"]
  927 -> 381 [style=solid label="'5'"]
  927 -> 382 [style=solid label="'6'"]
  927 -> 383 [style=solid label="'7'"]
  927 -> 384 [style=solid label="'8'"]
  927 -> 385 [style=solid label="'9'"]
  927 -> 185 [style=solid label="\"u8\""]
  927 -> 186 [style=solid label="'u'"]
  927 -> 187 [style=solid label="'U'"]
  927 -> 188 [style=solid label="'L'"]
  927 -> 386 [style=solid label="'*'"]
  927 -> 203 [style=solid label="'\"'"]
  927 -> 387 [style=solid label="\"0x\""]
  927 -> 388 [style=solid label="\"0X\""]
  927 -> 389 [style=solid label="\"requires\""]
  927 -> 390 [style=solid label="\"new\""]
  927 -> 391 [style=solid label="'~'"]
  927 -> 392 [style=solid label="'!'"]
  927 -> 393 [style=solid label="\"++\""]
  927 -> 394 [style=solid label="\"--\""]
  927 -> 395 [style=solid label="\"this\""]
  927 -> 37 [style=solid label="\"auto\""]
  927 -> 396 [style=solid label="\"nullptr\""]
  927 -> 397 [style=solid label="\"dynamic_cast\""]
  927 -> 398 [style=solid label="\"static_cast\""]
  927 -> 399 [style=solid label="\"reinterpret_cast\""]
  927 -> 400 [style=solid label="\"const_cast\""]
  927 -> 401 [style=solid label="\"typeid\""]
  927 -> 38 [style=solid label="\"char\""]
  927 -> 39 [style=solid label="\"char8_t\""]
  927 -> 40 [style=solid label="\"char16_t\""]
  927 -> 41 [style=solid label="\"char32_t\""]
  927 -> 42 [style=solid label="\"wchar_t\""]
  927 -> 43 [style=solid label="\"bool\""]
  927 -> 44 [style=solid label="\"short\""]
  927 -> 45 [style=solid label="\"int\""]
  927 -> 46 [style=solid label="\"long\""]
  927 -> 47 [style=solid label="\"signed\""]
  927 -> 48 [style=solid label="\"unsigned\""]
  927 -> 49 [style=solid label="\"float\""]
  927 -> 50 [style=solid label="\"double\""]
  927 -> 51 [style=solid label="\"void\""]
  927 -> 209 [style=solid label="'R'"]
  927 -> 528 [style=solid label="\"throw\""]
  927 -> 56 [style=solid label="\"typename\""]
  927 -> 402 [style=solid label="\"sizeof\""]
  927 -> 403 [style=solid label="\"alignof\""]
  927 -> 529 [style=solid label="\"co_yield\""]
  927 -> 404 [style=dashed label="additive-expression"]
  927 -> 405 [style=dashed label="and-expression"]
  927 -> 1141 [style=dashed label="assignment-expression"]
  927 -> 406 [style=dashed label="await-expression"]
  927 -> 407 [style=dashed label="binary-literal"]
  927 -> 408 [style=dashed label="boolean-literal"]
  927 -> 1142 [style=dashed label="braced-init-list"]
  927 -> 409 [style=dashed label="cast-expression"]
  927 -> 410 [style=dashed label="character-literal"]
  927 -> 66 [style=dashed label="class-name"]
  927 -> 411 [style=dashed label="compare-expression"]
  927 -> 68 [style=dashed label="concept-name"]
  927 -> 531 [style=dashed label="conditional-expression"]
  927 -> 69 [style=dashed label="conversion-function-id"]
  927 -> 414 [style=dashed label="decimal-floating-point-literal"]
  927 -> 415 [style=dashed label="decimal-literal"]
  927 -> 77 [style=dashed label="decltype-specifier"]
  927 -> 416 [style=dashed label="delete-expression"]
  927 -> 417 [style=dashed label="digit"]
  927 -> 418 [style=dashed label="digit-sequence"]
  927 -> 419 [style=dashed label="encoding-prefix"]
  927 -> 85 [style=dashed label="enum-name"]
  927 -> 420 [style=dashed label="equality-expression"]
  927 -> 421 [style=dashed label="exclusive-or-expression"]
  927 -> 1386 [style=dashed label="expression-list"]
  927 -> 422 [style=dashed label="floating-point-literal"]
  927 -> 423 [style=dashed label="fold-expression"]
  927 -> 424 [style=dashed label="fractional-constant"]
  927 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  927 -> 426 [style=dashed label="hexadecimal-literal"]
  927 -> 427 [style=dashed label="hexadecimal-prefix"]
  927 -> 428 [style=dashed label="id-expression"]
  927 -> 429 [style=dashed label="inclusive-or-expression"]
  927 -> 1145 [style=dashed label="initializer-clause"]
  927 -> 1146 [style=dashed label="initializer-list"]
  927 -> 430 [style=dashed label="integer-literal"]
  927 -> 431 [style=dashed label="lambda-expression"]
  927 -> 432 [style=dashed label="lambda-introducer"]
  927 -> 433 [style=dashed label="literal"]
  927 -> 96 [style=dashed label="literal-operator-id"]
  927 -> 434 [style=dashed label="logical-and-expression"]
  927 -> 533 [style=dashed label="logical-or-expression"]
  927 -> 436 [style=dashed label="multiplicative-expression"]
  927 -> 100 [style=dashed label="namespace-alias"]
  927 -> 103 [style=dashed label="namespace-name"]
  927 -> 437 [style=dashed label="nested-name-specifier"]
  927 -> 438 [style=dashed label="new-expression"]
  927 -> 439 [style=dashed label="noexcept-expression"]
  927 -> 440 [style=dashed label="nonzero-digit"]
  927 -> 441 [style=dashed label="octal-literal"]
  927 -> 109 [style=dashed label="operator-function-id"]
  927 -> 110 [style=dashed label="placeholder-type-specifier"]
  927 -> 442 [style=dashed label="pm-expression"]
  927 -> 443 [style=dashed label="pointer-literal"]
  927 -> 444 [style=dashed label="postfix-expression"]
  927 -> 445 [style=dashed label="primary-expression"]
  927 -> 113 [style=dashed label="qualified-id"]
  927 -> 446 [style=dashed label="relational-expression"]
  927 -> 447 [style=dashed label="requires-expression"]
  927 -> 448 [style=dashed label="shift-expression"]
  927 -> 115 [style=dashed label="simple-template-id"]
  927 -> 534 [style=dashed label="simple-type-specifier"]
  927 -> 450 [style=dashed label="string-literal"]
  927 -> 121 [style=dashed label="template-id"]
  927 -> 216 [style=dashed label="template-name"]
  927 -> 535 [style=dashed label="throw-expression"]
  927 -> 124 [style=dashed label="type-constraint"]
  927 -> 125 [style=dashed label="type-name"]
  927 -> 127 [style=dashed label="typedef-name"]
  927 -> 536 [style=dashed label="typename-specifier"]
  927 -> 454 [style=dashed label="unary-expression"]
  927 -> 455 [style=dashed label="unary-operator"]
  927 -> 130 [style=dashed label="unqualified-id"]
  927 -> 456 [style=dashed label="user-defined-character-literal"]
  927 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  927 -> 458 [style=dashed label="user-defined-integer-literal"]
  927 -> 459 [style=dashed label="user-defined-literal"]
  927 -> 460 [style=dashed label="user-defined-string-literal"]
  927 -> 537 [style=dashed label="yield-expression"]
  928 [label="State 928\n\l873 postfix-expression: postfix-expression \"->\" • id-expression\l874                   | postfix-expression \"->\" • \"template\" id-expression\l"]
  928 -> 148 [style=solid label="IDENTIFIER"]
  928 -> 9 [style=solid label="\"::\""]
  928 -> 1387 [style=solid label="\"template\""]
  928 -> 17 [style=solid label="\"operator\""]
  928 -> 135 [style=solid label="\"decltype\""]
  928 -> 36 [style=solid label="'~'"]
  928 -> 66 [style=dashed label="class-name"]
  928 -> 69 [style=dashed label="conversion-function-id"]
  928 -> 139 [style=dashed label="decltype-specifier"]
  928 -> 85 [style=dashed label="enum-name"]
  928 -> 1388 [style=dashed label="id-expression"]
  928 -> 96 [style=dashed label="literal-operator-id"]
  928 -> 100 [style=dashed label="namespace-alias"]
  928 -> 103 [style=dashed label="namespace-name"]
  928 -> 153 [style=dashed label="nested-name-specifier"]
  928 -> 109 [style=dashed label="operator-function-id"]
  928 -> 113 [style=dashed label="qualified-id"]
  928 -> 115 [style=dashed label="simple-template-id"]
  928 -> 121 [style=dashed label="template-id"]
  928 -> 143 [style=dashed label="template-name"]
  928 -> 144 [style=dashed label="type-name"]
  928 -> 127 [style=dashed label="typedef-name"]
  928 -> 130 [style=dashed label="unqualified-id"]
  929 [label="State 929\n\l871 postfix-expression: postfix-expression '.' • id-expression\l872                   | postfix-expression '.' • \"template\" id-expression\l"]
  929 -> 148 [style=solid label="IDENTIFIER"]
  929 -> 9 [style=solid label="\"::\""]
  929 -> 1389 [style=solid label="\"template\""]
  929 -> 17 [style=solid label="\"operator\""]
  929 -> 135 [style=solid label="\"decltype\""]
  929 -> 36 [style=solid label="'~'"]
  929 -> 66 [style=dashed label="class-name"]
  929 -> 69 [style=dashed label="conversion-function-id"]
  929 -> 139 [style=dashed label="decltype-specifier"]
  929 -> 85 [style=dashed label="enum-name"]
  929 -> 1390 [style=dashed label="id-expression"]
  929 -> 96 [style=dashed label="literal-operator-id"]
  929 -> 100 [style=dashed label="namespace-alias"]
  929 -> 103 [style=dashed label="namespace-name"]
  929 -> 153 [style=dashed label="nested-name-specifier"]
  929 -> 109 [style=dashed label="operator-function-id"]
  929 -> 113 [style=dashed label="qualified-id"]
  929 -> 115 [style=dashed label="simple-template-id"]
  929 -> 121 [style=dashed label="template-id"]
  929 -> 143 [style=dashed label="template-name"]
  929 -> 144 [style=dashed label="type-name"]
  929 -> 127 [style=dashed label="typedef-name"]
  929 -> 130 [style=dashed label="unqualified-id"]
  930 [label="State 930\n\l875 postfix-expression: postfix-expression \"++\" •\l"]
  930 -> "930R875" [style=solid]
 "930R875" [label="R875", fillcolor=3, shape=diamond, style=filled]
  931 [label="State 931\n\l876 postfix-expression: postfix-expression \"--\" •\l"]
  931 -> "931R876" [style=solid]
 "931R876" [label="R876", fillcolor=3, shape=diamond, style=filled]
  932 [label="State 932\n\l931 relational-expression: relational-expression '<' • compare-expression\l"]
  932 -> 1 [style=solid label="IDENTIFIER"]
  932 -> 361 [style=solid label="'+'"]
  932 -> 362 [style=solid label="'-'"]
  932 -> 363 [style=solid label="'('"]
  932 -> 364 [style=solid label="'&'"]
  932 -> 365 [style=solid label="\"::\""]
  932 -> 366 [style=solid label="'['"]
  932 -> 367 [style=solid label="\"co_await\""]
  932 -> 368 [style=solid label="'0'"]
  932 -> 369 [style=solid label="'1'"]
  932 -> 370 [style=solid label="\"0b\""]
  932 -> 371 [style=solid label="\"0B\""]
  932 -> 372 [style=solid label="'\\''"]
  932 -> 373 [style=solid label="\"false\""]
  932 -> 374 [style=solid label="\"true\""]
  932 -> 375 [style=solid label="\"noexcept\""]
  932 -> 17 [style=solid label="\"operator\""]
  932 -> 26 [style=solid label="\"decltype\""]
  932 -> 376 [style=solid label="\"delete\""]
  932 -> 377 [style=solid label="'.'"]
  932 -> 378 [style=solid label="'2'"]
  932 -> 379 [style=solid label="'3'"]
  932 -> 380 [style=solid label="'4'"]
  932 -> 381 [style=solid label="'5'"]
  932 -> 382 [style=solid label="'6'"]
  932 -> 383 [style=solid label="'7'"]
  932 -> 384 [style=solid label="'8'"]
  932 -> 385 [style=solid label="'9'"]
  932 -> 185 [style=solid label="\"u8\""]
  932 -> 186 [style=solid label="'u'"]
  932 -> 187 [style=solid label="'U'"]
  932 -> 188 [style=solid label="'L'"]
  932 -> 386 [style=solid label="'*'"]
  932 -> 203 [style=solid label="'\"'"]
  932 -> 387 [style=solid label="\"0x\""]
  932 -> 388 [style=solid label="\"0X\""]
  932 -> 389 [style=solid label="\"requires\""]
  932 -> 390 [style=solid label="\"new\""]
  932 -> 391 [style=solid label="'~'"]
  932 -> 392 [style=solid label="'!'"]
  932 -> 393 [style=solid label="\"++\""]
  932 -> 394 [style=solid label="\"--\""]
  932 -> 395 [style=solid label="\"this\""]
  932 -> 37 [style=solid label="\"auto\""]
  932 -> 396 [style=solid label="\"nullptr\""]
  932 -> 397 [style=solid label="\"dynamic_cast\""]
  932 -> 398 [style=solid label="\"static_cast\""]
  932 -> 399 [style=solid label="\"reinterpret_cast\""]
  932 -> 400 [style=solid label="\"const_cast\""]
  932 -> 401 [style=solid label="\"typeid\""]
  932 -> 38 [style=solid label="\"char\""]
  932 -> 39 [style=solid label="\"char8_t\""]
  932 -> 40 [style=solid label="\"char16_t\""]
  932 -> 41 [style=solid label="\"char32_t\""]
  932 -> 42 [style=solid label="\"wchar_t\""]
  932 -> 43 [style=solid label="\"bool\""]
  932 -> 44 [style=solid label="\"short\""]
  932 -> 45 [style=solid label="\"int\""]
  932 -> 46 [style=solid label="\"long\""]
  932 -> 47 [style=solid label="\"signed\""]
  932 -> 48 [style=solid label="\"unsigned\""]
  932 -> 49 [style=solid label="\"float\""]
  932 -> 50 [style=solid label="\"double\""]
  932 -> 51 [style=solid label="\"void\""]
  932 -> 209 [style=solid label="'R'"]
  932 -> 56 [style=solid label="\"typename\""]
  932 -> 402 [style=solid label="\"sizeof\""]
  932 -> 403 [style=solid label="\"alignof\""]
  932 -> 404 [style=dashed label="additive-expression"]
  932 -> 406 [style=dashed label="await-expression"]
  932 -> 407 [style=dashed label="binary-literal"]
  932 -> 408 [style=dashed label="boolean-literal"]
  932 -> 409 [style=dashed label="cast-expression"]
  932 -> 410 [style=dashed label="character-literal"]
  932 -> 66 [style=dashed label="class-name"]
  932 -> 1391 [style=dashed label="compare-expression"]
  932 -> 68 [style=dashed label="concept-name"]
  932 -> 69 [style=dashed label="conversion-function-id"]
  932 -> 414 [style=dashed label="decimal-floating-point-literal"]
  932 -> 415 [style=dashed label="decimal-literal"]
  932 -> 77 [style=dashed label="decltype-specifier"]
  932 -> 416 [style=dashed label="delete-expression"]
  932 -> 417 [style=dashed label="digit"]
  932 -> 418 [style=dashed label="digit-sequence"]
  932 -> 419 [style=dashed label="encoding-prefix"]
  932 -> 85 [style=dashed label="enum-name"]
  932 -> 422 [style=dashed label="floating-point-literal"]
  932 -> 423 [style=dashed label="fold-expression"]
  932 -> 424 [style=dashed label="fractional-constant"]
  932 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  932 -> 426 [style=dashed label="hexadecimal-literal"]
  932 -> 427 [style=dashed label="hexadecimal-prefix"]
  932 -> 428 [style=dashed label="id-expression"]
  932 -> 430 [style=dashed label="integer-literal"]
  932 -> 431 [style=dashed label="lambda-expression"]
  932 -> 432 [style=dashed label="lambda-introducer"]
  932 -> 433 [style=dashed label="literal"]
  932 -> 96 [style=dashed label="literal-operator-id"]
  932 -> 436 [style=dashed label="multiplicative-expression"]
  932 -> 100 [style=dashed label="namespace-alias"]
  932 -> 103 [style=dashed label="namespace-name"]
  932 -> 437 [style=dashed label="nested-name-specifier"]
  932 -> 438 [style=dashed label="new-expression"]
  932 -> 439 [style=dashed label="noexcept-expression"]
  932 -> 440 [style=dashed label="nonzero-digit"]
  932 -> 441 [style=dashed label="octal-literal"]
  932 -> 109 [style=dashed label="operator-function-id"]
  932 -> 110 [style=dashed label="placeholder-type-specifier"]
  932 -> 442 [style=dashed label="pm-expression"]
  932 -> 443 [style=dashed label="pointer-literal"]
  932 -> 444 [style=dashed label="postfix-expression"]
  932 -> 445 [style=dashed label="primary-expression"]
  932 -> 113 [style=dashed label="qualified-id"]
  932 -> 447 [style=dashed label="requires-expression"]
  932 -> 448 [style=dashed label="shift-expression"]
  932 -> 115 [style=dashed label="simple-template-id"]
  932 -> 534 [style=dashed label="simple-type-specifier"]
  932 -> 450 [style=dashed label="string-literal"]
  932 -> 121 [style=dashed label="template-id"]
  932 -> 216 [style=dashed label="template-name"]
  932 -> 124 [style=dashed label="type-constraint"]
  932 -> 125 [style=dashed label="type-name"]
  932 -> 127 [style=dashed label="typedef-name"]
  932 -> 536 [style=dashed label="typename-specifier"]
  932 -> 454 [style=dashed label="unary-expression"]
  932 -> 455 [style=dashed label="unary-operator"]
  932 -> 130 [style=dashed label="unqualified-id"]
  932 -> 456 [style=dashed label="user-defined-character-literal"]
  932 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  932 -> 458 [style=dashed label="user-defined-integer-literal"]
  932 -> 459 [style=dashed label="user-defined-literal"]
  932 -> 460 [style=dashed label="user-defined-string-literal"]
  933 [label="State 933\n\l932 relational-expression: relational-expression '>' • compare-expression\l"]
  933 -> 1 [style=solid label="IDENTIFIER"]
  933 -> 361 [style=solid label="'+'"]
  933 -> 362 [style=solid label="'-'"]
  933 -> 363 [style=solid label="'('"]
  933 -> 364 [style=solid label="'&'"]
  933 -> 365 [style=solid label="\"::\""]
  933 -> 366 [style=solid label="'['"]
  933 -> 367 [style=solid label="\"co_await\""]
  933 -> 368 [style=solid label="'0'"]
  933 -> 369 [style=solid label="'1'"]
  933 -> 370 [style=solid label="\"0b\""]
  933 -> 371 [style=solid label="\"0B\""]
  933 -> 372 [style=solid label="'\\''"]
  933 -> 373 [style=solid label="\"false\""]
  933 -> 374 [style=solid label="\"true\""]
  933 -> 375 [style=solid label="\"noexcept\""]
  933 -> 17 [style=solid label="\"operator\""]
  933 -> 26 [style=solid label="\"decltype\""]
  933 -> 376 [style=solid label="\"delete\""]
  933 -> 377 [style=solid label="'.'"]
  933 -> 378 [style=solid label="'2'"]
  933 -> 379 [style=solid label="'3'"]
  933 -> 380 [style=solid label="'4'"]
  933 -> 381 [style=solid label="'5'"]
  933 -> 382 [style=solid label="'6'"]
  933 -> 383 [style=solid label="'7'"]
  933 -> 384 [style=solid label="'8'"]
  933 -> 385 [style=solid label="'9'"]
  933 -> 185 [style=solid label="\"u8\""]
  933 -> 186 [style=solid label="'u'"]
  933 -> 187 [style=solid label="'U'"]
  933 -> 188 [style=solid label="'L'"]
  933 -> 386 [style=solid label="'*'"]
  933 -> 203 [style=solid label="'\"'"]
  933 -> 387 [style=solid label="\"0x\""]
  933 -> 388 [style=solid label="\"0X\""]
  933 -> 389 [style=solid label="\"requires\""]
  933 -> 390 [style=solid label="\"new\""]
  933 -> 391 [style=solid label="'~'"]
  933 -> 392 [style=solid label="'!'"]
  933 -> 393 [style=solid label="\"++\""]
  933 -> 394 [style=solid label="\"--\""]
  933 -> 395 [style=solid label="\"this\""]
  933 -> 37 [style=solid label="\"auto\""]
  933 -> 396 [style=solid label="\"nullptr\""]
  933 -> 397 [style=solid label="\"dynamic_cast\""]
  933 -> 398 [style=solid label="\"static_cast\""]
  933 -> 399 [style=solid label="\"reinterpret_cast\""]
  933 -> 400 [style=solid label="\"const_cast\""]
  933 -> 401 [style=solid label="\"typeid\""]
  933 -> 38 [style=solid label="\"char\""]
  933 -> 39 [style=solid label="\"char8_t\""]
  933 -> 40 [style=solid label="\"char16_t\""]
  933 -> 41 [style=solid label="\"char32_t\""]
  933 -> 42 [style=solid label="\"wchar_t\""]
  933 -> 43 [style=solid label="\"bool\""]
  933 -> 44 [style=solid label="\"short\""]
  933 -> 45 [style=solid label="\"int\""]
  933 -> 46 [style=solid label="\"long\""]
  933 -> 47 [style=solid label="\"signed\""]
  933 -> 48 [style=solid label="\"unsigned\""]
  933 -> 49 [style=solid label="\"float\""]
  933 -> 50 [style=solid label="\"double\""]
  933 -> 51 [style=solid label="\"void\""]
  933 -> 209 [style=solid label="'R'"]
  933 -> 56 [style=solid label="\"typename\""]
  933 -> 402 [style=solid label="\"sizeof\""]
  933 -> 403 [style=solid label="\"alignof\""]
  933 -> 404 [style=dashed label="additive-expression"]
  933 -> 406 [style=dashed label="await-expression"]
  933 -> 407 [style=dashed label="binary-literal"]
  933 -> 408 [style=dashed label="boolean-literal"]
  933 -> 409 [style=dashed label="cast-expression"]
  933 -> 410 [style=dashed label="character-literal"]
  933 -> 66 [style=dashed label="class-name"]
  933 -> 1392 [style=dashed label="compare-expression"]
  933 -> 68 [style=dashed label="concept-name"]
  933 -> 69 [style=dashed label="conversion-function-id"]
  933 -> 414 [style=dashed label="decimal-floating-point-literal"]
  933 -> 415 [style=dashed label="decimal-literal"]
  933 -> 77 [style=dashed label="decltype-specifier"]
  933 -> 416 [style=dashed label="delete-expression"]
  933 -> 417 [style=dashed label="digit"]
  933 -> 418 [style=dashed label="digit-sequence"]
  933 -> 419 [style=dashed label="encoding-prefix"]
  933 -> 85 [style=dashed label="enum-name"]
  933 -> 422 [style=dashed label="floating-point-literal"]
  933 -> 423 [style=dashed label="fold-expression"]
  933 -> 424 [style=dashed label="fractional-constant"]
  933 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  933 -> 426 [style=dashed label="hexadecimal-literal"]
  933 -> 427 [style=dashed label="hexadecimal-prefix"]
  933 -> 428 [style=dashed label="id-expression"]
  933 -> 430 [style=dashed label="integer-literal"]
  933 -> 431 [style=dashed label="lambda-expression"]
  933 -> 432 [style=dashed label="lambda-introducer"]
  933 -> 433 [style=dashed label="literal"]
  933 -> 96 [style=dashed label="literal-operator-id"]
  933 -> 436 [style=dashed label="multiplicative-expression"]
  933 -> 100 [style=dashed label="namespace-alias"]
  933 -> 103 [style=dashed label="namespace-name"]
  933 -> 437 [style=dashed label="nested-name-specifier"]
  933 -> 438 [style=dashed label="new-expression"]
  933 -> 439 [style=dashed label="noexcept-expression"]
  933 -> 440 [style=dashed label="nonzero-digit"]
  933 -> 441 [style=dashed label="octal-literal"]
  933 -> 109 [style=dashed label="operator-function-id"]
  933 -> 110 [style=dashed label="placeholder-type-specifier"]
  933 -> 442 [style=dashed label="pm-expression"]
  933 -> 443 [style=dashed label="pointer-literal"]
  933 -> 444 [style=dashed label="postfix-expression"]
  933 -> 445 [style=dashed label="primary-expression"]
  933 -> 113 [style=dashed label="qualified-id"]
  933 -> 447 [style=dashed label="requires-expression"]
  933 -> 448 [style=dashed label="shift-expression"]
  933 -> 115 [style=dashed label="simple-template-id"]
  933 -> 534 [style=dashed label="simple-type-specifier"]
  933 -> 450 [style=dashed label="string-literal"]
  933 -> 121 [style=dashed label="template-id"]
  933 -> 216 [style=dashed label="template-name"]
  933 -> 124 [style=dashed label="type-constraint"]
  933 -> 125 [style=dashed label="type-name"]
  933 -> 127 [style=dashed label="typedef-name"]
  933 -> 536 [style=dashed label="typename-specifier"]
  933 -> 454 [style=dashed label="unary-expression"]
  933 -> 455 [style=dashed label="unary-operator"]
  933 -> 130 [style=dashed label="unqualified-id"]
  933 -> 456 [style=dashed label="user-defined-character-literal"]
  933 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  933 -> 458 [style=dashed label="user-defined-integer-literal"]
  933 -> 459 [style=dashed label="user-defined-literal"]
  933 -> 460 [style=dashed label="user-defined-string-literal"]
  934 [label="State 934\n\l933 relational-expression: relational-expression \"<=\" • compare-expression\l"]
  934 -> 1 [style=solid label="IDENTIFIER"]
  934 -> 361 [style=solid label="'+'"]
  934 -> 362 [style=solid label="'-'"]
  934 -> 363 [style=solid label="'('"]
  934 -> 364 [style=solid label="'&'"]
  934 -> 365 [style=solid label="\"::\""]
  934 -> 366 [style=solid label="'['"]
  934 -> 367 [style=solid label="\"co_await\""]
  934 -> 368 [style=solid label="'0'"]
  934 -> 369 [style=solid label="'1'"]
  934 -> 370 [style=solid label="\"0b\""]
  934 -> 371 [style=solid label="\"0B\""]
  934 -> 372 [style=solid label="'\\''"]
  934 -> 373 [style=solid label="\"false\""]
  934 -> 374 [style=solid label="\"true\""]
  934 -> 375 [style=solid label="\"noexcept\""]
  934 -> 17 [style=solid label="\"operator\""]
  934 -> 26 [style=solid label="\"decltype\""]
  934 -> 376 [style=solid label="\"delete\""]
  934 -> 377 [style=solid label="'.'"]
  934 -> 378 [style=solid label="'2'"]
  934 -> 379 [style=solid label="'3'"]
  934 -> 380 [style=solid label="'4'"]
  934 -> 381 [style=solid label="'5'"]
  934 -> 382 [style=solid label="'6'"]
  934 -> 383 [style=solid label="'7'"]
  934 -> 384 [style=solid label="'8'"]
  934 -> 385 [style=solid label="'9'"]
  934 -> 185 [style=solid label="\"u8\""]
  934 -> 186 [style=solid label="'u'"]
  934 -> 187 [style=solid label="'U'"]
  934 -> 188 [style=solid label="'L'"]
  934 -> 386 [style=solid label="'*'"]
  934 -> 203 [style=solid label="'\"'"]
  934 -> 387 [style=solid label="\"0x\""]
  934 -> 388 [style=solid label="\"0X\""]
  934 -> 389 [style=solid label="\"requires\""]
  934 -> 390 [style=solid label="\"new\""]
  934 -> 391 [style=solid label="'~'"]
  934 -> 392 [style=solid label="'!'"]
  934 -> 393 [style=solid label="\"++\""]
  934 -> 394 [style=solid label="\"--\""]
  934 -> 395 [style=solid label="\"this\""]
  934 -> 37 [style=solid label="\"auto\""]
  934 -> 396 [style=solid label="\"nullptr\""]
  934 -> 397 [style=solid label="\"dynamic_cast\""]
  934 -> 398 [style=solid label="\"static_cast\""]
  934 -> 399 [style=solid label="\"reinterpret_cast\""]
  934 -> 400 [style=solid label="\"const_cast\""]
  934 -> 401 [style=solid label="\"typeid\""]
  934 -> 38 [style=solid label="\"char\""]
  934 -> 39 [style=solid label="\"char8_t\""]
  934 -> 40 [style=solid label="\"char16_t\""]
  934 -> 41 [style=solid label="\"char32_t\""]
  934 -> 42 [style=solid label="\"wchar_t\""]
  934 -> 43 [style=solid label="\"bool\""]
  934 -> 44 [style=solid label="\"short\""]
  934 -> 45 [style=solid label="\"int\""]
  934 -> 46 [style=solid label="\"long\""]
  934 -> 47 [style=solid label="\"signed\""]
  934 -> 48 [style=solid label="\"unsigned\""]
  934 -> 49 [style=solid label="\"float\""]
  934 -> 50 [style=solid label="\"double\""]
  934 -> 51 [style=solid label="\"void\""]
  934 -> 209 [style=solid label="'R'"]
  934 -> 56 [style=solid label="\"typename\""]
  934 -> 402 [style=solid label="\"sizeof\""]
  934 -> 403 [style=solid label="\"alignof\""]
  934 -> 404 [style=dashed label="additive-expression"]
  934 -> 406 [style=dashed label="await-expression"]
  934 -> 407 [style=dashed label="binary-literal"]
  934 -> 408 [style=dashed label="boolean-literal"]
  934 -> 409 [style=dashed label="cast-expression"]
  934 -> 410 [style=dashed label="character-literal"]
  934 -> 66 [style=dashed label="class-name"]
  934 -> 1393 [style=dashed label="compare-expression"]
  934 -> 68 [style=dashed label="concept-name"]
  934 -> 69 [style=dashed label="conversion-function-id"]
  934 -> 414 [style=dashed label="decimal-floating-point-literal"]
  934 -> 415 [style=dashed label="decimal-literal"]
  934 -> 77 [style=dashed label="decltype-specifier"]
  934 -> 416 [style=dashed label="delete-expression"]
  934 -> 417 [style=dashed label="digit"]
  934 -> 418 [style=dashed label="digit-sequence"]
  934 -> 419 [style=dashed label="encoding-prefix"]
  934 -> 85 [style=dashed label="enum-name"]
  934 -> 422 [style=dashed label="floating-point-literal"]
  934 -> 423 [style=dashed label="fold-expression"]
  934 -> 424 [style=dashed label="fractional-constant"]
  934 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  934 -> 426 [style=dashed label="hexadecimal-literal"]
  934 -> 427 [style=dashed label="hexadecimal-prefix"]
  934 -> 428 [style=dashed label="id-expression"]
  934 -> 430 [style=dashed label="integer-literal"]
  934 -> 431 [style=dashed label="lambda-expression"]
  934 -> 432 [style=dashed label="lambda-introducer"]
  934 -> 433 [style=dashed label="literal"]
  934 -> 96 [style=dashed label="literal-operator-id"]
  934 -> 436 [style=dashed label="multiplicative-expression"]
  934 -> 100 [style=dashed label="namespace-alias"]
  934 -> 103 [style=dashed label="namespace-name"]
  934 -> 437 [style=dashed label="nested-name-specifier"]
  934 -> 438 [style=dashed label="new-expression"]
  934 -> 439 [style=dashed label="noexcept-expression"]
  934 -> 440 [style=dashed label="nonzero-digit"]
  934 -> 441 [style=dashed label="octal-literal"]
  934 -> 109 [style=dashed label="operator-function-id"]
  934 -> 110 [style=dashed label="placeholder-type-specifier"]
  934 -> 442 [style=dashed label="pm-expression"]
  934 -> 443 [style=dashed label="pointer-literal"]
  934 -> 444 [style=dashed label="postfix-expression"]
  934 -> 445 [style=dashed label="primary-expression"]
  934 -> 113 [style=dashed label="qualified-id"]
  934 -> 447 [style=dashed label="requires-expression"]
  934 -> 448 [style=dashed label="shift-expression"]
  934 -> 115 [style=dashed label="simple-template-id"]
  934 -> 534 [style=dashed label="simple-type-specifier"]
  934 -> 450 [style=dashed label="string-literal"]
  934 -> 121 [style=dashed label="template-id"]
  934 -> 216 [style=dashed label="template-name"]
  934 -> 124 [style=dashed label="type-constraint"]
  934 -> 125 [style=dashed label="type-name"]
  934 -> 127 [style=dashed label="typedef-name"]
  934 -> 536 [style=dashed label="typename-specifier"]
  934 -> 454 [style=dashed label="unary-expression"]
  934 -> 455 [style=dashed label="unary-operator"]
  934 -> 130 [style=dashed label="unqualified-id"]
  934 -> 456 [style=dashed label="user-defined-character-literal"]
  934 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  934 -> 458 [style=dashed label="user-defined-integer-literal"]
  934 -> 459 [style=dashed label="user-defined-literal"]
  934 -> 460 [style=dashed label="user-defined-string-literal"]
  935 [label="State 935\n\l934 relational-expression: relational-expression \">=\" • compare-expression\l"]
  935 -> 1 [style=solid label="IDENTIFIER"]
  935 -> 361 [style=solid label="'+'"]
  935 -> 362 [style=solid label="'-'"]
  935 -> 363 [style=solid label="'('"]
  935 -> 364 [style=solid label="'&'"]
  935 -> 365 [style=solid label="\"::\""]
  935 -> 366 [style=solid label="'['"]
  935 -> 367 [style=solid label="\"co_await\""]
  935 -> 368 [style=solid label="'0'"]
  935 -> 369 [style=solid label="'1'"]
  935 -> 370 [style=solid label="\"0b\""]
  935 -> 371 [style=solid label="\"0B\""]
  935 -> 372 [style=solid label="'\\''"]
  935 -> 373 [style=solid label="\"false\""]
  935 -> 374 [style=solid label="\"true\""]
  935 -> 375 [style=solid label="\"noexcept\""]
  935 -> 17 [style=solid label="\"operator\""]
  935 -> 26 [style=solid label="\"decltype\""]
  935 -> 376 [style=solid label="\"delete\""]
  935 -> 377 [style=solid label="'.'"]
  935 -> 378 [style=solid label="'2'"]
  935 -> 379 [style=solid label="'3'"]
  935 -> 380 [style=solid label="'4'"]
  935 -> 381 [style=solid label="'5'"]
  935 -> 382 [style=solid label="'6'"]
  935 -> 383 [style=solid label="'7'"]
  935 -> 384 [style=solid label="'8'"]
  935 -> 385 [style=solid label="'9'"]
  935 -> 185 [style=solid label="\"u8\""]
  935 -> 186 [style=solid label="'u'"]
  935 -> 187 [style=solid label="'U'"]
  935 -> 188 [style=solid label="'L'"]
  935 -> 386 [style=solid label="'*'"]
  935 -> 203 [style=solid label="'\"'"]
  935 -> 387 [style=solid label="\"0x\""]
  935 -> 388 [style=solid label="\"0X\""]
  935 -> 389 [style=solid label="\"requires\""]
  935 -> 390 [style=solid label="\"new\""]
  935 -> 391 [style=solid label="'~'"]
  935 -> 392 [style=solid label="'!'"]
  935 -> 393 [style=solid label="\"++\""]
  935 -> 394 [style=solid label="\"--\""]
  935 -> 395 [style=solid label="\"this\""]
  935 -> 37 [style=solid label="\"auto\""]
  935 -> 396 [style=solid label="\"nullptr\""]
  935 -> 397 [style=solid label="\"dynamic_cast\""]
  935 -> 398 [style=solid label="\"static_cast\""]
  935 -> 399 [style=solid label="\"reinterpret_cast\""]
  935 -> 400 [style=solid label="\"const_cast\""]
  935 -> 401 [style=solid label="\"typeid\""]
  935 -> 38 [style=solid label="\"char\""]
  935 -> 39 [style=solid label="\"char8_t\""]
  935 -> 40 [style=solid label="\"char16_t\""]
  935 -> 41 [style=solid label="\"char32_t\""]
  935 -> 42 [style=solid label="\"wchar_t\""]
  935 -> 43 [style=solid label="\"bool\""]
  935 -> 44 [style=solid label="\"short\""]
  935 -> 45 [style=solid label="\"int\""]
  935 -> 46 [style=solid label="\"long\""]
  935 -> 47 [style=solid label="\"signed\""]
  935 -> 48 [style=solid label="\"unsigned\""]
  935 -> 49 [style=solid label="\"float\""]
  935 -> 50 [style=solid label="\"double\""]
  935 -> 51 [style=solid label="\"void\""]
  935 -> 209 [style=solid label="'R'"]
  935 -> 56 [style=solid label="\"typename\""]
  935 -> 402 [style=solid label="\"sizeof\""]
  935 -> 403 [style=solid label="\"alignof\""]
  935 -> 404 [style=dashed label="additive-expression"]
  935 -> 406 [style=dashed label="await-expression"]
  935 -> 407 [style=dashed label="binary-literal"]
  935 -> 408 [style=dashed label="boolean-literal"]
  935 -> 409 [style=dashed label="cast-expression"]
  935 -> 410 [style=dashed label="character-literal"]
  935 -> 66 [style=dashed label="class-name"]
  935 -> 1394 [style=dashed label="compare-expression"]
  935 -> 68 [style=dashed label="concept-name"]
  935 -> 69 [style=dashed label="conversion-function-id"]
  935 -> 414 [style=dashed label="decimal-floating-point-literal"]
  935 -> 415 [style=dashed label="decimal-literal"]
  935 -> 77 [style=dashed label="decltype-specifier"]
  935 -> 416 [style=dashed label="delete-expression"]
  935 -> 417 [style=dashed label="digit"]
  935 -> 418 [style=dashed label="digit-sequence"]
  935 -> 419 [style=dashed label="encoding-prefix"]
  935 -> 85 [style=dashed label="enum-name"]
  935 -> 422 [style=dashed label="floating-point-literal"]
  935 -> 423 [style=dashed label="fold-expression"]
  935 -> 424 [style=dashed label="fractional-constant"]
  935 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  935 -> 426 [style=dashed label="hexadecimal-literal"]
  935 -> 427 [style=dashed label="hexadecimal-prefix"]
  935 -> 428 [style=dashed label="id-expression"]
  935 -> 430 [style=dashed label="integer-literal"]
  935 -> 431 [style=dashed label="lambda-expression"]
  935 -> 432 [style=dashed label="lambda-introducer"]
  935 -> 433 [style=dashed label="literal"]
  935 -> 96 [style=dashed label="literal-operator-id"]
  935 -> 436 [style=dashed label="multiplicative-expression"]
  935 -> 100 [style=dashed label="namespace-alias"]
  935 -> 103 [style=dashed label="namespace-name"]
  935 -> 437 [style=dashed label="nested-name-specifier"]
  935 -> 438 [style=dashed label="new-expression"]
  935 -> 439 [style=dashed label="noexcept-expression"]
  935 -> 440 [style=dashed label="nonzero-digit"]
  935 -> 441 [style=dashed label="octal-literal"]
  935 -> 109 [style=dashed label="operator-function-id"]
  935 -> 110 [style=dashed label="placeholder-type-specifier"]
  935 -> 442 [style=dashed label="pm-expression"]
  935 -> 443 [style=dashed label="pointer-literal"]
  935 -> 444 [style=dashed label="postfix-expression"]
  935 -> 445 [style=dashed label="primary-expression"]
  935 -> 113 [style=dashed label="qualified-id"]
  935 -> 447 [style=dashed label="requires-expression"]
  935 -> 448 [style=dashed label="shift-expression"]
  935 -> 115 [style=dashed label="simple-template-id"]
  935 -> 534 [style=dashed label="simple-type-specifier"]
  935 -> 450 [style=dashed label="string-literal"]
  935 -> 121 [style=dashed label="template-id"]
  935 -> 216 [style=dashed label="template-name"]
  935 -> 124 [style=dashed label="type-constraint"]
  935 -> 125 [style=dashed label="type-name"]
  935 -> 127 [style=dashed label="typedef-name"]
  935 -> 536 [style=dashed label="typename-specifier"]
  935 -> 454 [style=dashed label="unary-expression"]
  935 -> 455 [style=dashed label="unary-operator"]
  935 -> 130 [style=dashed label="unqualified-id"]
  935 -> 456 [style=dashed label="user-defined-character-literal"]
  935 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  935 -> 458 [style=dashed label="user-defined-integer-literal"]
  935 -> 459 [style=dashed label="user-defined-literal"]
  935 -> 460 [style=dashed label="user-defined-string-literal"]
  936 [label="State 936\n\l967 shift-expression: shift-expression \"<<\" • additive-expression\l"]
  936 -> 1 [style=solid label="IDENTIFIER"]
  936 -> 361 [style=solid label="'+'"]
  936 -> 362 [style=solid label="'-'"]
  936 -> 363 [style=solid label="'('"]
  936 -> 364 [style=solid label="'&'"]
  936 -> 365 [style=solid label="\"::\""]
  936 -> 366 [style=solid label="'['"]
  936 -> 367 [style=solid label="\"co_await\""]
  936 -> 368 [style=solid label="'0'"]
  936 -> 369 [style=solid label="'1'"]
  936 -> 370 [style=solid label="\"0b\""]
  936 -> 371 [style=solid label="\"0B\""]
  936 -> 372 [style=solid label="'\\''"]
  936 -> 373 [style=solid label="\"false\""]
  936 -> 374 [style=solid label="\"true\""]
  936 -> 375 [style=solid label="\"noexcept\""]
  936 -> 17 [style=solid label="\"operator\""]
  936 -> 26 [style=solid label="\"decltype\""]
  936 -> 376 [style=solid label="\"delete\""]
  936 -> 377 [style=solid label="'.'"]
  936 -> 378 [style=solid label="'2'"]
  936 -> 379 [style=solid label="'3'"]
  936 -> 380 [style=solid label="'4'"]
  936 -> 381 [style=solid label="'5'"]
  936 -> 382 [style=solid label="'6'"]
  936 -> 383 [style=solid label="'7'"]
  936 -> 384 [style=solid label="'8'"]
  936 -> 385 [style=solid label="'9'"]
  936 -> 185 [style=solid label="\"u8\""]
  936 -> 186 [style=solid label="'u'"]
  936 -> 187 [style=solid label="'U'"]
  936 -> 188 [style=solid label="'L'"]
  936 -> 386 [style=solid label="'*'"]
  936 -> 203 [style=solid label="'\"'"]
  936 -> 387 [style=solid label="\"0x\""]
  936 -> 388 [style=solid label="\"0X\""]
  936 -> 389 [style=solid label="\"requires\""]
  936 -> 390 [style=solid label="\"new\""]
  936 -> 391 [style=solid label="'~'"]
  936 -> 392 [style=solid label="'!'"]
  936 -> 393 [style=solid label="\"++\""]
  936 -> 394 [style=solid label="\"--\""]
  936 -> 395 [style=solid label="\"this\""]
  936 -> 37 [style=solid label="\"auto\""]
  936 -> 396 [style=solid label="\"nullptr\""]
  936 -> 397 [style=solid label="\"dynamic_cast\""]
  936 -> 398 [style=solid label="\"static_cast\""]
  936 -> 399 [style=solid label="\"reinterpret_cast\""]
  936 -> 400 [style=solid label="\"const_cast\""]
  936 -> 401 [style=solid label="\"typeid\""]
  936 -> 38 [style=solid label="\"char\""]
  936 -> 39 [style=solid label="\"char8_t\""]
  936 -> 40 [style=solid label="\"char16_t\""]
  936 -> 41 [style=solid label="\"char32_t\""]
  936 -> 42 [style=solid label="\"wchar_t\""]
  936 -> 43 [style=solid label="\"bool\""]
  936 -> 44 [style=solid label="\"short\""]
  936 -> 45 [style=solid label="\"int\""]
  936 -> 46 [style=solid label="\"long\""]
  936 -> 47 [style=solid label="\"signed\""]
  936 -> 48 [style=solid label="\"unsigned\""]
  936 -> 49 [style=solid label="\"float\""]
  936 -> 50 [style=solid label="\"double\""]
  936 -> 51 [style=solid label="\"void\""]
  936 -> 209 [style=solid label="'R'"]
  936 -> 56 [style=solid label="\"typename\""]
  936 -> 402 [style=solid label="\"sizeof\""]
  936 -> 403 [style=solid label="\"alignof\""]
  936 -> 1395 [style=dashed label="additive-expression"]
  936 -> 406 [style=dashed label="await-expression"]
  936 -> 407 [style=dashed label="binary-literal"]
  936 -> 408 [style=dashed label="boolean-literal"]
  936 -> 409 [style=dashed label="cast-expression"]
  936 -> 410 [style=dashed label="character-literal"]
  936 -> 66 [style=dashed label="class-name"]
  936 -> 68 [style=dashed label="concept-name"]
  936 -> 69 [style=dashed label="conversion-function-id"]
  936 -> 414 [style=dashed label="decimal-floating-point-literal"]
  936 -> 415 [style=dashed label="decimal-literal"]
  936 -> 77 [style=dashed label="decltype-specifier"]
  936 -> 416 [style=dashed label="delete-expression"]
  936 -> 417 [style=dashed label="digit"]
  936 -> 418 [style=dashed label="digit-sequence"]
  936 -> 419 [style=dashed label="encoding-prefix"]
  936 -> 85 [style=dashed label="enum-name"]
  936 -> 422 [style=dashed label="floating-point-literal"]
  936 -> 423 [style=dashed label="fold-expression"]
  936 -> 424 [style=dashed label="fractional-constant"]
  936 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  936 -> 426 [style=dashed label="hexadecimal-literal"]
  936 -> 427 [style=dashed label="hexadecimal-prefix"]
  936 -> 428 [style=dashed label="id-expression"]
  936 -> 430 [style=dashed label="integer-literal"]
  936 -> 431 [style=dashed label="lambda-expression"]
  936 -> 432 [style=dashed label="lambda-introducer"]
  936 -> 433 [style=dashed label="literal"]
  936 -> 96 [style=dashed label="literal-operator-id"]
  936 -> 436 [style=dashed label="multiplicative-expression"]
  936 -> 100 [style=dashed label="namespace-alias"]
  936 -> 103 [style=dashed label="namespace-name"]
  936 -> 437 [style=dashed label="nested-name-specifier"]
  936 -> 438 [style=dashed label="new-expression"]
  936 -> 439 [style=dashed label="noexcept-expression"]
  936 -> 440 [style=dashed label="nonzero-digit"]
  936 -> 441 [style=dashed label="octal-literal"]
  936 -> 109 [style=dashed label="operator-function-id"]
  936 -> 110 [style=dashed label="placeholder-type-specifier"]
  936 -> 442 [style=dashed label="pm-expression"]
  936 -> 443 [style=dashed label="pointer-literal"]
  936 -> 444 [style=dashed label="postfix-expression"]
  936 -> 445 [style=dashed label="primary-expression"]
  936 -> 113 [style=dashed label="qualified-id"]
  936 -> 447 [style=dashed label="requires-expression"]
  936 -> 115 [style=dashed label="simple-template-id"]
  936 -> 534 [style=dashed label="simple-type-specifier"]
  936 -> 450 [style=dashed label="string-literal"]
  936 -> 121 [style=dashed label="template-id"]
  936 -> 216 [style=dashed label="template-name"]
  936 -> 124 [style=dashed label="type-constraint"]
  936 -> 125 [style=dashed label="type-name"]
  936 -> 127 [style=dashed label="typedef-name"]
  936 -> 536 [style=dashed label="typename-specifier"]
  936 -> 454 [style=dashed label="unary-expression"]
  936 -> 455 [style=dashed label="unary-operator"]
  936 -> 130 [style=dashed label="unqualified-id"]
  936 -> 456 [style=dashed label="user-defined-character-literal"]
  936 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  936 -> 458 [style=dashed label="user-defined-integer-literal"]
  936 -> 459 [style=dashed label="user-defined-literal"]
  936 -> 460 [style=dashed label="user-defined-string-literal"]
  937 [label="State 937\n\l968 shift-expression: shift-expression \">>\" • additive-expression\l"]
  937 -> 1 [style=solid label="IDENTIFIER"]
  937 -> 361 [style=solid label="'+'"]
  937 -> 362 [style=solid label="'-'"]
  937 -> 363 [style=solid label="'('"]
  937 -> 364 [style=solid label="'&'"]
  937 -> 365 [style=solid label="\"::\""]
  937 -> 366 [style=solid label="'['"]
  937 -> 367 [style=solid label="\"co_await\""]
  937 -> 368 [style=solid label="'0'"]
  937 -> 369 [style=solid label="'1'"]
  937 -> 370 [style=solid label="\"0b\""]
  937 -> 371 [style=solid label="\"0B\""]
  937 -> 372 [style=solid label="'\\''"]
  937 -> 373 [style=solid label="\"false\""]
  937 -> 374 [style=solid label="\"true\""]
  937 -> 375 [style=solid label="\"noexcept\""]
  937 -> 17 [style=solid label="\"operator\""]
  937 -> 26 [style=solid label="\"decltype\""]
  937 -> 376 [style=solid label="\"delete\""]
  937 -> 377 [style=solid label="'.'"]
  937 -> 378 [style=solid label="'2'"]
  937 -> 379 [style=solid label="'3'"]
  937 -> 380 [style=solid label="'4'"]
  937 -> 381 [style=solid label="'5'"]
  937 -> 382 [style=solid label="'6'"]
  937 -> 383 [style=solid label="'7'"]
  937 -> 384 [style=solid label="'8'"]
  937 -> 385 [style=solid label="'9'"]
  937 -> 185 [style=solid label="\"u8\""]
  937 -> 186 [style=solid label="'u'"]
  937 -> 187 [style=solid label="'U'"]
  937 -> 188 [style=solid label="'L'"]
  937 -> 386 [style=solid label="'*'"]
  937 -> 203 [style=solid label="'\"'"]
  937 -> 387 [style=solid label="\"0x\""]
  937 -> 388 [style=solid label="\"0X\""]
  937 -> 389 [style=solid label="\"requires\""]
  937 -> 390 [style=solid label="\"new\""]
  937 -> 391 [style=solid label="'~'"]
  937 -> 392 [style=solid label="'!'"]
  937 -> 393 [style=solid label="\"++\""]
  937 -> 394 [style=solid label="\"--\""]
  937 -> 395 [style=solid label="\"this\""]
  937 -> 37 [style=solid label="\"auto\""]
  937 -> 396 [style=solid label="\"nullptr\""]
  937 -> 397 [style=solid label="\"dynamic_cast\""]
  937 -> 398 [style=solid label="\"static_cast\""]
  937 -> 399 [style=solid label="\"reinterpret_cast\""]
  937 -> 400 [style=solid label="\"const_cast\""]
  937 -> 401 [style=solid label="\"typeid\""]
  937 -> 38 [style=solid label="\"char\""]
  937 -> 39 [style=solid label="\"char8_t\""]
  937 -> 40 [style=solid label="\"char16_t\""]
  937 -> 41 [style=solid label="\"char32_t\""]
  937 -> 42 [style=solid label="\"wchar_t\""]
  937 -> 43 [style=solid label="\"bool\""]
  937 -> 44 [style=solid label="\"short\""]
  937 -> 45 [style=solid label="\"int\""]
  937 -> 46 [style=solid label="\"long\""]
  937 -> 47 [style=solid label="\"signed\""]
  937 -> 48 [style=solid label="\"unsigned\""]
  937 -> 49 [style=solid label="\"float\""]
  937 -> 50 [style=solid label="\"double\""]
  937 -> 51 [style=solid label="\"void\""]
  937 -> 209 [style=solid label="'R'"]
  937 -> 56 [style=solid label="\"typename\""]
  937 -> 402 [style=solid label="\"sizeof\""]
  937 -> 403 [style=solid label="\"alignof\""]
  937 -> 1396 [style=dashed label="additive-expression"]
  937 -> 406 [style=dashed label="await-expression"]
  937 -> 407 [style=dashed label="binary-literal"]
  937 -> 408 [style=dashed label="boolean-literal"]
  937 -> 409 [style=dashed label="cast-expression"]
  937 -> 410 [style=dashed label="character-literal"]
  937 -> 66 [style=dashed label="class-name"]
  937 -> 68 [style=dashed label="concept-name"]
  937 -> 69 [style=dashed label="conversion-function-id"]
  937 -> 414 [style=dashed label="decimal-floating-point-literal"]
  937 -> 415 [style=dashed label="decimal-literal"]
  937 -> 77 [style=dashed label="decltype-specifier"]
  937 -> 416 [style=dashed label="delete-expression"]
  937 -> 417 [style=dashed label="digit"]
  937 -> 418 [style=dashed label="digit-sequence"]
  937 -> 419 [style=dashed label="encoding-prefix"]
  937 -> 85 [style=dashed label="enum-name"]
  937 -> 422 [style=dashed label="floating-point-literal"]
  937 -> 423 [style=dashed label="fold-expression"]
  937 -> 424 [style=dashed label="fractional-constant"]
  937 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  937 -> 426 [style=dashed label="hexadecimal-literal"]
  937 -> 427 [style=dashed label="hexadecimal-prefix"]
  937 -> 428 [style=dashed label="id-expression"]
  937 -> 430 [style=dashed label="integer-literal"]
  937 -> 431 [style=dashed label="lambda-expression"]
  937 -> 432 [style=dashed label="lambda-introducer"]
  937 -> 433 [style=dashed label="literal"]
  937 -> 96 [style=dashed label="literal-operator-id"]
  937 -> 436 [style=dashed label="multiplicative-expression"]
  937 -> 100 [style=dashed label="namespace-alias"]
  937 -> 103 [style=dashed label="namespace-name"]
  937 -> 437 [style=dashed label="nested-name-specifier"]
  937 -> 438 [style=dashed label="new-expression"]
  937 -> 439 [style=dashed label="noexcept-expression"]
  937 -> 440 [style=dashed label="nonzero-digit"]
  937 -> 441 [style=dashed label="octal-literal"]
  937 -> 109 [style=dashed label="operator-function-id"]
  937 -> 110 [style=dashed label="placeholder-type-specifier"]
  937 -> 442 [style=dashed label="pm-expression"]
  937 -> 443 [style=dashed label="pointer-literal"]
  937 -> 444 [style=dashed label="postfix-expression"]
  937 -> 445 [style=dashed label="primary-expression"]
  937 -> 113 [style=dashed label="qualified-id"]
  937 -> 447 [style=dashed label="requires-expression"]
  937 -> 115 [style=dashed label="simple-template-id"]
  937 -> 534 [style=dashed label="simple-type-specifier"]
  937 -> 450 [style=dashed label="string-literal"]
  937 -> 121 [style=dashed label="template-id"]
  937 -> 216 [style=dashed label="template-name"]
  937 -> 124 [style=dashed label="type-constraint"]
  937 -> 125 [style=dashed label="type-name"]
  937 -> 127 [style=dashed label="typedef-name"]
  937 -> 536 [style=dashed label="typename-specifier"]
  937 -> 454 [style=dashed label="unary-expression"]
  937 -> 455 [style=dashed label="unary-operator"]
  937 -> 130 [style=dashed label="unqualified-id"]
  937 -> 456 [style=dashed label="user-defined-character-literal"]
  937 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  937 -> 458 [style=dashed label="user-defined-integer-literal"]
  937 -> 459 [style=dashed label="user-defined-literal"]
  937 -> 460 [style=dashed label="user-defined-string-literal"]
  938 [label="State 938\n\l865 postfix-expression: simple-type-specifier '(' • ')'\l866                   | simple-type-specifier '(' • expression-list ')'\l"]
  938 -> 1 [style=solid label="IDENTIFIER"]
  938 -> 361 [style=solid label="'+'"]
  938 -> 362 [style=solid label="'-'"]
  938 -> 363 [style=solid label="'('"]
  938 -> 1397 [style=solid label="')'"]
  938 -> 364 [style=solid label="'&'"]
  938 -> 365 [style=solid label="\"::\""]
  938 -> 366 [style=solid label="'['"]
  938 -> 367 [style=solid label="\"co_await\""]
  938 -> 939 [style=solid label="'{'"]
  938 -> 368 [style=solid label="'0'"]
  938 -> 369 [style=solid label="'1'"]
  938 -> 370 [style=solid label="\"0b\""]
  938 -> 371 [style=solid label="\"0B\""]
  938 -> 372 [style=solid label="'\\''"]
  938 -> 373 [style=solid label="\"false\""]
  938 -> 374 [style=solid label="\"true\""]
  938 -> 375 [style=solid label="\"noexcept\""]
  938 -> 17 [style=solid label="\"operator\""]
  938 -> 26 [style=solid label="\"decltype\""]
  938 -> 376 [style=solid label="\"delete\""]
  938 -> 377 [style=solid label="'.'"]
  938 -> 378 [style=solid label="'2'"]
  938 -> 379 [style=solid label="'3'"]
  938 -> 380 [style=solid label="'4'"]
  938 -> 381 [style=solid label="'5'"]
  938 -> 382 [style=solid label="'6'"]
  938 -> 383 [style=solid label="'7'"]
  938 -> 384 [style=solid label="'8'"]
  938 -> 385 [style=solid label="'9'"]
  938 -> 185 [style=solid label="\"u8\""]
  938 -> 186 [style=solid label="'u'"]
  938 -> 187 [style=solid label="'U'"]
  938 -> 188 [style=solid label="'L'"]
  938 -> 386 [style=solid label="'*'"]
  938 -> 203 [style=solid label="'\"'"]
  938 -> 387 [style=solid label="\"0x\""]
  938 -> 388 [style=solid label="\"0X\""]
  938 -> 389 [style=solid label="\"requires\""]
  938 -> 390 [style=solid label="\"new\""]
  938 -> 391 [style=solid label="'~'"]
  938 -> 392 [style=solid label="'!'"]
  938 -> 393 [style=solid label="\"++\""]
  938 -> 394 [style=solid label="\"--\""]
  938 -> 395 [style=solid label="\"this\""]
  938 -> 37 [style=solid label="\"auto\""]
  938 -> 396 [style=solid label="\"nullptr\""]
  938 -> 397 [style=solid label="\"dynamic_cast\""]
  938 -> 398 [style=solid label="\"static_cast\""]
  938 -> 399 [style=solid label="\"reinterpret_cast\""]
  938 -> 400 [style=solid label="\"const_cast\""]
  938 -> 401 [style=solid label="\"typeid\""]
  938 -> 38 [style=solid label="\"char\""]
  938 -> 39 [style=solid label="\"char8_t\""]
  938 -> 40 [style=solid label="\"char16_t\""]
  938 -> 41 [style=solid label="\"char32_t\""]
  938 -> 42 [style=solid label="\"wchar_t\""]
  938 -> 43 [style=solid label="\"bool\""]
  938 -> 44 [style=solid label="\"short\""]
  938 -> 45 [style=solid label="\"int\""]
  938 -> 46 [style=solid label="\"long\""]
  938 -> 47 [style=solid label="\"signed\""]
  938 -> 48 [style=solid label="\"unsigned\""]
  938 -> 49 [style=solid label="\"float\""]
  938 -> 50 [style=solid label="\"double\""]
  938 -> 51 [style=solid label="\"void\""]
  938 -> 209 [style=solid label="'R'"]
  938 -> 528 [style=solid label="\"throw\""]
  938 -> 56 [style=solid label="\"typename\""]
  938 -> 402 [style=solid label="\"sizeof\""]
  938 -> 403 [style=solid label="\"alignof\""]
  938 -> 529 [style=solid label="\"co_yield\""]
  938 -> 404 [style=dashed label="additive-expression"]
  938 -> 405 [style=dashed label="and-expression"]
  938 -> 1141 [style=dashed label="assignment-expression"]
  938 -> 406 [style=dashed label="await-expression"]
  938 -> 407 [style=dashed label="binary-literal"]
  938 -> 408 [style=dashed label="boolean-literal"]
  938 -> 1142 [style=dashed label="braced-init-list"]
  938 -> 409 [style=dashed label="cast-expression"]
  938 -> 410 [style=dashed label="character-literal"]
  938 -> 66 [style=dashed label="class-name"]
  938 -> 411 [style=dashed label="compare-expression"]
  938 -> 68 [style=dashed label="concept-name"]
  938 -> 531 [style=dashed label="conditional-expression"]
  938 -> 69 [style=dashed label="conversion-function-id"]
  938 -> 414 [style=dashed label="decimal-floating-point-literal"]
  938 -> 415 [style=dashed label="decimal-literal"]
  938 -> 77 [style=dashed label="decltype-specifier"]
  938 -> 416 [style=dashed label="delete-expression"]
  938 -> 417 [style=dashed label="digit"]
  938 -> 418 [style=dashed label="digit-sequence"]
  938 -> 419 [style=dashed label="encoding-prefix"]
  938 -> 85 [style=dashed label="enum-name"]
  938 -> 420 [style=dashed label="equality-expression"]
  938 -> 421 [style=dashed label="exclusive-or-expression"]
  938 -> 1398 [style=dashed label="expression-list"]
  938 -> 422 [style=dashed label="floating-point-literal"]
  938 -> 423 [style=dashed label="fold-expression"]
  938 -> 424 [style=dashed label="fractional-constant"]
  938 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  938 -> 426 [style=dashed label="hexadecimal-literal"]
  938 -> 427 [style=dashed label="hexadecimal-prefix"]
  938 -> 428 [style=dashed label="id-expression"]
  938 -> 429 [style=dashed label="inclusive-or-expression"]
  938 -> 1145 [style=dashed label="initializer-clause"]
  938 -> 1146 [style=dashed label="initializer-list"]
  938 -> 430 [style=dashed label="integer-literal"]
  938 -> 431 [style=dashed label="lambda-expression"]
  938 -> 432 [style=dashed label="lambda-introducer"]
  938 -> 433 [style=dashed label="literal"]
  938 -> 96 [style=dashed label="literal-operator-id"]
  938 -> 434 [style=dashed label="logical-and-expression"]
  938 -> 533 [style=dashed label="logical-or-expression"]
  938 -> 436 [style=dashed label="multiplicative-expression"]
  938 -> 100 [style=dashed label="namespace-alias"]
  938 -> 103 [style=dashed label="namespace-name"]
  938 -> 437 [style=dashed label="nested-name-specifier"]
  938 -> 438 [style=dashed label="new-expression"]
  938 -> 439 [style=dashed label="noexcept-expression"]
  938 -> 440 [style=dashed label="nonzero-digit"]
  938 -> 441 [style=dashed label="octal-literal"]
  938 -> 109 [style=dashed label="operator-function-id"]
  938 -> 110 [style=dashed label="placeholder-type-specifier"]
  938 -> 442 [style=dashed label="pm-expression"]
  938 -> 443 [style=dashed label="pointer-literal"]
  938 -> 444 [style=dashed label="postfix-expression"]
  938 -> 445 [style=dashed label="primary-expression"]
  938 -> 113 [style=dashed label="qualified-id"]
  938 -> 446 [style=dashed label="relational-expression"]
  938 -> 447 [style=dashed label="requires-expression"]
  938 -> 448 [style=dashed label="shift-expression"]
  938 -> 115 [style=dashed label="simple-template-id"]
  938 -> 534 [style=dashed label="simple-type-specifier"]
  938 -> 450 [style=dashed label="string-literal"]
  938 -> 121 [style=dashed label="template-id"]
  938 -> 216 [style=dashed label="template-name"]
  938 -> 535 [style=dashed label="throw-expression"]
  938 -> 124 [style=dashed label="type-constraint"]
  938 -> 125 [style=dashed label="type-name"]
  938 -> 127 [style=dashed label="typedef-name"]
  938 -> 536 [style=dashed label="typename-specifier"]
  938 -> 454 [style=dashed label="unary-expression"]
  938 -> 455 [style=dashed label="unary-operator"]
  938 -> 130 [style=dashed label="unqualified-id"]
  938 -> 456 [style=dashed label="user-defined-character-literal"]
  938 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  938 -> 458 [style=dashed label="user-defined-integer-literal"]
  938 -> 459 [style=dashed label="user-defined-literal"]
  938 -> 460 [style=dashed label="user-defined-string-literal"]
  938 -> 537 [style=dashed label="yield-expression"]
  939 [label="State 939\n\l108 braced-init-list: '{' • initializer-list '}'\l109                 | '{' • initializer-list ',' '}'\l110                 | '{' • designated-initializer-list '}'\l111                 | '{' • designated-initializer-list ',' '}'\l112                 | '{' • '}'\l"]
  939 -> 1 [style=solid label="IDENTIFIER"]
  939 -> 361 [style=solid label="'+'"]
  939 -> 362 [style=solid label="'-'"]
  939 -> 363 [style=solid label="'('"]
  939 -> 364 [style=solid label="'&'"]
  939 -> 365 [style=solid label="\"::\""]
  939 -> 366 [style=solid label="'['"]
  939 -> 367 [style=solid label="\"co_await\""]
  939 -> 939 [style=solid label="'{'"]
  939 -> 1399 [style=solid label="'}'"]
  939 -> 368 [style=solid label="'0'"]
  939 -> 369 [style=solid label="'1'"]
  939 -> 370 [style=solid label="\"0b\""]
  939 -> 371 [style=solid label="\"0B\""]
  939 -> 372 [style=solid label="'\\''"]
  939 -> 373 [style=solid label="\"false\""]
  939 -> 374 [style=solid label="\"true\""]
  939 -> 375 [style=solid label="\"noexcept\""]
  939 -> 17 [style=solid label="\"operator\""]
  939 -> 26 [style=solid label="\"decltype\""]
  939 -> 376 [style=solid label="\"delete\""]
  939 -> 1148 [style=solid label="'.'"]
  939 -> 378 [style=solid label="'2'"]
  939 -> 379 [style=solid label="'3'"]
  939 -> 380 [style=solid label="'4'"]
  939 -> 381 [style=solid label="'5'"]
  939 -> 382 [style=solid label="'6'"]
  939 -> 383 [style=solid label="'7'"]
  939 -> 384 [style=solid label="'8'"]
  939 -> 385 [style=solid label="'9'"]
  939 -> 185 [style=solid label="\"u8\""]
  939 -> 186 [style=solid label="'u'"]
  939 -> 187 [style=solid label="'U'"]
  939 -> 188 [style=solid label="'L'"]
  939 -> 386 [style=solid label="'*'"]
  939 -> 203 [style=solid label="'\"'"]
  939 -> 387 [style=solid label="\"0x\""]
  939 -> 388 [style=solid label="\"0X\""]
  939 -> 389 [style=solid label="\"requires\""]
  939 -> 390 [style=solid label="\"new\""]
  939 -> 391 [style=solid label="'~'"]
  939 -> 392 [style=solid label="'!'"]
  939 -> 393 [style=solid label="\"++\""]
  939 -> 394 [style=solid label="\"--\""]
  939 -> 395 [style=solid label="\"this\""]
  939 -> 37 [style=solid label="\"auto\""]
  939 -> 396 [style=solid label="\"nullptr\""]
  939 -> 397 [style=solid label="\"dynamic_cast\""]
  939 -> 398 [style=solid label="\"static_cast\""]
  939 -> 399 [style=solid label="\"reinterpret_cast\""]
  939 -> 400 [style=solid label="\"const_cast\""]
  939 -> 401 [style=solid label="\"typeid\""]
  939 -> 38 [style=solid label="\"char\""]
  939 -> 39 [style=solid label="\"char8_t\""]
  939 -> 40 [style=solid label="\"char16_t\""]
  939 -> 41 [style=solid label="\"char32_t\""]
  939 -> 42 [style=solid label="\"wchar_t\""]
  939 -> 43 [style=solid label="\"bool\""]
  939 -> 44 [style=solid label="\"short\""]
  939 -> 45 [style=solid label="\"int\""]
  939 -> 46 [style=solid label="\"long\""]
  939 -> 47 [style=solid label="\"signed\""]
  939 -> 48 [style=solid label="\"unsigned\""]
  939 -> 49 [style=solid label="\"float\""]
  939 -> 50 [style=solid label="\"double\""]
  939 -> 51 [style=solid label="\"void\""]
  939 -> 209 [style=solid label="'R'"]
  939 -> 528 [style=solid label="\"throw\""]
  939 -> 56 [style=solid label="\"typename\""]
  939 -> 402 [style=solid label="\"sizeof\""]
  939 -> 403 [style=solid label="\"alignof\""]
  939 -> 529 [style=solid label="\"co_yield\""]
  939 -> 404 [style=dashed label="additive-expression"]
  939 -> 405 [style=dashed label="and-expression"]
  939 -> 1141 [style=dashed label="assignment-expression"]
  939 -> 406 [style=dashed label="await-expression"]
  939 -> 407 [style=dashed label="binary-literal"]
  939 -> 408 [style=dashed label="boolean-literal"]
  939 -> 1142 [style=dashed label="braced-init-list"]
  939 -> 409 [style=dashed label="cast-expression"]
  939 -> 410 [style=dashed label="character-literal"]
  939 -> 66 [style=dashed label="class-name"]
  939 -> 411 [style=dashed label="compare-expression"]
  939 -> 68 [style=dashed label="concept-name"]
  939 -> 531 [style=dashed label="conditional-expression"]
  939 -> 69 [style=dashed label="conversion-function-id"]
  939 -> 414 [style=dashed label="decimal-floating-point-literal"]
  939 -> 415 [style=dashed label="decimal-literal"]
  939 -> 77 [style=dashed label="decltype-specifier"]
  939 -> 416 [style=dashed label="delete-expression"]
  939 -> 1150 [style=dashed label="designated-initializer-clause"]
  939 -> 1151 [style=dashed label="designated-initializer-list"]
  939 -> 1152 [style=dashed label="designator"]
  939 -> 417 [style=dashed label="digit"]
  939 -> 418 [style=dashed label="digit-sequence"]
  939 -> 419 [style=dashed label="encoding-prefix"]
  939 -> 85 [style=dashed label="enum-name"]
  939 -> 420 [style=dashed label="equality-expression"]
  939 -> 421 [style=dashed label="exclusive-or-expression"]
  939 -> 422 [style=dashed label="floating-point-literal"]
  939 -> 423 [style=dashed label="fold-expression"]
  939 -> 424 [style=dashed label="fractional-constant"]
  939 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  939 -> 426 [style=dashed label="hexadecimal-literal"]
  939 -> 427 [style=dashed label="hexadecimal-prefix"]
  939 -> 428 [style=dashed label="id-expression"]
  939 -> 429 [style=dashed label="inclusive-or-expression"]
  939 -> 1145 [style=dashed label="initializer-clause"]
  939 -> 1153 [style=dashed label="initializer-list"]
  939 -> 430 [style=dashed label="integer-literal"]
  939 -> 431 [style=dashed label="lambda-expression"]
  939 -> 432 [style=dashed label="lambda-introducer"]
  939 -> 433 [style=dashed label="literal"]
  939 -> 96 [style=dashed label="literal-operator-id"]
  939 -> 434 [style=dashed label="logical-and-expression"]
  939 -> 533 [style=dashed label="logical-or-expression"]
  939 -> 436 [style=dashed label="multiplicative-expression"]
  939 -> 100 [style=dashed label="namespace-alias"]
  939 -> 103 [style=dashed label="namespace-name"]
  939 -> 437 [style=dashed label="nested-name-specifier"]
  939 -> 438 [style=dashed label="new-expression"]
  939 -> 439 [style=dashed label="noexcept-expression"]
  939 -> 440 [style=dashed label="nonzero-digit"]
  939 -> 441 [style=dashed label="octal-literal"]
  939 -> 109 [style=dashed label="operator-function-id"]
  939 -> 110 [style=dashed label="placeholder-type-specifier"]
  939 -> 442 [style=dashed label="pm-expression"]
  939 -> 443 [style=dashed label="pointer-literal"]
  939 -> 444 [style=dashed label="postfix-expression"]
  939 -> 445 [style=dashed label="primary-expression"]
  939 -> 113 [style=dashed label="qualified-id"]
  939 -> 446 [style=dashed label="relational-expression"]
  939 -> 447 [style=dashed label="requires-expression"]
  939 -> 448 [style=dashed label="shift-expression"]
  939 -> 115 [style=dashed label="simple-template-id"]
  939 -> 534 [style=dashed label="simple-type-specifier"]
  939 -> 450 [style=dashed label="string-literal"]
  939 -> 121 [style=dashed label="template-id"]
  939 -> 216 [style=dashed label="template-name"]
  939 -> 535 [style=dashed label="throw-expression"]
  939 -> 124 [style=dashed label="type-constraint"]
  939 -> 125 [style=dashed label="type-name"]
  939 -> 127 [style=dashed label="typedef-name"]
  939 -> 536 [style=dashed label="typename-specifier"]
  939 -> 454 [style=dashed label="unary-expression"]
  939 -> 455 [style=dashed label="unary-operator"]
  939 -> 130 [style=dashed label="unqualified-id"]
  939 -> 456 [style=dashed label="user-defined-character-literal"]
  939 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  939 -> 458 [style=dashed label="user-defined-integer-literal"]
  939 -> 459 [style=dashed label="user-defined-literal"]
  939 -> 460 [style=dashed label="user-defined-string-literal"]
  939 -> 537 [style=dashed label="yield-expression"]
  940 [label="State 940\n\l869 postfix-expression: simple-type-specifier braced-init-list •\l"]
  940 -> "940R869" [style=solid]
 "940R869" [label="R869", fillcolor=3, shape=diamond, style=filled]
  941 [label="State 941\n\l 15 alignment-specifier: \"alignas\" '(' type-id ')' •\l"]
  941 -> "941R15" [style=solid]
 "941R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  942 [label="State 942\n\l 16 alignment-specifier: \"alignas\" '(' type-id \"...\" • ')'\l"]
  942 -> 1400 [style=solid label="')'"]
  943 [label="State 943\n\l718 noptr-abstract-declarator: '(' • ptr-abstract-declarator ')'\l836 parameters-and-qualifiers: '(' • parameter-declaration-clause ')'\l837                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq\l838                          | '(' • parameter-declaration-clause ')' ref-qualifier\l839                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier\l840                          | '(' • parameter-declaration-clause ')' noexcept-specifier\l841                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier\l842                          | '(' • parameter-declaration-clause ')' ref-qualifier noexcept-specifier\l843                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier\l844                          | '(' • parameter-declaration-clause ')' attribute-specifier-seq\l845                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq attribute-specifier-seq\l846                          | '(' • parameter-declaration-clause ')' ref-qualifier attribute-specifier-seq\l847                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier attribute-specifier-seq\l848                          | '(' • parameter-declaration-clause ')' noexcept-specifier attribute-specifier-seq\l849                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier attribute-specifier-seq\l850                          | '(' • parameter-declaration-clause ')' ref-qualifier noexcept-specifier attribute-specifier-seq\l851                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq\l"]
  943 -> 161 [style=solid label="IDENTIFIER"]
  943 -> 4 [style=solid label="\"alignas\""]
  943 -> 943 [style=solid label="'('"]
  943 -> 734 [style=solid label="\"...\""]
  943 -> 7 [style=solid label="'&'"]
  943 -> 9 [style=solid label="\"::\""]
  943 -> 1401 [style=solid label="'['"]
  943 -> 11 [style=solid label="\"virtual\""]
  943 -> 12 [style=solid label="\"class\""]
  943 -> 13 [style=solid label="\"struct\""]
  943 -> 14 [style=solid label="\"union\""]
  943 -> 16 [style=solid label="\"&&\""]
  943 -> 18 [style=solid label="\"const\""]
  943 -> 19 [style=solid label="\"volatile\""]
  943 -> 20 [style=solid label="\"friend\""]
  943 -> 21 [style=solid label="\"typedef\""]
  943 -> 22 [style=solid label="\"constexpr\""]
  943 -> 23 [style=solid label="\"consteval\""]
  943 -> 24 [style=solid label="\"constinit\""]
  943 -> 263 [style=solid label="\"inline\""]
  943 -> 26 [style=solid label="\"decltype\""]
  943 -> 27 [style=solid label="\"enum\""]
  943 -> 264 [style=solid label="\"extern\""]
  943 -> 29 [style=solid label="\"explicit\""]
  943 -> 32 [style=solid label="'*'"]
  943 -> 476 [style=solid label="\"this\""]
  943 -> 37 [style=solid label="\"auto\""]
  943 -> 38 [style=solid label="\"char\""]
  943 -> 39 [style=solid label="\"char8_t\""]
  943 -> 40 [style=solid label="\"char16_t\""]
  943 -> 41 [style=solid label="\"char32_t\""]
  943 -> 42 [style=solid label="\"wchar_t\""]
  943 -> 43 [style=solid label="\"bool\""]
  943 -> 44 [style=solid label="\"short\""]
  943 -> 45 [style=solid label="\"int\""]
  943 -> 46 [style=solid label="\"long\""]
  943 -> 47 [style=solid label="\"signed\""]
  943 -> 48 [style=solid label="\"unsigned\""]
  943 -> 49 [style=solid label="\"float\""]
  943 -> 50 [style=solid label="\"double\""]
  943 -> 51 [style=solid label="\"void\""]
  943 -> 53 [style=solid label="\"static\""]
  943 -> 54 [style=solid label="\"thread_local\""]
  943 -> 55 [style=solid label="\"mutable\""]
  943 -> 56 [style=solid label="\"typename\""]
  943 -> 58 [style=dashed label="alignment-specifier"]
  943 -> 61 [style=dashed label="attribute-specifier"]
  943 -> 478 [style=dashed label="attribute-specifier-seq"]
  943 -> 64 [style=dashed label="class-head"]
  943 -> 65 [style=dashed label="class-key"]
  943 -> 66 [style=dashed label="class-name"]
  943 -> 67 [style=dashed label="class-specifier"]
  943 -> 68 [style=dashed label="concept-name"]
  943 -> 70 [style=dashed label="cv-qualifier"]
  943 -> 71 [style=dashed label="decl-specifier"]
  943 -> 479 [style=dashed label="decl-specifier-seq"]
  943 -> 77 [style=dashed label="decltype-specifier"]
  943 -> 79 [style=dashed label="defining-type-specifier"]
  943 -> 80 [style=dashed label="elaborated-enum-specifier"]
  943 -> 81 [style=dashed label="elaborated-type-specifier"]
  943 -> 83 [style=dashed label="enum-head"]
  943 -> 268 [style=dashed label="enum-key"]
  943 -> 85 [style=dashed label="enum-name"]
  943 -> 86 [style=dashed label="enum-specifier"]
  943 -> 269 [style=dashed label="explicit-specifier"]
  943 -> 92 [style=dashed label="function-specifier"]
  943 -> 100 [style=dashed label="namespace-alias"]
  943 -> 103 [style=dashed label="namespace-name"]
  943 -> 1402 [style=dashed label="nested-name-specifier"]
  943 -> 1403 [style=dashed label="noptr-abstract-declarator"]
  943 -> 735 [style=dashed label="parameter-declaration"]
  943 -> 736 [style=dashed label="parameter-declaration-clause"]
  943 -> 737 [style=dashed label="parameter-declaration-list"]
  943 -> 1404 [style=dashed label="parameters-and-qualifiers"]
  943 -> 110 [style=dashed label="placeholder-type-specifier"]
  943 -> 1405 [style=dashed label="ptr-abstract-declarator"]
  943 -> 1406 [style=dashed label="ptr-operator"]
  943 -> 142 [style=dashed label="simple-template-id"]
  943 -> 116 [style=dashed label="simple-type-specifier"]
  943 -> 118 [style=dashed label="storage-class-specifier"]
  943 -> 216 [style=dashed label="template-name"]
  943 -> 124 [style=dashed label="type-constraint"]
  943 -> 125 [style=dashed label="type-name"]
  943 -> 126 [style=dashed label="type-specifier"]
  943 -> 127 [style=dashed label="typedef-name"]
  943 -> 128 [style=dashed label="typename-specifier"]
  944 [label="State 944\n\l724 noptr-abstract-pack-declarator: \"...\" •\l"]
  944 -> "944R724" [style=solid]
 "944R724" [label="R724", fillcolor=3, shape=diamond, style=filled]
  945 [label="State 945\n\l711 noptr-abstract-declarator: '[' • ']'\l713                          | '[' • constant-expression ']'\l715                          | '[' • ']' attribute-specifier-seq\l717                          | '[' • constant-expression ']' attribute-specifier-seq\l"]
  945 -> 1 [style=solid label="IDENTIFIER"]
  945 -> 361 [style=solid label="'+'"]
  945 -> 362 [style=solid label="'-'"]
  945 -> 363 [style=solid label="'('"]
  945 -> 364 [style=solid label="'&'"]
  945 -> 365 [style=solid label="\"::\""]
  945 -> 366 [style=solid label="'['"]
  945 -> 1407 [style=solid label="']'"]
  945 -> 367 [style=solid label="\"co_await\""]
  945 -> 368 [style=solid label="'0'"]
  945 -> 369 [style=solid label="'1'"]
  945 -> 370 [style=solid label="\"0b\""]
  945 -> 371 [style=solid label="\"0B\""]
  945 -> 372 [style=solid label="'\\''"]
  945 -> 373 [style=solid label="\"false\""]
  945 -> 374 [style=solid label="\"true\""]
  945 -> 375 [style=solid label="\"noexcept\""]
  945 -> 17 [style=solid label="\"operator\""]
  945 -> 26 [style=solid label="\"decltype\""]
  945 -> 376 [style=solid label="\"delete\""]
  945 -> 377 [style=solid label="'.'"]
  945 -> 378 [style=solid label="'2'"]
  945 -> 379 [style=solid label="'3'"]
  945 -> 380 [style=solid label="'4'"]
  945 -> 381 [style=solid label="'5'"]
  945 -> 382 [style=solid label="'6'"]
  945 -> 383 [style=solid label="'7'"]
  945 -> 384 [style=solid label="'8'"]
  945 -> 385 [style=solid label="'9'"]
  945 -> 185 [style=solid label="\"u8\""]
  945 -> 186 [style=solid label="'u'"]
  945 -> 187 [style=solid label="'U'"]
  945 -> 188 [style=solid label="'L'"]
  945 -> 386 [style=solid label="'*'"]
  945 -> 203 [style=solid label="'\"'"]
  945 -> 387 [style=solid label="\"0x\""]
  945 -> 388 [style=solid label="\"0X\""]
  945 -> 389 [style=solid label="\"requires\""]
  945 -> 390 [style=solid label="\"new\""]
  945 -> 391 [style=solid label="'~'"]
  945 -> 392 [style=solid label="'!'"]
  945 -> 393 [style=solid label="\"++\""]
  945 -> 394 [style=solid label="\"--\""]
  945 -> 395 [style=solid label="\"this\""]
  945 -> 37 [style=solid label="\"auto\""]
  945 -> 396 [style=solid label="\"nullptr\""]
  945 -> 397 [style=solid label="\"dynamic_cast\""]
  945 -> 398 [style=solid label="\"static_cast\""]
  945 -> 399 [style=solid label="\"reinterpret_cast\""]
  945 -> 400 [style=solid label="\"const_cast\""]
  945 -> 401 [style=solid label="\"typeid\""]
  945 -> 38 [style=solid label="\"char\""]
  945 -> 39 [style=solid label="\"char8_t\""]
  945 -> 40 [style=solid label="\"char16_t\""]
  945 -> 41 [style=solid label="\"char32_t\""]
  945 -> 42 [style=solid label="\"wchar_t\""]
  945 -> 43 [style=solid label="\"bool\""]
  945 -> 44 [style=solid label="\"short\""]
  945 -> 45 [style=solid label="\"int\""]
  945 -> 46 [style=solid label="\"long\""]
  945 -> 47 [style=solid label="\"signed\""]
  945 -> 48 [style=solid label="\"unsigned\""]
  945 -> 49 [style=solid label="\"float\""]
  945 -> 50 [style=solid label="\"double\""]
  945 -> 51 [style=solid label="\"void\""]
  945 -> 209 [style=solid label="'R'"]
  945 -> 56 [style=solid label="\"typename\""]
  945 -> 402 [style=solid label="\"sizeof\""]
  945 -> 403 [style=solid label="\"alignof\""]
  945 -> 404 [style=dashed label="additive-expression"]
  945 -> 405 [style=dashed label="and-expression"]
  945 -> 406 [style=dashed label="await-expression"]
  945 -> 407 [style=dashed label="binary-literal"]
  945 -> 408 [style=dashed label="boolean-literal"]
  945 -> 409 [style=dashed label="cast-expression"]
  945 -> 410 [style=dashed label="character-literal"]
  945 -> 66 [style=dashed label="class-name"]
  945 -> 411 [style=dashed label="compare-expression"]
  945 -> 68 [style=dashed label="concept-name"]
  945 -> 412 [style=dashed label="conditional-expression"]
  945 -> 1408 [style=dashed label="constant-expression"]
  945 -> 69 [style=dashed label="conversion-function-id"]
  945 -> 414 [style=dashed label="decimal-floating-point-literal"]
  945 -> 415 [style=dashed label="decimal-literal"]
  945 -> 77 [style=dashed label="decltype-specifier"]
  945 -> 416 [style=dashed label="delete-expression"]
  945 -> 417 [style=dashed label="digit"]
  945 -> 418 [style=dashed label="digit-sequence"]
  945 -> 419 [style=dashed label="encoding-prefix"]
  945 -> 85 [style=dashed label="enum-name"]
  945 -> 420 [style=dashed label="equality-expression"]
  945 -> 421 [style=dashed label="exclusive-or-expression"]
  945 -> 422 [style=dashed label="floating-point-literal"]
  945 -> 423 [style=dashed label="fold-expression"]
  945 -> 424 [style=dashed label="fractional-constant"]
  945 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  945 -> 426 [style=dashed label="hexadecimal-literal"]
  945 -> 427 [style=dashed label="hexadecimal-prefix"]
  945 -> 428 [style=dashed label="id-expression"]
  945 -> 429 [style=dashed label="inclusive-or-expression"]
  945 -> 430 [style=dashed label="integer-literal"]
  945 -> 431 [style=dashed label="lambda-expression"]
  945 -> 432 [style=dashed label="lambda-introducer"]
  945 -> 433 [style=dashed label="literal"]
  945 -> 96 [style=dashed label="literal-operator-id"]
  945 -> 434 [style=dashed label="logical-and-expression"]
  945 -> 435 [style=dashed label="logical-or-expression"]
  945 -> 436 [style=dashed label="multiplicative-expression"]
  945 -> 100 [style=dashed label="namespace-alias"]
  945 -> 103 [style=dashed label="namespace-name"]
  945 -> 437 [style=dashed label="nested-name-specifier"]
  945 -> 438 [style=dashed label="new-expression"]
  945 -> 439 [style=dashed label="noexcept-expression"]
  945 -> 440 [style=dashed label="nonzero-digit"]
  945 -> 441 [style=dashed label="octal-literal"]
  945 -> 109 [style=dashed label="operator-function-id"]
  945 -> 110 [style=dashed label="placeholder-type-specifier"]
  945 -> 442 [style=dashed label="pm-expression"]
  945 -> 443 [style=dashed label="pointer-literal"]
  945 -> 444 [style=dashed label="postfix-expression"]
  945 -> 445 [style=dashed label="primary-expression"]
  945 -> 113 [style=dashed label="qualified-id"]
  945 -> 446 [style=dashed label="relational-expression"]
  945 -> 447 [style=dashed label="requires-expression"]
  945 -> 448 [style=dashed label="shift-expression"]
  945 -> 115 [style=dashed label="simple-template-id"]
  945 -> 534 [style=dashed label="simple-type-specifier"]
  945 -> 450 [style=dashed label="string-literal"]
  945 -> 121 [style=dashed label="template-id"]
  945 -> 216 [style=dashed label="template-name"]
  945 -> 124 [style=dashed label="type-constraint"]
  945 -> 125 [style=dashed label="type-name"]
  945 -> 127 [style=dashed label="typedef-name"]
  945 -> 536 [style=dashed label="typename-specifier"]
  945 -> 454 [style=dashed label="unary-expression"]
  945 -> 455 [style=dashed label="unary-operator"]
  945 -> 130 [style=dashed label="unqualified-id"]
  945 -> 456 [style=dashed label="user-defined-character-literal"]
  945 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  945 -> 458 [style=dashed label="user-defined-integer-literal"]
  945 -> 459 [style=dashed label="user-defined-literal"]
  945 -> 460 [style=dashed label="user-defined-string-literal"]
  946 [label="State 946\n\l1091 type-id: type-specifier-seq abstract-declarator •\l"]
  946 -> "946R1091" [style=solid]
 "946R1091" [label="R1091", fillcolor=3, shape=diamond, style=filled]
  947 [label="State 947\n\l  4 abstract-declarator: abstract-pack-declarator •\l"]
  947 -> "947R4" [style=solid]
 "947R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  948 [label="State 948\n\l  2 abstract-declarator: noptr-abstract-declarator • parameters-and-qualifiers trailing-return-type\l708 noptr-abstract-declarator: noptr-abstract-declarator • parameters-and-qualifiers\l710                          | noptr-abstract-declarator • '[' ']'\l712                          | noptr-abstract-declarator • '[' constant-expression ']'\l714                          | noptr-abstract-declarator • '[' ']' attribute-specifier-seq\l716                          | noptr-abstract-declarator • '[' constant-expression ']' attribute-specifier-seq\l892 ptr-abstract-declarator: noptr-abstract-declarator •\l"]
  948 -> 333 [style=solid label="'('"]
  948 -> 1409 [style=solid label="'['"]
  948 -> 1410 [style=dashed label="parameters-and-qualifiers"]
  948 -> "948R892d" [label="['(']", style=solid]
 "948R892d" [label="R892", fillcolor=5, shape=diamond, style=filled]
  948 -> "948R892" [style=solid]
 "948R892" [label="R892", fillcolor=3, shape=diamond, style=filled]
  949 [label="State 949\n\l  5 abstract-pack-declarator: noptr-abstract-pack-declarator •\l719 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator • parameters-and-qualifiers\l720                               | noptr-abstract-pack-declarator • '[' ']'\l721                               | noptr-abstract-pack-declarator • '[' constant-expression ']'\l722                               | noptr-abstract-pack-declarator • '[' ']' attribute-specifier-seq\l723                               | noptr-abstract-pack-declarator • '[' constant-expression ']' attribute-specifier-seq\l"]
  949 -> 333 [style=solid label="'('"]
  949 -> 1411 [style=solid label="'['"]
  949 -> 1412 [style=dashed label="parameters-and-qualifiers"]
  949 -> "949R5d" [label="['(']", style=solid]
 "949R5d" [label="R5", fillcolor=5, shape=diamond, style=filled]
  949 -> "949R5" [style=solid]
 "949R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  950 [label="State 950\n\l  3 abstract-declarator: parameters-and-qualifiers • trailing-return-type\l709 noptr-abstract-declarator: parameters-and-qualifiers •\l"]
  950 -> 740 [style=solid label="\"->\""]
  950 -> 1413 [style=dashed label="trailing-return-type"]
  950 -> "950R709" [style=solid]
 "950R709" [label="R709", fillcolor=3, shape=diamond, style=filled]
  951 [label="State 951\n\l  1 abstract-declarator: ptr-abstract-declarator •\l"]
  951 -> "951R1" [style=solid]
 "951R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  952 [label="State 952\n\l  6 abstract-pack-declarator: ptr-operator • abstract-pack-declarator\l893 ptr-abstract-declarator: ptr-operator •\l894                        | ptr-operator • ptr-abstract-declarator\l"]
  952 -> 258 [style=solid label="IDENTIFIER"]
  952 -> 943 [style=solid label="'('"]
  952 -> 944 [style=solid label="\"...\""]
  952 -> 7 [style=solid label="'&'"]
  952 -> 9 [style=solid label="\"::\""]
  952 -> 945 [style=solid label="'['"]
  952 -> 16 [style=solid label="\"&&\""]
  952 -> 135 [style=solid label="\"decltype\""]
  952 -> 32 [style=solid label="'*'"]
  952 -> 1414 [style=dashed label="abstract-pack-declarator"]
  952 -> 66 [style=dashed label="class-name"]
  952 -> 139 [style=dashed label="decltype-specifier"]
  952 -> 85 [style=dashed label="enum-name"]
  952 -> 100 [style=dashed label="namespace-alias"]
  952 -> 103 [style=dashed label="namespace-name"]
  952 -> 522 [style=dashed label="nested-name-specifier"]
  952 -> 1403 [style=dashed label="noptr-abstract-declarator"]
  952 -> 949 [style=dashed label="noptr-abstract-pack-declarator"]
  952 -> 1404 [style=dashed label="parameters-and-qualifiers"]
  952 -> 1415 [style=dashed label="ptr-abstract-declarator"]
  952 -> 952 [style=dashed label="ptr-operator"]
  952 -> 142 [style=dashed label="simple-template-id"]
  952 -> 143 [style=dashed label="template-name"]
  952 -> 144 [style=dashed label="type-name"]
  952 -> 127 [style=dashed label="typedef-name"]
  952 -> "952R893d" [label="['(', \"...\"]", style=solid]
 "952R893d" [label="R893", fillcolor=5, shape=diamond, style=filled]
  952 -> "952R893" [style=solid]
 "952R893" [label="R893", fillcolor=3, shape=diamond, style=filled]
  953 [label="State 953\n\l867 postfix-expression: typename-specifier '(' • ')'\l868                   | typename-specifier '(' • expression-list ')'\l"]
  953 -> 1 [style=solid label="IDENTIFIER"]
  953 -> 361 [style=solid label="'+'"]
  953 -> 362 [style=solid label="'-'"]
  953 -> 363 [style=solid label="'('"]
  953 -> 1416 [style=solid label="')'"]
  953 -> 364 [style=solid label="'&'"]
  953 -> 365 [style=solid label="\"::\""]
  953 -> 366 [style=solid label="'['"]
  953 -> 367 [style=solid label="\"co_await\""]
  953 -> 939 [style=solid label="'{'"]
  953 -> 368 [style=solid label="'0'"]
  953 -> 369 [style=solid label="'1'"]
  953 -> 370 [style=solid label="\"0b\""]
  953 -> 371 [style=solid label="\"0B\""]
  953 -> 372 [style=solid label="'\\''"]
  953 -> 373 [style=solid label="\"false\""]
  953 -> 374 [style=solid label="\"true\""]
  953 -> 375 [style=solid label="\"noexcept\""]
  953 -> 17 [style=solid label="\"operator\""]
  953 -> 26 [style=solid label="\"decltype\""]
  953 -> 376 [style=solid label="\"delete\""]
  953 -> 377 [style=solid label="'.'"]
  953 -> 378 [style=solid label="'2'"]
  953 -> 379 [style=solid label="'3'"]
  953 -> 380 [style=solid label="'4'"]
  953 -> 381 [style=solid label="'5'"]
  953 -> 382 [style=solid label="'6'"]
  953 -> 383 [style=solid label="'7'"]
  953 -> 384 [style=solid label="'8'"]
  953 -> 385 [style=solid label="'9'"]
  953 -> 185 [style=solid label="\"u8\""]
  953 -> 186 [style=solid label="'u'"]
  953 -> 187 [style=solid label="'U'"]
  953 -> 188 [style=solid label="'L'"]
  953 -> 386 [style=solid label="'*'"]
  953 -> 203 [style=solid label="'\"'"]
  953 -> 387 [style=solid label="\"0x\""]
  953 -> 388 [style=solid label="\"0X\""]
  953 -> 389 [style=solid label="\"requires\""]
  953 -> 390 [style=solid label="\"new\""]
  953 -> 391 [style=solid label="'~'"]
  953 -> 392 [style=solid label="'!'"]
  953 -> 393 [style=solid label="\"++\""]
  953 -> 394 [style=solid label="\"--\""]
  953 -> 395 [style=solid label="\"this\""]
  953 -> 37 [style=solid label="\"auto\""]
  953 -> 396 [style=solid label="\"nullptr\""]
  953 -> 397 [style=solid label="\"dynamic_cast\""]
  953 -> 398 [style=solid label="\"static_cast\""]
  953 -> 399 [style=solid label="\"reinterpret_cast\""]
  953 -> 400 [style=solid label="\"const_cast\""]
  953 -> 401 [style=solid label="\"typeid\""]
  953 -> 38 [style=solid label="\"char\""]
  953 -> 39 [style=solid label="\"char8_t\""]
  953 -> 40 [style=solid label="\"char16_t\""]
  953 -> 41 [style=solid label="\"char32_t\""]
  953 -> 42 [style=solid label="\"wchar_t\""]
  953 -> 43 [style=solid label="\"bool\""]
  953 -> 44 [style=solid label="\"short\""]
  953 -> 45 [style=solid label="\"int\""]
  953 -> 46 [style=solid label="\"long\""]
  953 -> 47 [style=solid label="\"signed\""]
  953 -> 48 [style=solid label="\"unsigned\""]
  953 -> 49 [style=solid label="\"float\""]
  953 -> 50 [style=solid label="\"double\""]
  953 -> 51 [style=solid label="\"void\""]
  953 -> 209 [style=solid label="'R'"]
  953 -> 528 [style=solid label="\"throw\""]
  953 -> 56 [style=solid label="\"typename\""]
  953 -> 402 [style=solid label="\"sizeof\""]
  953 -> 403 [style=solid label="\"alignof\""]
  953 -> 529 [style=solid label="\"co_yield\""]
  953 -> 404 [style=dashed label="additive-expression"]
  953 -> 405 [style=dashed label="and-expression"]
  953 -> 1141 [style=dashed label="assignment-expression"]
  953 -> 406 [style=dashed label="await-expression"]
  953 -> 407 [style=dashed label="binary-literal"]
  953 -> 408 [style=dashed label="boolean-literal"]
  953 -> 1142 [style=dashed label="braced-init-list"]
  953 -> 409 [style=dashed label="cast-expression"]
  953 -> 410 [style=dashed label="character-literal"]
  953 -> 66 [style=dashed label="class-name"]
  953 -> 411 [style=dashed label="compare-expression"]
  953 -> 68 [style=dashed label="concept-name"]
  953 -> 531 [style=dashed label="conditional-expression"]
  953 -> 69 [style=dashed label="conversion-function-id"]
  953 -> 414 [style=dashed label="decimal-floating-point-literal"]
  953 -> 415 [style=dashed label="decimal-literal"]
  953 -> 77 [style=dashed label="decltype-specifier"]
  953 -> 416 [style=dashed label="delete-expression"]
  953 -> 417 [style=dashed label="digit"]
  953 -> 418 [style=dashed label="digit-sequence"]
  953 -> 419 [style=dashed label="encoding-prefix"]
  953 -> 85 [style=dashed label="enum-name"]
  953 -> 420 [style=dashed label="equality-expression"]
  953 -> 421 [style=dashed label="exclusive-or-expression"]
  953 -> 1417 [style=dashed label="expression-list"]
  953 -> 422 [style=dashed label="floating-point-literal"]
  953 -> 423 [style=dashed label="fold-expression"]
  953 -> 424 [style=dashed label="fractional-constant"]
  953 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  953 -> 426 [style=dashed label="hexadecimal-literal"]
  953 -> 427 [style=dashed label="hexadecimal-prefix"]
  953 -> 428 [style=dashed label="id-expression"]
  953 -> 429 [style=dashed label="inclusive-or-expression"]
  953 -> 1145 [style=dashed label="initializer-clause"]
  953 -> 1146 [style=dashed label="initializer-list"]
  953 -> 430 [style=dashed label="integer-literal"]
  953 -> 431 [style=dashed label="lambda-expression"]
  953 -> 432 [style=dashed label="lambda-introducer"]
  953 -> 433 [style=dashed label="literal"]
  953 -> 96 [style=dashed label="literal-operator-id"]
  953 -> 434 [style=dashed label="logical-and-expression"]
  953 -> 533 [style=dashed label="logical-or-expression"]
  953 -> 436 [style=dashed label="multiplicative-expression"]
  953 -> 100 [style=dashed label="namespace-alias"]
  953 -> 103 [style=dashed label="namespace-name"]
  953 -> 437 [style=dashed label="nested-name-specifier"]
  953 -> 438 [style=dashed label="new-expression"]
  953 -> 439 [style=dashed label="noexcept-expression"]
  953 -> 440 [style=dashed label="nonzero-digit"]
  953 -> 441 [style=dashed label="octal-literal"]
  953 -> 109 [style=dashed label="operator-function-id"]
  953 -> 110 [style=dashed label="placeholder-type-specifier"]
  953 -> 442 [style=dashed label="pm-expression"]
  953 -> 443 [style=dashed label="pointer-literal"]
  953 -> 444 [style=dashed label="postfix-expression"]
  953 -> 445 [style=dashed label="primary-expression"]
  953 -> 113 [style=dashed label="qualified-id"]
  953 -> 446 [style=dashed label="relational-expression"]
  953 -> 447 [style=dashed label="requires-expression"]
  953 -> 448 [style=dashed label="shift-expression"]
  953 -> 115 [style=dashed label="simple-template-id"]
  953 -> 534 [style=dashed label="simple-type-specifier"]
  953 -> 450 [style=dashed label="string-literal"]
  953 -> 121 [style=dashed label="template-id"]
  953 -> 216 [style=dashed label="template-name"]
  953 -> 535 [style=dashed label="throw-expression"]
  953 -> 124 [style=dashed label="type-constraint"]
  953 -> 125 [style=dashed label="type-name"]
  953 -> 127 [style=dashed label="typedef-name"]
  953 -> 536 [style=dashed label="typename-specifier"]
  953 -> 454 [style=dashed label="unary-expression"]
  953 -> 455 [style=dashed label="unary-operator"]
  953 -> 130 [style=dashed label="unqualified-id"]
  953 -> 456 [style=dashed label="user-defined-character-literal"]
  953 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  953 -> 458 [style=dashed label="user-defined-integer-literal"]
  953 -> 459 [style=dashed label="user-defined-literal"]
  953 -> 460 [style=dashed label="user-defined-string-literal"]
  953 -> 537 [style=dashed label="yield-expression"]
  954 [label="State 954\n\l870 postfix-expression: typename-specifier braced-init-list •\l"]
  954 -> "954R870" [style=solid]
 "954R870" [label="R870", fillcolor=3, shape=diamond, style=filled]
  955 [label="State 955\n\l1131 unary-expression: unary-operator cast-expression •\l"]
  955 -> "955R1131" [style=solid]
 "955R1131" [label="R1131", fillcolor=3, shape=diamond, style=filled]
  956 [label="State 956\n\l665 nested-name-specifier: nested-name-specifier \"template\" simple-template-id • \"::\"\l1061 template-id: simple-template-id •\l"]
  956 -> 1217 [style=solid label="\"::\""]
  956 -> "956R1061d" [label="[\"::\"]", style=solid]
 "956R1061d" [label="R1061", fillcolor=5, shape=diamond, style=filled]
  956 -> "956R1061" [style=solid]
 "956R1061" [label="R1061", fillcolor=3, shape=diamond, style=filled]
  957 [label="State 957\n\l 22 asm-declaration: \"asm\" '(' string-literal ')' • ';'\l"]
  957 -> 1418 [style=solid label="';'"]
  958 [label="State 958\n\l 48 attribute-namespace: IDENTIFIER •\l"]
  958 -> "958R48" [style=solid]
 "958R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  959 [label="State 959\n\l 57 attribute-using-prefix: \"using\" attribute-namespace • ':'\l"]
  959 -> 1419 [style=solid label="':'"]
  960 [label="State 960\n\l 46 attribute-list: attribute \"...\" •\l"]
  960 -> "960R46" [style=solid]
 "960R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  961 [label="State 961\n\l 44 attribute-list: attribute-list ',' •\l 45               | attribute-list ',' • attribute\l 47               | attribute-list ',' • attribute \"...\"\l"]
  961 -> 465 [style=solid label="IDENTIFIER"]
  961 -> 1420 [style=dashed label="attribute"]
  961 -> 469 [style=dashed label="attribute-namespace"]
  961 -> 470 [style=dashed label="attribute-scoped-token"]
  961 -> 471 [style=dashed label="attribute-token"]
  961 -> "961R44" [style=solid]
 "961R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  962 [label="State 962\n\l 50 attribute-specifier: '[' '[' attribute-list ']' • ']'\l"]
  962 -> 1421 [style=solid label="']'"]
  963 [label="State 963\n\l 49 attribute-scoped-token: attribute-namespace \"::\" • IDENTIFIER\l"]
  963 -> 1422 [style=solid label="IDENTIFIER"]
  964 [label="State 964\n\l 40 attribute-argument-clause: '(' • ')'\l 41                          | '(' • balanced-token-seq ')'\l"]
  964 -> 1423 [style=solid label="ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE"]
  964 -> 1424 [style=solid label="'('"]
  964 -> 1425 [style=solid label="')'"]
  964 -> 1426 [style=solid label="'['"]
  964 -> 1427 [style=solid label="'{'"]
  964 -> 1428 [style=dashed label="balanced-token"]
  964 -> 1429 [style=dashed label="balanced-token-seq"]
  965 [label="State 965\n\l 39 attribute: attribute-token attribute-argument-clause •\l"]
  965 -> "965R39" [style=solid]
 "965R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  966 [label="State 966\n\l 44 attribute-list: attribute-list • ','\l 45               | attribute-list • ',' attribute\l 47               | attribute-list • ',' attribute \"...\"\l 51 attribute-specifier: '[' '[' attribute-using-prefix attribute-list • ']' ']'\l"]
  966 -> 961 [style=solid label="','"]
  966 -> 1430 [style=solid label="']'"]
  967 [label="State 967\n\l1059 template-head: \"template\" '<' • template-parameter-list '>'\l1060              | \"template\" '<' • template-parameter-list '>' requires-clause\l"]
  967 -> 161 [style=solid label="IDENTIFIER"]
  967 -> 4 [style=solid label="\"alignas\""]
  967 -> 9 [style=solid label="\"::\""]
  967 -> 10 [style=solid label="'['"]
  967 -> 11 [style=solid label="\"virtual\""]
  967 -> 473 [style=solid label="\"class\""]
  967 -> 13 [style=solid label="\"struct\""]
  967 -> 14 [style=solid label="\"union\""]
  967 -> 474 [style=solid label="\"template\""]
  967 -> 18 [style=solid label="\"const\""]
  967 -> 19 [style=solid label="\"volatile\""]
  967 -> 20 [style=solid label="\"friend\""]
  967 -> 21 [style=solid label="\"typedef\""]
  967 -> 22 [style=solid label="\"constexpr\""]
  967 -> 23 [style=solid label="\"consteval\""]
  967 -> 24 [style=solid label="\"constinit\""]
  967 -> 263 [style=solid label="\"inline\""]
  967 -> 26 [style=solid label="\"decltype\""]
  967 -> 27 [style=solid label="\"enum\""]
  967 -> 264 [style=solid label="\"extern\""]
  967 -> 29 [style=solid label="\"explicit\""]
  967 -> 476 [style=solid label="\"this\""]
  967 -> 37 [style=solid label="\"auto\""]
  967 -> 38 [style=solid label="\"char\""]
  967 -> 39 [style=solid label="\"char8_t\""]
  967 -> 40 [style=solid label="\"char16_t\""]
  967 -> 41 [style=solid label="\"char32_t\""]
  967 -> 42 [style=solid label="\"wchar_t\""]
  967 -> 43 [style=solid label="\"bool\""]
  967 -> 44 [style=solid label="\"short\""]
  967 -> 45 [style=solid label="\"int\""]
  967 -> 46 [style=solid label="\"long\""]
  967 -> 47 [style=solid label="\"signed\""]
  967 -> 48 [style=solid label="\"unsigned\""]
  967 -> 49 [style=solid label="\"float\""]
  967 -> 50 [style=solid label="\"double\""]
  967 -> 51 [style=solid label="\"void\""]
  967 -> 53 [style=solid label="\"static\""]
  967 -> 54 [style=solid label="\"thread_local\""]
  967 -> 55 [style=solid label="\"mutable\""]
  967 -> 477 [style=solid label="\"typename\""]
  967 -> 58 [style=dashed label="alignment-specifier"]
  967 -> 61 [style=dashed label="attribute-specifier"]
  967 -> 478 [style=dashed label="attribute-specifier-seq"]
  967 -> 64 [style=dashed label="class-head"]
  967 -> 65 [style=dashed label="class-key"]
  967 -> 66 [style=dashed label="class-name"]
  967 -> 67 [style=dashed label="class-specifier"]
  967 -> 68 [style=dashed label="concept-name"]
  967 -> 70 [style=dashed label="cv-qualifier"]
  967 -> 71 [style=dashed label="decl-specifier"]
  967 -> 479 [style=dashed label="decl-specifier-seq"]
  967 -> 77 [style=dashed label="decltype-specifier"]
  967 -> 79 [style=dashed label="defining-type-specifier"]
  967 -> 80 [style=dashed label="elaborated-enum-specifier"]
  967 -> 81 [style=dashed label="elaborated-type-specifier"]
  967 -> 83 [style=dashed label="enum-head"]
  967 -> 268 [style=dashed label="enum-key"]
  967 -> 85 [style=dashed label="enum-name"]
  967 -> 86 [style=dashed label="enum-specifier"]
  967 -> 269 [style=dashed label="explicit-specifier"]
  967 -> 92 [style=dashed label="function-specifier"]
  967 -> 100 [style=dashed label="namespace-alias"]
  967 -> 103 [style=dashed label="namespace-name"]
  967 -> 213 [style=dashed label="nested-name-specifier"]
  967 -> 480 [style=dashed label="parameter-declaration"]
  967 -> 110 [style=dashed label="placeholder-type-specifier"]
  967 -> 142 [style=dashed label="simple-template-id"]
  967 -> 116 [style=dashed label="simple-type-specifier"]
  967 -> 118 [style=dashed label="storage-class-specifier"]
  967 -> 481 [style=dashed label="template-head"]
  967 -> 216 [style=dashed label="template-name"]
  967 -> 482 [style=dashed label="template-parameter"]
  967 -> 483 [style=dashed label="template-parameter-list"]
  967 -> 484 [style=dashed label="type-constraint"]
  967 -> 125 [style=dashed label="type-name"]
  967 -> 485 [style=dashed label="type-parameter"]
  967 -> 486 [style=dashed label="type-parameter-key"]
  967 -> 126 [style=dashed label="type-specifier"]
  967 -> 127 [style=dashed label="typedef-name"]
  967 -> 128 [style=dashed label="typename-specifier"]
  968 [label="State 968\n\l324 explicit-specialization: \"template\" '<' '>' declaration •\l"]
  968 -> "968R324" [style=solid]
 "968R324" [label="R324", fillcolor=3, shape=diamond, style=filled]
  969 [label="State 969\n\l809 parameter-declaration: \"this\" decl-specifier-seq • declarator\l813                      | \"this\" decl-specifier-seq • declarator '=' initializer-clause\l817                      | \"this\" decl-specifier-seq •\l821                      | \"this\" decl-specifier-seq • abstract-declarator\l825                      | \"this\" decl-specifier-seq • '=' initializer-clause\l829                      | \"this\" decl-specifier-seq • abstract-declarator '=' initializer-clause\l"]
  969 -> 148 [style=solid label="IDENTIFIER"]
  969 -> 1431 [style=solid label="'='"]
  969 -> 973 [style=solid label="'('"]
  969 -> 974 [style=solid label="\"...\""]
  969 -> 7 [style=solid label="'&'"]
  969 -> 9 [style=solid label="\"::\""]
  969 -> 945 [style=solid label="'['"]
  969 -> 16 [style=solid label="\"&&\""]
  969 -> 17 [style=solid label="\"operator\""]
  969 -> 135 [style=solid label="\"decltype\""]
  969 -> 32 [style=solid label="'*'"]
  969 -> 36 [style=solid label="'~'"]
  969 -> 1432 [style=dashed label="abstract-declarator"]
  969 -> 947 [style=dashed label="abstract-pack-declarator"]
  969 -> 66 [style=dashed label="class-name"]
  969 -> 69 [style=dashed label="conversion-function-id"]
  969 -> 1433 [style=dashed label="declarator"]
  969 -> 76 [style=dashed label="declarator-id"]
  969 -> 139 [style=dashed label="decltype-specifier"]
  969 -> 85 [style=dashed label="enum-name"]
  969 -> 94 [style=dashed label="id-expression"]
  969 -> 96 [style=dashed label="literal-operator-id"]
  969 -> 100 [style=dashed label="namespace-alias"]
  969 -> 103 [style=dashed label="namespace-name"]
  969 -> 149 [style=dashed label="nested-name-specifier"]
  969 -> 948 [style=dashed label="noptr-abstract-declarator"]
  969 -> 949 [style=dashed label="noptr-abstract-pack-declarator"]
  969 -> 107 [style=dashed label="noptr-declarator"]
  969 -> 109 [style=dashed label="operator-function-id"]
  969 -> 950 [style=dashed label="parameters-and-qualifiers"]
  969 -> 951 [style=dashed label="ptr-abstract-declarator"]
  969 -> 111 [style=dashed label="ptr-declarator"]
  969 -> 977 [style=dashed label="ptr-operator"]
  969 -> 113 [style=dashed label="qualified-id"]
  969 -> 115 [style=dashed label="simple-template-id"]
  969 -> 121 [style=dashed label="template-id"]
  969 -> 143 [style=dashed label="template-name"]
  969 -> 144 [style=dashed label="type-name"]
  969 -> 127 [style=dashed label="typedef-name"]
  969 -> 130 [style=dashed label="unqualified-id"]
  969 -> "969R817d" [label="[\"...\"]", style=solid]
 "969R817d" [label="R817", fillcolor=5, shape=diamond, style=filled]
  969 -> "969R817" [style=solid]
 "969R817" [label="R817", fillcolor=3, shape=diamond, style=filled]
  970 [label="State 970\n\l808 parameter-declaration: attribute-specifier-seq \"this\" • decl-specifier-seq declarator\l812                      | attribute-specifier-seq \"this\" • decl-specifier-seq declarator '=' initializer-clause\l816                      | attribute-specifier-seq \"this\" • decl-specifier-seq\l820                      | attribute-specifier-seq \"this\" • decl-specifier-seq abstract-declarator\l824                      | attribute-specifier-seq \"this\" • decl-specifier-seq '=' initializer-clause\l828                      | attribute-specifier-seq \"this\" • decl-specifier-seq abstract-declarator '=' initializer-clause\l"]
  970 -> 161 [style=solid label="IDENTIFIER"]
  970 -> 9 [style=solid label="\"::\""]
  970 -> 11 [style=solid label="\"virtual\""]
  970 -> 12 [style=solid label="\"class\""]
  970 -> 13 [style=solid label="\"struct\""]
  970 -> 14 [style=solid label="\"union\""]
  970 -> 18 [style=solid label="\"const\""]
  970 -> 19 [style=solid label="\"volatile\""]
  970 -> 20 [style=solid label="\"friend\""]
  970 -> 21 [style=solid label="\"typedef\""]
  970 -> 22 [style=solid label="\"constexpr\""]
  970 -> 23 [style=solid label="\"consteval\""]
  970 -> 24 [style=solid label="\"constinit\""]
  970 -> 263 [style=solid label="\"inline\""]
  970 -> 26 [style=solid label="\"decltype\""]
  970 -> 27 [style=solid label="\"enum\""]
  970 -> 264 [style=solid label="\"extern\""]
  970 -> 29 [style=solid label="\"explicit\""]
  970 -> 37 [style=solid label="\"auto\""]
  970 -> 38 [style=solid label="\"char\""]
  970 -> 39 [style=solid label="\"char8_t\""]
  970 -> 40 [style=solid label="\"char16_t\""]
  970 -> 41 [style=solid label="\"char32_t\""]
  970 -> 42 [style=solid label="\"wchar_t\""]
  970 -> 43 [style=solid label="\"bool\""]
  970 -> 44 [style=solid label="\"short\""]
  970 -> 45 [style=solid label="\"int\""]
  970 -> 46 [style=solid label="\"long\""]
  970 -> 47 [style=solid label="\"signed\""]
  970 -> 48 [style=solid label="\"unsigned\""]
  970 -> 49 [style=solid label="\"float\""]
  970 -> 50 [style=solid label="\"double\""]
  970 -> 51 [style=solid label="\"void\""]
  970 -> 53 [style=solid label="\"static\""]
  970 -> 54 [style=solid label="\"thread_local\""]
  970 -> 55 [style=solid label="\"mutable\""]
  970 -> 56 [style=solid label="\"typename\""]
  970 -> 64 [style=dashed label="class-head"]
  970 -> 65 [style=dashed label="class-key"]
  970 -> 66 [style=dashed label="class-name"]
  970 -> 67 [style=dashed label="class-specifier"]
  970 -> 68 [style=dashed label="concept-name"]
  970 -> 70 [style=dashed label="cv-qualifier"]
  970 -> 71 [style=dashed label="decl-specifier"]
  970 -> 1434 [style=dashed label="decl-specifier-seq"]
  970 -> 77 [style=dashed label="decltype-specifier"]
  970 -> 79 [style=dashed label="defining-type-specifier"]
  970 -> 80 [style=dashed label="elaborated-enum-specifier"]
  970 -> 81 [style=dashed label="elaborated-type-specifier"]
  970 -> 83 [style=dashed label="enum-head"]
  970 -> 268 [style=dashed label="enum-key"]
  970 -> 85 [style=dashed label="enum-name"]
  970 -> 86 [style=dashed label="enum-specifier"]
  970 -> 269 [style=dashed label="explicit-specifier"]
  970 -> 92 [style=dashed label="function-specifier"]
  970 -> 100 [style=dashed label="namespace-alias"]
  970 -> 103 [style=dashed label="namespace-name"]
  970 -> 213 [style=dashed label="nested-name-specifier"]
  970 -> 110 [style=dashed label="placeholder-type-specifier"]
  970 -> 142 [style=dashed label="simple-template-id"]
  970 -> 116 [style=dashed label="simple-type-specifier"]
  970 -> 118 [style=dashed label="storage-class-specifier"]
  970 -> 216 [style=dashed label="template-name"]
  970 -> 124 [style=dashed label="type-constraint"]
  970 -> 125 [style=dashed label="type-name"]
  970 -> 126 [style=dashed label="type-specifier"]
  970 -> 127 [style=dashed label="typedef-name"]
  970 -> 128 [style=dashed label="typename-specifier"]
  971 [label="State 971\n\l806 parameter-declaration: attribute-specifier-seq decl-specifier-seq • declarator\l810                      | attribute-specifier-seq decl-specifier-seq • declarator '=' initializer-clause\l814                      | attribute-specifier-seq decl-specifier-seq •\l818                      | attribute-specifier-seq decl-specifier-seq • abstract-declarator\l822                      | attribute-specifier-seq decl-specifier-seq • '=' initializer-clause\l826                      | attribute-specifier-seq decl-specifier-seq • abstract-declarator '=' initializer-clause\l"]
  971 -> 148 [style=solid label="IDENTIFIER"]
  971 -> 1435 [style=solid label="'='"]
  971 -> 973 [style=solid label="'('"]
  971 -> 974 [style=solid label="\"...\""]
  971 -> 7 [style=solid label="'&'"]
  971 -> 9 [style=solid label="\"::\""]
  971 -> 945 [style=solid label="'['"]
  971 -> 16 [style=solid label="\"&&\""]
  971 -> 17 [style=solid label="\"operator\""]
  971 -> 135 [style=solid label="\"decltype\""]
  971 -> 32 [style=solid label="'*'"]
  971 -> 36 [style=solid label="'~'"]
  971 -> 1436 [style=dashed label="abstract-declarator"]
  971 -> 947 [style=dashed label="abstract-pack-declarator"]
  971 -> 66 [style=dashed label="class-name"]
  971 -> 69 [style=dashed label="conversion-function-id"]
  971 -> 1437 [style=dashed label="declarator"]
  971 -> 76 [style=dashed label="declarator-id"]
  971 -> 139 [style=dashed label="decltype-specifier"]
  971 -> 85 [style=dashed label="enum-name"]
  971 -> 94 [style=dashed label="id-expression"]
  971 -> 96 [style=dashed label="literal-operator-id"]
  971 -> 100 [style=dashed label="namespace-alias"]
  971 -> 103 [style=dashed label="namespace-name"]
  971 -> 149 [style=dashed label="nested-name-specifier"]
  971 -> 948 [style=dashed label="noptr-abstract-declarator"]
  971 -> 949 [style=dashed label="noptr-abstract-pack-declarator"]
  971 -> 107 [style=dashed label="noptr-declarator"]
  971 -> 109 [style=dashed label="operator-function-id"]
  971 -> 950 [style=dashed label="parameters-and-qualifiers"]
  971 -> 951 [style=dashed label="ptr-abstract-declarator"]
  971 -> 111 [style=dashed label="ptr-declarator"]
  971 -> 977 [style=dashed label="ptr-operator"]
  971 -> 113 [style=dashed label="qualified-id"]
  971 -> 115 [style=dashed label="simple-template-id"]
  971 -> 121 [style=dashed label="template-id"]
  971 -> 143 [style=dashed label="template-name"]
  971 -> 144 [style=dashed label="type-name"]
  971 -> 127 [style=dashed label="typedef-name"]
  971 -> 130 [style=dashed label="unqualified-id"]
  971 -> "971R814d" [label="[\"...\"]", style=solid]
 "971R814d" [label="R814", fillcolor=5, shape=diamond, style=filled]
  971 -> "971R814" [style=solid]
 "971R814" [label="R814", fillcolor=3, shape=diamond, style=filled]
  972 [label="State 972\n\l823 parameter-declaration: decl-specifier-seq '=' • initializer-clause\l"]
  972 -> 1 [style=solid label="IDENTIFIER"]
  972 -> 361 [style=solid label="'+'"]
  972 -> 362 [style=solid label="'-'"]
  972 -> 363 [style=solid label="'('"]
  972 -> 364 [style=solid label="'&'"]
  972 -> 365 [style=solid label="\"::\""]
  972 -> 366 [style=solid label="'['"]
  972 -> 367 [style=solid label="\"co_await\""]
  972 -> 939 [style=solid label="'{'"]
  972 -> 368 [style=solid label="'0'"]
  972 -> 369 [style=solid label="'1'"]
  972 -> 370 [style=solid label="\"0b\""]
  972 -> 371 [style=solid label="\"0B\""]
  972 -> 372 [style=solid label="'\\''"]
  972 -> 373 [style=solid label="\"false\""]
  972 -> 374 [style=solid label="\"true\""]
  972 -> 375 [style=solid label="\"noexcept\""]
  972 -> 17 [style=solid label="\"operator\""]
  972 -> 26 [style=solid label="\"decltype\""]
  972 -> 376 [style=solid label="\"delete\""]
  972 -> 377 [style=solid label="'.'"]
  972 -> 378 [style=solid label="'2'"]
  972 -> 379 [style=solid label="'3'"]
  972 -> 380 [style=solid label="'4'"]
  972 -> 381 [style=solid label="'5'"]
  972 -> 382 [style=solid label="'6'"]
  972 -> 383 [style=solid label="'7'"]
  972 -> 384 [style=solid label="'8'"]
  972 -> 385 [style=solid label="'9'"]
  972 -> 185 [style=solid label="\"u8\""]
  972 -> 186 [style=solid label="'u'"]
  972 -> 187 [style=solid label="'U'"]
  972 -> 188 [style=solid label="'L'"]
  972 -> 386 [style=solid label="'*'"]
  972 -> 203 [style=solid label="'\"'"]
  972 -> 387 [style=solid label="\"0x\""]
  972 -> 388 [style=solid label="\"0X\""]
  972 -> 389 [style=solid label="\"requires\""]
  972 -> 390 [style=solid label="\"new\""]
  972 -> 391 [style=solid label="'~'"]
  972 -> 392 [style=solid label="'!'"]
  972 -> 393 [style=solid label="\"++\""]
  972 -> 394 [style=solid label="\"--\""]
  972 -> 395 [style=solid label="\"this\""]
  972 -> 37 [style=solid label="\"auto\""]
  972 -> 396 [style=solid label="\"nullptr\""]
  972 -> 397 [style=solid label="\"dynamic_cast\""]
  972 -> 398 [style=solid label="\"static_cast\""]
  972 -> 399 [style=solid label="\"reinterpret_cast\""]
  972 -> 400 [style=solid label="\"const_cast\""]
  972 -> 401 [style=solid label="\"typeid\""]
  972 -> 38 [style=solid label="\"char\""]
  972 -> 39 [style=solid label="\"char8_t\""]
  972 -> 40 [style=solid label="\"char16_t\""]
  972 -> 41 [style=solid label="\"char32_t\""]
  972 -> 42 [style=solid label="\"wchar_t\""]
  972 -> 43 [style=solid label="\"bool\""]
  972 -> 44 [style=solid label="\"short\""]
  972 -> 45 [style=solid label="\"int\""]
  972 -> 46 [style=solid label="\"long\""]
  972 -> 47 [style=solid label="\"signed\""]
  972 -> 48 [style=solid label="\"unsigned\""]
  972 -> 49 [style=solid label="\"float\""]
  972 -> 50 [style=solid label="\"double\""]
  972 -> 51 [style=solid label="\"void\""]
  972 -> 209 [style=solid label="'R'"]
  972 -> 528 [style=solid label="\"throw\""]
  972 -> 56 [style=solid label="\"typename\""]
  972 -> 402 [style=solid label="\"sizeof\""]
  972 -> 403 [style=solid label="\"alignof\""]
  972 -> 529 [style=solid label="\"co_yield\""]
  972 -> 404 [style=dashed label="additive-expression"]
  972 -> 405 [style=dashed label="and-expression"]
  972 -> 1141 [style=dashed label="assignment-expression"]
  972 -> 406 [style=dashed label="await-expression"]
  972 -> 407 [style=dashed label="binary-literal"]
  972 -> 408 [style=dashed label="boolean-literal"]
  972 -> 1142 [style=dashed label="braced-init-list"]
  972 -> 409 [style=dashed label="cast-expression"]
  972 -> 410 [style=dashed label="character-literal"]
  972 -> 66 [style=dashed label="class-name"]
  972 -> 411 [style=dashed label="compare-expression"]
  972 -> 68 [style=dashed label="concept-name"]
  972 -> 531 [style=dashed label="conditional-expression"]
  972 -> 69 [style=dashed label="conversion-function-id"]
  972 -> 414 [style=dashed label="decimal-floating-point-literal"]
  972 -> 415 [style=dashed label="decimal-literal"]
  972 -> 77 [style=dashed label="decltype-specifier"]
  972 -> 416 [style=dashed label="delete-expression"]
  972 -> 417 [style=dashed label="digit"]
  972 -> 418 [style=dashed label="digit-sequence"]
  972 -> 419 [style=dashed label="encoding-prefix"]
  972 -> 85 [style=dashed label="enum-name"]
  972 -> 420 [style=dashed label="equality-expression"]
  972 -> 421 [style=dashed label="exclusive-or-expression"]
  972 -> 422 [style=dashed label="floating-point-literal"]
  972 -> 423 [style=dashed label="fold-expression"]
  972 -> 424 [style=dashed label="fractional-constant"]
  972 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  972 -> 426 [style=dashed label="hexadecimal-literal"]
  972 -> 427 [style=dashed label="hexadecimal-prefix"]
  972 -> 428 [style=dashed label="id-expression"]
  972 -> 429 [style=dashed label="inclusive-or-expression"]
  972 -> 1438 [style=dashed label="initializer-clause"]
  972 -> 430 [style=dashed label="integer-literal"]
  972 -> 431 [style=dashed label="lambda-expression"]
  972 -> 432 [style=dashed label="lambda-introducer"]
  972 -> 433 [style=dashed label="literal"]
  972 -> 96 [style=dashed label="literal-operator-id"]
  972 -> 434 [style=dashed label="logical-and-expression"]
  972 -> 533 [style=dashed label="logical-or-expression"]
  972 -> 436 [style=dashed label="multiplicative-expression"]
  972 -> 100 [style=dashed label="namespace-alias"]
  972 -> 103 [style=dashed label="namespace-name"]
  972 -> 437 [style=dashed label="nested-name-specifier"]
  972 -> 438 [style=dashed label="new-expression"]
  972 -> 439 [style=dashed label="noexcept-expression"]
  972 -> 440 [style=dashed label="nonzero-digit"]
  972 -> 441 [style=dashed label="octal-literal"]
  972 -> 109 [style=dashed label="operator-function-id"]
  972 -> 110 [style=dashed label="placeholder-type-specifier"]
  972 -> 442 [style=dashed label="pm-expression"]
  972 -> 443 [style=dashed label="pointer-literal"]
  972 -> 444 [style=dashed label="postfix-expression"]
  972 -> 445 [style=dashed label="primary-expression"]
  972 -> 113 [style=dashed label="qualified-id"]
  972 -> 446 [style=dashed label="relational-expression"]
  972 -> 447 [style=dashed label="requires-expression"]
  972 -> 448 [style=dashed label="shift-expression"]
  972 -> 115 [style=dashed label="simple-template-id"]
  972 -> 534 [style=dashed label="simple-type-specifier"]
  972 -> 450 [style=dashed label="string-literal"]
  972 -> 121 [style=dashed label="template-id"]
  972 -> 216 [style=dashed label="template-name"]
  972 -> 535 [style=dashed label="throw-expression"]
  972 -> 124 [style=dashed label="type-constraint"]
  972 -> 125 [style=dashed label="type-name"]
  972 -> 127 [style=dashed label="typedef-name"]
  972 -> 536 [style=dashed label="typename-specifier"]
  972 -> 454 [style=dashed label="unary-expression"]
  972 -> 455 [style=dashed label="unary-operator"]
  972 -> 130 [style=dashed label="unqualified-id"]
  972 -> 456 [style=dashed label="user-defined-character-literal"]
  972 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  972 -> 458 [style=dashed label="user-defined-integer-literal"]
  972 -> 459 [style=dashed label="user-defined-literal"]
  972 -> 460 [style=dashed label="user-defined-string-literal"]
  972 -> 537 [style=dashed label="yield-expression"]
  973 [label="State 973\n\l718 noptr-abstract-declarator: '(' • ptr-abstract-declarator ')'\l732 noptr-declarator: '(' • ptr-declarator ')'\l836 parameters-and-qualifiers: '(' • parameter-declaration-clause ')'\l837                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq\l838                          | '(' • parameter-declaration-clause ')' ref-qualifier\l839                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier\l840                          | '(' • parameter-declaration-clause ')' noexcept-specifier\l841                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier\l842                          | '(' • parameter-declaration-clause ')' ref-qualifier noexcept-specifier\l843                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier\l844                          | '(' • parameter-declaration-clause ')' attribute-specifier-seq\l845                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq attribute-specifier-seq\l846                          | '(' • parameter-declaration-clause ')' ref-qualifier attribute-specifier-seq\l847                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier attribute-specifier-seq\l848                          | '(' • parameter-declaration-clause ')' noexcept-specifier attribute-specifier-seq\l849                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier attribute-specifier-seq\l850                          | '(' • parameter-declaration-clause ')' ref-qualifier noexcept-specifier attribute-specifier-seq\l851                          | '(' • parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq\l"]
  973 -> 1 [style=solid label="IDENTIFIER"]
  973 -> 4 [style=solid label="\"alignas\""]
  973 -> 973 [style=solid label="'('"]
  973 -> 1439 [style=solid label="\"...\""]
  973 -> 7 [style=solid label="'&'"]
  973 -> 9 [style=solid label="\"::\""]
  973 -> 1401 [style=solid label="'['"]
  973 -> 11 [style=solid label="\"virtual\""]
  973 -> 12 [style=solid label="\"class\""]
  973 -> 13 [style=solid label="\"struct\""]
  973 -> 14 [style=solid label="\"union\""]
  973 -> 16 [style=solid label="\"&&\""]
  973 -> 17 [style=solid label="\"operator\""]
  973 -> 18 [style=solid label="\"const\""]
  973 -> 19 [style=solid label="\"volatile\""]
  973 -> 20 [style=solid label="\"friend\""]
  973 -> 21 [style=solid label="\"typedef\""]
  973 -> 22 [style=solid label="\"constexpr\""]
  973 -> 23 [style=solid label="\"consteval\""]
  973 -> 24 [style=solid label="\"constinit\""]
  973 -> 263 [style=solid label="\"inline\""]
  973 -> 26 [style=solid label="\"decltype\""]
  973 -> 27 [style=solid label="\"enum\""]
  973 -> 264 [style=solid label="\"extern\""]
  973 -> 29 [style=solid label="\"explicit\""]
  973 -> 32 [style=solid label="'*'"]
  973 -> 36 [style=solid label="'~'"]
  973 -> 476 [style=solid label="\"this\""]
  973 -> 37 [style=solid label="\"auto\""]
  973 -> 38 [style=solid label="\"char\""]
  973 -> 39 [style=solid label="\"char8_t\""]
  973 -> 40 [style=solid label="\"char16_t\""]
  973 -> 41 [style=solid label="\"char32_t\""]
  973 -> 42 [style=solid label="\"wchar_t\""]
  973 -> 43 [style=solid label="\"bool\""]
  973 -> 44 [style=solid label="\"short\""]
  973 -> 45 [style=solid label="\"int\""]
  973 -> 46 [style=solid label="\"long\""]
  973 -> 47 [style=solid label="\"signed\""]
  973 -> 48 [style=solid label="\"unsigned\""]
  973 -> 49 [style=solid label="\"float\""]
  973 -> 50 [style=solid label="\"double\""]
  973 -> 51 [style=solid label="\"void\""]
  973 -> 53 [style=solid label="\"static\""]
  973 -> 54 [style=solid label="\"thread_local\""]
  973 -> 55 [style=solid label="\"mutable\""]
  973 -> 56 [style=solid label="\"typename\""]
  973 -> 58 [style=dashed label="alignment-specifier"]
  973 -> 61 [style=dashed label="attribute-specifier"]
  973 -> 478 [style=dashed label="attribute-specifier-seq"]
  973 -> 64 [style=dashed label="class-head"]
  973 -> 65 [style=dashed label="class-key"]
  973 -> 66 [style=dashed label="class-name"]
  973 -> 67 [style=dashed label="class-specifier"]
  973 -> 68 [style=dashed label="concept-name"]
  973 -> 69 [style=dashed label="conversion-function-id"]
  973 -> 70 [style=dashed label="cv-qualifier"]
  973 -> 71 [style=dashed label="decl-specifier"]
  973 -> 479 [style=dashed label="decl-specifier-seq"]
  973 -> 76 [style=dashed label="declarator-id"]
  973 -> 77 [style=dashed label="decltype-specifier"]
  973 -> 79 [style=dashed label="defining-type-specifier"]
  973 -> 80 [style=dashed label="elaborated-enum-specifier"]
  973 -> 81 [style=dashed label="elaborated-type-specifier"]
  973 -> 83 [style=dashed label="enum-head"]
  973 -> 268 [style=dashed label="enum-key"]
  973 -> 85 [style=dashed label="enum-name"]
  973 -> 86 [style=dashed label="enum-specifier"]
  973 -> 269 [style=dashed label="explicit-specifier"]
  973 -> 92 [style=dashed label="function-specifier"]
  973 -> 94 [style=dashed label="id-expression"]
  973 -> 96 [style=dashed label="literal-operator-id"]
  973 -> 100 [style=dashed label="namespace-alias"]
  973 -> 103 [style=dashed label="namespace-name"]
  973 -> 104 [style=dashed label="nested-name-specifier"]
  973 -> 1403 [style=dashed label="noptr-abstract-declarator"]
  973 -> 150 [style=dashed label="noptr-declarator"]
  973 -> 109 [style=dashed label="operator-function-id"]
  973 -> 735 [style=dashed label="parameter-declaration"]
  973 -> 736 [style=dashed label="parameter-declaration-clause"]
  973 -> 737 [style=dashed label="parameter-declaration-list"]
  973 -> 1404 [style=dashed label="parameters-and-qualifiers"]
  973 -> 110 [style=dashed label="placeholder-type-specifier"]
  973 -> 1405 [style=dashed label="ptr-abstract-declarator"]
  973 -> 151 [style=dashed label="ptr-declarator"]
  973 -> 1440 [style=dashed label="ptr-operator"]
  973 -> 113 [style=dashed label="qualified-id"]
  973 -> 115 [style=dashed label="simple-template-id"]
  973 -> 116 [style=dashed label="simple-type-specifier"]
  973 -> 118 [style=dashed label="storage-class-specifier"]
  973 -> 121 [style=dashed label="template-id"]
  973 -> 216 [style=dashed label="template-name"]
  973 -> 124 [style=dashed label="type-constraint"]
  973 -> 125 [style=dashed label="type-name"]
  973 -> 126 [style=dashed label="type-specifier"]
  973 -> 127 [style=dashed label="typedef-name"]
  973 -> 128 [style=dashed label="typename-specifier"]
  973 -> 130 [style=dashed label="unqualified-id"]
  974 [label="State 974\n\l231 declarator-id: \"...\" • id-expression\l724 noptr-abstract-pack-declarator: \"...\" •\l"]
  974 -> 148 [style=solid label="IDENTIFIER"]
  974 -> 9 [style=solid label="\"::\""]
  974 -> 17 [style=solid label="\"operator\""]
  974 -> 135 [style=solid label="\"decltype\""]
  974 -> 36 [style=solid label="'~'"]
  974 -> 66 [style=dashed label="class-name"]
  974 -> 69 [style=dashed label="conversion-function-id"]
  974 -> 139 [style=dashed label="decltype-specifier"]
  974 -> 85 [style=dashed label="enum-name"]
  974 -> 152 [style=dashed label="id-expression"]
  974 -> 96 [style=dashed label="literal-operator-id"]
  974 -> 100 [style=dashed label="namespace-alias"]
  974 -> 103 [style=dashed label="namespace-name"]
  974 -> 153 [style=dashed label="nested-name-specifier"]
  974 -> 109 [style=dashed label="operator-function-id"]
  974 -> 113 [style=dashed label="qualified-id"]
  974 -> 115 [style=dashed label="simple-template-id"]
  974 -> 121 [style=dashed label="template-id"]
  974 -> 143 [style=dashed label="template-name"]
  974 -> 144 [style=dashed label="type-name"]
  974 -> 127 [style=dashed label="typedef-name"]
  974 -> 130 [style=dashed label="unqualified-id"]
  974 -> "974R724" [style=solid]
 "974R724" [label="R724", fillcolor=3, shape=diamond, style=filled]
  975 [label="State 975\n\l819 parameter-declaration: decl-specifier-seq abstract-declarator •\l827                      | decl-specifier-seq abstract-declarator • '=' initializer-clause\l"]
  975 -> 1441 [style=solid label="'='"]
  975 -> "975R819" [style=solid]
 "975R819" [label="R819", fillcolor=3, shape=diamond, style=filled]
  976 [label="State 976\n\l807 parameter-declaration: decl-specifier-seq declarator •\l811                      | decl-specifier-seq declarator • '=' initializer-clause\l"]
  976 -> 1442 [style=solid label="'='"]
  976 -> "976R807" [style=solid]
 "976R807" [label="R807", fillcolor=3, shape=diamond, style=filled]
  977 [label="State 977\n\l  6 abstract-pack-declarator: ptr-operator • abstract-pack-declarator\l893 ptr-abstract-declarator: ptr-operator •\l894                        | ptr-operator • ptr-abstract-declarator\l896 ptr-declarator: ptr-operator • ptr-declarator\l"]
  977 -> 148 [style=solid label="IDENTIFIER"]
  977 -> 973 [style=solid label="'('"]
  977 -> 974 [style=solid label="\"...\""]
  977 -> 7 [style=solid label="'&'"]
  977 -> 9 [style=solid label="\"::\""]
  977 -> 945 [style=solid label="'['"]
  977 -> 16 [style=solid label="\"&&\""]
  977 -> 17 [style=solid label="\"operator\""]
  977 -> 135 [style=solid label="\"decltype\""]
  977 -> 32 [style=solid label="'*'"]
  977 -> 36 [style=solid label="'~'"]
  977 -> 1414 [style=dashed label="abstract-pack-declarator"]
  977 -> 66 [style=dashed label="class-name"]
  977 -> 69 [style=dashed label="conversion-function-id"]
  977 -> 76 [style=dashed label="declarator-id"]
  977 -> 139 [style=dashed label="decltype-specifier"]
  977 -> 85 [style=dashed label="enum-name"]
  977 -> 94 [style=dashed label="id-expression"]
  977 -> 96 [style=dashed label="literal-operator-id"]
  977 -> 100 [style=dashed label="namespace-alias"]
  977 -> 103 [style=dashed label="namespace-name"]
  977 -> 149 [style=dashed label="nested-name-specifier"]
  977 -> 1403 [style=dashed label="noptr-abstract-declarator"]
  977 -> 949 [style=dashed label="noptr-abstract-pack-declarator"]
  977 -> 150 [style=dashed label="noptr-declarator"]
  977 -> 109 [style=dashed label="operator-function-id"]
  977 -> 1404 [style=dashed label="parameters-and-qualifiers"]
  977 -> 1415 [style=dashed label="ptr-abstract-declarator"]
  977 -> 337 [style=dashed label="ptr-declarator"]
  977 -> 977 [style=dashed label="ptr-operator"]
  977 -> 113 [style=dashed label="qualified-id"]
  977 -> 115 [style=dashed label="simple-template-id"]
  977 -> 121 [style=dashed label="template-id"]
  977 -> 143 [style=dashed label="template-name"]
  977 -> 144 [style=dashed label="type-name"]
  977 -> 127 [style=dashed label="typedef-name"]
  977 -> 130 [style=dashed label="unqualified-id"]
  977 -> "977R893d" [label="[\"...\"]", style=solid]
 "977R893d" [label="R893", fillcolor=5, shape=diamond, style=filled]
  977 -> "977R893" [style=solid]
 "977R893" [label="R893", fillcolor=3, shape=diamond, style=filled]
  978 [label="State 978\n\l1113 type-parameter-key: \"class\" •\l"]
  978 -> "978R1113" [style=solid]
 "978R1113" [label="R1113", fillcolor=3, shape=diamond, style=filled]
  979 [label="State 979\n\l1114 type-parameter-key: \"typename\" •\l"]
  979 -> "979R1114" [style=solid]
 "979R1114" [label="R1114", fillcolor=3, shape=diamond, style=filled]
  980 [label="State 980\n\l1107 type-parameter: template-head type-parameter-key •\l1108               | template-head type-parameter-key • \"...\"\l1109               | template-head type-parameter-key • IDENTIFIER\l1110               | template-head type-parameter-key • \"...\" IDENTIFIER\l1111               | template-head type-parameter-key • '=' id-expression\l1112               | template-head type-parameter-key • IDENTIFIER '=' id-expression\l"]
  980 -> 1443 [style=solid label="IDENTIFIER"]
  980 -> 1444 [style=solid label="'='"]
  980 -> 1445 [style=solid label="\"...\""]
  980 -> "980R1107" [style=solid]
 "980R1107" [label="R1107", fillcolor=3, shape=diamond, style=filled]
  981 [label="State 981\n\l1070 template-parameter-list: template-parameter-list ',' • template-parameter\l"]
  981 -> 161 [style=solid label="IDENTIFIER"]
  981 -> 4 [style=solid label="\"alignas\""]
  981 -> 9 [style=solid label="\"::\""]
  981 -> 10 [style=solid label="'['"]
  981 -> 11 [style=solid label="\"virtual\""]
  981 -> 473 [style=solid label="\"class\""]
  981 -> 13 [style=solid label="\"struct\""]
  981 -> 14 [style=solid label="\"union\""]
  981 -> 474 [style=solid label="\"template\""]
  981 -> 18 [style=solid label="\"const\""]
  981 -> 19 [style=solid label="\"volatile\""]
  981 -> 20 [style=solid label="\"friend\""]
  981 -> 21 [style=solid label="\"typedef\""]
  981 -> 22 [style=solid label="\"constexpr\""]
  981 -> 23 [style=solid label="\"consteval\""]
  981 -> 24 [style=solid label="\"constinit\""]
  981 -> 263 [style=solid label="\"inline\""]
  981 -> 26 [style=solid label="\"decltype\""]
  981 -> 27 [style=solid label="\"enum\""]
  981 -> 264 [style=solid label="\"extern\""]
  981 -> 29 [style=solid label="\"explicit\""]
  981 -> 476 [style=solid label="\"this\""]
  981 -> 37 [style=solid label="\"auto\""]
  981 -> 38 [style=solid label="\"char\""]
  981 -> 39 [style=solid label="\"char8_t\""]
  981 -> 40 [style=solid label="\"char16_t\""]
  981 -> 41 [style=solid label="\"char32_t\""]
  981 -> 42 [style=solid label="\"wchar_t\""]
  981 -> 43 [style=solid label="\"bool\""]
  981 -> 44 [style=solid label="\"short\""]
  981 -> 45 [style=solid label="\"int\""]
  981 -> 46 [style=solid label="\"long\""]
  981 -> 47 [style=solid label="\"signed\""]
  981 -> 48 [style=solid label="\"unsigned\""]
  981 -> 49 [style=solid label="\"float\""]
  981 -> 50 [style=solid label="\"double\""]
  981 -> 51 [style=solid label="\"void\""]
  981 -> 53 [style=solid label="\"static\""]
  981 -> 54 [style=solid label="\"thread_local\""]
  981 -> 55 [style=solid label="\"mutable\""]
  981 -> 477 [style=solid label="\"typename\""]
  981 -> 58 [style=dashed label="alignment-specifier"]
  981 -> 61 [style=dashed label="attribute-specifier"]
  981 -> 478 [style=dashed label="attribute-specifier-seq"]
  981 -> 64 [style=dashed label="class-head"]
  981 -> 65 [style=dashed label="class-key"]
  981 -> 66 [style=dashed label="class-name"]
  981 -> 67 [style=dashed label="class-specifier"]
  981 -> 68 [style=dashed label="concept-name"]
  981 -> 70 [style=dashed label="cv-qualifier"]
  981 -> 71 [style=dashed label="decl-specifier"]
  981 -> 479 [style=dashed label="decl-specifier-seq"]
  981 -> 77 [style=dashed label="decltype-specifier"]
  981 -> 79 [style=dashed label="defining-type-specifier"]
  981 -> 80 [style=dashed label="elaborated-enum-specifier"]
  981 -> 81 [style=dashed label="elaborated-type-specifier"]
  981 -> 83 [style=dashed label="enum-head"]
  981 -> 268 [style=dashed label="enum-key"]
  981 -> 85 [style=dashed label="enum-name"]
  981 -> 86 [style=dashed label="enum-specifier"]
  981 -> 269 [style=dashed label="explicit-specifier"]
  981 -> 92 [style=dashed label="function-specifier"]
  981 -> 100 [style=dashed label="namespace-alias"]
  981 -> 103 [style=dashed label="namespace-name"]
  981 -> 213 [style=dashed label="nested-name-specifier"]
  981 -> 480 [style=dashed label="parameter-declaration"]
  981 -> 110 [style=dashed label="placeholder-type-specifier"]
  981 -> 142 [style=dashed label="simple-template-id"]
  981 -> 116 [style=dashed label="simple-type-specifier"]
  981 -> 118 [style=dashed label="storage-class-specifier"]
  981 -> 481 [style=dashed label="template-head"]
  981 -> 216 [style=dashed label="template-name"]
  981 -> 1446 [style=dashed label="template-parameter"]
  981 -> 484 [style=dashed label="type-constraint"]
  981 -> 125 [style=dashed label="type-name"]
  981 -> 485 [style=dashed label="type-parameter"]
  981 -> 486 [style=dashed label="type-parameter-key"]
  981 -> 126 [style=dashed label="type-specifier"]
  981 -> 127 [style=dashed label="typedef-name"]
  981 -> 128 [style=dashed label="typename-specifier"]
  982 [label="State 982\n\l1059 template-head: \"template\" '<' template-parameter-list '>' •\l1060              | \"template\" '<' template-parameter-list '>' • requires-clause\l"]
  982 -> 297 [style=solid label="\"requires\""]
  982 -> 1447 [style=dashed label="requires-clause"]
  982 -> "982R1059" [style=solid]
 "982R1059" [label="R1059", fillcolor=3, shape=diamond, style=filled]
  983 [label="State 983\n\l1103 type-parameter: type-constraint IDENTIFIER •\l1106               | type-constraint IDENTIFIER • '=' type-id\l"]
  983 -> 1448 [style=solid label="'='"]
  983 -> "983R1103" [style=solid]
 "983R1103" [label="R1103", fillcolor=3, shape=diamond, style=filled]
  984 [label="State 984\n\l1105 type-parameter: type-constraint '=' • type-id\l"]
  984 -> 161 [style=solid label="IDENTIFIER"]
  984 -> 9 [style=solid label="\"::\""]
  984 -> 12 [style=solid label="\"class\""]
  984 -> 13 [style=solid label="\"struct\""]
  984 -> 14 [style=solid label="\"union\""]
  984 -> 18 [style=solid label="\"const\""]
  984 -> 19 [style=solid label="\"volatile\""]
  984 -> 26 [style=solid label="\"decltype\""]
  984 -> 136 [style=solid label="\"enum\""]
  984 -> 37 [style=solid label="\"auto\""]
  984 -> 38 [style=solid label="\"char\""]
  984 -> 39 [style=solid label="\"char8_t\""]
  984 -> 40 [style=solid label="\"char16_t\""]
  984 -> 41 [style=solid label="\"char32_t\""]
  984 -> 42 [style=solid label="\"wchar_t\""]
  984 -> 43 [style=solid label="\"bool\""]
  984 -> 44 [style=solid label="\"short\""]
  984 -> 45 [style=solid label="\"int\""]
  984 -> 46 [style=solid label="\"long\""]
  984 -> 47 [style=solid label="\"signed\""]
  984 -> 48 [style=solid label="\"unsigned\""]
  984 -> 49 [style=solid label="\"float\""]
  984 -> 50 [style=solid label="\"double\""]
  984 -> 51 [style=solid label="\"void\""]
  984 -> 56 [style=solid label="\"typename\""]
  984 -> 210 [style=dashed label="class-key"]
  984 -> 66 [style=dashed label="class-name"]
  984 -> 68 [style=dashed label="concept-name"]
  984 -> 70 [style=dashed label="cv-qualifier"]
  984 -> 77 [style=dashed label="decltype-specifier"]
  984 -> 80 [style=dashed label="elaborated-enum-specifier"]
  984 -> 81 [style=dashed label="elaborated-type-specifier"]
  984 -> 85 [style=dashed label="enum-name"]
  984 -> 100 [style=dashed label="namespace-alias"]
  984 -> 103 [style=dashed label="namespace-name"]
  984 -> 213 [style=dashed label="nested-name-specifier"]
  984 -> 110 [style=dashed label="placeholder-type-specifier"]
  984 -> 142 [style=dashed label="simple-template-id"]
  984 -> 116 [style=dashed label="simple-type-specifier"]
  984 -> 216 [style=dashed label="template-name"]
  984 -> 124 [style=dashed label="type-constraint"]
  984 -> 1449 [style=dashed label="type-id"]
  984 -> 125 [style=dashed label="type-name"]
  984 -> 217 [style=dashed label="type-specifier"]
  984 -> 452 [style=dashed label="type-specifier-seq"]
  984 -> 127 [style=dashed label="typedef-name"]
  984 -> 128 [style=dashed label="typename-specifier"]
  985 [label="State 985\n\l1102 type-parameter: type-constraint \"...\" •\l1104               | type-constraint \"...\" • IDENTIFIER\l"]
  985 -> 1450 [style=solid label="IDENTIFIER"]
  985 -> "985R1102" [style=solid]
 "985R1102" [label="R1102", fillcolor=3, shape=diamond, style=filled]
  986 [label="State 986\n\l1097 type-parameter: type-parameter-key IDENTIFIER •\l1100               | type-parameter-key IDENTIFIER • '=' type-id\l"]
  986 -> 1451 [style=solid label="'='"]
  986 -> "986R1097" [style=solid]
 "986R1097" [label="R1097", fillcolor=3, shape=diamond, style=filled]
  987 [label="State 987\n\l1099 type-parameter: type-parameter-key '=' • type-id\l"]
  987 -> 161 [style=solid label="IDENTIFIER"]
  987 -> 9 [style=solid label="\"::\""]
  987 -> 12 [style=solid label="\"class\""]
  987 -> 13 [style=solid label="\"struct\""]
  987 -> 14 [style=solid label="\"union\""]
  987 -> 18 [style=solid label="\"const\""]
  987 -> 19 [style=solid label="\"volatile\""]
  987 -> 26 [style=solid label="\"decltype\""]
  987 -> 136 [style=solid label="\"enum\""]
  987 -> 37 [style=solid label="\"auto\""]
  987 -> 38 [style=solid label="\"char\""]
  987 -> 39 [style=solid label="\"char8_t\""]
  987 -> 40 [style=solid label="\"char16_t\""]
  987 -> 41 [style=solid label="\"char32_t\""]
  987 -> 42 [style=solid label="\"wchar_t\""]
  987 -> 43 [style=solid label="\"bool\""]
  987 -> 44 [style=solid label="\"short\""]
  987 -> 45 [style=solid label="\"int\""]
  987 -> 46 [style=solid label="\"long\""]
  987 -> 47 [style=solid label="\"signed\""]
  987 -> 48 [style=solid label="\"unsigned\""]
  987 -> 49 [style=solid label="\"float\""]
  987 -> 50 [style=solid label="\"double\""]
  987 -> 51 [style=solid label="\"void\""]
  987 -> 56 [style=solid label="\"typename\""]
  987 -> 210 [style=dashed label="class-key"]
  987 -> 66 [style=dashed label="class-name"]
  987 -> 68 [style=dashed label="concept-name"]
  987 -> 70 [style=dashed label="cv-qualifier"]
  987 -> 77 [style=dashed label="decltype-specifier"]
  987 -> 80 [style=dashed label="elaborated-enum-specifier"]
  987 -> 81 [style=dashed label="elaborated-type-specifier"]
  987 -> 85 [style=dashed label="enum-name"]
  987 -> 100 [style=dashed label="namespace-alias"]
  987 -> 103 [style=dashed label="namespace-name"]
  987 -> 213 [style=dashed label="nested-name-specifier"]
  987 -> 110 [style=dashed label="placeholder-type-specifier"]
  987 -> 142 [style=dashed label="simple-template-id"]
  987 -> 116 [style=dashed label="simple-type-specifier"]
  987 -> 216 [style=dashed label="template-name"]
  987 -> 124 [style=dashed label="type-constraint"]
  987 -> 1452 [style=dashed label="type-id"]
  987 -> 125 [style=dashed label="type-name"]
  987 -> 217 [style=dashed label="type-specifier"]
  987 -> 452 [style=dashed label="type-specifier-seq"]
  987 -> 127 [style=dashed label="typedef-name"]
  987 -> 128 [style=dashed label="typename-specifier"]
  988 [label="State 988\n\l1096 type-parameter: type-parameter-key \"...\" •\l1098               | type-parameter-key \"...\" • IDENTIFIER\l"]
  988 -> 1453 [style=solid label="IDENTIFIER"]
  988 -> "988R1096" [style=solid]
 "988R1096" [label="R1096", fillcolor=3, shape=diamond, style=filled]
  989 [label="State 989\n\l765 overloadable-operator: \"delete\" '[' ']' •\l"]
  989 -> "989R765" [style=solid]
 "989R765" [label="R765", fillcolor=3, shape=diamond, style=filled]
  990 [label="State 990\n\l168 conditional-escape-sequence-char: NOT_AN_OCTAL_DIGIT_A_SIMPLE_ESCAPE_SEQUENCE_CHAR_OR_THE_CHARACTERS_U_U_OR_X •\l"]
  990 -> "990R168" [style=solid]
 "990R168" [label="R168", fillcolor=3, shape=diamond, style=filled]
  991 [label="State 991\n\l985 simple-escape-sequence-char: '\\'' •\l"]
  991 -> "991R985" [style=solid]
 "991R985" [label="R985", fillcolor=3, shape=diamond, style=filled]
  992 [label="State 992\n\l988 simple-escape-sequence-char: '\\\\' •\l"]
  992 -> "992R988" [style=solid]
 "992R988" [label="R988", fillcolor=3, shape=diamond, style=filled]
  993 [label="State 993\n\l987 simple-escape-sequence-char: '?' •\l"]
  993 -> "993R987" [style=solid]
 "993R987" [label="R987", fillcolor=3, shape=diamond, style=filled]
  994 [label="State 994\n\l991 simple-escape-sequence-char: 'f' •\l"]
  994 -> "994R991" [style=solid]
 "994R991" [label="R991", fillcolor=3, shape=diamond, style=filled]
  995 [label="State 995\n\l986 simple-escape-sequence-char: '\"' •\l"]
  995 -> "995R986" [style=solid]
 "995R986" [label="R986", fillcolor=3, shape=diamond, style=filled]
  996 [label="State 996\n\l989 simple-escape-sequence-char: 'a' •\l"]
  996 -> "996R989" [style=solid]
 "996R989" [label="R989", fillcolor=3, shape=diamond, style=filled]
  997 [label="State 997\n\l990 simple-escape-sequence-char: 'b' •\l"]
  997 -> "997R990" [style=solid]
 "997R990" [label="R990", fillcolor=3, shape=diamond, style=filled]
  998 [label="State 998\n\l992 simple-escape-sequence-char: 'n' •\l"]
  998 -> "998R992" [style=solid]
 "998R992" [label="R992", fillcolor=3, shape=diamond, style=filled]
  999 [label="State 999\n\l993 simple-escape-sequence-char: 'r' •\l"]
  999 -> "999R993" [style=solid]
 "999R993" [label="R993", fillcolor=3, shape=diamond, style=filled]
  1000 [label="State 1000\n\l994 simple-escape-sequence-char: 't' •\l"]
  1000 -> "1000R994" [style=solid]
 "1000R994" [label="R994", fillcolor=3, shape=diamond, style=filled]
  1001 [label="State 1001\n\l995 simple-escape-sequence-char: 'v' •\l"]
  1001 -> "1001R995" [style=solid]
 "1001R995" [label="R995", fillcolor=3, shape=diamond, style=filled]
  1002 [label="State 1002\n\l167 conditional-escape-sequence: '\\\\' conditional-escape-sequence-char •\l"]
  1002 -> "1002R167" [style=solid]
 "1002R167" [label="R167", fillcolor=3, shape=diamond, style=filled]
  1003 [label="State 1003\n\l749 octal-escape-sequence: '\\\\' octal-digit •\l750                      | '\\\\' octal-digit • octal-digit\l751                      | '\\\\' octal-digit • octal-digit octal-digit\l"]
  1003 -> 912 [style=solid label="'0'"]
  1003 -> 913 [style=solid label="'1'"]
  1003 -> 915 [style=solid label="'2'"]
  1003 -> 916 [style=solid label="'3'"]
  1003 -> 917 [style=solid label="'4'"]
  1003 -> 918 [style=solid label="'5'"]
  1003 -> 919 [style=solid label="'6'"]
  1003 -> 920 [style=solid label="'7'"]
  1003 -> 1454 [style=dashed label="octal-digit"]
  1003 -> "1003R749" [style=solid]
 "1003R749" [label="R749", fillcolor=3, shape=diamond, style=filled]
  1004 [label="State 1004\n\l984 simple-escape-sequence: '\\\\' simple-escape-sequence-char •\l"]
  1004 -> "1004R984" [style=solid]
 "1004R984" [label="R984", fillcolor=3, shape=diamond, style=filled]
  1005 [label="State 1005\n\l451 hexadecimal-escape-sequence: \"\\\\x\" hexadecimal-digit •\l"]
  1005 -> "1005R451" [style=solid]
 "1005R451" [label="R451", fillcolor=3, shape=diamond, style=filled]
  1006 [label="State 1006\n\l1148 universal-character-name: \"\\\\u\" hex-quad •\l"]
  1006 -> "1006R1148" [style=solid]
 "1006R1148" [label="R1148", fillcolor=3, shape=diamond, style=filled]
  1007 [label="State 1007\n\l425 hex-quad: hexadecimal-digit • hexadecimal-digit hexadecimal-digit hexadecimal-digit\l"]
  1007 -> 870 [style=solid label="'0'"]
  1007 -> 871 [style=solid label="'1'"]
  1007 -> 873 [style=solid label="'2'"]
  1007 -> 874 [style=solid label="'3'"]
  1007 -> 875 [style=solid label="'4'"]
  1007 -> 876 [style=solid label="'5'"]
  1007 -> 877 [style=solid label="'6'"]
  1007 -> 878 [style=solid label="'7'"]
  1007 -> 879 [style=solid label="'8'"]
  1007 -> 880 [style=solid label="'9'"]
  1007 -> 881 [style=solid label="'e'"]
  1007 -> 882 [style=solid label="'E'"]
  1007 -> 883 [style=solid label="'f'"]
  1007 -> 884 [style=solid label="'F'"]
  1007 -> 885 [style=solid label="'a'"]
  1007 -> 886 [style=solid label="'b'"]
  1007 -> 887 [style=solid label="'c'"]
  1007 -> 888 [style=solid label="'d'"]
  1007 -> 889 [style=solid label="'A'"]
  1007 -> 890 [style=solid label="'B'"]
  1007 -> 891 [style=solid label="'C'"]
  1007 -> 892 [style=solid label="'D'"]
  1007 -> 1455 [style=dashed label="hexadecimal-digit"]
  1008 [label="State 1008\n\l1149 universal-character-name: \"\\\\U\" hex-quad • hex-quad\l"]
  1008 -> 870 [style=solid label="'0'"]
  1008 -> 871 [style=solid label="'1'"]
  1008 -> 873 [style=solid label="'2'"]
  1008 -> 874 [style=solid label="'3'"]
  1008 -> 875 [style=solid label="'4'"]
  1008 -> 876 [style=solid label="'5'"]
  1008 -> 877 [style=solid label="'6'"]
  1008 -> 878 [style=solid label="'7'"]
  1008 -> 879 [style=solid label="'8'"]
  1008 -> 880 [style=solid label="'9'"]
  1008 -> 881 [style=solid label="'e'"]
  1008 -> 882 [style=solid label="'E'"]
  1008 -> 883 [style=solid label="'f'"]
  1008 -> 884 [style=solid label="'F'"]
  1008 -> 885 [style=solid label="'a'"]
  1008 -> 886 [style=solid label="'b'"]
  1008 -> 887 [style=solid label="'c'"]
  1008 -> 888 [style=solid label="'d'"]
  1008 -> 889 [style=solid label="'A'"]
  1008 -> 890 [style=solid label="'B'"]
  1008 -> 891 [style=solid label="'C'"]
  1008 -> 892 [style=solid label="'D'"]
  1008 -> 1456 [style=dashed label="hex-quad"]
  1008 -> 1007 [style=dashed label="hexadecimal-digit"]
  1009 [label="State 1009\n\l452 hexadecimal-escape-sequence: hexadecimal-escape-sequence hexadecimal-digit •\l"]
  1009 -> "1009R452" [style=solid]
 "1009R452" [label="R452", fillcolor=3, shape=diamond, style=filled]
  1010 [label="State 1010\n\l1047 string-literal: '\"' s-char-sequence '\"' •\l"]
  1010 -> "1010R1047" [style=solid]
 "1010R1047" [label="R1047", fillcolor=3, shape=diamond, style=filled]
  1011 [label="State 1011\n\l951 s-char-sequence: s-char-sequence s-char •\l"]
  1011 -> "1011R951" [style=solid]
 "1011R951" [label="R951", fillcolor=3, shape=diamond, style=filled]
  1012 [label="State 1012\n\l764 overloadable-operator: \"new\" '[' ']' •\l"]
  1012 -> "1012R764" [style=solid]
 "1012R764" [label="R764", fillcolor=3, shape=diamond, style=filled]
  1013 [label="State 1013\n\l189 d-char: EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE •\l"]
  1013 -> "1013R189" [style=solid]
 "1013R189" [label="R189", fillcolor=3, shape=diamond, style=filled]
  1014 [label="State 1014\n\l920 raw-string: '\"' '(' • ')' '\"'\l922           | '\"' '(' • r-char-sequence ')' '\"'\l924           | '\"' '(' • ')' d-char-sequence '\"'\l926           | '\"' '(' • r-char-sequence ')' d-char-sequence '\"'\l"]
  1014 -> 1457 [style=solid label="EXCEPT_RIGHT_PARENTHESIS_FOLLOWED_BY_THE_INITIAL_D_CHAR_SEQUENCE_FOLLOWED_BY_QUOTATION_MARK"]
  1014 -> 1458 [style=solid label="')'"]
  1014 -> 1459 [style=dashed label="r-char"]
  1014 -> 1460 [style=dashed label="r-char-sequence"]
  1015 [label="State 1015\n\l190 d-char-sequence: d-char •\l"]
  1015 -> "1015R190" [style=solid]
 "1015R190" [label="R190", fillcolor=3, shape=diamond, style=filled]
  1016 [label="State 1016\n\l191 d-char-sequence: d-char-sequence • d-char\l921 raw-string: '\"' d-char-sequence • '(' ')' '\"'\l923           | '\"' d-char-sequence • '(' r-char-sequence ')' '\"'\l925           | '\"' d-char-sequence • '(' ')' d-char-sequence '\"'\l927           | '\"' d-char-sequence • '(' r-char-sequence ')' d-char-sequence '\"'\l"]
  1016 -> 1013 [style=solid label="EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE"]
  1016 -> 1461 [style=solid label="'('"]
  1016 -> 1462 [style=dashed label="d-char"]
  1017 [label="State 1017\n\l270 elaborated-type-specifier: class-key attribute-specifier-seq nested-name-specifier • IDENTIFIER\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l"]
  1017 -> 1463 [style=solid label="IDENTIFIER"]
  1017 -> 355 [style=solid label="\"template\""]
  1017 -> 539 [style=dashed label="simple-template-id"]
  1017 -> 143 [style=dashed label="template-name"]
  1018 [label="State 1018\n\l269 elaborated-type-specifier: class-key nested-name-specifier IDENTIFIER •\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l"]
  1018 -> 726 [style=solid label="\"::\""]
  1018 -> "1018R269d" [label="[\"::\"]", style=solid]
 "1018R269d" [label="R269", fillcolor=5, shape=diamond, style=filled]
  1018 -> "1018R269" [style=solid]
 "1018R269" [label="R269", fillcolor=3, shape=diamond, style=filled]
  1018 -> "1018R1066d" [label="['<']", style=solid]
 "1018R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  1019 [label="State 1019\n\l272 elaborated-type-specifier: class-key nested-name-specifier simple-template-id •\l664 nested-name-specifier: nested-name-specifier simple-template-id • \"::\"\l"]
  1019 -> 733 [style=solid label="\"::\""]
  1019 -> "1019R272d" [label="[\"::\"]", style=solid]
 "1019R272d" [label="R272", fillcolor=5, shape=diamond, style=filled]
  1019 -> "1019R272" [style=solid]
 "1019R272" [label="R272", fillcolor=3, shape=diamond, style=filled]
  1020 [label="State 1020\n\l1044 string-literal: encoding-prefix '\"' '\"' •\l"]
  1020 -> "1020R1044" [style=solid]
 "1020R1044" [label="R1044", fillcolor=3, shape=diamond, style=filled]
  1021 [label="State 1021\n\l951 s-char-sequence: s-char-sequence • s-char\l1046 string-literal: encoding-prefix '\"' s-char-sequence • '\"'\l"]
  1021 -> 490 [style=solid label="EXCEPT_THE_QUOTATION_MARK_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER"]
  1021 -> 491 [style=solid label="'\\\\'"]
  1021 -> 1464 [style=solid label="'\"'"]
  1021 -> 493 [style=solid label="\"\\\\x\""]
  1021 -> 494 [style=solid label="\"\\\\u\""]
  1021 -> 495 [style=solid label="\"\\\\U\""]
  1021 -> 496 [style=dashed label="basic-s-char"]
  1021 -> 497 [style=dashed label="conditional-escape-sequence"]
  1021 -> 498 [style=dashed label="escape-sequence"]
  1021 -> 499 [style=dashed label="hexadecimal-escape-sequence"]
  1021 -> 500 [style=dashed label="numeric-escape-sequence"]
  1021 -> 501 [style=dashed label="octal-escape-sequence"]
  1021 -> 1011 [style=dashed label="s-char"]
  1021 -> 504 [style=dashed label="simple-escape-sequence"]
  1021 -> 505 [style=dashed label="universal-character-name"]
  1022 [label="State 1022\n\l1048 string-literal: encoding-prefix 'R' raw-string •\l"]
  1022 -> "1022R1048" [style=solid]
 "1022R1048" [label="R1048", fillcolor=3, shape=diamond, style=filled]
  1023 [label="State 1023\n\l665 nested-name-specifier: nested-name-specifier \"template\" simple-template-id • \"::\"\l1001 simple-type-specifier: nested-name-specifier \"template\" simple-template-id •\l"]
  1023 -> 1217 [style=solid label="\"::\""]
  1023 -> "1023R1001d" [label="[\"::\"]", style=solid]
 "1023R1001d" [label="R1001", fillcolor=5, shape=diamond, style=filled]
  1023 -> "1023R1001" [style=solid]
 "1023R1001" [label="R1001", fillcolor=3, shape=diamond, style=filled]
  1024 [label="State 1024\n\l760 operator-function-id: \"operator\" overloadable-operator '<' '>' •\l"]
  1024 -> "1024R760" [style=solid]
 "1024R760" [label="R760", fillcolor=3, shape=diamond, style=filled]
  1025 [label="State 1025\n\l761 operator-function-id: \"operator\" overloadable-operator '<' template-argument-list • '>'\l1055 template-argument-list: template-argument-list • ',' template-argument\l1056                       | template-argument-list • ',' template-argument \"...\"\l"]
  1025 -> 1136 [style=solid label="','"]
  1025 -> 1465 [style=solid label="'>'"]
  1026 [label="State 1026\n\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l"]
  1026 -> 726 [style=solid label="\"::\""]
  1026 -> "1026R1066" [style=solid]
 "1026R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  1027 [label="State 1027\n\l178 conversion-declarator: ptr-operator conversion-declarator •\l"]
  1027 -> "1027R178" [style=solid]
 "1027R178" [label="R178", fillcolor=3, shape=diamond, style=filled]
  1028 [label="State 1028\n\l647 named-namespace-definition: \"inline\" \"namespace\" IDENTIFIER '{' • namespace-body '}'\l"]
  1028 -> 1 [style=solid label="IDENTIFIER"]
  1028 -> 2 [style=solid label="\"using\""]
  1028 -> 3 [style=solid label="';'"]
  1028 -> 4 [style=solid label="\"alignas\""]
  1028 -> 5 [style=solid label="'('"]
  1028 -> 6 [style=solid label="\"...\""]
  1028 -> 7 [style=solid label="'&'"]
  1028 -> 8 [style=solid label="\"asm\""]
  1028 -> 9 [style=solid label="\"::\""]
  1028 -> 10 [style=solid label="'['"]
  1028 -> 11 [style=solid label="\"virtual\""]
  1028 -> 12 [style=solid label="\"class\""]
  1028 -> 13 [style=solid label="\"struct\""]
  1028 -> 14 [style=solid label="\"union\""]
  1028 -> 15 [style=solid label="\"template\""]
  1028 -> 16 [style=solid label="\"&&\""]
  1028 -> 17 [style=solid label="\"operator\""]
  1028 -> 18 [style=solid label="\"const\""]
  1028 -> 19 [style=solid label="\"volatile\""]
  1028 -> 20 [style=solid label="\"friend\""]
  1028 -> 21 [style=solid label="\"typedef\""]
  1028 -> 22 [style=solid label="\"constexpr\""]
  1028 -> 23 [style=solid label="\"consteval\""]
  1028 -> 24 [style=solid label="\"constinit\""]
  1028 -> 25 [style=solid label="\"inline\""]
  1028 -> 26 [style=solid label="\"decltype\""]
  1028 -> 27 [style=solid label="\"enum\""]
  1028 -> 28 [style=solid label="\"extern\""]
  1028 -> 29 [style=solid label="\"explicit\""]
  1028 -> 30 [style=solid label="\"export\""]
  1028 -> 158 [style=solid label="\"export-keyword\""]
  1028 -> 32 [style=solid label="'*'"]
  1028 -> 34 [style=solid label="\"import-keyword\""]
  1028 -> 35 [style=solid label="\"namespace\""]
  1028 -> 36 [style=solid label="'~'"]
  1028 -> 37 [style=solid label="\"auto\""]
  1028 -> 38 [style=solid label="\"char\""]
  1028 -> 39 [style=solid label="\"char8_t\""]
  1028 -> 40 [style=solid label="\"char16_t\""]
  1028 -> 41 [style=solid label="\"char32_t\""]
  1028 -> 42 [style=solid label="\"wchar_t\""]
  1028 -> 43 [style=solid label="\"bool\""]
  1028 -> 44 [style=solid label="\"short\""]
  1028 -> 45 [style=solid label="\"int\""]
  1028 -> 46 [style=solid label="\"long\""]
  1028 -> 47 [style=solid label="\"signed\""]
  1028 -> 48 [style=solid label="\"unsigned\""]
  1028 -> 49 [style=solid label="\"float\""]
  1028 -> 50 [style=solid label="\"double\""]
  1028 -> 51 [style=solid label="\"void\""]
  1028 -> 52 [style=solid label="\"static_assert\""]
  1028 -> 53 [style=solid label="\"static\""]
  1028 -> 54 [style=solid label="\"thread_local\""]
  1028 -> 55 [style=solid label="\"mutable\""]
  1028 -> 56 [style=solid label="\"typename\""]
  1028 -> 57 [style=dashed label="alias-declaration"]
  1028 -> 58 [style=dashed label="alignment-specifier"]
  1028 -> 59 [style=dashed label="asm-declaration"]
  1028 -> 60 [style=dashed label="attribute-declaration"]
  1028 -> 61 [style=dashed label="attribute-specifier"]
  1028 -> 62 [style=dashed label="attribute-specifier-seq"]
  1028 -> 63 [style=dashed label="block-declaration"]
  1028 -> 64 [style=dashed label="class-head"]
  1028 -> 65 [style=dashed label="class-key"]
  1028 -> 66 [style=dashed label="class-name"]
  1028 -> 67 [style=dashed label="class-specifier"]
  1028 -> 68 [style=dashed label="concept-name"]
  1028 -> 69 [style=dashed label="conversion-function-id"]
  1028 -> 70 [style=dashed label="cv-qualifier"]
  1028 -> 71 [style=dashed label="decl-specifier"]
  1028 -> 72 [style=dashed label="decl-specifier-seq"]
  1028 -> 73 [style=dashed label="declaration"]
  1028 -> 570 [style=dashed label="declaration-seq"]
  1028 -> 75 [style=dashed label="declarator"]
  1028 -> 76 [style=dashed label="declarator-id"]
  1028 -> 77 [style=dashed label="decltype-specifier"]
  1028 -> 78 [style=dashed label="deduction-guide"]
  1028 -> 79 [style=dashed label="defining-type-specifier"]
  1028 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1028 -> 81 [style=dashed label="elaborated-type-specifier"]
  1028 -> 82 [style=dashed label="empty-declaration"]
  1028 -> 83 [style=dashed label="enum-head"]
  1028 -> 84 [style=dashed label="enum-key"]
  1028 -> 85 [style=dashed label="enum-name"]
  1028 -> 86 [style=dashed label="enum-specifier"]
  1028 -> 87 [style=dashed label="explicit-instantiation"]
  1028 -> 88 [style=dashed label="explicit-specialization"]
  1028 -> 89 [style=dashed label="explicit-specifier"]
  1028 -> 90 [style=dashed label="export-declaration"]
  1028 -> 91 [style=dashed label="function-definition"]
  1028 -> 92 [style=dashed label="function-specifier"]
  1028 -> 94 [style=dashed label="id-expression"]
  1028 -> 95 [style=dashed label="linkage-specification"]
  1028 -> 96 [style=dashed label="literal-operator-id"]
  1028 -> 98 [style=dashed label="module-import-declaration"]
  1028 -> 99 [style=dashed label="named-namespace-definition"]
  1028 -> 100 [style=dashed label="namespace-alias"]
  1028 -> 101 [style=dashed label="namespace-alias-definition"]
  1028 -> 1466 [style=dashed label="namespace-body"]
  1028 -> 102 [style=dashed label="namespace-definition"]
  1028 -> 103 [style=dashed label="namespace-name"]
  1028 -> 104 [style=dashed label="nested-name-specifier"]
  1028 -> 105 [style=dashed label="nested-namespace-definition"]
  1028 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  1028 -> 107 [style=dashed label="noptr-declarator"]
  1028 -> 108 [style=dashed label="opaque-enum-declaration"]
  1028 -> 109 [style=dashed label="operator-function-id"]
  1028 -> 110 [style=dashed label="placeholder-type-specifier"]
  1028 -> 111 [style=dashed label="ptr-declarator"]
  1028 -> 112 [style=dashed label="ptr-operator"]
  1028 -> 113 [style=dashed label="qualified-id"]
  1028 -> 114 [style=dashed label="simple-declaration"]
  1028 -> 115 [style=dashed label="simple-template-id"]
  1028 -> 116 [style=dashed label="simple-type-specifier"]
  1028 -> 117 [style=dashed label="static_assert-declaration"]
  1028 -> 118 [style=dashed label="storage-class-specifier"]
  1028 -> 119 [style=dashed label="template-declaration"]
  1028 -> 120 [style=dashed label="template-head"]
  1028 -> 121 [style=dashed label="template-id"]
  1028 -> 122 [style=dashed label="template-name"]
  1028 -> 124 [style=dashed label="type-constraint"]
  1028 -> 125 [style=dashed label="type-name"]
  1028 -> 126 [style=dashed label="type-specifier"]
  1028 -> 127 [style=dashed label="typedef-name"]
  1028 -> 128 [style=dashed label="typename-specifier"]
  1028 -> 129 [style=dashed label="unnamed-namespace-definition"]
  1028 -> 130 [style=dashed label="unqualified-id"]
  1028 -> 131 [style=dashed label="using-declaration"]
  1028 -> 132 [style=dashed label="using-directive"]
  1028 -> 133 [style=dashed label="using-enum-declaration"]
  1029 [label="State 1029\n\l1150 unnamed-namespace-definition: \"inline\" \"namespace\" '{' namespace-body • '}'\l"]
  1029 -> 1467 [style=solid label="'}'"]
  1030 [label="State 1030\n\l649 named-namespace-definition: \"inline\" \"namespace\" attribute-specifier-seq IDENTIFIER • '{' namespace-body '}'\l"]
  1030 -> 1468 [style=solid label="'{'"]
  1031 [label="State 1031\n\l1152 unnamed-namespace-definition: \"inline\" \"namespace\" attribute-specifier-seq '{' • namespace-body '}'\l"]
  1031 -> 1 [style=solid label="IDENTIFIER"]
  1031 -> 2 [style=solid label="\"using\""]
  1031 -> 3 [style=solid label="';'"]
  1031 -> 4 [style=solid label="\"alignas\""]
  1031 -> 5 [style=solid label="'('"]
  1031 -> 6 [style=solid label="\"...\""]
  1031 -> 7 [style=solid label="'&'"]
  1031 -> 8 [style=solid label="\"asm\""]
  1031 -> 9 [style=solid label="\"::\""]
  1031 -> 10 [style=solid label="'['"]
  1031 -> 11 [style=solid label="\"virtual\""]
  1031 -> 12 [style=solid label="\"class\""]
  1031 -> 13 [style=solid label="\"struct\""]
  1031 -> 14 [style=solid label="\"union\""]
  1031 -> 15 [style=solid label="\"template\""]
  1031 -> 16 [style=solid label="\"&&\""]
  1031 -> 17 [style=solid label="\"operator\""]
  1031 -> 18 [style=solid label="\"const\""]
  1031 -> 19 [style=solid label="\"volatile\""]
  1031 -> 20 [style=solid label="\"friend\""]
  1031 -> 21 [style=solid label="\"typedef\""]
  1031 -> 22 [style=solid label="\"constexpr\""]
  1031 -> 23 [style=solid label="\"consteval\""]
  1031 -> 24 [style=solid label="\"constinit\""]
  1031 -> 25 [style=solid label="\"inline\""]
  1031 -> 26 [style=solid label="\"decltype\""]
  1031 -> 27 [style=solid label="\"enum\""]
  1031 -> 28 [style=solid label="\"extern\""]
  1031 -> 29 [style=solid label="\"explicit\""]
  1031 -> 30 [style=solid label="\"export\""]
  1031 -> 158 [style=solid label="\"export-keyword\""]
  1031 -> 32 [style=solid label="'*'"]
  1031 -> 34 [style=solid label="\"import-keyword\""]
  1031 -> 35 [style=solid label="\"namespace\""]
  1031 -> 36 [style=solid label="'~'"]
  1031 -> 37 [style=solid label="\"auto\""]
  1031 -> 38 [style=solid label="\"char\""]
  1031 -> 39 [style=solid label="\"char8_t\""]
  1031 -> 40 [style=solid label="\"char16_t\""]
  1031 -> 41 [style=solid label="\"char32_t\""]
  1031 -> 42 [style=solid label="\"wchar_t\""]
  1031 -> 43 [style=solid label="\"bool\""]
  1031 -> 44 [style=solid label="\"short\""]
  1031 -> 45 [style=solid label="\"int\""]
  1031 -> 46 [style=solid label="\"long\""]
  1031 -> 47 [style=solid label="\"signed\""]
  1031 -> 48 [style=solid label="\"unsigned\""]
  1031 -> 49 [style=solid label="\"float\""]
  1031 -> 50 [style=solid label="\"double\""]
  1031 -> 51 [style=solid label="\"void\""]
  1031 -> 52 [style=solid label="\"static_assert\""]
  1031 -> 53 [style=solid label="\"static\""]
  1031 -> 54 [style=solid label="\"thread_local\""]
  1031 -> 55 [style=solid label="\"mutable\""]
  1031 -> 56 [style=solid label="\"typename\""]
  1031 -> 57 [style=dashed label="alias-declaration"]
  1031 -> 58 [style=dashed label="alignment-specifier"]
  1031 -> 59 [style=dashed label="asm-declaration"]
  1031 -> 60 [style=dashed label="attribute-declaration"]
  1031 -> 61 [style=dashed label="attribute-specifier"]
  1031 -> 62 [style=dashed label="attribute-specifier-seq"]
  1031 -> 63 [style=dashed label="block-declaration"]
  1031 -> 64 [style=dashed label="class-head"]
  1031 -> 65 [style=dashed label="class-key"]
  1031 -> 66 [style=dashed label="class-name"]
  1031 -> 67 [style=dashed label="class-specifier"]
  1031 -> 68 [style=dashed label="concept-name"]
  1031 -> 69 [style=dashed label="conversion-function-id"]
  1031 -> 70 [style=dashed label="cv-qualifier"]
  1031 -> 71 [style=dashed label="decl-specifier"]
  1031 -> 72 [style=dashed label="decl-specifier-seq"]
  1031 -> 73 [style=dashed label="declaration"]
  1031 -> 570 [style=dashed label="declaration-seq"]
  1031 -> 75 [style=dashed label="declarator"]
  1031 -> 76 [style=dashed label="declarator-id"]
  1031 -> 77 [style=dashed label="decltype-specifier"]
  1031 -> 78 [style=dashed label="deduction-guide"]
  1031 -> 79 [style=dashed label="defining-type-specifier"]
  1031 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1031 -> 81 [style=dashed label="elaborated-type-specifier"]
  1031 -> 82 [style=dashed label="empty-declaration"]
  1031 -> 83 [style=dashed label="enum-head"]
  1031 -> 84 [style=dashed label="enum-key"]
  1031 -> 85 [style=dashed label="enum-name"]
  1031 -> 86 [style=dashed label="enum-specifier"]
  1031 -> 87 [style=dashed label="explicit-instantiation"]
  1031 -> 88 [style=dashed label="explicit-specialization"]
  1031 -> 89 [style=dashed label="explicit-specifier"]
  1031 -> 90 [style=dashed label="export-declaration"]
  1031 -> 91 [style=dashed label="function-definition"]
  1031 -> 92 [style=dashed label="function-specifier"]
  1031 -> 94 [style=dashed label="id-expression"]
  1031 -> 95 [style=dashed label="linkage-specification"]
  1031 -> 96 [style=dashed label="literal-operator-id"]
  1031 -> 98 [style=dashed label="module-import-declaration"]
  1031 -> 99 [style=dashed label="named-namespace-definition"]
  1031 -> 100 [style=dashed label="namespace-alias"]
  1031 -> 101 [style=dashed label="namespace-alias-definition"]
  1031 -> 1469 [style=dashed label="namespace-body"]
  1031 -> 102 [style=dashed label="namespace-definition"]
  1031 -> 103 [style=dashed label="namespace-name"]
  1031 -> 104 [style=dashed label="nested-name-specifier"]
  1031 -> 105 [style=dashed label="nested-namespace-definition"]
  1031 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  1031 -> 107 [style=dashed label="noptr-declarator"]
  1031 -> 108 [style=dashed label="opaque-enum-declaration"]
  1031 -> 109 [style=dashed label="operator-function-id"]
  1031 -> 110 [style=dashed label="placeholder-type-specifier"]
  1031 -> 111 [style=dashed label="ptr-declarator"]
  1031 -> 112 [style=dashed label="ptr-operator"]
  1031 -> 113 [style=dashed label="qualified-id"]
  1031 -> 114 [style=dashed label="simple-declaration"]
  1031 -> 115 [style=dashed label="simple-template-id"]
  1031 -> 116 [style=dashed label="simple-type-specifier"]
  1031 -> 117 [style=dashed label="static_assert-declaration"]
  1031 -> 118 [style=dashed label="storage-class-specifier"]
  1031 -> 119 [style=dashed label="template-declaration"]
  1031 -> 120 [style=dashed label="template-head"]
  1031 -> 121 [style=dashed label="template-id"]
  1031 -> 122 [style=dashed label="template-name"]
  1031 -> 124 [style=dashed label="type-constraint"]
  1031 -> 125 [style=dashed label="type-name"]
  1031 -> 126 [style=dashed label="type-specifier"]
  1031 -> 127 [style=dashed label="typedef-name"]
  1031 -> 128 [style=dashed label="typename-specifier"]
  1031 -> 129 [style=dashed label="unnamed-namespace-definition"]
  1031 -> 130 [style=dashed label="unqualified-id"]
  1031 -> 131 [style=dashed label="using-declaration"]
  1031 -> 132 [style=dashed label="using-directive"]
  1031 -> 133 [style=dashed label="using-enum-declaration"]
  1032 [label="State 1032\n\l855 placeholder-type-specifier: \"decltype\" '(' \"auto\" ')' •\l"]
  1032 -> "1032R855" [style=solid]
 "1032R855" [label="R855", fillcolor=3, shape=diamond, style=filled]
  1033 [label="State 1033\n\l1072 throw-expression: \"throw\" assignment-expression •\l"]
  1033 -> "1033R1072" [style=solid]
 "1033R1072" [label="R1072", fillcolor=3, shape=diamond, style=filled]
  1034 [label="State 1034\n\l1194 yield-expression: \"co_yield\" assignment-expression •\l"]
  1034 -> "1034R1194" [style=solid]
 "1034R1194" [label="R1194", fillcolor=3, shape=diamond, style=filled]
  1035 [label="State 1035\n\l1195 yield-expression: \"co_yield\" braced-init-list •\l"]
  1035 -> "1035R1195" [style=solid]
 "1035R1195" [label="R1195", fillcolor=3, shape=diamond, style=filled]
  1036 [label="State 1036\n\l233 decltype-specifier: \"decltype\" '(' expression ')' •\l"]
  1036 -> "1036R233" [style=solid]
 "1036R233" [label="R233", fillcolor=3, shape=diamond, style=filled]
  1037 [label="State 1037\n\l338 expression: expression ',' • assignment-expression\l"]
  1037 -> 1 [style=solid label="IDENTIFIER"]
  1037 -> 361 [style=solid label="'+'"]
  1037 -> 362 [style=solid label="'-'"]
  1037 -> 363 [style=solid label="'('"]
  1037 -> 364 [style=solid label="'&'"]
  1037 -> 365 [style=solid label="\"::\""]
  1037 -> 366 [style=solid label="'['"]
  1037 -> 367 [style=solid label="\"co_await\""]
  1037 -> 368 [style=solid label="'0'"]
  1037 -> 369 [style=solid label="'1'"]
  1037 -> 370 [style=solid label="\"0b\""]
  1037 -> 371 [style=solid label="\"0B\""]
  1037 -> 372 [style=solid label="'\\''"]
  1037 -> 373 [style=solid label="\"false\""]
  1037 -> 374 [style=solid label="\"true\""]
  1037 -> 375 [style=solid label="\"noexcept\""]
  1037 -> 17 [style=solid label="\"operator\""]
  1037 -> 26 [style=solid label="\"decltype\""]
  1037 -> 376 [style=solid label="\"delete\""]
  1037 -> 377 [style=solid label="'.'"]
  1037 -> 378 [style=solid label="'2'"]
  1037 -> 379 [style=solid label="'3'"]
  1037 -> 380 [style=solid label="'4'"]
  1037 -> 381 [style=solid label="'5'"]
  1037 -> 382 [style=solid label="'6'"]
  1037 -> 383 [style=solid label="'7'"]
  1037 -> 384 [style=solid label="'8'"]
  1037 -> 385 [style=solid label="'9'"]
  1037 -> 185 [style=solid label="\"u8\""]
  1037 -> 186 [style=solid label="'u'"]
  1037 -> 187 [style=solid label="'U'"]
  1037 -> 188 [style=solid label="'L'"]
  1037 -> 386 [style=solid label="'*'"]
  1037 -> 203 [style=solid label="'\"'"]
  1037 -> 387 [style=solid label="\"0x\""]
  1037 -> 388 [style=solid label="\"0X\""]
  1037 -> 389 [style=solid label="\"requires\""]
  1037 -> 390 [style=solid label="\"new\""]
  1037 -> 391 [style=solid label="'~'"]
  1037 -> 392 [style=solid label="'!'"]
  1037 -> 393 [style=solid label="\"++\""]
  1037 -> 394 [style=solid label="\"--\""]
  1037 -> 395 [style=solid label="\"this\""]
  1037 -> 37 [style=solid label="\"auto\""]
  1037 -> 396 [style=solid label="\"nullptr\""]
  1037 -> 397 [style=solid label="\"dynamic_cast\""]
  1037 -> 398 [style=solid label="\"static_cast\""]
  1037 -> 399 [style=solid label="\"reinterpret_cast\""]
  1037 -> 400 [style=solid label="\"const_cast\""]
  1037 -> 401 [style=solid label="\"typeid\""]
  1037 -> 38 [style=solid label="\"char\""]
  1037 -> 39 [style=solid label="\"char8_t\""]
  1037 -> 40 [style=solid label="\"char16_t\""]
  1037 -> 41 [style=solid label="\"char32_t\""]
  1037 -> 42 [style=solid label="\"wchar_t\""]
  1037 -> 43 [style=solid label="\"bool\""]
  1037 -> 44 [style=solid label="\"short\""]
  1037 -> 45 [style=solid label="\"int\""]
  1037 -> 46 [style=solid label="\"long\""]
  1037 -> 47 [style=solid label="\"signed\""]
  1037 -> 48 [style=solid label="\"unsigned\""]
  1037 -> 49 [style=solid label="\"float\""]
  1037 -> 50 [style=solid label="\"double\""]
  1037 -> 51 [style=solid label="\"void\""]
  1037 -> 209 [style=solid label="'R'"]
  1037 -> 528 [style=solid label="\"throw\""]
  1037 -> 56 [style=solid label="\"typename\""]
  1037 -> 402 [style=solid label="\"sizeof\""]
  1037 -> 403 [style=solid label="\"alignof\""]
  1037 -> 529 [style=solid label="\"co_yield\""]
  1037 -> 404 [style=dashed label="additive-expression"]
  1037 -> 405 [style=dashed label="and-expression"]
  1037 -> 1470 [style=dashed label="assignment-expression"]
  1037 -> 406 [style=dashed label="await-expression"]
  1037 -> 407 [style=dashed label="binary-literal"]
  1037 -> 408 [style=dashed label="boolean-literal"]
  1037 -> 409 [style=dashed label="cast-expression"]
  1037 -> 410 [style=dashed label="character-literal"]
  1037 -> 66 [style=dashed label="class-name"]
  1037 -> 411 [style=dashed label="compare-expression"]
  1037 -> 68 [style=dashed label="concept-name"]
  1037 -> 531 [style=dashed label="conditional-expression"]
  1037 -> 69 [style=dashed label="conversion-function-id"]
  1037 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1037 -> 415 [style=dashed label="decimal-literal"]
  1037 -> 77 [style=dashed label="decltype-specifier"]
  1037 -> 416 [style=dashed label="delete-expression"]
  1037 -> 417 [style=dashed label="digit"]
  1037 -> 418 [style=dashed label="digit-sequence"]
  1037 -> 419 [style=dashed label="encoding-prefix"]
  1037 -> 85 [style=dashed label="enum-name"]
  1037 -> 420 [style=dashed label="equality-expression"]
  1037 -> 421 [style=dashed label="exclusive-or-expression"]
  1037 -> 422 [style=dashed label="floating-point-literal"]
  1037 -> 423 [style=dashed label="fold-expression"]
  1037 -> 424 [style=dashed label="fractional-constant"]
  1037 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1037 -> 426 [style=dashed label="hexadecimal-literal"]
  1037 -> 427 [style=dashed label="hexadecimal-prefix"]
  1037 -> 428 [style=dashed label="id-expression"]
  1037 -> 429 [style=dashed label="inclusive-or-expression"]
  1037 -> 430 [style=dashed label="integer-literal"]
  1037 -> 431 [style=dashed label="lambda-expression"]
  1037 -> 432 [style=dashed label="lambda-introducer"]
  1037 -> 433 [style=dashed label="literal"]
  1037 -> 96 [style=dashed label="literal-operator-id"]
  1037 -> 434 [style=dashed label="logical-and-expression"]
  1037 -> 533 [style=dashed label="logical-or-expression"]
  1037 -> 436 [style=dashed label="multiplicative-expression"]
  1037 -> 100 [style=dashed label="namespace-alias"]
  1037 -> 103 [style=dashed label="namespace-name"]
  1037 -> 437 [style=dashed label="nested-name-specifier"]
  1037 -> 438 [style=dashed label="new-expression"]
  1037 -> 439 [style=dashed label="noexcept-expression"]
  1037 -> 440 [style=dashed label="nonzero-digit"]
  1037 -> 441 [style=dashed label="octal-literal"]
  1037 -> 109 [style=dashed label="operator-function-id"]
  1037 -> 110 [style=dashed label="placeholder-type-specifier"]
  1037 -> 442 [style=dashed label="pm-expression"]
  1037 -> 443 [style=dashed label="pointer-literal"]
  1037 -> 444 [style=dashed label="postfix-expression"]
  1037 -> 445 [style=dashed label="primary-expression"]
  1037 -> 113 [style=dashed label="qualified-id"]
  1037 -> 446 [style=dashed label="relational-expression"]
  1037 -> 447 [style=dashed label="requires-expression"]
  1037 -> 448 [style=dashed label="shift-expression"]
  1037 -> 115 [style=dashed label="simple-template-id"]
  1037 -> 534 [style=dashed label="simple-type-specifier"]
  1037 -> 450 [style=dashed label="string-literal"]
  1037 -> 121 [style=dashed label="template-id"]
  1037 -> 216 [style=dashed label="template-name"]
  1037 -> 535 [style=dashed label="throw-expression"]
  1037 -> 124 [style=dashed label="type-constraint"]
  1037 -> 125 [style=dashed label="type-name"]
  1037 -> 127 [style=dashed label="typedef-name"]
  1037 -> 536 [style=dashed label="typename-specifier"]
  1037 -> 454 [style=dashed label="unary-expression"]
  1037 -> 455 [style=dashed label="unary-operator"]
  1037 -> 130 [style=dashed label="unqualified-id"]
  1037 -> 456 [style=dashed label="user-defined-character-literal"]
  1037 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1037 -> 458 [style=dashed label="user-defined-integer-literal"]
  1037 -> 459 [style=dashed label="user-defined-literal"]
  1037 -> 460 [style=dashed label="user-defined-string-literal"]
  1037 -> 537 [style=dashed label="yield-expression"]
  1038 [label="State 1038\n\l 27 assignment-operator: '=' •\l"]
  1038 -> "1038R27" [style=solid]
 "1038R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  1039 [label="State 1039\n\l 28 assignment-operator: \"*=\" •\l"]
  1039 -> "1039R28" [style=solid]
 "1039R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
  1040 [label="State 1040\n\l 29 assignment-operator: \"/=\" •\l"]
  1040 -> "1040R29" [style=solid]
 "1040R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  1041 [label="State 1041\n\l 30 assignment-operator: \"%=\" •\l"]
  1041 -> "1041R30" [style=solid]
 "1041R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  1042 [label="State 1042\n\l 31 assignment-operator: \"+=\" •\l"]
  1042 -> "1042R31" [style=solid]
 "1042R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  1043 [label="State 1043\n\l 32 assignment-operator: \"-=\" •\l"]
  1043 -> "1043R32" [style=solid]
 "1043R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  1044 [label="State 1044\n\l 33 assignment-operator: \">>=\" •\l"]
  1044 -> "1044R33" [style=solid]
 "1044R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  1045 [label="State 1045\n\l 34 assignment-operator: \"<<=\" •\l"]
  1045 -> "1045R34" [style=solid]
 "1045R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  1046 [label="State 1046\n\l 35 assignment-operator: \"&=\" •\l"]
  1046 -> "1046R35" [style=solid]
 "1046R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  1047 [label="State 1047\n\l 36 assignment-operator: \"^=\" •\l"]
  1047 -> "1047R36" [style=solid]
 "1047R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  1048 [label="State 1048\n\l 37 assignment-operator: \"|=\" •\l"]
  1048 -> "1048R37" [style=solid]
 "1048R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  1049 [label="State 1049\n\l 26 assignment-expression: logical-or-expression assignment-operator • initializer-clause\l"]
  1049 -> 1 [style=solid label="IDENTIFIER"]
  1049 -> 361 [style=solid label="'+'"]
  1049 -> 362 [style=solid label="'-'"]
  1049 -> 363 [style=solid label="'('"]
  1049 -> 364 [style=solid label="'&'"]
  1049 -> 365 [style=solid label="\"::\""]
  1049 -> 366 [style=solid label="'['"]
  1049 -> 367 [style=solid label="\"co_await\""]
  1049 -> 939 [style=solid label="'{'"]
  1049 -> 368 [style=solid label="'0'"]
  1049 -> 369 [style=solid label="'1'"]
  1049 -> 370 [style=solid label="\"0b\""]
  1049 -> 371 [style=solid label="\"0B\""]
  1049 -> 372 [style=solid label="'\\''"]
  1049 -> 373 [style=solid label="\"false\""]
  1049 -> 374 [style=solid label="\"true\""]
  1049 -> 375 [style=solid label="\"noexcept\""]
  1049 -> 17 [style=solid label="\"operator\""]
  1049 -> 26 [style=solid label="\"decltype\""]
  1049 -> 376 [style=solid label="\"delete\""]
  1049 -> 377 [style=solid label="'.'"]
  1049 -> 378 [style=solid label="'2'"]
  1049 -> 379 [style=solid label="'3'"]
  1049 -> 380 [style=solid label="'4'"]
  1049 -> 381 [style=solid label="'5'"]
  1049 -> 382 [style=solid label="'6'"]
  1049 -> 383 [style=solid label="'7'"]
  1049 -> 384 [style=solid label="'8'"]
  1049 -> 385 [style=solid label="'9'"]
  1049 -> 185 [style=solid label="\"u8\""]
  1049 -> 186 [style=solid label="'u'"]
  1049 -> 187 [style=solid label="'U'"]
  1049 -> 188 [style=solid label="'L'"]
  1049 -> 386 [style=solid label="'*'"]
  1049 -> 203 [style=solid label="'\"'"]
  1049 -> 387 [style=solid label="\"0x\""]
  1049 -> 388 [style=solid label="\"0X\""]
  1049 -> 389 [style=solid label="\"requires\""]
  1049 -> 390 [style=solid label="\"new\""]
  1049 -> 391 [style=solid label="'~'"]
  1049 -> 392 [style=solid label="'!'"]
  1049 -> 393 [style=solid label="\"++\""]
  1049 -> 394 [style=solid label="\"--\""]
  1049 -> 395 [style=solid label="\"this\""]
  1049 -> 37 [style=solid label="\"auto\""]
  1049 -> 396 [style=solid label="\"nullptr\""]
  1049 -> 397 [style=solid label="\"dynamic_cast\""]
  1049 -> 398 [style=solid label="\"static_cast\""]
  1049 -> 399 [style=solid label="\"reinterpret_cast\""]
  1049 -> 400 [style=solid label="\"const_cast\""]
  1049 -> 401 [style=solid label="\"typeid\""]
  1049 -> 38 [style=solid label="\"char\""]
  1049 -> 39 [style=solid label="\"char8_t\""]
  1049 -> 40 [style=solid label="\"char16_t\""]
  1049 -> 41 [style=solid label="\"char32_t\""]
  1049 -> 42 [style=solid label="\"wchar_t\""]
  1049 -> 43 [style=solid label="\"bool\""]
  1049 -> 44 [style=solid label="\"short\""]
  1049 -> 45 [style=solid label="\"int\""]
  1049 -> 46 [style=solid label="\"long\""]
  1049 -> 47 [style=solid label="\"signed\""]
  1049 -> 48 [style=solid label="\"unsigned\""]
  1049 -> 49 [style=solid label="\"float\""]
  1049 -> 50 [style=solid label="\"double\""]
  1049 -> 51 [style=solid label="\"void\""]
  1049 -> 209 [style=solid label="'R'"]
  1049 -> 528 [style=solid label="\"throw\""]
  1049 -> 56 [style=solid label="\"typename\""]
  1049 -> 402 [style=solid label="\"sizeof\""]
  1049 -> 403 [style=solid label="\"alignof\""]
  1049 -> 529 [style=solid label="\"co_yield\""]
  1049 -> 404 [style=dashed label="additive-expression"]
  1049 -> 405 [style=dashed label="and-expression"]
  1049 -> 1141 [style=dashed label="assignment-expression"]
  1049 -> 406 [style=dashed label="await-expression"]
  1049 -> 407 [style=dashed label="binary-literal"]
  1049 -> 408 [style=dashed label="boolean-literal"]
  1049 -> 1142 [style=dashed label="braced-init-list"]
  1049 -> 409 [style=dashed label="cast-expression"]
  1049 -> 410 [style=dashed label="character-literal"]
  1049 -> 66 [style=dashed label="class-name"]
  1049 -> 411 [style=dashed label="compare-expression"]
  1049 -> 68 [style=dashed label="concept-name"]
  1049 -> 531 [style=dashed label="conditional-expression"]
  1049 -> 69 [style=dashed label="conversion-function-id"]
  1049 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1049 -> 415 [style=dashed label="decimal-literal"]
  1049 -> 77 [style=dashed label="decltype-specifier"]
  1049 -> 416 [style=dashed label="delete-expression"]
  1049 -> 417 [style=dashed label="digit"]
  1049 -> 418 [style=dashed label="digit-sequence"]
  1049 -> 419 [style=dashed label="encoding-prefix"]
  1049 -> 85 [style=dashed label="enum-name"]
  1049 -> 420 [style=dashed label="equality-expression"]
  1049 -> 421 [style=dashed label="exclusive-or-expression"]
  1049 -> 422 [style=dashed label="floating-point-literal"]
  1049 -> 423 [style=dashed label="fold-expression"]
  1049 -> 424 [style=dashed label="fractional-constant"]
  1049 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1049 -> 426 [style=dashed label="hexadecimal-literal"]
  1049 -> 427 [style=dashed label="hexadecimal-prefix"]
  1049 -> 428 [style=dashed label="id-expression"]
  1049 -> 429 [style=dashed label="inclusive-or-expression"]
  1049 -> 1471 [style=dashed label="initializer-clause"]
  1049 -> 430 [style=dashed label="integer-literal"]
  1049 -> 431 [style=dashed label="lambda-expression"]
  1049 -> 432 [style=dashed label="lambda-introducer"]
  1049 -> 433 [style=dashed label="literal"]
  1049 -> 96 [style=dashed label="literal-operator-id"]
  1049 -> 434 [style=dashed label="logical-and-expression"]
  1049 -> 533 [style=dashed label="logical-or-expression"]
  1049 -> 436 [style=dashed label="multiplicative-expression"]
  1049 -> 100 [style=dashed label="namespace-alias"]
  1049 -> 103 [style=dashed label="namespace-name"]
  1049 -> 437 [style=dashed label="nested-name-specifier"]
  1049 -> 438 [style=dashed label="new-expression"]
  1049 -> 439 [style=dashed label="noexcept-expression"]
  1049 -> 440 [style=dashed label="nonzero-digit"]
  1049 -> 441 [style=dashed label="octal-literal"]
  1049 -> 109 [style=dashed label="operator-function-id"]
  1049 -> 110 [style=dashed label="placeholder-type-specifier"]
  1049 -> 442 [style=dashed label="pm-expression"]
  1049 -> 443 [style=dashed label="pointer-literal"]
  1049 -> 444 [style=dashed label="postfix-expression"]
  1049 -> 445 [style=dashed label="primary-expression"]
  1049 -> 113 [style=dashed label="qualified-id"]
  1049 -> 446 [style=dashed label="relational-expression"]
  1049 -> 447 [style=dashed label="requires-expression"]
  1049 -> 448 [style=dashed label="shift-expression"]
  1049 -> 115 [style=dashed label="simple-template-id"]
  1049 -> 534 [style=dashed label="simple-type-specifier"]
  1049 -> 450 [style=dashed label="string-literal"]
  1049 -> 121 [style=dashed label="template-id"]
  1049 -> 216 [style=dashed label="template-name"]
  1049 -> 535 [style=dashed label="throw-expression"]
  1049 -> 124 [style=dashed label="type-constraint"]
  1049 -> 125 [style=dashed label="type-name"]
  1049 -> 127 [style=dashed label="typedef-name"]
  1049 -> 536 [style=dashed label="typename-specifier"]
  1049 -> 454 [style=dashed label="unary-expression"]
  1049 -> 455 [style=dashed label="unary-operator"]
  1049 -> 130 [style=dashed label="unqualified-id"]
  1049 -> 456 [style=dashed label="user-defined-character-literal"]
  1049 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1049 -> 458 [style=dashed label="user-defined-integer-literal"]
  1049 -> 459 [style=dashed label="user-defined-literal"]
  1049 -> 460 [style=dashed label="user-defined-string-literal"]
  1049 -> 537 [style=dashed label="yield-expression"]
  1050 [label="State 1050\n\l555 linkage-specification: \"extern\" string-literal '{' '}' •\l"]
  1050 -> "1050R555" [style=solid]
 "1050R555" [label="R555", fillcolor=3, shape=diamond, style=filled]
  1051 [label="State 1051\n\l227 declaration-seq: declaration-seq • declaration\l556 linkage-specification: \"extern\" string-literal '{' declaration-seq • '}'\l"]
  1051 -> 1 [style=solid label="IDENTIFIER"]
  1051 -> 2 [style=solid label="\"using\""]
  1051 -> 3 [style=solid label="';'"]
  1051 -> 4 [style=solid label="\"alignas\""]
  1051 -> 5 [style=solid label="'('"]
  1051 -> 6 [style=solid label="\"...\""]
  1051 -> 7 [style=solid label="'&'"]
  1051 -> 8 [style=solid label="\"asm\""]
  1051 -> 9 [style=solid label="\"::\""]
  1051 -> 10 [style=solid label="'['"]
  1051 -> 1472 [style=solid label="'}'"]
  1051 -> 11 [style=solid label="\"virtual\""]
  1051 -> 12 [style=solid label="\"class\""]
  1051 -> 13 [style=solid label="\"struct\""]
  1051 -> 14 [style=solid label="\"union\""]
  1051 -> 15 [style=solid label="\"template\""]
  1051 -> 16 [style=solid label="\"&&\""]
  1051 -> 17 [style=solid label="\"operator\""]
  1051 -> 18 [style=solid label="\"const\""]
  1051 -> 19 [style=solid label="\"volatile\""]
  1051 -> 20 [style=solid label="\"friend\""]
  1051 -> 21 [style=solid label="\"typedef\""]
  1051 -> 22 [style=solid label="\"constexpr\""]
  1051 -> 23 [style=solid label="\"consteval\""]
  1051 -> 24 [style=solid label="\"constinit\""]
  1051 -> 25 [style=solid label="\"inline\""]
  1051 -> 26 [style=solid label="\"decltype\""]
  1051 -> 27 [style=solid label="\"enum\""]
  1051 -> 28 [style=solid label="\"extern\""]
  1051 -> 29 [style=solid label="\"explicit\""]
  1051 -> 30 [style=solid label="\"export\""]
  1051 -> 158 [style=solid label="\"export-keyword\""]
  1051 -> 32 [style=solid label="'*'"]
  1051 -> 34 [style=solid label="\"import-keyword\""]
  1051 -> 35 [style=solid label="\"namespace\""]
  1051 -> 36 [style=solid label="'~'"]
  1051 -> 37 [style=solid label="\"auto\""]
  1051 -> 38 [style=solid label="\"char\""]
  1051 -> 39 [style=solid label="\"char8_t\""]
  1051 -> 40 [style=solid label="\"char16_t\""]
  1051 -> 41 [style=solid label="\"char32_t\""]
  1051 -> 42 [style=solid label="\"wchar_t\""]
  1051 -> 43 [style=solid label="\"bool\""]
  1051 -> 44 [style=solid label="\"short\""]
  1051 -> 45 [style=solid label="\"int\""]
  1051 -> 46 [style=solid label="\"long\""]
  1051 -> 47 [style=solid label="\"signed\""]
  1051 -> 48 [style=solid label="\"unsigned\""]
  1051 -> 49 [style=solid label="\"float\""]
  1051 -> 50 [style=solid label="\"double\""]
  1051 -> 51 [style=solid label="\"void\""]
  1051 -> 52 [style=solid label="\"static_assert\""]
  1051 -> 53 [style=solid label="\"static\""]
  1051 -> 54 [style=solid label="\"thread_local\""]
  1051 -> 55 [style=solid label="\"mutable\""]
  1051 -> 56 [style=solid label="\"typename\""]
  1051 -> 57 [style=dashed label="alias-declaration"]
  1051 -> 58 [style=dashed label="alignment-specifier"]
  1051 -> 59 [style=dashed label="asm-declaration"]
  1051 -> 60 [style=dashed label="attribute-declaration"]
  1051 -> 61 [style=dashed label="attribute-specifier"]
  1051 -> 62 [style=dashed label="attribute-specifier-seq"]
  1051 -> 63 [style=dashed label="block-declaration"]
  1051 -> 64 [style=dashed label="class-head"]
  1051 -> 65 [style=dashed label="class-key"]
  1051 -> 66 [style=dashed label="class-name"]
  1051 -> 67 [style=dashed label="class-specifier"]
  1051 -> 68 [style=dashed label="concept-name"]
  1051 -> 69 [style=dashed label="conversion-function-id"]
  1051 -> 70 [style=dashed label="cv-qualifier"]
  1051 -> 71 [style=dashed label="decl-specifier"]
  1051 -> 72 [style=dashed label="decl-specifier-seq"]
  1051 -> 290 [style=dashed label="declaration"]
  1051 -> 75 [style=dashed label="declarator"]
  1051 -> 76 [style=dashed label="declarator-id"]
  1051 -> 77 [style=dashed label="decltype-specifier"]
  1051 -> 78 [style=dashed label="deduction-guide"]
  1051 -> 79 [style=dashed label="defining-type-specifier"]
  1051 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1051 -> 81 [style=dashed label="elaborated-type-specifier"]
  1051 -> 82 [style=dashed label="empty-declaration"]
  1051 -> 83 [style=dashed label="enum-head"]
  1051 -> 84 [style=dashed label="enum-key"]
  1051 -> 85 [style=dashed label="enum-name"]
  1051 -> 86 [style=dashed label="enum-specifier"]
  1051 -> 87 [style=dashed label="explicit-instantiation"]
  1051 -> 88 [style=dashed label="explicit-specialization"]
  1051 -> 89 [style=dashed label="explicit-specifier"]
  1051 -> 90 [style=dashed label="export-declaration"]
  1051 -> 91 [style=dashed label="function-definition"]
  1051 -> 92 [style=dashed label="function-specifier"]
  1051 -> 94 [style=dashed label="id-expression"]
  1051 -> 95 [style=dashed label="linkage-specification"]
  1051 -> 96 [style=dashed label="literal-operator-id"]
  1051 -> 98 [style=dashed label="module-import-declaration"]
  1051 -> 99 [style=dashed label="named-namespace-definition"]
  1051 -> 100 [style=dashed label="namespace-alias"]
  1051 -> 101 [style=dashed label="namespace-alias-definition"]
  1051 -> 102 [style=dashed label="namespace-definition"]
  1051 -> 103 [style=dashed label="namespace-name"]
  1051 -> 104 [style=dashed label="nested-name-specifier"]
  1051 -> 105 [style=dashed label="nested-namespace-definition"]
  1051 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  1051 -> 107 [style=dashed label="noptr-declarator"]
  1051 -> 108 [style=dashed label="opaque-enum-declaration"]
  1051 -> 109 [style=dashed label="operator-function-id"]
  1051 -> 110 [style=dashed label="placeholder-type-specifier"]
  1051 -> 111 [style=dashed label="ptr-declarator"]
  1051 -> 112 [style=dashed label="ptr-operator"]
  1051 -> 113 [style=dashed label="qualified-id"]
  1051 -> 114 [style=dashed label="simple-declaration"]
  1051 -> 115 [style=dashed label="simple-template-id"]
  1051 -> 116 [style=dashed label="simple-type-specifier"]
  1051 -> 117 [style=dashed label="static_assert-declaration"]
  1051 -> 118 [style=dashed label="storage-class-specifier"]
  1051 -> 119 [style=dashed label="template-declaration"]
  1051 -> 120 [style=dashed label="template-head"]
  1051 -> 121 [style=dashed label="template-id"]
  1051 -> 122 [style=dashed label="template-name"]
  1051 -> 124 [style=dashed label="type-constraint"]
  1051 -> 125 [style=dashed label="type-name"]
  1051 -> 126 [style=dashed label="type-specifier"]
  1051 -> 127 [style=dashed label="typedef-name"]
  1051 -> 128 [style=dashed label="typename-specifier"]
  1051 -> 129 [style=dashed label="unnamed-namespace-definition"]
  1051 -> 130 [style=dashed label="unqualified-id"]
  1051 -> 131 [style=dashed label="using-declaration"]
  1051 -> 132 [style=dashed label="using-directive"]
  1051 -> 133 [style=dashed label="using-enum-declaration"]
  1052 [label="State 1052\n\l325 explicit-specifier: \"explicit\" '(' constant-expression ')' •\l"]
  1052 -> "1052R325" [style=solid]
 "1052R325" [label="R325", fillcolor=3, shape=diamond, style=filled]
  1053 [label="State 1053\n\l333 export-declaration: \"export\" '{' declaration-seq '}' •\l"]
  1053 -> "1053R333" [style=solid]
 "1053R333" [label="R333", fillcolor=3, shape=diamond, style=filled]
  1054 [label="State 1054\n\l623 module-declaration: \"export-keyword\" \"module-keyword\" module-name ';' •\l"]
  1054 -> "1054R623" [style=solid]
 "1054R623" [label="R623", fillcolor=3, shape=diamond, style=filled]
  1055 [label="State 1055\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l627 module-declaration: \"export-keyword\" \"module-keyword\" module-name attribute-specifier-seq • ';'\l"]
  1055 -> 1473 [style=solid label="';'"]
  1055 -> 4 [style=solid label="\"alignas\""]
  1055 -> 10 [style=solid label="'['"]
  1055 -> 58 [style=dashed label="alignment-specifier"]
  1055 -> 265 [style=dashed label="attribute-specifier"]
  1056 [label="State 1056\n\l625 module-declaration: \"export-keyword\" \"module-keyword\" module-name module-partition • ';'\l629                   | \"export-keyword\" \"module-keyword\" module-name module-partition • attribute-specifier-seq ';'\l"]
  1056 -> 1474 [style=solid label="';'"]
  1056 -> 4 [style=solid label="\"alignas\""]
  1056 -> 10 [style=solid label="'['"]
  1056 -> 58 [style=dashed label="alignment-specifier"]
  1056 -> 61 [style=dashed label="attribute-specifier"]
  1056 -> 1475 [style=dashed label="attribute-specifier-seq"]
  1057 [label="State 1057\n\l628 module-declaration: \"module-keyword\" module-name attribute-specifier-seq ';' •\l"]
  1057 -> "1057R628" [style=solid]
 "1057R628" [label="R628", fillcolor=3, shape=diamond, style=filled]
  1058 [label="State 1058\n\l626 module-declaration: \"module-keyword\" module-name module-partition ';' •\l"]
  1058 -> "1058R626" [style=solid]
 "1058R626" [label="R626", fillcolor=3, shape=diamond, style=filled]
  1059 [label="State 1059\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l630 module-declaration: \"module-keyword\" module-name module-partition attribute-specifier-seq • ';'\l"]
  1059 -> 1476 [style=solid label="';'"]
  1059 -> 4 [style=solid label="\"alignas\""]
  1059 -> 10 [style=solid label="'['"]
  1059 -> 58 [style=dashed label="alignment-specifier"]
  1059 -> 265 [style=dashed label="attribute-specifier"]
  1060 [label="State 1060\n\l640 module-name-qualifier: module-name-qualifier IDENTIFIER '.' •\l"]
  1060 -> "1060R640" [style=solid]
 "1060R640" [label="R640", fillcolor=3, shape=diamond, style=filled]
  1061 [label="State 1061\n\l640 module-name-qualifier: module-name-qualifier IDENTIFIER • '.'\l642 module-partition: ':' module-name-qualifier IDENTIFIER •\l"]
  1061 -> 1060 [style=solid label="'.'"]
  1061 -> "1061R642" [style=solid]
 "1061R642" [label="R642", fillcolor=3, shape=diamond, style=filled]
  1062 [label="State 1062\n\l420 header-name: '<' \"h-char-sequence\" '>' •\l"]
  1062 -> "1062R420" [style=solid]
 "1062R420" [label="R420", fillcolor=3, shape=diamond, style=filled]
  1063 [label="State 1063\n\l421 header-name: '\"' q-char-sequence '\"' •\l"]
  1063 -> "1063R421" [style=solid]
 "1063R421" [label="R421", fillcolor=3, shape=diamond, style=filled]
  1064 [label="State 1064\n\l912 q-char-sequence: q-char-sequence q-char •\l"]
  1064 -> "1064R912" [style=solid]
 "1064R912" [label="R912", fillcolor=3, shape=diamond, style=filled]
  1065 [label="State 1065\n\l636 module-import-declaration: \"import-keyword\" header-name attribute-specifier-seq ';' •\l"]
  1065 -> "1065R636" [style=solid]
 "1065R636" [label="R636", fillcolor=3, shape=diamond, style=filled]
  1066 [label="State 1066\n\l632 module-import-declaration: \"import-keyword\" module-name attribute-specifier-seq ';' •\l"]
  1066 -> "1066R632" [style=solid]
 "1066R632" [label="R632", fillcolor=3, shape=diamond, style=filled]
  1067 [label="State 1067\n\l634 module-import-declaration: \"import-keyword\" module-partition attribute-specifier-seq ';' •\l"]
  1067 -> "1067R634" [style=solid]
 "1067R634" [label="R634", fillcolor=3, shape=diamond, style=filled]
  1068 [label="State 1068\n\l661 nested-name-specifier: namespace-name • \"::\"\l916 qualified-namespace-specifier: namespace-name •\l"]
  1068 -> 324 [style=solid label="\"::\""]
  1068 -> "1068R916" [style=solid]
 "1068R916" [label="R916", fillcolor=3, shape=diamond, style=filled]
  1069 [label="State 1069\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l915 qualified-namespace-specifier: nested-name-specifier • namespace-name\l"]
  1069 -> 755 [style=solid label="IDENTIFIER"]
  1069 -> 355 [style=solid label="\"template\""]
  1069 -> 100 [style=dashed label="namespace-alias"]
  1069 -> 1477 [style=dashed label="namespace-name"]
  1069 -> 539 [style=dashed label="simple-template-id"]
  1069 -> 143 [style=dashed label="template-name"]
  1070 [label="State 1070\n\l652 namespace-alias-definition: \"namespace\" IDENTIFIER '=' qualified-namespace-specifier • ';'\l"]
  1070 -> 1478 [style=solid label="';'"]
  1071 [label="State 1071\n\l648 named-namespace-definition: \"namespace\" IDENTIFIER '{' namespace-body • '}'\l"]
  1071 -> 1479 [style=solid label="'}'"]
  1072 [label="State 1072\n\l1151 unnamed-namespace-definition: \"namespace\" '{' namespace-body '}' •\l"]
  1072 -> "1072R1151" [style=solid]
 "1072R1151" [label="R1151", fillcolor=3, shape=diamond, style=filled]
  1073 [label="State 1073\n\l650 named-namespace-definition: \"namespace\" attribute-specifier-seq IDENTIFIER '{' • namespace-body '}'\l"]
  1073 -> 1 [style=solid label="IDENTIFIER"]
  1073 -> 2 [style=solid label="\"using\""]
  1073 -> 3 [style=solid label="';'"]
  1073 -> 4 [style=solid label="\"alignas\""]
  1073 -> 5 [style=solid label="'('"]
  1073 -> 6 [style=solid label="\"...\""]
  1073 -> 7 [style=solid label="'&'"]
  1073 -> 8 [style=solid label="\"asm\""]
  1073 -> 9 [style=solid label="\"::\""]
  1073 -> 10 [style=solid label="'['"]
  1073 -> 11 [style=solid label="\"virtual\""]
  1073 -> 12 [style=solid label="\"class\""]
  1073 -> 13 [style=solid label="\"struct\""]
  1073 -> 14 [style=solid label="\"union\""]
  1073 -> 15 [style=solid label="\"template\""]
  1073 -> 16 [style=solid label="\"&&\""]
  1073 -> 17 [style=solid label="\"operator\""]
  1073 -> 18 [style=solid label="\"const\""]
  1073 -> 19 [style=solid label="\"volatile\""]
  1073 -> 20 [style=solid label="\"friend\""]
  1073 -> 21 [style=solid label="\"typedef\""]
  1073 -> 22 [style=solid label="\"constexpr\""]
  1073 -> 23 [style=solid label="\"consteval\""]
  1073 -> 24 [style=solid label="\"constinit\""]
  1073 -> 25 [style=solid label="\"inline\""]
  1073 -> 26 [style=solid label="\"decltype\""]
  1073 -> 27 [style=solid label="\"enum\""]
  1073 -> 28 [style=solid label="\"extern\""]
  1073 -> 29 [style=solid label="\"explicit\""]
  1073 -> 30 [style=solid label="\"export\""]
  1073 -> 158 [style=solid label="\"export-keyword\""]
  1073 -> 32 [style=solid label="'*'"]
  1073 -> 34 [style=solid label="\"import-keyword\""]
  1073 -> 35 [style=solid label="\"namespace\""]
  1073 -> 36 [style=solid label="'~'"]
  1073 -> 37 [style=solid label="\"auto\""]
  1073 -> 38 [style=solid label="\"char\""]
  1073 -> 39 [style=solid label="\"char8_t\""]
  1073 -> 40 [style=solid label="\"char16_t\""]
  1073 -> 41 [style=solid label="\"char32_t\""]
  1073 -> 42 [style=solid label="\"wchar_t\""]
  1073 -> 43 [style=solid label="\"bool\""]
  1073 -> 44 [style=solid label="\"short\""]
  1073 -> 45 [style=solid label="\"int\""]
  1073 -> 46 [style=solid label="\"long\""]
  1073 -> 47 [style=solid label="\"signed\""]
  1073 -> 48 [style=solid label="\"unsigned\""]
  1073 -> 49 [style=solid label="\"float\""]
  1073 -> 50 [style=solid label="\"double\""]
  1073 -> 51 [style=solid label="\"void\""]
  1073 -> 52 [style=solid label="\"static_assert\""]
  1073 -> 53 [style=solid label="\"static\""]
  1073 -> 54 [style=solid label="\"thread_local\""]
  1073 -> 55 [style=solid label="\"mutable\""]
  1073 -> 56 [style=solid label="\"typename\""]
  1073 -> 57 [style=dashed label="alias-declaration"]
  1073 -> 58 [style=dashed label="alignment-specifier"]
  1073 -> 59 [style=dashed label="asm-declaration"]
  1073 -> 60 [style=dashed label="attribute-declaration"]
  1073 -> 61 [style=dashed label="attribute-specifier"]
  1073 -> 62 [style=dashed label="attribute-specifier-seq"]
  1073 -> 63 [style=dashed label="block-declaration"]
  1073 -> 64 [style=dashed label="class-head"]
  1073 -> 65 [style=dashed label="class-key"]
  1073 -> 66 [style=dashed label="class-name"]
  1073 -> 67 [style=dashed label="class-specifier"]
  1073 -> 68 [style=dashed label="concept-name"]
  1073 -> 69 [style=dashed label="conversion-function-id"]
  1073 -> 70 [style=dashed label="cv-qualifier"]
  1073 -> 71 [style=dashed label="decl-specifier"]
  1073 -> 72 [style=dashed label="decl-specifier-seq"]
  1073 -> 73 [style=dashed label="declaration"]
  1073 -> 570 [style=dashed label="declaration-seq"]
  1073 -> 75 [style=dashed label="declarator"]
  1073 -> 76 [style=dashed label="declarator-id"]
  1073 -> 77 [style=dashed label="decltype-specifier"]
  1073 -> 78 [style=dashed label="deduction-guide"]
  1073 -> 79 [style=dashed label="defining-type-specifier"]
  1073 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1073 -> 81 [style=dashed label="elaborated-type-specifier"]
  1073 -> 82 [style=dashed label="empty-declaration"]
  1073 -> 83 [style=dashed label="enum-head"]
  1073 -> 84 [style=dashed label="enum-key"]
  1073 -> 85 [style=dashed label="enum-name"]
  1073 -> 86 [style=dashed label="enum-specifier"]
  1073 -> 87 [style=dashed label="explicit-instantiation"]
  1073 -> 88 [style=dashed label="explicit-specialization"]
  1073 -> 89 [style=dashed label="explicit-specifier"]
  1073 -> 90 [style=dashed label="export-declaration"]
  1073 -> 91 [style=dashed label="function-definition"]
  1073 -> 92 [style=dashed label="function-specifier"]
  1073 -> 94 [style=dashed label="id-expression"]
  1073 -> 95 [style=dashed label="linkage-specification"]
  1073 -> 96 [style=dashed label="literal-operator-id"]
  1073 -> 98 [style=dashed label="module-import-declaration"]
  1073 -> 99 [style=dashed label="named-namespace-definition"]
  1073 -> 100 [style=dashed label="namespace-alias"]
  1073 -> 101 [style=dashed label="namespace-alias-definition"]
  1073 -> 1480 [style=dashed label="namespace-body"]
  1073 -> 102 [style=dashed label="namespace-definition"]
  1073 -> 103 [style=dashed label="namespace-name"]
  1073 -> 104 [style=dashed label="nested-name-specifier"]
  1073 -> 105 [style=dashed label="nested-namespace-definition"]
  1073 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  1073 -> 107 [style=dashed label="noptr-declarator"]
  1073 -> 108 [style=dashed label="opaque-enum-declaration"]
  1073 -> 109 [style=dashed label="operator-function-id"]
  1073 -> 110 [style=dashed label="placeholder-type-specifier"]
  1073 -> 111 [style=dashed label="ptr-declarator"]
  1073 -> 112 [style=dashed label="ptr-operator"]
  1073 -> 113 [style=dashed label="qualified-id"]
  1073 -> 114 [style=dashed label="simple-declaration"]
  1073 -> 115 [style=dashed label="simple-template-id"]
  1073 -> 116 [style=dashed label="simple-type-specifier"]
  1073 -> 117 [style=dashed label="static_assert-declaration"]
  1073 -> 118 [style=dashed label="storage-class-specifier"]
  1073 -> 119 [style=dashed label="template-declaration"]
  1073 -> 120 [style=dashed label="template-head"]
  1073 -> 121 [style=dashed label="template-id"]
  1073 -> 122 [style=dashed label="template-name"]
  1073 -> 124 [style=dashed label="type-constraint"]
  1073 -> 125 [style=dashed label="type-name"]
  1073 -> 126 [style=dashed label="type-specifier"]
  1073 -> 127 [style=dashed label="typedef-name"]
  1073 -> 128 [style=dashed label="typename-specifier"]
  1073 -> 129 [style=dashed label="unnamed-namespace-definition"]
  1073 -> 130 [style=dashed label="unqualified-id"]
  1073 -> 131 [style=dashed label="using-declaration"]
  1073 -> 132 [style=dashed label="using-directive"]
  1073 -> 133 [style=dashed label="using-enum-declaration"]
  1074 [label="State 1074\n\l1153 unnamed-namespace-definition: \"namespace\" attribute-specifier-seq '{' namespace-body • '}'\l"]
  1074 -> 1481 [style=solid label="'}'"]
  1075 [label="State 1075\n\l277 enclosing-namespace-specifier: enclosing-namespace-specifier \"::\" IDENTIFIER •\l666 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" IDENTIFIER • '{' namespace-body '}'\l"]
  1075 -> 1482 [style=solid label="'{'"]
  1075 -> "1075R277" [style=solid]
 "1075R277" [label="R277", fillcolor=3, shape=diamond, style=filled]
  1076 [label="State 1076\n\l278 enclosing-namespace-specifier: enclosing-namespace-specifier \"::\" \"inline\" • IDENTIFIER\l667 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" \"inline\" • IDENTIFIER '{' namespace-body '}'\l"]
  1076 -> 1483 [style=solid label="IDENTIFIER"]
  1077 [label="State 1077\n\l1038 static_assert-declaration: \"static_assert\" '(' constant-expression ')' • ';'\l"]
  1077 -> 1484 [style=solid label="';'"]
  1078 [label="State 1078\n\l1039 static_assert-declaration: \"static_assert\" '(' constant-expression ',' • string-literal ')' ';'\l"]
  1078 -> 185 [style=solid label="\"u8\""]
  1078 -> 186 [style=solid label="'u'"]
  1078 -> 187 [style=solid label="'U'"]
  1078 -> 188 [style=solid label="'L'"]
  1078 -> 203 [style=solid label="'\"'"]
  1078 -> 209 [style=solid label="'R'"]
  1078 -> 212 [style=dashed label="encoding-prefix"]
  1078 -> 1485 [style=dashed label="string-literal"]
  1079 [label="State 1079\n\l665 nested-name-specifier: nested-name-specifier \"template\" simple-template-id • \"::\"\l1128 typename-specifier: \"typename\" nested-name-specifier \"template\" simple-template-id •\l"]
  1079 -> 1217 [style=solid label="\"::\""]
  1079 -> "1079R1128d" [label="[\"::\"]", style=solid]
 "1079R1128d" [label="R1128", fillcolor=5, shape=diamond, style=filled]
  1079 -> "1079R1128" [style=solid]
 "1079R1128" [label="R1128", fillcolor=3, shape=diamond, style=filled]
  1080 [label="State 1080\n\l661 nested-name-specifier: namespace-name • \"::\"\l1185 using-directive: attribute-specifier-seq \"using\" \"namespace\" namespace-name • ';'\l"]
  1080 -> 1486 [style=solid label="';'"]
  1080 -> 324 [style=solid label="\"::\""]
  1081 [label="State 1081\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l1187 using-directive: attribute-specifier-seq \"using\" \"namespace\" nested-name-specifier • namespace-name ';'\l"]
  1081 -> 755 [style=solid label="IDENTIFIER"]
  1081 -> 355 [style=solid label="\"template\""]
  1081 -> 100 [style=dashed label="namespace-alias"]
  1081 -> 1487 [style=dashed label="namespace-name"]
  1081 -> 539 [style=dashed label="simple-template-id"]
  1081 -> 143 [style=dashed label="template-name"]
  1082 [label="State 1082\n\l 21 asm-declaration: attribute-specifier-seq \"asm\" '(' string-literal • ')' ';'\l"]
  1082 -> 1488 [style=solid label="')'"]
  1083 [label="State 1083\n\l466 identifier-list: identifier-list • ',' IDENTIFIER\l980 simple-declaration: attribute-specifier-seq decl-specifier-seq '[' identifier-list • ']' initializer ';'\l"]
  1083 -> 1138 [style=solid label="','"]
  1083 -> 1489 [style=solid label="']'"]
  1084 [label="State 1084\n\l400 function-definition: attribute-specifier-seq decl-specifier-seq declarator function-body •\l"]
  1084 -> "1084R400" [style=solid]
 "1084R400" [label="R400", fillcolor=3, shape=diamond, style=filled]
  1085 [label="State 1085\n\l408 function-definition: attribute-specifier-seq decl-specifier-seq declarator requires-clause • function-body\l475 init-declarator: declarator requires-clause •\l"]
  1085 -> 291 [style=solid label="'='"]
  1085 -> 293 [style=solid label="':'"]
  1085 -> 294 [style=solid label="'{'"]
  1085 -> 296 [style=solid label="\"try\""]
  1085 -> 299 [style=dashed label="compound-statement"]
  1085 -> 300 [style=dashed label="ctor-initializer"]
  1085 -> 1490 [style=dashed label="function-body"]
  1085 -> 302 [style=dashed label="function-try-block"]
  1085 -> "1085R475" [style=solid]
 "1085R475" [label="R475", fillcolor=3, shape=diamond, style=filled]
  1086 [label="State 1086\n\l404 function-definition: attribute-specifier-seq decl-specifier-seq declarator virt-specifier-seq • function-body\l1193 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  1086 -> 291 [style=solid label="'='"]
  1086 -> 293 [style=solid label="':'"]
  1086 -> 294 [style=solid label="'{'"]
  1086 -> 295 [style=solid label="\"final\""]
  1086 -> 296 [style=solid label="\"try\""]
  1086 -> 298 [style=solid label="\"override\""]
  1086 -> 299 [style=dashed label="compound-statement"]
  1086 -> 300 [style=dashed label="ctor-initializer"]
  1086 -> 1491 [style=dashed label="function-body"]
  1086 -> 302 [style=dashed label="function-try-block"]
  1086 -> 707 [style=dashed label="virt-specifier"]
  1087 [label="State 1087\n\l979 simple-declaration: attribute-specifier-seq decl-specifier-seq init-declarator-list ';' •\l"]
  1087 -> "1087R979" [style=solid]
 "1087R979" [label="R979", fillcolor=3, shape=diamond, style=filled]
  1088 [label="State 1088\n\l982 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' • identifier-list ']' initializer ';'\l"]
  1088 -> 644 [style=solid label="IDENTIFIER"]
  1088 -> 1492 [style=dashed label="identifier-list"]
  1089 [label="State 1089\n\l406 function-definition: attribute-specifier-seq declarator requires-clause function-body •\l"]
  1089 -> "1089R406" [style=solid]
 "1089R406" [label="R406", fillcolor=3, shape=diamond, style=filled]
  1090 [label="State 1090\n\l402 function-definition: attribute-specifier-seq declarator virt-specifier-seq function-body •\l"]
  1090 -> "1090R402" [style=solid]
 "1090R402" [label="R402", fillcolor=3, shape=diamond, style=filled]
  1091 [label="State 1091\n\l287 enum-head: enum-key attribute-specifier-seq enum-head-name •\l291          | enum-key attribute-specifier-seq enum-head-name • enum-base\l"]
  1091 -> 310 [style=solid label="':'"]
  1091 -> 1493 [style=dashed label="enum-base"]
  1091 -> "1091R287" [style=solid]
 "1091R287" [label="R287", fillcolor=3, shape=diamond, style=filled]
  1092 [label="State 1092\n\l290 enum-head: enum-key enum-head-name enum-base •\l"]
  1092 -> "1092R290" [style=solid]
 "1092R290" [label="R290", fillcolor=3, shape=diamond, style=filled]
  1093 [label="State 1093\n\l609 member-declarator: IDENTIFIER ':' • constant-expression\l613                  | IDENTIFIER ':' • constant-expression brace-or-equal-initializer\l"]
  1093 -> 1 [style=solid label="IDENTIFIER"]
  1093 -> 361 [style=solid label="'+'"]
  1093 -> 362 [style=solid label="'-'"]
  1093 -> 363 [style=solid label="'('"]
  1093 -> 364 [style=solid label="'&'"]
  1093 -> 365 [style=solid label="\"::\""]
  1093 -> 366 [style=solid label="'['"]
  1093 -> 367 [style=solid label="\"co_await\""]
  1093 -> 368 [style=solid label="'0'"]
  1093 -> 369 [style=solid label="'1'"]
  1093 -> 370 [style=solid label="\"0b\""]
  1093 -> 371 [style=solid label="\"0B\""]
  1093 -> 372 [style=solid label="'\\''"]
  1093 -> 373 [style=solid label="\"false\""]
  1093 -> 374 [style=solid label="\"true\""]
  1093 -> 375 [style=solid label="\"noexcept\""]
  1093 -> 17 [style=solid label="\"operator\""]
  1093 -> 26 [style=solid label="\"decltype\""]
  1093 -> 376 [style=solid label="\"delete\""]
  1093 -> 377 [style=solid label="'.'"]
  1093 -> 378 [style=solid label="'2'"]
  1093 -> 379 [style=solid label="'3'"]
  1093 -> 380 [style=solid label="'4'"]
  1093 -> 381 [style=solid label="'5'"]
  1093 -> 382 [style=solid label="'6'"]
  1093 -> 383 [style=solid label="'7'"]
  1093 -> 384 [style=solid label="'8'"]
  1093 -> 385 [style=solid label="'9'"]
  1093 -> 185 [style=solid label="\"u8\""]
  1093 -> 186 [style=solid label="'u'"]
  1093 -> 187 [style=solid label="'U'"]
  1093 -> 188 [style=solid label="'L'"]
  1093 -> 386 [style=solid label="'*'"]
  1093 -> 203 [style=solid label="'\"'"]
  1093 -> 387 [style=solid label="\"0x\""]
  1093 -> 388 [style=solid label="\"0X\""]
  1093 -> 389 [style=solid label="\"requires\""]
  1093 -> 390 [style=solid label="\"new\""]
  1093 -> 391 [style=solid label="'~'"]
  1093 -> 392 [style=solid label="'!'"]
  1093 -> 393 [style=solid label="\"++\""]
  1093 -> 394 [style=solid label="\"--\""]
  1093 -> 395 [style=solid label="\"this\""]
  1093 -> 37 [style=solid label="\"auto\""]
  1093 -> 396 [style=solid label="\"nullptr\""]
  1093 -> 397 [style=solid label="\"dynamic_cast\""]
  1093 -> 398 [style=solid label="\"static_cast\""]
  1093 -> 399 [style=solid label="\"reinterpret_cast\""]
  1093 -> 400 [style=solid label="\"const_cast\""]
  1093 -> 401 [style=solid label="\"typeid\""]
  1093 -> 38 [style=solid label="\"char\""]
  1093 -> 39 [style=solid label="\"char8_t\""]
  1093 -> 40 [style=solid label="\"char16_t\""]
  1093 -> 41 [style=solid label="\"char32_t\""]
  1093 -> 42 [style=solid label="\"wchar_t\""]
  1093 -> 43 [style=solid label="\"bool\""]
  1093 -> 44 [style=solid label="\"short\""]
  1093 -> 45 [style=solid label="\"int\""]
  1093 -> 46 [style=solid label="\"long\""]
  1093 -> 47 [style=solid label="\"signed\""]
  1093 -> 48 [style=solid label="\"unsigned\""]
  1093 -> 49 [style=solid label="\"float\""]
  1093 -> 50 [style=solid label="\"double\""]
  1093 -> 51 [style=solid label="\"void\""]
  1093 -> 209 [style=solid label="'R'"]
  1093 -> 56 [style=solid label="\"typename\""]
  1093 -> 402 [style=solid label="\"sizeof\""]
  1093 -> 403 [style=solid label="\"alignof\""]
  1093 -> 404 [style=dashed label="additive-expression"]
  1093 -> 405 [style=dashed label="and-expression"]
  1093 -> 406 [style=dashed label="await-expression"]
  1093 -> 407 [style=dashed label="binary-literal"]
  1093 -> 408 [style=dashed label="boolean-literal"]
  1093 -> 409 [style=dashed label="cast-expression"]
  1093 -> 410 [style=dashed label="character-literal"]
  1093 -> 66 [style=dashed label="class-name"]
  1093 -> 411 [style=dashed label="compare-expression"]
  1093 -> 68 [style=dashed label="concept-name"]
  1093 -> 412 [style=dashed label="conditional-expression"]
  1093 -> 1494 [style=dashed label="constant-expression"]
  1093 -> 69 [style=dashed label="conversion-function-id"]
  1093 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1093 -> 415 [style=dashed label="decimal-literal"]
  1093 -> 77 [style=dashed label="decltype-specifier"]
  1093 -> 416 [style=dashed label="delete-expression"]
  1093 -> 417 [style=dashed label="digit"]
  1093 -> 418 [style=dashed label="digit-sequence"]
  1093 -> 419 [style=dashed label="encoding-prefix"]
  1093 -> 85 [style=dashed label="enum-name"]
  1093 -> 420 [style=dashed label="equality-expression"]
  1093 -> 421 [style=dashed label="exclusive-or-expression"]
  1093 -> 422 [style=dashed label="floating-point-literal"]
  1093 -> 423 [style=dashed label="fold-expression"]
  1093 -> 424 [style=dashed label="fractional-constant"]
  1093 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1093 -> 426 [style=dashed label="hexadecimal-literal"]
  1093 -> 427 [style=dashed label="hexadecimal-prefix"]
  1093 -> 428 [style=dashed label="id-expression"]
  1093 -> 429 [style=dashed label="inclusive-or-expression"]
  1093 -> 430 [style=dashed label="integer-literal"]
  1093 -> 431 [style=dashed label="lambda-expression"]
  1093 -> 432 [style=dashed label="lambda-introducer"]
  1093 -> 433 [style=dashed label="literal"]
  1093 -> 96 [style=dashed label="literal-operator-id"]
  1093 -> 434 [style=dashed label="logical-and-expression"]
  1093 -> 435 [style=dashed label="logical-or-expression"]
  1093 -> 436 [style=dashed label="multiplicative-expression"]
  1093 -> 100 [style=dashed label="namespace-alias"]
  1093 -> 103 [style=dashed label="namespace-name"]
  1093 -> 437 [style=dashed label="nested-name-specifier"]
  1093 -> 438 [style=dashed label="new-expression"]
  1093 -> 439 [style=dashed label="noexcept-expression"]
  1093 -> 440 [style=dashed label="nonzero-digit"]
  1093 -> 441 [style=dashed label="octal-literal"]
  1093 -> 109 [style=dashed label="operator-function-id"]
  1093 -> 110 [style=dashed label="placeholder-type-specifier"]
  1093 -> 442 [style=dashed label="pm-expression"]
  1093 -> 443 [style=dashed label="pointer-literal"]
  1093 -> 444 [style=dashed label="postfix-expression"]
  1093 -> 445 [style=dashed label="primary-expression"]
  1093 -> 113 [style=dashed label="qualified-id"]
  1093 -> 446 [style=dashed label="relational-expression"]
  1093 -> 447 [style=dashed label="requires-expression"]
  1093 -> 448 [style=dashed label="shift-expression"]
  1093 -> 115 [style=dashed label="simple-template-id"]
  1093 -> 534 [style=dashed label="simple-type-specifier"]
  1093 -> 450 [style=dashed label="string-literal"]
  1093 -> 121 [style=dashed label="template-id"]
  1093 -> 216 [style=dashed label="template-name"]
  1093 -> 124 [style=dashed label="type-constraint"]
  1093 -> 125 [style=dashed label="type-name"]
  1093 -> 127 [style=dashed label="typedef-name"]
  1093 -> 536 [style=dashed label="typename-specifier"]
  1093 -> 454 [style=dashed label="unary-expression"]
  1093 -> 455 [style=dashed label="unary-operator"]
  1093 -> 130 [style=dashed label="unqualified-id"]
  1093 -> 456 [style=dashed label="user-defined-character-literal"]
  1093 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1093 -> 458 [style=dashed label="user-defined-integer-literal"]
  1093 -> 459 [style=dashed label="user-defined-literal"]
  1093 -> 460 [style=dashed label="user-defined-string-literal"]
  1094 [label="State 1094\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l611 member-declarator: IDENTIFIER attribute-specifier-seq • ':' constant-expression\l615                  | IDENTIFIER attribute-specifier-seq • ':' constant-expression brace-or-equal-initializer\l"]
  1094 -> 4 [style=solid label="\"alignas\""]
  1094 -> 10 [style=solid label="'['"]
  1094 -> 1495 [style=solid label="':'"]
  1094 -> 58 [style=dashed label="alignment-specifier"]
  1094 -> 265 [style=dashed label="attribute-specifier"]
  1095 [label="State 1095\n\l610 member-declarator: ':' constant-expression •\l614                  | ':' constant-expression • brace-or-equal-initializer\l"]
  1095 -> 1280 [style=solid label="'='"]
  1095 -> 939 [style=solid label="'{'"]
  1095 -> 1496 [style=dashed label="brace-or-equal-initializer"]
  1095 -> 650 [style=dashed label="braced-init-list"]
  1095 -> "1095R610" [style=solid]
 "1095R610" [label="R610", fillcolor=3, shape=diamond, style=filled]
  1096 [label="State 1096\n\l621 member-specification: access-specifier ':' •\l622                     | access-specifier ':' • member-specification\l"]
  1096 -> 591 [style=solid label="IDENTIFIER"]
  1096 -> 592 [style=solid label="\"private\""]
  1096 -> 593 [style=solid label="\"protected\""]
  1096 -> 594 [style=solid label="\"public\""]
  1096 -> 595 [style=solid label="\"using\""]
  1096 -> 596 [style=solid label="';'"]
  1096 -> 4 [style=solid label="\"alignas\""]
  1096 -> 5 [style=solid label="'('"]
  1096 -> 6 [style=solid label="\"...\""]
  1096 -> 7 [style=solid label="'&'"]
  1096 -> 9 [style=solid label="\"::\""]
  1096 -> 10 [style=solid label="'['"]
  1096 -> 597 [style=solid label="':'"]
  1096 -> 11 [style=solid label="\"virtual\""]
  1096 -> 12 [style=solid label="\"class\""]
  1096 -> 13 [style=solid label="\"struct\""]
  1096 -> 14 [style=solid label="\"union\""]
  1096 -> 599 [style=solid label="\"template\""]
  1096 -> 16 [style=solid label="\"&&\""]
  1096 -> 17 [style=solid label="\"operator\""]
  1096 -> 18 [style=solid label="\"const\""]
  1096 -> 19 [style=solid label="\"volatile\""]
  1096 -> 20 [style=solid label="\"friend\""]
  1096 -> 21 [style=solid label="\"typedef\""]
  1096 -> 22 [style=solid label="\"constexpr\""]
  1096 -> 23 [style=solid label="\"consteval\""]
  1096 -> 24 [style=solid label="\"constinit\""]
  1096 -> 263 [style=solid label="\"inline\""]
  1096 -> 26 [style=solid label="\"decltype\""]
  1096 -> 27 [style=solid label="\"enum\""]
  1096 -> 264 [style=solid label="\"extern\""]
  1096 -> 29 [style=solid label="\"explicit\""]
  1096 -> 32 [style=solid label="'*'"]
  1096 -> 36 [style=solid label="'~'"]
  1096 -> 37 [style=solid label="\"auto\""]
  1096 -> 38 [style=solid label="\"char\""]
  1096 -> 39 [style=solid label="\"char8_t\""]
  1096 -> 40 [style=solid label="\"char16_t\""]
  1096 -> 41 [style=solid label="\"char32_t\""]
  1096 -> 42 [style=solid label="\"wchar_t\""]
  1096 -> 43 [style=solid label="\"bool\""]
  1096 -> 44 [style=solid label="\"short\""]
  1096 -> 45 [style=solid label="\"int\""]
  1096 -> 46 [style=solid label="\"long\""]
  1096 -> 47 [style=solid label="\"signed\""]
  1096 -> 48 [style=solid label="\"unsigned\""]
  1096 -> 49 [style=solid label="\"float\""]
  1096 -> 50 [style=solid label="\"double\""]
  1096 -> 51 [style=solid label="\"void\""]
  1096 -> 52 [style=solid label="\"static_assert\""]
  1096 -> 53 [style=solid label="\"static\""]
  1096 -> 54 [style=solid label="\"thread_local\""]
  1096 -> 55 [style=solid label="\"mutable\""]
  1096 -> 56 [style=solid label="\"typename\""]
  1096 -> 600 [style=dashed label="access-specifier"]
  1096 -> 601 [style=dashed label="alias-declaration"]
  1096 -> 58 [style=dashed label="alignment-specifier"]
  1096 -> 61 [style=dashed label="attribute-specifier"]
  1096 -> 602 [style=dashed label="attribute-specifier-seq"]
  1096 -> 64 [style=dashed label="class-head"]
  1096 -> 65 [style=dashed label="class-key"]
  1096 -> 66 [style=dashed label="class-name"]
  1096 -> 67 [style=dashed label="class-specifier"]
  1096 -> 68 [style=dashed label="concept-name"]
  1096 -> 69 [style=dashed label="conversion-function-id"]
  1096 -> 70 [style=dashed label="cv-qualifier"]
  1096 -> 71 [style=dashed label="decl-specifier"]
  1096 -> 603 [style=dashed label="decl-specifier-seq"]
  1096 -> 604 [style=dashed label="declarator"]
  1096 -> 76 [style=dashed label="declarator-id"]
  1096 -> 77 [style=dashed label="decltype-specifier"]
  1096 -> 605 [style=dashed label="deduction-guide"]
  1096 -> 79 [style=dashed label="defining-type-specifier"]
  1096 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1096 -> 81 [style=dashed label="elaborated-type-specifier"]
  1096 -> 606 [style=dashed label="empty-declaration"]
  1096 -> 83 [style=dashed label="enum-head"]
  1096 -> 84 [style=dashed label="enum-key"]
  1096 -> 85 [style=dashed label="enum-name"]
  1096 -> 86 [style=dashed label="enum-specifier"]
  1096 -> 607 [style=dashed label="explicit-specialization"]
  1096 -> 89 [style=dashed label="explicit-specifier"]
  1096 -> 608 [style=dashed label="function-definition"]
  1096 -> 92 [style=dashed label="function-specifier"]
  1096 -> 94 [style=dashed label="id-expression"]
  1096 -> 96 [style=dashed label="literal-operator-id"]
  1096 -> 609 [style=dashed label="member-declaration"]
  1096 -> 610 [style=dashed label="member-declarator"]
  1096 -> 611 [style=dashed label="member-declarator-list"]
  1096 -> 1497 [style=dashed label="member-specification"]
  1096 -> 100 [style=dashed label="namespace-alias"]
  1096 -> 103 [style=dashed label="namespace-name"]
  1096 -> 104 [style=dashed label="nested-name-specifier"]
  1096 -> 107 [style=dashed label="noptr-declarator"]
  1096 -> 613 [style=dashed label="opaque-enum-declaration"]
  1096 -> 109 [style=dashed label="operator-function-id"]
  1096 -> 110 [style=dashed label="placeholder-type-specifier"]
  1096 -> 111 [style=dashed label="ptr-declarator"]
  1096 -> 112 [style=dashed label="ptr-operator"]
  1096 -> 113 [style=dashed label="qualified-id"]
  1096 -> 115 [style=dashed label="simple-template-id"]
  1096 -> 116 [style=dashed label="simple-type-specifier"]
  1096 -> 614 [style=dashed label="static_assert-declaration"]
  1096 -> 118 [style=dashed label="storage-class-specifier"]
  1096 -> 615 [style=dashed label="template-declaration"]
  1096 -> 120 [style=dashed label="template-head"]
  1096 -> 121 [style=dashed label="template-id"]
  1096 -> 122 [style=dashed label="template-name"]
  1096 -> 124 [style=dashed label="type-constraint"]
  1096 -> 125 [style=dashed label="type-name"]
  1096 -> 126 [style=dashed label="type-specifier"]
  1096 -> 127 [style=dashed label="typedef-name"]
  1096 -> 128 [style=dashed label="typename-specifier"]
  1096 -> 130 [style=dashed label="unqualified-id"]
  1096 -> 616 [style=dashed label="using-declaration"]
  1096 -> 617 [style=dashed label="using-enum-declaration"]
  1096 -> "1096R621" [style=solid]
 "1096R621" [label="R621", fillcolor=3, shape=diamond, style=filled]
  1097 [label="State 1097\n\l584 member-declaration: attribute-specifier-seq ';' •\l"]
  1097 -> "1097R584" [style=solid]
 "1097R584" [label="R584", fillcolor=3, shape=diamond, style=filled]
  1098 [label="State 1098\n\l610 member-declarator: ':' • constant-expression\l612                  | attribute-specifier-seq ':' • constant-expression\l614                  | ':' • constant-expression brace-or-equal-initializer\l616                  | attribute-specifier-seq ':' • constant-expression brace-or-equal-initializer\l"]
  1098 -> 1 [style=solid label="IDENTIFIER"]
  1098 -> 361 [style=solid label="'+'"]
  1098 -> 362 [style=solid label="'-'"]
  1098 -> 363 [style=solid label="'('"]
  1098 -> 364 [style=solid label="'&'"]
  1098 -> 365 [style=solid label="\"::\""]
  1098 -> 366 [style=solid label="'['"]
  1098 -> 367 [style=solid label="\"co_await\""]
  1098 -> 368 [style=solid label="'0'"]
  1098 -> 369 [style=solid label="'1'"]
  1098 -> 370 [style=solid label="\"0b\""]
  1098 -> 371 [style=solid label="\"0B\""]
  1098 -> 372 [style=solid label="'\\''"]
  1098 -> 373 [style=solid label="\"false\""]
  1098 -> 374 [style=solid label="\"true\""]
  1098 -> 375 [style=solid label="\"noexcept\""]
  1098 -> 17 [style=solid label="\"operator\""]
  1098 -> 26 [style=solid label="\"decltype\""]
  1098 -> 376 [style=solid label="\"delete\""]
  1098 -> 377 [style=solid label="'.'"]
  1098 -> 378 [style=solid label="'2'"]
  1098 -> 379 [style=solid label="'3'"]
  1098 -> 380 [style=solid label="'4'"]
  1098 -> 381 [style=solid label="'5'"]
  1098 -> 382 [style=solid label="'6'"]
  1098 -> 383 [style=solid label="'7'"]
  1098 -> 384 [style=solid label="'8'"]
  1098 -> 385 [style=solid label="'9'"]
  1098 -> 185 [style=solid label="\"u8\""]
  1098 -> 186 [style=solid label="'u'"]
  1098 -> 187 [style=solid label="'U'"]
  1098 -> 188 [style=solid label="'L'"]
  1098 -> 386 [style=solid label="'*'"]
  1098 -> 203 [style=solid label="'\"'"]
  1098 -> 387 [style=solid label="\"0x\""]
  1098 -> 388 [style=solid label="\"0X\""]
  1098 -> 389 [style=solid label="\"requires\""]
  1098 -> 390 [style=solid label="\"new\""]
  1098 -> 391 [style=solid label="'~'"]
  1098 -> 392 [style=solid label="'!'"]
  1098 -> 393 [style=solid label="\"++\""]
  1098 -> 394 [style=solid label="\"--\""]
  1098 -> 395 [style=solid label="\"this\""]
  1098 -> 37 [style=solid label="\"auto\""]
  1098 -> 396 [style=solid label="\"nullptr\""]
  1098 -> 397 [style=solid label="\"dynamic_cast\""]
  1098 -> 398 [style=solid label="\"static_cast\""]
  1098 -> 399 [style=solid label="\"reinterpret_cast\""]
  1098 -> 400 [style=solid label="\"const_cast\""]
  1098 -> 401 [style=solid label="\"typeid\""]
  1098 -> 38 [style=solid label="\"char\""]
  1098 -> 39 [style=solid label="\"char8_t\""]
  1098 -> 40 [style=solid label="\"char16_t\""]
  1098 -> 41 [style=solid label="\"char32_t\""]
  1098 -> 42 [style=solid label="\"wchar_t\""]
  1098 -> 43 [style=solid label="\"bool\""]
  1098 -> 44 [style=solid label="\"short\""]
  1098 -> 45 [style=solid label="\"int\""]
  1098 -> 46 [style=solid label="\"long\""]
  1098 -> 47 [style=solid label="\"signed\""]
  1098 -> 48 [style=solid label="\"unsigned\""]
  1098 -> 49 [style=solid label="\"float\""]
  1098 -> 50 [style=solid label="\"double\""]
  1098 -> 51 [style=solid label="\"void\""]
  1098 -> 209 [style=solid label="'R'"]
  1098 -> 56 [style=solid label="\"typename\""]
  1098 -> 402 [style=solid label="\"sizeof\""]
  1098 -> 403 [style=solid label="\"alignof\""]
  1098 -> 404 [style=dashed label="additive-expression"]
  1098 -> 405 [style=dashed label="and-expression"]
  1098 -> 406 [style=dashed label="await-expression"]
  1098 -> 407 [style=dashed label="binary-literal"]
  1098 -> 408 [style=dashed label="boolean-literal"]
  1098 -> 409 [style=dashed label="cast-expression"]
  1098 -> 410 [style=dashed label="character-literal"]
  1098 -> 66 [style=dashed label="class-name"]
  1098 -> 411 [style=dashed label="compare-expression"]
  1098 -> 68 [style=dashed label="concept-name"]
  1098 -> 412 [style=dashed label="conditional-expression"]
  1098 -> 1498 [style=dashed label="constant-expression"]
  1098 -> 69 [style=dashed label="conversion-function-id"]
  1098 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1098 -> 415 [style=dashed label="decimal-literal"]
  1098 -> 77 [style=dashed label="decltype-specifier"]
  1098 -> 416 [style=dashed label="delete-expression"]
  1098 -> 417 [style=dashed label="digit"]
  1098 -> 418 [style=dashed label="digit-sequence"]
  1098 -> 419 [style=dashed label="encoding-prefix"]
  1098 -> 85 [style=dashed label="enum-name"]
  1098 -> 420 [style=dashed label="equality-expression"]
  1098 -> 421 [style=dashed label="exclusive-or-expression"]
  1098 -> 422 [style=dashed label="floating-point-literal"]
  1098 -> 423 [style=dashed label="fold-expression"]
  1098 -> 424 [style=dashed label="fractional-constant"]
  1098 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1098 -> 426 [style=dashed label="hexadecimal-literal"]
  1098 -> 427 [style=dashed label="hexadecimal-prefix"]
  1098 -> 428 [style=dashed label="id-expression"]
  1098 -> 429 [style=dashed label="inclusive-or-expression"]
  1098 -> 430 [style=dashed label="integer-literal"]
  1098 -> 431 [style=dashed label="lambda-expression"]
  1098 -> 432 [style=dashed label="lambda-introducer"]
  1098 -> 433 [style=dashed label="literal"]
  1098 -> 96 [style=dashed label="literal-operator-id"]
  1098 -> 434 [style=dashed label="logical-and-expression"]
  1098 -> 435 [style=dashed label="logical-or-expression"]
  1098 -> 436 [style=dashed label="multiplicative-expression"]
  1098 -> 100 [style=dashed label="namespace-alias"]
  1098 -> 103 [style=dashed label="namespace-name"]
  1098 -> 437 [style=dashed label="nested-name-specifier"]
  1098 -> 438 [style=dashed label="new-expression"]
  1098 -> 439 [style=dashed label="noexcept-expression"]
  1098 -> 440 [style=dashed label="nonzero-digit"]
  1098 -> 441 [style=dashed label="octal-literal"]
  1098 -> 109 [style=dashed label="operator-function-id"]
  1098 -> 110 [style=dashed label="placeholder-type-specifier"]
  1098 -> 442 [style=dashed label="pm-expression"]
  1098 -> 443 [style=dashed label="pointer-literal"]
  1098 -> 444 [style=dashed label="postfix-expression"]
  1098 -> 445 [style=dashed label="primary-expression"]
  1098 -> 113 [style=dashed label="qualified-id"]
  1098 -> 446 [style=dashed label="relational-expression"]
  1098 -> 447 [style=dashed label="requires-expression"]
  1098 -> 448 [style=dashed label="shift-expression"]
  1098 -> 115 [style=dashed label="simple-template-id"]
  1098 -> 534 [style=dashed label="simple-type-specifier"]
  1098 -> 450 [style=dashed label="string-literal"]
  1098 -> 121 [style=dashed label="template-id"]
  1098 -> 216 [style=dashed label="template-name"]
  1098 -> 124 [style=dashed label="type-constraint"]
  1098 -> 125 [style=dashed label="type-name"]
  1098 -> 127 [style=dashed label="typedef-name"]
  1098 -> 536 [style=dashed label="typename-specifier"]
  1098 -> 454 [style=dashed label="unary-expression"]
  1098 -> 455 [style=dashed label="unary-operator"]
  1098 -> 130 [style=dashed label="unqualified-id"]
  1098 -> 456 [style=dashed label="user-defined-character-literal"]
  1098 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1098 -> 458 [style=dashed label="user-defined-integer-literal"]
  1098 -> 459 [style=dashed label="user-defined-literal"]
  1098 -> 460 [style=dashed label="user-defined-string-literal"]
  1099 [label="State 1099\n\l 53 attribute-specifier-seq: attribute-specifier-seq attribute-specifier •\l 54                        | attribute-specifier •\l"]
  1099 -> "1099R53" [style=solid]
 "1099R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  1099 -> "1099R54d" [label="[\"alignas\", '[', ':']", style=solid]
 "1099R54d" [label="R54", fillcolor=5, shape=diamond, style=filled]
  1100 [label="State 1100\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l612 member-declarator: attribute-specifier-seq • ':' constant-expression\l616                  | attribute-specifier-seq • ':' constant-expression brace-or-equal-initializer\l"]
  1100 -> 4 [style=solid label="\"alignas\""]
  1100 -> 10 [style=solid label="'['"]
  1100 -> 1499 [style=solid label="':'"]
  1100 -> 58 [style=dashed label="alignment-specifier"]
  1100 -> 265 [style=dashed label="attribute-specifier"]
  1101 [label="State 1101\n\l400 function-definition: attribute-specifier-seq decl-specifier-seq • declarator function-body\l404                    | attribute-specifier-seq decl-specifier-seq • declarator virt-specifier-seq function-body\l408                    | attribute-specifier-seq decl-specifier-seq • declarator requires-clause function-body\l586 member-declaration: attribute-specifier-seq decl-specifier-seq • ';'\l590                   | attribute-specifier-seq decl-specifier-seq • member-declarator-list ';'\l"]
  1101 -> 1104 [style=solid label="IDENTIFIER"]
  1101 -> 1500 [style=solid label="';'"]
  1101 -> 4 [style=solid label="\"alignas\""]
  1101 -> 5 [style=solid label="'('"]
  1101 -> 6 [style=solid label="\"...\""]
  1101 -> 7 [style=solid label="'&'"]
  1101 -> 9 [style=solid label="\"::\""]
  1101 -> 10 [style=solid label="'['"]
  1101 -> 597 [style=solid label="':'"]
  1101 -> 16 [style=solid label="\"&&\""]
  1101 -> 17 [style=solid label="\"operator\""]
  1101 -> 135 [style=solid label="\"decltype\""]
  1101 -> 32 [style=solid label="'*'"]
  1101 -> 36 [style=solid label="'~'"]
  1101 -> 58 [style=dashed label="alignment-specifier"]
  1101 -> 61 [style=dashed label="attribute-specifier"]
  1101 -> 1100 [style=dashed label="attribute-specifier-seq"]
  1101 -> 66 [style=dashed label="class-name"]
  1101 -> 69 [style=dashed label="conversion-function-id"]
  1101 -> 1501 [style=dashed label="declarator"]
  1101 -> 76 [style=dashed label="declarator-id"]
  1101 -> 139 [style=dashed label="decltype-specifier"]
  1101 -> 85 [style=dashed label="enum-name"]
  1101 -> 94 [style=dashed label="id-expression"]
  1101 -> 96 [style=dashed label="literal-operator-id"]
  1101 -> 610 [style=dashed label="member-declarator"]
  1101 -> 1502 [style=dashed label="member-declarator-list"]
  1101 -> 100 [style=dashed label="namespace-alias"]
  1101 -> 103 [style=dashed label="namespace-name"]
  1101 -> 149 [style=dashed label="nested-name-specifier"]
  1101 -> 107 [style=dashed label="noptr-declarator"]
  1101 -> 109 [style=dashed label="operator-function-id"]
  1101 -> 111 [style=dashed label="ptr-declarator"]
  1101 -> 112 [style=dashed label="ptr-operator"]
  1101 -> 113 [style=dashed label="qualified-id"]
  1101 -> 115 [style=dashed label="simple-template-id"]
  1101 -> 121 [style=dashed label="template-id"]
  1101 -> 143 [style=dashed label="template-name"]
  1101 -> 144 [style=dashed label="type-name"]
  1101 -> 127 [style=dashed label="typedef-name"]
  1101 -> 130 [style=dashed label="unqualified-id"]
  1102 [label="State 1102\n\l398 function-definition: attribute-specifier-seq declarator • function-body\l402                    | attribute-specifier-seq declarator • virt-specifier-seq function-body\l406                    | attribute-specifier-seq declarator • requires-clause function-body\l602 member-declarator: declarator •\l603                  | declarator • virt-specifier-seq\l604                  | declarator • pure-specifier\l605                  | declarator • virt-specifier-seq pure-specifier\l606                  | declarator • requires-clause\l607                  | declarator •\l608                  | declarator • brace-or-equal-initializer\l"]
  1102 -> 1108 [style=solid label="'='"]
  1102 -> 293 [style=solid label="':'"]
  1102 -> 648 [style=solid label="'{'"]
  1102 -> 295 [style=solid label="\"final\""]
  1102 -> 296 [style=solid label="\"try\""]
  1102 -> 297 [style=solid label="\"requires\""]
  1102 -> 298 [style=solid label="\"override\""]
  1102 -> 1109 [style=dashed label="brace-or-equal-initializer"]
  1102 -> 650 [style=dashed label="braced-init-list"]
  1102 -> 299 [style=dashed label="compound-statement"]
  1102 -> 300 [style=dashed label="ctor-initializer"]
  1102 -> 586 [style=dashed label="function-body"]
  1102 -> 302 [style=dashed label="function-try-block"]
  1102 -> 1110 [style=dashed label="pure-specifier"]
  1102 -> 1503 [style=dashed label="requires-clause"]
  1102 -> 304 [style=dashed label="virt-specifier"]
  1102 -> 1504 [style=dashed label="virt-specifier-seq"]
  1102 -> "1102R602" [style=solid]
 "1102R602" [label="R602", fillcolor=3, shape=diamond, style=filled]
  1102 -> "1102R607d" [label="[';', ',']", style=solid]
 "1102R607d" [label="R607", fillcolor=5, shape=diamond, style=filled]
  1103 [label="State 1103\n\l588 member-declaration: attribute-specifier-seq member-declarator-list • ';'\l618 member-declarator-list: member-declarator-list • ',' member-declarator\l"]
  1103 -> 1505 [style=solid label="';'"]
  1103 -> 1115 [style=solid label="','"]
  1104 [label="State 1104\n\l145 class-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l609 member-declarator: IDENTIFIER • ':' constant-expression\l611                  | IDENTIFIER • attribute-specifier-seq ':' constant-expression\l613                  | IDENTIFIER • ':' constant-expression brace-or-equal-initializer\l615                  | IDENTIFIER • attribute-specifier-seq ':' constant-expression brace-or-equal-initializer\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l1154 unqualified-id: IDENTIFIER •\l"]
  1104 -> 4 [style=solid label="\"alignas\""]
  1104 -> 10 [style=solid label="'['"]
  1104 -> 1093 [style=solid label="':'"]
  1104 -> 58 [style=dashed label="alignment-specifier"]
  1104 -> 61 [style=dashed label="attribute-specifier"]
  1104 -> 1094 [style=dashed label="attribute-specifier-seq"]
  1104 -> "1104R145" [label="[\"::\"]", style=solid]
 "1104R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  1104 -> "1104R297d" [label="[\"::\"]", style=solid]
 "1104R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  1104 -> "1104R651d" [label="[\"::\"]", style=solid]
 "1104R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  1104 -> "1104R657d" [label="[\"::\"]", style=solid]
 "1104R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  1104 -> "1104R1066" [label="['<']", style=solid]
 "1104R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  1104 -> "1104R1124d" [label="[\"::\"]", style=solid]
 "1104R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  1104 -> "1104R1154d" [label="[\"alignas\", '[', ':']", style=solid]
 "1104R1154d" [label="R1154", fillcolor=5, shape=diamond, style=filled]
  1104 -> "1104R1154" [label="[]", style=solid]
 "1104R1154" [label="R1154", fillcolor=3, shape=diamond, style=filled]
  1105 [label="State 1105\n\l587 member-declaration: decl-specifier-seq ';' •\l"]
  1105 -> "1105R587" [style=solid]
 "1105R587" [label="R587", fillcolor=3, shape=diamond, style=filled]
  1106 [label="State 1106\n\l401 function-definition: decl-specifier-seq declarator • function-body\l405                    | decl-specifier-seq declarator • virt-specifier-seq function-body\l409                    | decl-specifier-seq declarator • requires-clause function-body\l602 member-declarator: declarator •\l603                  | declarator • virt-specifier-seq\l604                  | declarator • pure-specifier\l605                  | declarator • virt-specifier-seq pure-specifier\l606                  | declarator • requires-clause\l607                  | declarator •\l608                  | declarator • brace-or-equal-initializer\l"]
  1106 -> 1108 [style=solid label="'='"]
  1106 -> 293 [style=solid label="':'"]
  1106 -> 648 [style=solid label="'{'"]
  1106 -> 295 [style=solid label="\"final\""]
  1106 -> 296 [style=solid label="\"try\""]
  1106 -> 297 [style=solid label="\"requires\""]
  1106 -> 298 [style=solid label="\"override\""]
  1106 -> 1109 [style=dashed label="brace-or-equal-initializer"]
  1106 -> 650 [style=dashed label="braced-init-list"]
  1106 -> 299 [style=dashed label="compound-statement"]
  1106 -> 300 [style=dashed label="ctor-initializer"]
  1106 -> 651 [style=dashed label="function-body"]
  1106 -> 302 [style=dashed label="function-try-block"]
  1106 -> 1110 [style=dashed label="pure-specifier"]
  1106 -> 1506 [style=dashed label="requires-clause"]
  1106 -> 304 [style=dashed label="virt-specifier"]
  1106 -> 1507 [style=dashed label="virt-specifier-seq"]
  1106 -> "1106R602" [style=solid]
 "1106R602" [label="R602", fillcolor=3, shape=diamond, style=filled]
  1106 -> "1106R607d" [label="[';', ',']", style=solid]
 "1106R607d" [label="R607", fillcolor=5, shape=diamond, style=filled]
  1107 [label="State 1107\n\l591 member-declaration: decl-specifier-seq member-declarator-list • ';'\l618 member-declarator-list: member-declarator-list • ',' member-declarator\l"]
  1107 -> 1508 [style=solid label="';'"]
  1107 -> 1115 [style=solid label="','"]
  1108 [label="State 1108\n\l106 brace-or-equal-initializer: '=' • initializer-clause\l396 function-body: '=' • \"default\" ';'\l397              | '=' • \"delete\" ';'\l909 pure-specifier: '=' • '0'\l"]
  1108 -> 1 [style=solid label="IDENTIFIER"]
  1108 -> 361 [style=solid label="'+'"]
  1108 -> 362 [style=solid label="'-'"]
  1108 -> 363 [style=solid label="'('"]
  1108 -> 364 [style=solid label="'&'"]
  1108 -> 365 [style=solid label="\"::\""]
  1108 -> 366 [style=solid label="'['"]
  1108 -> 367 [style=solid label="\"co_await\""]
  1108 -> 939 [style=solid label="'{'"]
  1108 -> 1509 [style=solid label="'0'"]
  1108 -> 369 [style=solid label="'1'"]
  1108 -> 370 [style=solid label="\"0b\""]
  1108 -> 371 [style=solid label="\"0B\""]
  1108 -> 372 [style=solid label="'\\''"]
  1108 -> 373 [style=solid label="\"false\""]
  1108 -> 374 [style=solid label="\"true\""]
  1108 -> 375 [style=solid label="\"noexcept\""]
  1108 -> 17 [style=solid label="\"operator\""]
  1108 -> 26 [style=solid label="\"decltype\""]
  1108 -> 1140 [style=solid label="\"delete\""]
  1108 -> 377 [style=solid label="'.'"]
  1108 -> 378 [style=solid label="'2'"]
  1108 -> 379 [style=solid label="'3'"]
  1108 -> 380 [style=solid label="'4'"]
  1108 -> 381 [style=solid label="'5'"]
  1108 -> 382 [style=solid label="'6'"]
  1108 -> 383 [style=solid label="'7'"]
  1108 -> 384 [style=solid label="'8'"]
  1108 -> 385 [style=solid label="'9'"]
  1108 -> 185 [style=solid label="\"u8\""]
  1108 -> 186 [style=solid label="'u'"]
  1108 -> 187 [style=solid label="'U'"]
  1108 -> 188 [style=solid label="'L'"]
  1108 -> 386 [style=solid label="'*'"]
  1108 -> 659 [style=solid label="\"default\""]
  1108 -> 203 [style=solid label="'\"'"]
  1108 -> 387 [style=solid label="\"0x\""]
  1108 -> 388 [style=solid label="\"0X\""]
  1108 -> 389 [style=solid label="\"requires\""]
  1108 -> 390 [style=solid label="\"new\""]
  1108 -> 391 [style=solid label="'~'"]
  1108 -> 392 [style=solid label="'!'"]
  1108 -> 393 [style=solid label="\"++\""]
  1108 -> 394 [style=solid label="\"--\""]
  1108 -> 395 [style=solid label="\"this\""]
  1108 -> 37 [style=solid label="\"auto\""]
  1108 -> 396 [style=solid label="\"nullptr\""]
  1108 -> 397 [style=solid label="\"dynamic_cast\""]
  1108 -> 398 [style=solid label="\"static_cast\""]
  1108 -> 399 [style=solid label="\"reinterpret_cast\""]
  1108 -> 400 [style=solid label="\"const_cast\""]
  1108 -> 401 [style=solid label="\"typeid\""]
  1108 -> 38 [style=solid label="\"char\""]
  1108 -> 39 [style=solid label="\"char8_t\""]
  1108 -> 40 [style=solid label="\"char16_t\""]
  1108 -> 41 [style=solid label="\"char32_t\""]
  1108 -> 42 [style=solid label="\"wchar_t\""]
  1108 -> 43 [style=solid label="\"bool\""]
  1108 -> 44 [style=solid label="\"short\""]
  1108 -> 45 [style=solid label="\"int\""]
  1108 -> 46 [style=solid label="\"long\""]
  1108 -> 47 [style=solid label="\"signed\""]
  1108 -> 48 [style=solid label="\"unsigned\""]
  1108 -> 49 [style=solid label="\"float\""]
  1108 -> 50 [style=solid label="\"double\""]
  1108 -> 51 [style=solid label="\"void\""]
  1108 -> 209 [style=solid label="'R'"]
  1108 -> 528 [style=solid label="\"throw\""]
  1108 -> 56 [style=solid label="\"typename\""]
  1108 -> 402 [style=solid label="\"sizeof\""]
  1108 -> 403 [style=solid label="\"alignof\""]
  1108 -> 529 [style=solid label="\"co_yield\""]
  1108 -> 404 [style=dashed label="additive-expression"]
  1108 -> 405 [style=dashed label="and-expression"]
  1108 -> 1141 [style=dashed label="assignment-expression"]
  1108 -> 406 [style=dashed label="await-expression"]
  1108 -> 407 [style=dashed label="binary-literal"]
  1108 -> 408 [style=dashed label="boolean-literal"]
  1108 -> 1142 [style=dashed label="braced-init-list"]
  1108 -> 409 [style=dashed label="cast-expression"]
  1108 -> 410 [style=dashed label="character-literal"]
  1108 -> 66 [style=dashed label="class-name"]
  1108 -> 411 [style=dashed label="compare-expression"]
  1108 -> 68 [style=dashed label="concept-name"]
  1108 -> 531 [style=dashed label="conditional-expression"]
  1108 -> 69 [style=dashed label="conversion-function-id"]
  1108 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1108 -> 415 [style=dashed label="decimal-literal"]
  1108 -> 77 [style=dashed label="decltype-specifier"]
  1108 -> 416 [style=dashed label="delete-expression"]
  1108 -> 417 [style=dashed label="digit"]
  1108 -> 418 [style=dashed label="digit-sequence"]
  1108 -> 419 [style=dashed label="encoding-prefix"]
  1108 -> 85 [style=dashed label="enum-name"]
  1108 -> 420 [style=dashed label="equality-expression"]
  1108 -> 421 [style=dashed label="exclusive-or-expression"]
  1108 -> 422 [style=dashed label="floating-point-literal"]
  1108 -> 423 [style=dashed label="fold-expression"]
  1108 -> 424 [style=dashed label="fractional-constant"]
  1108 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1108 -> 426 [style=dashed label="hexadecimal-literal"]
  1108 -> 427 [style=dashed label="hexadecimal-prefix"]
  1108 -> 428 [style=dashed label="id-expression"]
  1108 -> 429 [style=dashed label="inclusive-or-expression"]
  1108 -> 1143 [style=dashed label="initializer-clause"]
  1108 -> 430 [style=dashed label="integer-literal"]
  1108 -> 431 [style=dashed label="lambda-expression"]
  1108 -> 432 [style=dashed label="lambda-introducer"]
  1108 -> 433 [style=dashed label="literal"]
  1108 -> 96 [style=dashed label="literal-operator-id"]
  1108 -> 434 [style=dashed label="logical-and-expression"]
  1108 -> 533 [style=dashed label="logical-or-expression"]
  1108 -> 436 [style=dashed label="multiplicative-expression"]
  1108 -> 100 [style=dashed label="namespace-alias"]
  1108 -> 103 [style=dashed label="namespace-name"]
  1108 -> 437 [style=dashed label="nested-name-specifier"]
  1108 -> 438 [style=dashed label="new-expression"]
  1108 -> 439 [style=dashed label="noexcept-expression"]
  1108 -> 440 [style=dashed label="nonzero-digit"]
  1108 -> 441 [style=dashed label="octal-literal"]
  1108 -> 109 [style=dashed label="operator-function-id"]
  1108 -> 110 [style=dashed label="placeholder-type-specifier"]
  1108 -> 442 [style=dashed label="pm-expression"]
  1108 -> 443 [style=dashed label="pointer-literal"]
  1108 -> 444 [style=dashed label="postfix-expression"]
  1108 -> 445 [style=dashed label="primary-expression"]
  1108 -> 113 [style=dashed label="qualified-id"]
  1108 -> 446 [style=dashed label="relational-expression"]
  1108 -> 447 [style=dashed label="requires-expression"]
  1108 -> 448 [style=dashed label="shift-expression"]
  1108 -> 115 [style=dashed label="simple-template-id"]
  1108 -> 534 [style=dashed label="simple-type-specifier"]
  1108 -> 450 [style=dashed label="string-literal"]
  1108 -> 121 [style=dashed label="template-id"]
  1108 -> 216 [style=dashed label="template-name"]
  1108 -> 535 [style=dashed label="throw-expression"]
  1108 -> 124 [style=dashed label="type-constraint"]
  1108 -> 125 [style=dashed label="type-name"]
  1108 -> 127 [style=dashed label="typedef-name"]
  1108 -> 536 [style=dashed label="typename-specifier"]
  1108 -> 454 [style=dashed label="unary-expression"]
  1108 -> 455 [style=dashed label="unary-operator"]
  1108 -> 130 [style=dashed label="unqualified-id"]
  1108 -> 456 [style=dashed label="user-defined-character-literal"]
  1108 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1108 -> 458 [style=dashed label="user-defined-integer-literal"]
  1108 -> 459 [style=dashed label="user-defined-literal"]
  1108 -> 460 [style=dashed label="user-defined-string-literal"]
  1108 -> 537 [style=dashed label="yield-expression"]
  1109 [label="State 1109\n\l608 member-declarator: declarator brace-or-equal-initializer •\l"]
  1109 -> "1109R608" [style=solid]
 "1109R608" [label="R608", fillcolor=3, shape=diamond, style=filled]
  1110 [label="State 1110\n\l604 member-declarator: declarator pure-specifier •\l"]
  1110 -> "1110R604" [style=solid]
 "1110R604" [label="R604", fillcolor=3, shape=diamond, style=filled]
  1111 [label="State 1111\n\l407 function-definition: declarator requires-clause • function-body\l606 member-declarator: declarator requires-clause •\l"]
  1111 -> 291 [style=solid label="'='"]
  1111 -> 293 [style=solid label="':'"]
  1111 -> 294 [style=solid label="'{'"]
  1111 -> 296 [style=solid label="\"try\""]
  1111 -> 299 [style=dashed label="compound-statement"]
  1111 -> 300 [style=dashed label="ctor-initializer"]
  1111 -> 705 [style=dashed label="function-body"]
  1111 -> 302 [style=dashed label="function-try-block"]
  1111 -> "1111R606" [style=solid]
 "1111R606" [label="R606", fillcolor=3, shape=diamond, style=filled]
  1112 [label="State 1112\n\l403 function-definition: declarator virt-specifier-seq • function-body\l603 member-declarator: declarator virt-specifier-seq •\l605                  | declarator virt-specifier-seq • pure-specifier\l1193 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  1112 -> 1510 [style=solid label="'='"]
  1112 -> 293 [style=solid label="':'"]
  1112 -> 294 [style=solid label="'{'"]
  1112 -> 295 [style=solid label="\"final\""]
  1112 -> 296 [style=solid label="\"try\""]
  1112 -> 298 [style=solid label="\"override\""]
  1112 -> 299 [style=dashed label="compound-statement"]
  1112 -> 300 [style=dashed label="ctor-initializer"]
  1112 -> 706 [style=dashed label="function-body"]
  1112 -> 302 [style=dashed label="function-try-block"]
  1112 -> 1511 [style=dashed label="pure-specifier"]
  1112 -> 707 [style=dashed label="virt-specifier"]
  1112 -> "1112R603" [style=solid]
 "1112R603" [label="R603", fillcolor=3, shape=diamond, style=filled]
  1113 [label="State 1113\n\l620 member-specification: member-declaration member-specification •\l"]
  1113 -> "1113R620" [style=solid]
 "1113R620" [label="R620", fillcolor=3, shape=diamond, style=filled]
  1114 [label="State 1114\n\l589 member-declaration: member-declarator-list ';' •\l"]
  1114 -> "1114R589" [style=solid]
 "1114R589" [label="R589", fillcolor=3, shape=diamond, style=filled]
  1115 [label="State 1115\n\l618 member-declarator-list: member-declarator-list ',' • member-declarator\l"]
  1115 -> 1104 [style=solid label="IDENTIFIER"]
  1115 -> 4 [style=solid label="\"alignas\""]
  1115 -> 5 [style=solid label="'('"]
  1115 -> 6 [style=solid label="\"...\""]
  1115 -> 7 [style=solid label="'&'"]
  1115 -> 9 [style=solid label="\"::\""]
  1115 -> 10 [style=solid label="'['"]
  1115 -> 597 [style=solid label="':'"]
  1115 -> 16 [style=solid label="\"&&\""]
  1115 -> 17 [style=solid label="\"operator\""]
  1115 -> 135 [style=solid label="\"decltype\""]
  1115 -> 32 [style=solid label="'*'"]
  1115 -> 36 [style=solid label="'~'"]
  1115 -> 58 [style=dashed label="alignment-specifier"]
  1115 -> 61 [style=dashed label="attribute-specifier"]
  1115 -> 1100 [style=dashed label="attribute-specifier-seq"]
  1115 -> 66 [style=dashed label="class-name"]
  1115 -> 69 [style=dashed label="conversion-function-id"]
  1115 -> 1512 [style=dashed label="declarator"]
  1115 -> 76 [style=dashed label="declarator-id"]
  1115 -> 139 [style=dashed label="decltype-specifier"]
  1115 -> 85 [style=dashed label="enum-name"]
  1115 -> 94 [style=dashed label="id-expression"]
  1115 -> 96 [style=dashed label="literal-operator-id"]
  1115 -> 1513 [style=dashed label="member-declarator"]
  1115 -> 100 [style=dashed label="namespace-alias"]
  1115 -> 103 [style=dashed label="namespace-name"]
  1115 -> 149 [style=dashed label="nested-name-specifier"]
  1115 -> 107 [style=dashed label="noptr-declarator"]
  1115 -> 109 [style=dashed label="operator-function-id"]
  1115 -> 111 [style=dashed label="ptr-declarator"]
  1115 -> 112 [style=dashed label="ptr-operator"]
  1115 -> 113 [style=dashed label="qualified-id"]
  1115 -> 115 [style=dashed label="simple-template-id"]
  1115 -> 121 [style=dashed label="template-id"]
  1115 -> 143 [style=dashed label="template-name"]
  1115 -> 144 [style=dashed label="type-name"]
  1115 -> 127 [style=dashed label="typedef-name"]
  1115 -> 130 [style=dashed label="unqualified-id"]
  1116 [label="State 1116\n\l152 class-specifier: class-head '{' member-specification '}' •\l"]
  1116 -> "1116R152" [style=solid]
 "1116R152" [label="R152", fillcolor=3, shape=diamond, style=filled]
  1117 [label="State 1117\n\l 74 base-specifier: \"virtual\" access-specifier • class-or-decltype\l"]
  1117 -> 258 [style=solid label="IDENTIFIER"]
  1117 -> 9 [style=solid label="\"::\""]
  1117 -> 135 [style=solid label="\"decltype\""]
  1117 -> 66 [style=dashed label="class-name"]
  1117 -> 1514 [style=dashed label="class-or-decltype"]
  1117 -> 624 [style=dashed label="decltype-specifier"]
  1117 -> 85 [style=dashed label="enum-name"]
  1117 -> 100 [style=dashed label="namespace-alias"]
  1117 -> 103 [style=dashed label="namespace-name"]
  1117 -> 625 [style=dashed label="nested-name-specifier"]
  1117 -> 142 [style=dashed label="simple-template-id"]
  1117 -> 143 [style=dashed label="template-name"]
  1117 -> 626 [style=dashed label="type-name"]
  1117 -> 127 [style=dashed label="typedef-name"]
  1118 [label="State 1118\n\l 72 base-specifier: \"virtual\" class-or-decltype •\l"]
  1118 -> "1118R72" [style=solid]
 "1118R72" [label="R72", fillcolor=3, shape=diamond, style=filled]
  1119 [label="State 1119\n\l 78 base-specifier: access-specifier \"virtual\" • class-or-decltype\l"]
  1119 -> 258 [style=solid label="IDENTIFIER"]
  1119 -> 9 [style=solid label="\"::\""]
  1119 -> 135 [style=solid label="\"decltype\""]
  1119 -> 66 [style=dashed label="class-name"]
  1119 -> 1515 [style=dashed label="class-or-decltype"]
  1119 -> 624 [style=dashed label="decltype-specifier"]
  1119 -> 85 [style=dashed label="enum-name"]
  1119 -> 100 [style=dashed label="namespace-alias"]
  1119 -> 103 [style=dashed label="namespace-name"]
  1119 -> 625 [style=dashed label="nested-name-specifier"]
  1119 -> 142 [style=dashed label="simple-template-id"]
  1119 -> 143 [style=dashed label="template-name"]
  1119 -> 626 [style=dashed label="type-name"]
  1119 -> 127 [style=dashed label="typedef-name"]
  1120 [label="State 1120\n\l 76 base-specifier: access-specifier class-or-decltype •\l"]
  1120 -> "1120R76" [style=solid]
 "1120R76" [label="R76", fillcolor=3, shape=diamond, style=filled]
  1121 [label="State 1121\n\l 71 base-specifier: attribute-specifier-seq \"virtual\" • class-or-decltype\l 73               | attribute-specifier-seq \"virtual\" • access-specifier class-or-decltype\l"]
  1121 -> 258 [style=solid label="IDENTIFIER"]
  1121 -> 592 [style=solid label="\"private\""]
  1121 -> 593 [style=solid label="\"protected\""]
  1121 -> 594 [style=solid label="\"public\""]
  1121 -> 9 [style=solid label="\"::\""]
  1121 -> 135 [style=solid label="\"decltype\""]
  1121 -> 1516 [style=dashed label="access-specifier"]
  1121 -> 66 [style=dashed label="class-name"]
  1121 -> 1517 [style=dashed label="class-or-decltype"]
  1121 -> 624 [style=dashed label="decltype-specifier"]
  1121 -> 85 [style=dashed label="enum-name"]
  1121 -> 100 [style=dashed label="namespace-alias"]
  1121 -> 103 [style=dashed label="namespace-name"]
  1121 -> 625 [style=dashed label="nested-name-specifier"]
  1121 -> 142 [style=dashed label="simple-template-id"]
  1121 -> 143 [style=dashed label="template-name"]
  1121 -> 626 [style=dashed label="type-name"]
  1121 -> 127 [style=dashed label="typedef-name"]
  1122 [label="State 1122\n\l 75 base-specifier: attribute-specifier-seq access-specifier • class-or-decltype\l 77               | attribute-specifier-seq access-specifier • \"virtual\" class-or-decltype\l"]
  1122 -> 258 [style=solid label="IDENTIFIER"]
  1122 -> 9 [style=solid label="\"::\""]
  1122 -> 1518 [style=solid label="\"virtual\""]
  1122 -> 135 [style=solid label="\"decltype\""]
  1122 -> 66 [style=dashed label="class-name"]
  1122 -> 1519 [style=dashed label="class-or-decltype"]
  1122 -> 624 [style=dashed label="decltype-specifier"]
  1122 -> 85 [style=dashed label="enum-name"]
  1122 -> 100 [style=dashed label="namespace-alias"]
  1122 -> 103 [style=dashed label="namespace-name"]
  1122 -> 625 [style=dashed label="nested-name-specifier"]
  1122 -> 142 [style=dashed label="simple-template-id"]
  1122 -> 143 [style=dashed label="template-name"]
  1122 -> 626 [style=dashed label="type-name"]
  1122 -> 127 [style=dashed label="typedef-name"]
  1123 [label="State 1123\n\l 69 base-specifier: attribute-specifier-seq class-or-decltype •\l"]
  1123 -> "1123R69" [style=solid]
 "1123R69" [label="R69", fillcolor=3, shape=diamond, style=filled]
  1124 [label="State 1124\n\l 80 base-specifier-list: base-specifier \"...\" •\l"]
  1124 -> "1124R80" [style=solid]
 "1124R80" [label="R80", fillcolor=3, shape=diamond, style=filled]
  1125 [label="State 1125\n\l 81 base-specifier-list: base-specifier-list ',' • base-specifier\l 82                    | base-specifier-list ',' • base-specifier \"...\"\l"]
  1125 -> 258 [style=solid label="IDENTIFIER"]
  1125 -> 592 [style=solid label="\"private\""]
  1125 -> 593 [style=solid label="\"protected\""]
  1125 -> 594 [style=solid label="\"public\""]
  1125 -> 4 [style=solid label="\"alignas\""]
  1125 -> 9 [style=solid label="\"::\""]
  1125 -> 10 [style=solid label="'['"]
  1125 -> 618 [style=solid label="\"virtual\""]
  1125 -> 135 [style=solid label="\"decltype\""]
  1125 -> 619 [style=dashed label="access-specifier"]
  1125 -> 58 [style=dashed label="alignment-specifier"]
  1125 -> 61 [style=dashed label="attribute-specifier"]
  1125 -> 620 [style=dashed label="attribute-specifier-seq"]
  1125 -> 1520 [style=dashed label="base-specifier"]
  1125 -> 66 [style=dashed label="class-name"]
  1125 -> 623 [style=dashed label="class-or-decltype"]
  1125 -> 624 [style=dashed label="decltype-specifier"]
  1125 -> 85 [style=dashed label="enum-name"]
  1125 -> 100 [style=dashed label="namespace-alias"]
  1125 -> 103 [style=dashed label="namespace-name"]
  1125 -> 625 [style=dashed label="nested-name-specifier"]
  1125 -> 142 [style=dashed label="simple-template-id"]
  1125 -> 143 [style=dashed label="template-name"]
  1125 -> 626 [style=dashed label="type-name"]
  1125 -> 127 [style=dashed label="typedef-name"]
  1126 [label="State 1126\n\l145 class-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l"]
  1126 -> 726 [style=solid label="\"::\""]
  1126 -> "1126R145" [style=solid]
 "1126R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  1126 -> "1126R297d" [label="['(', \"...\", ',', '{']", style=solid]
 "1126R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  1126 -> "1126R1066" [label="['<']", style=solid]
 "1126R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  1126 -> "1126R1124d" [label="['(', \"...\", ',', '{']", style=solid]
 "1126R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  1127 [label="State 1127\n\l149 class-or-decltype: nested-name-specifier \"template\" • simple-template-id\l665 nested-name-specifier: nested-name-specifier \"template\" • simple-template-id \"::\"\l"]
  1127 -> 315 [style=solid label="IDENTIFIER"]
  1127 -> 1521 [style=dashed label="simple-template-id"]
  1127 -> 143 [style=dashed label="template-name"]
  1128 [label="State 1128\n\l147 class-or-decltype: nested-name-specifier type-name •\l"]
  1128 -> "1128R147" [style=solid]
 "1128R147" [label="R147", fillcolor=3, shape=diamond, style=filled]
  1129 [label="State 1129\n\l133 class-head: class-key attribute-specifier-seq class-head-name base-clause •\l"]
  1129 -> "1129R133" [style=solid]
 "1129R133" [label="R133", fillcolor=3, shape=diamond, style=filled]
  1130 [label="State 1130\n\l131 class-head: class-key attribute-specifier-seq class-head-name class-virt-specifier •\l135           | class-key attribute-specifier-seq class-head-name class-virt-specifier • base-clause\l"]
  1130 -> 272 [style=solid label="':'"]
  1130 -> 1522 [style=dashed label="base-clause"]
  1130 -> "1130R131" [style=solid]
 "1130R131" [label="R131", fillcolor=3, shape=diamond, style=filled]
  1131 [label="State 1131\n\l145 class-name: IDENTIFIER •\l270 elaborated-type-specifier: class-key attribute-specifier-seq nested-name-specifier IDENTIFIER •\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l"]
  1131 -> 726 [style=solid label="\"::\""]
  1131 -> "1131R145" [label="[':', '{', \"final\"]", style=solid]
 "1131R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  1131 -> "1131R270d" [label="[\"::\", ':', '{']", style=solid]
 "1131R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  1131 -> "1131R270" [style=solid]
 "1131R270" [label="R270", fillcolor=3, shape=diamond, style=filled]
  1131 -> "1131R1066" [label="['<']", style=solid]
 "1131R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  1132 [label="State 1132\n\l146 class-name: simple-template-id •\l664 nested-name-specifier: nested-name-specifier simple-template-id • \"::\"\l"]
  1132 -> 733 [style=solid label="\"::\""]
  1132 -> "1132R146" [style=solid]
 "1132R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  1133 [label="State 1133\n\l134 class-head: class-key class-head-name class-virt-specifier base-clause •\l"]
  1133 -> "1133R134" [style=solid]
 "1133R134" [label="R134", fillcolor=3, shape=diamond, style=filled]
  1134 [label="State 1134\n\l273 elaborated-type-specifier: class-key nested-name-specifier \"template\" simple-template-id •\l665 nested-name-specifier: nested-name-specifier \"template\" simple-template-id • \"::\"\l"]
  1134 -> 1217 [style=solid label="\"::\""]
  1134 -> "1134R273d" [label="[\"::\"]", style=solid]
 "1134R273d" [label="R273", fillcolor=5, shape=diamond, style=filled]
  1134 -> "1134R273" [style=solid]
 "1134R273" [label="R273", fillcolor=3, shape=diamond, style=filled]
  1135 [label="State 1135\n\l1054 template-argument-list: template-argument \"...\" •\l"]
  1135 -> "1135R1054" [style=solid]
 "1135R1054" [label="R1054", fillcolor=3, shape=diamond, style=filled]
  1136 [label="State 1136\n\l1055 template-argument-list: template-argument-list ',' • template-argument\l1056                       | template-argument-list ',' • template-argument \"...\"\l"]
  1136 -> 1 [style=solid label="IDENTIFIER"]
  1136 -> 361 [style=solid label="'+'"]
  1136 -> 362 [style=solid label="'-'"]
  1136 -> 363 [style=solid label="'('"]
  1136 -> 364 [style=solid label="'&'"]
  1136 -> 365 [style=solid label="\"::\""]
  1136 -> 366 [style=solid label="'['"]
  1136 -> 367 [style=solid label="\"co_await\""]
  1136 -> 368 [style=solid label="'0'"]
  1136 -> 369 [style=solid label="'1'"]
  1136 -> 370 [style=solid label="\"0b\""]
  1136 -> 371 [style=solid label="\"0B\""]
  1136 -> 372 [style=solid label="'\\''"]
  1136 -> 373 [style=solid label="\"false\""]
  1136 -> 374 [style=solid label="\"true\""]
  1136 -> 12 [style=solid label="\"class\""]
  1136 -> 13 [style=solid label="\"struct\""]
  1136 -> 14 [style=solid label="\"union\""]
  1136 -> 375 [style=solid label="\"noexcept\""]
  1136 -> 17 [style=solid label="\"operator\""]
  1136 -> 18 [style=solid label="\"const\""]
  1136 -> 19 [style=solid label="\"volatile\""]
  1136 -> 26 [style=solid label="\"decltype\""]
  1136 -> 376 [style=solid label="\"delete\""]
  1136 -> 377 [style=solid label="'.'"]
  1136 -> 378 [style=solid label="'2'"]
  1136 -> 379 [style=solid label="'3'"]
  1136 -> 380 [style=solid label="'4'"]
  1136 -> 381 [style=solid label="'5'"]
  1136 -> 382 [style=solid label="'6'"]
  1136 -> 383 [style=solid label="'7'"]
  1136 -> 384 [style=solid label="'8'"]
  1136 -> 385 [style=solid label="'9'"]
  1136 -> 136 [style=solid label="\"enum\""]
  1136 -> 185 [style=solid label="\"u8\""]
  1136 -> 186 [style=solid label="'u'"]
  1136 -> 187 [style=solid label="'U'"]
  1136 -> 188 [style=solid label="'L'"]
  1136 -> 386 [style=solid label="'*'"]
  1136 -> 203 [style=solid label="'\"'"]
  1136 -> 387 [style=solid label="\"0x\""]
  1136 -> 388 [style=solid label="\"0X\""]
  1136 -> 389 [style=solid label="\"requires\""]
  1136 -> 390 [style=solid label="\"new\""]
  1136 -> 391 [style=solid label="'~'"]
  1136 -> 392 [style=solid label="'!'"]
  1136 -> 393 [style=solid label="\"++\""]
  1136 -> 394 [style=solid label="\"--\""]
  1136 -> 395 [style=solid label="\"this\""]
  1136 -> 37 [style=solid label="\"auto\""]
  1136 -> 396 [style=solid label="\"nullptr\""]
  1136 -> 397 [style=solid label="\"dynamic_cast\""]
  1136 -> 398 [style=solid label="\"static_cast\""]
  1136 -> 399 [style=solid label="\"reinterpret_cast\""]
  1136 -> 400 [style=solid label="\"const_cast\""]
  1136 -> 401 [style=solid label="\"typeid\""]
  1136 -> 38 [style=solid label="\"char\""]
  1136 -> 39 [style=solid label="\"char8_t\""]
  1136 -> 40 [style=solid label="\"char16_t\""]
  1136 -> 41 [style=solid label="\"char32_t\""]
  1136 -> 42 [style=solid label="\"wchar_t\""]
  1136 -> 43 [style=solid label="\"bool\""]
  1136 -> 44 [style=solid label="\"short\""]
  1136 -> 45 [style=solid label="\"int\""]
  1136 -> 46 [style=solid label="\"long\""]
  1136 -> 47 [style=solid label="\"signed\""]
  1136 -> 48 [style=solid label="\"unsigned\""]
  1136 -> 49 [style=solid label="\"float\""]
  1136 -> 50 [style=solid label="\"double\""]
  1136 -> 51 [style=solid label="\"void\""]
  1136 -> 209 [style=solid label="'R'"]
  1136 -> 56 [style=solid label="\"typename\""]
  1136 -> 402 [style=solid label="\"sizeof\""]
  1136 -> 403 [style=solid label="\"alignof\""]
  1136 -> 404 [style=dashed label="additive-expression"]
  1136 -> 405 [style=dashed label="and-expression"]
  1136 -> 406 [style=dashed label="await-expression"]
  1136 -> 407 [style=dashed label="binary-literal"]
  1136 -> 408 [style=dashed label="boolean-literal"]
  1136 -> 409 [style=dashed label="cast-expression"]
  1136 -> 410 [style=dashed label="character-literal"]
  1136 -> 210 [style=dashed label="class-key"]
  1136 -> 66 [style=dashed label="class-name"]
  1136 -> 411 [style=dashed label="compare-expression"]
  1136 -> 68 [style=dashed label="concept-name"]
  1136 -> 412 [style=dashed label="conditional-expression"]
  1136 -> 639 [style=dashed label="constant-expression"]
  1136 -> 69 [style=dashed label="conversion-function-id"]
  1136 -> 70 [style=dashed label="cv-qualifier"]
  1136 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1136 -> 415 [style=dashed label="decimal-literal"]
  1136 -> 77 [style=dashed label="decltype-specifier"]
  1136 -> 416 [style=dashed label="delete-expression"]
  1136 -> 417 [style=dashed label="digit"]
  1136 -> 418 [style=dashed label="digit-sequence"]
  1136 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1136 -> 81 [style=dashed label="elaborated-type-specifier"]
  1136 -> 419 [style=dashed label="encoding-prefix"]
  1136 -> 85 [style=dashed label="enum-name"]
  1136 -> 420 [style=dashed label="equality-expression"]
  1136 -> 421 [style=dashed label="exclusive-or-expression"]
  1136 -> 422 [style=dashed label="floating-point-literal"]
  1136 -> 423 [style=dashed label="fold-expression"]
  1136 -> 424 [style=dashed label="fractional-constant"]
  1136 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1136 -> 426 [style=dashed label="hexadecimal-literal"]
  1136 -> 427 [style=dashed label="hexadecimal-prefix"]
  1136 -> 640 [style=dashed label="id-expression"]
  1136 -> 429 [style=dashed label="inclusive-or-expression"]
  1136 -> 430 [style=dashed label="integer-literal"]
  1136 -> 431 [style=dashed label="lambda-expression"]
  1136 -> 432 [style=dashed label="lambda-introducer"]
  1136 -> 433 [style=dashed label="literal"]
  1136 -> 96 [style=dashed label="literal-operator-id"]
  1136 -> 434 [style=dashed label="logical-and-expression"]
  1136 -> 435 [style=dashed label="logical-or-expression"]
  1136 -> 436 [style=dashed label="multiplicative-expression"]
  1136 -> 100 [style=dashed label="namespace-alias"]
  1136 -> 103 [style=dashed label="namespace-name"]
  1136 -> 437 [style=dashed label="nested-name-specifier"]
  1136 -> 438 [style=dashed label="new-expression"]
  1136 -> 439 [style=dashed label="noexcept-expression"]
  1136 -> 440 [style=dashed label="nonzero-digit"]
  1136 -> 441 [style=dashed label="octal-literal"]
  1136 -> 109 [style=dashed label="operator-function-id"]
  1136 -> 110 [style=dashed label="placeholder-type-specifier"]
  1136 -> 442 [style=dashed label="pm-expression"]
  1136 -> 443 [style=dashed label="pointer-literal"]
  1136 -> 444 [style=dashed label="postfix-expression"]
  1136 -> 445 [style=dashed label="primary-expression"]
  1136 -> 113 [style=dashed label="qualified-id"]
  1136 -> 446 [style=dashed label="relational-expression"]
  1136 -> 447 [style=dashed label="requires-expression"]
  1136 -> 448 [style=dashed label="shift-expression"]
  1136 -> 115 [style=dashed label="simple-template-id"]
  1136 -> 449 [style=dashed label="simple-type-specifier"]
  1136 -> 450 [style=dashed label="string-literal"]
  1136 -> 1523 [style=dashed label="template-argument"]
  1136 -> 121 [style=dashed label="template-id"]
  1136 -> 216 [style=dashed label="template-name"]
  1136 -> 124 [style=dashed label="type-constraint"]
  1136 -> 643 [style=dashed label="type-id"]
  1136 -> 125 [style=dashed label="type-name"]
  1136 -> 217 [style=dashed label="type-specifier"]
  1136 -> 452 [style=dashed label="type-specifier-seq"]
  1136 -> 127 [style=dashed label="typedef-name"]
  1136 -> 453 [style=dashed label="typename-specifier"]
  1136 -> 454 [style=dashed label="unary-expression"]
  1136 -> 455 [style=dashed label="unary-operator"]
  1136 -> 130 [style=dashed label="unqualified-id"]
  1136 -> 456 [style=dashed label="user-defined-character-literal"]
  1136 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1136 -> 458 [style=dashed label="user-defined-integer-literal"]
  1136 -> 459 [style=dashed label="user-defined-literal"]
  1136 -> 460 [style=dashed label="user-defined-string-literal"]
  1137 [label="State 1137\n\l1089 type-constraint: concept-name '<' template-argument-list '>' •\l"]
  1137 -> "1137R1089" [style=solid]
 "1137R1089" [label="R1089", fillcolor=3, shape=diamond, style=filled]
  1138 [label="State 1138\n\l466 identifier-list: identifier-list ',' • IDENTIFIER\l"]
  1138 -> 1524 [style=solid label="IDENTIFIER"]
  1139 [label="State 1139\n\l981 simple-declaration: decl-specifier-seq '[' identifier-list ']' • initializer ';'\l"]
  1139 -> 1280 [style=solid label="'='"]
  1139 -> 647 [style=solid label="'('"]
  1139 -> 939 [style=solid label="'{'"]
  1139 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1139 -> 650 [style=dashed label="braced-init-list"]
  1139 -> 1525 [style=dashed label="initializer"]
  1140 [label="State 1140\n\l245 delete-expression: \"delete\" • cast-expression\l247                  | \"delete\" • '[' ']' cast-expression\l397 function-body: '=' \"delete\" • ';'\l"]
  1140 -> 1 [style=solid label="IDENTIFIER"]
  1140 -> 361 [style=solid label="'+'"]
  1140 -> 362 [style=solid label="'-'"]
  1140 -> 1159 [style=solid label="';'"]
  1140 -> 363 [style=solid label="'('"]
  1140 -> 364 [style=solid label="'&'"]
  1140 -> 365 [style=solid label="\"::\""]
  1140 -> 791 [style=solid label="'['"]
  1140 -> 367 [style=solid label="\"co_await\""]
  1140 -> 368 [style=solid label="'0'"]
  1140 -> 369 [style=solid label="'1'"]
  1140 -> 370 [style=solid label="\"0b\""]
  1140 -> 371 [style=solid label="\"0B\""]
  1140 -> 372 [style=solid label="'\\''"]
  1140 -> 373 [style=solid label="\"false\""]
  1140 -> 374 [style=solid label="\"true\""]
  1140 -> 375 [style=solid label="\"noexcept\""]
  1140 -> 17 [style=solid label="\"operator\""]
  1140 -> 26 [style=solid label="\"decltype\""]
  1140 -> 376 [style=solid label="\"delete\""]
  1140 -> 377 [style=solid label="'.'"]
  1140 -> 378 [style=solid label="'2'"]
  1140 -> 379 [style=solid label="'3'"]
  1140 -> 380 [style=solid label="'4'"]
  1140 -> 381 [style=solid label="'5'"]
  1140 -> 382 [style=solid label="'6'"]
  1140 -> 383 [style=solid label="'7'"]
  1140 -> 384 [style=solid label="'8'"]
  1140 -> 385 [style=solid label="'9'"]
  1140 -> 185 [style=solid label="\"u8\""]
  1140 -> 186 [style=solid label="'u'"]
  1140 -> 187 [style=solid label="'U'"]
  1140 -> 188 [style=solid label="'L'"]
  1140 -> 386 [style=solid label="'*'"]
  1140 -> 203 [style=solid label="'\"'"]
  1140 -> 387 [style=solid label="\"0x\""]
  1140 -> 388 [style=solid label="\"0X\""]
  1140 -> 389 [style=solid label="\"requires\""]
  1140 -> 390 [style=solid label="\"new\""]
  1140 -> 391 [style=solid label="'~'"]
  1140 -> 392 [style=solid label="'!'"]
  1140 -> 393 [style=solid label="\"++\""]
  1140 -> 394 [style=solid label="\"--\""]
  1140 -> 395 [style=solid label="\"this\""]
  1140 -> 37 [style=solid label="\"auto\""]
  1140 -> 396 [style=solid label="\"nullptr\""]
  1140 -> 397 [style=solid label="\"dynamic_cast\""]
  1140 -> 398 [style=solid label="\"static_cast\""]
  1140 -> 399 [style=solid label="\"reinterpret_cast\""]
  1140 -> 400 [style=solid label="\"const_cast\""]
  1140 -> 401 [style=solid label="\"typeid\""]
  1140 -> 38 [style=solid label="\"char\""]
  1140 -> 39 [style=solid label="\"char8_t\""]
  1140 -> 40 [style=solid label="\"char16_t\""]
  1140 -> 41 [style=solid label="\"char32_t\""]
  1140 -> 42 [style=solid label="\"wchar_t\""]
  1140 -> 43 [style=solid label="\"bool\""]
  1140 -> 44 [style=solid label="\"short\""]
  1140 -> 45 [style=solid label="\"int\""]
  1140 -> 46 [style=solid label="\"long\""]
  1140 -> 47 [style=solid label="\"signed\""]
  1140 -> 48 [style=solid label="\"unsigned\""]
  1140 -> 49 [style=solid label="\"float\""]
  1140 -> 50 [style=solid label="\"double\""]
  1140 -> 51 [style=solid label="\"void\""]
  1140 -> 209 [style=solid label="'R'"]
  1140 -> 56 [style=solid label="\"typename\""]
  1140 -> 402 [style=solid label="\"sizeof\""]
  1140 -> 403 [style=solid label="\"alignof\""]
  1140 -> 406 [style=dashed label="await-expression"]
  1140 -> 407 [style=dashed label="binary-literal"]
  1140 -> 408 [style=dashed label="boolean-literal"]
  1140 -> 792 [style=dashed label="cast-expression"]
  1140 -> 410 [style=dashed label="character-literal"]
  1140 -> 66 [style=dashed label="class-name"]
  1140 -> 68 [style=dashed label="concept-name"]
  1140 -> 69 [style=dashed label="conversion-function-id"]
  1140 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1140 -> 415 [style=dashed label="decimal-literal"]
  1140 -> 77 [style=dashed label="decltype-specifier"]
  1140 -> 416 [style=dashed label="delete-expression"]
  1140 -> 417 [style=dashed label="digit"]
  1140 -> 418 [style=dashed label="digit-sequence"]
  1140 -> 419 [style=dashed label="encoding-prefix"]
  1140 -> 85 [style=dashed label="enum-name"]
  1140 -> 422 [style=dashed label="floating-point-literal"]
  1140 -> 423 [style=dashed label="fold-expression"]
  1140 -> 424 [style=dashed label="fractional-constant"]
  1140 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1140 -> 426 [style=dashed label="hexadecimal-literal"]
  1140 -> 427 [style=dashed label="hexadecimal-prefix"]
  1140 -> 428 [style=dashed label="id-expression"]
  1140 -> 430 [style=dashed label="integer-literal"]
  1140 -> 431 [style=dashed label="lambda-expression"]
  1140 -> 432 [style=dashed label="lambda-introducer"]
  1140 -> 433 [style=dashed label="literal"]
  1140 -> 96 [style=dashed label="literal-operator-id"]
  1140 -> 100 [style=dashed label="namespace-alias"]
  1140 -> 103 [style=dashed label="namespace-name"]
  1140 -> 437 [style=dashed label="nested-name-specifier"]
  1140 -> 438 [style=dashed label="new-expression"]
  1140 -> 439 [style=dashed label="noexcept-expression"]
  1140 -> 440 [style=dashed label="nonzero-digit"]
  1140 -> 441 [style=dashed label="octal-literal"]
  1140 -> 109 [style=dashed label="operator-function-id"]
  1140 -> 110 [style=dashed label="placeholder-type-specifier"]
  1140 -> 443 [style=dashed label="pointer-literal"]
  1140 -> 444 [style=dashed label="postfix-expression"]
  1140 -> 445 [style=dashed label="primary-expression"]
  1140 -> 113 [style=dashed label="qualified-id"]
  1140 -> 447 [style=dashed label="requires-expression"]
  1140 -> 115 [style=dashed label="simple-template-id"]
  1140 -> 534 [style=dashed label="simple-type-specifier"]
  1140 -> 450 [style=dashed label="string-literal"]
  1140 -> 121 [style=dashed label="template-id"]
  1140 -> 216 [style=dashed label="template-name"]
  1140 -> 124 [style=dashed label="type-constraint"]
  1140 -> 125 [style=dashed label="type-name"]
  1140 -> 127 [style=dashed label="typedef-name"]
  1140 -> 536 [style=dashed label="typename-specifier"]
  1140 -> 454 [style=dashed label="unary-expression"]
  1140 -> 455 [style=dashed label="unary-operator"]
  1140 -> 130 [style=dashed label="unqualified-id"]
  1140 -> 456 [style=dashed label="user-defined-character-literal"]
  1140 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1140 -> 458 [style=dashed label="user-defined-integer-literal"]
  1140 -> 459 [style=dashed label="user-defined-literal"]
  1140 -> 460 [style=dashed label="user-defined-string-literal"]
  1141 [label="State 1141\n\l483 initializer-clause: assignment-expression •\l"]
  1141 -> "1141R483" [style=solid]
 "1141R483" [label="R483", fillcolor=3, shape=diamond, style=filled]
  1142 [label="State 1142\n\l484 initializer-clause: braced-init-list •\l"]
  1142 -> "1142R484" [style=solid]
 "1142R484" [label="R484", fillcolor=3, shape=diamond, style=filled]
  1143 [label="State 1143\n\l106 brace-or-equal-initializer: '=' initializer-clause •\l"]
  1143 -> "1143R106" [style=solid]
 "1143R106" [label="R106", fillcolor=3, shape=diamond, style=filled]
  1144 [label="State 1144\n\l482 initializer: '(' expression-list • ')'\l"]
  1144 -> 1526 [style=solid label="')'"]
  1145 [label="State 1145\n\l485 initializer-list: initializer-clause •\l486                 | initializer-clause • \"...\"\l"]
  1145 -> 1527 [style=solid label="\"...\""]
  1145 -> "1145R485" [style=solid]
 "1145R485" [label="R485", fillcolor=3, shape=diamond, style=filled]
  1146 [label="State 1146\n\l339 expression-list: initializer-list •\l487 initializer-list: initializer-list • ',' initializer-clause\l488                 | initializer-list • ',' initializer-clause \"...\"\l"]
  1146 -> 1528 [style=solid label="','"]
  1146 -> "1146R339" [style=solid]
 "1146R339" [label="R339", fillcolor=3, shape=diamond, style=filled]
  1147 [label="State 1147\n\l112 braced-init-list: '{' '}' •\l160 compound-statement: '{' '}' •\l"]
  1147 -> "1147R112" [label="[';', \"...\", ',', '}']", style=solid]
 "1147R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
  1147 -> "1147R160d" [label="[';', \"...\", '}']", style=solid]
 "1147R160d" [label="R160", fillcolor=5, shape=diamond, style=filled]
  1147 -> "1147R160" [style=solid]
 "1147R160" [label="R160", fillcolor=3, shape=diamond, style=filled]
  1148 [label="State 1148\n\l251 designator: '.' • IDENTIFIER\l391 fractional-constant: '.' • digit-sequence\l"]
  1148 -> 1529 [style=solid label="IDENTIFIER"]
  1148 -> 793 [style=solid label="'0'"]
  1148 -> 794 [style=solid label="'1'"]
  1148 -> 795 [style=solid label="'2'"]
  1148 -> 796 [style=solid label="'3'"]
  1148 -> 797 [style=solid label="'4'"]
  1148 -> 798 [style=solid label="'5'"]
  1148 -> 799 [style=solid label="'6'"]
  1148 -> 800 [style=solid label="'7'"]
  1148 -> 801 [style=solid label="'8'"]
  1148 -> 802 [style=solid label="'9'"]
  1148 -> 417 [style=dashed label="digit"]
  1148 -> 803 [style=dashed label="digit-sequence"]
  1149 [label="State 1149\n\l337 expression: assignment-expression •\l483 initializer-clause: assignment-expression •\l"]
  1149 -> "1149R337" [style=solid]
 "1149R337" [label="R337", fillcolor=3, shape=diamond, style=filled]
  1149 -> "1149R483d" [label="[',']", style=solid]
 "1149R483d" [label="R483", fillcolor=5, shape=diamond, style=filled]
  1149 -> "1149R483" [label="[\"...\", '}']", style=solid]
 "1149R483" [label="R483", fillcolor=3, shape=diamond, style=filled]
  1150 [label="State 1150\n\l249 designated-initializer-list: designated-initializer-clause •\l"]
  1150 -> "1150R249" [style=solid]
 "1150R249" [label="R249", fillcolor=3, shape=diamond, style=filled]
  1151 [label="State 1151\n\l110 braced-init-list: '{' designated-initializer-list • '}'\l111                 | '{' designated-initializer-list • ',' '}'\l250 designated-initializer-list: designated-initializer-list • ',' designated-initializer-clause\l"]
  1151 -> 1530 [style=solid label="','"]
  1151 -> 1531 [style=solid label="'}'"]
  1152 [label="State 1152\n\l248 designated-initializer-clause: designator • brace-or-equal-initializer\l"]
  1152 -> 1280 [style=solid label="'='"]
  1152 -> 939 [style=solid label="'{'"]
  1152 -> 1532 [style=dashed label="brace-or-equal-initializer"]
  1152 -> 650 [style=dashed label="braced-init-list"]
  1153 [label="State 1153\n\l108 braced-init-list: '{' initializer-list • '}'\l109                 | '{' initializer-list • ',' '}'\l487 initializer-list: initializer-list • ',' initializer-clause\l488                 | initializer-list • ',' initializer-clause \"...\"\l"]
  1153 -> 1533 [style=solid label="','"]
  1153 -> 1534 [style=solid label="'}'"]
  1154 [label="State 1154\n\l409 function-definition: decl-specifier-seq declarator requires-clause function-body •\l"]
  1154 -> "1154R409" [style=solid]
 "1154R409" [label="R409", fillcolor=3, shape=diamond, style=filled]
  1155 [label="State 1155\n\l405 function-definition: decl-specifier-seq declarator virt-specifier-seq function-body •\l"]
  1155 -> "1155R405" [style=solid]
 "1155R405" [label="R405", fillcolor=3, shape=diamond, style=filled]
  1156 [label="State 1156\n\l473 init-declarator: declarator •\l474                | declarator • initializer\l475                | declarator • requires-clause\l"]
  1156 -> 1280 [style=solid label="'='"]
  1156 -> 647 [style=solid label="'('"]
  1156 -> 939 [style=solid label="'{'"]
  1156 -> 297 [style=solid label="\"requires\""]
  1156 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1156 -> 650 [style=dashed label="braced-init-list"]
  1156 -> 652 [style=dashed label="initializer"]
  1156 -> 1535 [style=dashed label="requires-clause"]
  1156 -> "1156R473" [style=solid]
 "1156R473" [label="R473", fillcolor=3, shape=diamond, style=filled]
  1157 [label="State 1157\n\l477 init-declarator-list: init-declarator-list ',' init-declarator •\l"]
  1157 -> "1157R477" [style=solid]
 "1157R477" [label="R477", fillcolor=3, shape=diamond, style=filled]
  1158 [label="State 1158\n\l466 identifier-list: identifier-list • ',' IDENTIFIER\l983 simple-declaration: decl-specifier-seq ref-qualifier '[' identifier-list • ']' initializer ';'\l"]
  1158 -> 1138 [style=solid label="','"]
  1158 -> 1536 [style=solid label="']'"]
  1159 [label="State 1159\n\l397 function-body: '=' \"delete\" ';' •\l"]
  1159 -> "1159R397" [style=solid]
 "1159R397" [label="R397", fillcolor=3, shape=diamond, style=filled]
  1160 [label="State 1160\n\l396 function-body: '=' \"default\" ';' •\l"]
  1160 -> "1160R396" [style=solid]
 "1160R396" [label="R396", fillcolor=3, shape=diamond, style=filled]
  1161 [label="State 1161\n\l581 mem-initializer-list: mem-initializer \"...\" •\l"]
  1161 -> "1161R581" [style=solid]
 "1161R581" [label="R581", fillcolor=3, shape=diamond, style=filled]
  1162 [label="State 1162\n\l575 mem-initializer: mem-initializer-id '(' • ')'\l576                | mem-initializer-id '(' • expression-list ')'\l"]
  1162 -> 1 [style=solid label="IDENTIFIER"]
  1162 -> 361 [style=solid label="'+'"]
  1162 -> 362 [style=solid label="'-'"]
  1162 -> 363 [style=solid label="'('"]
  1162 -> 1537 [style=solid label="')'"]
  1162 -> 364 [style=solid label="'&'"]
  1162 -> 365 [style=solid label="\"::\""]
  1162 -> 366 [style=solid label="'['"]
  1162 -> 367 [style=solid label="\"co_await\""]
  1162 -> 939 [style=solid label="'{'"]
  1162 -> 368 [style=solid label="'0'"]
  1162 -> 369 [style=solid label="'1'"]
  1162 -> 370 [style=solid label="\"0b\""]
  1162 -> 371 [style=solid label="\"0B\""]
  1162 -> 372 [style=solid label="'\\''"]
  1162 -> 373 [style=solid label="\"false\""]
  1162 -> 374 [style=solid label="\"true\""]
  1162 -> 375 [style=solid label="\"noexcept\""]
  1162 -> 17 [style=solid label="\"operator\""]
  1162 -> 26 [style=solid label="\"decltype\""]
  1162 -> 376 [style=solid label="\"delete\""]
  1162 -> 377 [style=solid label="'.'"]
  1162 -> 378 [style=solid label="'2'"]
  1162 -> 379 [style=solid label="'3'"]
  1162 -> 380 [style=solid label="'4'"]
  1162 -> 381 [style=solid label="'5'"]
  1162 -> 382 [style=solid label="'6'"]
  1162 -> 383 [style=solid label="'7'"]
  1162 -> 384 [style=solid label="'8'"]
  1162 -> 385 [style=solid label="'9'"]
  1162 -> 185 [style=solid label="\"u8\""]
  1162 -> 186 [style=solid label="'u'"]
  1162 -> 187 [style=solid label="'U'"]
  1162 -> 188 [style=solid label="'L'"]
  1162 -> 386 [style=solid label="'*'"]
  1162 -> 203 [style=solid label="'\"'"]
  1162 -> 387 [style=solid label="\"0x\""]
  1162 -> 388 [style=solid label="\"0X\""]
  1162 -> 389 [style=solid label="\"requires\""]
  1162 -> 390 [style=solid label="\"new\""]
  1162 -> 391 [style=solid label="'~'"]
  1162 -> 392 [style=solid label="'!'"]
  1162 -> 393 [style=solid label="\"++\""]
  1162 -> 394 [style=solid label="\"--\""]
  1162 -> 395 [style=solid label="\"this\""]
  1162 -> 37 [style=solid label="\"auto\""]
  1162 -> 396 [style=solid label="\"nullptr\""]
  1162 -> 397 [style=solid label="\"dynamic_cast\""]
  1162 -> 398 [style=solid label="\"static_cast\""]
  1162 -> 399 [style=solid label="\"reinterpret_cast\""]
  1162 -> 400 [style=solid label="\"const_cast\""]
  1162 -> 401 [style=solid label="\"typeid\""]
  1162 -> 38 [style=solid label="\"char\""]
  1162 -> 39 [style=solid label="\"char8_t\""]
  1162 -> 40 [style=solid label="\"char16_t\""]
  1162 -> 41 [style=solid label="\"char32_t\""]
  1162 -> 42 [style=solid label="\"wchar_t\""]
  1162 -> 43 [style=solid label="\"bool\""]
  1162 -> 44 [style=solid label="\"short\""]
  1162 -> 45 [style=solid label="\"int\""]
  1162 -> 46 [style=solid label="\"long\""]
  1162 -> 47 [style=solid label="\"signed\""]
  1162 -> 48 [style=solid label="\"unsigned\""]
  1162 -> 49 [style=solid label="\"float\""]
  1162 -> 50 [style=solid label="\"double\""]
  1162 -> 51 [style=solid label="\"void\""]
  1162 -> 209 [style=solid label="'R'"]
  1162 -> 528 [style=solid label="\"throw\""]
  1162 -> 56 [style=solid label="\"typename\""]
  1162 -> 402 [style=solid label="\"sizeof\""]
  1162 -> 403 [style=solid label="\"alignof\""]
  1162 -> 529 [style=solid label="\"co_yield\""]
  1162 -> 404 [style=dashed label="additive-expression"]
  1162 -> 405 [style=dashed label="and-expression"]
  1162 -> 1141 [style=dashed label="assignment-expression"]
  1162 -> 406 [style=dashed label="await-expression"]
  1162 -> 407 [style=dashed label="binary-literal"]
  1162 -> 408 [style=dashed label="boolean-literal"]
  1162 -> 1142 [style=dashed label="braced-init-list"]
  1162 -> 409 [style=dashed label="cast-expression"]
  1162 -> 410 [style=dashed label="character-literal"]
  1162 -> 66 [style=dashed label="class-name"]
  1162 -> 411 [style=dashed label="compare-expression"]
  1162 -> 68 [style=dashed label="concept-name"]
  1162 -> 531 [style=dashed label="conditional-expression"]
  1162 -> 69 [style=dashed label="conversion-function-id"]
  1162 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1162 -> 415 [style=dashed label="decimal-literal"]
  1162 -> 77 [style=dashed label="decltype-specifier"]
  1162 -> 416 [style=dashed label="delete-expression"]
  1162 -> 417 [style=dashed label="digit"]
  1162 -> 418 [style=dashed label="digit-sequence"]
  1162 -> 419 [style=dashed label="encoding-prefix"]
  1162 -> 85 [style=dashed label="enum-name"]
  1162 -> 420 [style=dashed label="equality-expression"]
  1162 -> 421 [style=dashed label="exclusive-or-expression"]
  1162 -> 1538 [style=dashed label="expression-list"]
  1162 -> 422 [style=dashed label="floating-point-literal"]
  1162 -> 423 [style=dashed label="fold-expression"]
  1162 -> 424 [style=dashed label="fractional-constant"]
  1162 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1162 -> 426 [style=dashed label="hexadecimal-literal"]
  1162 -> 427 [style=dashed label="hexadecimal-prefix"]
  1162 -> 428 [style=dashed label="id-expression"]
  1162 -> 429 [style=dashed label="inclusive-or-expression"]
  1162 -> 1145 [style=dashed label="initializer-clause"]
  1162 -> 1146 [style=dashed label="initializer-list"]
  1162 -> 430 [style=dashed label="integer-literal"]
  1162 -> 431 [style=dashed label="lambda-expression"]
  1162 -> 432 [style=dashed label="lambda-introducer"]
  1162 -> 433 [style=dashed label="literal"]
  1162 -> 96 [style=dashed label="literal-operator-id"]
  1162 -> 434 [style=dashed label="logical-and-expression"]
  1162 -> 533 [style=dashed label="logical-or-expression"]
  1162 -> 436 [style=dashed label="multiplicative-expression"]
  1162 -> 100 [style=dashed label="namespace-alias"]
  1162 -> 103 [style=dashed label="namespace-name"]
  1162 -> 437 [style=dashed label="nested-name-specifier"]
  1162 -> 438 [style=dashed label="new-expression"]
  1162 -> 439 [style=dashed label="noexcept-expression"]
  1162 -> 440 [style=dashed label="nonzero-digit"]
  1162 -> 441 [style=dashed label="octal-literal"]
  1162 -> 109 [style=dashed label="operator-function-id"]
  1162 -> 110 [style=dashed label="placeholder-type-specifier"]
  1162 -> 442 [style=dashed label="pm-expression"]
  1162 -> 443 [style=dashed label="pointer-literal"]
  1162 -> 444 [style=dashed label="postfix-expression"]
  1162 -> 445 [style=dashed label="primary-expression"]
  1162 -> 113 [style=dashed label="qualified-id"]
  1162 -> 446 [style=dashed label="relational-expression"]
  1162 -> 447 [style=dashed label="requires-expression"]
  1162 -> 448 [style=dashed label="shift-expression"]
  1162 -> 115 [style=dashed label="simple-template-id"]
  1162 -> 534 [style=dashed label="simple-type-specifier"]
  1162 -> 450 [style=dashed label="string-literal"]
  1162 -> 121 [style=dashed label="template-id"]
  1162 -> 216 [style=dashed label="template-name"]
  1162 -> 535 [style=dashed label="throw-expression"]
  1162 -> 124 [style=dashed label="type-constraint"]
  1162 -> 125 [style=dashed label="type-name"]
  1162 -> 127 [style=dashed label="typedef-name"]
  1162 -> 536 [style=dashed label="typename-specifier"]
  1162 -> 454 [style=dashed label="unary-expression"]
  1162 -> 455 [style=dashed label="unary-operator"]
  1162 -> 130 [style=dashed label="unqualified-id"]
  1162 -> 456 [style=dashed label="user-defined-character-literal"]
  1162 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1162 -> 458 [style=dashed label="user-defined-integer-literal"]
  1162 -> 459 [style=dashed label="user-defined-literal"]
  1162 -> 460 [style=dashed label="user-defined-string-literal"]
  1162 -> 537 [style=dashed label="yield-expression"]
  1163 [label="State 1163\n\l577 mem-initializer: mem-initializer-id braced-init-list •\l"]
  1163 -> "1163R577" [style=solid]
 "1163R577" [label="R577", fillcolor=3, shape=diamond, style=filled]
  1164 [label="State 1164\n\l582 mem-initializer-list: mem-initializer-list ',' • mem-initializer\l583                     | mem-initializer-list ',' • mem-initializer \"...\"\l"]
  1164 -> 660 [style=solid label="IDENTIFIER"]
  1164 -> 9 [style=solid label="\"::\""]
  1164 -> 135 [style=solid label="\"decltype\""]
  1164 -> 66 [style=dashed label="class-name"]
  1164 -> 661 [style=dashed label="class-or-decltype"]
  1164 -> 624 [style=dashed label="decltype-specifier"]
  1164 -> 85 [style=dashed label="enum-name"]
  1164 -> 1539 [style=dashed label="mem-initializer"]
  1164 -> 663 [style=dashed label="mem-initializer-id"]
  1164 -> 100 [style=dashed label="namespace-alias"]
  1164 -> 103 [style=dashed label="namespace-name"]
  1164 -> 625 [style=dashed label="nested-name-specifier"]
  1164 -> 142 [style=dashed label="simple-template-id"]
  1164 -> 143 [style=dashed label="template-name"]
  1164 -> 626 [style=dashed label="type-name"]
  1164 -> 127 [style=dashed label="typedef-name"]
  1165 [label="State 1165\n\l524 labeled-statement: IDENTIFIER ':' • statement\l"]
  1165 -> 665 [style=solid label="IDENTIFIER"]
  1165 -> 361 [style=solid label="'+'"]
  1165 -> 362 [style=solid label="'-'"]
  1165 -> 2 [style=solid label="\"using\""]
  1165 -> 666 [style=solid label="';'"]
  1165 -> 4 [style=solid label="\"alignas\""]
  1165 -> 363 [style=solid label="'('"]
  1165 -> 364 [style=solid label="'&'"]
  1165 -> 8 [style=solid label="\"asm\""]
  1165 -> 365 [style=solid label="\"::\""]
  1165 -> 667 [style=solid label="'['"]
  1165 -> 367 [style=solid label="\"co_await\""]
  1165 -> 294 [style=solid label="'{'"]
  1165 -> 11 [style=solid label="\"virtual\""]
  1165 -> 368 [style=solid label="'0'"]
  1165 -> 369 [style=solid label="'1'"]
  1165 -> 370 [style=solid label="\"0b\""]
  1165 -> 371 [style=solid label="\"0B\""]
  1165 -> 372 [style=solid label="'\\''"]
  1165 -> 373 [style=solid label="\"false\""]
  1165 -> 374 [style=solid label="\"true\""]
  1165 -> 12 [style=solid label="\"class\""]
  1165 -> 13 [style=solid label="\"struct\""]
  1165 -> 14 [style=solid label="\"union\""]
  1165 -> 375 [style=solid label="\"noexcept\""]
  1165 -> 17 [style=solid label="\"operator\""]
  1165 -> 669 [style=solid label="\"co_return\""]
  1165 -> 18 [style=solid label="\"const\""]
  1165 -> 19 [style=solid label="\"volatile\""]
  1165 -> 20 [style=solid label="\"friend\""]
  1165 -> 21 [style=solid label="\"typedef\""]
  1165 -> 22 [style=solid label="\"constexpr\""]
  1165 -> 23 [style=solid label="\"consteval\""]
  1165 -> 24 [style=solid label="\"constinit\""]
  1165 -> 263 [style=solid label="\"inline\""]
  1165 -> 26 [style=solid label="\"decltype\""]
  1165 -> 376 [style=solid label="\"delete\""]
  1165 -> 377 [style=solid label="'.'"]
  1165 -> 378 [style=solid label="'2'"]
  1165 -> 379 [style=solid label="'3'"]
  1165 -> 380 [style=solid label="'4'"]
  1165 -> 381 [style=solid label="'5'"]
  1165 -> 382 [style=solid label="'6'"]
  1165 -> 383 [style=solid label="'7'"]
  1165 -> 384 [style=solid label="'8'"]
  1165 -> 385 [style=solid label="'9'"]
  1165 -> 27 [style=solid label="\"enum\""]
  1165 -> 185 [style=solid label="\"u8\""]
  1165 -> 186 [style=solid label="'u'"]
  1165 -> 187 [style=solid label="'U'"]
  1165 -> 188 [style=solid label="'L'"]
  1165 -> 264 [style=solid label="\"extern\""]
  1165 -> 29 [style=solid label="\"explicit\""]
  1165 -> 386 [style=solid label="'*'"]
  1165 -> 670 [style=solid label="\"default\""]
  1165 -> 671 [style=solid label="\"try\""]
  1165 -> 203 [style=solid label="'\"'"]
  1165 -> 387 [style=solid label="\"0x\""]
  1165 -> 388 [style=solid label="\"0X\""]
  1165 -> 672 [style=solid label="\"while\""]
  1165 -> 673 [style=solid label="\"do\""]
  1165 -> 674 [style=solid label="\"for\""]
  1165 -> 675 [style=solid label="\"break\""]
  1165 -> 676 [style=solid label="\"continue\""]
  1165 -> 677 [style=solid label="\"return\""]
  1165 -> 678 [style=solid label="\"goto\""]
  1165 -> 679 [style=solid label="\"case\""]
  1165 -> 680 [style=solid label="\"namespace\""]
  1165 -> 389 [style=solid label="\"requires\""]
  1165 -> 390 [style=solid label="\"new\""]
  1165 -> 391 [style=solid label="'~'"]
  1165 -> 392 [style=solid label="'!'"]
  1165 -> 393 [style=solid label="\"++\""]
  1165 -> 394 [style=solid label="\"--\""]
  1165 -> 395 [style=solid label="\"this\""]
  1165 -> 37 [style=solid label="\"auto\""]
  1165 -> 396 [style=solid label="\"nullptr\""]
  1165 -> 397 [style=solid label="\"dynamic_cast\""]
  1165 -> 398 [style=solid label="\"static_cast\""]
  1165 -> 399 [style=solid label="\"reinterpret_cast\""]
  1165 -> 400 [style=solid label="\"const_cast\""]
  1165 -> 401 [style=solid label="\"typeid\""]
  1165 -> 681 [style=solid label="\"if\""]
  1165 -> 682 [style=solid label="\"switch\""]
  1165 -> 38 [style=solid label="\"char\""]
  1165 -> 39 [style=solid label="\"char8_t\""]
  1165 -> 40 [style=solid label="\"char16_t\""]
  1165 -> 41 [style=solid label="\"char32_t\""]
  1165 -> 42 [style=solid label="\"wchar_t\""]
  1165 -> 43 [style=solid label="\"bool\""]
  1165 -> 44 [style=solid label="\"short\""]
  1165 -> 45 [style=solid label="\"int\""]
  1165 -> 46 [style=solid label="\"long\""]
  1165 -> 47 [style=solid label="\"signed\""]
  1165 -> 48 [style=solid label="\"unsigned\""]
  1165 -> 49 [style=solid label="\"float\""]
  1165 -> 50 [style=solid label="\"double\""]
  1165 -> 51 [style=solid label="\"void\""]
  1165 -> 52 [style=solid label="\"static_assert\""]
  1165 -> 53 [style=solid label="\"static\""]
  1165 -> 54 [style=solid label="\"thread_local\""]
  1165 -> 55 [style=solid label="\"mutable\""]
  1165 -> 209 [style=solid label="'R'"]
  1165 -> 528 [style=solid label="\"throw\""]
  1165 -> 56 [style=solid label="\"typename\""]
  1165 -> 402 [style=solid label="\"sizeof\""]
  1165 -> 403 [style=solid label="\"alignof\""]
  1165 -> 529 [style=solid label="\"co_yield\""]
  1165 -> 404 [style=dashed label="additive-expression"]
  1165 -> 57 [style=dashed label="alias-declaration"]
  1165 -> 58 [style=dashed label="alignment-specifier"]
  1165 -> 405 [style=dashed label="and-expression"]
  1165 -> 59 [style=dashed label="asm-declaration"]
  1165 -> 530 [style=dashed label="assignment-expression"]
  1165 -> 61 [style=dashed label="attribute-specifier"]
  1165 -> 683 [style=dashed label="attribute-specifier-seq"]
  1165 -> 406 [style=dashed label="await-expression"]
  1165 -> 407 [style=dashed label="binary-literal"]
  1165 -> 684 [style=dashed label="block-declaration"]
  1165 -> 408 [style=dashed label="boolean-literal"]
  1165 -> 409 [style=dashed label="cast-expression"]
  1165 -> 410 [style=dashed label="character-literal"]
  1165 -> 64 [style=dashed label="class-head"]
  1165 -> 65 [style=dashed label="class-key"]
  1165 -> 66 [style=dashed label="class-name"]
  1165 -> 67 [style=dashed label="class-specifier"]
  1165 -> 411 [style=dashed label="compare-expression"]
  1165 -> 685 [style=dashed label="compound-statement"]
  1165 -> 68 [style=dashed label="concept-name"]
  1165 -> 531 [style=dashed label="conditional-expression"]
  1165 -> 69 [style=dashed label="conversion-function-id"]
  1165 -> 686 [style=dashed label="coroutine-return-statement"]
  1165 -> 70 [style=dashed label="cv-qualifier"]
  1165 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1165 -> 415 [style=dashed label="decimal-literal"]
  1165 -> 71 [style=dashed label="decl-specifier"]
  1165 -> 687 [style=dashed label="decl-specifier-seq"]
  1165 -> 688 [style=dashed label="declaration-statement"]
  1165 -> 77 [style=dashed label="decltype-specifier"]
  1165 -> 79 [style=dashed label="defining-type-specifier"]
  1165 -> 416 [style=dashed label="delete-expression"]
  1165 -> 417 [style=dashed label="digit"]
  1165 -> 418 [style=dashed label="digit-sequence"]
  1165 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1165 -> 81 [style=dashed label="elaborated-type-specifier"]
  1165 -> 419 [style=dashed label="encoding-prefix"]
  1165 -> 83 [style=dashed label="enum-head"]
  1165 -> 84 [style=dashed label="enum-key"]
  1165 -> 85 [style=dashed label="enum-name"]
  1165 -> 86 [style=dashed label="enum-specifier"]
  1165 -> 420 [style=dashed label="equality-expression"]
  1165 -> 421 [style=dashed label="exclusive-or-expression"]
  1165 -> 269 [style=dashed label="explicit-specifier"]
  1165 -> 689 [style=dashed label="expression"]
  1165 -> 690 [style=dashed label="expression-statement"]
  1165 -> 422 [style=dashed label="floating-point-literal"]
  1165 -> 423 [style=dashed label="fold-expression"]
  1165 -> 424 [style=dashed label="fractional-constant"]
  1165 -> 92 [style=dashed label="function-specifier"]
  1165 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1165 -> 426 [style=dashed label="hexadecimal-literal"]
  1165 -> 427 [style=dashed label="hexadecimal-prefix"]
  1165 -> 428 [style=dashed label="id-expression"]
  1165 -> 429 [style=dashed label="inclusive-or-expression"]
  1165 -> 430 [style=dashed label="integer-literal"]
  1165 -> 691 [style=dashed label="iteration-statement"]
  1165 -> 692 [style=dashed label="jump-statement"]
  1165 -> 693 [style=dashed label="labeled-statement"]
  1165 -> 431 [style=dashed label="lambda-expression"]
  1165 -> 432 [style=dashed label="lambda-introducer"]
  1165 -> 433 [style=dashed label="literal"]
  1165 -> 96 [style=dashed label="literal-operator-id"]
  1165 -> 434 [style=dashed label="logical-and-expression"]
  1165 -> 533 [style=dashed label="logical-or-expression"]
  1165 -> 436 [style=dashed label="multiplicative-expression"]
  1165 -> 100 [style=dashed label="namespace-alias"]
  1165 -> 101 [style=dashed label="namespace-alias-definition"]
  1165 -> 103 [style=dashed label="namespace-name"]
  1165 -> 437 [style=dashed label="nested-name-specifier"]
  1165 -> 438 [style=dashed label="new-expression"]
  1165 -> 439 [style=dashed label="noexcept-expression"]
  1165 -> 440 [style=dashed label="nonzero-digit"]
  1165 -> 441 [style=dashed label="octal-literal"]
  1165 -> 108 [style=dashed label="opaque-enum-declaration"]
  1165 -> 109 [style=dashed label="operator-function-id"]
  1165 -> 110 [style=dashed label="placeholder-type-specifier"]
  1165 -> 442 [style=dashed label="pm-expression"]
  1165 -> 443 [style=dashed label="pointer-literal"]
  1165 -> 444 [style=dashed label="postfix-expression"]
  1165 -> 445 [style=dashed label="primary-expression"]
  1165 -> 113 [style=dashed label="qualified-id"]
  1165 -> 446 [style=dashed label="relational-expression"]
  1165 -> 447 [style=dashed label="requires-expression"]
  1165 -> 694 [style=dashed label="selection-statement"]
  1165 -> 448 [style=dashed label="shift-expression"]
  1165 -> 114 [style=dashed label="simple-declaration"]
  1165 -> 115 [style=dashed label="simple-template-id"]
  1165 -> 449 [style=dashed label="simple-type-specifier"]
  1165 -> 1540 [style=dashed label="statement"]
  1165 -> 117 [style=dashed label="static_assert-declaration"]
  1165 -> 118 [style=dashed label="storage-class-specifier"]
  1165 -> 450 [style=dashed label="string-literal"]
  1165 -> 121 [style=dashed label="template-id"]
  1165 -> 216 [style=dashed label="template-name"]
  1165 -> 535 [style=dashed label="throw-expression"]
  1165 -> 697 [style=dashed label="try-block"]
  1165 -> 124 [style=dashed label="type-constraint"]
  1165 -> 125 [style=dashed label="type-name"]
  1165 -> 126 [style=dashed label="type-specifier"]
  1165 -> 127 [style=dashed label="typedef-name"]
  1165 -> 453 [style=dashed label="typename-specifier"]
  1165 -> 454 [style=dashed label="unary-expression"]
  1165 -> 455 [style=dashed label="unary-operator"]
  1165 -> 130 [style=dashed label="unqualified-id"]
  1165 -> 456 [style=dashed label="user-defined-character-literal"]
  1165 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1165 -> 458 [style=dashed label="user-defined-integer-literal"]
  1165 -> 459 [style=dashed label="user-defined-literal"]
  1165 -> 460 [style=dashed label="user-defined-string-literal"]
  1165 -> 131 [style=dashed label="using-declaration"]
  1165 -> 132 [style=dashed label="using-directive"]
  1165 -> 133 [style=dashed label="using-enum-declaration"]
  1165 -> 537 [style=dashed label="yield-expression"]
  1166 [label="State 1166\n\l182 coroutine-return-statement: \"co_return\" ';' •\l"]
  1166 -> "1166R182" [style=solid]
 "1166R182" [label="R182", fillcolor=3, shape=diamond, style=filled]
  1167 [label="State 1167\n\l336 expr-or-braced-init-list: braced-init-list •\l"]
  1167 -> "1167R336" [style=solid]
 "1167R336" [label="R336", fillcolor=3, shape=diamond, style=filled]
  1168 [label="State 1168\n\l183 coroutine-return-statement: \"co_return\" expr-or-braced-init-list • ';'\l"]
  1168 -> 1541 [style=solid label="';'"]
  1169 [label="State 1169\n\l335 expr-or-braced-init-list: expression •\l338 expression: expression • ',' assignment-expression\l"]
  1169 -> 1037 [style=solid label="','"]
  1169 -> "1169R335" [style=solid]
 "1169R335" [label="R335", fillcolor=3, shape=diamond, style=filled]
  1170 [label="State 1170\n\l528 labeled-statement: \"default\" ':' • statement\l"]
  1170 -> 665 [style=solid label="IDENTIFIER"]
  1170 -> 361 [style=solid label="'+'"]
  1170 -> 362 [style=solid label="'-'"]
  1170 -> 2 [style=solid label="\"using\""]
  1170 -> 666 [style=solid label="';'"]
  1170 -> 4 [style=solid label="\"alignas\""]
  1170 -> 363 [style=solid label="'('"]
  1170 -> 364 [style=solid label="'&'"]
  1170 -> 8 [style=solid label="\"asm\""]
  1170 -> 365 [style=solid label="\"::\""]
  1170 -> 667 [style=solid label="'['"]
  1170 -> 367 [style=solid label="\"co_await\""]
  1170 -> 294 [style=solid label="'{'"]
  1170 -> 11 [style=solid label="\"virtual\""]
  1170 -> 368 [style=solid label="'0'"]
  1170 -> 369 [style=solid label="'1'"]
  1170 -> 370 [style=solid label="\"0b\""]
  1170 -> 371 [style=solid label="\"0B\""]
  1170 -> 372 [style=solid label="'\\''"]
  1170 -> 373 [style=solid label="\"false\""]
  1170 -> 374 [style=solid label="\"true\""]
  1170 -> 12 [style=solid label="\"class\""]
  1170 -> 13 [style=solid label="\"struct\""]
  1170 -> 14 [style=solid label="\"union\""]
  1170 -> 375 [style=solid label="\"noexcept\""]
  1170 -> 17 [style=solid label="\"operator\""]
  1170 -> 669 [style=solid label="\"co_return\""]
  1170 -> 18 [style=solid label="\"const\""]
  1170 -> 19 [style=solid label="\"volatile\""]
  1170 -> 20 [style=solid label="\"friend\""]
  1170 -> 21 [style=solid label="\"typedef\""]
  1170 -> 22 [style=solid label="\"constexpr\""]
  1170 -> 23 [style=solid label="\"consteval\""]
  1170 -> 24 [style=solid label="\"constinit\""]
  1170 -> 263 [style=solid label="\"inline\""]
  1170 -> 26 [style=solid label="\"decltype\""]
  1170 -> 376 [style=solid label="\"delete\""]
  1170 -> 377 [style=solid label="'.'"]
  1170 -> 378 [style=solid label="'2'"]
  1170 -> 379 [style=solid label="'3'"]
  1170 -> 380 [style=solid label="'4'"]
  1170 -> 381 [style=solid label="'5'"]
  1170 -> 382 [style=solid label="'6'"]
  1170 -> 383 [style=solid label="'7'"]
  1170 -> 384 [style=solid label="'8'"]
  1170 -> 385 [style=solid label="'9'"]
  1170 -> 27 [style=solid label="\"enum\""]
  1170 -> 185 [style=solid label="\"u8\""]
  1170 -> 186 [style=solid label="'u'"]
  1170 -> 187 [style=solid label="'U'"]
  1170 -> 188 [style=solid label="'L'"]
  1170 -> 264 [style=solid label="\"extern\""]
  1170 -> 29 [style=solid label="\"explicit\""]
  1170 -> 386 [style=solid label="'*'"]
  1170 -> 670 [style=solid label="\"default\""]
  1170 -> 671 [style=solid label="\"try\""]
  1170 -> 203 [style=solid label="'\"'"]
  1170 -> 387 [style=solid label="\"0x\""]
  1170 -> 388 [style=solid label="\"0X\""]
  1170 -> 672 [style=solid label="\"while\""]
  1170 -> 673 [style=solid label="\"do\""]
  1170 -> 674 [style=solid label="\"for\""]
  1170 -> 675 [style=solid label="\"break\""]
  1170 -> 676 [style=solid label="\"continue\""]
  1170 -> 677 [style=solid label="\"return\""]
  1170 -> 678 [style=solid label="\"goto\""]
  1170 -> 679 [style=solid label="\"case\""]
  1170 -> 680 [style=solid label="\"namespace\""]
  1170 -> 389 [style=solid label="\"requires\""]
  1170 -> 390 [style=solid label="\"new\""]
  1170 -> 391 [style=solid label="'~'"]
  1170 -> 392 [style=solid label="'!'"]
  1170 -> 393 [style=solid label="\"++\""]
  1170 -> 394 [style=solid label="\"--\""]
  1170 -> 395 [style=solid label="\"this\""]
  1170 -> 37 [style=solid label="\"auto\""]
  1170 -> 396 [style=solid label="\"nullptr\""]
  1170 -> 397 [style=solid label="\"dynamic_cast\""]
  1170 -> 398 [style=solid label="\"static_cast\""]
  1170 -> 399 [style=solid label="\"reinterpret_cast\""]
  1170 -> 400 [style=solid label="\"const_cast\""]
  1170 -> 401 [style=solid label="\"typeid\""]
  1170 -> 681 [style=solid label="\"if\""]
  1170 -> 682 [style=solid label="\"switch\""]
  1170 -> 38 [style=solid label="\"char\""]
  1170 -> 39 [style=solid label="\"char8_t\""]
  1170 -> 40 [style=solid label="\"char16_t\""]
  1170 -> 41 [style=solid label="\"char32_t\""]
  1170 -> 42 [style=solid label="\"wchar_t\""]
  1170 -> 43 [style=solid label="\"bool\""]
  1170 -> 44 [style=solid label="\"short\""]
  1170 -> 45 [style=solid label="\"int\""]
  1170 -> 46 [style=solid label="\"long\""]
  1170 -> 47 [style=solid label="\"signed\""]
  1170 -> 48 [style=solid label="\"unsigned\""]
  1170 -> 49 [style=solid label="\"float\""]
  1170 -> 50 [style=solid label="\"double\""]
  1170 -> 51 [style=solid label="\"void\""]
  1170 -> 52 [style=solid label="\"static_assert\""]
  1170 -> 53 [style=solid label="\"static\""]
  1170 -> 54 [style=solid label="\"thread_local\""]
  1170 -> 55 [style=solid label="\"mutable\""]
  1170 -> 209 [style=solid label="'R'"]
  1170 -> 528 [style=solid label="\"throw\""]
  1170 -> 56 [style=solid label="\"typename\""]
  1170 -> 402 [style=solid label="\"sizeof\""]
  1170 -> 403 [style=solid label="\"alignof\""]
  1170 -> 529 [style=solid label="\"co_yield\""]
  1170 -> 404 [style=dashed label="additive-expression"]
  1170 -> 57 [style=dashed label="alias-declaration"]
  1170 -> 58 [style=dashed label="alignment-specifier"]
  1170 -> 405 [style=dashed label="and-expression"]
  1170 -> 59 [style=dashed label="asm-declaration"]
  1170 -> 530 [style=dashed label="assignment-expression"]
  1170 -> 61 [style=dashed label="attribute-specifier"]
  1170 -> 683 [style=dashed label="attribute-specifier-seq"]
  1170 -> 406 [style=dashed label="await-expression"]
  1170 -> 407 [style=dashed label="binary-literal"]
  1170 -> 684 [style=dashed label="block-declaration"]
  1170 -> 408 [style=dashed label="boolean-literal"]
  1170 -> 409 [style=dashed label="cast-expression"]
  1170 -> 410 [style=dashed label="character-literal"]
  1170 -> 64 [style=dashed label="class-head"]
  1170 -> 65 [style=dashed label="class-key"]
  1170 -> 66 [style=dashed label="class-name"]
  1170 -> 67 [style=dashed label="class-specifier"]
  1170 -> 411 [style=dashed label="compare-expression"]
  1170 -> 685 [style=dashed label="compound-statement"]
  1170 -> 68 [style=dashed label="concept-name"]
  1170 -> 531 [style=dashed label="conditional-expression"]
  1170 -> 69 [style=dashed label="conversion-function-id"]
  1170 -> 686 [style=dashed label="coroutine-return-statement"]
  1170 -> 70 [style=dashed label="cv-qualifier"]
  1170 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1170 -> 415 [style=dashed label="decimal-literal"]
  1170 -> 71 [style=dashed label="decl-specifier"]
  1170 -> 687 [style=dashed label="decl-specifier-seq"]
  1170 -> 688 [style=dashed label="declaration-statement"]
  1170 -> 77 [style=dashed label="decltype-specifier"]
  1170 -> 79 [style=dashed label="defining-type-specifier"]
  1170 -> 416 [style=dashed label="delete-expression"]
  1170 -> 417 [style=dashed label="digit"]
  1170 -> 418 [style=dashed label="digit-sequence"]
  1170 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1170 -> 81 [style=dashed label="elaborated-type-specifier"]
  1170 -> 419 [style=dashed label="encoding-prefix"]
  1170 -> 83 [style=dashed label="enum-head"]
  1170 -> 84 [style=dashed label="enum-key"]
  1170 -> 85 [style=dashed label="enum-name"]
  1170 -> 86 [style=dashed label="enum-specifier"]
  1170 -> 420 [style=dashed label="equality-expression"]
  1170 -> 421 [style=dashed label="exclusive-or-expression"]
  1170 -> 269 [style=dashed label="explicit-specifier"]
  1170 -> 689 [style=dashed label="expression"]
  1170 -> 690 [style=dashed label="expression-statement"]
  1170 -> 422 [style=dashed label="floating-point-literal"]
  1170 -> 423 [style=dashed label="fold-expression"]
  1170 -> 424 [style=dashed label="fractional-constant"]
  1170 -> 92 [style=dashed label="function-specifier"]
  1170 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1170 -> 426 [style=dashed label="hexadecimal-literal"]
  1170 -> 427 [style=dashed label="hexadecimal-prefix"]
  1170 -> 428 [style=dashed label="id-expression"]
  1170 -> 429 [style=dashed label="inclusive-or-expression"]
  1170 -> 430 [style=dashed label="integer-literal"]
  1170 -> 691 [style=dashed label="iteration-statement"]
  1170 -> 692 [style=dashed label="jump-statement"]
  1170 -> 693 [style=dashed label="labeled-statement"]
  1170 -> 431 [style=dashed label="lambda-expression"]
  1170 -> 432 [style=dashed label="lambda-introducer"]
  1170 -> 433 [style=dashed label="literal"]
  1170 -> 96 [style=dashed label="literal-operator-id"]
  1170 -> 434 [style=dashed label="logical-and-expression"]
  1170 -> 533 [style=dashed label="logical-or-expression"]
  1170 -> 436 [style=dashed label="multiplicative-expression"]
  1170 -> 100 [style=dashed label="namespace-alias"]
  1170 -> 101 [style=dashed label="namespace-alias-definition"]
  1170 -> 103 [style=dashed label="namespace-name"]
  1170 -> 437 [style=dashed label="nested-name-specifier"]
  1170 -> 438 [style=dashed label="new-expression"]
  1170 -> 439 [style=dashed label="noexcept-expression"]
  1170 -> 440 [style=dashed label="nonzero-digit"]
  1170 -> 441 [style=dashed label="octal-literal"]
  1170 -> 108 [style=dashed label="opaque-enum-declaration"]
  1170 -> 109 [style=dashed label="operator-function-id"]
  1170 -> 110 [style=dashed label="placeholder-type-specifier"]
  1170 -> 442 [style=dashed label="pm-expression"]
  1170 -> 443 [style=dashed label="pointer-literal"]
  1170 -> 444 [style=dashed label="postfix-expression"]
  1170 -> 445 [style=dashed label="primary-expression"]
  1170 -> 113 [style=dashed label="qualified-id"]
  1170 -> 446 [style=dashed label="relational-expression"]
  1170 -> 447 [style=dashed label="requires-expression"]
  1170 -> 694 [style=dashed label="selection-statement"]
  1170 -> 448 [style=dashed label="shift-expression"]
  1170 -> 114 [style=dashed label="simple-declaration"]
  1170 -> 115 [style=dashed label="simple-template-id"]
  1170 -> 449 [style=dashed label="simple-type-specifier"]
  1170 -> 1542 [style=dashed label="statement"]
  1170 -> 117 [style=dashed label="static_assert-declaration"]
  1170 -> 118 [style=dashed label="storage-class-specifier"]
  1170 -> 450 [style=dashed label="string-literal"]
  1170 -> 121 [style=dashed label="template-id"]
  1170 -> 216 [style=dashed label="template-name"]
  1170 -> 535 [style=dashed label="throw-expression"]
  1170 -> 697 [style=dashed label="try-block"]
  1170 -> 124 [style=dashed label="type-constraint"]
  1170 -> 125 [style=dashed label="type-name"]
  1170 -> 126 [style=dashed label="type-specifier"]
  1170 -> 127 [style=dashed label="typedef-name"]
  1170 -> 453 [style=dashed label="typename-specifier"]
  1170 -> 454 [style=dashed label="unary-expression"]
  1170 -> 455 [style=dashed label="unary-operator"]
  1170 -> 130 [style=dashed label="unqualified-id"]
  1170 -> 456 [style=dashed label="user-defined-character-literal"]
  1170 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1170 -> 458 [style=dashed label="user-defined-integer-literal"]
  1170 -> 459 [style=dashed label="user-defined-literal"]
  1170 -> 460 [style=dashed label="user-defined-string-literal"]
  1170 -> 131 [style=dashed label="using-declaration"]
  1170 -> 132 [style=dashed label="using-directive"]
  1170 -> 133 [style=dashed label="using-enum-declaration"]
  1170 -> 537 [style=dashed label="yield-expression"]
  1171 [label="State 1171\n\l1083 try-block: \"try\" compound-statement • handler-seq\l"]
  1171 -> 1200 [style=solid label="\"catch\""]
  1171 -> 1201 [style=dashed label="handler"]
  1171 -> 1543 [style=dashed label="handler-seq"]
  1172 [label="State 1172\n\l509 iteration-statement: \"while\" '(' • condition ')' statement\l"]
  1172 -> 1 [style=solid label="IDENTIFIER"]
  1172 -> 361 [style=solid label="'+'"]
  1172 -> 362 [style=solid label="'-'"]
  1172 -> 4 [style=solid label="\"alignas\""]
  1172 -> 363 [style=solid label="'('"]
  1172 -> 364 [style=solid label="'&'"]
  1172 -> 365 [style=solid label="\"::\""]
  1172 -> 667 [style=solid label="'['"]
  1172 -> 367 [style=solid label="\"co_await\""]
  1172 -> 11 [style=solid label="\"virtual\""]
  1172 -> 368 [style=solid label="'0'"]
  1172 -> 369 [style=solid label="'1'"]
  1172 -> 370 [style=solid label="\"0b\""]
  1172 -> 371 [style=solid label="\"0B\""]
  1172 -> 372 [style=solid label="'\\''"]
  1172 -> 373 [style=solid label="\"false\""]
  1172 -> 374 [style=solid label="\"true\""]
  1172 -> 12 [style=solid label="\"class\""]
  1172 -> 13 [style=solid label="\"struct\""]
  1172 -> 14 [style=solid label="\"union\""]
  1172 -> 375 [style=solid label="\"noexcept\""]
  1172 -> 17 [style=solid label="\"operator\""]
  1172 -> 18 [style=solid label="\"const\""]
  1172 -> 19 [style=solid label="\"volatile\""]
  1172 -> 20 [style=solid label="\"friend\""]
  1172 -> 21 [style=solid label="\"typedef\""]
  1172 -> 22 [style=solid label="\"constexpr\""]
  1172 -> 23 [style=solid label="\"consteval\""]
  1172 -> 24 [style=solid label="\"constinit\""]
  1172 -> 263 [style=solid label="\"inline\""]
  1172 -> 26 [style=solid label="\"decltype\""]
  1172 -> 376 [style=solid label="\"delete\""]
  1172 -> 377 [style=solid label="'.'"]
  1172 -> 378 [style=solid label="'2'"]
  1172 -> 379 [style=solid label="'3'"]
  1172 -> 380 [style=solid label="'4'"]
  1172 -> 381 [style=solid label="'5'"]
  1172 -> 382 [style=solid label="'6'"]
  1172 -> 383 [style=solid label="'7'"]
  1172 -> 384 [style=solid label="'8'"]
  1172 -> 385 [style=solid label="'9'"]
  1172 -> 27 [style=solid label="\"enum\""]
  1172 -> 185 [style=solid label="\"u8\""]
  1172 -> 186 [style=solid label="'u'"]
  1172 -> 187 [style=solid label="'U'"]
  1172 -> 188 [style=solid label="'L'"]
  1172 -> 264 [style=solid label="\"extern\""]
  1172 -> 29 [style=solid label="\"explicit\""]
  1172 -> 386 [style=solid label="'*'"]
  1172 -> 203 [style=solid label="'\"'"]
  1172 -> 387 [style=solid label="\"0x\""]
  1172 -> 388 [style=solid label="\"0X\""]
  1172 -> 389 [style=solid label="\"requires\""]
  1172 -> 390 [style=solid label="\"new\""]
  1172 -> 391 [style=solid label="'~'"]
  1172 -> 392 [style=solid label="'!'"]
  1172 -> 393 [style=solid label="\"++\""]
  1172 -> 394 [style=solid label="\"--\""]
  1172 -> 395 [style=solid label="\"this\""]
  1172 -> 37 [style=solid label="\"auto\""]
  1172 -> 396 [style=solid label="\"nullptr\""]
  1172 -> 397 [style=solid label="\"dynamic_cast\""]
  1172 -> 398 [style=solid label="\"static_cast\""]
  1172 -> 399 [style=solid label="\"reinterpret_cast\""]
  1172 -> 400 [style=solid label="\"const_cast\""]
  1172 -> 401 [style=solid label="\"typeid\""]
  1172 -> 38 [style=solid label="\"char\""]
  1172 -> 39 [style=solid label="\"char8_t\""]
  1172 -> 40 [style=solid label="\"char16_t\""]
  1172 -> 41 [style=solid label="\"char32_t\""]
  1172 -> 42 [style=solid label="\"wchar_t\""]
  1172 -> 43 [style=solid label="\"bool\""]
  1172 -> 44 [style=solid label="\"short\""]
  1172 -> 45 [style=solid label="\"int\""]
  1172 -> 46 [style=solid label="\"long\""]
  1172 -> 47 [style=solid label="\"signed\""]
  1172 -> 48 [style=solid label="\"unsigned\""]
  1172 -> 49 [style=solid label="\"float\""]
  1172 -> 50 [style=solid label="\"double\""]
  1172 -> 51 [style=solid label="\"void\""]
  1172 -> 53 [style=solid label="\"static\""]
  1172 -> 54 [style=solid label="\"thread_local\""]
  1172 -> 55 [style=solid label="\"mutable\""]
  1172 -> 209 [style=solid label="'R'"]
  1172 -> 528 [style=solid label="\"throw\""]
  1172 -> 56 [style=solid label="\"typename\""]
  1172 -> 402 [style=solid label="\"sizeof\""]
  1172 -> 403 [style=solid label="\"alignof\""]
  1172 -> 529 [style=solid label="\"co_yield\""]
  1172 -> 404 [style=dashed label="additive-expression"]
  1172 -> 58 [style=dashed label="alignment-specifier"]
  1172 -> 405 [style=dashed label="and-expression"]
  1172 -> 530 [style=dashed label="assignment-expression"]
  1172 -> 61 [style=dashed label="attribute-specifier"]
  1172 -> 1544 [style=dashed label="attribute-specifier-seq"]
  1172 -> 406 [style=dashed label="await-expression"]
  1172 -> 407 [style=dashed label="binary-literal"]
  1172 -> 408 [style=dashed label="boolean-literal"]
  1172 -> 409 [style=dashed label="cast-expression"]
  1172 -> 410 [style=dashed label="character-literal"]
  1172 -> 64 [style=dashed label="class-head"]
  1172 -> 65 [style=dashed label="class-key"]
  1172 -> 66 [style=dashed label="class-name"]
  1172 -> 67 [style=dashed label="class-specifier"]
  1172 -> 411 [style=dashed label="compare-expression"]
  1172 -> 68 [style=dashed label="concept-name"]
  1172 -> 1545 [style=dashed label="condition"]
  1172 -> 531 [style=dashed label="conditional-expression"]
  1172 -> 69 [style=dashed label="conversion-function-id"]
  1172 -> 70 [style=dashed label="cv-qualifier"]
  1172 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1172 -> 415 [style=dashed label="decimal-literal"]
  1172 -> 71 [style=dashed label="decl-specifier"]
  1172 -> 1546 [style=dashed label="decl-specifier-seq"]
  1172 -> 77 [style=dashed label="decltype-specifier"]
  1172 -> 79 [style=dashed label="defining-type-specifier"]
  1172 -> 416 [style=dashed label="delete-expression"]
  1172 -> 417 [style=dashed label="digit"]
  1172 -> 418 [style=dashed label="digit-sequence"]
  1172 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1172 -> 81 [style=dashed label="elaborated-type-specifier"]
  1172 -> 419 [style=dashed label="encoding-prefix"]
  1172 -> 83 [style=dashed label="enum-head"]
  1172 -> 268 [style=dashed label="enum-key"]
  1172 -> 85 [style=dashed label="enum-name"]
  1172 -> 86 [style=dashed label="enum-specifier"]
  1172 -> 420 [style=dashed label="equality-expression"]
  1172 -> 421 [style=dashed label="exclusive-or-expression"]
  1172 -> 269 [style=dashed label="explicit-specifier"]
  1172 -> 1547 [style=dashed label="expression"]
  1172 -> 422 [style=dashed label="floating-point-literal"]
  1172 -> 423 [style=dashed label="fold-expression"]
  1172 -> 424 [style=dashed label="fractional-constant"]
  1172 -> 92 [style=dashed label="function-specifier"]
  1172 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1172 -> 426 [style=dashed label="hexadecimal-literal"]
  1172 -> 427 [style=dashed label="hexadecimal-prefix"]
  1172 -> 428 [style=dashed label="id-expression"]
  1172 -> 429 [style=dashed label="inclusive-or-expression"]
  1172 -> 430 [style=dashed label="integer-literal"]
  1172 -> 431 [style=dashed label="lambda-expression"]
  1172 -> 432 [style=dashed label="lambda-introducer"]
  1172 -> 433 [style=dashed label="literal"]
  1172 -> 96 [style=dashed label="literal-operator-id"]
  1172 -> 434 [style=dashed label="logical-and-expression"]
  1172 -> 533 [style=dashed label="logical-or-expression"]
  1172 -> 436 [style=dashed label="multiplicative-expression"]
  1172 -> 100 [style=dashed label="namespace-alias"]
  1172 -> 103 [style=dashed label="namespace-name"]
  1172 -> 437 [style=dashed label="nested-name-specifier"]
  1172 -> 438 [style=dashed label="new-expression"]
  1172 -> 439 [style=dashed label="noexcept-expression"]
  1172 -> 440 [style=dashed label="nonzero-digit"]
  1172 -> 441 [style=dashed label="octal-literal"]
  1172 -> 109 [style=dashed label="operator-function-id"]
  1172 -> 110 [style=dashed label="placeholder-type-specifier"]
  1172 -> 442 [style=dashed label="pm-expression"]
  1172 -> 443 [style=dashed label="pointer-literal"]
  1172 -> 444 [style=dashed label="postfix-expression"]
  1172 -> 445 [style=dashed label="primary-expression"]
  1172 -> 113 [style=dashed label="qualified-id"]
  1172 -> 446 [style=dashed label="relational-expression"]
  1172 -> 447 [style=dashed label="requires-expression"]
  1172 -> 448 [style=dashed label="shift-expression"]
  1172 -> 115 [style=dashed label="simple-template-id"]
  1172 -> 449 [style=dashed label="simple-type-specifier"]
  1172 -> 118 [style=dashed label="storage-class-specifier"]
  1172 -> 450 [style=dashed label="string-literal"]
  1172 -> 121 [style=dashed label="template-id"]
  1172 -> 216 [style=dashed label="template-name"]
  1172 -> 535 [style=dashed label="throw-expression"]
  1172 -> 124 [style=dashed label="type-constraint"]
  1172 -> 125 [style=dashed label="type-name"]
  1172 -> 126 [style=dashed label="type-specifier"]
  1172 -> 127 [style=dashed label="typedef-name"]
  1172 -> 453 [style=dashed label="typename-specifier"]
  1172 -> 454 [style=dashed label="unary-expression"]
  1172 -> 455 [style=dashed label="unary-operator"]
  1172 -> 130 [style=dashed label="unqualified-id"]
  1172 -> 456 [style=dashed label="user-defined-character-literal"]
  1172 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1172 -> 458 [style=dashed label="user-defined-integer-literal"]
  1172 -> 459 [style=dashed label="user-defined-literal"]
  1172 -> 460 [style=dashed label="user-defined-string-literal"]
  1172 -> 537 [style=dashed label="yield-expression"]
  1173 [label="State 1173\n\l510 iteration-statement: \"do\" statement • \"while\" '(' expression ')' ';'\l"]
  1173 -> 1548 [style=solid label="\"while\""]
  1174 [label="State 1174\n\l511 iteration-statement: \"for\" '(' • init-statement ';' ')' statement\l512                    | \"for\" '(' • init-statement condition ';' ')' statement\l513                    | \"for\" '(' • init-statement ';' expression ')' statement\l514                    | \"for\" '(' • init-statement condition ';' expression ')' statement\l515                    | \"for\" '(' • for-range-declaration ':' for-range-initializer ')' statement\l516                    | \"for\" '(' • init-statement for-range-declaration ':' for-range-initializer ')' statement\l"]
  1174 -> 1 [style=solid label="IDENTIFIER"]
  1174 -> 361 [style=solid label="'+'"]
  1174 -> 362 [style=solid label="'-'"]
  1174 -> 1549 [style=solid label="\"using\""]
  1174 -> 666 [style=solid label="';'"]
  1174 -> 4 [style=solid label="\"alignas\""]
  1174 -> 363 [style=solid label="'('"]
  1174 -> 364 [style=solid label="'&'"]
  1174 -> 365 [style=solid label="\"::\""]
  1174 -> 667 [style=solid label="'['"]
  1174 -> 367 [style=solid label="\"co_await\""]
  1174 -> 11 [style=solid label="\"virtual\""]
  1174 -> 368 [style=solid label="'0'"]
  1174 -> 369 [style=solid label="'1'"]
  1174 -> 370 [style=solid label="\"0b\""]
  1174 -> 371 [style=solid label="\"0B\""]
  1174 -> 372 [style=solid label="'\\''"]
  1174 -> 373 [style=solid label="\"false\""]
  1174 -> 374 [style=solid label="\"true\""]
  1174 -> 12 [style=solid label="\"class\""]
  1174 -> 13 [style=solid label="\"struct\""]
  1174 -> 14 [style=solid label="\"union\""]
  1174 -> 375 [style=solid label="\"noexcept\""]
  1174 -> 17 [style=solid label="\"operator\""]
  1174 -> 18 [style=solid label="\"const\""]
  1174 -> 19 [style=solid label="\"volatile\""]
  1174 -> 20 [style=solid label="\"friend\""]
  1174 -> 21 [style=solid label="\"typedef\""]
  1174 -> 22 [style=solid label="\"constexpr\""]
  1174 -> 23 [style=solid label="\"consteval\""]
  1174 -> 24 [style=solid label="\"constinit\""]
  1174 -> 263 [style=solid label="\"inline\""]
  1174 -> 26 [style=solid label="\"decltype\""]
  1174 -> 376 [style=solid label="\"delete\""]
  1174 -> 377 [style=solid label="'.'"]
  1174 -> 378 [style=solid label="'2'"]
  1174 -> 379 [style=solid label="'3'"]
  1174 -> 380 [style=solid label="'4'"]
  1174 -> 381 [style=solid label="'5'"]
  1174 -> 382 [style=solid label="'6'"]
  1174 -> 383 [style=solid label="'7'"]
  1174 -> 384 [style=solid label="'8'"]
  1174 -> 385 [style=solid label="'9'"]
  1174 -> 27 [style=solid label="\"enum\""]
  1174 -> 185 [style=solid label="\"u8\""]
  1174 -> 186 [style=solid label="'u'"]
  1174 -> 187 [style=solid label="'U'"]
  1174 -> 188 [style=solid label="'L'"]
  1174 -> 264 [style=solid label="\"extern\""]
  1174 -> 29 [style=solid label="\"explicit\""]
  1174 -> 386 [style=solid label="'*'"]
  1174 -> 203 [style=solid label="'\"'"]
  1174 -> 387 [style=solid label="\"0x\""]
  1174 -> 388 [style=solid label="\"0X\""]
  1174 -> 389 [style=solid label="\"requires\""]
  1174 -> 390 [style=solid label="\"new\""]
  1174 -> 391 [style=solid label="'~'"]
  1174 -> 392 [style=solid label="'!'"]
  1174 -> 393 [style=solid label="\"++\""]
  1174 -> 394 [style=solid label="\"--\""]
  1174 -> 395 [style=solid label="\"this\""]
  1174 -> 37 [style=solid label="\"auto\""]
  1174 -> 396 [style=solid label="\"nullptr\""]
  1174 -> 397 [style=solid label="\"dynamic_cast\""]
  1174 -> 398 [style=solid label="\"static_cast\""]
  1174 -> 399 [style=solid label="\"reinterpret_cast\""]
  1174 -> 400 [style=solid label="\"const_cast\""]
  1174 -> 401 [style=solid label="\"typeid\""]
  1174 -> 38 [style=solid label="\"char\""]
  1174 -> 39 [style=solid label="\"char8_t\""]
  1174 -> 40 [style=solid label="\"char16_t\""]
  1174 -> 41 [style=solid label="\"char32_t\""]
  1174 -> 42 [style=solid label="\"wchar_t\""]
  1174 -> 43 [style=solid label="\"bool\""]
  1174 -> 44 [style=solid label="\"short\""]
  1174 -> 45 [style=solid label="\"int\""]
  1174 -> 46 [style=solid label="\"long\""]
  1174 -> 47 [style=solid label="\"signed\""]
  1174 -> 48 [style=solid label="\"unsigned\""]
  1174 -> 49 [style=solid label="\"float\""]
  1174 -> 50 [style=solid label="\"double\""]
  1174 -> 51 [style=solid label="\"void\""]
  1174 -> 53 [style=solid label="\"static\""]
  1174 -> 54 [style=solid label="\"thread_local\""]
  1174 -> 55 [style=solid label="\"mutable\""]
  1174 -> 209 [style=solid label="'R'"]
  1174 -> 528 [style=solid label="\"throw\""]
  1174 -> 56 [style=solid label="\"typename\""]
  1174 -> 402 [style=solid label="\"sizeof\""]
  1174 -> 403 [style=solid label="\"alignof\""]
  1174 -> 529 [style=solid label="\"co_yield\""]
  1174 -> 404 [style=dashed label="additive-expression"]
  1174 -> 1550 [style=dashed label="alias-declaration"]
  1174 -> 58 [style=dashed label="alignment-specifier"]
  1174 -> 405 [style=dashed label="and-expression"]
  1174 -> 530 [style=dashed label="assignment-expression"]
  1174 -> 61 [style=dashed label="attribute-specifier"]
  1174 -> 1551 [style=dashed label="attribute-specifier-seq"]
  1174 -> 406 [style=dashed label="await-expression"]
  1174 -> 407 [style=dashed label="binary-literal"]
  1174 -> 408 [style=dashed label="boolean-literal"]
  1174 -> 409 [style=dashed label="cast-expression"]
  1174 -> 410 [style=dashed label="character-literal"]
  1174 -> 64 [style=dashed label="class-head"]
  1174 -> 65 [style=dashed label="class-key"]
  1174 -> 66 [style=dashed label="class-name"]
  1174 -> 67 [style=dashed label="class-specifier"]
  1174 -> 411 [style=dashed label="compare-expression"]
  1174 -> 68 [style=dashed label="concept-name"]
  1174 -> 531 [style=dashed label="conditional-expression"]
  1174 -> 69 [style=dashed label="conversion-function-id"]
  1174 -> 70 [style=dashed label="cv-qualifier"]
  1174 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1174 -> 415 [style=dashed label="decimal-literal"]
  1174 -> 71 [style=dashed label="decl-specifier"]
  1174 -> 1552 [style=dashed label="decl-specifier-seq"]
  1174 -> 77 [style=dashed label="decltype-specifier"]
  1174 -> 79 [style=dashed label="defining-type-specifier"]
  1174 -> 416 [style=dashed label="delete-expression"]
  1174 -> 417 [style=dashed label="digit"]
  1174 -> 418 [style=dashed label="digit-sequence"]
  1174 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1174 -> 81 [style=dashed label="elaborated-type-specifier"]
  1174 -> 419 [style=dashed label="encoding-prefix"]
  1174 -> 83 [style=dashed label="enum-head"]
  1174 -> 268 [style=dashed label="enum-key"]
  1174 -> 85 [style=dashed label="enum-name"]
  1174 -> 86 [style=dashed label="enum-specifier"]
  1174 -> 420 [style=dashed label="equality-expression"]
  1174 -> 421 [style=dashed label="exclusive-or-expression"]
  1174 -> 269 [style=dashed label="explicit-specifier"]
  1174 -> 689 [style=dashed label="expression"]
  1174 -> 1553 [style=dashed label="expression-statement"]
  1174 -> 422 [style=dashed label="floating-point-literal"]
  1174 -> 423 [style=dashed label="fold-expression"]
  1174 -> 1554 [style=dashed label="for-range-declaration"]
  1174 -> 424 [style=dashed label="fractional-constant"]
  1174 -> 92 [style=dashed label="function-specifier"]
  1174 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1174 -> 426 [style=dashed label="hexadecimal-literal"]
  1174 -> 427 [style=dashed label="hexadecimal-prefix"]
  1174 -> 428 [style=dashed label="id-expression"]
  1174 -> 429 [style=dashed label="inclusive-or-expression"]
  1174 -> 1555 [style=dashed label="init-statement"]
  1174 -> 430 [style=dashed label="integer-literal"]
  1174 -> 431 [style=dashed label="lambda-expression"]
  1174 -> 432 [style=dashed label="lambda-introducer"]
  1174 -> 433 [style=dashed label="literal"]
  1174 -> 96 [style=dashed label="literal-operator-id"]
  1174 -> 434 [style=dashed label="logical-and-expression"]
  1174 -> 533 [style=dashed label="logical-or-expression"]
  1174 -> 436 [style=dashed label="multiplicative-expression"]
  1174 -> 100 [style=dashed label="namespace-alias"]
  1174 -> 103 [style=dashed label="namespace-name"]
  1174 -> 437 [style=dashed label="nested-name-specifier"]
  1174 -> 438 [style=dashed label="new-expression"]
  1174 -> 439 [style=dashed label="noexcept-expression"]
  1174 -> 440 [style=dashed label="nonzero-digit"]
  1174 -> 441 [style=dashed label="octal-literal"]
  1174 -> 109 [style=dashed label="operator-function-id"]
  1174 -> 110 [style=dashed label="placeholder-type-specifier"]
  1174 -> 442 [style=dashed label="pm-expression"]
  1174 -> 443 [style=dashed label="pointer-literal"]
  1174 -> 444 [style=dashed label="postfix-expression"]
  1174 -> 445 [style=dashed label="primary-expression"]
  1174 -> 113 [style=dashed label="qualified-id"]
  1174 -> 446 [style=dashed label="relational-expression"]
  1174 -> 447 [style=dashed label="requires-expression"]
  1174 -> 448 [style=dashed label="shift-expression"]
  1174 -> 1556 [style=dashed label="simple-declaration"]
  1174 -> 115 [style=dashed label="simple-template-id"]
  1174 -> 449 [style=dashed label="simple-type-specifier"]
  1174 -> 118 [style=dashed label="storage-class-specifier"]
  1174 -> 450 [style=dashed label="string-literal"]
  1174 -> 121 [style=dashed label="template-id"]
  1174 -> 216 [style=dashed label="template-name"]
  1174 -> 535 [style=dashed label="throw-expression"]
  1174 -> 124 [style=dashed label="type-constraint"]
  1174 -> 125 [style=dashed label="type-name"]
  1174 -> 126 [style=dashed label="type-specifier"]
  1174 -> 127 [style=dashed label="typedef-name"]
  1174 -> 453 [style=dashed label="typename-specifier"]
  1174 -> 454 [style=dashed label="unary-expression"]
  1174 -> 455 [style=dashed label="unary-operator"]
  1174 -> 130 [style=dashed label="unqualified-id"]
  1174 -> 456 [style=dashed label="user-defined-character-literal"]
  1174 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1174 -> 458 [style=dashed label="user-defined-integer-literal"]
  1174 -> 459 [style=dashed label="user-defined-literal"]
  1174 -> 460 [style=dashed label="user-defined-string-literal"]
  1174 -> 537 [style=dashed label="yield-expression"]
  1175 [label="State 1175\n\l517 jump-statement: \"break\" ';' •\l"]
  1175 -> "1175R517" [style=solid]
 "1175R517" [label="R517", fillcolor=3, shape=diamond, style=filled]
  1176 [label="State 1176\n\l518 jump-statement: \"continue\" ';' •\l"]
  1176 -> "1176R518" [style=solid]
 "1176R518" [label="R518", fillcolor=3, shape=diamond, style=filled]
  1177 [label="State 1177\n\l519 jump-statement: \"return\" ';' •\l"]
  1177 -> "1177R519" [style=solid]
 "1177R519" [label="R519", fillcolor=3, shape=diamond, style=filled]
  1178 [label="State 1178\n\l520 jump-statement: \"return\" expr-or-braced-init-list • ';'\l"]
  1178 -> 1557 [style=solid label="';'"]
  1179 [label="State 1179\n\l522 jump-statement: \"goto\" IDENTIFIER • ';'\l"]
  1179 -> 1558 [style=solid label="';'"]
  1180 [label="State 1180\n\l526 labeled-statement: \"case\" constant-expression • ':' statement\l"]
  1180 -> 1559 [style=solid label="':'"]
  1181 [label="State 1181\n\l652 namespace-alias-definition: \"namespace\" IDENTIFIER • '=' qualified-namespace-specifier ';'\l"]
  1181 -> 568 [style=solid label="'='"]
  1182 [label="State 1182\n\l952 selection-statement: \"if\" '(' • condition ')' statement\l954                    | \"if\" '(' • init-statement condition ')' statement\l956                    | \"if\" '(' • condition ')' statement \"else\" statement\l958                    | \"if\" '(' • init-statement condition ')' statement \"else\" statement\l"]
  1182 -> 1 [style=solid label="IDENTIFIER"]
  1182 -> 361 [style=solid label="'+'"]
  1182 -> 362 [style=solid label="'-'"]
  1182 -> 1549 [style=solid label="\"using\""]
  1182 -> 666 [style=solid label="';'"]
  1182 -> 4 [style=solid label="\"alignas\""]
  1182 -> 363 [style=solid label="'('"]
  1182 -> 364 [style=solid label="'&'"]
  1182 -> 365 [style=solid label="\"::\""]
  1182 -> 667 [style=solid label="'['"]
  1182 -> 367 [style=solid label="\"co_await\""]
  1182 -> 11 [style=solid label="\"virtual\""]
  1182 -> 368 [style=solid label="'0'"]
  1182 -> 369 [style=solid label="'1'"]
  1182 -> 370 [style=solid label="\"0b\""]
  1182 -> 371 [style=solid label="\"0B\""]
  1182 -> 372 [style=solid label="'\\''"]
  1182 -> 373 [style=solid label="\"false\""]
  1182 -> 374 [style=solid label="\"true\""]
  1182 -> 12 [style=solid label="\"class\""]
  1182 -> 13 [style=solid label="\"struct\""]
  1182 -> 14 [style=solid label="\"union\""]
  1182 -> 375 [style=solid label="\"noexcept\""]
  1182 -> 17 [style=solid label="\"operator\""]
  1182 -> 18 [style=solid label="\"const\""]
  1182 -> 19 [style=solid label="\"volatile\""]
  1182 -> 20 [style=solid label="\"friend\""]
  1182 -> 21 [style=solid label="\"typedef\""]
  1182 -> 22 [style=solid label="\"constexpr\""]
  1182 -> 23 [style=solid label="\"consteval\""]
  1182 -> 24 [style=solid label="\"constinit\""]
  1182 -> 263 [style=solid label="\"inline\""]
  1182 -> 26 [style=solid label="\"decltype\""]
  1182 -> 376 [style=solid label="\"delete\""]
  1182 -> 377 [style=solid label="'.'"]
  1182 -> 378 [style=solid label="'2'"]
  1182 -> 379 [style=solid label="'3'"]
  1182 -> 380 [style=solid label="'4'"]
  1182 -> 381 [style=solid label="'5'"]
  1182 -> 382 [style=solid label="'6'"]
  1182 -> 383 [style=solid label="'7'"]
  1182 -> 384 [style=solid label="'8'"]
  1182 -> 385 [style=solid label="'9'"]
  1182 -> 27 [style=solid label="\"enum\""]
  1182 -> 185 [style=solid label="\"u8\""]
  1182 -> 186 [style=solid label="'u'"]
  1182 -> 187 [style=solid label="'U'"]
  1182 -> 188 [style=solid label="'L'"]
  1182 -> 264 [style=solid label="\"extern\""]
  1182 -> 29 [style=solid label="\"explicit\""]
  1182 -> 386 [style=solid label="'*'"]
  1182 -> 203 [style=solid label="'\"'"]
  1182 -> 387 [style=solid label="\"0x\""]
  1182 -> 388 [style=solid label="\"0X\""]
  1182 -> 389 [style=solid label="\"requires\""]
  1182 -> 390 [style=solid label="\"new\""]
  1182 -> 391 [style=solid label="'~'"]
  1182 -> 392 [style=solid label="'!'"]
  1182 -> 393 [style=solid label="\"++\""]
  1182 -> 394 [style=solid label="\"--\""]
  1182 -> 395 [style=solid label="\"this\""]
  1182 -> 37 [style=solid label="\"auto\""]
  1182 -> 396 [style=solid label="\"nullptr\""]
  1182 -> 397 [style=solid label="\"dynamic_cast\""]
  1182 -> 398 [style=solid label="\"static_cast\""]
  1182 -> 399 [style=solid label="\"reinterpret_cast\""]
  1182 -> 400 [style=solid label="\"const_cast\""]
  1182 -> 401 [style=solid label="\"typeid\""]
  1182 -> 38 [style=solid label="\"char\""]
  1182 -> 39 [style=solid label="\"char8_t\""]
  1182 -> 40 [style=solid label="\"char16_t\""]
  1182 -> 41 [style=solid label="\"char32_t\""]
  1182 -> 42 [style=solid label="\"wchar_t\""]
  1182 -> 43 [style=solid label="\"bool\""]
  1182 -> 44 [style=solid label="\"short\""]
  1182 -> 45 [style=solid label="\"int\""]
  1182 -> 46 [style=solid label="\"long\""]
  1182 -> 47 [style=solid label="\"signed\""]
  1182 -> 48 [style=solid label="\"unsigned\""]
  1182 -> 49 [style=solid label="\"float\""]
  1182 -> 50 [style=solid label="\"double\""]
  1182 -> 51 [style=solid label="\"void\""]
  1182 -> 53 [style=solid label="\"static\""]
  1182 -> 54 [style=solid label="\"thread_local\""]
  1182 -> 55 [style=solid label="\"mutable\""]
  1182 -> 209 [style=solid label="'R'"]
  1182 -> 528 [style=solid label="\"throw\""]
  1182 -> 56 [style=solid label="\"typename\""]
  1182 -> 402 [style=solid label="\"sizeof\""]
  1182 -> 403 [style=solid label="\"alignof\""]
  1182 -> 529 [style=solid label="\"co_yield\""]
  1182 -> 404 [style=dashed label="additive-expression"]
  1182 -> 1550 [style=dashed label="alias-declaration"]
  1182 -> 58 [style=dashed label="alignment-specifier"]
  1182 -> 405 [style=dashed label="and-expression"]
  1182 -> 530 [style=dashed label="assignment-expression"]
  1182 -> 61 [style=dashed label="attribute-specifier"]
  1182 -> 1560 [style=dashed label="attribute-specifier-seq"]
  1182 -> 406 [style=dashed label="await-expression"]
  1182 -> 407 [style=dashed label="binary-literal"]
  1182 -> 408 [style=dashed label="boolean-literal"]
  1182 -> 409 [style=dashed label="cast-expression"]
  1182 -> 410 [style=dashed label="character-literal"]
  1182 -> 64 [style=dashed label="class-head"]
  1182 -> 65 [style=dashed label="class-key"]
  1182 -> 66 [style=dashed label="class-name"]
  1182 -> 67 [style=dashed label="class-specifier"]
  1182 -> 411 [style=dashed label="compare-expression"]
  1182 -> 68 [style=dashed label="concept-name"]
  1182 -> 1561 [style=dashed label="condition"]
  1182 -> 531 [style=dashed label="conditional-expression"]
  1182 -> 69 [style=dashed label="conversion-function-id"]
  1182 -> 70 [style=dashed label="cv-qualifier"]
  1182 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1182 -> 415 [style=dashed label="decimal-literal"]
  1182 -> 71 [style=dashed label="decl-specifier"]
  1182 -> 1562 [style=dashed label="decl-specifier-seq"]
  1182 -> 77 [style=dashed label="decltype-specifier"]
  1182 -> 79 [style=dashed label="defining-type-specifier"]
  1182 -> 416 [style=dashed label="delete-expression"]
  1182 -> 417 [style=dashed label="digit"]
  1182 -> 418 [style=dashed label="digit-sequence"]
  1182 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1182 -> 81 [style=dashed label="elaborated-type-specifier"]
  1182 -> 419 [style=dashed label="encoding-prefix"]
  1182 -> 83 [style=dashed label="enum-head"]
  1182 -> 268 [style=dashed label="enum-key"]
  1182 -> 85 [style=dashed label="enum-name"]
  1182 -> 86 [style=dashed label="enum-specifier"]
  1182 -> 420 [style=dashed label="equality-expression"]
  1182 -> 421 [style=dashed label="exclusive-or-expression"]
  1182 -> 269 [style=dashed label="explicit-specifier"]
  1182 -> 1563 [style=dashed label="expression"]
  1182 -> 1553 [style=dashed label="expression-statement"]
  1182 -> 422 [style=dashed label="floating-point-literal"]
  1182 -> 423 [style=dashed label="fold-expression"]
  1182 -> 424 [style=dashed label="fractional-constant"]
  1182 -> 92 [style=dashed label="function-specifier"]
  1182 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1182 -> 426 [style=dashed label="hexadecimal-literal"]
  1182 -> 427 [style=dashed label="hexadecimal-prefix"]
  1182 -> 428 [style=dashed label="id-expression"]
  1182 -> 429 [style=dashed label="inclusive-or-expression"]
  1182 -> 1564 [style=dashed label="init-statement"]
  1182 -> 430 [style=dashed label="integer-literal"]
  1182 -> 431 [style=dashed label="lambda-expression"]
  1182 -> 432 [style=dashed label="lambda-introducer"]
  1182 -> 433 [style=dashed label="literal"]
  1182 -> 96 [style=dashed label="literal-operator-id"]
  1182 -> 434 [style=dashed label="logical-and-expression"]
  1182 -> 533 [style=dashed label="logical-or-expression"]
  1182 -> 436 [style=dashed label="multiplicative-expression"]
  1182 -> 100 [style=dashed label="namespace-alias"]
  1182 -> 103 [style=dashed label="namespace-name"]
  1182 -> 437 [style=dashed label="nested-name-specifier"]
  1182 -> 438 [style=dashed label="new-expression"]
  1182 -> 439 [style=dashed label="noexcept-expression"]
  1182 -> 440 [style=dashed label="nonzero-digit"]
  1182 -> 441 [style=dashed label="octal-literal"]
  1182 -> 109 [style=dashed label="operator-function-id"]
  1182 -> 110 [style=dashed label="placeholder-type-specifier"]
  1182 -> 442 [style=dashed label="pm-expression"]
  1182 -> 443 [style=dashed label="pointer-literal"]
  1182 -> 444 [style=dashed label="postfix-expression"]
  1182 -> 445 [style=dashed label="primary-expression"]
  1182 -> 113 [style=dashed label="qualified-id"]
  1182 -> 446 [style=dashed label="relational-expression"]
  1182 -> 447 [style=dashed label="requires-expression"]
  1182 -> 448 [style=dashed label="shift-expression"]
  1182 -> 1556 [style=dashed label="simple-declaration"]
  1182 -> 115 [style=dashed label="simple-template-id"]
  1182 -> 449 [style=dashed label="simple-type-specifier"]
  1182 -> 118 [style=dashed label="storage-class-specifier"]
  1182 -> 450 [style=dashed label="string-literal"]
  1182 -> 121 [style=dashed label="template-id"]
  1182 -> 216 [style=dashed label="template-name"]
  1182 -> 535 [style=dashed label="throw-expression"]
  1182 -> 124 [style=dashed label="type-constraint"]
  1182 -> 125 [style=dashed label="type-name"]
  1182 -> 126 [style=dashed label="type-specifier"]
  1182 -> 127 [style=dashed label="typedef-name"]
  1182 -> 453 [style=dashed label="typename-specifier"]
  1182 -> 454 [style=dashed label="unary-expression"]
  1182 -> 455 [style=dashed label="unary-operator"]
  1182 -> 130 [style=dashed label="unqualified-id"]
  1182 -> 456 [style=dashed label="user-defined-character-literal"]
  1182 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1182 -> 458 [style=dashed label="user-defined-integer-literal"]
  1182 -> 459 [style=dashed label="user-defined-literal"]
  1182 -> 460 [style=dashed label="user-defined-string-literal"]
  1182 -> 537 [style=dashed label="yield-expression"]
  1183 [label="State 1183\n\l953 selection-statement: \"if\" \"constexpr\" • '(' condition ')' statement\l955                    | \"if\" \"constexpr\" • '(' init-statement condition ')' statement\l957                    | \"if\" \"constexpr\" • '(' condition ')' statement \"else\" statement\l959                    | \"if\" \"constexpr\" • '(' init-statement condition ')' statement \"else\" statement\l"]
  1183 -> 1565 [style=solid label="'('"]
  1184 [label="State 1184\n\l960 selection-statement: \"if\" \"consteval\" • compound-statement\l962                    | \"if\" \"consteval\" • compound-statement \"else\" statement\l"]
  1184 -> 294 [style=solid label="'{'"]
  1184 -> 1566 [style=dashed label="compound-statement"]
  1185 [label="State 1185\n\l961 selection-statement: \"if\" '!' • \"consteval\" compound-statement\l963                    | \"if\" '!' • \"consteval\" compound-statement \"else\" statement\l"]
  1185 -> 1567 [style=solid label="\"consteval\""]
  1186 [label="State 1186\n\l964 selection-statement: \"switch\" '(' • condition ')' statement\l965                    | \"switch\" '(' • init-statement condition ')' statement\l"]
  1186 -> 1 [style=solid label="IDENTIFIER"]
  1186 -> 361 [style=solid label="'+'"]
  1186 -> 362 [style=solid label="'-'"]
  1186 -> 1549 [style=solid label="\"using\""]
  1186 -> 666 [style=solid label="';'"]
  1186 -> 4 [style=solid label="\"alignas\""]
  1186 -> 363 [style=solid label="'('"]
  1186 -> 364 [style=solid label="'&'"]
  1186 -> 365 [style=solid label="\"::\""]
  1186 -> 667 [style=solid label="'['"]
  1186 -> 367 [style=solid label="\"co_await\""]
  1186 -> 11 [style=solid label="\"virtual\""]
  1186 -> 368 [style=solid label="'0'"]
  1186 -> 369 [style=solid label="'1'"]
  1186 -> 370 [style=solid label="\"0b\""]
  1186 -> 371 [style=solid label="\"0B\""]
  1186 -> 372 [style=solid label="'\\''"]
  1186 -> 373 [style=solid label="\"false\""]
  1186 -> 374 [style=solid label="\"true\""]
  1186 -> 12 [style=solid label="\"class\""]
  1186 -> 13 [style=solid label="\"struct\""]
  1186 -> 14 [style=solid label="\"union\""]
  1186 -> 375 [style=solid label="\"noexcept\""]
  1186 -> 17 [style=solid label="\"operator\""]
  1186 -> 18 [style=solid label="\"const\""]
  1186 -> 19 [style=solid label="\"volatile\""]
  1186 -> 20 [style=solid label="\"friend\""]
  1186 -> 21 [style=solid label="\"typedef\""]
  1186 -> 22 [style=solid label="\"constexpr\""]
  1186 -> 23 [style=solid label="\"consteval\""]
  1186 -> 24 [style=solid label="\"constinit\""]
  1186 -> 263 [style=solid label="\"inline\""]
  1186 -> 26 [style=solid label="\"decltype\""]
  1186 -> 376 [style=solid label="\"delete\""]
  1186 -> 377 [style=solid label="'.'"]
  1186 -> 378 [style=solid label="'2'"]
  1186 -> 379 [style=solid label="'3'"]
  1186 -> 380 [style=solid label="'4'"]
  1186 -> 381 [style=solid label="'5'"]
  1186 -> 382 [style=solid label="'6'"]
  1186 -> 383 [style=solid label="'7'"]
  1186 -> 384 [style=solid label="'8'"]
  1186 -> 385 [style=solid label="'9'"]
  1186 -> 27 [style=solid label="\"enum\""]
  1186 -> 185 [style=solid label="\"u8\""]
  1186 -> 186 [style=solid label="'u'"]
  1186 -> 187 [style=solid label="'U'"]
  1186 -> 188 [style=solid label="'L'"]
  1186 -> 264 [style=solid label="\"extern\""]
  1186 -> 29 [style=solid label="\"explicit\""]
  1186 -> 386 [style=solid label="'*'"]
  1186 -> 203 [style=solid label="'\"'"]
  1186 -> 387 [style=solid label="\"0x\""]
  1186 -> 388 [style=solid label="\"0X\""]
  1186 -> 389 [style=solid label="\"requires\""]
  1186 -> 390 [style=solid label="\"new\""]
  1186 -> 391 [style=solid label="'~'"]
  1186 -> 392 [style=solid label="'!'"]
  1186 -> 393 [style=solid label="\"++\""]
  1186 -> 394 [style=solid label="\"--\""]
  1186 -> 395 [style=solid label="\"this\""]
  1186 -> 37 [style=solid label="\"auto\""]
  1186 -> 396 [style=solid label="\"nullptr\""]
  1186 -> 397 [style=solid label="\"dynamic_cast\""]
  1186 -> 398 [style=solid label="\"static_cast\""]
  1186 -> 399 [style=solid label="\"reinterpret_cast\""]
  1186 -> 400 [style=solid label="\"const_cast\""]
  1186 -> 401 [style=solid label="\"typeid\""]
  1186 -> 38 [style=solid label="\"char\""]
  1186 -> 39 [style=solid label="\"char8_t\""]
  1186 -> 40 [style=solid label="\"char16_t\""]
  1186 -> 41 [style=solid label="\"char32_t\""]
  1186 -> 42 [style=solid label="\"wchar_t\""]
  1186 -> 43 [style=solid label="\"bool\""]
  1186 -> 44 [style=solid label="\"short\""]
  1186 -> 45 [style=solid label="\"int\""]
  1186 -> 46 [style=solid label="\"long\""]
  1186 -> 47 [style=solid label="\"signed\""]
  1186 -> 48 [style=solid label="\"unsigned\""]
  1186 -> 49 [style=solid label="\"float\""]
  1186 -> 50 [style=solid label="\"double\""]
  1186 -> 51 [style=solid label="\"void\""]
  1186 -> 53 [style=solid label="\"static\""]
  1186 -> 54 [style=solid label="\"thread_local\""]
  1186 -> 55 [style=solid label="\"mutable\""]
  1186 -> 209 [style=solid label="'R'"]
  1186 -> 528 [style=solid label="\"throw\""]
  1186 -> 56 [style=solid label="\"typename\""]
  1186 -> 402 [style=solid label="\"sizeof\""]
  1186 -> 403 [style=solid label="\"alignof\""]
  1186 -> 529 [style=solid label="\"co_yield\""]
  1186 -> 404 [style=dashed label="additive-expression"]
  1186 -> 1550 [style=dashed label="alias-declaration"]
  1186 -> 58 [style=dashed label="alignment-specifier"]
  1186 -> 405 [style=dashed label="and-expression"]
  1186 -> 530 [style=dashed label="assignment-expression"]
  1186 -> 61 [style=dashed label="attribute-specifier"]
  1186 -> 1560 [style=dashed label="attribute-specifier-seq"]
  1186 -> 406 [style=dashed label="await-expression"]
  1186 -> 407 [style=dashed label="binary-literal"]
  1186 -> 408 [style=dashed label="boolean-literal"]
  1186 -> 409 [style=dashed label="cast-expression"]
  1186 -> 410 [style=dashed label="character-literal"]
  1186 -> 64 [style=dashed label="class-head"]
  1186 -> 65 [style=dashed label="class-key"]
  1186 -> 66 [style=dashed label="class-name"]
  1186 -> 67 [style=dashed label="class-specifier"]
  1186 -> 411 [style=dashed label="compare-expression"]
  1186 -> 68 [style=dashed label="concept-name"]
  1186 -> 1568 [style=dashed label="condition"]
  1186 -> 531 [style=dashed label="conditional-expression"]
  1186 -> 69 [style=dashed label="conversion-function-id"]
  1186 -> 70 [style=dashed label="cv-qualifier"]
  1186 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1186 -> 415 [style=dashed label="decimal-literal"]
  1186 -> 71 [style=dashed label="decl-specifier"]
  1186 -> 1562 [style=dashed label="decl-specifier-seq"]
  1186 -> 77 [style=dashed label="decltype-specifier"]
  1186 -> 79 [style=dashed label="defining-type-specifier"]
  1186 -> 416 [style=dashed label="delete-expression"]
  1186 -> 417 [style=dashed label="digit"]
  1186 -> 418 [style=dashed label="digit-sequence"]
  1186 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1186 -> 81 [style=dashed label="elaborated-type-specifier"]
  1186 -> 419 [style=dashed label="encoding-prefix"]
  1186 -> 83 [style=dashed label="enum-head"]
  1186 -> 268 [style=dashed label="enum-key"]
  1186 -> 85 [style=dashed label="enum-name"]
  1186 -> 86 [style=dashed label="enum-specifier"]
  1186 -> 420 [style=dashed label="equality-expression"]
  1186 -> 421 [style=dashed label="exclusive-or-expression"]
  1186 -> 269 [style=dashed label="explicit-specifier"]
  1186 -> 1563 [style=dashed label="expression"]
  1186 -> 1553 [style=dashed label="expression-statement"]
  1186 -> 422 [style=dashed label="floating-point-literal"]
  1186 -> 423 [style=dashed label="fold-expression"]
  1186 -> 424 [style=dashed label="fractional-constant"]
  1186 -> 92 [style=dashed label="function-specifier"]
  1186 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1186 -> 426 [style=dashed label="hexadecimal-literal"]
  1186 -> 427 [style=dashed label="hexadecimal-prefix"]
  1186 -> 428 [style=dashed label="id-expression"]
  1186 -> 429 [style=dashed label="inclusive-or-expression"]
  1186 -> 1569 [style=dashed label="init-statement"]
  1186 -> 430 [style=dashed label="integer-literal"]
  1186 -> 431 [style=dashed label="lambda-expression"]
  1186 -> 432 [style=dashed label="lambda-introducer"]
  1186 -> 433 [style=dashed label="literal"]
  1186 -> 96 [style=dashed label="literal-operator-id"]
  1186 -> 434 [style=dashed label="logical-and-expression"]
  1186 -> 533 [style=dashed label="logical-or-expression"]
  1186 -> 436 [style=dashed label="multiplicative-expression"]
  1186 -> 100 [style=dashed label="namespace-alias"]
  1186 -> 103 [style=dashed label="namespace-name"]
  1186 -> 437 [style=dashed label="nested-name-specifier"]
  1186 -> 438 [style=dashed label="new-expression"]
  1186 -> 439 [style=dashed label="noexcept-expression"]
  1186 -> 440 [style=dashed label="nonzero-digit"]
  1186 -> 441 [style=dashed label="octal-literal"]
  1186 -> 109 [style=dashed label="operator-function-id"]
  1186 -> 110 [style=dashed label="placeholder-type-specifier"]
  1186 -> 442 [style=dashed label="pm-expression"]
  1186 -> 443 [style=dashed label="pointer-literal"]
  1186 -> 444 [style=dashed label="postfix-expression"]
  1186 -> 445 [style=dashed label="primary-expression"]
  1186 -> 113 [style=dashed label="qualified-id"]
  1186 -> 446 [style=dashed label="relational-expression"]
  1186 -> 447 [style=dashed label="requires-expression"]
  1186 -> 448 [style=dashed label="shift-expression"]
  1186 -> 1556 [style=dashed label="simple-declaration"]
  1186 -> 115 [style=dashed label="simple-template-id"]
  1186 -> 449 [style=dashed label="simple-type-specifier"]
  1186 -> 118 [style=dashed label="storage-class-specifier"]
  1186 -> 450 [style=dashed label="string-literal"]
  1186 -> 121 [style=dashed label="template-id"]
  1186 -> 216 [style=dashed label="template-name"]
  1186 -> 535 [style=dashed label="throw-expression"]
  1186 -> 124 [style=dashed label="type-constraint"]
  1186 -> 125 [style=dashed label="type-name"]
  1186 -> 126 [style=dashed label="type-specifier"]
  1186 -> 127 [style=dashed label="typedef-name"]
  1186 -> 453 [style=dashed label="typename-specifier"]
  1186 -> 454 [style=dashed label="unary-expression"]
  1186 -> 455 [style=dashed label="unary-operator"]
  1186 -> 130 [style=dashed label="unqualified-id"]
  1186 -> 456 [style=dashed label="user-defined-character-literal"]
  1186 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1186 -> 458 [style=dashed label="user-defined-integer-literal"]
  1186 -> 459 [style=dashed label="user-defined-literal"]
  1186 -> 460 [style=dashed label="user-defined-string-literal"]
  1186 -> 537 [style=dashed label="yield-expression"]
  1187 [label="State 1187\n\l145 class-name: IDENTIFIER •\l163 concept-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l523 labeled-statement: attribute-specifier-seq IDENTIFIER • ':' statement\l651 namespace-alias: IDENTIFIER •\l657 namespace-name: IDENTIFIER •\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l1154 unqualified-id: IDENTIFIER •\l"]
  1187 -> 1570 [style=solid label="':'"]
  1187 -> "1187R145" [style=solid]
 "1187R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  1187 -> "1187R163d" [label="[\"decltype\", \"auto\"]", style=solid]
 "1187R163d" [label="R163", fillcolor=5, shape=diamond, style=filled]
  1187 -> "1187R163" [label="['<']", style=solid]
 "1187R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  1187 -> "1187R297d" [label="[IDENTIFIER, \"alignas\", '(', \"...\", '&', \"::\", '[', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "1187R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  1187 -> "1187R651d" [label="[\"::\"]", style=solid]
 "1187R651d" [label="R651", fillcolor=5, shape=diamond, style=filled]
  1187 -> "1187R657d" [label="[\"::\"]", style=solid]
 "1187R657d" [label="R657", fillcolor=5, shape=diamond, style=filled]
  1187 -> "1187R1066d" [label="[IDENTIFIER, \"alignas\", '(', \"...\", '&', \"::\", '[', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", '<', \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "1187R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  1187 -> "1187R1124d" [label="[IDENTIFIER, \"alignas\", '(', \"...\", '&', \"::\", '[', '{', \"virtual\", \"class\", \"struct\", \"union\", \"&&\", \"operator\", \"const\", \"volatile\", \"friend\", \"typedef\", \"constexpr\", \"consteval\", \"constinit\", \"inline\", \"decltype\", \"enum\", \"extern\", \"explicit\", '*', '~', \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"static\", \"thread_local\", \"mutable\", \"typename\"]", style=solid]
 "1187R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  1187 -> "1187R1154d" [label="['(', '&', '[', \"&&\", '<', '*']", style=solid]
 "1187R1154d" [label="R1154", fillcolor=5, shape=diamond, style=filled]
  1187 -> "1187R1154" [label="['+', '-', '=', ';', \"*=\", \"/=\", \"%=\", \"+=\", \"-=\", \">>=\", \"<<=\", \"&=\", \"^=\", \"|=\", ',', \"<=>\", '?', \"||\", \"->\", '.', \"==\", \"!=\", '^', '>', '/', '%', '|', \"<<\", \">>\", \"<=\", \">=\", \".*\", \"->*\", \"++\", \"--\"]", style=solid]
 "1187R1154" [label="R1154", fillcolor=3, shape=diamond, style=filled]
  1188 [label="State 1188\n\l527 labeled-statement: attribute-specifier-seq \"default\" • ':' statement\l"]
  1188 -> 1571 [style=solid label="':'"]
  1189 [label="State 1189\n\l525 labeled-statement: attribute-specifier-seq \"case\" • constant-expression ':' statement\l"]
  1189 -> 1 [style=solid label="IDENTIFIER"]
  1189 -> 361 [style=solid label="'+'"]
  1189 -> 362 [style=solid label="'-'"]
  1189 -> 363 [style=solid label="'('"]
  1189 -> 364 [style=solid label="'&'"]
  1189 -> 365 [style=solid label="\"::\""]
  1189 -> 366 [style=solid label="'['"]
  1189 -> 367 [style=solid label="\"co_await\""]
  1189 -> 368 [style=solid label="'0'"]
  1189 -> 369 [style=solid label="'1'"]
  1189 -> 370 [style=solid label="\"0b\""]
  1189 -> 371 [style=solid label="\"0B\""]
  1189 -> 372 [style=solid label="'\\''"]
  1189 -> 373 [style=solid label="\"false\""]
  1189 -> 374 [style=solid label="\"true\""]
  1189 -> 375 [style=solid label="\"noexcept\""]
  1189 -> 17 [style=solid label="\"operator\""]
  1189 -> 26 [style=solid label="\"decltype\""]
  1189 -> 376 [style=solid label="\"delete\""]
  1189 -> 377 [style=solid label="'.'"]
  1189 -> 378 [style=solid label="'2'"]
  1189 -> 379 [style=solid label="'3'"]
  1189 -> 380 [style=solid label="'4'"]
  1189 -> 381 [style=solid label="'5'"]
  1189 -> 382 [style=solid label="'6'"]
  1189 -> 383 [style=solid label="'7'"]
  1189 -> 384 [style=solid label="'8'"]
  1189 -> 385 [style=solid label="'9'"]
  1189 -> 185 [style=solid label="\"u8\""]
  1189 -> 186 [style=solid label="'u'"]
  1189 -> 187 [style=solid label="'U'"]
  1189 -> 188 [style=solid label="'L'"]
  1189 -> 386 [style=solid label="'*'"]
  1189 -> 203 [style=solid label="'\"'"]
  1189 -> 387 [style=solid label="\"0x\""]
  1189 -> 388 [style=solid label="\"0X\""]
  1189 -> 389 [style=solid label="\"requires\""]
  1189 -> 390 [style=solid label="\"new\""]
  1189 -> 391 [style=solid label="'~'"]
  1189 -> 392 [style=solid label="'!'"]
  1189 -> 393 [style=solid label="\"++\""]
  1189 -> 394 [style=solid label="\"--\""]
  1189 -> 395 [style=solid label="\"this\""]
  1189 -> 37 [style=solid label="\"auto\""]
  1189 -> 396 [style=solid label="\"nullptr\""]
  1189 -> 397 [style=solid label="\"dynamic_cast\""]
  1189 -> 398 [style=solid label="\"static_cast\""]
  1189 -> 399 [style=solid label="\"reinterpret_cast\""]
  1189 -> 400 [style=solid label="\"const_cast\""]
  1189 -> 401 [style=solid label="\"typeid\""]
  1189 -> 38 [style=solid label="\"char\""]
  1189 -> 39 [style=solid label="\"char8_t\""]
  1189 -> 40 [style=solid label="\"char16_t\""]
  1189 -> 41 [style=solid label="\"char32_t\""]
  1189 -> 42 [style=solid label="\"wchar_t\""]
  1189 -> 43 [style=solid label="\"bool\""]
  1189 -> 44 [style=solid label="\"short\""]
  1189 -> 45 [style=solid label="\"int\""]
  1189 -> 46 [style=solid label="\"long\""]
  1189 -> 47 [style=solid label="\"signed\""]
  1189 -> 48 [style=solid label="\"unsigned\""]
  1189 -> 49 [style=solid label="\"float\""]
  1189 -> 50 [style=solid label="\"double\""]
  1189 -> 51 [style=solid label="\"void\""]
  1189 -> 209 [style=solid label="'R'"]
  1189 -> 56 [style=solid label="\"typename\""]
  1189 -> 402 [style=solid label="\"sizeof\""]
  1189 -> 403 [style=solid label="\"alignof\""]
  1189 -> 404 [style=dashed label="additive-expression"]
  1189 -> 405 [style=dashed label="and-expression"]
  1189 -> 406 [style=dashed label="await-expression"]
  1189 -> 407 [style=dashed label="binary-literal"]
  1189 -> 408 [style=dashed label="boolean-literal"]
  1189 -> 409 [style=dashed label="cast-expression"]
  1189 -> 410 [style=dashed label="character-literal"]
  1189 -> 66 [style=dashed label="class-name"]
  1189 -> 411 [style=dashed label="compare-expression"]
  1189 -> 68 [style=dashed label="concept-name"]
  1189 -> 412 [style=dashed label="conditional-expression"]
  1189 -> 1572 [style=dashed label="constant-expression"]
  1189 -> 69 [style=dashed label="conversion-function-id"]
  1189 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1189 -> 415 [style=dashed label="decimal-literal"]
  1189 -> 77 [style=dashed label="decltype-specifier"]
  1189 -> 416 [style=dashed label="delete-expression"]
  1189 -> 417 [style=dashed label="digit"]
  1189 -> 418 [style=dashed label="digit-sequence"]
  1189 -> 419 [style=dashed label="encoding-prefix"]
  1189 -> 85 [style=dashed label="enum-name"]
  1189 -> 420 [style=dashed label="equality-expression"]
  1189 -> 421 [style=dashed label="exclusive-or-expression"]
  1189 -> 422 [style=dashed label="floating-point-literal"]
  1189 -> 423 [style=dashed label="fold-expression"]
  1189 -> 424 [style=dashed label="fractional-constant"]
  1189 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1189 -> 426 [style=dashed label="hexadecimal-literal"]
  1189 -> 427 [style=dashed label="hexadecimal-prefix"]
  1189 -> 428 [style=dashed label="id-expression"]
  1189 -> 429 [style=dashed label="inclusive-or-expression"]
  1189 -> 430 [style=dashed label="integer-literal"]
  1189 -> 431 [style=dashed label="lambda-expression"]
  1189 -> 432 [style=dashed label="lambda-introducer"]
  1189 -> 433 [style=dashed label="literal"]
  1189 -> 96 [style=dashed label="literal-operator-id"]
  1189 -> 434 [style=dashed label="logical-and-expression"]
  1189 -> 435 [style=dashed label="logical-or-expression"]
  1189 -> 436 [style=dashed label="multiplicative-expression"]
  1189 -> 100 [style=dashed label="namespace-alias"]
  1189 -> 103 [style=dashed label="namespace-name"]
  1189 -> 437 [style=dashed label="nested-name-specifier"]
  1189 -> 438 [style=dashed label="new-expression"]
  1189 -> 439 [style=dashed label="noexcept-expression"]
  1189 -> 440 [style=dashed label="nonzero-digit"]
  1189 -> 441 [style=dashed label="octal-literal"]
  1189 -> 109 [style=dashed label="operator-function-id"]
  1189 -> 110 [style=dashed label="placeholder-type-specifier"]
  1189 -> 442 [style=dashed label="pm-expression"]
  1189 -> 443 [style=dashed label="pointer-literal"]
  1189 -> 444 [style=dashed label="postfix-expression"]
  1189 -> 445 [style=dashed label="primary-expression"]
  1189 -> 113 [style=dashed label="qualified-id"]
  1189 -> 446 [style=dashed label="relational-expression"]
  1189 -> 447 [style=dashed label="requires-expression"]
  1189 -> 448 [style=dashed label="shift-expression"]
  1189 -> 115 [style=dashed label="simple-template-id"]
  1189 -> 534 [style=dashed label="simple-type-specifier"]
  1189 -> 450 [style=dashed label="string-literal"]
  1189 -> 121 [style=dashed label="template-id"]
  1189 -> 216 [style=dashed label="template-name"]
  1189 -> 124 [style=dashed label="type-constraint"]
  1189 -> 125 [style=dashed label="type-name"]
  1189 -> 127 [style=dashed label="typedef-name"]
  1189 -> 536 [style=dashed label="typename-specifier"]
  1189 -> 454 [style=dashed label="unary-expression"]
  1189 -> 455 [style=dashed label="unary-operator"]
  1189 -> 130 [style=dashed label="unqualified-id"]
  1189 -> 456 [style=dashed label="user-defined-character-literal"]
  1189 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1189 -> 458 [style=dashed label="user-defined-integer-literal"]
  1189 -> 459 [style=dashed label="user-defined-literal"]
  1189 -> 460 [style=dashed label="user-defined-string-literal"]
  1190 [label="State 1190\n\l1025 statement: attribute-specifier-seq compound-statement •\l"]
  1190 -> "1190R1025" [style=solid]
 "1190R1025" [label="R1025", fillcolor=3, shape=diamond, style=filled]
  1191 [label="State 1191\n\l979 simple-declaration: attribute-specifier-seq decl-specifier-seq • init-declarator-list ';'\l980                   | attribute-specifier-seq decl-specifier-seq • '[' identifier-list ']' initializer ';'\l982                   | attribute-specifier-seq decl-specifier-seq • ref-qualifier '[' identifier-list ']' initializer ';'\l"]
  1191 -> 148 [style=solid label="IDENTIFIER"]
  1191 -> 5 [style=solid label="'('"]
  1191 -> 6 [style=solid label="\"...\""]
  1191 -> 283 [style=solid label="'&'"]
  1191 -> 9 [style=solid label="\"::\""]
  1191 -> 581 [style=solid label="'['"]
  1191 -> 285 [style=solid label="\"&&\""]
  1191 -> 17 [style=solid label="\"operator\""]
  1191 -> 135 [style=solid label="\"decltype\""]
  1191 -> 32 [style=solid label="'*'"]
  1191 -> 36 [style=solid label="'~'"]
  1191 -> 66 [style=dashed label="class-name"]
  1191 -> 69 [style=dashed label="conversion-function-id"]
  1191 -> 1156 [style=dashed label="declarator"]
  1191 -> 76 [style=dashed label="declarator-id"]
  1191 -> 139 [style=dashed label="decltype-specifier"]
  1191 -> 85 [style=dashed label="enum-name"]
  1191 -> 94 [style=dashed label="id-expression"]
  1191 -> 287 [style=dashed label="init-declarator"]
  1191 -> 583 [style=dashed label="init-declarator-list"]
  1191 -> 96 [style=dashed label="literal-operator-id"]
  1191 -> 100 [style=dashed label="namespace-alias"]
  1191 -> 103 [style=dashed label="namespace-name"]
  1191 -> 149 [style=dashed label="nested-name-specifier"]
  1191 -> 107 [style=dashed label="noptr-declarator"]
  1191 -> 109 [style=dashed label="operator-function-id"]
  1191 -> 111 [style=dashed label="ptr-declarator"]
  1191 -> 112 [style=dashed label="ptr-operator"]
  1191 -> 113 [style=dashed label="qualified-id"]
  1191 -> 584 [style=dashed label="ref-qualifier"]
  1191 -> 115 [style=dashed label="simple-template-id"]
  1191 -> 121 [style=dashed label="template-id"]
  1191 -> 143 [style=dashed label="template-name"]
  1191 -> 144 [style=dashed label="type-name"]
  1191 -> 127 [style=dashed label="typedef-name"]
  1191 -> 130 [style=dashed label="unqualified-id"]
  1192 [label="State 1192\n\l1023 statement: attribute-specifier-seq expression-statement •\l"]
  1192 -> "1192R1023" [style=solid]
 "1192R1023" [label="R1023", fillcolor=3, shape=diamond, style=filled]
  1193 [label="State 1193\n\l1029 statement: attribute-specifier-seq iteration-statement •\l"]
  1193 -> "1193R1029" [style=solid]
 "1193R1029" [label="R1029", fillcolor=3, shape=diamond, style=filled]
  1194 [label="State 1194\n\l1031 statement: attribute-specifier-seq jump-statement •\l"]
  1194 -> "1194R1031" [style=solid]
 "1194R1031" [label="R1031", fillcolor=3, shape=diamond, style=filled]
  1195 [label="State 1195\n\l1027 statement: attribute-specifier-seq selection-statement •\l"]
  1195 -> "1195R1027" [style=solid]
 "1195R1027" [label="R1027", fillcolor=3, shape=diamond, style=filled]
  1196 [label="State 1196\n\l1034 statement: attribute-specifier-seq try-block •\l"]
  1196 -> "1196R1034" [style=solid]
 "1196R1034" [label="R1034", fillcolor=3, shape=diamond, style=filled]
  1197 [label="State 1197\n\l340 expression-statement: expression ';' •\l"]
  1197 -> "1197R340" [style=solid]
 "1197R340" [label="R340", fillcolor=3, shape=diamond, style=filled]
  1198 [label="State 1198\n\l161 compound-statement: '{' statement-seq '}' •\l"]
  1198 -> "1198R161" [style=solid]
 "1198R161" [label="R161", fillcolor=3, shape=diamond, style=filled]
  1199 [label="State 1199\n\l1037 statement-seq: statement-seq statement •\l"]
  1199 -> "1199R1037" [style=solid]
 "1199R1037" [label="R1037", fillcolor=3, shape=diamond, style=filled]
  1200 [label="State 1200\n\l417 handler: \"catch\" • '(' exception-declaration ')' compound-statement\l"]
  1200 -> 1573 [style=solid label="'('"]
  1201 [label="State 1201\n\l418 handler-seq: handler •\l419            | handler • handler-seq\l"]
  1201 -> 1200 [style=solid label="\"catch\""]
  1201 -> 1201 [style=dashed label="handler"]
  1201 -> 1574 [style=dashed label="handler-seq"]
  1201 -> "1201R418" [style=solid]
 "1201R418" [label="R418", fillcolor=3, shape=diamond, style=filled]
  1202 [label="State 1202\n\l412 function-try-block: \"try\" compound-statement handler-seq •\l"]
  1202 -> "1202R412" [style=solid]
 "1202R412" [label="R412", fillcolor=3, shape=diamond, style=filled]
  1203 [label="State 1203\n\l413 function-try-block: \"try\" ctor-initializer compound-statement • handler-seq\l"]
  1203 -> 1200 [style=solid label="\"catch\""]
  1203 -> 1201 [style=dashed label="handler"]
  1203 -> 1575 [style=dashed label="handler-seq"]
  1204 [label="State 1204\n\l174 constraint-logical-and-expression: constraint-logical-and-expression \"&&\" • primary-expression\l"]
  1204 -> 148 [style=solid label="IDENTIFIER"]
  1204 -> 700 [style=solid label="'('"]
  1204 -> 9 [style=solid label="\"::\""]
  1204 -> 366 [style=solid label="'['"]
  1204 -> 368 [style=solid label="'0'"]
  1204 -> 369 [style=solid label="'1'"]
  1204 -> 370 [style=solid label="\"0b\""]
  1204 -> 371 [style=solid label="\"0B\""]
  1204 -> 372 [style=solid label="'\\''"]
  1204 -> 373 [style=solid label="\"false\""]
  1204 -> 374 [style=solid label="\"true\""]
  1204 -> 17 [style=solid label="\"operator\""]
  1204 -> 135 [style=solid label="\"decltype\""]
  1204 -> 377 [style=solid label="'.'"]
  1204 -> 378 [style=solid label="'2'"]
  1204 -> 379 [style=solid label="'3'"]
  1204 -> 380 [style=solid label="'4'"]
  1204 -> 381 [style=solid label="'5'"]
  1204 -> 382 [style=solid label="'6'"]
  1204 -> 383 [style=solid label="'7'"]
  1204 -> 384 [style=solid label="'8'"]
  1204 -> 385 [style=solid label="'9'"]
  1204 -> 185 [style=solid label="\"u8\""]
  1204 -> 186 [style=solid label="'u'"]
  1204 -> 187 [style=solid label="'U'"]
  1204 -> 188 [style=solid label="'L'"]
  1204 -> 203 [style=solid label="'\"'"]
  1204 -> 387 [style=solid label="\"0x\""]
  1204 -> 388 [style=solid label="\"0X\""]
  1204 -> 389 [style=solid label="\"requires\""]
  1204 -> 36 [style=solid label="'~'"]
  1204 -> 395 [style=solid label="\"this\""]
  1204 -> 396 [style=solid label="\"nullptr\""]
  1204 -> 209 [style=solid label="'R'"]
  1204 -> 407 [style=dashed label="binary-literal"]
  1204 -> 408 [style=dashed label="boolean-literal"]
  1204 -> 410 [style=dashed label="character-literal"]
  1204 -> 66 [style=dashed label="class-name"]
  1204 -> 69 [style=dashed label="conversion-function-id"]
  1204 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1204 -> 415 [style=dashed label="decimal-literal"]
  1204 -> 139 [style=dashed label="decltype-specifier"]
  1204 -> 417 [style=dashed label="digit"]
  1204 -> 418 [style=dashed label="digit-sequence"]
  1204 -> 419 [style=dashed label="encoding-prefix"]
  1204 -> 85 [style=dashed label="enum-name"]
  1204 -> 422 [style=dashed label="floating-point-literal"]
  1204 -> 423 [style=dashed label="fold-expression"]
  1204 -> 424 [style=dashed label="fractional-constant"]
  1204 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1204 -> 426 [style=dashed label="hexadecimal-literal"]
  1204 -> 427 [style=dashed label="hexadecimal-prefix"]
  1204 -> 428 [style=dashed label="id-expression"]
  1204 -> 430 [style=dashed label="integer-literal"]
  1204 -> 431 [style=dashed label="lambda-expression"]
  1204 -> 432 [style=dashed label="lambda-introducer"]
  1204 -> 433 [style=dashed label="literal"]
  1204 -> 96 [style=dashed label="literal-operator-id"]
  1204 -> 100 [style=dashed label="namespace-alias"]
  1204 -> 103 [style=dashed label="namespace-name"]
  1204 -> 153 [style=dashed label="nested-name-specifier"]
  1204 -> 440 [style=dashed label="nonzero-digit"]
  1204 -> 441 [style=dashed label="octal-literal"]
  1204 -> 109 [style=dashed label="operator-function-id"]
  1204 -> 443 [style=dashed label="pointer-literal"]
  1204 -> 1576 [style=dashed label="primary-expression"]
  1204 -> 113 [style=dashed label="qualified-id"]
  1204 -> 447 [style=dashed label="requires-expression"]
  1204 -> 115 [style=dashed label="simple-template-id"]
  1204 -> 450 [style=dashed label="string-literal"]
  1204 -> 121 [style=dashed label="template-id"]
  1204 -> 143 [style=dashed label="template-name"]
  1204 -> 144 [style=dashed label="type-name"]
  1204 -> 127 [style=dashed label="typedef-name"]
  1204 -> 130 [style=dashed label="unqualified-id"]
  1204 -> 456 [style=dashed label="user-defined-character-literal"]
  1204 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1204 -> 458 [style=dashed label="user-defined-integer-literal"]
  1204 -> 459 [style=dashed label="user-defined-literal"]
  1204 -> 460 [style=dashed label="user-defined-string-literal"]
  1205 [label="State 1205\n\l176 constraint-logical-or-expression: constraint-logical-or-expression \"||\" • constraint-logical-and-expression\l"]
  1205 -> 148 [style=solid label="IDENTIFIER"]
  1205 -> 700 [style=solid label="'('"]
  1205 -> 9 [style=solid label="\"::\""]
  1205 -> 366 [style=solid label="'['"]
  1205 -> 368 [style=solid label="'0'"]
  1205 -> 369 [style=solid label="'1'"]
  1205 -> 370 [style=solid label="\"0b\""]
  1205 -> 371 [style=solid label="\"0B\""]
  1205 -> 372 [style=solid label="'\\''"]
  1205 -> 373 [style=solid label="\"false\""]
  1205 -> 374 [style=solid label="\"true\""]
  1205 -> 17 [style=solid label="\"operator\""]
  1205 -> 135 [style=solid label="\"decltype\""]
  1205 -> 377 [style=solid label="'.'"]
  1205 -> 378 [style=solid label="'2'"]
  1205 -> 379 [style=solid label="'3'"]
  1205 -> 380 [style=solid label="'4'"]
  1205 -> 381 [style=solid label="'5'"]
  1205 -> 382 [style=solid label="'6'"]
  1205 -> 383 [style=solid label="'7'"]
  1205 -> 384 [style=solid label="'8'"]
  1205 -> 385 [style=solid label="'9'"]
  1205 -> 185 [style=solid label="\"u8\""]
  1205 -> 186 [style=solid label="'u'"]
  1205 -> 187 [style=solid label="'U'"]
  1205 -> 188 [style=solid label="'L'"]
  1205 -> 203 [style=solid label="'\"'"]
  1205 -> 387 [style=solid label="\"0x\""]
  1205 -> 388 [style=solid label="\"0X\""]
  1205 -> 389 [style=solid label="\"requires\""]
  1205 -> 36 [style=solid label="'~'"]
  1205 -> 395 [style=solid label="\"this\""]
  1205 -> 396 [style=solid label="\"nullptr\""]
  1205 -> 209 [style=solid label="'R'"]
  1205 -> 407 [style=dashed label="binary-literal"]
  1205 -> 408 [style=dashed label="boolean-literal"]
  1205 -> 410 [style=dashed label="character-literal"]
  1205 -> 66 [style=dashed label="class-name"]
  1205 -> 1577 [style=dashed label="constraint-logical-and-expression"]
  1205 -> 69 [style=dashed label="conversion-function-id"]
  1205 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1205 -> 415 [style=dashed label="decimal-literal"]
  1205 -> 139 [style=dashed label="decltype-specifier"]
  1205 -> 417 [style=dashed label="digit"]
  1205 -> 418 [style=dashed label="digit-sequence"]
  1205 -> 419 [style=dashed label="encoding-prefix"]
  1205 -> 85 [style=dashed label="enum-name"]
  1205 -> 422 [style=dashed label="floating-point-literal"]
  1205 -> 423 [style=dashed label="fold-expression"]
  1205 -> 424 [style=dashed label="fractional-constant"]
  1205 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1205 -> 426 [style=dashed label="hexadecimal-literal"]
  1205 -> 427 [style=dashed label="hexadecimal-prefix"]
  1205 -> 428 [style=dashed label="id-expression"]
  1205 -> 430 [style=dashed label="integer-literal"]
  1205 -> 431 [style=dashed label="lambda-expression"]
  1205 -> 432 [style=dashed label="lambda-introducer"]
  1205 -> 433 [style=dashed label="literal"]
  1205 -> 96 [style=dashed label="literal-operator-id"]
  1205 -> 100 [style=dashed label="namespace-alias"]
  1205 -> 103 [style=dashed label="namespace-name"]
  1205 -> 153 [style=dashed label="nested-name-specifier"]
  1205 -> 440 [style=dashed label="nonzero-digit"]
  1205 -> 441 [style=dashed label="octal-literal"]
  1205 -> 109 [style=dashed label="operator-function-id"]
  1205 -> 443 [style=dashed label="pointer-literal"]
  1205 -> 703 [style=dashed label="primary-expression"]
  1205 -> 113 [style=dashed label="qualified-id"]
  1205 -> 447 [style=dashed label="requires-expression"]
  1205 -> 115 [style=dashed label="simple-template-id"]
  1205 -> 450 [style=dashed label="string-literal"]
  1205 -> 121 [style=dashed label="template-id"]
  1205 -> 143 [style=dashed label="template-name"]
  1205 -> 144 [style=dashed label="type-name"]
  1205 -> 127 [style=dashed label="typedef-name"]
  1205 -> 130 [style=dashed label="unqualified-id"]
  1205 -> 456 [style=dashed label="user-defined-character-literal"]
  1205 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1205 -> 458 [style=dashed label="user-defined-integer-literal"]
  1205 -> 459 [style=dashed label="user-defined-literal"]
  1205 -> 460 [style=dashed label="user-defined-string-literal"]
  1206 [label="State 1206\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l302 enumerator: IDENTIFIER attribute-specifier-seq •\l"]
  1206 -> 4 [style=solid label="\"alignas\""]
  1206 -> 10 [style=solid label="'['"]
  1206 -> 58 [style=dashed label="alignment-specifier"]
  1206 -> 265 [style=dashed label="attribute-specifier"]
  1206 -> "1206R302" [style=solid]
 "1206R302" [label="R302", fillcolor=3, shape=diamond, style=filled]
  1207 [label="State 1207\n\l304 enumerator-definition: enumerator '=' • constant-expression\l"]
  1207 -> 1 [style=solid label="IDENTIFIER"]
  1207 -> 361 [style=solid label="'+'"]
  1207 -> 362 [style=solid label="'-'"]
  1207 -> 363 [style=solid label="'('"]
  1207 -> 364 [style=solid label="'&'"]
  1207 -> 365 [style=solid label="\"::\""]
  1207 -> 366 [style=solid label="'['"]
  1207 -> 367 [style=solid label="\"co_await\""]
  1207 -> 368 [style=solid label="'0'"]
  1207 -> 369 [style=solid label="'1'"]
  1207 -> 370 [style=solid label="\"0b\""]
  1207 -> 371 [style=solid label="\"0B\""]
  1207 -> 372 [style=solid label="'\\''"]
  1207 -> 373 [style=solid label="\"false\""]
  1207 -> 374 [style=solid label="\"true\""]
  1207 -> 375 [style=solid label="\"noexcept\""]
  1207 -> 17 [style=solid label="\"operator\""]
  1207 -> 26 [style=solid label="\"decltype\""]
  1207 -> 376 [style=solid label="\"delete\""]
  1207 -> 377 [style=solid label="'.'"]
  1207 -> 378 [style=solid label="'2'"]
  1207 -> 379 [style=solid label="'3'"]
  1207 -> 380 [style=solid label="'4'"]
  1207 -> 381 [style=solid label="'5'"]
  1207 -> 382 [style=solid label="'6'"]
  1207 -> 383 [style=solid label="'7'"]
  1207 -> 384 [style=solid label="'8'"]
  1207 -> 385 [style=solid label="'9'"]
  1207 -> 185 [style=solid label="\"u8\""]
  1207 -> 186 [style=solid label="'u'"]
  1207 -> 187 [style=solid label="'U'"]
  1207 -> 188 [style=solid label="'L'"]
  1207 -> 386 [style=solid label="'*'"]
  1207 -> 203 [style=solid label="'\"'"]
  1207 -> 387 [style=solid label="\"0x\""]
  1207 -> 388 [style=solid label="\"0X\""]
  1207 -> 389 [style=solid label="\"requires\""]
  1207 -> 390 [style=solid label="\"new\""]
  1207 -> 391 [style=solid label="'~'"]
  1207 -> 392 [style=solid label="'!'"]
  1207 -> 393 [style=solid label="\"++\""]
  1207 -> 394 [style=solid label="\"--\""]
  1207 -> 395 [style=solid label="\"this\""]
  1207 -> 37 [style=solid label="\"auto\""]
  1207 -> 396 [style=solid label="\"nullptr\""]
  1207 -> 397 [style=solid label="\"dynamic_cast\""]
  1207 -> 398 [style=solid label="\"static_cast\""]
  1207 -> 399 [style=solid label="\"reinterpret_cast\""]
  1207 -> 400 [style=solid label="\"const_cast\""]
  1207 -> 401 [style=solid label="\"typeid\""]
  1207 -> 38 [style=solid label="\"char\""]
  1207 -> 39 [style=solid label="\"char8_t\""]
  1207 -> 40 [style=solid label="\"char16_t\""]
  1207 -> 41 [style=solid label="\"char32_t\""]
  1207 -> 42 [style=solid label="\"wchar_t\""]
  1207 -> 43 [style=solid label="\"bool\""]
  1207 -> 44 [style=solid label="\"short\""]
  1207 -> 45 [style=solid label="\"int\""]
  1207 -> 46 [style=solid label="\"long\""]
  1207 -> 47 [style=solid label="\"signed\""]
  1207 -> 48 [style=solid label="\"unsigned\""]
  1207 -> 49 [style=solid label="\"float\""]
  1207 -> 50 [style=solid label="\"double\""]
  1207 -> 51 [style=solid label="\"void\""]
  1207 -> 209 [style=solid label="'R'"]
  1207 -> 56 [style=solid label="\"typename\""]
  1207 -> 402 [style=solid label="\"sizeof\""]
  1207 -> 403 [style=solid label="\"alignof\""]
  1207 -> 404 [style=dashed label="additive-expression"]
  1207 -> 405 [style=dashed label="and-expression"]
  1207 -> 406 [style=dashed label="await-expression"]
  1207 -> 407 [style=dashed label="binary-literal"]
  1207 -> 408 [style=dashed label="boolean-literal"]
  1207 -> 409 [style=dashed label="cast-expression"]
  1207 -> 410 [style=dashed label="character-literal"]
  1207 -> 66 [style=dashed label="class-name"]
  1207 -> 411 [style=dashed label="compare-expression"]
  1207 -> 68 [style=dashed label="concept-name"]
  1207 -> 412 [style=dashed label="conditional-expression"]
  1207 -> 1578 [style=dashed label="constant-expression"]
  1207 -> 69 [style=dashed label="conversion-function-id"]
  1207 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1207 -> 415 [style=dashed label="decimal-literal"]
  1207 -> 77 [style=dashed label="decltype-specifier"]
  1207 -> 416 [style=dashed label="delete-expression"]
  1207 -> 417 [style=dashed label="digit"]
  1207 -> 418 [style=dashed label="digit-sequence"]
  1207 -> 419 [style=dashed label="encoding-prefix"]
  1207 -> 85 [style=dashed label="enum-name"]
  1207 -> 420 [style=dashed label="equality-expression"]
  1207 -> 421 [style=dashed label="exclusive-or-expression"]
  1207 -> 422 [style=dashed label="floating-point-literal"]
  1207 -> 423 [style=dashed label="fold-expression"]
  1207 -> 424 [style=dashed label="fractional-constant"]
  1207 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1207 -> 426 [style=dashed label="hexadecimal-literal"]
  1207 -> 427 [style=dashed label="hexadecimal-prefix"]
  1207 -> 428 [style=dashed label="id-expression"]
  1207 -> 429 [style=dashed label="inclusive-or-expression"]
  1207 -> 430 [style=dashed label="integer-literal"]
  1207 -> 431 [style=dashed label="lambda-expression"]
  1207 -> 432 [style=dashed label="lambda-introducer"]
  1207 -> 433 [style=dashed label="literal"]
  1207 -> 96 [style=dashed label="literal-operator-id"]
  1207 -> 434 [style=dashed label="logical-and-expression"]
  1207 -> 435 [style=dashed label="logical-or-expression"]
  1207 -> 436 [style=dashed label="multiplicative-expression"]
  1207 -> 100 [style=dashed label="namespace-alias"]
  1207 -> 103 [style=dashed label="namespace-name"]
  1207 -> 437 [style=dashed label="nested-name-specifier"]
  1207 -> 438 [style=dashed label="new-expression"]
  1207 -> 439 [style=dashed label="noexcept-expression"]
  1207 -> 440 [style=dashed label="nonzero-digit"]
  1207 -> 441 [style=dashed label="octal-literal"]
  1207 -> 109 [style=dashed label="operator-function-id"]
  1207 -> 110 [style=dashed label="placeholder-type-specifier"]
  1207 -> 442 [style=dashed label="pm-expression"]
  1207 -> 443 [style=dashed label="pointer-literal"]
  1207 -> 444 [style=dashed label="postfix-expression"]
  1207 -> 445 [style=dashed label="primary-expression"]
  1207 -> 113 [style=dashed label="qualified-id"]
  1207 -> 446 [style=dashed label="relational-expression"]
  1207 -> 447 [style=dashed label="requires-expression"]
  1207 -> 448 [style=dashed label="shift-expression"]
  1207 -> 115 [style=dashed label="simple-template-id"]
  1207 -> 534 [style=dashed label="simple-type-specifier"]
  1207 -> 450 [style=dashed label="string-literal"]
  1207 -> 121 [style=dashed label="template-id"]
  1207 -> 216 [style=dashed label="template-name"]
  1207 -> 124 [style=dashed label="type-constraint"]
  1207 -> 125 [style=dashed label="type-name"]
  1207 -> 127 [style=dashed label="typedef-name"]
  1207 -> 536 [style=dashed label="typename-specifier"]
  1207 -> 454 [style=dashed label="unary-expression"]
  1207 -> 455 [style=dashed label="unary-operator"]
  1207 -> 130 [style=dashed label="unqualified-id"]
  1207 -> 456 [style=dashed label="user-defined-character-literal"]
  1207 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1207 -> 458 [style=dashed label="user-defined-integer-literal"]
  1207 -> 459 [style=dashed label="user-defined-literal"]
  1207 -> 460 [style=dashed label="user-defined-string-literal"]
  1208 [label="State 1208\n\l300 enum-specifier: enum-head '{' enumerator-list ',' • '}'\l306 enumerator-list: enumerator-list ',' • enumerator-definition\l"]
  1208 -> 708 [style=solid label="IDENTIFIER"]
  1208 -> 1579 [style=solid label="'}'"]
  1208 -> 710 [style=dashed label="enumerator"]
  1208 -> 1580 [style=dashed label="enumerator-definition"]
  1209 [label="State 1209\n\l299 enum-specifier: enum-head '{' enumerator-list '}' •\l"]
  1209 -> "1209R299" [style=solid]
 "1209R299" [label="R299", fillcolor=3, shape=diamond, style=filled]
  1210 [label="State 1210\n\l756 opaque-enum-declaration: enum-key attribute-specifier-seq enum-head-name ';' •\l"]
  1210 -> "1210R756" [style=solid]
 "1210R756" [label="R756", fillcolor=3, shape=diamond, style=filled]
  1211 [label="State 1211\n\l291 enum-head: enum-key attribute-specifier-seq enum-head-name enum-base •\l758 opaque-enum-declaration: enum-key attribute-specifier-seq enum-head-name enum-base • ';'\l"]
  1211 -> 1581 [style=solid label="';'"]
  1211 -> "1211R291" [style=solid]
 "1211R291" [label="R291", fillcolor=3, shape=diamond, style=filled]
  1212 [label="State 1212\n\l757 opaque-enum-declaration: enum-key enum-head-name enum-base ';' •\l"]
  1212 -> "1212R757" [style=solid]
 "1212R757" [label="R757", fillcolor=3, shape=diamond, style=filled]
  1213 [label="State 1213\n\l234 deduction-guide: explicit-specifier template-name '(' parameter-declaration-clause • ')' \"->\" simple-template-id ';'\l"]
  1213 -> 1582 [style=solid label="')'"]
  1214 [label="State 1214\n\l1081 translation-unit: global-module-fragment module-declaration declaration-seq private-module-fragment •\l"]
  1214 -> "1214R1081" [style=solid]
 "1214R1081" [label="R1081", fillcolor=3, shape=diamond, style=filled]
  1215 [label="State 1215\n\l1065 template-id: literal-operator-id '<' template-argument-list '>' •\l"]
  1215 -> "1215R1065" [style=solid]
 "1215R1065" [label="R1065", fillcolor=3, shape=diamond, style=filled]
  1216 [label="State 1216\n\l890 private-module-fragment: \"module-keyword\" ':' \"private\" • ';'\l891                        | \"module-keyword\" ':' \"private\" • ';' declaration-seq\l"]
  1216 -> 1583 [style=solid label="';'"]
  1217 [label="State 1217\n\l665 nested-name-specifier: nested-name-specifier \"template\" simple-template-id \"::\" •\l"]
  1217 -> "1217R665" [style=solid]
 "1217R665" [label="R665", fillcolor=3, shape=diamond, style=filled]
  1218 [label="State 1218\n\l908 ptr-operator: nested-name-specifier '*' attribute-specifier-seq cv-qualifier-seq •\l"]
  1218 -> "1218R908" [style=solid]
 "1218R908" [label="R908", fillcolor=3, shape=diamond, style=filled]
  1219 [label="State 1219\n\l1086 type-constraint: nested-name-specifier concept-name '<' '>' •\l"]
  1219 -> "1219R1086" [style=solid]
 "1219R1086" [label="R1086", fillcolor=3, shape=diamond, style=filled]
  1220 [label="State 1220\n\l1055 template-argument-list: template-argument-list • ',' template-argument\l1056                       | template-argument-list • ',' template-argument \"...\"\l1088 type-constraint: nested-name-specifier concept-name '<' template-argument-list • '>'\l"]
  1220 -> 1136 [style=solid label="','"]
  1220 -> 1584 [style=solid label="'>'"]
  1221 [label="State 1221\n\l836 parameters-and-qualifiers: '(' parameter-declaration-clause ')' •\l837                          | '(' parameter-declaration-clause ')' • cv-qualifier-seq\l838                          | '(' parameter-declaration-clause ')' • ref-qualifier\l839                          | '(' parameter-declaration-clause ')' • cv-qualifier-seq ref-qualifier\l840                          | '(' parameter-declaration-clause ')' • noexcept-specifier\l841                          | '(' parameter-declaration-clause ')' • cv-qualifier-seq noexcept-specifier\l842                          | '(' parameter-declaration-clause ')' • ref-qualifier noexcept-specifier\l843                          | '(' parameter-declaration-clause ')' • cv-qualifier-seq ref-qualifier noexcept-specifier\l844                          | '(' parameter-declaration-clause ')' • attribute-specifier-seq\l845                          | '(' parameter-declaration-clause ')' • cv-qualifier-seq attribute-specifier-seq\l846                          | '(' parameter-declaration-clause ')' • ref-qualifier attribute-specifier-seq\l847                          | '(' parameter-declaration-clause ')' • cv-qualifier-seq ref-qualifier attribute-specifier-seq\l848                          | '(' parameter-declaration-clause ')' • noexcept-specifier attribute-specifier-seq\l849                          | '(' parameter-declaration-clause ')' • cv-qualifier-seq noexcept-specifier attribute-specifier-seq\l850                          | '(' parameter-declaration-clause ')' • ref-qualifier noexcept-specifier attribute-specifier-seq\l851                          | '(' parameter-declaration-clause ')' • cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq\l"]
  1221 -> 4 [style=solid label="\"alignas\""]
  1221 -> 1585 [style=solid label="'&'"]
  1221 -> 10 [style=solid label="'['"]
  1221 -> 898 [style=solid label="\"noexcept\""]
  1221 -> 1586 [style=solid label="\"&&\""]
  1221 -> 18 [style=solid label="\"const\""]
  1221 -> 19 [style=solid label="\"volatile\""]
  1221 -> 58 [style=dashed label="alignment-specifier"]
  1221 -> 61 [style=dashed label="attribute-specifier"]
  1221 -> 1587 [style=dashed label="attribute-specifier-seq"]
  1221 -> 234 [style=dashed label="cv-qualifier"]
  1221 -> 1588 [style=dashed label="cv-qualifier-seq"]
  1221 -> 1589 [style=dashed label="noexcept-specifier"]
  1221 -> 1590 [style=dashed label="ref-qualifier"]
  1221 -> "1221R836d" [label="['[']", style=solid]
 "1221R836d" [label="R836", fillcolor=5, shape=diamond, style=filled]
  1221 -> "1221R836" [style=solid]
 "1221R836" [label="R836", fillcolor=3, shape=diamond, style=filled]
  1222 [label="State 1222\n\l831 parameter-declaration-clause: parameter-declaration-list \"...\" •\l"]
  1222 -> "1222R831" [style=solid]
 "1222R831" [label="R831", fillcolor=3, shape=diamond, style=filled]
  1223 [label="State 1223\n\l833 parameter-declaration-clause: parameter-declaration-list ',' • \"...\"\l835 parameter-declaration-list: parameter-declaration-list ',' • parameter-declaration\l"]
  1223 -> 161 [style=solid label="IDENTIFIER"]
  1223 -> 4 [style=solid label="\"alignas\""]
  1223 -> 1591 [style=solid label="\"...\""]
  1223 -> 9 [style=solid label="\"::\""]
  1223 -> 10 [style=solid label="'['"]
  1223 -> 11 [style=solid label="\"virtual\""]
  1223 -> 12 [style=solid label="\"class\""]
  1223 -> 13 [style=solid label="\"struct\""]
  1223 -> 14 [style=solid label="\"union\""]
  1223 -> 18 [style=solid label="\"const\""]
  1223 -> 19 [style=solid label="\"volatile\""]
  1223 -> 20 [style=solid label="\"friend\""]
  1223 -> 21 [style=solid label="\"typedef\""]
  1223 -> 22 [style=solid label="\"constexpr\""]
  1223 -> 23 [style=solid label="\"consteval\""]
  1223 -> 24 [style=solid label="\"constinit\""]
  1223 -> 263 [style=solid label="\"inline\""]
  1223 -> 26 [style=solid label="\"decltype\""]
  1223 -> 27 [style=solid label="\"enum\""]
  1223 -> 264 [style=solid label="\"extern\""]
  1223 -> 29 [style=solid label="\"explicit\""]
  1223 -> 476 [style=solid label="\"this\""]
  1223 -> 37 [style=solid label="\"auto\""]
  1223 -> 38 [style=solid label="\"char\""]
  1223 -> 39 [style=solid label="\"char8_t\""]
  1223 -> 40 [style=solid label="\"char16_t\""]
  1223 -> 41 [style=solid label="\"char32_t\""]
  1223 -> 42 [style=solid label="\"wchar_t\""]
  1223 -> 43 [style=solid label="\"bool\""]
  1223 -> 44 [style=solid label="\"short\""]
  1223 -> 45 [style=solid label="\"int\""]
  1223 -> 46 [style=solid label="\"long\""]
  1223 -> 47 [style=solid label="\"signed\""]
  1223 -> 48 [style=solid label="\"unsigned\""]
  1223 -> 49 [style=solid label="\"float\""]
  1223 -> 50 [style=solid label="\"double\""]
  1223 -> 51 [style=solid label="\"void\""]
  1223 -> 53 [style=solid label="\"static\""]
  1223 -> 54 [style=solid label="\"thread_local\""]
  1223 -> 55 [style=solid label="\"mutable\""]
  1223 -> 56 [style=solid label="\"typename\""]
  1223 -> 58 [style=dashed label="alignment-specifier"]
  1223 -> 61 [style=dashed label="attribute-specifier"]
  1223 -> 478 [style=dashed label="attribute-specifier-seq"]
  1223 -> 64 [style=dashed label="class-head"]
  1223 -> 65 [style=dashed label="class-key"]
  1223 -> 66 [style=dashed label="class-name"]
  1223 -> 67 [style=dashed label="class-specifier"]
  1223 -> 68 [style=dashed label="concept-name"]
  1223 -> 70 [style=dashed label="cv-qualifier"]
  1223 -> 71 [style=dashed label="decl-specifier"]
  1223 -> 479 [style=dashed label="decl-specifier-seq"]
  1223 -> 77 [style=dashed label="decltype-specifier"]
  1223 -> 79 [style=dashed label="defining-type-specifier"]
  1223 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1223 -> 81 [style=dashed label="elaborated-type-specifier"]
  1223 -> 83 [style=dashed label="enum-head"]
  1223 -> 268 [style=dashed label="enum-key"]
  1223 -> 85 [style=dashed label="enum-name"]
  1223 -> 86 [style=dashed label="enum-specifier"]
  1223 -> 269 [style=dashed label="explicit-specifier"]
  1223 -> 92 [style=dashed label="function-specifier"]
  1223 -> 100 [style=dashed label="namespace-alias"]
  1223 -> 103 [style=dashed label="namespace-name"]
  1223 -> 213 [style=dashed label="nested-name-specifier"]
  1223 -> 1592 [style=dashed label="parameter-declaration"]
  1223 -> 110 [style=dashed label="placeholder-type-specifier"]
  1223 -> 142 [style=dashed label="simple-template-id"]
  1223 -> 116 [style=dashed label="simple-type-specifier"]
  1223 -> 118 [style=dashed label="storage-class-specifier"]
  1223 -> 216 [style=dashed label="template-name"]
  1223 -> 124 [style=dashed label="type-constraint"]
  1223 -> 125 [style=dashed label="type-name"]
  1223 -> 126 [style=dashed label="type-specifier"]
  1223 -> 127 [style=dashed label="typedef-name"]
  1223 -> 128 [style=dashed label="typename-specifier"]
  1224 [label="State 1224\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l730 noptr-declarator: noptr-declarator '[' ']' attribute-specifier-seq •\l"]
  1224 -> 4 [style=solid label="\"alignas\""]
  1224 -> 10 [style=solid label="'['"]
  1224 -> 58 [style=dashed label="alignment-specifier"]
  1224 -> 265 [style=dashed label="attribute-specifier"]
  1224 -> "1224R730d" [label="['[']", style=solid]
 "1224R730d" [label="R730", fillcolor=5, shape=diamond, style=filled]
  1224 -> "1224R730" [style=solid]
 "1224R730" [label="R730", fillcolor=3, shape=diamond, style=filled]
  1225 [label="State 1225\n\l729 noptr-declarator: noptr-declarator '[' constant-expression ']' •\l731                 | noptr-declarator '[' constant-expression ']' • attribute-specifier-seq\l"]
  1225 -> 4 [style=solid label="\"alignas\""]
  1225 -> 10 [style=solid label="'['"]
  1225 -> 58 [style=dashed label="alignment-specifier"]
  1225 -> 61 [style=dashed label="attribute-specifier"]
  1225 -> 1593 [style=dashed label="attribute-specifier-seq"]
  1225 -> "1225R729d" [label="['[']", style=solid]
 "1225R729d" [label="R729", fillcolor=5, shape=diamond, style=filled]
  1225 -> "1225R729" [style=solid]
 "1225R729" [label="R729", fillcolor=3, shape=diamond, style=filled]
  1226 [label="State 1226\n\l1073 trailing-return-type: \"->\" type-id •\l"]
  1226 -> "1226R1073" [style=solid]
 "1226R1073" [label="R1073", fillcolor=3, shape=diamond, style=filled]
  1227 [label="State 1227\n\l1063 template-id: operator-function-id '<' template-argument-list '>' •\l"]
  1227 -> "1227R1063" [style=solid]
 "1227R1063" [label="R1063", fillcolor=3, shape=diamond, style=filled]
  1228 [label="State 1228\n\l162 concept-definition: \"concept\" concept-name '=' • constraint-expression ';'\l"]
  1228 -> 1 [style=solid label="IDENTIFIER"]
  1228 -> 361 [style=solid label="'+'"]
  1228 -> 362 [style=solid label="'-'"]
  1228 -> 363 [style=solid label="'('"]
  1228 -> 364 [style=solid label="'&'"]
  1228 -> 365 [style=solid label="\"::\""]
  1228 -> 366 [style=solid label="'['"]
  1228 -> 367 [style=solid label="\"co_await\""]
  1228 -> 368 [style=solid label="'0'"]
  1228 -> 369 [style=solid label="'1'"]
  1228 -> 370 [style=solid label="\"0b\""]
  1228 -> 371 [style=solid label="\"0B\""]
  1228 -> 372 [style=solid label="'\\''"]
  1228 -> 373 [style=solid label="\"false\""]
  1228 -> 374 [style=solid label="\"true\""]
  1228 -> 375 [style=solid label="\"noexcept\""]
  1228 -> 17 [style=solid label="\"operator\""]
  1228 -> 26 [style=solid label="\"decltype\""]
  1228 -> 376 [style=solid label="\"delete\""]
  1228 -> 377 [style=solid label="'.'"]
  1228 -> 378 [style=solid label="'2'"]
  1228 -> 379 [style=solid label="'3'"]
  1228 -> 380 [style=solid label="'4'"]
  1228 -> 381 [style=solid label="'5'"]
  1228 -> 382 [style=solid label="'6'"]
  1228 -> 383 [style=solid label="'7'"]
  1228 -> 384 [style=solid label="'8'"]
  1228 -> 385 [style=solid label="'9'"]
  1228 -> 185 [style=solid label="\"u8\""]
  1228 -> 186 [style=solid label="'u'"]
  1228 -> 187 [style=solid label="'U'"]
  1228 -> 188 [style=solid label="'L'"]
  1228 -> 386 [style=solid label="'*'"]
  1228 -> 203 [style=solid label="'\"'"]
  1228 -> 387 [style=solid label="\"0x\""]
  1228 -> 388 [style=solid label="\"0X\""]
  1228 -> 389 [style=solid label="\"requires\""]
  1228 -> 390 [style=solid label="\"new\""]
  1228 -> 391 [style=solid label="'~'"]
  1228 -> 392 [style=solid label="'!'"]
  1228 -> 393 [style=solid label="\"++\""]
  1228 -> 394 [style=solid label="\"--\""]
  1228 -> 395 [style=solid label="\"this\""]
  1228 -> 37 [style=solid label="\"auto\""]
  1228 -> 396 [style=solid label="\"nullptr\""]
  1228 -> 397 [style=solid label="\"dynamic_cast\""]
  1228 -> 398 [style=solid label="\"static_cast\""]
  1228 -> 399 [style=solid label="\"reinterpret_cast\""]
  1228 -> 400 [style=solid label="\"const_cast\""]
  1228 -> 401 [style=solid label="\"typeid\""]
  1228 -> 38 [style=solid label="\"char\""]
  1228 -> 39 [style=solid label="\"char8_t\""]
  1228 -> 40 [style=solid label="\"char16_t\""]
  1228 -> 41 [style=solid label="\"char32_t\""]
  1228 -> 42 [style=solid label="\"wchar_t\""]
  1228 -> 43 [style=solid label="\"bool\""]
  1228 -> 44 [style=solid label="\"short\""]
  1228 -> 45 [style=solid label="\"int\""]
  1228 -> 46 [style=solid label="\"long\""]
  1228 -> 47 [style=solid label="\"signed\""]
  1228 -> 48 [style=solid label="\"unsigned\""]
  1228 -> 49 [style=solid label="\"float\""]
  1228 -> 50 [style=solid label="\"double\""]
  1228 -> 51 [style=solid label="\"void\""]
  1228 -> 209 [style=solid label="'R'"]
  1228 -> 56 [style=solid label="\"typename\""]
  1228 -> 402 [style=solid label="\"sizeof\""]
  1228 -> 403 [style=solid label="\"alignof\""]
  1228 -> 404 [style=dashed label="additive-expression"]
  1228 -> 405 [style=dashed label="and-expression"]
  1228 -> 406 [style=dashed label="await-expression"]
  1228 -> 407 [style=dashed label="binary-literal"]
  1228 -> 408 [style=dashed label="boolean-literal"]
  1228 -> 409 [style=dashed label="cast-expression"]
  1228 -> 410 [style=dashed label="character-literal"]
  1228 -> 66 [style=dashed label="class-name"]
  1228 -> 411 [style=dashed label="compare-expression"]
  1228 -> 68 [style=dashed label="concept-name"]
  1228 -> 1594 [style=dashed label="constraint-expression"]
  1228 -> 69 [style=dashed label="conversion-function-id"]
  1228 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1228 -> 415 [style=dashed label="decimal-literal"]
  1228 -> 77 [style=dashed label="decltype-specifier"]
  1228 -> 416 [style=dashed label="delete-expression"]
  1228 -> 417 [style=dashed label="digit"]
  1228 -> 418 [style=dashed label="digit-sequence"]
  1228 -> 419 [style=dashed label="encoding-prefix"]
  1228 -> 85 [style=dashed label="enum-name"]
  1228 -> 420 [style=dashed label="equality-expression"]
  1228 -> 421 [style=dashed label="exclusive-or-expression"]
  1228 -> 422 [style=dashed label="floating-point-literal"]
  1228 -> 423 [style=dashed label="fold-expression"]
  1228 -> 424 [style=dashed label="fractional-constant"]
  1228 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1228 -> 426 [style=dashed label="hexadecimal-literal"]
  1228 -> 427 [style=dashed label="hexadecimal-prefix"]
  1228 -> 428 [style=dashed label="id-expression"]
  1228 -> 429 [style=dashed label="inclusive-or-expression"]
  1228 -> 430 [style=dashed label="integer-literal"]
  1228 -> 431 [style=dashed label="lambda-expression"]
  1228 -> 432 [style=dashed label="lambda-introducer"]
  1228 -> 433 [style=dashed label="literal"]
  1228 -> 96 [style=dashed label="literal-operator-id"]
  1228 -> 434 [style=dashed label="logical-and-expression"]
  1228 -> 1595 [style=dashed label="logical-or-expression"]
  1228 -> 436 [style=dashed label="multiplicative-expression"]
  1228 -> 100 [style=dashed label="namespace-alias"]
  1228 -> 103 [style=dashed label="namespace-name"]
  1228 -> 437 [style=dashed label="nested-name-specifier"]
  1228 -> 438 [style=dashed label="new-expression"]
  1228 -> 439 [style=dashed label="noexcept-expression"]
  1228 -> 440 [style=dashed label="nonzero-digit"]
  1228 -> 441 [style=dashed label="octal-literal"]
  1228 -> 109 [style=dashed label="operator-function-id"]
  1228 -> 110 [style=dashed label="placeholder-type-specifier"]
  1228 -> 442 [style=dashed label="pm-expression"]
  1228 -> 443 [style=dashed label="pointer-literal"]
  1228 -> 444 [style=dashed label="postfix-expression"]
  1228 -> 445 [style=dashed label="primary-expression"]
  1228 -> 113 [style=dashed label="qualified-id"]
  1228 -> 446 [style=dashed label="relational-expression"]
  1228 -> 447 [style=dashed label="requires-expression"]
  1228 -> 448 [style=dashed label="shift-expression"]
  1228 -> 115 [style=dashed label="simple-template-id"]
  1228 -> 534 [style=dashed label="simple-type-specifier"]
  1228 -> 450 [style=dashed label="string-literal"]
  1228 -> 121 [style=dashed label="template-id"]
  1228 -> 216 [style=dashed label="template-name"]
  1228 -> 124 [style=dashed label="type-constraint"]
  1228 -> 125 [style=dashed label="type-name"]
  1228 -> 127 [style=dashed label="typedef-name"]
  1228 -> 536 [style=dashed label="typename-specifier"]
  1228 -> 454 [style=dashed label="unary-expression"]
  1228 -> 455 [style=dashed label="unary-operator"]
  1228 -> 130 [style=dashed label="unqualified-id"]
  1228 -> 456 [style=dashed label="user-defined-character-literal"]
  1228 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1228 -> 458 [style=dashed label="user-defined-integer-literal"]
  1228 -> 459 [style=dashed label="user-defined-literal"]
  1228 -> 460 [style=dashed label="user-defined-string-literal"]
  1229 [label="State 1229\n\l235 deduction-guide: template-name '(' parameter-declaration-clause ')' • \"->\" simple-template-id ';'\l"]
  1229 -> 1596 [style=solid label="\"->\""]
  1230 [label="State 1230\n\l998 simple-template-id: template-name '<' template-argument-list '>' •\l"]
  1230 -> "1230R998" [style=solid]
 "1230R998" [label="R998", fillcolor=3, shape=diamond, style=filled]
  1231 [label="State 1231\n\l854 placeholder-type-specifier: type-constraint \"decltype\" '(' \"auto\" • ')'\l"]
  1231 -> 1597 [style=solid label="')'"]
  1232 [label="State 1232\n\l 13 alias-declaration: \"using\" IDENTIFIER '=' defining-type-id ';' •\l"]
  1232 -> "1232R13" [style=solid]
 "1232R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  1233 [label="State 1233\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l242 defining-type-specifier-seq: defining-type-specifier attribute-specifier-seq •\l"]
  1233 -> 4 [style=solid label="\"alignas\""]
  1233 -> 10 [style=solid label="'['"]
  1233 -> 58 [style=dashed label="alignment-specifier"]
  1233 -> 265 [style=dashed label="attribute-specifier"]
  1233 -> "1233R242d" [label="['[']", style=solid]
 "1233R242d" [label="R242", fillcolor=5, shape=diamond, style=filled]
  1233 -> "1233R242" [style=solid]
 "1233R242" [label="R242", fillcolor=3, shape=diamond, style=filled]
  1234 [label="State 1234\n\l243 defining-type-specifier-seq: defining-type-specifier defining-type-specifier-seq •\l"]
  1234 -> "1234R243" [style=solid]
 "1234R243" [label="R243", fillcolor=3, shape=diamond, style=filled]
  1235 [label="State 1235\n\l237 defining-type-id: defining-type-specifier-seq abstract-declarator •\l"]
  1235 -> "1235R237" [style=solid]
 "1235R237" [label="R237", fillcolor=3, shape=diamond, style=filled]
  1236 [label="State 1236\n\l 14 alias-declaration: \"using\" IDENTIFIER attribute-specifier-seq '=' defining-type-id • ';'\l"]
  1236 -> 1598 [style=solid label="';'"]
  1237 [label="State 1237\n\l1188 using-directive: \"using\" \"namespace\" nested-name-specifier namespace-name ';' •\l"]
  1237 -> "1237R1188" [style=solid]
 "1237R1188" [label="R1188", fillcolor=3, shape=diamond, style=filled]
  1238 [label="State 1238\n\l1184 using-declarator-list: using-declarator-list ',' using-declarator \"...\" •\l"]
  1238 -> "1238R1184" [style=solid]
 "1238R1184" [label="R1184", fillcolor=3, shape=diamond, style=filled]
  1239 [label="State 1239\n\l351 fold-operator: '+' •\l"]
  1239 -> "1239R351" [style=solid]
 "1239R351" [label="R351", fillcolor=3, shape=diamond, style=filled]
  1240 [label="State 1240\n\l352 fold-operator: '-' •\l"]
  1240 -> "1240R352" [style=solid]
 "1240R352" [label="R352", fillcolor=3, shape=diamond, style=filled]
  1241 [label="State 1241\n\l371 fold-operator: '=' •\l"]
  1241 -> "1241R371" [style=solid]
 "1241R371" [label="R371", fillcolor=3, shape=diamond, style=filled]
  1242 [label="State 1242\n\l357 fold-operator: '&' •\l"]
  1242 -> "1242R357" [style=solid]
 "1242R357" [label="R357", fillcolor=3, shape=diamond, style=filled]
  1243 [label="State 1243\n\l363 fold-operator: \"*=\" •\l"]
  1243 -> "1243R363" [style=solid]
 "1243R363" [label="R363", fillcolor=3, shape=diamond, style=filled]
  1244 [label="State 1244\n\l364 fold-operator: \"/=\" •\l"]
  1244 -> "1244R364" [style=solid]
 "1244R364" [label="R364", fillcolor=3, shape=diamond, style=filled]
  1245 [label="State 1245\n\l365 fold-operator: \"%=\" •\l"]
  1245 -> "1245R365" [style=solid]
 "1245R365" [label="R365", fillcolor=3, shape=diamond, style=filled]
  1246 [label="State 1246\n\l361 fold-operator: \"+=\" •\l"]
  1246 -> "1246R361" [style=solid]
 "1246R361" [label="R361", fillcolor=3, shape=diamond, style=filled]
  1247 [label="State 1247\n\l362 fold-operator: \"-=\" •\l"]
  1247 -> "1247R362" [style=solid]
 "1247R362" [label="R362", fillcolor=3, shape=diamond, style=filled]
  1248 [label="State 1248\n\l370 fold-operator: \">>=\" •\l"]
  1248 -> "1248R370" [style=solid]
 "1248R370" [label="R370", fillcolor=3, shape=diamond, style=filled]
  1249 [label="State 1249\n\l369 fold-operator: \"<<=\" •\l"]
  1249 -> "1249R369" [style=solid]
 "1249R369" [label="R369", fillcolor=3, shape=diamond, style=filled]
  1250 [label="State 1250\n\l367 fold-operator: \"&=\" •\l"]
  1250 -> "1250R367" [style=solid]
 "1250R367" [label="R367", fillcolor=3, shape=diamond, style=filled]
  1251 [label="State 1251\n\l366 fold-operator: \"^=\" •\l"]
  1251 -> "1251R366" [style=solid]
 "1251R366" [label="R366", fillcolor=3, shape=diamond, style=filled]
  1252 [label="State 1252\n\l368 fold-operator: \"|=\" •\l"]
  1252 -> "1252R368" [style=solid]
 "1252R368" [label="R368", fillcolor=3, shape=diamond, style=filled]
  1253 [label="State 1253\n\l380 fold-operator: ',' •\l"]
  1253 -> "1253R380" [style=solid]
 "1253R380" [label="R380", fillcolor=3, shape=diamond, style=filled]
  1254 [label="State 1254\n\l378 fold-operator: \"&&\" •\l"]
  1254 -> "1254R378" [style=solid]
 "1254R378" [label="R378", fillcolor=3, shape=diamond, style=filled]
  1255 [label="State 1255\n\l379 fold-operator: \"||\" •\l"]
  1255 -> "1255R379" [style=solid]
 "1255R379" [label="R379", fillcolor=3, shape=diamond, style=filled]
  1256 [label="State 1256\n\l372 fold-operator: \"==\" •\l"]
  1256 -> "1256R372" [style=solid]
 "1256R372" [label="R372", fillcolor=3, shape=diamond, style=filled]
  1257 [label="State 1257\n\l373 fold-operator: \"!=\" •\l"]
  1257 -> "1257R373" [style=solid]
 "1257R373" [label="R373", fillcolor=3, shape=diamond, style=filled]
  1258 [label="State 1258\n\l356 fold-operator: '^' •\l"]
  1258 -> "1258R356" [style=solid]
 "1258R356" [label="R356", fillcolor=3, shape=diamond, style=filled]
  1259 [label="State 1259\n\l374 fold-operator: '<' •\l"]
  1259 -> "1259R374" [style=solid]
 "1259R374" [label="R374", fillcolor=3, shape=diamond, style=filled]
  1260 [label="State 1260\n\l375 fold-operator: '>' •\l"]
  1260 -> "1260R375" [style=solid]
 "1260R375" [label="R375", fillcolor=3, shape=diamond, style=filled]
  1261 [label="State 1261\n\l353 fold-operator: '*' •\l"]
  1261 -> "1261R353" [style=solid]
 "1261R353" [label="R353", fillcolor=3, shape=diamond, style=filled]
  1262 [label="State 1262\n\l354 fold-operator: '/' •\l"]
  1262 -> "1262R354" [style=solid]
 "1262R354" [label="R354", fillcolor=3, shape=diamond, style=filled]
  1263 [label="State 1263\n\l355 fold-operator: '%' •\l"]
  1263 -> "1263R355" [style=solid]
 "1263R355" [label="R355", fillcolor=3, shape=diamond, style=filled]
  1264 [label="State 1264\n\l358 fold-operator: '|' •\l"]
  1264 -> "1264R358" [style=solid]
 "1264R358" [label="R358", fillcolor=3, shape=diamond, style=filled]
  1265 [label="State 1265\n\l359 fold-operator: \"<<\" •\l"]
  1265 -> "1265R359" [style=solid]
 "1265R359" [label="R359", fillcolor=3, shape=diamond, style=filled]
  1266 [label="State 1266\n\l360 fold-operator: \">>\" •\l"]
  1266 -> "1266R360" [style=solid]
 "1266R360" [label="R360", fillcolor=3, shape=diamond, style=filled]
  1267 [label="State 1267\n\l376 fold-operator: \"<=\" •\l"]
  1267 -> "1267R376" [style=solid]
 "1267R376" [label="R376", fillcolor=3, shape=diamond, style=filled]
  1268 [label="State 1268\n\l377 fold-operator: \">=\" •\l"]
  1268 -> "1268R377" [style=solid]
 "1268R377" [label="R377", fillcolor=3, shape=diamond, style=filled]
  1269 [label="State 1269\n\l381 fold-operator: \".*\" •\l"]
  1269 -> "1269R381" [style=solid]
 "1269R381" [label="R381", fillcolor=3, shape=diamond, style=filled]
  1270 [label="State 1270\n\l382 fold-operator: \"->*\" •\l"]
  1270 -> "1270R382" [style=solid]
 "1270R382" [label="R382", fillcolor=3, shape=diamond, style=filled]
  1271 [label="State 1271\n\l349 fold-expression: '(' \"...\" fold-operator • cast-expression ')'\l"]
  1271 -> 1 [style=solid label="IDENTIFIER"]
  1271 -> 361 [style=solid label="'+'"]
  1271 -> 362 [style=solid label="'-'"]
  1271 -> 363 [style=solid label="'('"]
  1271 -> 364 [style=solid label="'&'"]
  1271 -> 365 [style=solid label="\"::\""]
  1271 -> 366 [style=solid label="'['"]
  1271 -> 367 [style=solid label="\"co_await\""]
  1271 -> 368 [style=solid label="'0'"]
  1271 -> 369 [style=solid label="'1'"]
  1271 -> 370 [style=solid label="\"0b\""]
  1271 -> 371 [style=solid label="\"0B\""]
  1271 -> 372 [style=solid label="'\\''"]
  1271 -> 373 [style=solid label="\"false\""]
  1271 -> 374 [style=solid label="\"true\""]
  1271 -> 375 [style=solid label="\"noexcept\""]
  1271 -> 17 [style=solid label="\"operator\""]
  1271 -> 26 [style=solid label="\"decltype\""]
  1271 -> 376 [style=solid label="\"delete\""]
  1271 -> 377 [style=solid label="'.'"]
  1271 -> 378 [style=solid label="'2'"]
  1271 -> 379 [style=solid label="'3'"]
  1271 -> 380 [style=solid label="'4'"]
  1271 -> 381 [style=solid label="'5'"]
  1271 -> 382 [style=solid label="'6'"]
  1271 -> 383 [style=solid label="'7'"]
  1271 -> 384 [style=solid label="'8'"]
  1271 -> 385 [style=solid label="'9'"]
  1271 -> 185 [style=solid label="\"u8\""]
  1271 -> 186 [style=solid label="'u'"]
  1271 -> 187 [style=solid label="'U'"]
  1271 -> 188 [style=solid label="'L'"]
  1271 -> 386 [style=solid label="'*'"]
  1271 -> 203 [style=solid label="'\"'"]
  1271 -> 387 [style=solid label="\"0x\""]
  1271 -> 388 [style=solid label="\"0X\""]
  1271 -> 389 [style=solid label="\"requires\""]
  1271 -> 390 [style=solid label="\"new\""]
  1271 -> 391 [style=solid label="'~'"]
  1271 -> 392 [style=solid label="'!'"]
  1271 -> 393 [style=solid label="\"++\""]
  1271 -> 394 [style=solid label="\"--\""]
  1271 -> 395 [style=solid label="\"this\""]
  1271 -> 37 [style=solid label="\"auto\""]
  1271 -> 396 [style=solid label="\"nullptr\""]
  1271 -> 397 [style=solid label="\"dynamic_cast\""]
  1271 -> 398 [style=solid label="\"static_cast\""]
  1271 -> 399 [style=solid label="\"reinterpret_cast\""]
  1271 -> 400 [style=solid label="\"const_cast\""]
  1271 -> 401 [style=solid label="\"typeid\""]
  1271 -> 38 [style=solid label="\"char\""]
  1271 -> 39 [style=solid label="\"char8_t\""]
  1271 -> 40 [style=solid label="\"char16_t\""]
  1271 -> 41 [style=solid label="\"char32_t\""]
  1271 -> 42 [style=solid label="\"wchar_t\""]
  1271 -> 43 [style=solid label="\"bool\""]
  1271 -> 44 [style=solid label="\"short\""]
  1271 -> 45 [style=solid label="\"int\""]
  1271 -> 46 [style=solid label="\"long\""]
  1271 -> 47 [style=solid label="\"signed\""]
  1271 -> 48 [style=solid label="\"unsigned\""]
  1271 -> 49 [style=solid label="\"float\""]
  1271 -> 50 [style=solid label="\"double\""]
  1271 -> 51 [style=solid label="\"void\""]
  1271 -> 209 [style=solid label="'R'"]
  1271 -> 56 [style=solid label="\"typename\""]
  1271 -> 402 [style=solid label="\"sizeof\""]
  1271 -> 403 [style=solid label="\"alignof\""]
  1271 -> 406 [style=dashed label="await-expression"]
  1271 -> 407 [style=dashed label="binary-literal"]
  1271 -> 408 [style=dashed label="boolean-literal"]
  1271 -> 1599 [style=dashed label="cast-expression"]
  1271 -> 410 [style=dashed label="character-literal"]
  1271 -> 66 [style=dashed label="class-name"]
  1271 -> 68 [style=dashed label="concept-name"]
  1271 -> 69 [style=dashed label="conversion-function-id"]
  1271 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1271 -> 415 [style=dashed label="decimal-literal"]
  1271 -> 77 [style=dashed label="decltype-specifier"]
  1271 -> 416 [style=dashed label="delete-expression"]
  1271 -> 417 [style=dashed label="digit"]
  1271 -> 418 [style=dashed label="digit-sequence"]
  1271 -> 419 [style=dashed label="encoding-prefix"]
  1271 -> 85 [style=dashed label="enum-name"]
  1271 -> 422 [style=dashed label="floating-point-literal"]
  1271 -> 423 [style=dashed label="fold-expression"]
  1271 -> 424 [style=dashed label="fractional-constant"]
  1271 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1271 -> 426 [style=dashed label="hexadecimal-literal"]
  1271 -> 427 [style=dashed label="hexadecimal-prefix"]
  1271 -> 428 [style=dashed label="id-expression"]
  1271 -> 430 [style=dashed label="integer-literal"]
  1271 -> 431 [style=dashed label="lambda-expression"]
  1271 -> 432 [style=dashed label="lambda-introducer"]
  1271 -> 433 [style=dashed label="literal"]
  1271 -> 96 [style=dashed label="literal-operator-id"]
  1271 -> 100 [style=dashed label="namespace-alias"]
  1271 -> 103 [style=dashed label="namespace-name"]
  1271 -> 437 [style=dashed label="nested-name-specifier"]
  1271 -> 438 [style=dashed label="new-expression"]
  1271 -> 439 [style=dashed label="noexcept-expression"]
  1271 -> 440 [style=dashed label="nonzero-digit"]
  1271 -> 441 [style=dashed label="octal-literal"]
  1271 -> 109 [style=dashed label="operator-function-id"]
  1271 -> 110 [style=dashed label="placeholder-type-specifier"]
  1271 -> 443 [style=dashed label="pointer-literal"]
  1271 -> 444 [style=dashed label="postfix-expression"]
  1271 -> 445 [style=dashed label="primary-expression"]
  1271 -> 113 [style=dashed label="qualified-id"]
  1271 -> 447 [style=dashed label="requires-expression"]
  1271 -> 115 [style=dashed label="simple-template-id"]
  1271 -> 534 [style=dashed label="simple-type-specifier"]
  1271 -> 450 [style=dashed label="string-literal"]
  1271 -> 121 [style=dashed label="template-id"]
  1271 -> 216 [style=dashed label="template-name"]
  1271 -> 124 [style=dashed label="type-constraint"]
  1271 -> 125 [style=dashed label="type-name"]
  1271 -> 127 [style=dashed label="typedef-name"]
  1271 -> 536 [style=dashed label="typename-specifier"]
  1271 -> 454 [style=dashed label="unary-expression"]
  1271 -> 455 [style=dashed label="unary-operator"]
  1271 -> 130 [style=dashed label="unqualified-id"]
  1271 -> 456 [style=dashed label="user-defined-character-literal"]
  1271 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1271 -> 458 [style=dashed label="user-defined-integer-literal"]
  1271 -> 459 [style=dashed label="user-defined-literal"]
  1271 -> 460 [style=dashed label="user-defined-string-literal"]
  1272 [label="State 1272\n\l348 fold-expression: '(' cast-expression fold-operator • \"...\" ')'\l350                | '(' cast-expression fold-operator • \"...\" fold-operator cast-expression ')'\l"]
  1272 -> 1600 [style=solid label="\"...\""]
  1273 [label="State 1273\n\l885 primary-expression: '(' expression ')' •\l"]
  1273 -> "1273R885" [style=solid]
 "1273R885" [label="R885", fillcolor=3, shape=diamond, style=filled]
  1274 [label="State 1274\n\l125 cast-expression: '(' type-id ')' • cast-expression\l"]
  1274 -> 1 [style=solid label="IDENTIFIER"]
  1274 -> 361 [style=solid label="'+'"]
  1274 -> 362 [style=solid label="'-'"]
  1274 -> 363 [style=solid label="'('"]
  1274 -> 364 [style=solid label="'&'"]
  1274 -> 365 [style=solid label="\"::\""]
  1274 -> 366 [style=solid label="'['"]
  1274 -> 367 [style=solid label="\"co_await\""]
  1274 -> 368 [style=solid label="'0'"]
  1274 -> 369 [style=solid label="'1'"]
  1274 -> 370 [style=solid label="\"0b\""]
  1274 -> 371 [style=solid label="\"0B\""]
  1274 -> 372 [style=solid label="'\\''"]
  1274 -> 373 [style=solid label="\"false\""]
  1274 -> 374 [style=solid label="\"true\""]
  1274 -> 375 [style=solid label="\"noexcept\""]
  1274 -> 17 [style=solid label="\"operator\""]
  1274 -> 26 [style=solid label="\"decltype\""]
  1274 -> 376 [style=solid label="\"delete\""]
  1274 -> 377 [style=solid label="'.'"]
  1274 -> 378 [style=solid label="'2'"]
  1274 -> 379 [style=solid label="'3'"]
  1274 -> 380 [style=solid label="'4'"]
  1274 -> 381 [style=solid label="'5'"]
  1274 -> 382 [style=solid label="'6'"]
  1274 -> 383 [style=solid label="'7'"]
  1274 -> 384 [style=solid label="'8'"]
  1274 -> 385 [style=solid label="'9'"]
  1274 -> 185 [style=solid label="\"u8\""]
  1274 -> 186 [style=solid label="'u'"]
  1274 -> 187 [style=solid label="'U'"]
  1274 -> 188 [style=solid label="'L'"]
  1274 -> 386 [style=solid label="'*'"]
  1274 -> 203 [style=solid label="'\"'"]
  1274 -> 387 [style=solid label="\"0x\""]
  1274 -> 388 [style=solid label="\"0X\""]
  1274 -> 389 [style=solid label="\"requires\""]
  1274 -> 390 [style=solid label="\"new\""]
  1274 -> 391 [style=solid label="'~'"]
  1274 -> 392 [style=solid label="'!'"]
  1274 -> 393 [style=solid label="\"++\""]
  1274 -> 394 [style=solid label="\"--\""]
  1274 -> 395 [style=solid label="\"this\""]
  1274 -> 37 [style=solid label="\"auto\""]
  1274 -> 396 [style=solid label="\"nullptr\""]
  1274 -> 397 [style=solid label="\"dynamic_cast\""]
  1274 -> 398 [style=solid label="\"static_cast\""]
  1274 -> 399 [style=solid label="\"reinterpret_cast\""]
  1274 -> 400 [style=solid label="\"const_cast\""]
  1274 -> 401 [style=solid label="\"typeid\""]
  1274 -> 38 [style=solid label="\"char\""]
  1274 -> 39 [style=solid label="\"char8_t\""]
  1274 -> 40 [style=solid label="\"char16_t\""]
  1274 -> 41 [style=solid label="\"char32_t\""]
  1274 -> 42 [style=solid label="\"wchar_t\""]
  1274 -> 43 [style=solid label="\"bool\""]
  1274 -> 44 [style=solid label="\"short\""]
  1274 -> 45 [style=solid label="\"int\""]
  1274 -> 46 [style=solid label="\"long\""]
  1274 -> 47 [style=solid label="\"signed\""]
  1274 -> 48 [style=solid label="\"unsigned\""]
  1274 -> 49 [style=solid label="\"float\""]
  1274 -> 50 [style=solid label="\"double\""]
  1274 -> 51 [style=solid label="\"void\""]
  1274 -> 209 [style=solid label="'R'"]
  1274 -> 56 [style=solid label="\"typename\""]
  1274 -> 402 [style=solid label="\"sizeof\""]
  1274 -> 403 [style=solid label="\"alignof\""]
  1274 -> 406 [style=dashed label="await-expression"]
  1274 -> 407 [style=dashed label="binary-literal"]
  1274 -> 408 [style=dashed label="boolean-literal"]
  1274 -> 1601 [style=dashed label="cast-expression"]
  1274 -> 410 [style=dashed label="character-literal"]
  1274 -> 66 [style=dashed label="class-name"]
  1274 -> 68 [style=dashed label="concept-name"]
  1274 -> 69 [style=dashed label="conversion-function-id"]
  1274 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1274 -> 415 [style=dashed label="decimal-literal"]
  1274 -> 77 [style=dashed label="decltype-specifier"]
  1274 -> 416 [style=dashed label="delete-expression"]
  1274 -> 417 [style=dashed label="digit"]
  1274 -> 418 [style=dashed label="digit-sequence"]
  1274 -> 419 [style=dashed label="encoding-prefix"]
  1274 -> 85 [style=dashed label="enum-name"]
  1274 -> 422 [style=dashed label="floating-point-literal"]
  1274 -> 423 [style=dashed label="fold-expression"]
  1274 -> 424 [style=dashed label="fractional-constant"]
  1274 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1274 -> 426 [style=dashed label="hexadecimal-literal"]
  1274 -> 427 [style=dashed label="hexadecimal-prefix"]
  1274 -> 428 [style=dashed label="id-expression"]
  1274 -> 430 [style=dashed label="integer-literal"]
  1274 -> 431 [style=dashed label="lambda-expression"]
  1274 -> 432 [style=dashed label="lambda-introducer"]
  1274 -> 433 [style=dashed label="literal"]
  1274 -> 96 [style=dashed label="literal-operator-id"]
  1274 -> 100 [style=dashed label="namespace-alias"]
  1274 -> 103 [style=dashed label="namespace-name"]
  1274 -> 437 [style=dashed label="nested-name-specifier"]
  1274 -> 438 [style=dashed label="new-expression"]
  1274 -> 439 [style=dashed label="noexcept-expression"]
  1274 -> 440 [style=dashed label="nonzero-digit"]
  1274 -> 441 [style=dashed label="octal-literal"]
  1274 -> 109 [style=dashed label="operator-function-id"]
  1274 -> 110 [style=dashed label="placeholder-type-specifier"]
  1274 -> 443 [style=dashed label="pointer-literal"]
  1274 -> 444 [style=dashed label="postfix-expression"]
  1274 -> 445 [style=dashed label="primary-expression"]
  1274 -> 113 [style=dashed label="qualified-id"]
  1274 -> 447 [style=dashed label="requires-expression"]
  1274 -> 115 [style=dashed label="simple-template-id"]
  1274 -> 534 [style=dashed label="simple-type-specifier"]
  1274 -> 450 [style=dashed label="string-literal"]
  1274 -> 121 [style=dashed label="template-id"]
  1274 -> 216 [style=dashed label="template-name"]
  1274 -> 124 [style=dashed label="type-constraint"]
  1274 -> 125 [style=dashed label="type-name"]
  1274 -> 127 [style=dashed label="typedef-name"]
  1274 -> 536 [style=dashed label="typename-specifier"]
  1274 -> 454 [style=dashed label="unary-expression"]
  1274 -> 455 [style=dashed label="unary-operator"]
  1274 -> 130 [style=dashed label="unqualified-id"]
  1274 -> 456 [style=dashed label="user-defined-character-literal"]
  1274 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1274 -> 458 [style=dashed label="user-defined-integer-literal"]
  1274 -> 459 [style=dashed label="user-defined-literal"]
  1274 -> 460 [style=dashed label="user-defined-string-literal"]
  1275 [label="State 1275\n\l246 delete-expression: \"::\" \"delete\" '[' • ']' cast-expression\l538 lambda-introducer: '[' • ']'\l539                  | '[' • lambda-capture ']'\l"]
  1275 -> 766 [style=solid label="IDENTIFIER"]
  1275 -> 767 [style=solid label="'='"]
  1275 -> 768 [style=solid label="\"...\""]
  1275 -> 769 [style=solid label="'&'"]
  1275 -> 1602 [style=solid label="']'"]
  1275 -> 771 [style=solid label="'*'"]
  1275 -> 772 [style=solid label="\"this\""]
  1275 -> 773 [style=dashed label="capture"]
  1275 -> 774 [style=dashed label="capture-default"]
  1275 -> 775 [style=dashed label="capture-list"]
  1275 -> 776 [style=dashed label="init-capture"]
  1275 -> 777 [style=dashed label="lambda-capture"]
  1275 -> 778 [style=dashed label="simple-capture"]
  1276 [label="State 1276\n\l244 delete-expression: \"::\" \"delete\" cast-expression •\l"]
  1276 -> "1276R244" [style=solid]
 "1276R244" [label="R244", fillcolor=3, shape=diamond, style=filled]
  1277 [label="State 1277\n\l680 new-expression: \"::\" \"new\" '(' • type-id ')'\l684               | \"::\" \"new\" '(' • type-id ')' new-initializer\l691 new-placement: '(' • expression-list ')'\l"]
  1277 -> 1 [style=solid label="IDENTIFIER"]
  1277 -> 361 [style=solid label="'+'"]
  1277 -> 362 [style=solid label="'-'"]
  1277 -> 363 [style=solid label="'('"]
  1277 -> 364 [style=solid label="'&'"]
  1277 -> 365 [style=solid label="\"::\""]
  1277 -> 366 [style=solid label="'['"]
  1277 -> 367 [style=solid label="\"co_await\""]
  1277 -> 939 [style=solid label="'{'"]
  1277 -> 368 [style=solid label="'0'"]
  1277 -> 369 [style=solid label="'1'"]
  1277 -> 370 [style=solid label="\"0b\""]
  1277 -> 371 [style=solid label="\"0B\""]
  1277 -> 372 [style=solid label="'\\''"]
  1277 -> 373 [style=solid label="\"false\""]
  1277 -> 374 [style=solid label="\"true\""]
  1277 -> 12 [style=solid label="\"class\""]
  1277 -> 13 [style=solid label="\"struct\""]
  1277 -> 14 [style=solid label="\"union\""]
  1277 -> 375 [style=solid label="\"noexcept\""]
  1277 -> 17 [style=solid label="\"operator\""]
  1277 -> 18 [style=solid label="\"const\""]
  1277 -> 19 [style=solid label="\"volatile\""]
  1277 -> 26 [style=solid label="\"decltype\""]
  1277 -> 376 [style=solid label="\"delete\""]
  1277 -> 377 [style=solid label="'.'"]
  1277 -> 378 [style=solid label="'2'"]
  1277 -> 379 [style=solid label="'3'"]
  1277 -> 380 [style=solid label="'4'"]
  1277 -> 381 [style=solid label="'5'"]
  1277 -> 382 [style=solid label="'6'"]
  1277 -> 383 [style=solid label="'7'"]
  1277 -> 384 [style=solid label="'8'"]
  1277 -> 385 [style=solid label="'9'"]
  1277 -> 136 [style=solid label="\"enum\""]
  1277 -> 185 [style=solid label="\"u8\""]
  1277 -> 186 [style=solid label="'u'"]
  1277 -> 187 [style=solid label="'U'"]
  1277 -> 188 [style=solid label="'L'"]
  1277 -> 386 [style=solid label="'*'"]
  1277 -> 203 [style=solid label="'\"'"]
  1277 -> 387 [style=solid label="\"0x\""]
  1277 -> 388 [style=solid label="\"0X\""]
  1277 -> 389 [style=solid label="\"requires\""]
  1277 -> 390 [style=solid label="\"new\""]
  1277 -> 391 [style=solid label="'~'"]
  1277 -> 392 [style=solid label="'!'"]
  1277 -> 393 [style=solid label="\"++\""]
  1277 -> 394 [style=solid label="\"--\""]
  1277 -> 395 [style=solid label="\"this\""]
  1277 -> 37 [style=solid label="\"auto\""]
  1277 -> 396 [style=solid label="\"nullptr\""]
  1277 -> 397 [style=solid label="\"dynamic_cast\""]
  1277 -> 398 [style=solid label="\"static_cast\""]
  1277 -> 399 [style=solid label="\"reinterpret_cast\""]
  1277 -> 400 [style=solid label="\"const_cast\""]
  1277 -> 401 [style=solid label="\"typeid\""]
  1277 -> 38 [style=solid label="\"char\""]
  1277 -> 39 [style=solid label="\"char8_t\""]
  1277 -> 40 [style=solid label="\"char16_t\""]
  1277 -> 41 [style=solid label="\"char32_t\""]
  1277 -> 42 [style=solid label="\"wchar_t\""]
  1277 -> 43 [style=solid label="\"bool\""]
  1277 -> 44 [style=solid label="\"short\""]
  1277 -> 45 [style=solid label="\"int\""]
  1277 -> 46 [style=solid label="\"long\""]
  1277 -> 47 [style=solid label="\"signed\""]
  1277 -> 48 [style=solid label="\"unsigned\""]
  1277 -> 49 [style=solid label="\"float\""]
  1277 -> 50 [style=solid label="\"double\""]
  1277 -> 51 [style=solid label="\"void\""]
  1277 -> 209 [style=solid label="'R'"]
  1277 -> 528 [style=solid label="\"throw\""]
  1277 -> 56 [style=solid label="\"typename\""]
  1277 -> 402 [style=solid label="\"sizeof\""]
  1277 -> 403 [style=solid label="\"alignof\""]
  1277 -> 529 [style=solid label="\"co_yield\""]
  1277 -> 404 [style=dashed label="additive-expression"]
  1277 -> 405 [style=dashed label="and-expression"]
  1277 -> 1141 [style=dashed label="assignment-expression"]
  1277 -> 406 [style=dashed label="await-expression"]
  1277 -> 407 [style=dashed label="binary-literal"]
  1277 -> 408 [style=dashed label="boolean-literal"]
  1277 -> 1142 [style=dashed label="braced-init-list"]
  1277 -> 409 [style=dashed label="cast-expression"]
  1277 -> 410 [style=dashed label="character-literal"]
  1277 -> 210 [style=dashed label="class-key"]
  1277 -> 66 [style=dashed label="class-name"]
  1277 -> 411 [style=dashed label="compare-expression"]
  1277 -> 68 [style=dashed label="concept-name"]
  1277 -> 531 [style=dashed label="conditional-expression"]
  1277 -> 69 [style=dashed label="conversion-function-id"]
  1277 -> 70 [style=dashed label="cv-qualifier"]
  1277 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1277 -> 415 [style=dashed label="decimal-literal"]
  1277 -> 77 [style=dashed label="decltype-specifier"]
  1277 -> 416 [style=dashed label="delete-expression"]
  1277 -> 417 [style=dashed label="digit"]
  1277 -> 418 [style=dashed label="digit-sequence"]
  1277 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1277 -> 81 [style=dashed label="elaborated-type-specifier"]
  1277 -> 419 [style=dashed label="encoding-prefix"]
  1277 -> 85 [style=dashed label="enum-name"]
  1277 -> 420 [style=dashed label="equality-expression"]
  1277 -> 421 [style=dashed label="exclusive-or-expression"]
  1277 -> 1306 [style=dashed label="expression-list"]
  1277 -> 422 [style=dashed label="floating-point-literal"]
  1277 -> 423 [style=dashed label="fold-expression"]
  1277 -> 424 [style=dashed label="fractional-constant"]
  1277 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1277 -> 426 [style=dashed label="hexadecimal-literal"]
  1277 -> 427 [style=dashed label="hexadecimal-prefix"]
  1277 -> 428 [style=dashed label="id-expression"]
  1277 -> 429 [style=dashed label="inclusive-or-expression"]
  1277 -> 1145 [style=dashed label="initializer-clause"]
  1277 -> 1146 [style=dashed label="initializer-list"]
  1277 -> 430 [style=dashed label="integer-literal"]
  1277 -> 431 [style=dashed label="lambda-expression"]
  1277 -> 432 [style=dashed label="lambda-introducer"]
  1277 -> 433 [style=dashed label="literal"]
  1277 -> 96 [style=dashed label="literal-operator-id"]
  1277 -> 434 [style=dashed label="logical-and-expression"]
  1277 -> 533 [style=dashed label="logical-or-expression"]
  1277 -> 436 [style=dashed label="multiplicative-expression"]
  1277 -> 100 [style=dashed label="namespace-alias"]
  1277 -> 103 [style=dashed label="namespace-name"]
  1277 -> 437 [style=dashed label="nested-name-specifier"]
  1277 -> 438 [style=dashed label="new-expression"]
  1277 -> 439 [style=dashed label="noexcept-expression"]
  1277 -> 440 [style=dashed label="nonzero-digit"]
  1277 -> 441 [style=dashed label="octal-literal"]
  1277 -> 109 [style=dashed label="operator-function-id"]
  1277 -> 110 [style=dashed label="placeholder-type-specifier"]
  1277 -> 442 [style=dashed label="pm-expression"]
  1277 -> 443 [style=dashed label="pointer-literal"]
  1277 -> 444 [style=dashed label="postfix-expression"]
  1277 -> 445 [style=dashed label="primary-expression"]
  1277 -> 113 [style=dashed label="qualified-id"]
  1277 -> 446 [style=dashed label="relational-expression"]
  1277 -> 447 [style=dashed label="requires-expression"]
  1277 -> 448 [style=dashed label="shift-expression"]
  1277 -> 115 [style=dashed label="simple-template-id"]
  1277 -> 449 [style=dashed label="simple-type-specifier"]
  1277 -> 450 [style=dashed label="string-literal"]
  1277 -> 121 [style=dashed label="template-id"]
  1277 -> 216 [style=dashed label="template-name"]
  1277 -> 535 [style=dashed label="throw-expression"]
  1277 -> 124 [style=dashed label="type-constraint"]
  1277 -> 1603 [style=dashed label="type-id"]
  1277 -> 125 [style=dashed label="type-name"]
  1277 -> 217 [style=dashed label="type-specifier"]
  1277 -> 452 [style=dashed label="type-specifier-seq"]
  1277 -> 127 [style=dashed label="typedef-name"]
  1277 -> 453 [style=dashed label="typename-specifier"]
  1277 -> 454 [style=dashed label="unary-expression"]
  1277 -> 455 [style=dashed label="unary-operator"]
  1277 -> 130 [style=dashed label="unqualified-id"]
  1277 -> 456 [style=dashed label="user-defined-character-literal"]
  1277 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1277 -> 458 [style=dashed label="user-defined-integer-literal"]
  1277 -> 459 [style=dashed label="user-defined-literal"]
  1277 -> 460 [style=dashed label="user-defined-string-literal"]
  1277 -> 537 [style=dashed label="yield-expression"]
  1278 [label="State 1278\n\l674 new-expression: \"::\" \"new\" new-placement • new-type-id\l678               | \"::\" \"new\" new-placement • new-type-id new-initializer\l682               | \"::\" \"new\" new-placement • '(' type-id ')'\l686               | \"::\" \"new\" new-placement • '(' type-id ')' new-initializer\l"]
  1278 -> 161 [style=solid label="IDENTIFIER"]
  1278 -> 1604 [style=solid label="'('"]
  1278 -> 9 [style=solid label="\"::\""]
  1278 -> 12 [style=solid label="\"class\""]
  1278 -> 13 [style=solid label="\"struct\""]
  1278 -> 14 [style=solid label="\"union\""]
  1278 -> 18 [style=solid label="\"const\""]
  1278 -> 19 [style=solid label="\"volatile\""]
  1278 -> 26 [style=solid label="\"decltype\""]
  1278 -> 136 [style=solid label="\"enum\""]
  1278 -> 37 [style=solid label="\"auto\""]
  1278 -> 38 [style=solid label="\"char\""]
  1278 -> 39 [style=solid label="\"char8_t\""]
  1278 -> 40 [style=solid label="\"char16_t\""]
  1278 -> 41 [style=solid label="\"char32_t\""]
  1278 -> 42 [style=solid label="\"wchar_t\""]
  1278 -> 43 [style=solid label="\"bool\""]
  1278 -> 44 [style=solid label="\"short\""]
  1278 -> 45 [style=solid label="\"int\""]
  1278 -> 46 [style=solid label="\"long\""]
  1278 -> 47 [style=solid label="\"signed\""]
  1278 -> 48 [style=solid label="\"unsigned\""]
  1278 -> 49 [style=solid label="\"float\""]
  1278 -> 50 [style=solid label="\"double\""]
  1278 -> 51 [style=solid label="\"void\""]
  1278 -> 56 [style=solid label="\"typename\""]
  1278 -> 210 [style=dashed label="class-key"]
  1278 -> 66 [style=dashed label="class-name"]
  1278 -> 68 [style=dashed label="concept-name"]
  1278 -> 70 [style=dashed label="cv-qualifier"]
  1278 -> 77 [style=dashed label="decltype-specifier"]
  1278 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1278 -> 81 [style=dashed label="elaborated-type-specifier"]
  1278 -> 85 [style=dashed label="enum-name"]
  1278 -> 100 [style=dashed label="namespace-alias"]
  1278 -> 103 [style=dashed label="namespace-name"]
  1278 -> 213 [style=dashed label="nested-name-specifier"]
  1278 -> 1605 [style=dashed label="new-type-id"]
  1278 -> 110 [style=dashed label="placeholder-type-specifier"]
  1278 -> 142 [style=dashed label="simple-template-id"]
  1278 -> 116 [style=dashed label="simple-type-specifier"]
  1278 -> 216 [style=dashed label="template-name"]
  1278 -> 124 [style=dashed label="type-constraint"]
  1278 -> 125 [style=dashed label="type-name"]
  1278 -> 217 [style=dashed label="type-specifier"]
  1278 -> 811 [style=dashed label="type-specifier-seq"]
  1278 -> 127 [style=dashed label="typedef-name"]
  1278 -> 128 [style=dashed label="typename-specifier"]
  1279 [label="State 1279\n\l672 new-expression: \"::\" \"new\" new-type-id •\l676               | \"::\" \"new\" new-type-id • new-initializer\l"]
  1279 -> 1310 [style=solid label="'('"]
  1279 -> 939 [style=solid label="'{'"]
  1279 -> 1311 [style=dashed label="braced-init-list"]
  1279 -> 1606 [style=dashed label="new-initializer"]
  1279 -> "1279R672d" [label="['{']", style=solid]
 "1279R672d" [label="R672", fillcolor=5, shape=diamond, style=filled]
  1279 -> "1279R672" [style=solid]
 "1279R672" [label="R672", fillcolor=3, shape=diamond, style=filled]
  1280 [label="State 1280\n\l106 brace-or-equal-initializer: '=' • initializer-clause\l"]
  1280 -> 1 [style=solid label="IDENTIFIER"]
  1280 -> 361 [style=solid label="'+'"]
  1280 -> 362 [style=solid label="'-'"]
  1280 -> 363 [style=solid label="'('"]
  1280 -> 364 [style=solid label="'&'"]
  1280 -> 365 [style=solid label="\"::\""]
  1280 -> 366 [style=solid label="'['"]
  1280 -> 367 [style=solid label="\"co_await\""]
  1280 -> 939 [style=solid label="'{'"]
  1280 -> 368 [style=solid label="'0'"]
  1280 -> 369 [style=solid label="'1'"]
  1280 -> 370 [style=solid label="\"0b\""]
  1280 -> 371 [style=solid label="\"0B\""]
  1280 -> 372 [style=solid label="'\\''"]
  1280 -> 373 [style=solid label="\"false\""]
  1280 -> 374 [style=solid label="\"true\""]
  1280 -> 375 [style=solid label="\"noexcept\""]
  1280 -> 17 [style=solid label="\"operator\""]
  1280 -> 26 [style=solid label="\"decltype\""]
  1280 -> 376 [style=solid label="\"delete\""]
  1280 -> 377 [style=solid label="'.'"]
  1280 -> 378 [style=solid label="'2'"]
  1280 -> 379 [style=solid label="'3'"]
  1280 -> 380 [style=solid label="'4'"]
  1280 -> 381 [style=solid label="'5'"]
  1280 -> 382 [style=solid label="'6'"]
  1280 -> 383 [style=solid label="'7'"]
  1280 -> 384 [style=solid label="'8'"]
  1280 -> 385 [style=solid label="'9'"]
  1280 -> 185 [style=solid label="\"u8\""]
  1280 -> 186 [style=solid label="'u'"]
  1280 -> 187 [style=solid label="'U'"]
  1280 -> 188 [style=solid label="'L'"]
  1280 -> 386 [style=solid label="'*'"]
  1280 -> 203 [style=solid label="'\"'"]
  1280 -> 387 [style=solid label="\"0x\""]
  1280 -> 388 [style=solid label="\"0X\""]
  1280 -> 389 [style=solid label="\"requires\""]
  1280 -> 390 [style=solid label="\"new\""]
  1280 -> 391 [style=solid label="'~'"]
  1280 -> 392 [style=solid label="'!'"]
  1280 -> 393 [style=solid label="\"++\""]
  1280 -> 394 [style=solid label="\"--\""]
  1280 -> 395 [style=solid label="\"this\""]
  1280 -> 37 [style=solid label="\"auto\""]
  1280 -> 396 [style=solid label="\"nullptr\""]
  1280 -> 397 [style=solid label="\"dynamic_cast\""]
  1280 -> 398 [style=solid label="\"static_cast\""]
  1280 -> 399 [style=solid label="\"reinterpret_cast\""]
  1280 -> 400 [style=solid label="\"const_cast\""]
  1280 -> 401 [style=solid label="\"typeid\""]
  1280 -> 38 [style=solid label="\"char\""]
  1280 -> 39 [style=solid label="\"char8_t\""]
  1280 -> 40 [style=solid label="\"char16_t\""]
  1280 -> 41 [style=solid label="\"char32_t\""]
  1280 -> 42 [style=solid label="\"wchar_t\""]
  1280 -> 43 [style=solid label="\"bool\""]
  1280 -> 44 [style=solid label="\"short\""]
  1280 -> 45 [style=solid label="\"int\""]
  1280 -> 46 [style=solid label="\"long\""]
  1280 -> 47 [style=solid label="\"signed\""]
  1280 -> 48 [style=solid label="\"unsigned\""]
  1280 -> 49 [style=solid label="\"float\""]
  1280 -> 50 [style=solid label="\"double\""]
  1280 -> 51 [style=solid label="\"void\""]
  1280 -> 209 [style=solid label="'R'"]
  1280 -> 528 [style=solid label="\"throw\""]
  1280 -> 56 [style=solid label="\"typename\""]
  1280 -> 402 [style=solid label="\"sizeof\""]
  1280 -> 403 [style=solid label="\"alignof\""]
  1280 -> 529 [style=solid label="\"co_yield\""]
  1280 -> 404 [style=dashed label="additive-expression"]
  1280 -> 405 [style=dashed label="and-expression"]
  1280 -> 1141 [style=dashed label="assignment-expression"]
  1280 -> 406 [style=dashed label="await-expression"]
  1280 -> 407 [style=dashed label="binary-literal"]
  1280 -> 408 [style=dashed label="boolean-literal"]
  1280 -> 1142 [style=dashed label="braced-init-list"]
  1280 -> 409 [style=dashed label="cast-expression"]
  1280 -> 410 [style=dashed label="character-literal"]
  1280 -> 66 [style=dashed label="class-name"]
  1280 -> 411 [style=dashed label="compare-expression"]
  1280 -> 68 [style=dashed label="concept-name"]
  1280 -> 531 [style=dashed label="conditional-expression"]
  1280 -> 69 [style=dashed label="conversion-function-id"]
  1280 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1280 -> 415 [style=dashed label="decimal-literal"]
  1280 -> 77 [style=dashed label="decltype-specifier"]
  1280 -> 416 [style=dashed label="delete-expression"]
  1280 -> 417 [style=dashed label="digit"]
  1280 -> 418 [style=dashed label="digit-sequence"]
  1280 -> 419 [style=dashed label="encoding-prefix"]
  1280 -> 85 [style=dashed label="enum-name"]
  1280 -> 420 [style=dashed label="equality-expression"]
  1280 -> 421 [style=dashed label="exclusive-or-expression"]
  1280 -> 422 [style=dashed label="floating-point-literal"]
  1280 -> 423 [style=dashed label="fold-expression"]
  1280 -> 424 [style=dashed label="fractional-constant"]
  1280 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1280 -> 426 [style=dashed label="hexadecimal-literal"]
  1280 -> 427 [style=dashed label="hexadecimal-prefix"]
  1280 -> 428 [style=dashed label="id-expression"]
  1280 -> 429 [style=dashed label="inclusive-or-expression"]
  1280 -> 1143 [style=dashed label="initializer-clause"]
  1280 -> 430 [style=dashed label="integer-literal"]
  1280 -> 431 [style=dashed label="lambda-expression"]
  1280 -> 432 [style=dashed label="lambda-introducer"]
  1280 -> 433 [style=dashed label="literal"]
  1280 -> 96 [style=dashed label="literal-operator-id"]
  1280 -> 434 [style=dashed label="logical-and-expression"]
  1280 -> 533 [style=dashed label="logical-or-expression"]
  1280 -> 436 [style=dashed label="multiplicative-expression"]
  1280 -> 100 [style=dashed label="namespace-alias"]
  1280 -> 103 [style=dashed label="namespace-name"]
  1280 -> 437 [style=dashed label="nested-name-specifier"]
  1280 -> 438 [style=dashed label="new-expression"]
  1280 -> 439 [style=dashed label="noexcept-expression"]
  1280 -> 440 [style=dashed label="nonzero-digit"]
  1280 -> 441 [style=dashed label="octal-literal"]
  1280 -> 109 [style=dashed label="operator-function-id"]
  1280 -> 110 [style=dashed label="placeholder-type-specifier"]
  1280 -> 442 [style=dashed label="pm-expression"]
  1280 -> 443 [style=dashed label="pointer-literal"]
  1280 -> 444 [style=dashed label="postfix-expression"]
  1280 -> 445 [style=dashed label="primary-expression"]
  1280 -> 113 [style=dashed label="qualified-id"]
  1280 -> 446 [style=dashed label="relational-expression"]
  1280 -> 447 [style=dashed label="requires-expression"]
  1280 -> 448 [style=dashed label="shift-expression"]
  1280 -> 115 [style=dashed label="simple-template-id"]
  1280 -> 534 [style=dashed label="simple-type-specifier"]
  1280 -> 450 [style=dashed label="string-literal"]
  1280 -> 121 [style=dashed label="template-id"]
  1280 -> 216 [style=dashed label="template-name"]
  1280 -> 535 [style=dashed label="throw-expression"]
  1280 -> 124 [style=dashed label="type-constraint"]
  1280 -> 125 [style=dashed label="type-name"]
  1280 -> 127 [style=dashed label="typedef-name"]
  1280 -> 536 [style=dashed label="typename-specifier"]
  1280 -> 454 [style=dashed label="unary-expression"]
  1280 -> 455 [style=dashed label="unary-operator"]
  1280 -> 130 [style=dashed label="unqualified-id"]
  1280 -> 456 [style=dashed label="user-defined-character-literal"]
  1280 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1280 -> 458 [style=dashed label="user-defined-integer-literal"]
  1280 -> 459 [style=dashed label="user-defined-literal"]
  1280 -> 460 [style=dashed label="user-defined-string-literal"]
  1280 -> 537 [style=dashed label="yield-expression"]
  1281 [label="State 1281\n\l972 simple-capture: IDENTIFIER \"...\" •\l"]
  1281 -> "1281R972" [style=solid]
 "1281R972" [label="R972", fillcolor=3, shape=diamond, style=filled]
  1282 [label="State 1282\n\l470 init-capture: IDENTIFIER initializer •\l"]
  1282 -> "1282R470" [style=solid]
 "1282R470" [label="R470", fillcolor=3, shape=diamond, style=filled]
  1283 [label="State 1283\n\l469 init-capture: \"...\" IDENTIFIER • initializer\l"]
  1283 -> 1280 [style=solid label="'='"]
  1283 -> 647 [style=solid label="'('"]
  1283 -> 939 [style=solid label="'{'"]
  1283 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1283 -> 650 [style=dashed label="braced-init-list"]
  1283 -> 1607 [style=dashed label="initializer"]
  1284 [label="State 1284\n\l471 init-capture: '&' IDENTIFIER • initializer\l973 simple-capture: '&' IDENTIFIER •\l974               | '&' IDENTIFIER • \"...\"\l"]
  1284 -> 1280 [style=solid label="'='"]
  1284 -> 647 [style=solid label="'('"]
  1284 -> 1608 [style=solid label="\"...\""]
  1284 -> 939 [style=solid label="'{'"]
  1284 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1284 -> 650 [style=dashed label="braced-init-list"]
  1284 -> 1609 [style=dashed label="initializer"]
  1284 -> "1284R973" [style=solid]
 "1284R973" [label="R973", fillcolor=3, shape=diamond, style=filled]
  1285 [label="State 1285\n\l472 init-capture: '&' \"...\" • IDENTIFIER initializer\l"]
  1285 -> 1610 [style=solid label="IDENTIFIER"]
  1286 [label="State 1286\n\l976 simple-capture: '*' \"this\" •\l"]
  1286 -> "1286R976" [style=solid]
 "1286R976" [label="R976", fillcolor=3, shape=diamond, style=filled]
  1287 [label="State 1287\n\l531 lambda-capture: capture-default ',' • capture-list\l"]
  1287 -> 766 [style=solid label="IDENTIFIER"]
  1287 -> 768 [style=solid label="\"...\""]
  1287 -> 1611 [style=solid label="'&'"]
  1287 -> 771 [style=solid label="'*'"]
  1287 -> 772 [style=solid label="\"this\""]
  1287 -> 773 [style=dashed label="capture"]
  1287 -> 1612 [style=dashed label="capture-list"]
  1287 -> 776 [style=dashed label="init-capture"]
  1287 -> 778 [style=dashed label="simple-capture"]
  1288 [label="State 1288\n\l123 capture-list: capture-list ',' • capture\l"]
  1288 -> 766 [style=solid label="IDENTIFIER"]
  1288 -> 768 [style=solid label="\"...\""]
  1288 -> 1611 [style=solid label="'&'"]
  1288 -> 771 [style=solid label="'*'"]
  1288 -> 772 [style=solid label="\"this\""]
  1288 -> 1613 [style=dashed label="capture"]
  1288 -> 776 [style=dashed label="init-capture"]
  1288 -> 778 [style=dashed label="simple-capture"]
  1289 [label="State 1289\n\l539 lambda-introducer: '[' lambda-capture ']' •\l"]
  1289 -> "1289R539" [style=solid]
 "1289R539" [label="R539", fillcolor=3, shape=diamond, style=filled]
  1290 [label="State 1290\n\l127 character-literal: '\\'' c-char-sequence '\\'' •\l"]
  1290 -> "1290R127" [style=solid]
 "1290R127" [label="R127", fillcolor=3, shape=diamond, style=filled]
  1291 [label="State 1291\n\l117 c-char-sequence: c-char-sequence c-char •\l"]
  1291 -> "1291R117" [style=solid]
 "1291R117" [label="R117", fillcolor=3, shape=diamond, style=filled]
  1292 [label="State 1292\n\l338 expression: expression • ',' assignment-expression\l696 noexcept-expression: \"noexcept\" '(' expression • ')'\l"]
  1292 -> 1614 [style=solid label="')'"]
  1292 -> 1037 [style=solid label="','"]
  1293 [label="State 1293\n\l247 delete-expression: \"delete\" '[' ']' • cast-expression\l538 lambda-introducer: '[' ']' •\l"]
  1293 -> 1 [style=solid label="IDENTIFIER"]
  1293 -> 361 [style=solid label="'+'"]
  1293 -> 362 [style=solid label="'-'"]
  1293 -> 363 [style=solid label="'('"]
  1293 -> 364 [style=solid label="'&'"]
  1293 -> 365 [style=solid label="\"::\""]
  1293 -> 366 [style=solid label="'['"]
  1293 -> 367 [style=solid label="\"co_await\""]
  1293 -> 368 [style=solid label="'0'"]
  1293 -> 369 [style=solid label="'1'"]
  1293 -> 370 [style=solid label="\"0b\""]
  1293 -> 371 [style=solid label="\"0B\""]
  1293 -> 372 [style=solid label="'\\''"]
  1293 -> 373 [style=solid label="\"false\""]
  1293 -> 374 [style=solid label="\"true\""]
  1293 -> 375 [style=solid label="\"noexcept\""]
  1293 -> 17 [style=solid label="\"operator\""]
  1293 -> 26 [style=solid label="\"decltype\""]
  1293 -> 376 [style=solid label="\"delete\""]
  1293 -> 377 [style=solid label="'.'"]
  1293 -> 378 [style=solid label="'2'"]
  1293 -> 379 [style=solid label="'3'"]
  1293 -> 380 [style=solid label="'4'"]
  1293 -> 381 [style=solid label="'5'"]
  1293 -> 382 [style=solid label="'6'"]
  1293 -> 383 [style=solid label="'7'"]
  1293 -> 384 [style=solid label="'8'"]
  1293 -> 385 [style=solid label="'9'"]
  1293 -> 185 [style=solid label="\"u8\""]
  1293 -> 186 [style=solid label="'u'"]
  1293 -> 187 [style=solid label="'U'"]
  1293 -> 188 [style=solid label="'L'"]
  1293 -> 386 [style=solid label="'*'"]
  1293 -> 203 [style=solid label="'\"'"]
  1293 -> 387 [style=solid label="\"0x\""]
  1293 -> 388 [style=solid label="\"0X\""]
  1293 -> 389 [style=solid label="\"requires\""]
  1293 -> 390 [style=solid label="\"new\""]
  1293 -> 391 [style=solid label="'~'"]
  1293 -> 392 [style=solid label="'!'"]
  1293 -> 393 [style=solid label="\"++\""]
  1293 -> 394 [style=solid label="\"--\""]
  1293 -> 395 [style=solid label="\"this\""]
  1293 -> 37 [style=solid label="\"auto\""]
  1293 -> 396 [style=solid label="\"nullptr\""]
  1293 -> 397 [style=solid label="\"dynamic_cast\""]
  1293 -> 398 [style=solid label="\"static_cast\""]
  1293 -> 399 [style=solid label="\"reinterpret_cast\""]
  1293 -> 400 [style=solid label="\"const_cast\""]
  1293 -> 401 [style=solid label="\"typeid\""]
  1293 -> 38 [style=solid label="\"char\""]
  1293 -> 39 [style=solid label="\"char8_t\""]
  1293 -> 40 [style=solid label="\"char16_t\""]
  1293 -> 41 [style=solid label="\"char32_t\""]
  1293 -> 42 [style=solid label="\"wchar_t\""]
  1293 -> 43 [style=solid label="\"bool\""]
  1293 -> 44 [style=solid label="\"short\""]
  1293 -> 45 [style=solid label="\"int\""]
  1293 -> 46 [style=solid label="\"long\""]
  1293 -> 47 [style=solid label="\"signed\""]
  1293 -> 48 [style=solid label="\"unsigned\""]
  1293 -> 49 [style=solid label="\"float\""]
  1293 -> 50 [style=solid label="\"double\""]
  1293 -> 51 [style=solid label="\"void\""]
  1293 -> 209 [style=solid label="'R'"]
  1293 -> 56 [style=solid label="\"typename\""]
  1293 -> 402 [style=solid label="\"sizeof\""]
  1293 -> 403 [style=solid label="\"alignof\""]
  1293 -> 406 [style=dashed label="await-expression"]
  1293 -> 407 [style=dashed label="binary-literal"]
  1293 -> 408 [style=dashed label="boolean-literal"]
  1293 -> 1615 [style=dashed label="cast-expression"]
  1293 -> 410 [style=dashed label="character-literal"]
  1293 -> 66 [style=dashed label="class-name"]
  1293 -> 68 [style=dashed label="concept-name"]
  1293 -> 69 [style=dashed label="conversion-function-id"]
  1293 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1293 -> 415 [style=dashed label="decimal-literal"]
  1293 -> 77 [style=dashed label="decltype-specifier"]
  1293 -> 416 [style=dashed label="delete-expression"]
  1293 -> 417 [style=dashed label="digit"]
  1293 -> 418 [style=dashed label="digit-sequence"]
  1293 -> 419 [style=dashed label="encoding-prefix"]
  1293 -> 85 [style=dashed label="enum-name"]
  1293 -> 422 [style=dashed label="floating-point-literal"]
  1293 -> 423 [style=dashed label="fold-expression"]
  1293 -> 424 [style=dashed label="fractional-constant"]
  1293 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1293 -> 426 [style=dashed label="hexadecimal-literal"]
  1293 -> 427 [style=dashed label="hexadecimal-prefix"]
  1293 -> 428 [style=dashed label="id-expression"]
  1293 -> 430 [style=dashed label="integer-literal"]
  1293 -> 431 [style=dashed label="lambda-expression"]
  1293 -> 432 [style=dashed label="lambda-introducer"]
  1293 -> 433 [style=dashed label="literal"]
  1293 -> 96 [style=dashed label="literal-operator-id"]
  1293 -> 100 [style=dashed label="namespace-alias"]
  1293 -> 103 [style=dashed label="namespace-name"]
  1293 -> 437 [style=dashed label="nested-name-specifier"]
  1293 -> 438 [style=dashed label="new-expression"]
  1293 -> 439 [style=dashed label="noexcept-expression"]
  1293 -> 440 [style=dashed label="nonzero-digit"]
  1293 -> 441 [style=dashed label="octal-literal"]
  1293 -> 109 [style=dashed label="operator-function-id"]
  1293 -> 110 [style=dashed label="placeholder-type-specifier"]
  1293 -> 443 [style=dashed label="pointer-literal"]
  1293 -> 444 [style=dashed label="postfix-expression"]
  1293 -> 445 [style=dashed label="primary-expression"]
  1293 -> 113 [style=dashed label="qualified-id"]
  1293 -> 447 [style=dashed label="requires-expression"]
  1293 -> 115 [style=dashed label="simple-template-id"]
  1293 -> 534 [style=dashed label="simple-type-specifier"]
  1293 -> 450 [style=dashed label="string-literal"]
  1293 -> 121 [style=dashed label="template-id"]
  1293 -> 216 [style=dashed label="template-name"]
  1293 -> 124 [style=dashed label="type-constraint"]
  1293 -> 125 [style=dashed label="type-name"]
  1293 -> 127 [style=dashed label="typedef-name"]
  1293 -> 536 [style=dashed label="typename-specifier"]
  1293 -> 454 [style=dashed label="unary-expression"]
  1293 -> 455 [style=dashed label="unary-operator"]
  1293 -> 130 [style=dashed label="unqualified-id"]
  1293 -> 456 [style=dashed label="user-defined-character-literal"]
  1293 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1293 -> 458 [style=dashed label="user-defined-integer-literal"]
  1293 -> 459 [style=dashed label="user-defined-literal"]
  1293 -> 460 [style=dashed label="user-defined-string-literal"]
  1293 -> "1293R538d" [label="[IDENTIFIER, '(', \"::\", '[', \"noexcept\", \"decltype\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"typename\"]", style=solid]
 "1293R538d" [label="R538", fillcolor=5, shape=diamond, style=filled]
  1293 -> "1293R538" [style=solid]
 "1293R538" [label="R538", fillcolor=3, shape=diamond, style=filled]
  1294 [label="State 1294\n\l940 requirement-parameter-list: '(' parameter-declaration-clause • ')'\l"]
  1294 -> 1616 [style=solid label="')'"]
  1295 [label="State 1295\n\l156 compound-requirement: '{' • expression '}' ';'\l157                     | '{' • expression '}' \"noexcept\" ';'\l158                     | '{' • expression '}' return-type-requirement ';'\l159                     | '{' • expression '}' \"noexcept\" return-type-requirement ';'\l"]
  1295 -> 1 [style=solid label="IDENTIFIER"]
  1295 -> 361 [style=solid label="'+'"]
  1295 -> 362 [style=solid label="'-'"]
  1295 -> 363 [style=solid label="'('"]
  1295 -> 364 [style=solid label="'&'"]
  1295 -> 365 [style=solid label="\"::\""]
  1295 -> 366 [style=solid label="'['"]
  1295 -> 367 [style=solid label="\"co_await\""]
  1295 -> 368 [style=solid label="'0'"]
  1295 -> 369 [style=solid label="'1'"]
  1295 -> 370 [style=solid label="\"0b\""]
  1295 -> 371 [style=solid label="\"0B\""]
  1295 -> 372 [style=solid label="'\\''"]
  1295 -> 373 [style=solid label="\"false\""]
  1295 -> 374 [style=solid label="\"true\""]
  1295 -> 375 [style=solid label="\"noexcept\""]
  1295 -> 17 [style=solid label="\"operator\""]
  1295 -> 26 [style=solid label="\"decltype\""]
  1295 -> 376 [style=solid label="\"delete\""]
  1295 -> 377 [style=solid label="'.'"]
  1295 -> 378 [style=solid label="'2'"]
  1295 -> 379 [style=solid label="'3'"]
  1295 -> 380 [style=solid label="'4'"]
  1295 -> 381 [style=solid label="'5'"]
  1295 -> 382 [style=solid label="'6'"]
  1295 -> 383 [style=solid label="'7'"]
  1295 -> 384 [style=solid label="'8'"]
  1295 -> 385 [style=solid label="'9'"]
  1295 -> 185 [style=solid label="\"u8\""]
  1295 -> 186 [style=solid label="'u'"]
  1295 -> 187 [style=solid label="'U'"]
  1295 -> 188 [style=solid label="'L'"]
  1295 -> 386 [style=solid label="'*'"]
  1295 -> 203 [style=solid label="'\"'"]
  1295 -> 387 [style=solid label="\"0x\""]
  1295 -> 388 [style=solid label="\"0X\""]
  1295 -> 389 [style=solid label="\"requires\""]
  1295 -> 390 [style=solid label="\"new\""]
  1295 -> 391 [style=solid label="'~'"]
  1295 -> 392 [style=solid label="'!'"]
  1295 -> 393 [style=solid label="\"++\""]
  1295 -> 394 [style=solid label="\"--\""]
  1295 -> 395 [style=solid label="\"this\""]
  1295 -> 37 [style=solid label="\"auto\""]
  1295 -> 396 [style=solid label="\"nullptr\""]
  1295 -> 397 [style=solid label="\"dynamic_cast\""]
  1295 -> 398 [style=solid label="\"static_cast\""]
  1295 -> 399 [style=solid label="\"reinterpret_cast\""]
  1295 -> 400 [style=solid label="\"const_cast\""]
  1295 -> 401 [style=solid label="\"typeid\""]
  1295 -> 38 [style=solid label="\"char\""]
  1295 -> 39 [style=solid label="\"char8_t\""]
  1295 -> 40 [style=solid label="\"char16_t\""]
  1295 -> 41 [style=solid label="\"char32_t\""]
  1295 -> 42 [style=solid label="\"wchar_t\""]
  1295 -> 43 [style=solid label="\"bool\""]
  1295 -> 44 [style=solid label="\"short\""]
  1295 -> 45 [style=solid label="\"int\""]
  1295 -> 46 [style=solid label="\"long\""]
  1295 -> 47 [style=solid label="\"signed\""]
  1295 -> 48 [style=solid label="\"unsigned\""]
  1295 -> 49 [style=solid label="\"float\""]
  1295 -> 50 [style=solid label="\"double\""]
  1295 -> 51 [style=solid label="\"void\""]
  1295 -> 209 [style=solid label="'R'"]
  1295 -> 528 [style=solid label="\"throw\""]
  1295 -> 56 [style=solid label="\"typename\""]
  1295 -> 402 [style=solid label="\"sizeof\""]
  1295 -> 403 [style=solid label="\"alignof\""]
  1295 -> 529 [style=solid label="\"co_yield\""]
  1295 -> 404 [style=dashed label="additive-expression"]
  1295 -> 405 [style=dashed label="and-expression"]
  1295 -> 530 [style=dashed label="assignment-expression"]
  1295 -> 406 [style=dashed label="await-expression"]
  1295 -> 407 [style=dashed label="binary-literal"]
  1295 -> 408 [style=dashed label="boolean-literal"]
  1295 -> 409 [style=dashed label="cast-expression"]
  1295 -> 410 [style=dashed label="character-literal"]
  1295 -> 66 [style=dashed label="class-name"]
  1295 -> 411 [style=dashed label="compare-expression"]
  1295 -> 68 [style=dashed label="concept-name"]
  1295 -> 531 [style=dashed label="conditional-expression"]
  1295 -> 69 [style=dashed label="conversion-function-id"]
  1295 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1295 -> 415 [style=dashed label="decimal-literal"]
  1295 -> 77 [style=dashed label="decltype-specifier"]
  1295 -> 416 [style=dashed label="delete-expression"]
  1295 -> 417 [style=dashed label="digit"]
  1295 -> 418 [style=dashed label="digit-sequence"]
  1295 -> 419 [style=dashed label="encoding-prefix"]
  1295 -> 85 [style=dashed label="enum-name"]
  1295 -> 420 [style=dashed label="equality-expression"]
  1295 -> 421 [style=dashed label="exclusive-or-expression"]
  1295 -> 1617 [style=dashed label="expression"]
  1295 -> 422 [style=dashed label="floating-point-literal"]
  1295 -> 423 [style=dashed label="fold-expression"]
  1295 -> 424 [style=dashed label="fractional-constant"]
  1295 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1295 -> 426 [style=dashed label="hexadecimal-literal"]
  1295 -> 427 [style=dashed label="hexadecimal-prefix"]
  1295 -> 428 [style=dashed label="id-expression"]
  1295 -> 429 [style=dashed label="inclusive-or-expression"]
  1295 -> 430 [style=dashed label="integer-literal"]
  1295 -> 431 [style=dashed label="lambda-expression"]
  1295 -> 432 [style=dashed label="lambda-introducer"]
  1295 -> 433 [style=dashed label="literal"]
  1295 -> 96 [style=dashed label="literal-operator-id"]
  1295 -> 434 [style=dashed label="logical-and-expression"]
  1295 -> 533 [style=dashed label="logical-or-expression"]
  1295 -> 436 [style=dashed label="multiplicative-expression"]
  1295 -> 100 [style=dashed label="namespace-alias"]
  1295 -> 103 [style=dashed label="namespace-name"]
  1295 -> 437 [style=dashed label="nested-name-specifier"]
  1295 -> 438 [style=dashed label="new-expression"]
  1295 -> 439 [style=dashed label="noexcept-expression"]
  1295 -> 440 [style=dashed label="nonzero-digit"]
  1295 -> 441 [style=dashed label="octal-literal"]
  1295 -> 109 [style=dashed label="operator-function-id"]
  1295 -> 110 [style=dashed label="placeholder-type-specifier"]
  1295 -> 442 [style=dashed label="pm-expression"]
  1295 -> 443 [style=dashed label="pointer-literal"]
  1295 -> 444 [style=dashed label="postfix-expression"]
  1295 -> 445 [style=dashed label="primary-expression"]
  1295 -> 113 [style=dashed label="qualified-id"]
  1295 -> 446 [style=dashed label="relational-expression"]
  1295 -> 447 [style=dashed label="requires-expression"]
  1295 -> 448 [style=dashed label="shift-expression"]
  1295 -> 115 [style=dashed label="simple-template-id"]
  1295 -> 534 [style=dashed label="simple-type-specifier"]
  1295 -> 450 [style=dashed label="string-literal"]
  1295 -> 121 [style=dashed label="template-id"]
  1295 -> 216 [style=dashed label="template-name"]
  1295 -> 535 [style=dashed label="throw-expression"]
  1295 -> 124 [style=dashed label="type-constraint"]
  1295 -> 125 [style=dashed label="type-name"]
  1295 -> 127 [style=dashed label="typedef-name"]
  1295 -> 536 [style=dashed label="typename-specifier"]
  1295 -> 454 [style=dashed label="unary-expression"]
  1295 -> 455 [style=dashed label="unary-operator"]
  1295 -> 130 [style=dashed label="unqualified-id"]
  1295 -> 456 [style=dashed label="user-defined-character-literal"]
  1295 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1295 -> 458 [style=dashed label="user-defined-integer-literal"]
  1295 -> 459 [style=dashed label="user-defined-literal"]
  1295 -> 460 [style=dashed label="user-defined-string-literal"]
  1295 -> 537 [style=dashed label="yield-expression"]
  1296 [label="State 1296\n\l668 nested-requirement: \"requires\" • constraint-expression ';'\l944 requires-expression: \"requires\" • requirement-body\l945                    | \"requires\" • requirement-parameter-list requirement-body\l"]
  1296 -> 1 [style=solid label="IDENTIFIER"]
  1296 -> 361 [style=solid label="'+'"]
  1296 -> 362 [style=solid label="'-'"]
  1296 -> 1618 [style=solid label="'('"]
  1296 -> 364 [style=solid label="'&'"]
  1296 -> 365 [style=solid label="\"::\""]
  1296 -> 366 [style=solid label="'['"]
  1296 -> 367 [style=solid label="\"co_await\""]
  1296 -> 805 [style=solid label="'{'"]
  1296 -> 368 [style=solid label="'0'"]
  1296 -> 369 [style=solid label="'1'"]
  1296 -> 370 [style=solid label="\"0b\""]
  1296 -> 371 [style=solid label="\"0B\""]
  1296 -> 372 [style=solid label="'\\''"]
  1296 -> 373 [style=solid label="\"false\""]
  1296 -> 374 [style=solid label="\"true\""]
  1296 -> 375 [style=solid label="\"noexcept\""]
  1296 -> 17 [style=solid label="\"operator\""]
  1296 -> 26 [style=solid label="\"decltype\""]
  1296 -> 376 [style=solid label="\"delete\""]
  1296 -> 377 [style=solid label="'.'"]
  1296 -> 378 [style=solid label="'2'"]
  1296 -> 379 [style=solid label="'3'"]
  1296 -> 380 [style=solid label="'4'"]
  1296 -> 381 [style=solid label="'5'"]
  1296 -> 382 [style=solid label="'6'"]
  1296 -> 383 [style=solid label="'7'"]
  1296 -> 384 [style=solid label="'8'"]
  1296 -> 385 [style=solid label="'9'"]
  1296 -> 185 [style=solid label="\"u8\""]
  1296 -> 186 [style=solid label="'u'"]
  1296 -> 187 [style=solid label="'U'"]
  1296 -> 188 [style=solid label="'L'"]
  1296 -> 386 [style=solid label="'*'"]
  1296 -> 203 [style=solid label="'\"'"]
  1296 -> 387 [style=solid label="\"0x\""]
  1296 -> 388 [style=solid label="\"0X\""]
  1296 -> 389 [style=solid label="\"requires\""]
  1296 -> 390 [style=solid label="\"new\""]
  1296 -> 391 [style=solid label="'~'"]
  1296 -> 392 [style=solid label="'!'"]
  1296 -> 393 [style=solid label="\"++\""]
  1296 -> 394 [style=solid label="\"--\""]
  1296 -> 395 [style=solid label="\"this\""]
  1296 -> 37 [style=solid label="\"auto\""]
  1296 -> 396 [style=solid label="\"nullptr\""]
  1296 -> 397 [style=solid label="\"dynamic_cast\""]
  1296 -> 398 [style=solid label="\"static_cast\""]
  1296 -> 399 [style=solid label="\"reinterpret_cast\""]
  1296 -> 400 [style=solid label="\"const_cast\""]
  1296 -> 401 [style=solid label="\"typeid\""]
  1296 -> 38 [style=solid label="\"char\""]
  1296 -> 39 [style=solid label="\"char8_t\""]
  1296 -> 40 [style=solid label="\"char16_t\""]
  1296 -> 41 [style=solid label="\"char32_t\""]
  1296 -> 42 [style=solid label="\"wchar_t\""]
  1296 -> 43 [style=solid label="\"bool\""]
  1296 -> 44 [style=solid label="\"short\""]
  1296 -> 45 [style=solid label="\"int\""]
  1296 -> 46 [style=solid label="\"long\""]
  1296 -> 47 [style=solid label="\"signed\""]
  1296 -> 48 [style=solid label="\"unsigned\""]
  1296 -> 49 [style=solid label="\"float\""]
  1296 -> 50 [style=solid label="\"double\""]
  1296 -> 51 [style=solid label="\"void\""]
  1296 -> 209 [style=solid label="'R'"]
  1296 -> 56 [style=solid label="\"typename\""]
  1296 -> 402 [style=solid label="\"sizeof\""]
  1296 -> 403 [style=solid label="\"alignof\""]
  1296 -> 404 [style=dashed label="additive-expression"]
  1296 -> 405 [style=dashed label="and-expression"]
  1296 -> 406 [style=dashed label="await-expression"]
  1296 -> 407 [style=dashed label="binary-literal"]
  1296 -> 408 [style=dashed label="boolean-literal"]
  1296 -> 409 [style=dashed label="cast-expression"]
  1296 -> 410 [style=dashed label="character-literal"]
  1296 -> 66 [style=dashed label="class-name"]
  1296 -> 411 [style=dashed label="compare-expression"]
  1296 -> 68 [style=dashed label="concept-name"]
  1296 -> 1619 [style=dashed label="constraint-expression"]
  1296 -> 69 [style=dashed label="conversion-function-id"]
  1296 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1296 -> 415 [style=dashed label="decimal-literal"]
  1296 -> 77 [style=dashed label="decltype-specifier"]
  1296 -> 416 [style=dashed label="delete-expression"]
  1296 -> 417 [style=dashed label="digit"]
  1296 -> 418 [style=dashed label="digit-sequence"]
  1296 -> 419 [style=dashed label="encoding-prefix"]
  1296 -> 85 [style=dashed label="enum-name"]
  1296 -> 420 [style=dashed label="equality-expression"]
  1296 -> 421 [style=dashed label="exclusive-or-expression"]
  1296 -> 422 [style=dashed label="floating-point-literal"]
  1296 -> 423 [style=dashed label="fold-expression"]
  1296 -> 424 [style=dashed label="fractional-constant"]
  1296 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1296 -> 426 [style=dashed label="hexadecimal-literal"]
  1296 -> 427 [style=dashed label="hexadecimal-prefix"]
  1296 -> 428 [style=dashed label="id-expression"]
  1296 -> 429 [style=dashed label="inclusive-or-expression"]
  1296 -> 430 [style=dashed label="integer-literal"]
  1296 -> 431 [style=dashed label="lambda-expression"]
  1296 -> 432 [style=dashed label="lambda-introducer"]
  1296 -> 433 [style=dashed label="literal"]
  1296 -> 96 [style=dashed label="literal-operator-id"]
  1296 -> 434 [style=dashed label="logical-and-expression"]
  1296 -> 1595 [style=dashed label="logical-or-expression"]
  1296 -> 436 [style=dashed label="multiplicative-expression"]
  1296 -> 100 [style=dashed label="namespace-alias"]
  1296 -> 103 [style=dashed label="namespace-name"]
  1296 -> 437 [style=dashed label="nested-name-specifier"]
  1296 -> 438 [style=dashed label="new-expression"]
  1296 -> 439 [style=dashed label="noexcept-expression"]
  1296 -> 440 [style=dashed label="nonzero-digit"]
  1296 -> 441 [style=dashed label="octal-literal"]
  1296 -> 109 [style=dashed label="operator-function-id"]
  1296 -> 110 [style=dashed label="placeholder-type-specifier"]
  1296 -> 442 [style=dashed label="pm-expression"]
  1296 -> 443 [style=dashed label="pointer-literal"]
  1296 -> 444 [style=dashed label="postfix-expression"]
  1296 -> 445 [style=dashed label="primary-expression"]
  1296 -> 113 [style=dashed label="qualified-id"]
  1296 -> 446 [style=dashed label="relational-expression"]
  1296 -> 806 [style=dashed label="requirement-body"]
  1296 -> 807 [style=dashed label="requirement-parameter-list"]
  1296 -> 447 [style=dashed label="requires-expression"]
  1296 -> 448 [style=dashed label="shift-expression"]
  1296 -> 115 [style=dashed label="simple-template-id"]
  1296 -> 534 [style=dashed label="simple-type-specifier"]
  1296 -> 450 [style=dashed label="string-literal"]
  1296 -> 121 [style=dashed label="template-id"]
  1296 -> 216 [style=dashed label="template-name"]
  1296 -> 124 [style=dashed label="type-constraint"]
  1296 -> 125 [style=dashed label="type-name"]
  1296 -> 127 [style=dashed label="typedef-name"]
  1296 -> 536 [style=dashed label="typename-specifier"]
  1296 -> 454 [style=dashed label="unary-expression"]
  1296 -> 455 [style=dashed label="unary-operator"]
  1296 -> 130 [style=dashed label="unqualified-id"]
  1296 -> 456 [style=dashed label="user-defined-character-literal"]
  1296 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1296 -> 458 [style=dashed label="user-defined-integer-literal"]
  1296 -> 459 [style=dashed label="user-defined-literal"]
  1296 -> 460 [style=dashed label="user-defined-string-literal"]
  1297 [label="State 1297\n\l1115 type-requirement: \"typename\" • type-name ';'\l1116                 | \"typename\" • nested-name-specifier type-name ';'\l1126 typename-specifier: \"typename\" • nested-name-specifier IDENTIFIER\l1127                   | \"typename\" • nested-name-specifier simple-template-id\l1128                   | \"typename\" • nested-name-specifier \"template\" simple-template-id\l"]
  1297 -> 258 [style=solid label="IDENTIFIER"]
  1297 -> 9 [style=solid label="\"::\""]
  1297 -> 135 [style=solid label="\"decltype\""]
  1297 -> 66 [style=dashed label="class-name"]
  1297 -> 139 [style=dashed label="decltype-specifier"]
  1297 -> 85 [style=dashed label="enum-name"]
  1297 -> 100 [style=dashed label="namespace-alias"]
  1297 -> 103 [style=dashed label="namespace-name"]
  1297 -> 1620 [style=dashed label="nested-name-specifier"]
  1297 -> 142 [style=dashed label="simple-template-id"]
  1297 -> 143 [style=dashed label="template-name"]
  1297 -> 1621 [style=dashed label="type-name"]
  1297 -> 127 [style=dashed label="typedef-name"]
  1298 [label="State 1298\n\l937 requirement: compound-requirement •\l"]
  1298 -> "1298R937" [style=solid]
 "1298R937" [label="R937", fillcolor=3, shape=diamond, style=filled]
  1299 [label="State 1299\n\l338 expression: expression • ',' assignment-expression\l996 simple-requirement: expression • ';'\l"]
  1299 -> 1622 [style=solid label="';'"]
  1299 -> 1037 [style=solid label="','"]
  1300 [label="State 1300\n\l938 requirement: nested-requirement •\l"]
  1300 -> "1300R938" [style=solid]
 "1300R938" [label="R938", fillcolor=3, shape=diamond, style=filled]
  1301 [label="State 1301\n\l941 requirement-seq: requirement •\l"]
  1301 -> "1301R941" [style=solid]
 "1301R941" [label="R941", fillcolor=3, shape=diamond, style=filled]
  1302 [label="State 1302\n\l939 requirement-body: '{' requirement-seq • '}'\l942 requirement-seq: requirement-seq • requirement\l"]
  1302 -> 1 [style=solid label="IDENTIFIER"]
  1302 -> 361 [style=solid label="'+'"]
  1302 -> 362 [style=solid label="'-'"]
  1302 -> 363 [style=solid label="'('"]
  1302 -> 364 [style=solid label="'&'"]
  1302 -> 365 [style=solid label="\"::\""]
  1302 -> 366 [style=solid label="'['"]
  1302 -> 367 [style=solid label="\"co_await\""]
  1302 -> 1295 [style=solid label="'{'"]
  1302 -> 1623 [style=solid label="'}'"]
  1302 -> 368 [style=solid label="'0'"]
  1302 -> 369 [style=solid label="'1'"]
  1302 -> 370 [style=solid label="\"0b\""]
  1302 -> 371 [style=solid label="\"0B\""]
  1302 -> 372 [style=solid label="'\\''"]
  1302 -> 373 [style=solid label="\"false\""]
  1302 -> 374 [style=solid label="\"true\""]
  1302 -> 375 [style=solid label="\"noexcept\""]
  1302 -> 17 [style=solid label="\"operator\""]
  1302 -> 26 [style=solid label="\"decltype\""]
  1302 -> 376 [style=solid label="\"delete\""]
  1302 -> 377 [style=solid label="'.'"]
  1302 -> 378 [style=solid label="'2'"]
  1302 -> 379 [style=solid label="'3'"]
  1302 -> 380 [style=solid label="'4'"]
  1302 -> 381 [style=solid label="'5'"]
  1302 -> 382 [style=solid label="'6'"]
  1302 -> 383 [style=solid label="'7'"]
  1302 -> 384 [style=solid label="'8'"]
  1302 -> 385 [style=solid label="'9'"]
  1302 -> 185 [style=solid label="\"u8\""]
  1302 -> 186 [style=solid label="'u'"]
  1302 -> 187 [style=solid label="'U'"]
  1302 -> 188 [style=solid label="'L'"]
  1302 -> 386 [style=solid label="'*'"]
  1302 -> 203 [style=solid label="'\"'"]
  1302 -> 387 [style=solid label="\"0x\""]
  1302 -> 388 [style=solid label="\"0X\""]
  1302 -> 1296 [style=solid label="\"requires\""]
  1302 -> 390 [style=solid label="\"new\""]
  1302 -> 391 [style=solid label="'~'"]
  1302 -> 392 [style=solid label="'!'"]
  1302 -> 393 [style=solid label="\"++\""]
  1302 -> 394 [style=solid label="\"--\""]
  1302 -> 395 [style=solid label="\"this\""]
  1302 -> 37 [style=solid label="\"auto\""]
  1302 -> 396 [style=solid label="\"nullptr\""]
  1302 -> 397 [style=solid label="\"dynamic_cast\""]
  1302 -> 398 [style=solid label="\"static_cast\""]
  1302 -> 399 [style=solid label="\"reinterpret_cast\""]
  1302 -> 400 [style=solid label="\"const_cast\""]
  1302 -> 401 [style=solid label="\"typeid\""]
  1302 -> 38 [style=solid label="\"char\""]
  1302 -> 39 [style=solid label="\"char8_t\""]
  1302 -> 40 [style=solid label="\"char16_t\""]
  1302 -> 41 [style=solid label="\"char32_t\""]
  1302 -> 42 [style=solid label="\"wchar_t\""]
  1302 -> 43 [style=solid label="\"bool\""]
  1302 -> 44 [style=solid label="\"short\""]
  1302 -> 45 [style=solid label="\"int\""]
  1302 -> 46 [style=solid label="\"long\""]
  1302 -> 47 [style=solid label="\"signed\""]
  1302 -> 48 [style=solid label="\"unsigned\""]
  1302 -> 49 [style=solid label="\"float\""]
  1302 -> 50 [style=solid label="\"double\""]
  1302 -> 51 [style=solid label="\"void\""]
  1302 -> 209 [style=solid label="'R'"]
  1302 -> 528 [style=solid label="\"throw\""]
  1302 -> 1297 [style=solid label="\"typename\""]
  1302 -> 402 [style=solid label="\"sizeof\""]
  1302 -> 403 [style=solid label="\"alignof\""]
  1302 -> 529 [style=solid label="\"co_yield\""]
  1302 -> 404 [style=dashed label="additive-expression"]
  1302 -> 405 [style=dashed label="and-expression"]
  1302 -> 530 [style=dashed label="assignment-expression"]
  1302 -> 406 [style=dashed label="await-expression"]
  1302 -> 407 [style=dashed label="binary-literal"]
  1302 -> 408 [style=dashed label="boolean-literal"]
  1302 -> 409 [style=dashed label="cast-expression"]
  1302 -> 410 [style=dashed label="character-literal"]
  1302 -> 66 [style=dashed label="class-name"]
  1302 -> 411 [style=dashed label="compare-expression"]
  1302 -> 1298 [style=dashed label="compound-requirement"]
  1302 -> 68 [style=dashed label="concept-name"]
  1302 -> 531 [style=dashed label="conditional-expression"]
  1302 -> 69 [style=dashed label="conversion-function-id"]
  1302 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1302 -> 415 [style=dashed label="decimal-literal"]
  1302 -> 77 [style=dashed label="decltype-specifier"]
  1302 -> 416 [style=dashed label="delete-expression"]
  1302 -> 417 [style=dashed label="digit"]
  1302 -> 418 [style=dashed label="digit-sequence"]
  1302 -> 419 [style=dashed label="encoding-prefix"]
  1302 -> 85 [style=dashed label="enum-name"]
  1302 -> 420 [style=dashed label="equality-expression"]
  1302 -> 421 [style=dashed label="exclusive-or-expression"]
  1302 -> 1299 [style=dashed label="expression"]
  1302 -> 422 [style=dashed label="floating-point-literal"]
  1302 -> 423 [style=dashed label="fold-expression"]
  1302 -> 424 [style=dashed label="fractional-constant"]
  1302 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1302 -> 426 [style=dashed label="hexadecimal-literal"]
  1302 -> 427 [style=dashed label="hexadecimal-prefix"]
  1302 -> 428 [style=dashed label="id-expression"]
  1302 -> 429 [style=dashed label="inclusive-or-expression"]
  1302 -> 430 [style=dashed label="integer-literal"]
  1302 -> 431 [style=dashed label="lambda-expression"]
  1302 -> 432 [style=dashed label="lambda-introducer"]
  1302 -> 433 [style=dashed label="literal"]
  1302 -> 96 [style=dashed label="literal-operator-id"]
  1302 -> 434 [style=dashed label="logical-and-expression"]
  1302 -> 533 [style=dashed label="logical-or-expression"]
  1302 -> 436 [style=dashed label="multiplicative-expression"]
  1302 -> 100 [style=dashed label="namespace-alias"]
  1302 -> 103 [style=dashed label="namespace-name"]
  1302 -> 437 [style=dashed label="nested-name-specifier"]
  1302 -> 1300 [style=dashed label="nested-requirement"]
  1302 -> 438 [style=dashed label="new-expression"]
  1302 -> 439 [style=dashed label="noexcept-expression"]
  1302 -> 440 [style=dashed label="nonzero-digit"]
  1302 -> 441 [style=dashed label="octal-literal"]
  1302 -> 109 [style=dashed label="operator-function-id"]
  1302 -> 110 [style=dashed label="placeholder-type-specifier"]
  1302 -> 442 [style=dashed label="pm-expression"]
  1302 -> 443 [style=dashed label="pointer-literal"]
  1302 -> 444 [style=dashed label="postfix-expression"]
  1302 -> 445 [style=dashed label="primary-expression"]
  1302 -> 113 [style=dashed label="qualified-id"]
  1302 -> 446 [style=dashed label="relational-expression"]
  1302 -> 1624 [style=dashed label="requirement"]
  1302 -> 447 [style=dashed label="requires-expression"]
  1302 -> 448 [style=dashed label="shift-expression"]
  1302 -> 1303 [style=dashed label="simple-requirement"]
  1302 -> 115 [style=dashed label="simple-template-id"]
  1302 -> 534 [style=dashed label="simple-type-specifier"]
  1302 -> 450 [style=dashed label="string-literal"]
  1302 -> 121 [style=dashed label="template-id"]
  1302 -> 216 [style=dashed label="template-name"]
  1302 -> 535 [style=dashed label="throw-expression"]
  1302 -> 124 [style=dashed label="type-constraint"]
  1302 -> 125 [style=dashed label="type-name"]
  1302 -> 1304 [style=dashed label="type-requirement"]
  1302 -> 127 [style=dashed label="typedef-name"]
  1302 -> 536 [style=dashed label="typename-specifier"]
  1302 -> 454 [style=dashed label="unary-expression"]
  1302 -> 455 [style=dashed label="unary-operator"]
  1302 -> 130 [style=dashed label="unqualified-id"]
  1302 -> 456 [style=dashed label="user-defined-character-literal"]
  1302 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1302 -> 458 [style=dashed label="user-defined-integer-literal"]
  1302 -> 459 [style=dashed label="user-defined-literal"]
  1302 -> 460 [style=dashed label="user-defined-string-literal"]
  1302 -> 537 [style=dashed label="yield-expression"]
  1303 [label="State 1303\n\l935 requirement: simple-requirement •\l"]
  1303 -> "1303R935" [style=solid]
 "1303R935" [label="R935", fillcolor=3, shape=diamond, style=filled]
  1304 [label="State 1304\n\l936 requirement: type-requirement •\l"]
  1304 -> "1304R936" [style=solid]
 "1304R936" [label="R936", fillcolor=3, shape=diamond, style=filled]
  1305 [label="State 1305\n\l945 requires-expression: \"requires\" requirement-parameter-list requirement-body •\l"]
  1305 -> "1305R945" [style=solid]
 "1305R945" [label="R945", fillcolor=3, shape=diamond, style=filled]
  1306 [label="State 1306\n\l691 new-placement: '(' expression-list • ')'\l"]
  1306 -> 1625 [style=solid label="')'"]
  1307 [label="State 1307\n\l681 new-expression: \"new\" '(' type-id • ')'\l685               | \"new\" '(' type-id • ')' new-initializer\l"]
  1307 -> 1626 [style=solid label="')'"]
  1308 [label="State 1308\n\l683 new-expression: \"new\" new-placement '(' • type-id ')'\l687               | \"new\" new-placement '(' • type-id ')' new-initializer\l"]
  1308 -> 161 [style=solid label="IDENTIFIER"]
  1308 -> 9 [style=solid label="\"::\""]
  1308 -> 12 [style=solid label="\"class\""]
  1308 -> 13 [style=solid label="\"struct\""]
  1308 -> 14 [style=solid label="\"union\""]
  1308 -> 18 [style=solid label="\"const\""]
  1308 -> 19 [style=solid label="\"volatile\""]
  1308 -> 26 [style=solid label="\"decltype\""]
  1308 -> 136 [style=solid label="\"enum\""]
  1308 -> 37 [style=solid label="\"auto\""]
  1308 -> 38 [style=solid label="\"char\""]
  1308 -> 39 [style=solid label="\"char8_t\""]
  1308 -> 40 [style=solid label="\"char16_t\""]
  1308 -> 41 [style=solid label="\"char32_t\""]
  1308 -> 42 [style=solid label="\"wchar_t\""]
  1308 -> 43 [style=solid label="\"bool\""]
  1308 -> 44 [style=solid label="\"short\""]
  1308 -> 45 [style=solid label="\"int\""]
  1308 -> 46 [style=solid label="\"long\""]
  1308 -> 47 [style=solid label="\"signed\""]
  1308 -> 48 [style=solid label="\"unsigned\""]
  1308 -> 49 [style=solid label="\"float\""]
  1308 -> 50 [style=solid label="\"double\""]
  1308 -> 51 [style=solid label="\"void\""]
  1308 -> 56 [style=solid label="\"typename\""]
  1308 -> 210 [style=dashed label="class-key"]
  1308 -> 66 [style=dashed label="class-name"]
  1308 -> 68 [style=dashed label="concept-name"]
  1308 -> 70 [style=dashed label="cv-qualifier"]
  1308 -> 77 [style=dashed label="decltype-specifier"]
  1308 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1308 -> 81 [style=dashed label="elaborated-type-specifier"]
  1308 -> 85 [style=dashed label="enum-name"]
  1308 -> 100 [style=dashed label="namespace-alias"]
  1308 -> 103 [style=dashed label="namespace-name"]
  1308 -> 213 [style=dashed label="nested-name-specifier"]
  1308 -> 110 [style=dashed label="placeholder-type-specifier"]
  1308 -> 142 [style=dashed label="simple-template-id"]
  1308 -> 116 [style=dashed label="simple-type-specifier"]
  1308 -> 216 [style=dashed label="template-name"]
  1308 -> 124 [style=dashed label="type-constraint"]
  1308 -> 1627 [style=dashed label="type-id"]
  1308 -> 125 [style=dashed label="type-name"]
  1308 -> 217 [style=dashed label="type-specifier"]
  1308 -> 452 [style=dashed label="type-specifier-seq"]
  1308 -> 127 [style=dashed label="typedef-name"]
  1308 -> 128 [style=dashed label="typename-specifier"]
  1309 [label="State 1309\n\l675 new-expression: \"new\" new-placement new-type-id •\l679               | \"new\" new-placement new-type-id • new-initializer\l"]
  1309 -> 1310 [style=solid label="'('"]
  1309 -> 939 [style=solid label="'{'"]
  1309 -> 1311 [style=dashed label="braced-init-list"]
  1309 -> 1628 [style=dashed label="new-initializer"]
  1309 -> "1309R675d" [label="['{']", style=solid]
 "1309R675d" [label="R675", fillcolor=5, shape=diamond, style=filled]
  1309 -> "1309R675" [style=solid]
 "1309R675" [label="R675", fillcolor=3, shape=diamond, style=filled]
  1310 [label="State 1310\n\l688 new-initializer: '(' • ')'\l689                | '(' • expression-list ')'\l"]
  1310 -> 1 [style=solid label="IDENTIFIER"]
  1310 -> 361 [style=solid label="'+'"]
  1310 -> 362 [style=solid label="'-'"]
  1310 -> 363 [style=solid label="'('"]
  1310 -> 1629 [style=solid label="')'"]
  1310 -> 364 [style=solid label="'&'"]
  1310 -> 365 [style=solid label="\"::\""]
  1310 -> 366 [style=solid label="'['"]
  1310 -> 367 [style=solid label="\"co_await\""]
  1310 -> 939 [style=solid label="'{'"]
  1310 -> 368 [style=solid label="'0'"]
  1310 -> 369 [style=solid label="'1'"]
  1310 -> 370 [style=solid label="\"0b\""]
  1310 -> 371 [style=solid label="\"0B\""]
  1310 -> 372 [style=solid label="'\\''"]
  1310 -> 373 [style=solid label="\"false\""]
  1310 -> 374 [style=solid label="\"true\""]
  1310 -> 375 [style=solid label="\"noexcept\""]
  1310 -> 17 [style=solid label="\"operator\""]
  1310 -> 26 [style=solid label="\"decltype\""]
  1310 -> 376 [style=solid label="\"delete\""]
  1310 -> 377 [style=solid label="'.'"]
  1310 -> 378 [style=solid label="'2'"]
  1310 -> 379 [style=solid label="'3'"]
  1310 -> 380 [style=solid label="'4'"]
  1310 -> 381 [style=solid label="'5'"]
  1310 -> 382 [style=solid label="'6'"]
  1310 -> 383 [style=solid label="'7'"]
  1310 -> 384 [style=solid label="'8'"]
  1310 -> 385 [style=solid label="'9'"]
  1310 -> 185 [style=solid label="\"u8\""]
  1310 -> 186 [style=solid label="'u'"]
  1310 -> 187 [style=solid label="'U'"]
  1310 -> 188 [style=solid label="'L'"]
  1310 -> 386 [style=solid label="'*'"]
  1310 -> 203 [style=solid label="'\"'"]
  1310 -> 387 [style=solid label="\"0x\""]
  1310 -> 388 [style=solid label="\"0X\""]
  1310 -> 389 [style=solid label="\"requires\""]
  1310 -> 390 [style=solid label="\"new\""]
  1310 -> 391 [style=solid label="'~'"]
  1310 -> 392 [style=solid label="'!'"]
  1310 -> 393 [style=solid label="\"++\""]
  1310 -> 394 [style=solid label="\"--\""]
  1310 -> 395 [style=solid label="\"this\""]
  1310 -> 37 [style=solid label="\"auto\""]
  1310 -> 396 [style=solid label="\"nullptr\""]
  1310 -> 397 [style=solid label="\"dynamic_cast\""]
  1310 -> 398 [style=solid label="\"static_cast\""]
  1310 -> 399 [style=solid label="\"reinterpret_cast\""]
  1310 -> 400 [style=solid label="\"const_cast\""]
  1310 -> 401 [style=solid label="\"typeid\""]
  1310 -> 38 [style=solid label="\"char\""]
  1310 -> 39 [style=solid label="\"char8_t\""]
  1310 -> 40 [style=solid label="\"char16_t\""]
  1310 -> 41 [style=solid label="\"char32_t\""]
  1310 -> 42 [style=solid label="\"wchar_t\""]
  1310 -> 43 [style=solid label="\"bool\""]
  1310 -> 44 [style=solid label="\"short\""]
  1310 -> 45 [style=solid label="\"int\""]
  1310 -> 46 [style=solid label="\"long\""]
  1310 -> 47 [style=solid label="\"signed\""]
  1310 -> 48 [style=solid label="\"unsigned\""]
  1310 -> 49 [style=solid label="\"float\""]
  1310 -> 50 [style=solid label="\"double\""]
  1310 -> 51 [style=solid label="\"void\""]
  1310 -> 209 [style=solid label="'R'"]
  1310 -> 528 [style=solid label="\"throw\""]
  1310 -> 56 [style=solid label="\"typename\""]
  1310 -> 402 [style=solid label="\"sizeof\""]
  1310 -> 403 [style=solid label="\"alignof\""]
  1310 -> 529 [style=solid label="\"co_yield\""]
  1310 -> 404 [style=dashed label="additive-expression"]
  1310 -> 405 [style=dashed label="and-expression"]
  1310 -> 1141 [style=dashed label="assignment-expression"]
  1310 -> 406 [style=dashed label="await-expression"]
  1310 -> 407 [style=dashed label="binary-literal"]
  1310 -> 408 [style=dashed label="boolean-literal"]
  1310 -> 1142 [style=dashed label="braced-init-list"]
  1310 -> 409 [style=dashed label="cast-expression"]
  1310 -> 410 [style=dashed label="character-literal"]
  1310 -> 66 [style=dashed label="class-name"]
  1310 -> 411 [style=dashed label="compare-expression"]
  1310 -> 68 [style=dashed label="concept-name"]
  1310 -> 531 [style=dashed label="conditional-expression"]
  1310 -> 69 [style=dashed label="conversion-function-id"]
  1310 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1310 -> 415 [style=dashed label="decimal-literal"]
  1310 -> 77 [style=dashed label="decltype-specifier"]
  1310 -> 416 [style=dashed label="delete-expression"]
  1310 -> 417 [style=dashed label="digit"]
  1310 -> 418 [style=dashed label="digit-sequence"]
  1310 -> 419 [style=dashed label="encoding-prefix"]
  1310 -> 85 [style=dashed label="enum-name"]
  1310 -> 420 [style=dashed label="equality-expression"]
  1310 -> 421 [style=dashed label="exclusive-or-expression"]
  1310 -> 1630 [style=dashed label="expression-list"]
  1310 -> 422 [style=dashed label="floating-point-literal"]
  1310 -> 423 [style=dashed label="fold-expression"]
  1310 -> 424 [style=dashed label="fractional-constant"]
  1310 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1310 -> 426 [style=dashed label="hexadecimal-literal"]
  1310 -> 427 [style=dashed label="hexadecimal-prefix"]
  1310 -> 428 [style=dashed label="id-expression"]
  1310 -> 429 [style=dashed label="inclusive-or-expression"]
  1310 -> 1145 [style=dashed label="initializer-clause"]
  1310 -> 1146 [style=dashed label="initializer-list"]
  1310 -> 430 [style=dashed label="integer-literal"]
  1310 -> 431 [style=dashed label="lambda-expression"]
  1310 -> 432 [style=dashed label="lambda-introducer"]
  1310 -> 433 [style=dashed label="literal"]
  1310 -> 96 [style=dashed label="literal-operator-id"]
  1310 -> 434 [style=dashed label="logical-and-expression"]
  1310 -> 533 [style=dashed label="logical-or-expression"]
  1310 -> 436 [style=dashed label="multiplicative-expression"]
  1310 -> 100 [style=dashed label="namespace-alias"]
  1310 -> 103 [style=dashed label="namespace-name"]
  1310 -> 437 [style=dashed label="nested-name-specifier"]
  1310 -> 438 [style=dashed label="new-expression"]
  1310 -> 439 [style=dashed label="noexcept-expression"]
  1310 -> 440 [style=dashed label="nonzero-digit"]
  1310 -> 441 [style=dashed label="octal-literal"]
  1310 -> 109 [style=dashed label="operator-function-id"]
  1310 -> 110 [style=dashed label="placeholder-type-specifier"]
  1310 -> 442 [style=dashed label="pm-expression"]
  1310 -> 443 [style=dashed label="pointer-literal"]
  1310 -> 444 [style=dashed label="postfix-expression"]
  1310 -> 445 [style=dashed label="primary-expression"]
  1310 -> 113 [style=dashed label="qualified-id"]
  1310 -> 446 [style=dashed label="relational-expression"]
  1310 -> 447 [style=dashed label="requires-expression"]
  1310 -> 448 [style=dashed label="shift-expression"]
  1310 -> 115 [style=dashed label="simple-template-id"]
  1310 -> 534 [style=dashed label="simple-type-specifier"]
  1310 -> 450 [style=dashed label="string-literal"]
  1310 -> 121 [style=dashed label="template-id"]
  1310 -> 216 [style=dashed label="template-name"]
  1310 -> 535 [style=dashed label="throw-expression"]
  1310 -> 124 [style=dashed label="type-constraint"]
  1310 -> 125 [style=dashed label="type-name"]
  1310 -> 127 [style=dashed label="typedef-name"]
  1310 -> 536 [style=dashed label="typename-specifier"]
  1310 -> 454 [style=dashed label="unary-expression"]
  1310 -> 455 [style=dashed label="unary-operator"]
  1310 -> 130 [style=dashed label="unqualified-id"]
  1310 -> 456 [style=dashed label="user-defined-character-literal"]
  1310 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1310 -> 458 [style=dashed label="user-defined-integer-literal"]
  1310 -> 459 [style=dashed label="user-defined-literal"]
  1310 -> 460 [style=dashed label="user-defined-string-literal"]
  1310 -> 537 [style=dashed label="yield-expression"]
  1311 [label="State 1311\n\l690 new-initializer: braced-init-list •\l"]
  1311 -> "1311R690" [style=solid]
 "1311R690" [label="R690", fillcolor=3, shape=diamond, style=filled]
  1312 [label="State 1312\n\l677 new-expression: \"new\" new-type-id new-initializer •\l"]
  1312 -> "1312R677" [style=solid]
 "1312R677" [label="R677", fillcolor=3, shape=diamond, style=filled]
  1313 [label="State 1313\n\l733 noptr-new-declarator: '[' • ']'\l734                     | '[' • expression ']'\l735                     | '[' • ']' attribute-specifier-seq\l736                     | '[' • expression ']' attribute-specifier-seq\l"]
  1313 -> 1 [style=solid label="IDENTIFIER"]
  1313 -> 361 [style=solid label="'+'"]
  1313 -> 362 [style=solid label="'-'"]
  1313 -> 363 [style=solid label="'('"]
  1313 -> 364 [style=solid label="'&'"]
  1313 -> 365 [style=solid label="\"::\""]
  1313 -> 366 [style=solid label="'['"]
  1313 -> 1631 [style=solid label="']'"]
  1313 -> 367 [style=solid label="\"co_await\""]
  1313 -> 368 [style=solid label="'0'"]
  1313 -> 369 [style=solid label="'1'"]
  1313 -> 370 [style=solid label="\"0b\""]
  1313 -> 371 [style=solid label="\"0B\""]
  1313 -> 372 [style=solid label="'\\''"]
  1313 -> 373 [style=solid label="\"false\""]
  1313 -> 374 [style=solid label="\"true\""]
  1313 -> 375 [style=solid label="\"noexcept\""]
  1313 -> 17 [style=solid label="\"operator\""]
  1313 -> 26 [style=solid label="\"decltype\""]
  1313 -> 376 [style=solid label="\"delete\""]
  1313 -> 377 [style=solid label="'.'"]
  1313 -> 378 [style=solid label="'2'"]
  1313 -> 379 [style=solid label="'3'"]
  1313 -> 380 [style=solid label="'4'"]
  1313 -> 381 [style=solid label="'5'"]
  1313 -> 382 [style=solid label="'6'"]
  1313 -> 383 [style=solid label="'7'"]
  1313 -> 384 [style=solid label="'8'"]
  1313 -> 385 [style=solid label="'9'"]
  1313 -> 185 [style=solid label="\"u8\""]
  1313 -> 186 [style=solid label="'u'"]
  1313 -> 187 [style=solid label="'U'"]
  1313 -> 188 [style=solid label="'L'"]
  1313 -> 386 [style=solid label="'*'"]
  1313 -> 203 [style=solid label="'\"'"]
  1313 -> 387 [style=solid label="\"0x\""]
  1313 -> 388 [style=solid label="\"0X\""]
  1313 -> 389 [style=solid label="\"requires\""]
  1313 -> 390 [style=solid label="\"new\""]
  1313 -> 391 [style=solid label="'~'"]
  1313 -> 392 [style=solid label="'!'"]
  1313 -> 393 [style=solid label="\"++\""]
  1313 -> 394 [style=solid label="\"--\""]
  1313 -> 395 [style=solid label="\"this\""]
  1313 -> 37 [style=solid label="\"auto\""]
  1313 -> 396 [style=solid label="\"nullptr\""]
  1313 -> 397 [style=solid label="\"dynamic_cast\""]
  1313 -> 398 [style=solid label="\"static_cast\""]
  1313 -> 399 [style=solid label="\"reinterpret_cast\""]
  1313 -> 400 [style=solid label="\"const_cast\""]
  1313 -> 401 [style=solid label="\"typeid\""]
  1313 -> 38 [style=solid label="\"char\""]
  1313 -> 39 [style=solid label="\"char8_t\""]
  1313 -> 40 [style=solid label="\"char16_t\""]
  1313 -> 41 [style=solid label="\"char32_t\""]
  1313 -> 42 [style=solid label="\"wchar_t\""]
  1313 -> 43 [style=solid label="\"bool\""]
  1313 -> 44 [style=solid label="\"short\""]
  1313 -> 45 [style=solid label="\"int\""]
  1313 -> 46 [style=solid label="\"long\""]
  1313 -> 47 [style=solid label="\"signed\""]
  1313 -> 48 [style=solid label="\"unsigned\""]
  1313 -> 49 [style=solid label="\"float\""]
  1313 -> 50 [style=solid label="\"double\""]
  1313 -> 51 [style=solid label="\"void\""]
  1313 -> 209 [style=solid label="'R'"]
  1313 -> 528 [style=solid label="\"throw\""]
  1313 -> 56 [style=solid label="\"typename\""]
  1313 -> 402 [style=solid label="\"sizeof\""]
  1313 -> 403 [style=solid label="\"alignof\""]
  1313 -> 529 [style=solid label="\"co_yield\""]
  1313 -> 404 [style=dashed label="additive-expression"]
  1313 -> 405 [style=dashed label="and-expression"]
  1313 -> 530 [style=dashed label="assignment-expression"]
  1313 -> 406 [style=dashed label="await-expression"]
  1313 -> 407 [style=dashed label="binary-literal"]
  1313 -> 408 [style=dashed label="boolean-literal"]
  1313 -> 409 [style=dashed label="cast-expression"]
  1313 -> 410 [style=dashed label="character-literal"]
  1313 -> 66 [style=dashed label="class-name"]
  1313 -> 411 [style=dashed label="compare-expression"]
  1313 -> 68 [style=dashed label="concept-name"]
  1313 -> 531 [style=dashed label="conditional-expression"]
  1313 -> 69 [style=dashed label="conversion-function-id"]
  1313 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1313 -> 415 [style=dashed label="decimal-literal"]
  1313 -> 77 [style=dashed label="decltype-specifier"]
  1313 -> 416 [style=dashed label="delete-expression"]
  1313 -> 417 [style=dashed label="digit"]
  1313 -> 418 [style=dashed label="digit-sequence"]
  1313 -> 419 [style=dashed label="encoding-prefix"]
  1313 -> 85 [style=dashed label="enum-name"]
  1313 -> 420 [style=dashed label="equality-expression"]
  1313 -> 421 [style=dashed label="exclusive-or-expression"]
  1313 -> 1632 [style=dashed label="expression"]
  1313 -> 422 [style=dashed label="floating-point-literal"]
  1313 -> 423 [style=dashed label="fold-expression"]
  1313 -> 424 [style=dashed label="fractional-constant"]
  1313 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1313 -> 426 [style=dashed label="hexadecimal-literal"]
  1313 -> 427 [style=dashed label="hexadecimal-prefix"]
  1313 -> 428 [style=dashed label="id-expression"]
  1313 -> 429 [style=dashed label="inclusive-or-expression"]
  1313 -> 430 [style=dashed label="integer-literal"]
  1313 -> 431 [style=dashed label="lambda-expression"]
  1313 -> 432 [style=dashed label="lambda-introducer"]
  1313 -> 433 [style=dashed label="literal"]
  1313 -> 96 [style=dashed label="literal-operator-id"]
  1313 -> 434 [style=dashed label="logical-and-expression"]
  1313 -> 533 [style=dashed label="logical-or-expression"]
  1313 -> 436 [style=dashed label="multiplicative-expression"]
  1313 -> 100 [style=dashed label="namespace-alias"]
  1313 -> 103 [style=dashed label="namespace-name"]
  1313 -> 437 [style=dashed label="nested-name-specifier"]
  1313 -> 438 [style=dashed label="new-expression"]
  1313 -> 439 [style=dashed label="noexcept-expression"]
  1313 -> 440 [style=dashed label="nonzero-digit"]
  1313 -> 441 [style=dashed label="octal-literal"]
  1313 -> 109 [style=dashed label="operator-function-id"]
  1313 -> 110 [style=dashed label="placeholder-type-specifier"]
  1313 -> 442 [style=dashed label="pm-expression"]
  1313 -> 443 [style=dashed label="pointer-literal"]
  1313 -> 444 [style=dashed label="postfix-expression"]
  1313 -> 445 [style=dashed label="primary-expression"]
  1313 -> 113 [style=dashed label="qualified-id"]
  1313 -> 446 [style=dashed label="relational-expression"]
  1313 -> 447 [style=dashed label="requires-expression"]
  1313 -> 448 [style=dashed label="shift-expression"]
  1313 -> 115 [style=dashed label="simple-template-id"]
  1313 -> 534 [style=dashed label="simple-type-specifier"]
  1313 -> 450 [style=dashed label="string-literal"]
  1313 -> 121 [style=dashed label="template-id"]
  1313 -> 216 [style=dashed label="template-name"]
  1313 -> 535 [style=dashed label="throw-expression"]
  1313 -> 124 [style=dashed label="type-constraint"]
  1313 -> 125 [style=dashed label="type-name"]
  1313 -> 127 [style=dashed label="typedef-name"]
  1313 -> 536 [style=dashed label="typename-specifier"]
  1313 -> 454 [style=dashed label="unary-expression"]
  1313 -> 455 [style=dashed label="unary-operator"]
  1313 -> 130 [style=dashed label="unqualified-id"]
  1313 -> 456 [style=dashed label="user-defined-character-literal"]
  1313 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1313 -> 458 [style=dashed label="user-defined-integer-literal"]
  1313 -> 459 [style=dashed label="user-defined-literal"]
  1313 -> 460 [style=dashed label="user-defined-string-literal"]
  1313 -> 537 [style=dashed label="yield-expression"]
  1314 [label="State 1314\n\l693 new-type-id: type-specifier-seq new-declarator •\l"]
  1314 -> "1314R693" [style=solid]
 "1314R693" [label="R693", fillcolor=3, shape=diamond, style=filled]
  1315 [label="State 1315\n\l671 new-declarator: noptr-new-declarator •\l737 noptr-new-declarator: noptr-new-declarator • '[' constant-expression ']'\l738                     | noptr-new-declarator • '[' constant-expression ']' attribute-specifier-seq\l"]
  1315 -> 1633 [style=solid label="'['"]
  1315 -> "1315R671" [style=solid]
 "1315R671" [label="R671", fillcolor=3, shape=diamond, style=filled]
  1316 [label="State 1316\n\l669 new-declarator: ptr-operator •\l670               | ptr-operator • new-declarator\l"]
  1316 -> 258 [style=solid label="IDENTIFIER"]
  1316 -> 7 [style=solid label="'&'"]
  1316 -> 9 [style=solid label="\"::\""]
  1316 -> 1313 [style=solid label="'['"]
  1316 -> 16 [style=solid label="\"&&\""]
  1316 -> 135 [style=solid label="\"decltype\""]
  1316 -> 32 [style=solid label="'*'"]
  1316 -> 66 [style=dashed label="class-name"]
  1316 -> 139 [style=dashed label="decltype-specifier"]
  1316 -> 85 [style=dashed label="enum-name"]
  1316 -> 100 [style=dashed label="namespace-alias"]
  1316 -> 103 [style=dashed label="namespace-name"]
  1316 -> 522 [style=dashed label="nested-name-specifier"]
  1316 -> 1634 [style=dashed label="new-declarator"]
  1316 -> 1315 [style=dashed label="noptr-new-declarator"]
  1316 -> 1316 [style=dashed label="ptr-operator"]
  1316 -> 142 [style=dashed label="simple-template-id"]
  1316 -> 143 [style=dashed label="template-name"]
  1316 -> 144 [style=dashed label="type-name"]
  1316 -> 127 [style=dashed label="typedef-name"]
  1316 -> "1316R669d" [label="['&', \"&&\", '*']", style=solid]
 "1316R669d" [label="R669", fillcolor=5, shape=diamond, style=filled]
  1316 -> "1316R669" [style=solid]
 "1316R669" [label="R669", fillcolor=3, shape=diamond, style=filled]
  1317 [label="State 1317\n\l877 postfix-expression: \"dynamic_cast\" '<' type-id • '>' '(' expression ')'\l"]
  1317 -> 1635 [style=solid label="'>'"]
  1318 [label="State 1318\n\l878 postfix-expression: \"static_cast\" '<' type-id • '>' '(' expression ')'\l"]
  1318 -> 1636 [style=solid label="'>'"]
  1319 [label="State 1319\n\l879 postfix-expression: \"reinterpret_cast\" '<' type-id • '>' '(' expression ')'\l"]
  1319 -> 1637 [style=solid label="'>'"]
  1320 [label="State 1320\n\l880 postfix-expression: \"const_cast\" '<' type-id • '>' '(' expression ')'\l"]
  1320 -> 1638 [style=solid label="'>'"]
  1321 [label="State 1321\n\l338 expression: expression • ',' assignment-expression\l881 postfix-expression: \"typeid\" '(' expression • ')'\l"]
  1321 -> 1639 [style=solid label="')'"]
  1321 -> 1037 [style=solid label="','"]
  1322 [label="State 1322\n\l882 postfix-expression: \"typeid\" '(' type-id • ')'\l"]
  1322 -> 1640 [style=solid label="')'"]
  1323 [label="State 1323\n\l1136 unary-expression: \"sizeof\" '(' type-id • ')'\l"]
  1323 -> 1641 [style=solid label="')'"]
  1324 [label="State 1324\n\l1137 unary-expression: \"sizeof\" \"...\" '(' • IDENTIFIER ')'\l"]
  1324 -> 1642 [style=solid label="IDENTIFIER"]
  1325 [label="State 1325\n\l1138 unary-expression: \"alignof\" '(' type-id • ')'\l"]
  1325 -> 1643 [style=solid label="')'"]
  1326 [label="State 1326\n\l 11 additive-expression: additive-expression '+' multiplicative-expression •\l644 multiplicative-expression: multiplicative-expression • '*' pm-expression\l645                          | multiplicative-expression • '/' pm-expression\l646                          | multiplicative-expression • '%' pm-expression\l"]
  1326 -> 909 [style=solid label="'*'"]
  1326 -> 910 [style=solid label="'/'"]
  1326 -> 911 [style=solid label="'%'"]
  1326 -> "1326R11" [style=solid]
 "1326R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  1327 [label="State 1327\n\l 12 additive-expression: additive-expression '-' multiplicative-expression •\l644 multiplicative-expression: multiplicative-expression • '*' pm-expression\l645                          | multiplicative-expression • '/' pm-expression\l646                          | multiplicative-expression • '%' pm-expression\l"]
  1327 -> 909 [style=solid label="'*'"]
  1327 -> 910 [style=solid label="'/'"]
  1327 -> 911 [style=solid label="'%'"]
  1327 -> "1327R12" [style=solid]
 "1327R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  1328 [label="State 1328\n\l 20 and-expression: and-expression '&' equality-expression •\l308 equality-expression: equality-expression • \"==\" relational-expression\l309                    | equality-expression • \"!=\" relational-expression\l"]
  1328 -> 858 [style=solid label="\"==\""]
  1328 -> 859 [style=solid label="\"!=\""]
  1328 -> "1328R20" [style=solid]
 "1328R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  1329 [label="State 1329\n\l 94 binary-literal: binary-literal '\\'' binary-digit •\l"]
  1329 -> "1329R94" [style=solid]
 "1329R94" [label="R94", fillcolor=3, shape=diamond, style=filled]
  1330 [label="State 1330\n\l506 integer-suffix: long-long-suffix unsigned-suffix •\l"]
  1330 -> "1330R506" [style=solid]
 "1330R506" [label="R506", fillcolor=3, shape=diamond, style=filled]
  1331 [label="State 1331\n\l504 integer-suffix: long-suffix unsigned-suffix •\l"]
  1331 -> "1331R504" [style=solid]
 "1331R504" [label="R504", fillcolor=3, shape=diamond, style=filled]
  1332 [label="State 1332\n\l508 integer-suffix: size-suffix unsigned-suffix •\l"]
  1332 -> "1332R508" [style=solid]
 "1332R508" [label="R508", fillcolor=3, shape=diamond, style=filled]
  1333 [label="State 1333\n\l500 integer-suffix: unsigned-suffix long-long-suffix •\l"]
  1333 -> "1333R500" [style=solid]
 "1333R500" [label="R500", fillcolor=3, shape=diamond, style=filled]
  1334 [label="State 1334\n\l498 integer-suffix: unsigned-suffix long-suffix •\l"]
  1334 -> "1334R498" [style=solid]
 "1334R498" [label="R498", fillcolor=3, shape=diamond, style=filled]
  1335 [label="State 1335\n\l502 integer-suffix: unsigned-suffix size-suffix •\l"]
  1335 -> "1335R502" [style=solid]
 "1335R502" [label="R502", fillcolor=3, shape=diamond, style=filled]
  1336 [label="State 1336\n\l155 compare-expression: compare-expression \"<=>\" shift-expression •\l967 shift-expression: shift-expression • \"<<\" additive-expression\l968                 | shift-expression • \">>\" additive-expression\l"]
  1336 -> 936 [style=solid label="\"<<\""]
  1336 -> 937 [style=solid label="\">>\""]
  1336 -> "1336R155" [style=solid]
 "1336R155" [label="R155", fillcolor=3, shape=diamond, style=filled]
  1337 [label="State 1337\n\l 18 alignment-specifier: \"alignas\" '(' constant-expression \"...\" ')' •\l"]
  1337 -> "1337R18" [style=solid]
 "1337R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  1338 [label="State 1338\n\l200 decimal-literal: decimal-literal '\\'' digit •\l"]
  1338 -> "1338R200" [style=solid]
 "1338R200" [label="R200", fillcolor=3, shape=diamond, style=filled]
  1339 [label="State 1339\n\l264 digit-sequence: digit-sequence '\\'' digit •\l"]
  1339 -> "1339R264" [style=solid]
 "1339R264" [label="R264", fillcolor=3, shape=diamond, style=filled]
  1340 [label="State 1340\n\l263 digit-sequence: digit-sequence • digit\l264               | digit-sequence • '\\'' digit\l390 fractional-constant: digit-sequence '.' digit-sequence •\l"]
  1340 -> 793 [style=solid label="'0'"]
  1340 -> 794 [style=solid label="'1'"]
  1340 -> 851 [style=solid label="'\\''"]
  1340 -> 795 [style=solid label="'2'"]
  1340 -> 796 [style=solid label="'3'"]
  1340 -> 797 [style=solid label="'4'"]
  1340 -> 798 [style=solid label="'5'"]
  1340 -> 799 [style=solid label="'6'"]
  1340 -> 800 [style=solid label="'7'"]
  1340 -> 801 [style=solid label="'8'"]
  1340 -> 802 [style=solid label="'9'"]
  1340 -> 855 [style=dashed label="digit"]
  1340 -> "1340R390" [style=solid]
 "1340R390" [label="R390", fillcolor=3, shape=diamond, style=filled]
  1341 [label="State 1341\n\l969 sign: '+' •\l"]
  1341 -> "1341R969" [style=solid]
 "1341R969" [label="R969", fillcolor=3, shape=diamond, style=filled]
  1342 [label="State 1342\n\l970 sign: '-' •\l"]
  1342 -> "1342R970" [style=solid]
 "1342R970" [label="R970", fillcolor=3, shape=diamond, style=filled]
  1343 [label="State 1343\n\l263 digit-sequence: digit-sequence • digit\l264               | digit-sequence • '\\'' digit\l327 exponent-part: 'e' digit-sequence •\l"]
  1343 -> 793 [style=solid label="'0'"]
  1343 -> 794 [style=solid label="'1'"]
  1343 -> 851 [style=solid label="'\\''"]
  1343 -> 795 [style=solid label="'2'"]
  1343 -> 796 [style=solid label="'3'"]
  1343 -> 797 [style=solid label="'4'"]
  1343 -> 798 [style=solid label="'5'"]
  1343 -> 799 [style=solid label="'6'"]
  1343 -> 800 [style=solid label="'7'"]
  1343 -> 801 [style=solid label="'8'"]
  1343 -> 802 [style=solid label="'9'"]
  1343 -> 855 [style=dashed label="digit"]
  1343 -> "1343R327" [style=solid]
 "1343R327" [label="R327", fillcolor=3, shape=diamond, style=filled]
  1344 [label="State 1344\n\l328 exponent-part: 'e' sign • digit-sequence\l"]
  1344 -> 793 [style=solid label="'0'"]
  1344 -> 794 [style=solid label="'1'"]
  1344 -> 795 [style=solid label="'2'"]
  1344 -> 796 [style=solid label="'3'"]
  1344 -> 797 [style=solid label="'4'"]
  1344 -> 798 [style=solid label="'5'"]
  1344 -> 799 [style=solid label="'6'"]
  1344 -> 800 [style=solid label="'7'"]
  1344 -> 801 [style=solid label="'8'"]
  1344 -> 802 [style=solid label="'9'"]
  1344 -> 417 [style=dashed label="digit"]
  1344 -> 1644 [style=dashed label="digit-sequence"]
  1345 [label="State 1345\n\l263 digit-sequence: digit-sequence • digit\l264               | digit-sequence • '\\'' digit\l329 exponent-part: 'E' digit-sequence •\l"]
  1345 -> 793 [style=solid label="'0'"]
  1345 -> 794 [style=solid label="'1'"]
  1345 -> 851 [style=solid label="'\\''"]
  1345 -> 795 [style=solid label="'2'"]
  1345 -> 796 [style=solid label="'3'"]
  1345 -> 797 [style=solid label="'4'"]
  1345 -> 798 [style=solid label="'5'"]
  1345 -> 799 [style=solid label="'6'"]
  1345 -> 800 [style=solid label="'7'"]
  1345 -> 801 [style=solid label="'8'"]
  1345 -> 802 [style=solid label="'9'"]
  1345 -> 855 [style=dashed label="digit"]
  1345 -> "1345R329" [style=solid]
 "1345R329" [label="R329", fillcolor=3, shape=diamond, style=filled]
  1346 [label="State 1346\n\l330 exponent-part: 'E' sign • digit-sequence\l"]
  1346 -> 793 [style=solid label="'0'"]
  1346 -> 794 [style=solid label="'1'"]
  1346 -> 795 [style=solid label="'2'"]
  1346 -> 796 [style=solid label="'3'"]
  1346 -> 797 [style=solid label="'4'"]
  1346 -> 798 [style=solid label="'5'"]
  1346 -> 799 [style=solid label="'6'"]
  1346 -> 800 [style=solid label="'7'"]
  1346 -> 801 [style=solid label="'8'"]
  1346 -> 802 [style=solid label="'9'"]
  1346 -> 417 [style=dashed label="digit"]
  1346 -> 1645 [style=dashed label="digit-sequence"]
  1347 [label="State 1347\n\l197 decimal-floating-point-literal: digit-sequence exponent-part floating-point-suffix •\l"]
  1347 -> "1347R197" [style=solid]
 "1347R197" [label="R197", fillcolor=3, shape=diamond, style=filled]
  1348 [label="State 1348\n\l1166 user-defined-floating-point-literal: digit-sequence exponent-part ud-suffix •\l"]
  1348 -> "1348R1166" [style=solid]
 "1348R1166" [label="R1166", fillcolor=3, shape=diamond, style=filled]
  1349 [label="State 1349\n\l117 c-char-sequence: c-char-sequence • c-char\l126 character-literal: encoding-prefix '\\'' c-char-sequence • '\\''\l"]
  1349 -> 784 [style=solid label="EXCEPT_THE_APOSTROPHE_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER"]
  1349 -> 1646 [style=solid label="'\\''"]
  1349 -> 491 [style=solid label="'\\\\'"]
  1349 -> 493 [style=solid label="\"\\\\x\""]
  1349 -> 494 [style=solid label="\"\\\\u\""]
  1349 -> 495 [style=solid label="\"\\\\U\""]
  1349 -> 785 [style=dashed label="basic-c-char"]
  1349 -> 1291 [style=dashed label="c-char"]
  1349 -> 497 [style=dashed label="conditional-escape-sequence"]
  1349 -> 788 [style=dashed label="escape-sequence"]
  1349 -> 499 [style=dashed label="hexadecimal-escape-sequence"]
  1349 -> 500 [style=dashed label="numeric-escape-sequence"]
  1349 -> 501 [style=dashed label="octal-escape-sequence"]
  1349 -> 504 [style=dashed label="simple-escape-sequence"]
  1349 -> 789 [style=dashed label="universal-character-name"]
  1350 [label="State 1350\n\l308 equality-expression: equality-expression \"==\" relational-expression •\l931 relational-expression: relational-expression • '<' compare-expression\l932                      | relational-expression • '>' compare-expression\l933                      | relational-expression • \"<=\" compare-expression\l934                      | relational-expression • \">=\" compare-expression\l"]
  1350 -> 932 [style=solid label="'<'"]
  1350 -> 933 [style=solid label="'>'"]
  1350 -> 934 [style=solid label="\"<=\""]
  1350 -> 935 [style=solid label="\">=\""]
  1350 -> "1350R308d" [label="['>']", style=solid]
 "1350R308d" [label="R308", fillcolor=5, shape=diamond, style=filled]
  1350 -> "1350R308" [style=solid]
 "1350R308" [label="R308", fillcolor=3, shape=diamond, style=filled]
  1351 [label="State 1351\n\l309 equality-expression: equality-expression \"!=\" relational-expression •\l931 relational-expression: relational-expression • '<' compare-expression\l932                      | relational-expression • '>' compare-expression\l933                      | relational-expression • \"<=\" compare-expression\l934                      | relational-expression • \">=\" compare-expression\l"]
  1351 -> 932 [style=solid label="'<'"]
  1351 -> 933 [style=solid label="'>'"]
  1351 -> 934 [style=solid label="\"<=\""]
  1351 -> 935 [style=solid label="\">=\""]
  1351 -> "1351R309d" [label="['>']", style=solid]
 "1351R309d" [label="R309", fillcolor=5, shape=diamond, style=filled]
  1351 -> "1351R309" [style=solid]
 "1351R309" [label="R309", fillcolor=3, shape=diamond, style=filled]
  1352 [label="State 1352\n\l 20 and-expression: and-expression • '&' equality-expression\l321 exclusive-or-expression: exclusive-or-expression '^' and-expression •\l"]
  1352 -> 825 [style=solid label="'&'"]
  1352 -> "1352R321" [style=solid]
 "1352R321" [label="R321", fillcolor=3, shape=diamond, style=filled]
  1353 [label="State 1353\n\l195 decimal-floating-point-literal: fractional-constant exponent-part floating-point-suffix •\l"]
  1353 -> "1353R195" [style=solid]
 "1353R195" [label="R195", fillcolor=3, shape=diamond, style=filled]
  1354 [label="State 1354\n\l1165 user-defined-floating-point-literal: fractional-constant exponent-part ud-suffix •\l"]
  1354 -> "1354R1165" [style=solid]
 "1354R1165" [label="R1165", fillcolor=3, shape=diamond, style=filled]
  1355 [label="State 1355\n\l449 hexadecimal-digit-sequence: hexadecimal-digit-sequence • hexadecimal-digit\l450                           | hexadecimal-digit-sequence • '\\'' hexadecimal-digit\l458 hexadecimal-fractional-constant: '.' hexadecimal-digit-sequence •\l"]
  1355 -> 870 [style=solid label="'0'"]
  1355 -> 871 [style=solid label="'1'"]
  1355 -> 1358 [style=solid label="'\\''"]
  1355 -> 873 [style=solid label="'2'"]
  1355 -> 874 [style=solid label="'3'"]
  1355 -> 875 [style=solid label="'4'"]
  1355 -> 876 [style=solid label="'5'"]
  1355 -> 877 [style=solid label="'6'"]
  1355 -> 878 [style=solid label="'7'"]
  1355 -> 879 [style=solid label="'8'"]
  1355 -> 880 [style=solid label="'9'"]
  1355 -> 881 [style=solid label="'e'"]
  1355 -> 882 [style=solid label="'E'"]
  1355 -> 883 [style=solid label="'f'"]
  1355 -> 884 [style=solid label="'F'"]
  1355 -> 885 [style=solid label="'a'"]
  1355 -> 886 [style=solid label="'b'"]
  1355 -> 887 [style=solid label="'c'"]
  1355 -> 888 [style=solid label="'d'"]
  1355 -> 889 [style=solid label="'A'"]
  1355 -> 890 [style=solid label="'B'"]
  1355 -> 891 [style=solid label="'C'"]
  1355 -> 892 [style=solid label="'D'"]
  1355 -> 1361 [style=dashed label="hexadecimal-digit"]
  1355 -> "1355R458" [style=solid]
 "1355R458" [label="R458", fillcolor=3, shape=diamond, style=filled]
  1356 [label="State 1356\n\l 87 binary-exponent-part: 'p' • digit-sequence\l 88                     | 'p' • sign digit-sequence\l"]
  1356 -> 1341 [style=solid label="'+'"]
  1356 -> 1342 [style=solid label="'-'"]
  1356 -> 793 [style=solid label="'0'"]
  1356 -> 794 [style=solid label="'1'"]
  1356 -> 795 [style=solid label="'2'"]
  1356 -> 796 [style=solid label="'3'"]
  1356 -> 797 [style=solid label="'4'"]
  1356 -> 798 [style=solid label="'5'"]
  1356 -> 799 [style=solid label="'6'"]
  1356 -> 800 [style=solid label="'7'"]
  1356 -> 801 [style=solid label="'8'"]
  1356 -> 802 [style=solid label="'9'"]
  1356 -> 417 [style=dashed label="digit"]
  1356 -> 1647 [style=dashed label="digit-sequence"]
  1356 -> 1648 [style=dashed label="sign"]
  1357 [label="State 1357\n\l 89 binary-exponent-part: 'P' • digit-sequence\l 90                     | 'P' • sign digit-sequence\l"]
  1357 -> 1341 [style=solid label="'+'"]
  1357 -> 1342 [style=solid label="'-'"]
  1357 -> 793 [style=solid label="'0'"]
  1357 -> 794 [style=solid label="'1'"]
  1357 -> 795 [style=solid label="'2'"]
  1357 -> 796 [style=solid label="'3'"]
  1357 -> 797 [style=solid label="'4'"]
  1357 -> 798 [style=solid label="'5'"]
  1357 -> 799 [style=solid label="'6'"]
  1357 -> 800 [style=solid label="'7'"]
  1357 -> 801 [style=solid label="'8'"]
  1357 -> 802 [style=solid label="'9'"]
  1357 -> 417 [style=dashed label="digit"]
  1357 -> 1649 [style=dashed label="digit-sequence"]
  1357 -> 1650 [style=dashed label="sign"]
  1358 [label="State 1358\n\l450 hexadecimal-digit-sequence: hexadecimal-digit-sequence '\\'' • hexadecimal-digit\l"]
  1358 -> 870 [style=solid label="'0'"]
  1358 -> 871 [style=solid label="'1'"]
  1358 -> 873 [style=solid label="'2'"]
  1358 -> 874 [style=solid label="'3'"]
  1358 -> 875 [style=solid label="'4'"]
  1358 -> 876 [style=solid label="'5'"]
  1358 -> 877 [style=solid label="'6'"]
  1358 -> 878 [style=solid label="'7'"]
  1358 -> 879 [style=solid label="'8'"]
  1358 -> 880 [style=solid label="'9'"]
  1358 -> 881 [style=solid label="'e'"]
  1358 -> 882 [style=solid label="'E'"]
  1358 -> 883 [style=solid label="'f'"]
  1358 -> 884 [style=solid label="'F'"]
  1358 -> 885 [style=solid label="'a'"]
  1358 -> 886 [style=solid label="'b'"]
  1358 -> 887 [style=solid label="'c'"]
  1358 -> 888 [style=solid label="'d'"]
  1358 -> 889 [style=solid label="'A'"]
  1358 -> 890 [style=solid label="'B'"]
  1358 -> 891 [style=solid label="'C'"]
  1358 -> 892 [style=solid label="'D'"]
  1358 -> 1651 [style=dashed label="hexadecimal-digit"]
  1359 [label="State 1359\n\l457 hexadecimal-fractional-constant: hexadecimal-digit-sequence '.' • hexadecimal-digit-sequence\l459                                | hexadecimal-digit-sequence '.' •\l"]
  1359 -> 870 [style=solid label="'0'"]
  1359 -> 871 [style=solid label="'1'"]
  1359 -> 873 [style=solid label="'2'"]
  1359 -> 874 [style=solid label="'3'"]
  1359 -> 875 [style=solid label="'4'"]
  1359 -> 876 [style=solid label="'5'"]
  1359 -> 877 [style=solid label="'6'"]
  1359 -> 878 [style=solid label="'7'"]
  1359 -> 879 [style=solid label="'8'"]
  1359 -> 880 [style=solid label="'9'"]
  1359 -> 881 [style=solid label="'e'"]
  1359 -> 882 [style=solid label="'E'"]
  1359 -> 883 [style=solid label="'f'"]
  1359 -> 884 [style=solid label="'F'"]
  1359 -> 885 [style=solid label="'a'"]
  1359 -> 886 [style=solid label="'b'"]
  1359 -> 887 [style=solid label="'c'"]
  1359 -> 888 [style=solid label="'d'"]
  1359 -> 889 [style=solid label="'A'"]
  1359 -> 890 [style=solid label="'B'"]
  1359 -> 891 [style=solid label="'C'"]
  1359 -> 892 [style=solid label="'D'"]
  1359 -> 893 [style=dashed label="hexadecimal-digit"]
  1359 -> 1652 [style=dashed label="hexadecimal-digit-sequence"]
  1359 -> "1359R459" [style=solid]
 "1359R459" [label="R459", fillcolor=3, shape=diamond, style=filled]
  1360 [label="State 1360\n\l455 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part •\l456                                   | hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part • floating-point-suffix\l1168 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part • ud-suffix\l"]
  1360 -> 826 [style=solid label="IDENTIFIER"]
  1360 -> 861 [style=solid label="'L'"]
  1360 -> 862 [style=solid label="'f'"]
  1360 -> 863 [style=solid label="'l'"]
  1360 -> 864 [style=solid label="'F'"]
  1360 -> 1653 [style=dashed label="floating-point-suffix"]
  1360 -> 1654 [style=dashed label="ud-suffix"]
  1360 -> "1360R455d" [label="[IDENTIFIER]", style=solid]
 "1360R455d" [label="R455", fillcolor=5, shape=diamond, style=filled]
  1360 -> "1360R455" [style=solid]
 "1360R455" [label="R455", fillcolor=3, shape=diamond, style=filled]
  1361 [label="State 1361\n\l449 hexadecimal-digit-sequence: hexadecimal-digit-sequence hexadecimal-digit •\l"]
  1361 -> "1361R449" [style=solid]
 "1361R449" [label="R449", fillcolor=3, shape=diamond, style=filled]
  1362 [label="State 1362\n\l453 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part •\l454                                   | hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part • floating-point-suffix\l1167 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part • ud-suffix\l"]
  1362 -> 826 [style=solid label="IDENTIFIER"]
  1362 -> 861 [style=solid label="'L'"]
  1362 -> 862 [style=solid label="'f'"]
  1362 -> 863 [style=solid label="'l'"]
  1362 -> 864 [style=solid label="'F'"]
  1362 -> 1655 [style=dashed label="floating-point-suffix"]
  1362 -> 1656 [style=dashed label="ud-suffix"]
  1362 -> "1362R453d" [label="[IDENTIFIER]", style=solid]
 "1362R453d" [label="R453", fillcolor=5, shape=diamond, style=filled]
  1362 -> "1362R453" [style=solid]
 "1362R453" [label="R453", fillcolor=3, shape=diamond, style=filled]
  1363 [label="State 1363\n\l321 exclusive-or-expression: exclusive-or-expression • '^' and-expression\l468 inclusive-or-expression: inclusive-or-expression '|' exclusive-or-expression •\l"]
  1363 -> 860 [style=solid label="'^'"]
  1363 -> "1363R468" [style=solid]
 "1363R468" [label="R468", fillcolor=3, shape=diamond, style=filled]
  1364 [label="State 1364\n\l533 lambda-declarator: '(' parameter-declaration-clause • ')' lambda-specifiers\l534                  | '(' parameter-declaration-clause • ')' lambda-specifiers requires-clause\l"]
  1364 -> 1657 [style=solid label="')'"]
  1365 [label="State 1365\n\l697 noexcept-specifier: \"noexcept\" '(' • constant-expression ')'\l"]
  1365 -> 1 [style=solid label="IDENTIFIER"]
  1365 -> 361 [style=solid label="'+'"]
  1365 -> 362 [style=solid label="'-'"]
  1365 -> 363 [style=solid label="'('"]
  1365 -> 364 [style=solid label="'&'"]
  1365 -> 365 [style=solid label="\"::\""]
  1365 -> 366 [style=solid label="'['"]
  1365 -> 367 [style=solid label="\"co_await\""]
  1365 -> 368 [style=solid label="'0'"]
  1365 -> 369 [style=solid label="'1'"]
  1365 -> 370 [style=solid label="\"0b\""]
  1365 -> 371 [style=solid label="\"0B\""]
  1365 -> 372 [style=solid label="'\\''"]
  1365 -> 373 [style=solid label="\"false\""]
  1365 -> 374 [style=solid label="\"true\""]
  1365 -> 375 [style=solid label="\"noexcept\""]
  1365 -> 17 [style=solid label="\"operator\""]
  1365 -> 26 [style=solid label="\"decltype\""]
  1365 -> 376 [style=solid label="\"delete\""]
  1365 -> 377 [style=solid label="'.'"]
  1365 -> 378 [style=solid label="'2'"]
  1365 -> 379 [style=solid label="'3'"]
  1365 -> 380 [style=solid label="'4'"]
  1365 -> 381 [style=solid label="'5'"]
  1365 -> 382 [style=solid label="'6'"]
  1365 -> 383 [style=solid label="'7'"]
  1365 -> 384 [style=solid label="'8'"]
  1365 -> 385 [style=solid label="'9'"]
  1365 -> 185 [style=solid label="\"u8\""]
  1365 -> 186 [style=solid label="'u'"]
  1365 -> 187 [style=solid label="'U'"]
  1365 -> 188 [style=solid label="'L'"]
  1365 -> 386 [style=solid label="'*'"]
  1365 -> 203 [style=solid label="'\"'"]
  1365 -> 387 [style=solid label="\"0x\""]
  1365 -> 388 [style=solid label="\"0X\""]
  1365 -> 389 [style=solid label="\"requires\""]
  1365 -> 390 [style=solid label="\"new\""]
  1365 -> 391 [style=solid label="'~'"]
  1365 -> 392 [style=solid label="'!'"]
  1365 -> 393 [style=solid label="\"++\""]
  1365 -> 394 [style=solid label="\"--\""]
  1365 -> 395 [style=solid label="\"this\""]
  1365 -> 37 [style=solid label="\"auto\""]
  1365 -> 396 [style=solid label="\"nullptr\""]
  1365 -> 397 [style=solid label="\"dynamic_cast\""]
  1365 -> 398 [style=solid label="\"static_cast\""]
  1365 -> 399 [style=solid label="\"reinterpret_cast\""]
  1365 -> 400 [style=solid label="\"const_cast\""]
  1365 -> 401 [style=solid label="\"typeid\""]
  1365 -> 38 [style=solid label="\"char\""]
  1365 -> 39 [style=solid label="\"char8_t\""]
  1365 -> 40 [style=solid label="\"char16_t\""]
  1365 -> 41 [style=solid label="\"char32_t\""]
  1365 -> 42 [style=solid label="\"wchar_t\""]
  1365 -> 43 [style=solid label="\"bool\""]
  1365 -> 44 [style=solid label="\"short\""]
  1365 -> 45 [style=solid label="\"int\""]
  1365 -> 46 [style=solid label="\"long\""]
  1365 -> 47 [style=solid label="\"signed\""]
  1365 -> 48 [style=solid label="\"unsigned\""]
  1365 -> 49 [style=solid label="\"float\""]
  1365 -> 50 [style=solid label="\"double\""]
  1365 -> 51 [style=solid label="\"void\""]
  1365 -> 209 [style=solid label="'R'"]
  1365 -> 56 [style=solid label="\"typename\""]
  1365 -> 402 [style=solid label="\"sizeof\""]
  1365 -> 403 [style=solid label="\"alignof\""]
  1365 -> 404 [style=dashed label="additive-expression"]
  1365 -> 405 [style=dashed label="and-expression"]
  1365 -> 406 [style=dashed label="await-expression"]
  1365 -> 407 [style=dashed label="binary-literal"]
  1365 -> 408 [style=dashed label="boolean-literal"]
  1365 -> 409 [style=dashed label="cast-expression"]
  1365 -> 410 [style=dashed label="character-literal"]
  1365 -> 66 [style=dashed label="class-name"]
  1365 -> 411 [style=dashed label="compare-expression"]
  1365 -> 68 [style=dashed label="concept-name"]
  1365 -> 412 [style=dashed label="conditional-expression"]
  1365 -> 1658 [style=dashed label="constant-expression"]
  1365 -> 69 [style=dashed label="conversion-function-id"]
  1365 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1365 -> 415 [style=dashed label="decimal-literal"]
  1365 -> 77 [style=dashed label="decltype-specifier"]
  1365 -> 416 [style=dashed label="delete-expression"]
  1365 -> 417 [style=dashed label="digit"]
  1365 -> 418 [style=dashed label="digit-sequence"]
  1365 -> 419 [style=dashed label="encoding-prefix"]
  1365 -> 85 [style=dashed label="enum-name"]
  1365 -> 420 [style=dashed label="equality-expression"]
  1365 -> 421 [style=dashed label="exclusive-or-expression"]
  1365 -> 422 [style=dashed label="floating-point-literal"]
  1365 -> 423 [style=dashed label="fold-expression"]
  1365 -> 424 [style=dashed label="fractional-constant"]
  1365 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1365 -> 426 [style=dashed label="hexadecimal-literal"]
  1365 -> 427 [style=dashed label="hexadecimal-prefix"]
  1365 -> 428 [style=dashed label="id-expression"]
  1365 -> 429 [style=dashed label="inclusive-or-expression"]
  1365 -> 430 [style=dashed label="integer-literal"]
  1365 -> 431 [style=dashed label="lambda-expression"]
  1365 -> 432 [style=dashed label="lambda-introducer"]
  1365 -> 433 [style=dashed label="literal"]
  1365 -> 96 [style=dashed label="literal-operator-id"]
  1365 -> 434 [style=dashed label="logical-and-expression"]
  1365 -> 435 [style=dashed label="logical-or-expression"]
  1365 -> 436 [style=dashed label="multiplicative-expression"]
  1365 -> 100 [style=dashed label="namespace-alias"]
  1365 -> 103 [style=dashed label="namespace-name"]
  1365 -> 437 [style=dashed label="nested-name-specifier"]
  1365 -> 438 [style=dashed label="new-expression"]
  1365 -> 439 [style=dashed label="noexcept-expression"]
  1365 -> 440 [style=dashed label="nonzero-digit"]
  1365 -> 441 [style=dashed label="octal-literal"]
  1365 -> 109 [style=dashed label="operator-function-id"]
  1365 -> 110 [style=dashed label="placeholder-type-specifier"]
  1365 -> 442 [style=dashed label="pm-expression"]
  1365 -> 443 [style=dashed label="pointer-literal"]
  1365 -> 444 [style=dashed label="postfix-expression"]
  1365 -> 445 [style=dashed label="primary-expression"]
  1365 -> 113 [style=dashed label="qualified-id"]
  1365 -> 446 [style=dashed label="relational-expression"]
  1365 -> 447 [style=dashed label="requires-expression"]
  1365 -> 448 [style=dashed label="shift-expression"]
  1365 -> 115 [style=dashed label="simple-template-id"]
  1365 -> 534 [style=dashed label="simple-type-specifier"]
  1365 -> 450 [style=dashed label="string-literal"]
  1365 -> 121 [style=dashed label="template-id"]
  1365 -> 216 [style=dashed label="template-name"]
  1365 -> 124 [style=dashed label="type-constraint"]
  1365 -> 125 [style=dashed label="type-name"]
  1365 -> 127 [style=dashed label="typedef-name"]
  1365 -> 536 [style=dashed label="typename-specifier"]
  1365 -> 454 [style=dashed label="unary-expression"]
  1365 -> 455 [style=dashed label="unary-operator"]
  1365 -> 130 [style=dashed label="unqualified-id"]
  1365 -> 456 [style=dashed label="user-defined-character-literal"]
  1365 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1365 -> 458 [style=dashed label="user-defined-integer-literal"]
  1365 -> 459 [style=dashed label="user-defined-literal"]
  1365 -> 460 [style=dashed label="user-defined-string-literal"]
  1366 [label="State 1366\n\l536 lambda-expression: lambda-introducer '<' template-parameter-list • '>' lambda-declarator compound-statement\l537                  | lambda-introducer '<' template-parameter-list • '>' requires-clause lambda-declarator compound-statement\l1070 template-parameter-list: template-parameter-list • ',' template-parameter\l"]
  1366 -> 981 [style=solid label="','"]
  1366 -> 1659 [style=solid label="'>'"]
  1367 [label="State 1367\n\l552 lambda-specifiers: attribute-specifier-seq trailing-return-type •\l"]
  1367 -> "1367R552" [style=solid]
 "1367R552" [label="R552", fillcolor=3, shape=diamond, style=filled]
  1368 [label="State 1368\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l543 lambda-specifiers: decl-specifier-seq attribute-specifier-seq •\l551                  | decl-specifier-seq attribute-specifier-seq • trailing-return-type\l"]
  1368 -> 4 [style=solid label="\"alignas\""]
  1368 -> 10 [style=solid label="'['"]
  1368 -> 740 [style=solid label="\"->\""]
  1368 -> 58 [style=dashed label="alignment-specifier"]
  1368 -> 265 [style=dashed label="attribute-specifier"]
  1368 -> 1660 [style=dashed label="trailing-return-type"]
  1368 -> "1368R543" [style=solid]
 "1368R543" [label="R543", fillcolor=3, shape=diamond, style=filled]
  1369 [label="State 1369\n\l541 lambda-specifiers: decl-specifier-seq noexcept-specifier •\l545                  | decl-specifier-seq noexcept-specifier • attribute-specifier-seq\l549                  | decl-specifier-seq noexcept-specifier • trailing-return-type\l553                  | decl-specifier-seq noexcept-specifier • attribute-specifier-seq trailing-return-type\l"]
  1369 -> 4 [style=solid label="\"alignas\""]
  1369 -> 10 [style=solid label="'['"]
  1369 -> 740 [style=solid label="\"->\""]
  1369 -> 58 [style=dashed label="alignment-specifier"]
  1369 -> 61 [style=dashed label="attribute-specifier"]
  1369 -> 1661 [style=dashed label="attribute-specifier-seq"]
  1369 -> 1662 [style=dashed label="trailing-return-type"]
  1369 -> "1369R541" [style=solid]
 "1369R541" [label="R541", fillcolor=3, shape=diamond, style=filled]
  1370 [label="State 1370\n\l547 lambda-specifiers: decl-specifier-seq trailing-return-type •\l"]
  1370 -> "1370R547" [style=solid]
 "1370R547" [label="R547", fillcolor=3, shape=diamond, style=filled]
  1371 [label="State 1371\n\l535 lambda-expression: lambda-introducer lambda-declarator compound-statement •\l"]
  1371 -> "1371R535" [style=solid]
 "1371R535" [label="R535", fillcolor=3, shape=diamond, style=filled]
  1372 [label="State 1372\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l546 lambda-specifiers: noexcept-specifier attribute-specifier-seq •\l554                  | noexcept-specifier attribute-specifier-seq • trailing-return-type\l"]
  1372 -> 4 [style=solid label="\"alignas\""]
  1372 -> 10 [style=solid label="'['"]
  1372 -> 740 [style=solid label="\"->\""]
  1372 -> 58 [style=dashed label="alignment-specifier"]
  1372 -> 265 [style=dashed label="attribute-specifier"]
  1372 -> 1663 [style=dashed label="trailing-return-type"]
  1372 -> "1372R546" [style=solid]
 "1372R546" [label="R546", fillcolor=3, shape=diamond, style=filled]
  1373 [label="State 1373\n\l550 lambda-specifiers: noexcept-specifier trailing-return-type •\l"]
  1373 -> "1373R550" [style=solid]
 "1373R550" [label="R550", fillcolor=3, shape=diamond, style=filled]
  1374 [label="State 1374\n\l468 inclusive-or-expression: inclusive-or-expression • '|' exclusive-or-expression\l568 logical-and-expression: logical-and-expression \"&&\" inclusive-or-expression •\l"]
  1374 -> 896 [style=solid label="'|'"]
  1374 -> "1374R568" [style=solid]
 "1374R568" [label="R568", fillcolor=3, shape=diamond, style=filled]
  1375 [label="State 1375\n\l170 conditional-expression: logical-or-expression '?' expression • ':' assignment-expression\l338 expression: expression • ',' assignment-expression\l"]
  1375 -> 1037 [style=solid label="','"]
  1375 -> 1664 [style=solid label="':'"]
  1376 [label="State 1376\n\l568 logical-and-expression: logical-and-expression • \"&&\" inclusive-or-expression\l570 logical-or-expression: logical-or-expression \"||\" logical-and-expression •\l"]
  1376 -> 906 [style=solid label="\"&&\""]
  1376 -> "1376R570" [style=solid]
 "1376R570" [label="R570", fillcolor=3, shape=diamond, style=filled]
  1377 [label="State 1377\n\l644 multiplicative-expression: multiplicative-expression '*' pm-expression •\l857 pm-expression: pm-expression • \".*\" cast-expression\l858              | pm-expression • \"->*\" cast-expression\l"]
  1377 -> 924 [style=solid label="\".*\""]
  1377 -> 925 [style=solid label="\"->*\""]
  1377 -> "1377R644" [style=solid]
 "1377R644" [label="R644", fillcolor=3, shape=diamond, style=filled]
  1378 [label="State 1378\n\l645 multiplicative-expression: multiplicative-expression '/' pm-expression •\l857 pm-expression: pm-expression • \".*\" cast-expression\l858              | pm-expression • \"->*\" cast-expression\l"]
  1378 -> 924 [style=solid label="\".*\""]
  1378 -> 925 [style=solid label="\"->*\""]
  1378 -> "1378R645" [style=solid]
 "1378R645" [label="R645", fillcolor=3, shape=diamond, style=filled]
  1379 [label="State 1379\n\l646 multiplicative-expression: multiplicative-expression '%' pm-expression •\l857 pm-expression: pm-expression • \".*\" cast-expression\l858              | pm-expression • \"->*\" cast-expression\l"]
  1379 -> 924 [style=solid label="\".*\""]
  1379 -> 925 [style=solid label="\"->*\""]
  1379 -> "1379R646" [style=solid]
 "1379R646" [label="R646", fillcolor=3, shape=diamond, style=filled]
  1380 [label="State 1380\n\l754 octal-literal: octal-literal '\\'' octal-digit •\l"]
  1380 -> "1380R754" [style=solid]
 "1380R754" [label="R754", fillcolor=3, shape=diamond, style=filled]
  1381 [label="State 1381\n\l857 pm-expression: pm-expression \".*\" cast-expression •\l"]
  1381 -> "1381R857" [style=solid]
 "1381R857" [label="R857", fillcolor=3, shape=diamond, style=filled]
  1382 [label="State 1382\n\l858 pm-expression: pm-expression \"->*\" cast-expression •\l"]
  1382 -> "1382R858" [style=solid]
 "1382R858" [label="R858", fillcolor=3, shape=diamond, style=filled]
  1383 [label="State 1383\n\l863 postfix-expression: postfix-expression '(' ')' •\l"]
  1383 -> "1383R863" [style=solid]
 "1383R863" [label="R863", fillcolor=3, shape=diamond, style=filled]
  1384 [label="State 1384\n\l864 postfix-expression: postfix-expression '(' expression-list • ')'\l"]
  1384 -> 1665 [style=solid label="')'"]
  1385 [label="State 1385\n\l861 postfix-expression: postfix-expression '[' ']' •\l"]
  1385 -> "1385R861" [style=solid]
 "1385R861" [label="R861", fillcolor=3, shape=diamond, style=filled]
  1386 [label="State 1386\n\l862 postfix-expression: postfix-expression '[' expression-list • ']'\l"]
  1386 -> 1666 [style=solid label="']'"]
  1387 [label="State 1387\n\l874 postfix-expression: postfix-expression \"->\" \"template\" • id-expression\l"]
  1387 -> 148 [style=solid label="IDENTIFIER"]
  1387 -> 9 [style=solid label="\"::\""]
  1387 -> 17 [style=solid label="\"operator\""]
  1387 -> 135 [style=solid label="\"decltype\""]
  1387 -> 36 [style=solid label="'~'"]
  1387 -> 66 [style=dashed label="class-name"]
  1387 -> 69 [style=dashed label="conversion-function-id"]
  1387 -> 139 [style=dashed label="decltype-specifier"]
  1387 -> 85 [style=dashed label="enum-name"]
  1387 -> 1667 [style=dashed label="id-expression"]
  1387 -> 96 [style=dashed label="literal-operator-id"]
  1387 -> 100 [style=dashed label="namespace-alias"]
  1387 -> 103 [style=dashed label="namespace-name"]
  1387 -> 153 [style=dashed label="nested-name-specifier"]
  1387 -> 109 [style=dashed label="operator-function-id"]
  1387 -> 113 [style=dashed label="qualified-id"]
  1387 -> 115 [style=dashed label="simple-template-id"]
  1387 -> 121 [style=dashed label="template-id"]
  1387 -> 143 [style=dashed label="template-name"]
  1387 -> 144 [style=dashed label="type-name"]
  1387 -> 127 [style=dashed label="typedef-name"]
  1387 -> 130 [style=dashed label="unqualified-id"]
  1388 [label="State 1388\n\l873 postfix-expression: postfix-expression \"->\" id-expression •\l"]
  1388 -> "1388R873" [style=solid]
 "1388R873" [label="R873", fillcolor=3, shape=diamond, style=filled]
  1389 [label="State 1389\n\l872 postfix-expression: postfix-expression '.' \"template\" • id-expression\l"]
  1389 -> 148 [style=solid label="IDENTIFIER"]
  1389 -> 9 [style=solid label="\"::\""]
  1389 -> 17 [style=solid label="\"operator\""]
  1389 -> 135 [style=solid label="\"decltype\""]
  1389 -> 36 [style=solid label="'~'"]
  1389 -> 66 [style=dashed label="class-name"]
  1389 -> 69 [style=dashed label="conversion-function-id"]
  1389 -> 139 [style=dashed label="decltype-specifier"]
  1389 -> 85 [style=dashed label="enum-name"]
  1389 -> 1668 [style=dashed label="id-expression"]
  1389 -> 96 [style=dashed label="literal-operator-id"]
  1389 -> 100 [style=dashed label="namespace-alias"]
  1389 -> 103 [style=dashed label="namespace-name"]
  1389 -> 153 [style=dashed label="nested-name-specifier"]
  1389 -> 109 [style=dashed label="operator-function-id"]
  1389 -> 113 [style=dashed label="qualified-id"]
  1389 -> 115 [style=dashed label="simple-template-id"]
  1389 -> 121 [style=dashed label="template-id"]
  1389 -> 143 [style=dashed label="template-name"]
  1389 -> 144 [style=dashed label="type-name"]
  1389 -> 127 [style=dashed label="typedef-name"]
  1389 -> 130 [style=dashed label="unqualified-id"]
  1390 [label="State 1390\n\l871 postfix-expression: postfix-expression '.' id-expression •\l"]
  1390 -> "1390R871" [style=solid]
 "1390R871" [label="R871", fillcolor=3, shape=diamond, style=filled]
  1391 [label="State 1391\n\l155 compare-expression: compare-expression • \"<=>\" shift-expression\l931 relational-expression: relational-expression '<' compare-expression •\l"]
  1391 -> 844 [style=solid label="\"<=>\""]
  1391 -> "1391R931" [style=solid]
 "1391R931" [label="R931", fillcolor=3, shape=diamond, style=filled]
  1392 [label="State 1392\n\l155 compare-expression: compare-expression • \"<=>\" shift-expression\l932 relational-expression: relational-expression '>' compare-expression •\l"]
  1392 -> 844 [style=solid label="\"<=>\""]
  1392 -> "1392R932" [style=solid]
 "1392R932" [label="R932", fillcolor=3, shape=diamond, style=filled]
  1393 [label="State 1393\n\l155 compare-expression: compare-expression • \"<=>\" shift-expression\l933 relational-expression: relational-expression \"<=\" compare-expression •\l"]
  1393 -> 844 [style=solid label="\"<=>\""]
  1393 -> "1393R933" [style=solid]
 "1393R933" [label="R933", fillcolor=3, shape=diamond, style=filled]
  1394 [label="State 1394\n\l155 compare-expression: compare-expression • \"<=>\" shift-expression\l934 relational-expression: relational-expression \">=\" compare-expression •\l"]
  1394 -> 844 [style=solid label="\"<=>\""]
  1394 -> "1394R934" [style=solid]
 "1394R934" [label="R934", fillcolor=3, shape=diamond, style=filled]
  1395 [label="State 1395\n\l 11 additive-expression: additive-expression • '+' multiplicative-expression\l 12                    | additive-expression • '-' multiplicative-expression\l967 shift-expression: shift-expression \"<<\" additive-expression •\l"]
  1395 -> 823 [style=solid label="'+'"]
  1395 -> 824 [style=solid label="'-'"]
  1395 -> "1395R967" [style=solid]
 "1395R967" [label="R967", fillcolor=3, shape=diamond, style=filled]
  1396 [label="State 1396\n\l 11 additive-expression: additive-expression • '+' multiplicative-expression\l 12                    | additive-expression • '-' multiplicative-expression\l968 shift-expression: shift-expression \">>\" additive-expression •\l"]
  1396 -> 823 [style=solid label="'+'"]
  1396 -> 824 [style=solid label="'-'"]
  1396 -> "1396R968" [style=solid]
 "1396R968" [label="R968", fillcolor=3, shape=diamond, style=filled]
  1397 [label="State 1397\n\l865 postfix-expression: simple-type-specifier '(' ')' •\l"]
  1397 -> "1397R865" [style=solid]
 "1397R865" [label="R865", fillcolor=3, shape=diamond, style=filled]
  1398 [label="State 1398\n\l866 postfix-expression: simple-type-specifier '(' expression-list • ')'\l"]
  1398 -> 1669 [style=solid label="')'"]
  1399 [label="State 1399\n\l112 braced-init-list: '{' '}' •\l"]
  1399 -> "1399R112" [style=solid]
 "1399R112" [label="R112", fillcolor=3, shape=diamond, style=filled]
  1400 [label="State 1400\n\l 16 alignment-specifier: \"alignas\" '(' type-id \"...\" ')' •\l"]
  1400 -> "1400R16" [style=solid]
 "1400R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  1401 [label="State 1401\n\l 50 attribute-specifier: '[' • '[' attribute-list ']' ']'\l 51                    | '[' • '[' attribute-using-prefix attribute-list ']' ']'\l711 noptr-abstract-declarator: '[' • ']'\l713                          | '[' • constant-expression ']'\l715                          | '[' • ']' attribute-specifier-seq\l717                          | '[' • constant-expression ']' attribute-specifier-seq\l"]
  1401 -> 1 [style=solid label="IDENTIFIER"]
  1401 -> 361 [style=solid label="'+'"]
  1401 -> 362 [style=solid label="'-'"]
  1401 -> 363 [style=solid label="'('"]
  1401 -> 364 [style=solid label="'&'"]
  1401 -> 365 [style=solid label="\"::\""]
  1401 -> 1670 [style=solid label="'['"]
  1401 -> 1407 [style=solid label="']'"]
  1401 -> 367 [style=solid label="\"co_await\""]
  1401 -> 368 [style=solid label="'0'"]
  1401 -> 369 [style=solid label="'1'"]
  1401 -> 370 [style=solid label="\"0b\""]
  1401 -> 371 [style=solid label="\"0B\""]
  1401 -> 372 [style=solid label="'\\''"]
  1401 -> 373 [style=solid label="\"false\""]
  1401 -> 374 [style=solid label="\"true\""]
  1401 -> 375 [style=solid label="\"noexcept\""]
  1401 -> 17 [style=solid label="\"operator\""]
  1401 -> 26 [style=solid label="\"decltype\""]
  1401 -> 376 [style=solid label="\"delete\""]
  1401 -> 377 [style=solid label="'.'"]
  1401 -> 378 [style=solid label="'2'"]
  1401 -> 379 [style=solid label="'3'"]
  1401 -> 380 [style=solid label="'4'"]
  1401 -> 381 [style=solid label="'5'"]
  1401 -> 382 [style=solid label="'6'"]
  1401 -> 383 [style=solid label="'7'"]
  1401 -> 384 [style=solid label="'8'"]
  1401 -> 385 [style=solid label="'9'"]
  1401 -> 185 [style=solid label="\"u8\""]
  1401 -> 186 [style=solid label="'u'"]
  1401 -> 187 [style=solid label="'U'"]
  1401 -> 188 [style=solid label="'L'"]
  1401 -> 386 [style=solid label="'*'"]
  1401 -> 203 [style=solid label="'\"'"]
  1401 -> 387 [style=solid label="\"0x\""]
  1401 -> 388 [style=solid label="\"0X\""]
  1401 -> 389 [style=solid label="\"requires\""]
  1401 -> 390 [style=solid label="\"new\""]
  1401 -> 391 [style=solid label="'~'"]
  1401 -> 392 [style=solid label="'!'"]
  1401 -> 393 [style=solid label="\"++\""]
  1401 -> 394 [style=solid label="\"--\""]
  1401 -> 395 [style=solid label="\"this\""]
  1401 -> 37 [style=solid label="\"auto\""]
  1401 -> 396 [style=solid label="\"nullptr\""]
  1401 -> 397 [style=solid label="\"dynamic_cast\""]
  1401 -> 398 [style=solid label="\"static_cast\""]
  1401 -> 399 [style=solid label="\"reinterpret_cast\""]
  1401 -> 400 [style=solid label="\"const_cast\""]
  1401 -> 401 [style=solid label="\"typeid\""]
  1401 -> 38 [style=solid label="\"char\""]
  1401 -> 39 [style=solid label="\"char8_t\""]
  1401 -> 40 [style=solid label="\"char16_t\""]
  1401 -> 41 [style=solid label="\"char32_t\""]
  1401 -> 42 [style=solid label="\"wchar_t\""]
  1401 -> 43 [style=solid label="\"bool\""]
  1401 -> 44 [style=solid label="\"short\""]
  1401 -> 45 [style=solid label="\"int\""]
  1401 -> 46 [style=solid label="\"long\""]
  1401 -> 47 [style=solid label="\"signed\""]
  1401 -> 48 [style=solid label="\"unsigned\""]
  1401 -> 49 [style=solid label="\"float\""]
  1401 -> 50 [style=solid label="\"double\""]
  1401 -> 51 [style=solid label="\"void\""]
  1401 -> 209 [style=solid label="'R'"]
  1401 -> 56 [style=solid label="\"typename\""]
  1401 -> 402 [style=solid label="\"sizeof\""]
  1401 -> 403 [style=solid label="\"alignof\""]
  1401 -> 404 [style=dashed label="additive-expression"]
  1401 -> 405 [style=dashed label="and-expression"]
  1401 -> 406 [style=dashed label="await-expression"]
  1401 -> 407 [style=dashed label="binary-literal"]
  1401 -> 408 [style=dashed label="boolean-literal"]
  1401 -> 409 [style=dashed label="cast-expression"]
  1401 -> 410 [style=dashed label="character-literal"]
  1401 -> 66 [style=dashed label="class-name"]
  1401 -> 411 [style=dashed label="compare-expression"]
  1401 -> 68 [style=dashed label="concept-name"]
  1401 -> 412 [style=dashed label="conditional-expression"]
  1401 -> 1408 [style=dashed label="constant-expression"]
  1401 -> 69 [style=dashed label="conversion-function-id"]
  1401 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1401 -> 415 [style=dashed label="decimal-literal"]
  1401 -> 77 [style=dashed label="decltype-specifier"]
  1401 -> 416 [style=dashed label="delete-expression"]
  1401 -> 417 [style=dashed label="digit"]
  1401 -> 418 [style=dashed label="digit-sequence"]
  1401 -> 419 [style=dashed label="encoding-prefix"]
  1401 -> 85 [style=dashed label="enum-name"]
  1401 -> 420 [style=dashed label="equality-expression"]
  1401 -> 421 [style=dashed label="exclusive-or-expression"]
  1401 -> 422 [style=dashed label="floating-point-literal"]
  1401 -> 423 [style=dashed label="fold-expression"]
  1401 -> 424 [style=dashed label="fractional-constant"]
  1401 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1401 -> 426 [style=dashed label="hexadecimal-literal"]
  1401 -> 427 [style=dashed label="hexadecimal-prefix"]
  1401 -> 428 [style=dashed label="id-expression"]
  1401 -> 429 [style=dashed label="inclusive-or-expression"]
  1401 -> 430 [style=dashed label="integer-literal"]
  1401 -> 431 [style=dashed label="lambda-expression"]
  1401 -> 432 [style=dashed label="lambda-introducer"]
  1401 -> 433 [style=dashed label="literal"]
  1401 -> 96 [style=dashed label="literal-operator-id"]
  1401 -> 434 [style=dashed label="logical-and-expression"]
  1401 -> 435 [style=dashed label="logical-or-expression"]
  1401 -> 436 [style=dashed label="multiplicative-expression"]
  1401 -> 100 [style=dashed label="namespace-alias"]
  1401 -> 103 [style=dashed label="namespace-name"]
  1401 -> 437 [style=dashed label="nested-name-specifier"]
  1401 -> 438 [style=dashed label="new-expression"]
  1401 -> 439 [style=dashed label="noexcept-expression"]
  1401 -> 440 [style=dashed label="nonzero-digit"]
  1401 -> 441 [style=dashed label="octal-literal"]
  1401 -> 109 [style=dashed label="operator-function-id"]
  1401 -> 110 [style=dashed label="placeholder-type-specifier"]
  1401 -> 442 [style=dashed label="pm-expression"]
  1401 -> 443 [style=dashed label="pointer-literal"]
  1401 -> 444 [style=dashed label="postfix-expression"]
  1401 -> 445 [style=dashed label="primary-expression"]
  1401 -> 113 [style=dashed label="qualified-id"]
  1401 -> 446 [style=dashed label="relational-expression"]
  1401 -> 447 [style=dashed label="requires-expression"]
  1401 -> 448 [style=dashed label="shift-expression"]
  1401 -> 115 [style=dashed label="simple-template-id"]
  1401 -> 534 [style=dashed label="simple-type-specifier"]
  1401 -> 450 [style=dashed label="string-literal"]
  1401 -> 121 [style=dashed label="template-id"]
  1401 -> 216 [style=dashed label="template-name"]
  1401 -> 124 [style=dashed label="type-constraint"]
  1401 -> 125 [style=dashed label="type-name"]
  1401 -> 127 [style=dashed label="typedef-name"]
  1401 -> 536 [style=dashed label="typename-specifier"]
  1401 -> 454 [style=dashed label="unary-expression"]
  1401 -> 455 [style=dashed label="unary-operator"]
  1401 -> 130 [style=dashed label="unqualified-id"]
  1401 -> 456 [style=dashed label="user-defined-character-literal"]
  1401 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1401 -> 458 [style=dashed label="user-defined-integer-literal"]
  1401 -> 459 [style=dashed label="user-defined-literal"]
  1401 -> 460 [style=dashed label="user-defined-string-literal"]
  1402 [label="State 1402\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l905 ptr-operator: nested-name-specifier • '*'\l906             | nested-name-specifier • '*' attribute-specifier-seq\l907             | nested-name-specifier • '*' cv-qualifier-seq\l908             | nested-name-specifier • '*' attribute-specifier-seq cv-qualifier-seq\l999 simple-type-specifier: nested-name-specifier • type-name\l1001                      | nested-name-specifier • \"template\" simple-template-id\l1004                      | nested-name-specifier • template-name\l1084 type-constraint: nested-name-specifier • concept-name\l1086                | nested-name-specifier • concept-name '<' '>'\l1088                | nested-name-specifier • concept-name '<' template-argument-list '>'\l"]
  1402 -> 513 [style=solid label="IDENTIFIER"]
  1402 -> 514 [style=solid label="\"template\""]
  1402 -> 327 [style=solid label="'*'"]
  1402 -> 66 [style=dashed label="class-name"]
  1402 -> 328 [style=dashed label="concept-name"]
  1402 -> 85 [style=dashed label="enum-name"]
  1402 -> 515 [style=dashed label="simple-template-id"]
  1402 -> 330 [style=dashed label="template-name"]
  1402 -> 331 [style=dashed label="type-name"]
  1402 -> 127 [style=dashed label="typedef-name"]
  1403 [label="State 1403\n\l708 noptr-abstract-declarator: noptr-abstract-declarator • parameters-and-qualifiers\l710                          | noptr-abstract-declarator • '[' ']'\l712                          | noptr-abstract-declarator • '[' constant-expression ']'\l714                          | noptr-abstract-declarator • '[' ']' attribute-specifier-seq\l716                          | noptr-abstract-declarator • '[' constant-expression ']' attribute-specifier-seq\l892 ptr-abstract-declarator: noptr-abstract-declarator •\l"]
  1403 -> 333 [style=solid label="'('"]
  1403 -> 1409 [style=solid label="'['"]
  1403 -> 1671 [style=dashed label="parameters-and-qualifiers"]
  1403 -> "1403R892d" [label="['(']", style=solid]
 "1403R892d" [label="R892", fillcolor=5, shape=diamond, style=filled]
  1403 -> "1403R892" [style=solid]
 "1403R892" [label="R892", fillcolor=3, shape=diamond, style=filled]
  1404 [label="State 1404\n\l709 noptr-abstract-declarator: parameters-and-qualifiers •\l"]
  1404 -> "1404R709" [style=solid]
 "1404R709" [label="R709", fillcolor=3, shape=diamond, style=filled]
  1405 [label="State 1405\n\l718 noptr-abstract-declarator: '(' ptr-abstract-declarator • ')'\l"]
  1405 -> 1672 [style=solid label="')'"]
  1406 [label="State 1406\n\l893 ptr-abstract-declarator: ptr-operator •\l894                        | ptr-operator • ptr-abstract-declarator\l"]
  1406 -> 258 [style=solid label="IDENTIFIER"]
  1406 -> 943 [style=solid label="'('"]
  1406 -> 7 [style=solid label="'&'"]
  1406 -> 9 [style=solid label="\"::\""]
  1406 -> 945 [style=solid label="'['"]
  1406 -> 16 [style=solid label="\"&&\""]
  1406 -> 135 [style=solid label="\"decltype\""]
  1406 -> 32 [style=solid label="'*'"]
  1406 -> 66 [style=dashed label="class-name"]
  1406 -> 139 [style=dashed label="decltype-specifier"]
  1406 -> 85 [style=dashed label="enum-name"]
  1406 -> 100 [style=dashed label="namespace-alias"]
  1406 -> 103 [style=dashed label="namespace-name"]
  1406 -> 522 [style=dashed label="nested-name-specifier"]
  1406 -> 1403 [style=dashed label="noptr-abstract-declarator"]
  1406 -> 1404 [style=dashed label="parameters-and-qualifiers"]
  1406 -> 1415 [style=dashed label="ptr-abstract-declarator"]
  1406 -> 1406 [style=dashed label="ptr-operator"]
  1406 -> 142 [style=dashed label="simple-template-id"]
  1406 -> 143 [style=dashed label="template-name"]
  1406 -> 144 [style=dashed label="type-name"]
  1406 -> 127 [style=dashed label="typedef-name"]
  1406 -> "1406R893" [style=solid]
 "1406R893" [label="R893", fillcolor=3, shape=diamond, style=filled]
  1407 [label="State 1407\n\l711 noptr-abstract-declarator: '[' ']' •\l715                          | '[' ']' • attribute-specifier-seq\l"]
  1407 -> 4 [style=solid label="\"alignas\""]
  1407 -> 10 [style=solid label="'['"]
  1407 -> 58 [style=dashed label="alignment-specifier"]
  1407 -> 61 [style=dashed label="attribute-specifier"]
  1407 -> 1673 [style=dashed label="attribute-specifier-seq"]
  1407 -> "1407R711d" [label="['[']", style=solid]
 "1407R711d" [label="R711", fillcolor=5, shape=diamond, style=filled]
  1407 -> "1407R711" [style=solid]
 "1407R711" [label="R711", fillcolor=3, shape=diamond, style=filled]
  1408 [label="State 1408\n\l713 noptr-abstract-declarator: '[' constant-expression • ']'\l717                          | '[' constant-expression • ']' attribute-specifier-seq\l"]
  1408 -> 1674 [style=solid label="']'"]
  1409 [label="State 1409\n\l710 noptr-abstract-declarator: noptr-abstract-declarator '[' • ']'\l712                          | noptr-abstract-declarator '[' • constant-expression ']'\l714                          | noptr-abstract-declarator '[' • ']' attribute-specifier-seq\l716                          | noptr-abstract-declarator '[' • constant-expression ']' attribute-specifier-seq\l"]
  1409 -> 1 [style=solid label="IDENTIFIER"]
  1409 -> 361 [style=solid label="'+'"]
  1409 -> 362 [style=solid label="'-'"]
  1409 -> 363 [style=solid label="'('"]
  1409 -> 364 [style=solid label="'&'"]
  1409 -> 365 [style=solid label="\"::\""]
  1409 -> 366 [style=solid label="'['"]
  1409 -> 1675 [style=solid label="']'"]
  1409 -> 367 [style=solid label="\"co_await\""]
  1409 -> 368 [style=solid label="'0'"]
  1409 -> 369 [style=solid label="'1'"]
  1409 -> 370 [style=solid label="\"0b\""]
  1409 -> 371 [style=solid label="\"0B\""]
  1409 -> 372 [style=solid label="'\\''"]
  1409 -> 373 [style=solid label="\"false\""]
  1409 -> 374 [style=solid label="\"true\""]
  1409 -> 375 [style=solid label="\"noexcept\""]
  1409 -> 17 [style=solid label="\"operator\""]
  1409 -> 26 [style=solid label="\"decltype\""]
  1409 -> 376 [style=solid label="\"delete\""]
  1409 -> 377 [style=solid label="'.'"]
  1409 -> 378 [style=solid label="'2'"]
  1409 -> 379 [style=solid label="'3'"]
  1409 -> 380 [style=solid label="'4'"]
  1409 -> 381 [style=solid label="'5'"]
  1409 -> 382 [style=solid label="'6'"]
  1409 -> 383 [style=solid label="'7'"]
  1409 -> 384 [style=solid label="'8'"]
  1409 -> 385 [style=solid label="'9'"]
  1409 -> 185 [style=solid label="\"u8\""]
  1409 -> 186 [style=solid label="'u'"]
  1409 -> 187 [style=solid label="'U'"]
  1409 -> 188 [style=solid label="'L'"]
  1409 -> 386 [style=solid label="'*'"]
  1409 -> 203 [style=solid label="'\"'"]
  1409 -> 387 [style=solid label="\"0x\""]
  1409 -> 388 [style=solid label="\"0X\""]
  1409 -> 389 [style=solid label="\"requires\""]
  1409 -> 390 [style=solid label="\"new\""]
  1409 -> 391 [style=solid label="'~'"]
  1409 -> 392 [style=solid label="'!'"]
  1409 -> 393 [style=solid label="\"++\""]
  1409 -> 394 [style=solid label="\"--\""]
  1409 -> 395 [style=solid label="\"this\""]
  1409 -> 37 [style=solid label="\"auto\""]
  1409 -> 396 [style=solid label="\"nullptr\""]
  1409 -> 397 [style=solid label="\"dynamic_cast\""]
  1409 -> 398 [style=solid label="\"static_cast\""]
  1409 -> 399 [style=solid label="\"reinterpret_cast\""]
  1409 -> 400 [style=solid label="\"const_cast\""]
  1409 -> 401 [style=solid label="\"typeid\""]
  1409 -> 38 [style=solid label="\"char\""]
  1409 -> 39 [style=solid label="\"char8_t\""]
  1409 -> 40 [style=solid label="\"char16_t\""]
  1409 -> 41 [style=solid label="\"char32_t\""]
  1409 -> 42 [style=solid label="\"wchar_t\""]
  1409 -> 43 [style=solid label="\"bool\""]
  1409 -> 44 [style=solid label="\"short\""]
  1409 -> 45 [style=solid label="\"int\""]
  1409 -> 46 [style=solid label="\"long\""]
  1409 -> 47 [style=solid label="\"signed\""]
  1409 -> 48 [style=solid label="\"unsigned\""]
  1409 -> 49 [style=solid label="\"float\""]
  1409 -> 50 [style=solid label="\"double\""]
  1409 -> 51 [style=solid label="\"void\""]
  1409 -> 209 [style=solid label="'R'"]
  1409 -> 56 [style=solid label="\"typename\""]
  1409 -> 402 [style=solid label="\"sizeof\""]
  1409 -> 403 [style=solid label="\"alignof\""]
  1409 -> 404 [style=dashed label="additive-expression"]
  1409 -> 405 [style=dashed label="and-expression"]
  1409 -> 406 [style=dashed label="await-expression"]
  1409 -> 407 [style=dashed label="binary-literal"]
  1409 -> 408 [style=dashed label="boolean-literal"]
  1409 -> 409 [style=dashed label="cast-expression"]
  1409 -> 410 [style=dashed label="character-literal"]
  1409 -> 66 [style=dashed label="class-name"]
  1409 -> 411 [style=dashed label="compare-expression"]
  1409 -> 68 [style=dashed label="concept-name"]
  1409 -> 412 [style=dashed label="conditional-expression"]
  1409 -> 1676 [style=dashed label="constant-expression"]
  1409 -> 69 [style=dashed label="conversion-function-id"]
  1409 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1409 -> 415 [style=dashed label="decimal-literal"]
  1409 -> 77 [style=dashed label="decltype-specifier"]
  1409 -> 416 [style=dashed label="delete-expression"]
  1409 -> 417 [style=dashed label="digit"]
  1409 -> 418 [style=dashed label="digit-sequence"]
  1409 -> 419 [style=dashed label="encoding-prefix"]
  1409 -> 85 [style=dashed label="enum-name"]
  1409 -> 420 [style=dashed label="equality-expression"]
  1409 -> 421 [style=dashed label="exclusive-or-expression"]
  1409 -> 422 [style=dashed label="floating-point-literal"]
  1409 -> 423 [style=dashed label="fold-expression"]
  1409 -> 424 [style=dashed label="fractional-constant"]
  1409 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1409 -> 426 [style=dashed label="hexadecimal-literal"]
  1409 -> 427 [style=dashed label="hexadecimal-prefix"]
  1409 -> 428 [style=dashed label="id-expression"]
  1409 -> 429 [style=dashed label="inclusive-or-expression"]
  1409 -> 430 [style=dashed label="integer-literal"]
  1409 -> 431 [style=dashed label="lambda-expression"]
  1409 -> 432 [style=dashed label="lambda-introducer"]
  1409 -> 433 [style=dashed label="literal"]
  1409 -> 96 [style=dashed label="literal-operator-id"]
  1409 -> 434 [style=dashed label="logical-and-expression"]
  1409 -> 435 [style=dashed label="logical-or-expression"]
  1409 -> 436 [style=dashed label="multiplicative-expression"]
  1409 -> 100 [style=dashed label="namespace-alias"]
  1409 -> 103 [style=dashed label="namespace-name"]
  1409 -> 437 [style=dashed label="nested-name-specifier"]
  1409 -> 438 [style=dashed label="new-expression"]
  1409 -> 439 [style=dashed label="noexcept-expression"]
  1409 -> 440 [style=dashed label="nonzero-digit"]
  1409 -> 441 [style=dashed label="octal-literal"]
  1409 -> 109 [style=dashed label="operator-function-id"]
  1409 -> 110 [style=dashed label="placeholder-type-specifier"]
  1409 -> 442 [style=dashed label="pm-expression"]
  1409 -> 443 [style=dashed label="pointer-literal"]
  1409 -> 444 [style=dashed label="postfix-expression"]
  1409 -> 445 [style=dashed label="primary-expression"]
  1409 -> 113 [style=dashed label="qualified-id"]
  1409 -> 446 [style=dashed label="relational-expression"]
  1409 -> 447 [style=dashed label="requires-expression"]
  1409 -> 448 [style=dashed label="shift-expression"]
  1409 -> 115 [style=dashed label="simple-template-id"]
  1409 -> 534 [style=dashed label="simple-type-specifier"]
  1409 -> 450 [style=dashed label="string-literal"]
  1409 -> 121 [style=dashed label="template-id"]
  1409 -> 216 [style=dashed label="template-name"]
  1409 -> 124 [style=dashed label="type-constraint"]
  1409 -> 125 [style=dashed label="type-name"]
  1409 -> 127 [style=dashed label="typedef-name"]
  1409 -> 536 [style=dashed label="typename-specifier"]
  1409 -> 454 [style=dashed label="unary-expression"]
  1409 -> 455 [style=dashed label="unary-operator"]
  1409 -> 130 [style=dashed label="unqualified-id"]
  1409 -> 456 [style=dashed label="user-defined-character-literal"]
  1409 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1409 -> 458 [style=dashed label="user-defined-integer-literal"]
  1409 -> 459 [style=dashed label="user-defined-literal"]
  1409 -> 460 [style=dashed label="user-defined-string-literal"]
  1410 [label="State 1410\n\l  2 abstract-declarator: noptr-abstract-declarator parameters-and-qualifiers • trailing-return-type\l708 noptr-abstract-declarator: noptr-abstract-declarator parameters-and-qualifiers •\l"]
  1410 -> 740 [style=solid label="\"->\""]
  1410 -> 1677 [style=dashed label="trailing-return-type"]
  1410 -> "1410R708" [style=solid]
 "1410R708" [label="R708", fillcolor=3, shape=diamond, style=filled]
  1411 [label="State 1411\n\l720 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator '[' • ']'\l721                               | noptr-abstract-pack-declarator '[' • constant-expression ']'\l722                               | noptr-abstract-pack-declarator '[' • ']' attribute-specifier-seq\l723                               | noptr-abstract-pack-declarator '[' • constant-expression ']' attribute-specifier-seq\l"]
  1411 -> 1 [style=solid label="IDENTIFIER"]
  1411 -> 361 [style=solid label="'+'"]
  1411 -> 362 [style=solid label="'-'"]
  1411 -> 363 [style=solid label="'('"]
  1411 -> 364 [style=solid label="'&'"]
  1411 -> 365 [style=solid label="\"::\""]
  1411 -> 366 [style=solid label="'['"]
  1411 -> 1678 [style=solid label="']'"]
  1411 -> 367 [style=solid label="\"co_await\""]
  1411 -> 368 [style=solid label="'0'"]
  1411 -> 369 [style=solid label="'1'"]
  1411 -> 370 [style=solid label="\"0b\""]
  1411 -> 371 [style=solid label="\"0B\""]
  1411 -> 372 [style=solid label="'\\''"]
  1411 -> 373 [style=solid label="\"false\""]
  1411 -> 374 [style=solid label="\"true\""]
  1411 -> 375 [style=solid label="\"noexcept\""]
  1411 -> 17 [style=solid label="\"operator\""]
  1411 -> 26 [style=solid label="\"decltype\""]
  1411 -> 376 [style=solid label="\"delete\""]
  1411 -> 377 [style=solid label="'.'"]
  1411 -> 378 [style=solid label="'2'"]
  1411 -> 379 [style=solid label="'3'"]
  1411 -> 380 [style=solid label="'4'"]
  1411 -> 381 [style=solid label="'5'"]
  1411 -> 382 [style=solid label="'6'"]
  1411 -> 383 [style=solid label="'7'"]
  1411 -> 384 [style=solid label="'8'"]
  1411 -> 385 [style=solid label="'9'"]
  1411 -> 185 [style=solid label="\"u8\""]
  1411 -> 186 [style=solid label="'u'"]
  1411 -> 187 [style=solid label="'U'"]
  1411 -> 188 [style=solid label="'L'"]
  1411 -> 386 [style=solid label="'*'"]
  1411 -> 203 [style=solid label="'\"'"]
  1411 -> 387 [style=solid label="\"0x\""]
  1411 -> 388 [style=solid label="\"0X\""]
  1411 -> 389 [style=solid label="\"requires\""]
  1411 -> 390 [style=solid label="\"new\""]
  1411 -> 391 [style=solid label="'~'"]
  1411 -> 392 [style=solid label="'!'"]
  1411 -> 393 [style=solid label="\"++\""]
  1411 -> 394 [style=solid label="\"--\""]
  1411 -> 395 [style=solid label="\"this\""]
  1411 -> 37 [style=solid label="\"auto\""]
  1411 -> 396 [style=solid label="\"nullptr\""]
  1411 -> 397 [style=solid label="\"dynamic_cast\""]
  1411 -> 398 [style=solid label="\"static_cast\""]
  1411 -> 399 [style=solid label="\"reinterpret_cast\""]
  1411 -> 400 [style=solid label="\"const_cast\""]
  1411 -> 401 [style=solid label="\"typeid\""]
  1411 -> 38 [style=solid label="\"char\""]
  1411 -> 39 [style=solid label="\"char8_t\""]
  1411 -> 40 [style=solid label="\"char16_t\""]
  1411 -> 41 [style=solid label="\"char32_t\""]
  1411 -> 42 [style=solid label="\"wchar_t\""]
  1411 -> 43 [style=solid label="\"bool\""]
  1411 -> 44 [style=solid label="\"short\""]
  1411 -> 45 [style=solid label="\"int\""]
  1411 -> 46 [style=solid label="\"long\""]
  1411 -> 47 [style=solid label="\"signed\""]
  1411 -> 48 [style=solid label="\"unsigned\""]
  1411 -> 49 [style=solid label="\"float\""]
  1411 -> 50 [style=solid label="\"double\""]
  1411 -> 51 [style=solid label="\"void\""]
  1411 -> 209 [style=solid label="'R'"]
  1411 -> 56 [style=solid label="\"typename\""]
  1411 -> 402 [style=solid label="\"sizeof\""]
  1411 -> 403 [style=solid label="\"alignof\""]
  1411 -> 404 [style=dashed label="additive-expression"]
  1411 -> 405 [style=dashed label="and-expression"]
  1411 -> 406 [style=dashed label="await-expression"]
  1411 -> 407 [style=dashed label="binary-literal"]
  1411 -> 408 [style=dashed label="boolean-literal"]
  1411 -> 409 [style=dashed label="cast-expression"]
  1411 -> 410 [style=dashed label="character-literal"]
  1411 -> 66 [style=dashed label="class-name"]
  1411 -> 411 [style=dashed label="compare-expression"]
  1411 -> 68 [style=dashed label="concept-name"]
  1411 -> 412 [style=dashed label="conditional-expression"]
  1411 -> 1679 [style=dashed label="constant-expression"]
  1411 -> 69 [style=dashed label="conversion-function-id"]
  1411 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1411 -> 415 [style=dashed label="decimal-literal"]
  1411 -> 77 [style=dashed label="decltype-specifier"]
  1411 -> 416 [style=dashed label="delete-expression"]
  1411 -> 417 [style=dashed label="digit"]
  1411 -> 418 [style=dashed label="digit-sequence"]
  1411 -> 419 [style=dashed label="encoding-prefix"]
  1411 -> 85 [style=dashed label="enum-name"]
  1411 -> 420 [style=dashed label="equality-expression"]
  1411 -> 421 [style=dashed label="exclusive-or-expression"]
  1411 -> 422 [style=dashed label="floating-point-literal"]
  1411 -> 423 [style=dashed label="fold-expression"]
  1411 -> 424 [style=dashed label="fractional-constant"]
  1411 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1411 -> 426 [style=dashed label="hexadecimal-literal"]
  1411 -> 427 [style=dashed label="hexadecimal-prefix"]
  1411 -> 428 [style=dashed label="id-expression"]
  1411 -> 429 [style=dashed label="inclusive-or-expression"]
  1411 -> 430 [style=dashed label="integer-literal"]
  1411 -> 431 [style=dashed label="lambda-expression"]
  1411 -> 432 [style=dashed label="lambda-introducer"]
  1411 -> 433 [style=dashed label="literal"]
  1411 -> 96 [style=dashed label="literal-operator-id"]
  1411 -> 434 [style=dashed label="logical-and-expression"]
  1411 -> 435 [style=dashed label="logical-or-expression"]
  1411 -> 436 [style=dashed label="multiplicative-expression"]
  1411 -> 100 [style=dashed label="namespace-alias"]
  1411 -> 103 [style=dashed label="namespace-name"]
  1411 -> 437 [style=dashed label="nested-name-specifier"]
  1411 -> 438 [style=dashed label="new-expression"]
  1411 -> 439 [style=dashed label="noexcept-expression"]
  1411 -> 440 [style=dashed label="nonzero-digit"]
  1411 -> 441 [style=dashed label="octal-literal"]
  1411 -> 109 [style=dashed label="operator-function-id"]
  1411 -> 110 [style=dashed label="placeholder-type-specifier"]
  1411 -> 442 [style=dashed label="pm-expression"]
  1411 -> 443 [style=dashed label="pointer-literal"]
  1411 -> 444 [style=dashed label="postfix-expression"]
  1411 -> 445 [style=dashed label="primary-expression"]
  1411 -> 113 [style=dashed label="qualified-id"]
  1411 -> 446 [style=dashed label="relational-expression"]
  1411 -> 447 [style=dashed label="requires-expression"]
  1411 -> 448 [style=dashed label="shift-expression"]
  1411 -> 115 [style=dashed label="simple-template-id"]
  1411 -> 534 [style=dashed label="simple-type-specifier"]
  1411 -> 450 [style=dashed label="string-literal"]
  1411 -> 121 [style=dashed label="template-id"]
  1411 -> 216 [style=dashed label="template-name"]
  1411 -> 124 [style=dashed label="type-constraint"]
  1411 -> 125 [style=dashed label="type-name"]
  1411 -> 127 [style=dashed label="typedef-name"]
  1411 -> 536 [style=dashed label="typename-specifier"]
  1411 -> 454 [style=dashed label="unary-expression"]
  1411 -> 455 [style=dashed label="unary-operator"]
  1411 -> 130 [style=dashed label="unqualified-id"]
  1411 -> 456 [style=dashed label="user-defined-character-literal"]
  1411 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1411 -> 458 [style=dashed label="user-defined-integer-literal"]
  1411 -> 459 [style=dashed label="user-defined-literal"]
  1411 -> 460 [style=dashed label="user-defined-string-literal"]
  1412 [label="State 1412\n\l719 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator parameters-and-qualifiers •\l"]
  1412 -> "1412R719" [style=solid]
 "1412R719" [label="R719", fillcolor=3, shape=diamond, style=filled]
  1413 [label="State 1413\n\l  3 abstract-declarator: parameters-and-qualifiers trailing-return-type •\l"]
  1413 -> "1413R3" [style=solid]
 "1413R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  1414 [label="State 1414\n\l  6 abstract-pack-declarator: ptr-operator abstract-pack-declarator •\l"]
  1414 -> "1414R6" [style=solid]
 "1414R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  1415 [label="State 1415\n\l894 ptr-abstract-declarator: ptr-operator ptr-abstract-declarator •\l"]
  1415 -> "1415R894" [style=solid]
 "1415R894" [label="R894", fillcolor=3, shape=diamond, style=filled]
  1416 [label="State 1416\n\l867 postfix-expression: typename-specifier '(' ')' •\l"]
  1416 -> "1416R867" [style=solid]
 "1416R867" [label="R867", fillcolor=3, shape=diamond, style=filled]
  1417 [label="State 1417\n\l868 postfix-expression: typename-specifier '(' expression-list • ')'\l"]
  1417 -> 1680 [style=solid label="')'"]
  1418 [label="State 1418\n\l 22 asm-declaration: \"asm\" '(' string-literal ')' ';' •\l"]
  1418 -> "1418R22" [style=solid]
 "1418R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  1419 [label="State 1419\n\l 57 attribute-using-prefix: \"using\" attribute-namespace ':' •\l"]
  1419 -> "1419R57" [style=solid]
 "1419R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  1420 [label="State 1420\n\l 45 attribute-list: attribute-list ',' attribute •\l 47               | attribute-list ',' attribute • \"...\"\l"]
  1420 -> 1681 [style=solid label="\"...\""]
  1420 -> "1420R45" [style=solid]
 "1420R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  1421 [label="State 1421\n\l 50 attribute-specifier: '[' '[' attribute-list ']' ']' •\l"]
  1421 -> "1421R50" [style=solid]
 "1421R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  1422 [label="State 1422\n\l 49 attribute-scoped-token: attribute-namespace \"::\" IDENTIFIER •\l"]
  1422 -> "1422R49" [style=solid]
 "1422R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
  1423 [label="State 1423\n\l 65 balanced-token: ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE •\l"]
  1423 -> "1423R65" [style=solid]
 "1423R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
  1424 [label="State 1424\n\l 59 balanced-token: '(' • ')'\l 60               | '(' • balanced-token-seq ')'\l"]
  1424 -> 1423 [style=solid label="ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE"]
  1424 -> 1424 [style=solid label="'('"]
  1424 -> 1682 [style=solid label="')'"]
  1424 -> 1426 [style=solid label="'['"]
  1424 -> 1427 [style=solid label="'{'"]
  1424 -> 1428 [style=dashed label="balanced-token"]
  1424 -> 1683 [style=dashed label="balanced-token-seq"]
  1425 [label="State 1425\n\l 40 attribute-argument-clause: '(' ')' •\l"]
  1425 -> "1425R40" [style=solid]
 "1425R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  1426 [label="State 1426\n\l 61 balanced-token: '[' • ']'\l 62               | '[' • balanced-token-seq ']'\l"]
  1426 -> 1423 [style=solid label="ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE"]
  1426 -> 1424 [style=solid label="'('"]
  1426 -> 1426 [style=solid label="'['"]
  1426 -> 1684 [style=solid label="']'"]
  1426 -> 1427 [style=solid label="'{'"]
  1426 -> 1428 [style=dashed label="balanced-token"]
  1426 -> 1685 [style=dashed label="balanced-token-seq"]
  1427 [label="State 1427\n\l 63 balanced-token: '{' • '}'\l 64               | '{' • balanced-token-seq '}'\l"]
  1427 -> 1423 [style=solid label="ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE"]
  1427 -> 1424 [style=solid label="'('"]
  1427 -> 1426 [style=solid label="'['"]
  1427 -> 1427 [style=solid label="'{'"]
  1427 -> 1686 [style=solid label="'}'"]
  1427 -> 1428 [style=dashed label="balanced-token"]
  1427 -> 1687 [style=dashed label="balanced-token-seq"]
  1428 [label="State 1428\n\l 66 balanced-token-seq: balanced-token •\l"]
  1428 -> "1428R66" [style=solid]
 "1428R66" [label="R66", fillcolor=3, shape=diamond, style=filled]
  1429 [label="State 1429\n\l 41 attribute-argument-clause: '(' balanced-token-seq • ')'\l 67 balanced-token-seq: balanced-token-seq • balanced-token\l"]
  1429 -> 1423 [style=solid label="ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE"]
  1429 -> 1424 [style=solid label="'('"]
  1429 -> 1688 [style=solid label="')'"]
  1429 -> 1426 [style=solid label="'['"]
  1429 -> 1427 [style=solid label="'{'"]
  1429 -> 1689 [style=dashed label="balanced-token"]
  1430 [label="State 1430\n\l 51 attribute-specifier: '[' '[' attribute-using-prefix attribute-list ']' • ']'\l"]
  1430 -> 1690 [style=solid label="']'"]
  1431 [label="State 1431\n\l825 parameter-declaration: \"this\" decl-specifier-seq '=' • initializer-clause\l"]
  1431 -> 1 [style=solid label="IDENTIFIER"]
  1431 -> 361 [style=solid label="'+'"]
  1431 -> 362 [style=solid label="'-'"]
  1431 -> 363 [style=solid label="'('"]
  1431 -> 364 [style=solid label="'&'"]
  1431 -> 365 [style=solid label="\"::\""]
  1431 -> 366 [style=solid label="'['"]
  1431 -> 367 [style=solid label="\"co_await\""]
  1431 -> 939 [style=solid label="'{'"]
  1431 -> 368 [style=solid label="'0'"]
  1431 -> 369 [style=solid label="'1'"]
  1431 -> 370 [style=solid label="\"0b\""]
  1431 -> 371 [style=solid label="\"0B\""]
  1431 -> 372 [style=solid label="'\\''"]
  1431 -> 373 [style=solid label="\"false\""]
  1431 -> 374 [style=solid label="\"true\""]
  1431 -> 375 [style=solid label="\"noexcept\""]
  1431 -> 17 [style=solid label="\"operator\""]
  1431 -> 26 [style=solid label="\"decltype\""]
  1431 -> 376 [style=solid label="\"delete\""]
  1431 -> 377 [style=solid label="'.'"]
  1431 -> 378 [style=solid label="'2'"]
  1431 -> 379 [style=solid label="'3'"]
  1431 -> 380 [style=solid label="'4'"]
  1431 -> 381 [style=solid label="'5'"]
  1431 -> 382 [style=solid label="'6'"]
  1431 -> 383 [style=solid label="'7'"]
  1431 -> 384 [style=solid label="'8'"]
  1431 -> 385 [style=solid label="'9'"]
  1431 -> 185 [style=solid label="\"u8\""]
  1431 -> 186 [style=solid label="'u'"]
  1431 -> 187 [style=solid label="'U'"]
  1431 -> 188 [style=solid label="'L'"]
  1431 -> 386 [style=solid label="'*'"]
  1431 -> 203 [style=solid label="'\"'"]
  1431 -> 387 [style=solid label="\"0x\""]
  1431 -> 388 [style=solid label="\"0X\""]
  1431 -> 389 [style=solid label="\"requires\""]
  1431 -> 390 [style=solid label="\"new\""]
  1431 -> 391 [style=solid label="'~'"]
  1431 -> 392 [style=solid label="'!'"]
  1431 -> 393 [style=solid label="\"++\""]
  1431 -> 394 [style=solid label="\"--\""]
  1431 -> 395 [style=solid label="\"this\""]
  1431 -> 37 [style=solid label="\"auto\""]
  1431 -> 396 [style=solid label="\"nullptr\""]
  1431 -> 397 [style=solid label="\"dynamic_cast\""]
  1431 -> 398 [style=solid label="\"static_cast\""]
  1431 -> 399 [style=solid label="\"reinterpret_cast\""]
  1431 -> 400 [style=solid label="\"const_cast\""]
  1431 -> 401 [style=solid label="\"typeid\""]
  1431 -> 38 [style=solid label="\"char\""]
  1431 -> 39 [style=solid label="\"char8_t\""]
  1431 -> 40 [style=solid label="\"char16_t\""]
  1431 -> 41 [style=solid label="\"char32_t\""]
  1431 -> 42 [style=solid label="\"wchar_t\""]
  1431 -> 43 [style=solid label="\"bool\""]
  1431 -> 44 [style=solid label="\"short\""]
  1431 -> 45 [style=solid label="\"int\""]
  1431 -> 46 [style=solid label="\"long\""]
  1431 -> 47 [style=solid label="\"signed\""]
  1431 -> 48 [style=solid label="\"unsigned\""]
  1431 -> 49 [style=solid label="\"float\""]
  1431 -> 50 [style=solid label="\"double\""]
  1431 -> 51 [style=solid label="\"void\""]
  1431 -> 209 [style=solid label="'R'"]
  1431 -> 528 [style=solid label="\"throw\""]
  1431 -> 56 [style=solid label="\"typename\""]
  1431 -> 402 [style=solid label="\"sizeof\""]
  1431 -> 403 [style=solid label="\"alignof\""]
  1431 -> 529 [style=solid label="\"co_yield\""]
  1431 -> 404 [style=dashed label="additive-expression"]
  1431 -> 405 [style=dashed label="and-expression"]
  1431 -> 1141 [style=dashed label="assignment-expression"]
  1431 -> 406 [style=dashed label="await-expression"]
  1431 -> 407 [style=dashed label="binary-literal"]
  1431 -> 408 [style=dashed label="boolean-literal"]
  1431 -> 1142 [style=dashed label="braced-init-list"]
  1431 -> 409 [style=dashed label="cast-expression"]
  1431 -> 410 [style=dashed label="character-literal"]
  1431 -> 66 [style=dashed label="class-name"]
  1431 -> 411 [style=dashed label="compare-expression"]
  1431 -> 68 [style=dashed label="concept-name"]
  1431 -> 531 [style=dashed label="conditional-expression"]
  1431 -> 69 [style=dashed label="conversion-function-id"]
  1431 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1431 -> 415 [style=dashed label="decimal-literal"]
  1431 -> 77 [style=dashed label="decltype-specifier"]
  1431 -> 416 [style=dashed label="delete-expression"]
  1431 -> 417 [style=dashed label="digit"]
  1431 -> 418 [style=dashed label="digit-sequence"]
  1431 -> 419 [style=dashed label="encoding-prefix"]
  1431 -> 85 [style=dashed label="enum-name"]
  1431 -> 420 [style=dashed label="equality-expression"]
  1431 -> 421 [style=dashed label="exclusive-or-expression"]
  1431 -> 422 [style=dashed label="floating-point-literal"]
  1431 -> 423 [style=dashed label="fold-expression"]
  1431 -> 424 [style=dashed label="fractional-constant"]
  1431 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1431 -> 426 [style=dashed label="hexadecimal-literal"]
  1431 -> 427 [style=dashed label="hexadecimal-prefix"]
  1431 -> 428 [style=dashed label="id-expression"]
  1431 -> 429 [style=dashed label="inclusive-or-expression"]
  1431 -> 1691 [style=dashed label="initializer-clause"]
  1431 -> 430 [style=dashed label="integer-literal"]
  1431 -> 431 [style=dashed label="lambda-expression"]
  1431 -> 432 [style=dashed label="lambda-introducer"]
  1431 -> 433 [style=dashed label="literal"]
  1431 -> 96 [style=dashed label="literal-operator-id"]
  1431 -> 434 [style=dashed label="logical-and-expression"]
  1431 -> 533 [style=dashed label="logical-or-expression"]
  1431 -> 436 [style=dashed label="multiplicative-expression"]
  1431 -> 100 [style=dashed label="namespace-alias"]
  1431 -> 103 [style=dashed label="namespace-name"]
  1431 -> 437 [style=dashed label="nested-name-specifier"]
  1431 -> 438 [style=dashed label="new-expression"]
  1431 -> 439 [style=dashed label="noexcept-expression"]
  1431 -> 440 [style=dashed label="nonzero-digit"]
  1431 -> 441 [style=dashed label="octal-literal"]
  1431 -> 109 [style=dashed label="operator-function-id"]
  1431 -> 110 [style=dashed label="placeholder-type-specifier"]
  1431 -> 442 [style=dashed label="pm-expression"]
  1431 -> 443 [style=dashed label="pointer-literal"]
  1431 -> 444 [style=dashed label="postfix-expression"]
  1431 -> 445 [style=dashed label="primary-expression"]
  1431 -> 113 [style=dashed label="qualified-id"]
  1431 -> 446 [style=dashed label="relational-expression"]
  1431 -> 447 [style=dashed label="requires-expression"]
  1431 -> 448 [style=dashed label="shift-expression"]
  1431 -> 115 [style=dashed label="simple-template-id"]
  1431 -> 534 [style=dashed label="simple-type-specifier"]
  1431 -> 450 [style=dashed label="string-literal"]
  1431 -> 121 [style=dashed label="template-id"]
  1431 -> 216 [style=dashed label="template-name"]
  1431 -> 535 [style=dashed label="throw-expression"]
  1431 -> 124 [style=dashed label="type-constraint"]
  1431 -> 125 [style=dashed label="type-name"]
  1431 -> 127 [style=dashed label="typedef-name"]
  1431 -> 536 [style=dashed label="typename-specifier"]
  1431 -> 454 [style=dashed label="unary-expression"]
  1431 -> 455 [style=dashed label="unary-operator"]
  1431 -> 130 [style=dashed label="unqualified-id"]
  1431 -> 456 [style=dashed label="user-defined-character-literal"]
  1431 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1431 -> 458 [style=dashed label="user-defined-integer-literal"]
  1431 -> 459 [style=dashed label="user-defined-literal"]
  1431 -> 460 [style=dashed label="user-defined-string-literal"]
  1431 -> 537 [style=dashed label="yield-expression"]
  1432 [label="State 1432\n\l821 parameter-declaration: \"this\" decl-specifier-seq abstract-declarator •\l829                      | \"this\" decl-specifier-seq abstract-declarator • '=' initializer-clause\l"]
  1432 -> 1692 [style=solid label="'='"]
  1432 -> "1432R821" [style=solid]
 "1432R821" [label="R821", fillcolor=3, shape=diamond, style=filled]
  1433 [label="State 1433\n\l809 parameter-declaration: \"this\" decl-specifier-seq declarator •\l813                      | \"this\" decl-specifier-seq declarator • '=' initializer-clause\l"]
  1433 -> 1693 [style=solid label="'='"]
  1433 -> "1433R809" [style=solid]
 "1433R809" [label="R809", fillcolor=3, shape=diamond, style=filled]
  1434 [label="State 1434\n\l808 parameter-declaration: attribute-specifier-seq \"this\" decl-specifier-seq • declarator\l812                      | attribute-specifier-seq \"this\" decl-specifier-seq • declarator '=' initializer-clause\l816                      | attribute-specifier-seq \"this\" decl-specifier-seq •\l820                      | attribute-specifier-seq \"this\" decl-specifier-seq • abstract-declarator\l824                      | attribute-specifier-seq \"this\" decl-specifier-seq • '=' initializer-clause\l828                      | attribute-specifier-seq \"this\" decl-specifier-seq • abstract-declarator '=' initializer-clause\l"]
  1434 -> 148 [style=solid label="IDENTIFIER"]
  1434 -> 1694 [style=solid label="'='"]
  1434 -> 973 [style=solid label="'('"]
  1434 -> 974 [style=solid label="\"...\""]
  1434 -> 7 [style=solid label="'&'"]
  1434 -> 9 [style=solid label="\"::\""]
  1434 -> 945 [style=solid label="'['"]
  1434 -> 16 [style=solid label="\"&&\""]
  1434 -> 17 [style=solid label="\"operator\""]
  1434 -> 135 [style=solid label="\"decltype\""]
  1434 -> 32 [style=solid label="'*'"]
  1434 -> 36 [style=solid label="'~'"]
  1434 -> 1695 [style=dashed label="abstract-declarator"]
  1434 -> 947 [style=dashed label="abstract-pack-declarator"]
  1434 -> 66 [style=dashed label="class-name"]
  1434 -> 69 [style=dashed label="conversion-function-id"]
  1434 -> 1696 [style=dashed label="declarator"]
  1434 -> 76 [style=dashed label="declarator-id"]
  1434 -> 139 [style=dashed label="decltype-specifier"]
  1434 -> 85 [style=dashed label="enum-name"]
  1434 -> 94 [style=dashed label="id-expression"]
  1434 -> 96 [style=dashed label="literal-operator-id"]
  1434 -> 100 [style=dashed label="namespace-alias"]
  1434 -> 103 [style=dashed label="namespace-name"]
  1434 -> 149 [style=dashed label="nested-name-specifier"]
  1434 -> 948 [style=dashed label="noptr-abstract-declarator"]
  1434 -> 949 [style=dashed label="noptr-abstract-pack-declarator"]
  1434 -> 107 [style=dashed label="noptr-declarator"]
  1434 -> 109 [style=dashed label="operator-function-id"]
  1434 -> 950 [style=dashed label="parameters-and-qualifiers"]
  1434 -> 951 [style=dashed label="ptr-abstract-declarator"]
  1434 -> 111 [style=dashed label="ptr-declarator"]
  1434 -> 977 [style=dashed label="ptr-operator"]
  1434 -> 113 [style=dashed label="qualified-id"]
  1434 -> 115 [style=dashed label="simple-template-id"]
  1434 -> 121 [style=dashed label="template-id"]
  1434 -> 143 [style=dashed label="template-name"]
  1434 -> 144 [style=dashed label="type-name"]
  1434 -> 127 [style=dashed label="typedef-name"]
  1434 -> 130 [style=dashed label="unqualified-id"]
  1434 -> "1434R816d" [label="[\"...\"]", style=solid]
 "1434R816d" [label="R816", fillcolor=5, shape=diamond, style=filled]
  1434 -> "1434R816" [style=solid]
 "1434R816" [label="R816", fillcolor=3, shape=diamond, style=filled]
  1435 [label="State 1435\n\l822 parameter-declaration: attribute-specifier-seq decl-specifier-seq '=' • initializer-clause\l"]
  1435 -> 1 [style=solid label="IDENTIFIER"]
  1435 -> 361 [style=solid label="'+'"]
  1435 -> 362 [style=solid label="'-'"]
  1435 -> 363 [style=solid label="'('"]
  1435 -> 364 [style=solid label="'&'"]
  1435 -> 365 [style=solid label="\"::\""]
  1435 -> 366 [style=solid label="'['"]
  1435 -> 367 [style=solid label="\"co_await\""]
  1435 -> 939 [style=solid label="'{'"]
  1435 -> 368 [style=solid label="'0'"]
  1435 -> 369 [style=solid label="'1'"]
  1435 -> 370 [style=solid label="\"0b\""]
  1435 -> 371 [style=solid label="\"0B\""]
  1435 -> 372 [style=solid label="'\\''"]
  1435 -> 373 [style=solid label="\"false\""]
  1435 -> 374 [style=solid label="\"true\""]
  1435 -> 375 [style=solid label="\"noexcept\""]
  1435 -> 17 [style=solid label="\"operator\""]
  1435 -> 26 [style=solid label="\"decltype\""]
  1435 -> 376 [style=solid label="\"delete\""]
  1435 -> 377 [style=solid label="'.'"]
  1435 -> 378 [style=solid label="'2'"]
  1435 -> 379 [style=solid label="'3'"]
  1435 -> 380 [style=solid label="'4'"]
  1435 -> 381 [style=solid label="'5'"]
  1435 -> 382 [style=solid label="'6'"]
  1435 -> 383 [style=solid label="'7'"]
  1435 -> 384 [style=solid label="'8'"]
  1435 -> 385 [style=solid label="'9'"]
  1435 -> 185 [style=solid label="\"u8\""]
  1435 -> 186 [style=solid label="'u'"]
  1435 -> 187 [style=solid label="'U'"]
  1435 -> 188 [style=solid label="'L'"]
  1435 -> 386 [style=solid label="'*'"]
  1435 -> 203 [style=solid label="'\"'"]
  1435 -> 387 [style=solid label="\"0x\""]
  1435 -> 388 [style=solid label="\"0X\""]
  1435 -> 389 [style=solid label="\"requires\""]
  1435 -> 390 [style=solid label="\"new\""]
  1435 -> 391 [style=solid label="'~'"]
  1435 -> 392 [style=solid label="'!'"]
  1435 -> 393 [style=solid label="\"++\""]
  1435 -> 394 [style=solid label="\"--\""]
  1435 -> 395 [style=solid label="\"this\""]
  1435 -> 37 [style=solid label="\"auto\""]
  1435 -> 396 [style=solid label="\"nullptr\""]
  1435 -> 397 [style=solid label="\"dynamic_cast\""]
  1435 -> 398 [style=solid label="\"static_cast\""]
  1435 -> 399 [style=solid label="\"reinterpret_cast\""]
  1435 -> 400 [style=solid label="\"const_cast\""]
  1435 -> 401 [style=solid label="\"typeid\""]
  1435 -> 38 [style=solid label="\"char\""]
  1435 -> 39 [style=solid label="\"char8_t\""]
  1435 -> 40 [style=solid label="\"char16_t\""]
  1435 -> 41 [style=solid label="\"char32_t\""]
  1435 -> 42 [style=solid label="\"wchar_t\""]
  1435 -> 43 [style=solid label="\"bool\""]
  1435 -> 44 [style=solid label="\"short\""]
  1435 -> 45 [style=solid label="\"int\""]
  1435 -> 46 [style=solid label="\"long\""]
  1435 -> 47 [style=solid label="\"signed\""]
  1435 -> 48 [style=solid label="\"unsigned\""]
  1435 -> 49 [style=solid label="\"float\""]
  1435 -> 50 [style=solid label="\"double\""]
  1435 -> 51 [style=solid label="\"void\""]
  1435 -> 209 [style=solid label="'R'"]
  1435 -> 528 [style=solid label="\"throw\""]
  1435 -> 56 [style=solid label="\"typename\""]
  1435 -> 402 [style=solid label="\"sizeof\""]
  1435 -> 403 [style=solid label="\"alignof\""]
  1435 -> 529 [style=solid label="\"co_yield\""]
  1435 -> 404 [style=dashed label="additive-expression"]
  1435 -> 405 [style=dashed label="and-expression"]
  1435 -> 1141 [style=dashed label="assignment-expression"]
  1435 -> 406 [style=dashed label="await-expression"]
  1435 -> 407 [style=dashed label="binary-literal"]
  1435 -> 408 [style=dashed label="boolean-literal"]
  1435 -> 1142 [style=dashed label="braced-init-list"]
  1435 -> 409 [style=dashed label="cast-expression"]
  1435 -> 410 [style=dashed label="character-literal"]
  1435 -> 66 [style=dashed label="class-name"]
  1435 -> 411 [style=dashed label="compare-expression"]
  1435 -> 68 [style=dashed label="concept-name"]
  1435 -> 531 [style=dashed label="conditional-expression"]
  1435 -> 69 [style=dashed label="conversion-function-id"]
  1435 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1435 -> 415 [style=dashed label="decimal-literal"]
  1435 -> 77 [style=dashed label="decltype-specifier"]
  1435 -> 416 [style=dashed label="delete-expression"]
  1435 -> 417 [style=dashed label="digit"]
  1435 -> 418 [style=dashed label="digit-sequence"]
  1435 -> 419 [style=dashed label="encoding-prefix"]
  1435 -> 85 [style=dashed label="enum-name"]
  1435 -> 420 [style=dashed label="equality-expression"]
  1435 -> 421 [style=dashed label="exclusive-or-expression"]
  1435 -> 422 [style=dashed label="floating-point-literal"]
  1435 -> 423 [style=dashed label="fold-expression"]
  1435 -> 424 [style=dashed label="fractional-constant"]
  1435 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1435 -> 426 [style=dashed label="hexadecimal-literal"]
  1435 -> 427 [style=dashed label="hexadecimal-prefix"]
  1435 -> 428 [style=dashed label="id-expression"]
  1435 -> 429 [style=dashed label="inclusive-or-expression"]
  1435 -> 1697 [style=dashed label="initializer-clause"]
  1435 -> 430 [style=dashed label="integer-literal"]
  1435 -> 431 [style=dashed label="lambda-expression"]
  1435 -> 432 [style=dashed label="lambda-introducer"]
  1435 -> 433 [style=dashed label="literal"]
  1435 -> 96 [style=dashed label="literal-operator-id"]
  1435 -> 434 [style=dashed label="logical-and-expression"]
  1435 -> 533 [style=dashed label="logical-or-expression"]
  1435 -> 436 [style=dashed label="multiplicative-expression"]
  1435 -> 100 [style=dashed label="namespace-alias"]
  1435 -> 103 [style=dashed label="namespace-name"]
  1435 -> 437 [style=dashed label="nested-name-specifier"]
  1435 -> 438 [style=dashed label="new-expression"]
  1435 -> 439 [style=dashed label="noexcept-expression"]
  1435 -> 440 [style=dashed label="nonzero-digit"]
  1435 -> 441 [style=dashed label="octal-literal"]
  1435 -> 109 [style=dashed label="operator-function-id"]
  1435 -> 110 [style=dashed label="placeholder-type-specifier"]
  1435 -> 442 [style=dashed label="pm-expression"]
  1435 -> 443 [style=dashed label="pointer-literal"]
  1435 -> 444 [style=dashed label="postfix-expression"]
  1435 -> 445 [style=dashed label="primary-expression"]
  1435 -> 113 [style=dashed label="qualified-id"]
  1435 -> 446 [style=dashed label="relational-expression"]
  1435 -> 447 [style=dashed label="requires-expression"]
  1435 -> 448 [style=dashed label="shift-expression"]
  1435 -> 115 [style=dashed label="simple-template-id"]
  1435 -> 534 [style=dashed label="simple-type-specifier"]
  1435 -> 450 [style=dashed label="string-literal"]
  1435 -> 121 [style=dashed label="template-id"]
  1435 -> 216 [style=dashed label="template-name"]
  1435 -> 535 [style=dashed label="throw-expression"]
  1435 -> 124 [style=dashed label="type-constraint"]
  1435 -> 125 [style=dashed label="type-name"]
  1435 -> 127 [style=dashed label="typedef-name"]
  1435 -> 536 [style=dashed label="typename-specifier"]
  1435 -> 454 [style=dashed label="unary-expression"]
  1435 -> 455 [style=dashed label="unary-operator"]
  1435 -> 130 [style=dashed label="unqualified-id"]
  1435 -> 456 [style=dashed label="user-defined-character-literal"]
  1435 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1435 -> 458 [style=dashed label="user-defined-integer-literal"]
  1435 -> 459 [style=dashed label="user-defined-literal"]
  1435 -> 460 [style=dashed label="user-defined-string-literal"]
  1435 -> 537 [style=dashed label="yield-expression"]
  1436 [label="State 1436\n\l818 parameter-declaration: attribute-specifier-seq decl-specifier-seq abstract-declarator •\l826                      | attribute-specifier-seq decl-specifier-seq abstract-declarator • '=' initializer-clause\l"]
  1436 -> 1698 [style=solid label="'='"]
  1436 -> "1436R818" [style=solid]
 "1436R818" [label="R818", fillcolor=3, shape=diamond, style=filled]
  1437 [label="State 1437\n\l806 parameter-declaration: attribute-specifier-seq decl-specifier-seq declarator •\l810                      | attribute-specifier-seq decl-specifier-seq declarator • '=' initializer-clause\l"]
  1437 -> 1699 [style=solid label="'='"]
  1437 -> "1437R806" [style=solid]
 "1437R806" [label="R806", fillcolor=3, shape=diamond, style=filled]
  1438 [label="State 1438\n\l823 parameter-declaration: decl-specifier-seq '=' initializer-clause •\l"]
  1438 -> "1438R823" [style=solid]
 "1438R823" [label="R823", fillcolor=3, shape=diamond, style=filled]
  1439 [label="State 1439\n\l231 declarator-id: \"...\" • id-expression\l832 parameter-declaration-clause: \"...\" •\l"]
  1439 -> 148 [style=solid label="IDENTIFIER"]
  1439 -> 9 [style=solid label="\"::\""]
  1439 -> 17 [style=solid label="\"operator\""]
  1439 -> 135 [style=solid label="\"decltype\""]
  1439 -> 36 [style=solid label="'~'"]
  1439 -> 66 [style=dashed label="class-name"]
  1439 -> 69 [style=dashed label="conversion-function-id"]
  1439 -> 139 [style=dashed label="decltype-specifier"]
  1439 -> 85 [style=dashed label="enum-name"]
  1439 -> 152 [style=dashed label="id-expression"]
  1439 -> 96 [style=dashed label="literal-operator-id"]
  1439 -> 100 [style=dashed label="namespace-alias"]
  1439 -> 103 [style=dashed label="namespace-name"]
  1439 -> 153 [style=dashed label="nested-name-specifier"]
  1439 -> 109 [style=dashed label="operator-function-id"]
  1439 -> 113 [style=dashed label="qualified-id"]
  1439 -> 115 [style=dashed label="simple-template-id"]
  1439 -> 121 [style=dashed label="template-id"]
  1439 -> 143 [style=dashed label="template-name"]
  1439 -> 144 [style=dashed label="type-name"]
  1439 -> 127 [style=dashed label="typedef-name"]
  1439 -> 130 [style=dashed label="unqualified-id"]
  1439 -> "1439R832" [style=solid]
 "1439R832" [label="R832", fillcolor=3, shape=diamond, style=filled]
  1440 [label="State 1440\n\l893 ptr-abstract-declarator: ptr-operator •\l894                        | ptr-operator • ptr-abstract-declarator\l896 ptr-declarator: ptr-operator • ptr-declarator\l"]
  1440 -> 148 [style=solid label="IDENTIFIER"]
  1440 -> 973 [style=solid label="'('"]
  1440 -> 6 [style=solid label="\"...\""]
  1440 -> 7 [style=solid label="'&'"]
  1440 -> 9 [style=solid label="\"::\""]
  1440 -> 945 [style=solid label="'['"]
  1440 -> 16 [style=solid label="\"&&\""]
  1440 -> 17 [style=solid label="\"operator\""]
  1440 -> 135 [style=solid label="\"decltype\""]
  1440 -> 32 [style=solid label="'*'"]
  1440 -> 36 [style=solid label="'~'"]
  1440 -> 66 [style=dashed label="class-name"]
  1440 -> 69 [style=dashed label="conversion-function-id"]
  1440 -> 76 [style=dashed label="declarator-id"]
  1440 -> 139 [style=dashed label="decltype-specifier"]
  1440 -> 85 [style=dashed label="enum-name"]
  1440 -> 94 [style=dashed label="id-expression"]
  1440 -> 96 [style=dashed label="literal-operator-id"]
  1440 -> 100 [style=dashed label="namespace-alias"]
  1440 -> 103 [style=dashed label="namespace-name"]
  1440 -> 149 [style=dashed label="nested-name-specifier"]
  1440 -> 1403 [style=dashed label="noptr-abstract-declarator"]
  1440 -> 150 [style=dashed label="noptr-declarator"]
  1440 -> 109 [style=dashed label="operator-function-id"]
  1440 -> 1404 [style=dashed label="parameters-and-qualifiers"]
  1440 -> 1415 [style=dashed label="ptr-abstract-declarator"]
  1440 -> 337 [style=dashed label="ptr-declarator"]
  1440 -> 1440 [style=dashed label="ptr-operator"]
  1440 -> 113 [style=dashed label="qualified-id"]
  1440 -> 115 [style=dashed label="simple-template-id"]
  1440 -> 121 [style=dashed label="template-id"]
  1440 -> 143 [style=dashed label="template-name"]
  1440 -> 144 [style=dashed label="type-name"]
  1440 -> 127 [style=dashed label="typedef-name"]
  1440 -> 130 [style=dashed label="unqualified-id"]
  1440 -> "1440R893" [style=solid]
 "1440R893" [label="R893", fillcolor=3, shape=diamond, style=filled]
  1441 [label="State 1441\n\l827 parameter-declaration: decl-specifier-seq abstract-declarator '=' • initializer-clause\l"]
  1441 -> 1 [style=solid label="IDENTIFIER"]
  1441 -> 361 [style=solid label="'+'"]
  1441 -> 362 [style=solid label="'-'"]
  1441 -> 363 [style=solid label="'('"]
  1441 -> 364 [style=solid label="'&'"]
  1441 -> 365 [style=solid label="\"::\""]
  1441 -> 366 [style=solid label="'['"]
  1441 -> 367 [style=solid label="\"co_await\""]
  1441 -> 939 [style=solid label="'{'"]
  1441 -> 368 [style=solid label="'0'"]
  1441 -> 369 [style=solid label="'1'"]
  1441 -> 370 [style=solid label="\"0b\""]
  1441 -> 371 [style=solid label="\"0B\""]
  1441 -> 372 [style=solid label="'\\''"]
  1441 -> 373 [style=solid label="\"false\""]
  1441 -> 374 [style=solid label="\"true\""]
  1441 -> 375 [style=solid label="\"noexcept\""]
  1441 -> 17 [style=solid label="\"operator\""]
  1441 -> 26 [style=solid label="\"decltype\""]
  1441 -> 376 [style=solid label="\"delete\""]
  1441 -> 377 [style=solid label="'.'"]
  1441 -> 378 [style=solid label="'2'"]
  1441 -> 379 [style=solid label="'3'"]
  1441 -> 380 [style=solid label="'4'"]
  1441 -> 381 [style=solid label="'5'"]
  1441 -> 382 [style=solid label="'6'"]
  1441 -> 383 [style=solid label="'7'"]
  1441 -> 384 [style=solid label="'8'"]
  1441 -> 385 [style=solid label="'9'"]
  1441 -> 185 [style=solid label="\"u8\""]
  1441 -> 186 [style=solid label="'u'"]
  1441 -> 187 [style=solid label="'U'"]
  1441 -> 188 [style=solid label="'L'"]
  1441 -> 386 [style=solid label="'*'"]
  1441 -> 203 [style=solid label="'\"'"]
  1441 -> 387 [style=solid label="\"0x\""]
  1441 -> 388 [style=solid label="\"0X\""]
  1441 -> 389 [style=solid label="\"requires\""]
  1441 -> 390 [style=solid label="\"new\""]
  1441 -> 391 [style=solid label="'~'"]
  1441 -> 392 [style=solid label="'!'"]
  1441 -> 393 [style=solid label="\"++\""]
  1441 -> 394 [style=solid label="\"--\""]
  1441 -> 395 [style=solid label="\"this\""]
  1441 -> 37 [style=solid label="\"auto\""]
  1441 -> 396 [style=solid label="\"nullptr\""]
  1441 -> 397 [style=solid label="\"dynamic_cast\""]
  1441 -> 398 [style=solid label="\"static_cast\""]
  1441 -> 399 [style=solid label="\"reinterpret_cast\""]
  1441 -> 400 [style=solid label="\"const_cast\""]
  1441 -> 401 [style=solid label="\"typeid\""]
  1441 -> 38 [style=solid label="\"char\""]
  1441 -> 39 [style=solid label="\"char8_t\""]
  1441 -> 40 [style=solid label="\"char16_t\""]
  1441 -> 41 [style=solid label="\"char32_t\""]
  1441 -> 42 [style=solid label="\"wchar_t\""]
  1441 -> 43 [style=solid label="\"bool\""]
  1441 -> 44 [style=solid label="\"short\""]
  1441 -> 45 [style=solid label="\"int\""]
  1441 -> 46 [style=solid label="\"long\""]
  1441 -> 47 [style=solid label="\"signed\""]
  1441 -> 48 [style=solid label="\"unsigned\""]
  1441 -> 49 [style=solid label="\"float\""]
  1441 -> 50 [style=solid label="\"double\""]
  1441 -> 51 [style=solid label="\"void\""]
  1441 -> 209 [style=solid label="'R'"]
  1441 -> 528 [style=solid label="\"throw\""]
  1441 -> 56 [style=solid label="\"typename\""]
  1441 -> 402 [style=solid label="\"sizeof\""]
  1441 -> 403 [style=solid label="\"alignof\""]
  1441 -> 529 [style=solid label="\"co_yield\""]
  1441 -> 404 [style=dashed label="additive-expression"]
  1441 -> 405 [style=dashed label="and-expression"]
  1441 -> 1141 [style=dashed label="assignment-expression"]
  1441 -> 406 [style=dashed label="await-expression"]
  1441 -> 407 [style=dashed label="binary-literal"]
  1441 -> 408 [style=dashed label="boolean-literal"]
  1441 -> 1142 [style=dashed label="braced-init-list"]
  1441 -> 409 [style=dashed label="cast-expression"]
  1441 -> 410 [style=dashed label="character-literal"]
  1441 -> 66 [style=dashed label="class-name"]
  1441 -> 411 [style=dashed label="compare-expression"]
  1441 -> 68 [style=dashed label="concept-name"]
  1441 -> 531 [style=dashed label="conditional-expression"]
  1441 -> 69 [style=dashed label="conversion-function-id"]
  1441 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1441 -> 415 [style=dashed label="decimal-literal"]
  1441 -> 77 [style=dashed label="decltype-specifier"]
  1441 -> 416 [style=dashed label="delete-expression"]
  1441 -> 417 [style=dashed label="digit"]
  1441 -> 418 [style=dashed label="digit-sequence"]
  1441 -> 419 [style=dashed label="encoding-prefix"]
  1441 -> 85 [style=dashed label="enum-name"]
  1441 -> 420 [style=dashed label="equality-expression"]
  1441 -> 421 [style=dashed label="exclusive-or-expression"]
  1441 -> 422 [style=dashed label="floating-point-literal"]
  1441 -> 423 [style=dashed label="fold-expression"]
  1441 -> 424 [style=dashed label="fractional-constant"]
  1441 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1441 -> 426 [style=dashed label="hexadecimal-literal"]
  1441 -> 427 [style=dashed label="hexadecimal-prefix"]
  1441 -> 428 [style=dashed label="id-expression"]
  1441 -> 429 [style=dashed label="inclusive-or-expression"]
  1441 -> 1700 [style=dashed label="initializer-clause"]
  1441 -> 430 [style=dashed label="integer-literal"]
  1441 -> 431 [style=dashed label="lambda-expression"]
  1441 -> 432 [style=dashed label="lambda-introducer"]
  1441 -> 433 [style=dashed label="literal"]
  1441 -> 96 [style=dashed label="literal-operator-id"]
  1441 -> 434 [style=dashed label="logical-and-expression"]
  1441 -> 533 [style=dashed label="logical-or-expression"]
  1441 -> 436 [style=dashed label="multiplicative-expression"]
  1441 -> 100 [style=dashed label="namespace-alias"]
  1441 -> 103 [style=dashed label="namespace-name"]
  1441 -> 437 [style=dashed label="nested-name-specifier"]
  1441 -> 438 [style=dashed label="new-expression"]
  1441 -> 439 [style=dashed label="noexcept-expression"]
  1441 -> 440 [style=dashed label="nonzero-digit"]
  1441 -> 441 [style=dashed label="octal-literal"]
  1441 -> 109 [style=dashed label="operator-function-id"]
  1441 -> 110 [style=dashed label="placeholder-type-specifier"]
  1441 -> 442 [style=dashed label="pm-expression"]
  1441 -> 443 [style=dashed label="pointer-literal"]
  1441 -> 444 [style=dashed label="postfix-expression"]
  1441 -> 445 [style=dashed label="primary-expression"]
  1441 -> 113 [style=dashed label="qualified-id"]
  1441 -> 446 [style=dashed label="relational-expression"]
  1441 -> 447 [style=dashed label="requires-expression"]
  1441 -> 448 [style=dashed label="shift-expression"]
  1441 -> 115 [style=dashed label="simple-template-id"]
  1441 -> 534 [style=dashed label="simple-type-specifier"]
  1441 -> 450 [style=dashed label="string-literal"]
  1441 -> 121 [style=dashed label="template-id"]
  1441 -> 216 [style=dashed label="template-name"]
  1441 -> 535 [style=dashed label="throw-expression"]
  1441 -> 124 [style=dashed label="type-constraint"]
  1441 -> 125 [style=dashed label="type-name"]
  1441 -> 127 [style=dashed label="typedef-name"]
  1441 -> 536 [style=dashed label="typename-specifier"]
  1441 -> 454 [style=dashed label="unary-expression"]
  1441 -> 455 [style=dashed label="unary-operator"]
  1441 -> 130 [style=dashed label="unqualified-id"]
  1441 -> 456 [style=dashed label="user-defined-character-literal"]
  1441 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1441 -> 458 [style=dashed label="user-defined-integer-literal"]
  1441 -> 459 [style=dashed label="user-defined-literal"]
  1441 -> 460 [style=dashed label="user-defined-string-literal"]
  1441 -> 537 [style=dashed label="yield-expression"]
  1442 [label="State 1442\n\l811 parameter-declaration: decl-specifier-seq declarator '=' • initializer-clause\l"]
  1442 -> 1 [style=solid label="IDENTIFIER"]
  1442 -> 361 [style=solid label="'+'"]
  1442 -> 362 [style=solid label="'-'"]
  1442 -> 363 [style=solid label="'('"]
  1442 -> 364 [style=solid label="'&'"]
  1442 -> 365 [style=solid label="\"::\""]
  1442 -> 366 [style=solid label="'['"]
  1442 -> 367 [style=solid label="\"co_await\""]
  1442 -> 939 [style=solid label="'{'"]
  1442 -> 368 [style=solid label="'0'"]
  1442 -> 369 [style=solid label="'1'"]
  1442 -> 370 [style=solid label="\"0b\""]
  1442 -> 371 [style=solid label="\"0B\""]
  1442 -> 372 [style=solid label="'\\''"]
  1442 -> 373 [style=solid label="\"false\""]
  1442 -> 374 [style=solid label="\"true\""]
  1442 -> 375 [style=solid label="\"noexcept\""]
  1442 -> 17 [style=solid label="\"operator\""]
  1442 -> 26 [style=solid label="\"decltype\""]
  1442 -> 376 [style=solid label="\"delete\""]
  1442 -> 377 [style=solid label="'.'"]
  1442 -> 378 [style=solid label="'2'"]
  1442 -> 379 [style=solid label="'3'"]
  1442 -> 380 [style=solid label="'4'"]
  1442 -> 381 [style=solid label="'5'"]
  1442 -> 382 [style=solid label="'6'"]
  1442 -> 383 [style=solid label="'7'"]
  1442 -> 384 [style=solid label="'8'"]
  1442 -> 385 [style=solid label="'9'"]
  1442 -> 185 [style=solid label="\"u8\""]
  1442 -> 186 [style=solid label="'u'"]
  1442 -> 187 [style=solid label="'U'"]
  1442 -> 188 [style=solid label="'L'"]
  1442 -> 386 [style=solid label="'*'"]
  1442 -> 203 [style=solid label="'\"'"]
  1442 -> 387 [style=solid label="\"0x\""]
  1442 -> 388 [style=solid label="\"0X\""]
  1442 -> 389 [style=solid label="\"requires\""]
  1442 -> 390 [style=solid label="\"new\""]
  1442 -> 391 [style=solid label="'~'"]
  1442 -> 392 [style=solid label="'!'"]
  1442 -> 393 [style=solid label="\"++\""]
  1442 -> 394 [style=solid label="\"--\""]
  1442 -> 395 [style=solid label="\"this\""]
  1442 -> 37 [style=solid label="\"auto\""]
  1442 -> 396 [style=solid label="\"nullptr\""]
  1442 -> 397 [style=solid label="\"dynamic_cast\""]
  1442 -> 398 [style=solid label="\"static_cast\""]
  1442 -> 399 [style=solid label="\"reinterpret_cast\""]
  1442 -> 400 [style=solid label="\"const_cast\""]
  1442 -> 401 [style=solid label="\"typeid\""]
  1442 -> 38 [style=solid label="\"char\""]
  1442 -> 39 [style=solid label="\"char8_t\""]
  1442 -> 40 [style=solid label="\"char16_t\""]
  1442 -> 41 [style=solid label="\"char32_t\""]
  1442 -> 42 [style=solid label="\"wchar_t\""]
  1442 -> 43 [style=solid label="\"bool\""]
  1442 -> 44 [style=solid label="\"short\""]
  1442 -> 45 [style=solid label="\"int\""]
  1442 -> 46 [style=solid label="\"long\""]
  1442 -> 47 [style=solid label="\"signed\""]
  1442 -> 48 [style=solid label="\"unsigned\""]
  1442 -> 49 [style=solid label="\"float\""]
  1442 -> 50 [style=solid label="\"double\""]
  1442 -> 51 [style=solid label="\"void\""]
  1442 -> 209 [style=solid label="'R'"]
  1442 -> 528 [style=solid label="\"throw\""]
  1442 -> 56 [style=solid label="\"typename\""]
  1442 -> 402 [style=solid label="\"sizeof\""]
  1442 -> 403 [style=solid label="\"alignof\""]
  1442 -> 529 [style=solid label="\"co_yield\""]
  1442 -> 404 [style=dashed label="additive-expression"]
  1442 -> 405 [style=dashed label="and-expression"]
  1442 -> 1141 [style=dashed label="assignment-expression"]
  1442 -> 406 [style=dashed label="await-expression"]
  1442 -> 407 [style=dashed label="binary-literal"]
  1442 -> 408 [style=dashed label="boolean-literal"]
  1442 -> 1142 [style=dashed label="braced-init-list"]
  1442 -> 409 [style=dashed label="cast-expression"]
  1442 -> 410 [style=dashed label="character-literal"]
  1442 -> 66 [style=dashed label="class-name"]
  1442 -> 411 [style=dashed label="compare-expression"]
  1442 -> 68 [style=dashed label="concept-name"]
  1442 -> 531 [style=dashed label="conditional-expression"]
  1442 -> 69 [style=dashed label="conversion-function-id"]
  1442 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1442 -> 415 [style=dashed label="decimal-literal"]
  1442 -> 77 [style=dashed label="decltype-specifier"]
  1442 -> 416 [style=dashed label="delete-expression"]
  1442 -> 417 [style=dashed label="digit"]
  1442 -> 418 [style=dashed label="digit-sequence"]
  1442 -> 419 [style=dashed label="encoding-prefix"]
  1442 -> 85 [style=dashed label="enum-name"]
  1442 -> 420 [style=dashed label="equality-expression"]
  1442 -> 421 [style=dashed label="exclusive-or-expression"]
  1442 -> 422 [style=dashed label="floating-point-literal"]
  1442 -> 423 [style=dashed label="fold-expression"]
  1442 -> 424 [style=dashed label="fractional-constant"]
  1442 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1442 -> 426 [style=dashed label="hexadecimal-literal"]
  1442 -> 427 [style=dashed label="hexadecimal-prefix"]
  1442 -> 428 [style=dashed label="id-expression"]
  1442 -> 429 [style=dashed label="inclusive-or-expression"]
  1442 -> 1701 [style=dashed label="initializer-clause"]
  1442 -> 430 [style=dashed label="integer-literal"]
  1442 -> 431 [style=dashed label="lambda-expression"]
  1442 -> 432 [style=dashed label="lambda-introducer"]
  1442 -> 433 [style=dashed label="literal"]
  1442 -> 96 [style=dashed label="literal-operator-id"]
  1442 -> 434 [style=dashed label="logical-and-expression"]
  1442 -> 533 [style=dashed label="logical-or-expression"]
  1442 -> 436 [style=dashed label="multiplicative-expression"]
  1442 -> 100 [style=dashed label="namespace-alias"]
  1442 -> 103 [style=dashed label="namespace-name"]
  1442 -> 437 [style=dashed label="nested-name-specifier"]
  1442 -> 438 [style=dashed label="new-expression"]
  1442 -> 439 [style=dashed label="noexcept-expression"]
  1442 -> 440 [style=dashed label="nonzero-digit"]
  1442 -> 441 [style=dashed label="octal-literal"]
  1442 -> 109 [style=dashed label="operator-function-id"]
  1442 -> 110 [style=dashed label="placeholder-type-specifier"]
  1442 -> 442 [style=dashed label="pm-expression"]
  1442 -> 443 [style=dashed label="pointer-literal"]
  1442 -> 444 [style=dashed label="postfix-expression"]
  1442 -> 445 [style=dashed label="primary-expression"]
  1442 -> 113 [style=dashed label="qualified-id"]
  1442 -> 446 [style=dashed label="relational-expression"]
  1442 -> 447 [style=dashed label="requires-expression"]
  1442 -> 448 [style=dashed label="shift-expression"]
  1442 -> 115 [style=dashed label="simple-template-id"]
  1442 -> 534 [style=dashed label="simple-type-specifier"]
  1442 -> 450 [style=dashed label="string-literal"]
  1442 -> 121 [style=dashed label="template-id"]
  1442 -> 216 [style=dashed label="template-name"]
  1442 -> 535 [style=dashed label="throw-expression"]
  1442 -> 124 [style=dashed label="type-constraint"]
  1442 -> 125 [style=dashed label="type-name"]
  1442 -> 127 [style=dashed label="typedef-name"]
  1442 -> 536 [style=dashed label="typename-specifier"]
  1442 -> 454 [style=dashed label="unary-expression"]
  1442 -> 455 [style=dashed label="unary-operator"]
  1442 -> 130 [style=dashed label="unqualified-id"]
  1442 -> 456 [style=dashed label="user-defined-character-literal"]
  1442 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1442 -> 458 [style=dashed label="user-defined-integer-literal"]
  1442 -> 459 [style=dashed label="user-defined-literal"]
  1442 -> 460 [style=dashed label="user-defined-string-literal"]
  1442 -> 537 [style=dashed label="yield-expression"]
  1443 [label="State 1443\n\l1109 type-parameter: template-head type-parameter-key IDENTIFIER •\l1112               | template-head type-parameter-key IDENTIFIER • '=' id-expression\l"]
  1443 -> 1702 [style=solid label="'='"]
  1443 -> "1443R1109" [style=solid]
 "1443R1109" [label="R1109", fillcolor=3, shape=diamond, style=filled]
  1444 [label="State 1444\n\l1111 type-parameter: template-head type-parameter-key '=' • id-expression\l"]
  1444 -> 148 [style=solid label="IDENTIFIER"]
  1444 -> 9 [style=solid label="\"::\""]
  1444 -> 17 [style=solid label="\"operator\""]
  1444 -> 135 [style=solid label="\"decltype\""]
  1444 -> 36 [style=solid label="'~'"]
  1444 -> 66 [style=dashed label="class-name"]
  1444 -> 69 [style=dashed label="conversion-function-id"]
  1444 -> 139 [style=dashed label="decltype-specifier"]
  1444 -> 85 [style=dashed label="enum-name"]
  1444 -> 1703 [style=dashed label="id-expression"]
  1444 -> 96 [style=dashed label="literal-operator-id"]
  1444 -> 100 [style=dashed label="namespace-alias"]
  1444 -> 103 [style=dashed label="namespace-name"]
  1444 -> 153 [style=dashed label="nested-name-specifier"]
  1444 -> 109 [style=dashed label="operator-function-id"]
  1444 -> 113 [style=dashed label="qualified-id"]
  1444 -> 115 [style=dashed label="simple-template-id"]
  1444 -> 121 [style=dashed label="template-id"]
  1444 -> 143 [style=dashed label="template-name"]
  1444 -> 144 [style=dashed label="type-name"]
  1444 -> 127 [style=dashed label="typedef-name"]
  1444 -> 130 [style=dashed label="unqualified-id"]
  1445 [label="State 1445\n\l1108 type-parameter: template-head type-parameter-key \"...\" •\l1110               | template-head type-parameter-key \"...\" • IDENTIFIER\l"]
  1445 -> 1704 [style=solid label="IDENTIFIER"]
  1445 -> "1445R1108" [style=solid]
 "1445R1108" [label="R1108", fillcolor=3, shape=diamond, style=filled]
  1446 [label="State 1446\n\l1070 template-parameter-list: template-parameter-list ',' template-parameter •\l"]
  1446 -> "1446R1070" [style=solid]
 "1446R1070" [label="R1070", fillcolor=3, shape=diamond, style=filled]
  1447 [label="State 1447\n\l1060 template-head: \"template\" '<' template-parameter-list '>' requires-clause •\l"]
  1447 -> "1447R1060" [style=solid]
 "1447R1060" [label="R1060", fillcolor=3, shape=diamond, style=filled]
  1448 [label="State 1448\n\l1106 type-parameter: type-constraint IDENTIFIER '=' • type-id\l"]
  1448 -> 161 [style=solid label="IDENTIFIER"]
  1448 -> 9 [style=solid label="\"::\""]
  1448 -> 12 [style=solid label="\"class\""]
  1448 -> 13 [style=solid label="\"struct\""]
  1448 -> 14 [style=solid label="\"union\""]
  1448 -> 18 [style=solid label="\"const\""]
  1448 -> 19 [style=solid label="\"volatile\""]
  1448 -> 26 [style=solid label="\"decltype\""]
  1448 -> 136 [style=solid label="\"enum\""]
  1448 -> 37 [style=solid label="\"auto\""]
  1448 -> 38 [style=solid label="\"char\""]
  1448 -> 39 [style=solid label="\"char8_t\""]
  1448 -> 40 [style=solid label="\"char16_t\""]
  1448 -> 41 [style=solid label="\"char32_t\""]
  1448 -> 42 [style=solid label="\"wchar_t\""]
  1448 -> 43 [style=solid label="\"bool\""]
  1448 -> 44 [style=solid label="\"short\""]
  1448 -> 45 [style=solid label="\"int\""]
  1448 -> 46 [style=solid label="\"long\""]
  1448 -> 47 [style=solid label="\"signed\""]
  1448 -> 48 [style=solid label="\"unsigned\""]
  1448 -> 49 [style=solid label="\"float\""]
  1448 -> 50 [style=solid label="\"double\""]
  1448 -> 51 [style=solid label="\"void\""]
  1448 -> 56 [style=solid label="\"typename\""]
  1448 -> 210 [style=dashed label="class-key"]
  1448 -> 66 [style=dashed label="class-name"]
  1448 -> 68 [style=dashed label="concept-name"]
  1448 -> 70 [style=dashed label="cv-qualifier"]
  1448 -> 77 [style=dashed label="decltype-specifier"]
  1448 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1448 -> 81 [style=dashed label="elaborated-type-specifier"]
  1448 -> 85 [style=dashed label="enum-name"]
  1448 -> 100 [style=dashed label="namespace-alias"]
  1448 -> 103 [style=dashed label="namespace-name"]
  1448 -> 213 [style=dashed label="nested-name-specifier"]
  1448 -> 110 [style=dashed label="placeholder-type-specifier"]
  1448 -> 142 [style=dashed label="simple-template-id"]
  1448 -> 116 [style=dashed label="simple-type-specifier"]
  1448 -> 216 [style=dashed label="template-name"]
  1448 -> 124 [style=dashed label="type-constraint"]
  1448 -> 1705 [style=dashed label="type-id"]
  1448 -> 125 [style=dashed label="type-name"]
  1448 -> 217 [style=dashed label="type-specifier"]
  1448 -> 452 [style=dashed label="type-specifier-seq"]
  1448 -> 127 [style=dashed label="typedef-name"]
  1448 -> 128 [style=dashed label="typename-specifier"]
  1449 [label="State 1449\n\l1105 type-parameter: type-constraint '=' type-id •\l"]
  1449 -> "1449R1105" [style=solid]
 "1449R1105" [label="R1105", fillcolor=3, shape=diamond, style=filled]
  1450 [label="State 1450\n\l1104 type-parameter: type-constraint \"...\" IDENTIFIER •\l"]
  1450 -> "1450R1104" [style=solid]
 "1450R1104" [label="R1104", fillcolor=3, shape=diamond, style=filled]
  1451 [label="State 1451\n\l1100 type-parameter: type-parameter-key IDENTIFIER '=' • type-id\l"]
  1451 -> 161 [style=solid label="IDENTIFIER"]
  1451 -> 9 [style=solid label="\"::\""]
  1451 -> 12 [style=solid label="\"class\""]
  1451 -> 13 [style=solid label="\"struct\""]
  1451 -> 14 [style=solid label="\"union\""]
  1451 -> 18 [style=solid label="\"const\""]
  1451 -> 19 [style=solid label="\"volatile\""]
  1451 -> 26 [style=solid label="\"decltype\""]
  1451 -> 136 [style=solid label="\"enum\""]
  1451 -> 37 [style=solid label="\"auto\""]
  1451 -> 38 [style=solid label="\"char\""]
  1451 -> 39 [style=solid label="\"char8_t\""]
  1451 -> 40 [style=solid label="\"char16_t\""]
  1451 -> 41 [style=solid label="\"char32_t\""]
  1451 -> 42 [style=solid label="\"wchar_t\""]
  1451 -> 43 [style=solid label="\"bool\""]
  1451 -> 44 [style=solid label="\"short\""]
  1451 -> 45 [style=solid label="\"int\""]
  1451 -> 46 [style=solid label="\"long\""]
  1451 -> 47 [style=solid label="\"signed\""]
  1451 -> 48 [style=solid label="\"unsigned\""]
  1451 -> 49 [style=solid label="\"float\""]
  1451 -> 50 [style=solid label="\"double\""]
  1451 -> 51 [style=solid label="\"void\""]
  1451 -> 56 [style=solid label="\"typename\""]
  1451 -> 210 [style=dashed label="class-key"]
  1451 -> 66 [style=dashed label="class-name"]
  1451 -> 68 [style=dashed label="concept-name"]
  1451 -> 70 [style=dashed label="cv-qualifier"]
  1451 -> 77 [style=dashed label="decltype-specifier"]
  1451 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1451 -> 81 [style=dashed label="elaborated-type-specifier"]
  1451 -> 85 [style=dashed label="enum-name"]
  1451 -> 100 [style=dashed label="namespace-alias"]
  1451 -> 103 [style=dashed label="namespace-name"]
  1451 -> 213 [style=dashed label="nested-name-specifier"]
  1451 -> 110 [style=dashed label="placeholder-type-specifier"]
  1451 -> 142 [style=dashed label="simple-template-id"]
  1451 -> 116 [style=dashed label="simple-type-specifier"]
  1451 -> 216 [style=dashed label="template-name"]
  1451 -> 124 [style=dashed label="type-constraint"]
  1451 -> 1706 [style=dashed label="type-id"]
  1451 -> 125 [style=dashed label="type-name"]
  1451 -> 217 [style=dashed label="type-specifier"]
  1451 -> 452 [style=dashed label="type-specifier-seq"]
  1451 -> 127 [style=dashed label="typedef-name"]
  1451 -> 128 [style=dashed label="typename-specifier"]
  1452 [label="State 1452\n\l1099 type-parameter: type-parameter-key '=' type-id •\l"]
  1452 -> "1452R1099" [style=solid]
 "1452R1099" [label="R1099", fillcolor=3, shape=diamond, style=filled]
  1453 [label="State 1453\n\l1098 type-parameter: type-parameter-key \"...\" IDENTIFIER •\l"]
  1453 -> "1453R1098" [style=solid]
 "1453R1098" [label="R1098", fillcolor=3, shape=diamond, style=filled]
  1454 [label="State 1454\n\l750 octal-escape-sequence: '\\\\' octal-digit octal-digit •\l751                      | '\\\\' octal-digit octal-digit • octal-digit\l"]
  1454 -> 912 [style=solid label="'0'"]
  1454 -> 913 [style=solid label="'1'"]
  1454 -> 915 [style=solid label="'2'"]
  1454 -> 916 [style=solid label="'3'"]
  1454 -> 917 [style=solid label="'4'"]
  1454 -> 918 [style=solid label="'5'"]
  1454 -> 919 [style=solid label="'6'"]
  1454 -> 920 [style=solid label="'7'"]
  1454 -> 1707 [style=dashed label="octal-digit"]
  1454 -> "1454R750" [style=solid]
 "1454R750" [label="R750", fillcolor=3, shape=diamond, style=filled]
  1455 [label="State 1455\n\l425 hex-quad: hexadecimal-digit hexadecimal-digit • hexadecimal-digit hexadecimal-digit\l"]
  1455 -> 870 [style=solid label="'0'"]
  1455 -> 871 [style=solid label="'1'"]
  1455 -> 873 [style=solid label="'2'"]
  1455 -> 874 [style=solid label="'3'"]
  1455 -> 875 [style=solid label="'4'"]
  1455 -> 876 [style=solid label="'5'"]
  1455 -> 877 [style=solid label="'6'"]
  1455 -> 878 [style=solid label="'7'"]
  1455 -> 879 [style=solid label="'8'"]
  1455 -> 880 [style=solid label="'9'"]
  1455 -> 881 [style=solid label="'e'"]
  1455 -> 882 [style=solid label="'E'"]
  1455 -> 883 [style=solid label="'f'"]
  1455 -> 884 [style=solid label="'F'"]
  1455 -> 885 [style=solid label="'a'"]
  1455 -> 886 [style=solid label="'b'"]
  1455 -> 887 [style=solid label="'c'"]
  1455 -> 888 [style=solid label="'d'"]
  1455 -> 889 [style=solid label="'A'"]
  1455 -> 890 [style=solid label="'B'"]
  1455 -> 891 [style=solid label="'C'"]
  1455 -> 892 [style=solid label="'D'"]
  1455 -> 1708 [style=dashed label="hexadecimal-digit"]
  1456 [label="State 1456\n\l1149 universal-character-name: \"\\\\U\" hex-quad hex-quad •\l"]
  1456 -> "1456R1149" [style=solid]
 "1456R1149" [label="R1149", fillcolor=3, shape=diamond, style=filled]
  1457 [label="State 1457\n\l917 r-char: EXCEPT_RIGHT_PARENTHESIS_FOLLOWED_BY_THE_INITIAL_D_CHAR_SEQUENCE_FOLLOWED_BY_QUOTATION_MARK •\l"]
  1457 -> "1457R917" [style=solid]
 "1457R917" [label="R917", fillcolor=3, shape=diamond, style=filled]
  1458 [label="State 1458\n\l920 raw-string: '\"' '(' ')' • '\"'\l924           | '\"' '(' ')' • d-char-sequence '\"'\l"]
  1458 -> 1013 [style=solid label="EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE"]
  1458 -> 1709 [style=solid label="'\"'"]
  1458 -> 1015 [style=dashed label="d-char"]
  1458 -> 1710 [style=dashed label="d-char-sequence"]
  1459 [label="State 1459\n\l918 r-char-sequence: r-char •\l"]
  1459 -> "1459R918" [style=solid]
 "1459R918" [label="R918", fillcolor=3, shape=diamond, style=filled]
  1460 [label="State 1460\n\l919 r-char-sequence: r-char-sequence • r-char\l922 raw-string: '\"' '(' r-char-sequence • ')' '\"'\l926           | '\"' '(' r-char-sequence • ')' d-char-sequence '\"'\l"]
  1460 -> 1457 [style=solid label="EXCEPT_RIGHT_PARENTHESIS_FOLLOWED_BY_THE_INITIAL_D_CHAR_SEQUENCE_FOLLOWED_BY_QUOTATION_MARK"]
  1460 -> 1711 [style=solid label="')'"]
  1460 -> 1712 [style=dashed label="r-char"]
  1461 [label="State 1461\n\l921 raw-string: '\"' d-char-sequence '(' • ')' '\"'\l923           | '\"' d-char-sequence '(' • r-char-sequence ')' '\"'\l925           | '\"' d-char-sequence '(' • ')' d-char-sequence '\"'\l927           | '\"' d-char-sequence '(' • r-char-sequence ')' d-char-sequence '\"'\l"]
  1461 -> 1457 [style=solid label="EXCEPT_RIGHT_PARENTHESIS_FOLLOWED_BY_THE_INITIAL_D_CHAR_SEQUENCE_FOLLOWED_BY_QUOTATION_MARK"]
  1461 -> 1713 [style=solid label="')'"]
  1461 -> 1459 [style=dashed label="r-char"]
  1461 -> 1714 [style=dashed label="r-char-sequence"]
  1462 [label="State 1462\n\l191 d-char-sequence: d-char-sequence d-char •\l"]
  1462 -> "1462R191" [style=solid]
 "1462R191" [label="R191", fillcolor=3, shape=diamond, style=filled]
  1463 [label="State 1463\n\l270 elaborated-type-specifier: class-key attribute-specifier-seq nested-name-specifier IDENTIFIER •\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l"]
  1463 -> 726 [style=solid label="\"::\""]
  1463 -> "1463R270d" [label="[\"::\"]", style=solid]
 "1463R270d" [label="R270", fillcolor=5, shape=diamond, style=filled]
  1463 -> "1463R270" [style=solid]
 "1463R270" [label="R270", fillcolor=3, shape=diamond, style=filled]
  1463 -> "1463R1066d" [label="['<']", style=solid]
 "1463R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  1464 [label="State 1464\n\l1046 string-literal: encoding-prefix '\"' s-char-sequence '\"' •\l"]
  1464 -> "1464R1046" [style=solid]
 "1464R1046" [label="R1046", fillcolor=3, shape=diamond, style=filled]
  1465 [label="State 1465\n\l761 operator-function-id: \"operator\" overloadable-operator '<' template-argument-list '>' •\l"]
  1465 -> "1465R761" [style=solid]
 "1465R761" [label="R761", fillcolor=3, shape=diamond, style=filled]
  1466 [label="State 1466\n\l647 named-namespace-definition: \"inline\" \"namespace\" IDENTIFIER '{' namespace-body • '}'\l"]
  1466 -> 1715 [style=solid label="'}'"]
  1467 [label="State 1467\n\l1150 unnamed-namespace-definition: \"inline\" \"namespace\" '{' namespace-body '}' •\l"]
  1467 -> "1467R1150" [style=solid]
 "1467R1150" [label="R1150", fillcolor=3, shape=diamond, style=filled]
  1468 [label="State 1468\n\l649 named-namespace-definition: \"inline\" \"namespace\" attribute-specifier-seq IDENTIFIER '{' • namespace-body '}'\l"]
  1468 -> 1 [style=solid label="IDENTIFIER"]
  1468 -> 2 [style=solid label="\"using\""]
  1468 -> 3 [style=solid label="';'"]
  1468 -> 4 [style=solid label="\"alignas\""]
  1468 -> 5 [style=solid label="'('"]
  1468 -> 6 [style=solid label="\"...\""]
  1468 -> 7 [style=solid label="'&'"]
  1468 -> 8 [style=solid label="\"asm\""]
  1468 -> 9 [style=solid label="\"::\""]
  1468 -> 10 [style=solid label="'['"]
  1468 -> 11 [style=solid label="\"virtual\""]
  1468 -> 12 [style=solid label="\"class\""]
  1468 -> 13 [style=solid label="\"struct\""]
  1468 -> 14 [style=solid label="\"union\""]
  1468 -> 15 [style=solid label="\"template\""]
  1468 -> 16 [style=solid label="\"&&\""]
  1468 -> 17 [style=solid label="\"operator\""]
  1468 -> 18 [style=solid label="\"const\""]
  1468 -> 19 [style=solid label="\"volatile\""]
  1468 -> 20 [style=solid label="\"friend\""]
  1468 -> 21 [style=solid label="\"typedef\""]
  1468 -> 22 [style=solid label="\"constexpr\""]
  1468 -> 23 [style=solid label="\"consteval\""]
  1468 -> 24 [style=solid label="\"constinit\""]
  1468 -> 25 [style=solid label="\"inline\""]
  1468 -> 26 [style=solid label="\"decltype\""]
  1468 -> 27 [style=solid label="\"enum\""]
  1468 -> 28 [style=solid label="\"extern\""]
  1468 -> 29 [style=solid label="\"explicit\""]
  1468 -> 30 [style=solid label="\"export\""]
  1468 -> 158 [style=solid label="\"export-keyword\""]
  1468 -> 32 [style=solid label="'*'"]
  1468 -> 34 [style=solid label="\"import-keyword\""]
  1468 -> 35 [style=solid label="\"namespace\""]
  1468 -> 36 [style=solid label="'~'"]
  1468 -> 37 [style=solid label="\"auto\""]
  1468 -> 38 [style=solid label="\"char\""]
  1468 -> 39 [style=solid label="\"char8_t\""]
  1468 -> 40 [style=solid label="\"char16_t\""]
  1468 -> 41 [style=solid label="\"char32_t\""]
  1468 -> 42 [style=solid label="\"wchar_t\""]
  1468 -> 43 [style=solid label="\"bool\""]
  1468 -> 44 [style=solid label="\"short\""]
  1468 -> 45 [style=solid label="\"int\""]
  1468 -> 46 [style=solid label="\"long\""]
  1468 -> 47 [style=solid label="\"signed\""]
  1468 -> 48 [style=solid label="\"unsigned\""]
  1468 -> 49 [style=solid label="\"float\""]
  1468 -> 50 [style=solid label="\"double\""]
  1468 -> 51 [style=solid label="\"void\""]
  1468 -> 52 [style=solid label="\"static_assert\""]
  1468 -> 53 [style=solid label="\"static\""]
  1468 -> 54 [style=solid label="\"thread_local\""]
  1468 -> 55 [style=solid label="\"mutable\""]
  1468 -> 56 [style=solid label="\"typename\""]
  1468 -> 57 [style=dashed label="alias-declaration"]
  1468 -> 58 [style=dashed label="alignment-specifier"]
  1468 -> 59 [style=dashed label="asm-declaration"]
  1468 -> 60 [style=dashed label="attribute-declaration"]
  1468 -> 61 [style=dashed label="attribute-specifier"]
  1468 -> 62 [style=dashed label="attribute-specifier-seq"]
  1468 -> 63 [style=dashed label="block-declaration"]
  1468 -> 64 [style=dashed label="class-head"]
  1468 -> 65 [style=dashed label="class-key"]
  1468 -> 66 [style=dashed label="class-name"]
  1468 -> 67 [style=dashed label="class-specifier"]
  1468 -> 68 [style=dashed label="concept-name"]
  1468 -> 69 [style=dashed label="conversion-function-id"]
  1468 -> 70 [style=dashed label="cv-qualifier"]
  1468 -> 71 [style=dashed label="decl-specifier"]
  1468 -> 72 [style=dashed label="decl-specifier-seq"]
  1468 -> 73 [style=dashed label="declaration"]
  1468 -> 570 [style=dashed label="declaration-seq"]
  1468 -> 75 [style=dashed label="declarator"]
  1468 -> 76 [style=dashed label="declarator-id"]
  1468 -> 77 [style=dashed label="decltype-specifier"]
  1468 -> 78 [style=dashed label="deduction-guide"]
  1468 -> 79 [style=dashed label="defining-type-specifier"]
  1468 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1468 -> 81 [style=dashed label="elaborated-type-specifier"]
  1468 -> 82 [style=dashed label="empty-declaration"]
  1468 -> 83 [style=dashed label="enum-head"]
  1468 -> 84 [style=dashed label="enum-key"]
  1468 -> 85 [style=dashed label="enum-name"]
  1468 -> 86 [style=dashed label="enum-specifier"]
  1468 -> 87 [style=dashed label="explicit-instantiation"]
  1468 -> 88 [style=dashed label="explicit-specialization"]
  1468 -> 89 [style=dashed label="explicit-specifier"]
  1468 -> 90 [style=dashed label="export-declaration"]
  1468 -> 91 [style=dashed label="function-definition"]
  1468 -> 92 [style=dashed label="function-specifier"]
  1468 -> 94 [style=dashed label="id-expression"]
  1468 -> 95 [style=dashed label="linkage-specification"]
  1468 -> 96 [style=dashed label="literal-operator-id"]
  1468 -> 98 [style=dashed label="module-import-declaration"]
  1468 -> 99 [style=dashed label="named-namespace-definition"]
  1468 -> 100 [style=dashed label="namespace-alias"]
  1468 -> 101 [style=dashed label="namespace-alias-definition"]
  1468 -> 1716 [style=dashed label="namespace-body"]
  1468 -> 102 [style=dashed label="namespace-definition"]
  1468 -> 103 [style=dashed label="namespace-name"]
  1468 -> 104 [style=dashed label="nested-name-specifier"]
  1468 -> 105 [style=dashed label="nested-namespace-definition"]
  1468 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  1468 -> 107 [style=dashed label="noptr-declarator"]
  1468 -> 108 [style=dashed label="opaque-enum-declaration"]
  1468 -> 109 [style=dashed label="operator-function-id"]
  1468 -> 110 [style=dashed label="placeholder-type-specifier"]
  1468 -> 111 [style=dashed label="ptr-declarator"]
  1468 -> 112 [style=dashed label="ptr-operator"]
  1468 -> 113 [style=dashed label="qualified-id"]
  1468 -> 114 [style=dashed label="simple-declaration"]
  1468 -> 115 [style=dashed label="simple-template-id"]
  1468 -> 116 [style=dashed label="simple-type-specifier"]
  1468 -> 117 [style=dashed label="static_assert-declaration"]
  1468 -> 118 [style=dashed label="storage-class-specifier"]
  1468 -> 119 [style=dashed label="template-declaration"]
  1468 -> 120 [style=dashed label="template-head"]
  1468 -> 121 [style=dashed label="template-id"]
  1468 -> 122 [style=dashed label="template-name"]
  1468 -> 124 [style=dashed label="type-constraint"]
  1468 -> 125 [style=dashed label="type-name"]
  1468 -> 126 [style=dashed label="type-specifier"]
  1468 -> 127 [style=dashed label="typedef-name"]
  1468 -> 128 [style=dashed label="typename-specifier"]
  1468 -> 129 [style=dashed label="unnamed-namespace-definition"]
  1468 -> 130 [style=dashed label="unqualified-id"]
  1468 -> 131 [style=dashed label="using-declaration"]
  1468 -> 132 [style=dashed label="using-directive"]
  1468 -> 133 [style=dashed label="using-enum-declaration"]
  1469 [label="State 1469\n\l1152 unnamed-namespace-definition: \"inline\" \"namespace\" attribute-specifier-seq '{' namespace-body • '}'\l"]
  1469 -> 1717 [style=solid label="'}'"]
  1470 [label="State 1470\n\l338 expression: expression ',' assignment-expression •\l"]
  1470 -> "1470R338" [style=solid]
 "1470R338" [label="R338", fillcolor=3, shape=diamond, style=filled]
  1471 [label="State 1471\n\l 26 assignment-expression: logical-or-expression assignment-operator initializer-clause •\l"]
  1471 -> "1471R26" [style=solid]
 "1471R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  1472 [label="State 1472\n\l556 linkage-specification: \"extern\" string-literal '{' declaration-seq '}' •\l"]
  1472 -> "1472R556" [style=solid]
 "1472R556" [label="R556", fillcolor=3, shape=diamond, style=filled]
  1473 [label="State 1473\n\l627 module-declaration: \"export-keyword\" \"module-keyword\" module-name attribute-specifier-seq ';' •\l"]
  1473 -> "1473R627" [style=solid]
 "1473R627" [label="R627", fillcolor=3, shape=diamond, style=filled]
  1474 [label="State 1474\n\l625 module-declaration: \"export-keyword\" \"module-keyword\" module-name module-partition ';' •\l"]
  1474 -> "1474R625" [style=solid]
 "1474R625" [label="R625", fillcolor=3, shape=diamond, style=filled]
  1475 [label="State 1475\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l629 module-declaration: \"export-keyword\" \"module-keyword\" module-name module-partition attribute-specifier-seq • ';'\l"]
  1475 -> 1718 [style=solid label="';'"]
  1475 -> 4 [style=solid label="\"alignas\""]
  1475 -> 10 [style=solid label="'['"]
  1475 -> 58 [style=dashed label="alignment-specifier"]
  1475 -> 265 [style=dashed label="attribute-specifier"]
  1476 [label="State 1476\n\l630 module-declaration: \"module-keyword\" module-name module-partition attribute-specifier-seq ';' •\l"]
  1476 -> "1476R630" [style=solid]
 "1476R630" [label="R630", fillcolor=3, shape=diamond, style=filled]
  1477 [label="State 1477\n\l915 qualified-namespace-specifier: nested-name-specifier namespace-name •\l"]
  1477 -> "1477R915" [style=solid]
 "1477R915" [label="R915", fillcolor=3, shape=diamond, style=filled]
  1478 [label="State 1478\n\l652 namespace-alias-definition: \"namespace\" IDENTIFIER '=' qualified-namespace-specifier ';' •\l"]
  1478 -> "1478R652" [style=solid]
 "1478R652" [label="R652", fillcolor=3, shape=diamond, style=filled]
  1479 [label="State 1479\n\l648 named-namespace-definition: \"namespace\" IDENTIFIER '{' namespace-body '}' •\l"]
  1479 -> "1479R648" [style=solid]
 "1479R648" [label="R648", fillcolor=3, shape=diamond, style=filled]
  1480 [label="State 1480\n\l650 named-namespace-definition: \"namespace\" attribute-specifier-seq IDENTIFIER '{' namespace-body • '}'\l"]
  1480 -> 1719 [style=solid label="'}'"]
  1481 [label="State 1481\n\l1153 unnamed-namespace-definition: \"namespace\" attribute-specifier-seq '{' namespace-body '}' •\l"]
  1481 -> "1481R1153" [style=solid]
 "1481R1153" [label="R1153", fillcolor=3, shape=diamond, style=filled]
  1482 [label="State 1482\n\l666 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" IDENTIFIER '{' • namespace-body '}'\l"]
  1482 -> 1 [style=solid label="IDENTIFIER"]
  1482 -> 2 [style=solid label="\"using\""]
  1482 -> 3 [style=solid label="';'"]
  1482 -> 4 [style=solid label="\"alignas\""]
  1482 -> 5 [style=solid label="'('"]
  1482 -> 6 [style=solid label="\"...\""]
  1482 -> 7 [style=solid label="'&'"]
  1482 -> 8 [style=solid label="\"asm\""]
  1482 -> 9 [style=solid label="\"::\""]
  1482 -> 10 [style=solid label="'['"]
  1482 -> 11 [style=solid label="\"virtual\""]
  1482 -> 12 [style=solid label="\"class\""]
  1482 -> 13 [style=solid label="\"struct\""]
  1482 -> 14 [style=solid label="\"union\""]
  1482 -> 15 [style=solid label="\"template\""]
  1482 -> 16 [style=solid label="\"&&\""]
  1482 -> 17 [style=solid label="\"operator\""]
  1482 -> 18 [style=solid label="\"const\""]
  1482 -> 19 [style=solid label="\"volatile\""]
  1482 -> 20 [style=solid label="\"friend\""]
  1482 -> 21 [style=solid label="\"typedef\""]
  1482 -> 22 [style=solid label="\"constexpr\""]
  1482 -> 23 [style=solid label="\"consteval\""]
  1482 -> 24 [style=solid label="\"constinit\""]
  1482 -> 25 [style=solid label="\"inline\""]
  1482 -> 26 [style=solid label="\"decltype\""]
  1482 -> 27 [style=solid label="\"enum\""]
  1482 -> 28 [style=solid label="\"extern\""]
  1482 -> 29 [style=solid label="\"explicit\""]
  1482 -> 30 [style=solid label="\"export\""]
  1482 -> 158 [style=solid label="\"export-keyword\""]
  1482 -> 32 [style=solid label="'*'"]
  1482 -> 34 [style=solid label="\"import-keyword\""]
  1482 -> 35 [style=solid label="\"namespace\""]
  1482 -> 36 [style=solid label="'~'"]
  1482 -> 37 [style=solid label="\"auto\""]
  1482 -> 38 [style=solid label="\"char\""]
  1482 -> 39 [style=solid label="\"char8_t\""]
  1482 -> 40 [style=solid label="\"char16_t\""]
  1482 -> 41 [style=solid label="\"char32_t\""]
  1482 -> 42 [style=solid label="\"wchar_t\""]
  1482 -> 43 [style=solid label="\"bool\""]
  1482 -> 44 [style=solid label="\"short\""]
  1482 -> 45 [style=solid label="\"int\""]
  1482 -> 46 [style=solid label="\"long\""]
  1482 -> 47 [style=solid label="\"signed\""]
  1482 -> 48 [style=solid label="\"unsigned\""]
  1482 -> 49 [style=solid label="\"float\""]
  1482 -> 50 [style=solid label="\"double\""]
  1482 -> 51 [style=solid label="\"void\""]
  1482 -> 52 [style=solid label="\"static_assert\""]
  1482 -> 53 [style=solid label="\"static\""]
  1482 -> 54 [style=solid label="\"thread_local\""]
  1482 -> 55 [style=solid label="\"mutable\""]
  1482 -> 56 [style=solid label="\"typename\""]
  1482 -> 57 [style=dashed label="alias-declaration"]
  1482 -> 58 [style=dashed label="alignment-specifier"]
  1482 -> 59 [style=dashed label="asm-declaration"]
  1482 -> 60 [style=dashed label="attribute-declaration"]
  1482 -> 61 [style=dashed label="attribute-specifier"]
  1482 -> 62 [style=dashed label="attribute-specifier-seq"]
  1482 -> 63 [style=dashed label="block-declaration"]
  1482 -> 64 [style=dashed label="class-head"]
  1482 -> 65 [style=dashed label="class-key"]
  1482 -> 66 [style=dashed label="class-name"]
  1482 -> 67 [style=dashed label="class-specifier"]
  1482 -> 68 [style=dashed label="concept-name"]
  1482 -> 69 [style=dashed label="conversion-function-id"]
  1482 -> 70 [style=dashed label="cv-qualifier"]
  1482 -> 71 [style=dashed label="decl-specifier"]
  1482 -> 72 [style=dashed label="decl-specifier-seq"]
  1482 -> 73 [style=dashed label="declaration"]
  1482 -> 570 [style=dashed label="declaration-seq"]
  1482 -> 75 [style=dashed label="declarator"]
  1482 -> 76 [style=dashed label="declarator-id"]
  1482 -> 77 [style=dashed label="decltype-specifier"]
  1482 -> 78 [style=dashed label="deduction-guide"]
  1482 -> 79 [style=dashed label="defining-type-specifier"]
  1482 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1482 -> 81 [style=dashed label="elaborated-type-specifier"]
  1482 -> 82 [style=dashed label="empty-declaration"]
  1482 -> 83 [style=dashed label="enum-head"]
  1482 -> 84 [style=dashed label="enum-key"]
  1482 -> 85 [style=dashed label="enum-name"]
  1482 -> 86 [style=dashed label="enum-specifier"]
  1482 -> 87 [style=dashed label="explicit-instantiation"]
  1482 -> 88 [style=dashed label="explicit-specialization"]
  1482 -> 89 [style=dashed label="explicit-specifier"]
  1482 -> 90 [style=dashed label="export-declaration"]
  1482 -> 91 [style=dashed label="function-definition"]
  1482 -> 92 [style=dashed label="function-specifier"]
  1482 -> 94 [style=dashed label="id-expression"]
  1482 -> 95 [style=dashed label="linkage-specification"]
  1482 -> 96 [style=dashed label="literal-operator-id"]
  1482 -> 98 [style=dashed label="module-import-declaration"]
  1482 -> 99 [style=dashed label="named-namespace-definition"]
  1482 -> 100 [style=dashed label="namespace-alias"]
  1482 -> 101 [style=dashed label="namespace-alias-definition"]
  1482 -> 1720 [style=dashed label="namespace-body"]
  1482 -> 102 [style=dashed label="namespace-definition"]
  1482 -> 103 [style=dashed label="namespace-name"]
  1482 -> 104 [style=dashed label="nested-name-specifier"]
  1482 -> 105 [style=dashed label="nested-namespace-definition"]
  1482 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  1482 -> 107 [style=dashed label="noptr-declarator"]
  1482 -> 108 [style=dashed label="opaque-enum-declaration"]
  1482 -> 109 [style=dashed label="operator-function-id"]
  1482 -> 110 [style=dashed label="placeholder-type-specifier"]
  1482 -> 111 [style=dashed label="ptr-declarator"]
  1482 -> 112 [style=dashed label="ptr-operator"]
  1482 -> 113 [style=dashed label="qualified-id"]
  1482 -> 114 [style=dashed label="simple-declaration"]
  1482 -> 115 [style=dashed label="simple-template-id"]
  1482 -> 116 [style=dashed label="simple-type-specifier"]
  1482 -> 117 [style=dashed label="static_assert-declaration"]
  1482 -> 118 [style=dashed label="storage-class-specifier"]
  1482 -> 119 [style=dashed label="template-declaration"]
  1482 -> 120 [style=dashed label="template-head"]
  1482 -> 121 [style=dashed label="template-id"]
  1482 -> 122 [style=dashed label="template-name"]
  1482 -> 124 [style=dashed label="type-constraint"]
  1482 -> 125 [style=dashed label="type-name"]
  1482 -> 126 [style=dashed label="type-specifier"]
  1482 -> 127 [style=dashed label="typedef-name"]
  1482 -> 128 [style=dashed label="typename-specifier"]
  1482 -> 129 [style=dashed label="unnamed-namespace-definition"]
  1482 -> 130 [style=dashed label="unqualified-id"]
  1482 -> 131 [style=dashed label="using-declaration"]
  1482 -> 132 [style=dashed label="using-directive"]
  1482 -> 133 [style=dashed label="using-enum-declaration"]
  1483 [label="State 1483\n\l278 enclosing-namespace-specifier: enclosing-namespace-specifier \"::\" \"inline\" IDENTIFIER •\l667 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" \"inline\" IDENTIFIER • '{' namespace-body '}'\l"]
  1483 -> 1721 [style=solid label="'{'"]
  1483 -> "1483R278" [style=solid]
 "1483R278" [label="R278", fillcolor=3, shape=diamond, style=filled]
  1484 [label="State 1484\n\l1038 static_assert-declaration: \"static_assert\" '(' constant-expression ')' ';' •\l"]
  1484 -> "1484R1038" [style=solid]
 "1484R1038" [label="R1038", fillcolor=3, shape=diamond, style=filled]
  1485 [label="State 1485\n\l1039 static_assert-declaration: \"static_assert\" '(' constant-expression ',' string-literal • ')' ';'\l"]
  1485 -> 1722 [style=solid label="')'"]
  1486 [label="State 1486\n\l1185 using-directive: attribute-specifier-seq \"using\" \"namespace\" namespace-name ';' •\l"]
  1486 -> "1486R1185" [style=solid]
 "1486R1185" [label="R1185", fillcolor=3, shape=diamond, style=filled]
  1487 [label="State 1487\n\l1187 using-directive: attribute-specifier-seq \"using\" \"namespace\" nested-name-specifier namespace-name • ';'\l"]
  1487 -> 1723 [style=solid label="';'"]
  1488 [label="State 1488\n\l 21 asm-declaration: attribute-specifier-seq \"asm\" '(' string-literal ')' • ';'\l"]
  1488 -> 1724 [style=solid label="';'"]
  1489 [label="State 1489\n\l980 simple-declaration: attribute-specifier-seq decl-specifier-seq '[' identifier-list ']' • initializer ';'\l"]
  1489 -> 1280 [style=solid label="'='"]
  1489 -> 647 [style=solid label="'('"]
  1489 -> 939 [style=solid label="'{'"]
  1489 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1489 -> 650 [style=dashed label="braced-init-list"]
  1489 -> 1725 [style=dashed label="initializer"]
  1490 [label="State 1490\n\l408 function-definition: attribute-specifier-seq decl-specifier-seq declarator requires-clause function-body •\l"]
  1490 -> "1490R408" [style=solid]
 "1490R408" [label="R408", fillcolor=3, shape=diamond, style=filled]
  1491 [label="State 1491\n\l404 function-definition: attribute-specifier-seq decl-specifier-seq declarator virt-specifier-seq function-body •\l"]
  1491 -> "1491R404" [style=solid]
 "1491R404" [label="R404", fillcolor=3, shape=diamond, style=filled]
  1492 [label="State 1492\n\l466 identifier-list: identifier-list • ',' IDENTIFIER\l982 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' identifier-list • ']' initializer ';'\l"]
  1492 -> 1138 [style=solid label="','"]
  1492 -> 1726 [style=solid label="']'"]
  1493 [label="State 1493\n\l291 enum-head: enum-key attribute-specifier-seq enum-head-name enum-base •\l"]
  1493 -> "1493R291" [style=solid]
 "1493R291" [label="R291", fillcolor=3, shape=diamond, style=filled]
  1494 [label="State 1494\n\l609 member-declarator: IDENTIFIER ':' constant-expression •\l613                  | IDENTIFIER ':' constant-expression • brace-or-equal-initializer\l"]
  1494 -> 1280 [style=solid label="'='"]
  1494 -> 939 [style=solid label="'{'"]
  1494 -> 1727 [style=dashed label="brace-or-equal-initializer"]
  1494 -> 650 [style=dashed label="braced-init-list"]
  1494 -> "1494R609" [style=solid]
 "1494R609" [label="R609", fillcolor=3, shape=diamond, style=filled]
  1495 [label="State 1495\n\l611 member-declarator: IDENTIFIER attribute-specifier-seq ':' • constant-expression\l615                  | IDENTIFIER attribute-specifier-seq ':' • constant-expression brace-or-equal-initializer\l"]
  1495 -> 1 [style=solid label="IDENTIFIER"]
  1495 -> 361 [style=solid label="'+'"]
  1495 -> 362 [style=solid label="'-'"]
  1495 -> 363 [style=solid label="'('"]
  1495 -> 364 [style=solid label="'&'"]
  1495 -> 365 [style=solid label="\"::\""]
  1495 -> 366 [style=solid label="'['"]
  1495 -> 367 [style=solid label="\"co_await\""]
  1495 -> 368 [style=solid label="'0'"]
  1495 -> 369 [style=solid label="'1'"]
  1495 -> 370 [style=solid label="\"0b\""]
  1495 -> 371 [style=solid label="\"0B\""]
  1495 -> 372 [style=solid label="'\\''"]
  1495 -> 373 [style=solid label="\"false\""]
  1495 -> 374 [style=solid label="\"true\""]
  1495 -> 375 [style=solid label="\"noexcept\""]
  1495 -> 17 [style=solid label="\"operator\""]
  1495 -> 26 [style=solid label="\"decltype\""]
  1495 -> 376 [style=solid label="\"delete\""]
  1495 -> 377 [style=solid label="'.'"]
  1495 -> 378 [style=solid label="'2'"]
  1495 -> 379 [style=solid label="'3'"]
  1495 -> 380 [style=solid label="'4'"]
  1495 -> 381 [style=solid label="'5'"]
  1495 -> 382 [style=solid label="'6'"]
  1495 -> 383 [style=solid label="'7'"]
  1495 -> 384 [style=solid label="'8'"]
  1495 -> 385 [style=solid label="'9'"]
  1495 -> 185 [style=solid label="\"u8\""]
  1495 -> 186 [style=solid label="'u'"]
  1495 -> 187 [style=solid label="'U'"]
  1495 -> 188 [style=solid label="'L'"]
  1495 -> 386 [style=solid label="'*'"]
  1495 -> 203 [style=solid label="'\"'"]
  1495 -> 387 [style=solid label="\"0x\""]
  1495 -> 388 [style=solid label="\"0X\""]
  1495 -> 389 [style=solid label="\"requires\""]
  1495 -> 390 [style=solid label="\"new\""]
  1495 -> 391 [style=solid label="'~'"]
  1495 -> 392 [style=solid label="'!'"]
  1495 -> 393 [style=solid label="\"++\""]
  1495 -> 394 [style=solid label="\"--\""]
  1495 -> 395 [style=solid label="\"this\""]
  1495 -> 37 [style=solid label="\"auto\""]
  1495 -> 396 [style=solid label="\"nullptr\""]
  1495 -> 397 [style=solid label="\"dynamic_cast\""]
  1495 -> 398 [style=solid label="\"static_cast\""]
  1495 -> 399 [style=solid label="\"reinterpret_cast\""]
  1495 -> 400 [style=solid label="\"const_cast\""]
  1495 -> 401 [style=solid label="\"typeid\""]
  1495 -> 38 [style=solid label="\"char\""]
  1495 -> 39 [style=solid label="\"char8_t\""]
  1495 -> 40 [style=solid label="\"char16_t\""]
  1495 -> 41 [style=solid label="\"char32_t\""]
  1495 -> 42 [style=solid label="\"wchar_t\""]
  1495 -> 43 [style=solid label="\"bool\""]
  1495 -> 44 [style=solid label="\"short\""]
  1495 -> 45 [style=solid label="\"int\""]
  1495 -> 46 [style=solid label="\"long\""]
  1495 -> 47 [style=solid label="\"signed\""]
  1495 -> 48 [style=solid label="\"unsigned\""]
  1495 -> 49 [style=solid label="\"float\""]
  1495 -> 50 [style=solid label="\"double\""]
  1495 -> 51 [style=solid label="\"void\""]
  1495 -> 209 [style=solid label="'R'"]
  1495 -> 56 [style=solid label="\"typename\""]
  1495 -> 402 [style=solid label="\"sizeof\""]
  1495 -> 403 [style=solid label="\"alignof\""]
  1495 -> 404 [style=dashed label="additive-expression"]
  1495 -> 405 [style=dashed label="and-expression"]
  1495 -> 406 [style=dashed label="await-expression"]
  1495 -> 407 [style=dashed label="binary-literal"]
  1495 -> 408 [style=dashed label="boolean-literal"]
  1495 -> 409 [style=dashed label="cast-expression"]
  1495 -> 410 [style=dashed label="character-literal"]
  1495 -> 66 [style=dashed label="class-name"]
  1495 -> 411 [style=dashed label="compare-expression"]
  1495 -> 68 [style=dashed label="concept-name"]
  1495 -> 412 [style=dashed label="conditional-expression"]
  1495 -> 1728 [style=dashed label="constant-expression"]
  1495 -> 69 [style=dashed label="conversion-function-id"]
  1495 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1495 -> 415 [style=dashed label="decimal-literal"]
  1495 -> 77 [style=dashed label="decltype-specifier"]
  1495 -> 416 [style=dashed label="delete-expression"]
  1495 -> 417 [style=dashed label="digit"]
  1495 -> 418 [style=dashed label="digit-sequence"]
  1495 -> 419 [style=dashed label="encoding-prefix"]
  1495 -> 85 [style=dashed label="enum-name"]
  1495 -> 420 [style=dashed label="equality-expression"]
  1495 -> 421 [style=dashed label="exclusive-or-expression"]
  1495 -> 422 [style=dashed label="floating-point-literal"]
  1495 -> 423 [style=dashed label="fold-expression"]
  1495 -> 424 [style=dashed label="fractional-constant"]
  1495 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1495 -> 426 [style=dashed label="hexadecimal-literal"]
  1495 -> 427 [style=dashed label="hexadecimal-prefix"]
  1495 -> 428 [style=dashed label="id-expression"]
  1495 -> 429 [style=dashed label="inclusive-or-expression"]
  1495 -> 430 [style=dashed label="integer-literal"]
  1495 -> 431 [style=dashed label="lambda-expression"]
  1495 -> 432 [style=dashed label="lambda-introducer"]
  1495 -> 433 [style=dashed label="literal"]
  1495 -> 96 [style=dashed label="literal-operator-id"]
  1495 -> 434 [style=dashed label="logical-and-expression"]
  1495 -> 435 [style=dashed label="logical-or-expression"]
  1495 -> 436 [style=dashed label="multiplicative-expression"]
  1495 -> 100 [style=dashed label="namespace-alias"]
  1495 -> 103 [style=dashed label="namespace-name"]
  1495 -> 437 [style=dashed label="nested-name-specifier"]
  1495 -> 438 [style=dashed label="new-expression"]
  1495 -> 439 [style=dashed label="noexcept-expression"]
  1495 -> 440 [style=dashed label="nonzero-digit"]
  1495 -> 441 [style=dashed label="octal-literal"]
  1495 -> 109 [style=dashed label="operator-function-id"]
  1495 -> 110 [style=dashed label="placeholder-type-specifier"]
  1495 -> 442 [style=dashed label="pm-expression"]
  1495 -> 443 [style=dashed label="pointer-literal"]
  1495 -> 444 [style=dashed label="postfix-expression"]
  1495 -> 445 [style=dashed label="primary-expression"]
  1495 -> 113 [style=dashed label="qualified-id"]
  1495 -> 446 [style=dashed label="relational-expression"]
  1495 -> 447 [style=dashed label="requires-expression"]
  1495 -> 448 [style=dashed label="shift-expression"]
  1495 -> 115 [style=dashed label="simple-template-id"]
  1495 -> 534 [style=dashed label="simple-type-specifier"]
  1495 -> 450 [style=dashed label="string-literal"]
  1495 -> 121 [style=dashed label="template-id"]
  1495 -> 216 [style=dashed label="template-name"]
  1495 -> 124 [style=dashed label="type-constraint"]
  1495 -> 125 [style=dashed label="type-name"]
  1495 -> 127 [style=dashed label="typedef-name"]
  1495 -> 536 [style=dashed label="typename-specifier"]
  1495 -> 454 [style=dashed label="unary-expression"]
  1495 -> 455 [style=dashed label="unary-operator"]
  1495 -> 130 [style=dashed label="unqualified-id"]
  1495 -> 456 [style=dashed label="user-defined-character-literal"]
  1495 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1495 -> 458 [style=dashed label="user-defined-integer-literal"]
  1495 -> 459 [style=dashed label="user-defined-literal"]
  1495 -> 460 [style=dashed label="user-defined-string-literal"]
  1496 [label="State 1496\n\l614 member-declarator: ':' constant-expression brace-or-equal-initializer •\l"]
  1496 -> "1496R614" [style=solid]
 "1496R614" [label="R614", fillcolor=3, shape=diamond, style=filled]
  1497 [label="State 1497\n\l622 member-specification: access-specifier ':' member-specification •\l"]
  1497 -> "1497R622" [style=solid]
 "1497R622" [label="R622", fillcolor=3, shape=diamond, style=filled]
  1498 [label="State 1498\n\l610 member-declarator: ':' constant-expression •\l612                  | attribute-specifier-seq ':' constant-expression •\l614                  | ':' constant-expression • brace-or-equal-initializer\l616                  | attribute-specifier-seq ':' constant-expression • brace-or-equal-initializer\l"]
  1498 -> 1280 [style=solid label="'='"]
  1498 -> 939 [style=solid label="'{'"]
  1498 -> 1729 [style=dashed label="brace-or-equal-initializer"]
  1498 -> 650 [style=dashed label="braced-init-list"]
  1498 -> "1498R610" [style=solid]
 "1498R610" [label="R610", fillcolor=3, shape=diamond, style=filled]
  1498 -> "1498R612d" [label="[';', ',']", style=solid]
 "1498R612d" [label="R612", fillcolor=5, shape=diamond, style=filled]
  1499 [label="State 1499\n\l612 member-declarator: attribute-specifier-seq ':' • constant-expression\l616                  | attribute-specifier-seq ':' • constant-expression brace-or-equal-initializer\l"]
  1499 -> 1 [style=solid label="IDENTIFIER"]
  1499 -> 361 [style=solid label="'+'"]
  1499 -> 362 [style=solid label="'-'"]
  1499 -> 363 [style=solid label="'('"]
  1499 -> 364 [style=solid label="'&'"]
  1499 -> 365 [style=solid label="\"::\""]
  1499 -> 366 [style=solid label="'['"]
  1499 -> 367 [style=solid label="\"co_await\""]
  1499 -> 368 [style=solid label="'0'"]
  1499 -> 369 [style=solid label="'1'"]
  1499 -> 370 [style=solid label="\"0b\""]
  1499 -> 371 [style=solid label="\"0B\""]
  1499 -> 372 [style=solid label="'\\''"]
  1499 -> 373 [style=solid label="\"false\""]
  1499 -> 374 [style=solid label="\"true\""]
  1499 -> 375 [style=solid label="\"noexcept\""]
  1499 -> 17 [style=solid label="\"operator\""]
  1499 -> 26 [style=solid label="\"decltype\""]
  1499 -> 376 [style=solid label="\"delete\""]
  1499 -> 377 [style=solid label="'.'"]
  1499 -> 378 [style=solid label="'2'"]
  1499 -> 379 [style=solid label="'3'"]
  1499 -> 380 [style=solid label="'4'"]
  1499 -> 381 [style=solid label="'5'"]
  1499 -> 382 [style=solid label="'6'"]
  1499 -> 383 [style=solid label="'7'"]
  1499 -> 384 [style=solid label="'8'"]
  1499 -> 385 [style=solid label="'9'"]
  1499 -> 185 [style=solid label="\"u8\""]
  1499 -> 186 [style=solid label="'u'"]
  1499 -> 187 [style=solid label="'U'"]
  1499 -> 188 [style=solid label="'L'"]
  1499 -> 386 [style=solid label="'*'"]
  1499 -> 203 [style=solid label="'\"'"]
  1499 -> 387 [style=solid label="\"0x\""]
  1499 -> 388 [style=solid label="\"0X\""]
  1499 -> 389 [style=solid label="\"requires\""]
  1499 -> 390 [style=solid label="\"new\""]
  1499 -> 391 [style=solid label="'~'"]
  1499 -> 392 [style=solid label="'!'"]
  1499 -> 393 [style=solid label="\"++\""]
  1499 -> 394 [style=solid label="\"--\""]
  1499 -> 395 [style=solid label="\"this\""]
  1499 -> 37 [style=solid label="\"auto\""]
  1499 -> 396 [style=solid label="\"nullptr\""]
  1499 -> 397 [style=solid label="\"dynamic_cast\""]
  1499 -> 398 [style=solid label="\"static_cast\""]
  1499 -> 399 [style=solid label="\"reinterpret_cast\""]
  1499 -> 400 [style=solid label="\"const_cast\""]
  1499 -> 401 [style=solid label="\"typeid\""]
  1499 -> 38 [style=solid label="\"char\""]
  1499 -> 39 [style=solid label="\"char8_t\""]
  1499 -> 40 [style=solid label="\"char16_t\""]
  1499 -> 41 [style=solid label="\"char32_t\""]
  1499 -> 42 [style=solid label="\"wchar_t\""]
  1499 -> 43 [style=solid label="\"bool\""]
  1499 -> 44 [style=solid label="\"short\""]
  1499 -> 45 [style=solid label="\"int\""]
  1499 -> 46 [style=solid label="\"long\""]
  1499 -> 47 [style=solid label="\"signed\""]
  1499 -> 48 [style=solid label="\"unsigned\""]
  1499 -> 49 [style=solid label="\"float\""]
  1499 -> 50 [style=solid label="\"double\""]
  1499 -> 51 [style=solid label="\"void\""]
  1499 -> 209 [style=solid label="'R'"]
  1499 -> 56 [style=solid label="\"typename\""]
  1499 -> 402 [style=solid label="\"sizeof\""]
  1499 -> 403 [style=solid label="\"alignof\""]
  1499 -> 404 [style=dashed label="additive-expression"]
  1499 -> 405 [style=dashed label="and-expression"]
  1499 -> 406 [style=dashed label="await-expression"]
  1499 -> 407 [style=dashed label="binary-literal"]
  1499 -> 408 [style=dashed label="boolean-literal"]
  1499 -> 409 [style=dashed label="cast-expression"]
  1499 -> 410 [style=dashed label="character-literal"]
  1499 -> 66 [style=dashed label="class-name"]
  1499 -> 411 [style=dashed label="compare-expression"]
  1499 -> 68 [style=dashed label="concept-name"]
  1499 -> 412 [style=dashed label="conditional-expression"]
  1499 -> 1730 [style=dashed label="constant-expression"]
  1499 -> 69 [style=dashed label="conversion-function-id"]
  1499 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1499 -> 415 [style=dashed label="decimal-literal"]
  1499 -> 77 [style=dashed label="decltype-specifier"]
  1499 -> 416 [style=dashed label="delete-expression"]
  1499 -> 417 [style=dashed label="digit"]
  1499 -> 418 [style=dashed label="digit-sequence"]
  1499 -> 419 [style=dashed label="encoding-prefix"]
  1499 -> 85 [style=dashed label="enum-name"]
  1499 -> 420 [style=dashed label="equality-expression"]
  1499 -> 421 [style=dashed label="exclusive-or-expression"]
  1499 -> 422 [style=dashed label="floating-point-literal"]
  1499 -> 423 [style=dashed label="fold-expression"]
  1499 -> 424 [style=dashed label="fractional-constant"]
  1499 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1499 -> 426 [style=dashed label="hexadecimal-literal"]
  1499 -> 427 [style=dashed label="hexadecimal-prefix"]
  1499 -> 428 [style=dashed label="id-expression"]
  1499 -> 429 [style=dashed label="inclusive-or-expression"]
  1499 -> 430 [style=dashed label="integer-literal"]
  1499 -> 431 [style=dashed label="lambda-expression"]
  1499 -> 432 [style=dashed label="lambda-introducer"]
  1499 -> 433 [style=dashed label="literal"]
  1499 -> 96 [style=dashed label="literal-operator-id"]
  1499 -> 434 [style=dashed label="logical-and-expression"]
  1499 -> 435 [style=dashed label="logical-or-expression"]
  1499 -> 436 [style=dashed label="multiplicative-expression"]
  1499 -> 100 [style=dashed label="namespace-alias"]
  1499 -> 103 [style=dashed label="namespace-name"]
  1499 -> 437 [style=dashed label="nested-name-specifier"]
  1499 -> 438 [style=dashed label="new-expression"]
  1499 -> 439 [style=dashed label="noexcept-expression"]
  1499 -> 440 [style=dashed label="nonzero-digit"]
  1499 -> 441 [style=dashed label="octal-literal"]
  1499 -> 109 [style=dashed label="operator-function-id"]
  1499 -> 110 [style=dashed label="placeholder-type-specifier"]
  1499 -> 442 [style=dashed label="pm-expression"]
  1499 -> 443 [style=dashed label="pointer-literal"]
  1499 -> 444 [style=dashed label="postfix-expression"]
  1499 -> 445 [style=dashed label="primary-expression"]
  1499 -> 113 [style=dashed label="qualified-id"]
  1499 -> 446 [style=dashed label="relational-expression"]
  1499 -> 447 [style=dashed label="requires-expression"]
  1499 -> 448 [style=dashed label="shift-expression"]
  1499 -> 115 [style=dashed label="simple-template-id"]
  1499 -> 534 [style=dashed label="simple-type-specifier"]
  1499 -> 450 [style=dashed label="string-literal"]
  1499 -> 121 [style=dashed label="template-id"]
  1499 -> 216 [style=dashed label="template-name"]
  1499 -> 124 [style=dashed label="type-constraint"]
  1499 -> 125 [style=dashed label="type-name"]
  1499 -> 127 [style=dashed label="typedef-name"]
  1499 -> 536 [style=dashed label="typename-specifier"]
  1499 -> 454 [style=dashed label="unary-expression"]
  1499 -> 455 [style=dashed label="unary-operator"]
  1499 -> 130 [style=dashed label="unqualified-id"]
  1499 -> 456 [style=dashed label="user-defined-character-literal"]
  1499 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1499 -> 458 [style=dashed label="user-defined-integer-literal"]
  1499 -> 459 [style=dashed label="user-defined-literal"]
  1499 -> 460 [style=dashed label="user-defined-string-literal"]
  1500 [label="State 1500\n\l586 member-declaration: attribute-specifier-seq decl-specifier-seq ';' •\l"]
  1500 -> "1500R586" [style=solid]
 "1500R586" [label="R586", fillcolor=3, shape=diamond, style=filled]
  1501 [label="State 1501\n\l400 function-definition: attribute-specifier-seq decl-specifier-seq declarator • function-body\l404                    | attribute-specifier-seq decl-specifier-seq declarator • virt-specifier-seq function-body\l408                    | attribute-specifier-seq decl-specifier-seq declarator • requires-clause function-body\l602 member-declarator: declarator •\l603                  | declarator • virt-specifier-seq\l604                  | declarator • pure-specifier\l605                  | declarator • virt-specifier-seq pure-specifier\l606                  | declarator • requires-clause\l607                  | declarator •\l608                  | declarator • brace-or-equal-initializer\l"]
  1501 -> 1108 [style=solid label="'='"]
  1501 -> 293 [style=solid label="':'"]
  1501 -> 648 [style=solid label="'{'"]
  1501 -> 295 [style=solid label="\"final\""]
  1501 -> 296 [style=solid label="\"try\""]
  1501 -> 297 [style=solid label="\"requires\""]
  1501 -> 298 [style=solid label="\"override\""]
  1501 -> 1109 [style=dashed label="brace-or-equal-initializer"]
  1501 -> 650 [style=dashed label="braced-init-list"]
  1501 -> 299 [style=dashed label="compound-statement"]
  1501 -> 300 [style=dashed label="ctor-initializer"]
  1501 -> 1084 [style=dashed label="function-body"]
  1501 -> 302 [style=dashed label="function-try-block"]
  1501 -> 1110 [style=dashed label="pure-specifier"]
  1501 -> 1731 [style=dashed label="requires-clause"]
  1501 -> 304 [style=dashed label="virt-specifier"]
  1501 -> 1732 [style=dashed label="virt-specifier-seq"]
  1501 -> "1501R602" [style=solid]
 "1501R602" [label="R602", fillcolor=3, shape=diamond, style=filled]
  1501 -> "1501R607d" [label="[';', ',']", style=solid]
 "1501R607d" [label="R607", fillcolor=5, shape=diamond, style=filled]
  1502 [label="State 1502\n\l590 member-declaration: attribute-specifier-seq decl-specifier-seq member-declarator-list • ';'\l618 member-declarator-list: member-declarator-list • ',' member-declarator\l"]
  1502 -> 1733 [style=solid label="';'"]
  1502 -> 1115 [style=solid label="','"]
  1503 [label="State 1503\n\l406 function-definition: attribute-specifier-seq declarator requires-clause • function-body\l606 member-declarator: declarator requires-clause •\l"]
  1503 -> 291 [style=solid label="'='"]
  1503 -> 293 [style=solid label="':'"]
  1503 -> 294 [style=solid label="'{'"]
  1503 -> 296 [style=solid label="\"try\""]
  1503 -> 299 [style=dashed label="compound-statement"]
  1503 -> 300 [style=dashed label="ctor-initializer"]
  1503 -> 1089 [style=dashed label="function-body"]
  1503 -> 302 [style=dashed label="function-try-block"]
  1503 -> "1503R606" [style=solid]
 "1503R606" [label="R606", fillcolor=3, shape=diamond, style=filled]
  1504 [label="State 1504\n\l402 function-definition: attribute-specifier-seq declarator virt-specifier-seq • function-body\l603 member-declarator: declarator virt-specifier-seq •\l605                  | declarator virt-specifier-seq • pure-specifier\l1193 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  1504 -> 1510 [style=solid label="'='"]
  1504 -> 293 [style=solid label="':'"]
  1504 -> 294 [style=solid label="'{'"]
  1504 -> 295 [style=solid label="\"final\""]
  1504 -> 296 [style=solid label="\"try\""]
  1504 -> 298 [style=solid label="\"override\""]
  1504 -> 299 [style=dashed label="compound-statement"]
  1504 -> 300 [style=dashed label="ctor-initializer"]
  1504 -> 1090 [style=dashed label="function-body"]
  1504 -> 302 [style=dashed label="function-try-block"]
  1504 -> 1511 [style=dashed label="pure-specifier"]
  1504 -> 707 [style=dashed label="virt-specifier"]
  1504 -> "1504R603" [style=solid]
 "1504R603" [label="R603", fillcolor=3, shape=diamond, style=filled]
  1505 [label="State 1505\n\l588 member-declaration: attribute-specifier-seq member-declarator-list ';' •\l"]
  1505 -> "1505R588" [style=solid]
 "1505R588" [label="R588", fillcolor=3, shape=diamond, style=filled]
  1506 [label="State 1506\n\l409 function-definition: decl-specifier-seq declarator requires-clause • function-body\l606 member-declarator: declarator requires-clause •\l"]
  1506 -> 291 [style=solid label="'='"]
  1506 -> 293 [style=solid label="':'"]
  1506 -> 294 [style=solid label="'{'"]
  1506 -> 296 [style=solid label="\"try\""]
  1506 -> 299 [style=dashed label="compound-statement"]
  1506 -> 300 [style=dashed label="ctor-initializer"]
  1506 -> 1154 [style=dashed label="function-body"]
  1506 -> 302 [style=dashed label="function-try-block"]
  1506 -> "1506R606" [style=solid]
 "1506R606" [label="R606", fillcolor=3, shape=diamond, style=filled]
  1507 [label="State 1507\n\l405 function-definition: decl-specifier-seq declarator virt-specifier-seq • function-body\l603 member-declarator: declarator virt-specifier-seq •\l605                  | declarator virt-specifier-seq • pure-specifier\l1193 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  1507 -> 1510 [style=solid label="'='"]
  1507 -> 293 [style=solid label="':'"]
  1507 -> 294 [style=solid label="'{'"]
  1507 -> 295 [style=solid label="\"final\""]
  1507 -> 296 [style=solid label="\"try\""]
  1507 -> 298 [style=solid label="\"override\""]
  1507 -> 299 [style=dashed label="compound-statement"]
  1507 -> 300 [style=dashed label="ctor-initializer"]
  1507 -> 1155 [style=dashed label="function-body"]
  1507 -> 302 [style=dashed label="function-try-block"]
  1507 -> 1511 [style=dashed label="pure-specifier"]
  1507 -> 707 [style=dashed label="virt-specifier"]
  1507 -> "1507R603" [style=solid]
 "1507R603" [label="R603", fillcolor=3, shape=diamond, style=filled]
  1508 [label="State 1508\n\l591 member-declaration: decl-specifier-seq member-declarator-list ';' •\l"]
  1508 -> "1508R591" [style=solid]
 "1508R591" [label="R591", fillcolor=3, shape=diamond, style=filled]
  1509 [label="State 1509\n\l252 digit: '0' •\l752 octal-literal: '0' •\l909 pure-specifier: '=' '0' •\l"]
  1509 -> "1509R252" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7', '8', '9', 'e', 'E']", style=solid]
 "1509R252" [label="R252", fillcolor=3, shape=diamond, style=filled]
  1509 -> "1509R752d" [label="['0', '1', '\\'', '.', '2', '3', '4', '5', '6', '7']", style=solid]
 "1509R752d" [label="R752", fillcolor=5, shape=diamond, style=filled]
  1509 -> "1509R752" [style=solid]
 "1509R752" [label="R752", fillcolor=3, shape=diamond, style=filled]
  1509 -> "1509R909d" [label="[';', ',']", style=solid]
 "1509R909d" [label="R909", fillcolor=5, shape=diamond, style=filled]
  1510 [label="State 1510\n\l396 function-body: '=' • \"default\" ';'\l397              | '=' • \"delete\" ';'\l909 pure-specifier: '=' • '0'\l"]
  1510 -> 1734 [style=solid label="'0'"]
  1510 -> 658 [style=solid label="\"delete\""]
  1510 -> 659 [style=solid label="\"default\""]
  1511 [label="State 1511\n\l605 member-declarator: declarator virt-specifier-seq pure-specifier •\l"]
  1511 -> "1511R605" [style=solid]
 "1511R605" [label="R605", fillcolor=3, shape=diamond, style=filled]
  1512 [label="State 1512\n\l602 member-declarator: declarator •\l603                  | declarator • virt-specifier-seq\l604                  | declarator • pure-specifier\l605                  | declarator • virt-specifier-seq pure-specifier\l606                  | declarator • requires-clause\l607                  | declarator •\l608                  | declarator • brace-or-equal-initializer\l"]
  1512 -> 1735 [style=solid label="'='"]
  1512 -> 939 [style=solid label="'{'"]
  1512 -> 295 [style=solid label="\"final\""]
  1512 -> 297 [style=solid label="\"requires\""]
  1512 -> 298 [style=solid label="\"override\""]
  1512 -> 1109 [style=dashed label="brace-or-equal-initializer"]
  1512 -> 650 [style=dashed label="braced-init-list"]
  1512 -> 1110 [style=dashed label="pure-specifier"]
  1512 -> 1736 [style=dashed label="requires-clause"]
  1512 -> 304 [style=dashed label="virt-specifier"]
  1512 -> 1737 [style=dashed label="virt-specifier-seq"]
  1512 -> "1512R602" [style=solid]
 "1512R602" [label="R602", fillcolor=3, shape=diamond, style=filled]
  1512 -> "1512R607d" [label="[';', ',']", style=solid]
 "1512R607d" [label="R607", fillcolor=5, shape=diamond, style=filled]
  1513 [label="State 1513\n\l618 member-declarator-list: member-declarator-list ',' member-declarator •\l"]
  1513 -> "1513R618" [style=solid]
 "1513R618" [label="R618", fillcolor=3, shape=diamond, style=filled]
  1514 [label="State 1514\n\l 74 base-specifier: \"virtual\" access-specifier class-or-decltype •\l"]
  1514 -> "1514R74" [style=solid]
 "1514R74" [label="R74", fillcolor=3, shape=diamond, style=filled]
  1515 [label="State 1515\n\l 78 base-specifier: access-specifier \"virtual\" class-or-decltype •\l"]
  1515 -> "1515R78" [style=solid]
 "1515R78" [label="R78", fillcolor=3, shape=diamond, style=filled]
  1516 [label="State 1516\n\l 73 base-specifier: attribute-specifier-seq \"virtual\" access-specifier • class-or-decltype\l"]
  1516 -> 258 [style=solid label="IDENTIFIER"]
  1516 -> 9 [style=solid label="\"::\""]
  1516 -> 135 [style=solid label="\"decltype\""]
  1516 -> 66 [style=dashed label="class-name"]
  1516 -> 1738 [style=dashed label="class-or-decltype"]
  1516 -> 624 [style=dashed label="decltype-specifier"]
  1516 -> 85 [style=dashed label="enum-name"]
  1516 -> 100 [style=dashed label="namespace-alias"]
  1516 -> 103 [style=dashed label="namespace-name"]
  1516 -> 625 [style=dashed label="nested-name-specifier"]
  1516 -> 142 [style=dashed label="simple-template-id"]
  1516 -> 143 [style=dashed label="template-name"]
  1516 -> 626 [style=dashed label="type-name"]
  1516 -> 127 [style=dashed label="typedef-name"]
  1517 [label="State 1517\n\l 71 base-specifier: attribute-specifier-seq \"virtual\" class-or-decltype •\l"]
  1517 -> "1517R71" [style=solid]
 "1517R71" [label="R71", fillcolor=3, shape=diamond, style=filled]
  1518 [label="State 1518\n\l 77 base-specifier: attribute-specifier-seq access-specifier \"virtual\" • class-or-decltype\l"]
  1518 -> 258 [style=solid label="IDENTIFIER"]
  1518 -> 9 [style=solid label="\"::\""]
  1518 -> 135 [style=solid label="\"decltype\""]
  1518 -> 66 [style=dashed label="class-name"]
  1518 -> 1739 [style=dashed label="class-or-decltype"]
  1518 -> 624 [style=dashed label="decltype-specifier"]
  1518 -> 85 [style=dashed label="enum-name"]
  1518 -> 100 [style=dashed label="namespace-alias"]
  1518 -> 103 [style=dashed label="namespace-name"]
  1518 -> 625 [style=dashed label="nested-name-specifier"]
  1518 -> 142 [style=dashed label="simple-template-id"]
  1518 -> 143 [style=dashed label="template-name"]
  1518 -> 626 [style=dashed label="type-name"]
  1518 -> 127 [style=dashed label="typedef-name"]
  1519 [label="State 1519\n\l 75 base-specifier: attribute-specifier-seq access-specifier class-or-decltype •\l"]
  1519 -> "1519R75" [style=solid]
 "1519R75" [label="R75", fillcolor=3, shape=diamond, style=filled]
  1520 [label="State 1520\n\l 81 base-specifier-list: base-specifier-list ',' base-specifier •\l 82                    | base-specifier-list ',' base-specifier • \"...\"\l"]
  1520 -> 1740 [style=solid label="\"...\""]
  1520 -> "1520R81" [style=solid]
 "1520R81" [label="R81", fillcolor=3, shape=diamond, style=filled]
  1521 [label="State 1521\n\l149 class-or-decltype: nested-name-specifier \"template\" simple-template-id •\l665 nested-name-specifier: nested-name-specifier \"template\" simple-template-id • \"::\"\l"]
  1521 -> 1217 [style=solid label="\"::\""]
  1521 -> "1521R149" [style=solid]
 "1521R149" [label="R149", fillcolor=3, shape=diamond, style=filled]
  1522 [label="State 1522\n\l135 class-head: class-key attribute-specifier-seq class-head-name class-virt-specifier base-clause •\l"]
  1522 -> "1522R135" [style=solid]
 "1522R135" [label="R135", fillcolor=3, shape=diamond, style=filled]
  1523 [label="State 1523\n\l1055 template-argument-list: template-argument-list ',' template-argument •\l1056                       | template-argument-list ',' template-argument • \"...\"\l"]
  1523 -> 1741 [style=solid label="\"...\""]
  1523 -> "1523R1055" [style=solid]
 "1523R1055" [label="R1055", fillcolor=3, shape=diamond, style=filled]
  1524 [label="State 1524\n\l466 identifier-list: identifier-list ',' IDENTIFIER •\l"]
  1524 -> "1524R466" [style=solid]
 "1524R466" [label="R466", fillcolor=3, shape=diamond, style=filled]
  1525 [label="State 1525\n\l981 simple-declaration: decl-specifier-seq '[' identifier-list ']' initializer • ';'\l"]
  1525 -> 1742 [style=solid label="';'"]
  1526 [label="State 1526\n\l482 initializer: '(' expression-list ')' •\l"]
  1526 -> "1526R482" [style=solid]
 "1526R482" [label="R482", fillcolor=3, shape=diamond, style=filled]
  1527 [label="State 1527\n\l486 initializer-list: initializer-clause \"...\" •\l"]
  1527 -> "1527R486" [style=solid]
 "1527R486" [label="R486", fillcolor=3, shape=diamond, style=filled]
  1528 [label="State 1528\n\l487 initializer-list: initializer-list ',' • initializer-clause\l488                 | initializer-list ',' • initializer-clause \"...\"\l"]
  1528 -> 1 [style=solid label="IDENTIFIER"]
  1528 -> 361 [style=solid label="'+'"]
  1528 -> 362 [style=solid label="'-'"]
  1528 -> 363 [style=solid label="'('"]
  1528 -> 364 [style=solid label="'&'"]
  1528 -> 365 [style=solid label="\"::\""]
  1528 -> 366 [style=solid label="'['"]
  1528 -> 367 [style=solid label="\"co_await\""]
  1528 -> 939 [style=solid label="'{'"]
  1528 -> 368 [style=solid label="'0'"]
  1528 -> 369 [style=solid label="'1'"]
  1528 -> 370 [style=solid label="\"0b\""]
  1528 -> 371 [style=solid label="\"0B\""]
  1528 -> 372 [style=solid label="'\\''"]
  1528 -> 373 [style=solid label="\"false\""]
  1528 -> 374 [style=solid label="\"true\""]
  1528 -> 375 [style=solid label="\"noexcept\""]
  1528 -> 17 [style=solid label="\"operator\""]
  1528 -> 26 [style=solid label="\"decltype\""]
  1528 -> 376 [style=solid label="\"delete\""]
  1528 -> 377 [style=solid label="'.'"]
  1528 -> 378 [style=solid label="'2'"]
  1528 -> 379 [style=solid label="'3'"]
  1528 -> 380 [style=solid label="'4'"]
  1528 -> 381 [style=solid label="'5'"]
  1528 -> 382 [style=solid label="'6'"]
  1528 -> 383 [style=solid label="'7'"]
  1528 -> 384 [style=solid label="'8'"]
  1528 -> 385 [style=solid label="'9'"]
  1528 -> 185 [style=solid label="\"u8\""]
  1528 -> 186 [style=solid label="'u'"]
  1528 -> 187 [style=solid label="'U'"]
  1528 -> 188 [style=solid label="'L'"]
  1528 -> 386 [style=solid label="'*'"]
  1528 -> 203 [style=solid label="'\"'"]
  1528 -> 387 [style=solid label="\"0x\""]
  1528 -> 388 [style=solid label="\"0X\""]
  1528 -> 389 [style=solid label="\"requires\""]
  1528 -> 390 [style=solid label="\"new\""]
  1528 -> 391 [style=solid label="'~'"]
  1528 -> 392 [style=solid label="'!'"]
  1528 -> 393 [style=solid label="\"++\""]
  1528 -> 394 [style=solid label="\"--\""]
  1528 -> 395 [style=solid label="\"this\""]
  1528 -> 37 [style=solid label="\"auto\""]
  1528 -> 396 [style=solid label="\"nullptr\""]
  1528 -> 397 [style=solid label="\"dynamic_cast\""]
  1528 -> 398 [style=solid label="\"static_cast\""]
  1528 -> 399 [style=solid label="\"reinterpret_cast\""]
  1528 -> 400 [style=solid label="\"const_cast\""]
  1528 -> 401 [style=solid label="\"typeid\""]
  1528 -> 38 [style=solid label="\"char\""]
  1528 -> 39 [style=solid label="\"char8_t\""]
  1528 -> 40 [style=solid label="\"char16_t\""]
  1528 -> 41 [style=solid label="\"char32_t\""]
  1528 -> 42 [style=solid label="\"wchar_t\""]
  1528 -> 43 [style=solid label="\"bool\""]
  1528 -> 44 [style=solid label="\"short\""]
  1528 -> 45 [style=solid label="\"int\""]
  1528 -> 46 [style=solid label="\"long\""]
  1528 -> 47 [style=solid label="\"signed\""]
  1528 -> 48 [style=solid label="\"unsigned\""]
  1528 -> 49 [style=solid label="\"float\""]
  1528 -> 50 [style=solid label="\"double\""]
  1528 -> 51 [style=solid label="\"void\""]
  1528 -> 209 [style=solid label="'R'"]
  1528 -> 528 [style=solid label="\"throw\""]
  1528 -> 56 [style=solid label="\"typename\""]
  1528 -> 402 [style=solid label="\"sizeof\""]
  1528 -> 403 [style=solid label="\"alignof\""]
  1528 -> 529 [style=solid label="\"co_yield\""]
  1528 -> 404 [style=dashed label="additive-expression"]
  1528 -> 405 [style=dashed label="and-expression"]
  1528 -> 1141 [style=dashed label="assignment-expression"]
  1528 -> 406 [style=dashed label="await-expression"]
  1528 -> 407 [style=dashed label="binary-literal"]
  1528 -> 408 [style=dashed label="boolean-literal"]
  1528 -> 1142 [style=dashed label="braced-init-list"]
  1528 -> 409 [style=dashed label="cast-expression"]
  1528 -> 410 [style=dashed label="character-literal"]
  1528 -> 66 [style=dashed label="class-name"]
  1528 -> 411 [style=dashed label="compare-expression"]
  1528 -> 68 [style=dashed label="concept-name"]
  1528 -> 531 [style=dashed label="conditional-expression"]
  1528 -> 69 [style=dashed label="conversion-function-id"]
  1528 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1528 -> 415 [style=dashed label="decimal-literal"]
  1528 -> 77 [style=dashed label="decltype-specifier"]
  1528 -> 416 [style=dashed label="delete-expression"]
  1528 -> 417 [style=dashed label="digit"]
  1528 -> 418 [style=dashed label="digit-sequence"]
  1528 -> 419 [style=dashed label="encoding-prefix"]
  1528 -> 85 [style=dashed label="enum-name"]
  1528 -> 420 [style=dashed label="equality-expression"]
  1528 -> 421 [style=dashed label="exclusive-or-expression"]
  1528 -> 422 [style=dashed label="floating-point-literal"]
  1528 -> 423 [style=dashed label="fold-expression"]
  1528 -> 424 [style=dashed label="fractional-constant"]
  1528 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1528 -> 426 [style=dashed label="hexadecimal-literal"]
  1528 -> 427 [style=dashed label="hexadecimal-prefix"]
  1528 -> 428 [style=dashed label="id-expression"]
  1528 -> 429 [style=dashed label="inclusive-or-expression"]
  1528 -> 1743 [style=dashed label="initializer-clause"]
  1528 -> 430 [style=dashed label="integer-literal"]
  1528 -> 431 [style=dashed label="lambda-expression"]
  1528 -> 432 [style=dashed label="lambda-introducer"]
  1528 -> 433 [style=dashed label="literal"]
  1528 -> 96 [style=dashed label="literal-operator-id"]
  1528 -> 434 [style=dashed label="logical-and-expression"]
  1528 -> 533 [style=dashed label="logical-or-expression"]
  1528 -> 436 [style=dashed label="multiplicative-expression"]
  1528 -> 100 [style=dashed label="namespace-alias"]
  1528 -> 103 [style=dashed label="namespace-name"]
  1528 -> 437 [style=dashed label="nested-name-specifier"]
  1528 -> 438 [style=dashed label="new-expression"]
  1528 -> 439 [style=dashed label="noexcept-expression"]
  1528 -> 440 [style=dashed label="nonzero-digit"]
  1528 -> 441 [style=dashed label="octal-literal"]
  1528 -> 109 [style=dashed label="operator-function-id"]
  1528 -> 110 [style=dashed label="placeholder-type-specifier"]
  1528 -> 442 [style=dashed label="pm-expression"]
  1528 -> 443 [style=dashed label="pointer-literal"]
  1528 -> 444 [style=dashed label="postfix-expression"]
  1528 -> 445 [style=dashed label="primary-expression"]
  1528 -> 113 [style=dashed label="qualified-id"]
  1528 -> 446 [style=dashed label="relational-expression"]
  1528 -> 447 [style=dashed label="requires-expression"]
  1528 -> 448 [style=dashed label="shift-expression"]
  1528 -> 115 [style=dashed label="simple-template-id"]
  1528 -> 534 [style=dashed label="simple-type-specifier"]
  1528 -> 450 [style=dashed label="string-literal"]
  1528 -> 121 [style=dashed label="template-id"]
  1528 -> 216 [style=dashed label="template-name"]
  1528 -> 535 [style=dashed label="throw-expression"]
  1528 -> 124 [style=dashed label="type-constraint"]
  1528 -> 125 [style=dashed label="type-name"]
  1528 -> 127 [style=dashed label="typedef-name"]
  1528 -> 536 [style=dashed label="typename-specifier"]
  1528 -> 454 [style=dashed label="unary-expression"]
  1528 -> 455 [style=dashed label="unary-operator"]
  1528 -> 130 [style=dashed label="unqualified-id"]
  1528 -> 456 [style=dashed label="user-defined-character-literal"]
  1528 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1528 -> 458 [style=dashed label="user-defined-integer-literal"]
  1528 -> 459 [style=dashed label="user-defined-literal"]
  1528 -> 460 [style=dashed label="user-defined-string-literal"]
  1528 -> 537 [style=dashed label="yield-expression"]
  1529 [label="State 1529\n\l251 designator: '.' IDENTIFIER •\l"]
  1529 -> "1529R251" [style=solid]
 "1529R251" [label="R251", fillcolor=3, shape=diamond, style=filled]
  1530 [label="State 1530\n\l111 braced-init-list: '{' designated-initializer-list ',' • '}'\l250 designated-initializer-list: designated-initializer-list ',' • designated-initializer-clause\l"]
  1530 -> 1744 [style=solid label="'}'"]
  1530 -> 1745 [style=solid label="'.'"]
  1530 -> 1746 [style=dashed label="designated-initializer-clause"]
  1530 -> 1152 [style=dashed label="designator"]
  1531 [label="State 1531\n\l110 braced-init-list: '{' designated-initializer-list '}' •\l"]
  1531 -> "1531R110" [style=solid]
 "1531R110" [label="R110", fillcolor=3, shape=diamond, style=filled]
  1532 [label="State 1532\n\l248 designated-initializer-clause: designator brace-or-equal-initializer •\l"]
  1532 -> "1532R248" [style=solid]
 "1532R248" [label="R248", fillcolor=3, shape=diamond, style=filled]
  1533 [label="State 1533\n\l109 braced-init-list: '{' initializer-list ',' • '}'\l487 initializer-list: initializer-list ',' • initializer-clause\l488                 | initializer-list ',' • initializer-clause \"...\"\l"]
  1533 -> 1 [style=solid label="IDENTIFIER"]
  1533 -> 361 [style=solid label="'+'"]
  1533 -> 362 [style=solid label="'-'"]
  1533 -> 363 [style=solid label="'('"]
  1533 -> 364 [style=solid label="'&'"]
  1533 -> 365 [style=solid label="\"::\""]
  1533 -> 366 [style=solid label="'['"]
  1533 -> 367 [style=solid label="\"co_await\""]
  1533 -> 939 [style=solid label="'{'"]
  1533 -> 1747 [style=solid label="'}'"]
  1533 -> 368 [style=solid label="'0'"]
  1533 -> 369 [style=solid label="'1'"]
  1533 -> 370 [style=solid label="\"0b\""]
  1533 -> 371 [style=solid label="\"0B\""]
  1533 -> 372 [style=solid label="'\\''"]
  1533 -> 373 [style=solid label="\"false\""]
  1533 -> 374 [style=solid label="\"true\""]
  1533 -> 375 [style=solid label="\"noexcept\""]
  1533 -> 17 [style=solid label="\"operator\""]
  1533 -> 26 [style=solid label="\"decltype\""]
  1533 -> 376 [style=solid label="\"delete\""]
  1533 -> 377 [style=solid label="'.'"]
  1533 -> 378 [style=solid label="'2'"]
  1533 -> 379 [style=solid label="'3'"]
  1533 -> 380 [style=solid label="'4'"]
  1533 -> 381 [style=solid label="'5'"]
  1533 -> 382 [style=solid label="'6'"]
  1533 -> 383 [style=solid label="'7'"]
  1533 -> 384 [style=solid label="'8'"]
  1533 -> 385 [style=solid label="'9'"]
  1533 -> 185 [style=solid label="\"u8\""]
  1533 -> 186 [style=solid label="'u'"]
  1533 -> 187 [style=solid label="'U'"]
  1533 -> 188 [style=solid label="'L'"]
  1533 -> 386 [style=solid label="'*'"]
  1533 -> 203 [style=solid label="'\"'"]
  1533 -> 387 [style=solid label="\"0x\""]
  1533 -> 388 [style=solid label="\"0X\""]
  1533 -> 389 [style=solid label="\"requires\""]
  1533 -> 390 [style=solid label="\"new\""]
  1533 -> 391 [style=solid label="'~'"]
  1533 -> 392 [style=solid label="'!'"]
  1533 -> 393 [style=solid label="\"++\""]
  1533 -> 394 [style=solid label="\"--\""]
  1533 -> 395 [style=solid label="\"this\""]
  1533 -> 37 [style=solid label="\"auto\""]
  1533 -> 396 [style=solid label="\"nullptr\""]
  1533 -> 397 [style=solid label="\"dynamic_cast\""]
  1533 -> 398 [style=solid label="\"static_cast\""]
  1533 -> 399 [style=solid label="\"reinterpret_cast\""]
  1533 -> 400 [style=solid label="\"const_cast\""]
  1533 -> 401 [style=solid label="\"typeid\""]
  1533 -> 38 [style=solid label="\"char\""]
  1533 -> 39 [style=solid label="\"char8_t\""]
  1533 -> 40 [style=solid label="\"char16_t\""]
  1533 -> 41 [style=solid label="\"char32_t\""]
  1533 -> 42 [style=solid label="\"wchar_t\""]
  1533 -> 43 [style=solid label="\"bool\""]
  1533 -> 44 [style=solid label="\"short\""]
  1533 -> 45 [style=solid label="\"int\""]
  1533 -> 46 [style=solid label="\"long\""]
  1533 -> 47 [style=solid label="\"signed\""]
  1533 -> 48 [style=solid label="\"unsigned\""]
  1533 -> 49 [style=solid label="\"float\""]
  1533 -> 50 [style=solid label="\"double\""]
  1533 -> 51 [style=solid label="\"void\""]
  1533 -> 209 [style=solid label="'R'"]
  1533 -> 528 [style=solid label="\"throw\""]
  1533 -> 56 [style=solid label="\"typename\""]
  1533 -> 402 [style=solid label="\"sizeof\""]
  1533 -> 403 [style=solid label="\"alignof\""]
  1533 -> 529 [style=solid label="\"co_yield\""]
  1533 -> 404 [style=dashed label="additive-expression"]
  1533 -> 405 [style=dashed label="and-expression"]
  1533 -> 1141 [style=dashed label="assignment-expression"]
  1533 -> 406 [style=dashed label="await-expression"]
  1533 -> 407 [style=dashed label="binary-literal"]
  1533 -> 408 [style=dashed label="boolean-literal"]
  1533 -> 1142 [style=dashed label="braced-init-list"]
  1533 -> 409 [style=dashed label="cast-expression"]
  1533 -> 410 [style=dashed label="character-literal"]
  1533 -> 66 [style=dashed label="class-name"]
  1533 -> 411 [style=dashed label="compare-expression"]
  1533 -> 68 [style=dashed label="concept-name"]
  1533 -> 531 [style=dashed label="conditional-expression"]
  1533 -> 69 [style=dashed label="conversion-function-id"]
  1533 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1533 -> 415 [style=dashed label="decimal-literal"]
  1533 -> 77 [style=dashed label="decltype-specifier"]
  1533 -> 416 [style=dashed label="delete-expression"]
  1533 -> 417 [style=dashed label="digit"]
  1533 -> 418 [style=dashed label="digit-sequence"]
  1533 -> 419 [style=dashed label="encoding-prefix"]
  1533 -> 85 [style=dashed label="enum-name"]
  1533 -> 420 [style=dashed label="equality-expression"]
  1533 -> 421 [style=dashed label="exclusive-or-expression"]
  1533 -> 422 [style=dashed label="floating-point-literal"]
  1533 -> 423 [style=dashed label="fold-expression"]
  1533 -> 424 [style=dashed label="fractional-constant"]
  1533 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1533 -> 426 [style=dashed label="hexadecimal-literal"]
  1533 -> 427 [style=dashed label="hexadecimal-prefix"]
  1533 -> 428 [style=dashed label="id-expression"]
  1533 -> 429 [style=dashed label="inclusive-or-expression"]
  1533 -> 1743 [style=dashed label="initializer-clause"]
  1533 -> 430 [style=dashed label="integer-literal"]
  1533 -> 431 [style=dashed label="lambda-expression"]
  1533 -> 432 [style=dashed label="lambda-introducer"]
  1533 -> 433 [style=dashed label="literal"]
  1533 -> 96 [style=dashed label="literal-operator-id"]
  1533 -> 434 [style=dashed label="logical-and-expression"]
  1533 -> 533 [style=dashed label="logical-or-expression"]
  1533 -> 436 [style=dashed label="multiplicative-expression"]
  1533 -> 100 [style=dashed label="namespace-alias"]
  1533 -> 103 [style=dashed label="namespace-name"]
  1533 -> 437 [style=dashed label="nested-name-specifier"]
  1533 -> 438 [style=dashed label="new-expression"]
  1533 -> 439 [style=dashed label="noexcept-expression"]
  1533 -> 440 [style=dashed label="nonzero-digit"]
  1533 -> 441 [style=dashed label="octal-literal"]
  1533 -> 109 [style=dashed label="operator-function-id"]
  1533 -> 110 [style=dashed label="placeholder-type-specifier"]
  1533 -> 442 [style=dashed label="pm-expression"]
  1533 -> 443 [style=dashed label="pointer-literal"]
  1533 -> 444 [style=dashed label="postfix-expression"]
  1533 -> 445 [style=dashed label="primary-expression"]
  1533 -> 113 [style=dashed label="qualified-id"]
  1533 -> 446 [style=dashed label="relational-expression"]
  1533 -> 447 [style=dashed label="requires-expression"]
  1533 -> 448 [style=dashed label="shift-expression"]
  1533 -> 115 [style=dashed label="simple-template-id"]
  1533 -> 534 [style=dashed label="simple-type-specifier"]
  1533 -> 450 [style=dashed label="string-literal"]
  1533 -> 121 [style=dashed label="template-id"]
  1533 -> 216 [style=dashed label="template-name"]
  1533 -> 535 [style=dashed label="throw-expression"]
  1533 -> 124 [style=dashed label="type-constraint"]
  1533 -> 125 [style=dashed label="type-name"]
  1533 -> 127 [style=dashed label="typedef-name"]
  1533 -> 536 [style=dashed label="typename-specifier"]
  1533 -> 454 [style=dashed label="unary-expression"]
  1533 -> 455 [style=dashed label="unary-operator"]
  1533 -> 130 [style=dashed label="unqualified-id"]
  1533 -> 456 [style=dashed label="user-defined-character-literal"]
  1533 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1533 -> 458 [style=dashed label="user-defined-integer-literal"]
  1533 -> 459 [style=dashed label="user-defined-literal"]
  1533 -> 460 [style=dashed label="user-defined-string-literal"]
  1533 -> 537 [style=dashed label="yield-expression"]
  1534 [label="State 1534\n\l108 braced-init-list: '{' initializer-list '}' •\l"]
  1534 -> "1534R108" [style=solid]
 "1534R108" [label="R108", fillcolor=3, shape=diamond, style=filled]
  1535 [label="State 1535\n\l475 init-declarator: declarator requires-clause •\l"]
  1535 -> "1535R475" [style=solid]
 "1535R475" [label="R475", fillcolor=3, shape=diamond, style=filled]
  1536 [label="State 1536\n\l983 simple-declaration: decl-specifier-seq ref-qualifier '[' identifier-list ']' • initializer ';'\l"]
  1536 -> 1280 [style=solid label="'='"]
  1536 -> 647 [style=solid label="'('"]
  1536 -> 939 [style=solid label="'{'"]
  1536 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1536 -> 650 [style=dashed label="braced-init-list"]
  1536 -> 1748 [style=dashed label="initializer"]
  1537 [label="State 1537\n\l575 mem-initializer: mem-initializer-id '(' ')' •\l"]
  1537 -> "1537R575" [style=solid]
 "1537R575" [label="R575", fillcolor=3, shape=diamond, style=filled]
  1538 [label="State 1538\n\l576 mem-initializer: mem-initializer-id '(' expression-list • ')'\l"]
  1538 -> 1749 [style=solid label="')'"]
  1539 [label="State 1539\n\l582 mem-initializer-list: mem-initializer-list ',' mem-initializer •\l583                     | mem-initializer-list ',' mem-initializer • \"...\"\l"]
  1539 -> 1750 [style=solid label="\"...\""]
  1539 -> "1539R582" [style=solid]
 "1539R582" [label="R582", fillcolor=3, shape=diamond, style=filled]
  1540 [label="State 1540\n\l524 labeled-statement: IDENTIFIER ':' statement •\l"]
  1540 -> "1540R524" [style=solid]
 "1540R524" [label="R524", fillcolor=3, shape=diamond, style=filled]
  1541 [label="State 1541\n\l183 coroutine-return-statement: \"co_return\" expr-or-braced-init-list ';' •\l"]
  1541 -> "1541R183" [style=solid]
 "1541R183" [label="R183", fillcolor=3, shape=diamond, style=filled]
  1542 [label="State 1542\n\l528 labeled-statement: \"default\" ':' statement •\l"]
  1542 -> "1542R528" [style=solid]
 "1542R528" [label="R528", fillcolor=3, shape=diamond, style=filled]
  1543 [label="State 1543\n\l1083 try-block: \"try\" compound-statement handler-seq •\l"]
  1543 -> "1543R1083" [style=solid]
 "1543R1083" [label="R1083", fillcolor=3, shape=diamond, style=filled]
  1544 [label="State 1544\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l165 condition: attribute-specifier-seq • decl-specifier-seq declarator brace-or-equal-initializer\l"]
  1544 -> 161 [style=solid label="IDENTIFIER"]
  1544 -> 4 [style=solid label="\"alignas\""]
  1544 -> 9 [style=solid label="\"::\""]
  1544 -> 10 [style=solid label="'['"]
  1544 -> 11 [style=solid label="\"virtual\""]
  1544 -> 12 [style=solid label="\"class\""]
  1544 -> 13 [style=solid label="\"struct\""]
  1544 -> 14 [style=solid label="\"union\""]
  1544 -> 18 [style=solid label="\"const\""]
  1544 -> 19 [style=solid label="\"volatile\""]
  1544 -> 20 [style=solid label="\"friend\""]
  1544 -> 21 [style=solid label="\"typedef\""]
  1544 -> 22 [style=solid label="\"constexpr\""]
  1544 -> 23 [style=solid label="\"consteval\""]
  1544 -> 24 [style=solid label="\"constinit\""]
  1544 -> 263 [style=solid label="\"inline\""]
  1544 -> 26 [style=solid label="\"decltype\""]
  1544 -> 27 [style=solid label="\"enum\""]
  1544 -> 264 [style=solid label="\"extern\""]
  1544 -> 29 [style=solid label="\"explicit\""]
  1544 -> 37 [style=solid label="\"auto\""]
  1544 -> 38 [style=solid label="\"char\""]
  1544 -> 39 [style=solid label="\"char8_t\""]
  1544 -> 40 [style=solid label="\"char16_t\""]
  1544 -> 41 [style=solid label="\"char32_t\""]
  1544 -> 42 [style=solid label="\"wchar_t\""]
  1544 -> 43 [style=solid label="\"bool\""]
  1544 -> 44 [style=solid label="\"short\""]
  1544 -> 45 [style=solid label="\"int\""]
  1544 -> 46 [style=solid label="\"long\""]
  1544 -> 47 [style=solid label="\"signed\""]
  1544 -> 48 [style=solid label="\"unsigned\""]
  1544 -> 49 [style=solid label="\"float\""]
  1544 -> 50 [style=solid label="\"double\""]
  1544 -> 51 [style=solid label="\"void\""]
  1544 -> 53 [style=solid label="\"static\""]
  1544 -> 54 [style=solid label="\"thread_local\""]
  1544 -> 55 [style=solid label="\"mutable\""]
  1544 -> 56 [style=solid label="\"typename\""]
  1544 -> 58 [style=dashed label="alignment-specifier"]
  1544 -> 265 [style=dashed label="attribute-specifier"]
  1544 -> 64 [style=dashed label="class-head"]
  1544 -> 65 [style=dashed label="class-key"]
  1544 -> 66 [style=dashed label="class-name"]
  1544 -> 67 [style=dashed label="class-specifier"]
  1544 -> 68 [style=dashed label="concept-name"]
  1544 -> 70 [style=dashed label="cv-qualifier"]
  1544 -> 71 [style=dashed label="decl-specifier"]
  1544 -> 1751 [style=dashed label="decl-specifier-seq"]
  1544 -> 77 [style=dashed label="decltype-specifier"]
  1544 -> 79 [style=dashed label="defining-type-specifier"]
  1544 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1544 -> 81 [style=dashed label="elaborated-type-specifier"]
  1544 -> 83 [style=dashed label="enum-head"]
  1544 -> 268 [style=dashed label="enum-key"]
  1544 -> 85 [style=dashed label="enum-name"]
  1544 -> 86 [style=dashed label="enum-specifier"]
  1544 -> 269 [style=dashed label="explicit-specifier"]
  1544 -> 92 [style=dashed label="function-specifier"]
  1544 -> 100 [style=dashed label="namespace-alias"]
  1544 -> 103 [style=dashed label="namespace-name"]
  1544 -> 213 [style=dashed label="nested-name-specifier"]
  1544 -> 110 [style=dashed label="placeholder-type-specifier"]
  1544 -> 142 [style=dashed label="simple-template-id"]
  1544 -> 116 [style=dashed label="simple-type-specifier"]
  1544 -> 118 [style=dashed label="storage-class-specifier"]
  1544 -> 216 [style=dashed label="template-name"]
  1544 -> 124 [style=dashed label="type-constraint"]
  1544 -> 125 [style=dashed label="type-name"]
  1544 -> 126 [style=dashed label="type-specifier"]
  1544 -> 127 [style=dashed label="typedef-name"]
  1544 -> 128 [style=dashed label="typename-specifier"]
  1545 [label="State 1545\n\l509 iteration-statement: \"while\" '(' condition • ')' statement\l"]
  1545 -> 1752 [style=solid label="')'"]
  1546 [label="State 1546\n\l166 condition: decl-specifier-seq • declarator brace-or-equal-initializer\l"]
  1546 -> 148 [style=solid label="IDENTIFIER"]
  1546 -> 5 [style=solid label="'('"]
  1546 -> 6 [style=solid label="\"...\""]
  1546 -> 7 [style=solid label="'&'"]
  1546 -> 9 [style=solid label="\"::\""]
  1546 -> 16 [style=solid label="\"&&\""]
  1546 -> 17 [style=solid label="\"operator\""]
  1546 -> 135 [style=solid label="\"decltype\""]
  1546 -> 32 [style=solid label="'*'"]
  1546 -> 36 [style=solid label="'~'"]
  1546 -> 66 [style=dashed label="class-name"]
  1546 -> 69 [style=dashed label="conversion-function-id"]
  1546 -> 1753 [style=dashed label="declarator"]
  1546 -> 76 [style=dashed label="declarator-id"]
  1546 -> 139 [style=dashed label="decltype-specifier"]
  1546 -> 85 [style=dashed label="enum-name"]
  1546 -> 94 [style=dashed label="id-expression"]
  1546 -> 96 [style=dashed label="literal-operator-id"]
  1546 -> 100 [style=dashed label="namespace-alias"]
  1546 -> 103 [style=dashed label="namespace-name"]
  1546 -> 149 [style=dashed label="nested-name-specifier"]
  1546 -> 107 [style=dashed label="noptr-declarator"]
  1546 -> 109 [style=dashed label="operator-function-id"]
  1546 -> 111 [style=dashed label="ptr-declarator"]
  1546 -> 112 [style=dashed label="ptr-operator"]
  1546 -> 113 [style=dashed label="qualified-id"]
  1546 -> 115 [style=dashed label="simple-template-id"]
  1546 -> 121 [style=dashed label="template-id"]
  1546 -> 143 [style=dashed label="template-name"]
  1546 -> 144 [style=dashed label="type-name"]
  1546 -> 127 [style=dashed label="typedef-name"]
  1546 -> 130 [style=dashed label="unqualified-id"]
  1547 [label="State 1547\n\l164 condition: expression •\l338 expression: expression • ',' assignment-expression\l"]
  1547 -> 1037 [style=solid label="','"]
  1547 -> "1547R164" [style=solid]
 "1547R164" [label="R164", fillcolor=3, shape=diamond, style=filled]
  1548 [label="State 1548\n\l510 iteration-statement: \"do\" statement \"while\" • '(' expression ')' ';'\l"]
  1548 -> 1754 [style=solid label="'('"]
  1549 [label="State 1549\n\l 13 alias-declaration: \"using\" • IDENTIFIER '=' defining-type-id ';'\l 14                  | \"using\" • IDENTIFIER attribute-specifier-seq '=' defining-type-id ';'\l"]
  1549 -> 1755 [style=solid label="IDENTIFIER"]
  1550 [label="State 1550\n\l480 init-statement: alias-declaration •\l"]
  1550 -> "1550R480" [style=solid]
 "1550R480" [label="R480", fillcolor=3, shape=diamond, style=filled]
  1551 [label="State 1551\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l383 for-range-declaration: attribute-specifier-seq • decl-specifier-seq declarator\l385                      | attribute-specifier-seq • decl-specifier-seq '[' identifier-list ']'\l387                      | attribute-specifier-seq • decl-specifier-seq ref-qualifier '[' identifier-list ']'\l979 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list ';'\l980                   | attribute-specifier-seq • decl-specifier-seq '[' identifier-list ']' initializer ';'\l982                   | attribute-specifier-seq • decl-specifier-seq ref-qualifier '[' identifier-list ']' initializer ';'\l"]
  1551 -> 161 [style=solid label="IDENTIFIER"]
  1551 -> 4 [style=solid label="\"alignas\""]
  1551 -> 9 [style=solid label="\"::\""]
  1551 -> 10 [style=solid label="'['"]
  1551 -> 11 [style=solid label="\"virtual\""]
  1551 -> 12 [style=solid label="\"class\""]
  1551 -> 13 [style=solid label="\"struct\""]
  1551 -> 14 [style=solid label="\"union\""]
  1551 -> 18 [style=solid label="\"const\""]
  1551 -> 19 [style=solid label="\"volatile\""]
  1551 -> 20 [style=solid label="\"friend\""]
  1551 -> 21 [style=solid label="\"typedef\""]
  1551 -> 22 [style=solid label="\"constexpr\""]
  1551 -> 23 [style=solid label="\"consteval\""]
  1551 -> 24 [style=solid label="\"constinit\""]
  1551 -> 263 [style=solid label="\"inline\""]
  1551 -> 26 [style=solid label="\"decltype\""]
  1551 -> 27 [style=solid label="\"enum\""]
  1551 -> 264 [style=solid label="\"extern\""]
  1551 -> 29 [style=solid label="\"explicit\""]
  1551 -> 37 [style=solid label="\"auto\""]
  1551 -> 38 [style=solid label="\"char\""]
  1551 -> 39 [style=solid label="\"char8_t\""]
  1551 -> 40 [style=solid label="\"char16_t\""]
  1551 -> 41 [style=solid label="\"char32_t\""]
  1551 -> 42 [style=solid label="\"wchar_t\""]
  1551 -> 43 [style=solid label="\"bool\""]
  1551 -> 44 [style=solid label="\"short\""]
  1551 -> 45 [style=solid label="\"int\""]
  1551 -> 46 [style=solid label="\"long\""]
  1551 -> 47 [style=solid label="\"signed\""]
  1551 -> 48 [style=solid label="\"unsigned\""]
  1551 -> 49 [style=solid label="\"float\""]
  1551 -> 50 [style=solid label="\"double\""]
  1551 -> 51 [style=solid label="\"void\""]
  1551 -> 53 [style=solid label="\"static\""]
  1551 -> 54 [style=solid label="\"thread_local\""]
  1551 -> 55 [style=solid label="\"mutable\""]
  1551 -> 56 [style=solid label="\"typename\""]
  1551 -> 58 [style=dashed label="alignment-specifier"]
  1551 -> 265 [style=dashed label="attribute-specifier"]
  1551 -> 64 [style=dashed label="class-head"]
  1551 -> 65 [style=dashed label="class-key"]
  1551 -> 66 [style=dashed label="class-name"]
  1551 -> 67 [style=dashed label="class-specifier"]
  1551 -> 68 [style=dashed label="concept-name"]
  1551 -> 70 [style=dashed label="cv-qualifier"]
  1551 -> 71 [style=dashed label="decl-specifier"]
  1551 -> 1756 [style=dashed label="decl-specifier-seq"]
  1551 -> 77 [style=dashed label="decltype-specifier"]
  1551 -> 79 [style=dashed label="defining-type-specifier"]
  1551 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1551 -> 81 [style=dashed label="elaborated-type-specifier"]
  1551 -> 83 [style=dashed label="enum-head"]
  1551 -> 268 [style=dashed label="enum-key"]
  1551 -> 85 [style=dashed label="enum-name"]
  1551 -> 86 [style=dashed label="enum-specifier"]
  1551 -> 269 [style=dashed label="explicit-specifier"]
  1551 -> 92 [style=dashed label="function-specifier"]
  1551 -> 100 [style=dashed label="namespace-alias"]
  1551 -> 103 [style=dashed label="namespace-name"]
  1551 -> 213 [style=dashed label="nested-name-specifier"]
  1551 -> 110 [style=dashed label="placeholder-type-specifier"]
  1551 -> 142 [style=dashed label="simple-template-id"]
  1551 -> 116 [style=dashed label="simple-type-specifier"]
  1551 -> 118 [style=dashed label="storage-class-specifier"]
  1551 -> 216 [style=dashed label="template-name"]
  1551 -> 124 [style=dashed label="type-constraint"]
  1551 -> 125 [style=dashed label="type-name"]
  1551 -> 126 [style=dashed label="type-specifier"]
  1551 -> 127 [style=dashed label="typedef-name"]
  1551 -> 128 [style=dashed label="typename-specifier"]
  1552 [label="State 1552\n\l384 for-range-declaration: decl-specifier-seq • declarator\l386                      | decl-specifier-seq • '[' identifier-list ']'\l388                      | decl-specifier-seq • ref-qualifier '[' identifier-list ']'\l977 simple-declaration: decl-specifier-seq • ';'\l978                   | decl-specifier-seq • init-declarator-list ';'\l981                   | decl-specifier-seq • '[' identifier-list ']' initializer ';'\l983                   | decl-specifier-seq • ref-qualifier '[' identifier-list ']' initializer ';'\l"]
  1552 -> 148 [style=solid label="IDENTIFIER"]
  1552 -> 282 [style=solid label="';'"]
  1552 -> 5 [style=solid label="'('"]
  1552 -> 6 [style=solid label="\"...\""]
  1552 -> 283 [style=solid label="'&'"]
  1552 -> 9 [style=solid label="\"::\""]
  1552 -> 1757 [style=solid label="'['"]
  1552 -> 285 [style=solid label="\"&&\""]
  1552 -> 17 [style=solid label="\"operator\""]
  1552 -> 135 [style=solid label="\"decltype\""]
  1552 -> 32 [style=solid label="'*'"]
  1552 -> 36 [style=solid label="'~'"]
  1552 -> 66 [style=dashed label="class-name"]
  1552 -> 69 [style=dashed label="conversion-function-id"]
  1552 -> 1758 [style=dashed label="declarator"]
  1552 -> 76 [style=dashed label="declarator-id"]
  1552 -> 139 [style=dashed label="decltype-specifier"]
  1552 -> 85 [style=dashed label="enum-name"]
  1552 -> 94 [style=dashed label="id-expression"]
  1552 -> 287 [style=dashed label="init-declarator"]
  1552 -> 288 [style=dashed label="init-declarator-list"]
  1552 -> 96 [style=dashed label="literal-operator-id"]
  1552 -> 100 [style=dashed label="namespace-alias"]
  1552 -> 103 [style=dashed label="namespace-name"]
  1552 -> 149 [style=dashed label="nested-name-specifier"]
  1552 -> 107 [style=dashed label="noptr-declarator"]
  1552 -> 109 [style=dashed label="operator-function-id"]
  1552 -> 111 [style=dashed label="ptr-declarator"]
  1552 -> 112 [style=dashed label="ptr-operator"]
  1552 -> 113 [style=dashed label="qualified-id"]
  1552 -> 1759 [style=dashed label="ref-qualifier"]
  1552 -> 115 [style=dashed label="simple-template-id"]
  1552 -> 121 [style=dashed label="template-id"]
  1552 -> 143 [style=dashed label="template-name"]
  1552 -> 144 [style=dashed label="type-name"]
  1552 -> 127 [style=dashed label="typedef-name"]
  1552 -> 130 [style=dashed label="unqualified-id"]
  1553 [label="State 1553\n\l478 init-statement: expression-statement •\l"]
  1553 -> "1553R478" [style=solid]
 "1553R478" [label="R478", fillcolor=3, shape=diamond, style=filled]
  1554 [label="State 1554\n\l515 iteration-statement: \"for\" '(' for-range-declaration • ':' for-range-initializer ')' statement\l"]
  1554 -> 1760 [style=solid label="':'"]
  1555 [label="State 1555\n\l511 iteration-statement: \"for\" '(' init-statement • ';' ')' statement\l512                    | \"for\" '(' init-statement • condition ';' ')' statement\l513                    | \"for\" '(' init-statement • ';' expression ')' statement\l514                    | \"for\" '(' init-statement • condition ';' expression ')' statement\l516                    | \"for\" '(' init-statement • for-range-declaration ':' for-range-initializer ')' statement\l"]
  1555 -> 1 [style=solid label="IDENTIFIER"]
  1555 -> 361 [style=solid label="'+'"]
  1555 -> 362 [style=solid label="'-'"]
  1555 -> 1761 [style=solid label="';'"]
  1555 -> 4 [style=solid label="\"alignas\""]
  1555 -> 363 [style=solid label="'('"]
  1555 -> 364 [style=solid label="'&'"]
  1555 -> 365 [style=solid label="\"::\""]
  1555 -> 667 [style=solid label="'['"]
  1555 -> 367 [style=solid label="\"co_await\""]
  1555 -> 11 [style=solid label="\"virtual\""]
  1555 -> 368 [style=solid label="'0'"]
  1555 -> 369 [style=solid label="'1'"]
  1555 -> 370 [style=solid label="\"0b\""]
  1555 -> 371 [style=solid label="\"0B\""]
  1555 -> 372 [style=solid label="'\\''"]
  1555 -> 373 [style=solid label="\"false\""]
  1555 -> 374 [style=solid label="\"true\""]
  1555 -> 12 [style=solid label="\"class\""]
  1555 -> 13 [style=solid label="\"struct\""]
  1555 -> 14 [style=solid label="\"union\""]
  1555 -> 375 [style=solid label="\"noexcept\""]
  1555 -> 17 [style=solid label="\"operator\""]
  1555 -> 18 [style=solid label="\"const\""]
  1555 -> 19 [style=solid label="\"volatile\""]
  1555 -> 20 [style=solid label="\"friend\""]
  1555 -> 21 [style=solid label="\"typedef\""]
  1555 -> 22 [style=solid label="\"constexpr\""]
  1555 -> 23 [style=solid label="\"consteval\""]
  1555 -> 24 [style=solid label="\"constinit\""]
  1555 -> 263 [style=solid label="\"inline\""]
  1555 -> 26 [style=solid label="\"decltype\""]
  1555 -> 376 [style=solid label="\"delete\""]
  1555 -> 377 [style=solid label="'.'"]
  1555 -> 378 [style=solid label="'2'"]
  1555 -> 379 [style=solid label="'3'"]
  1555 -> 380 [style=solid label="'4'"]
  1555 -> 381 [style=solid label="'5'"]
  1555 -> 382 [style=solid label="'6'"]
  1555 -> 383 [style=solid label="'7'"]
  1555 -> 384 [style=solid label="'8'"]
  1555 -> 385 [style=solid label="'9'"]
  1555 -> 27 [style=solid label="\"enum\""]
  1555 -> 185 [style=solid label="\"u8\""]
  1555 -> 186 [style=solid label="'u'"]
  1555 -> 187 [style=solid label="'U'"]
  1555 -> 188 [style=solid label="'L'"]
  1555 -> 264 [style=solid label="\"extern\""]
  1555 -> 29 [style=solid label="\"explicit\""]
  1555 -> 386 [style=solid label="'*'"]
  1555 -> 203 [style=solid label="'\"'"]
  1555 -> 387 [style=solid label="\"0x\""]
  1555 -> 388 [style=solid label="\"0X\""]
  1555 -> 389 [style=solid label="\"requires\""]
  1555 -> 390 [style=solid label="\"new\""]
  1555 -> 391 [style=solid label="'~'"]
  1555 -> 392 [style=solid label="'!'"]
  1555 -> 393 [style=solid label="\"++\""]
  1555 -> 394 [style=solid label="\"--\""]
  1555 -> 395 [style=solid label="\"this\""]
  1555 -> 37 [style=solid label="\"auto\""]
  1555 -> 396 [style=solid label="\"nullptr\""]
  1555 -> 397 [style=solid label="\"dynamic_cast\""]
  1555 -> 398 [style=solid label="\"static_cast\""]
  1555 -> 399 [style=solid label="\"reinterpret_cast\""]
  1555 -> 400 [style=solid label="\"const_cast\""]
  1555 -> 401 [style=solid label="\"typeid\""]
  1555 -> 38 [style=solid label="\"char\""]
  1555 -> 39 [style=solid label="\"char8_t\""]
  1555 -> 40 [style=solid label="\"char16_t\""]
  1555 -> 41 [style=solid label="\"char32_t\""]
  1555 -> 42 [style=solid label="\"wchar_t\""]
  1555 -> 43 [style=solid label="\"bool\""]
  1555 -> 44 [style=solid label="\"short\""]
  1555 -> 45 [style=solid label="\"int\""]
  1555 -> 46 [style=solid label="\"long\""]
  1555 -> 47 [style=solid label="\"signed\""]
  1555 -> 48 [style=solid label="\"unsigned\""]
  1555 -> 49 [style=solid label="\"float\""]
  1555 -> 50 [style=solid label="\"double\""]
  1555 -> 51 [style=solid label="\"void\""]
  1555 -> 53 [style=solid label="\"static\""]
  1555 -> 54 [style=solid label="\"thread_local\""]
  1555 -> 55 [style=solid label="\"mutable\""]
  1555 -> 209 [style=solid label="'R'"]
  1555 -> 528 [style=solid label="\"throw\""]
  1555 -> 56 [style=solid label="\"typename\""]
  1555 -> 402 [style=solid label="\"sizeof\""]
  1555 -> 403 [style=solid label="\"alignof\""]
  1555 -> 529 [style=solid label="\"co_yield\""]
  1555 -> 404 [style=dashed label="additive-expression"]
  1555 -> 58 [style=dashed label="alignment-specifier"]
  1555 -> 405 [style=dashed label="and-expression"]
  1555 -> 530 [style=dashed label="assignment-expression"]
  1555 -> 61 [style=dashed label="attribute-specifier"]
  1555 -> 1762 [style=dashed label="attribute-specifier-seq"]
  1555 -> 406 [style=dashed label="await-expression"]
  1555 -> 407 [style=dashed label="binary-literal"]
  1555 -> 408 [style=dashed label="boolean-literal"]
  1555 -> 409 [style=dashed label="cast-expression"]
  1555 -> 410 [style=dashed label="character-literal"]
  1555 -> 64 [style=dashed label="class-head"]
  1555 -> 65 [style=dashed label="class-key"]
  1555 -> 66 [style=dashed label="class-name"]
  1555 -> 67 [style=dashed label="class-specifier"]
  1555 -> 411 [style=dashed label="compare-expression"]
  1555 -> 68 [style=dashed label="concept-name"]
  1555 -> 1763 [style=dashed label="condition"]
  1555 -> 531 [style=dashed label="conditional-expression"]
  1555 -> 69 [style=dashed label="conversion-function-id"]
  1555 -> 70 [style=dashed label="cv-qualifier"]
  1555 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1555 -> 415 [style=dashed label="decimal-literal"]
  1555 -> 71 [style=dashed label="decl-specifier"]
  1555 -> 1764 [style=dashed label="decl-specifier-seq"]
  1555 -> 77 [style=dashed label="decltype-specifier"]
  1555 -> 79 [style=dashed label="defining-type-specifier"]
  1555 -> 416 [style=dashed label="delete-expression"]
  1555 -> 417 [style=dashed label="digit"]
  1555 -> 418 [style=dashed label="digit-sequence"]
  1555 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1555 -> 81 [style=dashed label="elaborated-type-specifier"]
  1555 -> 419 [style=dashed label="encoding-prefix"]
  1555 -> 83 [style=dashed label="enum-head"]
  1555 -> 268 [style=dashed label="enum-key"]
  1555 -> 85 [style=dashed label="enum-name"]
  1555 -> 86 [style=dashed label="enum-specifier"]
  1555 -> 420 [style=dashed label="equality-expression"]
  1555 -> 421 [style=dashed label="exclusive-or-expression"]
  1555 -> 269 [style=dashed label="explicit-specifier"]
  1555 -> 1547 [style=dashed label="expression"]
  1555 -> 422 [style=dashed label="floating-point-literal"]
  1555 -> 423 [style=dashed label="fold-expression"]
  1555 -> 1765 [style=dashed label="for-range-declaration"]
  1555 -> 424 [style=dashed label="fractional-constant"]
  1555 -> 92 [style=dashed label="function-specifier"]
  1555 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1555 -> 426 [style=dashed label="hexadecimal-literal"]
  1555 -> 427 [style=dashed label="hexadecimal-prefix"]
  1555 -> 428 [style=dashed label="id-expression"]
  1555 -> 429 [style=dashed label="inclusive-or-expression"]
  1555 -> 430 [style=dashed label="integer-literal"]
  1555 -> 431 [style=dashed label="lambda-expression"]
  1555 -> 432 [style=dashed label="lambda-introducer"]
  1555 -> 433 [style=dashed label="literal"]
  1555 -> 96 [style=dashed label="literal-operator-id"]
  1555 -> 434 [style=dashed label="logical-and-expression"]
  1555 -> 533 [style=dashed label="logical-or-expression"]
  1555 -> 436 [style=dashed label="multiplicative-expression"]
  1555 -> 100 [style=dashed label="namespace-alias"]
  1555 -> 103 [style=dashed label="namespace-name"]
  1555 -> 437 [style=dashed label="nested-name-specifier"]
  1555 -> 438 [style=dashed label="new-expression"]
  1555 -> 439 [style=dashed label="noexcept-expression"]
  1555 -> 440 [style=dashed label="nonzero-digit"]
  1555 -> 441 [style=dashed label="octal-literal"]
  1555 -> 109 [style=dashed label="operator-function-id"]
  1555 -> 110 [style=dashed label="placeholder-type-specifier"]
  1555 -> 442 [style=dashed label="pm-expression"]
  1555 -> 443 [style=dashed label="pointer-literal"]
  1555 -> 444 [style=dashed label="postfix-expression"]
  1555 -> 445 [style=dashed label="primary-expression"]
  1555 -> 113 [style=dashed label="qualified-id"]
  1555 -> 446 [style=dashed label="relational-expression"]
  1555 -> 447 [style=dashed label="requires-expression"]
  1555 -> 448 [style=dashed label="shift-expression"]
  1555 -> 115 [style=dashed label="simple-template-id"]
  1555 -> 449 [style=dashed label="simple-type-specifier"]
  1555 -> 118 [style=dashed label="storage-class-specifier"]
  1555 -> 450 [style=dashed label="string-literal"]
  1555 -> 121 [style=dashed label="template-id"]
  1555 -> 216 [style=dashed label="template-name"]
  1555 -> 535 [style=dashed label="throw-expression"]
  1555 -> 124 [style=dashed label="type-constraint"]
  1555 -> 125 [style=dashed label="type-name"]
  1555 -> 126 [style=dashed label="type-specifier"]
  1555 -> 127 [style=dashed label="typedef-name"]
  1555 -> 453 [style=dashed label="typename-specifier"]
  1555 -> 454 [style=dashed label="unary-expression"]
  1555 -> 455 [style=dashed label="unary-operator"]
  1555 -> 130 [style=dashed label="unqualified-id"]
  1555 -> 456 [style=dashed label="user-defined-character-literal"]
  1555 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1555 -> 458 [style=dashed label="user-defined-integer-literal"]
  1555 -> 459 [style=dashed label="user-defined-literal"]
  1555 -> 460 [style=dashed label="user-defined-string-literal"]
  1555 -> 537 [style=dashed label="yield-expression"]
  1556 [label="State 1556\n\l479 init-statement: simple-declaration •\l"]
  1556 -> "1556R479" [style=solid]
 "1556R479" [label="R479", fillcolor=3, shape=diamond, style=filled]
  1557 [label="State 1557\n\l520 jump-statement: \"return\" expr-or-braced-init-list ';' •\l"]
  1557 -> "1557R520" [style=solid]
 "1557R520" [label="R520", fillcolor=3, shape=diamond, style=filled]
  1558 [label="State 1558\n\l522 jump-statement: \"goto\" IDENTIFIER ';' •\l"]
  1558 -> "1558R522" [style=solid]
 "1558R522" [label="R522", fillcolor=3, shape=diamond, style=filled]
  1559 [label="State 1559\n\l526 labeled-statement: \"case\" constant-expression ':' • statement\l"]
  1559 -> 665 [style=solid label="IDENTIFIER"]
  1559 -> 361 [style=solid label="'+'"]
  1559 -> 362 [style=solid label="'-'"]
  1559 -> 2 [style=solid label="\"using\""]
  1559 -> 666 [style=solid label="';'"]
  1559 -> 4 [style=solid label="\"alignas\""]
  1559 -> 363 [style=solid label="'('"]
  1559 -> 364 [style=solid label="'&'"]
  1559 -> 8 [style=solid label="\"asm\""]
  1559 -> 365 [style=solid label="\"::\""]
  1559 -> 667 [style=solid label="'['"]
  1559 -> 367 [style=solid label="\"co_await\""]
  1559 -> 294 [style=solid label="'{'"]
  1559 -> 11 [style=solid label="\"virtual\""]
  1559 -> 368 [style=solid label="'0'"]
  1559 -> 369 [style=solid label="'1'"]
  1559 -> 370 [style=solid label="\"0b\""]
  1559 -> 371 [style=solid label="\"0B\""]
  1559 -> 372 [style=solid label="'\\''"]
  1559 -> 373 [style=solid label="\"false\""]
  1559 -> 374 [style=solid label="\"true\""]
  1559 -> 12 [style=solid label="\"class\""]
  1559 -> 13 [style=solid label="\"struct\""]
  1559 -> 14 [style=solid label="\"union\""]
  1559 -> 375 [style=solid label="\"noexcept\""]
  1559 -> 17 [style=solid label="\"operator\""]
  1559 -> 669 [style=solid label="\"co_return\""]
  1559 -> 18 [style=solid label="\"const\""]
  1559 -> 19 [style=solid label="\"volatile\""]
  1559 -> 20 [style=solid label="\"friend\""]
  1559 -> 21 [style=solid label="\"typedef\""]
  1559 -> 22 [style=solid label="\"constexpr\""]
  1559 -> 23 [style=solid label="\"consteval\""]
  1559 -> 24 [style=solid label="\"constinit\""]
  1559 -> 263 [style=solid label="\"inline\""]
  1559 -> 26 [style=solid label="\"decltype\""]
  1559 -> 376 [style=solid label="\"delete\""]
  1559 -> 377 [style=solid label="'.'"]
  1559 -> 378 [style=solid label="'2'"]
  1559 -> 379 [style=solid label="'3'"]
  1559 -> 380 [style=solid label="'4'"]
  1559 -> 381 [style=solid label="'5'"]
  1559 -> 382 [style=solid label="'6'"]
  1559 -> 383 [style=solid label="'7'"]
  1559 -> 384 [style=solid label="'8'"]
  1559 -> 385 [style=solid label="'9'"]
  1559 -> 27 [style=solid label="\"enum\""]
  1559 -> 185 [style=solid label="\"u8\""]
  1559 -> 186 [style=solid label="'u'"]
  1559 -> 187 [style=solid label="'U'"]
  1559 -> 188 [style=solid label="'L'"]
  1559 -> 264 [style=solid label="\"extern\""]
  1559 -> 29 [style=solid label="\"explicit\""]
  1559 -> 386 [style=solid label="'*'"]
  1559 -> 670 [style=solid label="\"default\""]
  1559 -> 671 [style=solid label="\"try\""]
  1559 -> 203 [style=solid label="'\"'"]
  1559 -> 387 [style=solid label="\"0x\""]
  1559 -> 388 [style=solid label="\"0X\""]
  1559 -> 672 [style=solid label="\"while\""]
  1559 -> 673 [style=solid label="\"do\""]
  1559 -> 674 [style=solid label="\"for\""]
  1559 -> 675 [style=solid label="\"break\""]
  1559 -> 676 [style=solid label="\"continue\""]
  1559 -> 677 [style=solid label="\"return\""]
  1559 -> 678 [style=solid label="\"goto\""]
  1559 -> 679 [style=solid label="\"case\""]
  1559 -> 680 [style=solid label="\"namespace\""]
  1559 -> 389 [style=solid label="\"requires\""]
  1559 -> 390 [style=solid label="\"new\""]
  1559 -> 391 [style=solid label="'~'"]
  1559 -> 392 [style=solid label="'!'"]
  1559 -> 393 [style=solid label="\"++\""]
  1559 -> 394 [style=solid label="\"--\""]
  1559 -> 395 [style=solid label="\"this\""]
  1559 -> 37 [style=solid label="\"auto\""]
  1559 -> 396 [style=solid label="\"nullptr\""]
  1559 -> 397 [style=solid label="\"dynamic_cast\""]
  1559 -> 398 [style=solid label="\"static_cast\""]
  1559 -> 399 [style=solid label="\"reinterpret_cast\""]
  1559 -> 400 [style=solid label="\"const_cast\""]
  1559 -> 401 [style=solid label="\"typeid\""]
  1559 -> 681 [style=solid label="\"if\""]
  1559 -> 682 [style=solid label="\"switch\""]
  1559 -> 38 [style=solid label="\"char\""]
  1559 -> 39 [style=solid label="\"char8_t\""]
  1559 -> 40 [style=solid label="\"char16_t\""]
  1559 -> 41 [style=solid label="\"char32_t\""]
  1559 -> 42 [style=solid label="\"wchar_t\""]
  1559 -> 43 [style=solid label="\"bool\""]
  1559 -> 44 [style=solid label="\"short\""]
  1559 -> 45 [style=solid label="\"int\""]
  1559 -> 46 [style=solid label="\"long\""]
  1559 -> 47 [style=solid label="\"signed\""]
  1559 -> 48 [style=solid label="\"unsigned\""]
  1559 -> 49 [style=solid label="\"float\""]
  1559 -> 50 [style=solid label="\"double\""]
  1559 -> 51 [style=solid label="\"void\""]
  1559 -> 52 [style=solid label="\"static_assert\""]
  1559 -> 53 [style=solid label="\"static\""]
  1559 -> 54 [style=solid label="\"thread_local\""]
  1559 -> 55 [style=solid label="\"mutable\""]
  1559 -> 209 [style=solid label="'R'"]
  1559 -> 528 [style=solid label="\"throw\""]
  1559 -> 56 [style=solid label="\"typename\""]
  1559 -> 402 [style=solid label="\"sizeof\""]
  1559 -> 403 [style=solid label="\"alignof\""]
  1559 -> 529 [style=solid label="\"co_yield\""]
  1559 -> 404 [style=dashed label="additive-expression"]
  1559 -> 57 [style=dashed label="alias-declaration"]
  1559 -> 58 [style=dashed label="alignment-specifier"]
  1559 -> 405 [style=dashed label="and-expression"]
  1559 -> 59 [style=dashed label="asm-declaration"]
  1559 -> 530 [style=dashed label="assignment-expression"]
  1559 -> 61 [style=dashed label="attribute-specifier"]
  1559 -> 683 [style=dashed label="attribute-specifier-seq"]
  1559 -> 406 [style=dashed label="await-expression"]
  1559 -> 407 [style=dashed label="binary-literal"]
  1559 -> 684 [style=dashed label="block-declaration"]
  1559 -> 408 [style=dashed label="boolean-literal"]
  1559 -> 409 [style=dashed label="cast-expression"]
  1559 -> 410 [style=dashed label="character-literal"]
  1559 -> 64 [style=dashed label="class-head"]
  1559 -> 65 [style=dashed label="class-key"]
  1559 -> 66 [style=dashed label="class-name"]
  1559 -> 67 [style=dashed label="class-specifier"]
  1559 -> 411 [style=dashed label="compare-expression"]
  1559 -> 685 [style=dashed label="compound-statement"]
  1559 -> 68 [style=dashed label="concept-name"]
  1559 -> 531 [style=dashed label="conditional-expression"]
  1559 -> 69 [style=dashed label="conversion-function-id"]
  1559 -> 686 [style=dashed label="coroutine-return-statement"]
  1559 -> 70 [style=dashed label="cv-qualifier"]
  1559 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1559 -> 415 [style=dashed label="decimal-literal"]
  1559 -> 71 [style=dashed label="decl-specifier"]
  1559 -> 687 [style=dashed label="decl-specifier-seq"]
  1559 -> 688 [style=dashed label="declaration-statement"]
  1559 -> 77 [style=dashed label="decltype-specifier"]
  1559 -> 79 [style=dashed label="defining-type-specifier"]
  1559 -> 416 [style=dashed label="delete-expression"]
  1559 -> 417 [style=dashed label="digit"]
  1559 -> 418 [style=dashed label="digit-sequence"]
  1559 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1559 -> 81 [style=dashed label="elaborated-type-specifier"]
  1559 -> 419 [style=dashed label="encoding-prefix"]
  1559 -> 83 [style=dashed label="enum-head"]
  1559 -> 84 [style=dashed label="enum-key"]
  1559 -> 85 [style=dashed label="enum-name"]
  1559 -> 86 [style=dashed label="enum-specifier"]
  1559 -> 420 [style=dashed label="equality-expression"]
  1559 -> 421 [style=dashed label="exclusive-or-expression"]
  1559 -> 269 [style=dashed label="explicit-specifier"]
  1559 -> 689 [style=dashed label="expression"]
  1559 -> 690 [style=dashed label="expression-statement"]
  1559 -> 422 [style=dashed label="floating-point-literal"]
  1559 -> 423 [style=dashed label="fold-expression"]
  1559 -> 424 [style=dashed label="fractional-constant"]
  1559 -> 92 [style=dashed label="function-specifier"]
  1559 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1559 -> 426 [style=dashed label="hexadecimal-literal"]
  1559 -> 427 [style=dashed label="hexadecimal-prefix"]
  1559 -> 428 [style=dashed label="id-expression"]
  1559 -> 429 [style=dashed label="inclusive-or-expression"]
  1559 -> 430 [style=dashed label="integer-literal"]
  1559 -> 691 [style=dashed label="iteration-statement"]
  1559 -> 692 [style=dashed label="jump-statement"]
  1559 -> 693 [style=dashed label="labeled-statement"]
  1559 -> 431 [style=dashed label="lambda-expression"]
  1559 -> 432 [style=dashed label="lambda-introducer"]
  1559 -> 433 [style=dashed label="literal"]
  1559 -> 96 [style=dashed label="literal-operator-id"]
  1559 -> 434 [style=dashed label="logical-and-expression"]
  1559 -> 533 [style=dashed label="logical-or-expression"]
  1559 -> 436 [style=dashed label="multiplicative-expression"]
  1559 -> 100 [style=dashed label="namespace-alias"]
  1559 -> 101 [style=dashed label="namespace-alias-definition"]
  1559 -> 103 [style=dashed label="namespace-name"]
  1559 -> 437 [style=dashed label="nested-name-specifier"]
  1559 -> 438 [style=dashed label="new-expression"]
  1559 -> 439 [style=dashed label="noexcept-expression"]
  1559 -> 440 [style=dashed label="nonzero-digit"]
  1559 -> 441 [style=dashed label="octal-literal"]
  1559 -> 108 [style=dashed label="opaque-enum-declaration"]
  1559 -> 109 [style=dashed label="operator-function-id"]
  1559 -> 110 [style=dashed label="placeholder-type-specifier"]
  1559 -> 442 [style=dashed label="pm-expression"]
  1559 -> 443 [style=dashed label="pointer-literal"]
  1559 -> 444 [style=dashed label="postfix-expression"]
  1559 -> 445 [style=dashed label="primary-expression"]
  1559 -> 113 [style=dashed label="qualified-id"]
  1559 -> 446 [style=dashed label="relational-expression"]
  1559 -> 447 [style=dashed label="requires-expression"]
  1559 -> 694 [style=dashed label="selection-statement"]
  1559 -> 448 [style=dashed label="shift-expression"]
  1559 -> 114 [style=dashed label="simple-declaration"]
  1559 -> 115 [style=dashed label="simple-template-id"]
  1559 -> 449 [style=dashed label="simple-type-specifier"]
  1559 -> 1766 [style=dashed label="statement"]
  1559 -> 117 [style=dashed label="static_assert-declaration"]
  1559 -> 118 [style=dashed label="storage-class-specifier"]
  1559 -> 450 [style=dashed label="string-literal"]
  1559 -> 121 [style=dashed label="template-id"]
  1559 -> 216 [style=dashed label="template-name"]
  1559 -> 535 [style=dashed label="throw-expression"]
  1559 -> 697 [style=dashed label="try-block"]
  1559 -> 124 [style=dashed label="type-constraint"]
  1559 -> 125 [style=dashed label="type-name"]
  1559 -> 126 [style=dashed label="type-specifier"]
  1559 -> 127 [style=dashed label="typedef-name"]
  1559 -> 453 [style=dashed label="typename-specifier"]
  1559 -> 454 [style=dashed label="unary-expression"]
  1559 -> 455 [style=dashed label="unary-operator"]
  1559 -> 130 [style=dashed label="unqualified-id"]
  1559 -> 456 [style=dashed label="user-defined-character-literal"]
  1559 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1559 -> 458 [style=dashed label="user-defined-integer-literal"]
  1559 -> 459 [style=dashed label="user-defined-literal"]
  1559 -> 460 [style=dashed label="user-defined-string-literal"]
  1559 -> 131 [style=dashed label="using-declaration"]
  1559 -> 132 [style=dashed label="using-directive"]
  1559 -> 133 [style=dashed label="using-enum-declaration"]
  1559 -> 537 [style=dashed label="yield-expression"]
  1560 [label="State 1560\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l165 condition: attribute-specifier-seq • decl-specifier-seq declarator brace-or-equal-initializer\l979 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list ';'\l980                   | attribute-specifier-seq • decl-specifier-seq '[' identifier-list ']' initializer ';'\l982                   | attribute-specifier-seq • decl-specifier-seq ref-qualifier '[' identifier-list ']' initializer ';'\l"]
  1560 -> 161 [style=solid label="IDENTIFIER"]
  1560 -> 4 [style=solid label="\"alignas\""]
  1560 -> 9 [style=solid label="\"::\""]
  1560 -> 10 [style=solid label="'['"]
  1560 -> 11 [style=solid label="\"virtual\""]
  1560 -> 12 [style=solid label="\"class\""]
  1560 -> 13 [style=solid label="\"struct\""]
  1560 -> 14 [style=solid label="\"union\""]
  1560 -> 18 [style=solid label="\"const\""]
  1560 -> 19 [style=solid label="\"volatile\""]
  1560 -> 20 [style=solid label="\"friend\""]
  1560 -> 21 [style=solid label="\"typedef\""]
  1560 -> 22 [style=solid label="\"constexpr\""]
  1560 -> 23 [style=solid label="\"consteval\""]
  1560 -> 24 [style=solid label="\"constinit\""]
  1560 -> 263 [style=solid label="\"inline\""]
  1560 -> 26 [style=solid label="\"decltype\""]
  1560 -> 27 [style=solid label="\"enum\""]
  1560 -> 264 [style=solid label="\"extern\""]
  1560 -> 29 [style=solid label="\"explicit\""]
  1560 -> 37 [style=solid label="\"auto\""]
  1560 -> 38 [style=solid label="\"char\""]
  1560 -> 39 [style=solid label="\"char8_t\""]
  1560 -> 40 [style=solid label="\"char16_t\""]
  1560 -> 41 [style=solid label="\"char32_t\""]
  1560 -> 42 [style=solid label="\"wchar_t\""]
  1560 -> 43 [style=solid label="\"bool\""]
  1560 -> 44 [style=solid label="\"short\""]
  1560 -> 45 [style=solid label="\"int\""]
  1560 -> 46 [style=solid label="\"long\""]
  1560 -> 47 [style=solid label="\"signed\""]
  1560 -> 48 [style=solid label="\"unsigned\""]
  1560 -> 49 [style=solid label="\"float\""]
  1560 -> 50 [style=solid label="\"double\""]
  1560 -> 51 [style=solid label="\"void\""]
  1560 -> 53 [style=solid label="\"static\""]
  1560 -> 54 [style=solid label="\"thread_local\""]
  1560 -> 55 [style=solid label="\"mutable\""]
  1560 -> 56 [style=solid label="\"typename\""]
  1560 -> 58 [style=dashed label="alignment-specifier"]
  1560 -> 265 [style=dashed label="attribute-specifier"]
  1560 -> 64 [style=dashed label="class-head"]
  1560 -> 65 [style=dashed label="class-key"]
  1560 -> 66 [style=dashed label="class-name"]
  1560 -> 67 [style=dashed label="class-specifier"]
  1560 -> 68 [style=dashed label="concept-name"]
  1560 -> 70 [style=dashed label="cv-qualifier"]
  1560 -> 71 [style=dashed label="decl-specifier"]
  1560 -> 1767 [style=dashed label="decl-specifier-seq"]
  1560 -> 77 [style=dashed label="decltype-specifier"]
  1560 -> 79 [style=dashed label="defining-type-specifier"]
  1560 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1560 -> 81 [style=dashed label="elaborated-type-specifier"]
  1560 -> 83 [style=dashed label="enum-head"]
  1560 -> 268 [style=dashed label="enum-key"]
  1560 -> 85 [style=dashed label="enum-name"]
  1560 -> 86 [style=dashed label="enum-specifier"]
  1560 -> 269 [style=dashed label="explicit-specifier"]
  1560 -> 92 [style=dashed label="function-specifier"]
  1560 -> 100 [style=dashed label="namespace-alias"]
  1560 -> 103 [style=dashed label="namespace-name"]
  1560 -> 213 [style=dashed label="nested-name-specifier"]
  1560 -> 110 [style=dashed label="placeholder-type-specifier"]
  1560 -> 142 [style=dashed label="simple-template-id"]
  1560 -> 116 [style=dashed label="simple-type-specifier"]
  1560 -> 118 [style=dashed label="storage-class-specifier"]
  1560 -> 216 [style=dashed label="template-name"]
  1560 -> 124 [style=dashed label="type-constraint"]
  1560 -> 125 [style=dashed label="type-name"]
  1560 -> 126 [style=dashed label="type-specifier"]
  1560 -> 127 [style=dashed label="typedef-name"]
  1560 -> 128 [style=dashed label="typename-specifier"]
  1561 [label="State 1561\n\l952 selection-statement: \"if\" '(' condition • ')' statement\l956                    | \"if\" '(' condition • ')' statement \"else\" statement\l"]
  1561 -> 1768 [style=solid label="')'"]
  1562 [label="State 1562\n\l166 condition: decl-specifier-seq • declarator brace-or-equal-initializer\l977 simple-declaration: decl-specifier-seq • ';'\l978                   | decl-specifier-seq • init-declarator-list ';'\l981                   | decl-specifier-seq • '[' identifier-list ']' initializer ';'\l983                   | decl-specifier-seq • ref-qualifier '[' identifier-list ']' initializer ';'\l"]
  1562 -> 148 [style=solid label="IDENTIFIER"]
  1562 -> 282 [style=solid label="';'"]
  1562 -> 5 [style=solid label="'('"]
  1562 -> 6 [style=solid label="\"...\""]
  1562 -> 283 [style=solid label="'&'"]
  1562 -> 9 [style=solid label="\"::\""]
  1562 -> 284 [style=solid label="'['"]
  1562 -> 285 [style=solid label="\"&&\""]
  1562 -> 17 [style=solid label="\"operator\""]
  1562 -> 135 [style=solid label="\"decltype\""]
  1562 -> 32 [style=solid label="'*'"]
  1562 -> 36 [style=solid label="'~'"]
  1562 -> 66 [style=dashed label="class-name"]
  1562 -> 69 [style=dashed label="conversion-function-id"]
  1562 -> 1769 [style=dashed label="declarator"]
  1562 -> 76 [style=dashed label="declarator-id"]
  1562 -> 139 [style=dashed label="decltype-specifier"]
  1562 -> 85 [style=dashed label="enum-name"]
  1562 -> 94 [style=dashed label="id-expression"]
  1562 -> 287 [style=dashed label="init-declarator"]
  1562 -> 288 [style=dashed label="init-declarator-list"]
  1562 -> 96 [style=dashed label="literal-operator-id"]
  1562 -> 100 [style=dashed label="namespace-alias"]
  1562 -> 103 [style=dashed label="namespace-name"]
  1562 -> 149 [style=dashed label="nested-name-specifier"]
  1562 -> 107 [style=dashed label="noptr-declarator"]
  1562 -> 109 [style=dashed label="operator-function-id"]
  1562 -> 111 [style=dashed label="ptr-declarator"]
  1562 -> 112 [style=dashed label="ptr-operator"]
  1562 -> 113 [style=dashed label="qualified-id"]
  1562 -> 289 [style=dashed label="ref-qualifier"]
  1562 -> 115 [style=dashed label="simple-template-id"]
  1562 -> 121 [style=dashed label="template-id"]
  1562 -> 143 [style=dashed label="template-name"]
  1562 -> 144 [style=dashed label="type-name"]
  1562 -> 127 [style=dashed label="typedef-name"]
  1562 -> 130 [style=dashed label="unqualified-id"]
  1563 [label="State 1563\n\l164 condition: expression •\l338 expression: expression • ',' assignment-expression\l340 expression-statement: expression • ';'\l"]
  1563 -> 1197 [style=solid label="';'"]
  1563 -> 1037 [style=solid label="','"]
  1563 -> "1563R164" [style=solid]
 "1563R164" [label="R164", fillcolor=3, shape=diamond, style=filled]
  1564 [label="State 1564\n\l954 selection-statement: \"if\" '(' init-statement • condition ')' statement\l958                    | \"if\" '(' init-statement • condition ')' statement \"else\" statement\l"]
  1564 -> 1 [style=solid label="IDENTIFIER"]
  1564 -> 361 [style=solid label="'+'"]
  1564 -> 362 [style=solid label="'-'"]
  1564 -> 4 [style=solid label="\"alignas\""]
  1564 -> 363 [style=solid label="'('"]
  1564 -> 364 [style=solid label="'&'"]
  1564 -> 365 [style=solid label="\"::\""]
  1564 -> 667 [style=solid label="'['"]
  1564 -> 367 [style=solid label="\"co_await\""]
  1564 -> 11 [style=solid label="\"virtual\""]
  1564 -> 368 [style=solid label="'0'"]
  1564 -> 369 [style=solid label="'1'"]
  1564 -> 370 [style=solid label="\"0b\""]
  1564 -> 371 [style=solid label="\"0B\""]
  1564 -> 372 [style=solid label="'\\''"]
  1564 -> 373 [style=solid label="\"false\""]
  1564 -> 374 [style=solid label="\"true\""]
  1564 -> 12 [style=solid label="\"class\""]
  1564 -> 13 [style=solid label="\"struct\""]
  1564 -> 14 [style=solid label="\"union\""]
  1564 -> 375 [style=solid label="\"noexcept\""]
  1564 -> 17 [style=solid label="\"operator\""]
  1564 -> 18 [style=solid label="\"const\""]
  1564 -> 19 [style=solid label="\"volatile\""]
  1564 -> 20 [style=solid label="\"friend\""]
  1564 -> 21 [style=solid label="\"typedef\""]
  1564 -> 22 [style=solid label="\"constexpr\""]
  1564 -> 23 [style=solid label="\"consteval\""]
  1564 -> 24 [style=solid label="\"constinit\""]
  1564 -> 263 [style=solid label="\"inline\""]
  1564 -> 26 [style=solid label="\"decltype\""]
  1564 -> 376 [style=solid label="\"delete\""]
  1564 -> 377 [style=solid label="'.'"]
  1564 -> 378 [style=solid label="'2'"]
  1564 -> 379 [style=solid label="'3'"]
  1564 -> 380 [style=solid label="'4'"]
  1564 -> 381 [style=solid label="'5'"]
  1564 -> 382 [style=solid label="'6'"]
  1564 -> 383 [style=solid label="'7'"]
  1564 -> 384 [style=solid label="'8'"]
  1564 -> 385 [style=solid label="'9'"]
  1564 -> 27 [style=solid label="\"enum\""]
  1564 -> 185 [style=solid label="\"u8\""]
  1564 -> 186 [style=solid label="'u'"]
  1564 -> 187 [style=solid label="'U'"]
  1564 -> 188 [style=solid label="'L'"]
  1564 -> 264 [style=solid label="\"extern\""]
  1564 -> 29 [style=solid label="\"explicit\""]
  1564 -> 386 [style=solid label="'*'"]
  1564 -> 203 [style=solid label="'\"'"]
  1564 -> 387 [style=solid label="\"0x\""]
  1564 -> 388 [style=solid label="\"0X\""]
  1564 -> 389 [style=solid label="\"requires\""]
  1564 -> 390 [style=solid label="\"new\""]
  1564 -> 391 [style=solid label="'~'"]
  1564 -> 392 [style=solid label="'!'"]
  1564 -> 393 [style=solid label="\"++\""]
  1564 -> 394 [style=solid label="\"--\""]
  1564 -> 395 [style=solid label="\"this\""]
  1564 -> 37 [style=solid label="\"auto\""]
  1564 -> 396 [style=solid label="\"nullptr\""]
  1564 -> 397 [style=solid label="\"dynamic_cast\""]
  1564 -> 398 [style=solid label="\"static_cast\""]
  1564 -> 399 [style=solid label="\"reinterpret_cast\""]
  1564 -> 400 [style=solid label="\"const_cast\""]
  1564 -> 401 [style=solid label="\"typeid\""]
  1564 -> 38 [style=solid label="\"char\""]
  1564 -> 39 [style=solid label="\"char8_t\""]
  1564 -> 40 [style=solid label="\"char16_t\""]
  1564 -> 41 [style=solid label="\"char32_t\""]
  1564 -> 42 [style=solid label="\"wchar_t\""]
  1564 -> 43 [style=solid label="\"bool\""]
  1564 -> 44 [style=solid label="\"short\""]
  1564 -> 45 [style=solid label="\"int\""]
  1564 -> 46 [style=solid label="\"long\""]
  1564 -> 47 [style=solid label="\"signed\""]
  1564 -> 48 [style=solid label="\"unsigned\""]
  1564 -> 49 [style=solid label="\"float\""]
  1564 -> 50 [style=solid label="\"double\""]
  1564 -> 51 [style=solid label="\"void\""]
  1564 -> 53 [style=solid label="\"static\""]
  1564 -> 54 [style=solid label="\"thread_local\""]
  1564 -> 55 [style=solid label="\"mutable\""]
  1564 -> 209 [style=solid label="'R'"]
  1564 -> 528 [style=solid label="\"throw\""]
  1564 -> 56 [style=solid label="\"typename\""]
  1564 -> 402 [style=solid label="\"sizeof\""]
  1564 -> 403 [style=solid label="\"alignof\""]
  1564 -> 529 [style=solid label="\"co_yield\""]
  1564 -> 404 [style=dashed label="additive-expression"]
  1564 -> 58 [style=dashed label="alignment-specifier"]
  1564 -> 405 [style=dashed label="and-expression"]
  1564 -> 530 [style=dashed label="assignment-expression"]
  1564 -> 61 [style=dashed label="attribute-specifier"]
  1564 -> 1544 [style=dashed label="attribute-specifier-seq"]
  1564 -> 406 [style=dashed label="await-expression"]
  1564 -> 407 [style=dashed label="binary-literal"]
  1564 -> 408 [style=dashed label="boolean-literal"]
  1564 -> 409 [style=dashed label="cast-expression"]
  1564 -> 410 [style=dashed label="character-literal"]
  1564 -> 64 [style=dashed label="class-head"]
  1564 -> 65 [style=dashed label="class-key"]
  1564 -> 66 [style=dashed label="class-name"]
  1564 -> 67 [style=dashed label="class-specifier"]
  1564 -> 411 [style=dashed label="compare-expression"]
  1564 -> 68 [style=dashed label="concept-name"]
  1564 -> 1770 [style=dashed label="condition"]
  1564 -> 531 [style=dashed label="conditional-expression"]
  1564 -> 69 [style=dashed label="conversion-function-id"]
  1564 -> 70 [style=dashed label="cv-qualifier"]
  1564 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1564 -> 415 [style=dashed label="decimal-literal"]
  1564 -> 71 [style=dashed label="decl-specifier"]
  1564 -> 1546 [style=dashed label="decl-specifier-seq"]
  1564 -> 77 [style=dashed label="decltype-specifier"]
  1564 -> 79 [style=dashed label="defining-type-specifier"]
  1564 -> 416 [style=dashed label="delete-expression"]
  1564 -> 417 [style=dashed label="digit"]
  1564 -> 418 [style=dashed label="digit-sequence"]
  1564 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1564 -> 81 [style=dashed label="elaborated-type-specifier"]
  1564 -> 419 [style=dashed label="encoding-prefix"]
  1564 -> 83 [style=dashed label="enum-head"]
  1564 -> 268 [style=dashed label="enum-key"]
  1564 -> 85 [style=dashed label="enum-name"]
  1564 -> 86 [style=dashed label="enum-specifier"]
  1564 -> 420 [style=dashed label="equality-expression"]
  1564 -> 421 [style=dashed label="exclusive-or-expression"]
  1564 -> 269 [style=dashed label="explicit-specifier"]
  1564 -> 1547 [style=dashed label="expression"]
  1564 -> 422 [style=dashed label="floating-point-literal"]
  1564 -> 423 [style=dashed label="fold-expression"]
  1564 -> 424 [style=dashed label="fractional-constant"]
  1564 -> 92 [style=dashed label="function-specifier"]
  1564 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1564 -> 426 [style=dashed label="hexadecimal-literal"]
  1564 -> 427 [style=dashed label="hexadecimal-prefix"]
  1564 -> 428 [style=dashed label="id-expression"]
  1564 -> 429 [style=dashed label="inclusive-or-expression"]
  1564 -> 430 [style=dashed label="integer-literal"]
  1564 -> 431 [style=dashed label="lambda-expression"]
  1564 -> 432 [style=dashed label="lambda-introducer"]
  1564 -> 433 [style=dashed label="literal"]
  1564 -> 96 [style=dashed label="literal-operator-id"]
  1564 -> 434 [style=dashed label="logical-and-expression"]
  1564 -> 533 [style=dashed label="logical-or-expression"]
  1564 -> 436 [style=dashed label="multiplicative-expression"]
  1564 -> 100 [style=dashed label="namespace-alias"]
  1564 -> 103 [style=dashed label="namespace-name"]
  1564 -> 437 [style=dashed label="nested-name-specifier"]
  1564 -> 438 [style=dashed label="new-expression"]
  1564 -> 439 [style=dashed label="noexcept-expression"]
  1564 -> 440 [style=dashed label="nonzero-digit"]
  1564 -> 441 [style=dashed label="octal-literal"]
  1564 -> 109 [style=dashed label="operator-function-id"]
  1564 -> 110 [style=dashed label="placeholder-type-specifier"]
  1564 -> 442 [style=dashed label="pm-expression"]
  1564 -> 443 [style=dashed label="pointer-literal"]
  1564 -> 444 [style=dashed label="postfix-expression"]
  1564 -> 445 [style=dashed label="primary-expression"]
  1564 -> 113 [style=dashed label="qualified-id"]
  1564 -> 446 [style=dashed label="relational-expression"]
  1564 -> 447 [style=dashed label="requires-expression"]
  1564 -> 448 [style=dashed label="shift-expression"]
  1564 -> 115 [style=dashed label="simple-template-id"]
  1564 -> 449 [style=dashed label="simple-type-specifier"]
  1564 -> 118 [style=dashed label="storage-class-specifier"]
  1564 -> 450 [style=dashed label="string-literal"]
  1564 -> 121 [style=dashed label="template-id"]
  1564 -> 216 [style=dashed label="template-name"]
  1564 -> 535 [style=dashed label="throw-expression"]
  1564 -> 124 [style=dashed label="type-constraint"]
  1564 -> 125 [style=dashed label="type-name"]
  1564 -> 126 [style=dashed label="type-specifier"]
  1564 -> 127 [style=dashed label="typedef-name"]
  1564 -> 453 [style=dashed label="typename-specifier"]
  1564 -> 454 [style=dashed label="unary-expression"]
  1564 -> 455 [style=dashed label="unary-operator"]
  1564 -> 130 [style=dashed label="unqualified-id"]
  1564 -> 456 [style=dashed label="user-defined-character-literal"]
  1564 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1564 -> 458 [style=dashed label="user-defined-integer-literal"]
  1564 -> 459 [style=dashed label="user-defined-literal"]
  1564 -> 460 [style=dashed label="user-defined-string-literal"]
  1564 -> 537 [style=dashed label="yield-expression"]
  1565 [label="State 1565\n\l953 selection-statement: \"if\" \"constexpr\" '(' • condition ')' statement\l955                    | \"if\" \"constexpr\" '(' • init-statement condition ')' statement\l957                    | \"if\" \"constexpr\" '(' • condition ')' statement \"else\" statement\l959                    | \"if\" \"constexpr\" '(' • init-statement condition ')' statement \"else\" statement\l"]
  1565 -> 1 [style=solid label="IDENTIFIER"]
  1565 -> 361 [style=solid label="'+'"]
  1565 -> 362 [style=solid label="'-'"]
  1565 -> 1549 [style=solid label="\"using\""]
  1565 -> 666 [style=solid label="';'"]
  1565 -> 4 [style=solid label="\"alignas\""]
  1565 -> 363 [style=solid label="'('"]
  1565 -> 364 [style=solid label="'&'"]
  1565 -> 365 [style=solid label="\"::\""]
  1565 -> 667 [style=solid label="'['"]
  1565 -> 367 [style=solid label="\"co_await\""]
  1565 -> 11 [style=solid label="\"virtual\""]
  1565 -> 368 [style=solid label="'0'"]
  1565 -> 369 [style=solid label="'1'"]
  1565 -> 370 [style=solid label="\"0b\""]
  1565 -> 371 [style=solid label="\"0B\""]
  1565 -> 372 [style=solid label="'\\''"]
  1565 -> 373 [style=solid label="\"false\""]
  1565 -> 374 [style=solid label="\"true\""]
  1565 -> 12 [style=solid label="\"class\""]
  1565 -> 13 [style=solid label="\"struct\""]
  1565 -> 14 [style=solid label="\"union\""]
  1565 -> 375 [style=solid label="\"noexcept\""]
  1565 -> 17 [style=solid label="\"operator\""]
  1565 -> 18 [style=solid label="\"const\""]
  1565 -> 19 [style=solid label="\"volatile\""]
  1565 -> 20 [style=solid label="\"friend\""]
  1565 -> 21 [style=solid label="\"typedef\""]
  1565 -> 22 [style=solid label="\"constexpr\""]
  1565 -> 23 [style=solid label="\"consteval\""]
  1565 -> 24 [style=solid label="\"constinit\""]
  1565 -> 263 [style=solid label="\"inline\""]
  1565 -> 26 [style=solid label="\"decltype\""]
  1565 -> 376 [style=solid label="\"delete\""]
  1565 -> 377 [style=solid label="'.'"]
  1565 -> 378 [style=solid label="'2'"]
  1565 -> 379 [style=solid label="'3'"]
  1565 -> 380 [style=solid label="'4'"]
  1565 -> 381 [style=solid label="'5'"]
  1565 -> 382 [style=solid label="'6'"]
  1565 -> 383 [style=solid label="'7'"]
  1565 -> 384 [style=solid label="'8'"]
  1565 -> 385 [style=solid label="'9'"]
  1565 -> 27 [style=solid label="\"enum\""]
  1565 -> 185 [style=solid label="\"u8\""]
  1565 -> 186 [style=solid label="'u'"]
  1565 -> 187 [style=solid label="'U'"]
  1565 -> 188 [style=solid label="'L'"]
  1565 -> 264 [style=solid label="\"extern\""]
  1565 -> 29 [style=solid label="\"explicit\""]
  1565 -> 386 [style=solid label="'*'"]
  1565 -> 203 [style=solid label="'\"'"]
  1565 -> 387 [style=solid label="\"0x\""]
  1565 -> 388 [style=solid label="\"0X\""]
  1565 -> 389 [style=solid label="\"requires\""]
  1565 -> 390 [style=solid label="\"new\""]
  1565 -> 391 [style=solid label="'~'"]
  1565 -> 392 [style=solid label="'!'"]
  1565 -> 393 [style=solid label="\"++\""]
  1565 -> 394 [style=solid label="\"--\""]
  1565 -> 395 [style=solid label="\"this\""]
  1565 -> 37 [style=solid label="\"auto\""]
  1565 -> 396 [style=solid label="\"nullptr\""]
  1565 -> 397 [style=solid label="\"dynamic_cast\""]
  1565 -> 398 [style=solid label="\"static_cast\""]
  1565 -> 399 [style=solid label="\"reinterpret_cast\""]
  1565 -> 400 [style=solid label="\"const_cast\""]
  1565 -> 401 [style=solid label="\"typeid\""]
  1565 -> 38 [style=solid label="\"char\""]
  1565 -> 39 [style=solid label="\"char8_t\""]
  1565 -> 40 [style=solid label="\"char16_t\""]
  1565 -> 41 [style=solid label="\"char32_t\""]
  1565 -> 42 [style=solid label="\"wchar_t\""]
  1565 -> 43 [style=solid label="\"bool\""]
  1565 -> 44 [style=solid label="\"short\""]
  1565 -> 45 [style=solid label="\"int\""]
  1565 -> 46 [style=solid label="\"long\""]
  1565 -> 47 [style=solid label="\"signed\""]
  1565 -> 48 [style=solid label="\"unsigned\""]
  1565 -> 49 [style=solid label="\"float\""]
  1565 -> 50 [style=solid label="\"double\""]
  1565 -> 51 [style=solid label="\"void\""]
  1565 -> 53 [style=solid label="\"static\""]
  1565 -> 54 [style=solid label="\"thread_local\""]
  1565 -> 55 [style=solid label="\"mutable\""]
  1565 -> 209 [style=solid label="'R'"]
  1565 -> 528 [style=solid label="\"throw\""]
  1565 -> 56 [style=solid label="\"typename\""]
  1565 -> 402 [style=solid label="\"sizeof\""]
  1565 -> 403 [style=solid label="\"alignof\""]
  1565 -> 529 [style=solid label="\"co_yield\""]
  1565 -> 404 [style=dashed label="additive-expression"]
  1565 -> 1550 [style=dashed label="alias-declaration"]
  1565 -> 58 [style=dashed label="alignment-specifier"]
  1565 -> 405 [style=dashed label="and-expression"]
  1565 -> 530 [style=dashed label="assignment-expression"]
  1565 -> 61 [style=dashed label="attribute-specifier"]
  1565 -> 1560 [style=dashed label="attribute-specifier-seq"]
  1565 -> 406 [style=dashed label="await-expression"]
  1565 -> 407 [style=dashed label="binary-literal"]
  1565 -> 408 [style=dashed label="boolean-literal"]
  1565 -> 409 [style=dashed label="cast-expression"]
  1565 -> 410 [style=dashed label="character-literal"]
  1565 -> 64 [style=dashed label="class-head"]
  1565 -> 65 [style=dashed label="class-key"]
  1565 -> 66 [style=dashed label="class-name"]
  1565 -> 67 [style=dashed label="class-specifier"]
  1565 -> 411 [style=dashed label="compare-expression"]
  1565 -> 68 [style=dashed label="concept-name"]
  1565 -> 1771 [style=dashed label="condition"]
  1565 -> 531 [style=dashed label="conditional-expression"]
  1565 -> 69 [style=dashed label="conversion-function-id"]
  1565 -> 70 [style=dashed label="cv-qualifier"]
  1565 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1565 -> 415 [style=dashed label="decimal-literal"]
  1565 -> 71 [style=dashed label="decl-specifier"]
  1565 -> 1562 [style=dashed label="decl-specifier-seq"]
  1565 -> 77 [style=dashed label="decltype-specifier"]
  1565 -> 79 [style=dashed label="defining-type-specifier"]
  1565 -> 416 [style=dashed label="delete-expression"]
  1565 -> 417 [style=dashed label="digit"]
  1565 -> 418 [style=dashed label="digit-sequence"]
  1565 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1565 -> 81 [style=dashed label="elaborated-type-specifier"]
  1565 -> 419 [style=dashed label="encoding-prefix"]
  1565 -> 83 [style=dashed label="enum-head"]
  1565 -> 268 [style=dashed label="enum-key"]
  1565 -> 85 [style=dashed label="enum-name"]
  1565 -> 86 [style=dashed label="enum-specifier"]
  1565 -> 420 [style=dashed label="equality-expression"]
  1565 -> 421 [style=dashed label="exclusive-or-expression"]
  1565 -> 269 [style=dashed label="explicit-specifier"]
  1565 -> 1563 [style=dashed label="expression"]
  1565 -> 1553 [style=dashed label="expression-statement"]
  1565 -> 422 [style=dashed label="floating-point-literal"]
  1565 -> 423 [style=dashed label="fold-expression"]
  1565 -> 424 [style=dashed label="fractional-constant"]
  1565 -> 92 [style=dashed label="function-specifier"]
  1565 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1565 -> 426 [style=dashed label="hexadecimal-literal"]
  1565 -> 427 [style=dashed label="hexadecimal-prefix"]
  1565 -> 428 [style=dashed label="id-expression"]
  1565 -> 429 [style=dashed label="inclusive-or-expression"]
  1565 -> 1772 [style=dashed label="init-statement"]
  1565 -> 430 [style=dashed label="integer-literal"]
  1565 -> 431 [style=dashed label="lambda-expression"]
  1565 -> 432 [style=dashed label="lambda-introducer"]
  1565 -> 433 [style=dashed label="literal"]
  1565 -> 96 [style=dashed label="literal-operator-id"]
  1565 -> 434 [style=dashed label="logical-and-expression"]
  1565 -> 533 [style=dashed label="logical-or-expression"]
  1565 -> 436 [style=dashed label="multiplicative-expression"]
  1565 -> 100 [style=dashed label="namespace-alias"]
  1565 -> 103 [style=dashed label="namespace-name"]
  1565 -> 437 [style=dashed label="nested-name-specifier"]
  1565 -> 438 [style=dashed label="new-expression"]
  1565 -> 439 [style=dashed label="noexcept-expression"]
  1565 -> 440 [style=dashed label="nonzero-digit"]
  1565 -> 441 [style=dashed label="octal-literal"]
  1565 -> 109 [style=dashed label="operator-function-id"]
  1565 -> 110 [style=dashed label="placeholder-type-specifier"]
  1565 -> 442 [style=dashed label="pm-expression"]
  1565 -> 443 [style=dashed label="pointer-literal"]
  1565 -> 444 [style=dashed label="postfix-expression"]
  1565 -> 445 [style=dashed label="primary-expression"]
  1565 -> 113 [style=dashed label="qualified-id"]
  1565 -> 446 [style=dashed label="relational-expression"]
  1565 -> 447 [style=dashed label="requires-expression"]
  1565 -> 448 [style=dashed label="shift-expression"]
  1565 -> 1556 [style=dashed label="simple-declaration"]
  1565 -> 115 [style=dashed label="simple-template-id"]
  1565 -> 449 [style=dashed label="simple-type-specifier"]
  1565 -> 118 [style=dashed label="storage-class-specifier"]
  1565 -> 450 [style=dashed label="string-literal"]
  1565 -> 121 [style=dashed label="template-id"]
  1565 -> 216 [style=dashed label="template-name"]
  1565 -> 535 [style=dashed label="throw-expression"]
  1565 -> 124 [style=dashed label="type-constraint"]
  1565 -> 125 [style=dashed label="type-name"]
  1565 -> 126 [style=dashed label="type-specifier"]
  1565 -> 127 [style=dashed label="typedef-name"]
  1565 -> 453 [style=dashed label="typename-specifier"]
  1565 -> 454 [style=dashed label="unary-expression"]
  1565 -> 455 [style=dashed label="unary-operator"]
  1565 -> 130 [style=dashed label="unqualified-id"]
  1565 -> 456 [style=dashed label="user-defined-character-literal"]
  1565 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1565 -> 458 [style=dashed label="user-defined-integer-literal"]
  1565 -> 459 [style=dashed label="user-defined-literal"]
  1565 -> 460 [style=dashed label="user-defined-string-literal"]
  1565 -> 537 [style=dashed label="yield-expression"]
  1566 [label="State 1566\n\l960 selection-statement: \"if\" \"consteval\" compound-statement •\l962                    | \"if\" \"consteval\" compound-statement • \"else\" statement\l"]
  1566 -> 1773 [style=solid label="\"else\""]
  1566 -> "1566R960d" [label="[\"else\"]", style=solid]
 "1566R960d" [label="R960", fillcolor=5, shape=diamond, style=filled]
  1566 -> "1566R960" [style=solid]
 "1566R960" [label="R960", fillcolor=3, shape=diamond, style=filled]
  1567 [label="State 1567\n\l961 selection-statement: \"if\" '!' \"consteval\" • compound-statement\l963                    | \"if\" '!' \"consteval\" • compound-statement \"else\" statement\l"]
  1567 -> 294 [style=solid label="'{'"]
  1567 -> 1774 [style=dashed label="compound-statement"]
  1568 [label="State 1568\n\l964 selection-statement: \"switch\" '(' condition • ')' statement\l"]
  1568 -> 1775 [style=solid label="')'"]
  1569 [label="State 1569\n\l965 selection-statement: \"switch\" '(' init-statement • condition ')' statement\l"]
  1569 -> 1 [style=solid label="IDENTIFIER"]
  1569 -> 361 [style=solid label="'+'"]
  1569 -> 362 [style=solid label="'-'"]
  1569 -> 4 [style=solid label="\"alignas\""]
  1569 -> 363 [style=solid label="'('"]
  1569 -> 364 [style=solid label="'&'"]
  1569 -> 365 [style=solid label="\"::\""]
  1569 -> 667 [style=solid label="'['"]
  1569 -> 367 [style=solid label="\"co_await\""]
  1569 -> 11 [style=solid label="\"virtual\""]
  1569 -> 368 [style=solid label="'0'"]
  1569 -> 369 [style=solid label="'1'"]
  1569 -> 370 [style=solid label="\"0b\""]
  1569 -> 371 [style=solid label="\"0B\""]
  1569 -> 372 [style=solid label="'\\''"]
  1569 -> 373 [style=solid label="\"false\""]
  1569 -> 374 [style=solid label="\"true\""]
  1569 -> 12 [style=solid label="\"class\""]
  1569 -> 13 [style=solid label="\"struct\""]
  1569 -> 14 [style=solid label="\"union\""]
  1569 -> 375 [style=solid label="\"noexcept\""]
  1569 -> 17 [style=solid label="\"operator\""]
  1569 -> 18 [style=solid label="\"const\""]
  1569 -> 19 [style=solid label="\"volatile\""]
  1569 -> 20 [style=solid label="\"friend\""]
  1569 -> 21 [style=solid label="\"typedef\""]
  1569 -> 22 [style=solid label="\"constexpr\""]
  1569 -> 23 [style=solid label="\"consteval\""]
  1569 -> 24 [style=solid label="\"constinit\""]
  1569 -> 263 [style=solid label="\"inline\""]
  1569 -> 26 [style=solid label="\"decltype\""]
  1569 -> 376 [style=solid label="\"delete\""]
  1569 -> 377 [style=solid label="'.'"]
  1569 -> 378 [style=solid label="'2'"]
  1569 -> 379 [style=solid label="'3'"]
  1569 -> 380 [style=solid label="'4'"]
  1569 -> 381 [style=solid label="'5'"]
  1569 -> 382 [style=solid label="'6'"]
  1569 -> 383 [style=solid label="'7'"]
  1569 -> 384 [style=solid label="'8'"]
  1569 -> 385 [style=solid label="'9'"]
  1569 -> 27 [style=solid label="\"enum\""]
  1569 -> 185 [style=solid label="\"u8\""]
  1569 -> 186 [style=solid label="'u'"]
  1569 -> 187 [style=solid label="'U'"]
  1569 -> 188 [style=solid label="'L'"]
  1569 -> 264 [style=solid label="\"extern\""]
  1569 -> 29 [style=solid label="\"explicit\""]
  1569 -> 386 [style=solid label="'*'"]
  1569 -> 203 [style=solid label="'\"'"]
  1569 -> 387 [style=solid label="\"0x\""]
  1569 -> 388 [style=solid label="\"0X\""]
  1569 -> 389 [style=solid label="\"requires\""]
  1569 -> 390 [style=solid label="\"new\""]
  1569 -> 391 [style=solid label="'~'"]
  1569 -> 392 [style=solid label="'!'"]
  1569 -> 393 [style=solid label="\"++\""]
  1569 -> 394 [style=solid label="\"--\""]
  1569 -> 395 [style=solid label="\"this\""]
  1569 -> 37 [style=solid label="\"auto\""]
  1569 -> 396 [style=solid label="\"nullptr\""]
  1569 -> 397 [style=solid label="\"dynamic_cast\""]
  1569 -> 398 [style=solid label="\"static_cast\""]
  1569 -> 399 [style=solid label="\"reinterpret_cast\""]
  1569 -> 400 [style=solid label="\"const_cast\""]
  1569 -> 401 [style=solid label="\"typeid\""]
  1569 -> 38 [style=solid label="\"char\""]
  1569 -> 39 [style=solid label="\"char8_t\""]
  1569 -> 40 [style=solid label="\"char16_t\""]
  1569 -> 41 [style=solid label="\"char32_t\""]
  1569 -> 42 [style=solid label="\"wchar_t\""]
  1569 -> 43 [style=solid label="\"bool\""]
  1569 -> 44 [style=solid label="\"short\""]
  1569 -> 45 [style=solid label="\"int\""]
  1569 -> 46 [style=solid label="\"long\""]
  1569 -> 47 [style=solid label="\"signed\""]
  1569 -> 48 [style=solid label="\"unsigned\""]
  1569 -> 49 [style=solid label="\"float\""]
  1569 -> 50 [style=solid label="\"double\""]
  1569 -> 51 [style=solid label="\"void\""]
  1569 -> 53 [style=solid label="\"static\""]
  1569 -> 54 [style=solid label="\"thread_local\""]
  1569 -> 55 [style=solid label="\"mutable\""]
  1569 -> 209 [style=solid label="'R'"]
  1569 -> 528 [style=solid label="\"throw\""]
  1569 -> 56 [style=solid label="\"typename\""]
  1569 -> 402 [style=solid label="\"sizeof\""]
  1569 -> 403 [style=solid label="\"alignof\""]
  1569 -> 529 [style=solid label="\"co_yield\""]
  1569 -> 404 [style=dashed label="additive-expression"]
  1569 -> 58 [style=dashed label="alignment-specifier"]
  1569 -> 405 [style=dashed label="and-expression"]
  1569 -> 530 [style=dashed label="assignment-expression"]
  1569 -> 61 [style=dashed label="attribute-specifier"]
  1569 -> 1544 [style=dashed label="attribute-specifier-seq"]
  1569 -> 406 [style=dashed label="await-expression"]
  1569 -> 407 [style=dashed label="binary-literal"]
  1569 -> 408 [style=dashed label="boolean-literal"]
  1569 -> 409 [style=dashed label="cast-expression"]
  1569 -> 410 [style=dashed label="character-literal"]
  1569 -> 64 [style=dashed label="class-head"]
  1569 -> 65 [style=dashed label="class-key"]
  1569 -> 66 [style=dashed label="class-name"]
  1569 -> 67 [style=dashed label="class-specifier"]
  1569 -> 411 [style=dashed label="compare-expression"]
  1569 -> 68 [style=dashed label="concept-name"]
  1569 -> 1776 [style=dashed label="condition"]
  1569 -> 531 [style=dashed label="conditional-expression"]
  1569 -> 69 [style=dashed label="conversion-function-id"]
  1569 -> 70 [style=dashed label="cv-qualifier"]
  1569 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1569 -> 415 [style=dashed label="decimal-literal"]
  1569 -> 71 [style=dashed label="decl-specifier"]
  1569 -> 1546 [style=dashed label="decl-specifier-seq"]
  1569 -> 77 [style=dashed label="decltype-specifier"]
  1569 -> 79 [style=dashed label="defining-type-specifier"]
  1569 -> 416 [style=dashed label="delete-expression"]
  1569 -> 417 [style=dashed label="digit"]
  1569 -> 418 [style=dashed label="digit-sequence"]
  1569 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1569 -> 81 [style=dashed label="elaborated-type-specifier"]
  1569 -> 419 [style=dashed label="encoding-prefix"]
  1569 -> 83 [style=dashed label="enum-head"]
  1569 -> 268 [style=dashed label="enum-key"]
  1569 -> 85 [style=dashed label="enum-name"]
  1569 -> 86 [style=dashed label="enum-specifier"]
  1569 -> 420 [style=dashed label="equality-expression"]
  1569 -> 421 [style=dashed label="exclusive-or-expression"]
  1569 -> 269 [style=dashed label="explicit-specifier"]
  1569 -> 1547 [style=dashed label="expression"]
  1569 -> 422 [style=dashed label="floating-point-literal"]
  1569 -> 423 [style=dashed label="fold-expression"]
  1569 -> 424 [style=dashed label="fractional-constant"]
  1569 -> 92 [style=dashed label="function-specifier"]
  1569 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1569 -> 426 [style=dashed label="hexadecimal-literal"]
  1569 -> 427 [style=dashed label="hexadecimal-prefix"]
  1569 -> 428 [style=dashed label="id-expression"]
  1569 -> 429 [style=dashed label="inclusive-or-expression"]
  1569 -> 430 [style=dashed label="integer-literal"]
  1569 -> 431 [style=dashed label="lambda-expression"]
  1569 -> 432 [style=dashed label="lambda-introducer"]
  1569 -> 433 [style=dashed label="literal"]
  1569 -> 96 [style=dashed label="literal-operator-id"]
  1569 -> 434 [style=dashed label="logical-and-expression"]
  1569 -> 533 [style=dashed label="logical-or-expression"]
  1569 -> 436 [style=dashed label="multiplicative-expression"]
  1569 -> 100 [style=dashed label="namespace-alias"]
  1569 -> 103 [style=dashed label="namespace-name"]
  1569 -> 437 [style=dashed label="nested-name-specifier"]
  1569 -> 438 [style=dashed label="new-expression"]
  1569 -> 439 [style=dashed label="noexcept-expression"]
  1569 -> 440 [style=dashed label="nonzero-digit"]
  1569 -> 441 [style=dashed label="octal-literal"]
  1569 -> 109 [style=dashed label="operator-function-id"]
  1569 -> 110 [style=dashed label="placeholder-type-specifier"]
  1569 -> 442 [style=dashed label="pm-expression"]
  1569 -> 443 [style=dashed label="pointer-literal"]
  1569 -> 444 [style=dashed label="postfix-expression"]
  1569 -> 445 [style=dashed label="primary-expression"]
  1569 -> 113 [style=dashed label="qualified-id"]
  1569 -> 446 [style=dashed label="relational-expression"]
  1569 -> 447 [style=dashed label="requires-expression"]
  1569 -> 448 [style=dashed label="shift-expression"]
  1569 -> 115 [style=dashed label="simple-template-id"]
  1569 -> 449 [style=dashed label="simple-type-specifier"]
  1569 -> 118 [style=dashed label="storage-class-specifier"]
  1569 -> 450 [style=dashed label="string-literal"]
  1569 -> 121 [style=dashed label="template-id"]
  1569 -> 216 [style=dashed label="template-name"]
  1569 -> 535 [style=dashed label="throw-expression"]
  1569 -> 124 [style=dashed label="type-constraint"]
  1569 -> 125 [style=dashed label="type-name"]
  1569 -> 126 [style=dashed label="type-specifier"]
  1569 -> 127 [style=dashed label="typedef-name"]
  1569 -> 453 [style=dashed label="typename-specifier"]
  1569 -> 454 [style=dashed label="unary-expression"]
  1569 -> 455 [style=dashed label="unary-operator"]
  1569 -> 130 [style=dashed label="unqualified-id"]
  1569 -> 456 [style=dashed label="user-defined-character-literal"]
  1569 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1569 -> 458 [style=dashed label="user-defined-integer-literal"]
  1569 -> 459 [style=dashed label="user-defined-literal"]
  1569 -> 460 [style=dashed label="user-defined-string-literal"]
  1569 -> 537 [style=dashed label="yield-expression"]
  1570 [label="State 1570\n\l523 labeled-statement: attribute-specifier-seq IDENTIFIER ':' • statement\l"]
  1570 -> 665 [style=solid label="IDENTIFIER"]
  1570 -> 361 [style=solid label="'+'"]
  1570 -> 362 [style=solid label="'-'"]
  1570 -> 2 [style=solid label="\"using\""]
  1570 -> 666 [style=solid label="';'"]
  1570 -> 4 [style=solid label="\"alignas\""]
  1570 -> 363 [style=solid label="'('"]
  1570 -> 364 [style=solid label="'&'"]
  1570 -> 8 [style=solid label="\"asm\""]
  1570 -> 365 [style=solid label="\"::\""]
  1570 -> 667 [style=solid label="'['"]
  1570 -> 367 [style=solid label="\"co_await\""]
  1570 -> 294 [style=solid label="'{'"]
  1570 -> 11 [style=solid label="\"virtual\""]
  1570 -> 368 [style=solid label="'0'"]
  1570 -> 369 [style=solid label="'1'"]
  1570 -> 370 [style=solid label="\"0b\""]
  1570 -> 371 [style=solid label="\"0B\""]
  1570 -> 372 [style=solid label="'\\''"]
  1570 -> 373 [style=solid label="\"false\""]
  1570 -> 374 [style=solid label="\"true\""]
  1570 -> 12 [style=solid label="\"class\""]
  1570 -> 13 [style=solid label="\"struct\""]
  1570 -> 14 [style=solid label="\"union\""]
  1570 -> 375 [style=solid label="\"noexcept\""]
  1570 -> 17 [style=solid label="\"operator\""]
  1570 -> 669 [style=solid label="\"co_return\""]
  1570 -> 18 [style=solid label="\"const\""]
  1570 -> 19 [style=solid label="\"volatile\""]
  1570 -> 20 [style=solid label="\"friend\""]
  1570 -> 21 [style=solid label="\"typedef\""]
  1570 -> 22 [style=solid label="\"constexpr\""]
  1570 -> 23 [style=solid label="\"consteval\""]
  1570 -> 24 [style=solid label="\"constinit\""]
  1570 -> 263 [style=solid label="\"inline\""]
  1570 -> 26 [style=solid label="\"decltype\""]
  1570 -> 376 [style=solid label="\"delete\""]
  1570 -> 377 [style=solid label="'.'"]
  1570 -> 378 [style=solid label="'2'"]
  1570 -> 379 [style=solid label="'3'"]
  1570 -> 380 [style=solid label="'4'"]
  1570 -> 381 [style=solid label="'5'"]
  1570 -> 382 [style=solid label="'6'"]
  1570 -> 383 [style=solid label="'7'"]
  1570 -> 384 [style=solid label="'8'"]
  1570 -> 385 [style=solid label="'9'"]
  1570 -> 27 [style=solid label="\"enum\""]
  1570 -> 185 [style=solid label="\"u8\""]
  1570 -> 186 [style=solid label="'u'"]
  1570 -> 187 [style=solid label="'U'"]
  1570 -> 188 [style=solid label="'L'"]
  1570 -> 264 [style=solid label="\"extern\""]
  1570 -> 29 [style=solid label="\"explicit\""]
  1570 -> 386 [style=solid label="'*'"]
  1570 -> 670 [style=solid label="\"default\""]
  1570 -> 671 [style=solid label="\"try\""]
  1570 -> 203 [style=solid label="'\"'"]
  1570 -> 387 [style=solid label="\"0x\""]
  1570 -> 388 [style=solid label="\"0X\""]
  1570 -> 672 [style=solid label="\"while\""]
  1570 -> 673 [style=solid label="\"do\""]
  1570 -> 674 [style=solid label="\"for\""]
  1570 -> 675 [style=solid label="\"break\""]
  1570 -> 676 [style=solid label="\"continue\""]
  1570 -> 677 [style=solid label="\"return\""]
  1570 -> 678 [style=solid label="\"goto\""]
  1570 -> 679 [style=solid label="\"case\""]
  1570 -> 680 [style=solid label="\"namespace\""]
  1570 -> 389 [style=solid label="\"requires\""]
  1570 -> 390 [style=solid label="\"new\""]
  1570 -> 391 [style=solid label="'~'"]
  1570 -> 392 [style=solid label="'!'"]
  1570 -> 393 [style=solid label="\"++\""]
  1570 -> 394 [style=solid label="\"--\""]
  1570 -> 395 [style=solid label="\"this\""]
  1570 -> 37 [style=solid label="\"auto\""]
  1570 -> 396 [style=solid label="\"nullptr\""]
  1570 -> 397 [style=solid label="\"dynamic_cast\""]
  1570 -> 398 [style=solid label="\"static_cast\""]
  1570 -> 399 [style=solid label="\"reinterpret_cast\""]
  1570 -> 400 [style=solid label="\"const_cast\""]
  1570 -> 401 [style=solid label="\"typeid\""]
  1570 -> 681 [style=solid label="\"if\""]
  1570 -> 682 [style=solid label="\"switch\""]
  1570 -> 38 [style=solid label="\"char\""]
  1570 -> 39 [style=solid label="\"char8_t\""]
  1570 -> 40 [style=solid label="\"char16_t\""]
  1570 -> 41 [style=solid label="\"char32_t\""]
  1570 -> 42 [style=solid label="\"wchar_t\""]
  1570 -> 43 [style=solid label="\"bool\""]
  1570 -> 44 [style=solid label="\"short\""]
  1570 -> 45 [style=solid label="\"int\""]
  1570 -> 46 [style=solid label="\"long\""]
  1570 -> 47 [style=solid label="\"signed\""]
  1570 -> 48 [style=solid label="\"unsigned\""]
  1570 -> 49 [style=solid label="\"float\""]
  1570 -> 50 [style=solid label="\"double\""]
  1570 -> 51 [style=solid label="\"void\""]
  1570 -> 52 [style=solid label="\"static_assert\""]
  1570 -> 53 [style=solid label="\"static\""]
  1570 -> 54 [style=solid label="\"thread_local\""]
  1570 -> 55 [style=solid label="\"mutable\""]
  1570 -> 209 [style=solid label="'R'"]
  1570 -> 528 [style=solid label="\"throw\""]
  1570 -> 56 [style=solid label="\"typename\""]
  1570 -> 402 [style=solid label="\"sizeof\""]
  1570 -> 403 [style=solid label="\"alignof\""]
  1570 -> 529 [style=solid label="\"co_yield\""]
  1570 -> 404 [style=dashed label="additive-expression"]
  1570 -> 57 [style=dashed label="alias-declaration"]
  1570 -> 58 [style=dashed label="alignment-specifier"]
  1570 -> 405 [style=dashed label="and-expression"]
  1570 -> 59 [style=dashed label="asm-declaration"]
  1570 -> 530 [style=dashed label="assignment-expression"]
  1570 -> 61 [style=dashed label="attribute-specifier"]
  1570 -> 683 [style=dashed label="attribute-specifier-seq"]
  1570 -> 406 [style=dashed label="await-expression"]
  1570 -> 407 [style=dashed label="binary-literal"]
  1570 -> 684 [style=dashed label="block-declaration"]
  1570 -> 408 [style=dashed label="boolean-literal"]
  1570 -> 409 [style=dashed label="cast-expression"]
  1570 -> 410 [style=dashed label="character-literal"]
  1570 -> 64 [style=dashed label="class-head"]
  1570 -> 65 [style=dashed label="class-key"]
  1570 -> 66 [style=dashed label="class-name"]
  1570 -> 67 [style=dashed label="class-specifier"]
  1570 -> 411 [style=dashed label="compare-expression"]
  1570 -> 685 [style=dashed label="compound-statement"]
  1570 -> 68 [style=dashed label="concept-name"]
  1570 -> 531 [style=dashed label="conditional-expression"]
  1570 -> 69 [style=dashed label="conversion-function-id"]
  1570 -> 686 [style=dashed label="coroutine-return-statement"]
  1570 -> 70 [style=dashed label="cv-qualifier"]
  1570 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1570 -> 415 [style=dashed label="decimal-literal"]
  1570 -> 71 [style=dashed label="decl-specifier"]
  1570 -> 687 [style=dashed label="decl-specifier-seq"]
  1570 -> 688 [style=dashed label="declaration-statement"]
  1570 -> 77 [style=dashed label="decltype-specifier"]
  1570 -> 79 [style=dashed label="defining-type-specifier"]
  1570 -> 416 [style=dashed label="delete-expression"]
  1570 -> 417 [style=dashed label="digit"]
  1570 -> 418 [style=dashed label="digit-sequence"]
  1570 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1570 -> 81 [style=dashed label="elaborated-type-specifier"]
  1570 -> 419 [style=dashed label="encoding-prefix"]
  1570 -> 83 [style=dashed label="enum-head"]
  1570 -> 84 [style=dashed label="enum-key"]
  1570 -> 85 [style=dashed label="enum-name"]
  1570 -> 86 [style=dashed label="enum-specifier"]
  1570 -> 420 [style=dashed label="equality-expression"]
  1570 -> 421 [style=dashed label="exclusive-or-expression"]
  1570 -> 269 [style=dashed label="explicit-specifier"]
  1570 -> 689 [style=dashed label="expression"]
  1570 -> 690 [style=dashed label="expression-statement"]
  1570 -> 422 [style=dashed label="floating-point-literal"]
  1570 -> 423 [style=dashed label="fold-expression"]
  1570 -> 424 [style=dashed label="fractional-constant"]
  1570 -> 92 [style=dashed label="function-specifier"]
  1570 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1570 -> 426 [style=dashed label="hexadecimal-literal"]
  1570 -> 427 [style=dashed label="hexadecimal-prefix"]
  1570 -> 428 [style=dashed label="id-expression"]
  1570 -> 429 [style=dashed label="inclusive-or-expression"]
  1570 -> 430 [style=dashed label="integer-literal"]
  1570 -> 691 [style=dashed label="iteration-statement"]
  1570 -> 692 [style=dashed label="jump-statement"]
  1570 -> 693 [style=dashed label="labeled-statement"]
  1570 -> 431 [style=dashed label="lambda-expression"]
  1570 -> 432 [style=dashed label="lambda-introducer"]
  1570 -> 433 [style=dashed label="literal"]
  1570 -> 96 [style=dashed label="literal-operator-id"]
  1570 -> 434 [style=dashed label="logical-and-expression"]
  1570 -> 533 [style=dashed label="logical-or-expression"]
  1570 -> 436 [style=dashed label="multiplicative-expression"]
  1570 -> 100 [style=dashed label="namespace-alias"]
  1570 -> 101 [style=dashed label="namespace-alias-definition"]
  1570 -> 103 [style=dashed label="namespace-name"]
  1570 -> 437 [style=dashed label="nested-name-specifier"]
  1570 -> 438 [style=dashed label="new-expression"]
  1570 -> 439 [style=dashed label="noexcept-expression"]
  1570 -> 440 [style=dashed label="nonzero-digit"]
  1570 -> 441 [style=dashed label="octal-literal"]
  1570 -> 108 [style=dashed label="opaque-enum-declaration"]
  1570 -> 109 [style=dashed label="operator-function-id"]
  1570 -> 110 [style=dashed label="placeholder-type-specifier"]
  1570 -> 442 [style=dashed label="pm-expression"]
  1570 -> 443 [style=dashed label="pointer-literal"]
  1570 -> 444 [style=dashed label="postfix-expression"]
  1570 -> 445 [style=dashed label="primary-expression"]
  1570 -> 113 [style=dashed label="qualified-id"]
  1570 -> 446 [style=dashed label="relational-expression"]
  1570 -> 447 [style=dashed label="requires-expression"]
  1570 -> 694 [style=dashed label="selection-statement"]
  1570 -> 448 [style=dashed label="shift-expression"]
  1570 -> 114 [style=dashed label="simple-declaration"]
  1570 -> 115 [style=dashed label="simple-template-id"]
  1570 -> 449 [style=dashed label="simple-type-specifier"]
  1570 -> 1777 [style=dashed label="statement"]
  1570 -> 117 [style=dashed label="static_assert-declaration"]
  1570 -> 118 [style=dashed label="storage-class-specifier"]
  1570 -> 450 [style=dashed label="string-literal"]
  1570 -> 121 [style=dashed label="template-id"]
  1570 -> 216 [style=dashed label="template-name"]
  1570 -> 535 [style=dashed label="throw-expression"]
  1570 -> 697 [style=dashed label="try-block"]
  1570 -> 124 [style=dashed label="type-constraint"]
  1570 -> 125 [style=dashed label="type-name"]
  1570 -> 126 [style=dashed label="type-specifier"]
  1570 -> 127 [style=dashed label="typedef-name"]
  1570 -> 453 [style=dashed label="typename-specifier"]
  1570 -> 454 [style=dashed label="unary-expression"]
  1570 -> 455 [style=dashed label="unary-operator"]
  1570 -> 130 [style=dashed label="unqualified-id"]
  1570 -> 456 [style=dashed label="user-defined-character-literal"]
  1570 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1570 -> 458 [style=dashed label="user-defined-integer-literal"]
  1570 -> 459 [style=dashed label="user-defined-literal"]
  1570 -> 460 [style=dashed label="user-defined-string-literal"]
  1570 -> 131 [style=dashed label="using-declaration"]
  1570 -> 132 [style=dashed label="using-directive"]
  1570 -> 133 [style=dashed label="using-enum-declaration"]
  1570 -> 537 [style=dashed label="yield-expression"]
  1571 [label="State 1571\n\l527 labeled-statement: attribute-specifier-seq \"default\" ':' • statement\l"]
  1571 -> 665 [style=solid label="IDENTIFIER"]
  1571 -> 361 [style=solid label="'+'"]
  1571 -> 362 [style=solid label="'-'"]
  1571 -> 2 [style=solid label="\"using\""]
  1571 -> 666 [style=solid label="';'"]
  1571 -> 4 [style=solid label="\"alignas\""]
  1571 -> 363 [style=solid label="'('"]
  1571 -> 364 [style=solid label="'&'"]
  1571 -> 8 [style=solid label="\"asm\""]
  1571 -> 365 [style=solid label="\"::\""]
  1571 -> 667 [style=solid label="'['"]
  1571 -> 367 [style=solid label="\"co_await\""]
  1571 -> 294 [style=solid label="'{'"]
  1571 -> 11 [style=solid label="\"virtual\""]
  1571 -> 368 [style=solid label="'0'"]
  1571 -> 369 [style=solid label="'1'"]
  1571 -> 370 [style=solid label="\"0b\""]
  1571 -> 371 [style=solid label="\"0B\""]
  1571 -> 372 [style=solid label="'\\''"]
  1571 -> 373 [style=solid label="\"false\""]
  1571 -> 374 [style=solid label="\"true\""]
  1571 -> 12 [style=solid label="\"class\""]
  1571 -> 13 [style=solid label="\"struct\""]
  1571 -> 14 [style=solid label="\"union\""]
  1571 -> 375 [style=solid label="\"noexcept\""]
  1571 -> 17 [style=solid label="\"operator\""]
  1571 -> 669 [style=solid label="\"co_return\""]
  1571 -> 18 [style=solid label="\"const\""]
  1571 -> 19 [style=solid label="\"volatile\""]
  1571 -> 20 [style=solid label="\"friend\""]
  1571 -> 21 [style=solid label="\"typedef\""]
  1571 -> 22 [style=solid label="\"constexpr\""]
  1571 -> 23 [style=solid label="\"consteval\""]
  1571 -> 24 [style=solid label="\"constinit\""]
  1571 -> 263 [style=solid label="\"inline\""]
  1571 -> 26 [style=solid label="\"decltype\""]
  1571 -> 376 [style=solid label="\"delete\""]
  1571 -> 377 [style=solid label="'.'"]
  1571 -> 378 [style=solid label="'2'"]
  1571 -> 379 [style=solid label="'3'"]
  1571 -> 380 [style=solid label="'4'"]
  1571 -> 381 [style=solid label="'5'"]
  1571 -> 382 [style=solid label="'6'"]
  1571 -> 383 [style=solid label="'7'"]
  1571 -> 384 [style=solid label="'8'"]
  1571 -> 385 [style=solid label="'9'"]
  1571 -> 27 [style=solid label="\"enum\""]
  1571 -> 185 [style=solid label="\"u8\""]
  1571 -> 186 [style=solid label="'u'"]
  1571 -> 187 [style=solid label="'U'"]
  1571 -> 188 [style=solid label="'L'"]
  1571 -> 264 [style=solid label="\"extern\""]
  1571 -> 29 [style=solid label="\"explicit\""]
  1571 -> 386 [style=solid label="'*'"]
  1571 -> 670 [style=solid label="\"default\""]
  1571 -> 671 [style=solid label="\"try\""]
  1571 -> 203 [style=solid label="'\"'"]
  1571 -> 387 [style=solid label="\"0x\""]
  1571 -> 388 [style=solid label="\"0X\""]
  1571 -> 672 [style=solid label="\"while\""]
  1571 -> 673 [style=solid label="\"do\""]
  1571 -> 674 [style=solid label="\"for\""]
  1571 -> 675 [style=solid label="\"break\""]
  1571 -> 676 [style=solid label="\"continue\""]
  1571 -> 677 [style=solid label="\"return\""]
  1571 -> 678 [style=solid label="\"goto\""]
  1571 -> 679 [style=solid label="\"case\""]
  1571 -> 680 [style=solid label="\"namespace\""]
  1571 -> 389 [style=solid label="\"requires\""]
  1571 -> 390 [style=solid label="\"new\""]
  1571 -> 391 [style=solid label="'~'"]
  1571 -> 392 [style=solid label="'!'"]
  1571 -> 393 [style=solid label="\"++\""]
  1571 -> 394 [style=solid label="\"--\""]
  1571 -> 395 [style=solid label="\"this\""]
  1571 -> 37 [style=solid label="\"auto\""]
  1571 -> 396 [style=solid label="\"nullptr\""]
  1571 -> 397 [style=solid label="\"dynamic_cast\""]
  1571 -> 398 [style=solid label="\"static_cast\""]
  1571 -> 399 [style=solid label="\"reinterpret_cast\""]
  1571 -> 400 [style=solid label="\"const_cast\""]
  1571 -> 401 [style=solid label="\"typeid\""]
  1571 -> 681 [style=solid label="\"if\""]
  1571 -> 682 [style=solid label="\"switch\""]
  1571 -> 38 [style=solid label="\"char\""]
  1571 -> 39 [style=solid label="\"char8_t\""]
  1571 -> 40 [style=solid label="\"char16_t\""]
  1571 -> 41 [style=solid label="\"char32_t\""]
  1571 -> 42 [style=solid label="\"wchar_t\""]
  1571 -> 43 [style=solid label="\"bool\""]
  1571 -> 44 [style=solid label="\"short\""]
  1571 -> 45 [style=solid label="\"int\""]
  1571 -> 46 [style=solid label="\"long\""]
  1571 -> 47 [style=solid label="\"signed\""]
  1571 -> 48 [style=solid label="\"unsigned\""]
  1571 -> 49 [style=solid label="\"float\""]
  1571 -> 50 [style=solid label="\"double\""]
  1571 -> 51 [style=solid label="\"void\""]
  1571 -> 52 [style=solid label="\"static_assert\""]
  1571 -> 53 [style=solid label="\"static\""]
  1571 -> 54 [style=solid label="\"thread_local\""]
  1571 -> 55 [style=solid label="\"mutable\""]
  1571 -> 209 [style=solid label="'R'"]
  1571 -> 528 [style=solid label="\"throw\""]
  1571 -> 56 [style=solid label="\"typename\""]
  1571 -> 402 [style=solid label="\"sizeof\""]
  1571 -> 403 [style=solid label="\"alignof\""]
  1571 -> 529 [style=solid label="\"co_yield\""]
  1571 -> 404 [style=dashed label="additive-expression"]
  1571 -> 57 [style=dashed label="alias-declaration"]
  1571 -> 58 [style=dashed label="alignment-specifier"]
  1571 -> 405 [style=dashed label="and-expression"]
  1571 -> 59 [style=dashed label="asm-declaration"]
  1571 -> 530 [style=dashed label="assignment-expression"]
  1571 -> 61 [style=dashed label="attribute-specifier"]
  1571 -> 683 [style=dashed label="attribute-specifier-seq"]
  1571 -> 406 [style=dashed label="await-expression"]
  1571 -> 407 [style=dashed label="binary-literal"]
  1571 -> 684 [style=dashed label="block-declaration"]
  1571 -> 408 [style=dashed label="boolean-literal"]
  1571 -> 409 [style=dashed label="cast-expression"]
  1571 -> 410 [style=dashed label="character-literal"]
  1571 -> 64 [style=dashed label="class-head"]
  1571 -> 65 [style=dashed label="class-key"]
  1571 -> 66 [style=dashed label="class-name"]
  1571 -> 67 [style=dashed label="class-specifier"]
  1571 -> 411 [style=dashed label="compare-expression"]
  1571 -> 685 [style=dashed label="compound-statement"]
  1571 -> 68 [style=dashed label="concept-name"]
  1571 -> 531 [style=dashed label="conditional-expression"]
  1571 -> 69 [style=dashed label="conversion-function-id"]
  1571 -> 686 [style=dashed label="coroutine-return-statement"]
  1571 -> 70 [style=dashed label="cv-qualifier"]
  1571 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1571 -> 415 [style=dashed label="decimal-literal"]
  1571 -> 71 [style=dashed label="decl-specifier"]
  1571 -> 687 [style=dashed label="decl-specifier-seq"]
  1571 -> 688 [style=dashed label="declaration-statement"]
  1571 -> 77 [style=dashed label="decltype-specifier"]
  1571 -> 79 [style=dashed label="defining-type-specifier"]
  1571 -> 416 [style=dashed label="delete-expression"]
  1571 -> 417 [style=dashed label="digit"]
  1571 -> 418 [style=dashed label="digit-sequence"]
  1571 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1571 -> 81 [style=dashed label="elaborated-type-specifier"]
  1571 -> 419 [style=dashed label="encoding-prefix"]
  1571 -> 83 [style=dashed label="enum-head"]
  1571 -> 84 [style=dashed label="enum-key"]
  1571 -> 85 [style=dashed label="enum-name"]
  1571 -> 86 [style=dashed label="enum-specifier"]
  1571 -> 420 [style=dashed label="equality-expression"]
  1571 -> 421 [style=dashed label="exclusive-or-expression"]
  1571 -> 269 [style=dashed label="explicit-specifier"]
  1571 -> 689 [style=dashed label="expression"]
  1571 -> 690 [style=dashed label="expression-statement"]
  1571 -> 422 [style=dashed label="floating-point-literal"]
  1571 -> 423 [style=dashed label="fold-expression"]
  1571 -> 424 [style=dashed label="fractional-constant"]
  1571 -> 92 [style=dashed label="function-specifier"]
  1571 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1571 -> 426 [style=dashed label="hexadecimal-literal"]
  1571 -> 427 [style=dashed label="hexadecimal-prefix"]
  1571 -> 428 [style=dashed label="id-expression"]
  1571 -> 429 [style=dashed label="inclusive-or-expression"]
  1571 -> 430 [style=dashed label="integer-literal"]
  1571 -> 691 [style=dashed label="iteration-statement"]
  1571 -> 692 [style=dashed label="jump-statement"]
  1571 -> 693 [style=dashed label="labeled-statement"]
  1571 -> 431 [style=dashed label="lambda-expression"]
  1571 -> 432 [style=dashed label="lambda-introducer"]
  1571 -> 433 [style=dashed label="literal"]
  1571 -> 96 [style=dashed label="literal-operator-id"]
  1571 -> 434 [style=dashed label="logical-and-expression"]
  1571 -> 533 [style=dashed label="logical-or-expression"]
  1571 -> 436 [style=dashed label="multiplicative-expression"]
  1571 -> 100 [style=dashed label="namespace-alias"]
  1571 -> 101 [style=dashed label="namespace-alias-definition"]
  1571 -> 103 [style=dashed label="namespace-name"]
  1571 -> 437 [style=dashed label="nested-name-specifier"]
  1571 -> 438 [style=dashed label="new-expression"]
  1571 -> 439 [style=dashed label="noexcept-expression"]
  1571 -> 440 [style=dashed label="nonzero-digit"]
  1571 -> 441 [style=dashed label="octal-literal"]
  1571 -> 108 [style=dashed label="opaque-enum-declaration"]
  1571 -> 109 [style=dashed label="operator-function-id"]
  1571 -> 110 [style=dashed label="placeholder-type-specifier"]
  1571 -> 442 [style=dashed label="pm-expression"]
  1571 -> 443 [style=dashed label="pointer-literal"]
  1571 -> 444 [style=dashed label="postfix-expression"]
  1571 -> 445 [style=dashed label="primary-expression"]
  1571 -> 113 [style=dashed label="qualified-id"]
  1571 -> 446 [style=dashed label="relational-expression"]
  1571 -> 447 [style=dashed label="requires-expression"]
  1571 -> 694 [style=dashed label="selection-statement"]
  1571 -> 448 [style=dashed label="shift-expression"]
  1571 -> 114 [style=dashed label="simple-declaration"]
  1571 -> 115 [style=dashed label="simple-template-id"]
  1571 -> 449 [style=dashed label="simple-type-specifier"]
  1571 -> 1778 [style=dashed label="statement"]
  1571 -> 117 [style=dashed label="static_assert-declaration"]
  1571 -> 118 [style=dashed label="storage-class-specifier"]
  1571 -> 450 [style=dashed label="string-literal"]
  1571 -> 121 [style=dashed label="template-id"]
  1571 -> 216 [style=dashed label="template-name"]
  1571 -> 535 [style=dashed label="throw-expression"]
  1571 -> 697 [style=dashed label="try-block"]
  1571 -> 124 [style=dashed label="type-constraint"]
  1571 -> 125 [style=dashed label="type-name"]
  1571 -> 126 [style=dashed label="type-specifier"]
  1571 -> 127 [style=dashed label="typedef-name"]
  1571 -> 453 [style=dashed label="typename-specifier"]
  1571 -> 454 [style=dashed label="unary-expression"]
  1571 -> 455 [style=dashed label="unary-operator"]
  1571 -> 130 [style=dashed label="unqualified-id"]
  1571 -> 456 [style=dashed label="user-defined-character-literal"]
  1571 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1571 -> 458 [style=dashed label="user-defined-integer-literal"]
  1571 -> 459 [style=dashed label="user-defined-literal"]
  1571 -> 460 [style=dashed label="user-defined-string-literal"]
  1571 -> 131 [style=dashed label="using-declaration"]
  1571 -> 132 [style=dashed label="using-directive"]
  1571 -> 133 [style=dashed label="using-enum-declaration"]
  1571 -> 537 [style=dashed label="yield-expression"]
  1572 [label="State 1572\n\l525 labeled-statement: attribute-specifier-seq \"case\" constant-expression • ':' statement\l"]
  1572 -> 1779 [style=solid label="':'"]
  1573 [label="State 1573\n\l417 handler: \"catch\" '(' • exception-declaration ')' compound-statement\l"]
  1573 -> 161 [style=solid label="IDENTIFIER"]
  1573 -> 4 [style=solid label="\"alignas\""]
  1573 -> 1780 [style=solid label="\"...\""]
  1573 -> 9 [style=solid label="\"::\""]
  1573 -> 10 [style=solid label="'['"]
  1573 -> 12 [style=solid label="\"class\""]
  1573 -> 13 [style=solid label="\"struct\""]
  1573 -> 14 [style=solid label="\"union\""]
  1573 -> 18 [style=solid label="\"const\""]
  1573 -> 19 [style=solid label="\"volatile\""]
  1573 -> 26 [style=solid label="\"decltype\""]
  1573 -> 136 [style=solid label="\"enum\""]
  1573 -> 37 [style=solid label="\"auto\""]
  1573 -> 38 [style=solid label="\"char\""]
  1573 -> 39 [style=solid label="\"char8_t\""]
  1573 -> 40 [style=solid label="\"char16_t\""]
  1573 -> 41 [style=solid label="\"char32_t\""]
  1573 -> 42 [style=solid label="\"wchar_t\""]
  1573 -> 43 [style=solid label="\"bool\""]
  1573 -> 44 [style=solid label="\"short\""]
  1573 -> 45 [style=solid label="\"int\""]
  1573 -> 46 [style=solid label="\"long\""]
  1573 -> 47 [style=solid label="\"signed\""]
  1573 -> 48 [style=solid label="\"unsigned\""]
  1573 -> 49 [style=solid label="\"float\""]
  1573 -> 50 [style=solid label="\"double\""]
  1573 -> 51 [style=solid label="\"void\""]
  1573 -> 56 [style=solid label="\"typename\""]
  1573 -> 58 [style=dashed label="alignment-specifier"]
  1573 -> 61 [style=dashed label="attribute-specifier"]
  1573 -> 1781 [style=dashed label="attribute-specifier-seq"]
  1573 -> 210 [style=dashed label="class-key"]
  1573 -> 66 [style=dashed label="class-name"]
  1573 -> 68 [style=dashed label="concept-name"]
  1573 -> 70 [style=dashed label="cv-qualifier"]
  1573 -> 77 [style=dashed label="decltype-specifier"]
  1573 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1573 -> 81 [style=dashed label="elaborated-type-specifier"]
  1573 -> 85 [style=dashed label="enum-name"]
  1573 -> 1782 [style=dashed label="exception-declaration"]
  1573 -> 100 [style=dashed label="namespace-alias"]
  1573 -> 103 [style=dashed label="namespace-name"]
  1573 -> 213 [style=dashed label="nested-name-specifier"]
  1573 -> 110 [style=dashed label="placeholder-type-specifier"]
  1573 -> 142 [style=dashed label="simple-template-id"]
  1573 -> 116 [style=dashed label="simple-type-specifier"]
  1573 -> 216 [style=dashed label="template-name"]
  1573 -> 124 [style=dashed label="type-constraint"]
  1573 -> 125 [style=dashed label="type-name"]
  1573 -> 217 [style=dashed label="type-specifier"]
  1573 -> 1783 [style=dashed label="type-specifier-seq"]
  1573 -> 127 [style=dashed label="typedef-name"]
  1573 -> 128 [style=dashed label="typename-specifier"]
  1574 [label="State 1574\n\l419 handler-seq: handler handler-seq •\l"]
  1574 -> "1574R419" [style=solid]
 "1574R419" [label="R419", fillcolor=3, shape=diamond, style=filled]
  1575 [label="State 1575\n\l413 function-try-block: \"try\" ctor-initializer compound-statement handler-seq •\l"]
  1575 -> "1575R413" [style=solid]
 "1575R413" [label="R413", fillcolor=3, shape=diamond, style=filled]
  1576 [label="State 1576\n\l174 constraint-logical-and-expression: constraint-logical-and-expression \"&&\" primary-expression •\l"]
  1576 -> "1576R174" [style=solid]
 "1576R174" [label="R174", fillcolor=3, shape=diamond, style=filled]
  1577 [label="State 1577\n\l174 constraint-logical-and-expression: constraint-logical-and-expression • \"&&\" primary-expression\l176 constraint-logical-or-expression: constraint-logical-or-expression \"||\" constraint-logical-and-expression •\l"]
  1577 -> 1204 [style=solid label="\"&&\""]
  1577 -> "1577R176d" [label="[\"&&\"]", style=solid]
 "1577R176d" [label="R176", fillcolor=5, shape=diamond, style=filled]
  1577 -> "1577R176" [style=solid]
 "1577R176" [label="R176", fillcolor=3, shape=diamond, style=filled]
  1578 [label="State 1578\n\l304 enumerator-definition: enumerator '=' constant-expression •\l"]
  1578 -> "1578R304" [style=solid]
 "1578R304" [label="R304", fillcolor=3, shape=diamond, style=filled]
  1579 [label="State 1579\n\l300 enum-specifier: enum-head '{' enumerator-list ',' '}' •\l"]
  1579 -> "1579R300" [style=solid]
 "1579R300" [label="R300", fillcolor=3, shape=diamond, style=filled]
  1580 [label="State 1580\n\l306 enumerator-list: enumerator-list ',' enumerator-definition •\l"]
  1580 -> "1580R306" [style=solid]
 "1580R306" [label="R306", fillcolor=3, shape=diamond, style=filled]
  1581 [label="State 1581\n\l758 opaque-enum-declaration: enum-key attribute-specifier-seq enum-head-name enum-base ';' •\l"]
  1581 -> "1581R758" [style=solid]
 "1581R758" [label="R758", fillcolor=3, shape=diamond, style=filled]
  1582 [label="State 1582\n\l234 deduction-guide: explicit-specifier template-name '(' parameter-declaration-clause ')' • \"->\" simple-template-id ';'\l"]
  1582 -> 1784 [style=solid label="\"->\""]
  1583 [label="State 1583\n\l890 private-module-fragment: \"module-keyword\" ':' \"private\" ';' •\l891                        | \"module-keyword\" ':' \"private\" ';' • declaration-seq\l"]
  1583 -> 1 [style=solid label="IDENTIFIER"]
  1583 -> 2 [style=solid label="\"using\""]
  1583 -> 3 [style=solid label="';'"]
  1583 -> 4 [style=solid label="\"alignas\""]
  1583 -> 5 [style=solid label="'('"]
  1583 -> 6 [style=solid label="\"...\""]
  1583 -> 7 [style=solid label="'&'"]
  1583 -> 8 [style=solid label="\"asm\""]
  1583 -> 9 [style=solid label="\"::\""]
  1583 -> 10 [style=solid label="'['"]
  1583 -> 11 [style=solid label="\"virtual\""]
  1583 -> 12 [style=solid label="\"class\""]
  1583 -> 13 [style=solid label="\"struct\""]
  1583 -> 14 [style=solid label="\"union\""]
  1583 -> 15 [style=solid label="\"template\""]
  1583 -> 16 [style=solid label="\"&&\""]
  1583 -> 17 [style=solid label="\"operator\""]
  1583 -> 18 [style=solid label="\"const\""]
  1583 -> 19 [style=solid label="\"volatile\""]
  1583 -> 20 [style=solid label="\"friend\""]
  1583 -> 21 [style=solid label="\"typedef\""]
  1583 -> 22 [style=solid label="\"constexpr\""]
  1583 -> 23 [style=solid label="\"consteval\""]
  1583 -> 24 [style=solid label="\"constinit\""]
  1583 -> 25 [style=solid label="\"inline\""]
  1583 -> 26 [style=solid label="\"decltype\""]
  1583 -> 27 [style=solid label="\"enum\""]
  1583 -> 28 [style=solid label="\"extern\""]
  1583 -> 29 [style=solid label="\"explicit\""]
  1583 -> 30 [style=solid label="\"export\""]
  1583 -> 158 [style=solid label="\"export-keyword\""]
  1583 -> 32 [style=solid label="'*'"]
  1583 -> 34 [style=solid label="\"import-keyword\""]
  1583 -> 35 [style=solid label="\"namespace\""]
  1583 -> 36 [style=solid label="'~'"]
  1583 -> 37 [style=solid label="\"auto\""]
  1583 -> 38 [style=solid label="\"char\""]
  1583 -> 39 [style=solid label="\"char8_t\""]
  1583 -> 40 [style=solid label="\"char16_t\""]
  1583 -> 41 [style=solid label="\"char32_t\""]
  1583 -> 42 [style=solid label="\"wchar_t\""]
  1583 -> 43 [style=solid label="\"bool\""]
  1583 -> 44 [style=solid label="\"short\""]
  1583 -> 45 [style=solid label="\"int\""]
  1583 -> 46 [style=solid label="\"long\""]
  1583 -> 47 [style=solid label="\"signed\""]
  1583 -> 48 [style=solid label="\"unsigned\""]
  1583 -> 49 [style=solid label="\"float\""]
  1583 -> 50 [style=solid label="\"double\""]
  1583 -> 51 [style=solid label="\"void\""]
  1583 -> 52 [style=solid label="\"static_assert\""]
  1583 -> 53 [style=solid label="\"static\""]
  1583 -> 54 [style=solid label="\"thread_local\""]
  1583 -> 55 [style=solid label="\"mutable\""]
  1583 -> 56 [style=solid label="\"typename\""]
  1583 -> 57 [style=dashed label="alias-declaration"]
  1583 -> 58 [style=dashed label="alignment-specifier"]
  1583 -> 59 [style=dashed label="asm-declaration"]
  1583 -> 60 [style=dashed label="attribute-declaration"]
  1583 -> 61 [style=dashed label="attribute-specifier"]
  1583 -> 62 [style=dashed label="attribute-specifier-seq"]
  1583 -> 63 [style=dashed label="block-declaration"]
  1583 -> 64 [style=dashed label="class-head"]
  1583 -> 65 [style=dashed label="class-key"]
  1583 -> 66 [style=dashed label="class-name"]
  1583 -> 67 [style=dashed label="class-specifier"]
  1583 -> 68 [style=dashed label="concept-name"]
  1583 -> 69 [style=dashed label="conversion-function-id"]
  1583 -> 70 [style=dashed label="cv-qualifier"]
  1583 -> 71 [style=dashed label="decl-specifier"]
  1583 -> 72 [style=dashed label="decl-specifier-seq"]
  1583 -> 73 [style=dashed label="declaration"]
  1583 -> 1785 [style=dashed label="declaration-seq"]
  1583 -> 75 [style=dashed label="declarator"]
  1583 -> 76 [style=dashed label="declarator-id"]
  1583 -> 77 [style=dashed label="decltype-specifier"]
  1583 -> 78 [style=dashed label="deduction-guide"]
  1583 -> 79 [style=dashed label="defining-type-specifier"]
  1583 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1583 -> 81 [style=dashed label="elaborated-type-specifier"]
  1583 -> 82 [style=dashed label="empty-declaration"]
  1583 -> 83 [style=dashed label="enum-head"]
  1583 -> 84 [style=dashed label="enum-key"]
  1583 -> 85 [style=dashed label="enum-name"]
  1583 -> 86 [style=dashed label="enum-specifier"]
  1583 -> 87 [style=dashed label="explicit-instantiation"]
  1583 -> 88 [style=dashed label="explicit-specialization"]
  1583 -> 89 [style=dashed label="explicit-specifier"]
  1583 -> 90 [style=dashed label="export-declaration"]
  1583 -> 91 [style=dashed label="function-definition"]
  1583 -> 92 [style=dashed label="function-specifier"]
  1583 -> 94 [style=dashed label="id-expression"]
  1583 -> 95 [style=dashed label="linkage-specification"]
  1583 -> 96 [style=dashed label="literal-operator-id"]
  1583 -> 98 [style=dashed label="module-import-declaration"]
  1583 -> 99 [style=dashed label="named-namespace-definition"]
  1583 -> 100 [style=dashed label="namespace-alias"]
  1583 -> 101 [style=dashed label="namespace-alias-definition"]
  1583 -> 102 [style=dashed label="namespace-definition"]
  1583 -> 103 [style=dashed label="namespace-name"]
  1583 -> 104 [style=dashed label="nested-name-specifier"]
  1583 -> 105 [style=dashed label="nested-namespace-definition"]
  1583 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  1583 -> 107 [style=dashed label="noptr-declarator"]
  1583 -> 108 [style=dashed label="opaque-enum-declaration"]
  1583 -> 109 [style=dashed label="operator-function-id"]
  1583 -> 110 [style=dashed label="placeholder-type-specifier"]
  1583 -> 111 [style=dashed label="ptr-declarator"]
  1583 -> 112 [style=dashed label="ptr-operator"]
  1583 -> 113 [style=dashed label="qualified-id"]
  1583 -> 114 [style=dashed label="simple-declaration"]
  1583 -> 115 [style=dashed label="simple-template-id"]
  1583 -> 116 [style=dashed label="simple-type-specifier"]
  1583 -> 117 [style=dashed label="static_assert-declaration"]
  1583 -> 118 [style=dashed label="storage-class-specifier"]
  1583 -> 119 [style=dashed label="template-declaration"]
  1583 -> 120 [style=dashed label="template-head"]
  1583 -> 121 [style=dashed label="template-id"]
  1583 -> 122 [style=dashed label="template-name"]
  1583 -> 124 [style=dashed label="type-constraint"]
  1583 -> 125 [style=dashed label="type-name"]
  1583 -> 126 [style=dashed label="type-specifier"]
  1583 -> 127 [style=dashed label="typedef-name"]
  1583 -> 128 [style=dashed label="typename-specifier"]
  1583 -> 129 [style=dashed label="unnamed-namespace-definition"]
  1583 -> 130 [style=dashed label="unqualified-id"]
  1583 -> 131 [style=dashed label="using-declaration"]
  1583 -> 132 [style=dashed label="using-directive"]
  1583 -> 133 [style=dashed label="using-enum-declaration"]
  1583 -> "1583R890" [style=solid]
 "1583R890" [label="R890", fillcolor=3, shape=diamond, style=filled]
  1584 [label="State 1584\n\l1088 type-constraint: nested-name-specifier concept-name '<' template-argument-list '>' •\l"]
  1584 -> "1584R1088" [style=solid]
 "1584R1088" [label="R1088", fillcolor=3, shape=diamond, style=filled]
  1585 [label="State 1585\n\l928 ref-qualifier: '&' •\l"]
  1585 -> "1585R928" [style=solid]
 "1585R928" [label="R928", fillcolor=3, shape=diamond, style=filled]
  1586 [label="State 1586\n\l929 ref-qualifier: \"&&\" •\l"]
  1586 -> "1586R929" [style=solid]
 "1586R929" [label="R929", fillcolor=3, shape=diamond, style=filled]
  1587 [label="State 1587\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l844 parameters-and-qualifiers: '(' parameter-declaration-clause ')' attribute-specifier-seq •\l"]
  1587 -> 4 [style=solid label="\"alignas\""]
  1587 -> 10 [style=solid label="'['"]
  1587 -> 58 [style=dashed label="alignment-specifier"]
  1587 -> 265 [style=dashed label="attribute-specifier"]
  1587 -> "1587R844d" [label="['[']", style=solid]
 "1587R844d" [label="R844", fillcolor=5, shape=diamond, style=filled]
  1587 -> "1587R844" [style=solid]
 "1587R844" [label="R844", fillcolor=3, shape=diamond, style=filled]
  1588 [label="State 1588\n\l837 parameters-and-qualifiers: '(' parameter-declaration-clause ')' cv-qualifier-seq •\l839                          | '(' parameter-declaration-clause ')' cv-qualifier-seq • ref-qualifier\l841                          | '(' parameter-declaration-clause ')' cv-qualifier-seq • noexcept-specifier\l843                          | '(' parameter-declaration-clause ')' cv-qualifier-seq • ref-qualifier noexcept-specifier\l845                          | '(' parameter-declaration-clause ')' cv-qualifier-seq • attribute-specifier-seq\l847                          | '(' parameter-declaration-clause ')' cv-qualifier-seq • ref-qualifier attribute-specifier-seq\l849                          | '(' parameter-declaration-clause ')' cv-qualifier-seq • noexcept-specifier attribute-specifier-seq\l851                          | '(' parameter-declaration-clause ')' cv-qualifier-seq • ref-qualifier noexcept-specifier attribute-specifier-seq\l"]
  1588 -> 4 [style=solid label="\"alignas\""]
  1588 -> 1585 [style=solid label="'&'"]
  1588 -> 10 [style=solid label="'['"]
  1588 -> 898 [style=solid label="\"noexcept\""]
  1588 -> 1586 [style=solid label="\"&&\""]
  1588 -> 58 [style=dashed label="alignment-specifier"]
  1588 -> 61 [style=dashed label="attribute-specifier"]
  1588 -> 1786 [style=dashed label="attribute-specifier-seq"]
  1588 -> 1787 [style=dashed label="noexcept-specifier"]
  1588 -> 1788 [style=dashed label="ref-qualifier"]
  1588 -> "1588R837d" [label="['[']", style=solid]
 "1588R837d" [label="R837", fillcolor=5, shape=diamond, style=filled]
  1588 -> "1588R837" [style=solid]
 "1588R837" [label="R837", fillcolor=3, shape=diamond, style=filled]
  1589 [label="State 1589\n\l840 parameters-and-qualifiers: '(' parameter-declaration-clause ')' noexcept-specifier •\l848                          | '(' parameter-declaration-clause ')' noexcept-specifier • attribute-specifier-seq\l"]
  1589 -> 4 [style=solid label="\"alignas\""]
  1589 -> 10 [style=solid label="'['"]
  1589 -> 58 [style=dashed label="alignment-specifier"]
  1589 -> 61 [style=dashed label="attribute-specifier"]
  1589 -> 1789 [style=dashed label="attribute-specifier-seq"]
  1589 -> "1589R840d" [label="['[']", style=solid]
 "1589R840d" [label="R840", fillcolor=5, shape=diamond, style=filled]
  1589 -> "1589R840" [style=solid]
 "1589R840" [label="R840", fillcolor=3, shape=diamond, style=filled]
  1590 [label="State 1590\n\l838 parameters-and-qualifiers: '(' parameter-declaration-clause ')' ref-qualifier •\l842                          | '(' parameter-declaration-clause ')' ref-qualifier • noexcept-specifier\l846                          | '(' parameter-declaration-clause ')' ref-qualifier • attribute-specifier-seq\l850                          | '(' parameter-declaration-clause ')' ref-qualifier • noexcept-specifier attribute-specifier-seq\l"]
  1590 -> 4 [style=solid label="\"alignas\""]
  1590 -> 10 [style=solid label="'['"]
  1590 -> 898 [style=solid label="\"noexcept\""]
  1590 -> 58 [style=dashed label="alignment-specifier"]
  1590 -> 61 [style=dashed label="attribute-specifier"]
  1590 -> 1790 [style=dashed label="attribute-specifier-seq"]
  1590 -> 1791 [style=dashed label="noexcept-specifier"]
  1590 -> "1590R838d" [label="['[']", style=solid]
 "1590R838d" [label="R838", fillcolor=5, shape=diamond, style=filled]
  1590 -> "1590R838" [style=solid]
 "1590R838" [label="R838", fillcolor=3, shape=diamond, style=filled]
  1591 [label="State 1591\n\l833 parameter-declaration-clause: parameter-declaration-list ',' \"...\" •\l"]
  1591 -> "1591R833" [style=solid]
 "1591R833" [label="R833", fillcolor=3, shape=diamond, style=filled]
  1592 [label="State 1592\n\l835 parameter-declaration-list: parameter-declaration-list ',' parameter-declaration •\l"]
  1592 -> "1592R835" [style=solid]
 "1592R835" [label="R835", fillcolor=3, shape=diamond, style=filled]
  1593 [label="State 1593\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l731 noptr-declarator: noptr-declarator '[' constant-expression ']' attribute-specifier-seq •\l"]
  1593 -> 4 [style=solid label="\"alignas\""]
  1593 -> 10 [style=solid label="'['"]
  1593 -> 58 [style=dashed label="alignment-specifier"]
  1593 -> 265 [style=dashed label="attribute-specifier"]
  1593 -> "1593R731d" [label="['[']", style=solid]
 "1593R731d" [label="R731", fillcolor=5, shape=diamond, style=filled]
  1593 -> "1593R731" [style=solid]
 "1593R731" [label="R731", fillcolor=3, shape=diamond, style=filled]
  1594 [label="State 1594\n\l162 concept-definition: \"concept\" concept-name '=' constraint-expression • ';'\l"]
  1594 -> 1792 [style=solid label="';'"]
  1595 [label="State 1595\n\l172 constraint-expression: logical-or-expression •\l570 logical-or-expression: logical-or-expression • \"||\" logical-and-expression\l"]
  1595 -> 908 [style=solid label="\"||\""]
  1595 -> "1595R172" [style=solid]
 "1595R172" [label="R172", fillcolor=3, shape=diamond, style=filled]
  1596 [label="State 1596\n\l235 deduction-guide: template-name '(' parameter-declaration-clause ')' \"->\" • simple-template-id ';'\l"]
  1596 -> 315 [style=solid label="IDENTIFIER"]
  1596 -> 1793 [style=dashed label="simple-template-id"]
  1596 -> 143 [style=dashed label="template-name"]
  1597 [label="State 1597\n\l854 placeholder-type-specifier: type-constraint \"decltype\" '(' \"auto\" ')' •\l"]
  1597 -> "1597R854" [style=solid]
 "1597R854" [label="R854", fillcolor=3, shape=diamond, style=filled]
  1598 [label="State 1598\n\l 14 alias-declaration: \"using\" IDENTIFIER attribute-specifier-seq '=' defining-type-id ';' •\l"]
  1598 -> "1598R14" [style=solid]
 "1598R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  1599 [label="State 1599\n\l349 fold-expression: '(' \"...\" fold-operator cast-expression • ')'\l"]
  1599 -> 1794 [style=solid label="')'"]
  1600 [label="State 1600\n\l348 fold-expression: '(' cast-expression fold-operator \"...\" • ')'\l350                | '(' cast-expression fold-operator \"...\" • fold-operator cast-expression ')'\l"]
  1600 -> 1239 [style=solid label="'+'"]
  1600 -> 1240 [style=solid label="'-'"]
  1600 -> 1241 [style=solid label="'='"]
  1600 -> 1795 [style=solid label="')'"]
  1600 -> 1242 [style=solid label="'&'"]
  1600 -> 1243 [style=solid label="\"*=\""]
  1600 -> 1244 [style=solid label="\"/=\""]
  1600 -> 1245 [style=solid label="\"%=\""]
  1600 -> 1246 [style=solid label="\"+=\""]
  1600 -> 1247 [style=solid label="\"-=\""]
  1600 -> 1248 [style=solid label="\">>=\""]
  1600 -> 1249 [style=solid label="\"<<=\""]
  1600 -> 1250 [style=solid label="\"&=\""]
  1600 -> 1251 [style=solid label="\"^=\""]
  1600 -> 1252 [style=solid label="\"|=\""]
  1600 -> 1253 [style=solid label="','"]
  1600 -> 1254 [style=solid label="\"&&\""]
  1600 -> 1255 [style=solid label="\"||\""]
  1600 -> 1256 [style=solid label="\"==\""]
  1600 -> 1257 [style=solid label="\"!=\""]
  1600 -> 1258 [style=solid label="'^'"]
  1600 -> 1259 [style=solid label="'<'"]
  1600 -> 1260 [style=solid label="'>'"]
  1600 -> 1261 [style=solid label="'*'"]
  1600 -> 1262 [style=solid label="'/'"]
  1600 -> 1263 [style=solid label="'%'"]
  1600 -> 1264 [style=solid label="'|'"]
  1600 -> 1265 [style=solid label="\"<<\""]
  1600 -> 1266 [style=solid label="\">>\""]
  1600 -> 1267 [style=solid label="\"<=\""]
  1600 -> 1268 [style=solid label="\">=\""]
  1600 -> 1269 [style=solid label="\".*\""]
  1600 -> 1270 [style=solid label="\"->*\""]
  1600 -> 1796 [style=dashed label="fold-operator"]
  1601 [label="State 1601\n\l125 cast-expression: '(' type-id ')' cast-expression •\l"]
  1601 -> "1601R125" [style=solid]
 "1601R125" [label="R125", fillcolor=3, shape=diamond, style=filled]
  1602 [label="State 1602\n\l246 delete-expression: \"::\" \"delete\" '[' ']' • cast-expression\l538 lambda-introducer: '[' ']' •\l"]
  1602 -> 1 [style=solid label="IDENTIFIER"]
  1602 -> 361 [style=solid label="'+'"]
  1602 -> 362 [style=solid label="'-'"]
  1602 -> 363 [style=solid label="'('"]
  1602 -> 364 [style=solid label="'&'"]
  1602 -> 365 [style=solid label="\"::\""]
  1602 -> 366 [style=solid label="'['"]
  1602 -> 367 [style=solid label="\"co_await\""]
  1602 -> 368 [style=solid label="'0'"]
  1602 -> 369 [style=solid label="'1'"]
  1602 -> 370 [style=solid label="\"0b\""]
  1602 -> 371 [style=solid label="\"0B\""]
  1602 -> 372 [style=solid label="'\\''"]
  1602 -> 373 [style=solid label="\"false\""]
  1602 -> 374 [style=solid label="\"true\""]
  1602 -> 375 [style=solid label="\"noexcept\""]
  1602 -> 17 [style=solid label="\"operator\""]
  1602 -> 26 [style=solid label="\"decltype\""]
  1602 -> 376 [style=solid label="\"delete\""]
  1602 -> 377 [style=solid label="'.'"]
  1602 -> 378 [style=solid label="'2'"]
  1602 -> 379 [style=solid label="'3'"]
  1602 -> 380 [style=solid label="'4'"]
  1602 -> 381 [style=solid label="'5'"]
  1602 -> 382 [style=solid label="'6'"]
  1602 -> 383 [style=solid label="'7'"]
  1602 -> 384 [style=solid label="'8'"]
  1602 -> 385 [style=solid label="'9'"]
  1602 -> 185 [style=solid label="\"u8\""]
  1602 -> 186 [style=solid label="'u'"]
  1602 -> 187 [style=solid label="'U'"]
  1602 -> 188 [style=solid label="'L'"]
  1602 -> 386 [style=solid label="'*'"]
  1602 -> 203 [style=solid label="'\"'"]
  1602 -> 387 [style=solid label="\"0x\""]
  1602 -> 388 [style=solid label="\"0X\""]
  1602 -> 389 [style=solid label="\"requires\""]
  1602 -> 390 [style=solid label="\"new\""]
  1602 -> 391 [style=solid label="'~'"]
  1602 -> 392 [style=solid label="'!'"]
  1602 -> 393 [style=solid label="\"++\""]
  1602 -> 394 [style=solid label="\"--\""]
  1602 -> 395 [style=solid label="\"this\""]
  1602 -> 37 [style=solid label="\"auto\""]
  1602 -> 396 [style=solid label="\"nullptr\""]
  1602 -> 397 [style=solid label="\"dynamic_cast\""]
  1602 -> 398 [style=solid label="\"static_cast\""]
  1602 -> 399 [style=solid label="\"reinterpret_cast\""]
  1602 -> 400 [style=solid label="\"const_cast\""]
  1602 -> 401 [style=solid label="\"typeid\""]
  1602 -> 38 [style=solid label="\"char\""]
  1602 -> 39 [style=solid label="\"char8_t\""]
  1602 -> 40 [style=solid label="\"char16_t\""]
  1602 -> 41 [style=solid label="\"char32_t\""]
  1602 -> 42 [style=solid label="\"wchar_t\""]
  1602 -> 43 [style=solid label="\"bool\""]
  1602 -> 44 [style=solid label="\"short\""]
  1602 -> 45 [style=solid label="\"int\""]
  1602 -> 46 [style=solid label="\"long\""]
  1602 -> 47 [style=solid label="\"signed\""]
  1602 -> 48 [style=solid label="\"unsigned\""]
  1602 -> 49 [style=solid label="\"float\""]
  1602 -> 50 [style=solid label="\"double\""]
  1602 -> 51 [style=solid label="\"void\""]
  1602 -> 209 [style=solid label="'R'"]
  1602 -> 56 [style=solid label="\"typename\""]
  1602 -> 402 [style=solid label="\"sizeof\""]
  1602 -> 403 [style=solid label="\"alignof\""]
  1602 -> 406 [style=dashed label="await-expression"]
  1602 -> 407 [style=dashed label="binary-literal"]
  1602 -> 408 [style=dashed label="boolean-literal"]
  1602 -> 1797 [style=dashed label="cast-expression"]
  1602 -> 410 [style=dashed label="character-literal"]
  1602 -> 66 [style=dashed label="class-name"]
  1602 -> 68 [style=dashed label="concept-name"]
  1602 -> 69 [style=dashed label="conversion-function-id"]
  1602 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1602 -> 415 [style=dashed label="decimal-literal"]
  1602 -> 77 [style=dashed label="decltype-specifier"]
  1602 -> 416 [style=dashed label="delete-expression"]
  1602 -> 417 [style=dashed label="digit"]
  1602 -> 418 [style=dashed label="digit-sequence"]
  1602 -> 419 [style=dashed label="encoding-prefix"]
  1602 -> 85 [style=dashed label="enum-name"]
  1602 -> 422 [style=dashed label="floating-point-literal"]
  1602 -> 423 [style=dashed label="fold-expression"]
  1602 -> 424 [style=dashed label="fractional-constant"]
  1602 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1602 -> 426 [style=dashed label="hexadecimal-literal"]
  1602 -> 427 [style=dashed label="hexadecimal-prefix"]
  1602 -> 428 [style=dashed label="id-expression"]
  1602 -> 430 [style=dashed label="integer-literal"]
  1602 -> 431 [style=dashed label="lambda-expression"]
  1602 -> 432 [style=dashed label="lambda-introducer"]
  1602 -> 433 [style=dashed label="literal"]
  1602 -> 96 [style=dashed label="literal-operator-id"]
  1602 -> 100 [style=dashed label="namespace-alias"]
  1602 -> 103 [style=dashed label="namespace-name"]
  1602 -> 437 [style=dashed label="nested-name-specifier"]
  1602 -> 438 [style=dashed label="new-expression"]
  1602 -> 439 [style=dashed label="noexcept-expression"]
  1602 -> 440 [style=dashed label="nonzero-digit"]
  1602 -> 441 [style=dashed label="octal-literal"]
  1602 -> 109 [style=dashed label="operator-function-id"]
  1602 -> 110 [style=dashed label="placeholder-type-specifier"]
  1602 -> 443 [style=dashed label="pointer-literal"]
  1602 -> 444 [style=dashed label="postfix-expression"]
  1602 -> 445 [style=dashed label="primary-expression"]
  1602 -> 113 [style=dashed label="qualified-id"]
  1602 -> 447 [style=dashed label="requires-expression"]
  1602 -> 115 [style=dashed label="simple-template-id"]
  1602 -> 534 [style=dashed label="simple-type-specifier"]
  1602 -> 450 [style=dashed label="string-literal"]
  1602 -> 121 [style=dashed label="template-id"]
  1602 -> 216 [style=dashed label="template-name"]
  1602 -> 124 [style=dashed label="type-constraint"]
  1602 -> 125 [style=dashed label="type-name"]
  1602 -> 127 [style=dashed label="typedef-name"]
  1602 -> 536 [style=dashed label="typename-specifier"]
  1602 -> 454 [style=dashed label="unary-expression"]
  1602 -> 455 [style=dashed label="unary-operator"]
  1602 -> 130 [style=dashed label="unqualified-id"]
  1602 -> 456 [style=dashed label="user-defined-character-literal"]
  1602 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1602 -> 458 [style=dashed label="user-defined-integer-literal"]
  1602 -> 459 [style=dashed label="user-defined-literal"]
  1602 -> 460 [style=dashed label="user-defined-string-literal"]
  1602 -> "1602R538d" [label="[IDENTIFIER, '(', \"::\", '[', \"noexcept\", \"decltype\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"typename\"]", style=solid]
 "1602R538d" [label="R538", fillcolor=5, shape=diamond, style=filled]
  1602 -> "1602R538" [style=solid]
 "1602R538" [label="R538", fillcolor=3, shape=diamond, style=filled]
  1603 [label="State 1603\n\l680 new-expression: \"::\" \"new\" '(' type-id • ')'\l684               | \"::\" \"new\" '(' type-id • ')' new-initializer\l"]
  1603 -> 1798 [style=solid label="')'"]
  1604 [label="State 1604\n\l682 new-expression: \"::\" \"new\" new-placement '(' • type-id ')'\l686               | \"::\" \"new\" new-placement '(' • type-id ')' new-initializer\l"]
  1604 -> 161 [style=solid label="IDENTIFIER"]
  1604 -> 9 [style=solid label="\"::\""]
  1604 -> 12 [style=solid label="\"class\""]
  1604 -> 13 [style=solid label="\"struct\""]
  1604 -> 14 [style=solid label="\"union\""]
  1604 -> 18 [style=solid label="\"const\""]
  1604 -> 19 [style=solid label="\"volatile\""]
  1604 -> 26 [style=solid label="\"decltype\""]
  1604 -> 136 [style=solid label="\"enum\""]
  1604 -> 37 [style=solid label="\"auto\""]
  1604 -> 38 [style=solid label="\"char\""]
  1604 -> 39 [style=solid label="\"char8_t\""]
  1604 -> 40 [style=solid label="\"char16_t\""]
  1604 -> 41 [style=solid label="\"char32_t\""]
  1604 -> 42 [style=solid label="\"wchar_t\""]
  1604 -> 43 [style=solid label="\"bool\""]
  1604 -> 44 [style=solid label="\"short\""]
  1604 -> 45 [style=solid label="\"int\""]
  1604 -> 46 [style=solid label="\"long\""]
  1604 -> 47 [style=solid label="\"signed\""]
  1604 -> 48 [style=solid label="\"unsigned\""]
  1604 -> 49 [style=solid label="\"float\""]
  1604 -> 50 [style=solid label="\"double\""]
  1604 -> 51 [style=solid label="\"void\""]
  1604 -> 56 [style=solid label="\"typename\""]
  1604 -> 210 [style=dashed label="class-key"]
  1604 -> 66 [style=dashed label="class-name"]
  1604 -> 68 [style=dashed label="concept-name"]
  1604 -> 70 [style=dashed label="cv-qualifier"]
  1604 -> 77 [style=dashed label="decltype-specifier"]
  1604 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1604 -> 81 [style=dashed label="elaborated-type-specifier"]
  1604 -> 85 [style=dashed label="enum-name"]
  1604 -> 100 [style=dashed label="namespace-alias"]
  1604 -> 103 [style=dashed label="namespace-name"]
  1604 -> 213 [style=dashed label="nested-name-specifier"]
  1604 -> 110 [style=dashed label="placeholder-type-specifier"]
  1604 -> 142 [style=dashed label="simple-template-id"]
  1604 -> 116 [style=dashed label="simple-type-specifier"]
  1604 -> 216 [style=dashed label="template-name"]
  1604 -> 124 [style=dashed label="type-constraint"]
  1604 -> 1799 [style=dashed label="type-id"]
  1604 -> 125 [style=dashed label="type-name"]
  1604 -> 217 [style=dashed label="type-specifier"]
  1604 -> 452 [style=dashed label="type-specifier-seq"]
  1604 -> 127 [style=dashed label="typedef-name"]
  1604 -> 128 [style=dashed label="typename-specifier"]
  1605 [label="State 1605\n\l674 new-expression: \"::\" \"new\" new-placement new-type-id •\l678               | \"::\" \"new\" new-placement new-type-id • new-initializer\l"]
  1605 -> 1310 [style=solid label="'('"]
  1605 -> 939 [style=solid label="'{'"]
  1605 -> 1311 [style=dashed label="braced-init-list"]
  1605 -> 1800 [style=dashed label="new-initializer"]
  1605 -> "1605R674d" [label="['{']", style=solid]
 "1605R674d" [label="R674", fillcolor=5, shape=diamond, style=filled]
  1605 -> "1605R674" [style=solid]
 "1605R674" [label="R674", fillcolor=3, shape=diamond, style=filled]
  1606 [label="State 1606\n\l676 new-expression: \"::\" \"new\" new-type-id new-initializer •\l"]
  1606 -> "1606R676" [style=solid]
 "1606R676" [label="R676", fillcolor=3, shape=diamond, style=filled]
  1607 [label="State 1607\n\l469 init-capture: \"...\" IDENTIFIER initializer •\l"]
  1607 -> "1607R469" [style=solid]
 "1607R469" [label="R469", fillcolor=3, shape=diamond, style=filled]
  1608 [label="State 1608\n\l974 simple-capture: '&' IDENTIFIER \"...\" •\l"]
  1608 -> "1608R974" [style=solid]
 "1608R974" [label="R974", fillcolor=3, shape=diamond, style=filled]
  1609 [label="State 1609\n\l471 init-capture: '&' IDENTIFIER initializer •\l"]
  1609 -> "1609R471" [style=solid]
 "1609R471" [label="R471", fillcolor=3, shape=diamond, style=filled]
  1610 [label="State 1610\n\l472 init-capture: '&' \"...\" IDENTIFIER • initializer\l"]
  1610 -> 1280 [style=solid label="'='"]
  1610 -> 647 [style=solid label="'('"]
  1610 -> 939 [style=solid label="'{'"]
  1610 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1610 -> 650 [style=dashed label="braced-init-list"]
  1610 -> 1801 [style=dashed label="initializer"]
  1611 [label="State 1611\n\l471 init-capture: '&' • IDENTIFIER initializer\l472             | '&' • \"...\" IDENTIFIER initializer\l973 simple-capture: '&' • IDENTIFIER\l974               | '&' • IDENTIFIER \"...\"\l"]
  1611 -> 1284 [style=solid label="IDENTIFIER"]
  1611 -> 1285 [style=solid label="\"...\""]
  1612 [label="State 1612\n\l123 capture-list: capture-list • ',' capture\l531 lambda-capture: capture-default ',' capture-list •\l"]
  1612 -> 1288 [style=solid label="','"]
  1612 -> "1612R531" [style=solid]
 "1612R531" [label="R531", fillcolor=3, shape=diamond, style=filled]
  1613 [label="State 1613\n\l123 capture-list: capture-list ',' capture •\l"]
  1613 -> "1613R123" [style=solid]
 "1613R123" [label="R123", fillcolor=3, shape=diamond, style=filled]
  1614 [label="State 1614\n\l696 noexcept-expression: \"noexcept\" '(' expression ')' •\l"]
  1614 -> "1614R696" [style=solid]
 "1614R696" [label="R696", fillcolor=3, shape=diamond, style=filled]
  1615 [label="State 1615\n\l247 delete-expression: \"delete\" '[' ']' cast-expression •\l"]
  1615 -> "1615R247" [style=solid]
 "1615R247" [label="R247", fillcolor=3, shape=diamond, style=filled]
  1616 [label="State 1616\n\l940 requirement-parameter-list: '(' parameter-declaration-clause ')' •\l"]
  1616 -> "1616R940" [style=solid]
 "1616R940" [label="R940", fillcolor=3, shape=diamond, style=filled]
  1617 [label="State 1617\n\l156 compound-requirement: '{' expression • '}' ';'\l157                     | '{' expression • '}' \"noexcept\" ';'\l158                     | '{' expression • '}' return-type-requirement ';'\l159                     | '{' expression • '}' \"noexcept\" return-type-requirement ';'\l338 expression: expression • ',' assignment-expression\l"]
  1617 -> 1037 [style=solid label="','"]
  1617 -> 1802 [style=solid label="'}'"]
  1618 [label="State 1618\n\l125 cast-expression: '(' • type-id ')' cast-expression\l348 fold-expression: '(' • cast-expression fold-operator \"...\" ')'\l349                | '(' • \"...\" fold-operator cast-expression ')'\l350                | '(' • cast-expression fold-operator \"...\" fold-operator cast-expression ')'\l885 primary-expression: '(' • expression ')'\l940 requirement-parameter-list: '(' • parameter-declaration-clause ')'\l"]
  1618 -> 1 [style=solid label="IDENTIFIER"]
  1618 -> 361 [style=solid label="'+'"]
  1618 -> 362 [style=solid label="'-'"]
  1618 -> 4 [style=solid label="\"alignas\""]
  1618 -> 363 [style=solid label="'('"]
  1618 -> 1803 [style=solid label="\"...\""]
  1618 -> 364 [style=solid label="'&'"]
  1618 -> 365 [style=solid label="\"::\""]
  1618 -> 667 [style=solid label="'['"]
  1618 -> 367 [style=solid label="\"co_await\""]
  1618 -> 11 [style=solid label="\"virtual\""]
  1618 -> 368 [style=solid label="'0'"]
  1618 -> 369 [style=solid label="'1'"]
  1618 -> 370 [style=solid label="\"0b\""]
  1618 -> 371 [style=solid label="\"0B\""]
  1618 -> 372 [style=solid label="'\\''"]
  1618 -> 373 [style=solid label="\"false\""]
  1618 -> 374 [style=solid label="\"true\""]
  1618 -> 12 [style=solid label="\"class\""]
  1618 -> 13 [style=solid label="\"struct\""]
  1618 -> 14 [style=solid label="\"union\""]
  1618 -> 375 [style=solid label="\"noexcept\""]
  1618 -> 17 [style=solid label="\"operator\""]
  1618 -> 18 [style=solid label="\"const\""]
  1618 -> 19 [style=solid label="\"volatile\""]
  1618 -> 20 [style=solid label="\"friend\""]
  1618 -> 21 [style=solid label="\"typedef\""]
  1618 -> 22 [style=solid label="\"constexpr\""]
  1618 -> 23 [style=solid label="\"consteval\""]
  1618 -> 24 [style=solid label="\"constinit\""]
  1618 -> 263 [style=solid label="\"inline\""]
  1618 -> 26 [style=solid label="\"decltype\""]
  1618 -> 376 [style=solid label="\"delete\""]
  1618 -> 377 [style=solid label="'.'"]
  1618 -> 378 [style=solid label="'2'"]
  1618 -> 379 [style=solid label="'3'"]
  1618 -> 380 [style=solid label="'4'"]
  1618 -> 381 [style=solid label="'5'"]
  1618 -> 382 [style=solid label="'6'"]
  1618 -> 383 [style=solid label="'7'"]
  1618 -> 384 [style=solid label="'8'"]
  1618 -> 385 [style=solid label="'9'"]
  1618 -> 27 [style=solid label="\"enum\""]
  1618 -> 185 [style=solid label="\"u8\""]
  1618 -> 186 [style=solid label="'u'"]
  1618 -> 187 [style=solid label="'U'"]
  1618 -> 188 [style=solid label="'L'"]
  1618 -> 264 [style=solid label="\"extern\""]
  1618 -> 29 [style=solid label="\"explicit\""]
  1618 -> 386 [style=solid label="'*'"]
  1618 -> 203 [style=solid label="'\"'"]
  1618 -> 387 [style=solid label="\"0x\""]
  1618 -> 388 [style=solid label="\"0X\""]
  1618 -> 389 [style=solid label="\"requires\""]
  1618 -> 390 [style=solid label="\"new\""]
  1618 -> 391 [style=solid label="'~'"]
  1618 -> 392 [style=solid label="'!'"]
  1618 -> 393 [style=solid label="\"++\""]
  1618 -> 394 [style=solid label="\"--\""]
  1618 -> 1804 [style=solid label="\"this\""]
  1618 -> 37 [style=solid label="\"auto\""]
  1618 -> 396 [style=solid label="\"nullptr\""]
  1618 -> 397 [style=solid label="\"dynamic_cast\""]
  1618 -> 398 [style=solid label="\"static_cast\""]
  1618 -> 399 [style=solid label="\"reinterpret_cast\""]
  1618 -> 400 [style=solid label="\"const_cast\""]
  1618 -> 401 [style=solid label="\"typeid\""]
  1618 -> 38 [style=solid label="\"char\""]
  1618 -> 39 [style=solid label="\"char8_t\""]
  1618 -> 40 [style=solid label="\"char16_t\""]
  1618 -> 41 [style=solid label="\"char32_t\""]
  1618 -> 42 [style=solid label="\"wchar_t\""]
  1618 -> 43 [style=solid label="\"bool\""]
  1618 -> 44 [style=solid label="\"short\""]
  1618 -> 45 [style=solid label="\"int\""]
  1618 -> 46 [style=solid label="\"long\""]
  1618 -> 47 [style=solid label="\"signed\""]
  1618 -> 48 [style=solid label="\"unsigned\""]
  1618 -> 49 [style=solid label="\"float\""]
  1618 -> 50 [style=solid label="\"double\""]
  1618 -> 51 [style=solid label="\"void\""]
  1618 -> 53 [style=solid label="\"static\""]
  1618 -> 54 [style=solid label="\"thread_local\""]
  1618 -> 55 [style=solid label="\"mutable\""]
  1618 -> 209 [style=solid label="'R'"]
  1618 -> 528 [style=solid label="\"throw\""]
  1618 -> 56 [style=solid label="\"typename\""]
  1618 -> 402 [style=solid label="\"sizeof\""]
  1618 -> 403 [style=solid label="\"alignof\""]
  1618 -> 529 [style=solid label="\"co_yield\""]
  1618 -> 404 [style=dashed label="additive-expression"]
  1618 -> 58 [style=dashed label="alignment-specifier"]
  1618 -> 405 [style=dashed label="and-expression"]
  1618 -> 530 [style=dashed label="assignment-expression"]
  1618 -> 61 [style=dashed label="attribute-specifier"]
  1618 -> 478 [style=dashed label="attribute-specifier-seq"]
  1618 -> 406 [style=dashed label="await-expression"]
  1618 -> 407 [style=dashed label="binary-literal"]
  1618 -> 408 [style=dashed label="boolean-literal"]
  1618 -> 761 [style=dashed label="cast-expression"]
  1618 -> 410 [style=dashed label="character-literal"]
  1618 -> 64 [style=dashed label="class-head"]
  1618 -> 65 [style=dashed label="class-key"]
  1618 -> 66 [style=dashed label="class-name"]
  1618 -> 67 [style=dashed label="class-specifier"]
  1618 -> 411 [style=dashed label="compare-expression"]
  1618 -> 68 [style=dashed label="concept-name"]
  1618 -> 531 [style=dashed label="conditional-expression"]
  1618 -> 69 [style=dashed label="conversion-function-id"]
  1618 -> 70 [style=dashed label="cv-qualifier"]
  1618 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1618 -> 415 [style=dashed label="decimal-literal"]
  1618 -> 71 [style=dashed label="decl-specifier"]
  1618 -> 479 [style=dashed label="decl-specifier-seq"]
  1618 -> 77 [style=dashed label="decltype-specifier"]
  1618 -> 79 [style=dashed label="defining-type-specifier"]
  1618 -> 416 [style=dashed label="delete-expression"]
  1618 -> 417 [style=dashed label="digit"]
  1618 -> 418 [style=dashed label="digit-sequence"]
  1618 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1618 -> 81 [style=dashed label="elaborated-type-specifier"]
  1618 -> 419 [style=dashed label="encoding-prefix"]
  1618 -> 83 [style=dashed label="enum-head"]
  1618 -> 268 [style=dashed label="enum-key"]
  1618 -> 85 [style=dashed label="enum-name"]
  1618 -> 86 [style=dashed label="enum-specifier"]
  1618 -> 420 [style=dashed label="equality-expression"]
  1618 -> 421 [style=dashed label="exclusive-or-expression"]
  1618 -> 269 [style=dashed label="explicit-specifier"]
  1618 -> 762 [style=dashed label="expression"]
  1618 -> 422 [style=dashed label="floating-point-literal"]
  1618 -> 423 [style=dashed label="fold-expression"]
  1618 -> 424 [style=dashed label="fractional-constant"]
  1618 -> 92 [style=dashed label="function-specifier"]
  1618 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1618 -> 426 [style=dashed label="hexadecimal-literal"]
  1618 -> 427 [style=dashed label="hexadecimal-prefix"]
  1618 -> 428 [style=dashed label="id-expression"]
  1618 -> 429 [style=dashed label="inclusive-or-expression"]
  1618 -> 430 [style=dashed label="integer-literal"]
  1618 -> 431 [style=dashed label="lambda-expression"]
  1618 -> 432 [style=dashed label="lambda-introducer"]
  1618 -> 433 [style=dashed label="literal"]
  1618 -> 96 [style=dashed label="literal-operator-id"]
  1618 -> 434 [style=dashed label="logical-and-expression"]
  1618 -> 533 [style=dashed label="logical-or-expression"]
  1618 -> 436 [style=dashed label="multiplicative-expression"]
  1618 -> 100 [style=dashed label="namespace-alias"]
  1618 -> 103 [style=dashed label="namespace-name"]
  1618 -> 437 [style=dashed label="nested-name-specifier"]
  1618 -> 438 [style=dashed label="new-expression"]
  1618 -> 439 [style=dashed label="noexcept-expression"]
  1618 -> 440 [style=dashed label="nonzero-digit"]
  1618 -> 441 [style=dashed label="octal-literal"]
  1618 -> 109 [style=dashed label="operator-function-id"]
  1618 -> 735 [style=dashed label="parameter-declaration"]
  1618 -> 1294 [style=dashed label="parameter-declaration-clause"]
  1618 -> 737 [style=dashed label="parameter-declaration-list"]
  1618 -> 110 [style=dashed label="placeholder-type-specifier"]
  1618 -> 442 [style=dashed label="pm-expression"]
  1618 -> 443 [style=dashed label="pointer-literal"]
  1618 -> 444 [style=dashed label="postfix-expression"]
  1618 -> 445 [style=dashed label="primary-expression"]
  1618 -> 113 [style=dashed label="qualified-id"]
  1618 -> 446 [style=dashed label="relational-expression"]
  1618 -> 447 [style=dashed label="requires-expression"]
  1618 -> 448 [style=dashed label="shift-expression"]
  1618 -> 115 [style=dashed label="simple-template-id"]
  1618 -> 449 [style=dashed label="simple-type-specifier"]
  1618 -> 118 [style=dashed label="storage-class-specifier"]
  1618 -> 450 [style=dashed label="string-literal"]
  1618 -> 121 [style=dashed label="template-id"]
  1618 -> 216 [style=dashed label="template-name"]
  1618 -> 535 [style=dashed label="throw-expression"]
  1618 -> 124 [style=dashed label="type-constraint"]
  1618 -> 763 [style=dashed label="type-id"]
  1618 -> 125 [style=dashed label="type-name"]
  1618 -> 1805 [style=dashed label="type-specifier"]
  1618 -> 452 [style=dashed label="type-specifier-seq"]
  1618 -> 127 [style=dashed label="typedef-name"]
  1618 -> 453 [style=dashed label="typename-specifier"]
  1618 -> 454 [style=dashed label="unary-expression"]
  1618 -> 455 [style=dashed label="unary-operator"]
  1618 -> 130 [style=dashed label="unqualified-id"]
  1618 -> 456 [style=dashed label="user-defined-character-literal"]
  1618 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1618 -> 458 [style=dashed label="user-defined-integer-literal"]
  1618 -> 459 [style=dashed label="user-defined-literal"]
  1618 -> 460 [style=dashed label="user-defined-string-literal"]
  1618 -> 537 [style=dashed label="yield-expression"]
  1619 [label="State 1619\n\l668 nested-requirement: \"requires\" constraint-expression • ';'\l"]
  1619 -> 1806 [style=solid label="';'"]
  1620 [label="State 1620\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l1116 type-requirement: \"typename\" nested-name-specifier • type-name ';'\l1126 typename-specifier: \"typename\" nested-name-specifier • IDENTIFIER\l1127                   | \"typename\" nested-name-specifier • simple-template-id\l1128                   | \"typename\" nested-name-specifier • \"template\" simple-template-id\l"]
  1620 -> 1807 [style=solid label="IDENTIFIER"]
  1620 -> 577 [style=solid label="\"template\""]
  1620 -> 66 [style=dashed label="class-name"]
  1620 -> 85 [style=dashed label="enum-name"]
  1620 -> 1808 [style=dashed label="simple-template-id"]
  1620 -> 143 [style=dashed label="template-name"]
  1620 -> 1809 [style=dashed label="type-name"]
  1620 -> 127 [style=dashed label="typedef-name"]
  1621 [label="State 1621\n\l660 nested-name-specifier: type-name • \"::\"\l1115 type-requirement: \"typename\" type-name • ';'\l"]
  1621 -> 1810 [style=solid label="';'"]
  1621 -> 346 [style=solid label="\"::\""]
  1622 [label="State 1622\n\l996 simple-requirement: expression ';' •\l"]
  1622 -> "1622R996" [style=solid]
 "1622R996" [label="R996", fillcolor=3, shape=diamond, style=filled]
  1623 [label="State 1623\n\l939 requirement-body: '{' requirement-seq '}' •\l"]
  1623 -> "1623R939" [style=solid]
 "1623R939" [label="R939", fillcolor=3, shape=diamond, style=filled]
  1624 [label="State 1624\n\l942 requirement-seq: requirement-seq requirement •\l"]
  1624 -> "1624R942" [style=solid]
 "1624R942" [label="R942", fillcolor=3, shape=diamond, style=filled]
  1625 [label="State 1625\n\l691 new-placement: '(' expression-list ')' •\l"]
  1625 -> "1625R691" [style=solid]
 "1625R691" [label="R691", fillcolor=3, shape=diamond, style=filled]
  1626 [label="State 1626\n\l681 new-expression: \"new\" '(' type-id ')' •\l685               | \"new\" '(' type-id ')' • new-initializer\l"]
  1626 -> 1310 [style=solid label="'('"]
  1626 -> 939 [style=solid label="'{'"]
  1626 -> 1311 [style=dashed label="braced-init-list"]
  1626 -> 1811 [style=dashed label="new-initializer"]
  1626 -> "1626R681d" [label="['{']", style=solid]
 "1626R681d" [label="R681", fillcolor=5, shape=diamond, style=filled]
  1626 -> "1626R681" [style=solid]
 "1626R681" [label="R681", fillcolor=3, shape=diamond, style=filled]
  1627 [label="State 1627\n\l683 new-expression: \"new\" new-placement '(' type-id • ')'\l687               | \"new\" new-placement '(' type-id • ')' new-initializer\l"]
  1627 -> 1812 [style=solid label="')'"]
  1628 [label="State 1628\n\l679 new-expression: \"new\" new-placement new-type-id new-initializer •\l"]
  1628 -> "1628R679" [style=solid]
 "1628R679" [label="R679", fillcolor=3, shape=diamond, style=filled]
  1629 [label="State 1629\n\l688 new-initializer: '(' ')' •\l"]
  1629 -> "1629R688" [style=solid]
 "1629R688" [label="R688", fillcolor=3, shape=diamond, style=filled]
  1630 [label="State 1630\n\l689 new-initializer: '(' expression-list • ')'\l"]
  1630 -> 1813 [style=solid label="')'"]
  1631 [label="State 1631\n\l733 noptr-new-declarator: '[' ']' •\l735                     | '[' ']' • attribute-specifier-seq\l"]
  1631 -> 4 [style=solid label="\"alignas\""]
  1631 -> 10 [style=solid label="'['"]
  1631 -> 58 [style=dashed label="alignment-specifier"]
  1631 -> 61 [style=dashed label="attribute-specifier"]
  1631 -> 1814 [style=dashed label="attribute-specifier-seq"]
  1631 -> "1631R733d" [label="['[']", style=solid]
 "1631R733d" [label="R733", fillcolor=5, shape=diamond, style=filled]
  1631 -> "1631R733" [style=solid]
 "1631R733" [label="R733", fillcolor=3, shape=diamond, style=filled]
  1632 [label="State 1632\n\l338 expression: expression • ',' assignment-expression\l734 noptr-new-declarator: '[' expression • ']'\l736                     | '[' expression • ']' attribute-specifier-seq\l"]
  1632 -> 1037 [style=solid label="','"]
  1632 -> 1815 [style=solid label="']'"]
  1633 [label="State 1633\n\l737 noptr-new-declarator: noptr-new-declarator '[' • constant-expression ']'\l738                     | noptr-new-declarator '[' • constant-expression ']' attribute-specifier-seq\l"]
  1633 -> 1 [style=solid label="IDENTIFIER"]
  1633 -> 361 [style=solid label="'+'"]
  1633 -> 362 [style=solid label="'-'"]
  1633 -> 363 [style=solid label="'('"]
  1633 -> 364 [style=solid label="'&'"]
  1633 -> 365 [style=solid label="\"::\""]
  1633 -> 366 [style=solid label="'['"]
  1633 -> 367 [style=solid label="\"co_await\""]
  1633 -> 368 [style=solid label="'0'"]
  1633 -> 369 [style=solid label="'1'"]
  1633 -> 370 [style=solid label="\"0b\""]
  1633 -> 371 [style=solid label="\"0B\""]
  1633 -> 372 [style=solid label="'\\''"]
  1633 -> 373 [style=solid label="\"false\""]
  1633 -> 374 [style=solid label="\"true\""]
  1633 -> 375 [style=solid label="\"noexcept\""]
  1633 -> 17 [style=solid label="\"operator\""]
  1633 -> 26 [style=solid label="\"decltype\""]
  1633 -> 376 [style=solid label="\"delete\""]
  1633 -> 377 [style=solid label="'.'"]
  1633 -> 378 [style=solid label="'2'"]
  1633 -> 379 [style=solid label="'3'"]
  1633 -> 380 [style=solid label="'4'"]
  1633 -> 381 [style=solid label="'5'"]
  1633 -> 382 [style=solid label="'6'"]
  1633 -> 383 [style=solid label="'7'"]
  1633 -> 384 [style=solid label="'8'"]
  1633 -> 385 [style=solid label="'9'"]
  1633 -> 185 [style=solid label="\"u8\""]
  1633 -> 186 [style=solid label="'u'"]
  1633 -> 187 [style=solid label="'U'"]
  1633 -> 188 [style=solid label="'L'"]
  1633 -> 386 [style=solid label="'*'"]
  1633 -> 203 [style=solid label="'\"'"]
  1633 -> 387 [style=solid label="\"0x\""]
  1633 -> 388 [style=solid label="\"0X\""]
  1633 -> 389 [style=solid label="\"requires\""]
  1633 -> 390 [style=solid label="\"new\""]
  1633 -> 391 [style=solid label="'~'"]
  1633 -> 392 [style=solid label="'!'"]
  1633 -> 393 [style=solid label="\"++\""]
  1633 -> 394 [style=solid label="\"--\""]
  1633 -> 395 [style=solid label="\"this\""]
  1633 -> 37 [style=solid label="\"auto\""]
  1633 -> 396 [style=solid label="\"nullptr\""]
  1633 -> 397 [style=solid label="\"dynamic_cast\""]
  1633 -> 398 [style=solid label="\"static_cast\""]
  1633 -> 399 [style=solid label="\"reinterpret_cast\""]
  1633 -> 400 [style=solid label="\"const_cast\""]
  1633 -> 401 [style=solid label="\"typeid\""]
  1633 -> 38 [style=solid label="\"char\""]
  1633 -> 39 [style=solid label="\"char8_t\""]
  1633 -> 40 [style=solid label="\"char16_t\""]
  1633 -> 41 [style=solid label="\"char32_t\""]
  1633 -> 42 [style=solid label="\"wchar_t\""]
  1633 -> 43 [style=solid label="\"bool\""]
  1633 -> 44 [style=solid label="\"short\""]
  1633 -> 45 [style=solid label="\"int\""]
  1633 -> 46 [style=solid label="\"long\""]
  1633 -> 47 [style=solid label="\"signed\""]
  1633 -> 48 [style=solid label="\"unsigned\""]
  1633 -> 49 [style=solid label="\"float\""]
  1633 -> 50 [style=solid label="\"double\""]
  1633 -> 51 [style=solid label="\"void\""]
  1633 -> 209 [style=solid label="'R'"]
  1633 -> 56 [style=solid label="\"typename\""]
  1633 -> 402 [style=solid label="\"sizeof\""]
  1633 -> 403 [style=solid label="\"alignof\""]
  1633 -> 404 [style=dashed label="additive-expression"]
  1633 -> 405 [style=dashed label="and-expression"]
  1633 -> 406 [style=dashed label="await-expression"]
  1633 -> 407 [style=dashed label="binary-literal"]
  1633 -> 408 [style=dashed label="boolean-literal"]
  1633 -> 409 [style=dashed label="cast-expression"]
  1633 -> 410 [style=dashed label="character-literal"]
  1633 -> 66 [style=dashed label="class-name"]
  1633 -> 411 [style=dashed label="compare-expression"]
  1633 -> 68 [style=dashed label="concept-name"]
  1633 -> 412 [style=dashed label="conditional-expression"]
  1633 -> 1816 [style=dashed label="constant-expression"]
  1633 -> 69 [style=dashed label="conversion-function-id"]
  1633 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1633 -> 415 [style=dashed label="decimal-literal"]
  1633 -> 77 [style=dashed label="decltype-specifier"]
  1633 -> 416 [style=dashed label="delete-expression"]
  1633 -> 417 [style=dashed label="digit"]
  1633 -> 418 [style=dashed label="digit-sequence"]
  1633 -> 419 [style=dashed label="encoding-prefix"]
  1633 -> 85 [style=dashed label="enum-name"]
  1633 -> 420 [style=dashed label="equality-expression"]
  1633 -> 421 [style=dashed label="exclusive-or-expression"]
  1633 -> 422 [style=dashed label="floating-point-literal"]
  1633 -> 423 [style=dashed label="fold-expression"]
  1633 -> 424 [style=dashed label="fractional-constant"]
  1633 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1633 -> 426 [style=dashed label="hexadecimal-literal"]
  1633 -> 427 [style=dashed label="hexadecimal-prefix"]
  1633 -> 428 [style=dashed label="id-expression"]
  1633 -> 429 [style=dashed label="inclusive-or-expression"]
  1633 -> 430 [style=dashed label="integer-literal"]
  1633 -> 431 [style=dashed label="lambda-expression"]
  1633 -> 432 [style=dashed label="lambda-introducer"]
  1633 -> 433 [style=dashed label="literal"]
  1633 -> 96 [style=dashed label="literal-operator-id"]
  1633 -> 434 [style=dashed label="logical-and-expression"]
  1633 -> 435 [style=dashed label="logical-or-expression"]
  1633 -> 436 [style=dashed label="multiplicative-expression"]
  1633 -> 100 [style=dashed label="namespace-alias"]
  1633 -> 103 [style=dashed label="namespace-name"]
  1633 -> 437 [style=dashed label="nested-name-specifier"]
  1633 -> 438 [style=dashed label="new-expression"]
  1633 -> 439 [style=dashed label="noexcept-expression"]
  1633 -> 440 [style=dashed label="nonzero-digit"]
  1633 -> 441 [style=dashed label="octal-literal"]
  1633 -> 109 [style=dashed label="operator-function-id"]
  1633 -> 110 [style=dashed label="placeholder-type-specifier"]
  1633 -> 442 [style=dashed label="pm-expression"]
  1633 -> 443 [style=dashed label="pointer-literal"]
  1633 -> 444 [style=dashed label="postfix-expression"]
  1633 -> 445 [style=dashed label="primary-expression"]
  1633 -> 113 [style=dashed label="qualified-id"]
  1633 -> 446 [style=dashed label="relational-expression"]
  1633 -> 447 [style=dashed label="requires-expression"]
  1633 -> 448 [style=dashed label="shift-expression"]
  1633 -> 115 [style=dashed label="simple-template-id"]
  1633 -> 534 [style=dashed label="simple-type-specifier"]
  1633 -> 450 [style=dashed label="string-literal"]
  1633 -> 121 [style=dashed label="template-id"]
  1633 -> 216 [style=dashed label="template-name"]
  1633 -> 124 [style=dashed label="type-constraint"]
  1633 -> 125 [style=dashed label="type-name"]
  1633 -> 127 [style=dashed label="typedef-name"]
  1633 -> 536 [style=dashed label="typename-specifier"]
  1633 -> 454 [style=dashed label="unary-expression"]
  1633 -> 455 [style=dashed label="unary-operator"]
  1633 -> 130 [style=dashed label="unqualified-id"]
  1633 -> 456 [style=dashed label="user-defined-character-literal"]
  1633 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1633 -> 458 [style=dashed label="user-defined-integer-literal"]
  1633 -> 459 [style=dashed label="user-defined-literal"]
  1633 -> 460 [style=dashed label="user-defined-string-literal"]
  1634 [label="State 1634\n\l670 new-declarator: ptr-operator new-declarator •\l"]
  1634 -> "1634R670" [style=solid]
 "1634R670" [label="R670", fillcolor=3, shape=diamond, style=filled]
  1635 [label="State 1635\n\l877 postfix-expression: \"dynamic_cast\" '<' type-id '>' • '(' expression ')'\l"]
  1635 -> 1817 [style=solid label="'('"]
  1636 [label="State 1636\n\l878 postfix-expression: \"static_cast\" '<' type-id '>' • '(' expression ')'\l"]
  1636 -> 1818 [style=solid label="'('"]
  1637 [label="State 1637\n\l879 postfix-expression: \"reinterpret_cast\" '<' type-id '>' • '(' expression ')'\l"]
  1637 -> 1819 [style=solid label="'('"]
  1638 [label="State 1638\n\l880 postfix-expression: \"const_cast\" '<' type-id '>' • '(' expression ')'\l"]
  1638 -> 1820 [style=solid label="'('"]
  1639 [label="State 1639\n\l881 postfix-expression: \"typeid\" '(' expression ')' •\l"]
  1639 -> "1639R881" [style=solid]
 "1639R881" [label="R881", fillcolor=3, shape=diamond, style=filled]
  1640 [label="State 1640\n\l882 postfix-expression: \"typeid\" '(' type-id ')' •\l"]
  1640 -> "1640R882" [style=solid]
 "1640R882" [label="R882", fillcolor=3, shape=diamond, style=filled]
  1641 [label="State 1641\n\l1136 unary-expression: \"sizeof\" '(' type-id ')' •\l"]
  1641 -> "1641R1136" [style=solid]
 "1641R1136" [label="R1136", fillcolor=3, shape=diamond, style=filled]
  1642 [label="State 1642\n\l1137 unary-expression: \"sizeof\" \"...\" '(' IDENTIFIER • ')'\l"]
  1642 -> 1821 [style=solid label="')'"]
  1643 [label="State 1643\n\l1138 unary-expression: \"alignof\" '(' type-id ')' •\l"]
  1643 -> "1643R1138" [style=solid]
 "1643R1138" [label="R1138", fillcolor=3, shape=diamond, style=filled]
  1644 [label="State 1644\n\l263 digit-sequence: digit-sequence • digit\l264               | digit-sequence • '\\'' digit\l328 exponent-part: 'e' sign digit-sequence •\l"]
  1644 -> 793 [style=solid label="'0'"]
  1644 -> 794 [style=solid label="'1'"]
  1644 -> 851 [style=solid label="'\\''"]
  1644 -> 795 [style=solid label="'2'"]
  1644 -> 796 [style=solid label="'3'"]
  1644 -> 797 [style=solid label="'4'"]
  1644 -> 798 [style=solid label="'5'"]
  1644 -> 799 [style=solid label="'6'"]
  1644 -> 800 [style=solid label="'7'"]
  1644 -> 801 [style=solid label="'8'"]
  1644 -> 802 [style=solid label="'9'"]
  1644 -> 855 [style=dashed label="digit"]
  1644 -> "1644R328" [style=solid]
 "1644R328" [label="R328", fillcolor=3, shape=diamond, style=filled]
  1645 [label="State 1645\n\l263 digit-sequence: digit-sequence • digit\l264               | digit-sequence • '\\'' digit\l330 exponent-part: 'E' sign digit-sequence •\l"]
  1645 -> 793 [style=solid label="'0'"]
  1645 -> 794 [style=solid label="'1'"]
  1645 -> 851 [style=solid label="'\\''"]
  1645 -> 795 [style=solid label="'2'"]
  1645 -> 796 [style=solid label="'3'"]
  1645 -> 797 [style=solid label="'4'"]
  1645 -> 798 [style=solid label="'5'"]
  1645 -> 799 [style=solid label="'6'"]
  1645 -> 800 [style=solid label="'7'"]
  1645 -> 801 [style=solid label="'8'"]
  1645 -> 802 [style=solid label="'9'"]
  1645 -> 855 [style=dashed label="digit"]
  1645 -> "1645R330" [style=solid]
 "1645R330" [label="R330", fillcolor=3, shape=diamond, style=filled]
  1646 [label="State 1646\n\l126 character-literal: encoding-prefix '\\'' c-char-sequence '\\'' •\l"]
  1646 -> "1646R126" [style=solid]
 "1646R126" [label="R126", fillcolor=3, shape=diamond, style=filled]
  1647 [label="State 1647\n\l 87 binary-exponent-part: 'p' digit-sequence •\l263 digit-sequence: digit-sequence • digit\l264               | digit-sequence • '\\'' digit\l"]
  1647 -> 793 [style=solid label="'0'"]
  1647 -> 794 [style=solid label="'1'"]
  1647 -> 851 [style=solid label="'\\''"]
  1647 -> 795 [style=solid label="'2'"]
  1647 -> 796 [style=solid label="'3'"]
  1647 -> 797 [style=solid label="'4'"]
  1647 -> 798 [style=solid label="'5'"]
  1647 -> 799 [style=solid label="'6'"]
  1647 -> 800 [style=solid label="'7'"]
  1647 -> 801 [style=solid label="'8'"]
  1647 -> 802 [style=solid label="'9'"]
  1647 -> 855 [style=dashed label="digit"]
  1647 -> "1647R87" [style=solid]
 "1647R87" [label="R87", fillcolor=3, shape=diamond, style=filled]
  1648 [label="State 1648\n\l 88 binary-exponent-part: 'p' sign • digit-sequence\l"]
  1648 -> 793 [style=solid label="'0'"]
  1648 -> 794 [style=solid label="'1'"]
  1648 -> 795 [style=solid label="'2'"]
  1648 -> 796 [style=solid label="'3'"]
  1648 -> 797 [style=solid label="'4'"]
  1648 -> 798 [style=solid label="'5'"]
  1648 -> 799 [style=solid label="'6'"]
  1648 -> 800 [style=solid label="'7'"]
  1648 -> 801 [style=solid label="'8'"]
  1648 -> 802 [style=solid label="'9'"]
  1648 -> 417 [style=dashed label="digit"]
  1648 -> 1822 [style=dashed label="digit-sequence"]
  1649 [label="State 1649\n\l 89 binary-exponent-part: 'P' digit-sequence •\l263 digit-sequence: digit-sequence • digit\l264               | digit-sequence • '\\'' digit\l"]
  1649 -> 793 [style=solid label="'0'"]
  1649 -> 794 [style=solid label="'1'"]
  1649 -> 851 [style=solid label="'\\''"]
  1649 -> 795 [style=solid label="'2'"]
  1649 -> 796 [style=solid label="'3'"]
  1649 -> 797 [style=solid label="'4'"]
  1649 -> 798 [style=solid label="'5'"]
  1649 -> 799 [style=solid label="'6'"]
  1649 -> 800 [style=solid label="'7'"]
  1649 -> 801 [style=solid label="'8'"]
  1649 -> 802 [style=solid label="'9'"]
  1649 -> 855 [style=dashed label="digit"]
  1649 -> "1649R89" [style=solid]
 "1649R89" [label="R89", fillcolor=3, shape=diamond, style=filled]
  1650 [label="State 1650\n\l 90 binary-exponent-part: 'P' sign • digit-sequence\l"]
  1650 -> 793 [style=solid label="'0'"]
  1650 -> 794 [style=solid label="'1'"]
  1650 -> 795 [style=solid label="'2'"]
  1650 -> 796 [style=solid label="'3'"]
  1650 -> 797 [style=solid label="'4'"]
  1650 -> 798 [style=solid label="'5'"]
  1650 -> 799 [style=solid label="'6'"]
  1650 -> 800 [style=solid label="'7'"]
  1650 -> 801 [style=solid label="'8'"]
  1650 -> 802 [style=solid label="'9'"]
  1650 -> 417 [style=dashed label="digit"]
  1650 -> 1823 [style=dashed label="digit-sequence"]
  1651 [label="State 1651\n\l450 hexadecimal-digit-sequence: hexadecimal-digit-sequence '\\'' hexadecimal-digit •\l"]
  1651 -> "1651R450" [style=solid]
 "1651R450" [label="R450", fillcolor=3, shape=diamond, style=filled]
  1652 [label="State 1652\n\l449 hexadecimal-digit-sequence: hexadecimal-digit-sequence • hexadecimal-digit\l450                           | hexadecimal-digit-sequence • '\\'' hexadecimal-digit\l457 hexadecimal-fractional-constant: hexadecimal-digit-sequence '.' hexadecimal-digit-sequence •\l"]
  1652 -> 870 [style=solid label="'0'"]
  1652 -> 871 [style=solid label="'1'"]
  1652 -> 1358 [style=solid label="'\\''"]
  1652 -> 873 [style=solid label="'2'"]
  1652 -> 874 [style=solid label="'3'"]
  1652 -> 875 [style=solid label="'4'"]
  1652 -> 876 [style=solid label="'5'"]
  1652 -> 877 [style=solid label="'6'"]
  1652 -> 878 [style=solid label="'7'"]
  1652 -> 879 [style=solid label="'8'"]
  1652 -> 880 [style=solid label="'9'"]
  1652 -> 881 [style=solid label="'e'"]
  1652 -> 882 [style=solid label="'E'"]
  1652 -> 883 [style=solid label="'f'"]
  1652 -> 884 [style=solid label="'F'"]
  1652 -> 885 [style=solid label="'a'"]
  1652 -> 886 [style=solid label="'b'"]
  1652 -> 887 [style=solid label="'c'"]
  1652 -> 888 [style=solid label="'d'"]
  1652 -> 889 [style=solid label="'A'"]
  1652 -> 890 [style=solid label="'B'"]
  1652 -> 891 [style=solid label="'C'"]
  1652 -> 892 [style=solid label="'D'"]
  1652 -> 1361 [style=dashed label="hexadecimal-digit"]
  1652 -> "1652R457" [style=solid]
 "1652R457" [label="R457", fillcolor=3, shape=diamond, style=filled]
  1653 [label="State 1653\n\l456 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part floating-point-suffix •\l"]
  1653 -> "1653R456" [style=solid]
 "1653R456" [label="R456", fillcolor=3, shape=diamond, style=filled]
  1654 [label="State 1654\n\l1168 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part ud-suffix •\l"]
  1654 -> "1654R1168" [style=solid]
 "1654R1168" [label="R1168", fillcolor=3, shape=diamond, style=filled]
  1655 [label="State 1655\n\l454 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part floating-point-suffix •\l"]
  1655 -> "1655R454" [style=solid]
 "1655R454" [label="R454", fillcolor=3, shape=diamond, style=filled]
  1656 [label="State 1656\n\l1167 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part ud-suffix •\l"]
  1656 -> "1656R1167" [style=solid]
 "1656R1167" [label="R1167", fillcolor=3, shape=diamond, style=filled]
  1657 [label="State 1657\n\l533 lambda-declarator: '(' parameter-declaration-clause ')' • lambda-specifiers\l534                  | '(' parameter-declaration-clause ')' • lambda-specifiers requires-clause\l"]
  1657 -> 161 [style=solid label="IDENTIFIER"]
  1657 -> 4 [style=solid label="\"alignas\""]
  1657 -> 9 [style=solid label="\"::\""]
  1657 -> 10 [style=solid label="'['"]
  1657 -> 11 [style=solid label="\"virtual\""]
  1657 -> 12 [style=solid label="\"class\""]
  1657 -> 13 [style=solid label="\"struct\""]
  1657 -> 14 [style=solid label="\"union\""]
  1657 -> 898 [style=solid label="\"noexcept\""]
  1657 -> 18 [style=solid label="\"const\""]
  1657 -> 19 [style=solid label="\"volatile\""]
  1657 -> 20 [style=solid label="\"friend\""]
  1657 -> 21 [style=solid label="\"typedef\""]
  1657 -> 22 [style=solid label="\"constexpr\""]
  1657 -> 23 [style=solid label="\"consteval\""]
  1657 -> 24 [style=solid label="\"constinit\""]
  1657 -> 263 [style=solid label="\"inline\""]
  1657 -> 26 [style=solid label="\"decltype\""]
  1657 -> 740 [style=solid label="\"->\""]
  1657 -> 27 [style=solid label="\"enum\""]
  1657 -> 264 [style=solid label="\"extern\""]
  1657 -> 29 [style=solid label="\"explicit\""]
  1657 -> 37 [style=solid label="\"auto\""]
  1657 -> 38 [style=solid label="\"char\""]
  1657 -> 39 [style=solid label="\"char8_t\""]
  1657 -> 40 [style=solid label="\"char16_t\""]
  1657 -> 41 [style=solid label="\"char32_t\""]
  1657 -> 42 [style=solid label="\"wchar_t\""]
  1657 -> 43 [style=solid label="\"bool\""]
  1657 -> 44 [style=solid label="\"short\""]
  1657 -> 45 [style=solid label="\"int\""]
  1657 -> 46 [style=solid label="\"long\""]
  1657 -> 47 [style=solid label="\"signed\""]
  1657 -> 48 [style=solid label="\"unsigned\""]
  1657 -> 49 [style=solid label="\"float\""]
  1657 -> 50 [style=solid label="\"double\""]
  1657 -> 51 [style=solid label="\"void\""]
  1657 -> 53 [style=solid label="\"static\""]
  1657 -> 54 [style=solid label="\"thread_local\""]
  1657 -> 55 [style=solid label="\"mutable\""]
  1657 -> 56 [style=solid label="\"typename\""]
  1657 -> 58 [style=dashed label="alignment-specifier"]
  1657 -> 61 [style=dashed label="attribute-specifier"]
  1657 -> 900 [style=dashed label="attribute-specifier-seq"]
  1657 -> 64 [style=dashed label="class-head"]
  1657 -> 65 [style=dashed label="class-key"]
  1657 -> 66 [style=dashed label="class-name"]
  1657 -> 67 [style=dashed label="class-specifier"]
  1657 -> 68 [style=dashed label="concept-name"]
  1657 -> 70 [style=dashed label="cv-qualifier"]
  1657 -> 71 [style=dashed label="decl-specifier"]
  1657 -> 901 [style=dashed label="decl-specifier-seq"]
  1657 -> 77 [style=dashed label="decltype-specifier"]
  1657 -> 79 [style=dashed label="defining-type-specifier"]
  1657 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1657 -> 81 [style=dashed label="elaborated-type-specifier"]
  1657 -> 83 [style=dashed label="enum-head"]
  1657 -> 268 [style=dashed label="enum-key"]
  1657 -> 85 [style=dashed label="enum-name"]
  1657 -> 86 [style=dashed label="enum-specifier"]
  1657 -> 269 [style=dashed label="explicit-specifier"]
  1657 -> 92 [style=dashed label="function-specifier"]
  1657 -> 1824 [style=dashed label="lambda-specifiers"]
  1657 -> 100 [style=dashed label="namespace-alias"]
  1657 -> 103 [style=dashed label="namespace-name"]
  1657 -> 213 [style=dashed label="nested-name-specifier"]
  1657 -> 904 [style=dashed label="noexcept-specifier"]
  1657 -> 110 [style=dashed label="placeholder-type-specifier"]
  1657 -> 142 [style=dashed label="simple-template-id"]
  1657 -> 116 [style=dashed label="simple-type-specifier"]
  1657 -> 118 [style=dashed label="storage-class-specifier"]
  1657 -> 216 [style=dashed label="template-name"]
  1657 -> 905 [style=dashed label="trailing-return-type"]
  1657 -> 124 [style=dashed label="type-constraint"]
  1657 -> 125 [style=dashed label="type-name"]
  1657 -> 126 [style=dashed label="type-specifier"]
  1657 -> 127 [style=dashed label="typedef-name"]
  1657 -> 128 [style=dashed label="typename-specifier"]
  1658 [label="State 1658\n\l697 noexcept-specifier: \"noexcept\" '(' constant-expression • ')'\l"]
  1658 -> 1825 [style=solid label="')'"]
  1659 [label="State 1659\n\l536 lambda-expression: lambda-introducer '<' template-parameter-list '>' • lambda-declarator compound-statement\l537                  | lambda-introducer '<' template-parameter-list '>' • requires-clause lambda-declarator compound-statement\l"]
  1659 -> 161 [style=solid label="IDENTIFIER"]
  1659 -> 4 [style=solid label="\"alignas\""]
  1659 -> 897 [style=solid label="'('"]
  1659 -> 9 [style=solid label="\"::\""]
  1659 -> 10 [style=solid label="'['"]
  1659 -> 11 [style=solid label="\"virtual\""]
  1659 -> 12 [style=solid label="\"class\""]
  1659 -> 13 [style=solid label="\"struct\""]
  1659 -> 14 [style=solid label="\"union\""]
  1659 -> 898 [style=solid label="\"noexcept\""]
  1659 -> 18 [style=solid label="\"const\""]
  1659 -> 19 [style=solid label="\"volatile\""]
  1659 -> 20 [style=solid label="\"friend\""]
  1659 -> 21 [style=solid label="\"typedef\""]
  1659 -> 22 [style=solid label="\"constexpr\""]
  1659 -> 23 [style=solid label="\"consteval\""]
  1659 -> 24 [style=solid label="\"constinit\""]
  1659 -> 263 [style=solid label="\"inline\""]
  1659 -> 26 [style=solid label="\"decltype\""]
  1659 -> 740 [style=solid label="\"->\""]
  1659 -> 27 [style=solid label="\"enum\""]
  1659 -> 264 [style=solid label="\"extern\""]
  1659 -> 29 [style=solid label="\"explicit\""]
  1659 -> 297 [style=solid label="\"requires\""]
  1659 -> 37 [style=solid label="\"auto\""]
  1659 -> 38 [style=solid label="\"char\""]
  1659 -> 39 [style=solid label="\"char8_t\""]
  1659 -> 40 [style=solid label="\"char16_t\""]
  1659 -> 41 [style=solid label="\"char32_t\""]
  1659 -> 42 [style=solid label="\"wchar_t\""]
  1659 -> 43 [style=solid label="\"bool\""]
  1659 -> 44 [style=solid label="\"short\""]
  1659 -> 45 [style=solid label="\"int\""]
  1659 -> 46 [style=solid label="\"long\""]
  1659 -> 47 [style=solid label="\"signed\""]
  1659 -> 48 [style=solid label="\"unsigned\""]
  1659 -> 49 [style=solid label="\"float\""]
  1659 -> 50 [style=solid label="\"double\""]
  1659 -> 51 [style=solid label="\"void\""]
  1659 -> 53 [style=solid label="\"static\""]
  1659 -> 54 [style=solid label="\"thread_local\""]
  1659 -> 55 [style=solid label="\"mutable\""]
  1659 -> 56 [style=solid label="\"typename\""]
  1659 -> 58 [style=dashed label="alignment-specifier"]
  1659 -> 61 [style=dashed label="attribute-specifier"]
  1659 -> 900 [style=dashed label="attribute-specifier-seq"]
  1659 -> 64 [style=dashed label="class-head"]
  1659 -> 65 [style=dashed label="class-key"]
  1659 -> 66 [style=dashed label="class-name"]
  1659 -> 67 [style=dashed label="class-specifier"]
  1659 -> 68 [style=dashed label="concept-name"]
  1659 -> 70 [style=dashed label="cv-qualifier"]
  1659 -> 71 [style=dashed label="decl-specifier"]
  1659 -> 901 [style=dashed label="decl-specifier-seq"]
  1659 -> 77 [style=dashed label="decltype-specifier"]
  1659 -> 79 [style=dashed label="defining-type-specifier"]
  1659 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1659 -> 81 [style=dashed label="elaborated-type-specifier"]
  1659 -> 83 [style=dashed label="enum-head"]
  1659 -> 268 [style=dashed label="enum-key"]
  1659 -> 85 [style=dashed label="enum-name"]
  1659 -> 86 [style=dashed label="enum-specifier"]
  1659 -> 269 [style=dashed label="explicit-specifier"]
  1659 -> 92 [style=dashed label="function-specifier"]
  1659 -> 1826 [style=dashed label="lambda-declarator"]
  1659 -> 903 [style=dashed label="lambda-specifiers"]
  1659 -> 100 [style=dashed label="namespace-alias"]
  1659 -> 103 [style=dashed label="namespace-name"]
  1659 -> 213 [style=dashed label="nested-name-specifier"]
  1659 -> 904 [style=dashed label="noexcept-specifier"]
  1659 -> 110 [style=dashed label="placeholder-type-specifier"]
  1659 -> 1827 [style=dashed label="requires-clause"]
  1659 -> 142 [style=dashed label="simple-template-id"]
  1659 -> 116 [style=dashed label="simple-type-specifier"]
  1659 -> 118 [style=dashed label="storage-class-specifier"]
  1659 -> 216 [style=dashed label="template-name"]
  1659 -> 905 [style=dashed label="trailing-return-type"]
  1659 -> 124 [style=dashed label="type-constraint"]
  1659 -> 125 [style=dashed label="type-name"]
  1659 -> 126 [style=dashed label="type-specifier"]
  1659 -> 127 [style=dashed label="typedef-name"]
  1659 -> 128 [style=dashed label="typename-specifier"]
  1660 [label="State 1660\n\l551 lambda-specifiers: decl-specifier-seq attribute-specifier-seq trailing-return-type •\l"]
  1660 -> "1660R551" [style=solid]
 "1660R551" [label="R551", fillcolor=3, shape=diamond, style=filled]
  1661 [label="State 1661\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l545 lambda-specifiers: decl-specifier-seq noexcept-specifier attribute-specifier-seq •\l553                  | decl-specifier-seq noexcept-specifier attribute-specifier-seq • trailing-return-type\l"]
  1661 -> 4 [style=solid label="\"alignas\""]
  1661 -> 10 [style=solid label="'['"]
  1661 -> 740 [style=solid label="\"->\""]
  1661 -> 58 [style=dashed label="alignment-specifier"]
  1661 -> 265 [style=dashed label="attribute-specifier"]
  1661 -> 1828 [style=dashed label="trailing-return-type"]
  1661 -> "1661R545" [style=solid]
 "1661R545" [label="R545", fillcolor=3, shape=diamond, style=filled]
  1662 [label="State 1662\n\l549 lambda-specifiers: decl-specifier-seq noexcept-specifier trailing-return-type •\l"]
  1662 -> "1662R549" [style=solid]
 "1662R549" [label="R549", fillcolor=3, shape=diamond, style=filled]
  1663 [label="State 1663\n\l554 lambda-specifiers: noexcept-specifier attribute-specifier-seq trailing-return-type •\l"]
  1663 -> "1663R554" [style=solid]
 "1663R554" [label="R554", fillcolor=3, shape=diamond, style=filled]
  1664 [label="State 1664\n\l170 conditional-expression: logical-or-expression '?' expression ':' • assignment-expression\l"]
  1664 -> 1 [style=solid label="IDENTIFIER"]
  1664 -> 361 [style=solid label="'+'"]
  1664 -> 362 [style=solid label="'-'"]
  1664 -> 363 [style=solid label="'('"]
  1664 -> 364 [style=solid label="'&'"]
  1664 -> 365 [style=solid label="\"::\""]
  1664 -> 366 [style=solid label="'['"]
  1664 -> 367 [style=solid label="\"co_await\""]
  1664 -> 368 [style=solid label="'0'"]
  1664 -> 369 [style=solid label="'1'"]
  1664 -> 370 [style=solid label="\"0b\""]
  1664 -> 371 [style=solid label="\"0B\""]
  1664 -> 372 [style=solid label="'\\''"]
  1664 -> 373 [style=solid label="\"false\""]
  1664 -> 374 [style=solid label="\"true\""]
  1664 -> 375 [style=solid label="\"noexcept\""]
  1664 -> 17 [style=solid label="\"operator\""]
  1664 -> 26 [style=solid label="\"decltype\""]
  1664 -> 376 [style=solid label="\"delete\""]
  1664 -> 377 [style=solid label="'.'"]
  1664 -> 378 [style=solid label="'2'"]
  1664 -> 379 [style=solid label="'3'"]
  1664 -> 380 [style=solid label="'4'"]
  1664 -> 381 [style=solid label="'5'"]
  1664 -> 382 [style=solid label="'6'"]
  1664 -> 383 [style=solid label="'7'"]
  1664 -> 384 [style=solid label="'8'"]
  1664 -> 385 [style=solid label="'9'"]
  1664 -> 185 [style=solid label="\"u8\""]
  1664 -> 186 [style=solid label="'u'"]
  1664 -> 187 [style=solid label="'U'"]
  1664 -> 188 [style=solid label="'L'"]
  1664 -> 386 [style=solid label="'*'"]
  1664 -> 203 [style=solid label="'\"'"]
  1664 -> 387 [style=solid label="\"0x\""]
  1664 -> 388 [style=solid label="\"0X\""]
  1664 -> 389 [style=solid label="\"requires\""]
  1664 -> 390 [style=solid label="\"new\""]
  1664 -> 391 [style=solid label="'~'"]
  1664 -> 392 [style=solid label="'!'"]
  1664 -> 393 [style=solid label="\"++\""]
  1664 -> 394 [style=solid label="\"--\""]
  1664 -> 395 [style=solid label="\"this\""]
  1664 -> 37 [style=solid label="\"auto\""]
  1664 -> 396 [style=solid label="\"nullptr\""]
  1664 -> 397 [style=solid label="\"dynamic_cast\""]
  1664 -> 398 [style=solid label="\"static_cast\""]
  1664 -> 399 [style=solid label="\"reinterpret_cast\""]
  1664 -> 400 [style=solid label="\"const_cast\""]
  1664 -> 401 [style=solid label="\"typeid\""]
  1664 -> 38 [style=solid label="\"char\""]
  1664 -> 39 [style=solid label="\"char8_t\""]
  1664 -> 40 [style=solid label="\"char16_t\""]
  1664 -> 41 [style=solid label="\"char32_t\""]
  1664 -> 42 [style=solid label="\"wchar_t\""]
  1664 -> 43 [style=solid label="\"bool\""]
  1664 -> 44 [style=solid label="\"short\""]
  1664 -> 45 [style=solid label="\"int\""]
  1664 -> 46 [style=solid label="\"long\""]
  1664 -> 47 [style=solid label="\"signed\""]
  1664 -> 48 [style=solid label="\"unsigned\""]
  1664 -> 49 [style=solid label="\"float\""]
  1664 -> 50 [style=solid label="\"double\""]
  1664 -> 51 [style=solid label="\"void\""]
  1664 -> 209 [style=solid label="'R'"]
  1664 -> 528 [style=solid label="\"throw\""]
  1664 -> 56 [style=solid label="\"typename\""]
  1664 -> 402 [style=solid label="\"sizeof\""]
  1664 -> 403 [style=solid label="\"alignof\""]
  1664 -> 529 [style=solid label="\"co_yield\""]
  1664 -> 404 [style=dashed label="additive-expression"]
  1664 -> 405 [style=dashed label="and-expression"]
  1664 -> 1829 [style=dashed label="assignment-expression"]
  1664 -> 406 [style=dashed label="await-expression"]
  1664 -> 407 [style=dashed label="binary-literal"]
  1664 -> 408 [style=dashed label="boolean-literal"]
  1664 -> 409 [style=dashed label="cast-expression"]
  1664 -> 410 [style=dashed label="character-literal"]
  1664 -> 66 [style=dashed label="class-name"]
  1664 -> 411 [style=dashed label="compare-expression"]
  1664 -> 68 [style=dashed label="concept-name"]
  1664 -> 531 [style=dashed label="conditional-expression"]
  1664 -> 69 [style=dashed label="conversion-function-id"]
  1664 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1664 -> 415 [style=dashed label="decimal-literal"]
  1664 -> 77 [style=dashed label="decltype-specifier"]
  1664 -> 416 [style=dashed label="delete-expression"]
  1664 -> 417 [style=dashed label="digit"]
  1664 -> 418 [style=dashed label="digit-sequence"]
  1664 -> 419 [style=dashed label="encoding-prefix"]
  1664 -> 85 [style=dashed label="enum-name"]
  1664 -> 420 [style=dashed label="equality-expression"]
  1664 -> 421 [style=dashed label="exclusive-or-expression"]
  1664 -> 422 [style=dashed label="floating-point-literal"]
  1664 -> 423 [style=dashed label="fold-expression"]
  1664 -> 424 [style=dashed label="fractional-constant"]
  1664 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1664 -> 426 [style=dashed label="hexadecimal-literal"]
  1664 -> 427 [style=dashed label="hexadecimal-prefix"]
  1664 -> 428 [style=dashed label="id-expression"]
  1664 -> 429 [style=dashed label="inclusive-or-expression"]
  1664 -> 430 [style=dashed label="integer-literal"]
  1664 -> 431 [style=dashed label="lambda-expression"]
  1664 -> 432 [style=dashed label="lambda-introducer"]
  1664 -> 433 [style=dashed label="literal"]
  1664 -> 96 [style=dashed label="literal-operator-id"]
  1664 -> 434 [style=dashed label="logical-and-expression"]
  1664 -> 533 [style=dashed label="logical-or-expression"]
  1664 -> 436 [style=dashed label="multiplicative-expression"]
  1664 -> 100 [style=dashed label="namespace-alias"]
  1664 -> 103 [style=dashed label="namespace-name"]
  1664 -> 437 [style=dashed label="nested-name-specifier"]
  1664 -> 438 [style=dashed label="new-expression"]
  1664 -> 439 [style=dashed label="noexcept-expression"]
  1664 -> 440 [style=dashed label="nonzero-digit"]
  1664 -> 441 [style=dashed label="octal-literal"]
  1664 -> 109 [style=dashed label="operator-function-id"]
  1664 -> 110 [style=dashed label="placeholder-type-specifier"]
  1664 -> 442 [style=dashed label="pm-expression"]
  1664 -> 443 [style=dashed label="pointer-literal"]
  1664 -> 444 [style=dashed label="postfix-expression"]
  1664 -> 445 [style=dashed label="primary-expression"]
  1664 -> 113 [style=dashed label="qualified-id"]
  1664 -> 446 [style=dashed label="relational-expression"]
  1664 -> 447 [style=dashed label="requires-expression"]
  1664 -> 448 [style=dashed label="shift-expression"]
  1664 -> 115 [style=dashed label="simple-template-id"]
  1664 -> 534 [style=dashed label="simple-type-specifier"]
  1664 -> 450 [style=dashed label="string-literal"]
  1664 -> 121 [style=dashed label="template-id"]
  1664 -> 216 [style=dashed label="template-name"]
  1664 -> 535 [style=dashed label="throw-expression"]
  1664 -> 124 [style=dashed label="type-constraint"]
  1664 -> 125 [style=dashed label="type-name"]
  1664 -> 127 [style=dashed label="typedef-name"]
  1664 -> 536 [style=dashed label="typename-specifier"]
  1664 -> 454 [style=dashed label="unary-expression"]
  1664 -> 455 [style=dashed label="unary-operator"]
  1664 -> 130 [style=dashed label="unqualified-id"]
  1664 -> 456 [style=dashed label="user-defined-character-literal"]
  1664 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1664 -> 458 [style=dashed label="user-defined-integer-literal"]
  1664 -> 459 [style=dashed label="user-defined-literal"]
  1664 -> 460 [style=dashed label="user-defined-string-literal"]
  1664 -> 537 [style=dashed label="yield-expression"]
  1665 [label="State 1665\n\l864 postfix-expression: postfix-expression '(' expression-list ')' •\l"]
  1665 -> "1665R864" [style=solid]
 "1665R864" [label="R864", fillcolor=3, shape=diamond, style=filled]
  1666 [label="State 1666\n\l862 postfix-expression: postfix-expression '[' expression-list ']' •\l"]
  1666 -> "1666R862" [style=solid]
 "1666R862" [label="R862", fillcolor=3, shape=diamond, style=filled]
  1667 [label="State 1667\n\l874 postfix-expression: postfix-expression \"->\" \"template\" id-expression •\l"]
  1667 -> "1667R874" [style=solid]
 "1667R874" [label="R874", fillcolor=3, shape=diamond, style=filled]
  1668 [label="State 1668\n\l872 postfix-expression: postfix-expression '.' \"template\" id-expression •\l"]
  1668 -> "1668R872" [style=solid]
 "1668R872" [label="R872", fillcolor=3, shape=diamond, style=filled]
  1669 [label="State 1669\n\l866 postfix-expression: simple-type-specifier '(' expression-list ')' •\l"]
  1669 -> "1669R866" [style=solid]
 "1669R866" [label="R866", fillcolor=3, shape=diamond, style=filled]
  1670 [label="State 1670\n\l 50 attribute-specifier: '[' '[' • attribute-list ']' ']'\l 51                    | '[' '[' • attribute-using-prefix attribute-list ']' ']'\l538 lambda-introducer: '[' • ']'\l539                  | '[' • lambda-capture ']'\l"]
  1670 -> 1830 [style=solid label="IDENTIFIER"]
  1670 -> 466 [style=solid label="\"using\""]
  1670 -> 767 [style=solid label="'='"]
  1670 -> 768 [style=solid label="\"...\""]
  1670 -> 769 [style=solid label="'&'"]
  1670 -> 770 [style=solid label="']'"]
  1670 -> 771 [style=solid label="'*'"]
  1670 -> 772 [style=solid label="\"this\""]
  1670 -> 467 [style=dashed label="attribute"]
  1670 -> 468 [style=dashed label="attribute-list"]
  1670 -> 469 [style=dashed label="attribute-namespace"]
  1670 -> 470 [style=dashed label="attribute-scoped-token"]
  1670 -> 471 [style=dashed label="attribute-token"]
  1670 -> 472 [style=dashed label="attribute-using-prefix"]
  1670 -> 773 [style=dashed label="capture"]
  1670 -> 774 [style=dashed label="capture-default"]
  1670 -> 775 [style=dashed label="capture-list"]
  1670 -> 776 [style=dashed label="init-capture"]
  1670 -> 777 [style=dashed label="lambda-capture"]
  1670 -> 778 [style=dashed label="simple-capture"]
  1671 [label="State 1671\n\l708 noptr-abstract-declarator: noptr-abstract-declarator parameters-and-qualifiers •\l"]
  1671 -> "1671R708" [style=solid]
 "1671R708" [label="R708", fillcolor=3, shape=diamond, style=filled]
  1672 [label="State 1672\n\l718 noptr-abstract-declarator: '(' ptr-abstract-declarator ')' •\l"]
  1672 -> "1672R718" [style=solid]
 "1672R718" [label="R718", fillcolor=3, shape=diamond, style=filled]
  1673 [label="State 1673\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l715 noptr-abstract-declarator: '[' ']' attribute-specifier-seq •\l"]
  1673 -> 4 [style=solid label="\"alignas\""]
  1673 -> 10 [style=solid label="'['"]
  1673 -> 58 [style=dashed label="alignment-specifier"]
  1673 -> 265 [style=dashed label="attribute-specifier"]
  1673 -> "1673R715d" [label="['[']", style=solid]
 "1673R715d" [label="R715", fillcolor=5, shape=diamond, style=filled]
  1673 -> "1673R715" [style=solid]
 "1673R715" [label="R715", fillcolor=3, shape=diamond, style=filled]
  1674 [label="State 1674\n\l713 noptr-abstract-declarator: '[' constant-expression ']' •\l717                          | '[' constant-expression ']' • attribute-specifier-seq\l"]
  1674 -> 4 [style=solid label="\"alignas\""]
  1674 -> 10 [style=solid label="'['"]
  1674 -> 58 [style=dashed label="alignment-specifier"]
  1674 -> 61 [style=dashed label="attribute-specifier"]
  1674 -> 1831 [style=dashed label="attribute-specifier-seq"]
  1674 -> "1674R713d" [label="['[']", style=solid]
 "1674R713d" [label="R713", fillcolor=5, shape=diamond, style=filled]
  1674 -> "1674R713" [style=solid]
 "1674R713" [label="R713", fillcolor=3, shape=diamond, style=filled]
  1675 [label="State 1675\n\l710 noptr-abstract-declarator: noptr-abstract-declarator '[' ']' •\l714                          | noptr-abstract-declarator '[' ']' • attribute-specifier-seq\l"]
  1675 -> 4 [style=solid label="\"alignas\""]
  1675 -> 10 [style=solid label="'['"]
  1675 -> 58 [style=dashed label="alignment-specifier"]
  1675 -> 61 [style=dashed label="attribute-specifier"]
  1675 -> 1832 [style=dashed label="attribute-specifier-seq"]
  1675 -> "1675R710d" [label="['[']", style=solid]
 "1675R710d" [label="R710", fillcolor=5, shape=diamond, style=filled]
  1675 -> "1675R710" [style=solid]
 "1675R710" [label="R710", fillcolor=3, shape=diamond, style=filled]
  1676 [label="State 1676\n\l712 noptr-abstract-declarator: noptr-abstract-declarator '[' constant-expression • ']'\l716                          | noptr-abstract-declarator '[' constant-expression • ']' attribute-specifier-seq\l"]
  1676 -> 1833 [style=solid label="']'"]
  1677 [label="State 1677\n\l  2 abstract-declarator: noptr-abstract-declarator parameters-and-qualifiers trailing-return-type •\l"]
  1677 -> "1677R2" [style=solid]
 "1677R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  1678 [label="State 1678\n\l720 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator '[' ']' •\l722                               | noptr-abstract-pack-declarator '[' ']' • attribute-specifier-seq\l"]
  1678 -> 4 [style=solid label="\"alignas\""]
  1678 -> 10 [style=solid label="'['"]
  1678 -> 58 [style=dashed label="alignment-specifier"]
  1678 -> 61 [style=dashed label="attribute-specifier"]
  1678 -> 1834 [style=dashed label="attribute-specifier-seq"]
  1678 -> "1678R720d" [label="['[']", style=solid]
 "1678R720d" [label="R720", fillcolor=5, shape=diamond, style=filled]
  1678 -> "1678R720" [style=solid]
 "1678R720" [label="R720", fillcolor=3, shape=diamond, style=filled]
  1679 [label="State 1679\n\l721 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator '[' constant-expression • ']'\l723                               | noptr-abstract-pack-declarator '[' constant-expression • ']' attribute-specifier-seq\l"]
  1679 -> 1835 [style=solid label="']'"]
  1680 [label="State 1680\n\l868 postfix-expression: typename-specifier '(' expression-list ')' •\l"]
  1680 -> "1680R868" [style=solid]
 "1680R868" [label="R868", fillcolor=3, shape=diamond, style=filled]
  1681 [label="State 1681\n\l 47 attribute-list: attribute-list ',' attribute \"...\" •\l"]
  1681 -> "1681R47" [style=solid]
 "1681R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  1682 [label="State 1682\n\l 59 balanced-token: '(' ')' •\l"]
  1682 -> "1682R59" [style=solid]
 "1682R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  1683 [label="State 1683\n\l 60 balanced-token: '(' balanced-token-seq • ')'\l 67 balanced-token-seq: balanced-token-seq • balanced-token\l"]
  1683 -> 1423 [style=solid label="ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE"]
  1683 -> 1424 [style=solid label="'('"]
  1683 -> 1836 [style=solid label="')'"]
  1683 -> 1426 [style=solid label="'['"]
  1683 -> 1427 [style=solid label="'{'"]
  1683 -> 1689 [style=dashed label="balanced-token"]
  1684 [label="State 1684\n\l 61 balanced-token: '[' ']' •\l"]
  1684 -> "1684R61" [style=solid]
 "1684R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  1685 [label="State 1685\n\l 62 balanced-token: '[' balanced-token-seq • ']'\l 67 balanced-token-seq: balanced-token-seq • balanced-token\l"]
  1685 -> 1423 [style=solid label="ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE"]
  1685 -> 1424 [style=solid label="'('"]
  1685 -> 1426 [style=solid label="'['"]
  1685 -> 1837 [style=solid label="']'"]
  1685 -> 1427 [style=solid label="'{'"]
  1685 -> 1689 [style=dashed label="balanced-token"]
  1686 [label="State 1686\n\l 63 balanced-token: '{' '}' •\l"]
  1686 -> "1686R63" [style=solid]
 "1686R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  1687 [label="State 1687\n\l 64 balanced-token: '{' balanced-token-seq • '}'\l 67 balanced-token-seq: balanced-token-seq • balanced-token\l"]
  1687 -> 1423 [style=solid label="ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE"]
  1687 -> 1424 [style=solid label="'('"]
  1687 -> 1426 [style=solid label="'['"]
  1687 -> 1427 [style=solid label="'{'"]
  1687 -> 1838 [style=solid label="'}'"]
  1687 -> 1689 [style=dashed label="balanced-token"]
  1688 [label="State 1688\n\l 41 attribute-argument-clause: '(' balanced-token-seq ')' •\l"]
  1688 -> "1688R41" [style=solid]
 "1688R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  1689 [label="State 1689\n\l 67 balanced-token-seq: balanced-token-seq balanced-token •\l"]
  1689 -> "1689R67" [style=solid]
 "1689R67" [label="R67", fillcolor=3, shape=diamond, style=filled]
  1690 [label="State 1690\n\l 51 attribute-specifier: '[' '[' attribute-using-prefix attribute-list ']' ']' •\l"]
  1690 -> "1690R51" [style=solid]
 "1690R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  1691 [label="State 1691\n\l825 parameter-declaration: \"this\" decl-specifier-seq '=' initializer-clause •\l"]
  1691 -> "1691R825" [style=solid]
 "1691R825" [label="R825", fillcolor=3, shape=diamond, style=filled]
  1692 [label="State 1692\n\l829 parameter-declaration: \"this\" decl-specifier-seq abstract-declarator '=' • initializer-clause\l"]
  1692 -> 1 [style=solid label="IDENTIFIER"]
  1692 -> 361 [style=solid label="'+'"]
  1692 -> 362 [style=solid label="'-'"]
  1692 -> 363 [style=solid label="'('"]
  1692 -> 364 [style=solid label="'&'"]
  1692 -> 365 [style=solid label="\"::\""]
  1692 -> 366 [style=solid label="'['"]
  1692 -> 367 [style=solid label="\"co_await\""]
  1692 -> 939 [style=solid label="'{'"]
  1692 -> 368 [style=solid label="'0'"]
  1692 -> 369 [style=solid label="'1'"]
  1692 -> 370 [style=solid label="\"0b\""]
  1692 -> 371 [style=solid label="\"0B\""]
  1692 -> 372 [style=solid label="'\\''"]
  1692 -> 373 [style=solid label="\"false\""]
  1692 -> 374 [style=solid label="\"true\""]
  1692 -> 375 [style=solid label="\"noexcept\""]
  1692 -> 17 [style=solid label="\"operator\""]
  1692 -> 26 [style=solid label="\"decltype\""]
  1692 -> 376 [style=solid label="\"delete\""]
  1692 -> 377 [style=solid label="'.'"]
  1692 -> 378 [style=solid label="'2'"]
  1692 -> 379 [style=solid label="'3'"]
  1692 -> 380 [style=solid label="'4'"]
  1692 -> 381 [style=solid label="'5'"]
  1692 -> 382 [style=solid label="'6'"]
  1692 -> 383 [style=solid label="'7'"]
  1692 -> 384 [style=solid label="'8'"]
  1692 -> 385 [style=solid label="'9'"]
  1692 -> 185 [style=solid label="\"u8\""]
  1692 -> 186 [style=solid label="'u'"]
  1692 -> 187 [style=solid label="'U'"]
  1692 -> 188 [style=solid label="'L'"]
  1692 -> 386 [style=solid label="'*'"]
  1692 -> 203 [style=solid label="'\"'"]
  1692 -> 387 [style=solid label="\"0x\""]
  1692 -> 388 [style=solid label="\"0X\""]
  1692 -> 389 [style=solid label="\"requires\""]
  1692 -> 390 [style=solid label="\"new\""]
  1692 -> 391 [style=solid label="'~'"]
  1692 -> 392 [style=solid label="'!'"]
  1692 -> 393 [style=solid label="\"++\""]
  1692 -> 394 [style=solid label="\"--\""]
  1692 -> 395 [style=solid label="\"this\""]
  1692 -> 37 [style=solid label="\"auto\""]
  1692 -> 396 [style=solid label="\"nullptr\""]
  1692 -> 397 [style=solid label="\"dynamic_cast\""]
  1692 -> 398 [style=solid label="\"static_cast\""]
  1692 -> 399 [style=solid label="\"reinterpret_cast\""]
  1692 -> 400 [style=solid label="\"const_cast\""]
  1692 -> 401 [style=solid label="\"typeid\""]
  1692 -> 38 [style=solid label="\"char\""]
  1692 -> 39 [style=solid label="\"char8_t\""]
  1692 -> 40 [style=solid label="\"char16_t\""]
  1692 -> 41 [style=solid label="\"char32_t\""]
  1692 -> 42 [style=solid label="\"wchar_t\""]
  1692 -> 43 [style=solid label="\"bool\""]
  1692 -> 44 [style=solid label="\"short\""]
  1692 -> 45 [style=solid label="\"int\""]
  1692 -> 46 [style=solid label="\"long\""]
  1692 -> 47 [style=solid label="\"signed\""]
  1692 -> 48 [style=solid label="\"unsigned\""]
  1692 -> 49 [style=solid label="\"float\""]
  1692 -> 50 [style=solid label="\"double\""]
  1692 -> 51 [style=solid label="\"void\""]
  1692 -> 209 [style=solid label="'R'"]
  1692 -> 528 [style=solid label="\"throw\""]
  1692 -> 56 [style=solid label="\"typename\""]
  1692 -> 402 [style=solid label="\"sizeof\""]
  1692 -> 403 [style=solid label="\"alignof\""]
  1692 -> 529 [style=solid label="\"co_yield\""]
  1692 -> 404 [style=dashed label="additive-expression"]
  1692 -> 405 [style=dashed label="and-expression"]
  1692 -> 1141 [style=dashed label="assignment-expression"]
  1692 -> 406 [style=dashed label="await-expression"]
  1692 -> 407 [style=dashed label="binary-literal"]
  1692 -> 408 [style=dashed label="boolean-literal"]
  1692 -> 1142 [style=dashed label="braced-init-list"]
  1692 -> 409 [style=dashed label="cast-expression"]
  1692 -> 410 [style=dashed label="character-literal"]
  1692 -> 66 [style=dashed label="class-name"]
  1692 -> 411 [style=dashed label="compare-expression"]
  1692 -> 68 [style=dashed label="concept-name"]
  1692 -> 531 [style=dashed label="conditional-expression"]
  1692 -> 69 [style=dashed label="conversion-function-id"]
  1692 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1692 -> 415 [style=dashed label="decimal-literal"]
  1692 -> 77 [style=dashed label="decltype-specifier"]
  1692 -> 416 [style=dashed label="delete-expression"]
  1692 -> 417 [style=dashed label="digit"]
  1692 -> 418 [style=dashed label="digit-sequence"]
  1692 -> 419 [style=dashed label="encoding-prefix"]
  1692 -> 85 [style=dashed label="enum-name"]
  1692 -> 420 [style=dashed label="equality-expression"]
  1692 -> 421 [style=dashed label="exclusive-or-expression"]
  1692 -> 422 [style=dashed label="floating-point-literal"]
  1692 -> 423 [style=dashed label="fold-expression"]
  1692 -> 424 [style=dashed label="fractional-constant"]
  1692 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1692 -> 426 [style=dashed label="hexadecimal-literal"]
  1692 -> 427 [style=dashed label="hexadecimal-prefix"]
  1692 -> 428 [style=dashed label="id-expression"]
  1692 -> 429 [style=dashed label="inclusive-or-expression"]
  1692 -> 1839 [style=dashed label="initializer-clause"]
  1692 -> 430 [style=dashed label="integer-literal"]
  1692 -> 431 [style=dashed label="lambda-expression"]
  1692 -> 432 [style=dashed label="lambda-introducer"]
  1692 -> 433 [style=dashed label="literal"]
  1692 -> 96 [style=dashed label="literal-operator-id"]
  1692 -> 434 [style=dashed label="logical-and-expression"]
  1692 -> 533 [style=dashed label="logical-or-expression"]
  1692 -> 436 [style=dashed label="multiplicative-expression"]
  1692 -> 100 [style=dashed label="namespace-alias"]
  1692 -> 103 [style=dashed label="namespace-name"]
  1692 -> 437 [style=dashed label="nested-name-specifier"]
  1692 -> 438 [style=dashed label="new-expression"]
  1692 -> 439 [style=dashed label="noexcept-expression"]
  1692 -> 440 [style=dashed label="nonzero-digit"]
  1692 -> 441 [style=dashed label="octal-literal"]
  1692 -> 109 [style=dashed label="operator-function-id"]
  1692 -> 110 [style=dashed label="placeholder-type-specifier"]
  1692 -> 442 [style=dashed label="pm-expression"]
  1692 -> 443 [style=dashed label="pointer-literal"]
  1692 -> 444 [style=dashed label="postfix-expression"]
  1692 -> 445 [style=dashed label="primary-expression"]
  1692 -> 113 [style=dashed label="qualified-id"]
  1692 -> 446 [style=dashed label="relational-expression"]
  1692 -> 447 [style=dashed label="requires-expression"]
  1692 -> 448 [style=dashed label="shift-expression"]
  1692 -> 115 [style=dashed label="simple-template-id"]
  1692 -> 534 [style=dashed label="simple-type-specifier"]
  1692 -> 450 [style=dashed label="string-literal"]
  1692 -> 121 [style=dashed label="template-id"]
  1692 -> 216 [style=dashed label="template-name"]
  1692 -> 535 [style=dashed label="throw-expression"]
  1692 -> 124 [style=dashed label="type-constraint"]
  1692 -> 125 [style=dashed label="type-name"]
  1692 -> 127 [style=dashed label="typedef-name"]
  1692 -> 536 [style=dashed label="typename-specifier"]
  1692 -> 454 [style=dashed label="unary-expression"]
  1692 -> 455 [style=dashed label="unary-operator"]
  1692 -> 130 [style=dashed label="unqualified-id"]
  1692 -> 456 [style=dashed label="user-defined-character-literal"]
  1692 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1692 -> 458 [style=dashed label="user-defined-integer-literal"]
  1692 -> 459 [style=dashed label="user-defined-literal"]
  1692 -> 460 [style=dashed label="user-defined-string-literal"]
  1692 -> 537 [style=dashed label="yield-expression"]
  1693 [label="State 1693\n\l813 parameter-declaration: \"this\" decl-specifier-seq declarator '=' • initializer-clause\l"]
  1693 -> 1 [style=solid label="IDENTIFIER"]
  1693 -> 361 [style=solid label="'+'"]
  1693 -> 362 [style=solid label="'-'"]
  1693 -> 363 [style=solid label="'('"]
  1693 -> 364 [style=solid label="'&'"]
  1693 -> 365 [style=solid label="\"::\""]
  1693 -> 366 [style=solid label="'['"]
  1693 -> 367 [style=solid label="\"co_await\""]
  1693 -> 939 [style=solid label="'{'"]
  1693 -> 368 [style=solid label="'0'"]
  1693 -> 369 [style=solid label="'1'"]
  1693 -> 370 [style=solid label="\"0b\""]
  1693 -> 371 [style=solid label="\"0B\""]
  1693 -> 372 [style=solid label="'\\''"]
  1693 -> 373 [style=solid label="\"false\""]
  1693 -> 374 [style=solid label="\"true\""]
  1693 -> 375 [style=solid label="\"noexcept\""]
  1693 -> 17 [style=solid label="\"operator\""]
  1693 -> 26 [style=solid label="\"decltype\""]
  1693 -> 376 [style=solid label="\"delete\""]
  1693 -> 377 [style=solid label="'.'"]
  1693 -> 378 [style=solid label="'2'"]
  1693 -> 379 [style=solid label="'3'"]
  1693 -> 380 [style=solid label="'4'"]
  1693 -> 381 [style=solid label="'5'"]
  1693 -> 382 [style=solid label="'6'"]
  1693 -> 383 [style=solid label="'7'"]
  1693 -> 384 [style=solid label="'8'"]
  1693 -> 385 [style=solid label="'9'"]
  1693 -> 185 [style=solid label="\"u8\""]
  1693 -> 186 [style=solid label="'u'"]
  1693 -> 187 [style=solid label="'U'"]
  1693 -> 188 [style=solid label="'L'"]
  1693 -> 386 [style=solid label="'*'"]
  1693 -> 203 [style=solid label="'\"'"]
  1693 -> 387 [style=solid label="\"0x\""]
  1693 -> 388 [style=solid label="\"0X\""]
  1693 -> 389 [style=solid label="\"requires\""]
  1693 -> 390 [style=solid label="\"new\""]
  1693 -> 391 [style=solid label="'~'"]
  1693 -> 392 [style=solid label="'!'"]
  1693 -> 393 [style=solid label="\"++\""]
  1693 -> 394 [style=solid label="\"--\""]
  1693 -> 395 [style=solid label="\"this\""]
  1693 -> 37 [style=solid label="\"auto\""]
  1693 -> 396 [style=solid label="\"nullptr\""]
  1693 -> 397 [style=solid label="\"dynamic_cast\""]
  1693 -> 398 [style=solid label="\"static_cast\""]
  1693 -> 399 [style=solid label="\"reinterpret_cast\""]
  1693 -> 400 [style=solid label="\"const_cast\""]
  1693 -> 401 [style=solid label="\"typeid\""]
  1693 -> 38 [style=solid label="\"char\""]
  1693 -> 39 [style=solid label="\"char8_t\""]
  1693 -> 40 [style=solid label="\"char16_t\""]
  1693 -> 41 [style=solid label="\"char32_t\""]
  1693 -> 42 [style=solid label="\"wchar_t\""]
  1693 -> 43 [style=solid label="\"bool\""]
  1693 -> 44 [style=solid label="\"short\""]
  1693 -> 45 [style=solid label="\"int\""]
  1693 -> 46 [style=solid label="\"long\""]
  1693 -> 47 [style=solid label="\"signed\""]
  1693 -> 48 [style=solid label="\"unsigned\""]
  1693 -> 49 [style=solid label="\"float\""]
  1693 -> 50 [style=solid label="\"double\""]
  1693 -> 51 [style=solid label="\"void\""]
  1693 -> 209 [style=solid label="'R'"]
  1693 -> 528 [style=solid label="\"throw\""]
  1693 -> 56 [style=solid label="\"typename\""]
  1693 -> 402 [style=solid label="\"sizeof\""]
  1693 -> 403 [style=solid label="\"alignof\""]
  1693 -> 529 [style=solid label="\"co_yield\""]
  1693 -> 404 [style=dashed label="additive-expression"]
  1693 -> 405 [style=dashed label="and-expression"]
  1693 -> 1141 [style=dashed label="assignment-expression"]
  1693 -> 406 [style=dashed label="await-expression"]
  1693 -> 407 [style=dashed label="binary-literal"]
  1693 -> 408 [style=dashed label="boolean-literal"]
  1693 -> 1142 [style=dashed label="braced-init-list"]
  1693 -> 409 [style=dashed label="cast-expression"]
  1693 -> 410 [style=dashed label="character-literal"]
  1693 -> 66 [style=dashed label="class-name"]
  1693 -> 411 [style=dashed label="compare-expression"]
  1693 -> 68 [style=dashed label="concept-name"]
  1693 -> 531 [style=dashed label="conditional-expression"]
  1693 -> 69 [style=dashed label="conversion-function-id"]
  1693 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1693 -> 415 [style=dashed label="decimal-literal"]
  1693 -> 77 [style=dashed label="decltype-specifier"]
  1693 -> 416 [style=dashed label="delete-expression"]
  1693 -> 417 [style=dashed label="digit"]
  1693 -> 418 [style=dashed label="digit-sequence"]
  1693 -> 419 [style=dashed label="encoding-prefix"]
  1693 -> 85 [style=dashed label="enum-name"]
  1693 -> 420 [style=dashed label="equality-expression"]
  1693 -> 421 [style=dashed label="exclusive-or-expression"]
  1693 -> 422 [style=dashed label="floating-point-literal"]
  1693 -> 423 [style=dashed label="fold-expression"]
  1693 -> 424 [style=dashed label="fractional-constant"]
  1693 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1693 -> 426 [style=dashed label="hexadecimal-literal"]
  1693 -> 427 [style=dashed label="hexadecimal-prefix"]
  1693 -> 428 [style=dashed label="id-expression"]
  1693 -> 429 [style=dashed label="inclusive-or-expression"]
  1693 -> 1840 [style=dashed label="initializer-clause"]
  1693 -> 430 [style=dashed label="integer-literal"]
  1693 -> 431 [style=dashed label="lambda-expression"]
  1693 -> 432 [style=dashed label="lambda-introducer"]
  1693 -> 433 [style=dashed label="literal"]
  1693 -> 96 [style=dashed label="literal-operator-id"]
  1693 -> 434 [style=dashed label="logical-and-expression"]
  1693 -> 533 [style=dashed label="logical-or-expression"]
  1693 -> 436 [style=dashed label="multiplicative-expression"]
  1693 -> 100 [style=dashed label="namespace-alias"]
  1693 -> 103 [style=dashed label="namespace-name"]
  1693 -> 437 [style=dashed label="nested-name-specifier"]
  1693 -> 438 [style=dashed label="new-expression"]
  1693 -> 439 [style=dashed label="noexcept-expression"]
  1693 -> 440 [style=dashed label="nonzero-digit"]
  1693 -> 441 [style=dashed label="octal-literal"]
  1693 -> 109 [style=dashed label="operator-function-id"]
  1693 -> 110 [style=dashed label="placeholder-type-specifier"]
  1693 -> 442 [style=dashed label="pm-expression"]
  1693 -> 443 [style=dashed label="pointer-literal"]
  1693 -> 444 [style=dashed label="postfix-expression"]
  1693 -> 445 [style=dashed label="primary-expression"]
  1693 -> 113 [style=dashed label="qualified-id"]
  1693 -> 446 [style=dashed label="relational-expression"]
  1693 -> 447 [style=dashed label="requires-expression"]
  1693 -> 448 [style=dashed label="shift-expression"]
  1693 -> 115 [style=dashed label="simple-template-id"]
  1693 -> 534 [style=dashed label="simple-type-specifier"]
  1693 -> 450 [style=dashed label="string-literal"]
  1693 -> 121 [style=dashed label="template-id"]
  1693 -> 216 [style=dashed label="template-name"]
  1693 -> 535 [style=dashed label="throw-expression"]
  1693 -> 124 [style=dashed label="type-constraint"]
  1693 -> 125 [style=dashed label="type-name"]
  1693 -> 127 [style=dashed label="typedef-name"]
  1693 -> 536 [style=dashed label="typename-specifier"]
  1693 -> 454 [style=dashed label="unary-expression"]
  1693 -> 455 [style=dashed label="unary-operator"]
  1693 -> 130 [style=dashed label="unqualified-id"]
  1693 -> 456 [style=dashed label="user-defined-character-literal"]
  1693 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1693 -> 458 [style=dashed label="user-defined-integer-literal"]
  1693 -> 459 [style=dashed label="user-defined-literal"]
  1693 -> 460 [style=dashed label="user-defined-string-literal"]
  1693 -> 537 [style=dashed label="yield-expression"]
  1694 [label="State 1694\n\l824 parameter-declaration: attribute-specifier-seq \"this\" decl-specifier-seq '=' • initializer-clause\l"]
  1694 -> 1 [style=solid label="IDENTIFIER"]
  1694 -> 361 [style=solid label="'+'"]
  1694 -> 362 [style=solid label="'-'"]
  1694 -> 363 [style=solid label="'('"]
  1694 -> 364 [style=solid label="'&'"]
  1694 -> 365 [style=solid label="\"::\""]
  1694 -> 366 [style=solid label="'['"]
  1694 -> 367 [style=solid label="\"co_await\""]
  1694 -> 939 [style=solid label="'{'"]
  1694 -> 368 [style=solid label="'0'"]
  1694 -> 369 [style=solid label="'1'"]
  1694 -> 370 [style=solid label="\"0b\""]
  1694 -> 371 [style=solid label="\"0B\""]
  1694 -> 372 [style=solid label="'\\''"]
  1694 -> 373 [style=solid label="\"false\""]
  1694 -> 374 [style=solid label="\"true\""]
  1694 -> 375 [style=solid label="\"noexcept\""]
  1694 -> 17 [style=solid label="\"operator\""]
  1694 -> 26 [style=solid label="\"decltype\""]
  1694 -> 376 [style=solid label="\"delete\""]
  1694 -> 377 [style=solid label="'.'"]
  1694 -> 378 [style=solid label="'2'"]
  1694 -> 379 [style=solid label="'3'"]
  1694 -> 380 [style=solid label="'4'"]
  1694 -> 381 [style=solid label="'5'"]
  1694 -> 382 [style=solid label="'6'"]
  1694 -> 383 [style=solid label="'7'"]
  1694 -> 384 [style=solid label="'8'"]
  1694 -> 385 [style=solid label="'9'"]
  1694 -> 185 [style=solid label="\"u8\""]
  1694 -> 186 [style=solid label="'u'"]
  1694 -> 187 [style=solid label="'U'"]
  1694 -> 188 [style=solid label="'L'"]
  1694 -> 386 [style=solid label="'*'"]
  1694 -> 203 [style=solid label="'\"'"]
  1694 -> 387 [style=solid label="\"0x\""]
  1694 -> 388 [style=solid label="\"0X\""]
  1694 -> 389 [style=solid label="\"requires\""]
  1694 -> 390 [style=solid label="\"new\""]
  1694 -> 391 [style=solid label="'~'"]
  1694 -> 392 [style=solid label="'!'"]
  1694 -> 393 [style=solid label="\"++\""]
  1694 -> 394 [style=solid label="\"--\""]
  1694 -> 395 [style=solid label="\"this\""]
  1694 -> 37 [style=solid label="\"auto\""]
  1694 -> 396 [style=solid label="\"nullptr\""]
  1694 -> 397 [style=solid label="\"dynamic_cast\""]
  1694 -> 398 [style=solid label="\"static_cast\""]
  1694 -> 399 [style=solid label="\"reinterpret_cast\""]
  1694 -> 400 [style=solid label="\"const_cast\""]
  1694 -> 401 [style=solid label="\"typeid\""]
  1694 -> 38 [style=solid label="\"char\""]
  1694 -> 39 [style=solid label="\"char8_t\""]
  1694 -> 40 [style=solid label="\"char16_t\""]
  1694 -> 41 [style=solid label="\"char32_t\""]
  1694 -> 42 [style=solid label="\"wchar_t\""]
  1694 -> 43 [style=solid label="\"bool\""]
  1694 -> 44 [style=solid label="\"short\""]
  1694 -> 45 [style=solid label="\"int\""]
  1694 -> 46 [style=solid label="\"long\""]
  1694 -> 47 [style=solid label="\"signed\""]
  1694 -> 48 [style=solid label="\"unsigned\""]
  1694 -> 49 [style=solid label="\"float\""]
  1694 -> 50 [style=solid label="\"double\""]
  1694 -> 51 [style=solid label="\"void\""]
  1694 -> 209 [style=solid label="'R'"]
  1694 -> 528 [style=solid label="\"throw\""]
  1694 -> 56 [style=solid label="\"typename\""]
  1694 -> 402 [style=solid label="\"sizeof\""]
  1694 -> 403 [style=solid label="\"alignof\""]
  1694 -> 529 [style=solid label="\"co_yield\""]
  1694 -> 404 [style=dashed label="additive-expression"]
  1694 -> 405 [style=dashed label="and-expression"]
  1694 -> 1141 [style=dashed label="assignment-expression"]
  1694 -> 406 [style=dashed label="await-expression"]
  1694 -> 407 [style=dashed label="binary-literal"]
  1694 -> 408 [style=dashed label="boolean-literal"]
  1694 -> 1142 [style=dashed label="braced-init-list"]
  1694 -> 409 [style=dashed label="cast-expression"]
  1694 -> 410 [style=dashed label="character-literal"]
  1694 -> 66 [style=dashed label="class-name"]
  1694 -> 411 [style=dashed label="compare-expression"]
  1694 -> 68 [style=dashed label="concept-name"]
  1694 -> 531 [style=dashed label="conditional-expression"]
  1694 -> 69 [style=dashed label="conversion-function-id"]
  1694 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1694 -> 415 [style=dashed label="decimal-literal"]
  1694 -> 77 [style=dashed label="decltype-specifier"]
  1694 -> 416 [style=dashed label="delete-expression"]
  1694 -> 417 [style=dashed label="digit"]
  1694 -> 418 [style=dashed label="digit-sequence"]
  1694 -> 419 [style=dashed label="encoding-prefix"]
  1694 -> 85 [style=dashed label="enum-name"]
  1694 -> 420 [style=dashed label="equality-expression"]
  1694 -> 421 [style=dashed label="exclusive-or-expression"]
  1694 -> 422 [style=dashed label="floating-point-literal"]
  1694 -> 423 [style=dashed label="fold-expression"]
  1694 -> 424 [style=dashed label="fractional-constant"]
  1694 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1694 -> 426 [style=dashed label="hexadecimal-literal"]
  1694 -> 427 [style=dashed label="hexadecimal-prefix"]
  1694 -> 428 [style=dashed label="id-expression"]
  1694 -> 429 [style=dashed label="inclusive-or-expression"]
  1694 -> 1841 [style=dashed label="initializer-clause"]
  1694 -> 430 [style=dashed label="integer-literal"]
  1694 -> 431 [style=dashed label="lambda-expression"]
  1694 -> 432 [style=dashed label="lambda-introducer"]
  1694 -> 433 [style=dashed label="literal"]
  1694 -> 96 [style=dashed label="literal-operator-id"]
  1694 -> 434 [style=dashed label="logical-and-expression"]
  1694 -> 533 [style=dashed label="logical-or-expression"]
  1694 -> 436 [style=dashed label="multiplicative-expression"]
  1694 -> 100 [style=dashed label="namespace-alias"]
  1694 -> 103 [style=dashed label="namespace-name"]
  1694 -> 437 [style=dashed label="nested-name-specifier"]
  1694 -> 438 [style=dashed label="new-expression"]
  1694 -> 439 [style=dashed label="noexcept-expression"]
  1694 -> 440 [style=dashed label="nonzero-digit"]
  1694 -> 441 [style=dashed label="octal-literal"]
  1694 -> 109 [style=dashed label="operator-function-id"]
  1694 -> 110 [style=dashed label="placeholder-type-specifier"]
  1694 -> 442 [style=dashed label="pm-expression"]
  1694 -> 443 [style=dashed label="pointer-literal"]
  1694 -> 444 [style=dashed label="postfix-expression"]
  1694 -> 445 [style=dashed label="primary-expression"]
  1694 -> 113 [style=dashed label="qualified-id"]
  1694 -> 446 [style=dashed label="relational-expression"]
  1694 -> 447 [style=dashed label="requires-expression"]
  1694 -> 448 [style=dashed label="shift-expression"]
  1694 -> 115 [style=dashed label="simple-template-id"]
  1694 -> 534 [style=dashed label="simple-type-specifier"]
  1694 -> 450 [style=dashed label="string-literal"]
  1694 -> 121 [style=dashed label="template-id"]
  1694 -> 216 [style=dashed label="template-name"]
  1694 -> 535 [style=dashed label="throw-expression"]
  1694 -> 124 [style=dashed label="type-constraint"]
  1694 -> 125 [style=dashed label="type-name"]
  1694 -> 127 [style=dashed label="typedef-name"]
  1694 -> 536 [style=dashed label="typename-specifier"]
  1694 -> 454 [style=dashed label="unary-expression"]
  1694 -> 455 [style=dashed label="unary-operator"]
  1694 -> 130 [style=dashed label="unqualified-id"]
  1694 -> 456 [style=dashed label="user-defined-character-literal"]
  1694 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1694 -> 458 [style=dashed label="user-defined-integer-literal"]
  1694 -> 459 [style=dashed label="user-defined-literal"]
  1694 -> 460 [style=dashed label="user-defined-string-literal"]
  1694 -> 537 [style=dashed label="yield-expression"]
  1695 [label="State 1695\n\l820 parameter-declaration: attribute-specifier-seq \"this\" decl-specifier-seq abstract-declarator •\l828                      | attribute-specifier-seq \"this\" decl-specifier-seq abstract-declarator • '=' initializer-clause\l"]
  1695 -> 1842 [style=solid label="'='"]
  1695 -> "1695R820" [style=solid]
 "1695R820" [label="R820", fillcolor=3, shape=diamond, style=filled]
  1696 [label="State 1696\n\l808 parameter-declaration: attribute-specifier-seq \"this\" decl-specifier-seq declarator •\l812                      | attribute-specifier-seq \"this\" decl-specifier-seq declarator • '=' initializer-clause\l"]
  1696 -> 1843 [style=solid label="'='"]
  1696 -> "1696R808" [style=solid]
 "1696R808" [label="R808", fillcolor=3, shape=diamond, style=filled]
  1697 [label="State 1697\n\l822 parameter-declaration: attribute-specifier-seq decl-specifier-seq '=' initializer-clause •\l"]
  1697 -> "1697R822" [style=solid]
 "1697R822" [label="R822", fillcolor=3, shape=diamond, style=filled]
  1698 [label="State 1698\n\l826 parameter-declaration: attribute-specifier-seq decl-specifier-seq abstract-declarator '=' • initializer-clause\l"]
  1698 -> 1 [style=solid label="IDENTIFIER"]
  1698 -> 361 [style=solid label="'+'"]
  1698 -> 362 [style=solid label="'-'"]
  1698 -> 363 [style=solid label="'('"]
  1698 -> 364 [style=solid label="'&'"]
  1698 -> 365 [style=solid label="\"::\""]
  1698 -> 366 [style=solid label="'['"]
  1698 -> 367 [style=solid label="\"co_await\""]
  1698 -> 939 [style=solid label="'{'"]
  1698 -> 368 [style=solid label="'0'"]
  1698 -> 369 [style=solid label="'1'"]
  1698 -> 370 [style=solid label="\"0b\""]
  1698 -> 371 [style=solid label="\"0B\""]
  1698 -> 372 [style=solid label="'\\''"]
  1698 -> 373 [style=solid label="\"false\""]
  1698 -> 374 [style=solid label="\"true\""]
  1698 -> 375 [style=solid label="\"noexcept\""]
  1698 -> 17 [style=solid label="\"operator\""]
  1698 -> 26 [style=solid label="\"decltype\""]
  1698 -> 376 [style=solid label="\"delete\""]
  1698 -> 377 [style=solid label="'.'"]
  1698 -> 378 [style=solid label="'2'"]
  1698 -> 379 [style=solid label="'3'"]
  1698 -> 380 [style=solid label="'4'"]
  1698 -> 381 [style=solid label="'5'"]
  1698 -> 382 [style=solid label="'6'"]
  1698 -> 383 [style=solid label="'7'"]
  1698 -> 384 [style=solid label="'8'"]
  1698 -> 385 [style=solid label="'9'"]
  1698 -> 185 [style=solid label="\"u8\""]
  1698 -> 186 [style=solid label="'u'"]
  1698 -> 187 [style=solid label="'U'"]
  1698 -> 188 [style=solid label="'L'"]
  1698 -> 386 [style=solid label="'*'"]
  1698 -> 203 [style=solid label="'\"'"]
  1698 -> 387 [style=solid label="\"0x\""]
  1698 -> 388 [style=solid label="\"0X\""]
  1698 -> 389 [style=solid label="\"requires\""]
  1698 -> 390 [style=solid label="\"new\""]
  1698 -> 391 [style=solid label="'~'"]
  1698 -> 392 [style=solid label="'!'"]
  1698 -> 393 [style=solid label="\"++\""]
  1698 -> 394 [style=solid label="\"--\""]
  1698 -> 395 [style=solid label="\"this\""]
  1698 -> 37 [style=solid label="\"auto\""]
  1698 -> 396 [style=solid label="\"nullptr\""]
  1698 -> 397 [style=solid label="\"dynamic_cast\""]
  1698 -> 398 [style=solid label="\"static_cast\""]
  1698 -> 399 [style=solid label="\"reinterpret_cast\""]
  1698 -> 400 [style=solid label="\"const_cast\""]
  1698 -> 401 [style=solid label="\"typeid\""]
  1698 -> 38 [style=solid label="\"char\""]
  1698 -> 39 [style=solid label="\"char8_t\""]
  1698 -> 40 [style=solid label="\"char16_t\""]
  1698 -> 41 [style=solid label="\"char32_t\""]
  1698 -> 42 [style=solid label="\"wchar_t\""]
  1698 -> 43 [style=solid label="\"bool\""]
  1698 -> 44 [style=solid label="\"short\""]
  1698 -> 45 [style=solid label="\"int\""]
  1698 -> 46 [style=solid label="\"long\""]
  1698 -> 47 [style=solid label="\"signed\""]
  1698 -> 48 [style=solid label="\"unsigned\""]
  1698 -> 49 [style=solid label="\"float\""]
  1698 -> 50 [style=solid label="\"double\""]
  1698 -> 51 [style=solid label="\"void\""]
  1698 -> 209 [style=solid label="'R'"]
  1698 -> 528 [style=solid label="\"throw\""]
  1698 -> 56 [style=solid label="\"typename\""]
  1698 -> 402 [style=solid label="\"sizeof\""]
  1698 -> 403 [style=solid label="\"alignof\""]
  1698 -> 529 [style=solid label="\"co_yield\""]
  1698 -> 404 [style=dashed label="additive-expression"]
  1698 -> 405 [style=dashed label="and-expression"]
  1698 -> 1141 [style=dashed label="assignment-expression"]
  1698 -> 406 [style=dashed label="await-expression"]
  1698 -> 407 [style=dashed label="binary-literal"]
  1698 -> 408 [style=dashed label="boolean-literal"]
  1698 -> 1142 [style=dashed label="braced-init-list"]
  1698 -> 409 [style=dashed label="cast-expression"]
  1698 -> 410 [style=dashed label="character-literal"]
  1698 -> 66 [style=dashed label="class-name"]
  1698 -> 411 [style=dashed label="compare-expression"]
  1698 -> 68 [style=dashed label="concept-name"]
  1698 -> 531 [style=dashed label="conditional-expression"]
  1698 -> 69 [style=dashed label="conversion-function-id"]
  1698 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1698 -> 415 [style=dashed label="decimal-literal"]
  1698 -> 77 [style=dashed label="decltype-specifier"]
  1698 -> 416 [style=dashed label="delete-expression"]
  1698 -> 417 [style=dashed label="digit"]
  1698 -> 418 [style=dashed label="digit-sequence"]
  1698 -> 419 [style=dashed label="encoding-prefix"]
  1698 -> 85 [style=dashed label="enum-name"]
  1698 -> 420 [style=dashed label="equality-expression"]
  1698 -> 421 [style=dashed label="exclusive-or-expression"]
  1698 -> 422 [style=dashed label="floating-point-literal"]
  1698 -> 423 [style=dashed label="fold-expression"]
  1698 -> 424 [style=dashed label="fractional-constant"]
  1698 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1698 -> 426 [style=dashed label="hexadecimal-literal"]
  1698 -> 427 [style=dashed label="hexadecimal-prefix"]
  1698 -> 428 [style=dashed label="id-expression"]
  1698 -> 429 [style=dashed label="inclusive-or-expression"]
  1698 -> 1844 [style=dashed label="initializer-clause"]
  1698 -> 430 [style=dashed label="integer-literal"]
  1698 -> 431 [style=dashed label="lambda-expression"]
  1698 -> 432 [style=dashed label="lambda-introducer"]
  1698 -> 433 [style=dashed label="literal"]
  1698 -> 96 [style=dashed label="literal-operator-id"]
  1698 -> 434 [style=dashed label="logical-and-expression"]
  1698 -> 533 [style=dashed label="logical-or-expression"]
  1698 -> 436 [style=dashed label="multiplicative-expression"]
  1698 -> 100 [style=dashed label="namespace-alias"]
  1698 -> 103 [style=dashed label="namespace-name"]
  1698 -> 437 [style=dashed label="nested-name-specifier"]
  1698 -> 438 [style=dashed label="new-expression"]
  1698 -> 439 [style=dashed label="noexcept-expression"]
  1698 -> 440 [style=dashed label="nonzero-digit"]
  1698 -> 441 [style=dashed label="octal-literal"]
  1698 -> 109 [style=dashed label="operator-function-id"]
  1698 -> 110 [style=dashed label="placeholder-type-specifier"]
  1698 -> 442 [style=dashed label="pm-expression"]
  1698 -> 443 [style=dashed label="pointer-literal"]
  1698 -> 444 [style=dashed label="postfix-expression"]
  1698 -> 445 [style=dashed label="primary-expression"]
  1698 -> 113 [style=dashed label="qualified-id"]
  1698 -> 446 [style=dashed label="relational-expression"]
  1698 -> 447 [style=dashed label="requires-expression"]
  1698 -> 448 [style=dashed label="shift-expression"]
  1698 -> 115 [style=dashed label="simple-template-id"]
  1698 -> 534 [style=dashed label="simple-type-specifier"]
  1698 -> 450 [style=dashed label="string-literal"]
  1698 -> 121 [style=dashed label="template-id"]
  1698 -> 216 [style=dashed label="template-name"]
  1698 -> 535 [style=dashed label="throw-expression"]
  1698 -> 124 [style=dashed label="type-constraint"]
  1698 -> 125 [style=dashed label="type-name"]
  1698 -> 127 [style=dashed label="typedef-name"]
  1698 -> 536 [style=dashed label="typename-specifier"]
  1698 -> 454 [style=dashed label="unary-expression"]
  1698 -> 455 [style=dashed label="unary-operator"]
  1698 -> 130 [style=dashed label="unqualified-id"]
  1698 -> 456 [style=dashed label="user-defined-character-literal"]
  1698 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1698 -> 458 [style=dashed label="user-defined-integer-literal"]
  1698 -> 459 [style=dashed label="user-defined-literal"]
  1698 -> 460 [style=dashed label="user-defined-string-literal"]
  1698 -> 537 [style=dashed label="yield-expression"]
  1699 [label="State 1699\n\l810 parameter-declaration: attribute-specifier-seq decl-specifier-seq declarator '=' • initializer-clause\l"]
  1699 -> 1 [style=solid label="IDENTIFIER"]
  1699 -> 361 [style=solid label="'+'"]
  1699 -> 362 [style=solid label="'-'"]
  1699 -> 363 [style=solid label="'('"]
  1699 -> 364 [style=solid label="'&'"]
  1699 -> 365 [style=solid label="\"::\""]
  1699 -> 366 [style=solid label="'['"]
  1699 -> 367 [style=solid label="\"co_await\""]
  1699 -> 939 [style=solid label="'{'"]
  1699 -> 368 [style=solid label="'0'"]
  1699 -> 369 [style=solid label="'1'"]
  1699 -> 370 [style=solid label="\"0b\""]
  1699 -> 371 [style=solid label="\"0B\""]
  1699 -> 372 [style=solid label="'\\''"]
  1699 -> 373 [style=solid label="\"false\""]
  1699 -> 374 [style=solid label="\"true\""]
  1699 -> 375 [style=solid label="\"noexcept\""]
  1699 -> 17 [style=solid label="\"operator\""]
  1699 -> 26 [style=solid label="\"decltype\""]
  1699 -> 376 [style=solid label="\"delete\""]
  1699 -> 377 [style=solid label="'.'"]
  1699 -> 378 [style=solid label="'2'"]
  1699 -> 379 [style=solid label="'3'"]
  1699 -> 380 [style=solid label="'4'"]
  1699 -> 381 [style=solid label="'5'"]
  1699 -> 382 [style=solid label="'6'"]
  1699 -> 383 [style=solid label="'7'"]
  1699 -> 384 [style=solid label="'8'"]
  1699 -> 385 [style=solid label="'9'"]
  1699 -> 185 [style=solid label="\"u8\""]
  1699 -> 186 [style=solid label="'u'"]
  1699 -> 187 [style=solid label="'U'"]
  1699 -> 188 [style=solid label="'L'"]
  1699 -> 386 [style=solid label="'*'"]
  1699 -> 203 [style=solid label="'\"'"]
  1699 -> 387 [style=solid label="\"0x\""]
  1699 -> 388 [style=solid label="\"0X\""]
  1699 -> 389 [style=solid label="\"requires\""]
  1699 -> 390 [style=solid label="\"new\""]
  1699 -> 391 [style=solid label="'~'"]
  1699 -> 392 [style=solid label="'!'"]
  1699 -> 393 [style=solid label="\"++\""]
  1699 -> 394 [style=solid label="\"--\""]
  1699 -> 395 [style=solid label="\"this\""]
  1699 -> 37 [style=solid label="\"auto\""]
  1699 -> 396 [style=solid label="\"nullptr\""]
  1699 -> 397 [style=solid label="\"dynamic_cast\""]
  1699 -> 398 [style=solid label="\"static_cast\""]
  1699 -> 399 [style=solid label="\"reinterpret_cast\""]
  1699 -> 400 [style=solid label="\"const_cast\""]
  1699 -> 401 [style=solid label="\"typeid\""]
  1699 -> 38 [style=solid label="\"char\""]
  1699 -> 39 [style=solid label="\"char8_t\""]
  1699 -> 40 [style=solid label="\"char16_t\""]
  1699 -> 41 [style=solid label="\"char32_t\""]
  1699 -> 42 [style=solid label="\"wchar_t\""]
  1699 -> 43 [style=solid label="\"bool\""]
  1699 -> 44 [style=solid label="\"short\""]
  1699 -> 45 [style=solid label="\"int\""]
  1699 -> 46 [style=solid label="\"long\""]
  1699 -> 47 [style=solid label="\"signed\""]
  1699 -> 48 [style=solid label="\"unsigned\""]
  1699 -> 49 [style=solid label="\"float\""]
  1699 -> 50 [style=solid label="\"double\""]
  1699 -> 51 [style=solid label="\"void\""]
  1699 -> 209 [style=solid label="'R'"]
  1699 -> 528 [style=solid label="\"throw\""]
  1699 -> 56 [style=solid label="\"typename\""]
  1699 -> 402 [style=solid label="\"sizeof\""]
  1699 -> 403 [style=solid label="\"alignof\""]
  1699 -> 529 [style=solid label="\"co_yield\""]
  1699 -> 404 [style=dashed label="additive-expression"]
  1699 -> 405 [style=dashed label="and-expression"]
  1699 -> 1141 [style=dashed label="assignment-expression"]
  1699 -> 406 [style=dashed label="await-expression"]
  1699 -> 407 [style=dashed label="binary-literal"]
  1699 -> 408 [style=dashed label="boolean-literal"]
  1699 -> 1142 [style=dashed label="braced-init-list"]
  1699 -> 409 [style=dashed label="cast-expression"]
  1699 -> 410 [style=dashed label="character-literal"]
  1699 -> 66 [style=dashed label="class-name"]
  1699 -> 411 [style=dashed label="compare-expression"]
  1699 -> 68 [style=dashed label="concept-name"]
  1699 -> 531 [style=dashed label="conditional-expression"]
  1699 -> 69 [style=dashed label="conversion-function-id"]
  1699 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1699 -> 415 [style=dashed label="decimal-literal"]
  1699 -> 77 [style=dashed label="decltype-specifier"]
  1699 -> 416 [style=dashed label="delete-expression"]
  1699 -> 417 [style=dashed label="digit"]
  1699 -> 418 [style=dashed label="digit-sequence"]
  1699 -> 419 [style=dashed label="encoding-prefix"]
  1699 -> 85 [style=dashed label="enum-name"]
  1699 -> 420 [style=dashed label="equality-expression"]
  1699 -> 421 [style=dashed label="exclusive-or-expression"]
  1699 -> 422 [style=dashed label="floating-point-literal"]
  1699 -> 423 [style=dashed label="fold-expression"]
  1699 -> 424 [style=dashed label="fractional-constant"]
  1699 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1699 -> 426 [style=dashed label="hexadecimal-literal"]
  1699 -> 427 [style=dashed label="hexadecimal-prefix"]
  1699 -> 428 [style=dashed label="id-expression"]
  1699 -> 429 [style=dashed label="inclusive-or-expression"]
  1699 -> 1845 [style=dashed label="initializer-clause"]
  1699 -> 430 [style=dashed label="integer-literal"]
  1699 -> 431 [style=dashed label="lambda-expression"]
  1699 -> 432 [style=dashed label="lambda-introducer"]
  1699 -> 433 [style=dashed label="literal"]
  1699 -> 96 [style=dashed label="literal-operator-id"]
  1699 -> 434 [style=dashed label="logical-and-expression"]
  1699 -> 533 [style=dashed label="logical-or-expression"]
  1699 -> 436 [style=dashed label="multiplicative-expression"]
  1699 -> 100 [style=dashed label="namespace-alias"]
  1699 -> 103 [style=dashed label="namespace-name"]
  1699 -> 437 [style=dashed label="nested-name-specifier"]
  1699 -> 438 [style=dashed label="new-expression"]
  1699 -> 439 [style=dashed label="noexcept-expression"]
  1699 -> 440 [style=dashed label="nonzero-digit"]
  1699 -> 441 [style=dashed label="octal-literal"]
  1699 -> 109 [style=dashed label="operator-function-id"]
  1699 -> 110 [style=dashed label="placeholder-type-specifier"]
  1699 -> 442 [style=dashed label="pm-expression"]
  1699 -> 443 [style=dashed label="pointer-literal"]
  1699 -> 444 [style=dashed label="postfix-expression"]
  1699 -> 445 [style=dashed label="primary-expression"]
  1699 -> 113 [style=dashed label="qualified-id"]
  1699 -> 446 [style=dashed label="relational-expression"]
  1699 -> 447 [style=dashed label="requires-expression"]
  1699 -> 448 [style=dashed label="shift-expression"]
  1699 -> 115 [style=dashed label="simple-template-id"]
  1699 -> 534 [style=dashed label="simple-type-specifier"]
  1699 -> 450 [style=dashed label="string-literal"]
  1699 -> 121 [style=dashed label="template-id"]
  1699 -> 216 [style=dashed label="template-name"]
  1699 -> 535 [style=dashed label="throw-expression"]
  1699 -> 124 [style=dashed label="type-constraint"]
  1699 -> 125 [style=dashed label="type-name"]
  1699 -> 127 [style=dashed label="typedef-name"]
  1699 -> 536 [style=dashed label="typename-specifier"]
  1699 -> 454 [style=dashed label="unary-expression"]
  1699 -> 455 [style=dashed label="unary-operator"]
  1699 -> 130 [style=dashed label="unqualified-id"]
  1699 -> 456 [style=dashed label="user-defined-character-literal"]
  1699 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1699 -> 458 [style=dashed label="user-defined-integer-literal"]
  1699 -> 459 [style=dashed label="user-defined-literal"]
  1699 -> 460 [style=dashed label="user-defined-string-literal"]
  1699 -> 537 [style=dashed label="yield-expression"]
  1700 [label="State 1700\n\l827 parameter-declaration: decl-specifier-seq abstract-declarator '=' initializer-clause •\l"]
  1700 -> "1700R827" [style=solid]
 "1700R827" [label="R827", fillcolor=3, shape=diamond, style=filled]
  1701 [label="State 1701\n\l811 parameter-declaration: decl-specifier-seq declarator '=' initializer-clause •\l"]
  1701 -> "1701R811" [style=solid]
 "1701R811" [label="R811", fillcolor=3, shape=diamond, style=filled]
  1702 [label="State 1702\n\l1112 type-parameter: template-head type-parameter-key IDENTIFIER '=' • id-expression\l"]
  1702 -> 148 [style=solid label="IDENTIFIER"]
  1702 -> 9 [style=solid label="\"::\""]
  1702 -> 17 [style=solid label="\"operator\""]
  1702 -> 135 [style=solid label="\"decltype\""]
  1702 -> 36 [style=solid label="'~'"]
  1702 -> 66 [style=dashed label="class-name"]
  1702 -> 69 [style=dashed label="conversion-function-id"]
  1702 -> 139 [style=dashed label="decltype-specifier"]
  1702 -> 85 [style=dashed label="enum-name"]
  1702 -> 1846 [style=dashed label="id-expression"]
  1702 -> 96 [style=dashed label="literal-operator-id"]
  1702 -> 100 [style=dashed label="namespace-alias"]
  1702 -> 103 [style=dashed label="namespace-name"]
  1702 -> 153 [style=dashed label="nested-name-specifier"]
  1702 -> 109 [style=dashed label="operator-function-id"]
  1702 -> 113 [style=dashed label="qualified-id"]
  1702 -> 115 [style=dashed label="simple-template-id"]
  1702 -> 121 [style=dashed label="template-id"]
  1702 -> 143 [style=dashed label="template-name"]
  1702 -> 144 [style=dashed label="type-name"]
  1702 -> 127 [style=dashed label="typedef-name"]
  1702 -> 130 [style=dashed label="unqualified-id"]
  1703 [label="State 1703\n\l1111 type-parameter: template-head type-parameter-key '=' id-expression •\l"]
  1703 -> "1703R1111" [style=solid]
 "1703R1111" [label="R1111", fillcolor=3, shape=diamond, style=filled]
  1704 [label="State 1704\n\l1110 type-parameter: template-head type-parameter-key \"...\" IDENTIFIER •\l"]
  1704 -> "1704R1110" [style=solid]
 "1704R1110" [label="R1110", fillcolor=3, shape=diamond, style=filled]
  1705 [label="State 1705\n\l1106 type-parameter: type-constraint IDENTIFIER '=' type-id •\l"]
  1705 -> "1705R1106" [style=solid]
 "1705R1106" [label="R1106", fillcolor=3, shape=diamond, style=filled]
  1706 [label="State 1706\n\l1100 type-parameter: type-parameter-key IDENTIFIER '=' type-id •\l"]
  1706 -> "1706R1100" [style=solid]
 "1706R1100" [label="R1100", fillcolor=3, shape=diamond, style=filled]
  1707 [label="State 1707\n\l751 octal-escape-sequence: '\\\\' octal-digit octal-digit octal-digit •\l"]
  1707 -> "1707R751" [style=solid]
 "1707R751" [label="R751", fillcolor=3, shape=diamond, style=filled]
  1708 [label="State 1708\n\l425 hex-quad: hexadecimal-digit hexadecimal-digit hexadecimal-digit • hexadecimal-digit\l"]
  1708 -> 870 [style=solid label="'0'"]
  1708 -> 871 [style=solid label="'1'"]
  1708 -> 873 [style=solid label="'2'"]
  1708 -> 874 [style=solid label="'3'"]
  1708 -> 875 [style=solid label="'4'"]
  1708 -> 876 [style=solid label="'5'"]
  1708 -> 877 [style=solid label="'6'"]
  1708 -> 878 [style=solid label="'7'"]
  1708 -> 879 [style=solid label="'8'"]
  1708 -> 880 [style=solid label="'9'"]
  1708 -> 881 [style=solid label="'e'"]
  1708 -> 882 [style=solid label="'E'"]
  1708 -> 883 [style=solid label="'f'"]
  1708 -> 884 [style=solid label="'F'"]
  1708 -> 885 [style=solid label="'a'"]
  1708 -> 886 [style=solid label="'b'"]
  1708 -> 887 [style=solid label="'c'"]
  1708 -> 888 [style=solid label="'d'"]
  1708 -> 889 [style=solid label="'A'"]
  1708 -> 890 [style=solid label="'B'"]
  1708 -> 891 [style=solid label="'C'"]
  1708 -> 892 [style=solid label="'D'"]
  1708 -> 1847 [style=dashed label="hexadecimal-digit"]
  1709 [label="State 1709\n\l920 raw-string: '\"' '(' ')' '\"' •\l"]
  1709 -> "1709R920" [style=solid]
 "1709R920" [label="R920", fillcolor=3, shape=diamond, style=filled]
  1710 [label="State 1710\n\l191 d-char-sequence: d-char-sequence • d-char\l924 raw-string: '\"' '(' ')' d-char-sequence • '\"'\l"]
  1710 -> 1013 [style=solid label="EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE"]
  1710 -> 1848 [style=solid label="'\"'"]
  1710 -> 1462 [style=dashed label="d-char"]
  1711 [label="State 1711\n\l922 raw-string: '\"' '(' r-char-sequence ')' • '\"'\l926           | '\"' '(' r-char-sequence ')' • d-char-sequence '\"'\l"]
  1711 -> 1013 [style=solid label="EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE"]
  1711 -> 1849 [style=solid label="'\"'"]
  1711 -> 1015 [style=dashed label="d-char"]
  1711 -> 1850 [style=dashed label="d-char-sequence"]
  1712 [label="State 1712\n\l919 r-char-sequence: r-char-sequence r-char •\l"]
  1712 -> "1712R919" [style=solid]
 "1712R919" [label="R919", fillcolor=3, shape=diamond, style=filled]
  1713 [label="State 1713\n\l921 raw-string: '\"' d-char-sequence '(' ')' • '\"'\l925           | '\"' d-char-sequence '(' ')' • d-char-sequence '\"'\l"]
  1713 -> 1013 [style=solid label="EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE"]
  1713 -> 1851 [style=solid label="'\"'"]
  1713 -> 1015 [style=dashed label="d-char"]
  1713 -> 1852 [style=dashed label="d-char-sequence"]
  1714 [label="State 1714\n\l919 r-char-sequence: r-char-sequence • r-char\l923 raw-string: '\"' d-char-sequence '(' r-char-sequence • ')' '\"'\l927           | '\"' d-char-sequence '(' r-char-sequence • ')' d-char-sequence '\"'\l"]
  1714 -> 1457 [style=solid label="EXCEPT_RIGHT_PARENTHESIS_FOLLOWED_BY_THE_INITIAL_D_CHAR_SEQUENCE_FOLLOWED_BY_QUOTATION_MARK"]
  1714 -> 1853 [style=solid label="')'"]
  1714 -> 1712 [style=dashed label="r-char"]
  1715 [label="State 1715\n\l647 named-namespace-definition: \"inline\" \"namespace\" IDENTIFIER '{' namespace-body '}' •\l"]
  1715 -> "1715R647" [style=solid]
 "1715R647" [label="R647", fillcolor=3, shape=diamond, style=filled]
  1716 [label="State 1716\n\l649 named-namespace-definition: \"inline\" \"namespace\" attribute-specifier-seq IDENTIFIER '{' namespace-body • '}'\l"]
  1716 -> 1854 [style=solid label="'}'"]
  1717 [label="State 1717\n\l1152 unnamed-namespace-definition: \"inline\" \"namespace\" attribute-specifier-seq '{' namespace-body '}' •\l"]
  1717 -> "1717R1152" [style=solid]
 "1717R1152" [label="R1152", fillcolor=3, shape=diamond, style=filled]
  1718 [label="State 1718\n\l629 module-declaration: \"export-keyword\" \"module-keyword\" module-name module-partition attribute-specifier-seq ';' •\l"]
  1718 -> "1718R629" [style=solid]
 "1718R629" [label="R629", fillcolor=3, shape=diamond, style=filled]
  1719 [label="State 1719\n\l650 named-namespace-definition: \"namespace\" attribute-specifier-seq IDENTIFIER '{' namespace-body '}' •\l"]
  1719 -> "1719R650" [style=solid]
 "1719R650" [label="R650", fillcolor=3, shape=diamond, style=filled]
  1720 [label="State 1720\n\l666 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" IDENTIFIER '{' namespace-body • '}'\l"]
  1720 -> 1855 [style=solid label="'}'"]
  1721 [label="State 1721\n\l667 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" \"inline\" IDENTIFIER '{' • namespace-body '}'\l"]
  1721 -> 1 [style=solid label="IDENTIFIER"]
  1721 -> 2 [style=solid label="\"using\""]
  1721 -> 3 [style=solid label="';'"]
  1721 -> 4 [style=solid label="\"alignas\""]
  1721 -> 5 [style=solid label="'('"]
  1721 -> 6 [style=solid label="\"...\""]
  1721 -> 7 [style=solid label="'&'"]
  1721 -> 8 [style=solid label="\"asm\""]
  1721 -> 9 [style=solid label="\"::\""]
  1721 -> 10 [style=solid label="'['"]
  1721 -> 11 [style=solid label="\"virtual\""]
  1721 -> 12 [style=solid label="\"class\""]
  1721 -> 13 [style=solid label="\"struct\""]
  1721 -> 14 [style=solid label="\"union\""]
  1721 -> 15 [style=solid label="\"template\""]
  1721 -> 16 [style=solid label="\"&&\""]
  1721 -> 17 [style=solid label="\"operator\""]
  1721 -> 18 [style=solid label="\"const\""]
  1721 -> 19 [style=solid label="\"volatile\""]
  1721 -> 20 [style=solid label="\"friend\""]
  1721 -> 21 [style=solid label="\"typedef\""]
  1721 -> 22 [style=solid label="\"constexpr\""]
  1721 -> 23 [style=solid label="\"consteval\""]
  1721 -> 24 [style=solid label="\"constinit\""]
  1721 -> 25 [style=solid label="\"inline\""]
  1721 -> 26 [style=solid label="\"decltype\""]
  1721 -> 27 [style=solid label="\"enum\""]
  1721 -> 28 [style=solid label="\"extern\""]
  1721 -> 29 [style=solid label="\"explicit\""]
  1721 -> 30 [style=solid label="\"export\""]
  1721 -> 158 [style=solid label="\"export-keyword\""]
  1721 -> 32 [style=solid label="'*'"]
  1721 -> 34 [style=solid label="\"import-keyword\""]
  1721 -> 35 [style=solid label="\"namespace\""]
  1721 -> 36 [style=solid label="'~'"]
  1721 -> 37 [style=solid label="\"auto\""]
  1721 -> 38 [style=solid label="\"char\""]
  1721 -> 39 [style=solid label="\"char8_t\""]
  1721 -> 40 [style=solid label="\"char16_t\""]
  1721 -> 41 [style=solid label="\"char32_t\""]
  1721 -> 42 [style=solid label="\"wchar_t\""]
  1721 -> 43 [style=solid label="\"bool\""]
  1721 -> 44 [style=solid label="\"short\""]
  1721 -> 45 [style=solid label="\"int\""]
  1721 -> 46 [style=solid label="\"long\""]
  1721 -> 47 [style=solid label="\"signed\""]
  1721 -> 48 [style=solid label="\"unsigned\""]
  1721 -> 49 [style=solid label="\"float\""]
  1721 -> 50 [style=solid label="\"double\""]
  1721 -> 51 [style=solid label="\"void\""]
  1721 -> 52 [style=solid label="\"static_assert\""]
  1721 -> 53 [style=solid label="\"static\""]
  1721 -> 54 [style=solid label="\"thread_local\""]
  1721 -> 55 [style=solid label="\"mutable\""]
  1721 -> 56 [style=solid label="\"typename\""]
  1721 -> 57 [style=dashed label="alias-declaration"]
  1721 -> 58 [style=dashed label="alignment-specifier"]
  1721 -> 59 [style=dashed label="asm-declaration"]
  1721 -> 60 [style=dashed label="attribute-declaration"]
  1721 -> 61 [style=dashed label="attribute-specifier"]
  1721 -> 62 [style=dashed label="attribute-specifier-seq"]
  1721 -> 63 [style=dashed label="block-declaration"]
  1721 -> 64 [style=dashed label="class-head"]
  1721 -> 65 [style=dashed label="class-key"]
  1721 -> 66 [style=dashed label="class-name"]
  1721 -> 67 [style=dashed label="class-specifier"]
  1721 -> 68 [style=dashed label="concept-name"]
  1721 -> 69 [style=dashed label="conversion-function-id"]
  1721 -> 70 [style=dashed label="cv-qualifier"]
  1721 -> 71 [style=dashed label="decl-specifier"]
  1721 -> 72 [style=dashed label="decl-specifier-seq"]
  1721 -> 73 [style=dashed label="declaration"]
  1721 -> 570 [style=dashed label="declaration-seq"]
  1721 -> 75 [style=dashed label="declarator"]
  1721 -> 76 [style=dashed label="declarator-id"]
  1721 -> 77 [style=dashed label="decltype-specifier"]
  1721 -> 78 [style=dashed label="deduction-guide"]
  1721 -> 79 [style=dashed label="defining-type-specifier"]
  1721 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1721 -> 81 [style=dashed label="elaborated-type-specifier"]
  1721 -> 82 [style=dashed label="empty-declaration"]
  1721 -> 83 [style=dashed label="enum-head"]
  1721 -> 84 [style=dashed label="enum-key"]
  1721 -> 85 [style=dashed label="enum-name"]
  1721 -> 86 [style=dashed label="enum-specifier"]
  1721 -> 87 [style=dashed label="explicit-instantiation"]
  1721 -> 88 [style=dashed label="explicit-specialization"]
  1721 -> 89 [style=dashed label="explicit-specifier"]
  1721 -> 90 [style=dashed label="export-declaration"]
  1721 -> 91 [style=dashed label="function-definition"]
  1721 -> 92 [style=dashed label="function-specifier"]
  1721 -> 94 [style=dashed label="id-expression"]
  1721 -> 95 [style=dashed label="linkage-specification"]
  1721 -> 96 [style=dashed label="literal-operator-id"]
  1721 -> 98 [style=dashed label="module-import-declaration"]
  1721 -> 99 [style=dashed label="named-namespace-definition"]
  1721 -> 100 [style=dashed label="namespace-alias"]
  1721 -> 101 [style=dashed label="namespace-alias-definition"]
  1721 -> 1856 [style=dashed label="namespace-body"]
  1721 -> 102 [style=dashed label="namespace-definition"]
  1721 -> 103 [style=dashed label="namespace-name"]
  1721 -> 104 [style=dashed label="nested-name-specifier"]
  1721 -> 105 [style=dashed label="nested-namespace-definition"]
  1721 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  1721 -> 107 [style=dashed label="noptr-declarator"]
  1721 -> 108 [style=dashed label="opaque-enum-declaration"]
  1721 -> 109 [style=dashed label="operator-function-id"]
  1721 -> 110 [style=dashed label="placeholder-type-specifier"]
  1721 -> 111 [style=dashed label="ptr-declarator"]
  1721 -> 112 [style=dashed label="ptr-operator"]
  1721 -> 113 [style=dashed label="qualified-id"]
  1721 -> 114 [style=dashed label="simple-declaration"]
  1721 -> 115 [style=dashed label="simple-template-id"]
  1721 -> 116 [style=dashed label="simple-type-specifier"]
  1721 -> 117 [style=dashed label="static_assert-declaration"]
  1721 -> 118 [style=dashed label="storage-class-specifier"]
  1721 -> 119 [style=dashed label="template-declaration"]
  1721 -> 120 [style=dashed label="template-head"]
  1721 -> 121 [style=dashed label="template-id"]
  1721 -> 122 [style=dashed label="template-name"]
  1721 -> 124 [style=dashed label="type-constraint"]
  1721 -> 125 [style=dashed label="type-name"]
  1721 -> 126 [style=dashed label="type-specifier"]
  1721 -> 127 [style=dashed label="typedef-name"]
  1721 -> 128 [style=dashed label="typename-specifier"]
  1721 -> 129 [style=dashed label="unnamed-namespace-definition"]
  1721 -> 130 [style=dashed label="unqualified-id"]
  1721 -> 131 [style=dashed label="using-declaration"]
  1721 -> 132 [style=dashed label="using-directive"]
  1721 -> 133 [style=dashed label="using-enum-declaration"]
  1722 [label="State 1722\n\l1039 static_assert-declaration: \"static_assert\" '(' constant-expression ',' string-literal ')' • ';'\l"]
  1722 -> 1857 [style=solid label="';'"]
  1723 [label="State 1723\n\l1187 using-directive: attribute-specifier-seq \"using\" \"namespace\" nested-name-specifier namespace-name ';' •\l"]
  1723 -> "1723R1187" [style=solid]
 "1723R1187" [label="R1187", fillcolor=3, shape=diamond, style=filled]
  1724 [label="State 1724\n\l 21 asm-declaration: attribute-specifier-seq \"asm\" '(' string-literal ')' ';' •\l"]
  1724 -> "1724R21" [style=solid]
 "1724R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  1725 [label="State 1725\n\l980 simple-declaration: attribute-specifier-seq decl-specifier-seq '[' identifier-list ']' initializer • ';'\l"]
  1725 -> 1858 [style=solid label="';'"]
  1726 [label="State 1726\n\l982 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' identifier-list ']' • initializer ';'\l"]
  1726 -> 1280 [style=solid label="'='"]
  1726 -> 647 [style=solid label="'('"]
  1726 -> 939 [style=solid label="'{'"]
  1726 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1726 -> 650 [style=dashed label="braced-init-list"]
  1726 -> 1859 [style=dashed label="initializer"]
  1727 [label="State 1727\n\l613 member-declarator: IDENTIFIER ':' constant-expression brace-or-equal-initializer •\l"]
  1727 -> "1727R613" [style=solid]
 "1727R613" [label="R613", fillcolor=3, shape=diamond, style=filled]
  1728 [label="State 1728\n\l611 member-declarator: IDENTIFIER attribute-specifier-seq ':' constant-expression •\l615                  | IDENTIFIER attribute-specifier-seq ':' constant-expression • brace-or-equal-initializer\l"]
  1728 -> 1280 [style=solid label="'='"]
  1728 -> 939 [style=solid label="'{'"]
  1728 -> 1860 [style=dashed label="brace-or-equal-initializer"]
  1728 -> 650 [style=dashed label="braced-init-list"]
  1728 -> "1728R611" [style=solid]
 "1728R611" [label="R611", fillcolor=3, shape=diamond, style=filled]
  1729 [label="State 1729\n\l614 member-declarator: ':' constant-expression brace-or-equal-initializer •\l616                  | attribute-specifier-seq ':' constant-expression brace-or-equal-initializer •\l"]
  1729 -> "1729R614" [style=solid]
 "1729R614" [label="R614", fillcolor=3, shape=diamond, style=filled]
  1729 -> "1729R616d" [label="[';', ',']", style=solid]
 "1729R616d" [label="R616", fillcolor=5, shape=diamond, style=filled]
  1730 [label="State 1730\n\l612 member-declarator: attribute-specifier-seq ':' constant-expression •\l616                  | attribute-specifier-seq ':' constant-expression • brace-or-equal-initializer\l"]
  1730 -> 1280 [style=solid label="'='"]
  1730 -> 939 [style=solid label="'{'"]
  1730 -> 1861 [style=dashed label="brace-or-equal-initializer"]
  1730 -> 650 [style=dashed label="braced-init-list"]
  1730 -> "1730R612" [style=solid]
 "1730R612" [label="R612", fillcolor=3, shape=diamond, style=filled]
  1731 [label="State 1731\n\l408 function-definition: attribute-specifier-seq decl-specifier-seq declarator requires-clause • function-body\l606 member-declarator: declarator requires-clause •\l"]
  1731 -> 291 [style=solid label="'='"]
  1731 -> 293 [style=solid label="':'"]
  1731 -> 294 [style=solid label="'{'"]
  1731 -> 296 [style=solid label="\"try\""]
  1731 -> 299 [style=dashed label="compound-statement"]
  1731 -> 300 [style=dashed label="ctor-initializer"]
  1731 -> 1490 [style=dashed label="function-body"]
  1731 -> 302 [style=dashed label="function-try-block"]
  1731 -> "1731R606" [style=solid]
 "1731R606" [label="R606", fillcolor=3, shape=diamond, style=filled]
  1732 [label="State 1732\n\l404 function-definition: attribute-specifier-seq decl-specifier-seq declarator virt-specifier-seq • function-body\l603 member-declarator: declarator virt-specifier-seq •\l605                  | declarator virt-specifier-seq • pure-specifier\l1193 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  1732 -> 1510 [style=solid label="'='"]
  1732 -> 293 [style=solid label="':'"]
  1732 -> 294 [style=solid label="'{'"]
  1732 -> 295 [style=solid label="\"final\""]
  1732 -> 296 [style=solid label="\"try\""]
  1732 -> 298 [style=solid label="\"override\""]
  1732 -> 299 [style=dashed label="compound-statement"]
  1732 -> 300 [style=dashed label="ctor-initializer"]
  1732 -> 1491 [style=dashed label="function-body"]
  1732 -> 302 [style=dashed label="function-try-block"]
  1732 -> 1511 [style=dashed label="pure-specifier"]
  1732 -> 707 [style=dashed label="virt-specifier"]
  1732 -> "1732R603" [style=solid]
 "1732R603" [label="R603", fillcolor=3, shape=diamond, style=filled]
  1733 [label="State 1733\n\l590 member-declaration: attribute-specifier-seq decl-specifier-seq member-declarator-list ';' •\l"]
  1733 -> "1733R590" [style=solid]
 "1733R590" [label="R590", fillcolor=3, shape=diamond, style=filled]
  1734 [label="State 1734\n\l909 pure-specifier: '=' '0' •\l"]
  1734 -> "1734R909" [style=solid]
 "1734R909" [label="R909", fillcolor=3, shape=diamond, style=filled]
  1735 [label="State 1735\n\l106 brace-or-equal-initializer: '=' • initializer-clause\l909 pure-specifier: '=' • '0'\l"]
  1735 -> 1 [style=solid label="IDENTIFIER"]
  1735 -> 361 [style=solid label="'+'"]
  1735 -> 362 [style=solid label="'-'"]
  1735 -> 363 [style=solid label="'('"]
  1735 -> 364 [style=solid label="'&'"]
  1735 -> 365 [style=solid label="\"::\""]
  1735 -> 366 [style=solid label="'['"]
  1735 -> 367 [style=solid label="\"co_await\""]
  1735 -> 939 [style=solid label="'{'"]
  1735 -> 1509 [style=solid label="'0'"]
  1735 -> 369 [style=solid label="'1'"]
  1735 -> 370 [style=solid label="\"0b\""]
  1735 -> 371 [style=solid label="\"0B\""]
  1735 -> 372 [style=solid label="'\\''"]
  1735 -> 373 [style=solid label="\"false\""]
  1735 -> 374 [style=solid label="\"true\""]
  1735 -> 375 [style=solid label="\"noexcept\""]
  1735 -> 17 [style=solid label="\"operator\""]
  1735 -> 26 [style=solid label="\"decltype\""]
  1735 -> 376 [style=solid label="\"delete\""]
  1735 -> 377 [style=solid label="'.'"]
  1735 -> 378 [style=solid label="'2'"]
  1735 -> 379 [style=solid label="'3'"]
  1735 -> 380 [style=solid label="'4'"]
  1735 -> 381 [style=solid label="'5'"]
  1735 -> 382 [style=solid label="'6'"]
  1735 -> 383 [style=solid label="'7'"]
  1735 -> 384 [style=solid label="'8'"]
  1735 -> 385 [style=solid label="'9'"]
  1735 -> 185 [style=solid label="\"u8\""]
  1735 -> 186 [style=solid label="'u'"]
  1735 -> 187 [style=solid label="'U'"]
  1735 -> 188 [style=solid label="'L'"]
  1735 -> 386 [style=solid label="'*'"]
  1735 -> 203 [style=solid label="'\"'"]
  1735 -> 387 [style=solid label="\"0x\""]
  1735 -> 388 [style=solid label="\"0X\""]
  1735 -> 389 [style=solid label="\"requires\""]
  1735 -> 390 [style=solid label="\"new\""]
  1735 -> 391 [style=solid label="'~'"]
  1735 -> 392 [style=solid label="'!'"]
  1735 -> 393 [style=solid label="\"++\""]
  1735 -> 394 [style=solid label="\"--\""]
  1735 -> 395 [style=solid label="\"this\""]
  1735 -> 37 [style=solid label="\"auto\""]
  1735 -> 396 [style=solid label="\"nullptr\""]
  1735 -> 397 [style=solid label="\"dynamic_cast\""]
  1735 -> 398 [style=solid label="\"static_cast\""]
  1735 -> 399 [style=solid label="\"reinterpret_cast\""]
  1735 -> 400 [style=solid label="\"const_cast\""]
  1735 -> 401 [style=solid label="\"typeid\""]
  1735 -> 38 [style=solid label="\"char\""]
  1735 -> 39 [style=solid label="\"char8_t\""]
  1735 -> 40 [style=solid label="\"char16_t\""]
  1735 -> 41 [style=solid label="\"char32_t\""]
  1735 -> 42 [style=solid label="\"wchar_t\""]
  1735 -> 43 [style=solid label="\"bool\""]
  1735 -> 44 [style=solid label="\"short\""]
  1735 -> 45 [style=solid label="\"int\""]
  1735 -> 46 [style=solid label="\"long\""]
  1735 -> 47 [style=solid label="\"signed\""]
  1735 -> 48 [style=solid label="\"unsigned\""]
  1735 -> 49 [style=solid label="\"float\""]
  1735 -> 50 [style=solid label="\"double\""]
  1735 -> 51 [style=solid label="\"void\""]
  1735 -> 209 [style=solid label="'R'"]
  1735 -> 528 [style=solid label="\"throw\""]
  1735 -> 56 [style=solid label="\"typename\""]
  1735 -> 402 [style=solid label="\"sizeof\""]
  1735 -> 403 [style=solid label="\"alignof\""]
  1735 -> 529 [style=solid label="\"co_yield\""]
  1735 -> 404 [style=dashed label="additive-expression"]
  1735 -> 405 [style=dashed label="and-expression"]
  1735 -> 1141 [style=dashed label="assignment-expression"]
  1735 -> 406 [style=dashed label="await-expression"]
  1735 -> 407 [style=dashed label="binary-literal"]
  1735 -> 408 [style=dashed label="boolean-literal"]
  1735 -> 1142 [style=dashed label="braced-init-list"]
  1735 -> 409 [style=dashed label="cast-expression"]
  1735 -> 410 [style=dashed label="character-literal"]
  1735 -> 66 [style=dashed label="class-name"]
  1735 -> 411 [style=dashed label="compare-expression"]
  1735 -> 68 [style=dashed label="concept-name"]
  1735 -> 531 [style=dashed label="conditional-expression"]
  1735 -> 69 [style=dashed label="conversion-function-id"]
  1735 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1735 -> 415 [style=dashed label="decimal-literal"]
  1735 -> 77 [style=dashed label="decltype-specifier"]
  1735 -> 416 [style=dashed label="delete-expression"]
  1735 -> 417 [style=dashed label="digit"]
  1735 -> 418 [style=dashed label="digit-sequence"]
  1735 -> 419 [style=dashed label="encoding-prefix"]
  1735 -> 85 [style=dashed label="enum-name"]
  1735 -> 420 [style=dashed label="equality-expression"]
  1735 -> 421 [style=dashed label="exclusive-or-expression"]
  1735 -> 422 [style=dashed label="floating-point-literal"]
  1735 -> 423 [style=dashed label="fold-expression"]
  1735 -> 424 [style=dashed label="fractional-constant"]
  1735 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1735 -> 426 [style=dashed label="hexadecimal-literal"]
  1735 -> 427 [style=dashed label="hexadecimal-prefix"]
  1735 -> 428 [style=dashed label="id-expression"]
  1735 -> 429 [style=dashed label="inclusive-or-expression"]
  1735 -> 1143 [style=dashed label="initializer-clause"]
  1735 -> 430 [style=dashed label="integer-literal"]
  1735 -> 431 [style=dashed label="lambda-expression"]
  1735 -> 432 [style=dashed label="lambda-introducer"]
  1735 -> 433 [style=dashed label="literal"]
  1735 -> 96 [style=dashed label="literal-operator-id"]
  1735 -> 434 [style=dashed label="logical-and-expression"]
  1735 -> 533 [style=dashed label="logical-or-expression"]
  1735 -> 436 [style=dashed label="multiplicative-expression"]
  1735 -> 100 [style=dashed label="namespace-alias"]
  1735 -> 103 [style=dashed label="namespace-name"]
  1735 -> 437 [style=dashed label="nested-name-specifier"]
  1735 -> 438 [style=dashed label="new-expression"]
  1735 -> 439 [style=dashed label="noexcept-expression"]
  1735 -> 440 [style=dashed label="nonzero-digit"]
  1735 -> 441 [style=dashed label="octal-literal"]
  1735 -> 109 [style=dashed label="operator-function-id"]
  1735 -> 110 [style=dashed label="placeholder-type-specifier"]
  1735 -> 442 [style=dashed label="pm-expression"]
  1735 -> 443 [style=dashed label="pointer-literal"]
  1735 -> 444 [style=dashed label="postfix-expression"]
  1735 -> 445 [style=dashed label="primary-expression"]
  1735 -> 113 [style=dashed label="qualified-id"]
  1735 -> 446 [style=dashed label="relational-expression"]
  1735 -> 447 [style=dashed label="requires-expression"]
  1735 -> 448 [style=dashed label="shift-expression"]
  1735 -> 115 [style=dashed label="simple-template-id"]
  1735 -> 534 [style=dashed label="simple-type-specifier"]
  1735 -> 450 [style=dashed label="string-literal"]
  1735 -> 121 [style=dashed label="template-id"]
  1735 -> 216 [style=dashed label="template-name"]
  1735 -> 535 [style=dashed label="throw-expression"]
  1735 -> 124 [style=dashed label="type-constraint"]
  1735 -> 125 [style=dashed label="type-name"]
  1735 -> 127 [style=dashed label="typedef-name"]
  1735 -> 536 [style=dashed label="typename-specifier"]
  1735 -> 454 [style=dashed label="unary-expression"]
  1735 -> 455 [style=dashed label="unary-operator"]
  1735 -> 130 [style=dashed label="unqualified-id"]
  1735 -> 456 [style=dashed label="user-defined-character-literal"]
  1735 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1735 -> 458 [style=dashed label="user-defined-integer-literal"]
  1735 -> 459 [style=dashed label="user-defined-literal"]
  1735 -> 460 [style=dashed label="user-defined-string-literal"]
  1735 -> 537 [style=dashed label="yield-expression"]
  1736 [label="State 1736\n\l606 member-declarator: declarator requires-clause •\l"]
  1736 -> "1736R606" [style=solid]
 "1736R606" [label="R606", fillcolor=3, shape=diamond, style=filled]
  1737 [label="State 1737\n\l603 member-declarator: declarator virt-specifier-seq •\l605                  | declarator virt-specifier-seq • pure-specifier\l1193 virt-specifier-seq: virt-specifier-seq • virt-specifier\l"]
  1737 -> 1862 [style=solid label="'='"]
  1737 -> 295 [style=solid label="\"final\""]
  1737 -> 298 [style=solid label="\"override\""]
  1737 -> 1511 [style=dashed label="pure-specifier"]
  1737 -> 707 [style=dashed label="virt-specifier"]
  1737 -> "1737R603" [style=solid]
 "1737R603" [label="R603", fillcolor=3, shape=diamond, style=filled]
  1738 [label="State 1738\n\l 73 base-specifier: attribute-specifier-seq \"virtual\" access-specifier class-or-decltype •\l"]
  1738 -> "1738R73" [style=solid]
 "1738R73" [label="R73", fillcolor=3, shape=diamond, style=filled]
  1739 [label="State 1739\n\l 77 base-specifier: attribute-specifier-seq access-specifier \"virtual\" class-or-decltype •\l"]
  1739 -> "1739R77" [style=solid]
 "1739R77" [label="R77", fillcolor=3, shape=diamond, style=filled]
  1740 [label="State 1740\n\l 82 base-specifier-list: base-specifier-list ',' base-specifier \"...\" •\l"]
  1740 -> "1740R82" [style=solid]
 "1740R82" [label="R82", fillcolor=3, shape=diamond, style=filled]
  1741 [label="State 1741\n\l1056 template-argument-list: template-argument-list ',' template-argument \"...\" •\l"]
  1741 -> "1741R1056" [style=solid]
 "1741R1056" [label="R1056", fillcolor=3, shape=diamond, style=filled]
  1742 [label="State 1742\n\l981 simple-declaration: decl-specifier-seq '[' identifier-list ']' initializer ';' •\l"]
  1742 -> "1742R981" [style=solid]
 "1742R981" [label="R981", fillcolor=3, shape=diamond, style=filled]
  1743 [label="State 1743\n\l487 initializer-list: initializer-list ',' initializer-clause •\l488                 | initializer-list ',' initializer-clause • \"...\"\l"]
  1743 -> 1863 [style=solid label="\"...\""]
  1743 -> "1743R487" [style=solid]
 "1743R487" [label="R487", fillcolor=3, shape=diamond, style=filled]
  1744 [label="State 1744\n\l111 braced-init-list: '{' designated-initializer-list ',' '}' •\l"]
  1744 -> "1744R111" [style=solid]
 "1744R111" [label="R111", fillcolor=3, shape=diamond, style=filled]
  1745 [label="State 1745\n\l251 designator: '.' • IDENTIFIER\l"]
  1745 -> 1529 [style=solid label="IDENTIFIER"]
  1746 [label="State 1746\n\l250 designated-initializer-list: designated-initializer-list ',' designated-initializer-clause •\l"]
  1746 -> "1746R250" [style=solid]
 "1746R250" [label="R250", fillcolor=3, shape=diamond, style=filled]
  1747 [label="State 1747\n\l109 braced-init-list: '{' initializer-list ',' '}' •\l"]
  1747 -> "1747R109" [style=solid]
 "1747R109" [label="R109", fillcolor=3, shape=diamond, style=filled]
  1748 [label="State 1748\n\l983 simple-declaration: decl-specifier-seq ref-qualifier '[' identifier-list ']' initializer • ';'\l"]
  1748 -> 1864 [style=solid label="';'"]
  1749 [label="State 1749\n\l576 mem-initializer: mem-initializer-id '(' expression-list ')' •\l"]
  1749 -> "1749R576" [style=solid]
 "1749R576" [label="R576", fillcolor=3, shape=diamond, style=filled]
  1750 [label="State 1750\n\l583 mem-initializer-list: mem-initializer-list ',' mem-initializer \"...\" •\l"]
  1750 -> "1750R583" [style=solid]
 "1750R583" [label="R583", fillcolor=3, shape=diamond, style=filled]
  1751 [label="State 1751\n\l165 condition: attribute-specifier-seq decl-specifier-seq • declarator brace-or-equal-initializer\l"]
  1751 -> 148 [style=solid label="IDENTIFIER"]
  1751 -> 5 [style=solid label="'('"]
  1751 -> 6 [style=solid label="\"...\""]
  1751 -> 7 [style=solid label="'&'"]
  1751 -> 9 [style=solid label="\"::\""]
  1751 -> 16 [style=solid label="\"&&\""]
  1751 -> 17 [style=solid label="\"operator\""]
  1751 -> 135 [style=solid label="\"decltype\""]
  1751 -> 32 [style=solid label="'*'"]
  1751 -> 36 [style=solid label="'~'"]
  1751 -> 66 [style=dashed label="class-name"]
  1751 -> 69 [style=dashed label="conversion-function-id"]
  1751 -> 1865 [style=dashed label="declarator"]
  1751 -> 76 [style=dashed label="declarator-id"]
  1751 -> 139 [style=dashed label="decltype-specifier"]
  1751 -> 85 [style=dashed label="enum-name"]
  1751 -> 94 [style=dashed label="id-expression"]
  1751 -> 96 [style=dashed label="literal-operator-id"]
  1751 -> 100 [style=dashed label="namespace-alias"]
  1751 -> 103 [style=dashed label="namespace-name"]
  1751 -> 149 [style=dashed label="nested-name-specifier"]
  1751 -> 107 [style=dashed label="noptr-declarator"]
  1751 -> 109 [style=dashed label="operator-function-id"]
  1751 -> 111 [style=dashed label="ptr-declarator"]
  1751 -> 112 [style=dashed label="ptr-operator"]
  1751 -> 113 [style=dashed label="qualified-id"]
  1751 -> 115 [style=dashed label="simple-template-id"]
  1751 -> 121 [style=dashed label="template-id"]
  1751 -> 143 [style=dashed label="template-name"]
  1751 -> 144 [style=dashed label="type-name"]
  1751 -> 127 [style=dashed label="typedef-name"]
  1751 -> 130 [style=dashed label="unqualified-id"]
  1752 [label="State 1752\n\l509 iteration-statement: \"while\" '(' condition ')' • statement\l"]
  1752 -> 665 [style=solid label="IDENTIFIER"]
  1752 -> 361 [style=solid label="'+'"]
  1752 -> 362 [style=solid label="'-'"]
  1752 -> 2 [style=solid label="\"using\""]
  1752 -> 666 [style=solid label="';'"]
  1752 -> 4 [style=solid label="\"alignas\""]
  1752 -> 363 [style=solid label="'('"]
  1752 -> 364 [style=solid label="'&'"]
  1752 -> 8 [style=solid label="\"asm\""]
  1752 -> 365 [style=solid label="\"::\""]
  1752 -> 667 [style=solid label="'['"]
  1752 -> 367 [style=solid label="\"co_await\""]
  1752 -> 294 [style=solid label="'{'"]
  1752 -> 11 [style=solid label="\"virtual\""]
  1752 -> 368 [style=solid label="'0'"]
  1752 -> 369 [style=solid label="'1'"]
  1752 -> 370 [style=solid label="\"0b\""]
  1752 -> 371 [style=solid label="\"0B\""]
  1752 -> 372 [style=solid label="'\\''"]
  1752 -> 373 [style=solid label="\"false\""]
  1752 -> 374 [style=solid label="\"true\""]
  1752 -> 12 [style=solid label="\"class\""]
  1752 -> 13 [style=solid label="\"struct\""]
  1752 -> 14 [style=solid label="\"union\""]
  1752 -> 375 [style=solid label="\"noexcept\""]
  1752 -> 17 [style=solid label="\"operator\""]
  1752 -> 669 [style=solid label="\"co_return\""]
  1752 -> 18 [style=solid label="\"const\""]
  1752 -> 19 [style=solid label="\"volatile\""]
  1752 -> 20 [style=solid label="\"friend\""]
  1752 -> 21 [style=solid label="\"typedef\""]
  1752 -> 22 [style=solid label="\"constexpr\""]
  1752 -> 23 [style=solid label="\"consteval\""]
  1752 -> 24 [style=solid label="\"constinit\""]
  1752 -> 263 [style=solid label="\"inline\""]
  1752 -> 26 [style=solid label="\"decltype\""]
  1752 -> 376 [style=solid label="\"delete\""]
  1752 -> 377 [style=solid label="'.'"]
  1752 -> 378 [style=solid label="'2'"]
  1752 -> 379 [style=solid label="'3'"]
  1752 -> 380 [style=solid label="'4'"]
  1752 -> 381 [style=solid label="'5'"]
  1752 -> 382 [style=solid label="'6'"]
  1752 -> 383 [style=solid label="'7'"]
  1752 -> 384 [style=solid label="'8'"]
  1752 -> 385 [style=solid label="'9'"]
  1752 -> 27 [style=solid label="\"enum\""]
  1752 -> 185 [style=solid label="\"u8\""]
  1752 -> 186 [style=solid label="'u'"]
  1752 -> 187 [style=solid label="'U'"]
  1752 -> 188 [style=solid label="'L'"]
  1752 -> 264 [style=solid label="\"extern\""]
  1752 -> 29 [style=solid label="\"explicit\""]
  1752 -> 386 [style=solid label="'*'"]
  1752 -> 670 [style=solid label="\"default\""]
  1752 -> 671 [style=solid label="\"try\""]
  1752 -> 203 [style=solid label="'\"'"]
  1752 -> 387 [style=solid label="\"0x\""]
  1752 -> 388 [style=solid label="\"0X\""]
  1752 -> 672 [style=solid label="\"while\""]
  1752 -> 673 [style=solid label="\"do\""]
  1752 -> 674 [style=solid label="\"for\""]
  1752 -> 675 [style=solid label="\"break\""]
  1752 -> 676 [style=solid label="\"continue\""]
  1752 -> 677 [style=solid label="\"return\""]
  1752 -> 678 [style=solid label="\"goto\""]
  1752 -> 679 [style=solid label="\"case\""]
  1752 -> 680 [style=solid label="\"namespace\""]
  1752 -> 389 [style=solid label="\"requires\""]
  1752 -> 390 [style=solid label="\"new\""]
  1752 -> 391 [style=solid label="'~'"]
  1752 -> 392 [style=solid label="'!'"]
  1752 -> 393 [style=solid label="\"++\""]
  1752 -> 394 [style=solid label="\"--\""]
  1752 -> 395 [style=solid label="\"this\""]
  1752 -> 37 [style=solid label="\"auto\""]
  1752 -> 396 [style=solid label="\"nullptr\""]
  1752 -> 397 [style=solid label="\"dynamic_cast\""]
  1752 -> 398 [style=solid label="\"static_cast\""]
  1752 -> 399 [style=solid label="\"reinterpret_cast\""]
  1752 -> 400 [style=solid label="\"const_cast\""]
  1752 -> 401 [style=solid label="\"typeid\""]
  1752 -> 681 [style=solid label="\"if\""]
  1752 -> 682 [style=solid label="\"switch\""]
  1752 -> 38 [style=solid label="\"char\""]
  1752 -> 39 [style=solid label="\"char8_t\""]
  1752 -> 40 [style=solid label="\"char16_t\""]
  1752 -> 41 [style=solid label="\"char32_t\""]
  1752 -> 42 [style=solid label="\"wchar_t\""]
  1752 -> 43 [style=solid label="\"bool\""]
  1752 -> 44 [style=solid label="\"short\""]
  1752 -> 45 [style=solid label="\"int\""]
  1752 -> 46 [style=solid label="\"long\""]
  1752 -> 47 [style=solid label="\"signed\""]
  1752 -> 48 [style=solid label="\"unsigned\""]
  1752 -> 49 [style=solid label="\"float\""]
  1752 -> 50 [style=solid label="\"double\""]
  1752 -> 51 [style=solid label="\"void\""]
  1752 -> 52 [style=solid label="\"static_assert\""]
  1752 -> 53 [style=solid label="\"static\""]
  1752 -> 54 [style=solid label="\"thread_local\""]
  1752 -> 55 [style=solid label="\"mutable\""]
  1752 -> 209 [style=solid label="'R'"]
  1752 -> 528 [style=solid label="\"throw\""]
  1752 -> 56 [style=solid label="\"typename\""]
  1752 -> 402 [style=solid label="\"sizeof\""]
  1752 -> 403 [style=solid label="\"alignof\""]
  1752 -> 529 [style=solid label="\"co_yield\""]
  1752 -> 404 [style=dashed label="additive-expression"]
  1752 -> 57 [style=dashed label="alias-declaration"]
  1752 -> 58 [style=dashed label="alignment-specifier"]
  1752 -> 405 [style=dashed label="and-expression"]
  1752 -> 59 [style=dashed label="asm-declaration"]
  1752 -> 530 [style=dashed label="assignment-expression"]
  1752 -> 61 [style=dashed label="attribute-specifier"]
  1752 -> 683 [style=dashed label="attribute-specifier-seq"]
  1752 -> 406 [style=dashed label="await-expression"]
  1752 -> 407 [style=dashed label="binary-literal"]
  1752 -> 684 [style=dashed label="block-declaration"]
  1752 -> 408 [style=dashed label="boolean-literal"]
  1752 -> 409 [style=dashed label="cast-expression"]
  1752 -> 410 [style=dashed label="character-literal"]
  1752 -> 64 [style=dashed label="class-head"]
  1752 -> 65 [style=dashed label="class-key"]
  1752 -> 66 [style=dashed label="class-name"]
  1752 -> 67 [style=dashed label="class-specifier"]
  1752 -> 411 [style=dashed label="compare-expression"]
  1752 -> 685 [style=dashed label="compound-statement"]
  1752 -> 68 [style=dashed label="concept-name"]
  1752 -> 531 [style=dashed label="conditional-expression"]
  1752 -> 69 [style=dashed label="conversion-function-id"]
  1752 -> 686 [style=dashed label="coroutine-return-statement"]
  1752 -> 70 [style=dashed label="cv-qualifier"]
  1752 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1752 -> 415 [style=dashed label="decimal-literal"]
  1752 -> 71 [style=dashed label="decl-specifier"]
  1752 -> 687 [style=dashed label="decl-specifier-seq"]
  1752 -> 688 [style=dashed label="declaration-statement"]
  1752 -> 77 [style=dashed label="decltype-specifier"]
  1752 -> 79 [style=dashed label="defining-type-specifier"]
  1752 -> 416 [style=dashed label="delete-expression"]
  1752 -> 417 [style=dashed label="digit"]
  1752 -> 418 [style=dashed label="digit-sequence"]
  1752 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1752 -> 81 [style=dashed label="elaborated-type-specifier"]
  1752 -> 419 [style=dashed label="encoding-prefix"]
  1752 -> 83 [style=dashed label="enum-head"]
  1752 -> 84 [style=dashed label="enum-key"]
  1752 -> 85 [style=dashed label="enum-name"]
  1752 -> 86 [style=dashed label="enum-specifier"]
  1752 -> 420 [style=dashed label="equality-expression"]
  1752 -> 421 [style=dashed label="exclusive-or-expression"]
  1752 -> 269 [style=dashed label="explicit-specifier"]
  1752 -> 689 [style=dashed label="expression"]
  1752 -> 690 [style=dashed label="expression-statement"]
  1752 -> 422 [style=dashed label="floating-point-literal"]
  1752 -> 423 [style=dashed label="fold-expression"]
  1752 -> 424 [style=dashed label="fractional-constant"]
  1752 -> 92 [style=dashed label="function-specifier"]
  1752 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1752 -> 426 [style=dashed label="hexadecimal-literal"]
  1752 -> 427 [style=dashed label="hexadecimal-prefix"]
  1752 -> 428 [style=dashed label="id-expression"]
  1752 -> 429 [style=dashed label="inclusive-or-expression"]
  1752 -> 430 [style=dashed label="integer-literal"]
  1752 -> 691 [style=dashed label="iteration-statement"]
  1752 -> 692 [style=dashed label="jump-statement"]
  1752 -> 693 [style=dashed label="labeled-statement"]
  1752 -> 431 [style=dashed label="lambda-expression"]
  1752 -> 432 [style=dashed label="lambda-introducer"]
  1752 -> 433 [style=dashed label="literal"]
  1752 -> 96 [style=dashed label="literal-operator-id"]
  1752 -> 434 [style=dashed label="logical-and-expression"]
  1752 -> 533 [style=dashed label="logical-or-expression"]
  1752 -> 436 [style=dashed label="multiplicative-expression"]
  1752 -> 100 [style=dashed label="namespace-alias"]
  1752 -> 101 [style=dashed label="namespace-alias-definition"]
  1752 -> 103 [style=dashed label="namespace-name"]
  1752 -> 437 [style=dashed label="nested-name-specifier"]
  1752 -> 438 [style=dashed label="new-expression"]
  1752 -> 439 [style=dashed label="noexcept-expression"]
  1752 -> 440 [style=dashed label="nonzero-digit"]
  1752 -> 441 [style=dashed label="octal-literal"]
  1752 -> 108 [style=dashed label="opaque-enum-declaration"]
  1752 -> 109 [style=dashed label="operator-function-id"]
  1752 -> 110 [style=dashed label="placeholder-type-specifier"]
  1752 -> 442 [style=dashed label="pm-expression"]
  1752 -> 443 [style=dashed label="pointer-literal"]
  1752 -> 444 [style=dashed label="postfix-expression"]
  1752 -> 445 [style=dashed label="primary-expression"]
  1752 -> 113 [style=dashed label="qualified-id"]
  1752 -> 446 [style=dashed label="relational-expression"]
  1752 -> 447 [style=dashed label="requires-expression"]
  1752 -> 694 [style=dashed label="selection-statement"]
  1752 -> 448 [style=dashed label="shift-expression"]
  1752 -> 114 [style=dashed label="simple-declaration"]
  1752 -> 115 [style=dashed label="simple-template-id"]
  1752 -> 449 [style=dashed label="simple-type-specifier"]
  1752 -> 1866 [style=dashed label="statement"]
  1752 -> 117 [style=dashed label="static_assert-declaration"]
  1752 -> 118 [style=dashed label="storage-class-specifier"]
  1752 -> 450 [style=dashed label="string-literal"]
  1752 -> 121 [style=dashed label="template-id"]
  1752 -> 216 [style=dashed label="template-name"]
  1752 -> 535 [style=dashed label="throw-expression"]
  1752 -> 697 [style=dashed label="try-block"]
  1752 -> 124 [style=dashed label="type-constraint"]
  1752 -> 125 [style=dashed label="type-name"]
  1752 -> 126 [style=dashed label="type-specifier"]
  1752 -> 127 [style=dashed label="typedef-name"]
  1752 -> 453 [style=dashed label="typename-specifier"]
  1752 -> 454 [style=dashed label="unary-expression"]
  1752 -> 455 [style=dashed label="unary-operator"]
  1752 -> 130 [style=dashed label="unqualified-id"]
  1752 -> 456 [style=dashed label="user-defined-character-literal"]
  1752 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1752 -> 458 [style=dashed label="user-defined-integer-literal"]
  1752 -> 459 [style=dashed label="user-defined-literal"]
  1752 -> 460 [style=dashed label="user-defined-string-literal"]
  1752 -> 131 [style=dashed label="using-declaration"]
  1752 -> 132 [style=dashed label="using-directive"]
  1752 -> 133 [style=dashed label="using-enum-declaration"]
  1752 -> 537 [style=dashed label="yield-expression"]
  1753 [label="State 1753\n\l166 condition: decl-specifier-seq declarator • brace-or-equal-initializer\l"]
  1753 -> 1280 [style=solid label="'='"]
  1753 -> 939 [style=solid label="'{'"]
  1753 -> 1867 [style=dashed label="brace-or-equal-initializer"]
  1753 -> 650 [style=dashed label="braced-init-list"]
  1754 [label="State 1754\n\l510 iteration-statement: \"do\" statement \"while\" '(' • expression ')' ';'\l"]
  1754 -> 1 [style=solid label="IDENTIFIER"]
  1754 -> 361 [style=solid label="'+'"]
  1754 -> 362 [style=solid label="'-'"]
  1754 -> 363 [style=solid label="'('"]
  1754 -> 364 [style=solid label="'&'"]
  1754 -> 365 [style=solid label="\"::\""]
  1754 -> 366 [style=solid label="'['"]
  1754 -> 367 [style=solid label="\"co_await\""]
  1754 -> 368 [style=solid label="'0'"]
  1754 -> 369 [style=solid label="'1'"]
  1754 -> 370 [style=solid label="\"0b\""]
  1754 -> 371 [style=solid label="\"0B\""]
  1754 -> 372 [style=solid label="'\\''"]
  1754 -> 373 [style=solid label="\"false\""]
  1754 -> 374 [style=solid label="\"true\""]
  1754 -> 375 [style=solid label="\"noexcept\""]
  1754 -> 17 [style=solid label="\"operator\""]
  1754 -> 26 [style=solid label="\"decltype\""]
  1754 -> 376 [style=solid label="\"delete\""]
  1754 -> 377 [style=solid label="'.'"]
  1754 -> 378 [style=solid label="'2'"]
  1754 -> 379 [style=solid label="'3'"]
  1754 -> 380 [style=solid label="'4'"]
  1754 -> 381 [style=solid label="'5'"]
  1754 -> 382 [style=solid label="'6'"]
  1754 -> 383 [style=solid label="'7'"]
  1754 -> 384 [style=solid label="'8'"]
  1754 -> 385 [style=solid label="'9'"]
  1754 -> 185 [style=solid label="\"u8\""]
  1754 -> 186 [style=solid label="'u'"]
  1754 -> 187 [style=solid label="'U'"]
  1754 -> 188 [style=solid label="'L'"]
  1754 -> 386 [style=solid label="'*'"]
  1754 -> 203 [style=solid label="'\"'"]
  1754 -> 387 [style=solid label="\"0x\""]
  1754 -> 388 [style=solid label="\"0X\""]
  1754 -> 389 [style=solid label="\"requires\""]
  1754 -> 390 [style=solid label="\"new\""]
  1754 -> 391 [style=solid label="'~'"]
  1754 -> 392 [style=solid label="'!'"]
  1754 -> 393 [style=solid label="\"++\""]
  1754 -> 394 [style=solid label="\"--\""]
  1754 -> 395 [style=solid label="\"this\""]
  1754 -> 37 [style=solid label="\"auto\""]
  1754 -> 396 [style=solid label="\"nullptr\""]
  1754 -> 397 [style=solid label="\"dynamic_cast\""]
  1754 -> 398 [style=solid label="\"static_cast\""]
  1754 -> 399 [style=solid label="\"reinterpret_cast\""]
  1754 -> 400 [style=solid label="\"const_cast\""]
  1754 -> 401 [style=solid label="\"typeid\""]
  1754 -> 38 [style=solid label="\"char\""]
  1754 -> 39 [style=solid label="\"char8_t\""]
  1754 -> 40 [style=solid label="\"char16_t\""]
  1754 -> 41 [style=solid label="\"char32_t\""]
  1754 -> 42 [style=solid label="\"wchar_t\""]
  1754 -> 43 [style=solid label="\"bool\""]
  1754 -> 44 [style=solid label="\"short\""]
  1754 -> 45 [style=solid label="\"int\""]
  1754 -> 46 [style=solid label="\"long\""]
  1754 -> 47 [style=solid label="\"signed\""]
  1754 -> 48 [style=solid label="\"unsigned\""]
  1754 -> 49 [style=solid label="\"float\""]
  1754 -> 50 [style=solid label="\"double\""]
  1754 -> 51 [style=solid label="\"void\""]
  1754 -> 209 [style=solid label="'R'"]
  1754 -> 528 [style=solid label="\"throw\""]
  1754 -> 56 [style=solid label="\"typename\""]
  1754 -> 402 [style=solid label="\"sizeof\""]
  1754 -> 403 [style=solid label="\"alignof\""]
  1754 -> 529 [style=solid label="\"co_yield\""]
  1754 -> 404 [style=dashed label="additive-expression"]
  1754 -> 405 [style=dashed label="and-expression"]
  1754 -> 530 [style=dashed label="assignment-expression"]
  1754 -> 406 [style=dashed label="await-expression"]
  1754 -> 407 [style=dashed label="binary-literal"]
  1754 -> 408 [style=dashed label="boolean-literal"]
  1754 -> 409 [style=dashed label="cast-expression"]
  1754 -> 410 [style=dashed label="character-literal"]
  1754 -> 66 [style=dashed label="class-name"]
  1754 -> 411 [style=dashed label="compare-expression"]
  1754 -> 68 [style=dashed label="concept-name"]
  1754 -> 531 [style=dashed label="conditional-expression"]
  1754 -> 69 [style=dashed label="conversion-function-id"]
  1754 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1754 -> 415 [style=dashed label="decimal-literal"]
  1754 -> 77 [style=dashed label="decltype-specifier"]
  1754 -> 416 [style=dashed label="delete-expression"]
  1754 -> 417 [style=dashed label="digit"]
  1754 -> 418 [style=dashed label="digit-sequence"]
  1754 -> 419 [style=dashed label="encoding-prefix"]
  1754 -> 85 [style=dashed label="enum-name"]
  1754 -> 420 [style=dashed label="equality-expression"]
  1754 -> 421 [style=dashed label="exclusive-or-expression"]
  1754 -> 1868 [style=dashed label="expression"]
  1754 -> 422 [style=dashed label="floating-point-literal"]
  1754 -> 423 [style=dashed label="fold-expression"]
  1754 -> 424 [style=dashed label="fractional-constant"]
  1754 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1754 -> 426 [style=dashed label="hexadecimal-literal"]
  1754 -> 427 [style=dashed label="hexadecimal-prefix"]
  1754 -> 428 [style=dashed label="id-expression"]
  1754 -> 429 [style=dashed label="inclusive-or-expression"]
  1754 -> 430 [style=dashed label="integer-literal"]
  1754 -> 431 [style=dashed label="lambda-expression"]
  1754 -> 432 [style=dashed label="lambda-introducer"]
  1754 -> 433 [style=dashed label="literal"]
  1754 -> 96 [style=dashed label="literal-operator-id"]
  1754 -> 434 [style=dashed label="logical-and-expression"]
  1754 -> 533 [style=dashed label="logical-or-expression"]
  1754 -> 436 [style=dashed label="multiplicative-expression"]
  1754 -> 100 [style=dashed label="namespace-alias"]
  1754 -> 103 [style=dashed label="namespace-name"]
  1754 -> 437 [style=dashed label="nested-name-specifier"]
  1754 -> 438 [style=dashed label="new-expression"]
  1754 -> 439 [style=dashed label="noexcept-expression"]
  1754 -> 440 [style=dashed label="nonzero-digit"]
  1754 -> 441 [style=dashed label="octal-literal"]
  1754 -> 109 [style=dashed label="operator-function-id"]
  1754 -> 110 [style=dashed label="placeholder-type-specifier"]
  1754 -> 442 [style=dashed label="pm-expression"]
  1754 -> 443 [style=dashed label="pointer-literal"]
  1754 -> 444 [style=dashed label="postfix-expression"]
  1754 -> 445 [style=dashed label="primary-expression"]
  1754 -> 113 [style=dashed label="qualified-id"]
  1754 -> 446 [style=dashed label="relational-expression"]
  1754 -> 447 [style=dashed label="requires-expression"]
  1754 -> 448 [style=dashed label="shift-expression"]
  1754 -> 115 [style=dashed label="simple-template-id"]
  1754 -> 534 [style=dashed label="simple-type-specifier"]
  1754 -> 450 [style=dashed label="string-literal"]
  1754 -> 121 [style=dashed label="template-id"]
  1754 -> 216 [style=dashed label="template-name"]
  1754 -> 535 [style=dashed label="throw-expression"]
  1754 -> 124 [style=dashed label="type-constraint"]
  1754 -> 125 [style=dashed label="type-name"]
  1754 -> 127 [style=dashed label="typedef-name"]
  1754 -> 536 [style=dashed label="typename-specifier"]
  1754 -> 454 [style=dashed label="unary-expression"]
  1754 -> 455 [style=dashed label="unary-operator"]
  1754 -> 130 [style=dashed label="unqualified-id"]
  1754 -> 456 [style=dashed label="user-defined-character-literal"]
  1754 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1754 -> 458 [style=dashed label="user-defined-integer-literal"]
  1754 -> 459 [style=dashed label="user-defined-literal"]
  1754 -> 460 [style=dashed label="user-defined-string-literal"]
  1754 -> 537 [style=dashed label="yield-expression"]
  1755 [label="State 1755\n\l 13 alias-declaration: \"using\" IDENTIFIER • '=' defining-type-id ';'\l 14                  | \"using\" IDENTIFIER • attribute-specifier-seq '=' defining-type-id ';'\l"]
  1755 -> 347 [style=solid label="'='"]
  1755 -> 4 [style=solid label="\"alignas\""]
  1755 -> 10 [style=solid label="'['"]
  1755 -> 58 [style=dashed label="alignment-specifier"]
  1755 -> 61 [style=dashed label="attribute-specifier"]
  1755 -> 348 [style=dashed label="attribute-specifier-seq"]
  1756 [label="State 1756\n\l383 for-range-declaration: attribute-specifier-seq decl-specifier-seq • declarator\l385                      | attribute-specifier-seq decl-specifier-seq • '[' identifier-list ']'\l387                      | attribute-specifier-seq decl-specifier-seq • ref-qualifier '[' identifier-list ']'\l979 simple-declaration: attribute-specifier-seq decl-specifier-seq • init-declarator-list ';'\l980                   | attribute-specifier-seq decl-specifier-seq • '[' identifier-list ']' initializer ';'\l982                   | attribute-specifier-seq decl-specifier-seq • ref-qualifier '[' identifier-list ']' initializer ';'\l"]
  1756 -> 148 [style=solid label="IDENTIFIER"]
  1756 -> 5 [style=solid label="'('"]
  1756 -> 6 [style=solid label="\"...\""]
  1756 -> 283 [style=solid label="'&'"]
  1756 -> 9 [style=solid label="\"::\""]
  1756 -> 1869 [style=solid label="'['"]
  1756 -> 285 [style=solid label="\"&&\""]
  1756 -> 17 [style=solid label="\"operator\""]
  1756 -> 135 [style=solid label="\"decltype\""]
  1756 -> 32 [style=solid label="'*'"]
  1756 -> 36 [style=solid label="'~'"]
  1756 -> 66 [style=dashed label="class-name"]
  1756 -> 69 [style=dashed label="conversion-function-id"]
  1756 -> 1870 [style=dashed label="declarator"]
  1756 -> 76 [style=dashed label="declarator-id"]
  1756 -> 139 [style=dashed label="decltype-specifier"]
  1756 -> 85 [style=dashed label="enum-name"]
  1756 -> 94 [style=dashed label="id-expression"]
  1756 -> 287 [style=dashed label="init-declarator"]
  1756 -> 583 [style=dashed label="init-declarator-list"]
  1756 -> 96 [style=dashed label="literal-operator-id"]
  1756 -> 100 [style=dashed label="namespace-alias"]
  1756 -> 103 [style=dashed label="namespace-name"]
  1756 -> 149 [style=dashed label="nested-name-specifier"]
  1756 -> 107 [style=dashed label="noptr-declarator"]
  1756 -> 109 [style=dashed label="operator-function-id"]
  1756 -> 111 [style=dashed label="ptr-declarator"]
  1756 -> 112 [style=dashed label="ptr-operator"]
  1756 -> 113 [style=dashed label="qualified-id"]
  1756 -> 1871 [style=dashed label="ref-qualifier"]
  1756 -> 115 [style=dashed label="simple-template-id"]
  1756 -> 121 [style=dashed label="template-id"]
  1756 -> 143 [style=dashed label="template-name"]
  1756 -> 144 [style=dashed label="type-name"]
  1756 -> 127 [style=dashed label="typedef-name"]
  1756 -> 130 [style=dashed label="unqualified-id"]
  1757 [label="State 1757\n\l386 for-range-declaration: decl-specifier-seq '[' • identifier-list ']'\l981 simple-declaration: decl-specifier-seq '[' • identifier-list ']' initializer ';'\l"]
  1757 -> 644 [style=solid label="IDENTIFIER"]
  1757 -> 1872 [style=dashed label="identifier-list"]
  1758 [label="State 1758\n\l384 for-range-declaration: decl-specifier-seq declarator •\l473 init-declarator: declarator •\l474                | declarator • initializer\l475                | declarator • requires-clause\l"]
  1758 -> 1280 [style=solid label="'='"]
  1758 -> 647 [style=solid label="'('"]
  1758 -> 939 [style=solid label="'{'"]
  1758 -> 297 [style=solid label="\"requires\""]
  1758 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1758 -> 650 [style=dashed label="braced-init-list"]
  1758 -> 652 [style=dashed label="initializer"]
  1758 -> 1535 [style=dashed label="requires-clause"]
  1758 -> "1758R384" [label="[':']", style=solid]
 "1758R384" [label="R384", fillcolor=3, shape=diamond, style=filled]
  1758 -> "1758R473" [style=solid]
 "1758R473" [label="R473", fillcolor=3, shape=diamond, style=filled]
  1759 [label="State 1759\n\l388 for-range-declaration: decl-specifier-seq ref-qualifier • '[' identifier-list ']'\l983 simple-declaration: decl-specifier-seq ref-qualifier • '[' identifier-list ']' initializer ';'\l"]
  1759 -> 1873 [style=solid label="'['"]
  1760 [label="State 1760\n\l515 iteration-statement: \"for\" '(' for-range-declaration ':' • for-range-initializer ')' statement\l"]
  1760 -> 1 [style=solid label="IDENTIFIER"]
  1760 -> 361 [style=solid label="'+'"]
  1760 -> 362 [style=solid label="'-'"]
  1760 -> 363 [style=solid label="'('"]
  1760 -> 364 [style=solid label="'&'"]
  1760 -> 365 [style=solid label="\"::\""]
  1760 -> 366 [style=solid label="'['"]
  1760 -> 367 [style=solid label="\"co_await\""]
  1760 -> 939 [style=solid label="'{'"]
  1760 -> 368 [style=solid label="'0'"]
  1760 -> 369 [style=solid label="'1'"]
  1760 -> 370 [style=solid label="\"0b\""]
  1760 -> 371 [style=solid label="\"0B\""]
  1760 -> 372 [style=solid label="'\\''"]
  1760 -> 373 [style=solid label="\"false\""]
  1760 -> 374 [style=solid label="\"true\""]
  1760 -> 375 [style=solid label="\"noexcept\""]
  1760 -> 17 [style=solid label="\"operator\""]
  1760 -> 26 [style=solid label="\"decltype\""]
  1760 -> 376 [style=solid label="\"delete\""]
  1760 -> 377 [style=solid label="'.'"]
  1760 -> 378 [style=solid label="'2'"]
  1760 -> 379 [style=solid label="'3'"]
  1760 -> 380 [style=solid label="'4'"]
  1760 -> 381 [style=solid label="'5'"]
  1760 -> 382 [style=solid label="'6'"]
  1760 -> 383 [style=solid label="'7'"]
  1760 -> 384 [style=solid label="'8'"]
  1760 -> 385 [style=solid label="'9'"]
  1760 -> 185 [style=solid label="\"u8\""]
  1760 -> 186 [style=solid label="'u'"]
  1760 -> 187 [style=solid label="'U'"]
  1760 -> 188 [style=solid label="'L'"]
  1760 -> 386 [style=solid label="'*'"]
  1760 -> 203 [style=solid label="'\"'"]
  1760 -> 387 [style=solid label="\"0x\""]
  1760 -> 388 [style=solid label="\"0X\""]
  1760 -> 389 [style=solid label="\"requires\""]
  1760 -> 390 [style=solid label="\"new\""]
  1760 -> 391 [style=solid label="'~'"]
  1760 -> 392 [style=solid label="'!'"]
  1760 -> 393 [style=solid label="\"++\""]
  1760 -> 394 [style=solid label="\"--\""]
  1760 -> 395 [style=solid label="\"this\""]
  1760 -> 37 [style=solid label="\"auto\""]
  1760 -> 396 [style=solid label="\"nullptr\""]
  1760 -> 397 [style=solid label="\"dynamic_cast\""]
  1760 -> 398 [style=solid label="\"static_cast\""]
  1760 -> 399 [style=solid label="\"reinterpret_cast\""]
  1760 -> 400 [style=solid label="\"const_cast\""]
  1760 -> 401 [style=solid label="\"typeid\""]
  1760 -> 38 [style=solid label="\"char\""]
  1760 -> 39 [style=solid label="\"char8_t\""]
  1760 -> 40 [style=solid label="\"char16_t\""]
  1760 -> 41 [style=solid label="\"char32_t\""]
  1760 -> 42 [style=solid label="\"wchar_t\""]
  1760 -> 43 [style=solid label="\"bool\""]
  1760 -> 44 [style=solid label="\"short\""]
  1760 -> 45 [style=solid label="\"int\""]
  1760 -> 46 [style=solid label="\"long\""]
  1760 -> 47 [style=solid label="\"signed\""]
  1760 -> 48 [style=solid label="\"unsigned\""]
  1760 -> 49 [style=solid label="\"float\""]
  1760 -> 50 [style=solid label="\"double\""]
  1760 -> 51 [style=solid label="\"void\""]
  1760 -> 209 [style=solid label="'R'"]
  1760 -> 528 [style=solid label="\"throw\""]
  1760 -> 56 [style=solid label="\"typename\""]
  1760 -> 402 [style=solid label="\"sizeof\""]
  1760 -> 403 [style=solid label="\"alignof\""]
  1760 -> 529 [style=solid label="\"co_yield\""]
  1760 -> 404 [style=dashed label="additive-expression"]
  1760 -> 405 [style=dashed label="and-expression"]
  1760 -> 530 [style=dashed label="assignment-expression"]
  1760 -> 406 [style=dashed label="await-expression"]
  1760 -> 407 [style=dashed label="binary-literal"]
  1760 -> 408 [style=dashed label="boolean-literal"]
  1760 -> 1167 [style=dashed label="braced-init-list"]
  1760 -> 409 [style=dashed label="cast-expression"]
  1760 -> 410 [style=dashed label="character-literal"]
  1760 -> 66 [style=dashed label="class-name"]
  1760 -> 411 [style=dashed label="compare-expression"]
  1760 -> 68 [style=dashed label="concept-name"]
  1760 -> 531 [style=dashed label="conditional-expression"]
  1760 -> 69 [style=dashed label="conversion-function-id"]
  1760 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1760 -> 415 [style=dashed label="decimal-literal"]
  1760 -> 77 [style=dashed label="decltype-specifier"]
  1760 -> 416 [style=dashed label="delete-expression"]
  1760 -> 417 [style=dashed label="digit"]
  1760 -> 418 [style=dashed label="digit-sequence"]
  1760 -> 419 [style=dashed label="encoding-prefix"]
  1760 -> 85 [style=dashed label="enum-name"]
  1760 -> 420 [style=dashed label="equality-expression"]
  1760 -> 421 [style=dashed label="exclusive-or-expression"]
  1760 -> 1874 [style=dashed label="expr-or-braced-init-list"]
  1760 -> 1169 [style=dashed label="expression"]
  1760 -> 422 [style=dashed label="floating-point-literal"]
  1760 -> 423 [style=dashed label="fold-expression"]
  1760 -> 1875 [style=dashed label="for-range-initializer"]
  1760 -> 424 [style=dashed label="fractional-constant"]
  1760 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1760 -> 426 [style=dashed label="hexadecimal-literal"]
  1760 -> 427 [style=dashed label="hexadecimal-prefix"]
  1760 -> 428 [style=dashed label="id-expression"]
  1760 -> 429 [style=dashed label="inclusive-or-expression"]
  1760 -> 430 [style=dashed label="integer-literal"]
  1760 -> 431 [style=dashed label="lambda-expression"]
  1760 -> 432 [style=dashed label="lambda-introducer"]
  1760 -> 433 [style=dashed label="literal"]
  1760 -> 96 [style=dashed label="literal-operator-id"]
  1760 -> 434 [style=dashed label="logical-and-expression"]
  1760 -> 533 [style=dashed label="logical-or-expression"]
  1760 -> 436 [style=dashed label="multiplicative-expression"]
  1760 -> 100 [style=dashed label="namespace-alias"]
  1760 -> 103 [style=dashed label="namespace-name"]
  1760 -> 437 [style=dashed label="nested-name-specifier"]
  1760 -> 438 [style=dashed label="new-expression"]
  1760 -> 439 [style=dashed label="noexcept-expression"]
  1760 -> 440 [style=dashed label="nonzero-digit"]
  1760 -> 441 [style=dashed label="octal-literal"]
  1760 -> 109 [style=dashed label="operator-function-id"]
  1760 -> 110 [style=dashed label="placeholder-type-specifier"]
  1760 -> 442 [style=dashed label="pm-expression"]
  1760 -> 443 [style=dashed label="pointer-literal"]
  1760 -> 444 [style=dashed label="postfix-expression"]
  1760 -> 445 [style=dashed label="primary-expression"]
  1760 -> 113 [style=dashed label="qualified-id"]
  1760 -> 446 [style=dashed label="relational-expression"]
  1760 -> 447 [style=dashed label="requires-expression"]
  1760 -> 448 [style=dashed label="shift-expression"]
  1760 -> 115 [style=dashed label="simple-template-id"]
  1760 -> 534 [style=dashed label="simple-type-specifier"]
  1760 -> 450 [style=dashed label="string-literal"]
  1760 -> 121 [style=dashed label="template-id"]
  1760 -> 216 [style=dashed label="template-name"]
  1760 -> 535 [style=dashed label="throw-expression"]
  1760 -> 124 [style=dashed label="type-constraint"]
  1760 -> 125 [style=dashed label="type-name"]
  1760 -> 127 [style=dashed label="typedef-name"]
  1760 -> 536 [style=dashed label="typename-specifier"]
  1760 -> 454 [style=dashed label="unary-expression"]
  1760 -> 455 [style=dashed label="unary-operator"]
  1760 -> 130 [style=dashed label="unqualified-id"]
  1760 -> 456 [style=dashed label="user-defined-character-literal"]
  1760 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1760 -> 458 [style=dashed label="user-defined-integer-literal"]
  1760 -> 459 [style=dashed label="user-defined-literal"]
  1760 -> 460 [style=dashed label="user-defined-string-literal"]
  1760 -> 537 [style=dashed label="yield-expression"]
  1761 [label="State 1761\n\l511 iteration-statement: \"for\" '(' init-statement ';' • ')' statement\l513                    | \"for\" '(' init-statement ';' • expression ')' statement\l"]
  1761 -> 1 [style=solid label="IDENTIFIER"]
  1761 -> 361 [style=solid label="'+'"]
  1761 -> 362 [style=solid label="'-'"]
  1761 -> 363 [style=solid label="'('"]
  1761 -> 1876 [style=solid label="')'"]
  1761 -> 364 [style=solid label="'&'"]
  1761 -> 365 [style=solid label="\"::\""]
  1761 -> 366 [style=solid label="'['"]
  1761 -> 367 [style=solid label="\"co_await\""]
  1761 -> 368 [style=solid label="'0'"]
  1761 -> 369 [style=solid label="'1'"]
  1761 -> 370 [style=solid label="\"0b\""]
  1761 -> 371 [style=solid label="\"0B\""]
  1761 -> 372 [style=solid label="'\\''"]
  1761 -> 373 [style=solid label="\"false\""]
  1761 -> 374 [style=solid label="\"true\""]
  1761 -> 375 [style=solid label="\"noexcept\""]
  1761 -> 17 [style=solid label="\"operator\""]
  1761 -> 26 [style=solid label="\"decltype\""]
  1761 -> 376 [style=solid label="\"delete\""]
  1761 -> 377 [style=solid label="'.'"]
  1761 -> 378 [style=solid label="'2'"]
  1761 -> 379 [style=solid label="'3'"]
  1761 -> 380 [style=solid label="'4'"]
  1761 -> 381 [style=solid label="'5'"]
  1761 -> 382 [style=solid label="'6'"]
  1761 -> 383 [style=solid label="'7'"]
  1761 -> 384 [style=solid label="'8'"]
  1761 -> 385 [style=solid label="'9'"]
  1761 -> 185 [style=solid label="\"u8\""]
  1761 -> 186 [style=solid label="'u'"]
  1761 -> 187 [style=solid label="'U'"]
  1761 -> 188 [style=solid label="'L'"]
  1761 -> 386 [style=solid label="'*'"]
  1761 -> 203 [style=solid label="'\"'"]
  1761 -> 387 [style=solid label="\"0x\""]
  1761 -> 388 [style=solid label="\"0X\""]
  1761 -> 389 [style=solid label="\"requires\""]
  1761 -> 390 [style=solid label="\"new\""]
  1761 -> 391 [style=solid label="'~'"]
  1761 -> 392 [style=solid label="'!'"]
  1761 -> 393 [style=solid label="\"++\""]
  1761 -> 394 [style=solid label="\"--\""]
  1761 -> 395 [style=solid label="\"this\""]
  1761 -> 37 [style=solid label="\"auto\""]
  1761 -> 396 [style=solid label="\"nullptr\""]
  1761 -> 397 [style=solid label="\"dynamic_cast\""]
  1761 -> 398 [style=solid label="\"static_cast\""]
  1761 -> 399 [style=solid label="\"reinterpret_cast\""]
  1761 -> 400 [style=solid label="\"const_cast\""]
  1761 -> 401 [style=solid label="\"typeid\""]
  1761 -> 38 [style=solid label="\"char\""]
  1761 -> 39 [style=solid label="\"char8_t\""]
  1761 -> 40 [style=solid label="\"char16_t\""]
  1761 -> 41 [style=solid label="\"char32_t\""]
  1761 -> 42 [style=solid label="\"wchar_t\""]
  1761 -> 43 [style=solid label="\"bool\""]
  1761 -> 44 [style=solid label="\"short\""]
  1761 -> 45 [style=solid label="\"int\""]
  1761 -> 46 [style=solid label="\"long\""]
  1761 -> 47 [style=solid label="\"signed\""]
  1761 -> 48 [style=solid label="\"unsigned\""]
  1761 -> 49 [style=solid label="\"float\""]
  1761 -> 50 [style=solid label="\"double\""]
  1761 -> 51 [style=solid label="\"void\""]
  1761 -> 209 [style=solid label="'R'"]
  1761 -> 528 [style=solid label="\"throw\""]
  1761 -> 56 [style=solid label="\"typename\""]
  1761 -> 402 [style=solid label="\"sizeof\""]
  1761 -> 403 [style=solid label="\"alignof\""]
  1761 -> 529 [style=solid label="\"co_yield\""]
  1761 -> 404 [style=dashed label="additive-expression"]
  1761 -> 405 [style=dashed label="and-expression"]
  1761 -> 530 [style=dashed label="assignment-expression"]
  1761 -> 406 [style=dashed label="await-expression"]
  1761 -> 407 [style=dashed label="binary-literal"]
  1761 -> 408 [style=dashed label="boolean-literal"]
  1761 -> 409 [style=dashed label="cast-expression"]
  1761 -> 410 [style=dashed label="character-literal"]
  1761 -> 66 [style=dashed label="class-name"]
  1761 -> 411 [style=dashed label="compare-expression"]
  1761 -> 68 [style=dashed label="concept-name"]
  1761 -> 531 [style=dashed label="conditional-expression"]
  1761 -> 69 [style=dashed label="conversion-function-id"]
  1761 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1761 -> 415 [style=dashed label="decimal-literal"]
  1761 -> 77 [style=dashed label="decltype-specifier"]
  1761 -> 416 [style=dashed label="delete-expression"]
  1761 -> 417 [style=dashed label="digit"]
  1761 -> 418 [style=dashed label="digit-sequence"]
  1761 -> 419 [style=dashed label="encoding-prefix"]
  1761 -> 85 [style=dashed label="enum-name"]
  1761 -> 420 [style=dashed label="equality-expression"]
  1761 -> 421 [style=dashed label="exclusive-or-expression"]
  1761 -> 1877 [style=dashed label="expression"]
  1761 -> 422 [style=dashed label="floating-point-literal"]
  1761 -> 423 [style=dashed label="fold-expression"]
  1761 -> 424 [style=dashed label="fractional-constant"]
  1761 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1761 -> 426 [style=dashed label="hexadecimal-literal"]
  1761 -> 427 [style=dashed label="hexadecimal-prefix"]
  1761 -> 428 [style=dashed label="id-expression"]
  1761 -> 429 [style=dashed label="inclusive-or-expression"]
  1761 -> 430 [style=dashed label="integer-literal"]
  1761 -> 431 [style=dashed label="lambda-expression"]
  1761 -> 432 [style=dashed label="lambda-introducer"]
  1761 -> 433 [style=dashed label="literal"]
  1761 -> 96 [style=dashed label="literal-operator-id"]
  1761 -> 434 [style=dashed label="logical-and-expression"]
  1761 -> 533 [style=dashed label="logical-or-expression"]
  1761 -> 436 [style=dashed label="multiplicative-expression"]
  1761 -> 100 [style=dashed label="namespace-alias"]
  1761 -> 103 [style=dashed label="namespace-name"]
  1761 -> 437 [style=dashed label="nested-name-specifier"]
  1761 -> 438 [style=dashed label="new-expression"]
  1761 -> 439 [style=dashed label="noexcept-expression"]
  1761 -> 440 [style=dashed label="nonzero-digit"]
  1761 -> 441 [style=dashed label="octal-literal"]
  1761 -> 109 [style=dashed label="operator-function-id"]
  1761 -> 110 [style=dashed label="placeholder-type-specifier"]
  1761 -> 442 [style=dashed label="pm-expression"]
  1761 -> 443 [style=dashed label="pointer-literal"]
  1761 -> 444 [style=dashed label="postfix-expression"]
  1761 -> 445 [style=dashed label="primary-expression"]
  1761 -> 113 [style=dashed label="qualified-id"]
  1761 -> 446 [style=dashed label="relational-expression"]
  1761 -> 447 [style=dashed label="requires-expression"]
  1761 -> 448 [style=dashed label="shift-expression"]
  1761 -> 115 [style=dashed label="simple-template-id"]
  1761 -> 534 [style=dashed label="simple-type-specifier"]
  1761 -> 450 [style=dashed label="string-literal"]
  1761 -> 121 [style=dashed label="template-id"]
  1761 -> 216 [style=dashed label="template-name"]
  1761 -> 535 [style=dashed label="throw-expression"]
  1761 -> 124 [style=dashed label="type-constraint"]
  1761 -> 125 [style=dashed label="type-name"]
  1761 -> 127 [style=dashed label="typedef-name"]
  1761 -> 536 [style=dashed label="typename-specifier"]
  1761 -> 454 [style=dashed label="unary-expression"]
  1761 -> 455 [style=dashed label="unary-operator"]
  1761 -> 130 [style=dashed label="unqualified-id"]
  1761 -> 456 [style=dashed label="user-defined-character-literal"]
  1761 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1761 -> 458 [style=dashed label="user-defined-integer-literal"]
  1761 -> 459 [style=dashed label="user-defined-literal"]
  1761 -> 460 [style=dashed label="user-defined-string-literal"]
  1761 -> 537 [style=dashed label="yield-expression"]
  1762 [label="State 1762\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l165 condition: attribute-specifier-seq • decl-specifier-seq declarator brace-or-equal-initializer\l383 for-range-declaration: attribute-specifier-seq • decl-specifier-seq declarator\l385                      | attribute-specifier-seq • decl-specifier-seq '[' identifier-list ']'\l387                      | attribute-specifier-seq • decl-specifier-seq ref-qualifier '[' identifier-list ']'\l"]
  1762 -> 161 [style=solid label="IDENTIFIER"]
  1762 -> 4 [style=solid label="\"alignas\""]
  1762 -> 9 [style=solid label="\"::\""]
  1762 -> 10 [style=solid label="'['"]
  1762 -> 11 [style=solid label="\"virtual\""]
  1762 -> 12 [style=solid label="\"class\""]
  1762 -> 13 [style=solid label="\"struct\""]
  1762 -> 14 [style=solid label="\"union\""]
  1762 -> 18 [style=solid label="\"const\""]
  1762 -> 19 [style=solid label="\"volatile\""]
  1762 -> 20 [style=solid label="\"friend\""]
  1762 -> 21 [style=solid label="\"typedef\""]
  1762 -> 22 [style=solid label="\"constexpr\""]
  1762 -> 23 [style=solid label="\"consteval\""]
  1762 -> 24 [style=solid label="\"constinit\""]
  1762 -> 263 [style=solid label="\"inline\""]
  1762 -> 26 [style=solid label="\"decltype\""]
  1762 -> 27 [style=solid label="\"enum\""]
  1762 -> 264 [style=solid label="\"extern\""]
  1762 -> 29 [style=solid label="\"explicit\""]
  1762 -> 37 [style=solid label="\"auto\""]
  1762 -> 38 [style=solid label="\"char\""]
  1762 -> 39 [style=solid label="\"char8_t\""]
  1762 -> 40 [style=solid label="\"char16_t\""]
  1762 -> 41 [style=solid label="\"char32_t\""]
  1762 -> 42 [style=solid label="\"wchar_t\""]
  1762 -> 43 [style=solid label="\"bool\""]
  1762 -> 44 [style=solid label="\"short\""]
  1762 -> 45 [style=solid label="\"int\""]
  1762 -> 46 [style=solid label="\"long\""]
  1762 -> 47 [style=solid label="\"signed\""]
  1762 -> 48 [style=solid label="\"unsigned\""]
  1762 -> 49 [style=solid label="\"float\""]
  1762 -> 50 [style=solid label="\"double\""]
  1762 -> 51 [style=solid label="\"void\""]
  1762 -> 53 [style=solid label="\"static\""]
  1762 -> 54 [style=solid label="\"thread_local\""]
  1762 -> 55 [style=solid label="\"mutable\""]
  1762 -> 56 [style=solid label="\"typename\""]
  1762 -> 58 [style=dashed label="alignment-specifier"]
  1762 -> 265 [style=dashed label="attribute-specifier"]
  1762 -> 64 [style=dashed label="class-head"]
  1762 -> 65 [style=dashed label="class-key"]
  1762 -> 66 [style=dashed label="class-name"]
  1762 -> 67 [style=dashed label="class-specifier"]
  1762 -> 68 [style=dashed label="concept-name"]
  1762 -> 70 [style=dashed label="cv-qualifier"]
  1762 -> 71 [style=dashed label="decl-specifier"]
  1762 -> 1878 [style=dashed label="decl-specifier-seq"]
  1762 -> 77 [style=dashed label="decltype-specifier"]
  1762 -> 79 [style=dashed label="defining-type-specifier"]
  1762 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1762 -> 81 [style=dashed label="elaborated-type-specifier"]
  1762 -> 83 [style=dashed label="enum-head"]
  1762 -> 268 [style=dashed label="enum-key"]
  1762 -> 85 [style=dashed label="enum-name"]
  1762 -> 86 [style=dashed label="enum-specifier"]
  1762 -> 269 [style=dashed label="explicit-specifier"]
  1762 -> 92 [style=dashed label="function-specifier"]
  1762 -> 100 [style=dashed label="namespace-alias"]
  1762 -> 103 [style=dashed label="namespace-name"]
  1762 -> 213 [style=dashed label="nested-name-specifier"]
  1762 -> 110 [style=dashed label="placeholder-type-specifier"]
  1762 -> 142 [style=dashed label="simple-template-id"]
  1762 -> 116 [style=dashed label="simple-type-specifier"]
  1762 -> 118 [style=dashed label="storage-class-specifier"]
  1762 -> 216 [style=dashed label="template-name"]
  1762 -> 124 [style=dashed label="type-constraint"]
  1762 -> 125 [style=dashed label="type-name"]
  1762 -> 126 [style=dashed label="type-specifier"]
  1762 -> 127 [style=dashed label="typedef-name"]
  1762 -> 128 [style=dashed label="typename-specifier"]
  1763 [label="State 1763\n\l512 iteration-statement: \"for\" '(' init-statement condition • ';' ')' statement\l514                    | \"for\" '(' init-statement condition • ';' expression ')' statement\l"]
  1763 -> 1879 [style=solid label="';'"]
  1764 [label="State 1764\n\l166 condition: decl-specifier-seq • declarator brace-or-equal-initializer\l384 for-range-declaration: decl-specifier-seq • declarator\l386                      | decl-specifier-seq • '[' identifier-list ']'\l388                      | decl-specifier-seq • ref-qualifier '[' identifier-list ']'\l"]
  1764 -> 148 [style=solid label="IDENTIFIER"]
  1764 -> 5 [style=solid label="'('"]
  1764 -> 6 [style=solid label="\"...\""]
  1764 -> 283 [style=solid label="'&'"]
  1764 -> 9 [style=solid label="\"::\""]
  1764 -> 1880 [style=solid label="'['"]
  1764 -> 285 [style=solid label="\"&&\""]
  1764 -> 17 [style=solid label="\"operator\""]
  1764 -> 135 [style=solid label="\"decltype\""]
  1764 -> 32 [style=solid label="'*'"]
  1764 -> 36 [style=solid label="'~'"]
  1764 -> 66 [style=dashed label="class-name"]
  1764 -> 69 [style=dashed label="conversion-function-id"]
  1764 -> 1881 [style=dashed label="declarator"]
  1764 -> 76 [style=dashed label="declarator-id"]
  1764 -> 139 [style=dashed label="decltype-specifier"]
  1764 -> 85 [style=dashed label="enum-name"]
  1764 -> 94 [style=dashed label="id-expression"]
  1764 -> 96 [style=dashed label="literal-operator-id"]
  1764 -> 100 [style=dashed label="namespace-alias"]
  1764 -> 103 [style=dashed label="namespace-name"]
  1764 -> 149 [style=dashed label="nested-name-specifier"]
  1764 -> 107 [style=dashed label="noptr-declarator"]
  1764 -> 109 [style=dashed label="operator-function-id"]
  1764 -> 111 [style=dashed label="ptr-declarator"]
  1764 -> 112 [style=dashed label="ptr-operator"]
  1764 -> 113 [style=dashed label="qualified-id"]
  1764 -> 1882 [style=dashed label="ref-qualifier"]
  1764 -> 115 [style=dashed label="simple-template-id"]
  1764 -> 121 [style=dashed label="template-id"]
  1764 -> 143 [style=dashed label="template-name"]
  1764 -> 144 [style=dashed label="type-name"]
  1764 -> 127 [style=dashed label="typedef-name"]
  1764 -> 130 [style=dashed label="unqualified-id"]
  1765 [label="State 1765\n\l516 iteration-statement: \"for\" '(' init-statement for-range-declaration • ':' for-range-initializer ')' statement\l"]
  1765 -> 1883 [style=solid label="':'"]
  1766 [label="State 1766\n\l526 labeled-statement: \"case\" constant-expression ':' statement •\l"]
  1766 -> "1766R526" [style=solid]
 "1766R526" [label="R526", fillcolor=3, shape=diamond, style=filled]
  1767 [label="State 1767\n\l165 condition: attribute-specifier-seq decl-specifier-seq • declarator brace-or-equal-initializer\l979 simple-declaration: attribute-specifier-seq decl-specifier-seq • init-declarator-list ';'\l980                   | attribute-specifier-seq decl-specifier-seq • '[' identifier-list ']' initializer ';'\l982                   | attribute-specifier-seq decl-specifier-seq • ref-qualifier '[' identifier-list ']' initializer ';'\l"]
  1767 -> 148 [style=solid label="IDENTIFIER"]
  1767 -> 5 [style=solid label="'('"]
  1767 -> 6 [style=solid label="\"...\""]
  1767 -> 283 [style=solid label="'&'"]
  1767 -> 9 [style=solid label="\"::\""]
  1767 -> 581 [style=solid label="'['"]
  1767 -> 285 [style=solid label="\"&&\""]
  1767 -> 17 [style=solid label="\"operator\""]
  1767 -> 135 [style=solid label="\"decltype\""]
  1767 -> 32 [style=solid label="'*'"]
  1767 -> 36 [style=solid label="'~'"]
  1767 -> 66 [style=dashed label="class-name"]
  1767 -> 69 [style=dashed label="conversion-function-id"]
  1767 -> 1884 [style=dashed label="declarator"]
  1767 -> 76 [style=dashed label="declarator-id"]
  1767 -> 139 [style=dashed label="decltype-specifier"]
  1767 -> 85 [style=dashed label="enum-name"]
  1767 -> 94 [style=dashed label="id-expression"]
  1767 -> 287 [style=dashed label="init-declarator"]
  1767 -> 583 [style=dashed label="init-declarator-list"]
  1767 -> 96 [style=dashed label="literal-operator-id"]
  1767 -> 100 [style=dashed label="namespace-alias"]
  1767 -> 103 [style=dashed label="namespace-name"]
  1767 -> 149 [style=dashed label="nested-name-specifier"]
  1767 -> 107 [style=dashed label="noptr-declarator"]
  1767 -> 109 [style=dashed label="operator-function-id"]
  1767 -> 111 [style=dashed label="ptr-declarator"]
  1767 -> 112 [style=dashed label="ptr-operator"]
  1767 -> 113 [style=dashed label="qualified-id"]
  1767 -> 584 [style=dashed label="ref-qualifier"]
  1767 -> 115 [style=dashed label="simple-template-id"]
  1767 -> 121 [style=dashed label="template-id"]
  1767 -> 143 [style=dashed label="template-name"]
  1767 -> 144 [style=dashed label="type-name"]
  1767 -> 127 [style=dashed label="typedef-name"]
  1767 -> 130 [style=dashed label="unqualified-id"]
  1768 [label="State 1768\n\l952 selection-statement: \"if\" '(' condition ')' • statement\l956                    | \"if\" '(' condition ')' • statement \"else\" statement\l"]
  1768 -> 665 [style=solid label="IDENTIFIER"]
  1768 -> 361 [style=solid label="'+'"]
  1768 -> 362 [style=solid label="'-'"]
  1768 -> 2 [style=solid label="\"using\""]
  1768 -> 666 [style=solid label="';'"]
  1768 -> 4 [style=solid label="\"alignas\""]
  1768 -> 363 [style=solid label="'('"]
  1768 -> 364 [style=solid label="'&'"]
  1768 -> 8 [style=solid label="\"asm\""]
  1768 -> 365 [style=solid label="\"::\""]
  1768 -> 667 [style=solid label="'['"]
  1768 -> 367 [style=solid label="\"co_await\""]
  1768 -> 294 [style=solid label="'{'"]
  1768 -> 11 [style=solid label="\"virtual\""]
  1768 -> 368 [style=solid label="'0'"]
  1768 -> 369 [style=solid label="'1'"]
  1768 -> 370 [style=solid label="\"0b\""]
  1768 -> 371 [style=solid label="\"0B\""]
  1768 -> 372 [style=solid label="'\\''"]
  1768 -> 373 [style=solid label="\"false\""]
  1768 -> 374 [style=solid label="\"true\""]
  1768 -> 12 [style=solid label="\"class\""]
  1768 -> 13 [style=solid label="\"struct\""]
  1768 -> 14 [style=solid label="\"union\""]
  1768 -> 375 [style=solid label="\"noexcept\""]
  1768 -> 17 [style=solid label="\"operator\""]
  1768 -> 669 [style=solid label="\"co_return\""]
  1768 -> 18 [style=solid label="\"const\""]
  1768 -> 19 [style=solid label="\"volatile\""]
  1768 -> 20 [style=solid label="\"friend\""]
  1768 -> 21 [style=solid label="\"typedef\""]
  1768 -> 22 [style=solid label="\"constexpr\""]
  1768 -> 23 [style=solid label="\"consteval\""]
  1768 -> 24 [style=solid label="\"constinit\""]
  1768 -> 263 [style=solid label="\"inline\""]
  1768 -> 26 [style=solid label="\"decltype\""]
  1768 -> 376 [style=solid label="\"delete\""]
  1768 -> 377 [style=solid label="'.'"]
  1768 -> 378 [style=solid label="'2'"]
  1768 -> 379 [style=solid label="'3'"]
  1768 -> 380 [style=solid label="'4'"]
  1768 -> 381 [style=solid label="'5'"]
  1768 -> 382 [style=solid label="'6'"]
  1768 -> 383 [style=solid label="'7'"]
  1768 -> 384 [style=solid label="'8'"]
  1768 -> 385 [style=solid label="'9'"]
  1768 -> 27 [style=solid label="\"enum\""]
  1768 -> 185 [style=solid label="\"u8\""]
  1768 -> 186 [style=solid label="'u'"]
  1768 -> 187 [style=solid label="'U'"]
  1768 -> 188 [style=solid label="'L'"]
  1768 -> 264 [style=solid label="\"extern\""]
  1768 -> 29 [style=solid label="\"explicit\""]
  1768 -> 386 [style=solid label="'*'"]
  1768 -> 670 [style=solid label="\"default\""]
  1768 -> 671 [style=solid label="\"try\""]
  1768 -> 203 [style=solid label="'\"'"]
  1768 -> 387 [style=solid label="\"0x\""]
  1768 -> 388 [style=solid label="\"0X\""]
  1768 -> 672 [style=solid label="\"while\""]
  1768 -> 673 [style=solid label="\"do\""]
  1768 -> 674 [style=solid label="\"for\""]
  1768 -> 675 [style=solid label="\"break\""]
  1768 -> 676 [style=solid label="\"continue\""]
  1768 -> 677 [style=solid label="\"return\""]
  1768 -> 678 [style=solid label="\"goto\""]
  1768 -> 679 [style=solid label="\"case\""]
  1768 -> 680 [style=solid label="\"namespace\""]
  1768 -> 389 [style=solid label="\"requires\""]
  1768 -> 390 [style=solid label="\"new\""]
  1768 -> 391 [style=solid label="'~'"]
  1768 -> 392 [style=solid label="'!'"]
  1768 -> 393 [style=solid label="\"++\""]
  1768 -> 394 [style=solid label="\"--\""]
  1768 -> 395 [style=solid label="\"this\""]
  1768 -> 37 [style=solid label="\"auto\""]
  1768 -> 396 [style=solid label="\"nullptr\""]
  1768 -> 397 [style=solid label="\"dynamic_cast\""]
  1768 -> 398 [style=solid label="\"static_cast\""]
  1768 -> 399 [style=solid label="\"reinterpret_cast\""]
  1768 -> 400 [style=solid label="\"const_cast\""]
  1768 -> 401 [style=solid label="\"typeid\""]
  1768 -> 681 [style=solid label="\"if\""]
  1768 -> 682 [style=solid label="\"switch\""]
  1768 -> 38 [style=solid label="\"char\""]
  1768 -> 39 [style=solid label="\"char8_t\""]
  1768 -> 40 [style=solid label="\"char16_t\""]
  1768 -> 41 [style=solid label="\"char32_t\""]
  1768 -> 42 [style=solid label="\"wchar_t\""]
  1768 -> 43 [style=solid label="\"bool\""]
  1768 -> 44 [style=solid label="\"short\""]
  1768 -> 45 [style=solid label="\"int\""]
  1768 -> 46 [style=solid label="\"long\""]
  1768 -> 47 [style=solid label="\"signed\""]
  1768 -> 48 [style=solid label="\"unsigned\""]
  1768 -> 49 [style=solid label="\"float\""]
  1768 -> 50 [style=solid label="\"double\""]
  1768 -> 51 [style=solid label="\"void\""]
  1768 -> 52 [style=solid label="\"static_assert\""]
  1768 -> 53 [style=solid label="\"static\""]
  1768 -> 54 [style=solid label="\"thread_local\""]
  1768 -> 55 [style=solid label="\"mutable\""]
  1768 -> 209 [style=solid label="'R'"]
  1768 -> 528 [style=solid label="\"throw\""]
  1768 -> 56 [style=solid label="\"typename\""]
  1768 -> 402 [style=solid label="\"sizeof\""]
  1768 -> 403 [style=solid label="\"alignof\""]
  1768 -> 529 [style=solid label="\"co_yield\""]
  1768 -> 404 [style=dashed label="additive-expression"]
  1768 -> 57 [style=dashed label="alias-declaration"]
  1768 -> 58 [style=dashed label="alignment-specifier"]
  1768 -> 405 [style=dashed label="and-expression"]
  1768 -> 59 [style=dashed label="asm-declaration"]
  1768 -> 530 [style=dashed label="assignment-expression"]
  1768 -> 61 [style=dashed label="attribute-specifier"]
  1768 -> 683 [style=dashed label="attribute-specifier-seq"]
  1768 -> 406 [style=dashed label="await-expression"]
  1768 -> 407 [style=dashed label="binary-literal"]
  1768 -> 684 [style=dashed label="block-declaration"]
  1768 -> 408 [style=dashed label="boolean-literal"]
  1768 -> 409 [style=dashed label="cast-expression"]
  1768 -> 410 [style=dashed label="character-literal"]
  1768 -> 64 [style=dashed label="class-head"]
  1768 -> 65 [style=dashed label="class-key"]
  1768 -> 66 [style=dashed label="class-name"]
  1768 -> 67 [style=dashed label="class-specifier"]
  1768 -> 411 [style=dashed label="compare-expression"]
  1768 -> 685 [style=dashed label="compound-statement"]
  1768 -> 68 [style=dashed label="concept-name"]
  1768 -> 531 [style=dashed label="conditional-expression"]
  1768 -> 69 [style=dashed label="conversion-function-id"]
  1768 -> 686 [style=dashed label="coroutine-return-statement"]
  1768 -> 70 [style=dashed label="cv-qualifier"]
  1768 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1768 -> 415 [style=dashed label="decimal-literal"]
  1768 -> 71 [style=dashed label="decl-specifier"]
  1768 -> 687 [style=dashed label="decl-specifier-seq"]
  1768 -> 688 [style=dashed label="declaration-statement"]
  1768 -> 77 [style=dashed label="decltype-specifier"]
  1768 -> 79 [style=dashed label="defining-type-specifier"]
  1768 -> 416 [style=dashed label="delete-expression"]
  1768 -> 417 [style=dashed label="digit"]
  1768 -> 418 [style=dashed label="digit-sequence"]
  1768 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1768 -> 81 [style=dashed label="elaborated-type-specifier"]
  1768 -> 419 [style=dashed label="encoding-prefix"]
  1768 -> 83 [style=dashed label="enum-head"]
  1768 -> 84 [style=dashed label="enum-key"]
  1768 -> 85 [style=dashed label="enum-name"]
  1768 -> 86 [style=dashed label="enum-specifier"]
  1768 -> 420 [style=dashed label="equality-expression"]
  1768 -> 421 [style=dashed label="exclusive-or-expression"]
  1768 -> 269 [style=dashed label="explicit-specifier"]
  1768 -> 689 [style=dashed label="expression"]
  1768 -> 690 [style=dashed label="expression-statement"]
  1768 -> 422 [style=dashed label="floating-point-literal"]
  1768 -> 423 [style=dashed label="fold-expression"]
  1768 -> 424 [style=dashed label="fractional-constant"]
  1768 -> 92 [style=dashed label="function-specifier"]
  1768 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1768 -> 426 [style=dashed label="hexadecimal-literal"]
  1768 -> 427 [style=dashed label="hexadecimal-prefix"]
  1768 -> 428 [style=dashed label="id-expression"]
  1768 -> 429 [style=dashed label="inclusive-or-expression"]
  1768 -> 430 [style=dashed label="integer-literal"]
  1768 -> 691 [style=dashed label="iteration-statement"]
  1768 -> 692 [style=dashed label="jump-statement"]
  1768 -> 693 [style=dashed label="labeled-statement"]
  1768 -> 431 [style=dashed label="lambda-expression"]
  1768 -> 432 [style=dashed label="lambda-introducer"]
  1768 -> 433 [style=dashed label="literal"]
  1768 -> 96 [style=dashed label="literal-operator-id"]
  1768 -> 434 [style=dashed label="logical-and-expression"]
  1768 -> 533 [style=dashed label="logical-or-expression"]
  1768 -> 436 [style=dashed label="multiplicative-expression"]
  1768 -> 100 [style=dashed label="namespace-alias"]
  1768 -> 101 [style=dashed label="namespace-alias-definition"]
  1768 -> 103 [style=dashed label="namespace-name"]
  1768 -> 437 [style=dashed label="nested-name-specifier"]
  1768 -> 438 [style=dashed label="new-expression"]
  1768 -> 439 [style=dashed label="noexcept-expression"]
  1768 -> 440 [style=dashed label="nonzero-digit"]
  1768 -> 441 [style=dashed label="octal-literal"]
  1768 -> 108 [style=dashed label="opaque-enum-declaration"]
  1768 -> 109 [style=dashed label="operator-function-id"]
  1768 -> 110 [style=dashed label="placeholder-type-specifier"]
  1768 -> 442 [style=dashed label="pm-expression"]
  1768 -> 443 [style=dashed label="pointer-literal"]
  1768 -> 444 [style=dashed label="postfix-expression"]
  1768 -> 445 [style=dashed label="primary-expression"]
  1768 -> 113 [style=dashed label="qualified-id"]
  1768 -> 446 [style=dashed label="relational-expression"]
  1768 -> 447 [style=dashed label="requires-expression"]
  1768 -> 694 [style=dashed label="selection-statement"]
  1768 -> 448 [style=dashed label="shift-expression"]
  1768 -> 114 [style=dashed label="simple-declaration"]
  1768 -> 115 [style=dashed label="simple-template-id"]
  1768 -> 449 [style=dashed label="simple-type-specifier"]
  1768 -> 1885 [style=dashed label="statement"]
  1768 -> 117 [style=dashed label="static_assert-declaration"]
  1768 -> 118 [style=dashed label="storage-class-specifier"]
  1768 -> 450 [style=dashed label="string-literal"]
  1768 -> 121 [style=dashed label="template-id"]
  1768 -> 216 [style=dashed label="template-name"]
  1768 -> 535 [style=dashed label="throw-expression"]
  1768 -> 697 [style=dashed label="try-block"]
  1768 -> 124 [style=dashed label="type-constraint"]
  1768 -> 125 [style=dashed label="type-name"]
  1768 -> 126 [style=dashed label="type-specifier"]
  1768 -> 127 [style=dashed label="typedef-name"]
  1768 -> 453 [style=dashed label="typename-specifier"]
  1768 -> 454 [style=dashed label="unary-expression"]
  1768 -> 455 [style=dashed label="unary-operator"]
  1768 -> 130 [style=dashed label="unqualified-id"]
  1768 -> 456 [style=dashed label="user-defined-character-literal"]
  1768 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1768 -> 458 [style=dashed label="user-defined-integer-literal"]
  1768 -> 459 [style=dashed label="user-defined-literal"]
  1768 -> 460 [style=dashed label="user-defined-string-literal"]
  1768 -> 131 [style=dashed label="using-declaration"]
  1768 -> 132 [style=dashed label="using-directive"]
  1768 -> 133 [style=dashed label="using-enum-declaration"]
  1768 -> 537 [style=dashed label="yield-expression"]
  1769 [label="State 1769\n\l166 condition: decl-specifier-seq declarator • brace-or-equal-initializer\l473 init-declarator: declarator •\l474                | declarator • initializer\l475                | declarator • requires-clause\l"]
  1769 -> 1280 [style=solid label="'='"]
  1769 -> 647 [style=solid label="'('"]
  1769 -> 939 [style=solid label="'{'"]
  1769 -> 297 [style=solid label="\"requires\""]
  1769 -> 1886 [style=dashed label="brace-or-equal-initializer"]
  1769 -> 650 [style=dashed label="braced-init-list"]
  1769 -> 652 [style=dashed label="initializer"]
  1769 -> 1535 [style=dashed label="requires-clause"]
  1769 -> "1769R473" [style=solid]
 "1769R473" [label="R473", fillcolor=3, shape=diamond, style=filled]
  1770 [label="State 1770\n\l954 selection-statement: \"if\" '(' init-statement condition • ')' statement\l958                    | \"if\" '(' init-statement condition • ')' statement \"else\" statement\l"]
  1770 -> 1887 [style=solid label="')'"]
  1771 [label="State 1771\n\l953 selection-statement: \"if\" \"constexpr\" '(' condition • ')' statement\l957                    | \"if\" \"constexpr\" '(' condition • ')' statement \"else\" statement\l"]
  1771 -> 1888 [style=solid label="')'"]
  1772 [label="State 1772\n\l955 selection-statement: \"if\" \"constexpr\" '(' init-statement • condition ')' statement\l959                    | \"if\" \"constexpr\" '(' init-statement • condition ')' statement \"else\" statement\l"]
  1772 -> 1 [style=solid label="IDENTIFIER"]
  1772 -> 361 [style=solid label="'+'"]
  1772 -> 362 [style=solid label="'-'"]
  1772 -> 4 [style=solid label="\"alignas\""]
  1772 -> 363 [style=solid label="'('"]
  1772 -> 364 [style=solid label="'&'"]
  1772 -> 365 [style=solid label="\"::\""]
  1772 -> 667 [style=solid label="'['"]
  1772 -> 367 [style=solid label="\"co_await\""]
  1772 -> 11 [style=solid label="\"virtual\""]
  1772 -> 368 [style=solid label="'0'"]
  1772 -> 369 [style=solid label="'1'"]
  1772 -> 370 [style=solid label="\"0b\""]
  1772 -> 371 [style=solid label="\"0B\""]
  1772 -> 372 [style=solid label="'\\''"]
  1772 -> 373 [style=solid label="\"false\""]
  1772 -> 374 [style=solid label="\"true\""]
  1772 -> 12 [style=solid label="\"class\""]
  1772 -> 13 [style=solid label="\"struct\""]
  1772 -> 14 [style=solid label="\"union\""]
  1772 -> 375 [style=solid label="\"noexcept\""]
  1772 -> 17 [style=solid label="\"operator\""]
  1772 -> 18 [style=solid label="\"const\""]
  1772 -> 19 [style=solid label="\"volatile\""]
  1772 -> 20 [style=solid label="\"friend\""]
  1772 -> 21 [style=solid label="\"typedef\""]
  1772 -> 22 [style=solid label="\"constexpr\""]
  1772 -> 23 [style=solid label="\"consteval\""]
  1772 -> 24 [style=solid label="\"constinit\""]
  1772 -> 263 [style=solid label="\"inline\""]
  1772 -> 26 [style=solid label="\"decltype\""]
  1772 -> 376 [style=solid label="\"delete\""]
  1772 -> 377 [style=solid label="'.'"]
  1772 -> 378 [style=solid label="'2'"]
  1772 -> 379 [style=solid label="'3'"]
  1772 -> 380 [style=solid label="'4'"]
  1772 -> 381 [style=solid label="'5'"]
  1772 -> 382 [style=solid label="'6'"]
  1772 -> 383 [style=solid label="'7'"]
  1772 -> 384 [style=solid label="'8'"]
  1772 -> 385 [style=solid label="'9'"]
  1772 -> 27 [style=solid label="\"enum\""]
  1772 -> 185 [style=solid label="\"u8\""]
  1772 -> 186 [style=solid label="'u'"]
  1772 -> 187 [style=solid label="'U'"]
  1772 -> 188 [style=solid label="'L'"]
  1772 -> 264 [style=solid label="\"extern\""]
  1772 -> 29 [style=solid label="\"explicit\""]
  1772 -> 386 [style=solid label="'*'"]
  1772 -> 203 [style=solid label="'\"'"]
  1772 -> 387 [style=solid label="\"0x\""]
  1772 -> 388 [style=solid label="\"0X\""]
  1772 -> 389 [style=solid label="\"requires\""]
  1772 -> 390 [style=solid label="\"new\""]
  1772 -> 391 [style=solid label="'~'"]
  1772 -> 392 [style=solid label="'!'"]
  1772 -> 393 [style=solid label="\"++\""]
  1772 -> 394 [style=solid label="\"--\""]
  1772 -> 395 [style=solid label="\"this\""]
  1772 -> 37 [style=solid label="\"auto\""]
  1772 -> 396 [style=solid label="\"nullptr\""]
  1772 -> 397 [style=solid label="\"dynamic_cast\""]
  1772 -> 398 [style=solid label="\"static_cast\""]
  1772 -> 399 [style=solid label="\"reinterpret_cast\""]
  1772 -> 400 [style=solid label="\"const_cast\""]
  1772 -> 401 [style=solid label="\"typeid\""]
  1772 -> 38 [style=solid label="\"char\""]
  1772 -> 39 [style=solid label="\"char8_t\""]
  1772 -> 40 [style=solid label="\"char16_t\""]
  1772 -> 41 [style=solid label="\"char32_t\""]
  1772 -> 42 [style=solid label="\"wchar_t\""]
  1772 -> 43 [style=solid label="\"bool\""]
  1772 -> 44 [style=solid label="\"short\""]
  1772 -> 45 [style=solid label="\"int\""]
  1772 -> 46 [style=solid label="\"long\""]
  1772 -> 47 [style=solid label="\"signed\""]
  1772 -> 48 [style=solid label="\"unsigned\""]
  1772 -> 49 [style=solid label="\"float\""]
  1772 -> 50 [style=solid label="\"double\""]
  1772 -> 51 [style=solid label="\"void\""]
  1772 -> 53 [style=solid label="\"static\""]
  1772 -> 54 [style=solid label="\"thread_local\""]
  1772 -> 55 [style=solid label="\"mutable\""]
  1772 -> 209 [style=solid label="'R'"]
  1772 -> 528 [style=solid label="\"throw\""]
  1772 -> 56 [style=solid label="\"typename\""]
  1772 -> 402 [style=solid label="\"sizeof\""]
  1772 -> 403 [style=solid label="\"alignof\""]
  1772 -> 529 [style=solid label="\"co_yield\""]
  1772 -> 404 [style=dashed label="additive-expression"]
  1772 -> 58 [style=dashed label="alignment-specifier"]
  1772 -> 405 [style=dashed label="and-expression"]
  1772 -> 530 [style=dashed label="assignment-expression"]
  1772 -> 61 [style=dashed label="attribute-specifier"]
  1772 -> 1544 [style=dashed label="attribute-specifier-seq"]
  1772 -> 406 [style=dashed label="await-expression"]
  1772 -> 407 [style=dashed label="binary-literal"]
  1772 -> 408 [style=dashed label="boolean-literal"]
  1772 -> 409 [style=dashed label="cast-expression"]
  1772 -> 410 [style=dashed label="character-literal"]
  1772 -> 64 [style=dashed label="class-head"]
  1772 -> 65 [style=dashed label="class-key"]
  1772 -> 66 [style=dashed label="class-name"]
  1772 -> 67 [style=dashed label="class-specifier"]
  1772 -> 411 [style=dashed label="compare-expression"]
  1772 -> 68 [style=dashed label="concept-name"]
  1772 -> 1889 [style=dashed label="condition"]
  1772 -> 531 [style=dashed label="conditional-expression"]
  1772 -> 69 [style=dashed label="conversion-function-id"]
  1772 -> 70 [style=dashed label="cv-qualifier"]
  1772 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1772 -> 415 [style=dashed label="decimal-literal"]
  1772 -> 71 [style=dashed label="decl-specifier"]
  1772 -> 1546 [style=dashed label="decl-specifier-seq"]
  1772 -> 77 [style=dashed label="decltype-specifier"]
  1772 -> 79 [style=dashed label="defining-type-specifier"]
  1772 -> 416 [style=dashed label="delete-expression"]
  1772 -> 417 [style=dashed label="digit"]
  1772 -> 418 [style=dashed label="digit-sequence"]
  1772 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1772 -> 81 [style=dashed label="elaborated-type-specifier"]
  1772 -> 419 [style=dashed label="encoding-prefix"]
  1772 -> 83 [style=dashed label="enum-head"]
  1772 -> 268 [style=dashed label="enum-key"]
  1772 -> 85 [style=dashed label="enum-name"]
  1772 -> 86 [style=dashed label="enum-specifier"]
  1772 -> 420 [style=dashed label="equality-expression"]
  1772 -> 421 [style=dashed label="exclusive-or-expression"]
  1772 -> 269 [style=dashed label="explicit-specifier"]
  1772 -> 1547 [style=dashed label="expression"]
  1772 -> 422 [style=dashed label="floating-point-literal"]
  1772 -> 423 [style=dashed label="fold-expression"]
  1772 -> 424 [style=dashed label="fractional-constant"]
  1772 -> 92 [style=dashed label="function-specifier"]
  1772 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1772 -> 426 [style=dashed label="hexadecimal-literal"]
  1772 -> 427 [style=dashed label="hexadecimal-prefix"]
  1772 -> 428 [style=dashed label="id-expression"]
  1772 -> 429 [style=dashed label="inclusive-or-expression"]
  1772 -> 430 [style=dashed label="integer-literal"]
  1772 -> 431 [style=dashed label="lambda-expression"]
  1772 -> 432 [style=dashed label="lambda-introducer"]
  1772 -> 433 [style=dashed label="literal"]
  1772 -> 96 [style=dashed label="literal-operator-id"]
  1772 -> 434 [style=dashed label="logical-and-expression"]
  1772 -> 533 [style=dashed label="logical-or-expression"]
  1772 -> 436 [style=dashed label="multiplicative-expression"]
  1772 -> 100 [style=dashed label="namespace-alias"]
  1772 -> 103 [style=dashed label="namespace-name"]
  1772 -> 437 [style=dashed label="nested-name-specifier"]
  1772 -> 438 [style=dashed label="new-expression"]
  1772 -> 439 [style=dashed label="noexcept-expression"]
  1772 -> 440 [style=dashed label="nonzero-digit"]
  1772 -> 441 [style=dashed label="octal-literal"]
  1772 -> 109 [style=dashed label="operator-function-id"]
  1772 -> 110 [style=dashed label="placeholder-type-specifier"]
  1772 -> 442 [style=dashed label="pm-expression"]
  1772 -> 443 [style=dashed label="pointer-literal"]
  1772 -> 444 [style=dashed label="postfix-expression"]
  1772 -> 445 [style=dashed label="primary-expression"]
  1772 -> 113 [style=dashed label="qualified-id"]
  1772 -> 446 [style=dashed label="relational-expression"]
  1772 -> 447 [style=dashed label="requires-expression"]
  1772 -> 448 [style=dashed label="shift-expression"]
  1772 -> 115 [style=dashed label="simple-template-id"]
  1772 -> 449 [style=dashed label="simple-type-specifier"]
  1772 -> 118 [style=dashed label="storage-class-specifier"]
  1772 -> 450 [style=dashed label="string-literal"]
  1772 -> 121 [style=dashed label="template-id"]
  1772 -> 216 [style=dashed label="template-name"]
  1772 -> 535 [style=dashed label="throw-expression"]
  1772 -> 124 [style=dashed label="type-constraint"]
  1772 -> 125 [style=dashed label="type-name"]
  1772 -> 126 [style=dashed label="type-specifier"]
  1772 -> 127 [style=dashed label="typedef-name"]
  1772 -> 453 [style=dashed label="typename-specifier"]
  1772 -> 454 [style=dashed label="unary-expression"]
  1772 -> 455 [style=dashed label="unary-operator"]
  1772 -> 130 [style=dashed label="unqualified-id"]
  1772 -> 456 [style=dashed label="user-defined-character-literal"]
  1772 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1772 -> 458 [style=dashed label="user-defined-integer-literal"]
  1772 -> 459 [style=dashed label="user-defined-literal"]
  1772 -> 460 [style=dashed label="user-defined-string-literal"]
  1772 -> 537 [style=dashed label="yield-expression"]
  1773 [label="State 1773\n\l962 selection-statement: \"if\" \"consteval\" compound-statement \"else\" • statement\l"]
  1773 -> 665 [style=solid label="IDENTIFIER"]
  1773 -> 361 [style=solid label="'+'"]
  1773 -> 362 [style=solid label="'-'"]
  1773 -> 2 [style=solid label="\"using\""]
  1773 -> 666 [style=solid label="';'"]
  1773 -> 4 [style=solid label="\"alignas\""]
  1773 -> 363 [style=solid label="'('"]
  1773 -> 364 [style=solid label="'&'"]
  1773 -> 8 [style=solid label="\"asm\""]
  1773 -> 365 [style=solid label="\"::\""]
  1773 -> 667 [style=solid label="'['"]
  1773 -> 367 [style=solid label="\"co_await\""]
  1773 -> 294 [style=solid label="'{'"]
  1773 -> 11 [style=solid label="\"virtual\""]
  1773 -> 368 [style=solid label="'0'"]
  1773 -> 369 [style=solid label="'1'"]
  1773 -> 370 [style=solid label="\"0b\""]
  1773 -> 371 [style=solid label="\"0B\""]
  1773 -> 372 [style=solid label="'\\''"]
  1773 -> 373 [style=solid label="\"false\""]
  1773 -> 374 [style=solid label="\"true\""]
  1773 -> 12 [style=solid label="\"class\""]
  1773 -> 13 [style=solid label="\"struct\""]
  1773 -> 14 [style=solid label="\"union\""]
  1773 -> 375 [style=solid label="\"noexcept\""]
  1773 -> 17 [style=solid label="\"operator\""]
  1773 -> 669 [style=solid label="\"co_return\""]
  1773 -> 18 [style=solid label="\"const\""]
  1773 -> 19 [style=solid label="\"volatile\""]
  1773 -> 20 [style=solid label="\"friend\""]
  1773 -> 21 [style=solid label="\"typedef\""]
  1773 -> 22 [style=solid label="\"constexpr\""]
  1773 -> 23 [style=solid label="\"consteval\""]
  1773 -> 24 [style=solid label="\"constinit\""]
  1773 -> 263 [style=solid label="\"inline\""]
  1773 -> 26 [style=solid label="\"decltype\""]
  1773 -> 376 [style=solid label="\"delete\""]
  1773 -> 377 [style=solid label="'.'"]
  1773 -> 378 [style=solid label="'2'"]
  1773 -> 379 [style=solid label="'3'"]
  1773 -> 380 [style=solid label="'4'"]
  1773 -> 381 [style=solid label="'5'"]
  1773 -> 382 [style=solid label="'6'"]
  1773 -> 383 [style=solid label="'7'"]
  1773 -> 384 [style=solid label="'8'"]
  1773 -> 385 [style=solid label="'9'"]
  1773 -> 27 [style=solid label="\"enum\""]
  1773 -> 185 [style=solid label="\"u8\""]
  1773 -> 186 [style=solid label="'u'"]
  1773 -> 187 [style=solid label="'U'"]
  1773 -> 188 [style=solid label="'L'"]
  1773 -> 264 [style=solid label="\"extern\""]
  1773 -> 29 [style=solid label="\"explicit\""]
  1773 -> 386 [style=solid label="'*'"]
  1773 -> 670 [style=solid label="\"default\""]
  1773 -> 671 [style=solid label="\"try\""]
  1773 -> 203 [style=solid label="'\"'"]
  1773 -> 387 [style=solid label="\"0x\""]
  1773 -> 388 [style=solid label="\"0X\""]
  1773 -> 672 [style=solid label="\"while\""]
  1773 -> 673 [style=solid label="\"do\""]
  1773 -> 674 [style=solid label="\"for\""]
  1773 -> 675 [style=solid label="\"break\""]
  1773 -> 676 [style=solid label="\"continue\""]
  1773 -> 677 [style=solid label="\"return\""]
  1773 -> 678 [style=solid label="\"goto\""]
  1773 -> 679 [style=solid label="\"case\""]
  1773 -> 680 [style=solid label="\"namespace\""]
  1773 -> 389 [style=solid label="\"requires\""]
  1773 -> 390 [style=solid label="\"new\""]
  1773 -> 391 [style=solid label="'~'"]
  1773 -> 392 [style=solid label="'!'"]
  1773 -> 393 [style=solid label="\"++\""]
  1773 -> 394 [style=solid label="\"--\""]
  1773 -> 395 [style=solid label="\"this\""]
  1773 -> 37 [style=solid label="\"auto\""]
  1773 -> 396 [style=solid label="\"nullptr\""]
  1773 -> 397 [style=solid label="\"dynamic_cast\""]
  1773 -> 398 [style=solid label="\"static_cast\""]
  1773 -> 399 [style=solid label="\"reinterpret_cast\""]
  1773 -> 400 [style=solid label="\"const_cast\""]
  1773 -> 401 [style=solid label="\"typeid\""]
  1773 -> 681 [style=solid label="\"if\""]
  1773 -> 682 [style=solid label="\"switch\""]
  1773 -> 38 [style=solid label="\"char\""]
  1773 -> 39 [style=solid label="\"char8_t\""]
  1773 -> 40 [style=solid label="\"char16_t\""]
  1773 -> 41 [style=solid label="\"char32_t\""]
  1773 -> 42 [style=solid label="\"wchar_t\""]
  1773 -> 43 [style=solid label="\"bool\""]
  1773 -> 44 [style=solid label="\"short\""]
  1773 -> 45 [style=solid label="\"int\""]
  1773 -> 46 [style=solid label="\"long\""]
  1773 -> 47 [style=solid label="\"signed\""]
  1773 -> 48 [style=solid label="\"unsigned\""]
  1773 -> 49 [style=solid label="\"float\""]
  1773 -> 50 [style=solid label="\"double\""]
  1773 -> 51 [style=solid label="\"void\""]
  1773 -> 52 [style=solid label="\"static_assert\""]
  1773 -> 53 [style=solid label="\"static\""]
  1773 -> 54 [style=solid label="\"thread_local\""]
  1773 -> 55 [style=solid label="\"mutable\""]
  1773 -> 209 [style=solid label="'R'"]
  1773 -> 528 [style=solid label="\"throw\""]
  1773 -> 56 [style=solid label="\"typename\""]
  1773 -> 402 [style=solid label="\"sizeof\""]
  1773 -> 403 [style=solid label="\"alignof\""]
  1773 -> 529 [style=solid label="\"co_yield\""]
  1773 -> 404 [style=dashed label="additive-expression"]
  1773 -> 57 [style=dashed label="alias-declaration"]
  1773 -> 58 [style=dashed label="alignment-specifier"]
  1773 -> 405 [style=dashed label="and-expression"]
  1773 -> 59 [style=dashed label="asm-declaration"]
  1773 -> 530 [style=dashed label="assignment-expression"]
  1773 -> 61 [style=dashed label="attribute-specifier"]
  1773 -> 683 [style=dashed label="attribute-specifier-seq"]
  1773 -> 406 [style=dashed label="await-expression"]
  1773 -> 407 [style=dashed label="binary-literal"]
  1773 -> 684 [style=dashed label="block-declaration"]
  1773 -> 408 [style=dashed label="boolean-literal"]
  1773 -> 409 [style=dashed label="cast-expression"]
  1773 -> 410 [style=dashed label="character-literal"]
  1773 -> 64 [style=dashed label="class-head"]
  1773 -> 65 [style=dashed label="class-key"]
  1773 -> 66 [style=dashed label="class-name"]
  1773 -> 67 [style=dashed label="class-specifier"]
  1773 -> 411 [style=dashed label="compare-expression"]
  1773 -> 685 [style=dashed label="compound-statement"]
  1773 -> 68 [style=dashed label="concept-name"]
  1773 -> 531 [style=dashed label="conditional-expression"]
  1773 -> 69 [style=dashed label="conversion-function-id"]
  1773 -> 686 [style=dashed label="coroutine-return-statement"]
  1773 -> 70 [style=dashed label="cv-qualifier"]
  1773 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1773 -> 415 [style=dashed label="decimal-literal"]
  1773 -> 71 [style=dashed label="decl-specifier"]
  1773 -> 687 [style=dashed label="decl-specifier-seq"]
  1773 -> 688 [style=dashed label="declaration-statement"]
  1773 -> 77 [style=dashed label="decltype-specifier"]
  1773 -> 79 [style=dashed label="defining-type-specifier"]
  1773 -> 416 [style=dashed label="delete-expression"]
  1773 -> 417 [style=dashed label="digit"]
  1773 -> 418 [style=dashed label="digit-sequence"]
  1773 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1773 -> 81 [style=dashed label="elaborated-type-specifier"]
  1773 -> 419 [style=dashed label="encoding-prefix"]
  1773 -> 83 [style=dashed label="enum-head"]
  1773 -> 84 [style=dashed label="enum-key"]
  1773 -> 85 [style=dashed label="enum-name"]
  1773 -> 86 [style=dashed label="enum-specifier"]
  1773 -> 420 [style=dashed label="equality-expression"]
  1773 -> 421 [style=dashed label="exclusive-or-expression"]
  1773 -> 269 [style=dashed label="explicit-specifier"]
  1773 -> 689 [style=dashed label="expression"]
  1773 -> 690 [style=dashed label="expression-statement"]
  1773 -> 422 [style=dashed label="floating-point-literal"]
  1773 -> 423 [style=dashed label="fold-expression"]
  1773 -> 424 [style=dashed label="fractional-constant"]
  1773 -> 92 [style=dashed label="function-specifier"]
  1773 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1773 -> 426 [style=dashed label="hexadecimal-literal"]
  1773 -> 427 [style=dashed label="hexadecimal-prefix"]
  1773 -> 428 [style=dashed label="id-expression"]
  1773 -> 429 [style=dashed label="inclusive-or-expression"]
  1773 -> 430 [style=dashed label="integer-literal"]
  1773 -> 691 [style=dashed label="iteration-statement"]
  1773 -> 692 [style=dashed label="jump-statement"]
  1773 -> 693 [style=dashed label="labeled-statement"]
  1773 -> 431 [style=dashed label="lambda-expression"]
  1773 -> 432 [style=dashed label="lambda-introducer"]
  1773 -> 433 [style=dashed label="literal"]
  1773 -> 96 [style=dashed label="literal-operator-id"]
  1773 -> 434 [style=dashed label="logical-and-expression"]
  1773 -> 533 [style=dashed label="logical-or-expression"]
  1773 -> 436 [style=dashed label="multiplicative-expression"]
  1773 -> 100 [style=dashed label="namespace-alias"]
  1773 -> 101 [style=dashed label="namespace-alias-definition"]
  1773 -> 103 [style=dashed label="namespace-name"]
  1773 -> 437 [style=dashed label="nested-name-specifier"]
  1773 -> 438 [style=dashed label="new-expression"]
  1773 -> 439 [style=dashed label="noexcept-expression"]
  1773 -> 440 [style=dashed label="nonzero-digit"]
  1773 -> 441 [style=dashed label="octal-literal"]
  1773 -> 108 [style=dashed label="opaque-enum-declaration"]
  1773 -> 109 [style=dashed label="operator-function-id"]
  1773 -> 110 [style=dashed label="placeholder-type-specifier"]
  1773 -> 442 [style=dashed label="pm-expression"]
  1773 -> 443 [style=dashed label="pointer-literal"]
  1773 -> 444 [style=dashed label="postfix-expression"]
  1773 -> 445 [style=dashed label="primary-expression"]
  1773 -> 113 [style=dashed label="qualified-id"]
  1773 -> 446 [style=dashed label="relational-expression"]
  1773 -> 447 [style=dashed label="requires-expression"]
  1773 -> 694 [style=dashed label="selection-statement"]
  1773 -> 448 [style=dashed label="shift-expression"]
  1773 -> 114 [style=dashed label="simple-declaration"]
  1773 -> 115 [style=dashed label="simple-template-id"]
  1773 -> 449 [style=dashed label="simple-type-specifier"]
  1773 -> 1890 [style=dashed label="statement"]
  1773 -> 117 [style=dashed label="static_assert-declaration"]
  1773 -> 118 [style=dashed label="storage-class-specifier"]
  1773 -> 450 [style=dashed label="string-literal"]
  1773 -> 121 [style=dashed label="template-id"]
  1773 -> 216 [style=dashed label="template-name"]
  1773 -> 535 [style=dashed label="throw-expression"]
  1773 -> 697 [style=dashed label="try-block"]
  1773 -> 124 [style=dashed label="type-constraint"]
  1773 -> 125 [style=dashed label="type-name"]
  1773 -> 126 [style=dashed label="type-specifier"]
  1773 -> 127 [style=dashed label="typedef-name"]
  1773 -> 453 [style=dashed label="typename-specifier"]
  1773 -> 454 [style=dashed label="unary-expression"]
  1773 -> 455 [style=dashed label="unary-operator"]
  1773 -> 130 [style=dashed label="unqualified-id"]
  1773 -> 456 [style=dashed label="user-defined-character-literal"]
  1773 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1773 -> 458 [style=dashed label="user-defined-integer-literal"]
  1773 -> 459 [style=dashed label="user-defined-literal"]
  1773 -> 460 [style=dashed label="user-defined-string-literal"]
  1773 -> 131 [style=dashed label="using-declaration"]
  1773 -> 132 [style=dashed label="using-directive"]
  1773 -> 133 [style=dashed label="using-enum-declaration"]
  1773 -> 537 [style=dashed label="yield-expression"]
  1774 [label="State 1774\n\l961 selection-statement: \"if\" '!' \"consteval\" compound-statement •\l963                    | \"if\" '!' \"consteval\" compound-statement • \"else\" statement\l"]
  1774 -> 1891 [style=solid label="\"else\""]
  1774 -> "1774R961d" [label="[\"else\"]", style=solid]
 "1774R961d" [label="R961", fillcolor=5, shape=diamond, style=filled]
  1774 -> "1774R961" [style=solid]
 "1774R961" [label="R961", fillcolor=3, shape=diamond, style=filled]
  1775 [label="State 1775\n\l964 selection-statement: \"switch\" '(' condition ')' • statement\l"]
  1775 -> 665 [style=solid label="IDENTIFIER"]
  1775 -> 361 [style=solid label="'+'"]
  1775 -> 362 [style=solid label="'-'"]
  1775 -> 2 [style=solid label="\"using\""]
  1775 -> 666 [style=solid label="';'"]
  1775 -> 4 [style=solid label="\"alignas\""]
  1775 -> 363 [style=solid label="'('"]
  1775 -> 364 [style=solid label="'&'"]
  1775 -> 8 [style=solid label="\"asm\""]
  1775 -> 365 [style=solid label="\"::\""]
  1775 -> 667 [style=solid label="'['"]
  1775 -> 367 [style=solid label="\"co_await\""]
  1775 -> 294 [style=solid label="'{'"]
  1775 -> 11 [style=solid label="\"virtual\""]
  1775 -> 368 [style=solid label="'0'"]
  1775 -> 369 [style=solid label="'1'"]
  1775 -> 370 [style=solid label="\"0b\""]
  1775 -> 371 [style=solid label="\"0B\""]
  1775 -> 372 [style=solid label="'\\''"]
  1775 -> 373 [style=solid label="\"false\""]
  1775 -> 374 [style=solid label="\"true\""]
  1775 -> 12 [style=solid label="\"class\""]
  1775 -> 13 [style=solid label="\"struct\""]
  1775 -> 14 [style=solid label="\"union\""]
  1775 -> 375 [style=solid label="\"noexcept\""]
  1775 -> 17 [style=solid label="\"operator\""]
  1775 -> 669 [style=solid label="\"co_return\""]
  1775 -> 18 [style=solid label="\"const\""]
  1775 -> 19 [style=solid label="\"volatile\""]
  1775 -> 20 [style=solid label="\"friend\""]
  1775 -> 21 [style=solid label="\"typedef\""]
  1775 -> 22 [style=solid label="\"constexpr\""]
  1775 -> 23 [style=solid label="\"consteval\""]
  1775 -> 24 [style=solid label="\"constinit\""]
  1775 -> 263 [style=solid label="\"inline\""]
  1775 -> 26 [style=solid label="\"decltype\""]
  1775 -> 376 [style=solid label="\"delete\""]
  1775 -> 377 [style=solid label="'.'"]
  1775 -> 378 [style=solid label="'2'"]
  1775 -> 379 [style=solid label="'3'"]
  1775 -> 380 [style=solid label="'4'"]
  1775 -> 381 [style=solid label="'5'"]
  1775 -> 382 [style=solid label="'6'"]
  1775 -> 383 [style=solid label="'7'"]
  1775 -> 384 [style=solid label="'8'"]
  1775 -> 385 [style=solid label="'9'"]
  1775 -> 27 [style=solid label="\"enum\""]
  1775 -> 185 [style=solid label="\"u8\""]
  1775 -> 186 [style=solid label="'u'"]
  1775 -> 187 [style=solid label="'U'"]
  1775 -> 188 [style=solid label="'L'"]
  1775 -> 264 [style=solid label="\"extern\""]
  1775 -> 29 [style=solid label="\"explicit\""]
  1775 -> 386 [style=solid label="'*'"]
  1775 -> 670 [style=solid label="\"default\""]
  1775 -> 671 [style=solid label="\"try\""]
  1775 -> 203 [style=solid label="'\"'"]
  1775 -> 387 [style=solid label="\"0x\""]
  1775 -> 388 [style=solid label="\"0X\""]
  1775 -> 672 [style=solid label="\"while\""]
  1775 -> 673 [style=solid label="\"do\""]
  1775 -> 674 [style=solid label="\"for\""]
  1775 -> 675 [style=solid label="\"break\""]
  1775 -> 676 [style=solid label="\"continue\""]
  1775 -> 677 [style=solid label="\"return\""]
  1775 -> 678 [style=solid label="\"goto\""]
  1775 -> 679 [style=solid label="\"case\""]
  1775 -> 680 [style=solid label="\"namespace\""]
  1775 -> 389 [style=solid label="\"requires\""]
  1775 -> 390 [style=solid label="\"new\""]
  1775 -> 391 [style=solid label="'~'"]
  1775 -> 392 [style=solid label="'!'"]
  1775 -> 393 [style=solid label="\"++\""]
  1775 -> 394 [style=solid label="\"--\""]
  1775 -> 395 [style=solid label="\"this\""]
  1775 -> 37 [style=solid label="\"auto\""]
  1775 -> 396 [style=solid label="\"nullptr\""]
  1775 -> 397 [style=solid label="\"dynamic_cast\""]
  1775 -> 398 [style=solid label="\"static_cast\""]
  1775 -> 399 [style=solid label="\"reinterpret_cast\""]
  1775 -> 400 [style=solid label="\"const_cast\""]
  1775 -> 401 [style=solid label="\"typeid\""]
  1775 -> 681 [style=solid label="\"if\""]
  1775 -> 682 [style=solid label="\"switch\""]
  1775 -> 38 [style=solid label="\"char\""]
  1775 -> 39 [style=solid label="\"char8_t\""]
  1775 -> 40 [style=solid label="\"char16_t\""]
  1775 -> 41 [style=solid label="\"char32_t\""]
  1775 -> 42 [style=solid label="\"wchar_t\""]
  1775 -> 43 [style=solid label="\"bool\""]
  1775 -> 44 [style=solid label="\"short\""]
  1775 -> 45 [style=solid label="\"int\""]
  1775 -> 46 [style=solid label="\"long\""]
  1775 -> 47 [style=solid label="\"signed\""]
  1775 -> 48 [style=solid label="\"unsigned\""]
  1775 -> 49 [style=solid label="\"float\""]
  1775 -> 50 [style=solid label="\"double\""]
  1775 -> 51 [style=solid label="\"void\""]
  1775 -> 52 [style=solid label="\"static_assert\""]
  1775 -> 53 [style=solid label="\"static\""]
  1775 -> 54 [style=solid label="\"thread_local\""]
  1775 -> 55 [style=solid label="\"mutable\""]
  1775 -> 209 [style=solid label="'R'"]
  1775 -> 528 [style=solid label="\"throw\""]
  1775 -> 56 [style=solid label="\"typename\""]
  1775 -> 402 [style=solid label="\"sizeof\""]
  1775 -> 403 [style=solid label="\"alignof\""]
  1775 -> 529 [style=solid label="\"co_yield\""]
  1775 -> 404 [style=dashed label="additive-expression"]
  1775 -> 57 [style=dashed label="alias-declaration"]
  1775 -> 58 [style=dashed label="alignment-specifier"]
  1775 -> 405 [style=dashed label="and-expression"]
  1775 -> 59 [style=dashed label="asm-declaration"]
  1775 -> 530 [style=dashed label="assignment-expression"]
  1775 -> 61 [style=dashed label="attribute-specifier"]
  1775 -> 683 [style=dashed label="attribute-specifier-seq"]
  1775 -> 406 [style=dashed label="await-expression"]
  1775 -> 407 [style=dashed label="binary-literal"]
  1775 -> 684 [style=dashed label="block-declaration"]
  1775 -> 408 [style=dashed label="boolean-literal"]
  1775 -> 409 [style=dashed label="cast-expression"]
  1775 -> 410 [style=dashed label="character-literal"]
  1775 -> 64 [style=dashed label="class-head"]
  1775 -> 65 [style=dashed label="class-key"]
  1775 -> 66 [style=dashed label="class-name"]
  1775 -> 67 [style=dashed label="class-specifier"]
  1775 -> 411 [style=dashed label="compare-expression"]
  1775 -> 685 [style=dashed label="compound-statement"]
  1775 -> 68 [style=dashed label="concept-name"]
  1775 -> 531 [style=dashed label="conditional-expression"]
  1775 -> 69 [style=dashed label="conversion-function-id"]
  1775 -> 686 [style=dashed label="coroutine-return-statement"]
  1775 -> 70 [style=dashed label="cv-qualifier"]
  1775 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1775 -> 415 [style=dashed label="decimal-literal"]
  1775 -> 71 [style=dashed label="decl-specifier"]
  1775 -> 687 [style=dashed label="decl-specifier-seq"]
  1775 -> 688 [style=dashed label="declaration-statement"]
  1775 -> 77 [style=dashed label="decltype-specifier"]
  1775 -> 79 [style=dashed label="defining-type-specifier"]
  1775 -> 416 [style=dashed label="delete-expression"]
  1775 -> 417 [style=dashed label="digit"]
  1775 -> 418 [style=dashed label="digit-sequence"]
  1775 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1775 -> 81 [style=dashed label="elaborated-type-specifier"]
  1775 -> 419 [style=dashed label="encoding-prefix"]
  1775 -> 83 [style=dashed label="enum-head"]
  1775 -> 84 [style=dashed label="enum-key"]
  1775 -> 85 [style=dashed label="enum-name"]
  1775 -> 86 [style=dashed label="enum-specifier"]
  1775 -> 420 [style=dashed label="equality-expression"]
  1775 -> 421 [style=dashed label="exclusive-or-expression"]
  1775 -> 269 [style=dashed label="explicit-specifier"]
  1775 -> 689 [style=dashed label="expression"]
  1775 -> 690 [style=dashed label="expression-statement"]
  1775 -> 422 [style=dashed label="floating-point-literal"]
  1775 -> 423 [style=dashed label="fold-expression"]
  1775 -> 424 [style=dashed label="fractional-constant"]
  1775 -> 92 [style=dashed label="function-specifier"]
  1775 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1775 -> 426 [style=dashed label="hexadecimal-literal"]
  1775 -> 427 [style=dashed label="hexadecimal-prefix"]
  1775 -> 428 [style=dashed label="id-expression"]
  1775 -> 429 [style=dashed label="inclusive-or-expression"]
  1775 -> 430 [style=dashed label="integer-literal"]
  1775 -> 691 [style=dashed label="iteration-statement"]
  1775 -> 692 [style=dashed label="jump-statement"]
  1775 -> 693 [style=dashed label="labeled-statement"]
  1775 -> 431 [style=dashed label="lambda-expression"]
  1775 -> 432 [style=dashed label="lambda-introducer"]
  1775 -> 433 [style=dashed label="literal"]
  1775 -> 96 [style=dashed label="literal-operator-id"]
  1775 -> 434 [style=dashed label="logical-and-expression"]
  1775 -> 533 [style=dashed label="logical-or-expression"]
  1775 -> 436 [style=dashed label="multiplicative-expression"]
  1775 -> 100 [style=dashed label="namespace-alias"]
  1775 -> 101 [style=dashed label="namespace-alias-definition"]
  1775 -> 103 [style=dashed label="namespace-name"]
  1775 -> 437 [style=dashed label="nested-name-specifier"]
  1775 -> 438 [style=dashed label="new-expression"]
  1775 -> 439 [style=dashed label="noexcept-expression"]
  1775 -> 440 [style=dashed label="nonzero-digit"]
  1775 -> 441 [style=dashed label="octal-literal"]
  1775 -> 108 [style=dashed label="opaque-enum-declaration"]
  1775 -> 109 [style=dashed label="operator-function-id"]
  1775 -> 110 [style=dashed label="placeholder-type-specifier"]
  1775 -> 442 [style=dashed label="pm-expression"]
  1775 -> 443 [style=dashed label="pointer-literal"]
  1775 -> 444 [style=dashed label="postfix-expression"]
  1775 -> 445 [style=dashed label="primary-expression"]
  1775 -> 113 [style=dashed label="qualified-id"]
  1775 -> 446 [style=dashed label="relational-expression"]
  1775 -> 447 [style=dashed label="requires-expression"]
  1775 -> 694 [style=dashed label="selection-statement"]
  1775 -> 448 [style=dashed label="shift-expression"]
  1775 -> 114 [style=dashed label="simple-declaration"]
  1775 -> 115 [style=dashed label="simple-template-id"]
  1775 -> 449 [style=dashed label="simple-type-specifier"]
  1775 -> 1892 [style=dashed label="statement"]
  1775 -> 117 [style=dashed label="static_assert-declaration"]
  1775 -> 118 [style=dashed label="storage-class-specifier"]
  1775 -> 450 [style=dashed label="string-literal"]
  1775 -> 121 [style=dashed label="template-id"]
  1775 -> 216 [style=dashed label="template-name"]
  1775 -> 535 [style=dashed label="throw-expression"]
  1775 -> 697 [style=dashed label="try-block"]
  1775 -> 124 [style=dashed label="type-constraint"]
  1775 -> 125 [style=dashed label="type-name"]
  1775 -> 126 [style=dashed label="type-specifier"]
  1775 -> 127 [style=dashed label="typedef-name"]
  1775 -> 453 [style=dashed label="typename-specifier"]
  1775 -> 454 [style=dashed label="unary-expression"]
  1775 -> 455 [style=dashed label="unary-operator"]
  1775 -> 130 [style=dashed label="unqualified-id"]
  1775 -> 456 [style=dashed label="user-defined-character-literal"]
  1775 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1775 -> 458 [style=dashed label="user-defined-integer-literal"]
  1775 -> 459 [style=dashed label="user-defined-literal"]
  1775 -> 460 [style=dashed label="user-defined-string-literal"]
  1775 -> 131 [style=dashed label="using-declaration"]
  1775 -> 132 [style=dashed label="using-directive"]
  1775 -> 133 [style=dashed label="using-enum-declaration"]
  1775 -> 537 [style=dashed label="yield-expression"]
  1776 [label="State 1776\n\l965 selection-statement: \"switch\" '(' init-statement condition • ')' statement\l"]
  1776 -> 1893 [style=solid label="')'"]
  1777 [label="State 1777\n\l523 labeled-statement: attribute-specifier-seq IDENTIFIER ':' statement •\l"]
  1777 -> "1777R523" [style=solid]
 "1777R523" [label="R523", fillcolor=3, shape=diamond, style=filled]
  1778 [label="State 1778\n\l527 labeled-statement: attribute-specifier-seq \"default\" ':' statement •\l"]
  1778 -> "1778R527" [style=solid]
 "1778R527" [label="R527", fillcolor=3, shape=diamond, style=filled]
  1779 [label="State 1779\n\l525 labeled-statement: attribute-specifier-seq \"case\" constant-expression ':' • statement\l"]
  1779 -> 665 [style=solid label="IDENTIFIER"]
  1779 -> 361 [style=solid label="'+'"]
  1779 -> 362 [style=solid label="'-'"]
  1779 -> 2 [style=solid label="\"using\""]
  1779 -> 666 [style=solid label="';'"]
  1779 -> 4 [style=solid label="\"alignas\""]
  1779 -> 363 [style=solid label="'('"]
  1779 -> 364 [style=solid label="'&'"]
  1779 -> 8 [style=solid label="\"asm\""]
  1779 -> 365 [style=solid label="\"::\""]
  1779 -> 667 [style=solid label="'['"]
  1779 -> 367 [style=solid label="\"co_await\""]
  1779 -> 294 [style=solid label="'{'"]
  1779 -> 11 [style=solid label="\"virtual\""]
  1779 -> 368 [style=solid label="'0'"]
  1779 -> 369 [style=solid label="'1'"]
  1779 -> 370 [style=solid label="\"0b\""]
  1779 -> 371 [style=solid label="\"0B\""]
  1779 -> 372 [style=solid label="'\\''"]
  1779 -> 373 [style=solid label="\"false\""]
  1779 -> 374 [style=solid label="\"true\""]
  1779 -> 12 [style=solid label="\"class\""]
  1779 -> 13 [style=solid label="\"struct\""]
  1779 -> 14 [style=solid label="\"union\""]
  1779 -> 375 [style=solid label="\"noexcept\""]
  1779 -> 17 [style=solid label="\"operator\""]
  1779 -> 669 [style=solid label="\"co_return\""]
  1779 -> 18 [style=solid label="\"const\""]
  1779 -> 19 [style=solid label="\"volatile\""]
  1779 -> 20 [style=solid label="\"friend\""]
  1779 -> 21 [style=solid label="\"typedef\""]
  1779 -> 22 [style=solid label="\"constexpr\""]
  1779 -> 23 [style=solid label="\"consteval\""]
  1779 -> 24 [style=solid label="\"constinit\""]
  1779 -> 263 [style=solid label="\"inline\""]
  1779 -> 26 [style=solid label="\"decltype\""]
  1779 -> 376 [style=solid label="\"delete\""]
  1779 -> 377 [style=solid label="'.'"]
  1779 -> 378 [style=solid label="'2'"]
  1779 -> 379 [style=solid label="'3'"]
  1779 -> 380 [style=solid label="'4'"]
  1779 -> 381 [style=solid label="'5'"]
  1779 -> 382 [style=solid label="'6'"]
  1779 -> 383 [style=solid label="'7'"]
  1779 -> 384 [style=solid label="'8'"]
  1779 -> 385 [style=solid label="'9'"]
  1779 -> 27 [style=solid label="\"enum\""]
  1779 -> 185 [style=solid label="\"u8\""]
  1779 -> 186 [style=solid label="'u'"]
  1779 -> 187 [style=solid label="'U'"]
  1779 -> 188 [style=solid label="'L'"]
  1779 -> 264 [style=solid label="\"extern\""]
  1779 -> 29 [style=solid label="\"explicit\""]
  1779 -> 386 [style=solid label="'*'"]
  1779 -> 670 [style=solid label="\"default\""]
  1779 -> 671 [style=solid label="\"try\""]
  1779 -> 203 [style=solid label="'\"'"]
  1779 -> 387 [style=solid label="\"0x\""]
  1779 -> 388 [style=solid label="\"0X\""]
  1779 -> 672 [style=solid label="\"while\""]
  1779 -> 673 [style=solid label="\"do\""]
  1779 -> 674 [style=solid label="\"for\""]
  1779 -> 675 [style=solid label="\"break\""]
  1779 -> 676 [style=solid label="\"continue\""]
  1779 -> 677 [style=solid label="\"return\""]
  1779 -> 678 [style=solid label="\"goto\""]
  1779 -> 679 [style=solid label="\"case\""]
  1779 -> 680 [style=solid label="\"namespace\""]
  1779 -> 389 [style=solid label="\"requires\""]
  1779 -> 390 [style=solid label="\"new\""]
  1779 -> 391 [style=solid label="'~'"]
  1779 -> 392 [style=solid label="'!'"]
  1779 -> 393 [style=solid label="\"++\""]
  1779 -> 394 [style=solid label="\"--\""]
  1779 -> 395 [style=solid label="\"this\""]
  1779 -> 37 [style=solid label="\"auto\""]
  1779 -> 396 [style=solid label="\"nullptr\""]
  1779 -> 397 [style=solid label="\"dynamic_cast\""]
  1779 -> 398 [style=solid label="\"static_cast\""]
  1779 -> 399 [style=solid label="\"reinterpret_cast\""]
  1779 -> 400 [style=solid label="\"const_cast\""]
  1779 -> 401 [style=solid label="\"typeid\""]
  1779 -> 681 [style=solid label="\"if\""]
  1779 -> 682 [style=solid label="\"switch\""]
  1779 -> 38 [style=solid label="\"char\""]
  1779 -> 39 [style=solid label="\"char8_t\""]
  1779 -> 40 [style=solid label="\"char16_t\""]
  1779 -> 41 [style=solid label="\"char32_t\""]
  1779 -> 42 [style=solid label="\"wchar_t\""]
  1779 -> 43 [style=solid label="\"bool\""]
  1779 -> 44 [style=solid label="\"short\""]
  1779 -> 45 [style=solid label="\"int\""]
  1779 -> 46 [style=solid label="\"long\""]
  1779 -> 47 [style=solid label="\"signed\""]
  1779 -> 48 [style=solid label="\"unsigned\""]
  1779 -> 49 [style=solid label="\"float\""]
  1779 -> 50 [style=solid label="\"double\""]
  1779 -> 51 [style=solid label="\"void\""]
  1779 -> 52 [style=solid label="\"static_assert\""]
  1779 -> 53 [style=solid label="\"static\""]
  1779 -> 54 [style=solid label="\"thread_local\""]
  1779 -> 55 [style=solid label="\"mutable\""]
  1779 -> 209 [style=solid label="'R'"]
  1779 -> 528 [style=solid label="\"throw\""]
  1779 -> 56 [style=solid label="\"typename\""]
  1779 -> 402 [style=solid label="\"sizeof\""]
  1779 -> 403 [style=solid label="\"alignof\""]
  1779 -> 529 [style=solid label="\"co_yield\""]
  1779 -> 404 [style=dashed label="additive-expression"]
  1779 -> 57 [style=dashed label="alias-declaration"]
  1779 -> 58 [style=dashed label="alignment-specifier"]
  1779 -> 405 [style=dashed label="and-expression"]
  1779 -> 59 [style=dashed label="asm-declaration"]
  1779 -> 530 [style=dashed label="assignment-expression"]
  1779 -> 61 [style=dashed label="attribute-specifier"]
  1779 -> 683 [style=dashed label="attribute-specifier-seq"]
  1779 -> 406 [style=dashed label="await-expression"]
  1779 -> 407 [style=dashed label="binary-literal"]
  1779 -> 684 [style=dashed label="block-declaration"]
  1779 -> 408 [style=dashed label="boolean-literal"]
  1779 -> 409 [style=dashed label="cast-expression"]
  1779 -> 410 [style=dashed label="character-literal"]
  1779 -> 64 [style=dashed label="class-head"]
  1779 -> 65 [style=dashed label="class-key"]
  1779 -> 66 [style=dashed label="class-name"]
  1779 -> 67 [style=dashed label="class-specifier"]
  1779 -> 411 [style=dashed label="compare-expression"]
  1779 -> 685 [style=dashed label="compound-statement"]
  1779 -> 68 [style=dashed label="concept-name"]
  1779 -> 531 [style=dashed label="conditional-expression"]
  1779 -> 69 [style=dashed label="conversion-function-id"]
  1779 -> 686 [style=dashed label="coroutine-return-statement"]
  1779 -> 70 [style=dashed label="cv-qualifier"]
  1779 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1779 -> 415 [style=dashed label="decimal-literal"]
  1779 -> 71 [style=dashed label="decl-specifier"]
  1779 -> 687 [style=dashed label="decl-specifier-seq"]
  1779 -> 688 [style=dashed label="declaration-statement"]
  1779 -> 77 [style=dashed label="decltype-specifier"]
  1779 -> 79 [style=dashed label="defining-type-specifier"]
  1779 -> 416 [style=dashed label="delete-expression"]
  1779 -> 417 [style=dashed label="digit"]
  1779 -> 418 [style=dashed label="digit-sequence"]
  1779 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1779 -> 81 [style=dashed label="elaborated-type-specifier"]
  1779 -> 419 [style=dashed label="encoding-prefix"]
  1779 -> 83 [style=dashed label="enum-head"]
  1779 -> 84 [style=dashed label="enum-key"]
  1779 -> 85 [style=dashed label="enum-name"]
  1779 -> 86 [style=dashed label="enum-specifier"]
  1779 -> 420 [style=dashed label="equality-expression"]
  1779 -> 421 [style=dashed label="exclusive-or-expression"]
  1779 -> 269 [style=dashed label="explicit-specifier"]
  1779 -> 689 [style=dashed label="expression"]
  1779 -> 690 [style=dashed label="expression-statement"]
  1779 -> 422 [style=dashed label="floating-point-literal"]
  1779 -> 423 [style=dashed label="fold-expression"]
  1779 -> 424 [style=dashed label="fractional-constant"]
  1779 -> 92 [style=dashed label="function-specifier"]
  1779 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1779 -> 426 [style=dashed label="hexadecimal-literal"]
  1779 -> 427 [style=dashed label="hexadecimal-prefix"]
  1779 -> 428 [style=dashed label="id-expression"]
  1779 -> 429 [style=dashed label="inclusive-or-expression"]
  1779 -> 430 [style=dashed label="integer-literal"]
  1779 -> 691 [style=dashed label="iteration-statement"]
  1779 -> 692 [style=dashed label="jump-statement"]
  1779 -> 693 [style=dashed label="labeled-statement"]
  1779 -> 431 [style=dashed label="lambda-expression"]
  1779 -> 432 [style=dashed label="lambda-introducer"]
  1779 -> 433 [style=dashed label="literal"]
  1779 -> 96 [style=dashed label="literal-operator-id"]
  1779 -> 434 [style=dashed label="logical-and-expression"]
  1779 -> 533 [style=dashed label="logical-or-expression"]
  1779 -> 436 [style=dashed label="multiplicative-expression"]
  1779 -> 100 [style=dashed label="namespace-alias"]
  1779 -> 101 [style=dashed label="namespace-alias-definition"]
  1779 -> 103 [style=dashed label="namespace-name"]
  1779 -> 437 [style=dashed label="nested-name-specifier"]
  1779 -> 438 [style=dashed label="new-expression"]
  1779 -> 439 [style=dashed label="noexcept-expression"]
  1779 -> 440 [style=dashed label="nonzero-digit"]
  1779 -> 441 [style=dashed label="octal-literal"]
  1779 -> 108 [style=dashed label="opaque-enum-declaration"]
  1779 -> 109 [style=dashed label="operator-function-id"]
  1779 -> 110 [style=dashed label="placeholder-type-specifier"]
  1779 -> 442 [style=dashed label="pm-expression"]
  1779 -> 443 [style=dashed label="pointer-literal"]
  1779 -> 444 [style=dashed label="postfix-expression"]
  1779 -> 445 [style=dashed label="primary-expression"]
  1779 -> 113 [style=dashed label="qualified-id"]
  1779 -> 446 [style=dashed label="relational-expression"]
  1779 -> 447 [style=dashed label="requires-expression"]
  1779 -> 694 [style=dashed label="selection-statement"]
  1779 -> 448 [style=dashed label="shift-expression"]
  1779 -> 114 [style=dashed label="simple-declaration"]
  1779 -> 115 [style=dashed label="simple-template-id"]
  1779 -> 449 [style=dashed label="simple-type-specifier"]
  1779 -> 1894 [style=dashed label="statement"]
  1779 -> 117 [style=dashed label="static_assert-declaration"]
  1779 -> 118 [style=dashed label="storage-class-specifier"]
  1779 -> 450 [style=dashed label="string-literal"]
  1779 -> 121 [style=dashed label="template-id"]
  1779 -> 216 [style=dashed label="template-name"]
  1779 -> 535 [style=dashed label="throw-expression"]
  1779 -> 697 [style=dashed label="try-block"]
  1779 -> 124 [style=dashed label="type-constraint"]
  1779 -> 125 [style=dashed label="type-name"]
  1779 -> 126 [style=dashed label="type-specifier"]
  1779 -> 127 [style=dashed label="typedef-name"]
  1779 -> 453 [style=dashed label="typename-specifier"]
  1779 -> 454 [style=dashed label="unary-expression"]
  1779 -> 455 [style=dashed label="unary-operator"]
  1779 -> 130 [style=dashed label="unqualified-id"]
  1779 -> 456 [style=dashed label="user-defined-character-literal"]
  1779 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1779 -> 458 [style=dashed label="user-defined-integer-literal"]
  1779 -> 459 [style=dashed label="user-defined-literal"]
  1779 -> 460 [style=dashed label="user-defined-string-literal"]
  1779 -> 131 [style=dashed label="using-declaration"]
  1779 -> 132 [style=dashed label="using-directive"]
  1779 -> 133 [style=dashed label="using-enum-declaration"]
  1779 -> 537 [style=dashed label="yield-expression"]
  1780 [label="State 1780\n\l319 exception-declaration: \"...\" •\l"]
  1780 -> "1780R319" [style=solid]
 "1780R319" [label="R319", fillcolor=3, shape=diamond, style=filled]
  1781 [label="State 1781\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l313 exception-declaration: attribute-specifier-seq • type-specifier-seq declarator\l315                      | attribute-specifier-seq • type-specifier-seq\l317                      | attribute-specifier-seq • type-specifier-seq abstract-declarator\l"]
  1781 -> 161 [style=solid label="IDENTIFIER"]
  1781 -> 4 [style=solid label="\"alignas\""]
  1781 -> 9 [style=solid label="\"::\""]
  1781 -> 10 [style=solid label="'['"]
  1781 -> 12 [style=solid label="\"class\""]
  1781 -> 13 [style=solid label="\"struct\""]
  1781 -> 14 [style=solid label="\"union\""]
  1781 -> 18 [style=solid label="\"const\""]
  1781 -> 19 [style=solid label="\"volatile\""]
  1781 -> 26 [style=solid label="\"decltype\""]
  1781 -> 136 [style=solid label="\"enum\""]
  1781 -> 37 [style=solid label="\"auto\""]
  1781 -> 38 [style=solid label="\"char\""]
  1781 -> 39 [style=solid label="\"char8_t\""]
  1781 -> 40 [style=solid label="\"char16_t\""]
  1781 -> 41 [style=solid label="\"char32_t\""]
  1781 -> 42 [style=solid label="\"wchar_t\""]
  1781 -> 43 [style=solid label="\"bool\""]
  1781 -> 44 [style=solid label="\"short\""]
  1781 -> 45 [style=solid label="\"int\""]
  1781 -> 46 [style=solid label="\"long\""]
  1781 -> 47 [style=solid label="\"signed\""]
  1781 -> 48 [style=solid label="\"unsigned\""]
  1781 -> 49 [style=solid label="\"float\""]
  1781 -> 50 [style=solid label="\"double\""]
  1781 -> 51 [style=solid label="\"void\""]
  1781 -> 56 [style=solid label="\"typename\""]
  1781 -> 58 [style=dashed label="alignment-specifier"]
  1781 -> 265 [style=dashed label="attribute-specifier"]
  1781 -> 210 [style=dashed label="class-key"]
  1781 -> 66 [style=dashed label="class-name"]
  1781 -> 68 [style=dashed label="concept-name"]
  1781 -> 70 [style=dashed label="cv-qualifier"]
  1781 -> 77 [style=dashed label="decltype-specifier"]
  1781 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1781 -> 81 [style=dashed label="elaborated-type-specifier"]
  1781 -> 85 [style=dashed label="enum-name"]
  1781 -> 100 [style=dashed label="namespace-alias"]
  1781 -> 103 [style=dashed label="namespace-name"]
  1781 -> 213 [style=dashed label="nested-name-specifier"]
  1781 -> 110 [style=dashed label="placeholder-type-specifier"]
  1781 -> 142 [style=dashed label="simple-template-id"]
  1781 -> 116 [style=dashed label="simple-type-specifier"]
  1781 -> 216 [style=dashed label="template-name"]
  1781 -> 124 [style=dashed label="type-constraint"]
  1781 -> 125 [style=dashed label="type-name"]
  1781 -> 217 [style=dashed label="type-specifier"]
  1781 -> 1895 [style=dashed label="type-specifier-seq"]
  1781 -> 127 [style=dashed label="typedef-name"]
  1781 -> 128 [style=dashed label="typename-specifier"]
  1782 [label="State 1782\n\l417 handler: \"catch\" '(' exception-declaration • ')' compound-statement\l"]
  1782 -> 1896 [style=solid label="')'"]
  1783 [label="State 1783\n\l314 exception-declaration: type-specifier-seq • declarator\l316                      | type-specifier-seq •\l318                      | type-specifier-seq • abstract-declarator\l"]
  1783 -> 148 [style=solid label="IDENTIFIER"]
  1783 -> 973 [style=solid label="'('"]
  1783 -> 974 [style=solid label="\"...\""]
  1783 -> 7 [style=solid label="'&'"]
  1783 -> 9 [style=solid label="\"::\""]
  1783 -> 945 [style=solid label="'['"]
  1783 -> 16 [style=solid label="\"&&\""]
  1783 -> 17 [style=solid label="\"operator\""]
  1783 -> 135 [style=solid label="\"decltype\""]
  1783 -> 32 [style=solid label="'*'"]
  1783 -> 36 [style=solid label="'~'"]
  1783 -> 1897 [style=dashed label="abstract-declarator"]
  1783 -> 947 [style=dashed label="abstract-pack-declarator"]
  1783 -> 66 [style=dashed label="class-name"]
  1783 -> 69 [style=dashed label="conversion-function-id"]
  1783 -> 1898 [style=dashed label="declarator"]
  1783 -> 76 [style=dashed label="declarator-id"]
  1783 -> 139 [style=dashed label="decltype-specifier"]
  1783 -> 85 [style=dashed label="enum-name"]
  1783 -> 94 [style=dashed label="id-expression"]
  1783 -> 96 [style=dashed label="literal-operator-id"]
  1783 -> 100 [style=dashed label="namespace-alias"]
  1783 -> 103 [style=dashed label="namespace-name"]
  1783 -> 149 [style=dashed label="nested-name-specifier"]
  1783 -> 948 [style=dashed label="noptr-abstract-declarator"]
  1783 -> 949 [style=dashed label="noptr-abstract-pack-declarator"]
  1783 -> 107 [style=dashed label="noptr-declarator"]
  1783 -> 109 [style=dashed label="operator-function-id"]
  1783 -> 950 [style=dashed label="parameters-and-qualifiers"]
  1783 -> 951 [style=dashed label="ptr-abstract-declarator"]
  1783 -> 111 [style=dashed label="ptr-declarator"]
  1783 -> 977 [style=dashed label="ptr-operator"]
  1783 -> 113 [style=dashed label="qualified-id"]
  1783 -> 115 [style=dashed label="simple-template-id"]
  1783 -> 121 [style=dashed label="template-id"]
  1783 -> 143 [style=dashed label="template-name"]
  1783 -> 144 [style=dashed label="type-name"]
  1783 -> 127 [style=dashed label="typedef-name"]
  1783 -> 130 [style=dashed label="unqualified-id"]
  1783 -> "1783R316" [style=solid]
 "1783R316" [label="R316", fillcolor=3, shape=diamond, style=filled]
  1784 [label="State 1784\n\l234 deduction-guide: explicit-specifier template-name '(' parameter-declaration-clause ')' \"->\" • simple-template-id ';'\l"]
  1784 -> 315 [style=solid label="IDENTIFIER"]
  1784 -> 1899 [style=dashed label="simple-template-id"]
  1784 -> 143 [style=dashed label="template-name"]
  1785 [label="State 1785\n\l227 declaration-seq: declaration-seq • declaration\l891 private-module-fragment: \"module-keyword\" ':' \"private\" ';' declaration-seq •\l"]
  1785 -> 1 [style=solid label="IDENTIFIER"]
  1785 -> 2 [style=solid label="\"using\""]
  1785 -> 3 [style=solid label="';'"]
  1785 -> 4 [style=solid label="\"alignas\""]
  1785 -> 5 [style=solid label="'('"]
  1785 -> 6 [style=solid label="\"...\""]
  1785 -> 7 [style=solid label="'&'"]
  1785 -> 8 [style=solid label="\"asm\""]
  1785 -> 9 [style=solid label="\"::\""]
  1785 -> 10 [style=solid label="'['"]
  1785 -> 11 [style=solid label="\"virtual\""]
  1785 -> 12 [style=solid label="\"class\""]
  1785 -> 13 [style=solid label="\"struct\""]
  1785 -> 14 [style=solid label="\"union\""]
  1785 -> 15 [style=solid label="\"template\""]
  1785 -> 16 [style=solid label="\"&&\""]
  1785 -> 17 [style=solid label="\"operator\""]
  1785 -> 18 [style=solid label="\"const\""]
  1785 -> 19 [style=solid label="\"volatile\""]
  1785 -> 20 [style=solid label="\"friend\""]
  1785 -> 21 [style=solid label="\"typedef\""]
  1785 -> 22 [style=solid label="\"constexpr\""]
  1785 -> 23 [style=solid label="\"consteval\""]
  1785 -> 24 [style=solid label="\"constinit\""]
  1785 -> 25 [style=solid label="\"inline\""]
  1785 -> 26 [style=solid label="\"decltype\""]
  1785 -> 27 [style=solid label="\"enum\""]
  1785 -> 28 [style=solid label="\"extern\""]
  1785 -> 29 [style=solid label="\"explicit\""]
  1785 -> 30 [style=solid label="\"export\""]
  1785 -> 158 [style=solid label="\"export-keyword\""]
  1785 -> 32 [style=solid label="'*'"]
  1785 -> 34 [style=solid label="\"import-keyword\""]
  1785 -> 35 [style=solid label="\"namespace\""]
  1785 -> 36 [style=solid label="'~'"]
  1785 -> 37 [style=solid label="\"auto\""]
  1785 -> 38 [style=solid label="\"char\""]
  1785 -> 39 [style=solid label="\"char8_t\""]
  1785 -> 40 [style=solid label="\"char16_t\""]
  1785 -> 41 [style=solid label="\"char32_t\""]
  1785 -> 42 [style=solid label="\"wchar_t\""]
  1785 -> 43 [style=solid label="\"bool\""]
  1785 -> 44 [style=solid label="\"short\""]
  1785 -> 45 [style=solid label="\"int\""]
  1785 -> 46 [style=solid label="\"long\""]
  1785 -> 47 [style=solid label="\"signed\""]
  1785 -> 48 [style=solid label="\"unsigned\""]
  1785 -> 49 [style=solid label="\"float\""]
  1785 -> 50 [style=solid label="\"double\""]
  1785 -> 51 [style=solid label="\"void\""]
  1785 -> 52 [style=solid label="\"static_assert\""]
  1785 -> 53 [style=solid label="\"static\""]
  1785 -> 54 [style=solid label="\"thread_local\""]
  1785 -> 55 [style=solid label="\"mutable\""]
  1785 -> 56 [style=solid label="\"typename\""]
  1785 -> 57 [style=dashed label="alias-declaration"]
  1785 -> 58 [style=dashed label="alignment-specifier"]
  1785 -> 59 [style=dashed label="asm-declaration"]
  1785 -> 60 [style=dashed label="attribute-declaration"]
  1785 -> 61 [style=dashed label="attribute-specifier"]
  1785 -> 62 [style=dashed label="attribute-specifier-seq"]
  1785 -> 63 [style=dashed label="block-declaration"]
  1785 -> 64 [style=dashed label="class-head"]
  1785 -> 65 [style=dashed label="class-key"]
  1785 -> 66 [style=dashed label="class-name"]
  1785 -> 67 [style=dashed label="class-specifier"]
  1785 -> 68 [style=dashed label="concept-name"]
  1785 -> 69 [style=dashed label="conversion-function-id"]
  1785 -> 70 [style=dashed label="cv-qualifier"]
  1785 -> 71 [style=dashed label="decl-specifier"]
  1785 -> 72 [style=dashed label="decl-specifier-seq"]
  1785 -> 290 [style=dashed label="declaration"]
  1785 -> 75 [style=dashed label="declarator"]
  1785 -> 76 [style=dashed label="declarator-id"]
  1785 -> 77 [style=dashed label="decltype-specifier"]
  1785 -> 78 [style=dashed label="deduction-guide"]
  1785 -> 79 [style=dashed label="defining-type-specifier"]
  1785 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1785 -> 81 [style=dashed label="elaborated-type-specifier"]
  1785 -> 82 [style=dashed label="empty-declaration"]
  1785 -> 83 [style=dashed label="enum-head"]
  1785 -> 84 [style=dashed label="enum-key"]
  1785 -> 85 [style=dashed label="enum-name"]
  1785 -> 86 [style=dashed label="enum-specifier"]
  1785 -> 87 [style=dashed label="explicit-instantiation"]
  1785 -> 88 [style=dashed label="explicit-specialization"]
  1785 -> 89 [style=dashed label="explicit-specifier"]
  1785 -> 90 [style=dashed label="export-declaration"]
  1785 -> 91 [style=dashed label="function-definition"]
  1785 -> 92 [style=dashed label="function-specifier"]
  1785 -> 94 [style=dashed label="id-expression"]
  1785 -> 95 [style=dashed label="linkage-specification"]
  1785 -> 96 [style=dashed label="literal-operator-id"]
  1785 -> 98 [style=dashed label="module-import-declaration"]
  1785 -> 99 [style=dashed label="named-namespace-definition"]
  1785 -> 100 [style=dashed label="namespace-alias"]
  1785 -> 101 [style=dashed label="namespace-alias-definition"]
  1785 -> 102 [style=dashed label="namespace-definition"]
  1785 -> 103 [style=dashed label="namespace-name"]
  1785 -> 104 [style=dashed label="nested-name-specifier"]
  1785 -> 105 [style=dashed label="nested-namespace-definition"]
  1785 -> 106 [style=dashed label="nodeclspec-function-declaration"]
  1785 -> 107 [style=dashed label="noptr-declarator"]
  1785 -> 108 [style=dashed label="opaque-enum-declaration"]
  1785 -> 109 [style=dashed label="operator-function-id"]
  1785 -> 110 [style=dashed label="placeholder-type-specifier"]
  1785 -> 111 [style=dashed label="ptr-declarator"]
  1785 -> 112 [style=dashed label="ptr-operator"]
  1785 -> 113 [style=dashed label="qualified-id"]
  1785 -> 114 [style=dashed label="simple-declaration"]
  1785 -> 115 [style=dashed label="simple-template-id"]
  1785 -> 116 [style=dashed label="simple-type-specifier"]
  1785 -> 117 [style=dashed label="static_assert-declaration"]
  1785 -> 118 [style=dashed label="storage-class-specifier"]
  1785 -> 119 [style=dashed label="template-declaration"]
  1785 -> 120 [style=dashed label="template-head"]
  1785 -> 121 [style=dashed label="template-id"]
  1785 -> 122 [style=dashed label="template-name"]
  1785 -> 124 [style=dashed label="type-constraint"]
  1785 -> 125 [style=dashed label="type-name"]
  1785 -> 126 [style=dashed label="type-specifier"]
  1785 -> 127 [style=dashed label="typedef-name"]
  1785 -> 128 [style=dashed label="typename-specifier"]
  1785 -> 129 [style=dashed label="unnamed-namespace-definition"]
  1785 -> 130 [style=dashed label="unqualified-id"]
  1785 -> 131 [style=dashed label="using-declaration"]
  1785 -> 132 [style=dashed label="using-directive"]
  1785 -> 133 [style=dashed label="using-enum-declaration"]
  1785 -> "1785R891" [style=solid]
 "1785R891" [label="R891", fillcolor=3, shape=diamond, style=filled]
  1786 [label="State 1786\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l845 parameters-and-qualifiers: '(' parameter-declaration-clause ')' cv-qualifier-seq attribute-specifier-seq •\l"]
  1786 -> 4 [style=solid label="\"alignas\""]
  1786 -> 10 [style=solid label="'['"]
  1786 -> 58 [style=dashed label="alignment-specifier"]
  1786 -> 265 [style=dashed label="attribute-specifier"]
  1786 -> "1786R845d" [label="['[']", style=solid]
 "1786R845d" [label="R845", fillcolor=5, shape=diamond, style=filled]
  1786 -> "1786R845" [style=solid]
 "1786R845" [label="R845", fillcolor=3, shape=diamond, style=filled]
  1787 [label="State 1787\n\l841 parameters-and-qualifiers: '(' parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier •\l849                          | '(' parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier • attribute-specifier-seq\l"]
  1787 -> 4 [style=solid label="\"alignas\""]
  1787 -> 10 [style=solid label="'['"]
  1787 -> 58 [style=dashed label="alignment-specifier"]
  1787 -> 61 [style=dashed label="attribute-specifier"]
  1787 -> 1900 [style=dashed label="attribute-specifier-seq"]
  1787 -> "1787R841d" [label="['[']", style=solid]
 "1787R841d" [label="R841", fillcolor=5, shape=diamond, style=filled]
  1787 -> "1787R841" [style=solid]
 "1787R841" [label="R841", fillcolor=3, shape=diamond, style=filled]
  1788 [label="State 1788\n\l839 parameters-and-qualifiers: '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier •\l843                          | '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier • noexcept-specifier\l847                          | '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier • attribute-specifier-seq\l851                          | '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier • noexcept-specifier attribute-specifier-seq\l"]
  1788 -> 4 [style=solid label="\"alignas\""]
  1788 -> 10 [style=solid label="'['"]
  1788 -> 898 [style=solid label="\"noexcept\""]
  1788 -> 58 [style=dashed label="alignment-specifier"]
  1788 -> 61 [style=dashed label="attribute-specifier"]
  1788 -> 1901 [style=dashed label="attribute-specifier-seq"]
  1788 -> 1902 [style=dashed label="noexcept-specifier"]
  1788 -> "1788R839d" [label="['[']", style=solid]
 "1788R839d" [label="R839", fillcolor=5, shape=diamond, style=filled]
  1788 -> "1788R839" [style=solid]
 "1788R839" [label="R839", fillcolor=3, shape=diamond, style=filled]
  1789 [label="State 1789\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l848 parameters-and-qualifiers: '(' parameter-declaration-clause ')' noexcept-specifier attribute-specifier-seq •\l"]
  1789 -> 4 [style=solid label="\"alignas\""]
  1789 -> 10 [style=solid label="'['"]
  1789 -> 58 [style=dashed label="alignment-specifier"]
  1789 -> 265 [style=dashed label="attribute-specifier"]
  1789 -> "1789R848d" [label="['[']", style=solid]
 "1789R848d" [label="R848", fillcolor=5, shape=diamond, style=filled]
  1789 -> "1789R848" [style=solid]
 "1789R848" [label="R848", fillcolor=3, shape=diamond, style=filled]
  1790 [label="State 1790\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l846 parameters-and-qualifiers: '(' parameter-declaration-clause ')' ref-qualifier attribute-specifier-seq •\l"]
  1790 -> 4 [style=solid label="\"alignas\""]
  1790 -> 10 [style=solid label="'['"]
  1790 -> 58 [style=dashed label="alignment-specifier"]
  1790 -> 265 [style=dashed label="attribute-specifier"]
  1790 -> "1790R846d" [label="['[']", style=solid]
 "1790R846d" [label="R846", fillcolor=5, shape=diamond, style=filled]
  1790 -> "1790R846" [style=solid]
 "1790R846" [label="R846", fillcolor=3, shape=diamond, style=filled]
  1791 [label="State 1791\n\l842 parameters-and-qualifiers: '(' parameter-declaration-clause ')' ref-qualifier noexcept-specifier •\l850                          | '(' parameter-declaration-clause ')' ref-qualifier noexcept-specifier • attribute-specifier-seq\l"]
  1791 -> 4 [style=solid label="\"alignas\""]
  1791 -> 10 [style=solid label="'['"]
  1791 -> 58 [style=dashed label="alignment-specifier"]
  1791 -> 61 [style=dashed label="attribute-specifier"]
  1791 -> 1903 [style=dashed label="attribute-specifier-seq"]
  1791 -> "1791R842d" [label="['[']", style=solid]
 "1791R842d" [label="R842", fillcolor=5, shape=diamond, style=filled]
  1791 -> "1791R842" [style=solid]
 "1791R842" [label="R842", fillcolor=3, shape=diamond, style=filled]
  1792 [label="State 1792\n\l162 concept-definition: \"concept\" concept-name '=' constraint-expression ';' •\l"]
  1792 -> "1792R162" [style=solid]
 "1792R162" [label="R162", fillcolor=3, shape=diamond, style=filled]
  1793 [label="State 1793\n\l235 deduction-guide: template-name '(' parameter-declaration-clause ')' \"->\" simple-template-id • ';'\l"]
  1793 -> 1904 [style=solid label="';'"]
  1794 [label="State 1794\n\l349 fold-expression: '(' \"...\" fold-operator cast-expression ')' •\l"]
  1794 -> "1794R349" [style=solid]
 "1794R349" [label="R349", fillcolor=3, shape=diamond, style=filled]
  1795 [label="State 1795\n\l348 fold-expression: '(' cast-expression fold-operator \"...\" ')' •\l"]
  1795 -> "1795R348" [style=solid]
 "1795R348" [label="R348", fillcolor=3, shape=diamond, style=filled]
  1796 [label="State 1796\n\l350 fold-expression: '(' cast-expression fold-operator \"...\" fold-operator • cast-expression ')'\l"]
  1796 -> 1 [style=solid label="IDENTIFIER"]
  1796 -> 361 [style=solid label="'+'"]
  1796 -> 362 [style=solid label="'-'"]
  1796 -> 363 [style=solid label="'('"]
  1796 -> 364 [style=solid label="'&'"]
  1796 -> 365 [style=solid label="\"::\""]
  1796 -> 366 [style=solid label="'['"]
  1796 -> 367 [style=solid label="\"co_await\""]
  1796 -> 368 [style=solid label="'0'"]
  1796 -> 369 [style=solid label="'1'"]
  1796 -> 370 [style=solid label="\"0b\""]
  1796 -> 371 [style=solid label="\"0B\""]
  1796 -> 372 [style=solid label="'\\''"]
  1796 -> 373 [style=solid label="\"false\""]
  1796 -> 374 [style=solid label="\"true\""]
  1796 -> 375 [style=solid label="\"noexcept\""]
  1796 -> 17 [style=solid label="\"operator\""]
  1796 -> 26 [style=solid label="\"decltype\""]
  1796 -> 376 [style=solid label="\"delete\""]
  1796 -> 377 [style=solid label="'.'"]
  1796 -> 378 [style=solid label="'2'"]
  1796 -> 379 [style=solid label="'3'"]
  1796 -> 380 [style=solid label="'4'"]
  1796 -> 381 [style=solid label="'5'"]
  1796 -> 382 [style=solid label="'6'"]
  1796 -> 383 [style=solid label="'7'"]
  1796 -> 384 [style=solid label="'8'"]
  1796 -> 385 [style=solid label="'9'"]
  1796 -> 185 [style=solid label="\"u8\""]
  1796 -> 186 [style=solid label="'u'"]
  1796 -> 187 [style=solid label="'U'"]
  1796 -> 188 [style=solid label="'L'"]
  1796 -> 386 [style=solid label="'*'"]
  1796 -> 203 [style=solid label="'\"'"]
  1796 -> 387 [style=solid label="\"0x\""]
  1796 -> 388 [style=solid label="\"0X\""]
  1796 -> 389 [style=solid label="\"requires\""]
  1796 -> 390 [style=solid label="\"new\""]
  1796 -> 391 [style=solid label="'~'"]
  1796 -> 392 [style=solid label="'!'"]
  1796 -> 393 [style=solid label="\"++\""]
  1796 -> 394 [style=solid label="\"--\""]
  1796 -> 395 [style=solid label="\"this\""]
  1796 -> 37 [style=solid label="\"auto\""]
  1796 -> 396 [style=solid label="\"nullptr\""]
  1796 -> 397 [style=solid label="\"dynamic_cast\""]
  1796 -> 398 [style=solid label="\"static_cast\""]
  1796 -> 399 [style=solid label="\"reinterpret_cast\""]
  1796 -> 400 [style=solid label="\"const_cast\""]
  1796 -> 401 [style=solid label="\"typeid\""]
  1796 -> 38 [style=solid label="\"char\""]
  1796 -> 39 [style=solid label="\"char8_t\""]
  1796 -> 40 [style=solid label="\"char16_t\""]
  1796 -> 41 [style=solid label="\"char32_t\""]
  1796 -> 42 [style=solid label="\"wchar_t\""]
  1796 -> 43 [style=solid label="\"bool\""]
  1796 -> 44 [style=solid label="\"short\""]
  1796 -> 45 [style=solid label="\"int\""]
  1796 -> 46 [style=solid label="\"long\""]
  1796 -> 47 [style=solid label="\"signed\""]
  1796 -> 48 [style=solid label="\"unsigned\""]
  1796 -> 49 [style=solid label="\"float\""]
  1796 -> 50 [style=solid label="\"double\""]
  1796 -> 51 [style=solid label="\"void\""]
  1796 -> 209 [style=solid label="'R'"]
  1796 -> 56 [style=solid label="\"typename\""]
  1796 -> 402 [style=solid label="\"sizeof\""]
  1796 -> 403 [style=solid label="\"alignof\""]
  1796 -> 406 [style=dashed label="await-expression"]
  1796 -> 407 [style=dashed label="binary-literal"]
  1796 -> 408 [style=dashed label="boolean-literal"]
  1796 -> 1905 [style=dashed label="cast-expression"]
  1796 -> 410 [style=dashed label="character-literal"]
  1796 -> 66 [style=dashed label="class-name"]
  1796 -> 68 [style=dashed label="concept-name"]
  1796 -> 69 [style=dashed label="conversion-function-id"]
  1796 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1796 -> 415 [style=dashed label="decimal-literal"]
  1796 -> 77 [style=dashed label="decltype-specifier"]
  1796 -> 416 [style=dashed label="delete-expression"]
  1796 -> 417 [style=dashed label="digit"]
  1796 -> 418 [style=dashed label="digit-sequence"]
  1796 -> 419 [style=dashed label="encoding-prefix"]
  1796 -> 85 [style=dashed label="enum-name"]
  1796 -> 422 [style=dashed label="floating-point-literal"]
  1796 -> 423 [style=dashed label="fold-expression"]
  1796 -> 424 [style=dashed label="fractional-constant"]
  1796 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1796 -> 426 [style=dashed label="hexadecimal-literal"]
  1796 -> 427 [style=dashed label="hexadecimal-prefix"]
  1796 -> 428 [style=dashed label="id-expression"]
  1796 -> 430 [style=dashed label="integer-literal"]
  1796 -> 431 [style=dashed label="lambda-expression"]
  1796 -> 432 [style=dashed label="lambda-introducer"]
  1796 -> 433 [style=dashed label="literal"]
  1796 -> 96 [style=dashed label="literal-operator-id"]
  1796 -> 100 [style=dashed label="namespace-alias"]
  1796 -> 103 [style=dashed label="namespace-name"]
  1796 -> 437 [style=dashed label="nested-name-specifier"]
  1796 -> 438 [style=dashed label="new-expression"]
  1796 -> 439 [style=dashed label="noexcept-expression"]
  1796 -> 440 [style=dashed label="nonzero-digit"]
  1796 -> 441 [style=dashed label="octal-literal"]
  1796 -> 109 [style=dashed label="operator-function-id"]
  1796 -> 110 [style=dashed label="placeholder-type-specifier"]
  1796 -> 443 [style=dashed label="pointer-literal"]
  1796 -> 444 [style=dashed label="postfix-expression"]
  1796 -> 445 [style=dashed label="primary-expression"]
  1796 -> 113 [style=dashed label="qualified-id"]
  1796 -> 447 [style=dashed label="requires-expression"]
  1796 -> 115 [style=dashed label="simple-template-id"]
  1796 -> 534 [style=dashed label="simple-type-specifier"]
  1796 -> 450 [style=dashed label="string-literal"]
  1796 -> 121 [style=dashed label="template-id"]
  1796 -> 216 [style=dashed label="template-name"]
  1796 -> 124 [style=dashed label="type-constraint"]
  1796 -> 125 [style=dashed label="type-name"]
  1796 -> 127 [style=dashed label="typedef-name"]
  1796 -> 536 [style=dashed label="typename-specifier"]
  1796 -> 454 [style=dashed label="unary-expression"]
  1796 -> 455 [style=dashed label="unary-operator"]
  1796 -> 130 [style=dashed label="unqualified-id"]
  1796 -> 456 [style=dashed label="user-defined-character-literal"]
  1796 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1796 -> 458 [style=dashed label="user-defined-integer-literal"]
  1796 -> 459 [style=dashed label="user-defined-literal"]
  1796 -> 460 [style=dashed label="user-defined-string-literal"]
  1797 [label="State 1797\n\l246 delete-expression: \"::\" \"delete\" '[' ']' cast-expression •\l"]
  1797 -> "1797R246" [style=solid]
 "1797R246" [label="R246", fillcolor=3, shape=diamond, style=filled]
  1798 [label="State 1798\n\l680 new-expression: \"::\" \"new\" '(' type-id ')' •\l684               | \"::\" \"new\" '(' type-id ')' • new-initializer\l"]
  1798 -> 1310 [style=solid label="'('"]
  1798 -> 939 [style=solid label="'{'"]
  1798 -> 1311 [style=dashed label="braced-init-list"]
  1798 -> 1906 [style=dashed label="new-initializer"]
  1798 -> "1798R680d" [label="['{']", style=solid]
 "1798R680d" [label="R680", fillcolor=5, shape=diamond, style=filled]
  1798 -> "1798R680" [style=solid]
 "1798R680" [label="R680", fillcolor=3, shape=diamond, style=filled]
  1799 [label="State 1799\n\l682 new-expression: \"::\" \"new\" new-placement '(' type-id • ')'\l686               | \"::\" \"new\" new-placement '(' type-id • ')' new-initializer\l"]
  1799 -> 1907 [style=solid label="')'"]
  1800 [label="State 1800\n\l678 new-expression: \"::\" \"new\" new-placement new-type-id new-initializer •\l"]
  1800 -> "1800R678" [style=solid]
 "1800R678" [label="R678", fillcolor=3, shape=diamond, style=filled]
  1801 [label="State 1801\n\l472 init-capture: '&' \"...\" IDENTIFIER initializer •\l"]
  1801 -> "1801R472" [style=solid]
 "1801R472" [label="R472", fillcolor=3, shape=diamond, style=filled]
  1802 [label="State 1802\n\l156 compound-requirement: '{' expression '}' • ';'\l157                     | '{' expression '}' • \"noexcept\" ';'\l158                     | '{' expression '}' • return-type-requirement ';'\l159                     | '{' expression '}' • \"noexcept\" return-type-requirement ';'\l"]
  1802 -> 1908 [style=solid label="';'"]
  1802 -> 1909 [style=solid label="\"noexcept\""]
  1802 -> 1910 [style=solid label="\"->\""]
  1802 -> 1911 [style=dashed label="return-type-requirement"]
  1803 [label="State 1803\n\l349 fold-expression: '(' \"...\" • fold-operator cast-expression ')'\l832 parameter-declaration-clause: \"...\" •\l"]
  1803 -> 1239 [style=solid label="'+'"]
  1803 -> 1240 [style=solid label="'-'"]
  1803 -> 1241 [style=solid label="'='"]
  1803 -> 1242 [style=solid label="'&'"]
  1803 -> 1243 [style=solid label="\"*=\""]
  1803 -> 1244 [style=solid label="\"/=\""]
  1803 -> 1245 [style=solid label="\"%=\""]
  1803 -> 1246 [style=solid label="\"+=\""]
  1803 -> 1247 [style=solid label="\"-=\""]
  1803 -> 1248 [style=solid label="\">>=\""]
  1803 -> 1249 [style=solid label="\"<<=\""]
  1803 -> 1250 [style=solid label="\"&=\""]
  1803 -> 1251 [style=solid label="\"^=\""]
  1803 -> 1252 [style=solid label="\"|=\""]
  1803 -> 1253 [style=solid label="','"]
  1803 -> 1254 [style=solid label="\"&&\""]
  1803 -> 1255 [style=solid label="\"||\""]
  1803 -> 1256 [style=solid label="\"==\""]
  1803 -> 1257 [style=solid label="\"!=\""]
  1803 -> 1258 [style=solid label="'^'"]
  1803 -> 1259 [style=solid label="'<'"]
  1803 -> 1260 [style=solid label="'>'"]
  1803 -> 1261 [style=solid label="'*'"]
  1803 -> 1262 [style=solid label="'/'"]
  1803 -> 1263 [style=solid label="'%'"]
  1803 -> 1264 [style=solid label="'|'"]
  1803 -> 1265 [style=solid label="\"<<\""]
  1803 -> 1266 [style=solid label="\">>\""]
  1803 -> 1267 [style=solid label="\"<=\""]
  1803 -> 1268 [style=solid label="\">=\""]
  1803 -> 1269 [style=solid label="\".*\""]
  1803 -> 1270 [style=solid label="\"->*\""]
  1803 -> 1271 [style=dashed label="fold-operator"]
  1803 -> "1803R832" [style=solid]
 "1803R832" [label="R832", fillcolor=3, shape=diamond, style=filled]
  1804 [label="State 1804\n\l809 parameter-declaration: \"this\" • decl-specifier-seq declarator\l813                      | \"this\" • decl-specifier-seq declarator '=' initializer-clause\l817                      | \"this\" • decl-specifier-seq\l821                      | \"this\" • decl-specifier-seq abstract-declarator\l825                      | \"this\" • decl-specifier-seq '=' initializer-clause\l829                      | \"this\" • decl-specifier-seq abstract-declarator '=' initializer-clause\l884 primary-expression: \"this\" •\l"]
  1804 -> 161 [style=solid label="IDENTIFIER"]
  1804 -> 9 [style=solid label="\"::\""]
  1804 -> 11 [style=solid label="\"virtual\""]
  1804 -> 12 [style=solid label="\"class\""]
  1804 -> 13 [style=solid label="\"struct\""]
  1804 -> 14 [style=solid label="\"union\""]
  1804 -> 18 [style=solid label="\"const\""]
  1804 -> 19 [style=solid label="\"volatile\""]
  1804 -> 20 [style=solid label="\"friend\""]
  1804 -> 21 [style=solid label="\"typedef\""]
  1804 -> 22 [style=solid label="\"constexpr\""]
  1804 -> 23 [style=solid label="\"consteval\""]
  1804 -> 24 [style=solid label="\"constinit\""]
  1804 -> 263 [style=solid label="\"inline\""]
  1804 -> 26 [style=solid label="\"decltype\""]
  1804 -> 27 [style=solid label="\"enum\""]
  1804 -> 264 [style=solid label="\"extern\""]
  1804 -> 29 [style=solid label="\"explicit\""]
  1804 -> 37 [style=solid label="\"auto\""]
  1804 -> 38 [style=solid label="\"char\""]
  1804 -> 39 [style=solid label="\"char8_t\""]
  1804 -> 40 [style=solid label="\"char16_t\""]
  1804 -> 41 [style=solid label="\"char32_t\""]
  1804 -> 42 [style=solid label="\"wchar_t\""]
  1804 -> 43 [style=solid label="\"bool\""]
  1804 -> 44 [style=solid label="\"short\""]
  1804 -> 45 [style=solid label="\"int\""]
  1804 -> 46 [style=solid label="\"long\""]
  1804 -> 47 [style=solid label="\"signed\""]
  1804 -> 48 [style=solid label="\"unsigned\""]
  1804 -> 49 [style=solid label="\"float\""]
  1804 -> 50 [style=solid label="\"double\""]
  1804 -> 51 [style=solid label="\"void\""]
  1804 -> 53 [style=solid label="\"static\""]
  1804 -> 54 [style=solid label="\"thread_local\""]
  1804 -> 55 [style=solid label="\"mutable\""]
  1804 -> 56 [style=solid label="\"typename\""]
  1804 -> 64 [style=dashed label="class-head"]
  1804 -> 65 [style=dashed label="class-key"]
  1804 -> 66 [style=dashed label="class-name"]
  1804 -> 67 [style=dashed label="class-specifier"]
  1804 -> 68 [style=dashed label="concept-name"]
  1804 -> 70 [style=dashed label="cv-qualifier"]
  1804 -> 71 [style=dashed label="decl-specifier"]
  1804 -> 969 [style=dashed label="decl-specifier-seq"]
  1804 -> 77 [style=dashed label="decltype-specifier"]
  1804 -> 79 [style=dashed label="defining-type-specifier"]
  1804 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1804 -> 81 [style=dashed label="elaborated-type-specifier"]
  1804 -> 83 [style=dashed label="enum-head"]
  1804 -> 268 [style=dashed label="enum-key"]
  1804 -> 85 [style=dashed label="enum-name"]
  1804 -> 86 [style=dashed label="enum-specifier"]
  1804 -> 269 [style=dashed label="explicit-specifier"]
  1804 -> 92 [style=dashed label="function-specifier"]
  1804 -> 100 [style=dashed label="namespace-alias"]
  1804 -> 103 [style=dashed label="namespace-name"]
  1804 -> 213 [style=dashed label="nested-name-specifier"]
  1804 -> 110 [style=dashed label="placeholder-type-specifier"]
  1804 -> 142 [style=dashed label="simple-template-id"]
  1804 -> 116 [style=dashed label="simple-type-specifier"]
  1804 -> 118 [style=dashed label="storage-class-specifier"]
  1804 -> 216 [style=dashed label="template-name"]
  1804 -> 124 [style=dashed label="type-constraint"]
  1804 -> 125 [style=dashed label="type-name"]
  1804 -> 126 [style=dashed label="type-specifier"]
  1804 -> 127 [style=dashed label="typedef-name"]
  1804 -> 128 [style=dashed label="typename-specifier"]
  1804 -> "1804R884" [style=solid]
 "1804R884" [label="R884", fillcolor=3, shape=diamond, style=filled]
  1805 [label="State 1805\n\l238 defining-type-specifier: type-specifier •\l1121 type-specifier-seq: type-specifier •\l1122                   | type-specifier • attribute-specifier-seq\l1123                   | type-specifier • type-specifier-seq\l"]
  1805 -> 161 [style=solid label="IDENTIFIER"]
  1805 -> 4 [style=solid label="\"alignas\""]
  1805 -> 9 [style=solid label="\"::\""]
  1805 -> 10 [style=solid label="'['"]
  1805 -> 12 [style=solid label="\"class\""]
  1805 -> 13 [style=solid label="\"struct\""]
  1805 -> 14 [style=solid label="\"union\""]
  1805 -> 18 [style=solid label="\"const\""]
  1805 -> 19 [style=solid label="\"volatile\""]
  1805 -> 26 [style=solid label="\"decltype\""]
  1805 -> 136 [style=solid label="\"enum\""]
  1805 -> 37 [style=solid label="\"auto\""]
  1805 -> 38 [style=solid label="\"char\""]
  1805 -> 39 [style=solid label="\"char8_t\""]
  1805 -> 40 [style=solid label="\"char16_t\""]
  1805 -> 41 [style=solid label="\"char32_t\""]
  1805 -> 42 [style=solid label="\"wchar_t\""]
  1805 -> 43 [style=solid label="\"bool\""]
  1805 -> 44 [style=solid label="\"short\""]
  1805 -> 45 [style=solid label="\"int\""]
  1805 -> 46 [style=solid label="\"long\""]
  1805 -> 47 [style=solid label="\"signed\""]
  1805 -> 48 [style=solid label="\"unsigned\""]
  1805 -> 49 [style=solid label="\"float\""]
  1805 -> 50 [style=solid label="\"double\""]
  1805 -> 51 [style=solid label="\"void\""]
  1805 -> 56 [style=solid label="\"typename\""]
  1805 -> 58 [style=dashed label="alignment-specifier"]
  1805 -> 61 [style=dashed label="attribute-specifier"]
  1805 -> 519 [style=dashed label="attribute-specifier-seq"]
  1805 -> 210 [style=dashed label="class-key"]
  1805 -> 66 [style=dashed label="class-name"]
  1805 -> 68 [style=dashed label="concept-name"]
  1805 -> 70 [style=dashed label="cv-qualifier"]
  1805 -> 77 [style=dashed label="decltype-specifier"]
  1805 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1805 -> 81 [style=dashed label="elaborated-type-specifier"]
  1805 -> 85 [style=dashed label="enum-name"]
  1805 -> 100 [style=dashed label="namespace-alias"]
  1805 -> 103 [style=dashed label="namespace-name"]
  1805 -> 213 [style=dashed label="nested-name-specifier"]
  1805 -> 110 [style=dashed label="placeholder-type-specifier"]
  1805 -> 142 [style=dashed label="simple-template-id"]
  1805 -> 116 [style=dashed label="simple-type-specifier"]
  1805 -> 216 [style=dashed label="template-name"]
  1805 -> 124 [style=dashed label="type-constraint"]
  1805 -> 125 [style=dashed label="type-name"]
  1805 -> 217 [style=dashed label="type-specifier"]
  1805 -> 520 [style=dashed label="type-specifier-seq"]
  1805 -> 127 [style=dashed label="typedef-name"]
  1805 -> 128 [style=dashed label="typename-specifier"]
  1805 -> "1805R238d" [label="[IDENTIFIER, \"alignas\", \"::\", '[', \"class\", \"struct\", \"union\", \"const\", \"volatile\", \"decltype\", \"enum\", \"auto\", \"char\", \"char8_t\", \"char16_t\", \"char32_t\", \"wchar_t\", \"bool\", \"short\", \"int\", \"long\", \"signed\", \"unsigned\", \"float\", \"double\", \"void\", \"typename\"]", style=solid]
 "1805R238d" [label="R238", fillcolor=5, shape=diamond, style=filled]
  1805 -> "1805R238" [style=solid]
 "1805R238" [label="R238", fillcolor=3, shape=diamond, style=filled]
  1805 -> "1805R1121d" [label="[IDENTIFIER, '(', ')', \"...\", '&', \"::\", '[', \"&&\", \"decltype\", '*']", style=solid]
 "1805R1121d" [label="R1121", fillcolor=5, shape=diamond, style=filled]
  1806 [label="State 1806\n\l668 nested-requirement: \"requires\" constraint-expression ';' •\l"]
  1806 -> "1806R668" [style=solid]
 "1806R668" [label="R668", fillcolor=3, shape=diamond, style=filled]
  1807 [label="State 1807\n\l145 class-name: IDENTIFIER •\l297 enum-name: IDENTIFIER •\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l1124 typedef-name: IDENTIFIER •\l1126 typename-specifier: \"typename\" nested-name-specifier IDENTIFIER •\l"]
  1807 -> 726 [style=solid label="\"::\""]
  1807 -> "1807R145" [label="[';']", style=solid]
 "1807R145" [label="R145", fillcolor=3, shape=diamond, style=filled]
  1807 -> "1807R297d" [label="[';']", style=solid]
 "1807R297d" [label="R297", fillcolor=5, shape=diamond, style=filled]
  1807 -> "1807R1066" [label="['<']", style=solid]
 "1807R1066" [label="R1066", fillcolor=3, shape=diamond, style=filled]
  1807 -> "1807R1124d" [label="[';']", style=solid]
 "1807R1124d" [label="R1124", fillcolor=5, shape=diamond, style=filled]
  1807 -> "1807R1126" [label="[]", style=solid]
 "1807R1126" [label="R1126", fillcolor=3, shape=diamond, style=filled]
  1808 [label="State 1808\n\l146 class-name: simple-template-id •\l664 nested-name-specifier: nested-name-specifier simple-template-id • \"::\"\l1125 typedef-name: simple-template-id •\l1127 typename-specifier: \"typename\" nested-name-specifier simple-template-id •\l"]
  1808 -> 733 [style=solid label="\"::\""]
  1808 -> "1808R146" [label="[';']", style=solid]
 "1808R146" [label="R146", fillcolor=3, shape=diamond, style=filled]
  1808 -> "1808R1125d" [label="[';']", style=solid]
 "1808R1125d" [label="R1125", fillcolor=5, shape=diamond, style=filled]
  1808 -> "1808R1127" [label="[]", style=solid]
 "1808R1127" [label="R1127", fillcolor=3, shape=diamond, style=filled]
  1809 [label="State 1809\n\l1116 type-requirement: \"typename\" nested-name-specifier type-name • ';'\l"]
  1809 -> 1912 [style=solid label="';'"]
  1810 [label="State 1810\n\l1115 type-requirement: \"typename\" type-name ';' •\l"]
  1810 -> "1810R1115" [style=solid]
 "1810R1115" [label="R1115", fillcolor=3, shape=diamond, style=filled]
  1811 [label="State 1811\n\l685 new-expression: \"new\" '(' type-id ')' new-initializer •\l"]
  1811 -> "1811R685" [style=solid]
 "1811R685" [label="R685", fillcolor=3, shape=diamond, style=filled]
  1812 [label="State 1812\n\l683 new-expression: \"new\" new-placement '(' type-id ')' •\l687               | \"new\" new-placement '(' type-id ')' • new-initializer\l"]
  1812 -> 1310 [style=solid label="'('"]
  1812 -> 939 [style=solid label="'{'"]
  1812 -> 1311 [style=dashed label="braced-init-list"]
  1812 -> 1913 [style=dashed label="new-initializer"]
  1812 -> "1812R683d" [label="['{']", style=solid]
 "1812R683d" [label="R683", fillcolor=5, shape=diamond, style=filled]
  1812 -> "1812R683" [style=solid]
 "1812R683" [label="R683", fillcolor=3, shape=diamond, style=filled]
  1813 [label="State 1813\n\l689 new-initializer: '(' expression-list ')' •\l"]
  1813 -> "1813R689" [style=solid]
 "1813R689" [label="R689", fillcolor=3, shape=diamond, style=filled]
  1814 [label="State 1814\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l735 noptr-new-declarator: '[' ']' attribute-specifier-seq •\l"]
  1814 -> 4 [style=solid label="\"alignas\""]
  1814 -> 10 [style=solid label="'['"]
  1814 -> 58 [style=dashed label="alignment-specifier"]
  1814 -> 265 [style=dashed label="attribute-specifier"]
  1814 -> "1814R735d" [label="['[']", style=solid]
 "1814R735d" [label="R735", fillcolor=5, shape=diamond, style=filled]
  1814 -> "1814R735" [style=solid]
 "1814R735" [label="R735", fillcolor=3, shape=diamond, style=filled]
  1815 [label="State 1815\n\l734 noptr-new-declarator: '[' expression ']' •\l736                     | '[' expression ']' • attribute-specifier-seq\l"]
  1815 -> 4 [style=solid label="\"alignas\""]
  1815 -> 10 [style=solid label="'['"]
  1815 -> 58 [style=dashed label="alignment-specifier"]
  1815 -> 61 [style=dashed label="attribute-specifier"]
  1815 -> 1914 [style=dashed label="attribute-specifier-seq"]
  1815 -> "1815R734d" [label="['[']", style=solid]
 "1815R734d" [label="R734", fillcolor=5, shape=diamond, style=filled]
  1815 -> "1815R734" [style=solid]
 "1815R734" [label="R734", fillcolor=3, shape=diamond, style=filled]
  1816 [label="State 1816\n\l737 noptr-new-declarator: noptr-new-declarator '[' constant-expression • ']'\l738                     | noptr-new-declarator '[' constant-expression • ']' attribute-specifier-seq\l"]
  1816 -> 1915 [style=solid label="']'"]
  1817 [label="State 1817\n\l877 postfix-expression: \"dynamic_cast\" '<' type-id '>' '(' • expression ')'\l"]
  1817 -> 1 [style=solid label="IDENTIFIER"]
  1817 -> 361 [style=solid label="'+'"]
  1817 -> 362 [style=solid label="'-'"]
  1817 -> 363 [style=solid label="'('"]
  1817 -> 364 [style=solid label="'&'"]
  1817 -> 365 [style=solid label="\"::\""]
  1817 -> 366 [style=solid label="'['"]
  1817 -> 367 [style=solid label="\"co_await\""]
  1817 -> 368 [style=solid label="'0'"]
  1817 -> 369 [style=solid label="'1'"]
  1817 -> 370 [style=solid label="\"0b\""]
  1817 -> 371 [style=solid label="\"0B\""]
  1817 -> 372 [style=solid label="'\\''"]
  1817 -> 373 [style=solid label="\"false\""]
  1817 -> 374 [style=solid label="\"true\""]
  1817 -> 375 [style=solid label="\"noexcept\""]
  1817 -> 17 [style=solid label="\"operator\""]
  1817 -> 26 [style=solid label="\"decltype\""]
  1817 -> 376 [style=solid label="\"delete\""]
  1817 -> 377 [style=solid label="'.'"]
  1817 -> 378 [style=solid label="'2'"]
  1817 -> 379 [style=solid label="'3'"]
  1817 -> 380 [style=solid label="'4'"]
  1817 -> 381 [style=solid label="'5'"]
  1817 -> 382 [style=solid label="'6'"]
  1817 -> 383 [style=solid label="'7'"]
  1817 -> 384 [style=solid label="'8'"]
  1817 -> 385 [style=solid label="'9'"]
  1817 -> 185 [style=solid label="\"u8\""]
  1817 -> 186 [style=solid label="'u'"]
  1817 -> 187 [style=solid label="'U'"]
  1817 -> 188 [style=solid label="'L'"]
  1817 -> 386 [style=solid label="'*'"]
  1817 -> 203 [style=solid label="'\"'"]
  1817 -> 387 [style=solid label="\"0x\""]
  1817 -> 388 [style=solid label="\"0X\""]
  1817 -> 389 [style=solid label="\"requires\""]
  1817 -> 390 [style=solid label="\"new\""]
  1817 -> 391 [style=solid label="'~'"]
  1817 -> 392 [style=solid label="'!'"]
  1817 -> 393 [style=solid label="\"++\""]
  1817 -> 394 [style=solid label="\"--\""]
  1817 -> 395 [style=solid label="\"this\""]
  1817 -> 37 [style=solid label="\"auto\""]
  1817 -> 396 [style=solid label="\"nullptr\""]
  1817 -> 397 [style=solid label="\"dynamic_cast\""]
  1817 -> 398 [style=solid label="\"static_cast\""]
  1817 -> 399 [style=solid label="\"reinterpret_cast\""]
  1817 -> 400 [style=solid label="\"const_cast\""]
  1817 -> 401 [style=solid label="\"typeid\""]
  1817 -> 38 [style=solid label="\"char\""]
  1817 -> 39 [style=solid label="\"char8_t\""]
  1817 -> 40 [style=solid label="\"char16_t\""]
  1817 -> 41 [style=solid label="\"char32_t\""]
  1817 -> 42 [style=solid label="\"wchar_t\""]
  1817 -> 43 [style=solid label="\"bool\""]
  1817 -> 44 [style=solid label="\"short\""]
  1817 -> 45 [style=solid label="\"int\""]
  1817 -> 46 [style=solid label="\"long\""]
  1817 -> 47 [style=solid label="\"signed\""]
  1817 -> 48 [style=solid label="\"unsigned\""]
  1817 -> 49 [style=solid label="\"float\""]
  1817 -> 50 [style=solid label="\"double\""]
  1817 -> 51 [style=solid label="\"void\""]
  1817 -> 209 [style=solid label="'R'"]
  1817 -> 528 [style=solid label="\"throw\""]
  1817 -> 56 [style=solid label="\"typename\""]
  1817 -> 402 [style=solid label="\"sizeof\""]
  1817 -> 403 [style=solid label="\"alignof\""]
  1817 -> 529 [style=solid label="\"co_yield\""]
  1817 -> 404 [style=dashed label="additive-expression"]
  1817 -> 405 [style=dashed label="and-expression"]
  1817 -> 530 [style=dashed label="assignment-expression"]
  1817 -> 406 [style=dashed label="await-expression"]
  1817 -> 407 [style=dashed label="binary-literal"]
  1817 -> 408 [style=dashed label="boolean-literal"]
  1817 -> 409 [style=dashed label="cast-expression"]
  1817 -> 410 [style=dashed label="character-literal"]
  1817 -> 66 [style=dashed label="class-name"]
  1817 -> 411 [style=dashed label="compare-expression"]
  1817 -> 68 [style=dashed label="concept-name"]
  1817 -> 531 [style=dashed label="conditional-expression"]
  1817 -> 69 [style=dashed label="conversion-function-id"]
  1817 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1817 -> 415 [style=dashed label="decimal-literal"]
  1817 -> 77 [style=dashed label="decltype-specifier"]
  1817 -> 416 [style=dashed label="delete-expression"]
  1817 -> 417 [style=dashed label="digit"]
  1817 -> 418 [style=dashed label="digit-sequence"]
  1817 -> 419 [style=dashed label="encoding-prefix"]
  1817 -> 85 [style=dashed label="enum-name"]
  1817 -> 420 [style=dashed label="equality-expression"]
  1817 -> 421 [style=dashed label="exclusive-or-expression"]
  1817 -> 1916 [style=dashed label="expression"]
  1817 -> 422 [style=dashed label="floating-point-literal"]
  1817 -> 423 [style=dashed label="fold-expression"]
  1817 -> 424 [style=dashed label="fractional-constant"]
  1817 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1817 -> 426 [style=dashed label="hexadecimal-literal"]
  1817 -> 427 [style=dashed label="hexadecimal-prefix"]
  1817 -> 428 [style=dashed label="id-expression"]
  1817 -> 429 [style=dashed label="inclusive-or-expression"]
  1817 -> 430 [style=dashed label="integer-literal"]
  1817 -> 431 [style=dashed label="lambda-expression"]
  1817 -> 432 [style=dashed label="lambda-introducer"]
  1817 -> 433 [style=dashed label="literal"]
  1817 -> 96 [style=dashed label="literal-operator-id"]
  1817 -> 434 [style=dashed label="logical-and-expression"]
  1817 -> 533 [style=dashed label="logical-or-expression"]
  1817 -> 436 [style=dashed label="multiplicative-expression"]
  1817 -> 100 [style=dashed label="namespace-alias"]
  1817 -> 103 [style=dashed label="namespace-name"]
  1817 -> 437 [style=dashed label="nested-name-specifier"]
  1817 -> 438 [style=dashed label="new-expression"]
  1817 -> 439 [style=dashed label="noexcept-expression"]
  1817 -> 440 [style=dashed label="nonzero-digit"]
  1817 -> 441 [style=dashed label="octal-literal"]
  1817 -> 109 [style=dashed label="operator-function-id"]
  1817 -> 110 [style=dashed label="placeholder-type-specifier"]
  1817 -> 442 [style=dashed label="pm-expression"]
  1817 -> 443 [style=dashed label="pointer-literal"]
  1817 -> 444 [style=dashed label="postfix-expression"]
  1817 -> 445 [style=dashed label="primary-expression"]
  1817 -> 113 [style=dashed label="qualified-id"]
  1817 -> 446 [style=dashed label="relational-expression"]
  1817 -> 447 [style=dashed label="requires-expression"]
  1817 -> 448 [style=dashed label="shift-expression"]
  1817 -> 115 [style=dashed label="simple-template-id"]
  1817 -> 534 [style=dashed label="simple-type-specifier"]
  1817 -> 450 [style=dashed label="string-literal"]
  1817 -> 121 [style=dashed label="template-id"]
  1817 -> 216 [style=dashed label="template-name"]
  1817 -> 535 [style=dashed label="throw-expression"]
  1817 -> 124 [style=dashed label="type-constraint"]
  1817 -> 125 [style=dashed label="type-name"]
  1817 -> 127 [style=dashed label="typedef-name"]
  1817 -> 536 [style=dashed label="typename-specifier"]
  1817 -> 454 [style=dashed label="unary-expression"]
  1817 -> 455 [style=dashed label="unary-operator"]
  1817 -> 130 [style=dashed label="unqualified-id"]
  1817 -> 456 [style=dashed label="user-defined-character-literal"]
  1817 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1817 -> 458 [style=dashed label="user-defined-integer-literal"]
  1817 -> 459 [style=dashed label="user-defined-literal"]
  1817 -> 460 [style=dashed label="user-defined-string-literal"]
  1817 -> 537 [style=dashed label="yield-expression"]
  1818 [label="State 1818\n\l878 postfix-expression: \"static_cast\" '<' type-id '>' '(' • expression ')'\l"]
  1818 -> 1 [style=solid label="IDENTIFIER"]
  1818 -> 361 [style=solid label="'+'"]
  1818 -> 362 [style=solid label="'-'"]
  1818 -> 363 [style=solid label="'('"]
  1818 -> 364 [style=solid label="'&'"]
  1818 -> 365 [style=solid label="\"::\""]
  1818 -> 366 [style=solid label="'['"]
  1818 -> 367 [style=solid label="\"co_await\""]
  1818 -> 368 [style=solid label="'0'"]
  1818 -> 369 [style=solid label="'1'"]
  1818 -> 370 [style=solid label="\"0b\""]
  1818 -> 371 [style=solid label="\"0B\""]
  1818 -> 372 [style=solid label="'\\''"]
  1818 -> 373 [style=solid label="\"false\""]
  1818 -> 374 [style=solid label="\"true\""]
  1818 -> 375 [style=solid label="\"noexcept\""]
  1818 -> 17 [style=solid label="\"operator\""]
  1818 -> 26 [style=solid label="\"decltype\""]
  1818 -> 376 [style=solid label="\"delete\""]
  1818 -> 377 [style=solid label="'.'"]
  1818 -> 378 [style=solid label="'2'"]
  1818 -> 379 [style=solid label="'3'"]
  1818 -> 380 [style=solid label="'4'"]
  1818 -> 381 [style=solid label="'5'"]
  1818 -> 382 [style=solid label="'6'"]
  1818 -> 383 [style=solid label="'7'"]
  1818 -> 384 [style=solid label="'8'"]
  1818 -> 385 [style=solid label="'9'"]
  1818 -> 185 [style=solid label="\"u8\""]
  1818 -> 186 [style=solid label="'u'"]
  1818 -> 187 [style=solid label="'U'"]
  1818 -> 188 [style=solid label="'L'"]
  1818 -> 386 [style=solid label="'*'"]
  1818 -> 203 [style=solid label="'\"'"]
  1818 -> 387 [style=solid label="\"0x\""]
  1818 -> 388 [style=solid label="\"0X\""]
  1818 -> 389 [style=solid label="\"requires\""]
  1818 -> 390 [style=solid label="\"new\""]
  1818 -> 391 [style=solid label="'~'"]
  1818 -> 392 [style=solid label="'!'"]
  1818 -> 393 [style=solid label="\"++\""]
  1818 -> 394 [style=solid label="\"--\""]
  1818 -> 395 [style=solid label="\"this\""]
  1818 -> 37 [style=solid label="\"auto\""]
  1818 -> 396 [style=solid label="\"nullptr\""]
  1818 -> 397 [style=solid label="\"dynamic_cast\""]
  1818 -> 398 [style=solid label="\"static_cast\""]
  1818 -> 399 [style=solid label="\"reinterpret_cast\""]
  1818 -> 400 [style=solid label="\"const_cast\""]
  1818 -> 401 [style=solid label="\"typeid\""]
  1818 -> 38 [style=solid label="\"char\""]
  1818 -> 39 [style=solid label="\"char8_t\""]
  1818 -> 40 [style=solid label="\"char16_t\""]
  1818 -> 41 [style=solid label="\"char32_t\""]
  1818 -> 42 [style=solid label="\"wchar_t\""]
  1818 -> 43 [style=solid label="\"bool\""]
  1818 -> 44 [style=solid label="\"short\""]
  1818 -> 45 [style=solid label="\"int\""]
  1818 -> 46 [style=solid label="\"long\""]
  1818 -> 47 [style=solid label="\"signed\""]
  1818 -> 48 [style=solid label="\"unsigned\""]
  1818 -> 49 [style=solid label="\"float\""]
  1818 -> 50 [style=solid label="\"double\""]
  1818 -> 51 [style=solid label="\"void\""]
  1818 -> 209 [style=solid label="'R'"]
  1818 -> 528 [style=solid label="\"throw\""]
  1818 -> 56 [style=solid label="\"typename\""]
  1818 -> 402 [style=solid label="\"sizeof\""]
  1818 -> 403 [style=solid label="\"alignof\""]
  1818 -> 529 [style=solid label="\"co_yield\""]
  1818 -> 404 [style=dashed label="additive-expression"]
  1818 -> 405 [style=dashed label="and-expression"]
  1818 -> 530 [style=dashed label="assignment-expression"]
  1818 -> 406 [style=dashed label="await-expression"]
  1818 -> 407 [style=dashed label="binary-literal"]
  1818 -> 408 [style=dashed label="boolean-literal"]
  1818 -> 409 [style=dashed label="cast-expression"]
  1818 -> 410 [style=dashed label="character-literal"]
  1818 -> 66 [style=dashed label="class-name"]
  1818 -> 411 [style=dashed label="compare-expression"]
  1818 -> 68 [style=dashed label="concept-name"]
  1818 -> 531 [style=dashed label="conditional-expression"]
  1818 -> 69 [style=dashed label="conversion-function-id"]
  1818 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1818 -> 415 [style=dashed label="decimal-literal"]
  1818 -> 77 [style=dashed label="decltype-specifier"]
  1818 -> 416 [style=dashed label="delete-expression"]
  1818 -> 417 [style=dashed label="digit"]
  1818 -> 418 [style=dashed label="digit-sequence"]
  1818 -> 419 [style=dashed label="encoding-prefix"]
  1818 -> 85 [style=dashed label="enum-name"]
  1818 -> 420 [style=dashed label="equality-expression"]
  1818 -> 421 [style=dashed label="exclusive-or-expression"]
  1818 -> 1917 [style=dashed label="expression"]
  1818 -> 422 [style=dashed label="floating-point-literal"]
  1818 -> 423 [style=dashed label="fold-expression"]
  1818 -> 424 [style=dashed label="fractional-constant"]
  1818 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1818 -> 426 [style=dashed label="hexadecimal-literal"]
  1818 -> 427 [style=dashed label="hexadecimal-prefix"]
  1818 -> 428 [style=dashed label="id-expression"]
  1818 -> 429 [style=dashed label="inclusive-or-expression"]
  1818 -> 430 [style=dashed label="integer-literal"]
  1818 -> 431 [style=dashed label="lambda-expression"]
  1818 -> 432 [style=dashed label="lambda-introducer"]
  1818 -> 433 [style=dashed label="literal"]
  1818 -> 96 [style=dashed label="literal-operator-id"]
  1818 -> 434 [style=dashed label="logical-and-expression"]
  1818 -> 533 [style=dashed label="logical-or-expression"]
  1818 -> 436 [style=dashed label="multiplicative-expression"]
  1818 -> 100 [style=dashed label="namespace-alias"]
  1818 -> 103 [style=dashed label="namespace-name"]
  1818 -> 437 [style=dashed label="nested-name-specifier"]
  1818 -> 438 [style=dashed label="new-expression"]
  1818 -> 439 [style=dashed label="noexcept-expression"]
  1818 -> 440 [style=dashed label="nonzero-digit"]
  1818 -> 441 [style=dashed label="octal-literal"]
  1818 -> 109 [style=dashed label="operator-function-id"]
  1818 -> 110 [style=dashed label="placeholder-type-specifier"]
  1818 -> 442 [style=dashed label="pm-expression"]
  1818 -> 443 [style=dashed label="pointer-literal"]
  1818 -> 444 [style=dashed label="postfix-expression"]
  1818 -> 445 [style=dashed label="primary-expression"]
  1818 -> 113 [style=dashed label="qualified-id"]
  1818 -> 446 [style=dashed label="relational-expression"]
  1818 -> 447 [style=dashed label="requires-expression"]
  1818 -> 448 [style=dashed label="shift-expression"]
  1818 -> 115 [style=dashed label="simple-template-id"]
  1818 -> 534 [style=dashed label="simple-type-specifier"]
  1818 -> 450 [style=dashed label="string-literal"]
  1818 -> 121 [style=dashed label="template-id"]
  1818 -> 216 [style=dashed label="template-name"]
  1818 -> 535 [style=dashed label="throw-expression"]
  1818 -> 124 [style=dashed label="type-constraint"]
  1818 -> 125 [style=dashed label="type-name"]
  1818 -> 127 [style=dashed label="typedef-name"]
  1818 -> 536 [style=dashed label="typename-specifier"]
  1818 -> 454 [style=dashed label="unary-expression"]
  1818 -> 455 [style=dashed label="unary-operator"]
  1818 -> 130 [style=dashed label="unqualified-id"]
  1818 -> 456 [style=dashed label="user-defined-character-literal"]
  1818 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1818 -> 458 [style=dashed label="user-defined-integer-literal"]
  1818 -> 459 [style=dashed label="user-defined-literal"]
  1818 -> 460 [style=dashed label="user-defined-string-literal"]
  1818 -> 537 [style=dashed label="yield-expression"]
  1819 [label="State 1819\n\l879 postfix-expression: \"reinterpret_cast\" '<' type-id '>' '(' • expression ')'\l"]
  1819 -> 1 [style=solid label="IDENTIFIER"]
  1819 -> 361 [style=solid label="'+'"]
  1819 -> 362 [style=solid label="'-'"]
  1819 -> 363 [style=solid label="'('"]
  1819 -> 364 [style=solid label="'&'"]
  1819 -> 365 [style=solid label="\"::\""]
  1819 -> 366 [style=solid label="'['"]
  1819 -> 367 [style=solid label="\"co_await\""]
  1819 -> 368 [style=solid label="'0'"]
  1819 -> 369 [style=solid label="'1'"]
  1819 -> 370 [style=solid label="\"0b\""]
  1819 -> 371 [style=solid label="\"0B\""]
  1819 -> 372 [style=solid label="'\\''"]
  1819 -> 373 [style=solid label="\"false\""]
  1819 -> 374 [style=solid label="\"true\""]
  1819 -> 375 [style=solid label="\"noexcept\""]
  1819 -> 17 [style=solid label="\"operator\""]
  1819 -> 26 [style=solid label="\"decltype\""]
  1819 -> 376 [style=solid label="\"delete\""]
  1819 -> 377 [style=solid label="'.'"]
  1819 -> 378 [style=solid label="'2'"]
  1819 -> 379 [style=solid label="'3'"]
  1819 -> 380 [style=solid label="'4'"]
  1819 -> 381 [style=solid label="'5'"]
  1819 -> 382 [style=solid label="'6'"]
  1819 -> 383 [style=solid label="'7'"]
  1819 -> 384 [style=solid label="'8'"]
  1819 -> 385 [style=solid label="'9'"]
  1819 -> 185 [style=solid label="\"u8\""]
  1819 -> 186 [style=solid label="'u'"]
  1819 -> 187 [style=solid label="'U'"]
  1819 -> 188 [style=solid label="'L'"]
  1819 -> 386 [style=solid label="'*'"]
  1819 -> 203 [style=solid label="'\"'"]
  1819 -> 387 [style=solid label="\"0x\""]
  1819 -> 388 [style=solid label="\"0X\""]
  1819 -> 389 [style=solid label="\"requires\""]
  1819 -> 390 [style=solid label="\"new\""]
  1819 -> 391 [style=solid label="'~'"]
  1819 -> 392 [style=solid label="'!'"]
  1819 -> 393 [style=solid label="\"++\""]
  1819 -> 394 [style=solid label="\"--\""]
  1819 -> 395 [style=solid label="\"this\""]
  1819 -> 37 [style=solid label="\"auto\""]
  1819 -> 396 [style=solid label="\"nullptr\""]
  1819 -> 397 [style=solid label="\"dynamic_cast\""]
  1819 -> 398 [style=solid label="\"static_cast\""]
  1819 -> 399 [style=solid label="\"reinterpret_cast\""]
  1819 -> 400 [style=solid label="\"const_cast\""]
  1819 -> 401 [style=solid label="\"typeid\""]
  1819 -> 38 [style=solid label="\"char\""]
  1819 -> 39 [style=solid label="\"char8_t\""]
  1819 -> 40 [style=solid label="\"char16_t\""]
  1819 -> 41 [style=solid label="\"char32_t\""]
  1819 -> 42 [style=solid label="\"wchar_t\""]
  1819 -> 43 [style=solid label="\"bool\""]
  1819 -> 44 [style=solid label="\"short\""]
  1819 -> 45 [style=solid label="\"int\""]
  1819 -> 46 [style=solid label="\"long\""]
  1819 -> 47 [style=solid label="\"signed\""]
  1819 -> 48 [style=solid label="\"unsigned\""]
  1819 -> 49 [style=solid label="\"float\""]
  1819 -> 50 [style=solid label="\"double\""]
  1819 -> 51 [style=solid label="\"void\""]
  1819 -> 209 [style=solid label="'R'"]
  1819 -> 528 [style=solid label="\"throw\""]
  1819 -> 56 [style=solid label="\"typename\""]
  1819 -> 402 [style=solid label="\"sizeof\""]
  1819 -> 403 [style=solid label="\"alignof\""]
  1819 -> 529 [style=solid label="\"co_yield\""]
  1819 -> 404 [style=dashed label="additive-expression"]
  1819 -> 405 [style=dashed label="and-expression"]
  1819 -> 530 [style=dashed label="assignment-expression"]
  1819 -> 406 [style=dashed label="await-expression"]
  1819 -> 407 [style=dashed label="binary-literal"]
  1819 -> 408 [style=dashed label="boolean-literal"]
  1819 -> 409 [style=dashed label="cast-expression"]
  1819 -> 410 [style=dashed label="character-literal"]
  1819 -> 66 [style=dashed label="class-name"]
  1819 -> 411 [style=dashed label="compare-expression"]
  1819 -> 68 [style=dashed label="concept-name"]
  1819 -> 531 [style=dashed label="conditional-expression"]
  1819 -> 69 [style=dashed label="conversion-function-id"]
  1819 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1819 -> 415 [style=dashed label="decimal-literal"]
  1819 -> 77 [style=dashed label="decltype-specifier"]
  1819 -> 416 [style=dashed label="delete-expression"]
  1819 -> 417 [style=dashed label="digit"]
  1819 -> 418 [style=dashed label="digit-sequence"]
  1819 -> 419 [style=dashed label="encoding-prefix"]
  1819 -> 85 [style=dashed label="enum-name"]
  1819 -> 420 [style=dashed label="equality-expression"]
  1819 -> 421 [style=dashed label="exclusive-or-expression"]
  1819 -> 1918 [style=dashed label="expression"]
  1819 -> 422 [style=dashed label="floating-point-literal"]
  1819 -> 423 [style=dashed label="fold-expression"]
  1819 -> 424 [style=dashed label="fractional-constant"]
  1819 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1819 -> 426 [style=dashed label="hexadecimal-literal"]
  1819 -> 427 [style=dashed label="hexadecimal-prefix"]
  1819 -> 428 [style=dashed label="id-expression"]
  1819 -> 429 [style=dashed label="inclusive-or-expression"]
  1819 -> 430 [style=dashed label="integer-literal"]
  1819 -> 431 [style=dashed label="lambda-expression"]
  1819 -> 432 [style=dashed label="lambda-introducer"]
  1819 -> 433 [style=dashed label="literal"]
  1819 -> 96 [style=dashed label="literal-operator-id"]
  1819 -> 434 [style=dashed label="logical-and-expression"]
  1819 -> 533 [style=dashed label="logical-or-expression"]
  1819 -> 436 [style=dashed label="multiplicative-expression"]
  1819 -> 100 [style=dashed label="namespace-alias"]
  1819 -> 103 [style=dashed label="namespace-name"]
  1819 -> 437 [style=dashed label="nested-name-specifier"]
  1819 -> 438 [style=dashed label="new-expression"]
  1819 -> 439 [style=dashed label="noexcept-expression"]
  1819 -> 440 [style=dashed label="nonzero-digit"]
  1819 -> 441 [style=dashed label="octal-literal"]
  1819 -> 109 [style=dashed label="operator-function-id"]
  1819 -> 110 [style=dashed label="placeholder-type-specifier"]
  1819 -> 442 [style=dashed label="pm-expression"]
  1819 -> 443 [style=dashed label="pointer-literal"]
  1819 -> 444 [style=dashed label="postfix-expression"]
  1819 -> 445 [style=dashed label="primary-expression"]
  1819 -> 113 [style=dashed label="qualified-id"]
  1819 -> 446 [style=dashed label="relational-expression"]
  1819 -> 447 [style=dashed label="requires-expression"]
  1819 -> 448 [style=dashed label="shift-expression"]
  1819 -> 115 [style=dashed label="simple-template-id"]
  1819 -> 534 [style=dashed label="simple-type-specifier"]
  1819 -> 450 [style=dashed label="string-literal"]
  1819 -> 121 [style=dashed label="template-id"]
  1819 -> 216 [style=dashed label="template-name"]
  1819 -> 535 [style=dashed label="throw-expression"]
  1819 -> 124 [style=dashed label="type-constraint"]
  1819 -> 125 [style=dashed label="type-name"]
  1819 -> 127 [style=dashed label="typedef-name"]
  1819 -> 536 [style=dashed label="typename-specifier"]
  1819 -> 454 [style=dashed label="unary-expression"]
  1819 -> 455 [style=dashed label="unary-operator"]
  1819 -> 130 [style=dashed label="unqualified-id"]
  1819 -> 456 [style=dashed label="user-defined-character-literal"]
  1819 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1819 -> 458 [style=dashed label="user-defined-integer-literal"]
  1819 -> 459 [style=dashed label="user-defined-literal"]
  1819 -> 460 [style=dashed label="user-defined-string-literal"]
  1819 -> 537 [style=dashed label="yield-expression"]
  1820 [label="State 1820\n\l880 postfix-expression: \"const_cast\" '<' type-id '>' '(' • expression ')'\l"]
  1820 -> 1 [style=solid label="IDENTIFIER"]
  1820 -> 361 [style=solid label="'+'"]
  1820 -> 362 [style=solid label="'-'"]
  1820 -> 363 [style=solid label="'('"]
  1820 -> 364 [style=solid label="'&'"]
  1820 -> 365 [style=solid label="\"::\""]
  1820 -> 366 [style=solid label="'['"]
  1820 -> 367 [style=solid label="\"co_await\""]
  1820 -> 368 [style=solid label="'0'"]
  1820 -> 369 [style=solid label="'1'"]
  1820 -> 370 [style=solid label="\"0b\""]
  1820 -> 371 [style=solid label="\"0B\""]
  1820 -> 372 [style=solid label="'\\''"]
  1820 -> 373 [style=solid label="\"false\""]
  1820 -> 374 [style=solid label="\"true\""]
  1820 -> 375 [style=solid label="\"noexcept\""]
  1820 -> 17 [style=solid label="\"operator\""]
  1820 -> 26 [style=solid label="\"decltype\""]
  1820 -> 376 [style=solid label="\"delete\""]
  1820 -> 377 [style=solid label="'.'"]
  1820 -> 378 [style=solid label="'2'"]
  1820 -> 379 [style=solid label="'3'"]
  1820 -> 380 [style=solid label="'4'"]
  1820 -> 381 [style=solid label="'5'"]
  1820 -> 382 [style=solid label="'6'"]
  1820 -> 383 [style=solid label="'7'"]
  1820 -> 384 [style=solid label="'8'"]
  1820 -> 385 [style=solid label="'9'"]
  1820 -> 185 [style=solid label="\"u8\""]
  1820 -> 186 [style=solid label="'u'"]
  1820 -> 187 [style=solid label="'U'"]
  1820 -> 188 [style=solid label="'L'"]
  1820 -> 386 [style=solid label="'*'"]
  1820 -> 203 [style=solid label="'\"'"]
  1820 -> 387 [style=solid label="\"0x\""]
  1820 -> 388 [style=solid label="\"0X\""]
  1820 -> 389 [style=solid label="\"requires\""]
  1820 -> 390 [style=solid label="\"new\""]
  1820 -> 391 [style=solid label="'~'"]
  1820 -> 392 [style=solid label="'!'"]
  1820 -> 393 [style=solid label="\"++\""]
  1820 -> 394 [style=solid label="\"--\""]
  1820 -> 395 [style=solid label="\"this\""]
  1820 -> 37 [style=solid label="\"auto\""]
  1820 -> 396 [style=solid label="\"nullptr\""]
  1820 -> 397 [style=solid label="\"dynamic_cast\""]
  1820 -> 398 [style=solid label="\"static_cast\""]
  1820 -> 399 [style=solid label="\"reinterpret_cast\""]
  1820 -> 400 [style=solid label="\"const_cast\""]
  1820 -> 401 [style=solid label="\"typeid\""]
  1820 -> 38 [style=solid label="\"char\""]
  1820 -> 39 [style=solid label="\"char8_t\""]
  1820 -> 40 [style=solid label="\"char16_t\""]
  1820 -> 41 [style=solid label="\"char32_t\""]
  1820 -> 42 [style=solid label="\"wchar_t\""]
  1820 -> 43 [style=solid label="\"bool\""]
  1820 -> 44 [style=solid label="\"short\""]
  1820 -> 45 [style=solid label="\"int\""]
  1820 -> 46 [style=solid label="\"long\""]
  1820 -> 47 [style=solid label="\"signed\""]
  1820 -> 48 [style=solid label="\"unsigned\""]
  1820 -> 49 [style=solid label="\"float\""]
  1820 -> 50 [style=solid label="\"double\""]
  1820 -> 51 [style=solid label="\"void\""]
  1820 -> 209 [style=solid label="'R'"]
  1820 -> 528 [style=solid label="\"throw\""]
  1820 -> 56 [style=solid label="\"typename\""]
  1820 -> 402 [style=solid label="\"sizeof\""]
  1820 -> 403 [style=solid label="\"alignof\""]
  1820 -> 529 [style=solid label="\"co_yield\""]
  1820 -> 404 [style=dashed label="additive-expression"]
  1820 -> 405 [style=dashed label="and-expression"]
  1820 -> 530 [style=dashed label="assignment-expression"]
  1820 -> 406 [style=dashed label="await-expression"]
  1820 -> 407 [style=dashed label="binary-literal"]
  1820 -> 408 [style=dashed label="boolean-literal"]
  1820 -> 409 [style=dashed label="cast-expression"]
  1820 -> 410 [style=dashed label="character-literal"]
  1820 -> 66 [style=dashed label="class-name"]
  1820 -> 411 [style=dashed label="compare-expression"]
  1820 -> 68 [style=dashed label="concept-name"]
  1820 -> 531 [style=dashed label="conditional-expression"]
  1820 -> 69 [style=dashed label="conversion-function-id"]
  1820 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1820 -> 415 [style=dashed label="decimal-literal"]
  1820 -> 77 [style=dashed label="decltype-specifier"]
  1820 -> 416 [style=dashed label="delete-expression"]
  1820 -> 417 [style=dashed label="digit"]
  1820 -> 418 [style=dashed label="digit-sequence"]
  1820 -> 419 [style=dashed label="encoding-prefix"]
  1820 -> 85 [style=dashed label="enum-name"]
  1820 -> 420 [style=dashed label="equality-expression"]
  1820 -> 421 [style=dashed label="exclusive-or-expression"]
  1820 -> 1919 [style=dashed label="expression"]
  1820 -> 422 [style=dashed label="floating-point-literal"]
  1820 -> 423 [style=dashed label="fold-expression"]
  1820 -> 424 [style=dashed label="fractional-constant"]
  1820 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1820 -> 426 [style=dashed label="hexadecimal-literal"]
  1820 -> 427 [style=dashed label="hexadecimal-prefix"]
  1820 -> 428 [style=dashed label="id-expression"]
  1820 -> 429 [style=dashed label="inclusive-or-expression"]
  1820 -> 430 [style=dashed label="integer-literal"]
  1820 -> 431 [style=dashed label="lambda-expression"]
  1820 -> 432 [style=dashed label="lambda-introducer"]
  1820 -> 433 [style=dashed label="literal"]
  1820 -> 96 [style=dashed label="literal-operator-id"]
  1820 -> 434 [style=dashed label="logical-and-expression"]
  1820 -> 533 [style=dashed label="logical-or-expression"]
  1820 -> 436 [style=dashed label="multiplicative-expression"]
  1820 -> 100 [style=dashed label="namespace-alias"]
  1820 -> 103 [style=dashed label="namespace-name"]
  1820 -> 437 [style=dashed label="nested-name-specifier"]
  1820 -> 438 [style=dashed label="new-expression"]
  1820 -> 439 [style=dashed label="noexcept-expression"]
  1820 -> 440 [style=dashed label="nonzero-digit"]
  1820 -> 441 [style=dashed label="octal-literal"]
  1820 -> 109 [style=dashed label="operator-function-id"]
  1820 -> 110 [style=dashed label="placeholder-type-specifier"]
  1820 -> 442 [style=dashed label="pm-expression"]
  1820 -> 443 [style=dashed label="pointer-literal"]
  1820 -> 444 [style=dashed label="postfix-expression"]
  1820 -> 445 [style=dashed label="primary-expression"]
  1820 -> 113 [style=dashed label="qualified-id"]
  1820 -> 446 [style=dashed label="relational-expression"]
  1820 -> 447 [style=dashed label="requires-expression"]
  1820 -> 448 [style=dashed label="shift-expression"]
  1820 -> 115 [style=dashed label="simple-template-id"]
  1820 -> 534 [style=dashed label="simple-type-specifier"]
  1820 -> 450 [style=dashed label="string-literal"]
  1820 -> 121 [style=dashed label="template-id"]
  1820 -> 216 [style=dashed label="template-name"]
  1820 -> 535 [style=dashed label="throw-expression"]
  1820 -> 124 [style=dashed label="type-constraint"]
  1820 -> 125 [style=dashed label="type-name"]
  1820 -> 127 [style=dashed label="typedef-name"]
  1820 -> 536 [style=dashed label="typename-specifier"]
  1820 -> 454 [style=dashed label="unary-expression"]
  1820 -> 455 [style=dashed label="unary-operator"]
  1820 -> 130 [style=dashed label="unqualified-id"]
  1820 -> 456 [style=dashed label="user-defined-character-literal"]
  1820 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1820 -> 458 [style=dashed label="user-defined-integer-literal"]
  1820 -> 459 [style=dashed label="user-defined-literal"]
  1820 -> 460 [style=dashed label="user-defined-string-literal"]
  1820 -> 537 [style=dashed label="yield-expression"]
  1821 [label="State 1821\n\l1137 unary-expression: \"sizeof\" \"...\" '(' IDENTIFIER ')' •\l"]
  1821 -> "1821R1137" [style=solid]
 "1821R1137" [label="R1137", fillcolor=3, shape=diamond, style=filled]
  1822 [label="State 1822\n\l 88 binary-exponent-part: 'p' sign digit-sequence •\l263 digit-sequence: digit-sequence • digit\l264               | digit-sequence • '\\'' digit\l"]
  1822 -> 793 [style=solid label="'0'"]
  1822 -> 794 [style=solid label="'1'"]
  1822 -> 851 [style=solid label="'\\''"]
  1822 -> 795 [style=solid label="'2'"]
  1822 -> 796 [style=solid label="'3'"]
  1822 -> 797 [style=solid label="'4'"]
  1822 -> 798 [style=solid label="'5'"]
  1822 -> 799 [style=solid label="'6'"]
  1822 -> 800 [style=solid label="'7'"]
  1822 -> 801 [style=solid label="'8'"]
  1822 -> 802 [style=solid label="'9'"]
  1822 -> 855 [style=dashed label="digit"]
  1822 -> "1822R88" [style=solid]
 "1822R88" [label="R88", fillcolor=3, shape=diamond, style=filled]
  1823 [label="State 1823\n\l 90 binary-exponent-part: 'P' sign digit-sequence •\l263 digit-sequence: digit-sequence • digit\l264               | digit-sequence • '\\'' digit\l"]
  1823 -> 793 [style=solid label="'0'"]
  1823 -> 794 [style=solid label="'1'"]
  1823 -> 851 [style=solid label="'\\''"]
  1823 -> 795 [style=solid label="'2'"]
  1823 -> 796 [style=solid label="'3'"]
  1823 -> 797 [style=solid label="'4'"]
  1823 -> 798 [style=solid label="'5'"]
  1823 -> 799 [style=solid label="'6'"]
  1823 -> 800 [style=solid label="'7'"]
  1823 -> 801 [style=solid label="'8'"]
  1823 -> 802 [style=solid label="'9'"]
  1823 -> 855 [style=dashed label="digit"]
  1823 -> "1823R90" [style=solid]
 "1823R90" [label="R90", fillcolor=3, shape=diamond, style=filled]
  1824 [label="State 1824\n\l533 lambda-declarator: '(' parameter-declaration-clause ')' lambda-specifiers •\l534                  | '(' parameter-declaration-clause ')' lambda-specifiers • requires-clause\l"]
  1824 -> 297 [style=solid label="\"requires\""]
  1824 -> 1920 [style=dashed label="requires-clause"]
  1824 -> "1824R533" [style=solid]
 "1824R533" [label="R533", fillcolor=3, shape=diamond, style=filled]
  1825 [label="State 1825\n\l697 noexcept-specifier: \"noexcept\" '(' constant-expression ')' •\l"]
  1825 -> "1825R697" [style=solid]
 "1825R697" [label="R697", fillcolor=3, shape=diamond, style=filled]
  1826 [label="State 1826\n\l536 lambda-expression: lambda-introducer '<' template-parameter-list '>' lambda-declarator • compound-statement\l"]
  1826 -> 294 [style=solid label="'{'"]
  1826 -> 1921 [style=dashed label="compound-statement"]
  1827 [label="State 1827\n\l537 lambda-expression: lambda-introducer '<' template-parameter-list '>' requires-clause • lambda-declarator compound-statement\l"]
  1827 -> 161 [style=solid label="IDENTIFIER"]
  1827 -> 4 [style=solid label="\"alignas\""]
  1827 -> 897 [style=solid label="'('"]
  1827 -> 9 [style=solid label="\"::\""]
  1827 -> 10 [style=solid label="'['"]
  1827 -> 11 [style=solid label="\"virtual\""]
  1827 -> 12 [style=solid label="\"class\""]
  1827 -> 13 [style=solid label="\"struct\""]
  1827 -> 14 [style=solid label="\"union\""]
  1827 -> 898 [style=solid label="\"noexcept\""]
  1827 -> 18 [style=solid label="\"const\""]
  1827 -> 19 [style=solid label="\"volatile\""]
  1827 -> 20 [style=solid label="\"friend\""]
  1827 -> 21 [style=solid label="\"typedef\""]
  1827 -> 22 [style=solid label="\"constexpr\""]
  1827 -> 23 [style=solid label="\"consteval\""]
  1827 -> 24 [style=solid label="\"constinit\""]
  1827 -> 263 [style=solid label="\"inline\""]
  1827 -> 26 [style=solid label="\"decltype\""]
  1827 -> 740 [style=solid label="\"->\""]
  1827 -> 27 [style=solid label="\"enum\""]
  1827 -> 264 [style=solid label="\"extern\""]
  1827 -> 29 [style=solid label="\"explicit\""]
  1827 -> 37 [style=solid label="\"auto\""]
  1827 -> 38 [style=solid label="\"char\""]
  1827 -> 39 [style=solid label="\"char8_t\""]
  1827 -> 40 [style=solid label="\"char16_t\""]
  1827 -> 41 [style=solid label="\"char32_t\""]
  1827 -> 42 [style=solid label="\"wchar_t\""]
  1827 -> 43 [style=solid label="\"bool\""]
  1827 -> 44 [style=solid label="\"short\""]
  1827 -> 45 [style=solid label="\"int\""]
  1827 -> 46 [style=solid label="\"long\""]
  1827 -> 47 [style=solid label="\"signed\""]
  1827 -> 48 [style=solid label="\"unsigned\""]
  1827 -> 49 [style=solid label="\"float\""]
  1827 -> 50 [style=solid label="\"double\""]
  1827 -> 51 [style=solid label="\"void\""]
  1827 -> 53 [style=solid label="\"static\""]
  1827 -> 54 [style=solid label="\"thread_local\""]
  1827 -> 55 [style=solid label="\"mutable\""]
  1827 -> 56 [style=solid label="\"typename\""]
  1827 -> 58 [style=dashed label="alignment-specifier"]
  1827 -> 61 [style=dashed label="attribute-specifier"]
  1827 -> 900 [style=dashed label="attribute-specifier-seq"]
  1827 -> 64 [style=dashed label="class-head"]
  1827 -> 65 [style=dashed label="class-key"]
  1827 -> 66 [style=dashed label="class-name"]
  1827 -> 67 [style=dashed label="class-specifier"]
  1827 -> 68 [style=dashed label="concept-name"]
  1827 -> 70 [style=dashed label="cv-qualifier"]
  1827 -> 71 [style=dashed label="decl-specifier"]
  1827 -> 901 [style=dashed label="decl-specifier-seq"]
  1827 -> 77 [style=dashed label="decltype-specifier"]
  1827 -> 79 [style=dashed label="defining-type-specifier"]
  1827 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1827 -> 81 [style=dashed label="elaborated-type-specifier"]
  1827 -> 83 [style=dashed label="enum-head"]
  1827 -> 268 [style=dashed label="enum-key"]
  1827 -> 85 [style=dashed label="enum-name"]
  1827 -> 86 [style=dashed label="enum-specifier"]
  1827 -> 269 [style=dashed label="explicit-specifier"]
  1827 -> 92 [style=dashed label="function-specifier"]
  1827 -> 1922 [style=dashed label="lambda-declarator"]
  1827 -> 903 [style=dashed label="lambda-specifiers"]
  1827 -> 100 [style=dashed label="namespace-alias"]
  1827 -> 103 [style=dashed label="namespace-name"]
  1827 -> 213 [style=dashed label="nested-name-specifier"]
  1827 -> 904 [style=dashed label="noexcept-specifier"]
  1827 -> 110 [style=dashed label="placeholder-type-specifier"]
  1827 -> 142 [style=dashed label="simple-template-id"]
  1827 -> 116 [style=dashed label="simple-type-specifier"]
  1827 -> 118 [style=dashed label="storage-class-specifier"]
  1827 -> 216 [style=dashed label="template-name"]
  1827 -> 905 [style=dashed label="trailing-return-type"]
  1827 -> 124 [style=dashed label="type-constraint"]
  1827 -> 125 [style=dashed label="type-name"]
  1827 -> 126 [style=dashed label="type-specifier"]
  1827 -> 127 [style=dashed label="typedef-name"]
  1827 -> 128 [style=dashed label="typename-specifier"]
  1828 [label="State 1828\n\l553 lambda-specifiers: decl-specifier-seq noexcept-specifier attribute-specifier-seq trailing-return-type •\l"]
  1828 -> "1828R553" [style=solid]
 "1828R553" [label="R553", fillcolor=3, shape=diamond, style=filled]
  1829 [label="State 1829\n\l170 conditional-expression: logical-or-expression '?' expression ':' assignment-expression •\l"]
  1829 -> "1829R170" [style=solid]
 "1829R170" [label="R170", fillcolor=3, shape=diamond, style=filled]
  1830 [label="State 1830\n\l 48 attribute-namespace: IDENTIFIER •\l 55 attribute-token: IDENTIFIER •\l470 init-capture: IDENTIFIER • initializer\l971 simple-capture: IDENTIFIER •\l972               | IDENTIFIER • \"...\"\l"]
  1830 -> 1280 [style=solid label="'='"]
  1830 -> 647 [style=solid label="'('"]
  1830 -> 1281 [style=solid label="\"...\""]
  1830 -> 939 [style=solid label="'{'"]
  1830 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1830 -> 650 [style=dashed label="braced-init-list"]
  1830 -> 1282 [style=dashed label="initializer"]
  1830 -> "1830R48" [label="[\"::\"]", style=solid]
 "1830R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  1830 -> "1830R55d" [label="['(', \"...\"]", style=solid]
 "1830R55d" [label="R55", fillcolor=5, shape=diamond, style=filled]
  1830 -> "1830R55" [style=solid]
 "1830R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  1830 -> "1830R971d" [label="[',', ']']", style=solid]
 "1830R971d" [label="R971", fillcolor=5, shape=diamond, style=filled]
  1831 [label="State 1831\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l717 noptr-abstract-declarator: '[' constant-expression ']' attribute-specifier-seq •\l"]
  1831 -> 4 [style=solid label="\"alignas\""]
  1831 -> 10 [style=solid label="'['"]
  1831 -> 58 [style=dashed label="alignment-specifier"]
  1831 -> 265 [style=dashed label="attribute-specifier"]
  1831 -> "1831R717d" [label="['[']", style=solid]
 "1831R717d" [label="R717", fillcolor=5, shape=diamond, style=filled]
  1831 -> "1831R717" [style=solid]
 "1831R717" [label="R717", fillcolor=3, shape=diamond, style=filled]
  1832 [label="State 1832\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l714 noptr-abstract-declarator: noptr-abstract-declarator '[' ']' attribute-specifier-seq •\l"]
  1832 -> 4 [style=solid label="\"alignas\""]
  1832 -> 10 [style=solid label="'['"]
  1832 -> 58 [style=dashed label="alignment-specifier"]
  1832 -> 265 [style=dashed label="attribute-specifier"]
  1832 -> "1832R714d" [label="['[']", style=solid]
 "1832R714d" [label="R714", fillcolor=5, shape=diamond, style=filled]
  1832 -> "1832R714" [style=solid]
 "1832R714" [label="R714", fillcolor=3, shape=diamond, style=filled]
  1833 [label="State 1833\n\l712 noptr-abstract-declarator: noptr-abstract-declarator '[' constant-expression ']' •\l716                          | noptr-abstract-declarator '[' constant-expression ']' • attribute-specifier-seq\l"]
  1833 -> 4 [style=solid label="\"alignas\""]
  1833 -> 10 [style=solid label="'['"]
  1833 -> 58 [style=dashed label="alignment-specifier"]
  1833 -> 61 [style=dashed label="attribute-specifier"]
  1833 -> 1923 [style=dashed label="attribute-specifier-seq"]
  1833 -> "1833R712d" [label="['[']", style=solid]
 "1833R712d" [label="R712", fillcolor=5, shape=diamond, style=filled]
  1833 -> "1833R712" [style=solid]
 "1833R712" [label="R712", fillcolor=3, shape=diamond, style=filled]
  1834 [label="State 1834\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l722 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator '[' ']' attribute-specifier-seq •\l"]
  1834 -> 4 [style=solid label="\"alignas\""]
  1834 -> 10 [style=solid label="'['"]
  1834 -> 58 [style=dashed label="alignment-specifier"]
  1834 -> 265 [style=dashed label="attribute-specifier"]
  1834 -> "1834R722d" [label="['[']", style=solid]
 "1834R722d" [label="R722", fillcolor=5, shape=diamond, style=filled]
  1834 -> "1834R722" [style=solid]
 "1834R722" [label="R722", fillcolor=3, shape=diamond, style=filled]
  1835 [label="State 1835\n\l721 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator '[' constant-expression ']' •\l723                               | noptr-abstract-pack-declarator '[' constant-expression ']' • attribute-specifier-seq\l"]
  1835 -> 4 [style=solid label="\"alignas\""]
  1835 -> 10 [style=solid label="'['"]
  1835 -> 58 [style=dashed label="alignment-specifier"]
  1835 -> 61 [style=dashed label="attribute-specifier"]
  1835 -> 1924 [style=dashed label="attribute-specifier-seq"]
  1835 -> "1835R721d" [label="['[']", style=solid]
 "1835R721d" [label="R721", fillcolor=5, shape=diamond, style=filled]
  1835 -> "1835R721" [style=solid]
 "1835R721" [label="R721", fillcolor=3, shape=diamond, style=filled]
  1836 [label="State 1836\n\l 60 balanced-token: '(' balanced-token-seq ')' •\l"]
  1836 -> "1836R60" [style=solid]
 "1836R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  1837 [label="State 1837\n\l 62 balanced-token: '[' balanced-token-seq ']' •\l"]
  1837 -> "1837R62" [style=solid]
 "1837R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  1838 [label="State 1838\n\l 64 balanced-token: '{' balanced-token-seq '}' •\l"]
  1838 -> "1838R64" [style=solid]
 "1838R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  1839 [label="State 1839\n\l829 parameter-declaration: \"this\" decl-specifier-seq abstract-declarator '=' initializer-clause •\l"]
  1839 -> "1839R829" [style=solid]
 "1839R829" [label="R829", fillcolor=3, shape=diamond, style=filled]
  1840 [label="State 1840\n\l813 parameter-declaration: \"this\" decl-specifier-seq declarator '=' initializer-clause •\l"]
  1840 -> "1840R813" [style=solid]
 "1840R813" [label="R813", fillcolor=3, shape=diamond, style=filled]
  1841 [label="State 1841\n\l824 parameter-declaration: attribute-specifier-seq \"this\" decl-specifier-seq '=' initializer-clause •\l"]
  1841 -> "1841R824" [style=solid]
 "1841R824" [label="R824", fillcolor=3, shape=diamond, style=filled]
  1842 [label="State 1842\n\l828 parameter-declaration: attribute-specifier-seq \"this\" decl-specifier-seq abstract-declarator '=' • initializer-clause\l"]
  1842 -> 1 [style=solid label="IDENTIFIER"]
  1842 -> 361 [style=solid label="'+'"]
  1842 -> 362 [style=solid label="'-'"]
  1842 -> 363 [style=solid label="'('"]
  1842 -> 364 [style=solid label="'&'"]
  1842 -> 365 [style=solid label="\"::\""]
  1842 -> 366 [style=solid label="'['"]
  1842 -> 367 [style=solid label="\"co_await\""]
  1842 -> 939 [style=solid label="'{'"]
  1842 -> 368 [style=solid label="'0'"]
  1842 -> 369 [style=solid label="'1'"]
  1842 -> 370 [style=solid label="\"0b\""]
  1842 -> 371 [style=solid label="\"0B\""]
  1842 -> 372 [style=solid label="'\\''"]
  1842 -> 373 [style=solid label="\"false\""]
  1842 -> 374 [style=solid label="\"true\""]
  1842 -> 375 [style=solid label="\"noexcept\""]
  1842 -> 17 [style=solid label="\"operator\""]
  1842 -> 26 [style=solid label="\"decltype\""]
  1842 -> 376 [style=solid label="\"delete\""]
  1842 -> 377 [style=solid label="'.'"]
  1842 -> 378 [style=solid label="'2'"]
  1842 -> 379 [style=solid label="'3'"]
  1842 -> 380 [style=solid label="'4'"]
  1842 -> 381 [style=solid label="'5'"]
  1842 -> 382 [style=solid label="'6'"]
  1842 -> 383 [style=solid label="'7'"]
  1842 -> 384 [style=solid label="'8'"]
  1842 -> 385 [style=solid label="'9'"]
  1842 -> 185 [style=solid label="\"u8\""]
  1842 -> 186 [style=solid label="'u'"]
  1842 -> 187 [style=solid label="'U'"]
  1842 -> 188 [style=solid label="'L'"]
  1842 -> 386 [style=solid label="'*'"]
  1842 -> 203 [style=solid label="'\"'"]
  1842 -> 387 [style=solid label="\"0x\""]
  1842 -> 388 [style=solid label="\"0X\""]
  1842 -> 389 [style=solid label="\"requires\""]
  1842 -> 390 [style=solid label="\"new\""]
  1842 -> 391 [style=solid label="'~'"]
  1842 -> 392 [style=solid label="'!'"]
  1842 -> 393 [style=solid label="\"++\""]
  1842 -> 394 [style=solid label="\"--\""]
  1842 -> 395 [style=solid label="\"this\""]
  1842 -> 37 [style=solid label="\"auto\""]
  1842 -> 396 [style=solid label="\"nullptr\""]
  1842 -> 397 [style=solid label="\"dynamic_cast\""]
  1842 -> 398 [style=solid label="\"static_cast\""]
  1842 -> 399 [style=solid label="\"reinterpret_cast\""]
  1842 -> 400 [style=solid label="\"const_cast\""]
  1842 -> 401 [style=solid label="\"typeid\""]
  1842 -> 38 [style=solid label="\"char\""]
  1842 -> 39 [style=solid label="\"char8_t\""]
  1842 -> 40 [style=solid label="\"char16_t\""]
  1842 -> 41 [style=solid label="\"char32_t\""]
  1842 -> 42 [style=solid label="\"wchar_t\""]
  1842 -> 43 [style=solid label="\"bool\""]
  1842 -> 44 [style=solid label="\"short\""]
  1842 -> 45 [style=solid label="\"int\""]
  1842 -> 46 [style=solid label="\"long\""]
  1842 -> 47 [style=solid label="\"signed\""]
  1842 -> 48 [style=solid label="\"unsigned\""]
  1842 -> 49 [style=solid label="\"float\""]
  1842 -> 50 [style=solid label="\"double\""]
  1842 -> 51 [style=solid label="\"void\""]
  1842 -> 209 [style=solid label="'R'"]
  1842 -> 528 [style=solid label="\"throw\""]
  1842 -> 56 [style=solid label="\"typename\""]
  1842 -> 402 [style=solid label="\"sizeof\""]
  1842 -> 403 [style=solid label="\"alignof\""]
  1842 -> 529 [style=solid label="\"co_yield\""]
  1842 -> 404 [style=dashed label="additive-expression"]
  1842 -> 405 [style=dashed label="and-expression"]
  1842 -> 1141 [style=dashed label="assignment-expression"]
  1842 -> 406 [style=dashed label="await-expression"]
  1842 -> 407 [style=dashed label="binary-literal"]
  1842 -> 408 [style=dashed label="boolean-literal"]
  1842 -> 1142 [style=dashed label="braced-init-list"]
  1842 -> 409 [style=dashed label="cast-expression"]
  1842 -> 410 [style=dashed label="character-literal"]
  1842 -> 66 [style=dashed label="class-name"]
  1842 -> 411 [style=dashed label="compare-expression"]
  1842 -> 68 [style=dashed label="concept-name"]
  1842 -> 531 [style=dashed label="conditional-expression"]
  1842 -> 69 [style=dashed label="conversion-function-id"]
  1842 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1842 -> 415 [style=dashed label="decimal-literal"]
  1842 -> 77 [style=dashed label="decltype-specifier"]
  1842 -> 416 [style=dashed label="delete-expression"]
  1842 -> 417 [style=dashed label="digit"]
  1842 -> 418 [style=dashed label="digit-sequence"]
  1842 -> 419 [style=dashed label="encoding-prefix"]
  1842 -> 85 [style=dashed label="enum-name"]
  1842 -> 420 [style=dashed label="equality-expression"]
  1842 -> 421 [style=dashed label="exclusive-or-expression"]
  1842 -> 422 [style=dashed label="floating-point-literal"]
  1842 -> 423 [style=dashed label="fold-expression"]
  1842 -> 424 [style=dashed label="fractional-constant"]
  1842 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1842 -> 426 [style=dashed label="hexadecimal-literal"]
  1842 -> 427 [style=dashed label="hexadecimal-prefix"]
  1842 -> 428 [style=dashed label="id-expression"]
  1842 -> 429 [style=dashed label="inclusive-or-expression"]
  1842 -> 1925 [style=dashed label="initializer-clause"]
  1842 -> 430 [style=dashed label="integer-literal"]
  1842 -> 431 [style=dashed label="lambda-expression"]
  1842 -> 432 [style=dashed label="lambda-introducer"]
  1842 -> 433 [style=dashed label="literal"]
  1842 -> 96 [style=dashed label="literal-operator-id"]
  1842 -> 434 [style=dashed label="logical-and-expression"]
  1842 -> 533 [style=dashed label="logical-or-expression"]
  1842 -> 436 [style=dashed label="multiplicative-expression"]
  1842 -> 100 [style=dashed label="namespace-alias"]
  1842 -> 103 [style=dashed label="namespace-name"]
  1842 -> 437 [style=dashed label="nested-name-specifier"]
  1842 -> 438 [style=dashed label="new-expression"]
  1842 -> 439 [style=dashed label="noexcept-expression"]
  1842 -> 440 [style=dashed label="nonzero-digit"]
  1842 -> 441 [style=dashed label="octal-literal"]
  1842 -> 109 [style=dashed label="operator-function-id"]
  1842 -> 110 [style=dashed label="placeholder-type-specifier"]
  1842 -> 442 [style=dashed label="pm-expression"]
  1842 -> 443 [style=dashed label="pointer-literal"]
  1842 -> 444 [style=dashed label="postfix-expression"]
  1842 -> 445 [style=dashed label="primary-expression"]
  1842 -> 113 [style=dashed label="qualified-id"]
  1842 -> 446 [style=dashed label="relational-expression"]
  1842 -> 447 [style=dashed label="requires-expression"]
  1842 -> 448 [style=dashed label="shift-expression"]
  1842 -> 115 [style=dashed label="simple-template-id"]
  1842 -> 534 [style=dashed label="simple-type-specifier"]
  1842 -> 450 [style=dashed label="string-literal"]
  1842 -> 121 [style=dashed label="template-id"]
  1842 -> 216 [style=dashed label="template-name"]
  1842 -> 535 [style=dashed label="throw-expression"]
  1842 -> 124 [style=dashed label="type-constraint"]
  1842 -> 125 [style=dashed label="type-name"]
  1842 -> 127 [style=dashed label="typedef-name"]
  1842 -> 536 [style=dashed label="typename-specifier"]
  1842 -> 454 [style=dashed label="unary-expression"]
  1842 -> 455 [style=dashed label="unary-operator"]
  1842 -> 130 [style=dashed label="unqualified-id"]
  1842 -> 456 [style=dashed label="user-defined-character-literal"]
  1842 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1842 -> 458 [style=dashed label="user-defined-integer-literal"]
  1842 -> 459 [style=dashed label="user-defined-literal"]
  1842 -> 460 [style=dashed label="user-defined-string-literal"]
  1842 -> 537 [style=dashed label="yield-expression"]
  1843 [label="State 1843\n\l812 parameter-declaration: attribute-specifier-seq \"this\" decl-specifier-seq declarator '=' • initializer-clause\l"]
  1843 -> 1 [style=solid label="IDENTIFIER"]
  1843 -> 361 [style=solid label="'+'"]
  1843 -> 362 [style=solid label="'-'"]
  1843 -> 363 [style=solid label="'('"]
  1843 -> 364 [style=solid label="'&'"]
  1843 -> 365 [style=solid label="\"::\""]
  1843 -> 366 [style=solid label="'['"]
  1843 -> 367 [style=solid label="\"co_await\""]
  1843 -> 939 [style=solid label="'{'"]
  1843 -> 368 [style=solid label="'0'"]
  1843 -> 369 [style=solid label="'1'"]
  1843 -> 370 [style=solid label="\"0b\""]
  1843 -> 371 [style=solid label="\"0B\""]
  1843 -> 372 [style=solid label="'\\''"]
  1843 -> 373 [style=solid label="\"false\""]
  1843 -> 374 [style=solid label="\"true\""]
  1843 -> 375 [style=solid label="\"noexcept\""]
  1843 -> 17 [style=solid label="\"operator\""]
  1843 -> 26 [style=solid label="\"decltype\""]
  1843 -> 376 [style=solid label="\"delete\""]
  1843 -> 377 [style=solid label="'.'"]
  1843 -> 378 [style=solid label="'2'"]
  1843 -> 379 [style=solid label="'3'"]
  1843 -> 380 [style=solid label="'4'"]
  1843 -> 381 [style=solid label="'5'"]
  1843 -> 382 [style=solid label="'6'"]
  1843 -> 383 [style=solid label="'7'"]
  1843 -> 384 [style=solid label="'8'"]
  1843 -> 385 [style=solid label="'9'"]
  1843 -> 185 [style=solid label="\"u8\""]
  1843 -> 186 [style=solid label="'u'"]
  1843 -> 187 [style=solid label="'U'"]
  1843 -> 188 [style=solid label="'L'"]
  1843 -> 386 [style=solid label="'*'"]
  1843 -> 203 [style=solid label="'\"'"]
  1843 -> 387 [style=solid label="\"0x\""]
  1843 -> 388 [style=solid label="\"0X\""]
  1843 -> 389 [style=solid label="\"requires\""]
  1843 -> 390 [style=solid label="\"new\""]
  1843 -> 391 [style=solid label="'~'"]
  1843 -> 392 [style=solid label="'!'"]
  1843 -> 393 [style=solid label="\"++\""]
  1843 -> 394 [style=solid label="\"--\""]
  1843 -> 395 [style=solid label="\"this\""]
  1843 -> 37 [style=solid label="\"auto\""]
  1843 -> 396 [style=solid label="\"nullptr\""]
  1843 -> 397 [style=solid label="\"dynamic_cast\""]
  1843 -> 398 [style=solid label="\"static_cast\""]
  1843 -> 399 [style=solid label="\"reinterpret_cast\""]
  1843 -> 400 [style=solid label="\"const_cast\""]
  1843 -> 401 [style=solid label="\"typeid\""]
  1843 -> 38 [style=solid label="\"char\""]
  1843 -> 39 [style=solid label="\"char8_t\""]
  1843 -> 40 [style=solid label="\"char16_t\""]
  1843 -> 41 [style=solid label="\"char32_t\""]
  1843 -> 42 [style=solid label="\"wchar_t\""]
  1843 -> 43 [style=solid label="\"bool\""]
  1843 -> 44 [style=solid label="\"short\""]
  1843 -> 45 [style=solid label="\"int\""]
  1843 -> 46 [style=solid label="\"long\""]
  1843 -> 47 [style=solid label="\"signed\""]
  1843 -> 48 [style=solid label="\"unsigned\""]
  1843 -> 49 [style=solid label="\"float\""]
  1843 -> 50 [style=solid label="\"double\""]
  1843 -> 51 [style=solid label="\"void\""]
  1843 -> 209 [style=solid label="'R'"]
  1843 -> 528 [style=solid label="\"throw\""]
  1843 -> 56 [style=solid label="\"typename\""]
  1843 -> 402 [style=solid label="\"sizeof\""]
  1843 -> 403 [style=solid label="\"alignof\""]
  1843 -> 529 [style=solid label="\"co_yield\""]
  1843 -> 404 [style=dashed label="additive-expression"]
  1843 -> 405 [style=dashed label="and-expression"]
  1843 -> 1141 [style=dashed label="assignment-expression"]
  1843 -> 406 [style=dashed label="await-expression"]
  1843 -> 407 [style=dashed label="binary-literal"]
  1843 -> 408 [style=dashed label="boolean-literal"]
  1843 -> 1142 [style=dashed label="braced-init-list"]
  1843 -> 409 [style=dashed label="cast-expression"]
  1843 -> 410 [style=dashed label="character-literal"]
  1843 -> 66 [style=dashed label="class-name"]
  1843 -> 411 [style=dashed label="compare-expression"]
  1843 -> 68 [style=dashed label="concept-name"]
  1843 -> 531 [style=dashed label="conditional-expression"]
  1843 -> 69 [style=dashed label="conversion-function-id"]
  1843 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1843 -> 415 [style=dashed label="decimal-literal"]
  1843 -> 77 [style=dashed label="decltype-specifier"]
  1843 -> 416 [style=dashed label="delete-expression"]
  1843 -> 417 [style=dashed label="digit"]
  1843 -> 418 [style=dashed label="digit-sequence"]
  1843 -> 419 [style=dashed label="encoding-prefix"]
  1843 -> 85 [style=dashed label="enum-name"]
  1843 -> 420 [style=dashed label="equality-expression"]
  1843 -> 421 [style=dashed label="exclusive-or-expression"]
  1843 -> 422 [style=dashed label="floating-point-literal"]
  1843 -> 423 [style=dashed label="fold-expression"]
  1843 -> 424 [style=dashed label="fractional-constant"]
  1843 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1843 -> 426 [style=dashed label="hexadecimal-literal"]
  1843 -> 427 [style=dashed label="hexadecimal-prefix"]
  1843 -> 428 [style=dashed label="id-expression"]
  1843 -> 429 [style=dashed label="inclusive-or-expression"]
  1843 -> 1926 [style=dashed label="initializer-clause"]
  1843 -> 430 [style=dashed label="integer-literal"]
  1843 -> 431 [style=dashed label="lambda-expression"]
  1843 -> 432 [style=dashed label="lambda-introducer"]
  1843 -> 433 [style=dashed label="literal"]
  1843 -> 96 [style=dashed label="literal-operator-id"]
  1843 -> 434 [style=dashed label="logical-and-expression"]
  1843 -> 533 [style=dashed label="logical-or-expression"]
  1843 -> 436 [style=dashed label="multiplicative-expression"]
  1843 -> 100 [style=dashed label="namespace-alias"]
  1843 -> 103 [style=dashed label="namespace-name"]
  1843 -> 437 [style=dashed label="nested-name-specifier"]
  1843 -> 438 [style=dashed label="new-expression"]
  1843 -> 439 [style=dashed label="noexcept-expression"]
  1843 -> 440 [style=dashed label="nonzero-digit"]
  1843 -> 441 [style=dashed label="octal-literal"]
  1843 -> 109 [style=dashed label="operator-function-id"]
  1843 -> 110 [style=dashed label="placeholder-type-specifier"]
  1843 -> 442 [style=dashed label="pm-expression"]
  1843 -> 443 [style=dashed label="pointer-literal"]
  1843 -> 444 [style=dashed label="postfix-expression"]
  1843 -> 445 [style=dashed label="primary-expression"]
  1843 -> 113 [style=dashed label="qualified-id"]
  1843 -> 446 [style=dashed label="relational-expression"]
  1843 -> 447 [style=dashed label="requires-expression"]
  1843 -> 448 [style=dashed label="shift-expression"]
  1843 -> 115 [style=dashed label="simple-template-id"]
  1843 -> 534 [style=dashed label="simple-type-specifier"]
  1843 -> 450 [style=dashed label="string-literal"]
  1843 -> 121 [style=dashed label="template-id"]
  1843 -> 216 [style=dashed label="template-name"]
  1843 -> 535 [style=dashed label="throw-expression"]
  1843 -> 124 [style=dashed label="type-constraint"]
  1843 -> 125 [style=dashed label="type-name"]
  1843 -> 127 [style=dashed label="typedef-name"]
  1843 -> 536 [style=dashed label="typename-specifier"]
  1843 -> 454 [style=dashed label="unary-expression"]
  1843 -> 455 [style=dashed label="unary-operator"]
  1843 -> 130 [style=dashed label="unqualified-id"]
  1843 -> 456 [style=dashed label="user-defined-character-literal"]
  1843 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1843 -> 458 [style=dashed label="user-defined-integer-literal"]
  1843 -> 459 [style=dashed label="user-defined-literal"]
  1843 -> 460 [style=dashed label="user-defined-string-literal"]
  1843 -> 537 [style=dashed label="yield-expression"]
  1844 [label="State 1844\n\l826 parameter-declaration: attribute-specifier-seq decl-specifier-seq abstract-declarator '=' initializer-clause •\l"]
  1844 -> "1844R826" [style=solid]
 "1844R826" [label="R826", fillcolor=3, shape=diamond, style=filled]
  1845 [label="State 1845\n\l810 parameter-declaration: attribute-specifier-seq decl-specifier-seq declarator '=' initializer-clause •\l"]
  1845 -> "1845R810" [style=solid]
 "1845R810" [label="R810", fillcolor=3, shape=diamond, style=filled]
  1846 [label="State 1846\n\l1112 type-parameter: template-head type-parameter-key IDENTIFIER '=' id-expression •\l"]
  1846 -> "1846R1112" [style=solid]
 "1846R1112" [label="R1112", fillcolor=3, shape=diamond, style=filled]
  1847 [label="State 1847\n\l425 hex-quad: hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit •\l"]
  1847 -> "1847R425" [style=solid]
 "1847R425" [label="R425", fillcolor=3, shape=diamond, style=filled]
  1848 [label="State 1848\n\l924 raw-string: '\"' '(' ')' d-char-sequence '\"' •\l"]
  1848 -> "1848R924" [style=solid]
 "1848R924" [label="R924", fillcolor=3, shape=diamond, style=filled]
  1849 [label="State 1849\n\l922 raw-string: '\"' '(' r-char-sequence ')' '\"' •\l"]
  1849 -> "1849R922" [style=solid]
 "1849R922" [label="R922", fillcolor=3, shape=diamond, style=filled]
  1850 [label="State 1850\n\l191 d-char-sequence: d-char-sequence • d-char\l926 raw-string: '\"' '(' r-char-sequence ')' d-char-sequence • '\"'\l"]
  1850 -> 1013 [style=solid label="EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE"]
  1850 -> 1927 [style=solid label="'\"'"]
  1850 -> 1462 [style=dashed label="d-char"]
  1851 [label="State 1851\n\l921 raw-string: '\"' d-char-sequence '(' ')' '\"' •\l"]
  1851 -> "1851R921" [style=solid]
 "1851R921" [label="R921", fillcolor=3, shape=diamond, style=filled]
  1852 [label="State 1852\n\l191 d-char-sequence: d-char-sequence • d-char\l925 raw-string: '\"' d-char-sequence '(' ')' d-char-sequence • '\"'\l"]
  1852 -> 1013 [style=solid label="EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE"]
  1852 -> 1928 [style=solid label="'\"'"]
  1852 -> 1462 [style=dashed label="d-char"]
  1853 [label="State 1853\n\l923 raw-string: '\"' d-char-sequence '(' r-char-sequence ')' • '\"'\l927           | '\"' d-char-sequence '(' r-char-sequence ')' • d-char-sequence '\"'\l"]
  1853 -> 1013 [style=solid label="EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE"]
  1853 -> 1929 [style=solid label="'\"'"]
  1853 -> 1015 [style=dashed label="d-char"]
  1853 -> 1930 [style=dashed label="d-char-sequence"]
  1854 [label="State 1854\n\l649 named-namespace-definition: \"inline\" \"namespace\" attribute-specifier-seq IDENTIFIER '{' namespace-body '}' •\l"]
  1854 -> "1854R649" [style=solid]
 "1854R649" [label="R649", fillcolor=3, shape=diamond, style=filled]
  1855 [label="State 1855\n\l666 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" IDENTIFIER '{' namespace-body '}' •\l"]
  1855 -> "1855R666" [style=solid]
 "1855R666" [label="R666", fillcolor=3, shape=diamond, style=filled]
  1856 [label="State 1856\n\l667 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" \"inline\" IDENTIFIER '{' namespace-body • '}'\l"]
  1856 -> 1931 [style=solid label="'}'"]
  1857 [label="State 1857\n\l1039 static_assert-declaration: \"static_assert\" '(' constant-expression ',' string-literal ')' ';' •\l"]
  1857 -> "1857R1039" [style=solid]
 "1857R1039" [label="R1039", fillcolor=3, shape=diamond, style=filled]
  1858 [label="State 1858\n\l980 simple-declaration: attribute-specifier-seq decl-specifier-seq '[' identifier-list ']' initializer ';' •\l"]
  1858 -> "1858R980" [style=solid]
 "1858R980" [label="R980", fillcolor=3, shape=diamond, style=filled]
  1859 [label="State 1859\n\l982 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' identifier-list ']' initializer • ';'\l"]
  1859 -> 1932 [style=solid label="';'"]
  1860 [label="State 1860\n\l615 member-declarator: IDENTIFIER attribute-specifier-seq ':' constant-expression brace-or-equal-initializer •\l"]
  1860 -> "1860R615" [style=solid]
 "1860R615" [label="R615", fillcolor=3, shape=diamond, style=filled]
  1861 [label="State 1861\n\l616 member-declarator: attribute-specifier-seq ':' constant-expression brace-or-equal-initializer •\l"]
  1861 -> "1861R616" [style=solid]
 "1861R616" [label="R616", fillcolor=3, shape=diamond, style=filled]
  1862 [label="State 1862\n\l909 pure-specifier: '=' • '0'\l"]
  1862 -> 1734 [style=solid label="'0'"]
  1863 [label="State 1863\n\l488 initializer-list: initializer-list ',' initializer-clause \"...\" •\l"]
  1863 -> "1863R488" [style=solid]
 "1863R488" [label="R488", fillcolor=3, shape=diamond, style=filled]
  1864 [label="State 1864\n\l983 simple-declaration: decl-specifier-seq ref-qualifier '[' identifier-list ']' initializer ';' •\l"]
  1864 -> "1864R983" [style=solid]
 "1864R983" [label="R983", fillcolor=3, shape=diamond, style=filled]
  1865 [label="State 1865\n\l165 condition: attribute-specifier-seq decl-specifier-seq declarator • brace-or-equal-initializer\l"]
  1865 -> 1280 [style=solid label="'='"]
  1865 -> 939 [style=solid label="'{'"]
  1865 -> 1933 [style=dashed label="brace-or-equal-initializer"]
  1865 -> 650 [style=dashed label="braced-init-list"]
  1866 [label="State 1866\n\l509 iteration-statement: \"while\" '(' condition ')' statement •\l"]
  1866 -> "1866R509" [style=solid]
 "1866R509" [label="R509", fillcolor=3, shape=diamond, style=filled]
  1867 [label="State 1867\n\l166 condition: decl-specifier-seq declarator brace-or-equal-initializer •\l"]
  1867 -> "1867R166" [style=solid]
 "1867R166" [label="R166", fillcolor=3, shape=diamond, style=filled]
  1868 [label="State 1868\n\l338 expression: expression • ',' assignment-expression\l510 iteration-statement: \"do\" statement \"while\" '(' expression • ')' ';'\l"]
  1868 -> 1934 [style=solid label="')'"]
  1868 -> 1037 [style=solid label="','"]
  1869 [label="State 1869\n\l385 for-range-declaration: attribute-specifier-seq decl-specifier-seq '[' • identifier-list ']'\l980 simple-declaration: attribute-specifier-seq decl-specifier-seq '[' • identifier-list ']' initializer ';'\l"]
  1869 -> 644 [style=solid label="IDENTIFIER"]
  1869 -> 1935 [style=dashed label="identifier-list"]
  1870 [label="State 1870\n\l383 for-range-declaration: attribute-specifier-seq decl-specifier-seq declarator •\l473 init-declarator: declarator •\l474                | declarator • initializer\l475                | declarator • requires-clause\l"]
  1870 -> 1280 [style=solid label="'='"]
  1870 -> 647 [style=solid label="'('"]
  1870 -> 939 [style=solid label="'{'"]
  1870 -> 297 [style=solid label="\"requires\""]
  1870 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1870 -> 650 [style=dashed label="braced-init-list"]
  1870 -> 652 [style=dashed label="initializer"]
  1870 -> 1535 [style=dashed label="requires-clause"]
  1870 -> "1870R383" [label="[':']", style=solid]
 "1870R383" [label="R383", fillcolor=3, shape=diamond, style=filled]
  1870 -> "1870R473" [style=solid]
 "1870R473" [label="R473", fillcolor=3, shape=diamond, style=filled]
  1871 [label="State 1871\n\l387 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier • '[' identifier-list ']'\l982 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier • '[' identifier-list ']' initializer ';'\l"]
  1871 -> 1936 [style=solid label="'['"]
  1872 [label="State 1872\n\l386 for-range-declaration: decl-specifier-seq '[' identifier-list • ']'\l466 identifier-list: identifier-list • ',' IDENTIFIER\l981 simple-declaration: decl-specifier-seq '[' identifier-list • ']' initializer ';'\l"]
  1872 -> 1138 [style=solid label="','"]
  1872 -> 1937 [style=solid label="']'"]
  1873 [label="State 1873\n\l388 for-range-declaration: decl-specifier-seq ref-qualifier '[' • identifier-list ']'\l983 simple-declaration: decl-specifier-seq ref-qualifier '[' • identifier-list ']' initializer ';'\l"]
  1873 -> 644 [style=solid label="IDENTIFIER"]
  1873 -> 1938 [style=dashed label="identifier-list"]
  1874 [label="State 1874\n\l389 for-range-initializer: expr-or-braced-init-list •\l"]
  1874 -> "1874R389" [style=solid]
 "1874R389" [label="R389", fillcolor=3, shape=diamond, style=filled]
  1875 [label="State 1875\n\l515 iteration-statement: \"for\" '(' for-range-declaration ':' for-range-initializer • ')' statement\l"]
  1875 -> 1939 [style=solid label="')'"]
  1876 [label="State 1876\n\l511 iteration-statement: \"for\" '(' init-statement ';' ')' • statement\l"]
  1876 -> 665 [style=solid label="IDENTIFIER"]
  1876 -> 361 [style=solid label="'+'"]
  1876 -> 362 [style=solid label="'-'"]
  1876 -> 2 [style=solid label="\"using\""]
  1876 -> 666 [style=solid label="';'"]
  1876 -> 4 [style=solid label="\"alignas\""]
  1876 -> 363 [style=solid label="'('"]
  1876 -> 364 [style=solid label="'&'"]
  1876 -> 8 [style=solid label="\"asm\""]
  1876 -> 365 [style=solid label="\"::\""]
  1876 -> 667 [style=solid label="'['"]
  1876 -> 367 [style=solid label="\"co_await\""]
  1876 -> 294 [style=solid label="'{'"]
  1876 -> 11 [style=solid label="\"virtual\""]
  1876 -> 368 [style=solid label="'0'"]
  1876 -> 369 [style=solid label="'1'"]
  1876 -> 370 [style=solid label="\"0b\""]
  1876 -> 371 [style=solid label="\"0B\""]
  1876 -> 372 [style=solid label="'\\''"]
  1876 -> 373 [style=solid label="\"false\""]
  1876 -> 374 [style=solid label="\"true\""]
  1876 -> 12 [style=solid label="\"class\""]
  1876 -> 13 [style=solid label="\"struct\""]
  1876 -> 14 [style=solid label="\"union\""]
  1876 -> 375 [style=solid label="\"noexcept\""]
  1876 -> 17 [style=solid label="\"operator\""]
  1876 -> 669 [style=solid label="\"co_return\""]
  1876 -> 18 [style=solid label="\"const\""]
  1876 -> 19 [style=solid label="\"volatile\""]
  1876 -> 20 [style=solid label="\"friend\""]
  1876 -> 21 [style=solid label="\"typedef\""]
  1876 -> 22 [style=solid label="\"constexpr\""]
  1876 -> 23 [style=solid label="\"consteval\""]
  1876 -> 24 [style=solid label="\"constinit\""]
  1876 -> 263 [style=solid label="\"inline\""]
  1876 -> 26 [style=solid label="\"decltype\""]
  1876 -> 376 [style=solid label="\"delete\""]
  1876 -> 377 [style=solid label="'.'"]
  1876 -> 378 [style=solid label="'2'"]
  1876 -> 379 [style=solid label="'3'"]
  1876 -> 380 [style=solid label="'4'"]
  1876 -> 381 [style=solid label="'5'"]
  1876 -> 382 [style=solid label="'6'"]
  1876 -> 383 [style=solid label="'7'"]
  1876 -> 384 [style=solid label="'8'"]
  1876 -> 385 [style=solid label="'9'"]
  1876 -> 27 [style=solid label="\"enum\""]
  1876 -> 185 [style=solid label="\"u8\""]
  1876 -> 186 [style=solid label="'u'"]
  1876 -> 187 [style=solid label="'U'"]
  1876 -> 188 [style=solid label="'L'"]
  1876 -> 264 [style=solid label="\"extern\""]
  1876 -> 29 [style=solid label="\"explicit\""]
  1876 -> 386 [style=solid label="'*'"]
  1876 -> 670 [style=solid label="\"default\""]
  1876 -> 671 [style=solid label="\"try\""]
  1876 -> 203 [style=solid label="'\"'"]
  1876 -> 387 [style=solid label="\"0x\""]
  1876 -> 388 [style=solid label="\"0X\""]
  1876 -> 672 [style=solid label="\"while\""]
  1876 -> 673 [style=solid label="\"do\""]
  1876 -> 674 [style=solid label="\"for\""]
  1876 -> 675 [style=solid label="\"break\""]
  1876 -> 676 [style=solid label="\"continue\""]
  1876 -> 677 [style=solid label="\"return\""]
  1876 -> 678 [style=solid label="\"goto\""]
  1876 -> 679 [style=solid label="\"case\""]
  1876 -> 680 [style=solid label="\"namespace\""]
  1876 -> 389 [style=solid label="\"requires\""]
  1876 -> 390 [style=solid label="\"new\""]
  1876 -> 391 [style=solid label="'~'"]
  1876 -> 392 [style=solid label="'!'"]
  1876 -> 393 [style=solid label="\"++\""]
  1876 -> 394 [style=solid label="\"--\""]
  1876 -> 395 [style=solid label="\"this\""]
  1876 -> 37 [style=solid label="\"auto\""]
  1876 -> 396 [style=solid label="\"nullptr\""]
  1876 -> 397 [style=solid label="\"dynamic_cast\""]
  1876 -> 398 [style=solid label="\"static_cast\""]
  1876 -> 399 [style=solid label="\"reinterpret_cast\""]
  1876 -> 400 [style=solid label="\"const_cast\""]
  1876 -> 401 [style=solid label="\"typeid\""]
  1876 -> 681 [style=solid label="\"if\""]
  1876 -> 682 [style=solid label="\"switch\""]
  1876 -> 38 [style=solid label="\"char\""]
  1876 -> 39 [style=solid label="\"char8_t\""]
  1876 -> 40 [style=solid label="\"char16_t\""]
  1876 -> 41 [style=solid label="\"char32_t\""]
  1876 -> 42 [style=solid label="\"wchar_t\""]
  1876 -> 43 [style=solid label="\"bool\""]
  1876 -> 44 [style=solid label="\"short\""]
  1876 -> 45 [style=solid label="\"int\""]
  1876 -> 46 [style=solid label="\"long\""]
  1876 -> 47 [style=solid label="\"signed\""]
  1876 -> 48 [style=solid label="\"unsigned\""]
  1876 -> 49 [style=solid label="\"float\""]
  1876 -> 50 [style=solid label="\"double\""]
  1876 -> 51 [style=solid label="\"void\""]
  1876 -> 52 [style=solid label="\"static_assert\""]
  1876 -> 53 [style=solid label="\"static\""]
  1876 -> 54 [style=solid label="\"thread_local\""]
  1876 -> 55 [style=solid label="\"mutable\""]
  1876 -> 209 [style=solid label="'R'"]
  1876 -> 528 [style=solid label="\"throw\""]
  1876 -> 56 [style=solid label="\"typename\""]
  1876 -> 402 [style=solid label="\"sizeof\""]
  1876 -> 403 [style=solid label="\"alignof\""]
  1876 -> 529 [style=solid label="\"co_yield\""]
  1876 -> 404 [style=dashed label="additive-expression"]
  1876 -> 57 [style=dashed label="alias-declaration"]
  1876 -> 58 [style=dashed label="alignment-specifier"]
  1876 -> 405 [style=dashed label="and-expression"]
  1876 -> 59 [style=dashed label="asm-declaration"]
  1876 -> 530 [style=dashed label="assignment-expression"]
  1876 -> 61 [style=dashed label="attribute-specifier"]
  1876 -> 683 [style=dashed label="attribute-specifier-seq"]
  1876 -> 406 [style=dashed label="await-expression"]
  1876 -> 407 [style=dashed label="binary-literal"]
  1876 -> 684 [style=dashed label="block-declaration"]
  1876 -> 408 [style=dashed label="boolean-literal"]
  1876 -> 409 [style=dashed label="cast-expression"]
  1876 -> 410 [style=dashed label="character-literal"]
  1876 -> 64 [style=dashed label="class-head"]
  1876 -> 65 [style=dashed label="class-key"]
  1876 -> 66 [style=dashed label="class-name"]
  1876 -> 67 [style=dashed label="class-specifier"]
  1876 -> 411 [style=dashed label="compare-expression"]
  1876 -> 685 [style=dashed label="compound-statement"]
  1876 -> 68 [style=dashed label="concept-name"]
  1876 -> 531 [style=dashed label="conditional-expression"]
  1876 -> 69 [style=dashed label="conversion-function-id"]
  1876 -> 686 [style=dashed label="coroutine-return-statement"]
  1876 -> 70 [style=dashed label="cv-qualifier"]
  1876 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1876 -> 415 [style=dashed label="decimal-literal"]
  1876 -> 71 [style=dashed label="decl-specifier"]
  1876 -> 687 [style=dashed label="decl-specifier-seq"]
  1876 -> 688 [style=dashed label="declaration-statement"]
  1876 -> 77 [style=dashed label="decltype-specifier"]
  1876 -> 79 [style=dashed label="defining-type-specifier"]
  1876 -> 416 [style=dashed label="delete-expression"]
  1876 -> 417 [style=dashed label="digit"]
  1876 -> 418 [style=dashed label="digit-sequence"]
  1876 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1876 -> 81 [style=dashed label="elaborated-type-specifier"]
  1876 -> 419 [style=dashed label="encoding-prefix"]
  1876 -> 83 [style=dashed label="enum-head"]
  1876 -> 84 [style=dashed label="enum-key"]
  1876 -> 85 [style=dashed label="enum-name"]
  1876 -> 86 [style=dashed label="enum-specifier"]
  1876 -> 420 [style=dashed label="equality-expression"]
  1876 -> 421 [style=dashed label="exclusive-or-expression"]
  1876 -> 269 [style=dashed label="explicit-specifier"]
  1876 -> 689 [style=dashed label="expression"]
  1876 -> 690 [style=dashed label="expression-statement"]
  1876 -> 422 [style=dashed label="floating-point-literal"]
  1876 -> 423 [style=dashed label="fold-expression"]
  1876 -> 424 [style=dashed label="fractional-constant"]
  1876 -> 92 [style=dashed label="function-specifier"]
  1876 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1876 -> 426 [style=dashed label="hexadecimal-literal"]
  1876 -> 427 [style=dashed label="hexadecimal-prefix"]
  1876 -> 428 [style=dashed label="id-expression"]
  1876 -> 429 [style=dashed label="inclusive-or-expression"]
  1876 -> 430 [style=dashed label="integer-literal"]
  1876 -> 691 [style=dashed label="iteration-statement"]
  1876 -> 692 [style=dashed label="jump-statement"]
  1876 -> 693 [style=dashed label="labeled-statement"]
  1876 -> 431 [style=dashed label="lambda-expression"]
  1876 -> 432 [style=dashed label="lambda-introducer"]
  1876 -> 433 [style=dashed label="literal"]
  1876 -> 96 [style=dashed label="literal-operator-id"]
  1876 -> 434 [style=dashed label="logical-and-expression"]
  1876 -> 533 [style=dashed label="logical-or-expression"]
  1876 -> 436 [style=dashed label="multiplicative-expression"]
  1876 -> 100 [style=dashed label="namespace-alias"]
  1876 -> 101 [style=dashed label="namespace-alias-definition"]
  1876 -> 103 [style=dashed label="namespace-name"]
  1876 -> 437 [style=dashed label="nested-name-specifier"]
  1876 -> 438 [style=dashed label="new-expression"]
  1876 -> 439 [style=dashed label="noexcept-expression"]
  1876 -> 440 [style=dashed label="nonzero-digit"]
  1876 -> 441 [style=dashed label="octal-literal"]
  1876 -> 108 [style=dashed label="opaque-enum-declaration"]
  1876 -> 109 [style=dashed label="operator-function-id"]
  1876 -> 110 [style=dashed label="placeholder-type-specifier"]
  1876 -> 442 [style=dashed label="pm-expression"]
  1876 -> 443 [style=dashed label="pointer-literal"]
  1876 -> 444 [style=dashed label="postfix-expression"]
  1876 -> 445 [style=dashed label="primary-expression"]
  1876 -> 113 [style=dashed label="qualified-id"]
  1876 -> 446 [style=dashed label="relational-expression"]
  1876 -> 447 [style=dashed label="requires-expression"]
  1876 -> 694 [style=dashed label="selection-statement"]
  1876 -> 448 [style=dashed label="shift-expression"]
  1876 -> 114 [style=dashed label="simple-declaration"]
  1876 -> 115 [style=dashed label="simple-template-id"]
  1876 -> 449 [style=dashed label="simple-type-specifier"]
  1876 -> 1940 [style=dashed label="statement"]
  1876 -> 117 [style=dashed label="static_assert-declaration"]
  1876 -> 118 [style=dashed label="storage-class-specifier"]
  1876 -> 450 [style=dashed label="string-literal"]
  1876 -> 121 [style=dashed label="template-id"]
  1876 -> 216 [style=dashed label="template-name"]
  1876 -> 535 [style=dashed label="throw-expression"]
  1876 -> 697 [style=dashed label="try-block"]
  1876 -> 124 [style=dashed label="type-constraint"]
  1876 -> 125 [style=dashed label="type-name"]
  1876 -> 126 [style=dashed label="type-specifier"]
  1876 -> 127 [style=dashed label="typedef-name"]
  1876 -> 453 [style=dashed label="typename-specifier"]
  1876 -> 454 [style=dashed label="unary-expression"]
  1876 -> 455 [style=dashed label="unary-operator"]
  1876 -> 130 [style=dashed label="unqualified-id"]
  1876 -> 456 [style=dashed label="user-defined-character-literal"]
  1876 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1876 -> 458 [style=dashed label="user-defined-integer-literal"]
  1876 -> 459 [style=dashed label="user-defined-literal"]
  1876 -> 460 [style=dashed label="user-defined-string-literal"]
  1876 -> 131 [style=dashed label="using-declaration"]
  1876 -> 132 [style=dashed label="using-directive"]
  1876 -> 133 [style=dashed label="using-enum-declaration"]
  1876 -> 537 [style=dashed label="yield-expression"]
  1877 [label="State 1877\n\l338 expression: expression • ',' assignment-expression\l513 iteration-statement: \"for\" '(' init-statement ';' expression • ')' statement\l"]
  1877 -> 1941 [style=solid label="')'"]
  1877 -> 1037 [style=solid label="','"]
  1878 [label="State 1878\n\l165 condition: attribute-specifier-seq decl-specifier-seq • declarator brace-or-equal-initializer\l383 for-range-declaration: attribute-specifier-seq decl-specifier-seq • declarator\l385                      | attribute-specifier-seq decl-specifier-seq • '[' identifier-list ']'\l387                      | attribute-specifier-seq decl-specifier-seq • ref-qualifier '[' identifier-list ']'\l"]
  1878 -> 148 [style=solid label="IDENTIFIER"]
  1878 -> 5 [style=solid label="'('"]
  1878 -> 6 [style=solid label="\"...\""]
  1878 -> 283 [style=solid label="'&'"]
  1878 -> 9 [style=solid label="\"::\""]
  1878 -> 1942 [style=solid label="'['"]
  1878 -> 285 [style=solid label="\"&&\""]
  1878 -> 17 [style=solid label="\"operator\""]
  1878 -> 135 [style=solid label="\"decltype\""]
  1878 -> 32 [style=solid label="'*'"]
  1878 -> 36 [style=solid label="'~'"]
  1878 -> 66 [style=dashed label="class-name"]
  1878 -> 69 [style=dashed label="conversion-function-id"]
  1878 -> 1943 [style=dashed label="declarator"]
  1878 -> 76 [style=dashed label="declarator-id"]
  1878 -> 139 [style=dashed label="decltype-specifier"]
  1878 -> 85 [style=dashed label="enum-name"]
  1878 -> 94 [style=dashed label="id-expression"]
  1878 -> 96 [style=dashed label="literal-operator-id"]
  1878 -> 100 [style=dashed label="namespace-alias"]
  1878 -> 103 [style=dashed label="namespace-name"]
  1878 -> 149 [style=dashed label="nested-name-specifier"]
  1878 -> 107 [style=dashed label="noptr-declarator"]
  1878 -> 109 [style=dashed label="operator-function-id"]
  1878 -> 111 [style=dashed label="ptr-declarator"]
  1878 -> 112 [style=dashed label="ptr-operator"]
  1878 -> 113 [style=dashed label="qualified-id"]
  1878 -> 1944 [style=dashed label="ref-qualifier"]
  1878 -> 115 [style=dashed label="simple-template-id"]
  1878 -> 121 [style=dashed label="template-id"]
  1878 -> 143 [style=dashed label="template-name"]
  1878 -> 144 [style=dashed label="type-name"]
  1878 -> 127 [style=dashed label="typedef-name"]
  1878 -> 130 [style=dashed label="unqualified-id"]
  1879 [label="State 1879\n\l512 iteration-statement: \"for\" '(' init-statement condition ';' • ')' statement\l514                    | \"for\" '(' init-statement condition ';' • expression ')' statement\l"]
  1879 -> 1 [style=solid label="IDENTIFIER"]
  1879 -> 361 [style=solid label="'+'"]
  1879 -> 362 [style=solid label="'-'"]
  1879 -> 363 [style=solid label="'('"]
  1879 -> 1945 [style=solid label="')'"]
  1879 -> 364 [style=solid label="'&'"]
  1879 -> 365 [style=solid label="\"::\""]
  1879 -> 366 [style=solid label="'['"]
  1879 -> 367 [style=solid label="\"co_await\""]
  1879 -> 368 [style=solid label="'0'"]
  1879 -> 369 [style=solid label="'1'"]
  1879 -> 370 [style=solid label="\"0b\""]
  1879 -> 371 [style=solid label="\"0B\""]
  1879 -> 372 [style=solid label="'\\''"]
  1879 -> 373 [style=solid label="\"false\""]
  1879 -> 374 [style=solid label="\"true\""]
  1879 -> 375 [style=solid label="\"noexcept\""]
  1879 -> 17 [style=solid label="\"operator\""]
  1879 -> 26 [style=solid label="\"decltype\""]
  1879 -> 376 [style=solid label="\"delete\""]
  1879 -> 377 [style=solid label="'.'"]
  1879 -> 378 [style=solid label="'2'"]
  1879 -> 379 [style=solid label="'3'"]
  1879 -> 380 [style=solid label="'4'"]
  1879 -> 381 [style=solid label="'5'"]
  1879 -> 382 [style=solid label="'6'"]
  1879 -> 383 [style=solid label="'7'"]
  1879 -> 384 [style=solid label="'8'"]
  1879 -> 385 [style=solid label="'9'"]
  1879 -> 185 [style=solid label="\"u8\""]
  1879 -> 186 [style=solid label="'u'"]
  1879 -> 187 [style=solid label="'U'"]
  1879 -> 188 [style=solid label="'L'"]
  1879 -> 386 [style=solid label="'*'"]
  1879 -> 203 [style=solid label="'\"'"]
  1879 -> 387 [style=solid label="\"0x\""]
  1879 -> 388 [style=solid label="\"0X\""]
  1879 -> 389 [style=solid label="\"requires\""]
  1879 -> 390 [style=solid label="\"new\""]
  1879 -> 391 [style=solid label="'~'"]
  1879 -> 392 [style=solid label="'!'"]
  1879 -> 393 [style=solid label="\"++\""]
  1879 -> 394 [style=solid label="\"--\""]
  1879 -> 395 [style=solid label="\"this\""]
  1879 -> 37 [style=solid label="\"auto\""]
  1879 -> 396 [style=solid label="\"nullptr\""]
  1879 -> 397 [style=solid label="\"dynamic_cast\""]
  1879 -> 398 [style=solid label="\"static_cast\""]
  1879 -> 399 [style=solid label="\"reinterpret_cast\""]
  1879 -> 400 [style=solid label="\"const_cast\""]
  1879 -> 401 [style=solid label="\"typeid\""]
  1879 -> 38 [style=solid label="\"char\""]
  1879 -> 39 [style=solid label="\"char8_t\""]
  1879 -> 40 [style=solid label="\"char16_t\""]
  1879 -> 41 [style=solid label="\"char32_t\""]
  1879 -> 42 [style=solid label="\"wchar_t\""]
  1879 -> 43 [style=solid label="\"bool\""]
  1879 -> 44 [style=solid label="\"short\""]
  1879 -> 45 [style=solid label="\"int\""]
  1879 -> 46 [style=solid label="\"long\""]
  1879 -> 47 [style=solid label="\"signed\""]
  1879 -> 48 [style=solid label="\"unsigned\""]
  1879 -> 49 [style=solid label="\"float\""]
  1879 -> 50 [style=solid label="\"double\""]
  1879 -> 51 [style=solid label="\"void\""]
  1879 -> 209 [style=solid label="'R'"]
  1879 -> 528 [style=solid label="\"throw\""]
  1879 -> 56 [style=solid label="\"typename\""]
  1879 -> 402 [style=solid label="\"sizeof\""]
  1879 -> 403 [style=solid label="\"alignof\""]
  1879 -> 529 [style=solid label="\"co_yield\""]
  1879 -> 404 [style=dashed label="additive-expression"]
  1879 -> 405 [style=dashed label="and-expression"]
  1879 -> 530 [style=dashed label="assignment-expression"]
  1879 -> 406 [style=dashed label="await-expression"]
  1879 -> 407 [style=dashed label="binary-literal"]
  1879 -> 408 [style=dashed label="boolean-literal"]
  1879 -> 409 [style=dashed label="cast-expression"]
  1879 -> 410 [style=dashed label="character-literal"]
  1879 -> 66 [style=dashed label="class-name"]
  1879 -> 411 [style=dashed label="compare-expression"]
  1879 -> 68 [style=dashed label="concept-name"]
  1879 -> 531 [style=dashed label="conditional-expression"]
  1879 -> 69 [style=dashed label="conversion-function-id"]
  1879 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1879 -> 415 [style=dashed label="decimal-literal"]
  1879 -> 77 [style=dashed label="decltype-specifier"]
  1879 -> 416 [style=dashed label="delete-expression"]
  1879 -> 417 [style=dashed label="digit"]
  1879 -> 418 [style=dashed label="digit-sequence"]
  1879 -> 419 [style=dashed label="encoding-prefix"]
  1879 -> 85 [style=dashed label="enum-name"]
  1879 -> 420 [style=dashed label="equality-expression"]
  1879 -> 421 [style=dashed label="exclusive-or-expression"]
  1879 -> 1946 [style=dashed label="expression"]
  1879 -> 422 [style=dashed label="floating-point-literal"]
  1879 -> 423 [style=dashed label="fold-expression"]
  1879 -> 424 [style=dashed label="fractional-constant"]
  1879 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1879 -> 426 [style=dashed label="hexadecimal-literal"]
  1879 -> 427 [style=dashed label="hexadecimal-prefix"]
  1879 -> 428 [style=dashed label="id-expression"]
  1879 -> 429 [style=dashed label="inclusive-or-expression"]
  1879 -> 430 [style=dashed label="integer-literal"]
  1879 -> 431 [style=dashed label="lambda-expression"]
  1879 -> 432 [style=dashed label="lambda-introducer"]
  1879 -> 433 [style=dashed label="literal"]
  1879 -> 96 [style=dashed label="literal-operator-id"]
  1879 -> 434 [style=dashed label="logical-and-expression"]
  1879 -> 533 [style=dashed label="logical-or-expression"]
  1879 -> 436 [style=dashed label="multiplicative-expression"]
  1879 -> 100 [style=dashed label="namespace-alias"]
  1879 -> 103 [style=dashed label="namespace-name"]
  1879 -> 437 [style=dashed label="nested-name-specifier"]
  1879 -> 438 [style=dashed label="new-expression"]
  1879 -> 439 [style=dashed label="noexcept-expression"]
  1879 -> 440 [style=dashed label="nonzero-digit"]
  1879 -> 441 [style=dashed label="octal-literal"]
  1879 -> 109 [style=dashed label="operator-function-id"]
  1879 -> 110 [style=dashed label="placeholder-type-specifier"]
  1879 -> 442 [style=dashed label="pm-expression"]
  1879 -> 443 [style=dashed label="pointer-literal"]
  1879 -> 444 [style=dashed label="postfix-expression"]
  1879 -> 445 [style=dashed label="primary-expression"]
  1879 -> 113 [style=dashed label="qualified-id"]
  1879 -> 446 [style=dashed label="relational-expression"]
  1879 -> 447 [style=dashed label="requires-expression"]
  1879 -> 448 [style=dashed label="shift-expression"]
  1879 -> 115 [style=dashed label="simple-template-id"]
  1879 -> 534 [style=dashed label="simple-type-specifier"]
  1879 -> 450 [style=dashed label="string-literal"]
  1879 -> 121 [style=dashed label="template-id"]
  1879 -> 216 [style=dashed label="template-name"]
  1879 -> 535 [style=dashed label="throw-expression"]
  1879 -> 124 [style=dashed label="type-constraint"]
  1879 -> 125 [style=dashed label="type-name"]
  1879 -> 127 [style=dashed label="typedef-name"]
  1879 -> 536 [style=dashed label="typename-specifier"]
  1879 -> 454 [style=dashed label="unary-expression"]
  1879 -> 455 [style=dashed label="unary-operator"]
  1879 -> 130 [style=dashed label="unqualified-id"]
  1879 -> 456 [style=dashed label="user-defined-character-literal"]
  1879 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1879 -> 458 [style=dashed label="user-defined-integer-literal"]
  1879 -> 459 [style=dashed label="user-defined-literal"]
  1879 -> 460 [style=dashed label="user-defined-string-literal"]
  1879 -> 537 [style=dashed label="yield-expression"]
  1880 [label="State 1880\n\l386 for-range-declaration: decl-specifier-seq '[' • identifier-list ']'\l"]
  1880 -> 644 [style=solid label="IDENTIFIER"]
  1880 -> 1947 [style=dashed label="identifier-list"]
  1881 [label="State 1881\n\l166 condition: decl-specifier-seq declarator • brace-or-equal-initializer\l384 for-range-declaration: decl-specifier-seq declarator •\l"]
  1881 -> 1280 [style=solid label="'='"]
  1881 -> 939 [style=solid label="'{'"]
  1881 -> 1867 [style=dashed label="brace-or-equal-initializer"]
  1881 -> 650 [style=dashed label="braced-init-list"]
  1881 -> "1881R384" [style=solid]
 "1881R384" [label="R384", fillcolor=3, shape=diamond, style=filled]
  1882 [label="State 1882\n\l388 for-range-declaration: decl-specifier-seq ref-qualifier • '[' identifier-list ']'\l"]
  1882 -> 1948 [style=solid label="'['"]
  1883 [label="State 1883\n\l516 iteration-statement: \"for\" '(' init-statement for-range-declaration ':' • for-range-initializer ')' statement\l"]
  1883 -> 1 [style=solid label="IDENTIFIER"]
  1883 -> 361 [style=solid label="'+'"]
  1883 -> 362 [style=solid label="'-'"]
  1883 -> 363 [style=solid label="'('"]
  1883 -> 364 [style=solid label="'&'"]
  1883 -> 365 [style=solid label="\"::\""]
  1883 -> 366 [style=solid label="'['"]
  1883 -> 367 [style=solid label="\"co_await\""]
  1883 -> 939 [style=solid label="'{'"]
  1883 -> 368 [style=solid label="'0'"]
  1883 -> 369 [style=solid label="'1'"]
  1883 -> 370 [style=solid label="\"0b\""]
  1883 -> 371 [style=solid label="\"0B\""]
  1883 -> 372 [style=solid label="'\\''"]
  1883 -> 373 [style=solid label="\"false\""]
  1883 -> 374 [style=solid label="\"true\""]
  1883 -> 375 [style=solid label="\"noexcept\""]
  1883 -> 17 [style=solid label="\"operator\""]
  1883 -> 26 [style=solid label="\"decltype\""]
  1883 -> 376 [style=solid label="\"delete\""]
  1883 -> 377 [style=solid label="'.'"]
  1883 -> 378 [style=solid label="'2'"]
  1883 -> 379 [style=solid label="'3'"]
  1883 -> 380 [style=solid label="'4'"]
  1883 -> 381 [style=solid label="'5'"]
  1883 -> 382 [style=solid label="'6'"]
  1883 -> 383 [style=solid label="'7'"]
  1883 -> 384 [style=solid label="'8'"]
  1883 -> 385 [style=solid label="'9'"]
  1883 -> 185 [style=solid label="\"u8\""]
  1883 -> 186 [style=solid label="'u'"]
  1883 -> 187 [style=solid label="'U'"]
  1883 -> 188 [style=solid label="'L'"]
  1883 -> 386 [style=solid label="'*'"]
  1883 -> 203 [style=solid label="'\"'"]
  1883 -> 387 [style=solid label="\"0x\""]
  1883 -> 388 [style=solid label="\"0X\""]
  1883 -> 389 [style=solid label="\"requires\""]
  1883 -> 390 [style=solid label="\"new\""]
  1883 -> 391 [style=solid label="'~'"]
  1883 -> 392 [style=solid label="'!'"]
  1883 -> 393 [style=solid label="\"++\""]
  1883 -> 394 [style=solid label="\"--\""]
  1883 -> 395 [style=solid label="\"this\""]
  1883 -> 37 [style=solid label="\"auto\""]
  1883 -> 396 [style=solid label="\"nullptr\""]
  1883 -> 397 [style=solid label="\"dynamic_cast\""]
  1883 -> 398 [style=solid label="\"static_cast\""]
  1883 -> 399 [style=solid label="\"reinterpret_cast\""]
  1883 -> 400 [style=solid label="\"const_cast\""]
  1883 -> 401 [style=solid label="\"typeid\""]
  1883 -> 38 [style=solid label="\"char\""]
  1883 -> 39 [style=solid label="\"char8_t\""]
  1883 -> 40 [style=solid label="\"char16_t\""]
  1883 -> 41 [style=solid label="\"char32_t\""]
  1883 -> 42 [style=solid label="\"wchar_t\""]
  1883 -> 43 [style=solid label="\"bool\""]
  1883 -> 44 [style=solid label="\"short\""]
  1883 -> 45 [style=solid label="\"int\""]
  1883 -> 46 [style=solid label="\"long\""]
  1883 -> 47 [style=solid label="\"signed\""]
  1883 -> 48 [style=solid label="\"unsigned\""]
  1883 -> 49 [style=solid label="\"float\""]
  1883 -> 50 [style=solid label="\"double\""]
  1883 -> 51 [style=solid label="\"void\""]
  1883 -> 209 [style=solid label="'R'"]
  1883 -> 528 [style=solid label="\"throw\""]
  1883 -> 56 [style=solid label="\"typename\""]
  1883 -> 402 [style=solid label="\"sizeof\""]
  1883 -> 403 [style=solid label="\"alignof\""]
  1883 -> 529 [style=solid label="\"co_yield\""]
  1883 -> 404 [style=dashed label="additive-expression"]
  1883 -> 405 [style=dashed label="and-expression"]
  1883 -> 530 [style=dashed label="assignment-expression"]
  1883 -> 406 [style=dashed label="await-expression"]
  1883 -> 407 [style=dashed label="binary-literal"]
  1883 -> 408 [style=dashed label="boolean-literal"]
  1883 -> 1167 [style=dashed label="braced-init-list"]
  1883 -> 409 [style=dashed label="cast-expression"]
  1883 -> 410 [style=dashed label="character-literal"]
  1883 -> 66 [style=dashed label="class-name"]
  1883 -> 411 [style=dashed label="compare-expression"]
  1883 -> 68 [style=dashed label="concept-name"]
  1883 -> 531 [style=dashed label="conditional-expression"]
  1883 -> 69 [style=dashed label="conversion-function-id"]
  1883 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1883 -> 415 [style=dashed label="decimal-literal"]
  1883 -> 77 [style=dashed label="decltype-specifier"]
  1883 -> 416 [style=dashed label="delete-expression"]
  1883 -> 417 [style=dashed label="digit"]
  1883 -> 418 [style=dashed label="digit-sequence"]
  1883 -> 419 [style=dashed label="encoding-prefix"]
  1883 -> 85 [style=dashed label="enum-name"]
  1883 -> 420 [style=dashed label="equality-expression"]
  1883 -> 421 [style=dashed label="exclusive-or-expression"]
  1883 -> 1874 [style=dashed label="expr-or-braced-init-list"]
  1883 -> 1169 [style=dashed label="expression"]
  1883 -> 422 [style=dashed label="floating-point-literal"]
  1883 -> 423 [style=dashed label="fold-expression"]
  1883 -> 1949 [style=dashed label="for-range-initializer"]
  1883 -> 424 [style=dashed label="fractional-constant"]
  1883 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1883 -> 426 [style=dashed label="hexadecimal-literal"]
  1883 -> 427 [style=dashed label="hexadecimal-prefix"]
  1883 -> 428 [style=dashed label="id-expression"]
  1883 -> 429 [style=dashed label="inclusive-or-expression"]
  1883 -> 430 [style=dashed label="integer-literal"]
  1883 -> 431 [style=dashed label="lambda-expression"]
  1883 -> 432 [style=dashed label="lambda-introducer"]
  1883 -> 433 [style=dashed label="literal"]
  1883 -> 96 [style=dashed label="literal-operator-id"]
  1883 -> 434 [style=dashed label="logical-and-expression"]
  1883 -> 533 [style=dashed label="logical-or-expression"]
  1883 -> 436 [style=dashed label="multiplicative-expression"]
  1883 -> 100 [style=dashed label="namespace-alias"]
  1883 -> 103 [style=dashed label="namespace-name"]
  1883 -> 437 [style=dashed label="nested-name-specifier"]
  1883 -> 438 [style=dashed label="new-expression"]
  1883 -> 439 [style=dashed label="noexcept-expression"]
  1883 -> 440 [style=dashed label="nonzero-digit"]
  1883 -> 441 [style=dashed label="octal-literal"]
  1883 -> 109 [style=dashed label="operator-function-id"]
  1883 -> 110 [style=dashed label="placeholder-type-specifier"]
  1883 -> 442 [style=dashed label="pm-expression"]
  1883 -> 443 [style=dashed label="pointer-literal"]
  1883 -> 444 [style=dashed label="postfix-expression"]
  1883 -> 445 [style=dashed label="primary-expression"]
  1883 -> 113 [style=dashed label="qualified-id"]
  1883 -> 446 [style=dashed label="relational-expression"]
  1883 -> 447 [style=dashed label="requires-expression"]
  1883 -> 448 [style=dashed label="shift-expression"]
  1883 -> 115 [style=dashed label="simple-template-id"]
  1883 -> 534 [style=dashed label="simple-type-specifier"]
  1883 -> 450 [style=dashed label="string-literal"]
  1883 -> 121 [style=dashed label="template-id"]
  1883 -> 216 [style=dashed label="template-name"]
  1883 -> 535 [style=dashed label="throw-expression"]
  1883 -> 124 [style=dashed label="type-constraint"]
  1883 -> 125 [style=dashed label="type-name"]
  1883 -> 127 [style=dashed label="typedef-name"]
  1883 -> 536 [style=dashed label="typename-specifier"]
  1883 -> 454 [style=dashed label="unary-expression"]
  1883 -> 455 [style=dashed label="unary-operator"]
  1883 -> 130 [style=dashed label="unqualified-id"]
  1883 -> 456 [style=dashed label="user-defined-character-literal"]
  1883 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1883 -> 458 [style=dashed label="user-defined-integer-literal"]
  1883 -> 459 [style=dashed label="user-defined-literal"]
  1883 -> 460 [style=dashed label="user-defined-string-literal"]
  1883 -> 537 [style=dashed label="yield-expression"]
  1884 [label="State 1884\n\l165 condition: attribute-specifier-seq decl-specifier-seq declarator • brace-or-equal-initializer\l473 init-declarator: declarator •\l474                | declarator • initializer\l475                | declarator • requires-clause\l"]
  1884 -> 1280 [style=solid label="'='"]
  1884 -> 647 [style=solid label="'('"]
  1884 -> 939 [style=solid label="'{'"]
  1884 -> 297 [style=solid label="\"requires\""]
  1884 -> 1950 [style=dashed label="brace-or-equal-initializer"]
  1884 -> 650 [style=dashed label="braced-init-list"]
  1884 -> 652 [style=dashed label="initializer"]
  1884 -> 1535 [style=dashed label="requires-clause"]
  1884 -> "1884R473" [style=solid]
 "1884R473" [label="R473", fillcolor=3, shape=diamond, style=filled]
  1885 [label="State 1885\n\l952 selection-statement: \"if\" '(' condition ')' statement •\l956                    | \"if\" '(' condition ')' statement • \"else\" statement\l"]
  1885 -> 1951 [style=solid label="\"else\""]
  1885 -> "1885R952d" [label="[\"else\"]", style=solid]
 "1885R952d" [label="R952", fillcolor=5, shape=diamond, style=filled]
  1885 -> "1885R952" [style=solid]
 "1885R952" [label="R952", fillcolor=3, shape=diamond, style=filled]
  1886 [label="State 1886\n\l166 condition: decl-specifier-seq declarator brace-or-equal-initializer •\l481 initializer: brace-or-equal-initializer •\l"]
  1886 -> "1886R166" [label="[')']", style=solid]
 "1886R166" [label="R166", fillcolor=3, shape=diamond, style=filled]
  1886 -> "1886R481" [style=solid]
 "1886R481" [label="R481", fillcolor=3, shape=diamond, style=filled]
  1887 [label="State 1887\n\l954 selection-statement: \"if\" '(' init-statement condition ')' • statement\l958                    | \"if\" '(' init-statement condition ')' • statement \"else\" statement\l"]
  1887 -> 665 [style=solid label="IDENTIFIER"]
  1887 -> 361 [style=solid label="'+'"]
  1887 -> 362 [style=solid label="'-'"]
  1887 -> 2 [style=solid label="\"using\""]
  1887 -> 666 [style=solid label="';'"]
  1887 -> 4 [style=solid label="\"alignas\""]
  1887 -> 363 [style=solid label="'('"]
  1887 -> 364 [style=solid label="'&'"]
  1887 -> 8 [style=solid label="\"asm\""]
  1887 -> 365 [style=solid label="\"::\""]
  1887 -> 667 [style=solid label="'['"]
  1887 -> 367 [style=solid label="\"co_await\""]
  1887 -> 294 [style=solid label="'{'"]
  1887 -> 11 [style=solid label="\"virtual\""]
  1887 -> 368 [style=solid label="'0'"]
  1887 -> 369 [style=solid label="'1'"]
  1887 -> 370 [style=solid label="\"0b\""]
  1887 -> 371 [style=solid label="\"0B\""]
  1887 -> 372 [style=solid label="'\\''"]
  1887 -> 373 [style=solid label="\"false\""]
  1887 -> 374 [style=solid label="\"true\""]
  1887 -> 12 [style=solid label="\"class\""]
  1887 -> 13 [style=solid label="\"struct\""]
  1887 -> 14 [style=solid label="\"union\""]
  1887 -> 375 [style=solid label="\"noexcept\""]
  1887 -> 17 [style=solid label="\"operator\""]
  1887 -> 669 [style=solid label="\"co_return\""]
  1887 -> 18 [style=solid label="\"const\""]
  1887 -> 19 [style=solid label="\"volatile\""]
  1887 -> 20 [style=solid label="\"friend\""]
  1887 -> 21 [style=solid label="\"typedef\""]
  1887 -> 22 [style=solid label="\"constexpr\""]
  1887 -> 23 [style=solid label="\"consteval\""]
  1887 -> 24 [style=solid label="\"constinit\""]
  1887 -> 263 [style=solid label="\"inline\""]
  1887 -> 26 [style=solid label="\"decltype\""]
  1887 -> 376 [style=solid label="\"delete\""]
  1887 -> 377 [style=solid label="'.'"]
  1887 -> 378 [style=solid label="'2'"]
  1887 -> 379 [style=solid label="'3'"]
  1887 -> 380 [style=solid label="'4'"]
  1887 -> 381 [style=solid label="'5'"]
  1887 -> 382 [style=solid label="'6'"]
  1887 -> 383 [style=solid label="'7'"]
  1887 -> 384 [style=solid label="'8'"]
  1887 -> 385 [style=solid label="'9'"]
  1887 -> 27 [style=solid label="\"enum\""]
  1887 -> 185 [style=solid label="\"u8\""]
  1887 -> 186 [style=solid label="'u'"]
  1887 -> 187 [style=solid label="'U'"]
  1887 -> 188 [style=solid label="'L'"]
  1887 -> 264 [style=solid label="\"extern\""]
  1887 -> 29 [style=solid label="\"explicit\""]
  1887 -> 386 [style=solid label="'*'"]
  1887 -> 670 [style=solid label="\"default\""]
  1887 -> 671 [style=solid label="\"try\""]
  1887 -> 203 [style=solid label="'\"'"]
  1887 -> 387 [style=solid label="\"0x\""]
  1887 -> 388 [style=solid label="\"0X\""]
  1887 -> 672 [style=solid label="\"while\""]
  1887 -> 673 [style=solid label="\"do\""]
  1887 -> 674 [style=solid label="\"for\""]
  1887 -> 675 [style=solid label="\"break\""]
  1887 -> 676 [style=solid label="\"continue\""]
  1887 -> 677 [style=solid label="\"return\""]
  1887 -> 678 [style=solid label="\"goto\""]
  1887 -> 679 [style=solid label="\"case\""]
  1887 -> 680 [style=solid label="\"namespace\""]
  1887 -> 389 [style=solid label="\"requires\""]
  1887 -> 390 [style=solid label="\"new\""]
  1887 -> 391 [style=solid label="'~'"]
  1887 -> 392 [style=solid label="'!'"]
  1887 -> 393 [style=solid label="\"++\""]
  1887 -> 394 [style=solid label="\"--\""]
  1887 -> 395 [style=solid label="\"this\""]
  1887 -> 37 [style=solid label="\"auto\""]
  1887 -> 396 [style=solid label="\"nullptr\""]
  1887 -> 397 [style=solid label="\"dynamic_cast\""]
  1887 -> 398 [style=solid label="\"static_cast\""]
  1887 -> 399 [style=solid label="\"reinterpret_cast\""]
  1887 -> 400 [style=solid label="\"const_cast\""]
  1887 -> 401 [style=solid label="\"typeid\""]
  1887 -> 681 [style=solid label="\"if\""]
  1887 -> 682 [style=solid label="\"switch\""]
  1887 -> 38 [style=solid label="\"char\""]
  1887 -> 39 [style=solid label="\"char8_t\""]
  1887 -> 40 [style=solid label="\"char16_t\""]
  1887 -> 41 [style=solid label="\"char32_t\""]
  1887 -> 42 [style=solid label="\"wchar_t\""]
  1887 -> 43 [style=solid label="\"bool\""]
  1887 -> 44 [style=solid label="\"short\""]
  1887 -> 45 [style=solid label="\"int\""]
  1887 -> 46 [style=solid label="\"long\""]
  1887 -> 47 [style=solid label="\"signed\""]
  1887 -> 48 [style=solid label="\"unsigned\""]
  1887 -> 49 [style=solid label="\"float\""]
  1887 -> 50 [style=solid label="\"double\""]
  1887 -> 51 [style=solid label="\"void\""]
  1887 -> 52 [style=solid label="\"static_assert\""]
  1887 -> 53 [style=solid label="\"static\""]
  1887 -> 54 [style=solid label="\"thread_local\""]
  1887 -> 55 [style=solid label="\"mutable\""]
  1887 -> 209 [style=solid label="'R'"]
  1887 -> 528 [style=solid label="\"throw\""]
  1887 -> 56 [style=solid label="\"typename\""]
  1887 -> 402 [style=solid label="\"sizeof\""]
  1887 -> 403 [style=solid label="\"alignof\""]
  1887 -> 529 [style=solid label="\"co_yield\""]
  1887 -> 404 [style=dashed label="additive-expression"]
  1887 -> 57 [style=dashed label="alias-declaration"]
  1887 -> 58 [style=dashed label="alignment-specifier"]
  1887 -> 405 [style=dashed label="and-expression"]
  1887 -> 59 [style=dashed label="asm-declaration"]
  1887 -> 530 [style=dashed label="assignment-expression"]
  1887 -> 61 [style=dashed label="attribute-specifier"]
  1887 -> 683 [style=dashed label="attribute-specifier-seq"]
  1887 -> 406 [style=dashed label="await-expression"]
  1887 -> 407 [style=dashed label="binary-literal"]
  1887 -> 684 [style=dashed label="block-declaration"]
  1887 -> 408 [style=dashed label="boolean-literal"]
  1887 -> 409 [style=dashed label="cast-expression"]
  1887 -> 410 [style=dashed label="character-literal"]
  1887 -> 64 [style=dashed label="class-head"]
  1887 -> 65 [style=dashed label="class-key"]
  1887 -> 66 [style=dashed label="class-name"]
  1887 -> 67 [style=dashed label="class-specifier"]
  1887 -> 411 [style=dashed label="compare-expression"]
  1887 -> 685 [style=dashed label="compound-statement"]
  1887 -> 68 [style=dashed label="concept-name"]
  1887 -> 531 [style=dashed label="conditional-expression"]
  1887 -> 69 [style=dashed label="conversion-function-id"]
  1887 -> 686 [style=dashed label="coroutine-return-statement"]
  1887 -> 70 [style=dashed label="cv-qualifier"]
  1887 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1887 -> 415 [style=dashed label="decimal-literal"]
  1887 -> 71 [style=dashed label="decl-specifier"]
  1887 -> 687 [style=dashed label="decl-specifier-seq"]
  1887 -> 688 [style=dashed label="declaration-statement"]
  1887 -> 77 [style=dashed label="decltype-specifier"]
  1887 -> 79 [style=dashed label="defining-type-specifier"]
  1887 -> 416 [style=dashed label="delete-expression"]
  1887 -> 417 [style=dashed label="digit"]
  1887 -> 418 [style=dashed label="digit-sequence"]
  1887 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1887 -> 81 [style=dashed label="elaborated-type-specifier"]
  1887 -> 419 [style=dashed label="encoding-prefix"]
  1887 -> 83 [style=dashed label="enum-head"]
  1887 -> 84 [style=dashed label="enum-key"]
  1887 -> 85 [style=dashed label="enum-name"]
  1887 -> 86 [style=dashed label="enum-specifier"]
  1887 -> 420 [style=dashed label="equality-expression"]
  1887 -> 421 [style=dashed label="exclusive-or-expression"]
  1887 -> 269 [style=dashed label="explicit-specifier"]
  1887 -> 689 [style=dashed label="expression"]
  1887 -> 690 [style=dashed label="expression-statement"]
  1887 -> 422 [style=dashed label="floating-point-literal"]
  1887 -> 423 [style=dashed label="fold-expression"]
  1887 -> 424 [style=dashed label="fractional-constant"]
  1887 -> 92 [style=dashed label="function-specifier"]
  1887 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1887 -> 426 [style=dashed label="hexadecimal-literal"]
  1887 -> 427 [style=dashed label="hexadecimal-prefix"]
  1887 -> 428 [style=dashed label="id-expression"]
  1887 -> 429 [style=dashed label="inclusive-or-expression"]
  1887 -> 430 [style=dashed label="integer-literal"]
  1887 -> 691 [style=dashed label="iteration-statement"]
  1887 -> 692 [style=dashed label="jump-statement"]
  1887 -> 693 [style=dashed label="labeled-statement"]
  1887 -> 431 [style=dashed label="lambda-expression"]
  1887 -> 432 [style=dashed label="lambda-introducer"]
  1887 -> 433 [style=dashed label="literal"]
  1887 -> 96 [style=dashed label="literal-operator-id"]
  1887 -> 434 [style=dashed label="logical-and-expression"]
  1887 -> 533 [style=dashed label="logical-or-expression"]
  1887 -> 436 [style=dashed label="multiplicative-expression"]
  1887 -> 100 [style=dashed label="namespace-alias"]
  1887 -> 101 [style=dashed label="namespace-alias-definition"]
  1887 -> 103 [style=dashed label="namespace-name"]
  1887 -> 437 [style=dashed label="nested-name-specifier"]
  1887 -> 438 [style=dashed label="new-expression"]
  1887 -> 439 [style=dashed label="noexcept-expression"]
  1887 -> 440 [style=dashed label="nonzero-digit"]
  1887 -> 441 [style=dashed label="octal-literal"]
  1887 -> 108 [style=dashed label="opaque-enum-declaration"]
  1887 -> 109 [style=dashed label="operator-function-id"]
  1887 -> 110 [style=dashed label="placeholder-type-specifier"]
  1887 -> 442 [style=dashed label="pm-expression"]
  1887 -> 443 [style=dashed label="pointer-literal"]
  1887 -> 444 [style=dashed label="postfix-expression"]
  1887 -> 445 [style=dashed label="primary-expression"]
  1887 -> 113 [style=dashed label="qualified-id"]
  1887 -> 446 [style=dashed label="relational-expression"]
  1887 -> 447 [style=dashed label="requires-expression"]
  1887 -> 694 [style=dashed label="selection-statement"]
  1887 -> 448 [style=dashed label="shift-expression"]
  1887 -> 114 [style=dashed label="simple-declaration"]
  1887 -> 115 [style=dashed label="simple-template-id"]
  1887 -> 449 [style=dashed label="simple-type-specifier"]
  1887 -> 1952 [style=dashed label="statement"]
  1887 -> 117 [style=dashed label="static_assert-declaration"]
  1887 -> 118 [style=dashed label="storage-class-specifier"]
  1887 -> 450 [style=dashed label="string-literal"]
  1887 -> 121 [style=dashed label="template-id"]
  1887 -> 216 [style=dashed label="template-name"]
  1887 -> 535 [style=dashed label="throw-expression"]
  1887 -> 697 [style=dashed label="try-block"]
  1887 -> 124 [style=dashed label="type-constraint"]
  1887 -> 125 [style=dashed label="type-name"]
  1887 -> 126 [style=dashed label="type-specifier"]
  1887 -> 127 [style=dashed label="typedef-name"]
  1887 -> 453 [style=dashed label="typename-specifier"]
  1887 -> 454 [style=dashed label="unary-expression"]
  1887 -> 455 [style=dashed label="unary-operator"]
  1887 -> 130 [style=dashed label="unqualified-id"]
  1887 -> 456 [style=dashed label="user-defined-character-literal"]
  1887 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1887 -> 458 [style=dashed label="user-defined-integer-literal"]
  1887 -> 459 [style=dashed label="user-defined-literal"]
  1887 -> 460 [style=dashed label="user-defined-string-literal"]
  1887 -> 131 [style=dashed label="using-declaration"]
  1887 -> 132 [style=dashed label="using-directive"]
  1887 -> 133 [style=dashed label="using-enum-declaration"]
  1887 -> 537 [style=dashed label="yield-expression"]
  1888 [label="State 1888\n\l953 selection-statement: \"if\" \"constexpr\" '(' condition ')' • statement\l957                    | \"if\" \"constexpr\" '(' condition ')' • statement \"else\" statement\l"]
  1888 -> 665 [style=solid label="IDENTIFIER"]
  1888 -> 361 [style=solid label="'+'"]
  1888 -> 362 [style=solid label="'-'"]
  1888 -> 2 [style=solid label="\"using\""]
  1888 -> 666 [style=solid label="';'"]
  1888 -> 4 [style=solid label="\"alignas\""]
  1888 -> 363 [style=solid label="'('"]
  1888 -> 364 [style=solid label="'&'"]
  1888 -> 8 [style=solid label="\"asm\""]
  1888 -> 365 [style=solid label="\"::\""]
  1888 -> 667 [style=solid label="'['"]
  1888 -> 367 [style=solid label="\"co_await\""]
  1888 -> 294 [style=solid label="'{'"]
  1888 -> 11 [style=solid label="\"virtual\""]
  1888 -> 368 [style=solid label="'0'"]
  1888 -> 369 [style=solid label="'1'"]
  1888 -> 370 [style=solid label="\"0b\""]
  1888 -> 371 [style=solid label="\"0B\""]
  1888 -> 372 [style=solid label="'\\''"]
  1888 -> 373 [style=solid label="\"false\""]
  1888 -> 374 [style=solid label="\"true\""]
  1888 -> 12 [style=solid label="\"class\""]
  1888 -> 13 [style=solid label="\"struct\""]
  1888 -> 14 [style=solid label="\"union\""]
  1888 -> 375 [style=solid label="\"noexcept\""]
  1888 -> 17 [style=solid label="\"operator\""]
  1888 -> 669 [style=solid label="\"co_return\""]
  1888 -> 18 [style=solid label="\"const\""]
  1888 -> 19 [style=solid label="\"volatile\""]
  1888 -> 20 [style=solid label="\"friend\""]
  1888 -> 21 [style=solid label="\"typedef\""]
  1888 -> 22 [style=solid label="\"constexpr\""]
  1888 -> 23 [style=solid label="\"consteval\""]
  1888 -> 24 [style=solid label="\"constinit\""]
  1888 -> 263 [style=solid label="\"inline\""]
  1888 -> 26 [style=solid label="\"decltype\""]
  1888 -> 376 [style=solid label="\"delete\""]
  1888 -> 377 [style=solid label="'.'"]
  1888 -> 378 [style=solid label="'2'"]
  1888 -> 379 [style=solid label="'3'"]
  1888 -> 380 [style=solid label="'4'"]
  1888 -> 381 [style=solid label="'5'"]
  1888 -> 382 [style=solid label="'6'"]
  1888 -> 383 [style=solid label="'7'"]
  1888 -> 384 [style=solid label="'8'"]
  1888 -> 385 [style=solid label="'9'"]
  1888 -> 27 [style=solid label="\"enum\""]
  1888 -> 185 [style=solid label="\"u8\""]
  1888 -> 186 [style=solid label="'u'"]
  1888 -> 187 [style=solid label="'U'"]
  1888 -> 188 [style=solid label="'L'"]
  1888 -> 264 [style=solid label="\"extern\""]
  1888 -> 29 [style=solid label="\"explicit\""]
  1888 -> 386 [style=solid label="'*'"]
  1888 -> 670 [style=solid label="\"default\""]
  1888 -> 671 [style=solid label="\"try\""]
  1888 -> 203 [style=solid label="'\"'"]
  1888 -> 387 [style=solid label="\"0x\""]
  1888 -> 388 [style=solid label="\"0X\""]
  1888 -> 672 [style=solid label="\"while\""]
  1888 -> 673 [style=solid label="\"do\""]
  1888 -> 674 [style=solid label="\"for\""]
  1888 -> 675 [style=solid label="\"break\""]
  1888 -> 676 [style=solid label="\"continue\""]
  1888 -> 677 [style=solid label="\"return\""]
  1888 -> 678 [style=solid label="\"goto\""]
  1888 -> 679 [style=solid label="\"case\""]
  1888 -> 680 [style=solid label="\"namespace\""]
  1888 -> 389 [style=solid label="\"requires\""]
  1888 -> 390 [style=solid label="\"new\""]
  1888 -> 391 [style=solid label="'~'"]
  1888 -> 392 [style=solid label="'!'"]
  1888 -> 393 [style=solid label="\"++\""]
  1888 -> 394 [style=solid label="\"--\""]
  1888 -> 395 [style=solid label="\"this\""]
  1888 -> 37 [style=solid label="\"auto\""]
  1888 -> 396 [style=solid label="\"nullptr\""]
  1888 -> 397 [style=solid label="\"dynamic_cast\""]
  1888 -> 398 [style=solid label="\"static_cast\""]
  1888 -> 399 [style=solid label="\"reinterpret_cast\""]
  1888 -> 400 [style=solid label="\"const_cast\""]
  1888 -> 401 [style=solid label="\"typeid\""]
  1888 -> 681 [style=solid label="\"if\""]
  1888 -> 682 [style=solid label="\"switch\""]
  1888 -> 38 [style=solid label="\"char\""]
  1888 -> 39 [style=solid label="\"char8_t\""]
  1888 -> 40 [style=solid label="\"char16_t\""]
  1888 -> 41 [style=solid label="\"char32_t\""]
  1888 -> 42 [style=solid label="\"wchar_t\""]
  1888 -> 43 [style=solid label="\"bool\""]
  1888 -> 44 [style=solid label="\"short\""]
  1888 -> 45 [style=solid label="\"int\""]
  1888 -> 46 [style=solid label="\"long\""]
  1888 -> 47 [style=solid label="\"signed\""]
  1888 -> 48 [style=solid label="\"unsigned\""]
  1888 -> 49 [style=solid label="\"float\""]
  1888 -> 50 [style=solid label="\"double\""]
  1888 -> 51 [style=solid label="\"void\""]
  1888 -> 52 [style=solid label="\"static_assert\""]
  1888 -> 53 [style=solid label="\"static\""]
  1888 -> 54 [style=solid label="\"thread_local\""]
  1888 -> 55 [style=solid label="\"mutable\""]
  1888 -> 209 [style=solid label="'R'"]
  1888 -> 528 [style=solid label="\"throw\""]
  1888 -> 56 [style=solid label="\"typename\""]
  1888 -> 402 [style=solid label="\"sizeof\""]
  1888 -> 403 [style=solid label="\"alignof\""]
  1888 -> 529 [style=solid label="\"co_yield\""]
  1888 -> 404 [style=dashed label="additive-expression"]
  1888 -> 57 [style=dashed label="alias-declaration"]
  1888 -> 58 [style=dashed label="alignment-specifier"]
  1888 -> 405 [style=dashed label="and-expression"]
  1888 -> 59 [style=dashed label="asm-declaration"]
  1888 -> 530 [style=dashed label="assignment-expression"]
  1888 -> 61 [style=dashed label="attribute-specifier"]
  1888 -> 683 [style=dashed label="attribute-specifier-seq"]
  1888 -> 406 [style=dashed label="await-expression"]
  1888 -> 407 [style=dashed label="binary-literal"]
  1888 -> 684 [style=dashed label="block-declaration"]
  1888 -> 408 [style=dashed label="boolean-literal"]
  1888 -> 409 [style=dashed label="cast-expression"]
  1888 -> 410 [style=dashed label="character-literal"]
  1888 -> 64 [style=dashed label="class-head"]
  1888 -> 65 [style=dashed label="class-key"]
  1888 -> 66 [style=dashed label="class-name"]
  1888 -> 67 [style=dashed label="class-specifier"]
  1888 -> 411 [style=dashed label="compare-expression"]
  1888 -> 685 [style=dashed label="compound-statement"]
  1888 -> 68 [style=dashed label="concept-name"]
  1888 -> 531 [style=dashed label="conditional-expression"]
  1888 -> 69 [style=dashed label="conversion-function-id"]
  1888 -> 686 [style=dashed label="coroutine-return-statement"]
  1888 -> 70 [style=dashed label="cv-qualifier"]
  1888 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1888 -> 415 [style=dashed label="decimal-literal"]
  1888 -> 71 [style=dashed label="decl-specifier"]
  1888 -> 687 [style=dashed label="decl-specifier-seq"]
  1888 -> 688 [style=dashed label="declaration-statement"]
  1888 -> 77 [style=dashed label="decltype-specifier"]
  1888 -> 79 [style=dashed label="defining-type-specifier"]
  1888 -> 416 [style=dashed label="delete-expression"]
  1888 -> 417 [style=dashed label="digit"]
  1888 -> 418 [style=dashed label="digit-sequence"]
  1888 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1888 -> 81 [style=dashed label="elaborated-type-specifier"]
  1888 -> 419 [style=dashed label="encoding-prefix"]
  1888 -> 83 [style=dashed label="enum-head"]
  1888 -> 84 [style=dashed label="enum-key"]
  1888 -> 85 [style=dashed label="enum-name"]
  1888 -> 86 [style=dashed label="enum-specifier"]
  1888 -> 420 [style=dashed label="equality-expression"]
  1888 -> 421 [style=dashed label="exclusive-or-expression"]
  1888 -> 269 [style=dashed label="explicit-specifier"]
  1888 -> 689 [style=dashed label="expression"]
  1888 -> 690 [style=dashed label="expression-statement"]
  1888 -> 422 [style=dashed label="floating-point-literal"]
  1888 -> 423 [style=dashed label="fold-expression"]
  1888 -> 424 [style=dashed label="fractional-constant"]
  1888 -> 92 [style=dashed label="function-specifier"]
  1888 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1888 -> 426 [style=dashed label="hexadecimal-literal"]
  1888 -> 427 [style=dashed label="hexadecimal-prefix"]
  1888 -> 428 [style=dashed label="id-expression"]
  1888 -> 429 [style=dashed label="inclusive-or-expression"]
  1888 -> 430 [style=dashed label="integer-literal"]
  1888 -> 691 [style=dashed label="iteration-statement"]
  1888 -> 692 [style=dashed label="jump-statement"]
  1888 -> 693 [style=dashed label="labeled-statement"]
  1888 -> 431 [style=dashed label="lambda-expression"]
  1888 -> 432 [style=dashed label="lambda-introducer"]
  1888 -> 433 [style=dashed label="literal"]
  1888 -> 96 [style=dashed label="literal-operator-id"]
  1888 -> 434 [style=dashed label="logical-and-expression"]
  1888 -> 533 [style=dashed label="logical-or-expression"]
  1888 -> 436 [style=dashed label="multiplicative-expression"]
  1888 -> 100 [style=dashed label="namespace-alias"]
  1888 -> 101 [style=dashed label="namespace-alias-definition"]
  1888 -> 103 [style=dashed label="namespace-name"]
  1888 -> 437 [style=dashed label="nested-name-specifier"]
  1888 -> 438 [style=dashed label="new-expression"]
  1888 -> 439 [style=dashed label="noexcept-expression"]
  1888 -> 440 [style=dashed label="nonzero-digit"]
  1888 -> 441 [style=dashed label="octal-literal"]
  1888 -> 108 [style=dashed label="opaque-enum-declaration"]
  1888 -> 109 [style=dashed label="operator-function-id"]
  1888 -> 110 [style=dashed label="placeholder-type-specifier"]
  1888 -> 442 [style=dashed label="pm-expression"]
  1888 -> 443 [style=dashed label="pointer-literal"]
  1888 -> 444 [style=dashed label="postfix-expression"]
  1888 -> 445 [style=dashed label="primary-expression"]
  1888 -> 113 [style=dashed label="qualified-id"]
  1888 -> 446 [style=dashed label="relational-expression"]
  1888 -> 447 [style=dashed label="requires-expression"]
  1888 -> 694 [style=dashed label="selection-statement"]
  1888 -> 448 [style=dashed label="shift-expression"]
  1888 -> 114 [style=dashed label="simple-declaration"]
  1888 -> 115 [style=dashed label="simple-template-id"]
  1888 -> 449 [style=dashed label="simple-type-specifier"]
  1888 -> 1953 [style=dashed label="statement"]
  1888 -> 117 [style=dashed label="static_assert-declaration"]
  1888 -> 118 [style=dashed label="storage-class-specifier"]
  1888 -> 450 [style=dashed label="string-literal"]
  1888 -> 121 [style=dashed label="template-id"]
  1888 -> 216 [style=dashed label="template-name"]
  1888 -> 535 [style=dashed label="throw-expression"]
  1888 -> 697 [style=dashed label="try-block"]
  1888 -> 124 [style=dashed label="type-constraint"]
  1888 -> 125 [style=dashed label="type-name"]
  1888 -> 126 [style=dashed label="type-specifier"]
  1888 -> 127 [style=dashed label="typedef-name"]
  1888 -> 453 [style=dashed label="typename-specifier"]
  1888 -> 454 [style=dashed label="unary-expression"]
  1888 -> 455 [style=dashed label="unary-operator"]
  1888 -> 130 [style=dashed label="unqualified-id"]
  1888 -> 456 [style=dashed label="user-defined-character-literal"]
  1888 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1888 -> 458 [style=dashed label="user-defined-integer-literal"]
  1888 -> 459 [style=dashed label="user-defined-literal"]
  1888 -> 460 [style=dashed label="user-defined-string-literal"]
  1888 -> 131 [style=dashed label="using-declaration"]
  1888 -> 132 [style=dashed label="using-directive"]
  1888 -> 133 [style=dashed label="using-enum-declaration"]
  1888 -> 537 [style=dashed label="yield-expression"]
  1889 [label="State 1889\n\l955 selection-statement: \"if\" \"constexpr\" '(' init-statement condition • ')' statement\l959                    | \"if\" \"constexpr\" '(' init-statement condition • ')' statement \"else\" statement\l"]
  1889 -> 1954 [style=solid label="')'"]
  1890 [label="State 1890\n\l962 selection-statement: \"if\" \"consteval\" compound-statement \"else\" statement •\l"]
  1890 -> "1890R962" [style=solid]
 "1890R962" [label="R962", fillcolor=3, shape=diamond, style=filled]
  1891 [label="State 1891\n\l963 selection-statement: \"if\" '!' \"consteval\" compound-statement \"else\" • statement\l"]
  1891 -> 665 [style=solid label="IDENTIFIER"]
  1891 -> 361 [style=solid label="'+'"]
  1891 -> 362 [style=solid label="'-'"]
  1891 -> 2 [style=solid label="\"using\""]
  1891 -> 666 [style=solid label="';'"]
  1891 -> 4 [style=solid label="\"alignas\""]
  1891 -> 363 [style=solid label="'('"]
  1891 -> 364 [style=solid label="'&'"]
  1891 -> 8 [style=solid label="\"asm\""]
  1891 -> 365 [style=solid label="\"::\""]
  1891 -> 667 [style=solid label="'['"]
  1891 -> 367 [style=solid label="\"co_await\""]
  1891 -> 294 [style=solid label="'{'"]
  1891 -> 11 [style=solid label="\"virtual\""]
  1891 -> 368 [style=solid label="'0'"]
  1891 -> 369 [style=solid label="'1'"]
  1891 -> 370 [style=solid label="\"0b\""]
  1891 -> 371 [style=solid label="\"0B\""]
  1891 -> 372 [style=solid label="'\\''"]
  1891 -> 373 [style=solid label="\"false\""]
  1891 -> 374 [style=solid label="\"true\""]
  1891 -> 12 [style=solid label="\"class\""]
  1891 -> 13 [style=solid label="\"struct\""]
  1891 -> 14 [style=solid label="\"union\""]
  1891 -> 375 [style=solid label="\"noexcept\""]
  1891 -> 17 [style=solid label="\"operator\""]
  1891 -> 669 [style=solid label="\"co_return\""]
  1891 -> 18 [style=solid label="\"const\""]
  1891 -> 19 [style=solid label="\"volatile\""]
  1891 -> 20 [style=solid label="\"friend\""]
  1891 -> 21 [style=solid label="\"typedef\""]
  1891 -> 22 [style=solid label="\"constexpr\""]
  1891 -> 23 [style=solid label="\"consteval\""]
  1891 -> 24 [style=solid label="\"constinit\""]
  1891 -> 263 [style=solid label="\"inline\""]
  1891 -> 26 [style=solid label="\"decltype\""]
  1891 -> 376 [style=solid label="\"delete\""]
  1891 -> 377 [style=solid label="'.'"]
  1891 -> 378 [style=solid label="'2'"]
  1891 -> 379 [style=solid label="'3'"]
  1891 -> 380 [style=solid label="'4'"]
  1891 -> 381 [style=solid label="'5'"]
  1891 -> 382 [style=solid label="'6'"]
  1891 -> 383 [style=solid label="'7'"]
  1891 -> 384 [style=solid label="'8'"]
  1891 -> 385 [style=solid label="'9'"]
  1891 -> 27 [style=solid label="\"enum\""]
  1891 -> 185 [style=solid label="\"u8\""]
  1891 -> 186 [style=solid label="'u'"]
  1891 -> 187 [style=solid label="'U'"]
  1891 -> 188 [style=solid label="'L'"]
  1891 -> 264 [style=solid label="\"extern\""]
  1891 -> 29 [style=solid label="\"explicit\""]
  1891 -> 386 [style=solid label="'*'"]
  1891 -> 670 [style=solid label="\"default\""]
  1891 -> 671 [style=solid label="\"try\""]
  1891 -> 203 [style=solid label="'\"'"]
  1891 -> 387 [style=solid label="\"0x\""]
  1891 -> 388 [style=solid label="\"0X\""]
  1891 -> 672 [style=solid label="\"while\""]
  1891 -> 673 [style=solid label="\"do\""]
  1891 -> 674 [style=solid label="\"for\""]
  1891 -> 675 [style=solid label="\"break\""]
  1891 -> 676 [style=solid label="\"continue\""]
  1891 -> 677 [style=solid label="\"return\""]
  1891 -> 678 [style=solid label="\"goto\""]
  1891 -> 679 [style=solid label="\"case\""]
  1891 -> 680 [style=solid label="\"namespace\""]
  1891 -> 389 [style=solid label="\"requires\""]
  1891 -> 390 [style=solid label="\"new\""]
  1891 -> 391 [style=solid label="'~'"]
  1891 -> 392 [style=solid label="'!'"]
  1891 -> 393 [style=solid label="\"++\""]
  1891 -> 394 [style=solid label="\"--\""]
  1891 -> 395 [style=solid label="\"this\""]
  1891 -> 37 [style=solid label="\"auto\""]
  1891 -> 396 [style=solid label="\"nullptr\""]
  1891 -> 397 [style=solid label="\"dynamic_cast\""]
  1891 -> 398 [style=solid label="\"static_cast\""]
  1891 -> 399 [style=solid label="\"reinterpret_cast\""]
  1891 -> 400 [style=solid label="\"const_cast\""]
  1891 -> 401 [style=solid label="\"typeid\""]
  1891 -> 681 [style=solid label="\"if\""]
  1891 -> 682 [style=solid label="\"switch\""]
  1891 -> 38 [style=solid label="\"char\""]
  1891 -> 39 [style=solid label="\"char8_t\""]
  1891 -> 40 [style=solid label="\"char16_t\""]
  1891 -> 41 [style=solid label="\"char32_t\""]
  1891 -> 42 [style=solid label="\"wchar_t\""]
  1891 -> 43 [style=solid label="\"bool\""]
  1891 -> 44 [style=solid label="\"short\""]
  1891 -> 45 [style=solid label="\"int\""]
  1891 -> 46 [style=solid label="\"long\""]
  1891 -> 47 [style=solid label="\"signed\""]
  1891 -> 48 [style=solid label="\"unsigned\""]
  1891 -> 49 [style=solid label="\"float\""]
  1891 -> 50 [style=solid label="\"double\""]
  1891 -> 51 [style=solid label="\"void\""]
  1891 -> 52 [style=solid label="\"static_assert\""]
  1891 -> 53 [style=solid label="\"static\""]
  1891 -> 54 [style=solid label="\"thread_local\""]
  1891 -> 55 [style=solid label="\"mutable\""]
  1891 -> 209 [style=solid label="'R'"]
  1891 -> 528 [style=solid label="\"throw\""]
  1891 -> 56 [style=solid label="\"typename\""]
  1891 -> 402 [style=solid label="\"sizeof\""]
  1891 -> 403 [style=solid label="\"alignof\""]
  1891 -> 529 [style=solid label="\"co_yield\""]
  1891 -> 404 [style=dashed label="additive-expression"]
  1891 -> 57 [style=dashed label="alias-declaration"]
  1891 -> 58 [style=dashed label="alignment-specifier"]
  1891 -> 405 [style=dashed label="and-expression"]
  1891 -> 59 [style=dashed label="asm-declaration"]
  1891 -> 530 [style=dashed label="assignment-expression"]
  1891 -> 61 [style=dashed label="attribute-specifier"]
  1891 -> 683 [style=dashed label="attribute-specifier-seq"]
  1891 -> 406 [style=dashed label="await-expression"]
  1891 -> 407 [style=dashed label="binary-literal"]
  1891 -> 684 [style=dashed label="block-declaration"]
  1891 -> 408 [style=dashed label="boolean-literal"]
  1891 -> 409 [style=dashed label="cast-expression"]
  1891 -> 410 [style=dashed label="character-literal"]
  1891 -> 64 [style=dashed label="class-head"]
  1891 -> 65 [style=dashed label="class-key"]
  1891 -> 66 [style=dashed label="class-name"]
  1891 -> 67 [style=dashed label="class-specifier"]
  1891 -> 411 [style=dashed label="compare-expression"]
  1891 -> 685 [style=dashed label="compound-statement"]
  1891 -> 68 [style=dashed label="concept-name"]
  1891 -> 531 [style=dashed label="conditional-expression"]
  1891 -> 69 [style=dashed label="conversion-function-id"]
  1891 -> 686 [style=dashed label="coroutine-return-statement"]
  1891 -> 70 [style=dashed label="cv-qualifier"]
  1891 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1891 -> 415 [style=dashed label="decimal-literal"]
  1891 -> 71 [style=dashed label="decl-specifier"]
  1891 -> 687 [style=dashed label="decl-specifier-seq"]
  1891 -> 688 [style=dashed label="declaration-statement"]
  1891 -> 77 [style=dashed label="decltype-specifier"]
  1891 -> 79 [style=dashed label="defining-type-specifier"]
  1891 -> 416 [style=dashed label="delete-expression"]
  1891 -> 417 [style=dashed label="digit"]
  1891 -> 418 [style=dashed label="digit-sequence"]
  1891 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1891 -> 81 [style=dashed label="elaborated-type-specifier"]
  1891 -> 419 [style=dashed label="encoding-prefix"]
  1891 -> 83 [style=dashed label="enum-head"]
  1891 -> 84 [style=dashed label="enum-key"]
  1891 -> 85 [style=dashed label="enum-name"]
  1891 -> 86 [style=dashed label="enum-specifier"]
  1891 -> 420 [style=dashed label="equality-expression"]
  1891 -> 421 [style=dashed label="exclusive-or-expression"]
  1891 -> 269 [style=dashed label="explicit-specifier"]
  1891 -> 689 [style=dashed label="expression"]
  1891 -> 690 [style=dashed label="expression-statement"]
  1891 -> 422 [style=dashed label="floating-point-literal"]
  1891 -> 423 [style=dashed label="fold-expression"]
  1891 -> 424 [style=dashed label="fractional-constant"]
  1891 -> 92 [style=dashed label="function-specifier"]
  1891 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1891 -> 426 [style=dashed label="hexadecimal-literal"]
  1891 -> 427 [style=dashed label="hexadecimal-prefix"]
  1891 -> 428 [style=dashed label="id-expression"]
  1891 -> 429 [style=dashed label="inclusive-or-expression"]
  1891 -> 430 [style=dashed label="integer-literal"]
  1891 -> 691 [style=dashed label="iteration-statement"]
  1891 -> 692 [style=dashed label="jump-statement"]
  1891 -> 693 [style=dashed label="labeled-statement"]
  1891 -> 431 [style=dashed label="lambda-expression"]
  1891 -> 432 [style=dashed label="lambda-introducer"]
  1891 -> 433 [style=dashed label="literal"]
  1891 -> 96 [style=dashed label="literal-operator-id"]
  1891 -> 434 [style=dashed label="logical-and-expression"]
  1891 -> 533 [style=dashed label="logical-or-expression"]
  1891 -> 436 [style=dashed label="multiplicative-expression"]
  1891 -> 100 [style=dashed label="namespace-alias"]
  1891 -> 101 [style=dashed label="namespace-alias-definition"]
  1891 -> 103 [style=dashed label="namespace-name"]
  1891 -> 437 [style=dashed label="nested-name-specifier"]
  1891 -> 438 [style=dashed label="new-expression"]
  1891 -> 439 [style=dashed label="noexcept-expression"]
  1891 -> 440 [style=dashed label="nonzero-digit"]
  1891 -> 441 [style=dashed label="octal-literal"]
  1891 -> 108 [style=dashed label="opaque-enum-declaration"]
  1891 -> 109 [style=dashed label="operator-function-id"]
  1891 -> 110 [style=dashed label="placeholder-type-specifier"]
  1891 -> 442 [style=dashed label="pm-expression"]
  1891 -> 443 [style=dashed label="pointer-literal"]
  1891 -> 444 [style=dashed label="postfix-expression"]
  1891 -> 445 [style=dashed label="primary-expression"]
  1891 -> 113 [style=dashed label="qualified-id"]
  1891 -> 446 [style=dashed label="relational-expression"]
  1891 -> 447 [style=dashed label="requires-expression"]
  1891 -> 694 [style=dashed label="selection-statement"]
  1891 -> 448 [style=dashed label="shift-expression"]
  1891 -> 114 [style=dashed label="simple-declaration"]
  1891 -> 115 [style=dashed label="simple-template-id"]
  1891 -> 449 [style=dashed label="simple-type-specifier"]
  1891 -> 1955 [style=dashed label="statement"]
  1891 -> 117 [style=dashed label="static_assert-declaration"]
  1891 -> 118 [style=dashed label="storage-class-specifier"]
  1891 -> 450 [style=dashed label="string-literal"]
  1891 -> 121 [style=dashed label="template-id"]
  1891 -> 216 [style=dashed label="template-name"]
  1891 -> 535 [style=dashed label="throw-expression"]
  1891 -> 697 [style=dashed label="try-block"]
  1891 -> 124 [style=dashed label="type-constraint"]
  1891 -> 125 [style=dashed label="type-name"]
  1891 -> 126 [style=dashed label="type-specifier"]
  1891 -> 127 [style=dashed label="typedef-name"]
  1891 -> 453 [style=dashed label="typename-specifier"]
  1891 -> 454 [style=dashed label="unary-expression"]
  1891 -> 455 [style=dashed label="unary-operator"]
  1891 -> 130 [style=dashed label="unqualified-id"]
  1891 -> 456 [style=dashed label="user-defined-character-literal"]
  1891 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1891 -> 458 [style=dashed label="user-defined-integer-literal"]
  1891 -> 459 [style=dashed label="user-defined-literal"]
  1891 -> 460 [style=dashed label="user-defined-string-literal"]
  1891 -> 131 [style=dashed label="using-declaration"]
  1891 -> 132 [style=dashed label="using-directive"]
  1891 -> 133 [style=dashed label="using-enum-declaration"]
  1891 -> 537 [style=dashed label="yield-expression"]
  1892 [label="State 1892\n\l964 selection-statement: \"switch\" '(' condition ')' statement •\l"]
  1892 -> "1892R964" [style=solid]
 "1892R964" [label="R964", fillcolor=3, shape=diamond, style=filled]
  1893 [label="State 1893\n\l965 selection-statement: \"switch\" '(' init-statement condition ')' • statement\l"]
  1893 -> 665 [style=solid label="IDENTIFIER"]
  1893 -> 361 [style=solid label="'+'"]
  1893 -> 362 [style=solid label="'-'"]
  1893 -> 2 [style=solid label="\"using\""]
  1893 -> 666 [style=solid label="';'"]
  1893 -> 4 [style=solid label="\"alignas\""]
  1893 -> 363 [style=solid label="'('"]
  1893 -> 364 [style=solid label="'&'"]
  1893 -> 8 [style=solid label="\"asm\""]
  1893 -> 365 [style=solid label="\"::\""]
  1893 -> 667 [style=solid label="'['"]
  1893 -> 367 [style=solid label="\"co_await\""]
  1893 -> 294 [style=solid label="'{'"]
  1893 -> 11 [style=solid label="\"virtual\""]
  1893 -> 368 [style=solid label="'0'"]
  1893 -> 369 [style=solid label="'1'"]
  1893 -> 370 [style=solid label="\"0b\""]
  1893 -> 371 [style=solid label="\"0B\""]
  1893 -> 372 [style=solid label="'\\''"]
  1893 -> 373 [style=solid label="\"false\""]
  1893 -> 374 [style=solid label="\"true\""]
  1893 -> 12 [style=solid label="\"class\""]
  1893 -> 13 [style=solid label="\"struct\""]
  1893 -> 14 [style=solid label="\"union\""]
  1893 -> 375 [style=solid label="\"noexcept\""]
  1893 -> 17 [style=solid label="\"operator\""]
  1893 -> 669 [style=solid label="\"co_return\""]
  1893 -> 18 [style=solid label="\"const\""]
  1893 -> 19 [style=solid label="\"volatile\""]
  1893 -> 20 [style=solid label="\"friend\""]
  1893 -> 21 [style=solid label="\"typedef\""]
  1893 -> 22 [style=solid label="\"constexpr\""]
  1893 -> 23 [style=solid label="\"consteval\""]
  1893 -> 24 [style=solid label="\"constinit\""]
  1893 -> 263 [style=solid label="\"inline\""]
  1893 -> 26 [style=solid label="\"decltype\""]
  1893 -> 376 [style=solid label="\"delete\""]
  1893 -> 377 [style=solid label="'.'"]
  1893 -> 378 [style=solid label="'2'"]
  1893 -> 379 [style=solid label="'3'"]
  1893 -> 380 [style=solid label="'4'"]
  1893 -> 381 [style=solid label="'5'"]
  1893 -> 382 [style=solid label="'6'"]
  1893 -> 383 [style=solid label="'7'"]
  1893 -> 384 [style=solid label="'8'"]
  1893 -> 385 [style=solid label="'9'"]
  1893 -> 27 [style=solid label="\"enum\""]
  1893 -> 185 [style=solid label="\"u8\""]
  1893 -> 186 [style=solid label="'u'"]
  1893 -> 187 [style=solid label="'U'"]
  1893 -> 188 [style=solid label="'L'"]
  1893 -> 264 [style=solid label="\"extern\""]
  1893 -> 29 [style=solid label="\"explicit\""]
  1893 -> 386 [style=solid label="'*'"]
  1893 -> 670 [style=solid label="\"default\""]
  1893 -> 671 [style=solid label="\"try\""]
  1893 -> 203 [style=solid label="'\"'"]
  1893 -> 387 [style=solid label="\"0x\""]
  1893 -> 388 [style=solid label="\"0X\""]
  1893 -> 672 [style=solid label="\"while\""]
  1893 -> 673 [style=solid label="\"do\""]
  1893 -> 674 [style=solid label="\"for\""]
  1893 -> 675 [style=solid label="\"break\""]
  1893 -> 676 [style=solid label="\"continue\""]
  1893 -> 677 [style=solid label="\"return\""]
  1893 -> 678 [style=solid label="\"goto\""]
  1893 -> 679 [style=solid label="\"case\""]
  1893 -> 680 [style=solid label="\"namespace\""]
  1893 -> 389 [style=solid label="\"requires\""]
  1893 -> 390 [style=solid label="\"new\""]
  1893 -> 391 [style=solid label="'~'"]
  1893 -> 392 [style=solid label="'!'"]
  1893 -> 393 [style=solid label="\"++\""]
  1893 -> 394 [style=solid label="\"--\""]
  1893 -> 395 [style=solid label="\"this\""]
  1893 -> 37 [style=solid label="\"auto\""]
  1893 -> 396 [style=solid label="\"nullptr\""]
  1893 -> 397 [style=solid label="\"dynamic_cast\""]
  1893 -> 398 [style=solid label="\"static_cast\""]
  1893 -> 399 [style=solid label="\"reinterpret_cast\""]
  1893 -> 400 [style=solid label="\"const_cast\""]
  1893 -> 401 [style=solid label="\"typeid\""]
  1893 -> 681 [style=solid label="\"if\""]
  1893 -> 682 [style=solid label="\"switch\""]
  1893 -> 38 [style=solid label="\"char\""]
  1893 -> 39 [style=solid label="\"char8_t\""]
  1893 -> 40 [style=solid label="\"char16_t\""]
  1893 -> 41 [style=solid label="\"char32_t\""]
  1893 -> 42 [style=solid label="\"wchar_t\""]
  1893 -> 43 [style=solid label="\"bool\""]
  1893 -> 44 [style=solid label="\"short\""]
  1893 -> 45 [style=solid label="\"int\""]
  1893 -> 46 [style=solid label="\"long\""]
  1893 -> 47 [style=solid label="\"signed\""]
  1893 -> 48 [style=solid label="\"unsigned\""]
  1893 -> 49 [style=solid label="\"float\""]
  1893 -> 50 [style=solid label="\"double\""]
  1893 -> 51 [style=solid label="\"void\""]
  1893 -> 52 [style=solid label="\"static_assert\""]
  1893 -> 53 [style=solid label="\"static\""]
  1893 -> 54 [style=solid label="\"thread_local\""]
  1893 -> 55 [style=solid label="\"mutable\""]
  1893 -> 209 [style=solid label="'R'"]
  1893 -> 528 [style=solid label="\"throw\""]
  1893 -> 56 [style=solid label="\"typename\""]
  1893 -> 402 [style=solid label="\"sizeof\""]
  1893 -> 403 [style=solid label="\"alignof\""]
  1893 -> 529 [style=solid label="\"co_yield\""]
  1893 -> 404 [style=dashed label="additive-expression"]
  1893 -> 57 [style=dashed label="alias-declaration"]
  1893 -> 58 [style=dashed label="alignment-specifier"]
  1893 -> 405 [style=dashed label="and-expression"]
  1893 -> 59 [style=dashed label="asm-declaration"]
  1893 -> 530 [style=dashed label="assignment-expression"]
  1893 -> 61 [style=dashed label="attribute-specifier"]
  1893 -> 683 [style=dashed label="attribute-specifier-seq"]
  1893 -> 406 [style=dashed label="await-expression"]
  1893 -> 407 [style=dashed label="binary-literal"]
  1893 -> 684 [style=dashed label="block-declaration"]
  1893 -> 408 [style=dashed label="boolean-literal"]
  1893 -> 409 [style=dashed label="cast-expression"]
  1893 -> 410 [style=dashed label="character-literal"]
  1893 -> 64 [style=dashed label="class-head"]
  1893 -> 65 [style=dashed label="class-key"]
  1893 -> 66 [style=dashed label="class-name"]
  1893 -> 67 [style=dashed label="class-specifier"]
  1893 -> 411 [style=dashed label="compare-expression"]
  1893 -> 685 [style=dashed label="compound-statement"]
  1893 -> 68 [style=dashed label="concept-name"]
  1893 -> 531 [style=dashed label="conditional-expression"]
  1893 -> 69 [style=dashed label="conversion-function-id"]
  1893 -> 686 [style=dashed label="coroutine-return-statement"]
  1893 -> 70 [style=dashed label="cv-qualifier"]
  1893 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1893 -> 415 [style=dashed label="decimal-literal"]
  1893 -> 71 [style=dashed label="decl-specifier"]
  1893 -> 687 [style=dashed label="decl-specifier-seq"]
  1893 -> 688 [style=dashed label="declaration-statement"]
  1893 -> 77 [style=dashed label="decltype-specifier"]
  1893 -> 79 [style=dashed label="defining-type-specifier"]
  1893 -> 416 [style=dashed label="delete-expression"]
  1893 -> 417 [style=dashed label="digit"]
  1893 -> 418 [style=dashed label="digit-sequence"]
  1893 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1893 -> 81 [style=dashed label="elaborated-type-specifier"]
  1893 -> 419 [style=dashed label="encoding-prefix"]
  1893 -> 83 [style=dashed label="enum-head"]
  1893 -> 84 [style=dashed label="enum-key"]
  1893 -> 85 [style=dashed label="enum-name"]
  1893 -> 86 [style=dashed label="enum-specifier"]
  1893 -> 420 [style=dashed label="equality-expression"]
  1893 -> 421 [style=dashed label="exclusive-or-expression"]
  1893 -> 269 [style=dashed label="explicit-specifier"]
  1893 -> 689 [style=dashed label="expression"]
  1893 -> 690 [style=dashed label="expression-statement"]
  1893 -> 422 [style=dashed label="floating-point-literal"]
  1893 -> 423 [style=dashed label="fold-expression"]
  1893 -> 424 [style=dashed label="fractional-constant"]
  1893 -> 92 [style=dashed label="function-specifier"]
  1893 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1893 -> 426 [style=dashed label="hexadecimal-literal"]
  1893 -> 427 [style=dashed label="hexadecimal-prefix"]
  1893 -> 428 [style=dashed label="id-expression"]
  1893 -> 429 [style=dashed label="inclusive-or-expression"]
  1893 -> 430 [style=dashed label="integer-literal"]
  1893 -> 691 [style=dashed label="iteration-statement"]
  1893 -> 692 [style=dashed label="jump-statement"]
  1893 -> 693 [style=dashed label="labeled-statement"]
  1893 -> 431 [style=dashed label="lambda-expression"]
  1893 -> 432 [style=dashed label="lambda-introducer"]
  1893 -> 433 [style=dashed label="literal"]
  1893 -> 96 [style=dashed label="literal-operator-id"]
  1893 -> 434 [style=dashed label="logical-and-expression"]
  1893 -> 533 [style=dashed label="logical-or-expression"]
  1893 -> 436 [style=dashed label="multiplicative-expression"]
  1893 -> 100 [style=dashed label="namespace-alias"]
  1893 -> 101 [style=dashed label="namespace-alias-definition"]
  1893 -> 103 [style=dashed label="namespace-name"]
  1893 -> 437 [style=dashed label="nested-name-specifier"]
  1893 -> 438 [style=dashed label="new-expression"]
  1893 -> 439 [style=dashed label="noexcept-expression"]
  1893 -> 440 [style=dashed label="nonzero-digit"]
  1893 -> 441 [style=dashed label="octal-literal"]
  1893 -> 108 [style=dashed label="opaque-enum-declaration"]
  1893 -> 109 [style=dashed label="operator-function-id"]
  1893 -> 110 [style=dashed label="placeholder-type-specifier"]
  1893 -> 442 [style=dashed label="pm-expression"]
  1893 -> 443 [style=dashed label="pointer-literal"]
  1893 -> 444 [style=dashed label="postfix-expression"]
  1893 -> 445 [style=dashed label="primary-expression"]
  1893 -> 113 [style=dashed label="qualified-id"]
  1893 -> 446 [style=dashed label="relational-expression"]
  1893 -> 447 [style=dashed label="requires-expression"]
  1893 -> 694 [style=dashed label="selection-statement"]
  1893 -> 448 [style=dashed label="shift-expression"]
  1893 -> 114 [style=dashed label="simple-declaration"]
  1893 -> 115 [style=dashed label="simple-template-id"]
  1893 -> 449 [style=dashed label="simple-type-specifier"]
  1893 -> 1956 [style=dashed label="statement"]
  1893 -> 117 [style=dashed label="static_assert-declaration"]
  1893 -> 118 [style=dashed label="storage-class-specifier"]
  1893 -> 450 [style=dashed label="string-literal"]
  1893 -> 121 [style=dashed label="template-id"]
  1893 -> 216 [style=dashed label="template-name"]
  1893 -> 535 [style=dashed label="throw-expression"]
  1893 -> 697 [style=dashed label="try-block"]
  1893 -> 124 [style=dashed label="type-constraint"]
  1893 -> 125 [style=dashed label="type-name"]
  1893 -> 126 [style=dashed label="type-specifier"]
  1893 -> 127 [style=dashed label="typedef-name"]
  1893 -> 453 [style=dashed label="typename-specifier"]
  1893 -> 454 [style=dashed label="unary-expression"]
  1893 -> 455 [style=dashed label="unary-operator"]
  1893 -> 130 [style=dashed label="unqualified-id"]
  1893 -> 456 [style=dashed label="user-defined-character-literal"]
  1893 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1893 -> 458 [style=dashed label="user-defined-integer-literal"]
  1893 -> 459 [style=dashed label="user-defined-literal"]
  1893 -> 460 [style=dashed label="user-defined-string-literal"]
  1893 -> 131 [style=dashed label="using-declaration"]
  1893 -> 132 [style=dashed label="using-directive"]
  1893 -> 133 [style=dashed label="using-enum-declaration"]
  1893 -> 537 [style=dashed label="yield-expression"]
  1894 [label="State 1894\n\l525 labeled-statement: attribute-specifier-seq \"case\" constant-expression ':' statement •\l"]
  1894 -> "1894R525" [style=solid]
 "1894R525" [label="R525", fillcolor=3, shape=diamond, style=filled]
  1895 [label="State 1895\n\l313 exception-declaration: attribute-specifier-seq type-specifier-seq • declarator\l315                      | attribute-specifier-seq type-specifier-seq •\l317                      | attribute-specifier-seq type-specifier-seq • abstract-declarator\l"]
  1895 -> 148 [style=solid label="IDENTIFIER"]
  1895 -> 973 [style=solid label="'('"]
  1895 -> 974 [style=solid label="\"...\""]
  1895 -> 7 [style=solid label="'&'"]
  1895 -> 9 [style=solid label="\"::\""]
  1895 -> 945 [style=solid label="'['"]
  1895 -> 16 [style=solid label="\"&&\""]
  1895 -> 17 [style=solid label="\"operator\""]
  1895 -> 135 [style=solid label="\"decltype\""]
  1895 -> 32 [style=solid label="'*'"]
  1895 -> 36 [style=solid label="'~'"]
  1895 -> 1957 [style=dashed label="abstract-declarator"]
  1895 -> 947 [style=dashed label="abstract-pack-declarator"]
  1895 -> 66 [style=dashed label="class-name"]
  1895 -> 69 [style=dashed label="conversion-function-id"]
  1895 -> 1958 [style=dashed label="declarator"]
  1895 -> 76 [style=dashed label="declarator-id"]
  1895 -> 139 [style=dashed label="decltype-specifier"]
  1895 -> 85 [style=dashed label="enum-name"]
  1895 -> 94 [style=dashed label="id-expression"]
  1895 -> 96 [style=dashed label="literal-operator-id"]
  1895 -> 100 [style=dashed label="namespace-alias"]
  1895 -> 103 [style=dashed label="namespace-name"]
  1895 -> 149 [style=dashed label="nested-name-specifier"]
  1895 -> 948 [style=dashed label="noptr-abstract-declarator"]
  1895 -> 949 [style=dashed label="noptr-abstract-pack-declarator"]
  1895 -> 107 [style=dashed label="noptr-declarator"]
  1895 -> 109 [style=dashed label="operator-function-id"]
  1895 -> 950 [style=dashed label="parameters-and-qualifiers"]
  1895 -> 951 [style=dashed label="ptr-abstract-declarator"]
  1895 -> 111 [style=dashed label="ptr-declarator"]
  1895 -> 977 [style=dashed label="ptr-operator"]
  1895 -> 113 [style=dashed label="qualified-id"]
  1895 -> 115 [style=dashed label="simple-template-id"]
  1895 -> 121 [style=dashed label="template-id"]
  1895 -> 143 [style=dashed label="template-name"]
  1895 -> 144 [style=dashed label="type-name"]
  1895 -> 127 [style=dashed label="typedef-name"]
  1895 -> 130 [style=dashed label="unqualified-id"]
  1895 -> "1895R315" [style=solid]
 "1895R315" [label="R315", fillcolor=3, shape=diamond, style=filled]
  1896 [label="State 1896\n\l417 handler: \"catch\" '(' exception-declaration ')' • compound-statement\l"]
  1896 -> 294 [style=solid label="'{'"]
  1896 -> 1959 [style=dashed label="compound-statement"]
  1897 [label="State 1897\n\l318 exception-declaration: type-specifier-seq abstract-declarator •\l"]
  1897 -> "1897R318" [style=solid]
 "1897R318" [label="R318", fillcolor=3, shape=diamond, style=filled]
  1898 [label="State 1898\n\l314 exception-declaration: type-specifier-seq declarator •\l"]
  1898 -> "1898R314" [style=solid]
 "1898R314" [label="R314", fillcolor=3, shape=diamond, style=filled]
  1899 [label="State 1899\n\l234 deduction-guide: explicit-specifier template-name '(' parameter-declaration-clause ')' \"->\" simple-template-id • ';'\l"]
  1899 -> 1960 [style=solid label="';'"]
  1900 [label="State 1900\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l849 parameters-and-qualifiers: '(' parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier attribute-specifier-seq •\l"]
  1900 -> 4 [style=solid label="\"alignas\""]
  1900 -> 10 [style=solid label="'['"]
  1900 -> 58 [style=dashed label="alignment-specifier"]
  1900 -> 265 [style=dashed label="attribute-specifier"]
  1900 -> "1900R849d" [label="['[']", style=solid]
 "1900R849d" [label="R849", fillcolor=5, shape=diamond, style=filled]
  1900 -> "1900R849" [style=solid]
 "1900R849" [label="R849", fillcolor=3, shape=diamond, style=filled]
  1901 [label="State 1901\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l847 parameters-and-qualifiers: '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier attribute-specifier-seq •\l"]
  1901 -> 4 [style=solid label="\"alignas\""]
  1901 -> 10 [style=solid label="'['"]
  1901 -> 58 [style=dashed label="alignment-specifier"]
  1901 -> 265 [style=dashed label="attribute-specifier"]
  1901 -> "1901R847d" [label="['[']", style=solid]
 "1901R847d" [label="R847", fillcolor=5, shape=diamond, style=filled]
  1901 -> "1901R847" [style=solid]
 "1901R847" [label="R847", fillcolor=3, shape=diamond, style=filled]
  1902 [label="State 1902\n\l843 parameters-and-qualifiers: '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier •\l851                          | '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier • attribute-specifier-seq\l"]
  1902 -> 4 [style=solid label="\"alignas\""]
  1902 -> 10 [style=solid label="'['"]
  1902 -> 58 [style=dashed label="alignment-specifier"]
  1902 -> 61 [style=dashed label="attribute-specifier"]
  1902 -> 1961 [style=dashed label="attribute-specifier-seq"]
  1902 -> "1902R843d" [label="['[']", style=solid]
 "1902R843d" [label="R843", fillcolor=5, shape=diamond, style=filled]
  1902 -> "1902R843" [style=solid]
 "1902R843" [label="R843", fillcolor=3, shape=diamond, style=filled]
  1903 [label="State 1903\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l850 parameters-and-qualifiers: '(' parameter-declaration-clause ')' ref-qualifier noexcept-specifier attribute-specifier-seq •\l"]
  1903 -> 4 [style=solid label="\"alignas\""]
  1903 -> 10 [style=solid label="'['"]
  1903 -> 58 [style=dashed label="alignment-specifier"]
  1903 -> 265 [style=dashed label="attribute-specifier"]
  1903 -> "1903R850d" [label="['[']", style=solid]
 "1903R850d" [label="R850", fillcolor=5, shape=diamond, style=filled]
  1903 -> "1903R850" [style=solid]
 "1903R850" [label="R850", fillcolor=3, shape=diamond, style=filled]
  1904 [label="State 1904\n\l235 deduction-guide: template-name '(' parameter-declaration-clause ')' \"->\" simple-template-id ';' •\l"]
  1904 -> "1904R235" [style=solid]
 "1904R235" [label="R235", fillcolor=3, shape=diamond, style=filled]
  1905 [label="State 1905\n\l350 fold-expression: '(' cast-expression fold-operator \"...\" fold-operator cast-expression • ')'\l"]
  1905 -> 1962 [style=solid label="')'"]
  1906 [label="State 1906\n\l684 new-expression: \"::\" \"new\" '(' type-id ')' new-initializer •\l"]
  1906 -> "1906R684" [style=solid]
 "1906R684" [label="R684", fillcolor=3, shape=diamond, style=filled]
  1907 [label="State 1907\n\l682 new-expression: \"::\" \"new\" new-placement '(' type-id ')' •\l686               | \"::\" \"new\" new-placement '(' type-id ')' • new-initializer\l"]
  1907 -> 1310 [style=solid label="'('"]
  1907 -> 939 [style=solid label="'{'"]
  1907 -> 1311 [style=dashed label="braced-init-list"]
  1907 -> 1963 [style=dashed label="new-initializer"]
  1907 -> "1907R682d" [label="['{']", style=solid]
 "1907R682d" [label="R682", fillcolor=5, shape=diamond, style=filled]
  1907 -> "1907R682" [style=solid]
 "1907R682" [label="R682", fillcolor=3, shape=diamond, style=filled]
  1908 [label="State 1908\n\l156 compound-requirement: '{' expression '}' ';' •\l"]
  1908 -> "1908R156" [style=solid]
 "1908R156" [label="R156", fillcolor=3, shape=diamond, style=filled]
  1909 [label="State 1909\n\l157 compound-requirement: '{' expression '}' \"noexcept\" • ';'\l159                     | '{' expression '}' \"noexcept\" • return-type-requirement ';'\l"]
  1909 -> 1964 [style=solid label="';'"]
  1909 -> 1910 [style=solid label="\"->\""]
  1909 -> 1965 [style=dashed label="return-type-requirement"]
  1910 [label="State 1910\n\l946 return-type-requirement: \"->\" • type-constraint\l"]
  1910 -> 161 [style=solid label="IDENTIFIER"]
  1910 -> 9 [style=solid label="\"::\""]
  1910 -> 135 [style=solid label="\"decltype\""]
  1910 -> 66 [style=dashed label="class-name"]
  1910 -> 68 [style=dashed label="concept-name"]
  1910 -> 139 [style=dashed label="decltype-specifier"]
  1910 -> 85 [style=dashed label="enum-name"]
  1910 -> 100 [style=dashed label="namespace-alias"]
  1910 -> 103 [style=dashed label="namespace-name"]
  1910 -> 1966 [style=dashed label="nested-name-specifier"]
  1910 -> 142 [style=dashed label="simple-template-id"]
  1910 -> 143 [style=dashed label="template-name"]
  1910 -> 1967 [style=dashed label="type-constraint"]
  1910 -> 144 [style=dashed label="type-name"]
  1910 -> 127 [style=dashed label="typedef-name"]
  1911 [label="State 1911\n\l158 compound-requirement: '{' expression '}' return-type-requirement • ';'\l"]
  1911 -> 1968 [style=solid label="';'"]
  1912 [label="State 1912\n\l1116 type-requirement: \"typename\" nested-name-specifier type-name ';' •\l"]
  1912 -> "1912R1116" [style=solid]
 "1912R1116" [label="R1116", fillcolor=3, shape=diamond, style=filled]
  1913 [label="State 1913\n\l687 new-expression: \"new\" new-placement '(' type-id ')' new-initializer •\l"]
  1913 -> "1913R687" [style=solid]
 "1913R687" [label="R687", fillcolor=3, shape=diamond, style=filled]
  1914 [label="State 1914\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l736 noptr-new-declarator: '[' expression ']' attribute-specifier-seq •\l"]
  1914 -> 4 [style=solid label="\"alignas\""]
  1914 -> 10 [style=solid label="'['"]
  1914 -> 58 [style=dashed label="alignment-specifier"]
  1914 -> 265 [style=dashed label="attribute-specifier"]
  1914 -> "1914R736d" [label="['[']", style=solid]
 "1914R736d" [label="R736", fillcolor=5, shape=diamond, style=filled]
  1914 -> "1914R736" [style=solid]
 "1914R736" [label="R736", fillcolor=3, shape=diamond, style=filled]
  1915 [label="State 1915\n\l737 noptr-new-declarator: noptr-new-declarator '[' constant-expression ']' •\l738                     | noptr-new-declarator '[' constant-expression ']' • attribute-specifier-seq\l"]
  1915 -> 4 [style=solid label="\"alignas\""]
  1915 -> 10 [style=solid label="'['"]
  1915 -> 58 [style=dashed label="alignment-specifier"]
  1915 -> 61 [style=dashed label="attribute-specifier"]
  1915 -> 1969 [style=dashed label="attribute-specifier-seq"]
  1915 -> "1915R737d" [label="['[']", style=solid]
 "1915R737d" [label="R737", fillcolor=5, shape=diamond, style=filled]
  1915 -> "1915R737" [style=solid]
 "1915R737" [label="R737", fillcolor=3, shape=diamond, style=filled]
  1916 [label="State 1916\n\l338 expression: expression • ',' assignment-expression\l877 postfix-expression: \"dynamic_cast\" '<' type-id '>' '(' expression • ')'\l"]
  1916 -> 1970 [style=solid label="')'"]
  1916 -> 1037 [style=solid label="','"]
  1917 [label="State 1917\n\l338 expression: expression • ',' assignment-expression\l878 postfix-expression: \"static_cast\" '<' type-id '>' '(' expression • ')'\l"]
  1917 -> 1971 [style=solid label="')'"]
  1917 -> 1037 [style=solid label="','"]
  1918 [label="State 1918\n\l338 expression: expression • ',' assignment-expression\l879 postfix-expression: \"reinterpret_cast\" '<' type-id '>' '(' expression • ')'\l"]
  1918 -> 1972 [style=solid label="')'"]
  1918 -> 1037 [style=solid label="','"]
  1919 [label="State 1919\n\l338 expression: expression • ',' assignment-expression\l880 postfix-expression: \"const_cast\" '<' type-id '>' '(' expression • ')'\l"]
  1919 -> 1973 [style=solid label="')'"]
  1919 -> 1037 [style=solid label="','"]
  1920 [label="State 1920\n\l534 lambda-declarator: '(' parameter-declaration-clause ')' lambda-specifiers requires-clause •\l"]
  1920 -> "1920R534" [style=solid]
 "1920R534" [label="R534", fillcolor=3, shape=diamond, style=filled]
  1921 [label="State 1921\n\l536 lambda-expression: lambda-introducer '<' template-parameter-list '>' lambda-declarator compound-statement •\l"]
  1921 -> "1921R536" [style=solid]
 "1921R536" [label="R536", fillcolor=3, shape=diamond, style=filled]
  1922 [label="State 1922\n\l537 lambda-expression: lambda-introducer '<' template-parameter-list '>' requires-clause lambda-declarator • compound-statement\l"]
  1922 -> 294 [style=solid label="'{'"]
  1922 -> 1974 [style=dashed label="compound-statement"]
  1923 [label="State 1923\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l716 noptr-abstract-declarator: noptr-abstract-declarator '[' constant-expression ']' attribute-specifier-seq •\l"]
  1923 -> 4 [style=solid label="\"alignas\""]
  1923 -> 10 [style=solid label="'['"]
  1923 -> 58 [style=dashed label="alignment-specifier"]
  1923 -> 265 [style=dashed label="attribute-specifier"]
  1923 -> "1923R716d" [label="['[']", style=solid]
 "1923R716d" [label="R716", fillcolor=5, shape=diamond, style=filled]
  1923 -> "1923R716" [style=solid]
 "1923R716" [label="R716", fillcolor=3, shape=diamond, style=filled]
  1924 [label="State 1924\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l723 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator '[' constant-expression ']' attribute-specifier-seq •\l"]
  1924 -> 4 [style=solid label="\"alignas\""]
  1924 -> 10 [style=solid label="'['"]
  1924 -> 58 [style=dashed label="alignment-specifier"]
  1924 -> 265 [style=dashed label="attribute-specifier"]
  1924 -> "1924R723d" [label="['[']", style=solid]
 "1924R723d" [label="R723", fillcolor=5, shape=diamond, style=filled]
  1924 -> "1924R723" [style=solid]
 "1924R723" [label="R723", fillcolor=3, shape=diamond, style=filled]
  1925 [label="State 1925\n\l828 parameter-declaration: attribute-specifier-seq \"this\" decl-specifier-seq abstract-declarator '=' initializer-clause •\l"]
  1925 -> "1925R828" [style=solid]
 "1925R828" [label="R828", fillcolor=3, shape=diamond, style=filled]
  1926 [label="State 1926\n\l812 parameter-declaration: attribute-specifier-seq \"this\" decl-specifier-seq declarator '=' initializer-clause •\l"]
  1926 -> "1926R812" [style=solid]
 "1926R812" [label="R812", fillcolor=3, shape=diamond, style=filled]
  1927 [label="State 1927\n\l926 raw-string: '\"' '(' r-char-sequence ')' d-char-sequence '\"' •\l"]
  1927 -> "1927R926" [style=solid]
 "1927R926" [label="R926", fillcolor=3, shape=diamond, style=filled]
  1928 [label="State 1928\n\l925 raw-string: '\"' d-char-sequence '(' ')' d-char-sequence '\"' •\l"]
  1928 -> "1928R925" [style=solid]
 "1928R925" [label="R925", fillcolor=3, shape=diamond, style=filled]
  1929 [label="State 1929\n\l923 raw-string: '\"' d-char-sequence '(' r-char-sequence ')' '\"' •\l"]
  1929 -> "1929R923" [style=solid]
 "1929R923" [label="R923", fillcolor=3, shape=diamond, style=filled]
  1930 [label="State 1930\n\l191 d-char-sequence: d-char-sequence • d-char\l927 raw-string: '\"' d-char-sequence '(' r-char-sequence ')' d-char-sequence • '\"'\l"]
  1930 -> 1013 [style=solid label="EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE"]
  1930 -> 1975 [style=solid label="'\"'"]
  1930 -> 1462 [style=dashed label="d-char"]
  1931 [label="State 1931\n\l667 nested-namespace-definition: \"namespace\" enclosing-namespace-specifier \"::\" \"inline\" IDENTIFIER '{' namespace-body '}' •\l"]
  1931 -> "1931R667" [style=solid]
 "1931R667" [label="R667", fillcolor=3, shape=diamond, style=filled]
  1932 [label="State 1932\n\l982 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' identifier-list ']' initializer ';' •\l"]
  1932 -> "1932R982" [style=solid]
 "1932R982" [label="R982", fillcolor=3, shape=diamond, style=filled]
  1933 [label="State 1933\n\l165 condition: attribute-specifier-seq decl-specifier-seq declarator brace-or-equal-initializer •\l"]
  1933 -> "1933R165" [style=solid]
 "1933R165" [label="R165", fillcolor=3, shape=diamond, style=filled]
  1934 [label="State 1934\n\l510 iteration-statement: \"do\" statement \"while\" '(' expression ')' • ';'\l"]
  1934 -> 1976 [style=solid label="';'"]
  1935 [label="State 1935\n\l385 for-range-declaration: attribute-specifier-seq decl-specifier-seq '[' identifier-list • ']'\l466 identifier-list: identifier-list • ',' IDENTIFIER\l980 simple-declaration: attribute-specifier-seq decl-specifier-seq '[' identifier-list • ']' initializer ';'\l"]
  1935 -> 1138 [style=solid label="','"]
  1935 -> 1977 [style=solid label="']'"]
  1936 [label="State 1936\n\l387 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' • identifier-list ']'\l982 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' • identifier-list ']' initializer ';'\l"]
  1936 -> 644 [style=solid label="IDENTIFIER"]
  1936 -> 1978 [style=dashed label="identifier-list"]
  1937 [label="State 1937\n\l386 for-range-declaration: decl-specifier-seq '[' identifier-list ']' •\l981 simple-declaration: decl-specifier-seq '[' identifier-list ']' • initializer ';'\l"]
  1937 -> 1280 [style=solid label="'='"]
  1937 -> 647 [style=solid label="'('"]
  1937 -> 939 [style=solid label="'{'"]
  1937 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1937 -> 650 [style=dashed label="braced-init-list"]
  1937 -> 1525 [style=dashed label="initializer"]
  1937 -> "1937R386" [style=solid]
 "1937R386" [label="R386", fillcolor=3, shape=diamond, style=filled]
  1938 [label="State 1938\n\l388 for-range-declaration: decl-specifier-seq ref-qualifier '[' identifier-list • ']'\l466 identifier-list: identifier-list • ',' IDENTIFIER\l983 simple-declaration: decl-specifier-seq ref-qualifier '[' identifier-list • ']' initializer ';'\l"]
  1938 -> 1138 [style=solid label="','"]
  1938 -> 1979 [style=solid label="']'"]
  1939 [label="State 1939\n\l515 iteration-statement: \"for\" '(' for-range-declaration ':' for-range-initializer ')' • statement\l"]
  1939 -> 665 [style=solid label="IDENTIFIER"]
  1939 -> 361 [style=solid label="'+'"]
  1939 -> 362 [style=solid label="'-'"]
  1939 -> 2 [style=solid label="\"using\""]
  1939 -> 666 [style=solid label="';'"]
  1939 -> 4 [style=solid label="\"alignas\""]
  1939 -> 363 [style=solid label="'('"]
  1939 -> 364 [style=solid label="'&'"]
  1939 -> 8 [style=solid label="\"asm\""]
  1939 -> 365 [style=solid label="\"::\""]
  1939 -> 667 [style=solid label="'['"]
  1939 -> 367 [style=solid label="\"co_await\""]
  1939 -> 294 [style=solid label="'{'"]
  1939 -> 11 [style=solid label="\"virtual\""]
  1939 -> 368 [style=solid label="'0'"]
  1939 -> 369 [style=solid label="'1'"]
  1939 -> 370 [style=solid label="\"0b\""]
  1939 -> 371 [style=solid label="\"0B\""]
  1939 -> 372 [style=solid label="'\\''"]
  1939 -> 373 [style=solid label="\"false\""]
  1939 -> 374 [style=solid label="\"true\""]
  1939 -> 12 [style=solid label="\"class\""]
  1939 -> 13 [style=solid label="\"struct\""]
  1939 -> 14 [style=solid label="\"union\""]
  1939 -> 375 [style=solid label="\"noexcept\""]
  1939 -> 17 [style=solid label="\"operator\""]
  1939 -> 669 [style=solid label="\"co_return\""]
  1939 -> 18 [style=solid label="\"const\""]
  1939 -> 19 [style=solid label="\"volatile\""]
  1939 -> 20 [style=solid label="\"friend\""]
  1939 -> 21 [style=solid label="\"typedef\""]
  1939 -> 22 [style=solid label="\"constexpr\""]
  1939 -> 23 [style=solid label="\"consteval\""]
  1939 -> 24 [style=solid label="\"constinit\""]
  1939 -> 263 [style=solid label="\"inline\""]
  1939 -> 26 [style=solid label="\"decltype\""]
  1939 -> 376 [style=solid label="\"delete\""]
  1939 -> 377 [style=solid label="'.'"]
  1939 -> 378 [style=solid label="'2'"]
  1939 -> 379 [style=solid label="'3'"]
  1939 -> 380 [style=solid label="'4'"]
  1939 -> 381 [style=solid label="'5'"]
  1939 -> 382 [style=solid label="'6'"]
  1939 -> 383 [style=solid label="'7'"]
  1939 -> 384 [style=solid label="'8'"]
  1939 -> 385 [style=solid label="'9'"]
  1939 -> 27 [style=solid label="\"enum\""]
  1939 -> 185 [style=solid label="\"u8\""]
  1939 -> 186 [style=solid label="'u'"]
  1939 -> 187 [style=solid label="'U'"]
  1939 -> 188 [style=solid label="'L'"]
  1939 -> 264 [style=solid label="\"extern\""]
  1939 -> 29 [style=solid label="\"explicit\""]
  1939 -> 386 [style=solid label="'*'"]
  1939 -> 670 [style=solid label="\"default\""]
  1939 -> 671 [style=solid label="\"try\""]
  1939 -> 203 [style=solid label="'\"'"]
  1939 -> 387 [style=solid label="\"0x\""]
  1939 -> 388 [style=solid label="\"0X\""]
  1939 -> 672 [style=solid label="\"while\""]
  1939 -> 673 [style=solid label="\"do\""]
  1939 -> 674 [style=solid label="\"for\""]
  1939 -> 675 [style=solid label="\"break\""]
  1939 -> 676 [style=solid label="\"continue\""]
  1939 -> 677 [style=solid label="\"return\""]
  1939 -> 678 [style=solid label="\"goto\""]
  1939 -> 679 [style=solid label="\"case\""]
  1939 -> 680 [style=solid label="\"namespace\""]
  1939 -> 389 [style=solid label="\"requires\""]
  1939 -> 390 [style=solid label="\"new\""]
  1939 -> 391 [style=solid label="'~'"]
  1939 -> 392 [style=solid label="'!'"]
  1939 -> 393 [style=solid label="\"++\""]
  1939 -> 394 [style=solid label="\"--\""]
  1939 -> 395 [style=solid label="\"this\""]
  1939 -> 37 [style=solid label="\"auto\""]
  1939 -> 396 [style=solid label="\"nullptr\""]
  1939 -> 397 [style=solid label="\"dynamic_cast\""]
  1939 -> 398 [style=solid label="\"static_cast\""]
  1939 -> 399 [style=solid label="\"reinterpret_cast\""]
  1939 -> 400 [style=solid label="\"const_cast\""]
  1939 -> 401 [style=solid label="\"typeid\""]
  1939 -> 681 [style=solid label="\"if\""]
  1939 -> 682 [style=solid label="\"switch\""]
  1939 -> 38 [style=solid label="\"char\""]
  1939 -> 39 [style=solid label="\"char8_t\""]
  1939 -> 40 [style=solid label="\"char16_t\""]
  1939 -> 41 [style=solid label="\"char32_t\""]
  1939 -> 42 [style=solid label="\"wchar_t\""]
  1939 -> 43 [style=solid label="\"bool\""]
  1939 -> 44 [style=solid label="\"short\""]
  1939 -> 45 [style=solid label="\"int\""]
  1939 -> 46 [style=solid label="\"long\""]
  1939 -> 47 [style=solid label="\"signed\""]
  1939 -> 48 [style=solid label="\"unsigned\""]
  1939 -> 49 [style=solid label="\"float\""]
  1939 -> 50 [style=solid label="\"double\""]
  1939 -> 51 [style=solid label="\"void\""]
  1939 -> 52 [style=solid label="\"static_assert\""]
  1939 -> 53 [style=solid label="\"static\""]
  1939 -> 54 [style=solid label="\"thread_local\""]
  1939 -> 55 [style=solid label="\"mutable\""]
  1939 -> 209 [style=solid label="'R'"]
  1939 -> 528 [style=solid label="\"throw\""]
  1939 -> 56 [style=solid label="\"typename\""]
  1939 -> 402 [style=solid label="\"sizeof\""]
  1939 -> 403 [style=solid label="\"alignof\""]
  1939 -> 529 [style=solid label="\"co_yield\""]
  1939 -> 404 [style=dashed label="additive-expression"]
  1939 -> 57 [style=dashed label="alias-declaration"]
  1939 -> 58 [style=dashed label="alignment-specifier"]
  1939 -> 405 [style=dashed label="and-expression"]
  1939 -> 59 [style=dashed label="asm-declaration"]
  1939 -> 530 [style=dashed label="assignment-expression"]
  1939 -> 61 [style=dashed label="attribute-specifier"]
  1939 -> 683 [style=dashed label="attribute-specifier-seq"]
  1939 -> 406 [style=dashed label="await-expression"]
  1939 -> 407 [style=dashed label="binary-literal"]
  1939 -> 684 [style=dashed label="block-declaration"]
  1939 -> 408 [style=dashed label="boolean-literal"]
  1939 -> 409 [style=dashed label="cast-expression"]
  1939 -> 410 [style=dashed label="character-literal"]
  1939 -> 64 [style=dashed label="class-head"]
  1939 -> 65 [style=dashed label="class-key"]
  1939 -> 66 [style=dashed label="class-name"]
  1939 -> 67 [style=dashed label="class-specifier"]
  1939 -> 411 [style=dashed label="compare-expression"]
  1939 -> 685 [style=dashed label="compound-statement"]
  1939 -> 68 [style=dashed label="concept-name"]
  1939 -> 531 [style=dashed label="conditional-expression"]
  1939 -> 69 [style=dashed label="conversion-function-id"]
  1939 -> 686 [style=dashed label="coroutine-return-statement"]
  1939 -> 70 [style=dashed label="cv-qualifier"]
  1939 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1939 -> 415 [style=dashed label="decimal-literal"]
  1939 -> 71 [style=dashed label="decl-specifier"]
  1939 -> 687 [style=dashed label="decl-specifier-seq"]
  1939 -> 688 [style=dashed label="declaration-statement"]
  1939 -> 77 [style=dashed label="decltype-specifier"]
  1939 -> 79 [style=dashed label="defining-type-specifier"]
  1939 -> 416 [style=dashed label="delete-expression"]
  1939 -> 417 [style=dashed label="digit"]
  1939 -> 418 [style=dashed label="digit-sequence"]
  1939 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1939 -> 81 [style=dashed label="elaborated-type-specifier"]
  1939 -> 419 [style=dashed label="encoding-prefix"]
  1939 -> 83 [style=dashed label="enum-head"]
  1939 -> 84 [style=dashed label="enum-key"]
  1939 -> 85 [style=dashed label="enum-name"]
  1939 -> 86 [style=dashed label="enum-specifier"]
  1939 -> 420 [style=dashed label="equality-expression"]
  1939 -> 421 [style=dashed label="exclusive-or-expression"]
  1939 -> 269 [style=dashed label="explicit-specifier"]
  1939 -> 689 [style=dashed label="expression"]
  1939 -> 690 [style=dashed label="expression-statement"]
  1939 -> 422 [style=dashed label="floating-point-literal"]
  1939 -> 423 [style=dashed label="fold-expression"]
  1939 -> 424 [style=dashed label="fractional-constant"]
  1939 -> 92 [style=dashed label="function-specifier"]
  1939 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1939 -> 426 [style=dashed label="hexadecimal-literal"]
  1939 -> 427 [style=dashed label="hexadecimal-prefix"]
  1939 -> 428 [style=dashed label="id-expression"]
  1939 -> 429 [style=dashed label="inclusive-or-expression"]
  1939 -> 430 [style=dashed label="integer-literal"]
  1939 -> 691 [style=dashed label="iteration-statement"]
  1939 -> 692 [style=dashed label="jump-statement"]
  1939 -> 693 [style=dashed label="labeled-statement"]
  1939 -> 431 [style=dashed label="lambda-expression"]
  1939 -> 432 [style=dashed label="lambda-introducer"]
  1939 -> 433 [style=dashed label="literal"]
  1939 -> 96 [style=dashed label="literal-operator-id"]
  1939 -> 434 [style=dashed label="logical-and-expression"]
  1939 -> 533 [style=dashed label="logical-or-expression"]
  1939 -> 436 [style=dashed label="multiplicative-expression"]
  1939 -> 100 [style=dashed label="namespace-alias"]
  1939 -> 101 [style=dashed label="namespace-alias-definition"]
  1939 -> 103 [style=dashed label="namespace-name"]
  1939 -> 437 [style=dashed label="nested-name-specifier"]
  1939 -> 438 [style=dashed label="new-expression"]
  1939 -> 439 [style=dashed label="noexcept-expression"]
  1939 -> 440 [style=dashed label="nonzero-digit"]
  1939 -> 441 [style=dashed label="octal-literal"]
  1939 -> 108 [style=dashed label="opaque-enum-declaration"]
  1939 -> 109 [style=dashed label="operator-function-id"]
  1939 -> 110 [style=dashed label="placeholder-type-specifier"]
  1939 -> 442 [style=dashed label="pm-expression"]
  1939 -> 443 [style=dashed label="pointer-literal"]
  1939 -> 444 [style=dashed label="postfix-expression"]
  1939 -> 445 [style=dashed label="primary-expression"]
  1939 -> 113 [style=dashed label="qualified-id"]
  1939 -> 446 [style=dashed label="relational-expression"]
  1939 -> 447 [style=dashed label="requires-expression"]
  1939 -> 694 [style=dashed label="selection-statement"]
  1939 -> 448 [style=dashed label="shift-expression"]
  1939 -> 114 [style=dashed label="simple-declaration"]
  1939 -> 115 [style=dashed label="simple-template-id"]
  1939 -> 449 [style=dashed label="simple-type-specifier"]
  1939 -> 1980 [style=dashed label="statement"]
  1939 -> 117 [style=dashed label="static_assert-declaration"]
  1939 -> 118 [style=dashed label="storage-class-specifier"]
  1939 -> 450 [style=dashed label="string-literal"]
  1939 -> 121 [style=dashed label="template-id"]
  1939 -> 216 [style=dashed label="template-name"]
  1939 -> 535 [style=dashed label="throw-expression"]
  1939 -> 697 [style=dashed label="try-block"]
  1939 -> 124 [style=dashed label="type-constraint"]
  1939 -> 125 [style=dashed label="type-name"]
  1939 -> 126 [style=dashed label="type-specifier"]
  1939 -> 127 [style=dashed label="typedef-name"]
  1939 -> 453 [style=dashed label="typename-specifier"]
  1939 -> 454 [style=dashed label="unary-expression"]
  1939 -> 455 [style=dashed label="unary-operator"]
  1939 -> 130 [style=dashed label="unqualified-id"]
  1939 -> 456 [style=dashed label="user-defined-character-literal"]
  1939 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1939 -> 458 [style=dashed label="user-defined-integer-literal"]
  1939 -> 459 [style=dashed label="user-defined-literal"]
  1939 -> 460 [style=dashed label="user-defined-string-literal"]
  1939 -> 131 [style=dashed label="using-declaration"]
  1939 -> 132 [style=dashed label="using-directive"]
  1939 -> 133 [style=dashed label="using-enum-declaration"]
  1939 -> 537 [style=dashed label="yield-expression"]
  1940 [label="State 1940\n\l511 iteration-statement: \"for\" '(' init-statement ';' ')' statement •\l"]
  1940 -> "1940R511" [style=solid]
 "1940R511" [label="R511", fillcolor=3, shape=diamond, style=filled]
  1941 [label="State 1941\n\l513 iteration-statement: \"for\" '(' init-statement ';' expression ')' • statement\l"]
  1941 -> 665 [style=solid label="IDENTIFIER"]
  1941 -> 361 [style=solid label="'+'"]
  1941 -> 362 [style=solid label="'-'"]
  1941 -> 2 [style=solid label="\"using\""]
  1941 -> 666 [style=solid label="';'"]
  1941 -> 4 [style=solid label="\"alignas\""]
  1941 -> 363 [style=solid label="'('"]
  1941 -> 364 [style=solid label="'&'"]
  1941 -> 8 [style=solid label="\"asm\""]
  1941 -> 365 [style=solid label="\"::\""]
  1941 -> 667 [style=solid label="'['"]
  1941 -> 367 [style=solid label="\"co_await\""]
  1941 -> 294 [style=solid label="'{'"]
  1941 -> 11 [style=solid label="\"virtual\""]
  1941 -> 368 [style=solid label="'0'"]
  1941 -> 369 [style=solid label="'1'"]
  1941 -> 370 [style=solid label="\"0b\""]
  1941 -> 371 [style=solid label="\"0B\""]
  1941 -> 372 [style=solid label="'\\''"]
  1941 -> 373 [style=solid label="\"false\""]
  1941 -> 374 [style=solid label="\"true\""]
  1941 -> 12 [style=solid label="\"class\""]
  1941 -> 13 [style=solid label="\"struct\""]
  1941 -> 14 [style=solid label="\"union\""]
  1941 -> 375 [style=solid label="\"noexcept\""]
  1941 -> 17 [style=solid label="\"operator\""]
  1941 -> 669 [style=solid label="\"co_return\""]
  1941 -> 18 [style=solid label="\"const\""]
  1941 -> 19 [style=solid label="\"volatile\""]
  1941 -> 20 [style=solid label="\"friend\""]
  1941 -> 21 [style=solid label="\"typedef\""]
  1941 -> 22 [style=solid label="\"constexpr\""]
  1941 -> 23 [style=solid label="\"consteval\""]
  1941 -> 24 [style=solid label="\"constinit\""]
  1941 -> 263 [style=solid label="\"inline\""]
  1941 -> 26 [style=solid label="\"decltype\""]
  1941 -> 376 [style=solid label="\"delete\""]
  1941 -> 377 [style=solid label="'.'"]
  1941 -> 378 [style=solid label="'2'"]
  1941 -> 379 [style=solid label="'3'"]
  1941 -> 380 [style=solid label="'4'"]
  1941 -> 381 [style=solid label="'5'"]
  1941 -> 382 [style=solid label="'6'"]
  1941 -> 383 [style=solid label="'7'"]
  1941 -> 384 [style=solid label="'8'"]
  1941 -> 385 [style=solid label="'9'"]
  1941 -> 27 [style=solid label="\"enum\""]
  1941 -> 185 [style=solid label="\"u8\""]
  1941 -> 186 [style=solid label="'u'"]
  1941 -> 187 [style=solid label="'U'"]
  1941 -> 188 [style=solid label="'L'"]
  1941 -> 264 [style=solid label="\"extern\""]
  1941 -> 29 [style=solid label="\"explicit\""]
  1941 -> 386 [style=solid label="'*'"]
  1941 -> 670 [style=solid label="\"default\""]
  1941 -> 671 [style=solid label="\"try\""]
  1941 -> 203 [style=solid label="'\"'"]
  1941 -> 387 [style=solid label="\"0x\""]
  1941 -> 388 [style=solid label="\"0X\""]
  1941 -> 672 [style=solid label="\"while\""]
  1941 -> 673 [style=solid label="\"do\""]
  1941 -> 674 [style=solid label="\"for\""]
  1941 -> 675 [style=solid label="\"break\""]
  1941 -> 676 [style=solid label="\"continue\""]
  1941 -> 677 [style=solid label="\"return\""]
  1941 -> 678 [style=solid label="\"goto\""]
  1941 -> 679 [style=solid label="\"case\""]
  1941 -> 680 [style=solid label="\"namespace\""]
  1941 -> 389 [style=solid label="\"requires\""]
  1941 -> 390 [style=solid label="\"new\""]
  1941 -> 391 [style=solid label="'~'"]
  1941 -> 392 [style=solid label="'!'"]
  1941 -> 393 [style=solid label="\"++\""]
  1941 -> 394 [style=solid label="\"--\""]
  1941 -> 395 [style=solid label="\"this\""]
  1941 -> 37 [style=solid label="\"auto\""]
  1941 -> 396 [style=solid label="\"nullptr\""]
  1941 -> 397 [style=solid label="\"dynamic_cast\""]
  1941 -> 398 [style=solid label="\"static_cast\""]
  1941 -> 399 [style=solid label="\"reinterpret_cast\""]
  1941 -> 400 [style=solid label="\"const_cast\""]
  1941 -> 401 [style=solid label="\"typeid\""]
  1941 -> 681 [style=solid label="\"if\""]
  1941 -> 682 [style=solid label="\"switch\""]
  1941 -> 38 [style=solid label="\"char\""]
  1941 -> 39 [style=solid label="\"char8_t\""]
  1941 -> 40 [style=solid label="\"char16_t\""]
  1941 -> 41 [style=solid label="\"char32_t\""]
  1941 -> 42 [style=solid label="\"wchar_t\""]
  1941 -> 43 [style=solid label="\"bool\""]
  1941 -> 44 [style=solid label="\"short\""]
  1941 -> 45 [style=solid label="\"int\""]
  1941 -> 46 [style=solid label="\"long\""]
  1941 -> 47 [style=solid label="\"signed\""]
  1941 -> 48 [style=solid label="\"unsigned\""]
  1941 -> 49 [style=solid label="\"float\""]
  1941 -> 50 [style=solid label="\"double\""]
  1941 -> 51 [style=solid label="\"void\""]
  1941 -> 52 [style=solid label="\"static_assert\""]
  1941 -> 53 [style=solid label="\"static\""]
  1941 -> 54 [style=solid label="\"thread_local\""]
  1941 -> 55 [style=solid label="\"mutable\""]
  1941 -> 209 [style=solid label="'R'"]
  1941 -> 528 [style=solid label="\"throw\""]
  1941 -> 56 [style=solid label="\"typename\""]
  1941 -> 402 [style=solid label="\"sizeof\""]
  1941 -> 403 [style=solid label="\"alignof\""]
  1941 -> 529 [style=solid label="\"co_yield\""]
  1941 -> 404 [style=dashed label="additive-expression"]
  1941 -> 57 [style=dashed label="alias-declaration"]
  1941 -> 58 [style=dashed label="alignment-specifier"]
  1941 -> 405 [style=dashed label="and-expression"]
  1941 -> 59 [style=dashed label="asm-declaration"]
  1941 -> 530 [style=dashed label="assignment-expression"]
  1941 -> 61 [style=dashed label="attribute-specifier"]
  1941 -> 683 [style=dashed label="attribute-specifier-seq"]
  1941 -> 406 [style=dashed label="await-expression"]
  1941 -> 407 [style=dashed label="binary-literal"]
  1941 -> 684 [style=dashed label="block-declaration"]
  1941 -> 408 [style=dashed label="boolean-literal"]
  1941 -> 409 [style=dashed label="cast-expression"]
  1941 -> 410 [style=dashed label="character-literal"]
  1941 -> 64 [style=dashed label="class-head"]
  1941 -> 65 [style=dashed label="class-key"]
  1941 -> 66 [style=dashed label="class-name"]
  1941 -> 67 [style=dashed label="class-specifier"]
  1941 -> 411 [style=dashed label="compare-expression"]
  1941 -> 685 [style=dashed label="compound-statement"]
  1941 -> 68 [style=dashed label="concept-name"]
  1941 -> 531 [style=dashed label="conditional-expression"]
  1941 -> 69 [style=dashed label="conversion-function-id"]
  1941 -> 686 [style=dashed label="coroutine-return-statement"]
  1941 -> 70 [style=dashed label="cv-qualifier"]
  1941 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1941 -> 415 [style=dashed label="decimal-literal"]
  1941 -> 71 [style=dashed label="decl-specifier"]
  1941 -> 687 [style=dashed label="decl-specifier-seq"]
  1941 -> 688 [style=dashed label="declaration-statement"]
  1941 -> 77 [style=dashed label="decltype-specifier"]
  1941 -> 79 [style=dashed label="defining-type-specifier"]
  1941 -> 416 [style=dashed label="delete-expression"]
  1941 -> 417 [style=dashed label="digit"]
  1941 -> 418 [style=dashed label="digit-sequence"]
  1941 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1941 -> 81 [style=dashed label="elaborated-type-specifier"]
  1941 -> 419 [style=dashed label="encoding-prefix"]
  1941 -> 83 [style=dashed label="enum-head"]
  1941 -> 84 [style=dashed label="enum-key"]
  1941 -> 85 [style=dashed label="enum-name"]
  1941 -> 86 [style=dashed label="enum-specifier"]
  1941 -> 420 [style=dashed label="equality-expression"]
  1941 -> 421 [style=dashed label="exclusive-or-expression"]
  1941 -> 269 [style=dashed label="explicit-specifier"]
  1941 -> 689 [style=dashed label="expression"]
  1941 -> 690 [style=dashed label="expression-statement"]
  1941 -> 422 [style=dashed label="floating-point-literal"]
  1941 -> 423 [style=dashed label="fold-expression"]
  1941 -> 424 [style=dashed label="fractional-constant"]
  1941 -> 92 [style=dashed label="function-specifier"]
  1941 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1941 -> 426 [style=dashed label="hexadecimal-literal"]
  1941 -> 427 [style=dashed label="hexadecimal-prefix"]
  1941 -> 428 [style=dashed label="id-expression"]
  1941 -> 429 [style=dashed label="inclusive-or-expression"]
  1941 -> 430 [style=dashed label="integer-literal"]
  1941 -> 691 [style=dashed label="iteration-statement"]
  1941 -> 692 [style=dashed label="jump-statement"]
  1941 -> 693 [style=dashed label="labeled-statement"]
  1941 -> 431 [style=dashed label="lambda-expression"]
  1941 -> 432 [style=dashed label="lambda-introducer"]
  1941 -> 433 [style=dashed label="literal"]
  1941 -> 96 [style=dashed label="literal-operator-id"]
  1941 -> 434 [style=dashed label="logical-and-expression"]
  1941 -> 533 [style=dashed label="logical-or-expression"]
  1941 -> 436 [style=dashed label="multiplicative-expression"]
  1941 -> 100 [style=dashed label="namespace-alias"]
  1941 -> 101 [style=dashed label="namespace-alias-definition"]
  1941 -> 103 [style=dashed label="namespace-name"]
  1941 -> 437 [style=dashed label="nested-name-specifier"]
  1941 -> 438 [style=dashed label="new-expression"]
  1941 -> 439 [style=dashed label="noexcept-expression"]
  1941 -> 440 [style=dashed label="nonzero-digit"]
  1941 -> 441 [style=dashed label="octal-literal"]
  1941 -> 108 [style=dashed label="opaque-enum-declaration"]
  1941 -> 109 [style=dashed label="operator-function-id"]
  1941 -> 110 [style=dashed label="placeholder-type-specifier"]
  1941 -> 442 [style=dashed label="pm-expression"]
  1941 -> 443 [style=dashed label="pointer-literal"]
  1941 -> 444 [style=dashed label="postfix-expression"]
  1941 -> 445 [style=dashed label="primary-expression"]
  1941 -> 113 [style=dashed label="qualified-id"]
  1941 -> 446 [style=dashed label="relational-expression"]
  1941 -> 447 [style=dashed label="requires-expression"]
  1941 -> 694 [style=dashed label="selection-statement"]
  1941 -> 448 [style=dashed label="shift-expression"]
  1941 -> 114 [style=dashed label="simple-declaration"]
  1941 -> 115 [style=dashed label="simple-template-id"]
  1941 -> 449 [style=dashed label="simple-type-specifier"]
  1941 -> 1981 [style=dashed label="statement"]
  1941 -> 117 [style=dashed label="static_assert-declaration"]
  1941 -> 118 [style=dashed label="storage-class-specifier"]
  1941 -> 450 [style=dashed label="string-literal"]
  1941 -> 121 [style=dashed label="template-id"]
  1941 -> 216 [style=dashed label="template-name"]
  1941 -> 535 [style=dashed label="throw-expression"]
  1941 -> 697 [style=dashed label="try-block"]
  1941 -> 124 [style=dashed label="type-constraint"]
  1941 -> 125 [style=dashed label="type-name"]
  1941 -> 126 [style=dashed label="type-specifier"]
  1941 -> 127 [style=dashed label="typedef-name"]
  1941 -> 453 [style=dashed label="typename-specifier"]
  1941 -> 454 [style=dashed label="unary-expression"]
  1941 -> 455 [style=dashed label="unary-operator"]
  1941 -> 130 [style=dashed label="unqualified-id"]
  1941 -> 456 [style=dashed label="user-defined-character-literal"]
  1941 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1941 -> 458 [style=dashed label="user-defined-integer-literal"]
  1941 -> 459 [style=dashed label="user-defined-literal"]
  1941 -> 460 [style=dashed label="user-defined-string-literal"]
  1941 -> 131 [style=dashed label="using-declaration"]
  1941 -> 132 [style=dashed label="using-directive"]
  1941 -> 133 [style=dashed label="using-enum-declaration"]
  1941 -> 537 [style=dashed label="yield-expression"]
  1942 [label="State 1942\n\l385 for-range-declaration: attribute-specifier-seq decl-specifier-seq '[' • identifier-list ']'\l"]
  1942 -> 644 [style=solid label="IDENTIFIER"]
  1942 -> 1982 [style=dashed label="identifier-list"]
  1943 [label="State 1943\n\l165 condition: attribute-specifier-seq decl-specifier-seq declarator • brace-or-equal-initializer\l383 for-range-declaration: attribute-specifier-seq decl-specifier-seq declarator •\l"]
  1943 -> 1280 [style=solid label="'='"]
  1943 -> 939 [style=solid label="'{'"]
  1943 -> 1933 [style=dashed label="brace-or-equal-initializer"]
  1943 -> 650 [style=dashed label="braced-init-list"]
  1943 -> "1943R383" [style=solid]
 "1943R383" [label="R383", fillcolor=3, shape=diamond, style=filled]
  1944 [label="State 1944\n\l387 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier • '[' identifier-list ']'\l"]
  1944 -> 1983 [style=solid label="'['"]
  1945 [label="State 1945\n\l512 iteration-statement: \"for\" '(' init-statement condition ';' ')' • statement\l"]
  1945 -> 665 [style=solid label="IDENTIFIER"]
  1945 -> 361 [style=solid label="'+'"]
  1945 -> 362 [style=solid label="'-'"]
  1945 -> 2 [style=solid label="\"using\""]
  1945 -> 666 [style=solid label="';'"]
  1945 -> 4 [style=solid label="\"alignas\""]
  1945 -> 363 [style=solid label="'('"]
  1945 -> 364 [style=solid label="'&'"]
  1945 -> 8 [style=solid label="\"asm\""]
  1945 -> 365 [style=solid label="\"::\""]
  1945 -> 667 [style=solid label="'['"]
  1945 -> 367 [style=solid label="\"co_await\""]
  1945 -> 294 [style=solid label="'{'"]
  1945 -> 11 [style=solid label="\"virtual\""]
  1945 -> 368 [style=solid label="'0'"]
  1945 -> 369 [style=solid label="'1'"]
  1945 -> 370 [style=solid label="\"0b\""]
  1945 -> 371 [style=solid label="\"0B\""]
  1945 -> 372 [style=solid label="'\\''"]
  1945 -> 373 [style=solid label="\"false\""]
  1945 -> 374 [style=solid label="\"true\""]
  1945 -> 12 [style=solid label="\"class\""]
  1945 -> 13 [style=solid label="\"struct\""]
  1945 -> 14 [style=solid label="\"union\""]
  1945 -> 375 [style=solid label="\"noexcept\""]
  1945 -> 17 [style=solid label="\"operator\""]
  1945 -> 669 [style=solid label="\"co_return\""]
  1945 -> 18 [style=solid label="\"const\""]
  1945 -> 19 [style=solid label="\"volatile\""]
  1945 -> 20 [style=solid label="\"friend\""]
  1945 -> 21 [style=solid label="\"typedef\""]
  1945 -> 22 [style=solid label="\"constexpr\""]
  1945 -> 23 [style=solid label="\"consteval\""]
  1945 -> 24 [style=solid label="\"constinit\""]
  1945 -> 263 [style=solid label="\"inline\""]
  1945 -> 26 [style=solid label="\"decltype\""]
  1945 -> 376 [style=solid label="\"delete\""]
  1945 -> 377 [style=solid label="'.'"]
  1945 -> 378 [style=solid label="'2'"]
  1945 -> 379 [style=solid label="'3'"]
  1945 -> 380 [style=solid label="'4'"]
  1945 -> 381 [style=solid label="'5'"]
  1945 -> 382 [style=solid label="'6'"]
  1945 -> 383 [style=solid label="'7'"]
  1945 -> 384 [style=solid label="'8'"]
  1945 -> 385 [style=solid label="'9'"]
  1945 -> 27 [style=solid label="\"enum\""]
  1945 -> 185 [style=solid label="\"u8\""]
  1945 -> 186 [style=solid label="'u'"]
  1945 -> 187 [style=solid label="'U'"]
  1945 -> 188 [style=solid label="'L'"]
  1945 -> 264 [style=solid label="\"extern\""]
  1945 -> 29 [style=solid label="\"explicit\""]
  1945 -> 386 [style=solid label="'*'"]
  1945 -> 670 [style=solid label="\"default\""]
  1945 -> 671 [style=solid label="\"try\""]
  1945 -> 203 [style=solid label="'\"'"]
  1945 -> 387 [style=solid label="\"0x\""]
  1945 -> 388 [style=solid label="\"0X\""]
  1945 -> 672 [style=solid label="\"while\""]
  1945 -> 673 [style=solid label="\"do\""]
  1945 -> 674 [style=solid label="\"for\""]
  1945 -> 675 [style=solid label="\"break\""]
  1945 -> 676 [style=solid label="\"continue\""]
  1945 -> 677 [style=solid label="\"return\""]
  1945 -> 678 [style=solid label="\"goto\""]
  1945 -> 679 [style=solid label="\"case\""]
  1945 -> 680 [style=solid label="\"namespace\""]
  1945 -> 389 [style=solid label="\"requires\""]
  1945 -> 390 [style=solid label="\"new\""]
  1945 -> 391 [style=solid label="'~'"]
  1945 -> 392 [style=solid label="'!'"]
  1945 -> 393 [style=solid label="\"++\""]
  1945 -> 394 [style=solid label="\"--\""]
  1945 -> 395 [style=solid label="\"this\""]
  1945 -> 37 [style=solid label="\"auto\""]
  1945 -> 396 [style=solid label="\"nullptr\""]
  1945 -> 397 [style=solid label="\"dynamic_cast\""]
  1945 -> 398 [style=solid label="\"static_cast\""]
  1945 -> 399 [style=solid label="\"reinterpret_cast\""]
  1945 -> 400 [style=solid label="\"const_cast\""]
  1945 -> 401 [style=solid label="\"typeid\""]
  1945 -> 681 [style=solid label="\"if\""]
  1945 -> 682 [style=solid label="\"switch\""]
  1945 -> 38 [style=solid label="\"char\""]
  1945 -> 39 [style=solid label="\"char8_t\""]
  1945 -> 40 [style=solid label="\"char16_t\""]
  1945 -> 41 [style=solid label="\"char32_t\""]
  1945 -> 42 [style=solid label="\"wchar_t\""]
  1945 -> 43 [style=solid label="\"bool\""]
  1945 -> 44 [style=solid label="\"short\""]
  1945 -> 45 [style=solid label="\"int\""]
  1945 -> 46 [style=solid label="\"long\""]
  1945 -> 47 [style=solid label="\"signed\""]
  1945 -> 48 [style=solid label="\"unsigned\""]
  1945 -> 49 [style=solid label="\"float\""]
  1945 -> 50 [style=solid label="\"double\""]
  1945 -> 51 [style=solid label="\"void\""]
  1945 -> 52 [style=solid label="\"static_assert\""]
  1945 -> 53 [style=solid label="\"static\""]
  1945 -> 54 [style=solid label="\"thread_local\""]
  1945 -> 55 [style=solid label="\"mutable\""]
  1945 -> 209 [style=solid label="'R'"]
  1945 -> 528 [style=solid label="\"throw\""]
  1945 -> 56 [style=solid label="\"typename\""]
  1945 -> 402 [style=solid label="\"sizeof\""]
  1945 -> 403 [style=solid label="\"alignof\""]
  1945 -> 529 [style=solid label="\"co_yield\""]
  1945 -> 404 [style=dashed label="additive-expression"]
  1945 -> 57 [style=dashed label="alias-declaration"]
  1945 -> 58 [style=dashed label="alignment-specifier"]
  1945 -> 405 [style=dashed label="and-expression"]
  1945 -> 59 [style=dashed label="asm-declaration"]
  1945 -> 530 [style=dashed label="assignment-expression"]
  1945 -> 61 [style=dashed label="attribute-specifier"]
  1945 -> 683 [style=dashed label="attribute-specifier-seq"]
  1945 -> 406 [style=dashed label="await-expression"]
  1945 -> 407 [style=dashed label="binary-literal"]
  1945 -> 684 [style=dashed label="block-declaration"]
  1945 -> 408 [style=dashed label="boolean-literal"]
  1945 -> 409 [style=dashed label="cast-expression"]
  1945 -> 410 [style=dashed label="character-literal"]
  1945 -> 64 [style=dashed label="class-head"]
  1945 -> 65 [style=dashed label="class-key"]
  1945 -> 66 [style=dashed label="class-name"]
  1945 -> 67 [style=dashed label="class-specifier"]
  1945 -> 411 [style=dashed label="compare-expression"]
  1945 -> 685 [style=dashed label="compound-statement"]
  1945 -> 68 [style=dashed label="concept-name"]
  1945 -> 531 [style=dashed label="conditional-expression"]
  1945 -> 69 [style=dashed label="conversion-function-id"]
  1945 -> 686 [style=dashed label="coroutine-return-statement"]
  1945 -> 70 [style=dashed label="cv-qualifier"]
  1945 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1945 -> 415 [style=dashed label="decimal-literal"]
  1945 -> 71 [style=dashed label="decl-specifier"]
  1945 -> 687 [style=dashed label="decl-specifier-seq"]
  1945 -> 688 [style=dashed label="declaration-statement"]
  1945 -> 77 [style=dashed label="decltype-specifier"]
  1945 -> 79 [style=dashed label="defining-type-specifier"]
  1945 -> 416 [style=dashed label="delete-expression"]
  1945 -> 417 [style=dashed label="digit"]
  1945 -> 418 [style=dashed label="digit-sequence"]
  1945 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1945 -> 81 [style=dashed label="elaborated-type-specifier"]
  1945 -> 419 [style=dashed label="encoding-prefix"]
  1945 -> 83 [style=dashed label="enum-head"]
  1945 -> 84 [style=dashed label="enum-key"]
  1945 -> 85 [style=dashed label="enum-name"]
  1945 -> 86 [style=dashed label="enum-specifier"]
  1945 -> 420 [style=dashed label="equality-expression"]
  1945 -> 421 [style=dashed label="exclusive-or-expression"]
  1945 -> 269 [style=dashed label="explicit-specifier"]
  1945 -> 689 [style=dashed label="expression"]
  1945 -> 690 [style=dashed label="expression-statement"]
  1945 -> 422 [style=dashed label="floating-point-literal"]
  1945 -> 423 [style=dashed label="fold-expression"]
  1945 -> 424 [style=dashed label="fractional-constant"]
  1945 -> 92 [style=dashed label="function-specifier"]
  1945 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1945 -> 426 [style=dashed label="hexadecimal-literal"]
  1945 -> 427 [style=dashed label="hexadecimal-prefix"]
  1945 -> 428 [style=dashed label="id-expression"]
  1945 -> 429 [style=dashed label="inclusive-or-expression"]
  1945 -> 430 [style=dashed label="integer-literal"]
  1945 -> 691 [style=dashed label="iteration-statement"]
  1945 -> 692 [style=dashed label="jump-statement"]
  1945 -> 693 [style=dashed label="labeled-statement"]
  1945 -> 431 [style=dashed label="lambda-expression"]
  1945 -> 432 [style=dashed label="lambda-introducer"]
  1945 -> 433 [style=dashed label="literal"]
  1945 -> 96 [style=dashed label="literal-operator-id"]
  1945 -> 434 [style=dashed label="logical-and-expression"]
  1945 -> 533 [style=dashed label="logical-or-expression"]
  1945 -> 436 [style=dashed label="multiplicative-expression"]
  1945 -> 100 [style=dashed label="namespace-alias"]
  1945 -> 101 [style=dashed label="namespace-alias-definition"]
  1945 -> 103 [style=dashed label="namespace-name"]
  1945 -> 437 [style=dashed label="nested-name-specifier"]
  1945 -> 438 [style=dashed label="new-expression"]
  1945 -> 439 [style=dashed label="noexcept-expression"]
  1945 -> 440 [style=dashed label="nonzero-digit"]
  1945 -> 441 [style=dashed label="octal-literal"]
  1945 -> 108 [style=dashed label="opaque-enum-declaration"]
  1945 -> 109 [style=dashed label="operator-function-id"]
  1945 -> 110 [style=dashed label="placeholder-type-specifier"]
  1945 -> 442 [style=dashed label="pm-expression"]
  1945 -> 443 [style=dashed label="pointer-literal"]
  1945 -> 444 [style=dashed label="postfix-expression"]
  1945 -> 445 [style=dashed label="primary-expression"]
  1945 -> 113 [style=dashed label="qualified-id"]
  1945 -> 446 [style=dashed label="relational-expression"]
  1945 -> 447 [style=dashed label="requires-expression"]
  1945 -> 694 [style=dashed label="selection-statement"]
  1945 -> 448 [style=dashed label="shift-expression"]
  1945 -> 114 [style=dashed label="simple-declaration"]
  1945 -> 115 [style=dashed label="simple-template-id"]
  1945 -> 449 [style=dashed label="simple-type-specifier"]
  1945 -> 1984 [style=dashed label="statement"]
  1945 -> 117 [style=dashed label="static_assert-declaration"]
  1945 -> 118 [style=dashed label="storage-class-specifier"]
  1945 -> 450 [style=dashed label="string-literal"]
  1945 -> 121 [style=dashed label="template-id"]
  1945 -> 216 [style=dashed label="template-name"]
  1945 -> 535 [style=dashed label="throw-expression"]
  1945 -> 697 [style=dashed label="try-block"]
  1945 -> 124 [style=dashed label="type-constraint"]
  1945 -> 125 [style=dashed label="type-name"]
  1945 -> 126 [style=dashed label="type-specifier"]
  1945 -> 127 [style=dashed label="typedef-name"]
  1945 -> 453 [style=dashed label="typename-specifier"]
  1945 -> 454 [style=dashed label="unary-expression"]
  1945 -> 455 [style=dashed label="unary-operator"]
  1945 -> 130 [style=dashed label="unqualified-id"]
  1945 -> 456 [style=dashed label="user-defined-character-literal"]
  1945 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1945 -> 458 [style=dashed label="user-defined-integer-literal"]
  1945 -> 459 [style=dashed label="user-defined-literal"]
  1945 -> 460 [style=dashed label="user-defined-string-literal"]
  1945 -> 131 [style=dashed label="using-declaration"]
  1945 -> 132 [style=dashed label="using-directive"]
  1945 -> 133 [style=dashed label="using-enum-declaration"]
  1945 -> 537 [style=dashed label="yield-expression"]
  1946 [label="State 1946\n\l338 expression: expression • ',' assignment-expression\l514 iteration-statement: \"for\" '(' init-statement condition ';' expression • ')' statement\l"]
  1946 -> 1985 [style=solid label="')'"]
  1946 -> 1037 [style=solid label="','"]
  1947 [label="State 1947\n\l386 for-range-declaration: decl-specifier-seq '[' identifier-list • ']'\l466 identifier-list: identifier-list • ',' IDENTIFIER\l"]
  1947 -> 1138 [style=solid label="','"]
  1947 -> 1986 [style=solid label="']'"]
  1948 [label="State 1948\n\l388 for-range-declaration: decl-specifier-seq ref-qualifier '[' • identifier-list ']'\l"]
  1948 -> 644 [style=solid label="IDENTIFIER"]
  1948 -> 1987 [style=dashed label="identifier-list"]
  1949 [label="State 1949\n\l516 iteration-statement: \"for\" '(' init-statement for-range-declaration ':' for-range-initializer • ')' statement\l"]
  1949 -> 1988 [style=solid label="')'"]
  1950 [label="State 1950\n\l165 condition: attribute-specifier-seq decl-specifier-seq declarator brace-or-equal-initializer •\l481 initializer: brace-or-equal-initializer •\l"]
  1950 -> "1950R165" [label="[')']", style=solid]
 "1950R165" [label="R165", fillcolor=3, shape=diamond, style=filled]
  1950 -> "1950R481" [style=solid]
 "1950R481" [label="R481", fillcolor=3, shape=diamond, style=filled]
  1951 [label="State 1951\n\l956 selection-statement: \"if\" '(' condition ')' statement \"else\" • statement\l"]
  1951 -> 665 [style=solid label="IDENTIFIER"]
  1951 -> 361 [style=solid label="'+'"]
  1951 -> 362 [style=solid label="'-'"]
  1951 -> 2 [style=solid label="\"using\""]
  1951 -> 666 [style=solid label="';'"]
  1951 -> 4 [style=solid label="\"alignas\""]
  1951 -> 363 [style=solid label="'('"]
  1951 -> 364 [style=solid label="'&'"]
  1951 -> 8 [style=solid label="\"asm\""]
  1951 -> 365 [style=solid label="\"::\""]
  1951 -> 667 [style=solid label="'['"]
  1951 -> 367 [style=solid label="\"co_await\""]
  1951 -> 294 [style=solid label="'{'"]
  1951 -> 11 [style=solid label="\"virtual\""]
  1951 -> 368 [style=solid label="'0'"]
  1951 -> 369 [style=solid label="'1'"]
  1951 -> 370 [style=solid label="\"0b\""]
  1951 -> 371 [style=solid label="\"0B\""]
  1951 -> 372 [style=solid label="'\\''"]
  1951 -> 373 [style=solid label="\"false\""]
  1951 -> 374 [style=solid label="\"true\""]
  1951 -> 12 [style=solid label="\"class\""]
  1951 -> 13 [style=solid label="\"struct\""]
  1951 -> 14 [style=solid label="\"union\""]
  1951 -> 375 [style=solid label="\"noexcept\""]
  1951 -> 17 [style=solid label="\"operator\""]
  1951 -> 669 [style=solid label="\"co_return\""]
  1951 -> 18 [style=solid label="\"const\""]
  1951 -> 19 [style=solid label="\"volatile\""]
  1951 -> 20 [style=solid label="\"friend\""]
  1951 -> 21 [style=solid label="\"typedef\""]
  1951 -> 22 [style=solid label="\"constexpr\""]
  1951 -> 23 [style=solid label="\"consteval\""]
  1951 -> 24 [style=solid label="\"constinit\""]
  1951 -> 263 [style=solid label="\"inline\""]
  1951 -> 26 [style=solid label="\"decltype\""]
  1951 -> 376 [style=solid label="\"delete\""]
  1951 -> 377 [style=solid label="'.'"]
  1951 -> 378 [style=solid label="'2'"]
  1951 -> 379 [style=solid label="'3'"]
  1951 -> 380 [style=solid label="'4'"]
  1951 -> 381 [style=solid label="'5'"]
  1951 -> 382 [style=solid label="'6'"]
  1951 -> 383 [style=solid label="'7'"]
  1951 -> 384 [style=solid label="'8'"]
  1951 -> 385 [style=solid label="'9'"]
  1951 -> 27 [style=solid label="\"enum\""]
  1951 -> 185 [style=solid label="\"u8\""]
  1951 -> 186 [style=solid label="'u'"]
  1951 -> 187 [style=solid label="'U'"]
  1951 -> 188 [style=solid label="'L'"]
  1951 -> 264 [style=solid label="\"extern\""]
  1951 -> 29 [style=solid label="\"explicit\""]
  1951 -> 386 [style=solid label="'*'"]
  1951 -> 670 [style=solid label="\"default\""]
  1951 -> 671 [style=solid label="\"try\""]
  1951 -> 203 [style=solid label="'\"'"]
  1951 -> 387 [style=solid label="\"0x\""]
  1951 -> 388 [style=solid label="\"0X\""]
  1951 -> 672 [style=solid label="\"while\""]
  1951 -> 673 [style=solid label="\"do\""]
  1951 -> 674 [style=solid label="\"for\""]
  1951 -> 675 [style=solid label="\"break\""]
  1951 -> 676 [style=solid label="\"continue\""]
  1951 -> 677 [style=solid label="\"return\""]
  1951 -> 678 [style=solid label="\"goto\""]
  1951 -> 679 [style=solid label="\"case\""]
  1951 -> 680 [style=solid label="\"namespace\""]
  1951 -> 389 [style=solid label="\"requires\""]
  1951 -> 390 [style=solid label="\"new\""]
  1951 -> 391 [style=solid label="'~'"]
  1951 -> 392 [style=solid label="'!'"]
  1951 -> 393 [style=solid label="\"++\""]
  1951 -> 394 [style=solid label="\"--\""]
  1951 -> 395 [style=solid label="\"this\""]
  1951 -> 37 [style=solid label="\"auto\""]
  1951 -> 396 [style=solid label="\"nullptr\""]
  1951 -> 397 [style=solid label="\"dynamic_cast\""]
  1951 -> 398 [style=solid label="\"static_cast\""]
  1951 -> 399 [style=solid label="\"reinterpret_cast\""]
  1951 -> 400 [style=solid label="\"const_cast\""]
  1951 -> 401 [style=solid label="\"typeid\""]
  1951 -> 681 [style=solid label="\"if\""]
  1951 -> 682 [style=solid label="\"switch\""]
  1951 -> 38 [style=solid label="\"char\""]
  1951 -> 39 [style=solid label="\"char8_t\""]
  1951 -> 40 [style=solid label="\"char16_t\""]
  1951 -> 41 [style=solid label="\"char32_t\""]
  1951 -> 42 [style=solid label="\"wchar_t\""]
  1951 -> 43 [style=solid label="\"bool\""]
  1951 -> 44 [style=solid label="\"short\""]
  1951 -> 45 [style=solid label="\"int\""]
  1951 -> 46 [style=solid label="\"long\""]
  1951 -> 47 [style=solid label="\"signed\""]
  1951 -> 48 [style=solid label="\"unsigned\""]
  1951 -> 49 [style=solid label="\"float\""]
  1951 -> 50 [style=solid label="\"double\""]
  1951 -> 51 [style=solid label="\"void\""]
  1951 -> 52 [style=solid label="\"static_assert\""]
  1951 -> 53 [style=solid label="\"static\""]
  1951 -> 54 [style=solid label="\"thread_local\""]
  1951 -> 55 [style=solid label="\"mutable\""]
  1951 -> 209 [style=solid label="'R'"]
  1951 -> 528 [style=solid label="\"throw\""]
  1951 -> 56 [style=solid label="\"typename\""]
  1951 -> 402 [style=solid label="\"sizeof\""]
  1951 -> 403 [style=solid label="\"alignof\""]
  1951 -> 529 [style=solid label="\"co_yield\""]
  1951 -> 404 [style=dashed label="additive-expression"]
  1951 -> 57 [style=dashed label="alias-declaration"]
  1951 -> 58 [style=dashed label="alignment-specifier"]
  1951 -> 405 [style=dashed label="and-expression"]
  1951 -> 59 [style=dashed label="asm-declaration"]
  1951 -> 530 [style=dashed label="assignment-expression"]
  1951 -> 61 [style=dashed label="attribute-specifier"]
  1951 -> 683 [style=dashed label="attribute-specifier-seq"]
  1951 -> 406 [style=dashed label="await-expression"]
  1951 -> 407 [style=dashed label="binary-literal"]
  1951 -> 684 [style=dashed label="block-declaration"]
  1951 -> 408 [style=dashed label="boolean-literal"]
  1951 -> 409 [style=dashed label="cast-expression"]
  1951 -> 410 [style=dashed label="character-literal"]
  1951 -> 64 [style=dashed label="class-head"]
  1951 -> 65 [style=dashed label="class-key"]
  1951 -> 66 [style=dashed label="class-name"]
  1951 -> 67 [style=dashed label="class-specifier"]
  1951 -> 411 [style=dashed label="compare-expression"]
  1951 -> 685 [style=dashed label="compound-statement"]
  1951 -> 68 [style=dashed label="concept-name"]
  1951 -> 531 [style=dashed label="conditional-expression"]
  1951 -> 69 [style=dashed label="conversion-function-id"]
  1951 -> 686 [style=dashed label="coroutine-return-statement"]
  1951 -> 70 [style=dashed label="cv-qualifier"]
  1951 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1951 -> 415 [style=dashed label="decimal-literal"]
  1951 -> 71 [style=dashed label="decl-specifier"]
  1951 -> 687 [style=dashed label="decl-specifier-seq"]
  1951 -> 688 [style=dashed label="declaration-statement"]
  1951 -> 77 [style=dashed label="decltype-specifier"]
  1951 -> 79 [style=dashed label="defining-type-specifier"]
  1951 -> 416 [style=dashed label="delete-expression"]
  1951 -> 417 [style=dashed label="digit"]
  1951 -> 418 [style=dashed label="digit-sequence"]
  1951 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1951 -> 81 [style=dashed label="elaborated-type-specifier"]
  1951 -> 419 [style=dashed label="encoding-prefix"]
  1951 -> 83 [style=dashed label="enum-head"]
  1951 -> 84 [style=dashed label="enum-key"]
  1951 -> 85 [style=dashed label="enum-name"]
  1951 -> 86 [style=dashed label="enum-specifier"]
  1951 -> 420 [style=dashed label="equality-expression"]
  1951 -> 421 [style=dashed label="exclusive-or-expression"]
  1951 -> 269 [style=dashed label="explicit-specifier"]
  1951 -> 689 [style=dashed label="expression"]
  1951 -> 690 [style=dashed label="expression-statement"]
  1951 -> 422 [style=dashed label="floating-point-literal"]
  1951 -> 423 [style=dashed label="fold-expression"]
  1951 -> 424 [style=dashed label="fractional-constant"]
  1951 -> 92 [style=dashed label="function-specifier"]
  1951 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1951 -> 426 [style=dashed label="hexadecimal-literal"]
  1951 -> 427 [style=dashed label="hexadecimal-prefix"]
  1951 -> 428 [style=dashed label="id-expression"]
  1951 -> 429 [style=dashed label="inclusive-or-expression"]
  1951 -> 430 [style=dashed label="integer-literal"]
  1951 -> 691 [style=dashed label="iteration-statement"]
  1951 -> 692 [style=dashed label="jump-statement"]
  1951 -> 693 [style=dashed label="labeled-statement"]
  1951 -> 431 [style=dashed label="lambda-expression"]
  1951 -> 432 [style=dashed label="lambda-introducer"]
  1951 -> 433 [style=dashed label="literal"]
  1951 -> 96 [style=dashed label="literal-operator-id"]
  1951 -> 434 [style=dashed label="logical-and-expression"]
  1951 -> 533 [style=dashed label="logical-or-expression"]
  1951 -> 436 [style=dashed label="multiplicative-expression"]
  1951 -> 100 [style=dashed label="namespace-alias"]
  1951 -> 101 [style=dashed label="namespace-alias-definition"]
  1951 -> 103 [style=dashed label="namespace-name"]
  1951 -> 437 [style=dashed label="nested-name-specifier"]
  1951 -> 438 [style=dashed label="new-expression"]
  1951 -> 439 [style=dashed label="noexcept-expression"]
  1951 -> 440 [style=dashed label="nonzero-digit"]
  1951 -> 441 [style=dashed label="octal-literal"]
  1951 -> 108 [style=dashed label="opaque-enum-declaration"]
  1951 -> 109 [style=dashed label="operator-function-id"]
  1951 -> 110 [style=dashed label="placeholder-type-specifier"]
  1951 -> 442 [style=dashed label="pm-expression"]
  1951 -> 443 [style=dashed label="pointer-literal"]
  1951 -> 444 [style=dashed label="postfix-expression"]
  1951 -> 445 [style=dashed label="primary-expression"]
  1951 -> 113 [style=dashed label="qualified-id"]
  1951 -> 446 [style=dashed label="relational-expression"]
  1951 -> 447 [style=dashed label="requires-expression"]
  1951 -> 694 [style=dashed label="selection-statement"]
  1951 -> 448 [style=dashed label="shift-expression"]
  1951 -> 114 [style=dashed label="simple-declaration"]
  1951 -> 115 [style=dashed label="simple-template-id"]
  1951 -> 449 [style=dashed label="simple-type-specifier"]
  1951 -> 1989 [style=dashed label="statement"]
  1951 -> 117 [style=dashed label="static_assert-declaration"]
  1951 -> 118 [style=dashed label="storage-class-specifier"]
  1951 -> 450 [style=dashed label="string-literal"]
  1951 -> 121 [style=dashed label="template-id"]
  1951 -> 216 [style=dashed label="template-name"]
  1951 -> 535 [style=dashed label="throw-expression"]
  1951 -> 697 [style=dashed label="try-block"]
  1951 -> 124 [style=dashed label="type-constraint"]
  1951 -> 125 [style=dashed label="type-name"]
  1951 -> 126 [style=dashed label="type-specifier"]
  1951 -> 127 [style=dashed label="typedef-name"]
  1951 -> 453 [style=dashed label="typename-specifier"]
  1951 -> 454 [style=dashed label="unary-expression"]
  1951 -> 455 [style=dashed label="unary-operator"]
  1951 -> 130 [style=dashed label="unqualified-id"]
  1951 -> 456 [style=dashed label="user-defined-character-literal"]
  1951 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1951 -> 458 [style=dashed label="user-defined-integer-literal"]
  1951 -> 459 [style=dashed label="user-defined-literal"]
  1951 -> 460 [style=dashed label="user-defined-string-literal"]
  1951 -> 131 [style=dashed label="using-declaration"]
  1951 -> 132 [style=dashed label="using-directive"]
  1951 -> 133 [style=dashed label="using-enum-declaration"]
  1951 -> 537 [style=dashed label="yield-expression"]
  1952 [label="State 1952\n\l954 selection-statement: \"if\" '(' init-statement condition ')' statement •\l958                    | \"if\" '(' init-statement condition ')' statement • \"else\" statement\l"]
  1952 -> 1990 [style=solid label="\"else\""]
  1952 -> "1952R954d" [label="[\"else\"]", style=solid]
 "1952R954d" [label="R954", fillcolor=5, shape=diamond, style=filled]
  1952 -> "1952R954" [style=solid]
 "1952R954" [label="R954", fillcolor=3, shape=diamond, style=filled]
  1953 [label="State 1953\n\l953 selection-statement: \"if\" \"constexpr\" '(' condition ')' statement •\l957                    | \"if\" \"constexpr\" '(' condition ')' statement • \"else\" statement\l"]
  1953 -> 1991 [style=solid label="\"else\""]
  1953 -> "1953R953d" [label="[\"else\"]", style=solid]
 "1953R953d" [label="R953", fillcolor=5, shape=diamond, style=filled]
  1953 -> "1953R953" [style=solid]
 "1953R953" [label="R953", fillcolor=3, shape=diamond, style=filled]
  1954 [label="State 1954\n\l955 selection-statement: \"if\" \"constexpr\" '(' init-statement condition ')' • statement\l959                    | \"if\" \"constexpr\" '(' init-statement condition ')' • statement \"else\" statement\l"]
  1954 -> 665 [style=solid label="IDENTIFIER"]
  1954 -> 361 [style=solid label="'+'"]
  1954 -> 362 [style=solid label="'-'"]
  1954 -> 2 [style=solid label="\"using\""]
  1954 -> 666 [style=solid label="';'"]
  1954 -> 4 [style=solid label="\"alignas\""]
  1954 -> 363 [style=solid label="'('"]
  1954 -> 364 [style=solid label="'&'"]
  1954 -> 8 [style=solid label="\"asm\""]
  1954 -> 365 [style=solid label="\"::\""]
  1954 -> 667 [style=solid label="'['"]
  1954 -> 367 [style=solid label="\"co_await\""]
  1954 -> 294 [style=solid label="'{'"]
  1954 -> 11 [style=solid label="\"virtual\""]
  1954 -> 368 [style=solid label="'0'"]
  1954 -> 369 [style=solid label="'1'"]
  1954 -> 370 [style=solid label="\"0b\""]
  1954 -> 371 [style=solid label="\"0B\""]
  1954 -> 372 [style=solid label="'\\''"]
  1954 -> 373 [style=solid label="\"false\""]
  1954 -> 374 [style=solid label="\"true\""]
  1954 -> 12 [style=solid label="\"class\""]
  1954 -> 13 [style=solid label="\"struct\""]
  1954 -> 14 [style=solid label="\"union\""]
  1954 -> 375 [style=solid label="\"noexcept\""]
  1954 -> 17 [style=solid label="\"operator\""]
  1954 -> 669 [style=solid label="\"co_return\""]
  1954 -> 18 [style=solid label="\"const\""]
  1954 -> 19 [style=solid label="\"volatile\""]
  1954 -> 20 [style=solid label="\"friend\""]
  1954 -> 21 [style=solid label="\"typedef\""]
  1954 -> 22 [style=solid label="\"constexpr\""]
  1954 -> 23 [style=solid label="\"consteval\""]
  1954 -> 24 [style=solid label="\"constinit\""]
  1954 -> 263 [style=solid label="\"inline\""]
  1954 -> 26 [style=solid label="\"decltype\""]
  1954 -> 376 [style=solid label="\"delete\""]
  1954 -> 377 [style=solid label="'.'"]
  1954 -> 378 [style=solid label="'2'"]
  1954 -> 379 [style=solid label="'3'"]
  1954 -> 380 [style=solid label="'4'"]
  1954 -> 381 [style=solid label="'5'"]
  1954 -> 382 [style=solid label="'6'"]
  1954 -> 383 [style=solid label="'7'"]
  1954 -> 384 [style=solid label="'8'"]
  1954 -> 385 [style=solid label="'9'"]
  1954 -> 27 [style=solid label="\"enum\""]
  1954 -> 185 [style=solid label="\"u8\""]
  1954 -> 186 [style=solid label="'u'"]
  1954 -> 187 [style=solid label="'U'"]
  1954 -> 188 [style=solid label="'L'"]
  1954 -> 264 [style=solid label="\"extern\""]
  1954 -> 29 [style=solid label="\"explicit\""]
  1954 -> 386 [style=solid label="'*'"]
  1954 -> 670 [style=solid label="\"default\""]
  1954 -> 671 [style=solid label="\"try\""]
  1954 -> 203 [style=solid label="'\"'"]
  1954 -> 387 [style=solid label="\"0x\""]
  1954 -> 388 [style=solid label="\"0X\""]
  1954 -> 672 [style=solid label="\"while\""]
  1954 -> 673 [style=solid label="\"do\""]
  1954 -> 674 [style=solid label="\"for\""]
  1954 -> 675 [style=solid label="\"break\""]
  1954 -> 676 [style=solid label="\"continue\""]
  1954 -> 677 [style=solid label="\"return\""]
  1954 -> 678 [style=solid label="\"goto\""]
  1954 -> 679 [style=solid label="\"case\""]
  1954 -> 680 [style=solid label="\"namespace\""]
  1954 -> 389 [style=solid label="\"requires\""]
  1954 -> 390 [style=solid label="\"new\""]
  1954 -> 391 [style=solid label="'~'"]
  1954 -> 392 [style=solid label="'!'"]
  1954 -> 393 [style=solid label="\"++\""]
  1954 -> 394 [style=solid label="\"--\""]
  1954 -> 395 [style=solid label="\"this\""]
  1954 -> 37 [style=solid label="\"auto\""]
  1954 -> 396 [style=solid label="\"nullptr\""]
  1954 -> 397 [style=solid label="\"dynamic_cast\""]
  1954 -> 398 [style=solid label="\"static_cast\""]
  1954 -> 399 [style=solid label="\"reinterpret_cast\""]
  1954 -> 400 [style=solid label="\"const_cast\""]
  1954 -> 401 [style=solid label="\"typeid\""]
  1954 -> 681 [style=solid label="\"if\""]
  1954 -> 682 [style=solid label="\"switch\""]
  1954 -> 38 [style=solid label="\"char\""]
  1954 -> 39 [style=solid label="\"char8_t\""]
  1954 -> 40 [style=solid label="\"char16_t\""]
  1954 -> 41 [style=solid label="\"char32_t\""]
  1954 -> 42 [style=solid label="\"wchar_t\""]
  1954 -> 43 [style=solid label="\"bool\""]
  1954 -> 44 [style=solid label="\"short\""]
  1954 -> 45 [style=solid label="\"int\""]
  1954 -> 46 [style=solid label="\"long\""]
  1954 -> 47 [style=solid label="\"signed\""]
  1954 -> 48 [style=solid label="\"unsigned\""]
  1954 -> 49 [style=solid label="\"float\""]
  1954 -> 50 [style=solid label="\"double\""]
  1954 -> 51 [style=solid label="\"void\""]
  1954 -> 52 [style=solid label="\"static_assert\""]
  1954 -> 53 [style=solid label="\"static\""]
  1954 -> 54 [style=solid label="\"thread_local\""]
  1954 -> 55 [style=solid label="\"mutable\""]
  1954 -> 209 [style=solid label="'R'"]
  1954 -> 528 [style=solid label="\"throw\""]
  1954 -> 56 [style=solid label="\"typename\""]
  1954 -> 402 [style=solid label="\"sizeof\""]
  1954 -> 403 [style=solid label="\"alignof\""]
  1954 -> 529 [style=solid label="\"co_yield\""]
  1954 -> 404 [style=dashed label="additive-expression"]
  1954 -> 57 [style=dashed label="alias-declaration"]
  1954 -> 58 [style=dashed label="alignment-specifier"]
  1954 -> 405 [style=dashed label="and-expression"]
  1954 -> 59 [style=dashed label="asm-declaration"]
  1954 -> 530 [style=dashed label="assignment-expression"]
  1954 -> 61 [style=dashed label="attribute-specifier"]
  1954 -> 683 [style=dashed label="attribute-specifier-seq"]
  1954 -> 406 [style=dashed label="await-expression"]
  1954 -> 407 [style=dashed label="binary-literal"]
  1954 -> 684 [style=dashed label="block-declaration"]
  1954 -> 408 [style=dashed label="boolean-literal"]
  1954 -> 409 [style=dashed label="cast-expression"]
  1954 -> 410 [style=dashed label="character-literal"]
  1954 -> 64 [style=dashed label="class-head"]
  1954 -> 65 [style=dashed label="class-key"]
  1954 -> 66 [style=dashed label="class-name"]
  1954 -> 67 [style=dashed label="class-specifier"]
  1954 -> 411 [style=dashed label="compare-expression"]
  1954 -> 685 [style=dashed label="compound-statement"]
  1954 -> 68 [style=dashed label="concept-name"]
  1954 -> 531 [style=dashed label="conditional-expression"]
  1954 -> 69 [style=dashed label="conversion-function-id"]
  1954 -> 686 [style=dashed label="coroutine-return-statement"]
  1954 -> 70 [style=dashed label="cv-qualifier"]
  1954 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1954 -> 415 [style=dashed label="decimal-literal"]
  1954 -> 71 [style=dashed label="decl-specifier"]
  1954 -> 687 [style=dashed label="decl-specifier-seq"]
  1954 -> 688 [style=dashed label="declaration-statement"]
  1954 -> 77 [style=dashed label="decltype-specifier"]
  1954 -> 79 [style=dashed label="defining-type-specifier"]
  1954 -> 416 [style=dashed label="delete-expression"]
  1954 -> 417 [style=dashed label="digit"]
  1954 -> 418 [style=dashed label="digit-sequence"]
  1954 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1954 -> 81 [style=dashed label="elaborated-type-specifier"]
  1954 -> 419 [style=dashed label="encoding-prefix"]
  1954 -> 83 [style=dashed label="enum-head"]
  1954 -> 84 [style=dashed label="enum-key"]
  1954 -> 85 [style=dashed label="enum-name"]
  1954 -> 86 [style=dashed label="enum-specifier"]
  1954 -> 420 [style=dashed label="equality-expression"]
  1954 -> 421 [style=dashed label="exclusive-or-expression"]
  1954 -> 269 [style=dashed label="explicit-specifier"]
  1954 -> 689 [style=dashed label="expression"]
  1954 -> 690 [style=dashed label="expression-statement"]
  1954 -> 422 [style=dashed label="floating-point-literal"]
  1954 -> 423 [style=dashed label="fold-expression"]
  1954 -> 424 [style=dashed label="fractional-constant"]
  1954 -> 92 [style=dashed label="function-specifier"]
  1954 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1954 -> 426 [style=dashed label="hexadecimal-literal"]
  1954 -> 427 [style=dashed label="hexadecimal-prefix"]
  1954 -> 428 [style=dashed label="id-expression"]
  1954 -> 429 [style=dashed label="inclusive-or-expression"]
  1954 -> 430 [style=dashed label="integer-literal"]
  1954 -> 691 [style=dashed label="iteration-statement"]
  1954 -> 692 [style=dashed label="jump-statement"]
  1954 -> 693 [style=dashed label="labeled-statement"]
  1954 -> 431 [style=dashed label="lambda-expression"]
  1954 -> 432 [style=dashed label="lambda-introducer"]
  1954 -> 433 [style=dashed label="literal"]
  1954 -> 96 [style=dashed label="literal-operator-id"]
  1954 -> 434 [style=dashed label="logical-and-expression"]
  1954 -> 533 [style=dashed label="logical-or-expression"]
  1954 -> 436 [style=dashed label="multiplicative-expression"]
  1954 -> 100 [style=dashed label="namespace-alias"]
  1954 -> 101 [style=dashed label="namespace-alias-definition"]
  1954 -> 103 [style=dashed label="namespace-name"]
  1954 -> 437 [style=dashed label="nested-name-specifier"]
  1954 -> 438 [style=dashed label="new-expression"]
  1954 -> 439 [style=dashed label="noexcept-expression"]
  1954 -> 440 [style=dashed label="nonzero-digit"]
  1954 -> 441 [style=dashed label="octal-literal"]
  1954 -> 108 [style=dashed label="opaque-enum-declaration"]
  1954 -> 109 [style=dashed label="operator-function-id"]
  1954 -> 110 [style=dashed label="placeholder-type-specifier"]
  1954 -> 442 [style=dashed label="pm-expression"]
  1954 -> 443 [style=dashed label="pointer-literal"]
  1954 -> 444 [style=dashed label="postfix-expression"]
  1954 -> 445 [style=dashed label="primary-expression"]
  1954 -> 113 [style=dashed label="qualified-id"]
  1954 -> 446 [style=dashed label="relational-expression"]
  1954 -> 447 [style=dashed label="requires-expression"]
  1954 -> 694 [style=dashed label="selection-statement"]
  1954 -> 448 [style=dashed label="shift-expression"]
  1954 -> 114 [style=dashed label="simple-declaration"]
  1954 -> 115 [style=dashed label="simple-template-id"]
  1954 -> 449 [style=dashed label="simple-type-specifier"]
  1954 -> 1992 [style=dashed label="statement"]
  1954 -> 117 [style=dashed label="static_assert-declaration"]
  1954 -> 118 [style=dashed label="storage-class-specifier"]
  1954 -> 450 [style=dashed label="string-literal"]
  1954 -> 121 [style=dashed label="template-id"]
  1954 -> 216 [style=dashed label="template-name"]
  1954 -> 535 [style=dashed label="throw-expression"]
  1954 -> 697 [style=dashed label="try-block"]
  1954 -> 124 [style=dashed label="type-constraint"]
  1954 -> 125 [style=dashed label="type-name"]
  1954 -> 126 [style=dashed label="type-specifier"]
  1954 -> 127 [style=dashed label="typedef-name"]
  1954 -> 453 [style=dashed label="typename-specifier"]
  1954 -> 454 [style=dashed label="unary-expression"]
  1954 -> 455 [style=dashed label="unary-operator"]
  1954 -> 130 [style=dashed label="unqualified-id"]
  1954 -> 456 [style=dashed label="user-defined-character-literal"]
  1954 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1954 -> 458 [style=dashed label="user-defined-integer-literal"]
  1954 -> 459 [style=dashed label="user-defined-literal"]
  1954 -> 460 [style=dashed label="user-defined-string-literal"]
  1954 -> 131 [style=dashed label="using-declaration"]
  1954 -> 132 [style=dashed label="using-directive"]
  1954 -> 133 [style=dashed label="using-enum-declaration"]
  1954 -> 537 [style=dashed label="yield-expression"]
  1955 [label="State 1955\n\l963 selection-statement: \"if\" '!' \"consteval\" compound-statement \"else\" statement •\l"]
  1955 -> "1955R963" [style=solid]
 "1955R963" [label="R963", fillcolor=3, shape=diamond, style=filled]
  1956 [label="State 1956\n\l965 selection-statement: \"switch\" '(' init-statement condition ')' statement •\l"]
  1956 -> "1956R965" [style=solid]
 "1956R965" [label="R965", fillcolor=3, shape=diamond, style=filled]
  1957 [label="State 1957\n\l317 exception-declaration: attribute-specifier-seq type-specifier-seq abstract-declarator •\l"]
  1957 -> "1957R317" [style=solid]
 "1957R317" [label="R317", fillcolor=3, shape=diamond, style=filled]
  1958 [label="State 1958\n\l313 exception-declaration: attribute-specifier-seq type-specifier-seq declarator •\l"]
  1958 -> "1958R313" [style=solid]
 "1958R313" [label="R313", fillcolor=3, shape=diamond, style=filled]
  1959 [label="State 1959\n\l417 handler: \"catch\" '(' exception-declaration ')' compound-statement •\l"]
  1959 -> "1959R417" [style=solid]
 "1959R417" [label="R417", fillcolor=3, shape=diamond, style=filled]
  1960 [label="State 1960\n\l234 deduction-guide: explicit-specifier template-name '(' parameter-declaration-clause ')' \"->\" simple-template-id ';' •\l"]
  1960 -> "1960R234" [style=solid]
 "1960R234" [label="R234", fillcolor=3, shape=diamond, style=filled]
  1961 [label="State 1961\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l851 parameters-and-qualifiers: '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq •\l"]
  1961 -> 4 [style=solid label="\"alignas\""]
  1961 -> 10 [style=solid label="'['"]
  1961 -> 58 [style=dashed label="alignment-specifier"]
  1961 -> 265 [style=dashed label="attribute-specifier"]
  1961 -> "1961R851d" [label="['[']", style=solid]
 "1961R851d" [label="R851", fillcolor=5, shape=diamond, style=filled]
  1961 -> "1961R851" [style=solid]
 "1961R851" [label="R851", fillcolor=3, shape=diamond, style=filled]
  1962 [label="State 1962\n\l350 fold-expression: '(' cast-expression fold-operator \"...\" fold-operator cast-expression ')' •\l"]
  1962 -> "1962R350" [style=solid]
 "1962R350" [label="R350", fillcolor=3, shape=diamond, style=filled]
  1963 [label="State 1963\n\l686 new-expression: \"::\" \"new\" new-placement '(' type-id ')' new-initializer •\l"]
  1963 -> "1963R686" [style=solid]
 "1963R686" [label="R686", fillcolor=3, shape=diamond, style=filled]
  1964 [label="State 1964\n\l157 compound-requirement: '{' expression '}' \"noexcept\" ';' •\l"]
  1964 -> "1964R157" [style=solid]
 "1964R157" [label="R157", fillcolor=3, shape=diamond, style=filled]
  1965 [label="State 1965\n\l159 compound-requirement: '{' expression '}' \"noexcept\" return-type-requirement • ';'\l"]
  1965 -> 1993 [style=solid label="';'"]
  1966 [label="State 1966\n\l663 nested-name-specifier: nested-name-specifier • IDENTIFIER \"::\"\l664                      | nested-name-specifier • simple-template-id \"::\"\l665                      | nested-name-specifier • \"template\" simple-template-id \"::\"\l1084 type-constraint: nested-name-specifier • concept-name\l1086                | nested-name-specifier • concept-name '<' '>'\l1088                | nested-name-specifier • concept-name '<' template-argument-list '>'\l"]
  1966 -> 1994 [style=solid label="IDENTIFIER"]
  1966 -> 355 [style=solid label="\"template\""]
  1966 -> 328 [style=dashed label="concept-name"]
  1966 -> 539 [style=dashed label="simple-template-id"]
  1966 -> 143 [style=dashed label="template-name"]
  1967 [label="State 1967\n\l946 return-type-requirement: \"->\" type-constraint •\l"]
  1967 -> "1967R946" [style=solid]
 "1967R946" [label="R946", fillcolor=3, shape=diamond, style=filled]
  1968 [label="State 1968\n\l158 compound-requirement: '{' expression '}' return-type-requirement ';' •\l"]
  1968 -> "1968R158" [style=solid]
 "1968R158" [label="R158", fillcolor=3, shape=diamond, style=filled]
  1969 [label="State 1969\n\l 53 attribute-specifier-seq: attribute-specifier-seq • attribute-specifier\l738 noptr-new-declarator: noptr-new-declarator '[' constant-expression ']' attribute-specifier-seq •\l"]
  1969 -> 4 [style=solid label="\"alignas\""]
  1969 -> 10 [style=solid label="'['"]
  1969 -> 58 [style=dashed label="alignment-specifier"]
  1969 -> 265 [style=dashed label="attribute-specifier"]
  1969 -> "1969R738d" [label="['[']", style=solid]
 "1969R738d" [label="R738", fillcolor=5, shape=diamond, style=filled]
  1969 -> "1969R738" [style=solid]
 "1969R738" [label="R738", fillcolor=3, shape=diamond, style=filled]
  1970 [label="State 1970\n\l877 postfix-expression: \"dynamic_cast\" '<' type-id '>' '(' expression ')' •\l"]
  1970 -> "1970R877" [style=solid]
 "1970R877" [label="R877", fillcolor=3, shape=diamond, style=filled]
  1971 [label="State 1971\n\l878 postfix-expression: \"static_cast\" '<' type-id '>' '(' expression ')' •\l"]
  1971 -> "1971R878" [style=solid]
 "1971R878" [label="R878", fillcolor=3, shape=diamond, style=filled]
  1972 [label="State 1972\n\l879 postfix-expression: \"reinterpret_cast\" '<' type-id '>' '(' expression ')' •\l"]
  1972 -> "1972R879" [style=solid]
 "1972R879" [label="R879", fillcolor=3, shape=diamond, style=filled]
  1973 [label="State 1973\n\l880 postfix-expression: \"const_cast\" '<' type-id '>' '(' expression ')' •\l"]
  1973 -> "1973R880" [style=solid]
 "1973R880" [label="R880", fillcolor=3, shape=diamond, style=filled]
  1974 [label="State 1974\n\l537 lambda-expression: lambda-introducer '<' template-parameter-list '>' requires-clause lambda-declarator compound-statement •\l"]
  1974 -> "1974R537" [style=solid]
 "1974R537" [label="R537", fillcolor=3, shape=diamond, style=filled]
  1975 [label="State 1975\n\l927 raw-string: '\"' d-char-sequence '(' r-char-sequence ')' d-char-sequence '\"' •\l"]
  1975 -> "1975R927" [style=solid]
 "1975R927" [label="R927", fillcolor=3, shape=diamond, style=filled]
  1976 [label="State 1976\n\l510 iteration-statement: \"do\" statement \"while\" '(' expression ')' ';' •\l"]
  1976 -> "1976R510" [style=solid]
 "1976R510" [label="R510", fillcolor=3, shape=diamond, style=filled]
  1977 [label="State 1977\n\l385 for-range-declaration: attribute-specifier-seq decl-specifier-seq '[' identifier-list ']' •\l980 simple-declaration: attribute-specifier-seq decl-specifier-seq '[' identifier-list ']' • initializer ';'\l"]
  1977 -> 1280 [style=solid label="'='"]
  1977 -> 647 [style=solid label="'('"]
  1977 -> 939 [style=solid label="'{'"]
  1977 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1977 -> 650 [style=dashed label="braced-init-list"]
  1977 -> 1725 [style=dashed label="initializer"]
  1977 -> "1977R385" [style=solid]
 "1977R385" [label="R385", fillcolor=3, shape=diamond, style=filled]
  1978 [label="State 1978\n\l387 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' identifier-list • ']'\l466 identifier-list: identifier-list • ',' IDENTIFIER\l982 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' identifier-list • ']' initializer ';'\l"]
  1978 -> 1138 [style=solid label="','"]
  1978 -> 1995 [style=solid label="']'"]
  1979 [label="State 1979\n\l388 for-range-declaration: decl-specifier-seq ref-qualifier '[' identifier-list ']' •\l983 simple-declaration: decl-specifier-seq ref-qualifier '[' identifier-list ']' • initializer ';'\l"]
  1979 -> 1280 [style=solid label="'='"]
  1979 -> 647 [style=solid label="'('"]
  1979 -> 939 [style=solid label="'{'"]
  1979 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1979 -> 650 [style=dashed label="braced-init-list"]
  1979 -> 1748 [style=dashed label="initializer"]
  1979 -> "1979R388" [style=solid]
 "1979R388" [label="R388", fillcolor=3, shape=diamond, style=filled]
  1980 [label="State 1980\n\l515 iteration-statement: \"for\" '(' for-range-declaration ':' for-range-initializer ')' statement •\l"]
  1980 -> "1980R515" [style=solid]
 "1980R515" [label="R515", fillcolor=3, shape=diamond, style=filled]
  1981 [label="State 1981\n\l513 iteration-statement: \"for\" '(' init-statement ';' expression ')' statement •\l"]
  1981 -> "1981R513" [style=solid]
 "1981R513" [label="R513", fillcolor=3, shape=diamond, style=filled]
  1982 [label="State 1982\n\l385 for-range-declaration: attribute-specifier-seq decl-specifier-seq '[' identifier-list • ']'\l466 identifier-list: identifier-list • ',' IDENTIFIER\l"]
  1982 -> 1138 [style=solid label="','"]
  1982 -> 1996 [style=solid label="']'"]
  1983 [label="State 1983\n\l387 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' • identifier-list ']'\l"]
  1983 -> 644 [style=solid label="IDENTIFIER"]
  1983 -> 1997 [style=dashed label="identifier-list"]
  1984 [label="State 1984\n\l512 iteration-statement: \"for\" '(' init-statement condition ';' ')' statement •\l"]
  1984 -> "1984R512" [style=solid]
 "1984R512" [label="R512", fillcolor=3, shape=diamond, style=filled]
  1985 [label="State 1985\n\l514 iteration-statement: \"for\" '(' init-statement condition ';' expression ')' • statement\l"]
  1985 -> 665 [style=solid label="IDENTIFIER"]
  1985 -> 361 [style=solid label="'+'"]
  1985 -> 362 [style=solid label="'-'"]
  1985 -> 2 [style=solid label="\"using\""]
  1985 -> 666 [style=solid label="';'"]
  1985 -> 4 [style=solid label="\"alignas\""]
  1985 -> 363 [style=solid label="'('"]
  1985 -> 364 [style=solid label="'&'"]
  1985 -> 8 [style=solid label="\"asm\""]
  1985 -> 365 [style=solid label="\"::\""]
  1985 -> 667 [style=solid label="'['"]
  1985 -> 367 [style=solid label="\"co_await\""]
  1985 -> 294 [style=solid label="'{'"]
  1985 -> 11 [style=solid label="\"virtual\""]
  1985 -> 368 [style=solid label="'0'"]
  1985 -> 369 [style=solid label="'1'"]
  1985 -> 370 [style=solid label="\"0b\""]
  1985 -> 371 [style=solid label="\"0B\""]
  1985 -> 372 [style=solid label="'\\''"]
  1985 -> 373 [style=solid label="\"false\""]
  1985 -> 374 [style=solid label="\"true\""]
  1985 -> 12 [style=solid label="\"class\""]
  1985 -> 13 [style=solid label="\"struct\""]
  1985 -> 14 [style=solid label="\"union\""]
  1985 -> 375 [style=solid label="\"noexcept\""]
  1985 -> 17 [style=solid label="\"operator\""]
  1985 -> 669 [style=solid label="\"co_return\""]
  1985 -> 18 [style=solid label="\"const\""]
  1985 -> 19 [style=solid label="\"volatile\""]
  1985 -> 20 [style=solid label="\"friend\""]
  1985 -> 21 [style=solid label="\"typedef\""]
  1985 -> 22 [style=solid label="\"constexpr\""]
  1985 -> 23 [style=solid label="\"consteval\""]
  1985 -> 24 [style=solid label="\"constinit\""]
  1985 -> 263 [style=solid label="\"inline\""]
  1985 -> 26 [style=solid label="\"decltype\""]
  1985 -> 376 [style=solid label="\"delete\""]
  1985 -> 377 [style=solid label="'.'"]
  1985 -> 378 [style=solid label="'2'"]
  1985 -> 379 [style=solid label="'3'"]
  1985 -> 380 [style=solid label="'4'"]
  1985 -> 381 [style=solid label="'5'"]
  1985 -> 382 [style=solid label="'6'"]
  1985 -> 383 [style=solid label="'7'"]
  1985 -> 384 [style=solid label="'8'"]
  1985 -> 385 [style=solid label="'9'"]
  1985 -> 27 [style=solid label="\"enum\""]
  1985 -> 185 [style=solid label="\"u8\""]
  1985 -> 186 [style=solid label="'u'"]
  1985 -> 187 [style=solid label="'U'"]
  1985 -> 188 [style=solid label="'L'"]
  1985 -> 264 [style=solid label="\"extern\""]
  1985 -> 29 [style=solid label="\"explicit\""]
  1985 -> 386 [style=solid label="'*'"]
  1985 -> 670 [style=solid label="\"default\""]
  1985 -> 671 [style=solid label="\"try\""]
  1985 -> 203 [style=solid label="'\"'"]
  1985 -> 387 [style=solid label="\"0x\""]
  1985 -> 388 [style=solid label="\"0X\""]
  1985 -> 672 [style=solid label="\"while\""]
  1985 -> 673 [style=solid label="\"do\""]
  1985 -> 674 [style=solid label="\"for\""]
  1985 -> 675 [style=solid label="\"break\""]
  1985 -> 676 [style=solid label="\"continue\""]
  1985 -> 677 [style=solid label="\"return\""]
  1985 -> 678 [style=solid label="\"goto\""]
  1985 -> 679 [style=solid label="\"case\""]
  1985 -> 680 [style=solid label="\"namespace\""]
  1985 -> 389 [style=solid label="\"requires\""]
  1985 -> 390 [style=solid label="\"new\""]
  1985 -> 391 [style=solid label="'~'"]
  1985 -> 392 [style=solid label="'!'"]
  1985 -> 393 [style=solid label="\"++\""]
  1985 -> 394 [style=solid label="\"--\""]
  1985 -> 395 [style=solid label="\"this\""]
  1985 -> 37 [style=solid label="\"auto\""]
  1985 -> 396 [style=solid label="\"nullptr\""]
  1985 -> 397 [style=solid label="\"dynamic_cast\""]
  1985 -> 398 [style=solid label="\"static_cast\""]
  1985 -> 399 [style=solid label="\"reinterpret_cast\""]
  1985 -> 400 [style=solid label="\"const_cast\""]
  1985 -> 401 [style=solid label="\"typeid\""]
  1985 -> 681 [style=solid label="\"if\""]
  1985 -> 682 [style=solid label="\"switch\""]
  1985 -> 38 [style=solid label="\"char\""]
  1985 -> 39 [style=solid label="\"char8_t\""]
  1985 -> 40 [style=solid label="\"char16_t\""]
  1985 -> 41 [style=solid label="\"char32_t\""]
  1985 -> 42 [style=solid label="\"wchar_t\""]
  1985 -> 43 [style=solid label="\"bool\""]
  1985 -> 44 [style=solid label="\"short\""]
  1985 -> 45 [style=solid label="\"int\""]
  1985 -> 46 [style=solid label="\"long\""]
  1985 -> 47 [style=solid label="\"signed\""]
  1985 -> 48 [style=solid label="\"unsigned\""]
  1985 -> 49 [style=solid label="\"float\""]
  1985 -> 50 [style=solid label="\"double\""]
  1985 -> 51 [style=solid label="\"void\""]
  1985 -> 52 [style=solid label="\"static_assert\""]
  1985 -> 53 [style=solid label="\"static\""]
  1985 -> 54 [style=solid label="\"thread_local\""]
  1985 -> 55 [style=solid label="\"mutable\""]
  1985 -> 209 [style=solid label="'R'"]
  1985 -> 528 [style=solid label="\"throw\""]
  1985 -> 56 [style=solid label="\"typename\""]
  1985 -> 402 [style=solid label="\"sizeof\""]
  1985 -> 403 [style=solid label="\"alignof\""]
  1985 -> 529 [style=solid label="\"co_yield\""]
  1985 -> 404 [style=dashed label="additive-expression"]
  1985 -> 57 [style=dashed label="alias-declaration"]
  1985 -> 58 [style=dashed label="alignment-specifier"]
  1985 -> 405 [style=dashed label="and-expression"]
  1985 -> 59 [style=dashed label="asm-declaration"]
  1985 -> 530 [style=dashed label="assignment-expression"]
  1985 -> 61 [style=dashed label="attribute-specifier"]
  1985 -> 683 [style=dashed label="attribute-specifier-seq"]
  1985 -> 406 [style=dashed label="await-expression"]
  1985 -> 407 [style=dashed label="binary-literal"]
  1985 -> 684 [style=dashed label="block-declaration"]
  1985 -> 408 [style=dashed label="boolean-literal"]
  1985 -> 409 [style=dashed label="cast-expression"]
  1985 -> 410 [style=dashed label="character-literal"]
  1985 -> 64 [style=dashed label="class-head"]
  1985 -> 65 [style=dashed label="class-key"]
  1985 -> 66 [style=dashed label="class-name"]
  1985 -> 67 [style=dashed label="class-specifier"]
  1985 -> 411 [style=dashed label="compare-expression"]
  1985 -> 685 [style=dashed label="compound-statement"]
  1985 -> 68 [style=dashed label="concept-name"]
  1985 -> 531 [style=dashed label="conditional-expression"]
  1985 -> 69 [style=dashed label="conversion-function-id"]
  1985 -> 686 [style=dashed label="coroutine-return-statement"]
  1985 -> 70 [style=dashed label="cv-qualifier"]
  1985 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1985 -> 415 [style=dashed label="decimal-literal"]
  1985 -> 71 [style=dashed label="decl-specifier"]
  1985 -> 687 [style=dashed label="decl-specifier-seq"]
  1985 -> 688 [style=dashed label="declaration-statement"]
  1985 -> 77 [style=dashed label="decltype-specifier"]
  1985 -> 79 [style=dashed label="defining-type-specifier"]
  1985 -> 416 [style=dashed label="delete-expression"]
  1985 -> 417 [style=dashed label="digit"]
  1985 -> 418 [style=dashed label="digit-sequence"]
  1985 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1985 -> 81 [style=dashed label="elaborated-type-specifier"]
  1985 -> 419 [style=dashed label="encoding-prefix"]
  1985 -> 83 [style=dashed label="enum-head"]
  1985 -> 84 [style=dashed label="enum-key"]
  1985 -> 85 [style=dashed label="enum-name"]
  1985 -> 86 [style=dashed label="enum-specifier"]
  1985 -> 420 [style=dashed label="equality-expression"]
  1985 -> 421 [style=dashed label="exclusive-or-expression"]
  1985 -> 269 [style=dashed label="explicit-specifier"]
  1985 -> 689 [style=dashed label="expression"]
  1985 -> 690 [style=dashed label="expression-statement"]
  1985 -> 422 [style=dashed label="floating-point-literal"]
  1985 -> 423 [style=dashed label="fold-expression"]
  1985 -> 424 [style=dashed label="fractional-constant"]
  1985 -> 92 [style=dashed label="function-specifier"]
  1985 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1985 -> 426 [style=dashed label="hexadecimal-literal"]
  1985 -> 427 [style=dashed label="hexadecimal-prefix"]
  1985 -> 428 [style=dashed label="id-expression"]
  1985 -> 429 [style=dashed label="inclusive-or-expression"]
  1985 -> 430 [style=dashed label="integer-literal"]
  1985 -> 691 [style=dashed label="iteration-statement"]
  1985 -> 692 [style=dashed label="jump-statement"]
  1985 -> 693 [style=dashed label="labeled-statement"]
  1985 -> 431 [style=dashed label="lambda-expression"]
  1985 -> 432 [style=dashed label="lambda-introducer"]
  1985 -> 433 [style=dashed label="literal"]
  1985 -> 96 [style=dashed label="literal-operator-id"]
  1985 -> 434 [style=dashed label="logical-and-expression"]
  1985 -> 533 [style=dashed label="logical-or-expression"]
  1985 -> 436 [style=dashed label="multiplicative-expression"]
  1985 -> 100 [style=dashed label="namespace-alias"]
  1985 -> 101 [style=dashed label="namespace-alias-definition"]
  1985 -> 103 [style=dashed label="namespace-name"]
  1985 -> 437 [style=dashed label="nested-name-specifier"]
  1985 -> 438 [style=dashed label="new-expression"]
  1985 -> 439 [style=dashed label="noexcept-expression"]
  1985 -> 440 [style=dashed label="nonzero-digit"]
  1985 -> 441 [style=dashed label="octal-literal"]
  1985 -> 108 [style=dashed label="opaque-enum-declaration"]
  1985 -> 109 [style=dashed label="operator-function-id"]
  1985 -> 110 [style=dashed label="placeholder-type-specifier"]
  1985 -> 442 [style=dashed label="pm-expression"]
  1985 -> 443 [style=dashed label="pointer-literal"]
  1985 -> 444 [style=dashed label="postfix-expression"]
  1985 -> 445 [style=dashed label="primary-expression"]
  1985 -> 113 [style=dashed label="qualified-id"]
  1985 -> 446 [style=dashed label="relational-expression"]
  1985 -> 447 [style=dashed label="requires-expression"]
  1985 -> 694 [style=dashed label="selection-statement"]
  1985 -> 448 [style=dashed label="shift-expression"]
  1985 -> 114 [style=dashed label="simple-declaration"]
  1985 -> 115 [style=dashed label="simple-template-id"]
  1985 -> 449 [style=dashed label="simple-type-specifier"]
  1985 -> 1998 [style=dashed label="statement"]
  1985 -> 117 [style=dashed label="static_assert-declaration"]
  1985 -> 118 [style=dashed label="storage-class-specifier"]
  1985 -> 450 [style=dashed label="string-literal"]
  1985 -> 121 [style=dashed label="template-id"]
  1985 -> 216 [style=dashed label="template-name"]
  1985 -> 535 [style=dashed label="throw-expression"]
  1985 -> 697 [style=dashed label="try-block"]
  1985 -> 124 [style=dashed label="type-constraint"]
  1985 -> 125 [style=dashed label="type-name"]
  1985 -> 126 [style=dashed label="type-specifier"]
  1985 -> 127 [style=dashed label="typedef-name"]
  1985 -> 453 [style=dashed label="typename-specifier"]
  1985 -> 454 [style=dashed label="unary-expression"]
  1985 -> 455 [style=dashed label="unary-operator"]
  1985 -> 130 [style=dashed label="unqualified-id"]
  1985 -> 456 [style=dashed label="user-defined-character-literal"]
  1985 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1985 -> 458 [style=dashed label="user-defined-integer-literal"]
  1985 -> 459 [style=dashed label="user-defined-literal"]
  1985 -> 460 [style=dashed label="user-defined-string-literal"]
  1985 -> 131 [style=dashed label="using-declaration"]
  1985 -> 132 [style=dashed label="using-directive"]
  1985 -> 133 [style=dashed label="using-enum-declaration"]
  1985 -> 537 [style=dashed label="yield-expression"]
  1986 [label="State 1986\n\l386 for-range-declaration: decl-specifier-seq '[' identifier-list ']' •\l"]
  1986 -> "1986R386" [style=solid]
 "1986R386" [label="R386", fillcolor=3, shape=diamond, style=filled]
  1987 [label="State 1987\n\l388 for-range-declaration: decl-specifier-seq ref-qualifier '[' identifier-list • ']'\l466 identifier-list: identifier-list • ',' IDENTIFIER\l"]
  1987 -> 1138 [style=solid label="','"]
  1987 -> 1999 [style=solid label="']'"]
  1988 [label="State 1988\n\l516 iteration-statement: \"for\" '(' init-statement for-range-declaration ':' for-range-initializer ')' • statement\l"]
  1988 -> 665 [style=solid label="IDENTIFIER"]
  1988 -> 361 [style=solid label="'+'"]
  1988 -> 362 [style=solid label="'-'"]
  1988 -> 2 [style=solid label="\"using\""]
  1988 -> 666 [style=solid label="';'"]
  1988 -> 4 [style=solid label="\"alignas\""]
  1988 -> 363 [style=solid label="'('"]
  1988 -> 364 [style=solid label="'&'"]
  1988 -> 8 [style=solid label="\"asm\""]
  1988 -> 365 [style=solid label="\"::\""]
  1988 -> 667 [style=solid label="'['"]
  1988 -> 367 [style=solid label="\"co_await\""]
  1988 -> 294 [style=solid label="'{'"]
  1988 -> 11 [style=solid label="\"virtual\""]
  1988 -> 368 [style=solid label="'0'"]
  1988 -> 369 [style=solid label="'1'"]
  1988 -> 370 [style=solid label="\"0b\""]
  1988 -> 371 [style=solid label="\"0B\""]
  1988 -> 372 [style=solid label="'\\''"]
  1988 -> 373 [style=solid label="\"false\""]
  1988 -> 374 [style=solid label="\"true\""]
  1988 -> 12 [style=solid label="\"class\""]
  1988 -> 13 [style=solid label="\"struct\""]
  1988 -> 14 [style=solid label="\"union\""]
  1988 -> 375 [style=solid label="\"noexcept\""]
  1988 -> 17 [style=solid label="\"operator\""]
  1988 -> 669 [style=solid label="\"co_return\""]
  1988 -> 18 [style=solid label="\"const\""]
  1988 -> 19 [style=solid label="\"volatile\""]
  1988 -> 20 [style=solid label="\"friend\""]
  1988 -> 21 [style=solid label="\"typedef\""]
  1988 -> 22 [style=solid label="\"constexpr\""]
  1988 -> 23 [style=solid label="\"consteval\""]
  1988 -> 24 [style=solid label="\"constinit\""]
  1988 -> 263 [style=solid label="\"inline\""]
  1988 -> 26 [style=solid label="\"decltype\""]
  1988 -> 376 [style=solid label="\"delete\""]
  1988 -> 377 [style=solid label="'.'"]
  1988 -> 378 [style=solid label="'2'"]
  1988 -> 379 [style=solid label="'3'"]
  1988 -> 380 [style=solid label="'4'"]
  1988 -> 381 [style=solid label="'5'"]
  1988 -> 382 [style=solid label="'6'"]
  1988 -> 383 [style=solid label="'7'"]
  1988 -> 384 [style=solid label="'8'"]
  1988 -> 385 [style=solid label="'9'"]
  1988 -> 27 [style=solid label="\"enum\""]
  1988 -> 185 [style=solid label="\"u8\""]
  1988 -> 186 [style=solid label="'u'"]
  1988 -> 187 [style=solid label="'U'"]
  1988 -> 188 [style=solid label="'L'"]
  1988 -> 264 [style=solid label="\"extern\""]
  1988 -> 29 [style=solid label="\"explicit\""]
  1988 -> 386 [style=solid label="'*'"]
  1988 -> 670 [style=solid label="\"default\""]
  1988 -> 671 [style=solid label="\"try\""]
  1988 -> 203 [style=solid label="'\"'"]
  1988 -> 387 [style=solid label="\"0x\""]
  1988 -> 388 [style=solid label="\"0X\""]
  1988 -> 672 [style=solid label="\"while\""]
  1988 -> 673 [style=solid label="\"do\""]
  1988 -> 674 [style=solid label="\"for\""]
  1988 -> 675 [style=solid label="\"break\""]
  1988 -> 676 [style=solid label="\"continue\""]
  1988 -> 677 [style=solid label="\"return\""]
  1988 -> 678 [style=solid label="\"goto\""]
  1988 -> 679 [style=solid label="\"case\""]
  1988 -> 680 [style=solid label="\"namespace\""]
  1988 -> 389 [style=solid label="\"requires\""]
  1988 -> 390 [style=solid label="\"new\""]
  1988 -> 391 [style=solid label="'~'"]
  1988 -> 392 [style=solid label="'!'"]
  1988 -> 393 [style=solid label="\"++\""]
  1988 -> 394 [style=solid label="\"--\""]
  1988 -> 395 [style=solid label="\"this\""]
  1988 -> 37 [style=solid label="\"auto\""]
  1988 -> 396 [style=solid label="\"nullptr\""]
  1988 -> 397 [style=solid label="\"dynamic_cast\""]
  1988 -> 398 [style=solid label="\"static_cast\""]
  1988 -> 399 [style=solid label="\"reinterpret_cast\""]
  1988 -> 400 [style=solid label="\"const_cast\""]
  1988 -> 401 [style=solid label="\"typeid\""]
  1988 -> 681 [style=solid label="\"if\""]
  1988 -> 682 [style=solid label="\"switch\""]
  1988 -> 38 [style=solid label="\"char\""]
  1988 -> 39 [style=solid label="\"char8_t\""]
  1988 -> 40 [style=solid label="\"char16_t\""]
  1988 -> 41 [style=solid label="\"char32_t\""]
  1988 -> 42 [style=solid label="\"wchar_t\""]
  1988 -> 43 [style=solid label="\"bool\""]
  1988 -> 44 [style=solid label="\"short\""]
  1988 -> 45 [style=solid label="\"int\""]
  1988 -> 46 [style=solid label="\"long\""]
  1988 -> 47 [style=solid label="\"signed\""]
  1988 -> 48 [style=solid label="\"unsigned\""]
  1988 -> 49 [style=solid label="\"float\""]
  1988 -> 50 [style=solid label="\"double\""]
  1988 -> 51 [style=solid label="\"void\""]
  1988 -> 52 [style=solid label="\"static_assert\""]
  1988 -> 53 [style=solid label="\"static\""]
  1988 -> 54 [style=solid label="\"thread_local\""]
  1988 -> 55 [style=solid label="\"mutable\""]
  1988 -> 209 [style=solid label="'R'"]
  1988 -> 528 [style=solid label="\"throw\""]
  1988 -> 56 [style=solid label="\"typename\""]
  1988 -> 402 [style=solid label="\"sizeof\""]
  1988 -> 403 [style=solid label="\"alignof\""]
  1988 -> 529 [style=solid label="\"co_yield\""]
  1988 -> 404 [style=dashed label="additive-expression"]
  1988 -> 57 [style=dashed label="alias-declaration"]
  1988 -> 58 [style=dashed label="alignment-specifier"]
  1988 -> 405 [style=dashed label="and-expression"]
  1988 -> 59 [style=dashed label="asm-declaration"]
  1988 -> 530 [style=dashed label="assignment-expression"]
  1988 -> 61 [style=dashed label="attribute-specifier"]
  1988 -> 683 [style=dashed label="attribute-specifier-seq"]
  1988 -> 406 [style=dashed label="await-expression"]
  1988 -> 407 [style=dashed label="binary-literal"]
  1988 -> 684 [style=dashed label="block-declaration"]
  1988 -> 408 [style=dashed label="boolean-literal"]
  1988 -> 409 [style=dashed label="cast-expression"]
  1988 -> 410 [style=dashed label="character-literal"]
  1988 -> 64 [style=dashed label="class-head"]
  1988 -> 65 [style=dashed label="class-key"]
  1988 -> 66 [style=dashed label="class-name"]
  1988 -> 67 [style=dashed label="class-specifier"]
  1988 -> 411 [style=dashed label="compare-expression"]
  1988 -> 685 [style=dashed label="compound-statement"]
  1988 -> 68 [style=dashed label="concept-name"]
  1988 -> 531 [style=dashed label="conditional-expression"]
  1988 -> 69 [style=dashed label="conversion-function-id"]
  1988 -> 686 [style=dashed label="coroutine-return-statement"]
  1988 -> 70 [style=dashed label="cv-qualifier"]
  1988 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1988 -> 415 [style=dashed label="decimal-literal"]
  1988 -> 71 [style=dashed label="decl-specifier"]
  1988 -> 687 [style=dashed label="decl-specifier-seq"]
  1988 -> 688 [style=dashed label="declaration-statement"]
  1988 -> 77 [style=dashed label="decltype-specifier"]
  1988 -> 79 [style=dashed label="defining-type-specifier"]
  1988 -> 416 [style=dashed label="delete-expression"]
  1988 -> 417 [style=dashed label="digit"]
  1988 -> 418 [style=dashed label="digit-sequence"]
  1988 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1988 -> 81 [style=dashed label="elaborated-type-specifier"]
  1988 -> 419 [style=dashed label="encoding-prefix"]
  1988 -> 83 [style=dashed label="enum-head"]
  1988 -> 84 [style=dashed label="enum-key"]
  1988 -> 85 [style=dashed label="enum-name"]
  1988 -> 86 [style=dashed label="enum-specifier"]
  1988 -> 420 [style=dashed label="equality-expression"]
  1988 -> 421 [style=dashed label="exclusive-or-expression"]
  1988 -> 269 [style=dashed label="explicit-specifier"]
  1988 -> 689 [style=dashed label="expression"]
  1988 -> 690 [style=dashed label="expression-statement"]
  1988 -> 422 [style=dashed label="floating-point-literal"]
  1988 -> 423 [style=dashed label="fold-expression"]
  1988 -> 424 [style=dashed label="fractional-constant"]
  1988 -> 92 [style=dashed label="function-specifier"]
  1988 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1988 -> 426 [style=dashed label="hexadecimal-literal"]
  1988 -> 427 [style=dashed label="hexadecimal-prefix"]
  1988 -> 428 [style=dashed label="id-expression"]
  1988 -> 429 [style=dashed label="inclusive-or-expression"]
  1988 -> 430 [style=dashed label="integer-literal"]
  1988 -> 691 [style=dashed label="iteration-statement"]
  1988 -> 692 [style=dashed label="jump-statement"]
  1988 -> 693 [style=dashed label="labeled-statement"]
  1988 -> 431 [style=dashed label="lambda-expression"]
  1988 -> 432 [style=dashed label="lambda-introducer"]
  1988 -> 433 [style=dashed label="literal"]
  1988 -> 96 [style=dashed label="literal-operator-id"]
  1988 -> 434 [style=dashed label="logical-and-expression"]
  1988 -> 533 [style=dashed label="logical-or-expression"]
  1988 -> 436 [style=dashed label="multiplicative-expression"]
  1988 -> 100 [style=dashed label="namespace-alias"]
  1988 -> 101 [style=dashed label="namespace-alias-definition"]
  1988 -> 103 [style=dashed label="namespace-name"]
  1988 -> 437 [style=dashed label="nested-name-specifier"]
  1988 -> 438 [style=dashed label="new-expression"]
  1988 -> 439 [style=dashed label="noexcept-expression"]
  1988 -> 440 [style=dashed label="nonzero-digit"]
  1988 -> 441 [style=dashed label="octal-literal"]
  1988 -> 108 [style=dashed label="opaque-enum-declaration"]
  1988 -> 109 [style=dashed label="operator-function-id"]
  1988 -> 110 [style=dashed label="placeholder-type-specifier"]
  1988 -> 442 [style=dashed label="pm-expression"]
  1988 -> 443 [style=dashed label="pointer-literal"]
  1988 -> 444 [style=dashed label="postfix-expression"]
  1988 -> 445 [style=dashed label="primary-expression"]
  1988 -> 113 [style=dashed label="qualified-id"]
  1988 -> 446 [style=dashed label="relational-expression"]
  1988 -> 447 [style=dashed label="requires-expression"]
  1988 -> 694 [style=dashed label="selection-statement"]
  1988 -> 448 [style=dashed label="shift-expression"]
  1988 -> 114 [style=dashed label="simple-declaration"]
  1988 -> 115 [style=dashed label="simple-template-id"]
  1988 -> 449 [style=dashed label="simple-type-specifier"]
  1988 -> 2000 [style=dashed label="statement"]
  1988 -> 117 [style=dashed label="static_assert-declaration"]
  1988 -> 118 [style=dashed label="storage-class-specifier"]
  1988 -> 450 [style=dashed label="string-literal"]
  1988 -> 121 [style=dashed label="template-id"]
  1988 -> 216 [style=dashed label="template-name"]
  1988 -> 535 [style=dashed label="throw-expression"]
  1988 -> 697 [style=dashed label="try-block"]
  1988 -> 124 [style=dashed label="type-constraint"]
  1988 -> 125 [style=dashed label="type-name"]
  1988 -> 126 [style=dashed label="type-specifier"]
  1988 -> 127 [style=dashed label="typedef-name"]
  1988 -> 453 [style=dashed label="typename-specifier"]
  1988 -> 454 [style=dashed label="unary-expression"]
  1988 -> 455 [style=dashed label="unary-operator"]
  1988 -> 130 [style=dashed label="unqualified-id"]
  1988 -> 456 [style=dashed label="user-defined-character-literal"]
  1988 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1988 -> 458 [style=dashed label="user-defined-integer-literal"]
  1988 -> 459 [style=dashed label="user-defined-literal"]
  1988 -> 460 [style=dashed label="user-defined-string-literal"]
  1988 -> 131 [style=dashed label="using-declaration"]
  1988 -> 132 [style=dashed label="using-directive"]
  1988 -> 133 [style=dashed label="using-enum-declaration"]
  1988 -> 537 [style=dashed label="yield-expression"]
  1989 [label="State 1989\n\l956 selection-statement: \"if\" '(' condition ')' statement \"else\" statement •\l"]
  1989 -> "1989R956" [style=solid]
 "1989R956" [label="R956", fillcolor=3, shape=diamond, style=filled]
  1990 [label="State 1990\n\l958 selection-statement: \"if\" '(' init-statement condition ')' statement \"else\" • statement\l"]
  1990 -> 665 [style=solid label="IDENTIFIER"]
  1990 -> 361 [style=solid label="'+'"]
  1990 -> 362 [style=solid label="'-'"]
  1990 -> 2 [style=solid label="\"using\""]
  1990 -> 666 [style=solid label="';'"]
  1990 -> 4 [style=solid label="\"alignas\""]
  1990 -> 363 [style=solid label="'('"]
  1990 -> 364 [style=solid label="'&'"]
  1990 -> 8 [style=solid label="\"asm\""]
  1990 -> 365 [style=solid label="\"::\""]
  1990 -> 667 [style=solid label="'['"]
  1990 -> 367 [style=solid label="\"co_await\""]
  1990 -> 294 [style=solid label="'{'"]
  1990 -> 11 [style=solid label="\"virtual\""]
  1990 -> 368 [style=solid label="'0'"]
  1990 -> 369 [style=solid label="'1'"]
  1990 -> 370 [style=solid label="\"0b\""]
  1990 -> 371 [style=solid label="\"0B\""]
  1990 -> 372 [style=solid label="'\\''"]
  1990 -> 373 [style=solid label="\"false\""]
  1990 -> 374 [style=solid label="\"true\""]
  1990 -> 12 [style=solid label="\"class\""]
  1990 -> 13 [style=solid label="\"struct\""]
  1990 -> 14 [style=solid label="\"union\""]
  1990 -> 375 [style=solid label="\"noexcept\""]
  1990 -> 17 [style=solid label="\"operator\""]
  1990 -> 669 [style=solid label="\"co_return\""]
  1990 -> 18 [style=solid label="\"const\""]
  1990 -> 19 [style=solid label="\"volatile\""]
  1990 -> 20 [style=solid label="\"friend\""]
  1990 -> 21 [style=solid label="\"typedef\""]
  1990 -> 22 [style=solid label="\"constexpr\""]
  1990 -> 23 [style=solid label="\"consteval\""]
  1990 -> 24 [style=solid label="\"constinit\""]
  1990 -> 263 [style=solid label="\"inline\""]
  1990 -> 26 [style=solid label="\"decltype\""]
  1990 -> 376 [style=solid label="\"delete\""]
  1990 -> 377 [style=solid label="'.'"]
  1990 -> 378 [style=solid label="'2'"]
  1990 -> 379 [style=solid label="'3'"]
  1990 -> 380 [style=solid label="'4'"]
  1990 -> 381 [style=solid label="'5'"]
  1990 -> 382 [style=solid label="'6'"]
  1990 -> 383 [style=solid label="'7'"]
  1990 -> 384 [style=solid label="'8'"]
  1990 -> 385 [style=solid label="'9'"]
  1990 -> 27 [style=solid label="\"enum\""]
  1990 -> 185 [style=solid label="\"u8\""]
  1990 -> 186 [style=solid label="'u'"]
  1990 -> 187 [style=solid label="'U'"]
  1990 -> 188 [style=solid label="'L'"]
  1990 -> 264 [style=solid label="\"extern\""]
  1990 -> 29 [style=solid label="\"explicit\""]
  1990 -> 386 [style=solid label="'*'"]
  1990 -> 670 [style=solid label="\"default\""]
  1990 -> 671 [style=solid label="\"try\""]
  1990 -> 203 [style=solid label="'\"'"]
  1990 -> 387 [style=solid label="\"0x\""]
  1990 -> 388 [style=solid label="\"0X\""]
  1990 -> 672 [style=solid label="\"while\""]
  1990 -> 673 [style=solid label="\"do\""]
  1990 -> 674 [style=solid label="\"for\""]
  1990 -> 675 [style=solid label="\"break\""]
  1990 -> 676 [style=solid label="\"continue\""]
  1990 -> 677 [style=solid label="\"return\""]
  1990 -> 678 [style=solid label="\"goto\""]
  1990 -> 679 [style=solid label="\"case\""]
  1990 -> 680 [style=solid label="\"namespace\""]
  1990 -> 389 [style=solid label="\"requires\""]
  1990 -> 390 [style=solid label="\"new\""]
  1990 -> 391 [style=solid label="'~'"]
  1990 -> 392 [style=solid label="'!'"]
  1990 -> 393 [style=solid label="\"++\""]
  1990 -> 394 [style=solid label="\"--\""]
  1990 -> 395 [style=solid label="\"this\""]
  1990 -> 37 [style=solid label="\"auto\""]
  1990 -> 396 [style=solid label="\"nullptr\""]
  1990 -> 397 [style=solid label="\"dynamic_cast\""]
  1990 -> 398 [style=solid label="\"static_cast\""]
  1990 -> 399 [style=solid label="\"reinterpret_cast\""]
  1990 -> 400 [style=solid label="\"const_cast\""]
  1990 -> 401 [style=solid label="\"typeid\""]
  1990 -> 681 [style=solid label="\"if\""]
  1990 -> 682 [style=solid label="\"switch\""]
  1990 -> 38 [style=solid label="\"char\""]
  1990 -> 39 [style=solid label="\"char8_t\""]
  1990 -> 40 [style=solid label="\"char16_t\""]
  1990 -> 41 [style=solid label="\"char32_t\""]
  1990 -> 42 [style=solid label="\"wchar_t\""]
  1990 -> 43 [style=solid label="\"bool\""]
  1990 -> 44 [style=solid label="\"short\""]
  1990 -> 45 [style=solid label="\"int\""]
  1990 -> 46 [style=solid label="\"long\""]
  1990 -> 47 [style=solid label="\"signed\""]
  1990 -> 48 [style=solid label="\"unsigned\""]
  1990 -> 49 [style=solid label="\"float\""]
  1990 -> 50 [style=solid label="\"double\""]
  1990 -> 51 [style=solid label="\"void\""]
  1990 -> 52 [style=solid label="\"static_assert\""]
  1990 -> 53 [style=solid label="\"static\""]
  1990 -> 54 [style=solid label="\"thread_local\""]
  1990 -> 55 [style=solid label="\"mutable\""]
  1990 -> 209 [style=solid label="'R'"]
  1990 -> 528 [style=solid label="\"throw\""]
  1990 -> 56 [style=solid label="\"typename\""]
  1990 -> 402 [style=solid label="\"sizeof\""]
  1990 -> 403 [style=solid label="\"alignof\""]
  1990 -> 529 [style=solid label="\"co_yield\""]
  1990 -> 404 [style=dashed label="additive-expression"]
  1990 -> 57 [style=dashed label="alias-declaration"]
  1990 -> 58 [style=dashed label="alignment-specifier"]
  1990 -> 405 [style=dashed label="and-expression"]
  1990 -> 59 [style=dashed label="asm-declaration"]
  1990 -> 530 [style=dashed label="assignment-expression"]
  1990 -> 61 [style=dashed label="attribute-specifier"]
  1990 -> 683 [style=dashed label="attribute-specifier-seq"]
  1990 -> 406 [style=dashed label="await-expression"]
  1990 -> 407 [style=dashed label="binary-literal"]
  1990 -> 684 [style=dashed label="block-declaration"]
  1990 -> 408 [style=dashed label="boolean-literal"]
  1990 -> 409 [style=dashed label="cast-expression"]
  1990 -> 410 [style=dashed label="character-literal"]
  1990 -> 64 [style=dashed label="class-head"]
  1990 -> 65 [style=dashed label="class-key"]
  1990 -> 66 [style=dashed label="class-name"]
  1990 -> 67 [style=dashed label="class-specifier"]
  1990 -> 411 [style=dashed label="compare-expression"]
  1990 -> 685 [style=dashed label="compound-statement"]
  1990 -> 68 [style=dashed label="concept-name"]
  1990 -> 531 [style=dashed label="conditional-expression"]
  1990 -> 69 [style=dashed label="conversion-function-id"]
  1990 -> 686 [style=dashed label="coroutine-return-statement"]
  1990 -> 70 [style=dashed label="cv-qualifier"]
  1990 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1990 -> 415 [style=dashed label="decimal-literal"]
  1990 -> 71 [style=dashed label="decl-specifier"]
  1990 -> 687 [style=dashed label="decl-specifier-seq"]
  1990 -> 688 [style=dashed label="declaration-statement"]
  1990 -> 77 [style=dashed label="decltype-specifier"]
  1990 -> 79 [style=dashed label="defining-type-specifier"]
  1990 -> 416 [style=dashed label="delete-expression"]
  1990 -> 417 [style=dashed label="digit"]
  1990 -> 418 [style=dashed label="digit-sequence"]
  1990 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1990 -> 81 [style=dashed label="elaborated-type-specifier"]
  1990 -> 419 [style=dashed label="encoding-prefix"]
  1990 -> 83 [style=dashed label="enum-head"]
  1990 -> 84 [style=dashed label="enum-key"]
  1990 -> 85 [style=dashed label="enum-name"]
  1990 -> 86 [style=dashed label="enum-specifier"]
  1990 -> 420 [style=dashed label="equality-expression"]
  1990 -> 421 [style=dashed label="exclusive-or-expression"]
  1990 -> 269 [style=dashed label="explicit-specifier"]
  1990 -> 689 [style=dashed label="expression"]
  1990 -> 690 [style=dashed label="expression-statement"]
  1990 -> 422 [style=dashed label="floating-point-literal"]
  1990 -> 423 [style=dashed label="fold-expression"]
  1990 -> 424 [style=dashed label="fractional-constant"]
  1990 -> 92 [style=dashed label="function-specifier"]
  1990 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1990 -> 426 [style=dashed label="hexadecimal-literal"]
  1990 -> 427 [style=dashed label="hexadecimal-prefix"]
  1990 -> 428 [style=dashed label="id-expression"]
  1990 -> 429 [style=dashed label="inclusive-or-expression"]
  1990 -> 430 [style=dashed label="integer-literal"]
  1990 -> 691 [style=dashed label="iteration-statement"]
  1990 -> 692 [style=dashed label="jump-statement"]
  1990 -> 693 [style=dashed label="labeled-statement"]
  1990 -> 431 [style=dashed label="lambda-expression"]
  1990 -> 432 [style=dashed label="lambda-introducer"]
  1990 -> 433 [style=dashed label="literal"]
  1990 -> 96 [style=dashed label="literal-operator-id"]
  1990 -> 434 [style=dashed label="logical-and-expression"]
  1990 -> 533 [style=dashed label="logical-or-expression"]
  1990 -> 436 [style=dashed label="multiplicative-expression"]
  1990 -> 100 [style=dashed label="namespace-alias"]
  1990 -> 101 [style=dashed label="namespace-alias-definition"]
  1990 -> 103 [style=dashed label="namespace-name"]
  1990 -> 437 [style=dashed label="nested-name-specifier"]
  1990 -> 438 [style=dashed label="new-expression"]
  1990 -> 439 [style=dashed label="noexcept-expression"]
  1990 -> 440 [style=dashed label="nonzero-digit"]
  1990 -> 441 [style=dashed label="octal-literal"]
  1990 -> 108 [style=dashed label="opaque-enum-declaration"]
  1990 -> 109 [style=dashed label="operator-function-id"]
  1990 -> 110 [style=dashed label="placeholder-type-specifier"]
  1990 -> 442 [style=dashed label="pm-expression"]
  1990 -> 443 [style=dashed label="pointer-literal"]
  1990 -> 444 [style=dashed label="postfix-expression"]
  1990 -> 445 [style=dashed label="primary-expression"]
  1990 -> 113 [style=dashed label="qualified-id"]
  1990 -> 446 [style=dashed label="relational-expression"]
  1990 -> 447 [style=dashed label="requires-expression"]
  1990 -> 694 [style=dashed label="selection-statement"]
  1990 -> 448 [style=dashed label="shift-expression"]
  1990 -> 114 [style=dashed label="simple-declaration"]
  1990 -> 115 [style=dashed label="simple-template-id"]
  1990 -> 449 [style=dashed label="simple-type-specifier"]
  1990 -> 2001 [style=dashed label="statement"]
  1990 -> 117 [style=dashed label="static_assert-declaration"]
  1990 -> 118 [style=dashed label="storage-class-specifier"]
  1990 -> 450 [style=dashed label="string-literal"]
  1990 -> 121 [style=dashed label="template-id"]
  1990 -> 216 [style=dashed label="template-name"]
  1990 -> 535 [style=dashed label="throw-expression"]
  1990 -> 697 [style=dashed label="try-block"]
  1990 -> 124 [style=dashed label="type-constraint"]
  1990 -> 125 [style=dashed label="type-name"]
  1990 -> 126 [style=dashed label="type-specifier"]
  1990 -> 127 [style=dashed label="typedef-name"]
  1990 -> 453 [style=dashed label="typename-specifier"]
  1990 -> 454 [style=dashed label="unary-expression"]
  1990 -> 455 [style=dashed label="unary-operator"]
  1990 -> 130 [style=dashed label="unqualified-id"]
  1990 -> 456 [style=dashed label="user-defined-character-literal"]
  1990 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1990 -> 458 [style=dashed label="user-defined-integer-literal"]
  1990 -> 459 [style=dashed label="user-defined-literal"]
  1990 -> 460 [style=dashed label="user-defined-string-literal"]
  1990 -> 131 [style=dashed label="using-declaration"]
  1990 -> 132 [style=dashed label="using-directive"]
  1990 -> 133 [style=dashed label="using-enum-declaration"]
  1990 -> 537 [style=dashed label="yield-expression"]
  1991 [label="State 1991\n\l957 selection-statement: \"if\" \"constexpr\" '(' condition ')' statement \"else\" • statement\l"]
  1991 -> 665 [style=solid label="IDENTIFIER"]
  1991 -> 361 [style=solid label="'+'"]
  1991 -> 362 [style=solid label="'-'"]
  1991 -> 2 [style=solid label="\"using\""]
  1991 -> 666 [style=solid label="';'"]
  1991 -> 4 [style=solid label="\"alignas\""]
  1991 -> 363 [style=solid label="'('"]
  1991 -> 364 [style=solid label="'&'"]
  1991 -> 8 [style=solid label="\"asm\""]
  1991 -> 365 [style=solid label="\"::\""]
  1991 -> 667 [style=solid label="'['"]
  1991 -> 367 [style=solid label="\"co_await\""]
  1991 -> 294 [style=solid label="'{'"]
  1991 -> 11 [style=solid label="\"virtual\""]
  1991 -> 368 [style=solid label="'0'"]
  1991 -> 369 [style=solid label="'1'"]
  1991 -> 370 [style=solid label="\"0b\""]
  1991 -> 371 [style=solid label="\"0B\""]
  1991 -> 372 [style=solid label="'\\''"]
  1991 -> 373 [style=solid label="\"false\""]
  1991 -> 374 [style=solid label="\"true\""]
  1991 -> 12 [style=solid label="\"class\""]
  1991 -> 13 [style=solid label="\"struct\""]
  1991 -> 14 [style=solid label="\"union\""]
  1991 -> 375 [style=solid label="\"noexcept\""]
  1991 -> 17 [style=solid label="\"operator\""]
  1991 -> 669 [style=solid label="\"co_return\""]
  1991 -> 18 [style=solid label="\"const\""]
  1991 -> 19 [style=solid label="\"volatile\""]
  1991 -> 20 [style=solid label="\"friend\""]
  1991 -> 21 [style=solid label="\"typedef\""]
  1991 -> 22 [style=solid label="\"constexpr\""]
  1991 -> 23 [style=solid label="\"consteval\""]
  1991 -> 24 [style=solid label="\"constinit\""]
  1991 -> 263 [style=solid label="\"inline\""]
  1991 -> 26 [style=solid label="\"decltype\""]
  1991 -> 376 [style=solid label="\"delete\""]
  1991 -> 377 [style=solid label="'.'"]
  1991 -> 378 [style=solid label="'2'"]
  1991 -> 379 [style=solid label="'3'"]
  1991 -> 380 [style=solid label="'4'"]
  1991 -> 381 [style=solid label="'5'"]
  1991 -> 382 [style=solid label="'6'"]
  1991 -> 383 [style=solid label="'7'"]
  1991 -> 384 [style=solid label="'8'"]
  1991 -> 385 [style=solid label="'9'"]
  1991 -> 27 [style=solid label="\"enum\""]
  1991 -> 185 [style=solid label="\"u8\""]
  1991 -> 186 [style=solid label="'u'"]
  1991 -> 187 [style=solid label="'U'"]
  1991 -> 188 [style=solid label="'L'"]
  1991 -> 264 [style=solid label="\"extern\""]
  1991 -> 29 [style=solid label="\"explicit\""]
  1991 -> 386 [style=solid label="'*'"]
  1991 -> 670 [style=solid label="\"default\""]
  1991 -> 671 [style=solid label="\"try\""]
  1991 -> 203 [style=solid label="'\"'"]
  1991 -> 387 [style=solid label="\"0x\""]
  1991 -> 388 [style=solid label="\"0X\""]
  1991 -> 672 [style=solid label="\"while\""]
  1991 -> 673 [style=solid label="\"do\""]
  1991 -> 674 [style=solid label="\"for\""]
  1991 -> 675 [style=solid label="\"break\""]
  1991 -> 676 [style=solid label="\"continue\""]
  1991 -> 677 [style=solid label="\"return\""]
  1991 -> 678 [style=solid label="\"goto\""]
  1991 -> 679 [style=solid label="\"case\""]
  1991 -> 680 [style=solid label="\"namespace\""]
  1991 -> 389 [style=solid label="\"requires\""]
  1991 -> 390 [style=solid label="\"new\""]
  1991 -> 391 [style=solid label="'~'"]
  1991 -> 392 [style=solid label="'!'"]
  1991 -> 393 [style=solid label="\"++\""]
  1991 -> 394 [style=solid label="\"--\""]
  1991 -> 395 [style=solid label="\"this\""]
  1991 -> 37 [style=solid label="\"auto\""]
  1991 -> 396 [style=solid label="\"nullptr\""]
  1991 -> 397 [style=solid label="\"dynamic_cast\""]
  1991 -> 398 [style=solid label="\"static_cast\""]
  1991 -> 399 [style=solid label="\"reinterpret_cast\""]
  1991 -> 400 [style=solid label="\"const_cast\""]
  1991 -> 401 [style=solid label="\"typeid\""]
  1991 -> 681 [style=solid label="\"if\""]
  1991 -> 682 [style=solid label="\"switch\""]
  1991 -> 38 [style=solid label="\"char\""]
  1991 -> 39 [style=solid label="\"char8_t\""]
  1991 -> 40 [style=solid label="\"char16_t\""]
  1991 -> 41 [style=solid label="\"char32_t\""]
  1991 -> 42 [style=solid label="\"wchar_t\""]
  1991 -> 43 [style=solid label="\"bool\""]
  1991 -> 44 [style=solid label="\"short\""]
  1991 -> 45 [style=solid label="\"int\""]
  1991 -> 46 [style=solid label="\"long\""]
  1991 -> 47 [style=solid label="\"signed\""]
  1991 -> 48 [style=solid label="\"unsigned\""]
  1991 -> 49 [style=solid label="\"float\""]
  1991 -> 50 [style=solid label="\"double\""]
  1991 -> 51 [style=solid label="\"void\""]
  1991 -> 52 [style=solid label="\"static_assert\""]
  1991 -> 53 [style=solid label="\"static\""]
  1991 -> 54 [style=solid label="\"thread_local\""]
  1991 -> 55 [style=solid label="\"mutable\""]
  1991 -> 209 [style=solid label="'R'"]
  1991 -> 528 [style=solid label="\"throw\""]
  1991 -> 56 [style=solid label="\"typename\""]
  1991 -> 402 [style=solid label="\"sizeof\""]
  1991 -> 403 [style=solid label="\"alignof\""]
  1991 -> 529 [style=solid label="\"co_yield\""]
  1991 -> 404 [style=dashed label="additive-expression"]
  1991 -> 57 [style=dashed label="alias-declaration"]
  1991 -> 58 [style=dashed label="alignment-specifier"]
  1991 -> 405 [style=dashed label="and-expression"]
  1991 -> 59 [style=dashed label="asm-declaration"]
  1991 -> 530 [style=dashed label="assignment-expression"]
  1991 -> 61 [style=dashed label="attribute-specifier"]
  1991 -> 683 [style=dashed label="attribute-specifier-seq"]
  1991 -> 406 [style=dashed label="await-expression"]
  1991 -> 407 [style=dashed label="binary-literal"]
  1991 -> 684 [style=dashed label="block-declaration"]
  1991 -> 408 [style=dashed label="boolean-literal"]
  1991 -> 409 [style=dashed label="cast-expression"]
  1991 -> 410 [style=dashed label="character-literal"]
  1991 -> 64 [style=dashed label="class-head"]
  1991 -> 65 [style=dashed label="class-key"]
  1991 -> 66 [style=dashed label="class-name"]
  1991 -> 67 [style=dashed label="class-specifier"]
  1991 -> 411 [style=dashed label="compare-expression"]
  1991 -> 685 [style=dashed label="compound-statement"]
  1991 -> 68 [style=dashed label="concept-name"]
  1991 -> 531 [style=dashed label="conditional-expression"]
  1991 -> 69 [style=dashed label="conversion-function-id"]
  1991 -> 686 [style=dashed label="coroutine-return-statement"]
  1991 -> 70 [style=dashed label="cv-qualifier"]
  1991 -> 414 [style=dashed label="decimal-floating-point-literal"]
  1991 -> 415 [style=dashed label="decimal-literal"]
  1991 -> 71 [style=dashed label="decl-specifier"]
  1991 -> 687 [style=dashed label="decl-specifier-seq"]
  1991 -> 688 [style=dashed label="declaration-statement"]
  1991 -> 77 [style=dashed label="decltype-specifier"]
  1991 -> 79 [style=dashed label="defining-type-specifier"]
  1991 -> 416 [style=dashed label="delete-expression"]
  1991 -> 417 [style=dashed label="digit"]
  1991 -> 418 [style=dashed label="digit-sequence"]
  1991 -> 80 [style=dashed label="elaborated-enum-specifier"]
  1991 -> 81 [style=dashed label="elaborated-type-specifier"]
  1991 -> 419 [style=dashed label="encoding-prefix"]
  1991 -> 83 [style=dashed label="enum-head"]
  1991 -> 84 [style=dashed label="enum-key"]
  1991 -> 85 [style=dashed label="enum-name"]
  1991 -> 86 [style=dashed label="enum-specifier"]
  1991 -> 420 [style=dashed label="equality-expression"]
  1991 -> 421 [style=dashed label="exclusive-or-expression"]
  1991 -> 269 [style=dashed label="explicit-specifier"]
  1991 -> 689 [style=dashed label="expression"]
  1991 -> 690 [style=dashed label="expression-statement"]
  1991 -> 422 [style=dashed label="floating-point-literal"]
  1991 -> 423 [style=dashed label="fold-expression"]
  1991 -> 424 [style=dashed label="fractional-constant"]
  1991 -> 92 [style=dashed label="function-specifier"]
  1991 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  1991 -> 426 [style=dashed label="hexadecimal-literal"]
  1991 -> 427 [style=dashed label="hexadecimal-prefix"]
  1991 -> 428 [style=dashed label="id-expression"]
  1991 -> 429 [style=dashed label="inclusive-or-expression"]
  1991 -> 430 [style=dashed label="integer-literal"]
  1991 -> 691 [style=dashed label="iteration-statement"]
  1991 -> 692 [style=dashed label="jump-statement"]
  1991 -> 693 [style=dashed label="labeled-statement"]
  1991 -> 431 [style=dashed label="lambda-expression"]
  1991 -> 432 [style=dashed label="lambda-introducer"]
  1991 -> 433 [style=dashed label="literal"]
  1991 -> 96 [style=dashed label="literal-operator-id"]
  1991 -> 434 [style=dashed label="logical-and-expression"]
  1991 -> 533 [style=dashed label="logical-or-expression"]
  1991 -> 436 [style=dashed label="multiplicative-expression"]
  1991 -> 100 [style=dashed label="namespace-alias"]
  1991 -> 101 [style=dashed label="namespace-alias-definition"]
  1991 -> 103 [style=dashed label="namespace-name"]
  1991 -> 437 [style=dashed label="nested-name-specifier"]
  1991 -> 438 [style=dashed label="new-expression"]
  1991 -> 439 [style=dashed label="noexcept-expression"]
  1991 -> 440 [style=dashed label="nonzero-digit"]
  1991 -> 441 [style=dashed label="octal-literal"]
  1991 -> 108 [style=dashed label="opaque-enum-declaration"]
  1991 -> 109 [style=dashed label="operator-function-id"]
  1991 -> 110 [style=dashed label="placeholder-type-specifier"]
  1991 -> 442 [style=dashed label="pm-expression"]
  1991 -> 443 [style=dashed label="pointer-literal"]
  1991 -> 444 [style=dashed label="postfix-expression"]
  1991 -> 445 [style=dashed label="primary-expression"]
  1991 -> 113 [style=dashed label="qualified-id"]
  1991 -> 446 [style=dashed label="relational-expression"]
  1991 -> 447 [style=dashed label="requires-expression"]
  1991 -> 694 [style=dashed label="selection-statement"]
  1991 -> 448 [style=dashed label="shift-expression"]
  1991 -> 114 [style=dashed label="simple-declaration"]
  1991 -> 115 [style=dashed label="simple-template-id"]
  1991 -> 449 [style=dashed label="simple-type-specifier"]
  1991 -> 2002 [style=dashed label="statement"]
  1991 -> 117 [style=dashed label="static_assert-declaration"]
  1991 -> 118 [style=dashed label="storage-class-specifier"]
  1991 -> 450 [style=dashed label="string-literal"]
  1991 -> 121 [style=dashed label="template-id"]
  1991 -> 216 [style=dashed label="template-name"]
  1991 -> 535 [style=dashed label="throw-expression"]
  1991 -> 697 [style=dashed label="try-block"]
  1991 -> 124 [style=dashed label="type-constraint"]
  1991 -> 125 [style=dashed label="type-name"]
  1991 -> 126 [style=dashed label="type-specifier"]
  1991 -> 127 [style=dashed label="typedef-name"]
  1991 -> 453 [style=dashed label="typename-specifier"]
  1991 -> 454 [style=dashed label="unary-expression"]
  1991 -> 455 [style=dashed label="unary-operator"]
  1991 -> 130 [style=dashed label="unqualified-id"]
  1991 -> 456 [style=dashed label="user-defined-character-literal"]
  1991 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  1991 -> 458 [style=dashed label="user-defined-integer-literal"]
  1991 -> 459 [style=dashed label="user-defined-literal"]
  1991 -> 460 [style=dashed label="user-defined-string-literal"]
  1991 -> 131 [style=dashed label="using-declaration"]
  1991 -> 132 [style=dashed label="using-directive"]
  1991 -> 133 [style=dashed label="using-enum-declaration"]
  1991 -> 537 [style=dashed label="yield-expression"]
  1992 [label="State 1992\n\l955 selection-statement: \"if\" \"constexpr\" '(' init-statement condition ')' statement •\l959                    | \"if\" \"constexpr\" '(' init-statement condition ')' statement • \"else\" statement\l"]
  1992 -> 2003 [style=solid label="\"else\""]
  1992 -> "1992R955d" [label="[\"else\"]", style=solid]
 "1992R955d" [label="R955", fillcolor=5, shape=diamond, style=filled]
  1992 -> "1992R955" [style=solid]
 "1992R955" [label="R955", fillcolor=3, shape=diamond, style=filled]
  1993 [label="State 1993\n\l159 compound-requirement: '{' expression '}' \"noexcept\" return-type-requirement ';' •\l"]
  1993 -> "1993R159" [style=solid]
 "1993R159" [label="R159", fillcolor=3, shape=diamond, style=filled]
  1994 [label="State 1994\n\l163 concept-name: IDENTIFIER •\l663 nested-name-specifier: nested-name-specifier IDENTIFIER • \"::\"\l1066 template-name: IDENTIFIER •\l"]
  1994 -> 726 [style=solid label="\"::\""]
  1994 -> "1994R163" [style=solid]
 "1994R163" [label="R163", fillcolor=3, shape=diamond, style=filled]
  1994 -> "1994R1066d" [label="['<']", style=solid]
 "1994R1066d" [label="R1066", fillcolor=5, shape=diamond, style=filled]
  1995 [label="State 1995\n\l387 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' identifier-list ']' •\l982 simple-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' identifier-list ']' • initializer ';'\l"]
  1995 -> 1280 [style=solid label="'='"]
  1995 -> 647 [style=solid label="'('"]
  1995 -> 939 [style=solid label="'{'"]
  1995 -> 649 [style=dashed label="brace-or-equal-initializer"]
  1995 -> 650 [style=dashed label="braced-init-list"]
  1995 -> 1859 [style=dashed label="initializer"]
  1995 -> "1995R387" [style=solid]
 "1995R387" [label="R387", fillcolor=3, shape=diamond, style=filled]
  1996 [label="State 1996\n\l385 for-range-declaration: attribute-specifier-seq decl-specifier-seq '[' identifier-list ']' •\l"]
  1996 -> "1996R385" [style=solid]
 "1996R385" [label="R385", fillcolor=3, shape=diamond, style=filled]
  1997 [label="State 1997\n\l387 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' identifier-list • ']'\l466 identifier-list: identifier-list • ',' IDENTIFIER\l"]
  1997 -> 1138 [style=solid label="','"]
  1997 -> 2004 [style=solid label="']'"]
  1998 [label="State 1998\n\l514 iteration-statement: \"for\" '(' init-statement condition ';' expression ')' statement •\l"]
  1998 -> "1998R514" [style=solid]
 "1998R514" [label="R514", fillcolor=3, shape=diamond, style=filled]
  1999 [label="State 1999\n\l388 for-range-declaration: decl-specifier-seq ref-qualifier '[' identifier-list ']' •\l"]
  1999 -> "1999R388" [style=solid]
 "1999R388" [label="R388", fillcolor=3, shape=diamond, style=filled]
  2000 [label="State 2000\n\l516 iteration-statement: \"for\" '(' init-statement for-range-declaration ':' for-range-initializer ')' statement •\l"]
  2000 -> "2000R516" [style=solid]
 "2000R516" [label="R516", fillcolor=3, shape=diamond, style=filled]
  2001 [label="State 2001\n\l958 selection-statement: \"if\" '(' init-statement condition ')' statement \"else\" statement •\l"]
  2001 -> "2001R958" [style=solid]
 "2001R958" [label="R958", fillcolor=3, shape=diamond, style=filled]
  2002 [label="State 2002\n\l957 selection-statement: \"if\" \"constexpr\" '(' condition ')' statement \"else\" statement •\l"]
  2002 -> "2002R957" [style=solid]
 "2002R957" [label="R957", fillcolor=3, shape=diamond, style=filled]
  2003 [label="State 2003\n\l959 selection-statement: \"if\" \"constexpr\" '(' init-statement condition ')' statement \"else\" • statement\l"]
  2003 -> 665 [style=solid label="IDENTIFIER"]
  2003 -> 361 [style=solid label="'+'"]
  2003 -> 362 [style=solid label="'-'"]
  2003 -> 2 [style=solid label="\"using\""]
  2003 -> 666 [style=solid label="';'"]
  2003 -> 4 [style=solid label="\"alignas\""]
  2003 -> 363 [style=solid label="'('"]
  2003 -> 364 [style=solid label="'&'"]
  2003 -> 8 [style=solid label="\"asm\""]
  2003 -> 365 [style=solid label="\"::\""]
  2003 -> 667 [style=solid label="'['"]
  2003 -> 367 [style=solid label="\"co_await\""]
  2003 -> 294 [style=solid label="'{'"]
  2003 -> 11 [style=solid label="\"virtual\""]
  2003 -> 368 [style=solid label="'0'"]
  2003 -> 369 [style=solid label="'1'"]
  2003 -> 370 [style=solid label="\"0b\""]
  2003 -> 371 [style=solid label="\"0B\""]
  2003 -> 372 [style=solid label="'\\''"]
  2003 -> 373 [style=solid label="\"false\""]
  2003 -> 374 [style=solid label="\"true\""]
  2003 -> 12 [style=solid label="\"class\""]
  2003 -> 13 [style=solid label="\"struct\""]
  2003 -> 14 [style=solid label="\"union\""]
  2003 -> 375 [style=solid label="\"noexcept\""]
  2003 -> 17 [style=solid label="\"operator\""]
  2003 -> 669 [style=solid label="\"co_return\""]
  2003 -> 18 [style=solid label="\"const\""]
  2003 -> 19 [style=solid label="\"volatile\""]
  2003 -> 20 [style=solid label="\"friend\""]
  2003 -> 21 [style=solid label="\"typedef\""]
  2003 -> 22 [style=solid label="\"constexpr\""]
  2003 -> 23 [style=solid label="\"consteval\""]
  2003 -> 24 [style=solid label="\"constinit\""]
  2003 -> 263 [style=solid label="\"inline\""]
  2003 -> 26 [style=solid label="\"decltype\""]
  2003 -> 376 [style=solid label="\"delete\""]
  2003 -> 377 [style=solid label="'.'"]
  2003 -> 378 [style=solid label="'2'"]
  2003 -> 379 [style=solid label="'3'"]
  2003 -> 380 [style=solid label="'4'"]
  2003 -> 381 [style=solid label="'5'"]
  2003 -> 382 [style=solid label="'6'"]
  2003 -> 383 [style=solid label="'7'"]
  2003 -> 384 [style=solid label="'8'"]
  2003 -> 385 [style=solid label="'9'"]
  2003 -> 27 [style=solid label="\"enum\""]
  2003 -> 185 [style=solid label="\"u8\""]
  2003 -> 186 [style=solid label="'u'"]
  2003 -> 187 [style=solid label="'U'"]
  2003 -> 188 [style=solid label="'L'"]
  2003 -> 264 [style=solid label="\"extern\""]
  2003 -> 29 [style=solid label="\"explicit\""]
  2003 -> 386 [style=solid label="'*'"]
  2003 -> 670 [style=solid label="\"default\""]
  2003 -> 671 [style=solid label="\"try\""]
  2003 -> 203 [style=solid label="'\"'"]
  2003 -> 387 [style=solid label="\"0x\""]
  2003 -> 388 [style=solid label="\"0X\""]
  2003 -> 672 [style=solid label="\"while\""]
  2003 -> 673 [style=solid label="\"do\""]
  2003 -> 674 [style=solid label="\"for\""]
  2003 -> 675 [style=solid label="\"break\""]
  2003 -> 676 [style=solid label="\"continue\""]
  2003 -> 677 [style=solid label="\"return\""]
  2003 -> 678 [style=solid label="\"goto\""]
  2003 -> 679 [style=solid label="\"case\""]
  2003 -> 680 [style=solid label="\"namespace\""]
  2003 -> 389 [style=solid label="\"requires\""]
  2003 -> 390 [style=solid label="\"new\""]
  2003 -> 391 [style=solid label="'~'"]
  2003 -> 392 [style=solid label="'!'"]
  2003 -> 393 [style=solid label="\"++\""]
  2003 -> 394 [style=solid label="\"--\""]
  2003 -> 395 [style=solid label="\"this\""]
  2003 -> 37 [style=solid label="\"auto\""]
  2003 -> 396 [style=solid label="\"nullptr\""]
  2003 -> 397 [style=solid label="\"dynamic_cast\""]
  2003 -> 398 [style=solid label="\"static_cast\""]
  2003 -> 399 [style=solid label="\"reinterpret_cast\""]
  2003 -> 400 [style=solid label="\"const_cast\""]
  2003 -> 401 [style=solid label="\"typeid\""]
  2003 -> 681 [style=solid label="\"if\""]
  2003 -> 682 [style=solid label="\"switch\""]
  2003 -> 38 [style=solid label="\"char\""]
  2003 -> 39 [style=solid label="\"char8_t\""]
  2003 -> 40 [style=solid label="\"char16_t\""]
  2003 -> 41 [style=solid label="\"char32_t\""]
  2003 -> 42 [style=solid label="\"wchar_t\""]
  2003 -> 43 [style=solid label="\"bool\""]
  2003 -> 44 [style=solid label="\"short\""]
  2003 -> 45 [style=solid label="\"int\""]
  2003 -> 46 [style=solid label="\"long\""]
  2003 -> 47 [style=solid label="\"signed\""]
  2003 -> 48 [style=solid label="\"unsigned\""]
  2003 -> 49 [style=solid label="\"float\""]
  2003 -> 50 [style=solid label="\"double\""]
  2003 -> 51 [style=solid label="\"void\""]
  2003 -> 52 [style=solid label="\"static_assert\""]
  2003 -> 53 [style=solid label="\"static\""]
  2003 -> 54 [style=solid label="\"thread_local\""]
  2003 -> 55 [style=solid label="\"mutable\""]
  2003 -> 209 [style=solid label="'R'"]
  2003 -> 528 [style=solid label="\"throw\""]
  2003 -> 56 [style=solid label="\"typename\""]
  2003 -> 402 [style=solid label="\"sizeof\""]
  2003 -> 403 [style=solid label="\"alignof\""]
  2003 -> 529 [style=solid label="\"co_yield\""]
  2003 -> 404 [style=dashed label="additive-expression"]
  2003 -> 57 [style=dashed label="alias-declaration"]
  2003 -> 58 [style=dashed label="alignment-specifier"]
  2003 -> 405 [style=dashed label="and-expression"]
  2003 -> 59 [style=dashed label="asm-declaration"]
  2003 -> 530 [style=dashed label="assignment-expression"]
  2003 -> 61 [style=dashed label="attribute-specifier"]
  2003 -> 683 [style=dashed label="attribute-specifier-seq"]
  2003 -> 406 [style=dashed label="await-expression"]
  2003 -> 407 [style=dashed label="binary-literal"]
  2003 -> 684 [style=dashed label="block-declaration"]
  2003 -> 408 [style=dashed label="boolean-literal"]
  2003 -> 409 [style=dashed label="cast-expression"]
  2003 -> 410 [style=dashed label="character-literal"]
  2003 -> 64 [style=dashed label="class-head"]
  2003 -> 65 [style=dashed label="class-key"]
  2003 -> 66 [style=dashed label="class-name"]
  2003 -> 67 [style=dashed label="class-specifier"]
  2003 -> 411 [style=dashed label="compare-expression"]
  2003 -> 685 [style=dashed label="compound-statement"]
  2003 -> 68 [style=dashed label="concept-name"]
  2003 -> 531 [style=dashed label="conditional-expression"]
  2003 -> 69 [style=dashed label="conversion-function-id"]
  2003 -> 686 [style=dashed label="coroutine-return-statement"]
  2003 -> 70 [style=dashed label="cv-qualifier"]
  2003 -> 414 [style=dashed label="decimal-floating-point-literal"]
  2003 -> 415 [style=dashed label="decimal-literal"]
  2003 -> 71 [style=dashed label="decl-specifier"]
  2003 -> 687 [style=dashed label="decl-specifier-seq"]
  2003 -> 688 [style=dashed label="declaration-statement"]
  2003 -> 77 [style=dashed label="decltype-specifier"]
  2003 -> 79 [style=dashed label="defining-type-specifier"]
  2003 -> 416 [style=dashed label="delete-expression"]
  2003 -> 417 [style=dashed label="digit"]
  2003 -> 418 [style=dashed label="digit-sequence"]
  2003 -> 80 [style=dashed label="elaborated-enum-specifier"]
  2003 -> 81 [style=dashed label="elaborated-type-specifier"]
  2003 -> 419 [style=dashed label="encoding-prefix"]
  2003 -> 83 [style=dashed label="enum-head"]
  2003 -> 84 [style=dashed label="enum-key"]
  2003 -> 85 [style=dashed label="enum-name"]
  2003 -> 86 [style=dashed label="enum-specifier"]
  2003 -> 420 [style=dashed label="equality-expression"]
  2003 -> 421 [style=dashed label="exclusive-or-expression"]
  2003 -> 269 [style=dashed label="explicit-specifier"]
  2003 -> 689 [style=dashed label="expression"]
  2003 -> 690 [style=dashed label="expression-statement"]
  2003 -> 422 [style=dashed label="floating-point-literal"]
  2003 -> 423 [style=dashed label="fold-expression"]
  2003 -> 424 [style=dashed label="fractional-constant"]
  2003 -> 92 [style=dashed label="function-specifier"]
  2003 -> 425 [style=dashed label="hexadecimal-floating-point-literal"]
  2003 -> 426 [style=dashed label="hexadecimal-literal"]
  2003 -> 427 [style=dashed label="hexadecimal-prefix"]
  2003 -> 428 [style=dashed label="id-expression"]
  2003 -> 429 [style=dashed label="inclusive-or-expression"]
  2003 -> 430 [style=dashed label="integer-literal"]
  2003 -> 691 [style=dashed label="iteration-statement"]
  2003 -> 692 [style=dashed label="jump-statement"]
  2003 -> 693 [style=dashed label="labeled-statement"]
  2003 -> 431 [style=dashed label="lambda-expression"]
  2003 -> 432 [style=dashed label="lambda-introducer"]
  2003 -> 433 [style=dashed label="literal"]
  2003 -> 96 [style=dashed label="literal-operator-id"]
  2003 -> 434 [style=dashed label="logical-and-expression"]
  2003 -> 533 [style=dashed label="logical-or-expression"]
  2003 -> 436 [style=dashed label="multiplicative-expression"]
  2003 -> 100 [style=dashed label="namespace-alias"]
  2003 -> 101 [style=dashed label="namespace-alias-definition"]
  2003 -> 103 [style=dashed label="namespace-name"]
  2003 -> 437 [style=dashed label="nested-name-specifier"]
  2003 -> 438 [style=dashed label="new-expression"]
  2003 -> 439 [style=dashed label="noexcept-expression"]
  2003 -> 440 [style=dashed label="nonzero-digit"]
  2003 -> 441 [style=dashed label="octal-literal"]
  2003 -> 108 [style=dashed label="opaque-enum-declaration"]
  2003 -> 109 [style=dashed label="operator-function-id"]
  2003 -> 110 [style=dashed label="placeholder-type-specifier"]
  2003 -> 442 [style=dashed label="pm-expression"]
  2003 -> 443 [style=dashed label="pointer-literal"]
  2003 -> 444 [style=dashed label="postfix-expression"]
  2003 -> 445 [style=dashed label="primary-expression"]
  2003 -> 113 [style=dashed label="qualified-id"]
  2003 -> 446 [style=dashed label="relational-expression"]
  2003 -> 447 [style=dashed label="requires-expression"]
  2003 -> 694 [style=dashed label="selection-statement"]
  2003 -> 448 [style=dashed label="shift-expression"]
  2003 -> 114 [style=dashed label="simple-declaration"]
  2003 -> 115 [style=dashed label="simple-template-id"]
  2003 -> 449 [style=dashed label="simple-type-specifier"]
  2003 -> 2005 [style=dashed label="statement"]
  2003 -> 117 [style=dashed label="static_assert-declaration"]
  2003 -> 118 [style=dashed label="storage-class-specifier"]
  2003 -> 450 [style=dashed label="string-literal"]
  2003 -> 121 [style=dashed label="template-id"]
  2003 -> 216 [style=dashed label="template-name"]
  2003 -> 535 [style=dashed label="throw-expression"]
  2003 -> 697 [style=dashed label="try-block"]
  2003 -> 124 [style=dashed label="type-constraint"]
  2003 -> 125 [style=dashed label="type-name"]
  2003 -> 126 [style=dashed label="type-specifier"]
  2003 -> 127 [style=dashed label="typedef-name"]
  2003 -> 453 [style=dashed label="typename-specifier"]
  2003 -> 454 [style=dashed label="unary-expression"]
  2003 -> 455 [style=dashed label="unary-operator"]
  2003 -> 130 [style=dashed label="unqualified-id"]
  2003 -> 456 [style=dashed label="user-defined-character-literal"]
  2003 -> 457 [style=dashed label="user-defined-floating-point-literal"]
  2003 -> 458 [style=dashed label="user-defined-integer-literal"]
  2003 -> 459 [style=dashed label="user-defined-literal"]
  2003 -> 460 [style=dashed label="user-defined-string-literal"]
  2003 -> 131 [style=dashed label="using-declaration"]
  2003 -> 132 [style=dashed label="using-directive"]
  2003 -> 133 [style=dashed label="using-enum-declaration"]
  2003 -> 537 [style=dashed label="yield-expression"]
  2004 [label="State 2004\n\l387 for-range-declaration: attribute-specifier-seq decl-specifier-seq ref-qualifier '[' identifier-list ']' •\l"]
  2004 -> "2004R387" [style=solid]
 "2004R387" [label="R387", fillcolor=3, shape=diamond, style=filled]
  2005 [label="State 2005\n\l959 selection-statement: \"if\" \"constexpr\" '(' init-statement condition ')' statement \"else\" statement •\l"]
  2005 -> "2005R959" [style=solid]
 "2005R959" [label="R959", fillcolor=3, shape=diamond, style=filled]
}
