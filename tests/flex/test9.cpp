
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 39
#define YY_END_OF_BUFFER 40
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[624] =
    {   0,
        0,    0,    0,    0,   40,   38,   37,   37,   38,   38,
       38,    2,    3,   38,   38,   38,   38,   38,   38,   38,
       11,   12,   37,    0,   17,    0,    0,   18,    0,   18,
        2,    0,   24,   24,   24,    2,    2,   24,    2,    2,
        0,    3,   23,   23,    3,    3,    3,    3,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       11,   36,    5,    0,    0,    0,    0,    0,   18,   27,
       27,   18,    2,    0,   18,    0,    0,   24,    1,    0,
       18,    2,    2,    2,    2,    2,    0,    0,    4,    2,
        3,   23,   18,    3,    3,    3,    3,    3,    3,    0,

       13,    0,    0,    6,    0,   16,    0,    0,    0,    0,
        0,   15,    0,    0,    0,   36,   31,    0,    0,    0,
       18,   18,    0,   18,   18,   27,    0,   27,   18,    1,
        1,   24,    1,    1,    1,    1,   18,   18,   24,   18,
        2,    2,    4,    0,    0,    0,    4,    4,   24,    4,
       24,    4,    4,    4,   18,   23,   18,    3,    3,   32,
        0,    7,    0,   35,    0,   10,    0,    0,   21,   34,
        0,   14,    0,    0,    9,   31,    0,    0,    0,    0,
       18,   18,   18,    0,    0,   27,   27,   28,   18,   26,
        1,    1,    1,    1,   24,    1,    1,    1,    1,    1,

        1,   24,    4,   25,    4,    4,    4,    4,    0,    0,
        0,    4,    4,    4,   24,    4,   24,    4,    4,    4,
       24,    4,    4,    0,   19,    4,    4,    4,    4,   23,
       32,    0,    0,   35,    0,   20,    0,   34,   33,    0,
        8,    0,    0,    0,   28,   26,    1,    1,    1,    1,
        1,    1,    1,    1,    4,    4,   25,    4,    4,    4,
        4,   25,    4,    4,    4,    4,    4,    4,    0,    0,
       19,    4,    4,   25,    4,   19,    0,   19,   24,   19,
        4,    0,    0,    0,    0,   33,    0,    0,    0,    0,
        1,    1,    4,    4,    0,   19,   29,   19,    4,    4,

       25,   19,   19,   30,   19,   24,    0,    0,    0,   22,
        0,    0,    0,   29,   19,   25,   19,   30,    0,    0,
        0,    0,    0,    0,   25,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    5,    6,
        7,    1,    8,    1,    8,    9,    1,   10,   11,   12,
       12,   12,   12,   12,   12,   13,   14,    1,    1,    1,
        1,    1,   15,    1,   16,   17,   16,   16,   18,   19,
       20,   20,   20,   20,   20,   21,   20,   20,   20,   22,
       20,   23,   20,   20,   24,   20,   20,   25,   20,   26,
        1,   27,    1,    1,   20,    1,   28,   29,   16,   16,

       30,   31,   20,   20,   20,   20,   20,   32,   20,   33,
       20,   34,   20,   35,   36,   37,   38,   39,   20,   40,
       20,   26,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[41] =
    {   0,
        1,    2,    3,    4,    5,    1,    2,    6,    1,    7,
        7,    8,    8,    8,    1,    9,    9,    9,    9,   10,
       10,   11,   10,   10,   10,   10,   12,    9,    9,    9,
        9,   10,   10,   10,   10,   10,   10,   10,   10,   10
    } ;

static const flex_int16_t yy_base[1014] =
    {   0,
        0,    0, 1693, 1692, 1686, 4998,   39,   41, 1681, 1646,
       35,   45,   81,  118, 1660,  120, 1623, 1612, 1605,  122,
        0, 4998,   49, 1635,    0,  103,  143,  179,  126,  146,
      145,  215,    0,   77,  165,  123,  209,  241,  104,  148,
     1624,    0,    0,  226,  128,  235,  126,  241, 1624, 1591,
     1613, 1601, 1602, 1593, 1558, 1551, 1529, 1562,  164, 1552,
        0,    0,    0,  237,    0,    0, 1550,  264,  275,    0,
      282,    0,  274,    0,    0, 1535, 1531,    0,  310,  294,
      344,  244,    0, 1508,    0, 1496, 1513,    0,  372,    0,
        0,    0,  408,  259,    0, 1496,    0, 1478,    0, 1498,

        0, 1477, 1461, 4998, 1462,    0, 1450, 1419, 1405, 1406,
     1417,    0, 1416, 1406, 1403,    0,    0,  306,    0,    0,
        0,  436, 1384,  459,    0,    0,  315,  327,  487,  515,
      549,    0,  322,  338,  274,  329,  583,  611,    0,    0,
        0,    0,  639,   67, 1381, 1360,    0,  675,    0,  393,
      422,  347,  306,  342,  711,    0,    0,    0,    0,    0,
     1361, 4998, 1359,    0, 1352, 4998, 1321, 1313, 4998,    0,
     1322,    0, 1319, 1309, 4998,    0,  216,    0,    0, 1296,
        0, 4998,    0,  739,    0,  448,    0,    0,    0,    0,
      404,  453,  399,  451,    0,  400,    0, 1279,    0, 1255,

        0,    0,  767,    0,  472,  455,  427,  471, 1281,  160,
     1268,  803,    0,    0,    0,  483,    0,  456,  428,  490,
        0,  478,    0,  519,  839, 1254,    0, 1233,    0,    0,
        0, 1251, 1244,    0, 1237, 4998, 1199,    0,    0, 1221,
     4998, 1197,    0,    0,    0,    0,  489,    0, 1171,    0,
     1149,    0,    0,    0,    0,    0,    0,  513,  491,  500,
      511,    0,  518,    0, 1159,    0, 1138,    0,  201,  554,
      867,    0,  895,  566,    0,  931, 1155,  959,    0,    0,
        0, 1136, 1125, 1123, 1083,    0, 1095, 1094,    0,  217,
        0,    0,    0,    0, 1094,  987,    0,    0,    0,    0,

        0, 1015, 1043,    0,    0,    0, 1092, 1091, 1090, 4998,
     1089, 1088,    0,    0, 1071,    0,    0,    0, 1087, 1085,
     1083, 1082, 1081,    0,    0, 1080, 1074, 1073, 1072, 1071,
        0, 1067, 1066, 1065, 1064, 1063,  308, 1062, 1061, 1060,
     1059, 1057, 1055, 1054, 1053, 1052, 1046, 1045, 1044, 1043,
     1039, 1038, 1037, 1036, 1035, 1034, 1033, 1032, 1031, 1029,
     1027, 1026, 1025, 1024, 1018, 1017, 1016, 1015, 1011, 1010,
     1009, 1008, 1007, 1006, 1005, 1004, 1003, 1001,  999,  998,
      997,  996,  990,  989,  988,  987,  983,  982,  981,  980,
      979,  978,  977,  976,  975,  973,  971,  970,  969,  968,

      962,  961,  960,  959,  955,  954,  953,  952,  951,  950,
      949,  948,  947,  945,  943,  942,  941,  940,  934,  933,
      932,  931,  916,  904,  897,  896,  895,  891,  890,  889,
      888,  887,  886,  885,  884,  883,  881,  879,  878,  877,
      876,  870,  869,  868,  867,  863,  862,  861,  860,  859,
      858,  857,  856,  855,  853,  851,  850,  849,  848,  842,
      841,  840,  839,  824,  812,  805,  804,  803,  788,  776,
      770,  769,  768,  767,  762,  761,  760,  759,  758,  757,
      756,  755,  753,  750,  749,  748,  741,  740,  739,  735,
      734,  733,  732,  731,  730,  729,  728,  727,  725,  723,

      722,  721,  720,  714,  713,  712,  711,  696,  684,  677,
      676,  675,  660,  648,  642,  641,  640,  639,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  625,  623,  622,
      621,  620,  614,  613,  612,  611,  607,  606,  605,  604,
      603,  602,  601,  600,  599,  597,  595,  594,  593,  592,
      586,  585,  584,  583,  580,  579,  578,  577,  576,  566,
      565,  563,  552,  551,  549,  546,  544,  542,  540,  539,
      538,  534,  509,  505,  499,  488,  480,  478,  458,  457,
      450,  448,  439,  438,  437,  420,  410,  409,  393,  381,
      372,  366,  365,  363,  356,  346,  345,  344,  341,  339,

      313,  304,  303,  296,  295,  294,  275,  260,  257,  256,
      226,  225,  188,  165,  157,  128,  127,  126,  123,   90,
       54,   47, 4998, 1103, 1115, 1126, 1138, 1142, 1147, 1154,
     1156, 1167, 1178, 1189, 1200, 1205, 1208, 1213, 1216, 1221,
     1223, 1230, 1233, 1237, 1244, 1251, 1254, 1259, 1262, 1273,
     1284, 1287, 1298, 1301, 1312, 1323, 1328, 1333, 1336, 1341,
     1345, 1352, 1359, 1364, 1369, 1376, 1383, 1386, 1391, 1396,
     1407, 1418, 1423, 1434, 1439, 1442, 1453, 1464, 1469, 1472,
     1477, 1479, 1484, 1489, 1496, 1500, 1504, 1515, 1526, 1537,
     1542, 1553, 1564, 1569, 1572, 1577, 1584, 1591, 1593, 1604,

     1615, 1626, 1637, 1648, 1653, 1658, 1660, 1667, 1672, 1683,
     1694, 1705, 1716, 1727, 1732, 1735, 1746, 1757, 1768, 1779,
     1790, 1795, 1804, 1815, 1826, 1837, 1848, 1853, 1862, 1873,
     1884, 1895, 1906, 1917, 1928, 1939, 1950, 1961, 1972, 1983,
     1994, 2005, 2016, 2027, 2038, 2049, 2060, 2071, 2082, 2093,
     2104, 2115, 2126, 2137, 2148, 2159, 2170, 2181, 2192, 2203,
     2214, 2225, 2236, 2247, 2258, 2269, 2280, 2291, 2302, 2313,
     2324, 2335, 2346, 2357, 2368, 2379, 2390, 2401, 2412, 2423,
     2434, 2445, 2456, 2467, 2478, 2489, 2500, 2511, 2522, 2533,
     2544, 2555, 2566, 2577, 2588, 2599, 2610, 2621, 2632, 2643,

     2654, 2665, 2676, 2687, 2698, 2709, 2720, 2731, 2742, 2753,
     2764, 2775, 2786, 2797, 2808, 2819, 2830, 2841, 2852, 2863,
     2874, 2885, 2896, 2907, 2918, 2929, 2940, 2951, 2962, 2973,
     2984, 2995, 3006, 3017, 3028, 3039, 3050, 3061, 3072, 3083,
     3094, 3105, 3116, 3127, 3138, 3149, 3160, 3171, 3182, 3193,
     3204, 3215, 3226, 3237, 3248, 3259, 3270, 3281, 3292, 3303,
     3314, 3325, 3336, 3347, 3358, 3369, 3380, 3391, 3402, 3413,
     3424, 3435, 3446, 3457, 3468, 3479, 3490, 3501, 3512, 3523,
     3534, 3545, 3556, 3567, 3578, 3589, 3600, 3611, 3622, 3633,
     3644, 3655, 3666, 3677, 3688, 3699, 3710, 3721, 3732, 3743,

     3754, 3765, 3776, 3787, 3798, 3809, 3820, 3831, 3842, 3853,
     3864, 3875, 3886, 3897, 3908, 3919, 3930, 3941, 3952, 3963,
     3974, 3985, 3996, 4007, 4018, 4029, 4040, 4051, 4062, 4073,
     4084, 4095, 4106, 4117, 4128, 4139, 4150, 4161, 4172, 4183,
     4194, 4205, 4216, 4227, 4238, 4249, 4260, 4271, 4282, 4293,
     4304, 4315, 4326, 4337, 4348, 4359, 4370, 4381, 4392, 4403,
     4414, 4425, 4436, 4447, 4458, 4469, 4480, 4491, 4502, 4513,
     4524, 4535, 4546, 4557, 4568, 4579, 4590, 4601, 4612, 4623,
     4634, 4645, 4656, 4667, 4678, 4689, 4700, 4711, 4722, 4733,
     4744, 4755, 4766, 4777, 4788, 4799, 4810, 4821, 4832, 4843,

     4854, 4865, 4876, 4887, 4898, 4909, 4920, 4931, 4942, 4953,
     4964, 4975, 4986
    } ;

static const flex_int16_t yy_def[1014] =
    {   0,
      623,    1,  624,  624,  623,  623,  623,  623,  625,  626,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      627,  623,  623,  625,  628,  626,  626,  623,  623,   28,
       12,  623,  629,  629,  629,  629,  629,  629,  629,  629,
      630,   13,  631,  631,  631,  631,  631,  631,  632,  626,
      623,  633,  634,  623,  623,  623,  623,  635,  623,  623,
      627,  636,  637,  626,  638,  639,  640,  623,   28,  641,
      641,  641,   12,   32,   69,  642,  643,  629,  644,  623,
      645,  629,  629,  629,  629,  629,  646,  647,  623,  629,
       13,  631,  648,  631,  631,  631,  631,  631,  631,  632,

      649,  650,  651,  623,  634,  652,  653,  623,  623,  623,
      635,  654,  655,  623,  656,  636,  657,  626,  658,  659,
       28,  623,  660,  623,   69,  641,  623,  661,  662,  663,
      644,  664,  664,  664,  664,  664,  662,  645,  665,  665,
      629,  629,  623,  666,  667,  647,   89,  623,  668,  668,
      668,  668,  668,  668,  648,  669,  669,  631,  631,  670,
      671,  623,  672,  673,  674,  623,  623,  623,  623,  675,
      655,  676,  677,  678,  623,  657,  626,  679,  680,  681,
      122,  623,   69,   69,  184,  661,  641,  682,  682,  683,
      683,  683,  683,  683,  664,  664,  664,  664,  664,  664,

      664,  665,  623,  684,  684,  684,  684,  684,  685,  666,
      686,  623,  148,  148,  668,  668,  151,  668,  668,  668,
      668,  668,  668,  623,  687,  668,  668,  668,  668,  669,
      670,  688,  689,  673,  690,  623,  623,  675,  691,  692,
      623,  693,  694,  695,  682,  683,  683,  683,  683,  683,
      683,  683,  664,  664,  203,  203,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  685,  623,
      696,  212,  623,  684,  668,  697,  698,  687,  699,  699,
      668,  700,  701,  702,  623,  691,  703,  704,  705,  626,
      683,  683,  684,  684,  706,  696,  707,  707,  273,  273,

      274,  708,  697,  709,  709,  699,  710,  711,  712,  623,
      713,  714,  715,  707,  708,  716,  716,  709,  717,  718,
      719,  720,  721,  722,  716,  723,  724,  725,  726,  727,
      728,  729,  730,  731,  732,  733,  626,  734,  735,  736,
      737,  738,  739,  740,  741,  742,  743,  744,  745,  746,
      747,  748,  749,  750,  751,  752,  753,  754,  755,  756,
      757,  758,  759,  760,  761,  762,  763,  764,  765,  766,
      767,  768,  769,  770,  771,  772,  773,  774,  775,  776,
      777,  778,  779,  780,  781,  782,  783,  784,  785,  786,
      787,  788,  789,  790,  791,  792,  793,  794,  795,  796,

      797,  798,  799,  800,  801,  802,  803,  804,  805,  806,
      807,  808,  809,  810,  811,  812,  813,  814,  815,  816,
      817,  818,  819,  820,  821,  822,  823,  824,  825,  826,
      827,  828,  829,  830,  831,  832,  833,  834,  835,  836,
      837,  838,  839,  840,  841,  842,  843,  844,  845,  846,
      847,  848,  849,  850,  851,  852,  853,  854,  855,  856,
      857,  858,  859,  860,  861,  862,  863,  864,  865,  866,
      867,  868,  869,  870,  871,  872,  873,  874,  875,  876,
      877,  878,  879,  880,  881,  882,  883,  884,  885,  886,
      887,  888,  889,  890,  891,  892,  893,  894,  895,  896,

      897,  898,  899,  900,  901,  902,  903,  904,  905,  906,
      907,  908,  909,  910,  911,  912,  913,  914,  915,  916,
      917,  918,  919,  920,  921,  922,  923,  924,  925,  926,
      927,  928,  929,  930,  931,  932,  933,  934,  935,  936,
      937,  938,  939,  940,  941,  942,  943,  944,  945,  946,
      947,  948,  949,  950,  951,  952,  953,  954,  955,  956,
      957,  958,  959,  960,  961,  962,  963,  964,  965,  966,
      967,  968,  969,  970,  971,  972,  973,  974,  975,  976,
      977,  978,  979,  980,  981,  982,  983,  984,  985,  986,
      987,  988,  989,  990,  991,  992,  993,  994,  995,  996,

      997,  998,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
     1007, 1008, 1009,  623, 1010, 1011, 1012,  623,  623, 1013,
      623,  623,    0,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623
    } ;

static const flex_int16_t yy_nxt[5039] =
    {   0,
        6,    7,    8,    9,   10,    6,    6,    6,   11,   12,
       13,   13,   13,   13,    6,    6,    6,    6,    6,    6,
       14,    6,   15,   16,    6,    6,    6,    6,    6,    6,
       17,    6,   18,    6,    6,    6,   19,   20,    6,    6,
       23,   23,   23,   23,   28,   28,   28,   28,   28,   29,
       23,   23,  241,   30,   31,   31,   31,   32,   32,  175,
       33,   34,   35,   33,   33,   36,   33,   33,   37,   38,
       39,  209,   33,   34,   35,   33,   40,   33,   33,   33,
       33,   33,   37,   33,   38,   41,   79,   79,  211,   30,
       42,   42,   42,   42,   42,  241,   43,   43,   44,   43,

       43,   45,   43,   43,   46,   43,   47,   63,   43,   43,
       44,   43,   48,   43,   43,   43,   43,   43,   46,   43,
       43,   49,   50,   53,   50,   58,   50,   90,  166,   27,
       29,  162,  175,  241,   59,   73,   73,   73,   74,   74,
       51,   90,   54,   82,   60,   26,   83,   26,   94,   99,
      623,   95,   64,   64,   64,   75,   75,   75,   75,   75,
       83,   33,  166,   99,  209,   95,   65,  113,   50,   33,
      104,   83,   80,   33,   81,   81,   81,   81,   81,   82,
       66,  211,  623,   67,   33,   83,  114,   68,   69,   69,
       69,   69,   69,  162,   70,   70,   71,   72,   70,   72,

       70,   70,   70,   70,   70,  209,   70,   70,   71,   72,
       72,   70,   70,   70,   70,   70,   70,   70,   70,   76,
       63,   63,  211,   30,   32,   32,   32,   32,   32,   84,
      175,  241,   77,   80,   85,   93,   93,   93,   93,   93,
       86,   63,   27,   27,   77,   87,  118,  118,  118,   88,
       89,   89,   89,   89,   89,   96,   89,   89,   89,   89,
       97,  166,  104,   27,   95,  162,   98,  141,   89,   89,
       89,   89,   94,  122,  122,  122,  122,  122,   95,  123,
      175,  141,  158,  124,  125,  125,  125,  125,  125,  127,
       33,  128,  128,  128,  128,  128,  158,  201,   33,  241,

      166,  104,   33,  129,  129,  129,  129,  129,  162,  175,
       63,  201,   63,   33,  130,  177,  177,  177,  241,  131,
      131,   78,   78,   78,  184,  184,  184,  184,  184,  229,
      133,  185,   27,  134,   27,  135,  186,  186,  186,  186,
      186,  136,  196,  229,  166,  197,  104,  134,  137,  162,
      175,  241,  197,  138,  138,  138,  138,  138,  198,  197,
      196,  166,  140,  199,  140,  223,  197,  226,  104,  200,
      162,  175,  227,  222,  140,  140,  145,  241,  228,  223,
      146,  147,  147,  147,  147,  147,  166,  148,  148,  148,
      148,  149,  150,  151,  149,  152,  149,  153,  104,  148,

      148,  148,  148,  154,  149,  149,  149,  149,  149,  152,
      149,  149,  137,  222,  162,  175,  223,  155,  155,  155,
      155,  155,  252,  253,  247,  241,  157,  248,  157,  224,
      223,  225,  225,  225,  225,  225,  252,  253,  157,  157,
      180,  248,  166,  104,  162,  181,  181,  181,  181,  181,
      268,  229,  185,  175,  182,  241,  182,  186,  186,  186,
      186,  186,  166,  104,  268,  229,  182,  182,  122,  122,
      122,  122,  122,  249,  248,  265,  226,  182,  250,  182,
      266,  227,  247,  162,  251,  175,  267,  228,  248,  182,
      182,  137,  263,  241,  264,  264,  137,  137,  137,  137,

      137,  275,  263,  222,  166,  189,  223,  189,  264,  264,
      104,  265,  291,  223,  162,  275,  266,  189,  189,  130,
      223,  222,  267,  268,  130,  130,  291,  223,  276,  276,
      276,  276,  276,  263,  264,  191,  264,  268,  192,  175,
      193,  293,  263,  241,  166,  104,  194,  162,  264,  175,
      264,  241,  192,  130,  166,  293,  104,  162,  131,  131,
       78,   78,   78,  271,  271,  271,  271,  271,  175,  133,
      241,  166,  134,  224,  135,  302,  302,  302,  302,  302,
      136,  104,  162,  175,  241,  166,  134,  137,  104,  162,
      175,  241,  137,  137,  137,  137,  137,  166,  104,  162,

      175,  189,  241,  189,  166,  104,  162,  175,  241,  166,
      104,  162,  175,  189,  189,  137,  241,  166,  104,  162,
      138,  138,  138,  138,  138,  175,  241,  166,  104,  140,
      162,  140,  175,  241,  166,  104,  162,  175,  241,  166,
      104,  140,  140,   87,  162,  175,  241,  166,  143,  143,
      143,  143,  143,  104,  203,  203,  203,  203,  204,  205,
      204,  204,  206,  204,  207,  162,  203,  203,  203,  203,
      208,  204,  204,  204,  204,  204,  206,  204,  204,  145,
      175,  241,  166,  146,  213,  213,  213,  213,  213,  104,
      214,  214,  214,  214,  215,  216,  217,  215,  218,  215,

      219,  162,  214,  214,  214,  214,  220,  215,  215,  215,
      215,  215,  218,  215,  215,  137,  175,  241,  166,  104,
      155,  155,  155,  155,  155,  162,  175,  241,  166,  157,
      104,  157,  162,  175,  241,  166,  104,  162,  175,  241,
      166,  157,  157,  185,  104,  162,  175,  623,  185,  185,
      185,  185,  185,  241,  166,  104,   70,   70,  162,   70,
      175,  241,  166,  104,  162,  175,  241,  166,   70,   70,
       70,   87,  104,  162,  175,  241,  255,  255,  255,  255,
      255,  166,  256,  256,  256,  256,  257,  258,  257,  257,
      259,  257,  260,  104,  256,  256,  256,  256,  261,  257,

      257,  257,  257,  257,  259,  257,  257,  145,  162,  175,
      241,  146,  272,  272,  272,  272,  272,  166,  273,  273,
      273,  273,  204,  205,  274,  204,  206,  204,  207,  104,
      273,  273,  273,  273,  208,  204,  204,  204,  204,  204,
      206,  204,  204,  277,  162,  175,  241,  166,  278,  278,
      278,  278,  278,  104,  162,  175,  241,  280,  166,  280,
      104,  162,  175,  241,  166,  104,  162,  175,  241,  280,
      280,  295,  166,  104,  162,  175,  296,  296,  296,  296,
      296,  241,  166,  104,  162,  298,  175,  298,  241,  166,
      104,  162,  175,  241,  166,  104,  162,  298,  298,  145,

      175,  241,  166,  146,  299,  299,  299,  299,  299,  104,
      300,  300,  300,  300,  257,  258,  301,  257,  259,  257,
      260,  162,  300,  300,  300,  300,  261,  257,  257,  257,
      257,  257,  259,  257,  257,  277,  175,  241,  166,  104,
      303,  303,  303,  303,  303,  162,  175,  241,  166,  305,
      104,  305,  162,  175,  241,  166,  104,  162,  175,  241,
      166,  305,  305,  277,  104,  162,  175,  241,  278,  278,
      278,  278,  278,  166,  104,  162,  175,  280,  241,  280,
      166,  104,  162,  175,  241,  166,  104,  162,  175,  280,
      280,  295,  241,  166,  104,  162,  296,  296,  296,  296,

      296,  175,  241,  166,  104,  298,  162,  298,  175,  241,
      166,  104,  162,  175,  241,  166,  104,  298,  298,  277,
      162,  175,  241,  166,  315,  315,  315,  315,  315,  104,
      162,  175,  241,  317,  166,  317,  104,  162,  175,  241,
      166,  104,  162,  175,  241,  317,  317,  277,  166,  104,
      162,  175,  303,  303,  303,  303,  303,  241,  166,  104,
      162,  305,  175,  305,  241,  166,  104,  162,  175,  241,
      166,  104,  162,  305,  305,  277,  175,  241,  166,  104,
      315,  315,  315,  315,  315,  162,  175,  241,  166,  317,
      104,  317,  162,  175,  241,  166,  104,  162,  295,  175,

      241,  317,  317,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   24,   24,  310,   24,   24,
       24,   24,   24,   24,   24,   24,   26,   26,  166,   26,
      104,   26,   26,   26,   26,   26,   26,   26,   61,   61,
       61,  162,   61,   61,   61,   61,   61,   61,   61,   61,
       62,   62,   62,   78,   78,   78,   78,   78,   91,  277,
       91,   91,   92,   92,   92,   92,   92,  100,  100,  294,
      100,  100,  100,  100,  100,  100,  100,  100,  103,  294,
      292,  103,  103,  103,  103,  103,  103,  103,  103,  105,
      105,  292,  105,  105,  105,  105,  105,  105,  105,  105,

      111,  111,  175,  111,  111,  111,  111,  111,  111,  111,
      111,  116,  116,  116,  116,  116,  117,  117,  117,  119,
      119,  119,  120,  120,  120,  121,  241,  121,  121,  126,
      126,  126,  126,  126,   74,  285,   74,   74,  129,  129,
      129,  132,  166,  132,  132,  132,  132,  132,  139,  104,
      139,  139,  139,  139,  139,  143,  162,  143,  143,  143,
      144,  144,  144,  156,  281,  156,  156,  156,  156,  156,
      160,  160,  160,  161,  281,  270,  161,  161,  161,  161,
      161,  161,  161,  161,  163,  209,  254,  163,  163,  163,
      163,  163,  163,  163,  163,  164,  164,  164,  165,  254,

      180,  165,  165,  165,  165,  165,  165,  165,  165,  170,
      170,  170,  171,  171,  175,  171,  171,  171,  171,  171,
      171,  171,  171,  174,  241,  172,  174,  174,  174,  174,
      174,  174,  174,  174,  176,  176,  176,  176,  176,  178,
      178,  178,  179,  179,  179,  183,  237,  183,  183,  187,
      236,  187,  187,  187,  187,  187,  188,  166,  188,  188,
      188,  188,  188,  190,  104,  190,  162,  190,  190,  190,
      195,  195,  195,  195,  195,  202,  202,  202,  202,  202,
      210,  211,  210,  210,  210,  145,  210,  212,  123,  212,
      212,  212,  221,  221,  221,  221,  221,  230,  230,  230,

      230,  230,  231,  231,  231,  231,  231,  232,  175,  173,
      232,  232,  232,  232,  232,  232,  232,  232,  233,  172,
      112,  233,  233,  233,  233,  233,  233,  233,  233,  234,
      234,  234,  234,  234,  235,  169,  168,  235,  235,  235,
      235,  235,  235,  235,  235,  238,  238,  238,  238,  238,
      239,  239,  239,  240,  167,  166,  240,  240,  240,  240,
      240,  240,  240,  240,  242,  106,  104,  242,  242,  242,
      242,  242,  242,  242,  242,  243,  243,  243,  244,  244,
      244,  181,  162,  181,  181,  245,  245,  245,  245,  245,
      246,  246,  246,  246,  246,  262,  262,  262,  262,  262,

      269,  101,  269,  269,  269,  271,  271,  271,  279,  159,
      279,  279,  279,  279,  279,  282,  159,   87,  282,  282,
      282,  282,  282,  282,  282,  282,  283,  142,  142,  283,
      283,  283,  283,  283,  283,  283,  283,  284,   80,   76,
      284,  284,  284,  284,  284,  284,  284,  284,  286,  286,
      286,  286,  286,  287,   67,  115,  287,  287,  287,  287,
      287,  287,  287,  287,  288,  112,  110,  288,  288,  288,
      288,  288,  288,  288,  288,  289,  289,  289,  290,  290,
      290,  297,  109,  297,  297,  297,  297,  297,  304,  108,
      304,  304,  304,  304,  304,  303,  107,  303,  303,  306,

      306,  306,  306,  306,  307,  106,  104,  307,  307,  307,
      307,  307,  307,  307,  307,  308,  102,   27,  308,  308,
      308,  308,  308,  308,  308,  308,  309,  101,   41,  309,
      309,  309,  309,  309,  309,  309,  309,  311,   25,   57,
      311,  311,  311,  311,  311,  311,  311,  311,  312,   56,
       55,  312,  312,  312,  312,  312,  312,  312,  312,  313,
      313,  313,  296,   52,  296,  296,  314,  314,  314,  314,
      314,  316,   27,  316,  316,  316,  316,  316,  318,  318,
      318,  318,  318,  319,   25,  623,  319,  319,  319,  319,
      319,  319,  319,  319,  320,   22,   22,  320,  320,  320,

      320,  320,  320,  320,  320,  321,  623,  623,  321,  321,
      321,  321,  321,  321,  321,  321,  322,  623,  623,  322,
      322,  322,  322,  322,  322,  322,  322,  323,  623,  623,
      323,  323,  323,  323,  323,  323,  323,  323,  324,  324,
      324,  325,  325,  325,  325,  325,  326,  623,  623,  326,
      326,  326,  326,  326,  326,  326,  326,  327,  623,  623,
      327,  327,  327,  327,  327,  327,  327,  327,  328,  623,
      623,  328,  328,  328,  328,  328,  328,  328,  328,  329,
      623,  623,  329,  329,  329,  329,  329,  329,  329,  329,
      330,  623,  623,  330,  330,  330,  330,  330,  330,  330,

      330,  331,  331,  331,  332,  623,  623,  332,  332,  332,
      332,  332,  332,  332,  332,  333,  623,  623,  333,  333,
      333,  333,  333,  333,  333,  333,  334,  623,  623,  334,
      334,  334,  334,  334,  334,  334,  334,  335,  623,  623,
      335,  335,  335,  335,  335,  335,  335,  335,  336,  623,
      623,  336,  336,  336,  336,  336,  336,  336,  336,  337,
      337,  337,  338,  623,  623,  338,  338,  338,  338,  338,
      338,  338,  338,  339,  623,  623,  339,  339,  339,  339,
      339,  339,  339,  339,  340,  623,  623,  340,  340,  340,
      340,  340,  340,  340,  340,  341,  623,  623,  341,  341,

      341,  341,  341,  341,  341,  341,  342,  623,  623,  342,
      342,  342,  342,  342,  342,  342,  342,  343,  623,  623,
      343,  343,  343,  343,  343,  343,  343,  343,  344,  623,
      623,  344,  344,  344,  344,  344,  344,  344,  344,  345,
      623,  623,  345,  345,  345,  345,  345,  345,  345,  345,
      346,  623,  623,  346,  346,  346,  346,  346,  346,  346,
      346,  347,  623,  623,  347,  347,  347,  347,  347,  347,
      347,  347,  348,  623,  623,  348,  348,  348,  348,  348,
      348,  348,  348,  349,  623,  623,  349,  349,  349,  349,
      349,  349,  349,  349,  350,  623,  623,  350,  350,  350,

      350,  350,  350,  350,  350,  351,  623,  623,  351,  351,
      351,  351,  351,  351,  351,  351,  352,  623,  623,  352,
      352,  352,  352,  352,  352,  352,  352,  353,  623,  623,
      353,  353,  353,  353,  353,  353,  353,  353,  354,  623,
      623,  354,  354,  354,  354,  354,  354,  354,  354,  355,
      623,  623,  355,  355,  355,  355,  355,  355,  355,  355,
      356,  623,  623,  356,  356,  356,  356,  356,  356,  356,
      356,  357,  623,  623,  357,  357,  357,  357,  357,  357,
      357,  357,  358,  623,  623,  358,  358,  358,  358,  358,
      358,  358,  358,  359,  623,  623,  359,  359,  359,  359,

      359,  359,  359,  359,  360,  623,  623,  360,  360,  360,
      360,  360,  360,  360,  360,  361,  623,  623,  361,  361,
      361,  361,  361,  361,  361,  361,  362,  623,  623,  362,
      362,  362,  362,  362,  362,  362,  362,  363,  623,  623,
      363,  363,  363,  363,  363,  363,  363,  363,  364,  623,
      623,  364,  364,  364,  364,  364,  364,  364,  364,  365,
      623,  623,  365,  365,  365,  365,  365,  365,  365,  365,
      366,  623,  623,  366,  366,  366,  366,  366,  366,  366,
      366,  367,  623,  623,  367,  367,  367,  367,  367,  367,
      367,  367,  368,  623,  623,  368,  368,  368,  368,  368,

      368,  368,  368,  369,  623,  623,  369,  369,  369,  369,
      369,  369,  369,  369,  370,  623,  623,  370,  370,  370,
      370,  370,  370,  370,  370,  371,  623,  623,  371,  371,
      371,  371,  371,  371,  371,  371,  372,  623,  623,  372,
      372,  372,  372,  372,  372,  372,  372,  373,  623,  623,
      373,  373,  373,  373,  373,  373,  373,  373,  374,  623,
      623,  374,  374,  374,  374,  374,  374,  374,  374,  375,
      623,  623,  375,  375,  375,  375,  375,  375,  375,  375,
      376,  623,  623,  376,  376,  376,  376,  376,  376,  376,
      376,  377,  623,  623,  377,  377,  377,  377,  377,  377,

      377,  377,  378,  623,  623,  378,  378,  378,  378,  378,
      378,  378,  378,  379,  623,  623,  379,  379,  379,  379,
      379,  379,  379,  379,  380,  623,  623,  380,  380,  380,
      380,  380,  380,  380,  380,  381,  623,  623,  381,  381,
      381,  381,  381,  381,  381,  381,  382,  623,  623,  382,
      382,  382,  382,  382,  382,  382,  382,  383,  623,  623,
      383,  383,  383,  383,  383,  383,  383,  383,  384,  623,
      623,  384,  384,  384,  384,  384,  384,  384,  384,  385,
      623,  623,  385,  385,  385,  385,  385,  385,  385,  385,
      386,  623,  623,  386,  386,  386,  386,  386,  386,  386,

      386,  387,  623,  623,  387,  387,  387,  387,  387,  387,
      387,  387,  388,  623,  623,  388,  388,  388,  388,  388,
      388,  388,  388,  389,  623,  623,  389,  389,  389,  389,
      389,  389,  389,  389,  390,  623,  623,  390,  390,  390,
      390,  390,  390,  390,  390,  391,  623,  623,  391,  391,
      391,  391,  391,  391,  391,  391,  392,  623,  623,  392,
      392,  392,  392,  392,  392,  392,  392,  393,  623,  623,
      393,  393,  393,  393,  393,  393,  393,  393,  394,  623,
      623,  394,  394,  394,  394,  394,  394,  394,  394,  395,
      623,  623,  395,  395,  395,  395,  395,  395,  395,  395,

      396,  623,  623,  396,  396,  396,  396,  396,  396,  396,
      396,  397,  623,  623,  397,  397,  397,  397,  397,  397,
      397,  397,  398,  623,  623,  398,  398,  398,  398,  398,
      398,  398,  398,  399,  623,  623,  399,  399,  399,  399,
      399,  399,  399,  399,  400,  623,  623,  400,  400,  400,
      400,  400,  400,  400,  400,  401,  623,  623,  401,  401,
      401,  401,  401,  401,  401,  401,  402,  623,  623,  402,
      402,  402,  402,  402,  402,  402,  402,  403,  623,  623,
      403,  403,  403,  403,  403,  403,  403,  403,  404,  623,
      623,  404,  404,  404,  404,  404,  404,  404,  404,  405,

      623,  623,  405,  405,  405,  405,  405,  405,  405,  405,
      406,  623,  623,  406,  406,  406,  406,  406,  406,  406,
      406,  407,  623,  623,  407,  407,  407,  407,  407,  407,
      407,  407,  408,  623,  623,  408,  408,  408,  408,  408,
      408,  408,  408,  409,  623,  623,  409,  409,  409,  409,
      409,  409,  409,  409,  410,  623,  623,  410,  410,  410,
      410,  410,  410,  410,  410,  411,  623,  623,  411,  411,
      411,  411,  411,  411,  411,  411,  412,  623,  623,  412,
      412,  412,  412,  412,  412,  412,  412,  413,  623,  623,
      413,  413,  413,  413,  413,  413,  413,  413,  414,  623,

      623,  414,  414,  414,  414,  414,  414,  414,  414,  415,
      623,  623,  415,  415,  415,  415,  415,  415,  415,  415,
      416,  623,  623,  416,  416,  416,  416,  416,  416,  416,
      416,  417,  623,  623,  417,  417,  417,  417,  417,  417,
      417,  417,  418,  623,  623,  418,  418,  418,  418,  418,
      418,  418,  418,  419,  623,  623,  419,  419,  419,  419,
      419,  419,  419,  419,  420,  623,  623,  420,  420,  420,
      420,  420,  420,  420,  420,  421,  623,  623,  421,  421,
      421,  421,  421,  421,  421,  421,  422,  623,  623,  422,
      422,  422,  422,  422,  422,  422,  422,  423,  623,  623,

      423,  423,  423,  423,  423,  423,  423,  423,  424,  623,
      623,  424,  424,  424,  424,  424,  424,  424,  424,  425,
      623,  623,  425,  425,  425,  425,  425,  425,  425,  425,
      426,  623,  623,  426,  426,  426,  426,  426,  426,  426,
      426,  427,  623,  623,  427,  427,  427,  427,  427,  427,
      427,  427,  428,  623,  623,  428,  428,  428,  428,  428,
      428,  428,  428,  429,  623,  623,  429,  429,  429,  429,
      429,  429,  429,  429,  430,  623,  623,  430,  430,  430,
      430,  430,  430,  430,  430,  431,  623,  623,  431,  431,
      431,  431,  431,  431,  431,  431,  432,  623,  623,  432,

      432,  432,  432,  432,  432,  432,  432,  433,  623,  623,
      433,  433,  433,  433,  433,  433,  433,  433,  434,  623,
      623,  434,  434,  434,  434,  434,  434,  434,  434,  435,
      623,  623,  435,  435,  435,  435,  435,  435,  435,  435,
      436,  623,  623,  436,  436,  436,  436,  436,  436,  436,
      436,  437,  623,  623,  437,  437,  437,  437,  437,  437,
      437,  437,  438,  623,  623,  438,  438,  438,  438,  438,
      438,  438,  438,  439,  623,  623,  439,  439,  439,  439,
      439,  439,  439,  439,  440,  623,  623,  440,  440,  440,
      440,  440,  440,  440,  440,  441,  623,  623,  441,  441,

      441,  441,  441,  441,  441,  441,  442,  623,  623,  442,
      442,  442,  442,  442,  442,  442,  442,  443,  623,  623,
      443,  443,  443,  443,  443,  443,  443,  443,  444,  623,
      623,  444,  444,  444,  444,  444,  444,  444,  444,  445,
      623,  623,  445,  445,  445,  445,  445,  445,  445,  445,
      446,  623,  623,  446,  446,  446,  446,  446,  446,  446,
      446,  447,  623,  623,  447,  447,  447,  447,  447,  447,
      447,  447,  448,  623,  623,  448,  448,  448,  448,  448,
      448,  448,  448,  449,  623,  623,  449,  449,  449,  449,
      449,  449,  449,  449,  450,  623,  623,  450,  450,  450,

      450,  450,  450,  450,  450,  451,  623,  623,  451,  451,
      451,  451,  451,  451,  451,  451,  452,  623,  623,  452,
      452,  452,  452,  452,  452,  452,  452,  453,  623,  623,
      453,  453,  453,  453,  453,  453,  453,  453,  454,  623,
      623,  454,  454,  454,  454,  454,  454,  454,  454,  455,
      623,  623,  455,  455,  455,  455,  455,  455,  455,  455,
      456,  623,  623,  456,  456,  456,  456,  456,  456,  456,
      456,  457,  623,  623,  457,  457,  457,  457,  457,  457,
      457,  457,  458,  623,  623,  458,  458,  458,  458,  458,
      458,  458,  458,  459,  623,  623,  459,  459,  459,  459,

      459,  459,  459,  459,  460,  623,  623,  460,  460,  460,
      460,  460,  460,  460,  460,  461,  623,  623,  461,  461,
      461,  461,  461,  461,  461,  461,  462,  623,  623,  462,
      462,  462,  462,  462,  462,  462,  462,  463,  623,  623,
      463,  463,  463,  463,  463,  463,  463,  463,  464,  623,
      623,  464,  464,  464,  464,  464,  464,  464,  464,  465,
      623,  623,  465,  465,  465,  465,  465,  465,  465,  465,
      466,  623,  623,  466,  466,  466,  466,  466,  466,  466,
      466,  467,  623,  623,  467,  467,  467,  467,  467,  467,
      467,  467,  468,  623,  623,  468,  468,  468,  468,  468,

      468,  468,  468,  469,  623,  623,  469,  469,  469,  469,
      469,  469,  469,  469,  470,  623,  623,  470,  470,  470,
      470,  470,  470,  470,  470,  471,  623,  623,  471,  471,
      471,  471,  471,  471,  471,  471,  472,  623,  623,  472,
      472,  472,  472,  472,  472,  472,  472,  473,  623,  623,
      473,  473,  473,  473,  473,  473,  473,  473,  474,  623,
      623,  474,  474,  474,  474,  474,  474,  474,  474,  475,
      623,  623,  475,  475,  475,  475,  475,  475,  475,  475,
      476,  623,  623,  476,  476,  476,  476,  476,  476,  476,
      476,  477,  623,  623,  477,  477,  477,  477,  477,  477,

      477,  477,  478,  623,  623,  478,  478,  478,  478,  478,
      478,  478,  478,  479,  623,  623,  479,  479,  479,  479,
      479,  479,  479,  479,  480,  623,  623,  480,  480,  480,
      480,  480,  480,  480,  480,  481,  623,  623,  481,  481,
      481,  481,  481,  481,  481,  481,  482,  623,  623,  482,
      482,  482,  482,  482,  482,  482,  482,  483,  623,  623,
      483,  483,  483,  483,  483,  483,  483,  483,  484,  623,
      623,  484,  484,  484,  484,  484,  484,  484,  484,  485,
      623,  623,  485,  485,  485,  485,  485,  485,  485,  485,
      486,  623,  623,  486,  486,  486,  486,  486,  486,  486,

      486,  487,  623,  623,  487,  487,  487,  487,  487,  487,
      487,  487,  488,  623,  623,  488,  488,  488,  488,  488,
      488,  488,  488,  489,  623,  623,  489,  489,  489,  489,
      489,  489,  489,  489,  490,  623,  623,  490,  490,  490,
      490,  490,  490,  490,  490,  491,  623,  623,  491,  491,
      491,  491,  491,  491,  491,  491,  492,  623,  623,  492,
      492,  492,  492,  492,  492,  492,  492,  493,  623,  623,
      493,  493,  493,  493,  493,  493,  493,  493,  494,  623,
      623,  494,  494,  494,  494,  494,  494,  494,  494,  495,
      623,  623,  495,  495,  495,  495,  495,  495,  495,  495,

      496,  623,  623,  496,  496,  496,  496,  496,  496,  496,
      496,  497,  623,  623,  497,  497,  497,  497,  497,  497,
      497,  497,  498,  623,  623,  498,  498,  498,  498,  498,
      498,  498,  498,  499,  623,  623,  499,  499,  499,  499,
      499,  499,  499,  499,  500,  623,  623,  500,  500,  500,
      500,  500,  500,  500,  500,  501,  623,  623,  501,  501,
      501,  501,  501,  501,  501,  501,  502,  623,  623,  502,
      502,  502,  502,  502,  502,  502,  502,  503,  623,  623,
      503,  503,  503,  503,  503,  503,  503,  503,  504,  623,
      623,  504,  504,  504,  504,  504,  504,  504,  504,  505,

      623,  623,  505,  505,  505,  505,  505,  505,  505,  505,
      506,  623,  623,  506,  506,  506,  506,  506,  506,  506,
      506,  507,  623,  623,  507,  507,  507,  507,  507,  507,
      507,  507,  508,  623,  623,  508,  508,  508,  508,  508,
      508,  508,  508,  509,  623,  623,  509,  509,  509,  509,
      509,  509,  509,  509,  510,  623,  623,  510,  510,  510,
      510,  510,  510,  510,  510,  511,  623,  623,  511,  511,
      511,  511,  511,  511,  511,  511,  512,  623,  623,  512,
      512,  512,  512,  512,  512,  512,  512,  513,  623,  623,
      513,  513,  513,  513,  513,  513,  513,  513,  514,  623,

      623,  514,  514,  514,  514,  514,  514,  514,  514,  515,
      623,  623,  515,  515,  515,  515,  515,  515,  515,  515,
      516,  623,  623,  516,  516,  516,  516,  516,  516,  516,
      516,  517,  623,  623,  517,  517,  517,  517,  517,  517,
      517,  517,  518,  623,  623,  518,  518,  518,  518,  518,
      518,  518,  518,  519,  623,  623,  519,  519,  519,  519,
      519,  519,  519,  519,  520,  623,  623,  520,  520,  520,
      520,  520,  520,  520,  520,  521,  623,  623,  521,  521,
      521,  521,  521,  521,  521,  521,  522,  623,  623,  522,
      522,  522,  522,  522,  522,  522,  522,  523,  623,  623,

      523,  523,  523,  523,  523,  523,  523,  523,  524,  623,
      623,  524,  524,  524,  524,  524,  524,  524,  524,  525,
      623,  623,  525,  525,  525,  525,  525,  525,  525,  525,
      526,  623,  623,  526,  526,  526,  526,  526,  526,  526,
      526,  527,  623,  623,  527,  527,  527,  527,  527,  527,
      527,  527,  528,  623,  623,  528,  528,  528,  528,  528,
      528,  528,  528,  529,  623,  623,  529,  529,  529,  529,
      529,  529,  529,  529,  530,  623,  623,  530,  530,  530,
      530,  530,  530,  530,  530,  531,  623,  623,  531,  531,
      531,  531,  531,  531,  531,  531,  532,  623,  623,  532,

      532,  532,  532,  532,  532,  532,  532,  533,  623,  623,
      533,  533,  533,  533,  533,  533,  533,  533,  534,  623,
      623,  534,  534,  534,  534,  534,  534,  534,  534,  535,
      623,  623,  535,  535,  535,  535,  535,  535,  535,  535,
      536,  623,  623,  536,  536,  536,  536,  536,  536,  536,
      536,  537,  623,  623,  537,  537,  537,  537,  537,  537,
      537,  537,  538,  623,  623,  538,  538,  538,  538,  538,
      538,  538,  538,  539,  623,  623,  539,  539,  539,  539,
      539,  539,  539,  539,  540,  623,  623,  540,  540,  540,
      540,  540,  540,  540,  540,  541,  623,  623,  541,  541,

      541,  541,  541,  541,  541,  541,  542,  623,  623,  542,
      542,  542,  542,  542,  542,  542,  542,  543,  623,  623,
      543,  543,  543,  543,  543,  543,  543,  543,  544,  623,
      623,  544,  544,  544,  544,  544,  544,  544,  544,  545,
      623,  623,  545,  545,  545,  545,  545,  545,  545,  545,
      546,  623,  623,  546,  546,  546,  546,  546,  546,  546,
      546,  547,  623,  623,  547,  547,  547,  547,  547,  547,
      547,  547,  548,  623,  623,  548,  548,  548,  548,  548,
      548,  548,  548,  549,  623,  623,  549,  549,  549,  549,
      549,  549,  549,  549,  550,  623,  623,  550,  550,  550,

      550,  550,  550,  550,  550,  551,  623,  623,  551,  551,
      551,  551,  551,  551,  551,  551,  552,  623,  623,  552,
      552,  552,  552,  552,  552,  552,  552,  553,  623,  623,
      553,  553,  553,  553,  553,  553,  553,  553,  554,  623,
      623,  554,  554,  554,  554,  554,  554,  554,  554,  555,
      623,  623,  555,  555,  555,  555,  555,  555,  555,  555,
      556,  623,  623,  556,  556,  556,  556,  556,  556,  556,
      556,  557,  623,  623,  557,  557,  557,  557,  557,  557,
      557,  557,  558,  623,  623,  558,  558,  558,  558,  558,
      558,  558,  558,  559,  623,  623,  559,  559,  559,  559,

      559,  559,  559,  559,  560,  623,  623,  560,  560,  560,
      560,  560,  560,  560,  560,  561,  623,  623,  561,  561,
      561,  561,  561,  561,  561,  561,  562,  623,  623,  562,
      562,  562,  562,  562,  562,  562,  562,  563,  623,  623,
      563,  563,  563,  563,  563,  563,  563,  563,  564,  623,
      623,  564,  564,  564,  564,  564,  564,  564,  564,  565,
      623,  623,  565,  565,  565,  565,  565,  565,  565,  565,
      566,  623,  623,  566,  566,  566,  566,  566,  566,  566,
      566,  567,  623,  623,  567,  567,  567,  567,  567,  567,
      567,  567,  568,  623,  623,  568,  568,  568,  568,  568,

      568,  568,  568,  569,  623,  623,  569,  569,  569,  569,
      569,  569,  569,  569,  570,  623,  623,  570,  570,  570,
      570,  570,  570,  570,  570,  571,  623,  623,  571,  571,
      571,  571,  571,  571,  571,  571,  572,  623,  623,  572,
      572,  572,  572,  572,  572,  572,  572,  573,  623,  623,
      573,  573,  573,  573,  573,  573,  573,  573,  574,  623,
      623,  574,  574,  574,  574,  574,  574,  574,  574,  575,
      623,  623,  575,  575,  575,  575,  575,  575,  575,  575,
      576,  623,  623,  576,  576,  576,  576,  576,  576,  576,
      576,  577,  623,  623,  577,  577,  577,  577,  577,  577,

      577,  577,  578,  623,  623,  578,  578,  578,  578,  578,
      578,  578,  578,  579,  623,  623,  579,  579,  579,  579,
      579,  579,  579,  579,  580,  623,  623,  580,  580,  580,
      580,  580,  580,  580,  580,  581,  623,  623,  581,  581,
      581,  581,  581,  581,  581,  581,  582,  623,  623,  582,
      582,  582,  582,  582,  582,  582,  582,  583,  623,  623,
      583,  583,  583,  583,  583,  583,  583,  583,  584,  623,
      623,  584,  584,  584,  584,  584,  584,  584,  584,  585,
      623,  623,  585,  585,  585,  585,  585,  585,  585,  585,
      586,  623,  623,  586,  586,  586,  586,  586,  586,  586,

      586,  587,  623,  623,  587,  587,  587,  587,  587,  587,
      587,  587,  588,  623,  623,  588,  588,  588,  588,  588,
      588,  588,  588,  589,  623,  623,  589,  589,  589,  589,
      589,  589,  589,  589,  590,  623,  623,  590,  590,  590,
      590,  590,  590,  590,  590,  591,  623,  623,  591,  591,
      591,  591,  591,  591,  591,  591,  592,  623,  623,  592,
      592,  592,  592,  592,  592,  592,  592,  593,  623,  623,
      593,  593,  593,  593,  593,  593,  593,  593,  594,  623,
      623,  594,  594,  594,  594,  594,  594,  594,  594,  595,
      623,  623,  595,  595,  595,  595,  595,  595,  595,  595,

      596,  623,  623,  596,  596,  596,  596,  596,  596,  596,
      596,  597,  623,  623,  597,  597,  597,  597,  597,  597,
      597,  597,  598,  623,  623,  598,  598,  598,  598,  598,
      598,  598,  598,  599,  623,  623,  599,  599,  599,  599,
      599,  599,  599,  599,  600,  623,  623,  600,  600,  600,
      600,  600,  600,  600,  600,  601,  623,  623,  601,  601,
      601,  601,  601,  601,  601,  601,  602,  623,  623,  602,
      602,  602,  602,  602,  602,  602,  602,  603,  623,  623,
      603,  603,  603,  603,  603,  603,  603,  603,  604,  623,
      623,  604,  604,  604,  604,  604,  604,  604,  604,  605,

      623,  623,  605,  605,  605,  605,  605,  605,  605,  605,
      606,  623,  623,  606,  606,  606,  606,  606,  606,  606,
      606,  607,  623,  623,  607,  607,  607,  607,  607,  607,
      607,  607,  608,  623,  623,  608,  608,  608,  608,  608,
      608,  608,  608,  609,  623,  623,  609,  609,  609,  609,
      609,  609,  609,  609,  610,  623,  623,  610,  610,  610,
      610,  610,  610,  610,  610,  611,  623,  623,  611,  611,
      611,  611,  611,  611,  611,  611,  612,  623,  623,  612,
      612,  612,  612,  612,  612,  612,  612,  613,  623,  623,
      613,  613,  613,  613,  613,  613,  613,  613,  614,  623,

      623,  614,  614,  614,  614,  614,  614,  614,  614,  615,
      623,  623,  615,  615,  615,  615,  615,  615,  615,  615,
      616,  623,  623,  616,  616,  616,  616,  616,  616,  616,
      616,  617,  623,  623,  617,  617,  617,  617,  617,  617,
      617,  617,  618,  623,  623,  618,  618,  618,  618,  618,
      618,  618,  618,  619,  623,  623,  619,  619,  619,  619,
      619,  619,  619,  619,  620,  623,  623,  620,  620,  620,
      620,  620,  620,  620,  620,  621,  623,  623,  621,  621,
      621,  621,  621,  621,  621,  621,  622,  623,  623,  622,
      622,  622,  622,  622,  622,  622,  622,    5,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623
    } ;

static const flex_int16_t yy_chk[5039] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        7,    7,    8,    8,   11,   11,   11,   11,   11,   12,
       23,   23,  622,   12,   12,   12,   12,   12,   12,  621,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,  144,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   13,   34,   34,  144,   13,
       13,   13,   13,   13,   13,  620,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   26,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   14,   14,   16,   16,   20,   20,   39,  619,   26,
       29,  618,  617,  616,   20,   29,   29,   29,   29,   29,
       14,   39,   16,   36,   20,   27,   36,   27,   45,   47,
       30,   45,   27,   27,   27,   30,   30,   30,   30,   30,
       36,   31,  615,   47,  210,   45,   27,   59,   59,   31,
      614,   40,   35,   31,   35,   35,   35,   35,   35,   40,
       27,  210,   27,   28,   31,   40,   59,   28,   28,   28,
       28,   28,   28,  613,   28,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   28,  269,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   32,
      177,  290,  269,   32,   32,   32,   32,   32,   32,   37,
      612,  611,   32,   44,   37,   44,   44,   44,   44,   44,
       37,   64,  177,  290,   32,   38,   64,   64,   64,   38,
       38,   38,   38,   38,   38,   46,   38,   38,   38,   38,
       46,  610,  609,   64,   48,  608,   46,   82,   38,   38,
       38,   38,   48,   68,   68,   68,   68,   68,   48,   69,
      607,   82,   94,   69,   69,   69,   69,   69,   69,   71,
       73,   71,   71,   71,   71,   71,   94,  135,   73,  606,

      605,  604,   73,   80,   80,   80,   80,   80,  603,  602,
      118,  135,  337,   73,   79,  118,  118,  118,  601,   79,
       79,   79,   79,   79,  127,  127,  127,  127,  127,  153,
       79,  128,  118,   79,  337,   79,  128,  128,  128,  128,
      128,   79,  133,  153,  600,  133,  599,   79,   81,  598,
      597,  596,  136,   81,   81,   81,   81,   81,  134,  133,
      136,  595,   81,  134,   81,  154,  136,  152,  594,  134,
      593,  592,  152,  154,   81,   81,   89,  591,  152,  154,
       89,   89,   89,   89,   89,   89,  590,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,  589,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   93,  150,  588,  587,  150,   93,   93,   93,
       93,   93,  193,  196,  191,  586,   93,  191,   93,  151,
      150,  151,  151,  151,  151,  151,  193,  196,   93,   93,
      122,  191,  585,  584,  583,  122,  122,  122,  122,  122,
      207,  219,  186,  582,  122,  581,  122,  186,  186,  186,
      186,  186,  580,  579,  207,  219,  122,  122,  124,  124,
      124,  124,  124,  192,  194,  206,  218,  124,  192,  124,
      206,  218,  194,  578,  192,  577,  206,  218,  194,  124,
      124,  129,  205,  576,  208,  205,  129,  129,  129,  129,

      129,  222,  208,  216,  575,  129,  216,  129,  208,  205,
      574,  259,  247,  220,  573,  222,  259,  129,  129,  130,
      216,  220,  259,  260,  130,  130,  247,  220,  224,  224,
      224,  224,  224,  258,  261,  130,  258,  260,  130,  572,
      130,  263,  261,  571,  570,  569,  130,  568,  261,  567,
      258,  566,  130,  131,  565,  263,  564,  563,  131,  131,
      131,  131,  131,  270,  270,  270,  270,  270,  562,  131,
      561,  560,  131,  274,  131,  274,  274,  274,  274,  274,
      131,  559,  558,  557,  556,  555,  131,  137,  554,  553,
      552,  551,  137,  137,  137,  137,  137,  550,  549,  548,

      547,  137,  546,  137,  545,  544,  543,  542,  541,  540,
      539,  538,  537,  137,  137,  138,  536,  535,  534,  533,
      138,  138,  138,  138,  138,  532,  531,  530,  529,  138,
      528,  138,  527,  526,  525,  524,  523,  522,  521,  520,
      519,  138,  138,  143,  518,  517,  516,  515,  143,  143,
      143,  143,  143,  514,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  513,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  148,
      512,  511,  510,  148,  148,  148,  148,  148,  148,  509,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,

      148,  508,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  155,  507,  506,  505,  504,
      155,  155,  155,  155,  155,  503,  502,  501,  500,  155,
      499,  155,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  155,  155,  184,  489,  488,  487,  184,  184,  184,
      184,  184,  184,  486,  485,  484,  184,  184,  483,  184,
      482,  481,  480,  479,  478,  477,  476,  475,  184,  184,
      184,  203,  474,  473,  472,  471,  203,  203,  203,  203,
      203,  470,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  469,  203,  203,  203,  203,  203,  203,

      203,  203,  203,  203,  203,  203,  203,  212,  468,  467,
      466,  212,  212,  212,  212,  212,  212,  465,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  464,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  225,  463,  462,  461,  460,  225,  225,
      225,  225,  225,  459,  458,  457,  456,  225,  455,  225,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  225,
      225,  271,  445,  444,  443,  442,  271,  271,  271,  271,
      271,  441,  440,  439,  438,  271,  437,  271,  436,  435,
      434,  433,  432,  431,  430,  429,  428,  271,  271,  273,

      427,  426,  425,  273,  273,  273,  273,  273,  273,  424,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  423,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  276,  422,  421,  420,  419,
      276,  276,  276,  276,  276,  418,  417,  416,  415,  276,
      414,  276,  413,  412,  411,  410,  409,  408,  407,  406,
      405,  276,  276,  278,  404,  403,  402,  401,  278,  278,
      278,  278,  278,  400,  399,  398,  397,  278,  396,  278,
      395,  394,  393,  392,  391,  390,  389,  388,  387,  278,
      278,  296,  386,  385,  384,  383,  296,  296,  296,  296,

      296,  382,  381,  380,  379,  296,  378,  296,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  296,  296,  302,
      368,  367,  366,  365,  302,  302,  302,  302,  302,  364,
      363,  362,  361,  302,  360,  302,  359,  358,  357,  356,
      355,  354,  353,  352,  351,  302,  302,  303,  350,  349,
      348,  347,  303,  303,  303,  303,  303,  346,  345,  344,
      343,  303,  342,  303,  341,  340,  339,  338,  336,  335,
      334,  333,  332,  303,  303,  315,  330,  329,  328,  327,
      315,  315,  315,  315,  315,  326,  323,  322,  321,  315,
      320,  315,  319,  312,  311,  309,  308,  307,  295,  288,

      287,  315,  315,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  625,  625,  285,  625,  625,
      625,  625,  625,  625,  625,  625,  626,  626,  284,  626,
      283,  626,  626,  626,  626,  626,  626,  626,  627,  627,
      627,  282,  627,  627,  627,  627,  627,  627,  627,  627,
      628,  628,  628,  629,  629,  629,  629,  629,  630,  277,
      630,  630,  631,  631,  631,  631,  631,  632,  632,  267,
      632,  632,  632,  632,  632,  632,  632,  632,  633,  265,
      251,  633,  633,  633,  633,  633,  633,  633,  633,  634,
      634,  249,  634,  634,  634,  634,  634,  634,  634,  634,

      635,  635,  242,  635,  635,  635,  635,  635,  635,  635,
      635,  636,  636,  636,  636,  636,  637,  637,  637,  638,
      638,  638,  639,  639,  639,  640,  240,  640,  640,  641,
      641,  641,  641,  641,  642,  237,  642,  642,  643,  643,
      643,  644,  235,  644,  644,  644,  644,  644,  645,  233,
      645,  645,  645,  645,  645,  646,  232,  646,  646,  646,
      647,  647,  647,  648,  228,  648,  648,  648,  648,  648,
      649,  649,  649,  650,  226,  211,  650,  650,  650,  650,
      650,  650,  650,  650,  651,  209,  200,  651,  651,  651,
      651,  651,  651,  651,  651,  652,  652,  652,  653,  198,

      180,  653,  653,  653,  653,  653,  653,  653,  653,  654,
      654,  654,  655,  655,  174,  655,  655,  655,  655,  655,
      655,  655,  655,  656,  173,  171,  656,  656,  656,  656,
      656,  656,  656,  656,  657,  657,  657,  657,  657,  658,
      658,  658,  659,  659,  659,  660,  168,  660,  660,  661,
      167,  661,  661,  661,  661,  661,  662,  165,  662,  662,
      662,  662,  662,  663,  163,  663,  161,  663,  663,  663,
      664,  664,  664,  664,  664,  665,  665,  665,  665,  665,
      666,  146,  666,  666,  666,  145,  666,  667,  123,  667,
      667,  667,  668,  668,  668,  668,  668,  669,  669,  669,

      669,  669,  670,  670,  670,  670,  670,  671,  115,  114,
      671,  671,  671,  671,  671,  671,  671,  671,  672,  113,
      111,  672,  672,  672,  672,  672,  672,  672,  672,  673,
      673,  673,  673,  673,  674,  110,  109,  674,  674,  674,
      674,  674,  674,  674,  674,  675,  675,  675,  675,  675,
      676,  676,  676,  677,  108,  107,  677,  677,  677,  677,
      677,  677,  677,  677,  678,  105,  103,  678,  678,  678,
      678,  678,  678,  678,  678,  679,  679,  679,  680,  680,
      680,  681,  102,  681,  681,  682,  682,  682,  682,  682,
      683,  683,  683,  683,  683,  684,  684,  684,  684,  684,

      685,  100,  685,  685,  685,  686,  686,  686,  687,   98,
      687,  687,  687,  687,  687,  688,   96,   87,  688,  688,
      688,  688,  688,  688,  688,  688,  689,   86,   84,  689,
      689,  689,  689,  689,  689,  689,  689,  690,   77,   76,
      690,  690,  690,  690,  690,  690,  690,  690,  691,  691,
      691,  691,  691,  692,   67,   60,  692,  692,  692,  692,
      692,  692,  692,  692,  693,   58,   57,  693,  693,  693,
      693,  693,  693,  693,  693,  694,  694,  694,  695,  695,
      695,  696,   56,  696,  696,  696,  696,  696,  697,   55,
      697,  697,  697,  697,  697,  698,   54,  698,  698,  699,

      699,  699,  699,  699,  700,   53,   52,  700,  700,  700,
      700,  700,  700,  700,  700,  701,   51,   50,  701,  701,
      701,  701,  701,  701,  701,  701,  702,   49,   41,  702,
      702,  702,  702,  702,  702,  702,  702,  703,   24,   19,
      703,  703,  703,  703,  703,  703,  703,  703,  704,   18,
       17,  704,  704,  704,  704,  704,  704,  704,  704,  705,
      705,  705,  706,   15,  706,  706,  707,  707,  707,  707,
      707,  708,   10,  708,  708,  708,  708,  708,  709,  709,
      709,  709,  709,  710,    9,    5,  710,  710,  710,  710,
      710,  710,  710,  710,  711,    4,    3,  711,  711,  711,

      711,  711,  711,  711,  711,  712,    0,    0,  712,  712,
      712,  712,  712,  712,  712,  712,  713,    0,    0,  713,
      713,  713,  713,  713,  713,  713,  713,  714,    0,    0,
      714,  714,  714,  714,  714,  714,  714,  714,  715,  715,
      715,  716,  716,  716,  716,  716,  717,    0,    0,  717,
      717,  717,  717,  717,  717,  717,  717,  718,    0,    0,
      718,  718,  718,  718,  718,  718,  718,  718,  719,    0,
        0,  719,  719,  719,  719,  719,  719,  719,  719,  720,
        0,    0,  720,  720,  720,  720,  720,  720,  720,  720,
      721,    0,    0,  721,  721,  721,  721,  721,  721,  721,

      721,  722,  722,  722,  723,    0,    0,  723,  723,  723,
      723,  723,  723,  723,  723,  724,    0,    0,  724,  724,
      724,  724,  724,  724,  724,  724,  725,    0,    0,  725,
      725,  725,  725,  725,  725,  725,  725,  726,    0,    0,
      726,  726,  726,  726,  726,  726,  726,  726,  727,    0,
        0,  727,  727,  727,  727,  727,  727,  727,  727,  728,
      728,  728,  729,    0,    0,  729,  729,  729,  729,  729,
      729,  729,  729,  730,    0,    0,  730,  730,  730,  730,
      730,  730,  730,  730,  731,    0,    0,  731,  731,  731,
      731,  731,  731,  731,  731,  732,    0,    0,  732,  732,

      732,  732,  732,  732,  732,  732,  733,    0,    0,  733,
      733,  733,  733,  733,  733,  733,  733,  734,    0,    0,
      734,  734,  734,  734,  734,  734,  734,  734,  735,    0,
        0,  735,  735,  735,  735,  735,  735,  735,  735,  736,
        0,    0,  736,  736,  736,  736,  736,  736,  736,  736,
      737,    0,    0,  737,  737,  737,  737,  737,  737,  737,
      737,  738,    0,    0,  738,  738,  738,  738,  738,  738,
      738,  738,  739,    0,    0,  739,  739,  739,  739,  739,
      739,  739,  739,  740,    0,    0,  740,  740,  740,  740,
      740,  740,  740,  740,  741,    0,    0,  741,  741,  741,

      741,  741,  741,  741,  741,  742,    0,    0,  742,  742,
      742,  742,  742,  742,  742,  742,  743,    0,    0,  743,
      743,  743,  743,  743,  743,  743,  743,  744,    0,    0,
      744,  744,  744,  744,  744,  744,  744,  744,  745,    0,
        0,  745,  745,  745,  745,  745,  745,  745,  745,  746,
        0,    0,  746,  746,  746,  746,  746,  746,  746,  746,
      747,    0,    0,  747,  747,  747,  747,  747,  747,  747,
      747,  748,    0,    0,  748,  748,  748,  748,  748,  748,
      748,  748,  749,    0,    0,  749,  749,  749,  749,  749,
      749,  749,  749,  750,    0,    0,  750,  750,  750,  750,

      750,  750,  750,  750,  751,    0,    0,  751,  751,  751,
      751,  751,  751,  751,  751,  752,    0,    0,  752,  752,
      752,  752,  752,  752,  752,  752,  753,    0,    0,  753,
      753,  753,  753,  753,  753,  753,  753,  754,    0,    0,
      754,  754,  754,  754,  754,  754,  754,  754,  755,    0,
        0,  755,  755,  755,  755,  755,  755,  755,  755,  756,
        0,    0,  756,  756,  756,  756,  756,  756,  756,  756,
      757,    0,    0,  757,  757,  757,  757,  757,  757,  757,
      757,  758,    0,    0,  758,  758,  758,  758,  758,  758,
      758,  758,  759,    0,    0,  759,  759,  759,  759,  759,

      759,  759,  759,  760,    0,    0,  760,  760,  760,  760,
      760,  760,  760,  760,  761,    0,    0,  761,  761,  761,
      761,  761,  761,  761,  761,  762,    0,    0,  762,  762,
      762,  762,  762,  762,  762,  762,  763,    0,    0,  763,
      763,  763,  763,  763,  763,  763,  763,  764,    0,    0,
      764,  764,  764,  764,  764,  764,  764,  764,  765,    0,
        0,  765,  765,  765,  765,  765,  765,  765,  765,  766,
        0,    0,  766,  766,  766,  766,  766,  766,  766,  766,
      767,    0,    0,  767,  767,  767,  767,  767,  767,  767,
      767,  768,    0,    0,  768,  768,  768,  768,  768,  768,

      768,  768,  769,    0,    0,  769,  769,  769,  769,  769,
      769,  769,  769,  770,    0,    0,  770,  770,  770,  770,
      770,  770,  770,  770,  771,    0,    0,  771,  771,  771,
      771,  771,  771,  771,  771,  772,    0,    0,  772,  772,
      772,  772,  772,  772,  772,  772,  773,    0,    0,  773,
      773,  773,  773,  773,  773,  773,  773,  774,    0,    0,
      774,  774,  774,  774,  774,  774,  774,  774,  775,    0,
        0,  775,  775,  775,  775,  775,  775,  775,  775,  776,
        0,    0,  776,  776,  776,  776,  776,  776,  776,  776,
      777,    0,    0,  777,  777,  777,  777,  777,  777,  777,

      777,  778,    0,    0,  778,  778,  778,  778,  778,  778,
      778,  778,  779,    0,    0,  779,  779,  779,  779,  779,
      779,  779,  779,  780,    0,    0,  780,  780,  780,  780,
      780,  780,  780,  780,  781,    0,    0,  781,  781,  781,
      781,  781,  781,  781,  781,  782,    0,    0,  782,  782,
      782,  782,  782,  782,  782,  782,  783,    0,    0,  783,
      783,  783,  783,  783,  783,  783,  783,  784,    0,    0,
      784,  784,  784,  784,  784,  784,  784,  784,  785,    0,
        0,  785,  785,  785,  785,  785,  785,  785,  785,  786,
        0,    0,  786,  786,  786,  786,  786,  786,  786,  786,

      787,    0,    0,  787,  787,  787,  787,  787,  787,  787,
      787,  788,    0,    0,  788,  788,  788,  788,  788,  788,
      788,  788,  789,    0,    0,  789,  789,  789,  789,  789,
      789,  789,  789,  790,    0,    0,  790,  790,  790,  790,
      790,  790,  790,  790,  791,    0,    0,  791,  791,  791,
      791,  791,  791,  791,  791,  792,    0,    0,  792,  792,
      792,  792,  792,  792,  792,  792,  793,    0,    0,  793,
      793,  793,  793,  793,  793,  793,  793,  794,    0,    0,
      794,  794,  794,  794,  794,  794,  794,  794,  795,    0,
        0,  795,  795,  795,  795,  795,  795,  795,  795,  796,

        0,    0,  796,  796,  796,  796,  796,  796,  796,  796,
      797,    0,    0,  797,  797,  797,  797,  797,  797,  797,
      797,  798,    0,    0,  798,  798,  798,  798,  798,  798,
      798,  798,  799,    0,    0,  799,  799,  799,  799,  799,
      799,  799,  799,  800,    0,    0,  800,  800,  800,  800,
      800,  800,  800,  800,  801,    0,    0,  801,  801,  801,
      801,  801,  801,  801,  801,  802,    0,    0,  802,  802,
      802,  802,  802,  802,  802,  802,  803,    0,    0,  803,
      803,  803,  803,  803,  803,  803,  803,  804,    0,    0,
      804,  804,  804,  804,  804,  804,  804,  804,  805,    0,

        0,  805,  805,  805,  805,  805,  805,  805,  805,  806,
        0,    0,  806,  806,  806,  806,  806,  806,  806,  806,
      807,    0,    0,  807,  807,  807,  807,  807,  807,  807,
      807,  808,    0,    0,  808,  808,  808,  808,  808,  808,
      808,  808,  809,    0,    0,  809,  809,  809,  809,  809,
      809,  809,  809,  810,    0,    0,  810,  810,  810,  810,
      810,  810,  810,  810,  811,    0,    0,  811,  811,  811,
      811,  811,  811,  811,  811,  812,    0,    0,  812,  812,
      812,  812,  812,  812,  812,  812,  813,    0,    0,  813,
      813,  813,  813,  813,  813,  813,  813,  814,    0,    0,

      814,  814,  814,  814,  814,  814,  814,  814,  815,    0,
        0,  815,  815,  815,  815,  815,  815,  815,  815,  816,
        0,    0,  816,  816,  816,  816,  816,  816,  816,  816,
      817,    0,    0,  817,  817,  817,  817,  817,  817,  817,
      817,  818,    0,    0,  818,  818,  818,  818,  818,  818,
      818,  818,  819,    0,    0,  819,  819,  819,  819,  819,
      819,  819,  819,  820,    0,    0,  820,  820,  820,  820,
      820,  820,  820,  820,  821,    0,    0,  821,  821,  821,
      821,  821,  821,  821,  821,  822,    0,    0,  822,  822,
      822,  822,  822,  822,  822,  822,  823,    0,    0,  823,

      823,  823,  823,  823,  823,  823,  823,  824,    0,    0,
      824,  824,  824,  824,  824,  824,  824,  824,  825,    0,
        0,  825,  825,  825,  825,  825,  825,  825,  825,  826,
        0,    0,  826,  826,  826,  826,  826,  826,  826,  826,
      827,    0,    0,  827,  827,  827,  827,  827,  827,  827,
      827,  828,    0,    0,  828,  828,  828,  828,  828,  828,
      828,  828,  829,    0,    0,  829,  829,  829,  829,  829,
      829,  829,  829,  830,    0,    0,  830,  830,  830,  830,
      830,  830,  830,  830,  831,    0,    0,  831,  831,  831,
      831,  831,  831,  831,  831,  832,    0,    0,  832,  832,

      832,  832,  832,  832,  832,  832,  833,    0,    0,  833,
      833,  833,  833,  833,  833,  833,  833,  834,    0,    0,
      834,  834,  834,  834,  834,  834,  834,  834,  835,    0,
        0,  835,  835,  835,  835,  835,  835,  835,  835,  836,
        0,    0,  836,  836,  836,  836,  836,  836,  836,  836,
      837,    0,    0,  837,  837,  837,  837,  837,  837,  837,
      837,  838,    0,    0,  838,  838,  838,  838,  838,  838,
      838,  838,  839,    0,    0,  839,  839,  839,  839,  839,
      839,  839,  839,  840,    0,    0,  840,  840,  840,  840,
      840,  840,  840,  840,  841,    0,    0,  841,  841,  841,

      841,  841,  841,  841,  841,  842,    0,    0,  842,  842,
      842,  842,  842,  842,  842,  842,  843,    0,    0,  843,
      843,  843,  843,  843,  843,  843,  843,  844,    0,    0,
      844,  844,  844,  844,  844,  844,  844,  844,  845,    0,
        0,  845,  845,  845,  845,  845,  845,  845,  845,  846,
        0,    0,  846,  846,  846,  846,  846,  846,  846,  846,
      847,    0,    0,  847,  847,  847,  847,  847,  847,  847,
      847,  848,    0,    0,  848,  848,  848,  848,  848,  848,
      848,  848,  849,    0,    0,  849,  849,  849,  849,  849,
      849,  849,  849,  850,    0,    0,  850,  850,  850,  850,

      850,  850,  850,  850,  851,    0,    0,  851,  851,  851,
      851,  851,  851,  851,  851,  852,    0,    0,  852,  852,
      852,  852,  852,  852,  852,  852,  853,    0,    0,  853,
      853,  853,  853,  853,  853,  853,  853,  854,    0,    0,
      854,  854,  854,  854,  854,  854,  854,  854,  855,    0,
        0,  855,  855,  855,  855,  855,  855,  855,  855,  856,
        0,    0,  856,  856,  856,  856,  856,  856,  856,  856,
      857,    0,    0,  857,  857,  857,  857,  857,  857,  857,
      857,  858,    0,    0,  858,  858,  858,  858,  858,  858,
      858,  858,  859,    0,    0,  859,  859,  859,  859,  859,

      859,  859,  859,  860,    0,    0,  860,  860,  860,  860,
      860,  860,  860,  860,  861,    0,    0,  861,  861,  861,
      861,  861,  861,  861,  861,  862,    0,    0,  862,  862,
      862,  862,  862,  862,  862,  862,  863,    0,    0,  863,
      863,  863,  863,  863,  863,  863,  863,  864,    0,    0,
      864,  864,  864,  864,  864,  864,  864,  864,  865,    0,
        0,  865,  865,  865,  865,  865,  865,  865,  865,  866,
        0,    0,  866,  866,  866,  866,  866,  866,  866,  866,
      867,    0,    0,  867,  867,  867,  867,  867,  867,  867,
      867,  868,    0,    0,  868,  868,  868,  868,  868,  868,

      868,  868,  869,    0,    0,  869,  869,  869,  869,  869,
      869,  869,  869,  870,    0,    0,  870,  870,  870,  870,
      870,  870,  870,  870,  871,    0,    0,  871,  871,  871,
      871,  871,  871,  871,  871,  872,    0,    0,  872,  872,
      872,  872,  872,  872,  872,  872,  873,    0,    0,  873,
      873,  873,  873,  873,  873,  873,  873,  874,    0,    0,
      874,  874,  874,  874,  874,  874,  874,  874,  875,    0,
        0,  875,  875,  875,  875,  875,  875,  875,  875,  876,
        0,    0,  876,  876,  876,  876,  876,  876,  876,  876,
      877,    0,    0,  877,  877,  877,  877,  877,  877,  877,

      877,  878,    0,    0,  878,  878,  878,  878,  878,  878,
      878,  878,  879,    0,    0,  879,  879,  879,  879,  879,
      879,  879,  879,  880,    0,    0,  880,  880,  880,  880,
      880,  880,  880,  880,  881,    0,    0,  881,  881,  881,
      881,  881,  881,  881,  881,  882,    0,    0,  882,  882,
      882,  882,  882,  882,  882,  882,  883,    0,    0,  883,
      883,  883,  883,  883,  883,  883,  883,  884,    0,    0,
      884,  884,  884,  884,  884,  884,  884,  884,  885,    0,
        0,  885,  885,  885,  885,  885,  885,  885,  885,  886,
        0,    0,  886,  886,  886,  886,  886,  886,  886,  886,

      887,    0,    0,  887,  887,  887,  887,  887,  887,  887,
      887,  888,    0,    0,  888,  888,  888,  888,  888,  888,
      888,  888,  889,    0,    0,  889,  889,  889,  889,  889,
      889,  889,  889,  890,    0,    0,  890,  890,  890,  890,
      890,  890,  890,  890,  891,    0,    0,  891,  891,  891,
      891,  891,  891,  891,  891,  892,    0,    0,  892,  892,
      892,  892,  892,  892,  892,  892,  893,    0,    0,  893,
      893,  893,  893,  893,  893,  893,  893,  894,    0,    0,
      894,  894,  894,  894,  894,  894,  894,  894,  895,    0,
        0,  895,  895,  895,  895,  895,  895,  895,  895,  896,

        0,    0,  896,  896,  896,  896,  896,  896,  896,  896,
      897,    0,    0,  897,  897,  897,  897,  897,  897,  897,
      897,  898,    0,    0,  898,  898,  898,  898,  898,  898,
      898,  898,  899,    0,    0,  899,  899,  899,  899,  899,
      899,  899,  899,  900,    0,    0,  900,  900,  900,  900,
      900,  900,  900,  900,  901,    0,    0,  901,  901,  901,
      901,  901,  901,  901,  901,  902,    0,    0,  902,  902,
      902,  902,  902,  902,  902,  902,  903,    0,    0,  903,
      903,  903,  903,  903,  903,  903,  903,  904,    0,    0,
      904,  904,  904,  904,  904,  904,  904,  904,  905,    0,

        0,  905,  905,  905,  905,  905,  905,  905,  905,  906,
        0,    0,  906,  906,  906,  906,  906,  906,  906,  906,
      907,    0,    0,  907,  907,  907,  907,  907,  907,  907,
      907,  908,    0,    0,  908,  908,  908,  908,  908,  908,
      908,  908,  909,    0,    0,  909,  909,  909,  909,  909,
      909,  909,  909,  910,    0,    0,  910,  910,  910,  910,
      910,  910,  910,  910,  911,    0,    0,  911,  911,  911,
      911,  911,  911,  911,  911,  912,    0,    0,  912,  912,
      912,  912,  912,  912,  912,  912,  913,    0,    0,  913,
      913,  913,  913,  913,  913,  913,  913,  914,    0,    0,

      914,  914,  914,  914,  914,  914,  914,  914,  915,    0,
        0,  915,  915,  915,  915,  915,  915,  915,  915,  916,
        0,    0,  916,  916,  916,  916,  916,  916,  916,  916,
      917,    0,    0,  917,  917,  917,  917,  917,  917,  917,
      917,  918,    0,    0,  918,  918,  918,  918,  918,  918,
      918,  918,  919,    0,    0,  919,  919,  919,  919,  919,
      919,  919,  919,  920,    0,    0,  920,  920,  920,  920,
      920,  920,  920,  920,  921,    0,    0,  921,  921,  921,
      921,  921,  921,  921,  921,  922,    0,    0,  922,  922,
      922,  922,  922,  922,  922,  922,  923,    0,    0,  923,

      923,  923,  923,  923,  923,  923,  923,  924,    0,    0,
      924,  924,  924,  924,  924,  924,  924,  924,  925,    0,
        0,  925,  925,  925,  925,  925,  925,  925,  925,  926,
        0,    0,  926,  926,  926,  926,  926,  926,  926,  926,
      927,    0,    0,  927,  927,  927,  927,  927,  927,  927,
      927,  928,    0,    0,  928,  928,  928,  928,  928,  928,
      928,  928,  929,    0,    0,  929,  929,  929,  929,  929,
      929,  929,  929,  930,    0,    0,  930,  930,  930,  930,
      930,  930,  930,  930,  931,    0,    0,  931,  931,  931,
      931,  931,  931,  931,  931,  932,    0,    0,  932,  932,

      932,  932,  932,  932,  932,  932,  933,    0,    0,  933,
      933,  933,  933,  933,  933,  933,  933,  934,    0,    0,
      934,  934,  934,  934,  934,  934,  934,  934,  935,    0,
        0,  935,  935,  935,  935,  935,  935,  935,  935,  936,
        0,    0,  936,  936,  936,  936,  936,  936,  936,  936,
      937,    0,    0,  937,  937,  937,  937,  937,  937,  937,
      937,  938,    0,    0,  938,  938,  938,  938,  938,  938,
      938,  938,  939,    0,    0,  939,  939,  939,  939,  939,
      939,  939,  939,  940,    0,    0,  940,  940,  940,  940,
      940,  940,  940,  940,  941,    0,    0,  941,  941,  941,

      941,  941,  941,  941,  941,  942,    0,    0,  942,  942,
      942,  942,  942,  942,  942,  942,  943,    0,    0,  943,
      943,  943,  943,  943,  943,  943,  943,  944,    0,    0,
      944,  944,  944,  944,  944,  944,  944,  944,  945,    0,
        0,  945,  945,  945,  945,  945,  945,  945,  945,  946,
        0,    0,  946,  946,  946,  946,  946,  946,  946,  946,
      947,    0,    0,  947,  947,  947,  947,  947,  947,  947,
      947,  948,    0,    0,  948,  948,  948,  948,  948,  948,
      948,  948,  949,    0,    0,  949,  949,  949,  949,  949,
      949,  949,  949,  950,    0,    0,  950,  950,  950,  950,

      950,  950,  950,  950,  951,    0,    0,  951,  951,  951,
      951,  951,  951,  951,  951,  952,    0,    0,  952,  952,
      952,  952,  952,  952,  952,  952,  953,    0,    0,  953,
      953,  953,  953,  953,  953,  953,  953,  954,    0,    0,
      954,  954,  954,  954,  954,  954,  954,  954,  955,    0,
        0,  955,  955,  955,  955,  955,  955,  955,  955,  956,
        0,    0,  956,  956,  956,  956,  956,  956,  956,  956,
      957,    0,    0,  957,  957,  957,  957,  957,  957,  957,
      957,  958,    0,    0,  958,  958,  958,  958,  958,  958,
      958,  958,  959,    0,    0,  959,  959,  959,  959,  959,

      959,  959,  959,  960,    0,    0,  960,  960,  960,  960,
      960,  960,  960,  960,  961,    0,    0,  961,  961,  961,
      961,  961,  961,  961,  961,  962,    0,    0,  962,  962,
      962,  962,  962,  962,  962,  962,  963,    0,    0,  963,
      963,  963,  963,  963,  963,  963,  963,  964,    0,    0,
      964,  964,  964,  964,  964,  964,  964,  964,  965,    0,
        0,  965,  965,  965,  965,  965,  965,  965,  965,  966,
        0,    0,  966,  966,  966,  966,  966,  966,  966,  966,
      967,    0,    0,  967,  967,  967,  967,  967,  967,  967,
      967,  968,    0,    0,  968,  968,  968,  968,  968,  968,

      968,  968,  969,    0,    0,  969,  969,  969,  969,  969,
      969,  969,  969,  970,    0,    0,  970,  970,  970,  970,
      970,  970,  970,  970,  971,    0,    0,  971,  971,  971,
      971,  971,  971,  971,  971,  972,    0,    0,  972,  972,
      972,  972,  972,  972,  972,  972,  973,    0,    0,  973,
      973,  973,  973,  973,  973,  973,  973,  974,    0,    0,
      974,  974,  974,  974,  974,  974,  974,  974,  975,    0,
        0,  975,  975,  975,  975,  975,  975,  975,  975,  976,
        0,    0,  976,  976,  976,  976,  976,  976,  976,  976,
      977,    0,    0,  977,  977,  977,  977,  977,  977,  977,

      977,  978,    0,    0,  978,  978,  978,  978,  978,  978,
      978,  978,  979,    0,    0,  979,  979,  979,  979,  979,
      979,  979,  979,  980,    0,    0,  980,  980,  980,  980,
      980,  980,  980,  980,  981,    0,    0,  981,  981,  981,
      981,  981,  981,  981,  981,  982,    0,    0,  982,  982,
      982,  982,  982,  982,  982,  982,  983,    0,    0,  983,
      983,  983,  983,  983,  983,  983,  983,  984,    0,    0,
      984,  984,  984,  984,  984,  984,  984,  984,  985,    0,
        0,  985,  985,  985,  985,  985,  985,  985,  985,  986,
        0,    0,  986,  986,  986,  986,  986,  986,  986,  986,

      987,    0,    0,  987,  987,  987,  987,  987,  987,  987,
      987,  988,    0,    0,  988,  988,  988,  988,  988,  988,
      988,  988,  989,    0,    0,  989,  989,  989,  989,  989,
      989,  989,  989,  990,    0,    0,  990,  990,  990,  990,
      990,  990,  990,  990,  991,    0,    0,  991,  991,  991,
      991,  991,  991,  991,  991,  992,    0,    0,  992,  992,
      992,  992,  992,  992,  992,  992,  993,    0,    0,  993,
      993,  993,  993,  993,  993,  993,  993,  994,    0,    0,
      994,  994,  994,  994,  994,  994,  994,  994,  995,    0,
        0,  995,  995,  995,  995,  995,  995,  995,  995,  996,

        0,    0,  996,  996,  996,  996,  996,  996,  996,  996,
      997,    0,    0,  997,  997,  997,  997,  997,  997,  997,
      997,  998,    0,    0,  998,  998,  998,  998,  998,  998,
      998,  998,  999,    0,    0,  999,  999,  999,  999,  999,
      999,  999,  999, 1000,    0,    0, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1001,    0,    0, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1002,    0,    0, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1003,    0,    0, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1004,    0,    0,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1005,    0,

        0, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1006,
        0,    0, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1007,    0,    0, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1008,    0,    0, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1009,    0,    0, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1010,    0,    0, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1011,    0,    0, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1012,    0,    0, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1013,    0,    0, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[40] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "test9.l"
#line 2 "test9.l"
#include <iostream>
#include <string>
using namespace std;
void yyerror(const string& str);

#define BINARY_LITERAL							880
#define OCTAL_LITERAL							881
#define DECIMAL_LITERAL							882
#define HEXADECIMAL_LITERAL						883
#define CHARACTER_LITERAL						884
#define STRING_LITERAL 							885
#define DECIMAL_FLOATING_POINT_LITERAL			886
#define HEXADECIMAL_FLOATING_POINT_LITERAL		887
#define BOOLEAN_LITERAL							888
#define POINTER_LITERAL							889
#define USER_DEFINED_LITERAL					890
#define USER_DEFINED_STRING_LITERAL				891

#line 1891 "<stdout>"
#line 25 "test9.l"
	/********************************start integer literals*******************************/
	/********************************end integer literals*******************************/
	/********************************start character literals*******************************/
	/********************************end character literals*******************************/
	/********************************start floating point literals*******************************/
	/********************************end floating point literals*******************************/
	/********************************start string literals*******************************/

	/********************************end string literals*******************************/
#line 1902 "<stdout>"

#define INITIAL 0
#define START_RAW_STRING 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 69 "test9.l"

		size_t delim_len;
		size_t delim_offset;
	
	/********************************start integer literal*******************************/
#line 2126 "<stdout>"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 624 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4998 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 74 "test9.l"
{return BINARY_LITERAL;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 75 "test9.l"
{return OCTAL_LITERAL;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 76 "test9.l"
{return DECIMAL_LITERAL;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 77 "test9.l"
{return HEXADECIMAL_LITERAL;}
	YY_BREAK
/********************************end integer literal*******************************/
/********************************start character literal*******************************/
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 82 "test9.l"
{return CHARACTER_LITERAL;}
	YY_BREAK
/********************************end character literal*******************************/
/********************************start string literal*******************************/
/********************************start raw-string literal*******************************/
case 6:
YY_RULE_SETUP
#line 89 "test9.l"
{ delim_offset=3; delim_len = yyleng - delim_offset;
                        yymore();
                        BEGIN(START_RAW_STRING);
                      }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 93 "test9.l"
{ delim_offset=4; delim_len = yyleng - delim_offset;
                        yymore();
                        BEGIN(START_RAW_STRING);
                      }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 97 "test9.l"
{ delim_offset=5;delim_len = yyleng - delim_offset;
                        yymore();
                        BEGIN(START_RAW_STRING);
                      }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 101 "test9.l"
{ delim_offset=4; delim_len = yyleng - delim_offset;
                        yymore();
                        BEGIN(START_RAW_STRING);
                      }    
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 105 "test9.l"
{ delim_offset=4; delim_len = yyleng - delim_offset;
                        yymore();
                        BEGIN(START_RAW_STRING);
                      }   
	YY_BREAK

case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 111 "test9.l"
yymore();
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 112 "test9.l"
{ 	if (yytext[yyleng - (delim_len + 2)] == ')' &&
	                            memcmp(yytext + yyleng - (delim_len + 1),
	                                   yytext + 2, delim_len) == 0) {
	                           BEGIN(INITIAL);
	                           yytext=yytext+delim_len + delim_offset;
	                           yyleng=yyleng-delim_len-delim_offset-delim_len-2;
	                           return STRING_LITERAL;
	                       	}
                     		else yymore();
                      }
	YY_BREAK
case YY_STATE_EOF(START_RAW_STRING):
#line 122 "test9.l"
{ yyerror("Unterminated raw string");
                         BEGIN(INITIAL);
                         return 0;
                      }
	YY_BREAK

/********************************end raw-string literal*******************************/
/********************************other string literal*******************************/
case 13:
YY_RULE_SETUP
#line 130 "test9.l"
{yytext=yytext+2; yyleng=yyleng-3; return STRING_LITERAL;}	
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 131 "test9.l"
{yytext=yytext+3; yyleng=yyleng-4; return STRING_LITERAL;}	
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 132 "test9.l"
{yytext=yytext+2; yyleng=yyleng-3; return STRING_LITERAL;}	
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 133 "test9.l"
{yytext=yytext+2; yyleng=yyleng-3; return STRING_LITERAL;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 134 "test9.l"
{yytext=yytext+1; yyleng=yyleng-2; return STRING_LITERAL;}
	YY_BREAK
/********************************end string literal*******************************/
/********************************start floating point literals*******************************/
case 18:
YY_RULE_SETUP
#line 139 "test9.l"
{return DECIMAL_FLOATING_POINT_LITERAL;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 140 "test9.l"
{return HEXADECIMAL_FLOATING_POINT_LITERAL;}
	YY_BREAK
/********************************end floating point literals*******************************/
/********************************start boolean & pointer literals*******************************/
case 20:
#line 145 "test9.l"
case 21:
YY_RULE_SETUP
#line 145 "test9.l"
{return BOOLEAN_LITERAL;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 146 "test9.l"
{return POINTER_LITERAL;}
	YY_BREAK
/********************************end boolean & pointer literals*******************************/
/********************************start user-defined literals*******************************/
case 23:
#line 151 "test9.l"
case 24:
#line 152 "test9.l"
case 25:
#line 153 "test9.l"
case 26:
#line 154 "test9.l"
case 27:
#line 155 "test9.l"
case 28:
#line 156 "test9.l"
case 29:
#line 157 "test9.l"
case 30:
#line 158 "test9.l"
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 158 "test9.l"
{return USER_DEFINED_LITERAL;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 160 "test9.l"
{return USER_DEFINED_STRING_LITERAL;}	
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 161 "test9.l"
{return USER_DEFINED_STRING_LITERAL;}	
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 162 "test9.l"
{return USER_DEFINED_STRING_LITERAL;}	
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 163 "test9.l"
{return USER_DEFINED_STRING_LITERAL;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 164 "test9.l"
{return USER_DEFINED_STRING_LITERAL;}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 166 "test9.l"
;                /* Ignore whitespace */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 167 "test9.l"
; /*return *yytext;*/  /* Fallback rule */
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 168 "test9.l"
ECHO;
	YY_BREAK
#line 2417 "<stdout>"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 624 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 624 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 623);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 168 "test9.l"

void yyerror(const string& str){
	cout<<"error:"<<str<<endl;
}
int main(int argc, char**argv){
	extern FILE *yyin;
	if (argc==2){
		yyin=fopen(argv[1], "r");
		if (yyin){
			int token=0;
			while (token=yylex()){				
				string str(yytext, yyleng);
				switch (token){
				case BINARY_LITERAL:
					cout<<"\nBINARY_LITERAL:\t";
					break;
				case OCTAL_LITERAL:
					cout<<"\nOCTAL_LITERAL:\t";
					break;
				case DECIMAL_LITERAL:
					cout<<"\nDECIMAL_LITERAL:\t";
					break;
				case HEXADECIMAL_LITERAL:
					cout<<"\nHEXADECIMAL_LITERAL:\t";
					break;
				case CHARACTER_LITERAL:
					cout<<"\nCHARACTER_LITERAL:\t";
					break;
				case STRING_LITERAL:
					cout<<"\nSTRING_LITERAL:\t";
					break;				
				case DECIMAL_FLOATING_POINT_LITERAL:
					cout<<"\nDECIMAL_FLOATING_POINT_LITERAL:\t";
					break;
				case HEXADECIMAL_FLOATING_POINT_LITERAL:
					cout<<"\nHEXADECIMAL_FLOATING_POINT_LITERAL:\t";
					break;
				case BOOLEAN_LITERAL:
					cout<<"\nBOOLEAN_LITERAL:\t";
					break;
				case POINTER_LITERAL:
					cout<<"\nPOINTER_LITERAL:\t";
					break;
				case USER_DEFINED_LITERAL:
					cout<<"\nUSER_DEFINED_LITERAL:\t";
					break;
				case USER_DEFINED_STRING_LITERAL:
					cout<<"\nUSER_DEFINED_STRING_LITERAL:\t";
					break;
				}
				cout<<"\tline_number:"<<yylineno<<";\t"
					<<"yyleng:"<<yyleng<<"\t:["<<str<<"]"<<endl;							
			}
		}
	}
}
