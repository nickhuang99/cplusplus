State 0 conflicts: 41 shift/reduce, 4 reduce/reduce
State 1 conflicts: 4 reduce/reduce
State 2 conflicts: 1 shift/reduce
State 19 conflicts: 3 shift/reduce, 1 reduce/reduce
State 20 conflicts: 1 shift/reduce
State 21 conflicts: 39 shift/reduce, 4 reduce/reduce
State 25 conflicts: 1 shift/reduce
State 49 conflicts: 36 shift/reduce, 3 reduce/reduce
State 50 conflicts: 8 shift/reduce, 7 reduce/reduce
State 53 conflicts: 3 shift/reduce
State 57 conflicts: 3 shift/reduce, 2 reduce/reduce
State 58 conflicts: 3 shift/reduce
State 60 conflicts: 40 shift/reduce, 4 reduce/reduce
State 62 conflicts: 1 shift/reduce
State 74 conflicts: 1 reduce/reduce
State 90 conflicts: 1 shift/reduce, 1 reduce/reduce
State 97 conflicts: 101 reduce/reduce
State 102 conflicts: 39 shift/reduce, 4 reduce/reduce
State 116 conflicts: 1 shift/reduce
State 122 conflicts: 5 shift/reduce, 1 reduce/reduce
State 123 conflicts: 2 shift/reduce
State 127 conflicts: 1 shift/reduce, 1 reduce/reduce
State 129 conflicts: 2 shift/reduce
State 130 conflicts: 39 shift/reduce, 4 reduce/reduce
State 139 conflicts: 39 shift/reduce, 4 reduce/reduce
State 140 conflicts: 40 shift/reduce, 4 reduce/reduce
State 143 conflicts: 1 shift/reduce
State 151 conflicts: 1 shift/reduce
State 156 conflicts: 2 shift/reduce
State 157 conflicts: 1 shift/reduce
State 161 conflicts: 3 shift/reduce
State 166 conflicts: 3 shift/reduce
State 175 conflicts: 2 shift/reduce
State 176 conflicts: 3 shift/reduce
State 180 conflicts: 1 shift/reduce, 1 reduce/reduce
State 181 conflicts: 1 shift/reduce
State 183 conflicts: 3 shift/reduce
State 184 conflicts: 3 shift/reduce, 1 reduce/reduce
State 186 conflicts: 1 shift/reduce
State 187 conflicts: 1 shift/reduce
State 188 conflicts: 2 reduce/reduce
State 189 conflicts: 2 shift/reduce
State 195 conflicts: 1 shift/reduce
State 199 conflicts: 1 shift/reduce
State 202 conflicts: 39 shift/reduce, 4 reduce/reduce
State 205 conflicts: 39 shift/reduce, 4 reduce/reduce
State 209 conflicts: 1 shift/reduce
State 211 conflicts: 306 reduce/reduce
State 213 conflicts: 1 shift/reduce
State 218 conflicts: 2 shift/reduce
State 225 conflicts: 1 shift/reduce
State 231 conflicts: 39 shift/reduce, 4 reduce/reduce
State 239 conflicts: 1 shift/reduce
State 241 conflicts: 1 shift/reduce
State 242 conflicts: 6 reduce/reduce
State 245 conflicts: 2 shift/reduce
State 248 conflicts: 1 shift/reduce
State 249 conflicts: 2 shift/reduce
State 250 conflicts: 10 reduce/reduce
State 251 conflicts: 12 reduce/reduce
State 256 conflicts: 2 shift/reduce
State 257 conflicts: 12 reduce/reduce
State 258 conflicts: 12 reduce/reduce
State 259 conflicts: 12 reduce/reduce
State 260 conflicts: 12 reduce/reduce
State 261 conflicts: 12 reduce/reduce
State 262 conflicts: 12 reduce/reduce
State 263 conflicts: 12 reduce/reduce
State 264 conflicts: 12 reduce/reduce
State 271 conflicts: 2 shift/reduce
State 272 conflicts: 2 shift/reduce
State 273 conflicts: 2 shift/reduce
State 281 conflicts: 2 shift/reduce
State 282 conflicts: 2 shift/reduce
State 284 conflicts: 2 shift/reduce
State 289 conflicts: 1 shift/reduce
State 292 conflicts: 1 shift/reduce
State 297 conflicts: 1 shift/reduce
State 300 conflicts: 1 shift/reduce
State 310 conflicts: 1 shift/reduce
State 316 conflicts: 2 shift/reduce
State 318 conflicts: 1 shift/reduce
State 320 conflicts: 1 shift/reduce
State 322 conflicts: 1 shift/reduce, 1 reduce/reduce
State 326 conflicts: 1 shift/reduce
State 327 conflicts: 1 shift/reduce
State 333 conflicts: 1 shift/reduce
State 337 conflicts: 2 reduce/reduce
State 339 conflicts: 1 shift/reduce
State 344 conflicts: 2 shift/reduce
State 360 conflicts: 39 shift/reduce, 4 reduce/reduce
State 375 conflicts: 1 shift/reduce
State 378 conflicts: 1 shift/reduce
State 381 conflicts: 1 shift/reduce
State 382 conflicts: 1 shift/reduce
State 383 conflicts: 2 shift/reduce
State 384 conflicts: 1 shift/reduce
State 386 conflicts: 2 shift/reduce
State 389 conflicts: 2 shift/reduce
State 390 conflicts: 4 shift/reduce
State 397 conflicts: 1 shift/reduce
State 400 conflicts: 1 shift/reduce
State 403 conflicts: 2 shift/reduce
State 412 conflicts: 5 shift/reduce, 2 reduce/reduce
State 419 conflicts: 3 shift/reduce, 1 reduce/reduce
State 433 conflicts: 2 shift/reduce
State 434 conflicts: 2 shift/reduce
State 435 conflicts: 3 shift/reduce
State 442 conflicts: 3 shift/reduce
State 449 conflicts: 1 shift/reduce
State 454 conflicts: 1 shift/reduce
State 460 conflicts: 2 shift/reduce
State 463 conflicts: 3 shift/reduce
State 465 conflicts: 3 reduce/reduce
State 466 conflicts: 1 shift/reduce
State 471 conflicts: 24 shift/reduce, 3 reduce/reduce
State 472 conflicts: 2 shift/reduce, 1 reduce/reduce
State 473 conflicts: 1 shift/reduce
State 475 conflicts: 2 shift/reduce
State 480 conflicts: 5 shift/reduce, 1 reduce/reduce
State 483 conflicts: 2 shift/reduce
State 484 conflicts: 1 shift/reduce
State 485 conflicts: 5 shift/reduce, 1 reduce/reduce
State 493 conflicts: 32 shift/reduce
State 498 conflicts: 1 shift/reduce
State 536 conflicts: 1 shift/reduce
State 552 conflicts: 1 shift/reduce
State 557 conflicts: 1 shift/reduce
State 559 conflicts: 6 shift/reduce
State 564 conflicts: 2 shift/reduce
State 565 conflicts: 203 reduce/reduce
State 570 conflicts: 2 shift/reduce
State 571 conflicts: 2 shift/reduce
State 572 conflicts: 2 shift/reduce
State 573 conflicts: 2 shift/reduce
State 574 conflicts: 2 shift/reduce
State 577 conflicts: 2 shift/reduce
State 580 conflicts: 2 shift/reduce
State 583 conflicts: 2 shift/reduce
State 584 conflicts: 2 shift/reduce
State 585 conflicts: 2 shift/reduce
State 603 conflicts: 196 reduce/reduce
State 605 conflicts: 2 shift/reduce
State 613 conflicts: 1 shift/reduce
State 616 conflicts: 2 shift/reduce
State 617 conflicts: 2 shift/reduce
State 618 conflicts: 2 shift/reduce
State 620 conflicts: 2 shift/reduce
State 622 conflicts: 1 shift/reduce
State 648 conflicts: 1 shift/reduce, 1 reduce/reduce
State 651 conflicts: 2 shift/reduce
State 653 conflicts: 5 shift/reduce, 1 reduce/reduce
State 658 conflicts: 2 shift/reduce
State 659 conflicts: 2 shift/reduce
State 671 conflicts: 2 shift/reduce
State 672 conflicts: 2 shift/reduce
State 673 conflicts: 2 shift/reduce
State 674 conflicts: 2 shift/reduce
State 675 conflicts: 2 shift/reduce
State 676 conflicts: 2 shift/reduce
State 681 conflicts: 2 shift/reduce
State 682 conflicts: 2 shift/reduce
State 683 conflicts: 2 shift/reduce
State 684 conflicts: 2 shift/reduce
State 685 conflicts: 2 shift/reduce
State 690 conflicts: 2 shift/reduce
State 691 conflicts: 2 shift/reduce
State 692 conflicts: 2 shift/reduce
State 693 conflicts: 2 shift/reduce
State 694 conflicts: 2 shift/reduce
State 695 conflicts: 1 shift/reduce
State 696 conflicts: 2 shift/reduce
State 697 conflicts: 2 shift/reduce
State 698 conflicts: 2 shift/reduce
State 701 conflicts: 2 shift/reduce
State 739 conflicts: 1 shift/reduce
State 751 conflicts: 2 shift/reduce
State 761 conflicts: 4 shift/reduce
State 768 conflicts: 2 shift/reduce
State 770 conflicts: 3 shift/reduce, 1 reduce/reduce
State 771 conflicts: 3 shift/reduce
State 772 conflicts: 1 shift/reduce
State 775 conflicts: 1 shift/reduce
State 781 conflicts: 2 reduce/reduce
State 784 conflicts: 1 shift/reduce
State 797 conflicts: 2 shift/reduce
State 798 conflicts: 1 shift/reduce
State 803 conflicts: 2 shift/reduce
State 806 conflicts: 2 shift/reduce
State 817 conflicts: 39 shift/reduce, 4 reduce/reduce
State 820 conflicts: 2 shift/reduce
State 821 conflicts: 1 shift/reduce
State 823 conflicts: 2 shift/reduce
State 825 conflicts: 2 shift/reduce
State 827 conflicts: 1 shift/reduce
State 832 conflicts: 1 reduce/reduce
State 834 conflicts: 1 shift/reduce
State 836 conflicts: 2 shift/reduce, 1 reduce/reduce
State 839 conflicts: 3 shift/reduce, 2 reduce/reduce
State 840 conflicts: 1 shift/reduce
State 842 conflicts: 5 shift/reduce
State 849 conflicts: 2 shift/reduce
State 851 conflicts: 2 shift/reduce
State 884 conflicts: 2 shift/reduce
State 887 conflicts: 2 shift/reduce
State 892 conflicts: 1 shift/reduce
State 893 conflicts: 1 shift/reduce
State 900 conflicts: 2 shift/reduce
State 901 conflicts: 101 reduce/reduce
State 904 conflicts: 6 shift/reduce
State 906 conflicts: 2 shift/reduce
State 964 conflicts: 1 shift/reduce
State 965 conflicts: 1 shift/reduce
State 974 conflicts: 1 shift/reduce
State 976 conflicts: 1 shift/reduce
State 980 conflicts: 1 shift/reduce
State 983 conflicts: 37 shift/reduce, 3 reduce/reduce
State 993 conflicts: 1 reduce/reduce
State 994 conflicts: 1 shift/reduce
State 1017 conflicts: 2 shift/reduce
State 1019 conflicts: 2 shift/reduce
State 1021 conflicts: 2 shift/reduce
State 1053 conflicts: 1 reduce/reduce
State 1076 conflicts: 1 shift/reduce
State 1091 conflicts: 4 reduce/reduce
State 1092 conflicts: 2 shift/reduce, 2 reduce/reduce
State 1102 conflicts: 1 shift/reduce, 1 reduce/reduce
State 1109 conflicts: 2 shift/reduce
State 1114 conflicts: 2 shift/reduce
State 1127 conflicts: 39 shift/reduce, 4 reduce/reduce
State 1137 conflicts: 1 shift/reduce
State 1138 conflicts: 2 shift/reduce
State 1140 conflicts: 2 shift/reduce
State 1147 conflicts: 1 shift/reduce
State 1150 conflicts: 4 shift/reduce
State 1154 conflicts: 5 shift/reduce
State 1164 conflicts: 1 shift/reduce
State 1173 conflicts: 2 shift/reduce
State 1174 conflicts: 2 shift/reduce
State 1175 conflicts: 1 shift/reduce
State 1180 conflicts: 2 shift/reduce
State 1205 conflicts: 2 shift/reduce
State 1207 conflicts: 2 shift/reduce
State 1210 conflicts: 36 shift/reduce, 3 reduce/reduce
State 1211 conflicts: 2 shift/reduce
State 1216 conflicts: 37 shift/reduce, 3 reduce/reduce
State 1219 conflicts: 2 shift/reduce
State 1225 conflicts: 2 shift/reduce
State 1227 conflicts: 2 shift/reduce
State 1228 conflicts: 1 shift/reduce
State 1229 conflicts: 3 shift/reduce
State 1237 conflicts: 39 shift/reduce, 4 reduce/reduce
State 1255 conflicts: 4 reduce/reduce
State 1265 conflicts: 1 shift/reduce
State 1271 conflicts: 3 shift/reduce
State 1274 conflicts: 1 shift/reduce
State 1276 conflicts: 1 shift/reduce
State 1277 conflicts: 1 shift/reduce
State 1285 conflicts: 1 shift/reduce
State 1299 conflicts: 4 shift/reduce
State 1300 conflicts: 2 shift/reduce
State 1301 conflicts: 2 shift/reduce
State 1305 conflicts: 2 shift/reduce
State 1309 conflicts: 27 shift/reduce, 3 reduce/reduce
State 1311 conflicts: 1 shift/reduce, 1 reduce/reduce
State 1316 conflicts: 2 shift/reduce
State 1317 conflicts: 2 shift/reduce
State 1318 conflicts: 2 shift/reduce
State 1319 conflicts: 2 shift/reduce
State 1324 conflicts: 2 shift/reduce
State 1329 conflicts: 5 reduce/reduce
State 1330 conflicts: 1 shift/reduce
State 1331 conflicts: 2 shift/reduce
State 1335 conflicts: 37 shift/reduce, 3 reduce/reduce
State 1339 conflicts: 2 shift/reduce
State 1341 conflicts: 2 shift/reduce
State 1360 conflicts: 2 shift/reduce
State 1364 conflicts: 2 shift/reduce
State 1368 conflicts: 3 shift/reduce
State 1393 conflicts: 2 shift/reduce
State 1395 conflicts: 1 shift/reduce
State 1401 conflicts: 2 shift/reduce
State 1402 conflicts: 1 shift/reduce, 2 reduce/reduce
State 1411 conflicts: 39 shift/reduce, 4 reduce/reduce
State 1428 conflicts: 37 shift/reduce, 3 reduce/reduce
State 1433 conflicts: 37 shift/reduce, 3 reduce/reduce
State 1435 conflicts: 19 shift/reduce, 3 reduce/reduce
State 1437 conflicts: 37 shift/reduce, 42 reduce/reduce
State 1447 conflicts: 81 shift/reduce, 48 reduce/reduce
State 1449 conflicts: 1 shift/reduce
State 1452 conflicts: 2 shift/reduce
State 1477 conflicts: 1 shift/reduce
State 1478 conflicts: 1 shift/reduce
State 1492 conflicts: 2 shift/reduce
State 1498 conflicts: 2 shift/reduce
State 1500 conflicts: 19 shift/reduce, 42 reduce/reduce
State 1505 conflicts: 37 shift/reduce, 3 reduce/reduce
State 1506 conflicts: 81 shift/reduce, 48 reduce/reduce
State 1509 conflicts: 19 shift/reduce, 3 reduce/reduce
State 1523 conflicts: 1 shift/reduce
State 1526 conflicts: 1 shift/reduce
State 1529 conflicts: 3 shift/reduce
State 1530 conflicts: 37 shift/reduce, 3 reduce/reduce
State 1531 conflicts: 2 shift/reduce
State 1534 conflicts: 2 shift/reduce
State 1537 conflicts: 19 shift/reduce, 3 reduce/reduce
State 1538 conflicts: 1 shift/reduce
State 1540 conflicts: 1 shift/reduce
State 1544 conflicts: 2 shift/reduce
State 1551 conflicts: 2 shift/reduce
State 1552 conflicts: 3 shift/reduce
State 1553 conflicts: 2 shift/reduce
State 1555 conflicts: 37 shift/reduce, 3 reduce/reduce
State 1556 conflicts: 37 shift/reduce, 3 reduce/reduce
State 1557 conflicts: 1 shift/reduce
State 1558 conflicts: 4 shift/reduce
State 1563 conflicts: 1 reduce/reduce
State 1564 conflicts: 1 reduce/reduce
State 1569 conflicts: 37 shift/reduce, 3 reduce/reduce
State 1576 conflicts: 37 shift/reduce, 3 reduce/reduce
State 1578 conflicts: 37 shift/reduce, 3 reduce/reduce
State 1579 conflicts: 1 shift/reduce
State 1583 conflicts: 37 shift/reduce, 3 reduce/reduce


Grammar

    0 $accept: translation-unit $end

    1 abstract-declarator: ptr-abstract-declarator
    2                    | noptr-abstract-declarator-opt parameters-and-qualifiers trailing-return-type
    3                    | abstract-pack-declarator

    4 abstract-declarator-opt: ε
    5                        | abstract-declarator

    6 abstract-pack-declarator: noptr-abstract-pack-declarator
    7                         | ptr-operator abstract-pack-declarator

    8 access-specifier: "private"
    9                 | "protected"
   10                 | "public"

   11 access-specifier-opt: ε
   12                     | access-specifier

   13 additive-expression: multiplicative-expression
   14                    | additive-expression '+' multiplicative-expression
   15                    | additive-expression '-' multiplicative-expression

   16 alias-declaration: "using" IDENTIFIER attribute-specifier-seq-opt '=' defining-type-id ';'

   17 alignment-specifier: "alignas" '(' type-id eclipse-opt ')'
   18                    | "alignas" '(' constant-expression eclipse-opt ')'

   19 and-expression: equality-expression
   20               | and-expression '&' equality-expression

   21 apostrophe-opt: ε
   22               | '\''

   23 asm-declaration: attribute-specifier-seq-opt "asm" '(' string-literal ')' ';'

   24 assignment-expression: conditional-expression
   25                      | yield-expression
   26                      | throw-expression
   27                      | logical-or-expression assignment-operator initializer-clause

   28 assignment-expression-opt: ε
   29                          | assignment-expression

   30 assignment-operator: '='
   31                    | "*="
   32                    | "/="
   33                    | "%="
   34                    | "+="
   35                    | "-="
   36                    | ">>="
   37                    | "<<="
   38                    | "&="
   39                    | "^="
   40                    | "|="

   41 attribute: attribute-token attribute-argument-clause-opt

   42 attribute-argument-clause: '(' balanced-token-seq-opt ')'

   43 attribute-argument-clause-opt: ε
   44                              | attribute-argument-clause

   45 attribute-declaration: attribute-specifier-seq ';'

   46 attribute-list: attribute-opt
   47               | attribute-list ',' attribute-opt
   48               | attribute "..."
   49               | attribute-list ',' attribute "..."

   50 attribute-namespace: IDENTIFIER

   51 attribute-opt: ε
   52              | attribute

   53 attribute-scoped-token: attribute-namespace "::" IDENTIFIER

   54 attribute-specifier: '[' '[' attribute-using-prefix-opt attribute-list ']' ']'
   55                    | alignment-specifier

   56 attribute-specifier-seq: attribute-specifier-seq-opt attribute-specifier

   57 attribute-specifier-seq-opt: ε
   58                            | attribute-specifier-seq

   59 attribute-token: IDENTIFIER
   60                | attribute-scoped-token

   61 attribute-using-prefix: "using" attribute-namespace ':'

   62 attribute-using-prefix-opt: ε
   63                           | attribute-using-prefix

   64 await-expression: "co_await" cast-expression

   65 balanced-token: '(' balanced-token-seq-opt ')'
   66               | '[' balanced-token-seq-opt ']'
   67               | '{' balanced-token-seq-opt '}'
   68               | ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE

   69 balanced-token-seq: balanced-token
   70                   | balanced-token-seq balanced-token

   71 balanced-token-seq-opt: ε
   72                       | balanced-token-seq

   73 base-clause: ':' base-specifier-list

   74 base-clause-opt: ε
   75                | base-clause

   76 base-specifier: attribute-specifier-seq-opt class-or-decltype
   77               | attribute-specifier-seq-opt "virtual" access-specifier-opt class-or-decltype
   78               | attribute-specifier-seq-opt access-specifier virtual-opt class-or-decltype

   79 base-specifier-list: base-specifier eclipse-opt
   80                    | base-specifier-list ',' base-specifier eclipse-opt

   81 basic-c-char: EXCEPT_THE_APOSTROPHE_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER

   82 basic-s-char: EXCEPT_THE_QUOTATION_MARK_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER

   83 binary-digit: '0'
   84             | '1'

   85 binary-exponent-part: 'p' sign-opt digit-sequence
   86                     | 'P' sign-opt digit-sequence

   87 binary-literal: "0b" binary-digit
   88               | "0B" binary-digit
   89               | binary-literal apostrophe-opt binary-digit

   90 block-declaration: simple-declaration
   91                  | asm-declaration
   92                  | namespace-alias-definition
   93                  | using-declaration
   94                  | using-enum-declaration
   95                  | using-directive
   96                  | static_assert-declaration
   97                  | alias-declaration
   98                  | opaque-enum-declaration

   99 boolean-literal: "false"
  100                | "true"

  101 brace-or-equal-initializer: '=' initializer-clause
  102                           | braced-init-list

  103 brace-or-equal-initializer-opt: ε
  104                               | brace-or-equal-initializer

  105 braced-init-list: '{' initializer-list comma-opt '}'
  106                 | '{' designated-initializer-list comma-opt '}'
  107                 | '{' '}'

  108 c-char: basic-c-char
  109       | escape-sequence
  110       | universal-character-name

  111 c-char-sequence: c-char
  112                | c-char-sequence c-char

  113 capture: simple-capture
  114        | init-capture

  115 capture-default: '&'
  116                | '='

  117 capture-list: capture
  118             | capture-list ',' capture

  119 cast-expression: unary-expression
  120                | '(' type-id ')' cast-expression

  121 character-literal: encoding-prefix-opt '\'' c-char-sequence '\''

  122 class-head: class-key attribute-specifier-seq-opt class-head-name class-virt-specifier-opt base-clause-opt
  123           | class-key attribute-specifier-seq-opt base-clause-opt

  124 class-head-name: nested-name-specifier-opt class-name

  125 class-key: "class"
  126          | "struct"
  127          | "union"

  128 class-name: IDENTIFIER
  129           | simple-template-id

  130 class-or-decltype: nested-name-specifier-opt type-name
  131                  | nested-name-specifier "template" simple-template-id
  132                  | decltype-specifier

  133 class-specifier: class-head '{' member-specification-opt '}'

  134 class-virt-specifier: "final"

  135 class-virt-specifier-opt: ε
  136                         | class-virt-specifier

  137 comma-opt: ε
  138          | ','

  139 compare-expression: shift-expression
  140                   | compare-expression "<=>" shift-expression

  141 compound-requirement: '{' expression '}' noexcept-opt return-type-requirement-opt ';'

  142 compound-statement: '{' statement-seq-opt '}'

  143 concept-definition: "concept" concept-name '=' constraint-expression ';'

  144 concept-name: IDENTIFIER

  145 condition: expression
  146          | attribute-specifier-seq-opt decl-specifier-seq declarator brace-or-equal-initializer

  147 condition-opt: ε
  148              | condition

  149 conditional-escape-sequence: '\\' conditional-escape-sequence-char

  150 conditional-escape-sequence-char: NOT_AN_OCTAL_DIGIT_A_SIMPLE_ESCAPE_SEQUENCE_CHAR_OR_THE_CHARACTERS_U_U_OR_X

  151 conditional-expression: logical-or-expression
  152                       | logical-or-expression '?' expression ':' assignment-expression

  153 constant-expression: conditional-expression

  154 constant-expression-opt: ε
  155                        | constant-expression

  156 constexpr-opt: ε
  157              | "constexpr"

  158 constraint-expression: logical-or-expression

  159 constraint-logical-and-expression: primary-expression
  160                                  | constraint-logical-and-expression "&&" primary-expression

  161 constraint-logical-or-expression: constraint-logical-and-expression
  162                                 | constraint-logical-or-expression "||" constraint-logical-and-expression

  163 conversion-declarator: ptr-operator conversion-declarator-opt

  164 conversion-declarator-opt: ε
  165                          | conversion-declarator

  166 conversion-function-id: "operator" conversion-type-id

  167 conversion-type-id: type-specifier-seq conversion-declarator-opt

  168 coroutine-return-statement: "co_return" expr-or-braced-init-list-opt ';'

  169 ctor-initializer: ':' mem-initializer-list

  170 ctor-initializer-opt: ε
  171                     | ctor-initializer

  172 cv-qualifier: "const"
  173             | "volatile"

  174 cv-qualifier-seq: cv-qualifier cv-qualifier-seq-opt

  175 cv-qualifier-seq-opt: ε
  176                     | cv-qualifier-seq

  177 d-char: EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE

  178 d-char-sequence: d-char
  179                | d-char-sequence d-char

  180 d-char-sequence-opt: ε
  181                    | d-char-sequence

  182 decimal-floating-point-literal: fractional-constant exponent-part-opt floating-point-suffix-opt
  183                               | digit-sequence exponent-part floating-point-suffix-opt

  184 decimal-literal: nonzero-digit
  185                | decimal-literal apostrophe-opt digit

  186 decl-specifier: storage-class-specifier
  187               | defining-type-specifier
  188               | function-specifier
  189               | "friend"
  190               | "typedef"
  191               | "constexpr"
  192               | "consteval"
  193               | "constinit"
  194               | "inline"

  195 decl-specifier-seq: decl-specifier attribute-specifier-seq-opt
  196                   | decl-specifier decl-specifier-seq

  197 decl-specifier-seq-opt: ε
  198                       | decl-specifier-seq

  199 declaration: block-declaration
  200            | nodeclspec-function-declaration
  201            | function-definition
  202            | template-declaration
  203            | deduction-guide
  204            | explicit-instantiation
  205            | explicit-specialization
  206            | export-declaration
  207            | linkage-specification
  208            | namespace-definition
  209            | empty-declaration
  210            | attribute-declaration
  211            | module-import-declaration

  212 declaration-seq: declaration
  213                | declaration-seq declaration

  214 declaration-seq-opt: ε
  215                    | declaration-seq

  216 declaration-statement: block-declaration

  217 declarator: ptr-declarator
  218           | noptr-declarator parameters-and-qualifiers trailing-return-type

  219 declarator-id: eclipse-opt id-expression

  220 decltype-specifier: "decltype" '(' expression ')'

  221 deduction-guide: explicit-specifier-opt template-name '(' parameter-declaration-clause ')' "->" simple-template-id ';'

  222 defining-type-id: defining-type-specifier-seq abstract-declarator-opt

  223 defining-type-specifier: type-specifier
  224                        | class-specifier
  225                        | enum-specifier

  226 defining-type-specifier-seq: defining-type-specifier attribute-specifier-seq-opt
  227                            | defining-type-specifier defining-type-specifier-seq

  228 delete-expression: scope-opt "delete" cast-expression
  229                  | scope-opt "delete" '[' ']' cast-expression

  230 designated-initializer-clause: designator brace-or-equal-initializer

  231 designated-initializer-list: designated-initializer-clause
  232                            | designated-initializer-list ',' designated-initializer-clause

  233 designator: '.' IDENTIFIER

  234 digit: '0'
  235      | '1'
  236      | '2'
  237      | '3'
  238      | '4'
  239      | '5'
  240      | '6'
  241      | '7'
  242      | '8'
  243      | '9'

  244 digit-sequence: digit
  245               | digit-sequence apostrophe-opt digit

  246 digit-sequence-opt: ε
  247                   | digit-sequence

  248 eclipse-opt: ε
  249            | "..."

  250 elaborated-enum-specifier: "enum" nested-name-specifier-opt IDENTIFIER

  251 elaborated-type-specifier: class-key attribute-specifier-seq-opt nested-name-specifier-opt IDENTIFIER
  252                          | class-key simple-template-id
  253                          | class-key nested-name-specifier template-opt simple-template-id
  254                          | elaborated-enum-specifier

  255 empty-declaration: ';'

  256 enclosing-namespace-specifier: IDENTIFIER
  257                              | enclosing-namespace-specifier "::" inline-opt IDENTIFIER

  258 encoding-prefix: "u8"
  259                | 'u'
  260                | 'U'
  261                | 'L'

  262 encoding-prefix-opt: ε
  263                    | encoding-prefix

  264 enum-base: ':' type-specifier-seq

  265 enum-base-opt: ε
  266              | enum-base

  267 enum-head: enum-key attribute-specifier-seq-opt enum-head-name-opt enum-base-opt

  268 enum-head-name: nested-name-specifier-opt IDENTIFIER

  269 enum-head-name-opt: ε
  270                   | enum-head-name

  271 enum-key: "enum"
  272         | "enum" "class"
  273         | "enum" "struct"

  274 enum-name: IDENTIFIER

  275 enum-specifier: enum-head '{' enumerator-list-opt '}'
  276               | enum-head '{' enumerator-list ',' '}'

  277 enumerator: IDENTIFIER attribute-specifier-seq-opt

  278 enumerator-definition: enumerator
  279                      | enumerator '=' constant-expression

  280 enumerator-list: enumerator-definition
  281                | enumerator-list ',' enumerator-definition

  282 enumerator-list-opt: ε
  283                    | enumerator-list

  284 equality-expression: relational-expression
  285                    | equality-expression "==" relational-expression
  286                    | equality-expression "!=" relational-expression

  287 escape-sequence: simple-escape-sequence
  288                | numeric-escape-sequence
  289                | conditional-escape-sequence

  290 exception-declaration: attribute-specifier-seq-opt type-specifier-seq declarator
  291                      | attribute-specifier-seq-opt type-specifier-seq abstract-declarator-opt
  292                      | "..."

  293 exclamation-opt: ε
  294                | '!'

  295 exclusive-or-expression: and-expression
  296                        | exclusive-or-expression '^' and-expression

  297 explicit-instantiation: extern-opt "template" declaration

  298 explicit-specialization: "template" '<' '>' declaration

  299 explicit-specifier: "explicit" '(' constant-expression ')'
  300                   | "explicit"

  301 explicit-specifier-opt: ε
  302                       | explicit-specifier

  303 exponent-part: 'e' sign-opt digit-sequence
  304              | 'E' sign-opt digit-sequence

  305 exponent-part-opt: ε
  306                  | exponent-part

  307 export-declaration: "export" declaration
  308                   | "export" '{' declaration-seq-opt '}'
  309                   | "export-keyword" module-import-declaration

  310 export-keyword-opt: ε
  311                   | "export-keyword"

  312 expr-or-braced-init-list: expression
  313                         | braced-init-list

  314 expr-or-braced-init-list-opt: ε
  315                             | expr-or-braced-init-list

  316 expression: assignment-expression
  317           | expression ',' assignment-expression

  318 expression-list: initializer-list

  319 expression-list-opt: ε
  320                    | expression-list

  321 expression-opt: ε
  322               | expression

  323 expression-statement: expression-opt ';'

  324 extern-opt: ε
  325           | "extern"

  326 floating-point-literal: decimal-floating-point-literal
  327                       | hexadecimal-floating-point-literal

  328 floating-point-suffix: 'f'
  329                      | 'l'
  330                      | 'F'
  331                      | 'L'

  332 floating-point-suffix-opt: ε
  333                          | floating-point-suffix

  334 fold-expression: '(' cast-expression fold-operator "..." ')'
  335                | '(' "..." fold-operator cast-expression ')'
  336                | '(' cast-expression fold-operator "..." fold-operator cast-expression ')'

  337 fold-operator: '+'
  338              | '-'
  339              | '*'
  340              | '/'
  341              | '%'
  342              | '^'
  343              | '&'
  344              | '|'
  345              | "<<"
  346              | ">>"
  347              | "+="
  348              | "-="
  349              | "*="
  350              | "/="
  351              | "%="
  352              | "^="
  353              | "&="
  354              | "|="
  355              | "<<="
  356              | ">>="
  357              | '='
  358              | "=="
  359              | "!="
  360              | '<'
  361              | '>'
  362              | "<="
  363              | ">="
  364              | "&&"
  365              | "||"
  366              | ','
  367              | ".*"
  368              | "->*"

  369 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq declarator
  370                      | attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt '[' identifier-list ']'

  371 for-range-initializer: expr-or-braced-init-list

  372 fractional-constant: digit-sequence-opt '.' digit-sequence
  373                    | digit-sequence '.'

  374 function-body: ctor-initializer-opt compound-statement
  375              | function-try-block
  376              | '=' "default" ';'
  377              | '=' "delete" ';'

  378 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator virt-specifier-seq-opt function-body
  379                    | attribute-specifier-seq-opt decl-specifier-seq-opt declarator requires-clause function-body

  380 function-specifier: "virtual"
  381                   | explicit-specifier

  382 function-try-block: "try" ctor-initializer-opt compound-statement handler-seq

  383 global-module-fragment: "module-keyword" ';' declaration-seq-opt

  384 global-module-fragment-opt: ε
  385                           | global-module-fragment

  386 h-char: EXCEPT_NEW_LINE_AND_GREATER_THAN_SIGN

  387 handler: "catch" '(' exception-declaration ')' compound-statement

  388 handler-seq: handler handler-seq-opt

  389 handler-seq-opt: ε
  390                | handler-seq

  391 header-name: '<' "h-char-sequence" '>'
  392            | '"' q-char-sequence '"'
  393            | "h-char-sequence:"
  394            | h-char
  395            | "h-char-sequence" h-char

  396 hex-quad: hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit

  397 hexadecimal-digit: '0'
  398                  | '1'
  399                  | '2'
  400                  | '3'
  401                  | '4'
  402                  | '5'
  403                  | '6'
  404                  | '7'
  405                  | '8'
  406                  | '9'
  407                  | 'a'
  408                  | 'b'
  409                  | 'c'
  410                  | 'd'
  411                  | 'e'
  412                  | 'f'
  413                  | 'A'
  414                  | 'B'
  415                  | 'C'
  416                  | 'D'
  417                  | 'E'
  418                  | 'F'

  419 hexadecimal-digit-sequence: hexadecimal-digit
  420                           | hexadecimal-digit-sequence apostrophe-opt hexadecimal-digit

  421 hexadecimal-digit-sequence-opt: ε
  422                               | hexadecimal-digit-sequence

  423 hexadecimal-escape-sequence: "\\x" hexadecimal-digit
  424                            | hexadecimal-escape-sequence hexadecimal-digit

  425 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part floating-point-suffix-opt
  426                                   | hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part floating-point-suffix-opt

  427 hexadecimal-fractional-constant: hexadecimal-digit-sequence-opt '.' hexadecimal-digit-sequence
  428                                | hexadecimal-digit-sequence '.'

  429 hexadecimal-literal: hexadecimal-prefix hexadecimal-digit-sequence

  430 hexadecimal-prefix: "0x"
  431                   | "0X"

  432 id-expression: unqualified-id
  433              | qualified-id

  434 identifier-list: IDENTIFIER
  435                | identifier-list ',' IDENTIFIER

  436 identifier-opt: ε
  437               | IDENTIFIER

  438 inclusive-or-expression: exclusive-or-expression
  439                        | inclusive-or-expression '|' exclusive-or-expression

  440 init-capture: eclipse-opt IDENTIFIER initializer
  441             | '&' eclipse-opt IDENTIFIER initializer

  442 init-declarator: declarator initializer-opt
  443                | declarator requires-clause

  444 init-declarator-list: init-declarator
  445                     | init-declarator-list ',' init-declarator

  446 init-declarator-list-opt: ε
  447                         | init-declarator-list

  448 init-statement: expression-statement
  449               | simple-declaration
  450               | alias-declaration

  451 init-statement-opt: ε
  452                   | init-statement

  453 initializer: brace-or-equal-initializer
  454            | '(' expression-list ')'

  455 initializer-clause: assignment-expression
  456                   | braced-init-list

  457 initializer-list: initializer-clause eclipse-opt
  458                 | initializer-list ',' initializer-clause eclipse-opt

  459 initializer-opt: ε
  460                | initializer

  461 inline-opt: ε
  462           | "inline"

  463 integer-literal: binary-literal integer-suffix-opt
  464                | octal-literal integer-suffix-opt
  465                | decimal-literal integer-suffix-opt
  466                | hexadecimal-literal integer-suffix-opt

  467 integer-suffix: unsigned-suffix long-suffix-opt
  468               | unsigned-suffix long-long-suffix-opt
  469               | unsigned-suffix size-suffix-opt
  470               | long-suffix unsigned-suffix-opt
  471               | long-long-suffix unsigned-suffix-opt
  472               | size-suffix unsigned-suffix-opt

  473 integer-suffix-opt: ε
  474                   | integer-suffix

  475 iteration-statement: "while" '(' condition ')' statement
  476                    | "do" statement "while" '(' expression ')' ';'
  477                    | "for" '(' init-statement condition-opt ';' expression-opt ')' statement
  478                    | "for" '(' init-statement-opt for-range-declaration ':' for-range-initializer ')' statement

  479 jump-statement: "break" ';'
  480               | "continue" ';'
  481               | "return" expr-or-braced-init-list-opt ';'
  482               | coroutine-return-statement
  483               | "goto" IDENTIFIER ';'

  484 labeled-statement: attribute-specifier-seq-opt IDENTIFIER ':' statement
  485                  | attribute-specifier-seq-opt "case" constant-expression ':' statement
  486                  | attribute-specifier-seq-opt "default" ':' statement

  487 lambda-capture: capture-default
  488               | capture-list
  489               | capture-default ',' capture-list

  490 lambda-capture-opt: ε
  491                   | lambda-capture

  492 lambda-declarator: lambda-specifiers
  493                  | '(' parameter-declaration-clause ')' lambda-specifiers requires-clause-opt

  494 lambda-expression: lambda-introducer lambda-declarator compound-statement
  495                  | lambda-introducer '<' template-parameter-list '>' requires-clause-opt lambda-declarator compound-statement

  496 lambda-introducer: '[' lambda-capture-opt ']'

  497 lambda-specifiers: decl-specifier-seq-opt noexcept-specifier-opt attribute-specifier-seq-opt trailing-return-type-opt

  498 linkage-specification: "extern" string-literal '{' declaration-seq-opt '}'
  499                      | "extern" string-literal declaration

  500 literal: integer-literal
  501        | character-literal
  502        | floating-point-literal
  503        | string-literal
  504        | boolean-literal
  505        | pointer-literal
  506        | user-defined-literal

  507 literal-operator-id: "operator" string-literal IDENTIFIER
  508                    | "operator" user-defined-string-literal

  509 logical-and-expression: inclusive-or-expression
  510                       | logical-and-expression "&&" inclusive-or-expression

  511 logical-or-expression: logical-and-expression
  512                      | logical-or-expression "||" logical-and-expression

  513 long-long-suffix: "ll"
  514                 | LL

  515 long-long-suffix-opt: ε
  516                     | long-long-suffix

  517 long-suffix: 'l'
  518            | 'L'

  519 long-suffix-opt: ε
  520                | long-suffix

  521 mem-initializer: mem-initializer-id '(' expression-list-opt ')'
  522                | mem-initializer-id braced-init-list

  523 mem-initializer-id: class-or-decltype
  524                   | IDENTIFIER

  525 mem-initializer-list: mem-initializer eclipse-opt
  526                     | mem-initializer-list ',' mem-initializer eclipse-opt

  527 member-declaration: attribute-specifier-seq-opt decl-specifier-seq-opt member-declarator-list-opt ';'
  528                   | function-definition
  529                   | using-declaration
  530                   | using-enum-declaration
  531                   | static_assert-declaration
  532                   | template-declaration
  533                   | explicit-specialization
  534                   | deduction-guide
  535                   | alias-declaration
  536                   | opaque-enum-declaration
  537                   | empty-declaration

  538 member-declarator: declarator virt-specifier-seq-opt pure-specifier-opt
  539                  | declarator requires-clause
  540                  | declarator brace-or-equal-initializer-opt
  541                  | identifier-opt attribute-specifier-seq-opt ':' constant-expression brace-or-equal-initializer-opt

  542 member-declarator-list: member-declarator
  543                       | member-declarator-list ',' member-declarator

  544 member-declarator-list-opt: ε
  545                           | member-declarator-list

  546 member-specification: member-declaration member-specification-opt
  547                     | access-specifier ':' member-specification-opt

  548 member-specification-opt: ε
  549                         | member-specification

  550 module-declaration: export-keyword-opt "module-keyword" module-name module-partition-opt attribute-specifier-seq-opt ';'

  551 module-import-declaration: "import-keyword" module-name attribute-specifier-seq-opt ';'
  552                          | "import-keyword" module-partition attribute-specifier-seq-opt ';'
  553                          | "import-keyword" header-name attribute-specifier-seq-opt ';'

  554 module-name: module-name-qualifier-opt IDENTIFIER

  555 module-name-qualifier: IDENTIFIER '.'
  556                      | module-name-qualifier IDENTIFIER '.'

  557 module-name-qualifier-opt: ε
  558                          | module-name-qualifier

  559 module-partition: ':' module-name-qualifier-opt IDENTIFIER

  560 module-partition-opt: ε
  561                     | module-partition

  562 multiplicative-expression: pm-expression
  563                          | multiplicative-expression '*' pm-expression
  564                          | multiplicative-expression '/' pm-expression
  565                          | multiplicative-expression '%' pm-expression

  566 named-namespace-definition: inline-opt "namespace" attribute-specifier-seq-opt IDENTIFIER '{' namespace-body '}'

  567 namespace-alias: IDENTIFIER

  568 namespace-alias-definition: "namespace" IDENTIFIER '=' qualified-namespace-specifier ';'

  569 namespace-body: declaration-seq-opt

  570 namespace-definition: named-namespace-definition
  571                     | unnamed-namespace-definition
  572                     | nested-namespace-definition

  573 namespace-name: IDENTIFIER
  574               | namespace-alias

  575 nested-name-specifier: "::"
  576                      | type-name "::"
  577                      | namespace-name "::"
  578                      | decltype-specifier "::"
  579                      | nested-name-specifier IDENTIFIER "::"
  580                      | nested-name-specifier template-opt simple-template-id "::"

  581 nested-name-specifier-opt: ε
  582                          | nested-name-specifier

  583 nested-namespace-definition: "namespace" enclosing-namespace-specifier "::" inline-opt IDENTIFIER '{' namespace-body '}'

  584 nested-requirement: "requires" constraint-expression ';'

  585 new-declarator: ptr-operator new-declarator-opt
  586               | noptr-new-declarator

  587 new-declarator-opt: ε
  588                   | new-declarator

  589 new-expression: scope-opt "new" new-placement-opt new-type-id new-initializer-opt
  590               | scope-opt "new" new-placement-opt '(' type-id ')' new-initializer-opt

  591 new-initializer: '(' expression-list-opt ')'
  592                | braced-init-list

  593 new-initializer-opt: ε
  594                    | new-initializer

  595 new-placement: '(' expression-list ')'

  596 new-placement-opt: ε
  597                  | new-placement

  598 new-type-id: type-specifier-seq new-declarator-opt

  599 nodeclspec-function-declaration: attribute-specifier-seq-opt declarator ';'

  600 noexcept-expression: "noexcept" '(' expression ')'

  601 noexcept-opt: ε
  602             | "noexcept"

  603 noexcept-specifier: "noexcept" '(' constant-expression ')'
  604                   | "noexcept"

  605 noexcept-specifier-opt: ε
  606                       | noexcept-specifier

  607 nonzero-digit: '1'
  608              | '2'
  609              | '3'
  610              | '4'
  611              | '5'
  612              | '6'
  613              | '7'
  614              | '8'
  615              | '9'

  616 noptr-abstract-declarator: noptr-abstract-declarator-opt parameters-and-qualifiers
  617                          | noptr-abstract-declarator-opt '[' constant-expression-opt ']' attribute-specifier-seq-opt
  618                          | '(' ptr-abstract-declarator ')'

  619 noptr-abstract-declarator-opt: ε
  620                              | noptr-abstract-declarator

  621 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator parameters-and-qualifiers
  622                               | noptr-abstract-pack-declarator '[' constant-expression-opt ']' attribute-specifier-seq-opt
  623                               | "..."

  624 noptr-declarator: declarator-id attribute-specifier-seq-opt
  625                 | noptr-declarator parameters-and-qualifiers
  626                 | noptr-declarator '[' constant-expression-opt ']' attribute-specifier-seq-opt
  627                 | '(' ptr-declarator ')'

  628 noptr-new-declarator: '[' expression-opt ']' attribute-specifier-seq-opt
  629                     | noptr-new-declarator '[' constant-expression ']' attribute-specifier-seq-opt

  630 numeric-escape-sequence: octal-escape-sequence
  631                        | hexadecimal-escape-sequence

  632 octal-digit: '0'
  633            | '1'
  634            | '2'
  635            | '3'
  636            | '4'
  637            | '5'
  638            | '6'
  639            | '7'

  640 octal-escape-sequence: '\\' octal-digit
  641                      | '\\' octal-digit octal-digit
  642                      | '\\' octal-digit octal-digit octal-digit

  643 octal-literal: '0'
  644              | octal-literal apostrophe-opt octal-digit

  645 opaque-enum-declaration: enum-key attribute-specifier-seq-opt enum-head-name enum-base-opt ';'

  646 operator-function-id: "operator" overloadable-operator
  647                     | "operator" overloadable-operator '<' template-argument-list-opt '>'

  648 overloadable-operator: "new"
  649                      | "delete"
  650                      | "new" '[' ']'
  651                      | "delete" '[' ']'
  652                      | "co_await"
  653                      | '(' ')'
  654                      | '[' ']'
  655                      | "->"
  656                      | "->*"
  657                      | '~'
  658                      | '!'
  659                      | '+'
  660                      | '-'
  661                      | '*'
  662                      | '/'
  663                      | '%'
  664                      | '^'
  665                      | '&'
  666                      | '|'
  667                      | '='
  668                      | "+="
  669                      | "-="
  670                      | "*="
  671                      | "/="
  672                      | "%="
  673                      | "^="
  674                      | "&="
  675                      | "|="
  676                      | "=="
  677                      | "!="
  678                      | '<'
  679                      | '>'
  680                      | "<="
  681                      | ">="
  682                      | "<=>"
  683                      | "&&"
  684                      | "||"
  685                      | "<<"
  686                      | ">>"
  687                      | "<<="
  688                      | ">>="
  689                      | "++"
  690                      | "--"
  691                      | ','

  692 parameter-declaration: attribute-specifier-seq-opt this-opt decl-specifier-seq declarator
  693                      | attribute-specifier-seq-opt this-opt decl-specifier-seq declarator '=' initializer-clause
  694                      | attribute-specifier-seq-opt this-opt decl-specifier-seq abstract-declarator-opt
  695                      | attribute-specifier-seq-opt this-opt decl-specifier-seq abstract-declarator-opt '=' initializer-clause

  696 parameter-declaration-clause: parameter-declaration-list-opt eclipse-opt
  697                             | parameter-declaration-list ',' "..."

  698 parameter-declaration-list: parameter-declaration
  699                           | parameter-declaration-list ',' parameter-declaration

  700 parameter-declaration-list-opt: ε
  701                               | parameter-declaration-list

  702 parameters-and-qualifiers: '(' parameter-declaration-clause ')' cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt

  703 placeholder-type-specifier: type-constraint-opt "auto"
  704                           | type-constraint-opt "decltype" '(' "auto" ')'

  705 pm-expression: cast-expression
  706              | pm-expression ".*" cast-expression
  707              | pm-expression "->*" cast-expression

  708 pointer-literal: "nullptr"

  709 postfix-expression: primary-expression
  710                   | postfix-expression '[' expression-list-opt ']'
  711                   | postfix-expression '(' expression-list-opt ')'
  712                   | simple-type-specifier '(' expression-list-opt ')'
  713                   | typename-specifier '(' expression-list-opt ')'
  714                   | simple-type-specifier braced-init-list
  715                   | typename-specifier braced-init-list
  716                   | postfix-expression '.' template-opt id-expression
  717                   | postfix-expression "->" template-opt id-expression
  718                   | postfix-expression "++"
  719                   | postfix-expression "--"
  720                   | "dynamic_cast" '<' type-id '>' '(' expression ')'
  721                   | "static_cast" '<' type-id '>' '(' expression ')'
  722                   | "reinterpret_cast" '<' type-id '>' '(' expression ')'
  723                   | "const_cast" '<' type-id '>' '(' expression ')'
  724                   | "typeid" '(' expression ')'
  725                   | "typeid" '(' type-id ')'

  726 primary-expression: literal
  727                   | "this"
  728                   | '(' expression ')'
  729                   | id-expression
  730                   | lambda-expression
  731                   | fold-expression
  732                   | requires-expression

  733 private-module-fragment: "module-keyword" ':' "private" ';' declaration-seq-opt

  734 private-module-fragment-opt: ε
  735                            | private-module-fragment

  736 ptr-abstract-declarator: noptr-abstract-declarator
  737                        | ptr-operator ptr-abstract-declarator-opt

  738 ptr-abstract-declarator-opt: ε
  739                            | ptr-abstract-declarator

  740 ptr-declarator: noptr-declarator
  741               | ptr-operator ptr-declarator

  742 ptr-operator: '*' attribute-specifier-seq-opt cv-qualifier-seq-opt
  743             | '&' attribute-specifier-seq-opt
  744             | "&&" attribute-specifier-seq-opt
  745             | nested-name-specifier '*' attribute-specifier-seq-opt cv-qualifier-seq-opt

  746 pure-specifier: '=' '0'

  747 pure-specifier-opt: ε
  748                   | pure-specifier

  749 q-char: EXCEPT_NEW_LINE_AND_QUOTATION_MARK

  750 q-char-sequence: q-char
  751                | q-char-sequence q-char

  752 qualified-id: nested-name-specifier template-opt unqualified-id

  753 qualified-namespace-specifier: nested-name-specifier-opt namespace-name

  754 r-char: EXCEPT_RIGHT_PARENTHESIS_FOLLOWED_BY_THE_INITIAL_D_CHAR_SEQUENCE_FOLLOWED_BY_QUOTATION_MARK

  755 r-char-sequence: r-char
  756                | r-char-sequence r-char

  757 r-char-sequence-opt: ε
  758                    | r-char-sequence

  759 raw-string: '"' d-char-sequence-opt '(' r-char-sequence-opt ')' d-char-sequence-opt '"'

  760 ref-qualifier: '&'
  761              | "&&"

  762 ref-qualifier-opt: ε
  763                  | ref-qualifier

  764 relational-expression: compare-expression
  765                      | relational-expression '<' compare-expression
  766                      | relational-expression '>' compare-expression
  767                      | relational-expression "<=" compare-expression
  768                      | relational-expression ">=" compare-expression

  769 requirement: simple-requirement
  770            | type-requirement
  771            | compound-requirement
  772            | nested-requirement

  773 requirement-body: '{' requirement-seq '}'

  774 requirement-parameter-list: '(' parameter-declaration-clause ')'

  775 requirement-parameter-list-opt: ε
  776                               | requirement-parameter-list

  777 requirement-seq: requirement
  778                | requirement-seq requirement

  779 requires-clause: "requires" constraint-logical-or-expression

  780 requires-clause-opt: ε
  781                    | requires-clause

  782 requires-expression: "requires" requirement-parameter-list-opt requirement-body

  783 return-type-requirement: "->" type-constraint

  784 return-type-requirement-opt: ε
  785                            | return-type-requirement

  786 s-char: basic-s-char
  787       | escape-sequence
  788       | universal-character-name

  789 s-char-sequence: s-char
  790                | s-char-sequence s-char

  791 s-char-sequence-opt: ε
  792                    | s-char-sequence

  793 scope-opt: ε
  794          | "::"

  795 selection-statement: "if" constexpr-opt '(' init-statement-opt condition ')' statement
  796                    | "if" constexpr-opt '(' init-statement-opt condition ')' statement "else" statement
  797                    | "if" exclamation-opt "consteval" compound-statement
  798                    | "if" exclamation-opt "consteval" compound-statement "else" statement
  799                    | "switch" '(' init-statement-opt condition ')' statement

  800 shift-expression: additive-expression
  801                 | shift-expression "<<" additive-expression
  802                 | shift-expression ">>" additive-expression

  803 sign: '+'
  804     | '-'

  805 sign-opt: ε
  806         | sign

  807 simple-capture: IDENTIFIER eclipse-opt
  808               | '&' IDENTIFIER eclipse-opt
  809               | "this"
  810               | '*' "this"

  811 simple-declaration: decl-specifier-seq init-declarator-list-opt ';'
  812                   | attribute-specifier-seq decl-specifier-seq init-declarator-list ';'
  813                   | attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt '[' identifier-list ']' initializer ';'

  814 simple-escape-sequence: '\\' simple-escape-sequence-char

  815 simple-escape-sequence-char: '\''
  816                            | '"'
  817                            | '?'
  818                            | '\\'
  819                            | 'a'
  820                            | 'b'
  821                            | 'f'
  822                            | 'n'
  823                            | 'r'
  824                            | 't'
  825                            | 'v'

  826 simple-requirement: expression ';'

  827 simple-template-id: template-name '<' template-argument-list-opt '>'

  828 simple-type-specifier: nested-name-specifier-opt type-name
  829                      | nested-name-specifier "template" simple-template-id
  830                      | decltype-specifier
  831                      | placeholder-type-specifier
  832                      | nested-name-specifier-opt template-name
  833                      | "char"
  834                      | "char8_t"
  835                      | "char16_t"
  836                      | "char32_t"
  837                      | "wchar_t"
  838                      | "bool"
  839                      | "short"
  840                      | "int"
  841                      | "long"
  842                      | "signed"
  843                      | "unsigned"
  844                      | "float"
  845                      | "double"
  846                      | "void"

  847 size-suffix: 'z'
  848            | 'Z'

  849 size-suffix-opt: ε
  850                | size-suffix

  851 statement: labeled-statement
  852          | attribute-specifier-seq-opt expression-statement
  853          | attribute-specifier-seq-opt compound-statement
  854          | attribute-specifier-seq-opt selection-statement
  855          | attribute-specifier-seq-opt iteration-statement
  856          | attribute-specifier-seq-opt jump-statement
  857          | declaration-statement
  858          | attribute-specifier-seq-opt try-block

  859 statement-seq: statement
  860              | statement-seq statement

  861 statement-seq-opt: ε
  862                  | statement-seq

  863 static_assert-declaration: "static_assert" '(' constant-expression ')' ';'
  864                          | "static_assert" '(' constant-expression ',' string-literal ')' ';'

  865 storage-class-specifier: "static"
  866                        | "thread_local"
  867                        | "extern"
  868                        | "mutable"

  869 string-literal: encoding-prefix-opt '"' s-char-sequence-opt '"'
  870               | encoding-prefix-opt 'R' raw-string

  871 template-argument: constant-expression
  872                  | type-id
  873                  | id-expression

  874 template-argument-list: template-argument eclipse-opt
  875                       | template-argument-list ',' template-argument eclipse-opt

  876 template-argument-list-opt: ε
  877                           | template-argument-list

  878 template-declaration: template-head declaration
  879                     | template-head concept-definition

  880 template-head: "template" '<' template-parameter-list '>' requires-clause-opt

  881 template-id: simple-template-id
  882            | operator-function-id '<' template-argument-list-opt '>'
  883            | literal-operator-id '<' template-argument-list-opt '>'

  884 template-name: IDENTIFIER

  885 template-opt: ε
  886             | "template"

  887 template-parameter: type-parameter
  888                   | parameter-declaration

  889 template-parameter-list: template-parameter
  890                        | template-parameter-list ',' template-parameter

  891 this-opt: ε
  892         | "this"

  893 throw-expression: "throw" assignment-expression-opt

  894 trailing-return-type: "->" type-id

  895 trailing-return-type-opt: ε
  896                         | trailing-return-type

  897 translation-unit: declaration-seq-opt
  898                 | global-module-fragment-opt module-declaration declaration-seq-opt private-module-fragment-opt

  899 try-block: "try" compound-statement handler-seq

  900 type-constraint: nested-name-specifier-opt concept-name
  901                | nested-name-specifier-opt concept-name '<' template-argument-list-opt '>'

  902 type-constraint-opt: ε
  903                    | type-constraint

  904 type-id: type-specifier-seq abstract-declarator-opt

  905 type-name: class-name
  906          | enum-name
  907          | typedef-name

  908 type-parameter: type-parameter-key eclipse-opt identifier-opt
  909               | type-parameter-key identifier-opt '=' type-id
  910               | type-constraint eclipse-opt identifier-opt
  911               | type-constraint identifier-opt '=' type-id
  912               | template-head type-parameter-key eclipse-opt identifier-opt
  913               | template-head type-parameter-key identifier-opt '=' id-expression

  914 type-parameter-key: "class"
  915                   | "typename"

  916 type-requirement: "typename" nested-name-specifier-opt type-name ';'

  917 type-specifier: simple-type-specifier
  918               | elaborated-type-specifier
  919               | typename-specifier
  920               | cv-qualifier

  921 type-specifier-seq: type-specifier attribute-specifier-seq-opt
  922                   | type-specifier type-specifier-seq

  923 typedef-name: IDENTIFIER
  924             | simple-template-id

  925 typename-opt: ε
  926             | "typename"

  927 typename-specifier: "typename" nested-name-specifier IDENTIFIER
  928                   | "typename" nested-name-specifier template-opt simple-template-id

  929 ud-suffix: IDENTIFIER

  930 unary-expression: postfix-expression
  931                 | unary-operator cast-expression
  932                 | "++" cast-expression
  933                 | "--" cast-expression
  934                 | await-expression
  935                 | "sizeof" unary-expression
  936                 | "sizeof" '(' type-id ')'
  937                 | "sizeof" "..." '(' IDENTIFIER ')'
  938                 | "alignof" '(' type-id ')'
  939                 | noexcept-expression
  940                 | new-expression
  941                 | delete-expression

  942 unary-operator: '*'
  943               | '&'
  944               | '+'
  945               | '-'
  946               | '!'
  947               | '~'

  948 universal-character-name: "\\u" hex-quad
  949                         | "\\U" hex-quad hex-quad

  950 unnamed-namespace-definition: inline-opt "namespace" attribute-specifier-seq-opt '{' namespace-body '}'

  951 unqualified-id: IDENTIFIER
  952               | operator-function-id
  953               | conversion-function-id
  954               | literal-operator-id
  955               | '~' type-name
  956               | '~' decltype-specifier
  957               | template-id

  958 unsigned-suffix: 'u'
  959                | 'U'

  960 unsigned-suffix-opt: ε
  961                    | unsigned-suffix

  962 user-defined-character-literal: character-literal ud-suffix

  963 user-defined-floating-point-literal: fractional-constant exponent-part-opt ud-suffix
  964                                    | digit-sequence exponent-part ud-suffix
  965                                    | hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part ud-suffix
  966                                    | hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part ud-suffix

  967 user-defined-integer-literal: decimal-literal ud-suffix
  968                             | octal-literal ud-suffix
  969                             | hexadecimal-literal ud-suffix
  970                             | binary-literal ud-suffix

  971 user-defined-literal: user-defined-integer-literal
  972                     | user-defined-floating-point-literal
  973                     | user-defined-string-literal
  974                     | user-defined-character-literal

  975 user-defined-string-literal: string-literal ud-suffix

  976 using-declaration: "using" using-declarator-list ';'

  977 using-declarator: typename-opt nested-name-specifier unqualified-id

  978 using-declarator-list: using-declarator eclipse-opt
  979                      | using-declarator-list ',' using-declarator eclipse-opt

  980 using-directive: attribute-specifier-seq-opt "using" "namespace" nested-name-specifier-opt namespace-name ';'

  981 using-enum-declaration: "using" elaborated-enum-specifier ';'

  982 virt-specifier: "override"
  983               | "final"

  984 virt-specifier-seq: virt-specifier
  985                   | virt-specifier-seq virt-specifier

  986 virt-specifier-seq-opt: ε
  987                       | virt-specifier-seq

  988 virtual-opt: ε
  989            | "virtual"

  990 yield-expression: "co_yield" assignment-expression
  991                 | "co_yield" braced-init-list


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 294 658 946
    '"' (34) 392 759 816 869
    '%' (37) 341 565 663
    '&' (38) 20 115 343 441 665 743 760 808 943
    '\'' (39) 22 121 815
    '(' (40) 17 18 23 42 65 120 220 221 299 334 335 336 387 454 475 476 477 478 493 521 590 591 595 600 603 618 627 653 702 704 711 712 713 720 721 722 723 724 725 728 759 774 795 796 799 863 864 936 937 938
    ')' (41) 17 18 23 42 65 120 220 221 299 334 335 336 387 454 475 476 477 478 493 521 590 591 595 600 603 618 627 653 702 704 711 712 713 720 721 722 723 724 725 728 759 774 795 796 799 863 864 936 937 938
    '*' (42) 339 563 661 742 745 810 942
    '+' (43) 14 337 659 803 944
    ',' (44) 47 49 80 118 138 232 276 281 317 366 435 445 458 489 526 543 691 697 699 864 875 890 979
    '-' (45) 15 338 660 804 945
    '.' (46) 233 372 373 427 428 555 556 716
    '/' (47) 340 564 662
    '0' (48) 83 234 397 632 643 746
    '1' (49) 84 235 398 607 633
    '2' (50) 236 399 608 634
    '3' (51) 237 400 609 635
    '4' (52) 238 401 610 636
    '5' (53) 239 402 611 637
    '6' (54) 240 403 612 638
    '7' (55) 241 404 613 639
    '8' (56) 242 405 614
    '9' (57) 243 406 615
    ':' (58) 61 73 152 169 264 478 484 485 486 541 547 559 733
    ';' (59) 16 23 45 141 143 168 221 255 323 376 377 383 476 477 479 480 481 483 527 550 551 552 553 568 584 599 645 733 811 812 813 826 863 864 916 976 980 981
    '<' (60) 298 360 391 495 647 678 720 721 722 723 765 827 880 882 883 901
    '=' (61) 16 30 101 116 143 279 357 376 377 568 667 693 695 746 909 911 913
    '>' (62) 298 361 391 495 647 679 720 721 722 723 766 827 880 882 883 901
    '?' (63) 152 817
    'A' (65) 413
    'B' (66) 414
    'C' (67) 415
    'D' (68) 416
    'E' (69) 304 417
    'F' (70) 330 418
    'L' (76) 261 331 518
    'P' (80) 86
    'R' (82) 870
    'U' (85) 260 959
    'Z' (90) 848
    '[' (91) 54 66 229 370 496 617 622 626 628 629 650 651 654 710 813
    '\\' (92) 149 640 641 642 814 818
    ']' (93) 54 66 229 370 496 617 622 626 628 629 650 651 654 710 813
    '^' (94) 296 342 664
    'a' (97) 407 819
    'b' (98) 408 820
    'c' (99) 409
    'd' (100) 410
    'e' (101) 303 411
    'f' (102) 328 412 821
    'l' (108) 329 517
    'n' (110) 822
    'p' (112) 85
    'r' (114) 823
    't' (116) 824
    'u' (117) 259 958
    'v' (118) 825
    'z' (122) 847
    '{' (123) 67 105 106 107 133 141 142 275 276 308 498 566 583 773 950
    '|' (124) 344 439 666
    '}' (125) 67 105 106 107 133 141 142 275 276 308 498 566 583 773 950
    '~' (126) 657 947 955 956
    error (256)
    IDENTIFIER (258) 16 50 53 59 128 144 233 250 251 256 257 268 274 277 434 435 437 440 441 483 484 507 524 554 555 556 559 566 567 568 573 579 583 807 808 884 923 927 929 937 951
    ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE (259) 68
    EXCEPT_THE_APOSTROPHE_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER (260) 81
    EXCEPT_THE_QUOTATION_MARK_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER (261) 82
    NOT_AN_OCTAL_DIGIT_A_SIMPLE_ESCAPE_SEQUENCE_CHAR_OR_THE_CHARACTERS_U_U_OR_X (262) 150
    EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE (263) 177
    EXCEPT_NEW_LINE_AND_GREATER_THAN_SIGN (264) 386
    LL (265) 514
    EXCEPT_NEW_LINE_AND_QUOTATION_MARK (266) 749
    EXCEPT_RIGHT_PARENTHESIS_FOLLOWED_BY_THE_INITIAL_D_CHAR_SEQUENCE_FOLLOWED_BY_QUOTATION_MARK (267) 754
    "private" (268) 8 733
    "protected" (269) 9
    "public" (270) 10
    "using" (271) 16 61 976 980 981
    "alignas" (272) 17 18
    "asm" (273) 23
    "*=" (274) 31 349 670
    "/=" (275) 32 350 671
    "%=" (276) 33 351 672
    "+=" (277) 34 347 668
    "-=" (278) 35 348 669
    ">>=" (279) 36 356 688
    "<<=" (280) 37 355 687
    "&=" (281) 38 353 674
    "^=" (282) 39 352 673
    "|=" (283) 40 354 675
    "..." (284) 48 49 249 292 334 335 336 623 697 937
    "::" (285) 53 257 575 576 577 578 579 580 583 794
    "co_await" (286) 64 652
    "virtual" (287) 77 380 989
    "0b" (288) 87
    "0B" (289) 88
    "false" (290) 99
    "true" (291) 100
    "class" (292) 125 272 914
    "struct" (293) 126 273
    "union" (294) 127
    "template" (295) 131 297 298 829 880 886
    "final" (296) 134 983
    "<=>" (297) 140 682
    "concept" (298) 143
    "constexpr" (299) 157 191
    "&&" (300) 160 364 510 683 744 761
    "||" (301) 162 365 512 684
    "operator" (302) 166 507 508 646 647
    "co_return" (303) 168
    "const" (304) 172
    "volatile" (305) 173
    "friend" (306) 189
    "typedef" (307) 190
    "consteval" (308) 192 797 798
    "constinit" (309) 193
    "inline" (310) 194 462
    "decltype" (311) 220 704
    "->" (312) 221 655 717 783 894
    "delete" (313) 228 229 377 649 651
    "enum" (314) 250 271 272 273
    "u8" (315) 258
    "==" (316) 285 358 676
    "!=" (317) 286 359 677
    "explicit" (318) 299 300
    "export" (319) 307 308
    "export-keyword" (320) 309 311
    "extern" (321) 325 498 499 867
    "<<" (322) 345 685 801
    ">>" (323) 346 686 802
    "<=" (324) 362 680 767
    ">=" (325) 363 681 768
    ".*" (326) 367 706
    "->*" (327) 368 656 707
    "default" (328) 376 486
    "try" (329) 382 899
    "module-keyword" (330) 383 550 733
    "catch" (331) 387
    "h-char-sequence" (332) 391 395
    "h-char-sequence:" (333) 393
    "\\x" (334) 423
    "0x" (335) 430
    "0X" (336) 431
    "while" (337) 475 476
    "do" (338) 476
    "for" (339) 477 478
    "break" (340) 479
    "continue" (341) 480
    "return" (342) 481
    "goto" (343) 483
    "case" (344) 485
    "ll" (345) 513
    "import-keyword" (346) 551 552 553
    "namespace" (347) 566 568 583 950 980
    "requires" (348) 584 779 782
    "new" (349) 589 590 648 650
    "noexcept" (350) 600 602 603 604
    "++" (351) 689 718 932
    "--" (352) 690 719 933
    "auto" (353) 703 704
    "nullptr" (354) 708
    "dynamic_cast" (355) 720
    "static_cast" (356) 721
    "reinterpret_cast" (357) 722
    "const_cast" (358) 723
    "typeid" (359) 724 725
    "this" (360) 727 809 810 892
    "if" (361) 795 796 797 798
    "else" (362) 796 798
    "switch" (363) 799
    "char" (364) 833
    "char8_t" (365) 834
    "char16_t" (366) 835
    "char32_t" (367) 836
    "wchar_t" (368) 837
    "bool" (369) 838
    "short" (370) 839
    "int" (371) 840
    "long" (372) 841
    "signed" (373) 842
    "unsigned" (374) 843
    "float" (375) 844
    "double" (376) 845
    "void" (377) 846
    "static_assert" (378) 863 864
    "static" (379) 865
    "thread_local" (380) 866
    "mutable" (381) 868
    "throw" (382) 893
    "typename" (383) 915 916 926 927 928
    "sizeof" (384) 935 936 937
    "alignof" (385) 938
    "\\u" (386) 948
    "\\U" (387) 949
    "override" (388) 982
    "co_yield" (389) 990 991


Nonterminals, with rules where they appear

    $accept (197)
        on left: 0
    abstract-declarator (198)
        on left: 1 2 3
        on right: 5
    abstract-declarator-opt (199)
        on left: 4 5
        on right: 222 291 694 695 904
    abstract-pack-declarator (200)
        on left: 6 7
        on right: 3 7
    access-specifier (201)
        on left: 8 9 10
        on right: 12 78 547
    access-specifier-opt (202)
        on left: 11 12
        on right: 77
    additive-expression (203)
        on left: 13 14 15
        on right: 14 15 800 801 802
    alias-declaration (204)
        on left: 16
        on right: 97 450 535
    alignment-specifier (205)
        on left: 17 18
        on right: 55
    and-expression (206)
        on left: 19 20
        on right: 20 295 296
    apostrophe-opt (207)
        on left: 21 22
        on right: 89 185 245 420 644
    asm-declaration (208)
        on left: 23
        on right: 91
    assignment-expression (209)
        on left: 24 25 26 27
        on right: 29 152 316 317 455 990
    assignment-expression-opt (210)
        on left: 28 29
        on right: 893
    assignment-operator (211)
        on left: 30 31 32 33 34 35 36 37 38 39 40
        on right: 27
    attribute (212)
        on left: 41
        on right: 48 49 52
    attribute-argument-clause (213)
        on left: 42
        on right: 44
    attribute-argument-clause-opt (214)
        on left: 43 44
        on right: 41
    attribute-declaration (215)
        on left: 45
        on right: 210
    attribute-list (216)
        on left: 46 47 48 49
        on right: 47 49 54
    attribute-namespace (217)
        on left: 50
        on right: 53 61
    attribute-opt (218)
        on left: 51 52
        on right: 46 47
    attribute-scoped-token (219)
        on left: 53
        on right: 60
    attribute-specifier (220)
        on left: 54 55
        on right: 56
    attribute-specifier-seq (221)
        on left: 56
        on right: 45 58 812
    attribute-specifier-seq-opt (222)
        on left: 57 58
        on right: 16 23 56 76 77 78 122 123 146 195 226 251 267 277 290 291 369 370 378 379 484 485 486 497 527 541 550 551 552 553 566 599 617 622 624 626 628 629 645 692 693 694 695 702 742 743 744 745 813 852 853 854 855 856 858 921 950 980
    attribute-token (223)
        on left: 59 60
        on right: 41
    attribute-using-prefix (224)
        on left: 61
        on right: 63
    attribute-using-prefix-opt (225)
        on left: 62 63
        on right: 54
    await-expression (226)
        on left: 64
        on right: 934
    balanced-token (227)
        on left: 65 66 67 68
        on right: 69 70
    balanced-token-seq (228)
        on left: 69 70
        on right: 70 72
    balanced-token-seq-opt (229)
        on left: 71 72
        on right: 42 65 66 67
    base-clause (230)
        on left: 73
        on right: 75
    base-clause-opt (231)
        on left: 74 75
        on right: 122 123
    base-specifier (232)
        on left: 76 77 78
        on right: 79 80
    base-specifier-list (233)
        on left: 79 80
        on right: 73 80
    basic-c-char (234)
        on left: 81
        on right: 108
    basic-s-char (235)
        on left: 82
        on right: 786
    binary-digit (236)
        on left: 83 84
        on right: 87 88 89
    binary-exponent-part (237)
        on left: 85 86
        on right: 425 426 965 966
    binary-literal (238)
        on left: 87 88 89
        on right: 89 463 970
    block-declaration (239)
        on left: 90 91 92 93 94 95 96 97 98
        on right: 199 216
    boolean-literal (240)
        on left: 99 100
        on right: 504
    brace-or-equal-initializer (241)
        on left: 101 102
        on right: 104 146 230 453
    brace-or-equal-initializer-opt (242)
        on left: 103 104
        on right: 540 541
    braced-init-list (243)
        on left: 105 106 107
        on right: 102 313 456 522 592 714 715 991
    c-char (244)
        on left: 108 109 110
        on right: 111 112
    c-char-sequence (245)
        on left: 111 112
        on right: 112 121
    capture (246)
        on left: 113 114
        on right: 117 118
    capture-default (247)
        on left: 115 116
        on right: 487 489
    capture-list (248)
        on left: 117 118
        on right: 118 488 489
    cast-expression (249)
        on left: 119 120
        on right: 64 120 228 229 334 335 336 705 706 707 931 932 933
    character-literal (250)
        on left: 121
        on right: 501 962
    class-head (251)
        on left: 122 123
        on right: 133
    class-head-name (252)
        on left: 124
        on right: 122
    class-key (253)
        on left: 125 126 127
        on right: 122 123 251 252 253
    class-name (254)
        on left: 128 129
        on right: 124 905
    class-or-decltype (255)
        on left: 130 131 132
        on right: 76 77 78 523
    class-specifier (256)
        on left: 133
        on right: 224
    class-virt-specifier (257)
        on left: 134
        on right: 136
    class-virt-specifier-opt (258)
        on left: 135 136
        on right: 122
    comma-opt (259)
        on left: 137 138
        on right: 105 106
    compare-expression (260)
        on left: 139 140
        on right: 140 764 765 766 767 768
    compound-requirement (261)
        on left: 141
        on right: 771
    compound-statement (262)
        on left: 142
        on right: 374 382 387 494 495 797 798 853 899
    concept-definition (263)
        on left: 143
        on right: 879
    concept-name (264)
        on left: 144
        on right: 143 900 901
    condition (265)
        on left: 145 146
        on right: 148 475 795 796 799
    condition-opt (266)
        on left: 147 148
        on right: 477
    conditional-escape-sequence (267)
        on left: 149
        on right: 289
    conditional-escape-sequence-char (268)
        on left: 150
        on right: 149
    conditional-expression (269)
        on left: 151 152
        on right: 24 153
    constant-expression (270)
        on left: 153
        on right: 18 155 279 299 485 541 603 629 863 864 871
    constant-expression-opt (271)
        on left: 154 155
        on right: 617 622 626
    constexpr-opt (272)
        on left: 156 157
        on right: 795 796
    constraint-expression (273)
        on left: 158
        on right: 143 584
    constraint-logical-and-expression (274)
        on left: 159 160
        on right: 160 161 162
    constraint-logical-or-expression (275)
        on left: 161 162
        on right: 162 779
    conversion-declarator (276)
        on left: 163
        on right: 165
    conversion-declarator-opt (277)
        on left: 164 165
        on right: 163 167
    conversion-function-id (278)
        on left: 166
        on right: 953
    conversion-type-id (279)
        on left: 167
        on right: 166
    coroutine-return-statement (280)
        on left: 168
        on right: 482
    ctor-initializer (281)
        on left: 169
        on right: 171
    ctor-initializer-opt (282)
        on left: 170 171
        on right: 374 382
    cv-qualifier (283)
        on left: 172 173
        on right: 174 920
    cv-qualifier-seq (284)
        on left: 174
        on right: 176
    cv-qualifier-seq-opt (285)
        on left: 175 176
        on right: 174 702 742 745
    d-char (286)
        on left: 177
        on right: 178 179
    d-char-sequence (287)
        on left: 178 179
        on right: 179 181
    d-char-sequence-opt (288)
        on left: 180 181
        on right: 759
    decimal-floating-point-literal (289)
        on left: 182 183
        on right: 326
    decimal-literal (290)
        on left: 184 185
        on right: 185 465 967
    decl-specifier (291)
        on left: 186 187 188 189 190 191 192 193 194
        on right: 195 196
    decl-specifier-seq (292)
        on left: 195 196
        on right: 146 196 198 369 370 692 693 694 695 811 812 813
    decl-specifier-seq-opt (293)
        on left: 197 198
        on right: 378 379 497 527
    declaration (294)
        on left: 199 200 201 202 203 204 205 206 207 208 209 210 211
        on right: 212 213 297 298 307 499 878
    declaration-seq (295)
        on left: 212 213
        on right: 213 215
    declaration-seq-opt (296)
        on left: 214 215
        on right: 308 383 498 569 733 897 898
    declaration-statement (297)
        on left: 216
        on right: 857
    declarator (298)
        on left: 217 218
        on right: 146 290 369 378 379 442 443 538 539 540 599 692 693
    declarator-id (299)
        on left: 219
        on right: 624
    decltype-specifier (300)
        on left: 220
        on right: 132 578 830 956
    deduction-guide (301)
        on left: 221
        on right: 203 534
    defining-type-id (302)
        on left: 222
        on right: 16
    defining-type-specifier (303)
        on left: 223 224 225
        on right: 187 226 227
    defining-type-specifier-seq (304)
        on left: 226 227
        on right: 222 227
    delete-expression (305)
        on left: 228 229
        on right: 941
    designated-initializer-clause (306)
        on left: 230
        on right: 231 232
    designated-initializer-list (307)
        on left: 231 232
        on right: 106 232
    designator (308)
        on left: 233
        on right: 230
    digit (309)
        on left: 234 235 236 237 238 239 240 241 242 243
        on right: 185 244 245
    digit-sequence (310)
        on left: 244 245
        on right: 85 86 183 245 247 303 304 372 373 964
    digit-sequence-opt (311)
        on left: 246 247
        on right: 372
    eclipse-opt (312)
        on left: 248 249
        on right: 17 18 79 80 219 440 441 457 458 525 526 696 807 808 874 875 908 910 912 978 979
    elaborated-enum-specifier (313)
        on left: 250
        on right: 254 981
    elaborated-type-specifier (314)
        on left: 251 252 253 254
        on right: 918
    empty-declaration (315)
        on left: 255
        on right: 209 537
    enclosing-namespace-specifier (316)
        on left: 256 257
        on right: 257 583
    encoding-prefix (317)
        on left: 258 259 260 261
        on right: 263
    encoding-prefix-opt (318)
        on left: 262 263
        on right: 121 869 870
    enum-base (319)
        on left: 264
        on right: 266
    enum-base-opt (320)
        on left: 265 266
        on right: 267 645
    enum-head (321)
        on left: 267
        on right: 275 276
    enum-head-name (322)
        on left: 268
        on right: 270 645
    enum-head-name-opt (323)
        on left: 269 270
        on right: 267
    enum-key (324)
        on left: 271 272 273
        on right: 267 645
    enum-name (325)
        on left: 274
        on right: 906
    enum-specifier (326)
        on left: 275 276
        on right: 225
    enumerator (327)
        on left: 277
        on right: 278 279
    enumerator-definition (328)
        on left: 278 279
        on right: 280 281
    enumerator-list (329)
        on left: 280 281
        on right: 276 281 283
    enumerator-list-opt (330)
        on left: 282 283
        on right: 275
    equality-expression (331)
        on left: 284 285 286
        on right: 19 20 285 286
    escape-sequence (332)
        on left: 287 288 289
        on right: 109 787
    exception-declaration (333)
        on left: 290 291 292
        on right: 387
    exclamation-opt (334)
        on left: 293 294
        on right: 797 798
    exclusive-or-expression (335)
        on left: 295 296
        on right: 296 438 439
    explicit-instantiation (336)
        on left: 297
        on right: 204
    explicit-specialization (337)
        on left: 298
        on right: 205 533
    explicit-specifier (338)
        on left: 299 300
        on right: 302 381
    explicit-specifier-opt (339)
        on left: 301 302
        on right: 221
    exponent-part (340)
        on left: 303 304
        on right: 183 306 964
    exponent-part-opt (341)
        on left: 305 306
        on right: 182 963
    export-declaration (342)
        on left: 307 308 309
        on right: 206
    export-keyword-opt (343)
        on left: 310 311
        on right: 550
    expr-or-braced-init-list (344)
        on left: 312 313
        on right: 315 371
    expr-or-braced-init-list-opt (345)
        on left: 314 315
        on right: 168 481
    expression (346)
        on left: 316 317
        on right: 141 145 152 220 312 317 322 476 600 720 721 722 723 724 728 826
    expression-list (347)
        on left: 318
        on right: 320 454 595
    expression-list-opt (348)
        on left: 319 320
        on right: 521 591 710 711 712 713
    expression-opt (349)
        on left: 321 322
        on right: 323 477 628
    expression-statement (350)
        on left: 323
        on right: 448 852
    extern-opt (351)
        on left: 324 325
        on right: 297
    floating-point-literal (352)
        on left: 326 327
        on right: 502
    floating-point-suffix (353)
        on left: 328 329 330 331
        on right: 333
    floating-point-suffix-opt (354)
        on left: 332 333
        on right: 182 183 425 426
    fold-expression (355)
        on left: 334 335 336
        on right: 731
    fold-operator (356)
        on left: 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368
        on right: 334 335 336
    for-range-declaration (357)
        on left: 369 370
        on right: 478
    for-range-initializer (358)
        on left: 371
        on right: 478
    fractional-constant (359)
        on left: 372 373
        on right: 182 963
    function-body (360)
        on left: 374 375 376 377
        on right: 378 379
    function-definition (361)
        on left: 378 379
        on right: 201 528
    function-specifier (362)
        on left: 380 381
        on right: 188
    function-try-block (363)
        on left: 382
        on right: 375
    global-module-fragment (364)
        on left: 383
        on right: 385
    global-module-fragment-opt (365)
        on left: 384 385
        on right: 898
    h-char (366)
        on left: 386
        on right: 394 395
    handler (367)
        on left: 387
        on right: 388
    handler-seq (368)
        on left: 388
        on right: 382 390 899
    handler-seq-opt (369)
        on left: 389 390
        on right: 388
    header-name (370)
        on left: 391 392 393 394 395
        on right: 553
    hex-quad (371)
        on left: 396
        on right: 948 949
    hexadecimal-digit (372)
        on left: 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418
        on right: 396 419 420 423 424
    hexadecimal-digit-sequence (373)
        on left: 419 420
        on right: 420 422 426 427 428 429 966
    hexadecimal-digit-sequence-opt (374)
        on left: 421 422
        on right: 427
    hexadecimal-escape-sequence (375)
        on left: 423 424
        on right: 424 631
    hexadecimal-floating-point-literal (376)
        on left: 425 426
        on right: 327
    hexadecimal-fractional-constant (377)
        on left: 427 428
        on right: 425 965
    hexadecimal-literal (378)
        on left: 429
        on right: 466 969
    hexadecimal-prefix (379)
        on left: 430 431
        on right: 425 426 429 965 966
    id-expression (380)
        on left: 432 433
        on right: 219 716 717 729 873 913
    identifier-list (381)
        on left: 434 435
        on right: 370 435 813
    identifier-opt (382)
        on left: 436 437
        on right: 541 908 909 910 911 912 913
    inclusive-or-expression (383)
        on left: 438 439
        on right: 439 509 510
    init-capture (384)
        on left: 440 441
        on right: 114
    init-declarator (385)
        on left: 442 443
        on right: 444 445
    init-declarator-list (386)
        on left: 444 445
        on right: 445 447 812
    init-declarator-list-opt (387)
        on left: 446 447
        on right: 811
    init-statement (388)
        on left: 448 449 450
        on right: 452 477
    init-statement-opt (389)
        on left: 451 452
        on right: 478 795 796 799
    initializer (390)
        on left: 453 454
        on right: 440 441 460 813
    initializer-clause (391)
        on left: 455 456
        on right: 27 101 457 458 693 695
    initializer-list (392)
        on left: 457 458
        on right: 105 318 458
    initializer-opt (393)
        on left: 459 460
        on right: 442
    inline-opt (394)
        on left: 461 462
        on right: 257 566 583 950
    integer-literal (395)
        on left: 463 464 465 466
        on right: 500
    integer-suffix (396)
        on left: 467 468 469 470 471 472
        on right: 474
    integer-suffix-opt (397)
        on left: 473 474
        on right: 463 464 465 466
    iteration-statement (398)
        on left: 475 476 477 478
        on right: 855
    jump-statement (399)
        on left: 479 480 481 482 483
        on right: 856
    labeled-statement (400)
        on left: 484 485 486
        on right: 851
    lambda-capture (401)
        on left: 487 488 489
        on right: 491
    lambda-capture-opt (402)
        on left: 490 491
        on right: 496
    lambda-declarator (403)
        on left: 492 493
        on right: 494 495
    lambda-expression (404)
        on left: 494 495
        on right: 730
    lambda-introducer (405)
        on left: 496
        on right: 494 495
    lambda-specifiers (406)
        on left: 497
        on right: 492 493
    linkage-specification (407)
        on left: 498 499
        on right: 207
    literal (408)
        on left: 500 501 502 503 504 505 506
        on right: 726
    literal-operator-id (409)
        on left: 507 508
        on right: 883 954
    logical-and-expression (410)
        on left: 509 510
        on right: 510 511 512
    logical-or-expression (411)
        on left: 511 512
        on right: 27 151 152 158 512
    long-long-suffix (412)
        on left: 513 514
        on right: 471 516
    long-long-suffix-opt (413)
        on left: 515 516
        on right: 468
    long-suffix (414)
        on left: 517 518
        on right: 470 520
    long-suffix-opt (415)
        on left: 519 520
        on right: 467
    mem-initializer (416)
        on left: 521 522
        on right: 525 526
    mem-initializer-id (417)
        on left: 523 524
        on right: 521 522
    mem-initializer-list (418)
        on left: 525 526
        on right: 169 526
    member-declaration (419)
        on left: 527 528 529 530 531 532 533 534 535 536 537
        on right: 546
    member-declarator (420)
        on left: 538 539 540 541
        on right: 542 543
    member-declarator-list (421)
        on left: 542 543
        on right: 543 545
    member-declarator-list-opt (422)
        on left: 544 545
        on right: 527
    member-specification (423)
        on left: 546 547
        on right: 549
    member-specification-opt (424)
        on left: 548 549
        on right: 133 546 547
    module-declaration (425)
        on left: 550
        on right: 898
    module-import-declaration (426)
        on left: 551 552 553
        on right: 211 309
    module-name (427)
        on left: 554
        on right: 550 551
    module-name-qualifier (428)
        on left: 555 556
        on right: 556 558
    module-name-qualifier-opt (429)
        on left: 557 558
        on right: 554 559
    module-partition (430)
        on left: 559
        on right: 552 561
    module-partition-opt (431)
        on left: 560 561
        on right: 550
    multiplicative-expression (432)
        on left: 562 563 564 565
        on right: 13 14 15 563 564 565
    named-namespace-definition (433)
        on left: 566
        on right: 570
    namespace-alias (434)
        on left: 567
        on right: 574
    namespace-alias-definition (435)
        on left: 568
        on right: 92
    namespace-body (436)
        on left: 569
        on right: 566 583 950
    namespace-definition (437)
        on left: 570 571 572
        on right: 208
    namespace-name (438)
        on left: 573 574
        on right: 577 753 980
    nested-name-specifier (439)
        on left: 575 576 577 578 579 580
        on right: 131 253 579 580 582 745 752 829 927 928 977
    nested-name-specifier-opt (440)
        on left: 581 582
        on right: 124 130 250 251 268 753 828 832 900 901 916 980
    nested-namespace-definition (441)
        on left: 583
        on right: 572
    nested-requirement (442)
        on left: 584
        on right: 772
    new-declarator (443)
        on left: 585 586
        on right: 588
    new-declarator-opt (444)
        on left: 587 588
        on right: 585 598
    new-expression (445)
        on left: 589 590
        on right: 940
    new-initializer (446)
        on left: 591 592
        on right: 594
    new-initializer-opt (447)
        on left: 593 594
        on right: 589 590
    new-placement (448)
        on left: 595
        on right: 597
    new-placement-opt (449)
        on left: 596 597
        on right: 589 590
    new-type-id (450)
        on left: 598
        on right: 589
    nodeclspec-function-declaration (451)
        on left: 599
        on right: 200
    noexcept-expression (452)
        on left: 600
        on right: 939
    noexcept-opt (453)
        on left: 601 602
        on right: 141
    noexcept-specifier (454)
        on left: 603 604
        on right: 606
    noexcept-specifier-opt (455)
        on left: 605 606
        on right: 497 702
    nonzero-digit (456)
        on left: 607 608 609 610 611 612 613 614 615
        on right: 184
    noptr-abstract-declarator (457)
        on left: 616 617 618
        on right: 620 736
    noptr-abstract-declarator-opt (458)
        on left: 619 620
        on right: 2 616 617
    noptr-abstract-pack-declarator (459)
        on left: 621 622 623
        on right: 6 621 622
    noptr-declarator (460)
        on left: 624 625 626 627
        on right: 218 625 626 740
    noptr-new-declarator (461)
        on left: 628 629
        on right: 586 629
    numeric-escape-sequence (462)
        on left: 630 631
        on right: 288
    octal-digit (463)
        on left: 632 633 634 635 636 637 638 639
        on right: 640 641 642 644
    octal-escape-sequence (464)
        on left: 640 641 642
        on right: 630
    octal-literal (465)
        on left: 643 644
        on right: 464 644 968
    opaque-enum-declaration (466)
        on left: 645
        on right: 98 536
    operator-function-id (467)
        on left: 646 647
        on right: 882 952
    overloadable-operator (468)
        on left: 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691
        on right: 646 647
    parameter-declaration (469)
        on left: 692 693 694 695
        on right: 698 699 888
    parameter-declaration-clause (470)
        on left: 696 697
        on right: 221 493 702 774
    parameter-declaration-list (471)
        on left: 698 699
        on right: 697 699 701
    parameter-declaration-list-opt (472)
        on left: 700 701
        on right: 696
    parameters-and-qualifiers (473)
        on left: 702
        on right: 2 218 616 621 625
    placeholder-type-specifier (474)
        on left: 703 704
        on right: 831
    pm-expression (475)
        on left: 705 706 707
        on right: 562 563 564 565 706 707
    pointer-literal (476)
        on left: 708
        on right: 505
    postfix-expression (477)
        on left: 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725
        on right: 710 711 716 717 718 719 930
    primary-expression (478)
        on left: 726 727 728 729 730 731 732
        on right: 159 160 709
    private-module-fragment (479)
        on left: 733
        on right: 735
    private-module-fragment-opt (480)
        on left: 734 735
        on right: 898
    ptr-abstract-declarator (481)
        on left: 736 737
        on right: 1 618 739
    ptr-abstract-declarator-opt (482)
        on left: 738 739
        on right: 737
    ptr-declarator (483)
        on left: 740 741
        on right: 217 627 741
    ptr-operator (484)
        on left: 742 743 744 745
        on right: 7 163 585 737 741
    pure-specifier (485)
        on left: 746
        on right: 748
    pure-specifier-opt (486)
        on left: 747 748
        on right: 538
    q-char (487)
        on left: 749
        on right: 750 751
    q-char-sequence (488)
        on left: 750 751
        on right: 392 751
    qualified-id (489)
        on left: 752
        on right: 433
    qualified-namespace-specifier (490)
        on left: 753
        on right: 568
    r-char (491)
        on left: 754
        on right: 755 756
    r-char-sequence (492)
        on left: 755 756
        on right: 756 758
    r-char-sequence-opt (493)
        on left: 757 758
        on right: 759
    raw-string (494)
        on left: 759
        on right: 870
    ref-qualifier (495)
        on left: 760 761
        on right: 763
    ref-qualifier-opt (496)
        on left: 762 763
        on right: 370 702 813
    relational-expression (497)
        on left: 764 765 766 767 768
        on right: 284 285 286 765 766 767 768
    requirement (498)
        on left: 769 770 771 772
        on right: 777 778
    requirement-body (499)
        on left: 773
        on right: 782
    requirement-parameter-list (500)
        on left: 774
        on right: 776
    requirement-parameter-list-opt (501)
        on left: 775 776
        on right: 782
    requirement-seq (502)
        on left: 777 778
        on right: 773 778
    requires-clause (503)
        on left: 779
        on right: 379 443 539 781
    requires-clause-opt (504)
        on left: 780 781
        on right: 493 495 880
    requires-expression (505)
        on left: 782
        on right: 732
    return-type-requirement (506)
        on left: 783
        on right: 785
    return-type-requirement-opt (507)
        on left: 784 785
        on right: 141
    s-char (508)
        on left: 786 787 788
        on right: 789 790
    s-char-sequence (509)
        on left: 789 790
        on right: 790 792
    s-char-sequence-opt (510)
        on left: 791 792
        on right: 869
    scope-opt (511)
        on left: 793 794
        on right: 228 229 589 590
    selection-statement (512)
        on left: 795 796 797 798 799
        on right: 854
    shift-expression (513)
        on left: 800 801 802
        on right: 139 140 801 802
    sign (514)
        on left: 803 804
        on right: 806
    sign-opt (515)
        on left: 805 806
        on right: 85 86 303 304
    simple-capture (516)
        on left: 807 808 809 810
        on right: 113
    simple-declaration (517)
        on left: 811 812 813
        on right: 90 449
    simple-escape-sequence (518)
        on left: 814
        on right: 287
    simple-escape-sequence-char (519)
        on left: 815 816 817 818 819 820 821 822 823 824 825
        on right: 814
    simple-requirement (520)
        on left: 826
        on right: 769
    simple-template-id (521)
        on left: 827
        on right: 129 131 221 252 253 580 829 881 924 928
    simple-type-specifier (522)
        on left: 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846
        on right: 712 714 917
    size-suffix (523)
        on left: 847 848
        on right: 472 850
    size-suffix-opt (524)
        on left: 849 850
        on right: 469
    statement (525)
        on left: 851 852 853 854 855 856 857 858
        on right: 475 476 477 478 484 485 486 795 796 798 799 859 860
    statement-seq (526)
        on left: 859 860
        on right: 860 862
    statement-seq-opt (527)
        on left: 861 862
        on right: 142
    static_assert-declaration (528)
        on left: 863 864
        on right: 96 531
    storage-class-specifier (529)
        on left: 865 866 867 868
        on right: 186
    string-literal (530)
        on left: 869 870
        on right: 23 498 499 503 507 864 975
    template-argument (531)
        on left: 871 872 873
        on right: 874 875
    template-argument-list (532)
        on left: 874 875
        on right: 875 877
    template-argument-list-opt (533)
        on left: 876 877
        on right: 647 827 882 883 901
    template-declaration (534)
        on left: 878 879
        on right: 202 532
    template-head (535)
        on left: 880
        on right: 878 879 912 913
    template-id (536)
        on left: 881 882 883
        on right: 957
    template-name (537)
        on left: 884
        on right: 221 827 832
    template-opt (538)
        on left: 885 886
        on right: 253 580 716 717 752 928
    template-parameter (539)
        on left: 887 888
        on right: 889 890
    template-parameter-list (540)
        on left: 889 890
        on right: 495 880 890
    this-opt (541)
        on left: 891 892
        on right: 692 693 694 695
    throw-expression (542)
        on left: 893
        on right: 26
    trailing-return-type (543)
        on left: 894
        on right: 2 218 896
    trailing-return-type-opt (544)
        on left: 895 896
        on right: 497
    translation-unit (545)
        on left: 897 898
        on right: 0
    try-block (546)
        on left: 899
        on right: 858
    type-constraint (547)
        on left: 900 901
        on right: 783 903 910 911
    type-constraint-opt (548)
        on left: 902 903
        on right: 703 704
    type-id (549)
        on left: 904
        on right: 17 120 590 720 721 722 723 725 872 894 909 911 936 938
    type-name (550)
        on left: 905 906 907
        on right: 130 576 828 916 955
    type-parameter (551)
        on left: 908 909 910 911 912 913
        on right: 887
    type-parameter-key (552)
        on left: 914 915
        on right: 908 909 912 913
    type-requirement (553)
        on left: 916
        on right: 770
    type-specifier (554)
        on left: 917 918 919 920
        on right: 223 921 922
    type-specifier-seq (555)
        on left: 921 922
        on right: 167 264 290 291 598 904 922
    typedef-name (556)
        on left: 923 924
        on right: 907
    typename-opt (557)
        on left: 925 926
        on right: 977
    typename-specifier (558)
        on left: 927 928
        on right: 713 715 919
    ud-suffix (559)
        on left: 929
        on right: 962 963 964 965 966 967 968 969 970 975
    unary-expression (560)
        on left: 930 931 932 933 934 935 936 937 938 939 940 941
        on right: 119 935
    unary-operator (561)
        on left: 942 943 944 945 946 947
        on right: 931
    universal-character-name (562)
        on left: 948 949
        on right: 110 788
    unnamed-namespace-definition (563)
        on left: 950
        on right: 571
    unqualified-id (564)
        on left: 951 952 953 954 955 956 957
        on right: 432 752 977
    unsigned-suffix (565)
        on left: 958 959
        on right: 467 468 469 961
    unsigned-suffix-opt (566)
        on left: 960 961
        on right: 470 471 472
    user-defined-character-literal (567)
        on left: 962
        on right: 974
    user-defined-floating-point-literal (568)
        on left: 963 964 965 966
        on right: 972
    user-defined-integer-literal (569)
        on left: 967 968 969 970
        on right: 971
    user-defined-literal (570)
        on left: 971 972 973 974
        on right: 506
    user-defined-string-literal (571)
        on left: 975
        on right: 508 973
    using-declaration (572)
        on left: 976
        on right: 93 529
    using-declarator (573)
        on left: 977
        on right: 978 979
    using-declarator-list (574)
        on left: 978 979
        on right: 976 979
    using-directive (575)
        on left: 980
        on right: 95
    using-enum-declaration (576)
        on left: 981
        on right: 94 530
    virt-specifier (577)
        on left: 982 983
        on right: 984 985
    virt-specifier-seq (578)
        on left: 984 985
        on right: 985 987
    virt-specifier-seq-opt (579)
        on left: 986 987
        on right: 378 538
    virtual-opt (580)
        on left: 988 989
        on right: 78
    yield-expression (581)
        on left: 990 991
        on right: 25


State 0

    0 $accept: • translation-unit $end

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "module-keyword"  shift, and go to state 24
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    $end              reduce using rule 214 (declaration-seq-opt)
    IDENTIFIER        [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER        [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER        [reduce using rule 581 (nested-name-specifier-opt)]
    "using"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"        [reduce using rule 324 (extern-opt)]
    "constexpr"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"        [reduce using rule 902 (type-constraint-opt)]
    "enum"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "export-keyword"  [reduce using rule 384 (global-module-fragment-opt)]
    "extern"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "module-keyword"  [reduce using rule 384 (global-module-fragment-opt)]
    "namespace"       [reduce using rule 461 (inline-opt)]
    "auto"            reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"            [reduce using rule 902 (type-constraint-opt)]
    "char"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default          reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 59
    declaration-seq                  go to state 60
    declaration-seq-opt              go to state 61
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    global-module-fragment           go to state 80
    global-module-fragment-opt       go to state 81
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    translation-unit                 go to state 104
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 1

  128 class-name: IDENTIFIER •
  274 enum-name: IDENTIFIER •
  567 namespace-alias: IDENTIFIER •
  573 namespace-name: IDENTIFIER •
  884 template-name: IDENTIFIER •
  923 typedef-name: IDENTIFIER •

    "::"      reduce using rule 128 (class-name)
    "::"      [reduce using rule 274 (enum-name)]
    "::"      [reduce using rule 567 (namespace-alias)]
    "::"      [reduce using rule 573 (namespace-name)]
    "::"      [reduce using rule 923 (typedef-name)]
    '<'       reduce using rule 884 (template-name)
    $default  reduce using rule 128 (class-name)


State 2

   16 alias-declaration: "using" • IDENTIFIER attribute-specifier-seq-opt '=' defining-type-id ';'
  976 using-declaration: "using" • using-declarator-list ';'
  981 using-enum-declaration: "using" • elaborated-enum-specifier ';'

    IDENTIFIER  shift, and go to state 115
    "enum"      shift, and go to state 116
    "typename"  shift, and go to state 117

    IDENTIFIER  [reduce using rule 925 (typename-opt)]
    $default    reduce using rule 925 (typename-opt)

    elaborated-enum-specifier  go to state 118
    typename-opt               go to state 119
    using-declarator           go to state 120
    using-declarator-list      go to state 121


State 3

  255 empty-declaration: ';' •

    $default  reduce using rule 255 (empty-declaration)


State 4

  575 nested-name-specifier: "::" •

    $default  reduce using rule 575 (nested-name-specifier)


State 5

  380 function-specifier: "virtual" •

    $default  reduce using rule 380 (function-specifier)


State 6

  125 class-key: "class" •

    $default  reduce using rule 125 (class-key)


State 7

  126 class-key: "struct" •

    $default  reduce using rule 126 (class-key)


State 8

  127 class-key: "union" •

    $default  reduce using rule 127 (class-key)


State 9

  298 explicit-specialization: "template" • '<' '>' declaration
  880 template-head: "template" • '<' template-parameter-list '>' requires-clause-opt

    '<'  shift, and go to state 122


State 10

  191 decl-specifier: "constexpr" •

    $default  reduce using rule 191 (decl-specifier)


State 11

  172 cv-qualifier: "const" •

    $default  reduce using rule 172 (cv-qualifier)


State 12

  173 cv-qualifier: "volatile" •

    $default  reduce using rule 173 (cv-qualifier)


State 13

  189 decl-specifier: "friend" •

    $default  reduce using rule 189 (decl-specifier)


State 14

  190 decl-specifier: "typedef" •

    $default  reduce using rule 190 (decl-specifier)


State 15

  192 decl-specifier: "consteval" •

    $default  reduce using rule 192 (decl-specifier)


State 16

  193 decl-specifier: "constinit" •

    $default  reduce using rule 193 (decl-specifier)


State 17

  194 decl-specifier: "inline" •
  462 inline-opt: "inline" •

    "namespace"  reduce using rule 462 (inline-opt)
    $default     reduce using rule 194 (decl-specifier)


State 18

  220 decltype-specifier: "decltype" • '(' expression ')'

    '('  shift, and go to state 123


State 19

  250 elaborated-enum-specifier: "enum" • nested-name-specifier-opt IDENTIFIER
  271 enum-key: "enum" •
  272         | "enum" • "class"
  273         | "enum" • "struct"

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 124
    "struct"    shift, and go to state 125
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 271 (enum-key)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "::"        [reduce using rule 271 (enum-key)]
    "decltype"  [reduce using rule 271 (enum-key)]
    $default    reduce using rule 271 (enum-key)

    class-name                 go to state 54
    decltype-specifier         go to state 126
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 127
    nested-name-specifier-opt  go to state 128
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 20

  299 explicit-specifier: "explicit" • '(' constant-expression ')'
  300                   | "explicit" •

    '('  shift, and go to state 129

    '('       [reduce using rule 300 (explicit-specifier)]
    $default  reduce using rule 300 (explicit-specifier)


State 21

  307 export-declaration: "export" • declaration
  308                   | "export" • '{' declaration-seq-opt '}'

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    '{'               shift, and go to state 130
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"      [reduce using rule 324 (extern-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "namespace"     [reduce using rule 461 (inline-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 131
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 22

  309 export-declaration: "export-keyword" • module-import-declaration

    "import-keyword"  shift, and go to state 25

    module-import-declaration  go to state 132


State 23

  325 extern-opt: "extern" •
  498 linkage-specification: "extern" • string-literal '{' declaration-seq-opt '}'
  499                      | "extern" • string-literal declaration
  867 storage-class-specifier: "extern" •

    "u8"  shift, and go to state 133
    'u'   shift, and go to state 134
    'U'   shift, and go to state 135
    'L'   shift, and go to state 136

    "template"  reduce using rule 325 (extern-opt)
    '"'         reduce using rule 262 (encoding-prefix-opt)
    'R'         reduce using rule 262 (encoding-prefix-opt)
    $default    reduce using rule 867 (storage-class-specifier)

    encoding-prefix      go to state 137
    encoding-prefix-opt  go to state 138
    string-literal       go to state 139


State 24

  383 global-module-fragment: "module-keyword" • ';' declaration-seq-opt

    ';'  shift, and go to state 140


State 25

  551 module-import-declaration: "import-keyword" • module-name attribute-specifier-seq-opt ';'
  552                          | "import-keyword" • module-partition attribute-specifier-seq-opt ';'
  553                          | "import-keyword" • header-name attribute-specifier-seq-opt ';'

    IDENTIFIER                             shift, and go to state 141
    EXCEPT_NEW_LINE_AND_GREATER_THAN_SIGN  shift, and go to state 142
    ':'                                    shift, and go to state 143
    '<'                                    shift, and go to state 144
    "h-char-sequence"                      shift, and go to state 145
    '"'                                    shift, and go to state 146
    "h-char-sequence:"                     shift, and go to state 147

    IDENTIFIER  [reduce using rule 557 (module-name-qualifier-opt)]

    h-char                     go to state 148
    header-name                go to state 149
    module-name                go to state 150
    module-name-qualifier      go to state 151
    module-name-qualifier-opt  go to state 152
    module-partition           go to state 153


State 26

  568 namespace-alias-definition: "namespace" • IDENTIFIER '=' qualified-namespace-specifier ';'
  583 nested-namespace-definition: "namespace" • enclosing-namespace-specifier "::" inline-opt IDENTIFIER '{' namespace-body '}'

    IDENTIFIER  shift, and go to state 154

    enclosing-namespace-specifier  go to state 155


State 27

  833 simple-type-specifier: "char" •

    $default  reduce using rule 833 (simple-type-specifier)


State 28

  834 simple-type-specifier: "char8_t" •

    $default  reduce using rule 834 (simple-type-specifier)


State 29

  835 simple-type-specifier: "char16_t" •

    $default  reduce using rule 835 (simple-type-specifier)


State 30

  836 simple-type-specifier: "char32_t" •

    $default  reduce using rule 836 (simple-type-specifier)


State 31

  837 simple-type-specifier: "wchar_t" •

    $default  reduce using rule 837 (simple-type-specifier)


State 32

  838 simple-type-specifier: "bool" •

    $default  reduce using rule 838 (simple-type-specifier)


State 33

  839 simple-type-specifier: "short" •

    $default  reduce using rule 839 (simple-type-specifier)


State 34

  840 simple-type-specifier: "int" •

    $default  reduce using rule 840 (simple-type-specifier)


State 35

  841 simple-type-specifier: "long" •

    $default  reduce using rule 841 (simple-type-specifier)


State 36

  842 simple-type-specifier: "signed" •

    $default  reduce using rule 842 (simple-type-specifier)


State 37

  843 simple-type-specifier: "unsigned" •

    $default  reduce using rule 843 (simple-type-specifier)


State 38

  844 simple-type-specifier: "float" •

    $default  reduce using rule 844 (simple-type-specifier)


State 39

  845 simple-type-specifier: "double" •

    $default  reduce using rule 845 (simple-type-specifier)


State 40

  846 simple-type-specifier: "void" •

    $default  reduce using rule 846 (simple-type-specifier)


State 41

  863 static_assert-declaration: "static_assert" • '(' constant-expression ')' ';'
  864                          | "static_assert" • '(' constant-expression ',' string-literal ')' ';'

    '('  shift, and go to state 156


State 42

  865 storage-class-specifier: "static" •

    $default  reduce using rule 865 (storage-class-specifier)


State 43

  866 storage-class-specifier: "thread_local" •

    $default  reduce using rule 866 (storage-class-specifier)


State 44

  868 storage-class-specifier: "mutable" •

    $default  reduce using rule 868 (storage-class-specifier)


State 45

  927 typename-specifier: "typename" • nested-name-specifier IDENTIFIER
  928                   | "typename" • nested-name-specifier template-opt simple-template-id

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "decltype"  shift, and go to state 18

    class-name             go to state 54
    decltype-specifier     go to state 126
    enum-name              go to state 70
    namespace-alias        go to state 86
    namespace-name         go to state 89
    nested-name-specifier  go to state 157
    simple-template-id     go to state 97
    template-name          go to state 103
    type-name              go to state 107
    typedef-name           go to state 109


State 46

   97 block-declaration: alias-declaration •

    $default  reduce using rule 97 (block-declaration)


State 47

   91 block-declaration: asm-declaration •

    $default  reduce using rule 91 (block-declaration)


State 48

  210 declaration: attribute-declaration •

    $default  reduce using rule 210 (declaration)


State 49

   45 attribute-declaration: attribute-specifier-seq • ';'
   58 attribute-specifier-seq-opt: attribute-specifier-seq •
  812 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list ';'

    IDENTIFIER      shift, and go to state 1
    ';'             shift, and go to state 158
    "::"            shift, and go to state 4
    "virtual"       shift, and go to state 5
    "class"         shift, and go to state 6
    "struct"        shift, and go to state 7
    "union"         shift, and go to state 8
    "constexpr"     shift, and go to state 10
    "const"         shift, and go to state 11
    "volatile"      shift, and go to state 12
    "friend"        shift, and go to state 13
    "typedef"       shift, and go to state 14
    "consteval"     shift, and go to state 15
    "constinit"     shift, and go to state 16
    "inline"        shift, and go to state 159
    "decltype"      shift, and go to state 18
    "enum"          shift, and go to state 19
    "explicit"      shift, and go to state 20
    "extern"        shift, and go to state 160
    "char"          shift, and go to state 27
    "char8_t"       shift, and go to state 28
    "char16_t"      shift, and go to state 29
    "char32_t"      shift, and go to state 30
    "wchar_t"       shift, and go to state 31
    "bool"          shift, and go to state 32
    "short"         shift, and go to state 33
    "int"           shift, and go to state 34
    "long"          shift, and go to state 35
    "signed"        shift, and go to state 36
    "unsigned"      shift, and go to state 37
    "float"         shift, and go to state 38
    "double"        shift, and go to state 39
    "void"          shift, and go to state 40
    "static"        shift, and go to state 42
    "thread_local"  shift, and go to state 43
    "mutable"       shift, and go to state 44
    "typename"      shift, and go to state 45

    IDENTIFIER      [reduce using rule 58 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "::"            [reduce using rule 58 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 58 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 58 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 58 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 58 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 58 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 58 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 58 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 58 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 58 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 58 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 58 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 58 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 58 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 58 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 58 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 58 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 58 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 58 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 58 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 58 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 58 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    $default        reduce using rule 58 (attribute-specifier-seq-opt)

    class-head                  go to state 52
    class-key                   go to state 53
    class-name                  go to state 54
    class-specifier             go to state 55
    cv-qualifier                go to state 56
    decl-specifier              go to state 57
    decl-specifier-seq          go to state 161
    decltype-specifier          go to state 62
    defining-type-specifier     go to state 64
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-head                   go to state 68
    enum-key                    go to state 162
    enum-name                   go to state 70
    enum-specifier              go to state 71
    explicit-specifier          go to state 163
    function-specifier          go to state 79
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    storage-class-specifier     go to state 100
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 108
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 50

   23 asm-declaration: attribute-specifier-seq-opt • "asm" '(' string-literal ')' ';'
   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  378 function-definition: attribute-specifier-seq-opt • decl-specifier-seq-opt declarator virt-specifier-seq-opt function-body
  379                    | attribute-specifier-seq-opt • decl-specifier-seq-opt declarator requires-clause function-body
  599 nodeclspec-function-declaration: attribute-specifier-seq-opt • declarator ';'
  813 simple-declaration: attribute-specifier-seq-opt • decl-specifier-seq ref-qualifier-opt '[' identifier-list ']' initializer ';'
  980 using-directive: attribute-specifier-seq-opt • "using" "namespace" nested-name-specifier-opt namespace-name ';'

    IDENTIFIER      shift, and go to state 1
    "using"         shift, and go to state 164
    "alignas"       shift, and go to state 165
    '('             shift, and go to state 166
    '&'             shift, and go to state 167
    "asm"           shift, and go to state 168
    "..."           shift, and go to state 169
    "::"            shift, and go to state 4
    '['             shift, and go to state 170
    "virtual"       shift, and go to state 5
    "class"         shift, and go to state 6
    "struct"        shift, and go to state 7
    "union"         shift, and go to state 8
    "constexpr"     shift, and go to state 10
    "&&"            shift, and go to state 171
    "const"         shift, and go to state 11
    "volatile"      shift, and go to state 12
    "friend"        shift, and go to state 13
    "typedef"       shift, and go to state 14
    "consteval"     shift, and go to state 15
    "constinit"     shift, and go to state 16
    "inline"        shift, and go to state 159
    "decltype"      shift, and go to state 18
    "enum"          shift, and go to state 19
    "explicit"      shift, and go to state 20
    "extern"        shift, and go to state 160
    '*'             shift, and go to state 172
    "char"          shift, and go to state 27
    "char8_t"       shift, and go to state 28
    "char16_t"      shift, and go to state 29
    "char32_t"      shift, and go to state 30
    "wchar_t"       shift, and go to state 31
    "bool"          shift, and go to state 32
    "short"         shift, and go to state 33
    "int"           shift, and go to state 34
    "long"          shift, and go to state 35
    "signed"        shift, and go to state 36
    "unsigned"      shift, and go to state 37
    "float"         shift, and go to state 38
    "double"        shift, and go to state 39
    "void"          shift, and go to state 40
    "static"        shift, and go to state 42
    "thread_local"  shift, and go to state 43
    "mutable"       shift, and go to state 44
    "typename"      shift, and go to state 45

    IDENTIFIER  [reduce using rule 197 (decl-specifier-seq-opt)]
    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    '('         [reduce using rule 197 (decl-specifier-seq-opt)]
    '&'         [reduce using rule 197 (decl-specifier-seq-opt)]
    "..."       [reduce using rule 197 (decl-specifier-seq-opt)]
    "::"        [reduce using rule 197 (decl-specifier-seq-opt)]
    "::"        [reduce using rule 248 (eclipse-opt)]
    "&&"        [reduce using rule 197 (decl-specifier-seq-opt)]
    "operator"  reduce using rule 197 (decl-specifier-seq-opt)
    "operator"  [reduce using rule 248 (eclipse-opt)]
    "decltype"  [reduce using rule 197 (decl-specifier-seq-opt)]
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    '*'         [reduce using rule 197 (decl-specifier-seq-opt)]
    '~'         reduce using rule 197 (decl-specifier-seq-opt)
    '~'         [reduce using rule 248 (eclipse-opt)]
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 197 (decl-specifier-seq-opt)

    alignment-specifier         go to state 173
    attribute-specifier         go to state 174
    class-head                  go to state 52
    class-key                   go to state 53
    class-name                  go to state 54
    class-specifier             go to state 55
    cv-qualifier                go to state 56
    decl-specifier              go to state 57
    decl-specifier-seq          go to state 175
    decl-specifier-seq-opt      go to state 176
    declarator                  go to state 177
    declarator-id               go to state 178
    decltype-specifier          go to state 62
    defining-type-specifier     go to state 64
    eclipse-opt                 go to state 179
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-head                   go to state 68
    enum-key                    go to state 162
    enum-name                   go to state 70
    enum-specifier              go to state 71
    explicit-specifier          go to state 163
    function-specifier          go to state 79
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 180
    nested-name-specifier-opt   go to state 91
    noptr-declarator            go to state 181
    placeholder-type-specifier  go to state 95
    ptr-declarator              go to state 182
    ptr-operator                go to state 183
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    storage-class-specifier     go to state 100
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 108
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 51

  199 declaration: block-declaration •

    $default  reduce using rule 199 (declaration)


State 52

  133 class-specifier: class-head • '{' member-specification-opt '}'

    '{'  shift, and go to state 184


State 53

  122 class-head: class-key • attribute-specifier-seq-opt class-head-name class-virt-specifier-opt base-clause-opt
  123           | class-key • attribute-specifier-seq-opt base-clause-opt
  251 elaborated-type-specifier: class-key • attribute-specifier-seq-opt nested-name-specifier-opt IDENTIFIER
  252                          | class-key • simple-template-id
  253                          | class-key • nested-name-specifier template-opt simple-template-id

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 186
    class-name                   go to state 54
    decltype-specifier           go to state 126
    enum-name                    go to state 70
    namespace-alias              go to state 86
    namespace-name               go to state 89
    nested-name-specifier        go to state 187
    simple-template-id           go to state 188
    template-name                go to state 103
    type-name                    go to state 107
    typedef-name                 go to state 109


State 54

  905 type-name: class-name •

    $default  reduce using rule 905 (type-name)


State 55

  224 defining-type-specifier: class-specifier •

    $default  reduce using rule 224 (defining-type-specifier)


State 56

  920 type-specifier: cv-qualifier •

    $default  reduce using rule 920 (type-specifier)


State 57

  195 decl-specifier-seq: decl-specifier • attribute-specifier-seq-opt
  196                   | decl-specifier • decl-specifier-seq

    IDENTIFIER      shift, and go to state 1
    "::"            shift, and go to state 4
    "virtual"       shift, and go to state 5
    "class"         shift, and go to state 6
    "struct"        shift, and go to state 7
    "union"         shift, and go to state 8
    "constexpr"     shift, and go to state 10
    "const"         shift, and go to state 11
    "volatile"      shift, and go to state 12
    "friend"        shift, and go to state 13
    "typedef"       shift, and go to state 14
    "consteval"     shift, and go to state 15
    "constinit"     shift, and go to state 16
    "inline"        shift, and go to state 159
    "decltype"      shift, and go to state 18
    "enum"          shift, and go to state 19
    "explicit"      shift, and go to state 20
    "extern"        shift, and go to state 160
    "char"          shift, and go to state 27
    "char8_t"       shift, and go to state 28
    "char16_t"      shift, and go to state 29
    "char32_t"      shift, and go to state 30
    "wchar_t"       shift, and go to state 31
    "bool"          shift, and go to state 32
    "short"         shift, and go to state 33
    "int"           shift, and go to state 34
    "long"          shift, and go to state 35
    "signed"        shift, and go to state 36
    "unsigned"      shift, and go to state 37
    "float"         shift, and go to state 38
    "double"        shift, and go to state 39
    "void"          shift, and go to state 40
    "static"        shift, and go to state 42
    "thread_local"  shift, and go to state 43
    "mutable"       shift, and go to state 44
    "typename"      shift, and go to state 45

    IDENTIFIER  [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "::"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 189
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 190
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 162
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    namespace-alias              go to state 86
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    placeholder-type-specifier   go to state 95
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110


State 58

  811 simple-declaration: decl-specifier-seq • init-declarator-list-opt ';'

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 166
    '&'         shift, and go to state 167
    "..."       shift, and go to state 169
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    ';'         reduce using rule 446 (init-declarator-list-opt)
    "::"        [reduce using rule 248 (eclipse-opt)]
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 248 (eclipse-opt)

    class-name                go to state 54
    declarator                go to state 191
    declarator-id             go to state 178
    decltype-specifier        go to state 126
    eclipse-opt               go to state 179
    enum-name                 go to state 70
    init-declarator           go to state 192
    init-declarator-list      go to state 193
    init-declarator-list-opt  go to state 194
    namespace-alias           go to state 86
    namespace-name            go to state 89
    nested-name-specifier     go to state 195
    noptr-declarator          go to state 181
    ptr-declarator            go to state 182
    ptr-operator              go to state 183
    simple-template-id        go to state 97
    template-name             go to state 103
    type-name                 go to state 107
    typedef-name              go to state 109


State 59

  212 declaration-seq: declaration •

    $default  reduce using rule 212 (declaration-seq)


State 60

  213 declaration-seq: declaration-seq • declaration
  215 declaration-seq-opt: declaration-seq •

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    $end              reduce using rule 215 (declaration-seq-opt)
    IDENTIFIER        [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER        [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER        [reduce using rule 581 (nested-name-specifier-opt)]
    "using"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    '}'               reduce using rule 215 (declaration-seq-opt)
    "virtual"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"        [reduce using rule 324 (extern-opt)]
    "constexpr"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"        [reduce using rule 902 (type-constraint-opt)]
    "enum"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "export-keyword"  [reduce using rule 215 (declaration-seq-opt)]
    "extern"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "module-keyword"  reduce using rule 215 (declaration-seq-opt)
    "namespace"       [reduce using rule 461 (inline-opt)]
    "auto"            reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"            [reduce using rule 902 (type-constraint-opt)]
    "char"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default          reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 196
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 61

  897 translation-unit: declaration-seq-opt •

    $default  reduce using rule 897 (translation-unit)


State 62

  578 nested-name-specifier: decltype-specifier • "::"
  830 simple-type-specifier: decltype-specifier •

    "::"  shift, and go to state 197

    "::"      [reduce using rule 830 (simple-type-specifier)]
    $default  reduce using rule 830 (simple-type-specifier)


State 63

  203 declaration: deduction-guide •

    $default  reduce using rule 203 (declaration)


State 64

  187 decl-specifier: defining-type-specifier •

    $default  reduce using rule 187 (decl-specifier)


State 65

  254 elaborated-type-specifier: elaborated-enum-specifier •

    $default  reduce using rule 254 (elaborated-type-specifier)


State 66

  918 type-specifier: elaborated-type-specifier •

    $default  reduce using rule 918 (type-specifier)


State 67

  209 declaration: empty-declaration •

    $default  reduce using rule 209 (declaration)


State 68

  275 enum-specifier: enum-head • '{' enumerator-list-opt '}'
  276               | enum-head • '{' enumerator-list ',' '}'

    '{'  shift, and go to state 198


State 69

  267 enum-head: enum-key • attribute-specifier-seq-opt enum-head-name-opt enum-base-opt
  645 opaque-enum-declaration: enum-key • attribute-specifier-seq-opt enum-head-name enum-base-opt ';'

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 199


State 70

  906 type-name: enum-name •

    $default  reduce using rule 906 (type-name)


State 71

  225 defining-type-specifier: enum-specifier •

    $default  reduce using rule 225 (defining-type-specifier)


State 72

  204 declaration: explicit-instantiation •

    $default  reduce using rule 204 (declaration)


State 73

  205 declaration: explicit-specialization •

    $default  reduce using rule 205 (declaration)


State 74

  302 explicit-specifier-opt: explicit-specifier •
  381 function-specifier: explicit-specifier •

    IDENTIFIER  reduce using rule 302 (explicit-specifier-opt)
    IDENTIFIER  [reduce using rule 381 (function-specifier)]
    $default    reduce using rule 381 (function-specifier)


State 75

  221 deduction-guide: explicit-specifier-opt • template-name '(' parameter-declaration-clause ')' "->" simple-template-id ';'

    IDENTIFIER  shift, and go to state 200

    template-name  go to state 201


State 76

  206 declaration: export-declaration •

    $default  reduce using rule 206 (declaration)


State 77

  297 explicit-instantiation: extern-opt • "template" declaration

    "template"  shift, and go to state 202


State 78

  201 declaration: function-definition •

    $default  reduce using rule 201 (declaration)


State 79

  188 decl-specifier: function-specifier •

    $default  reduce using rule 188 (decl-specifier)


State 80

  385 global-module-fragment-opt: global-module-fragment •

    $default  reduce using rule 385 (global-module-fragment-opt)


State 81

  898 translation-unit: global-module-fragment-opt • module-declaration declaration-seq-opt private-module-fragment-opt

    "export-keyword"  shift, and go to state 203

    $default  reduce using rule 310 (export-keyword-opt)

    export-keyword-opt  go to state 204
    module-declaration  go to state 205


State 82

  566 named-namespace-definition: inline-opt • "namespace" attribute-specifier-seq-opt IDENTIFIER '{' namespace-body '}'
  950 unnamed-namespace-definition: inline-opt • "namespace" attribute-specifier-seq-opt '{' namespace-body '}'

    "namespace"  shift, and go to state 206


State 83

  207 declaration: linkage-specification •

    $default  reduce using rule 207 (declaration)


State 84

  211 declaration: module-import-declaration •

    $default  reduce using rule 211 (declaration)


State 85

  570 namespace-definition: named-namespace-definition •

    $default  reduce using rule 570 (namespace-definition)


State 86

  574 namespace-name: namespace-alias •

    $default  reduce using rule 574 (namespace-name)


State 87

   92 block-declaration: namespace-alias-definition •

    $default  reduce using rule 92 (block-declaration)


State 88

  208 declaration: namespace-definition •

    $default  reduce using rule 208 (declaration)


State 89

  577 nested-name-specifier: namespace-name • "::"

    "::"  shift, and go to state 207


State 90

  579 nested-name-specifier: nested-name-specifier • IDENTIFIER "::"
  580                      | nested-name-specifier • template-opt simple-template-id "::"
  582 nested-name-specifier-opt: nested-name-specifier •
  829 simple-type-specifier: nested-name-specifier • "template" simple-template-id

    IDENTIFIER  shift, and go to state 208
    "template"  shift, and go to state 209

    IDENTIFIER  [reduce using rule 582 (nested-name-specifier-opt)]
    IDENTIFIER  [reduce using rule 885 (template-opt)]

    template-opt  go to state 210


State 91

  828 simple-type-specifier: nested-name-specifier-opt • type-name
  832                      | nested-name-specifier-opt • template-name
  900 type-constraint: nested-name-specifier-opt • concept-name
  901                | nested-name-specifier-opt • concept-name '<' template-argument-list-opt '>'

    IDENTIFIER  shift, and go to state 211

    class-name          go to state 54
    concept-name        go to state 212
    enum-name           go to state 70
    simple-template-id  go to state 97
    template-name       go to state 213
    type-name           go to state 214
    typedef-name        go to state 109


State 92

  572 namespace-definition: nested-namespace-definition •

    $default  reduce using rule 572 (namespace-definition)


State 93

  200 declaration: nodeclspec-function-declaration •

    $default  reduce using rule 200 (declaration)


State 94

   98 block-declaration: opaque-enum-declaration •

    $default  reduce using rule 98 (block-declaration)


State 95

  831 simple-type-specifier: placeholder-type-specifier •

    $default  reduce using rule 831 (simple-type-specifier)


State 96

   90 block-declaration: simple-declaration •

    $default  reduce using rule 90 (block-declaration)


State 97

  129 class-name: simple-template-id •
  924 typedef-name: simple-template-id •

    IDENTIFIER        reduce using rule 129 (class-name)
    IDENTIFIER        [reduce using rule 924 (typedef-name)]
    '+'               reduce using rule 129 (class-name)
    '+'               [reduce using rule 924 (typedef-name)]
    '-'               reduce using rule 129 (class-name)
    '-'               [reduce using rule 924 (typedef-name)]
    "using"           reduce using rule 129 (class-name)
    "using"           [reduce using rule 924 (typedef-name)]
    '='               reduce using rule 129 (class-name)
    '='               [reduce using rule 924 (typedef-name)]
    ';'               reduce using rule 129 (class-name)
    ';'               [reduce using rule 924 (typedef-name)]
    "alignas"         reduce using rule 129 (class-name)
    "alignas"         [reduce using rule 924 (typedef-name)]
    '('               reduce using rule 129 (class-name)
    '('               [reduce using rule 924 (typedef-name)]
    ')'               reduce using rule 129 (class-name)
    ')'               [reduce using rule 924 (typedef-name)]
    '&'               reduce using rule 129 (class-name)
    '&'               [reduce using rule 924 (typedef-name)]
    "asm"             reduce using rule 129 (class-name)
    "asm"             [reduce using rule 924 (typedef-name)]
    "*="              reduce using rule 129 (class-name)
    "*="              [reduce using rule 924 (typedef-name)]
    "/="              reduce using rule 129 (class-name)
    "/="              [reduce using rule 924 (typedef-name)]
    "%="              reduce using rule 129 (class-name)
    "%="              [reduce using rule 924 (typedef-name)]
    "+="              reduce using rule 129 (class-name)
    "+="              [reduce using rule 924 (typedef-name)]
    "-="              reduce using rule 129 (class-name)
    "-="              [reduce using rule 924 (typedef-name)]
    ">>="             reduce using rule 129 (class-name)
    ">>="             [reduce using rule 924 (typedef-name)]
    "<<="             reduce using rule 129 (class-name)
    "<<="             [reduce using rule 924 (typedef-name)]
    "&="              reduce using rule 129 (class-name)
    "&="              [reduce using rule 924 (typedef-name)]
    "^="              reduce using rule 129 (class-name)
    "^="              [reduce using rule 924 (typedef-name)]
    "|="              reduce using rule 129 (class-name)
    "|="              [reduce using rule 924 (typedef-name)]
    ','               reduce using rule 129 (class-name)
    ','               [reduce using rule 924 (typedef-name)]
    "..."             reduce using rule 129 (class-name)
    "..."             [reduce using rule 924 (typedef-name)]
    "::"              reduce using rule 129 (class-name)
    "::"              [reduce using rule 924 (typedef-name)]
    '['               reduce using rule 129 (class-name)
    '['               [reduce using rule 924 (typedef-name)]
    ']'               reduce using rule 129 (class-name)
    ']'               [reduce using rule 924 (typedef-name)]
    ':'               reduce using rule 129 (class-name)
    ':'               [reduce using rule 924 (typedef-name)]
    '{'               reduce using rule 129 (class-name)
    '{'               [reduce using rule 924 (typedef-name)]
    '}'               reduce using rule 129 (class-name)
    '}'               [reduce using rule 924 (typedef-name)]
    "virtual"         reduce using rule 129 (class-name)
    "virtual"         [reduce using rule 924 (typedef-name)]
    "class"           reduce using rule 129 (class-name)
    "class"           [reduce using rule 924 (typedef-name)]
    "struct"          reduce using rule 129 (class-name)
    "struct"          [reduce using rule 924 (typedef-name)]
    "union"           reduce using rule 129 (class-name)
    "union"           [reduce using rule 924 (typedef-name)]
    "template"        reduce using rule 129 (class-name)
    "template"        [reduce using rule 924 (typedef-name)]
    "final"           reduce using rule 129 (class-name)
    "final"           [reduce using rule 924 (typedef-name)]
    "<=>"             reduce using rule 129 (class-name)
    "<=>"             [reduce using rule 924 (typedef-name)]
    "concept"         reduce using rule 129 (class-name)
    "concept"         [reduce using rule 924 (typedef-name)]
    '?'               reduce using rule 129 (class-name)
    '?'               [reduce using rule 924 (typedef-name)]
    "constexpr"       reduce using rule 129 (class-name)
    "constexpr"       [reduce using rule 924 (typedef-name)]
    "&&"              reduce using rule 129 (class-name)
    "&&"              [reduce using rule 924 (typedef-name)]
    "||"              reduce using rule 129 (class-name)
    "||"              [reduce using rule 924 (typedef-name)]
    "operator"        reduce using rule 129 (class-name)
    "operator"        [reduce using rule 924 (typedef-name)]
    "const"           reduce using rule 129 (class-name)
    "const"           [reduce using rule 924 (typedef-name)]
    "volatile"        reduce using rule 129 (class-name)
    "volatile"        [reduce using rule 924 (typedef-name)]
    "friend"          reduce using rule 129 (class-name)
    "friend"          [reduce using rule 924 (typedef-name)]
    "typedef"         reduce using rule 129 (class-name)
    "typedef"         [reduce using rule 924 (typedef-name)]
    "consteval"       reduce using rule 129 (class-name)
    "consteval"       [reduce using rule 924 (typedef-name)]
    "constinit"       reduce using rule 129 (class-name)
    "constinit"       [reduce using rule 924 (typedef-name)]
    "inline"          reduce using rule 129 (class-name)
    "inline"          [reduce using rule 924 (typedef-name)]
    "decltype"        reduce using rule 129 (class-name)
    "decltype"        [reduce using rule 924 (typedef-name)]
    "->"              reduce using rule 129 (class-name)
    "->"              [reduce using rule 924 (typedef-name)]
    '.'               reduce using rule 129 (class-name)
    '.'               [reduce using rule 924 (typedef-name)]
    "enum"            reduce using rule 129 (class-name)
    "enum"            [reduce using rule 924 (typedef-name)]
    "=="              reduce using rule 129 (class-name)
    "=="              [reduce using rule 924 (typedef-name)]
    "!="              reduce using rule 129 (class-name)
    "!="              [reduce using rule 924 (typedef-name)]
    '^'               reduce using rule 129 (class-name)
    '^'               [reduce using rule 924 (typedef-name)]
    '<'               reduce using rule 129 (class-name)
    '<'               [reduce using rule 924 (typedef-name)]
    '>'               reduce using rule 129 (class-name)
    '>'               [reduce using rule 924 (typedef-name)]
    "explicit"        reduce using rule 129 (class-name)
    "explicit"        [reduce using rule 924 (typedef-name)]
    "export"          reduce using rule 129 (class-name)
    "export"          [reduce using rule 924 (typedef-name)]
    "export-keyword"  reduce using rule 129 (class-name)
    "export-keyword"  [reduce using rule 924 (typedef-name)]
    "extern"          reduce using rule 129 (class-name)
    "extern"          [reduce using rule 924 (typedef-name)]
    '*'               reduce using rule 129 (class-name)
    '*'               [reduce using rule 924 (typedef-name)]
    '/'               reduce using rule 129 (class-name)
    '/'               [reduce using rule 924 (typedef-name)]
    '%'               reduce using rule 129 (class-name)
    '%'               [reduce using rule 924 (typedef-name)]
    '|'               reduce using rule 129 (class-name)
    '|'               [reduce using rule 924 (typedef-name)]
    "<<"              reduce using rule 129 (class-name)
    "<<"              [reduce using rule 924 (typedef-name)]
    ">>"              reduce using rule 129 (class-name)
    ">>"              [reduce using rule 924 (typedef-name)]
    "<="              reduce using rule 129 (class-name)
    "<="              [reduce using rule 924 (typedef-name)]
    ">="              reduce using rule 129 (class-name)
    ">="              [reduce using rule 924 (typedef-name)]
    ".*"              reduce using rule 129 (class-name)
    ".*"              [reduce using rule 924 (typedef-name)]
    "->*"             reduce using rule 129 (class-name)
    "->*"             [reduce using rule 924 (typedef-name)]
    "try"             reduce using rule 129 (class-name)
    "try"             [reduce using rule 924 (typedef-name)]
    "import-keyword"  reduce using rule 129 (class-name)
    "import-keyword"  [reduce using rule 924 (typedef-name)]
    "namespace"       reduce using rule 129 (class-name)
    "namespace"       [reduce using rule 924 (typedef-name)]
    "requires"        reduce using rule 129 (class-name)
    "requires"        [reduce using rule 924 (typedef-name)]
    "noexcept"        reduce using rule 129 (class-name)
    "noexcept"        [reduce using rule 924 (typedef-name)]
    '~'               reduce using rule 129 (class-name)
    '~'               [reduce using rule 924 (typedef-name)]
    "++"              reduce using rule 129 (class-name)
    "++"              [reduce using rule 924 (typedef-name)]
    "--"              reduce using rule 129 (class-name)
    "--"              [reduce using rule 924 (typedef-name)]
    "auto"            reduce using rule 129 (class-name)
    "auto"            [reduce using rule 924 (typedef-name)]
    "char"            reduce using rule 129 (class-name)
    "char"            [reduce using rule 924 (typedef-name)]
    "char8_t"         reduce using rule 129 (class-name)
    "char8_t"         [reduce using rule 924 (typedef-name)]
    "char16_t"        reduce using rule 129 (class-name)
    "char16_t"        [reduce using rule 924 (typedef-name)]
    "char32_t"        reduce using rule 129 (class-name)
    "char32_t"        [reduce using rule 924 (typedef-name)]
    "wchar_t"         reduce using rule 129 (class-name)
    "wchar_t"         [reduce using rule 924 (typedef-name)]
    "bool"            reduce using rule 129 (class-name)
    "bool"            [reduce using rule 924 (typedef-name)]
    "short"           reduce using rule 129 (class-name)
    "short"           [reduce using rule 924 (typedef-name)]
    "int"             reduce using rule 129 (class-name)
    "int"             [reduce using rule 924 (typedef-name)]
    "long"            reduce using rule 129 (class-name)
    "long"            [reduce using rule 924 (typedef-name)]
    "signed"          reduce using rule 129 (class-name)
    "signed"          [reduce using rule 924 (typedef-name)]
    "unsigned"        reduce using rule 129 (class-name)
    "unsigned"        [reduce using rule 924 (typedef-name)]
    "float"           reduce using rule 129 (class-name)
    "float"           [reduce using rule 924 (typedef-name)]
    "double"          reduce using rule 129 (class-name)
    "double"          [reduce using rule 924 (typedef-name)]
    "void"            reduce using rule 129 (class-name)
    "void"            [reduce using rule 924 (typedef-name)]
    "static_assert"   reduce using rule 129 (class-name)
    "static_assert"   [reduce using rule 924 (typedef-name)]
    "static"          reduce using rule 129 (class-name)
    "static"          [reduce using rule 924 (typedef-name)]
    "thread_local"    reduce using rule 129 (class-name)
    "thread_local"    [reduce using rule 924 (typedef-name)]
    "mutable"         reduce using rule 129 (class-name)
    "mutable"         [reduce using rule 924 (typedef-name)]
    "typename"        reduce using rule 129 (class-name)
    "typename"        [reduce using rule 924 (typedef-name)]
    "override"        reduce using rule 129 (class-name)
    "override"        [reduce using rule 924 (typedef-name)]
    $default          reduce using rule 129 (class-name)


State 98

  917 type-specifier: simple-type-specifier •

    $default  reduce using rule 917 (type-specifier)


State 99

   96 block-declaration: static_assert-declaration •

    $default  reduce using rule 96 (block-declaration)


State 100

  186 decl-specifier: storage-class-specifier •

    $default  reduce using rule 186 (decl-specifier)


State 101

  202 declaration: template-declaration •

    $default  reduce using rule 202 (declaration)


State 102

  878 template-declaration: template-head • declaration
  879                     | template-head • concept-definition

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "concept"         shift, and go to state 215
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"      [reduce using rule 324 (extern-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "namespace"     [reduce using rule 461 (inline-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    concept-definition               go to state 216
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 217
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 103

  827 simple-template-id: template-name • '<' template-argument-list-opt '>'

    '<'  shift, and go to state 218


State 104

    0 $accept: translation-unit • $end

    $end  shift, and go to state 219


State 105

  903 type-constraint-opt: type-constraint •

    $default  reduce using rule 903 (type-constraint-opt)


State 106

  703 placeholder-type-specifier: type-constraint-opt • "auto"
  704                           | type-constraint-opt • "decltype" '(' "auto" ')'

    "decltype"  shift, and go to state 220
    "auto"      shift, and go to state 221


State 107

  576 nested-name-specifier: type-name • "::"

    "::"  shift, and go to state 222


State 108

  223 defining-type-specifier: type-specifier •

    $default  reduce using rule 223 (defining-type-specifier)


State 109

  907 type-name: typedef-name •

    $default  reduce using rule 907 (type-name)


State 110

  919 type-specifier: typename-specifier •

    $default  reduce using rule 919 (type-specifier)


State 111

  571 namespace-definition: unnamed-namespace-definition •

    $default  reduce using rule 571 (namespace-definition)


State 112

   93 block-declaration: using-declaration •

    $default  reduce using rule 93 (block-declaration)


State 113

   95 block-declaration: using-directive •

    $default  reduce using rule 95 (block-declaration)


State 114

   94 block-declaration: using-enum-declaration •

    $default  reduce using rule 94 (block-declaration)


State 115

   16 alias-declaration: "using" IDENTIFIER • attribute-specifier-seq-opt '=' defining-type-id ';'

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 223


State 116

  250 elaborated-enum-specifier: "enum" • nested-name-specifier-opt IDENTIFIER

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]

    class-name                 go to state 54
    decltype-specifier         go to state 126
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 127
    nested-name-specifier-opt  go to state 128
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 117

  926 typename-opt: "typename" •

    $default  reduce using rule 926 (typename-opt)


State 118

  981 using-enum-declaration: "using" elaborated-enum-specifier • ';'

    ';'  shift, and go to state 224


State 119

  977 using-declarator: typename-opt • nested-name-specifier unqualified-id

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "decltype"  shift, and go to state 18

    class-name             go to state 54
    decltype-specifier     go to state 126
    enum-name              go to state 70
    namespace-alias        go to state 86
    namespace-name         go to state 89
    nested-name-specifier  go to state 225
    simple-template-id     go to state 97
    template-name          go to state 103
    type-name              go to state 107
    typedef-name           go to state 109


State 120

  978 using-declarator-list: using-declarator • eclipse-opt

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 226


State 121

  976 using-declaration: "using" using-declarator-list • ';'
  979 using-declarator-list: using-declarator-list • ',' using-declarator eclipse-opt

    ';'  shift, and go to state 227
    ','  shift, and go to state 228


State 122

  298 explicit-specialization: "template" '<' • '>' declaration
  880 template-head: "template" '<' • template-parameter-list '>' requires-clause-opt

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 229
    "template"  shift, and go to state 230
    "decltype"  shift, and go to state 18
    '>'         shift, and go to state 231
    "typename"  shift, and go to state 232

    IDENTIFIER  [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "::"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 233
    class-name                   go to state 54
    decltype-specifier           go to state 126
    enum-name                    go to state 70
    namespace-alias              go to state 86
    namespace-name               go to state 89
    nested-name-specifier        go to state 127
    nested-name-specifier-opt    go to state 234
    parameter-declaration        go to state 235
    simple-template-id           go to state 97
    template-head                go to state 236
    template-name                go to state 103
    template-parameter           go to state 237
    template-parameter-list      go to state 238
    type-constraint              go to state 239
    type-name                    go to state 107
    type-parameter               go to state 240
    type-parameter-key           go to state 241
    typedef-name                 go to state 109


State 123

  220 decltype-specifier: "decltype" '(' • expression ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 305
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 124

  272 enum-key: "enum" "class" •

    $default  reduce using rule 272 (enum-key)


State 125

  273 enum-key: "enum" "struct" •

    $default  reduce using rule 273 (enum-key)


State 126

  578 nested-name-specifier: decltype-specifier • "::"

    "::"  shift, and go to state 197


State 127

  579 nested-name-specifier: nested-name-specifier • IDENTIFIER "::"
  580                      | nested-name-specifier • template-opt simple-template-id "::"
  582 nested-name-specifier-opt: nested-name-specifier •

    IDENTIFIER  shift, and go to state 208
    "template"  shift, and go to state 352

    IDENTIFIER  [reduce using rule 582 (nested-name-specifier-opt)]
    IDENTIFIER  [reduce using rule 885 (template-opt)]

    template-opt  go to state 210


State 128

  250 elaborated-enum-specifier: "enum" nested-name-specifier-opt • IDENTIFIER

    IDENTIFIER  shift, and go to state 353


State 129

  299 explicit-specifier: "explicit" '(' • constant-expression ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 355
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 130

  308 export-declaration: "export" '{' • declaration-seq-opt '}'

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    '}'             reduce using rule 214 (declaration-seq-opt)
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"      [reduce using rule 324 (extern-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "namespace"     [reduce using rule 461 (inline-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 59
    declaration-seq                  go to state 60
    declaration-seq-opt              go to state 357
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 131

  307 export-declaration: "export" declaration •

    $default  reduce using rule 307 (export-declaration)


State 132

  309 export-declaration: "export-keyword" module-import-declaration •

    $default  reduce using rule 309 (export-declaration)


State 133

  258 encoding-prefix: "u8" •

    $default  reduce using rule 258 (encoding-prefix)


State 134

  259 encoding-prefix: 'u' •

    $default  reduce using rule 259 (encoding-prefix)


State 135

  260 encoding-prefix: 'U' •

    $default  reduce using rule 260 (encoding-prefix)


State 136

  261 encoding-prefix: 'L' •

    $default  reduce using rule 261 (encoding-prefix)


State 137

  263 encoding-prefix-opt: encoding-prefix •

    $default  reduce using rule 263 (encoding-prefix-opt)


State 138

  869 string-literal: encoding-prefix-opt • '"' s-char-sequence-opt '"'
  870               | encoding-prefix-opt • 'R' raw-string

    '"'  shift, and go to state 358
    'R'  shift, and go to state 359


State 139

  498 linkage-specification: "extern" string-literal • '{' declaration-seq-opt '}'
  499                      | "extern" string-literal • declaration

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    '{'               shift, and go to state 360
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"      [reduce using rule 324 (extern-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "namespace"     [reduce using rule 461 (inline-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 361
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 140

  383 global-module-fragment: "module-keyword" ';' • declaration-seq-opt

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    IDENTIFIER        [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER        [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER        [reduce using rule 581 (nested-name-specifier-opt)]
    "using"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"        [reduce using rule 324 (extern-opt)]
    "constexpr"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"        [reduce using rule 902 (type-constraint-opt)]
    "enum"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "export-keyword"  [reduce using rule 214 (declaration-seq-opt)]
    "extern"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "module-keyword"  reduce using rule 214 (declaration-seq-opt)
    "namespace"       [reduce using rule 461 (inline-opt)]
    "auto"            reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"            [reduce using rule 902 (type-constraint-opt)]
    "char"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default          reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 59
    declaration-seq                  go to state 60
    declaration-seq-opt              go to state 362
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 141

  555 module-name-qualifier: IDENTIFIER • '.'

    '.'  shift, and go to state 363


State 142

  386 h-char: EXCEPT_NEW_LINE_AND_GREATER_THAN_SIGN •

    $default  reduce using rule 386 (h-char)


State 143

  559 module-partition: ':' • module-name-qualifier-opt IDENTIFIER

    IDENTIFIER  shift, and go to state 141

    IDENTIFIER  [reduce using rule 557 (module-name-qualifier-opt)]

    module-name-qualifier      go to state 151
    module-name-qualifier-opt  go to state 364


State 144

  391 header-name: '<' • "h-char-sequence" '>'

    "h-char-sequence"  shift, and go to state 365


State 145

  395 header-name: "h-char-sequence" • h-char

    EXCEPT_NEW_LINE_AND_GREATER_THAN_SIGN  shift, and go to state 142

    h-char  go to state 366


State 146

  392 header-name: '"' • q-char-sequence '"'

    EXCEPT_NEW_LINE_AND_QUOTATION_MARK  shift, and go to state 367

    q-char           go to state 368
    q-char-sequence  go to state 369


State 147

  393 header-name: "h-char-sequence:" •

    $default  reduce using rule 393 (header-name)


State 148

  394 header-name: h-char •

    $default  reduce using rule 394 (header-name)


State 149

  553 module-import-declaration: "import-keyword" header-name • attribute-specifier-seq-opt ';'

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 370


State 150

  551 module-import-declaration: "import-keyword" module-name • attribute-specifier-seq-opt ';'

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 371


State 151

  556 module-name-qualifier: module-name-qualifier • IDENTIFIER '.'
  558 module-name-qualifier-opt: module-name-qualifier •

    IDENTIFIER  shift, and go to state 372

    IDENTIFIER  [reduce using rule 558 (module-name-qualifier-opt)]


State 152

  554 module-name: module-name-qualifier-opt • IDENTIFIER

    IDENTIFIER  shift, and go to state 373


State 153

  552 module-import-declaration: "import-keyword" module-partition • attribute-specifier-seq-opt ';'

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 374


State 154

  256 enclosing-namespace-specifier: IDENTIFIER •
  568 namespace-alias-definition: "namespace" IDENTIFIER • '=' qualified-namespace-specifier ';'

    '='  shift, and go to state 375

    $default  reduce using rule 256 (enclosing-namespace-specifier)


State 155

  257 enclosing-namespace-specifier: enclosing-namespace-specifier • "::" inline-opt IDENTIFIER
  583 nested-namespace-definition: "namespace" enclosing-namespace-specifier • "::" inline-opt IDENTIFIER '{' namespace-body '}'

    "::"  shift, and go to state 376


State 156

  863 static_assert-declaration: "static_assert" '(' • constant-expression ')' ';'
  864                          | "static_assert" '(' • constant-expression ',' string-literal ')' ';'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 377
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 157

  579 nested-name-specifier: nested-name-specifier • IDENTIFIER "::"
  580                      | nested-name-specifier • template-opt simple-template-id "::"
  927 typename-specifier: "typename" nested-name-specifier • IDENTIFIER
  928                   | "typename" nested-name-specifier • template-opt simple-template-id

    IDENTIFIER  shift, and go to state 378
    "template"  shift, and go to state 352

    IDENTIFIER  [reduce using rule 885 (template-opt)]

    template-opt  go to state 379


State 158

   45 attribute-declaration: attribute-specifier-seq ';' •

    $default  reduce using rule 45 (attribute-declaration)


State 159

  194 decl-specifier: "inline" •

    $default  reduce using rule 194 (decl-specifier)


State 160

  867 storage-class-specifier: "extern" •

    $default  reduce using rule 867 (storage-class-specifier)


State 161

  812 simple-declaration: attribute-specifier-seq decl-specifier-seq • init-declarator-list ';'

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 166
    '&'         shift, and go to state 167
    "..."       shift, and go to state 169
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    "::"        [reduce using rule 248 (eclipse-opt)]
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 248 (eclipse-opt)

    class-name             go to state 54
    declarator             go to state 191
    declarator-id          go to state 178
    decltype-specifier     go to state 126
    eclipse-opt            go to state 179
    enum-name              go to state 70
    init-declarator        go to state 192
    init-declarator-list   go to state 380
    namespace-alias        go to state 86
    namespace-name         go to state 89
    nested-name-specifier  go to state 195
    noptr-declarator       go to state 181
    ptr-declarator         go to state 182
    ptr-operator           go to state 183
    simple-template-id     go to state 97
    template-name          go to state 103
    type-name              go to state 107
    typedef-name           go to state 109


State 162

  267 enum-head: enum-key • attribute-specifier-seq-opt enum-head-name-opt enum-base-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 381


State 163

  381 function-specifier: explicit-specifier •

    $default  reduce using rule 381 (function-specifier)


State 164

  980 using-directive: attribute-specifier-seq-opt "using" • "namespace" nested-name-specifier-opt namespace-name ';'

    "namespace"  shift, and go to state 382


State 165

   17 alignment-specifier: "alignas" • '(' type-id eclipse-opt ')'
   18                    | "alignas" • '(' constant-expression eclipse-opt ')'

    '('  shift, and go to state 383


State 166

  627 noptr-declarator: '(' • ptr-declarator ')'

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 166
    '&'         shift, and go to state 167
    "..."       shift, and go to state 169
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    "::"        [reduce using rule 248 (eclipse-opt)]
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 248 (eclipse-opt)

    class-name             go to state 54
    declarator-id          go to state 178
    decltype-specifier     go to state 126
    eclipse-opt            go to state 179
    enum-name              go to state 70
    namespace-alias        go to state 86
    namespace-name         go to state 89
    nested-name-specifier  go to state 195
    noptr-declarator       go to state 384
    ptr-declarator         go to state 385
    ptr-operator           go to state 183
    simple-template-id     go to state 97
    template-name          go to state 103
    type-name              go to state 107
    typedef-name           go to state 109


State 167

  743 ptr-operator: '&' • attribute-specifier-seq-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 386


State 168

   23 asm-declaration: attribute-specifier-seq-opt "asm" • '(' string-literal ')' ';'

    '('  shift, and go to state 387


State 169

  249 eclipse-opt: "..." •

    $default  reduce using rule 249 (eclipse-opt)


State 170

   54 attribute-specifier: '[' • '[' attribute-using-prefix-opt attribute-list ']' ']'

    '['  shift, and go to state 388


State 171

  744 ptr-operator: "&&" • attribute-specifier-seq-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 389


State 172

  742 ptr-operator: '*' • attribute-specifier-seq-opt cv-qualifier-seq-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 390


State 173

   55 attribute-specifier: alignment-specifier •

    $default  reduce using rule 55 (attribute-specifier)


State 174

   56 attribute-specifier-seq: attribute-specifier-seq-opt attribute-specifier •

    $default  reduce using rule 56 (attribute-specifier-seq)


State 175

  198 decl-specifier-seq-opt: decl-specifier-seq •
  813 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq • ref-qualifier-opt '[' identifier-list ']' initializer ';'

    '&'   shift, and go to state 391
    "&&"  shift, and go to state 392

    '&'       [reduce using rule 198 (decl-specifier-seq-opt)]
    '['       reduce using rule 762 (ref-qualifier-opt)
    "&&"      [reduce using rule 198 (decl-specifier-seq-opt)]
    $default  reduce using rule 198 (decl-specifier-seq-opt)

    ref-qualifier      go to state 393
    ref-qualifier-opt  go to state 394


State 176

  378 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt • declarator virt-specifier-seq-opt function-body
  379                    | attribute-specifier-seq-opt decl-specifier-seq-opt • declarator requires-clause function-body

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 166
    '&'         shift, and go to state 167
    "..."       shift, and go to state 169
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    "::"        [reduce using rule 248 (eclipse-opt)]
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 248 (eclipse-opt)

    class-name             go to state 54
    declarator             go to state 395
    declarator-id          go to state 178
    decltype-specifier     go to state 126
    eclipse-opt            go to state 179
    enum-name              go to state 70
    namespace-alias        go to state 86
    namespace-name         go to state 89
    nested-name-specifier  go to state 195
    noptr-declarator       go to state 181
    ptr-declarator         go to state 182
    ptr-operator           go to state 183
    simple-template-id     go to state 97
    template-name          go to state 103
    type-name              go to state 107
    typedef-name           go to state 109


State 177

  599 nodeclspec-function-declaration: attribute-specifier-seq-opt declarator • ';'

    ';'  shift, and go to state 396


State 178

  624 noptr-declarator: declarator-id • attribute-specifier-seq-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 397


State 179

  219 declarator-id: eclipse-opt • id-expression

    IDENTIFIER  shift, and go to state 242
    "::"        shift, and go to state 4
    "operator"  shift, and go to state 256
    "decltype"  shift, and go to state 18
    '~'         shift, and go to state 398

    class-name              go to state 54
    conversion-function-id  go to state 295
    decltype-specifier      go to state 126
    enum-name               go to state 70
    id-expression           go to state 399
    literal-operator-id     go to state 318
    namespace-alias         go to state 86
    namespace-name          go to state 89
    nested-name-specifier   go to state 400
    operator-function-id    go to state 327
    qualified-id            go to state 332
    simple-template-id      go to state 337
    template-id             go to state 340
    template-name           go to state 103
    type-name               go to state 107
    typedef-name            go to state 109
    unqualified-id          go to state 345


State 180

  579 nested-name-specifier: nested-name-specifier • IDENTIFIER "::"
  580                      | nested-name-specifier • template-opt simple-template-id "::"
  582 nested-name-specifier-opt: nested-name-specifier •
  745 ptr-operator: nested-name-specifier • '*' attribute-specifier-seq-opt cv-qualifier-seq-opt
  829 simple-type-specifier: nested-name-specifier • "template" simple-template-id

    IDENTIFIER  shift, and go to state 208
    "template"  shift, and go to state 209
    '*'         shift, and go to state 401

    IDENTIFIER  [reduce using rule 582 (nested-name-specifier-opt)]
    IDENTIFIER  [reduce using rule 885 (template-opt)]

    template-opt  go to state 210


State 181

  218 declarator: noptr-declarator • parameters-and-qualifiers trailing-return-type
  625 noptr-declarator: noptr-declarator • parameters-and-qualifiers
  626                 | noptr-declarator • '[' constant-expression-opt ']' attribute-specifier-seq-opt
  740 ptr-declarator: noptr-declarator •

    '('  shift, and go to state 402
    '['  shift, and go to state 403

    '('       [reduce using rule 740 (ptr-declarator)]
    $default  reduce using rule 740 (ptr-declarator)

    parameters-and-qualifiers  go to state 404


State 182

  217 declarator: ptr-declarator •

    $default  reduce using rule 217 (declarator)


State 183

  741 ptr-declarator: ptr-operator • ptr-declarator

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 166
    '&'         shift, and go to state 167
    "..."       shift, and go to state 169
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    "::"        [reduce using rule 248 (eclipse-opt)]
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 248 (eclipse-opt)

    class-name             go to state 54
    declarator-id          go to state 178
    decltype-specifier     go to state 126
    eclipse-opt            go to state 179
    enum-name              go to state 70
    namespace-alias        go to state 86
    namespace-name         go to state 89
    nested-name-specifier  go to state 195
    noptr-declarator       go to state 384
    ptr-declarator         go to state 405
    ptr-operator           go to state 183
    simple-template-id     go to state 97
    template-name          go to state 103
    type-name              go to state 107
    typedef-name           go to state 109


State 184

  133 class-specifier: class-head '{' • member-specification-opt '}'

    "private"        shift, and go to state 406
    "protected"      shift, and go to state 407
    "public"         shift, and go to state 408
    "using"          shift, and go to state 2
    ';'              shift, and go to state 3
    "template"       shift, and go to state 9
    "enum"           shift, and go to state 409
    "explicit"       shift, and go to state 20
    "static_assert"  shift, and go to state 41

    IDENTIFIER  reduce using rule 57 (attribute-specifier-seq-opt)
    IDENTIFIER  [reduce using rule 301 (explicit-specifier-opt)]
    ';'         [reduce using rule 57 (attribute-specifier-seq-opt)]
    '}'         reduce using rule 548 (member-specification-opt)
    "enum"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    access-specifier             go to state 410
    alias-declaration            go to state 411
    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 412
    deduction-guide              go to state 413
    empty-declaration            go to state 414
    enum-key                     go to state 415
    explicit-specialization      go to state 416
    explicit-specifier           go to state 417
    explicit-specifier-opt       go to state 75
    function-definition          go to state 418
    member-declaration           go to state 419
    member-specification         go to state 420
    member-specification-opt     go to state 421
    opaque-enum-declaration      go to state 422
    static_assert-declaration    go to state 423
    template-declaration         go to state 424
    template-head                go to state 102
    using-declaration            go to state 425
    using-enum-declaration       go to state 426


State 185

   58 attribute-specifier-seq-opt: attribute-specifier-seq •

    $default  reduce using rule 58 (attribute-specifier-seq-opt)


State 186

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  122 class-head: class-key attribute-specifier-seq-opt • class-head-name class-virt-specifier-opt base-clause-opt
  123           | class-key attribute-specifier-seq-opt • base-clause-opt
  251 elaborated-type-specifier: class-key attribute-specifier-seq-opt • nested-name-specifier-opt IDENTIFIER

    IDENTIFIER  shift, and go to state 1
    "alignas"   shift, and go to state 165
    "::"        shift, and go to state 4
    '['         shift, and go to state 170
    ':'         shift, and go to state 427
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    $default    reduce using rule 74 (base-clause-opt)

    alignment-specifier        go to state 173
    attribute-specifier        go to state 174
    base-clause                go to state 428
    base-clause-opt            go to state 429
    class-head-name            go to state 430
    class-name                 go to state 54
    decltype-specifier         go to state 126
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 127
    nested-name-specifier-opt  go to state 431
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 187

  253 elaborated-type-specifier: class-key nested-name-specifier • template-opt simple-template-id
  579 nested-name-specifier: nested-name-specifier • IDENTIFIER "::"
  580                      | nested-name-specifier • template-opt simple-template-id "::"

    IDENTIFIER  shift, and go to state 208
    "template"  shift, and go to state 352

    IDENTIFIER  [reduce using rule 885 (template-opt)]

    template-opt  go to state 432


State 188

  129 class-name: simple-template-id •
  252 elaborated-type-specifier: class-key simple-template-id •
  924 typedef-name: simple-template-id •

    "::"      reduce using rule 129 (class-name)
    "::"      [reduce using rule 252 (elaborated-type-specifier)]
    "::"      [reduce using rule 924 (typedef-name)]
    $default  reduce using rule 252 (elaborated-type-specifier)


State 189

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  195 decl-specifier-seq: decl-specifier attribute-specifier-seq-opt •

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    "alignas"  [reduce using rule 195 (decl-specifier-seq)]
    '['        [reduce using rule 195 (decl-specifier-seq)]
    $default   reduce using rule 195 (decl-specifier-seq)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 190

  196 decl-specifier-seq: decl-specifier decl-specifier-seq •

    $default  reduce using rule 196 (decl-specifier-seq)


State 191

  442 init-declarator: declarator • initializer-opt
  443                | declarator • requires-clause

    '='         shift, and go to state 433
    '('         shift, and go to state 434
    '{'         shift, and go to state 435
    "requires"  shift, and go to state 436

    $default  reduce using rule 459 (initializer-opt)

    brace-or-equal-initializer  go to state 437
    braced-init-list            go to state 438
    initializer                 go to state 439
    initializer-opt             go to state 440
    requires-clause             go to state 441


State 192

  444 init-declarator-list: init-declarator •

    $default  reduce using rule 444 (init-declarator-list)


State 193

  445 init-declarator-list: init-declarator-list • ',' init-declarator
  447 init-declarator-list-opt: init-declarator-list •

    ','  shift, and go to state 442

    $default  reduce using rule 447 (init-declarator-list-opt)


State 194

  811 simple-declaration: decl-specifier-seq init-declarator-list-opt • ';'

    ';'  shift, and go to state 443


State 195

  579 nested-name-specifier: nested-name-specifier • IDENTIFIER "::"
  580                      | nested-name-specifier • template-opt simple-template-id "::"
  745 ptr-operator: nested-name-specifier • '*' attribute-specifier-seq-opt cv-qualifier-seq-opt

    IDENTIFIER  shift, and go to state 208
    "template"  shift, and go to state 352
    '*'         shift, and go to state 401

    IDENTIFIER  [reduce using rule 885 (template-opt)]

    template-opt  go to state 210


State 196

  213 declaration-seq: declaration-seq declaration •

    $default  reduce using rule 213 (declaration-seq)


State 197

  578 nested-name-specifier: decltype-specifier "::" •

    $default  reduce using rule 578 (nested-name-specifier)


State 198

  275 enum-specifier: enum-head '{' • enumerator-list-opt '}'
  276               | enum-head '{' • enumerator-list ',' '}'

    IDENTIFIER  shift, and go to state 444

    $default  reduce using rule 282 (enumerator-list-opt)

    enumerator             go to state 445
    enumerator-definition  go to state 446
    enumerator-list        go to state 447
    enumerator-list-opt    go to state 448


State 199

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  267 enum-head: enum-key attribute-specifier-seq-opt • enum-head-name-opt enum-base-opt
  645 opaque-enum-declaration: enum-key attribute-specifier-seq-opt • enum-head-name enum-base-opt ';'

    IDENTIFIER  shift, and go to state 1
    "alignas"   shift, and go to state 165
    "::"        shift, and go to state 4
    '['         shift, and go to state 170
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    $default    reduce using rule 269 (enum-head-name-opt)

    alignment-specifier        go to state 173
    attribute-specifier        go to state 174
    class-name                 go to state 54
    decltype-specifier         go to state 126
    enum-head-name             go to state 449
    enum-head-name-opt         go to state 450
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 127
    nested-name-specifier-opt  go to state 451
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 200

  884 template-name: IDENTIFIER •

    $default  reduce using rule 884 (template-name)


State 201

  221 deduction-guide: explicit-specifier-opt template-name • '(' parameter-declaration-clause ')' "->" simple-template-id ';'

    '('  shift, and go to state 452


State 202

  297 explicit-instantiation: extern-opt "template" • declaration

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"      [reduce using rule 324 (extern-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "namespace"     [reduce using rule 461 (inline-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 453
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 203

  311 export-keyword-opt: "export-keyword" •

    $default  reduce using rule 311 (export-keyword-opt)


State 204

  550 module-declaration: export-keyword-opt • "module-keyword" module-name module-partition-opt attribute-specifier-seq-opt ';'

    "module-keyword"  shift, and go to state 454


State 205

  898 translation-unit: global-module-fragment-opt module-declaration • declaration-seq-opt private-module-fragment-opt

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    $end              reduce using rule 214 (declaration-seq-opt)
    IDENTIFIER        [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER        [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER        [reduce using rule 581 (nested-name-specifier-opt)]
    "using"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"        [reduce using rule 324 (extern-opt)]
    "constexpr"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"        [reduce using rule 902 (type-constraint-opt)]
    "enum"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "module-keyword"  reduce using rule 214 (declaration-seq-opt)
    "namespace"       [reduce using rule 461 (inline-opt)]
    "auto"            reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"            [reduce using rule 902 (type-constraint-opt)]
    "char"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default          reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 59
    declaration-seq                  go to state 60
    declaration-seq-opt              go to state 455
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 206

  566 named-namespace-definition: inline-opt "namespace" • attribute-specifier-seq-opt IDENTIFIER '{' namespace-body '}'
  950 unnamed-namespace-definition: inline-opt "namespace" • attribute-specifier-seq-opt '{' namespace-body '}'

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 456


State 207

  577 nested-name-specifier: namespace-name "::" •

    $default  reduce using rule 577 (nested-name-specifier)


State 208

  579 nested-name-specifier: nested-name-specifier IDENTIFIER • "::"

    "::"  shift, and go to state 457


State 209

  829 simple-type-specifier: nested-name-specifier "template" • simple-template-id
  886 template-opt: "template" •

    IDENTIFIER  shift, and go to state 200

    IDENTIFIER  [reduce using rule 886 (template-opt)]
    $default    reduce using rule 886 (template-opt)

    simple-template-id  go to state 458
    template-name       go to state 103


State 210

  580 nested-name-specifier: nested-name-specifier template-opt • simple-template-id "::"

    IDENTIFIER  shift, and go to state 200

    simple-template-id  go to state 459
    template-name       go to state 103


State 211

  128 class-name: IDENTIFIER •
  144 concept-name: IDENTIFIER •
  274 enum-name: IDENTIFIER •
  884 template-name: IDENTIFIER •
  923 typedef-name: IDENTIFIER •

    IDENTIFIER        reduce using rule 128 (class-name)
    IDENTIFIER        [reduce using rule 274 (enum-name)]
    IDENTIFIER        [reduce using rule 884 (template-name)]
    IDENTIFIER        [reduce using rule 923 (typedef-name)]
    '+'               reduce using rule 128 (class-name)
    '+'               [reduce using rule 274 (enum-name)]
    '+'               [reduce using rule 884 (template-name)]
    '+'               [reduce using rule 923 (typedef-name)]
    '-'               reduce using rule 128 (class-name)
    '-'               [reduce using rule 274 (enum-name)]
    '-'               [reduce using rule 884 (template-name)]
    '-'               [reduce using rule 923 (typedef-name)]
    "using"           reduce using rule 128 (class-name)
    "using"           [reduce using rule 274 (enum-name)]
    "using"           [reduce using rule 884 (template-name)]
    "using"           [reduce using rule 923 (typedef-name)]
    '='               reduce using rule 128 (class-name)
    '='               [reduce using rule 274 (enum-name)]
    '='               [reduce using rule 884 (template-name)]
    '='               [reduce using rule 923 (typedef-name)]
    ';'               reduce using rule 128 (class-name)
    ';'               [reduce using rule 274 (enum-name)]
    ';'               [reduce using rule 884 (template-name)]
    ';'               [reduce using rule 923 (typedef-name)]
    "alignas"         reduce using rule 128 (class-name)
    "alignas"         [reduce using rule 274 (enum-name)]
    "alignas"         [reduce using rule 884 (template-name)]
    "alignas"         [reduce using rule 923 (typedef-name)]
    '('               reduce using rule 128 (class-name)
    '('               [reduce using rule 274 (enum-name)]
    '('               [reduce using rule 884 (template-name)]
    '('               [reduce using rule 923 (typedef-name)]
    ')'               reduce using rule 128 (class-name)
    ')'               [reduce using rule 274 (enum-name)]
    ')'               [reduce using rule 884 (template-name)]
    ')'               [reduce using rule 923 (typedef-name)]
    '&'               reduce using rule 128 (class-name)
    '&'               [reduce using rule 274 (enum-name)]
    '&'               [reduce using rule 884 (template-name)]
    '&'               [reduce using rule 923 (typedef-name)]
    "asm"             reduce using rule 128 (class-name)
    "asm"             [reduce using rule 274 (enum-name)]
    "asm"             [reduce using rule 884 (template-name)]
    "asm"             [reduce using rule 923 (typedef-name)]
    "*="              reduce using rule 128 (class-name)
    "*="              [reduce using rule 274 (enum-name)]
    "*="              [reduce using rule 884 (template-name)]
    "*="              [reduce using rule 923 (typedef-name)]
    "/="              reduce using rule 128 (class-name)
    "/="              [reduce using rule 274 (enum-name)]
    "/="              [reduce using rule 884 (template-name)]
    "/="              [reduce using rule 923 (typedef-name)]
    "%="              reduce using rule 128 (class-name)
    "%="              [reduce using rule 274 (enum-name)]
    "%="              [reduce using rule 884 (template-name)]
    "%="              [reduce using rule 923 (typedef-name)]
    "+="              reduce using rule 128 (class-name)
    "+="              [reduce using rule 274 (enum-name)]
    "+="              [reduce using rule 884 (template-name)]
    "+="              [reduce using rule 923 (typedef-name)]
    "-="              reduce using rule 128 (class-name)
    "-="              [reduce using rule 274 (enum-name)]
    "-="              [reduce using rule 884 (template-name)]
    "-="              [reduce using rule 923 (typedef-name)]
    ">>="             reduce using rule 128 (class-name)
    ">>="             [reduce using rule 274 (enum-name)]
    ">>="             [reduce using rule 884 (template-name)]
    ">>="             [reduce using rule 923 (typedef-name)]
    "<<="             reduce using rule 128 (class-name)
    "<<="             [reduce using rule 274 (enum-name)]
    "<<="             [reduce using rule 884 (template-name)]
    "<<="             [reduce using rule 923 (typedef-name)]
    "&="              reduce using rule 128 (class-name)
    "&="              [reduce using rule 274 (enum-name)]
    "&="              [reduce using rule 884 (template-name)]
    "&="              [reduce using rule 923 (typedef-name)]
    "^="              reduce using rule 128 (class-name)
    "^="              [reduce using rule 274 (enum-name)]
    "^="              [reduce using rule 884 (template-name)]
    "^="              [reduce using rule 923 (typedef-name)]
    "|="              reduce using rule 128 (class-name)
    "|="              [reduce using rule 274 (enum-name)]
    "|="              [reduce using rule 884 (template-name)]
    "|="              [reduce using rule 923 (typedef-name)]
    ','               reduce using rule 128 (class-name)
    ','               [reduce using rule 274 (enum-name)]
    ','               [reduce using rule 884 (template-name)]
    ','               [reduce using rule 923 (typedef-name)]
    "..."             reduce using rule 128 (class-name)
    "..."             [reduce using rule 274 (enum-name)]
    "..."             [reduce using rule 884 (template-name)]
    "..."             [reduce using rule 923 (typedef-name)]
    "::"              reduce using rule 128 (class-name)
    "::"              [reduce using rule 274 (enum-name)]
    "::"              [reduce using rule 884 (template-name)]
    "::"              [reduce using rule 923 (typedef-name)]
    '['               reduce using rule 128 (class-name)
    '['               [reduce using rule 274 (enum-name)]
    '['               [reduce using rule 884 (template-name)]
    '['               [reduce using rule 923 (typedef-name)]
    ']'               reduce using rule 128 (class-name)
    ']'               [reduce using rule 274 (enum-name)]
    ']'               [reduce using rule 884 (template-name)]
    ']'               [reduce using rule 923 (typedef-name)]
    ':'               reduce using rule 128 (class-name)
    ':'               [reduce using rule 274 (enum-name)]
    ':'               [reduce using rule 884 (template-name)]
    ':'               [reduce using rule 923 (typedef-name)]
    '{'               reduce using rule 128 (class-name)
    '{'               [reduce using rule 274 (enum-name)]
    '{'               [reduce using rule 884 (template-name)]
    '{'               [reduce using rule 923 (typedef-name)]
    '}'               reduce using rule 128 (class-name)
    '}'               [reduce using rule 274 (enum-name)]
    '}'               [reduce using rule 884 (template-name)]
    '}'               [reduce using rule 923 (typedef-name)]
    "virtual"         reduce using rule 128 (class-name)
    "virtual"         [reduce using rule 274 (enum-name)]
    "virtual"         [reduce using rule 884 (template-name)]
    "virtual"         [reduce using rule 923 (typedef-name)]
    "class"           reduce using rule 128 (class-name)
    "class"           [reduce using rule 274 (enum-name)]
    "class"           [reduce using rule 884 (template-name)]
    "class"           [reduce using rule 923 (typedef-name)]
    "struct"          reduce using rule 128 (class-name)
    "struct"          [reduce using rule 274 (enum-name)]
    "struct"          [reduce using rule 884 (template-name)]
    "struct"          [reduce using rule 923 (typedef-name)]
    "union"           reduce using rule 128 (class-name)
    "union"           [reduce using rule 274 (enum-name)]
    "union"           [reduce using rule 884 (template-name)]
    "union"           [reduce using rule 923 (typedef-name)]
    "template"        reduce using rule 128 (class-name)
    "template"        [reduce using rule 274 (enum-name)]
    "template"        [reduce using rule 884 (template-name)]
    "template"        [reduce using rule 923 (typedef-name)]
    "final"           reduce using rule 128 (class-name)
    "final"           [reduce using rule 274 (enum-name)]
    "final"           [reduce using rule 884 (template-name)]
    "final"           [reduce using rule 923 (typedef-name)]
    "<=>"             reduce using rule 128 (class-name)
    "<=>"             [reduce using rule 274 (enum-name)]
    "<=>"             [reduce using rule 884 (template-name)]
    "<=>"             [reduce using rule 923 (typedef-name)]
    "concept"         reduce using rule 128 (class-name)
    "concept"         [reduce using rule 274 (enum-name)]
    "concept"         [reduce using rule 884 (template-name)]
    "concept"         [reduce using rule 923 (typedef-name)]
    '?'               reduce using rule 128 (class-name)
    '?'               [reduce using rule 274 (enum-name)]
    '?'               [reduce using rule 884 (template-name)]
    '?'               [reduce using rule 923 (typedef-name)]
    "constexpr"       reduce using rule 128 (class-name)
    "constexpr"       [reduce using rule 274 (enum-name)]
    "constexpr"       [reduce using rule 884 (template-name)]
    "constexpr"       [reduce using rule 923 (typedef-name)]
    "&&"              reduce using rule 128 (class-name)
    "&&"              [reduce using rule 274 (enum-name)]
    "&&"              [reduce using rule 884 (template-name)]
    "&&"              [reduce using rule 923 (typedef-name)]
    "||"              reduce using rule 128 (class-name)
    "||"              [reduce using rule 274 (enum-name)]
    "||"              [reduce using rule 884 (template-name)]
    "||"              [reduce using rule 923 (typedef-name)]
    "operator"        reduce using rule 128 (class-name)
    "operator"        [reduce using rule 274 (enum-name)]
    "operator"        [reduce using rule 884 (template-name)]
    "operator"        [reduce using rule 923 (typedef-name)]
    "const"           reduce using rule 128 (class-name)
    "const"           [reduce using rule 274 (enum-name)]
    "const"           [reduce using rule 884 (template-name)]
    "const"           [reduce using rule 923 (typedef-name)]
    "volatile"        reduce using rule 128 (class-name)
    "volatile"        [reduce using rule 274 (enum-name)]
    "volatile"        [reduce using rule 884 (template-name)]
    "volatile"        [reduce using rule 923 (typedef-name)]
    "friend"          reduce using rule 128 (class-name)
    "friend"          [reduce using rule 274 (enum-name)]
    "friend"          [reduce using rule 884 (template-name)]
    "friend"          [reduce using rule 923 (typedef-name)]
    "typedef"         reduce using rule 128 (class-name)
    "typedef"         [reduce using rule 274 (enum-name)]
    "typedef"         [reduce using rule 884 (template-name)]
    "typedef"         [reduce using rule 923 (typedef-name)]
    "consteval"       reduce using rule 128 (class-name)
    "consteval"       [reduce using rule 274 (enum-name)]
    "consteval"       [reduce using rule 884 (template-name)]
    "consteval"       [reduce using rule 923 (typedef-name)]
    "constinit"       reduce using rule 128 (class-name)
    "constinit"       [reduce using rule 274 (enum-name)]
    "constinit"       [reduce using rule 884 (template-name)]
    "constinit"       [reduce using rule 923 (typedef-name)]
    "inline"          reduce using rule 128 (class-name)
    "inline"          [reduce using rule 274 (enum-name)]
    "inline"          [reduce using rule 884 (template-name)]
    "inline"          [reduce using rule 923 (typedef-name)]
    "decltype"        reduce using rule 128 (class-name)
    "decltype"        [reduce using rule 144 (concept-name)]
    "decltype"        [reduce using rule 274 (enum-name)]
    "decltype"        [reduce using rule 884 (template-name)]
    "decltype"        [reduce using rule 923 (typedef-name)]
    "->"              reduce using rule 128 (class-name)
    "->"              [reduce using rule 274 (enum-name)]
    "->"              [reduce using rule 884 (template-name)]
    "->"              [reduce using rule 923 (typedef-name)]
    '.'               reduce using rule 128 (class-name)
    '.'               [reduce using rule 274 (enum-name)]
    '.'               [reduce using rule 884 (template-name)]
    '.'               [reduce using rule 923 (typedef-name)]
    "enum"            reduce using rule 128 (class-name)
    "enum"            [reduce using rule 274 (enum-name)]
    "enum"            [reduce using rule 884 (template-name)]
    "enum"            [reduce using rule 923 (typedef-name)]
    "=="              reduce using rule 128 (class-name)
    "=="              [reduce using rule 274 (enum-name)]
    "=="              [reduce using rule 884 (template-name)]
    "=="              [reduce using rule 923 (typedef-name)]
    "!="              reduce using rule 128 (class-name)
    "!="              [reduce using rule 274 (enum-name)]
    "!="              [reduce using rule 884 (template-name)]
    "!="              [reduce using rule 923 (typedef-name)]
    '^'               reduce using rule 128 (class-name)
    '^'               [reduce using rule 274 (enum-name)]
    '^'               [reduce using rule 884 (template-name)]
    '^'               [reduce using rule 923 (typedef-name)]
    '<'               reduce using rule 128 (class-name)
    '<'               [reduce using rule 144 (concept-name)]
    '<'               [reduce using rule 274 (enum-name)]
    '<'               [reduce using rule 884 (template-name)]
    '<'               [reduce using rule 923 (typedef-name)]
    '>'               reduce using rule 128 (class-name)
    '>'               [reduce using rule 274 (enum-name)]
    '>'               [reduce using rule 884 (template-name)]
    '>'               [reduce using rule 923 (typedef-name)]
    "explicit"        reduce using rule 128 (class-name)
    "explicit"        [reduce using rule 274 (enum-name)]
    "explicit"        [reduce using rule 884 (template-name)]
    "explicit"        [reduce using rule 923 (typedef-name)]
    "export"          reduce using rule 128 (class-name)
    "export"          [reduce using rule 274 (enum-name)]
    "export"          [reduce using rule 884 (template-name)]
    "export"          [reduce using rule 923 (typedef-name)]
    "export-keyword"  reduce using rule 128 (class-name)
    "export-keyword"  [reduce using rule 274 (enum-name)]
    "export-keyword"  [reduce using rule 884 (template-name)]
    "export-keyword"  [reduce using rule 923 (typedef-name)]
    "extern"          reduce using rule 128 (class-name)
    "extern"          [reduce using rule 274 (enum-name)]
    "extern"          [reduce using rule 884 (template-name)]
    "extern"          [reduce using rule 923 (typedef-name)]
    '*'               reduce using rule 128 (class-name)
    '*'               [reduce using rule 274 (enum-name)]
    '*'               [reduce using rule 884 (template-name)]
    '*'               [reduce using rule 923 (typedef-name)]
    '/'               reduce using rule 128 (class-name)
    '/'               [reduce using rule 274 (enum-name)]
    '/'               [reduce using rule 884 (template-name)]
    '/'               [reduce using rule 923 (typedef-name)]
    '%'               reduce using rule 128 (class-name)
    '%'               [reduce using rule 274 (enum-name)]
    '%'               [reduce using rule 884 (template-name)]
    '%'               [reduce using rule 923 (typedef-name)]
    '|'               reduce using rule 128 (class-name)
    '|'               [reduce using rule 274 (enum-name)]
    '|'               [reduce using rule 884 (template-name)]
    '|'               [reduce using rule 923 (typedef-name)]
    "<<"              reduce using rule 128 (class-name)
    "<<"              [reduce using rule 274 (enum-name)]
    "<<"              [reduce using rule 884 (template-name)]
    "<<"              [reduce using rule 923 (typedef-name)]
    ">>"              reduce using rule 128 (class-name)
    ">>"              [reduce using rule 274 (enum-name)]
    ">>"              [reduce using rule 884 (template-name)]
    ">>"              [reduce using rule 923 (typedef-name)]
    "<="              reduce using rule 128 (class-name)
    "<="              [reduce using rule 274 (enum-name)]
    "<="              [reduce using rule 884 (template-name)]
    "<="              [reduce using rule 923 (typedef-name)]
    ">="              reduce using rule 128 (class-name)
    ">="              [reduce using rule 274 (enum-name)]
    ">="              [reduce using rule 884 (template-name)]
    ">="              [reduce using rule 923 (typedef-name)]
    ".*"              reduce using rule 128 (class-name)
    ".*"              [reduce using rule 274 (enum-name)]
    ".*"              [reduce using rule 884 (template-name)]
    ".*"              [reduce using rule 923 (typedef-name)]
    "->*"             reduce using rule 128 (class-name)
    "->*"             [reduce using rule 274 (enum-name)]
    "->*"             [reduce using rule 884 (template-name)]
    "->*"             [reduce using rule 923 (typedef-name)]
    "try"             reduce using rule 128 (class-name)
    "try"             [reduce using rule 274 (enum-name)]
    "try"             [reduce using rule 884 (template-name)]
    "try"             [reduce using rule 923 (typedef-name)]
    "import-keyword"  reduce using rule 128 (class-name)
    "import-keyword"  [reduce using rule 274 (enum-name)]
    "import-keyword"  [reduce using rule 884 (template-name)]
    "import-keyword"  [reduce using rule 923 (typedef-name)]
    "namespace"       reduce using rule 128 (class-name)
    "namespace"       [reduce using rule 274 (enum-name)]
    "namespace"       [reduce using rule 884 (template-name)]
    "namespace"       [reduce using rule 923 (typedef-name)]
    "requires"        reduce using rule 128 (class-name)
    "requires"        [reduce using rule 274 (enum-name)]
    "requires"        [reduce using rule 884 (template-name)]
    "requires"        [reduce using rule 923 (typedef-name)]
    "noexcept"        reduce using rule 128 (class-name)
    "noexcept"        [reduce using rule 274 (enum-name)]
    "noexcept"        [reduce using rule 884 (template-name)]
    "noexcept"        [reduce using rule 923 (typedef-name)]
    '~'               reduce using rule 128 (class-name)
    '~'               [reduce using rule 274 (enum-name)]
    '~'               [reduce using rule 884 (template-name)]
    '~'               [reduce using rule 923 (typedef-name)]
    "++"              reduce using rule 128 (class-name)
    "++"              [reduce using rule 274 (enum-name)]
    "++"              [reduce using rule 884 (template-name)]
    "++"              [reduce using rule 923 (typedef-name)]
    "--"              reduce using rule 128 (class-name)
    "--"              [reduce using rule 274 (enum-name)]
    "--"              [reduce using rule 884 (template-name)]
    "--"              [reduce using rule 923 (typedef-name)]
    "auto"            reduce using rule 128 (class-name)
    "auto"            [reduce using rule 144 (concept-name)]
    "auto"            [reduce using rule 274 (enum-name)]
    "auto"            [reduce using rule 884 (template-name)]
    "auto"            [reduce using rule 923 (typedef-name)]
    "char"            reduce using rule 128 (class-name)
    "char"            [reduce using rule 274 (enum-name)]
    "char"            [reduce using rule 884 (template-name)]
    "char"            [reduce using rule 923 (typedef-name)]
    "char8_t"         reduce using rule 128 (class-name)
    "char8_t"         [reduce using rule 274 (enum-name)]
    "char8_t"         [reduce using rule 884 (template-name)]
    "char8_t"         [reduce using rule 923 (typedef-name)]
    "char16_t"        reduce using rule 128 (class-name)
    "char16_t"        [reduce using rule 274 (enum-name)]
    "char16_t"        [reduce using rule 884 (template-name)]
    "char16_t"        [reduce using rule 923 (typedef-name)]
    "char32_t"        reduce using rule 128 (class-name)
    "char32_t"        [reduce using rule 274 (enum-name)]
    "char32_t"        [reduce using rule 884 (template-name)]
    "char32_t"        [reduce using rule 923 (typedef-name)]
    "wchar_t"         reduce using rule 128 (class-name)
    "wchar_t"         [reduce using rule 274 (enum-name)]
    "wchar_t"         [reduce using rule 884 (template-name)]
    "wchar_t"         [reduce using rule 923 (typedef-name)]
    "bool"            reduce using rule 128 (class-name)
    "bool"            [reduce using rule 274 (enum-name)]
    "bool"            [reduce using rule 884 (template-name)]
    "bool"            [reduce using rule 923 (typedef-name)]
    "short"           reduce using rule 128 (class-name)
    "short"           [reduce using rule 274 (enum-name)]
    "short"           [reduce using rule 884 (template-name)]
    "short"           [reduce using rule 923 (typedef-name)]
    "int"             reduce using rule 128 (class-name)
    "int"             [reduce using rule 274 (enum-name)]
    "int"             [reduce using rule 884 (template-name)]
    "int"             [reduce using rule 923 (typedef-name)]
    "long"            reduce using rule 128 (class-name)
    "long"            [reduce using rule 274 (enum-name)]
    "long"            [reduce using rule 884 (template-name)]
    "long"            [reduce using rule 923 (typedef-name)]
    "signed"          reduce using rule 128 (class-name)
    "signed"          [reduce using rule 274 (enum-name)]
    "signed"          [reduce using rule 884 (template-name)]
    "signed"          [reduce using rule 923 (typedef-name)]
    "unsigned"        reduce using rule 128 (class-name)
    "unsigned"        [reduce using rule 274 (enum-name)]
    "unsigned"        [reduce using rule 884 (template-name)]
    "unsigned"        [reduce using rule 923 (typedef-name)]
    "float"           reduce using rule 128 (class-name)
    "float"           [reduce using rule 274 (enum-name)]
    "float"           [reduce using rule 884 (template-name)]
    "float"           [reduce using rule 923 (typedef-name)]
    "double"          reduce using rule 128 (class-name)
    "double"          [reduce using rule 274 (enum-name)]
    "double"          [reduce using rule 884 (template-name)]
    "double"          [reduce using rule 923 (typedef-name)]
    "void"            reduce using rule 128 (class-name)
    "void"            [reduce using rule 274 (enum-name)]
    "void"            [reduce using rule 884 (template-name)]
    "void"            [reduce using rule 923 (typedef-name)]
    "static_assert"   reduce using rule 128 (class-name)
    "static_assert"   [reduce using rule 274 (enum-name)]
    "static_assert"   [reduce using rule 884 (template-name)]
    "static_assert"   [reduce using rule 923 (typedef-name)]
    "static"          reduce using rule 128 (class-name)
    "static"          [reduce using rule 274 (enum-name)]
    "static"          [reduce using rule 884 (template-name)]
    "static"          [reduce using rule 923 (typedef-name)]
    "thread_local"    reduce using rule 128 (class-name)
    "thread_local"    [reduce using rule 274 (enum-name)]
    "thread_local"    [reduce using rule 884 (template-name)]
    "thread_local"    [reduce using rule 923 (typedef-name)]
    "mutable"         reduce using rule 128 (class-name)
    "mutable"         [reduce using rule 274 (enum-name)]
    "mutable"         [reduce using rule 884 (template-name)]
    "mutable"         [reduce using rule 923 (typedef-name)]
    "typename"        reduce using rule 128 (class-name)
    "typename"        [reduce using rule 274 (enum-name)]
    "typename"        [reduce using rule 884 (template-name)]
    "typename"        [reduce using rule 923 (typedef-name)]
    "override"        reduce using rule 128 (class-name)
    "override"        [reduce using rule 274 (enum-name)]
    "override"        [reduce using rule 884 (template-name)]
    "override"        [reduce using rule 923 (typedef-name)]
    $default          reduce using rule 128 (class-name)


State 212

  900 type-constraint: nested-name-specifier-opt concept-name •
  901                | nested-name-specifier-opt concept-name • '<' template-argument-list-opt '>'

    '<'  shift, and go to state 460

    $default  reduce using rule 900 (type-constraint)


State 213

  827 simple-template-id: template-name • '<' template-argument-list-opt '>'
  832 simple-type-specifier: nested-name-specifier-opt template-name •

    '<'  shift, and go to state 218

    '<'       [reduce using rule 832 (simple-type-specifier)]
    $default  reduce using rule 832 (simple-type-specifier)


State 214

  828 simple-type-specifier: nested-name-specifier-opt type-name •

    $default  reduce using rule 828 (simple-type-specifier)


State 215

  143 concept-definition: "concept" • concept-name '=' constraint-expression ';'

    IDENTIFIER  shift, and go to state 461

    concept-name  go to state 462


State 216

  879 template-declaration: template-head concept-definition •

    $default  reduce using rule 879 (template-declaration)


State 217

  878 template-declaration: template-head declaration •

    $default  reduce using rule 878 (template-declaration)


State 218

  827 simple-template-id: template-name '<' • template-argument-list-opt '>'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 116
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    '>'         reduce using rule 876 (template-argument-list-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-key                            go to state 463
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 464
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 465
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    string-literal                       go to state 339
    template-argument                    go to state 467
    template-argument-list               go to state 468
    template-argument-list-opt           go to state 469
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-id                              go to state 470
    type-name                            go to state 107
    type-specifier                       go to state 471
    type-specifier-seq                   go to state 472
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 219

    0 $accept: translation-unit $end •

    $default  accept


State 220

  704 placeholder-type-specifier: type-constraint-opt "decltype" • '(' "auto" ')'

    '('  shift, and go to state 474


State 221

  703 placeholder-type-specifier: type-constraint-opt "auto" •

    $default  reduce using rule 703 (placeholder-type-specifier)


State 222

  576 nested-name-specifier: type-name "::" •

    $default  reduce using rule 576 (nested-name-specifier)


State 223

   16 alias-declaration: "using" IDENTIFIER attribute-specifier-seq-opt • '=' defining-type-id ';'
   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier

    '='        shift, and go to state 475
    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 224

  981 using-enum-declaration: "using" elaborated-enum-specifier ';' •

    $default  reduce using rule 981 (using-enum-declaration)


State 225

  579 nested-name-specifier: nested-name-specifier • IDENTIFIER "::"
  580                      | nested-name-specifier • template-opt simple-template-id "::"
  977 using-declarator: typename-opt nested-name-specifier • unqualified-id

    IDENTIFIER  shift, and go to state 476
    "template"  shift, and go to state 352
    "operator"  shift, and go to state 256
    '~'         shift, and go to state 398

    IDENTIFIER  [reduce using rule 885 (template-opt)]

    conversion-function-id  go to state 295
    literal-operator-id     go to state 318
    operator-function-id    go to state 327
    simple-template-id      go to state 477
    template-id             go to state 340
    template-name           go to state 103
    template-opt            go to state 210
    unqualified-id          go to state 478


State 226

  978 using-declarator-list: using-declarator eclipse-opt •

    $default  reduce using rule 978 (using-declarator-list)


State 227

  976 using-declaration: "using" using-declarator-list ';' •

    $default  reduce using rule 976 (using-declaration)


State 228

  979 using-declarator-list: using-declarator-list ',' • using-declarator eclipse-opt

    "typename"  shift, and go to state 117

    $default  reduce using rule 925 (typename-opt)

    typename-opt      go to state 119
    using-declarator  go to state 479


State 229

  914 type-parameter-key: "class" •

    $default  reduce using rule 914 (type-parameter-key)


State 230

  880 template-head: "template" • '<' template-parameter-list '>' requires-clause-opt

    '<'  shift, and go to state 480


State 231

  298 explicit-specialization: "template" '<' '>' • declaration

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"      [reduce using rule 324 (extern-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "namespace"     [reduce using rule 461 (inline-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 481
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 232

  915 type-parameter-key: "typename" •

    $default  reduce using rule 915 (type-parameter-key)


State 233

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  692 parameter-declaration: attribute-specifier-seq-opt • this-opt decl-specifier-seq declarator
  693                      | attribute-specifier-seq-opt • this-opt decl-specifier-seq declarator '=' initializer-clause
  694                      | attribute-specifier-seq-opt • this-opt decl-specifier-seq abstract-declarator-opt
  695                      | attribute-specifier-seq-opt • this-opt decl-specifier-seq abstract-declarator-opt '=' initializer-clause

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170
    "this"     shift, and go to state 482

    $default  reduce using rule 891 (this-opt)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174
    this-opt             go to state 483


State 234

  900 type-constraint: nested-name-specifier-opt • concept-name
  901                | nested-name-specifier-opt • concept-name '<' template-argument-list-opt '>'

    IDENTIFIER  shift, and go to state 461

    concept-name  go to state 212


State 235

  888 template-parameter: parameter-declaration •

    $default  reduce using rule 888 (template-parameter)


State 236

  912 type-parameter: template-head • type-parameter-key eclipse-opt identifier-opt
  913               | template-head • type-parameter-key identifier-opt '=' id-expression

    "class"     shift, and go to state 229
    "typename"  shift, and go to state 232

    type-parameter-key  go to state 484


State 237

  889 template-parameter-list: template-parameter •

    $default  reduce using rule 889 (template-parameter-list)


State 238

  880 template-head: "template" '<' template-parameter-list • '>' requires-clause-opt
  890 template-parameter-list: template-parameter-list • ',' template-parameter

    ','  shift, and go to state 485
    '>'  shift, and go to state 486


State 239

  910 type-parameter: type-constraint • eclipse-opt identifier-opt
  911               | type-constraint • identifier-opt '=' type-id

    IDENTIFIER  shift, and go to state 487
    "..."       shift, and go to state 169

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    '='         reduce using rule 436 (identifier-opt)
    $default    reduce using rule 248 (eclipse-opt)

    eclipse-opt     go to state 488
    identifier-opt  go to state 489


State 240

  887 template-parameter: type-parameter •

    $default  reduce using rule 887 (template-parameter)


State 241

  908 type-parameter: type-parameter-key • eclipse-opt identifier-opt
  909               | type-parameter-key • identifier-opt '=' type-id

    IDENTIFIER  shift, and go to state 487
    "..."       shift, and go to state 169

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    '='         reduce using rule 436 (identifier-opt)
    $default    reduce using rule 248 (eclipse-opt)

    eclipse-opt     go to state 490
    identifier-opt  go to state 491


State 242

  128 class-name: IDENTIFIER •
  274 enum-name: IDENTIFIER •
  567 namespace-alias: IDENTIFIER •
  573 namespace-name: IDENTIFIER •
  884 template-name: IDENTIFIER •
  923 typedef-name: IDENTIFIER •
  951 unqualified-id: IDENTIFIER •

    "::"      reduce using rule 128 (class-name)
    "::"      [reduce using rule 274 (enum-name)]
    "::"      [reduce using rule 567 (namespace-alias)]
    "::"      [reduce using rule 573 (namespace-name)]
    "::"      [reduce using rule 923 (typedef-name)]
    "::"      [reduce using rule 951 (unqualified-id)]
    '<'       reduce using rule 884 (template-name)
    '<'       [reduce using rule 951 (unqualified-id)]
    $default  reduce using rule 951 (unqualified-id)


State 243

  944 unary-operator: '+' •

    $default  reduce using rule 944 (unary-operator)


State 244

  945 unary-operator: '-' •

    $default  reduce using rule 945 (unary-operator)


State 245

  120 cast-expression: '(' • type-id ')' cast-expression
  334 fold-expression: '(' • cast-expression fold-operator "..." ')'
  335                | '(' • "..." fold-operator cast-expression ')'
  336                | '(' • cast-expression fold-operator "..." fold-operator cast-expression ')'
  728 primary-expression: '(' • expression ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "..."               shift, and go to state 492
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 116
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 493
    character-literal                    go to state 292
    class-key                            go to state 463
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 494
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-id                              go to state 495
    type-name                            go to state 107
    type-specifier                       go to state 471
    type-specifier-seq                   go to state 472
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 246

  943 unary-operator: '&' •

    $default  reduce using rule 943 (unary-operator)


State 247

  575 nested-name-specifier: "::" •
  794 scope-opt: "::" •

    "delete"  reduce using rule 794 (scope-opt)
    "new"     reduce using rule 794 (scope-opt)
    $default  reduce using rule 575 (nested-name-specifier)


State 248

  496 lambda-introducer: '[' • lambda-capture-opt ']'

    IDENTIFIER  shift, and go to state 496
    '='         shift, and go to state 497
    '&'         shift, and go to state 498
    "..."       shift, and go to state 169
    '*'         shift, and go to state 499
    "this"      shift, and go to state 500

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 490 (lambda-capture-opt)

    capture             go to state 501
    capture-default     go to state 502
    capture-list        go to state 503
    eclipse-opt         go to state 504
    init-capture        go to state 505
    lambda-capture      go to state 506
    lambda-capture-opt  go to state 507
    simple-capture      go to state 508


State 249

   64 await-expression: "co_await" • cast-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 509
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 250

  234 digit: '0' •
  643 octal-literal: '0' •

    '\''      reduce using rule 234 (digit)
    '\''      [reduce using rule 643 (octal-literal)]
    '0'       reduce using rule 234 (digit)
    '0'       [reduce using rule 643 (octal-literal)]
    '1'       reduce using rule 234 (digit)
    '1'       [reduce using rule 643 (octal-literal)]
    '.'       reduce using rule 234 (digit)
    '.'       [reduce using rule 643 (octal-literal)]
    '2'       reduce using rule 234 (digit)
    '2'       [reduce using rule 643 (octal-literal)]
    '3'       reduce using rule 234 (digit)
    '3'       [reduce using rule 643 (octal-literal)]
    '4'       reduce using rule 234 (digit)
    '4'       [reduce using rule 643 (octal-literal)]
    '5'       reduce using rule 234 (digit)
    '5'       [reduce using rule 643 (octal-literal)]
    '6'       reduce using rule 234 (digit)
    '6'       [reduce using rule 643 (octal-literal)]
    '7'       reduce using rule 234 (digit)
    '7'       [reduce using rule 643 (octal-literal)]
    '8'       reduce using rule 234 (digit)
    '9'       reduce using rule 234 (digit)
    'e'       reduce using rule 234 (digit)
    'E'       reduce using rule 234 (digit)
    $default  reduce using rule 643 (octal-literal)


State 251

  235 digit: '1' •
  607 nonzero-digit: '1' •

    '\''      reduce using rule 235 (digit)
    '\''      [reduce using rule 607 (nonzero-digit)]
    '0'       reduce using rule 235 (digit)
    '0'       [reduce using rule 607 (nonzero-digit)]
    '1'       reduce using rule 235 (digit)
    '1'       [reduce using rule 607 (nonzero-digit)]
    '.'       reduce using rule 235 (digit)
    '.'       [reduce using rule 607 (nonzero-digit)]
    '2'       reduce using rule 235 (digit)
    '2'       [reduce using rule 607 (nonzero-digit)]
    '3'       reduce using rule 235 (digit)
    '3'       [reduce using rule 607 (nonzero-digit)]
    '4'       reduce using rule 235 (digit)
    '4'       [reduce using rule 607 (nonzero-digit)]
    '5'       reduce using rule 235 (digit)
    '5'       [reduce using rule 607 (nonzero-digit)]
    '6'       reduce using rule 235 (digit)
    '6'       [reduce using rule 607 (nonzero-digit)]
    '7'       reduce using rule 235 (digit)
    '7'       [reduce using rule 607 (nonzero-digit)]
    '8'       reduce using rule 235 (digit)
    '8'       [reduce using rule 607 (nonzero-digit)]
    '9'       reduce using rule 235 (digit)
    '9'       [reduce using rule 607 (nonzero-digit)]
    'e'       reduce using rule 235 (digit)
    'E'       reduce using rule 235 (digit)
    $default  reduce using rule 607 (nonzero-digit)


State 252

   87 binary-literal: "0b" • binary-digit

    '0'  shift, and go to state 510
    '1'  shift, and go to state 511

    binary-digit  go to state 512


State 253

   88 binary-literal: "0B" • binary-digit

    '0'  shift, and go to state 510
    '1'  shift, and go to state 511

    binary-digit  go to state 513


State 254

   99 boolean-literal: "false" •

    $default  reduce using rule 99 (boolean-literal)


State 255

  100 boolean-literal: "true" •

    $default  reduce using rule 100 (boolean-literal)


State 256

  166 conversion-function-id: "operator" • conversion-type-id
  507 literal-operator-id: "operator" • string-literal IDENTIFIER
  508                    | "operator" • user-defined-string-literal
  646 operator-function-id: "operator" • overloadable-operator
  647                     | "operator" • overloadable-operator '<' template-argument-list-opt '>'

    IDENTIFIER  shift, and go to state 1
    '+'         shift, and go to state 514
    '-'         shift, and go to state 515
    '='         shift, and go to state 516
    '('         shift, and go to state 517
    '&'         shift, and go to state 518
    "*="        shift, and go to state 519
    "/="        shift, and go to state 520
    "%="        shift, and go to state 521
    "+="        shift, and go to state 522
    "-="        shift, and go to state 523
    ">>="       shift, and go to state 524
    "<<="       shift, and go to state 525
    "&="        shift, and go to state 526
    "^="        shift, and go to state 527
    "|="        shift, and go to state 528
    ','         shift, and go to state 529
    "::"        shift, and go to state 4
    '['         shift, and go to state 530
    "co_await"  shift, and go to state 531
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "<=>"       shift, and go to state 532
    "&&"        shift, and go to state 533
    "||"        shift, and go to state 534
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "->"        shift, and go to state 535
    "delete"    shift, and go to state 536
    "enum"      shift, and go to state 116
    "u8"        shift, and go to state 133
    'u'         shift, and go to state 134
    'U'         shift, and go to state 135
    'L'         shift, and go to state 136
    "=="        shift, and go to state 537
    "!="        shift, and go to state 538
    '!'         shift, and go to state 539
    '^'         shift, and go to state 540
    '<'         shift, and go to state 541
    '>'         shift, and go to state 542
    '*'         shift, and go to state 543
    '/'         shift, and go to state 544
    '%'         shift, and go to state 545
    '|'         shift, and go to state 546
    "<<"        shift, and go to state 547
    ">>"        shift, and go to state 548
    "<="        shift, and go to state 549
    ">="        shift, and go to state 550
    "->*"       shift, and go to state 551
    "new"       shift, and go to state 552
    '~'         shift, and go to state 553
    "++"        shift, and go to state 554
    "--"        shift, and go to state 555
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    class-key                    go to state 463
    class-name                   go to state 54
    conversion-type-id           go to state 556
    cv-qualifier                 go to state 56
    decltype-specifier           go to state 62
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    encoding-prefix              go to state 137
    encoding-prefix-opt          go to state 138
    enum-name                    go to state 70
    namespace-alias              go to state 86
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    overloadable-operator        go to state 557
    placeholder-type-specifier   go to state 95
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    string-literal               go to state 558
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 471
    type-specifier-seq           go to state 559
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    user-defined-string-literal  go to state 560


State 257

  236 digit: '2' •
  608 nonzero-digit: '2' •

    '\''      reduce using rule 236 (digit)
    '\''      [reduce using rule 608 (nonzero-digit)]
    '0'       reduce using rule 236 (digit)
    '0'       [reduce using rule 608 (nonzero-digit)]
    '1'       reduce using rule 236 (digit)
    '1'       [reduce using rule 608 (nonzero-digit)]
    '.'       reduce using rule 236 (digit)
    '.'       [reduce using rule 608 (nonzero-digit)]
    '2'       reduce using rule 236 (digit)
    '2'       [reduce using rule 608 (nonzero-digit)]
    '3'       reduce using rule 236 (digit)
    '3'       [reduce using rule 608 (nonzero-digit)]
    '4'       reduce using rule 236 (digit)
    '4'       [reduce using rule 608 (nonzero-digit)]
    '5'       reduce using rule 236 (digit)
    '5'       [reduce using rule 608 (nonzero-digit)]
    '6'       reduce using rule 236 (digit)
    '6'       [reduce using rule 608 (nonzero-digit)]
    '7'       reduce using rule 236 (digit)
    '7'       [reduce using rule 608 (nonzero-digit)]
    '8'       reduce using rule 236 (digit)
    '8'       [reduce using rule 608 (nonzero-digit)]
    '9'       reduce using rule 236 (digit)
    '9'       [reduce using rule 608 (nonzero-digit)]
    'e'       reduce using rule 236 (digit)
    'E'       reduce using rule 236 (digit)
    $default  reduce using rule 608 (nonzero-digit)


State 258

  237 digit: '3' •
  609 nonzero-digit: '3' •

    '\''      reduce using rule 237 (digit)
    '\''      [reduce using rule 609 (nonzero-digit)]
    '0'       reduce using rule 237 (digit)
    '0'       [reduce using rule 609 (nonzero-digit)]
    '1'       reduce using rule 237 (digit)
    '1'       [reduce using rule 609 (nonzero-digit)]
    '.'       reduce using rule 237 (digit)
    '.'       [reduce using rule 609 (nonzero-digit)]
    '2'       reduce using rule 237 (digit)
    '2'       [reduce using rule 609 (nonzero-digit)]
    '3'       reduce using rule 237 (digit)
    '3'       [reduce using rule 609 (nonzero-digit)]
    '4'       reduce using rule 237 (digit)
    '4'       [reduce using rule 609 (nonzero-digit)]
    '5'       reduce using rule 237 (digit)
    '5'       [reduce using rule 609 (nonzero-digit)]
    '6'       reduce using rule 237 (digit)
    '6'       [reduce using rule 609 (nonzero-digit)]
    '7'       reduce using rule 237 (digit)
    '7'       [reduce using rule 609 (nonzero-digit)]
    '8'       reduce using rule 237 (digit)
    '8'       [reduce using rule 609 (nonzero-digit)]
    '9'       reduce using rule 237 (digit)
    '9'       [reduce using rule 609 (nonzero-digit)]
    'e'       reduce using rule 237 (digit)
    'E'       reduce using rule 237 (digit)
    $default  reduce using rule 609 (nonzero-digit)


State 259

  238 digit: '4' •
  610 nonzero-digit: '4' •

    '\''      reduce using rule 238 (digit)
    '\''      [reduce using rule 610 (nonzero-digit)]
    '0'       reduce using rule 238 (digit)
    '0'       [reduce using rule 610 (nonzero-digit)]
    '1'       reduce using rule 238 (digit)
    '1'       [reduce using rule 610 (nonzero-digit)]
    '.'       reduce using rule 238 (digit)
    '.'       [reduce using rule 610 (nonzero-digit)]
    '2'       reduce using rule 238 (digit)
    '2'       [reduce using rule 610 (nonzero-digit)]
    '3'       reduce using rule 238 (digit)
    '3'       [reduce using rule 610 (nonzero-digit)]
    '4'       reduce using rule 238 (digit)
    '4'       [reduce using rule 610 (nonzero-digit)]
    '5'       reduce using rule 238 (digit)
    '5'       [reduce using rule 610 (nonzero-digit)]
    '6'       reduce using rule 238 (digit)
    '6'       [reduce using rule 610 (nonzero-digit)]
    '7'       reduce using rule 238 (digit)
    '7'       [reduce using rule 610 (nonzero-digit)]
    '8'       reduce using rule 238 (digit)
    '8'       [reduce using rule 610 (nonzero-digit)]
    '9'       reduce using rule 238 (digit)
    '9'       [reduce using rule 610 (nonzero-digit)]
    'e'       reduce using rule 238 (digit)
    'E'       reduce using rule 238 (digit)
    $default  reduce using rule 610 (nonzero-digit)


State 260

  239 digit: '5' •
  611 nonzero-digit: '5' •

    '\''      reduce using rule 239 (digit)
    '\''      [reduce using rule 611 (nonzero-digit)]
    '0'       reduce using rule 239 (digit)
    '0'       [reduce using rule 611 (nonzero-digit)]
    '1'       reduce using rule 239 (digit)
    '1'       [reduce using rule 611 (nonzero-digit)]
    '.'       reduce using rule 239 (digit)
    '.'       [reduce using rule 611 (nonzero-digit)]
    '2'       reduce using rule 239 (digit)
    '2'       [reduce using rule 611 (nonzero-digit)]
    '3'       reduce using rule 239 (digit)
    '3'       [reduce using rule 611 (nonzero-digit)]
    '4'       reduce using rule 239 (digit)
    '4'       [reduce using rule 611 (nonzero-digit)]
    '5'       reduce using rule 239 (digit)
    '5'       [reduce using rule 611 (nonzero-digit)]
    '6'       reduce using rule 239 (digit)
    '6'       [reduce using rule 611 (nonzero-digit)]
    '7'       reduce using rule 239 (digit)
    '7'       [reduce using rule 611 (nonzero-digit)]
    '8'       reduce using rule 239 (digit)
    '8'       [reduce using rule 611 (nonzero-digit)]
    '9'       reduce using rule 239 (digit)
    '9'       [reduce using rule 611 (nonzero-digit)]
    'e'       reduce using rule 239 (digit)
    'E'       reduce using rule 239 (digit)
    $default  reduce using rule 611 (nonzero-digit)


State 261

  240 digit: '6' •
  612 nonzero-digit: '6' •

    '\''      reduce using rule 240 (digit)
    '\''      [reduce using rule 612 (nonzero-digit)]
    '0'       reduce using rule 240 (digit)
    '0'       [reduce using rule 612 (nonzero-digit)]
    '1'       reduce using rule 240 (digit)
    '1'       [reduce using rule 612 (nonzero-digit)]
    '.'       reduce using rule 240 (digit)
    '.'       [reduce using rule 612 (nonzero-digit)]
    '2'       reduce using rule 240 (digit)
    '2'       [reduce using rule 612 (nonzero-digit)]
    '3'       reduce using rule 240 (digit)
    '3'       [reduce using rule 612 (nonzero-digit)]
    '4'       reduce using rule 240 (digit)
    '4'       [reduce using rule 612 (nonzero-digit)]
    '5'       reduce using rule 240 (digit)
    '5'       [reduce using rule 612 (nonzero-digit)]
    '6'       reduce using rule 240 (digit)
    '6'       [reduce using rule 612 (nonzero-digit)]
    '7'       reduce using rule 240 (digit)
    '7'       [reduce using rule 612 (nonzero-digit)]
    '8'       reduce using rule 240 (digit)
    '8'       [reduce using rule 612 (nonzero-digit)]
    '9'       reduce using rule 240 (digit)
    '9'       [reduce using rule 612 (nonzero-digit)]
    'e'       reduce using rule 240 (digit)
    'E'       reduce using rule 240 (digit)
    $default  reduce using rule 612 (nonzero-digit)


State 262

  241 digit: '7' •
  613 nonzero-digit: '7' •

    '\''      reduce using rule 241 (digit)
    '\''      [reduce using rule 613 (nonzero-digit)]
    '0'       reduce using rule 241 (digit)
    '0'       [reduce using rule 613 (nonzero-digit)]
    '1'       reduce using rule 241 (digit)
    '1'       [reduce using rule 613 (nonzero-digit)]
    '.'       reduce using rule 241 (digit)
    '.'       [reduce using rule 613 (nonzero-digit)]
    '2'       reduce using rule 241 (digit)
    '2'       [reduce using rule 613 (nonzero-digit)]
    '3'       reduce using rule 241 (digit)
    '3'       [reduce using rule 613 (nonzero-digit)]
    '4'       reduce using rule 241 (digit)
    '4'       [reduce using rule 613 (nonzero-digit)]
    '5'       reduce using rule 241 (digit)
    '5'       [reduce using rule 613 (nonzero-digit)]
    '6'       reduce using rule 241 (digit)
    '6'       [reduce using rule 613 (nonzero-digit)]
    '7'       reduce using rule 241 (digit)
    '7'       [reduce using rule 613 (nonzero-digit)]
    '8'       reduce using rule 241 (digit)
    '8'       [reduce using rule 613 (nonzero-digit)]
    '9'       reduce using rule 241 (digit)
    '9'       [reduce using rule 613 (nonzero-digit)]
    'e'       reduce using rule 241 (digit)
    'E'       reduce using rule 241 (digit)
    $default  reduce using rule 613 (nonzero-digit)


State 263

  242 digit: '8' •
  614 nonzero-digit: '8' •

    '\''      reduce using rule 242 (digit)
    '\''      [reduce using rule 614 (nonzero-digit)]
    '0'       reduce using rule 242 (digit)
    '0'       [reduce using rule 614 (nonzero-digit)]
    '1'       reduce using rule 242 (digit)
    '1'       [reduce using rule 614 (nonzero-digit)]
    '.'       reduce using rule 242 (digit)
    '.'       [reduce using rule 614 (nonzero-digit)]
    '2'       reduce using rule 242 (digit)
    '2'       [reduce using rule 614 (nonzero-digit)]
    '3'       reduce using rule 242 (digit)
    '3'       [reduce using rule 614 (nonzero-digit)]
    '4'       reduce using rule 242 (digit)
    '4'       [reduce using rule 614 (nonzero-digit)]
    '5'       reduce using rule 242 (digit)
    '5'       [reduce using rule 614 (nonzero-digit)]
    '6'       reduce using rule 242 (digit)
    '6'       [reduce using rule 614 (nonzero-digit)]
    '7'       reduce using rule 242 (digit)
    '7'       [reduce using rule 614 (nonzero-digit)]
    '8'       reduce using rule 242 (digit)
    '8'       [reduce using rule 614 (nonzero-digit)]
    '9'       reduce using rule 242 (digit)
    '9'       [reduce using rule 614 (nonzero-digit)]
    'e'       reduce using rule 242 (digit)
    'E'       reduce using rule 242 (digit)
    $default  reduce using rule 614 (nonzero-digit)


State 264

  243 digit: '9' •
  615 nonzero-digit: '9' •

    '\''      reduce using rule 243 (digit)
    '\''      [reduce using rule 615 (nonzero-digit)]
    '0'       reduce using rule 243 (digit)
    '0'       [reduce using rule 615 (nonzero-digit)]
    '1'       reduce using rule 243 (digit)
    '1'       [reduce using rule 615 (nonzero-digit)]
    '.'       reduce using rule 243 (digit)
    '.'       [reduce using rule 615 (nonzero-digit)]
    '2'       reduce using rule 243 (digit)
    '2'       [reduce using rule 615 (nonzero-digit)]
    '3'       reduce using rule 243 (digit)
    '3'       [reduce using rule 615 (nonzero-digit)]
    '4'       reduce using rule 243 (digit)
    '4'       [reduce using rule 615 (nonzero-digit)]
    '5'       reduce using rule 243 (digit)
    '5'       [reduce using rule 615 (nonzero-digit)]
    '6'       reduce using rule 243 (digit)
    '6'       [reduce using rule 615 (nonzero-digit)]
    '7'       reduce using rule 243 (digit)
    '7'       [reduce using rule 615 (nonzero-digit)]
    '8'       reduce using rule 243 (digit)
    '8'       [reduce using rule 615 (nonzero-digit)]
    '9'       reduce using rule 243 (digit)
    '9'       [reduce using rule 615 (nonzero-digit)]
    'e'       reduce using rule 243 (digit)
    'E'       reduce using rule 243 (digit)
    $default  reduce using rule 615 (nonzero-digit)


State 265

  946 unary-operator: '!' •

    $default  reduce using rule 946 (unary-operator)


State 266

  942 unary-operator: '*' •

    $default  reduce using rule 942 (unary-operator)


State 267

  430 hexadecimal-prefix: "0x" •

    $default  reduce using rule 430 (hexadecimal-prefix)


State 268

  431 hexadecimal-prefix: "0X" •

    $default  reduce using rule 431 (hexadecimal-prefix)


State 269

  782 requires-expression: "requires" • requirement-parameter-list-opt requirement-body

    '('  shift, and go to state 561

    $default  reduce using rule 775 (requirement-parameter-list-opt)

    requirement-parameter-list      go to state 562
    requirement-parameter-list-opt  go to state 563


State 270

  600 noexcept-expression: "noexcept" • '(' expression ')'

    '('  shift, and go to state 564


State 271

  947 unary-operator: '~' •
  955 unqualified-id: '~' • type-name
  956               | '~' • decltype-specifier

    IDENTIFIER  shift, and go to state 565
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 947 (unary-operator)]
    "decltype"  [reduce using rule 947 (unary-operator)]
    $default    reduce using rule 947 (unary-operator)

    class-name          go to state 54
    decltype-specifier  go to state 566
    enum-name           go to state 70
    simple-template-id  go to state 97
    template-name       go to state 103
    type-name           go to state 567
    typedef-name        go to state 109


State 272

  932 unary-expression: "++" • cast-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 568
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 273

  933 unary-expression: "--" • cast-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 569
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 274

  708 pointer-literal: "nullptr" •

    $default  reduce using rule 708 (pointer-literal)


State 275

  720 postfix-expression: "dynamic_cast" • '<' type-id '>' '(' expression ')'

    '<'  shift, and go to state 570


State 276

  721 postfix-expression: "static_cast" • '<' type-id '>' '(' expression ')'

    '<'  shift, and go to state 571


State 277

  722 postfix-expression: "reinterpret_cast" • '<' type-id '>' '(' expression ')'

    '<'  shift, and go to state 572


State 278

  723 postfix-expression: "const_cast" • '<' type-id '>' '(' expression ')'

    '<'  shift, and go to state 573


State 279

  724 postfix-expression: "typeid" • '(' expression ')'
  725                   | "typeid" • '(' type-id ')'

    '('  shift, and go to state 574


State 280

  727 primary-expression: "this" •

    $default  reduce using rule 727 (primary-expression)


State 281

  893 throw-expression: "throw" • assignment-expression-opt

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    '\''        reduce using rule 262 (encoding-prefix-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    '"'         reduce using rule 262 (encoding-prefix-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    'R'         reduce using rule 262 (encoding-prefix-opt)
    $default    reduce using rule 28 (assignment-expression-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 575
    assignment-expression-opt            go to state 576
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 282

  935 unary-expression: "sizeof" • unary-expression
  936                 | "sizeof" • '(' type-id ')'
  937                 | "sizeof" • "..." '(' IDENTIFIER ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 577
    '&'                 shift, and go to state 246
    "..."               shift, and go to state 578
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 579
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 283

  938 unary-expression: "alignof" • '(' type-id ')'

    '('  shift, and go to state 580


State 284

  990 yield-expression: "co_yield" • assignment-expression
  991                 | "co_yield" • braced-init-list

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 581
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 582
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 285

   14 additive-expression: additive-expression • '+' multiplicative-expression
   15                    | additive-expression • '-' multiplicative-expression
  800 shift-expression: additive-expression •

    '+'  shift, and go to state 583
    '-'  shift, and go to state 584

    $default  reduce using rule 800 (shift-expression)


State 286

   20 and-expression: and-expression • '&' equality-expression
  295 exclusive-or-expression: and-expression •

    '&'  shift, and go to state 585

    $default  reduce using rule 295 (exclusive-or-expression)


State 287

  316 expression: assignment-expression •

    $default  reduce using rule 316 (expression)


State 288

  934 unary-expression: await-expression •

    $default  reduce using rule 934 (unary-expression)


State 289

   89 binary-literal: binary-literal • apostrophe-opt binary-digit
  463 integer-literal: binary-literal • integer-suffix-opt
  970 user-defined-integer-literal: binary-literal • ud-suffix

    IDENTIFIER  shift, and go to state 586
    LL          shift, and go to state 587
    '\''        shift, and go to state 588
    'u'         shift, and go to state 589
    'U'         shift, and go to state 590
    'L'         shift, and go to state 591
    'l'         shift, and go to state 592
    "ll"        shift, and go to state 593
    'z'         shift, and go to state 594
    'Z'         shift, and go to state 595

    IDENTIFIER  [reduce using rule 473 (integer-suffix-opt)]
    '0'         reduce using rule 21 (apostrophe-opt)
    '1'         reduce using rule 21 (apostrophe-opt)
    $default    reduce using rule 473 (integer-suffix-opt)

    apostrophe-opt      go to state 596
    integer-suffix      go to state 597
    integer-suffix-opt  go to state 598
    long-long-suffix    go to state 599
    long-suffix         go to state 600
    size-suffix         go to state 601
    ud-suffix           go to state 602
    unsigned-suffix     go to state 603


State 290

  504 literal: boolean-literal •

    $default  reduce using rule 504 (literal)


State 291

  705 pm-expression: cast-expression •

    $default  reduce using rule 705 (pm-expression)


State 292

  501 literal: character-literal •
  962 user-defined-character-literal: character-literal • ud-suffix

    IDENTIFIER  shift, and go to state 586

    IDENTIFIER  [reduce using rule 501 (literal)]
    $default    reduce using rule 501 (literal)

    ud-suffix  go to state 604


State 293

  140 compare-expression: compare-expression • "<=>" shift-expression
  764 relational-expression: compare-expression •

    "<=>"  shift, and go to state 605

    $default  reduce using rule 764 (relational-expression)


State 294

   24 assignment-expression: conditional-expression •

    $default  reduce using rule 24 (assignment-expression)


State 295

  953 unqualified-id: conversion-function-id •

    $default  reduce using rule 953 (unqualified-id)


State 296

  326 floating-point-literal: decimal-floating-point-literal •

    $default  reduce using rule 326 (floating-point-literal)


State 297

  185 decimal-literal: decimal-literal • apostrophe-opt digit
  465 integer-literal: decimal-literal • integer-suffix-opt
  967 user-defined-integer-literal: decimal-literal • ud-suffix

    IDENTIFIER  shift, and go to state 586
    LL          shift, and go to state 587
    '\''        shift, and go to state 588
    'u'         shift, and go to state 589
    'U'         shift, and go to state 590
    'L'         shift, and go to state 591
    'l'         shift, and go to state 592
    "ll"        shift, and go to state 593
    'z'         shift, and go to state 594
    'Z'         shift, and go to state 595

    IDENTIFIER  [reduce using rule 473 (integer-suffix-opt)]
    '0'         reduce using rule 21 (apostrophe-opt)
    '1'         reduce using rule 21 (apostrophe-opt)
    '2'         reduce using rule 21 (apostrophe-opt)
    '3'         reduce using rule 21 (apostrophe-opt)
    '4'         reduce using rule 21 (apostrophe-opt)
    '5'         reduce using rule 21 (apostrophe-opt)
    '6'         reduce using rule 21 (apostrophe-opt)
    '7'         reduce using rule 21 (apostrophe-opt)
    '8'         reduce using rule 21 (apostrophe-opt)
    '9'         reduce using rule 21 (apostrophe-opt)
    $default    reduce using rule 473 (integer-suffix-opt)

    apostrophe-opt      go to state 606
    integer-suffix      go to state 597
    integer-suffix-opt  go to state 607
    long-long-suffix    go to state 599
    long-suffix         go to state 600
    size-suffix         go to state 601
    ud-suffix           go to state 608
    unsigned-suffix     go to state 603


State 298

  941 unary-expression: delete-expression •

    $default  reduce using rule 941 (unary-expression)


State 299

  244 digit-sequence: digit •

    $default  reduce using rule 244 (digit-sequence)


State 300

  183 decimal-floating-point-literal: digit-sequence • exponent-part floating-point-suffix-opt
  245 digit-sequence: digit-sequence • apostrophe-opt digit
  247 digit-sequence-opt: digit-sequence •
  373 fractional-constant: digit-sequence • '.'
  964 user-defined-floating-point-literal: digit-sequence • exponent-part ud-suffix

    '\''  shift, and go to state 588
    '.'   shift, and go to state 609
    'e'   shift, and go to state 610
    'E'   shift, and go to state 611

    '.'       [reduce using rule 247 (digit-sequence-opt)]
    $default  reduce using rule 21 (apostrophe-opt)

    apostrophe-opt  go to state 612
    exponent-part   go to state 613


State 301

  372 fractional-constant: digit-sequence-opt • '.' digit-sequence

    '.'  shift, and go to state 614


State 302

  121 character-literal: encoding-prefix-opt • '\'' c-char-sequence '\''
  869 string-literal: encoding-prefix-opt • '"' s-char-sequence-opt '"'
  870               | encoding-prefix-opt • 'R' raw-string

    '\''  shift, and go to state 615
    '"'   shift, and go to state 358
    'R'   shift, and go to state 359


State 303

   19 and-expression: equality-expression •
  285 equality-expression: equality-expression • "==" relational-expression
  286                    | equality-expression • "!=" relational-expression

    "=="  shift, and go to state 616
    "!="  shift, and go to state 617

    $default  reduce using rule 19 (and-expression)


State 304

  296 exclusive-or-expression: exclusive-or-expression • '^' and-expression
  438 inclusive-or-expression: exclusive-or-expression •

    '^'  shift, and go to state 618

    $default  reduce using rule 438 (inclusive-or-expression)


State 305

  220 decltype-specifier: "decltype" '(' expression • ')'
  317 expression: expression • ',' assignment-expression

    ')'  shift, and go to state 619
    ','  shift, and go to state 620


State 306

  502 literal: floating-point-literal •

    $default  reduce using rule 502 (literal)


State 307

  731 primary-expression: fold-expression •

    $default  reduce using rule 731 (primary-expression)


State 308

  182 decimal-floating-point-literal: fractional-constant • exponent-part-opt floating-point-suffix-opt
  963 user-defined-floating-point-literal: fractional-constant • exponent-part-opt ud-suffix

    'e'  shift, and go to state 610
    'E'  shift, and go to state 611

    $default  reduce using rule 305 (exponent-part-opt)

    exponent-part      go to state 621
    exponent-part-opt  go to state 622


State 309

  327 floating-point-literal: hexadecimal-floating-point-literal •

    $default  reduce using rule 327 (floating-point-literal)


State 310

  466 integer-literal: hexadecimal-literal • integer-suffix-opt
  969 user-defined-integer-literal: hexadecimal-literal • ud-suffix

    IDENTIFIER  shift, and go to state 586
    LL          shift, and go to state 587
    'u'         shift, and go to state 589
    'U'         shift, and go to state 590
    'L'         shift, and go to state 591
    'l'         shift, and go to state 592
    "ll"        shift, and go to state 593
    'z'         shift, and go to state 594
    'Z'         shift, and go to state 595

    IDENTIFIER  [reduce using rule 473 (integer-suffix-opt)]
    $default    reduce using rule 473 (integer-suffix-opt)

    integer-suffix      go to state 597
    integer-suffix-opt  go to state 623
    long-long-suffix    go to state 599
    long-suffix         go to state 600
    size-suffix         go to state 601
    ud-suffix           go to state 624
    unsigned-suffix     go to state 603


State 311

  425 hexadecimal-floating-point-literal: hexadecimal-prefix • hexadecimal-fractional-constant binary-exponent-part floating-point-suffix-opt
  426                                   | hexadecimal-prefix • hexadecimal-digit-sequence binary-exponent-part floating-point-suffix-opt
  429 hexadecimal-literal: hexadecimal-prefix • hexadecimal-digit-sequence
  965 user-defined-floating-point-literal: hexadecimal-prefix • hexadecimal-fractional-constant binary-exponent-part ud-suffix
  966                                    | hexadecimal-prefix • hexadecimal-digit-sequence binary-exponent-part ud-suffix

    '0'  shift, and go to state 625
    '1'  shift, and go to state 626
    '2'  shift, and go to state 627
    '3'  shift, and go to state 628
    '4'  shift, and go to state 629
    '5'  shift, and go to state 630
    '6'  shift, and go to state 631
    '7'  shift, and go to state 632
    '8'  shift, and go to state 633
    '9'  shift, and go to state 634
    'e'  shift, and go to state 635
    'E'  shift, and go to state 636
    'f'  shift, and go to state 637
    'F'  shift, and go to state 638
    'a'  shift, and go to state 639
    'b'  shift, and go to state 640
    'c'  shift, and go to state 641
    'd'  shift, and go to state 642
    'A'  shift, and go to state 643
    'B'  shift, and go to state 644
    'C'  shift, and go to state 645
    'D'  shift, and go to state 646

    $default  reduce using rule 421 (hexadecimal-digit-sequence-opt)

    hexadecimal-digit                go to state 647
    hexadecimal-digit-sequence       go to state 648
    hexadecimal-digit-sequence-opt   go to state 649
    hexadecimal-fractional-constant  go to state 650


State 312

  729 primary-expression: id-expression •

    $default  reduce using rule 729 (primary-expression)


State 313

  439 inclusive-or-expression: inclusive-or-expression • '|' exclusive-or-expression
  509 logical-and-expression: inclusive-or-expression •

    '|'  shift, and go to state 651

    $default  reduce using rule 509 (logical-and-expression)


State 314

  500 literal: integer-literal •

    $default  reduce using rule 500 (literal)


State 315

  730 primary-expression: lambda-expression •

    $default  reduce using rule 730 (primary-expression)


State 316

  494 lambda-expression: lambda-introducer • lambda-declarator compound-statement
  495                  | lambda-introducer • '<' template-parameter-list '>' requires-clause-opt lambda-declarator compound-statement

    IDENTIFIER      shift, and go to state 1
    '('             shift, and go to state 652
    "::"            shift, and go to state 4
    "virtual"       shift, and go to state 5
    "class"         shift, and go to state 6
    "struct"        shift, and go to state 7
    "union"         shift, and go to state 8
    "constexpr"     shift, and go to state 10
    "const"         shift, and go to state 11
    "volatile"      shift, and go to state 12
    "friend"        shift, and go to state 13
    "typedef"       shift, and go to state 14
    "consteval"     shift, and go to state 15
    "constinit"     shift, and go to state 16
    "inline"        shift, and go to state 159
    "decltype"      shift, and go to state 18
    "enum"          shift, and go to state 19
    '<'             shift, and go to state 653
    "explicit"      shift, and go to state 20
    "extern"        shift, and go to state 160
    "char"          shift, and go to state 27
    "char8_t"       shift, and go to state 28
    "char16_t"      shift, and go to state 29
    "char32_t"      shift, and go to state 30
    "wchar_t"       shift, and go to state 31
    "bool"          shift, and go to state 32
    "short"         shift, and go to state 33
    "int"           shift, and go to state 34
    "long"          shift, and go to state 35
    "signed"        shift, and go to state 36
    "unsigned"      shift, and go to state 37
    "float"         shift, and go to state 38
    "double"        shift, and go to state 39
    "void"          shift, and go to state 40
    "static"        shift, and go to state 42
    "thread_local"  shift, and go to state 43
    "mutable"       shift, and go to state 44
    "typename"      shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 197 (decl-specifier-seq-opt)

    class-head                  go to state 52
    class-key                   go to state 53
    class-name                  go to state 54
    class-specifier             go to state 55
    cv-qualifier                go to state 56
    decl-specifier              go to state 57
    decl-specifier-seq          go to state 654
    decl-specifier-seq-opt      go to state 655
    decltype-specifier          go to state 62
    defining-type-specifier     go to state 64
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-head                   go to state 68
    enum-key                    go to state 162
    enum-name                   go to state 70
    enum-specifier              go to state 71
    explicit-specifier          go to state 163
    function-specifier          go to state 79
    lambda-declarator           go to state 656
    lambda-specifiers           go to state 657
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    storage-class-specifier     go to state 100
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 108
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 317

  726 primary-expression: literal •

    $default  reduce using rule 726 (primary-expression)


State 318

  883 template-id: literal-operator-id • '<' template-argument-list-opt '>'
  954 unqualified-id: literal-operator-id •

    '<'  shift, and go to state 658

    '<'       [reduce using rule 954 (unqualified-id)]
    $default  reduce using rule 954 (unqualified-id)


State 319

  510 logical-and-expression: logical-and-expression • "&&" inclusive-or-expression
  511 logical-or-expression: logical-and-expression •

    "&&"  shift, and go to state 659

    $default  reduce using rule 511 (logical-or-expression)


State 320

   27 assignment-expression: logical-or-expression • assignment-operator initializer-clause
  151 conditional-expression: logical-or-expression •
  152                       | logical-or-expression • '?' expression ':' assignment-expression
  512 logical-or-expression: logical-or-expression • "||" logical-and-expression

    '='    shift, and go to state 660
    "*="   shift, and go to state 661
    "/="   shift, and go to state 662
    "%="   shift, and go to state 663
    "+="   shift, and go to state 664
    "-="   shift, and go to state 665
    ">>="  shift, and go to state 666
    "<<="  shift, and go to state 667
    "&="   shift, and go to state 668
    "^="   shift, and go to state 669
    "|="   shift, and go to state 670
    '?'    shift, and go to state 671
    "||"   shift, and go to state 672

    '='       [reduce using rule 151 (conditional-expression)]
    $default  reduce using rule 151 (conditional-expression)

    assignment-operator  go to state 673


State 321

   13 additive-expression: multiplicative-expression •
  563 multiplicative-expression: multiplicative-expression • '*' pm-expression
  564                          | multiplicative-expression • '/' pm-expression
  565                          | multiplicative-expression • '%' pm-expression

    '*'  shift, and go to state 674
    '/'  shift, and go to state 675
    '%'  shift, and go to state 676

    $default  reduce using rule 13 (additive-expression)


State 322

  579 nested-name-specifier: nested-name-specifier • IDENTIFIER "::"
  580                      | nested-name-specifier • template-opt simple-template-id "::"
  582 nested-name-specifier-opt: nested-name-specifier •
  752 qualified-id: nested-name-specifier • template-opt unqualified-id
  829 simple-type-specifier: nested-name-specifier • "template" simple-template-id

    IDENTIFIER  shift, and go to state 208
    "template"  shift, and go to state 209

    IDENTIFIER  [reduce using rule 582 (nested-name-specifier-opt)]
    IDENTIFIER  [reduce using rule 885 (template-opt)]
    $default    reduce using rule 885 (template-opt)

    template-opt  go to state 677


State 323

  940 unary-expression: new-expression •

    $default  reduce using rule 940 (unary-expression)


State 324

  939 unary-expression: noexcept-expression •

    $default  reduce using rule 939 (unary-expression)


State 325

  184 decimal-literal: nonzero-digit •

    $default  reduce using rule 184 (decimal-literal)


State 326

  464 integer-literal: octal-literal • integer-suffix-opt
  644 octal-literal: octal-literal • apostrophe-opt octal-digit
  968 user-defined-integer-literal: octal-literal • ud-suffix

    IDENTIFIER  shift, and go to state 586
    LL          shift, and go to state 587
    '\''        shift, and go to state 588
    'u'         shift, and go to state 589
    'U'         shift, and go to state 590
    'L'         shift, and go to state 591
    'l'         shift, and go to state 592
    "ll"        shift, and go to state 593
    'z'         shift, and go to state 594
    'Z'         shift, and go to state 595

    IDENTIFIER  [reduce using rule 473 (integer-suffix-opt)]
    '0'         reduce using rule 21 (apostrophe-opt)
    '1'         reduce using rule 21 (apostrophe-opt)
    '2'         reduce using rule 21 (apostrophe-opt)
    '3'         reduce using rule 21 (apostrophe-opt)
    '4'         reduce using rule 21 (apostrophe-opt)
    '5'         reduce using rule 21 (apostrophe-opt)
    '6'         reduce using rule 21 (apostrophe-opt)
    '7'         reduce using rule 21 (apostrophe-opt)
    $default    reduce using rule 473 (integer-suffix-opt)

    apostrophe-opt      go to state 678
    integer-suffix      go to state 597
    integer-suffix-opt  go to state 679
    long-long-suffix    go to state 599
    long-suffix         go to state 600
    size-suffix         go to state 601
    ud-suffix           go to state 680
    unsigned-suffix     go to state 603


State 327

  882 template-id: operator-function-id • '<' template-argument-list-opt '>'
  952 unqualified-id: operator-function-id •

    '<'  shift, and go to state 681

    '<'       [reduce using rule 952 (unqualified-id)]
    $default  reduce using rule 952 (unqualified-id)


State 328

  562 multiplicative-expression: pm-expression •
  706 pm-expression: pm-expression • ".*" cast-expression
  707              | pm-expression • "->*" cast-expression

    ".*"   shift, and go to state 682
    "->*"  shift, and go to state 683

    $default  reduce using rule 562 (multiplicative-expression)


State 329

  505 literal: pointer-literal •

    $default  reduce using rule 505 (literal)


State 330

  710 postfix-expression: postfix-expression • '[' expression-list-opt ']'
  711                   | postfix-expression • '(' expression-list-opt ')'
  716                   | postfix-expression • '.' template-opt id-expression
  717                   | postfix-expression • "->" template-opt id-expression
  718                   | postfix-expression • "++"
  719                   | postfix-expression • "--"
  930 unary-expression: postfix-expression •

    '('   shift, and go to state 684
    '['   shift, and go to state 685
    "->"  shift, and go to state 686
    '.'   shift, and go to state 687
    "++"  shift, and go to state 688
    "--"  shift, and go to state 689

    $default  reduce using rule 930 (unary-expression)


State 331

  709 postfix-expression: primary-expression •

    $default  reduce using rule 709 (postfix-expression)


State 332

  433 id-expression: qualified-id •

    $default  reduce using rule 433 (id-expression)


State 333

  284 equality-expression: relational-expression •
  765 relational-expression: relational-expression • '<' compare-expression
  766                      | relational-expression • '>' compare-expression
  767                      | relational-expression • "<=" compare-expression
  768                      | relational-expression • ">=" compare-expression

    '<'   shift, and go to state 690
    '>'   shift, and go to state 691
    "<="  shift, and go to state 692
    ">="  shift, and go to state 693

    '>'       [reduce using rule 284 (equality-expression)]
    $default  reduce using rule 284 (equality-expression)


State 334

  732 primary-expression: requires-expression •

    $default  reduce using rule 732 (primary-expression)


State 335

  228 delete-expression: scope-opt • "delete" cast-expression
  229                  | scope-opt • "delete" '[' ']' cast-expression
  589 new-expression: scope-opt • "new" new-placement-opt new-type-id new-initializer-opt
  590               | scope-opt • "new" new-placement-opt '(' type-id ')' new-initializer-opt

    "delete"  shift, and go to state 694
    "new"     shift, and go to state 695


State 336

  139 compare-expression: shift-expression •
  801 shift-expression: shift-expression • "<<" additive-expression
  802                 | shift-expression • ">>" additive-expression

    "<<"  shift, and go to state 696
    ">>"  shift, and go to state 697

    $default  reduce using rule 139 (compare-expression)


State 337

  129 class-name: simple-template-id •
  881 template-id: simple-template-id •
  924 typedef-name: simple-template-id •

    "::"      reduce using rule 129 (class-name)
    "::"      [reduce using rule 881 (template-id)]
    "::"      [reduce using rule 924 (typedef-name)]
    $default  reduce using rule 881 (template-id)


State 338

  712 postfix-expression: simple-type-specifier • '(' expression-list-opt ')'
  714                   | simple-type-specifier • braced-init-list

    '('  shift, and go to state 698
    '{'  shift, and go to state 435

    braced-init-list  go to state 699


State 339

  503 literal: string-literal •
  975 user-defined-string-literal: string-literal • ud-suffix

    IDENTIFIER  shift, and go to state 586

    IDENTIFIER  [reduce using rule 503 (literal)]
    $default    reduce using rule 503 (literal)

    ud-suffix  go to state 700


State 340

  957 unqualified-id: template-id •

    $default  reduce using rule 957 (unqualified-id)


State 341

   26 assignment-expression: throw-expression •

    $default  reduce using rule 26 (assignment-expression)


State 342

  713 postfix-expression: typename-specifier • '(' expression-list-opt ')'
  715                   | typename-specifier • braced-init-list

    '('  shift, and go to state 701
    '{'  shift, and go to state 435

    braced-init-list  go to state 702


State 343

  119 cast-expression: unary-expression •

    $default  reduce using rule 119 (cast-expression)


State 344

  931 unary-expression: unary-operator • cast-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 703
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 345

  432 id-expression: unqualified-id •

    $default  reduce using rule 432 (id-expression)


State 346

  974 user-defined-literal: user-defined-character-literal •

    $default  reduce using rule 974 (user-defined-literal)


State 347

  972 user-defined-literal: user-defined-floating-point-literal •

    $default  reduce using rule 972 (user-defined-literal)


State 348

  971 user-defined-literal: user-defined-integer-literal •

    $default  reduce using rule 971 (user-defined-literal)


State 349

  506 literal: user-defined-literal •

    $default  reduce using rule 506 (literal)


State 350

  973 user-defined-literal: user-defined-string-literal •

    $default  reduce using rule 973 (user-defined-literal)


State 351

   25 assignment-expression: yield-expression •

    $default  reduce using rule 25 (assignment-expression)


State 352

  886 template-opt: "template" •

    $default  reduce using rule 886 (template-opt)


State 353

  250 elaborated-enum-specifier: "enum" nested-name-specifier-opt IDENTIFIER •

    $default  reduce using rule 250 (elaborated-enum-specifier)


State 354

  153 constant-expression: conditional-expression •

    $default  reduce using rule 153 (constant-expression)


State 355

  299 explicit-specifier: "explicit" '(' constant-expression • ')'

    ')'  shift, and go to state 704


State 356

  151 conditional-expression: logical-or-expression •
  152                       | logical-or-expression • '?' expression ':' assignment-expression
  512 logical-or-expression: logical-or-expression • "||" logical-and-expression

    '?'   shift, and go to state 671
    "||"  shift, and go to state 672

    $default  reduce using rule 151 (conditional-expression)


State 357

  308 export-declaration: "export" '{' declaration-seq-opt • '}'

    '}'  shift, and go to state 705


State 358

  869 string-literal: encoding-prefix-opt '"' • s-char-sequence-opt '"'

    EXCEPT_THE_QUOTATION_MARK_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER  shift, and go to state 706
    '\\'                                                             shift, and go to state 707
    "\\x"                                                            shift, and go to state 708
    "\\u"                                                            shift, and go to state 709
    "\\U"                                                            shift, and go to state 710

    $default  reduce using rule 791 (s-char-sequence-opt)

    basic-s-char                 go to state 711
    conditional-escape-sequence  go to state 712
    escape-sequence              go to state 713
    hexadecimal-escape-sequence  go to state 714
    numeric-escape-sequence      go to state 715
    octal-escape-sequence        go to state 716
    s-char                       go to state 717
    s-char-sequence              go to state 718
    s-char-sequence-opt          go to state 719
    simple-escape-sequence       go to state 720
    universal-character-name     go to state 721


State 359

  870 string-literal: encoding-prefix-opt 'R' • raw-string

    '"'  shift, and go to state 722

    raw-string  go to state 723


State 360

  498 linkage-specification: "extern" string-literal '{' • declaration-seq-opt '}'

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    '}'             reduce using rule 214 (declaration-seq-opt)
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"      [reduce using rule 324 (extern-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "namespace"     [reduce using rule 461 (inline-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 59
    declaration-seq                  go to state 60
    declaration-seq-opt              go to state 724
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 361

  499 linkage-specification: "extern" string-literal declaration •

    $default  reduce using rule 499 (linkage-specification)


State 362

  383 global-module-fragment: "module-keyword" ';' declaration-seq-opt •

    $default  reduce using rule 383 (global-module-fragment)


State 363

  555 module-name-qualifier: IDENTIFIER '.' •

    $default  reduce using rule 555 (module-name-qualifier)


State 364

  559 module-partition: ':' module-name-qualifier-opt • IDENTIFIER

    IDENTIFIER  shift, and go to state 725


State 365

  391 header-name: '<' "h-char-sequence" • '>'

    '>'  shift, and go to state 726


State 366

  395 header-name: "h-char-sequence" h-char •

    $default  reduce using rule 395 (header-name)


State 367

  749 q-char: EXCEPT_NEW_LINE_AND_QUOTATION_MARK •

    $default  reduce using rule 749 (q-char)


State 368

  750 q-char-sequence: q-char •

    $default  reduce using rule 750 (q-char-sequence)


State 369

  392 header-name: '"' q-char-sequence • '"'
  751 q-char-sequence: q-char-sequence • q-char

    EXCEPT_NEW_LINE_AND_QUOTATION_MARK  shift, and go to state 367
    '"'                                 shift, and go to state 727

    q-char  go to state 728


State 370

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  553 module-import-declaration: "import-keyword" header-name attribute-specifier-seq-opt • ';'

    ';'        shift, and go to state 729
    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 371

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  551 module-import-declaration: "import-keyword" module-name attribute-specifier-seq-opt • ';'

    ';'        shift, and go to state 730
    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 372

  556 module-name-qualifier: module-name-qualifier IDENTIFIER • '.'

    '.'  shift, and go to state 731


State 373

  554 module-name: module-name-qualifier-opt IDENTIFIER •

    $default  reduce using rule 554 (module-name)


State 374

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  552 module-import-declaration: "import-keyword" module-partition attribute-specifier-seq-opt • ';'

    ';'        shift, and go to state 732
    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 375

  568 namespace-alias-definition: "namespace" IDENTIFIER '=' • qualified-namespace-specifier ';'

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]

    class-name                     go to state 54
    decltype-specifier             go to state 126
    enum-name                      go to state 70
    namespace-alias                go to state 86
    namespace-name                 go to state 89
    nested-name-specifier          go to state 127
    nested-name-specifier-opt      go to state 733
    qualified-namespace-specifier  go to state 734
    simple-template-id             go to state 97
    template-name                  go to state 103
    type-name                      go to state 107
    typedef-name                   go to state 109


State 376

  257 enclosing-namespace-specifier: enclosing-namespace-specifier "::" • inline-opt IDENTIFIER
  583 nested-namespace-definition: "namespace" enclosing-namespace-specifier "::" • inline-opt IDENTIFIER '{' namespace-body '}'

    "inline"  shift, and go to state 735

    $default  reduce using rule 461 (inline-opt)

    inline-opt  go to state 736


State 377

  863 static_assert-declaration: "static_assert" '(' constant-expression • ')' ';'
  864                          | "static_assert" '(' constant-expression • ',' string-literal ')' ';'

    ')'  shift, and go to state 737
    ','  shift, and go to state 738


State 378

  579 nested-name-specifier: nested-name-specifier IDENTIFIER • "::"
  927 typename-specifier: "typename" nested-name-specifier IDENTIFIER •

    "::"  shift, and go to state 457

    "::"      [reduce using rule 927 (typename-specifier)]
    $default  reduce using rule 927 (typename-specifier)


State 379

  580 nested-name-specifier: nested-name-specifier template-opt • simple-template-id "::"
  928 typename-specifier: "typename" nested-name-specifier template-opt • simple-template-id

    IDENTIFIER  shift, and go to state 200

    simple-template-id  go to state 739
    template-name       go to state 103


State 380

  445 init-declarator-list: init-declarator-list • ',' init-declarator
  812 simple-declaration: attribute-specifier-seq decl-specifier-seq init-declarator-list • ';'

    ';'  shift, and go to state 740
    ','  shift, and go to state 442


State 381

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  267 enum-head: enum-key attribute-specifier-seq-opt • enum-head-name-opt enum-base-opt

    IDENTIFIER  shift, and go to state 1
    "alignas"   shift, and go to state 165
    "::"        shift, and go to state 4
    '['         shift, and go to state 170
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    $default    reduce using rule 269 (enum-head-name-opt)

    alignment-specifier        go to state 173
    attribute-specifier        go to state 174
    class-name                 go to state 54
    decltype-specifier         go to state 126
    enum-head-name             go to state 741
    enum-head-name-opt         go to state 450
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 127
    nested-name-specifier-opt  go to state 451
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 382

  980 using-directive: attribute-specifier-seq-opt "using" "namespace" • nested-name-specifier-opt namespace-name ';'

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]

    class-name                 go to state 54
    decltype-specifier         go to state 126
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 127
    nested-name-specifier-opt  go to state 742
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 383

   17 alignment-specifier: "alignas" '(' • type-id eclipse-opt ')'
   18                    | "alignas" '(' • constant-expression eclipse-opt ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 116
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-key                            go to state 463
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 743
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-id                              go to state 744
    type-name                            go to state 107
    type-specifier                       go to state 471
    type-specifier-seq                   go to state 472
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 384

  625 noptr-declarator: noptr-declarator • parameters-and-qualifiers
  626                 | noptr-declarator • '[' constant-expression-opt ']' attribute-specifier-seq-opt
  740 ptr-declarator: noptr-declarator •

    '('  shift, and go to state 402
    '['  shift, and go to state 403

    '('       [reduce using rule 740 (ptr-declarator)]
    $default  reduce using rule 740 (ptr-declarator)

    parameters-and-qualifiers  go to state 745


State 385

  627 noptr-declarator: '(' ptr-declarator • ')'

    ')'  shift, and go to state 746


State 386

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  743 ptr-operator: '&' attribute-specifier-seq-opt •

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    "alignas"  [reduce using rule 743 (ptr-operator)]
    '['        [reduce using rule 743 (ptr-operator)]
    $default   reduce using rule 743 (ptr-operator)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 387

   23 asm-declaration: attribute-specifier-seq-opt "asm" '(' • string-literal ')' ';'

    "u8"  shift, and go to state 133
    'u'   shift, and go to state 134
    'U'   shift, and go to state 135
    'L'   shift, and go to state 136

    $default  reduce using rule 262 (encoding-prefix-opt)

    encoding-prefix      go to state 137
    encoding-prefix-opt  go to state 138
    string-literal       go to state 747


State 388

   54 attribute-specifier: '[' '[' • attribute-using-prefix-opt attribute-list ']' ']'

    "using"  shift, and go to state 748

    $default  reduce using rule 62 (attribute-using-prefix-opt)

    attribute-using-prefix      go to state 749
    attribute-using-prefix-opt  go to state 750


State 389

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  744 ptr-operator: "&&" attribute-specifier-seq-opt •

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    "alignas"  [reduce using rule 744 (ptr-operator)]
    '['        [reduce using rule 744 (ptr-operator)]
    $default   reduce using rule 744 (ptr-operator)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 390

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  742 ptr-operator: '*' attribute-specifier-seq-opt • cv-qualifier-seq-opt

    "alignas"   shift, and go to state 165
    '['         shift, and go to state 170
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12

    "alignas"   [reduce using rule 175 (cv-qualifier-seq-opt)]
    '['         [reduce using rule 175 (cv-qualifier-seq-opt)]
    "const"     [reduce using rule 175 (cv-qualifier-seq-opt)]
    "volatile"  [reduce using rule 175 (cv-qualifier-seq-opt)]
    $default    reduce using rule 175 (cv-qualifier-seq-opt)

    alignment-specifier   go to state 173
    attribute-specifier   go to state 174
    cv-qualifier          go to state 751
    cv-qualifier-seq      go to state 752
    cv-qualifier-seq-opt  go to state 753


State 391

  760 ref-qualifier: '&' •

    $default  reduce using rule 760 (ref-qualifier)


State 392

  761 ref-qualifier: "&&" •

    $default  reduce using rule 761 (ref-qualifier)


State 393

  763 ref-qualifier-opt: ref-qualifier •

    $default  reduce using rule 763 (ref-qualifier-opt)


State 394

  813 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt • '[' identifier-list ']' initializer ';'

    '['  shift, and go to state 754


State 395

  378 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator • virt-specifier-seq-opt function-body
  379                    | attribute-specifier-seq-opt decl-specifier-seq-opt declarator • requires-clause function-body

    "final"     shift, and go to state 755
    "requires"  shift, and go to state 436
    "override"  shift, and go to state 756

    $default  reduce using rule 986 (virt-specifier-seq-opt)

    requires-clause         go to state 757
    virt-specifier          go to state 758
    virt-specifier-seq      go to state 759
    virt-specifier-seq-opt  go to state 760


State 396

  599 nodeclspec-function-declaration: attribute-specifier-seq-opt declarator ';' •

    $default  reduce using rule 599 (nodeclspec-function-declaration)


State 397

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  624 noptr-declarator: declarator-id attribute-specifier-seq-opt •

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    '['       [reduce using rule 624 (noptr-declarator)]
    $default  reduce using rule 624 (noptr-declarator)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 398

  955 unqualified-id: '~' • type-name
  956               | '~' • decltype-specifier

    IDENTIFIER  shift, and go to state 565
    "decltype"  shift, and go to state 18

    class-name          go to state 54
    decltype-specifier  go to state 566
    enum-name           go to state 70
    simple-template-id  go to state 97
    template-name       go to state 103
    type-name           go to state 567
    typedef-name        go to state 109


State 399

  219 declarator-id: eclipse-opt id-expression •

    $default  reduce using rule 219 (declarator-id)


State 400

  579 nested-name-specifier: nested-name-specifier • IDENTIFIER "::"
  580                      | nested-name-specifier • template-opt simple-template-id "::"
  752 qualified-id: nested-name-specifier • template-opt unqualified-id

    IDENTIFIER  shift, and go to state 208
    "template"  shift, and go to state 352

    IDENTIFIER  [reduce using rule 885 (template-opt)]
    $default    reduce using rule 885 (template-opt)

    template-opt  go to state 677


State 401

  745 ptr-operator: nested-name-specifier '*' • attribute-specifier-seq-opt cv-qualifier-seq-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 761


State 402

  702 parameters-and-qualifiers: '(' • parameter-declaration-clause ')' cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt

    ')'       reduce using rule 700 (parameter-declaration-list-opt)
    "..."     reduce using rule 700 (parameter-declaration-list-opt)
    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq         go to state 185
    attribute-specifier-seq-opt     go to state 233
    parameter-declaration           go to state 762
    parameter-declaration-clause    go to state 763
    parameter-declaration-list      go to state 764
    parameter-declaration-list-opt  go to state 765


State 403

  626 noptr-declarator: noptr-declarator '[' • constant-expression-opt ']' attribute-specifier-seq-opt

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ']'         reduce using rule 154 (constant-expression-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 766
    constant-expression-opt              go to state 767
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 404

  218 declarator: noptr-declarator parameters-and-qualifiers • trailing-return-type
  625 noptr-declarator: noptr-declarator parameters-and-qualifiers •

    "->"  shift, and go to state 768

    $default  reduce using rule 625 (noptr-declarator)

    trailing-return-type  go to state 769


State 405

  741 ptr-declarator: ptr-operator ptr-declarator •

    $default  reduce using rule 741 (ptr-declarator)


State 406

    8 access-specifier: "private" •

    $default  reduce using rule 8 (access-specifier)


State 407

    9 access-specifier: "protected" •

    $default  reduce using rule 9 (access-specifier)


State 408

   10 access-specifier: "public" •

    $default  reduce using rule 10 (access-specifier)


State 409

  271 enum-key: "enum" •
  272         | "enum" • "class"
  273         | "enum" • "struct"

    "class"   shift, and go to state 124
    "struct"  shift, and go to state 125

    $default  reduce using rule 271 (enum-key)


State 410

  547 member-specification: access-specifier • ':' member-specification-opt

    ':'  shift, and go to state 770


State 411

  535 member-declaration: alias-declaration •

    $default  reduce using rule 535 (member-declaration)


State 412

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  378 function-definition: attribute-specifier-seq-opt • decl-specifier-seq-opt declarator virt-specifier-seq-opt function-body
  379                    | attribute-specifier-seq-opt • decl-specifier-seq-opt declarator requires-clause function-body
  527 member-declaration: attribute-specifier-seq-opt • decl-specifier-seq-opt member-declarator-list-opt ';'

    IDENTIFIER      shift, and go to state 1
    "alignas"       shift, and go to state 165
    "::"            shift, and go to state 4
    '['             shift, and go to state 170
    "virtual"       shift, and go to state 5
    "class"         shift, and go to state 6
    "struct"        shift, and go to state 7
    "union"         shift, and go to state 8
    "constexpr"     shift, and go to state 10
    "const"         shift, and go to state 11
    "volatile"      shift, and go to state 12
    "friend"        shift, and go to state 13
    "typedef"       shift, and go to state 14
    "consteval"     shift, and go to state 15
    "constinit"     shift, and go to state 16
    "inline"        shift, and go to state 159
    "decltype"      shift, and go to state 18
    "enum"          shift, and go to state 19
    "explicit"      shift, and go to state 20
    "extern"        shift, and go to state 160
    "char"          shift, and go to state 27
    "char8_t"       shift, and go to state 28
    "char16_t"      shift, and go to state 29
    "char32_t"      shift, and go to state 30
    "wchar_t"       shift, and go to state 31
    "bool"          shift, and go to state 32
    "short"         shift, and go to state 33
    "int"           shift, and go to state 34
    "long"          shift, and go to state 35
    "signed"        shift, and go to state 36
    "unsigned"      shift, and go to state 37
    "float"         shift, and go to state 38
    "double"        shift, and go to state 39
    "void"          shift, and go to state 40
    "static"        shift, and go to state 42
    "thread_local"  shift, and go to state 43
    "mutable"       shift, and go to state 44
    "typename"      shift, and go to state 45

    IDENTIFIER  [reduce using rule 197 (decl-specifier-seq-opt)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "alignas"   [reduce using rule 197 (decl-specifier-seq-opt)]
    "::"        [reduce using rule 197 (decl-specifier-seq-opt)]
    '['         [reduce using rule 197 (decl-specifier-seq-opt)]
    "decltype"  [reduce using rule 197 (decl-specifier-seq-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 197 (decl-specifier-seq-opt)

    alignment-specifier         go to state 173
    attribute-specifier         go to state 174
    class-head                  go to state 52
    class-key                   go to state 53
    class-name                  go to state 54
    class-specifier             go to state 55
    cv-qualifier                go to state 56
    decl-specifier              go to state 57
    decl-specifier-seq          go to state 654
    decl-specifier-seq-opt      go to state 771
    decltype-specifier          go to state 62
    defining-type-specifier     go to state 64
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-head                   go to state 68
    enum-key                    go to state 162
    enum-name                   go to state 70
    enum-specifier              go to state 71
    explicit-specifier          go to state 163
    function-specifier          go to state 79
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    storage-class-specifier     go to state 100
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 108
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 413

  534 member-declaration: deduction-guide •

    $default  reduce using rule 534 (member-declaration)


State 414

  537 member-declaration: empty-declaration •

    $default  reduce using rule 537 (member-declaration)


State 415

  645 opaque-enum-declaration: enum-key • attribute-specifier-seq-opt enum-head-name enum-base-opt ';'

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 772


State 416

  533 member-declaration: explicit-specialization •

    $default  reduce using rule 533 (member-declaration)


State 417

  302 explicit-specifier-opt: explicit-specifier •

    $default  reduce using rule 302 (explicit-specifier-opt)


State 418

  528 member-declaration: function-definition •

    $default  reduce using rule 528 (member-declaration)


State 419

  546 member-specification: member-declaration • member-specification-opt

    "private"        shift, and go to state 406
    "protected"      shift, and go to state 407
    "public"         shift, and go to state 408
    "using"          shift, and go to state 2
    ';'              shift, and go to state 3
    "template"       shift, and go to state 9
    "enum"           shift, and go to state 409
    "explicit"       shift, and go to state 20
    "static_assert"  shift, and go to state 41

    IDENTIFIER  reduce using rule 57 (attribute-specifier-seq-opt)
    IDENTIFIER  [reduce using rule 301 (explicit-specifier-opt)]
    ';'         [reduce using rule 57 (attribute-specifier-seq-opt)]
    '}'         reduce using rule 548 (member-specification-opt)
    "enum"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    access-specifier             go to state 410
    alias-declaration            go to state 411
    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 412
    deduction-guide              go to state 413
    empty-declaration            go to state 414
    enum-key                     go to state 415
    explicit-specialization      go to state 416
    explicit-specifier           go to state 417
    explicit-specifier-opt       go to state 75
    function-definition          go to state 418
    member-declaration           go to state 419
    member-specification         go to state 420
    member-specification-opt     go to state 773
    opaque-enum-declaration      go to state 422
    static_assert-declaration    go to state 423
    template-declaration         go to state 424
    template-head                go to state 102
    using-declaration            go to state 425
    using-enum-declaration       go to state 426


State 420

  549 member-specification-opt: member-specification •

    $default  reduce using rule 549 (member-specification-opt)


State 421

  133 class-specifier: class-head '{' member-specification-opt • '}'

    '}'  shift, and go to state 774


State 422

  536 member-declaration: opaque-enum-declaration •

    $default  reduce using rule 536 (member-declaration)


State 423

  531 member-declaration: static_assert-declaration •

    $default  reduce using rule 531 (member-declaration)


State 424

  532 member-declaration: template-declaration •

    $default  reduce using rule 532 (member-declaration)


State 425

  529 member-declaration: using-declaration •

    $default  reduce using rule 529 (member-declaration)


State 426

  530 member-declaration: using-enum-declaration •

    $default  reduce using rule 530 (member-declaration)


State 427

   73 base-clause: ':' • base-specifier-list

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 775
    base-specifier               go to state 776
    base-specifier-list          go to state 777


State 428

   75 base-clause-opt: base-clause •

    $default  reduce using rule 75 (base-clause-opt)


State 429

  123 class-head: class-key attribute-specifier-seq-opt base-clause-opt •

    $default  reduce using rule 123 (class-head)


State 430

  122 class-head: class-key attribute-specifier-seq-opt class-head-name • class-virt-specifier-opt base-clause-opt

    "final"  shift, and go to state 778

    $default  reduce using rule 135 (class-virt-specifier-opt)

    class-virt-specifier      go to state 779
    class-virt-specifier-opt  go to state 780


State 431

  124 class-head-name: nested-name-specifier-opt • class-name
  251 elaborated-type-specifier: class-key attribute-specifier-seq-opt nested-name-specifier-opt • IDENTIFIER

    IDENTIFIER  shift, and go to state 781

    class-name          go to state 782
    simple-template-id  go to state 783
    template-name       go to state 103


State 432

  253 elaborated-type-specifier: class-key nested-name-specifier template-opt • simple-template-id
  580 nested-name-specifier: nested-name-specifier template-opt • simple-template-id "::"

    IDENTIFIER  shift, and go to state 200

    simple-template-id  go to state 784
    template-name       go to state 103


State 433

  101 brace-or-equal-initializer: '=' • initializer-clause

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 787
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 434

  454 initializer: '(' • expression-list ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression-list                      go to state 788
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 789
    initializer-list                     go to state 790
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 435

  105 braced-init-list: '{' • initializer-list comma-opt '}'
  106                 | '{' • designated-initializer-list comma-opt '}'
  107                 | '{' • '}'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '}'                 shift, and go to state 791
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '.'                 shift, and go to state 792
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         [reduce using rule 246 (digit-sequence-opt)]
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    designated-initializer-clause        go to state 793
    designated-initializer-list          go to state 794
    designator                           go to state 795
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 789
    initializer-list                     go to state 796
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 436

  779 requires-clause: "requires" • constraint-logical-or-expression

    IDENTIFIER  shift, and go to state 242
    '('         shift, and go to state 797
    "::"        shift, and go to state 4
    '['         shift, and go to state 248
    '0'         shift, and go to state 250
    '1'         shift, and go to state 251
    "0b"        shift, and go to state 252
    "0B"        shift, and go to state 253
    "false"     shift, and go to state 254
    "true"      shift, and go to state 255
    "operator"  shift, and go to state 256
    "decltype"  shift, and go to state 18
    '2'         shift, and go to state 257
    '3'         shift, and go to state 258
    '4'         shift, and go to state 259
    '5'         shift, and go to state 260
    '6'         shift, and go to state 261
    '7'         shift, and go to state 262
    '8'         shift, and go to state 263
    '9'         shift, and go to state 264
    "u8"        shift, and go to state 133
    'u'         shift, and go to state 134
    'U'         shift, and go to state 135
    'L'         shift, and go to state 136
    "0x"        shift, and go to state 267
    "0X"        shift, and go to state 268
    "requires"  shift, and go to state 269
    '~'         shift, and go to state 398
    "nullptr"   shift, and go to state 274
    "this"      shift, and go to state 280

    '.'       reduce using rule 246 (digit-sequence-opt)
    $default  reduce using rule 262 (encoding-prefix-opt)

    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    character-literal                    go to state 292
    class-name                           go to state 54
    constraint-logical-and-expression    go to state 798
    constraint-logical-or-expression     go to state 799
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 126
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 400
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    pointer-literal                      go to state 329
    primary-expression                   go to state 800
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    simple-template-id                   go to state 337
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-name                            go to state 107
    typedef-name                         go to state 109
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 437

  453 initializer: brace-or-equal-initializer •

    $default  reduce using rule 453 (initializer)


State 438

  102 brace-or-equal-initializer: braced-init-list •

    $default  reduce using rule 102 (brace-or-equal-initializer)


State 439

  460 initializer-opt: initializer •

    $default  reduce using rule 460 (initializer-opt)


State 440

  442 init-declarator: declarator initializer-opt •

    $default  reduce using rule 442 (init-declarator)


State 441

  443 init-declarator: declarator requires-clause •

    $default  reduce using rule 443 (init-declarator)


State 442

  445 init-declarator-list: init-declarator-list ',' • init-declarator

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 166
    '&'         shift, and go to state 167
    "..."       shift, and go to state 169
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    "::"        [reduce using rule 248 (eclipse-opt)]
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 248 (eclipse-opt)

    class-name             go to state 54
    declarator             go to state 191
    declarator-id          go to state 178
    decltype-specifier     go to state 126
    eclipse-opt            go to state 179
    enum-name              go to state 70
    init-declarator        go to state 801
    namespace-alias        go to state 86
    namespace-name         go to state 89
    nested-name-specifier  go to state 195
    noptr-declarator       go to state 181
    ptr-declarator         go to state 182
    ptr-operator           go to state 183
    simple-template-id     go to state 97
    template-name          go to state 103
    type-name              go to state 107
    typedef-name           go to state 109


State 443

  811 simple-declaration: decl-specifier-seq init-declarator-list-opt ';' •

    $default  reduce using rule 811 (simple-declaration)


State 444

  277 enumerator: IDENTIFIER • attribute-specifier-seq-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 802


State 445

  278 enumerator-definition: enumerator •
  279                      | enumerator • '=' constant-expression

    '='  shift, and go to state 803

    $default  reduce using rule 278 (enumerator-definition)


State 446

  280 enumerator-list: enumerator-definition •

    $default  reduce using rule 280 (enumerator-list)


State 447

  276 enum-specifier: enum-head '{' enumerator-list • ',' '}'
  281 enumerator-list: enumerator-list • ',' enumerator-definition
  283 enumerator-list-opt: enumerator-list •

    ','  shift, and go to state 804

    $default  reduce using rule 283 (enumerator-list-opt)


State 448

  275 enum-specifier: enum-head '{' enumerator-list-opt • '}'

    '}'  shift, and go to state 805


State 449

  270 enum-head-name-opt: enum-head-name •
  645 opaque-enum-declaration: enum-key attribute-specifier-seq-opt enum-head-name • enum-base-opt ';'

    ':'  shift, and go to state 806

    ':'       [reduce using rule 270 (enum-head-name-opt)]
    '{'       reduce using rule 270 (enum-head-name-opt)
    $default  reduce using rule 265 (enum-base-opt)

    enum-base      go to state 807
    enum-base-opt  go to state 808


State 450

  267 enum-head: enum-key attribute-specifier-seq-opt enum-head-name-opt • enum-base-opt

    ':'  shift, and go to state 806

    $default  reduce using rule 265 (enum-base-opt)

    enum-base      go to state 807
    enum-base-opt  go to state 809


State 451

  268 enum-head-name: nested-name-specifier-opt • IDENTIFIER

    IDENTIFIER  shift, and go to state 810


State 452

  221 deduction-guide: explicit-specifier-opt template-name '(' • parameter-declaration-clause ')' "->" simple-template-id ';'

    ')'       reduce using rule 700 (parameter-declaration-list-opt)
    "..."     reduce using rule 700 (parameter-declaration-list-opt)
    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq         go to state 185
    attribute-specifier-seq-opt     go to state 233
    parameter-declaration           go to state 762
    parameter-declaration-clause    go to state 811
    parameter-declaration-list      go to state 764
    parameter-declaration-list-opt  go to state 765


State 453

  297 explicit-instantiation: extern-opt "template" declaration •

    $default  reduce using rule 297 (explicit-instantiation)


State 454

  550 module-declaration: export-keyword-opt "module-keyword" • module-name module-partition-opt attribute-specifier-seq-opt ';'

    IDENTIFIER  shift, and go to state 141

    IDENTIFIER  [reduce using rule 557 (module-name-qualifier-opt)]

    module-name                go to state 812
    module-name-qualifier      go to state 151
    module-name-qualifier-opt  go to state 152


State 455

  898 translation-unit: global-module-fragment-opt module-declaration declaration-seq-opt • private-module-fragment-opt

    "module-keyword"  shift, and go to state 813

    $default  reduce using rule 734 (private-module-fragment-opt)

    private-module-fragment      go to state 814
    private-module-fragment-opt  go to state 815


State 456

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  566 named-namespace-definition: inline-opt "namespace" attribute-specifier-seq-opt • IDENTIFIER '{' namespace-body '}'
  950 unnamed-namespace-definition: inline-opt "namespace" attribute-specifier-seq-opt • '{' namespace-body '}'

    IDENTIFIER  shift, and go to state 816
    "alignas"   shift, and go to state 165
    '['         shift, and go to state 170
    '{'         shift, and go to state 817

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 457

  579 nested-name-specifier: nested-name-specifier IDENTIFIER "::" •

    $default  reduce using rule 579 (nested-name-specifier)


State 458

  829 simple-type-specifier: nested-name-specifier "template" simple-template-id •

    $default  reduce using rule 829 (simple-type-specifier)


State 459

  580 nested-name-specifier: nested-name-specifier template-opt simple-template-id • "::"

    "::"  shift, and go to state 818


State 460

  901 type-constraint: nested-name-specifier-opt concept-name '<' • template-argument-list-opt '>'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 116
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    '>'         reduce using rule 876 (template-argument-list-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-key                            go to state 463
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 464
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 465
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    string-literal                       go to state 339
    template-argument                    go to state 467
    template-argument-list               go to state 468
    template-argument-list-opt           go to state 819
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-id                              go to state 470
    type-name                            go to state 107
    type-specifier                       go to state 471
    type-specifier-seq                   go to state 472
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 461

  144 concept-name: IDENTIFIER •

    $default  reduce using rule 144 (concept-name)


State 462

  143 concept-definition: "concept" concept-name • '=' constraint-expression ';'

    '='  shift, and go to state 820


State 463

  251 elaborated-type-specifier: class-key • attribute-specifier-seq-opt nested-name-specifier-opt IDENTIFIER
  252                          | class-key • simple-template-id
  253                          | class-key • nested-name-specifier template-opt simple-template-id

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 821
    class-name                   go to state 54
    decltype-specifier           go to state 126
    enum-name                    go to state 70
    namespace-alias              go to state 86
    namespace-name               go to state 89
    nested-name-specifier        go to state 187
    simple-template-id           go to state 188
    template-name                go to state 103
    type-name                    go to state 107
    typedef-name                 go to state 109


State 464

  871 template-argument: constant-expression •

    $default  reduce using rule 871 (template-argument)


State 465

  729 primary-expression: id-expression •
  873 template-argument: id-expression •

    ','       reduce using rule 729 (primary-expression)
    ','       [reduce using rule 873 (template-argument)]
    "..."     reduce using rule 729 (primary-expression)
    "..."     [reduce using rule 873 (template-argument)]
    '>'       reduce using rule 729 (primary-expression)
    '>'       [reduce using rule 873 (template-argument)]
    $default  reduce using rule 729 (primary-expression)


State 466

  712 postfix-expression: simple-type-specifier • '(' expression-list-opt ')'
  714                   | simple-type-specifier • braced-init-list
  917 type-specifier: simple-type-specifier •

    '('  shift, and go to state 698
    '{'  shift, and go to state 435

    '('       [reduce using rule 917 (type-specifier)]
    $default  reduce using rule 917 (type-specifier)

    braced-init-list  go to state 699


State 467

  874 template-argument-list: template-argument • eclipse-opt

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 822


State 468

  875 template-argument-list: template-argument-list • ',' template-argument eclipse-opt
  877 template-argument-list-opt: template-argument-list •

    ','  shift, and go to state 823

    $default  reduce using rule 877 (template-argument-list-opt)


State 469

  827 simple-template-id: template-name '<' template-argument-list-opt • '>'

    '>'  shift, and go to state 824


State 470

  872 template-argument: type-id •

    $default  reduce using rule 872 (template-argument)


State 471

  921 type-specifier-seq: type-specifier • attribute-specifier-seq-opt
  922                   | type-specifier • type-specifier-seq

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 116
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "::"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "enum"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"      reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"      [reduce using rule 902 (type-constraint-opt)]
    "char"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"   [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"   [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 825
    class-key                    go to state 463
    class-name                   go to state 54
    cv-qualifier                 go to state 56
    decltype-specifier           go to state 62
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-name                    go to state 70
    namespace-alias              go to state 86
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    placeholder-type-specifier   go to state 95
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 471
    type-specifier-seq           go to state 826
    typedef-name                 go to state 109
    typename-specifier           go to state 110


State 472

  904 type-id: type-specifier-seq • abstract-declarator-opt

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 827
    '&'         shift, and go to state 167
    "..."       shift, and go to state 828
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    '('       [reduce using rule 4 (abstract-declarator-opt)]
    '('       [reduce using rule 619 (noptr-abstract-declarator-opt)]
    "..."     [reduce using rule 4 (abstract-declarator-opt)]
    '['       reduce using rule 619 (noptr-abstract-declarator-opt)
    $default  reduce using rule 4 (abstract-declarator-opt)

    abstract-declarator             go to state 829
    abstract-declarator-opt         go to state 830
    abstract-pack-declarator        go to state 831
    class-name                      go to state 54
    decltype-specifier              go to state 126
    enum-name                       go to state 70
    namespace-alias                 go to state 86
    namespace-name                  go to state 89
    nested-name-specifier           go to state 195
    noptr-abstract-declarator       go to state 832
    noptr-abstract-declarator-opt   go to state 833
    noptr-abstract-pack-declarator  go to state 834
    ptr-abstract-declarator         go to state 835
    ptr-operator                    go to state 836
    simple-template-id              go to state 97
    template-name                   go to state 103
    type-name                       go to state 107
    typedef-name                    go to state 109


State 473

  713 postfix-expression: typename-specifier • '(' expression-list-opt ')'
  715                   | typename-specifier • braced-init-list
  919 type-specifier: typename-specifier •

    '('  shift, and go to state 701
    '{'  shift, and go to state 435

    '('       [reduce using rule 919 (type-specifier)]
    $default  reduce using rule 919 (type-specifier)

    braced-init-list  go to state 702


State 474

  704 placeholder-type-specifier: type-constraint-opt "decltype" '(' • "auto" ')'

    "auto"  shift, and go to state 837


State 475

   16 alias-declaration: "using" IDENTIFIER attribute-specifier-seq-opt '=' • defining-type-id ';'

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 19
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decltype-specifier           go to state 62
    defining-type-id             go to state 838
    defining-type-specifier      go to state 839
    defining-type-specifier-seq  go to state 840
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 162
    enum-name                    go to state 70
    enum-specifier               go to state 71
    namespace-alias              go to state 86
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    placeholder-type-specifier   go to state 95
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110


State 476

  579 nested-name-specifier: nested-name-specifier IDENTIFIER • "::"
  884 template-name: IDENTIFIER •
  951 unqualified-id: IDENTIFIER •

    "::"  shift, and go to state 457

    '<'       reduce using rule 884 (template-name)
    $default  reduce using rule 951 (unqualified-id)


State 477

  881 template-id: simple-template-id •

    $default  reduce using rule 881 (template-id)


State 478

  977 using-declarator: typename-opt nested-name-specifier unqualified-id •

    $default  reduce using rule 977 (using-declarator)


State 479

  979 using-declarator-list: using-declarator-list ',' using-declarator • eclipse-opt

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 841


State 480

  880 template-head: "template" '<' • template-parameter-list '>' requires-clause-opt

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 229
    "template"  shift, and go to state 230
    "decltype"  shift, and go to state 18
    "typename"  shift, and go to state 232

    IDENTIFIER  [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "::"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 233
    class-name                   go to state 54
    decltype-specifier           go to state 126
    enum-name                    go to state 70
    namespace-alias              go to state 86
    namespace-name               go to state 89
    nested-name-specifier        go to state 127
    nested-name-specifier-opt    go to state 234
    parameter-declaration        go to state 235
    simple-template-id           go to state 97
    template-head                go to state 236
    template-name                go to state 103
    template-parameter           go to state 237
    template-parameter-list      go to state 238
    type-constraint              go to state 239
    type-name                    go to state 107
    type-parameter               go to state 240
    type-parameter-key           go to state 241
    typedef-name                 go to state 109


State 481

  298 explicit-specialization: "template" '<' '>' declaration •

    $default  reduce using rule 298 (explicit-specialization)


State 482

  892 this-opt: "this" •

    $default  reduce using rule 892 (this-opt)


State 483

  692 parameter-declaration: attribute-specifier-seq-opt this-opt • decl-specifier-seq declarator
  693                      | attribute-specifier-seq-opt this-opt • decl-specifier-seq declarator '=' initializer-clause
  694                      | attribute-specifier-seq-opt this-opt • decl-specifier-seq abstract-declarator-opt
  695                      | attribute-specifier-seq-opt this-opt • decl-specifier-seq abstract-declarator-opt '=' initializer-clause

    IDENTIFIER      shift, and go to state 1
    "::"            shift, and go to state 4
    "virtual"       shift, and go to state 5
    "class"         shift, and go to state 6
    "struct"        shift, and go to state 7
    "union"         shift, and go to state 8
    "constexpr"     shift, and go to state 10
    "const"         shift, and go to state 11
    "volatile"      shift, and go to state 12
    "friend"        shift, and go to state 13
    "typedef"       shift, and go to state 14
    "consteval"     shift, and go to state 15
    "constinit"     shift, and go to state 16
    "inline"        shift, and go to state 159
    "decltype"      shift, and go to state 18
    "enum"          shift, and go to state 19
    "explicit"      shift, and go to state 20
    "extern"        shift, and go to state 160
    "char"          shift, and go to state 27
    "char8_t"       shift, and go to state 28
    "char16_t"      shift, and go to state 29
    "char32_t"      shift, and go to state 30
    "wchar_t"       shift, and go to state 31
    "bool"          shift, and go to state 32
    "short"         shift, and go to state 33
    "int"           shift, and go to state 34
    "long"          shift, and go to state 35
    "signed"        shift, and go to state 36
    "unsigned"      shift, and go to state 37
    "float"         shift, and go to state 38
    "double"        shift, and go to state 39
    "void"          shift, and go to state 40
    "static"        shift, and go to state 42
    "thread_local"  shift, and go to state 43
    "mutable"       shift, and go to state 44
    "typename"      shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    class-head                  go to state 52
    class-key                   go to state 53
    class-name                  go to state 54
    class-specifier             go to state 55
    cv-qualifier                go to state 56
    decl-specifier              go to state 57
    decl-specifier-seq          go to state 842
    decltype-specifier          go to state 62
    defining-type-specifier     go to state 64
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-head                   go to state 68
    enum-key                    go to state 162
    enum-name                   go to state 70
    enum-specifier              go to state 71
    explicit-specifier          go to state 163
    function-specifier          go to state 79
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    storage-class-specifier     go to state 100
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 108
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 484

  912 type-parameter: template-head type-parameter-key • eclipse-opt identifier-opt
  913               | template-head type-parameter-key • identifier-opt '=' id-expression

    IDENTIFIER  shift, and go to state 487
    "..."       shift, and go to state 169

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    '='         reduce using rule 436 (identifier-opt)
    $default    reduce using rule 248 (eclipse-opt)

    eclipse-opt     go to state 843
    identifier-opt  go to state 844


State 485

  890 template-parameter-list: template-parameter-list ',' • template-parameter

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 229
    "template"  shift, and go to state 230
    "decltype"  shift, and go to state 18
    "typename"  shift, and go to state 232

    IDENTIFIER  [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "::"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 233
    class-name                   go to state 54
    decltype-specifier           go to state 126
    enum-name                    go to state 70
    namespace-alias              go to state 86
    namespace-name               go to state 89
    nested-name-specifier        go to state 127
    nested-name-specifier-opt    go to state 234
    parameter-declaration        go to state 235
    simple-template-id           go to state 97
    template-head                go to state 236
    template-name                go to state 103
    template-parameter           go to state 845
    type-constraint              go to state 239
    type-name                    go to state 107
    type-parameter               go to state 240
    type-parameter-key           go to state 241
    typedef-name                 go to state 109


State 486

  880 template-head: "template" '<' template-parameter-list '>' • requires-clause-opt

    "requires"  shift, and go to state 436

    $default  reduce using rule 780 (requires-clause-opt)

    requires-clause      go to state 846
    requires-clause-opt  go to state 847


State 487

  437 identifier-opt: IDENTIFIER •

    $default  reduce using rule 437 (identifier-opt)


State 488

  910 type-parameter: type-constraint eclipse-opt • identifier-opt

    IDENTIFIER  shift, and go to state 487

    $default  reduce using rule 436 (identifier-opt)

    identifier-opt  go to state 848


State 489

  911 type-parameter: type-constraint identifier-opt • '=' type-id

    '='  shift, and go to state 849


State 490

  908 type-parameter: type-parameter-key eclipse-opt • identifier-opt

    IDENTIFIER  shift, and go to state 487

    $default  reduce using rule 436 (identifier-opt)

    identifier-opt  go to state 850


State 491

  909 type-parameter: type-parameter-key identifier-opt • '=' type-id

    '='  shift, and go to state 851


State 492

  335 fold-expression: '(' "..." • fold-operator cast-expression ')'

    '+'    shift, and go to state 852
    '-'    shift, and go to state 853
    '='    shift, and go to state 854
    '&'    shift, and go to state 855
    "*="   shift, and go to state 856
    "/="   shift, and go to state 857
    "%="   shift, and go to state 858
    "+="   shift, and go to state 859
    "-="   shift, and go to state 860
    ">>="  shift, and go to state 861
    "<<="  shift, and go to state 862
    "&="   shift, and go to state 863
    "^="   shift, and go to state 864
    "|="   shift, and go to state 865
    ','    shift, and go to state 866
    "&&"   shift, and go to state 867
    "||"   shift, and go to state 868
    "=="   shift, and go to state 869
    "!="   shift, and go to state 870
    '^'    shift, and go to state 871
    '<'    shift, and go to state 872
    '>'    shift, and go to state 873
    '*'    shift, and go to state 874
    '/'    shift, and go to state 875
    '%'    shift, and go to state 876
    '|'    shift, and go to state 877
    "<<"   shift, and go to state 878
    ">>"   shift, and go to state 879
    "<="   shift, and go to state 880
    ">="   shift, and go to state 881
    ".*"   shift, and go to state 882
    "->*"  shift, and go to state 883

    fold-operator  go to state 884


State 493

  334 fold-expression: '(' cast-expression • fold-operator "..." ')'
  336                | '(' cast-expression • fold-operator "..." fold-operator cast-expression ')'
  705 pm-expression: cast-expression •

    '+'    shift, and go to state 852
    '-'    shift, and go to state 853
    '='    shift, and go to state 854
    '&'    shift, and go to state 855
    "*="   shift, and go to state 856
    "/="   shift, and go to state 857
    "%="   shift, and go to state 858
    "+="   shift, and go to state 859
    "-="   shift, and go to state 860
    ">>="  shift, and go to state 861
    "<<="  shift, and go to state 862
    "&="   shift, and go to state 863
    "^="   shift, and go to state 864
    "|="   shift, and go to state 865
    ','    shift, and go to state 866
    "&&"   shift, and go to state 867
    "||"   shift, and go to state 868
    "=="   shift, and go to state 869
    "!="   shift, and go to state 870
    '^'    shift, and go to state 871
    '<'    shift, and go to state 872
    '>'    shift, and go to state 873
    '*'    shift, and go to state 874
    '/'    shift, and go to state 875
    '%'    shift, and go to state 876
    '|'    shift, and go to state 877
    "<<"   shift, and go to state 878
    ">>"   shift, and go to state 879
    "<="   shift, and go to state 880
    ">="   shift, and go to state 881
    ".*"   shift, and go to state 882
    "->*"  shift, and go to state 883

    '+'       [reduce using rule 705 (pm-expression)]
    '-'       [reduce using rule 705 (pm-expression)]
    '='       [reduce using rule 705 (pm-expression)]
    '&'       [reduce using rule 705 (pm-expression)]
    "*="      [reduce using rule 705 (pm-expression)]
    "/="      [reduce using rule 705 (pm-expression)]
    "%="      [reduce using rule 705 (pm-expression)]
    "+="      [reduce using rule 705 (pm-expression)]
    "-="      [reduce using rule 705 (pm-expression)]
    ">>="     [reduce using rule 705 (pm-expression)]
    "<<="     [reduce using rule 705 (pm-expression)]
    "&="      [reduce using rule 705 (pm-expression)]
    "^="      [reduce using rule 705 (pm-expression)]
    "|="      [reduce using rule 705 (pm-expression)]
    ','       [reduce using rule 705 (pm-expression)]
    "&&"      [reduce using rule 705 (pm-expression)]
    "||"      [reduce using rule 705 (pm-expression)]
    "=="      [reduce using rule 705 (pm-expression)]
    "!="      [reduce using rule 705 (pm-expression)]
    '^'       [reduce using rule 705 (pm-expression)]
    '<'       [reduce using rule 705 (pm-expression)]
    '>'       [reduce using rule 705 (pm-expression)]
    '*'       [reduce using rule 705 (pm-expression)]
    '/'       [reduce using rule 705 (pm-expression)]
    '%'       [reduce using rule 705 (pm-expression)]
    '|'       [reduce using rule 705 (pm-expression)]
    "<<"      [reduce using rule 705 (pm-expression)]
    ">>"      [reduce using rule 705 (pm-expression)]
    "<="      [reduce using rule 705 (pm-expression)]
    ">="      [reduce using rule 705 (pm-expression)]
    ".*"      [reduce using rule 705 (pm-expression)]
    "->*"     [reduce using rule 705 (pm-expression)]
    $default  reduce using rule 705 (pm-expression)

    fold-operator  go to state 885


State 494

  317 expression: expression • ',' assignment-expression
  728 primary-expression: '(' expression • ')'

    ')'  shift, and go to state 886
    ','  shift, and go to state 620


State 495

  120 cast-expression: '(' type-id • ')' cast-expression

    ')'  shift, and go to state 887


State 496

  807 simple-capture: IDENTIFIER • eclipse-opt

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 888


State 497

  116 capture-default: '=' •

    $default  reduce using rule 116 (capture-default)


State 498

  115 capture-default: '&' •
  441 init-capture: '&' • eclipse-opt IDENTIFIER initializer
  808 simple-capture: '&' • IDENTIFIER eclipse-opt

    IDENTIFIER  shift, and go to state 889
    "..."       shift, and go to state 169

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 115 (capture-default)

    eclipse-opt  go to state 890


State 499

  810 simple-capture: '*' • "this"

    "this"  shift, and go to state 891


State 500

  809 simple-capture: "this" •

    $default  reduce using rule 809 (simple-capture)


State 501

  117 capture-list: capture •

    $default  reduce using rule 117 (capture-list)


State 502

  487 lambda-capture: capture-default •
  489               | capture-default • ',' capture-list

    ','  shift, and go to state 892

    $default  reduce using rule 487 (lambda-capture)


State 503

  118 capture-list: capture-list • ',' capture
  488 lambda-capture: capture-list •

    ','  shift, and go to state 893

    $default  reduce using rule 488 (lambda-capture)


State 504

  440 init-capture: eclipse-opt • IDENTIFIER initializer

    IDENTIFIER  shift, and go to state 894


State 505

  114 capture: init-capture •

    $default  reduce using rule 114 (capture)


State 506

  491 lambda-capture-opt: lambda-capture •

    $default  reduce using rule 491 (lambda-capture-opt)


State 507

  496 lambda-introducer: '[' lambda-capture-opt • ']'

    ']'  shift, and go to state 895


State 508

  113 capture: simple-capture •

    $default  reduce using rule 113 (capture)


State 509

   64 await-expression: "co_await" cast-expression •

    $default  reduce using rule 64 (await-expression)


State 510

   83 binary-digit: '0' •

    $default  reduce using rule 83 (binary-digit)


State 511

   84 binary-digit: '1' •

    $default  reduce using rule 84 (binary-digit)


State 512

   87 binary-literal: "0b" binary-digit •

    $default  reduce using rule 87 (binary-literal)


State 513

   88 binary-literal: "0B" binary-digit •

    $default  reduce using rule 88 (binary-literal)


State 514

  659 overloadable-operator: '+' •

    $default  reduce using rule 659 (overloadable-operator)


State 515

  660 overloadable-operator: '-' •

    $default  reduce using rule 660 (overloadable-operator)


State 516

  667 overloadable-operator: '=' •

    $default  reduce using rule 667 (overloadable-operator)


State 517

  653 overloadable-operator: '(' • ')'

    ')'  shift, and go to state 896


State 518

  665 overloadable-operator: '&' •

    $default  reduce using rule 665 (overloadable-operator)


State 519

  670 overloadable-operator: "*=" •

    $default  reduce using rule 670 (overloadable-operator)


State 520

  671 overloadable-operator: "/=" •

    $default  reduce using rule 671 (overloadable-operator)


State 521

  672 overloadable-operator: "%=" •

    $default  reduce using rule 672 (overloadable-operator)


State 522

  668 overloadable-operator: "+=" •

    $default  reduce using rule 668 (overloadable-operator)


State 523

  669 overloadable-operator: "-=" •

    $default  reduce using rule 669 (overloadable-operator)


State 524

  688 overloadable-operator: ">>=" •

    $default  reduce using rule 688 (overloadable-operator)


State 525

  687 overloadable-operator: "<<=" •

    $default  reduce using rule 687 (overloadable-operator)


State 526

  674 overloadable-operator: "&=" •

    $default  reduce using rule 674 (overloadable-operator)


State 527

  673 overloadable-operator: "^=" •

    $default  reduce using rule 673 (overloadable-operator)


State 528

  675 overloadable-operator: "|=" •

    $default  reduce using rule 675 (overloadable-operator)


State 529

  691 overloadable-operator: ',' •

    $default  reduce using rule 691 (overloadable-operator)


State 530

  654 overloadable-operator: '[' • ']'

    ']'  shift, and go to state 897


State 531

  652 overloadable-operator: "co_await" •

    $default  reduce using rule 652 (overloadable-operator)


State 532

  682 overloadable-operator: "<=>" •

    $default  reduce using rule 682 (overloadable-operator)


State 533

  683 overloadable-operator: "&&" •

    $default  reduce using rule 683 (overloadable-operator)


State 534

  684 overloadable-operator: "||" •

    $default  reduce using rule 684 (overloadable-operator)


State 535

  655 overloadable-operator: "->" •

    $default  reduce using rule 655 (overloadable-operator)


State 536

  649 overloadable-operator: "delete" •
  651                      | "delete" • '[' ']'

    '['  shift, and go to state 898

    '['       [reduce using rule 649 (overloadable-operator)]
    $default  reduce using rule 649 (overloadable-operator)


State 537

  676 overloadable-operator: "==" •

    $default  reduce using rule 676 (overloadable-operator)


State 538

  677 overloadable-operator: "!=" •

    $default  reduce using rule 677 (overloadable-operator)


State 539

  658 overloadable-operator: '!' •

    $default  reduce using rule 658 (overloadable-operator)


State 540

  664 overloadable-operator: '^' •

    $default  reduce using rule 664 (overloadable-operator)


State 541

  678 overloadable-operator: '<' •

    $default  reduce using rule 678 (overloadable-operator)


State 542

  679 overloadable-operator: '>' •

    $default  reduce using rule 679 (overloadable-operator)


State 543

  661 overloadable-operator: '*' •

    $default  reduce using rule 661 (overloadable-operator)


State 544

  662 overloadable-operator: '/' •

    $default  reduce using rule 662 (overloadable-operator)


State 545

  663 overloadable-operator: '%' •

    $default  reduce using rule 663 (overloadable-operator)


State 546

  666 overloadable-operator: '|' •

    $default  reduce using rule 666 (overloadable-operator)


State 547

  685 overloadable-operator: "<<" •

    $default  reduce using rule 685 (overloadable-operator)


State 548

  686 overloadable-operator: ">>" •

    $default  reduce using rule 686 (overloadable-operator)


State 549

  680 overloadable-operator: "<=" •

    $default  reduce using rule 680 (overloadable-operator)


State 550

  681 overloadable-operator: ">=" •

    $default  reduce using rule 681 (overloadable-operator)


State 551

  656 overloadable-operator: "->*" •

    $default  reduce using rule 656 (overloadable-operator)


State 552

  648 overloadable-operator: "new" •
  650                      | "new" • '[' ']'

    '['  shift, and go to state 899

    '['       [reduce using rule 648 (overloadable-operator)]
    $default  reduce using rule 648 (overloadable-operator)


State 553

  657 overloadable-operator: '~' •

    $default  reduce using rule 657 (overloadable-operator)


State 554

  689 overloadable-operator: "++" •

    $default  reduce using rule 689 (overloadable-operator)


State 555

  690 overloadable-operator: "--" •

    $default  reduce using rule 690 (overloadable-operator)


State 556

  166 conversion-function-id: "operator" conversion-type-id •

    $default  reduce using rule 166 (conversion-function-id)


State 557

  646 operator-function-id: "operator" overloadable-operator •
  647                     | "operator" overloadable-operator • '<' template-argument-list-opt '>'

    '<'  shift, and go to state 900

    '<'       [reduce using rule 646 (operator-function-id)]
    $default  reduce using rule 646 (operator-function-id)


State 558

  507 literal-operator-id: "operator" string-literal • IDENTIFIER
  975 user-defined-string-literal: string-literal • ud-suffix

    IDENTIFIER  shift, and go to state 901

    ud-suffix  go to state 700


State 559

  167 conversion-type-id: type-specifier-seq • conversion-declarator-opt

    IDENTIFIER  shift, and go to state 1
    '&'         shift, and go to state 167
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 164 (conversion-declarator-opt)]
    '&'         [reduce using rule 164 (conversion-declarator-opt)]
    "::"        [reduce using rule 164 (conversion-declarator-opt)]
    "&&"        [reduce using rule 164 (conversion-declarator-opt)]
    "decltype"  [reduce using rule 164 (conversion-declarator-opt)]
    '*'         [reduce using rule 164 (conversion-declarator-opt)]
    $default    reduce using rule 164 (conversion-declarator-opt)

    class-name                 go to state 54
    conversion-declarator      go to state 902
    conversion-declarator-opt  go to state 903
    decltype-specifier         go to state 126
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 195
    ptr-operator               go to state 904
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 560

  508 literal-operator-id: "operator" user-defined-string-literal •

    $default  reduce using rule 508 (literal-operator-id)


State 561

  774 requirement-parameter-list: '(' • parameter-declaration-clause ')'

    ')'       reduce using rule 700 (parameter-declaration-list-opt)
    "..."     reduce using rule 700 (parameter-declaration-list-opt)
    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq         go to state 185
    attribute-specifier-seq-opt     go to state 233
    parameter-declaration           go to state 762
    parameter-declaration-clause    go to state 905
    parameter-declaration-list      go to state 764
    parameter-declaration-list-opt  go to state 765


State 562

  776 requirement-parameter-list-opt: requirement-parameter-list •

    $default  reduce using rule 776 (requirement-parameter-list-opt)


State 563

  782 requires-expression: "requires" requirement-parameter-list-opt • requirement-body

    '{'  shift, and go to state 906

    requirement-body  go to state 907


State 564

  600 noexcept-expression: "noexcept" '(' • expression ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 908
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 565

  128 class-name: IDENTIFIER •
  274 enum-name: IDENTIFIER •
  884 template-name: IDENTIFIER •
  923 typedef-name: IDENTIFIER •

    IDENTIFIER        reduce using rule 128 (class-name)
    IDENTIFIER        [reduce using rule 274 (enum-name)]
    IDENTIFIER        [reduce using rule 923 (typedef-name)]
    '+'               reduce using rule 128 (class-name)
    '+'               [reduce using rule 274 (enum-name)]
    '+'               [reduce using rule 923 (typedef-name)]
    '-'               reduce using rule 128 (class-name)
    '-'               [reduce using rule 274 (enum-name)]
    '-'               [reduce using rule 923 (typedef-name)]
    "using"           reduce using rule 128 (class-name)
    "using"           [reduce using rule 274 (enum-name)]
    "using"           [reduce using rule 923 (typedef-name)]
    '='               reduce using rule 128 (class-name)
    '='               [reduce using rule 274 (enum-name)]
    '='               [reduce using rule 923 (typedef-name)]
    ';'               reduce using rule 128 (class-name)
    ';'               [reduce using rule 274 (enum-name)]
    ';'               [reduce using rule 923 (typedef-name)]
    "alignas"         reduce using rule 128 (class-name)
    "alignas"         [reduce using rule 274 (enum-name)]
    "alignas"         [reduce using rule 923 (typedef-name)]
    '('               reduce using rule 128 (class-name)
    '('               [reduce using rule 274 (enum-name)]
    '('               [reduce using rule 923 (typedef-name)]
    ')'               reduce using rule 128 (class-name)
    ')'               [reduce using rule 274 (enum-name)]
    ')'               [reduce using rule 923 (typedef-name)]
    '&'               reduce using rule 128 (class-name)
    '&'               [reduce using rule 274 (enum-name)]
    '&'               [reduce using rule 923 (typedef-name)]
    "asm"             reduce using rule 128 (class-name)
    "asm"             [reduce using rule 274 (enum-name)]
    "asm"             [reduce using rule 923 (typedef-name)]
    "*="              reduce using rule 128 (class-name)
    "*="              [reduce using rule 274 (enum-name)]
    "*="              [reduce using rule 923 (typedef-name)]
    "/="              reduce using rule 128 (class-name)
    "/="              [reduce using rule 274 (enum-name)]
    "/="              [reduce using rule 923 (typedef-name)]
    "%="              reduce using rule 128 (class-name)
    "%="              [reduce using rule 274 (enum-name)]
    "%="              [reduce using rule 923 (typedef-name)]
    "+="              reduce using rule 128 (class-name)
    "+="              [reduce using rule 274 (enum-name)]
    "+="              [reduce using rule 923 (typedef-name)]
    "-="              reduce using rule 128 (class-name)
    "-="              [reduce using rule 274 (enum-name)]
    "-="              [reduce using rule 923 (typedef-name)]
    ">>="             reduce using rule 128 (class-name)
    ">>="             [reduce using rule 274 (enum-name)]
    ">>="             [reduce using rule 923 (typedef-name)]
    "<<="             reduce using rule 128 (class-name)
    "<<="             [reduce using rule 274 (enum-name)]
    "<<="             [reduce using rule 923 (typedef-name)]
    "&="              reduce using rule 128 (class-name)
    "&="              [reduce using rule 274 (enum-name)]
    "&="              [reduce using rule 923 (typedef-name)]
    "^="              reduce using rule 128 (class-name)
    "^="              [reduce using rule 274 (enum-name)]
    "^="              [reduce using rule 923 (typedef-name)]
    "|="              reduce using rule 128 (class-name)
    "|="              [reduce using rule 274 (enum-name)]
    "|="              [reduce using rule 923 (typedef-name)]
    ','               reduce using rule 128 (class-name)
    ','               [reduce using rule 274 (enum-name)]
    ','               [reduce using rule 923 (typedef-name)]
    "..."             reduce using rule 128 (class-name)
    "..."             [reduce using rule 274 (enum-name)]
    "..."             [reduce using rule 923 (typedef-name)]
    "::"              reduce using rule 128 (class-name)
    "::"              [reduce using rule 274 (enum-name)]
    "::"              [reduce using rule 923 (typedef-name)]
    '['               reduce using rule 128 (class-name)
    '['               [reduce using rule 274 (enum-name)]
    '['               [reduce using rule 923 (typedef-name)]
    ']'               reduce using rule 128 (class-name)
    ']'               [reduce using rule 274 (enum-name)]
    ']'               [reduce using rule 923 (typedef-name)]
    ':'               reduce using rule 128 (class-name)
    ':'               [reduce using rule 274 (enum-name)]
    ':'               [reduce using rule 923 (typedef-name)]
    '{'               reduce using rule 128 (class-name)
    '{'               [reduce using rule 274 (enum-name)]
    '{'               [reduce using rule 923 (typedef-name)]
    '}'               reduce using rule 128 (class-name)
    '}'               [reduce using rule 274 (enum-name)]
    '}'               [reduce using rule 923 (typedef-name)]
    "virtual"         reduce using rule 128 (class-name)
    "virtual"         [reduce using rule 274 (enum-name)]
    "virtual"         [reduce using rule 923 (typedef-name)]
    "class"           reduce using rule 128 (class-name)
    "class"           [reduce using rule 274 (enum-name)]
    "class"           [reduce using rule 923 (typedef-name)]
    "struct"          reduce using rule 128 (class-name)
    "struct"          [reduce using rule 274 (enum-name)]
    "struct"          [reduce using rule 923 (typedef-name)]
    "union"           reduce using rule 128 (class-name)
    "union"           [reduce using rule 274 (enum-name)]
    "union"           [reduce using rule 923 (typedef-name)]
    "template"        reduce using rule 128 (class-name)
    "template"        [reduce using rule 274 (enum-name)]
    "template"        [reduce using rule 923 (typedef-name)]
    "final"           reduce using rule 128 (class-name)
    "final"           [reduce using rule 274 (enum-name)]
    "final"           [reduce using rule 923 (typedef-name)]
    "<=>"             reduce using rule 128 (class-name)
    "<=>"             [reduce using rule 274 (enum-name)]
    "<=>"             [reduce using rule 923 (typedef-name)]
    "concept"         reduce using rule 128 (class-name)
    "concept"         [reduce using rule 274 (enum-name)]
    "concept"         [reduce using rule 923 (typedef-name)]
    '?'               reduce using rule 128 (class-name)
    '?'               [reduce using rule 274 (enum-name)]
    '?'               [reduce using rule 923 (typedef-name)]
    "constexpr"       reduce using rule 128 (class-name)
    "constexpr"       [reduce using rule 274 (enum-name)]
    "constexpr"       [reduce using rule 923 (typedef-name)]
    "&&"              reduce using rule 128 (class-name)
    "&&"              [reduce using rule 274 (enum-name)]
    "&&"              [reduce using rule 923 (typedef-name)]
    "||"              reduce using rule 128 (class-name)
    "||"              [reduce using rule 274 (enum-name)]
    "||"              [reduce using rule 923 (typedef-name)]
    "operator"        reduce using rule 128 (class-name)
    "operator"        [reduce using rule 274 (enum-name)]
    "operator"        [reduce using rule 923 (typedef-name)]
    "const"           reduce using rule 128 (class-name)
    "const"           [reduce using rule 274 (enum-name)]
    "const"           [reduce using rule 923 (typedef-name)]
    "volatile"        reduce using rule 128 (class-name)
    "volatile"        [reduce using rule 274 (enum-name)]
    "volatile"        [reduce using rule 923 (typedef-name)]
    "friend"          reduce using rule 128 (class-name)
    "friend"          [reduce using rule 274 (enum-name)]
    "friend"          [reduce using rule 923 (typedef-name)]
    "typedef"         reduce using rule 128 (class-name)
    "typedef"         [reduce using rule 274 (enum-name)]
    "typedef"         [reduce using rule 923 (typedef-name)]
    "consteval"       reduce using rule 128 (class-name)
    "consteval"       [reduce using rule 274 (enum-name)]
    "consteval"       [reduce using rule 923 (typedef-name)]
    "constinit"       reduce using rule 128 (class-name)
    "constinit"       [reduce using rule 274 (enum-name)]
    "constinit"       [reduce using rule 923 (typedef-name)]
    "inline"          reduce using rule 128 (class-name)
    "inline"          [reduce using rule 274 (enum-name)]
    "inline"          [reduce using rule 923 (typedef-name)]
    "decltype"        reduce using rule 128 (class-name)
    "decltype"        [reduce using rule 274 (enum-name)]
    "decltype"        [reduce using rule 923 (typedef-name)]
    "->"              reduce using rule 128 (class-name)
    "->"              [reduce using rule 274 (enum-name)]
    "->"              [reduce using rule 923 (typedef-name)]
    '.'               reduce using rule 128 (class-name)
    '.'               [reduce using rule 274 (enum-name)]
    '.'               [reduce using rule 923 (typedef-name)]
    "enum"            reduce using rule 128 (class-name)
    "enum"            [reduce using rule 274 (enum-name)]
    "enum"            [reduce using rule 923 (typedef-name)]
    "=="              reduce using rule 128 (class-name)
    "=="              [reduce using rule 274 (enum-name)]
    "=="              [reduce using rule 923 (typedef-name)]
    "!="              reduce using rule 128 (class-name)
    "!="              [reduce using rule 274 (enum-name)]
    "!="              [reduce using rule 923 (typedef-name)]
    '^'               reduce using rule 128 (class-name)
    '^'               [reduce using rule 274 (enum-name)]
    '^'               [reduce using rule 923 (typedef-name)]
    '<'               reduce using rule 128 (class-name)
    '<'               [reduce using rule 274 (enum-name)]
    '<'               [reduce using rule 884 (template-name)]
    '<'               [reduce using rule 923 (typedef-name)]
    '>'               reduce using rule 128 (class-name)
    '>'               [reduce using rule 274 (enum-name)]
    '>'               [reduce using rule 923 (typedef-name)]
    "explicit"        reduce using rule 128 (class-name)
    "explicit"        [reduce using rule 274 (enum-name)]
    "explicit"        [reduce using rule 923 (typedef-name)]
    "export"          reduce using rule 128 (class-name)
    "export"          [reduce using rule 274 (enum-name)]
    "export"          [reduce using rule 923 (typedef-name)]
    "export-keyword"  reduce using rule 128 (class-name)
    "export-keyword"  [reduce using rule 274 (enum-name)]
    "export-keyword"  [reduce using rule 923 (typedef-name)]
    "extern"          reduce using rule 128 (class-name)
    "extern"          [reduce using rule 274 (enum-name)]
    "extern"          [reduce using rule 923 (typedef-name)]
    '*'               reduce using rule 128 (class-name)
    '*'               [reduce using rule 274 (enum-name)]
    '*'               [reduce using rule 923 (typedef-name)]
    '/'               reduce using rule 128 (class-name)
    '/'               [reduce using rule 274 (enum-name)]
    '/'               [reduce using rule 923 (typedef-name)]
    '%'               reduce using rule 128 (class-name)
    '%'               [reduce using rule 274 (enum-name)]
    '%'               [reduce using rule 923 (typedef-name)]
    '|'               reduce using rule 128 (class-name)
    '|'               [reduce using rule 274 (enum-name)]
    '|'               [reduce using rule 923 (typedef-name)]
    "<<"              reduce using rule 128 (class-name)
    "<<"              [reduce using rule 274 (enum-name)]
    "<<"              [reduce using rule 923 (typedef-name)]
    ">>"              reduce using rule 128 (class-name)
    ">>"              [reduce using rule 274 (enum-name)]
    ">>"              [reduce using rule 923 (typedef-name)]
    "<="              reduce using rule 128 (class-name)
    "<="              [reduce using rule 274 (enum-name)]
    "<="              [reduce using rule 923 (typedef-name)]
    ">="              reduce using rule 128 (class-name)
    ">="              [reduce using rule 274 (enum-name)]
    ">="              [reduce using rule 923 (typedef-name)]
    ".*"              reduce using rule 128 (class-name)
    ".*"              [reduce using rule 274 (enum-name)]
    ".*"              [reduce using rule 923 (typedef-name)]
    "->*"             reduce using rule 128 (class-name)
    "->*"             [reduce using rule 274 (enum-name)]
    "->*"             [reduce using rule 923 (typedef-name)]
    "try"             reduce using rule 128 (class-name)
    "try"             [reduce using rule 274 (enum-name)]
    "try"             [reduce using rule 923 (typedef-name)]
    "import-keyword"  reduce using rule 128 (class-name)
    "import-keyword"  [reduce using rule 274 (enum-name)]
    "import-keyword"  [reduce using rule 923 (typedef-name)]
    "namespace"       reduce using rule 128 (class-name)
    "namespace"       [reduce using rule 274 (enum-name)]
    "namespace"       [reduce using rule 923 (typedef-name)]
    "requires"        reduce using rule 128 (class-name)
    "requires"        [reduce using rule 274 (enum-name)]
    "requires"        [reduce using rule 923 (typedef-name)]
    "noexcept"        reduce using rule 128 (class-name)
    "noexcept"        [reduce using rule 274 (enum-name)]
    "noexcept"        [reduce using rule 923 (typedef-name)]
    '~'               reduce using rule 128 (class-name)
    '~'               [reduce using rule 274 (enum-name)]
    '~'               [reduce using rule 923 (typedef-name)]
    "++"              reduce using rule 128 (class-name)
    "++"              [reduce using rule 274 (enum-name)]
    "++"              [reduce using rule 923 (typedef-name)]
    "--"              reduce using rule 128 (class-name)
    "--"              [reduce using rule 274 (enum-name)]
    "--"              [reduce using rule 923 (typedef-name)]
    "auto"            reduce using rule 128 (class-name)
    "auto"            [reduce using rule 274 (enum-name)]
    "auto"            [reduce using rule 923 (typedef-name)]
    "char"            reduce using rule 128 (class-name)
    "char"            [reduce using rule 274 (enum-name)]
    "char"            [reduce using rule 923 (typedef-name)]
    "char8_t"         reduce using rule 128 (class-name)
    "char8_t"         [reduce using rule 274 (enum-name)]
    "char8_t"         [reduce using rule 923 (typedef-name)]
    "char16_t"        reduce using rule 128 (class-name)
    "char16_t"        [reduce using rule 274 (enum-name)]
    "char16_t"        [reduce using rule 923 (typedef-name)]
    "char32_t"        reduce using rule 128 (class-name)
    "char32_t"        [reduce using rule 274 (enum-name)]
    "char32_t"        [reduce using rule 923 (typedef-name)]
    "wchar_t"         reduce using rule 128 (class-name)
    "wchar_t"         [reduce using rule 274 (enum-name)]
    "wchar_t"         [reduce using rule 923 (typedef-name)]
    "bool"            reduce using rule 128 (class-name)
    "bool"            [reduce using rule 274 (enum-name)]
    "bool"            [reduce using rule 923 (typedef-name)]
    "short"           reduce using rule 128 (class-name)
    "short"           [reduce using rule 274 (enum-name)]
    "short"           [reduce using rule 923 (typedef-name)]
    "int"             reduce using rule 128 (class-name)
    "int"             [reduce using rule 274 (enum-name)]
    "int"             [reduce using rule 923 (typedef-name)]
    "long"            reduce using rule 128 (class-name)
    "long"            [reduce using rule 274 (enum-name)]
    "long"            [reduce using rule 923 (typedef-name)]
    "signed"          reduce using rule 128 (class-name)
    "signed"          [reduce using rule 274 (enum-name)]
    "signed"          [reduce using rule 923 (typedef-name)]
    "unsigned"        reduce using rule 128 (class-name)
    "unsigned"        [reduce using rule 274 (enum-name)]
    "unsigned"        [reduce using rule 923 (typedef-name)]
    "float"           reduce using rule 128 (class-name)
    "float"           [reduce using rule 274 (enum-name)]
    "float"           [reduce using rule 923 (typedef-name)]
    "double"          reduce using rule 128 (class-name)
    "double"          [reduce using rule 274 (enum-name)]
    "double"          [reduce using rule 923 (typedef-name)]
    "void"            reduce using rule 128 (class-name)
    "void"            [reduce using rule 274 (enum-name)]
    "void"            [reduce using rule 923 (typedef-name)]
    "static_assert"   reduce using rule 128 (class-name)
    "static_assert"   [reduce using rule 274 (enum-name)]
    "static_assert"   [reduce using rule 923 (typedef-name)]
    "static"          reduce using rule 128 (class-name)
    "static"          [reduce using rule 274 (enum-name)]
    "static"          [reduce using rule 923 (typedef-name)]
    "thread_local"    reduce using rule 128 (class-name)
    "thread_local"    [reduce using rule 274 (enum-name)]
    "thread_local"    [reduce using rule 923 (typedef-name)]
    "mutable"         reduce using rule 128 (class-name)
    "mutable"         [reduce using rule 274 (enum-name)]
    "mutable"         [reduce using rule 923 (typedef-name)]
    "typename"        reduce using rule 128 (class-name)
    "typename"        [reduce using rule 274 (enum-name)]
    "typename"        [reduce using rule 923 (typedef-name)]
    "override"        reduce using rule 128 (class-name)
    "override"        [reduce using rule 274 (enum-name)]
    "override"        [reduce using rule 923 (typedef-name)]
    $default          reduce using rule 128 (class-name)


State 566

  956 unqualified-id: '~' decltype-specifier •

    $default  reduce using rule 956 (unqualified-id)


State 567

  955 unqualified-id: '~' type-name •

    $default  reduce using rule 955 (unqualified-id)


State 568

  932 unary-expression: "++" cast-expression •

    $default  reduce using rule 932 (unary-expression)


State 569

  933 unary-expression: "--" cast-expression •

    $default  reduce using rule 933 (unary-expression)


State 570

  720 postfix-expression: "dynamic_cast" '<' • type-id '>' '(' expression ')'

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 116
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    class-key                   go to state 463
    class-name                  go to state 54
    cv-qualifier                go to state 56
    decltype-specifier          go to state 62
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-name                   go to state 70
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-id                     go to state 909
    type-name                   go to state 107
    type-specifier              go to state 471
    type-specifier-seq          go to state 472
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 571

  721 postfix-expression: "static_cast" '<' • type-id '>' '(' expression ')'

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 116
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    class-key                   go to state 463
    class-name                  go to state 54
    cv-qualifier                go to state 56
    decltype-specifier          go to state 62
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-name                   go to state 70
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-id                     go to state 910
    type-name                   go to state 107
    type-specifier              go to state 471
    type-specifier-seq          go to state 472
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 572

  722 postfix-expression: "reinterpret_cast" '<' • type-id '>' '(' expression ')'

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 116
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    class-key                   go to state 463
    class-name                  go to state 54
    cv-qualifier                go to state 56
    decltype-specifier          go to state 62
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-name                   go to state 70
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-id                     go to state 911
    type-name                   go to state 107
    type-specifier              go to state 471
    type-specifier-seq          go to state 472
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 573

  723 postfix-expression: "const_cast" '<' • type-id '>' '(' expression ')'

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 116
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    class-key                   go to state 463
    class-name                  go to state 54
    cv-qualifier                go to state 56
    decltype-specifier          go to state 62
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-name                   go to state 70
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-id                     go to state 912
    type-name                   go to state 107
    type-specifier              go to state 471
    type-specifier-seq          go to state 472
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 574

  724 postfix-expression: "typeid" '(' • expression ')'
  725                   | "typeid" '(' • type-id ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 116
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-key                            go to state 463
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 913
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-id                              go to state 914
    type-name                            go to state 107
    type-specifier                       go to state 471
    type-specifier-seq                   go to state 472
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 575

   29 assignment-expression-opt: assignment-expression •

    $default  reduce using rule 29 (assignment-expression-opt)


State 576

  893 throw-expression: "throw" assignment-expression-opt •

    $default  reduce using rule 893 (throw-expression)


State 577

  334 fold-expression: '(' • cast-expression fold-operator "..." ')'
  335                | '(' • "..." fold-operator cast-expression ')'
  336                | '(' • cast-expression fold-operator "..." fold-operator cast-expression ')'
  728 primary-expression: '(' • expression ')'
  936 unary-expression: "sizeof" '(' • type-id ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "..."               shift, and go to state 492
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 116
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 493
    character-literal                    go to state 292
    class-key                            go to state 463
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 494
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-id                              go to state 915
    type-name                            go to state 107
    type-specifier                       go to state 471
    type-specifier-seq                   go to state 472
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 578

  937 unary-expression: "sizeof" "..." • '(' IDENTIFIER ')'

    '('  shift, and go to state 916


State 579

  935 unary-expression: "sizeof" unary-expression •

    $default  reduce using rule 935 (unary-expression)


State 580

  938 unary-expression: "alignof" '(' • type-id ')'

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 116
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    class-key                   go to state 463
    class-name                  go to state 54
    cv-qualifier                go to state 56
    decltype-specifier          go to state 62
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-name                   go to state 70
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-id                     go to state 917
    type-name                   go to state 107
    type-specifier              go to state 471
    type-specifier-seq          go to state 472
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 581

  990 yield-expression: "co_yield" assignment-expression •

    $default  reduce using rule 990 (yield-expression)


State 582

  991 yield-expression: "co_yield" braced-init-list •

    $default  reduce using rule 991 (yield-expression)


State 583

   14 additive-expression: additive-expression '+' • multiplicative-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 918
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 584

   15 additive-expression: additive-expression '-' • multiplicative-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 919
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 585

   20 and-expression: and-expression '&' • equality-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 920
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 586

  929 ud-suffix: IDENTIFIER •

    $default  reduce using rule 929 (ud-suffix)


State 587

  514 long-long-suffix: LL •

    $default  reduce using rule 514 (long-long-suffix)


State 588

   22 apostrophe-opt: '\'' •

    $default  reduce using rule 22 (apostrophe-opt)


State 589

  958 unsigned-suffix: 'u' •

    $default  reduce using rule 958 (unsigned-suffix)


State 590

  959 unsigned-suffix: 'U' •

    $default  reduce using rule 959 (unsigned-suffix)


State 591

  518 long-suffix: 'L' •

    $default  reduce using rule 518 (long-suffix)


State 592

  517 long-suffix: 'l' •

    $default  reduce using rule 517 (long-suffix)


State 593

  513 long-long-suffix: "ll" •

    $default  reduce using rule 513 (long-long-suffix)


State 594

  847 size-suffix: 'z' •

    $default  reduce using rule 847 (size-suffix)


State 595

  848 size-suffix: 'Z' •

    $default  reduce using rule 848 (size-suffix)


State 596

   89 binary-literal: binary-literal apostrophe-opt • binary-digit

    '0'  shift, and go to state 510
    '1'  shift, and go to state 511

    binary-digit  go to state 921


State 597

  474 integer-suffix-opt: integer-suffix •

    $default  reduce using rule 474 (integer-suffix-opt)


State 598

  463 integer-literal: binary-literal integer-suffix-opt •

    $default  reduce using rule 463 (integer-literal)


State 599

  471 integer-suffix: long-long-suffix • unsigned-suffix-opt

    'u'  shift, and go to state 589
    'U'  shift, and go to state 590

    $default  reduce using rule 960 (unsigned-suffix-opt)

    unsigned-suffix      go to state 922
    unsigned-suffix-opt  go to state 923


State 600

  470 integer-suffix: long-suffix • unsigned-suffix-opt

    'u'  shift, and go to state 589
    'U'  shift, and go to state 590

    $default  reduce using rule 960 (unsigned-suffix-opt)

    unsigned-suffix      go to state 922
    unsigned-suffix-opt  go to state 924


State 601

  472 integer-suffix: size-suffix • unsigned-suffix-opt

    'u'  shift, and go to state 589
    'U'  shift, and go to state 590

    $default  reduce using rule 960 (unsigned-suffix-opt)

    unsigned-suffix      go to state 922
    unsigned-suffix-opt  go to state 925


State 602

  970 user-defined-integer-literal: binary-literal ud-suffix •

    $default  reduce using rule 970 (user-defined-integer-literal)


State 603

  467 integer-suffix: unsigned-suffix • long-suffix-opt
  468               | unsigned-suffix • long-long-suffix-opt
  469               | unsigned-suffix • size-suffix-opt

    LL    shift, and go to state 587
    'L'   shift, and go to state 591
    'l'   shift, and go to state 592
    "ll"  shift, and go to state 593
    'z'   shift, and go to state 594
    'Z'   shift, and go to state 595

    IDENTIFIER        reduce using rule 515 (long-long-suffix-opt)
    IDENTIFIER        [reduce using rule 519 (long-suffix-opt)]
    IDENTIFIER        [reduce using rule 849 (size-suffix-opt)]
    '+'               reduce using rule 515 (long-long-suffix-opt)
    '+'               [reduce using rule 519 (long-suffix-opt)]
    '+'               [reduce using rule 849 (size-suffix-opt)]
    '-'               reduce using rule 515 (long-long-suffix-opt)
    '-'               [reduce using rule 519 (long-suffix-opt)]
    '-'               [reduce using rule 849 (size-suffix-opt)]
    "using"           reduce using rule 515 (long-long-suffix-opt)
    "using"           [reduce using rule 519 (long-suffix-opt)]
    "using"           [reduce using rule 849 (size-suffix-opt)]
    '='               reduce using rule 515 (long-long-suffix-opt)
    '='               [reduce using rule 519 (long-suffix-opt)]
    '='               [reduce using rule 849 (size-suffix-opt)]
    ';'               reduce using rule 515 (long-long-suffix-opt)
    ';'               [reduce using rule 519 (long-suffix-opt)]
    ';'               [reduce using rule 849 (size-suffix-opt)]
    "alignas"         reduce using rule 515 (long-long-suffix-opt)
    "alignas"         [reduce using rule 519 (long-suffix-opt)]
    "alignas"         [reduce using rule 849 (size-suffix-opt)]
    '('               reduce using rule 515 (long-long-suffix-opt)
    '('               [reduce using rule 519 (long-suffix-opt)]
    '('               [reduce using rule 849 (size-suffix-opt)]
    ')'               reduce using rule 515 (long-long-suffix-opt)
    ')'               [reduce using rule 519 (long-suffix-opt)]
    ')'               [reduce using rule 849 (size-suffix-opt)]
    '&'               reduce using rule 515 (long-long-suffix-opt)
    '&'               [reduce using rule 519 (long-suffix-opt)]
    '&'               [reduce using rule 849 (size-suffix-opt)]
    "asm"             reduce using rule 515 (long-long-suffix-opt)
    "asm"             [reduce using rule 519 (long-suffix-opt)]
    "asm"             [reduce using rule 849 (size-suffix-opt)]
    "*="              reduce using rule 515 (long-long-suffix-opt)
    "*="              [reduce using rule 519 (long-suffix-opt)]
    "*="              [reduce using rule 849 (size-suffix-opt)]
    "/="              reduce using rule 515 (long-long-suffix-opt)
    "/="              [reduce using rule 519 (long-suffix-opt)]
    "/="              [reduce using rule 849 (size-suffix-opt)]
    "%="              reduce using rule 515 (long-long-suffix-opt)
    "%="              [reduce using rule 519 (long-suffix-opt)]
    "%="              [reduce using rule 849 (size-suffix-opt)]
    "+="              reduce using rule 515 (long-long-suffix-opt)
    "+="              [reduce using rule 519 (long-suffix-opt)]
    "+="              [reduce using rule 849 (size-suffix-opt)]
    "-="              reduce using rule 515 (long-long-suffix-opt)
    "-="              [reduce using rule 519 (long-suffix-opt)]
    "-="              [reduce using rule 849 (size-suffix-opt)]
    ">>="             reduce using rule 515 (long-long-suffix-opt)
    ">>="             [reduce using rule 519 (long-suffix-opt)]
    ">>="             [reduce using rule 849 (size-suffix-opt)]
    "<<="             reduce using rule 515 (long-long-suffix-opt)
    "<<="             [reduce using rule 519 (long-suffix-opt)]
    "<<="             [reduce using rule 849 (size-suffix-opt)]
    "&="              reduce using rule 515 (long-long-suffix-opt)
    "&="              [reduce using rule 519 (long-suffix-opt)]
    "&="              [reduce using rule 849 (size-suffix-opt)]
    "^="              reduce using rule 515 (long-long-suffix-opt)
    "^="              [reduce using rule 519 (long-suffix-opt)]
    "^="              [reduce using rule 849 (size-suffix-opt)]
    "|="              reduce using rule 515 (long-long-suffix-opt)
    "|="              [reduce using rule 519 (long-suffix-opt)]
    "|="              [reduce using rule 849 (size-suffix-opt)]
    ','               reduce using rule 515 (long-long-suffix-opt)
    ','               [reduce using rule 519 (long-suffix-opt)]
    ','               [reduce using rule 849 (size-suffix-opt)]
    "..."             reduce using rule 515 (long-long-suffix-opt)
    "..."             [reduce using rule 519 (long-suffix-opt)]
    "..."             [reduce using rule 849 (size-suffix-opt)]
    "::"              reduce using rule 515 (long-long-suffix-opt)
    "::"              [reduce using rule 519 (long-suffix-opt)]
    "::"              [reduce using rule 849 (size-suffix-opt)]
    '['               reduce using rule 515 (long-long-suffix-opt)
    '['               [reduce using rule 519 (long-suffix-opt)]
    '['               [reduce using rule 849 (size-suffix-opt)]
    ']'               reduce using rule 515 (long-long-suffix-opt)
    ']'               [reduce using rule 519 (long-suffix-opt)]
    ']'               [reduce using rule 849 (size-suffix-opt)]
    ':'               reduce using rule 515 (long-long-suffix-opt)
    ':'               [reduce using rule 519 (long-suffix-opt)]
    ':'               [reduce using rule 849 (size-suffix-opt)]
    '{'               reduce using rule 515 (long-long-suffix-opt)
    '{'               [reduce using rule 519 (long-suffix-opt)]
    '{'               [reduce using rule 849 (size-suffix-opt)]
    '}'               reduce using rule 515 (long-long-suffix-opt)
    '}'               [reduce using rule 519 (long-suffix-opt)]
    '}'               [reduce using rule 849 (size-suffix-opt)]
    "virtual"         reduce using rule 515 (long-long-suffix-opt)
    "virtual"         [reduce using rule 519 (long-suffix-opt)]
    "virtual"         [reduce using rule 849 (size-suffix-opt)]
    "class"           reduce using rule 515 (long-long-suffix-opt)
    "class"           [reduce using rule 519 (long-suffix-opt)]
    "class"           [reduce using rule 849 (size-suffix-opt)]
    "struct"          reduce using rule 515 (long-long-suffix-opt)
    "struct"          [reduce using rule 519 (long-suffix-opt)]
    "struct"          [reduce using rule 849 (size-suffix-opt)]
    "union"           reduce using rule 515 (long-long-suffix-opt)
    "union"           [reduce using rule 519 (long-suffix-opt)]
    "union"           [reduce using rule 849 (size-suffix-opt)]
    "template"        reduce using rule 515 (long-long-suffix-opt)
    "template"        [reduce using rule 519 (long-suffix-opt)]
    "template"        [reduce using rule 849 (size-suffix-opt)]
    "<=>"             reduce using rule 515 (long-long-suffix-opt)
    "<=>"             [reduce using rule 519 (long-suffix-opt)]
    "<=>"             [reduce using rule 849 (size-suffix-opt)]
    "concept"         reduce using rule 515 (long-long-suffix-opt)
    "concept"         [reduce using rule 519 (long-suffix-opt)]
    "concept"         [reduce using rule 849 (size-suffix-opt)]
    '?'               reduce using rule 515 (long-long-suffix-opt)
    '?'               [reduce using rule 519 (long-suffix-opt)]
    '?'               [reduce using rule 849 (size-suffix-opt)]
    "constexpr"       reduce using rule 515 (long-long-suffix-opt)
    "constexpr"       [reduce using rule 519 (long-suffix-opt)]
    "constexpr"       [reduce using rule 849 (size-suffix-opt)]
    "&&"              reduce using rule 515 (long-long-suffix-opt)
    "&&"              [reduce using rule 519 (long-suffix-opt)]
    "&&"              [reduce using rule 849 (size-suffix-opt)]
    "||"              reduce using rule 515 (long-long-suffix-opt)
    "||"              [reduce using rule 519 (long-suffix-opt)]
    "||"              [reduce using rule 849 (size-suffix-opt)]
    "operator"        reduce using rule 515 (long-long-suffix-opt)
    "operator"        [reduce using rule 519 (long-suffix-opt)]
    "operator"        [reduce using rule 849 (size-suffix-opt)]
    "const"           reduce using rule 515 (long-long-suffix-opt)
    "const"           [reduce using rule 519 (long-suffix-opt)]
    "const"           [reduce using rule 849 (size-suffix-opt)]
    "volatile"        reduce using rule 515 (long-long-suffix-opt)
    "volatile"        [reduce using rule 519 (long-suffix-opt)]
    "volatile"        [reduce using rule 849 (size-suffix-opt)]
    "friend"          reduce using rule 515 (long-long-suffix-opt)
    "friend"          [reduce using rule 519 (long-suffix-opt)]
    "friend"          [reduce using rule 849 (size-suffix-opt)]
    "typedef"         reduce using rule 515 (long-long-suffix-opt)
    "typedef"         [reduce using rule 519 (long-suffix-opt)]
    "typedef"         [reduce using rule 849 (size-suffix-opt)]
    "consteval"       reduce using rule 515 (long-long-suffix-opt)
    "consteval"       [reduce using rule 519 (long-suffix-opt)]
    "consteval"       [reduce using rule 849 (size-suffix-opt)]
    "constinit"       reduce using rule 515 (long-long-suffix-opt)
    "constinit"       [reduce using rule 519 (long-suffix-opt)]
    "constinit"       [reduce using rule 849 (size-suffix-opt)]
    "inline"          reduce using rule 515 (long-long-suffix-opt)
    "inline"          [reduce using rule 519 (long-suffix-opt)]
    "inline"          [reduce using rule 849 (size-suffix-opt)]
    "decltype"        reduce using rule 515 (long-long-suffix-opt)
    "decltype"        [reduce using rule 519 (long-suffix-opt)]
    "decltype"        [reduce using rule 849 (size-suffix-opt)]
    "->"              reduce using rule 515 (long-long-suffix-opt)
    "->"              [reduce using rule 519 (long-suffix-opt)]
    "->"              [reduce using rule 849 (size-suffix-opt)]
    '.'               reduce using rule 515 (long-long-suffix-opt)
    '.'               [reduce using rule 519 (long-suffix-opt)]
    '.'               [reduce using rule 849 (size-suffix-opt)]
    "enum"            reduce using rule 515 (long-long-suffix-opt)
    "enum"            [reduce using rule 519 (long-suffix-opt)]
    "enum"            [reduce using rule 849 (size-suffix-opt)]
    "=="              reduce using rule 515 (long-long-suffix-opt)
    "=="              [reduce using rule 519 (long-suffix-opt)]
    "=="              [reduce using rule 849 (size-suffix-opt)]
    "!="              reduce using rule 515 (long-long-suffix-opt)
    "!="              [reduce using rule 519 (long-suffix-opt)]
    "!="              [reduce using rule 849 (size-suffix-opt)]
    '^'               reduce using rule 515 (long-long-suffix-opt)
    '^'               [reduce using rule 519 (long-suffix-opt)]
    '^'               [reduce using rule 849 (size-suffix-opt)]
    '<'               reduce using rule 515 (long-long-suffix-opt)
    '<'               [reduce using rule 519 (long-suffix-opt)]
    '<'               [reduce using rule 849 (size-suffix-opt)]
    '>'               reduce using rule 515 (long-long-suffix-opt)
    '>'               [reduce using rule 519 (long-suffix-opt)]
    '>'               [reduce using rule 849 (size-suffix-opt)]
    "explicit"        reduce using rule 515 (long-long-suffix-opt)
    "explicit"        [reduce using rule 519 (long-suffix-opt)]
    "explicit"        [reduce using rule 849 (size-suffix-opt)]
    "export"          reduce using rule 515 (long-long-suffix-opt)
    "export"          [reduce using rule 519 (long-suffix-opt)]
    "export"          [reduce using rule 849 (size-suffix-opt)]
    "export-keyword"  reduce using rule 515 (long-long-suffix-opt)
    "export-keyword"  [reduce using rule 519 (long-suffix-opt)]
    "export-keyword"  [reduce using rule 849 (size-suffix-opt)]
    "extern"          reduce using rule 515 (long-long-suffix-opt)
    "extern"          [reduce using rule 519 (long-suffix-opt)]
    "extern"          [reduce using rule 849 (size-suffix-opt)]
    '*'               reduce using rule 515 (long-long-suffix-opt)
    '*'               [reduce using rule 519 (long-suffix-opt)]
    '*'               [reduce using rule 849 (size-suffix-opt)]
    '/'               reduce using rule 515 (long-long-suffix-opt)
    '/'               [reduce using rule 519 (long-suffix-opt)]
    '/'               [reduce using rule 849 (size-suffix-opt)]
    '%'               reduce using rule 515 (long-long-suffix-opt)
    '%'               [reduce using rule 519 (long-suffix-opt)]
    '%'               [reduce using rule 849 (size-suffix-opt)]
    '|'               reduce using rule 515 (long-long-suffix-opt)
    '|'               [reduce using rule 519 (long-suffix-opt)]
    '|'               [reduce using rule 849 (size-suffix-opt)]
    "<<"              reduce using rule 515 (long-long-suffix-opt)
    "<<"              [reduce using rule 519 (long-suffix-opt)]
    "<<"              [reduce using rule 849 (size-suffix-opt)]
    ">>"              reduce using rule 515 (long-long-suffix-opt)
    ">>"              [reduce using rule 519 (long-suffix-opt)]
    ">>"              [reduce using rule 849 (size-suffix-opt)]
    "<="              reduce using rule 515 (long-long-suffix-opt)
    "<="              [reduce using rule 519 (long-suffix-opt)]
    "<="              [reduce using rule 849 (size-suffix-opt)]
    ">="              reduce using rule 515 (long-long-suffix-opt)
    ">="              [reduce using rule 519 (long-suffix-opt)]
    ">="              [reduce using rule 849 (size-suffix-opt)]
    ".*"              reduce using rule 515 (long-long-suffix-opt)
    ".*"              [reduce using rule 519 (long-suffix-opt)]
    ".*"              [reduce using rule 849 (size-suffix-opt)]
    "->*"             reduce using rule 515 (long-long-suffix-opt)
    "->*"             [reduce using rule 519 (long-suffix-opt)]
    "->*"             [reduce using rule 849 (size-suffix-opt)]
    "try"             reduce using rule 515 (long-long-suffix-opt)
    "try"             [reduce using rule 519 (long-suffix-opt)]
    "try"             [reduce using rule 849 (size-suffix-opt)]
    "import-keyword"  reduce using rule 515 (long-long-suffix-opt)
    "import-keyword"  [reduce using rule 519 (long-suffix-opt)]
    "import-keyword"  [reduce using rule 849 (size-suffix-opt)]
    "namespace"       reduce using rule 515 (long-long-suffix-opt)
    "namespace"       [reduce using rule 519 (long-suffix-opt)]
    "namespace"       [reduce using rule 849 (size-suffix-opt)]
    "noexcept"        reduce using rule 515 (long-long-suffix-opt)
    "noexcept"        [reduce using rule 519 (long-suffix-opt)]
    "noexcept"        [reduce using rule 849 (size-suffix-opt)]
    '~'               reduce using rule 515 (long-long-suffix-opt)
    '~'               [reduce using rule 519 (long-suffix-opt)]
    '~'               [reduce using rule 849 (size-suffix-opt)]
    "++"              reduce using rule 515 (long-long-suffix-opt)
    "++"              [reduce using rule 519 (long-suffix-opt)]
    "++"              [reduce using rule 849 (size-suffix-opt)]
    "--"              reduce using rule 515 (long-long-suffix-opt)
    "--"              [reduce using rule 519 (long-suffix-opt)]
    "--"              [reduce using rule 849 (size-suffix-opt)]
    "auto"            reduce using rule 515 (long-long-suffix-opt)
    "auto"            [reduce using rule 519 (long-suffix-opt)]
    "auto"            [reduce using rule 849 (size-suffix-opt)]
    "char"            reduce using rule 515 (long-long-suffix-opt)
    "char"            [reduce using rule 519 (long-suffix-opt)]
    "char"            [reduce using rule 849 (size-suffix-opt)]
    "char8_t"         reduce using rule 515 (long-long-suffix-opt)
    "char8_t"         [reduce using rule 519 (long-suffix-opt)]
    "char8_t"         [reduce using rule 849 (size-suffix-opt)]
    "char16_t"        reduce using rule 515 (long-long-suffix-opt)
    "char16_t"        [reduce using rule 519 (long-suffix-opt)]
    "char16_t"        [reduce using rule 849 (size-suffix-opt)]
    "char32_t"        reduce using rule 515 (long-long-suffix-opt)
    "char32_t"        [reduce using rule 519 (long-suffix-opt)]
    "char32_t"        [reduce using rule 849 (size-suffix-opt)]
    "wchar_t"         reduce using rule 515 (long-long-suffix-opt)
    "wchar_t"         [reduce using rule 519 (long-suffix-opt)]
    "wchar_t"         [reduce using rule 849 (size-suffix-opt)]
    "bool"            reduce using rule 515 (long-long-suffix-opt)
    "bool"            [reduce using rule 519 (long-suffix-opt)]
    "bool"            [reduce using rule 849 (size-suffix-opt)]
    "short"           reduce using rule 515 (long-long-suffix-opt)
    "short"           [reduce using rule 519 (long-suffix-opt)]
    "short"           [reduce using rule 849 (size-suffix-opt)]
    "int"             reduce using rule 515 (long-long-suffix-opt)
    "int"             [reduce using rule 519 (long-suffix-opt)]
    "int"             [reduce using rule 849 (size-suffix-opt)]
    "long"            reduce using rule 515 (long-long-suffix-opt)
    "long"            [reduce using rule 519 (long-suffix-opt)]
    "long"            [reduce using rule 849 (size-suffix-opt)]
    "signed"          reduce using rule 515 (long-long-suffix-opt)
    "signed"          [reduce using rule 519 (long-suffix-opt)]
    "signed"          [reduce using rule 849 (size-suffix-opt)]
    "unsigned"        reduce using rule 515 (long-long-suffix-opt)
    "unsigned"        [reduce using rule 519 (long-suffix-opt)]
    "unsigned"        [reduce using rule 849 (size-suffix-opt)]
    "float"           reduce using rule 515 (long-long-suffix-opt)
    "float"           [reduce using rule 519 (long-suffix-opt)]
    "float"           [reduce using rule 849 (size-suffix-opt)]
    "double"          reduce using rule 515 (long-long-suffix-opt)
    "double"          [reduce using rule 519 (long-suffix-opt)]
    "double"          [reduce using rule 849 (size-suffix-opt)]
    "void"            reduce using rule 515 (long-long-suffix-opt)
    "void"            [reduce using rule 519 (long-suffix-opt)]
    "void"            [reduce using rule 849 (size-suffix-opt)]
    "static_assert"   reduce using rule 515 (long-long-suffix-opt)
    "static_assert"   [reduce using rule 519 (long-suffix-opt)]
    "static_assert"   [reduce using rule 849 (size-suffix-opt)]
    "static"          reduce using rule 515 (long-long-suffix-opt)
    "static"          [reduce using rule 519 (long-suffix-opt)]
    "static"          [reduce using rule 849 (size-suffix-opt)]
    "thread_local"    reduce using rule 515 (long-long-suffix-opt)
    "thread_local"    [reduce using rule 519 (long-suffix-opt)]
    "thread_local"    [reduce using rule 849 (size-suffix-opt)]
    "mutable"         reduce using rule 515 (long-long-suffix-opt)
    "mutable"         [reduce using rule 519 (long-suffix-opt)]
    "mutable"         [reduce using rule 849 (size-suffix-opt)]
    "typename"        reduce using rule 515 (long-long-suffix-opt)
    "typename"        [reduce using rule 519 (long-suffix-opt)]
    "typename"        [reduce using rule 849 (size-suffix-opt)]
    $default          reduce using rule 515 (long-long-suffix-opt)

    long-long-suffix      go to state 926
    long-long-suffix-opt  go to state 927
    long-suffix           go to state 928
    long-suffix-opt       go to state 929
    size-suffix           go to state 930
    size-suffix-opt       go to state 931


State 604

  962 user-defined-character-literal: character-literal ud-suffix •

    $default  reduce using rule 962 (user-defined-character-literal)


State 605

  140 compare-expression: compare-expression "<=>" • shift-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 932
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 606

  185 decimal-literal: decimal-literal apostrophe-opt • digit

    '0'  shift, and go to state 933
    '1'  shift, and go to state 934
    '2'  shift, and go to state 935
    '3'  shift, and go to state 936
    '4'  shift, and go to state 937
    '5'  shift, and go to state 938
    '6'  shift, and go to state 939
    '7'  shift, and go to state 940
    '8'  shift, and go to state 941
    '9'  shift, and go to state 942

    digit  go to state 943


State 607

  465 integer-literal: decimal-literal integer-suffix-opt •

    $default  reduce using rule 465 (integer-literal)


State 608

  967 user-defined-integer-literal: decimal-literal ud-suffix •

    $default  reduce using rule 967 (user-defined-integer-literal)


State 609

  373 fractional-constant: digit-sequence '.' •

    $default  reduce using rule 373 (fractional-constant)


State 610

  303 exponent-part: 'e' • sign-opt digit-sequence

    '+'  shift, and go to state 944
    '-'  shift, and go to state 945

    $default  reduce using rule 805 (sign-opt)

    sign      go to state 946
    sign-opt  go to state 947


State 611

  304 exponent-part: 'E' • sign-opt digit-sequence

    '+'  shift, and go to state 944
    '-'  shift, and go to state 945

    $default  reduce using rule 805 (sign-opt)

    sign      go to state 946
    sign-opt  go to state 948


State 612

  245 digit-sequence: digit-sequence apostrophe-opt • digit

    '0'  shift, and go to state 933
    '1'  shift, and go to state 934
    '2'  shift, and go to state 935
    '3'  shift, and go to state 936
    '4'  shift, and go to state 937
    '5'  shift, and go to state 938
    '6'  shift, and go to state 939
    '7'  shift, and go to state 940
    '8'  shift, and go to state 941
    '9'  shift, and go to state 942

    digit  go to state 949


State 613

  183 decimal-floating-point-literal: digit-sequence exponent-part • floating-point-suffix-opt
  964 user-defined-floating-point-literal: digit-sequence exponent-part • ud-suffix

    IDENTIFIER  shift, and go to state 586
    'L'         shift, and go to state 950
    'f'         shift, and go to state 951
    'l'         shift, and go to state 952
    'F'         shift, and go to state 953

    IDENTIFIER  [reduce using rule 332 (floating-point-suffix-opt)]
    $default    reduce using rule 332 (floating-point-suffix-opt)

    floating-point-suffix      go to state 954
    floating-point-suffix-opt  go to state 955
    ud-suffix                  go to state 956


State 614

  372 fractional-constant: digit-sequence-opt '.' • digit-sequence

    '0'  shift, and go to state 933
    '1'  shift, and go to state 934
    '2'  shift, and go to state 935
    '3'  shift, and go to state 936
    '4'  shift, and go to state 937
    '5'  shift, and go to state 938
    '6'  shift, and go to state 939
    '7'  shift, and go to state 940
    '8'  shift, and go to state 941
    '9'  shift, and go to state 942

    digit           go to state 299
    digit-sequence  go to state 957


State 615

  121 character-literal: encoding-prefix-opt '\'' • c-char-sequence '\''

    EXCEPT_THE_APOSTROPHE_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER  shift, and go to state 958
    '\\'                                                         shift, and go to state 707
    "\\x"                                                        shift, and go to state 708
    "\\u"                                                        shift, and go to state 709
    "\\U"                                                        shift, and go to state 710

    basic-c-char                 go to state 959
    c-char                       go to state 960
    c-char-sequence              go to state 961
    conditional-escape-sequence  go to state 712
    escape-sequence              go to state 962
    hexadecimal-escape-sequence  go to state 714
    numeric-escape-sequence      go to state 715
    octal-escape-sequence        go to state 716
    simple-escape-sequence       go to state 720
    universal-character-name     go to state 963


State 616

  285 equality-expression: equality-expression "==" • relational-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 964
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 617

  286 equality-expression: equality-expression "!=" • relational-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 965
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 618

  296 exclusive-or-expression: exclusive-or-expression '^' • and-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 966
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 619

  220 decltype-specifier: "decltype" '(' expression ')' •

    $default  reduce using rule 220 (decltype-specifier)


State 620

  317 expression: expression ',' • assignment-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 967
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 621

  306 exponent-part-opt: exponent-part •

    $default  reduce using rule 306 (exponent-part-opt)


State 622

  182 decimal-floating-point-literal: fractional-constant exponent-part-opt • floating-point-suffix-opt
  963 user-defined-floating-point-literal: fractional-constant exponent-part-opt • ud-suffix

    IDENTIFIER  shift, and go to state 586
    'L'         shift, and go to state 950
    'f'         shift, and go to state 951
    'l'         shift, and go to state 952
    'F'         shift, and go to state 953

    IDENTIFIER  [reduce using rule 332 (floating-point-suffix-opt)]
    $default    reduce using rule 332 (floating-point-suffix-opt)

    floating-point-suffix      go to state 954
    floating-point-suffix-opt  go to state 968
    ud-suffix                  go to state 969


State 623

  466 integer-literal: hexadecimal-literal integer-suffix-opt •

    $default  reduce using rule 466 (integer-literal)


State 624

  969 user-defined-integer-literal: hexadecimal-literal ud-suffix •

    $default  reduce using rule 969 (user-defined-integer-literal)


State 625

  397 hexadecimal-digit: '0' •

    $default  reduce using rule 397 (hexadecimal-digit)


State 626

  398 hexadecimal-digit: '1' •

    $default  reduce using rule 398 (hexadecimal-digit)


State 627

  399 hexadecimal-digit: '2' •

    $default  reduce using rule 399 (hexadecimal-digit)


State 628

  400 hexadecimal-digit: '3' •

    $default  reduce using rule 400 (hexadecimal-digit)


State 629

  401 hexadecimal-digit: '4' •

    $default  reduce using rule 401 (hexadecimal-digit)


State 630

  402 hexadecimal-digit: '5' •

    $default  reduce using rule 402 (hexadecimal-digit)


State 631

  403 hexadecimal-digit: '6' •

    $default  reduce using rule 403 (hexadecimal-digit)


State 632

  404 hexadecimal-digit: '7' •

    $default  reduce using rule 404 (hexadecimal-digit)


State 633

  405 hexadecimal-digit: '8' •

    $default  reduce using rule 405 (hexadecimal-digit)


State 634

  406 hexadecimal-digit: '9' •

    $default  reduce using rule 406 (hexadecimal-digit)


State 635

  411 hexadecimal-digit: 'e' •

    $default  reduce using rule 411 (hexadecimal-digit)


State 636

  417 hexadecimal-digit: 'E' •

    $default  reduce using rule 417 (hexadecimal-digit)


State 637

  412 hexadecimal-digit: 'f' •

    $default  reduce using rule 412 (hexadecimal-digit)


State 638

  418 hexadecimal-digit: 'F' •

    $default  reduce using rule 418 (hexadecimal-digit)


State 639

  407 hexadecimal-digit: 'a' •

    $default  reduce using rule 407 (hexadecimal-digit)


State 640

  408 hexadecimal-digit: 'b' •

    $default  reduce using rule 408 (hexadecimal-digit)


State 641

  409 hexadecimal-digit: 'c' •

    $default  reduce using rule 409 (hexadecimal-digit)


State 642

  410 hexadecimal-digit: 'd' •

    $default  reduce using rule 410 (hexadecimal-digit)


State 643

  413 hexadecimal-digit: 'A' •

    $default  reduce using rule 413 (hexadecimal-digit)


State 644

  414 hexadecimal-digit: 'B' •

    $default  reduce using rule 414 (hexadecimal-digit)


State 645

  415 hexadecimal-digit: 'C' •

    $default  reduce using rule 415 (hexadecimal-digit)


State 646

  416 hexadecimal-digit: 'D' •

    $default  reduce using rule 416 (hexadecimal-digit)


State 647

  419 hexadecimal-digit-sequence: hexadecimal-digit •

    $default  reduce using rule 419 (hexadecimal-digit-sequence)


State 648

  420 hexadecimal-digit-sequence: hexadecimal-digit-sequence • apostrophe-opt hexadecimal-digit
  422 hexadecimal-digit-sequence-opt: hexadecimal-digit-sequence •
  426 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence • binary-exponent-part floating-point-suffix-opt
  428 hexadecimal-fractional-constant: hexadecimal-digit-sequence • '.'
  429 hexadecimal-literal: hexadecimal-prefix hexadecimal-digit-sequence •
  966 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence • binary-exponent-part ud-suffix

    '\''  shift, and go to state 588
    'p'   shift, and go to state 970
    'P'   shift, and go to state 971
    '.'   shift, and go to state 972

    '0'       reduce using rule 21 (apostrophe-opt)
    '1'       reduce using rule 21 (apostrophe-opt)
    '.'       [reduce using rule 422 (hexadecimal-digit-sequence-opt)]
    '.'       [reduce using rule 429 (hexadecimal-literal)]
    '2'       reduce using rule 21 (apostrophe-opt)
    '3'       reduce using rule 21 (apostrophe-opt)
    '4'       reduce using rule 21 (apostrophe-opt)
    '5'       reduce using rule 21 (apostrophe-opt)
    '6'       reduce using rule 21 (apostrophe-opt)
    '7'       reduce using rule 21 (apostrophe-opt)
    '8'       reduce using rule 21 (apostrophe-opt)
    '9'       reduce using rule 21 (apostrophe-opt)
    'e'       reduce using rule 21 (apostrophe-opt)
    'E'       reduce using rule 21 (apostrophe-opt)
    'f'       reduce using rule 21 (apostrophe-opt)
    'F'       reduce using rule 21 (apostrophe-opt)
    'a'       reduce using rule 21 (apostrophe-opt)
    'b'       reduce using rule 21 (apostrophe-opt)
    'c'       reduce using rule 21 (apostrophe-opt)
    'd'       reduce using rule 21 (apostrophe-opt)
    'A'       reduce using rule 21 (apostrophe-opt)
    'B'       reduce using rule 21 (apostrophe-opt)
    'C'       reduce using rule 21 (apostrophe-opt)
    'D'       reduce using rule 21 (apostrophe-opt)
    $default  reduce using rule 429 (hexadecimal-literal)

    apostrophe-opt        go to state 973
    binary-exponent-part  go to state 974


State 649

  427 hexadecimal-fractional-constant: hexadecimal-digit-sequence-opt • '.' hexadecimal-digit-sequence

    '.'  shift, and go to state 975


State 650

  425 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant • binary-exponent-part floating-point-suffix-opt
  965 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant • binary-exponent-part ud-suffix

    'p'  shift, and go to state 970
    'P'  shift, and go to state 971

    binary-exponent-part  go to state 976


State 651

  439 inclusive-or-expression: inclusive-or-expression '|' • exclusive-or-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 977
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 652

  493 lambda-declarator: '(' • parameter-declaration-clause ')' lambda-specifiers requires-clause-opt

    ')'       reduce using rule 700 (parameter-declaration-list-opt)
    "..."     reduce using rule 700 (parameter-declaration-list-opt)
    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq         go to state 185
    attribute-specifier-seq-opt     go to state 233
    parameter-declaration           go to state 762
    parameter-declaration-clause    go to state 978
    parameter-declaration-list      go to state 764
    parameter-declaration-list-opt  go to state 765


State 653

  495 lambda-expression: lambda-introducer '<' • template-parameter-list '>' requires-clause-opt lambda-declarator compound-statement

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 229
    "template"  shift, and go to state 230
    "decltype"  shift, and go to state 18
    "typename"  shift, and go to state 232

    IDENTIFIER  [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "::"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 233
    class-name                   go to state 54
    decltype-specifier           go to state 126
    enum-name                    go to state 70
    namespace-alias              go to state 86
    namespace-name               go to state 89
    nested-name-specifier        go to state 127
    nested-name-specifier-opt    go to state 234
    parameter-declaration        go to state 235
    simple-template-id           go to state 97
    template-head                go to state 236
    template-name                go to state 103
    template-parameter           go to state 237
    template-parameter-list      go to state 979
    type-constraint              go to state 239
    type-name                    go to state 107
    type-parameter               go to state 240
    type-parameter-key           go to state 241
    typedef-name                 go to state 109


State 654

  198 decl-specifier-seq-opt: decl-specifier-seq •

    $default  reduce using rule 198 (decl-specifier-seq-opt)


State 655

  497 lambda-specifiers: decl-specifier-seq-opt • noexcept-specifier-opt attribute-specifier-seq-opt trailing-return-type-opt

    "noexcept"  shift, and go to state 980

    $default  reduce using rule 605 (noexcept-specifier-opt)

    noexcept-specifier      go to state 981
    noexcept-specifier-opt  go to state 982


State 656

  494 lambda-expression: lambda-introducer lambda-declarator • compound-statement

    '{'  shift, and go to state 983

    compound-statement  go to state 984


State 657

  492 lambda-declarator: lambda-specifiers •

    $default  reduce using rule 492 (lambda-declarator)


State 658

  883 template-id: literal-operator-id '<' • template-argument-list-opt '>'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 116
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    '>'         reduce using rule 876 (template-argument-list-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-key                            go to state 463
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 464
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 465
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    string-literal                       go to state 339
    template-argument                    go to state 467
    template-argument-list               go to state 468
    template-argument-list-opt           go to state 985
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-id                              go to state 470
    type-name                            go to state 107
    type-specifier                       go to state 471
    type-specifier-seq                   go to state 472
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 659

  510 logical-and-expression: logical-and-expression "&&" • inclusive-or-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 986
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 660

   30 assignment-operator: '=' •

    $default  reduce using rule 30 (assignment-operator)


State 661

   31 assignment-operator: "*=" •

    $default  reduce using rule 31 (assignment-operator)


State 662

   32 assignment-operator: "/=" •

    $default  reduce using rule 32 (assignment-operator)


State 663

   33 assignment-operator: "%=" •

    $default  reduce using rule 33 (assignment-operator)


State 664

   34 assignment-operator: "+=" •

    $default  reduce using rule 34 (assignment-operator)


State 665

   35 assignment-operator: "-=" •

    $default  reduce using rule 35 (assignment-operator)


State 666

   36 assignment-operator: ">>=" •

    $default  reduce using rule 36 (assignment-operator)


State 667

   37 assignment-operator: "<<=" •

    $default  reduce using rule 37 (assignment-operator)


State 668

   38 assignment-operator: "&=" •

    $default  reduce using rule 38 (assignment-operator)


State 669

   39 assignment-operator: "^=" •

    $default  reduce using rule 39 (assignment-operator)


State 670

   40 assignment-operator: "|=" •

    $default  reduce using rule 40 (assignment-operator)


State 671

  152 conditional-expression: logical-or-expression '?' • expression ':' assignment-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 987
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 672

  512 logical-or-expression: logical-or-expression "||" • logical-and-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 988
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 673

   27 assignment-expression: logical-or-expression assignment-operator • initializer-clause

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 989
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 674

  563 multiplicative-expression: multiplicative-expression '*' • pm-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 990
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 675

  564 multiplicative-expression: multiplicative-expression '/' • pm-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 991
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 676

  565 multiplicative-expression: multiplicative-expression '%' • pm-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 992
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 677

  580 nested-name-specifier: nested-name-specifier template-opt • simple-template-id "::"
  752 qualified-id: nested-name-specifier template-opt • unqualified-id

    IDENTIFIER  shift, and go to state 993
    "operator"  shift, and go to state 256
    '~'         shift, and go to state 398

    conversion-function-id  go to state 295
    literal-operator-id     go to state 318
    operator-function-id    go to state 327
    simple-template-id      go to state 994
    template-id             go to state 340
    template-name           go to state 103
    unqualified-id          go to state 995


State 678

  644 octal-literal: octal-literal apostrophe-opt • octal-digit

    '0'  shift, and go to state 996
    '1'  shift, and go to state 997
    '2'  shift, and go to state 998
    '3'  shift, and go to state 999
    '4'  shift, and go to state 1000
    '5'  shift, and go to state 1001
    '6'  shift, and go to state 1002
    '7'  shift, and go to state 1003

    octal-digit  go to state 1004


State 679

  464 integer-literal: octal-literal integer-suffix-opt •

    $default  reduce using rule 464 (integer-literal)


State 680

  968 user-defined-integer-literal: octal-literal ud-suffix •

    $default  reduce using rule 968 (user-defined-integer-literal)


State 681

  882 template-id: operator-function-id '<' • template-argument-list-opt '>'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 116
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    '>'         reduce using rule 876 (template-argument-list-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-key                            go to state 463
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 464
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 465
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    string-literal                       go to state 339
    template-argument                    go to state 467
    template-argument-list               go to state 468
    template-argument-list-opt           go to state 1005
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-id                              go to state 470
    type-name                            go to state 107
    type-specifier                       go to state 471
    type-specifier-seq                   go to state 472
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 682

  706 pm-expression: pm-expression ".*" • cast-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 1006
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 683

  707 pm-expression: pm-expression "->*" • cast-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 1007
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 684

  711 postfix-expression: postfix-expression '(' • expression-list-opt ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ')'         reduce using rule 319 (expression-list-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression-list                      go to state 1008
    expression-list-opt                  go to state 1009
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 789
    initializer-list                     go to state 790
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 685

  710 postfix-expression: postfix-expression '[' • expression-list-opt ']'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ']'         reduce using rule 319 (expression-list-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression-list                      go to state 1008
    expression-list-opt                  go to state 1010
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 789
    initializer-list                     go to state 790
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 686

  717 postfix-expression: postfix-expression "->" • template-opt id-expression

    "template"  shift, and go to state 352

    $default  reduce using rule 885 (template-opt)

    template-opt  go to state 1011


State 687

  716 postfix-expression: postfix-expression '.' • template-opt id-expression

    "template"  shift, and go to state 352

    $default  reduce using rule 885 (template-opt)

    template-opt  go to state 1012


State 688

  718 postfix-expression: postfix-expression "++" •

    $default  reduce using rule 718 (postfix-expression)


State 689

  719 postfix-expression: postfix-expression "--" •

    $default  reduce using rule 719 (postfix-expression)


State 690

  765 relational-expression: relational-expression '<' • compare-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 1013
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 691

  766 relational-expression: relational-expression '>' • compare-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 1014
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 692

  767 relational-expression: relational-expression "<=" • compare-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 1015
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 693

  768 relational-expression: relational-expression ">=" • compare-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 1016
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 694

  228 delete-expression: scope-opt "delete" • cast-expression
  229                  | scope-opt "delete" • '[' ']' cast-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 1017
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 1018
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 695

  589 new-expression: scope-opt "new" • new-placement-opt new-type-id new-initializer-opt
  590               | scope-opt "new" • new-placement-opt '(' type-id ')' new-initializer-opt

    '('  shift, and go to state 1019

    '('       [reduce using rule 596 (new-placement-opt)]
    $default  reduce using rule 596 (new-placement-opt)

    new-placement      go to state 1020
    new-placement-opt  go to state 1021


State 696

  801 shift-expression: shift-expression "<<" • additive-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 1022
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 697

  802 shift-expression: shift-expression ">>" • additive-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 1023
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 698

  712 postfix-expression: simple-type-specifier '(' • expression-list-opt ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ')'         reduce using rule 319 (expression-list-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression-list                      go to state 1008
    expression-list-opt                  go to state 1024
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 789
    initializer-list                     go to state 790
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 699

  714 postfix-expression: simple-type-specifier braced-init-list •

    $default  reduce using rule 714 (postfix-expression)


State 700

  975 user-defined-string-literal: string-literal ud-suffix •

    $default  reduce using rule 975 (user-defined-string-literal)


State 701

  713 postfix-expression: typename-specifier '(' • expression-list-opt ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ')'         reduce using rule 319 (expression-list-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression-list                      go to state 1008
    expression-list-opt                  go to state 1025
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 789
    initializer-list                     go to state 790
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 702

  715 postfix-expression: typename-specifier braced-init-list •

    $default  reduce using rule 715 (postfix-expression)


State 703

  931 unary-expression: unary-operator cast-expression •

    $default  reduce using rule 931 (unary-expression)


State 704

  299 explicit-specifier: "explicit" '(' constant-expression ')' •

    $default  reduce using rule 299 (explicit-specifier)


State 705

  308 export-declaration: "export" '{' declaration-seq-opt '}' •

    $default  reduce using rule 308 (export-declaration)


State 706

   82 basic-s-char: EXCEPT_THE_QUOTATION_MARK_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER •

    $default  reduce using rule 82 (basic-s-char)


State 707

  149 conditional-escape-sequence: '\\' • conditional-escape-sequence-char
  640 octal-escape-sequence: '\\' • octal-digit
  641                      | '\\' • octal-digit octal-digit
  642                      | '\\' • octal-digit octal-digit octal-digit
  814 simple-escape-sequence: '\\' • simple-escape-sequence-char

    NOT_AN_OCTAL_DIGIT_A_SIMPLE_ESCAPE_SEQUENCE_CHAR_OR_THE_CHARACTERS_U_U_OR_X  shift, and go to state 1026
    '\''                                                                         shift, and go to state 1027
    '0'                                                                          shift, and go to state 996
    '1'                                                                          shift, and go to state 997
    '\\'                                                                         shift, and go to state 1028
    '?'                                                                          shift, and go to state 1029
    '2'                                                                          shift, and go to state 998
    '3'                                                                          shift, and go to state 999
    '4'                                                                          shift, and go to state 1000
    '5'                                                                          shift, and go to state 1001
    '6'                                                                          shift, and go to state 1002
    '7'                                                                          shift, and go to state 1003
    'f'                                                                          shift, and go to state 1030
    '"'                                                                          shift, and go to state 1031
    'a'                                                                          shift, and go to state 1032
    'b'                                                                          shift, and go to state 1033
    'n'                                                                          shift, and go to state 1034
    'r'                                                                          shift, and go to state 1035
    't'                                                                          shift, and go to state 1036
    'v'                                                                          shift, and go to state 1037

    conditional-escape-sequence-char  go to state 1038
    octal-digit                       go to state 1039
    simple-escape-sequence-char       go to state 1040


State 708

  423 hexadecimal-escape-sequence: "\\x" • hexadecimal-digit

    '0'  shift, and go to state 625
    '1'  shift, and go to state 626
    '2'  shift, and go to state 627
    '3'  shift, and go to state 628
    '4'  shift, and go to state 629
    '5'  shift, and go to state 630
    '6'  shift, and go to state 631
    '7'  shift, and go to state 632
    '8'  shift, and go to state 633
    '9'  shift, and go to state 634
    'e'  shift, and go to state 635
    'E'  shift, and go to state 636
    'f'  shift, and go to state 637
    'F'  shift, and go to state 638
    'a'  shift, and go to state 639
    'b'  shift, and go to state 640
    'c'  shift, and go to state 641
    'd'  shift, and go to state 642
    'A'  shift, and go to state 643
    'B'  shift, and go to state 644
    'C'  shift, and go to state 645
    'D'  shift, and go to state 646

    hexadecimal-digit  go to state 1041


State 709

  948 universal-character-name: "\\u" • hex-quad

    '0'  shift, and go to state 625
    '1'  shift, and go to state 626
    '2'  shift, and go to state 627
    '3'  shift, and go to state 628
    '4'  shift, and go to state 629
    '5'  shift, and go to state 630
    '6'  shift, and go to state 631
    '7'  shift, and go to state 632
    '8'  shift, and go to state 633
    '9'  shift, and go to state 634
    'e'  shift, and go to state 635
    'E'  shift, and go to state 636
    'f'  shift, and go to state 637
    'F'  shift, and go to state 638
    'a'  shift, and go to state 639
    'b'  shift, and go to state 640
    'c'  shift, and go to state 641
    'd'  shift, and go to state 642
    'A'  shift, and go to state 643
    'B'  shift, and go to state 644
    'C'  shift, and go to state 645
    'D'  shift, and go to state 646

    hex-quad           go to state 1042
    hexadecimal-digit  go to state 1043


State 710

  949 universal-character-name: "\\U" • hex-quad hex-quad

    '0'  shift, and go to state 625
    '1'  shift, and go to state 626
    '2'  shift, and go to state 627
    '3'  shift, and go to state 628
    '4'  shift, and go to state 629
    '5'  shift, and go to state 630
    '6'  shift, and go to state 631
    '7'  shift, and go to state 632
    '8'  shift, and go to state 633
    '9'  shift, and go to state 634
    'e'  shift, and go to state 635
    'E'  shift, and go to state 636
    'f'  shift, and go to state 637
    'F'  shift, and go to state 638
    'a'  shift, and go to state 639
    'b'  shift, and go to state 640
    'c'  shift, and go to state 641
    'd'  shift, and go to state 642
    'A'  shift, and go to state 643
    'B'  shift, and go to state 644
    'C'  shift, and go to state 645
    'D'  shift, and go to state 646

    hex-quad           go to state 1044
    hexadecimal-digit  go to state 1043


State 711

  786 s-char: basic-s-char •

    $default  reduce using rule 786 (s-char)


State 712

  289 escape-sequence: conditional-escape-sequence •

    $default  reduce using rule 289 (escape-sequence)


State 713

  787 s-char: escape-sequence •

    $default  reduce using rule 787 (s-char)


State 714

  424 hexadecimal-escape-sequence: hexadecimal-escape-sequence • hexadecimal-digit
  631 numeric-escape-sequence: hexadecimal-escape-sequence •

    '0'  shift, and go to state 625
    '1'  shift, and go to state 626
    '2'  shift, and go to state 627
    '3'  shift, and go to state 628
    '4'  shift, and go to state 629
    '5'  shift, and go to state 630
    '6'  shift, and go to state 631
    '7'  shift, and go to state 632
    '8'  shift, and go to state 633
    '9'  shift, and go to state 634
    'e'  shift, and go to state 635
    'E'  shift, and go to state 636
    'f'  shift, and go to state 637
    'F'  shift, and go to state 638
    'a'  shift, and go to state 639
    'b'  shift, and go to state 640
    'c'  shift, and go to state 641
    'd'  shift, and go to state 642
    'A'  shift, and go to state 643
    'B'  shift, and go to state 644
    'C'  shift, and go to state 645
    'D'  shift, and go to state 646

    $default  reduce using rule 631 (numeric-escape-sequence)

    hexadecimal-digit  go to state 1045


State 715

  288 escape-sequence: numeric-escape-sequence •

    $default  reduce using rule 288 (escape-sequence)


State 716

  630 numeric-escape-sequence: octal-escape-sequence •

    $default  reduce using rule 630 (numeric-escape-sequence)


State 717

  789 s-char-sequence: s-char •

    $default  reduce using rule 789 (s-char-sequence)


State 718

  790 s-char-sequence: s-char-sequence • s-char
  792 s-char-sequence-opt: s-char-sequence •

    EXCEPT_THE_QUOTATION_MARK_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER  shift, and go to state 706
    '\\'                                                             shift, and go to state 707
    "\\x"                                                            shift, and go to state 708
    "\\u"                                                            shift, and go to state 709
    "\\U"                                                            shift, and go to state 710

    $default  reduce using rule 792 (s-char-sequence-opt)

    basic-s-char                 go to state 711
    conditional-escape-sequence  go to state 712
    escape-sequence              go to state 713
    hexadecimal-escape-sequence  go to state 714
    numeric-escape-sequence      go to state 715
    octal-escape-sequence        go to state 716
    s-char                       go to state 1046
    simple-escape-sequence       go to state 720
    universal-character-name     go to state 721


State 719

  869 string-literal: encoding-prefix-opt '"' s-char-sequence-opt • '"'

    '"'  shift, and go to state 1047


State 720

  287 escape-sequence: simple-escape-sequence •

    $default  reduce using rule 287 (escape-sequence)


State 721

  788 s-char: universal-character-name •

    $default  reduce using rule 788 (s-char)


State 722

  759 raw-string: '"' • d-char-sequence-opt '(' r-char-sequence-opt ')' d-char-sequence-opt '"'

    EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE  shift, and go to state 1048

    $default  reduce using rule 180 (d-char-sequence-opt)

    d-char               go to state 1049
    d-char-sequence      go to state 1050
    d-char-sequence-opt  go to state 1051


State 723

  870 string-literal: encoding-prefix-opt 'R' raw-string •

    $default  reduce using rule 870 (string-literal)


State 724

  498 linkage-specification: "extern" string-literal '{' declaration-seq-opt • '}'

    '}'  shift, and go to state 1052


State 725

  559 module-partition: ':' module-name-qualifier-opt IDENTIFIER •

    $default  reduce using rule 559 (module-partition)


State 726

  391 header-name: '<' "h-char-sequence" '>' •

    $default  reduce using rule 391 (header-name)


State 727

  392 header-name: '"' q-char-sequence '"' •

    $default  reduce using rule 392 (header-name)


State 728

  751 q-char-sequence: q-char-sequence q-char •

    $default  reduce using rule 751 (q-char-sequence)


State 729

  553 module-import-declaration: "import-keyword" header-name attribute-specifier-seq-opt ';' •

    $default  reduce using rule 553 (module-import-declaration)


State 730

  551 module-import-declaration: "import-keyword" module-name attribute-specifier-seq-opt ';' •

    $default  reduce using rule 551 (module-import-declaration)


State 731

  556 module-name-qualifier: module-name-qualifier IDENTIFIER '.' •

    $default  reduce using rule 556 (module-name-qualifier)


State 732

  552 module-import-declaration: "import-keyword" module-partition attribute-specifier-seq-opt ';' •

    $default  reduce using rule 552 (module-import-declaration)


State 733

  753 qualified-namespace-specifier: nested-name-specifier-opt • namespace-name

    IDENTIFIER  shift, and go to state 1053

    namespace-alias  go to state 86
    namespace-name   go to state 1054


State 734

  568 namespace-alias-definition: "namespace" IDENTIFIER '=' qualified-namespace-specifier • ';'

    ';'  shift, and go to state 1055


State 735

  462 inline-opt: "inline" •

    $default  reduce using rule 462 (inline-opt)


State 736

  257 enclosing-namespace-specifier: enclosing-namespace-specifier "::" inline-opt • IDENTIFIER
  583 nested-namespace-definition: "namespace" enclosing-namespace-specifier "::" inline-opt • IDENTIFIER '{' namespace-body '}'

    IDENTIFIER  shift, and go to state 1056


State 737

  863 static_assert-declaration: "static_assert" '(' constant-expression ')' • ';'

    ';'  shift, and go to state 1057


State 738

  864 static_assert-declaration: "static_assert" '(' constant-expression ',' • string-literal ')' ';'

    "u8"  shift, and go to state 133
    'u'   shift, and go to state 134
    'U'   shift, and go to state 135
    'L'   shift, and go to state 136

    $default  reduce using rule 262 (encoding-prefix-opt)

    encoding-prefix      go to state 137
    encoding-prefix-opt  go to state 138
    string-literal       go to state 1058


State 739

  580 nested-name-specifier: nested-name-specifier template-opt simple-template-id • "::"
  928 typename-specifier: "typename" nested-name-specifier template-opt simple-template-id •

    "::"  shift, and go to state 818

    "::"      [reduce using rule 928 (typename-specifier)]
    $default  reduce using rule 928 (typename-specifier)


State 740

  812 simple-declaration: attribute-specifier-seq decl-specifier-seq init-declarator-list ';' •

    $default  reduce using rule 812 (simple-declaration)


State 741

  270 enum-head-name-opt: enum-head-name •

    $default  reduce using rule 270 (enum-head-name-opt)


State 742

  980 using-directive: attribute-specifier-seq-opt "using" "namespace" nested-name-specifier-opt • namespace-name ';'

    IDENTIFIER  shift, and go to state 1053

    namespace-alias  go to state 86
    namespace-name   go to state 1059


State 743

   18 alignment-specifier: "alignas" '(' constant-expression • eclipse-opt ')'

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 1060


State 744

   17 alignment-specifier: "alignas" '(' type-id • eclipse-opt ')'

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 1061


State 745

  625 noptr-declarator: noptr-declarator parameters-and-qualifiers •

    $default  reduce using rule 625 (noptr-declarator)


State 746

  627 noptr-declarator: '(' ptr-declarator ')' •

    $default  reduce using rule 627 (noptr-declarator)


State 747

   23 asm-declaration: attribute-specifier-seq-opt "asm" '(' string-literal • ')' ';'

    ')'  shift, and go to state 1062


State 748

   61 attribute-using-prefix: "using" • attribute-namespace ':'

    IDENTIFIER  shift, and go to state 1063

    attribute-namespace  go to state 1064


State 749

   63 attribute-using-prefix-opt: attribute-using-prefix •

    $default  reduce using rule 63 (attribute-using-prefix-opt)


State 750

   54 attribute-specifier: '[' '[' attribute-using-prefix-opt • attribute-list ']' ']'

    IDENTIFIER  shift, and go to state 1065

    $default  reduce using rule 51 (attribute-opt)

    attribute               go to state 1066
    attribute-list          go to state 1067
    attribute-namespace     go to state 1068
    attribute-opt           go to state 1069
    attribute-scoped-token  go to state 1070
    attribute-token         go to state 1071


State 751

  174 cv-qualifier-seq: cv-qualifier • cv-qualifier-seq-opt

    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12

    "const"     [reduce using rule 175 (cv-qualifier-seq-opt)]
    "volatile"  [reduce using rule 175 (cv-qualifier-seq-opt)]
    $default    reduce using rule 175 (cv-qualifier-seq-opt)

    cv-qualifier          go to state 751
    cv-qualifier-seq      go to state 752
    cv-qualifier-seq-opt  go to state 1072


State 752

  176 cv-qualifier-seq-opt: cv-qualifier-seq •

    $default  reduce using rule 176 (cv-qualifier-seq-opt)


State 753

  742 ptr-operator: '*' attribute-specifier-seq-opt cv-qualifier-seq-opt •

    $default  reduce using rule 742 (ptr-operator)


State 754

  813 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt '[' • identifier-list ']' initializer ';'

    IDENTIFIER  shift, and go to state 1073

    identifier-list  go to state 1074


State 755

  983 virt-specifier: "final" •

    $default  reduce using rule 983 (virt-specifier)


State 756

  982 virt-specifier: "override" •

    $default  reduce using rule 982 (virt-specifier)


State 757

  379 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator requires-clause • function-body

    '='    shift, and go to state 1075
    ':'    shift, and go to state 1076
    "try"  shift, and go to state 1077

    $default  reduce using rule 170 (ctor-initializer-opt)

    ctor-initializer      go to state 1078
    ctor-initializer-opt  go to state 1079
    function-body         go to state 1080
    function-try-block    go to state 1081


State 758

  984 virt-specifier-seq: virt-specifier •

    $default  reduce using rule 984 (virt-specifier-seq)


State 759

  985 virt-specifier-seq: virt-specifier-seq • virt-specifier
  987 virt-specifier-seq-opt: virt-specifier-seq •

    "final"     shift, and go to state 755
    "override"  shift, and go to state 756

    $default  reduce using rule 987 (virt-specifier-seq-opt)

    virt-specifier  go to state 1082


State 760

  378 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator virt-specifier-seq-opt • function-body

    '='    shift, and go to state 1075
    ':'    shift, and go to state 1076
    "try"  shift, and go to state 1077

    $default  reduce using rule 170 (ctor-initializer-opt)

    ctor-initializer      go to state 1078
    ctor-initializer-opt  go to state 1079
    function-body         go to state 1083
    function-try-block    go to state 1081


State 761

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  745 ptr-operator: nested-name-specifier '*' attribute-specifier-seq-opt • cv-qualifier-seq-opt

    "alignas"   shift, and go to state 165
    '['         shift, and go to state 170
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12

    "alignas"   [reduce using rule 175 (cv-qualifier-seq-opt)]
    '['         [reduce using rule 175 (cv-qualifier-seq-opt)]
    "const"     [reduce using rule 175 (cv-qualifier-seq-opt)]
    "volatile"  [reduce using rule 175 (cv-qualifier-seq-opt)]
    $default    reduce using rule 175 (cv-qualifier-seq-opt)

    alignment-specifier   go to state 173
    attribute-specifier   go to state 174
    cv-qualifier          go to state 751
    cv-qualifier-seq      go to state 752
    cv-qualifier-seq-opt  go to state 1084


State 762

  698 parameter-declaration-list: parameter-declaration •

    $default  reduce using rule 698 (parameter-declaration-list)


State 763

  702 parameters-and-qualifiers: '(' parameter-declaration-clause • ')' cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt

    ')'  shift, and go to state 1085


State 764

  697 parameter-declaration-clause: parameter-declaration-list • ',' "..."
  699 parameter-declaration-list: parameter-declaration-list • ',' parameter-declaration
  701 parameter-declaration-list-opt: parameter-declaration-list •

    ','  shift, and go to state 1086

    $default  reduce using rule 701 (parameter-declaration-list-opt)


State 765

  696 parameter-declaration-clause: parameter-declaration-list-opt • eclipse-opt

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 1087


State 766

  155 constant-expression-opt: constant-expression •

    $default  reduce using rule 155 (constant-expression-opt)


State 767

  626 noptr-declarator: noptr-declarator '[' constant-expression-opt • ']' attribute-specifier-seq-opt

    ']'  shift, and go to state 1088


State 768

  894 trailing-return-type: "->" • type-id

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 116
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    class-key                   go to state 463
    class-name                  go to state 54
    cv-qualifier                go to state 56
    decltype-specifier          go to state 62
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-name                   go to state 70
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-id                     go to state 1089
    type-name                   go to state 107
    type-specifier              go to state 471
    type-specifier-seq          go to state 472
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 769

  218 declarator: noptr-declarator parameters-and-qualifiers trailing-return-type •

    $default  reduce using rule 218 (declarator)


State 770

  547 member-specification: access-specifier ':' • member-specification-opt

    "private"        shift, and go to state 406
    "protected"      shift, and go to state 407
    "public"         shift, and go to state 408
    "using"          shift, and go to state 2
    ';'              shift, and go to state 3
    "template"       shift, and go to state 9
    "enum"           shift, and go to state 409
    "explicit"       shift, and go to state 20
    "static_assert"  shift, and go to state 41

    IDENTIFIER  reduce using rule 57 (attribute-specifier-seq-opt)
    IDENTIFIER  [reduce using rule 301 (explicit-specifier-opt)]
    ';'         [reduce using rule 57 (attribute-specifier-seq-opt)]
    '}'         reduce using rule 548 (member-specification-opt)
    "enum"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    access-specifier             go to state 410
    alias-declaration            go to state 411
    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 412
    deduction-guide              go to state 413
    empty-declaration            go to state 414
    enum-key                     go to state 415
    explicit-specialization      go to state 416
    explicit-specifier           go to state 417
    explicit-specifier-opt       go to state 75
    function-definition          go to state 418
    member-declaration           go to state 419
    member-specification         go to state 420
    member-specification-opt     go to state 1090
    opaque-enum-declaration      go to state 422
    static_assert-declaration    go to state 423
    template-declaration         go to state 424
    template-head                go to state 102
    using-declaration            go to state 425
    using-enum-declaration       go to state 426


State 771

  378 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt • declarator virt-specifier-seq-opt function-body
  379                    | attribute-specifier-seq-opt decl-specifier-seq-opt • declarator requires-clause function-body
  527 member-declaration: attribute-specifier-seq-opt decl-specifier-seq-opt • member-declarator-list-opt ';'

    IDENTIFIER  shift, and go to state 1091
    '('         shift, and go to state 166
    '&'         shift, and go to state 167
    "..."       shift, and go to state 169
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    ';'         reduce using rule 544 (member-declarator-list-opt)
    "::"        [reduce using rule 248 (eclipse-opt)]
    "operator"  reduce using rule 248 (eclipse-opt)
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    '~'         reduce using rule 248 (eclipse-opt)
    $default    reduce using rule 436 (identifier-opt)

    class-name                  go to state 54
    declarator                  go to state 1092
    declarator-id               go to state 178
    decltype-specifier          go to state 126
    eclipse-opt                 go to state 179
    enum-name                   go to state 70
    identifier-opt              go to state 1093
    member-declarator           go to state 1094
    member-declarator-list      go to state 1095
    member-declarator-list-opt  go to state 1096
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 195
    noptr-declarator            go to state 181
    ptr-declarator              go to state 182
    ptr-operator                go to state 183
    simple-template-id          go to state 97
    template-name               go to state 103
    type-name                   go to state 107
    typedef-name                go to state 109


State 772

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  645 opaque-enum-declaration: enum-key attribute-specifier-seq-opt • enum-head-name enum-base-opt ';'

    IDENTIFIER  shift, and go to state 1
    "alignas"   shift, and go to state 165
    "::"        shift, and go to state 4
    '['         shift, and go to state 170
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]

    alignment-specifier        go to state 173
    attribute-specifier        go to state 174
    class-name                 go to state 54
    decltype-specifier         go to state 126
    enum-head-name             go to state 1097
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 127
    nested-name-specifier-opt  go to state 451
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 773

  546 member-specification: member-declaration member-specification-opt •

    $default  reduce using rule 546 (member-specification)


State 774

  133 class-specifier: class-head '{' member-specification-opt '}' •

    $default  reduce using rule 133 (class-specifier)


State 775

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
   76 base-specifier: attribute-specifier-seq-opt • class-or-decltype
   77               | attribute-specifier-seq-opt • "virtual" access-specifier-opt class-or-decltype
   78               | attribute-specifier-seq-opt • access-specifier virtual-opt class-or-decltype

    IDENTIFIER   shift, and go to state 1
    "private"    shift, and go to state 406
    "protected"  shift, and go to state 407
    "public"     shift, and go to state 408
    "alignas"    shift, and go to state 165
    "::"         shift, and go to state 4
    '['          shift, and go to state 170
    "virtual"    shift, and go to state 1098
    "decltype"   shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]

    access-specifier           go to state 1099
    alignment-specifier        go to state 173
    attribute-specifier        go to state 174
    class-name                 go to state 54
    class-or-decltype          go to state 1100
    decltype-specifier         go to state 1101
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 1102
    nested-name-specifier-opt  go to state 1103
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 776

   79 base-specifier-list: base-specifier • eclipse-opt

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 1104


State 777

   73 base-clause: ':' base-specifier-list •
   80 base-specifier-list: base-specifier-list • ',' base-specifier eclipse-opt

    ','  shift, and go to state 1105

    $default  reduce using rule 73 (base-clause)


State 778

  134 class-virt-specifier: "final" •

    $default  reduce using rule 134 (class-virt-specifier)


State 779

  136 class-virt-specifier-opt: class-virt-specifier •

    $default  reduce using rule 136 (class-virt-specifier-opt)


State 780

  122 class-head: class-key attribute-specifier-seq-opt class-head-name class-virt-specifier-opt • base-clause-opt

    ':'  shift, and go to state 427

    $default  reduce using rule 74 (base-clause-opt)

    base-clause      go to state 428
    base-clause-opt  go to state 1106


State 781

  128 class-name: IDENTIFIER •
  251 elaborated-type-specifier: class-key attribute-specifier-seq-opt nested-name-specifier-opt IDENTIFIER •
  884 template-name: IDENTIFIER •

    ':'       reduce using rule 128 (class-name)
    ':'       [reduce using rule 251 (elaborated-type-specifier)]
    '{'       reduce using rule 128 (class-name)
    '{'       [reduce using rule 251 (elaborated-type-specifier)]
    "final"   reduce using rule 128 (class-name)
    '<'       reduce using rule 884 (template-name)
    $default  reduce using rule 251 (elaborated-type-specifier)


State 782

  124 class-head-name: nested-name-specifier-opt class-name •

    $default  reduce using rule 124 (class-head-name)


State 783

  129 class-name: simple-template-id •

    $default  reduce using rule 129 (class-name)


State 784

  253 elaborated-type-specifier: class-key nested-name-specifier template-opt simple-template-id •
  580 nested-name-specifier: nested-name-specifier template-opt simple-template-id • "::"

    "::"  shift, and go to state 818

    "::"      [reduce using rule 253 (elaborated-type-specifier)]
    $default  reduce using rule 253 (elaborated-type-specifier)


State 785

  455 initializer-clause: assignment-expression •

    $default  reduce using rule 455 (initializer-clause)


State 786

  456 initializer-clause: braced-init-list •

    $default  reduce using rule 456 (initializer-clause)


State 787

  101 brace-or-equal-initializer: '=' initializer-clause •

    $default  reduce using rule 101 (brace-or-equal-initializer)


State 788

  454 initializer: '(' expression-list • ')'

    ')'  shift, and go to state 1107


State 789

  457 initializer-list: initializer-clause • eclipse-opt

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 1108


State 790

  318 expression-list: initializer-list •
  458 initializer-list: initializer-list • ',' initializer-clause eclipse-opt

    ','  shift, and go to state 1109

    $default  reduce using rule 318 (expression-list)


State 791

  107 braced-init-list: '{' '}' •

    $default  reduce using rule 107 (braced-init-list)


State 792

  233 designator: '.' • IDENTIFIER

    IDENTIFIER  shift, and go to state 1110


State 793

  231 designated-initializer-list: designated-initializer-clause •

    $default  reduce using rule 231 (designated-initializer-list)


State 794

  106 braced-init-list: '{' designated-initializer-list • comma-opt '}'
  232 designated-initializer-list: designated-initializer-list • ',' designated-initializer-clause

    ','  shift, and go to state 1111

    $default  reduce using rule 137 (comma-opt)

    comma-opt  go to state 1112


State 795

  230 designated-initializer-clause: designator • brace-or-equal-initializer

    '='  shift, and go to state 433
    '{'  shift, and go to state 435

    brace-or-equal-initializer  go to state 1113
    braced-init-list            go to state 438


State 796

  105 braced-init-list: '{' initializer-list • comma-opt '}'
  458 initializer-list: initializer-list • ',' initializer-clause eclipse-opt

    ','  shift, and go to state 1114

    $default  reduce using rule 137 (comma-opt)

    comma-opt  go to state 1115


State 797

  334 fold-expression: '(' • cast-expression fold-operator "..." ')'
  335                | '(' • "..." fold-operator cast-expression ')'
  336                | '(' • cast-expression fold-operator "..." fold-operator cast-expression ')'
  728 primary-expression: '(' • expression ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "..."               shift, and go to state 492
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 493
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 494
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 798

  160 constraint-logical-and-expression: constraint-logical-and-expression • "&&" primary-expression
  161 constraint-logical-or-expression: constraint-logical-and-expression •

    "&&"  shift, and go to state 1116

    "&&"      [reduce using rule 161 (constraint-logical-or-expression)]
    $default  reduce using rule 161 (constraint-logical-or-expression)


State 799

  162 constraint-logical-or-expression: constraint-logical-or-expression • "||" constraint-logical-and-expression
  779 requires-clause: "requires" constraint-logical-or-expression •

    "||"  shift, and go to state 1117

    $default  reduce using rule 779 (requires-clause)


State 800

  159 constraint-logical-and-expression: primary-expression •

    $default  reduce using rule 159 (constraint-logical-and-expression)


State 801

  445 init-declarator-list: init-declarator-list ',' init-declarator •

    $default  reduce using rule 445 (init-declarator-list)


State 802

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  277 enumerator: IDENTIFIER attribute-specifier-seq-opt •

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    $default  reduce using rule 277 (enumerator)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 803

  279 enumerator-definition: enumerator '=' • constant-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 1118
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 804

  276 enum-specifier: enum-head '{' enumerator-list ',' • '}'
  281 enumerator-list: enumerator-list ',' • enumerator-definition

    IDENTIFIER  shift, and go to state 444
    '}'         shift, and go to state 1119

    enumerator             go to state 445
    enumerator-definition  go to state 1120


State 805

  275 enum-specifier: enum-head '{' enumerator-list-opt '}' •

    $default  reduce using rule 275 (enum-specifier)


State 806

  264 enum-base: ':' • type-specifier-seq

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 116
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    class-key                   go to state 463
    class-name                  go to state 54
    cv-qualifier                go to state 56
    decltype-specifier          go to state 62
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-name                   go to state 70
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 471
    type-specifier-seq          go to state 1121
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 807

  266 enum-base-opt: enum-base •

    $default  reduce using rule 266 (enum-base-opt)


State 808

  645 opaque-enum-declaration: enum-key attribute-specifier-seq-opt enum-head-name enum-base-opt • ';'

    ';'  shift, and go to state 1122


State 809

  267 enum-head: enum-key attribute-specifier-seq-opt enum-head-name-opt enum-base-opt •

    $default  reduce using rule 267 (enum-head)


State 810

  268 enum-head-name: nested-name-specifier-opt IDENTIFIER •

    $default  reduce using rule 268 (enum-head-name)


State 811

  221 deduction-guide: explicit-specifier-opt template-name '(' parameter-declaration-clause • ')' "->" simple-template-id ';'

    ')'  shift, and go to state 1123


State 812

  550 module-declaration: export-keyword-opt "module-keyword" module-name • module-partition-opt attribute-specifier-seq-opt ';'

    ':'  shift, and go to state 143

    $default  reduce using rule 560 (module-partition-opt)

    module-partition      go to state 1124
    module-partition-opt  go to state 1125


State 813

  733 private-module-fragment: "module-keyword" • ':' "private" ';' declaration-seq-opt

    ':'  shift, and go to state 1126


State 814

  735 private-module-fragment-opt: private-module-fragment •

    $default  reduce using rule 735 (private-module-fragment-opt)


State 815

  898 translation-unit: global-module-fragment-opt module-declaration declaration-seq-opt private-module-fragment-opt •

    $default  reduce using rule 898 (translation-unit)


State 816

  566 named-namespace-definition: inline-opt "namespace" attribute-specifier-seq-opt IDENTIFIER • '{' namespace-body '}'

    '{'  shift, and go to state 1127


State 817

  950 unnamed-namespace-definition: inline-opt "namespace" attribute-specifier-seq-opt '{' • namespace-body '}'

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    '}'             reduce using rule 214 (declaration-seq-opt)
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"      [reduce using rule 324 (extern-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "namespace"     [reduce using rule 461 (inline-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 59
    declaration-seq                  go to state 60
    declaration-seq-opt              go to state 1128
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-body                   go to state 1129
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 818

  580 nested-name-specifier: nested-name-specifier template-opt simple-template-id "::" •

    $default  reduce using rule 580 (nested-name-specifier)


State 819

  901 type-constraint: nested-name-specifier-opt concept-name '<' template-argument-list-opt • '>'

    '>'  shift, and go to state 1130


State 820

  143 concept-definition: "concept" concept-name '=' • constraint-expression ';'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    constraint-expression                go to state 1131
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 1132
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 821

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  251 elaborated-type-specifier: class-key attribute-specifier-seq-opt • nested-name-specifier-opt IDENTIFIER

    IDENTIFIER  shift, and go to state 1
    "alignas"   shift, and go to state 165
    "::"        shift, and go to state 4
    '['         shift, and go to state 170
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]

    alignment-specifier        go to state 173
    attribute-specifier        go to state 174
    class-name                 go to state 54
    decltype-specifier         go to state 126
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 127
    nested-name-specifier-opt  go to state 1133
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 822

  874 template-argument-list: template-argument eclipse-opt •

    $default  reduce using rule 874 (template-argument-list)


State 823

  875 template-argument-list: template-argument-list ',' • template-argument eclipse-opt

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 116
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-key                            go to state 463
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 464
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 465
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    string-literal                       go to state 339
    template-argument                    go to state 1134
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-id                              go to state 470
    type-name                            go to state 107
    type-specifier                       go to state 471
    type-specifier-seq                   go to state 472
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 824

  827 simple-template-id: template-name '<' template-argument-list-opt '>' •

    $default  reduce using rule 827 (simple-template-id)


State 825

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  921 type-specifier-seq: type-specifier attribute-specifier-seq-opt •

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    "alignas"  [reduce using rule 921 (type-specifier-seq)]
    '['        [reduce using rule 921 (type-specifier-seq)]
    $default   reduce using rule 921 (type-specifier-seq)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 826

  922 type-specifier-seq: type-specifier type-specifier-seq •

    $default  reduce using rule 922 (type-specifier-seq)


State 827

  618 noptr-abstract-declarator: '(' • ptr-abstract-declarator ')'

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 827
    '&'         shift, and go to state 167
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    '('       [reduce using rule 619 (noptr-abstract-declarator-opt)]
    $default  reduce using rule 619 (noptr-abstract-declarator-opt)

    class-name                     go to state 54
    decltype-specifier             go to state 126
    enum-name                      go to state 70
    namespace-alias                go to state 86
    namespace-name                 go to state 89
    nested-name-specifier          go to state 195
    noptr-abstract-declarator      go to state 832
    noptr-abstract-declarator-opt  go to state 1135
    ptr-abstract-declarator        go to state 1136
    ptr-operator                   go to state 1137
    simple-template-id             go to state 97
    template-name                  go to state 103
    type-name                      go to state 107
    typedef-name                   go to state 109


State 828

  623 noptr-abstract-pack-declarator: "..." •

    $default  reduce using rule 623 (noptr-abstract-pack-declarator)


State 829

    5 abstract-declarator-opt: abstract-declarator •

    $default  reduce using rule 5 (abstract-declarator-opt)


State 830

  904 type-id: type-specifier-seq abstract-declarator-opt •

    $default  reduce using rule 904 (type-id)


State 831

    3 abstract-declarator: abstract-pack-declarator •

    $default  reduce using rule 3 (abstract-declarator)


State 832

  620 noptr-abstract-declarator-opt: noptr-abstract-declarator •
  736 ptr-abstract-declarator: noptr-abstract-declarator •

    '('       reduce using rule 620 (noptr-abstract-declarator-opt)
    '('       [reduce using rule 736 (ptr-abstract-declarator)]
    '['       reduce using rule 620 (noptr-abstract-declarator-opt)
    $default  reduce using rule 736 (ptr-abstract-declarator)


State 833

    2 abstract-declarator: noptr-abstract-declarator-opt • parameters-and-qualifiers trailing-return-type
  616 noptr-abstract-declarator: noptr-abstract-declarator-opt • parameters-and-qualifiers
  617                          | noptr-abstract-declarator-opt • '[' constant-expression-opt ']' attribute-specifier-seq-opt

    '('  shift, and go to state 402
    '['  shift, and go to state 1138

    parameters-and-qualifiers  go to state 1139


State 834

    6 abstract-pack-declarator: noptr-abstract-pack-declarator •
  621 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator • parameters-and-qualifiers
  622                               | noptr-abstract-pack-declarator • '[' constant-expression-opt ']' attribute-specifier-seq-opt

    '('  shift, and go to state 402
    '['  shift, and go to state 1140

    '('       [reduce using rule 6 (abstract-pack-declarator)]
    $default  reduce using rule 6 (abstract-pack-declarator)

    parameters-and-qualifiers  go to state 1141


State 835

    1 abstract-declarator: ptr-abstract-declarator •

    $default  reduce using rule 1 (abstract-declarator)


State 836

    7 abstract-pack-declarator: ptr-operator • abstract-pack-declarator
  737 ptr-abstract-declarator: ptr-operator • ptr-abstract-declarator-opt

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 827
    '&'         shift, and go to state 167
    "..."       shift, and go to state 828
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    '('       [reduce using rule 619 (noptr-abstract-declarator-opt)]
    '('       [reduce using rule 738 (ptr-abstract-declarator-opt)]
    "..."     [reduce using rule 738 (ptr-abstract-declarator-opt)]
    '['       reduce using rule 619 (noptr-abstract-declarator-opt)
    $default  reduce using rule 738 (ptr-abstract-declarator-opt)

    abstract-pack-declarator        go to state 1142
    class-name                      go to state 54
    decltype-specifier              go to state 126
    enum-name                       go to state 70
    namespace-alias                 go to state 86
    namespace-name                  go to state 89
    nested-name-specifier           go to state 195
    noptr-abstract-declarator       go to state 832
    noptr-abstract-declarator-opt   go to state 1135
    noptr-abstract-pack-declarator  go to state 834
    ptr-abstract-declarator         go to state 1143
    ptr-abstract-declarator-opt     go to state 1144
    ptr-operator                    go to state 836
    simple-template-id              go to state 97
    template-name                   go to state 103
    type-name                       go to state 107
    typedef-name                    go to state 109


State 837

  704 placeholder-type-specifier: type-constraint-opt "decltype" '(' "auto" • ')'

    ')'  shift, and go to state 1145


State 838

   16 alias-declaration: "using" IDENTIFIER attribute-specifier-seq-opt '=' defining-type-id • ';'

    ';'  shift, and go to state 1146


State 839

  226 defining-type-specifier-seq: defining-type-specifier • attribute-specifier-seq-opt
  227                            | defining-type-specifier • defining-type-specifier-seq

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 19
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "::"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 1147
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 839
    defining-type-specifier-seq  go to state 1148
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 162
    enum-name                    go to state 70
    enum-specifier               go to state 71
    namespace-alias              go to state 86
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    placeholder-type-specifier   go to state 95
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110


State 840

  222 defining-type-id: defining-type-specifier-seq • abstract-declarator-opt

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 827
    '&'         shift, and go to state 167
    "..."       shift, and go to state 828
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    '('       [reduce using rule 619 (noptr-abstract-declarator-opt)]
    '['       reduce using rule 619 (noptr-abstract-declarator-opt)
    $default  reduce using rule 4 (abstract-declarator-opt)

    abstract-declarator             go to state 829
    abstract-declarator-opt         go to state 1149
    abstract-pack-declarator        go to state 831
    class-name                      go to state 54
    decltype-specifier              go to state 126
    enum-name                       go to state 70
    namespace-alias                 go to state 86
    namespace-name                  go to state 89
    nested-name-specifier           go to state 195
    noptr-abstract-declarator       go to state 832
    noptr-abstract-declarator-opt   go to state 833
    noptr-abstract-pack-declarator  go to state 834
    ptr-abstract-declarator         go to state 835
    ptr-operator                    go to state 836
    simple-template-id              go to state 97
    template-name                   go to state 103
    type-name                       go to state 107
    typedef-name                    go to state 109


State 841

  979 using-declarator-list: using-declarator-list ',' using-declarator eclipse-opt •

    $default  reduce using rule 979 (using-declarator-list)


State 842

  692 parameter-declaration: attribute-specifier-seq-opt this-opt decl-specifier-seq • declarator
  693                      | attribute-specifier-seq-opt this-opt decl-specifier-seq • declarator '=' initializer-clause
  694                      | attribute-specifier-seq-opt this-opt decl-specifier-seq • abstract-declarator-opt
  695                      | attribute-specifier-seq-opt this-opt decl-specifier-seq • abstract-declarator-opt '=' initializer-clause

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 1150
    '&'         shift, and go to state 167
    "..."       shift, and go to state 1151
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    '('         [reduce using rule 619 (noptr-abstract-declarator-opt)]
    "..."       [reduce using rule 4 (abstract-declarator-opt)]
    "::"        [reduce using rule 248 (eclipse-opt)]
    '['         reduce using rule 619 (noptr-abstract-declarator-opt)
    "operator"  reduce using rule 248 (eclipse-opt)
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    '~'         reduce using rule 248 (eclipse-opt)
    $default    reduce using rule 4 (abstract-declarator-opt)

    abstract-declarator             go to state 829
    abstract-declarator-opt         go to state 1152
    abstract-pack-declarator        go to state 831
    class-name                      go to state 54
    declarator                      go to state 1153
    declarator-id                   go to state 178
    decltype-specifier              go to state 126
    eclipse-opt                     go to state 179
    enum-name                       go to state 70
    namespace-alias                 go to state 86
    namespace-name                  go to state 89
    nested-name-specifier           go to state 195
    noptr-abstract-declarator       go to state 832
    noptr-abstract-declarator-opt   go to state 833
    noptr-abstract-pack-declarator  go to state 834
    noptr-declarator                go to state 181
    ptr-abstract-declarator         go to state 835
    ptr-declarator                  go to state 182
    ptr-operator                    go to state 1154
    simple-template-id              go to state 97
    template-name                   go to state 103
    type-name                       go to state 107
    typedef-name                    go to state 109


State 843

  912 type-parameter: template-head type-parameter-key eclipse-opt • identifier-opt

    IDENTIFIER  shift, and go to state 487

    $default  reduce using rule 436 (identifier-opt)

    identifier-opt  go to state 1155


State 844

  913 type-parameter: template-head type-parameter-key identifier-opt • '=' id-expression

    '='  shift, and go to state 1156


State 845

  890 template-parameter-list: template-parameter-list ',' template-parameter •

    $default  reduce using rule 890 (template-parameter-list)


State 846

  781 requires-clause-opt: requires-clause •

    $default  reduce using rule 781 (requires-clause-opt)


State 847

  880 template-head: "template" '<' template-parameter-list '>' requires-clause-opt •

    $default  reduce using rule 880 (template-head)


State 848

  910 type-parameter: type-constraint eclipse-opt identifier-opt •

    $default  reduce using rule 910 (type-parameter)


State 849

  911 type-parameter: type-constraint identifier-opt '=' • type-id

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 116
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    class-key                   go to state 463
    class-name                  go to state 54
    cv-qualifier                go to state 56
    decltype-specifier          go to state 62
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-name                   go to state 70
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-id                     go to state 1157
    type-name                   go to state 107
    type-specifier              go to state 471
    type-specifier-seq          go to state 472
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 850

  908 type-parameter: type-parameter-key eclipse-opt identifier-opt •

    $default  reduce using rule 908 (type-parameter)


State 851

  909 type-parameter: type-parameter-key identifier-opt '=' • type-id

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 116
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    class-key                   go to state 463
    class-name                  go to state 54
    cv-qualifier                go to state 56
    decltype-specifier          go to state 62
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-name                   go to state 70
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-id                     go to state 1158
    type-name                   go to state 107
    type-specifier              go to state 471
    type-specifier-seq          go to state 472
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 852

  337 fold-operator: '+' •

    $default  reduce using rule 337 (fold-operator)


State 853

  338 fold-operator: '-' •

    $default  reduce using rule 338 (fold-operator)


State 854

  357 fold-operator: '=' •

    $default  reduce using rule 357 (fold-operator)


State 855

  343 fold-operator: '&' •

    $default  reduce using rule 343 (fold-operator)


State 856

  349 fold-operator: "*=" •

    $default  reduce using rule 349 (fold-operator)


State 857

  350 fold-operator: "/=" •

    $default  reduce using rule 350 (fold-operator)


State 858

  351 fold-operator: "%=" •

    $default  reduce using rule 351 (fold-operator)


State 859

  347 fold-operator: "+=" •

    $default  reduce using rule 347 (fold-operator)


State 860

  348 fold-operator: "-=" •

    $default  reduce using rule 348 (fold-operator)


State 861

  356 fold-operator: ">>=" •

    $default  reduce using rule 356 (fold-operator)


State 862

  355 fold-operator: "<<=" •

    $default  reduce using rule 355 (fold-operator)


State 863

  353 fold-operator: "&=" •

    $default  reduce using rule 353 (fold-operator)


State 864

  352 fold-operator: "^=" •

    $default  reduce using rule 352 (fold-operator)


State 865

  354 fold-operator: "|=" •

    $default  reduce using rule 354 (fold-operator)


State 866

  366 fold-operator: ',' •

    $default  reduce using rule 366 (fold-operator)


State 867

  364 fold-operator: "&&" •

    $default  reduce using rule 364 (fold-operator)


State 868

  365 fold-operator: "||" •

    $default  reduce using rule 365 (fold-operator)


State 869

  358 fold-operator: "==" •

    $default  reduce using rule 358 (fold-operator)


State 870

  359 fold-operator: "!=" •

    $default  reduce using rule 359 (fold-operator)


State 871

  342 fold-operator: '^' •

    $default  reduce using rule 342 (fold-operator)


State 872

  360 fold-operator: '<' •

    $default  reduce using rule 360 (fold-operator)


State 873

  361 fold-operator: '>' •

    $default  reduce using rule 361 (fold-operator)


State 874

  339 fold-operator: '*' •

    $default  reduce using rule 339 (fold-operator)


State 875

  340 fold-operator: '/' •

    $default  reduce using rule 340 (fold-operator)


State 876

  341 fold-operator: '%' •

    $default  reduce using rule 341 (fold-operator)


State 877

  344 fold-operator: '|' •

    $default  reduce using rule 344 (fold-operator)


State 878

  345 fold-operator: "<<" •

    $default  reduce using rule 345 (fold-operator)


State 879

  346 fold-operator: ">>" •

    $default  reduce using rule 346 (fold-operator)


State 880

  362 fold-operator: "<=" •

    $default  reduce using rule 362 (fold-operator)


State 881

  363 fold-operator: ">=" •

    $default  reduce using rule 363 (fold-operator)


State 882

  367 fold-operator: ".*" •

    $default  reduce using rule 367 (fold-operator)


State 883

  368 fold-operator: "->*" •

    $default  reduce using rule 368 (fold-operator)


State 884

  335 fold-expression: '(' "..." fold-operator • cast-expression ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 1159
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 885

  334 fold-expression: '(' cast-expression fold-operator • "..." ')'
  336                | '(' cast-expression fold-operator • "..." fold-operator cast-expression ')'

    "..."  shift, and go to state 1160


State 886

  728 primary-expression: '(' expression ')' •

    $default  reduce using rule 728 (primary-expression)


State 887

  120 cast-expression: '(' type-id ')' • cast-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 1161
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 888

  807 simple-capture: IDENTIFIER eclipse-opt •

    $default  reduce using rule 807 (simple-capture)


State 889

  808 simple-capture: '&' IDENTIFIER • eclipse-opt

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 1162


State 890

  441 init-capture: '&' eclipse-opt • IDENTIFIER initializer

    IDENTIFIER  shift, and go to state 1163


State 891

  810 simple-capture: '*' "this" •

    $default  reduce using rule 810 (simple-capture)


State 892

  489 lambda-capture: capture-default ',' • capture-list

    IDENTIFIER  shift, and go to state 496
    '&'         shift, and go to state 1164
    "..."       shift, and go to state 169
    '*'         shift, and go to state 499
    "this"      shift, and go to state 500

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]

    capture         go to state 501
    capture-list    go to state 1165
    eclipse-opt     go to state 504
    init-capture    go to state 505
    simple-capture  go to state 508


State 893

  118 capture-list: capture-list ',' • capture

    IDENTIFIER  shift, and go to state 496
    '&'         shift, and go to state 1164
    "..."       shift, and go to state 169
    '*'         shift, and go to state 499
    "this"      shift, and go to state 500

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]

    capture         go to state 1166
    eclipse-opt     go to state 504
    init-capture    go to state 505
    simple-capture  go to state 508


State 894

  440 init-capture: eclipse-opt IDENTIFIER • initializer

    '='  shift, and go to state 433
    '('  shift, and go to state 434
    '{'  shift, and go to state 435

    brace-or-equal-initializer  go to state 437
    braced-init-list            go to state 438
    initializer                 go to state 1167


State 895

  496 lambda-introducer: '[' lambda-capture-opt ']' •

    $default  reduce using rule 496 (lambda-introducer)


State 896

  653 overloadable-operator: '(' ')' •

    $default  reduce using rule 653 (overloadable-operator)


State 897

  654 overloadable-operator: '[' ']' •

    $default  reduce using rule 654 (overloadable-operator)


State 898

  651 overloadable-operator: "delete" '[' • ']'

    ']'  shift, and go to state 1168


State 899

  650 overloadable-operator: "new" '[' • ']'

    ']'  shift, and go to state 1169


State 900

  647 operator-function-id: "operator" overloadable-operator '<' • template-argument-list-opt '>'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 116
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    '>'         reduce using rule 876 (template-argument-list-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-key                            go to state 463
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 464
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 465
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    string-literal                       go to state 339
    template-argument                    go to state 467
    template-argument-list               go to state 468
    template-argument-list-opt           go to state 1170
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-id                              go to state 470
    type-name                            go to state 107
    type-specifier                       go to state 471
    type-specifier-seq                   go to state 472
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 901

  507 literal-operator-id: "operator" string-literal IDENTIFIER •
  929 ud-suffix: IDENTIFIER •

    IDENTIFIER        reduce using rule 507 (literal-operator-id)
    IDENTIFIER        [reduce using rule 929 (ud-suffix)]
    '+'               reduce using rule 507 (literal-operator-id)
    '+'               [reduce using rule 929 (ud-suffix)]
    '-'               reduce using rule 507 (literal-operator-id)
    '-'               [reduce using rule 929 (ud-suffix)]
    "using"           reduce using rule 507 (literal-operator-id)
    "using"           [reduce using rule 929 (ud-suffix)]
    '='               reduce using rule 507 (literal-operator-id)
    '='               [reduce using rule 929 (ud-suffix)]
    ';'               reduce using rule 507 (literal-operator-id)
    ';'               [reduce using rule 929 (ud-suffix)]
    "alignas"         reduce using rule 507 (literal-operator-id)
    "alignas"         [reduce using rule 929 (ud-suffix)]
    '('               reduce using rule 507 (literal-operator-id)
    '('               [reduce using rule 929 (ud-suffix)]
    ')'               reduce using rule 507 (literal-operator-id)
    ')'               [reduce using rule 929 (ud-suffix)]
    '&'               reduce using rule 507 (literal-operator-id)
    '&'               [reduce using rule 929 (ud-suffix)]
    "asm"             reduce using rule 507 (literal-operator-id)
    "asm"             [reduce using rule 929 (ud-suffix)]
    "*="              reduce using rule 507 (literal-operator-id)
    "*="              [reduce using rule 929 (ud-suffix)]
    "/="              reduce using rule 507 (literal-operator-id)
    "/="              [reduce using rule 929 (ud-suffix)]
    "%="              reduce using rule 507 (literal-operator-id)
    "%="              [reduce using rule 929 (ud-suffix)]
    "+="              reduce using rule 507 (literal-operator-id)
    "+="              [reduce using rule 929 (ud-suffix)]
    "-="              reduce using rule 507 (literal-operator-id)
    "-="              [reduce using rule 929 (ud-suffix)]
    ">>="             reduce using rule 507 (literal-operator-id)
    ">>="             [reduce using rule 929 (ud-suffix)]
    "<<="             reduce using rule 507 (literal-operator-id)
    "<<="             [reduce using rule 929 (ud-suffix)]
    "&="              reduce using rule 507 (literal-operator-id)
    "&="              [reduce using rule 929 (ud-suffix)]
    "^="              reduce using rule 507 (literal-operator-id)
    "^="              [reduce using rule 929 (ud-suffix)]
    "|="              reduce using rule 507 (literal-operator-id)
    "|="              [reduce using rule 929 (ud-suffix)]
    ','               reduce using rule 507 (literal-operator-id)
    ','               [reduce using rule 929 (ud-suffix)]
    "..."             reduce using rule 507 (literal-operator-id)
    "..."             [reduce using rule 929 (ud-suffix)]
    "::"              reduce using rule 507 (literal-operator-id)
    "::"              [reduce using rule 929 (ud-suffix)]
    '['               reduce using rule 507 (literal-operator-id)
    '['               [reduce using rule 929 (ud-suffix)]
    ']'               reduce using rule 507 (literal-operator-id)
    ']'               [reduce using rule 929 (ud-suffix)]
    ':'               reduce using rule 507 (literal-operator-id)
    ':'               [reduce using rule 929 (ud-suffix)]
    '{'               reduce using rule 507 (literal-operator-id)
    '{'               [reduce using rule 929 (ud-suffix)]
    '}'               reduce using rule 507 (literal-operator-id)
    '}'               [reduce using rule 929 (ud-suffix)]
    "virtual"         reduce using rule 507 (literal-operator-id)
    "virtual"         [reduce using rule 929 (ud-suffix)]
    "class"           reduce using rule 507 (literal-operator-id)
    "class"           [reduce using rule 929 (ud-suffix)]
    "struct"          reduce using rule 507 (literal-operator-id)
    "struct"          [reduce using rule 929 (ud-suffix)]
    "union"           reduce using rule 507 (literal-operator-id)
    "union"           [reduce using rule 929 (ud-suffix)]
    "template"        reduce using rule 507 (literal-operator-id)
    "template"        [reduce using rule 929 (ud-suffix)]
    "final"           reduce using rule 507 (literal-operator-id)
    "final"           [reduce using rule 929 (ud-suffix)]
    "<=>"             reduce using rule 507 (literal-operator-id)
    "<=>"             [reduce using rule 929 (ud-suffix)]
    "concept"         reduce using rule 507 (literal-operator-id)
    "concept"         [reduce using rule 929 (ud-suffix)]
    '?'               reduce using rule 507 (literal-operator-id)
    '?'               [reduce using rule 929 (ud-suffix)]
    "constexpr"       reduce using rule 507 (literal-operator-id)
    "constexpr"       [reduce using rule 929 (ud-suffix)]
    "&&"              reduce using rule 507 (literal-operator-id)
    "&&"              [reduce using rule 929 (ud-suffix)]
    "||"              reduce using rule 507 (literal-operator-id)
    "||"              [reduce using rule 929 (ud-suffix)]
    "operator"        reduce using rule 507 (literal-operator-id)
    "operator"        [reduce using rule 929 (ud-suffix)]
    "const"           reduce using rule 507 (literal-operator-id)
    "const"           [reduce using rule 929 (ud-suffix)]
    "volatile"        reduce using rule 507 (literal-operator-id)
    "volatile"        [reduce using rule 929 (ud-suffix)]
    "friend"          reduce using rule 507 (literal-operator-id)
    "friend"          [reduce using rule 929 (ud-suffix)]
    "typedef"         reduce using rule 507 (literal-operator-id)
    "typedef"         [reduce using rule 929 (ud-suffix)]
    "consteval"       reduce using rule 507 (literal-operator-id)
    "consteval"       [reduce using rule 929 (ud-suffix)]
    "constinit"       reduce using rule 507 (literal-operator-id)
    "constinit"       [reduce using rule 929 (ud-suffix)]
    "inline"          reduce using rule 507 (literal-operator-id)
    "inline"          [reduce using rule 929 (ud-suffix)]
    "decltype"        reduce using rule 507 (literal-operator-id)
    "decltype"        [reduce using rule 929 (ud-suffix)]
    "->"              reduce using rule 507 (literal-operator-id)
    "->"              [reduce using rule 929 (ud-suffix)]
    '.'               reduce using rule 507 (literal-operator-id)
    '.'               [reduce using rule 929 (ud-suffix)]
    "enum"            reduce using rule 507 (literal-operator-id)
    "enum"            [reduce using rule 929 (ud-suffix)]
    "=="              reduce using rule 507 (literal-operator-id)
    "=="              [reduce using rule 929 (ud-suffix)]
    "!="              reduce using rule 507 (literal-operator-id)
    "!="              [reduce using rule 929 (ud-suffix)]
    '^'               reduce using rule 507 (literal-operator-id)
    '^'               [reduce using rule 929 (ud-suffix)]
    '<'               reduce using rule 507 (literal-operator-id)
    '<'               [reduce using rule 929 (ud-suffix)]
    '>'               reduce using rule 507 (literal-operator-id)
    '>'               [reduce using rule 929 (ud-suffix)]
    "explicit"        reduce using rule 507 (literal-operator-id)
    "explicit"        [reduce using rule 929 (ud-suffix)]
    "export"          reduce using rule 507 (literal-operator-id)
    "export"          [reduce using rule 929 (ud-suffix)]
    "export-keyword"  reduce using rule 507 (literal-operator-id)
    "export-keyword"  [reduce using rule 929 (ud-suffix)]
    "extern"          reduce using rule 507 (literal-operator-id)
    "extern"          [reduce using rule 929 (ud-suffix)]
    '*'               reduce using rule 507 (literal-operator-id)
    '*'               [reduce using rule 929 (ud-suffix)]
    '/'               reduce using rule 507 (literal-operator-id)
    '/'               [reduce using rule 929 (ud-suffix)]
    '%'               reduce using rule 507 (literal-operator-id)
    '%'               [reduce using rule 929 (ud-suffix)]
    '|'               reduce using rule 507 (literal-operator-id)
    '|'               [reduce using rule 929 (ud-suffix)]
    "<<"              reduce using rule 507 (literal-operator-id)
    "<<"              [reduce using rule 929 (ud-suffix)]
    ">>"              reduce using rule 507 (literal-operator-id)
    ">>"              [reduce using rule 929 (ud-suffix)]
    "<="              reduce using rule 507 (literal-operator-id)
    "<="              [reduce using rule 929 (ud-suffix)]
    ">="              reduce using rule 507 (literal-operator-id)
    ">="              [reduce using rule 929 (ud-suffix)]
    ".*"              reduce using rule 507 (literal-operator-id)
    ".*"              [reduce using rule 929 (ud-suffix)]
    "->*"             reduce using rule 507 (literal-operator-id)
    "->*"             [reduce using rule 929 (ud-suffix)]
    "try"             reduce using rule 507 (literal-operator-id)
    "try"             [reduce using rule 929 (ud-suffix)]
    "import-keyword"  reduce using rule 507 (literal-operator-id)
    "import-keyword"  [reduce using rule 929 (ud-suffix)]
    "namespace"       reduce using rule 507 (literal-operator-id)
    "namespace"       [reduce using rule 929 (ud-suffix)]
    "requires"        reduce using rule 507 (literal-operator-id)
    "requires"        [reduce using rule 929 (ud-suffix)]
    "noexcept"        reduce using rule 507 (literal-operator-id)
    "noexcept"        [reduce using rule 929 (ud-suffix)]
    '~'               reduce using rule 507 (literal-operator-id)
    '~'               [reduce using rule 929 (ud-suffix)]
    "++"              reduce using rule 507 (literal-operator-id)
    "++"              [reduce using rule 929 (ud-suffix)]
    "--"              reduce using rule 507 (literal-operator-id)
    "--"              [reduce using rule 929 (ud-suffix)]
    "auto"            reduce using rule 507 (literal-operator-id)
    "auto"            [reduce using rule 929 (ud-suffix)]
    "char"            reduce using rule 507 (literal-operator-id)
    "char"            [reduce using rule 929 (ud-suffix)]
    "char8_t"         reduce using rule 507 (literal-operator-id)
    "char8_t"         [reduce using rule 929 (ud-suffix)]
    "char16_t"        reduce using rule 507 (literal-operator-id)
    "char16_t"        [reduce using rule 929 (ud-suffix)]
    "char32_t"        reduce using rule 507 (literal-operator-id)
    "char32_t"        [reduce using rule 929 (ud-suffix)]
    "wchar_t"         reduce using rule 507 (literal-operator-id)
    "wchar_t"         [reduce using rule 929 (ud-suffix)]
    "bool"            reduce using rule 507 (literal-operator-id)
    "bool"            [reduce using rule 929 (ud-suffix)]
    "short"           reduce using rule 507 (literal-operator-id)
    "short"           [reduce using rule 929 (ud-suffix)]
    "int"             reduce using rule 507 (literal-operator-id)
    "int"             [reduce using rule 929 (ud-suffix)]
    "long"            reduce using rule 507 (literal-operator-id)
    "long"            [reduce using rule 929 (ud-suffix)]
    "signed"          reduce using rule 507 (literal-operator-id)
    "signed"          [reduce using rule 929 (ud-suffix)]
    "unsigned"        reduce using rule 507 (literal-operator-id)
    "unsigned"        [reduce using rule 929 (ud-suffix)]
    "float"           reduce using rule 507 (literal-operator-id)
    "float"           [reduce using rule 929 (ud-suffix)]
    "double"          reduce using rule 507 (literal-operator-id)
    "double"          [reduce using rule 929 (ud-suffix)]
    "void"            reduce using rule 507 (literal-operator-id)
    "void"            [reduce using rule 929 (ud-suffix)]
    "static_assert"   reduce using rule 507 (literal-operator-id)
    "static_assert"   [reduce using rule 929 (ud-suffix)]
    "static"          reduce using rule 507 (literal-operator-id)
    "static"          [reduce using rule 929 (ud-suffix)]
    "thread_local"    reduce using rule 507 (literal-operator-id)
    "thread_local"    [reduce using rule 929 (ud-suffix)]
    "mutable"         reduce using rule 507 (literal-operator-id)
    "mutable"         [reduce using rule 929 (ud-suffix)]
    "typename"        reduce using rule 507 (literal-operator-id)
    "typename"        [reduce using rule 929 (ud-suffix)]
    "override"        reduce using rule 507 (literal-operator-id)
    "override"        [reduce using rule 929 (ud-suffix)]
    $default          reduce using rule 507 (literal-operator-id)


State 902

  165 conversion-declarator-opt: conversion-declarator •

    $default  reduce using rule 165 (conversion-declarator-opt)


State 903

  167 conversion-type-id: type-specifier-seq conversion-declarator-opt •

    $default  reduce using rule 167 (conversion-type-id)


State 904

  163 conversion-declarator: ptr-operator • conversion-declarator-opt

    IDENTIFIER  shift, and go to state 1
    '&'         shift, and go to state 167
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 164 (conversion-declarator-opt)]
    '&'         [reduce using rule 164 (conversion-declarator-opt)]
    "::"        [reduce using rule 164 (conversion-declarator-opt)]
    "&&"        [reduce using rule 164 (conversion-declarator-opt)]
    "decltype"  [reduce using rule 164 (conversion-declarator-opt)]
    '*'         [reduce using rule 164 (conversion-declarator-opt)]
    $default    reduce using rule 164 (conversion-declarator-opt)

    class-name                 go to state 54
    conversion-declarator      go to state 902
    conversion-declarator-opt  go to state 1171
    decltype-specifier         go to state 126
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 195
    ptr-operator               go to state 904
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 905

  774 requirement-parameter-list: '(' parameter-declaration-clause • ')'

    ')'  shift, and go to state 1172


State 906

  773 requirement-body: '{' • requirement-seq '}'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 1173
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 1174
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 1175
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    compound-requirement                 go to state 1176
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1177
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    nested-requirement                   go to state 1178
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requirement                          go to state 1179
    requirement-seq                      go to state 1180
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-requirement                   go to state 1181
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    type-requirement                     go to state 1182
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 907

  782 requires-expression: "requires" requirement-parameter-list-opt requirement-body •

    $default  reduce using rule 782 (requires-expression)


State 908

  317 expression: expression • ',' assignment-expression
  600 noexcept-expression: "noexcept" '(' expression • ')'

    ')'  shift, and go to state 1183
    ','  shift, and go to state 620


State 909

  720 postfix-expression: "dynamic_cast" '<' type-id • '>' '(' expression ')'

    '>'  shift, and go to state 1184


State 910

  721 postfix-expression: "static_cast" '<' type-id • '>' '(' expression ')'

    '>'  shift, and go to state 1185


State 911

  722 postfix-expression: "reinterpret_cast" '<' type-id • '>' '(' expression ')'

    '>'  shift, and go to state 1186


State 912

  723 postfix-expression: "const_cast" '<' type-id • '>' '(' expression ')'

    '>'  shift, and go to state 1187


State 913

  317 expression: expression • ',' assignment-expression
  724 postfix-expression: "typeid" '(' expression • ')'

    ')'  shift, and go to state 1188
    ','  shift, and go to state 620


State 914

  725 postfix-expression: "typeid" '(' type-id • ')'

    ')'  shift, and go to state 1189


State 915

  936 unary-expression: "sizeof" '(' type-id • ')'

    ')'  shift, and go to state 1190


State 916

  937 unary-expression: "sizeof" "..." '(' • IDENTIFIER ')'

    IDENTIFIER  shift, and go to state 1191


State 917

  938 unary-expression: "alignof" '(' type-id • ')'

    ')'  shift, and go to state 1192


State 918

   14 additive-expression: additive-expression '+' multiplicative-expression •
  563 multiplicative-expression: multiplicative-expression • '*' pm-expression
  564                          | multiplicative-expression • '/' pm-expression
  565                          | multiplicative-expression • '%' pm-expression

    '*'  shift, and go to state 674
    '/'  shift, and go to state 675
    '%'  shift, and go to state 676

    $default  reduce using rule 14 (additive-expression)


State 919

   15 additive-expression: additive-expression '-' multiplicative-expression •
  563 multiplicative-expression: multiplicative-expression • '*' pm-expression
  564                          | multiplicative-expression • '/' pm-expression
  565                          | multiplicative-expression • '%' pm-expression

    '*'  shift, and go to state 674
    '/'  shift, and go to state 675
    '%'  shift, and go to state 676

    $default  reduce using rule 15 (additive-expression)


State 920

   20 and-expression: and-expression '&' equality-expression •
  285 equality-expression: equality-expression • "==" relational-expression
  286                    | equality-expression • "!=" relational-expression

    "=="  shift, and go to state 616
    "!="  shift, and go to state 617

    $default  reduce using rule 20 (and-expression)


State 921

   89 binary-literal: binary-literal apostrophe-opt binary-digit •

    $default  reduce using rule 89 (binary-literal)


State 922

  961 unsigned-suffix-opt: unsigned-suffix •

    $default  reduce using rule 961 (unsigned-suffix-opt)


State 923

  471 integer-suffix: long-long-suffix unsigned-suffix-opt •

    $default  reduce using rule 471 (integer-suffix)


State 924

  470 integer-suffix: long-suffix unsigned-suffix-opt •

    $default  reduce using rule 470 (integer-suffix)


State 925

  472 integer-suffix: size-suffix unsigned-suffix-opt •

    $default  reduce using rule 472 (integer-suffix)


State 926

  516 long-long-suffix-opt: long-long-suffix •

    $default  reduce using rule 516 (long-long-suffix-opt)


State 927

  468 integer-suffix: unsigned-suffix long-long-suffix-opt •

    $default  reduce using rule 468 (integer-suffix)


State 928

  520 long-suffix-opt: long-suffix •

    $default  reduce using rule 520 (long-suffix-opt)


State 929

  467 integer-suffix: unsigned-suffix long-suffix-opt •

    $default  reduce using rule 467 (integer-suffix)


State 930

  850 size-suffix-opt: size-suffix •

    $default  reduce using rule 850 (size-suffix-opt)


State 931

  469 integer-suffix: unsigned-suffix size-suffix-opt •

    $default  reduce using rule 469 (integer-suffix)


State 932

  140 compare-expression: compare-expression "<=>" shift-expression •
  801 shift-expression: shift-expression • "<<" additive-expression
  802                 | shift-expression • ">>" additive-expression

    "<<"  shift, and go to state 696
    ">>"  shift, and go to state 697

    $default  reduce using rule 140 (compare-expression)


State 933

  234 digit: '0' •

    $default  reduce using rule 234 (digit)


State 934

  235 digit: '1' •

    $default  reduce using rule 235 (digit)


State 935

  236 digit: '2' •

    $default  reduce using rule 236 (digit)


State 936

  237 digit: '3' •

    $default  reduce using rule 237 (digit)


State 937

  238 digit: '4' •

    $default  reduce using rule 238 (digit)


State 938

  239 digit: '5' •

    $default  reduce using rule 239 (digit)


State 939

  240 digit: '6' •

    $default  reduce using rule 240 (digit)


State 940

  241 digit: '7' •

    $default  reduce using rule 241 (digit)


State 941

  242 digit: '8' •

    $default  reduce using rule 242 (digit)


State 942

  243 digit: '9' •

    $default  reduce using rule 243 (digit)


State 943

  185 decimal-literal: decimal-literal apostrophe-opt digit •

    $default  reduce using rule 185 (decimal-literal)


State 944

  803 sign: '+' •

    $default  reduce using rule 803 (sign)


State 945

  804 sign: '-' •

    $default  reduce using rule 804 (sign)


State 946

  806 sign-opt: sign •

    $default  reduce using rule 806 (sign-opt)


State 947

  303 exponent-part: 'e' sign-opt • digit-sequence

    '0'  shift, and go to state 933
    '1'  shift, and go to state 934
    '2'  shift, and go to state 935
    '3'  shift, and go to state 936
    '4'  shift, and go to state 937
    '5'  shift, and go to state 938
    '6'  shift, and go to state 939
    '7'  shift, and go to state 940
    '8'  shift, and go to state 941
    '9'  shift, and go to state 942

    digit           go to state 299
    digit-sequence  go to state 1193


State 948

  304 exponent-part: 'E' sign-opt • digit-sequence

    '0'  shift, and go to state 933
    '1'  shift, and go to state 934
    '2'  shift, and go to state 935
    '3'  shift, and go to state 936
    '4'  shift, and go to state 937
    '5'  shift, and go to state 938
    '6'  shift, and go to state 939
    '7'  shift, and go to state 940
    '8'  shift, and go to state 941
    '9'  shift, and go to state 942

    digit           go to state 299
    digit-sequence  go to state 1194


State 949

  245 digit-sequence: digit-sequence apostrophe-opt digit •

    $default  reduce using rule 245 (digit-sequence)


State 950

  331 floating-point-suffix: 'L' •

    $default  reduce using rule 331 (floating-point-suffix)


State 951

  328 floating-point-suffix: 'f' •

    $default  reduce using rule 328 (floating-point-suffix)


State 952

  329 floating-point-suffix: 'l' •

    $default  reduce using rule 329 (floating-point-suffix)


State 953

  330 floating-point-suffix: 'F' •

    $default  reduce using rule 330 (floating-point-suffix)


State 954

  333 floating-point-suffix-opt: floating-point-suffix •

    $default  reduce using rule 333 (floating-point-suffix-opt)


State 955

  183 decimal-floating-point-literal: digit-sequence exponent-part floating-point-suffix-opt •

    $default  reduce using rule 183 (decimal-floating-point-literal)


State 956

  964 user-defined-floating-point-literal: digit-sequence exponent-part ud-suffix •

    $default  reduce using rule 964 (user-defined-floating-point-literal)


State 957

  245 digit-sequence: digit-sequence • apostrophe-opt digit
  372 fractional-constant: digit-sequence-opt '.' digit-sequence •

    '\''  shift, and go to state 588

    '0'       reduce using rule 21 (apostrophe-opt)
    '1'       reduce using rule 21 (apostrophe-opt)
    '2'       reduce using rule 21 (apostrophe-opt)
    '3'       reduce using rule 21 (apostrophe-opt)
    '4'       reduce using rule 21 (apostrophe-opt)
    '5'       reduce using rule 21 (apostrophe-opt)
    '6'       reduce using rule 21 (apostrophe-opt)
    '7'       reduce using rule 21 (apostrophe-opt)
    '8'       reduce using rule 21 (apostrophe-opt)
    '9'       reduce using rule 21 (apostrophe-opt)
    $default  reduce using rule 372 (fractional-constant)

    apostrophe-opt  go to state 612


State 958

   81 basic-c-char: EXCEPT_THE_APOSTROPHE_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER •

    $default  reduce using rule 81 (basic-c-char)


State 959

  108 c-char: basic-c-char •

    $default  reduce using rule 108 (c-char)


State 960

  111 c-char-sequence: c-char •

    $default  reduce using rule 111 (c-char-sequence)


State 961

  112 c-char-sequence: c-char-sequence • c-char
  121 character-literal: encoding-prefix-opt '\'' c-char-sequence • '\''

    EXCEPT_THE_APOSTROPHE_REVERSE_SOLIDUS_OR_NEW_LINE_CHARACTER  shift, and go to state 958
    '\''                                                         shift, and go to state 1195
    '\\'                                                         shift, and go to state 707
    "\\x"                                                        shift, and go to state 708
    "\\u"                                                        shift, and go to state 709
    "\\U"                                                        shift, and go to state 710

    basic-c-char                 go to state 959
    c-char                       go to state 1196
    conditional-escape-sequence  go to state 712
    escape-sequence              go to state 962
    hexadecimal-escape-sequence  go to state 714
    numeric-escape-sequence      go to state 715
    octal-escape-sequence        go to state 716
    simple-escape-sequence       go to state 720
    universal-character-name     go to state 963


State 962

  109 c-char: escape-sequence •

    $default  reduce using rule 109 (c-char)


State 963

  110 c-char: universal-character-name •

    $default  reduce using rule 110 (c-char)


State 964

  285 equality-expression: equality-expression "==" relational-expression •
  765 relational-expression: relational-expression • '<' compare-expression
  766                      | relational-expression • '>' compare-expression
  767                      | relational-expression • "<=" compare-expression
  768                      | relational-expression • ">=" compare-expression

    '<'   shift, and go to state 690
    '>'   shift, and go to state 691
    "<="  shift, and go to state 692
    ">="  shift, and go to state 693

    '>'       [reduce using rule 285 (equality-expression)]
    $default  reduce using rule 285 (equality-expression)


State 965

  286 equality-expression: equality-expression "!=" relational-expression •
  765 relational-expression: relational-expression • '<' compare-expression
  766                      | relational-expression • '>' compare-expression
  767                      | relational-expression • "<=" compare-expression
  768                      | relational-expression • ">=" compare-expression

    '<'   shift, and go to state 690
    '>'   shift, and go to state 691
    "<="  shift, and go to state 692
    ">="  shift, and go to state 693

    '>'       [reduce using rule 286 (equality-expression)]
    $default  reduce using rule 286 (equality-expression)


State 966

   20 and-expression: and-expression • '&' equality-expression
  296 exclusive-or-expression: exclusive-or-expression '^' and-expression •

    '&'  shift, and go to state 585

    $default  reduce using rule 296 (exclusive-or-expression)


State 967

  317 expression: expression ',' assignment-expression •

    $default  reduce using rule 317 (expression)


State 968

  182 decimal-floating-point-literal: fractional-constant exponent-part-opt floating-point-suffix-opt •

    $default  reduce using rule 182 (decimal-floating-point-literal)


State 969

  963 user-defined-floating-point-literal: fractional-constant exponent-part-opt ud-suffix •

    $default  reduce using rule 963 (user-defined-floating-point-literal)


State 970

   85 binary-exponent-part: 'p' • sign-opt digit-sequence

    '+'  shift, and go to state 944
    '-'  shift, and go to state 945

    $default  reduce using rule 805 (sign-opt)

    sign      go to state 946
    sign-opt  go to state 1197


State 971

   86 binary-exponent-part: 'P' • sign-opt digit-sequence

    '+'  shift, and go to state 944
    '-'  shift, and go to state 945

    $default  reduce using rule 805 (sign-opt)

    sign      go to state 946
    sign-opt  go to state 1198


State 972

  428 hexadecimal-fractional-constant: hexadecimal-digit-sequence '.' •

    $default  reduce using rule 428 (hexadecimal-fractional-constant)


State 973

  420 hexadecimal-digit-sequence: hexadecimal-digit-sequence apostrophe-opt • hexadecimal-digit

    '0'  shift, and go to state 625
    '1'  shift, and go to state 626
    '2'  shift, and go to state 627
    '3'  shift, and go to state 628
    '4'  shift, and go to state 629
    '5'  shift, and go to state 630
    '6'  shift, and go to state 631
    '7'  shift, and go to state 632
    '8'  shift, and go to state 633
    '9'  shift, and go to state 634
    'e'  shift, and go to state 635
    'E'  shift, and go to state 636
    'f'  shift, and go to state 637
    'F'  shift, and go to state 638
    'a'  shift, and go to state 639
    'b'  shift, and go to state 640
    'c'  shift, and go to state 641
    'd'  shift, and go to state 642
    'A'  shift, and go to state 643
    'B'  shift, and go to state 644
    'C'  shift, and go to state 645
    'D'  shift, and go to state 646

    hexadecimal-digit  go to state 1199


State 974

  426 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part • floating-point-suffix-opt
  966 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part • ud-suffix

    IDENTIFIER  shift, and go to state 586
    'L'         shift, and go to state 950
    'f'         shift, and go to state 951
    'l'         shift, and go to state 952
    'F'         shift, and go to state 953

    IDENTIFIER  [reduce using rule 332 (floating-point-suffix-opt)]
    $default    reduce using rule 332 (floating-point-suffix-opt)

    floating-point-suffix      go to state 954
    floating-point-suffix-opt  go to state 1200
    ud-suffix                  go to state 1201


State 975

  427 hexadecimal-fractional-constant: hexadecimal-digit-sequence-opt '.' • hexadecimal-digit-sequence

    '0'  shift, and go to state 625
    '1'  shift, and go to state 626
    '2'  shift, and go to state 627
    '3'  shift, and go to state 628
    '4'  shift, and go to state 629
    '5'  shift, and go to state 630
    '6'  shift, and go to state 631
    '7'  shift, and go to state 632
    '8'  shift, and go to state 633
    '9'  shift, and go to state 634
    'e'  shift, and go to state 635
    'E'  shift, and go to state 636
    'f'  shift, and go to state 637
    'F'  shift, and go to state 638
    'a'  shift, and go to state 639
    'b'  shift, and go to state 640
    'c'  shift, and go to state 641
    'd'  shift, and go to state 642
    'A'  shift, and go to state 643
    'B'  shift, and go to state 644
    'C'  shift, and go to state 645
    'D'  shift, and go to state 646

    hexadecimal-digit           go to state 647
    hexadecimal-digit-sequence  go to state 1202


State 976

  425 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part • floating-point-suffix-opt
  965 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part • ud-suffix

    IDENTIFIER  shift, and go to state 586
    'L'         shift, and go to state 950
    'f'         shift, and go to state 951
    'l'         shift, and go to state 952
    'F'         shift, and go to state 953

    IDENTIFIER  [reduce using rule 332 (floating-point-suffix-opt)]
    $default    reduce using rule 332 (floating-point-suffix-opt)

    floating-point-suffix      go to state 954
    floating-point-suffix-opt  go to state 1203
    ud-suffix                  go to state 1204


State 977

  296 exclusive-or-expression: exclusive-or-expression • '^' and-expression
  439 inclusive-or-expression: inclusive-or-expression '|' exclusive-or-expression •

    '^'  shift, and go to state 618

    $default  reduce using rule 439 (inclusive-or-expression)


State 978

  493 lambda-declarator: '(' parameter-declaration-clause • ')' lambda-specifiers requires-clause-opt

    ')'  shift, and go to state 1205


State 979

  495 lambda-expression: lambda-introducer '<' template-parameter-list • '>' requires-clause-opt lambda-declarator compound-statement
  890 template-parameter-list: template-parameter-list • ',' template-parameter

    ','  shift, and go to state 485
    '>'  shift, and go to state 1206


State 980

  603 noexcept-specifier: "noexcept" • '(' constant-expression ')'
  604                   | "noexcept" •

    '('  shift, and go to state 1207

    '('       [reduce using rule 604 (noexcept-specifier)]
    $default  reduce using rule 604 (noexcept-specifier)


State 981

  606 noexcept-specifier-opt: noexcept-specifier •

    $default  reduce using rule 606 (noexcept-specifier-opt)


State 982

  497 lambda-specifiers: decl-specifier-seq-opt noexcept-specifier-opt • attribute-specifier-seq-opt trailing-return-type-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 1208


State 983

  142 compound-statement: '{' • statement-seq-opt '}'

    IDENTIFIER       shift, and go to state 1
    "using"          shift, and go to state 2
    "::"             shift, and go to state 4
    "virtual"        shift, and go to state 5
    "class"          shift, and go to state 6
    "struct"         shift, and go to state 7
    "union"          shift, and go to state 8
    "constexpr"      shift, and go to state 10
    "const"          shift, and go to state 11
    "volatile"       shift, and go to state 12
    "friend"         shift, and go to state 13
    "typedef"        shift, and go to state 14
    "consteval"      shift, and go to state 15
    "constinit"      shift, and go to state 16
    "inline"         shift, and go to state 159
    "decltype"       shift, and go to state 18
    "enum"           shift, and go to state 19
    "explicit"       shift, and go to state 20
    "extern"         shift, and go to state 160
    "namespace"      shift, and go to state 1209
    "char"           shift, and go to state 27
    "char8_t"        shift, and go to state 28
    "char16_t"       shift, and go to state 29
    "char32_t"       shift, and go to state 30
    "wchar_t"        shift, and go to state 31
    "bool"           shift, and go to state 32
    "short"          shift, and go to state 33
    "int"            shift, and go to state 34
    "long"           shift, and go to state 35
    "signed"         shift, and go to state 36
    "unsigned"       shift, and go to state 37
    "float"          shift, and go to state 38
    "double"         shift, and go to state 39
    "void"           shift, and go to state 40
    "static_assert"  shift, and go to state 41
    "static"         shift, and go to state 42
    "thread_local"   shift, and go to state 43
    "mutable"        shift, and go to state 44
    "typename"       shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    '}'             reduce using rule 861 (statement-seq-opt)
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration            go to state 46
    asm-declaration              go to state 47
    attribute-specifier-seq      go to state 1210
    attribute-specifier-seq-opt  go to state 1211
    block-declaration            go to state 1212
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 58
    declaration-statement        go to state 1213
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 69
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    labeled-statement            go to state 1214
    namespace-alias              go to state 86
    namespace-alias-definition   go to state 87
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    opaque-enum-declaration      go to state 94
    placeholder-type-specifier   go to state 95
    simple-declaration           go to state 96
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    statement                    go to state 1215
    statement-seq                go to state 1216
    statement-seq-opt            go to state 1217
    static_assert-declaration    go to state 99
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    using-declaration            go to state 112
    using-directive              go to state 113
    using-enum-declaration       go to state 114


State 984

  494 lambda-expression: lambda-introducer lambda-declarator compound-statement •

    $default  reduce using rule 494 (lambda-expression)


State 985

  883 template-id: literal-operator-id '<' template-argument-list-opt • '>'

    '>'  shift, and go to state 1218


State 986

  439 inclusive-or-expression: inclusive-or-expression • '|' exclusive-or-expression
  510 logical-and-expression: logical-and-expression "&&" inclusive-or-expression •

    '|'  shift, and go to state 651

    $default  reduce using rule 510 (logical-and-expression)


State 987

  152 conditional-expression: logical-or-expression '?' expression • ':' assignment-expression
  317 expression: expression • ',' assignment-expression

    ','  shift, and go to state 620
    ':'  shift, and go to state 1219


State 988

  510 logical-and-expression: logical-and-expression • "&&" inclusive-or-expression
  512 logical-or-expression: logical-or-expression "||" logical-and-expression •

    "&&"  shift, and go to state 659

    $default  reduce using rule 512 (logical-or-expression)


State 989

   27 assignment-expression: logical-or-expression assignment-operator initializer-clause •

    $default  reduce using rule 27 (assignment-expression)


State 990

  563 multiplicative-expression: multiplicative-expression '*' pm-expression •
  706 pm-expression: pm-expression • ".*" cast-expression
  707              | pm-expression • "->*" cast-expression

    ".*"   shift, and go to state 682
    "->*"  shift, and go to state 683

    $default  reduce using rule 563 (multiplicative-expression)


State 991

  564 multiplicative-expression: multiplicative-expression '/' pm-expression •
  706 pm-expression: pm-expression • ".*" cast-expression
  707              | pm-expression • "->*" cast-expression

    ".*"   shift, and go to state 682
    "->*"  shift, and go to state 683

    $default  reduce using rule 564 (multiplicative-expression)


State 992

  565 multiplicative-expression: multiplicative-expression '%' pm-expression •
  706 pm-expression: pm-expression • ".*" cast-expression
  707              | pm-expression • "->*" cast-expression

    ".*"   shift, and go to state 682
    "->*"  shift, and go to state 683

    $default  reduce using rule 565 (multiplicative-expression)


State 993

  884 template-name: IDENTIFIER •
  951 unqualified-id: IDENTIFIER •

    '<'       reduce using rule 884 (template-name)
    '<'       [reduce using rule 951 (unqualified-id)]
    $default  reduce using rule 951 (unqualified-id)


State 994

  580 nested-name-specifier: nested-name-specifier template-opt simple-template-id • "::"
  881 template-id: simple-template-id •

    "::"  shift, and go to state 818

    "::"      [reduce using rule 881 (template-id)]
    $default  reduce using rule 881 (template-id)


State 995

  752 qualified-id: nested-name-specifier template-opt unqualified-id •

    $default  reduce using rule 752 (qualified-id)


State 996

  632 octal-digit: '0' •

    $default  reduce using rule 632 (octal-digit)


State 997

  633 octal-digit: '1' •

    $default  reduce using rule 633 (octal-digit)


State 998

  634 octal-digit: '2' •

    $default  reduce using rule 634 (octal-digit)


State 999

  635 octal-digit: '3' •

    $default  reduce using rule 635 (octal-digit)


State 1000

  636 octal-digit: '4' •

    $default  reduce using rule 636 (octal-digit)


State 1001

  637 octal-digit: '5' •

    $default  reduce using rule 637 (octal-digit)


State 1002

  638 octal-digit: '6' •

    $default  reduce using rule 638 (octal-digit)


State 1003

  639 octal-digit: '7' •

    $default  reduce using rule 639 (octal-digit)


State 1004

  644 octal-literal: octal-literal apostrophe-opt octal-digit •

    $default  reduce using rule 644 (octal-literal)


State 1005

  882 template-id: operator-function-id '<' template-argument-list-opt • '>'

    '>'  shift, and go to state 1220


State 1006

  706 pm-expression: pm-expression ".*" cast-expression •

    $default  reduce using rule 706 (pm-expression)


State 1007

  707 pm-expression: pm-expression "->*" cast-expression •

    $default  reduce using rule 707 (pm-expression)


State 1008

  320 expression-list-opt: expression-list •

    $default  reduce using rule 320 (expression-list-opt)


State 1009

  711 postfix-expression: postfix-expression '(' expression-list-opt • ')'

    ')'  shift, and go to state 1221


State 1010

  710 postfix-expression: postfix-expression '[' expression-list-opt • ']'

    ']'  shift, and go to state 1222


State 1011

  717 postfix-expression: postfix-expression "->" template-opt • id-expression

    IDENTIFIER  shift, and go to state 242
    "::"        shift, and go to state 4
    "operator"  shift, and go to state 256
    "decltype"  shift, and go to state 18
    '~'         shift, and go to state 398

    class-name              go to state 54
    conversion-function-id  go to state 295
    decltype-specifier      go to state 126
    enum-name               go to state 70
    id-expression           go to state 1223
    literal-operator-id     go to state 318
    namespace-alias         go to state 86
    namespace-name          go to state 89
    nested-name-specifier   go to state 400
    operator-function-id    go to state 327
    qualified-id            go to state 332
    simple-template-id      go to state 337
    template-id             go to state 340
    template-name           go to state 103
    type-name               go to state 107
    typedef-name            go to state 109
    unqualified-id          go to state 345


State 1012

  716 postfix-expression: postfix-expression '.' template-opt • id-expression

    IDENTIFIER  shift, and go to state 242
    "::"        shift, and go to state 4
    "operator"  shift, and go to state 256
    "decltype"  shift, and go to state 18
    '~'         shift, and go to state 398

    class-name              go to state 54
    conversion-function-id  go to state 295
    decltype-specifier      go to state 126
    enum-name               go to state 70
    id-expression           go to state 1224
    literal-operator-id     go to state 318
    namespace-alias         go to state 86
    namespace-name          go to state 89
    nested-name-specifier   go to state 400
    operator-function-id    go to state 327
    qualified-id            go to state 332
    simple-template-id      go to state 337
    template-id             go to state 340
    template-name           go to state 103
    type-name               go to state 107
    typedef-name            go to state 109
    unqualified-id          go to state 345


State 1013

  140 compare-expression: compare-expression • "<=>" shift-expression
  765 relational-expression: relational-expression '<' compare-expression •

    "<=>"  shift, and go to state 605

    $default  reduce using rule 765 (relational-expression)


State 1014

  140 compare-expression: compare-expression • "<=>" shift-expression
  766 relational-expression: relational-expression '>' compare-expression •

    "<=>"  shift, and go to state 605

    $default  reduce using rule 766 (relational-expression)


State 1015

  140 compare-expression: compare-expression • "<=>" shift-expression
  767 relational-expression: relational-expression "<=" compare-expression •

    "<=>"  shift, and go to state 605

    $default  reduce using rule 767 (relational-expression)


State 1016

  140 compare-expression: compare-expression • "<=>" shift-expression
  768 relational-expression: relational-expression ">=" compare-expression •

    "<=>"  shift, and go to state 605

    $default  reduce using rule 768 (relational-expression)


State 1017

  229 delete-expression: scope-opt "delete" '[' • ']' cast-expression
  496 lambda-introducer: '[' • lambda-capture-opt ']'

    IDENTIFIER  shift, and go to state 496
    '='         shift, and go to state 497
    '&'         shift, and go to state 498
    "..."       shift, and go to state 169
    ']'         shift, and go to state 1225
    '*'         shift, and go to state 499
    "this"      shift, and go to state 500

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    ']'         [reduce using rule 490 (lambda-capture-opt)]

    capture             go to state 501
    capture-default     go to state 502
    capture-list        go to state 503
    eclipse-opt         go to state 504
    init-capture        go to state 505
    lambda-capture      go to state 506
    lambda-capture-opt  go to state 507
    simple-capture      go to state 508


State 1018

  228 delete-expression: scope-opt "delete" cast-expression •

    $default  reduce using rule 228 (delete-expression)


State 1019

  595 new-placement: '(' • expression-list ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression-list                      go to state 1226
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 789
    initializer-list                     go to state 790
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1020

  597 new-placement-opt: new-placement •

    $default  reduce using rule 597 (new-placement-opt)


State 1021

  589 new-expression: scope-opt "new" new-placement-opt • new-type-id new-initializer-opt
  590               | scope-opt "new" new-placement-opt • '(' type-id ')' new-initializer-opt

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 1227
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 116
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    class-key                   go to state 463
    class-name                  go to state 54
    cv-qualifier                go to state 56
    decltype-specifier          go to state 62
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-name                   go to state 70
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    new-type-id                 go to state 1228
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 471
    type-specifier-seq          go to state 1229
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 1022

   14 additive-expression: additive-expression • '+' multiplicative-expression
   15                    | additive-expression • '-' multiplicative-expression
  801 shift-expression: shift-expression "<<" additive-expression •

    '+'  shift, and go to state 583
    '-'  shift, and go to state 584

    $default  reduce using rule 801 (shift-expression)


State 1023

   14 additive-expression: additive-expression • '+' multiplicative-expression
   15                    | additive-expression • '-' multiplicative-expression
  802 shift-expression: shift-expression ">>" additive-expression •

    '+'  shift, and go to state 583
    '-'  shift, and go to state 584

    $default  reduce using rule 802 (shift-expression)


State 1024

  712 postfix-expression: simple-type-specifier '(' expression-list-opt • ')'

    ')'  shift, and go to state 1230


State 1025

  713 postfix-expression: typename-specifier '(' expression-list-opt • ')'

    ')'  shift, and go to state 1231


State 1026

  150 conditional-escape-sequence-char: NOT_AN_OCTAL_DIGIT_A_SIMPLE_ESCAPE_SEQUENCE_CHAR_OR_THE_CHARACTERS_U_U_OR_X •

    $default  reduce using rule 150 (conditional-escape-sequence-char)


State 1027

  815 simple-escape-sequence-char: '\'' •

    $default  reduce using rule 815 (simple-escape-sequence-char)


State 1028

  818 simple-escape-sequence-char: '\\' •

    $default  reduce using rule 818 (simple-escape-sequence-char)


State 1029

  817 simple-escape-sequence-char: '?' •

    $default  reduce using rule 817 (simple-escape-sequence-char)


State 1030

  821 simple-escape-sequence-char: 'f' •

    $default  reduce using rule 821 (simple-escape-sequence-char)


State 1031

  816 simple-escape-sequence-char: '"' •

    $default  reduce using rule 816 (simple-escape-sequence-char)


State 1032

  819 simple-escape-sequence-char: 'a' •

    $default  reduce using rule 819 (simple-escape-sequence-char)


State 1033

  820 simple-escape-sequence-char: 'b' •

    $default  reduce using rule 820 (simple-escape-sequence-char)


State 1034

  822 simple-escape-sequence-char: 'n' •

    $default  reduce using rule 822 (simple-escape-sequence-char)


State 1035

  823 simple-escape-sequence-char: 'r' •

    $default  reduce using rule 823 (simple-escape-sequence-char)


State 1036

  824 simple-escape-sequence-char: 't' •

    $default  reduce using rule 824 (simple-escape-sequence-char)


State 1037

  825 simple-escape-sequence-char: 'v' •

    $default  reduce using rule 825 (simple-escape-sequence-char)


State 1038

  149 conditional-escape-sequence: '\\' conditional-escape-sequence-char •

    $default  reduce using rule 149 (conditional-escape-sequence)


State 1039

  640 octal-escape-sequence: '\\' octal-digit •
  641                      | '\\' octal-digit • octal-digit
  642                      | '\\' octal-digit • octal-digit octal-digit

    '0'  shift, and go to state 996
    '1'  shift, and go to state 997
    '2'  shift, and go to state 998
    '3'  shift, and go to state 999
    '4'  shift, and go to state 1000
    '5'  shift, and go to state 1001
    '6'  shift, and go to state 1002
    '7'  shift, and go to state 1003

    $default  reduce using rule 640 (octal-escape-sequence)

    octal-digit  go to state 1232


State 1040

  814 simple-escape-sequence: '\\' simple-escape-sequence-char •

    $default  reduce using rule 814 (simple-escape-sequence)


State 1041

  423 hexadecimal-escape-sequence: "\\x" hexadecimal-digit •

    $default  reduce using rule 423 (hexadecimal-escape-sequence)


State 1042

  948 universal-character-name: "\\u" hex-quad •

    $default  reduce using rule 948 (universal-character-name)


State 1043

  396 hex-quad: hexadecimal-digit • hexadecimal-digit hexadecimal-digit hexadecimal-digit

    '0'  shift, and go to state 625
    '1'  shift, and go to state 626
    '2'  shift, and go to state 627
    '3'  shift, and go to state 628
    '4'  shift, and go to state 629
    '5'  shift, and go to state 630
    '6'  shift, and go to state 631
    '7'  shift, and go to state 632
    '8'  shift, and go to state 633
    '9'  shift, and go to state 634
    'e'  shift, and go to state 635
    'E'  shift, and go to state 636
    'f'  shift, and go to state 637
    'F'  shift, and go to state 638
    'a'  shift, and go to state 639
    'b'  shift, and go to state 640
    'c'  shift, and go to state 641
    'd'  shift, and go to state 642
    'A'  shift, and go to state 643
    'B'  shift, and go to state 644
    'C'  shift, and go to state 645
    'D'  shift, and go to state 646

    hexadecimal-digit  go to state 1233


State 1044

  949 universal-character-name: "\\U" hex-quad • hex-quad

    '0'  shift, and go to state 625
    '1'  shift, and go to state 626
    '2'  shift, and go to state 627
    '3'  shift, and go to state 628
    '4'  shift, and go to state 629
    '5'  shift, and go to state 630
    '6'  shift, and go to state 631
    '7'  shift, and go to state 632
    '8'  shift, and go to state 633
    '9'  shift, and go to state 634
    'e'  shift, and go to state 635
    'E'  shift, and go to state 636
    'f'  shift, and go to state 637
    'F'  shift, and go to state 638
    'a'  shift, and go to state 639
    'b'  shift, and go to state 640
    'c'  shift, and go to state 641
    'd'  shift, and go to state 642
    'A'  shift, and go to state 643
    'B'  shift, and go to state 644
    'C'  shift, and go to state 645
    'D'  shift, and go to state 646

    hex-quad           go to state 1234
    hexadecimal-digit  go to state 1043


State 1045

  424 hexadecimal-escape-sequence: hexadecimal-escape-sequence hexadecimal-digit •

    $default  reduce using rule 424 (hexadecimal-escape-sequence)


State 1046

  790 s-char-sequence: s-char-sequence s-char •

    $default  reduce using rule 790 (s-char-sequence)


State 1047

  869 string-literal: encoding-prefix-opt '"' s-char-sequence-opt '"' •

    $default  reduce using rule 869 (string-literal)


State 1048

  177 d-char: EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE •

    $default  reduce using rule 177 (d-char)


State 1049

  178 d-char-sequence: d-char •

    $default  reduce using rule 178 (d-char-sequence)


State 1050

  179 d-char-sequence: d-char-sequence • d-char
  181 d-char-sequence-opt: d-char-sequence •

    EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE  shift, and go to state 1048

    $default  reduce using rule 181 (d-char-sequence-opt)

    d-char  go to state 1235


State 1051

  759 raw-string: '"' d-char-sequence-opt • '(' r-char-sequence-opt ')' d-char-sequence-opt '"'

    '('  shift, and go to state 1236


State 1052

  498 linkage-specification: "extern" string-literal '{' declaration-seq-opt '}' •

    $default  reduce using rule 498 (linkage-specification)


State 1053

  567 namespace-alias: IDENTIFIER •
  573 namespace-name: IDENTIFIER •

    ';'       reduce using rule 567 (namespace-alias)
    ';'       [reduce using rule 573 (namespace-name)]
    $default  reduce using rule 567 (namespace-alias)


State 1054

  753 qualified-namespace-specifier: nested-name-specifier-opt namespace-name •

    $default  reduce using rule 753 (qualified-namespace-specifier)


State 1055

  568 namespace-alias-definition: "namespace" IDENTIFIER '=' qualified-namespace-specifier ';' •

    $default  reduce using rule 568 (namespace-alias-definition)


State 1056

  257 enclosing-namespace-specifier: enclosing-namespace-specifier "::" inline-opt IDENTIFIER •
  583 nested-namespace-definition: "namespace" enclosing-namespace-specifier "::" inline-opt IDENTIFIER • '{' namespace-body '}'

    '{'  shift, and go to state 1237

    $default  reduce using rule 257 (enclosing-namespace-specifier)


State 1057

  863 static_assert-declaration: "static_assert" '(' constant-expression ')' ';' •

    $default  reduce using rule 863 (static_assert-declaration)


State 1058

  864 static_assert-declaration: "static_assert" '(' constant-expression ',' string-literal • ')' ';'

    ')'  shift, and go to state 1238


State 1059

  980 using-directive: attribute-specifier-seq-opt "using" "namespace" nested-name-specifier-opt namespace-name • ';'

    ';'  shift, and go to state 1239


State 1060

   18 alignment-specifier: "alignas" '(' constant-expression eclipse-opt • ')'

    ')'  shift, and go to state 1240


State 1061

   17 alignment-specifier: "alignas" '(' type-id eclipse-opt • ')'

    ')'  shift, and go to state 1241


State 1062

   23 asm-declaration: attribute-specifier-seq-opt "asm" '(' string-literal ')' • ';'

    ';'  shift, and go to state 1242


State 1063

   50 attribute-namespace: IDENTIFIER •

    $default  reduce using rule 50 (attribute-namespace)


State 1064

   61 attribute-using-prefix: "using" attribute-namespace • ':'

    ':'  shift, and go to state 1243


State 1065

   50 attribute-namespace: IDENTIFIER •
   59 attribute-token: IDENTIFIER •

    "::"      reduce using rule 50 (attribute-namespace)
    $default  reduce using rule 59 (attribute-token)


State 1066

   48 attribute-list: attribute • "..."
   52 attribute-opt: attribute •

    "..."  shift, and go to state 1244

    $default  reduce using rule 52 (attribute-opt)


State 1067

   47 attribute-list: attribute-list • ',' attribute-opt
   49               | attribute-list • ',' attribute "..."
   54 attribute-specifier: '[' '[' attribute-using-prefix-opt attribute-list • ']' ']'

    ','  shift, and go to state 1245
    ']'  shift, and go to state 1246


State 1068

   53 attribute-scoped-token: attribute-namespace • "::" IDENTIFIER

    "::"  shift, and go to state 1247


State 1069

   46 attribute-list: attribute-opt •

    $default  reduce using rule 46 (attribute-list)


State 1070

   60 attribute-token: attribute-scoped-token •

    $default  reduce using rule 60 (attribute-token)


State 1071

   41 attribute: attribute-token • attribute-argument-clause-opt

    '('  shift, and go to state 1248

    $default  reduce using rule 43 (attribute-argument-clause-opt)

    attribute-argument-clause      go to state 1249
    attribute-argument-clause-opt  go to state 1250


State 1072

  174 cv-qualifier-seq: cv-qualifier cv-qualifier-seq-opt •

    $default  reduce using rule 174 (cv-qualifier-seq)


State 1073

  434 identifier-list: IDENTIFIER •

    $default  reduce using rule 434 (identifier-list)


State 1074

  435 identifier-list: identifier-list • ',' IDENTIFIER
  813 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt '[' identifier-list • ']' initializer ';'

    ','  shift, and go to state 1251
    ']'  shift, and go to state 1252


State 1075

  376 function-body: '=' • "default" ';'
  377              | '=' • "delete" ';'

    "delete"   shift, and go to state 1253
    "default"  shift, and go to state 1254


State 1076

  169 ctor-initializer: ':' • mem-initializer-list

    IDENTIFIER  shift, and go to state 1255
    "::"        shift, and go to state 4
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]

    class-name                 go to state 54
    class-or-decltype          go to state 1256
    decltype-specifier         go to state 1101
    enum-name                  go to state 70
    mem-initializer            go to state 1257
    mem-initializer-id         go to state 1258
    mem-initializer-list       go to state 1259
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 1102
    nested-name-specifier-opt  go to state 1103
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 1077

  382 function-try-block: "try" • ctor-initializer-opt compound-statement handler-seq

    ':'  shift, and go to state 1076

    $default  reduce using rule 170 (ctor-initializer-opt)

    ctor-initializer      go to state 1078
    ctor-initializer-opt  go to state 1260


State 1078

  171 ctor-initializer-opt: ctor-initializer •

    $default  reduce using rule 171 (ctor-initializer-opt)


State 1079

  374 function-body: ctor-initializer-opt • compound-statement

    '{'  shift, and go to state 983

    compound-statement  go to state 1261


State 1080

  379 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator requires-clause function-body •

    $default  reduce using rule 379 (function-definition)


State 1081

  375 function-body: function-try-block •

    $default  reduce using rule 375 (function-body)


State 1082

  985 virt-specifier-seq: virt-specifier-seq virt-specifier •

    $default  reduce using rule 985 (virt-specifier-seq)


State 1083

  378 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator virt-specifier-seq-opt function-body •

    $default  reduce using rule 378 (function-definition)


State 1084

  745 ptr-operator: nested-name-specifier '*' attribute-specifier-seq-opt cv-qualifier-seq-opt •

    $default  reduce using rule 745 (ptr-operator)


State 1085

  702 parameters-and-qualifiers: '(' parameter-declaration-clause ')' • cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt

    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12

    $default  reduce using rule 175 (cv-qualifier-seq-opt)

    cv-qualifier          go to state 751
    cv-qualifier-seq      go to state 752
    cv-qualifier-seq-opt  go to state 1262


State 1086

  697 parameter-declaration-clause: parameter-declaration-list ',' • "..."
  699 parameter-declaration-list: parameter-declaration-list ',' • parameter-declaration

    "..."  shift, and go to state 1263

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 233
    parameter-declaration        go to state 1264


State 1087

  696 parameter-declaration-clause: parameter-declaration-list-opt eclipse-opt •

    $default  reduce using rule 696 (parameter-declaration-clause)


State 1088

  626 noptr-declarator: noptr-declarator '[' constant-expression-opt ']' • attribute-specifier-seq-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 1265


State 1089

  894 trailing-return-type: "->" type-id •

    $default  reduce using rule 894 (trailing-return-type)


State 1090

  547 member-specification: access-specifier ':' member-specification-opt •

    $default  reduce using rule 547 (member-specification)


State 1091

  128 class-name: IDENTIFIER •
  274 enum-name: IDENTIFIER •
  437 identifier-opt: IDENTIFIER •
  567 namespace-alias: IDENTIFIER •
  573 namespace-name: IDENTIFIER •
  884 template-name: IDENTIFIER •
  923 typedef-name: IDENTIFIER •

    "::"      reduce using rule 128 (class-name)
    "::"      [reduce using rule 274 (enum-name)]
    "::"      [reduce using rule 567 (namespace-alias)]
    "::"      [reduce using rule 573 (namespace-name)]
    "::"      [reduce using rule 923 (typedef-name)]
    '<'       reduce using rule 884 (template-name)
    $default  reduce using rule 437 (identifier-opt)


State 1092

  378 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator • virt-specifier-seq-opt function-body
  379                    | attribute-specifier-seq-opt decl-specifier-seq-opt declarator • requires-clause function-body
  538 member-declarator: declarator • virt-specifier-seq-opt pure-specifier-opt
  539                  | declarator • requires-clause
  540                  | declarator • brace-or-equal-initializer-opt

    '='         shift, and go to state 433
    '{'         shift, and go to state 435
    "final"     shift, and go to state 755
    "requires"  shift, and go to state 436
    "override"  shift, and go to state 756

    '='       [reduce using rule 986 (virt-specifier-seq-opt)]
    ';'       reduce using rule 103 (brace-or-equal-initializer-opt)
    ';'       [reduce using rule 986 (virt-specifier-seq-opt)]
    ','       reduce using rule 103 (brace-or-equal-initializer-opt)
    ','       [reduce using rule 986 (virt-specifier-seq-opt)]
    ':'       reduce using rule 986 (virt-specifier-seq-opt)
    '{'       [reduce using rule 986 (virt-specifier-seq-opt)]
    "try"     reduce using rule 986 (virt-specifier-seq-opt)
    $default  reduce using rule 103 (brace-or-equal-initializer-opt)

    brace-or-equal-initializer      go to state 1266
    brace-or-equal-initializer-opt  go to state 1267
    braced-init-list                go to state 438
    requires-clause                 go to state 1268
    virt-specifier                  go to state 758
    virt-specifier-seq              go to state 759
    virt-specifier-seq-opt          go to state 1269


State 1093

  541 member-declarator: identifier-opt • attribute-specifier-seq-opt ':' constant-expression brace-or-equal-initializer-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 1270


State 1094

  542 member-declarator-list: member-declarator •

    $default  reduce using rule 542 (member-declarator-list)


State 1095

  543 member-declarator-list: member-declarator-list • ',' member-declarator
  545 member-declarator-list-opt: member-declarator-list •

    ','  shift, and go to state 1271

    $default  reduce using rule 545 (member-declarator-list-opt)


State 1096

  527 member-declaration: attribute-specifier-seq-opt decl-specifier-seq-opt member-declarator-list-opt • ';'

    ';'  shift, and go to state 1272


State 1097

  645 opaque-enum-declaration: enum-key attribute-specifier-seq-opt enum-head-name • enum-base-opt ';'

    ':'  shift, and go to state 806

    $default  reduce using rule 265 (enum-base-opt)

    enum-base      go to state 807
    enum-base-opt  go to state 808


State 1098

   77 base-specifier: attribute-specifier-seq-opt "virtual" • access-specifier-opt class-or-decltype

    "private"    shift, and go to state 406
    "protected"  shift, and go to state 407
    "public"     shift, and go to state 408

    $default  reduce using rule 11 (access-specifier-opt)

    access-specifier      go to state 1273
    access-specifier-opt  go to state 1274


State 1099

   78 base-specifier: attribute-specifier-seq-opt access-specifier • virtual-opt class-or-decltype

    "virtual"  shift, and go to state 1275

    $default  reduce using rule 988 (virtual-opt)

    virtual-opt  go to state 1276


State 1100

   76 base-specifier: attribute-specifier-seq-opt class-or-decltype •

    $default  reduce using rule 76 (base-specifier)


State 1101

  132 class-or-decltype: decltype-specifier •
  578 nested-name-specifier: decltype-specifier • "::"

    "::"  shift, and go to state 197

    $default  reduce using rule 132 (class-or-decltype)


State 1102

  131 class-or-decltype: nested-name-specifier • "template" simple-template-id
  579 nested-name-specifier: nested-name-specifier • IDENTIFIER "::"
  580                      | nested-name-specifier • template-opt simple-template-id "::"
  582 nested-name-specifier-opt: nested-name-specifier •

    IDENTIFIER  shift, and go to state 208
    "template"  shift, and go to state 1277

    IDENTIFIER  [reduce using rule 582 (nested-name-specifier-opt)]
    IDENTIFIER  [reduce using rule 885 (template-opt)]

    template-opt  go to state 210


State 1103

  130 class-or-decltype: nested-name-specifier-opt • type-name

    IDENTIFIER  shift, and go to state 565

    class-name          go to state 54
    enum-name           go to state 70
    simple-template-id  go to state 97
    template-name       go to state 103
    type-name           go to state 1278
    typedef-name        go to state 109


State 1104

   79 base-specifier-list: base-specifier eclipse-opt •

    $default  reduce using rule 79 (base-specifier-list)


State 1105

   80 base-specifier-list: base-specifier-list ',' • base-specifier eclipse-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 775
    base-specifier               go to state 1279


State 1106

  122 class-head: class-key attribute-specifier-seq-opt class-head-name class-virt-specifier-opt base-clause-opt •

    $default  reduce using rule 122 (class-head)


State 1107

  454 initializer: '(' expression-list ')' •

    $default  reduce using rule 454 (initializer)


State 1108

  457 initializer-list: initializer-clause eclipse-opt •

    $default  reduce using rule 457 (initializer-list)


State 1109

  458 initializer-list: initializer-list ',' • initializer-clause eclipse-opt

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 1280
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1110

  233 designator: '.' IDENTIFIER •

    $default  reduce using rule 233 (designator)


State 1111

  138 comma-opt: ',' •
  232 designated-initializer-list: designated-initializer-list ',' • designated-initializer-clause

    '.'  shift, and go to state 792

    $default  reduce using rule 138 (comma-opt)

    designated-initializer-clause  go to state 1281
    designator                     go to state 795


State 1112

  106 braced-init-list: '{' designated-initializer-list comma-opt • '}'

    '}'  shift, and go to state 1282


State 1113

  230 designated-initializer-clause: designator brace-or-equal-initializer •

    $default  reduce using rule 230 (designated-initializer-clause)


State 1114

  138 comma-opt: ',' •
  458 initializer-list: initializer-list ',' • initializer-clause eclipse-opt

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    '}'         reduce using rule 138 (comma-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 1280
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1115

  105 braced-init-list: '{' initializer-list comma-opt • '}'

    '}'  shift, and go to state 1283


State 1116

  160 constraint-logical-and-expression: constraint-logical-and-expression "&&" • primary-expression

    IDENTIFIER  shift, and go to state 242
    '('         shift, and go to state 797
    "::"        shift, and go to state 4
    '['         shift, and go to state 248
    '0'         shift, and go to state 250
    '1'         shift, and go to state 251
    "0b"        shift, and go to state 252
    "0B"        shift, and go to state 253
    "false"     shift, and go to state 254
    "true"      shift, and go to state 255
    "operator"  shift, and go to state 256
    "decltype"  shift, and go to state 18
    '2'         shift, and go to state 257
    '3'         shift, and go to state 258
    '4'         shift, and go to state 259
    '5'         shift, and go to state 260
    '6'         shift, and go to state 261
    '7'         shift, and go to state 262
    '8'         shift, and go to state 263
    '9'         shift, and go to state 264
    "u8"        shift, and go to state 133
    'u'         shift, and go to state 134
    'U'         shift, and go to state 135
    'L'         shift, and go to state 136
    "0x"        shift, and go to state 267
    "0X"        shift, and go to state 268
    "requires"  shift, and go to state 269
    '~'         shift, and go to state 398
    "nullptr"   shift, and go to state 274
    "this"      shift, and go to state 280

    '.'       reduce using rule 246 (digit-sequence-opt)
    $default  reduce using rule 262 (encoding-prefix-opt)

    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 126
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 400
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    pointer-literal                      go to state 329
    primary-expression                   go to state 1284
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    simple-template-id                   go to state 337
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-name                            go to state 107
    typedef-name                         go to state 109
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 1117

  162 constraint-logical-or-expression: constraint-logical-or-expression "||" • constraint-logical-and-expression

    IDENTIFIER  shift, and go to state 242
    '('         shift, and go to state 797
    "::"        shift, and go to state 4
    '['         shift, and go to state 248
    '0'         shift, and go to state 250
    '1'         shift, and go to state 251
    "0b"        shift, and go to state 252
    "0B"        shift, and go to state 253
    "false"     shift, and go to state 254
    "true"      shift, and go to state 255
    "operator"  shift, and go to state 256
    "decltype"  shift, and go to state 18
    '2'         shift, and go to state 257
    '3'         shift, and go to state 258
    '4'         shift, and go to state 259
    '5'         shift, and go to state 260
    '6'         shift, and go to state 261
    '7'         shift, and go to state 262
    '8'         shift, and go to state 263
    '9'         shift, and go to state 264
    "u8"        shift, and go to state 133
    'u'         shift, and go to state 134
    'U'         shift, and go to state 135
    'L'         shift, and go to state 136
    "0x"        shift, and go to state 267
    "0X"        shift, and go to state 268
    "requires"  shift, and go to state 269
    '~'         shift, and go to state 398
    "nullptr"   shift, and go to state 274
    "this"      shift, and go to state 280

    '.'       reduce using rule 246 (digit-sequence-opt)
    $default  reduce using rule 262 (encoding-prefix-opt)

    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    character-literal                    go to state 292
    class-name                           go to state 54
    constraint-logical-and-expression    go to state 1285
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 126
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 400
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    pointer-literal                      go to state 329
    primary-expression                   go to state 800
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    simple-template-id                   go to state 337
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-name                            go to state 107
    typedef-name                         go to state 109
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 1118

  279 enumerator-definition: enumerator '=' constant-expression •

    $default  reduce using rule 279 (enumerator-definition)


State 1119

  276 enum-specifier: enum-head '{' enumerator-list ',' '}' •

    $default  reduce using rule 276 (enum-specifier)


State 1120

  281 enumerator-list: enumerator-list ',' enumerator-definition •

    $default  reduce using rule 281 (enumerator-list)


State 1121

  264 enum-base: ':' type-specifier-seq •

    $default  reduce using rule 264 (enum-base)


State 1122

  645 opaque-enum-declaration: enum-key attribute-specifier-seq-opt enum-head-name enum-base-opt ';' •

    $default  reduce using rule 645 (opaque-enum-declaration)


State 1123

  221 deduction-guide: explicit-specifier-opt template-name '(' parameter-declaration-clause ')' • "->" simple-template-id ';'

    "->"  shift, and go to state 1286


State 1124

  561 module-partition-opt: module-partition •

    $default  reduce using rule 561 (module-partition-opt)


State 1125

  550 module-declaration: export-keyword-opt "module-keyword" module-name module-partition-opt • attribute-specifier-seq-opt ';'

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 1287


State 1126

  733 private-module-fragment: "module-keyword" ':' • "private" ';' declaration-seq-opt

    "private"  shift, and go to state 1288


State 1127

  566 named-namespace-definition: inline-opt "namespace" attribute-specifier-seq-opt IDENTIFIER '{' • namespace-body '}'

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    '}'             reduce using rule 214 (declaration-seq-opt)
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"      [reduce using rule 324 (extern-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "namespace"     [reduce using rule 461 (inline-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 59
    declaration-seq                  go to state 60
    declaration-seq-opt              go to state 1128
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-body                   go to state 1289
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 1128

  569 namespace-body: declaration-seq-opt •

    $default  reduce using rule 569 (namespace-body)


State 1129

  950 unnamed-namespace-definition: inline-opt "namespace" attribute-specifier-seq-opt '{' namespace-body • '}'

    '}'  shift, and go to state 1290


State 1130

  901 type-constraint: nested-name-specifier-opt concept-name '<' template-argument-list-opt '>' •

    $default  reduce using rule 901 (type-constraint)


State 1131

  143 concept-definition: "concept" concept-name '=' constraint-expression • ';'

    ';'  shift, and go to state 1291


State 1132

  158 constraint-expression: logical-or-expression •
  512 logical-or-expression: logical-or-expression • "||" logical-and-expression

    "||"  shift, and go to state 672

    $default  reduce using rule 158 (constraint-expression)


State 1133

  251 elaborated-type-specifier: class-key attribute-specifier-seq-opt nested-name-specifier-opt • IDENTIFIER

    IDENTIFIER  shift, and go to state 1292


State 1134

  875 template-argument-list: template-argument-list ',' template-argument • eclipse-opt

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 1293


State 1135

  616 noptr-abstract-declarator: noptr-abstract-declarator-opt • parameters-and-qualifiers
  617                          | noptr-abstract-declarator-opt • '[' constant-expression-opt ']' attribute-specifier-seq-opt

    '('  shift, and go to state 402
    '['  shift, and go to state 1138

    parameters-and-qualifiers  go to state 1294


State 1136

  618 noptr-abstract-declarator: '(' ptr-abstract-declarator • ')'

    ')'  shift, and go to state 1295


State 1137

  737 ptr-abstract-declarator: ptr-operator • ptr-abstract-declarator-opt

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 827
    '&'         shift, and go to state 167
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    '('       [reduce using rule 619 (noptr-abstract-declarator-opt)]
    ')'       reduce using rule 738 (ptr-abstract-declarator-opt)
    $default  reduce using rule 619 (noptr-abstract-declarator-opt)

    class-name                     go to state 54
    decltype-specifier             go to state 126
    enum-name                      go to state 70
    namespace-alias                go to state 86
    namespace-name                 go to state 89
    nested-name-specifier          go to state 195
    noptr-abstract-declarator      go to state 832
    noptr-abstract-declarator-opt  go to state 1135
    ptr-abstract-declarator        go to state 1143
    ptr-abstract-declarator-opt    go to state 1144
    ptr-operator                   go to state 1137
    simple-template-id             go to state 97
    template-name                  go to state 103
    type-name                      go to state 107
    typedef-name                   go to state 109


State 1138

  617 noptr-abstract-declarator: noptr-abstract-declarator-opt '[' • constant-expression-opt ']' attribute-specifier-seq-opt

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ']'         reduce using rule 154 (constant-expression-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 766
    constant-expression-opt              go to state 1296
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 1139

    2 abstract-declarator: noptr-abstract-declarator-opt parameters-and-qualifiers • trailing-return-type
  616 noptr-abstract-declarator: noptr-abstract-declarator-opt parameters-and-qualifiers •

    "->"  shift, and go to state 768

    $default  reduce using rule 616 (noptr-abstract-declarator)

    trailing-return-type  go to state 1297


State 1140

  622 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator '[' • constant-expression-opt ']' attribute-specifier-seq-opt

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ']'         reduce using rule 154 (constant-expression-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 766
    constant-expression-opt              go to state 1298
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 1141

  621 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator parameters-and-qualifiers •

    $default  reduce using rule 621 (noptr-abstract-pack-declarator)


State 1142

    7 abstract-pack-declarator: ptr-operator abstract-pack-declarator •

    $default  reduce using rule 7 (abstract-pack-declarator)


State 1143

  739 ptr-abstract-declarator-opt: ptr-abstract-declarator •

    $default  reduce using rule 739 (ptr-abstract-declarator-opt)


State 1144

  737 ptr-abstract-declarator: ptr-operator ptr-abstract-declarator-opt •

    $default  reduce using rule 737 (ptr-abstract-declarator)


State 1145

  704 placeholder-type-specifier: type-constraint-opt "decltype" '(' "auto" ')' •

    $default  reduce using rule 704 (placeholder-type-specifier)


State 1146

   16 alias-declaration: "using" IDENTIFIER attribute-specifier-seq-opt '=' defining-type-id ';' •

    $default  reduce using rule 16 (alias-declaration)


State 1147

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  226 defining-type-specifier-seq: defining-type-specifier attribute-specifier-seq-opt •

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    '['       [reduce using rule 226 (defining-type-specifier-seq)]
    $default  reduce using rule 226 (defining-type-specifier-seq)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 1148

  227 defining-type-specifier-seq: defining-type-specifier defining-type-specifier-seq •

    $default  reduce using rule 227 (defining-type-specifier-seq)


State 1149

  222 defining-type-id: defining-type-specifier-seq abstract-declarator-opt •

    $default  reduce using rule 222 (defining-type-id)


State 1150

  618 noptr-abstract-declarator: '(' • ptr-abstract-declarator ')'
  627 noptr-declarator: '(' • ptr-declarator ')'

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 1150
    '&'         shift, and go to state 167
    "..."       shift, and go to state 169
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    '('         [reduce using rule 619 (noptr-abstract-declarator-opt)]
    "::"        [reduce using rule 248 (eclipse-opt)]
    '['         reduce using rule 619 (noptr-abstract-declarator-opt)
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 248 (eclipse-opt)

    class-name                     go to state 54
    declarator-id                  go to state 178
    decltype-specifier             go to state 126
    eclipse-opt                    go to state 179
    enum-name                      go to state 70
    namespace-alias                go to state 86
    namespace-name                 go to state 89
    nested-name-specifier          go to state 195
    noptr-abstract-declarator      go to state 832
    noptr-abstract-declarator-opt  go to state 1135
    noptr-declarator               go to state 384
    ptr-abstract-declarator        go to state 1136
    ptr-declarator                 go to state 385
    ptr-operator                   go to state 1299
    simple-template-id             go to state 97
    template-name                  go to state 103
    type-name                      go to state 107
    typedef-name                   go to state 109


State 1151

  249 eclipse-opt: "..." •
  623 noptr-abstract-pack-declarator: "..." •

    IDENTIFIER  reduce using rule 249 (eclipse-opt)
    "::"        reduce using rule 249 (eclipse-opt)
    "operator"  reduce using rule 249 (eclipse-opt)
    "decltype"  reduce using rule 249 (eclipse-opt)
    '~'         reduce using rule 249 (eclipse-opt)
    $default    reduce using rule 623 (noptr-abstract-pack-declarator)


State 1152

  694 parameter-declaration: attribute-specifier-seq-opt this-opt decl-specifier-seq abstract-declarator-opt •
  695                      | attribute-specifier-seq-opt this-opt decl-specifier-seq abstract-declarator-opt • '=' initializer-clause

    '='  shift, and go to state 1300

    $default  reduce using rule 694 (parameter-declaration)


State 1153

  692 parameter-declaration: attribute-specifier-seq-opt this-opt decl-specifier-seq declarator •
  693                      | attribute-specifier-seq-opt this-opt decl-specifier-seq declarator • '=' initializer-clause

    '='  shift, and go to state 1301

    $default  reduce using rule 692 (parameter-declaration)


State 1154

    7 abstract-pack-declarator: ptr-operator • abstract-pack-declarator
  737 ptr-abstract-declarator: ptr-operator • ptr-abstract-declarator-opt
  741 ptr-declarator: ptr-operator • ptr-declarator

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 1150
    '&'         shift, and go to state 167
    "..."       shift, and go to state 1151
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    '('         [reduce using rule 619 (noptr-abstract-declarator-opt)]
    "..."       [reduce using rule 738 (ptr-abstract-declarator-opt)]
    "::"        [reduce using rule 248 (eclipse-opt)]
    '['         reduce using rule 619 (noptr-abstract-declarator-opt)
    "operator"  reduce using rule 248 (eclipse-opt)
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    '~'         reduce using rule 248 (eclipse-opt)
    $default    reduce using rule 738 (ptr-abstract-declarator-opt)

    abstract-pack-declarator        go to state 1142
    class-name                      go to state 54
    declarator-id                   go to state 178
    decltype-specifier              go to state 126
    eclipse-opt                     go to state 179
    enum-name                       go to state 70
    namespace-alias                 go to state 86
    namespace-name                  go to state 89
    nested-name-specifier           go to state 195
    noptr-abstract-declarator       go to state 832
    noptr-abstract-declarator-opt   go to state 1135
    noptr-abstract-pack-declarator  go to state 834
    noptr-declarator                go to state 384
    ptr-abstract-declarator         go to state 1143
    ptr-abstract-declarator-opt     go to state 1144
    ptr-declarator                  go to state 405
    ptr-operator                    go to state 1154
    simple-template-id              go to state 97
    template-name                   go to state 103
    type-name                       go to state 107
    typedef-name                    go to state 109


State 1155

  912 type-parameter: template-head type-parameter-key eclipse-opt identifier-opt •

    $default  reduce using rule 912 (type-parameter)


State 1156

  913 type-parameter: template-head type-parameter-key identifier-opt '=' • id-expression

    IDENTIFIER  shift, and go to state 242
    "::"        shift, and go to state 4
    "operator"  shift, and go to state 256
    "decltype"  shift, and go to state 18
    '~'         shift, and go to state 398

    class-name              go to state 54
    conversion-function-id  go to state 295
    decltype-specifier      go to state 126
    enum-name               go to state 70
    id-expression           go to state 1302
    literal-operator-id     go to state 318
    namespace-alias         go to state 86
    namespace-name          go to state 89
    nested-name-specifier   go to state 400
    operator-function-id    go to state 327
    qualified-id            go to state 332
    simple-template-id      go to state 337
    template-id             go to state 340
    template-name           go to state 103
    type-name               go to state 107
    typedef-name            go to state 109
    unqualified-id          go to state 345


State 1157

  911 type-parameter: type-constraint identifier-opt '=' type-id •

    $default  reduce using rule 911 (type-parameter)


State 1158

  909 type-parameter: type-parameter-key identifier-opt '=' type-id •

    $default  reduce using rule 909 (type-parameter)


State 1159

  335 fold-expression: '(' "..." fold-operator cast-expression • ')'

    ')'  shift, and go to state 1303


State 1160

  334 fold-expression: '(' cast-expression fold-operator "..." • ')'
  336                | '(' cast-expression fold-operator "..." • fold-operator cast-expression ')'

    '+'    shift, and go to state 852
    '-'    shift, and go to state 853
    '='    shift, and go to state 854
    ')'    shift, and go to state 1304
    '&'    shift, and go to state 855
    "*="   shift, and go to state 856
    "/="   shift, and go to state 857
    "%="   shift, and go to state 858
    "+="   shift, and go to state 859
    "-="   shift, and go to state 860
    ">>="  shift, and go to state 861
    "<<="  shift, and go to state 862
    "&="   shift, and go to state 863
    "^="   shift, and go to state 864
    "|="   shift, and go to state 865
    ','    shift, and go to state 866
    "&&"   shift, and go to state 867
    "||"   shift, and go to state 868
    "=="   shift, and go to state 869
    "!="   shift, and go to state 870
    '^'    shift, and go to state 871
    '<'    shift, and go to state 872
    '>'    shift, and go to state 873
    '*'    shift, and go to state 874
    '/'    shift, and go to state 875
    '%'    shift, and go to state 876
    '|'    shift, and go to state 877
    "<<"   shift, and go to state 878
    ">>"   shift, and go to state 879
    "<="   shift, and go to state 880
    ">="   shift, and go to state 881
    ".*"   shift, and go to state 882
    "->*"  shift, and go to state 883

    fold-operator  go to state 1305


State 1161

  120 cast-expression: '(' type-id ')' cast-expression •

    $default  reduce using rule 120 (cast-expression)


State 1162

  808 simple-capture: '&' IDENTIFIER eclipse-opt •

    $default  reduce using rule 808 (simple-capture)


State 1163

  441 init-capture: '&' eclipse-opt IDENTIFIER • initializer

    '='  shift, and go to state 433
    '('  shift, and go to state 434
    '{'  shift, and go to state 435

    brace-or-equal-initializer  go to state 437
    braced-init-list            go to state 438
    initializer                 go to state 1306


State 1164

  441 init-capture: '&' • eclipse-opt IDENTIFIER initializer
  808 simple-capture: '&' • IDENTIFIER eclipse-opt

    IDENTIFIER  shift, and go to state 889
    "..."       shift, and go to state 169

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]

    eclipse-opt  go to state 890


State 1165

  118 capture-list: capture-list • ',' capture
  489 lambda-capture: capture-default ',' capture-list •

    ','  shift, and go to state 893

    $default  reduce using rule 489 (lambda-capture)


State 1166

  118 capture-list: capture-list ',' capture •

    $default  reduce using rule 118 (capture-list)


State 1167

  440 init-capture: eclipse-opt IDENTIFIER initializer •

    $default  reduce using rule 440 (init-capture)


State 1168

  651 overloadable-operator: "delete" '[' ']' •

    $default  reduce using rule 651 (overloadable-operator)


State 1169

  650 overloadable-operator: "new" '[' ']' •

    $default  reduce using rule 650 (overloadable-operator)


State 1170

  647 operator-function-id: "operator" overloadable-operator '<' template-argument-list-opt • '>'

    '>'  shift, and go to state 1307


State 1171

  163 conversion-declarator: ptr-operator conversion-declarator-opt •

    $default  reduce using rule 163 (conversion-declarator)


State 1172

  774 requirement-parameter-list: '(' parameter-declaration-clause ')' •

    $default  reduce using rule 774 (requirement-parameter-list)


State 1173

  141 compound-requirement: '{' • expression '}' noexcept-opt return-type-requirement-opt ';'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1308
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1174

  584 nested-requirement: "requires" • constraint-expression ';'
  782 requires-expression: "requires" • requirement-parameter-list-opt requirement-body

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 1309
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    '{'         reduce using rule 775 (requirement-parameter-list-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    constraint-expression                go to state 1310
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 1132
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requirement-parameter-list           go to state 562
    requirement-parameter-list-opt       go to state 563
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 1175

  916 type-requirement: "typename" • nested-name-specifier-opt type-name ';'
  927 typename-specifier: "typename" • nested-name-specifier IDENTIFIER
  928                   | "typename" • nested-name-specifier template-opt simple-template-id

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]

    class-name                 go to state 54
    decltype-specifier         go to state 126
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 1311
    nested-name-specifier-opt  go to state 1312
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 1176

  771 requirement: compound-requirement •

    $default  reduce using rule 771 (requirement)


State 1177

  317 expression: expression • ',' assignment-expression
  826 simple-requirement: expression • ';'

    ';'  shift, and go to state 1313
    ','  shift, and go to state 620


State 1178

  772 requirement: nested-requirement •

    $default  reduce using rule 772 (requirement)


State 1179

  777 requirement-seq: requirement •

    $default  reduce using rule 777 (requirement-seq)


State 1180

  773 requirement-body: '{' requirement-seq • '}'
  778 requirement-seq: requirement-seq • requirement

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 1173
    '}'                 shift, and go to state 1314
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 1174
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 1175
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    compound-requirement                 go to state 1176
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1177
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    nested-requirement                   go to state 1178
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requirement                          go to state 1315
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-requirement                   go to state 1181
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    type-requirement                     go to state 1182
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1181

  769 requirement: simple-requirement •

    $default  reduce using rule 769 (requirement)


State 1182

  770 requirement: type-requirement •

    $default  reduce using rule 770 (requirement)


State 1183

  600 noexcept-expression: "noexcept" '(' expression ')' •

    $default  reduce using rule 600 (noexcept-expression)


State 1184

  720 postfix-expression: "dynamic_cast" '<' type-id '>' • '(' expression ')'

    '('  shift, and go to state 1316


State 1185

  721 postfix-expression: "static_cast" '<' type-id '>' • '(' expression ')'

    '('  shift, and go to state 1317


State 1186

  722 postfix-expression: "reinterpret_cast" '<' type-id '>' • '(' expression ')'

    '('  shift, and go to state 1318


State 1187

  723 postfix-expression: "const_cast" '<' type-id '>' • '(' expression ')'

    '('  shift, and go to state 1319


State 1188

  724 postfix-expression: "typeid" '(' expression ')' •

    $default  reduce using rule 724 (postfix-expression)


State 1189

  725 postfix-expression: "typeid" '(' type-id ')' •

    $default  reduce using rule 725 (postfix-expression)


State 1190

  936 unary-expression: "sizeof" '(' type-id ')' •

    $default  reduce using rule 936 (unary-expression)


State 1191

  937 unary-expression: "sizeof" "..." '(' IDENTIFIER • ')'

    ')'  shift, and go to state 1320


State 1192

  938 unary-expression: "alignof" '(' type-id ')' •

    $default  reduce using rule 938 (unary-expression)


State 1193

  245 digit-sequence: digit-sequence • apostrophe-opt digit
  303 exponent-part: 'e' sign-opt digit-sequence •

    '\''  shift, and go to state 588

    '0'       reduce using rule 21 (apostrophe-opt)
    '1'       reduce using rule 21 (apostrophe-opt)
    '2'       reduce using rule 21 (apostrophe-opt)
    '3'       reduce using rule 21 (apostrophe-opt)
    '4'       reduce using rule 21 (apostrophe-opt)
    '5'       reduce using rule 21 (apostrophe-opt)
    '6'       reduce using rule 21 (apostrophe-opt)
    '7'       reduce using rule 21 (apostrophe-opt)
    '8'       reduce using rule 21 (apostrophe-opt)
    '9'       reduce using rule 21 (apostrophe-opt)
    $default  reduce using rule 303 (exponent-part)

    apostrophe-opt  go to state 612


State 1194

  245 digit-sequence: digit-sequence • apostrophe-opt digit
  304 exponent-part: 'E' sign-opt digit-sequence •

    '\''  shift, and go to state 588

    '0'       reduce using rule 21 (apostrophe-opt)
    '1'       reduce using rule 21 (apostrophe-opt)
    '2'       reduce using rule 21 (apostrophe-opt)
    '3'       reduce using rule 21 (apostrophe-opt)
    '4'       reduce using rule 21 (apostrophe-opt)
    '5'       reduce using rule 21 (apostrophe-opt)
    '6'       reduce using rule 21 (apostrophe-opt)
    '7'       reduce using rule 21 (apostrophe-opt)
    '8'       reduce using rule 21 (apostrophe-opt)
    '9'       reduce using rule 21 (apostrophe-opt)
    $default  reduce using rule 304 (exponent-part)

    apostrophe-opt  go to state 612


State 1195

  121 character-literal: encoding-prefix-opt '\'' c-char-sequence '\'' •

    $default  reduce using rule 121 (character-literal)


State 1196

  112 c-char-sequence: c-char-sequence c-char •

    $default  reduce using rule 112 (c-char-sequence)


State 1197

   85 binary-exponent-part: 'p' sign-opt • digit-sequence

    '0'  shift, and go to state 933
    '1'  shift, and go to state 934
    '2'  shift, and go to state 935
    '3'  shift, and go to state 936
    '4'  shift, and go to state 937
    '5'  shift, and go to state 938
    '6'  shift, and go to state 939
    '7'  shift, and go to state 940
    '8'  shift, and go to state 941
    '9'  shift, and go to state 942

    digit           go to state 299
    digit-sequence  go to state 1321


State 1198

   86 binary-exponent-part: 'P' sign-opt • digit-sequence

    '0'  shift, and go to state 933
    '1'  shift, and go to state 934
    '2'  shift, and go to state 935
    '3'  shift, and go to state 936
    '4'  shift, and go to state 937
    '5'  shift, and go to state 938
    '6'  shift, and go to state 939
    '7'  shift, and go to state 940
    '8'  shift, and go to state 941
    '9'  shift, and go to state 942

    digit           go to state 299
    digit-sequence  go to state 1322


State 1199

  420 hexadecimal-digit-sequence: hexadecimal-digit-sequence apostrophe-opt hexadecimal-digit •

    $default  reduce using rule 420 (hexadecimal-digit-sequence)


State 1200

  426 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part floating-point-suffix-opt •

    $default  reduce using rule 426 (hexadecimal-floating-point-literal)


State 1201

  966 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part ud-suffix •

    $default  reduce using rule 966 (user-defined-floating-point-literal)


State 1202

  420 hexadecimal-digit-sequence: hexadecimal-digit-sequence • apostrophe-opt hexadecimal-digit
  427 hexadecimal-fractional-constant: hexadecimal-digit-sequence-opt '.' hexadecimal-digit-sequence •

    '\''  shift, and go to state 588

    'p'       reduce using rule 427 (hexadecimal-fractional-constant)
    'P'       reduce using rule 427 (hexadecimal-fractional-constant)
    $default  reduce using rule 21 (apostrophe-opt)

    apostrophe-opt  go to state 973


State 1203

  425 hexadecimal-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part floating-point-suffix-opt •

    $default  reduce using rule 425 (hexadecimal-floating-point-literal)


State 1204

  965 user-defined-floating-point-literal: hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part ud-suffix •

    $default  reduce using rule 965 (user-defined-floating-point-literal)


State 1205

  493 lambda-declarator: '(' parameter-declaration-clause ')' • lambda-specifiers requires-clause-opt

    IDENTIFIER      shift, and go to state 1
    "::"            shift, and go to state 4
    "virtual"       shift, and go to state 5
    "class"         shift, and go to state 6
    "struct"        shift, and go to state 7
    "union"         shift, and go to state 8
    "constexpr"     shift, and go to state 10
    "const"         shift, and go to state 11
    "volatile"      shift, and go to state 12
    "friend"        shift, and go to state 13
    "typedef"       shift, and go to state 14
    "consteval"     shift, and go to state 15
    "constinit"     shift, and go to state 16
    "inline"        shift, and go to state 159
    "decltype"      shift, and go to state 18
    "enum"          shift, and go to state 19
    "explicit"      shift, and go to state 20
    "extern"        shift, and go to state 160
    "char"          shift, and go to state 27
    "char8_t"       shift, and go to state 28
    "char16_t"      shift, and go to state 29
    "char32_t"      shift, and go to state 30
    "wchar_t"       shift, and go to state 31
    "bool"          shift, and go to state 32
    "short"         shift, and go to state 33
    "int"           shift, and go to state 34
    "long"          shift, and go to state 35
    "signed"        shift, and go to state 36
    "unsigned"      shift, and go to state 37
    "float"         shift, and go to state 38
    "double"        shift, and go to state 39
    "void"          shift, and go to state 40
    "static"        shift, and go to state 42
    "thread_local"  shift, and go to state 43
    "mutable"       shift, and go to state 44
    "typename"      shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 197 (decl-specifier-seq-opt)

    class-head                  go to state 52
    class-key                   go to state 53
    class-name                  go to state 54
    class-specifier             go to state 55
    cv-qualifier                go to state 56
    decl-specifier              go to state 57
    decl-specifier-seq          go to state 654
    decl-specifier-seq-opt      go to state 655
    decltype-specifier          go to state 62
    defining-type-specifier     go to state 64
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-head                   go to state 68
    enum-key                    go to state 162
    enum-name                   go to state 70
    enum-specifier              go to state 71
    explicit-specifier          go to state 163
    function-specifier          go to state 79
    lambda-specifiers           go to state 1323
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    storage-class-specifier     go to state 100
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 108
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 1206

  495 lambda-expression: lambda-introducer '<' template-parameter-list '>' • requires-clause-opt lambda-declarator compound-statement

    "requires"  shift, and go to state 436

    $default  reduce using rule 780 (requires-clause-opt)

    requires-clause      go to state 846
    requires-clause-opt  go to state 1324


State 1207

  603 noexcept-specifier: "noexcept" '(' • constant-expression ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 1325
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 1208

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  497 lambda-specifiers: decl-specifier-seq-opt noexcept-specifier-opt attribute-specifier-seq-opt • trailing-return-type-opt

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170
    "->"       shift, and go to state 768

    $default  reduce using rule 895 (trailing-return-type-opt)

    alignment-specifier       go to state 173
    attribute-specifier       go to state 174
    trailing-return-type      go to state 1326
    trailing-return-type-opt  go to state 1327


State 1209

  568 namespace-alias-definition: "namespace" • IDENTIFIER '=' qualified-namespace-specifier ';'

    IDENTIFIER  shift, and go to state 1328


State 1210

   58 attribute-specifier-seq-opt: attribute-specifier-seq •
  812 simple-declaration: attribute-specifier-seq • decl-specifier-seq init-declarator-list ';'

    IDENTIFIER      shift, and go to state 1
    "::"            shift, and go to state 4
    "virtual"       shift, and go to state 5
    "class"         shift, and go to state 6
    "struct"        shift, and go to state 7
    "union"         shift, and go to state 8
    "constexpr"     shift, and go to state 10
    "const"         shift, and go to state 11
    "volatile"      shift, and go to state 12
    "friend"        shift, and go to state 13
    "typedef"       shift, and go to state 14
    "consteval"     shift, and go to state 15
    "constinit"     shift, and go to state 16
    "inline"        shift, and go to state 159
    "decltype"      shift, and go to state 18
    "enum"          shift, and go to state 19
    "explicit"      shift, and go to state 20
    "extern"        shift, and go to state 160
    "char"          shift, and go to state 27
    "char8_t"       shift, and go to state 28
    "char16_t"      shift, and go to state 29
    "char32_t"      shift, and go to state 30
    "wchar_t"       shift, and go to state 31
    "bool"          shift, and go to state 32
    "short"         shift, and go to state 33
    "int"           shift, and go to state 34
    "long"          shift, and go to state 35
    "signed"        shift, and go to state 36
    "unsigned"      shift, and go to state 37
    "float"         shift, and go to state 38
    "double"        shift, and go to state 39
    "void"          shift, and go to state 40
    "static"        shift, and go to state 42
    "thread_local"  shift, and go to state 43
    "mutable"       shift, and go to state 44
    "typename"      shift, and go to state 45

    IDENTIFIER      [reduce using rule 58 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "::"            [reduce using rule 58 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 58 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 58 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 58 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 58 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 58 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 58 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 58 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 58 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 58 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 58 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 58 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 58 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 58 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 58 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 58 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 58 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 58 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 58 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 58 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 58 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 58 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 58 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 58 (attribute-specifier-seq-opt)]
    $default        reduce using rule 58 (attribute-specifier-seq-opt)

    class-head                  go to state 52
    class-key                   go to state 53
    class-name                  go to state 54
    class-specifier             go to state 55
    cv-qualifier                go to state 56
    decl-specifier              go to state 57
    decl-specifier-seq          go to state 161
    decltype-specifier          go to state 62
    defining-type-specifier     go to state 64
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-head                   go to state 68
    enum-key                    go to state 162
    enum-name                   go to state 70
    enum-specifier              go to state 71
    explicit-specifier          go to state 163
    function-specifier          go to state 79
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    storage-class-specifier     go to state 100
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 108
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 1211

   23 asm-declaration: attribute-specifier-seq-opt • "asm" '(' string-literal ')' ';'
   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  484 labeled-statement: attribute-specifier-seq-opt • IDENTIFIER ':' statement
  485                  | attribute-specifier-seq-opt • "case" constant-expression ':' statement
  486                  | attribute-specifier-seq-opt • "default" ':' statement
  813 simple-declaration: attribute-specifier-seq-opt • decl-specifier-seq ref-qualifier-opt '[' identifier-list ']' initializer ';'
  852 statement: attribute-specifier-seq-opt • expression-statement
  853          | attribute-specifier-seq-opt • compound-statement
  854          | attribute-specifier-seq-opt • selection-statement
  855          | attribute-specifier-seq-opt • iteration-statement
  856          | attribute-specifier-seq-opt • jump-statement
  858          | attribute-specifier-seq-opt • try-block
  980 using-directive: attribute-specifier-seq-opt • "using" "namespace" nested-name-specifier-opt namespace-name ';'

    IDENTIFIER          shift, and go to state 1329
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    "using"             shift, and go to state 164
    "alignas"           shift, and go to state 165
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "asm"               shift, and go to state 168
    "::"                shift, and go to state 247
    '['                 shift, and go to state 1330
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 983
    "virtual"           shift, and go to state 5
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "constexpr"         shift, and go to state 10
    "operator"          shift, and go to state 256
    "co_return"         shift, and go to state 1331
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "friend"            shift, and go to state 13
    "typedef"           shift, and go to state 14
    "consteval"         shift, and go to state 15
    "constinit"         shift, and go to state 16
    "inline"            shift, and go to state 159
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 19
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    "explicit"          shift, and go to state 20
    "extern"            shift, and go to state 160
    '*'                 shift, and go to state 266
    "default"           shift, and go to state 1332
    "try"               shift, and go to state 1333
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "while"             shift, and go to state 1334
    "do"                shift, and go to state 1335
    "for"               shift, and go to state 1336
    "break"             shift, and go to state 1337
    "continue"          shift, and go to state 1338
    "return"            shift, and go to state 1339
    "goto"              shift, and go to state 1340
    "case"              shift, and go to state 1341
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "if"                shift, and go to state 1342
    "switch"            shift, and go to state 1343
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "static"            shift, and go to state 42
    "thread_local"      shift, and go to state 43
    "mutable"           shift, and go to state 44
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ';'         reduce using rule 321 (expression-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    alignment-specifier                  go to state 173
    and-expression                       go to state 286
    assignment-expression                go to state 287
    attribute-specifier                  go to state 174
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-head                           go to state 52
    class-key                            go to state 53
    class-name                           go to state 54
    class-specifier                      go to state 55
    compare-expression                   go to state 293
    compound-statement                   go to state 1344
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    coroutine-return-statement           go to state 1345
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decl-specifier                       go to state 57
    decl-specifier-seq                   go to state 1346
    decltype-specifier                   go to state 62
    defining-type-specifier              go to state 64
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-head                            go to state 68
    enum-key                             go to state 162
    enum-name                            go to state 70
    enum-specifier                       go to state 71
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    explicit-specifier                   go to state 163
    expression                           go to state 1347
    expression-opt                       go to state 1348
    expression-statement                 go to state 1349
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    function-specifier                   go to state 79
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    iteration-statement                  go to state 1350
    jump-statement                       go to state 1351
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    selection-statement                  go to state 1352
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    storage-class-specifier              go to state 100
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    try-block                            go to state 1353
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    type-specifier                       go to state 108
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1212

  216 declaration-statement: block-declaration •

    $default  reduce using rule 216 (declaration-statement)


State 1213

  857 statement: declaration-statement •

    $default  reduce using rule 857 (statement)


State 1214

  851 statement: labeled-statement •

    $default  reduce using rule 851 (statement)


State 1215

  859 statement-seq: statement •

    $default  reduce using rule 859 (statement-seq)


State 1216

  860 statement-seq: statement-seq • statement
  862 statement-seq-opt: statement-seq •

    IDENTIFIER       shift, and go to state 1
    "using"          shift, and go to state 2
    "::"             shift, and go to state 4
    "virtual"        shift, and go to state 5
    "class"          shift, and go to state 6
    "struct"         shift, and go to state 7
    "union"          shift, and go to state 8
    "constexpr"      shift, and go to state 10
    "const"          shift, and go to state 11
    "volatile"       shift, and go to state 12
    "friend"         shift, and go to state 13
    "typedef"        shift, and go to state 14
    "consteval"      shift, and go to state 15
    "constinit"      shift, and go to state 16
    "inline"         shift, and go to state 159
    "decltype"       shift, and go to state 18
    "enum"           shift, and go to state 19
    "explicit"       shift, and go to state 20
    "extern"         shift, and go to state 160
    "namespace"      shift, and go to state 1209
    "char"           shift, and go to state 27
    "char8_t"        shift, and go to state 28
    "char16_t"       shift, and go to state 29
    "char32_t"       shift, and go to state 30
    "wchar_t"        shift, and go to state 31
    "bool"           shift, and go to state 32
    "short"          shift, and go to state 33
    "int"            shift, and go to state 34
    "long"           shift, and go to state 35
    "signed"         shift, and go to state 36
    "unsigned"       shift, and go to state 37
    "float"          shift, and go to state 38
    "double"         shift, and go to state 39
    "void"           shift, and go to state 40
    "static_assert"  shift, and go to state 41
    "static"         shift, and go to state 42
    "thread_local"   shift, and go to state 43
    "mutable"        shift, and go to state 44
    "typename"       shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    '}'             reduce using rule 862 (statement-seq-opt)
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration            go to state 46
    asm-declaration              go to state 47
    attribute-specifier-seq      go to state 1210
    attribute-specifier-seq-opt  go to state 1211
    block-declaration            go to state 1212
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 58
    declaration-statement        go to state 1213
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 69
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    labeled-statement            go to state 1214
    namespace-alias              go to state 86
    namespace-alias-definition   go to state 87
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    opaque-enum-declaration      go to state 94
    placeholder-type-specifier   go to state 95
    simple-declaration           go to state 96
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    statement                    go to state 1354
    static_assert-declaration    go to state 99
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    using-declaration            go to state 112
    using-directive              go to state 113
    using-enum-declaration       go to state 114


State 1217

  142 compound-statement: '{' statement-seq-opt • '}'

    '}'  shift, and go to state 1355


State 1218

  883 template-id: literal-operator-id '<' template-argument-list-opt '>' •

    $default  reduce using rule 883 (template-id)


State 1219

  152 conditional-expression: logical-or-expression '?' expression ':' • assignment-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 1356
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1220

  882 template-id: operator-function-id '<' template-argument-list-opt '>' •

    $default  reduce using rule 882 (template-id)


State 1221

  711 postfix-expression: postfix-expression '(' expression-list-opt ')' •

    $default  reduce using rule 711 (postfix-expression)


State 1222

  710 postfix-expression: postfix-expression '[' expression-list-opt ']' •

    $default  reduce using rule 710 (postfix-expression)


State 1223

  717 postfix-expression: postfix-expression "->" template-opt id-expression •

    $default  reduce using rule 717 (postfix-expression)


State 1224

  716 postfix-expression: postfix-expression '.' template-opt id-expression •

    $default  reduce using rule 716 (postfix-expression)


State 1225

  229 delete-expression: scope-opt "delete" '[' ']' • cast-expression

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 1357
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 1226

  595 new-placement: '(' expression-list • ')'

    ')'  shift, and go to state 1358


State 1227

  590 new-expression: scope-opt "new" new-placement-opt '(' • type-id ')' new-initializer-opt

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 116
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    class-key                   go to state 463
    class-name                  go to state 54
    cv-qualifier                go to state 56
    decltype-specifier          go to state 62
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-name                   go to state 70
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-id                     go to state 1359
    type-name                   go to state 107
    type-specifier              go to state 471
    type-specifier-seq          go to state 472
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 1228

  589 new-expression: scope-opt "new" new-placement-opt new-type-id • new-initializer-opt

    '('  shift, and go to state 1360
    '{'  shift, and go to state 435

    '{'       [reduce using rule 593 (new-initializer-opt)]
    $default  reduce using rule 593 (new-initializer-opt)

    braced-init-list     go to state 1361
    new-initializer      go to state 1362
    new-initializer-opt  go to state 1363


State 1229

  598 new-type-id: type-specifier-seq • new-declarator-opt

    IDENTIFIER  shift, and go to state 1
    '&'         shift, and go to state 167
    "::"        shift, and go to state 4
    '['         shift, and go to state 1364
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    '&'       [reduce using rule 587 (new-declarator-opt)]
    "&&"      [reduce using rule 587 (new-declarator-opt)]
    '*'       [reduce using rule 587 (new-declarator-opt)]
    $default  reduce using rule 587 (new-declarator-opt)

    class-name             go to state 54
    decltype-specifier     go to state 126
    enum-name              go to state 70
    namespace-alias        go to state 86
    namespace-name         go to state 89
    nested-name-specifier  go to state 195
    new-declarator         go to state 1365
    new-declarator-opt     go to state 1366
    noptr-new-declarator   go to state 1367
    ptr-operator           go to state 1368
    simple-template-id     go to state 97
    template-name          go to state 103
    type-name              go to state 107
    typedef-name           go to state 109


State 1230

  712 postfix-expression: simple-type-specifier '(' expression-list-opt ')' •

    $default  reduce using rule 712 (postfix-expression)


State 1231

  713 postfix-expression: typename-specifier '(' expression-list-opt ')' •

    $default  reduce using rule 713 (postfix-expression)


State 1232

  641 octal-escape-sequence: '\\' octal-digit octal-digit •
  642                      | '\\' octal-digit octal-digit • octal-digit

    '0'  shift, and go to state 996
    '1'  shift, and go to state 997
    '2'  shift, and go to state 998
    '3'  shift, and go to state 999
    '4'  shift, and go to state 1000
    '5'  shift, and go to state 1001
    '6'  shift, and go to state 1002
    '7'  shift, and go to state 1003

    $default  reduce using rule 641 (octal-escape-sequence)

    octal-digit  go to state 1369


State 1233

  396 hex-quad: hexadecimal-digit hexadecimal-digit • hexadecimal-digit hexadecimal-digit

    '0'  shift, and go to state 625
    '1'  shift, and go to state 626
    '2'  shift, and go to state 627
    '3'  shift, and go to state 628
    '4'  shift, and go to state 629
    '5'  shift, and go to state 630
    '6'  shift, and go to state 631
    '7'  shift, and go to state 632
    '8'  shift, and go to state 633
    '9'  shift, and go to state 634
    'e'  shift, and go to state 635
    'E'  shift, and go to state 636
    'f'  shift, and go to state 637
    'F'  shift, and go to state 638
    'a'  shift, and go to state 639
    'b'  shift, and go to state 640
    'c'  shift, and go to state 641
    'd'  shift, and go to state 642
    'A'  shift, and go to state 643
    'B'  shift, and go to state 644
    'C'  shift, and go to state 645
    'D'  shift, and go to state 646

    hexadecimal-digit  go to state 1370


State 1234

  949 universal-character-name: "\\U" hex-quad hex-quad •

    $default  reduce using rule 949 (universal-character-name)


State 1235

  179 d-char-sequence: d-char-sequence d-char •

    $default  reduce using rule 179 (d-char-sequence)


State 1236

  759 raw-string: '"' d-char-sequence-opt '(' • r-char-sequence-opt ')' d-char-sequence-opt '"'

    EXCEPT_RIGHT_PARENTHESIS_FOLLOWED_BY_THE_INITIAL_D_CHAR_SEQUENCE_FOLLOWED_BY_QUOTATION_MARK  shift, and go to state 1371

    $default  reduce using rule 757 (r-char-sequence-opt)

    r-char               go to state 1372
    r-char-sequence      go to state 1373
    r-char-sequence-opt  go to state 1374


State 1237

  583 nested-namespace-definition: "namespace" enclosing-namespace-specifier "::" inline-opt IDENTIFIER '{' • namespace-body '}'

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    '}'             reduce using rule 214 (declaration-seq-opt)
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"      [reduce using rule 324 (extern-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "namespace"     [reduce using rule 461 (inline-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 59
    declaration-seq                  go to state 60
    declaration-seq-opt              go to state 1128
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-body                   go to state 1375
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 1238

  864 static_assert-declaration: "static_assert" '(' constant-expression ',' string-literal ')' • ';'

    ';'  shift, and go to state 1376


State 1239

  980 using-directive: attribute-specifier-seq-opt "using" "namespace" nested-name-specifier-opt namespace-name ';' •

    $default  reduce using rule 980 (using-directive)


State 1240

   18 alignment-specifier: "alignas" '(' constant-expression eclipse-opt ')' •

    $default  reduce using rule 18 (alignment-specifier)


State 1241

   17 alignment-specifier: "alignas" '(' type-id eclipse-opt ')' •

    $default  reduce using rule 17 (alignment-specifier)


State 1242

   23 asm-declaration: attribute-specifier-seq-opt "asm" '(' string-literal ')' ';' •

    $default  reduce using rule 23 (asm-declaration)


State 1243

   61 attribute-using-prefix: "using" attribute-namespace ':' •

    $default  reduce using rule 61 (attribute-using-prefix)


State 1244

   48 attribute-list: attribute "..." •

    $default  reduce using rule 48 (attribute-list)


State 1245

   47 attribute-list: attribute-list ',' • attribute-opt
   49               | attribute-list ',' • attribute "..."

    IDENTIFIER  shift, and go to state 1065

    $default  reduce using rule 51 (attribute-opt)

    attribute               go to state 1377
    attribute-namespace     go to state 1068
    attribute-opt           go to state 1378
    attribute-scoped-token  go to state 1070
    attribute-token         go to state 1071


State 1246

   54 attribute-specifier: '[' '[' attribute-using-prefix-opt attribute-list ']' • ']'

    ']'  shift, and go to state 1379


State 1247

   53 attribute-scoped-token: attribute-namespace "::" • IDENTIFIER

    IDENTIFIER  shift, and go to state 1380


State 1248

   42 attribute-argument-clause: '(' • balanced-token-seq-opt ')'

    ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE  shift, and go to state 1381
    '('                                             shift, and go to state 1382
    '['                                             shift, and go to state 1383
    '{'                                             shift, and go to state 1384

    $default  reduce using rule 71 (balanced-token-seq-opt)

    balanced-token          go to state 1385
    balanced-token-seq      go to state 1386
    balanced-token-seq-opt  go to state 1387


State 1249

   44 attribute-argument-clause-opt: attribute-argument-clause •

    $default  reduce using rule 44 (attribute-argument-clause-opt)


State 1250

   41 attribute: attribute-token attribute-argument-clause-opt •

    $default  reduce using rule 41 (attribute)


State 1251

  435 identifier-list: identifier-list ',' • IDENTIFIER

    IDENTIFIER  shift, and go to state 1388


State 1252

  813 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt '[' identifier-list ']' • initializer ';'

    '='  shift, and go to state 433
    '('  shift, and go to state 434
    '{'  shift, and go to state 435

    brace-or-equal-initializer  go to state 437
    braced-init-list            go to state 438
    initializer                 go to state 1389


State 1253

  377 function-body: '=' "delete" • ';'

    ';'  shift, and go to state 1390


State 1254

  376 function-body: '=' "default" • ';'

    ';'  shift, and go to state 1391


State 1255

  128 class-name: IDENTIFIER •
  274 enum-name: IDENTIFIER •
  524 mem-initializer-id: IDENTIFIER •
  567 namespace-alias: IDENTIFIER •
  573 namespace-name: IDENTIFIER •
  884 template-name: IDENTIFIER •
  923 typedef-name: IDENTIFIER •

    "::"      reduce using rule 128 (class-name)
    "::"      [reduce using rule 274 (enum-name)]
    "::"      [reduce using rule 567 (namespace-alias)]
    "::"      [reduce using rule 573 (namespace-name)]
    "::"      [reduce using rule 923 (typedef-name)]
    '<'       reduce using rule 884 (template-name)
    $default  reduce using rule 524 (mem-initializer-id)


State 1256

  523 mem-initializer-id: class-or-decltype •

    $default  reduce using rule 523 (mem-initializer-id)


State 1257

  525 mem-initializer-list: mem-initializer • eclipse-opt

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 1392


State 1258

  521 mem-initializer: mem-initializer-id • '(' expression-list-opt ')'
  522                | mem-initializer-id • braced-init-list

    '('  shift, and go to state 1393
    '{'  shift, and go to state 435

    braced-init-list  go to state 1394


State 1259

  169 ctor-initializer: ':' mem-initializer-list •
  526 mem-initializer-list: mem-initializer-list • ',' mem-initializer eclipse-opt

    ','  shift, and go to state 1395

    $default  reduce using rule 169 (ctor-initializer)


State 1260

  382 function-try-block: "try" ctor-initializer-opt • compound-statement handler-seq

    '{'  shift, and go to state 983

    compound-statement  go to state 1396


State 1261

  374 function-body: ctor-initializer-opt compound-statement •

    $default  reduce using rule 374 (function-body)


State 1262

  702 parameters-and-qualifiers: '(' parameter-declaration-clause ')' cv-qualifier-seq-opt • ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt

    '&'   shift, and go to state 391
    "&&"  shift, and go to state 392

    $default  reduce using rule 762 (ref-qualifier-opt)

    ref-qualifier      go to state 393
    ref-qualifier-opt  go to state 1397


State 1263

  697 parameter-declaration-clause: parameter-declaration-list ',' "..." •

    $default  reduce using rule 697 (parameter-declaration-clause)


State 1264

  699 parameter-declaration-list: parameter-declaration-list ',' parameter-declaration •

    $default  reduce using rule 699 (parameter-declaration-list)


State 1265

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  626 noptr-declarator: noptr-declarator '[' constant-expression-opt ']' attribute-specifier-seq-opt •

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    '['       [reduce using rule 626 (noptr-declarator)]
    $default  reduce using rule 626 (noptr-declarator)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 1266

  104 brace-or-equal-initializer-opt: brace-or-equal-initializer •

    $default  reduce using rule 104 (brace-or-equal-initializer-opt)


State 1267

  540 member-declarator: declarator brace-or-equal-initializer-opt •

    $default  reduce using rule 540 (member-declarator)


State 1268

  379 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator requires-clause • function-body
  539 member-declarator: declarator requires-clause •

    '='    shift, and go to state 1075
    ':'    shift, and go to state 1076
    "try"  shift, and go to state 1077

    '{'       reduce using rule 170 (ctor-initializer-opt)
    $default  reduce using rule 539 (member-declarator)

    ctor-initializer      go to state 1078
    ctor-initializer-opt  go to state 1079
    function-body         go to state 1080
    function-try-block    go to state 1081


State 1269

  378 function-definition: attribute-specifier-seq-opt decl-specifier-seq-opt declarator virt-specifier-seq-opt • function-body
  538 member-declarator: declarator virt-specifier-seq-opt • pure-specifier-opt

    '='    shift, and go to state 1398
    ':'    shift, and go to state 1076
    "try"  shift, and go to state 1077

    '{'       reduce using rule 170 (ctor-initializer-opt)
    $default  reduce using rule 747 (pure-specifier-opt)

    ctor-initializer      go to state 1078
    ctor-initializer-opt  go to state 1079
    function-body         go to state 1083
    function-try-block    go to state 1081
    pure-specifier        go to state 1399
    pure-specifier-opt    go to state 1400


State 1270

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  541 member-declarator: identifier-opt attribute-specifier-seq-opt • ':' constant-expression brace-or-equal-initializer-opt

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170
    ':'        shift, and go to state 1401

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 1271

  543 member-declarator-list: member-declarator-list ',' • member-declarator

    IDENTIFIER  shift, and go to state 1091
    '('         shift, and go to state 166
    '&'         shift, and go to state 167
    "..."       shift, and go to state 169
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    "::"        [reduce using rule 248 (eclipse-opt)]
    "operator"  reduce using rule 248 (eclipse-opt)
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    '~'         reduce using rule 248 (eclipse-opt)
    $default    reduce using rule 436 (identifier-opt)

    class-name             go to state 54
    declarator             go to state 1402
    declarator-id          go to state 178
    decltype-specifier     go to state 126
    eclipse-opt            go to state 179
    enum-name              go to state 70
    identifier-opt         go to state 1093
    member-declarator      go to state 1403
    namespace-alias        go to state 86
    namespace-name         go to state 89
    nested-name-specifier  go to state 195
    noptr-declarator       go to state 181
    ptr-declarator         go to state 182
    ptr-operator           go to state 183
    simple-template-id     go to state 97
    template-name          go to state 103
    type-name              go to state 107
    typedef-name           go to state 109


State 1272

  527 member-declaration: attribute-specifier-seq-opt decl-specifier-seq-opt member-declarator-list-opt ';' •

    $default  reduce using rule 527 (member-declaration)


State 1273

   12 access-specifier-opt: access-specifier •

    $default  reduce using rule 12 (access-specifier-opt)


State 1274

   77 base-specifier: attribute-specifier-seq-opt "virtual" access-specifier-opt • class-or-decltype

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]

    class-name                 go to state 54
    class-or-decltype          go to state 1404
    decltype-specifier         go to state 1101
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 1102
    nested-name-specifier-opt  go to state 1103
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 1275

  989 virtual-opt: "virtual" •

    $default  reduce using rule 989 (virtual-opt)


State 1276

   78 base-specifier: attribute-specifier-seq-opt access-specifier virtual-opt • class-or-decltype

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]

    class-name                 go to state 54
    class-or-decltype          go to state 1405
    decltype-specifier         go to state 1101
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 1102
    nested-name-specifier-opt  go to state 1103
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 1277

  131 class-or-decltype: nested-name-specifier "template" • simple-template-id
  886 template-opt: "template" •

    IDENTIFIER  shift, and go to state 200

    IDENTIFIER  [reduce using rule 886 (template-opt)]

    simple-template-id  go to state 1406
    template-name       go to state 103


State 1278

  130 class-or-decltype: nested-name-specifier-opt type-name •

    $default  reduce using rule 130 (class-or-decltype)


State 1279

   80 base-specifier-list: base-specifier-list ',' base-specifier • eclipse-opt

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 1407


State 1280

  458 initializer-list: initializer-list ',' initializer-clause • eclipse-opt

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 1408


State 1281

  232 designated-initializer-list: designated-initializer-list ',' designated-initializer-clause •

    $default  reduce using rule 232 (designated-initializer-list)


State 1282

  106 braced-init-list: '{' designated-initializer-list comma-opt '}' •

    $default  reduce using rule 106 (braced-init-list)


State 1283

  105 braced-init-list: '{' initializer-list comma-opt '}' •

    $default  reduce using rule 105 (braced-init-list)


State 1284

  160 constraint-logical-and-expression: constraint-logical-and-expression "&&" primary-expression •

    $default  reduce using rule 160 (constraint-logical-and-expression)


State 1285

  160 constraint-logical-and-expression: constraint-logical-and-expression • "&&" primary-expression
  162 constraint-logical-or-expression: constraint-logical-or-expression "||" constraint-logical-and-expression •

    "&&"  shift, and go to state 1116

    "&&"      [reduce using rule 162 (constraint-logical-or-expression)]
    $default  reduce using rule 162 (constraint-logical-or-expression)


State 1286

  221 deduction-guide: explicit-specifier-opt template-name '(' parameter-declaration-clause ')' "->" • simple-template-id ';'

    IDENTIFIER  shift, and go to state 200

    simple-template-id  go to state 1409
    template-name       go to state 103


State 1287

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  550 module-declaration: export-keyword-opt "module-keyword" module-name module-partition-opt attribute-specifier-seq-opt • ';'

    ';'        shift, and go to state 1410
    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 1288

  733 private-module-fragment: "module-keyword" ':' "private" • ';' declaration-seq-opt

    ';'  shift, and go to state 1411


State 1289

  566 named-namespace-definition: inline-opt "namespace" attribute-specifier-seq-opt IDENTIFIER '{' namespace-body • '}'

    '}'  shift, and go to state 1412


State 1290

  950 unnamed-namespace-definition: inline-opt "namespace" attribute-specifier-seq-opt '{' namespace-body '}' •

    $default  reduce using rule 950 (unnamed-namespace-definition)


State 1291

  143 concept-definition: "concept" concept-name '=' constraint-expression ';' •

    $default  reduce using rule 143 (concept-definition)


State 1292

  251 elaborated-type-specifier: class-key attribute-specifier-seq-opt nested-name-specifier-opt IDENTIFIER •

    $default  reduce using rule 251 (elaborated-type-specifier)


State 1293

  875 template-argument-list: template-argument-list ',' template-argument eclipse-opt •

    $default  reduce using rule 875 (template-argument-list)


State 1294

  616 noptr-abstract-declarator: noptr-abstract-declarator-opt parameters-and-qualifiers •

    $default  reduce using rule 616 (noptr-abstract-declarator)


State 1295

  618 noptr-abstract-declarator: '(' ptr-abstract-declarator ')' •

    $default  reduce using rule 618 (noptr-abstract-declarator)


State 1296

  617 noptr-abstract-declarator: noptr-abstract-declarator-opt '[' constant-expression-opt • ']' attribute-specifier-seq-opt

    ']'  shift, and go to state 1413


State 1297

    2 abstract-declarator: noptr-abstract-declarator-opt parameters-and-qualifiers trailing-return-type •

    $default  reduce using rule 2 (abstract-declarator)


State 1298

  622 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator '[' constant-expression-opt • ']' attribute-specifier-seq-opt

    ']'  shift, and go to state 1414


State 1299

  737 ptr-abstract-declarator: ptr-operator • ptr-abstract-declarator-opt
  741 ptr-declarator: ptr-operator • ptr-declarator

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 1150
    '&'         shift, and go to state 167
    "..."       shift, and go to state 169
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    '('         [reduce using rule 619 (noptr-abstract-declarator-opt)]
    ')'         reduce using rule 738 (ptr-abstract-declarator-opt)
    "::"        [reduce using rule 248 (eclipse-opt)]
    '['         reduce using rule 619 (noptr-abstract-declarator-opt)
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 248 (eclipse-opt)

    class-name                     go to state 54
    declarator-id                  go to state 178
    decltype-specifier             go to state 126
    eclipse-opt                    go to state 179
    enum-name                      go to state 70
    namespace-alias                go to state 86
    namespace-name                 go to state 89
    nested-name-specifier          go to state 195
    noptr-abstract-declarator      go to state 832
    noptr-abstract-declarator-opt  go to state 1135
    noptr-declarator               go to state 384
    ptr-abstract-declarator        go to state 1143
    ptr-abstract-declarator-opt    go to state 1144
    ptr-declarator                 go to state 405
    ptr-operator                   go to state 1299
    simple-template-id             go to state 97
    template-name                  go to state 103
    type-name                      go to state 107
    typedef-name                   go to state 109


State 1300

  695 parameter-declaration: attribute-specifier-seq-opt this-opt decl-specifier-seq abstract-declarator-opt '=' • initializer-clause

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 1415
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1301

  693 parameter-declaration: attribute-specifier-seq-opt this-opt decl-specifier-seq declarator '=' • initializer-clause

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 1416
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1302

  913 type-parameter: template-head type-parameter-key identifier-opt '=' id-expression •

    $default  reduce using rule 913 (type-parameter)


State 1303

  335 fold-expression: '(' "..." fold-operator cast-expression ')' •

    $default  reduce using rule 335 (fold-expression)


State 1304

  334 fold-expression: '(' cast-expression fold-operator "..." ')' •

    $default  reduce using rule 334 (fold-expression)


State 1305

  336 fold-expression: '(' cast-expression fold-operator "..." fold-operator • cast-expression ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 1417
    character-literal                    go to state 292
    class-name                           go to state 54
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 1306

  441 init-capture: '&' eclipse-opt IDENTIFIER initializer •

    $default  reduce using rule 441 (init-capture)


State 1307

  647 operator-function-id: "operator" overloadable-operator '<' template-argument-list-opt '>' •

    $default  reduce using rule 647 (operator-function-id)


State 1308

  141 compound-requirement: '{' expression • '}' noexcept-opt return-type-requirement-opt ';'
  317 expression: expression • ',' assignment-expression

    ','  shift, and go to state 620
    '}'  shift, and go to state 1418


State 1309

  120 cast-expression: '(' • type-id ')' cast-expression
  334 fold-expression: '(' • cast-expression fold-operator "..." ')'
  335                | '(' • "..." fold-operator cast-expression ')'
  336                | '(' • cast-expression fold-operator "..." fold-operator cast-expression ')'
  728 primary-expression: '(' • expression ')'
  774 requirement-parameter-list: '(' • parameter-declaration-clause ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "..."               shift, and go to state 492
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 116
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ')'         reduce using rule 700 (parameter-declaration-list-opt)
    '\''        reduce using rule 262 (encoding-prefix-opt)
    "..."       [reduce using rule 700 (parameter-declaration-list-opt)]
    "::"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    '['         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "enum"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    '"'         reduce using rule 262 (encoding-prefix-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"      [reduce using rule 902 (type-constraint-opt)]
    "this"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"   [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"   [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    'R'         reduce using rule 262 (encoding-prefix-opt)
    "typename"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    attribute-specifier-seq              go to state 185
    attribute-specifier-seq-opt          go to state 233
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 493
    character-literal                    go to state 292
    class-key                            go to state 463
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 494
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    parameter-declaration                go to state 762
    parameter-declaration-clause         go to state 905
    parameter-declaration-list           go to state 764
    parameter-declaration-list-opt       go to state 765
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-id                              go to state 495
    type-name                            go to state 107
    type-specifier                       go to state 471
    type-specifier-seq                   go to state 472
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1310

  584 nested-requirement: "requires" constraint-expression • ';'

    ';'  shift, and go to state 1419


State 1311

  579 nested-name-specifier: nested-name-specifier • IDENTIFIER "::"
  580                      | nested-name-specifier • template-opt simple-template-id "::"
  582 nested-name-specifier-opt: nested-name-specifier •
  927 typename-specifier: "typename" nested-name-specifier • IDENTIFIER
  928                   | "typename" nested-name-specifier • template-opt simple-template-id

    IDENTIFIER  shift, and go to state 378
    "template"  shift, and go to state 352

    IDENTIFIER  [reduce using rule 582 (nested-name-specifier-opt)]
    IDENTIFIER  [reduce using rule 885 (template-opt)]

    template-opt  go to state 379


State 1312

  916 type-requirement: "typename" nested-name-specifier-opt • type-name ';'

    IDENTIFIER  shift, and go to state 565

    class-name          go to state 54
    enum-name           go to state 70
    simple-template-id  go to state 97
    template-name       go to state 103
    type-name           go to state 1420
    typedef-name        go to state 109


State 1313

  826 simple-requirement: expression ';' •

    $default  reduce using rule 826 (simple-requirement)


State 1314

  773 requirement-body: '{' requirement-seq '}' •

    $default  reduce using rule 773 (requirement-body)


State 1315

  778 requirement-seq: requirement-seq requirement •

    $default  reduce using rule 778 (requirement-seq)


State 1316

  720 postfix-expression: "dynamic_cast" '<' type-id '>' '(' • expression ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1421
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1317

  721 postfix-expression: "static_cast" '<' type-id '>' '(' • expression ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1422
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1318

  722 postfix-expression: "reinterpret_cast" '<' type-id '>' '(' • expression ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1423
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1319

  723 postfix-expression: "const_cast" '<' type-id '>' '(' • expression ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1424
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1320

  937 unary-expression: "sizeof" "..." '(' IDENTIFIER ')' •

    $default  reduce using rule 937 (unary-expression)


State 1321

   85 binary-exponent-part: 'p' sign-opt digit-sequence •
  245 digit-sequence: digit-sequence • apostrophe-opt digit

    '\''  shift, and go to state 588

    '0'       reduce using rule 21 (apostrophe-opt)
    '1'       reduce using rule 21 (apostrophe-opt)
    '2'       reduce using rule 21 (apostrophe-opt)
    '3'       reduce using rule 21 (apostrophe-opt)
    '4'       reduce using rule 21 (apostrophe-opt)
    '5'       reduce using rule 21 (apostrophe-opt)
    '6'       reduce using rule 21 (apostrophe-opt)
    '7'       reduce using rule 21 (apostrophe-opt)
    '8'       reduce using rule 21 (apostrophe-opt)
    '9'       reduce using rule 21 (apostrophe-opt)
    $default  reduce using rule 85 (binary-exponent-part)

    apostrophe-opt  go to state 612


State 1322

   86 binary-exponent-part: 'P' sign-opt digit-sequence •
  245 digit-sequence: digit-sequence • apostrophe-opt digit

    '\''  shift, and go to state 588

    '0'       reduce using rule 21 (apostrophe-opt)
    '1'       reduce using rule 21 (apostrophe-opt)
    '2'       reduce using rule 21 (apostrophe-opt)
    '3'       reduce using rule 21 (apostrophe-opt)
    '4'       reduce using rule 21 (apostrophe-opt)
    '5'       reduce using rule 21 (apostrophe-opt)
    '6'       reduce using rule 21 (apostrophe-opt)
    '7'       reduce using rule 21 (apostrophe-opt)
    '8'       reduce using rule 21 (apostrophe-opt)
    '9'       reduce using rule 21 (apostrophe-opt)
    $default  reduce using rule 86 (binary-exponent-part)

    apostrophe-opt  go to state 612


State 1323

  493 lambda-declarator: '(' parameter-declaration-clause ')' lambda-specifiers • requires-clause-opt

    "requires"  shift, and go to state 436

    $default  reduce using rule 780 (requires-clause-opt)

    requires-clause      go to state 846
    requires-clause-opt  go to state 1425


State 1324

  495 lambda-expression: lambda-introducer '<' template-parameter-list '>' requires-clause-opt • lambda-declarator compound-statement

    IDENTIFIER      shift, and go to state 1
    '('             shift, and go to state 652
    "::"            shift, and go to state 4
    "virtual"       shift, and go to state 5
    "class"         shift, and go to state 6
    "struct"        shift, and go to state 7
    "union"         shift, and go to state 8
    "constexpr"     shift, and go to state 10
    "const"         shift, and go to state 11
    "volatile"      shift, and go to state 12
    "friend"        shift, and go to state 13
    "typedef"       shift, and go to state 14
    "consteval"     shift, and go to state 15
    "constinit"     shift, and go to state 16
    "inline"        shift, and go to state 159
    "decltype"      shift, and go to state 18
    "enum"          shift, and go to state 19
    "explicit"      shift, and go to state 20
    "extern"        shift, and go to state 160
    "char"          shift, and go to state 27
    "char8_t"       shift, and go to state 28
    "char16_t"      shift, and go to state 29
    "char32_t"      shift, and go to state 30
    "wchar_t"       shift, and go to state 31
    "bool"          shift, and go to state 32
    "short"         shift, and go to state 33
    "int"           shift, and go to state 34
    "long"          shift, and go to state 35
    "signed"        shift, and go to state 36
    "unsigned"      shift, and go to state 37
    "float"         shift, and go to state 38
    "double"        shift, and go to state 39
    "void"          shift, and go to state 40
    "static"        shift, and go to state 42
    "thread_local"  shift, and go to state 43
    "mutable"       shift, and go to state 44
    "typename"      shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 197 (decl-specifier-seq-opt)

    class-head                  go to state 52
    class-key                   go to state 53
    class-name                  go to state 54
    class-specifier             go to state 55
    cv-qualifier                go to state 56
    decl-specifier              go to state 57
    decl-specifier-seq          go to state 654
    decl-specifier-seq-opt      go to state 655
    decltype-specifier          go to state 62
    defining-type-specifier     go to state 64
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-head                   go to state 68
    enum-key                    go to state 162
    enum-name                   go to state 70
    enum-specifier              go to state 71
    explicit-specifier          go to state 163
    function-specifier          go to state 79
    lambda-declarator           go to state 1426
    lambda-specifiers           go to state 657
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    storage-class-specifier     go to state 100
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 108
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 1325

  603 noexcept-specifier: "noexcept" '(' constant-expression • ')'

    ')'  shift, and go to state 1427


State 1326

  896 trailing-return-type-opt: trailing-return-type •

    $default  reduce using rule 896 (trailing-return-type-opt)


State 1327

  497 lambda-specifiers: decl-specifier-seq-opt noexcept-specifier-opt attribute-specifier-seq-opt trailing-return-type-opt •

    $default  reduce using rule 497 (lambda-specifiers)


State 1328

  568 namespace-alias-definition: "namespace" IDENTIFIER • '=' qualified-namespace-specifier ';'

    '='  shift, and go to state 375


State 1329

  128 class-name: IDENTIFIER •
  274 enum-name: IDENTIFIER •
  484 labeled-statement: attribute-specifier-seq-opt IDENTIFIER • ':' statement
  567 namespace-alias: IDENTIFIER •
  573 namespace-name: IDENTIFIER •
  884 template-name: IDENTIFIER •
  923 typedef-name: IDENTIFIER •
  951 unqualified-id: IDENTIFIER •

    ':'  shift, and go to state 1428

    "::"      reduce using rule 128 (class-name)
    "::"      [reduce using rule 274 (enum-name)]
    "::"      [reduce using rule 567 (namespace-alias)]
    "::"      [reduce using rule 573 (namespace-name)]
    "::"      [reduce using rule 923 (typedef-name)]
    '<'       reduce using rule 884 (template-name)
    '<'       [reduce using rule 951 (unqualified-id)]
    $default  reduce using rule 951 (unqualified-id)


State 1330

   54 attribute-specifier: '[' • '[' attribute-using-prefix-opt attribute-list ']' ']'
  496 lambda-introducer: '[' • lambda-capture-opt ']'

    IDENTIFIER  shift, and go to state 496
    '='         shift, and go to state 497
    '&'         shift, and go to state 498
    "..."       shift, and go to state 169
    '['         shift, and go to state 388
    '*'         shift, and go to state 499
    "this"      shift, and go to state 500

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 490 (lambda-capture-opt)

    capture             go to state 501
    capture-default     go to state 502
    capture-list        go to state 503
    eclipse-opt         go to state 504
    init-capture        go to state 505
    lambda-capture      go to state 506
    lambda-capture-opt  go to state 507
    simple-capture      go to state 508


State 1331

  168 coroutine-return-statement: "co_return" • expr-or-braced-init-list-opt ';'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ';'         reduce using rule 314 (expr-or-braced-init-list-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 1429
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expr-or-braced-init-list             go to state 1430
    expr-or-braced-init-list-opt         go to state 1431
    expression                           go to state 1432
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1332

  486 labeled-statement: attribute-specifier-seq-opt "default" • ':' statement

    ':'  shift, and go to state 1433


State 1333

  899 try-block: "try" • compound-statement handler-seq

    '{'  shift, and go to state 983

    compound-statement  go to state 1434


State 1334

  475 iteration-statement: "while" • '(' condition ')' statement

    '('  shift, and go to state 1435


State 1335

  476 iteration-statement: "do" • statement "while" '(' expression ')' ';'

    IDENTIFIER       shift, and go to state 1
    "using"          shift, and go to state 2
    "::"             shift, and go to state 4
    "virtual"        shift, and go to state 5
    "class"          shift, and go to state 6
    "struct"         shift, and go to state 7
    "union"          shift, and go to state 8
    "constexpr"      shift, and go to state 10
    "const"          shift, and go to state 11
    "volatile"       shift, and go to state 12
    "friend"         shift, and go to state 13
    "typedef"        shift, and go to state 14
    "consteval"      shift, and go to state 15
    "constinit"      shift, and go to state 16
    "inline"         shift, and go to state 159
    "decltype"       shift, and go to state 18
    "enum"           shift, and go to state 19
    "explicit"       shift, and go to state 20
    "extern"         shift, and go to state 160
    "namespace"      shift, and go to state 1209
    "char"           shift, and go to state 27
    "char8_t"        shift, and go to state 28
    "char16_t"       shift, and go to state 29
    "char32_t"       shift, and go to state 30
    "wchar_t"        shift, and go to state 31
    "bool"           shift, and go to state 32
    "short"          shift, and go to state 33
    "int"            shift, and go to state 34
    "long"           shift, and go to state 35
    "signed"         shift, and go to state 36
    "unsigned"       shift, and go to state 37
    "float"          shift, and go to state 38
    "double"         shift, and go to state 39
    "void"           shift, and go to state 40
    "static_assert"  shift, and go to state 41
    "static"         shift, and go to state 42
    "thread_local"   shift, and go to state 43
    "mutable"        shift, and go to state 44
    "typename"       shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration            go to state 46
    asm-declaration              go to state 47
    attribute-specifier-seq      go to state 1210
    attribute-specifier-seq-opt  go to state 1211
    block-declaration            go to state 1212
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 58
    declaration-statement        go to state 1213
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 69
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    labeled-statement            go to state 1214
    namespace-alias              go to state 86
    namespace-alias-definition   go to state 87
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    opaque-enum-declaration      go to state 94
    placeholder-type-specifier   go to state 95
    simple-declaration           go to state 96
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    statement                    go to state 1436
    static_assert-declaration    go to state 99
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    using-declaration            go to state 112
    using-directive              go to state 113
    using-enum-declaration       go to state 114


State 1336

  477 iteration-statement: "for" • '(' init-statement condition-opt ';' expression-opt ')' statement
  478                    | "for" • '(' init-statement-opt for-range-declaration ':' for-range-initializer ')' statement

    '('  shift, and go to state 1437


State 1337

  479 jump-statement: "break" • ';'

    ';'  shift, and go to state 1438


State 1338

  480 jump-statement: "continue" • ';'

    ';'  shift, and go to state 1439


State 1339

  481 jump-statement: "return" • expr-or-braced-init-list-opt ';'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ';'         reduce using rule 314 (expr-or-braced-init-list-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 1429
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expr-or-braced-init-list             go to state 1430
    expr-or-braced-init-list-opt         go to state 1440
    expression                           go to state 1432
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1340

  483 jump-statement: "goto" • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 1441


State 1341

  485 labeled-statement: attribute-specifier-seq-opt "case" • constant-expression ':' statement

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 1442
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 1342

  795 selection-statement: "if" • constexpr-opt '(' init-statement-opt condition ')' statement
  796                    | "if" • constexpr-opt '(' init-statement-opt condition ')' statement "else" statement
  797                    | "if" • exclamation-opt "consteval" compound-statement
  798                    | "if" • exclamation-opt "consteval" compound-statement "else" statement

    "constexpr"  shift, and go to state 1443
    '!'          shift, and go to state 1444

    "consteval"  reduce using rule 293 (exclamation-opt)
    $default     reduce using rule 156 (constexpr-opt)

    constexpr-opt    go to state 1445
    exclamation-opt  go to state 1446


State 1343

  799 selection-statement: "switch" • '(' init-statement-opt condition ')' statement

    '('  shift, and go to state 1447


State 1344

  853 statement: attribute-specifier-seq-opt compound-statement •

    $default  reduce using rule 853 (statement)


State 1345

  482 jump-statement: coroutine-return-statement •

    $default  reduce using rule 482 (jump-statement)


State 1346

  813 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq • ref-qualifier-opt '[' identifier-list ']' initializer ';'

    '&'   shift, and go to state 391
    "&&"  shift, and go to state 392

    $default  reduce using rule 762 (ref-qualifier-opt)

    ref-qualifier      go to state 393
    ref-qualifier-opt  go to state 394


State 1347

  317 expression: expression • ',' assignment-expression
  322 expression-opt: expression •

    ','  shift, and go to state 620

    $default  reduce using rule 322 (expression-opt)


State 1348

  323 expression-statement: expression-opt • ';'

    ';'  shift, and go to state 1448


State 1349

  852 statement: attribute-specifier-seq-opt expression-statement •

    $default  reduce using rule 852 (statement)


State 1350

  855 statement: attribute-specifier-seq-opt iteration-statement •

    $default  reduce using rule 855 (statement)


State 1351

  856 statement: attribute-specifier-seq-opt jump-statement •

    $default  reduce using rule 856 (statement)


State 1352

  854 statement: attribute-specifier-seq-opt selection-statement •

    $default  reduce using rule 854 (statement)


State 1353

  858 statement: attribute-specifier-seq-opt try-block •

    $default  reduce using rule 858 (statement)


State 1354

  860 statement-seq: statement-seq statement •

    $default  reduce using rule 860 (statement-seq)


State 1355

  142 compound-statement: '{' statement-seq-opt '}' •

    $default  reduce using rule 142 (compound-statement)


State 1356

  152 conditional-expression: logical-or-expression '?' expression ':' assignment-expression •

    $default  reduce using rule 152 (conditional-expression)


State 1357

  229 delete-expression: scope-opt "delete" '[' ']' cast-expression •

    $default  reduce using rule 229 (delete-expression)


State 1358

  595 new-placement: '(' expression-list ')' •

    $default  reduce using rule 595 (new-placement)


State 1359

  590 new-expression: scope-opt "new" new-placement-opt '(' type-id • ')' new-initializer-opt

    ')'  shift, and go to state 1449


State 1360

  591 new-initializer: '(' • expression-list-opt ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ')'         reduce using rule 319 (expression-list-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression-list                      go to state 1008
    expression-list-opt                  go to state 1450
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 789
    initializer-list                     go to state 790
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1361

  592 new-initializer: braced-init-list •

    $default  reduce using rule 592 (new-initializer)


State 1362

  594 new-initializer-opt: new-initializer •

    $default  reduce using rule 594 (new-initializer-opt)


State 1363

  589 new-expression: scope-opt "new" new-placement-opt new-type-id new-initializer-opt •

    $default  reduce using rule 589 (new-expression)


State 1364

  628 noptr-new-declarator: '[' • expression-opt ']' attribute-specifier-seq-opt

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ']'         reduce using rule 321 (expression-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1347
    expression-opt                       go to state 1451
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1365

  588 new-declarator-opt: new-declarator •

    $default  reduce using rule 588 (new-declarator-opt)


State 1366

  598 new-type-id: type-specifier-seq new-declarator-opt •

    $default  reduce using rule 598 (new-type-id)


State 1367

  586 new-declarator: noptr-new-declarator •
  629 noptr-new-declarator: noptr-new-declarator • '[' constant-expression ']' attribute-specifier-seq-opt

    '['  shift, and go to state 1452

    $default  reduce using rule 586 (new-declarator)


State 1368

  585 new-declarator: ptr-operator • new-declarator-opt

    IDENTIFIER  shift, and go to state 1
    '&'         shift, and go to state 167
    "::"        shift, and go to state 4
    '['         shift, and go to state 1364
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    '&'       [reduce using rule 587 (new-declarator-opt)]
    "&&"      [reduce using rule 587 (new-declarator-opt)]
    '*'       [reduce using rule 587 (new-declarator-opt)]
    $default  reduce using rule 587 (new-declarator-opt)

    class-name             go to state 54
    decltype-specifier     go to state 126
    enum-name              go to state 70
    namespace-alias        go to state 86
    namespace-name         go to state 89
    nested-name-specifier  go to state 195
    new-declarator         go to state 1365
    new-declarator-opt     go to state 1453
    noptr-new-declarator   go to state 1367
    ptr-operator           go to state 1368
    simple-template-id     go to state 97
    template-name          go to state 103
    type-name              go to state 107
    typedef-name           go to state 109


State 1369

  642 octal-escape-sequence: '\\' octal-digit octal-digit octal-digit •

    $default  reduce using rule 642 (octal-escape-sequence)


State 1370

  396 hex-quad: hexadecimal-digit hexadecimal-digit hexadecimal-digit • hexadecimal-digit

    '0'  shift, and go to state 625
    '1'  shift, and go to state 626
    '2'  shift, and go to state 627
    '3'  shift, and go to state 628
    '4'  shift, and go to state 629
    '5'  shift, and go to state 630
    '6'  shift, and go to state 631
    '7'  shift, and go to state 632
    '8'  shift, and go to state 633
    '9'  shift, and go to state 634
    'e'  shift, and go to state 635
    'E'  shift, and go to state 636
    'f'  shift, and go to state 637
    'F'  shift, and go to state 638
    'a'  shift, and go to state 639
    'b'  shift, and go to state 640
    'c'  shift, and go to state 641
    'd'  shift, and go to state 642
    'A'  shift, and go to state 643
    'B'  shift, and go to state 644
    'C'  shift, and go to state 645
    'D'  shift, and go to state 646

    hexadecimal-digit  go to state 1454


State 1371

  754 r-char: EXCEPT_RIGHT_PARENTHESIS_FOLLOWED_BY_THE_INITIAL_D_CHAR_SEQUENCE_FOLLOWED_BY_QUOTATION_MARK •

    $default  reduce using rule 754 (r-char)


State 1372

  755 r-char-sequence: r-char •

    $default  reduce using rule 755 (r-char-sequence)


State 1373

  756 r-char-sequence: r-char-sequence • r-char
  758 r-char-sequence-opt: r-char-sequence •

    EXCEPT_RIGHT_PARENTHESIS_FOLLOWED_BY_THE_INITIAL_D_CHAR_SEQUENCE_FOLLOWED_BY_QUOTATION_MARK  shift, and go to state 1371

    $default  reduce using rule 758 (r-char-sequence-opt)

    r-char  go to state 1455


State 1374

  759 raw-string: '"' d-char-sequence-opt '(' r-char-sequence-opt • ')' d-char-sequence-opt '"'

    ')'  shift, and go to state 1456


State 1375

  583 nested-namespace-definition: "namespace" enclosing-namespace-specifier "::" inline-opt IDENTIFIER '{' namespace-body • '}'

    '}'  shift, and go to state 1457


State 1376

  864 static_assert-declaration: "static_assert" '(' constant-expression ',' string-literal ')' ';' •

    $default  reduce using rule 864 (static_assert-declaration)


State 1377

   49 attribute-list: attribute-list ',' attribute • "..."
   52 attribute-opt: attribute •

    "..."  shift, and go to state 1458

    $default  reduce using rule 52 (attribute-opt)


State 1378

   47 attribute-list: attribute-list ',' attribute-opt •

    $default  reduce using rule 47 (attribute-list)


State 1379

   54 attribute-specifier: '[' '[' attribute-using-prefix-opt attribute-list ']' ']' •

    $default  reduce using rule 54 (attribute-specifier)


State 1380

   53 attribute-scoped-token: attribute-namespace "::" IDENTIFIER •

    $default  reduce using rule 53 (attribute-scoped-token)


State 1381

   68 balanced-token: ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE •

    $default  reduce using rule 68 (balanced-token)


State 1382

   65 balanced-token: '(' • balanced-token-seq-opt ')'

    ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE  shift, and go to state 1381
    '('                                             shift, and go to state 1382
    '['                                             shift, and go to state 1383
    '{'                                             shift, and go to state 1384

    $default  reduce using rule 71 (balanced-token-seq-opt)

    balanced-token          go to state 1385
    balanced-token-seq      go to state 1386
    balanced-token-seq-opt  go to state 1459


State 1383

   66 balanced-token: '[' • balanced-token-seq-opt ']'

    ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE  shift, and go to state 1381
    '('                                             shift, and go to state 1382
    '['                                             shift, and go to state 1383
    '{'                                             shift, and go to state 1384

    $default  reduce using rule 71 (balanced-token-seq-opt)

    balanced-token          go to state 1385
    balanced-token-seq      go to state 1386
    balanced-token-seq-opt  go to state 1460


State 1384

   67 balanced-token: '{' • balanced-token-seq-opt '}'

    ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE  shift, and go to state 1381
    '('                                             shift, and go to state 1382
    '['                                             shift, and go to state 1383
    '{'                                             shift, and go to state 1384

    $default  reduce using rule 71 (balanced-token-seq-opt)

    balanced-token          go to state 1385
    balanced-token-seq      go to state 1386
    balanced-token-seq-opt  go to state 1461


State 1385

   69 balanced-token-seq: balanced-token •

    $default  reduce using rule 69 (balanced-token-seq)


State 1386

   70 balanced-token-seq: balanced-token-seq • balanced-token
   72 balanced-token-seq-opt: balanced-token-seq •

    ANY_TOKEN_OTHER_THAN_PARENTHESIS_BRACKET_BRACE  shift, and go to state 1381
    '('                                             shift, and go to state 1382
    '['                                             shift, and go to state 1383
    '{'                                             shift, and go to state 1384

    $default  reduce using rule 72 (balanced-token-seq-opt)

    balanced-token  go to state 1462


State 1387

   42 attribute-argument-clause: '(' balanced-token-seq-opt • ')'

    ')'  shift, and go to state 1463


State 1388

  435 identifier-list: identifier-list ',' IDENTIFIER •

    $default  reduce using rule 435 (identifier-list)


State 1389

  813 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt '[' identifier-list ']' initializer • ';'

    ';'  shift, and go to state 1464


State 1390

  377 function-body: '=' "delete" ';' •

    $default  reduce using rule 377 (function-body)


State 1391

  376 function-body: '=' "default" ';' •

    $default  reduce using rule 376 (function-body)


State 1392

  525 mem-initializer-list: mem-initializer eclipse-opt •

    $default  reduce using rule 525 (mem-initializer-list)


State 1393

  521 mem-initializer: mem-initializer-id '(' • expression-list-opt ')'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ')'         reduce using rule 319 (expression-list-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 785
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 786
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression-list                      go to state 1008
    expression-list-opt                  go to state 1465
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    initializer-clause                   go to state 789
    initializer-list                     go to state 790
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1394

  522 mem-initializer: mem-initializer-id braced-init-list •

    $default  reduce using rule 522 (mem-initializer)


State 1395

  526 mem-initializer-list: mem-initializer-list ',' • mem-initializer eclipse-opt

    IDENTIFIER  shift, and go to state 1255
    "::"        shift, and go to state 4
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]

    class-name                 go to state 54
    class-or-decltype          go to state 1256
    decltype-specifier         go to state 1101
    enum-name                  go to state 70
    mem-initializer            go to state 1466
    mem-initializer-id         go to state 1258
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 1102
    nested-name-specifier-opt  go to state 1103
    simple-template-id         go to state 97
    template-name              go to state 103
    type-name                  go to state 107
    typedef-name               go to state 109


State 1396

  382 function-try-block: "try" ctor-initializer-opt compound-statement • handler-seq

    "catch"  shift, and go to state 1467

    handler      go to state 1468
    handler-seq  go to state 1469


State 1397

  702 parameters-and-qualifiers: '(' parameter-declaration-clause ')' cv-qualifier-seq-opt ref-qualifier-opt • noexcept-specifier-opt attribute-specifier-seq-opt

    "noexcept"  shift, and go to state 980

    $default  reduce using rule 605 (noexcept-specifier-opt)

    noexcept-specifier      go to state 981
    noexcept-specifier-opt  go to state 1470


State 1398

  376 function-body: '=' • "default" ';'
  377              | '=' • "delete" ';'
  746 pure-specifier: '=' • '0'

    '0'        shift, and go to state 1471
    "delete"   shift, and go to state 1253
    "default"  shift, and go to state 1254


State 1399

  748 pure-specifier-opt: pure-specifier •

    $default  reduce using rule 748 (pure-specifier-opt)


State 1400

  538 member-declarator: declarator virt-specifier-seq-opt pure-specifier-opt •

    $default  reduce using rule 538 (member-declarator)


State 1401

  541 member-declarator: identifier-opt attribute-specifier-seq-opt ':' • constant-expression brace-or-equal-initializer-opt

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 1472
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 1402

  538 member-declarator: declarator • virt-specifier-seq-opt pure-specifier-opt
  539                  | declarator • requires-clause
  540                  | declarator • brace-or-equal-initializer-opt

    '='         shift, and go to state 433
    '{'         shift, and go to state 435
    "final"     shift, and go to state 755
    "requires"  shift, and go to state 436
    "override"  shift, and go to state 756

    '='       [reduce using rule 986 (virt-specifier-seq-opt)]
    ';'       reduce using rule 103 (brace-or-equal-initializer-opt)
    ';'       [reduce using rule 986 (virt-specifier-seq-opt)]
    ','       reduce using rule 103 (brace-or-equal-initializer-opt)
    ','       [reduce using rule 986 (virt-specifier-seq-opt)]
    $default  reduce using rule 103 (brace-or-equal-initializer-opt)

    brace-or-equal-initializer      go to state 1266
    brace-or-equal-initializer-opt  go to state 1267
    braced-init-list                go to state 438
    requires-clause                 go to state 1473
    virt-specifier                  go to state 758
    virt-specifier-seq              go to state 759
    virt-specifier-seq-opt          go to state 1474


State 1403

  543 member-declarator-list: member-declarator-list ',' member-declarator •

    $default  reduce using rule 543 (member-declarator-list)


State 1404

   77 base-specifier: attribute-specifier-seq-opt "virtual" access-specifier-opt class-or-decltype •

    $default  reduce using rule 77 (base-specifier)


State 1405

   78 base-specifier: attribute-specifier-seq-opt access-specifier virtual-opt class-or-decltype •

    $default  reduce using rule 78 (base-specifier)


State 1406

  131 class-or-decltype: nested-name-specifier "template" simple-template-id •

    $default  reduce using rule 131 (class-or-decltype)


State 1407

   80 base-specifier-list: base-specifier-list ',' base-specifier eclipse-opt •

    $default  reduce using rule 80 (base-specifier-list)


State 1408

  458 initializer-list: initializer-list ',' initializer-clause eclipse-opt •

    $default  reduce using rule 458 (initializer-list)


State 1409

  221 deduction-guide: explicit-specifier-opt template-name '(' parameter-declaration-clause ')' "->" simple-template-id • ';'

    ';'  shift, and go to state 1475


State 1410

  550 module-declaration: export-keyword-opt "module-keyword" module-name module-partition-opt attribute-specifier-seq-opt ';' •

    $default  reduce using rule 550 (module-declaration)


State 1411

  733 private-module-fragment: "module-keyword" ':' "private" ';' • declaration-seq-opt

    IDENTIFIER        shift, and go to state 1
    "using"           shift, and go to state 2
    ';'               shift, and go to state 3
    "::"              shift, and go to state 4
    "virtual"         shift, and go to state 5
    "class"           shift, and go to state 6
    "struct"          shift, and go to state 7
    "union"           shift, and go to state 8
    "template"        shift, and go to state 9
    "constexpr"       shift, and go to state 10
    "const"           shift, and go to state 11
    "volatile"        shift, and go to state 12
    "friend"          shift, and go to state 13
    "typedef"         shift, and go to state 14
    "consteval"       shift, and go to state 15
    "constinit"       shift, and go to state 16
    "inline"          shift, and go to state 17
    "decltype"        shift, and go to state 18
    "enum"            shift, and go to state 19
    "explicit"        shift, and go to state 20
    "export"          shift, and go to state 21
    "export-keyword"  shift, and go to state 22
    "extern"          shift, and go to state 23
    "import-keyword"  shift, and go to state 25
    "namespace"       shift, and go to state 26
    "char"            shift, and go to state 27
    "char8_t"         shift, and go to state 28
    "char16_t"        shift, and go to state 29
    "char32_t"        shift, and go to state 30
    "wchar_t"         shift, and go to state 31
    "bool"            shift, and go to state 32
    "short"           shift, and go to state 33
    "int"             shift, and go to state 34
    "long"            shift, and go to state 35
    "signed"          shift, and go to state 36
    "unsigned"        shift, and go to state 37
    "float"           shift, and go to state 38
    "double"          shift, and go to state 39
    "void"            shift, and go to state 40
    "static_assert"   shift, and go to state 41
    "static"          shift, and go to state 42
    "thread_local"    shift, and go to state 43
    "mutable"         shift, and go to state 44
    "typename"        shift, and go to state 45

    $end            reduce using rule 214 (declaration-seq-opt)
    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 301 (explicit-specifier-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "template"      [reduce using rule 324 (extern-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "namespace"     [reduce using rule 461 (inline-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration                go to state 46
    asm-declaration                  go to state 47
    attribute-declaration            go to state 48
    attribute-specifier-seq          go to state 49
    attribute-specifier-seq-opt      go to state 50
    block-declaration                go to state 51
    class-head                       go to state 52
    class-key                        go to state 53
    class-name                       go to state 54
    class-specifier                  go to state 55
    cv-qualifier                     go to state 56
    decl-specifier                   go to state 57
    decl-specifier-seq               go to state 58
    declaration                      go to state 59
    declaration-seq                  go to state 60
    declaration-seq-opt              go to state 1476
    decltype-specifier               go to state 62
    deduction-guide                  go to state 63
    defining-type-specifier          go to state 64
    elaborated-enum-specifier        go to state 65
    elaborated-type-specifier        go to state 66
    empty-declaration                go to state 67
    enum-head                        go to state 68
    enum-key                         go to state 69
    enum-name                        go to state 70
    enum-specifier                   go to state 71
    explicit-instantiation           go to state 72
    explicit-specialization          go to state 73
    explicit-specifier               go to state 74
    explicit-specifier-opt           go to state 75
    export-declaration               go to state 76
    extern-opt                       go to state 77
    function-definition              go to state 78
    function-specifier               go to state 79
    inline-opt                       go to state 82
    linkage-specification            go to state 83
    module-import-declaration        go to state 84
    named-namespace-definition       go to state 85
    namespace-alias                  go to state 86
    namespace-alias-definition       go to state 87
    namespace-definition             go to state 88
    namespace-name                   go to state 89
    nested-name-specifier            go to state 90
    nested-name-specifier-opt        go to state 91
    nested-namespace-definition      go to state 92
    nodeclspec-function-declaration  go to state 93
    opaque-enum-declaration          go to state 94
    placeholder-type-specifier       go to state 95
    simple-declaration               go to state 96
    simple-template-id               go to state 97
    simple-type-specifier            go to state 98
    static_assert-declaration        go to state 99
    storage-class-specifier          go to state 100
    template-declaration             go to state 101
    template-head                    go to state 102
    template-name                    go to state 103
    type-constraint                  go to state 105
    type-constraint-opt              go to state 106
    type-name                        go to state 107
    type-specifier                   go to state 108
    typedef-name                     go to state 109
    typename-specifier               go to state 110
    unnamed-namespace-definition     go to state 111
    using-declaration                go to state 112
    using-directive                  go to state 113
    using-enum-declaration           go to state 114


State 1412

  566 named-namespace-definition: inline-opt "namespace" attribute-specifier-seq-opt IDENTIFIER '{' namespace-body '}' •

    $default  reduce using rule 566 (named-namespace-definition)


State 1413

  617 noptr-abstract-declarator: noptr-abstract-declarator-opt '[' constant-expression-opt ']' • attribute-specifier-seq-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 1477


State 1414

  622 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator '[' constant-expression-opt ']' • attribute-specifier-seq-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 1478


State 1415

  695 parameter-declaration: attribute-specifier-seq-opt this-opt decl-specifier-seq abstract-declarator-opt '=' initializer-clause •

    $default  reduce using rule 695 (parameter-declaration)


State 1416

  693 parameter-declaration: attribute-specifier-seq-opt this-opt decl-specifier-seq declarator '=' initializer-clause •

    $default  reduce using rule 693 (parameter-declaration)


State 1417

  336 fold-expression: '(' cast-expression fold-operator "..." fold-operator cast-expression • ')'

    ')'  shift, and go to state 1479


State 1418

  141 compound-requirement: '{' expression '}' • noexcept-opt return-type-requirement-opt ';'

    "noexcept"  shift, and go to state 1480

    $default  reduce using rule 601 (noexcept-opt)

    noexcept-opt  go to state 1481


State 1419

  584 nested-requirement: "requires" constraint-expression ';' •

    $default  reduce using rule 584 (nested-requirement)


State 1420

  916 type-requirement: "typename" nested-name-specifier-opt type-name • ';'

    ';'  shift, and go to state 1482


State 1421

  317 expression: expression • ',' assignment-expression
  720 postfix-expression: "dynamic_cast" '<' type-id '>' '(' expression • ')'

    ')'  shift, and go to state 1483
    ','  shift, and go to state 620


State 1422

  317 expression: expression • ',' assignment-expression
  721 postfix-expression: "static_cast" '<' type-id '>' '(' expression • ')'

    ')'  shift, and go to state 1484
    ','  shift, and go to state 620


State 1423

  317 expression: expression • ',' assignment-expression
  722 postfix-expression: "reinterpret_cast" '<' type-id '>' '(' expression • ')'

    ')'  shift, and go to state 1485
    ','  shift, and go to state 620


State 1424

  317 expression: expression • ',' assignment-expression
  723 postfix-expression: "const_cast" '<' type-id '>' '(' expression • ')'

    ')'  shift, and go to state 1486
    ','  shift, and go to state 620


State 1425

  493 lambda-declarator: '(' parameter-declaration-clause ')' lambda-specifiers requires-clause-opt •

    $default  reduce using rule 493 (lambda-declarator)


State 1426

  495 lambda-expression: lambda-introducer '<' template-parameter-list '>' requires-clause-opt lambda-declarator • compound-statement

    '{'  shift, and go to state 983

    compound-statement  go to state 1487


State 1427

  603 noexcept-specifier: "noexcept" '(' constant-expression ')' •

    $default  reduce using rule 603 (noexcept-specifier)


State 1428

  484 labeled-statement: attribute-specifier-seq-opt IDENTIFIER ':' • statement

    IDENTIFIER       shift, and go to state 1
    "using"          shift, and go to state 2
    "::"             shift, and go to state 4
    "virtual"        shift, and go to state 5
    "class"          shift, and go to state 6
    "struct"         shift, and go to state 7
    "union"          shift, and go to state 8
    "constexpr"      shift, and go to state 10
    "const"          shift, and go to state 11
    "volatile"       shift, and go to state 12
    "friend"         shift, and go to state 13
    "typedef"        shift, and go to state 14
    "consteval"      shift, and go to state 15
    "constinit"      shift, and go to state 16
    "inline"         shift, and go to state 159
    "decltype"       shift, and go to state 18
    "enum"           shift, and go to state 19
    "explicit"       shift, and go to state 20
    "extern"         shift, and go to state 160
    "namespace"      shift, and go to state 1209
    "char"           shift, and go to state 27
    "char8_t"        shift, and go to state 28
    "char16_t"       shift, and go to state 29
    "char32_t"       shift, and go to state 30
    "wchar_t"        shift, and go to state 31
    "bool"           shift, and go to state 32
    "short"          shift, and go to state 33
    "int"            shift, and go to state 34
    "long"           shift, and go to state 35
    "signed"         shift, and go to state 36
    "unsigned"       shift, and go to state 37
    "float"          shift, and go to state 38
    "double"         shift, and go to state 39
    "void"           shift, and go to state 40
    "static_assert"  shift, and go to state 41
    "static"         shift, and go to state 42
    "thread_local"   shift, and go to state 43
    "mutable"        shift, and go to state 44
    "typename"       shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration            go to state 46
    asm-declaration              go to state 47
    attribute-specifier-seq      go to state 1210
    attribute-specifier-seq-opt  go to state 1211
    block-declaration            go to state 1212
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 58
    declaration-statement        go to state 1213
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 69
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    labeled-statement            go to state 1214
    namespace-alias              go to state 86
    namespace-alias-definition   go to state 87
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    opaque-enum-declaration      go to state 94
    placeholder-type-specifier   go to state 95
    simple-declaration           go to state 96
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    statement                    go to state 1488
    static_assert-declaration    go to state 99
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    using-declaration            go to state 112
    using-directive              go to state 113
    using-enum-declaration       go to state 114


State 1429

  313 expr-or-braced-init-list: braced-init-list •

    $default  reduce using rule 313 (expr-or-braced-init-list)


State 1430

  315 expr-or-braced-init-list-opt: expr-or-braced-init-list •

    $default  reduce using rule 315 (expr-or-braced-init-list-opt)


State 1431

  168 coroutine-return-statement: "co_return" expr-or-braced-init-list-opt • ';'

    ';'  shift, and go to state 1489


State 1432

  312 expr-or-braced-init-list: expression •
  317 expression: expression • ',' assignment-expression

    ','  shift, and go to state 620

    $default  reduce using rule 312 (expr-or-braced-init-list)


State 1433

  486 labeled-statement: attribute-specifier-seq-opt "default" ':' • statement

    IDENTIFIER       shift, and go to state 1
    "using"          shift, and go to state 2
    "::"             shift, and go to state 4
    "virtual"        shift, and go to state 5
    "class"          shift, and go to state 6
    "struct"         shift, and go to state 7
    "union"          shift, and go to state 8
    "constexpr"      shift, and go to state 10
    "const"          shift, and go to state 11
    "volatile"       shift, and go to state 12
    "friend"         shift, and go to state 13
    "typedef"        shift, and go to state 14
    "consteval"      shift, and go to state 15
    "constinit"      shift, and go to state 16
    "inline"         shift, and go to state 159
    "decltype"       shift, and go to state 18
    "enum"           shift, and go to state 19
    "explicit"       shift, and go to state 20
    "extern"         shift, and go to state 160
    "namespace"      shift, and go to state 1209
    "char"           shift, and go to state 27
    "char8_t"        shift, and go to state 28
    "char16_t"       shift, and go to state 29
    "char32_t"       shift, and go to state 30
    "wchar_t"        shift, and go to state 31
    "bool"           shift, and go to state 32
    "short"          shift, and go to state 33
    "int"            shift, and go to state 34
    "long"           shift, and go to state 35
    "signed"         shift, and go to state 36
    "unsigned"       shift, and go to state 37
    "float"          shift, and go to state 38
    "double"         shift, and go to state 39
    "void"           shift, and go to state 40
    "static_assert"  shift, and go to state 41
    "static"         shift, and go to state 42
    "thread_local"   shift, and go to state 43
    "mutable"        shift, and go to state 44
    "typename"       shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration            go to state 46
    asm-declaration              go to state 47
    attribute-specifier-seq      go to state 1210
    attribute-specifier-seq-opt  go to state 1211
    block-declaration            go to state 1212
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 58
    declaration-statement        go to state 1213
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 69
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    labeled-statement            go to state 1214
    namespace-alias              go to state 86
    namespace-alias-definition   go to state 87
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    opaque-enum-declaration      go to state 94
    placeholder-type-specifier   go to state 95
    simple-declaration           go to state 96
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    statement                    go to state 1490
    static_assert-declaration    go to state 99
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    using-declaration            go to state 112
    using-directive              go to state 113
    using-enum-declaration       go to state 114


State 1434

  899 try-block: "try" compound-statement • handler-seq

    "catch"  shift, and go to state 1467

    handler      go to state 1468
    handler-seq  go to state 1491


State 1435

  475 iteration-statement: "while" '(' • condition ')' statement

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    '\''        reduce using rule 262 (encoding-prefix-opt)
    "::"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    '['         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    '"'         reduce using rule 262 (encoding-prefix-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"      [reduce using rule 902 (type-constraint-opt)]
    "char"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"   [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"   [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    'R'         reduce using rule 262 (encoding-prefix-opt)
    "typename"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    attribute-specifier-seq              go to state 185
    attribute-specifier-seq-opt          go to state 1492
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    condition                            go to state 1493
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1494
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1436

  476 iteration-statement: "do" statement • "while" '(' expression ')' ';'

    "while"  shift, and go to state 1495


State 1437

  477 iteration-statement: "for" '(' • init-statement condition-opt ';' expression-opt ')' statement
  478                    | "for" '(' • init-statement-opt for-range-declaration ':' for-range-initializer ')' statement

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    "using"             shift, and go to state 1496
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    "virtual"           shift, and go to state 5
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "constexpr"         shift, and go to state 10
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "friend"            shift, and go to state 13
    "typedef"           shift, and go to state 14
    "consteval"         shift, and go to state 15
    "constinit"         shift, and go to state 16
    "inline"            shift, and go to state 159
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 19
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    "explicit"          shift, and go to state 20
    "extern"            shift, and go to state 160
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "static"            shift, and go to state 42
    "thread_local"      shift, and go to state 43
    "mutable"           shift, and go to state 44
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 451 (init-statement-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    ';'             reduce using rule 321 (expression-opt)
    "alignas"       reduce using rule 57 (attribute-specifier-seq-opt)
    "alignas"       [reduce using rule 451 (init-statement-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 451 (init-statement-opt)]
    '['             [reduce using rule 57 (attribute-specifier-seq-opt)]
    '['             [reduce using rule 451 (init-statement-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 451 (init-statement-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 451 (init-statement-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 451 (init-statement-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 451 (init-statement-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 451 (init-statement-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 451 (init-statement-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 451 (init-statement-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 451 (init-statement-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 451 (init-statement-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 451 (init-statement-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 451 (init-statement-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 451 (init-statement-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 451 (init-statement-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "delete"        reduce using rule 793 (scope-opt)
    '.'             reduce using rule 246 (digit-sequence-opt)
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "enum"          [reduce using rule 451 (init-statement-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 451 (init-statement-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 451 (init-statement-opt)]
    "new"           reduce using rule 793 (scope-opt)
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 451 (init-statement-opt)]
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char"          [reduce using rule 451 (init-statement-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 451 (init-statement-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 451 (init-statement-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 451 (init-statement-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 451 (init-statement-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 451 (init-statement-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 451 (init-statement-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 451 (init-statement-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 451 (init-statement-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 451 (init-statement-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 451 (init-statement-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 451 (init-statement-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 451 (init-statement-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 451 (init-statement-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 451 (init-statement-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 451 (init-statement-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 451 (init-statement-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 451 (init-statement-opt)]
    $default        reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    alias-declaration                    go to state 1497
    and-expression                       go to state 286
    assignment-expression                go to state 287
    attribute-specifier-seq              go to state 1210
    attribute-specifier-seq-opt          go to state 1498
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-head                           go to state 52
    class-key                            go to state 53
    class-name                           go to state 54
    class-specifier                      go to state 55
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decl-specifier                       go to state 57
    decl-specifier-seq                   go to state 58
    decltype-specifier                   go to state 62
    defining-type-specifier              go to state 64
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-head                            go to state 68
    enum-key                             go to state 162
    enum-name                            go to state 70
    enum-specifier                       go to state 71
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    explicit-specifier                   go to state 163
    expression                           go to state 1347
    expression-opt                       go to state 1348
    expression-statement                 go to state 1499
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    function-specifier                   go to state 79
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    init-statement                       go to state 1500
    init-statement-opt                   go to state 1501
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-declaration                   go to state 1502
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    storage-class-specifier              go to state 100
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    type-specifier                       go to state 108
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1438

  479 jump-statement: "break" ';' •

    $default  reduce using rule 479 (jump-statement)


State 1439

  480 jump-statement: "continue" ';' •

    $default  reduce using rule 480 (jump-statement)


State 1440

  481 jump-statement: "return" expr-or-braced-init-list-opt • ';'

    ';'  shift, and go to state 1503


State 1441

  483 jump-statement: "goto" IDENTIFIER • ';'

    ';'  shift, and go to state 1504


State 1442

  485 labeled-statement: attribute-specifier-seq-opt "case" constant-expression • ':' statement

    ':'  shift, and go to state 1505


State 1443

  157 constexpr-opt: "constexpr" •

    $default  reduce using rule 157 (constexpr-opt)


State 1444

  294 exclamation-opt: '!' •

    $default  reduce using rule 294 (exclamation-opt)


State 1445

  795 selection-statement: "if" constexpr-opt • '(' init-statement-opt condition ')' statement
  796                    | "if" constexpr-opt • '(' init-statement-opt condition ')' statement "else" statement

    '('  shift, and go to state 1506


State 1446

  797 selection-statement: "if" exclamation-opt • "consteval" compound-statement
  798                    | "if" exclamation-opt • "consteval" compound-statement "else" statement

    "consteval"  shift, and go to state 1507


State 1447

  799 selection-statement: "switch" '(' • init-statement-opt condition ')' statement

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    "using"             shift, and go to state 1496
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    "virtual"           shift, and go to state 5
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "constexpr"         shift, and go to state 10
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "friend"            shift, and go to state 13
    "typedef"           shift, and go to state 14
    "consteval"         shift, and go to state 15
    "constinit"         shift, and go to state 16
    "inline"            shift, and go to state 159
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 19
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    "explicit"          shift, and go to state 20
    "extern"            shift, and go to state 160
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "static"            shift, and go to state 42
    "thread_local"      shift, and go to state 43
    "mutable"           shift, and go to state 44
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER          [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER          [reduce using rule 451 (init-statement-opt)]
    IDENTIFIER          [reduce using rule 581 (nested-name-specifier-opt)]
    '+'                 [reduce using rule 451 (init-statement-opt)]
    '-'                 [reduce using rule 451 (init-statement-opt)]
    ';'                 reduce using rule 321 (expression-opt)
    "alignas"           reduce using rule 57 (attribute-specifier-seq-opt)
    "alignas"           [reduce using rule 451 (init-statement-opt)]
    '('                 [reduce using rule 451 (init-statement-opt)]
    '&'                 [reduce using rule 451 (init-statement-opt)]
    '\''                reduce using rule 262 (encoding-prefix-opt)
    '\''                [reduce using rule 451 (init-statement-opt)]
    "::"                [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"                [reduce using rule 451 (init-statement-opt)]
    '['                 [reduce using rule 57 (attribute-specifier-seq-opt)]
    '['                 [reduce using rule 451 (init-statement-opt)]
    "co_await"          [reduce using rule 451 (init-statement-opt)]
    "virtual"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"           [reduce using rule 451 (init-statement-opt)]
    '0'                 [reduce using rule 451 (init-statement-opt)]
    '1'                 [reduce using rule 451 (init-statement-opt)]
    "0b"                [reduce using rule 451 (init-statement-opt)]
    "0B"                [reduce using rule 451 (init-statement-opt)]
    "false"             [reduce using rule 451 (init-statement-opt)]
    "true"              [reduce using rule 451 (init-statement-opt)]
    "class"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"             [reduce using rule 451 (init-statement-opt)]
    "struct"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"            [reduce using rule 451 (init-statement-opt)]
    "union"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"             [reduce using rule 451 (init-statement-opt)]
    "constexpr"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"         [reduce using rule 451 (init-statement-opt)]
    "operator"          [reduce using rule 451 (init-statement-opt)]
    "const"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"             [reduce using rule 451 (init-statement-opt)]
    "volatile"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"          [reduce using rule 451 (init-statement-opt)]
    "friend"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"            [reduce using rule 451 (init-statement-opt)]
    "typedef"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"           [reduce using rule 451 (init-statement-opt)]
    "consteval"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"         [reduce using rule 451 (init-statement-opt)]
    "constinit"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"         [reduce using rule 451 (init-statement-opt)]
    "inline"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"            [reduce using rule 451 (init-statement-opt)]
    "decltype"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"          [reduce using rule 451 (init-statement-opt)]
    "decltype"          [reduce using rule 902 (type-constraint-opt)]
    "delete"            reduce using rule 451 (init-statement-opt)
    "delete"            [reduce using rule 793 (scope-opt)]
    '.'                 reduce using rule 246 (digit-sequence-opt)
    '.'                 [reduce using rule 451 (init-statement-opt)]
    '2'                 [reduce using rule 451 (init-statement-opt)]
    '3'                 [reduce using rule 451 (init-statement-opt)]
    '4'                 [reduce using rule 451 (init-statement-opt)]
    '5'                 [reduce using rule 451 (init-statement-opt)]
    '6'                 [reduce using rule 451 (init-statement-opt)]
    '7'                 [reduce using rule 451 (init-statement-opt)]
    '8'                 [reduce using rule 451 (init-statement-opt)]
    '9'                 [reduce using rule 451 (init-statement-opt)]
    "enum"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    "enum"              [reduce using rule 451 (init-statement-opt)]
    "u8"                [reduce using rule 451 (init-statement-opt)]
    'u'                 [reduce using rule 451 (init-statement-opt)]
    'U'                 [reduce using rule 451 (init-statement-opt)]
    'L'                 [reduce using rule 451 (init-statement-opt)]
    '!'                 [reduce using rule 451 (init-statement-opt)]
    "explicit"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"          [reduce using rule 451 (init-statement-opt)]
    "extern"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"            [reduce using rule 451 (init-statement-opt)]
    '*'                 [reduce using rule 451 (init-statement-opt)]
    '"'                 reduce using rule 262 (encoding-prefix-opt)
    '"'                 [reduce using rule 451 (init-statement-opt)]
    "0x"                [reduce using rule 451 (init-statement-opt)]
    "0X"                [reduce using rule 451 (init-statement-opt)]
    "requires"          [reduce using rule 451 (init-statement-opt)]
    "new"               reduce using rule 451 (init-statement-opt)
    "new"               [reduce using rule 793 (scope-opt)]
    "noexcept"          [reduce using rule 451 (init-statement-opt)]
    '~'                 [reduce using rule 451 (init-statement-opt)]
    "++"                [reduce using rule 451 (init-statement-opt)]
    "--"                [reduce using rule 451 (init-statement-opt)]
    "auto"              reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"              [reduce using rule 451 (init-statement-opt)]
    "auto"              [reduce using rule 902 (type-constraint-opt)]
    "nullptr"           [reduce using rule 451 (init-statement-opt)]
    "dynamic_cast"      [reduce using rule 451 (init-statement-opt)]
    "static_cast"       [reduce using rule 451 (init-statement-opt)]
    "reinterpret_cast"  [reduce using rule 451 (init-statement-opt)]
    "const_cast"        [reduce using rule 451 (init-statement-opt)]
    "typeid"            [reduce using rule 451 (init-statement-opt)]
    "this"              [reduce using rule 451 (init-statement-opt)]
    "char"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char"              [reduce using rule 451 (init-statement-opt)]
    "char8_t"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"           [reduce using rule 451 (init-statement-opt)]
    "char16_t"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"          [reduce using rule 451 (init-statement-opt)]
    "char32_t"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"          [reduce using rule 451 (init-statement-opt)]
    "wchar_t"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"           [reduce using rule 451 (init-statement-opt)]
    "bool"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"              [reduce using rule 451 (init-statement-opt)]
    "short"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"             [reduce using rule 451 (init-statement-opt)]
    "int"               [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"               [reduce using rule 451 (init-statement-opt)]
    "long"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"              [reduce using rule 451 (init-statement-opt)]
    "signed"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"            [reduce using rule 451 (init-statement-opt)]
    "unsigned"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"          [reduce using rule 451 (init-statement-opt)]
    "float"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"             [reduce using rule 451 (init-statement-opt)]
    "double"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"            [reduce using rule 451 (init-statement-opt)]
    "void"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"              [reduce using rule 451 (init-statement-opt)]
    "static"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"            [reduce using rule 451 (init-statement-opt)]
    "thread_local"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"      [reduce using rule 451 (init-statement-opt)]
    "mutable"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"           [reduce using rule 451 (init-statement-opt)]
    'R'                 reduce using rule 262 (encoding-prefix-opt)
    'R'                 [reduce using rule 451 (init-statement-opt)]
    "throw"             [reduce using rule 451 (init-statement-opt)]
    "typename"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"          [reduce using rule 451 (init-statement-opt)]
    "sizeof"            [reduce using rule 451 (init-statement-opt)]
    "alignof"           [reduce using rule 451 (init-statement-opt)]
    "co_yield"          [reduce using rule 451 (init-statement-opt)]
    $default            reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    alias-declaration                    go to state 1497
    and-expression                       go to state 286
    assignment-expression                go to state 287
    attribute-specifier-seq              go to state 1210
    attribute-specifier-seq-opt          go to state 1498
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-head                           go to state 52
    class-key                            go to state 53
    class-name                           go to state 54
    class-specifier                      go to state 55
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decl-specifier                       go to state 57
    decl-specifier-seq                   go to state 58
    decltype-specifier                   go to state 62
    defining-type-specifier              go to state 64
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-head                            go to state 68
    enum-key                             go to state 162
    enum-name                            go to state 70
    enum-specifier                       go to state 71
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    explicit-specifier                   go to state 163
    expression                           go to state 1347
    expression-opt                       go to state 1348
    expression-statement                 go to state 1499
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    function-specifier                   go to state 79
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    init-statement                       go to state 1508
    init-statement-opt                   go to state 1509
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-declaration                   go to state 1502
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    storage-class-specifier              go to state 100
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    type-specifier                       go to state 108
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1448

  323 expression-statement: expression-opt ';' •

    $default  reduce using rule 323 (expression-statement)


State 1449

  590 new-expression: scope-opt "new" new-placement-opt '(' type-id ')' • new-initializer-opt

    '('  shift, and go to state 1360
    '{'  shift, and go to state 435

    '{'       [reduce using rule 593 (new-initializer-opt)]
    $default  reduce using rule 593 (new-initializer-opt)

    braced-init-list     go to state 1361
    new-initializer      go to state 1362
    new-initializer-opt  go to state 1510


State 1450

  591 new-initializer: '(' expression-list-opt • ')'

    ')'  shift, and go to state 1511


State 1451

  628 noptr-new-declarator: '[' expression-opt • ']' attribute-specifier-seq-opt

    ']'  shift, and go to state 1512


State 1452

  629 noptr-new-declarator: noptr-new-declarator '[' • constant-expression ']' attribute-specifier-seq-opt

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 354
    constant-expression                  go to state 1513
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 356
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350


State 1453

  585 new-declarator: ptr-operator new-declarator-opt •

    $default  reduce using rule 585 (new-declarator)


State 1454

  396 hex-quad: hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit •

    $default  reduce using rule 396 (hex-quad)


State 1455

  756 r-char-sequence: r-char-sequence r-char •

    $default  reduce using rule 756 (r-char-sequence)


State 1456

  759 raw-string: '"' d-char-sequence-opt '(' r-char-sequence-opt ')' • d-char-sequence-opt '"'

    EXCEPT_SPACE_PARENTHESIS_REVERSE_SOLIDUS_TABULATION_LINE_TABULATION_FORM_FEED_AND_NEW_LINE  shift, and go to state 1048

    $default  reduce using rule 180 (d-char-sequence-opt)

    d-char               go to state 1049
    d-char-sequence      go to state 1050
    d-char-sequence-opt  go to state 1514


State 1457

  583 nested-namespace-definition: "namespace" enclosing-namespace-specifier "::" inline-opt IDENTIFIER '{' namespace-body '}' •

    $default  reduce using rule 583 (nested-namespace-definition)


State 1458

   49 attribute-list: attribute-list ',' attribute "..." •

    $default  reduce using rule 49 (attribute-list)


State 1459

   65 balanced-token: '(' balanced-token-seq-opt • ')'

    ')'  shift, and go to state 1515


State 1460

   66 balanced-token: '[' balanced-token-seq-opt • ']'

    ']'  shift, and go to state 1516


State 1461

   67 balanced-token: '{' balanced-token-seq-opt • '}'

    '}'  shift, and go to state 1517


State 1462

   70 balanced-token-seq: balanced-token-seq balanced-token •

    $default  reduce using rule 70 (balanced-token-seq)


State 1463

   42 attribute-argument-clause: '(' balanced-token-seq-opt ')' •

    $default  reduce using rule 42 (attribute-argument-clause)


State 1464

  813 simple-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt '[' identifier-list ']' initializer ';' •

    $default  reduce using rule 813 (simple-declaration)


State 1465

  521 mem-initializer: mem-initializer-id '(' expression-list-opt • ')'

    ')'  shift, and go to state 1518


State 1466

  526 mem-initializer-list: mem-initializer-list ',' mem-initializer • eclipse-opt

    "..."  shift, and go to state 169

    $default  reduce using rule 248 (eclipse-opt)

    eclipse-opt  go to state 1519


State 1467

  387 handler: "catch" • '(' exception-declaration ')' compound-statement

    '('  shift, and go to state 1520


State 1468

  388 handler-seq: handler • handler-seq-opt

    "catch"  shift, and go to state 1467

    $default  reduce using rule 389 (handler-seq-opt)

    handler          go to state 1468
    handler-seq      go to state 1521
    handler-seq-opt  go to state 1522


State 1469

  382 function-try-block: "try" ctor-initializer-opt compound-statement handler-seq •

    $default  reduce using rule 382 (function-try-block)


State 1470

  702 parameters-and-qualifiers: '(' parameter-declaration-clause ')' cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt • attribute-specifier-seq-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 1523


State 1471

  746 pure-specifier: '=' '0' •

    $default  reduce using rule 746 (pure-specifier)


State 1472

  541 member-declarator: identifier-opt attribute-specifier-seq-opt ':' constant-expression • brace-or-equal-initializer-opt

    '='  shift, and go to state 433
    '{'  shift, and go to state 435

    $default  reduce using rule 103 (brace-or-equal-initializer-opt)

    brace-or-equal-initializer      go to state 1266
    brace-or-equal-initializer-opt  go to state 1524
    braced-init-list                go to state 438


State 1473

  539 member-declarator: declarator requires-clause •

    $default  reduce using rule 539 (member-declarator)


State 1474

  538 member-declarator: declarator virt-specifier-seq-opt • pure-specifier-opt

    '='  shift, and go to state 1525

    $default  reduce using rule 747 (pure-specifier-opt)

    pure-specifier      go to state 1399
    pure-specifier-opt  go to state 1400


State 1475

  221 deduction-guide: explicit-specifier-opt template-name '(' parameter-declaration-clause ')' "->" simple-template-id ';' •

    $default  reduce using rule 221 (deduction-guide)


State 1476

  733 private-module-fragment: "module-keyword" ':' "private" ';' declaration-seq-opt •

    $default  reduce using rule 733 (private-module-fragment)


State 1477

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  617 noptr-abstract-declarator: noptr-abstract-declarator-opt '[' constant-expression-opt ']' attribute-specifier-seq-opt •

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    '['       [reduce using rule 617 (noptr-abstract-declarator)]
    $default  reduce using rule 617 (noptr-abstract-declarator)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 1478

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  622 noptr-abstract-pack-declarator: noptr-abstract-pack-declarator '[' constant-expression-opt ']' attribute-specifier-seq-opt •

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    '['       [reduce using rule 622 (noptr-abstract-pack-declarator)]
    $default  reduce using rule 622 (noptr-abstract-pack-declarator)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 1479

  336 fold-expression: '(' cast-expression fold-operator "..." fold-operator cast-expression ')' •

    $default  reduce using rule 336 (fold-expression)


State 1480

  602 noexcept-opt: "noexcept" •

    $default  reduce using rule 602 (noexcept-opt)


State 1481

  141 compound-requirement: '{' expression '}' noexcept-opt • return-type-requirement-opt ';'

    "->"  shift, and go to state 1526

    $default  reduce using rule 784 (return-type-requirement-opt)

    return-type-requirement      go to state 1527
    return-type-requirement-opt  go to state 1528


State 1482

  916 type-requirement: "typename" nested-name-specifier-opt type-name ';' •

    $default  reduce using rule 916 (type-requirement)


State 1483

  720 postfix-expression: "dynamic_cast" '<' type-id '>' '(' expression ')' •

    $default  reduce using rule 720 (postfix-expression)


State 1484

  721 postfix-expression: "static_cast" '<' type-id '>' '(' expression ')' •

    $default  reduce using rule 721 (postfix-expression)


State 1485

  722 postfix-expression: "reinterpret_cast" '<' type-id '>' '(' expression ')' •

    $default  reduce using rule 722 (postfix-expression)


State 1486

  723 postfix-expression: "const_cast" '<' type-id '>' '(' expression ')' •

    $default  reduce using rule 723 (postfix-expression)


State 1487

  495 lambda-expression: lambda-introducer '<' template-parameter-list '>' requires-clause-opt lambda-declarator compound-statement •

    $default  reduce using rule 495 (lambda-expression)


State 1488

  484 labeled-statement: attribute-specifier-seq-opt IDENTIFIER ':' statement •

    $default  reduce using rule 484 (labeled-statement)


State 1489

  168 coroutine-return-statement: "co_return" expr-or-braced-init-list-opt ';' •

    $default  reduce using rule 168 (coroutine-return-statement)


State 1490

  486 labeled-statement: attribute-specifier-seq-opt "default" ':' statement •

    $default  reduce using rule 486 (labeled-statement)


State 1491

  899 try-block: "try" compound-statement handler-seq •

    $default  reduce using rule 899 (try-block)


State 1492

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  146 condition: attribute-specifier-seq-opt • decl-specifier-seq declarator brace-or-equal-initializer

    IDENTIFIER      shift, and go to state 1
    "alignas"       shift, and go to state 165
    "::"            shift, and go to state 4
    '['             shift, and go to state 170
    "virtual"       shift, and go to state 5
    "class"         shift, and go to state 6
    "struct"        shift, and go to state 7
    "union"         shift, and go to state 8
    "constexpr"     shift, and go to state 10
    "const"         shift, and go to state 11
    "volatile"      shift, and go to state 12
    "friend"        shift, and go to state 13
    "typedef"       shift, and go to state 14
    "consteval"     shift, and go to state 15
    "constinit"     shift, and go to state 16
    "inline"        shift, and go to state 159
    "decltype"      shift, and go to state 18
    "enum"          shift, and go to state 19
    "explicit"      shift, and go to state 20
    "extern"        shift, and go to state 160
    "char"          shift, and go to state 27
    "char8_t"       shift, and go to state 28
    "char16_t"      shift, and go to state 29
    "char32_t"      shift, and go to state 30
    "wchar_t"       shift, and go to state 31
    "bool"          shift, and go to state 32
    "short"         shift, and go to state 33
    "int"           shift, and go to state 34
    "long"          shift, and go to state 35
    "signed"        shift, and go to state 36
    "unsigned"      shift, and go to state 37
    "float"         shift, and go to state 38
    "double"        shift, and go to state 39
    "void"          shift, and go to state 40
    "static"        shift, and go to state 42
    "thread_local"  shift, and go to state 43
    "mutable"       shift, and go to state 44
    "typename"      shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    alignment-specifier         go to state 173
    attribute-specifier         go to state 174
    class-head                  go to state 52
    class-key                   go to state 53
    class-name                  go to state 54
    class-specifier             go to state 55
    cv-qualifier                go to state 56
    decl-specifier              go to state 57
    decl-specifier-seq          go to state 1529
    decltype-specifier          go to state 62
    defining-type-specifier     go to state 64
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-head                   go to state 68
    enum-key                    go to state 162
    enum-name                   go to state 70
    enum-specifier              go to state 71
    explicit-specifier          go to state 163
    function-specifier          go to state 79
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    storage-class-specifier     go to state 100
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 108
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 1493

  475 iteration-statement: "while" '(' condition • ')' statement

    ')'  shift, and go to state 1530


State 1494

  145 condition: expression •
  317 expression: expression • ',' assignment-expression

    ','  shift, and go to state 620

    $default  reduce using rule 145 (condition)


State 1495

  476 iteration-statement: "do" statement "while" • '(' expression ')' ';'

    '('  shift, and go to state 1531


State 1496

   16 alias-declaration: "using" • IDENTIFIER attribute-specifier-seq-opt '=' defining-type-id ';'

    IDENTIFIER  shift, and go to state 115


State 1497

  450 init-statement: alias-declaration •

    $default  reduce using rule 450 (init-statement)


State 1498

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  813 simple-declaration: attribute-specifier-seq-opt • decl-specifier-seq ref-qualifier-opt '[' identifier-list ']' initializer ';'

    IDENTIFIER      shift, and go to state 1
    "alignas"       shift, and go to state 165
    "::"            shift, and go to state 4
    '['             shift, and go to state 170
    "virtual"       shift, and go to state 5
    "class"         shift, and go to state 6
    "struct"        shift, and go to state 7
    "union"         shift, and go to state 8
    "constexpr"     shift, and go to state 10
    "const"         shift, and go to state 11
    "volatile"      shift, and go to state 12
    "friend"        shift, and go to state 13
    "typedef"       shift, and go to state 14
    "consteval"     shift, and go to state 15
    "constinit"     shift, and go to state 16
    "inline"        shift, and go to state 159
    "decltype"      shift, and go to state 18
    "enum"          shift, and go to state 19
    "explicit"      shift, and go to state 20
    "extern"        shift, and go to state 160
    "char"          shift, and go to state 27
    "char8_t"       shift, and go to state 28
    "char16_t"      shift, and go to state 29
    "char32_t"      shift, and go to state 30
    "wchar_t"       shift, and go to state 31
    "bool"          shift, and go to state 32
    "short"         shift, and go to state 33
    "int"           shift, and go to state 34
    "long"          shift, and go to state 35
    "signed"        shift, and go to state 36
    "unsigned"      shift, and go to state 37
    "float"         shift, and go to state 38
    "double"        shift, and go to state 39
    "void"          shift, and go to state 40
    "static"        shift, and go to state 42
    "thread_local"  shift, and go to state 43
    "mutable"       shift, and go to state 44
    "typename"      shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    alignment-specifier         go to state 173
    attribute-specifier         go to state 174
    class-head                  go to state 52
    class-key                   go to state 53
    class-name                  go to state 54
    class-specifier             go to state 55
    cv-qualifier                go to state 56
    decl-specifier              go to state 57
    decl-specifier-seq          go to state 1346
    decltype-specifier          go to state 62
    defining-type-specifier     go to state 64
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-head                   go to state 68
    enum-key                    go to state 162
    enum-name                   go to state 70
    enum-specifier              go to state 71
    explicit-specifier          go to state 163
    function-specifier          go to state 79
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    storage-class-specifier     go to state 100
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 108
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 1499

  448 init-statement: expression-statement •

    $default  reduce using rule 448 (init-statement)


State 1500

  452 init-statement-opt: init-statement •
  477 iteration-statement: "for" '(' init-statement • condition-opt ';' expression-opt ')' statement

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 452 (init-statement-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    ';'             reduce using rule 147 (condition-opt)
    "alignas"       reduce using rule 57 (attribute-specifier-seq-opt)
    "alignas"       [reduce using rule 452 (init-statement-opt)]
    '\''            reduce using rule 262 (encoding-prefix-opt)
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 452 (init-statement-opt)]
    '['             [reduce using rule 57 (attribute-specifier-seq-opt)]
    '['             [reduce using rule 452 (init-statement-opt)]
    "virtual"       reduce using rule 57 (attribute-specifier-seq-opt)
    "virtual"       [reduce using rule 452 (init-statement-opt)]
    "class"         reduce using rule 57 (attribute-specifier-seq-opt)
    "class"         [reduce using rule 452 (init-statement-opt)]
    "struct"        reduce using rule 57 (attribute-specifier-seq-opt)
    "struct"        [reduce using rule 452 (init-statement-opt)]
    "union"         reduce using rule 57 (attribute-specifier-seq-opt)
    "union"         [reduce using rule 452 (init-statement-opt)]
    "constexpr"     reduce using rule 57 (attribute-specifier-seq-opt)
    "constexpr"     [reduce using rule 452 (init-statement-opt)]
    "const"         reduce using rule 57 (attribute-specifier-seq-opt)
    "const"         [reduce using rule 452 (init-statement-opt)]
    "volatile"      reduce using rule 57 (attribute-specifier-seq-opt)
    "volatile"      [reduce using rule 452 (init-statement-opt)]
    "friend"        reduce using rule 57 (attribute-specifier-seq-opt)
    "friend"        [reduce using rule 452 (init-statement-opt)]
    "typedef"       reduce using rule 57 (attribute-specifier-seq-opt)
    "typedef"       [reduce using rule 452 (init-statement-opt)]
    "consteval"     reduce using rule 57 (attribute-specifier-seq-opt)
    "consteval"     [reduce using rule 452 (init-statement-opt)]
    "constinit"     reduce using rule 57 (attribute-specifier-seq-opt)
    "constinit"     [reduce using rule 452 (init-statement-opt)]
    "inline"        reduce using rule 57 (attribute-specifier-seq-opt)
    "inline"        [reduce using rule 452 (init-statement-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 452 (init-statement-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "delete"        reduce using rule 793 (scope-opt)
    '.'             reduce using rule 246 (digit-sequence-opt)
    "enum"          reduce using rule 57 (attribute-specifier-seq-opt)
    "enum"          [reduce using rule 452 (init-statement-opt)]
    "explicit"      reduce using rule 57 (attribute-specifier-seq-opt)
    "explicit"      [reduce using rule 452 (init-statement-opt)]
    "extern"        reduce using rule 57 (attribute-specifier-seq-opt)
    "extern"        [reduce using rule 452 (init-statement-opt)]
    '"'             reduce using rule 262 (encoding-prefix-opt)
    "new"           reduce using rule 793 (scope-opt)
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 452 (init-statement-opt)]
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char"          [reduce using rule 452 (init-statement-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 452 (init-statement-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 452 (init-statement-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 452 (init-statement-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 452 (init-statement-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 452 (init-statement-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 452 (init-statement-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 452 (init-statement-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 452 (init-statement-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 452 (init-statement-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 452 (init-statement-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 452 (init-statement-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 452 (init-statement-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 452 (init-statement-opt)]
    "static"        reduce using rule 57 (attribute-specifier-seq-opt)
    "static"        [reduce using rule 452 (init-statement-opt)]
    "thread_local"  reduce using rule 57 (attribute-specifier-seq-opt)
    "thread_local"  [reduce using rule 452 (init-statement-opt)]
    "mutable"       reduce using rule 57 (attribute-specifier-seq-opt)
    "mutable"       [reduce using rule 452 (init-statement-opt)]
    'R'             reduce using rule 262 (encoding-prefix-opt)
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 452 (init-statement-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    attribute-specifier-seq              go to state 185
    attribute-specifier-seq-opt          go to state 1492
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    condition                            go to state 1532
    condition-opt                        go to state 1533
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1494
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1501

  478 iteration-statement: "for" '(' init-statement-opt • for-range-declaration ':' for-range-initializer ')' statement

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 1534
    for-range-declaration        go to state 1535


State 1502

  449 init-statement: simple-declaration •

    $default  reduce using rule 449 (init-statement)


State 1503

  481 jump-statement: "return" expr-or-braced-init-list-opt ';' •

    $default  reduce using rule 481 (jump-statement)


State 1504

  483 jump-statement: "goto" IDENTIFIER ';' •

    $default  reduce using rule 483 (jump-statement)


State 1505

  485 labeled-statement: attribute-specifier-seq-opt "case" constant-expression ':' • statement

    IDENTIFIER       shift, and go to state 1
    "using"          shift, and go to state 2
    "::"             shift, and go to state 4
    "virtual"        shift, and go to state 5
    "class"          shift, and go to state 6
    "struct"         shift, and go to state 7
    "union"          shift, and go to state 8
    "constexpr"      shift, and go to state 10
    "const"          shift, and go to state 11
    "volatile"       shift, and go to state 12
    "friend"         shift, and go to state 13
    "typedef"        shift, and go to state 14
    "consteval"      shift, and go to state 15
    "constinit"      shift, and go to state 16
    "inline"         shift, and go to state 159
    "decltype"       shift, and go to state 18
    "enum"           shift, and go to state 19
    "explicit"       shift, and go to state 20
    "extern"         shift, and go to state 160
    "namespace"      shift, and go to state 1209
    "char"           shift, and go to state 27
    "char8_t"        shift, and go to state 28
    "char16_t"       shift, and go to state 29
    "char32_t"       shift, and go to state 30
    "wchar_t"        shift, and go to state 31
    "bool"           shift, and go to state 32
    "short"          shift, and go to state 33
    "int"            shift, and go to state 34
    "long"           shift, and go to state 35
    "signed"         shift, and go to state 36
    "unsigned"       shift, and go to state 37
    "float"          shift, and go to state 38
    "double"         shift, and go to state 39
    "void"           shift, and go to state 40
    "static_assert"  shift, and go to state 41
    "static"         shift, and go to state 42
    "thread_local"   shift, and go to state 43
    "mutable"        shift, and go to state 44
    "typename"       shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration            go to state 46
    asm-declaration              go to state 47
    attribute-specifier-seq      go to state 1210
    attribute-specifier-seq-opt  go to state 1211
    block-declaration            go to state 1212
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 58
    declaration-statement        go to state 1213
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 69
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    labeled-statement            go to state 1214
    namespace-alias              go to state 86
    namespace-alias-definition   go to state 87
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    opaque-enum-declaration      go to state 94
    placeholder-type-specifier   go to state 95
    simple-declaration           go to state 96
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    statement                    go to state 1536
    static_assert-declaration    go to state 99
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    using-declaration            go to state 112
    using-directive              go to state 113
    using-enum-declaration       go to state 114


State 1506

  795 selection-statement: "if" constexpr-opt '(' • init-statement-opt condition ')' statement
  796                    | "if" constexpr-opt '(' • init-statement-opt condition ')' statement "else" statement

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    "using"             shift, and go to state 1496
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    "virtual"           shift, and go to state 5
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "class"             shift, and go to state 6
    "struct"            shift, and go to state 7
    "union"             shift, and go to state 8
    "constexpr"         shift, and go to state 10
    "operator"          shift, and go to state 256
    "const"             shift, and go to state 11
    "volatile"          shift, and go to state 12
    "friend"            shift, and go to state 13
    "typedef"           shift, and go to state 14
    "consteval"         shift, and go to state 15
    "constinit"         shift, and go to state 16
    "inline"            shift, and go to state 159
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "enum"              shift, and go to state 19
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    "explicit"          shift, and go to state 20
    "extern"            shift, and go to state 160
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "static"            shift, and go to state 42
    "thread_local"      shift, and go to state 43
    "mutable"           shift, and go to state 44
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER          [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER          [reduce using rule 451 (init-statement-opt)]
    IDENTIFIER          [reduce using rule 581 (nested-name-specifier-opt)]
    '+'                 [reduce using rule 451 (init-statement-opt)]
    '-'                 [reduce using rule 451 (init-statement-opt)]
    ';'                 reduce using rule 321 (expression-opt)
    "alignas"           reduce using rule 57 (attribute-specifier-seq-opt)
    "alignas"           [reduce using rule 451 (init-statement-opt)]
    '('                 [reduce using rule 451 (init-statement-opt)]
    '&'                 [reduce using rule 451 (init-statement-opt)]
    '\''                reduce using rule 262 (encoding-prefix-opt)
    '\''                [reduce using rule 451 (init-statement-opt)]
    "::"                [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"                [reduce using rule 451 (init-statement-opt)]
    '['                 [reduce using rule 57 (attribute-specifier-seq-opt)]
    '['                 [reduce using rule 451 (init-statement-opt)]
    "co_await"          [reduce using rule 451 (init-statement-opt)]
    "virtual"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"           [reduce using rule 451 (init-statement-opt)]
    '0'                 [reduce using rule 451 (init-statement-opt)]
    '1'                 [reduce using rule 451 (init-statement-opt)]
    "0b"                [reduce using rule 451 (init-statement-opt)]
    "0B"                [reduce using rule 451 (init-statement-opt)]
    "false"             [reduce using rule 451 (init-statement-opt)]
    "true"              [reduce using rule 451 (init-statement-opt)]
    "class"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"             [reduce using rule 451 (init-statement-opt)]
    "struct"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"            [reduce using rule 451 (init-statement-opt)]
    "union"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"             [reduce using rule 451 (init-statement-opt)]
    "constexpr"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"         [reduce using rule 451 (init-statement-opt)]
    "operator"          [reduce using rule 451 (init-statement-opt)]
    "const"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"             [reduce using rule 451 (init-statement-opt)]
    "volatile"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"          [reduce using rule 451 (init-statement-opt)]
    "friend"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"            [reduce using rule 451 (init-statement-opt)]
    "typedef"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"           [reduce using rule 451 (init-statement-opt)]
    "consteval"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"         [reduce using rule 451 (init-statement-opt)]
    "constinit"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"         [reduce using rule 451 (init-statement-opt)]
    "inline"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"            [reduce using rule 451 (init-statement-opt)]
    "decltype"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"          [reduce using rule 451 (init-statement-opt)]
    "decltype"          [reduce using rule 902 (type-constraint-opt)]
    "delete"            reduce using rule 451 (init-statement-opt)
    "delete"            [reduce using rule 793 (scope-opt)]
    '.'                 reduce using rule 246 (digit-sequence-opt)
    '.'                 [reduce using rule 451 (init-statement-opt)]
    '2'                 [reduce using rule 451 (init-statement-opt)]
    '3'                 [reduce using rule 451 (init-statement-opt)]
    '4'                 [reduce using rule 451 (init-statement-opt)]
    '5'                 [reduce using rule 451 (init-statement-opt)]
    '6'                 [reduce using rule 451 (init-statement-opt)]
    '7'                 [reduce using rule 451 (init-statement-opt)]
    '8'                 [reduce using rule 451 (init-statement-opt)]
    '9'                 [reduce using rule 451 (init-statement-opt)]
    "enum"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    "enum"              [reduce using rule 451 (init-statement-opt)]
    "u8"                [reduce using rule 451 (init-statement-opt)]
    'u'                 [reduce using rule 451 (init-statement-opt)]
    'U'                 [reduce using rule 451 (init-statement-opt)]
    'L'                 [reduce using rule 451 (init-statement-opt)]
    '!'                 [reduce using rule 451 (init-statement-opt)]
    "explicit"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"          [reduce using rule 451 (init-statement-opt)]
    "extern"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"            [reduce using rule 451 (init-statement-opt)]
    '*'                 [reduce using rule 451 (init-statement-opt)]
    '"'                 reduce using rule 262 (encoding-prefix-opt)
    '"'                 [reduce using rule 451 (init-statement-opt)]
    "0x"                [reduce using rule 451 (init-statement-opt)]
    "0X"                [reduce using rule 451 (init-statement-opt)]
    "requires"          [reduce using rule 451 (init-statement-opt)]
    "new"               reduce using rule 451 (init-statement-opt)
    "new"               [reduce using rule 793 (scope-opt)]
    "noexcept"          [reduce using rule 451 (init-statement-opt)]
    '~'                 [reduce using rule 451 (init-statement-opt)]
    "++"                [reduce using rule 451 (init-statement-opt)]
    "--"                [reduce using rule 451 (init-statement-opt)]
    "auto"              reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"              [reduce using rule 451 (init-statement-opt)]
    "auto"              [reduce using rule 902 (type-constraint-opt)]
    "nullptr"           [reduce using rule 451 (init-statement-opt)]
    "dynamic_cast"      [reduce using rule 451 (init-statement-opt)]
    "static_cast"       [reduce using rule 451 (init-statement-opt)]
    "reinterpret_cast"  [reduce using rule 451 (init-statement-opt)]
    "const_cast"        [reduce using rule 451 (init-statement-opt)]
    "typeid"            [reduce using rule 451 (init-statement-opt)]
    "this"              [reduce using rule 451 (init-statement-opt)]
    "char"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char"              [reduce using rule 451 (init-statement-opt)]
    "char8_t"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"           [reduce using rule 451 (init-statement-opt)]
    "char16_t"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"          [reduce using rule 451 (init-statement-opt)]
    "char32_t"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"          [reduce using rule 451 (init-statement-opt)]
    "wchar_t"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"           [reduce using rule 451 (init-statement-opt)]
    "bool"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"              [reduce using rule 451 (init-statement-opt)]
    "short"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"             [reduce using rule 451 (init-statement-opt)]
    "int"               [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"               [reduce using rule 451 (init-statement-opt)]
    "long"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"              [reduce using rule 451 (init-statement-opt)]
    "signed"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"            [reduce using rule 451 (init-statement-opt)]
    "unsigned"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"          [reduce using rule 451 (init-statement-opt)]
    "float"             [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"             [reduce using rule 451 (init-statement-opt)]
    "double"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"            [reduce using rule 451 (init-statement-opt)]
    "void"              [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"              [reduce using rule 451 (init-statement-opt)]
    "static"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"            [reduce using rule 451 (init-statement-opt)]
    "thread_local"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"      [reduce using rule 451 (init-statement-opt)]
    "mutable"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"           [reduce using rule 451 (init-statement-opt)]
    'R'                 reduce using rule 262 (encoding-prefix-opt)
    'R'                 [reduce using rule 451 (init-statement-opt)]
    "throw"             [reduce using rule 451 (init-statement-opt)]
    "typename"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"          [reduce using rule 451 (init-statement-opt)]
    "sizeof"            [reduce using rule 451 (init-statement-opt)]
    "alignof"           [reduce using rule 451 (init-statement-opt)]
    "co_yield"          [reduce using rule 451 (init-statement-opt)]
    $default            reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    alias-declaration                    go to state 1497
    and-expression                       go to state 286
    assignment-expression                go to state 287
    attribute-specifier-seq              go to state 1210
    attribute-specifier-seq-opt          go to state 1498
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-head                           go to state 52
    class-key                            go to state 53
    class-name                           go to state 54
    class-specifier                      go to state 55
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    cv-qualifier                         go to state 56
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decl-specifier                       go to state 57
    decl-specifier-seq                   go to state 58
    decltype-specifier                   go to state 62
    defining-type-specifier              go to state 64
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    elaborated-enum-specifier            go to state 65
    elaborated-type-specifier            go to state 66
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-head                            go to state 68
    enum-key                             go to state 162
    enum-name                            go to state 70
    enum-specifier                       go to state 71
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    explicit-specifier                   go to state 163
    expression                           go to state 1347
    expression-opt                       go to state 1348
    expression-statement                 go to state 1499
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    function-specifier                   go to state 79
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    init-statement                       go to state 1508
    init-statement-opt                   go to state 1537
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-declaration                   go to state 1502
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 466
    storage-class-specifier              go to state 100
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    type-specifier                       go to state 108
    typedef-name                         go to state 109
    typename-specifier                   go to state 473
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1507

  797 selection-statement: "if" exclamation-opt "consteval" • compound-statement
  798                    | "if" exclamation-opt "consteval" • compound-statement "else" statement

    '{'  shift, and go to state 983

    compound-statement  go to state 1538


State 1508

  452 init-statement-opt: init-statement •

    $default  reduce using rule 452 (init-statement-opt)


State 1509

  799 selection-statement: "switch" '(' init-statement-opt • condition ')' statement

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    '\''        reduce using rule 262 (encoding-prefix-opt)
    "::"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    '['         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    '"'         reduce using rule 262 (encoding-prefix-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"      [reduce using rule 902 (type-constraint-opt)]
    "char"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"   [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"   [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    'R'         reduce using rule 262 (encoding-prefix-opt)
    "typename"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    attribute-specifier-seq              go to state 185
    attribute-specifier-seq-opt          go to state 1492
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    condition                            go to state 1539
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1494
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1510

  590 new-expression: scope-opt "new" new-placement-opt '(' type-id ')' new-initializer-opt •

    $default  reduce using rule 590 (new-expression)


State 1511

  591 new-initializer: '(' expression-list-opt ')' •

    $default  reduce using rule 591 (new-initializer)


State 1512

  628 noptr-new-declarator: '[' expression-opt ']' • attribute-specifier-seq-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 1540


State 1513

  629 noptr-new-declarator: noptr-new-declarator '[' constant-expression • ']' attribute-specifier-seq-opt

    ']'  shift, and go to state 1541


State 1514

  759 raw-string: '"' d-char-sequence-opt '(' r-char-sequence-opt ')' d-char-sequence-opt • '"'

    '"'  shift, and go to state 1542


State 1515

   65 balanced-token: '(' balanced-token-seq-opt ')' •

    $default  reduce using rule 65 (balanced-token)


State 1516

   66 balanced-token: '[' balanced-token-seq-opt ']' •

    $default  reduce using rule 66 (balanced-token)


State 1517

   67 balanced-token: '{' balanced-token-seq-opt '}' •

    $default  reduce using rule 67 (balanced-token)


State 1518

  521 mem-initializer: mem-initializer-id '(' expression-list-opt ')' •

    $default  reduce using rule 521 (mem-initializer)


State 1519

  526 mem-initializer-list: mem-initializer-list ',' mem-initializer eclipse-opt •

    $default  reduce using rule 526 (mem-initializer-list)


State 1520

  387 handler: "catch" '(' • exception-declaration ')' compound-statement

    "..."  shift, and go to state 1543

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 1544
    exception-declaration        go to state 1545


State 1521

  390 handler-seq-opt: handler-seq •

    $default  reduce using rule 390 (handler-seq-opt)


State 1522

  388 handler-seq: handler handler-seq-opt •

    $default  reduce using rule 388 (handler-seq)


State 1523

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  702 parameters-and-qualifiers: '(' parameter-declaration-clause ')' cv-qualifier-seq-opt ref-qualifier-opt noexcept-specifier-opt attribute-specifier-seq-opt •

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    '['       [reduce using rule 702 (parameters-and-qualifiers)]
    $default  reduce using rule 702 (parameters-and-qualifiers)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 1524

  541 member-declarator: identifier-opt attribute-specifier-seq-opt ':' constant-expression brace-or-equal-initializer-opt •

    $default  reduce using rule 541 (member-declarator)


State 1525

  746 pure-specifier: '=' • '0'

    '0'  shift, and go to state 1471


State 1526

  783 return-type-requirement: "->" • type-constraint

    IDENTIFIER  shift, and go to state 1
    "::"        shift, and go to state 4
    "decltype"  shift, and go to state 18

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]

    class-name                 go to state 54
    decltype-specifier         go to state 126
    enum-name                  go to state 70
    namespace-alias            go to state 86
    namespace-name             go to state 89
    nested-name-specifier      go to state 127
    nested-name-specifier-opt  go to state 234
    simple-template-id         go to state 97
    template-name              go to state 103
    type-constraint            go to state 1546
    type-name                  go to state 107
    typedef-name               go to state 109


State 1527

  785 return-type-requirement-opt: return-type-requirement •

    $default  reduce using rule 785 (return-type-requirement-opt)


State 1528

  141 compound-requirement: '{' expression '}' noexcept-opt return-type-requirement-opt • ';'

    ';'  shift, and go to state 1547


State 1529

  146 condition: attribute-specifier-seq-opt decl-specifier-seq • declarator brace-or-equal-initializer

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 166
    '&'         shift, and go to state 167
    "..."       shift, and go to state 169
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    "::"        [reduce using rule 248 (eclipse-opt)]
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 248 (eclipse-opt)

    class-name             go to state 54
    declarator             go to state 1548
    declarator-id          go to state 178
    decltype-specifier     go to state 126
    eclipse-opt            go to state 179
    enum-name              go to state 70
    namespace-alias        go to state 86
    namespace-name         go to state 89
    nested-name-specifier  go to state 195
    noptr-declarator       go to state 181
    ptr-declarator         go to state 182
    ptr-operator           go to state 183
    simple-template-id     go to state 97
    template-name          go to state 103
    type-name              go to state 107
    typedef-name           go to state 109


State 1530

  475 iteration-statement: "while" '(' condition ')' • statement

    IDENTIFIER       shift, and go to state 1
    "using"          shift, and go to state 2
    "::"             shift, and go to state 4
    "virtual"        shift, and go to state 5
    "class"          shift, and go to state 6
    "struct"         shift, and go to state 7
    "union"          shift, and go to state 8
    "constexpr"      shift, and go to state 10
    "const"          shift, and go to state 11
    "volatile"       shift, and go to state 12
    "friend"         shift, and go to state 13
    "typedef"        shift, and go to state 14
    "consteval"      shift, and go to state 15
    "constinit"      shift, and go to state 16
    "inline"         shift, and go to state 159
    "decltype"       shift, and go to state 18
    "enum"           shift, and go to state 19
    "explicit"       shift, and go to state 20
    "extern"         shift, and go to state 160
    "namespace"      shift, and go to state 1209
    "char"           shift, and go to state 27
    "char8_t"        shift, and go to state 28
    "char16_t"       shift, and go to state 29
    "char32_t"       shift, and go to state 30
    "wchar_t"        shift, and go to state 31
    "bool"           shift, and go to state 32
    "short"          shift, and go to state 33
    "int"            shift, and go to state 34
    "long"           shift, and go to state 35
    "signed"         shift, and go to state 36
    "unsigned"       shift, and go to state 37
    "float"          shift, and go to state 38
    "double"         shift, and go to state 39
    "void"           shift, and go to state 40
    "static_assert"  shift, and go to state 41
    "static"         shift, and go to state 42
    "thread_local"   shift, and go to state 43
    "mutable"        shift, and go to state 44
    "typename"       shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration            go to state 46
    asm-declaration              go to state 47
    attribute-specifier-seq      go to state 1210
    attribute-specifier-seq-opt  go to state 1211
    block-declaration            go to state 1212
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 58
    declaration-statement        go to state 1213
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 69
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    labeled-statement            go to state 1214
    namespace-alias              go to state 86
    namespace-alias-definition   go to state 87
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    opaque-enum-declaration      go to state 94
    placeholder-type-specifier   go to state 95
    simple-declaration           go to state 96
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    statement                    go to state 1549
    static_assert-declaration    go to state 99
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    using-declaration            go to state 112
    using-directive              go to state 113
    using-enum-declaration       go to state 114


State 1531

  476 iteration-statement: "do" statement "while" '(' • expression ')' ';'

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1550
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1532

  148 condition-opt: condition •

    $default  reduce using rule 148 (condition-opt)


State 1533

  477 iteration-statement: "for" '(' init-statement condition-opt • ';' expression-opt ')' statement

    ';'  shift, and go to state 1551


State 1534

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  369 for-range-declaration: attribute-specifier-seq-opt • decl-specifier-seq declarator
  370                      | attribute-specifier-seq-opt • decl-specifier-seq ref-qualifier-opt '[' identifier-list ']'

    IDENTIFIER      shift, and go to state 1
    "alignas"       shift, and go to state 165
    "::"            shift, and go to state 4
    '['             shift, and go to state 170
    "virtual"       shift, and go to state 5
    "class"         shift, and go to state 6
    "struct"        shift, and go to state 7
    "union"         shift, and go to state 8
    "constexpr"     shift, and go to state 10
    "const"         shift, and go to state 11
    "volatile"      shift, and go to state 12
    "friend"        shift, and go to state 13
    "typedef"       shift, and go to state 14
    "consteval"     shift, and go to state 15
    "constinit"     shift, and go to state 16
    "inline"        shift, and go to state 159
    "decltype"      shift, and go to state 18
    "enum"          shift, and go to state 19
    "explicit"      shift, and go to state 20
    "extern"        shift, and go to state 160
    "char"          shift, and go to state 27
    "char8_t"       shift, and go to state 28
    "char16_t"      shift, and go to state 29
    "char32_t"      shift, and go to state 30
    "wchar_t"       shift, and go to state 31
    "bool"          shift, and go to state 32
    "short"         shift, and go to state 33
    "int"           shift, and go to state 34
    "long"          shift, and go to state 35
    "signed"        shift, and go to state 36
    "unsigned"      shift, and go to state 37
    "float"         shift, and go to state 38
    "double"        shift, and go to state 39
    "void"          shift, and go to state 40
    "static"        shift, and go to state 42
    "thread_local"  shift, and go to state 43
    "mutable"       shift, and go to state 44
    "typename"      shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    alignment-specifier         go to state 173
    attribute-specifier         go to state 174
    class-head                  go to state 52
    class-key                   go to state 53
    class-name                  go to state 54
    class-specifier             go to state 55
    cv-qualifier                go to state 56
    decl-specifier              go to state 57
    decl-specifier-seq          go to state 1552
    decltype-specifier          go to state 62
    defining-type-specifier     go to state 64
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-head                   go to state 68
    enum-key                    go to state 162
    enum-name                   go to state 70
    enum-specifier              go to state 71
    explicit-specifier          go to state 163
    function-specifier          go to state 79
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    storage-class-specifier     go to state 100
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 108
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 1535

  478 iteration-statement: "for" '(' init-statement-opt for-range-declaration • ':' for-range-initializer ')' statement

    ':'  shift, and go to state 1553


State 1536

  485 labeled-statement: attribute-specifier-seq-opt "case" constant-expression ':' statement •

    $default  reduce using rule 485 (labeled-statement)


State 1537

  795 selection-statement: "if" constexpr-opt '(' init-statement-opt • condition ')' statement
  796                    | "if" constexpr-opt '(' init-statement-opt • condition ')' statement "else" statement

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    '\''        reduce using rule 262 (encoding-prefix-opt)
    "::"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    '['         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    '"'         reduce using rule 262 (encoding-prefix-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"      [reduce using rule 902 (type-constraint-opt)]
    "char"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"   [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"   [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"    [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    'R'         reduce using rule 262 (encoding-prefix-opt)
    "typename"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default    reduce using rule 57 (attribute-specifier-seq-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    attribute-specifier-seq              go to state 185
    attribute-specifier-seq-opt          go to state 1492
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    condition                            go to state 1554
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1494
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1538

  797 selection-statement: "if" exclamation-opt "consteval" compound-statement •
  798                    | "if" exclamation-opt "consteval" compound-statement • "else" statement

    "else"  shift, and go to state 1555

    "else"    [reduce using rule 797 (selection-statement)]
    $default  reduce using rule 797 (selection-statement)


State 1539

  799 selection-statement: "switch" '(' init-statement-opt condition • ')' statement

    ')'  shift, and go to state 1556


State 1540

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  628 noptr-new-declarator: '[' expression-opt ']' attribute-specifier-seq-opt •

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    '['       [reduce using rule 628 (noptr-new-declarator)]
    $default  reduce using rule 628 (noptr-new-declarator)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 1541

  629 noptr-new-declarator: noptr-new-declarator '[' constant-expression ']' • attribute-specifier-seq-opt

    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 1557


State 1542

  759 raw-string: '"' d-char-sequence-opt '(' r-char-sequence-opt ')' d-char-sequence-opt '"' •

    $default  reduce using rule 759 (raw-string)


State 1543

  292 exception-declaration: "..." •

    $default  reduce using rule 292 (exception-declaration)


State 1544

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  290 exception-declaration: attribute-specifier-seq-opt • type-specifier-seq declarator
  291                      | attribute-specifier-seq-opt • type-specifier-seq abstract-declarator-opt

    IDENTIFIER  shift, and go to state 1
    "alignas"   shift, and go to state 165
    "::"        shift, and go to state 4
    '['         shift, and go to state 170
    "class"     shift, and go to state 6
    "struct"    shift, and go to state 7
    "union"     shift, and go to state 8
    "const"     shift, and go to state 11
    "volatile"  shift, and go to state 12
    "decltype"  shift, and go to state 18
    "enum"      shift, and go to state 116
    "char"      shift, and go to state 27
    "char8_t"   shift, and go to state 28
    "char16_t"  shift, and go to state 29
    "char32_t"  shift, and go to state 30
    "wchar_t"   shift, and go to state 31
    "bool"      shift, and go to state 32
    "short"     shift, and go to state 33
    "int"       shift, and go to state 34
    "long"      shift, and go to state 35
    "signed"    shift, and go to state 36
    "unsigned"  shift, and go to state 37
    "float"     shift, and go to state 38
    "double"    shift, and go to state 39
    "void"      shift, and go to state 40
    "typename"  shift, and go to state 45

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    $default    reduce using rule 902 (type-constraint-opt)

    alignment-specifier         go to state 173
    attribute-specifier         go to state 174
    class-key                   go to state 463
    class-name                  go to state 54
    cv-qualifier                go to state 56
    decltype-specifier          go to state 62
    elaborated-enum-specifier   go to state 65
    elaborated-type-specifier   go to state 66
    enum-name                   go to state 70
    namespace-alias             go to state 86
    namespace-name              go to state 89
    nested-name-specifier       go to state 90
    nested-name-specifier-opt   go to state 91
    placeholder-type-specifier  go to state 95
    simple-template-id          go to state 97
    simple-type-specifier       go to state 98
    template-name               go to state 103
    type-constraint             go to state 105
    type-constraint-opt         go to state 106
    type-name                   go to state 107
    type-specifier              go to state 471
    type-specifier-seq          go to state 1558
    typedef-name                go to state 109
    typename-specifier          go to state 110


State 1545

  387 handler: "catch" '(' exception-declaration • ')' compound-statement

    ')'  shift, and go to state 1559


State 1546

  783 return-type-requirement: "->" type-constraint •

    $default  reduce using rule 783 (return-type-requirement)


State 1547

  141 compound-requirement: '{' expression '}' noexcept-opt return-type-requirement-opt ';' •

    $default  reduce using rule 141 (compound-requirement)


State 1548

  146 condition: attribute-specifier-seq-opt decl-specifier-seq declarator • brace-or-equal-initializer

    '='  shift, and go to state 433
    '{'  shift, and go to state 435

    brace-or-equal-initializer  go to state 1560
    braced-init-list            go to state 438


State 1549

  475 iteration-statement: "while" '(' condition ')' statement •

    $default  reduce using rule 475 (iteration-statement)


State 1550

  317 expression: expression • ',' assignment-expression
  476 iteration-statement: "do" statement "while" '(' expression • ')' ';'

    ')'  shift, and go to state 1561
    ','  shift, and go to state 620


State 1551

  477 iteration-statement: "for" '(' init-statement condition-opt ';' • expression-opt ')' statement

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    ')'         reduce using rule 321 (expression-opt)
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expression                           go to state 1347
    expression-opt                       go to state 1562
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1552

  369 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq • declarator
  370                      | attribute-specifier-seq-opt decl-specifier-seq • ref-qualifier-opt '[' identifier-list ']'

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 166
    '&'         shift, and go to state 1563
    "..."       shift, and go to state 169
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 1564
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    "::"        [reduce using rule 248 (eclipse-opt)]
    '['         reduce using rule 762 (ref-qualifier-opt)
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 248 (eclipse-opt)

    class-name             go to state 54
    declarator             go to state 1565
    declarator-id          go to state 178
    decltype-specifier     go to state 126
    eclipse-opt            go to state 179
    enum-name              go to state 70
    namespace-alias        go to state 86
    namespace-name         go to state 89
    nested-name-specifier  go to state 195
    noptr-declarator       go to state 181
    ptr-declarator         go to state 182
    ptr-operator           go to state 183
    ref-qualifier          go to state 393
    ref-qualifier-opt      go to state 1566
    simple-template-id     go to state 97
    template-name          go to state 103
    type-name              go to state 107
    typedef-name           go to state 109


State 1553

  478 iteration-statement: "for" '(' init-statement-opt for-range-declaration ':' • for-range-initializer ')' statement

    IDENTIFIER          shift, and go to state 242
    '+'                 shift, and go to state 243
    '-'                 shift, and go to state 244
    '('                 shift, and go to state 245
    '&'                 shift, and go to state 246
    "::"                shift, and go to state 247
    '['                 shift, and go to state 248
    "co_await"          shift, and go to state 249
    '{'                 shift, and go to state 435
    '0'                 shift, and go to state 250
    '1'                 shift, and go to state 251
    "0b"                shift, and go to state 252
    "0B"                shift, and go to state 253
    "false"             shift, and go to state 254
    "true"              shift, and go to state 255
    "operator"          shift, and go to state 256
    "decltype"          shift, and go to state 18
    '2'                 shift, and go to state 257
    '3'                 shift, and go to state 258
    '4'                 shift, and go to state 259
    '5'                 shift, and go to state 260
    '6'                 shift, and go to state 261
    '7'                 shift, and go to state 262
    '8'                 shift, and go to state 263
    '9'                 shift, and go to state 264
    "u8"                shift, and go to state 133
    'u'                 shift, and go to state 134
    'U'                 shift, and go to state 135
    'L'                 shift, and go to state 136
    '!'                 shift, and go to state 265
    '*'                 shift, and go to state 266
    "0x"                shift, and go to state 267
    "0X"                shift, and go to state 268
    "requires"          shift, and go to state 269
    "noexcept"          shift, and go to state 270
    '~'                 shift, and go to state 271
    "++"                shift, and go to state 272
    "--"                shift, and go to state 273
    "nullptr"           shift, and go to state 274
    "dynamic_cast"      shift, and go to state 275
    "static_cast"       shift, and go to state 276
    "reinterpret_cast"  shift, and go to state 277
    "const_cast"        shift, and go to state 278
    "typeid"            shift, and go to state 279
    "this"              shift, and go to state 280
    "char"              shift, and go to state 27
    "char8_t"           shift, and go to state 28
    "char16_t"          shift, and go to state 29
    "char32_t"          shift, and go to state 30
    "wchar_t"           shift, and go to state 31
    "bool"              shift, and go to state 32
    "short"             shift, and go to state 33
    "int"               shift, and go to state 34
    "long"              shift, and go to state 35
    "signed"            shift, and go to state 36
    "unsigned"          shift, and go to state 37
    "float"             shift, and go to state 38
    "double"            shift, and go to state 39
    "void"              shift, and go to state 40
    "throw"             shift, and go to state 281
    "typename"          shift, and go to state 45
    "sizeof"            shift, and go to state 282
    "alignof"           shift, and go to state 283
    "co_yield"          shift, and go to state 284

    IDENTIFIER  [reduce using rule 581 (nested-name-specifier-opt)]
    "decltype"  [reduce using rule 902 (type-constraint-opt)]
    "delete"    reduce using rule 793 (scope-opt)
    '.'         reduce using rule 246 (digit-sequence-opt)
    "new"       reduce using rule 793 (scope-opt)
    "auto"      reduce using rule 902 (type-constraint-opt)
    $default    reduce using rule 262 (encoding-prefix-opt)

    additive-expression                  go to state 285
    and-expression                       go to state 286
    assignment-expression                go to state 287
    await-expression                     go to state 288
    binary-literal                       go to state 289
    boolean-literal                      go to state 290
    braced-init-list                     go to state 1429
    cast-expression                      go to state 291
    character-literal                    go to state 292
    class-name                           go to state 54
    compare-expression                   go to state 293
    conditional-expression               go to state 294
    conversion-function-id               go to state 295
    decimal-floating-point-literal       go to state 296
    decimal-literal                      go to state 297
    decltype-specifier                   go to state 62
    delete-expression                    go to state 298
    digit                                go to state 299
    digit-sequence                       go to state 300
    digit-sequence-opt                   go to state 301
    encoding-prefix                      go to state 137
    encoding-prefix-opt                  go to state 302
    enum-name                            go to state 70
    equality-expression                  go to state 303
    exclusive-or-expression              go to state 304
    expr-or-braced-init-list             go to state 1567
    expression                           go to state 1432
    floating-point-literal               go to state 306
    fold-expression                      go to state 307
    for-range-initializer                go to state 1568
    fractional-constant                  go to state 308
    hexadecimal-floating-point-literal   go to state 309
    hexadecimal-literal                  go to state 310
    hexadecimal-prefix                   go to state 311
    id-expression                        go to state 312
    inclusive-or-expression              go to state 313
    integer-literal                      go to state 314
    lambda-expression                    go to state 315
    lambda-introducer                    go to state 316
    literal                              go to state 317
    literal-operator-id                  go to state 318
    logical-and-expression               go to state 319
    logical-or-expression                go to state 320
    multiplicative-expression            go to state 321
    namespace-alias                      go to state 86
    namespace-name                       go to state 89
    nested-name-specifier                go to state 322
    nested-name-specifier-opt            go to state 91
    new-expression                       go to state 323
    noexcept-expression                  go to state 324
    nonzero-digit                        go to state 325
    octal-literal                        go to state 326
    operator-function-id                 go to state 327
    placeholder-type-specifier           go to state 95
    pm-expression                        go to state 328
    pointer-literal                      go to state 329
    postfix-expression                   go to state 330
    primary-expression                   go to state 331
    qualified-id                         go to state 332
    relational-expression                go to state 333
    requires-expression                  go to state 334
    scope-opt                            go to state 335
    shift-expression                     go to state 336
    simple-template-id                   go to state 337
    simple-type-specifier                go to state 338
    string-literal                       go to state 339
    template-id                          go to state 340
    template-name                        go to state 103
    throw-expression                     go to state 341
    type-constraint                      go to state 105
    type-constraint-opt                  go to state 106
    type-name                            go to state 107
    typedef-name                         go to state 109
    typename-specifier                   go to state 342
    unary-expression                     go to state 343
    unary-operator                       go to state 344
    unqualified-id                       go to state 345
    user-defined-character-literal       go to state 346
    user-defined-floating-point-literal  go to state 347
    user-defined-integer-literal         go to state 348
    user-defined-literal                 go to state 349
    user-defined-string-literal          go to state 350
    yield-expression                     go to state 351


State 1554

  795 selection-statement: "if" constexpr-opt '(' init-statement-opt condition • ')' statement
  796                    | "if" constexpr-opt '(' init-statement-opt condition • ')' statement "else" statement

    ')'  shift, and go to state 1569


State 1555

  798 selection-statement: "if" exclamation-opt "consteval" compound-statement "else" • statement

    IDENTIFIER       shift, and go to state 1
    "using"          shift, and go to state 2
    "::"             shift, and go to state 4
    "virtual"        shift, and go to state 5
    "class"          shift, and go to state 6
    "struct"         shift, and go to state 7
    "union"          shift, and go to state 8
    "constexpr"      shift, and go to state 10
    "const"          shift, and go to state 11
    "volatile"       shift, and go to state 12
    "friend"         shift, and go to state 13
    "typedef"        shift, and go to state 14
    "consteval"      shift, and go to state 15
    "constinit"      shift, and go to state 16
    "inline"         shift, and go to state 159
    "decltype"       shift, and go to state 18
    "enum"           shift, and go to state 19
    "explicit"       shift, and go to state 20
    "extern"         shift, and go to state 160
    "namespace"      shift, and go to state 1209
    "char"           shift, and go to state 27
    "char8_t"        shift, and go to state 28
    "char16_t"       shift, and go to state 29
    "char32_t"       shift, and go to state 30
    "wchar_t"        shift, and go to state 31
    "bool"           shift, and go to state 32
    "short"          shift, and go to state 33
    "int"            shift, and go to state 34
    "long"           shift, and go to state 35
    "signed"         shift, and go to state 36
    "unsigned"       shift, and go to state 37
    "float"          shift, and go to state 38
    "double"         shift, and go to state 39
    "void"           shift, and go to state 40
    "static_assert"  shift, and go to state 41
    "static"         shift, and go to state 42
    "thread_local"   shift, and go to state 43
    "mutable"        shift, and go to state 44
    "typename"       shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration            go to state 46
    asm-declaration              go to state 47
    attribute-specifier-seq      go to state 1210
    attribute-specifier-seq-opt  go to state 1211
    block-declaration            go to state 1212
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 58
    declaration-statement        go to state 1213
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 69
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    labeled-statement            go to state 1214
    namespace-alias              go to state 86
    namespace-alias-definition   go to state 87
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    opaque-enum-declaration      go to state 94
    placeholder-type-specifier   go to state 95
    simple-declaration           go to state 96
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    statement                    go to state 1570
    static_assert-declaration    go to state 99
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    using-declaration            go to state 112
    using-directive              go to state 113
    using-enum-declaration       go to state 114


State 1556

  799 selection-statement: "switch" '(' init-statement-opt condition ')' • statement

    IDENTIFIER       shift, and go to state 1
    "using"          shift, and go to state 2
    "::"             shift, and go to state 4
    "virtual"        shift, and go to state 5
    "class"          shift, and go to state 6
    "struct"         shift, and go to state 7
    "union"          shift, and go to state 8
    "constexpr"      shift, and go to state 10
    "const"          shift, and go to state 11
    "volatile"       shift, and go to state 12
    "friend"         shift, and go to state 13
    "typedef"        shift, and go to state 14
    "consteval"      shift, and go to state 15
    "constinit"      shift, and go to state 16
    "inline"         shift, and go to state 159
    "decltype"       shift, and go to state 18
    "enum"           shift, and go to state 19
    "explicit"       shift, and go to state 20
    "extern"         shift, and go to state 160
    "namespace"      shift, and go to state 1209
    "char"           shift, and go to state 27
    "char8_t"        shift, and go to state 28
    "char16_t"       shift, and go to state 29
    "char32_t"       shift, and go to state 30
    "wchar_t"        shift, and go to state 31
    "bool"           shift, and go to state 32
    "short"          shift, and go to state 33
    "int"            shift, and go to state 34
    "long"           shift, and go to state 35
    "signed"         shift, and go to state 36
    "unsigned"       shift, and go to state 37
    "float"          shift, and go to state 38
    "double"         shift, and go to state 39
    "void"           shift, and go to state 40
    "static_assert"  shift, and go to state 41
    "static"         shift, and go to state 42
    "thread_local"   shift, and go to state 43
    "mutable"        shift, and go to state 44
    "typename"       shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration            go to state 46
    asm-declaration              go to state 47
    attribute-specifier-seq      go to state 1210
    attribute-specifier-seq-opt  go to state 1211
    block-declaration            go to state 1212
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 58
    declaration-statement        go to state 1213
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 69
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    labeled-statement            go to state 1214
    namespace-alias              go to state 86
    namespace-alias-definition   go to state 87
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    opaque-enum-declaration      go to state 94
    placeholder-type-specifier   go to state 95
    simple-declaration           go to state 96
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    statement                    go to state 1571
    static_assert-declaration    go to state 99
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    using-declaration            go to state 112
    using-directive              go to state 113
    using-enum-declaration       go to state 114


State 1557

   56 attribute-specifier-seq: attribute-specifier-seq-opt • attribute-specifier
  629 noptr-new-declarator: noptr-new-declarator '[' constant-expression ']' attribute-specifier-seq-opt •

    "alignas"  shift, and go to state 165
    '['        shift, and go to state 170

    '['       [reduce using rule 629 (noptr-new-declarator)]
    $default  reduce using rule 629 (noptr-new-declarator)

    alignment-specifier  go to state 173
    attribute-specifier  go to state 174


State 1558

  290 exception-declaration: attribute-specifier-seq-opt type-specifier-seq • declarator
  291                      | attribute-specifier-seq-opt type-specifier-seq • abstract-declarator-opt

    IDENTIFIER  shift, and go to state 1
    '('         shift, and go to state 1150
    '&'         shift, and go to state 167
    "..."       shift, and go to state 1151
    "::"        shift, and go to state 4
    "&&"        shift, and go to state 171
    "decltype"  shift, and go to state 18
    '*'         shift, and go to state 172

    IDENTIFIER  [reduce using rule 248 (eclipse-opt)]
    '('         [reduce using rule 619 (noptr-abstract-declarator-opt)]
    ')'         reduce using rule 4 (abstract-declarator-opt)
    "::"        [reduce using rule 248 (eclipse-opt)]
    '['         reduce using rule 619 (noptr-abstract-declarator-opt)
    "decltype"  [reduce using rule 248 (eclipse-opt)]
    $default    reduce using rule 248 (eclipse-opt)

    abstract-declarator             go to state 829
    abstract-declarator-opt         go to state 1572
    abstract-pack-declarator        go to state 831
    class-name                      go to state 54
    declarator                      go to state 1573
    declarator-id                   go to state 178
    decltype-specifier              go to state 126
    eclipse-opt                     go to state 179
    enum-name                       go to state 70
    namespace-alias                 go to state 86
    namespace-name                  go to state 89
    nested-name-specifier           go to state 195
    noptr-abstract-declarator       go to state 832
    noptr-abstract-declarator-opt   go to state 833
    noptr-abstract-pack-declarator  go to state 834
    noptr-declarator                go to state 181
    ptr-abstract-declarator         go to state 835
    ptr-declarator                  go to state 182
    ptr-operator                    go to state 1154
    simple-template-id              go to state 97
    template-name                   go to state 103
    type-name                       go to state 107
    typedef-name                    go to state 109


State 1559

  387 handler: "catch" '(' exception-declaration ')' • compound-statement

    '{'  shift, and go to state 983

    compound-statement  go to state 1574


State 1560

  146 condition: attribute-specifier-seq-opt decl-specifier-seq declarator brace-or-equal-initializer •

    $default  reduce using rule 146 (condition)


State 1561

  476 iteration-statement: "do" statement "while" '(' expression ')' • ';'

    ';'  shift, and go to state 1575


State 1562

  477 iteration-statement: "for" '(' init-statement condition-opt ';' expression-opt • ')' statement

    ')'  shift, and go to state 1576


State 1563

  743 ptr-operator: '&' • attribute-specifier-seq-opt
  760 ref-qualifier: '&' •

    '['       reduce using rule 57 (attribute-specifier-seq-opt)
    '['       [reduce using rule 760 (ref-qualifier)]
    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 386


State 1564

  744 ptr-operator: "&&" • attribute-specifier-seq-opt
  761 ref-qualifier: "&&" •

    '['       reduce using rule 57 (attribute-specifier-seq-opt)
    '['       [reduce using rule 761 (ref-qualifier)]
    $default  reduce using rule 57 (attribute-specifier-seq-opt)

    attribute-specifier-seq      go to state 185
    attribute-specifier-seq-opt  go to state 389


State 1565

  369 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq declarator •

    $default  reduce using rule 369 (for-range-declaration)


State 1566

  370 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt • '[' identifier-list ']'

    '['  shift, and go to state 1577


State 1567

  371 for-range-initializer: expr-or-braced-init-list •

    $default  reduce using rule 371 (for-range-initializer)


State 1568

  478 iteration-statement: "for" '(' init-statement-opt for-range-declaration ':' for-range-initializer • ')' statement

    ')'  shift, and go to state 1578


State 1569

  795 selection-statement: "if" constexpr-opt '(' init-statement-opt condition ')' • statement
  796                    | "if" constexpr-opt '(' init-statement-opt condition ')' • statement "else" statement

    IDENTIFIER       shift, and go to state 1
    "using"          shift, and go to state 2
    "::"             shift, and go to state 4
    "virtual"        shift, and go to state 5
    "class"          shift, and go to state 6
    "struct"         shift, and go to state 7
    "union"          shift, and go to state 8
    "constexpr"      shift, and go to state 10
    "const"          shift, and go to state 11
    "volatile"       shift, and go to state 12
    "friend"         shift, and go to state 13
    "typedef"        shift, and go to state 14
    "consteval"      shift, and go to state 15
    "constinit"      shift, and go to state 16
    "inline"         shift, and go to state 159
    "decltype"       shift, and go to state 18
    "enum"           shift, and go to state 19
    "explicit"       shift, and go to state 20
    "extern"         shift, and go to state 160
    "namespace"      shift, and go to state 1209
    "char"           shift, and go to state 27
    "char8_t"        shift, and go to state 28
    "char16_t"       shift, and go to state 29
    "char32_t"       shift, and go to state 30
    "wchar_t"        shift, and go to state 31
    "bool"           shift, and go to state 32
    "short"          shift, and go to state 33
    "int"            shift, and go to state 34
    "long"           shift, and go to state 35
    "signed"         shift, and go to state 36
    "unsigned"       shift, and go to state 37
    "float"          shift, and go to state 38
    "double"         shift, and go to state 39
    "void"           shift, and go to state 40
    "static_assert"  shift, and go to state 41
    "static"         shift, and go to state 42
    "thread_local"   shift, and go to state 43
    "mutable"        shift, and go to state 44
    "typename"       shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration            go to state 46
    asm-declaration              go to state 47
    attribute-specifier-seq      go to state 1210
    attribute-specifier-seq-opt  go to state 1211
    block-declaration            go to state 1212
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 58
    declaration-statement        go to state 1213
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 69
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    labeled-statement            go to state 1214
    namespace-alias              go to state 86
    namespace-alias-definition   go to state 87
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    opaque-enum-declaration      go to state 94
    placeholder-type-specifier   go to state 95
    simple-declaration           go to state 96
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    statement                    go to state 1579
    static_assert-declaration    go to state 99
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    using-declaration            go to state 112
    using-directive              go to state 113
    using-enum-declaration       go to state 114


State 1570

  798 selection-statement: "if" exclamation-opt "consteval" compound-statement "else" statement •

    $default  reduce using rule 798 (selection-statement)


State 1571

  799 selection-statement: "switch" '(' init-statement-opt condition ')' statement •

    $default  reduce using rule 799 (selection-statement)


State 1572

  291 exception-declaration: attribute-specifier-seq-opt type-specifier-seq abstract-declarator-opt •

    $default  reduce using rule 291 (exception-declaration)


State 1573

  290 exception-declaration: attribute-specifier-seq-opt type-specifier-seq declarator •

    $default  reduce using rule 290 (exception-declaration)


State 1574

  387 handler: "catch" '(' exception-declaration ')' compound-statement •

    $default  reduce using rule 387 (handler)


State 1575

  476 iteration-statement: "do" statement "while" '(' expression ')' ';' •

    $default  reduce using rule 476 (iteration-statement)


State 1576

  477 iteration-statement: "for" '(' init-statement condition-opt ';' expression-opt ')' • statement

    IDENTIFIER       shift, and go to state 1
    "using"          shift, and go to state 2
    "::"             shift, and go to state 4
    "virtual"        shift, and go to state 5
    "class"          shift, and go to state 6
    "struct"         shift, and go to state 7
    "union"          shift, and go to state 8
    "constexpr"      shift, and go to state 10
    "const"          shift, and go to state 11
    "volatile"       shift, and go to state 12
    "friend"         shift, and go to state 13
    "typedef"        shift, and go to state 14
    "consteval"      shift, and go to state 15
    "constinit"      shift, and go to state 16
    "inline"         shift, and go to state 159
    "decltype"       shift, and go to state 18
    "enum"           shift, and go to state 19
    "explicit"       shift, and go to state 20
    "extern"         shift, and go to state 160
    "namespace"      shift, and go to state 1209
    "char"           shift, and go to state 27
    "char8_t"        shift, and go to state 28
    "char16_t"       shift, and go to state 29
    "char32_t"       shift, and go to state 30
    "wchar_t"        shift, and go to state 31
    "bool"           shift, and go to state 32
    "short"          shift, and go to state 33
    "int"            shift, and go to state 34
    "long"           shift, and go to state 35
    "signed"         shift, and go to state 36
    "unsigned"       shift, and go to state 37
    "float"          shift, and go to state 38
    "double"         shift, and go to state 39
    "void"           shift, and go to state 40
    "static_assert"  shift, and go to state 41
    "static"         shift, and go to state 42
    "thread_local"   shift, and go to state 43
    "mutable"        shift, and go to state 44
    "typename"       shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration            go to state 46
    asm-declaration              go to state 47
    attribute-specifier-seq      go to state 1210
    attribute-specifier-seq-opt  go to state 1211
    block-declaration            go to state 1212
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 58
    declaration-statement        go to state 1213
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 69
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    labeled-statement            go to state 1214
    namespace-alias              go to state 86
    namespace-alias-definition   go to state 87
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    opaque-enum-declaration      go to state 94
    placeholder-type-specifier   go to state 95
    simple-declaration           go to state 96
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    statement                    go to state 1580
    static_assert-declaration    go to state 99
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    using-declaration            go to state 112
    using-directive              go to state 113
    using-enum-declaration       go to state 114


State 1577

  370 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt '[' • identifier-list ']'

    IDENTIFIER  shift, and go to state 1073

    identifier-list  go to state 1581


State 1578

  478 iteration-statement: "for" '(' init-statement-opt for-range-declaration ':' for-range-initializer ')' • statement

    IDENTIFIER       shift, and go to state 1
    "using"          shift, and go to state 2
    "::"             shift, and go to state 4
    "virtual"        shift, and go to state 5
    "class"          shift, and go to state 6
    "struct"         shift, and go to state 7
    "union"          shift, and go to state 8
    "constexpr"      shift, and go to state 10
    "const"          shift, and go to state 11
    "volatile"       shift, and go to state 12
    "friend"         shift, and go to state 13
    "typedef"        shift, and go to state 14
    "consteval"      shift, and go to state 15
    "constinit"      shift, and go to state 16
    "inline"         shift, and go to state 159
    "decltype"       shift, and go to state 18
    "enum"           shift, and go to state 19
    "explicit"       shift, and go to state 20
    "extern"         shift, and go to state 160
    "namespace"      shift, and go to state 1209
    "char"           shift, and go to state 27
    "char8_t"        shift, and go to state 28
    "char16_t"       shift, and go to state 29
    "char32_t"       shift, and go to state 30
    "wchar_t"        shift, and go to state 31
    "bool"           shift, and go to state 32
    "short"          shift, and go to state 33
    "int"            shift, and go to state 34
    "long"           shift, and go to state 35
    "signed"         shift, and go to state 36
    "unsigned"       shift, and go to state 37
    "float"          shift, and go to state 38
    "double"         shift, and go to state 39
    "void"           shift, and go to state 40
    "static_assert"  shift, and go to state 41
    "static"         shift, and go to state 42
    "thread_local"   shift, and go to state 43
    "mutable"        shift, and go to state 44
    "typename"       shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration            go to state 46
    asm-declaration              go to state 47
    attribute-specifier-seq      go to state 1210
    attribute-specifier-seq-opt  go to state 1211
    block-declaration            go to state 1212
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 58
    declaration-statement        go to state 1213
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 69
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    labeled-statement            go to state 1214
    namespace-alias              go to state 86
    namespace-alias-definition   go to state 87
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    opaque-enum-declaration      go to state 94
    placeholder-type-specifier   go to state 95
    simple-declaration           go to state 96
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    statement                    go to state 1582
    static_assert-declaration    go to state 99
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    using-declaration            go to state 112
    using-directive              go to state 113
    using-enum-declaration       go to state 114


State 1579

  795 selection-statement: "if" constexpr-opt '(' init-statement-opt condition ')' statement •
  796                    | "if" constexpr-opt '(' init-statement-opt condition ')' statement • "else" statement

    "else"  shift, and go to state 1583

    "else"    [reduce using rule 795 (selection-statement)]
    $default  reduce using rule 795 (selection-statement)


State 1580

  477 iteration-statement: "for" '(' init-statement condition-opt ';' expression-opt ')' statement •

    $default  reduce using rule 477 (iteration-statement)


State 1581

  370 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt '[' identifier-list • ']'
  435 identifier-list: identifier-list • ',' IDENTIFIER

    ','  shift, and go to state 1251
    ']'  shift, and go to state 1584


State 1582

  478 iteration-statement: "for" '(' init-statement-opt for-range-declaration ':' for-range-initializer ')' statement •

    $default  reduce using rule 478 (iteration-statement)


State 1583

  796 selection-statement: "if" constexpr-opt '(' init-statement-opt condition ')' statement "else" • statement

    IDENTIFIER       shift, and go to state 1
    "using"          shift, and go to state 2
    "::"             shift, and go to state 4
    "virtual"        shift, and go to state 5
    "class"          shift, and go to state 6
    "struct"         shift, and go to state 7
    "union"          shift, and go to state 8
    "constexpr"      shift, and go to state 10
    "const"          shift, and go to state 11
    "volatile"       shift, and go to state 12
    "friend"         shift, and go to state 13
    "typedef"        shift, and go to state 14
    "consteval"      shift, and go to state 15
    "constinit"      shift, and go to state 16
    "inline"         shift, and go to state 159
    "decltype"       shift, and go to state 18
    "enum"           shift, and go to state 19
    "explicit"       shift, and go to state 20
    "extern"         shift, and go to state 160
    "namespace"      shift, and go to state 1209
    "char"           shift, and go to state 27
    "char8_t"        shift, and go to state 28
    "char16_t"       shift, and go to state 29
    "char32_t"       shift, and go to state 30
    "wchar_t"        shift, and go to state 31
    "bool"           shift, and go to state 32
    "short"          shift, and go to state 33
    "int"            shift, and go to state 34
    "long"           shift, and go to state 35
    "signed"         shift, and go to state 36
    "unsigned"       shift, and go to state 37
    "float"          shift, and go to state 38
    "double"         shift, and go to state 39
    "void"           shift, and go to state 40
    "static_assert"  shift, and go to state 41
    "static"         shift, and go to state 42
    "thread_local"   shift, and go to state 43
    "mutable"        shift, and go to state 44
    "typename"       shift, and go to state 45

    IDENTIFIER      [reduce using rule 57 (attribute-specifier-seq-opt)]
    IDENTIFIER      [reduce using rule 581 (nested-name-specifier-opt)]
    "using"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "::"            [reduce using rule 57 (attribute-specifier-seq-opt)]
    "virtual"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "class"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "struct"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "union"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constexpr"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "const"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "volatile"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "friend"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typedef"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "consteval"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "constinit"     [reduce using rule 57 (attribute-specifier-seq-opt)]
    "inline"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "decltype"      [reduce using rule 902 (type-constraint-opt)]
    "enum"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "explicit"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "extern"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "auto"          reduce using rule 57 (attribute-specifier-seq-opt)
    "auto"          [reduce using rule 902 (type-constraint-opt)]
    "char"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char8_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char16_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "char32_t"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "wchar_t"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "bool"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "short"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "int"           [reduce using rule 57 (attribute-specifier-seq-opt)]
    "long"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "signed"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "unsigned"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    "float"         [reduce using rule 57 (attribute-specifier-seq-opt)]
    "double"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "void"          [reduce using rule 57 (attribute-specifier-seq-opt)]
    "static"        [reduce using rule 57 (attribute-specifier-seq-opt)]
    "thread_local"  [reduce using rule 57 (attribute-specifier-seq-opt)]
    "mutable"       [reduce using rule 57 (attribute-specifier-seq-opt)]
    "typename"      [reduce using rule 57 (attribute-specifier-seq-opt)]
    $default        reduce using rule 57 (attribute-specifier-seq-opt)

    alias-declaration            go to state 46
    asm-declaration              go to state 47
    attribute-specifier-seq      go to state 1210
    attribute-specifier-seq-opt  go to state 1211
    block-declaration            go to state 1212
    class-head                   go to state 52
    class-key                    go to state 53
    class-name                   go to state 54
    class-specifier              go to state 55
    cv-qualifier                 go to state 56
    decl-specifier               go to state 57
    decl-specifier-seq           go to state 58
    declaration-statement        go to state 1213
    decltype-specifier           go to state 62
    defining-type-specifier      go to state 64
    elaborated-enum-specifier    go to state 65
    elaborated-type-specifier    go to state 66
    enum-head                    go to state 68
    enum-key                     go to state 69
    enum-name                    go to state 70
    enum-specifier               go to state 71
    explicit-specifier           go to state 163
    function-specifier           go to state 79
    labeled-statement            go to state 1214
    namespace-alias              go to state 86
    namespace-alias-definition   go to state 87
    namespace-name               go to state 89
    nested-name-specifier        go to state 90
    nested-name-specifier-opt    go to state 91
    opaque-enum-declaration      go to state 94
    placeholder-type-specifier   go to state 95
    simple-declaration           go to state 96
    simple-template-id           go to state 97
    simple-type-specifier        go to state 98
    statement                    go to state 1585
    static_assert-declaration    go to state 99
    storage-class-specifier      go to state 100
    template-name                go to state 103
    type-constraint              go to state 105
    type-constraint-opt          go to state 106
    type-name                    go to state 107
    type-specifier               go to state 108
    typedef-name                 go to state 109
    typename-specifier           go to state 110
    using-declaration            go to state 112
    using-directive              go to state 113
    using-enum-declaration       go to state 114


State 1584

  370 for-range-declaration: attribute-specifier-seq-opt decl-specifier-seq ref-qualifier-opt '[' identifier-list ']' •

    $default  reduce using rule 370 (for-range-declaration)


State 1585

  796 selection-statement: "if" constexpr-opt '(' init-statement-opt condition ')' statement "else" statement •

    $default  reduce using rule 796 (selection-statement)
